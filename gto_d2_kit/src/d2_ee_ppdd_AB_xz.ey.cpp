/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

#include "gto_d2_kit/d2_ee_ppdd_AB_xz.hpp"
#include <cmath>
/*

*/
#pragma GCC optimize("O0")
namespace {
    const double Pi = M_PI;
}
#pragma GCC optimize("O0")

void second_derivative_ee_1122_12_13(const double ae,
                                     const double xA,
                                     const double yA,
                                     const double zA,
                                     const double be,
                                     const double xB,
                                     const double yB,
                                     const double zB,
                                     const double ce,
                                     const double xC,
                                     const double yC,
                                     const double zC,
                                     const double de,
                                     const double xD,
                                     const double yD,
                                     const double zD,
                                     const double* const bs,
                                     double* const d2ee)
{
    const double p = ae + be;
    const double q = ce + de;
    const double xP = (ae * xA + be * xB) / p;
    const double yP = (ae * yA + be * yB) / p;
    const double zP = (ae * zA + be * zB) / p;
    const double xQ = (ce * xC + de * xD) / q;
    const double yQ = (ce * yC + de * yD) / q;
    const double zQ = (ce * zC + de * zD) / q;
    const double C46274 = ae * be;
    const double C46273 = ae + be;
    const double C46272 = 0 * be;
    const double C46271 = xA - xB;
    const double C46291 = zA - zB;
    const double C46309 = 0 * be;
    const double C46322 = xP - xQ;
    const double C46321 = zP - zQ;
    const double C46320 = p + q;
    const double C46319 = p * q;
    const double C46327 = bs[3];
    const double C46337 = bs[4];
    const double C46346 = bs[5];
    const double C46360 = bs[6];
    const double C46382 = bs[7];
    const double C46491 = yP - yQ;
    const double C46700 = bs[2];
    const double C117 = bs[0];
    const double C47126 = ce + de;
    const double C47125 = ce * de;
    const double C47124 = xC - xD;
    const double C47158 = yC - yD;
    const double C47176 = zC - zD;
    const double C47346 = yA - yB;
    const double C46275 = std::pow(C46273, 2);
    const double C47115 = 2 * C46273;
    const double C46276 = C46274 * C46271;
    const double C47106 = std::pow(C46271, 2);
    const double C47411 = C46271 * be;
    const double C47410 = C46271 * ae;
    const double C46310 = C46274 * C46291;
    const double C47380 = std::pow(C46291, 2);
    const double C47446 = C46291 * be;
    const double C47444 = C46291 * ae;
    const double C46347 = std::pow(C46322, 2);
    const double C46417 = C46322 * ae;
    const double C46329 = C46321 * be;
    const double C46328 = C46322 * C46321;
    const double C46533 = std::pow(C46321, 2);
    const double C46323 = 2 * C46319;
    const double C46500 = std::pow(C46491, 2);
    const double C47130 = 2 * C47126;
    const double C47129 = std::pow(C47126, 2);
    const double C47131 = C47124 * de;
    const double C47128 = C47124 * ce;
    const double C47127 = std::pow(C47124, 2);
    const double C47159 = std::pow(C47158, 2);
    const double C47218 = C47158 * de;
    const double C47216 = C47158 * ce;
    const double C47177 = std::pow(C47176, 2);
    const double C47260 = C47176 * de;
    const double C47258 = C47176 * ce;
    const double C47365 = std::pow(C47346, 2);
    const double C47445 = C47346 * be;
    const double C47443 = C47346 * ae;
    const double C46277 = 2 * C46275;
    const double C138 = (std::pow((2 * p * q) / (p + q), 2) * bs[2] *
                         (xP - xQ) * (zP - zQ) * ae * be) /
                        C46275;
    const double C47412 = std::pow(C47115, -1);
    const double C47107 = C47106 * C46274;
    const double C47381 = C47380 * C46274;
    const double C46420 = C46327 * C46417;
    const double C46423 = C46337 * C46417;
    const double C46429 = C46346 * C46417;
    const double C46443 = C46360 * C46417;
    const double C46464 = C46382 * C46417;
    const double C46332 = C46327 * C46329;
    const double C46339 = C46337 * C46329;
    const double C46349 = C46346 * C46329;
    const double C46364 = C46360 * C46329;
    const double C46388 = C46382 * C46329;
    const double C46331 = C46328 * ae;
    const double C46324 = C46323 / C46320;
    const double C124 = (-(bs[1] * C46329 * C46323) / C46320) / C46273;
    const double C125 = (-(bs[1] * C46417 * C46323) / C46320) / C46273;
    const double C118 = -(C46322 * bs[1] * C46323) / C46320;
    const double C287 = -(C46491 * bs[1] * C46323) / C46320;
    const double C468 = -(C46321 * bs[1] * C46323) / C46320;
    const double C47143 = std::pow(C47130, -1);
    const double C47420 = std::pow(C47130, -2);
    const double C47144 = 2 * C47129;
    const double C47424 = C47129 * C47130;
    const double C47423 = 4 * C47129;
    const double C47413 = std::pow(C47128, 2);
    const double C47132 = C47127 * C47125;
    const double C47160 = C47159 * C47125;
    const double C47425 = std::pow(C47216, 2);
    const double C47178 = C47177 * C47125;
    const double C47427 = std::pow(C47258, 2);
    const double C47366 = C47365 * C46274;
    const double C47108 = C47107 / C46273;
    const double C47382 = C47381 / C46273;
    const double C46333 = C46331 * be;
    const double C46326 = -C46324;
    const double C46336 = std::pow(C46324, 4);
    const double C46359 = std::pow(C46324, 6);
    const double C139 =
        (ae * std::pow(C46324, 2) * bs[2] * C46321 * be +
         C46322 * std::pow(-C46324, 3) * bs[3] * C46322 * C46321 * ae * be) /
        C46275;
    const double C46699 = std::pow(C46324, 2);
    const double C126 =
        (C46322 * std::pow(C46324, 2) * bs[2] * C46329) / C46273;
    const double C127 =
        (C46322 * std::pow(C46324, 2) * bs[2] * C46417) / C46273 -
        (ae * bs[1] * C46323) / (C46320 * C46273);
    const double C47458 = 4 * C47424;
    const double C47457 = C47126 * C47423;
    const double C47133 = C47132 / C47126;
    const double C47161 = C47160 / C47126;
    const double C47179 = C47178 / C47126;
    const double C47367 = C47366 / C46273;
    const double C47109 = -C47108;
    const double C47383 = -C47382;
    const double C46338 = C46337 * C46333;
    const double C46348 = C46346 * C46333;
    const double C46362 = C46360 * C46333;
    const double C46386 = C46382 * C46333;
    const double C46330 = std::pow(C46326, 3);
    const double C46345 = std::pow(C46326, 5);
    const double C46381 = std::pow(C46326, 7);
    const double C46341 = C46336 * C46339;
    const double C46425 = C46336 * C46423;
    const double C46430 = C46337 * C46336;
    const double C46367 = C46359 * C46364;
    const double C46445 = C46359 * C46443;
    const double C46465 = C46360 * C46359;
    const double C46701 = C46700 * C46699;
    const double C297 = (C46491 * C46699 * C46700 * C46329) / C46273;
    const double C298 = (C46491 * C46699 * C46700 * C46417) / C46273;
    const double C478 = (C46321 * C46699 * C46700 * C46329) / C46273 -
                        (be * bs[1] * C46323) / (C46320 * C46273);
    const double C479 = (C46321 * C46699 * C46700 * C46417) / C46273;
    const double C47134 = -C47133;
    const double C47162 = -C47161;
    const double C47180 = -C47179;
    const double C47368 = -C47367;
    const double C47110 = std::exp(C47109);
    const double C47384 = std::exp(C47383);
    const double C46340 = C46336 * C46338;
    const double C46366 = C46359 * C46362;
    const double C46334 = C46330 * C46332;
    const double C46418 = C46327 * C46330;
    const double C46421 = C46330 * C46420;
    const double C317 = ((yP - yQ) * C46330 * C46327 * C46333) / C46275;
    const double C498 = (be * std::pow(C46324, 2) * bs[2] * C46322 * ae +
                         C46321 * C46330 * C46327 * C46333) /
                        C46275;
    const double C46351 = C46345 * C46349;
    const double C46350 = C46345 * C46348;
    const double C46431 = C46345 * C46429;
    const double C46444 = C46346 * C46345;
    const double C46391 = C46381 * C46388;
    const double C46390 = C46381 * C46386;
    const double C46467 = C46381 * C46464;
    const double C46344 = ae * C46341;
    const double C46343 = C46322 * C46341;
    const double C46829 = C46321 * C46341;
    const double C46858 = C46491 * C46341;
    const double C46426 = C46322 * C46425;
    const double C46504 = C46491 * C46425;
    const double C46531 = be * C46425;
    const double C46530 = C46321 * C46425;
    const double C46433 = C46322 * C46430;
    const double C46432 = C46430 * ae;
    const double C46707 = C46430 * C46347;
    const double C46801 = C46430 * C46500;
    const double C46832 = C46430 * C46533;
    const double C46859 = C46491 * C46430;
    const double C46922 = C46321 * C46430;
    const double C46921 = C46430 * be;
    const double C46369 = C46367 * C46347;
    const double C46380 = ae * C46367;
    const double C46379 = C46322 * C46367;
    const double C46951 = C46367 * C46500;
    const double C46979 = C46491 * C46367;
    const double C46997 = C46321 * C46367;
    const double C46449 = C46322 * C46445;
    const double C46571 = C46445 * C46500;
    const double C46587 = C46491 * C46445;
    const double C46607 = C46445 * C46533;
    const double C46675 = be * C46445;
    const double C46674 = C46321 * C46445;
    const double C46470 = C46465 * C46347;
    const double C46469 = C46322 * C46465;
    const double C46468 = C46465 * ae;
    const double C46959 = C46465 * C46500;
    const double C46982 = C46491 * C46465;
    const double C47001 = C46465 * C46533;
    const double C119 = C46701 * C46347 - (bs[1] * C46323) / C46320;
    const double C288 = C46491 * C46322 * C46701;
    const double C290 = C46701 * C46500 - (bs[1] * C46323) / C46320;
    const double C469 = C46321 * C46322 * C46701;
    const double C471 = C46701 * C46533 - (bs[1] * C46323) / C46320;
    const double C906 = C46321 * C46491 * C46701;
    const double C47135 = std::exp(C47134);
    const double C47163 = std::exp(C47162);
    const double C47181 = std::exp(C47180);
    const double C47369 = std::exp(C47368);
    const double C46278 = C46276 * C47110;
    const double C47448 = C47412 * C47110;
    const double C47447 = C47110 * C47410;
    const double C4715 = -(C47110 * C47411) / C46273;
    const double C148 = C47384 * C139;
    const double C146 = C47384 * C126;
    const double C4868 = C47384 * C297;
    const double C46311 = C46310 * C47384;
    const double C113 = -(2 * ae * be * (zA - zB) * C47384) / (ae + be);
    const double C10299 =
        ((C47384 - (C46291 * 2 * C46274 * C46291 * C47384) / C46273) * ae) /
            C46273 -
        (0 * be) / C46277;
    const double C10300 =
        (0 * ae) / C46273 - (C46274 * C46291 * C47384) / C46275;
    const double C31092 =
        (-(0 * be) / C46273) / (2 * C46273) -
        ((C47384 - (C46291 * 2 * C46274 * C46291 * C47384) / C46273) * be) /
            C46273;
    const double C31093 =
        (-(2 * C46274 * C46291 * C47384) / C46273) / (2 * C46273) -
        (0 * be) / C46273;
    const double C47481 = C47412 * C47384;
    const double C47480 = C47384 * C47444;
    const double C31090 = -(C47384 * C47446) / C46273;
    const double C320 =
        (C46330 * C46327 * C46333 + C46340 * std::pow(yP - yQ, 2)) / C46275;
    const double C46368 = C46322 * C46366;
    const double C46564 = C46366 * C46500;
    const double C46586 = C46491 * C46366;
    const double C46606 = C46321 * C46366;
    const double C140 = (C46330 * C46327 * C46333 + ae * C46322 * C46334 +
                         C46322 * (ae * C46334 + C46322 * std::pow(C46324, 4) *
                                                     bs[4] * C46333)) /
                        C46275;
    const double C141 =
        (2 * (ae * C46334 + C46322 * C46340) +
         ae * (C46334 + C46341 * std::pow(C46322, 2)) +
         C46322 * (C46340 + ae * C46322 * C46341 +
                   C46322 * (ae * C46341 +
                             C46322 * std::pow(C46326, 5) * bs[5] * C46333))) /
        C46275;
    const double C318 = ((yP - yQ) * (ae * C46334 + C46322 * C46340)) / C46275;
    const double C499 = (be * (C46322 * C46330 * C46327 * C46322 * ae +
                               bs[2] * std::pow(C46324, 2) * ae) +
                         C46321 * (ae * C46334 + C46322 * C46340)) /
                        C46275;
    const double C128 =
        (std::pow(C46324, 2) * bs[2] * C46329 + C46334 * C46347) / C46273;
    const double C130 =
        (2 * C46322 * C46334 + C46322 * (C46334 + C46341 * C46347)) / C46273;
    const double C299 = (C46491 * C46322 * C46334) / C46273;
    const double C301 = (C46491 * (C46334 + C46341 * C46347)) / C46273;
    const double C303 = (C46699 * C46700 * C46329 + C46334 * C46500) / C46273;
    const double C480 =
        (C46321 * C46322 * C46334 + C46322 * C46701 * be) / C46273;
    const double C484 =
        (C46699 * C46700 * C46329 + C46321 * (C46321 * C46334 + C46701 * be) +
         C46321 * C46701 * be) /
        C46273;
    const double C911 =
        (C46321 * C46491 * C46334 + C46491 * C46701 * be) / C46273;
    const double C1130 =
        (2 * C46491 * C46334 + C46491 * (C46334 + C46341 * C46500)) / C46273;
    const double C46424 = C46418 * ae;
    const double C46706 = C46322 * C46418;
    const double C46786 = C46491 * C46418;
    const double C46831 = C46321 * C46418;
    const double C46830 = C46418 * be;
    const double C482 = (C46321 * (C46334 + C46341 * C46347) +
                         (C46701 + C46418 * C46347) * be) /
                        C46273;
    const double C1273 = (C46321 * (C46334 + C46341 * C46500) +
                          (C46701 + C46418 * C46500) * be) /
                         C46273;
    const double C1974 =
        (2 * (C46321 * C46334 + C46701 * be) +
         C46321 * (C46334 + C46321 * (C46321 * C46341 + C46418 * be) +
                   C46321 * C46418 * be) +
         (C46701 + C46418 * C46533) * be) /
        C46273;
    const double C120 =
        2 * C46322 * C46701 + C46322 * (C46701 + C46418 * C46347);
    const double C289 = C46491 * (C46701 + C46418 * C46347);
    const double C470 = C46321 * (C46701 + C46418 * C46347);
    const double C1124 =
        2 * C46491 * C46701 + C46491 * (C46701 + C46418 * C46500);
    const double C1261 = C46321 * (C46701 + C46418 * C46500);
    const double C1968 =
        2 * C46321 * C46701 + C46321 * (C46701 + C46418 * C46533);
    const double C501 = (C46330 * C46327 * C46333 + be * C46321 * C46421 +
                         C46321 * (be * C46421 + C46321 * C46340)) /
                        C46275;
    const double C921 =
        (be * C46491 * C46421 + C46321 * C46491 * C46340) / C46275;
    const double C129 =
        (C46699 * C46700 * C46417 + C46322 * (C46322 * C46421 + C46701 * ae) +
         C46322 * C46701 * ae) /
        C46273;
    const double C300 = (C46491 * (C46322 * C46421 + C46701 * ae)) / C46273;
    const double C304 = (C46699 * C46700 * C46417 + C46421 * C46500) / C46273;
    const double C481 = (C46321 * (C46322 * C46421 + C46701 * ae)) / C46273;
    const double C485 = (C46699 * C46700 * C46417 + C46421 * C46533) / C46273;
    const double C912 = (C46321 * C46491 * C46421) / C46273;
    const double C1131 =
        (2 * C46491 * C46421 + C46491 * (C46421 + C46425 * C46500)) / C46273;
    const double C1274 = (C46321 * (C46421 + C46425 * C46500)) / C46273;
    const double C1975 =
        (2 * C46321 * C46421 + C46321 * (C46421 + C46425 * C46533)) / C46273;
    const double C4870 = C47384 * C317;
    const double C46353 = C46351 * C46347;
    const double C46358 = ae * C46351;
    const double C46357 = C46322 * C46351;
    const double C46870 = C46351 * C46500;
    const double C46896 = C46491 * C46351;
    const double C46920 = C46321 * C46351;
    const double C1136 =
        (3 * (C46334 + C46341 * C46500) +
         C46491 * (2 * C46491 * C46341 + C46491 * (C46341 + C46351 * C46500))) /
        C46273;
    const double C46352 = C46322 * C46350;
    const double C46532 = C46321 * C46350;
    const double C46555 = C46491 * C46350;
    const double C1142 = (2 * C46491 * C46340 +
                          C46491 * (C46340 + C46350 * std::pow(C46491, 2))) /
                         C46275;
    const double C1145 =
        (3 * (C46340 + C46350 * C46500) +
         C46491 * (2 * C46491 * C46350 + C46491 * (C46350 + C46366 * C46500))) /
        C46275;
    const double C1288 = (be * (C46421 + C46425 * C46500) +
                          C46321 * (C46340 + C46350 * C46500)) /
                         C46275;
    const double C1986 = (2 * (be * C46421 + C46321 * C46340) +
                          be * (C46421 + C46425 * std::pow(C46321, 2)) +
                          C46321 * (C46340 + be * C46321 * C46425 +
                                    C46321 * (be * C46425 + C46321 * C46350))) /
                         C46275;
    const double C46434 = C46322 * C46431;
    const double C46513 = C46431 * C46500;
    const double C46535 = C46431 * C46533;
    const double C46556 = C46491 * C46431;
    const double C46605 = be * C46431;
    const double C46604 = C46321 * C46431;
    const double C46448 = C46444 * C46347;
    const double C46447 = C46322 * C46444;
    const double C46446 = C46444 * ae;
    const double C46879 = C46444 * C46500;
    const double C46899 = C46491 * C46444;
    const double C46923 = C46444 * C46533;
    const double C46999 = C46321 * C46444;
    const double C46998 = C46444 * be;
    const double C46393 = C46391 * C46347;
    const double C46392 = C46322 * C46390;
    const double C46633 = C46390 * C46500;
    const double C46658 = C46491 * C46390;
    const double C46676 = C46321 * C46390;
    const double C46471 = C46322 * C46467;
    const double C46640 = C46467 * C46500;
    const double C46659 = C46491 * C46467;
    const double C46678 = C46467 * C46533;
    const double C305 = (C46322 * C46334 + C46343 * C46500) / C46273;
    const double C1285 = (C46491 * C46340 + be * C46321 * C46504 +
                          C46321 * (be * C46504 + C46321 * C46491 * C46350)) /
                         C46275;
    const double C1268 = (C46491 * C46421 + C46504 * C46533) / C46273;
    const double C46435 = C46433 * ae;
    const double C46711 = 2 * C46433;
    const double C46789 = C46491 * C46433;
    const double C46839 = C46321 * C46433;
    const double C46838 = C46433 * be;
    const double C46708 = C46418 + C46707;
    const double C46802 = C46418 + C46801;
    const double C46834 = C46418 + C46832;
    const double C46878 = 2 * C46859;
    const double C46898 = C46321 * C46859;
    const double C46897 = C46859 * be;
    const double C46927 = 2 * C46922;
    const double C46925 = C46922 * be;
    const double C46371 = C46351 + C46369;
    const double C46387 = 2 * C46379;
    const double C46385 = ae * C46379;
    const double C46874 = C46379 * C46500;
    const double C46906 = C46491 * C46379;
    const double C46935 = C46321 * C46379;
    const double C46952 = C46351 + C46951;
    const double C46983 = C46321 * C46979;
    const double C46572 = C46431 + C46571;
    const double C46589 = C46587 * C46533;
    const double C46639 = 2 * C46587;
    const double C46657 = be * C46587;
    const double C46656 = C46321 * C46587;
    const double C46611 = C46431 + C46607;
    const double C46682 = 2 * C46674;
    const double C46680 = be * C46674;
    const double C46473 = C46444 + C46470;
    const double C46472 = C46469 * ae;
    const double C46886 = C46469 * C46500;
    const double C46909 = C46491 * C46469;
    const double C46938 = C46469 * C46533;
    const double C46960 = C46444 + C46959;
    const double C46985 = C46982 * C46533;
    const double C47005 = C46444 + C47001;
    const double C47137 = C47135 * C47128;
    const double C47136 = C47135 / C47130;
    const double C47146 = C47143 * C47135;
    const double C47416 = C47135 * C47131;
    const double C47455 = C47420 * C47135;
    const double C47449 = C47135 * C47413;
    const double C47217 = C47163 / C47130;
    const double C47219 = C47163 * C47216;
    const double C47226 = C47143 * C47163;
    const double C47431 = C47163 * C47218;
    const double C47461 = C47420 * C47163;
    const double C47459 = C47163 * C47425;
    const double C47259 = C47181 / C47130;
    const double C47261 = C47181 * C47258;
    const double C47268 = C47143 * C47181;
    const double C47437 = C47181 * C47260;
    const double C47464 = C47420 * C47181;
    const double C47462 = C47181 * C47427;
    const double C47479 = C47412 * C47369;
    const double C47478 = C47369 * C47443;
    const double C15919 = -(C47369 * C47445) / C46273;
    const double C116 = ((0 * ae) / C46273 - C46278 / C46275) / (2 * C46273) -
                        (0 * be) / C46273;
    const double C4719 =
        (-C46272 / C46273) / (2 * C46273) -
        ((C47110 - (C46271 * 2 * C46278) / C46273) * be) / C46273;
    const double C4720 =
        (-(2 * C46278) / C46273) / (2 * C46273) - (0 * be) / C46273;
    const double C15921 =
        ((C47110 - (C46271 * 2 * C46278) / C46273) * ae) / C46273 -
        C46272 / C46277;
    const double C15922 = (0 * ae) / C46273 - C46278 / C46275;
    const double C21355 = -(2 * C46278) / C46273;
    const double C115 =
        (((C47110 - (C46271 * 2 * C46278) / C46273) * ae) / C46273 -
         C46272 / C46277) /
            (2 * C46273) -
        ((C46271 * ((0 * ae) / C46273 - C46278 / C46275) + C47448) * be) /
            C46273;
    const double C104 = C47448 / C47115;
    const double C102 = C47110 / C47115 - (C47447 * C47411) / C46275;
    const double C103 = C47447 / C46277 - (C47448 * C47411) / C46273;
    const double C15917 = C47447 / C46273;
    const double C42215 = ((0 * ae) / C46273 - C46311 / C46275) / (2 * C46273) -
                          (0 * be) / C46273;
    const double C151 = C113 * C119;
    const double C149 = C113 * C127;
    const double C147 = C113 * C118;
    const double C328 = C113 * C288;
    const double C509 = C113 * C469;
    const double C4876 = C113 * C290;
    const double C4871 = C113 * C298;
    const double C4869 = C113 * C287;
    const double C5490 = C113 * C906;
    const double C10310 = C10299 * C119;
    const double C10307 = C10299 * C127;
    const double C10303 = C10299 * C118;
    const double C10480 = C10299 * C288;
    const double C10658 = C10299 * C469;
    const double C25713 = C10299 * C290;
    const double C25710 = C10299 * C298;
    const double C25706 = C10299 * C287;
    const double C26321 = C10299 * C906;
    const double C10305 = C10300 * C469;
    const double C25708 = C10300 * C906;
    const double C31103 = C31092 * C119;
    const double C31100 = C31092 * C127;
    const double C31096 = C31092 * C118;
    const double C31273 = C31092 * C288;
    const double C31451 = C31092 * C469;
    const double C36857 = C31092 * C290;
    const double C36854 = C31092 * C298;
    const double C36850 = C31092 * C287;
    const double C37465 = C31092 * C906;
    const double C31098 = C31093 * C469;
    const double C36852 = C31093 * C906;
    const double C42214 =
        (((C47384 - (C46291 * 2 * C46311) / C46273) * ae) / C46273 -
         C46309 / C46277) /
            (2 * C46273) -
        ((C46291 * ((0 * ae) / C46273 - C46311 / C46275) + C47481) * be) /
            C46273;
    const double C42212 = C47481 / C47115;
    const double C10297 = C47480 / C46273;
    const double C42210 = C47384 / C47115 - (C47480 * C47446) / C46275;
    const double C42211 = C47480 / C46277 - (C47481 * C47446) / C46273;
    const double C31099 = C31090 * C139;
    const double C31095 = C31090 * C126;
    const double C36853 = C31090 * C317;
    const double C36849 = C31090 * C297;
    const double C4879 = C47384 * C320;
    const double C36862 = C31090 * C320;
    const double C46565 = C46350 + C46564;
    const double C46588 = C46321 * C46586;
    const double C46632 = 2 * C46586;
    const double C152 = C47384 * C140;
    const double C31108 = C31090 * C140;
    const double C157 = C47384 * C141;
    const double C31115 = C31090 * C141;
    const double C331 = C47384 * C318;
    const double C31278 = C31090 * C318;
    const double C512 = C47384 * C499;
    const double C10308 = C47481 * C499;
    const double C31101 = C47481 * C499;
    const double C31456 = C31090 * C499;
    const double C150 = C47384 * C128;
    const double C31104 = C31090 * C128;
    const double C155 = C47384 * C130;
    const double C31111 = C31090 * C130;
    const double C329 = C47384 * C299;
    const double C31274 = C31090 * C299;
    const double C333 = C47384 * C301;
    const double C31289 = C31090 * C301;
    const double C4877 = C47384 * C303;
    const double C36858 = C31090 * C303;
    const double C510 = C47384 * C480;
    const double C10304 = C47481 * C480;
    const double C31097 = C47481 * C480;
    const double C31452 = C31090 * C480;
    const double C5491 = C47384 * C911;
    const double C25707 = C47481 * C911;
    const double C36851 = C47481 * C911;
    const double C37466 = C31090 * C911;
    const double C5736 = C47384 * C1130;
    const double C37701 = C31090 * C1130;
    const double C46427 = C46426 + C46424;
    const double C486 =
        (C46322 * C46334 + C46321 * (C46321 * C46343 + C46706 * be) +
         C46321 * C46706 * be) /
        C46273;
    const double C913 =
        (C46321 * C46491 * C46343 + C46491 * C46706 * be) / C46273;
    const double C291 = C46322 * C46701 + C46706 * C46500;
    const double C472 = C46322 * C46701 + C46706 * C46533;
    const double C907 = C46321 * C46491 * C46706;
    const double C1125 =
        2 * C46491 * C46706 + C46491 * (C46706 + C46433 * C46500);
    const double C1262 = C46321 * (C46706 + C46433 * C46500);
    const double C1969 =
        2 * C46321 * C46706 + C46321 * (C46706 + C46433 * C46533);
    const double C1267 =
        (C46491 * C46334 + C46321 * (C46321 * C46491 * C46341 + C46786 * be) +
         C46321 * C46786 * be) /
        C46273;
    const double C2365 =
        (2 * (C46321 * C46858 + C46786 * be) +
         C46321 * (C46858 + C46321 * (C46321 * C46491 * C46351 + C46859 * be) +
                   C46321 * C46859 * be) +
         (C46786 + C46859 * C46533) * be) /
        C46273;
    const double C1258 = C46491 * C46701 + C46786 * C46533;
    const double C2362 =
        2 * C46321 * C46786 + C46321 * (C46786 + C46859 * C46533);
    const double C46833 = C46829 + C46830;
    const double C514 = C47384 * C482;
    const double C10313 = C47481 * C482;
    const double C31106 = C47481 * C482;
    const double C31467 = C31090 * C482;
    const double C5906 = C47384 * C1273;
    const double C25716 = C47481 * C1273;
    const double C36860 = C47481 * C1273;
    const double C37871 = C31090 * C1273;
    const double C154 = C113 * C120;
    const double C10319 = C10299 * C120;
    const double C31112 = C31092 * C120;
    const double C332 = C113 * C289;
    const double C10497 = C10299 * C289;
    const double C31290 = C31092 * C289;
    const double C513 = C113 * C470;
    const double C10312 = C10300 * C470;
    const double C10675 = C10299 * C470;
    const double C31105 = C31093 * C470;
    const double C31468 = C31092 * C470;
    const double C5737 = C113 * C1124;
    const double C26558 = C10299 * C1124;
    const double C37702 = C31092 * C1124;
    const double C5907 = C113 * C1261;
    const double C25715 = C10300 * C1261;
    const double C26728 = C10299 * C1261;
    const double C36859 = C31093 * C1261;
    const double C37872 = C31092 * C1261;
    const double C5493 = C47384 * C921;
    const double C25711 = C47481 * C921;
    const double C36855 = C47481 * C921;
    const double C37470 = C31090 * C921;
    const double C153 = C113 * C129;
    const double C10314 = C10299 * C129;
    const double C31107 = C31092 * C129;
    const double C330 = C113 * C300;
    const double C10484 = C10299 * C300;
    const double C31277 = C31092 * C300;
    const double C4878 = C113 * C304;
    const double C25717 = C10299 * C304;
    const double C36861 = C31092 * C304;
    const double C511 = C113 * C481;
    const double C10309 = C10300 * C481;
    const double C10662 = C10299 * C481;
    const double C31102 = C31093 * C481;
    const double C31455 = C31092 * C481;
    const double C5492 = C113 * C912;
    const double C25712 = C10300 * C912;
    const double C26325 = C10299 * C912;
    const double C36856 = C31093 * C912;
    const double C37469 = C31092 * C912;
    const double C5739 = C113 * C1131;
    const double C26562 = C10299 * C1131;
    const double C37706 = C31092 * C1131;
    const double C5909 = C113 * C1274;
    const double C25719 = C10300 * C1274;
    const double C26732 = C10299 * C1274;
    const double C36863 = C31093 * C1274;
    const double C37876 = C31092 * C1274;
    const double C46355 = C46341 + C46353;
    const double C46370 = C46358 + C46368;
    const double C46363 = 2 * C46357;
    const double C46361 = ae * C46357;
    const double C46837 = C46321 * C46357;
    const double C46862 = C46491 * C46357;
    const double C1132 =
        (2 * C46491 * C46343 + C46491 * (C46343 + C46357 * C46500)) / C46273;
    const double C1138 =
        (3 * (C46343 + C46357 * C46500) +
         C46491 * (2 * C46491 * C46357 + C46491 * (C46357 + C46379 * C46500))) /
        C46273;
    const double C1275 = (C46321 * (C46343 + C46357 * C46500) +
                          (C46706 + C46433 * C46500) * be) /
                         C46273;
    const double C1976 =
        (2 * (C46321 * C46343 + C46706 * be) +
         C46321 * (C46343 + C46321 * (C46321 * C46357 + C46433 * be) +
                   C46321 * C46433 * be) +
         (C46706 + C46433 * C46533) * be) /
        C46273;
    const double C46871 = C46341 + C46870;
    const double C46900 = C46321 * C46896;
    const double C46950 = 2 * C46896;
    const double C46924 = C46920 + C46921;
    const double C5741 = C47384 * C1136;
    const double C37710 = C31090 * C1136;
    const double C46354 = C46344 + C46352;
    const double C46534 = C46531 + C46532;
    const double C5738 = C47384 * C1142;
    const double C37705 = C31090 * C1142;
    const double C5743 = C47384 * C1145;
    const double C37714 = C31090 * C1145;
    const double C5908 = C47384 * C1288;
    const double C25720 = C47481 * C1288;
    const double C36864 = C47481 * C1288;
    const double C37875 = C31090 * C1288;
    const double C46436 = C46434 + C46432;
    const double C46514 = C46425 + C46513;
    const double C46536 = C46425 + C46535;
    const double C46570 = 2 * C46556;
    const double C46585 = be * C46556;
    const double C46584 = C46321 * C46556;
    const double C2371 =
        (2 * (be * C46504 + C46321 * C46555) + be * (C46504 + C46556 * C46533) +
         C46321 * (C46555 + be * C46321 * C46556 +
                   C46321 * (be * C46556 + C46321 * C46491 * C46366))) /
        C46275;
    const double C2366 =
        (2 * C46321 * C46504 + C46321 * (C46504 + C46556 * C46533)) / C46273;
    const double C46609 = C46605 + C46606;
    const double C46610 = 2 * C46604;
    const double C46608 = be * C46604;
    const double C46451 = C46430 + C46448;
    const double C46450 = C46447 * ae;
    const double C46466 = 2 * C46447;
    const double C46805 = C46447 * C46500;
    const double C46840 = C46447 * C46533;
    const double C46863 = C46491 * C46447;
    const double C46937 = C46321 * C46447;
    const double C46936 = C46447 * be;
    const double C46452 = C46449 + C46446;
    const double C46880 = C46430 + C46879;
    const double C46901 = C46899 * C46533;
    const double C46958 = 2 * C46899;
    const double C46981 = C46321 * C46899;
    const double C46980 = C46899 * be;
    const double C46926 = C46430 + C46923;
    const double C47006 = 2 * C46999;
    const double C47004 = C46999 * be;
    const double C47003 = C46997 + C46998;
    const double C46395 = C46367 + C46393;
    const double C46394 = C46380 + C46392;
    const double C46634 = C46366 + C46633;
    const double C46661 = C46321 * C46658;
    const double C46681 = C46675 + C46676;
    const double C46474 = C46471 + C46468;
    const double C46641 = C46445 + C46640;
    const double C46663 = C46659 * C46533;
    const double C46683 = C46445 + C46678;
    const double C336 = C47384 * C305;
    const double C31281 = C31090 * C305;
    const double C5904 = C47384 * C1285;
    const double C26328 = C47481 * C1285;
    const double C37472 = C47481 * C1285;
    const double C37867 = C31090 * C1285;
    const double C5905 = C113 * C1268;
    const double C26327 = C10300 * C1268;
    const double C26724 = C10299 * C1268;
    const double C37471 = C31093 * C1268;
    const double C37868 = C31092 * C1268;
    const double C1269 =
        (C46491 * C46343 + C46321 * (C46321 * C46491 * C46357 + C46789 * be) +
         C46321 * C46789 * be) /
        C46273;
    const double C1259 = C46491 * C46706 + C46789 * C46533;
    const double C121 = 3 * (C46701 + C46418 * C46347) +
                        C46322 * (2 * C46706 + C46322 * C46708);
    const double C292 = C46701 + C46418 * C46347 + C46708 * C46500;
    const double C293 = C46491 * (2 * C46706 + C46322 * C46708);
    const double C473 = C46701 + C46418 * C46347 + C46708 * C46533;
    const double C474 = C46321 * (2 * C46706 + C46322 * C46708);
    const double C908 = C46321 * C46491 * C46708;
    const double C1279 =
        (C46334 + C46341 * C46500 +
         C46321 * (C46321 * (C46341 + C46351 * C46500) + C46802 * be) +
         C46321 * C46802 * be) /
        C46273;
    const double C1669 =
        (C46321 * (2 * C46491 * C46341 + C46491 * (C46341 + C46351 * C46500)) +
         (2 * C46786 + C46491 * C46802) * be) /
        C46273;
    const double C1127 = 3 * (C46701 + C46418 * C46500) +
                         C46491 * (2 * C46786 + C46491 * C46802);
    const double C1264 = C46701 + C46418 * C46500 + C46802 * C46533;
    const double C1666 = C46321 * (2 * C46786 + C46491 * C46802);
    const double C1971 = 3 * (C46701 + C46418 * C46533) +
                         C46321 * (2 * C46831 + C46321 * C46834);
    const double C46373 = C46322 * C46371;
    const double C46383 = 3 * C46371;
    const double C46378 = ae * C46371;
    const double C46845 = C46321 * C46371;
    const double C46866 = C46491 * C46371;
    const double C46389 = C46366 + C46385;
    const double C46875 = C46357 + C46874;
    const double C46910 = C46321 * C46906;
    const double C46953 = C46491 * C46952;
    const double C46969 = C46321 * C46952;
    const double C46573 = C46491 * C46572;
    const double C46638 = 3 * C46572;
    const double C46649 = be * C46572;
    const double C46648 = C46321 * C46572;
    const double C46591 = C46556 + C46589;
    const double C46662 = 2 * C46656;
    const double C46660 = be * C46656;
    const double C46614 = C46321 * C46611;
    const double C46677 = 3 * C46611;
    const double C46673 = be * C46611;
    const double C46684 = C46366 + C46680;
    const double C46476 = C46322 * C46473;
    const double C46475 = C46473 * ae;
    const double C46809 = C46473 * C46500;
    const double C46848 = C46473 * C46533;
    const double C46867 = C46491 * C46473;
    const double C46887 = C46447 + C46886;
    const double C46911 = C46909 * C46533;
    const double C46941 = C46447 + C46938;
    const double C46961 = C46491 * C46960;
    const double C46972 = C46960 * C46533;
    const double C46988 = C46899 + C46985;
    const double C47008 = C46321 * C47005;
    const double C47138 = C47137 * C47131;
    const double C47145 = C47137 / C47144;
    const double C47417 = C47143 * C47137;
    const double C47415 = C47137 / C47126;
    const double C284 = (C47135 * std::pow(C47131, 2)) / C47129 + C47136;
    const double C47147 = C47146 * C47131;
    const double C47421 = C47128 * C47146;
    const double C47419 = 2 * C47146;
    const double C47465 = C47146 / C47423;
    const double C112 = C47146 / C47458;
    const double C2843 = C47146 / C47130;
    const double C47451 = C47416 / C47126;
    const double C285 = (-2 * C47143 * C47416) / C47126;
    const double C47482 = C47449 / C47129;
    const double C1050 = (C47163 * std::pow(C47218, 2)) / C47129 + C47217;
    const double C47220 = C47219 * C47218;
    const double C47225 = C47219 / C47144;
    const double C47429 = C47219 / C47126;
    const double C47426 = C47143 * C47219;
    const double C47227 = C47226 * C47218;
    const double C47435 = C47216 * C47226;
    const double C47434 = 2 * C47226;
    const double C47471 = C47226 / C47423;
    const double C1122 = C47226 / C47458;
    const double C2840 = C47226 / C47130;
    const double C47467 = C47431 / C47126;
    const double C1051 = (-2 * C47143 * C47431) / C47126;
    const double C47487 = C47459 / C47129;
    const double C1788 = (C47181 * std::pow(C47260, 2)) / C47129 + C47259;
    const double C47262 = C47261 * C47260;
    const double C47267 = C47261 / C47144;
    const double C47430 = C47261 / C47126;
    const double C47428 = C47143 * C47261;
    const double C47269 = C47268 * C47260;
    const double C47441 = C47258 * C47268;
    const double C47440 = 2 * C47268;
    const double C47477 = C47268 / C47423;
    const double C1967 = C47268 / C47458;
    const double C3742 = C47268 / C47130;
    const double C47473 = C47437 / C47126;
    const double C1789 = (-2 * C47143 * C47437) / C47126;
    const double C47489 = C47462 / C47129;
    const double C21354 = C47479 / C47115;
    const double C4717 = C47478 / C46273;
    const double C21352 = C47369 / C47115 - (C47478 * C47445) / C46275;
    const double C21353 = C47478 / C46277 - (C47479 * C47445) / C46273;
    const double C114 =
        (((0 - (C46271 * C46272) / C46273) * ae) / C46273 - (0 * be) / C46277) /
            (2 * C46273) -
        ((C46271 * (((C47110 - (C46271 * 2 * C46278) / C46273) * ae) / C46273 -
                    C46272 / C46277) +
          C15917) *
         be) /
            C46273 +
        (0 * ae) / C46273 - C46278 / C46275;
    const double C10322 = C10297 * C141;
    const double C10318 = C10297 * C130;
    const double C10315 = C10297 * C140;
    const double C10311 = C10297 * C128;
    const double C10306 = C10297 * C139;
    const double C10302 = C10297 * C126;
    const double C10496 = C10297 * C301;
    const double C10488 = C10297 * C305;
    const double C10485 = C10297 * C318;
    const double C10481 = C10297 * C299;
    const double C10674 = C10297 * C482;
    const double C10663 = C10297 * C499;
    const double C10659 = C10297 * C480;
    const double C25718 = C10297 * C320;
    const double C25714 = C10297 * C303;
    const double C25709 = C10297 * C317;
    const double C25705 = C10297 * C297;
    const double C26326 = C10297 * C921;
    const double C26322 = C10297 * C911;
    const double C26570 = C10297 * C1145;
    const double C26566 = C10297 * C1136;
    const double C26561 = C10297 * C1142;
    const double C26557 = C10297 * C1130;
    const double C26731 = C10297 * C1288;
    const double C26727 = C10297 * C1273;
    const double C26723 = C10297 * C1285;
    const double C42213 =
        (((0 - (C46291 * C46309) / C46273) * ae) / C46273 - (0 * be) / C46277) /
            (2 * C46273) -
        ((C46291 * (((C47384 - (C46291 * 2 * C46311) / C46273) * ae) / C46273 -
                    C46309 / C46277) +
          C10297) *
         be) /
            C46273 +
        (0 * ae) / C46273 - C46311 / C46275;
    const double C5733 =
        (4 * (2 * C46555 + C46491 * C46565) +
         C46491 *
             (3 * C46565 + C46491 * (2 * C46491 * C46366 +
                                     C46491 * (C46366 + C46390 * C46500)))) /
        C46275;
    const double C166 = C150 - C151;
    const double C4874 = C328 - C329;
    const double C4872 = C329 - C328;
    const double C21467 = C4877 - C4876;
    const double C131 =
        (2 * (C46322 * C46421 + C46701 * ae) +
         C46322 * (C46421 + C46322 * C46427 + C46322 * C46418 * ae) +
         (C46701 + C46418 * C46347) * ae) /
        C46273;
    const double C302 =
        (C46491 * (C46421 + C46322 * C46427 + C46706 * ae)) / C46273;
    const double C306 =
        (C46322 * C46421 + C46701 * ae + C46427 * C46500) / C46273;
    const double C483 =
        (C46321 * (C46421 + C46322 * C46427 + C46706 * ae)) / C46273;
    const double C487 =
        (C46322 * C46421 + C46701 * ae + C46427 * C46533) / C46273;
    const double C914 = (C46321 * C46491 * C46427) / C46273;
    const double C517 = C47384 * C486;
    const double C10666 = C10297 * C486;
    const double C10661 = C47481 * C486;
    const double C31459 = C31090 * C486;
    const double C31454 = C47481 * C486;
    const double C927 = C47384 * C913;
    const double C10483 = C47481 * C913;
    const double C11160 = C10297 * C913;
    const double C31276 = C47481 * C913;
    const double C31953 = C31090 * C913;
    const double C337 = C113 * C291;
    const double C10489 = C10299 * C291;
    const double C31282 = C31092 * C291;
    const double C518 = C113 * C472;
    const double C10667 = C10299 * C472;
    const double C10660 = C10300 * C472;
    const double C31460 = C31092 * C472;
    const double C31453 = C31093 * C472;
    const double C928 = C113 * C907;
    const double C10482 = C10300 * C907;
    const double C11161 = C10299 * C907;
    const double C31275 = C31093 * C907;
    const double C31954 = C31092 * C907;
    const double C1403 = C113 * C1125;
    const double C11680 = C10299 * C1125;
    const double C32473 = C31092 * C1125;
    const double C1561 = C113 * C1262;
    const double C10491 = C10300 * C1262;
    const double C11882 = C10299 * C1262;
    const double C31284 = C31093 * C1262;
    const double C32675 = C31092 * C1262;
    const double C2257 = C113 * C1969;
    const double C10669 = C10300 * C1969;
    const double C12734 = C10299 * C1969;
    const double C31462 = C31093 * C1969;
    const double C33519 = C31092 * C1969;
    const double C5902 = C47384 * C1267;
    const double C26324 = C47481 * C1267;
    const double C26719 = C10297 * C1267;
    const double C37468 = C47481 * C1267;
    const double C37863 = C31090 * C1267;
    const double C7249 = C47384 * C2365;
    const double C26721 = C47481 * C2365;
    const double C28038 = C10297 * C2365;
    const double C37865 = C47481 * C2365;
    const double C39178 = C31090 * C2365;
    const double C5903 = C113 * C1258;
    const double C26323 = C10300 * C1258;
    const double C26720 = C10299 * C1258;
    const double C37467 = C31093 * C1258;
    const double C37864 = C31092 * C1258;
    const double C7248 = C113 * C2362;
    const double C26722 = C10300 * C2362;
    const double C28037 = C10299 * C2362;
    const double C37866 = C31093 * C2362;
    const double C39177 = C31092 * C2362;
    const double C1980 =
        (3 * (C46334 + C46321 * C46833 + C46831 * be) +
         C46321 * (2 * C46833 +
                   C46321 * (C46341 + C46321 * (C46321 * C46351 + C46430 * be) +
                             C46321 * C46430 * be) +
                   C46834 * be) +
         (2 * C46831 + C46321 * C46834) * be) /
        C46273;
    const double C168 = C154 - C155;
    const double C352 = C332 - C333;
    const double C4884 = C333 - C332;
    const double C533 = C513 - C514;
    const double C22106 = C5737 - C5736;
    const double C22234 = C5907 - C5906;
    const double C167 = C152 - C153;
    const double C4875 = C330 - C331;
    const double C4873 = C331 - C330;
    const double C21468 = C4879 - C4878;
    const double C132 = (3 * (C46334 + C46341 * C46347) +
                         C46322 * (2 * C46343 + C46322 * C46355)) /
                        C46273;
    const double C307 = (C46334 + C46341 * C46347 + C46355 * C46500) / C46273;
    const double C309 = (C46491 * (2 * C46343 + C46322 * C46355)) / C46273;
    const double C488 =
        (C46334 + C46341 * C46347 + C46321 * (C46321 * C46355 + C46708 * be) +
         C46321 * C46708 * be) /
        C46273;
    const double C490 = (C46321 * (2 * C46343 + C46322 * C46355) +
                         (2 * C46706 + C46322 * C46708) * be) /
                        C46273;
    const double C915 =
        (C46321 * C46491 * C46355 + C46491 * C46708 * be) / C46273;
    const double C1134 =
        (2 * C46491 * C46355 + C46491 * (C46355 + C46371 * C46500)) / C46273;
    const double C46372 = C46322 * C46370;
    const double C46377 = 2 * C46370;
    const double C46540 = C46321 * C46370;
    const double C46558 = C46491 * C46370;
    const double C46365 = C46350 + C46361;
    const double C46841 = C46837 + C46838;
    const double C1404 = C47384 * C1132;
    const double C11681 = C10297 * C1132;
    const double C32474 = C31090 * C1132;
    const double C5745 = C47384 * C1138;
    const double C1562 = C47384 * C1275;
    const double C10490 = C47481 * C1275;
    const double C11883 = C10297 * C1275;
    const double C31283 = C47481 * C1275;
    const double C32676 = C31090 * C1275;
    const double C2258 = C47384 * C1976;
    const double C10668 = C47481 * C1976;
    const double C12735 = C10297 * C1976;
    const double C31461 = C47481 * C1976;
    const double C33520 = C31090 * C1976;
    const double C5729 =
        (4 * (2 * C46858 + C46491 * C46871) +
         C46491 *
             (3 * C46871 + C46491 * (2 * C46491 * C46351 +
                                     C46491 * (C46351 + C46367 * C46500)))) /
        C46273;
    const double C46902 = C46900 + C46897;
    const double C46928 = C46321 * C46924;
    const double C46996 = 2 * C46924;
    const double C142 =
        (3 * (C46340 + ae * C46343 + C46322 * C46354) +
         ae * (2 * C46343 + C46322 * C46355) +
         C46322 *
             (2 * C46354 + ae * C46355 +
              C46322 * (C46350 + ae * C46322 * C46351 +
                        C46322 * (ae * C46351 + C46322 * std::pow(C46324, 6) *
                                                    bs[6] * C46333)))) /
        C46275;
    const double C319 =
        ((yP - yQ) * (C46340 + ae * C46343 + C46322 * C46354)) / C46275;
    const double C321 =
        (ae * C46334 + C46322 * C46340 + C46354 * std::pow(yP - yQ, 2)) /
        C46275;
    const double C500 =
        (be * (C46330 * C46327 * C46417 +
               C46322 * (C46322 * C46336 * C46337 * C46417 + C46418 * ae) +
               C46322 * C46418 * ae) +
         C46321 * (C46340 + ae * C46343 + C46322 * C46354)) /
        C46275;
    const double C502 = (ae * C46334 + C46322 * C46340 + be * C46321 * C46427 +
                         C46321 * (be * C46427 + C46321 * C46354)) /
                        C46275;
    const double C922 =
        (be * C46491 * C46427 + C46321 * C46491 * C46354) / C46275;
    const double C1143 = (2 * C46491 * C46354 +
                          C46491 * (C46354 + C46370 * std::pow(C46491, 2))) /
                         C46275;
    const double C22107 = C5739 - C5738;
    const double C22235 = C5909 - C5908;
    const double C46437 = C46322 * C46436;
    const double C46442 = 2 * C46436;
    const double C46506 = C46491 * C46436;
    const double C46539 = be * C46436;
    const double C46538 = C46321 * C46436;
    const double C1289 = (be * (C46427 + C46436 * C46500) +
                          C46321 * (C46354 + C46370 * C46500)) /
                         C46275;
    const double C1987 = (2 * (be * C46427 + C46321 * C46354) +
                          be * (C46427 + C46436 * std::pow(C46321, 2)) +
                          C46321 * (C46354 + be * C46321 * C46436 +
                                    C46321 * (be * C46436 + C46321 * C46370))) /
                         C46275;
    const double C1133 =
        (2 * C46491 * C46427 + C46491 * (C46427 + C46436 * C46500)) / C46273;
    const double C1276 = (C46321 * (C46427 + C46436 * C46500)) / C46273;
    const double C1977 =
        (2 * C46321 * C46427 + C46321 * (C46427 + C46436 * C46533)) / C46273;
    const double C1291 =
        (C46340 + C46350 * C46500 + be * C46321 * C46514 +
         C46321 * (be * C46514 + C46321 * (C46350 + C46366 * C46500))) /
        C46275;
    const double C1675 =
        (be * (2 * C46504 + C46491 * C46514) +
         C46321 * (2 * C46491 * C46350 + C46491 * (C46350 + C46366 * C46500))) /
        C46275;
    const double C7245 =
        (2 * (be * C46514 + C46321 * C46565) + be * (C46514 + C46572 * C46533) +
         C46321 *
             (C46565 + be * C46321 * C46572 +
              C46321 * (be * C46572 + C46321 * (C46366 + C46390 * C46500)))) /
        C46275;
    const double C1137 = (3 * (C46421 + C46425 * C46500) +
                          C46491 * (2 * C46504 + C46491 * C46514)) /
                         C46273;
    const double C1280 = (C46421 + C46425 * C46500 + C46514 * C46533) / C46273;
    const double C1670 = (C46321 * (2 * C46504 + C46491 * C46514)) / C46273;
    const double C7242 =
        (2 * C46321 * C46514 + C46321 * (C46514 + C46572 * C46533)) / C46273;
    const double C1989 =
        (3 * (C46340 + be * C46530 + C46321 * C46534) +
         be * (2 * C46530 + C46321 * C46536) +
         C46321 * (2 * C46534 + be * C46536 +
                   C46321 * (C46350 + be * C46321 * C46431 +
                             C46321 * (be * C46431 + C46321 * C46366)))) /
        C46275;
    const double C1981 = (3 * (C46421 + C46425 * C46533) +
                          C46321 * (2 * C46530 + C46321 * C46536)) /
                         C46273;
    const double C46590 = C46585 + C46588;
    const double C7251 = C47384 * C2371;
    const double C26725 = C47481 * C2371;
    const double C28042 = C10297 * C2371;
    const double C37869 = C47481 * C2371;
    const double C39182 = C31090 * C2371;
    const double C7250 = C113 * C2366;
    const double C26726 = C10300 * C2366;
    const double C28041 = C10299 * C2366;
    const double C37870 = C31093 * C2366;
    const double C39181 = C31092 * C2366;
    const double C46613 = C46321 * C46609;
    const double C46672 = 2 * C46609;
    const double C46612 = C46350 + C46608;
    const double C46453 = C46451 * ae;
    const double C46712 = C46322 * C46451;
    const double C46716 = 3 * C46451;
    const double C46792 = C46491 * C46451;
    const double C46847 = C46321 * C46451;
    const double C46846 = C46451 * be;
    const double C1277 = (C46321 * (C46355 + C46371 * C46500) +
                          (C46708 + C46451 * C46500) * be) /
                         C46273;
    const double C1978 =
        (2 * (C46321 * C46355 + C46708 * be) +
         C46321 * (C46355 + C46321 * (C46321 * C46371 + C46451 * be) +
                   C46321 * C46451 * be) +
         (C46708 + C46451 * C46533) * be) /
        C46273;
    const double C1126 =
        2 * C46491 * C46708 + C46491 * (C46708 + C46451 * C46500);
    const double C1263 = C46321 * (C46708 + C46451 * C46500);
    const double C1970 =
        2 * C46321 * C46708 + C46321 * (C46708 + C46451 * C46533);
    const double C46806 = C46433 + C46805;
    const double C46842 = C46433 + C46840;
    const double C46885 = 2 * C46863;
    const double C46908 = C46321 * C46863;
    const double C46907 = C46863 * be;
    const double C2367 =
        (2 * (C46321 * C46862 + C46789 * be) +
         C46321 * (C46862 + C46321 * (C46321 * C46491 * C46379 + C46863 * be) +
                   C46321 * C46863 * be) +
         (C46789 + C46863 * C46533) * be) /
        C46273;
    const double C2363 =
        2 * C46321 * C46789 + C46321 * (C46789 + C46863 * C46533);
    const double C46942 = 2 * C46937;
    const double C46940 = C46937 * be;
    const double C46939 = C46935 + C46936;
    const double C46454 = C46322 * C46452;
    const double C46463 = 2 * C46452;
    const double C46516 = C46452 * C46500;
    const double C46541 = C46452 * C46533;
    const double C46559 = C46491 * C46452;
    const double C46619 = be * C46452;
    const double C46618 = C46321 * C46452;
    const double C46881 = C46491 * C46880;
    const double C46957 = 3 * C46880;
    const double C46971 = C46321 * C46880;
    const double C46970 = C46880 * be;
    const double C7241 =
        (2 * (C46321 * C46871 + C46802 * be) +
         C46321 *
             (C46871 +
              C46321 * (C46321 * (C46351 + C46367 * C46500) + C46880 * be) +
              C46321 * C46880 * be) +
         (C46802 + C46880 * C46533) * be) /
        C46273;
    const double C7239 =
        2 * C46321 * C46802 + C46321 * (C46802 + C46880 * C46533);
    const double C46903 = C46859 + C46901;
    const double C46986 = 2 * C46981;
    const double C46984 = C46981 * be;
    const double C46987 = C46983 + C46980;
    const double C46929 = C46321 * C46926;
    const double C47002 = 3 * C46926;
    const double C47000 = C46926 * be;
    const double C47007 = C46321 * C47003;
    const double C46397 = C46322 * C46395;
    const double C1140 =
        (3 * (C46355 + C46371 * C46500) +
         C46491 * (2 * C46491 * C46371 + C46491 * (C46371 + C46395 * C46500))) /
        C46273;
    const double C46396 = C46322 * C46394;
    const double C46567 = C46394 * C46500;
    const double C46595 = C46491 * C46394;
    const double C46620 = C46321 * C46394;
    const double C1146 =
        (3 * (C46354 + C46370 * C46500) +
         C46491 * (2 * C46491 * C46370 + C46491 * (C46370 + C46394 * C46500))) /
        C46275;
    const double C46635 = C46491 * C46634;
    const double C46650 = C46321 * C46634;
    const double C46665 = C46657 + C46661;
    const double C46685 = C46321 * C46681;
    const double C46477 = C46322 * C46474;
    const double C46577 = C46474 * C46500;
    const double C46596 = C46491 * C46474;
    const double C46621 = C46474 * C46533;
    const double C46642 = C46491 * C46641;
    const double C46651 = C46641 * C46533;
    const double C46666 = C46587 + C46663;
    const double C46686 = C46321 * C46683;
    const double C2144 = C47384 * C1269;
    const double C11162 = C47481 * C1269;
    const double C12597 = C10297 * C1269;
    const double C31955 = C47481 * C1269;
    const double C33382 = C31090 * C1269;
    const double C2143 = C113 * C1259;
    const double C11163 = C10300 * C1259;
    const double C12596 = C10299 * C1259;
    const double C31956 = C31093 * C1259;
    const double C33381 = C31092 * C1259;
    const double C159 = C113 * C121;
    const double C10326 = C10299 * C121;
    const double C31119 = C31092 * C121;
    const double C341 = C113 * C292;
    const double C10504 = C10299 * C292;
    const double C31297 = C31092 * C292;
    const double C345 = C113 * C293;
    const double C10820 = C10299 * C293;
    const double C31613 = C31092 * C293;
    const double C522 = C113 * C473;
    const double C10682 = C10299 * C473;
    const double C10677 = C10300 * C473;
    const double C31475 = C31092 * C473;
    const double C31470 = C31093 * C473;
    const double C526 = C113 * C474;
    const double C10321 = C10300 * C474;
    const double C10958 = C10299 * C474;
    const double C31114 = C31093 * C474;
    const double C31751 = C31092 * C474;
    const double C932 = C113 * C908;
    const double C10499 = C10300 * C908;
    const double C11168 = C10299 * C908;
    const double C31292 = C31093 * C908;
    const double C31961 = C31092 * C908;
    const double C5911 = C47384 * C1279;
    const double C26736 = C10297 * C1279;
    const double C26729 = C47481 * C1279;
    const double C37880 = C31090 * C1279;
    const double C37873 = C47481 * C1279;
    const double C6393 = C47384 * C1669;
    const double C26559 = C47481 * C1669;
    const double C27198 = C10297 * C1669;
    const double C37703 = C47481 * C1669;
    const double C38342 = C31090 * C1669;
    const double C5740 = C113 * C1127;
    const double C26565 = C10299 * C1127;
    const double C37709 = C31092 * C1127;
    const double C5910 = C113 * C1264;
    const double C26735 = C10299 * C1264;
    const double C26730 = C10300 * C1264;
    const double C37879 = C31092 * C1264;
    const double C37874 = C31093 * C1264;
    const double C6392 = C113 * C1666;
    const double C26560 = C10300 * C1666;
    const double C27197 = C10299 * C1666;
    const double C37704 = C31093 * C1666;
    const double C38341 = C31092 * C1666;
    const double C46375 = C46363 + C46373;
    const double C5731 =
        (4 * (2 * C46862 + C46491 * C46875) +
         C46491 * (3 * C46875 +
                   C46491 * (2 * C46491 * C46379 +
                             C46491 * (C46379 + C46322 * C46391 * C46500)))) /
        C46273;
    const double C46954 = C46950 + C46953;
    const double C46574 = C46570 + C46573;
    const double C6772 = (3 * (C46504 + C46556 * C46533) +
                          C46321 * (2 * C46584 + C46321 * C46591)) /
                         C46273;
    const double C46664 = C46586 + C46660;
    const double C46616 = C46610 + C46614;
    const double C46478 = C46466 + C46476;
    const double C46810 = C46451 + C46809;
    const double C46850 = C46451 + C46848;
    const double C46888 = C46491 * C46887;
    const double C46913 = C46863 + C46911;
    const double C46944 = C46321 * C46941;
    const double C46962 = C46958 + C46961;
    const double C46974 = C46880 + C46972;
    const double C46990 = C46321 * C46988;
    const double C47010 = C47006 + C47008;
    const double C47139 = C47138 / C47129;
    const double C47452 = 2 * C47417;
    const double C47148 = C47147 / C47126;
    const double C47456 = C47421 / C47144;
    const double C47483 = C47415 - C47451;
    const double C2580 = -C47451;
    const double C47497 = C47482 + C47136;
    const double C47221 = C47220 / C47129;
    const double C47460 = 2 * C47426;
    const double C47228 = C47227 / C47126;
    const double C47470 = C47435 / C47144;
    const double C47491 = C47429 - C47467;
    const double C2472 = -C47467;
    const double C47500 = C47487 + C47217;
    const double C47263 = C47262 / C47129;
    const double C47463 = 2 * C47428;
    const double C47270 = C47269 / C47126;
    const double C47476 = C47441 / C47144;
    const double C47494 = C47430 - C47473;
    const double C3234 = -C47473;
    const double C47501 = C47489 + C47259;
    const double C22113 = C47384 * C5733;
    const double C21473 = C21467 * C21355;
    const double C156 = C113 * C131;
    const double C10323 = C10299 * C131;
    const double C31116 = C31092 * C131;
    const double C334 = C113 * C302;
    const double C10501 = C10299 * C302;
    const double C31294 = C31092 * C302;
    const double C339 = C113 * C306;
    const double C10493 = C10299 * C306;
    const double C31286 = C31092 * C306;
    const double C515 = C113 * C483;
    const double C10316 = C10300 * C483;
    const double C10679 = C10299 * C483;
    const double C31109 = C31093 * C483;
    const double C31472 = C31092 * C483;
    const double C520 = C113 * C487;
    const double C10671 = C10299 * C487;
    const double C10664 = C10300 * C487;
    const double C31464 = C31092 * C487;
    const double C31457 = C31093 * C487;
    const double C930 = C113 * C914;
    const double C10486 = C10300 * C914;
    const double C11165 = C10299 * C914;
    const double C31279 = C31093 * C914;
    const double C31958 = C31092 * C914;
    const double C4882 = C336 - C337;
    const double C4880 = C337 - C336;
    const double C5496 = C927 - C928;
    const double C5494 = C928 - C927;
    const double C22114 = C22106 * C21355;
    const double C22242 = C22234 * C21355;
    const double C21474 = C21468 * C47110;
    const double C158 = C47384 * C132;
    const double C10327 = C10297 * C132;
    const double C31120 = C31090 * C132;
    const double C340 = C47384 * C307;
    const double C10505 = C10297 * C307;
    const double C31298 = C31090 * C307;
    const double C344 = C47384 * C309;
    const double C10821 = C10297 * C309;
    const double C31614 = C31090 * C309;
    const double C521 = C47384 * C488;
    const double C10683 = C10297 * C488;
    const double C10676 = C47481 * C488;
    const double C31476 = C31090 * C488;
    const double C31469 = C47481 * C488;
    const double C525 = C47384 * C490;
    const double C10320 = C47481 * C490;
    const double C10959 = C10297 * C490;
    const double C31113 = C47481 * C490;
    const double C31752 = C31090 * C490;
    const double C931 = C47384 * C915;
    const double C10498 = C47481 * C915;
    const double C11169 = C10297 * C915;
    const double C31291 = C47481 * C915;
    const double C31962 = C31090 * C915;
    const double C1408 = C47384 * C1134;
    const double C46384 = C46377 + C46378;
    const double C46374 = C46365 + C46372;
    const double C6050 = C1403 - C1404;
    const double C6048 = C1404 - C1403;
    const double C6248 = C1561 - C1562;
    const double C6246 = C1562 - C1561;
    const double C22111 = C47384 * C5729;
    const double C46930 = C46341 + C46928;
    const double C160 = C47384 * C142;
    const double C10331 = C10297 * C142;
    const double C31124 = C31090 * C142;
    const double C335 = C47384 * C319;
    const double C10500 = C10297 * C319;
    const double C31293 = C31090 * C319;
    const double C338 = C47384 * C321;
    const double C10492 = C10297 * C321;
    const double C31285 = C31090 * C321;
    const double C516 = C47384 * C500;
    const double C10317 = C47481 * C500;
    const double C10678 = C10297 * C500;
    const double C31110 = C47481 * C500;
    const double C31471 = C31090 * C500;
    const double C519 = C47384 * C502;
    const double C10670 = C10297 * C502;
    const double C10665 = C47481 * C502;
    const double C31463 = C31090 * C502;
    const double C31458 = C47481 * C502;
    const double C929 = C47384 * C922;
    const double C10487 = C47481 * C922;
    const double C11164 = C10297 * C922;
    const double C31280 = C47481 * C922;
    const double C31957 = C31090 * C922;
    const double C1406 = C47384 * C1143;
    const double C11685 = C10297 * C1143;
    const double C32478 = C31090 * C1143;
    const double C22115 = C22107 * C47110;
    const double C22243 = C22235 * C47110;
    const double C46438 = C46425 + C46437;
    const double C1286 = (C46491 * C46354 + be * C46321 * C46506 +
                          C46321 * (be * C46506 + C46321 * C46491 * C46370)) /
                         C46275;
    const double C1270 = (C46491 * C46427 + C46506 * C46533) / C46273;
    const double C46542 = C46539 + C46540;
    const double C1564 = C47384 * C1289;
    const double C10494 = C47481 * C1289;
    const double C11887 = C10297 * C1289;
    const double C31287 = C47481 * C1289;
    const double C32680 = C31090 * C1289;
    const double C2260 = C47384 * C1987;
    const double C10672 = C47481 * C1987;
    const double C12739 = C10297 * C1987;
    const double C31465 = C47481 * C1987;
    const double C33524 = C31090 * C1987;
    const double C1405 = C113 * C1133;
    const double C11684 = C10299 * C1133;
    const double C32477 = C31092 * C1133;
    const double C1563 = C113 * C1276;
    const double C10495 = C10300 * C1276;
    const double C11886 = C10299 * C1276;
    const double C31288 = C31093 * C1276;
    const double C32679 = C31092 * C1276;
    const double C2259 = C113 * C1977;
    const double C10673 = C10300 * C1977;
    const double C12738 = C10299 * C1977;
    const double C31466 = C31093 * C1977;
    const double C33523 = C31092 * C1977;
    const double C5913 = C47384 * C1291;
    const double C26740 = C10297 * C1291;
    const double C26733 = C47481 * C1291;
    const double C37884 = C31090 * C1291;
    const double C37877 = C47481 * C1291;
    const double C6395 = C47384 * C1675;
    const double C26563 = C47481 * C1675;
    const double C27202 = C10297 * C1675;
    const double C37707 = C47481 * C1675;
    const double C38346 = C31090 * C1675;
    const double C23244 = C47384 * C7245;
    const double C26742 = C47481 * C7245;
    const double C37886 = C47481 * C7245;
    const double C5742 = C113 * C1137;
    const double C26569 = C10299 * C1137;
    const double C37713 = C31092 * C1137;
    const double C5912 = C113 * C1280;
    const double C26739 = C10299 * C1280;
    const double C26734 = C10300 * C1280;
    const double C37883 = C31092 * C1280;
    const double C37878 = C31093 * C1280;
    const double C6394 = C113 * C1670;
    const double C26564 = C10300 * C1670;
    const double C27201 = C10299 * C1670;
    const double C37708 = C31093 * C1670;
    const double C38345 = C31092 * C1670;
    const double C23243 = C113 * C7242;
    const double C26741 = C10300 * C7242;
    const double C37885 = C31093 * C7242;
    const double C6775 =
        (3 * (C46555 + be * C46584 + C46321 * C46590) +
         be * (2 * C46584 + C46321 * C46591) +
         C46321 *
             (2 * C46590 + be * C46591 +
              C46321 * (C46586 + be * C46321 * C46587 +
                        C46321 * (be * C46587 + C46321 * C46491 * C46390)))) /
        C46275;
    const double C46679 = C46672 + C46673;
    const double C46615 = C46612 + C46613;
    const double C46713 = C46711 + C46712;
    const double C1271 =
        (C46491 * C46355 + C46321 * (C46321 * C46491 * C46371 + C46792 * be) +
         C46321 * C46792 * be) /
        C46273;
    const double C2369 =
        (2 * (C46321 * C46866 + C46792 * be) +
         C46321 * (C46866 + C46321 * (C46321 * C46491 * C46395 + C46867 * be) +
                   C46321 * C46867 * be) +
         (C46792 + C46867 * C46533) * be) /
        C46273;
    const double C1260 = C46491 * C46708 + C46792 * C46533;
    const double C2364 =
        2 * C46321 * C46792 + C46321 * (C46792 + C46867 * C46533);
    const double C46849 = C46845 + C46846;
    const double C1566 = C47384 * C1277;
    const double C10507 = C47481 * C1277;
    const double C31300 = C47481 * C1277;
    const double C2262 = C47384 * C1978;
    const double C10685 = C47481 * C1978;
    const double C31478 = C47481 * C1978;
    const double C1407 = C113 * C1126;
    const double C1565 = C113 * C1263;
    const double C10506 = C10300 * C1263;
    const double C31299 = C31093 * C1263;
    const double C2261 = C113 * C1970;
    const double C10684 = C10300 * C1970;
    const double C31477 = C31093 * C1970;
    const double C1281 =
        (C46343 + C46357 * C46500 +
         C46321 * (C46321 * (C46357 + C46379 * C46500) + C46806 * be) +
         C46321 * C46806 * be) /
        C46273;
    const double C1671 =
        (C46321 * (2 * C46491 * C46357 + C46491 * (C46357 + C46379 * C46500)) +
         (2 * C46789 + C46491 * C46806) * be) /
        C46273;
    const double C7243 =
        (2 * (C46321 * C46875 + C46806 * be) +
         C46321 * (C46875 +
                   C46321 * (C46321 * (C46379 + C46322 * C46391 * C46500) +
                             C46887 * be) +
                   C46321 * C46887 * be) +
         (C46806 + C46887 * C46533) * be) /
        C46273;
    const double C1128 = 3 * (C46706 + C46433 * C46500) +
                         C46491 * (2 * C46789 + C46491 * C46806);
    const double C1265 = C46706 + C46433 * C46500 + C46806 * C46533;
    const double C1667 = C46321 * (2 * C46789 + C46491 * C46806);
    const double C7240 =
        2 * C46321 * C46806 + C46321 * (C46806 + C46887 * C46533);
    const double C1982 =
        (3 * (C46343 + C46321 * C46841 + C46839 * be) +
         C46321 * (2 * C46841 +
                   C46321 * (C46357 + C46321 * (C46321 * C46379 + C46447 * be) +
                             C46321 * C46447 * be) +
                   C46842 * be) +
         (2 * C46839 + C46321 * C46842) * be) /
        C46273;
    const double C1972 = 3 * (C46706 + C46433 * C46533) +
                         C46321 * (2 * C46839 + C46321 * C46842);
    const double C46912 = C46910 + C46907;
    const double C7107 = C47384 * C2367;
    const double C12599 = C47481 * C2367;
    const double C33384 = C47481 * C2367;
    const double C7106 = C113 * C2363;
    const double C12598 = C10300 * C2363;
    const double C33383 = C31093 * C2363;
    const double C46943 = C46321 * C46939;
    const double C46455 = C46431 + C46454;
    const double C46517 = C46436 + C46516;
    const double C46543 = C46436 + C46541;
    const double C46576 = 2 * C46559;
    const double C46594 = be * C46559;
    const double C46593 = C46321 * C46559;
    const double C2372 =
        (2 * (be * C46506 + C46321 * C46558) + be * (C46506 + C46559 * C46533) +
         C46321 * (C46558 + be * C46321 * C46559 +
                   C46321 * (be * C46559 + C46321 * C46491 * C46394))) /
        C46275;
    const double C2368 =
        (2 * C46321 * C46506 + C46321 * (C46506 + C46559 * C46533)) / C46273;
    const double C46624 = 2 * C46618;
    const double C46622 = be * C46618;
    const double C46882 = C46878 + C46881;
    const double C46973 = C46969 + C46970;
    const double C23242 = C47384 * C7241;
    const double C26738 = C47481 * C7241;
    const double C37882 = C47481 * C7241;
    const double C23241 = C113 * C7239;
    const double C26737 = C10300 * C7239;
    const double C37881 = C31093 * C7239;
    const double C6771 =
        (3 * (C46858 + C46321 * C46902 + C46898 * be) +
         C46321 * (2 * C46902 +
                   C46321 * (C46896 +
                             C46321 * (C46321 * C46491 * C46367 + C46899 * be) +
                             C46321 * C46899 * be) +
                   C46903 * be) +
         (2 * C46898 + C46321 * C46903) * be) /
        C46273;
    const double C6769 = 3 * (C46786 + C46859 * C46533) +
                         C46321 * (2 * C46898 + C46321 * C46903);
    const double C46989 = C46321 * C46987;
    const double C46931 = C46927 + C46929;
    const double C47009 = C46351 + C47007;
    const double C46399 = C46387 + C46397;
    const double C46398 = C46389 + C46396;
    const double C46568 = C46370 + C46567;
    const double C46597 = C46321 * C46595;
    const double C46623 = C46619 + C46620;
    const double C5747 = C47384 * C1146;
    const double C46636 = C46632 + C46635;
    const double C46652 = C46649 + C46650;
    const double C46667 = C46321 * C46665;
    const double C46687 = C46684 + C46685;
    const double C46479 = C46445 + C46477;
    const double C46578 = C46452 + C46577;
    const double C46598 = C46596 * C46533;
    const double C46625 = C46452 + C46621;
    const double C46643 = C46639 + C46642;
    const double C46653 = C46572 + C46651;
    const double C46668 = C46321 * C46666;
    const double C46688 = C46682 + C46686;
    const double C6974 = C2143 - C2144;
    const double C6972 = C2144 - C2143;
    const double C22108 = C5741 - C5740;
    const double C22236 = C5911 - C5910;
    const double C22600 = C6393 - C6392;
    const double C134 = (4 * (2 * C46343 + C46322 * C46355) +
                         C46322 * (3 * C46355 + C46322 * C46375)) /
                        C46273;
    const double C311 =
        (2 * C46343 + C46322 * C46355 + C46375 * C46500) / C46273;
    const double C313 = (C46491 * (3 * C46355 + C46322 * C46375)) / C46273;
    const double C22102 =
        (5 * (3 * C46871 + C46491 * C46954) +
         C46491 * (4 * C46954 +
                   C46491 * (3 * C46952 +
                             C46491 * (2 * C46491 * C46367 +
                                       C46491 * (C46367 + C46391 * C46500))))) /
        C46273;
    const double C5899 =
        (2 * C46555 + C46491 * C46565 + be * C46321 * C46574 +
         C46321 *
             (be * C46574 + C46321 * (2 * C46491 * C46366 +
                                      C46491 * (C46366 + C46390 * C46500)))) /
        C46275;
    const double C6389 =
        (be * (3 * C46514 + C46491 * C46574) +
         C46321 *
             (3 * C46565 + C46491 * (2 * C46491 * C46366 +
                                     C46491 * (C46366 + C46390 * C46500)))) /
        C46275;
    const double C5730 = (4 * (2 * C46504 + C46491 * C46514) +
                          C46491 * (3 * C46514 + C46491 * C46574)) /
                         C46273;
    const double C5896 =
        (2 * C46504 + C46491 * C46514 + C46574 * C46533) / C46273;
    const double C6386 = (C46321 * (3 * C46514 + C46491 * C46574)) / C46273;
    const double C28043 = C10300 * C6772;
    const double C39183 = C31093 * C6772;
    const double C12396 = (4 * (2 * C46530 + C46321 * C46536) +
                           C46321 * (3 * C46536 + C46321 * C46616)) /
                          C46273;
    const double C46480 = C46478 * ae;
    const double C46717 = C46322 * C46478;
    const double C46853 = C46491 * C46478;
    const double C1283 =
        (C46355 + C46371 * C46500 +
         C46321 * (C46321 * (C46371 + C46395 * C46500) + C46810 * be) +
         C46321 * C46810 * be) /
        C46273;
    const double C1673 =
        (C46321 * (2 * C46491 * C46371 + C46491 * (C46371 + C46395 * C46500)) +
         (2 * C46792 + C46491 * C46810) * be) /
        C46273;
    const double C1129 = 3 * (C46708 + C46451 * C46500) +
                         C46491 * (2 * C46792 + C46491 * C46810);
    const double C1266 = C46708 + C46451 * C46500 + C46810 * C46533;
    const double C1668 = C46321 * (2 * C46792 + C46491 * C46810);
    const double C1973 = 3 * (C46708 + C46451 * C46533) +
                         C46321 * (2 * C46847 + C46321 * C46850);
    const double C46889 = C46885 + C46888;
    const double C6770 = 3 * (C46789 + C46863 * C46533) +
                         C46321 * (2 * C46908 + C46321 * C46913);
    const double C46946 = C46942 + C46944;
    const double C46963 = C46491 * C46962;
    const double C22890 = 3 * (C46802 + C46880 * C46533) +
                          C46321 * (2 * C46971 + C46321 * C46974);
    const double C46992 = C46986 + C46990;
    const double C47012 = C46321 * C47010;
    const double C47140 = C47136 - C47139;
    const double C47484 = C47452 / C47126;
    const double C47149 = C47145 - C47148;
    const double C47498 = C47483 / C47130;
    const double C47222 = C47217 - C47221;
    const double C47488 = C47460 / C47126;
    const double C47229 = C47225 - C47228;
    const double C47502 = C47491 / C47130;
    const double C47264 = C47259 - C47263;
    const double C47490 = C47463 / C47126;
    const double C47271 = C47267 - C47270;
    const double C47504 = C47494 / C47130;
    const double C169 = C156 - C157;
    const double C21469 = C4880 * C21355;
    const double C21477 = C21473 + C21474;
    const double C170 = C158 - C159;
    const double C354 = C340 - C341;
    const double C4886 = C341 - C340;
    const double C645 = C344 - C345;
    const double C5164 = C345 - C344;
    const double C535 = C521 - C522;
    const double C755 = C525 - C526;
    const double C939 = C931 - C932;
    const double C5498 = C932 - C931;
    const double C143 =
        (4 * (2 * C46354 + ae * C46355 + C46322 * C46374) +
         ae * (3 * C46355 + C46322 * C46375) +
         C46322 * (3 * C46374 + ae * C46375 +
                   C46322 * (2 * C46370 + ae * C46371 +
                             C46322 * (C46366 + ae * C46322 * C46367 +
                                       C46322 * (ae * C46367 +
                                                 C46322 * std::pow(C46326, 7) *
                                                     bs[7] * C46333))))) /
        C46275;
    const double C322 = (C46340 + ae * C46343 + C46322 * C46354 +
                         C46374 * std::pow(yP - yQ, 2)) /
                        C46275;
    const double C323 =
        ((yP - yQ) * (2 * C46354 + ae * C46355 + C46322 * C46374)) / C46275;
    const double C22346 = C6048 * C21355;
    const double C22495 = C6246 * C21355;
    const double C46932 = C46930 + C46925;
    const double C353 = C334 - C335;
    const double C4885 = C335 - C334;
    const double C4883 = C338 - C339;
    const double C4881 = C339 - C338;
    const double C534 = C515 - C516;
    const double C5497 = C929 - C930;
    const double C5495 = C930 - C929;
    const double C22118 = C22114 + C22115;
    const double C22246 = C22242 + C22243;
    const double C46439 = C46438 + C46435;
    const double C2146 = C47384 * C1286;
    const double C11166 = C47481 * C1286;
    const double C12601 = C10297 * C1286;
    const double C31959 = C47481 * C1286;
    const double C33386 = C31090 * C1286;
    const double C2145 = C113 * C1270;
    const double C11167 = C10300 * C1270;
    const double C12600 = C10299 * C1270;
    const double C31960 = C31093 * C1270;
    const double C33385 = C31092 * C1270;
    const double C6051 = C1405 - C1406;
    const double C6049 = C1406 - C1405;
    const double C6249 = C1563 - C1564;
    const double C6247 = C1564 - C1563;
    const double C22109 = C5743 - C5742;
    const double C22237 = C5913 - C5912;
    const double C22601 = C6395 - C6394;
    const double C28044 = C47481 * C6775;
    const double C39184 = C47481 * C6775;
    const double C12399 =
        (4 * (2 * C46534 + be * C46536 + C46321 * C46615) +
         be * (3 * C46536 + C46321 * C46616) +
         C46321 *
             (3 * C46615 + be * C46616 +
              C46321 * (2 * C46609 + be * C46611 +
                        C46321 * (C46366 + be * C46321 * C46445 +
                                  C46321 * (be * C46445 + C46321 * C46390))))) /
        C46275;
    const double C492 =
        (2 * C46343 + C46322 * C46355 +
         C46321 * (C46321 * C46375 + C46713 * be) + C46321 * C46713 * be) /
        C46273;
    const double C494 = (C46321 * (3 * C46355 + C46322 * C46375) +
                         (3 * C46708 + C46322 * C46713) * be) /
                        C46273;
    const double C917 =
        (C46321 * C46491 * C46375 + C46491 * C46713 * be) / C46273;
    const double C122 = 4 * (2 * C46706 + C46322 * C46708) +
                        C46322 * (3 * C46708 + C46322 * C46713);
    const double C294 = 2 * C46706 + C46322 * C46708 + C46713 * C46500;
    const double C295 = C46491 * (3 * C46708 + C46322 * C46713);
    const double C475 = 2 * C46706 + C46322 * C46708 + C46713 * C46533;
    const double C476 = C46321 * (3 * C46708 + C46322 * C46713);
    const double C909 = C46321 * C46491 * C46713;
    const double C1398 =
        2 * C46491 * C46713 + C46491 * (C46713 + C46478 * C46500);
    const double C1556 = C46321 * (C46713 + C46478 * C46500);
    const double C2252 =
        2 * C46321 * C46713 + C46321 * (C46713 + C46478 * C46533);
    const double C2148 = C47384 * C1271;
    const double C11171 = C47481 * C1271;
    const double C31964 = C47481 * C1271;
    const double C2147 = C113 * C1260;
    const double C11170 = C10300 * C1260;
    const double C31963 = C31093 * C1260;
    const double C1984 =
        (3 * (C46355 + C46321 * C46849 + C46847 * be) +
         C46321 * (2 * C46849 +
                   C46321 * (C46371 + C46321 * (C46321 * C46395 + C46473 * be) +
                             C46321 * C46473 * be) +
                   C46850 * be) +
         (2 * C46847 + C46321 * C46850) * be) /
        C46273;
    const double C5915 = C47384 * C1281;
    const double C11885 = C47481 * C1281;
    const double C32678 = C47481 * C1281;
    const double C6251 = C47384 * C1671;
    const double C11683 = C47481 * C1671;
    const double C32476 = C47481 * C1671;
    const double C5744 = C113 * C1128;
    const double C5914 = C113 * C1265;
    const double C11884 = C10300 * C1265;
    const double C32677 = C31093 * C1265;
    const double C6250 = C113 * C1667;
    const double C11682 = C10300 * C1667;
    const double C32475 = C31093 * C1667;
    const double C12737 = C47481 * C1982;
    const double C33522 = C47481 * C1982;
    const double C12736 = C10300 * C1972;
    const double C33521 = C31093 * C1972;
    const double C6773 =
        (3 * (C46862 + C46321 * C46912 + C46908 * be) +
         C46321 * (2 * C46912 +
                   C46321 * (C46906 +
                             C46321 * (C46321 * C46491 * C46322 * C46391 +
                                       C46909 * be) +
                             C46321 * C46909 * be) +
                   C46913 * be) +
         (2 * C46908 + C46321 * C46913) * be) /
        C46273;
    const double C46945 = C46357 + C46943;
    const double C46456 = C46455 + C46450;
    const double C1292 =
        (C46354 + C46370 * C46500 + be * C46321 * C46517 +
         C46321 * (be * C46517 + C46321 * (C46370 + C46394 * C46500))) /
        C46275;
    const double C1676 =
        (be * (2 * C46506 + C46491 * C46517) +
         C46321 * (2 * C46491 * C46370 + C46491 * (C46370 + C46394 * C46500))) /
        C46275;
    const double C1139 = (3 * (C46427 + C46436 * C46500) +
                          C46491 * (2 * C46506 + C46491 * C46517)) /
                         C46273;
    const double C1282 = (C46427 + C46436 * C46500 + C46517 * C46533) / C46273;
    const double C1672 = (C46321 * (2 * C46506 + C46491 * C46517)) / C46273;
    const double C1990 =
        (3 * (C46354 + be * C46538 + C46321 * C46542) +
         be * (2 * C46538 + C46321 * C46543) +
         C46321 * (2 * C46542 + be * C46543 +
                   C46321 * (C46370 + be * C46321 * C46452 +
                             C46321 * (be * C46452 + C46321 * C46394)))) /
        C46275;
    const double C1983 = (3 * (C46427 + C46436 * C46533) +
                          C46321 * (2 * C46538 + C46321 * C46543)) /
                         C46273;
    const double C7109 = C47384 * C2372;
    const double C12603 = C47481 * C2372;
    const double C33388 = C47481 * C2372;
    const double C7108 = C113 * C2368;
    const double C12602 = C10300 * C2368;
    const double C33387 = C31093 * C2368;
    const double C46626 = C46370 + C46622;
    const double C5895 =
        (2 * C46858 + C46491 * C46871 +
         C46321 * (C46321 * (2 * C46491 * C46351 +
                             C46491 * (C46351 + C46367 * C46500)) +
                   C46882 * be) +
         C46321 * C46882 * be) /
        C46273;
    const double C6385 =
        (C46321 *
             (3 * C46871 + C46491 * (2 * C46491 * C46351 +
                                     C46491 * (C46351 + C46367 * C46500))) +
         (3 * C46802 + C46491 * C46882) * be) /
        C46273;
    const double C23237 =
        (2 * (C46321 * C46954 + C46882 * be) +
         C46321 * (C46954 +
                   C46321 * (C46321 * (2 * C46491 * C46367 +
                                       C46491 * (C46367 + C46391 * C46500)) +
                             C46962 * be) +
                   C46321 * C46962 * be) +
         (C46882 + C46962 * C46533) * be) /
        C46273;
    const double C5727 = 4 * (2 * C46786 + C46491 * C46802) +
                         C46491 * (3 * C46802 + C46491 * C46882);
    const double C5893 = 2 * C46786 + C46491 * C46802 + C46882 * C46533;
    const double C6383 = C46321 * (3 * C46802 + C46491 * C46882);
    const double C23236 =
        2 * C46321 * C46882 + C46321 * (C46882 + C46962 * C46533);
    const double C22891 =
        (3 * (C46871 + C46321 * C46973 + C46971 * be) +
         C46321 * (2 * C46973 +
                   C46321 * (C46952 +
                             C46321 * (C46321 * (C46367 + C46391 * C46500) +
                                       C46960 * be) +
                             C46321 * C46960 * be) +
                   C46974 * be) +
         (2 * C46971 + C46321 * C46974) * be) /
        C46273;
    const double C28040 = C47481 * C6771;
    const double C39180 = C47481 * C6771;
    const double C28039 = C10300 * C6769;
    const double C39179 = C31093 * C6769;
    const double C46991 = C46896 + C46989;
    const double C12393 = 4 * (2 * C46831 + C46321 * C46834) +
                          C46321 * (3 * C46834 + C46321 * C46931);
    const double C47011 = C47009 + C47004;
    const double C46401 = C46322 * C46399;
    const double C1399 =
        (2 * C46491 * C46375 + C46491 * (C46375 + C46399 * C46500)) / C46273;
    const double C1557 = (C46321 * (C46375 + C46399 * C46500) +
                          (C46713 + C46478 * C46500) * be) /
                         C46273;
    const double C2253 =
        (2 * (C46321 * C46375 + C46713 * be) +
         C46321 * (C46375 + C46321 * (C46321 * C46399 + C46478 * be) +
                   C46321 * C46478 * be) +
         (C46713 + C46478 * C46533) * be) /
        C46273;
    const double C46400 = C46322 * C46398;
    const double C46547 = C46321 * C46398;
    const double C46561 = C46491 * C46398;
    const double C1144 = (2 * C46491 * C46374 +
                          C46491 * (C46374 + C46398 * std::pow(C46491, 2))) /
                         C46275;
    const double C1147 =
        (3 * (C46374 + C46398 * C46500) +
         C46491 * (2 * C46491 * C46398 +
                   C46491 * (C46398 + (C46390 + ae * C46322 * C46391 +
                                       C46322 * (ae * C46391 +
                                                 C46322 * std::pow(C46324, 8) *
                                                     bs[8] * C46333)) *
                                          C46500))) /
        C46275;
    const double C5734 =
        (4 * (2 * C46558 + C46491 * C46568) +
         C46491 * (3 * C46568 +
                   C46491 * (2 * C46491 * C46394 +
                             C46491 * (C46394 + (ae * C46391 +
                                                 C46322 * std::pow(C46324, 8) *
                                                     bs[8] * C46333) *
                                                    C46500)))) /
        C46275;
    const double C46599 = C46594 + C46597;
    const double C46627 = C46321 * C46623;
    const double C22104 =
        (5 * (3 * C46565 + C46491 * C46636) +
         C46491 * (4 * C46636 +
                   C46491 * (3 * C46634 +
                             C46491 * (2 * C46491 * C46390 +
                                       C46491 * (C46390 + std::pow(C46324, 8) *
                                                              bs[8] * C46333 *
                                                              C46500))))) /
        C46275;
    const double C46669 = C46664 + C46667;
    const double C46689 = C46321 * C46687;
    const double C46481 = C46479 + C46472;
    const double C46579 = C46491 * C46578;
    const double C7246 =
        (2 * (be * C46517 + C46321 * C46568) + be * (C46517 + C46578 * C46533) +
         C46321 * (C46568 + be * C46321 * C46578 +
                   C46321 * (be * C46578 +
                             C46321 * (C46394 + (ae * C46391 +
                                                 C46322 * std::pow(C46324, 8) *
                                                     bs[8] * C46333) *
                                                    C46500)))) /
        C46275;
    const double C7244 =
        (2 * C46321 * C46517 + C46321 * (C46517 + C46578 * C46533)) / C46273;
    const double C46600 = C46559 + C46598;
    const double C46628 = C46321 * C46625;
    const double C46644 = C46491 * C46643;
    const double C23239 =
        (2 * (be * C46574 + C46321 * C46636) + be * (C46574 + C46643 * C46533) +
         C46321 * (C46636 + be * C46321 * C46643 +
                   C46321 * (be * C46643 +
                             C46321 * (2 * C46491 * C46390 +
                                       C46491 * (C46390 + std::pow(C46324, 8) *
                                                              bs[8] * C46333 *
                                                              C46500))))) /
        C46275;
    const double C23238 =
        (2 * C46321 * C46574 + C46321 * (C46574 + C46643 * C46533)) / C46273;
    const double C22893 =
        (3 * (C46565 + be * C46648 + C46321 * C46652) +
         be * (2 * C46648 + C46321 * C46653) +
         C46321 * (2 * C46652 + be * C46653 +
                   C46321 * (C46634 + be * C46321 * C46641 +
                             C46321 * (be * C46641 +
                                       C46321 * (C46390 + std::pow(C46324, 8) *
                                                              bs[8] * C46333 *
                                                              C46500))))) /
        C46275;
    const double C22892 = (3 * (C46514 + C46572 * C46533) +
                           C46321 * (2 * C46648 + C46321 * C46653)) /
                          C46273;
    const double C46670 = C46662 + C46668;
    const double C46690 = C46321 * C46688;
    const double C22116 = C22108 * C21355;
    const double C22244 = C22236 * C21355;
    const double C22606 = C22600 * C21355;
    const double C163 = C47384 * C134;
    const double C349 = C47384 * C311;
    const double C648 = C47384 * C313;
    const double C22241 = C47384 * C5899;
    const double C27204 = C47481 * C5899;
    const double C38348 = C47481 * C5899;
    const double C22605 = C47384 * C6389;
    const double C26572 = C47481 * C6389;
    const double C37716 = C47481 * C6389;
    const double C22112 = C113 * C5730;
    const double C22240 = C113 * C5896;
    const double C27203 = C10300 * C5896;
    const double C38347 = C31093 * C5896;
    const double C22604 = C113 * C6386;
    const double C26571 = C10300 * C6386;
    const double C37715 = C31093 * C6386;
    const double C46718 = C46716 + C46717;
    const double C2139 =
        (C46491 * C46375 + C46321 * (C46321 * C46491 * C46399 + C46853 * be) +
         C46321 * C46853 * be) /
        C46273;
    const double C2138 = C46491 * C46713 + C46853 * C46533;
    const double C5897 =
        (2 * C46862 + C46491 * C46875 +
         C46321 * (C46321 * (2 * C46491 * C46379 +
                             C46491 * (C46379 + C46322 * C46391 * C46500)) +
                   C46889 * be) +
         C46321 * C46889 * be) /
        C46273;
    const double C6387 =
        (C46321 * (3 * C46875 +
                   C46491 * (2 * C46491 * C46379 +
                             C46491 * (C46379 + C46322 * C46391 * C46500))) +
         (3 * C46806 + C46491 * C46889) * be) /
        C46273;
    const double C5728 = 4 * (2 * C46789 + C46491 * C46806) +
                         C46491 * (3 * C46806 + C46491 * C46889);
    const double C5894 = 2 * C46789 + C46491 * C46806 + C46889 * C46533;
    const double C6384 = C46321 * (3 * C46806 + C46491 * C46889);
    const double C12394 = 4 * (2 * C46839 + C46321 * C46842) +
                          C46321 * (3 * C46842 + C46321 * C46946);
    const double C46964 = C46957 + C46963;
    const double C27578 = 4 * (2 * C46898 + C46321 * C46903) +
                          C46321 * (3 * C46903 + C46321 * C46992);
    const double C47014 = C47002 + C47012;
    const double C47414 = C47140 * C47128;
    const double C47454 = C47419 + C47140;
    const double C47422 = C47149 / C47130;
    const double C47418 = C47149 * C47128;
    const double C636 = C47498 - (C47140 * C47131) / C47126;
    const double C47432 = C47222 * C47216;
    const double C47469 = C47434 + C47222;
    const double C47436 = C47229 / C47130;
    const double C47433 = C47229 * C47216;
    const double C1392 = C47502 - (C47222 * C47218) / C47126;
    const double C47438 = C47264 * C47258;
    const double C47475 = C47440 + C47264;
    const double C47442 = C47271 / C47130;
    const double C47439 = C47271 * C47258;
    const double C2248 = C47504 - (C47264 * C47260) / C47126;
    const double C21471 = C354 * C21355;
    const double C165 = C47384 * C143;
    const double C342 = C47384 * C322;
    const double C10509 = C10297 * C322;
    const double C31302 = C31090 * C322;
    const double C346 = C47384 * C323;
    const double C10825 = C10297 * C323;
    const double C31618 = C31090 * C323;
    const double C12395 =
        (4 * (2 * C46833 + C46321 * C46932 + C46834 * be) +
         C46321 *
             (3 * C46932 +
              C46321 *
                  (2 * C46924 +
                   C46321 * (C46351 + C46321 * (C46321 * C46367 + C46444 * be) +
                             C46321 * C46444 * be) +
                   C46926 * be) +
              C46931 * be) +
         (3 * C46834 + C46321 * C46931) * be) /
        C46273;
    const double C21470 = C4881 * C47110;
    const double C503 =
        (C46340 + ae * C46343 + C46322 * C46354 + be * C46321 * C46439 +
         C46321 * (be * C46439 + C46321 * C46374)) /
        C46275;
    const double C504 =
        (be * (2 * C46427 + C46322 * C46439 + (C46418 + C46430 * C46347) * ae) +
         C46321 * (2 * C46354 + ae * C46355 + C46322 * C46374)) /
        C46275;
    const double C923 =
        (be * C46491 * C46439 + C46321 * C46491 * C46374) / C46275;
    const double C133 = (3 * (C46421 + C46322 * C46427 + C46706 * ae) +
                         C46322 * (2 * C46427 + C46322 * C46439 + C46708 * ae) +
                         (2 * C46706 + C46322 * C46708) * ae) /
                        C46273;
    const double C308 =
        (C46421 + C46322 * C46427 + C46706 * ae + C46439 * C46500) / C46273;
    const double C310 =
        (C46491 * (2 * C46427 + C46322 * C46439 + C46708 * ae)) / C46273;
    const double C489 =
        (C46421 + C46322 * C46427 + C46706 * ae + C46439 * C46533) / C46273;
    const double C491 =
        (C46321 * (2 * C46427 + C46322 * C46439 + C46708 * ae)) / C46273;
    const double C916 = (C46321 * C46491 * C46439) / C46273;
    const double C6975 = C2145 - C2146;
    const double C6973 = C2146 - C2145;
    const double C22347 = C6049 * C47110;
    const double C22496 = C6247 * C47110;
    const double C22117 = C22109 * C47110;
    const double C22245 = C22237 * C47110;
    const double C22607 = C22601 * C47110;
    const double C530 = C47384 * C492;
    const double C10961 = C47481 * C492;
    const double C31754 = C47481 * C492;
    const double C758 = C47384 * C494;
    const double C10329 = C47481 * C494;
    const double C31122 = C47481 * C494;
    const double C936 = C47384 * C917;
    const double C10823 = C47481 * C917;
    const double C31616 = C47481 * C917;
    const double C162 = C113 * C122;
    const double C348 = C113 * C294;
    const double C647 = C113 * C295;
    const double C529 = C113 * C475;
    const double C10960 = C10300 * C475;
    const double C31753 = C31093 * C475;
    const double C757 = C113 * C476;
    const double C10328 = C10300 * C476;
    const double C31121 = C31093 * C476;
    const double C935 = C113 * C909;
    const double C10822 = C10300 * C909;
    const double C31615 = C31093 * C909;
    const double C46947 = C46945 + C46940;
    const double C46457 = C46322 * C46456;
    const double C46462 = 3 * C46456;
    const double C46508 = C46491 * C46456;
    const double C46546 = be * C46456;
    const double C46545 = C46321 * C46456;
    const double C1290 = (be * (C46439 + C46456 * C46500) +
                          C46321 * (C46374 + C46398 * C46500)) /
                         C46275;
    const double C1988 = (2 * (be * C46439 + C46321 * C46374) +
                          be * (C46439 + C46456 * std::pow(C46321, 2)) +
                          C46321 * (C46374 + be * C46321 * C46456 +
                                    C46321 * (be * C46456 + C46321 * C46398))) /
                         C46275;
    const double C1135 =
        (2 * C46491 * C46439 + C46491 * (C46439 + C46456 * C46500)) / C46273;
    const double C1278 = (C46321 * (C46439 + C46456 * C46500)) / C46273;
    const double C1979 =
        (2 * C46321 * C46439 + C46321 * (C46439 + C46456 * C46533)) / C46273;
    const double C5917 = C47384 * C1292;
    const double C11889 = C47481 * C1292;
    const double C32682 = C47481 * C1292;
    const double C6253 = C47384 * C1676;
    const double C11687 = C47481 * C1676;
    const double C32480 = C47481 * C1676;
    const double C5746 = C113 * C1139;
    const double C5916 = C113 * C1282;
    const double C11888 = C10300 * C1282;
    const double C32681 = C31093 * C1282;
    const double C6252 = C113 * C1672;
    const double C11686 = C10300 * C1672;
    const double C32479 = C31093 * C1672;
    const double C12741 = C47481 * C1990;
    const double C33526 = C47481 * C1990;
    const double C12740 = C10300 * C1983;
    const double C33525 = C31093 * C1983;
    const double C22239 = C47384 * C5895;
    const double C27200 = C47481 * C5895;
    const double C38344 = C47481 * C5895;
    const double C22603 = C47384 * C6385;
    const double C26568 = C47481 * C6385;
    const double C37712 = C47481 * C6385;
    const double C22110 = C113 * C5727;
    const double C22238 = C113 * C5893;
    const double C27199 = C10300 * C5893;
    const double C38343 = C31093 * C5893;
    const double C22602 = C113 * C6383;
    const double C26567 = C10300 * C6383;
    const double C37711 = C31093 * C6383;
    const double C46993 = C46991 + C46984;
    const double C47013 = C46321 * C47011;
    const double C46403 = C46383 + C46401;
    const double C46402 = C46384 + C46400;
    const double C1410 = C47384 * C1144;
    const double C46629 = C46626 + C46627;
    const double C46691 = C46679 + C46689;
    const double C46482 = C46322 * C46481;
    const double C46519 = C46481 * C46500;
    const double C46548 = C46481 * C46533;
    const double C46562 = C46491 * C46481;
    const double C46580 = C46576 + C46579;
    const double C6776 =
        (3 * (C46558 + be * C46593 + C46321 * C46599) +
         be * (2 * C46593 + C46321 * C46600) +
         C46321 * (2 * C46599 + be * C46600 +
                   C46321 * (C46595 + be * C46321 * C46596 +
                             C46321 * (be * C46596 +
                                       C46321 * C46491 *
                                           (ae * C46391 +
                                            C46322 * std::pow(C46324, 8) *
                                                bs[8] * C46333))))) /
        C46275;
    const double C6774 = (3 * (C46506 + C46559 * C46533) +
                          C46321 * (2 * C46593 + C46321 * C46600)) /
                         C46273;
    const double C46630 = C46624 + C46628;
    const double C46645 = C46638 + C46644;
    const double C27581 =
        (4 * (2 * C46590 + be * C46591 + C46321 * C46669) +
         be * (3 * C46591 + C46321 * C46670) +
         C46321 * (3 * C46669 + be * C46670 +
                   C46321 * (2 * C46665 + be * C46666 +
                             C46321 * (C46658 + be * C46321 * C46659 +
                                       C46321 * (be * C46659 +
                                                 C46321 * C46491 *
                                                     std::pow(C46324, 8) *
                                                     bs[8] * C46333))))) /
        C46275;
    const double C27580 = (4 * (2 * C46584 + C46321 * C46591) +
                           C46321 * (3 * C46591 + C46321 * C46670)) /
                          C46273;
    const double C46692 = C46677 + C46690;
    const double C123 = 5 * (3 * C46708 + C46322 * C46713) +
                        C46322 * (4 * C46713 + C46322 * C46718);
    const double C296 = 3 * C46708 + C46322 * C46713 + C46718 * C46500;
    const double C477 = 3 * C46708 + C46322 * C46713 + C46718 * C46533;
    const double C640 = C46491 * (4 * C46713 + C46322 * C46718);
    const double C750 = C46321 * (4 * C46713 + C46322 * C46718);
    const double C910 = C46321 * C46491 * C46718;
    const double C22230 =
        (3 * C46871 + C46491 * C46954 +
         C46321 * (C46321 * (3 * C46952 +
                             C46491 * (2 * C46491 * C46367 +
                                       C46491 * (C46367 + C46391 * C46500))) +
                   C46964 * be) +
         C46321 * C46964 * be) /
        C46273;
    const double C22596 =
        (C46321 * (4 * C46954 +
                   C46491 * (3 * C46952 +
                             C46491 * (2 * C46491 * C46367 +
                                       C46491 * (C46367 + C46391 * C46500)))) +
         (4 * C46882 + C46491 * C46964) * be) /
        C46273;
    const double C22101 = 5 * (3 * C46802 + C46491 * C46882) +
                          C46491 * (4 * C46882 + C46491 * C46964);
    const double C22229 = 3 * C46802 + C46491 * C46882 + C46964 * C46533;
    const double C22595 = C46321 * (4 * C46882 + C46491 * C46964);
    const double C43684 = 5 * (3 * C46834 + C46321 * C46931) +
                          C46321 * (4 * C46931 + C46321 * C47014);
    const double C47450 = C47414 / C47126;
    const double C47485 = C47454 / C47130;
    const double C47486 = C47456 + C47422;
    const double C638 = C47422 - C47147 / C47144;
    const double C47453 = C47418 / C47126;
    const double C47466 = C47432 / C47126;
    const double C47492 = C47469 / C47130;
    const double C47493 = C47470 + C47436;
    const double C1394 = C47436 - C47227 / C47144;
    const double C47468 = C47433 / C47126;
    const double C47472 = C47438 / C47126;
    const double C47495 = C47475 / C47130;
    const double C47496 = C47476 + C47442;
    const double C2250 = C47442 - C47269 / C47144;
    const double C47474 = C47439 / C47126;
    const double C21475 = C21469 + C21470;
    const double C523 = C47384 * C503;
    const double C10687 = C10297 * C503;
    const double C10680 = C47481 * C503;
    const double C31480 = C31090 * C503;
    const double C31473 = C47481 * C503;
    const double C527 = C47384 * C504;
    const double C10324 = C47481 * C504;
    const double C10963 = C10297 * C504;
    const double C31117 = C47481 * C504;
    const double C31756 = C31090 * C504;
    const double C933 = C47384 * C923;
    const double C10502 = C47481 * C923;
    const double C11173 = C10297 * C923;
    const double C31295 = C47481 * C923;
    const double C31966 = C31090 * C923;
    const double C161 = C113 * C133;
    const double C10330 = C10299 * C133;
    const double C31123 = C31092 * C133;
    const double C343 = C113 * C308;
    const double C10508 = C10299 * C308;
    const double C31301 = C31092 * C308;
    const double C347 = C113 * C310;
    const double C10824 = C10299 * C310;
    const double C31617 = C31092 * C310;
    const double C524 = C113 * C489;
    const double C10686 = C10299 * C489;
    const double C10681 = C10300 * C489;
    const double C31479 = C31092 * C489;
    const double C31474 = C31093 * C489;
    const double C528 = C113 * C491;
    const double C10325 = C10300 * C491;
    const double C10962 = C10299 * C491;
    const double C31118 = C31093 * C491;
    const double C31755 = C31092 * C491;
    const double C934 = C113 * C916;
    const double C10503 = C10300 * C916;
    const double C11172 = C10299 * C916;
    const double C31296 = C31093 * C916;
    const double C31965 = C31092 * C916;
    const double C22348 = C22346 + C22347;
    const double C22497 = C22495 + C22496;
    const double C22119 = C22116 + C22117;
    const double C22247 = C22244 + C22245;
    const double C22608 = C22606 + C22607;
    const double C12397 =
        (4 * (2 * C46841 + C46321 * C46947 + C46842 * be) +
         C46321 * (3 * C46947 +
                   C46321 * (2 * C46939 +
                             C46321 * (C46379 +
                                       C46321 * (C46321 * C46322 * C46391 +
                                                 C46469 * be) +
                                       C46321 * C46469 * be) +
                             C46941 * be) +
                   C46946 * be) +
         (3 * C46842 + C46321 * C46946) * be) /
        C46273;
    const double C46458 = C46442 + C46457;
    const double C1287 = (C46491 * C46374 + be * C46321 * C46508 +
                          C46321 * (be * C46508 + C46321 * C46491 * C46398)) /
                         C46275;
    const double C1272 = (C46491 * C46439 + C46508 * C46533) / C46273;
    const double C46549 = C46546 + C46547;
    const double C1568 = C47384 * C1290;
    const double C10511 = C47481 * C1290;
    const double C31304 = C47481 * C1290;
    const double C2264 = C47384 * C1988;
    const double C10689 = C47481 * C1988;
    const double C31482 = C47481 * C1988;
    const double C1409 = C113 * C1135;
    const double C1567 = C113 * C1278;
    const double C10510 = C10300 * C1278;
    const double C31303 = C31093 * C1278;
    const double C2263 = C113 * C1979;
    const double C10688 = C10300 * C1979;
    const double C31481 = C31093 * C1979;
    const double C27579 =
        (4 * (2 * C46902 + C46321 * C46993 + C46903 * be) +
         C46321 * (3 * C46993 +
                   C46321 * (2 * C46987 +
                             C46321 * (C46979 +
                                       C46321 * (C46321 * C46491 * C46391 +
                                                 C46982 * be) +
                                       C46321 * C46982 * be) +
                             C46988 * be) +
                   C46992 * be) +
         (3 * C46903 + C46321 * C46992) * be) /
        C46273;
    const double C47015 = C46996 + C47013;
    const double C136 = (5 * (3 * C46355 + C46322 * C46375) +
                         C46322 * (4 * C46375 + C46322 * C46403)) /
                        C46273;
    const double C315 =
        (3 * C46355 + C46322 * C46375 + C46403 * C46500) / C46273;
    const double C496 =
        (3 * C46355 + C46322 * C46375 +
         C46321 * (C46321 * C46403 + C46718 * be) + C46321 * C46718 * be) /
        C46273;
    const double C641 = (C46491 * (4 * C46375 + C46322 * C46403)) / C46273;
    const double C751 = (C46321 * (4 * C46375 + C46322 * C46403) +
                         (4 * C46713 + C46322 * C46718) * be) /
                        C46273;
    const double C919 =
        (C46321 * C46491 * C46403 + C46491 * C46718 * be) / C46273;
    const double C144 =
        (5 * (3 * C46374 + ae * C46375 + C46322 * C46402) +
         ae * (4 * C46375 + C46322 * C46403) +
         C46322 *
             (4 * C46402 + ae * C46403 +
              C46322 *
                  (3 * C46398 + ae * C46399 +
                   C46322 * (2 * C46394 + ae * C46395 +
                             C46322 * (C46390 + ae * C46322 * C46391 +
                                       C46322 * (ae * C46391 +
                                                 C46322 * std::pow(C46324, 8) *
                                                     bs[8] * C46333)))))) /
        C46275;
    const double C324 = (2 * C46354 + ae * C46355 + C46322 * C46374 +
                         C46402 * std::pow(yP - yQ, 2)) /
                        C46275;
    const double C325 =
        ((yP - yQ) * (3 * C46374 + ae * C46375 + C46322 * C46402)) / C46275;
    const double C326 =
        (3 * C46374 + ae * C46375 + C46322 * C46402 +
         (3 * C46398 + ae * C46399 +
          C46322 *
              (2 * C46394 + ae * C46395 +
               C46322 * (C46390 + ae * C46322 * C46391 +
                         C46322 * (ae * C46391 + C46322 * std::pow(C46324, 8) *
                                                     bs[8] * C46333)))) *
             std::pow(yP - yQ, 2)) /
        C46275;
    const double C643 =
        ((yP - yQ) *
         (4 * C46402 + ae * C46403 +
          C46322 * (3 * C46398 + ae * C46399 +
                    C46322 * (2 * C46394 + ae * C46395 +
                              C46322 * (C46390 + ae * C46322 * C46391 +
                                        C46322 * (ae * C46391 +
                                                  C46322 * std::pow(C46324, 8) *
                                                      bs[8] * C46333)))))) /
        C46275;
    const double C1401 =
        (2 * C46491 * C46402 +
         C46491 * (C46402 + (2 * C46394 + ae * C46395 +
                             C46322 * (C46390 + ae * C46322 * C46391 +
                                       C46322 * (ae * C46391 +
                                                 C46322 * std::pow(C46324, 8) *
                                                     bs[8] * C46333))) *
                                C46500)) /
        C46275;
    const double C46483 = C46463 + C46482;
    const double C46520 = C46456 + C46519;
    const double C46550 = C46456 + C46548;
    const double C2373 =
        (2 * (be * C46508 + C46321 * C46561) + be * (C46508 + C46562 * C46533) +
         C46321 * (C46561 + be * C46321 * C46562 +
                   C46321 * (be * C46562 +
                             C46321 * C46491 *
                                 (C46390 + ae * C46322 * C46391 +
                                  C46322 * (ae * C46391 +
                                            C46322 * std::pow(C46324, 8) *
                                                bs[8] * C46333))))) /
        C46275;
    const double C2370 =
        (2 * C46321 * C46508 + C46321 * (C46508 + C46562 * C46533)) / C46273;
    const double C5900 =
        (2 * C46558 + C46491 * C46568 + be * C46321 * C46580 +
         C46321 * (be * C46580 +
                   C46321 * (2 * C46491 * C46394 +
                             C46491 * (C46394 + (ae * C46391 +
                                                 C46322 * std::pow(C46324, 8) *
                                                     bs[8] * C46333) *
                                                    C46500)))) /
        C46275;
    const double C6390 =
        (be * (3 * C46517 + C46491 * C46580) +
         C46321 * (3 * C46568 +
                   C46491 * (2 * C46491 * C46394 +
                             C46491 * (C46394 + (ae * C46391 +
                                                 C46322 * std::pow(C46324, 8) *
                                                     bs[8] * C46333) *
                                                    C46500)))) /
        C46275;
    const double C5732 = (4 * (2 * C46506 + C46491 * C46517) +
                          C46491 * (3 * C46517 + C46491 * C46580)) /
                         C46273;
    const double C5898 =
        (2 * C46506 + C46491 * C46517 + C46580 * C46533) / C46273;
    const double C6388 = (C46321 * (3 * C46517 + C46491 * C46580)) / C46273;
    const double C12400 =
        (4 * (2 * C46542 + be * C46543 + C46321 * C46629) +
         be * (3 * C46543 + C46321 * C46630) +
         C46321 *
             (3 * C46629 + be * C46630 +
              C46321 *
                  (2 * C46623 + be * C46625 +
                   C46321 * (C46394 + be * C46321 * C46474 +
                             C46321 * (be * C46474 +
                                       C46321 * (ae * C46391 +
                                                 C46322 * std::pow(C46324, 8) *
                                                     bs[8] * C46333)))))) /
        C46275;
    const double C12398 = (4 * (2 * C46538 + C46321 * C46543) +
                           C46321 * (3 * C46543 + C46321 * C46630)) /
                          C46273;
    const double C22232 =
        (3 * C46565 + C46491 * C46636 + be * C46321 * C46645 +
         C46321 * (be * C46645 +
                   C46321 * (3 * C46634 +
                             C46491 * (2 * C46491 * C46390 +
                                       C46491 * (C46390 + std::pow(C46324, 8) *
                                                              bs[8] * C46333 *
                                                              C46500))))) /
        C46275;
    const double C22598 =
        (be * (4 * C46574 + C46491 * C46645) +
         C46321 * (4 * C46636 +
                   C46491 * (3 * C46634 +
                             C46491 * (2 * C46491 * C46390 +
                                       C46491 * (C46390 + std::pow(C46324, 8) *
                                                              bs[8] * C46333 *
                                                              C46500))))) /
        C46275;
    const double C22103 = (5 * (3 * C46514 + C46491 * C46574) +
                           C46491 * (4 * C46574 + C46491 * C46645)) /
                          C46273;
    const double C22231 =
        (3 * C46514 + C46491 * C46574 + C46645 * C46533) / C46273;
    const double C22597 = (C46321 * (4 * C46574 + C46491 * C46645)) / C46273;
    const double C43687 =
        (5 * (3 * C46615 + be * C46616 + C46321 * C46691) +
         be * (4 * C46616 + C46321 * C46692) +
         C46321 *
             (4 * C46691 + be * C46692 +
              C46321 *
                  (3 * C46687 + be * C46688 +
                   C46321 * (2 * C46681 + be * C46683 +
                             C46321 * (C46390 + be * C46321 * C46467 +
                                       C46321 * (be * C46467 +
                                                 C46321 * std::pow(C46324, 8) *
                                                     bs[8] * C46333)))))) /
        C46275;
    const double C43686 = (5 * (3 * C46536 + C46321 * C46616) +
                           C46321 * (4 * C46616 + C46321 * C46692)) /
                          C46273;
    const double C47506 = C47450 + C47498;
    const double C637 = C47485 - (C47149 * C47131) / C47126;
    const double C111 = C47486 / C47130 - C47147 / C47457;
    const double C47499 = C47453 + C47485;
    const double C47507 = C47466 + C47502;
    const double C1393 = C47492 - (C47229 * C47218) / C47126;
    const double C1121 = C47493 / C47130 - C47227 / C47457;
    const double C47503 = C47468 + C47492;
    const double C47508 = C47472 + C47504;
    const double C2249 = C47495 - (C47271 * C47260) / C47126;
    const double C1966 = C47496 / C47130 - C47269 / C47457;
    const double C47505 = C47474 + C47495;
    const double C171 = C160 - C161;
    const double C355 = C342 - C343;
    const double C4887 = C343 - C342;
    const double C646 = C346 - C347;
    const double C5165 = C347 - C346;
    const double C536 = C523 - C524;
    const double C756 = C527 - C528;
    const double C940 = C933 - C934;
    const double C5499 = C934 - C933;
    const double C46459 = C46458 + C46453;
    const double C2150 = C47384 * C1287;
    const double C11175 = C47481 * C1287;
    const double C31968 = C47481 * C1287;
    const double C2149 = C113 * C1272;
    const double C11174 = C10300 * C1272;
    const double C31967 = C31093 * C1272;
    const double C47016 = C47015 + C47000;
    const double C351 = C47384 * C324;
    const double C650 = C47384 * C325;
    const double C46484 = C46483 + C46475;
    const double C1293 =
        (C46374 + C46398 * C46500 + be * C46321 * C46520 +
         C46321 * (be * C46520 +
                   C46321 * (C46398 + (C46390 + ae * C46322 * C46391 +
                                       C46322 * (ae * C46391 +
                                                 C46322 * std::pow(C46324, 8) *
                                                     bs[8] * C46333)) *
                                          C46500))) /
        C46275;
    const double C1677 =
        (be * (2 * C46508 + C46491 * C46520) +
         C46321 * (2 * C46491 * C46398 +
                   C46491 * (C46398 + (C46390 + ae * C46322 * C46391 +
                                       C46322 * (ae * C46391 +
                                                 C46322 * std::pow(C46324, 8) *
                                                     bs[8] * C46333)) *
                                          C46500))) /
        C46275;
    const double C1141 = (3 * (C46439 + C46456 * C46500) +
                          C46491 * (2 * C46508 + C46491 * C46520)) /
                         C46273;
    const double C1284 = (C46439 + C46456 * C46500 + C46520 * C46533) / C46273;
    const double C1674 = (C46321 * (2 * C46508 + C46491 * C46520)) / C46273;
    const double C1991 =
        (3 * (C46374 + be * C46545 + C46321 * C46549) +
         be * (2 * C46545 + C46321 * C46550) +
         C46321 *
             (2 * C46549 + be * C46550 +
              C46321 *
                  (C46398 + be * C46321 * C46481 +
                   C46321 * (be * C46481 +
                             C46321 * (C46390 + ae * C46322 * C46391 +
                                       C46322 * (ae * C46391 +
                                                 C46322 * std::pow(C46324, 8) *
                                                     bs[8] * C46333)))))) /
        C46275;
    const double C1985 = (3 * (C46439 + C46456 * C46533) +
                          C46321 * (2 * C46545 + C46321 * C46550)) /
                         C46273;
    const double C108 =
        (C47497 + 2 * C47140) / C47130 - (C47506 * C47131) / C47126;
    const double C109 =
        (C47484 + 2 * C47149 + C47506) / C47130 - (C47499 * C47131) / C47126;
    const double C110 = (C47455 + C47146 / C47126 + C47499) / C47130 -
                        (C47486 * C47131) / C47126;
    const double C1118 =
        (C47500 + 2 * C47222) / C47130 - (C47507 * C47218) / C47126;
    const double C1119 =
        (C47488 + 2 * C47229 + C47507) / C47130 - (C47503 * C47218) / C47126;
    const double C1120 = (C47461 + C47226 / C47126 + C47503) / C47130 -
                         (C47493 * C47218) / C47126;
    const double C1963 =
        (C47501 + 2 * C47264) / C47130 - (C47508 * C47260) / C47126;
    const double C1964 =
        (C47490 + 2 * C47271 + C47508) / C47130 - (C47505 * C47260) / C47126;
    const double C1965 = (C47464 + C47268 / C47126 + C47505) / C47130 -
                         (C47496 * C47260) / C47126;
    const double C21472 = C355 * C47110;
    const double C505 =
        (2 * C46354 + ae * C46355 + C46322 * C46374 + be * C46321 * C46459 +
         C46321 * (be * C46459 + C46321 * C46402)) /
        C46275;
    const double C506 =
        (be * (3 * C46439 + C46322 * C46459 +
               (2 * C46433 + C46322 * C46451) * ae) +
         C46321 * (3 * C46374 + ae * C46375 + C46322 * C46402)) /
        C46275;
    const double C924 =
        (be * C46491 * C46459 + C46321 * C46491 * C46402) / C46275;
    const double C135 = (4 * (2 * C46427 + C46322 * C46439 + C46708 * ae) +
                         C46322 * (3 * C46439 + C46322 * C46459 + C46713 * ae) +
                         (3 * C46708 + C46322 * C46713) * ae) /
                        C46273;
    const double C312 =
        (2 * C46427 + C46322 * C46439 + C46708 * ae + C46459 * C46500) / C46273;
    const double C314 =
        (C46491 * (3 * C46439 + C46322 * C46459 + C46713 * ae)) / C46273;
    const double C493 =
        (2 * C46427 + C46322 * C46439 + C46708 * ae + C46459 * C46533) / C46273;
    const double C495 =
        (C46321 * (3 * C46439 + C46322 * C46459 + C46713 * ae)) / C46273;
    const double C918 = (C46321 * C46491 * C46459) / C46273;
    const double C43685 =
        (5 * (3 * C46932 + C46321 * C47016 + C46931 * be) +
         C46321 * (4 * C47016 +
                   C46321 * (3 * C47011 +
                             C46321 * (2 * C47003 +
                                       C46321 * (C46367 +
                                                 C46321 * (C46321 * C46391 +
                                                           C46465 * be) +
                                                 C46321 * C46465 * be) +
                                       C47005 * be) +
                             C47010 * be) +
                   C47014 * be) +
         (4 * C46931 + C46321 * C47014) * be) /
        C46273;
    const double C46485 = C46322 * C46484;
    const double C46552 = C46491 * C46484;
    const double C1559 =
        (be * (C46459 + C46484 * C46500) +
         C46321 * (C46402 + (2 * C46394 + ae * C46395 +
                             C46322 * (C46390 + ae * C46322 * C46391 +
                                       C46322 * (ae * C46391 +
                                                 C46322 * std::pow(C46324, 8) *
                                                     bs[8] * C46333))) *
                                C46500)) /
        C46275;
    const double C2255 =
        (2 * (be * C46459 + C46321 * C46402) + be * (C46459 + C46484 * C46533) +
         C46321 *
             (C46402 + be * C46321 * C46484 +
              C46321 *
                  (be * C46484 +
                   C46321 * (2 * C46394 + ae * C46395 +
                             C46322 * (C46390 + ae * C46322 * C46391 +
                                       C46322 * (ae * C46391 +
                                                 C46322 * std::pow(C46324, 8) *
                                                     bs[8] * C46333)))))) /
        C46275;
    const double C1400 =
        (2 * C46491 * C46459 + C46491 * (C46459 + C46484 * C46500)) / C46273;
    const double C1558 = (C46321 * (C46459 + C46484 * C46500)) / C46273;
    const double C2254 =
        (2 * C46321 * C46459 + C46321 * (C46459 + C46484 * C46533)) / C46273;
    const double C21476 = C21471 + C21472;
    const double C532 = C47384 * C505;
    const double C10965 = C47481 * C505;
    const double C31758 = C47481 * C505;
    const double C760 = C47384 * C506;
    const double C10333 = C47481 * C506;
    const double C31126 = C47481 * C506;
    const double C938 = C47384 * C924;
    const double C10827 = C47481 * C924;
    const double C31620 = C47481 * C924;
    const double C164 = C113 * C135;
    const double C350 = C113 * C312;
    const double C649 = C113 * C314;
    const double C531 = C113 * C493;
    const double C10964 = C10300 * C493;
    const double C31757 = C31093 * C493;
    const double C759 = C113 * C495;
    const double C10332 = C10300 * C495;
    const double C31125 = C31093 * C495;
    const double C937 = C113 * C918;
    const double C10826 = C10300 * C918;
    const double C31619 = C31093 * C918;
    const double C46486 = C46462 + C46485;
    const double C2141 =
        (C46491 * C46402 + be * C46321 * C46552 +
         C46321 * (be * C46552 +
                   C46321 * C46491 *
                       (2 * C46394 + ae * C46395 +
                        C46322 * (C46390 + ae * C46322 * C46391 +
                                  C46322 * (ae * C46391 +
                                            C46322 * std::pow(C46324, 8) *
                                                bs[8] * C46333))))) /
        C46275;
    const double C2140 = (C46491 * C46459 + C46552 * C46533) / C46273;
    const double C46487 = C46486 + C46480;
    const double C507 =
        (3 * C46374 + ae * C46375 + C46322 * C46402 + be * C46321 * C46487 +
         C46321 *
             (be * C46487 +
              C46321 *
                  (3 * C46398 + ae * C46399 +
                   C46322 * (2 * C46394 + ae * C46395 +
                             C46322 * (C46390 + ae * C46322 * C46391 +
                                       C46322 * (ae * C46391 +
                                                 C46322 * std::pow(C46324, 8) *
                                                     bs[8] * C46333)))))) /
        C46275;
    const double C753 =
        (be * (4 * C46459 + C46322 * C46487 +
               (3 * C46451 + C46322 * C46478) * ae) +
         C46321 *
             (4 * C46402 + ae * C46403 +
              C46322 *
                  (3 * C46398 + ae * C46399 +
                   C46322 * (2 * C46394 + ae * C46395 +
                             C46322 * (C46390 + ae * C46322 * C46391 +
                                       C46322 * (ae * C46391 +
                                                 C46322 * std::pow(C46324, 8) *
                                                     bs[8] * C46333)))))) /
        C46275;
    const double C925 =
        (be * C46491 * C46487 +
         C46321 * C46491 *
             (3 * C46398 + ae * C46399 +
              C46322 * (2 * C46394 + ae * C46395 +
                        C46322 * (C46390 + ae * C46322 * C46391 +
                                  C46322 * (ae * C46391 +
                                            C46322 * std::pow(C46324, 8) *
                                                bs[8] * C46333))))) /
        C46275;
    const double C137 = (5 * (3 * C46439 + C46322 * C46459 + C46713 * ae) +
                         C46322 * (4 * C46459 + C46322 * C46487 + C46718 * ae) +
                         (4 * C46713 + C46322 * C46718) * ae) /
                        C46273;
    const double C316 =
        (3 * C46439 + C46322 * C46459 + C46713 * ae + C46487 * C46500) / C46273;
    const double C497 =
        (3 * C46439 + C46322 * C46459 + C46713 * ae + C46487 * C46533) / C46273;
    const double C642 =
        (C46491 * (4 * C46459 + C46322 * C46487 + C46718 * ae)) / C46273;
    const double C752 =
        (C46321 * (4 * C46459 + C46322 * C46487 + C46718 * ae)) / C46273;
    const double C920 = (C46321 * C46491 * C46487) / C46273;
    d2ee[0] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C47384 * C124 - C113 * C117) * C114 +
            (C47384 * C138 - C113 * C125) * C102 + (C146 - C147) * C115 +
            (C148 - C149) * C103 + C166 * C116 + C167 * C104) *
               C47369 * C47181 * C47222 +
           ((C113 * C287 - C47384 * C297) * C114 +
            (C113 * C298 - C47384 * C317) * C102 + (C328 - C329) * C115 +
            (C330 - C331) * C103 + C352 * C116 + C353 * C104) *
               C47369 * C47181 * C47229 +
           ((C47384 * C303 - C113 * C290) * C114 +
            (C47384 * C320 - C113 * C304) * C102 + (C336 - C337) * C115 +
            (C338 - C339) * C103 + C354 * C116 + C355 * C104) *
               C47369 * C47181 * C2840) *
              C47140 +
          (((C147 - C146) * C114 + (C149 - C148) * C102 + (C151 - C150) * C115 +
            (C153 - C152) * C103 + C168 * C116 + C169 * C104) *
               C47369 * C47181 * C47222 +
           ((C329 - C328) * C114 + (C331 - C330) * C102 + (C333 - C332) * C115 +
            (C335 - C334) * C103 + C645 * C116 + C646 * C104) *
               C47369 * C47181 * C47229 +
           ((C337 - C336) * C114 + (C339 - C338) * C102 + (C341 - C340) * C115 +
            (C343 - C342) * C103 + (C348 - C349) * C116 +
            (C350 - C351) * C104) *
               C47369 * C47181 * C2840) *
              C47149 +
          ((C166 * C114 + C167 * C102 + (C155 - C154) * C115 +
            (C157 - C156) * C103 + C170 * C116 + C171 * C104) *
               C47369 * C47181 * C47222 +
           (C352 * C114 + C353 * C102 + (C345 - C344) * C115 +
            (C347 - C346) * C103 + (C647 - C648) * C116 +
            (C649 - C650) * C104) *
               C47369 * C47181 * C47229 +
           (C354 * C114 + C355 * C102 + (C349 - C348) * C115 +
            (C351 - C350) * C103 + (C47384 * C315 - C113 * C296) * C116 +
            (C47384 * C326 - C113 * C316) * C104) *
               C47369 * C47181 * C2840) *
              C2843)) /
        (p * q * std::sqrt(p + q));
    d2ee[1] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C47384 * C124 - C113 * C117) * C114 +
             (C47384 * C138 - C113 * C125) * C102 + (C146 - C147) * C115 +
             (C148 - C149) * C103 + C166 * C116 + C167 * C104) *
                C47369 * C47430 +
            ((C113 * C468 - C47384 * C478) * C114 +
             (C113 * C479 - C47384 * C498) * C102 + (C509 - C510) * C115 +
             (C511 - C512) * C103 + C533 * C116 + C534 * C104) *
                C47369 * C47268) *
               C47222 +
           (((C113 * C287 - C47384 * C297) * C114 +
             (C113 * C298 - C47384 * C317) * C102 + (C328 - C329) * C115 +
             (C330 - C331) * C103 + C352 * C116 + C353 * C104) *
                C47369 * C47430 +
            ((C47384 * C911 - C113 * C906) * C114 +
             (C47384 * C921 - C113 * C912) * C102 + (C927 - C928) * C115 +
             (C929 - C930) * C103 + C939 * C116 + C940 * C104) *
                C47369 * C47268) *
               C47229 +
           (((C47384 * C303 - C113 * C290) * C114 +
             (C47384 * C320 - C113 * C304) * C102 + (C336 - C337) * C115 +
             (C338 - C339) * C103 + C354 * C116 + C355 * C104) *
                C47369 * C47430 +
            ((C113 * C1261 - C47384 * C1273) * C114 +
             (C113 * C1274 - C47384 * C1288) * C102 + (C1561 - C1562) * C115 +
             (C1563 - C1564) * C103 + (C1565 - C1566) * C116 +
             (C1567 - C1568) * C104) *
                C47369 * C47268) *
               C2840) *
              C2580 +
          ((((C147 - C146) * C114 + (C149 - C148) * C102 +
             (C151 - C150) * C115 + (C153 - C152) * C103 + C168 * C116 +
             C169 * C104) *
                C47369 * C47430 +
            ((C510 - C509) * C114 + (C512 - C511) * C102 +
             (C514 - C513) * C115 + (C516 - C515) * C103 + C755 * C116 +
             C756 * C104) *
                C47369 * C47268) *
               C47222 +
           (((C329 - C328) * C114 + (C331 - C330) * C102 +
             (C333 - C332) * C115 + (C335 - C334) * C103 + C645 * C116 +
             C646 * C104) *
                C47369 * C47430 +
            ((C928 - C927) * C114 + (C930 - C929) * C102 +
             (C932 - C931) * C115 + (C934 - C933) * C103 +
             (C935 - C936) * C116 + (C937 - C938) * C104) *
                C47369 * C47268) *
               C47229 +
           (((C337 - C336) * C114 + (C339 - C338) * C102 +
             (C341 - C340) * C115 + (C343 - C342) * C103 +
             (C348 - C349) * C116 + (C350 - C351) * C104) *
                C47369 * C47430 +
            ((C1562 - C1561) * C114 + (C1564 - C1563) * C102 +
             (C1566 - C1565) * C115 + (C1568 - C1567) * C103 +
             (C47384 * C1557 - C113 * C1556) * C116 +
             (C47384 * C1559 - C113 * C1558) * C104) *
                C47369 * C47268) *
               C2840) *
              C47146)) /
        (p * q * std::sqrt(p + q));
    d2ee[2] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C47384 * C124 - C113 * C117) * C114 +
            (C47384 * C138 - C113 * C125) * C102 + (C146 - C147) * C115 +
            (C148 - C149) * C103 + C166 * C116 + C167 * C104) *
               C47369 * C47181 * C47507 +
           ((C113 * C287 - C47384 * C297) * C114 +
            (C113 * C298 - C47384 * C317) * C102 + (C328 - C329) * C115 +
            (C330 - C331) * C103 + C352 * C116 + C353 * C104) *
               C47369 * C47181 * C47503 +
           ((C47384 * C303 - C113 * C290) * C114 +
            (C47384 * C320 - C113 * C304) * C102 + (C336 - C337) * C115 +
            (C338 - C339) * C103 + C354 * C116 + C355 * C104) *
               C47369 * C47181 * C47493 +
           ((C113 * C1124 - C47384 * C1130) * C114 +
            (C113 * C1131 - C47384 * C1142) * C102 + (C1403 - C1404) * C115 +
            (C1405 - C1406) * C103 + (C1407 - C1408) * C116 +
            (C1409 - C1410) * C104) *
               C47369 * C47181 * C47471) *
              C2580 +
          (((C147 - C146) * C114 + (C149 - C148) * C102 + (C151 - C150) * C115 +
            (C153 - C152) * C103 + C168 * C116 + C169 * C104) *
               C47369 * C47181 * C47507 +
           ((C329 - C328) * C114 + (C331 - C330) * C102 + (C333 - C332) * C115 +
            (C335 - C334) * C103 + C645 * C116 + C646 * C104) *
               C47369 * C47181 * C47503 +
           ((C337 - C336) * C114 + (C339 - C338) * C102 + (C341 - C340) * C115 +
            (C343 - C342) * C103 + (C348 - C349) * C116 +
            (C350 - C351) * C104) *
               C47369 * C47181 * C47493 +
           ((C1404 - C1403) * C114 + (C1406 - C1405) * C102 +
            (C1408 - C1407) * C115 + (C1410 - C1409) * C103 +
            (C47384 * C1399 - C113 * C1398) * C116 +
            (C47384 * C1401 - C113 * C1400) * C104) *
               C47369 * C47181 * C47471) *
              C47146)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C47384 * C124 - C113 * C117) * C114 +
            (C47384 * C138 - C113 * C125) * C102 + (C146 - C147) * C115 +
            (C148 - C149) * C103 + C166 * C116 + C167 * C104) *
               C47369 * C47181 * C2472 +
           ((C113 * C287 - C47384 * C297) * C114 +
            (C113 * C298 - C47384 * C317) * C102 + (C328 - C329) * C115 +
            (C330 - C331) * C103 + C352 * C116 + C353 * C104) *
               C47369 * C47181 * C47226) *
              C47506 +
          (((C147 - C146) * C114 + (C149 - C148) * C102 + (C151 - C150) * C115 +
            (C153 - C152) * C103 + C168 * C116 + C169 * C104) *
               C47369 * C47181 * C2472 +
           ((C329 - C328) * C114 + (C331 - C330) * C102 + (C333 - C332) * C115 +
            (C335 - C334) * C103 + C645 * C116 + C646 * C104) *
               C47369 * C47181 * C47226) *
              C47499 +
          ((C166 * C114 + C167 * C102 + (C155 - C154) * C115 +
            (C157 - C156) * C103 + C170 * C116 + C171 * C104) *
               C47369 * C47181 * C2472 +
           (C352 * C114 + C353 * C102 + (C345 - C344) * C115 +
            (C347 - C346) * C103 + (C647 - C648) * C116 +
            (C649 - C650) * C104) *
               C47369 * C47181 * C47226) *
              C47486 +
          ((C168 * C114 + C169 * C102 + (C159 - C158) * C115 +
            (C161 - C160) * C103 + (C162 - C163) * C116 +
            (C164 - C165) * C104) *
               C47369 * C47181 * C2472 +
           (C645 * C114 + C646 * C102 + (C648 - C647) * C115 +
            (C650 - C649) * C103 + (C47384 * C641 - C113 * C640) * C116 +
            (C47384 * C643 - C113 * C642) * C104) *
               C47369 * C47181 * C47226) *
              C47465)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C47384 * C124 - C113 * C117) * C114 +
             (C47384 * C138 - C113 * C125) * C102 + (C146 - C147) * C115 +
             (C148 - C149) * C103 + C166 * C116 + C167 * C104) *
                C47369 * C47501 +
            ((C113 * C468 - C47384 * C478) * C114 +
             (C113 * C479 - C47384 * C498) * C102 + (C509 - C510) * C115 +
             (C511 - C512) * C103 + C533 * C116 + C534 * C104) *
                C47369 * C47490 +
            ((C47384 * C484 - C113 * C471) * C114 +
             (C47384 * C501 - C113 * C485) * C102 + (C517 - C518) * C115 +
             (C519 - C520) * C103 + C535 * C116 + C536 * C104) *
                C47369 * C47464) *
               C2472 +
           (((C113 * C287 - C47384 * C297) * C114 +
             (C113 * C298 - C47384 * C317) * C102 + (C328 - C329) * C115 +
             (C330 - C331) * C103 + C352 * C116 + C353 * C104) *
                C47369 * C47501 +
            ((C47384 * C911 - C113 * C906) * C114 +
             (C47384 * C921 - C113 * C912) * C102 + (C927 - C928) * C115 +
             (C929 - C930) * C103 + C939 * C116 + C940 * C104) *
                C47369 * C47490 +
            ((C113 * C1258 - C47384 * C1267) * C114 +
             (C113 * C1268 - C47384 * C1285) * C102 + (C2143 - C2144) * C115 +
             (C2145 - C2146) * C103 + (C2147 - C2148) * C116 +
             (C2149 - C2150) * C104) *
                C47369 * C47464) *
               C47226) *
              C2580 +
          ((((C147 - C146) * C114 + (C149 - C148) * C102 +
             (C151 - C150) * C115 + (C153 - C152) * C103 + C168 * C116 +
             C169 * C104) *
                C47369 * C47501 +
            ((C510 - C509) * C114 + (C512 - C511) * C102 +
             (C514 - C513) * C115 + (C516 - C515) * C103 + C755 * C116 +
             C756 * C104) *
                C47369 * C47490 +
            ((C518 - C517) * C114 + (C520 - C519) * C102 +
             (C522 - C521) * C115 + (C524 - C523) * C103 +
             (C529 - C530) * C116 + (C531 - C532) * C104) *
                C47369 * C47464) *
               C2472 +
           (((C329 - C328) * C114 + (C331 - C330) * C102 +
             (C333 - C332) * C115 + (C335 - C334) * C103 + C645 * C116 +
             C646 * C104) *
                C47369 * C47501 +
            ((C928 - C927) * C114 + (C930 - C929) * C102 +
             (C932 - C931) * C115 + (C934 - C933) * C103 +
             (C935 - C936) * C116 + (C937 - C938) * C104) *
                C47369 * C47490 +
            ((C2144 - C2143) * C114 + (C2146 - C2145) * C102 +
             (C2148 - C2147) * C115 + (C2150 - C2149) * C103 +
             (C47384 * C2139 - C113 * C2138) * C116 +
             (C47384 * C2141 - C113 * C2140) * C104) *
                C47369 * C47464) *
               C47226) *
              C47146)) /
            (p * q * std::sqrt(p + q));
    d2ee[3] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C47384 * C124 - C113 * C117) * C114 +
             (C47384 * C138 - C113 * C125) * C102 + (C146 - C147) * C115 +
             (C148 - C149) * C103 + C166 * C116 + C167 * C104) *
                C47369 * C47430 +
            ((C113 * C468 - C47384 * C478) * C114 +
             (C113 * C479 - C47384 * C498) * C102 + (C509 - C510) * C115 +
             (C511 - C512) * C103 + C533 * C116 + C534 * C104) *
                C47369 * C47268) *
               C2472 +
           (((C113 * C287 - C47384 * C297) * C114 +
             (C113 * C298 - C47384 * C317) * C102 + (C328 - C329) * C115 +
             (C330 - C331) * C103 + C352 * C116 + C353 * C104) *
                C47369 * C47430 +
            ((C47384 * C911 - C113 * C906) * C114 +
             (C47384 * C921 - C113 * C912) * C102 + (C927 - C928) * C115 +
             (C929 - C930) * C103 + C939 * C116 + C940 * C104) *
                C47369 * C47268) *
               C47226) *
              C47140 +
          ((((C147 - C146) * C114 + (C149 - C148) * C102 +
             (C151 - C150) * C115 + (C153 - C152) * C103 + C168 * C116 +
             C169 * C104) *
                C47369 * C47430 +
            ((C510 - C509) * C114 + (C512 - C511) * C102 +
             (C514 - C513) * C115 + (C516 - C515) * C103 + C755 * C116 +
             C756 * C104) *
                C47369 * C47268) *
               C2472 +
           (((C329 - C328) * C114 + (C331 - C330) * C102 +
             (C333 - C332) * C115 + (C335 - C334) * C103 + C645 * C116 +
             C646 * C104) *
                C47369 * C47430 +
            ((C928 - C927) * C114 + (C930 - C929) * C102 +
             (C932 - C931) * C115 + (C934 - C933) * C103 +
             (C935 - C936) * C116 + (C937 - C938) * C104) *
                C47369 * C47268) *
               C47226) *
              C47149 +
          (((C166 * C114 + C167 * C102 + (C155 - C154) * C115 +
             (C157 - C156) * C103 + C170 * C116 + C171 * C104) *
                C47369 * C47430 +
            (C533 * C114 + C534 * C102 + (C526 - C525) * C115 +
             (C528 - C527) * C103 + (C757 - C758) * C116 +
             (C759 - C760) * C104) *
                C47369 * C47268) *
               C2472 +
           ((C352 * C114 + C353 * C102 + (C345 - C344) * C115 +
             (C347 - C346) * C103 + (C647 - C648) * C116 +
             (C649 - C650) * C104) *
                C47369 * C47430 +
            (C939 * C114 + C940 * C102 + (C936 - C935) * C115 +
             (C938 - C937) * C103 + (C47384 * C919 - C113 * C910) * C116 +
             (C47384 * C925 - C113 * C920) * C104) *
                C47369 * C47268) *
               C47226) *
              C2843)) /
        (p * q * std::sqrt(p + q));
    d2ee[4] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C47384 * C124 - C113 * C117) * C114 +
            (C47384 * C138 - C113 * C125) * C102 + (C146 - C147) * C115 +
            (C148 - C149) * C103 + C166 * C116 + C167 * C104) *
               C47369 * C47181 * C2472 +
           ((C113 * C287 - C47384 * C297) * C114 +
            (C113 * C298 - C47384 * C317) * C102 + (C328 - C329) * C115 +
            (C330 - C331) * C103 + C352 * C116 + C353 * C104) *
               C47369 * C47181 * C47226) *
              C47506 +
          (((C147 - C146) * C114 + (C149 - C148) * C102 + (C151 - C150) * C115 +
            (C153 - C152) * C103 + C168 * C116 + C169 * C104) *
               C47369 * C47181 * C2472 +
           ((C329 - C328) * C114 + (C331 - C330) * C102 + (C333 - C332) * C115 +
            (C335 - C334) * C103 + C645 * C116 + C646 * C104) *
               C47369 * C47181 * C47226) *
              C47499 +
          ((C166 * C114 + C167 * C102 + (C155 - C154) * C115 +
            (C157 - C156) * C103 + C170 * C116 + C171 * C104) *
               C47369 * C47181 * C2472 +
           (C352 * C114 + C353 * C102 + (C345 - C344) * C115 +
            (C347 - C346) * C103 + (C647 - C648) * C116 +
            (C649 - C650) * C104) *
               C47369 * C47181 * C47226) *
              C47486 +
          ((C168 * C114 + C169 * C102 + (C159 - C158) * C115 +
            (C161 - C160) * C103 + (C162 - C163) * C116 +
            (C164 - C165) * C104) *
               C47369 * C47181 * C2472 +
           (C645 * C114 + C646 * C102 + (C648 - C647) * C115 +
            (C650 - C649) * C103 + (C47384 * C641 - C113 * C640) * C116 +
            (C47384 * C643 - C113 * C642) * C104) *
               C47369 * C47181 * C47226) *
              C47465)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C47384 * C124 - C113 * C117) * C114 +
            (C47384 * C138 - C113 * C125) * C102 + (C146 - C147) * C115 +
            (C148 - C149) * C103 + C166 * C116 + C167 * C104) *
               C47369 * C47181 * C47507 +
           ((C113 * C287 - C47384 * C297) * C114 +
            (C113 * C298 - C47384 * C317) * C102 + (C328 - C329) * C115 +
            (C330 - C331) * C103 + C352 * C116 + C353 * C104) *
               C47369 * C47181 * C47503 +
           ((C47384 * C303 - C113 * C290) * C114 +
            (C47384 * C320 - C113 * C304) * C102 + (C336 - C337) * C115 +
            (C338 - C339) * C103 + C354 * C116 + C355 * C104) *
               C47369 * C47181 * C47493 +
           ((C113 * C1124 - C47384 * C1130) * C114 +
            (C113 * C1131 - C47384 * C1142) * C102 + (C1403 - C1404) * C115 +
            (C1405 - C1406) * C103 + (C1407 - C1408) * C116 +
            (C1409 - C1410) * C104) *
               C47369 * C47181 * C47471) *
              C2580 +
          (((C147 - C146) * C114 + (C149 - C148) * C102 + (C151 - C150) * C115 +
            (C153 - C152) * C103 + C168 * C116 + C169 * C104) *
               C47369 * C47181 * C47507 +
           ((C329 - C328) * C114 + (C331 - C330) * C102 + (C333 - C332) * C115 +
            (C335 - C334) * C103 + C645 * C116 + C646 * C104) *
               C47369 * C47181 * C47503 +
           ((C337 - C336) * C114 + (C339 - C338) * C102 + (C341 - C340) * C115 +
            (C343 - C342) * C103 + (C348 - C349) * C116 +
            (C350 - C351) * C104) *
               C47369 * C47181 * C47493 +
           ((C1404 - C1403) * C114 + (C1406 - C1405) * C102 +
            (C1408 - C1407) * C115 + (C1410 - C1409) * C103 +
            (C47384 * C1399 - C113 * C1398) * C116 +
            (C47384 * C1401 - C113 * C1400) * C104) *
               C47369 * C47181 * C47471) *
              C47146)) /
            (p * q * std::sqrt(p + q));
    d2ee[5] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C47384 * C124 - C113 * C117) * C114 +
             (C47384 * C138 - C113 * C125) * C102 + (C146 - C147) * C115 +
             (C148 - C149) * C103 + C166 * C116 + C167 * C104) *
                C47369 * C3234 +
            ((C113 * C468 - C47384 * C478) * C114 +
             (C113 * C479 - C47384 * C498) * C102 + (C509 - C510) * C115 +
             (C511 - C512) * C103 + C533 * C116 + C534 * C104) *
                C47369 * C47268) *
               C47222 +
           (((C113 * C287 - C47384 * C297) * C114 +
             (C113 * C298 - C47384 * C317) * C102 + (C328 - C329) * C115 +
             (C330 - C331) * C103 + C352 * C116 + C353 * C104) *
                C47369 * C3234 +
            ((C47384 * C911 - C113 * C906) * C114 +
             (C47384 * C921 - C113 * C912) * C102 + (C927 - C928) * C115 +
             (C929 - C930) * C103 + C939 * C116 + C940 * C104) *
                C47369 * C47268) *
               C47229 +
           (((C47384 * C303 - C113 * C290) * C114 +
             (C47384 * C320 - C113 * C304) * C102 + (C336 - C337) * C115 +
             (C338 - C339) * C103 + C354 * C116 + C355 * C104) *
                C47369 * C3234 +
            ((C113 * C1261 - C47384 * C1273) * C114 +
             (C113 * C1274 - C47384 * C1288) * C102 + (C1561 - C1562) * C115 +
             (C1563 - C1564) * C103 + (C1565 - C1566) * C116 +
             (C1567 - C1568) * C104) *
                C47369 * C47268) *
               C2840) *
              C47415 +
          ((((C147 - C146) * C114 + (C149 - C148) * C102 +
             (C151 - C150) * C115 + (C153 - C152) * C103 + C168 * C116 +
             C169 * C104) *
                C47369 * C3234 +
            ((C510 - C509) * C114 + (C512 - C511) * C102 +
             (C514 - C513) * C115 + (C516 - C515) * C103 + C755 * C116 +
             C756 * C104) *
                C47369 * C47268) *
               C47222 +
           (((C329 - C328) * C114 + (C331 - C330) * C102 +
             (C333 - C332) * C115 + (C335 - C334) * C103 + C645 * C116 +
             C646 * C104) *
                C47369 * C3234 +
            ((C928 - C927) * C114 + (C930 - C929) * C102 +
             (C932 - C931) * C115 + (C934 - C933) * C103 +
             (C935 - C936) * C116 + (C937 - C938) * C104) *
                C47369 * C47268) *
               C47229 +
           (((C337 - C336) * C114 + (C339 - C338) * C102 +
             (C341 - C340) * C115 + (C343 - C342) * C103 +
             (C348 - C349) * C116 + (C350 - C351) * C104) *
                C47369 * C3234 +
            ((C1562 - C1561) * C114 + (C1564 - C1563) * C102 +
             (C1566 - C1565) * C115 + (C1568 - C1567) * C103 +
             (C47384 * C1557 - C113 * C1556) * C116 +
             (C47384 * C1559 - C113 * C1558) * C104) *
                C47369 * C47268) *
               C2840) *
              C47146)) /
        (p * q * std::sqrt(p + q));
    d2ee[6] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                ((((C47384 * C124 - C113 * C117) * C114 +
                   (C47384 * C138 - C113 * C125) * C102 + (C146 - C147) * C115 +
                   (C148 - C149) * C103 + C166 * C116 + C167 * C104) *
                      C47369 * C47264 +
                  ((C113 * C468 - C47384 * C478) * C114 +
                   (C113 * C479 - C47384 * C498) * C102 + (C509 - C510) * C115 +
                   (C511 - C512) * C103 + C533 * C116 + C534 * C104) *
                      C47369 * C47271 +
                  ((C47384 * C484 - C113 * C471) * C114 +
                   (C47384 * C501 - C113 * C485) * C102 + (C517 - C518) * C115 +
                   (C519 - C520) * C103 + C535 * C116 + C536 * C104) *
                      C47369 * C3742) *
                     C47222 +
                 (((C113 * C287 - C47384 * C297) * C114 +
                   (C113 * C298 - C47384 * C317) * C102 + (C328 - C329) * C115 +
                   (C330 - C331) * C103 + C352 * C116 + C353 * C104) *
                      C47369 * C47264 +
                  ((C47384 * C911 - C113 * C906) * C114 +
                   (C47384 * C921 - C113 * C912) * C102 + (C927 - C928) * C115 +
                   (C929 - C930) * C103 + C939 * C116 + C940 * C104) *
                      C47369 * C47271 +
                  ((C113 * C1258 - C47384 * C1267) * C114 +
                   (C113 * C1268 - C47384 * C1285) * C102 +
                   (C2143 - C2144) * C115 + (C2145 - C2146) * C103 +
                   (C2147 - C2148) * C116 + (C2149 - C2150) * C104) *
                      C47369 * C3742) *
                     C47229 +
                 (((C47384 * C303 - C113 * C290) * C114 +
                   (C47384 * C320 - C113 * C304) * C102 + (C336 - C337) * C115 +
                   (C338 - C339) * C103 + C354 * C116 + C355 * C104) *
                      C47369 * C47264 +
                  ((C113 * C1261 - C47384 * C1273) * C114 +
                   (C113 * C1274 - C47384 * C1288) * C102 +
                   (C1561 - C1562) * C115 + (C1563 - C1564) * C103 +
                   (C1565 - C1566) * C116 + (C1567 - C1568) * C104) *
                      C47369 * C47271 +
                  ((C47384 * C1279 - C113 * C1264) * C114 +
                   (C47384 * C1291 - C113 * C1280) * C102 +
                   (C47384 * C1281 - C113 * C1265) * C115 +
                   (C47384 * C1292 - C113 * C1282) * C103 +
                   (C47384 * C1283 - C113 * C1266) * C116 +
                   (C47384 * C1293 - C113 * C1284) * C104) *
                      C47369 * C3742) *
                     C2840) *
                C47135) /
               (p * q * std::sqrt(p + q));
    d2ee[7] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C47384 * C124 - C113 * C117) * C114 +
            (C47384 * C138 - C113 * C125) * C102 + (C146 - C147) * C115 +
            (C148 - C149) * C103 + C166 * C116 + C167 * C104) *
               C47369 * C3234 +
           ((C113 * C468 - C47384 * C478) * C114 +
            (C113 * C479 - C47384 * C498) * C102 + (C509 - C510) * C115 +
            (C511 - C512) * C103 + C533 * C116 + C534 * C104) *
               C47369 * C47268) *
              C47507 +
          (((C113 * C287 - C47384 * C297) * C114 +
            (C113 * C298 - C47384 * C317) * C102 + (C328 - C329) * C115 +
            (C330 - C331) * C103 + C352 * C116 + C353 * C104) *
               C47369 * C3234 +
           ((C47384 * C911 - C113 * C906) * C114 +
            (C47384 * C921 - C113 * C912) * C102 + (C927 - C928) * C115 +
            (C929 - C930) * C103 + C939 * C116 + C940 * C104) *
               C47369 * C47268) *
              C47503 +
          (((C47384 * C303 - C113 * C290) * C114 +
            (C47384 * C320 - C113 * C304) * C102 + (C336 - C337) * C115 +
            (C338 - C339) * C103 + C354 * C116 + C355 * C104) *
               C47369 * C3234 +
           ((C113 * C1261 - C47384 * C1273) * C114 +
            (C113 * C1274 - C47384 * C1288) * C102 + (C1561 - C1562) * C115 +
            (C1563 - C1564) * C103 + (C1565 - C1566) * C116 +
            (C1567 - C1568) * C104) *
               C47369 * C47268) *
              C47493 +
          (((C113 * C1124 - C47384 * C1130) * C114 +
            (C113 * C1131 - C47384 * C1142) * C102 + (C1403 - C1404) * C115 +
            (C1405 - C1406) * C103 + (C1407 - C1408) * C116 +
            (C1409 - C1410) * C104) *
               C47369 * C3234 +
           ((C47384 * C1669 - C113 * C1666) * C114 +
            (C47384 * C1675 - C113 * C1670) * C102 +
            (C47384 * C1671 - C113 * C1667) * C115 +
            (C47384 * C1676 - C113 * C1672) * C103 +
            (C47384 * C1673 - C113 * C1668) * C116 +
            (C47384 * C1677 - C113 * C1674) * C104) *
               C47369 * C47268) *
              C47471) *
         C47135) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C47384 * C124 - C113 * C117) * C114 +
             (C47384 * C138 - C113 * C125) * C102 + (C146 - C147) * C115 +
             (C148 - C149) * C103 + C166 * C116 + C167 * C104) *
                C47369 * C3234 +
            ((C113 * C468 - C47384 * C478) * C114 +
             (C113 * C479 - C47384 * C498) * C102 + (C509 - C510) * C115 +
             (C511 - C512) * C103 + C533 * C116 + C534 * C104) *
                C47369 * C47268) *
               C2472 +
           (((C113 * C287 - C47384 * C297) * C114 +
             (C113 * C298 - C47384 * C317) * C102 + (C328 - C329) * C115 +
             (C330 - C331) * C103 + C352 * C116 + C353 * C104) *
                C47369 * C3234 +
            ((C47384 * C911 - C113 * C906) * C114 +
             (C47384 * C921 - C113 * C912) * C102 + (C927 - C928) * C115 +
             (C929 - C930) * C103 + C939 * C116 + C940 * C104) *
                C47369 * C47268) *
               C47226) *
              C47497 +
          ((((C147 - C146) * C114 + (C149 - C148) * C102 +
             (C151 - C150) * C115 + (C153 - C152) * C103 + C168 * C116 +
             C169 * C104) *
                C47369 * C3234 +
            ((C510 - C509) * C114 + (C512 - C511) * C102 +
             (C514 - C513) * C115 + (C516 - C515) * C103 + C755 * C116 +
             C756 * C104) *
                C47369 * C47268) *
               C2472 +
           (((C329 - C328) * C114 + (C331 - C330) * C102 +
             (C333 - C332) * C115 + (C335 - C334) * C103 + C645 * C116 +
             C646 * C104) *
                C47369 * C3234 +
            ((C928 - C927) * C114 + (C930 - C929) * C102 +
             (C932 - C931) * C115 + (C934 - C933) * C103 +
             (C935 - C936) * C116 + (C937 - C938) * C104) *
                C47369 * C47268) *
               C47226) *
              C47484 +
          (((C166 * C114 + C167 * C102 + (C155 - C154) * C115 +
             (C157 - C156) * C103 + C170 * C116 + C171 * C104) *
                C47369 * C3234 +
            (C533 * C114 + C534 * C102 + (C526 - C525) * C115 +
             (C528 - C527) * C103 + (C757 - C758) * C116 +
             (C759 - C760) * C104) *
                C47369 * C47268) *
               C2472 +
           ((C352 * C114 + C353 * C102 + (C345 - C344) * C115 +
             (C347 - C346) * C103 + (C647 - C648) * C116 +
             (C649 - C650) * C104) *
                C47369 * C3234 +
            (C939 * C114 + C940 * C102 + (C936 - C935) * C115 +
             (C938 - C937) * C103 + (C47384 * C919 - C113 * C910) * C116 +
             (C47384 * C925 - C113 * C920) * C104) *
                C47369 * C47268) *
               C47226) *
              C47455)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C47384 * C124 - C113 * C117) * C114 +
            (C47384 * C138 - C113 * C125) * C102 + (C146 - C147) * C115 +
            (C148 - C149) * C103 + C166 * C116 + C167 * C104) *
               C47369 * C47508 +
           ((C113 * C468 - C47384 * C478) * C114 +
            (C113 * C479 - C47384 * C498) * C102 + (C509 - C510) * C115 +
            (C511 - C512) * C103 + C533 * C116 + C534 * C104) *
               C47369 * C47505 +
           ((C47384 * C484 - C113 * C471) * C114 +
            (C47384 * C501 - C113 * C485) * C102 + (C517 - C518) * C115 +
            (C519 - C520) * C103 + C535 * C116 + C536 * C104) *
               C47369 * C47496 +
           ((C113 * C1968 - C47384 * C1974) * C114 +
            (C113 * C1975 - C47384 * C1986) * C102 + (C2257 - C2258) * C115 +
            (C2259 - C2260) * C103 + (C2261 - C2262) * C116 +
            (C2263 - C2264) * C104) *
               C47369 * C47477) *
              C2472 +
          (((C113 * C287 - C47384 * C297) * C114 +
            (C113 * C298 - C47384 * C317) * C102 + (C328 - C329) * C115 +
            (C330 - C331) * C103 + C352 * C116 + C353 * C104) *
               C47369 * C47508 +
           ((C47384 * C911 - C113 * C906) * C114 +
            (C47384 * C921 - C113 * C912) * C102 + (C927 - C928) * C115 +
            (C929 - C930) * C103 + C939 * C116 + C940 * C104) *
               C47369 * C47505 +
           ((C113 * C1258 - C47384 * C1267) * C114 +
            (C113 * C1268 - C47384 * C1285) * C102 + (C2143 - C2144) * C115 +
            (C2145 - C2146) * C103 + (C2147 - C2148) * C116 +
            (C2149 - C2150) * C104) *
               C47369 * C47496 +
           ((C47384 * C2365 - C113 * C2362) * C114 +
            (C47384 * C2371 - C113 * C2366) * C102 +
            (C47384 * C2367 - C113 * C2363) * C115 +
            (C47384 * C2372 - C113 * C2368) * C103 +
            (C47384 * C2369 - C113 * C2364) * C116 +
            (C47384 * C2373 - C113 * C2370) * C104) *
               C47369 * C47477) *
              C47226) *
         C47135) /
            (p * q * std::sqrt(p + q));
    d2ee[8] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C47384 * C124 - C113 * C117) * C114 +
             (C47384 * C138 - C113 * C125) * C102 + (C146 - C147) * C115 +
             (C148 - C149) * C103 + C166 * C116 + C167 * C104) *
                C47369 * C47264 +
            ((C113 * C468 - C47384 * C478) * C114 +
             (C113 * C479 - C47384 * C498) * C102 + (C509 - C510) * C115 +
             (C511 - C512) * C103 + C533 * C116 + C534 * C104) *
                C47369 * C47271 +
            ((C47384 * C484 - C113 * C471) * C114 +
             (C47384 * C501 - C113 * C485) * C102 + (C517 - C518) * C115 +
             (C519 - C520) * C103 + C535 * C116 + C536 * C104) *
                C47369 * C3742) *
               C2472 +
           (((C113 * C287 - C47384 * C297) * C114 +
             (C113 * C298 - C47384 * C317) * C102 + (C328 - C329) * C115 +
             (C330 - C331) * C103 + C352 * C116 + C353 * C104) *
                C47369 * C47264 +
            ((C47384 * C911 - C113 * C906) * C114 +
             (C47384 * C921 - C113 * C912) * C102 + (C927 - C928) * C115 +
             (C929 - C930) * C103 + C939 * C116 + C940 * C104) *
                C47369 * C47271 +
            ((C113 * C1258 - C47384 * C1267) * C114 +
             (C113 * C1268 - C47384 * C1285) * C102 + (C2143 - C2144) * C115 +
             (C2145 - C2146) * C103 + (C2147 - C2148) * C116 +
             (C2149 - C2150) * C104) *
                C47369 * C3742) *
               C47226) *
              C47415 +
          ((((C147 - C146) * C114 + (C149 - C148) * C102 +
             (C151 - C150) * C115 + (C153 - C152) * C103 + C168 * C116 +
             C169 * C104) *
                C47369 * C47264 +
            ((C510 - C509) * C114 + (C512 - C511) * C102 +
             (C514 - C513) * C115 + (C516 - C515) * C103 + C755 * C116 +
             C756 * C104) *
                C47369 * C47271 +
            ((C518 - C517) * C114 + (C520 - C519) * C102 +
             (C522 - C521) * C115 + (C524 - C523) * C103 +
             (C529 - C530) * C116 + (C531 - C532) * C104) *
                C47369 * C3742) *
               C2472 +
           (((C329 - C328) * C114 + (C331 - C330) * C102 +
             (C333 - C332) * C115 + (C335 - C334) * C103 + C645 * C116 +
             C646 * C104) *
                C47369 * C47264 +
            ((C928 - C927) * C114 + (C930 - C929) * C102 +
             (C932 - C931) * C115 + (C934 - C933) * C103 +
             (C935 - C936) * C116 + (C937 - C938) * C104) *
                C47369 * C47271 +
            ((C2144 - C2143) * C114 + (C2146 - C2145) * C102 +
             (C2148 - C2147) * C115 + (C2150 - C2149) * C103 +
             (C47384 * C2139 - C113 * C2138) * C116 +
             (C47384 * C2141 - C113 * C2140) * C104) *
                C47369 * C3742) *
               C47226) *
              C47146)) /
        (p * q * std::sqrt(p + q));
    d2ee[9] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C47384 * C124 - C113 * C117) * C114 +
             (C47384 * C138 - C113 * C125) * C102 + (C146 - C147) * C115 +
             (C148 - C149) * C103 + C166 * C116 + C167 * C104) *
                C47369 * C3234 +
            ((C113 * C468 - C47384 * C478) * C114 +
             (C113 * C479 - C47384 * C498) * C102 + (C509 - C510) * C115 +
             (C511 - C512) * C103 + C533 * C116 + C534 * C104) *
                C47369 * C47268) *
               C2472 +
           (((C113 * C287 - C47384 * C297) * C114 +
             (C113 * C298 - C47384 * C317) * C102 + (C328 - C329) * C115 +
             (C330 - C331) * C103 + C352 * C116 + C353 * C104) *
                C47369 * C3234 +
            ((C47384 * C911 - C113 * C906) * C114 +
             (C47384 * C921 - C113 * C912) * C102 + (C927 - C928) * C115 +
             (C929 - C930) * C103 + C939 * C116 + C940 * C104) *
                C47369 * C47268) *
               C47226) *
              C47497 +
          ((((C147 - C146) * C114 + (C149 - C148) * C102 +
             (C151 - C150) * C115 + (C153 - C152) * C103 + C168 * C116 +
             C169 * C104) *
                C47369 * C3234 +
            ((C510 - C509) * C114 + (C512 - C511) * C102 +
             (C514 - C513) * C115 + (C516 - C515) * C103 + C755 * C116 +
             C756 * C104) *
                C47369 * C47268) *
               C2472 +
           (((C329 - C328) * C114 + (C331 - C330) * C102 +
             (C333 - C332) * C115 + (C335 - C334) * C103 + C645 * C116 +
             C646 * C104) *
                C47369 * C3234 +
            ((C928 - C927) * C114 + (C930 - C929) * C102 +
             (C932 - C931) * C115 + (C934 - C933) * C103 +
             (C935 - C936) * C116 + (C937 - C938) * C104) *
                C47369 * C47268) *
               C47226) *
              C47484 +
          (((C166 * C114 + C167 * C102 + (C155 - C154) * C115 +
             (C157 - C156) * C103 + C170 * C116 + C171 * C104) *
                C47369 * C3234 +
            (C533 * C114 + C534 * C102 + (C526 - C525) * C115 +
             (C528 - C527) * C103 + (C757 - C758) * C116 +
             (C759 - C760) * C104) *
                C47369 * C47268) *
               C2472 +
           ((C352 * C114 + C353 * C102 + (C345 - C344) * C115 +
             (C347 - C346) * C103 + (C647 - C648) * C116 +
             (C649 - C650) * C104) *
                C47369 * C3234 +
            (C939 * C114 + C940 * C102 + (C936 - C935) * C115 +
             (C938 - C937) * C103 + (C47384 * C919 - C113 * C910) * C116 +
             (C47384 * C925 - C113 * C920) * C104) *
                C47369 * C47268) *
               C47226) *
              C47455)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C47384 * C124 - C113 * C117) * C114 +
            (C47384 * C138 - C113 * C125) * C102 + (C146 - C147) * C115 +
            (C148 - C149) * C103 + C166 * C116 + C167 * C104) *
               C47369 * C3234 +
           ((C113 * C468 - C47384 * C478) * C114 +
            (C113 * C479 - C47384 * C498) * C102 + (C509 - C510) * C115 +
            (C511 - C512) * C103 + C533 * C116 + C534 * C104) *
               C47369 * C47268) *
              C47507 +
          (((C113 * C287 - C47384 * C297) * C114 +
            (C113 * C298 - C47384 * C317) * C102 + (C328 - C329) * C115 +
            (C330 - C331) * C103 + C352 * C116 + C353 * C104) *
               C47369 * C3234 +
           ((C47384 * C911 - C113 * C906) * C114 +
            (C47384 * C921 - C113 * C912) * C102 + (C927 - C928) * C115 +
            (C929 - C930) * C103 + C939 * C116 + C940 * C104) *
               C47369 * C47268) *
              C47503 +
          (((C47384 * C303 - C113 * C290) * C114 +
            (C47384 * C320 - C113 * C304) * C102 + (C336 - C337) * C115 +
            (C338 - C339) * C103 + C354 * C116 + C355 * C104) *
               C47369 * C3234 +
           ((C113 * C1261 - C47384 * C1273) * C114 +
            (C113 * C1274 - C47384 * C1288) * C102 + (C1561 - C1562) * C115 +
            (C1563 - C1564) * C103 + (C1565 - C1566) * C116 +
            (C1567 - C1568) * C104) *
               C47369 * C47268) *
              C47493 +
          (((C113 * C1124 - C47384 * C1130) * C114 +
            (C113 * C1131 - C47384 * C1142) * C102 + (C1403 - C1404) * C115 +
            (C1405 - C1406) * C103 + (C1407 - C1408) * C116 +
            (C1409 - C1410) * C104) *
               C47369 * C3234 +
           ((C47384 * C1669 - C113 * C1666) * C114 +
            (C47384 * C1675 - C113 * C1670) * C102 +
            (C47384 * C1671 - C113 * C1667) * C115 +
            (C47384 * C1676 - C113 * C1672) * C103 +
            (C47384 * C1673 - C113 * C1668) * C116 +
            (C47384 * C1677 - C113 * C1674) * C104) *
               C47369 * C47268) *
              C47471) *
         C47135) /
            (p * q * std::sqrt(p + q));
    d2ee[10] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C47384 * C124 - C113 * C117) * C114 +
            (C47384 * C138 - C113 * C125) * C102 + (C146 - C147) * C115 +
            (C148 - C149) * C103 + C166 * C116 + C167 * C104) *
               C47369 * C47181 * C1392 +
           ((C113 * C287 - C47384 * C297) * C114 +
            (C113 * C298 - C47384 * C317) * C102 + (C328 - C329) * C115 +
            (C330 - C331) * C103 + C352 * C116 + C353 * C104) *
               C47369 * C47181 * C1393 +
           ((C47384 * C303 - C113 * C290) * C114 +
            (C47384 * C320 - C113 * C304) * C102 + (C336 - C337) * C115 +
            (C338 - C339) * C103 + C354 * C116 + C355 * C104) *
               C47369 * C47181 * C1394 +
           ((C113 * C1124 - C47384 * C1130) * C114 +
            (C113 * C1131 - C47384 * C1142) * C102 + (C1403 - C1404) * C115 +
            (C1405 - C1406) * C103 + (C1407 - C1408) * C116 +
            (C1409 - C1410) * C104) *
               C47369 * C47181 * C47471) *
              C47415 +
          (((C147 - C146) * C114 + (C149 - C148) * C102 + (C151 - C150) * C115 +
            (C153 - C152) * C103 + C168 * C116 + C169 * C104) *
               C47369 * C47181 * C1392 +
           ((C329 - C328) * C114 + (C331 - C330) * C102 + (C333 - C332) * C115 +
            (C335 - C334) * C103 + C645 * C116 + C646 * C104) *
               C47369 * C47181 * C1393 +
           ((C337 - C336) * C114 + (C339 - C338) * C102 + (C341 - C340) * C115 +
            (C343 - C342) * C103 + (C348 - C349) * C116 +
            (C350 - C351) * C104) *
               C47369 * C47181 * C1394 +
           ((C1404 - C1403) * C114 + (C1406 - C1405) * C102 +
            (C1408 - C1407) * C115 + (C1410 - C1409) * C103 +
            (C47384 * C1399 - C113 * C1398) * C116 +
            (C47384 * C1401 - C113 * C1400) * C104) *
               C47369 * C47181 * C47471) *
              C47146)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C47384 * C124 - C113 * C117) * C114 +
            (C47384 * C138 - C113 * C125) * C102 + (C146 - C147) * C115 +
            (C148 - C149) * C103 + C166 * C116 + C167 * C104) *
               C47369 * C47181 * C47429 +
           ((C113 * C287 - C47384 * C297) * C114 +
            (C113 * C298 - C47384 * C317) * C102 + (C328 - C329) * C115 +
            (C330 - C331) * C103 + C352 * C116 + C353 * C104) *
               C47369 * C47181 * C47226) *
              C636 +
          (((C147 - C146) * C114 + (C149 - C148) * C102 + (C151 - C150) * C115 +
            (C153 - C152) * C103 + C168 * C116 + C169 * C104) *
               C47369 * C47181 * C47429 +
           ((C329 - C328) * C114 + (C331 - C330) * C102 + (C333 - C332) * C115 +
            (C335 - C334) * C103 + C645 * C116 + C646 * C104) *
               C47369 * C47181 * C47226) *
              C637 +
          ((C166 * C114 + C167 * C102 + (C155 - C154) * C115 +
            (C157 - C156) * C103 + C170 * C116 + C171 * C104) *
               C47369 * C47181 * C47429 +
           (C352 * C114 + C353 * C102 + (C345 - C344) * C115 +
            (C347 - C346) * C103 + (C647 - C648) * C116 +
            (C649 - C650) * C104) *
               C47369 * C47181 * C47226) *
              C638 +
          ((C168 * C114 + C169 * C102 + (C159 - C158) * C115 +
            (C161 - C160) * C103 + (C162 - C163) * C116 +
            (C164 - C165) * C104) *
               C47369 * C47181 * C47429 +
           (C645 * C114 + C646 * C102 + (C648 - C647) * C115 +
            (C650 - C649) * C103 + (C47384 * C641 - C113 * C640) * C116 +
            (C47384 * C643 - C113 * C642) * C104) *
               C47369 * C47181 * C47226) *
              C47465)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C47384 * C124 - C113 * C117) * C114 +
             (C47384 * C138 - C113 * C125) * C102 + (C146 - C147) * C115 +
             (C148 - C149) * C103 + C166 * C116 + C167 * C104) *
                C47369 * C1788 +
            ((C113 * C468 - C47384 * C478) * C114 +
             (C113 * C479 - C47384 * C498) * C102 + (C509 - C510) * C115 +
             (C511 - C512) * C103 + C533 * C116 + C534 * C104) *
                C47369 * C1789 +
            ((C47384 * C484 - C113 * C471) * C114 +
             (C47384 * C501 - C113 * C485) * C102 + (C517 - C518) * C115 +
             (C519 - C520) * C103 + C535 * C116 + C536 * C104) *
                C47369 * C47464) *
               C47429 +
           (((C113 * C287 - C47384 * C297) * C114 +
             (C113 * C298 - C47384 * C317) * C102 + (C328 - C329) * C115 +
             (C330 - C331) * C103 + C352 * C116 + C353 * C104) *
                C47369 * C1788 +
            ((C47384 * C911 - C113 * C906) * C114 +
             (C47384 * C921 - C113 * C912) * C102 + (C927 - C928) * C115 +
             (C929 - C930) * C103 + C939 * C116 + C940 * C104) *
                C47369 * C1789 +
            ((C113 * C1258 - C47384 * C1267) * C114 +
             (C113 * C1268 - C47384 * C1285) * C102 + (C2143 - C2144) * C115 +
             (C2145 - C2146) * C103 + (C2147 - C2148) * C116 +
             (C2149 - C2150) * C104) *
                C47369 * C47464) *
               C47226) *
              C47415 +
          ((((C147 - C146) * C114 + (C149 - C148) * C102 +
             (C151 - C150) * C115 + (C153 - C152) * C103 + C168 * C116 +
             C169 * C104) *
                C47369 * C1788 +
            ((C510 - C509) * C114 + (C512 - C511) * C102 +
             (C514 - C513) * C115 + (C516 - C515) * C103 + C755 * C116 +
             C756 * C104) *
                C47369 * C1789 +
            ((C518 - C517) * C114 + (C520 - C519) * C102 +
             (C522 - C521) * C115 + (C524 - C523) * C103 +
             (C529 - C530) * C116 + (C531 - C532) * C104) *
                C47369 * C47464) *
               C47429 +
           (((C329 - C328) * C114 + (C331 - C330) * C102 +
             (C333 - C332) * C115 + (C335 - C334) * C103 + C645 * C116 +
             C646 * C104) *
                C47369 * C1788 +
            ((C928 - C927) * C114 + (C930 - C929) * C102 +
             (C932 - C931) * C115 + (C934 - C933) * C103 +
             (C935 - C936) * C116 + (C937 - C938) * C104) *
                C47369 * C1789 +
            ((C2144 - C2143) * C114 + (C2146 - C2145) * C102 +
             (C2148 - C2147) * C115 + (C2150 - C2149) * C103 +
             (C47384 * C2139 - C113 * C2138) * C116 +
             (C47384 * C2141 - C113 * C2140) * C104) *
                C47369 * C47464) *
               C47226) *
              C47146)) /
            (p * q * std::sqrt(p + q));
    d2ee[11] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C47384 * C124 - C113 * C117) * C114 +
            (C47384 * C138 - C113 * C125) * C102 + (C146 - C147) * C115 +
            (C148 - C149) * C103 + C166 * C116 + C167 * C104) *
               C47369 * C47430 +
           ((C113 * C468 - C47384 * C478) * C114 +
            (C113 * C479 - C47384 * C498) * C102 + (C509 - C510) * C115 +
            (C511 - C512) * C103 + C533 * C116 + C534 * C104) *
               C47369 * C47268) *
              C1392 +
          (((C113 * C287 - C47384 * C297) * C114 +
            (C113 * C298 - C47384 * C317) * C102 + (C328 - C329) * C115 +
            (C330 - C331) * C103 + C352 * C116 + C353 * C104) *
               C47369 * C47430 +
           ((C47384 * C911 - C113 * C906) * C114 +
            (C47384 * C921 - C113 * C912) * C102 + (C927 - C928) * C115 +
            (C929 - C930) * C103 + C939 * C116 + C940 * C104) *
               C47369 * C47268) *
              C1393 +
          (((C47384 * C303 - C113 * C290) * C114 +
            (C47384 * C320 - C113 * C304) * C102 + (C336 - C337) * C115 +
            (C338 - C339) * C103 + C354 * C116 + C355 * C104) *
               C47369 * C47430 +
           ((C113 * C1261 - C47384 * C1273) * C114 +
            (C113 * C1274 - C47384 * C1288) * C102 + (C1561 - C1562) * C115 +
            (C1563 - C1564) * C103 + (C1565 - C1566) * C116 +
            (C1567 - C1568) * C104) *
               C47369 * C47268) *
              C1394 +
          (((C113 * C1124 - C47384 * C1130) * C114 +
            (C113 * C1131 - C47384 * C1142) * C102 + (C1403 - C1404) * C115 +
            (C1405 - C1406) * C103 + (C1407 - C1408) * C116 +
            (C1409 - C1410) * C104) *
               C47369 * C47430 +
           ((C47384 * C1669 - C113 * C1666) * C114 +
            (C47384 * C1675 - C113 * C1670) * C102 +
            (C47384 * C1671 - C113 * C1667) * C115 +
            (C47384 * C1676 - C113 * C1672) * C103 +
            (C47384 * C1673 - C113 * C1668) * C116 +
            (C47384 * C1677 - C113 * C1674) * C104) *
               C47369 * C47268) *
              C47471) *
         C47135) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C47384 * C124 - C113 * C117) * C114 +
             (C47384 * C138 - C113 * C125) * C102 + (C146 - C147) * C115 +
             (C148 - C149) * C103 + C166 * C116 + C167 * C104) *
                C47369 * C47430 +
            ((C113 * C468 - C47384 * C478) * C114 +
             (C113 * C479 - C47384 * C498) * C102 + (C509 - C510) * C115 +
             (C511 - C512) * C103 + C533 * C116 + C534 * C104) *
                C47369 * C47268) *
               C47429 +
           (((C113 * C287 - C47384 * C297) * C114 +
             (C113 * C298 - C47384 * C317) * C102 + (C328 - C329) * C115 +
             (C330 - C331) * C103 + C352 * C116 + C353 * C104) *
                C47369 * C47430 +
            ((C47384 * C911 - C113 * C906) * C114 +
             (C47384 * C921 - C113 * C912) * C102 + (C927 - C928) * C115 +
             (C929 - C930) * C103 + C939 * C116 + C940 * C104) *
                C47369 * C47268) *
               C47226) *
              C284 +
          ((((C147 - C146) * C114 + (C149 - C148) * C102 +
             (C151 - C150) * C115 + (C153 - C152) * C103 + C168 * C116 +
             C169 * C104) *
                C47369 * C47430 +
            ((C510 - C509) * C114 + (C512 - C511) * C102 +
             (C514 - C513) * C115 + (C516 - C515) * C103 + C755 * C116 +
             C756 * C104) *
                C47369 * C47268) *
               C47429 +
           (((C329 - C328) * C114 + (C331 - C330) * C102 +
             (C333 - C332) * C115 + (C335 - C334) * C103 + C645 * C116 +
             C646 * C104) *
                C47369 * C47430 +
            ((C928 - C927) * C114 + (C930 - C929) * C102 +
             (C932 - C931) * C115 + (C934 - C933) * C103 +
             (C935 - C936) * C116 + (C937 - C938) * C104) *
                C47369 * C47268) *
               C47226) *
              C285 +
          (((C166 * C114 + C167 * C102 + (C155 - C154) * C115 +
             (C157 - C156) * C103 + C170 * C116 + C171 * C104) *
                C47369 * C47430 +
            (C533 * C114 + C534 * C102 + (C526 - C525) * C115 +
             (C528 - C527) * C103 + (C757 - C758) * C116 +
             (C759 - C760) * C104) *
                C47369 * C47268) *
               C47429 +
           ((C352 * C114 + C353 * C102 + (C345 - C344) * C115 +
             (C347 - C346) * C103 + (C647 - C648) * C116 +
             (C649 - C650) * C104) *
                C47369 * C47430 +
            (C939 * C114 + C940 * C102 + (C936 - C935) * C115 +
             (C938 - C937) * C103 + (C47384 * C919 - C113 * C910) * C116 +
             (C47384 * C925 - C113 * C920) * C104) *
                C47369 * C47268) *
               C47226) *
              C47455)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C47384 * C124 - C113 * C117) * C114 +
            (C47384 * C138 - C113 * C125) * C102 + (C146 - C147) * C115 +
            (C148 - C149) * C103 + C166 * C116 + C167 * C104) *
               C47369 * C2248 +
           ((C113 * C468 - C47384 * C478) * C114 +
            (C113 * C479 - C47384 * C498) * C102 + (C509 - C510) * C115 +
            (C511 - C512) * C103 + C533 * C116 + C534 * C104) *
               C47369 * C2249 +
           ((C47384 * C484 - C113 * C471) * C114 +
            (C47384 * C501 - C113 * C485) * C102 + (C517 - C518) * C115 +
            (C519 - C520) * C103 + C535 * C116 + C536 * C104) *
               C47369 * C2250 +
           ((C113 * C1968 - C47384 * C1974) * C114 +
            (C113 * C1975 - C47384 * C1986) * C102 + (C2257 - C2258) * C115 +
            (C2259 - C2260) * C103 + (C2261 - C2262) * C116 +
            (C2263 - C2264) * C104) *
               C47369 * C47477) *
              C47429 +
          (((C113 * C287 - C47384 * C297) * C114 +
            (C113 * C298 - C47384 * C317) * C102 + (C328 - C329) * C115 +
            (C330 - C331) * C103 + C352 * C116 + C353 * C104) *
               C47369 * C2248 +
           ((C47384 * C911 - C113 * C906) * C114 +
            (C47384 * C921 - C113 * C912) * C102 + (C927 - C928) * C115 +
            (C929 - C930) * C103 + C939 * C116 + C940 * C104) *
               C47369 * C2249 +
           ((C113 * C1258 - C47384 * C1267) * C114 +
            (C113 * C1268 - C47384 * C1285) * C102 + (C2143 - C2144) * C115 +
            (C2145 - C2146) * C103 + (C2147 - C2148) * C116 +
            (C2149 - C2150) * C104) *
               C47369 * C2250 +
           ((C47384 * C2365 - C113 * C2362) * C114 +
            (C47384 * C2371 - C113 * C2366) * C102 +
            (C47384 * C2367 - C113 * C2363) * C115 +
            (C47384 * C2372 - C113 * C2368) * C103 +
            (C47384 * C2369 - C113 * C2364) * C116 +
            (C47384 * C2373 - C113 * C2370) * C104) *
               C47369 * C47477) *
              C47226) *
         C47135) /
            (p * q * std::sqrt(p + q));
    d2ee[12] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((C47384 * C124 - C113 * C117) * C114 +
               (C47384 * C138 - C113 * C125) * C102 + (C146 - C147) * C115 +
               (C148 - C149) * C103 + C166 * C116 + C167 * C104) *
                  C47369 * C47181 * C47163 * C108 +
              ((C147 - C146) * C114 + (C149 - C148) * C102 +
               (C151 - C150) * C115 + (C153 - C152) * C103 + C168 * C116 +
               C169 * C104) *
                  C47369 * C47181 * C47163 * C109 +
              (C166 * C114 + C167 * C102 + (C155 - C154) * C115 +
               (C157 - C156) * C103 + C170 * C116 + C171 * C104) *
                  C47369 * C47181 * C47163 * C110 +
              (C168 * C114 + C169 * C102 + (C159 - C158) * C115 +
               (C161 - C160) * C103 + (C162 - C163) * C116 +
               (C164 - C165) * C104) *
                  C47369 * C47181 * C47163 * C111 +
              (C170 * C114 + C171 * C102 + (C163 - C162) * C115 +
               (C165 - C164) * C103 + (C47384 * C136 - C113 * C123) * C116 +
               (C47384 * C144 - C113 * C137) * C104) *
                  C47369 * C47181 * C47163 * C112) +
         0.5 * std::pow(Pi, 2.5) *
             ((((C47384 * C124 - C113 * C117) * C114 +
                (C47384 * C138 - C113 * C125) * C102 + (C146 - C147) * C115 +
                (C148 - C149) * C103 + C166 * C116 + C167 * C104) *
                   C47369 * C47181 * C47500 +
               ((C113 * C287 - C47384 * C297) * C114 +
                (C113 * C298 - C47384 * C317) * C102 + (C328 - C329) * C115 +
                (C330 - C331) * C103 + C352 * C116 + C353 * C104) *
                   C47369 * C47181 * C47488 +
               ((C47384 * C303 - C113 * C290) * C114 +
                (C47384 * C320 - C113 * C304) * C102 + (C336 - C337) * C115 +
                (C338 - C339) * C103 + C354 * C116 + C355 * C104) *
                   C47369 * C47181 * C47461) *
                  C284 +
              (((C147 - C146) * C114 + (C149 - C148) * C102 +
                (C151 - C150) * C115 + (C153 - C152) * C103 + C168 * C116 +
                C169 * C104) *
                   C47369 * C47181 * C47500 +
               ((C329 - C328) * C114 + (C331 - C330) * C102 +
                (C333 - C332) * C115 + (C335 - C334) * C103 +
                (C344 - C345) * C116 + (C346 - C347) * C104) *
                   C47369 * C47181 * C47488 +
               ((C337 - C336) * C114 + (C339 - C338) * C102 +
                (C341 - C340) * C115 + (C343 - C342) * C103 +
                (C348 - C349) * C116 + (C350 - C351) * C104) *
                   C47369 * C47181 * C47461) *
                  C285 +
              ((C166 * C114 + C167 * C102 + (C155 - C154) * C115 +
                (C157 - C156) * C103 + C170 * C116 + C171 * C104) *
                   C47369 * C47181 * C47500 +
               (C352 * C114 + C353 * C102 + (C345 - C344) * C115 +
                (C347 - C346) * C103 + (C113 * C295 - C47384 * C313) * C116 +
                (C113 * C314 - C47384 * C325) * C104) *
                   C47369 * C47181 * C47488 +
               (C354 * C114 + C355 * C102 + (C349 - C348) * C115 +
                (C351 - C350) * C103 + (C47384 * C315 - C113 * C296) * C116 +
                (C47384 * C326 - C113 * C316) * C104) *
                   C47369 * C47181 * C47461) *
                  C47455)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C47384 * C124 - C113 * C117) * C114 +
            (C47384 * C138 - C113 * C125) * C102 + (C146 - C147) * C115 +
            (C148 - C149) * C103 + C166 * C116 + C167 * C104) *
               C47369 * C47501 +
           ((C113 * C468 - C47384 * C478) * C114 +
            (C113 * C479 - C47384 * C498) * C102 + (C509 - C510) * C115 +
            (C511 - C512) * C103 + C533 * C116 + C534 * C104) *
               C47369 * C47490 +
           ((C47384 * C484 - C113 * C471) * C114 +
            (C47384 * C501 - C113 * C485) * C102 + (C517 - C518) * C115 +
            (C519 - C520) * C103 + C535 * C116 + C536 * C104) *
               C47369 * C47464) *
              C47163 * C284 +
          (((C147 - C146) * C114 + (C149 - C148) * C102 + (C151 - C150) * C115 +
            (C153 - C152) * C103 + C168 * C116 + C169 * C104) *
               C47369 * C47501 +
           ((C510 - C509) * C114 + (C512 - C511) * C102 + (C514 - C513) * C115 +
            (C516 - C515) * C103 + (C525 - C526) * C116 +
            (C527 - C528) * C104) *
               C47369 * C47490 +
           ((C518 - C517) * C114 + (C520 - C519) * C102 + (C522 - C521) * C115 +
            (C524 - C523) * C103 + (C529 - C530) * C116 +
            (C531 - C532) * C104) *
               C47369 * C47464) *
              C47163 * C285 +
          ((C166 * C114 + C167 * C102 + (C155 - C154) * C115 +
            (C157 - C156) * C103 + C170 * C116 + C171 * C104) *
               C47369 * C47501 +
           (C533 * C114 + C534 * C102 + (C526 - C525) * C115 +
            (C528 - C527) * C103 + (C113 * C476 - C47384 * C494) * C116 +
            (C113 * C495 - C47384 * C506) * C104) *
               C47369 * C47490 +
           (C535 * C114 + C536 * C102 + (C530 - C529) * C115 +
            (C532 - C531) * C103 + (C47384 * C496 - C113 * C477) * C116 +
            (C47384 * C507 - C113 * C497) * C104) *
               C47369 * C47464) *
              C47163 * C47455)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C47384 * C124 - C113 * C117) * C114 +
            (C47384 * C138 - C113 * C125) * C102 + (C146 - C147) * C115 +
            (C148 - C149) * C103 + C166 * C116 + C167 * C104) *
               C47369 * C47181 * C1050 +
           ((C113 * C287 - C47384 * C297) * C114 +
            (C113 * C298 - C47384 * C317) * C102 + (C328 - C329) * C115 +
            (C330 - C331) * C103 + C352 * C116 + C353 * C104) *
               C47369 * C47181 * C1051 +
           ((C47384 * C303 - C113 * C290) * C114 +
            (C47384 * C320 - C113 * C304) * C102 + (C336 - C337) * C115 +
            (C338 - C339) * C103 + C354 * C116 + C355 * C104) *
               C47369 * C47181 * C47461) *
              C47497 +
          (((C147 - C146) * C114 + (C149 - C148) * C102 + (C151 - C150) * C115 +
            (C153 - C152) * C103 + C168 * C116 + C169 * C104) *
               C47369 * C47181 * C1050 +
           ((C329 - C328) * C114 + (C331 - C330) * C102 + (C333 - C332) * C115 +
            (C335 - C334) * C103 + C645 * C116 + C646 * C104) *
               C47369 * C47181 * C1051 +
           ((C337 - C336) * C114 + (C339 - C338) * C102 + (C341 - C340) * C115 +
            (C343 - C342) * C103 + (C348 - C349) * C116 +
            (C350 - C351) * C104) *
               C47369 * C47181 * C47461) *
              C47484 +
          ((C166 * C114 + C167 * C102 + (C155 - C154) * C115 +
            (C157 - C156) * C103 + C170 * C116 + C171 * C104) *
               C47369 * C47181 * C1050 +
           (C352 * C114 + C353 * C102 + (C345 - C344) * C115 +
            (C347 - C346) * C103 + (C647 - C648) * C116 +
            (C649 - C650) * C104) *
               C47369 * C47181 * C1051 +
           (C354 * C114 + C355 * C102 + (C349 - C348) * C115 +
            (C351 - C350) * C103 + (C47384 * C315 - C113 * C296) * C116 +
            (C47384 * C326 - C113 * C316) * C104) *
               C47369 * C47181 * C47461) *
              C47455)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C47384 * C124 - C113 * C117) * C114 +
           (C47384 * C138 - C113 * C125) * C102 + (C146 - C147) * C115 +
           (C148 - C149) * C103 + C166 * C116 + C167 * C104) *
              C47369 * C47181 * C1118 +
          ((C113 * C287 - C47384 * C297) * C114 +
           (C113 * C298 - C47384 * C317) * C102 + (C328 - C329) * C115 +
           (C330 - C331) * C103 + C352 * C116 + C353 * C104) *
              C47369 * C47181 * C1119 +
          ((C47384 * C303 - C113 * C290) * C114 +
           (C47384 * C320 - C113 * C304) * C102 + (C336 - C337) * C115 +
           (C338 - C339) * C103 + C354 * C116 + C355 * C104) *
              C47369 * C47181 * C1120 +
          ((C113 * C1124 - C47384 * C1130) * C114 +
           (C113 * C1131 - C47384 * C1142) * C102 +
           (C113 * C1125 - C47384 * C1132) * C115 +
           (C113 * C1133 - C47384 * C1143) * C103 +
           (C113 * C1126 - C47384 * C1134) * C116 +
           (C113 * C1135 - C47384 * C1144) * C104) *
              C47369 * C47181 * C1121 +
          ((C47384 * C1136 - C113 * C1127) * C114 +
           (C47384 * C1145 - C113 * C1137) * C102 +
           (C47384 * C1138 - C113 * C1128) * C115 +
           (C47384 * C1146 - C113 * C1139) * C103 +
           (C47384 * C1140 - C113 * C1129) * C116 +
           (C47384 * C1147 - C113 * C1141) * C104) *
              C47369 * C47181 * C1122) *
         C47135) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C47384 * C124 - C113 * C117) * C114 +
            (C47384 * C138 - C113 * C125) * C102 + (C146 - C147) * C115 +
            (C148 - C149) * C103 + C166 * C116 + C167 * C104) *
               C47369 * C47501 +
           ((C113 * C468 - C47384 * C478) * C114 +
            (C113 * C479 - C47384 * C498) * C102 + (C509 - C510) * C115 +
            (C511 - C512) * C103 + C533 * C116 + C534 * C104) *
               C47369 * C47490 +
           ((C47384 * C484 - C113 * C471) * C114 +
            (C47384 * C501 - C113 * C485) * C102 + (C517 - C518) * C115 +
            (C519 - C520) * C103 + C535 * C116 + C536 * C104) *
               C47369 * C47464) *
              C1050 +
          (((C113 * C287 - C47384 * C297) * C114 +
            (C113 * C298 - C47384 * C317) * C102 + (C328 - C329) * C115 +
            (C330 - C331) * C103 + C352 * C116 + C353 * C104) *
               C47369 * C47501 +
           ((C47384 * C911 - C113 * C906) * C114 +
            (C47384 * C921 - C113 * C912) * C102 + (C927 - C928) * C115 +
            (C929 - C930) * C103 + C939 * C116 + C940 * C104) *
               C47369 * C47490 +
           ((C113 * C1258 - C47384 * C1267) * C114 +
            (C113 * C1268 - C47384 * C1285) * C102 +
            (C113 * C1259 - C47384 * C1269) * C115 +
            (C113 * C1270 - C47384 * C1286) * C103 +
            (C113 * C1260 - C47384 * C1271) * C116 +
            (C113 * C1272 - C47384 * C1287) * C104) *
               C47369 * C47464) *
              C1051 +
          (((C47384 * C303 - C113 * C290) * C114 +
            (C47384 * C320 - C113 * C304) * C102 + (C336 - C337) * C115 +
            (C338 - C339) * C103 + C354 * C116 + C355 * C104) *
               C47369 * C47501 +
           ((C113 * C1261 - C47384 * C1273) * C114 +
            (C113 * C1274 - C47384 * C1288) * C102 +
            (C113 * C1262 - C47384 * C1275) * C115 +
            (C113 * C1276 - C47384 * C1289) * C103 +
            (C113 * C1263 - C47384 * C1277) * C116 +
            (C113 * C1278 - C47384 * C1290) * C104) *
               C47369 * C47490 +
           ((C47384 * C1279 - C113 * C1264) * C114 +
            (C47384 * C1291 - C113 * C1280) * C102 +
            (C47384 * C1281 - C113 * C1265) * C115 +
            (C47384 * C1292 - C113 * C1282) * C103 +
            (C47384 * C1283 - C113 * C1266) * C116 +
            (C47384 * C1293 - C113 * C1284) * C104) *
               C47369 * C47464) *
              C47461) *
         C47135) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C47384 * C124 - C113 * C117) * C114 +
            (C47384 * C138 - C113 * C125) * C102 + (C146 - C147) * C115 +
            (C148 - C149) * C103 + C166 * C116 + C167 * C104) *
               C47369 * C1788 +
           ((C113 * C468 - C47384 * C478) * C114 +
            (C113 * C479 - C47384 * C498) * C102 + (C509 - C510) * C115 +
            (C511 - C512) * C103 + C533 * C116 + C534 * C104) *
               C47369 * C1789 +
           ((C47384 * C484 - C113 * C471) * C114 +
            (C47384 * C501 - C113 * C485) * C102 + (C517 - C518) * C115 +
            (C519 - C520) * C103 + C535 * C116 + C536 * C104) *
               C47369 * C47464) *
              C47163 * C47497 +
          (((C147 - C146) * C114 + (C149 - C148) * C102 + (C151 - C150) * C115 +
            (C153 - C152) * C103 + C168 * C116 + C169 * C104) *
               C47369 * C1788 +
           ((C510 - C509) * C114 + (C512 - C511) * C102 + (C514 - C513) * C115 +
            (C516 - C515) * C103 + C755 * C116 + C756 * C104) *
               C47369 * C1789 +
           ((C518 - C517) * C114 + (C520 - C519) * C102 + (C522 - C521) * C115 +
            (C524 - C523) * C103 + (C529 - C530) * C116 +
            (C531 - C532) * C104) *
               C47369 * C47464) *
              C47163 * C47484 +
          ((C166 * C114 + C167 * C102 + (C155 - C154) * C115 +
            (C157 - C156) * C103 + C170 * C116 + C171 * C104) *
               C47369 * C1788 +
           (C533 * C114 + C534 * C102 + (C526 - C525) * C115 +
            (C528 - C527) * C103 + (C757 - C758) * C116 +
            (C759 - C760) * C104) *
               C47369 * C1789 +
           (C535 * C114 + C536 * C102 + (C530 - C529) * C115 +
            (C532 - C531) * C103 + (C47384 * C496 - C113 * C477) * C116 +
            (C47384 * C507 - C113 * C497) * C104) *
               C47369 * C47464) *
              C47163 * C47455)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C47384 * C124 - C113 * C117) * C114 +
            (C47384 * C138 - C113 * C125) * C102 + (C146 - C147) * C115 +
            (C148 - C149) * C103 + C166 * C116 + C167 * C104) *
               C47369 * C1788 +
           ((C113 * C468 - C47384 * C478) * C114 +
            (C113 * C479 - C47384 * C498) * C102 + (C509 - C510) * C115 +
            (C511 - C512) * C103 + C533 * C116 + C534 * C104) *
               C47369 * C1789 +
           ((C47384 * C484 - C113 * C471) * C114 +
            (C47384 * C501 - C113 * C485) * C102 + (C517 - C518) * C115 +
            (C519 - C520) * C103 + C535 * C116 + C536 * C104) *
               C47369 * C47464) *
              C47500 +
          (((C113 * C287 - C47384 * C297) * C114 +
            (C113 * C298 - C47384 * C317) * C102 + (C328 - C329) * C115 +
            (C330 - C331) * C103 + C352 * C116 + C353 * C104) *
               C47369 * C1788 +
           ((C47384 * C911 - C113 * C906) * C114 +
            (C47384 * C921 - C113 * C912) * C102 + (C927 - C928) * C115 +
            (C929 - C930) * C103 + C939 * C116 + C940 * C104) *
               C47369 * C1789 +
           ((C113 * C1258 - C47384 * C1267) * C114 +
            (C113 * C1268 - C47384 * C1285) * C102 +
            (C113 * C1259 - C47384 * C1269) * C115 +
            (C113 * C1270 - C47384 * C1286) * C103 +
            (C113 * C1260 - C47384 * C1271) * C116 +
            (C113 * C1272 - C47384 * C1287) * C104) *
               C47369 * C47464) *
              C47488 +
          (((C47384 * C303 - C113 * C290) * C114 +
            (C47384 * C320 - C113 * C304) * C102 + (C336 - C337) * C115 +
            (C338 - C339) * C103 + C354 * C116 + C355 * C104) *
               C47369 * C1788 +
           ((C113 * C1261 - C47384 * C1273) * C114 +
            (C113 * C1274 - C47384 * C1288) * C102 + (C1561 - C1562) * C115 +
            (C1563 - C1564) * C103 + (C1565 - C1566) * C116 +
            (C1567 - C1568) * C104) *
               C47369 * C1789 +
           ((C47384 * C1279 - C113 * C1264) * C114 +
            (C47384 * C1291 - C113 * C1280) * C102 +
            (C47384 * C1281 - C113 * C1265) * C115 +
            (C47384 * C1292 - C113 * C1282) * C103 +
            (C47384 * C1283 - C113 * C1266) * C116 +
            (C47384 * C1293 - C113 * C1284) * C104) *
               C47369 * C47464) *
              C47461) *
         C47135) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C47384 * C124 - C113 * C117) * C114 +
           (C47384 * C138 - C113 * C125) * C102 + (C146 - C147) * C115 +
           (C148 - C149) * C103 + C166 * C116 + C167 * C104) *
              C47369 * C1963 +
          ((C113 * C468 - C47384 * C478) * C114 +
           (C113 * C479 - C47384 * C498) * C102 + (C509 - C510) * C115 +
           (C511 - C512) * C103 + C533 * C116 + C534 * C104) *
              C47369 * C1964 +
          ((C47384 * C484 - C113 * C471) * C114 +
           (C47384 * C501 - C113 * C485) * C102 + (C517 - C518) * C115 +
           (C519 - C520) * C103 + C535 * C116 + C536 * C104) *
              C47369 * C1965 +
          ((C113 * C1968 - C47384 * C1974) * C114 +
           (C113 * C1975 - C47384 * C1986) * C102 +
           (C113 * C1969 - C47384 * C1976) * C115 +
           (C113 * C1977 - C47384 * C1987) * C103 +
           (C113 * C1970 - C47384 * C1978) * C116 +
           (C113 * C1979 - C47384 * C1988) * C104) *
              C47369 * C1966 +
          ((C47384 * C1980 - C113 * C1971) * C114 +
           (C47384 * C1989 - C113 * C1981) * C102 +
           (C47384 * C1982 - C113 * C1972) * C115 +
           (C47384 * C1990 - C113 * C1983) * C103 +
           (C47384 * C1984 - C113 * C1973) * C116 +
           (C47384 * C1991 - C113 * C1985) * C104) *
              C47369 * C1967) *
         C47163 * C47135) /
            (p * q * std::sqrt(p + q));
    d2ee[13] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C47384 * C124 - C113 * C117) * C114 +
             (C47384 * C138 - C113 * C125) * C102 + (C146 - C147) * C115 +
             (C148 - C149) * C103 + C166 * C116 + C167 * C104) *
                C47369 * C47430 +
            ((C113 * C468 - C47384 * C478) * C114 +
             (C113 * C479 - C47384 * C498) * C102 + (C509 - C510) * C115 +
             (C511 - C512) * C103 + C533 * C116 + C534 * C104) *
                C47369 * C47268) *
               C1050 +
           (((C113 * C287 - C47384 * C297) * C114 +
             (C113 * C298 - C47384 * C317) * C102 + (C328 - C329) * C115 +
             (C330 - C331) * C103 + C352 * C116 + C353 * C104) *
                C47369 * C47430 +
            ((C47384 * C911 - C113 * C906) * C114 +
             (C47384 * C921 - C113 * C912) * C102 + (C927 - C928) * C115 +
             (C929 - C930) * C103 + C939 * C116 + C940 * C104) *
                C47369 * C47268) *
               C1051 +
           (((C47384 * C303 - C113 * C290) * C114 +
             (C47384 * C320 - C113 * C304) * C102 + (C336 - C337) * C115 +
             (C338 - C339) * C103 + C354 * C116 + C355 * C104) *
                C47369 * C47430 +
            ((C113 * C1261 - C47384 * C1273) * C114 +
             (C113 * C1274 - C47384 * C1288) * C102 + (C1561 - C1562) * C115 +
             (C1563 - C1564) * C103 + (C1565 - C1566) * C116 +
             (C1567 - C1568) * C104) *
                C47369 * C47268) *
               C47461) *
              C47415 +
          ((((C147 - C146) * C114 + (C149 - C148) * C102 +
             (C151 - C150) * C115 + (C153 - C152) * C103 + C168 * C116 +
             C169 * C104) *
                C47369 * C47430 +
            ((C510 - C509) * C114 + (C512 - C511) * C102 +
             (C514 - C513) * C115 + (C516 - C515) * C103 + C755 * C116 +
             C756 * C104) *
                C47369 * C47268) *
               C1050 +
           (((C329 - C328) * C114 + (C331 - C330) * C102 +
             (C333 - C332) * C115 + (C335 - C334) * C103 + C645 * C116 +
             C646 * C104) *
                C47369 * C47430 +
            ((C928 - C927) * C114 + (C930 - C929) * C102 +
             (C932 - C931) * C115 + (C934 - C933) * C103 +
             (C935 - C936) * C116 + (C937 - C938) * C104) *
                C47369 * C47268) *
               C1051 +
           (((C337 - C336) * C114 + (C339 - C338) * C102 +
             (C341 - C340) * C115 + (C343 - C342) * C103 +
             (C348 - C349) * C116 + (C350 - C351) * C104) *
                C47369 * C47430 +
            ((C1562 - C1561) * C114 + (C1564 - C1563) * C102 +
             (C1566 - C1565) * C115 + (C1568 - C1567) * C103 +
             (C47384 * C1557 - C113 * C1556) * C116 +
             (C47384 * C1559 - C113 * C1558) * C104) *
                C47369 * C47268) *
               C47461) *
              C47146)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C47384 * C124 - C113 * C117) * C114 +
            (C47384 * C138 - C113 * C125) * C102 + (C146 - C147) * C115 +
            (C148 - C149) * C103 + C166 * C116 + C167 * C104) *
               C47369 * C47430 +
           ((C113 * C468 - C47384 * C478) * C114 +
            (C113 * C479 - C47384 * C498) * C102 + (C509 - C510) * C115 +
            (C511 - C512) * C103 + C533 * C116 + C534 * C104) *
               C47369 * C47268) *
              C47163 * C636 +
          (((C147 - C146) * C114 + (C149 - C148) * C102 + (C151 - C150) * C115 +
            (C153 - C152) * C103 + C168 * C116 + C169 * C104) *
               C47369 * C47430 +
           ((C510 - C509) * C114 + (C512 - C511) * C102 + (C514 - C513) * C115 +
            (C516 - C515) * C103 + C755 * C116 + C756 * C104) *
               C47369 * C47268) *
              C47163 * C637 +
          ((C166 * C114 + C167 * C102 + (C155 - C154) * C115 +
            (C157 - C156) * C103 + C170 * C116 + C171 * C104) *
               C47369 * C47430 +
           (C533 * C114 + C534 * C102 + (C526 - C525) * C115 +
            (C528 - C527) * C103 + (C757 - C758) * C116 +
            (C759 - C760) * C104) *
               C47369 * C47268) *
              C47163 * C638 +
          ((C168 * C114 + C169 * C102 + (C159 - C158) * C115 +
            (C161 - C160) * C103 + (C162 - C163) * C116 +
            (C164 - C165) * C104) *
               C47369 * C47430 +
           (C755 * C114 + C756 * C102 + (C758 - C757) * C115 +
            (C760 - C759) * C103 + (C47384 * C751 - C113 * C750) * C116 +
            (C47384 * C753 - C113 * C752) * C104) *
               C47369 * C47268) *
              C47163 * C47465)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C47384 * C124 - C113 * C117) * C114 +
            (C47384 * C138 - C113 * C125) * C102 + (C146 - C147) * C115 +
            (C148 - C149) * C103 + C166 * C116 + C167 * C104) *
               C47369 * C2248 +
           ((C113 * C468 - C47384 * C478) * C114 +
            (C113 * C479 - C47384 * C498) * C102 + (C509 - C510) * C115 +
            (C511 - C512) * C103 + C533 * C116 + C534 * C104) *
               C47369 * C2249 +
           ((C47384 * C484 - C113 * C471) * C114 +
            (C47384 * C501 - C113 * C485) * C102 + (C517 - C518) * C115 +
            (C519 - C520) * C103 + C535 * C116 + C536 * C104) *
               C47369 * C2250 +
           ((C113 * C1968 - C47384 * C1974) * C114 +
            (C113 * C1975 - C47384 * C1986) * C102 + (C2257 - C2258) * C115 +
            (C2259 - C2260) * C103 + (C2261 - C2262) * C116 +
            (C2263 - C2264) * C104) *
               C47369 * C47477) *
              C47163 * C47415 +
          (((C147 - C146) * C114 + (C149 - C148) * C102 + (C151 - C150) * C115 +
            (C153 - C152) * C103 + C168 * C116 + C169 * C104) *
               C47369 * C2248 +
           ((C510 - C509) * C114 + (C512 - C511) * C102 + (C514 - C513) * C115 +
            (C516 - C515) * C103 + C755 * C116 + C756 * C104) *
               C47369 * C2249 +
           ((C518 - C517) * C114 + (C520 - C519) * C102 + (C522 - C521) * C115 +
            (C524 - C523) * C103 + (C529 - C530) * C116 +
            (C531 - C532) * C104) *
               C47369 * C2250 +
           ((C2258 - C2257) * C114 + (C2260 - C2259) * C102 +
            (C2262 - C2261) * C115 + (C2264 - C2263) * C103 +
            (C47384 * C2253 - C113 * C2252) * C116 +
            (C47384 * C2255 - C113 * C2254) * C104) *
               C47369 * C47477) *
              C47163 * C47146)) /
            (p * q * std::sqrt(p + q));
    d2ee[14] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C47384 * C124 - C113 * C117) * C114 +
            (C47384 * C138 - C113 * C125) * C102 + (C146 - C147) * C115 +
            (C148 - C149) * C103 + C166 * C116 + C167 * C104) *
               C47369 * C47181 * C47500 +
           ((C113 * C287 - C47384 * C297) * C114 +
            (C113 * C298 - C47384 * C317) * C102 + (C328 - C329) * C115 +
            (C330 - C331) * C103 + C352 * C116 + C353 * C104) *
               C47369 * C47181 * C47488 +
           ((C47384 * C303 - C113 * C290) * C114 +
            (C47384 * C320 - C113 * C304) * C102 + (C336 - C337) * C115 +
            (C338 - C339) * C103 + C354 * C116 + C355 * C104) *
               C47369 * C47181 * C47461) *
              C284 +
          (((C147 - C146) * C114 + (C149 - C148) * C102 + (C151 - C150) * C115 +
            (C153 - C152) * C103 + C168 * C116 + C169 * C104) *
               C47369 * C47181 * C47500 +
           ((C329 - C328) * C114 + (C331 - C330) * C102 + (C333 - C332) * C115 +
            (C335 - C334) * C103 + (C344 - C345) * C116 +
            (C346 - C347) * C104) *
               C47369 * C47181 * C47488 +
           ((C337 - C336) * C114 + (C339 - C338) * C102 + (C341 - C340) * C115 +
            (C343 - C342) * C103 + (C348 - C349) * C116 +
            (C350 - C351) * C104) *
               C47369 * C47181 * C47461) *
              C285 +
          ((C166 * C114 + C167 * C102 + (C155 - C154) * C115 +
            (C157 - C156) * C103 + C170 * C116 + C171 * C104) *
               C47369 * C47181 * C47500 +
           (C352 * C114 + C353 * C102 + (C345 - C344) * C115 +
            (C347 - C346) * C103 + (C113 * C295 - C47384 * C313) * C116 +
            (C113 * C314 - C47384 * C325) * C104) *
               C47369 * C47181 * C47488 +
           (C354 * C114 + C355 * C102 + (C349 - C348) * C115 +
            (C351 - C350) * C103 + (C47384 * C315 - C113 * C296) * C116 +
            (C47384 * C326 - C113 * C316) * C104) *
               C47369 * C47181 * C47461) *
              C47455)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C47384 * C124 - C113 * C117) * C114 +
           (C47384 * C138 - C113 * C125) * C102 + (C146 - C147) * C115 +
           (C148 - C149) * C103 + C166 * C116 + C167 * C104) *
              C47369 * C47181 * C47163 * C108 +
          ((C147 - C146) * C114 + (C149 - C148) * C102 + (C151 - C150) * C115 +
           (C153 - C152) * C103 + C168 * C116 + C169 * C104) *
              C47369 * C47181 * C47163 * C109 +
          (C166 * C114 + C167 * C102 + (C155 - C154) * C115 +
           (C157 - C156) * C103 + C170 * C116 + C171 * C104) *
              C47369 * C47181 * C47163 * C110 +
          (C168 * C114 + C169 * C102 + (C159 - C158) * C115 +
           (C161 - C160) * C103 + (C162 - C163) * C116 + (C164 - C165) * C104) *
              C47369 * C47181 * C47163 * C111 +
          (C170 * C114 + C171 * C102 + (C163 - C162) * C115 +
           (C165 - C164) * C103 + (C47384 * C136 - C113 * C123) * C116 +
           (C47384 * C144 - C113 * C137) * C104) *
              C47369 * C47181 * C47163 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C47384 * C124 - C113 * C117) * C114 +
            (C47384 * C138 - C113 * C125) * C102 + (C146 - C147) * C115 +
            (C148 - C149) * C103 + C166 * C116 + C167 * C104) *
               C47369 * C47181 * C1050 +
           ((C113 * C287 - C47384 * C297) * C114 +
            (C113 * C298 - C47384 * C317) * C102 + (C328 - C329) * C115 +
            (C330 - C331) * C103 + C352 * C116 + C353 * C104) *
               C47369 * C47181 * C1051 +
           ((C47384 * C303 - C113 * C290) * C114 +
            (C47384 * C320 - C113 * C304) * C102 + (C336 - C337) * C115 +
            (C338 - C339) * C103 + C354 * C116 + C355 * C104) *
               C47369 * C47181 * C47461) *
              C47497 +
          (((C147 - C146) * C114 + (C149 - C148) * C102 + (C151 - C150) * C115 +
            (C153 - C152) * C103 + C168 * C116 + C169 * C104) *
               C47369 * C47181 * C1050 +
           ((C329 - C328) * C114 + (C331 - C330) * C102 + (C333 - C332) * C115 +
            (C335 - C334) * C103 + C645 * C116 + C646 * C104) *
               C47369 * C47181 * C1051 +
           ((C337 - C336) * C114 + (C339 - C338) * C102 + (C341 - C340) * C115 +
            (C343 - C342) * C103 + (C348 - C349) * C116 +
            (C350 - C351) * C104) *
               C47369 * C47181 * C47461) *
              C47484 +
          ((C166 * C114 + C167 * C102 + (C155 - C154) * C115 +
            (C157 - C156) * C103 + C170 * C116 + C171 * C104) *
               C47369 * C47181 * C1050 +
           (C352 * C114 + C353 * C102 + (C345 - C344) * C115 +
            (C347 - C346) * C103 + (C647 - C648) * C116 +
            (C649 - C650) * C104) *
               C47369 * C47181 * C1051 +
           (C354 * C114 + C355 * C102 + (C349 - C348) * C115 +
            (C351 - C350) * C103 + (C47384 * C315 - C113 * C296) * C116 +
            (C47384 * C326 - C113 * C316) * C104) *
               C47369 * C47181 * C47461) *
              C47455)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C47384 * C124 - C113 * C117) * C114 +
           (C47384 * C138 - C113 * C125) * C102 + (C146 - C147) * C115 +
           (C148 - C149) * C103 + C166 * C116 + C167 * C104) *
              C47369 * C47181 * C1118 +
          ((C113 * C287 - C47384 * C297) * C114 +
           (C113 * C298 - C47384 * C317) * C102 + (C328 - C329) * C115 +
           (C330 - C331) * C103 + C352 * C116 + C353 * C104) *
              C47369 * C47181 * C1119 +
          ((C47384 * C303 - C113 * C290) * C114 +
           (C47384 * C320 - C113 * C304) * C102 + (C336 - C337) * C115 +
           (C338 - C339) * C103 + C354 * C116 + C355 * C104) *
              C47369 * C47181 * C1120 +
          ((C113 * C1124 - C47384 * C1130) * C114 +
           (C113 * C1131 - C47384 * C1142) * C102 +
           (C113 * C1125 - C47384 * C1132) * C115 +
           (C113 * C1133 - C47384 * C1143) * C103 +
           (C113 * C1126 - C47384 * C1134) * C116 +
           (C113 * C1135 - C47384 * C1144) * C104) *
              C47369 * C47181 * C1121 +
          ((C47384 * C1136 - C113 * C1127) * C114 +
           (C47384 * C1145 - C113 * C1137) * C102 +
           (C47384 * C1138 - C113 * C1128) * C115 +
           (C47384 * C1146 - C113 * C1139) * C103 +
           (C47384 * C1140 - C113 * C1129) * C116 +
           (C47384 * C1147 - C113 * C1141) * C104) *
              C47369 * C47181 * C1122) *
         C47135) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C47384 * C124 - C113 * C117) * C114 +
            (C47384 * C138 - C113 * C125) * C102 + (C146 - C147) * C115 +
            (C148 - C149) * C103 + C166 * C116 + C167 * C104) *
               C47369 * C1788 +
           ((C113 * C468 - C47384 * C478) * C114 +
            (C113 * C479 - C47384 * C498) * C102 + (C509 - C510) * C115 +
            (C511 - C512) * C103 + C533 * C116 + C534 * C104) *
               C47369 * C1789 +
           ((C47384 * C484 - C113 * C471) * C114 +
            (C47384 * C501 - C113 * C485) * C102 + (C517 - C518) * C115 +
            (C519 - C520) * C103 + C535 * C116 + C536 * C104) *
               C47369 * C47464) *
              C47163 * C47497 +
          (((C147 - C146) * C114 + (C149 - C148) * C102 + (C151 - C150) * C115 +
            (C153 - C152) * C103 + C168 * C116 + C169 * C104) *
               C47369 * C1788 +
           ((C510 - C509) * C114 + (C512 - C511) * C102 + (C514 - C513) * C115 +
            (C516 - C515) * C103 + C755 * C116 + C756 * C104) *
               C47369 * C1789 +
           ((C518 - C517) * C114 + (C520 - C519) * C102 + (C522 - C521) * C115 +
            (C524 - C523) * C103 + (C529 - C530) * C116 +
            (C531 - C532) * C104) *
               C47369 * C47464) *
              C47163 * C47484 +
          ((C166 * C114 + C167 * C102 + (C155 - C154) * C115 +
            (C157 - C156) * C103 + C170 * C116 + C171 * C104) *
               C47369 * C1788 +
           (C533 * C114 + C534 * C102 + (C526 - C525) * C115 +
            (C528 - C527) * C103 + (C757 - C758) * C116 +
            (C759 - C760) * C104) *
               C47369 * C1789 +
           (C535 * C114 + C536 * C102 + (C530 - C529) * C115 +
            (C532 - C531) * C103 + (C47384 * C496 - C113 * C477) * C116 +
            (C47384 * C507 - C113 * C497) * C104) *
               C47369 * C47464) *
              C47163 * C47455)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C47384 * C124 - C113 * C117) * C114 +
            (C47384 * C138 - C113 * C125) * C102 + (C146 - C147) * C115 +
            (C148 - C149) * C103 + C166 * C116 + C167 * C104) *
               C47369 * C1788 +
           ((C113 * C468 - C47384 * C478) * C114 +
            (C113 * C479 - C47384 * C498) * C102 + (C509 - C510) * C115 +
            (C511 - C512) * C103 + C533 * C116 + C534 * C104) *
               C47369 * C1789 +
           ((C47384 * C484 - C113 * C471) * C114 +
            (C47384 * C501 - C113 * C485) * C102 + (C517 - C518) * C115 +
            (C519 - C520) * C103 + C535 * C116 + C536 * C104) *
               C47369 * C47464) *
              C47500 +
          (((C113 * C287 - C47384 * C297) * C114 +
            (C113 * C298 - C47384 * C317) * C102 + (C328 - C329) * C115 +
            (C330 - C331) * C103 + C352 * C116 + C353 * C104) *
               C47369 * C1788 +
           ((C47384 * C911 - C113 * C906) * C114 +
            (C47384 * C921 - C113 * C912) * C102 + (C927 - C928) * C115 +
            (C929 - C930) * C103 + C939 * C116 + C940 * C104) *
               C47369 * C1789 +
           ((C113 * C1258 - C47384 * C1267) * C114 +
            (C113 * C1268 - C47384 * C1285) * C102 +
            (C113 * C1259 - C47384 * C1269) * C115 +
            (C113 * C1270 - C47384 * C1286) * C103 +
            (C113 * C1260 - C47384 * C1271) * C116 +
            (C113 * C1272 - C47384 * C1287) * C104) *
               C47369 * C47464) *
              C47488 +
          (((C47384 * C303 - C113 * C290) * C114 +
            (C47384 * C320 - C113 * C304) * C102 + (C336 - C337) * C115 +
            (C338 - C339) * C103 + C354 * C116 + C355 * C104) *
               C47369 * C1788 +
           ((C113 * C1261 - C47384 * C1273) * C114 +
            (C113 * C1274 - C47384 * C1288) * C102 + (C1561 - C1562) * C115 +
            (C1563 - C1564) * C103 + (C1565 - C1566) * C116 +
            (C1567 - C1568) * C104) *
               C47369 * C1789 +
           ((C47384 * C1279 - C113 * C1264) * C114 +
            (C47384 * C1291 - C113 * C1280) * C102 +
            (C47384 * C1281 - C113 * C1265) * C115 +
            (C47384 * C1292 - C113 * C1282) * C103 +
            (C47384 * C1283 - C113 * C1266) * C116 +
            (C47384 * C1293 - C113 * C1284) * C104) *
               C47369 * C47464) *
              C47461) *
         C47135) /
            (p * q * std::sqrt(p + q));
    d2ee[15] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C47384 * C124 - C113 * C117) * C114 +
             (C47384 * C138 - C113 * C125) * C102 + (C146 - C147) * C115 +
             (C148 - C149) * C103 + C166 * C116 + C167 * C104) *
                C47369 * C3234 +
            ((C113 * C468 - C47384 * C478) * C114 +
             (C113 * C479 - C47384 * C498) * C102 + (C509 - C510) * C115 +
             (C511 - C512) * C103 + C533 * C116 + C534 * C104) *
                C47369 * C47268) *
               C47429 +
           (((C113 * C287 - C47384 * C297) * C114 +
             (C113 * C298 - C47384 * C317) * C102 + (C328 - C329) * C115 +
             (C330 - C331) * C103 + C352 * C116 + C353 * C104) *
                C47369 * C3234 +
            ((C47384 * C911 - C113 * C906) * C114 +
             (C47384 * C921 - C113 * C912) * C102 + (C927 - C928) * C115 +
             (C929 - C930) * C103 + C939 * C116 + C940 * C104) *
                C47369 * C47268) *
               C47226) *
              C47140 +
          ((((C147 - C146) * C114 + (C149 - C148) * C102 +
             (C151 - C150) * C115 + (C153 - C152) * C103 + C168 * C116 +
             C169 * C104) *
                C47369 * C3234 +
            ((C510 - C509) * C114 + (C512 - C511) * C102 +
             (C514 - C513) * C115 + (C516 - C515) * C103 + C755 * C116 +
             C756 * C104) *
                C47369 * C47268) *
               C47429 +
           (((C329 - C328) * C114 + (C331 - C330) * C102 +
             (C333 - C332) * C115 + (C335 - C334) * C103 + C645 * C116 +
             C646 * C104) *
                C47369 * C3234 +
            ((C928 - C927) * C114 + (C930 - C929) * C102 +
             (C932 - C931) * C115 + (C934 - C933) * C103 +
             (C935 - C936) * C116 + (C937 - C938) * C104) *
                C47369 * C47268) *
               C47226) *
              C47149 +
          (((C166 * C114 + C167 * C102 + (C155 - C154) * C115 +
             (C157 - C156) * C103 + C170 * C116 + C171 * C104) *
                C47369 * C3234 +
            (C533 * C114 + C534 * C102 + (C526 - C525) * C115 +
             (C528 - C527) * C103 + (C757 - C758) * C116 +
             (C759 - C760) * C104) *
                C47369 * C47268) *
               C47429 +
           ((C352 * C114 + C353 * C102 + (C345 - C344) * C115 +
             (C347 - C346) * C103 + (C647 - C648) * C116 +
             (C649 - C650) * C104) *
                C47369 * C3234 +
            (C939 * C114 + C940 * C102 + (C936 - C935) * C115 +
             (C938 - C937) * C103 + (C47384 * C919 - C113 * C910) * C116 +
             (C47384 * C925 - C113 * C920) * C104) *
                C47369 * C47268) *
               C47226) *
              C2843)) /
        (p * q * std::sqrt(p + q));
    d2ee[16] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C47384 * C124 - C113 * C117) * C114 +
             (C47384 * C138 - C113 * C125) * C102 + (C146 - C147) * C115 +
             (C148 - C149) * C103 + C166 * C116 + C167 * C104) *
                C47369 * C47264 +
            ((C113 * C468 - C47384 * C478) * C114 +
             (C113 * C479 - C47384 * C498) * C102 + (C509 - C510) * C115 +
             (C511 - C512) * C103 + C533 * C116 + C534 * C104) *
                C47369 * C47271 +
            ((C47384 * C484 - C113 * C471) * C114 +
             (C47384 * C501 - C113 * C485) * C102 + (C517 - C518) * C115 +
             (C519 - C520) * C103 + C535 * C116 + C536 * C104) *
                C47369 * C3742) *
               C47429 +
           (((C113 * C287 - C47384 * C297) * C114 +
             (C113 * C298 - C47384 * C317) * C102 + (C328 - C329) * C115 +
             (C330 - C331) * C103 + C352 * C116 + C353 * C104) *
                C47369 * C47264 +
            ((C47384 * C911 - C113 * C906) * C114 +
             (C47384 * C921 - C113 * C912) * C102 + (C927 - C928) * C115 +
             (C929 - C930) * C103 + C939 * C116 + C940 * C104) *
                C47369 * C47271 +
            ((C113 * C1258 - C47384 * C1267) * C114 +
             (C113 * C1268 - C47384 * C1285) * C102 + (C2143 - C2144) * C115 +
             (C2145 - C2146) * C103 + (C2147 - C2148) * C116 +
             (C2149 - C2150) * C104) *
                C47369 * C3742) *
               C47226) *
              C2580 +
          ((((C147 - C146) * C114 + (C149 - C148) * C102 +
             (C151 - C150) * C115 + (C153 - C152) * C103 + C168 * C116 +
             C169 * C104) *
                C47369 * C47264 +
            ((C510 - C509) * C114 + (C512 - C511) * C102 +
             (C514 - C513) * C115 + (C516 - C515) * C103 + C755 * C116 +
             C756 * C104) *
                C47369 * C47271 +
            ((C518 - C517) * C114 + (C520 - C519) * C102 +
             (C522 - C521) * C115 + (C524 - C523) * C103 +
             (C529 - C530) * C116 + (C531 - C532) * C104) *
                C47369 * C3742) *
               C47429 +
           (((C329 - C328) * C114 + (C331 - C330) * C102 +
             (C333 - C332) * C115 + (C335 - C334) * C103 + C645 * C116 +
             C646 * C104) *
                C47369 * C47264 +
            ((C928 - C927) * C114 + (C930 - C929) * C102 +
             (C932 - C931) * C115 + (C934 - C933) * C103 +
             (C935 - C936) * C116 + (C937 - C938) * C104) *
                C47369 * C47271 +
            ((C2144 - C2143) * C114 + (C2146 - C2145) * C102 +
             (C2148 - C2147) * C115 + (C2150 - C2149) * C103 +
             (C47384 * C2139 - C113 * C2138) * C116 +
             (C47384 * C2141 - C113 * C2140) * C104) *
                C47369 * C3742) *
               C47226) *
              C47146)) /
        (p * q * std::sqrt(p + q));
    d2ee[17] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C47384 * C124 - C113 * C117) * C114 +
             (C47384 * C138 - C113 * C125) * C102 + (C146 - C147) * C115 +
             (C148 - C149) * C103 + C166 * C116 + C167 * C104) *
                C47369 * C3234 +
            ((C113 * C468 - C47384 * C478) * C114 +
             (C113 * C479 - C47384 * C498) * C102 + (C509 - C510) * C115 +
             (C511 - C512) * C103 + C533 * C116 + C534 * C104) *
                C47369 * C47268) *
               C47500 +
           (((C113 * C287 - C47384 * C297) * C114 +
             (C113 * C298 - C47384 * C317) * C102 + (C328 - C329) * C115 +
             (C330 - C331) * C103 + C352 * C116 + C353 * C104) *
                C47369 * C3234 +
            ((C47384 * C911 - C113 * C906) * C114 +
             (C47384 * C921 - C113 * C912) * C102 + (C927 - C928) * C115 +
             (C929 - C930) * C103 + C939 * C116 + C940 * C104) *
                C47369 * C47268) *
               C47488 +
           (((C47384 * C303 - C113 * C290) * C114 +
             (C47384 * C320 - C113 * C304) * C102 + (C336 - C337) * C115 +
             (C338 - C339) * C103 + C354 * C116 + C355 * C104) *
                C47369 * C3234 +
            ((C113 * C1261 - C47384 * C1273) * C114 +
             (C113 * C1274 - C47384 * C1288) * C102 + (C1561 - C1562) * C115 +
             (C1563 - C1564) * C103 + (C1565 - C1566) * C116 +
             (C1567 - C1568) * C104) *
                C47369 * C47268) *
               C47461) *
              C2580 +
          ((((C147 - C146) * C114 + (C149 - C148) * C102 +
             (C151 - C150) * C115 + (C153 - C152) * C103 + C168 * C116 +
             C169 * C104) *
                C47369 * C3234 +
            ((C510 - C509) * C114 + (C512 - C511) * C102 +
             (C514 - C513) * C115 + (C516 - C515) * C103 + C755 * C116 +
             C756 * C104) *
                C47369 * C47268) *
               C47500 +
           (((C329 - C328) * C114 + (C331 - C330) * C102 +
             (C333 - C332) * C115 + (C335 - C334) * C103 + C645 * C116 +
             C646 * C104) *
                C47369 * C3234 +
            ((C928 - C927) * C114 + (C930 - C929) * C102 +
             (C932 - C931) * C115 + (C934 - C933) * C103 +
             (C935 - C936) * C116 + (C937 - C938) * C104) *
                C47369 * C47268) *
               C47488 +
           (((C337 - C336) * C114 + (C339 - C338) * C102 +
             (C341 - C340) * C115 + (C343 - C342) * C103 +
             (C348 - C349) * C116 + (C350 - C351) * C104) *
                C47369 * C3234 +
            ((C1562 - C1561) * C114 + (C1564 - C1563) * C102 +
             (C1566 - C1565) * C115 + (C1568 - C1567) * C103 +
             (C47384 * C1557 - C113 * C1556) * C116 +
             (C47384 * C1559 - C113 * C1558) * C104) *
                C47369 * C47268) *
               C47461) *
              C47146)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C47384 * C124 - C113 * C117) * C114 +
            (C47384 * C138 - C113 * C125) * C102 + (C146 - C147) * C115 +
            (C148 - C149) * C103 + C166 * C116 + C167 * C104) *
               C47369 * C3234 +
           ((C113 * C468 - C47384 * C478) * C114 +
            (C113 * C479 - C47384 * C498) * C102 + (C509 - C510) * C115 +
            (C511 - C512) * C103 + C533 * C116 + C534 * C104) *
               C47369 * C47268) *
              C47163 * C47506 +
          (((C147 - C146) * C114 + (C149 - C148) * C102 + (C151 - C150) * C115 +
            (C153 - C152) * C103 + C168 * C116 + C169 * C104) *
               C47369 * C3234 +
           ((C510 - C509) * C114 + (C512 - C511) * C102 + (C514 - C513) * C115 +
            (C516 - C515) * C103 + C755 * C116 + C756 * C104) *
               C47369 * C47268) *
              C47163 * C47499 +
          ((C166 * C114 + C167 * C102 + (C155 - C154) * C115 +
            (C157 - C156) * C103 + C170 * C116 + C171 * C104) *
               C47369 * C3234 +
           (C533 * C114 + C534 * C102 + (C526 - C525) * C115 +
            (C528 - C527) * C103 + (C757 - C758) * C116 +
            (C759 - C760) * C104) *
               C47369 * C47268) *
              C47163 * C47486 +
          ((C168 * C114 + C169 * C102 + (C159 - C158) * C115 +
            (C161 - C160) * C103 + (C162 - C163) * C116 +
            (C164 - C165) * C104) *
               C47369 * C3234 +
           (C755 * C114 + C756 * C102 + (C758 - C757) * C115 +
            (C760 - C759) * C103 + (C47384 * C751 - C113 * C750) * C116 +
            (C47384 * C753 - C113 * C752) * C104) *
               C47369 * C47268) *
              C47163 * C47465)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C47384 * C124 - C113 * C117) * C114 +
            (C47384 * C138 - C113 * C125) * C102 + (C146 - C147) * C115 +
            (C148 - C149) * C103 + C166 * C116 + C167 * C104) *
               C47369 * C47508 +
           ((C113 * C468 - C47384 * C478) * C114 +
            (C113 * C479 - C47384 * C498) * C102 + (C509 - C510) * C115 +
            (C511 - C512) * C103 + C533 * C116 + C534 * C104) *
               C47369 * C47505 +
           ((C47384 * C484 - C113 * C471) * C114 +
            (C47384 * C501 - C113 * C485) * C102 + (C517 - C518) * C115 +
            (C519 - C520) * C103 + C535 * C116 + C536 * C104) *
               C47369 * C47496 +
           ((C113 * C1968 - C47384 * C1974) * C114 +
            (C113 * C1975 - C47384 * C1986) * C102 + (C2257 - C2258) * C115 +
            (C2259 - C2260) * C103 + (C2261 - C2262) * C116 +
            (C2263 - C2264) * C104) *
               C47369 * C47477) *
              C47163 * C2580 +
          (((C147 - C146) * C114 + (C149 - C148) * C102 + (C151 - C150) * C115 +
            (C153 - C152) * C103 + C168 * C116 + C169 * C104) *
               C47369 * C47508 +
           ((C510 - C509) * C114 + (C512 - C511) * C102 + (C514 - C513) * C115 +
            (C516 - C515) * C103 + C755 * C116 + C756 * C104) *
               C47369 * C47505 +
           ((C518 - C517) * C114 + (C520 - C519) * C102 + (C522 - C521) * C115 +
            (C524 - C523) * C103 + (C529 - C530) * C116 +
            (C531 - C532) * C104) *
               C47369 * C47496 +
           ((C2258 - C2257) * C114 + (C2260 - C2259) * C102 +
            (C2262 - C2261) * C115 + (C2264 - C2263) * C103 +
            (C47384 * C2253 - C113 * C2252) * C116 +
            (C47384 * C2255 - C113 * C2254) * C104) *
               C47369 * C47477) *
              C47163 * C47146)) /
            (p * q * std::sqrt(p + q));
    d2ee[18] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C47384 * C124 - C113 * C117) * C114 +
            (C47384 * C138 - C113 * C125) * C102 + (C146 - C147) * C115 +
            (C148 - C149) * C103 + C166 * C116 + C167 * C104) *
               C47369 * C47264 +
           ((C113 * C468 - C47384 * C478) * C114 +
            (C113 * C479 - C47384 * C498) * C102 + (C509 - C510) * C115 +
            (C511 - C512) * C103 + C533 * C116 + C534 * C104) *
               C47369 * C47271 +
           ((C47384 * C484 - C113 * C471) * C114 +
            (C47384 * C501 - C113 * C485) * C102 + (C517 - C518) * C115 +
            (C519 - C520) * C103 + C535 * C116 + C536 * C104) *
               C47369 * C3742) *
              C47163 * C47140 +
          (((C147 - C146) * C114 + (C149 - C148) * C102 + (C151 - C150) * C115 +
            (C153 - C152) * C103 + C168 * C116 + C169 * C104) *
               C47369 * C47264 +
           ((C510 - C509) * C114 + (C512 - C511) * C102 + (C514 - C513) * C115 +
            (C516 - C515) * C103 + C755 * C116 + C756 * C104) *
               C47369 * C47271 +
           ((C518 - C517) * C114 + (C520 - C519) * C102 + (C522 - C521) * C115 +
            (C524 - C523) * C103 + (C529 - C530) * C116 +
            (C531 - C532) * C104) *
               C47369 * C3742) *
              C47163 * C47149 +
          ((C166 * C114 + C167 * C102 + (C155 - C154) * C115 +
            (C157 - C156) * C103 + C170 * C116 + C171 * C104) *
               C47369 * C47264 +
           (C533 * C114 + C534 * C102 + (C526 - C525) * C115 +
            (C528 - C527) * C103 + (C757 - C758) * C116 +
            (C759 - C760) * C104) *
               C47369 * C47271 +
           (C535 * C114 + C536 * C102 + (C530 - C529) * C115 +
            (C532 - C531) * C103 + (C47384 * C496 - C113 * C477) * C116 +
            (C47384 * C507 - C113 * C497) * C104) *
               C47369 * C3742) *
              C47163 * C2843)) /
        (p * q * std::sqrt(p + q));
    d2ee[19] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C47384 * C124 - C113 * C117) * C114 +
            (C47384 * C138 - C113 * C125) * C102 + (C146 - C147) * C115 +
            (C148 - C149) * C103 + C166 * C116 + C167 * C104) *
               C47369 * C3234 +
           ((C113 * C468 - C47384 * C478) * C114 +
            (C113 * C479 - C47384 * C498) * C102 + (C509 - C510) * C115 +
            (C511 - C512) * C103 + C533 * C116 + C534 * C104) *
               C47369 * C47268) *
              C47163 * C47506 +
          (((C147 - C146) * C114 + (C149 - C148) * C102 + (C151 - C150) * C115 +
            (C153 - C152) * C103 + C168 * C116 + C169 * C104) *
               C47369 * C3234 +
           ((C510 - C509) * C114 + (C512 - C511) * C102 + (C514 - C513) * C115 +
            (C516 - C515) * C103 + C755 * C116 + C756 * C104) *
               C47369 * C47268) *
              C47163 * C47499 +
          ((C166 * C114 + C167 * C102 + (C155 - C154) * C115 +
            (C157 - C156) * C103 + C170 * C116 + C171 * C104) *
               C47369 * C3234 +
           (C533 * C114 + C534 * C102 + (C526 - C525) * C115 +
            (C528 - C527) * C103 + (C757 - C758) * C116 +
            (C759 - C760) * C104) *
               C47369 * C47268) *
              C47163 * C47486 +
          ((C168 * C114 + C169 * C102 + (C159 - C158) * C115 +
            (C161 - C160) * C103 + (C162 - C163) * C116 +
            (C164 - C165) * C104) *
               C47369 * C3234 +
           (C755 * C114 + C756 * C102 + (C758 - C757) * C115 +
            (C760 - C759) * C103 + (C47384 * C751 - C113 * C750) * C116 +
            (C47384 * C753 - C113 * C752) * C104) *
               C47369 * C47268) *
              C47163 * C47465)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C47384 * C124 - C113 * C117) * C114 +
             (C47384 * C138 - C113 * C125) * C102 + (C146 - C147) * C115 +
             (C148 - C149) * C103 + C166 * C116 + C167 * C104) *
                C47369 * C3234 +
            ((C113 * C468 - C47384 * C478) * C114 +
             (C113 * C479 - C47384 * C498) * C102 + (C509 - C510) * C115 +
             (C511 - C512) * C103 + C533 * C116 + C534 * C104) *
                C47369 * C47268) *
               C47500 +
           (((C113 * C287 - C47384 * C297) * C114 +
             (C113 * C298 - C47384 * C317) * C102 + (C328 - C329) * C115 +
             (C330 - C331) * C103 + C352 * C116 + C353 * C104) *
                C47369 * C3234 +
            ((C47384 * C911 - C113 * C906) * C114 +
             (C47384 * C921 - C113 * C912) * C102 + (C927 - C928) * C115 +
             (C929 - C930) * C103 + C939 * C116 + C940 * C104) *
                C47369 * C47268) *
               C47488 +
           (((C47384 * C303 - C113 * C290) * C114 +
             (C47384 * C320 - C113 * C304) * C102 + (C336 - C337) * C115 +
             (C338 - C339) * C103 + C354 * C116 + C355 * C104) *
                C47369 * C3234 +
            ((C113 * C1261 - C47384 * C1273) * C114 +
             (C113 * C1274 - C47384 * C1288) * C102 + (C1561 - C1562) * C115 +
             (C1563 - C1564) * C103 + (C1565 - C1566) * C116 +
             (C1567 - C1568) * C104) *
                C47369 * C47268) *
               C47461) *
              C2580 +
          ((((C147 - C146) * C114 + (C149 - C148) * C102 +
             (C151 - C150) * C115 + (C153 - C152) * C103 + C168 * C116 +
             C169 * C104) *
                C47369 * C3234 +
            ((C510 - C509) * C114 + (C512 - C511) * C102 +
             (C514 - C513) * C115 + (C516 - C515) * C103 + C755 * C116 +
             C756 * C104) *
                C47369 * C47268) *
               C47500 +
           (((C329 - C328) * C114 + (C331 - C330) * C102 +
             (C333 - C332) * C115 + (C335 - C334) * C103 + C645 * C116 +
             C646 * C104) *
                C47369 * C3234 +
            ((C928 - C927) * C114 + (C930 - C929) * C102 +
             (C932 - C931) * C115 + (C934 - C933) * C103 +
             (C935 - C936) * C116 + (C937 - C938) * C104) *
                C47369 * C47268) *
               C47488 +
           (((C337 - C336) * C114 + (C339 - C338) * C102 +
             (C341 - C340) * C115 + (C343 - C342) * C103 +
             (C348 - C349) * C116 + (C350 - C351) * C104) *
                C47369 * C3234 +
            ((C1562 - C1561) * C114 + (C1564 - C1563) * C102 +
             (C1566 - C1565) * C115 + (C1568 - C1567) * C103 +
             (C47384 * C1557 - C113 * C1556) * C116 +
             (C47384 * C1559 - C113 * C1558) * C104) *
                C47369 * C47268) *
               C47461) *
              C47146)) /
            (p * q * std::sqrt(p + q));
    d2ee[20] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C47384 * C124 - C113 * C117) * C114 +
            (C47384 * C138 - C113 * C125) * C102 + (C146 - C147) * C115 +
            (C148 - C149) * C103 + C166 * C116 + C167 * C104) *
               C47369 * C47181 * C47429 +
           ((C113 * C287 - C47384 * C297) * C114 +
            (C113 * C298 - C47384 * C317) * C102 + (C328 - C329) * C115 +
            (C330 - C331) * C103 + C352 * C116 + C353 * C104) *
               C47369 * C47181 * C47226) *
              C636 +
          (((C147 - C146) * C114 + (C149 - C148) * C102 + (C151 - C150) * C115 +
            (C153 - C152) * C103 + C168 * C116 + C169 * C104) *
               C47369 * C47181 * C47429 +
           ((C329 - C328) * C114 + (C331 - C330) * C102 + (C333 - C332) * C115 +
            (C335 - C334) * C103 + C645 * C116 + C646 * C104) *
               C47369 * C47181 * C47226) *
              C637 +
          ((C166 * C114 + C167 * C102 + (C155 - C154) * C115 +
            (C157 - C156) * C103 + C170 * C116 + C171 * C104) *
               C47369 * C47181 * C47429 +
           (C352 * C114 + C353 * C102 + (C345 - C344) * C115 +
            (C347 - C346) * C103 + (C647 - C648) * C116 +
            (C649 - C650) * C104) *
               C47369 * C47181 * C47226) *
              C638 +
          ((C168 * C114 + C169 * C102 + (C159 - C158) * C115 +
            (C161 - C160) * C103 + (C162 - C163) * C116 +
            (C164 - C165) * C104) *
               C47369 * C47181 * C47429 +
           (C645 * C114 + C646 * C102 + (C648 - C647) * C115 +
            (C650 - C649) * C103 + (C47384 * C641 - C113 * C640) * C116 +
            (C47384 * C643 - C113 * C642) * C104) *
               C47369 * C47181 * C47226) *
              C47465)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C47384 * C124 - C113 * C117) * C114 +
            (C47384 * C138 - C113 * C125) * C102 + (C146 - C147) * C115 +
            (C148 - C149) * C103 + C166 * C116 + C167 * C104) *
               C47369 * C47181 * C1392 +
           ((C113 * C287 - C47384 * C297) * C114 +
            (C113 * C298 - C47384 * C317) * C102 + (C328 - C329) * C115 +
            (C330 - C331) * C103 + C352 * C116 + C353 * C104) *
               C47369 * C47181 * C1393 +
           ((C47384 * C303 - C113 * C290) * C114 +
            (C47384 * C320 - C113 * C304) * C102 + (C336 - C337) * C115 +
            (C338 - C339) * C103 + C354 * C116 + C355 * C104) *
               C47369 * C47181 * C1394 +
           ((C113 * C1124 - C47384 * C1130) * C114 +
            (C113 * C1131 - C47384 * C1142) * C102 + (C1403 - C1404) * C115 +
            (C1405 - C1406) * C103 + (C1407 - C1408) * C116 +
            (C1409 - C1410) * C104) *
               C47369 * C47181 * C47471) *
              C47415 +
          (((C147 - C146) * C114 + (C149 - C148) * C102 + (C151 - C150) * C115 +
            (C153 - C152) * C103 + C168 * C116 + C169 * C104) *
               C47369 * C47181 * C1392 +
           ((C329 - C328) * C114 + (C331 - C330) * C102 + (C333 - C332) * C115 +
            (C335 - C334) * C103 + C645 * C116 + C646 * C104) *
               C47369 * C47181 * C1393 +
           ((C337 - C336) * C114 + (C339 - C338) * C102 + (C341 - C340) * C115 +
            (C343 - C342) * C103 + (C348 - C349) * C116 +
            (C350 - C351) * C104) *
               C47369 * C47181 * C1394 +
           ((C1404 - C1403) * C114 + (C1406 - C1405) * C102 +
            (C1408 - C1407) * C115 + (C1410 - C1409) * C103 +
            (C47384 * C1399 - C113 * C1398) * C116 +
            (C47384 * C1401 - C113 * C1400) * C104) *
               C47369 * C47181 * C47471) *
              C47146)) /
            (p * q * std::sqrt(p + q));
    d2ee[21] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C47384 * C124 - C113 * C117) * C114 +
             (C47384 * C138 - C113 * C125) * C102 + (C146 - C147) * C115 +
             (C148 - C149) * C103 + C166 * C116 + C167 * C104) *
                C47369 * C47430 +
            ((C113 * C468 - C47384 * C478) * C114 +
             (C113 * C479 - C47384 * C498) * C102 + (C509 - C510) * C115 +
             (C511 - C512) * C103 + C533 * C116 + C534 * C104) *
                C47369 * C47268) *
               C47429 +
           (((C113 * C287 - C47384 * C297) * C114 +
             (C113 * C298 - C47384 * C317) * C102 + (C328 - C329) * C115 +
             (C330 - C331) * C103 + C352 * C116 + C353 * C104) *
                C47369 * C47430 +
            ((C47384 * C911 - C113 * C906) * C114 +
             (C47384 * C921 - C113 * C912) * C102 + (C927 - C928) * C115 +
             (C929 - C930) * C103 + C939 * C116 + C940 * C104) *
                C47369 * C47268) *
               C47226) *
              C284 +
          ((((C147 - C146) * C114 + (C149 - C148) * C102 +
             (C151 - C150) * C115 + (C153 - C152) * C103 + C168 * C116 +
             C169 * C104) *
                C47369 * C47430 +
            ((C510 - C509) * C114 + (C512 - C511) * C102 +
             (C514 - C513) * C115 + (C516 - C515) * C103 + C755 * C116 +
             C756 * C104) *
                C47369 * C47268) *
               C47429 +
           (((C329 - C328) * C114 + (C331 - C330) * C102 +
             (C333 - C332) * C115 + (C335 - C334) * C103 + C645 * C116 +
             C646 * C104) *
                C47369 * C47430 +
            ((C928 - C927) * C114 + (C930 - C929) * C102 +
             (C932 - C931) * C115 + (C934 - C933) * C103 +
             (C935 - C936) * C116 + (C937 - C938) * C104) *
                C47369 * C47268) *
               C47226) *
              C285 +
          (((C166 * C114 + C167 * C102 + (C155 - C154) * C115 +
             (C157 - C156) * C103 + C170 * C116 + C171 * C104) *
                C47369 * C47430 +
            (C533 * C114 + C534 * C102 + (C526 - C525) * C115 +
             (C528 - C527) * C103 + (C757 - C758) * C116 +
             (C759 - C760) * C104) *
                C47369 * C47268) *
               C47429 +
           ((C352 * C114 + C353 * C102 + (C345 - C344) * C115 +
             (C347 - C346) * C103 + (C647 - C648) * C116 +
             (C649 - C650) * C104) *
                C47369 * C47430 +
            (C939 * C114 + C940 * C102 + (C936 - C935) * C115 +
             (C938 - C937) * C103 + (C47384 * C919 - C113 * C910) * C116 +
             (C47384 * C925 - C113 * C920) * C104) *
                C47369 * C47268) *
               C47226) *
              C47455)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C47384 * C124 - C113 * C117) * C114 +
            (C47384 * C138 - C113 * C125) * C102 + (C146 - C147) * C115 +
            (C148 - C149) * C103 + C166 * C116 + C167 * C104) *
               C47369 * C47430 +
           ((C113 * C468 - C47384 * C478) * C114 +
            (C113 * C479 - C47384 * C498) * C102 + (C509 - C510) * C115 +
            (C511 - C512) * C103 + C533 * C116 + C534 * C104) *
               C47369 * C47268) *
              C1392 +
          (((C113 * C287 - C47384 * C297) * C114 +
            (C113 * C298 - C47384 * C317) * C102 + (C328 - C329) * C115 +
            (C330 - C331) * C103 + C352 * C116 + C353 * C104) *
               C47369 * C47430 +
           ((C47384 * C911 - C113 * C906) * C114 +
            (C47384 * C921 - C113 * C912) * C102 + (C927 - C928) * C115 +
            (C929 - C930) * C103 + C939 * C116 + C940 * C104) *
               C47369 * C47268) *
              C1393 +
          (((C47384 * C303 - C113 * C290) * C114 +
            (C47384 * C320 - C113 * C304) * C102 + (C336 - C337) * C115 +
            (C338 - C339) * C103 + C354 * C116 + C355 * C104) *
               C47369 * C47430 +
           ((C113 * C1261 - C47384 * C1273) * C114 +
            (C113 * C1274 - C47384 * C1288) * C102 + (C1561 - C1562) * C115 +
            (C1563 - C1564) * C103 + (C1565 - C1566) * C116 +
            (C1567 - C1568) * C104) *
               C47369 * C47268) *
              C1394 +
          (((C113 * C1124 - C47384 * C1130) * C114 +
            (C113 * C1131 - C47384 * C1142) * C102 + (C1403 - C1404) * C115 +
            (C1405 - C1406) * C103 + (C1407 - C1408) * C116 +
            (C1409 - C1410) * C104) *
               C47369 * C47430 +
           ((C47384 * C1669 - C113 * C1666) * C114 +
            (C47384 * C1675 - C113 * C1670) * C102 +
            (C47384 * C1671 - C113 * C1667) * C115 +
            (C47384 * C1676 - C113 * C1672) * C103 +
            (C47384 * C1673 - C113 * C1668) * C116 +
            (C47384 * C1677 - C113 * C1674) * C104) *
               C47369 * C47268) *
              C47471) *
         C47135) /
            (p * q * std::sqrt(p + q));
    d2ee[22] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C47384 * C124 - C113 * C117) * C114 +
            (C47384 * C138 - C113 * C125) * C102 + (C146 - C147) * C115 +
            (C148 - C149) * C103 + C166 * C116 + C167 * C104) *
               C47369 * C47181 * C47500 +
           ((C113 * C287 - C47384 * C297) * C114 +
            (C113 * C298 - C47384 * C317) * C102 + (C328 - C329) * C115 +
            (C330 - C331) * C103 + C352 * C116 + C353 * C104) *
               C47369 * C47181 * C47488 +
           ((C47384 * C303 - C113 * C290) * C114 +
            (C47384 * C320 - C113 * C304) * C102 + (C336 - C337) * C115 +
            (C338 - C339) * C103 + C354 * C116 + C355 * C104) *
               C47369 * C47181 * C47461) *
              C284 +
          (((C147 - C146) * C114 + (C149 - C148) * C102 + (C151 - C150) * C115 +
            (C153 - C152) * C103 + C168 * C116 + C169 * C104) *
               C47369 * C47181 * C47500 +
           ((C329 - C328) * C114 + (C331 - C330) * C102 + (C333 - C332) * C115 +
            (C335 - C334) * C103 + (C344 - C345) * C116 +
            (C346 - C347) * C104) *
               C47369 * C47181 * C47488 +
           ((C337 - C336) * C114 + (C339 - C338) * C102 + (C341 - C340) * C115 +
            (C343 - C342) * C103 + (C348 - C349) * C116 +
            (C350 - C351) * C104) *
               C47369 * C47181 * C47461) *
              C285 +
          ((C166 * C114 + C167 * C102 + (C155 - C154) * C115 +
            (C157 - C156) * C103 + C170 * C116 + C171 * C104) *
               C47369 * C47181 * C47500 +
           (C352 * C114 + C353 * C102 + (C345 - C344) * C115 +
            (C347 - C346) * C103 + (C113 * C295 - C47384 * C313) * C116 +
            (C113 * C314 - C47384 * C325) * C104) *
               C47369 * C47181 * C47488 +
           (C354 * C114 + C355 * C102 + (C349 - C348) * C115 +
            (C351 - C350) * C103 + (C47384 * C315 - C113 * C296) * C116 +
            (C47384 * C326 - C113 * C316) * C104) *
               C47369 * C47181 * C47461) *
              C47455)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C47384 * C124 - C113 * C117) * C114 +
           (C47384 * C138 - C113 * C125) * C102 + (C146 - C147) * C115 +
           (C148 - C149) * C103 + C166 * C116 + C167 * C104) *
              C47369 * C47181 * C47163 * C108 +
          ((C147 - C146) * C114 + (C149 - C148) * C102 + (C151 - C150) * C115 +
           (C153 - C152) * C103 + C168 * C116 + C169 * C104) *
              C47369 * C47181 * C47163 * C109 +
          (C166 * C114 + C167 * C102 + (C155 - C154) * C115 +
           (C157 - C156) * C103 + C170 * C116 + C171 * C104) *
              C47369 * C47181 * C47163 * C110 +
          (C168 * C114 + C169 * C102 + (C159 - C158) * C115 +
           (C161 - C160) * C103 + (C162 - C163) * C116 + (C164 - C165) * C104) *
              C47369 * C47181 * C47163 * C111 +
          (C170 * C114 + C171 * C102 + (C163 - C162) * C115 +
           (C165 - C164) * C103 + (C47384 * C136 - C113 * C123) * C116 +
           (C47384 * C144 - C113 * C137) * C104) *
              C47369 * C47181 * C47163 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C47384 * C124 - C113 * C117) * C114 +
            (C47384 * C138 - C113 * C125) * C102 + (C146 - C147) * C115 +
            (C148 - C149) * C103 + C166 * C116 + C167 * C104) *
               C47369 * C47501 +
           ((C113 * C468 - C47384 * C478) * C114 +
            (C113 * C479 - C47384 * C498) * C102 + (C509 - C510) * C115 +
            (C511 - C512) * C103 + C533 * C116 + C534 * C104) *
               C47369 * C47490 +
           ((C47384 * C484 - C113 * C471) * C114 +
            (C47384 * C501 - C113 * C485) * C102 + (C517 - C518) * C115 +
            (C519 - C520) * C103 + C535 * C116 + C536 * C104) *
               C47369 * C47464) *
              C47163 * C284 +
          (((C147 - C146) * C114 + (C149 - C148) * C102 + (C151 - C150) * C115 +
            (C153 - C152) * C103 + C168 * C116 + C169 * C104) *
               C47369 * C47501 +
           ((C510 - C509) * C114 + (C512 - C511) * C102 + (C514 - C513) * C115 +
            (C516 - C515) * C103 + (C525 - C526) * C116 +
            (C527 - C528) * C104) *
               C47369 * C47490 +
           ((C518 - C517) * C114 + (C520 - C519) * C102 + (C522 - C521) * C115 +
            (C524 - C523) * C103 + (C529 - C530) * C116 +
            (C531 - C532) * C104) *
               C47369 * C47464) *
              C47163 * C285 +
          ((C166 * C114 + C167 * C102 + (C155 - C154) * C115 +
            (C157 - C156) * C103 + C170 * C116 + C171 * C104) *
               C47369 * C47501 +
           (C533 * C114 + C534 * C102 + (C526 - C525) * C115 +
            (C528 - C527) * C103 + (C113 * C476 - C47384 * C494) * C116 +
            (C113 * C495 - C47384 * C506) * C104) *
               C47369 * C47490 +
           (C535 * C114 + C536 * C102 + (C530 - C529) * C115 +
            (C532 - C531) * C103 + (C47384 * C496 - C113 * C477) * C116 +
            (C47384 * C507 - C113 * C497) * C104) *
               C47369 * C47464) *
              C47163 * C47455)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C47384 * C124 - C113 * C117) * C114 +
            (C47384 * C138 - C113 * C125) * C102 + (C146 - C147) * C115 +
            (C148 - C149) * C103 + C166 * C116 + C167 * C104) *
               C47369 * C47181 * C1050 +
           ((C113 * C287 - C47384 * C297) * C114 +
            (C113 * C298 - C47384 * C317) * C102 + (C328 - C329) * C115 +
            (C330 - C331) * C103 + C352 * C116 + C353 * C104) *
               C47369 * C47181 * C1051 +
           ((C47384 * C303 - C113 * C290) * C114 +
            (C47384 * C320 - C113 * C304) * C102 + (C336 - C337) * C115 +
            (C338 - C339) * C103 + C354 * C116 + C355 * C104) *
               C47369 * C47181 * C47461) *
              C47497 +
          (((C147 - C146) * C114 + (C149 - C148) * C102 + (C151 - C150) * C115 +
            (C153 - C152) * C103 + C168 * C116 + C169 * C104) *
               C47369 * C47181 * C1050 +
           ((C329 - C328) * C114 + (C331 - C330) * C102 + (C333 - C332) * C115 +
            (C335 - C334) * C103 + C645 * C116 + C646 * C104) *
               C47369 * C47181 * C1051 +
           ((C337 - C336) * C114 + (C339 - C338) * C102 + (C341 - C340) * C115 +
            (C343 - C342) * C103 + (C348 - C349) * C116 +
            (C350 - C351) * C104) *
               C47369 * C47181 * C47461) *
              C47484 +
          ((C166 * C114 + C167 * C102 + (C155 - C154) * C115 +
            (C157 - C156) * C103 + C170 * C116 + C171 * C104) *
               C47369 * C47181 * C1050 +
           (C352 * C114 + C353 * C102 + (C345 - C344) * C115 +
            (C347 - C346) * C103 + (C647 - C648) * C116 +
            (C649 - C650) * C104) *
               C47369 * C47181 * C1051 +
           (C354 * C114 + C355 * C102 + (C349 - C348) * C115 +
            (C351 - C350) * C103 + (C47384 * C315 - C113 * C296) * C116 +
            (C47384 * C326 - C113 * C316) * C104) *
               C47369 * C47181 * C47461) *
              C47455)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C47384 * C124 - C113 * C117) * C114 +
           (C47384 * C138 - C113 * C125) * C102 + (C146 - C147) * C115 +
           (C148 - C149) * C103 + C166 * C116 + C167 * C104) *
              C47369 * C47181 * C1118 +
          ((C113 * C287 - C47384 * C297) * C114 +
           (C113 * C298 - C47384 * C317) * C102 + (C328 - C329) * C115 +
           (C330 - C331) * C103 + C352 * C116 + C353 * C104) *
              C47369 * C47181 * C1119 +
          ((C47384 * C303 - C113 * C290) * C114 +
           (C47384 * C320 - C113 * C304) * C102 + (C336 - C337) * C115 +
           (C338 - C339) * C103 + C354 * C116 + C355 * C104) *
              C47369 * C47181 * C1120 +
          ((C113 * C1124 - C47384 * C1130) * C114 +
           (C113 * C1131 - C47384 * C1142) * C102 +
           (C113 * C1125 - C47384 * C1132) * C115 +
           (C113 * C1133 - C47384 * C1143) * C103 +
           (C113 * C1126 - C47384 * C1134) * C116 +
           (C113 * C1135 - C47384 * C1144) * C104) *
              C47369 * C47181 * C1121 +
          ((C47384 * C1136 - C113 * C1127) * C114 +
           (C47384 * C1145 - C113 * C1137) * C102 +
           (C47384 * C1138 - C113 * C1128) * C115 +
           (C47384 * C1146 - C113 * C1139) * C103 +
           (C47384 * C1140 - C113 * C1129) * C116 +
           (C47384 * C1147 - C113 * C1141) * C104) *
              C47369 * C47181 * C1122) *
         C47135) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C47384 * C124 - C113 * C117) * C114 +
            (C47384 * C138 - C113 * C125) * C102 + (C146 - C147) * C115 +
            (C148 - C149) * C103 + C166 * C116 + C167 * C104) *
               C47369 * C47501 +
           ((C113 * C468 - C47384 * C478) * C114 +
            (C113 * C479 - C47384 * C498) * C102 + (C509 - C510) * C115 +
            (C511 - C512) * C103 + C533 * C116 + C534 * C104) *
               C47369 * C47490 +
           ((C47384 * C484 - C113 * C471) * C114 +
            (C47384 * C501 - C113 * C485) * C102 + (C517 - C518) * C115 +
            (C519 - C520) * C103 + C535 * C116 + C536 * C104) *
               C47369 * C47464) *
              C1050 +
          (((C113 * C287 - C47384 * C297) * C114 +
            (C113 * C298 - C47384 * C317) * C102 + (C328 - C329) * C115 +
            (C330 - C331) * C103 + C352 * C116 + C353 * C104) *
               C47369 * C47501 +
           ((C47384 * C911 - C113 * C906) * C114 +
            (C47384 * C921 - C113 * C912) * C102 + (C927 - C928) * C115 +
            (C929 - C930) * C103 + C939 * C116 + C940 * C104) *
               C47369 * C47490 +
           ((C113 * C1258 - C47384 * C1267) * C114 +
            (C113 * C1268 - C47384 * C1285) * C102 +
            (C113 * C1259 - C47384 * C1269) * C115 +
            (C113 * C1270 - C47384 * C1286) * C103 +
            (C113 * C1260 - C47384 * C1271) * C116 +
            (C113 * C1272 - C47384 * C1287) * C104) *
               C47369 * C47464) *
              C1051 +
          (((C47384 * C303 - C113 * C290) * C114 +
            (C47384 * C320 - C113 * C304) * C102 + (C336 - C337) * C115 +
            (C338 - C339) * C103 + C354 * C116 + C355 * C104) *
               C47369 * C47501 +
           ((C113 * C1261 - C47384 * C1273) * C114 +
            (C113 * C1274 - C47384 * C1288) * C102 +
            (C113 * C1262 - C47384 * C1275) * C115 +
            (C113 * C1276 - C47384 * C1289) * C103 +
            (C113 * C1263 - C47384 * C1277) * C116 +
            (C113 * C1278 - C47384 * C1290) * C104) *
               C47369 * C47490 +
           ((C47384 * C1279 - C113 * C1264) * C114 +
            (C47384 * C1291 - C113 * C1280) * C102 +
            (C47384 * C1281 - C113 * C1265) * C115 +
            (C47384 * C1292 - C113 * C1282) * C103 +
            (C47384 * C1283 - C113 * C1266) * C116 +
            (C47384 * C1293 - C113 * C1284) * C104) *
               C47369 * C47464) *
              C47461) *
         C47135) /
            (p * q * std::sqrt(p + q));
    d2ee[23] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C47384 * C124 - C113 * C117) * C114 +
            (C47384 * C138 - C113 * C125) * C102 + (C146 - C147) * C115 +
            (C148 - C149) * C103 + C166 * C116 + C167 * C104) *
               C47369 * C47430 +
           ((C113 * C468 - C47384 * C478) * C114 +
            (C113 * C479 - C47384 * C498) * C102 + (C509 - C510) * C115 +
            (C511 - C512) * C103 + C533 * C116 + C534 * C104) *
               C47369 * C47268) *
              C47163 * C636 +
          (((C147 - C146) * C114 + (C149 - C148) * C102 + (C151 - C150) * C115 +
            (C153 - C152) * C103 + C168 * C116 + C169 * C104) *
               C47369 * C47430 +
           ((C510 - C509) * C114 + (C512 - C511) * C102 + (C514 - C513) * C115 +
            (C516 - C515) * C103 + C755 * C116 + C756 * C104) *
               C47369 * C47268) *
              C47163 * C637 +
          ((C166 * C114 + C167 * C102 + (C155 - C154) * C115 +
            (C157 - C156) * C103 + C170 * C116 + C171 * C104) *
               C47369 * C47430 +
           (C533 * C114 + C534 * C102 + (C526 - C525) * C115 +
            (C528 - C527) * C103 + (C757 - C758) * C116 +
            (C759 - C760) * C104) *
               C47369 * C47268) *
              C47163 * C638 +
          ((C168 * C114 + C169 * C102 + (C159 - C158) * C115 +
            (C161 - C160) * C103 + (C162 - C163) * C116 +
            (C164 - C165) * C104) *
               C47369 * C47430 +
           (C755 * C114 + C756 * C102 + (C758 - C757) * C115 +
            (C760 - C759) * C103 + (C47384 * C751 - C113 * C750) * C116 +
            (C47384 * C753 - C113 * C752) * C104) *
               C47369 * C47268) *
              C47163 * C47465)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C47384 * C124 - C113 * C117) * C114 +
             (C47384 * C138 - C113 * C125) * C102 + (C146 - C147) * C115 +
             (C148 - C149) * C103 + C166 * C116 + C167 * C104) *
                C47369 * C47430 +
            ((C113 * C468 - C47384 * C478) * C114 +
             (C113 * C479 - C47384 * C498) * C102 + (C509 - C510) * C115 +
             (C511 - C512) * C103 + C533 * C116 + C534 * C104) *
                C47369 * C47268) *
               C1050 +
           (((C113 * C287 - C47384 * C297) * C114 +
             (C113 * C298 - C47384 * C317) * C102 + (C328 - C329) * C115 +
             (C330 - C331) * C103 + C352 * C116 + C353 * C104) *
                C47369 * C47430 +
            ((C47384 * C911 - C113 * C906) * C114 +
             (C47384 * C921 - C113 * C912) * C102 + (C927 - C928) * C115 +
             (C929 - C930) * C103 + C939 * C116 + C940 * C104) *
                C47369 * C47268) *
               C1051 +
           (((C47384 * C303 - C113 * C290) * C114 +
             (C47384 * C320 - C113 * C304) * C102 + (C336 - C337) * C115 +
             (C338 - C339) * C103 + C354 * C116 + C355 * C104) *
                C47369 * C47430 +
            ((C113 * C1261 - C47384 * C1273) * C114 +
             (C113 * C1274 - C47384 * C1288) * C102 + (C1561 - C1562) * C115 +
             (C1563 - C1564) * C103 + (C1565 - C1566) * C116 +
             (C1567 - C1568) * C104) *
                C47369 * C47268) *
               C47461) *
              C47415 +
          ((((C147 - C146) * C114 + (C149 - C148) * C102 +
             (C151 - C150) * C115 + (C153 - C152) * C103 + C168 * C116 +
             C169 * C104) *
                C47369 * C47430 +
            ((C510 - C509) * C114 + (C512 - C511) * C102 +
             (C514 - C513) * C115 + (C516 - C515) * C103 + C755 * C116 +
             C756 * C104) *
                C47369 * C47268) *
               C1050 +
           (((C329 - C328) * C114 + (C331 - C330) * C102 +
             (C333 - C332) * C115 + (C335 - C334) * C103 + C645 * C116 +
             C646 * C104) *
                C47369 * C47430 +
            ((C928 - C927) * C114 + (C930 - C929) * C102 +
             (C932 - C931) * C115 + (C934 - C933) * C103 +
             (C935 - C936) * C116 + (C937 - C938) * C104) *
                C47369 * C47268) *
               C1051 +
           (((C337 - C336) * C114 + (C339 - C338) * C102 +
             (C341 - C340) * C115 + (C343 - C342) * C103 +
             (C348 - C349) * C116 + (C350 - C351) * C104) *
                C47369 * C47430 +
            ((C1562 - C1561) * C114 + (C1564 - C1563) * C102 +
             (C1566 - C1565) * C115 + (C1568 - C1567) * C103 +
             (C47384 * C1557 - C113 * C1556) * C116 +
             (C47384 * C1559 - C113 * C1558) * C104) *
                C47369 * C47268) *
               C47461) *
              C47146)) /
            (p * q * std::sqrt(p + q));
    d2ee[24] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C47384 * C124 - C113 * C117) * C114 +
           (C47384 * C138 - C113 * C125) * C102 + (C146 - C147) * C115 +
           (C148 - C149) * C103 + C166 * C116 + C167 * C104) *
              C47369 * C47181 * C47163 * C108 +
          ((C147 - C146) * C114 + (C149 - C148) * C102 + (C151 - C150) * C115 +
           (C153 - C152) * C103 + C168 * C116 + C169 * C104) *
              C47369 * C47181 * C47163 * C109 +
          (C166 * C114 + C167 * C102 + (C155 - C154) * C115 +
           (C157 - C156) * C103 + C170 * C116 + C171 * C104) *
              C47369 * C47181 * C47163 * C110 +
          (C168 * C114 + C169 * C102 + (C159 - C158) * C115 +
           (C161 - C160) * C103 + (C162 - C163) * C116 + (C164 - C165) * C104) *
              C47369 * C47181 * C47163 * C111 +
          (C170 * C114 + C171 * C102 + (C163 - C162) * C115 +
           (C165 - C164) * C103 + (C47384 * C136 - C113 * C123) * C116 +
           (C47384 * C144 - C113 * C137) * C104) *
              C47369 * C47181 * C47163 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C47384 * C124 - C113 * C117) * C114 +
            (C47384 * C138 - C113 * C125) * C102 + (C146 - C147) * C115 +
            (C148 - C149) * C103 + C166 * C116 + C167 * C104) *
               C47369 * C47181 * C47500 +
           ((C113 * C287 - C47384 * C297) * C114 +
            (C113 * C298 - C47384 * C317) * C102 + (C328 - C329) * C115 +
            (C330 - C331) * C103 + C352 * C116 + C353 * C104) *
               C47369 * C47181 * C47488 +
           ((C47384 * C303 - C113 * C290) * C114 +
            (C47384 * C320 - C113 * C304) * C102 + (C336 - C337) * C115 +
            (C338 - C339) * C103 + C354 * C116 + C355 * C104) *
               C47369 * C47181 * C47461) *
              C284 +
          (((C147 - C146) * C114 + (C149 - C148) * C102 + (C151 - C150) * C115 +
            (C153 - C152) * C103 + C168 * C116 + C169 * C104) *
               C47369 * C47181 * C47500 +
           ((C329 - C328) * C114 + (C331 - C330) * C102 + (C333 - C332) * C115 +
            (C335 - C334) * C103 + (C344 - C345) * C116 +
            (C346 - C347) * C104) *
               C47369 * C47181 * C47488 +
           ((C337 - C336) * C114 + (C339 - C338) * C102 + (C341 - C340) * C115 +
            (C343 - C342) * C103 + (C348 - C349) * C116 +
            (C350 - C351) * C104) *
               C47369 * C47181 * C47461) *
              C285 +
          ((C166 * C114 + C167 * C102 + (C155 - C154) * C115 +
            (C157 - C156) * C103 + C170 * C116 + C171 * C104) *
               C47369 * C47181 * C47500 +
           (C352 * C114 + C353 * C102 + (C345 - C344) * C115 +
            (C347 - C346) * C103 + (C113 * C295 - C47384 * C313) * C116 +
            (C113 * C314 - C47384 * C325) * C104) *
               C47369 * C47181 * C47488 +
           (C354 * C114 + C355 * C102 + (C349 - C348) * C115 +
            (C351 - C350) * C103 + (C47384 * C315 - C113 * C296) * C116 +
            (C47384 * C326 - C113 * C316) * C104) *
               C47369 * C47181 * C47461) *
              C47455)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C47384 * C124 - C113 * C117) * C114 +
            (C47384 * C138 - C113 * C125) * C102 + (C146 - C147) * C115 +
            (C148 - C149) * C103 + C166 * C116 + C167 * C104) *
               C47369 * C47181 * C1050 +
           ((C113 * C287 - C47384 * C297) * C114 +
            (C113 * C298 - C47384 * C317) * C102 + (C328 - C329) * C115 +
            (C330 - C331) * C103 + C352 * C116 + C353 * C104) *
               C47369 * C47181 * C1051 +
           ((C47384 * C303 - C113 * C290) * C114 +
            (C47384 * C320 - C113 * C304) * C102 + (C336 - C337) * C115 +
            (C338 - C339) * C103 + C354 * C116 + C355 * C104) *
               C47369 * C47181 * C47461) *
              C47497 +
          (((C147 - C146) * C114 + (C149 - C148) * C102 + (C151 - C150) * C115 +
            (C153 - C152) * C103 + C168 * C116 + C169 * C104) *
               C47369 * C47181 * C1050 +
           ((C329 - C328) * C114 + (C331 - C330) * C102 + (C333 - C332) * C115 +
            (C335 - C334) * C103 + C645 * C116 + C646 * C104) *
               C47369 * C47181 * C1051 +
           ((C337 - C336) * C114 + (C339 - C338) * C102 + (C341 - C340) * C115 +
            (C343 - C342) * C103 + (C348 - C349) * C116 +
            (C350 - C351) * C104) *
               C47369 * C47181 * C47461) *
              C47484 +
          ((C166 * C114 + C167 * C102 + (C155 - C154) * C115 +
            (C157 - C156) * C103 + C170 * C116 + C171 * C104) *
               C47369 * C47181 * C1050 +
           (C352 * C114 + C353 * C102 + (C345 - C344) * C115 +
            (C347 - C346) * C103 + (C647 - C648) * C116 +
            (C649 - C650) * C104) *
               C47369 * C47181 * C1051 +
           (C354 * C114 + C355 * C102 + (C349 - C348) * C115 +
            (C351 - C350) * C103 + (C47384 * C315 - C113 * C296) * C116 +
            (C47384 * C326 - C113 * C316) * C104) *
               C47369 * C47181 * C47461) *
              C47455)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C47384 * C124 - C113 * C117) * C114 +
           (C47384 * C138 - C113 * C125) * C102 + (C146 - C147) * C115 +
           (C148 - C149) * C103 + C166 * C116 + C167 * C104) *
              C47369 * C47181 * C1118 +
          ((C113 * C287 - C47384 * C297) * C114 +
           (C113 * C298 - C47384 * C317) * C102 + (C328 - C329) * C115 +
           (C330 - C331) * C103 + C352 * C116 + C353 * C104) *
              C47369 * C47181 * C1119 +
          ((C47384 * C303 - C113 * C290) * C114 +
           (C47384 * C320 - C113 * C304) * C102 + (C336 - C337) * C115 +
           (C338 - C339) * C103 + C354 * C116 + C355 * C104) *
              C47369 * C47181 * C1120 +
          ((C113 * C1124 - C47384 * C1130) * C114 +
           (C113 * C1131 - C47384 * C1142) * C102 +
           (C113 * C1125 - C47384 * C1132) * C115 +
           (C113 * C1133 - C47384 * C1143) * C103 +
           (C113 * C1126 - C47384 * C1134) * C116 +
           (C113 * C1135 - C47384 * C1144) * C104) *
              C47369 * C47181 * C1121 +
          ((C47384 * C1136 - C113 * C1127) * C114 +
           (C47384 * C1145 - C113 * C1137) * C102 +
           (C47384 * C1138 - C113 * C1128) * C115 +
           (C47384 * C1146 - C113 * C1139) * C103 +
           (C47384 * C1140 - C113 * C1129) * C116 +
           (C47384 * C1147 - C113 * C1141) * C104) *
              C47369 * C47181 * C1122) *
         C47135) /
            (p * q * std::sqrt(p + q));
    d2ee[25] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C47384 * C124 - C113 * C117) * C4719 +
             (C47384 * C138 - C113 * C125) * C4715 + (C146 - C147) * C4720 +
             (C148 - C149) * C47448) *
                C4717 +
            ((C4868 - C4869) * C4719 + (C4870 - C4871) * C4715 + C4872 * C4720 +
             C4873 * C47448) *
                C47479) *
               C47181 * C47222 +
           (((C4869 - C4868) * C4719 + (C4871 - C4870) * C4715 + C4874 * C4720 +
             C4875 * C47448) *
                C4717 +
            ((C4876 - C4877) * C4719 + (C4878 - C4879) * C4715 + C4880 * C4720 +
             C4881 * C47448) *
                C47479) *
               C47181 * C47229 +
           (((C4877 - C4876) * C4719 + (C4879 - C4878) * C4715 + C4882 * C4720 +
             C4883 * C47448) *
                C4717 +
            ((C5736 - C5737) * C4719 + (C5738 - C5739) * C4715 + C6048 * C4720 +
             C6049 * C47448) *
                C47479) *
               C47181 * C2840) *
              C47140 +
          ((((C147 - C146) * C4719 + (C149 - C148) * C4715 +
             (C151 - C150) * C4720 + (C153 - C152) * C47448) *
                C4717 +
            (C4874 * C4719 + C4875 * C4715 + C352 * C4720 + C353 * C47448) *
                C47479) *
               C47181 * C47222 +
           ((C4872 * C4719 + C4873 * C4715 + C4884 * C4720 + C4885 * C47448) *
                C4717 +
            (C4882 * C4719 + C4883 * C4715 + C354 * C4720 + C355 * C47448) *
                C47479) *
               C47181 * C47229 +
           ((C4880 * C4719 + C4881 * C4715 + C4886 * C4720 + C4887 * C47448) *
                C4717 +
            (C6050 * C4719 + C6051 * C4715 + (C1407 - C1408) * C4720 +
             (C1409 - C1410) * C47448) *
                C47479) *
               C47181 * C2840) *
              C47149 +
          (((C166 * C4719 + C167 * C4715 + (C155 - C154) * C4720 +
             (C157 - C156) * C47448) *
                C4717 +
            (C4884 * C4719 + C4885 * C4715 + C645 * C4720 + C646 * C47448) *
                C47479) *
               C47181 * C47222 +
           ((C352 * C4719 + C353 * C4715 + C5164 * C4720 + C5165 * C47448) *
                C4717 +
            (C4886 * C4719 + C4887 * C4715 + (C348 - C349) * C4720 +
             (C350 - C351) * C47448) *
                C47479) *
               C47181 * C47229 +
           ((C354 * C4719 + C355 * C4715 + (C349 - C348) * C4720 +
             (C351 - C350) * C47448) *
                C4717 +
            ((C1408 - C1407) * C4719 + (C1410 - C1409) * C4715 +
             (C47384 * C1399 - C113 * C1398) * C4720 +
             (C47384 * C1401 - C113 * C1400) * C47448) *
                C47479) *
               C47181 * C2840) *
              C2843)) /
        (p * q * std::sqrt(p + q));
    d2ee[26] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C47384 * C124 - C113 * C117) * C4719 +
              (C47384 * C138 - C113 * C125) * C4715 + (C146 - C147) * C4720 +
              (C148 - C149) * C47448) *
                 C4717 +
             ((C4868 - C4869) * C4719 + (C4870 - C4871) * C4715 +
              C4872 * C4720 + C4873 * C47448) *
                 C47479) *
                C47430 +
            (((C113 * C468 - C47384 * C478) * C4719 +
              (C113 * C479 - C47384 * C498) * C4715 + (C509 - C510) * C4720 +
              (C511 - C512) * C47448) *
                 C4717 +
             ((C5490 - C5491) * C4719 + (C5492 - C5493) * C4715 +
              C5494 * C4720 + C5495 * C47448) *
                 C47479) *
                C47268) *
               C47222 +
           ((((C4869 - C4868) * C4719 + (C4871 - C4870) * C4715 +
              C4874 * C4720 + C4875 * C47448) *
                 C4717 +
             ((C4876 - C4877) * C4719 + (C4878 - C4879) * C4715 +
              C4880 * C4720 + C4881 * C47448) *
                 C47479) *
                C47430 +
            (((C5491 - C5490) * C4719 + (C5493 - C5492) * C4715 +
              C5496 * C4720 + C5497 * C47448) *
                 C4717 +
             ((C5906 - C5907) * C4719 + (C5908 - C5909) * C4715 +
              C6246 * C4720 + C6247 * C47448) *
                 C47479) *
                C47268) *
               C47229 +
           ((((C4877 - C4876) * C4719 + (C4879 - C4878) * C4715 +
              C4882 * C4720 + C4883 * C47448) *
                 C4717 +
             ((C5736 - C5737) * C4719 + (C5738 - C5739) * C4715 +
              C6048 * C4720 + C6049 * C47448) *
                 C47479) *
                C47430 +
            (((C5907 - C5906) * C4719 + (C5909 - C5908) * C4715 +
              C6248 * C4720 + C6249 * C47448) *
                 C4717 +
             ((C6392 - C6393) * C4719 + (C6394 - C6395) * C4715 +
              (C6250 - C6251) * C4720 + (C6252 - C6253) * C47448) *
                 C47479) *
                C47268) *
               C2840) *
              C2580 +
          (((((C147 - C146) * C4719 + (C149 - C148) * C4715 +
              (C151 - C150) * C4720 + (C153 - C152) * C47448) *
                 C4717 +
             (C4874 * C4719 + C4875 * C4715 + C352 * C4720 + C353 * C47448) *
                 C47479) *
                C47430 +
            (((C510 - C509) * C4719 + (C512 - C511) * C4715 +
              (C514 - C513) * C4720 + (C516 - C515) * C47448) *
                 C4717 +
             (C5496 * C4719 + C5497 * C4715 + C939 * C4720 + C940 * C47448) *
                 C47479) *
                C47268) *
               C47222 +
           (((C4872 * C4719 + C4873 * C4715 + C4884 * C4720 + C4885 * C47448) *
                 C4717 +
             (C4882 * C4719 + C4883 * C4715 + C354 * C4720 + C355 * C47448) *
                 C47479) *
                C47430 +
            ((C5494 * C4719 + C5495 * C4715 + C5498 * C4720 + C5499 * C47448) *
                 C4717 +
             (C6248 * C4719 + C6249 * C4715 + (C1565 - C1566) * C4720 +
              (C1567 - C1568) * C47448) *
                 C47479) *
                C47268) *
               C47229 +
           (((C4880 * C4719 + C4881 * C4715 + C4886 * C4720 + C4887 * C47448) *
                 C4717 +
             (C6050 * C4719 + C6051 * C4715 + (C1407 - C1408) * C4720 +
              (C1409 - C1410) * C47448) *
                 C47479) *
                C47430 +
            ((C6246 * C4719 + C6247 * C4715 + (C1566 - C1565) * C4720 +
              (C1568 - C1567) * C47448) *
                 C4717 +
             ((C6251 - C6250) * C4719 + (C6253 - C6252) * C4715 +
              (C47384 * C1673 - C113 * C1668) * C4720 +
              (C47384 * C1677 - C113 * C1674) * C47448) *
                 C47479) *
                C47268) *
               C2840) *
              C47146)) /
        (p * q * std::sqrt(p + q));
    d2ee[27] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C47384 * C124 - C113 * C117) * C4719 +
             (C47384 * C138 - C113 * C125) * C4715 + (C146 - C147) * C4720 +
             (C148 - C149) * C47448) *
                C4717 +
            ((C4868 - C4869) * C4719 + (C4870 - C4871) * C4715 + C4872 * C4720 +
             C4873 * C47448) *
                C47479) *
               C47181 * C47507 +
           (((C4869 - C4868) * C4719 + (C4871 - C4870) * C4715 + C4874 * C4720 +
             C4875 * C47448) *
                C4717 +
            ((C4876 - C4877) * C4719 + (C4878 - C4879) * C4715 + C4880 * C4720 +
             C4881 * C47448) *
                C47479) *
               C47181 * C47503 +
           (((C4877 - C4876) * C4719 + (C4879 - C4878) * C4715 + C4882 * C4720 +
             C4883 * C47448) *
                C4717 +
            ((C5736 - C5737) * C4719 + (C5738 - C5739) * C4715 + C6048 * C4720 +
             C6049 * C47448) *
                C47479) *
               C47181 * C47493 +
           (((C5737 - C5736) * C4719 + (C5739 - C5738) * C4715 + C6050 * C4720 +
             C6051 * C47448) *
                C4717 +
            ((C5740 - C5741) * C4719 + (C5742 - C5743) * C4715 +
             (C5744 - C5745) * C4720 + (C5746 - C5747) * C47448) *
                C47479) *
               C47181 * C47471) *
              C2580 +
          ((((C147 - C146) * C4719 + (C149 - C148) * C4715 +
             (C151 - C150) * C4720 + (C153 - C152) * C47448) *
                C4717 +
            (C4874 * C4719 + C4875 * C4715 + C352 * C4720 + C353 * C47448) *
                C47479) *
               C47181 * C47507 +
           ((C4872 * C4719 + C4873 * C4715 + C4884 * C4720 + C4885 * C47448) *
                C4717 +
            (C4882 * C4719 + C4883 * C4715 + C354 * C4720 + C355 * C47448) *
                C47479) *
               C47181 * C47503 +
           ((C4880 * C4719 + C4881 * C4715 + C4886 * C4720 + C4887 * C47448) *
                C4717 +
            (C6050 * C4719 + C6051 * C4715 + (C1407 - C1408) * C4720 +
             (C1409 - C1410) * C47448) *
                C47479) *
               C47181 * C47493 +
           ((C6048 * C4719 + C6049 * C4715 + (C1408 - C1407) * C4720 +
             (C1410 - C1409) * C47448) *
                C4717 +
            ((C5745 - C5744) * C4719 + (C5747 - C5746) * C4715 +
             (C47384 * C1140 - C113 * C1129) * C4720 +
             (C47384 * C1147 - C113 * C1141) * C47448) *
                C47479) *
               C47181 * C47471) *
              C47146)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C47384 * C124 - C113 * C117) * C4719 +
             (C47384 * C138 - C113 * C125) * C4715 + (C146 - C147) * C4720 +
             (C148 - C149) * C47448) *
                C4717 +
            ((C4868 - C4869) * C4719 + (C4870 - C4871) * C4715 + C4872 * C4720 +
             C4873 * C47448) *
                C47479) *
               C47181 * C2472 +
           (((C4869 - C4868) * C4719 + (C4871 - C4870) * C4715 + C4874 * C4720 +
             C4875 * C47448) *
                C4717 +
            ((C4876 - C4877) * C4719 + (C4878 - C4879) * C4715 + C4880 * C4720 +
             C4881 * C47448) *
                C47479) *
               C47181 * C47226) *
              C47506 +
          ((((C147 - C146) * C4719 + (C149 - C148) * C4715 +
             (C151 - C150) * C4720 + (C153 - C152) * C47448) *
                C4717 +
            (C4874 * C4719 + C4875 * C4715 + C352 * C4720 + C353 * C47448) *
                C47479) *
               C47181 * C2472 +
           ((C4872 * C4719 + C4873 * C4715 + C4884 * C4720 + C4885 * C47448) *
                C4717 +
            (C4882 * C4719 + C4883 * C4715 + C354 * C4720 + C355 * C47448) *
                C47479) *
               C47181 * C47226) *
              C47499 +
          (((C166 * C4719 + C167 * C4715 + (C155 - C154) * C4720 +
             (C157 - C156) * C47448) *
                C4717 +
            (C4884 * C4719 + C4885 * C4715 + C645 * C4720 + C646 * C47448) *
                C47479) *
               C47181 * C2472 +
           ((C352 * C4719 + C353 * C4715 + C5164 * C4720 + C5165 * C47448) *
                C4717 +
            (C4886 * C4719 + C4887 * C4715 + (C348 - C349) * C4720 +
             (C350 - C351) * C47448) *
                C47479) *
               C47181 * C47226) *
              C47486 +
          (((C168 * C4719 + C169 * C4715 + (C159 - C158) * C4720 +
             (C161 - C160) * C47448) *
                C4717 +
            (C5164 * C4719 + C5165 * C4715 + (C647 - C648) * C4720 +
             (C649 - C650) * C47448) *
                C47479) *
               C47181 * C2472 +
           ((C645 * C4719 + C646 * C4715 + (C648 - C647) * C4720 +
             (C650 - C649) * C47448) *
                C4717 +
            ((C349 - C348) * C4719 + (C351 - C350) * C4715 +
             (C47384 * C315 - C113 * C296) * C4720 +
             (C47384 * C326 - C113 * C316) * C47448) *
                C47479) *
               C47181 * C47226) *
              C47465)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C47384 * C124 - C113 * C117) * C4719 +
              (C47384 * C138 - C113 * C125) * C4715 + (C146 - C147) * C4720 +
              (C148 - C149) * C47448) *
                 C4717 +
             ((C4868 - C4869) * C4719 + (C4870 - C4871) * C4715 +
              C4872 * C4720 + C4873 * C47448) *
                 C47479) *
                C47501 +
            (((C113 * C468 - C47384 * C478) * C4719 +
              (C113 * C479 - C47384 * C498) * C4715 + (C509 - C510) * C4720 +
              (C511 - C512) * C47448) *
                 C4717 +
             ((C5490 - C5491) * C4719 + (C5492 - C5493) * C4715 +
              C5494 * C4720 + C5495 * C47448) *
                 C47479) *
                C47490 +
            (((C47384 * C484 - C113 * C471) * C4719 +
              (C47384 * C501 - C113 * C485) * C4715 + (C517 - C518) * C4720 +
              (C519 - C520) * C47448) *
                 C4717 +
             ((C5902 - C5903) * C4719 + (C5904 - C5905) * C4715 +
              C6972 * C4720 + C6973 * C47448) *
                 C47479) *
                C47464) *
               C2472 +
           ((((C4869 - C4868) * C4719 + (C4871 - C4870) * C4715 +
              C4874 * C4720 + C4875 * C47448) *
                 C4717 +
             ((C4876 - C4877) * C4719 + (C4878 - C4879) * C4715 +
              C4880 * C4720 + C4881 * C47448) *
                 C47479) *
                C47501 +
            (((C5491 - C5490) * C4719 + (C5493 - C5492) * C4715 +
              C5496 * C4720 + C5497 * C47448) *
                 C4717 +
             ((C5906 - C5907) * C4719 + (C5908 - C5909) * C4715 +
              C6246 * C4720 + C6247 * C47448) *
                 C47479) *
                C47490 +
            (((C5903 - C5902) * C4719 + (C5905 - C5904) * C4715 +
              C6974 * C4720 + C6975 * C47448) *
                 C4717 +
             ((C5910 - C5911) * C4719 + (C5912 - C5913) * C4715 +
              (C5914 - C5915) * C4720 + (C5916 - C5917) * C47448) *
                 C47479) *
                C47464) *
               C47226) *
              C2580 +
          (((((C147 - C146) * C4719 + (C149 - C148) * C4715 +
              (C151 - C150) * C4720 + (C153 - C152) * C47448) *
                 C4717 +
             (C4874 * C4719 + C4875 * C4715 + C352 * C4720 + C353 * C47448) *
                 C47479) *
                C47501 +
            (((C510 - C509) * C4719 + (C512 - C511) * C4715 +
              (C514 - C513) * C4720 + (C516 - C515) * C47448) *
                 C4717 +
             (C5496 * C4719 + C5497 * C4715 + C939 * C4720 + C940 * C47448) *
                 C47479) *
                C47490 +
            (((C518 - C517) * C4719 + (C520 - C519) * C4715 +
              (C522 - C521) * C4720 + (C524 - C523) * C47448) *
                 C4717 +
             (C6974 * C4719 + C6975 * C4715 + (C2147 - C2148) * C4720 +
              (C2149 - C2150) * C47448) *
                 C47479) *
                C47464) *
               C2472 +
           (((C4872 * C4719 + C4873 * C4715 + C4884 * C4720 + C4885 * C47448) *
                 C4717 +
             (C4882 * C4719 + C4883 * C4715 + C354 * C4720 + C355 * C47448) *
                 C47479) *
                C47501 +
            ((C5494 * C4719 + C5495 * C4715 + C5498 * C4720 + C5499 * C47448) *
                 C4717 +
             (C6248 * C4719 + C6249 * C4715 + (C1565 - C1566) * C4720 +
              (C1567 - C1568) * C47448) *
                 C47479) *
                C47490 +
            ((C6972 * C4719 + C6973 * C4715 + (C2148 - C2147) * C4720 +
              (C2150 - C2149) * C47448) *
                 C4717 +
             ((C5915 - C5914) * C4719 + (C5917 - C5916) * C4715 +
              (C47384 * C1283 - C113 * C1266) * C4720 +
              (C47384 * C1293 - C113 * C1284) * C47448) *
                 C47479) *
                C47464) *
               C47226) *
              C47146)) /
            (p * q * std::sqrt(p + q));
    d2ee[28] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C47384 * C124 - C113 * C117) * C4719 +
              (C47384 * C138 - C113 * C125) * C4715 + (C146 - C147) * C4720 +
              (C148 - C149) * C47448) *
                 C4717 +
             ((C4868 - C4869) * C4719 + (C4870 - C4871) * C4715 +
              C4872 * C4720 + C4873 * C47448) *
                 C47479) *
                C47430 +
            (((C113 * C468 - C47384 * C478) * C4719 +
              (C113 * C479 - C47384 * C498) * C4715 + (C509 - C510) * C4720 +
              (C511 - C512) * C47448) *
                 C4717 +
             ((C5490 - C5491) * C4719 + (C5492 - C5493) * C4715 +
              C5494 * C4720 + C5495 * C47448) *
                 C47479) *
                C47268) *
               C2472 +
           ((((C4869 - C4868) * C4719 + (C4871 - C4870) * C4715 +
              C4874 * C4720 + C4875 * C47448) *
                 C4717 +
             ((C4876 - C4877) * C4719 + (C4878 - C4879) * C4715 +
              C4880 * C4720 + C4881 * C47448) *
                 C47479) *
                C47430 +
            (((C5491 - C5490) * C4719 + (C5493 - C5492) * C4715 +
              C5496 * C4720 + C5497 * C47448) *
                 C4717 +
             ((C5906 - C5907) * C4719 + (C5908 - C5909) * C4715 +
              C6246 * C4720 + C6247 * C47448) *
                 C47479) *
                C47268) *
               C47226) *
              C47140 +
          (((((C147 - C146) * C4719 + (C149 - C148) * C4715 +
              (C151 - C150) * C4720 + (C153 - C152) * C47448) *
                 C4717 +
             (C4874 * C4719 + C4875 * C4715 + C352 * C4720 + C353 * C47448) *
                 C47479) *
                C47430 +
            (((C510 - C509) * C4719 + (C512 - C511) * C4715 +
              (C514 - C513) * C4720 + (C516 - C515) * C47448) *
                 C4717 +
             (C5496 * C4719 + C5497 * C4715 + C939 * C4720 + C940 * C47448) *
                 C47479) *
                C47268) *
               C2472 +
           (((C4872 * C4719 + C4873 * C4715 + C4884 * C4720 + C4885 * C47448) *
                 C4717 +
             (C4882 * C4719 + C4883 * C4715 + C354 * C4720 + C355 * C47448) *
                 C47479) *
                C47430 +
            ((C5494 * C4719 + C5495 * C4715 + C5498 * C4720 + C5499 * C47448) *
                 C4717 +
             (C6248 * C4719 + C6249 * C4715 + (C1565 - C1566) * C4720 +
              (C1567 - C1568) * C47448) *
                 C47479) *
                C47268) *
               C47226) *
              C47149 +
          ((((C166 * C4719 + C167 * C4715 + (C155 - C154) * C4720 +
              (C157 - C156) * C47448) *
                 C4717 +
             (C4884 * C4719 + C4885 * C4715 + C645 * C4720 + C646 * C47448) *
                 C47479) *
                C47430 +
            ((C533 * C4719 + C534 * C4715 + (C526 - C525) * C4720 +
              (C528 - C527) * C47448) *
                 C4717 +
             (C5498 * C4719 + C5499 * C4715 + (C935 - C936) * C4720 +
              (C937 - C938) * C47448) *
                 C47479) *
                C47268) *
               C2472 +
           (((C352 * C4719 + C353 * C4715 + C5164 * C4720 + C5165 * C47448) *
                 C4717 +
             (C4886 * C4719 + C4887 * C4715 + (C348 - C349) * C4720 +
              (C350 - C351) * C47448) *
                 C47479) *
                C47430 +
            ((C939 * C4719 + C940 * C4715 + (C936 - C935) * C4720 +
              (C938 - C937) * C47448) *
                 C4717 +
             ((C1566 - C1565) * C4719 + (C1568 - C1567) * C4715 +
              (C47384 * C1557 - C113 * C1556) * C4720 +
              (C47384 * C1559 - C113 * C1558) * C47448) *
                 C47479) *
                C47268) *
               C47226) *
              C2843)) /
        (p * q * std::sqrt(p + q));
    d2ee[29] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C47384 * C124 - C113 * C117) * C4719 +
             (C47384 * C138 - C113 * C125) * C4715 + (C146 - C147) * C4720 +
             (C148 - C149) * C47448) *
                C4717 +
            ((C4868 - C4869) * C4719 + (C4870 - C4871) * C4715 + C4872 * C4720 +
             C4873 * C47448) *
                C47479) *
               C47181 * C2472 +
           (((C4869 - C4868) * C4719 + (C4871 - C4870) * C4715 + C4874 * C4720 +
             C4875 * C47448) *
                C4717 +
            ((C4876 - C4877) * C4719 + (C4878 - C4879) * C4715 + C4880 * C4720 +
             C4881 * C47448) *
                C47479) *
               C47181 * C47226) *
              C47506 +
          ((((C147 - C146) * C4719 + (C149 - C148) * C4715 +
             (C151 - C150) * C4720 + (C153 - C152) * C47448) *
                C4717 +
            (C4874 * C4719 + C4875 * C4715 + C352 * C4720 + C353 * C47448) *
                C47479) *
               C47181 * C2472 +
           ((C4872 * C4719 + C4873 * C4715 + C4884 * C4720 + C4885 * C47448) *
                C4717 +
            (C4882 * C4719 + C4883 * C4715 + C354 * C4720 + C355 * C47448) *
                C47479) *
               C47181 * C47226) *
              C47499 +
          (((C166 * C4719 + C167 * C4715 + (C155 - C154) * C4720 +
             (C157 - C156) * C47448) *
                C4717 +
            (C4884 * C4719 + C4885 * C4715 + C645 * C4720 + C646 * C47448) *
                C47479) *
               C47181 * C2472 +
           ((C352 * C4719 + C353 * C4715 + C5164 * C4720 + C5165 * C47448) *
                C4717 +
            (C4886 * C4719 + C4887 * C4715 + (C348 - C349) * C4720 +
             (C350 - C351) * C47448) *
                C47479) *
               C47181 * C47226) *
              C47486 +
          (((C168 * C4719 + C169 * C4715 + (C159 - C158) * C4720 +
             (C161 - C160) * C47448) *
                C4717 +
            (C5164 * C4719 + C5165 * C4715 + (C647 - C648) * C4720 +
             (C649 - C650) * C47448) *
                C47479) *
               C47181 * C2472 +
           ((C645 * C4719 + C646 * C4715 + (C648 - C647) * C4720 +
             (C650 - C649) * C47448) *
                C4717 +
            ((C349 - C348) * C4719 + (C351 - C350) * C4715 +
             (C47384 * C315 - C113 * C296) * C4720 +
             (C47384 * C326 - C113 * C316) * C47448) *
                C47479) *
               C47181 * C47226) *
              C47465)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C47384 * C124 - C113 * C117) * C4719 +
             (C47384 * C138 - C113 * C125) * C4715 + (C146 - C147) * C4720 +
             (C148 - C149) * C47448) *
                C4717 +
            ((C4868 - C4869) * C4719 + (C4870 - C4871) * C4715 + C4872 * C4720 +
             C4873 * C47448) *
                C47479) *
               C47181 * C47507 +
           (((C4869 - C4868) * C4719 + (C4871 - C4870) * C4715 + C4874 * C4720 +
             C4875 * C47448) *
                C4717 +
            ((C4876 - C4877) * C4719 + (C4878 - C4879) * C4715 + C4880 * C4720 +
             C4881 * C47448) *
                C47479) *
               C47181 * C47503 +
           (((C4877 - C4876) * C4719 + (C4879 - C4878) * C4715 + C4882 * C4720 +
             C4883 * C47448) *
                C4717 +
            ((C5736 - C5737) * C4719 + (C5738 - C5739) * C4715 + C6048 * C4720 +
             C6049 * C47448) *
                C47479) *
               C47181 * C47493 +
           (((C5737 - C5736) * C4719 + (C5739 - C5738) * C4715 + C6050 * C4720 +
             C6051 * C47448) *
                C4717 +
            ((C5740 - C5741) * C4719 + (C5742 - C5743) * C4715 +
             (C5744 - C5745) * C4720 + (C5746 - C5747) * C47448) *
                C47479) *
               C47181 * C47471) *
              C2580 +
          ((((C147 - C146) * C4719 + (C149 - C148) * C4715 +
             (C151 - C150) * C4720 + (C153 - C152) * C47448) *
                C4717 +
            (C4874 * C4719 + C4875 * C4715 + C352 * C4720 + C353 * C47448) *
                C47479) *
               C47181 * C47507 +
           ((C4872 * C4719 + C4873 * C4715 + C4884 * C4720 + C4885 * C47448) *
                C4717 +
            (C4882 * C4719 + C4883 * C4715 + C354 * C4720 + C355 * C47448) *
                C47479) *
               C47181 * C47503 +
           ((C4880 * C4719 + C4881 * C4715 + C4886 * C4720 + C4887 * C47448) *
                C4717 +
            (C6050 * C4719 + C6051 * C4715 + (C1407 - C1408) * C4720 +
             (C1409 - C1410) * C47448) *
                C47479) *
               C47181 * C47493 +
           ((C6048 * C4719 + C6049 * C4715 + (C1408 - C1407) * C4720 +
             (C1410 - C1409) * C47448) *
                C4717 +
            ((C5745 - C5744) * C4719 + (C5747 - C5746) * C4715 +
             (C47384 * C1140 - C113 * C1129) * C4720 +
             (C47384 * C1147 - C113 * C1141) * C47448) *
                C47479) *
               C47181 * C47471) *
              C47146)) /
            (p * q * std::sqrt(p + q));
    d2ee[30] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C47384 * C124 - C113 * C117) * C4719 +
              (C47384 * C138 - C113 * C125) * C4715 + (C146 - C147) * C4720 +
              (C148 - C149) * C47448) *
                 C4717 +
             ((C4868 - C4869) * C4719 + (C4870 - C4871) * C4715 +
              C4872 * C4720 + C4873 * C47448) *
                 C47479) *
                C3234 +
            (((C113 * C468 - C47384 * C478) * C4719 +
              (C113 * C479 - C47384 * C498) * C4715 + (C509 - C510) * C4720 +
              (C511 - C512) * C47448) *
                 C4717 +
             ((C5490 - C5491) * C4719 + (C5492 - C5493) * C4715 +
              C5494 * C4720 + C5495 * C47448) *
                 C47479) *
                C47268) *
               C47222 +
           ((((C4869 - C4868) * C4719 + (C4871 - C4870) * C4715 +
              C4874 * C4720 + C4875 * C47448) *
                 C4717 +
             ((C4876 - C4877) * C4719 + (C4878 - C4879) * C4715 +
              C4880 * C4720 + C4881 * C47448) *
                 C47479) *
                C3234 +
            (((C5491 - C5490) * C4719 + (C5493 - C5492) * C4715 +
              C5496 * C4720 + C5497 * C47448) *
                 C4717 +
             ((C5906 - C5907) * C4719 + (C5908 - C5909) * C4715 +
              C6246 * C4720 + C6247 * C47448) *
                 C47479) *
                C47268) *
               C47229 +
           ((((C4877 - C4876) * C4719 + (C4879 - C4878) * C4715 +
              C4882 * C4720 + C4883 * C47448) *
                 C4717 +
             ((C5736 - C5737) * C4719 + (C5738 - C5739) * C4715 +
              C6048 * C4720 + C6049 * C47448) *
                 C47479) *
                C3234 +
            (((C5907 - C5906) * C4719 + (C5909 - C5908) * C4715 +
              C6248 * C4720 + C6249 * C47448) *
                 C4717 +
             ((C6392 - C6393) * C4719 + (C6394 - C6395) * C4715 +
              (C6250 - C6251) * C4720 + (C6252 - C6253) * C47448) *
                 C47479) *
                C47268) *
               C2840) *
              C47415 +
          (((((C147 - C146) * C4719 + (C149 - C148) * C4715 +
              (C151 - C150) * C4720 + (C153 - C152) * C47448) *
                 C4717 +
             (C4874 * C4719 + C4875 * C4715 + C352 * C4720 + C353 * C47448) *
                 C47479) *
                C3234 +
            (((C510 - C509) * C4719 + (C512 - C511) * C4715 +
              (C514 - C513) * C4720 + (C516 - C515) * C47448) *
                 C4717 +
             (C5496 * C4719 + C5497 * C4715 + C939 * C4720 + C940 * C47448) *
                 C47479) *
                C47268) *
               C47222 +
           (((C4872 * C4719 + C4873 * C4715 + C4884 * C4720 + C4885 * C47448) *
                 C4717 +
             (C4882 * C4719 + C4883 * C4715 + C354 * C4720 + C355 * C47448) *
                 C47479) *
                C3234 +
            ((C5494 * C4719 + C5495 * C4715 + C5498 * C4720 + C5499 * C47448) *
                 C4717 +
             (C6248 * C4719 + C6249 * C4715 + (C1565 - C1566) * C4720 +
              (C1567 - C1568) * C47448) *
                 C47479) *
                C47268) *
               C47229 +
           (((C4880 * C4719 + C4881 * C4715 + C4886 * C4720 + C4887 * C47448) *
                 C4717 +
             (C6050 * C4719 + C6051 * C4715 + (C1407 - C1408) * C4720 +
              (C1409 - C1410) * C47448) *
                 C47479) *
                C3234 +
            ((C6246 * C4719 + C6247 * C4715 + (C1566 - C1565) * C4720 +
              (C1568 - C1567) * C47448) *
                 C4717 +
             ((C6251 - C6250) * C4719 + (C6253 - C6252) * C4715 +
              (C47384 * C1673 - C113 * C1668) * C4720 +
              (C47384 * C1677 - C113 * C1674) * C47448) *
                 C47479) *
                C47268) *
               C2840) *
              C47146)) /
        (p * q * std::sqrt(p + q));
    d2ee[31] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 (((((C47384 * C124 - C113 * C117) * C4719 +
                     (C47384 * C138 - C113 * C125) * C4715 +
                     (C146 - C147) * C4720 + (C148 - C149) * C47448) *
                        C4717 +
                    ((C4868 - C4869) * C4719 + (C4870 - C4871) * C4715 +
                     C4872 * C4720 + C4873 * C47448) *
                        C47479) *
                       C47264 +
                   (((C113 * C468 - C47384 * C478) * C4719 +
                     (C113 * C479 - C47384 * C498) * C4715 +
                     (C509 - C510) * C4720 + (C511 - C512) * C47448) *
                        C4717 +
                    ((C5490 - C5491) * C4719 + (C5492 - C5493) * C4715 +
                     C5494 * C4720 + C5495 * C47448) *
                        C47479) *
                       C47271 +
                   (((C47384 * C484 - C113 * C471) * C4719 +
                     (C47384 * C501 - C113 * C485) * C4715 +
                     (C517 - C518) * C4720 + (C519 - C520) * C47448) *
                        C4717 +
                    ((C5902 - C5903) * C4719 + (C5904 - C5905) * C4715 +
                     C6972 * C4720 + C6973 * C47448) *
                        C47479) *
                       C3742) *
                      C47222 +
                  ((((C4869 - C4868) * C4719 + (C4871 - C4870) * C4715 +
                     C4874 * C4720 + C4875 * C47448) *
                        C4717 +
                    ((C4876 - C4877) * C4719 + (C4878 - C4879) * C4715 +
                     C4880 * C4720 + C4881 * C47448) *
                        C47479) *
                       C47264 +
                   (((C5491 - C5490) * C4719 + (C5493 - C5492) * C4715 +
                     C5496 * C4720 + C5497 * C47448) *
                        C4717 +
                    ((C5906 - C5907) * C4719 + (C5908 - C5909) * C4715 +
                     C6246 * C4720 + C6247 * C47448) *
                        C47479) *
                       C47271 +
                   (((C5903 - C5902) * C4719 + (C5905 - C5904) * C4715 +
                     C6974 * C4720 + C6975 * C47448) *
                        C4717 +
                    ((C5910 - C5911) * C4719 + (C5912 - C5913) * C4715 +
                     (C5914 - C5915) * C4720 + (C5916 - C5917) * C47448) *
                        C47479) *
                       C3742) *
                      C47229 +
                  ((((C4877 - C4876) * C4719 + (C4879 - C4878) * C4715 +
                     C4882 * C4720 + C4883 * C47448) *
                        C4717 +
                    ((C5736 - C5737) * C4719 + (C5738 - C5739) * C4715 +
                     C6048 * C4720 + C6049 * C47448) *
                        C47479) *
                       C47264 +
                   (((C5907 - C5906) * C4719 + (C5909 - C5908) * C4715 +
                     C6248 * C4720 + C6249 * C47448) *
                        C4717 +
                    ((C6392 - C6393) * C4719 + (C6394 - C6395) * C4715 +
                     (C6250 - C6251) * C4720 + (C6252 - C6253) * C47448) *
                        C47479) *
                       C47271 +
                   (((C5911 - C5910) * C4719 + (C5913 - C5912) * C4715 +
                     (C5915 - C5914) * C4720 + (C5917 - C5916) * C47448) *
                        C4717 +
                    ((C47384 * C5895 - C113 * C5893) * C4719 +
                     (C47384 * C5899 - C113 * C5896) * C4715 +
                     (C47384 * C5897 - C113 * C5894) * C4720 +
                     (C47384 * C5900 - C113 * C5898) * C47448) *
                        C47479) *
                       C3742) *
                      C2840) *
                 C47135) /
                (p * q * std::sqrt(p + q));
    d2ee[32] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C47384 * C124 - C113 * C117) * C4719 +
             (C47384 * C138 - C113 * C125) * C4715 + (C146 - C147) * C4720 +
             (C148 - C149) * C47448) *
                C4717 +
            ((C4868 - C4869) * C4719 + (C4870 - C4871) * C4715 + C4872 * C4720 +
             C4873 * C47448) *
                C47479) *
               C3234 +
           (((C113 * C468 - C47384 * C478) * C4719 +
             (C113 * C479 - C47384 * C498) * C4715 + (C509 - C510) * C4720 +
             (C511 - C512) * C47448) *
                C4717 +
            ((C5490 - C5491) * C4719 + (C5492 - C5493) * C4715 + C5494 * C4720 +
             C5495 * C47448) *
                C47479) *
               C47268) *
              C47507 +
          ((((C4869 - C4868) * C4719 + (C4871 - C4870) * C4715 + C4874 * C4720 +
             C4875 * C47448) *
                C4717 +
            ((C4876 - C4877) * C4719 + (C4878 - C4879) * C4715 + C4880 * C4720 +
             C4881 * C47448) *
                C47479) *
               C3234 +
           (((C5491 - C5490) * C4719 + (C5493 - C5492) * C4715 + C5496 * C4720 +
             C5497 * C47448) *
                C4717 +
            ((C5906 - C5907) * C4719 + (C5908 - C5909) * C4715 + C6246 * C4720 +
             C6247 * C47448) *
                C47479) *
               C47268) *
              C47503 +
          ((((C4877 - C4876) * C4719 + (C4879 - C4878) * C4715 + C4882 * C4720 +
             C4883 * C47448) *
                C4717 +
            ((C5736 - C5737) * C4719 + (C5738 - C5739) * C4715 + C6048 * C4720 +
             C6049 * C47448) *
                C47479) *
               C3234 +
           (((C5907 - C5906) * C4719 + (C5909 - C5908) * C4715 + C6248 * C4720 +
             C6249 * C47448) *
                C4717 +
            ((C6392 - C6393) * C4719 + (C6394 - C6395) * C4715 +
             (C6250 - C6251) * C4720 + (C6252 - C6253) * C47448) *
                C47479) *
               C47268) *
              C47493 +
          ((((C5737 - C5736) * C4719 + (C5739 - C5738) * C4715 + C6050 * C4720 +
             C6051 * C47448) *
                C4717 +
            ((C5740 - C5741) * C4719 + (C5742 - C5743) * C4715 +
             (C5744 - C5745) * C4720 + (C5746 - C5747) * C47448) *
                C47479) *
               C3234 +
           (((C6393 - C6392) * C4719 + (C6395 - C6394) * C4715 +
             (C6251 - C6250) * C4720 + (C6253 - C6252) * C47448) *
                C4717 +
            ((C47384 * C6385 - C113 * C6383) * C4719 +
             (C47384 * C6389 - C113 * C6386) * C4715 +
             (C47384 * C6387 - C113 * C6384) * C4720 +
             (C47384 * C6390 - C113 * C6388) * C47448) *
                C47479) *
               C47268) *
              C47471) *
         C47135) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C47384 * C124 - C113 * C117) * C4719 +
              (C47384 * C138 - C113 * C125) * C4715 + (C146 - C147) * C4720 +
              (C148 - C149) * C47448) *
                 C4717 +
             ((C4868 - C4869) * C4719 + (C4870 - C4871) * C4715 +
              C4872 * C4720 + C4873 * C47448) *
                 C47479) *
                C3234 +
            (((C113 * C468 - C47384 * C478) * C4719 +
              (C113 * C479 - C47384 * C498) * C4715 + (C509 - C510) * C4720 +
              (C511 - C512) * C47448) *
                 C4717 +
             ((C5490 - C5491) * C4719 + (C5492 - C5493) * C4715 +
              C5494 * C4720 + C5495 * C47448) *
                 C47479) *
                C47268) *
               C2472 +
           ((((C4869 - C4868) * C4719 + (C4871 - C4870) * C4715 +
              C4874 * C4720 + C4875 * C47448) *
                 C4717 +
             ((C4876 - C4877) * C4719 + (C4878 - C4879) * C4715 +
              C4880 * C4720 + C4881 * C47448) *
                 C47479) *
                C3234 +
            (((C5491 - C5490) * C4719 + (C5493 - C5492) * C4715 +
              C5496 * C4720 + C5497 * C47448) *
                 C4717 +
             ((C5906 - C5907) * C4719 + (C5908 - C5909) * C4715 +
              C6246 * C4720 + C6247 * C47448) *
                 C47479) *
                C47268) *
               C47226) *
              C47497 +
          (((((C147 - C146) * C4719 + (C149 - C148) * C4715 +
              (C151 - C150) * C4720 + (C153 - C152) * C47448) *
                 C4717 +
             (C4874 * C4719 + C4875 * C4715 + C352 * C4720 + C353 * C47448) *
                 C47479) *
                C3234 +
            (((C510 - C509) * C4719 + (C512 - C511) * C4715 +
              (C514 - C513) * C4720 + (C516 - C515) * C47448) *
                 C4717 +
             (C5496 * C4719 + C5497 * C4715 + C939 * C4720 + C940 * C47448) *
                 C47479) *
                C47268) *
               C2472 +
           (((C4872 * C4719 + C4873 * C4715 + C4884 * C4720 + C4885 * C47448) *
                 C4717 +
             (C4882 * C4719 + C4883 * C4715 + C354 * C4720 + C355 * C47448) *
                 C47479) *
                C3234 +
            ((C5494 * C4719 + C5495 * C4715 + C5498 * C4720 + C5499 * C47448) *
                 C4717 +
             (C6248 * C4719 + C6249 * C4715 + (C1565 - C1566) * C4720 +
              (C1567 - C1568) * C47448) *
                 C47479) *
                C47268) *
               C47226) *
              C47484 +
          ((((C166 * C4719 + C167 * C4715 + (C155 - C154) * C4720 +
              (C157 - C156) * C47448) *
                 C4717 +
             (C4884 * C4719 + C4885 * C4715 + C645 * C4720 + C646 * C47448) *
                 C47479) *
                C3234 +
            ((C533 * C4719 + C534 * C4715 + (C526 - C525) * C4720 +
              (C528 - C527) * C47448) *
                 C4717 +
             (C5498 * C4719 + C5499 * C4715 + (C935 - C936) * C4720 +
              (C937 - C938) * C47448) *
                 C47479) *
                C47268) *
               C2472 +
           (((C352 * C4719 + C353 * C4715 + C5164 * C4720 + C5165 * C47448) *
                 C4717 +
             (C4886 * C4719 + C4887 * C4715 + (C348 - C349) * C4720 +
              (C350 - C351) * C47448) *
                 C47479) *
                C3234 +
            ((C939 * C4719 + C940 * C4715 + (C936 - C935) * C4720 +
              (C938 - C937) * C47448) *
                 C4717 +
             ((C1566 - C1565) * C4719 + (C1568 - C1567) * C4715 +
              (C47384 * C1557 - C113 * C1556) * C4720 +
              (C47384 * C1559 - C113 * C1558) * C47448) *
                 C47479) *
                C47268) *
               C47226) *
              C47455)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C47384 * C124 - C113 * C117) * C4719 +
             (C47384 * C138 - C113 * C125) * C4715 + (C146 - C147) * C4720 +
             (C148 - C149) * C47448) *
                C4717 +
            ((C4868 - C4869) * C4719 + (C4870 - C4871) * C4715 + C4872 * C4720 +
             C4873 * C47448) *
                C47479) *
               C47508 +
           (((C113 * C468 - C47384 * C478) * C4719 +
             (C113 * C479 - C47384 * C498) * C4715 + (C509 - C510) * C4720 +
             (C511 - C512) * C47448) *
                C4717 +
            ((C5490 - C5491) * C4719 + (C5492 - C5493) * C4715 + C5494 * C4720 +
             C5495 * C47448) *
                C47479) *
               C47505 +
           (((C47384 * C484 - C113 * C471) * C4719 +
             (C47384 * C501 - C113 * C485) * C4715 + (C517 - C518) * C4720 +
             (C519 - C520) * C47448) *
                C4717 +
            ((C5902 - C5903) * C4719 + (C5904 - C5905) * C4715 + C6972 * C4720 +
             C6973 * C47448) *
                C47479) *
               C47496 +
           (((C113 * C1968 - C47384 * C1974) * C4719 +
             (C113 * C1975 - C47384 * C1986) * C4715 + (C2257 - C2258) * C4720 +
             (C2259 - C2260) * C47448) *
                C4717 +
            ((C7248 - C7249) * C4719 + (C7250 - C7251) * C4715 +
             (C7106 - C7107) * C4720 + (C7108 - C7109) * C47448) *
                C47479) *
               C47477) *
              C2472 +
          ((((C4869 - C4868) * C4719 + (C4871 - C4870) * C4715 + C4874 * C4720 +
             C4875 * C47448) *
                C4717 +
            ((C4876 - C4877) * C4719 + (C4878 - C4879) * C4715 + C4880 * C4720 +
             C4881 * C47448) *
                C47479) *
               C47508 +
           (((C5491 - C5490) * C4719 + (C5493 - C5492) * C4715 + C5496 * C4720 +
             C5497 * C47448) *
                C4717 +
            ((C5906 - C5907) * C4719 + (C5908 - C5909) * C4715 + C6246 * C4720 +
             C6247 * C47448) *
                C47479) *
               C47505 +
           (((C5903 - C5902) * C4719 + (C5905 - C5904) * C4715 + C6974 * C4720 +
             C6975 * C47448) *
                C4717 +
            ((C5910 - C5911) * C4719 + (C5912 - C5913) * C4715 +
             (C5914 - C5915) * C4720 + (C5916 - C5917) * C47448) *
                C47479) *
               C47496 +
           (((C7249 - C7248) * C4719 + (C7251 - C7250) * C4715 +
             (C7107 - C7106) * C4720 + (C7109 - C7108) * C47448) *
                C4717 +
            ((C47384 * C7241 - C113 * C7239) * C4719 +
             (C47384 * C7245 - C113 * C7242) * C4715 +
             (C47384 * C7243 - C113 * C7240) * C4720 +
             (C47384 * C7246 - C113 * C7244) * C47448) *
                C47479) *
               C47477) *
              C47226) *
         C47135) /
            (p * q * std::sqrt(p + q));
    d2ee[33] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C47384 * C124 - C113 * C117) * C4719 +
              (C47384 * C138 - C113 * C125) * C4715 + (C146 - C147) * C4720 +
              (C148 - C149) * C47448) *
                 C4717 +
             ((C4868 - C4869) * C4719 + (C4870 - C4871) * C4715 +
              C4872 * C4720 + C4873 * C47448) *
                 C47479) *
                C47264 +
            (((C113 * C468 - C47384 * C478) * C4719 +
              (C113 * C479 - C47384 * C498) * C4715 + (C509 - C510) * C4720 +
              (C511 - C512) * C47448) *
                 C4717 +
             ((C5490 - C5491) * C4719 + (C5492 - C5493) * C4715 +
              C5494 * C4720 + C5495 * C47448) *
                 C47479) *
                C47271 +
            (((C47384 * C484 - C113 * C471) * C4719 +
              (C47384 * C501 - C113 * C485) * C4715 + (C517 - C518) * C4720 +
              (C519 - C520) * C47448) *
                 C4717 +
             ((C5902 - C5903) * C4719 + (C5904 - C5905) * C4715 +
              C6972 * C4720 + C6973 * C47448) *
                 C47479) *
                C3742) *
               C2472 +
           ((((C4869 - C4868) * C4719 + (C4871 - C4870) * C4715 +
              C4874 * C4720 + C4875 * C47448) *
                 C4717 +
             ((C4876 - C4877) * C4719 + (C4878 - C4879) * C4715 +
              C4880 * C4720 + C4881 * C47448) *
                 C47479) *
                C47264 +
            (((C5491 - C5490) * C4719 + (C5493 - C5492) * C4715 +
              C5496 * C4720 + C5497 * C47448) *
                 C4717 +
             ((C5906 - C5907) * C4719 + (C5908 - C5909) * C4715 +
              C6246 * C4720 + C6247 * C47448) *
                 C47479) *
                C47271 +
            (((C5903 - C5902) * C4719 + (C5905 - C5904) * C4715 +
              C6974 * C4720 + C6975 * C47448) *
                 C4717 +
             ((C5910 - C5911) * C4719 + (C5912 - C5913) * C4715 +
              (C5914 - C5915) * C4720 + (C5916 - C5917) * C47448) *
                 C47479) *
                C3742) *
               C47226) *
              C47415 +
          (((((C147 - C146) * C4719 + (C149 - C148) * C4715 +
              (C151 - C150) * C4720 + (C153 - C152) * C47448) *
                 C4717 +
             (C4874 * C4719 + C4875 * C4715 + C352 * C4720 + C353 * C47448) *
                 C47479) *
                C47264 +
            (((C510 - C509) * C4719 + (C512 - C511) * C4715 +
              (C514 - C513) * C4720 + (C516 - C515) * C47448) *
                 C4717 +
             (C5496 * C4719 + C5497 * C4715 + C939 * C4720 + C940 * C47448) *
                 C47479) *
                C47271 +
            (((C518 - C517) * C4719 + (C520 - C519) * C4715 +
              (C522 - C521) * C4720 + (C524 - C523) * C47448) *
                 C4717 +
             (C6974 * C4719 + C6975 * C4715 + (C2147 - C2148) * C4720 +
              (C2149 - C2150) * C47448) *
                 C47479) *
                C3742) *
               C2472 +
           (((C4872 * C4719 + C4873 * C4715 + C4884 * C4720 + C4885 * C47448) *
                 C4717 +
             (C4882 * C4719 + C4883 * C4715 + C354 * C4720 + C355 * C47448) *
                 C47479) *
                C47264 +
            ((C5494 * C4719 + C5495 * C4715 + C5498 * C4720 + C5499 * C47448) *
                 C4717 +
             (C6248 * C4719 + C6249 * C4715 + (C1565 - C1566) * C4720 +
              (C1567 - C1568) * C47448) *
                 C47479) *
                C47271 +
            ((C6972 * C4719 + C6973 * C4715 + (C2148 - C2147) * C4720 +
              (C2150 - C2149) * C47448) *
                 C4717 +
             ((C5915 - C5914) * C4719 + (C5917 - C5916) * C4715 +
              (C47384 * C1283 - C113 * C1266) * C4720 +
              (C47384 * C1293 - C113 * C1284) * C47448) *
                 C47479) *
                C3742) *
               C47226) *
              C47146)) /
        (p * q * std::sqrt(p + q));
    d2ee[34] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C47384 * C124 - C113 * C117) * C4719 +
              (C47384 * C138 - C113 * C125) * C4715 + (C146 - C147) * C4720 +
              (C148 - C149) * C47448) *
                 C4717 +
             ((C4868 - C4869) * C4719 + (C4870 - C4871) * C4715 +
              C4872 * C4720 + C4873 * C47448) *
                 C47479) *
                C3234 +
            (((C113 * C468 - C47384 * C478) * C4719 +
              (C113 * C479 - C47384 * C498) * C4715 + (C509 - C510) * C4720 +
              (C511 - C512) * C47448) *
                 C4717 +
             ((C5490 - C5491) * C4719 + (C5492 - C5493) * C4715 +
              C5494 * C4720 + C5495 * C47448) *
                 C47479) *
                C47268) *
               C2472 +
           ((((C4869 - C4868) * C4719 + (C4871 - C4870) * C4715 +
              C4874 * C4720 + C4875 * C47448) *
                 C4717 +
             ((C4876 - C4877) * C4719 + (C4878 - C4879) * C4715 +
              C4880 * C4720 + C4881 * C47448) *
                 C47479) *
                C3234 +
            (((C5491 - C5490) * C4719 + (C5493 - C5492) * C4715 +
              C5496 * C4720 + C5497 * C47448) *
                 C4717 +
             ((C5906 - C5907) * C4719 + (C5908 - C5909) * C4715 +
              C6246 * C4720 + C6247 * C47448) *
                 C47479) *
                C47268) *
               C47226) *
              C47497 +
          (((((C147 - C146) * C4719 + (C149 - C148) * C4715 +
              (C151 - C150) * C4720 + (C153 - C152) * C47448) *
                 C4717 +
             (C4874 * C4719 + C4875 * C4715 + C352 * C4720 + C353 * C47448) *
                 C47479) *
                C3234 +
            (((C510 - C509) * C4719 + (C512 - C511) * C4715 +
              (C514 - C513) * C4720 + (C516 - C515) * C47448) *
                 C4717 +
             (C5496 * C4719 + C5497 * C4715 + C939 * C4720 + C940 * C47448) *
                 C47479) *
                C47268) *
               C2472 +
           (((C4872 * C4719 + C4873 * C4715 + C4884 * C4720 + C4885 * C47448) *
                 C4717 +
             (C4882 * C4719 + C4883 * C4715 + C354 * C4720 + C355 * C47448) *
                 C47479) *
                C3234 +
            ((C5494 * C4719 + C5495 * C4715 + C5498 * C4720 + C5499 * C47448) *
                 C4717 +
             (C6248 * C4719 + C6249 * C4715 + (C1565 - C1566) * C4720 +
              (C1567 - C1568) * C47448) *
                 C47479) *
                C47268) *
               C47226) *
              C47484 +
          ((((C166 * C4719 + C167 * C4715 + (C155 - C154) * C4720 +
              (C157 - C156) * C47448) *
                 C4717 +
             (C4884 * C4719 + C4885 * C4715 + C645 * C4720 + C646 * C47448) *
                 C47479) *
                C3234 +
            ((C533 * C4719 + C534 * C4715 + (C526 - C525) * C4720 +
              (C528 - C527) * C47448) *
                 C4717 +
             (C5498 * C4719 + C5499 * C4715 + (C935 - C936) * C4720 +
              (C937 - C938) * C47448) *
                 C47479) *
                C47268) *
               C2472 +
           (((C352 * C4719 + C353 * C4715 + C5164 * C4720 + C5165 * C47448) *
                 C4717 +
             (C4886 * C4719 + C4887 * C4715 + (C348 - C349) * C4720 +
              (C350 - C351) * C47448) *
                 C47479) *
                C3234 +
            ((C939 * C4719 + C940 * C4715 + (C936 - C935) * C4720 +
              (C938 - C937) * C47448) *
                 C4717 +
             ((C1566 - C1565) * C4719 + (C1568 - C1567) * C4715 +
              (C47384 * C1557 - C113 * C1556) * C4720 +
              (C47384 * C1559 - C113 * C1558) * C47448) *
                 C47479) *
                C47268) *
               C47226) *
              C47455)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C47384 * C124 - C113 * C117) * C4719 +
             (C47384 * C138 - C113 * C125) * C4715 + (C146 - C147) * C4720 +
             (C148 - C149) * C47448) *
                C4717 +
            ((C4868 - C4869) * C4719 + (C4870 - C4871) * C4715 + C4872 * C4720 +
             C4873 * C47448) *
                C47479) *
               C3234 +
           (((C113 * C468 - C47384 * C478) * C4719 +
             (C113 * C479 - C47384 * C498) * C4715 + (C509 - C510) * C4720 +
             (C511 - C512) * C47448) *
                C4717 +
            ((C5490 - C5491) * C4719 + (C5492 - C5493) * C4715 + C5494 * C4720 +
             C5495 * C47448) *
                C47479) *
               C47268) *
              C47507 +
          ((((C4869 - C4868) * C4719 + (C4871 - C4870) * C4715 + C4874 * C4720 +
             C4875 * C47448) *
                C4717 +
            ((C4876 - C4877) * C4719 + (C4878 - C4879) * C4715 + C4880 * C4720 +
             C4881 * C47448) *
                C47479) *
               C3234 +
           (((C5491 - C5490) * C4719 + (C5493 - C5492) * C4715 + C5496 * C4720 +
             C5497 * C47448) *
                C4717 +
            ((C5906 - C5907) * C4719 + (C5908 - C5909) * C4715 + C6246 * C4720 +
             C6247 * C47448) *
                C47479) *
               C47268) *
              C47503 +
          ((((C4877 - C4876) * C4719 + (C4879 - C4878) * C4715 + C4882 * C4720 +
             C4883 * C47448) *
                C4717 +
            ((C5736 - C5737) * C4719 + (C5738 - C5739) * C4715 + C6048 * C4720 +
             C6049 * C47448) *
                C47479) *
               C3234 +
           (((C5907 - C5906) * C4719 + (C5909 - C5908) * C4715 + C6248 * C4720 +
             C6249 * C47448) *
                C4717 +
            ((C6392 - C6393) * C4719 + (C6394 - C6395) * C4715 +
             (C6250 - C6251) * C4720 + (C6252 - C6253) * C47448) *
                C47479) *
               C47268) *
              C47493 +
          ((((C5737 - C5736) * C4719 + (C5739 - C5738) * C4715 + C6050 * C4720 +
             C6051 * C47448) *
                C4717 +
            ((C5740 - C5741) * C4719 + (C5742 - C5743) * C4715 +
             (C5744 - C5745) * C4720 + (C5746 - C5747) * C47448) *
                C47479) *
               C3234 +
           (((C6393 - C6392) * C4719 + (C6395 - C6394) * C4715 +
             (C6251 - C6250) * C4720 + (C6253 - C6252) * C47448) *
                C4717 +
            ((C47384 * C6385 - C113 * C6383) * C4719 +
             (C47384 * C6389 - C113 * C6386) * C4715 +
             (C47384 * C6387 - C113 * C6384) * C4720 +
             (C47384 * C6390 - C113 * C6388) * C47448) *
                C47479) *
               C47268) *
              C47471) *
         C47135) /
            (p * q * std::sqrt(p + q));
    d2ee[35] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C47384 * C124 - C113 * C117) * C4719 +
             (C47384 * C138 - C113 * C125) * C4715 + (C146 - C147) * C4720 +
             (C148 - C149) * C47448) *
                C4717 +
            ((C4868 - C4869) * C4719 + (C4870 - C4871) * C4715 + C4872 * C4720 +
             C4873 * C47448) *
                C47479) *
               C47181 * C1392 +
           (((C4869 - C4868) * C4719 + (C4871 - C4870) * C4715 + C4874 * C4720 +
             C4875 * C47448) *
                C4717 +
            ((C4876 - C4877) * C4719 + (C4878 - C4879) * C4715 + C4880 * C4720 +
             C4881 * C47448) *
                C47479) *
               C47181 * C1393 +
           (((C4877 - C4876) * C4719 + (C4879 - C4878) * C4715 + C4882 * C4720 +
             C4883 * C47448) *
                C4717 +
            ((C5736 - C5737) * C4719 + (C5738 - C5739) * C4715 + C6048 * C4720 +
             C6049 * C47448) *
                C47479) *
               C47181 * C1394 +
           (((C5737 - C5736) * C4719 + (C5739 - C5738) * C4715 + C6050 * C4720 +
             C6051 * C47448) *
                C4717 +
            ((C5740 - C5741) * C4719 + (C5742 - C5743) * C4715 +
             (C5744 - C5745) * C4720 + (C5746 - C5747) * C47448) *
                C47479) *
               C47181 * C47471) *
              C47415 +
          ((((C147 - C146) * C4719 + (C149 - C148) * C4715 +
             (C151 - C150) * C4720 + (C153 - C152) * C47448) *
                C4717 +
            (C4874 * C4719 + C4875 * C4715 + C352 * C4720 + C353 * C47448) *
                C47479) *
               C47181 * C1392 +
           ((C4872 * C4719 + C4873 * C4715 + C4884 * C4720 + C4885 * C47448) *
                C4717 +
            (C4882 * C4719 + C4883 * C4715 + C354 * C4720 + C355 * C47448) *
                C47479) *
               C47181 * C1393 +
           ((C4880 * C4719 + C4881 * C4715 + C4886 * C4720 + C4887 * C47448) *
                C4717 +
            (C6050 * C4719 + C6051 * C4715 + (C1407 - C1408) * C4720 +
             (C1409 - C1410) * C47448) *
                C47479) *
               C47181 * C1394 +
           ((C6048 * C4719 + C6049 * C4715 + (C1408 - C1407) * C4720 +
             (C1410 - C1409) * C47448) *
                C4717 +
            ((C5745 - C5744) * C4719 + (C5747 - C5746) * C4715 +
             (C47384 * C1140 - C113 * C1129) * C4720 +
             (C47384 * C1147 - C113 * C1141) * C47448) *
                C47479) *
               C47181 * C47471) *
              C47146)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C47384 * C124 - C113 * C117) * C4719 +
             (C47384 * C138 - C113 * C125) * C4715 + (C146 - C147) * C4720 +
             (C148 - C149) * C47448) *
                C4717 +
            ((C4868 - C4869) * C4719 + (C4870 - C4871) * C4715 + C4872 * C4720 +
             C4873 * C47448) *
                C47479) *
               C47181 * C47429 +
           (((C4869 - C4868) * C4719 + (C4871 - C4870) * C4715 + C4874 * C4720 +
             C4875 * C47448) *
                C4717 +
            ((C4876 - C4877) * C4719 + (C4878 - C4879) * C4715 + C4880 * C4720 +
             C4881 * C47448) *
                C47479) *
               C47181 * C47226) *
              C636 +
          ((((C147 - C146) * C4719 + (C149 - C148) * C4715 +
             (C151 - C150) * C4720 + (C153 - C152) * C47448) *
                C4717 +
            (C4874 * C4719 + C4875 * C4715 + C352 * C4720 + C353 * C47448) *
                C47479) *
               C47181 * C47429 +
           ((C4872 * C4719 + C4873 * C4715 + C4884 * C4720 + C4885 * C47448) *
                C4717 +
            (C4882 * C4719 + C4883 * C4715 + C354 * C4720 + C355 * C47448) *
                C47479) *
               C47181 * C47226) *
              C637 +
          (((C166 * C4719 + C167 * C4715 + (C155 - C154) * C4720 +
             (C157 - C156) * C47448) *
                C4717 +
            (C4884 * C4719 + C4885 * C4715 + C645 * C4720 + C646 * C47448) *
                C47479) *
               C47181 * C47429 +
           ((C352 * C4719 + C353 * C4715 + C5164 * C4720 + C5165 * C47448) *
                C4717 +
            (C4886 * C4719 + C4887 * C4715 + (C348 - C349) * C4720 +
             (C350 - C351) * C47448) *
                C47479) *
               C47181 * C47226) *
              C638 +
          (((C168 * C4719 + C169 * C4715 + (C159 - C158) * C4720 +
             (C161 - C160) * C47448) *
                C4717 +
            (C5164 * C4719 + C5165 * C4715 + (C647 - C648) * C4720 +
             (C649 - C650) * C47448) *
                C47479) *
               C47181 * C47429 +
           ((C645 * C4719 + C646 * C4715 + (C648 - C647) * C4720 +
             (C650 - C649) * C47448) *
                C4717 +
            ((C349 - C348) * C4719 + (C351 - C350) * C4715 +
             (C47384 * C315 - C113 * C296) * C4720 +
             (C47384 * C326 - C113 * C316) * C47448) *
                C47479) *
               C47181 * C47226) *
              C47465)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C47384 * C124 - C113 * C117) * C4719 +
              (C47384 * C138 - C113 * C125) * C4715 + (C146 - C147) * C4720 +
              (C148 - C149) * C47448) *
                 C4717 +
             ((C4868 - C4869) * C4719 + (C4870 - C4871) * C4715 +
              C4872 * C4720 + C4873 * C47448) *
                 C47479) *
                C1788 +
            (((C113 * C468 - C47384 * C478) * C4719 +
              (C113 * C479 - C47384 * C498) * C4715 + (C509 - C510) * C4720 +
              (C511 - C512) * C47448) *
                 C4717 +
             ((C5490 - C5491) * C4719 + (C5492 - C5493) * C4715 +
              C5494 * C4720 + C5495 * C47448) *
                 C47479) *
                C1789 +
            (((C47384 * C484 - C113 * C471) * C4719 +
              (C47384 * C501 - C113 * C485) * C4715 + (C517 - C518) * C4720 +
              (C519 - C520) * C47448) *
                 C4717 +
             ((C5902 - C5903) * C4719 + (C5904 - C5905) * C4715 +
              C6972 * C4720 + C6973 * C47448) *
                 C47479) *
                C47464) *
               C47429 +
           ((((C4869 - C4868) * C4719 + (C4871 - C4870) * C4715 +
              C4874 * C4720 + C4875 * C47448) *
                 C4717 +
             ((C4876 - C4877) * C4719 + (C4878 - C4879) * C4715 +
              C4880 * C4720 + C4881 * C47448) *
                 C47479) *
                C1788 +
            (((C5491 - C5490) * C4719 + (C5493 - C5492) * C4715 +
              C5496 * C4720 + C5497 * C47448) *
                 C4717 +
             ((C5906 - C5907) * C4719 + (C5908 - C5909) * C4715 +
              C6246 * C4720 + C6247 * C47448) *
                 C47479) *
                C1789 +
            (((C5903 - C5902) * C4719 + (C5905 - C5904) * C4715 +
              C6974 * C4720 + C6975 * C47448) *
                 C4717 +
             ((C5910 - C5911) * C4719 + (C5912 - C5913) * C4715 +
              (C5914 - C5915) * C4720 + (C5916 - C5917) * C47448) *
                 C47479) *
                C47464) *
               C47226) *
              C47415 +
          (((((C147 - C146) * C4719 + (C149 - C148) * C4715 +
              (C151 - C150) * C4720 + (C153 - C152) * C47448) *
                 C4717 +
             (C4874 * C4719 + C4875 * C4715 + C352 * C4720 + C353 * C47448) *
                 C47479) *
                C1788 +
            (((C510 - C509) * C4719 + (C512 - C511) * C4715 +
              (C514 - C513) * C4720 + (C516 - C515) * C47448) *
                 C4717 +
             (C5496 * C4719 + C5497 * C4715 + C939 * C4720 + C940 * C47448) *
                 C47479) *
                C1789 +
            (((C518 - C517) * C4719 + (C520 - C519) * C4715 +
              (C522 - C521) * C4720 + (C524 - C523) * C47448) *
                 C4717 +
             (C6974 * C4719 + C6975 * C4715 + (C2147 - C2148) * C4720 +
              (C2149 - C2150) * C47448) *
                 C47479) *
                C47464) *
               C47429 +
           (((C4872 * C4719 + C4873 * C4715 + C4884 * C4720 + C4885 * C47448) *
                 C4717 +
             (C4882 * C4719 + C4883 * C4715 + C354 * C4720 + C355 * C47448) *
                 C47479) *
                C1788 +
            ((C5494 * C4719 + C5495 * C4715 + C5498 * C4720 + C5499 * C47448) *
                 C4717 +
             (C6248 * C4719 + C6249 * C4715 + (C1565 - C1566) * C4720 +
              (C1567 - C1568) * C47448) *
                 C47479) *
                C1789 +
            ((C6972 * C4719 + C6973 * C4715 + (C2148 - C2147) * C4720 +
              (C2150 - C2149) * C47448) *
                 C4717 +
             ((C5915 - C5914) * C4719 + (C5917 - C5916) * C4715 +
              (C47384 * C1283 - C113 * C1266) * C4720 +
              (C47384 * C1293 - C113 * C1284) * C47448) *
                 C47479) *
                C47464) *
               C47226) *
              C47146)) /
            (p * q * std::sqrt(p + q));
    d2ee[36] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C47384 * C124 - C113 * C117) * C4719 +
             (C47384 * C138 - C113 * C125) * C4715 + (C146 - C147) * C4720 +
             (C148 - C149) * C47448) *
                C4717 +
            ((C4868 - C4869) * C4719 + (C4870 - C4871) * C4715 + C4872 * C4720 +
             C4873 * C47448) *
                C47479) *
               C47430 +
           (((C113 * C468 - C47384 * C478) * C4719 +
             (C113 * C479 - C47384 * C498) * C4715 + (C509 - C510) * C4720 +
             (C511 - C512) * C47448) *
                C4717 +
            ((C5490 - C5491) * C4719 + (C5492 - C5493) * C4715 + C5494 * C4720 +
             C5495 * C47448) *
                C47479) *
               C47268) *
              C1392 +
          ((((C4869 - C4868) * C4719 + (C4871 - C4870) * C4715 + C4874 * C4720 +
             C4875 * C47448) *
                C4717 +
            ((C4876 - C4877) * C4719 + (C4878 - C4879) * C4715 + C4880 * C4720 +
             C4881 * C47448) *
                C47479) *
               C47430 +
           (((C5491 - C5490) * C4719 + (C5493 - C5492) * C4715 + C5496 * C4720 +
             C5497 * C47448) *
                C4717 +
            ((C5906 - C5907) * C4719 + (C5908 - C5909) * C4715 + C6246 * C4720 +
             C6247 * C47448) *
                C47479) *
               C47268) *
              C1393 +
          ((((C4877 - C4876) * C4719 + (C4879 - C4878) * C4715 + C4882 * C4720 +
             C4883 * C47448) *
                C4717 +
            ((C5736 - C5737) * C4719 + (C5738 - C5739) * C4715 + C6048 * C4720 +
             C6049 * C47448) *
                C47479) *
               C47430 +
           (((C5907 - C5906) * C4719 + (C5909 - C5908) * C4715 + C6248 * C4720 +
             C6249 * C47448) *
                C4717 +
            ((C6392 - C6393) * C4719 + (C6394 - C6395) * C4715 +
             (C6250 - C6251) * C4720 + (C6252 - C6253) * C47448) *
                C47479) *
               C47268) *
              C1394 +
          ((((C5737 - C5736) * C4719 + (C5739 - C5738) * C4715 + C6050 * C4720 +
             C6051 * C47448) *
                C4717 +
            ((C5740 - C5741) * C4719 + (C5742 - C5743) * C4715 +
             (C5744 - C5745) * C4720 + (C5746 - C5747) * C47448) *
                C47479) *
               C47430 +
           (((C6393 - C6392) * C4719 + (C6395 - C6394) * C4715 +
             (C6251 - C6250) * C4720 + (C6253 - C6252) * C47448) *
                C4717 +
            ((C47384 * C6385 - C113 * C6383) * C4719 +
             (C47384 * C6389 - C113 * C6386) * C4715 +
             (C47384 * C6387 - C113 * C6384) * C4720 +
             (C47384 * C6390 - C113 * C6388) * C47448) *
                C47479) *
               C47268) *
              C47471) *
         C47135) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C47384 * C124 - C113 * C117) * C4719 +
              (C47384 * C138 - C113 * C125) * C4715 + (C146 - C147) * C4720 +
              (C148 - C149) * C47448) *
                 C4717 +
             ((C4868 - C4869) * C4719 + (C4870 - C4871) * C4715 +
              C4872 * C4720 + C4873 * C47448) *
                 C47479) *
                C47430 +
            (((C113 * C468 - C47384 * C478) * C4719 +
              (C113 * C479 - C47384 * C498) * C4715 + (C509 - C510) * C4720 +
              (C511 - C512) * C47448) *
                 C4717 +
             ((C5490 - C5491) * C4719 + (C5492 - C5493) * C4715 +
              C5494 * C4720 + C5495 * C47448) *
                 C47479) *
                C47268) *
               C47429 +
           ((((C4869 - C4868) * C4719 + (C4871 - C4870) * C4715 +
              C4874 * C4720 + C4875 * C47448) *
                 C4717 +
             ((C4876 - C4877) * C4719 + (C4878 - C4879) * C4715 +
              C4880 * C4720 + C4881 * C47448) *
                 C47479) *
                C47430 +
            (((C5491 - C5490) * C4719 + (C5493 - C5492) * C4715 +
              C5496 * C4720 + C5497 * C47448) *
                 C4717 +
             ((C47384 * C1273 - C113 * C1261) * C4719 +
              (C47384 * C1288 - C113 * C1274) * C4715 +
              (C1562 - C1561) * C4720 + (C1564 - C1563) * C47448) *
                 C47479) *
                C47268) *
               C47226) *
              C284 +
          (((((C147 - C146) * C4719 + (C149 - C148) * C4715 +
              (C151 - C150) * C4720 + (C153 - C152) * C47448) *
                 C4717 +
             (C4874 * C4719 + C4875 * C4715 + C352 * C4720 + C353 * C47448) *
                 C47479) *
                C47430 +
            (((C510 - C509) * C4719 + (C512 - C511) * C4715 +
              (C514 - C513) * C4720 + (C516 - C515) * C47448) *
                 C4717 +
             (C5496 * C4719 + C5497 * C4715 + C939 * C4720 + C940 * C47448) *
                 C47479) *
                C47268) *
               C47429 +
           (((C4872 * C4719 + C4873 * C4715 + C4884 * C4720 + C4885 * C47448) *
                 C4717 +
             (C4882 * C4719 + C4883 * C4715 + C354 * C4720 + C355 * C47448) *
                 C47479) *
                C47430 +
            ((C5494 * C4719 + C5495 * C4715 + C5498 * C4720 + C5499 * C47448) *
                 C4717 +
             ((C1561 - C1562) * C4719 + (C1563 - C1564) * C4715 +
              (C1565 - C1566) * C4720 + (C1567 - C1568) * C47448) *
                 C47479) *
                C47268) *
               C47226) *
              C285 +
          ((((C166 * C4719 + C167 * C4715 + (C155 - C154) * C4720 +
              (C157 - C156) * C47448) *
                 C4717 +
             (C4884 * C4719 + C4885 * C4715 + C645 * C4720 + C646 * C47448) *
                 C47479) *
                C47430 +
            ((C533 * C4719 + C534 * C4715 + (C526 - C525) * C4720 +
              (C528 - C527) * C47448) *
                 C4717 +
             (C5498 * C4719 + C5499 * C4715 + (C935 - C936) * C4720 +
              (C937 - C938) * C47448) *
                 C47479) *
                C47268) *
               C47429 +
           (((C352 * C4719 + C353 * C4715 + C5164 * C4720 + C5165 * C47448) *
                 C4717 +
             (C4886 * C4719 + C4887 * C4715 + (C348 - C349) * C4720 +
              (C350 - C351) * C47448) *
                 C47479) *
                C47430 +
            ((C939 * C4719 + C940 * C4715 + (C936 - C935) * C4720 +
              (C938 - C937) * C47448) *
                 C4717 +
             ((C1566 - C1565) * C4719 + (C1568 - C1567) * C4715 +
              (C47384 * C1557 - C113 * C1556) * C4720 +
              (C47384 * C1559 - C113 * C1558) * C47448) *
                 C47479) *
                C47268) *
               C47226) *
              C47455)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C47384 * C124 - C113 * C117) * C4719 +
             (C47384 * C138 - C113 * C125) * C4715 + (C146 - C147) * C4720 +
             (C148 - C149) * C47448) *
                C4717 +
            ((C4868 - C4869) * C4719 + (C4870 - C4871) * C4715 + C4872 * C4720 +
             C4873 * C47448) *
                C47479) *
               C2248 +
           (((C113 * C468 - C47384 * C478) * C4719 +
             (C113 * C479 - C47384 * C498) * C4715 + (C509 - C510) * C4720 +
             (C511 - C512) * C47448) *
                C4717 +
            ((C5490 - C5491) * C4719 + (C5492 - C5493) * C4715 + C5494 * C4720 +
             C5495 * C47448) *
                C47479) *
               C2249 +
           (((C47384 * C484 - C113 * C471) * C4719 +
             (C47384 * C501 - C113 * C485) * C4715 + (C517 - C518) * C4720 +
             (C519 - C520) * C47448) *
                C4717 +
            ((C5902 - C5903) * C4719 + (C5904 - C5905) * C4715 + C6972 * C4720 +
             C6973 * C47448) *
                C47479) *
               C2250 +
           (((C113 * C1968 - C47384 * C1974) * C4719 +
             (C113 * C1975 - C47384 * C1986) * C4715 + (C2257 - C2258) * C4720 +
             (C2259 - C2260) * C47448) *
                C4717 +
            ((C7248 - C7249) * C4719 + (C7250 - C7251) * C4715 +
             (C7106 - C7107) * C4720 + (C7108 - C7109) * C47448) *
                C47479) *
               C47477) *
              C47429 +
          ((((C4869 - C4868) * C4719 + (C4871 - C4870) * C4715 + C4874 * C4720 +
             C4875 * C47448) *
                C4717 +
            ((C4876 - C4877) * C4719 + (C4878 - C4879) * C4715 + C4880 * C4720 +
             C4881 * C47448) *
                C47479) *
               C2248 +
           (((C5491 - C5490) * C4719 + (C5493 - C5492) * C4715 + C5496 * C4720 +
             C5497 * C47448) *
                C4717 +
            ((C5906 - C5907) * C4719 + (C5908 - C5909) * C4715 + C6246 * C4720 +
             C6247 * C47448) *
                C47479) *
               C2249 +
           (((C5903 - C5902) * C4719 + (C5905 - C5904) * C4715 + C6974 * C4720 +
             C6975 * C47448) *
                C4717 +
            ((C5910 - C5911) * C4719 + (C5912 - C5913) * C4715 +
             (C5914 - C5915) * C4720 + (C5916 - C5917) * C47448) *
                C47479) *
               C2250 +
           (((C7249 - C7248) * C4719 + (C7251 - C7250) * C4715 +
             (C7107 - C7106) * C4720 + (C7109 - C7108) * C47448) *
                C4717 +
            ((C47384 * C7241 - C113 * C7239) * C4719 +
             (C47384 * C7245 - C113 * C7242) * C4715 +
             (C47384 * C7243 - C113 * C7240) * C4720 +
             (C47384 * C7246 - C113 * C7244) * C47448) *
                C47479) *
               C47477) *
              C47226) *
         C47135) /
            (p * q * std::sqrt(p + q));
    d2ee[37] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C47384 * C124 - C113 * C117) * C4719 +
                (C47384 * C138 - C113 * C125) * C4715 + (C146 - C147) * C4720 +
                (C148 - C149) * C47448) *
                   C4717 +
               ((C47384 * C297 - C113 * C287) * C4719 +
                (C47384 * C317 - C113 * C298) * C4715 + (C329 - C328) * C4720 +
                (C331 - C330) * C47448) *
                   C47479) *
                  C47181 * C47163 * C108 +
              (((C147 - C146) * C4719 + (C149 - C148) * C4715 +
                (C151 - C150) * C4720 + (C153 - C152) * C47448) *
                   C4717 +
               ((C328 - C329) * C4719 + (C330 - C331) * C4715 + C352 * C4720 +
                C353 * C47448) *
                   C47479) *
                  C47181 * C47163 * C109 +
              ((C166 * C4719 + C167 * C4715 + (C155 - C154) * C4720 +
                (C157 - C156) * C47448) *
                   C4717 +
               ((C333 - C332) * C4719 + (C335 - C334) * C4715 + C645 * C4720 +
                C646 * C47448) *
                   C47479) *
                  C47181 * C47163 * C110 +
              ((C168 * C4719 + C169 * C4715 + (C159 - C158) * C4720 +
                (C161 - C160) * C47448) *
                   C4717 +
               ((C345 - C344) * C4719 + (C347 - C346) * C4715 +
                (C647 - C648) * C4720 + (C649 - C650) * C47448) *
                   C47479) *
                  C47181 * C47163 * C111 +
              ((C170 * C4719 + C171 * C4715 + (C163 - C162) * C4720 +
                (C165 - C164) * C47448) *
                   C4717 +
               ((C648 - C647) * C4719 + (C650 - C649) * C4715 +
                (C47384 * C641 - C113 * C640) * C4720 +
                (C47384 * C643 - C113 * C642) * C47448) *
                   C47479) *
                  C47181 * C47163 * C112) +
         0.5 * std::pow(Pi, 2.5) *
             (((((C47384 * C124 - C113 * C117) * C4719 +
                 (C47384 * C138 - C113 * C125) * C4715 + (C146 - C147) * C4720 +
                 (C148 - C149) * C47448) *
                    C4717 +
                ((C4868 - C4869) * C4719 + (C4870 - C4871) * C4715 +
                 C4872 * C4720 + C4873 * C47448) *
                    C47479) *
                   C47181 * C47500 +
               (((C4869 - C4868) * C4719 + (C4871 - C4870) * C4715 +
                 C4874 * C4720 + C4875 * C47448) *
                    C4717 +
                ((C4876 - C4877) * C4719 + (C4878 - C4879) * C4715 +
                 C4880 * C4720 + C4881 * C47448) *
                    C47479) *
                   C47181 * C47488 +
               (((C4877 - C4876) * C4719 + (C4879 - C4878) * C4715 +
                 C4882 * C4720 + C4883 * C47448) *
                    C4717 +
                ((C47384 * C1130 - C113 * C1124) * C4719 +
                 (C47384 * C1142 - C113 * C1131) * C4715 +
                 (C1404 - C1403) * C4720 + (C1406 - C1405) * C47448) *
                    C47479) *
                   C47181 * C47461) *
                  C284 +
              ((((C147 - C146) * C4719 + (C149 - C148) * C4715 +
                 (C151 - C150) * C4720 + (C153 - C152) * C47448) *
                    C4717 +
                (C4874 * C4719 + C4875 * C4715 + C352 * C4720 + C353 * C47448) *
                    C47479) *
                   C47181 * C47500 +
               ((C4872 * C4719 + C4873 * C4715 + C4884 * C4720 +
                 C4885 * C47448) *
                    C4717 +
                (C4882 * C4719 + C4883 * C4715 + C354 * C4720 + C355 * C47448) *
                    C47479) *
                   C47181 * C47488 +
               ((C4880 * C4719 + C4881 * C4715 + C4886 * C4720 +
                 C4887 * C47448) *
                    C4717 +
                ((C1403 - C1404) * C4719 + (C1405 - C1406) * C4715 +
                 (C1407 - C1408) * C4720 + (C1409 - C1410) * C47448) *
                    C47479) *
                   C47181 * C47461) *
                  C285 +
              (((C166 * C4719 + C167 * C4715 + (C155 - C154) * C4720 +
                 (C157 - C156) * C47448) *
                    C4717 +
                (C4884 * C4719 + C4885 * C4715 + C645 * C4720 + C646 * C47448) *
                    C47479) *
                   C47181 * C47500 +
               ((C352 * C4719 + C353 * C4715 + (C345 - C344) * C4720 +
                 (C347 - C346) * C47448) *
                    C4717 +
                (C4886 * C4719 + C4887 * C4715 + (C348 - C349) * C4720 +
                 (C350 - C351) * C47448) *
                    C47479) *
                   C47181 * C47488 +
               ((C354 * C4719 + C355 * C4715 + (C349 - C348) * C4720 +
                 (C351 - C350) * C47448) *
                    C4717 +
                ((C1408 - C1407) * C4719 + (C1410 - C1409) * C4715 +
                 (C47384 * C1399 - C113 * C1398) * C4720 +
                 (C47384 * C1401 - C113 * C1400) * C47448) *
                    C47479) *
                   C47181 * C47461) *
                  C47455)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C47384 * C124 - C113 * C117) * C4719 +
             (C47384 * C138 - C113 * C125) * C4715 + (C146 - C147) * C4720 +
             (C148 - C149) * C47448) *
                C4717 +
            ((C4868 - C4869) * C4719 + (C4870 - C4871) * C4715 + C4872 * C4720 +
             C4873 * C47448) *
                C47479) *
               C47501 +
           (((C113 * C468 - C47384 * C478) * C4719 +
             (C113 * C479 - C47384 * C498) * C4715 + (C509 - C510) * C4720 +
             (C511 - C512) * C47448) *
                C4717 +
            ((C113 * C906 - C47384 * C911) * C4719 +
             (C113 * C912 - C47384 * C921) * C4715 + (C928 - C927) * C4720 +
             (C930 - C929) * C47448) *
                C47479) *
               C47490 +
           (((C47384 * C484 - C113 * C471) * C4719 +
             (C47384 * C501 - C113 * C485) * C4715 + (C517 - C518) * C4720 +
             (C519 - C520) * C47448) *
                C4717 +
            ((C47384 * C1267 - C113 * C1258) * C4719 +
             (C47384 * C1285 - C113 * C1268) * C4715 + (C2144 - C2143) * C4720 +
             (C2146 - C2145) * C47448) *
                C47479) *
               C47464) *
              C47163 * C284 +
          ((((C147 - C146) * C4719 + (C149 - C148) * C4715 +
             (C151 - C150) * C4720 + (C153 - C152) * C47448) *
                C4717 +
            (C4874 * C4719 + C4875 * C4715 + C352 * C4720 + C353 * C47448) *
                C47479) *
               C47501 +
           (((C510 - C509) * C4719 + (C512 - C511) * C4715 +
             (C514 - C513) * C4720 + (C516 - C515) * C47448) *
                C4717 +
            ((C927 - C928) * C4719 + (C929 - C930) * C4715 + C939 * C4720 +
             C940 * C47448) *
                C47479) *
               C47490 +
           (((C518 - C517) * C4719 + (C520 - C519) * C4715 +
             (C522 - C521) * C4720 + (C524 - C523) * C47448) *
                C4717 +
            ((C2143 - C2144) * C4719 + (C2145 - C2146) * C4715 +
             (C2147 - C2148) * C4720 + (C2149 - C2150) * C47448) *
                C47479) *
               C47464) *
              C47163 * C285 +
          (((C166 * C4719 + C167 * C4715 + (C155 - C154) * C4720 +
             (C157 - C156) * C47448) *
                C4717 +
            (C4884 * C4719 + C4885 * C4715 + C645 * C4720 + C646 * C47448) *
                C47479) *
               C47501 +
           ((C533 * C4719 + C534 * C4715 + (C526 - C525) * C4720 +
             (C528 - C527) * C47448) *
                C4717 +
            ((C932 - C931) * C4719 + (C934 - C933) * C4715 +
             (C935 - C936) * C4720 + (C937 - C938) * C47448) *
                C47479) *
               C47490 +
           ((C535 * C4719 + C536 * C4715 + (C530 - C529) * C4720 +
             (C532 - C531) * C47448) *
                C4717 +
            ((C2148 - C2147) * C4719 + (C2150 - C2149) * C4715 +
             (C47384 * C2139 - C113 * C2138) * C4720 +
             (C47384 * C2141 - C113 * C2140) * C47448) *
                C47479) *
               C47464) *
              C47163 * C47455)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C47384 * C124 - C113 * C117) * C4719 +
             (C47384 * C138 - C113 * C125) * C4715 + (C146 - C147) * C4720 +
             (C148 - C149) * C47448) *
                C4717 +
            ((C4868 - C4869) * C4719 + (C4870 - C4871) * C4715 + C4872 * C4720 +
             C4873 * C47448) *
                C47479) *
               C47181 * C1050 +
           (((C4869 - C4868) * C4719 + (C4871 - C4870) * C4715 + C4874 * C4720 +
             C4875 * C47448) *
                C4717 +
            ((C4876 - C4877) * C4719 + (C4878 - C4879) * C4715 + C4880 * C4720 +
             C4881 * C47448) *
                C47479) *
               C47181 * C1051 +
           (((C4877 - C4876) * C4719 + (C4879 - C4878) * C4715 + C4882 * C4720 +
             C4883 * C47448) *
                C4717 +
            ((C47384 * C1130 - C113 * C1124) * C4719 +
             (C47384 * C1142 - C113 * C1131) * C4715 + (C1404 - C1403) * C4720 +
             (C1406 - C1405) * C47448) *
                C47479) *
               C47181 * C47461) *
              C47497 +
          ((((C147 - C146) * C4719 + (C149 - C148) * C4715 +
             (C151 - C150) * C4720 + (C153 - C152) * C47448) *
                C4717 +
            (C4874 * C4719 + C4875 * C4715 + C352 * C4720 + C353 * C47448) *
                C47479) *
               C47181 * C1050 +
           ((C4872 * C4719 + C4873 * C4715 + C4884 * C4720 + C4885 * C47448) *
                C4717 +
            (C4882 * C4719 + C4883 * C4715 + C354 * C4720 + C355 * C47448) *
                C47479) *
               C47181 * C1051 +
           ((C4880 * C4719 + C4881 * C4715 + C4886 * C4720 + C4887 * C47448) *
                C4717 +
            ((C1403 - C1404) * C4719 + (C1405 - C1406) * C4715 +
             (C1407 - C1408) * C4720 + (C1409 - C1410) * C47448) *
                C47479) *
               C47181 * C47461) *
              C47484 +
          (((C166 * C4719 + C167 * C4715 + (C155 - C154) * C4720 +
             (C157 - C156) * C47448) *
                C4717 +
            (C4884 * C4719 + C4885 * C4715 + C645 * C4720 + C646 * C47448) *
                C47479) *
               C47181 * C1050 +
           ((C352 * C4719 + C353 * C4715 + C5164 * C4720 + C5165 * C47448) *
                C4717 +
            (C4886 * C4719 + C4887 * C4715 + (C348 - C349) * C4720 +
             (C350 - C351) * C47448) *
                C47479) *
               C47181 * C1051 +
           ((C354 * C4719 + C355 * C4715 + (C349 - C348) * C4720 +
             (C351 - C350) * C47448) *
                C4717 +
            ((C1408 - C1407) * C4719 + (C1410 - C1409) * C4715 +
             (C47384 * C1399 - C113 * C1398) * C4720 +
             (C47384 * C1401 - C113 * C1400) * C47448) *
                C47479) *
               C47181 * C47461) *
              C47455)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C47384 * C124 - C113 * C117) * C4719 +
            (C47384 * C138 - C113 * C125) * C4715 + (C146 - C147) * C4720 +
            (C148 - C149) * C47448) *
               C4717 +
           ((C4868 - C4869) * C4719 + (C4870 - C4871) * C4715 + C4872 * C4720 +
            C4873 * C47448) *
               C47479) *
              C47181 * C1118 +
          (((C4869 - C4868) * C4719 + (C4871 - C4870) * C4715 + C4874 * C4720 +
            C4875 * C47448) *
               C4717 +
           ((C4876 - C4877) * C4719 + (C4878 - C4879) * C4715 + C4880 * C4720 +
            C4881 * C47448) *
               C47479) *
              C47181 * C1119 +
          (((C4877 - C4876) * C4719 + (C4879 - C4878) * C4715 + C4882 * C4720 +
            C4883 * C47448) *
               C4717 +
           ((C5736 - C5737) * C4719 + (C5738 - C5739) * C4715 +
            (C1404 - C1403) * C4720 + (C1406 - C1405) * C47448) *
               C47479) *
              C47181 * C1120 +
          (((C5737 - C5736) * C4719 + (C5739 - C5738) * C4715 +
            (C1403 - C1404) * C4720 + (C1405 - C1406) * C47448) *
               C4717 +
           ((C5740 - C5741) * C4719 + (C5742 - C5743) * C4715 +
            (C5744 - C5745) * C4720 + (C5746 - C5747) * C47448) *
               C47479) *
              C47181 * C1121 +
          (((C5741 - C5740) * C4719 + (C5743 - C5742) * C4715 +
            (C5745 - C5744) * C4720 + (C5747 - C5746) * C47448) *
               C4717 +
           ((C47384 * C5729 - C113 * C5727) * C4719 +
            (C47384 * C5733 - C113 * C5730) * C4715 +
            (C47384 * C5731 - C113 * C5728) * C4720 +
            (C47384 * C5734 - C113 * C5732) * C47448) *
               C47479) *
              C47181 * C1122) *
         C47135) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C47384 * C124 - C113 * C117) * C4719 +
             (C47384 * C138 - C113 * C125) * C4715 + (C146 - C147) * C4720 +
             (C148 - C149) * C47448) *
                C4717 +
            ((C4868 - C4869) * C4719 + (C4870 - C4871) * C4715 + C4872 * C4720 +
             C4873 * C47448) *
                C47479) *
               C47501 +
           (((C113 * C468 - C47384 * C478) * C4719 +
             (C113 * C479 - C47384 * C498) * C4715 + (C509 - C510) * C4720 +
             (C511 - C512) * C47448) *
                C4717 +
            ((C5490 - C5491) * C4719 + (C5492 - C5493) * C4715 + C5494 * C4720 +
             C5495 * C47448) *
                C47479) *
               C47490 +
           (((C47384 * C484 - C113 * C471) * C4719 +
             (C47384 * C501 - C113 * C485) * C4715 + (C517 - C518) * C4720 +
             (C519 - C520) * C47448) *
                C4717 +
            ((C5902 - C5903) * C4719 + (C5904 - C5905) * C4715 +
             (C2144 - C2143) * C4720 + (C2146 - C2145) * C47448) *
                C47479) *
               C47464) *
              C1050 +
          ((((C4869 - C4868) * C4719 + (C4871 - C4870) * C4715 + C4874 * C4720 +
             C4875 * C47448) *
                C4717 +
            ((C4876 - C4877) * C4719 + (C4878 - C4879) * C4715 + C4880 * C4720 +
             C4881 * C47448) *
                C47479) *
               C47501 +
           (((C5491 - C5490) * C4719 + (C5493 - C5492) * C4715 + C5496 * C4720 +
             C5497 * C47448) *
                C4717 +
            ((C5906 - C5907) * C4719 + (C5908 - C5909) * C4715 +
             (C1562 - C1561) * C4720 + (C1564 - C1563) * C47448) *
                C47479) *
               C47490 +
           (((C5903 - C5902) * C4719 + (C5905 - C5904) * C4715 +
             (C2143 - C2144) * C4720 + (C2145 - C2146) * C47448) *
                C4717 +
            ((C5910 - C5911) * C4719 + (C5912 - C5913) * C4715 +
             (C5914 - C5915) * C4720 + (C5916 - C5917) * C47448) *
                C47479) *
               C47464) *
              C1051 +
          ((((C4877 - C4876) * C4719 + (C4879 - C4878) * C4715 + C4882 * C4720 +
             C4883 * C47448) *
                C4717 +
            ((C5736 - C5737) * C4719 + (C5738 - C5739) * C4715 +
             (C1404 - C1403) * C4720 + (C1406 - C1405) * C47448) *
                C47479) *
               C47501 +
           (((C5907 - C5906) * C4719 + (C5909 - C5908) * C4715 +
             (C1561 - C1562) * C4720 + (C1563 - C1564) * C47448) *
                C4717 +
            ((C113 * C1666 - C47384 * C1669) * C4719 +
             (C113 * C1670 - C47384 * C1675) * C4715 +
             (C113 * C1667 - C47384 * C1671) * C4720 +
             (C113 * C1672 - C47384 * C1676) * C47448) *
                C47479) *
               C47490 +
           (((C5911 - C5910) * C4719 + (C5913 - C5912) * C4715 +
             (C5915 - C5914) * C4720 + (C5917 - C5916) * C47448) *
                C4717 +
            ((C47384 * C5895 - C113 * C5893) * C4719 +
             (C47384 * C5899 - C113 * C5896) * C4715 +
             (C47384 * C5897 - C113 * C5894) * C4720 +
             (C47384 * C5900 - C113 * C5898) * C47448) *
                C47479) *
               C47464) *
              C47461) *
         C47135) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C47384 * C124 - C113 * C117) * C4719 +
             (C47384 * C138 - C113 * C125) * C4715 + (C146 - C147) * C4720 +
             (C148 - C149) * C47448) *
                C4717 +
            ((C4868 - C4869) * C4719 + (C4870 - C4871) * C4715 + C4872 * C4720 +
             C4873 * C47448) *
                C47479) *
               C1788 +
           (((C113 * C468 - C47384 * C478) * C4719 +
             (C113 * C479 - C47384 * C498) * C4715 + (C509 - C510) * C4720 +
             (C511 - C512) * C47448) *
                C4717 +
            ((C5490 - C5491) * C4719 + (C5492 - C5493) * C4715 + C5494 * C4720 +
             C5495 * C47448) *
                C47479) *
               C1789 +
           (((C47384 * C484 - C113 * C471) * C4719 +
             (C47384 * C501 - C113 * C485) * C4715 + (C517 - C518) * C4720 +
             (C519 - C520) * C47448) *
                C4717 +
            ((C5902 - C5903) * C4719 + (C5904 - C5905) * C4715 +
             (C2144 - C2143) * C4720 + (C2146 - C2145) * C47448) *
                C47479) *
               C47464) *
              C47163 * C47497 +
          ((((C147 - C146) * C4719 + (C149 - C148) * C4715 +
             (C151 - C150) * C4720 + (C153 - C152) * C47448) *
                C4717 +
            (C4874 * C4719 + C4875 * C4715 + C352 * C4720 + C353 * C47448) *
                C47479) *
               C1788 +
           (((C510 - C509) * C4719 + (C512 - C511) * C4715 +
             (C514 - C513) * C4720 + (C516 - C515) * C47448) *
                C4717 +
            (C5496 * C4719 + C5497 * C4715 + C939 * C4720 + C940 * C47448) *
                C47479) *
               C1789 +
           (((C518 - C517) * C4719 + (C520 - C519) * C4715 +
             (C522 - C521) * C4720 + (C524 - C523) * C47448) *
                C4717 +
            ((C2143 - C2144) * C4719 + (C2145 - C2146) * C4715 +
             (C2147 - C2148) * C4720 + (C2149 - C2150) * C47448) *
                C47479) *
               C47464) *
              C47163 * C47484 +
          (((C166 * C4719 + C167 * C4715 + (C155 - C154) * C4720 +
             (C157 - C156) * C47448) *
                C4717 +
            (C4884 * C4719 + C4885 * C4715 + C645 * C4720 + C646 * C47448) *
                C47479) *
               C1788 +
           ((C533 * C4719 + C534 * C4715 + (C526 - C525) * C4720 +
             (C528 - C527) * C47448) *
                C4717 +
            (C5498 * C4719 + C5499 * C4715 + (C935 - C936) * C4720 +
             (C937 - C938) * C47448) *
                C47479) *
               C1789 +
           ((C535 * C4719 + C536 * C4715 + (C530 - C529) * C4720 +
             (C532 - C531) * C47448) *
                C4717 +
            ((C2148 - C2147) * C4719 + (C2150 - C2149) * C4715 +
             (C47384 * C2139 - C113 * C2138) * C4720 +
             (C47384 * C2141 - C113 * C2140) * C47448) *
                C47479) *
               C47464) *
              C47163 * C47455)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C47384 * C124 - C113 * C117) * C4719 +
             (C47384 * C138 - C113 * C125) * C4715 + (C146 - C147) * C4720 +
             (C148 - C149) * C47448) *
                C4717 +
            ((C4868 - C4869) * C4719 + (C4870 - C4871) * C4715 + C4872 * C4720 +
             C4873 * C47448) *
                C47479) *
               C1788 +
           (((C113 * C468 - C47384 * C478) * C4719 +
             (C113 * C479 - C47384 * C498) * C4715 + (C509 - C510) * C4720 +
             (C511 - C512) * C47448) *
                C4717 +
            ((C5490 - C5491) * C4719 + (C5492 - C5493) * C4715 + C5494 * C4720 +
             C5495 * C47448) *
                C47479) *
               C1789 +
           (((C47384 * C484 - C113 * C471) * C4719 +
             (C47384 * C501 - C113 * C485) * C4715 + (C517 - C518) * C4720 +
             (C519 - C520) * C47448) *
                C4717 +
            ((C5902 - C5903) * C4719 + (C5904 - C5905) * C4715 +
             (C2144 - C2143) * C4720 + (C2146 - C2145) * C47448) *
                C47479) *
               C47464) *
              C47500 +
          ((((C4869 - C4868) * C4719 + (C4871 - C4870) * C4715 + C4874 * C4720 +
             C4875 * C47448) *
                C4717 +
            ((C4876 - C4877) * C4719 + (C4878 - C4879) * C4715 + C4880 * C4720 +
             C4881 * C47448) *
                C47479) *
               C1788 +
           (((C5491 - C5490) * C4719 + (C5493 - C5492) * C4715 + C5496 * C4720 +
             C5497 * C47448) *
                C4717 +
            ((C5906 - C5907) * C4719 + (C5908 - C5909) * C4715 + C6246 * C4720 +
             C6247 * C47448) *
                C47479) *
               C1789 +
           (((C5903 - C5902) * C4719 + (C5905 - C5904) * C4715 +
             (C2143 - C2144) * C4720 + (C2145 - C2146) * C47448) *
                C4717 +
            ((C5910 - C5911) * C4719 + (C5912 - C5913) * C4715 +
             (C5914 - C5915) * C4720 + (C5916 - C5917) * C47448) *
                C47479) *
               C47464) *
              C47488 +
          ((((C4877 - C4876) * C4719 + (C4879 - C4878) * C4715 + C4882 * C4720 +
             C4883 * C47448) *
                C4717 +
            ((C5736 - C5737) * C4719 + (C5738 - C5739) * C4715 + C6048 * C4720 +
             C6049 * C47448) *
                C47479) *
               C1788 +
           (((C5907 - C5906) * C4719 + (C5909 - C5908) * C4715 + C6248 * C4720 +
             C6249 * C47448) *
                C4717 +
            ((C6392 - C6393) * C4719 + (C6394 - C6395) * C4715 +
             (C6250 - C6251) * C4720 + (C6252 - C6253) * C47448) *
                C47479) *
               C1789 +
           (((C5911 - C5910) * C4719 + (C5913 - C5912) * C4715 +
             (C5915 - C5914) * C4720 + (C5917 - C5916) * C47448) *
                C4717 +
            ((C47384 * C5895 - C113 * C5893) * C4719 +
             (C47384 * C5899 - C113 * C5896) * C4715 +
             (C47384 * C5897 - C113 * C5894) * C4720 +
             (C47384 * C5900 - C113 * C5898) * C47448) *
                C47479) *
               C47464) *
              C47461) *
         C47135) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C47384 * C124 - C113 * C117) * C4719 +
            (C47384 * C138 - C113 * C125) * C4715 + (C146 - C147) * C4720 +
            (C148 - C149) * C47448) *
               C4717 +
           ((C4868 - C4869) * C4719 + (C4870 - C4871) * C4715 + C4872 * C4720 +
            C4873 * C47448) *
               C47479) *
              C1963 +
          (((C113 * C468 - C47384 * C478) * C4719 +
            (C113 * C479 - C47384 * C498) * C4715 + (C509 - C510) * C4720 +
            (C511 - C512) * C47448) *
               C4717 +
           ((C5490 - C5491) * C4719 + (C5492 - C5493) * C4715 + C5494 * C4720 +
            C5495 * C47448) *
               C47479) *
              C1964 +
          (((C47384 * C484 - C113 * C471) * C4719 +
            (C47384 * C501 - C113 * C485) * C4715 + (C517 - C518) * C4720 +
            (C519 - C520) * C47448) *
               C4717 +
           ((C5902 - C5903) * C4719 + (C5904 - C5905) * C4715 +
            (C2144 - C2143) * C4720 + (C2146 - C2145) * C47448) *
               C47479) *
              C1965 +
          (((C113 * C1968 - C47384 * C1974) * C4719 +
            (C113 * C1975 - C47384 * C1986) * C4715 + (C2257 - C2258) * C4720 +
            (C2259 - C2260) * C47448) *
               C4717 +
           ((C113 * C2362 - C47384 * C2365) * C4719 +
            (C113 * C2366 - C47384 * C2371) * C4715 +
            (C113 * C2363 - C47384 * C2367) * C4720 +
            (C113 * C2368 - C47384 * C2372) * C47448) *
               C47479) *
              C1966 +
          (((C47384 * C1980 - C113 * C1971) * C4719 +
            (C47384 * C1989 - C113 * C1981) * C4715 +
            (C47384 * C1982 - C113 * C1972) * C4720 +
            (C47384 * C1990 - C113 * C1983) * C47448) *
               C4717 +
           ((C47384 * C6771 - C113 * C6769) * C4719 +
            (C47384 * C6775 - C113 * C6772) * C4715 +
            (C47384 * C6773 - C113 * C6770) * C4720 +
            (C47384 * C6776 - C113 * C6774) * C47448) *
               C47479) *
              C1967) *
         C47163 * C47135) /
            (p * q * std::sqrt(p + q));
    d2ee[38] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C47384 * C124 - C113 * C117) * C4719 +
              (C47384 * C138 - C113 * C125) * C4715 + (C146 - C147) * C4720 +
              (C148 - C149) * C47448) *
                 C4717 +
             ((C4868 - C4869) * C4719 + (C4870 - C4871) * C4715 +
              C4872 * C4720 + C4873 * C47448) *
                 C47479) *
                C47430 +
            (((C113 * C468 - C47384 * C478) * C4719 +
              (C113 * C479 - C47384 * C498) * C4715 + (C509 - C510) * C4720 +
              (C511 - C512) * C47448) *
                 C4717 +
             ((C5490 - C5491) * C4719 + (C5492 - C5493) * C4715 +
              C5494 * C4720 + C5495 * C47448) *
                 C47479) *
                C47268) *
               C1050 +
           ((((C4869 - C4868) * C4719 + (C4871 - C4870) * C4715 +
              C4874 * C4720 + C4875 * C47448) *
                 C4717 +
             ((C4876 - C4877) * C4719 + (C4878 - C4879) * C4715 +
              C4880 * C4720 + C4881 * C47448) *
                 C47479) *
                C47430 +
            (((C5491 - C5490) * C4719 + (C5493 - C5492) * C4715 +
              C5496 * C4720 + C5497 * C47448) *
                 C4717 +
             ((C5906 - C5907) * C4719 + (C5908 - C5909) * C4715 +
              C6246 * C4720 + C6247 * C47448) *
                 C47479) *
                C47268) *
               C1051 +
           ((((C4877 - C4876) * C4719 + (C4879 - C4878) * C4715 +
              C4882 * C4720 + C4883 * C47448) *
                 C4717 +
             ((C5736 - C5737) * C4719 + (C5738 - C5739) * C4715 +
              C6048 * C4720 + C6049 * C47448) *
                 C47479) *
                C47430 +
            (((C5907 - C5906) * C4719 + (C5909 - C5908) * C4715 +
              C6248 * C4720 + C6249 * C47448) *
                 C4717 +
             ((C113 * C1666 - C47384 * C1669) * C4719 +
              (C113 * C1670 - C47384 * C1675) * C4715 +
              (C6250 - C6251) * C4720 + (C6252 - C6253) * C47448) *
                 C47479) *
                C47268) *
               C47461) *
              C47415 +
          (((((C147 - C146) * C4719 + (C149 - C148) * C4715 +
              (C151 - C150) * C4720 + (C153 - C152) * C47448) *
                 C4717 +
             (C4874 * C4719 + C4875 * C4715 + C352 * C4720 + C353 * C47448) *
                 C47479) *
                C47430 +
            (((C510 - C509) * C4719 + (C512 - C511) * C4715 +
              (C514 - C513) * C4720 + (C516 - C515) * C47448) *
                 C4717 +
             (C5496 * C4719 + C5497 * C4715 + C939 * C4720 + C940 * C47448) *
                 C47479) *
                C47268) *
               C1050 +
           (((C4872 * C4719 + C4873 * C4715 + C4884 * C4720 + C4885 * C47448) *
                 C4717 +
             (C4882 * C4719 + C4883 * C4715 + C354 * C4720 + C355 * C47448) *
                 C47479) *
                C47430 +
            ((C5494 * C4719 + C5495 * C4715 + C5498 * C4720 + C5499 * C47448) *
                 C4717 +
             (C6248 * C4719 + C6249 * C4715 + (C1565 - C1566) * C4720 +
              (C1567 - C1568) * C47448) *
                 C47479) *
                C47268) *
               C1051 +
           (((C4880 * C4719 + C4881 * C4715 + C4886 * C4720 + C4887 * C47448) *
                 C4717 +
             (C6050 * C4719 + C6051 * C4715 + (C1407 - C1408) * C4720 +
              (C1409 - C1410) * C47448) *
                 C47479) *
                C47430 +
            ((C6246 * C4719 + C6247 * C4715 + (C1566 - C1565) * C4720 +
              (C1568 - C1567) * C47448) *
                 C4717 +
             ((C6251 - C6250) * C4719 + (C6253 - C6252) * C4715 +
              (C47384 * C1673 - C113 * C1668) * C4720 +
              (C47384 * C1677 - C113 * C1674) * C47448) *
                 C47479) *
                C47268) *
               C47461) *
              C47146)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C47384 * C124 - C113 * C117) * C4719 +
             (C47384 * C138 - C113 * C125) * C4715 + (C146 - C147) * C4720 +
             (C148 - C149) * C47448) *
                C4717 +
            ((C4868 - C4869) * C4719 + (C4870 - C4871) * C4715 + C4872 * C4720 +
             C4873 * C47448) *
                C47479) *
               C47430 +
           (((C113 * C468 - C47384 * C478) * C4719 +
             (C113 * C479 - C47384 * C498) * C4715 + (C509 - C510) * C4720 +
             (C511 - C512) * C47448) *
                C4717 +
            ((C113 * C906 - C47384 * C911) * C4719 +
             (C113 * C912 - C47384 * C921) * C4715 + (C928 - C927) * C4720 +
             (C930 - C929) * C47448) *
                C47479) *
               C47268) *
              C47163 * C636 +
          ((((C147 - C146) * C4719 + (C149 - C148) * C4715 +
             (C151 - C150) * C4720 + (C153 - C152) * C47448) *
                C4717 +
            (C4874 * C4719 + C4875 * C4715 + C352 * C4720 + C353 * C47448) *
                C47479) *
               C47430 +
           (((C510 - C509) * C4719 + (C512 - C511) * C4715 +
             (C514 - C513) * C4720 + (C516 - C515) * C47448) *
                C4717 +
            ((C927 - C928) * C4719 + (C929 - C930) * C4715 + C939 * C4720 +
             C940 * C47448) *
                C47479) *
               C47268) *
              C47163 * C637 +
          (((C166 * C4719 + C167 * C4715 + (C155 - C154) * C4720 +
             (C157 - C156) * C47448) *
                C4717 +
            (C4884 * C4719 + C4885 * C4715 + C645 * C4720 + C646 * C47448) *
                C47479) *
               C47430 +
           ((C533 * C4719 + C534 * C4715 + (C526 - C525) * C4720 +
             (C528 - C527) * C47448) *
                C4717 +
            ((C932 - C931) * C4719 + (C934 - C933) * C4715 +
             (C935 - C936) * C4720 + (C937 - C938) * C47448) *
                C47479) *
               C47268) *
              C47163 * C638 +
          (((C168 * C4719 + C169 * C4715 + (C159 - C158) * C4720 +
             (C161 - C160) * C47448) *
                C4717 +
            (C5164 * C4719 + C5165 * C4715 + (C647 - C648) * C4720 +
             (C649 - C650) * C47448) *
                C47479) *
               C47430 +
           ((C755 * C4719 + C756 * C4715 + (C758 - C757) * C4720 +
             (C760 - C759) * C47448) *
                C4717 +
            ((C936 - C935) * C4719 + (C938 - C937) * C4715 +
             (C47384 * C919 - C113 * C910) * C4720 +
             (C47384 * C925 - C113 * C920) * C47448) *
                C47479) *
               C47268) *
              C47163 * C47465)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C47384 * C124 - C113 * C117) * C4719 +
             (C47384 * C138 - C113 * C125) * C4715 + (C146 - C147) * C4720 +
             (C148 - C149) * C47448) *
                C4717 +
            ((C4868 - C4869) * C4719 + (C4870 - C4871) * C4715 + C4872 * C4720 +
             C4873 * C47448) *
                C47479) *
               C2248 +
           (((C113 * C468 - C47384 * C478) * C4719 +
             (C113 * C479 - C47384 * C498) * C4715 + (C509 - C510) * C4720 +
             (C511 - C512) * C47448) *
                C4717 +
            ((C5490 - C5491) * C4719 + (C5492 - C5493) * C4715 + C5494 * C4720 +
             C5495 * C47448) *
                C47479) *
               C2249 +
           (((C47384 * C484 - C113 * C471) * C4719 +
             (C47384 * C501 - C113 * C485) * C4715 + (C517 - C518) * C4720 +
             (C519 - C520) * C47448) *
                C4717 +
            ((C5902 - C5903) * C4719 + (C5904 - C5905) * C4715 + C6972 * C4720 +
             C6973 * C47448) *
                C47479) *
               C2250 +
           (((C113 * C1968 - C47384 * C1974) * C4719 +
             (C113 * C1975 - C47384 * C1986) * C4715 + (C2257 - C2258) * C4720 +
             (C2259 - C2260) * C47448) *
                C4717 +
            ((C113 * C2362 - C47384 * C2365) * C4719 +
             (C113 * C2366 - C47384 * C2371) * C4715 + (C7106 - C7107) * C4720 +
             (C7108 - C7109) * C47448) *
                C47479) *
               C47477) *
              C47163 * C47415 +
          ((((C147 - C146) * C4719 + (C149 - C148) * C4715 +
             (C151 - C150) * C4720 + (C153 - C152) * C47448) *
                C4717 +
            (C4874 * C4719 + C4875 * C4715 + C352 * C4720 + C353 * C47448) *
                C47479) *
               C2248 +
           (((C510 - C509) * C4719 + (C512 - C511) * C4715 +
             (C514 - C513) * C4720 + (C516 - C515) * C47448) *
                C4717 +
            (C5496 * C4719 + C5497 * C4715 + C939 * C4720 + C940 * C47448) *
                C47479) *
               C2249 +
           (((C518 - C517) * C4719 + (C520 - C519) * C4715 +
             (C522 - C521) * C4720 + (C524 - C523) * C47448) *
                C4717 +
            (C6974 * C4719 + C6975 * C4715 + (C2147 - C2148) * C4720 +
             (C2149 - C2150) * C47448) *
                C47479) *
               C2250 +
           (((C2258 - C2257) * C4719 + (C2260 - C2259) * C4715 +
             (C2262 - C2261) * C4720 + (C2264 - C2263) * C47448) *
                C4717 +
            ((C7107 - C7106) * C4719 + (C7109 - C7108) * C4715 +
             (C47384 * C2369 - C113 * C2364) * C4720 +
             (C47384 * C2373 - C113 * C2370) * C47448) *
                C47479) *
               C47477) *
              C47163 * C47146)) /
            (p * q * std::sqrt(p + q));
    d2ee[39] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C47384 * C124 - C113 * C117) * C4719 +
             (C47384 * C138 - C113 * C125) * C4715 + (C146 - C147) * C4720 +
             (C148 - C149) * C47448) *
                C4717 +
            ((C4868 - C4869) * C4719 + (C4870 - C4871) * C4715 + C4872 * C4720 +
             C4873 * C47448) *
                C47479) *
               C47181 * C47500 +
           (((C4869 - C4868) * C4719 + (C4871 - C4870) * C4715 + C4874 * C4720 +
             C4875 * C47448) *
                C4717 +
            ((C4876 - C4877) * C4719 + (C4878 - C4879) * C4715 + C4880 * C4720 +
             C4881 * C47448) *
                C47479) *
               C47181 * C47488 +
           (((C4877 - C4876) * C4719 + (C4879 - C4878) * C4715 + C4882 * C4720 +
             C4883 * C47448) *
                C4717 +
            ((C47384 * C1130 - C113 * C1124) * C4719 +
             (C47384 * C1142 - C113 * C1131) * C4715 + (C1404 - C1403) * C4720 +
             (C1406 - C1405) * C47448) *
                C47479) *
               C47181 * C47461) *
              C284 +
          ((((C147 - C146) * C4719 + (C149 - C148) * C4715 +
             (C151 - C150) * C4720 + (C153 - C152) * C47448) *
                C4717 +
            (C4874 * C4719 + C4875 * C4715 + C352 * C4720 + C353 * C47448) *
                C47479) *
               C47181 * C47500 +
           ((C4872 * C4719 + C4873 * C4715 + C4884 * C4720 + C4885 * C47448) *
                C4717 +
            (C4882 * C4719 + C4883 * C4715 + C354 * C4720 + C355 * C47448) *
                C47479) *
               C47181 * C47488 +
           ((C4880 * C4719 + C4881 * C4715 + C4886 * C4720 + C4887 * C47448) *
                C4717 +
            ((C1403 - C1404) * C4719 + (C1405 - C1406) * C4715 +
             (C1407 - C1408) * C4720 + (C1409 - C1410) * C47448) *
                C47479) *
               C47181 * C47461) *
              C285 +
          (((C166 * C4719 + C167 * C4715 + (C155 - C154) * C4720 +
             (C157 - C156) * C47448) *
                C4717 +
            (C4884 * C4719 + C4885 * C4715 + C645 * C4720 + C646 * C47448) *
                C47479) *
               C47181 * C47500 +
           ((C352 * C4719 + C353 * C4715 + (C345 - C344) * C4720 +
             (C347 - C346) * C47448) *
                C4717 +
            (C4886 * C4719 + C4887 * C4715 + (C348 - C349) * C4720 +
             (C350 - C351) * C47448) *
                C47479) *
               C47181 * C47488 +
           ((C354 * C4719 + C355 * C4715 + (C349 - C348) * C4720 +
             (C351 - C350) * C47448) *
                C4717 +
            ((C1408 - C1407) * C4719 + (C1410 - C1409) * C4715 +
             (C47384 * C1399 - C113 * C1398) * C4720 +
             (C47384 * C1401 - C113 * C1400) * C47448) *
                C47479) *
               C47181 * C47461) *
              C47455)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C47384 * C124 - C113 * C117) * C4719 +
            (C47384 * C138 - C113 * C125) * C4715 + (C146 - C147) * C4720 +
            (C148 - C149) * C47448) *
               C4717 +
           ((C47384 * C297 - C113 * C287) * C4719 +
            (C47384 * C317 - C113 * C298) * C4715 + (C329 - C328) * C4720 +
            (C331 - C330) * C47448) *
               C47479) *
              C47181 * C47163 * C108 +
          (((C147 - C146) * C4719 + (C149 - C148) * C4715 +
            (C151 - C150) * C4720 + (C153 - C152) * C47448) *
               C4717 +
           ((C328 - C329) * C4719 + (C330 - C331) * C4715 + C352 * C4720 +
            C353 * C47448) *
               C47479) *
              C47181 * C47163 * C109 +
          ((C166 * C4719 + C167 * C4715 + (C155 - C154) * C4720 +
            (C157 - C156) * C47448) *
               C4717 +
           ((C333 - C332) * C4719 + (C335 - C334) * C4715 + C645 * C4720 +
            C646 * C47448) *
               C47479) *
              C47181 * C47163 * C110 +
          ((C168 * C4719 + C169 * C4715 + (C159 - C158) * C4720 +
            (C161 - C160) * C47448) *
               C4717 +
           ((C345 - C344) * C4719 + (C347 - C346) * C4715 +
            (C647 - C648) * C4720 + (C649 - C650) * C47448) *
               C47479) *
              C47181 * C47163 * C111 +
          ((C170 * C4719 + C171 * C4715 + (C163 - C162) * C4720 +
            (C165 - C164) * C47448) *
               C4717 +
           ((C648 - C647) * C4719 + (C650 - C649) * C4715 +
            (C47384 * C641 - C113 * C640) * C4720 +
            (C47384 * C643 - C113 * C642) * C47448) *
               C47479) *
              C47181 * C47163 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C47384 * C124 - C113 * C117) * C4719 +
             (C47384 * C138 - C113 * C125) * C4715 + (C146 - C147) * C4720 +
             (C148 - C149) * C47448) *
                C4717 +
            ((C4868 - C4869) * C4719 + (C4870 - C4871) * C4715 + C4872 * C4720 +
             C4873 * C47448) *
                C47479) *
               C47181 * C1050 +
           (((C4869 - C4868) * C4719 + (C4871 - C4870) * C4715 + C4874 * C4720 +
             C4875 * C47448) *
                C4717 +
            ((C4876 - C4877) * C4719 + (C4878 - C4879) * C4715 + C4880 * C4720 +
             C4881 * C47448) *
                C47479) *
               C47181 * C1051 +
           (((C4877 - C4876) * C4719 + (C4879 - C4878) * C4715 + C4882 * C4720 +
             C4883 * C47448) *
                C4717 +
            ((C47384 * C1130 - C113 * C1124) * C4719 +
             (C47384 * C1142 - C113 * C1131) * C4715 + (C1404 - C1403) * C4720 +
             (C1406 - C1405) * C47448) *
                C47479) *
               C47181 * C47461) *
              C47497 +
          ((((C147 - C146) * C4719 + (C149 - C148) * C4715 +
             (C151 - C150) * C4720 + (C153 - C152) * C47448) *
                C4717 +
            (C4874 * C4719 + C4875 * C4715 + C352 * C4720 + C353 * C47448) *
                C47479) *
               C47181 * C1050 +
           ((C4872 * C4719 + C4873 * C4715 + C4884 * C4720 + C4885 * C47448) *
                C4717 +
            (C4882 * C4719 + C4883 * C4715 + C354 * C4720 + C355 * C47448) *
                C47479) *
               C47181 * C1051 +
           ((C4880 * C4719 + C4881 * C4715 + C4886 * C4720 + C4887 * C47448) *
                C4717 +
            ((C1403 - C1404) * C4719 + (C1405 - C1406) * C4715 +
             (C1407 - C1408) * C4720 + (C1409 - C1410) * C47448) *
                C47479) *
               C47181 * C47461) *
              C47484 +
          (((C166 * C4719 + C167 * C4715 + (C155 - C154) * C4720 +
             (C157 - C156) * C47448) *
                C4717 +
            (C4884 * C4719 + C4885 * C4715 + C645 * C4720 + C646 * C47448) *
                C47479) *
               C47181 * C1050 +
           ((C352 * C4719 + C353 * C4715 + C5164 * C4720 + C5165 * C47448) *
                C4717 +
            (C4886 * C4719 + C4887 * C4715 + (C348 - C349) * C4720 +
             (C350 - C351) * C47448) *
                C47479) *
               C47181 * C1051 +
           ((C354 * C4719 + C355 * C4715 + (C349 - C348) * C4720 +
             (C351 - C350) * C47448) *
                C4717 +
            ((C1408 - C1407) * C4719 + (C1410 - C1409) * C4715 +
             (C47384 * C1399 - C113 * C1398) * C4720 +
             (C47384 * C1401 - C113 * C1400) * C47448) *
                C47479) *
               C47181 * C47461) *
              C47455)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C47384 * C124 - C113 * C117) * C4719 +
            (C47384 * C138 - C113 * C125) * C4715 + (C146 - C147) * C4720 +
            (C148 - C149) * C47448) *
               C4717 +
           ((C4868 - C4869) * C4719 + (C4870 - C4871) * C4715 + C4872 * C4720 +
            C4873 * C47448) *
               C47479) *
              C47181 * C1118 +
          (((C4869 - C4868) * C4719 + (C4871 - C4870) * C4715 + C4874 * C4720 +
            C4875 * C47448) *
               C4717 +
           ((C4876 - C4877) * C4719 + (C4878 - C4879) * C4715 + C4880 * C4720 +
            C4881 * C47448) *
               C47479) *
              C47181 * C1119 +
          (((C4877 - C4876) * C4719 + (C4879 - C4878) * C4715 + C4882 * C4720 +
            C4883 * C47448) *
               C4717 +
           ((C5736 - C5737) * C4719 + (C5738 - C5739) * C4715 +
            (C1404 - C1403) * C4720 + (C1406 - C1405) * C47448) *
               C47479) *
              C47181 * C1120 +
          (((C5737 - C5736) * C4719 + (C5739 - C5738) * C4715 +
            (C1403 - C1404) * C4720 + (C1405 - C1406) * C47448) *
               C4717 +
           ((C5740 - C5741) * C4719 + (C5742 - C5743) * C4715 +
            (C5744 - C5745) * C4720 + (C5746 - C5747) * C47448) *
               C47479) *
              C47181 * C1121 +
          (((C5741 - C5740) * C4719 + (C5743 - C5742) * C4715 +
            (C5745 - C5744) * C4720 + (C5747 - C5746) * C47448) *
               C4717 +
           ((C47384 * C5729 - C113 * C5727) * C4719 +
            (C47384 * C5733 - C113 * C5730) * C4715 +
            (C47384 * C5731 - C113 * C5728) * C4720 +
            (C47384 * C5734 - C113 * C5732) * C47448) *
               C47479) *
              C47181 * C1122) *
         C47135) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C47384 * C124 - C113 * C117) * C4719 +
             (C47384 * C138 - C113 * C125) * C4715 + (C146 - C147) * C4720 +
             (C148 - C149) * C47448) *
                C4717 +
            ((C4868 - C4869) * C4719 + (C4870 - C4871) * C4715 + C4872 * C4720 +
             C4873 * C47448) *
                C47479) *
               C1788 +
           (((C113 * C468 - C47384 * C478) * C4719 +
             (C113 * C479 - C47384 * C498) * C4715 + (C509 - C510) * C4720 +
             (C511 - C512) * C47448) *
                C4717 +
            ((C5490 - C5491) * C4719 + (C5492 - C5493) * C4715 + C5494 * C4720 +
             C5495 * C47448) *
                C47479) *
               C1789 +
           (((C47384 * C484 - C113 * C471) * C4719 +
             (C47384 * C501 - C113 * C485) * C4715 + (C517 - C518) * C4720 +
             (C519 - C520) * C47448) *
                C4717 +
            ((C5902 - C5903) * C4719 + (C5904 - C5905) * C4715 +
             (C2144 - C2143) * C4720 + (C2146 - C2145) * C47448) *
                C47479) *
               C47464) *
              C47163 * C47497 +
          ((((C147 - C146) * C4719 + (C149 - C148) * C4715 +
             (C151 - C150) * C4720 + (C153 - C152) * C47448) *
                C4717 +
            (C4874 * C4719 + C4875 * C4715 + C352 * C4720 + C353 * C47448) *
                C47479) *
               C1788 +
           (((C510 - C509) * C4719 + (C512 - C511) * C4715 +
             (C514 - C513) * C4720 + (C516 - C515) * C47448) *
                C4717 +
            (C5496 * C4719 + C5497 * C4715 + C939 * C4720 + C940 * C47448) *
                C47479) *
               C1789 +
           (((C518 - C517) * C4719 + (C520 - C519) * C4715 +
             (C522 - C521) * C4720 + (C524 - C523) * C47448) *
                C4717 +
            ((C2143 - C2144) * C4719 + (C2145 - C2146) * C4715 +
             (C2147 - C2148) * C4720 + (C2149 - C2150) * C47448) *
                C47479) *
               C47464) *
              C47163 * C47484 +
          (((C166 * C4719 + C167 * C4715 + (C155 - C154) * C4720 +
             (C157 - C156) * C47448) *
                C4717 +
            (C4884 * C4719 + C4885 * C4715 + C645 * C4720 + C646 * C47448) *
                C47479) *
               C1788 +
           ((C533 * C4719 + C534 * C4715 + (C526 - C525) * C4720 +
             (C528 - C527) * C47448) *
                C4717 +
            (C5498 * C4719 + C5499 * C4715 + (C935 - C936) * C4720 +
             (C937 - C938) * C47448) *
                C47479) *
               C1789 +
           ((C535 * C4719 + C536 * C4715 + (C530 - C529) * C4720 +
             (C532 - C531) * C47448) *
                C4717 +
            ((C2148 - C2147) * C4719 + (C2150 - C2149) * C4715 +
             (C47384 * C2139 - C113 * C2138) * C4720 +
             (C47384 * C2141 - C113 * C2140) * C47448) *
                C47479) *
               C47464) *
              C47163 * C47455)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C47384 * C124 - C113 * C117) * C4719 +
             (C47384 * C138 - C113 * C125) * C4715 + (C146 - C147) * C4720 +
             (C148 - C149) * C47448) *
                C4717 +
            ((C4868 - C4869) * C4719 + (C4870 - C4871) * C4715 + C4872 * C4720 +
             C4873 * C47448) *
                C47479) *
               C1788 +
           (((C113 * C468 - C47384 * C478) * C4719 +
             (C113 * C479 - C47384 * C498) * C4715 + (C509 - C510) * C4720 +
             (C511 - C512) * C47448) *
                C4717 +
            ((C5490 - C5491) * C4719 + (C5492 - C5493) * C4715 + C5494 * C4720 +
             C5495 * C47448) *
                C47479) *
               C1789 +
           (((C47384 * C484 - C113 * C471) * C4719 +
             (C47384 * C501 - C113 * C485) * C4715 + (C517 - C518) * C4720 +
             (C519 - C520) * C47448) *
                C4717 +
            ((C5902 - C5903) * C4719 + (C5904 - C5905) * C4715 +
             (C2144 - C2143) * C4720 + (C2146 - C2145) * C47448) *
                C47479) *
               C47464) *
              C47500 +
          ((((C4869 - C4868) * C4719 + (C4871 - C4870) * C4715 + C4874 * C4720 +
             C4875 * C47448) *
                C4717 +
            ((C4876 - C4877) * C4719 + (C4878 - C4879) * C4715 + C4880 * C4720 +
             C4881 * C47448) *
                C47479) *
               C1788 +
           (((C5491 - C5490) * C4719 + (C5493 - C5492) * C4715 + C5496 * C4720 +
             C5497 * C47448) *
                C4717 +
            ((C5906 - C5907) * C4719 + (C5908 - C5909) * C4715 + C6246 * C4720 +
             C6247 * C47448) *
                C47479) *
               C1789 +
           (((C5903 - C5902) * C4719 + (C5905 - C5904) * C4715 +
             (C2143 - C2144) * C4720 + (C2145 - C2146) * C47448) *
                C4717 +
            ((C5910 - C5911) * C4719 + (C5912 - C5913) * C4715 +
             (C5914 - C5915) * C4720 + (C5916 - C5917) * C47448) *
                C47479) *
               C47464) *
              C47488 +
          ((((C4877 - C4876) * C4719 + (C4879 - C4878) * C4715 + C4882 * C4720 +
             C4883 * C47448) *
                C4717 +
            ((C5736 - C5737) * C4719 + (C5738 - C5739) * C4715 + C6048 * C4720 +
             C6049 * C47448) *
                C47479) *
               C1788 +
           (((C5907 - C5906) * C4719 + (C5909 - C5908) * C4715 + C6248 * C4720 +
             C6249 * C47448) *
                C4717 +
            ((C6392 - C6393) * C4719 + (C6394 - C6395) * C4715 +
             (C6250 - C6251) * C4720 + (C6252 - C6253) * C47448) *
                C47479) *
               C1789 +
           (((C5911 - C5910) * C4719 + (C5913 - C5912) * C4715 +
             (C5915 - C5914) * C4720 + (C5917 - C5916) * C47448) *
                C4717 +
            ((C47384 * C5895 - C113 * C5893) * C4719 +
             (C47384 * C5899 - C113 * C5896) * C4715 +
             (C47384 * C5897 - C113 * C5894) * C4720 +
             (C47384 * C5900 - C113 * C5898) * C47448) *
                C47479) *
               C47464) *
              C47461) *
         C47135) /
            (p * q * std::sqrt(p + q));
    d2ee[40] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C47384 * C124 - C113 * C117) * C4719 +
              (C47384 * C138 - C113 * C125) * C4715 + (C146 - C147) * C4720 +
              (C148 - C149) * C47448) *
                 C4717 +
             ((C4868 - C4869) * C4719 + (C4870 - C4871) * C4715 +
              C4872 * C4720 + C4873 * C47448) *
                 C47479) *
                C3234 +
            (((C113 * C468 - C47384 * C478) * C4719 +
              (C113 * C479 - C47384 * C498) * C4715 + (C509 - C510) * C4720 +
              (C511 - C512) * C47448) *
                 C4717 +
             ((C5490 - C5491) * C4719 + (C5492 - C5493) * C4715 +
              C5494 * C4720 + C5495 * C47448) *
                 C47479) *
                C47268) *
               C47429 +
           ((((C4869 - C4868) * C4719 + (C4871 - C4870) * C4715 +
              C4874 * C4720 + C4875 * C47448) *
                 C4717 +
             ((C4876 - C4877) * C4719 + (C4878 - C4879) * C4715 +
              C4880 * C4720 + C4881 * C47448) *
                 C47479) *
                C3234 +
            (((C5491 - C5490) * C4719 + (C5493 - C5492) * C4715 +
              C5496 * C4720 + C5497 * C47448) *
                 C4717 +
             ((C5906 - C5907) * C4719 + (C5908 - C5909) * C4715 +
              C6246 * C4720 + C6247 * C47448) *
                 C47479) *
                C47268) *
               C47226) *
              C47140 +
          (((((C147 - C146) * C4719 + (C149 - C148) * C4715 +
              (C151 - C150) * C4720 + (C153 - C152) * C47448) *
                 C4717 +
             (C4874 * C4719 + C4875 * C4715 + C352 * C4720 + C353 * C47448) *
                 C47479) *
                C3234 +
            (((C510 - C509) * C4719 + (C512 - C511) * C4715 +
              (C514 - C513) * C4720 + (C516 - C515) * C47448) *
                 C4717 +
             (C5496 * C4719 + C5497 * C4715 + C939 * C4720 + C940 * C47448) *
                 C47479) *
                C47268) *
               C47429 +
           (((C4872 * C4719 + C4873 * C4715 + C4884 * C4720 + C4885 * C47448) *
                 C4717 +
             (C4882 * C4719 + C4883 * C4715 + C354 * C4720 + C355 * C47448) *
                 C47479) *
                C3234 +
            ((C5494 * C4719 + C5495 * C4715 + C5498 * C4720 + C5499 * C47448) *
                 C4717 +
             (C6248 * C4719 + C6249 * C4715 + (C1565 - C1566) * C4720 +
              (C1567 - C1568) * C47448) *
                 C47479) *
                C47268) *
               C47226) *
              C47149 +
          ((((C166 * C4719 + C167 * C4715 + (C155 - C154) * C4720 +
              (C157 - C156) * C47448) *
                 C4717 +
             (C4884 * C4719 + C4885 * C4715 + C645 * C4720 + C646 * C47448) *
                 C47479) *
                C3234 +
            ((C533 * C4719 + C534 * C4715 + (C526 - C525) * C4720 +
              (C528 - C527) * C47448) *
                 C4717 +
             (C5498 * C4719 + C5499 * C4715 + (C935 - C936) * C4720 +
              (C937 - C938) * C47448) *
                 C47479) *
                C47268) *
               C47429 +
           (((C352 * C4719 + C353 * C4715 + C5164 * C4720 + C5165 * C47448) *
                 C4717 +
             (C4886 * C4719 + C4887 * C4715 + (C348 - C349) * C4720 +
              (C350 - C351) * C47448) *
                 C47479) *
                C3234 +
            ((C939 * C4719 + C940 * C4715 + (C936 - C935) * C4720 +
              (C938 - C937) * C47448) *
                 C4717 +
             ((C1566 - C1565) * C4719 + (C1568 - C1567) * C4715 +
              (C47384 * C1557 - C113 * C1556) * C4720 +
              (C47384 * C1559 - C113 * C1558) * C47448) *
                 C47479) *
                C47268) *
               C47226) *
              C2843)) /
        (p * q * std::sqrt(p + q));
    d2ee[41] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C47384 * C124 - C113 * C117) * C4719 +
              (C47384 * C138 - C113 * C125) * C4715 + (C146 - C147) * C4720 +
              (C148 - C149) * C47448) *
                 C4717 +
             ((C4868 - C4869) * C4719 + (C4870 - C4871) * C4715 +
              C4872 * C4720 + C4873 * C47448) *
                 C47479) *
                C47264 +
            (((C113 * C468 - C47384 * C478) * C4719 +
              (C113 * C479 - C47384 * C498) * C4715 + (C509 - C510) * C4720 +
              (C511 - C512) * C47448) *
                 C4717 +
             ((C5490 - C5491) * C4719 + (C5492 - C5493) * C4715 +
              C5494 * C4720 + C5495 * C47448) *
                 C47479) *
                C47271 +
            (((C47384 * C484 - C113 * C471) * C4719 +
              (C47384 * C501 - C113 * C485) * C4715 + (C517 - C518) * C4720 +
              (C519 - C520) * C47448) *
                 C4717 +
             ((C5902 - C5903) * C4719 + (C5904 - C5905) * C4715 +
              C6972 * C4720 + C6973 * C47448) *
                 C47479) *
                C3742) *
               C47429 +
           ((((C4869 - C4868) * C4719 + (C4871 - C4870) * C4715 +
              C4874 * C4720 + C4875 * C47448) *
                 C4717 +
             ((C4876 - C4877) * C4719 + (C4878 - C4879) * C4715 +
              C4880 * C4720 + C4881 * C47448) *
                 C47479) *
                C47264 +
            (((C5491 - C5490) * C4719 + (C5493 - C5492) * C4715 +
              C5496 * C4720 + C5497 * C47448) *
                 C4717 +
             ((C5906 - C5907) * C4719 + (C5908 - C5909) * C4715 +
              C6246 * C4720 + C6247 * C47448) *
                 C47479) *
                C47271 +
            (((C5903 - C5902) * C4719 + (C5905 - C5904) * C4715 +
              C6974 * C4720 + C6975 * C47448) *
                 C4717 +
             ((C5910 - C5911) * C4719 + (C5912 - C5913) * C4715 +
              (C5914 - C5915) * C4720 + (C5916 - C5917) * C47448) *
                 C47479) *
                C3742) *
               C47226) *
              C2580 +
          (((((C147 - C146) * C4719 + (C149 - C148) * C4715 +
              (C151 - C150) * C4720 + (C153 - C152) * C47448) *
                 C4717 +
             (C4874 * C4719 + C4875 * C4715 + C352 * C4720 + C353 * C47448) *
                 C47479) *
                C47264 +
            (((C510 - C509) * C4719 + (C512 - C511) * C4715 +
              (C514 - C513) * C4720 + (C516 - C515) * C47448) *
                 C4717 +
             (C5496 * C4719 + C5497 * C4715 + C939 * C4720 + C940 * C47448) *
                 C47479) *
                C47271 +
            (((C518 - C517) * C4719 + (C520 - C519) * C4715 +
              (C522 - C521) * C4720 + (C524 - C523) * C47448) *
                 C4717 +
             (C6974 * C4719 + C6975 * C4715 + (C2147 - C2148) * C4720 +
              (C2149 - C2150) * C47448) *
                 C47479) *
                C3742) *
               C47429 +
           (((C4872 * C4719 + C4873 * C4715 + C4884 * C4720 + C4885 * C47448) *
                 C4717 +
             (C4882 * C4719 + C4883 * C4715 + C354 * C4720 + C355 * C47448) *
                 C47479) *
                C47264 +
            ((C5494 * C4719 + C5495 * C4715 + C5498 * C4720 + C5499 * C47448) *
                 C4717 +
             (C6248 * C4719 + C6249 * C4715 + (C1565 - C1566) * C4720 +
              (C1567 - C1568) * C47448) *
                 C47479) *
                C47271 +
            ((C6972 * C4719 + C6973 * C4715 + (C2148 - C2147) * C4720 +
              (C2150 - C2149) * C47448) *
                 C4717 +
             ((C5915 - C5914) * C4719 + (C5917 - C5916) * C4715 +
              (C47384 * C1283 - C113 * C1266) * C4720 +
              (C47384 * C1293 - C113 * C1284) * C47448) *
                 C47479) *
                C3742) *
               C47226) *
              C47146)) /
        (p * q * std::sqrt(p + q));
    d2ee[42] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C47384 * C124 - C113 * C117) * C4719 +
              (C47384 * C138 - C113 * C125) * C4715 + (C146 - C147) * C4720 +
              (C148 - C149) * C47448) *
                 C4717 +
             ((C4868 - C4869) * C4719 + (C4870 - C4871) * C4715 +
              C4872 * C4720 + C4873 * C47448) *
                 C47479) *
                C3234 +
            (((C113 * C468 - C47384 * C478) * C4719 +
              (C113 * C479 - C47384 * C498) * C4715 + (C509 - C510) * C4720 +
              (C511 - C512) * C47448) *
                 C4717 +
             ((C5490 - C5491) * C4719 + (C5492 - C5493) * C4715 +
              C5494 * C4720 + C5495 * C47448) *
                 C47479) *
                C47268) *
               C47500 +
           ((((C4869 - C4868) * C4719 + (C4871 - C4870) * C4715 +
              C4874 * C4720 + C4875 * C47448) *
                 C4717 +
             ((C4876 - C4877) * C4719 + (C4878 - C4879) * C4715 +
              C4880 * C4720 + C4881 * C47448) *
                 C47479) *
                C3234 +
            (((C5491 - C5490) * C4719 + (C5493 - C5492) * C4715 +
              C5496 * C4720 + C5497 * C47448) *
                 C4717 +
             ((C5906 - C5907) * C4719 + (C5908 - C5909) * C4715 +
              C6246 * C4720 + C6247 * C47448) *
                 C47479) *
                C47268) *
               C47488 +
           ((((C4877 - C4876) * C4719 + (C4879 - C4878) * C4715 +
              C4882 * C4720 + C4883 * C47448) *
                 C4717 +
             ((C5736 - C5737) * C4719 + (C5738 - C5739) * C4715 +
              C6048 * C4720 + C6049 * C47448) *
                 C47479) *
                C3234 +
            (((C5907 - C5906) * C4719 + (C5909 - C5908) * C4715 +
              C6248 * C4720 + C6249 * C47448) *
                 C4717 +
             ((C6392 - C6393) * C4719 + (C6394 - C6395) * C4715 +
              (C6250 - C6251) * C4720 + (C6252 - C6253) * C47448) *
                 C47479) *
                C47268) *
               C47461) *
              C2580 +
          (((((C147 - C146) * C4719 + (C149 - C148) * C4715 +
              (C151 - C150) * C4720 + (C153 - C152) * C47448) *
                 C4717 +
             (C4874 * C4719 + C4875 * C4715 + C352 * C4720 + C353 * C47448) *
                 C47479) *
                C3234 +
            (((C510 - C509) * C4719 + (C512 - C511) * C4715 +
              (C514 - C513) * C4720 + (C516 - C515) * C47448) *
                 C4717 +
             (C5496 * C4719 + C5497 * C4715 + C939 * C4720 + C940 * C47448) *
                 C47479) *
                C47268) *
               C47500 +
           (((C4872 * C4719 + C4873 * C4715 + C4884 * C4720 + C4885 * C47448) *
                 C4717 +
             (C4882 * C4719 + C4883 * C4715 + C354 * C4720 + C355 * C47448) *
                 C47479) *
                C3234 +
            ((C5494 * C4719 + C5495 * C4715 + C5498 * C4720 + C5499 * C47448) *
                 C4717 +
             (C6248 * C4719 + C6249 * C4715 + (C1565 - C1566) * C4720 +
              (C1567 - C1568) * C47448) *
                 C47479) *
                C47268) *
               C47488 +
           (((C4880 * C4719 + C4881 * C4715 + C4886 * C4720 + C4887 * C47448) *
                 C4717 +
             (C6050 * C4719 + C6051 * C4715 + (C1407 - C1408) * C4720 +
              (C1409 - C1410) * C47448) *
                 C47479) *
                C3234 +
            ((C6246 * C4719 + C6247 * C4715 + (C1566 - C1565) * C4720 +
              (C1568 - C1567) * C47448) *
                 C4717 +
             ((C6251 - C6250) * C4719 + (C6253 - C6252) * C4715 +
              (C47384 * C1673 - C113 * C1668) * C4720 +
              (C47384 * C1677 - C113 * C1674) * C47448) *
                 C47479) *
                C47268) *
               C47461) *
              C47146)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C47384 * C124 - C113 * C117) * C4719 +
             (C47384 * C138 - C113 * C125) * C4715 + (C146 - C147) * C4720 +
             (C148 - C149) * C47448) *
                C4717 +
            ((C4868 - C4869) * C4719 + (C4870 - C4871) * C4715 + C4872 * C4720 +
             C4873 * C47448) *
                C47479) *
               C3234 +
           (((C113 * C468 - C47384 * C478) * C4719 +
             (C113 * C479 - C47384 * C498) * C4715 + (C509 - C510) * C4720 +
             (C511 - C512) * C47448) *
                C4717 +
            ((C5490 - C5491) * C4719 + (C5492 - C5493) * C4715 + C5494 * C4720 +
             C5495 * C47448) *
                C47479) *
               C47268) *
              C47163 * C47506 +
          ((((C147 - C146) * C4719 + (C149 - C148) * C4715 +
             (C151 - C150) * C4720 + (C153 - C152) * C47448) *
                C4717 +
            (C4874 * C4719 + C4875 * C4715 + C352 * C4720 + C353 * C47448) *
                C47479) *
               C3234 +
           (((C510 - C509) * C4719 + (C512 - C511) * C4715 +
             (C514 - C513) * C4720 + (C516 - C515) * C47448) *
                C4717 +
            (C5496 * C4719 + C5497 * C4715 + C939 * C4720 + C940 * C47448) *
                C47479) *
               C47268) *
              C47163 * C47499 +
          (((C166 * C4719 + C167 * C4715 + (C155 - C154) * C4720 +
             (C157 - C156) * C47448) *
                C4717 +
            (C4884 * C4719 + C4885 * C4715 + C645 * C4720 + C646 * C47448) *
                C47479) *
               C3234 +
           ((C533 * C4719 + C534 * C4715 + (C526 - C525) * C4720 +
             (C528 - C527) * C47448) *
                C4717 +
            (C5498 * C4719 + C5499 * C4715 + (C935 - C936) * C4720 +
             (C937 - C938) * C47448) *
                C47479) *
               C47268) *
              C47163 * C47486 +
          (((C168 * C4719 + C169 * C4715 + (C159 - C158) * C4720 +
             (C161 - C160) * C47448) *
                C4717 +
            (C5164 * C4719 + C5165 * C4715 + (C647 - C648) * C4720 +
             (C649 - C650) * C47448) *
                C47479) *
               C3234 +
           ((C755 * C4719 + C756 * C4715 + (C758 - C757) * C4720 +
             (C760 - C759) * C47448) *
                C4717 +
            ((C936 - C935) * C4719 + (C938 - C937) * C4715 +
             (C47384 * C919 - C113 * C910) * C4720 +
             (C47384 * C925 - C113 * C920) * C47448) *
                C47479) *
               C47268) *
              C47163 * C47465)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C47384 * C124 - C113 * C117) * C4719 +
             (C47384 * C138 - C113 * C125) * C4715 + (C146 - C147) * C4720 +
             (C148 - C149) * C47448) *
                C4717 +
            ((C4868 - C4869) * C4719 + (C4870 - C4871) * C4715 + C4872 * C4720 +
             C4873 * C47448) *
                C47479) *
               C47508 +
           (((C113 * C468 - C47384 * C478) * C4719 +
             (C113 * C479 - C47384 * C498) * C4715 + (C509 - C510) * C4720 +
             (C511 - C512) * C47448) *
                C4717 +
            ((C5490 - C5491) * C4719 + (C5492 - C5493) * C4715 + C5494 * C4720 +
             C5495 * C47448) *
                C47479) *
               C47505 +
           (((C47384 * C484 - C113 * C471) * C4719 +
             (C47384 * C501 - C113 * C485) * C4715 + (C517 - C518) * C4720 +
             (C519 - C520) * C47448) *
                C4717 +
            ((C5902 - C5903) * C4719 + (C5904 - C5905) * C4715 + C6972 * C4720 +
             C6973 * C47448) *
                C47479) *
               C47496 +
           (((C113 * C1968 - C47384 * C1974) * C4719 +
             (C113 * C1975 - C47384 * C1986) * C4715 + (C2257 - C2258) * C4720 +
             (C2259 - C2260) * C47448) *
                C4717 +
            ((C7248 - C7249) * C4719 + (C7250 - C7251) * C4715 +
             (C7106 - C7107) * C4720 + (C7108 - C7109) * C47448) *
                C47479) *
               C47477) *
              C47163 * C2580 +
          ((((C147 - C146) * C4719 + (C149 - C148) * C4715 +
             (C151 - C150) * C4720 + (C153 - C152) * C47448) *
                C4717 +
            (C4874 * C4719 + C4875 * C4715 + C352 * C4720 + C353 * C47448) *
                C47479) *
               C47508 +
           (((C510 - C509) * C4719 + (C512 - C511) * C4715 +
             (C514 - C513) * C4720 + (C516 - C515) * C47448) *
                C4717 +
            (C5496 * C4719 + C5497 * C4715 + C939 * C4720 + C940 * C47448) *
                C47479) *
               C47505 +
           (((C518 - C517) * C4719 + (C520 - C519) * C4715 +
             (C522 - C521) * C4720 + (C524 - C523) * C47448) *
                C4717 +
            (C6974 * C4719 + C6975 * C4715 + (C2147 - C2148) * C4720 +
             (C2149 - C2150) * C47448) *
                C47479) *
               C47496 +
           (((C2258 - C2257) * C4719 + (C2260 - C2259) * C4715 +
             (C2262 - C2261) * C4720 + (C2264 - C2263) * C47448) *
                C4717 +
            ((C7107 - C7106) * C4719 + (C7109 - C7108) * C4715 +
             (C47384 * C2369 - C113 * C2364) * C4720 +
             (C47384 * C2373 - C113 * C2370) * C47448) *
                C47479) *
               C47477) *
              C47163 * C47146)) /
            (p * q * std::sqrt(p + q));
    d2ee[43] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C47384 * C124 - C113 * C117) * C4719 +
             (C47384 * C138 - C113 * C125) * C4715 + (C146 - C147) * C4720 +
             (C148 - C149) * C47448) *
                C4717 +
            ((C4868 - C4869) * C4719 + (C4870 - C4871) * C4715 + C4872 * C4720 +
             C4873 * C47448) *
                C47479) *
               C47264 +
           (((C113 * C468 - C47384 * C478) * C4719 +
             (C113 * C479 - C47384 * C498) * C4715 + (C509 - C510) * C4720 +
             (C511 - C512) * C47448) *
                C4717 +
            ((C5490 - C5491) * C4719 + (C5492 - C5493) * C4715 + C5494 * C4720 +
             C5495 * C47448) *
                C47479) *
               C47271 +
           (((C47384 * C484 - C113 * C471) * C4719 +
             (C47384 * C501 - C113 * C485) * C4715 + (C517 - C518) * C4720 +
             (C519 - C520) * C47448) *
                C4717 +
            ((C5902 - C5903) * C4719 + (C5904 - C5905) * C4715 + C6972 * C4720 +
             C6973 * C47448) *
                C47479) *
               C3742) *
              C47163 * C47140 +
          ((((C147 - C146) * C4719 + (C149 - C148) * C4715 +
             (C151 - C150) * C4720 + (C153 - C152) * C47448) *
                C4717 +
            (C4874 * C4719 + C4875 * C4715 + C352 * C4720 + C353 * C47448) *
                C47479) *
               C47264 +
           (((C510 - C509) * C4719 + (C512 - C511) * C4715 +
             (C514 - C513) * C4720 + (C516 - C515) * C47448) *
                C4717 +
            (C5496 * C4719 + C5497 * C4715 + C939 * C4720 + C940 * C47448) *
                C47479) *
               C47271 +
           (((C518 - C517) * C4719 + (C520 - C519) * C4715 +
             (C522 - C521) * C4720 + (C524 - C523) * C47448) *
                C4717 +
            (C6974 * C4719 + C6975 * C4715 + (C2147 - C2148) * C4720 +
             (C2149 - C2150) * C47448) *
                C47479) *
               C3742) *
              C47163 * C47149 +
          (((C166 * C4719 + C167 * C4715 + (C155 - C154) * C4720 +
             (C157 - C156) * C47448) *
                C4717 +
            (C4884 * C4719 + C4885 * C4715 + C645 * C4720 + C646 * C47448) *
                C47479) *
               C47264 +
           ((C533 * C4719 + C534 * C4715 + (C526 - C525) * C4720 +
             (C528 - C527) * C47448) *
                C4717 +
            (C5498 * C4719 + C5499 * C4715 + (C935 - C936) * C4720 +
             (C937 - C938) * C47448) *
                C47479) *
               C47271 +
           ((C535 * C4719 + C536 * C4715 + (C530 - C529) * C4720 +
             (C532 - C531) * C47448) *
                C4717 +
            ((C2148 - C2147) * C4719 + (C2150 - C2149) * C4715 +
             (C47384 * C2139 - C113 * C2138) * C4720 +
             (C47384 * C2141 - C113 * C2140) * C47448) *
                C47479) *
               C3742) *
              C47163 * C2843)) /
        (p * q * std::sqrt(p + q));
    d2ee[44] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C47384 * C124 - C113 * C117) * C4719 +
             (C47384 * C138 - C113 * C125) * C4715 + (C146 - C147) * C4720 +
             (C148 - C149) * C47448) *
                C4717 +
            ((C4868 - C4869) * C4719 + (C4870 - C4871) * C4715 + C4872 * C4720 +
             C4873 * C47448) *
                C47479) *
               C3234 +
           (((C113 * C468 - C47384 * C478) * C4719 +
             (C113 * C479 - C47384 * C498) * C4715 + (C509 - C510) * C4720 +
             (C511 - C512) * C47448) *
                C4717 +
            ((C5490 - C5491) * C4719 + (C5492 - C5493) * C4715 + C5494 * C4720 +
             C5495 * C47448) *
                C47479) *
               C47268) *
              C47163 * C47506 +
          ((((C147 - C146) * C4719 + (C149 - C148) * C4715 +
             (C151 - C150) * C4720 + (C153 - C152) * C47448) *
                C4717 +
            (C4874 * C4719 + C4875 * C4715 + C352 * C4720 + C353 * C47448) *
                C47479) *
               C3234 +
           (((C510 - C509) * C4719 + (C512 - C511) * C4715 +
             (C514 - C513) * C4720 + (C516 - C515) * C47448) *
                C4717 +
            (C5496 * C4719 + C5497 * C4715 + C939 * C4720 + C940 * C47448) *
                C47479) *
               C47268) *
              C47163 * C47499 +
          (((C166 * C4719 + C167 * C4715 + (C155 - C154) * C4720 +
             (C157 - C156) * C47448) *
                C4717 +
            (C4884 * C4719 + C4885 * C4715 + C645 * C4720 + C646 * C47448) *
                C47479) *
               C3234 +
           ((C533 * C4719 + C534 * C4715 + (C526 - C525) * C4720 +
             (C528 - C527) * C47448) *
                C4717 +
            (C5498 * C4719 + C5499 * C4715 + (C935 - C936) * C4720 +
             (C937 - C938) * C47448) *
                C47479) *
               C47268) *
              C47163 * C47486 +
          (((C168 * C4719 + C169 * C4715 + (C159 - C158) * C4720 +
             (C161 - C160) * C47448) *
                C4717 +
            (C5164 * C4719 + C5165 * C4715 + (C647 - C648) * C4720 +
             (C649 - C650) * C47448) *
                C47479) *
               C3234 +
           ((C755 * C4719 + C756 * C4715 + (C758 - C757) * C4720 +
             (C760 - C759) * C47448) *
                C4717 +
            ((C936 - C935) * C4719 + (C938 - C937) * C4715 +
             (C47384 * C919 - C113 * C910) * C4720 +
             (C47384 * C925 - C113 * C920) * C47448) *
                C47479) *
               C47268) *
              C47163 * C47465)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C47384 * C124 - C113 * C117) * C4719 +
              (C47384 * C138 - C113 * C125) * C4715 + (C146 - C147) * C4720 +
              (C148 - C149) * C47448) *
                 C4717 +
             ((C4868 - C4869) * C4719 + (C4870 - C4871) * C4715 +
              C4872 * C4720 + C4873 * C47448) *
                 C47479) *
                C3234 +
            (((C113 * C468 - C47384 * C478) * C4719 +
              (C113 * C479 - C47384 * C498) * C4715 + (C509 - C510) * C4720 +
              (C511 - C512) * C47448) *
                 C4717 +
             ((C5490 - C5491) * C4719 + (C5492 - C5493) * C4715 +
              C5494 * C4720 + C5495 * C47448) *
                 C47479) *
                C47268) *
               C47500 +
           ((((C4869 - C4868) * C4719 + (C4871 - C4870) * C4715 +
              C4874 * C4720 + C4875 * C47448) *
                 C4717 +
             ((C4876 - C4877) * C4719 + (C4878 - C4879) * C4715 +
              C4880 * C4720 + C4881 * C47448) *
                 C47479) *
                C3234 +
            (((C5491 - C5490) * C4719 + (C5493 - C5492) * C4715 +
              C5496 * C4720 + C5497 * C47448) *
                 C4717 +
             ((C5906 - C5907) * C4719 + (C5908 - C5909) * C4715 +
              C6246 * C4720 + C6247 * C47448) *
                 C47479) *
                C47268) *
               C47488 +
           ((((C4877 - C4876) * C4719 + (C4879 - C4878) * C4715 +
              C4882 * C4720 + C4883 * C47448) *
                 C4717 +
             ((C5736 - C5737) * C4719 + (C5738 - C5739) * C4715 +
              C6048 * C4720 + C6049 * C47448) *
                 C47479) *
                C3234 +
            (((C5907 - C5906) * C4719 + (C5909 - C5908) * C4715 +
              C6248 * C4720 + C6249 * C47448) *
                 C4717 +
             ((C6392 - C6393) * C4719 + (C6394 - C6395) * C4715 +
              (C6250 - C6251) * C4720 + (C6252 - C6253) * C47448) *
                 C47479) *
                C47268) *
               C47461) *
              C2580 +
          (((((C147 - C146) * C4719 + (C149 - C148) * C4715 +
              (C151 - C150) * C4720 + (C153 - C152) * C47448) *
                 C4717 +
             (C4874 * C4719 + C4875 * C4715 + C352 * C4720 + C353 * C47448) *
                 C47479) *
                C3234 +
            (((C510 - C509) * C4719 + (C512 - C511) * C4715 +
              (C514 - C513) * C4720 + (C516 - C515) * C47448) *
                 C4717 +
             (C5496 * C4719 + C5497 * C4715 + C939 * C4720 + C940 * C47448) *
                 C47479) *
                C47268) *
               C47500 +
           (((C4872 * C4719 + C4873 * C4715 + C4884 * C4720 + C4885 * C47448) *
                 C4717 +
             (C4882 * C4719 + C4883 * C4715 + C354 * C4720 + C355 * C47448) *
                 C47479) *
                C3234 +
            ((C5494 * C4719 + C5495 * C4715 + C5498 * C4720 + C5499 * C47448) *
                 C4717 +
             (C6248 * C4719 + C6249 * C4715 + (C1565 - C1566) * C4720 +
              (C1567 - C1568) * C47448) *
                 C47479) *
                C47268) *
               C47488 +
           (((C4880 * C4719 + C4881 * C4715 + C4886 * C4720 + C4887 * C47448) *
                 C4717 +
             (C6050 * C4719 + C6051 * C4715 + (C1407 - C1408) * C4720 +
              (C1409 - C1410) * C47448) *
                 C47479) *
                C3234 +
            ((C6246 * C4719 + C6247 * C4715 + (C1566 - C1565) * C4720 +
              (C1568 - C1567) * C47448) *
                 C4717 +
             ((C6251 - C6250) * C4719 + (C6253 - C6252) * C4715 +
              (C47384 * C1673 - C113 * C1668) * C4720 +
              (C47384 * C1677 - C113 * C1674) * C47448) *
                 C47479) *
                C47268) *
               C47461) *
              C47146)) /
            (p * q * std::sqrt(p + q));
    d2ee[45] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C47384 * C124 - C113 * C117) * C4719 +
             (C47384 * C138 - C113 * C125) * C4715 + (C146 - C147) * C4720 +
             (C148 - C149) * C47448) *
                C4717 +
            ((C4868 - C4869) * C4719 + (C4870 - C4871) * C4715 + C4872 * C4720 +
             C4873 * C47448) *
                C47479) *
               C47181 * C47429 +
           (((C4869 - C4868) * C4719 + (C4871 - C4870) * C4715 + C4874 * C4720 +
             C4875 * C47448) *
                C4717 +
            ((C4876 - C4877) * C4719 + (C4878 - C4879) * C4715 + C4880 * C4720 +
             C4881 * C47448) *
                C47479) *
               C47181 * C47226) *
              C636 +
          ((((C147 - C146) * C4719 + (C149 - C148) * C4715 +
             (C151 - C150) * C4720 + (C153 - C152) * C47448) *
                C4717 +
            (C4874 * C4719 + C4875 * C4715 + C352 * C4720 + C353 * C47448) *
                C47479) *
               C47181 * C47429 +
           ((C4872 * C4719 + C4873 * C4715 + C4884 * C4720 + C4885 * C47448) *
                C4717 +
            (C4882 * C4719 + C4883 * C4715 + C354 * C4720 + C355 * C47448) *
                C47479) *
               C47181 * C47226) *
              C637 +
          (((C166 * C4719 + C167 * C4715 + (C155 - C154) * C4720 +
             (C157 - C156) * C47448) *
                C4717 +
            (C4884 * C4719 + C4885 * C4715 + C645 * C4720 + C646 * C47448) *
                C47479) *
               C47181 * C47429 +
           ((C352 * C4719 + C353 * C4715 + C5164 * C4720 + C5165 * C47448) *
                C4717 +
            (C4886 * C4719 + C4887 * C4715 + (C348 - C349) * C4720 +
             (C350 - C351) * C47448) *
                C47479) *
               C47181 * C47226) *
              C638 +
          (((C168 * C4719 + C169 * C4715 + (C159 - C158) * C4720 +
             (C161 - C160) * C47448) *
                C4717 +
            (C5164 * C4719 + C5165 * C4715 + (C647 - C648) * C4720 +
             (C649 - C650) * C47448) *
                C47479) *
               C47181 * C47429 +
           ((C645 * C4719 + C646 * C4715 + (C648 - C647) * C4720 +
             (C650 - C649) * C47448) *
                C4717 +
            ((C349 - C348) * C4719 + (C351 - C350) * C4715 +
             (C47384 * C315 - C113 * C296) * C4720 +
             (C47384 * C326 - C113 * C316) * C47448) *
                C47479) *
               C47181 * C47226) *
              C47465)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C47384 * C124 - C113 * C117) * C4719 +
             (C47384 * C138 - C113 * C125) * C4715 + (C146 - C147) * C4720 +
             (C148 - C149) * C47448) *
                C4717 +
            ((C4868 - C4869) * C4719 + (C4870 - C4871) * C4715 + C4872 * C4720 +
             C4873 * C47448) *
                C47479) *
               C47181 * C1392 +
           (((C4869 - C4868) * C4719 + (C4871 - C4870) * C4715 + C4874 * C4720 +
             C4875 * C47448) *
                C4717 +
            ((C4876 - C4877) * C4719 + (C4878 - C4879) * C4715 + C4880 * C4720 +
             C4881 * C47448) *
                C47479) *
               C47181 * C1393 +
           (((C4877 - C4876) * C4719 + (C4879 - C4878) * C4715 + C4882 * C4720 +
             C4883 * C47448) *
                C4717 +
            ((C5736 - C5737) * C4719 + (C5738 - C5739) * C4715 + C6048 * C4720 +
             C6049 * C47448) *
                C47479) *
               C47181 * C1394 +
           (((C5737 - C5736) * C4719 + (C5739 - C5738) * C4715 + C6050 * C4720 +
             C6051 * C47448) *
                C4717 +
            ((C5740 - C5741) * C4719 + (C5742 - C5743) * C4715 +
             (C5744 - C5745) * C4720 + (C5746 - C5747) * C47448) *
                C47479) *
               C47181 * C47471) *
              C47415 +
          ((((C147 - C146) * C4719 + (C149 - C148) * C4715 +
             (C151 - C150) * C4720 + (C153 - C152) * C47448) *
                C4717 +
            (C4874 * C4719 + C4875 * C4715 + C352 * C4720 + C353 * C47448) *
                C47479) *
               C47181 * C1392 +
           ((C4872 * C4719 + C4873 * C4715 + C4884 * C4720 + C4885 * C47448) *
                C4717 +
            (C4882 * C4719 + C4883 * C4715 + C354 * C4720 + C355 * C47448) *
                C47479) *
               C47181 * C1393 +
           ((C4880 * C4719 + C4881 * C4715 + C4886 * C4720 + C4887 * C47448) *
                C4717 +
            (C6050 * C4719 + C6051 * C4715 + (C1407 - C1408) * C4720 +
             (C1409 - C1410) * C47448) *
                C47479) *
               C47181 * C1394 +
           ((C6048 * C4719 + C6049 * C4715 + (C1408 - C1407) * C4720 +
             (C1410 - C1409) * C47448) *
                C4717 +
            ((C5745 - C5744) * C4719 + (C5747 - C5746) * C4715 +
             (C47384 * C1140 - C113 * C1129) * C4720 +
             (C47384 * C1147 - C113 * C1141) * C47448) *
                C47479) *
               C47181 * C47471) *
              C47146)) /
            (p * q * std::sqrt(p + q));
    d2ee[46] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C47384 * C124 - C113 * C117) * C4719 +
              (C47384 * C138 - C113 * C125) * C4715 + (C146 - C147) * C4720 +
              (C148 - C149) * C47448) *
                 C4717 +
             ((C4868 - C4869) * C4719 + (C4870 - C4871) * C4715 +
              C4872 * C4720 + C4873 * C47448) *
                 C47479) *
                C47430 +
            (((C113 * C468 - C47384 * C478) * C4719 +
              (C113 * C479 - C47384 * C498) * C4715 + (C509 - C510) * C4720 +
              (C511 - C512) * C47448) *
                 C4717 +
             ((C5490 - C5491) * C4719 + (C5492 - C5493) * C4715 +
              C5494 * C4720 + C5495 * C47448) *
                 C47479) *
                C47268) *
               C47429 +
           ((((C4869 - C4868) * C4719 + (C4871 - C4870) * C4715 +
              C4874 * C4720 + C4875 * C47448) *
                 C4717 +
             ((C4876 - C4877) * C4719 + (C4878 - C4879) * C4715 +
              C4880 * C4720 + C4881 * C47448) *
                 C47479) *
                C47430 +
            (((C5491 - C5490) * C4719 + (C5493 - C5492) * C4715 +
              C5496 * C4720 + C5497 * C47448) *
                 C4717 +
             ((C47384 * C1273 - C113 * C1261) * C4719 +
              (C47384 * C1288 - C113 * C1274) * C4715 +
              (C1562 - C1561) * C4720 + (C1564 - C1563) * C47448) *
                 C47479) *
                C47268) *
               C47226) *
              C284 +
          (((((C147 - C146) * C4719 + (C149 - C148) * C4715 +
              (C151 - C150) * C4720 + (C153 - C152) * C47448) *
                 C4717 +
             (C4874 * C4719 + C4875 * C4715 + C352 * C4720 + C353 * C47448) *
                 C47479) *
                C47430 +
            (((C510 - C509) * C4719 + (C512 - C511) * C4715 +
              (C514 - C513) * C4720 + (C516 - C515) * C47448) *
                 C4717 +
             (C5496 * C4719 + C5497 * C4715 + C939 * C4720 + C940 * C47448) *
                 C47479) *
                C47268) *
               C47429 +
           (((C4872 * C4719 + C4873 * C4715 + C4884 * C4720 + C4885 * C47448) *
                 C4717 +
             (C4882 * C4719 + C4883 * C4715 + C354 * C4720 + C355 * C47448) *
                 C47479) *
                C47430 +
            ((C5494 * C4719 + C5495 * C4715 + C5498 * C4720 + C5499 * C47448) *
                 C4717 +
             ((C1561 - C1562) * C4719 + (C1563 - C1564) * C4715 +
              (C1565 - C1566) * C4720 + (C1567 - C1568) * C47448) *
                 C47479) *
                C47268) *
               C47226) *
              C285 +
          ((((C166 * C4719 + C167 * C4715 + (C155 - C154) * C4720 +
              (C157 - C156) * C47448) *
                 C4717 +
             (C4884 * C4719 + C4885 * C4715 + C645 * C4720 + C646 * C47448) *
                 C47479) *
                C47430 +
            ((C533 * C4719 + C534 * C4715 + (C526 - C525) * C4720 +
              (C528 - C527) * C47448) *
                 C4717 +
             (C5498 * C4719 + C5499 * C4715 + (C935 - C936) * C4720 +
              (C937 - C938) * C47448) *
                 C47479) *
                C47268) *
               C47429 +
           (((C352 * C4719 + C353 * C4715 + C5164 * C4720 + C5165 * C47448) *
                 C4717 +
             (C4886 * C4719 + C4887 * C4715 + (C348 - C349) * C4720 +
              (C350 - C351) * C47448) *
                 C47479) *
                C47430 +
            ((C939 * C4719 + C940 * C4715 + (C936 - C935) * C4720 +
              (C938 - C937) * C47448) *
                 C4717 +
             ((C1566 - C1565) * C4719 + (C1568 - C1567) * C4715 +
              (C47384 * C1557 - C113 * C1556) * C4720 +
              (C47384 * C1559 - C113 * C1558) * C47448) *
                 C47479) *
                C47268) *
               C47226) *
              C47455)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C47384 * C124 - C113 * C117) * C4719 +
             (C47384 * C138 - C113 * C125) * C4715 + (C146 - C147) * C4720 +
             (C148 - C149) * C47448) *
                C4717 +
            ((C4868 - C4869) * C4719 + (C4870 - C4871) * C4715 + C4872 * C4720 +
             C4873 * C47448) *
                C47479) *
               C47430 +
           (((C113 * C468 - C47384 * C478) * C4719 +
             (C113 * C479 - C47384 * C498) * C4715 + (C509 - C510) * C4720 +
             (C511 - C512) * C47448) *
                C4717 +
            ((C5490 - C5491) * C4719 + (C5492 - C5493) * C4715 + C5494 * C4720 +
             C5495 * C47448) *
                C47479) *
               C47268) *
              C1392 +
          ((((C4869 - C4868) * C4719 + (C4871 - C4870) * C4715 + C4874 * C4720 +
             C4875 * C47448) *
                C4717 +
            ((C4876 - C4877) * C4719 + (C4878 - C4879) * C4715 + C4880 * C4720 +
             C4881 * C47448) *
                C47479) *
               C47430 +
           (((C5491 - C5490) * C4719 + (C5493 - C5492) * C4715 + C5496 * C4720 +
             C5497 * C47448) *
                C4717 +
            ((C5906 - C5907) * C4719 + (C5908 - C5909) * C4715 + C6246 * C4720 +
             C6247 * C47448) *
                C47479) *
               C47268) *
              C1393 +
          ((((C4877 - C4876) * C4719 + (C4879 - C4878) * C4715 + C4882 * C4720 +
             C4883 * C47448) *
                C4717 +
            ((C5736 - C5737) * C4719 + (C5738 - C5739) * C4715 + C6048 * C4720 +
             C6049 * C47448) *
                C47479) *
               C47430 +
           (((C5907 - C5906) * C4719 + (C5909 - C5908) * C4715 + C6248 * C4720 +
             C6249 * C47448) *
                C4717 +
            ((C6392 - C6393) * C4719 + (C6394 - C6395) * C4715 +
             (C6250 - C6251) * C4720 + (C6252 - C6253) * C47448) *
                C47479) *
               C47268) *
              C1394 +
          ((((C5737 - C5736) * C4719 + (C5739 - C5738) * C4715 + C6050 * C4720 +
             C6051 * C47448) *
                C4717 +
            ((C5740 - C5741) * C4719 + (C5742 - C5743) * C4715 +
             (C5744 - C5745) * C4720 + (C5746 - C5747) * C47448) *
                C47479) *
               C47430 +
           (((C6393 - C6392) * C4719 + (C6395 - C6394) * C4715 +
             (C6251 - C6250) * C4720 + (C6253 - C6252) * C47448) *
                C4717 +
            ((C47384 * C6385 - C113 * C6383) * C4719 +
             (C47384 * C6389 - C113 * C6386) * C4715 +
             (C47384 * C6387 - C113 * C6384) * C4720 +
             (C47384 * C6390 - C113 * C6388) * C47448) *
                C47479) *
               C47268) *
              C47471) *
         C47135) /
            (p * q * std::sqrt(p + q));
    d2ee[47] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C47384 * C124 - C113 * C117) * C4719 +
             (C47384 * C138 - C113 * C125) * C4715 + (C146 - C147) * C4720 +
             (C148 - C149) * C47448) *
                C4717 +
            ((C4868 - C4869) * C4719 + (C4870 - C4871) * C4715 + C4872 * C4720 +
             C4873 * C47448) *
                C47479) *
               C47181 * C47500 +
           (((C4869 - C4868) * C4719 + (C4871 - C4870) * C4715 + C4874 * C4720 +
             C4875 * C47448) *
                C4717 +
            ((C4876 - C4877) * C4719 + (C4878 - C4879) * C4715 + C4880 * C4720 +
             C4881 * C47448) *
                C47479) *
               C47181 * C47488 +
           (((C4877 - C4876) * C4719 + (C4879 - C4878) * C4715 + C4882 * C4720 +
             C4883 * C47448) *
                C4717 +
            ((C47384 * C1130 - C113 * C1124) * C4719 +
             (C47384 * C1142 - C113 * C1131) * C4715 + (C1404 - C1403) * C4720 +
             (C1406 - C1405) * C47448) *
                C47479) *
               C47181 * C47461) *
              C284 +
          ((((C147 - C146) * C4719 + (C149 - C148) * C4715 +
             (C151 - C150) * C4720 + (C153 - C152) * C47448) *
                C4717 +
            (C4874 * C4719 + C4875 * C4715 + C352 * C4720 + C353 * C47448) *
                C47479) *
               C47181 * C47500 +
           ((C4872 * C4719 + C4873 * C4715 + C4884 * C4720 + C4885 * C47448) *
                C4717 +
            (C4882 * C4719 + C4883 * C4715 + C354 * C4720 + C355 * C47448) *
                C47479) *
               C47181 * C47488 +
           ((C4880 * C4719 + C4881 * C4715 + C4886 * C4720 + C4887 * C47448) *
                C4717 +
            ((C1403 - C1404) * C4719 + (C1405 - C1406) * C4715 +
             (C1407 - C1408) * C4720 + (C1409 - C1410) * C47448) *
                C47479) *
               C47181 * C47461) *
              C285 +
          (((C166 * C4719 + C167 * C4715 + (C155 - C154) * C4720 +
             (C157 - C156) * C47448) *
                C4717 +
            (C4884 * C4719 + C4885 * C4715 + C645 * C4720 + C646 * C47448) *
                C47479) *
               C47181 * C47500 +
           ((C352 * C4719 + C353 * C4715 + (C345 - C344) * C4720 +
             (C347 - C346) * C47448) *
                C4717 +
            (C4886 * C4719 + C4887 * C4715 + (C348 - C349) * C4720 +
             (C350 - C351) * C47448) *
                C47479) *
               C47181 * C47488 +
           ((C354 * C4719 + C355 * C4715 + (C349 - C348) * C4720 +
             (C351 - C350) * C47448) *
                C4717 +
            ((C1408 - C1407) * C4719 + (C1410 - C1409) * C4715 +
             (C47384 * C1399 - C113 * C1398) * C4720 +
             (C47384 * C1401 - C113 * C1400) * C47448) *
                C47479) *
               C47181 * C47461) *
              C47455)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C47384 * C124 - C113 * C117) * C4719 +
            (C47384 * C138 - C113 * C125) * C4715 + (C146 - C147) * C4720 +
            (C148 - C149) * C47448) *
               C4717 +
           ((C47384 * C297 - C113 * C287) * C4719 +
            (C47384 * C317 - C113 * C298) * C4715 + (C329 - C328) * C4720 +
            (C331 - C330) * C47448) *
               C47479) *
              C47181 * C47163 * C108 +
          (((C147 - C146) * C4719 + (C149 - C148) * C4715 +
            (C151 - C150) * C4720 + (C153 - C152) * C47448) *
               C4717 +
           ((C328 - C329) * C4719 + (C330 - C331) * C4715 + C352 * C4720 +
            C353 * C47448) *
               C47479) *
              C47181 * C47163 * C109 +
          ((C166 * C4719 + C167 * C4715 + (C155 - C154) * C4720 +
            (C157 - C156) * C47448) *
               C4717 +
           ((C333 - C332) * C4719 + (C335 - C334) * C4715 + C645 * C4720 +
            C646 * C47448) *
               C47479) *
              C47181 * C47163 * C110 +
          ((C168 * C4719 + C169 * C4715 + (C159 - C158) * C4720 +
            (C161 - C160) * C47448) *
               C4717 +
           ((C345 - C344) * C4719 + (C347 - C346) * C4715 +
            (C647 - C648) * C4720 + (C649 - C650) * C47448) *
               C47479) *
              C47181 * C47163 * C111 +
          ((C170 * C4719 + C171 * C4715 + (C163 - C162) * C4720 +
            (C165 - C164) * C47448) *
               C4717 +
           ((C648 - C647) * C4719 + (C650 - C649) * C4715 +
            (C47384 * C641 - C113 * C640) * C4720 +
            (C47384 * C643 - C113 * C642) * C47448) *
               C47479) *
              C47181 * C47163 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C47384 * C124 - C113 * C117) * C4719 +
             (C47384 * C138 - C113 * C125) * C4715 + (C146 - C147) * C4720 +
             (C148 - C149) * C47448) *
                C4717 +
            ((C4868 - C4869) * C4719 + (C4870 - C4871) * C4715 + C4872 * C4720 +
             C4873 * C47448) *
                C47479) *
               C47501 +
           (((C113 * C468 - C47384 * C478) * C4719 +
             (C113 * C479 - C47384 * C498) * C4715 + (C509 - C510) * C4720 +
             (C511 - C512) * C47448) *
                C4717 +
            ((C113 * C906 - C47384 * C911) * C4719 +
             (C113 * C912 - C47384 * C921) * C4715 + (C928 - C927) * C4720 +
             (C930 - C929) * C47448) *
                C47479) *
               C47490 +
           (((C47384 * C484 - C113 * C471) * C4719 +
             (C47384 * C501 - C113 * C485) * C4715 + (C517 - C518) * C4720 +
             (C519 - C520) * C47448) *
                C4717 +
            ((C47384 * C1267 - C113 * C1258) * C4719 +
             (C47384 * C1285 - C113 * C1268) * C4715 + (C2144 - C2143) * C4720 +
             (C2146 - C2145) * C47448) *
                C47479) *
               C47464) *
              C47163 * C284 +
          ((((C147 - C146) * C4719 + (C149 - C148) * C4715 +
             (C151 - C150) * C4720 + (C153 - C152) * C47448) *
                C4717 +
            (C4874 * C4719 + C4875 * C4715 + C352 * C4720 + C353 * C47448) *
                C47479) *
               C47501 +
           (((C510 - C509) * C4719 + (C512 - C511) * C4715 +
             (C514 - C513) * C4720 + (C516 - C515) * C47448) *
                C4717 +
            ((C927 - C928) * C4719 + (C929 - C930) * C4715 + C939 * C4720 +
             C940 * C47448) *
                C47479) *
               C47490 +
           (((C518 - C517) * C4719 + (C520 - C519) * C4715 +
             (C522 - C521) * C4720 + (C524 - C523) * C47448) *
                C4717 +
            ((C2143 - C2144) * C4719 + (C2145 - C2146) * C4715 +
             (C2147 - C2148) * C4720 + (C2149 - C2150) * C47448) *
                C47479) *
               C47464) *
              C47163 * C285 +
          (((C166 * C4719 + C167 * C4715 + (C155 - C154) * C4720 +
             (C157 - C156) * C47448) *
                C4717 +
            (C4884 * C4719 + C4885 * C4715 + C645 * C4720 + C646 * C47448) *
                C47479) *
               C47501 +
           ((C533 * C4719 + C534 * C4715 + (C526 - C525) * C4720 +
             (C528 - C527) * C47448) *
                C4717 +
            ((C932 - C931) * C4719 + (C934 - C933) * C4715 +
             (C935 - C936) * C4720 + (C937 - C938) * C47448) *
                C47479) *
               C47490 +
           ((C535 * C4719 + C536 * C4715 + (C530 - C529) * C4720 +
             (C532 - C531) * C47448) *
                C4717 +
            ((C2148 - C2147) * C4719 + (C2150 - C2149) * C4715 +
             (C47384 * C2139 - C113 * C2138) * C4720 +
             (C47384 * C2141 - C113 * C2140) * C47448) *
                C47479) *
               C47464) *
              C47163 * C47455)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C47384 * C124 - C113 * C117) * C4719 +
             (C47384 * C138 - C113 * C125) * C4715 + (C146 - C147) * C4720 +
             (C148 - C149) * C47448) *
                C4717 +
            ((C4868 - C4869) * C4719 + (C4870 - C4871) * C4715 + C4872 * C4720 +
             C4873 * C47448) *
                C47479) *
               C47181 * C1050 +
           (((C4869 - C4868) * C4719 + (C4871 - C4870) * C4715 + C4874 * C4720 +
             C4875 * C47448) *
                C4717 +
            ((C4876 - C4877) * C4719 + (C4878 - C4879) * C4715 + C4880 * C4720 +
             C4881 * C47448) *
                C47479) *
               C47181 * C1051 +
           (((C4877 - C4876) * C4719 + (C4879 - C4878) * C4715 + C4882 * C4720 +
             C4883 * C47448) *
                C4717 +
            ((C47384 * C1130 - C113 * C1124) * C4719 +
             (C47384 * C1142 - C113 * C1131) * C4715 + (C1404 - C1403) * C4720 +
             (C1406 - C1405) * C47448) *
                C47479) *
               C47181 * C47461) *
              C47497 +
          ((((C147 - C146) * C4719 + (C149 - C148) * C4715 +
             (C151 - C150) * C4720 + (C153 - C152) * C47448) *
                C4717 +
            (C4874 * C4719 + C4875 * C4715 + C352 * C4720 + C353 * C47448) *
                C47479) *
               C47181 * C1050 +
           ((C4872 * C4719 + C4873 * C4715 + C4884 * C4720 + C4885 * C47448) *
                C4717 +
            (C4882 * C4719 + C4883 * C4715 + C354 * C4720 + C355 * C47448) *
                C47479) *
               C47181 * C1051 +
           ((C4880 * C4719 + C4881 * C4715 + C4886 * C4720 + C4887 * C47448) *
                C4717 +
            ((C1403 - C1404) * C4719 + (C1405 - C1406) * C4715 +
             (C1407 - C1408) * C4720 + (C1409 - C1410) * C47448) *
                C47479) *
               C47181 * C47461) *
              C47484 +
          (((C166 * C4719 + C167 * C4715 + (C155 - C154) * C4720 +
             (C157 - C156) * C47448) *
                C4717 +
            (C4884 * C4719 + C4885 * C4715 + C645 * C4720 + C646 * C47448) *
                C47479) *
               C47181 * C1050 +
           ((C352 * C4719 + C353 * C4715 + C5164 * C4720 + C5165 * C47448) *
                C4717 +
            (C4886 * C4719 + C4887 * C4715 + (C348 - C349) * C4720 +
             (C350 - C351) * C47448) *
                C47479) *
               C47181 * C1051 +
           ((C354 * C4719 + C355 * C4715 + (C349 - C348) * C4720 +
             (C351 - C350) * C47448) *
                C4717 +
            ((C1408 - C1407) * C4719 + (C1410 - C1409) * C4715 +
             (C47384 * C1399 - C113 * C1398) * C4720 +
             (C47384 * C1401 - C113 * C1400) * C47448) *
                C47479) *
               C47181 * C47461) *
              C47455)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C47384 * C124 - C113 * C117) * C4719 +
            (C47384 * C138 - C113 * C125) * C4715 + (C146 - C147) * C4720 +
            (C148 - C149) * C47448) *
               C4717 +
           ((C4868 - C4869) * C4719 + (C4870 - C4871) * C4715 + C4872 * C4720 +
            C4873 * C47448) *
               C47479) *
              C47181 * C1118 +
          (((C4869 - C4868) * C4719 + (C4871 - C4870) * C4715 + C4874 * C4720 +
            C4875 * C47448) *
               C4717 +
           ((C4876 - C4877) * C4719 + (C4878 - C4879) * C4715 + C4880 * C4720 +
            C4881 * C47448) *
               C47479) *
              C47181 * C1119 +
          (((C4877 - C4876) * C4719 + (C4879 - C4878) * C4715 + C4882 * C4720 +
            C4883 * C47448) *
               C4717 +
           ((C5736 - C5737) * C4719 + (C5738 - C5739) * C4715 +
            (C1404 - C1403) * C4720 + (C1406 - C1405) * C47448) *
               C47479) *
              C47181 * C1120 +
          (((C5737 - C5736) * C4719 + (C5739 - C5738) * C4715 +
            (C1403 - C1404) * C4720 + (C1405 - C1406) * C47448) *
               C4717 +
           ((C5740 - C5741) * C4719 + (C5742 - C5743) * C4715 +
            (C5744 - C5745) * C4720 + (C5746 - C5747) * C47448) *
               C47479) *
              C47181 * C1121 +
          (((C5741 - C5740) * C4719 + (C5743 - C5742) * C4715 +
            (C5745 - C5744) * C4720 + (C5747 - C5746) * C47448) *
               C4717 +
           ((C47384 * C5729 - C113 * C5727) * C4719 +
            (C47384 * C5733 - C113 * C5730) * C4715 +
            (C47384 * C5731 - C113 * C5728) * C4720 +
            (C47384 * C5734 - C113 * C5732) * C47448) *
               C47479) *
              C47181 * C1122) *
         C47135) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C47384 * C124 - C113 * C117) * C4719 +
             (C47384 * C138 - C113 * C125) * C4715 + (C146 - C147) * C4720 +
             (C148 - C149) * C47448) *
                C4717 +
            ((C4868 - C4869) * C4719 + (C4870 - C4871) * C4715 + C4872 * C4720 +
             C4873 * C47448) *
                C47479) *
               C47501 +
           (((C113 * C468 - C47384 * C478) * C4719 +
             (C113 * C479 - C47384 * C498) * C4715 + (C509 - C510) * C4720 +
             (C511 - C512) * C47448) *
                C4717 +
            ((C5490 - C5491) * C4719 + (C5492 - C5493) * C4715 + C5494 * C4720 +
             C5495 * C47448) *
                C47479) *
               C47490 +
           (((C47384 * C484 - C113 * C471) * C4719 +
             (C47384 * C501 - C113 * C485) * C4715 + (C517 - C518) * C4720 +
             (C519 - C520) * C47448) *
                C4717 +
            ((C5902 - C5903) * C4719 + (C5904 - C5905) * C4715 +
             (C2144 - C2143) * C4720 + (C2146 - C2145) * C47448) *
                C47479) *
               C47464) *
              C1050 +
          ((((C4869 - C4868) * C4719 + (C4871 - C4870) * C4715 + C4874 * C4720 +
             C4875 * C47448) *
                C4717 +
            ((C4876 - C4877) * C4719 + (C4878 - C4879) * C4715 + C4880 * C4720 +
             C4881 * C47448) *
                C47479) *
               C47501 +
           (((C5491 - C5490) * C4719 + (C5493 - C5492) * C4715 + C5496 * C4720 +
             C5497 * C47448) *
                C4717 +
            ((C5906 - C5907) * C4719 + (C5908 - C5909) * C4715 +
             (C1562 - C1561) * C4720 + (C1564 - C1563) * C47448) *
                C47479) *
               C47490 +
           (((C5903 - C5902) * C4719 + (C5905 - C5904) * C4715 +
             (C2143 - C2144) * C4720 + (C2145 - C2146) * C47448) *
                C4717 +
            ((C5910 - C5911) * C4719 + (C5912 - C5913) * C4715 +
             (C5914 - C5915) * C4720 + (C5916 - C5917) * C47448) *
                C47479) *
               C47464) *
              C1051 +
          ((((C4877 - C4876) * C4719 + (C4879 - C4878) * C4715 + C4882 * C4720 +
             C4883 * C47448) *
                C4717 +
            ((C5736 - C5737) * C4719 + (C5738 - C5739) * C4715 +
             (C1404 - C1403) * C4720 + (C1406 - C1405) * C47448) *
                C47479) *
               C47501 +
           (((C5907 - C5906) * C4719 + (C5909 - C5908) * C4715 +
             (C1561 - C1562) * C4720 + (C1563 - C1564) * C47448) *
                C4717 +
            ((C113 * C1666 - C47384 * C1669) * C4719 +
             (C113 * C1670 - C47384 * C1675) * C4715 +
             (C113 * C1667 - C47384 * C1671) * C4720 +
             (C113 * C1672 - C47384 * C1676) * C47448) *
                C47479) *
               C47490 +
           (((C5911 - C5910) * C4719 + (C5913 - C5912) * C4715 +
             (C5915 - C5914) * C4720 + (C5917 - C5916) * C47448) *
                C4717 +
            ((C47384 * C5895 - C113 * C5893) * C4719 +
             (C47384 * C5899 - C113 * C5896) * C4715 +
             (C47384 * C5897 - C113 * C5894) * C4720 +
             (C47384 * C5900 - C113 * C5898) * C47448) *
                C47479) *
               C47464) *
              C47461) *
         C47135) /
            (p * q * std::sqrt(p + q));
    d2ee[48] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C47384 * C124 - C113 * C117) * C4719 +
             (C47384 * C138 - C113 * C125) * C4715 + (C146 - C147) * C4720 +
             (C148 - C149) * C47448) *
                C4717 +
            ((C4868 - C4869) * C4719 + (C4870 - C4871) * C4715 + C4872 * C4720 +
             C4873 * C47448) *
                C47479) *
               C47430 +
           (((C113 * C468 - C47384 * C478) * C4719 +
             (C113 * C479 - C47384 * C498) * C4715 + (C509 - C510) * C4720 +
             (C511 - C512) * C47448) *
                C4717 +
            ((C113 * C906 - C47384 * C911) * C4719 +
             (C113 * C912 - C47384 * C921) * C4715 + (C928 - C927) * C4720 +
             (C930 - C929) * C47448) *
                C47479) *
               C47268) *
              C47163 * C636 +
          ((((C147 - C146) * C4719 + (C149 - C148) * C4715 +
             (C151 - C150) * C4720 + (C153 - C152) * C47448) *
                C4717 +
            (C4874 * C4719 + C4875 * C4715 + C352 * C4720 + C353 * C47448) *
                C47479) *
               C47430 +
           (((C510 - C509) * C4719 + (C512 - C511) * C4715 +
             (C514 - C513) * C4720 + (C516 - C515) * C47448) *
                C4717 +
            ((C927 - C928) * C4719 + (C929 - C930) * C4715 + C939 * C4720 +
             C940 * C47448) *
                C47479) *
               C47268) *
              C47163 * C637 +
          (((C166 * C4719 + C167 * C4715 + (C155 - C154) * C4720 +
             (C157 - C156) * C47448) *
                C4717 +
            (C4884 * C4719 + C4885 * C4715 + C645 * C4720 + C646 * C47448) *
                C47479) *
               C47430 +
           ((C533 * C4719 + C534 * C4715 + (C526 - C525) * C4720 +
             (C528 - C527) * C47448) *
                C4717 +
            ((C932 - C931) * C4719 + (C934 - C933) * C4715 +
             (C935 - C936) * C4720 + (C937 - C938) * C47448) *
                C47479) *
               C47268) *
              C47163 * C638 +
          (((C168 * C4719 + C169 * C4715 + (C159 - C158) * C4720 +
             (C161 - C160) * C47448) *
                C4717 +
            (C5164 * C4719 + C5165 * C4715 + (C647 - C648) * C4720 +
             (C649 - C650) * C47448) *
                C47479) *
               C47430 +
           ((C755 * C4719 + C756 * C4715 + (C758 - C757) * C4720 +
             (C760 - C759) * C47448) *
                C4717 +
            ((C936 - C935) * C4719 + (C938 - C937) * C4715 +
             (C47384 * C919 - C113 * C910) * C4720 +
             (C47384 * C925 - C113 * C920) * C47448) *
                C47479) *
               C47268) *
              C47163 * C47465)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C47384 * C124 - C113 * C117) * C4719 +
              (C47384 * C138 - C113 * C125) * C4715 + (C146 - C147) * C4720 +
              (C148 - C149) * C47448) *
                 C4717 +
             ((C4868 - C4869) * C4719 + (C4870 - C4871) * C4715 +
              C4872 * C4720 + C4873 * C47448) *
                 C47479) *
                C47430 +
            (((C113 * C468 - C47384 * C478) * C4719 +
              (C113 * C479 - C47384 * C498) * C4715 + (C509 - C510) * C4720 +
              (C511 - C512) * C47448) *
                 C4717 +
             ((C5490 - C5491) * C4719 + (C5492 - C5493) * C4715 +
              C5494 * C4720 + C5495 * C47448) *
                 C47479) *
                C47268) *
               C1050 +
           ((((C4869 - C4868) * C4719 + (C4871 - C4870) * C4715 +
              C4874 * C4720 + C4875 * C47448) *
                 C4717 +
             ((C4876 - C4877) * C4719 + (C4878 - C4879) * C4715 +
              C4880 * C4720 + C4881 * C47448) *
                 C47479) *
                C47430 +
            (((C5491 - C5490) * C4719 + (C5493 - C5492) * C4715 +
              C5496 * C4720 + C5497 * C47448) *
                 C4717 +
             ((C5906 - C5907) * C4719 + (C5908 - C5909) * C4715 +
              C6246 * C4720 + C6247 * C47448) *
                 C47479) *
                C47268) *
               C1051 +
           ((((C4877 - C4876) * C4719 + (C4879 - C4878) * C4715 +
              C4882 * C4720 + C4883 * C47448) *
                 C4717 +
             ((C5736 - C5737) * C4719 + (C5738 - C5739) * C4715 +
              C6048 * C4720 + C6049 * C47448) *
                 C47479) *
                C47430 +
            (((C5907 - C5906) * C4719 + (C5909 - C5908) * C4715 +
              C6248 * C4720 + C6249 * C47448) *
                 C4717 +
             ((C113 * C1666 - C47384 * C1669) * C4719 +
              (C113 * C1670 - C47384 * C1675) * C4715 +
              (C6250 - C6251) * C4720 + (C6252 - C6253) * C47448) *
                 C47479) *
                C47268) *
               C47461) *
              C47415 +
          (((((C147 - C146) * C4719 + (C149 - C148) * C4715 +
              (C151 - C150) * C4720 + (C153 - C152) * C47448) *
                 C4717 +
             (C4874 * C4719 + C4875 * C4715 + C352 * C4720 + C353 * C47448) *
                 C47479) *
                C47430 +
            (((C510 - C509) * C4719 + (C512 - C511) * C4715 +
              (C514 - C513) * C4720 + (C516 - C515) * C47448) *
                 C4717 +
             (C5496 * C4719 + C5497 * C4715 + C939 * C4720 + C940 * C47448) *
                 C47479) *
                C47268) *
               C1050 +
           (((C4872 * C4719 + C4873 * C4715 + C4884 * C4720 + C4885 * C47448) *
                 C4717 +
             (C4882 * C4719 + C4883 * C4715 + C354 * C4720 + C355 * C47448) *
                 C47479) *
                C47430 +
            ((C5494 * C4719 + C5495 * C4715 + C5498 * C4720 + C5499 * C47448) *
                 C4717 +
             (C6248 * C4719 + C6249 * C4715 + (C1565 - C1566) * C4720 +
              (C1567 - C1568) * C47448) *
                 C47479) *
                C47268) *
               C1051 +
           (((C4880 * C4719 + C4881 * C4715 + C4886 * C4720 + C4887 * C47448) *
                 C4717 +
             (C6050 * C4719 + C6051 * C4715 + (C1407 - C1408) * C4720 +
              (C1409 - C1410) * C47448) *
                 C47479) *
                C47430 +
            ((C6246 * C4719 + C6247 * C4715 + (C1566 - C1565) * C4720 +
              (C1568 - C1567) * C47448) *
                 C4717 +
             ((C6251 - C6250) * C4719 + (C6253 - C6252) * C4715 +
              (C47384 * C1673 - C113 * C1668) * C4720 +
              (C47384 * C1677 - C113 * C1674) * C47448) *
                 C47479) *
                C47268) *
               C47461) *
              C47146)) /
            (p * q * std::sqrt(p + q));
    d2ee[49] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C47384 * C124 - C113 * C117) * C4719 +
            (C47384 * C138 - C113 * C125) * C4715 + (C146 - C147) * C4720 +
            (C148 - C149) * C47448) *
               C4717 +
           ((C47384 * C297 - C113 * C287) * C4719 +
            (C47384 * C317 - C113 * C298) * C4715 + (C329 - C328) * C4720 +
            (C331 - C330) * C47448) *
               C47479) *
              C47181 * C47163 * C108 +
          (((C147 - C146) * C4719 + (C149 - C148) * C4715 +
            (C151 - C150) * C4720 + (C153 - C152) * C47448) *
               C4717 +
           ((C328 - C329) * C4719 + (C330 - C331) * C4715 + C352 * C4720 +
            C353 * C47448) *
               C47479) *
              C47181 * C47163 * C109 +
          ((C166 * C4719 + C167 * C4715 + (C155 - C154) * C4720 +
            (C157 - C156) * C47448) *
               C4717 +
           ((C333 - C332) * C4719 + (C335 - C334) * C4715 + C645 * C4720 +
            C646 * C47448) *
               C47479) *
              C47181 * C47163 * C110 +
          ((C168 * C4719 + C169 * C4715 + (C159 - C158) * C4720 +
            (C161 - C160) * C47448) *
               C4717 +
           ((C345 - C344) * C4719 + (C347 - C346) * C4715 +
            (C647 - C648) * C4720 + (C649 - C650) * C47448) *
               C47479) *
              C47181 * C47163 * C111 +
          ((C170 * C4719 + C171 * C4715 + (C163 - C162) * C4720 +
            (C165 - C164) * C47448) *
               C4717 +
           ((C648 - C647) * C4719 + (C650 - C649) * C4715 +
            (C47384 * C641 - C113 * C640) * C4720 +
            (C47384 * C643 - C113 * C642) * C47448) *
               C47479) *
              C47181 * C47163 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C47384 * C124 - C113 * C117) * C4719 +
             (C47384 * C138 - C113 * C125) * C4715 + (C146 - C147) * C4720 +
             (C148 - C149) * C47448) *
                C4717 +
            ((C4868 - C4869) * C4719 + (C4870 - C4871) * C4715 + C4872 * C4720 +
             C4873 * C47448) *
                C47479) *
               C47181 * C47500 +
           (((C4869 - C4868) * C4719 + (C4871 - C4870) * C4715 + C4874 * C4720 +
             C4875 * C47448) *
                C4717 +
            ((C4876 - C4877) * C4719 + (C4878 - C4879) * C4715 + C4880 * C4720 +
             C4881 * C47448) *
                C47479) *
               C47181 * C47488 +
           (((C4877 - C4876) * C4719 + (C4879 - C4878) * C4715 + C4882 * C4720 +
             C4883 * C47448) *
                C4717 +
            ((C47384 * C1130 - C113 * C1124) * C4719 +
             (C47384 * C1142 - C113 * C1131) * C4715 + (C1404 - C1403) * C4720 +
             (C1406 - C1405) * C47448) *
                C47479) *
               C47181 * C47461) *
              C284 +
          ((((C147 - C146) * C4719 + (C149 - C148) * C4715 +
             (C151 - C150) * C4720 + (C153 - C152) * C47448) *
                C4717 +
            (C4874 * C4719 + C4875 * C4715 + C352 * C4720 + C353 * C47448) *
                C47479) *
               C47181 * C47500 +
           ((C4872 * C4719 + C4873 * C4715 + C4884 * C4720 + C4885 * C47448) *
                C4717 +
            (C4882 * C4719 + C4883 * C4715 + C354 * C4720 + C355 * C47448) *
                C47479) *
               C47181 * C47488 +
           ((C4880 * C4719 + C4881 * C4715 + C4886 * C4720 + C4887 * C47448) *
                C4717 +
            ((C1403 - C1404) * C4719 + (C1405 - C1406) * C4715 +
             (C1407 - C1408) * C4720 + (C1409 - C1410) * C47448) *
                C47479) *
               C47181 * C47461) *
              C285 +
          (((C166 * C4719 + C167 * C4715 + (C155 - C154) * C4720 +
             (C157 - C156) * C47448) *
                C4717 +
            (C4884 * C4719 + C4885 * C4715 + C645 * C4720 + C646 * C47448) *
                C47479) *
               C47181 * C47500 +
           ((C352 * C4719 + C353 * C4715 + (C345 - C344) * C4720 +
             (C347 - C346) * C47448) *
                C4717 +
            (C4886 * C4719 + C4887 * C4715 + (C348 - C349) * C4720 +
             (C350 - C351) * C47448) *
                C47479) *
               C47181 * C47488 +
           ((C354 * C4719 + C355 * C4715 + (C349 - C348) * C4720 +
             (C351 - C350) * C47448) *
                C4717 +
            ((C1408 - C1407) * C4719 + (C1410 - C1409) * C4715 +
             (C47384 * C1399 - C113 * C1398) * C4720 +
             (C47384 * C1401 - C113 * C1400) * C47448) *
                C47479) *
               C47181 * C47461) *
              C47455)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C47384 * C124 - C113 * C117) * C4719 +
             (C47384 * C138 - C113 * C125) * C4715 + (C146 - C147) * C4720 +
             (C148 - C149) * C47448) *
                C4717 +
            ((C4868 - C4869) * C4719 + (C4870 - C4871) * C4715 + C4872 * C4720 +
             C4873 * C47448) *
                C47479) *
               C47181 * C1050 +
           (((C4869 - C4868) * C4719 + (C4871 - C4870) * C4715 + C4874 * C4720 +
             C4875 * C47448) *
                C4717 +
            ((C4876 - C4877) * C4719 + (C4878 - C4879) * C4715 + C4880 * C4720 +
             C4881 * C47448) *
                C47479) *
               C47181 * C1051 +
           (((C4877 - C4876) * C4719 + (C4879 - C4878) * C4715 + C4882 * C4720 +
             C4883 * C47448) *
                C4717 +
            ((C47384 * C1130 - C113 * C1124) * C4719 +
             (C47384 * C1142 - C113 * C1131) * C4715 + (C1404 - C1403) * C4720 +
             (C1406 - C1405) * C47448) *
                C47479) *
               C47181 * C47461) *
              C47497 +
          ((((C147 - C146) * C4719 + (C149 - C148) * C4715 +
             (C151 - C150) * C4720 + (C153 - C152) * C47448) *
                C4717 +
            (C4874 * C4719 + C4875 * C4715 + C352 * C4720 + C353 * C47448) *
                C47479) *
               C47181 * C1050 +
           ((C4872 * C4719 + C4873 * C4715 + C4884 * C4720 + C4885 * C47448) *
                C4717 +
            (C4882 * C4719 + C4883 * C4715 + C354 * C4720 + C355 * C47448) *
                C47479) *
               C47181 * C1051 +
           ((C4880 * C4719 + C4881 * C4715 + C4886 * C4720 + C4887 * C47448) *
                C4717 +
            ((C1403 - C1404) * C4719 + (C1405 - C1406) * C4715 +
             (C1407 - C1408) * C4720 + (C1409 - C1410) * C47448) *
                C47479) *
               C47181 * C47461) *
              C47484 +
          (((C166 * C4719 + C167 * C4715 + (C155 - C154) * C4720 +
             (C157 - C156) * C47448) *
                C4717 +
            (C4884 * C4719 + C4885 * C4715 + C645 * C4720 + C646 * C47448) *
                C47479) *
               C47181 * C1050 +
           ((C352 * C4719 + C353 * C4715 + C5164 * C4720 + C5165 * C47448) *
                C4717 +
            (C4886 * C4719 + C4887 * C4715 + (C348 - C349) * C4720 +
             (C350 - C351) * C47448) *
                C47479) *
               C47181 * C1051 +
           ((C354 * C4719 + C355 * C4715 + (C349 - C348) * C4720 +
             (C351 - C350) * C47448) *
                C4717 +
            ((C1408 - C1407) * C4719 + (C1410 - C1409) * C4715 +
             (C47384 * C1399 - C113 * C1398) * C4720 +
             (C47384 * C1401 - C113 * C1400) * C47448) *
                C47479) *
               C47181 * C47461) *
              C47455)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C47384 * C124 - C113 * C117) * C4719 +
            (C47384 * C138 - C113 * C125) * C4715 + (C146 - C147) * C4720 +
            (C148 - C149) * C47448) *
               C4717 +
           ((C4868 - C4869) * C4719 + (C4870 - C4871) * C4715 + C4872 * C4720 +
            C4873 * C47448) *
               C47479) *
              C47181 * C1118 +
          (((C4869 - C4868) * C4719 + (C4871 - C4870) * C4715 + C4874 * C4720 +
            C4875 * C47448) *
               C4717 +
           ((C4876 - C4877) * C4719 + (C4878 - C4879) * C4715 + C4880 * C4720 +
            C4881 * C47448) *
               C47479) *
              C47181 * C1119 +
          (((C4877 - C4876) * C4719 + (C4879 - C4878) * C4715 + C4882 * C4720 +
            C4883 * C47448) *
               C4717 +
           ((C5736 - C5737) * C4719 + (C5738 - C5739) * C4715 +
            (C1404 - C1403) * C4720 + (C1406 - C1405) * C47448) *
               C47479) *
              C47181 * C1120 +
          (((C5737 - C5736) * C4719 + (C5739 - C5738) * C4715 +
            (C1403 - C1404) * C4720 + (C1405 - C1406) * C47448) *
               C4717 +
           ((C5740 - C5741) * C4719 + (C5742 - C5743) * C4715 +
            (C5744 - C5745) * C4720 + (C5746 - C5747) * C47448) *
               C47479) *
              C47181 * C1121 +
          (((C5741 - C5740) * C4719 + (C5743 - C5742) * C4715 +
            (C5745 - C5744) * C4720 + (C5747 - C5746) * C47448) *
               C4717 +
           ((C47384 * C5729 - C113 * C5727) * C4719 +
            (C47384 * C5733 - C113 * C5730) * C4715 +
            (C47384 * C5731 - C113 * C5728) * C4720 +
            (C47384 * C5734 - C113 * C5732) * C47448) *
               C47479) *
              C47181 * C1122) *
         C47135) /
            (p * q * std::sqrt(p + q));
    d2ee[50] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C10297 * C124 - C10299 * C117 + C47481 * C478 - C10300 * C468) *
                C4719 +
            (C10297 * C138 - C10299 * C125 + C47481 * C498 - C10300 * C479) *
                C4715 +
            (C10302 - C10303 + C10304 - C10305) * C4720 +
            (C10306 - C10307 + C10308 - C10309) * C47448) *
               C47369 * C47181 * C47222 +
           ((C10299 * C287 - C10297 * C297 + C10300 * C906 - C47481 * C911) *
                C4719 +
            (C10299 * C298 - C10297 * C317 + C10300 * C912 - C47481 * C921) *
                C4715 +
            (C10480 - C10481 + C10482 - C10483) * C4720 +
            (C10484 - C10485 + C10486 - C10487) * C47448) *
               C47369 * C47181 * C47229 +
           ((C10297 * C303 - C10299 * C290 + C47481 * C1273 - C10300 * C1261) *
                C4719 +
            (C10297 * C320 - C10299 * C304 + C47481 * C1288 - C10300 * C1274) *
                C4715 +
            (C10488 - C10489 + C10490 - C10491) * C4720 +
            (C10492 - C10493 + C10494 - C10495) * C47448) *
               C47369 * C47181 * C2840) *
              C47140 +
          (((C10303 - C10302 + C10305 - C10304) * C4719 +
            (C10307 - C10306 + C10309 - C10308) * C4715 +
            (C10310 - C10311 + C10312 - C10313) * C4720 +
            (C10314 - C10315 + C10316 - C10317) * C47448) *
               C47369 * C47181 * C47222 +
           ((C10481 - C10480 + C10483 - C10482) * C4719 +
            (C10485 - C10484 + C10487 - C10486) * C4715 +
            (C10496 - C10497 + C10498 - C10499) * C4720 +
            (C10500 - C10501 + C10502 - C10503) * C47448) *
               C47369 * C47181 * C47229 +
           ((C10489 - C10488 + C10491 - C10490) * C4719 +
            (C10493 - C10492 + C10495 - C10494) * C4715 +
            (C10504 - C10505 + C10506 - C10507) * C4720 +
            (C10508 - C10509 + C10510 - C10511) * C47448) *
               C47369 * C47181 * C2840) *
              C47149 +
          (((C10311 - C10310 + C10313 - C10312) * C4719 +
            (C10315 - C10314 + C10317 - C10316) * C4715 +
            (C10318 - C10319 + C10320 - C10321) * C4720 +
            (C10322 - C10323 + C10324 - C10325) * C47448) *
               C47369 * C47181 * C47222 +
           ((C10497 - C10496 + C10499 - C10498) * C4719 +
            (C10501 - C10500 + C10503 - C10502) * C4715 +
            (C10820 - C10821 + C10822 - C10823) * C4720 +
            (C10824 - C10825 + C10826 - C10827) * C47448) *
               C47369 * C47181 * C47229 +
           ((C10505 - C10504 + C10507 - C10506) * C4719 +
            (C10509 - C10508 + C10511 - C10510) * C4715 +
            (C10297 * C311 - C10299 * C294 + C47481 * C1557 - C10300 * C1556) *
                C4720 +
            (C10297 * C324 - C10299 * C312 + C47481 * C1559 - C10300 * C1558) *
                C47448) *
               C47369 * C47181 * C2840) *
              C2843)) /
        (p * q * std::sqrt(p + q));
    d2ee[51] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C10297 * C124 - C10299 * C117 + C47481 * C478 - C10300 * C468) *
                 C4719 +
             (C10297 * C138 - C10299 * C125 + C47481 * C498 - C10300 * C479) *
                 C4715 +
             (C10302 - C10303 + C10304 - C10305) * C4720 +
             (C10306 - C10307 + C10308 - C10309) * C47448) *
                C47369 * C47430 +
            ((C10299 * C468 - C10297 * C478 + C10300 * C471 - C47481 * C484) *
                 C4719 +
             (C10299 * C479 - C10297 * C498 + C10300 * C485 - C47481 * C501) *
                 C4715 +
             (C10658 - C10659 + C10660 - C10661) * C4720 +
             (C10662 - C10663 + C10664 - C10665) * C47448) *
                C47369 * C47268) *
               C47222 +
           (((C10299 * C287 - C10297 * C297 + C10300 * C906 - C47481 * C911) *
                 C4719 +
             (C10299 * C298 - C10297 * C317 + C10300 * C912 - C47481 * C921) *
                 C4715 +
             (C10480 - C10481 + C10482 - C10483) * C4720 +
             (C10484 - C10485 + C10486 - C10487) * C47448) *
                C47369 * C47430 +
            ((C10297 * C911 - C10299 * C906 + C47481 * C1267 - C10300 * C1258) *
                 C4719 +
             (C10297 * C921 - C10299 * C912 + C47481 * C1285 - C10300 * C1268) *
                 C4715 +
             (C11160 - C11161 + C11162 - C11163) * C4720 +
             (C11164 - C11165 + C11166 - C11167) * C47448) *
                C47369 * C47268) *
               C47229 +
           (((C10297 * C303 - C10299 * C290 + C47481 * C1273 - C10300 * C1261) *
                 C4719 +
             (C10297 * C320 - C10299 * C304 + C47481 * C1288 - C10300 * C1274) *
                 C4715 +
             (C10488 - C10489 + C10490 - C10491) * C4720 +
             (C10492 - C10493 + C10494 - C10495) * C47448) *
                C47369 * C47430 +
            ((C10299 * C1261 - C10297 * C1273 + C10300 * C1264 -
              C47481 * C1279) *
                 C4719 +
             (C10299 * C1274 - C10297 * C1288 + C10300 * C1280 -
              C47481 * C1291) *
                 C4715 +
             (C11882 - C11883 + C11884 - C11885) * C4720 +
             (C11886 - C11887 + C11888 - C11889) * C47448) *
                C47369 * C47268) *
               C2840) *
              C2580 +
          ((((C10303 - C10302 + C10305 - C10304) * C4719 +
             (C10307 - C10306 + C10309 - C10308) * C4715 +
             (C10310 - C10311 + C10312 - C10313) * C4720 +
             (C10314 - C10315 + C10316 - C10317) * C47448) *
                C47369 * C47430 +
            ((C10659 - C10658 + C10661 - C10660) * C4719 +
             (C10663 - C10662 + C10665 - C10664) * C4715 +
             (C10674 - C10675 + C10676 - C10677) * C4720 +
             (C10678 - C10679 + C10680 - C10681) * C47448) *
                C47369 * C47268) *
               C47222 +
           (((C10481 - C10480 + C10483 - C10482) * C4719 +
             (C10485 - C10484 + C10487 - C10486) * C4715 +
             (C10496 - C10497 + C10498 - C10499) * C4720 +
             (C10500 - C10501 + C10502 - C10503) * C47448) *
                C47369 * C47430 +
            ((C11161 - C11160 + C11163 - C11162) * C4719 +
             (C11165 - C11164 + C11167 - C11166) * C4715 +
             (C11168 - C11169 + C11170 - C11171) * C4720 +
             (C11172 - C11173 + C11174 - C11175) * C47448) *
                C47369 * C47268) *
               C47229 +
           (((C10489 - C10488 + C10491 - C10490) * C4719 +
             (C10493 - C10492 + C10495 - C10494) * C4715 +
             (C10504 - C10505 + C10506 - C10507) * C4720 +
             (C10508 - C10509 + C10510 - C10511) * C47448) *
                C47369 * C47430 +
            ((C11883 - C11882 + C11885 - C11884) * C4719 +
             (C11887 - C11886 + C11889 - C11888) * C4715 +
             (C10297 * C1277 - C10299 * C1263 + C47481 * C1283 -
              C10300 * C1266) *
                 C4720 +
             (C10297 * C1290 - C10299 * C1278 + C47481 * C1293 -
              C10300 * C1284) *
                 C47448) *
                C47369 * C47268) *
               C2840) *
              C47146)) /
        (p * q * std::sqrt(p + q));
    d2ee[52] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C10297 * C124 - C10299 * C117 + C47481 * C478 - C10300 * C468) *
                C4719 +
            (C10297 * C138 - C10299 * C125 + C47481 * C498 - C10300 * C479) *
                C4715 +
            (C10302 - C10303 + C10304 - C10305) * C4720 +
            (C10306 - C10307 + C10308 - C10309) * C47448) *
               C47369 * C47181 * C47507 +
           ((C10299 * C287 - C10297 * C297 + C10300 * C906 - C47481 * C911) *
                C4719 +
            (C10299 * C298 - C10297 * C317 + C10300 * C912 - C47481 * C921) *
                C4715 +
            (C10480 - C10481 + C10482 - C10483) * C4720 +
            (C10484 - C10485 + C10486 - C10487) * C47448) *
               C47369 * C47181 * C47503 +
           ((C10297 * C303 - C10299 * C290 + C47481 * C1273 - C10300 * C1261) *
                C4719 +
            (C10297 * C320 - C10299 * C304 + C47481 * C1288 - C10300 * C1274) *
                C4715 +
            (C10488 - C10489 + C10490 - C10491) * C4720 +
            (C10492 - C10493 + C10494 - C10495) * C47448) *
               C47369 * C47181 * C47493 +
           ((C10299 * C1124 - C10297 * C1130 + C10300 * C1666 -
             C47481 * C1669) *
                C4719 +
            (C10299 * C1131 - C10297 * C1142 + C10300 * C1670 -
             C47481 * C1675) *
                C4715 +
            (C11680 - C11681 + C11682 - C11683) * C4720 +
            (C11684 - C11685 + C11686 - C11687) * C47448) *
               C47369 * C47181 * C47471) *
              C2580 +
          (((C10303 - C10302 + C10305 - C10304) * C4719 +
            (C10307 - C10306 + C10309 - C10308) * C4715 +
            (C10310 - C10311 + C10312 - C10313) * C4720 +
            (C10314 - C10315 + C10316 - C10317) * C47448) *
               C47369 * C47181 * C47507 +
           ((C10481 - C10480 + C10483 - C10482) * C4719 +
            (C10485 - C10484 + C10487 - C10486) * C4715 +
            (C10496 - C10497 + C10498 - C10499) * C4720 +
            (C10500 - C10501 + C10502 - C10503) * C47448) *
               C47369 * C47181 * C47503 +
           ((C10489 - C10488 + C10491 - C10490) * C4719 +
            (C10493 - C10492 + C10495 - C10494) * C4715 +
            (C10504 - C10505 + C10506 - C10507) * C4720 +
            (C10508 - C10509 + C10510 - C10511) * C47448) *
               C47369 * C47181 * C47493 +
           ((C11681 - C11680 + C11683 - C11682) * C4719 +
            (C11685 - C11684 + C11687 - C11686) * C4715 +
            (C10297 * C1134 - C10299 * C1126 + C47481 * C1673 -
             C10300 * C1668) *
                C4720 +
            (C10297 * C1144 - C10299 * C1135 + C47481 * C1677 -
             C10300 * C1674) *
                C47448) *
               C47369 * C47181 * C47471) *
              C47146)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C10297 * C124 - C10299 * C117 + C47481 * C478 - C10300 * C468) *
                C4719 +
            (C10297 * C138 - C10299 * C125 + C47481 * C498 - C10300 * C479) *
                C4715 +
            (C10302 - C10303 + C10304 - C10305) * C4720 +
            (C10306 - C10307 + C10308 - C10309) * C47448) *
               C47369 * C47181 * C2472 +
           ((C10299 * C287 - C10297 * C297 + C10300 * C906 - C47481 * C911) *
                C4719 +
            (C10299 * C298 - C10297 * C317 + C10300 * C912 - C47481 * C921) *
                C4715 +
            (C10480 - C10481 + C10482 - C10483) * C4720 +
            (C10484 - C10485 + C10486 - C10487) * C47448) *
               C47369 * C47181 * C47226) *
              C47506 +
          (((C10303 - C10302 + C10305 - C10304) * C4719 +
            (C10307 - C10306 + C10309 - C10308) * C4715 +
            (C10310 - C10311 + C10312 - C10313) * C4720 +
            (C10314 - C10315 + C10316 - C10317) * C47448) *
               C47369 * C47181 * C2472 +
           ((C10481 - C10480 + C10483 - C10482) * C4719 +
            (C10485 - C10484 + C10487 - C10486) * C4715 +
            (C10496 - C10497 + C10498 - C10499) * C4720 +
            (C10500 - C10501 + C10502 - C10503) * C47448) *
               C47369 * C47181 * C47226) *
              C47499 +
          (((C10311 - C10310 + C10313 - C10312) * C4719 +
            (C10315 - C10314 + C10317 - C10316) * C4715 +
            (C10318 - C10319 + C10320 - C10321) * C4720 +
            (C10322 - C10323 + C10324 - C10325) * C47448) *
               C47369 * C47181 * C2472 +
           ((C10497 - C10496 + C10499 - C10498) * C4719 +
            (C10501 - C10500 + C10503 - C10502) * C4715 +
            (C10820 - C10821 + C10822 - C10823) * C4720 +
            (C10824 - C10825 + C10826 - C10827) * C47448) *
               C47369 * C47181 * C47226) *
              C47486 +
          (((C10319 - C10318 + C10321 - C10320) * C4719 +
            (C10323 - C10322 + C10325 - C10324) * C4715 +
            (C10326 - C10327 + C10328 - C10329) * C4720 +
            (C10330 - C10331 + C10332 - C10333) * C47448) *
               C47369 * C47181 * C2472 +
           ((C10821 - C10820 + C10823 - C10822) * C4719 +
            (C10825 - C10824 + C10827 - C10826) * C4715 +
            (C10297 * C313 - C10299 * C295 + C47481 * C919 - C10300 * C910) *
                C4720 +
            (C10297 * C325 - C10299 * C314 + C47481 * C925 - C10300 * C920) *
                C47448) *
               C47369 * C47181 * C47226) *
              C47465)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C10297 * C124 - C10299 * C117 + C47481 * C478 - C10300 * C468) *
                 C4719 +
             (C10297 * C138 - C10299 * C125 + C47481 * C498 - C10300 * C479) *
                 C4715 +
             (C10302 - C10303 + C10304 - C10305) * C4720 +
             (C10306 - C10307 + C10308 - C10309) * C47448) *
                C47369 * C47501 +
            ((C10299 * C468 - C10297 * C478 + C10300 * C471 - C47481 * C484) *
                 C4719 +
             (C10299 * C479 - C10297 * C498 + C10300 * C485 - C47481 * C501) *
                 C4715 +
             (C10658 - C10659 + C10660 - C10661) * C4720 +
             (C10662 - C10663 + C10664 - C10665) * C47448) *
                C47369 * C47490 +
            ((C10297 * C484 - C10299 * C471 + C47481 * C1974 - C10300 * C1968) *
                 C4719 +
             (C10297 * C501 - C10299 * C485 + C47481 * C1986 - C10300 * C1975) *
                 C4715 +
             (C10666 - C10667 + C10668 - C10669) * C4720 +
             (C10670 - C10671 + C10672 - C10673) * C47448) *
                C47369 * C47464) *
               C2472 +
           (((C10299 * C287 - C10297 * C297 + C10300 * C906 - C47481 * C911) *
                 C4719 +
             (C10299 * C298 - C10297 * C317 + C10300 * C912 - C47481 * C921) *
                 C4715 +
             (C10480 - C10481 + C10482 - C10483) * C4720 +
             (C10484 - C10485 + C10486 - C10487) * C47448) *
                C47369 * C47501 +
            ((C10297 * C911 - C10299 * C906 + C47481 * C1267 - C10300 * C1258) *
                 C4719 +
             (C10297 * C921 - C10299 * C912 + C47481 * C1285 - C10300 * C1268) *
                 C4715 +
             (C11160 - C11161 + C11162 - C11163) * C4720 +
             (C11164 - C11165 + C11166 - C11167) * C47448) *
                C47369 * C47490 +
            ((C10299 * C1258 - C10297 * C1267 + C10300 * C2362 -
              C47481 * C2365) *
                 C4719 +
             (C10299 * C1268 - C10297 * C1285 + C10300 * C2366 -
              C47481 * C2371) *
                 C4715 +
             (C12596 - C12597 + C12598 - C12599) * C4720 +
             (C12600 - C12601 + C12602 - C12603) * C47448) *
                C47369 * C47464) *
               C47226) *
              C2580 +
          ((((C10303 - C10302 + C10305 - C10304) * C4719 +
             (C10307 - C10306 + C10309 - C10308) * C4715 +
             (C10310 - C10311 + C10312 - C10313) * C4720 +
             (C10314 - C10315 + C10316 - C10317) * C47448) *
                C47369 * C47501 +
            ((C10659 - C10658 + C10661 - C10660) * C4719 +
             (C10663 - C10662 + C10665 - C10664) * C4715 +
             (C10674 - C10675 + C10676 - C10677) * C4720 +
             (C10678 - C10679 + C10680 - C10681) * C47448) *
                C47369 * C47490 +
            ((C10667 - C10666 + C10669 - C10668) * C4719 +
             (C10671 - C10670 + C10673 - C10672) * C4715 +
             (C10682 - C10683 + C10684 - C10685) * C4720 +
             (C10686 - C10687 + C10688 - C10689) * C47448) *
                C47369 * C47464) *
               C2472 +
           (((C10481 - C10480 + C10483 - C10482) * C4719 +
             (C10485 - C10484 + C10487 - C10486) * C4715 +
             (C10496 - C10497 + C10498 - C10499) * C4720 +
             (C10500 - C10501 + C10502 - C10503) * C47448) *
                C47369 * C47501 +
            ((C11161 - C11160 + C11163 - C11162) * C4719 +
             (C11165 - C11164 + C11167 - C11166) * C4715 +
             (C11168 - C11169 + C11170 - C11171) * C4720 +
             (C11172 - C11173 + C11174 - C11175) * C47448) *
                C47369 * C47490 +
            ((C12597 - C12596 + C12599 - C12598) * C4719 +
             (C12601 - C12600 + C12603 - C12602) * C4715 +
             (C10297 * C1271 - C10299 * C1260 + C47481 * C2369 -
              C10300 * C2364) *
                 C4720 +
             (C10297 * C1287 - C10299 * C1272 + C47481 * C2373 -
              C10300 * C2370) *
                 C47448) *
                C47369 * C47464) *
               C47226) *
              C47146)) /
            (p * q * std::sqrt(p + q));
    d2ee[53] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C10297 * C124 - C10299 * C117 + C47481 * C478 - C10300 * C468) *
                 C4719 +
             (C10297 * C138 - C10299 * C125 + C47481 * C498 - C10300 * C479) *
                 C4715 +
             (C10302 - C10303 + C10304 - C10305) * C4720 +
             (C10306 - C10307 + C10308 - C10309) * C47448) *
                C47369 * C47430 +
            ((C10299 * C468 - C10297 * C478 + C10300 * C471 - C47481 * C484) *
                 C4719 +
             (C10299 * C479 - C10297 * C498 + C10300 * C485 - C47481 * C501) *
                 C4715 +
             (C10658 - C10659 + C10660 - C10661) * C4720 +
             (C10662 - C10663 + C10664 - C10665) * C47448) *
                C47369 * C47268) *
               C2472 +
           (((C10299 * C287 - C10297 * C297 + C10300 * C906 - C47481 * C911) *
                 C4719 +
             (C10299 * C298 - C10297 * C317 + C10300 * C912 - C47481 * C921) *
                 C4715 +
             (C10480 - C10481 + C10482 - C10483) * C4720 +
             (C10484 - C10485 + C10486 - C10487) * C47448) *
                C47369 * C47430 +
            ((C10297 * C911 - C10299 * C906 + C47481 * C1267 - C10300 * C1258) *
                 C4719 +
             (C10297 * C921 - C10299 * C912 + C47481 * C1285 - C10300 * C1268) *
                 C4715 +
             (C11160 - C11161 + C11162 - C11163) * C4720 +
             (C11164 - C11165 + C11166 - C11167) * C47448) *
                C47369 * C47268) *
               C47226) *
              C47140 +
          ((((C10303 - C10302 + C10305 - C10304) * C4719 +
             (C10307 - C10306 + C10309 - C10308) * C4715 +
             (C10310 - C10311 + C10312 - C10313) * C4720 +
             (C10314 - C10315 + C10316 - C10317) * C47448) *
                C47369 * C47430 +
            ((C10659 - C10658 + C10661 - C10660) * C4719 +
             (C10663 - C10662 + C10665 - C10664) * C4715 +
             (C10674 - C10675 + C10676 - C10677) * C4720 +
             (C10678 - C10679 + C10680 - C10681) * C47448) *
                C47369 * C47268) *
               C2472 +
           (((C10481 - C10480 + C10483 - C10482) * C4719 +
             (C10485 - C10484 + C10487 - C10486) * C4715 +
             (C10496 - C10497 + C10498 - C10499) * C4720 +
             (C10500 - C10501 + C10502 - C10503) * C47448) *
                C47369 * C47430 +
            ((C11161 - C11160 + C11163 - C11162) * C4719 +
             (C11165 - C11164 + C11167 - C11166) * C4715 +
             (C11168 - C11169 + C11170 - C11171) * C4720 +
             (C11172 - C11173 + C11174 - C11175) * C47448) *
                C47369 * C47268) *
               C47226) *
              C47149 +
          ((((C10311 - C10310 + C10313 - C10312) * C4719 +
             (C10315 - C10314 + C10317 - C10316) * C4715 +
             (C10318 - C10319 + C10320 - C10321) * C4720 +
             (C10322 - C10323 + C10324 - C10325) * C47448) *
                C47369 * C47430 +
            ((C10675 - C10674 + C10677 - C10676) * C4719 +
             (C10679 - C10678 + C10681 - C10680) * C4715 +
             (C10958 - C10959 + C10960 - C10961) * C4720 +
             (C10962 - C10963 + C10964 - C10965) * C47448) *
                C47369 * C47268) *
               C2472 +
           (((C10497 - C10496 + C10499 - C10498) * C4719 +
             (C10501 - C10500 + C10503 - C10502) * C4715 +
             (C10820 - C10821 + C10822 - C10823) * C4720 +
             (C10824 - C10825 + C10826 - C10827) * C47448) *
                C47369 * C47430 +
            ((C11169 - C11168 + C11171 - C11170) * C4719 +
             (C11173 - C11172 + C11175 - C11174) * C4715 +
             (C10297 * C917 - C10299 * C909 + C47481 * C2139 - C10300 * C2138) *
                 C4720 +
             (C10297 * C924 - C10299 * C918 + C47481 * C2141 - C10300 * C2140) *
                 C47448) *
                C47369 * C47268) *
               C47226) *
              C2843)) /
        (p * q * std::sqrt(p + q));
    d2ee[54] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C10297 * C124 - C10299 * C117 + C47481 * C478 - C10300 * C468) *
                C4719 +
            (C10297 * C138 - C10299 * C125 + C47481 * C498 - C10300 * C479) *
                C4715 +
            (C10302 - C10303 + C10304 - C10305) * C4720 +
            (C10306 - C10307 + C10308 - C10309) * C47448) *
               C47369 * C47181 * C2472 +
           ((C10299 * C287 - C10297 * C297 + C10300 * C906 - C47481 * C911) *
                C4719 +
            (C10299 * C298 - C10297 * C317 + C10300 * C912 - C47481 * C921) *
                C4715 +
            (C10480 - C10481 + C10482 - C10483) * C4720 +
            (C10484 - C10485 + C10486 - C10487) * C47448) *
               C47369 * C47181 * C47226) *
              C47506 +
          (((C10303 - C10302 + C10305 - C10304) * C4719 +
            (C10307 - C10306 + C10309 - C10308) * C4715 +
            (C10310 - C10311 + C10312 - C10313) * C4720 +
            (C10314 - C10315 + C10316 - C10317) * C47448) *
               C47369 * C47181 * C2472 +
           ((C10481 - C10480 + C10483 - C10482) * C4719 +
            (C10485 - C10484 + C10487 - C10486) * C4715 +
            (C10496 - C10497 + C10498 - C10499) * C4720 +
            (C10500 - C10501 + C10502 - C10503) * C47448) *
               C47369 * C47181 * C47226) *
              C47499 +
          (((C10311 - C10310 + C10313 - C10312) * C4719 +
            (C10315 - C10314 + C10317 - C10316) * C4715 +
            (C10318 - C10319 + C10320 - C10321) * C4720 +
            (C10322 - C10323 + C10324 - C10325) * C47448) *
               C47369 * C47181 * C2472 +
           ((C10497 - C10496 + C10499 - C10498) * C4719 +
            (C10501 - C10500 + C10503 - C10502) * C4715 +
            (C10820 - C10821 + C10822 - C10823) * C4720 +
            (C10824 - C10825 + C10826 - C10827) * C47448) *
               C47369 * C47181 * C47226) *
              C47486 +
          (((C10319 - C10318 + C10321 - C10320) * C4719 +
            (C10323 - C10322 + C10325 - C10324) * C4715 +
            (C10326 - C10327 + C10328 - C10329) * C4720 +
            (C10330 - C10331 + C10332 - C10333) * C47448) *
               C47369 * C47181 * C2472 +
           ((C10821 - C10820 + C10823 - C10822) * C4719 +
            (C10825 - C10824 + C10827 - C10826) * C4715 +
            (C10297 * C313 - C10299 * C295 + C47481 * C919 - C10300 * C910) *
                C4720 +
            (C10297 * C325 - C10299 * C314 + C47481 * C925 - C10300 * C920) *
                C47448) *
               C47369 * C47181 * C47226) *
              C47465)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C10297 * C124 - C10299 * C117 + C47481 * C478 - C10300 * C468) *
                C4719 +
            (C10297 * C138 - C10299 * C125 + C47481 * C498 - C10300 * C479) *
                C4715 +
            (C10302 - C10303 + C10304 - C10305) * C4720 +
            (C10306 - C10307 + C10308 - C10309) * C47448) *
               C47369 * C47181 * C47507 +
           ((C10299 * C287 - C10297 * C297 + C10300 * C906 - C47481 * C911) *
                C4719 +
            (C10299 * C298 - C10297 * C317 + C10300 * C912 - C47481 * C921) *
                C4715 +
            (C10480 - C10481 + C10482 - C10483) * C4720 +
            (C10484 - C10485 + C10486 - C10487) * C47448) *
               C47369 * C47181 * C47503 +
           ((C10297 * C303 - C10299 * C290 + C47481 * C1273 - C10300 * C1261) *
                C4719 +
            (C10297 * C320 - C10299 * C304 + C47481 * C1288 - C10300 * C1274) *
                C4715 +
            (C10488 - C10489 + C10490 - C10491) * C4720 +
            (C10492 - C10493 + C10494 - C10495) * C47448) *
               C47369 * C47181 * C47493 +
           ((C10299 * C1124 - C10297 * C1130 + C10300 * C1666 -
             C47481 * C1669) *
                C4719 +
            (C10299 * C1131 - C10297 * C1142 + C10300 * C1670 -
             C47481 * C1675) *
                C4715 +
            (C11680 - C11681 + C11682 - C11683) * C4720 +
            (C11684 - C11685 + C11686 - C11687) * C47448) *
               C47369 * C47181 * C47471) *
              C2580 +
          (((C10303 - C10302 + C10305 - C10304) * C4719 +
            (C10307 - C10306 + C10309 - C10308) * C4715 +
            (C10310 - C10311 + C10312 - C10313) * C4720 +
            (C10314 - C10315 + C10316 - C10317) * C47448) *
               C47369 * C47181 * C47507 +
           ((C10481 - C10480 + C10483 - C10482) * C4719 +
            (C10485 - C10484 + C10487 - C10486) * C4715 +
            (C10496 - C10497 + C10498 - C10499) * C4720 +
            (C10500 - C10501 + C10502 - C10503) * C47448) *
               C47369 * C47181 * C47503 +
           ((C10489 - C10488 + C10491 - C10490) * C4719 +
            (C10493 - C10492 + C10495 - C10494) * C4715 +
            (C10504 - C10505 + C10506 - C10507) * C4720 +
            (C10508 - C10509 + C10510 - C10511) * C47448) *
               C47369 * C47181 * C47493 +
           ((C11681 - C11680 + C11683 - C11682) * C4719 +
            (C11685 - C11684 + C11687 - C11686) * C4715 +
            (C10297 * C1134 - C10299 * C1126 + C47481 * C1673 -
             C10300 * C1668) *
                C4720 +
            (C10297 * C1144 - C10299 * C1135 + C47481 * C1677 -
             C10300 * C1674) *
                C47448) *
               C47369 * C47181 * C47471) *
              C47146)) /
            (p * q * std::sqrt(p + q));
    d2ee[55] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C10297 * C124 - C10299 * C117 + C47481 * C478 - C10300 * C468) *
                 C4719 +
             (C10297 * C138 - C10299 * C125 + C47481 * C498 - C10300 * C479) *
                 C4715 +
             (C10302 - C10303 + C10304 - C10305) * C4720 +
             (C10306 - C10307 + C10308 - C10309) * C47448) *
                C47369 * C3234 +
            ((C10299 * C468 - C10297 * C478 + C10300 * C471 - C47481 * C484) *
                 C4719 +
             (C10299 * C479 - C10297 * C498 + C10300 * C485 - C47481 * C501) *
                 C4715 +
             (C10658 - C10659 + C10660 - C10661) * C4720 +
             (C10662 - C10663 + C10664 - C10665) * C47448) *
                C47369 * C47268) *
               C47222 +
           (((C10299 * C287 - C10297 * C297 + C10300 * C906 - C47481 * C911) *
                 C4719 +
             (C10299 * C298 - C10297 * C317 + C10300 * C912 - C47481 * C921) *
                 C4715 +
             (C10480 - C10481 + C10482 - C10483) * C4720 +
             (C10484 - C10485 + C10486 - C10487) * C47448) *
                C47369 * C3234 +
            ((C10297 * C911 - C10299 * C906 + C47481 * C1267 - C10300 * C1258) *
                 C4719 +
             (C10297 * C921 - C10299 * C912 + C47481 * C1285 - C10300 * C1268) *
                 C4715 +
             (C11160 - C11161 + C11162 - C11163) * C4720 +
             (C11164 - C11165 + C11166 - C11167) * C47448) *
                C47369 * C47268) *
               C47229 +
           (((C10297 * C303 - C10299 * C290 + C47481 * C1273 - C10300 * C1261) *
                 C4719 +
             (C10297 * C320 - C10299 * C304 + C47481 * C1288 - C10300 * C1274) *
                 C4715 +
             (C10488 - C10489 + C10490 - C10491) * C4720 +
             (C10492 - C10493 + C10494 - C10495) * C47448) *
                C47369 * C3234 +
            ((C10299 * C1261 - C10297 * C1273 + C10300 * C1264 -
              C47481 * C1279) *
                 C4719 +
             (C10299 * C1274 - C10297 * C1288 + C10300 * C1280 -
              C47481 * C1291) *
                 C4715 +
             (C11882 - C11883 + C11884 - C11885) * C4720 +
             (C11886 - C11887 + C11888 - C11889) * C47448) *
                C47369 * C47268) *
               C2840) *
              C47415 +
          ((((C10303 - C10302 + C10305 - C10304) * C4719 +
             (C10307 - C10306 + C10309 - C10308) * C4715 +
             (C10310 - C10311 + C10312 - C10313) * C4720 +
             (C10314 - C10315 + C10316 - C10317) * C47448) *
                C47369 * C3234 +
            ((C10659 - C10658 + C10661 - C10660) * C4719 +
             (C10663 - C10662 + C10665 - C10664) * C4715 +
             (C10674 - C10675 + C10676 - C10677) * C4720 +
             (C10678 - C10679 + C10680 - C10681) * C47448) *
                C47369 * C47268) *
               C47222 +
           (((C10481 - C10480 + C10483 - C10482) * C4719 +
             (C10485 - C10484 + C10487 - C10486) * C4715 +
             (C10496 - C10497 + C10498 - C10499) * C4720 +
             (C10500 - C10501 + C10502 - C10503) * C47448) *
                C47369 * C3234 +
            ((C11161 - C11160 + C11163 - C11162) * C4719 +
             (C11165 - C11164 + C11167 - C11166) * C4715 +
             (C11168 - C11169 + C11170 - C11171) * C4720 +
             (C11172 - C11173 + C11174 - C11175) * C47448) *
                C47369 * C47268) *
               C47229 +
           (((C10489 - C10488 + C10491 - C10490) * C4719 +
             (C10493 - C10492 + C10495 - C10494) * C4715 +
             (C10504 - C10505 + C10506 - C10507) * C4720 +
             (C10508 - C10509 + C10510 - C10511) * C47448) *
                C47369 * C3234 +
            ((C11883 - C11882 + C11885 - C11884) * C4719 +
             (C11887 - C11886 + C11889 - C11888) * C4715 +
             (C10297 * C1277 - C10299 * C1263 + C47481 * C1283 -
              C10300 * C1266) *
                 C4720 +
             (C10297 * C1290 - C10299 * C1278 + C47481 * C1293 -
              C10300 * C1284) *
                 C47448) *
                C47369 * C47268) *
               C2840) *
              C47146)) /
        (p * q * std::sqrt(p + q));
    d2ee[56] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C10297 * C124 - C10299 * C117 + C47481 * C478 - C10300 * C468) *
                C4719 +
            (C10297 * C138 - C10299 * C125 + C47481 * C498 - C10300 * C479) *
                C4715 +
            (C10302 - C10303 + C10304 - C10305) * C4720 +
            (C10306 - C10307 + C10308 - C10309) * C47448) *
               C47369 * C47264 +
           ((C10299 * C468 - C10297 * C478 + C10300 * C471 - C47481 * C484) *
                C4719 +
            (C10299 * C479 - C10297 * C498 + C10300 * C485 - C47481 * C501) *
                C4715 +
            (C10658 - C10659 + C10660 - C10661) * C4720 +
            (C10662 - C10663 + C10664 - C10665) * C47448) *
               C47369 * C47271 +
           ((C10297 * C484 - C10299 * C471 + C47481 * C1974 - C10300 * C1968) *
                C4719 +
            (C10297 * C501 - C10299 * C485 + C47481 * C1986 - C10300 * C1975) *
                C4715 +
            (C10666 - C10667 + C10668 - C10669) * C4720 +
            (C10670 - C10671 + C10672 - C10673) * C47448) *
               C47369 * C3742) *
              C47222 +
          (((C10299 * C287 - C10297 * C297 + C10300 * C906 - C47481 * C911) *
                C4719 +
            (C10299 * C298 - C10297 * C317 + C10300 * C912 - C47481 * C921) *
                C4715 +
            (C10480 - C10481 + C10482 - C10483) * C4720 +
            (C10484 - C10485 + C10486 - C10487) * C47448) *
               C47369 * C47264 +
           ((C10297 * C911 - C10299 * C906 + C47481 * C1267 - C10300 * C1258) *
                C4719 +
            (C10297 * C921 - C10299 * C912 + C47481 * C1285 - C10300 * C1268) *
                C4715 +
            (C11160 - C11161 + C11162 - C11163) * C4720 +
            (C11164 - C11165 + C11166 - C11167) * C47448) *
               C47369 * C47271 +
           ((C10299 * C1258 - C10297 * C1267 + C10300 * C2362 -
             C47481 * C2365) *
                C4719 +
            (C10299 * C1268 - C10297 * C1285 + C10300 * C2366 -
             C47481 * C2371) *
                C4715 +
            (C12596 - C12597 + C12598 - C12599) * C4720 +
            (C12600 - C12601 + C12602 - C12603) * C47448) *
               C47369 * C3742) *
              C47229 +
          (((C10297 * C303 - C10299 * C290 + C47481 * C1273 - C10300 * C1261) *
                C4719 +
            (C10297 * C320 - C10299 * C304 + C47481 * C1288 - C10300 * C1274) *
                C4715 +
            (C10488 - C10489 + C10490 - C10491) * C4720 +
            (C10492 - C10493 + C10494 - C10495) * C47448) *
               C47369 * C47264 +
           ((C10299 * C1261 - C10297 * C1273 + C10300 * C1264 -
             C47481 * C1279) *
                C4719 +
            (C10299 * C1274 - C10297 * C1288 + C10300 * C1280 -
             C47481 * C1291) *
                C4715 +
            (C11882 - C11883 + C11884 - C11885) * C4720 +
            (C11886 - C11887 + C11888 - C11889) * C47448) *
               C47369 * C47271 +
           ((C10297 * C1279 - C10299 * C1264 + C47481 * C7241 -
             C10300 * C7239) *
                C4719 +
            (C10297 * C1291 - C10299 * C1280 + C47481 * C7245 -
             C10300 * C7242) *
                C4715 +
            (C10297 * C1281 - C10299 * C1265 + C47481 * C7243 -
             C10300 * C7240) *
                C4720 +
            (C10297 * C1292 - C10299 * C1282 + C47481 * C7246 -
             C10300 * C7244) *
                C47448) *
               C47369 * C3742) *
              C2840) *
         C47135) /
        (p * q * std::sqrt(p + q));
    d2ee[57] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C10297 * C124 - C10299 * C117 + C47481 * C478 - C10300 * C468) *
                C4719 +
            (C10297 * C138 - C10299 * C125 + C47481 * C498 - C10300 * C479) *
                C4715 +
            (C10302 - C10303 + C10304 - C10305) * C4720 +
            (C10306 - C10307 + C10308 - C10309) * C47448) *
               C47369 * C3234 +
           ((C10299 * C468 - C10297 * C478 + C10300 * C471 - C47481 * C484) *
                C4719 +
            (C10299 * C479 - C10297 * C498 + C10300 * C485 - C47481 * C501) *
                C4715 +
            (C10658 - C10659 + C10660 - C10661) * C4720 +
            (C10662 - C10663 + C10664 - C10665) * C47448) *
               C47369 * C47268) *
              C47507 +
          (((C10299 * C287 - C10297 * C297 + C10300 * C906 - C47481 * C911) *
                C4719 +
            (C10299 * C298 - C10297 * C317 + C10300 * C912 - C47481 * C921) *
                C4715 +
            (C10480 - C10481 + C10482 - C10483) * C4720 +
            (C10484 - C10485 + C10486 - C10487) * C47448) *
               C47369 * C3234 +
           ((C10297 * C911 - C10299 * C906 + C47481 * C1267 - C10300 * C1258) *
                C4719 +
            (C10297 * C921 - C10299 * C912 + C47481 * C1285 - C10300 * C1268) *
                C4715 +
            (C11160 - C11161 + C11162 - C11163) * C4720 +
            (C11164 - C11165 + C11166 - C11167) * C47448) *
               C47369 * C47268) *
              C47503 +
          (((C10297 * C303 - C10299 * C290 + C47481 * C1273 - C10300 * C1261) *
                C4719 +
            (C10297 * C320 - C10299 * C304 + C47481 * C1288 - C10300 * C1274) *
                C4715 +
            (C10488 - C10489 + C10490 - C10491) * C4720 +
            (C10492 - C10493 + C10494 - C10495) * C47448) *
               C47369 * C3234 +
           ((C10299 * C1261 - C10297 * C1273 + C10300 * C1264 -
             C47481 * C1279) *
                C4719 +
            (C10299 * C1274 - C10297 * C1288 + C10300 * C1280 -
             C47481 * C1291) *
                C4715 +
            (C11882 - C11883 + C11884 - C11885) * C4720 +
            (C11886 - C11887 + C11888 - C11889) * C47448) *
               C47369 * C47268) *
              C47493 +
          (((C10299 * C1124 - C10297 * C1130 + C10300 * C1666 -
             C47481 * C1669) *
                C4719 +
            (C10299 * C1131 - C10297 * C1142 + C10300 * C1670 -
             C47481 * C1675) *
                C4715 +
            (C11680 - C11681 + C11682 - C11683) * C4720 +
            (C11684 - C11685 + C11686 - C11687) * C47448) *
               C47369 * C3234 +
           ((C10297 * C1669 - C10299 * C1666 + C47481 * C5895 -
             C10300 * C5893) *
                C4719 +
            (C10297 * C1675 - C10299 * C1670 + C47481 * C5899 -
             C10300 * C5896) *
                C4715 +
            (C10297 * C1671 - C10299 * C1667 + C47481 * C5897 -
             C10300 * C5894) *
                C4720 +
            (C10297 * C1676 - C10299 * C1672 + C47481 * C5900 -
             C10300 * C5898) *
                C47448) *
               C47369 * C47268) *
              C47471) *
         C47135) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C10297 * C124 - C10299 * C117 + C47481 * C478 - C10300 * C468) *
                 C4719 +
             (C10297 * C138 - C10299 * C125 + C47481 * C498 - C10300 * C479) *
                 C4715 +
             (C10302 - C10303 + C10304 - C10305) * C4720 +
             (C10306 - C10307 + C10308 - C10309) * C47448) *
                C47369 * C3234 +
            ((C10299 * C468 - C10297 * C478 + C10300 * C471 - C47481 * C484) *
                 C4719 +
             (C10299 * C479 - C10297 * C498 + C10300 * C485 - C47481 * C501) *
                 C4715 +
             (C10658 - C10659 + C10660 - C10661) * C4720 +
             (C10662 - C10663 + C10664 - C10665) * C47448) *
                C47369 * C47268) *
               C2472 +
           (((C10299 * C287 - C10297 * C297 + C10300 * C906 - C47481 * C911) *
                 C4719 +
             (C10299 * C298 - C10297 * C317 + C10300 * C912 - C47481 * C921) *
                 C4715 +
             (C10480 - C10481 + C10482 - C10483) * C4720 +
             (C10484 - C10485 + C10486 - C10487) * C47448) *
                C47369 * C3234 +
            ((C10297 * C911 - C10299 * C906 + C47481 * C1267 - C10300 * C1258) *
                 C4719 +
             (C10297 * C921 - C10299 * C912 + C47481 * C1285 - C10300 * C1268) *
                 C4715 +
             (C11160 - C11161 + C11162 - C11163) * C4720 +
             (C11164 - C11165 + C11166 - C11167) * C47448) *
                C47369 * C47268) *
               C47226) *
              C47497 +
          ((((C10303 - C10302 + C10305 - C10304) * C4719 +
             (C10307 - C10306 + C10309 - C10308) * C4715 +
             (C10310 - C10311 + C10312 - C10313) * C4720 +
             (C10314 - C10315 + C10316 - C10317) * C47448) *
                C47369 * C3234 +
            ((C10659 - C10658 + C10661 - C10660) * C4719 +
             (C10663 - C10662 + C10665 - C10664) * C4715 +
             (C10674 - C10675 + C10676 - C10677) * C4720 +
             (C10678 - C10679 + C10680 - C10681) * C47448) *
                C47369 * C47268) *
               C2472 +
           (((C10481 - C10480 + C10483 - C10482) * C4719 +
             (C10485 - C10484 + C10487 - C10486) * C4715 +
             (C10496 - C10497 + C10498 - C10499) * C4720 +
             (C10500 - C10501 + C10502 - C10503) * C47448) *
                C47369 * C3234 +
            ((C11161 - C11160 + C11163 - C11162) * C4719 +
             (C11165 - C11164 + C11167 - C11166) * C4715 +
             (C11168 - C11169 + C11170 - C11171) * C4720 +
             (C11172 - C11173 + C11174 - C11175) * C47448) *
                C47369 * C47268) *
               C47226) *
              C47484 +
          ((((C10311 - C10310 + C10313 - C10312) * C4719 +
             (C10315 - C10314 + C10317 - C10316) * C4715 +
             (C10318 - C10319 + C10320 - C10321) * C4720 +
             (C10322 - C10323 + C10324 - C10325) * C47448) *
                C47369 * C3234 +
            ((C10675 - C10674 + C10677 - C10676) * C4719 +
             (C10679 - C10678 + C10681 - C10680) * C4715 +
             (C10958 - C10959 + C10960 - C10961) * C4720 +
             (C10962 - C10963 + C10964 - C10965) * C47448) *
                C47369 * C47268) *
               C2472 +
           (((C10497 - C10496 + C10499 - C10498) * C4719 +
             (C10501 - C10500 + C10503 - C10502) * C4715 +
             (C10820 - C10821 + C10822 - C10823) * C4720 +
             (C10824 - C10825 + C10826 - C10827) * C47448) *
                C47369 * C3234 +
            ((C11169 - C11168 + C11171 - C11170) * C4719 +
             (C11173 - C11172 + C11175 - C11174) * C4715 +
             (C10297 * C917 - C10299 * C909 + C47481 * C2139 - C10300 * C2138) *
                 C4720 +
             (C10297 * C924 - C10299 * C918 + C47481 * C2141 - C10300 * C2140) *
                 C47448) *
                C47369 * C47268) *
               C47226) *
              C47455)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C10297 * C124 - C10299 * C117 + C47481 * C478 - C10300 * C468) *
                C4719 +
            (C10297 * C138 - C10299 * C125 + C47481 * C498 - C10300 * C479) *
                C4715 +
            (C10302 - C10303 + C10304 - C10305) * C4720 +
            (C10306 - C10307 + C10308 - C10309) * C47448) *
               C47369 * C47508 +
           ((C10299 * C468 - C10297 * C478 + C10300 * C471 - C47481 * C484) *
                C4719 +
            (C10299 * C479 - C10297 * C498 + C10300 * C485 - C47481 * C501) *
                C4715 +
            (C10658 - C10659 + C10660 - C10661) * C4720 +
            (C10662 - C10663 + C10664 - C10665) * C47448) *
               C47369 * C47505 +
           ((C10297 * C484 - C10299 * C471 + C47481 * C1974 - C10300 * C1968) *
                C4719 +
            (C10297 * C501 - C10299 * C485 + C47481 * C1986 - C10300 * C1975) *
                C4715 +
            (C10666 - C10667 + C10668 - C10669) * C4720 +
            (C10670 - C10671 + C10672 - C10673) * C47448) *
               C47369 * C47496 +
           ((C10299 * C1968 - C10297 * C1974 + C10300 * C1971 -
             C47481 * C1980) *
                C4719 +
            (C10299 * C1975 - C10297 * C1986 + C10300 * C1981 -
             C47481 * C1989) *
                C4715 +
            (C12734 - C12735 + C12736 - C12737) * C4720 +
            (C12738 - C12739 + C12740 - C12741) * C47448) *
               C47369 * C47477) *
              C2472 +
          (((C10299 * C287 - C10297 * C297 + C10300 * C906 - C47481 * C911) *
                C4719 +
            (C10299 * C298 - C10297 * C317 + C10300 * C912 - C47481 * C921) *
                C4715 +
            (C10480 - C10481 + C10482 - C10483) * C4720 +
            (C10484 - C10485 + C10486 - C10487) * C47448) *
               C47369 * C47508 +
           ((C10297 * C911 - C10299 * C906 + C47481 * C1267 - C10300 * C1258) *
                C4719 +
            (C10297 * C921 - C10299 * C912 + C47481 * C1285 - C10300 * C1268) *
                C4715 +
            (C11160 - C11161 + C11162 - C11163) * C4720 +
            (C11164 - C11165 + C11166 - C11167) * C47448) *
               C47369 * C47505 +
           ((C10299 * C1258 - C10297 * C1267 + C10300 * C2362 -
             C47481 * C2365) *
                C4719 +
            (C10299 * C1268 - C10297 * C1285 + C10300 * C2366 -
             C47481 * C2371) *
                C4715 +
            (C12596 - C12597 + C12598 - C12599) * C4720 +
            (C12600 - C12601 + C12602 - C12603) * C47448) *
               C47369 * C47496 +
           ((C10297 * C2365 - C10299 * C2362 + C47481 * C6771 -
             C10300 * C6769) *
                C4719 +
            (C10297 * C2371 - C10299 * C2366 + C47481 * C6775 -
             C10300 * C6772) *
                C4715 +
            (C10297 * C2367 - C10299 * C2363 + C47481 * C6773 -
             C10300 * C6770) *
                C4720 +
            (C10297 * C2372 - C10299 * C2368 + C47481 * C6776 -
             C10300 * C6774) *
                C47448) *
               C47369 * C47477) *
              C47226) *
         C47135) /
            (p * q * std::sqrt(p + q));
    d2ee[58] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C10297 * C124 - C10299 * C117 + C47481 * C478 - C10300 * C468) *
                 C4719 +
             (C10297 * C138 - C10299 * C125 + C47481 * C498 - C10300 * C479) *
                 C4715 +
             (C10302 - C10303 + C10304 - C10305) * C4720 +
             (C10306 - C10307 + C10308 - C10309) * C47448) *
                C47369 * C47264 +
            ((C10299 * C468 - C10297 * C478 + C10300 * C471 - C47481 * C484) *
                 C4719 +
             (C10299 * C479 - C10297 * C498 + C10300 * C485 - C47481 * C501) *
                 C4715 +
             (C10658 - C10659 + C10660 - C10661) * C4720 +
             (C10662 - C10663 + C10664 - C10665) * C47448) *
                C47369 * C47271 +
            ((C10297 * C484 - C10299 * C471 + C47481 * C1974 - C10300 * C1968) *
                 C4719 +
             (C10297 * C501 - C10299 * C485 + C47481 * C1986 - C10300 * C1975) *
                 C4715 +
             (C10666 - C10667 + C10668 - C10669) * C4720 +
             (C10670 - C10671 + C10672 - C10673) * C47448) *
                C47369 * C3742) *
               C2472 +
           (((C10299 * C287 - C10297 * C297 + C10300 * C906 - C47481 * C911) *
                 C4719 +
             (C10299 * C298 - C10297 * C317 + C10300 * C912 - C47481 * C921) *
                 C4715 +
             (C10480 - C10481 + C10482 - C10483) * C4720 +
             (C10484 - C10485 + C10486 - C10487) * C47448) *
                C47369 * C47264 +
            ((C10297 * C911 - C10299 * C906 + C47481 * C1267 - C10300 * C1258) *
                 C4719 +
             (C10297 * C921 - C10299 * C912 + C47481 * C1285 - C10300 * C1268) *
                 C4715 +
             (C11160 - C11161 + C11162 - C11163) * C4720 +
             (C11164 - C11165 + C11166 - C11167) * C47448) *
                C47369 * C47271 +
            ((C10299 * C1258 - C10297 * C1267 + C10300 * C2362 -
              C47481 * C2365) *
                 C4719 +
             (C10299 * C1268 - C10297 * C1285 + C10300 * C2366 -
              C47481 * C2371) *
                 C4715 +
             (C12596 - C12597 + C12598 - C12599) * C4720 +
             (C12600 - C12601 + C12602 - C12603) * C47448) *
                C47369 * C3742) *
               C47226) *
              C47415 +
          ((((C10303 - C10302 + C10305 - C10304) * C4719 +
             (C10307 - C10306 + C10309 - C10308) * C4715 +
             (C10310 - C10311 + C10312 - C10313) * C4720 +
             (C10314 - C10315 + C10316 - C10317) * C47448) *
                C47369 * C47264 +
            ((C10659 - C10658 + C10661 - C10660) * C4719 +
             (C10663 - C10662 + C10665 - C10664) * C4715 +
             (C10674 - C10675 + C10676 - C10677) * C4720 +
             (C10678 - C10679 + C10680 - C10681) * C47448) *
                C47369 * C47271 +
            ((C10667 - C10666 + C10669 - C10668) * C4719 +
             (C10671 - C10670 + C10673 - C10672) * C4715 +
             (C10682 - C10683 + C10684 - C10685) * C4720 +
             (C10686 - C10687 + C10688 - C10689) * C47448) *
                C47369 * C3742) *
               C2472 +
           (((C10481 - C10480 + C10483 - C10482) * C4719 +
             (C10485 - C10484 + C10487 - C10486) * C4715 +
             (C10496 - C10497 + C10498 - C10499) * C4720 +
             (C10500 - C10501 + C10502 - C10503) * C47448) *
                C47369 * C47264 +
            ((C11161 - C11160 + C11163 - C11162) * C4719 +
             (C11165 - C11164 + C11167 - C11166) * C4715 +
             (C11168 - C11169 + C11170 - C11171) * C4720 +
             (C11172 - C11173 + C11174 - C11175) * C47448) *
                C47369 * C47271 +
            ((C12597 - C12596 + C12599 - C12598) * C4719 +
             (C12601 - C12600 + C12603 - C12602) * C4715 +
             (C10297 * C1271 - C10299 * C1260 + C47481 * C2369 -
              C10300 * C2364) *
                 C4720 +
             (C10297 * C1287 - C10299 * C1272 + C47481 * C2373 -
              C10300 * C2370) *
                 C47448) *
                C47369 * C3742) *
               C47226) *
              C47146)) /
        (p * q * std::sqrt(p + q));
    d2ee[59] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C10297 * C124 - C10299 * C117 + C47481 * C478 - C10300 * C468) *
                 C4719 +
             (C10297 * C138 - C10299 * C125 + C47481 * C498 - C10300 * C479) *
                 C4715 +
             (C10302 - C10303 + C10304 - C10305) * C4720 +
             (C10306 - C10307 + C10308 - C10309) * C47448) *
                C47369 * C3234 +
            ((C10299 * C468 - C10297 * C478 + C10300 * C471 - C47481 * C484) *
                 C4719 +
             (C10299 * C479 - C10297 * C498 + C10300 * C485 - C47481 * C501) *
                 C4715 +
             (C10658 - C10659 + C10660 - C10661) * C4720 +
             (C10662 - C10663 + C10664 - C10665) * C47448) *
                C47369 * C47268) *
               C2472 +
           (((C10299 * C287 - C10297 * C297 + C10300 * C906 - C47481 * C911) *
                 C4719 +
             (C10299 * C298 - C10297 * C317 + C10300 * C912 - C47481 * C921) *
                 C4715 +
             (C10480 - C10481 + C10482 - C10483) * C4720 +
             (C10484 - C10485 + C10486 - C10487) * C47448) *
                C47369 * C3234 +
            ((C10297 * C911 - C10299 * C906 + C47481 * C1267 - C10300 * C1258) *
                 C4719 +
             (C10297 * C921 - C10299 * C912 + C47481 * C1285 - C10300 * C1268) *
                 C4715 +
             (C11160 - C11161 + C11162 - C11163) * C4720 +
             (C11164 - C11165 + C11166 - C11167) * C47448) *
                C47369 * C47268) *
               C47226) *
              C47497 +
          ((((C10303 - C10302 + C10305 - C10304) * C4719 +
             (C10307 - C10306 + C10309 - C10308) * C4715 +
             (C10310 - C10311 + C10312 - C10313) * C4720 +
             (C10314 - C10315 + C10316 - C10317) * C47448) *
                C47369 * C3234 +
            ((C10659 - C10658 + C10661 - C10660) * C4719 +
             (C10663 - C10662 + C10665 - C10664) * C4715 +
             (C10674 - C10675 + C10676 - C10677) * C4720 +
             (C10678 - C10679 + C10680 - C10681) * C47448) *
                C47369 * C47268) *
               C2472 +
           (((C10481 - C10480 + C10483 - C10482) * C4719 +
             (C10485 - C10484 + C10487 - C10486) * C4715 +
             (C10496 - C10497 + C10498 - C10499) * C4720 +
             (C10500 - C10501 + C10502 - C10503) * C47448) *
                C47369 * C3234 +
            ((C11161 - C11160 + C11163 - C11162) * C4719 +
             (C11165 - C11164 + C11167 - C11166) * C4715 +
             (C11168 - C11169 + C11170 - C11171) * C4720 +
             (C11172 - C11173 + C11174 - C11175) * C47448) *
                C47369 * C47268) *
               C47226) *
              C47484 +
          ((((C10311 - C10310 + C10313 - C10312) * C4719 +
             (C10315 - C10314 + C10317 - C10316) * C4715 +
             (C10318 - C10319 + C10320 - C10321) * C4720 +
             (C10322 - C10323 + C10324 - C10325) * C47448) *
                C47369 * C3234 +
            ((C10675 - C10674 + C10677 - C10676) * C4719 +
             (C10679 - C10678 + C10681 - C10680) * C4715 +
             (C10958 - C10959 + C10960 - C10961) * C4720 +
             (C10962 - C10963 + C10964 - C10965) * C47448) *
                C47369 * C47268) *
               C2472 +
           (((C10497 - C10496 + C10499 - C10498) * C4719 +
             (C10501 - C10500 + C10503 - C10502) * C4715 +
             (C10820 - C10821 + C10822 - C10823) * C4720 +
             (C10824 - C10825 + C10826 - C10827) * C47448) *
                C47369 * C3234 +
            ((C11169 - C11168 + C11171 - C11170) * C4719 +
             (C11173 - C11172 + C11175 - C11174) * C4715 +
             (C10297 * C917 - C10299 * C909 + C47481 * C2139 - C10300 * C2138) *
                 C4720 +
             (C10297 * C924 - C10299 * C918 + C47481 * C2141 - C10300 * C2140) *
                 C47448) *
                C47369 * C47268) *
               C47226) *
              C47455)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C10297 * C124 - C10299 * C117 + C47481 * C478 - C10300 * C468) *
                C4719 +
            (C10297 * C138 - C10299 * C125 + C47481 * C498 - C10300 * C479) *
                C4715 +
            (C10302 - C10303 + C10304 - C10305) * C4720 +
            (C10306 - C10307 + C10308 - C10309) * C47448) *
               C47369 * C3234 +
           ((C10299 * C468 - C10297 * C478 + C10300 * C471 - C47481 * C484) *
                C4719 +
            (C10299 * C479 - C10297 * C498 + C10300 * C485 - C47481 * C501) *
                C4715 +
            (C10658 - C10659 + C10660 - C10661) * C4720 +
            (C10662 - C10663 + C10664 - C10665) * C47448) *
               C47369 * C47268) *
              C47507 +
          (((C10299 * C287 - C10297 * C297 + C10300 * C906 - C47481 * C911) *
                C4719 +
            (C10299 * C298 - C10297 * C317 + C10300 * C912 - C47481 * C921) *
                C4715 +
            (C10480 - C10481 + C10482 - C10483) * C4720 +
            (C10484 - C10485 + C10486 - C10487) * C47448) *
               C47369 * C3234 +
           ((C10297 * C911 - C10299 * C906 + C47481 * C1267 - C10300 * C1258) *
                C4719 +
            (C10297 * C921 - C10299 * C912 + C47481 * C1285 - C10300 * C1268) *
                C4715 +
            (C11160 - C11161 + C11162 - C11163) * C4720 +
            (C11164 - C11165 + C11166 - C11167) * C47448) *
               C47369 * C47268) *
              C47503 +
          (((C10297 * C303 - C10299 * C290 + C47481 * C1273 - C10300 * C1261) *
                C4719 +
            (C10297 * C320 - C10299 * C304 + C47481 * C1288 - C10300 * C1274) *
                C4715 +
            (C10488 - C10489 + C10490 - C10491) * C4720 +
            (C10492 - C10493 + C10494 - C10495) * C47448) *
               C47369 * C3234 +
           ((C10299 * C1261 - C10297 * C1273 + C10300 * C1264 -
             C47481 * C1279) *
                C4719 +
            (C10299 * C1274 - C10297 * C1288 + C10300 * C1280 -
             C47481 * C1291) *
                C4715 +
            (C11882 - C11883 + C11884 - C11885) * C4720 +
            (C11886 - C11887 + C11888 - C11889) * C47448) *
               C47369 * C47268) *
              C47493 +
          (((C10299 * C1124 - C10297 * C1130 + C10300 * C1666 -
             C47481 * C1669) *
                C4719 +
            (C10299 * C1131 - C10297 * C1142 + C10300 * C1670 -
             C47481 * C1675) *
                C4715 +
            (C11680 - C11681 + C11682 - C11683) * C4720 +
            (C11684 - C11685 + C11686 - C11687) * C47448) *
               C47369 * C3234 +
           ((C10297 * C1669 - C10299 * C1666 + C47481 * C5895 -
             C10300 * C5893) *
                C4719 +
            (C10297 * C1675 - C10299 * C1670 + C47481 * C5899 -
             C10300 * C5896) *
                C4715 +
            (C10297 * C1671 - C10299 * C1667 + C47481 * C5897 -
             C10300 * C5894) *
                C4720 +
            (C10297 * C1676 - C10299 * C1672 + C47481 * C5900 -
             C10300 * C5898) *
                C47448) *
               C47369 * C47268) *
              C47471) *
         C47135) /
            (p * q * std::sqrt(p + q));
    d2ee[60] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C10297 * C124 - C10299 * C117 + C47481 * C478 - C10300 * C468) *
                C4719 +
            (C10297 * C138 - C10299 * C125 + C47481 * C498 - C10300 * C479) *
                C4715 +
            (C10302 - C10303 + C10304 - C10305) * C4720 +
            (C10306 - C10307 + C10308 - C10309) * C47448) *
               C47369 * C47181 * C1392 +
           ((C10299 * C287 - C10297 * C297 + C10300 * C906 - C47481 * C911) *
                C4719 +
            (C10299 * C298 - C10297 * C317 + C10300 * C912 - C47481 * C921) *
                C4715 +
            (C10480 - C10481 + C10482 - C10483) * C4720 +
            (C10484 - C10485 + C10486 - C10487) * C47448) *
               C47369 * C47181 * C1393 +
           ((C10297 * C303 - C10299 * C290 + C47481 * C1273 - C10300 * C1261) *
                C4719 +
            (C10297 * C320 - C10299 * C304 + C47481 * C1288 - C10300 * C1274) *
                C4715 +
            (C10488 - C10489 + C10490 - C10491) * C4720 +
            (C10492 - C10493 + C10494 - C10495) * C47448) *
               C47369 * C47181 * C1394 +
           ((C10299 * C1124 - C10297 * C1130 + C10300 * C1666 -
             C47481 * C1669) *
                C4719 +
            (C10299 * C1131 - C10297 * C1142 + C10300 * C1670 -
             C47481 * C1675) *
                C4715 +
            (C11680 - C11681 + C11682 - C11683) * C4720 +
            (C11684 - C11685 + C11686 - C11687) * C47448) *
               C47369 * C47181 * C47471) *
              C47415 +
          (((C10303 - C10302 + C10305 - C10304) * C4719 +
            (C10307 - C10306 + C10309 - C10308) * C4715 +
            (C10310 - C10311 + C10312 - C10313) * C4720 +
            (C10314 - C10315 + C10316 - C10317) * C47448) *
               C47369 * C47181 * C1392 +
           ((C10481 - C10480 + C10483 - C10482) * C4719 +
            (C10485 - C10484 + C10487 - C10486) * C4715 +
            (C10496 - C10497 + C10498 - C10499) * C4720 +
            (C10500 - C10501 + C10502 - C10503) * C47448) *
               C47369 * C47181 * C1393 +
           ((C10489 - C10488 + C10491 - C10490) * C4719 +
            (C10493 - C10492 + C10495 - C10494) * C4715 +
            (C10504 - C10505 + C10506 - C10507) * C4720 +
            (C10508 - C10509 + C10510 - C10511) * C47448) *
               C47369 * C47181 * C1394 +
           ((C11681 - C11680 + C11683 - C11682) * C4719 +
            (C11685 - C11684 + C11687 - C11686) * C4715 +
            (C10297 * C1134 - C10299 * C1126 + C47481 * C1673 -
             C10300 * C1668) *
                C4720 +
            (C10297 * C1144 - C10299 * C1135 + C47481 * C1677 -
             C10300 * C1674) *
                C47448) *
               C47369 * C47181 * C47471) *
              C47146)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C10297 * C124 - C10299 * C117 + C47481 * C478 - C10300 * C468) *
                C4719 +
            (C10297 * C138 - C10299 * C125 + C47481 * C498 - C10300 * C479) *
                C4715 +
            (C10302 - C10303 + C10304 - C10305) * C4720 +
            (C10306 - C10307 + C10308 - C10309) * C47448) *
               C47369 * C47181 * C47429 +
           ((C10299 * C287 - C10297 * C297 + C10300 * C906 - C47481 * C911) *
                C4719 +
            (C10299 * C298 - C10297 * C317 + C10300 * C912 - C47481 * C921) *
                C4715 +
            (C10480 - C10481 + C10482 - C10483) * C4720 +
            (C10484 - C10485 + C10486 - C10487) * C47448) *
               C47369 * C47181 * C47226) *
              C636 +
          (((C10303 - C10302 + C10305 - C10304) * C4719 +
            (C10307 - C10306 + C10309 - C10308) * C4715 +
            (C10310 - C10311 + C10312 - C10313) * C4720 +
            (C10314 - C10315 + C10316 - C10317) * C47448) *
               C47369 * C47181 * C47429 +
           ((C10481 - C10480 + C10483 - C10482) * C4719 +
            (C10485 - C10484 + C10487 - C10486) * C4715 +
            (C10496 - C10497 + C10498 - C10499) * C4720 +
            (C10500 - C10501 + C10502 - C10503) * C47448) *
               C47369 * C47181 * C47226) *
              C637 +
          (((C10311 - C10310 + C10313 - C10312) * C4719 +
            (C10315 - C10314 + C10317 - C10316) * C4715 +
            (C10318 - C10319 + C10320 - C10321) * C4720 +
            (C10322 - C10323 + C10324 - C10325) * C47448) *
               C47369 * C47181 * C47429 +
           ((C10497 - C10496 + C10499 - C10498) * C4719 +
            (C10501 - C10500 + C10503 - C10502) * C4715 +
            (C10820 - C10821 + C10822 - C10823) * C4720 +
            (C10824 - C10825 + C10826 - C10827) * C47448) *
               C47369 * C47181 * C47226) *
              C638 +
          (((C10319 - C10318 + C10321 - C10320) * C4719 +
            (C10323 - C10322 + C10325 - C10324) * C4715 +
            (C10326 - C10327 + C10328 - C10329) * C4720 +
            (C10330 - C10331 + C10332 - C10333) * C47448) *
               C47369 * C47181 * C47429 +
           ((C10821 - C10820 + C10823 - C10822) * C4719 +
            (C10825 - C10824 + C10827 - C10826) * C4715 +
            (C10297 * C313 - C10299 * C295 + C47481 * C919 - C10300 * C910) *
                C4720 +
            (C10297 * C325 - C10299 * C314 + C47481 * C925 - C10300 * C920) *
                C47448) *
               C47369 * C47181 * C47226) *
              C47465)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C10297 * C124 - C10299 * C117 + C47481 * C478 - C10300 * C468) *
                 C4719 +
             (C10297 * C138 - C10299 * C125 + C47481 * C498 - C10300 * C479) *
                 C4715 +
             (C10302 - C10303 + C10304 - C10305) * C4720 +
             (C10306 - C10307 + C10308 - C10309) * C47448) *
                C47369 * C1788 +
            ((C10299 * C468 - C10297 * C478 + C10300 * C471 - C47481 * C484) *
                 C4719 +
             (C10299 * C479 - C10297 * C498 + C10300 * C485 - C47481 * C501) *
                 C4715 +
             (C10658 - C10659 + C10660 - C10661) * C4720 +
             (C10662 - C10663 + C10664 - C10665) * C47448) *
                C47369 * C1789 +
            ((C10297 * C484 - C10299 * C471 + C47481 * C1974 - C10300 * C1968) *
                 C4719 +
             (C10297 * C501 - C10299 * C485 + C47481 * C1986 - C10300 * C1975) *
                 C4715 +
             (C10666 - C10667 + C10668 - C10669) * C4720 +
             (C10670 - C10671 + C10672 - C10673) * C47448) *
                C47369 * C47464) *
               C47429 +
           (((C10299 * C287 - C10297 * C297 + C10300 * C906 - C47481 * C911) *
                 C4719 +
             (C10299 * C298 - C10297 * C317 + C10300 * C912 - C47481 * C921) *
                 C4715 +
             (C10480 - C10481 + C10482 - C10483) * C4720 +
             (C10484 - C10485 + C10486 - C10487) * C47448) *
                C47369 * C1788 +
            ((C10297 * C911 - C10299 * C906 + C47481 * C1267 - C10300 * C1258) *
                 C4719 +
             (C10297 * C921 - C10299 * C912 + C47481 * C1285 - C10300 * C1268) *
                 C4715 +
             (C11160 - C11161 + C11162 - C11163) * C4720 +
             (C11164 - C11165 + C11166 - C11167) * C47448) *
                C47369 * C1789 +
            ((C10299 * C1258 - C10297 * C1267 + C10300 * C2362 -
              C47481 * C2365) *
                 C4719 +
             (C10299 * C1268 - C10297 * C1285 + C10300 * C2366 -
              C47481 * C2371) *
                 C4715 +
             (C12596 - C12597 + C12598 - C12599) * C4720 +
             (C12600 - C12601 + C12602 - C12603) * C47448) *
                C47369 * C47464) *
               C47226) *
              C47415 +
          ((((C10303 - C10302 + C10305 - C10304) * C4719 +
             (C10307 - C10306 + C10309 - C10308) * C4715 +
             (C10310 - C10311 + C10312 - C10313) * C4720 +
             (C10314 - C10315 + C10316 - C10317) * C47448) *
                C47369 * C1788 +
            ((C10659 - C10658 + C10661 - C10660) * C4719 +
             (C10663 - C10662 + C10665 - C10664) * C4715 +
             (C10674 - C10675 + C10676 - C10677) * C4720 +
             (C10678 - C10679 + C10680 - C10681) * C47448) *
                C47369 * C1789 +
            ((C10667 - C10666 + C10669 - C10668) * C4719 +
             (C10671 - C10670 + C10673 - C10672) * C4715 +
             (C10682 - C10683 + C10684 - C10685) * C4720 +
             (C10686 - C10687 + C10688 - C10689) * C47448) *
                C47369 * C47464) *
               C47429 +
           (((C10481 - C10480 + C10483 - C10482) * C4719 +
             (C10485 - C10484 + C10487 - C10486) * C4715 +
             (C10496 - C10497 + C10498 - C10499) * C4720 +
             (C10500 - C10501 + C10502 - C10503) * C47448) *
                C47369 * C1788 +
            ((C11161 - C11160 + C11163 - C11162) * C4719 +
             (C11165 - C11164 + C11167 - C11166) * C4715 +
             (C11168 - C11169 + C11170 - C11171) * C4720 +
             (C11172 - C11173 + C11174 - C11175) * C47448) *
                C47369 * C1789 +
            ((C12597 - C12596 + C12599 - C12598) * C4719 +
             (C12601 - C12600 + C12603 - C12602) * C4715 +
             (C10297 * C1271 - C10299 * C1260 + C47481 * C2369 -
              C10300 * C2364) *
                 C4720 +
             (C10297 * C1287 - C10299 * C1272 + C47481 * C2373 -
              C10300 * C2370) *
                 C47448) *
                C47369 * C47464) *
               C47226) *
              C47146)) /
            (p * q * std::sqrt(p + q));
    d2ee[61] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C10297 * C124 - C10299 * C117 + C47481 * C478 - C10300 * C468) *
                C4719 +
            (C10297 * C138 - C10299 * C125 + C47481 * C498 - C10300 * C479) *
                C4715 +
            (C10302 - C10303 + C10304 - C10305) * C4720 +
            (C10306 - C10307 + C10308 - C10309) * C47448) *
               C47369 * C47430 +
           ((C10299 * C468 - C10297 * C478 + C10300 * C471 - C47481 * C484) *
                C4719 +
            (C10299 * C479 - C10297 * C498 + C10300 * C485 - C47481 * C501) *
                C4715 +
            (C10658 - C10659 + C10660 - C10661) * C4720 +
            (C10662 - C10663 + C10664 - C10665) * C47448) *
               C47369 * C47268) *
              C1392 +
          (((C10299 * C287 - C10297 * C297 + C10300 * C906 - C47481 * C911) *
                C4719 +
            (C10299 * C298 - C10297 * C317 + C10300 * C912 - C47481 * C921) *
                C4715 +
            (C10480 - C10481 + C10482 - C10483) * C4720 +
            (C10484 - C10485 + C10486 - C10487) * C47448) *
               C47369 * C47430 +
           ((C10297 * C911 - C10299 * C906 + C47481 * C1267 - C10300 * C1258) *
                C4719 +
            (C10297 * C921 - C10299 * C912 + C47481 * C1285 - C10300 * C1268) *
                C4715 +
            (C11160 - C11161 + C11162 - C11163) * C4720 +
            (C11164 - C11165 + C11166 - C11167) * C47448) *
               C47369 * C47268) *
              C1393 +
          (((C10297 * C303 - C10299 * C290 + C47481 * C1273 - C10300 * C1261) *
                C4719 +
            (C10297 * C320 - C10299 * C304 + C47481 * C1288 - C10300 * C1274) *
                C4715 +
            (C10488 - C10489 + C10490 - C10491) * C4720 +
            (C10492 - C10493 + C10494 - C10495) * C47448) *
               C47369 * C47430 +
           ((C10299 * C1261 - C10297 * C1273 + C10300 * C1264 -
             C47481 * C1279) *
                C4719 +
            (C10299 * C1274 - C10297 * C1288 + C10300 * C1280 -
             C47481 * C1291) *
                C4715 +
            (C11882 - C11883 + C11884 - C11885) * C4720 +
            (C11886 - C11887 + C11888 - C11889) * C47448) *
               C47369 * C47268) *
              C1394 +
          (((C10299 * C1124 - C10297 * C1130 + C10300 * C1666 -
             C47481 * C1669) *
                C4719 +
            (C10299 * C1131 - C10297 * C1142 + C10300 * C1670 -
             C47481 * C1675) *
                C4715 +
            (C11680 - C11681 + C11682 - C11683) * C4720 +
            (C11684 - C11685 + C11686 - C11687) * C47448) *
               C47369 * C47430 +
           ((C10297 * C1669 - C10299 * C1666 + C47481 * C5895 -
             C10300 * C5893) *
                C4719 +
            (C10297 * C1675 - C10299 * C1670 + C47481 * C5899 -
             C10300 * C5896) *
                C4715 +
            (C10297 * C1671 - C10299 * C1667 + C47481 * C5897 -
             C10300 * C5894) *
                C4720 +
            (C10297 * C1676 - C10299 * C1672 + C47481 * C5900 -
             C10300 * C5898) *
                C47448) *
               C47369 * C47268) *
              C47471) *
         C47135) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C10297 * C124 - C10299 * C117 + C47481 * C478 - C10300 * C468) *
                 C4719 +
             (C10297 * C138 - C10299 * C125 + C47481 * C498 - C10300 * C479) *
                 C4715 +
             (C10302 - C10303 + C10304 - C10305) * C4720 +
             (C10306 - C10307 + C10308 - C10309) * C47448) *
                C47369 * C47430 +
            ((C10299 * C468 - C10297 * C478 + C10300 * C471 - C47481 * C484) *
                 C4719 +
             (C10299 * C479 - C10297 * C498 + C10300 * C485 - C47481 * C501) *
                 C4715 +
             (C10658 - C10659 + C10660 - C10661) * C4720 +
             (C10662 - C10663 + C10664 - C10665) * C47448) *
                C47369 * C47268) *
               C47429 +
           (((C10299 * C287 - C10297 * C297 + C10300 * C906 - C47481 * C911) *
                 C4719 +
             (C10299 * C298 - C10297 * C317 + C10300 * C912 - C47481 * C921) *
                 C4715 +
             (C10480 - C10481 + C10482 - C10483) * C4720 +
             (C10484 - C10485 + C10486 - C10487) * C47448) *
                C47369 * C47430 +
            ((C10297 * C911 - C10299 * C906 + C47481 * C1267 - C10300 * C1258) *
                 C4719 +
             (C10297 * C921 - C10299 * C912 + C47481 * C1285 - C10300 * C1268) *
                 C4715 +
             (C11160 - C11161 + C11162 - C11163) * C4720 +
             (C11164 - C11165 + C11166 - C11167) * C47448) *
                C47369 * C47268) *
               C47226) *
              C284 +
          ((((C10303 - C10302 + C10305 - C10304) * C4719 +
             (C10307 - C10306 + C10309 - C10308) * C4715 +
             (C10310 - C10311 + C10312 - C10313) * C4720 +
             (C10314 - C10315 + C10316 - C10317) * C47448) *
                C47369 * C47430 +
            ((C10659 - C10658 + C10661 - C10660) * C4719 +
             (C10663 - C10662 + C10665 - C10664) * C4715 +
             (C10674 - C10675 + C10676 - C10677) * C4720 +
             (C10678 - C10679 + C10680 - C10681) * C47448) *
                C47369 * C47268) *
               C47429 +
           (((C10481 - C10480 + C10483 - C10482) * C4719 +
             (C10485 - C10484 + C10487 - C10486) * C4715 +
             (C10496 - C10497 + C10498 - C10499) * C4720 +
             (C10500 - C10501 + C10502 - C10503) * C47448) *
                C47369 * C47430 +
            ((C11161 - C11160 + C11163 - C11162) * C4719 +
             (C11165 - C11164 + C11167 - C11166) * C4715 +
             (C11168 - C11169 + C11170 - C11171) * C4720 +
             (C11172 - C11173 + C11174 - C11175) * C47448) *
                C47369 * C47268) *
               C47226) *
              C285 +
          ((((C10311 - C10310 + C10313 - C10312) * C4719 +
             (C10315 - C10314 + C10317 - C10316) * C4715 +
             (C10318 - C10319 + C10320 - C10321) * C4720 +
             (C10322 - C10323 + C10324 - C10325) * C47448) *
                C47369 * C47430 +
            ((C10675 - C10674 + C10677 - C10676) * C4719 +
             (C10679 - C10678 + C10681 - C10680) * C4715 +
             (C10958 - C10959 + C10960 - C10961) * C4720 +
             (C10962 - C10963 + C10964 - C10965) * C47448) *
                C47369 * C47268) *
               C47429 +
           (((C10497 - C10496 + C10499 - C10498) * C4719 +
             (C10501 - C10500 + C10503 - C10502) * C4715 +
             (C10820 - C10821 + C10822 - C10823) * C4720 +
             (C10824 - C10825 + C10826 - C10827) * C47448) *
                C47369 * C47430 +
            ((C11169 - C11168 + C11171 - C11170) * C4719 +
             (C11173 - C11172 + C11175 - C11174) * C4715 +
             (C10297 * C917 - C10299 * C909 + C47481 * C2139 - C10300 * C2138) *
                 C4720 +
             (C10297 * C924 - C10299 * C918 + C47481 * C2141 - C10300 * C2140) *
                 C47448) *
                C47369 * C47268) *
               C47226) *
              C47455)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C10297 * C124 - C10299 * C117 + C47481 * C478 - C10300 * C468) *
                C4719 +
            (C10297 * C138 - C10299 * C125 + C47481 * C498 - C10300 * C479) *
                C4715 +
            (C10302 - C10303 + C10304 - C10305) * C4720 +
            (C10306 - C10307 + C10308 - C10309) * C47448) *
               C47369 * C2248 +
           ((C10299 * C468 - C10297 * C478 + C10300 * C471 - C47481 * C484) *
                C4719 +
            (C10299 * C479 - C10297 * C498 + C10300 * C485 - C47481 * C501) *
                C4715 +
            (C10658 - C10659 + C10660 - C10661) * C4720 +
            (C10662 - C10663 + C10664 - C10665) * C47448) *
               C47369 * C2249 +
           ((C10297 * C484 - C10299 * C471 + C47481 * C1974 - C10300 * C1968) *
                C4719 +
            (C10297 * C501 - C10299 * C485 + C47481 * C1986 - C10300 * C1975) *
                C4715 +
            (C10666 - C10667 + C10668 - C10669) * C4720 +
            (C10670 - C10671 + C10672 - C10673) * C47448) *
               C47369 * C2250 +
           ((C10299 * C1968 - C10297 * C1974 + C10300 * C1971 -
             C47481 * C1980) *
                C4719 +
            (C10299 * C1975 - C10297 * C1986 + C10300 * C1981 -
             C47481 * C1989) *
                C4715 +
            (C12734 - C12735 + C12736 - C12737) * C4720 +
            (C12738 - C12739 + C12740 - C12741) * C47448) *
               C47369 * C47477) *
              C47429 +
          (((C10299 * C287 - C10297 * C297 + C10300 * C906 - C47481 * C911) *
                C4719 +
            (C10299 * C298 - C10297 * C317 + C10300 * C912 - C47481 * C921) *
                C4715 +
            (C10480 - C10481 + C10482 - C10483) * C4720 +
            (C10484 - C10485 + C10486 - C10487) * C47448) *
               C47369 * C2248 +
           ((C10297 * C911 - C10299 * C906 + C47481 * C1267 - C10300 * C1258) *
                C4719 +
            (C10297 * C921 - C10299 * C912 + C47481 * C1285 - C10300 * C1268) *
                C4715 +
            (C11160 - C11161 + C11162 - C11163) * C4720 +
            (C11164 - C11165 + C11166 - C11167) * C47448) *
               C47369 * C2249 +
           ((C10299 * C1258 - C10297 * C1267 + C10300 * C2362 -
             C47481 * C2365) *
                C4719 +
            (C10299 * C1268 - C10297 * C1285 + C10300 * C2366 -
             C47481 * C2371) *
                C4715 +
            (C12596 - C12597 + C12598 - C12599) * C4720 +
            (C12600 - C12601 + C12602 - C12603) * C47448) *
               C47369 * C2250 +
           ((C10297 * C2365 - C10299 * C2362 + C47481 * C6771 -
             C10300 * C6769) *
                C4719 +
            (C10297 * C2371 - C10299 * C2366 + C47481 * C6775 -
             C10300 * C6772) *
                C4715 +
            (C10297 * C2367 - C10299 * C2363 + C47481 * C6773 -
             C10300 * C6770) *
                C4720 +
            (C10297 * C2372 - C10299 * C2368 + C47481 * C6776 -
             C10300 * C6774) *
                C47448) *
               C47369 * C47477) *
              C47226) *
         C47135) /
            (p * q * std::sqrt(p + q));
    d2ee[62] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((C10297 * C124 - C10299 * C117 + C47481 * C478 - C10300 * C468) *
                   C4719 +
               (C10297 * C138 - C10299 * C125 + C47481 * C498 - C10300 * C479) *
                   C4715 +
               (C10302 - C10303 + C10304 - C10305) * C4720 +
               (C10306 - C10307 + C10308 - C10309) * C47448) *
                  C47369 * C47181 * C47163 * C108 +
              ((C10303 - C10302 + C10305 - C10304) * C4719 +
               (C10307 - C10306 + C10309 - C10308) * C4715 +
               (C10310 - C10311 + C10312 - C10313) * C4720 +
               (C10314 - C10315 + C10316 - C10317) * C47448) *
                  C47369 * C47181 * C47163 * C109 +
              ((C10311 - C10310 + C10313 - C10312) * C4719 +
               (C10315 - C10314 + C10317 - C10316) * C4715 +
               (C10318 - C10319 + C10320 - C10321) * C4720 +
               (C10322 - C10323 + C10324 - C10325) * C47448) *
                  C47369 * C47181 * C47163 * C110 +
              ((C10319 - C10318 + C10321 - C10320) * C4719 +
               (C10323 - C10322 + C10325 - C10324) * C4715 +
               (C10326 - C10327 + C10328 - C10329) * C4720 +
               (C10330 - C10331 + C10332 - C10333) * C47448) *
                  C47369 * C47181 * C47163 * C111 +
              ((C10327 - C10326 + C10329 - C10328) * C4719 +
               (C10331 - C10330 + C10333 - C10332) * C4715 +
               (C10297 * C134 - C10299 * C122 + C47481 * C751 - C10300 * C750) *
                   C4720 +
               (C10297 * C143 - C10299 * C135 + C47481 * C753 - C10300 * C752) *
                   C47448) *
                  C47369 * C47181 * C47163 * C112) +
         0.5 * std::pow(Pi, 2.5) *
             ((((C10297 * C124 - C10299 * C117 + C47481 * C478 -
                 C10300 * C468) *
                    C4719 +
                (C10297 * C138 - C10299 * C125 + C47481 * C498 -
                 C10300 * C479) *
                    C4715 +
                (C10302 - C10303 + C10304 - C10305) * C4720 +
                (C10306 - C10307 + C10308 - C10309) * C47448) *
                   C47369 * C47181 * C47500 +
               ((C10299 * C287 - C10297 * C297 + C10300 * C906 -
                 C47481 * C911) *
                    C4719 +
                (C10299 * C298 - C10297 * C317 + C10300 * C912 -
                 C47481 * C921) *
                    C4715 +
                (C10480 - C10481 + C10482 - C10483) * C4720 +
                (C10484 - C10485 + C10486 - C10487) * C47448) *
                   C47369 * C47181 * C47488 +
               ((C10297 * C303 - C10299 * C290 + C47481 * C1273 -
                 C10300 * C1261) *
                    C4719 +
                (C10297 * C320 - C10299 * C304 + C47481 * C1288 -
                 C10300 * C1274) *
                    C4715 +
                (C10488 - C10489 + C10490 - C10491) * C4720 +
                (C10492 - C10493 + C10494 - C10495) * C47448) *
                   C47369 * C47181 * C47461) *
                  C284 +
              (((C10303 - C10302 + C10305 - C10304) * C4719 +
                (C10307 - C10306 + C10309 - C10308) * C4715 +
                (C10310 - C10311 + C10312 - C10313) * C4720 +
                (C10314 - C10315 + C10316 - C10317) * C47448) *
                   C47369 * C47181 * C47500 +
               ((C10481 - C10480 + C10483 - C10482) * C4719 +
                (C10485 - C10484 + C10487 - C10486) * C4715 +
                (C10496 - C10497 + C10498 - C10499) * C4720 +
                (C10500 - C10501 + C10502 - C10503) * C47448) *
                   C47369 * C47181 * C47488 +
               ((C10489 - C10488 + C10491 - C10490) * C4719 +
                (C10493 - C10492 + C10495 - C10494) * C4715 +
                (C10504 - C10505 + C10506 - C10507) * C4720 +
                (C10508 - C10509 + C10510 - C10511) * C47448) *
                   C47369 * C47181 * C47461) *
                  C285 +
              (((C10311 - C10310 + C10313 - C10312) * C4719 +
                (C10315 - C10314 + C10317 - C10316) * C4715 +
                (C10318 - C10319 + C10320 - C10321) * C4720 +
                (C10322 - C10323 + C10324 - C10325) * C47448) *
                   C47369 * C47181 * C47500 +
               ((C10497 - C10496 + C10499 - C10498) * C4719 +
                (C10501 - C10500 + C10503 - C10502) * C4715 +
                (C10299 * C293 - C10297 * C309 + C10300 * C909 -
                 C47481 * C917) *
                    C4720 +
                (C10299 * C310 - C10297 * C323 + C10300 * C918 -
                 C47481 * C924) *
                    C47448) *
                   C47369 * C47181 * C47488 +
               ((C10505 - C10504 + C10507 - C10506) * C4719 +
                (C10509 - C10508 + C10511 - C10510) * C4715 +
                (C10297 * C311 - C10299 * C294 + C47481 * C1557 -
                 C10300 * C1556) *
                    C4720 +
                (C10297 * C324 - C10299 * C312 + C47481 * C1559 -
                 C10300 * C1558) *
                    C47448) *
                   C47369 * C47181 * C47461) *
                  C47455)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C10297 * C124 - C10299 * C117 + C47481 * C478 - C10300 * C468) *
                C4719 +
            (C10297 * C138 - C10299 * C125 + C47481 * C498 - C10300 * C479) *
                C4715 +
            (C10302 - C10303 + C10304 - C10305) * C4720 +
            (C10306 - C10307 + C10308 - C10309) * C47448) *
               C47369 * C47501 +
           ((C10299 * C468 - C10297 * C478 + C10300 * C471 - C47481 * C484) *
                C4719 +
            (C10299 * C479 - C10297 * C498 + C10300 * C485 - C47481 * C501) *
                C4715 +
            (C10658 - C10659 + C10660 - C10661) * C4720 +
            (C10662 - C10663 + C10664 - C10665) * C47448) *
               C47369 * C47490 +
           ((C10297 * C484 - C10299 * C471 + C47481 * C1974 - C10300 * C1968) *
                C4719 +
            (C10297 * C501 - C10299 * C485 + C47481 * C1986 - C10300 * C1975) *
                C4715 +
            (C10666 - C10667 + C10668 - C10669) * C4720 +
            (C10670 - C10671 + C10672 - C10673) * C47448) *
               C47369 * C47464) *
              C47163 * C284 +
          (((C10303 - C10302 + C10305 - C10304) * C4719 +
            (C10307 - C10306 + C10309 - C10308) * C4715 +
            (C10310 - C10311 + C10312 - C10313) * C4720 +
            (C10314 - C10315 + C10316 - C10317) * C47448) *
               C47369 * C47501 +
           ((C10659 - C10658 + C10661 - C10660) * C4719 +
            (C10663 - C10662 + C10665 - C10664) * C4715 +
            (C10674 - C10675 + C10676 - C10677) * C4720 +
            (C10678 - C10679 + C10680 - C10681) * C47448) *
               C47369 * C47490 +
           ((C10667 - C10666 + C10669 - C10668) * C4719 +
            (C10671 - C10670 + C10673 - C10672) * C4715 +
            (C10682 - C10683 + C10684 - C10685) * C4720 +
            (C10686 - C10687 + C10688 - C10689) * C47448) *
               C47369 * C47464) *
              C47163 * C285 +
          (((C10311 - C10310 + C10313 - C10312) * C4719 +
            (C10315 - C10314 + C10317 - C10316) * C4715 +
            (C10318 - C10319 + C10320 - C10321) * C4720 +
            (C10322 - C10323 + C10324 - C10325) * C47448) *
               C47369 * C47501 +
           ((C10675 - C10674 + C10677 - C10676) * C4719 +
            (C10679 - C10678 + C10681 - C10680) * C4715 +
            (C10299 * C474 - C10297 * C490 + C10300 * C475 - C47481 * C492) *
                C4720 +
            (C10299 * C491 - C10297 * C504 + C10300 * C493 - C47481 * C505) *
                C47448) *
               C47369 * C47490 +
           ((C10683 - C10682 + C10685 - C10684) * C4719 +
            (C10687 - C10686 + C10689 - C10688) * C4715 +
            (C10297 * C492 - C10299 * C475 + C47481 * C2253 - C10300 * C2252) *
                C4720 +
            (C10297 * C505 - C10299 * C493 + C47481 * C2255 - C10300 * C2254) *
                C47448) *
               C47369 * C47464) *
              C47163 * C47455)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C10297 * C124 - C10299 * C117 + C47481 * C478 - C10300 * C468) *
                C4719 +
            (C10297 * C138 - C10299 * C125 + C47481 * C498 - C10300 * C479) *
                C4715 +
            (C10302 - C10303 + C10304 - C10305) * C4720 +
            (C10306 - C10307 + C10308 - C10309) * C47448) *
               C47369 * C47181 * C1050 +
           ((C10299 * C287 - C10297 * C297 + C10300 * C906 - C47481 * C911) *
                C4719 +
            (C10299 * C298 - C10297 * C317 + C10300 * C912 - C47481 * C921) *
                C4715 +
            (C10480 - C10481 + C10482 - C10483) * C4720 +
            (C10484 - C10485 + C10486 - C10487) * C47448) *
               C47369 * C47181 * C1051 +
           ((C10297 * C303 - C10299 * C290 + C47481 * C1273 - C10300 * C1261) *
                C4719 +
            (C10297 * C320 - C10299 * C304 + C47481 * C1288 - C10300 * C1274) *
                C4715 +
            (C10488 - C10489 + C10490 - C10491) * C4720 +
            (C10492 - C10493 + C10494 - C10495) * C47448) *
               C47369 * C47181 * C47461) *
              C47497 +
          (((C10303 - C10302 + C10305 - C10304) * C4719 +
            (C10307 - C10306 + C10309 - C10308) * C4715 +
            (C10310 - C10311 + C10312 - C10313) * C4720 +
            (C10314 - C10315 + C10316 - C10317) * C47448) *
               C47369 * C47181 * C1050 +
           ((C10481 - C10480 + C10483 - C10482) * C4719 +
            (C10485 - C10484 + C10487 - C10486) * C4715 +
            (C10496 - C10497 + C10498 - C10499) * C4720 +
            (C10500 - C10501 + C10502 - C10503) * C47448) *
               C47369 * C47181 * C1051 +
           ((C10489 - C10488 + C10491 - C10490) * C4719 +
            (C10493 - C10492 + C10495 - C10494) * C4715 +
            (C10504 - C10505 + C10506 - C10507) * C4720 +
            (C10508 - C10509 + C10510 - C10511) * C47448) *
               C47369 * C47181 * C47461) *
              C47484 +
          (((C10311 - C10310 + C10313 - C10312) * C4719 +
            (C10315 - C10314 + C10317 - C10316) * C4715 +
            (C10318 - C10319 + C10320 - C10321) * C4720 +
            (C10322 - C10323 + C10324 - C10325) * C47448) *
               C47369 * C47181 * C1050 +
           ((C10497 - C10496 + C10499 - C10498) * C4719 +
            (C10501 - C10500 + C10503 - C10502) * C4715 +
            (C10820 - C10821 + C10822 - C10823) * C4720 +
            (C10824 - C10825 + C10826 - C10827) * C47448) *
               C47369 * C47181 * C1051 +
           ((C10505 - C10504 + C10507 - C10506) * C4719 +
            (C10509 - C10508 + C10511 - C10510) * C4715 +
            (C10297 * C311 - C10299 * C294 + C47481 * C1557 - C10300 * C1556) *
                C4720 +
            (C10297 * C324 - C10299 * C312 + C47481 * C1559 - C10300 * C1558) *
                C47448) *
               C47369 * C47181 * C47461) *
              C47455)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C10297 * C124 - C10299 * C117 + C47481 * C478 - C10300 * C468) *
               C4719 +
           (C10297 * C138 - C10299 * C125 + C47481 * C498 - C10300 * C479) *
               C4715 +
           (C10302 - C10303 + C10304 - C10305) * C4720 +
           (C10306 - C10307 + C10308 - C10309) * C47448) *
              C47369 * C47181 * C1118 +
          ((C10299 * C287 - C10297 * C297 + C10300 * C906 - C47481 * C911) *
               C4719 +
           (C10299 * C298 - C10297 * C317 + C10300 * C912 - C47481 * C921) *
               C4715 +
           (C10480 - C10481 + C10482 - C10483) * C4720 +
           (C10484 - C10485 + C10486 - C10487) * C47448) *
              C47369 * C47181 * C1119 +
          ((C10297 * C303 - C10299 * C290 + C47481 * C1273 - C10300 * C1261) *
               C4719 +
           (C10297 * C320 - C10299 * C304 + C47481 * C1288 - C10300 * C1274) *
               C4715 +
           (C10488 - C10489 + C10490 - C10491) * C4720 +
           (C10492 - C10493 + C10494 - C10495) * C47448) *
              C47369 * C47181 * C1120 +
          ((C10299 * C1124 - C10297 * C1130 + C10300 * C1666 - C47481 * C1669) *
               C4719 +
           (C10299 * C1131 - C10297 * C1142 + C10300 * C1670 - C47481 * C1675) *
               C4715 +
           (C10299 * C1125 - C10297 * C1132 + C10300 * C1667 - C47481 * C1671) *
               C4720 +
           (C10299 * C1133 - C10297 * C1143 + C10300 * C1672 - C47481 * C1676) *
               C47448) *
              C47369 * C47181 * C1121 +
          ((C10297 * C1136 - C10299 * C1127 + C47481 * C6385 - C10300 * C6383) *
               C4719 +
           (C10297 * C1145 - C10299 * C1137 + C47481 * C6389 - C10300 * C6386) *
               C4715 +
           (C10297 * C1138 - C10299 * C1128 + C47481 * C6387 - C10300 * C6384) *
               C4720 +
           (C10297 * C1146 - C10299 * C1139 + C47481 * C6390 - C10300 * C6388) *
               C47448) *
              C47369 * C47181 * C1122) *
         C47135) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C10297 * C124 - C10299 * C117 + C47481 * C478 - C10300 * C468) *
                C4719 +
            (C10297 * C138 - C10299 * C125 + C47481 * C498 - C10300 * C479) *
                C4715 +
            (C10302 - C10303 + C10304 - C10305) * C4720 +
            (C10306 - C10307 + C10308 - C10309) * C47448) *
               C47369 * C47501 +
           ((C10299 * C468 - C10297 * C478 + C10300 * C471 - C47481 * C484) *
                C4719 +
            (C10299 * C479 - C10297 * C498 + C10300 * C485 - C47481 * C501) *
                C4715 +
            (C10658 - C10659 + C10660 - C10661) * C4720 +
            (C10662 - C10663 + C10664 - C10665) * C47448) *
               C47369 * C47490 +
           ((C10297 * C484 - C10299 * C471 + C47481 * C1974 - C10300 * C1968) *
                C4719 +
            (C10297 * C501 - C10299 * C485 + C47481 * C1986 - C10300 * C1975) *
                C4715 +
            (C10666 - C10667 + C10668 - C10669) * C4720 +
            (C10670 - C10671 + C10672 - C10673) * C47448) *
               C47369 * C47464) *
              C1050 +
          (((C10299 * C287 - C10297 * C297 + C10300 * C906 - C47481 * C911) *
                C4719 +
            (C10299 * C298 - C10297 * C317 + C10300 * C912 - C47481 * C921) *
                C4715 +
            (C10480 - C10481 + C10482 - C10483) * C4720 +
            (C10484 - C10485 + C10486 - C10487) * C47448) *
               C47369 * C47501 +
           ((C10297 * C911 - C10299 * C906 + C47481 * C1267 - C10300 * C1258) *
                C4719 +
            (C10297 * C921 - C10299 * C912 + C47481 * C1285 - C10300 * C1268) *
                C4715 +
            (C11160 - C11161 + C11162 - C11163) * C4720 +
            (C11164 - C11165 + C11166 - C11167) * C47448) *
               C47369 * C47490 +
           ((C10299 * C1258 - C10297 * C1267 + C10300 * C2362 -
             C47481 * C2365) *
                C4719 +
            (C10299 * C1268 - C10297 * C1285 + C10300 * C2366 -
             C47481 * C2371) *
                C4715 +
            (C10299 * C1259 - C10297 * C1269 + C10300 * C2363 -
             C47481 * C2367) *
                C4720 +
            (C10299 * C1270 - C10297 * C1286 + C10300 * C2368 -
             C47481 * C2372) *
                C47448) *
               C47369 * C47464) *
              C1051 +
          (((C10297 * C303 - C10299 * C290 + C47481 * C1273 - C10300 * C1261) *
                C4719 +
            (C10297 * C320 - C10299 * C304 + C47481 * C1288 - C10300 * C1274) *
                C4715 +
            (C10488 - C10489 + C10490 - C10491) * C4720 +
            (C10492 - C10493 + C10494 - C10495) * C47448) *
               C47369 * C47501 +
           ((C10299 * C1261 - C10297 * C1273 + C10300 * C1264 -
             C47481 * C1279) *
                C4719 +
            (C10299 * C1274 - C10297 * C1288 + C10300 * C1280 -
             C47481 * C1291) *
                C4715 +
            (C10299 * C1262 - C10297 * C1275 + C10300 * C1265 -
             C47481 * C1281) *
                C4720 +
            (C10299 * C1276 - C10297 * C1289 + C10300 * C1282 -
             C47481 * C1292) *
                C47448) *
               C47369 * C47490 +
           ((C10297 * C1279 - C10299 * C1264 + C47481 * C7241 -
             C10300 * C7239) *
                C4719 +
            (C10297 * C1291 - C10299 * C1280 + C47481 * C7245 -
             C10300 * C7242) *
                C4715 +
            (C10297 * C1281 - C10299 * C1265 + C47481 * C7243 -
             C10300 * C7240) *
                C4720 +
            (C10297 * C1292 - C10299 * C1282 + C47481 * C7246 -
             C10300 * C7244) *
                C47448) *
               C47369 * C47464) *
              C47461) *
         C47135) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C10297 * C124 - C10299 * C117 + C47481 * C478 - C10300 * C468) *
                C4719 +
            (C10297 * C138 - C10299 * C125 + C47481 * C498 - C10300 * C479) *
                C4715 +
            (C10302 - C10303 + C10304 - C10305) * C4720 +
            (C10306 - C10307 + C10308 - C10309) * C47448) *
               C47369 * C1788 +
           ((C10299 * C468 - C10297 * C478 + C10300 * C471 - C47481 * C484) *
                C4719 +
            (C10299 * C479 - C10297 * C498 + C10300 * C485 - C47481 * C501) *
                C4715 +
            (C10658 - C10659 + C10660 - C10661) * C4720 +
            (C10662 - C10663 + C10664 - C10665) * C47448) *
               C47369 * C1789 +
           ((C10297 * C484 - C10299 * C471 + C47481 * C1974 - C10300 * C1968) *
                C4719 +
            (C10297 * C501 - C10299 * C485 + C47481 * C1986 - C10300 * C1975) *
                C4715 +
            (C10666 - C10667 + C10668 - C10669) * C4720 +
            (C10670 - C10671 + C10672 - C10673) * C47448) *
               C47369 * C47464) *
              C47163 * C47497 +
          (((C10303 - C10302 + C10305 - C10304) * C4719 +
            (C10307 - C10306 + C10309 - C10308) * C4715 +
            (C10310 - C10311 + C10312 - C10313) * C4720 +
            (C10314 - C10315 + C10316 - C10317) * C47448) *
               C47369 * C1788 +
           ((C10659 - C10658 + C10661 - C10660) * C4719 +
            (C10663 - C10662 + C10665 - C10664) * C4715 +
            (C10674 - C10675 + C10676 - C10677) * C4720 +
            (C10678 - C10679 + C10680 - C10681) * C47448) *
               C47369 * C1789 +
           ((C10667 - C10666 + C10669 - C10668) * C4719 +
            (C10671 - C10670 + C10673 - C10672) * C4715 +
            (C10682 - C10683 + C10684 - C10685) * C4720 +
            (C10686 - C10687 + C10688 - C10689) * C47448) *
               C47369 * C47464) *
              C47163 * C47484 +
          (((C10311 - C10310 + C10313 - C10312) * C4719 +
            (C10315 - C10314 + C10317 - C10316) * C4715 +
            (C10318 - C10319 + C10320 - C10321) * C4720 +
            (C10322 - C10323 + C10324 - C10325) * C47448) *
               C47369 * C1788 +
           ((C10675 - C10674 + C10677 - C10676) * C4719 +
            (C10679 - C10678 + C10681 - C10680) * C4715 +
            (C10958 - C10959 + C10960 - C10961) * C4720 +
            (C10962 - C10963 + C10964 - C10965) * C47448) *
               C47369 * C1789 +
           ((C10683 - C10682 + C10685 - C10684) * C4719 +
            (C10687 - C10686 + C10689 - C10688) * C4715 +
            (C10297 * C492 - C10299 * C475 + C47481 * C2253 - C10300 * C2252) *
                C4720 +
            (C10297 * C505 - C10299 * C493 + C47481 * C2255 - C10300 * C2254) *
                C47448) *
               C47369 * C47464) *
              C47163 * C47455)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C10297 * C124 - C10299 * C117 + C47481 * C478 - C10300 * C468) *
                C4719 +
            (C10297 * C138 - C10299 * C125 + C47481 * C498 - C10300 * C479) *
                C4715 +
            (C10302 - C10303 + C10304 - C10305) * C4720 +
            (C10306 - C10307 + C10308 - C10309) * C47448) *
               C47369 * C1788 +
           ((C10299 * C468 - C10297 * C478 + C10300 * C471 - C47481 * C484) *
                C4719 +
            (C10299 * C479 - C10297 * C498 + C10300 * C485 - C47481 * C501) *
                C4715 +
            (C10658 - C10659 + C10660 - C10661) * C4720 +
            (C10662 - C10663 + C10664 - C10665) * C47448) *
               C47369 * C1789 +
           ((C10297 * C484 - C10299 * C471 + C47481 * C1974 - C10300 * C1968) *
                C4719 +
            (C10297 * C501 - C10299 * C485 + C47481 * C1986 - C10300 * C1975) *
                C4715 +
            (C10666 - C10667 + C10668 - C10669) * C4720 +
            (C10670 - C10671 + C10672 - C10673) * C47448) *
               C47369 * C47464) *
              C47500 +
          (((C10299 * C287 - C10297 * C297 + C10300 * C906 - C47481 * C911) *
                C4719 +
            (C10299 * C298 - C10297 * C317 + C10300 * C912 - C47481 * C921) *
                C4715 +
            (C10480 - C10481 + C10482 - C10483) * C4720 +
            (C10484 - C10485 + C10486 - C10487) * C47448) *
               C47369 * C1788 +
           ((C10297 * C911 - C10299 * C906 + C47481 * C1267 - C10300 * C1258) *
                C4719 +
            (C10297 * C921 - C10299 * C912 + C47481 * C1285 - C10300 * C1268) *
                C4715 +
            (C11160 - C11161 + C11162 - C11163) * C4720 +
            (C11164 - C11165 + C11166 - C11167) * C47448) *
               C47369 * C1789 +
           ((C10299 * C1258 - C10297 * C1267 + C10300 * C2362 -
             C47481 * C2365) *
                C4719 +
            (C10299 * C1268 - C10297 * C1285 + C10300 * C2366 -
             C47481 * C2371) *
                C4715 +
            (C10299 * C1259 - C10297 * C1269 + C10300 * C2363 -
             C47481 * C2367) *
                C4720 +
            (C10299 * C1270 - C10297 * C1286 + C10300 * C2368 -
             C47481 * C2372) *
                C47448) *
               C47369 * C47464) *
              C47488 +
          (((C10297 * C303 - C10299 * C290 + C47481 * C1273 - C10300 * C1261) *
                C4719 +
            (C10297 * C320 - C10299 * C304 + C47481 * C1288 - C10300 * C1274) *
                C4715 +
            (C10488 - C10489 + C10490 - C10491) * C4720 +
            (C10492 - C10493 + C10494 - C10495) * C47448) *
               C47369 * C1788 +
           ((C10299 * C1261 - C10297 * C1273 + C10300 * C1264 -
             C47481 * C1279) *
                C4719 +
            (C10299 * C1274 - C10297 * C1288 + C10300 * C1280 -
             C47481 * C1291) *
                C4715 +
            (C11882 - C11883 + C11884 - C11885) * C4720 +
            (C11886 - C11887 + C11888 - C11889) * C47448) *
               C47369 * C1789 +
           ((C10297 * C1279 - C10299 * C1264 + C47481 * C7241 -
             C10300 * C7239) *
                C4719 +
            (C10297 * C1291 - C10299 * C1280 + C47481 * C7245 -
             C10300 * C7242) *
                C4715 +
            (C10297 * C1281 - C10299 * C1265 + C47481 * C7243 -
             C10300 * C7240) *
                C4720 +
            (C10297 * C1292 - C10299 * C1282 + C47481 * C7246 -
             C10300 * C7244) *
                C47448) *
               C47369 * C47464) *
              C47461) *
         C47135) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C10297 * C124 - C10299 * C117 + C47481 * C478 - C10300 * C468) *
               C4719 +
           (C10297 * C138 - C10299 * C125 + C47481 * C498 - C10300 * C479) *
               C4715 +
           (C10302 - C10303 + C10304 - C10305) * C4720 +
           (C10306 - C10307 + C10308 - C10309) * C47448) *
              C47369 * C1963 +
          ((C10299 * C468 - C10297 * C478 + C10300 * C471 - C47481 * C484) *
               C4719 +
           (C10299 * C479 - C10297 * C498 + C10300 * C485 - C47481 * C501) *
               C4715 +
           (C10658 - C10659 + C10660 - C10661) * C4720 +
           (C10662 - C10663 + C10664 - C10665) * C47448) *
              C47369 * C1964 +
          ((C10297 * C484 - C10299 * C471 + C47481 * C1974 - C10300 * C1968) *
               C4719 +
           (C10297 * C501 - C10299 * C485 + C47481 * C1986 - C10300 * C1975) *
               C4715 +
           (C10666 - C10667 + C10668 - C10669) * C4720 +
           (C10670 - C10671 + C10672 - C10673) * C47448) *
              C47369 * C1965 +
          ((C10299 * C1968 - C10297 * C1974 + C10300 * C1971 - C47481 * C1980) *
               C4719 +
           (C10299 * C1975 - C10297 * C1986 + C10300 * C1981 - C47481 * C1989) *
               C4715 +
           (C10299 * C1969 - C10297 * C1976 + C10300 * C1972 - C47481 * C1982) *
               C4720 +
           (C10299 * C1977 - C10297 * C1987 + C10300 * C1983 - C47481 * C1990) *
               C47448) *
              C47369 * C1966 +
          ((C10297 * C1980 - C10299 * C1971 + C47481 * C12395 -
            C10300 * C12393) *
               C4719 +
           (C10297 * C1989 - C10299 * C1981 + C47481 * C12399 -
            C10300 * C12396) *
               C4715 +
           (C10297 * C1982 - C10299 * C1972 + C47481 * C12397 -
            C10300 * C12394) *
               C4720 +
           (C10297 * C1990 - C10299 * C1983 + C47481 * C12400 -
            C10300 * C12398) *
               C47448) *
              C47369 * C1967) *
         C47163 * C47135) /
            (p * q * std::sqrt(p + q));
    d2ee[63] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C10297 * C124 - C10299 * C117 + C47481 * C478 - C10300 * C468) *
                 C4719 +
             (C10297 * C138 - C10299 * C125 + C47481 * C498 - C10300 * C479) *
                 C4715 +
             (C10302 - C10303 + C10304 - C10305) * C4720 +
             (C10306 - C10307 + C10308 - C10309) * C47448) *
                C47369 * C47430 +
            ((C10299 * C468 - C10297 * C478 + C10300 * C471 - C47481 * C484) *
                 C4719 +
             (C10299 * C479 - C10297 * C498 + C10300 * C485 - C47481 * C501) *
                 C4715 +
             (C10658 - C10659 + C10660 - C10661) * C4720 +
             (C10662 - C10663 + C10664 - C10665) * C47448) *
                C47369 * C47268) *
               C1050 +
           (((C10299 * C287 - C10297 * C297 + C10300 * C906 - C47481 * C911) *
                 C4719 +
             (C10299 * C298 - C10297 * C317 + C10300 * C912 - C47481 * C921) *
                 C4715 +
             (C10480 - C10481 + C10482 - C10483) * C4720 +
             (C10484 - C10485 + C10486 - C10487) * C47448) *
                C47369 * C47430 +
            ((C10297 * C911 - C10299 * C906 + C47481 * C1267 - C10300 * C1258) *
                 C4719 +
             (C10297 * C921 - C10299 * C912 + C47481 * C1285 - C10300 * C1268) *
                 C4715 +
             (C11160 - C11161 + C11162 - C11163) * C4720 +
             (C11164 - C11165 + C11166 - C11167) * C47448) *
                C47369 * C47268) *
               C1051 +
           (((C10297 * C303 - C10299 * C290 + C47481 * C1273 - C10300 * C1261) *
                 C4719 +
             (C10297 * C320 - C10299 * C304 + C47481 * C1288 - C10300 * C1274) *
                 C4715 +
             (C10488 - C10489 + C10490 - C10491) * C4720 +
             (C10492 - C10493 + C10494 - C10495) * C47448) *
                C47369 * C47430 +
            ((C10299 * C1261 - C10297 * C1273 + C10300 * C1264 -
              C47481 * C1279) *
                 C4719 +
             (C10299 * C1274 - C10297 * C1288 + C10300 * C1280 -
              C47481 * C1291) *
                 C4715 +
             (C11882 - C11883 + C11884 - C11885) * C4720 +
             (C11886 - C11887 + C11888 - C11889) * C47448) *
                C47369 * C47268) *
               C47461) *
              C47415 +
          ((((C10303 - C10302 + C10305 - C10304) * C4719 +
             (C10307 - C10306 + C10309 - C10308) * C4715 +
             (C10310 - C10311 + C10312 - C10313) * C4720 +
             (C10314 - C10315 + C10316 - C10317) * C47448) *
                C47369 * C47430 +
            ((C10659 - C10658 + C10661 - C10660) * C4719 +
             (C10663 - C10662 + C10665 - C10664) * C4715 +
             (C10674 - C10675 + C10676 - C10677) * C4720 +
             (C10678 - C10679 + C10680 - C10681) * C47448) *
                C47369 * C47268) *
               C1050 +
           (((C10481 - C10480 + C10483 - C10482) * C4719 +
             (C10485 - C10484 + C10487 - C10486) * C4715 +
             (C10496 - C10497 + C10498 - C10499) * C4720 +
             (C10500 - C10501 + C10502 - C10503) * C47448) *
                C47369 * C47430 +
            ((C11161 - C11160 + C11163 - C11162) * C4719 +
             (C11165 - C11164 + C11167 - C11166) * C4715 +
             (C11168 - C11169 + C11170 - C11171) * C4720 +
             (C11172 - C11173 + C11174 - C11175) * C47448) *
                C47369 * C47268) *
               C1051 +
           (((C10489 - C10488 + C10491 - C10490) * C4719 +
             (C10493 - C10492 + C10495 - C10494) * C4715 +
             (C10504 - C10505 + C10506 - C10507) * C4720 +
             (C10508 - C10509 + C10510 - C10511) * C47448) *
                C47369 * C47430 +
            ((C11883 - C11882 + C11885 - C11884) * C4719 +
             (C11887 - C11886 + C11889 - C11888) * C4715 +
             (C10297 * C1277 - C10299 * C1263 + C47481 * C1283 -
              C10300 * C1266) *
                 C4720 +
             (C10297 * C1290 - C10299 * C1278 + C47481 * C1293 -
              C10300 * C1284) *
                 C47448) *
                C47369 * C47268) *
               C47461) *
              C47146)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C10297 * C124 - C10299 * C117 + C47481 * C478 - C10300 * C468) *
                C4719 +
            (C10297 * C138 - C10299 * C125 + C47481 * C498 - C10300 * C479) *
                C4715 +
            (C10302 - C10303 + C10304 - C10305) * C4720 +
            (C10306 - C10307 + C10308 - C10309) * C47448) *
               C47369 * C47430 +
           ((C10299 * C468 - C10297 * C478 + C10300 * C471 - C47481 * C484) *
                C4719 +
            (C10299 * C479 - C10297 * C498 + C10300 * C485 - C47481 * C501) *
                C4715 +
            (C10658 - C10659 + C10660 - C10661) * C4720 +
            (C10662 - C10663 + C10664 - C10665) * C47448) *
               C47369 * C47268) *
              C47163 * C636 +
          (((C10303 - C10302 + C10305 - C10304) * C4719 +
            (C10307 - C10306 + C10309 - C10308) * C4715 +
            (C10310 - C10311 + C10312 - C10313) * C4720 +
            (C10314 - C10315 + C10316 - C10317) * C47448) *
               C47369 * C47430 +
           ((C10659 - C10658 + C10661 - C10660) * C4719 +
            (C10663 - C10662 + C10665 - C10664) * C4715 +
            (C10674 - C10675 + C10676 - C10677) * C4720 +
            (C10678 - C10679 + C10680 - C10681) * C47448) *
               C47369 * C47268) *
              C47163 * C637 +
          (((C10311 - C10310 + C10313 - C10312) * C4719 +
            (C10315 - C10314 + C10317 - C10316) * C4715 +
            (C10318 - C10319 + C10320 - C10321) * C4720 +
            (C10322 - C10323 + C10324 - C10325) * C47448) *
               C47369 * C47430 +
           ((C10675 - C10674 + C10677 - C10676) * C4719 +
            (C10679 - C10678 + C10681 - C10680) * C4715 +
            (C10958 - C10959 + C10960 - C10961) * C4720 +
            (C10962 - C10963 + C10964 - C10965) * C47448) *
               C47369 * C47268) *
              C47163 * C638 +
          (((C10319 - C10318 + C10321 - C10320) * C4719 +
            (C10323 - C10322 + C10325 - C10324) * C4715 +
            (C10326 - C10327 + C10328 - C10329) * C4720 +
            (C10330 - C10331 + C10332 - C10333) * C47448) *
               C47369 * C47430 +
           ((C10959 - C10958 + C10961 - C10960) * C4719 +
            (C10963 - C10962 + C10965 - C10964) * C4715 +
            (C10297 * C494 - C10299 * C476 + C47481 * C496 - C10300 * C477) *
                C4720 +
            (C10297 * C506 - C10299 * C495 + C47481 * C507 - C10300 * C497) *
                C47448) *
               C47369 * C47268) *
              C47163 * C47465)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C10297 * C124 - C10299 * C117 + C47481 * C478 - C10300 * C468) *
                C4719 +
            (C10297 * C138 - C10299 * C125 + C47481 * C498 - C10300 * C479) *
                C4715 +
            (C10302 - C10303 + C10304 - C10305) * C4720 +
            (C10306 - C10307 + C10308 - C10309) * C47448) *
               C47369 * C2248 +
           ((C10299 * C468 - C10297 * C478 + C10300 * C471 - C47481 * C484) *
                C4719 +
            (C10299 * C479 - C10297 * C498 + C10300 * C485 - C47481 * C501) *
                C4715 +
            (C10658 - C10659 + C10660 - C10661) * C4720 +
            (C10662 - C10663 + C10664 - C10665) * C47448) *
               C47369 * C2249 +
           ((C10297 * C484 - C10299 * C471 + C47481 * C1974 - C10300 * C1968) *
                C4719 +
            (C10297 * C501 - C10299 * C485 + C47481 * C1986 - C10300 * C1975) *
                C4715 +
            (C10666 - C10667 + C10668 - C10669) * C4720 +
            (C10670 - C10671 + C10672 - C10673) * C47448) *
               C47369 * C2250 +
           ((C10299 * C1968 - C10297 * C1974 + C10300 * C1971 -
             C47481 * C1980) *
                C4719 +
            (C10299 * C1975 - C10297 * C1986 + C10300 * C1981 -
             C47481 * C1989) *
                C4715 +
            (C12734 - C12735 + C12736 - C12737) * C4720 +
            (C12738 - C12739 + C12740 - C12741) * C47448) *
               C47369 * C47477) *
              C47163 * C47415 +
          (((C10303 - C10302 + C10305 - C10304) * C4719 +
            (C10307 - C10306 + C10309 - C10308) * C4715 +
            (C10310 - C10311 + C10312 - C10313) * C4720 +
            (C10314 - C10315 + C10316 - C10317) * C47448) *
               C47369 * C2248 +
           ((C10659 - C10658 + C10661 - C10660) * C4719 +
            (C10663 - C10662 + C10665 - C10664) * C4715 +
            (C10674 - C10675 + C10676 - C10677) * C4720 +
            (C10678 - C10679 + C10680 - C10681) * C47448) *
               C47369 * C2249 +
           ((C10667 - C10666 + C10669 - C10668) * C4719 +
            (C10671 - C10670 + C10673 - C10672) * C4715 +
            (C10682 - C10683 + C10684 - C10685) * C4720 +
            (C10686 - C10687 + C10688 - C10689) * C47448) *
               C47369 * C2250 +
           ((C12735 - C12734 + C12737 - C12736) * C4719 +
            (C12739 - C12738 + C12741 - C12740) * C4715 +
            (C10297 * C1978 - C10299 * C1970 + C47481 * C1984 -
             C10300 * C1973) *
                C4720 +
            (C10297 * C1988 - C10299 * C1979 + C47481 * C1991 -
             C10300 * C1985) *
                C47448) *
               C47369 * C47477) *
              C47163 * C47146)) /
            (p * q * std::sqrt(p + q));
    d2ee[64] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C10297 * C124 - C10299 * C117 + C47481 * C478 - C10300 * C468) *
                C4719 +
            (C10297 * C138 - C10299 * C125 + C47481 * C498 - C10300 * C479) *
                C4715 +
            (C10302 - C10303 + C10304 - C10305) * C4720 +
            (C10306 - C10307 + C10308 - C10309) * C47448) *
               C47369 * C47181 * C47500 +
           ((C10299 * C287 - C10297 * C297 + C10300 * C906 - C47481 * C911) *
                C4719 +
            (C10299 * C298 - C10297 * C317 + C10300 * C912 - C47481 * C921) *
                C4715 +
            (C10480 - C10481 + C10482 - C10483) * C4720 +
            (C10484 - C10485 + C10486 - C10487) * C47448) *
               C47369 * C47181 * C47488 +
           ((C10297 * C303 - C10299 * C290 + C47481 * C1273 - C10300 * C1261) *
                C4719 +
            (C10297 * C320 - C10299 * C304 + C47481 * C1288 - C10300 * C1274) *
                C4715 +
            (C10488 - C10489 + C10490 - C10491) * C4720 +
            (C10492 - C10493 + C10494 - C10495) * C47448) *
               C47369 * C47181 * C47461) *
              C284 +
          (((C10303 - C10302 + C10305 - C10304) * C4719 +
            (C10307 - C10306 + C10309 - C10308) * C4715 +
            (C10310 - C10311 + C10312 - C10313) * C4720 +
            (C10314 - C10315 + C10316 - C10317) * C47448) *
               C47369 * C47181 * C47500 +
           ((C10481 - C10480 + C10483 - C10482) * C4719 +
            (C10485 - C10484 + C10487 - C10486) * C4715 +
            (C10496 - C10497 + C10498 - C10499) * C4720 +
            (C10500 - C10501 + C10502 - C10503) * C47448) *
               C47369 * C47181 * C47488 +
           ((C10489 - C10488 + C10491 - C10490) * C4719 +
            (C10493 - C10492 + C10495 - C10494) * C4715 +
            (C10504 - C10505 + C10506 - C10507) * C4720 +
            (C10508 - C10509 + C10510 - C10511) * C47448) *
               C47369 * C47181 * C47461) *
              C285 +
          (((C10311 - C10310 + C10313 - C10312) * C4719 +
            (C10315 - C10314 + C10317 - C10316) * C4715 +
            (C10318 - C10319 + C10320 - C10321) * C4720 +
            (C10322 - C10323 + C10324 - C10325) * C47448) *
               C47369 * C47181 * C47500 +
           ((C10497 - C10496 + C10499 - C10498) * C4719 +
            (C10501 - C10500 + C10503 - C10502) * C4715 +
            (C10299 * C293 - C10297 * C309 + C10300 * C909 - C47481 * C917) *
                C4720 +
            (C10299 * C310 - C10297 * C323 + C10300 * C918 - C47481 * C924) *
                C47448) *
               C47369 * C47181 * C47488 +
           ((C10505 - C10504 + C10507 - C10506) * C4719 +
            (C10509 - C10508 + C10511 - C10510) * C4715 +
            (C10297 * C311 - C10299 * C294 + C47481 * C1557 - C10300 * C1556) *
                C4720 +
            (C10297 * C324 - C10299 * C312 + C47481 * C1559 - C10300 * C1558) *
                C47448) *
               C47369 * C47181 * C47461) *
              C47455)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C10297 * C124 - C10299 * C117 + C47481 * C478 - C10300 * C468) *
               C4719 +
           (C10297 * C138 - C10299 * C125 + C47481 * C498 - C10300 * C479) *
               C4715 +
           (C10302 - C10303 + C10304 - C10305) * C4720 +
           (C10306 - C10307 + C10308 - C10309) * C47448) *
              C47369 * C47181 * C47163 * C108 +
          ((C10303 - C10302 + C10305 - C10304) * C4719 +
           (C10307 - C10306 + C10309 - C10308) * C4715 +
           (C10310 - C10311 + C10312 - C10313) * C4720 +
           (C10314 - C10315 + C10316 - C10317) * C47448) *
              C47369 * C47181 * C47163 * C109 +
          ((C10311 - C10310 + C10313 - C10312) * C4719 +
           (C10315 - C10314 + C10317 - C10316) * C4715 +
           (C10318 - C10319 + C10320 - C10321) * C4720 +
           (C10322 - C10323 + C10324 - C10325) * C47448) *
              C47369 * C47181 * C47163 * C110 +
          ((C10319 - C10318 + C10321 - C10320) * C4719 +
           (C10323 - C10322 + C10325 - C10324) * C4715 +
           (C10326 - C10327 + C10328 - C10329) * C4720 +
           (C10330 - C10331 + C10332 - C10333) * C47448) *
              C47369 * C47181 * C47163 * C111 +
          ((C10327 - C10326 + C10329 - C10328) * C4719 +
           (C10331 - C10330 + C10333 - C10332) * C4715 +
           (C10297 * C134 - C10299 * C122 + C47481 * C751 - C10300 * C750) *
               C4720 +
           (C10297 * C143 - C10299 * C135 + C47481 * C753 - C10300 * C752) *
               C47448) *
              C47369 * C47181 * C47163 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C10297 * C124 - C10299 * C117 + C47481 * C478 - C10300 * C468) *
                C4719 +
            (C10297 * C138 - C10299 * C125 + C47481 * C498 - C10300 * C479) *
                C4715 +
            (C10302 - C10303 + C10304 - C10305) * C4720 +
            (C10306 - C10307 + C10308 - C10309) * C47448) *
               C47369 * C47181 * C1050 +
           ((C10299 * C287 - C10297 * C297 + C10300 * C906 - C47481 * C911) *
                C4719 +
            (C10299 * C298 - C10297 * C317 + C10300 * C912 - C47481 * C921) *
                C4715 +
            (C10480 - C10481 + C10482 - C10483) * C4720 +
            (C10484 - C10485 + C10486 - C10487) * C47448) *
               C47369 * C47181 * C1051 +
           ((C10297 * C303 - C10299 * C290 + C47481 * C1273 - C10300 * C1261) *
                C4719 +
            (C10297 * C320 - C10299 * C304 + C47481 * C1288 - C10300 * C1274) *
                C4715 +
            (C10488 - C10489 + C10490 - C10491) * C4720 +
            (C10492 - C10493 + C10494 - C10495) * C47448) *
               C47369 * C47181 * C47461) *
              C47497 +
          (((C10303 - C10302 + C10305 - C10304) * C4719 +
            (C10307 - C10306 + C10309 - C10308) * C4715 +
            (C10310 - C10311 + C10312 - C10313) * C4720 +
            (C10314 - C10315 + C10316 - C10317) * C47448) *
               C47369 * C47181 * C1050 +
           ((C10481 - C10480 + C10483 - C10482) * C4719 +
            (C10485 - C10484 + C10487 - C10486) * C4715 +
            (C10496 - C10497 + C10498 - C10499) * C4720 +
            (C10500 - C10501 + C10502 - C10503) * C47448) *
               C47369 * C47181 * C1051 +
           ((C10489 - C10488 + C10491 - C10490) * C4719 +
            (C10493 - C10492 + C10495 - C10494) * C4715 +
            (C10504 - C10505 + C10506 - C10507) * C4720 +
            (C10508 - C10509 + C10510 - C10511) * C47448) *
               C47369 * C47181 * C47461) *
              C47484 +
          (((C10311 - C10310 + C10313 - C10312) * C4719 +
            (C10315 - C10314 + C10317 - C10316) * C4715 +
            (C10318 - C10319 + C10320 - C10321) * C4720 +
            (C10322 - C10323 + C10324 - C10325) * C47448) *
               C47369 * C47181 * C1050 +
           ((C10497 - C10496 + C10499 - C10498) * C4719 +
            (C10501 - C10500 + C10503 - C10502) * C4715 +
            (C10820 - C10821 + C10822 - C10823) * C4720 +
            (C10824 - C10825 + C10826 - C10827) * C47448) *
               C47369 * C47181 * C1051 +
           ((C10505 - C10504 + C10507 - C10506) * C4719 +
            (C10509 - C10508 + C10511 - C10510) * C4715 +
            (C10297 * C311 - C10299 * C294 + C47481 * C1557 - C10300 * C1556) *
                C4720 +
            (C10297 * C324 - C10299 * C312 + C47481 * C1559 - C10300 * C1558) *
                C47448) *
               C47369 * C47181 * C47461) *
              C47455)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C10297 * C124 - C10299 * C117 + C47481 * C478 - C10300 * C468) *
               C4719 +
           (C10297 * C138 - C10299 * C125 + C47481 * C498 - C10300 * C479) *
               C4715 +
           (C10302 - C10303 + C10304 - C10305) * C4720 +
           (C10306 - C10307 + C10308 - C10309) * C47448) *
              C47369 * C47181 * C1118 +
          ((C10299 * C287 - C10297 * C297 + C10300 * C906 - C47481 * C911) *
               C4719 +
           (C10299 * C298 - C10297 * C317 + C10300 * C912 - C47481 * C921) *
               C4715 +
           (C10480 - C10481 + C10482 - C10483) * C4720 +
           (C10484 - C10485 + C10486 - C10487) * C47448) *
              C47369 * C47181 * C1119 +
          ((C10297 * C303 - C10299 * C290 + C47481 * C1273 - C10300 * C1261) *
               C4719 +
           (C10297 * C320 - C10299 * C304 + C47481 * C1288 - C10300 * C1274) *
               C4715 +
           (C10488 - C10489 + C10490 - C10491) * C4720 +
           (C10492 - C10493 + C10494 - C10495) * C47448) *
              C47369 * C47181 * C1120 +
          ((C10299 * C1124 - C10297 * C1130 + C10300 * C1666 - C47481 * C1669) *
               C4719 +
           (C10299 * C1131 - C10297 * C1142 + C10300 * C1670 - C47481 * C1675) *
               C4715 +
           (C10299 * C1125 - C10297 * C1132 + C10300 * C1667 - C47481 * C1671) *
               C4720 +
           (C10299 * C1133 - C10297 * C1143 + C10300 * C1672 - C47481 * C1676) *
               C47448) *
              C47369 * C47181 * C1121 +
          ((C10297 * C1136 - C10299 * C1127 + C47481 * C6385 - C10300 * C6383) *
               C4719 +
           (C10297 * C1145 - C10299 * C1137 + C47481 * C6389 - C10300 * C6386) *
               C4715 +
           (C10297 * C1138 - C10299 * C1128 + C47481 * C6387 - C10300 * C6384) *
               C4720 +
           (C10297 * C1146 - C10299 * C1139 + C47481 * C6390 - C10300 * C6388) *
               C47448) *
              C47369 * C47181 * C1122) *
         C47135) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C10297 * C124 - C10299 * C117 + C47481 * C478 - C10300 * C468) *
                C4719 +
            (C10297 * C138 - C10299 * C125 + C47481 * C498 - C10300 * C479) *
                C4715 +
            (C10302 - C10303 + C10304 - C10305) * C4720 +
            (C10306 - C10307 + C10308 - C10309) * C47448) *
               C47369 * C1788 +
           ((C10299 * C468 - C10297 * C478 + C10300 * C471 - C47481 * C484) *
                C4719 +
            (C10299 * C479 - C10297 * C498 + C10300 * C485 - C47481 * C501) *
                C4715 +
            (C10658 - C10659 + C10660 - C10661) * C4720 +
            (C10662 - C10663 + C10664 - C10665) * C47448) *
               C47369 * C1789 +
           ((C10297 * C484 - C10299 * C471 + C47481 * C1974 - C10300 * C1968) *
                C4719 +
            (C10297 * C501 - C10299 * C485 + C47481 * C1986 - C10300 * C1975) *
                C4715 +
            (C10666 - C10667 + C10668 - C10669) * C4720 +
            (C10670 - C10671 + C10672 - C10673) * C47448) *
               C47369 * C47464) *
              C47163 * C47497 +
          (((C10303 - C10302 + C10305 - C10304) * C4719 +
            (C10307 - C10306 + C10309 - C10308) * C4715 +
            (C10310 - C10311 + C10312 - C10313) * C4720 +
            (C10314 - C10315 + C10316 - C10317) * C47448) *
               C47369 * C1788 +
           ((C10659 - C10658 + C10661 - C10660) * C4719 +
            (C10663 - C10662 + C10665 - C10664) * C4715 +
            (C10674 - C10675 + C10676 - C10677) * C4720 +
            (C10678 - C10679 + C10680 - C10681) * C47448) *
               C47369 * C1789 +
           ((C10667 - C10666 + C10669 - C10668) * C4719 +
            (C10671 - C10670 + C10673 - C10672) * C4715 +
            (C10682 - C10683 + C10684 - C10685) * C4720 +
            (C10686 - C10687 + C10688 - C10689) * C47448) *
               C47369 * C47464) *
              C47163 * C47484 +
          (((C10311 - C10310 + C10313 - C10312) * C4719 +
            (C10315 - C10314 + C10317 - C10316) * C4715 +
            (C10318 - C10319 + C10320 - C10321) * C4720 +
            (C10322 - C10323 + C10324 - C10325) * C47448) *
               C47369 * C1788 +
           ((C10675 - C10674 + C10677 - C10676) * C4719 +
            (C10679 - C10678 + C10681 - C10680) * C4715 +
            (C10958 - C10959 + C10960 - C10961) * C4720 +
            (C10962 - C10963 + C10964 - C10965) * C47448) *
               C47369 * C1789 +
           ((C10683 - C10682 + C10685 - C10684) * C4719 +
            (C10687 - C10686 + C10689 - C10688) * C4715 +
            (C10297 * C492 - C10299 * C475 + C47481 * C2253 - C10300 * C2252) *
                C4720 +
            (C10297 * C505 - C10299 * C493 + C47481 * C2255 - C10300 * C2254) *
                C47448) *
               C47369 * C47464) *
              C47163 * C47455)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C10297 * C124 - C10299 * C117 + C47481 * C478 - C10300 * C468) *
                C4719 +
            (C10297 * C138 - C10299 * C125 + C47481 * C498 - C10300 * C479) *
                C4715 +
            (C10302 - C10303 + C10304 - C10305) * C4720 +
            (C10306 - C10307 + C10308 - C10309) * C47448) *
               C47369 * C1788 +
           ((C10299 * C468 - C10297 * C478 + C10300 * C471 - C47481 * C484) *
                C4719 +
            (C10299 * C479 - C10297 * C498 + C10300 * C485 - C47481 * C501) *
                C4715 +
            (C10658 - C10659 + C10660 - C10661) * C4720 +
            (C10662 - C10663 + C10664 - C10665) * C47448) *
               C47369 * C1789 +
           ((C10297 * C484 - C10299 * C471 + C47481 * C1974 - C10300 * C1968) *
                C4719 +
            (C10297 * C501 - C10299 * C485 + C47481 * C1986 - C10300 * C1975) *
                C4715 +
            (C10666 - C10667 + C10668 - C10669) * C4720 +
            (C10670 - C10671 + C10672 - C10673) * C47448) *
               C47369 * C47464) *
              C47500 +
          (((C10299 * C287 - C10297 * C297 + C10300 * C906 - C47481 * C911) *
                C4719 +
            (C10299 * C298 - C10297 * C317 + C10300 * C912 - C47481 * C921) *
                C4715 +
            (C10480 - C10481 + C10482 - C10483) * C4720 +
            (C10484 - C10485 + C10486 - C10487) * C47448) *
               C47369 * C1788 +
           ((C10297 * C911 - C10299 * C906 + C47481 * C1267 - C10300 * C1258) *
                C4719 +
            (C10297 * C921 - C10299 * C912 + C47481 * C1285 - C10300 * C1268) *
                C4715 +
            (C11160 - C11161 + C11162 - C11163) * C4720 +
            (C11164 - C11165 + C11166 - C11167) * C47448) *
               C47369 * C1789 +
           ((C10299 * C1258 - C10297 * C1267 + C10300 * C2362 -
             C47481 * C2365) *
                C4719 +
            (C10299 * C1268 - C10297 * C1285 + C10300 * C2366 -
             C47481 * C2371) *
                C4715 +
            (C10299 * C1259 - C10297 * C1269 + C10300 * C2363 -
             C47481 * C2367) *
                C4720 +
            (C10299 * C1270 - C10297 * C1286 + C10300 * C2368 -
             C47481 * C2372) *
                C47448) *
               C47369 * C47464) *
              C47488 +
          (((C10297 * C303 - C10299 * C290 + C47481 * C1273 - C10300 * C1261) *
                C4719 +
            (C10297 * C320 - C10299 * C304 + C47481 * C1288 - C10300 * C1274) *
                C4715 +
            (C10488 - C10489 + C10490 - C10491) * C4720 +
            (C10492 - C10493 + C10494 - C10495) * C47448) *
               C47369 * C1788 +
           ((C10299 * C1261 - C10297 * C1273 + C10300 * C1264 -
             C47481 * C1279) *
                C4719 +
            (C10299 * C1274 - C10297 * C1288 + C10300 * C1280 -
             C47481 * C1291) *
                C4715 +
            (C11882 - C11883 + C11884 - C11885) * C4720 +
            (C11886 - C11887 + C11888 - C11889) * C47448) *
               C47369 * C1789 +
           ((C10297 * C1279 - C10299 * C1264 + C47481 * C7241 -
             C10300 * C7239) *
                C4719 +
            (C10297 * C1291 - C10299 * C1280 + C47481 * C7245 -
             C10300 * C7242) *
                C4715 +
            (C10297 * C1281 - C10299 * C1265 + C47481 * C7243 -
             C10300 * C7240) *
                C4720 +
            (C10297 * C1292 - C10299 * C1282 + C47481 * C7246 -
             C10300 * C7244) *
                C47448) *
               C47369 * C47464) *
              C47461) *
         C47135) /
            (p * q * std::sqrt(p + q));
    d2ee[65] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C10297 * C124 - C10299 * C117 + C47481 * C478 - C10300 * C468) *
                 C4719 +
             (C10297 * C138 - C10299 * C125 + C47481 * C498 - C10300 * C479) *
                 C4715 +
             (C10302 - C10303 + C10304 - C10305) * C4720 +
             (C10306 - C10307 + C10308 - C10309) * C47448) *
                C47369 * C3234 +
            ((C10299 * C468 - C10297 * C478 + C10300 * C471 - C47481 * C484) *
                 C4719 +
             (C10299 * C479 - C10297 * C498 + C10300 * C485 - C47481 * C501) *
                 C4715 +
             (C10658 - C10659 + C10660 - C10661) * C4720 +
             (C10662 - C10663 + C10664 - C10665) * C47448) *
                C47369 * C47268) *
               C47429 +
           (((C10299 * C287 - C10297 * C297 + C10300 * C906 - C47481 * C911) *
                 C4719 +
             (C10299 * C298 - C10297 * C317 + C10300 * C912 - C47481 * C921) *
                 C4715 +
             (C10480 - C10481 + C10482 - C10483) * C4720 +
             (C10484 - C10485 + C10486 - C10487) * C47448) *
                C47369 * C3234 +
            ((C10297 * C911 - C10299 * C906 + C47481 * C1267 - C10300 * C1258) *
                 C4719 +
             (C10297 * C921 - C10299 * C912 + C47481 * C1285 - C10300 * C1268) *
                 C4715 +
             (C11160 - C11161 + C11162 - C11163) * C4720 +
             (C11164 - C11165 + C11166 - C11167) * C47448) *
                C47369 * C47268) *
               C47226) *
              C47140 +
          ((((C10303 - C10302 + C10305 - C10304) * C4719 +
             (C10307 - C10306 + C10309 - C10308) * C4715 +
             (C10310 - C10311 + C10312 - C10313) * C4720 +
             (C10314 - C10315 + C10316 - C10317) * C47448) *
                C47369 * C3234 +
            ((C10659 - C10658 + C10661 - C10660) * C4719 +
             (C10663 - C10662 + C10665 - C10664) * C4715 +
             (C10674 - C10675 + C10676 - C10677) * C4720 +
             (C10678 - C10679 + C10680 - C10681) * C47448) *
                C47369 * C47268) *
               C47429 +
           (((C10481 - C10480 + C10483 - C10482) * C4719 +
             (C10485 - C10484 + C10487 - C10486) * C4715 +
             (C10496 - C10497 + C10498 - C10499) * C4720 +
             (C10500 - C10501 + C10502 - C10503) * C47448) *
                C47369 * C3234 +
            ((C11161 - C11160 + C11163 - C11162) * C4719 +
             (C11165 - C11164 + C11167 - C11166) * C4715 +
             (C11168 - C11169 + C11170 - C11171) * C4720 +
             (C11172 - C11173 + C11174 - C11175) * C47448) *
                C47369 * C47268) *
               C47226) *
              C47149 +
          ((((C10311 - C10310 + C10313 - C10312) * C4719 +
             (C10315 - C10314 + C10317 - C10316) * C4715 +
             (C10318 - C10319 + C10320 - C10321) * C4720 +
             (C10322 - C10323 + C10324 - C10325) * C47448) *
                C47369 * C3234 +
            ((C10675 - C10674 + C10677 - C10676) * C4719 +
             (C10679 - C10678 + C10681 - C10680) * C4715 +
             (C10958 - C10959 + C10960 - C10961) * C4720 +
             (C10962 - C10963 + C10964 - C10965) * C47448) *
                C47369 * C47268) *
               C47429 +
           (((C10497 - C10496 + C10499 - C10498) * C4719 +
             (C10501 - C10500 + C10503 - C10502) * C4715 +
             (C10820 - C10821 + C10822 - C10823) * C4720 +
             (C10824 - C10825 + C10826 - C10827) * C47448) *
                C47369 * C3234 +
            ((C11169 - C11168 + C11171 - C11170) * C4719 +
             (C11173 - C11172 + C11175 - C11174) * C4715 +
             (C10297 * C917 - C10299 * C909 + C47481 * C2139 - C10300 * C2138) *
                 C4720 +
             (C10297 * C924 - C10299 * C918 + C47481 * C2141 - C10300 * C2140) *
                 C47448) *
                C47369 * C47268) *
               C47226) *
              C2843)) /
        (p * q * std::sqrt(p + q));
    d2ee[66] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C10297 * C124 - C10299 * C117 + C47481 * C478 - C10300 * C468) *
                 C4719 +
             (C10297 * C138 - C10299 * C125 + C47481 * C498 - C10300 * C479) *
                 C4715 +
             (C10302 - C10303 + C10304 - C10305) * C4720 +
             (C10306 - C10307 + C10308 - C10309) * C47448) *
                C47369 * C47264 +
            ((C10299 * C468 - C10297 * C478 + C10300 * C471 - C47481 * C484) *
                 C4719 +
             (C10299 * C479 - C10297 * C498 + C10300 * C485 - C47481 * C501) *
                 C4715 +
             (C10658 - C10659 + C10660 - C10661) * C4720 +
             (C10662 - C10663 + C10664 - C10665) * C47448) *
                C47369 * C47271 +
            ((C10297 * C484 - C10299 * C471 + C47481 * C1974 - C10300 * C1968) *
                 C4719 +
             (C10297 * C501 - C10299 * C485 + C47481 * C1986 - C10300 * C1975) *
                 C4715 +
             (C10666 - C10667 + C10668 - C10669) * C4720 +
             (C10670 - C10671 + C10672 - C10673) * C47448) *
                C47369 * C3742) *
               C47429 +
           (((C10299 * C287 - C10297 * C297 + C10300 * C906 - C47481 * C911) *
                 C4719 +
             (C10299 * C298 - C10297 * C317 + C10300 * C912 - C47481 * C921) *
                 C4715 +
             (C10480 - C10481 + C10482 - C10483) * C4720 +
             (C10484 - C10485 + C10486 - C10487) * C47448) *
                C47369 * C47264 +
            ((C10297 * C911 - C10299 * C906 + C47481 * C1267 - C10300 * C1258) *
                 C4719 +
             (C10297 * C921 - C10299 * C912 + C47481 * C1285 - C10300 * C1268) *
                 C4715 +
             (C11160 - C11161 + C11162 - C11163) * C4720 +
             (C11164 - C11165 + C11166 - C11167) * C47448) *
                C47369 * C47271 +
            ((C10299 * C1258 - C10297 * C1267 + C10300 * C2362 -
              C47481 * C2365) *
                 C4719 +
             (C10299 * C1268 - C10297 * C1285 + C10300 * C2366 -
              C47481 * C2371) *
                 C4715 +
             (C12596 - C12597 + C12598 - C12599) * C4720 +
             (C12600 - C12601 + C12602 - C12603) * C47448) *
                C47369 * C3742) *
               C47226) *
              C2580 +
          ((((C10303 - C10302 + C10305 - C10304) * C4719 +
             (C10307 - C10306 + C10309 - C10308) * C4715 +
             (C10310 - C10311 + C10312 - C10313) * C4720 +
             (C10314 - C10315 + C10316 - C10317) * C47448) *
                C47369 * C47264 +
            ((C10659 - C10658 + C10661 - C10660) * C4719 +
             (C10663 - C10662 + C10665 - C10664) * C4715 +
             (C10674 - C10675 + C10676 - C10677) * C4720 +
             (C10678 - C10679 + C10680 - C10681) * C47448) *
                C47369 * C47271 +
            ((C10667 - C10666 + C10669 - C10668) * C4719 +
             (C10671 - C10670 + C10673 - C10672) * C4715 +
             (C10682 - C10683 + C10684 - C10685) * C4720 +
             (C10686 - C10687 + C10688 - C10689) * C47448) *
                C47369 * C3742) *
               C47429 +
           (((C10481 - C10480 + C10483 - C10482) * C4719 +
             (C10485 - C10484 + C10487 - C10486) * C4715 +
             (C10496 - C10497 + C10498 - C10499) * C4720 +
             (C10500 - C10501 + C10502 - C10503) * C47448) *
                C47369 * C47264 +
            ((C11161 - C11160 + C11163 - C11162) * C4719 +
             (C11165 - C11164 + C11167 - C11166) * C4715 +
             (C11168 - C11169 + C11170 - C11171) * C4720 +
             (C11172 - C11173 + C11174 - C11175) * C47448) *
                C47369 * C47271 +
            ((C12597 - C12596 + C12599 - C12598) * C4719 +
             (C12601 - C12600 + C12603 - C12602) * C4715 +
             (C10297 * C1271 - C10299 * C1260 + C47481 * C2369 -
              C10300 * C2364) *
                 C4720 +
             (C10297 * C1287 - C10299 * C1272 + C47481 * C2373 -
              C10300 * C2370) *
                 C47448) *
                C47369 * C3742) *
               C47226) *
              C47146)) /
        (p * q * std::sqrt(p + q));
    d2ee[67] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C10297 * C124 - C10299 * C117 + C47481 * C478 - C10300 * C468) *
                 C4719 +
             (C10297 * C138 - C10299 * C125 + C47481 * C498 - C10300 * C479) *
                 C4715 +
             (C10302 - C10303 + C10304 - C10305) * C4720 +
             (C10306 - C10307 + C10308 - C10309) * C47448) *
                C47369 * C3234 +
            ((C10299 * C468 - C10297 * C478 + C10300 * C471 - C47481 * C484) *
                 C4719 +
             (C10299 * C479 - C10297 * C498 + C10300 * C485 - C47481 * C501) *
                 C4715 +
             (C10658 - C10659 + C10660 - C10661) * C4720 +
             (C10662 - C10663 + C10664 - C10665) * C47448) *
                C47369 * C47268) *
               C47500 +
           (((C10299 * C287 - C10297 * C297 + C10300 * C906 - C47481 * C911) *
                 C4719 +
             (C10299 * C298 - C10297 * C317 + C10300 * C912 - C47481 * C921) *
                 C4715 +
             (C10480 - C10481 + C10482 - C10483) * C4720 +
             (C10484 - C10485 + C10486 - C10487) * C47448) *
                C47369 * C3234 +
            ((C10297 * C911 - C10299 * C906 + C47481 * C1267 - C10300 * C1258) *
                 C4719 +
             (C10297 * C921 - C10299 * C912 + C47481 * C1285 - C10300 * C1268) *
                 C4715 +
             (C11160 - C11161 + C11162 - C11163) * C4720 +
             (C11164 - C11165 + C11166 - C11167) * C47448) *
                C47369 * C47268) *
               C47488 +
           (((C10297 * C303 - C10299 * C290 + C47481 * C1273 - C10300 * C1261) *
                 C4719 +
             (C10297 * C320 - C10299 * C304 + C47481 * C1288 - C10300 * C1274) *
                 C4715 +
             (C10488 - C10489 + C10490 - C10491) * C4720 +
             (C10492 - C10493 + C10494 - C10495) * C47448) *
                C47369 * C3234 +
            ((C10299 * C1261 - C10297 * C1273 + C10300 * C1264 -
              C47481 * C1279) *
                 C4719 +
             (C10299 * C1274 - C10297 * C1288 + C10300 * C1280 -
              C47481 * C1291) *
                 C4715 +
             (C11882 - C11883 + C11884 - C11885) * C4720 +
             (C11886 - C11887 + C11888 - C11889) * C47448) *
                C47369 * C47268) *
               C47461) *
              C2580 +
          ((((C10303 - C10302 + C10305 - C10304) * C4719 +
             (C10307 - C10306 + C10309 - C10308) * C4715 +
             (C10310 - C10311 + C10312 - C10313) * C4720 +
             (C10314 - C10315 + C10316 - C10317) * C47448) *
                C47369 * C3234 +
            ((C10659 - C10658 + C10661 - C10660) * C4719 +
             (C10663 - C10662 + C10665 - C10664) * C4715 +
             (C10674 - C10675 + C10676 - C10677) * C4720 +
             (C10678 - C10679 + C10680 - C10681) * C47448) *
                C47369 * C47268) *
               C47500 +
           (((C10481 - C10480 + C10483 - C10482) * C4719 +
             (C10485 - C10484 + C10487 - C10486) * C4715 +
             (C10496 - C10497 + C10498 - C10499) * C4720 +
             (C10500 - C10501 + C10502 - C10503) * C47448) *
                C47369 * C3234 +
            ((C11161 - C11160 + C11163 - C11162) * C4719 +
             (C11165 - C11164 + C11167 - C11166) * C4715 +
             (C11168 - C11169 + C11170 - C11171) * C4720 +
             (C11172 - C11173 + C11174 - C11175) * C47448) *
                C47369 * C47268) *
               C47488 +
           (((C10489 - C10488 + C10491 - C10490) * C4719 +
             (C10493 - C10492 + C10495 - C10494) * C4715 +
             (C10504 - C10505 + C10506 - C10507) * C4720 +
             (C10508 - C10509 + C10510 - C10511) * C47448) *
                C47369 * C3234 +
            ((C11883 - C11882 + C11885 - C11884) * C4719 +
             (C11887 - C11886 + C11889 - C11888) * C4715 +
             (C10297 * C1277 - C10299 * C1263 + C47481 * C1283 -
              C10300 * C1266) *
                 C4720 +
             (C10297 * C1290 - C10299 * C1278 + C47481 * C1293 -
              C10300 * C1284) *
                 C47448) *
                C47369 * C47268) *
               C47461) *
              C47146)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C10297 * C124 - C10299 * C117 + C47481 * C478 - C10300 * C468) *
                C4719 +
            (C10297 * C138 - C10299 * C125 + C47481 * C498 - C10300 * C479) *
                C4715 +
            (C10302 - C10303 + C10304 - C10305) * C4720 +
            (C10306 - C10307 + C10308 - C10309) * C47448) *
               C47369 * C3234 +
           ((C10299 * C468 - C10297 * C478 + C10300 * C471 - C47481 * C484) *
                C4719 +
            (C10299 * C479 - C10297 * C498 + C10300 * C485 - C47481 * C501) *
                C4715 +
            (C10658 - C10659 + C10660 - C10661) * C4720 +
            (C10662 - C10663 + C10664 - C10665) * C47448) *
               C47369 * C47268) *
              C47163 * C47506 +
          (((C10303 - C10302 + C10305 - C10304) * C4719 +
            (C10307 - C10306 + C10309 - C10308) * C4715 +
            (C10310 - C10311 + C10312 - C10313) * C4720 +
            (C10314 - C10315 + C10316 - C10317) * C47448) *
               C47369 * C3234 +
           ((C10659 - C10658 + C10661 - C10660) * C4719 +
            (C10663 - C10662 + C10665 - C10664) * C4715 +
            (C10674 - C10675 + C10676 - C10677) * C4720 +
            (C10678 - C10679 + C10680 - C10681) * C47448) *
               C47369 * C47268) *
              C47163 * C47499 +
          (((C10311 - C10310 + C10313 - C10312) * C4719 +
            (C10315 - C10314 + C10317 - C10316) * C4715 +
            (C10318 - C10319 + C10320 - C10321) * C4720 +
            (C10322 - C10323 + C10324 - C10325) * C47448) *
               C47369 * C3234 +
           ((C10675 - C10674 + C10677 - C10676) * C4719 +
            (C10679 - C10678 + C10681 - C10680) * C4715 +
            (C10958 - C10959 + C10960 - C10961) * C4720 +
            (C10962 - C10963 + C10964 - C10965) * C47448) *
               C47369 * C47268) *
              C47163 * C47486 +
          (((C10319 - C10318 + C10321 - C10320) * C4719 +
            (C10323 - C10322 + C10325 - C10324) * C4715 +
            (C10326 - C10327 + C10328 - C10329) * C4720 +
            (C10330 - C10331 + C10332 - C10333) * C47448) *
               C47369 * C3234 +
           ((C10959 - C10958 + C10961 - C10960) * C4719 +
            (C10963 - C10962 + C10965 - C10964) * C4715 +
            (C10297 * C494 - C10299 * C476 + C47481 * C496 - C10300 * C477) *
                C4720 +
            (C10297 * C506 - C10299 * C495 + C47481 * C507 - C10300 * C497) *
                C47448) *
               C47369 * C47268) *
              C47163 * C47465)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C10297 * C124 - C10299 * C117 + C47481 * C478 - C10300 * C468) *
                C4719 +
            (C10297 * C138 - C10299 * C125 + C47481 * C498 - C10300 * C479) *
                C4715 +
            (C10302 - C10303 + C10304 - C10305) * C4720 +
            (C10306 - C10307 + C10308 - C10309) * C47448) *
               C47369 * C47508 +
           ((C10299 * C468 - C10297 * C478 + C10300 * C471 - C47481 * C484) *
                C4719 +
            (C10299 * C479 - C10297 * C498 + C10300 * C485 - C47481 * C501) *
                C4715 +
            (C10658 - C10659 + C10660 - C10661) * C4720 +
            (C10662 - C10663 + C10664 - C10665) * C47448) *
               C47369 * C47505 +
           ((C10297 * C484 - C10299 * C471 + C47481 * C1974 - C10300 * C1968) *
                C4719 +
            (C10297 * C501 - C10299 * C485 + C47481 * C1986 - C10300 * C1975) *
                C4715 +
            (C10666 - C10667 + C10668 - C10669) * C4720 +
            (C10670 - C10671 + C10672 - C10673) * C47448) *
               C47369 * C47496 +
           ((C10299 * C1968 - C10297 * C1974 + C10300 * C1971 -
             C47481 * C1980) *
                C4719 +
            (C10299 * C1975 - C10297 * C1986 + C10300 * C1981 -
             C47481 * C1989) *
                C4715 +
            (C12734 - C12735 + C12736 - C12737) * C4720 +
            (C12738 - C12739 + C12740 - C12741) * C47448) *
               C47369 * C47477) *
              C47163 * C2580 +
          (((C10303 - C10302 + C10305 - C10304) * C4719 +
            (C10307 - C10306 + C10309 - C10308) * C4715 +
            (C10310 - C10311 + C10312 - C10313) * C4720 +
            (C10314 - C10315 + C10316 - C10317) * C47448) *
               C47369 * C47508 +
           ((C10659 - C10658 + C10661 - C10660) * C4719 +
            (C10663 - C10662 + C10665 - C10664) * C4715 +
            (C10674 - C10675 + C10676 - C10677) * C4720 +
            (C10678 - C10679 + C10680 - C10681) * C47448) *
               C47369 * C47505 +
           ((C10667 - C10666 + C10669 - C10668) * C4719 +
            (C10671 - C10670 + C10673 - C10672) * C4715 +
            (C10682 - C10683 + C10684 - C10685) * C4720 +
            (C10686 - C10687 + C10688 - C10689) * C47448) *
               C47369 * C47496 +
           ((C12735 - C12734 + C12737 - C12736) * C4719 +
            (C12739 - C12738 + C12741 - C12740) * C4715 +
            (C10297 * C1978 - C10299 * C1970 + C47481 * C1984 -
             C10300 * C1973) *
                C4720 +
            (C10297 * C1988 - C10299 * C1979 + C47481 * C1991 -
             C10300 * C1985) *
                C47448) *
               C47369 * C47477) *
              C47163 * C47146)) /
            (p * q * std::sqrt(p + q));
    d2ee[68] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C10297 * C124 - C10299 * C117 + C47481 * C478 - C10300 * C468) *
                C4719 +
            (C10297 * C138 - C10299 * C125 + C47481 * C498 - C10300 * C479) *
                C4715 +
            (C10302 - C10303 + C10304 - C10305) * C4720 +
            (C10306 - C10307 + C10308 - C10309) * C47448) *
               C47369 * C47264 +
           ((C10299 * C468 - C10297 * C478 + C10300 * C471 - C47481 * C484) *
                C4719 +
            (C10299 * C479 - C10297 * C498 + C10300 * C485 - C47481 * C501) *
                C4715 +
            (C10658 - C10659 + C10660 - C10661) * C4720 +
            (C10662 - C10663 + C10664 - C10665) * C47448) *
               C47369 * C47271 +
           ((C10297 * C484 - C10299 * C471 + C47481 * C1974 - C10300 * C1968) *
                C4719 +
            (C10297 * C501 - C10299 * C485 + C47481 * C1986 - C10300 * C1975) *
                C4715 +
            (C10666 - C10667 + C10668 - C10669) * C4720 +
            (C10670 - C10671 + C10672 - C10673) * C47448) *
               C47369 * C3742) *
              C47163 * C47140 +
          (((C10303 - C10302 + C10305 - C10304) * C4719 +
            (C10307 - C10306 + C10309 - C10308) * C4715 +
            (C10310 - C10311 + C10312 - C10313) * C4720 +
            (C10314 - C10315 + C10316 - C10317) * C47448) *
               C47369 * C47264 +
           ((C10659 - C10658 + C10661 - C10660) * C4719 +
            (C10663 - C10662 + C10665 - C10664) * C4715 +
            (C10674 - C10675 + C10676 - C10677) * C4720 +
            (C10678 - C10679 + C10680 - C10681) * C47448) *
               C47369 * C47271 +
           ((C10667 - C10666 + C10669 - C10668) * C4719 +
            (C10671 - C10670 + C10673 - C10672) * C4715 +
            (C10682 - C10683 + C10684 - C10685) * C4720 +
            (C10686 - C10687 + C10688 - C10689) * C47448) *
               C47369 * C3742) *
              C47163 * C47149 +
          (((C10311 - C10310 + C10313 - C10312) * C4719 +
            (C10315 - C10314 + C10317 - C10316) * C4715 +
            (C10318 - C10319 + C10320 - C10321) * C4720 +
            (C10322 - C10323 + C10324 - C10325) * C47448) *
               C47369 * C47264 +
           ((C10675 - C10674 + C10677 - C10676) * C4719 +
            (C10679 - C10678 + C10681 - C10680) * C4715 +
            (C10958 - C10959 + C10960 - C10961) * C4720 +
            (C10962 - C10963 + C10964 - C10965) * C47448) *
               C47369 * C47271 +
           ((C10683 - C10682 + C10685 - C10684) * C4719 +
            (C10687 - C10686 + C10689 - C10688) * C4715 +
            (C10297 * C492 - C10299 * C475 + C47481 * C2253 - C10300 * C2252) *
                C4720 +
            (C10297 * C505 - C10299 * C493 + C47481 * C2255 - C10300 * C2254) *
                C47448) *
               C47369 * C3742) *
              C47163 * C2843)) /
        (p * q * std::sqrt(p + q));
    d2ee[69] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C10297 * C124 - C10299 * C117 + C47481 * C478 - C10300 * C468) *
                C4719 +
            (C10297 * C138 - C10299 * C125 + C47481 * C498 - C10300 * C479) *
                C4715 +
            (C10302 - C10303 + C10304 - C10305) * C4720 +
            (C10306 - C10307 + C10308 - C10309) * C47448) *
               C47369 * C3234 +
           ((C10299 * C468 - C10297 * C478 + C10300 * C471 - C47481 * C484) *
                C4719 +
            (C10299 * C479 - C10297 * C498 + C10300 * C485 - C47481 * C501) *
                C4715 +
            (C10658 - C10659 + C10660 - C10661) * C4720 +
            (C10662 - C10663 + C10664 - C10665) * C47448) *
               C47369 * C47268) *
              C47163 * C47506 +
          (((C10303 - C10302 + C10305 - C10304) * C4719 +
            (C10307 - C10306 + C10309 - C10308) * C4715 +
            (C10310 - C10311 + C10312 - C10313) * C4720 +
            (C10314 - C10315 + C10316 - C10317) * C47448) *
               C47369 * C3234 +
           ((C10659 - C10658 + C10661 - C10660) * C4719 +
            (C10663 - C10662 + C10665 - C10664) * C4715 +
            (C10674 - C10675 + C10676 - C10677) * C4720 +
            (C10678 - C10679 + C10680 - C10681) * C47448) *
               C47369 * C47268) *
              C47163 * C47499 +
          (((C10311 - C10310 + C10313 - C10312) * C4719 +
            (C10315 - C10314 + C10317 - C10316) * C4715 +
            (C10318 - C10319 + C10320 - C10321) * C4720 +
            (C10322 - C10323 + C10324 - C10325) * C47448) *
               C47369 * C3234 +
           ((C10675 - C10674 + C10677 - C10676) * C4719 +
            (C10679 - C10678 + C10681 - C10680) * C4715 +
            (C10958 - C10959 + C10960 - C10961) * C4720 +
            (C10962 - C10963 + C10964 - C10965) * C47448) *
               C47369 * C47268) *
              C47163 * C47486 +
          (((C10319 - C10318 + C10321 - C10320) * C4719 +
            (C10323 - C10322 + C10325 - C10324) * C4715 +
            (C10326 - C10327 + C10328 - C10329) * C4720 +
            (C10330 - C10331 + C10332 - C10333) * C47448) *
               C47369 * C3234 +
           ((C10959 - C10958 + C10961 - C10960) * C4719 +
            (C10963 - C10962 + C10965 - C10964) * C4715 +
            (C10297 * C494 - C10299 * C476 + C47481 * C496 - C10300 * C477) *
                C4720 +
            (C10297 * C506 - C10299 * C495 + C47481 * C507 - C10300 * C497) *
                C47448) *
               C47369 * C47268) *
              C47163 * C47465)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C10297 * C124 - C10299 * C117 + C47481 * C478 - C10300 * C468) *
                 C4719 +
             (C10297 * C138 - C10299 * C125 + C47481 * C498 - C10300 * C479) *
                 C4715 +
             (C10302 - C10303 + C10304 - C10305) * C4720 +
             (C10306 - C10307 + C10308 - C10309) * C47448) *
                C47369 * C3234 +
            ((C10299 * C468 - C10297 * C478 + C10300 * C471 - C47481 * C484) *
                 C4719 +
             (C10299 * C479 - C10297 * C498 + C10300 * C485 - C47481 * C501) *
                 C4715 +
             (C10658 - C10659 + C10660 - C10661) * C4720 +
             (C10662 - C10663 + C10664 - C10665) * C47448) *
                C47369 * C47268) *
               C47500 +
           (((C10299 * C287 - C10297 * C297 + C10300 * C906 - C47481 * C911) *
                 C4719 +
             (C10299 * C298 - C10297 * C317 + C10300 * C912 - C47481 * C921) *
                 C4715 +
             (C10480 - C10481 + C10482 - C10483) * C4720 +
             (C10484 - C10485 + C10486 - C10487) * C47448) *
                C47369 * C3234 +
            ((C10297 * C911 - C10299 * C906 + C47481 * C1267 - C10300 * C1258) *
                 C4719 +
             (C10297 * C921 - C10299 * C912 + C47481 * C1285 - C10300 * C1268) *
                 C4715 +
             (C11160 - C11161 + C11162 - C11163) * C4720 +
             (C11164 - C11165 + C11166 - C11167) * C47448) *
                C47369 * C47268) *
               C47488 +
           (((C10297 * C303 - C10299 * C290 + C47481 * C1273 - C10300 * C1261) *
                 C4719 +
             (C10297 * C320 - C10299 * C304 + C47481 * C1288 - C10300 * C1274) *
                 C4715 +
             (C10488 - C10489 + C10490 - C10491) * C4720 +
             (C10492 - C10493 + C10494 - C10495) * C47448) *
                C47369 * C3234 +
            ((C10299 * C1261 - C10297 * C1273 + C10300 * C1264 -
              C47481 * C1279) *
                 C4719 +
             (C10299 * C1274 - C10297 * C1288 + C10300 * C1280 -
              C47481 * C1291) *
                 C4715 +
             (C11882 - C11883 + C11884 - C11885) * C4720 +
             (C11886 - C11887 + C11888 - C11889) * C47448) *
                C47369 * C47268) *
               C47461) *
              C2580 +
          ((((C10303 - C10302 + C10305 - C10304) * C4719 +
             (C10307 - C10306 + C10309 - C10308) * C4715 +
             (C10310 - C10311 + C10312 - C10313) * C4720 +
             (C10314 - C10315 + C10316 - C10317) * C47448) *
                C47369 * C3234 +
            ((C10659 - C10658 + C10661 - C10660) * C4719 +
             (C10663 - C10662 + C10665 - C10664) * C4715 +
             (C10674 - C10675 + C10676 - C10677) * C4720 +
             (C10678 - C10679 + C10680 - C10681) * C47448) *
                C47369 * C47268) *
               C47500 +
           (((C10481 - C10480 + C10483 - C10482) * C4719 +
             (C10485 - C10484 + C10487 - C10486) * C4715 +
             (C10496 - C10497 + C10498 - C10499) * C4720 +
             (C10500 - C10501 + C10502 - C10503) * C47448) *
                C47369 * C3234 +
            ((C11161 - C11160 + C11163 - C11162) * C4719 +
             (C11165 - C11164 + C11167 - C11166) * C4715 +
             (C11168 - C11169 + C11170 - C11171) * C4720 +
             (C11172 - C11173 + C11174 - C11175) * C47448) *
                C47369 * C47268) *
               C47488 +
           (((C10489 - C10488 + C10491 - C10490) * C4719 +
             (C10493 - C10492 + C10495 - C10494) * C4715 +
             (C10504 - C10505 + C10506 - C10507) * C4720 +
             (C10508 - C10509 + C10510 - C10511) * C47448) *
                C47369 * C3234 +
            ((C11883 - C11882 + C11885 - C11884) * C4719 +
             (C11887 - C11886 + C11889 - C11888) * C4715 +
             (C10297 * C1277 - C10299 * C1263 + C47481 * C1283 -
              C10300 * C1266) *
                 C4720 +
             (C10297 * C1290 - C10299 * C1278 + C47481 * C1293 -
              C10300 * C1284) *
                 C47448) *
                C47369 * C47268) *
               C47461) *
              C47146)) /
            (p * q * std::sqrt(p + q));
    d2ee[70] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C10297 * C124 - C10299 * C117 + C47481 * C478 - C10300 * C468) *
                C4719 +
            (C10297 * C138 - C10299 * C125 + C47481 * C498 - C10300 * C479) *
                C4715 +
            (C10302 - C10303 + C10304 - C10305) * C4720 +
            (C10306 - C10307 + C10308 - C10309) * C47448) *
               C47369 * C47181 * C47429 +
           ((C10299 * C287 - C10297 * C297 + C10300 * C906 - C47481 * C911) *
                C4719 +
            (C10299 * C298 - C10297 * C317 + C10300 * C912 - C47481 * C921) *
                C4715 +
            (C10480 - C10481 + C10482 - C10483) * C4720 +
            (C10484 - C10485 + C10486 - C10487) * C47448) *
               C47369 * C47181 * C47226) *
              C636 +
          (((C10303 - C10302 + C10305 - C10304) * C4719 +
            (C10307 - C10306 + C10309 - C10308) * C4715 +
            (C10310 - C10311 + C10312 - C10313) * C4720 +
            (C10314 - C10315 + C10316 - C10317) * C47448) *
               C47369 * C47181 * C47429 +
           ((C10481 - C10480 + C10483 - C10482) * C4719 +
            (C10485 - C10484 + C10487 - C10486) * C4715 +
            (C10496 - C10497 + C10498 - C10499) * C4720 +
            (C10500 - C10501 + C10502 - C10503) * C47448) *
               C47369 * C47181 * C47226) *
              C637 +
          (((C10311 - C10310 + C10313 - C10312) * C4719 +
            (C10315 - C10314 + C10317 - C10316) * C4715 +
            (C10318 - C10319 + C10320 - C10321) * C4720 +
            (C10322 - C10323 + C10324 - C10325) * C47448) *
               C47369 * C47181 * C47429 +
           ((C10497 - C10496 + C10499 - C10498) * C4719 +
            (C10501 - C10500 + C10503 - C10502) * C4715 +
            (C10820 - C10821 + C10822 - C10823) * C4720 +
            (C10824 - C10825 + C10826 - C10827) * C47448) *
               C47369 * C47181 * C47226) *
              C638 +
          (((C10319 - C10318 + C10321 - C10320) * C4719 +
            (C10323 - C10322 + C10325 - C10324) * C4715 +
            (C10326 - C10327 + C10328 - C10329) * C4720 +
            (C10330 - C10331 + C10332 - C10333) * C47448) *
               C47369 * C47181 * C47429 +
           ((C10821 - C10820 + C10823 - C10822) * C4719 +
            (C10825 - C10824 + C10827 - C10826) * C4715 +
            (C10297 * C313 - C10299 * C295 + C47481 * C919 - C10300 * C910) *
                C4720 +
            (C10297 * C325 - C10299 * C314 + C47481 * C925 - C10300 * C920) *
                C47448) *
               C47369 * C47181 * C47226) *
              C47465)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C10297 * C124 - C10299 * C117 + C47481 * C478 - C10300 * C468) *
                C4719 +
            (C10297 * C138 - C10299 * C125 + C47481 * C498 - C10300 * C479) *
                C4715 +
            (C10302 - C10303 + C10304 - C10305) * C4720 +
            (C10306 - C10307 + C10308 - C10309) * C47448) *
               C47369 * C47181 * C1392 +
           ((C10299 * C287 - C10297 * C297 + C10300 * C906 - C47481 * C911) *
                C4719 +
            (C10299 * C298 - C10297 * C317 + C10300 * C912 - C47481 * C921) *
                C4715 +
            (C10480 - C10481 + C10482 - C10483) * C4720 +
            (C10484 - C10485 + C10486 - C10487) * C47448) *
               C47369 * C47181 * C1393 +
           ((C10297 * C303 - C10299 * C290 + C47481 * C1273 - C10300 * C1261) *
                C4719 +
            (C10297 * C320 - C10299 * C304 + C47481 * C1288 - C10300 * C1274) *
                C4715 +
            (C10488 - C10489 + C10490 - C10491) * C4720 +
            (C10492 - C10493 + C10494 - C10495) * C47448) *
               C47369 * C47181 * C1394 +
           ((C10299 * C1124 - C10297 * C1130 + C10300 * C1666 -
             C47481 * C1669) *
                C4719 +
            (C10299 * C1131 - C10297 * C1142 + C10300 * C1670 -
             C47481 * C1675) *
                C4715 +
            (C11680 - C11681 + C11682 - C11683) * C4720 +
            (C11684 - C11685 + C11686 - C11687) * C47448) *
               C47369 * C47181 * C47471) *
              C47415 +
          (((C10303 - C10302 + C10305 - C10304) * C4719 +
            (C10307 - C10306 + C10309 - C10308) * C4715 +
            (C10310 - C10311 + C10312 - C10313) * C4720 +
            (C10314 - C10315 + C10316 - C10317) * C47448) *
               C47369 * C47181 * C1392 +
           ((C10481 - C10480 + C10483 - C10482) * C4719 +
            (C10485 - C10484 + C10487 - C10486) * C4715 +
            (C10496 - C10497 + C10498 - C10499) * C4720 +
            (C10500 - C10501 + C10502 - C10503) * C47448) *
               C47369 * C47181 * C1393 +
           ((C10489 - C10488 + C10491 - C10490) * C4719 +
            (C10493 - C10492 + C10495 - C10494) * C4715 +
            (C10504 - C10505 + C10506 - C10507) * C4720 +
            (C10508 - C10509 + C10510 - C10511) * C47448) *
               C47369 * C47181 * C1394 +
           ((C11681 - C11680 + C11683 - C11682) * C4719 +
            (C11685 - C11684 + C11687 - C11686) * C4715 +
            (C10297 * C1134 - C10299 * C1126 + C47481 * C1673 -
             C10300 * C1668) *
                C4720 +
            (C10297 * C1144 - C10299 * C1135 + C47481 * C1677 -
             C10300 * C1674) *
                C47448) *
               C47369 * C47181 * C47471) *
              C47146)) /
            (p * q * std::sqrt(p + q));
    d2ee[71] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C10297 * C124 - C10299 * C117 + C47481 * C478 - C10300 * C468) *
                 C4719 +
             (C10297 * C138 - C10299 * C125 + C47481 * C498 - C10300 * C479) *
                 C4715 +
             (C10302 - C10303 + C10304 - C10305) * C4720 +
             (C10306 - C10307 + C10308 - C10309) * C47448) *
                C47369 * C47430 +
            ((C10299 * C468 - C10297 * C478 + C10300 * C471 - C47481 * C484) *
                 C4719 +
             (C10299 * C479 - C10297 * C498 + C10300 * C485 - C47481 * C501) *
                 C4715 +
             (C10658 - C10659 + C10660 - C10661) * C4720 +
             (C10662 - C10663 + C10664 - C10665) * C47448) *
                C47369 * C47268) *
               C47429 +
           (((C10299 * C287 - C10297 * C297 + C10300 * C906 - C47481 * C911) *
                 C4719 +
             (C10299 * C298 - C10297 * C317 + C10300 * C912 - C47481 * C921) *
                 C4715 +
             (C10480 - C10481 + C10482 - C10483) * C4720 +
             (C10484 - C10485 + C10486 - C10487) * C47448) *
                C47369 * C47430 +
            ((C10297 * C911 - C10299 * C906 + C47481 * C1267 - C10300 * C1258) *
                 C4719 +
             (C10297 * C921 - C10299 * C912 + C47481 * C1285 - C10300 * C1268) *
                 C4715 +
             (C11160 - C11161 + C11162 - C11163) * C4720 +
             (C11164 - C11165 + C11166 - C11167) * C47448) *
                C47369 * C47268) *
               C47226) *
              C284 +
          ((((C10303 - C10302 + C10305 - C10304) * C4719 +
             (C10307 - C10306 + C10309 - C10308) * C4715 +
             (C10310 - C10311 + C10312 - C10313) * C4720 +
             (C10314 - C10315 + C10316 - C10317) * C47448) *
                C47369 * C47430 +
            ((C10659 - C10658 + C10661 - C10660) * C4719 +
             (C10663 - C10662 + C10665 - C10664) * C4715 +
             (C10674 - C10675 + C10676 - C10677) * C4720 +
             (C10678 - C10679 + C10680 - C10681) * C47448) *
                C47369 * C47268) *
               C47429 +
           (((C10481 - C10480 + C10483 - C10482) * C4719 +
             (C10485 - C10484 + C10487 - C10486) * C4715 +
             (C10496 - C10497 + C10498 - C10499) * C4720 +
             (C10500 - C10501 + C10502 - C10503) * C47448) *
                C47369 * C47430 +
            ((C11161 - C11160 + C11163 - C11162) * C4719 +
             (C11165 - C11164 + C11167 - C11166) * C4715 +
             (C11168 - C11169 + C11170 - C11171) * C4720 +
             (C11172 - C11173 + C11174 - C11175) * C47448) *
                C47369 * C47268) *
               C47226) *
              C285 +
          ((((C10311 - C10310 + C10313 - C10312) * C4719 +
             (C10315 - C10314 + C10317 - C10316) * C4715 +
             (C10318 - C10319 + C10320 - C10321) * C4720 +
             (C10322 - C10323 + C10324 - C10325) * C47448) *
                C47369 * C47430 +
            ((C10675 - C10674 + C10677 - C10676) * C4719 +
             (C10679 - C10678 + C10681 - C10680) * C4715 +
             (C10958 - C10959 + C10960 - C10961) * C4720 +
             (C10962 - C10963 + C10964 - C10965) * C47448) *
                C47369 * C47268) *
               C47429 +
           (((C10497 - C10496 + C10499 - C10498) * C4719 +
             (C10501 - C10500 + C10503 - C10502) * C4715 +
             (C10820 - C10821 + C10822 - C10823) * C4720 +
             (C10824 - C10825 + C10826 - C10827) * C47448) *
                C47369 * C47430 +
            ((C11169 - C11168 + C11171 - C11170) * C4719 +
             (C11173 - C11172 + C11175 - C11174) * C4715 +
             (C10297 * C917 - C10299 * C909 + C47481 * C2139 - C10300 * C2138) *
                 C4720 +
             (C10297 * C924 - C10299 * C918 + C47481 * C2141 - C10300 * C2140) *
                 C47448) *
                C47369 * C47268) *
               C47226) *
              C47455)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C10297 * C124 - C10299 * C117 + C47481 * C478 - C10300 * C468) *
                C4719 +
            (C10297 * C138 - C10299 * C125 + C47481 * C498 - C10300 * C479) *
                C4715 +
            (C10302 - C10303 + C10304 - C10305) * C4720 +
            (C10306 - C10307 + C10308 - C10309) * C47448) *
               C47369 * C47430 +
           ((C10299 * C468 - C10297 * C478 + C10300 * C471 - C47481 * C484) *
                C4719 +
            (C10299 * C479 - C10297 * C498 + C10300 * C485 - C47481 * C501) *
                C4715 +
            (C10658 - C10659 + C10660 - C10661) * C4720 +
            (C10662 - C10663 + C10664 - C10665) * C47448) *
               C47369 * C47268) *
              C1392 +
          (((C10299 * C287 - C10297 * C297 + C10300 * C906 - C47481 * C911) *
                C4719 +
            (C10299 * C298 - C10297 * C317 + C10300 * C912 - C47481 * C921) *
                C4715 +
            (C10480 - C10481 + C10482 - C10483) * C4720 +
            (C10484 - C10485 + C10486 - C10487) * C47448) *
               C47369 * C47430 +
           ((C10297 * C911 - C10299 * C906 + C47481 * C1267 - C10300 * C1258) *
                C4719 +
            (C10297 * C921 - C10299 * C912 + C47481 * C1285 - C10300 * C1268) *
                C4715 +
            (C11160 - C11161 + C11162 - C11163) * C4720 +
            (C11164 - C11165 + C11166 - C11167) * C47448) *
               C47369 * C47268) *
              C1393 +
          (((C10297 * C303 - C10299 * C290 + C47481 * C1273 - C10300 * C1261) *
                C4719 +
            (C10297 * C320 - C10299 * C304 + C47481 * C1288 - C10300 * C1274) *
                C4715 +
            (C10488 - C10489 + C10490 - C10491) * C4720 +
            (C10492 - C10493 + C10494 - C10495) * C47448) *
               C47369 * C47430 +
           ((C10299 * C1261 - C10297 * C1273 + C10300 * C1264 -
             C47481 * C1279) *
                C4719 +
            (C10299 * C1274 - C10297 * C1288 + C10300 * C1280 -
             C47481 * C1291) *
                C4715 +
            (C11882 - C11883 + C11884 - C11885) * C4720 +
            (C11886 - C11887 + C11888 - C11889) * C47448) *
               C47369 * C47268) *
              C1394 +
          (((C10299 * C1124 - C10297 * C1130 + C10300 * C1666 -
             C47481 * C1669) *
                C4719 +
            (C10299 * C1131 - C10297 * C1142 + C10300 * C1670 -
             C47481 * C1675) *
                C4715 +
            (C11680 - C11681 + C11682 - C11683) * C4720 +
            (C11684 - C11685 + C11686 - C11687) * C47448) *
               C47369 * C47430 +
           ((C10297 * C1669 - C10299 * C1666 + C47481 * C5895 -
             C10300 * C5893) *
                C4719 +
            (C10297 * C1675 - C10299 * C1670 + C47481 * C5899 -
             C10300 * C5896) *
                C4715 +
            (C10297 * C1671 - C10299 * C1667 + C47481 * C5897 -
             C10300 * C5894) *
                C4720 +
            (C10297 * C1676 - C10299 * C1672 + C47481 * C5900 -
             C10300 * C5898) *
                C47448) *
               C47369 * C47268) *
              C47471) *
         C47135) /
            (p * q * std::sqrt(p + q));
    d2ee[72] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C10297 * C124 - C10299 * C117 + C47481 * C478 - C10300 * C468) *
                C4719 +
            (C10297 * C138 - C10299 * C125 + C47481 * C498 - C10300 * C479) *
                C4715 +
            (C10302 - C10303 + C10304 - C10305) * C4720 +
            (C10306 - C10307 + C10308 - C10309) * C47448) *
               C47369 * C47181 * C47500 +
           ((C10299 * C287 - C10297 * C297 + C10300 * C906 - C47481 * C911) *
                C4719 +
            (C10299 * C298 - C10297 * C317 + C10300 * C912 - C47481 * C921) *
                C4715 +
            (C10480 - C10481 + C10482 - C10483) * C4720 +
            (C10484 - C10485 + C10486 - C10487) * C47448) *
               C47369 * C47181 * C47488 +
           ((C10297 * C303 - C10299 * C290 + C47481 * C1273 - C10300 * C1261) *
                C4719 +
            (C10297 * C320 - C10299 * C304 + C47481 * C1288 - C10300 * C1274) *
                C4715 +
            (C10488 - C10489 + C10490 - C10491) * C4720 +
            (C10492 - C10493 + C10494 - C10495) * C47448) *
               C47369 * C47181 * C47461) *
              C284 +
          (((C10303 - C10302 + C10305 - C10304) * C4719 +
            (C10307 - C10306 + C10309 - C10308) * C4715 +
            (C10310 - C10311 + C10312 - C10313) * C4720 +
            (C10314 - C10315 + C10316 - C10317) * C47448) *
               C47369 * C47181 * C47500 +
           ((C10481 - C10480 + C10483 - C10482) * C4719 +
            (C10485 - C10484 + C10487 - C10486) * C4715 +
            (C10496 - C10497 + C10498 - C10499) * C4720 +
            (C10500 - C10501 + C10502 - C10503) * C47448) *
               C47369 * C47181 * C47488 +
           ((C10489 - C10488 + C10491 - C10490) * C4719 +
            (C10493 - C10492 + C10495 - C10494) * C4715 +
            (C10504 - C10505 + C10506 - C10507) * C4720 +
            (C10508 - C10509 + C10510 - C10511) * C47448) *
               C47369 * C47181 * C47461) *
              C285 +
          (((C10311 - C10310 + C10313 - C10312) * C4719 +
            (C10315 - C10314 + C10317 - C10316) * C4715 +
            (C10318 - C10319 + C10320 - C10321) * C4720 +
            (C10322 - C10323 + C10324 - C10325) * C47448) *
               C47369 * C47181 * C47500 +
           ((C10497 - C10496 + C10499 - C10498) * C4719 +
            (C10501 - C10500 + C10503 - C10502) * C4715 +
            (C10299 * C293 - C10297 * C309 + C10300 * C909 - C47481 * C917) *
                C4720 +
            (C10299 * C310 - C10297 * C323 + C10300 * C918 - C47481 * C924) *
                C47448) *
               C47369 * C47181 * C47488 +
           ((C10505 - C10504 + C10507 - C10506) * C4719 +
            (C10509 - C10508 + C10511 - C10510) * C4715 +
            (C10297 * C311 - C10299 * C294 + C47481 * C1557 - C10300 * C1556) *
                C4720 +
            (C10297 * C324 - C10299 * C312 + C47481 * C1559 - C10300 * C1558) *
                C47448) *
               C47369 * C47181 * C47461) *
              C47455)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C10297 * C124 - C10299 * C117 + C47481 * C478 - C10300 * C468) *
               C4719 +
           (C10297 * C138 - C10299 * C125 + C47481 * C498 - C10300 * C479) *
               C4715 +
           (C10302 - C10303 + C10304 - C10305) * C4720 +
           (C10306 - C10307 + C10308 - C10309) * C47448) *
              C47369 * C47181 * C47163 * C108 +
          ((C10303 - C10302 + C10305 - C10304) * C4719 +
           (C10307 - C10306 + C10309 - C10308) * C4715 +
           (C10310 - C10311 + C10312 - C10313) * C4720 +
           (C10314 - C10315 + C10316 - C10317) * C47448) *
              C47369 * C47181 * C47163 * C109 +
          ((C10311 - C10310 + C10313 - C10312) * C4719 +
           (C10315 - C10314 + C10317 - C10316) * C4715 +
           (C10318 - C10319 + C10320 - C10321) * C4720 +
           (C10322 - C10323 + C10324 - C10325) * C47448) *
              C47369 * C47181 * C47163 * C110 +
          ((C10319 - C10318 + C10321 - C10320) * C4719 +
           (C10323 - C10322 + C10325 - C10324) * C4715 +
           (C10326 - C10327 + C10328 - C10329) * C4720 +
           (C10330 - C10331 + C10332 - C10333) * C47448) *
              C47369 * C47181 * C47163 * C111 +
          ((C10327 - C10326 + C10329 - C10328) * C4719 +
           (C10331 - C10330 + C10333 - C10332) * C4715 +
           (C10297 * C134 - C10299 * C122 + C47481 * C751 - C10300 * C750) *
               C4720 +
           (C10297 * C143 - C10299 * C135 + C47481 * C753 - C10300 * C752) *
               C47448) *
              C47369 * C47181 * C47163 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C10297 * C124 - C10299 * C117 + C47481 * C478 - C10300 * C468) *
                C4719 +
            (C10297 * C138 - C10299 * C125 + C47481 * C498 - C10300 * C479) *
                C4715 +
            (C10302 - C10303 + C10304 - C10305) * C4720 +
            (C10306 - C10307 + C10308 - C10309) * C47448) *
               C47369 * C47501 +
           ((C10299 * C468 - C10297 * C478 + C10300 * C471 - C47481 * C484) *
                C4719 +
            (C10299 * C479 - C10297 * C498 + C10300 * C485 - C47481 * C501) *
                C4715 +
            (C10658 - C10659 + C10660 - C10661) * C4720 +
            (C10662 - C10663 + C10664 - C10665) * C47448) *
               C47369 * C47490 +
           ((C10297 * C484 - C10299 * C471 + C47481 * C1974 - C10300 * C1968) *
                C4719 +
            (C10297 * C501 - C10299 * C485 + C47481 * C1986 - C10300 * C1975) *
                C4715 +
            (C10666 - C10667 + C10668 - C10669) * C4720 +
            (C10670 - C10671 + C10672 - C10673) * C47448) *
               C47369 * C47464) *
              C47163 * C284 +
          (((C10303 - C10302 + C10305 - C10304) * C4719 +
            (C10307 - C10306 + C10309 - C10308) * C4715 +
            (C10310 - C10311 + C10312 - C10313) * C4720 +
            (C10314 - C10315 + C10316 - C10317) * C47448) *
               C47369 * C47501 +
           ((C10659 - C10658 + C10661 - C10660) * C4719 +
            (C10663 - C10662 + C10665 - C10664) * C4715 +
            (C10674 - C10675 + C10676 - C10677) * C4720 +
            (C10678 - C10679 + C10680 - C10681) * C47448) *
               C47369 * C47490 +
           ((C10667 - C10666 + C10669 - C10668) * C4719 +
            (C10671 - C10670 + C10673 - C10672) * C4715 +
            (C10682 - C10683 + C10684 - C10685) * C4720 +
            (C10686 - C10687 + C10688 - C10689) * C47448) *
               C47369 * C47464) *
              C47163 * C285 +
          (((C10311 - C10310 + C10313 - C10312) * C4719 +
            (C10315 - C10314 + C10317 - C10316) * C4715 +
            (C10318 - C10319 + C10320 - C10321) * C4720 +
            (C10322 - C10323 + C10324 - C10325) * C47448) *
               C47369 * C47501 +
           ((C10675 - C10674 + C10677 - C10676) * C4719 +
            (C10679 - C10678 + C10681 - C10680) * C4715 +
            (C10299 * C474 - C10297 * C490 + C10300 * C475 - C47481 * C492) *
                C4720 +
            (C10299 * C491 - C10297 * C504 + C10300 * C493 - C47481 * C505) *
                C47448) *
               C47369 * C47490 +
           ((C10683 - C10682 + C10685 - C10684) * C4719 +
            (C10687 - C10686 + C10689 - C10688) * C4715 +
            (C10297 * C492 - C10299 * C475 + C47481 * C2253 - C10300 * C2252) *
                C4720 +
            (C10297 * C505 - C10299 * C493 + C47481 * C2255 - C10300 * C2254) *
                C47448) *
               C47369 * C47464) *
              C47163 * C47455)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C10297 * C124 - C10299 * C117 + C47481 * C478 - C10300 * C468) *
                C4719 +
            (C10297 * C138 - C10299 * C125 + C47481 * C498 - C10300 * C479) *
                C4715 +
            (C10302 - C10303 + C10304 - C10305) * C4720 +
            (C10306 - C10307 + C10308 - C10309) * C47448) *
               C47369 * C47181 * C1050 +
           ((C10299 * C287 - C10297 * C297 + C10300 * C906 - C47481 * C911) *
                C4719 +
            (C10299 * C298 - C10297 * C317 + C10300 * C912 - C47481 * C921) *
                C4715 +
            (C10480 - C10481 + C10482 - C10483) * C4720 +
            (C10484 - C10485 + C10486 - C10487) * C47448) *
               C47369 * C47181 * C1051 +
           ((C10297 * C303 - C10299 * C290 + C47481 * C1273 - C10300 * C1261) *
                C4719 +
            (C10297 * C320 - C10299 * C304 + C47481 * C1288 - C10300 * C1274) *
                C4715 +
            (C10488 - C10489 + C10490 - C10491) * C4720 +
            (C10492 - C10493 + C10494 - C10495) * C47448) *
               C47369 * C47181 * C47461) *
              C47497 +
          (((C10303 - C10302 + C10305 - C10304) * C4719 +
            (C10307 - C10306 + C10309 - C10308) * C4715 +
            (C10310 - C10311 + C10312 - C10313) * C4720 +
            (C10314 - C10315 + C10316 - C10317) * C47448) *
               C47369 * C47181 * C1050 +
           ((C10481 - C10480 + C10483 - C10482) * C4719 +
            (C10485 - C10484 + C10487 - C10486) * C4715 +
            (C10496 - C10497 + C10498 - C10499) * C4720 +
            (C10500 - C10501 + C10502 - C10503) * C47448) *
               C47369 * C47181 * C1051 +
           ((C10489 - C10488 + C10491 - C10490) * C4719 +
            (C10493 - C10492 + C10495 - C10494) * C4715 +
            (C10504 - C10505 + C10506 - C10507) * C4720 +
            (C10508 - C10509 + C10510 - C10511) * C47448) *
               C47369 * C47181 * C47461) *
              C47484 +
          (((C10311 - C10310 + C10313 - C10312) * C4719 +
            (C10315 - C10314 + C10317 - C10316) * C4715 +
            (C10318 - C10319 + C10320 - C10321) * C4720 +
            (C10322 - C10323 + C10324 - C10325) * C47448) *
               C47369 * C47181 * C1050 +
           ((C10497 - C10496 + C10499 - C10498) * C4719 +
            (C10501 - C10500 + C10503 - C10502) * C4715 +
            (C10820 - C10821 + C10822 - C10823) * C4720 +
            (C10824 - C10825 + C10826 - C10827) * C47448) *
               C47369 * C47181 * C1051 +
           ((C10505 - C10504 + C10507 - C10506) * C4719 +
            (C10509 - C10508 + C10511 - C10510) * C4715 +
            (C10297 * C311 - C10299 * C294 + C47481 * C1557 - C10300 * C1556) *
                C4720 +
            (C10297 * C324 - C10299 * C312 + C47481 * C1559 - C10300 * C1558) *
                C47448) *
               C47369 * C47181 * C47461) *
              C47455)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C10297 * C124 - C10299 * C117 + C47481 * C478 - C10300 * C468) *
               C4719 +
           (C10297 * C138 - C10299 * C125 + C47481 * C498 - C10300 * C479) *
               C4715 +
           (C10302 - C10303 + C10304 - C10305) * C4720 +
           (C10306 - C10307 + C10308 - C10309) * C47448) *
              C47369 * C47181 * C1118 +
          ((C10299 * C287 - C10297 * C297 + C10300 * C906 - C47481 * C911) *
               C4719 +
           (C10299 * C298 - C10297 * C317 + C10300 * C912 - C47481 * C921) *
               C4715 +
           (C10480 - C10481 + C10482 - C10483) * C4720 +
           (C10484 - C10485 + C10486 - C10487) * C47448) *
              C47369 * C47181 * C1119 +
          ((C10297 * C303 - C10299 * C290 + C47481 * C1273 - C10300 * C1261) *
               C4719 +
           (C10297 * C320 - C10299 * C304 + C47481 * C1288 - C10300 * C1274) *
               C4715 +
           (C10488 - C10489 + C10490 - C10491) * C4720 +
           (C10492 - C10493 + C10494 - C10495) * C47448) *
              C47369 * C47181 * C1120 +
          ((C10299 * C1124 - C10297 * C1130 + C10300 * C1666 - C47481 * C1669) *
               C4719 +
           (C10299 * C1131 - C10297 * C1142 + C10300 * C1670 - C47481 * C1675) *
               C4715 +
           (C10299 * C1125 - C10297 * C1132 + C10300 * C1667 - C47481 * C1671) *
               C4720 +
           (C10299 * C1133 - C10297 * C1143 + C10300 * C1672 - C47481 * C1676) *
               C47448) *
              C47369 * C47181 * C1121 +
          ((C10297 * C1136 - C10299 * C1127 + C47481 * C6385 - C10300 * C6383) *
               C4719 +
           (C10297 * C1145 - C10299 * C1137 + C47481 * C6389 - C10300 * C6386) *
               C4715 +
           (C10297 * C1138 - C10299 * C1128 + C47481 * C6387 - C10300 * C6384) *
               C4720 +
           (C10297 * C1146 - C10299 * C1139 + C47481 * C6390 - C10300 * C6388) *
               C47448) *
              C47369 * C47181 * C1122) *
         C47135) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C10297 * C124 - C10299 * C117 + C47481 * C478 - C10300 * C468) *
                C4719 +
            (C10297 * C138 - C10299 * C125 + C47481 * C498 - C10300 * C479) *
                C4715 +
            (C10302 - C10303 + C10304 - C10305) * C4720 +
            (C10306 - C10307 + C10308 - C10309) * C47448) *
               C47369 * C47501 +
           ((C10299 * C468 - C10297 * C478 + C10300 * C471 - C47481 * C484) *
                C4719 +
            (C10299 * C479 - C10297 * C498 + C10300 * C485 - C47481 * C501) *
                C4715 +
            (C10658 - C10659 + C10660 - C10661) * C4720 +
            (C10662 - C10663 + C10664 - C10665) * C47448) *
               C47369 * C47490 +
           ((C10297 * C484 - C10299 * C471 + C47481 * C1974 - C10300 * C1968) *
                C4719 +
            (C10297 * C501 - C10299 * C485 + C47481 * C1986 - C10300 * C1975) *
                C4715 +
            (C10666 - C10667 + C10668 - C10669) * C4720 +
            (C10670 - C10671 + C10672 - C10673) * C47448) *
               C47369 * C47464) *
              C1050 +
          (((C10299 * C287 - C10297 * C297 + C10300 * C906 - C47481 * C911) *
                C4719 +
            (C10299 * C298 - C10297 * C317 + C10300 * C912 - C47481 * C921) *
                C4715 +
            (C10480 - C10481 + C10482 - C10483) * C4720 +
            (C10484 - C10485 + C10486 - C10487) * C47448) *
               C47369 * C47501 +
           ((C10297 * C911 - C10299 * C906 + C47481 * C1267 - C10300 * C1258) *
                C4719 +
            (C10297 * C921 - C10299 * C912 + C47481 * C1285 - C10300 * C1268) *
                C4715 +
            (C11160 - C11161 + C11162 - C11163) * C4720 +
            (C11164 - C11165 + C11166 - C11167) * C47448) *
               C47369 * C47490 +
           ((C10299 * C1258 - C10297 * C1267 + C10300 * C2362 -
             C47481 * C2365) *
                C4719 +
            (C10299 * C1268 - C10297 * C1285 + C10300 * C2366 -
             C47481 * C2371) *
                C4715 +
            (C10299 * C1259 - C10297 * C1269 + C10300 * C2363 -
             C47481 * C2367) *
                C4720 +
            (C10299 * C1270 - C10297 * C1286 + C10300 * C2368 -
             C47481 * C2372) *
                C47448) *
               C47369 * C47464) *
              C1051 +
          (((C10297 * C303 - C10299 * C290 + C47481 * C1273 - C10300 * C1261) *
                C4719 +
            (C10297 * C320 - C10299 * C304 + C47481 * C1288 - C10300 * C1274) *
                C4715 +
            (C10488 - C10489 + C10490 - C10491) * C4720 +
            (C10492 - C10493 + C10494 - C10495) * C47448) *
               C47369 * C47501 +
           ((C10299 * C1261 - C10297 * C1273 + C10300 * C1264 -
             C47481 * C1279) *
                C4719 +
            (C10299 * C1274 - C10297 * C1288 + C10300 * C1280 -
             C47481 * C1291) *
                C4715 +
            (C10299 * C1262 - C10297 * C1275 + C10300 * C1265 -
             C47481 * C1281) *
                C4720 +
            (C10299 * C1276 - C10297 * C1289 + C10300 * C1282 -
             C47481 * C1292) *
                C47448) *
               C47369 * C47490 +
           ((C10297 * C1279 - C10299 * C1264 + C47481 * C7241 -
             C10300 * C7239) *
                C4719 +
            (C10297 * C1291 - C10299 * C1280 + C47481 * C7245 -
             C10300 * C7242) *
                C4715 +
            (C10297 * C1281 - C10299 * C1265 + C47481 * C7243 -
             C10300 * C7240) *
                C4720 +
            (C10297 * C1292 - C10299 * C1282 + C47481 * C7246 -
             C10300 * C7244) *
                C47448) *
               C47369 * C47464) *
              C47461) *
         C47135) /
            (p * q * std::sqrt(p + q));
    d2ee[73] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C10297 * C124 - C10299 * C117 + C47481 * C478 - C10300 * C468) *
                C4719 +
            (C10297 * C138 - C10299 * C125 + C47481 * C498 - C10300 * C479) *
                C4715 +
            (C10302 - C10303 + C10304 - C10305) * C4720 +
            (C10306 - C10307 + C10308 - C10309) * C47448) *
               C47369 * C47430 +
           ((C10299 * C468 - C10297 * C478 + C10300 * C471 - C47481 * C484) *
                C4719 +
            (C10299 * C479 - C10297 * C498 + C10300 * C485 - C47481 * C501) *
                C4715 +
            (C10658 - C10659 + C10660 - C10661) * C4720 +
            (C10662 - C10663 + C10664 - C10665) * C47448) *
               C47369 * C47268) *
              C47163 * C636 +
          (((C10303 - C10302 + C10305 - C10304) * C4719 +
            (C10307 - C10306 + C10309 - C10308) * C4715 +
            (C10310 - C10311 + C10312 - C10313) * C4720 +
            (C10314 - C10315 + C10316 - C10317) * C47448) *
               C47369 * C47430 +
           ((C10659 - C10658 + C10661 - C10660) * C4719 +
            (C10663 - C10662 + C10665 - C10664) * C4715 +
            (C10674 - C10675 + C10676 - C10677) * C4720 +
            (C10678 - C10679 + C10680 - C10681) * C47448) *
               C47369 * C47268) *
              C47163 * C637 +
          (((C10311 - C10310 + C10313 - C10312) * C4719 +
            (C10315 - C10314 + C10317 - C10316) * C4715 +
            (C10318 - C10319 + C10320 - C10321) * C4720 +
            (C10322 - C10323 + C10324 - C10325) * C47448) *
               C47369 * C47430 +
           ((C10675 - C10674 + C10677 - C10676) * C4719 +
            (C10679 - C10678 + C10681 - C10680) * C4715 +
            (C10958 - C10959 + C10960 - C10961) * C4720 +
            (C10962 - C10963 + C10964 - C10965) * C47448) *
               C47369 * C47268) *
              C47163 * C638 +
          (((C10319 - C10318 + C10321 - C10320) * C4719 +
            (C10323 - C10322 + C10325 - C10324) * C4715 +
            (C10326 - C10327 + C10328 - C10329) * C4720 +
            (C10330 - C10331 + C10332 - C10333) * C47448) *
               C47369 * C47430 +
           ((C10959 - C10958 + C10961 - C10960) * C4719 +
            (C10963 - C10962 + C10965 - C10964) * C4715 +
            (C10297 * C494 - C10299 * C476 + C47481 * C496 - C10300 * C477) *
                C4720 +
            (C10297 * C506 - C10299 * C495 + C47481 * C507 - C10300 * C497) *
                C47448) *
               C47369 * C47268) *
              C47163 * C47465)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C10297 * C124 - C10299 * C117 + C47481 * C478 - C10300 * C468) *
                 C4719 +
             (C10297 * C138 - C10299 * C125 + C47481 * C498 - C10300 * C479) *
                 C4715 +
             (C10302 - C10303 + C10304 - C10305) * C4720 +
             (C10306 - C10307 + C10308 - C10309) * C47448) *
                C47369 * C47430 +
            ((C10299 * C468 - C10297 * C478 + C10300 * C471 - C47481 * C484) *
                 C4719 +
             (C10299 * C479 - C10297 * C498 + C10300 * C485 - C47481 * C501) *
                 C4715 +
             (C10658 - C10659 + C10660 - C10661) * C4720 +
             (C10662 - C10663 + C10664 - C10665) * C47448) *
                C47369 * C47268) *
               C1050 +
           (((C10299 * C287 - C10297 * C297 + C10300 * C906 - C47481 * C911) *
                 C4719 +
             (C10299 * C298 - C10297 * C317 + C10300 * C912 - C47481 * C921) *
                 C4715 +
             (C10480 - C10481 + C10482 - C10483) * C4720 +
             (C10484 - C10485 + C10486 - C10487) * C47448) *
                C47369 * C47430 +
            ((C10297 * C911 - C10299 * C906 + C47481 * C1267 - C10300 * C1258) *
                 C4719 +
             (C10297 * C921 - C10299 * C912 + C47481 * C1285 - C10300 * C1268) *
                 C4715 +
             (C11160 - C11161 + C11162 - C11163) * C4720 +
             (C11164 - C11165 + C11166 - C11167) * C47448) *
                C47369 * C47268) *
               C1051 +
           (((C10297 * C303 - C10299 * C290 + C47481 * C1273 - C10300 * C1261) *
                 C4719 +
             (C10297 * C320 - C10299 * C304 + C47481 * C1288 - C10300 * C1274) *
                 C4715 +
             (C10488 - C10489 + C10490 - C10491) * C4720 +
             (C10492 - C10493 + C10494 - C10495) * C47448) *
                C47369 * C47430 +
            ((C10299 * C1261 - C10297 * C1273 + C10300 * C1264 -
              C47481 * C1279) *
                 C4719 +
             (C10299 * C1274 - C10297 * C1288 + C10300 * C1280 -
              C47481 * C1291) *
                 C4715 +
             (C11882 - C11883 + C11884 - C11885) * C4720 +
             (C11886 - C11887 + C11888 - C11889) * C47448) *
                C47369 * C47268) *
               C47461) *
              C47415 +
          ((((C10303 - C10302 + C10305 - C10304) * C4719 +
             (C10307 - C10306 + C10309 - C10308) * C4715 +
             (C10310 - C10311 + C10312 - C10313) * C4720 +
             (C10314 - C10315 + C10316 - C10317) * C47448) *
                C47369 * C47430 +
            ((C10659 - C10658 + C10661 - C10660) * C4719 +
             (C10663 - C10662 + C10665 - C10664) * C4715 +
             (C10674 - C10675 + C10676 - C10677) * C4720 +
             (C10678 - C10679 + C10680 - C10681) * C47448) *
                C47369 * C47268) *
               C1050 +
           (((C10481 - C10480 + C10483 - C10482) * C4719 +
             (C10485 - C10484 + C10487 - C10486) * C4715 +
             (C10496 - C10497 + C10498 - C10499) * C4720 +
             (C10500 - C10501 + C10502 - C10503) * C47448) *
                C47369 * C47430 +
            ((C11161 - C11160 + C11163 - C11162) * C4719 +
             (C11165 - C11164 + C11167 - C11166) * C4715 +
             (C11168 - C11169 + C11170 - C11171) * C4720 +
             (C11172 - C11173 + C11174 - C11175) * C47448) *
                C47369 * C47268) *
               C1051 +
           (((C10489 - C10488 + C10491 - C10490) * C4719 +
             (C10493 - C10492 + C10495 - C10494) * C4715 +
             (C10504 - C10505 + C10506 - C10507) * C4720 +
             (C10508 - C10509 + C10510 - C10511) * C47448) *
                C47369 * C47430 +
            ((C11883 - C11882 + C11885 - C11884) * C4719 +
             (C11887 - C11886 + C11889 - C11888) * C4715 +
             (C10297 * C1277 - C10299 * C1263 + C47481 * C1283 -
              C10300 * C1266) *
                 C4720 +
             (C10297 * C1290 - C10299 * C1278 + C47481 * C1293 -
              C10300 * C1284) *
                 C47448) *
                C47369 * C47268) *
               C47461) *
              C47146)) /
            (p * q * std::sqrt(p + q));
    d2ee[74] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C10297 * C124 - C10299 * C117 + C47481 * C478 - C10300 * C468) *
               C4719 +
           (C10297 * C138 - C10299 * C125 + C47481 * C498 - C10300 * C479) *
               C4715 +
           (C10302 - C10303 + C10304 - C10305) * C4720 +
           (C10306 - C10307 + C10308 - C10309) * C47448) *
              C47369 * C47181 * C47163 * C108 +
          ((C10303 - C10302 + C10305 - C10304) * C4719 +
           (C10307 - C10306 + C10309 - C10308) * C4715 +
           (C10310 - C10311 + C10312 - C10313) * C4720 +
           (C10314 - C10315 + C10316 - C10317) * C47448) *
              C47369 * C47181 * C47163 * C109 +
          ((C10311 - C10310 + C10313 - C10312) * C4719 +
           (C10315 - C10314 + C10317 - C10316) * C4715 +
           (C10318 - C10319 + C10320 - C10321) * C4720 +
           (C10322 - C10323 + C10324 - C10325) * C47448) *
              C47369 * C47181 * C47163 * C110 +
          ((C10319 - C10318 + C10321 - C10320) * C4719 +
           (C10323 - C10322 + C10325 - C10324) * C4715 +
           (C10326 - C10327 + C10328 - C10329) * C4720 +
           (C10330 - C10331 + C10332 - C10333) * C47448) *
              C47369 * C47181 * C47163 * C111 +
          ((C10327 - C10326 + C10329 - C10328) * C4719 +
           (C10331 - C10330 + C10333 - C10332) * C4715 +
           (C10297 * C134 - C10299 * C122 + C47481 * C751 - C10300 * C750) *
               C4720 +
           (C10297 * C143 - C10299 * C135 + C47481 * C753 - C10300 * C752) *
               C47448) *
              C47369 * C47181 * C47163 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C10297 * C124 - C10299 * C117 + C47481 * C478 - C10300 * C468) *
                C4719 +
            (C10297 * C138 - C10299 * C125 + C47481 * C498 - C10300 * C479) *
                C4715 +
            (C10302 - C10303 + C10304 - C10305) * C4720 +
            (C10306 - C10307 + C10308 - C10309) * C47448) *
               C47369 * C47181 * C47500 +
           ((C10299 * C287 - C10297 * C297 + C10300 * C906 - C47481 * C911) *
                C4719 +
            (C10299 * C298 - C10297 * C317 + C10300 * C912 - C47481 * C921) *
                C4715 +
            (C10480 - C10481 + C10482 - C10483) * C4720 +
            (C10484 - C10485 + C10486 - C10487) * C47448) *
               C47369 * C47181 * C47488 +
           ((C10297 * C303 - C10299 * C290 + C47481 * C1273 - C10300 * C1261) *
                C4719 +
            (C10297 * C320 - C10299 * C304 + C47481 * C1288 - C10300 * C1274) *
                C4715 +
            (C10488 - C10489 + C10490 - C10491) * C4720 +
            (C10492 - C10493 + C10494 - C10495) * C47448) *
               C47369 * C47181 * C47461) *
              C284 +
          (((C10303 - C10302 + C10305 - C10304) * C4719 +
            (C10307 - C10306 + C10309 - C10308) * C4715 +
            (C10310 - C10311 + C10312 - C10313) * C4720 +
            (C10314 - C10315 + C10316 - C10317) * C47448) *
               C47369 * C47181 * C47500 +
           ((C10481 - C10480 + C10483 - C10482) * C4719 +
            (C10485 - C10484 + C10487 - C10486) * C4715 +
            (C10496 - C10497 + C10498 - C10499) * C4720 +
            (C10500 - C10501 + C10502 - C10503) * C47448) *
               C47369 * C47181 * C47488 +
           ((C10489 - C10488 + C10491 - C10490) * C4719 +
            (C10493 - C10492 + C10495 - C10494) * C4715 +
            (C10504 - C10505 + C10506 - C10507) * C4720 +
            (C10508 - C10509 + C10510 - C10511) * C47448) *
               C47369 * C47181 * C47461) *
              C285 +
          (((C10311 - C10310 + C10313 - C10312) * C4719 +
            (C10315 - C10314 + C10317 - C10316) * C4715 +
            (C10318 - C10319 + C10320 - C10321) * C4720 +
            (C10322 - C10323 + C10324 - C10325) * C47448) *
               C47369 * C47181 * C47500 +
           ((C10497 - C10496 + C10499 - C10498) * C4719 +
            (C10501 - C10500 + C10503 - C10502) * C4715 +
            (C10299 * C293 - C10297 * C309 + C10300 * C909 - C47481 * C917) *
                C4720 +
            (C10299 * C310 - C10297 * C323 + C10300 * C918 - C47481 * C924) *
                C47448) *
               C47369 * C47181 * C47488 +
           ((C10505 - C10504 + C10507 - C10506) * C4719 +
            (C10509 - C10508 + C10511 - C10510) * C4715 +
            (C10297 * C311 - C10299 * C294 + C47481 * C1557 - C10300 * C1556) *
                C4720 +
            (C10297 * C324 - C10299 * C312 + C47481 * C1559 - C10300 * C1558) *
                C47448) *
               C47369 * C47181 * C47461) *
              C47455)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C10297 * C124 - C10299 * C117 + C47481 * C478 - C10300 * C468) *
                C4719 +
            (C10297 * C138 - C10299 * C125 + C47481 * C498 - C10300 * C479) *
                C4715 +
            (C10302 - C10303 + C10304 - C10305) * C4720 +
            (C10306 - C10307 + C10308 - C10309) * C47448) *
               C47369 * C47181 * C1050 +
           ((C10299 * C287 - C10297 * C297 + C10300 * C906 - C47481 * C911) *
                C4719 +
            (C10299 * C298 - C10297 * C317 + C10300 * C912 - C47481 * C921) *
                C4715 +
            (C10480 - C10481 + C10482 - C10483) * C4720 +
            (C10484 - C10485 + C10486 - C10487) * C47448) *
               C47369 * C47181 * C1051 +
           ((C10297 * C303 - C10299 * C290 + C47481 * C1273 - C10300 * C1261) *
                C4719 +
            (C10297 * C320 - C10299 * C304 + C47481 * C1288 - C10300 * C1274) *
                C4715 +
            (C10488 - C10489 + C10490 - C10491) * C4720 +
            (C10492 - C10493 + C10494 - C10495) * C47448) *
               C47369 * C47181 * C47461) *
              C47497 +
          (((C10303 - C10302 + C10305 - C10304) * C4719 +
            (C10307 - C10306 + C10309 - C10308) * C4715 +
            (C10310 - C10311 + C10312 - C10313) * C4720 +
            (C10314 - C10315 + C10316 - C10317) * C47448) *
               C47369 * C47181 * C1050 +
           ((C10481 - C10480 + C10483 - C10482) * C4719 +
            (C10485 - C10484 + C10487 - C10486) * C4715 +
            (C10496 - C10497 + C10498 - C10499) * C4720 +
            (C10500 - C10501 + C10502 - C10503) * C47448) *
               C47369 * C47181 * C1051 +
           ((C10489 - C10488 + C10491 - C10490) * C4719 +
            (C10493 - C10492 + C10495 - C10494) * C4715 +
            (C10504 - C10505 + C10506 - C10507) * C4720 +
            (C10508 - C10509 + C10510 - C10511) * C47448) *
               C47369 * C47181 * C47461) *
              C47484 +
          (((C10311 - C10310 + C10313 - C10312) * C4719 +
            (C10315 - C10314 + C10317 - C10316) * C4715 +
            (C10318 - C10319 + C10320 - C10321) * C4720 +
            (C10322 - C10323 + C10324 - C10325) * C47448) *
               C47369 * C47181 * C1050 +
           ((C10497 - C10496 + C10499 - C10498) * C4719 +
            (C10501 - C10500 + C10503 - C10502) * C4715 +
            (C10820 - C10821 + C10822 - C10823) * C4720 +
            (C10824 - C10825 + C10826 - C10827) * C47448) *
               C47369 * C47181 * C1051 +
           ((C10505 - C10504 + C10507 - C10506) * C4719 +
            (C10509 - C10508 + C10511 - C10510) * C4715 +
            (C10297 * C311 - C10299 * C294 + C47481 * C1557 - C10300 * C1556) *
                C4720 +
            (C10297 * C324 - C10299 * C312 + C47481 * C1559 - C10300 * C1558) *
                C47448) *
               C47369 * C47181 * C47461) *
              C47455)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C10297 * C124 - C10299 * C117 + C47481 * C478 - C10300 * C468) *
               C4719 +
           (C10297 * C138 - C10299 * C125 + C47481 * C498 - C10300 * C479) *
               C4715 +
           (C10302 - C10303 + C10304 - C10305) * C4720 +
           (C10306 - C10307 + C10308 - C10309) * C47448) *
              C47369 * C47181 * C1118 +
          ((C10299 * C287 - C10297 * C297 + C10300 * C906 - C47481 * C911) *
               C4719 +
           (C10299 * C298 - C10297 * C317 + C10300 * C912 - C47481 * C921) *
               C4715 +
           (C10480 - C10481 + C10482 - C10483) * C4720 +
           (C10484 - C10485 + C10486 - C10487) * C47448) *
              C47369 * C47181 * C1119 +
          ((C10297 * C303 - C10299 * C290 + C47481 * C1273 - C10300 * C1261) *
               C4719 +
           (C10297 * C320 - C10299 * C304 + C47481 * C1288 - C10300 * C1274) *
               C4715 +
           (C10488 - C10489 + C10490 - C10491) * C4720 +
           (C10492 - C10493 + C10494 - C10495) * C47448) *
              C47369 * C47181 * C1120 +
          ((C10299 * C1124 - C10297 * C1130 + C10300 * C1666 - C47481 * C1669) *
               C4719 +
           (C10299 * C1131 - C10297 * C1142 + C10300 * C1670 - C47481 * C1675) *
               C4715 +
           (C10299 * C1125 - C10297 * C1132 + C10300 * C1667 - C47481 * C1671) *
               C4720 +
           (C10299 * C1133 - C10297 * C1143 + C10300 * C1672 - C47481 * C1676) *
               C47448) *
              C47369 * C47181 * C1121 +
          ((C10297 * C1136 - C10299 * C1127 + C47481 * C6385 - C10300 * C6383) *
               C4719 +
           (C10297 * C1145 - C10299 * C1137 + C47481 * C6389 - C10300 * C6386) *
               C4715 +
           (C10297 * C1138 - C10299 * C1128 + C47481 * C6387 - C10300 * C6384) *
               C4720 +
           (C10297 * C1146 - C10299 * C1139 + C47481 * C6390 - C10300 * C6388) *
               C47448) *
              C47369 * C47181 * C1122) *
         C47135) /
            (p * q * std::sqrt(p + q));
    d2ee[75] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C47384 * C124 - C113 * C117) * C15921 +
             (C47384 * C138 - C113 * C125) * C15917 + (C146 - C147) * C15922 +
             (C148 - C149) * C47448) *
                C15919 +
            ((C4868 - C4869) * C15921 + (C4870 - C4871) * C15917 +
             C4872 * C15922 + C4873 * C47448) *
                C47479) *
               C47181 * C47222 +
           (((C4869 - C4868) * C15921 + (C4871 - C4870) * C15917 +
             C4874 * C15922 + C4875 * C47448) *
                C15919 +
            ((C4876 - C4877) * C15921 + (C4878 - C4879) * C15917 +
             C4880 * C15922 + C4881 * C47448) *
                C47479) *
               C47181 * C47229 +
           (((C4877 - C4876) * C15921 + (C4879 - C4878) * C15917 +
             C4882 * C15922 + C4883 * C47448) *
                C15919 +
            ((C5736 - C5737) * C15921 + (C5738 - C5739) * C15917 +
             C6048 * C15922 + C6049 * C47448) *
                C47479) *
               C47181 * C2840) *
              C47140 +
          ((((C147 - C146) * C15921 + (C149 - C148) * C15917 +
             (C151 - C150) * C15922 + (C153 - C152) * C47448) *
                C15919 +
            (C4874 * C15921 + C4875 * C15917 + C352 * C15922 + C353 * C47448) *
                C47479) *
               C47181 * C47222 +
           ((C4872 * C15921 + C4873 * C15917 + C4884 * C15922 +
             C4885 * C47448) *
                C15919 +
            (C4882 * C15921 + C4883 * C15917 + C354 * C15922 + C355 * C47448) *
                C47479) *
               C47181 * C47229 +
           ((C4880 * C15921 + C4881 * C15917 + C4886 * C15922 +
             C4887 * C47448) *
                C15919 +
            (C6050 * C15921 + C6051 * C15917 + (C1407 - C1408) * C15922 +
             (C1409 - C1410) * C47448) *
                C47479) *
               C47181 * C2840) *
              C47149 +
          (((C166 * C15921 + C167 * C15917 + (C155 - C154) * C15922 +
             (C157 - C156) * C47448) *
                C15919 +
            (C4884 * C15921 + C4885 * C15917 + C645 * C15922 + C646 * C47448) *
                C47479) *
               C47181 * C47222 +
           ((C352 * C15921 + C353 * C15917 + C5164 * C15922 + C5165 * C47448) *
                C15919 +
            (C4886 * C15921 + C4887 * C15917 + (C348 - C349) * C15922 +
             (C350 - C351) * C47448) *
                C47479) *
               C47181 * C47229 +
           ((C354 * C15921 + C355 * C15917 + (C349 - C348) * C15922 +
             (C351 - C350) * C47448) *
                C15919 +
            ((C1408 - C1407) * C15921 + (C1410 - C1409) * C15917 +
             (C47384 * C1399 - C113 * C1398) * C15922 +
             (C47384 * C1401 - C113 * C1400) * C47448) *
                C47479) *
               C47181 * C2840) *
              C2843)) /
        (p * q * std::sqrt(p + q));
    d2ee[76] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C47384 * C124 - C113 * C117) * C15921 +
              (C47384 * C138 - C113 * C125) * C15917 + (C146 - C147) * C15922 +
              (C148 - C149) * C47448) *
                 C15919 +
             ((C4868 - C4869) * C15921 + (C4870 - C4871) * C15917 +
              C4872 * C15922 + C4873 * C47448) *
                 C47479) *
                C47430 +
            (((C113 * C468 - C47384 * C478) * C15921 +
              (C113 * C479 - C47384 * C498) * C15917 + (C509 - C510) * C15922 +
              (C511 - C512) * C47448) *
                 C15919 +
             ((C5490 - C5491) * C15921 + (C5492 - C5493) * C15917 +
              C5494 * C15922 + C5495 * C47448) *
                 C47479) *
                C47268) *
               C47222 +
           ((((C4869 - C4868) * C15921 + (C4871 - C4870) * C15917 +
              C4874 * C15922 + C4875 * C47448) *
                 C15919 +
             ((C4876 - C4877) * C15921 + (C4878 - C4879) * C15917 +
              C4880 * C15922 + C4881 * C47448) *
                 C47479) *
                C47430 +
            (((C5491 - C5490) * C15921 + (C5493 - C5492) * C15917 +
              C5496 * C15922 + C5497 * C47448) *
                 C15919 +
             ((C5906 - C5907) * C15921 + (C5908 - C5909) * C15917 +
              C6246 * C15922 + C6247 * C47448) *
                 C47479) *
                C47268) *
               C47229 +
           ((((C4877 - C4876) * C15921 + (C4879 - C4878) * C15917 +
              C4882 * C15922 + C4883 * C47448) *
                 C15919 +
             ((C5736 - C5737) * C15921 + (C5738 - C5739) * C15917 +
              C6048 * C15922 + C6049 * C47448) *
                 C47479) *
                C47430 +
            (((C5907 - C5906) * C15921 + (C5909 - C5908) * C15917 +
              C6248 * C15922 + C6249 * C47448) *
                 C15919 +
             ((C6392 - C6393) * C15921 + (C6394 - C6395) * C15917 +
              (C6250 - C6251) * C15922 + (C6252 - C6253) * C47448) *
                 C47479) *
                C47268) *
               C2840) *
              C2580 +
          (((((C147 - C146) * C15921 + (C149 - C148) * C15917 +
              (C151 - C150) * C15922 + (C153 - C152) * C47448) *
                 C15919 +
             (C4874 * C15921 + C4875 * C15917 + C352 * C15922 + C353 * C47448) *
                 C47479) *
                C47430 +
            (((C510 - C509) * C15921 + (C512 - C511) * C15917 +
              (C514 - C513) * C15922 + (C516 - C515) * C47448) *
                 C15919 +
             (C5496 * C15921 + C5497 * C15917 + C939 * C15922 + C940 * C47448) *
                 C47479) *
                C47268) *
               C47222 +
           (((C4872 * C15921 + C4873 * C15917 + C4884 * C15922 +
              C4885 * C47448) *
                 C15919 +
             (C4882 * C15921 + C4883 * C15917 + C354 * C15922 + C355 * C47448) *
                 C47479) *
                C47430 +
            ((C5494 * C15921 + C5495 * C15917 + C5498 * C15922 +
              C5499 * C47448) *
                 C15919 +
             (C6248 * C15921 + C6249 * C15917 + (C1565 - C1566) * C15922 +
              (C1567 - C1568) * C47448) *
                 C47479) *
                C47268) *
               C47229 +
           (((C4880 * C15921 + C4881 * C15917 + C4886 * C15922 +
              C4887 * C47448) *
                 C15919 +
             (C6050 * C15921 + C6051 * C15917 + (C1407 - C1408) * C15922 +
              (C1409 - C1410) * C47448) *
                 C47479) *
                C47430 +
            ((C6246 * C15921 + C6247 * C15917 + (C1566 - C1565) * C15922 +
              (C1568 - C1567) * C47448) *
                 C15919 +
             ((C6251 - C6250) * C15921 + (C6253 - C6252) * C15917 +
              (C47384 * C1673 - C113 * C1668) * C15922 +
              (C47384 * C1677 - C113 * C1674) * C47448) *
                 C47479) *
                C47268) *
               C2840) *
              C47146)) /
        (p * q * std::sqrt(p + q));
    d2ee[77] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C47384 * C124 - C113 * C117) * C15921 +
             (C47384 * C138 - C113 * C125) * C15917 + (C146 - C147) * C15922 +
             (C148 - C149) * C47448) *
                C15919 +
            ((C4868 - C4869) * C15921 + (C4870 - C4871) * C15917 +
             C4872 * C15922 + C4873 * C47448) *
                C47479) *
               C47181 * C47507 +
           (((C4869 - C4868) * C15921 + (C4871 - C4870) * C15917 +
             C4874 * C15922 + C4875 * C47448) *
                C15919 +
            ((C4876 - C4877) * C15921 + (C4878 - C4879) * C15917 +
             C4880 * C15922 + C4881 * C47448) *
                C47479) *
               C47181 * C47503 +
           (((C4877 - C4876) * C15921 + (C4879 - C4878) * C15917 +
             C4882 * C15922 + C4883 * C47448) *
                C15919 +
            ((C5736 - C5737) * C15921 + (C5738 - C5739) * C15917 +
             C6048 * C15922 + C6049 * C47448) *
                C47479) *
               C47181 * C47493 +
           (((C5737 - C5736) * C15921 + (C5739 - C5738) * C15917 +
             C6050 * C15922 + C6051 * C47448) *
                C15919 +
            ((C5740 - C5741) * C15921 + (C5742 - C5743) * C15917 +
             (C5744 - C5745) * C15922 + (C5746 - C5747) * C47448) *
                C47479) *
               C47181 * C47471) *
              C2580 +
          ((((C147 - C146) * C15921 + (C149 - C148) * C15917 +
             (C151 - C150) * C15922 + (C153 - C152) * C47448) *
                C15919 +
            (C4874 * C15921 + C4875 * C15917 + C352 * C15922 + C353 * C47448) *
                C47479) *
               C47181 * C47507 +
           ((C4872 * C15921 + C4873 * C15917 + C4884 * C15922 +
             C4885 * C47448) *
                C15919 +
            (C4882 * C15921 + C4883 * C15917 + C354 * C15922 + C355 * C47448) *
                C47479) *
               C47181 * C47503 +
           ((C4880 * C15921 + C4881 * C15917 + C4886 * C15922 +
             C4887 * C47448) *
                C15919 +
            (C6050 * C15921 + C6051 * C15917 + (C1407 - C1408) * C15922 +
             (C1409 - C1410) * C47448) *
                C47479) *
               C47181 * C47493 +
           ((C6048 * C15921 + C6049 * C15917 + (C1408 - C1407) * C15922 +
             (C1410 - C1409) * C47448) *
                C15919 +
            ((C5745 - C5744) * C15921 + (C5747 - C5746) * C15917 +
             (C47384 * C1140 - C113 * C1129) * C15922 +
             (C47384 * C1147 - C113 * C1141) * C47448) *
                C47479) *
               C47181 * C47471) *
              C47146)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C47384 * C124 - C113 * C117) * C15921 +
             (C47384 * C138 - C113 * C125) * C15917 + (C146 - C147) * C15922 +
             (C148 - C149) * C47448) *
                C15919 +
            ((C4868 - C4869) * C15921 + (C4870 - C4871) * C15917 +
             C4872 * C15922 + C4873 * C47448) *
                C47479) *
               C47181 * C2472 +
           (((C4869 - C4868) * C15921 + (C4871 - C4870) * C15917 +
             C4874 * C15922 + C4875 * C47448) *
                C15919 +
            ((C4876 - C4877) * C15921 + (C4878 - C4879) * C15917 +
             C4880 * C15922 + C4881 * C47448) *
                C47479) *
               C47181 * C47226) *
              C47506 +
          ((((C147 - C146) * C15921 + (C149 - C148) * C15917 +
             (C151 - C150) * C15922 + (C153 - C152) * C47448) *
                C15919 +
            (C4874 * C15921 + C4875 * C15917 + C352 * C15922 + C353 * C47448) *
                C47479) *
               C47181 * C2472 +
           ((C4872 * C15921 + C4873 * C15917 + C4884 * C15922 +
             C4885 * C47448) *
                C15919 +
            (C4882 * C15921 + C4883 * C15917 + C354 * C15922 + C355 * C47448) *
                C47479) *
               C47181 * C47226) *
              C47499 +
          (((C166 * C15921 + C167 * C15917 + (C155 - C154) * C15922 +
             (C157 - C156) * C47448) *
                C15919 +
            (C4884 * C15921 + C4885 * C15917 + C645 * C15922 + C646 * C47448) *
                C47479) *
               C47181 * C2472 +
           ((C352 * C15921 + C353 * C15917 + C5164 * C15922 + C5165 * C47448) *
                C15919 +
            (C4886 * C15921 + C4887 * C15917 + (C348 - C349) * C15922 +
             (C350 - C351) * C47448) *
                C47479) *
               C47181 * C47226) *
              C47486 +
          (((C168 * C15921 + C169 * C15917 + (C159 - C158) * C15922 +
             (C161 - C160) * C47448) *
                C15919 +
            (C5164 * C15921 + C5165 * C15917 + (C647 - C648) * C15922 +
             (C649 - C650) * C47448) *
                C47479) *
               C47181 * C2472 +
           ((C645 * C15921 + C646 * C15917 + (C648 - C647) * C15922 +
             (C650 - C649) * C47448) *
                C15919 +
            ((C349 - C348) * C15921 + (C351 - C350) * C15917 +
             (C47384 * C315 - C113 * C296) * C15922 +
             (C47384 * C326 - C113 * C316) * C47448) *
                C47479) *
               C47181 * C47226) *
              C47465)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C47384 * C124 - C113 * C117) * C15921 +
              (C47384 * C138 - C113 * C125) * C15917 + (C146 - C147) * C15922 +
              (C148 - C149) * C47448) *
                 C15919 +
             ((C4868 - C4869) * C15921 + (C4870 - C4871) * C15917 +
              C4872 * C15922 + C4873 * C47448) *
                 C47479) *
                C47501 +
            (((C113 * C468 - C47384 * C478) * C15921 +
              (C113 * C479 - C47384 * C498) * C15917 + (C509 - C510) * C15922 +
              (C511 - C512) * C47448) *
                 C15919 +
             ((C5490 - C5491) * C15921 + (C5492 - C5493) * C15917 +
              C5494 * C15922 + C5495 * C47448) *
                 C47479) *
                C47490 +
            (((C47384 * C484 - C113 * C471) * C15921 +
              (C47384 * C501 - C113 * C485) * C15917 + (C517 - C518) * C15922 +
              (C519 - C520) * C47448) *
                 C15919 +
             ((C5902 - C5903) * C15921 + (C5904 - C5905) * C15917 +
              C6972 * C15922 + C6973 * C47448) *
                 C47479) *
                C47464) *
               C2472 +
           ((((C4869 - C4868) * C15921 + (C4871 - C4870) * C15917 +
              C4874 * C15922 + C4875 * C47448) *
                 C15919 +
             ((C4876 - C4877) * C15921 + (C4878 - C4879) * C15917 +
              C4880 * C15922 + C4881 * C47448) *
                 C47479) *
                C47501 +
            (((C5491 - C5490) * C15921 + (C5493 - C5492) * C15917 +
              C5496 * C15922 + C5497 * C47448) *
                 C15919 +
             ((C5906 - C5907) * C15921 + (C5908 - C5909) * C15917 +
              C6246 * C15922 + C6247 * C47448) *
                 C47479) *
                C47490 +
            (((C5903 - C5902) * C15921 + (C5905 - C5904) * C15917 +
              C6974 * C15922 + C6975 * C47448) *
                 C15919 +
             ((C5910 - C5911) * C15921 + (C5912 - C5913) * C15917 +
              (C5914 - C5915) * C15922 + (C5916 - C5917) * C47448) *
                 C47479) *
                C47464) *
               C47226) *
              C2580 +
          (((((C147 - C146) * C15921 + (C149 - C148) * C15917 +
              (C151 - C150) * C15922 + (C153 - C152) * C47448) *
                 C15919 +
             (C4874 * C15921 + C4875 * C15917 + C352 * C15922 + C353 * C47448) *
                 C47479) *
                C47501 +
            (((C510 - C509) * C15921 + (C512 - C511) * C15917 +
              (C514 - C513) * C15922 + (C516 - C515) * C47448) *
                 C15919 +
             (C5496 * C15921 + C5497 * C15917 + C939 * C15922 + C940 * C47448) *
                 C47479) *
                C47490 +
            (((C518 - C517) * C15921 + (C520 - C519) * C15917 +
              (C522 - C521) * C15922 + (C524 - C523) * C47448) *
                 C15919 +
             (C6974 * C15921 + C6975 * C15917 + (C2147 - C2148) * C15922 +
              (C2149 - C2150) * C47448) *
                 C47479) *
                C47464) *
               C2472 +
           (((C4872 * C15921 + C4873 * C15917 + C4884 * C15922 +
              C4885 * C47448) *
                 C15919 +
             (C4882 * C15921 + C4883 * C15917 + C354 * C15922 + C355 * C47448) *
                 C47479) *
                C47501 +
            ((C5494 * C15921 + C5495 * C15917 + C5498 * C15922 +
              C5499 * C47448) *
                 C15919 +
             (C6248 * C15921 + C6249 * C15917 + (C1565 - C1566) * C15922 +
              (C1567 - C1568) * C47448) *
                 C47479) *
                C47490 +
            ((C6972 * C15921 + C6973 * C15917 + (C2148 - C2147) * C15922 +
              (C2150 - C2149) * C47448) *
                 C15919 +
             ((C5915 - C5914) * C15921 + (C5917 - C5916) * C15917 +
              (C47384 * C1283 - C113 * C1266) * C15922 +
              (C47384 * C1293 - C113 * C1284) * C47448) *
                 C47479) *
                C47464) *
               C47226) *
              C47146)) /
            (p * q * std::sqrt(p + q));
    d2ee[78] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C47384 * C124 - C113 * C117) * C15921 +
              (C47384 * C138 - C113 * C125) * C15917 + (C146 - C147) * C15922 +
              (C148 - C149) * C47448) *
                 C15919 +
             ((C4868 - C4869) * C15921 + (C4870 - C4871) * C15917 +
              C4872 * C15922 + C4873 * C47448) *
                 C47479) *
                C47430 +
            (((C113 * C468 - C47384 * C478) * C15921 +
              (C113 * C479 - C47384 * C498) * C15917 + (C509 - C510) * C15922 +
              (C511 - C512) * C47448) *
                 C15919 +
             ((C5490 - C5491) * C15921 + (C5492 - C5493) * C15917 +
              C5494 * C15922 + C5495 * C47448) *
                 C47479) *
                C47268) *
               C2472 +
           ((((C4869 - C4868) * C15921 + (C4871 - C4870) * C15917 +
              C4874 * C15922 + C4875 * C47448) *
                 C15919 +
             ((C4876 - C4877) * C15921 + (C4878 - C4879) * C15917 +
              C4880 * C15922 + C4881 * C47448) *
                 C47479) *
                C47430 +
            (((C5491 - C5490) * C15921 + (C5493 - C5492) * C15917 +
              C5496 * C15922 + C5497 * C47448) *
                 C15919 +
             ((C5906 - C5907) * C15921 + (C5908 - C5909) * C15917 +
              C6246 * C15922 + C6247 * C47448) *
                 C47479) *
                C47268) *
               C47226) *
              C47140 +
          (((((C147 - C146) * C15921 + (C149 - C148) * C15917 +
              (C151 - C150) * C15922 + (C153 - C152) * C47448) *
                 C15919 +
             (C4874 * C15921 + C4875 * C15917 + C352 * C15922 + C353 * C47448) *
                 C47479) *
                C47430 +
            (((C510 - C509) * C15921 + (C512 - C511) * C15917 +
              (C514 - C513) * C15922 + (C516 - C515) * C47448) *
                 C15919 +
             (C5496 * C15921 + C5497 * C15917 + C939 * C15922 + C940 * C47448) *
                 C47479) *
                C47268) *
               C2472 +
           (((C4872 * C15921 + C4873 * C15917 + C4884 * C15922 +
              C4885 * C47448) *
                 C15919 +
             (C4882 * C15921 + C4883 * C15917 + C354 * C15922 + C355 * C47448) *
                 C47479) *
                C47430 +
            ((C5494 * C15921 + C5495 * C15917 + C5498 * C15922 +
              C5499 * C47448) *
                 C15919 +
             (C6248 * C15921 + C6249 * C15917 + (C1565 - C1566) * C15922 +
              (C1567 - C1568) * C47448) *
                 C47479) *
                C47268) *
               C47226) *
              C47149 +
          ((((C166 * C15921 + C167 * C15917 + (C155 - C154) * C15922 +
              (C157 - C156) * C47448) *
                 C15919 +
             (C4884 * C15921 + C4885 * C15917 + C645 * C15922 + C646 * C47448) *
                 C47479) *
                C47430 +
            ((C533 * C15921 + C534 * C15917 + (C526 - C525) * C15922 +
              (C528 - C527) * C47448) *
                 C15919 +
             (C5498 * C15921 + C5499 * C15917 + (C935 - C936) * C15922 +
              (C937 - C938) * C47448) *
                 C47479) *
                C47268) *
               C2472 +
           (((C352 * C15921 + C353 * C15917 + C5164 * C15922 + C5165 * C47448) *
                 C15919 +
             (C4886 * C15921 + C4887 * C15917 + (C348 - C349) * C15922 +
              (C350 - C351) * C47448) *
                 C47479) *
                C47430 +
            ((C939 * C15921 + C940 * C15917 + (C936 - C935) * C15922 +
              (C938 - C937) * C47448) *
                 C15919 +
             ((C1566 - C1565) * C15921 + (C1568 - C1567) * C15917 +
              (C47384 * C1557 - C113 * C1556) * C15922 +
              (C47384 * C1559 - C113 * C1558) * C47448) *
                 C47479) *
                C47268) *
               C47226) *
              C2843)) /
        (p * q * std::sqrt(p + q));
    d2ee[79] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C47384 * C124 - C113 * C117) * C15921 +
             (C47384 * C138 - C113 * C125) * C15917 + (C146 - C147) * C15922 +
             (C148 - C149) * C47448) *
                C15919 +
            ((C4868 - C4869) * C15921 + (C4870 - C4871) * C15917 +
             C4872 * C15922 + C4873 * C47448) *
                C47479) *
               C47181 * C2472 +
           (((C4869 - C4868) * C15921 + (C4871 - C4870) * C15917 +
             C4874 * C15922 + C4875 * C47448) *
                C15919 +
            ((C4876 - C4877) * C15921 + (C4878 - C4879) * C15917 +
             C4880 * C15922 + C4881 * C47448) *
                C47479) *
               C47181 * C47226) *
              C47506 +
          ((((C147 - C146) * C15921 + (C149 - C148) * C15917 +
             (C151 - C150) * C15922 + (C153 - C152) * C47448) *
                C15919 +
            (C4874 * C15921 + C4875 * C15917 + C352 * C15922 + C353 * C47448) *
                C47479) *
               C47181 * C2472 +
           ((C4872 * C15921 + C4873 * C15917 + C4884 * C15922 +
             C4885 * C47448) *
                C15919 +
            (C4882 * C15921 + C4883 * C15917 + C354 * C15922 + C355 * C47448) *
                C47479) *
               C47181 * C47226) *
              C47499 +
          (((C166 * C15921 + C167 * C15917 + (C155 - C154) * C15922 +
             (C157 - C156) * C47448) *
                C15919 +
            (C4884 * C15921 + C4885 * C15917 + C645 * C15922 + C646 * C47448) *
                C47479) *
               C47181 * C2472 +
           ((C352 * C15921 + C353 * C15917 + C5164 * C15922 + C5165 * C47448) *
                C15919 +
            (C4886 * C15921 + C4887 * C15917 + (C348 - C349) * C15922 +
             (C350 - C351) * C47448) *
                C47479) *
               C47181 * C47226) *
              C47486 +
          (((C168 * C15921 + C169 * C15917 + (C159 - C158) * C15922 +
             (C161 - C160) * C47448) *
                C15919 +
            (C5164 * C15921 + C5165 * C15917 + (C647 - C648) * C15922 +
             (C649 - C650) * C47448) *
                C47479) *
               C47181 * C2472 +
           ((C645 * C15921 + C646 * C15917 + (C648 - C647) * C15922 +
             (C650 - C649) * C47448) *
                C15919 +
            ((C349 - C348) * C15921 + (C351 - C350) * C15917 +
             (C47384 * C315 - C113 * C296) * C15922 +
             (C47384 * C326 - C113 * C316) * C47448) *
                C47479) *
               C47181 * C47226) *
              C47465)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C47384 * C124 - C113 * C117) * C15921 +
             (C47384 * C138 - C113 * C125) * C15917 + (C146 - C147) * C15922 +
             (C148 - C149) * C47448) *
                C15919 +
            ((C4868 - C4869) * C15921 + (C4870 - C4871) * C15917 +
             C4872 * C15922 + C4873 * C47448) *
                C47479) *
               C47181 * C47507 +
           (((C4869 - C4868) * C15921 + (C4871 - C4870) * C15917 +
             C4874 * C15922 + C4875 * C47448) *
                C15919 +
            ((C4876 - C4877) * C15921 + (C4878 - C4879) * C15917 +
             C4880 * C15922 + C4881 * C47448) *
                C47479) *
               C47181 * C47503 +
           (((C4877 - C4876) * C15921 + (C4879 - C4878) * C15917 +
             C4882 * C15922 + C4883 * C47448) *
                C15919 +
            ((C5736 - C5737) * C15921 + (C5738 - C5739) * C15917 +
             C6048 * C15922 + C6049 * C47448) *
                C47479) *
               C47181 * C47493 +
           (((C5737 - C5736) * C15921 + (C5739 - C5738) * C15917 +
             C6050 * C15922 + C6051 * C47448) *
                C15919 +
            ((C5740 - C5741) * C15921 + (C5742 - C5743) * C15917 +
             (C5744 - C5745) * C15922 + (C5746 - C5747) * C47448) *
                C47479) *
               C47181 * C47471) *
              C2580 +
          ((((C147 - C146) * C15921 + (C149 - C148) * C15917 +
             (C151 - C150) * C15922 + (C153 - C152) * C47448) *
                C15919 +
            (C4874 * C15921 + C4875 * C15917 + C352 * C15922 + C353 * C47448) *
                C47479) *
               C47181 * C47507 +
           ((C4872 * C15921 + C4873 * C15917 + C4884 * C15922 +
             C4885 * C47448) *
                C15919 +
            (C4882 * C15921 + C4883 * C15917 + C354 * C15922 + C355 * C47448) *
                C47479) *
               C47181 * C47503 +
           ((C4880 * C15921 + C4881 * C15917 + C4886 * C15922 +
             C4887 * C47448) *
                C15919 +
            (C6050 * C15921 + C6051 * C15917 + (C1407 - C1408) * C15922 +
             (C1409 - C1410) * C47448) *
                C47479) *
               C47181 * C47493 +
           ((C6048 * C15921 + C6049 * C15917 + (C1408 - C1407) * C15922 +
             (C1410 - C1409) * C47448) *
                C15919 +
            ((C5745 - C5744) * C15921 + (C5747 - C5746) * C15917 +
             (C47384 * C1140 - C113 * C1129) * C15922 +
             (C47384 * C1147 - C113 * C1141) * C47448) *
                C47479) *
               C47181 * C47471) *
              C47146)) /
            (p * q * std::sqrt(p + q));
    d2ee[80] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C47384 * C124 - C113 * C117) * C15921 +
              (C47384 * C138 - C113 * C125) * C15917 + (C146 - C147) * C15922 +
              (C148 - C149) * C47448) *
                 C15919 +
             ((C4868 - C4869) * C15921 + (C4870 - C4871) * C15917 +
              C4872 * C15922 + C4873 * C47448) *
                 C47479) *
                C3234 +
            (((C113 * C468 - C47384 * C478) * C15921 +
              (C113 * C479 - C47384 * C498) * C15917 + (C509 - C510) * C15922 +
              (C511 - C512) * C47448) *
                 C15919 +
             ((C5490 - C5491) * C15921 + (C5492 - C5493) * C15917 +
              C5494 * C15922 + C5495 * C47448) *
                 C47479) *
                C47268) *
               C47222 +
           ((((C4869 - C4868) * C15921 + (C4871 - C4870) * C15917 +
              C4874 * C15922 + C4875 * C47448) *
                 C15919 +
             ((C4876 - C4877) * C15921 + (C4878 - C4879) * C15917 +
              C4880 * C15922 + C4881 * C47448) *
                 C47479) *
                C3234 +
            (((C5491 - C5490) * C15921 + (C5493 - C5492) * C15917 +
              C5496 * C15922 + C5497 * C47448) *
                 C15919 +
             ((C5906 - C5907) * C15921 + (C5908 - C5909) * C15917 +
              C6246 * C15922 + C6247 * C47448) *
                 C47479) *
                C47268) *
               C47229 +
           ((((C4877 - C4876) * C15921 + (C4879 - C4878) * C15917 +
              C4882 * C15922 + C4883 * C47448) *
                 C15919 +
             ((C5736 - C5737) * C15921 + (C5738 - C5739) * C15917 +
              C6048 * C15922 + C6049 * C47448) *
                 C47479) *
                C3234 +
            (((C5907 - C5906) * C15921 + (C5909 - C5908) * C15917 +
              C6248 * C15922 + C6249 * C47448) *
                 C15919 +
             ((C6392 - C6393) * C15921 + (C6394 - C6395) * C15917 +
              (C6250 - C6251) * C15922 + (C6252 - C6253) * C47448) *
                 C47479) *
                C47268) *
               C2840) *
              C47415 +
          (((((C147 - C146) * C15921 + (C149 - C148) * C15917 +
              (C151 - C150) * C15922 + (C153 - C152) * C47448) *
                 C15919 +
             (C4874 * C15921 + C4875 * C15917 + C352 * C15922 + C353 * C47448) *
                 C47479) *
                C3234 +
            (((C510 - C509) * C15921 + (C512 - C511) * C15917 +
              (C514 - C513) * C15922 + (C516 - C515) * C47448) *
                 C15919 +
             (C5496 * C15921 + C5497 * C15917 + C939 * C15922 + C940 * C47448) *
                 C47479) *
                C47268) *
               C47222 +
           (((C4872 * C15921 + C4873 * C15917 + C4884 * C15922 +
              C4885 * C47448) *
                 C15919 +
             (C4882 * C15921 + C4883 * C15917 + C354 * C15922 + C355 * C47448) *
                 C47479) *
                C3234 +
            ((C5494 * C15921 + C5495 * C15917 + C5498 * C15922 +
              C5499 * C47448) *
                 C15919 +
             (C6248 * C15921 + C6249 * C15917 + (C1565 - C1566) * C15922 +
              (C1567 - C1568) * C47448) *
                 C47479) *
                C47268) *
               C47229 +
           (((C4880 * C15921 + C4881 * C15917 + C4886 * C15922 +
              C4887 * C47448) *
                 C15919 +
             (C6050 * C15921 + C6051 * C15917 + (C1407 - C1408) * C15922 +
              (C1409 - C1410) * C47448) *
                 C47479) *
                C3234 +
            ((C6246 * C15921 + C6247 * C15917 + (C1566 - C1565) * C15922 +
              (C1568 - C1567) * C47448) *
                 C15919 +
             ((C6251 - C6250) * C15921 + (C6253 - C6252) * C15917 +
              (C47384 * C1673 - C113 * C1668) * C15922 +
              (C47384 * C1677 - C113 * C1674) * C47448) *
                 C47479) *
                C47268) *
               C2840) *
              C47146)) /
        (p * q * std::sqrt(p + q));
    d2ee[81] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 (((((C47384 * C124 - C113 * C117) * C15921 +
                     (C47384 * C138 - C113 * C125) * C15917 +
                     (C146 - C147) * C15922 + (C148 - C149) * C47448) *
                        C15919 +
                    ((C4868 - C4869) * C15921 + (C4870 - C4871) * C15917 +
                     C4872 * C15922 + C4873 * C47448) *
                        C47479) *
                       C47264 +
                   (((C113 * C468 - C47384 * C478) * C15921 +
                     (C113 * C479 - C47384 * C498) * C15917 +
                     (C509 - C510) * C15922 + (C511 - C512) * C47448) *
                        C15919 +
                    ((C5490 - C5491) * C15921 + (C5492 - C5493) * C15917 +
                     C5494 * C15922 + C5495 * C47448) *
                        C47479) *
                       C47271 +
                   (((C47384 * C484 - C113 * C471) * C15921 +
                     (C47384 * C501 - C113 * C485) * C15917 +
                     (C517 - C518) * C15922 + (C519 - C520) * C47448) *
                        C15919 +
                    ((C5902 - C5903) * C15921 + (C5904 - C5905) * C15917 +
                     C6972 * C15922 + C6973 * C47448) *
                        C47479) *
                       C3742) *
                      C47222 +
                  ((((C4869 - C4868) * C15921 + (C4871 - C4870) * C15917 +
                     C4874 * C15922 + C4875 * C47448) *
                        C15919 +
                    ((C4876 - C4877) * C15921 + (C4878 - C4879) * C15917 +
                     C4880 * C15922 + C4881 * C47448) *
                        C47479) *
                       C47264 +
                   (((C5491 - C5490) * C15921 + (C5493 - C5492) * C15917 +
                     C5496 * C15922 + C5497 * C47448) *
                        C15919 +
                    ((C5906 - C5907) * C15921 + (C5908 - C5909) * C15917 +
                     C6246 * C15922 + C6247 * C47448) *
                        C47479) *
                       C47271 +
                   (((C5903 - C5902) * C15921 + (C5905 - C5904) * C15917 +
                     C6974 * C15922 + C6975 * C47448) *
                        C15919 +
                    ((C5910 - C5911) * C15921 + (C5912 - C5913) * C15917 +
                     (C5914 - C5915) * C15922 + (C5916 - C5917) * C47448) *
                        C47479) *
                       C3742) *
                      C47229 +
                  ((((C4877 - C4876) * C15921 + (C4879 - C4878) * C15917 +
                     C4882 * C15922 + C4883 * C47448) *
                        C15919 +
                    ((C5736 - C5737) * C15921 + (C5738 - C5739) * C15917 +
                     C6048 * C15922 + C6049 * C47448) *
                        C47479) *
                       C47264 +
                   (((C5907 - C5906) * C15921 + (C5909 - C5908) * C15917 +
                     C6248 * C15922 + C6249 * C47448) *
                        C15919 +
                    ((C6392 - C6393) * C15921 + (C6394 - C6395) * C15917 +
                     (C6250 - C6251) * C15922 + (C6252 - C6253) * C47448) *
                        C47479) *
                       C47271 +
                   (((C5911 - C5910) * C15921 + (C5913 - C5912) * C15917 +
                     (C5915 - C5914) * C15922 + (C5917 - C5916) * C47448) *
                        C15919 +
                    ((C47384 * C5895 - C113 * C5893) * C15921 +
                     (C47384 * C5899 - C113 * C5896) * C15917 +
                     (C47384 * C5897 - C113 * C5894) * C15922 +
                     (C47384 * C5900 - C113 * C5898) * C47448) *
                        C47479) *
                       C3742) *
                      C2840) *
                 C47135) /
                (p * q * std::sqrt(p + q));
    d2ee[82] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C47384 * C124 - C113 * C117) * C15921 +
             (C47384 * C138 - C113 * C125) * C15917 + (C146 - C147) * C15922 +
             (C148 - C149) * C47448) *
                C15919 +
            ((C4868 - C4869) * C15921 + (C4870 - C4871) * C15917 +
             C4872 * C15922 + C4873 * C47448) *
                C47479) *
               C3234 +
           (((C113 * C468 - C47384 * C478) * C15921 +
             (C113 * C479 - C47384 * C498) * C15917 + (C509 - C510) * C15922 +
             (C511 - C512) * C47448) *
                C15919 +
            ((C5490 - C5491) * C15921 + (C5492 - C5493) * C15917 +
             C5494 * C15922 + C5495 * C47448) *
                C47479) *
               C47268) *
              C47507 +
          ((((C4869 - C4868) * C15921 + (C4871 - C4870) * C15917 +
             C4874 * C15922 + C4875 * C47448) *
                C15919 +
            ((C4876 - C4877) * C15921 + (C4878 - C4879) * C15917 +
             C4880 * C15922 + C4881 * C47448) *
                C47479) *
               C3234 +
           (((C5491 - C5490) * C15921 + (C5493 - C5492) * C15917 +
             C5496 * C15922 + C5497 * C47448) *
                C15919 +
            ((C5906 - C5907) * C15921 + (C5908 - C5909) * C15917 +
             C6246 * C15922 + C6247 * C47448) *
                C47479) *
               C47268) *
              C47503 +
          ((((C4877 - C4876) * C15921 + (C4879 - C4878) * C15917 +
             C4882 * C15922 + C4883 * C47448) *
                C15919 +
            ((C5736 - C5737) * C15921 + (C5738 - C5739) * C15917 +
             C6048 * C15922 + C6049 * C47448) *
                C47479) *
               C3234 +
           (((C5907 - C5906) * C15921 + (C5909 - C5908) * C15917 +
             C6248 * C15922 + C6249 * C47448) *
                C15919 +
            ((C6392 - C6393) * C15921 + (C6394 - C6395) * C15917 +
             (C6250 - C6251) * C15922 + (C6252 - C6253) * C47448) *
                C47479) *
               C47268) *
              C47493 +
          ((((C5737 - C5736) * C15921 + (C5739 - C5738) * C15917 +
             C6050 * C15922 + C6051 * C47448) *
                C15919 +
            ((C5740 - C5741) * C15921 + (C5742 - C5743) * C15917 +
             (C5744 - C5745) * C15922 + (C5746 - C5747) * C47448) *
                C47479) *
               C3234 +
           (((C6393 - C6392) * C15921 + (C6395 - C6394) * C15917 +
             (C6251 - C6250) * C15922 + (C6253 - C6252) * C47448) *
                C15919 +
            ((C47384 * C6385 - C113 * C6383) * C15921 +
             (C47384 * C6389 - C113 * C6386) * C15917 +
             (C47384 * C6387 - C113 * C6384) * C15922 +
             (C47384 * C6390 - C113 * C6388) * C47448) *
                C47479) *
               C47268) *
              C47471) *
         C47135) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C47384 * C124 - C113 * C117) * C15921 +
              (C47384 * C138 - C113 * C125) * C15917 + (C146 - C147) * C15922 +
              (C148 - C149) * C47448) *
                 C15919 +
             ((C4868 - C4869) * C15921 + (C4870 - C4871) * C15917 +
              C4872 * C15922 + C4873 * C47448) *
                 C47479) *
                C3234 +
            (((C113 * C468 - C47384 * C478) * C15921 +
              (C113 * C479 - C47384 * C498) * C15917 + (C509 - C510) * C15922 +
              (C511 - C512) * C47448) *
                 C15919 +
             ((C5490 - C5491) * C15921 + (C5492 - C5493) * C15917 +
              C5494 * C15922 + C5495 * C47448) *
                 C47479) *
                C47268) *
               C2472 +
           ((((C4869 - C4868) * C15921 + (C4871 - C4870) * C15917 +
              C4874 * C15922 + C4875 * C47448) *
                 C15919 +
             ((C4876 - C4877) * C15921 + (C4878 - C4879) * C15917 +
              C4880 * C15922 + C4881 * C47448) *
                 C47479) *
                C3234 +
            (((C5491 - C5490) * C15921 + (C5493 - C5492) * C15917 +
              C5496 * C15922 + C5497 * C47448) *
                 C15919 +
             ((C5906 - C5907) * C15921 + (C5908 - C5909) * C15917 +
              C6246 * C15922 + C6247 * C47448) *
                 C47479) *
                C47268) *
               C47226) *
              C47497 +
          (((((C147 - C146) * C15921 + (C149 - C148) * C15917 +
              (C151 - C150) * C15922 + (C153 - C152) * C47448) *
                 C15919 +
             (C4874 * C15921 + C4875 * C15917 + C352 * C15922 + C353 * C47448) *
                 C47479) *
                C3234 +
            (((C510 - C509) * C15921 + (C512 - C511) * C15917 +
              (C514 - C513) * C15922 + (C516 - C515) * C47448) *
                 C15919 +
             (C5496 * C15921 + C5497 * C15917 + C939 * C15922 + C940 * C47448) *
                 C47479) *
                C47268) *
               C2472 +
           (((C4872 * C15921 + C4873 * C15917 + C4884 * C15922 +
              C4885 * C47448) *
                 C15919 +
             (C4882 * C15921 + C4883 * C15917 + C354 * C15922 + C355 * C47448) *
                 C47479) *
                C3234 +
            ((C5494 * C15921 + C5495 * C15917 + C5498 * C15922 +
              C5499 * C47448) *
                 C15919 +
             (C6248 * C15921 + C6249 * C15917 + (C1565 - C1566) * C15922 +
              (C1567 - C1568) * C47448) *
                 C47479) *
                C47268) *
               C47226) *
              C47484 +
          ((((C166 * C15921 + C167 * C15917 + (C155 - C154) * C15922 +
              (C157 - C156) * C47448) *
                 C15919 +
             (C4884 * C15921 + C4885 * C15917 + C645 * C15922 + C646 * C47448) *
                 C47479) *
                C3234 +
            ((C533 * C15921 + C534 * C15917 + (C526 - C525) * C15922 +
              (C528 - C527) * C47448) *
                 C15919 +
             (C5498 * C15921 + C5499 * C15917 + (C935 - C936) * C15922 +
              (C937 - C938) * C47448) *
                 C47479) *
                C47268) *
               C2472 +
           (((C352 * C15921 + C353 * C15917 + C5164 * C15922 + C5165 * C47448) *
                 C15919 +
             (C4886 * C15921 + C4887 * C15917 + (C348 - C349) * C15922 +
              (C350 - C351) * C47448) *
                 C47479) *
                C3234 +
            ((C939 * C15921 + C940 * C15917 + (C936 - C935) * C15922 +
              (C938 - C937) * C47448) *
                 C15919 +
             ((C1566 - C1565) * C15921 + (C1568 - C1567) * C15917 +
              (C47384 * C1557 - C113 * C1556) * C15922 +
              (C47384 * C1559 - C113 * C1558) * C47448) *
                 C47479) *
                C47268) *
               C47226) *
              C47455)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C47384 * C124 - C113 * C117) * C15921 +
             (C47384 * C138 - C113 * C125) * C15917 + (C146 - C147) * C15922 +
             (C148 - C149) * C47448) *
                C15919 +
            ((C4868 - C4869) * C15921 + (C4870 - C4871) * C15917 +
             C4872 * C15922 + C4873 * C47448) *
                C47479) *
               C47508 +
           (((C113 * C468 - C47384 * C478) * C15921 +
             (C113 * C479 - C47384 * C498) * C15917 + (C509 - C510) * C15922 +
             (C511 - C512) * C47448) *
                C15919 +
            ((C5490 - C5491) * C15921 + (C5492 - C5493) * C15917 +
             C5494 * C15922 + C5495 * C47448) *
                C47479) *
               C47505 +
           (((C47384 * C484 - C113 * C471) * C15921 +
             (C47384 * C501 - C113 * C485) * C15917 + (C517 - C518) * C15922 +
             (C519 - C520) * C47448) *
                C15919 +
            ((C5902 - C5903) * C15921 + (C5904 - C5905) * C15917 +
             C6972 * C15922 + C6973 * C47448) *
                C47479) *
               C47496 +
           (((C113 * C1968 - C47384 * C1974) * C15921 +
             (C113 * C1975 - C47384 * C1986) * C15917 +
             (C2257 - C2258) * C15922 + (C2259 - C2260) * C47448) *
                C15919 +
            ((C7248 - C7249) * C15921 + (C7250 - C7251) * C15917 +
             (C7106 - C7107) * C15922 + (C7108 - C7109) * C47448) *
                C47479) *
               C47477) *
              C2472 +
          ((((C4869 - C4868) * C15921 + (C4871 - C4870) * C15917 +
             C4874 * C15922 + C4875 * C47448) *
                C15919 +
            ((C4876 - C4877) * C15921 + (C4878 - C4879) * C15917 +
             C4880 * C15922 + C4881 * C47448) *
                C47479) *
               C47508 +
           (((C5491 - C5490) * C15921 + (C5493 - C5492) * C15917 +
             C5496 * C15922 + C5497 * C47448) *
                C15919 +
            ((C5906 - C5907) * C15921 + (C5908 - C5909) * C15917 +
             C6246 * C15922 + C6247 * C47448) *
                C47479) *
               C47505 +
           (((C5903 - C5902) * C15921 + (C5905 - C5904) * C15917 +
             C6974 * C15922 + C6975 * C47448) *
                C15919 +
            ((C5910 - C5911) * C15921 + (C5912 - C5913) * C15917 +
             (C5914 - C5915) * C15922 + (C5916 - C5917) * C47448) *
                C47479) *
               C47496 +
           (((C7249 - C7248) * C15921 + (C7251 - C7250) * C15917 +
             (C7107 - C7106) * C15922 + (C7109 - C7108) * C47448) *
                C15919 +
            ((C47384 * C7241 - C113 * C7239) * C15921 +
             (C47384 * C7245 - C113 * C7242) * C15917 +
             (C47384 * C7243 - C113 * C7240) * C15922 +
             (C47384 * C7246 - C113 * C7244) * C47448) *
                C47479) *
               C47477) *
              C47226) *
         C47135) /
            (p * q * std::sqrt(p + q));
    d2ee[83] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C47384 * C124 - C113 * C117) * C15921 +
              (C47384 * C138 - C113 * C125) * C15917 + (C146 - C147) * C15922 +
              (C148 - C149) * C47448) *
                 C15919 +
             ((C4868 - C4869) * C15921 + (C4870 - C4871) * C15917 +
              C4872 * C15922 + C4873 * C47448) *
                 C47479) *
                C47264 +
            (((C113 * C468 - C47384 * C478) * C15921 +
              (C113 * C479 - C47384 * C498) * C15917 + (C509 - C510) * C15922 +
              (C511 - C512) * C47448) *
                 C15919 +
             ((C5490 - C5491) * C15921 + (C5492 - C5493) * C15917 +
              C5494 * C15922 + C5495 * C47448) *
                 C47479) *
                C47271 +
            (((C47384 * C484 - C113 * C471) * C15921 +
              (C47384 * C501 - C113 * C485) * C15917 + (C517 - C518) * C15922 +
              (C519 - C520) * C47448) *
                 C15919 +
             ((C5902 - C5903) * C15921 + (C5904 - C5905) * C15917 +
              C6972 * C15922 + C6973 * C47448) *
                 C47479) *
                C3742) *
               C2472 +
           ((((C4869 - C4868) * C15921 + (C4871 - C4870) * C15917 +
              C4874 * C15922 + C4875 * C47448) *
                 C15919 +
             ((C4876 - C4877) * C15921 + (C4878 - C4879) * C15917 +
              C4880 * C15922 + C4881 * C47448) *
                 C47479) *
                C47264 +
            (((C5491 - C5490) * C15921 + (C5493 - C5492) * C15917 +
              C5496 * C15922 + C5497 * C47448) *
                 C15919 +
             ((C5906 - C5907) * C15921 + (C5908 - C5909) * C15917 +
              C6246 * C15922 + C6247 * C47448) *
                 C47479) *
                C47271 +
            (((C5903 - C5902) * C15921 + (C5905 - C5904) * C15917 +
              C6974 * C15922 + C6975 * C47448) *
                 C15919 +
             ((C5910 - C5911) * C15921 + (C5912 - C5913) * C15917 +
              (C5914 - C5915) * C15922 + (C5916 - C5917) * C47448) *
                 C47479) *
                C3742) *
               C47226) *
              C47415 +
          (((((C147 - C146) * C15921 + (C149 - C148) * C15917 +
              (C151 - C150) * C15922 + (C153 - C152) * C47448) *
                 C15919 +
             (C4874 * C15921 + C4875 * C15917 + C352 * C15922 + C353 * C47448) *
                 C47479) *
                C47264 +
            (((C510 - C509) * C15921 + (C512 - C511) * C15917 +
              (C514 - C513) * C15922 + (C516 - C515) * C47448) *
                 C15919 +
             (C5496 * C15921 + C5497 * C15917 + C939 * C15922 + C940 * C47448) *
                 C47479) *
                C47271 +
            (((C518 - C517) * C15921 + (C520 - C519) * C15917 +
              (C522 - C521) * C15922 + (C524 - C523) * C47448) *
                 C15919 +
             (C6974 * C15921 + C6975 * C15917 + (C2147 - C2148) * C15922 +
              (C2149 - C2150) * C47448) *
                 C47479) *
                C3742) *
               C2472 +
           (((C4872 * C15921 + C4873 * C15917 + C4884 * C15922 +
              C4885 * C47448) *
                 C15919 +
             (C4882 * C15921 + C4883 * C15917 + C354 * C15922 + C355 * C47448) *
                 C47479) *
                C47264 +
            ((C5494 * C15921 + C5495 * C15917 + C5498 * C15922 +
              C5499 * C47448) *
                 C15919 +
             (C6248 * C15921 + C6249 * C15917 + (C1565 - C1566) * C15922 +
              (C1567 - C1568) * C47448) *
                 C47479) *
                C47271 +
            ((C6972 * C15921 + C6973 * C15917 + (C2148 - C2147) * C15922 +
              (C2150 - C2149) * C47448) *
                 C15919 +
             ((C5915 - C5914) * C15921 + (C5917 - C5916) * C15917 +
              (C47384 * C1283 - C113 * C1266) * C15922 +
              (C47384 * C1293 - C113 * C1284) * C47448) *
                 C47479) *
                C3742) *
               C47226) *
              C47146)) /
        (p * q * std::sqrt(p + q));
    d2ee[84] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C47384 * C124 - C113 * C117) * C15921 +
              (C47384 * C138 - C113 * C125) * C15917 + (C146 - C147) * C15922 +
              (C148 - C149) * C47448) *
                 C15919 +
             ((C4868 - C4869) * C15921 + (C4870 - C4871) * C15917 +
              C4872 * C15922 + C4873 * C47448) *
                 C47479) *
                C3234 +
            (((C113 * C468 - C47384 * C478) * C15921 +
              (C113 * C479 - C47384 * C498) * C15917 + (C509 - C510) * C15922 +
              (C511 - C512) * C47448) *
                 C15919 +
             ((C5490 - C5491) * C15921 + (C5492 - C5493) * C15917 +
              C5494 * C15922 + C5495 * C47448) *
                 C47479) *
                C47268) *
               C2472 +
           ((((C4869 - C4868) * C15921 + (C4871 - C4870) * C15917 +
              C4874 * C15922 + C4875 * C47448) *
                 C15919 +
             ((C4876 - C4877) * C15921 + (C4878 - C4879) * C15917 +
              C4880 * C15922 + C4881 * C47448) *
                 C47479) *
                C3234 +
            (((C5491 - C5490) * C15921 + (C5493 - C5492) * C15917 +
              C5496 * C15922 + C5497 * C47448) *
                 C15919 +
             ((C5906 - C5907) * C15921 + (C5908 - C5909) * C15917 +
              C6246 * C15922 + C6247 * C47448) *
                 C47479) *
                C47268) *
               C47226) *
              C47497 +
          (((((C147 - C146) * C15921 + (C149 - C148) * C15917 +
              (C151 - C150) * C15922 + (C153 - C152) * C47448) *
                 C15919 +
             (C4874 * C15921 + C4875 * C15917 + C352 * C15922 + C353 * C47448) *
                 C47479) *
                C3234 +
            (((C510 - C509) * C15921 + (C512 - C511) * C15917 +
              (C514 - C513) * C15922 + (C516 - C515) * C47448) *
                 C15919 +
             (C5496 * C15921 + C5497 * C15917 + C939 * C15922 + C940 * C47448) *
                 C47479) *
                C47268) *
               C2472 +
           (((C4872 * C15921 + C4873 * C15917 + C4884 * C15922 +
              C4885 * C47448) *
                 C15919 +
             (C4882 * C15921 + C4883 * C15917 + C354 * C15922 + C355 * C47448) *
                 C47479) *
                C3234 +
            ((C5494 * C15921 + C5495 * C15917 + C5498 * C15922 +
              C5499 * C47448) *
                 C15919 +
             (C6248 * C15921 + C6249 * C15917 + (C1565 - C1566) * C15922 +
              (C1567 - C1568) * C47448) *
                 C47479) *
                C47268) *
               C47226) *
              C47484 +
          ((((C166 * C15921 + C167 * C15917 + (C155 - C154) * C15922 +
              (C157 - C156) * C47448) *
                 C15919 +
             (C4884 * C15921 + C4885 * C15917 + C645 * C15922 + C646 * C47448) *
                 C47479) *
                C3234 +
            ((C533 * C15921 + C534 * C15917 + (C526 - C525) * C15922 +
              (C528 - C527) * C47448) *
                 C15919 +
             (C5498 * C15921 + C5499 * C15917 + (C935 - C936) * C15922 +
              (C937 - C938) * C47448) *
                 C47479) *
                C47268) *
               C2472 +
           (((C352 * C15921 + C353 * C15917 + C5164 * C15922 + C5165 * C47448) *
                 C15919 +
             (C4886 * C15921 + C4887 * C15917 + (C348 - C349) * C15922 +
              (C350 - C351) * C47448) *
                 C47479) *
                C3234 +
            ((C939 * C15921 + C940 * C15917 + (C936 - C935) * C15922 +
              (C938 - C937) * C47448) *
                 C15919 +
             ((C1566 - C1565) * C15921 + (C1568 - C1567) * C15917 +
              (C47384 * C1557 - C113 * C1556) * C15922 +
              (C47384 * C1559 - C113 * C1558) * C47448) *
                 C47479) *
                C47268) *
               C47226) *
              C47455)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C47384 * C124 - C113 * C117) * C15921 +
             (C47384 * C138 - C113 * C125) * C15917 + (C146 - C147) * C15922 +
             (C148 - C149) * C47448) *
                C15919 +
            ((C4868 - C4869) * C15921 + (C4870 - C4871) * C15917 +
             C4872 * C15922 + C4873 * C47448) *
                C47479) *
               C3234 +
           (((C113 * C468 - C47384 * C478) * C15921 +
             (C113 * C479 - C47384 * C498) * C15917 + (C509 - C510) * C15922 +
             (C511 - C512) * C47448) *
                C15919 +
            ((C5490 - C5491) * C15921 + (C5492 - C5493) * C15917 +
             C5494 * C15922 + C5495 * C47448) *
                C47479) *
               C47268) *
              C47507 +
          ((((C4869 - C4868) * C15921 + (C4871 - C4870) * C15917 +
             C4874 * C15922 + C4875 * C47448) *
                C15919 +
            ((C4876 - C4877) * C15921 + (C4878 - C4879) * C15917 +
             C4880 * C15922 + C4881 * C47448) *
                C47479) *
               C3234 +
           (((C5491 - C5490) * C15921 + (C5493 - C5492) * C15917 +
             C5496 * C15922 + C5497 * C47448) *
                C15919 +
            ((C5906 - C5907) * C15921 + (C5908 - C5909) * C15917 +
             C6246 * C15922 + C6247 * C47448) *
                C47479) *
               C47268) *
              C47503 +
          ((((C4877 - C4876) * C15921 + (C4879 - C4878) * C15917 +
             C4882 * C15922 + C4883 * C47448) *
                C15919 +
            ((C5736 - C5737) * C15921 + (C5738 - C5739) * C15917 +
             C6048 * C15922 + C6049 * C47448) *
                C47479) *
               C3234 +
           (((C5907 - C5906) * C15921 + (C5909 - C5908) * C15917 +
             C6248 * C15922 + C6249 * C47448) *
                C15919 +
            ((C6392 - C6393) * C15921 + (C6394 - C6395) * C15917 +
             (C6250 - C6251) * C15922 + (C6252 - C6253) * C47448) *
                C47479) *
               C47268) *
              C47493 +
          ((((C5737 - C5736) * C15921 + (C5739 - C5738) * C15917 +
             C6050 * C15922 + C6051 * C47448) *
                C15919 +
            ((C5740 - C5741) * C15921 + (C5742 - C5743) * C15917 +
             (C5744 - C5745) * C15922 + (C5746 - C5747) * C47448) *
                C47479) *
               C3234 +
           (((C6393 - C6392) * C15921 + (C6395 - C6394) * C15917 +
             (C6251 - C6250) * C15922 + (C6253 - C6252) * C47448) *
                C15919 +
            ((C47384 * C6385 - C113 * C6383) * C15921 +
             (C47384 * C6389 - C113 * C6386) * C15917 +
             (C47384 * C6387 - C113 * C6384) * C15922 +
             (C47384 * C6390 - C113 * C6388) * C47448) *
                C47479) *
               C47268) *
              C47471) *
         C47135) /
            (p * q * std::sqrt(p + q));
    d2ee[85] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C47384 * C124 - C113 * C117) * C15921 +
             (C47384 * C138 - C113 * C125) * C15917 + (C146 - C147) * C15922 +
             (C148 - C149) * C47448) *
                C15919 +
            ((C4868 - C4869) * C15921 + (C4870 - C4871) * C15917 +
             C4872 * C15922 + C4873 * C47448) *
                C47479) *
               C47181 * C1392 +
           (((C4869 - C4868) * C15921 + (C4871 - C4870) * C15917 +
             C4874 * C15922 + C4875 * C47448) *
                C15919 +
            ((C4876 - C4877) * C15921 + (C4878 - C4879) * C15917 +
             C4880 * C15922 + C4881 * C47448) *
                C47479) *
               C47181 * C1393 +
           (((C4877 - C4876) * C15921 + (C4879 - C4878) * C15917 +
             C4882 * C15922 + C4883 * C47448) *
                C15919 +
            ((C5736 - C5737) * C15921 + (C5738 - C5739) * C15917 +
             C6048 * C15922 + C6049 * C47448) *
                C47479) *
               C47181 * C1394 +
           (((C5737 - C5736) * C15921 + (C5739 - C5738) * C15917 +
             C6050 * C15922 + C6051 * C47448) *
                C15919 +
            ((C5740 - C5741) * C15921 + (C5742 - C5743) * C15917 +
             (C5744 - C5745) * C15922 + (C5746 - C5747) * C47448) *
                C47479) *
               C47181 * C47471) *
              C47415 +
          ((((C147 - C146) * C15921 + (C149 - C148) * C15917 +
             (C151 - C150) * C15922 + (C153 - C152) * C47448) *
                C15919 +
            (C4874 * C15921 + C4875 * C15917 + C352 * C15922 + C353 * C47448) *
                C47479) *
               C47181 * C1392 +
           ((C4872 * C15921 + C4873 * C15917 + C4884 * C15922 +
             C4885 * C47448) *
                C15919 +
            (C4882 * C15921 + C4883 * C15917 + C354 * C15922 + C355 * C47448) *
                C47479) *
               C47181 * C1393 +
           ((C4880 * C15921 + C4881 * C15917 + C4886 * C15922 +
             C4887 * C47448) *
                C15919 +
            (C6050 * C15921 + C6051 * C15917 + (C1407 - C1408) * C15922 +
             (C1409 - C1410) * C47448) *
                C47479) *
               C47181 * C1394 +
           ((C6048 * C15921 + C6049 * C15917 + (C1408 - C1407) * C15922 +
             (C1410 - C1409) * C47448) *
                C15919 +
            ((C5745 - C5744) * C15921 + (C5747 - C5746) * C15917 +
             (C47384 * C1140 - C113 * C1129) * C15922 +
             (C47384 * C1147 - C113 * C1141) * C47448) *
                C47479) *
               C47181 * C47471) *
              C47146)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C47384 * C124 - C113 * C117) * C15921 +
             (C47384 * C138 - C113 * C125) * C15917 + (C146 - C147) * C15922 +
             (C148 - C149) * C47448) *
                C15919 +
            ((C4868 - C4869) * C15921 + (C4870 - C4871) * C15917 +
             C4872 * C15922 + C4873 * C47448) *
                C47479) *
               C47181 * C47429 +
           (((C4869 - C4868) * C15921 + (C4871 - C4870) * C15917 +
             C4874 * C15922 + C4875 * C47448) *
                C15919 +
            ((C4876 - C4877) * C15921 + (C4878 - C4879) * C15917 +
             C4880 * C15922 + C4881 * C47448) *
                C47479) *
               C47181 * C47226) *
              C636 +
          ((((C147 - C146) * C15921 + (C149 - C148) * C15917 +
             (C151 - C150) * C15922 + (C153 - C152) * C47448) *
                C15919 +
            (C4874 * C15921 + C4875 * C15917 + C352 * C15922 + C353 * C47448) *
                C47479) *
               C47181 * C47429 +
           ((C4872 * C15921 + C4873 * C15917 + C4884 * C15922 +
             C4885 * C47448) *
                C15919 +
            (C4882 * C15921 + C4883 * C15917 + C354 * C15922 + C355 * C47448) *
                C47479) *
               C47181 * C47226) *
              C637 +
          (((C166 * C15921 + C167 * C15917 + (C155 - C154) * C15922 +
             (C157 - C156) * C47448) *
                C15919 +
            (C4884 * C15921 + C4885 * C15917 + C645 * C15922 + C646 * C47448) *
                C47479) *
               C47181 * C47429 +
           ((C352 * C15921 + C353 * C15917 + C5164 * C15922 + C5165 * C47448) *
                C15919 +
            (C4886 * C15921 + C4887 * C15917 + (C348 - C349) * C15922 +
             (C350 - C351) * C47448) *
                C47479) *
               C47181 * C47226) *
              C638 +
          (((C168 * C15921 + C169 * C15917 + (C159 - C158) * C15922 +
             (C161 - C160) * C47448) *
                C15919 +
            (C5164 * C15921 + C5165 * C15917 + (C647 - C648) * C15922 +
             (C649 - C650) * C47448) *
                C47479) *
               C47181 * C47429 +
           ((C645 * C15921 + C646 * C15917 + (C648 - C647) * C15922 +
             (C650 - C649) * C47448) *
                C15919 +
            ((C349 - C348) * C15921 + (C351 - C350) * C15917 +
             (C47384 * C315 - C113 * C296) * C15922 +
             (C47384 * C326 - C113 * C316) * C47448) *
                C47479) *
               C47181 * C47226) *
              C47465)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C47384 * C124 - C113 * C117) * C15921 +
              (C47384 * C138 - C113 * C125) * C15917 + (C146 - C147) * C15922 +
              (C148 - C149) * C47448) *
                 C15919 +
             ((C4868 - C4869) * C15921 + (C4870 - C4871) * C15917 +
              C4872 * C15922 + C4873 * C47448) *
                 C47479) *
                C1788 +
            (((C113 * C468 - C47384 * C478) * C15921 +
              (C113 * C479 - C47384 * C498) * C15917 + (C509 - C510) * C15922 +
              (C511 - C512) * C47448) *
                 C15919 +
             ((C5490 - C5491) * C15921 + (C5492 - C5493) * C15917 +
              C5494 * C15922 + C5495 * C47448) *
                 C47479) *
                C1789 +
            (((C47384 * C484 - C113 * C471) * C15921 +
              (C47384 * C501 - C113 * C485) * C15917 + (C517 - C518) * C15922 +
              (C519 - C520) * C47448) *
                 C15919 +
             ((C5902 - C5903) * C15921 + (C5904 - C5905) * C15917 +
              C6972 * C15922 + C6973 * C47448) *
                 C47479) *
                C47464) *
               C47429 +
           ((((C4869 - C4868) * C15921 + (C4871 - C4870) * C15917 +
              C4874 * C15922 + C4875 * C47448) *
                 C15919 +
             ((C4876 - C4877) * C15921 + (C4878 - C4879) * C15917 +
              C4880 * C15922 + C4881 * C47448) *
                 C47479) *
                C1788 +
            (((C5491 - C5490) * C15921 + (C5493 - C5492) * C15917 +
              C5496 * C15922 + C5497 * C47448) *
                 C15919 +
             ((C5906 - C5907) * C15921 + (C5908 - C5909) * C15917 +
              C6246 * C15922 + C6247 * C47448) *
                 C47479) *
                C1789 +
            (((C5903 - C5902) * C15921 + (C5905 - C5904) * C15917 +
              C6974 * C15922 + C6975 * C47448) *
                 C15919 +
             ((C5910 - C5911) * C15921 + (C5912 - C5913) * C15917 +
              (C5914 - C5915) * C15922 + (C5916 - C5917) * C47448) *
                 C47479) *
                C47464) *
               C47226) *
              C47415 +
          (((((C147 - C146) * C15921 + (C149 - C148) * C15917 +
              (C151 - C150) * C15922 + (C153 - C152) * C47448) *
                 C15919 +
             (C4874 * C15921 + C4875 * C15917 + C352 * C15922 + C353 * C47448) *
                 C47479) *
                C1788 +
            (((C510 - C509) * C15921 + (C512 - C511) * C15917 +
              (C514 - C513) * C15922 + (C516 - C515) * C47448) *
                 C15919 +
             (C5496 * C15921 + C5497 * C15917 + C939 * C15922 + C940 * C47448) *
                 C47479) *
                C1789 +
            (((C518 - C517) * C15921 + (C520 - C519) * C15917 +
              (C522 - C521) * C15922 + (C524 - C523) * C47448) *
                 C15919 +
             (C6974 * C15921 + C6975 * C15917 + (C2147 - C2148) * C15922 +
              (C2149 - C2150) * C47448) *
                 C47479) *
                C47464) *
               C47429 +
           (((C4872 * C15921 + C4873 * C15917 + C4884 * C15922 +
              C4885 * C47448) *
                 C15919 +
             (C4882 * C15921 + C4883 * C15917 + C354 * C15922 + C355 * C47448) *
                 C47479) *
                C1788 +
            ((C5494 * C15921 + C5495 * C15917 + C5498 * C15922 +
              C5499 * C47448) *
                 C15919 +
             (C6248 * C15921 + C6249 * C15917 + (C1565 - C1566) * C15922 +
              (C1567 - C1568) * C47448) *
                 C47479) *
                C1789 +
            ((C6972 * C15921 + C6973 * C15917 + (C2148 - C2147) * C15922 +
              (C2150 - C2149) * C47448) *
                 C15919 +
             ((C5915 - C5914) * C15921 + (C5917 - C5916) * C15917 +
              (C47384 * C1283 - C113 * C1266) * C15922 +
              (C47384 * C1293 - C113 * C1284) * C47448) *
                 C47479) *
                C47464) *
               C47226) *
              C47146)) /
            (p * q * std::sqrt(p + q));
    d2ee[86] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C47384 * C124 - C113 * C117) * C15921 +
             (C47384 * C138 - C113 * C125) * C15917 + (C146 - C147) * C15922 +
             (C148 - C149) * C47448) *
                C15919 +
            ((C4868 - C4869) * C15921 + (C4870 - C4871) * C15917 +
             C4872 * C15922 + C4873 * C47448) *
                C47479) *
               C47430 +
           (((C113 * C468 - C47384 * C478) * C15921 +
             (C113 * C479 - C47384 * C498) * C15917 + (C509 - C510) * C15922 +
             (C511 - C512) * C47448) *
                C15919 +
            ((C5490 - C5491) * C15921 + (C5492 - C5493) * C15917 +
             C5494 * C15922 + C5495 * C47448) *
                C47479) *
               C47268) *
              C1392 +
          ((((C4869 - C4868) * C15921 + (C4871 - C4870) * C15917 +
             C4874 * C15922 + C4875 * C47448) *
                C15919 +
            ((C4876 - C4877) * C15921 + (C4878 - C4879) * C15917 +
             C4880 * C15922 + C4881 * C47448) *
                C47479) *
               C47430 +
           (((C5491 - C5490) * C15921 + (C5493 - C5492) * C15917 +
             C5496 * C15922 + C5497 * C47448) *
                C15919 +
            ((C5906 - C5907) * C15921 + (C5908 - C5909) * C15917 +
             C6246 * C15922 + C6247 * C47448) *
                C47479) *
               C47268) *
              C1393 +
          ((((C4877 - C4876) * C15921 + (C4879 - C4878) * C15917 +
             C4882 * C15922 + C4883 * C47448) *
                C15919 +
            ((C5736 - C5737) * C15921 + (C5738 - C5739) * C15917 +
             C6048 * C15922 + C6049 * C47448) *
                C47479) *
               C47430 +
           (((C5907 - C5906) * C15921 + (C5909 - C5908) * C15917 +
             C6248 * C15922 + C6249 * C47448) *
                C15919 +
            ((C6392 - C6393) * C15921 + (C6394 - C6395) * C15917 +
             (C6250 - C6251) * C15922 + (C6252 - C6253) * C47448) *
                C47479) *
               C47268) *
              C1394 +
          ((((C5737 - C5736) * C15921 + (C5739 - C5738) * C15917 +
             C6050 * C15922 + C6051 * C47448) *
                C15919 +
            ((C5740 - C5741) * C15921 + (C5742 - C5743) * C15917 +
             (C5744 - C5745) * C15922 + (C5746 - C5747) * C47448) *
                C47479) *
               C47430 +
           (((C6393 - C6392) * C15921 + (C6395 - C6394) * C15917 +
             (C6251 - C6250) * C15922 + (C6253 - C6252) * C47448) *
                C15919 +
            ((C47384 * C6385 - C113 * C6383) * C15921 +
             (C47384 * C6389 - C113 * C6386) * C15917 +
             (C47384 * C6387 - C113 * C6384) * C15922 +
             (C47384 * C6390 - C113 * C6388) * C47448) *
                C47479) *
               C47268) *
              C47471) *
         C47135) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C47384 * C124 - C113 * C117) * C15921 +
              (C47384 * C138 - C113 * C125) * C15917 + (C146 - C147) * C15922 +
              (C148 - C149) * C47448) *
                 C15919 +
             ((C4868 - C4869) * C15921 + (C4870 - C4871) * C15917 +
              C4872 * C15922 + C4873 * C47448) *
                 C47479) *
                C47430 +
            (((C113 * C468 - C47384 * C478) * C15921 +
              (C113 * C479 - C47384 * C498) * C15917 + (C509 - C510) * C15922 +
              (C511 - C512) * C47448) *
                 C15919 +
             ((C5490 - C5491) * C15921 + (C5492 - C5493) * C15917 +
              C5494 * C15922 + C5495 * C47448) *
                 C47479) *
                C47268) *
               C47429 +
           ((((C4869 - C4868) * C15921 + (C4871 - C4870) * C15917 +
              C4874 * C15922 + C4875 * C47448) *
                 C15919 +
             ((C4876 - C4877) * C15921 + (C4878 - C4879) * C15917 +
              C4880 * C15922 + C4881 * C47448) *
                 C47479) *
                C47430 +
            (((C5491 - C5490) * C15921 + (C5493 - C5492) * C15917 +
              C5496 * C15922 + C5497 * C47448) *
                 C15919 +
             ((C5906 - C5907) * C15921 + (C5908 - C5909) * C15917 +
              C6246 * C15922 + C6247 * C47448) *
                 C47479) *
                C47268) *
               C47226) *
              C284 +
          (((((C147 - C146) * C15921 + (C149 - C148) * C15917 +
              (C151 - C150) * C15922 + (C153 - C152) * C47448) *
                 C15919 +
             (C4874 * C15921 + C4875 * C15917 + C352 * C15922 + C353 * C47448) *
                 C47479) *
                C47430 +
            (((C510 - C509) * C15921 + (C512 - C511) * C15917 +
              (C514 - C513) * C15922 + (C516 - C515) * C47448) *
                 C15919 +
             (C5496 * C15921 + C5497 * C15917 + C939 * C15922 + C940 * C47448) *
                 C47479) *
                C47268) *
               C47429 +
           (((C4872 * C15921 + C4873 * C15917 + C4884 * C15922 +
              C4885 * C47448) *
                 C15919 +
             (C4882 * C15921 + C4883 * C15917 + C354 * C15922 + C355 * C47448) *
                 C47479) *
                C47430 +
            ((C5494 * C15921 + C5495 * C15917 + C5498 * C15922 +
              C5499 * C47448) *
                 C15919 +
             (C6248 * C15921 + C6249 * C15917 + (C1565 - C1566) * C15922 +
              (C1567 - C1568) * C47448) *
                 C47479) *
                C47268) *
               C47226) *
              C285 +
          ((((C166 * C15921 + C167 * C15917 + (C155 - C154) * C15922 +
              (C157 - C156) * C47448) *
                 C15919 +
             (C4884 * C15921 + C4885 * C15917 + C645 * C15922 + C646 * C47448) *
                 C47479) *
                C47430 +
            ((C533 * C15921 + C534 * C15917 + (C526 - C525) * C15922 +
              (C528 - C527) * C47448) *
                 C15919 +
             (C5498 * C15921 + C5499 * C15917 + (C935 - C936) * C15922 +
              (C937 - C938) * C47448) *
                 C47479) *
                C47268) *
               C47429 +
           (((C352 * C15921 + C353 * C15917 + C5164 * C15922 + C5165 * C47448) *
                 C15919 +
             (C4886 * C15921 + C4887 * C15917 + (C348 - C349) * C15922 +
              (C350 - C351) * C47448) *
                 C47479) *
                C47430 +
            ((C939 * C15921 + C940 * C15917 + (C936 - C935) * C15922 +
              (C938 - C937) * C47448) *
                 C15919 +
             ((C1566 - C1565) * C15921 + (C1568 - C1567) * C15917 +
              (C47384 * C1557 - C113 * C1556) * C15922 +
              (C47384 * C1559 - C113 * C1558) * C47448) *
                 C47479) *
                C47268) *
               C47226) *
              C47455)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C47384 * C124 - C113 * C117) * C15921 +
             (C47384 * C138 - C113 * C125) * C15917 + (C146 - C147) * C15922 +
             (C148 - C149) * C47448) *
                C15919 +
            ((C4868 - C4869) * C15921 + (C4870 - C4871) * C15917 +
             C4872 * C15922 + C4873 * C47448) *
                C47479) *
               C2248 +
           (((C113 * C468 - C47384 * C478) * C15921 +
             (C113 * C479 - C47384 * C498) * C15917 + (C509 - C510) * C15922 +
             (C511 - C512) * C47448) *
                C15919 +
            ((C5490 - C5491) * C15921 + (C5492 - C5493) * C15917 +
             C5494 * C15922 + C5495 * C47448) *
                C47479) *
               C2249 +
           (((C47384 * C484 - C113 * C471) * C15921 +
             (C47384 * C501 - C113 * C485) * C15917 + (C517 - C518) * C15922 +
             (C519 - C520) * C47448) *
                C15919 +
            ((C5902 - C5903) * C15921 + (C5904 - C5905) * C15917 +
             C6972 * C15922 + C6973 * C47448) *
                C47479) *
               C2250 +
           (((C113 * C1968 - C47384 * C1974) * C15921 +
             (C113 * C1975 - C47384 * C1986) * C15917 +
             (C2257 - C2258) * C15922 + (C2259 - C2260) * C47448) *
                C15919 +
            ((C7248 - C7249) * C15921 + (C7250 - C7251) * C15917 +
             (C7106 - C7107) * C15922 + (C7108 - C7109) * C47448) *
                C47479) *
               C47477) *
              C47429 +
          ((((C4869 - C4868) * C15921 + (C4871 - C4870) * C15917 +
             C4874 * C15922 + C4875 * C47448) *
                C15919 +
            ((C4876 - C4877) * C15921 + (C4878 - C4879) * C15917 +
             C4880 * C15922 + C4881 * C47448) *
                C47479) *
               C2248 +
           (((C5491 - C5490) * C15921 + (C5493 - C5492) * C15917 +
             C5496 * C15922 + C5497 * C47448) *
                C15919 +
            ((C5906 - C5907) * C15921 + (C5908 - C5909) * C15917 +
             C6246 * C15922 + C6247 * C47448) *
                C47479) *
               C2249 +
           (((C5903 - C5902) * C15921 + (C5905 - C5904) * C15917 +
             C6974 * C15922 + C6975 * C47448) *
                C15919 +
            ((C5910 - C5911) * C15921 + (C5912 - C5913) * C15917 +
             (C5914 - C5915) * C15922 + (C5916 - C5917) * C47448) *
                C47479) *
               C2250 +
           (((C7249 - C7248) * C15921 + (C7251 - C7250) * C15917 +
             (C7107 - C7106) * C15922 + (C7109 - C7108) * C47448) *
                C15919 +
            ((C47384 * C7241 - C113 * C7239) * C15921 +
             (C47384 * C7245 - C113 * C7242) * C15917 +
             (C47384 * C7243 - C113 * C7240) * C15922 +
             (C47384 * C7246 - C113 * C7244) * C47448) *
                C47479) *
               C47477) *
              C47226) *
         C47135) /
            (p * q * std::sqrt(p + q));
    d2ee[87] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C47384 * C124 - C113 * C117) * C15921 +
                (C47384 * C138 - C113 * C125) * C15917 +
                (C146 - C147) * C15922 + (C148 - C149) * C47448) *
                   C15919 +
               ((C4868 - C4869) * C15921 + (C4870 - C4871) * C15917 +
                C4872 * C15922 + C4873 * C47448) *
                   C47479) *
                  C47181 * C47163 * C108 +
              (((C147 - C146) * C15921 + (C149 - C148) * C15917 +
                (C151 - C150) * C15922 + (C153 - C152) * C47448) *
                   C15919 +
               (C4874 * C15921 + C4875 * C15917 + C352 * C15922 +
                C353 * C47448) *
                   C47479) *
                  C47181 * C47163 * C109 +
              ((C166 * C15921 + C167 * C15917 + (C155 - C154) * C15922 +
                (C157 - C156) * C47448) *
                   C15919 +
               (C4884 * C15921 + C4885 * C15917 + C645 * C15922 +
                C646 * C47448) *
                   C47479) *
                  C47181 * C47163 * C110 +
              ((C168 * C15921 + C169 * C15917 + (C159 - C158) * C15922 +
                (C161 - C160) * C47448) *
                   C15919 +
               (C5164 * C15921 + C5165 * C15917 + (C647 - C648) * C15922 +
                (C649 - C650) * C47448) *
                   C47479) *
                  C47181 * C47163 * C111 +
              ((C170 * C15921 + C171 * C15917 + (C163 - C162) * C15922 +
                (C165 - C164) * C47448) *
                   C15919 +
               ((C648 - C647) * C15921 + (C650 - C649) * C15917 +
                (C47384 * C641 - C113 * C640) * C15922 +
                (C47384 * C643 - C113 * C642) * C47448) *
                   C47479) *
                  C47181 * C47163 * C112) +
         0.5 * std::pow(Pi, 2.5) *
             (((((C47384 * C124 - C113 * C117) * C15921 +
                 (C47384 * C138 - C113 * C125) * C15917 +
                 (C146 - C147) * C15922 + (C148 - C149) * C47448) *
                    C15919 +
                ((C4868 - C4869) * C15921 + (C4870 - C4871) * C15917 +
                 C4872 * C15922 + C4873 * C47448) *
                    C47479) *
                   C47181 * C47500 +
               (((C4869 - C4868) * C15921 + (C4871 - C4870) * C15917 +
                 C4874 * C15922 + C4875 * C47448) *
                    C15919 +
                ((C4876 - C4877) * C15921 + (C4878 - C4879) * C15917 +
                 C4880 * C15922 + C4881 * C47448) *
                    C47479) *
                   C47181 * C47488 +
               (((C4877 - C4876) * C15921 + (C4879 - C4878) * C15917 +
                 C4882 * C15922 + C4883 * C47448) *
                    C15919 +
                ((C5736 - C5737) * C15921 + (C5738 - C5739) * C15917 +
                 C6048 * C15922 + C6049 * C47448) *
                    C47479) *
                   C47181 * C47461) *
                  C284 +
              ((((C147 - C146) * C15921 + (C149 - C148) * C15917 +
                 (C151 - C150) * C15922 + (C153 - C152) * C47448) *
                    C15919 +
                (C4874 * C15921 + C4875 * C15917 + C352 * C15922 +
                 C353 * C47448) *
                    C47479) *
                   C47181 * C47500 +
               ((C4872 * C15921 + C4873 * C15917 + C4884 * C15922 +
                 C4885 * C47448) *
                    C15919 +
                (C4882 * C15921 + C4883 * C15917 + C354 * C15922 +
                 C355 * C47448) *
                    C47479) *
                   C47181 * C47488 +
               ((C4880 * C15921 + C4881 * C15917 + C4886 * C15922 +
                 C4887 * C47448) *
                    C15919 +
                (C6050 * C15921 + C6051 * C15917 + (C1407 - C1408) * C15922 +
                 (C1409 - C1410) * C47448) *
                    C47479) *
                   C47181 * C47461) *
                  C285 +
              (((C166 * C15921 + C167 * C15917 + (C155 - C154) * C15922 +
                 (C157 - C156) * C47448) *
                    C15919 +
                (C4884 * C15921 + C4885 * C15917 + C645 * C15922 +
                 C646 * C47448) *
                    C47479) *
                   C47181 * C47500 +
               ((C352 * C15921 + C353 * C15917 + C5164 * C15922 +
                 C5165 * C47448) *
                    C15919 +
                (C4886 * C15921 + C4887 * C15917 + (C348 - C349) * C15922 +
                 (C350 - C351) * C47448) *
                    C47479) *
                   C47181 * C47488 +
               ((C354 * C15921 + C355 * C15917 + (C349 - C348) * C15922 +
                 (C351 - C350) * C47448) *
                    C15919 +
                ((C1408 - C1407) * C15921 + (C1410 - C1409) * C15917 +
                 (C47384 * C1399 - C113 * C1398) * C15922 +
                 (C47384 * C1401 - C113 * C1400) * C47448) *
                    C47479) *
                   C47181 * C47461) *
                  C47455)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C47384 * C124 - C113 * C117) * C15921 +
             (C47384 * C138 - C113 * C125) * C15917 + (C146 - C147) * C15922 +
             (C148 - C149) * C47448) *
                C15919 +
            ((C4868 - C4869) * C15921 + (C4870 - C4871) * C15917 +
             C4872 * C15922 + C4873 * C47448) *
                C47479) *
               C47501 +
           (((C113 * C468 - C47384 * C478) * C15921 +
             (C113 * C479 - C47384 * C498) * C15917 + (C509 - C510) * C15922 +
             (C511 - C512) * C47448) *
                C15919 +
            ((C5490 - C5491) * C15921 + (C5492 - C5493) * C15917 +
             C5494 * C15922 + C5495 * C47448) *
                C47479) *
               C47490 +
           (((C47384 * C484 - C113 * C471) * C15921 +
             (C47384 * C501 - C113 * C485) * C15917 + (C517 - C518) * C15922 +
             (C519 - C520) * C47448) *
                C15919 +
            ((C5902 - C5903) * C15921 + (C5904 - C5905) * C15917 +
             C6972 * C15922 + C6973 * C47448) *
                C47479) *
               C47464) *
              C47163 * C284 +
          ((((C147 - C146) * C15921 + (C149 - C148) * C15917 +
             (C151 - C150) * C15922 + (C153 - C152) * C47448) *
                C15919 +
            (C4874 * C15921 + C4875 * C15917 + C352 * C15922 + C353 * C47448) *
                C47479) *
               C47501 +
           (((C510 - C509) * C15921 + (C512 - C511) * C15917 +
             (C514 - C513) * C15922 + (C516 - C515) * C47448) *
                C15919 +
            (C5496 * C15921 + C5497 * C15917 + C939 * C15922 + C940 * C47448) *
                C47479) *
               C47490 +
           (((C518 - C517) * C15921 + (C520 - C519) * C15917 +
             (C522 - C521) * C15922 + (C524 - C523) * C47448) *
                C15919 +
            (C6974 * C15921 + C6975 * C15917 + (C2147 - C2148) * C15922 +
             (C2149 - C2150) * C47448) *
                C47479) *
               C47464) *
              C47163 * C285 +
          (((C166 * C15921 + C167 * C15917 + (C155 - C154) * C15922 +
             (C157 - C156) * C47448) *
                C15919 +
            (C4884 * C15921 + C4885 * C15917 + C645 * C15922 + C646 * C47448) *
                C47479) *
               C47501 +
           ((C533 * C15921 + C534 * C15917 + (C526 - C525) * C15922 +
             (C528 - C527) * C47448) *
                C15919 +
            (C5498 * C15921 + C5499 * C15917 + (C935 - C936) * C15922 +
             (C937 - C938) * C47448) *
                C47479) *
               C47490 +
           ((C535 * C15921 + C536 * C15917 + (C530 - C529) * C15922 +
             (C532 - C531) * C47448) *
                C15919 +
            ((C2148 - C2147) * C15921 + (C2150 - C2149) * C15917 +
             (C47384 * C2139 - C113 * C2138) * C15922 +
             (C47384 * C2141 - C113 * C2140) * C47448) *
                C47479) *
               C47464) *
              C47163 * C47455)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C47384 * C124 - C113 * C117) * C15921 +
             (C47384 * C138 - C113 * C125) * C15917 + (C146 - C147) * C15922 +
             (C148 - C149) * C47448) *
                C15919 +
            ((C4868 - C4869) * C15921 + (C4870 - C4871) * C15917 +
             C4872 * C15922 + C4873 * C47448) *
                C47479) *
               C47181 * C1050 +
           (((C4869 - C4868) * C15921 + (C4871 - C4870) * C15917 +
             C4874 * C15922 + C4875 * C47448) *
                C15919 +
            ((C4876 - C4877) * C15921 + (C4878 - C4879) * C15917 +
             C4880 * C15922 + C4881 * C47448) *
                C47479) *
               C47181 * C1051 +
           (((C4877 - C4876) * C15921 + (C4879 - C4878) * C15917 +
             C4882 * C15922 + C4883 * C47448) *
                C15919 +
            ((C5736 - C5737) * C15921 + (C5738 - C5739) * C15917 +
             C6048 * C15922 + C6049 * C47448) *
                C47479) *
               C47181 * C47461) *
              C47497 +
          ((((C147 - C146) * C15921 + (C149 - C148) * C15917 +
             (C151 - C150) * C15922 + (C153 - C152) * C47448) *
                C15919 +
            (C4874 * C15921 + C4875 * C15917 + C352 * C15922 + C353 * C47448) *
                C47479) *
               C47181 * C1050 +
           ((C4872 * C15921 + C4873 * C15917 + C4884 * C15922 +
             C4885 * C47448) *
                C15919 +
            (C4882 * C15921 + C4883 * C15917 + C354 * C15922 + C355 * C47448) *
                C47479) *
               C47181 * C1051 +
           ((C4880 * C15921 + C4881 * C15917 + C4886 * C15922 +
             C4887 * C47448) *
                C15919 +
            (C6050 * C15921 + C6051 * C15917 + (C1407 - C1408) * C15922 +
             (C1409 - C1410) * C47448) *
                C47479) *
               C47181 * C47461) *
              C47484 +
          (((C166 * C15921 + C167 * C15917 + (C155 - C154) * C15922 +
             (C157 - C156) * C47448) *
                C15919 +
            (C4884 * C15921 + C4885 * C15917 + C645 * C15922 + C646 * C47448) *
                C47479) *
               C47181 * C1050 +
           ((C352 * C15921 + C353 * C15917 + C5164 * C15922 + C5165 * C47448) *
                C15919 +
            (C4886 * C15921 + C4887 * C15917 + (C348 - C349) * C15922 +
             (C350 - C351) * C47448) *
                C47479) *
               C47181 * C1051 +
           ((C354 * C15921 + C355 * C15917 + (C349 - C348) * C15922 +
             (C351 - C350) * C47448) *
                C15919 +
            ((C1408 - C1407) * C15921 + (C1410 - C1409) * C15917 +
             (C47384 * C1399 - C113 * C1398) * C15922 +
             (C47384 * C1401 - C113 * C1400) * C47448) *
                C47479) *
               C47181 * C47461) *
              C47455)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C47384 * C124 - C113 * C117) * C15921 +
            (C47384 * C138 - C113 * C125) * C15917 + (C146 - C147) * C15922 +
            (C148 - C149) * C47448) *
               C15919 +
           ((C4868 - C4869) * C15921 + (C4870 - C4871) * C15917 +
            C4872 * C15922 + C4873 * C47448) *
               C47479) *
              C47181 * C1118 +
          (((C4869 - C4868) * C15921 + (C4871 - C4870) * C15917 +
            C4874 * C15922 + C4875 * C47448) *
               C15919 +
           ((C4876 - C4877) * C15921 + (C4878 - C4879) * C15917 +
            C4880 * C15922 + C4881 * C47448) *
               C47479) *
              C47181 * C1119 +
          (((C4877 - C4876) * C15921 + (C4879 - C4878) * C15917 +
            C4882 * C15922 + C4883 * C47448) *
               C15919 +
           ((C5736 - C5737) * C15921 + (C5738 - C5739) * C15917 +
            C6048 * C15922 + C6049 * C47448) *
               C47479) *
              C47181 * C1120 +
          (((C5737 - C5736) * C15921 + (C5739 - C5738) * C15917 +
            C6050 * C15922 + C6051 * C47448) *
               C15919 +
           ((C5740 - C5741) * C15921 + (C5742 - C5743) * C15917 +
            (C5744 - C5745) * C15922 + (C5746 - C5747) * C47448) *
               C47479) *
              C47181 * C1121 +
          (((C5741 - C5740) * C15921 + (C5743 - C5742) * C15917 +
            (C5745 - C5744) * C15922 + (C5747 - C5746) * C47448) *
               C15919 +
           ((C47384 * C5729 - C113 * C5727) * C15921 +
            (C47384 * C5733 - C113 * C5730) * C15917 +
            (C47384 * C5731 - C113 * C5728) * C15922 +
            (C47384 * C5734 - C113 * C5732) * C47448) *
               C47479) *
              C47181 * C1122) *
         C47135) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C47384 * C124 - C113 * C117) * C15921 +
             (C47384 * C138 - C113 * C125) * C15917 + (C146 - C147) * C15922 +
             (C148 - C149) * C47448) *
                C15919 +
            ((C4868 - C4869) * C15921 + (C4870 - C4871) * C15917 +
             C4872 * C15922 + C4873 * C47448) *
                C47479) *
               C47501 +
           (((C113 * C468 - C47384 * C478) * C15921 +
             (C113 * C479 - C47384 * C498) * C15917 + (C509 - C510) * C15922 +
             (C511 - C512) * C47448) *
                C15919 +
            ((C5490 - C5491) * C15921 + (C5492 - C5493) * C15917 +
             C5494 * C15922 + C5495 * C47448) *
                C47479) *
               C47490 +
           (((C47384 * C484 - C113 * C471) * C15921 +
             (C47384 * C501 - C113 * C485) * C15917 + (C517 - C518) * C15922 +
             (C519 - C520) * C47448) *
                C15919 +
            ((C5902 - C5903) * C15921 + (C5904 - C5905) * C15917 +
             C6972 * C15922 + C6973 * C47448) *
                C47479) *
               C47464) *
              C1050 +
          ((((C4869 - C4868) * C15921 + (C4871 - C4870) * C15917 +
             C4874 * C15922 + C4875 * C47448) *
                C15919 +
            ((C4876 - C4877) * C15921 + (C4878 - C4879) * C15917 +
             C4880 * C15922 + C4881 * C47448) *
                C47479) *
               C47501 +
           (((C5491 - C5490) * C15921 + (C5493 - C5492) * C15917 +
             C5496 * C15922 + C5497 * C47448) *
                C15919 +
            ((C5906 - C5907) * C15921 + (C5908 - C5909) * C15917 +
             C6246 * C15922 + C6247 * C47448) *
                C47479) *
               C47490 +
           (((C5903 - C5902) * C15921 + (C5905 - C5904) * C15917 +
             C6974 * C15922 + C6975 * C47448) *
                C15919 +
            ((C5910 - C5911) * C15921 + (C5912 - C5913) * C15917 +
             (C5914 - C5915) * C15922 + (C5916 - C5917) * C47448) *
                C47479) *
               C47464) *
              C1051 +
          ((((C4877 - C4876) * C15921 + (C4879 - C4878) * C15917 +
             C4882 * C15922 + C4883 * C47448) *
                C15919 +
            ((C5736 - C5737) * C15921 + (C5738 - C5739) * C15917 +
             C6048 * C15922 + C6049 * C47448) *
                C47479) *
               C47501 +
           (((C5907 - C5906) * C15921 + (C5909 - C5908) * C15917 +
             C6248 * C15922 + C6249 * C47448) *
                C15919 +
            ((C6392 - C6393) * C15921 + (C6394 - C6395) * C15917 +
             (C6250 - C6251) * C15922 + (C6252 - C6253) * C47448) *
                C47479) *
               C47490 +
           (((C5911 - C5910) * C15921 + (C5913 - C5912) * C15917 +
             (C5915 - C5914) * C15922 + (C5917 - C5916) * C47448) *
                C15919 +
            ((C47384 * C5895 - C113 * C5893) * C15921 +
             (C47384 * C5899 - C113 * C5896) * C15917 +
             (C47384 * C5897 - C113 * C5894) * C15922 +
             (C47384 * C5900 - C113 * C5898) * C47448) *
                C47479) *
               C47464) *
              C47461) *
         C47135) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C47384 * C124 - C113 * C117) * C15921 +
             (C47384 * C138 - C113 * C125) * C15917 + (C146 - C147) * C15922 +
             (C148 - C149) * C47448) *
                C15919 +
            ((C4868 - C4869) * C15921 + (C4870 - C4871) * C15917 +
             C4872 * C15922 + C4873 * C47448) *
                C47479) *
               C1788 +
           (((C113 * C468 - C47384 * C478) * C15921 +
             (C113 * C479 - C47384 * C498) * C15917 + (C509 - C510) * C15922 +
             (C511 - C512) * C47448) *
                C15919 +
            ((C5490 - C5491) * C15921 + (C5492 - C5493) * C15917 +
             C5494 * C15922 + C5495 * C47448) *
                C47479) *
               C1789 +
           (((C47384 * C484 - C113 * C471) * C15921 +
             (C47384 * C501 - C113 * C485) * C15917 + (C517 - C518) * C15922 +
             (C519 - C520) * C47448) *
                C15919 +
            ((C5902 - C5903) * C15921 + (C5904 - C5905) * C15917 +
             C6972 * C15922 + C6973 * C47448) *
                C47479) *
               C47464) *
              C47163 * C47497 +
          ((((C147 - C146) * C15921 + (C149 - C148) * C15917 +
             (C151 - C150) * C15922 + (C153 - C152) * C47448) *
                C15919 +
            (C4874 * C15921 + C4875 * C15917 + C352 * C15922 + C353 * C47448) *
                C47479) *
               C1788 +
           (((C510 - C509) * C15921 + (C512 - C511) * C15917 +
             (C514 - C513) * C15922 + (C516 - C515) * C47448) *
                C15919 +
            (C5496 * C15921 + C5497 * C15917 + C939 * C15922 + C940 * C47448) *
                C47479) *
               C1789 +
           (((C518 - C517) * C15921 + (C520 - C519) * C15917 +
             (C522 - C521) * C15922 + (C524 - C523) * C47448) *
                C15919 +
            (C6974 * C15921 + C6975 * C15917 + (C2147 - C2148) * C15922 +
             (C2149 - C2150) * C47448) *
                C47479) *
               C47464) *
              C47163 * C47484 +
          (((C166 * C15921 + C167 * C15917 + (C155 - C154) * C15922 +
             (C157 - C156) * C47448) *
                C15919 +
            (C4884 * C15921 + C4885 * C15917 + C645 * C15922 + C646 * C47448) *
                C47479) *
               C1788 +
           ((C533 * C15921 + C534 * C15917 + (C526 - C525) * C15922 +
             (C528 - C527) * C47448) *
                C15919 +
            (C5498 * C15921 + C5499 * C15917 + (C935 - C936) * C15922 +
             (C937 - C938) * C47448) *
                C47479) *
               C1789 +
           ((C535 * C15921 + C536 * C15917 + (C530 - C529) * C15922 +
             (C532 - C531) * C47448) *
                C15919 +
            ((C2148 - C2147) * C15921 + (C2150 - C2149) * C15917 +
             (C47384 * C2139 - C113 * C2138) * C15922 +
             (C47384 * C2141 - C113 * C2140) * C47448) *
                C47479) *
               C47464) *
              C47163 * C47455)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C47384 * C124 - C113 * C117) * C15921 +
             (C47384 * C138 - C113 * C125) * C15917 + (C146 - C147) * C15922 +
             (C148 - C149) * C47448) *
                C15919 +
            ((C4868 - C4869) * C15921 + (C4870 - C4871) * C15917 +
             C4872 * C15922 + C4873 * C47448) *
                C47479) *
               C1788 +
           (((C113 * C468 - C47384 * C478) * C15921 +
             (C113 * C479 - C47384 * C498) * C15917 + (C509 - C510) * C15922 +
             (C511 - C512) * C47448) *
                C15919 +
            ((C5490 - C5491) * C15921 + (C5492 - C5493) * C15917 +
             C5494 * C15922 + C5495 * C47448) *
                C47479) *
               C1789 +
           (((C47384 * C484 - C113 * C471) * C15921 +
             (C47384 * C501 - C113 * C485) * C15917 + (C517 - C518) * C15922 +
             (C519 - C520) * C47448) *
                C15919 +
            ((C5902 - C5903) * C15921 + (C5904 - C5905) * C15917 +
             C6972 * C15922 + C6973 * C47448) *
                C47479) *
               C47464) *
              C47500 +
          ((((C4869 - C4868) * C15921 + (C4871 - C4870) * C15917 +
             C4874 * C15922 + C4875 * C47448) *
                C15919 +
            ((C4876 - C4877) * C15921 + (C4878 - C4879) * C15917 +
             C4880 * C15922 + C4881 * C47448) *
                C47479) *
               C1788 +
           (((C5491 - C5490) * C15921 + (C5493 - C5492) * C15917 +
             C5496 * C15922 + C5497 * C47448) *
                C15919 +
            ((C5906 - C5907) * C15921 + (C5908 - C5909) * C15917 +
             C6246 * C15922 + C6247 * C47448) *
                C47479) *
               C1789 +
           (((C5903 - C5902) * C15921 + (C5905 - C5904) * C15917 +
             C6974 * C15922 + C6975 * C47448) *
                C15919 +
            ((C5910 - C5911) * C15921 + (C5912 - C5913) * C15917 +
             (C5914 - C5915) * C15922 + (C5916 - C5917) * C47448) *
                C47479) *
               C47464) *
              C47488 +
          ((((C4877 - C4876) * C15921 + (C4879 - C4878) * C15917 +
             C4882 * C15922 + C4883 * C47448) *
                C15919 +
            ((C5736 - C5737) * C15921 + (C5738 - C5739) * C15917 +
             C6048 * C15922 + C6049 * C47448) *
                C47479) *
               C1788 +
           (((C5907 - C5906) * C15921 + (C5909 - C5908) * C15917 +
             C6248 * C15922 + C6249 * C47448) *
                C15919 +
            ((C6392 - C6393) * C15921 + (C6394 - C6395) * C15917 +
             (C6250 - C6251) * C15922 + (C6252 - C6253) * C47448) *
                C47479) *
               C1789 +
           (((C5911 - C5910) * C15921 + (C5913 - C5912) * C15917 +
             (C5915 - C5914) * C15922 + (C5917 - C5916) * C47448) *
                C15919 +
            ((C47384 * C5895 - C113 * C5893) * C15921 +
             (C47384 * C5899 - C113 * C5896) * C15917 +
             (C47384 * C5897 - C113 * C5894) * C15922 +
             (C47384 * C5900 - C113 * C5898) * C47448) *
                C47479) *
               C47464) *
              C47461) *
         C47135) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C47384 * C124 - C113 * C117) * C15921 +
            (C47384 * C138 - C113 * C125) * C15917 + (C146 - C147) * C15922 +
            (C148 - C149) * C47448) *
               C15919 +
           ((C4868 - C4869) * C15921 + (C4870 - C4871) * C15917 +
            C4872 * C15922 + C4873 * C47448) *
               C47479) *
              C1963 +
          (((C113 * C468 - C47384 * C478) * C15921 +
            (C113 * C479 - C47384 * C498) * C15917 + (C509 - C510) * C15922 +
            (C511 - C512) * C47448) *
               C15919 +
           ((C5490 - C5491) * C15921 + (C5492 - C5493) * C15917 +
            C5494 * C15922 + C5495 * C47448) *
               C47479) *
              C1964 +
          (((C47384 * C484 - C113 * C471) * C15921 +
            (C47384 * C501 - C113 * C485) * C15917 + (C517 - C518) * C15922 +
            (C519 - C520) * C47448) *
               C15919 +
           ((C5902 - C5903) * C15921 + (C5904 - C5905) * C15917 +
            C6972 * C15922 + C6973 * C47448) *
               C47479) *
              C1965 +
          (((C113 * C1968 - C47384 * C1974) * C15921 +
            (C113 * C1975 - C47384 * C1986) * C15917 +
            (C2257 - C2258) * C15922 + (C2259 - C2260) * C47448) *
               C15919 +
           ((C7248 - C7249) * C15921 + (C7250 - C7251) * C15917 +
            (C7106 - C7107) * C15922 + (C7108 - C7109) * C47448) *
               C47479) *
              C1966 +
          (((C47384 * C1980 - C113 * C1971) * C15921 +
            (C47384 * C1989 - C113 * C1981) * C15917 +
            (C47384 * C1982 - C113 * C1972) * C15922 +
            (C47384 * C1990 - C113 * C1983) * C47448) *
               C15919 +
           ((C47384 * C6771 - C113 * C6769) * C15921 +
            (C47384 * C6775 - C113 * C6772) * C15917 +
            (C47384 * C6773 - C113 * C6770) * C15922 +
            (C47384 * C6776 - C113 * C6774) * C47448) *
               C47479) *
              C1967) *
         C47163 * C47135) /
            (p * q * std::sqrt(p + q));
    d2ee[88] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C47384 * C124 - C113 * C117) * C15921 +
              (C47384 * C138 - C113 * C125) * C15917 + (C146 - C147) * C15922 +
              (C148 - C149) * C47448) *
                 C15919 +
             ((C4868 - C4869) * C15921 + (C4870 - C4871) * C15917 +
              C4872 * C15922 + C4873 * C47448) *
                 C47479) *
                C47430 +
            (((C113 * C468 - C47384 * C478) * C15921 +
              (C113 * C479 - C47384 * C498) * C15917 + (C509 - C510) * C15922 +
              (C511 - C512) * C47448) *
                 C15919 +
             ((C5490 - C5491) * C15921 + (C5492 - C5493) * C15917 +
              C5494 * C15922 + C5495 * C47448) *
                 C47479) *
                C47268) *
               C1050 +
           ((((C4869 - C4868) * C15921 + (C4871 - C4870) * C15917 +
              C4874 * C15922 + C4875 * C47448) *
                 C15919 +
             ((C4876 - C4877) * C15921 + (C4878 - C4879) * C15917 +
              C4880 * C15922 + C4881 * C47448) *
                 C47479) *
                C47430 +
            (((C5491 - C5490) * C15921 + (C5493 - C5492) * C15917 +
              C5496 * C15922 + C5497 * C47448) *
                 C15919 +
             ((C5906 - C5907) * C15921 + (C5908 - C5909) * C15917 +
              C6246 * C15922 + C6247 * C47448) *
                 C47479) *
                C47268) *
               C1051 +
           ((((C4877 - C4876) * C15921 + (C4879 - C4878) * C15917 +
              C4882 * C15922 + C4883 * C47448) *
                 C15919 +
             ((C5736 - C5737) * C15921 + (C5738 - C5739) * C15917 +
              C6048 * C15922 + C6049 * C47448) *
                 C47479) *
                C47430 +
            (((C5907 - C5906) * C15921 + (C5909 - C5908) * C15917 +
              C6248 * C15922 + C6249 * C47448) *
                 C15919 +
             ((C6392 - C6393) * C15921 + (C6394 - C6395) * C15917 +
              (C6250 - C6251) * C15922 + (C6252 - C6253) * C47448) *
                 C47479) *
                C47268) *
               C47461) *
              C47415 +
          (((((C147 - C146) * C15921 + (C149 - C148) * C15917 +
              (C151 - C150) * C15922 + (C153 - C152) * C47448) *
                 C15919 +
             (C4874 * C15921 + C4875 * C15917 + C352 * C15922 + C353 * C47448) *
                 C47479) *
                C47430 +
            (((C510 - C509) * C15921 + (C512 - C511) * C15917 +
              (C514 - C513) * C15922 + (C516 - C515) * C47448) *
                 C15919 +
             (C5496 * C15921 + C5497 * C15917 + C939 * C15922 + C940 * C47448) *
                 C47479) *
                C47268) *
               C1050 +
           (((C4872 * C15921 + C4873 * C15917 + C4884 * C15922 +
              C4885 * C47448) *
                 C15919 +
             (C4882 * C15921 + C4883 * C15917 + C354 * C15922 + C355 * C47448) *
                 C47479) *
                C47430 +
            ((C5494 * C15921 + C5495 * C15917 + C5498 * C15922 +
              C5499 * C47448) *
                 C15919 +
             (C6248 * C15921 + C6249 * C15917 + (C1565 - C1566) * C15922 +
              (C1567 - C1568) * C47448) *
                 C47479) *
                C47268) *
               C1051 +
           (((C4880 * C15921 + C4881 * C15917 + C4886 * C15922 +
              C4887 * C47448) *
                 C15919 +
             (C6050 * C15921 + C6051 * C15917 + (C1407 - C1408) * C15922 +
              (C1409 - C1410) * C47448) *
                 C47479) *
                C47430 +
            ((C6246 * C15921 + C6247 * C15917 + (C1566 - C1565) * C15922 +
              (C1568 - C1567) * C47448) *
                 C15919 +
             ((C6251 - C6250) * C15921 + (C6253 - C6252) * C15917 +
              (C47384 * C1673 - C113 * C1668) * C15922 +
              (C47384 * C1677 - C113 * C1674) * C47448) *
                 C47479) *
                C47268) *
               C47461) *
              C47146)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C47384 * C124 - C113 * C117) * C15921 +
             (C47384 * C138 - C113 * C125) * C15917 + (C146 - C147) * C15922 +
             (C148 - C149) * C47448) *
                C15919 +
            ((C4868 - C4869) * C15921 + (C4870 - C4871) * C15917 +
             C4872 * C15922 + C4873 * C47448) *
                C47479) *
               C47430 +
           (((C113 * C468 - C47384 * C478) * C15921 +
             (C113 * C479 - C47384 * C498) * C15917 + (C509 - C510) * C15922 +
             (C511 - C512) * C47448) *
                C15919 +
            ((C5490 - C5491) * C15921 + (C5492 - C5493) * C15917 +
             C5494 * C15922 + C5495 * C47448) *
                C47479) *
               C47268) *
              C47163 * C636 +
          ((((C147 - C146) * C15921 + (C149 - C148) * C15917 +
             (C151 - C150) * C15922 + (C153 - C152) * C47448) *
                C15919 +
            (C4874 * C15921 + C4875 * C15917 + C352 * C15922 + C353 * C47448) *
                C47479) *
               C47430 +
           (((C510 - C509) * C15921 + (C512 - C511) * C15917 +
             (C514 - C513) * C15922 + (C516 - C515) * C47448) *
                C15919 +
            (C5496 * C15921 + C5497 * C15917 + C939 * C15922 + C940 * C47448) *
                C47479) *
               C47268) *
              C47163 * C637 +
          (((C166 * C15921 + C167 * C15917 + (C155 - C154) * C15922 +
             (C157 - C156) * C47448) *
                C15919 +
            (C4884 * C15921 + C4885 * C15917 + C645 * C15922 + C646 * C47448) *
                C47479) *
               C47430 +
           ((C533 * C15921 + C534 * C15917 + (C526 - C525) * C15922 +
             (C528 - C527) * C47448) *
                C15919 +
            (C5498 * C15921 + C5499 * C15917 + (C935 - C936) * C15922 +
             (C937 - C938) * C47448) *
                C47479) *
               C47268) *
              C47163 * C638 +
          (((C168 * C15921 + C169 * C15917 + (C159 - C158) * C15922 +
             (C161 - C160) * C47448) *
                C15919 +
            (C5164 * C15921 + C5165 * C15917 + (C647 - C648) * C15922 +
             (C649 - C650) * C47448) *
                C47479) *
               C47430 +
           ((C755 * C15921 + C756 * C15917 + (C758 - C757) * C15922 +
             (C760 - C759) * C47448) *
                C15919 +
            ((C936 - C935) * C15921 + (C938 - C937) * C15917 +
             (C47384 * C919 - C113 * C910) * C15922 +
             (C47384 * C925 - C113 * C920) * C47448) *
                C47479) *
               C47268) *
              C47163 * C47465)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C47384 * C124 - C113 * C117) * C15921 +
             (C47384 * C138 - C113 * C125) * C15917 + (C146 - C147) * C15922 +
             (C148 - C149) * C47448) *
                C15919 +
            ((C4868 - C4869) * C15921 + (C4870 - C4871) * C15917 +
             C4872 * C15922 + C4873 * C47448) *
                C47479) *
               C2248 +
           (((C113 * C468 - C47384 * C478) * C15921 +
             (C113 * C479 - C47384 * C498) * C15917 + (C509 - C510) * C15922 +
             (C511 - C512) * C47448) *
                C15919 +
            ((C5490 - C5491) * C15921 + (C5492 - C5493) * C15917 +
             C5494 * C15922 + C5495 * C47448) *
                C47479) *
               C2249 +
           (((C47384 * C484 - C113 * C471) * C15921 +
             (C47384 * C501 - C113 * C485) * C15917 + (C517 - C518) * C15922 +
             (C519 - C520) * C47448) *
                C15919 +
            ((C5902 - C5903) * C15921 + (C5904 - C5905) * C15917 +
             C6972 * C15922 + C6973 * C47448) *
                C47479) *
               C2250 +
           (((C113 * C1968 - C47384 * C1974) * C15921 +
             (C113 * C1975 - C47384 * C1986) * C15917 +
             (C2257 - C2258) * C15922 + (C2259 - C2260) * C47448) *
                C15919 +
            ((C7248 - C7249) * C15921 + (C7250 - C7251) * C15917 +
             (C7106 - C7107) * C15922 + (C7108 - C7109) * C47448) *
                C47479) *
               C47477) *
              C47163 * C47415 +
          ((((C147 - C146) * C15921 + (C149 - C148) * C15917 +
             (C151 - C150) * C15922 + (C153 - C152) * C47448) *
                C15919 +
            (C4874 * C15921 + C4875 * C15917 + C352 * C15922 + C353 * C47448) *
                C47479) *
               C2248 +
           (((C510 - C509) * C15921 + (C512 - C511) * C15917 +
             (C514 - C513) * C15922 + (C516 - C515) * C47448) *
                C15919 +
            (C5496 * C15921 + C5497 * C15917 + C939 * C15922 + C940 * C47448) *
                C47479) *
               C2249 +
           (((C518 - C517) * C15921 + (C520 - C519) * C15917 +
             (C522 - C521) * C15922 + (C524 - C523) * C47448) *
                C15919 +
            (C6974 * C15921 + C6975 * C15917 + (C2147 - C2148) * C15922 +
             (C2149 - C2150) * C47448) *
                C47479) *
               C2250 +
           (((C2258 - C2257) * C15921 + (C2260 - C2259) * C15917 +
             (C2262 - C2261) * C15922 + (C2264 - C2263) * C47448) *
                C15919 +
            ((C7107 - C7106) * C15921 + (C7109 - C7108) * C15917 +
             (C47384 * C2369 - C113 * C2364) * C15922 +
             (C47384 * C2373 - C113 * C2370) * C47448) *
                C47479) *
               C47477) *
              C47163 * C47146)) /
            (p * q * std::sqrt(p + q));
    d2ee[89] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C47384 * C124 - C113 * C117) * C15921 +
             (C47384 * C138 - C113 * C125) * C15917 + (C146 - C147) * C15922 +
             (C148 - C149) * C47448) *
                C15919 +
            ((C4868 - C4869) * C15921 + (C4870 - C4871) * C15917 +
             C4872 * C15922 + C4873 * C47448) *
                C47479) *
               C47181 * C47500 +
           (((C4869 - C4868) * C15921 + (C4871 - C4870) * C15917 +
             C4874 * C15922 + C4875 * C47448) *
                C15919 +
            ((C4876 - C4877) * C15921 + (C4878 - C4879) * C15917 +
             C4880 * C15922 + C4881 * C47448) *
                C47479) *
               C47181 * C47488 +
           (((C4877 - C4876) * C15921 + (C4879 - C4878) * C15917 +
             C4882 * C15922 + C4883 * C47448) *
                C15919 +
            ((C5736 - C5737) * C15921 + (C5738 - C5739) * C15917 +
             C6048 * C15922 + C6049 * C47448) *
                C47479) *
               C47181 * C47461) *
              C284 +
          ((((C147 - C146) * C15921 + (C149 - C148) * C15917 +
             (C151 - C150) * C15922 + (C153 - C152) * C47448) *
                C15919 +
            (C4874 * C15921 + C4875 * C15917 + C352 * C15922 + C353 * C47448) *
                C47479) *
               C47181 * C47500 +
           ((C4872 * C15921 + C4873 * C15917 + C4884 * C15922 +
             C4885 * C47448) *
                C15919 +
            (C4882 * C15921 + C4883 * C15917 + C354 * C15922 + C355 * C47448) *
                C47479) *
               C47181 * C47488 +
           ((C4880 * C15921 + C4881 * C15917 + C4886 * C15922 +
             C4887 * C47448) *
                C15919 +
            (C6050 * C15921 + C6051 * C15917 + (C1407 - C1408) * C15922 +
             (C1409 - C1410) * C47448) *
                C47479) *
               C47181 * C47461) *
              C285 +
          (((C166 * C15921 + C167 * C15917 + (C155 - C154) * C15922 +
             (C157 - C156) * C47448) *
                C15919 +
            (C4884 * C15921 + C4885 * C15917 + C645 * C15922 + C646 * C47448) *
                C47479) *
               C47181 * C47500 +
           ((C352 * C15921 + C353 * C15917 + C5164 * C15922 + C5165 * C47448) *
                C15919 +
            (C4886 * C15921 + C4887 * C15917 + (C348 - C349) * C15922 +
             (C350 - C351) * C47448) *
                C47479) *
               C47181 * C47488 +
           ((C354 * C15921 + C355 * C15917 + (C349 - C348) * C15922 +
             (C351 - C350) * C47448) *
                C15919 +
            ((C1408 - C1407) * C15921 + (C1410 - C1409) * C15917 +
             (C47384 * C1399 - C113 * C1398) * C15922 +
             (C47384 * C1401 - C113 * C1400) * C47448) *
                C47479) *
               C47181 * C47461) *
              C47455)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C47384 * C124 - C113 * C117) * C15921 +
            (C47384 * C138 - C113 * C125) * C15917 + (C146 - C147) * C15922 +
            (C148 - C149) * C47448) *
               C15919 +
           ((C4868 - C4869) * C15921 + (C4870 - C4871) * C15917 +
            C4872 * C15922 + C4873 * C47448) *
               C47479) *
              C47181 * C47163 * C108 +
          (((C147 - C146) * C15921 + (C149 - C148) * C15917 +
            (C151 - C150) * C15922 + (C153 - C152) * C47448) *
               C15919 +
           (C4874 * C15921 + C4875 * C15917 + C352 * C15922 + C353 * C47448) *
               C47479) *
              C47181 * C47163 * C109 +
          ((C166 * C15921 + C167 * C15917 + (C155 - C154) * C15922 +
            (C157 - C156) * C47448) *
               C15919 +
           (C4884 * C15921 + C4885 * C15917 + C645 * C15922 + C646 * C47448) *
               C47479) *
              C47181 * C47163 * C110 +
          ((C168 * C15921 + C169 * C15917 + (C159 - C158) * C15922 +
            (C161 - C160) * C47448) *
               C15919 +
           (C5164 * C15921 + C5165 * C15917 + (C647 - C648) * C15922 +
            (C649 - C650) * C47448) *
               C47479) *
              C47181 * C47163 * C111 +
          ((C170 * C15921 + C171 * C15917 + (C163 - C162) * C15922 +
            (C165 - C164) * C47448) *
               C15919 +
           ((C648 - C647) * C15921 + (C650 - C649) * C15917 +
            (C47384 * C641 - C113 * C640) * C15922 +
            (C47384 * C643 - C113 * C642) * C47448) *
               C47479) *
              C47181 * C47163 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C47384 * C124 - C113 * C117) * C15921 +
             (C47384 * C138 - C113 * C125) * C15917 + (C146 - C147) * C15922 +
             (C148 - C149) * C47448) *
                C15919 +
            ((C4868 - C4869) * C15921 + (C4870 - C4871) * C15917 +
             C4872 * C15922 + C4873 * C47448) *
                C47479) *
               C47181 * C1050 +
           (((C4869 - C4868) * C15921 + (C4871 - C4870) * C15917 +
             C4874 * C15922 + C4875 * C47448) *
                C15919 +
            ((C4876 - C4877) * C15921 + (C4878 - C4879) * C15917 +
             C4880 * C15922 + C4881 * C47448) *
                C47479) *
               C47181 * C1051 +
           (((C4877 - C4876) * C15921 + (C4879 - C4878) * C15917 +
             C4882 * C15922 + C4883 * C47448) *
                C15919 +
            ((C5736 - C5737) * C15921 + (C5738 - C5739) * C15917 +
             C6048 * C15922 + C6049 * C47448) *
                C47479) *
               C47181 * C47461) *
              C47497 +
          ((((C147 - C146) * C15921 + (C149 - C148) * C15917 +
             (C151 - C150) * C15922 + (C153 - C152) * C47448) *
                C15919 +
            (C4874 * C15921 + C4875 * C15917 + C352 * C15922 + C353 * C47448) *
                C47479) *
               C47181 * C1050 +
           ((C4872 * C15921 + C4873 * C15917 + C4884 * C15922 +
             C4885 * C47448) *
                C15919 +
            (C4882 * C15921 + C4883 * C15917 + C354 * C15922 + C355 * C47448) *
                C47479) *
               C47181 * C1051 +
           ((C4880 * C15921 + C4881 * C15917 + C4886 * C15922 +
             C4887 * C47448) *
                C15919 +
            (C6050 * C15921 + C6051 * C15917 + (C1407 - C1408) * C15922 +
             (C1409 - C1410) * C47448) *
                C47479) *
               C47181 * C47461) *
              C47484 +
          (((C166 * C15921 + C167 * C15917 + (C155 - C154) * C15922 +
             (C157 - C156) * C47448) *
                C15919 +
            (C4884 * C15921 + C4885 * C15917 + C645 * C15922 + C646 * C47448) *
                C47479) *
               C47181 * C1050 +
           ((C352 * C15921 + C353 * C15917 + C5164 * C15922 + C5165 * C47448) *
                C15919 +
            (C4886 * C15921 + C4887 * C15917 + (C348 - C349) * C15922 +
             (C350 - C351) * C47448) *
                C47479) *
               C47181 * C1051 +
           ((C354 * C15921 + C355 * C15917 + (C349 - C348) * C15922 +
             (C351 - C350) * C47448) *
                C15919 +
            ((C1408 - C1407) * C15921 + (C1410 - C1409) * C15917 +
             (C47384 * C1399 - C113 * C1398) * C15922 +
             (C47384 * C1401 - C113 * C1400) * C47448) *
                C47479) *
               C47181 * C47461) *
              C47455)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C47384 * C124 - C113 * C117) * C15921 +
            (C47384 * C138 - C113 * C125) * C15917 + (C146 - C147) * C15922 +
            (C148 - C149) * C47448) *
               C15919 +
           ((C4868 - C4869) * C15921 + (C4870 - C4871) * C15917 +
            C4872 * C15922 + C4873 * C47448) *
               C47479) *
              C47181 * C1118 +
          (((C4869 - C4868) * C15921 + (C4871 - C4870) * C15917 +
            C4874 * C15922 + C4875 * C47448) *
               C15919 +
           ((C4876 - C4877) * C15921 + (C4878 - C4879) * C15917 +
            C4880 * C15922 + C4881 * C47448) *
               C47479) *
              C47181 * C1119 +
          (((C4877 - C4876) * C15921 + (C4879 - C4878) * C15917 +
            C4882 * C15922 + C4883 * C47448) *
               C15919 +
           ((C5736 - C5737) * C15921 + (C5738 - C5739) * C15917 +
            C6048 * C15922 + C6049 * C47448) *
               C47479) *
              C47181 * C1120 +
          (((C5737 - C5736) * C15921 + (C5739 - C5738) * C15917 +
            C6050 * C15922 + C6051 * C47448) *
               C15919 +
           ((C5740 - C5741) * C15921 + (C5742 - C5743) * C15917 +
            (C5744 - C5745) * C15922 + (C5746 - C5747) * C47448) *
               C47479) *
              C47181 * C1121 +
          (((C5741 - C5740) * C15921 + (C5743 - C5742) * C15917 +
            (C5745 - C5744) * C15922 + (C5747 - C5746) * C47448) *
               C15919 +
           ((C47384 * C5729 - C113 * C5727) * C15921 +
            (C47384 * C5733 - C113 * C5730) * C15917 +
            (C47384 * C5731 - C113 * C5728) * C15922 +
            (C47384 * C5734 - C113 * C5732) * C47448) *
               C47479) *
              C47181 * C1122) *
         C47135) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C47384 * C124 - C113 * C117) * C15921 +
             (C47384 * C138 - C113 * C125) * C15917 + (C146 - C147) * C15922 +
             (C148 - C149) * C47448) *
                C15919 +
            ((C4868 - C4869) * C15921 + (C4870 - C4871) * C15917 +
             C4872 * C15922 + C4873 * C47448) *
                C47479) *
               C1788 +
           (((C113 * C468 - C47384 * C478) * C15921 +
             (C113 * C479 - C47384 * C498) * C15917 + (C509 - C510) * C15922 +
             (C511 - C512) * C47448) *
                C15919 +
            ((C5490 - C5491) * C15921 + (C5492 - C5493) * C15917 +
             C5494 * C15922 + C5495 * C47448) *
                C47479) *
               C1789 +
           (((C47384 * C484 - C113 * C471) * C15921 +
             (C47384 * C501 - C113 * C485) * C15917 + (C517 - C518) * C15922 +
             (C519 - C520) * C47448) *
                C15919 +
            ((C5902 - C5903) * C15921 + (C5904 - C5905) * C15917 +
             C6972 * C15922 + C6973 * C47448) *
                C47479) *
               C47464) *
              C47163 * C47497 +
          ((((C147 - C146) * C15921 + (C149 - C148) * C15917 +
             (C151 - C150) * C15922 + (C153 - C152) * C47448) *
                C15919 +
            (C4874 * C15921 + C4875 * C15917 + C352 * C15922 + C353 * C47448) *
                C47479) *
               C1788 +
           (((C510 - C509) * C15921 + (C512 - C511) * C15917 +
             (C514 - C513) * C15922 + (C516 - C515) * C47448) *
                C15919 +
            (C5496 * C15921 + C5497 * C15917 + C939 * C15922 + C940 * C47448) *
                C47479) *
               C1789 +
           (((C518 - C517) * C15921 + (C520 - C519) * C15917 +
             (C522 - C521) * C15922 + (C524 - C523) * C47448) *
                C15919 +
            (C6974 * C15921 + C6975 * C15917 + (C2147 - C2148) * C15922 +
             (C2149 - C2150) * C47448) *
                C47479) *
               C47464) *
              C47163 * C47484 +
          (((C166 * C15921 + C167 * C15917 + (C155 - C154) * C15922 +
             (C157 - C156) * C47448) *
                C15919 +
            (C4884 * C15921 + C4885 * C15917 + C645 * C15922 + C646 * C47448) *
                C47479) *
               C1788 +
           ((C533 * C15921 + C534 * C15917 + (C526 - C525) * C15922 +
             (C528 - C527) * C47448) *
                C15919 +
            (C5498 * C15921 + C5499 * C15917 + (C935 - C936) * C15922 +
             (C937 - C938) * C47448) *
                C47479) *
               C1789 +
           ((C535 * C15921 + C536 * C15917 + (C530 - C529) * C15922 +
             (C532 - C531) * C47448) *
                C15919 +
            ((C2148 - C2147) * C15921 + (C2150 - C2149) * C15917 +
             (C47384 * C2139 - C113 * C2138) * C15922 +
             (C47384 * C2141 - C113 * C2140) * C47448) *
                C47479) *
               C47464) *
              C47163 * C47455)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C47384 * C124 - C113 * C117) * C15921 +
             (C47384 * C138 - C113 * C125) * C15917 + (C146 - C147) * C15922 +
             (C148 - C149) * C47448) *
                C15919 +
            ((C4868 - C4869) * C15921 + (C4870 - C4871) * C15917 +
             C4872 * C15922 + C4873 * C47448) *
                C47479) *
               C1788 +
           (((C113 * C468 - C47384 * C478) * C15921 +
             (C113 * C479 - C47384 * C498) * C15917 + (C509 - C510) * C15922 +
             (C511 - C512) * C47448) *
                C15919 +
            ((C5490 - C5491) * C15921 + (C5492 - C5493) * C15917 +
             C5494 * C15922 + C5495 * C47448) *
                C47479) *
               C1789 +
           (((C47384 * C484 - C113 * C471) * C15921 +
             (C47384 * C501 - C113 * C485) * C15917 + (C517 - C518) * C15922 +
             (C519 - C520) * C47448) *
                C15919 +
            ((C5902 - C5903) * C15921 + (C5904 - C5905) * C15917 +
             C6972 * C15922 + C6973 * C47448) *
                C47479) *
               C47464) *
              C47500 +
          ((((C4869 - C4868) * C15921 + (C4871 - C4870) * C15917 +
             C4874 * C15922 + C4875 * C47448) *
                C15919 +
            ((C4876 - C4877) * C15921 + (C4878 - C4879) * C15917 +
             C4880 * C15922 + C4881 * C47448) *
                C47479) *
               C1788 +
           (((C5491 - C5490) * C15921 + (C5493 - C5492) * C15917 +
             C5496 * C15922 + C5497 * C47448) *
                C15919 +
            ((C5906 - C5907) * C15921 + (C5908 - C5909) * C15917 +
             C6246 * C15922 + C6247 * C47448) *
                C47479) *
               C1789 +
           (((C5903 - C5902) * C15921 + (C5905 - C5904) * C15917 +
             C6974 * C15922 + C6975 * C47448) *
                C15919 +
            ((C5910 - C5911) * C15921 + (C5912 - C5913) * C15917 +
             (C5914 - C5915) * C15922 + (C5916 - C5917) * C47448) *
                C47479) *
               C47464) *
              C47488 +
          ((((C4877 - C4876) * C15921 + (C4879 - C4878) * C15917 +
             C4882 * C15922 + C4883 * C47448) *
                C15919 +
            ((C5736 - C5737) * C15921 + (C5738 - C5739) * C15917 +
             C6048 * C15922 + C6049 * C47448) *
                C47479) *
               C1788 +
           (((C5907 - C5906) * C15921 + (C5909 - C5908) * C15917 +
             C6248 * C15922 + C6249 * C47448) *
                C15919 +
            ((C6392 - C6393) * C15921 + (C6394 - C6395) * C15917 +
             (C6250 - C6251) * C15922 + (C6252 - C6253) * C47448) *
                C47479) *
               C1789 +
           (((C5911 - C5910) * C15921 + (C5913 - C5912) * C15917 +
             (C5915 - C5914) * C15922 + (C5917 - C5916) * C47448) *
                C15919 +
            ((C47384 * C5895 - C113 * C5893) * C15921 +
             (C47384 * C5899 - C113 * C5896) * C15917 +
             (C47384 * C5897 - C113 * C5894) * C15922 +
             (C47384 * C5900 - C113 * C5898) * C47448) *
                C47479) *
               C47464) *
              C47461) *
         C47135) /
            (p * q * std::sqrt(p + q));
    d2ee[90] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C47384 * C124 - C113 * C117) * C15921 +
              (C47384 * C138 - C113 * C125) * C15917 + (C146 - C147) * C15922 +
              (C148 - C149) * C47448) *
                 C15919 +
             ((C4868 - C4869) * C15921 + (C4870 - C4871) * C15917 +
              C4872 * C15922 + C4873 * C47448) *
                 C47479) *
                C3234 +
            (((C113 * C468 - C47384 * C478) * C15921 +
              (C113 * C479 - C47384 * C498) * C15917 + (C509 - C510) * C15922 +
              (C511 - C512) * C47448) *
                 C15919 +
             ((C5490 - C5491) * C15921 + (C5492 - C5493) * C15917 +
              C5494 * C15922 + C5495 * C47448) *
                 C47479) *
                C47268) *
               C47429 +
           ((((C4869 - C4868) * C15921 + (C4871 - C4870) * C15917 +
              C4874 * C15922 + C4875 * C47448) *
                 C15919 +
             ((C4876 - C4877) * C15921 + (C4878 - C4879) * C15917 +
              C4880 * C15922 + C4881 * C47448) *
                 C47479) *
                C3234 +
            (((C5491 - C5490) * C15921 + (C5493 - C5492) * C15917 +
              C5496 * C15922 + C5497 * C47448) *
                 C15919 +
             ((C5906 - C5907) * C15921 + (C5908 - C5909) * C15917 +
              C6246 * C15922 + C6247 * C47448) *
                 C47479) *
                C47268) *
               C47226) *
              C47140 +
          (((((C147 - C146) * C15921 + (C149 - C148) * C15917 +
              (C151 - C150) * C15922 + (C153 - C152) * C47448) *
                 C15919 +
             (C4874 * C15921 + C4875 * C15917 + C352 * C15922 + C353 * C47448) *
                 C47479) *
                C3234 +
            (((C510 - C509) * C15921 + (C512 - C511) * C15917 +
              (C514 - C513) * C15922 + (C516 - C515) * C47448) *
                 C15919 +
             (C5496 * C15921 + C5497 * C15917 + C939 * C15922 + C940 * C47448) *
                 C47479) *
                C47268) *
               C47429 +
           (((C4872 * C15921 + C4873 * C15917 + C4884 * C15922 +
              C4885 * C47448) *
                 C15919 +
             (C4882 * C15921 + C4883 * C15917 + C354 * C15922 + C355 * C47448) *
                 C47479) *
                C3234 +
            ((C5494 * C15921 + C5495 * C15917 + C5498 * C15922 +
              C5499 * C47448) *
                 C15919 +
             (C6248 * C15921 + C6249 * C15917 + (C1565 - C1566) * C15922 +
              (C1567 - C1568) * C47448) *
                 C47479) *
                C47268) *
               C47226) *
              C47149 +
          ((((C166 * C15921 + C167 * C15917 + (C155 - C154) * C15922 +
              (C157 - C156) * C47448) *
                 C15919 +
             (C4884 * C15921 + C4885 * C15917 + C645 * C15922 + C646 * C47448) *
                 C47479) *
                C3234 +
            ((C533 * C15921 + C534 * C15917 + (C526 - C525) * C15922 +
              (C528 - C527) * C47448) *
                 C15919 +
             (C5498 * C15921 + C5499 * C15917 + (C935 - C936) * C15922 +
              (C937 - C938) * C47448) *
                 C47479) *
                C47268) *
               C47429 +
           (((C352 * C15921 + C353 * C15917 + C5164 * C15922 + C5165 * C47448) *
                 C15919 +
             (C4886 * C15921 + C4887 * C15917 + (C348 - C349) * C15922 +
              (C350 - C351) * C47448) *
                 C47479) *
                C3234 +
            ((C939 * C15921 + C940 * C15917 + (C936 - C935) * C15922 +
              (C938 - C937) * C47448) *
                 C15919 +
             ((C1566 - C1565) * C15921 + (C1568 - C1567) * C15917 +
              (C47384 * C1557 - C113 * C1556) * C15922 +
              (C47384 * C1559 - C113 * C1558) * C47448) *
                 C47479) *
                C47268) *
               C47226) *
              C2843)) /
        (p * q * std::sqrt(p + q));
    d2ee[91] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C47384 * C124 - C113 * C117) * C15921 +
              (C47384 * C138 - C113 * C125) * C15917 + (C146 - C147) * C15922 +
              (C148 - C149) * C47448) *
                 C15919 +
             ((C4868 - C4869) * C15921 + (C4870 - C4871) * C15917 +
              C4872 * C15922 + C4873 * C47448) *
                 C47479) *
                C47264 +
            (((C113 * C468 - C47384 * C478) * C15921 +
              (C113 * C479 - C47384 * C498) * C15917 + (C509 - C510) * C15922 +
              (C511 - C512) * C47448) *
                 C15919 +
             ((C5490 - C5491) * C15921 + (C5492 - C5493) * C15917 +
              C5494 * C15922 + C5495 * C47448) *
                 C47479) *
                C47271 +
            (((C47384 * C484 - C113 * C471) * C15921 +
              (C47384 * C501 - C113 * C485) * C15917 + (C517 - C518) * C15922 +
              (C519 - C520) * C47448) *
                 C15919 +
             ((C5902 - C5903) * C15921 + (C5904 - C5905) * C15917 +
              C6972 * C15922 + C6973 * C47448) *
                 C47479) *
                C3742) *
               C47429 +
           ((((C4869 - C4868) * C15921 + (C4871 - C4870) * C15917 +
              C4874 * C15922 + C4875 * C47448) *
                 C15919 +
             ((C4876 - C4877) * C15921 + (C4878 - C4879) * C15917 +
              C4880 * C15922 + C4881 * C47448) *
                 C47479) *
                C47264 +
            (((C5491 - C5490) * C15921 + (C5493 - C5492) * C15917 +
              C5496 * C15922 + C5497 * C47448) *
                 C15919 +
             ((C5906 - C5907) * C15921 + (C5908 - C5909) * C15917 +
              C6246 * C15922 + C6247 * C47448) *
                 C47479) *
                C47271 +
            (((C5903 - C5902) * C15921 + (C5905 - C5904) * C15917 +
              C6974 * C15922 + C6975 * C47448) *
                 C15919 +
             ((C5910 - C5911) * C15921 + (C5912 - C5913) * C15917 +
              (C5914 - C5915) * C15922 + (C5916 - C5917) * C47448) *
                 C47479) *
                C3742) *
               C47226) *
              C2580 +
          (((((C147 - C146) * C15921 + (C149 - C148) * C15917 +
              (C151 - C150) * C15922 + (C153 - C152) * C47448) *
                 C15919 +
             (C4874 * C15921 + C4875 * C15917 + C352 * C15922 + C353 * C47448) *
                 C47479) *
                C47264 +
            (((C510 - C509) * C15921 + (C512 - C511) * C15917 +
              (C514 - C513) * C15922 + (C516 - C515) * C47448) *
                 C15919 +
             (C5496 * C15921 + C5497 * C15917 + C939 * C15922 + C940 * C47448) *
                 C47479) *
                C47271 +
            (((C518 - C517) * C15921 + (C520 - C519) * C15917 +
              (C522 - C521) * C15922 + (C524 - C523) * C47448) *
                 C15919 +
             (C6974 * C15921 + C6975 * C15917 + (C2147 - C2148) * C15922 +
              (C2149 - C2150) * C47448) *
                 C47479) *
                C3742) *
               C47429 +
           (((C4872 * C15921 + C4873 * C15917 + C4884 * C15922 +
              C4885 * C47448) *
                 C15919 +
             (C4882 * C15921 + C4883 * C15917 + C354 * C15922 + C355 * C47448) *
                 C47479) *
                C47264 +
            ((C5494 * C15921 + C5495 * C15917 + C5498 * C15922 +
              C5499 * C47448) *
                 C15919 +
             (C6248 * C15921 + C6249 * C15917 + (C1565 - C1566) * C15922 +
              (C1567 - C1568) * C47448) *
                 C47479) *
                C47271 +
            ((C6972 * C15921 + C6973 * C15917 + (C2148 - C2147) * C15922 +
              (C2150 - C2149) * C47448) *
                 C15919 +
             ((C5915 - C5914) * C15921 + (C5917 - C5916) * C15917 +
              (C47384 * C1283 - C113 * C1266) * C15922 +
              (C47384 * C1293 - C113 * C1284) * C47448) *
                 C47479) *
                C3742) *
               C47226) *
              C47146)) /
        (p * q * std::sqrt(p + q));
    d2ee[92] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C47384 * C124 - C113 * C117) * C15921 +
              (C47384 * C138 - C113 * C125) * C15917 + (C146 - C147) * C15922 +
              (C148 - C149) * C47448) *
                 C15919 +
             ((C4868 - C4869) * C15921 + (C4870 - C4871) * C15917 +
              C4872 * C15922 + C4873 * C47448) *
                 C47479) *
                C3234 +
            (((C113 * C468 - C47384 * C478) * C15921 +
              (C113 * C479 - C47384 * C498) * C15917 + (C509 - C510) * C15922 +
              (C511 - C512) * C47448) *
                 C15919 +
             ((C5490 - C5491) * C15921 + (C5492 - C5493) * C15917 +
              C5494 * C15922 + C5495 * C47448) *
                 C47479) *
                C47268) *
               C47500 +
           ((((C4869 - C4868) * C15921 + (C4871 - C4870) * C15917 +
              C4874 * C15922 + C4875 * C47448) *
                 C15919 +
             ((C4876 - C4877) * C15921 + (C4878 - C4879) * C15917 +
              C4880 * C15922 + C4881 * C47448) *
                 C47479) *
                C3234 +
            (((C5491 - C5490) * C15921 + (C5493 - C5492) * C15917 +
              C5496 * C15922 + C5497 * C47448) *
                 C15919 +
             ((C5906 - C5907) * C15921 + (C5908 - C5909) * C15917 +
              C6246 * C15922 + C6247 * C47448) *
                 C47479) *
                C47268) *
               C47488 +
           ((((C4877 - C4876) * C15921 + (C4879 - C4878) * C15917 +
              C4882 * C15922 + C4883 * C47448) *
                 C15919 +
             ((C5736 - C5737) * C15921 + (C5738 - C5739) * C15917 +
              C6048 * C15922 + C6049 * C47448) *
                 C47479) *
                C3234 +
            (((C5907 - C5906) * C15921 + (C5909 - C5908) * C15917 +
              C6248 * C15922 + C6249 * C47448) *
                 C15919 +
             ((C6392 - C6393) * C15921 + (C6394 - C6395) * C15917 +
              (C6250 - C6251) * C15922 + (C6252 - C6253) * C47448) *
                 C47479) *
                C47268) *
               C47461) *
              C2580 +
          (((((C147 - C146) * C15921 + (C149 - C148) * C15917 +
              (C151 - C150) * C15922 + (C153 - C152) * C47448) *
                 C15919 +
             (C4874 * C15921 + C4875 * C15917 + C352 * C15922 + C353 * C47448) *
                 C47479) *
                C3234 +
            (((C510 - C509) * C15921 + (C512 - C511) * C15917 +
              (C514 - C513) * C15922 + (C516 - C515) * C47448) *
                 C15919 +
             (C5496 * C15921 + C5497 * C15917 + C939 * C15922 + C940 * C47448) *
                 C47479) *
                C47268) *
               C47500 +
           (((C4872 * C15921 + C4873 * C15917 + C4884 * C15922 +
              C4885 * C47448) *
                 C15919 +
             (C4882 * C15921 + C4883 * C15917 + C354 * C15922 + C355 * C47448) *
                 C47479) *
                C3234 +
            ((C5494 * C15921 + C5495 * C15917 + C5498 * C15922 +
              C5499 * C47448) *
                 C15919 +
             (C6248 * C15921 + C6249 * C15917 + (C1565 - C1566) * C15922 +
              (C1567 - C1568) * C47448) *
                 C47479) *
                C47268) *
               C47488 +
           (((C4880 * C15921 + C4881 * C15917 + C4886 * C15922 +
              C4887 * C47448) *
                 C15919 +
             (C6050 * C15921 + C6051 * C15917 + (C1407 - C1408) * C15922 +
              (C1409 - C1410) * C47448) *
                 C47479) *
                C3234 +
            ((C6246 * C15921 + C6247 * C15917 + (C1566 - C1565) * C15922 +
              (C1568 - C1567) * C47448) *
                 C15919 +
             ((C6251 - C6250) * C15921 + (C6253 - C6252) * C15917 +
              (C47384 * C1673 - C113 * C1668) * C15922 +
              (C47384 * C1677 - C113 * C1674) * C47448) *
                 C47479) *
                C47268) *
               C47461) *
              C47146)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C47384 * C124 - C113 * C117) * C15921 +
             (C47384 * C138 - C113 * C125) * C15917 + (C146 - C147) * C15922 +
             (C148 - C149) * C47448) *
                C15919 +
            ((C4868 - C4869) * C15921 + (C4870 - C4871) * C15917 +
             C4872 * C15922 + C4873 * C47448) *
                C47479) *
               C3234 +
           (((C113 * C468 - C47384 * C478) * C15921 +
             (C113 * C479 - C47384 * C498) * C15917 + (C509 - C510) * C15922 +
             (C511 - C512) * C47448) *
                C15919 +
            ((C5490 - C5491) * C15921 + (C5492 - C5493) * C15917 +
             C5494 * C15922 + C5495 * C47448) *
                C47479) *
               C47268) *
              C47163 * C47506 +
          ((((C147 - C146) * C15921 + (C149 - C148) * C15917 +
             (C151 - C150) * C15922 + (C153 - C152) * C47448) *
                C15919 +
            (C4874 * C15921 + C4875 * C15917 + C352 * C15922 + C353 * C47448) *
                C47479) *
               C3234 +
           (((C510 - C509) * C15921 + (C512 - C511) * C15917 +
             (C514 - C513) * C15922 + (C516 - C515) * C47448) *
                C15919 +
            (C5496 * C15921 + C5497 * C15917 + C939 * C15922 + C940 * C47448) *
                C47479) *
               C47268) *
              C47163 * C47499 +
          (((C166 * C15921 + C167 * C15917 + (C155 - C154) * C15922 +
             (C157 - C156) * C47448) *
                C15919 +
            (C4884 * C15921 + C4885 * C15917 + C645 * C15922 + C646 * C47448) *
                C47479) *
               C3234 +
           ((C533 * C15921 + C534 * C15917 + (C526 - C525) * C15922 +
             (C528 - C527) * C47448) *
                C15919 +
            (C5498 * C15921 + C5499 * C15917 + (C935 - C936) * C15922 +
             (C937 - C938) * C47448) *
                C47479) *
               C47268) *
              C47163 * C47486 +
          (((C168 * C15921 + C169 * C15917 + (C159 - C158) * C15922 +
             (C161 - C160) * C47448) *
                C15919 +
            (C5164 * C15921 + C5165 * C15917 + (C647 - C648) * C15922 +
             (C649 - C650) * C47448) *
                C47479) *
               C3234 +
           ((C755 * C15921 + C756 * C15917 + (C758 - C757) * C15922 +
             (C760 - C759) * C47448) *
                C15919 +
            ((C936 - C935) * C15921 + (C938 - C937) * C15917 +
             (C47384 * C919 - C113 * C910) * C15922 +
             (C47384 * C925 - C113 * C920) * C47448) *
                C47479) *
               C47268) *
              C47163 * C47465)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C47384 * C124 - C113 * C117) * C15921 +
             (C47384 * C138 - C113 * C125) * C15917 + (C146 - C147) * C15922 +
             (C148 - C149) * C47448) *
                C15919 +
            ((C4868 - C4869) * C15921 + (C4870 - C4871) * C15917 +
             C4872 * C15922 + C4873 * C47448) *
                C47479) *
               C47508 +
           (((C113 * C468 - C47384 * C478) * C15921 +
             (C113 * C479 - C47384 * C498) * C15917 + (C509 - C510) * C15922 +
             (C511 - C512) * C47448) *
                C15919 +
            ((C5490 - C5491) * C15921 + (C5492 - C5493) * C15917 +
             C5494 * C15922 + C5495 * C47448) *
                C47479) *
               C47505 +
           (((C47384 * C484 - C113 * C471) * C15921 +
             (C47384 * C501 - C113 * C485) * C15917 + (C517 - C518) * C15922 +
             (C519 - C520) * C47448) *
                C15919 +
            ((C5902 - C5903) * C15921 + (C5904 - C5905) * C15917 +
             C6972 * C15922 + C6973 * C47448) *
                C47479) *
               C47496 +
           (((C113 * C1968 - C47384 * C1974) * C15921 +
             (C113 * C1975 - C47384 * C1986) * C15917 +
             (C2257 - C2258) * C15922 + (C2259 - C2260) * C47448) *
                C15919 +
            ((C7248 - C7249) * C15921 + (C7250 - C7251) * C15917 +
             (C7106 - C7107) * C15922 + (C7108 - C7109) * C47448) *
                C47479) *
               C47477) *
              C47163 * C2580 +
          ((((C147 - C146) * C15921 + (C149 - C148) * C15917 +
             (C151 - C150) * C15922 + (C153 - C152) * C47448) *
                C15919 +
            (C4874 * C15921 + C4875 * C15917 + C352 * C15922 + C353 * C47448) *
                C47479) *
               C47508 +
           (((C510 - C509) * C15921 + (C512 - C511) * C15917 +
             (C514 - C513) * C15922 + (C516 - C515) * C47448) *
                C15919 +
            (C5496 * C15921 + C5497 * C15917 + C939 * C15922 + C940 * C47448) *
                C47479) *
               C47505 +
           (((C518 - C517) * C15921 + (C520 - C519) * C15917 +
             (C522 - C521) * C15922 + (C524 - C523) * C47448) *
                C15919 +
            (C6974 * C15921 + C6975 * C15917 + (C2147 - C2148) * C15922 +
             (C2149 - C2150) * C47448) *
                C47479) *
               C47496 +
           (((C2258 - C2257) * C15921 + (C2260 - C2259) * C15917 +
             (C2262 - C2261) * C15922 + (C2264 - C2263) * C47448) *
                C15919 +
            ((C7107 - C7106) * C15921 + (C7109 - C7108) * C15917 +
             (C47384 * C2369 - C113 * C2364) * C15922 +
             (C47384 * C2373 - C113 * C2370) * C47448) *
                C47479) *
               C47477) *
              C47163 * C47146)) /
            (p * q * std::sqrt(p + q));
    d2ee[93] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C47384 * C124 - C113 * C117) * C15921 +
             (C47384 * C138 - C113 * C125) * C15917 + (C146 - C147) * C15922 +
             (C148 - C149) * C47448) *
                C15919 +
            ((C4868 - C4869) * C15921 + (C4870 - C4871) * C15917 +
             C4872 * C15922 + C4873 * C47448) *
                C47479) *
               C47264 +
           (((C113 * C468 - C47384 * C478) * C15921 +
             (C113 * C479 - C47384 * C498) * C15917 + (C509 - C510) * C15922 +
             (C511 - C512) * C47448) *
                C15919 +
            ((C5490 - C5491) * C15921 + (C5492 - C5493) * C15917 +
             C5494 * C15922 + C5495 * C47448) *
                C47479) *
               C47271 +
           (((C47384 * C484 - C113 * C471) * C15921 +
             (C47384 * C501 - C113 * C485) * C15917 + (C517 - C518) * C15922 +
             (C519 - C520) * C47448) *
                C15919 +
            ((C5902 - C5903) * C15921 + (C5904 - C5905) * C15917 +
             C6972 * C15922 + C6973 * C47448) *
                C47479) *
               C3742) *
              C47163 * C47140 +
          ((((C147 - C146) * C15921 + (C149 - C148) * C15917 +
             (C151 - C150) * C15922 + (C153 - C152) * C47448) *
                C15919 +
            (C4874 * C15921 + C4875 * C15917 + C352 * C15922 + C353 * C47448) *
                C47479) *
               C47264 +
           (((C510 - C509) * C15921 + (C512 - C511) * C15917 +
             (C514 - C513) * C15922 + (C516 - C515) * C47448) *
                C15919 +
            (C5496 * C15921 + C5497 * C15917 + C939 * C15922 + C940 * C47448) *
                C47479) *
               C47271 +
           (((C518 - C517) * C15921 + (C520 - C519) * C15917 +
             (C522 - C521) * C15922 + (C524 - C523) * C47448) *
                C15919 +
            (C6974 * C15921 + C6975 * C15917 + (C2147 - C2148) * C15922 +
             (C2149 - C2150) * C47448) *
                C47479) *
               C3742) *
              C47163 * C47149 +
          (((C166 * C15921 + C167 * C15917 + (C155 - C154) * C15922 +
             (C157 - C156) * C47448) *
                C15919 +
            (C4884 * C15921 + C4885 * C15917 + C645 * C15922 + C646 * C47448) *
                C47479) *
               C47264 +
           ((C533 * C15921 + C534 * C15917 + (C526 - C525) * C15922 +
             (C528 - C527) * C47448) *
                C15919 +
            (C5498 * C15921 + C5499 * C15917 + (C935 - C936) * C15922 +
             (C937 - C938) * C47448) *
                C47479) *
               C47271 +
           ((C535 * C15921 + C536 * C15917 + (C530 - C529) * C15922 +
             (C532 - C531) * C47448) *
                C15919 +
            ((C2148 - C2147) * C15921 + (C2150 - C2149) * C15917 +
             (C47384 * C2139 - C113 * C2138) * C15922 +
             (C47384 * C2141 - C113 * C2140) * C47448) *
                C47479) *
               C3742) *
              C47163 * C2843)) /
        (p * q * std::sqrt(p + q));
    d2ee[94] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C47384 * C124 - C113 * C117) * C15921 +
             (C47384 * C138 - C113 * C125) * C15917 + (C146 - C147) * C15922 +
             (C148 - C149) * C47448) *
                C15919 +
            ((C4868 - C4869) * C15921 + (C4870 - C4871) * C15917 +
             C4872 * C15922 + C4873 * C47448) *
                C47479) *
               C3234 +
           (((C113 * C468 - C47384 * C478) * C15921 +
             (C113 * C479 - C47384 * C498) * C15917 + (C509 - C510) * C15922 +
             (C511 - C512) * C47448) *
                C15919 +
            ((C5490 - C5491) * C15921 + (C5492 - C5493) * C15917 +
             C5494 * C15922 + C5495 * C47448) *
                C47479) *
               C47268) *
              C47163 * C47506 +
          ((((C147 - C146) * C15921 + (C149 - C148) * C15917 +
             (C151 - C150) * C15922 + (C153 - C152) * C47448) *
                C15919 +
            (C4874 * C15921 + C4875 * C15917 + C352 * C15922 + C353 * C47448) *
                C47479) *
               C3234 +
           (((C510 - C509) * C15921 + (C512 - C511) * C15917 +
             (C514 - C513) * C15922 + (C516 - C515) * C47448) *
                C15919 +
            (C5496 * C15921 + C5497 * C15917 + C939 * C15922 + C940 * C47448) *
                C47479) *
               C47268) *
              C47163 * C47499 +
          (((C166 * C15921 + C167 * C15917 + (C155 - C154) * C15922 +
             (C157 - C156) * C47448) *
                C15919 +
            (C4884 * C15921 + C4885 * C15917 + C645 * C15922 + C646 * C47448) *
                C47479) *
               C3234 +
           ((C533 * C15921 + C534 * C15917 + (C526 - C525) * C15922 +
             (C528 - C527) * C47448) *
                C15919 +
            (C5498 * C15921 + C5499 * C15917 + (C935 - C936) * C15922 +
             (C937 - C938) * C47448) *
                C47479) *
               C47268) *
              C47163 * C47486 +
          (((C168 * C15921 + C169 * C15917 + (C159 - C158) * C15922 +
             (C161 - C160) * C47448) *
                C15919 +
            (C5164 * C15921 + C5165 * C15917 + (C647 - C648) * C15922 +
             (C649 - C650) * C47448) *
                C47479) *
               C3234 +
           ((C755 * C15921 + C756 * C15917 + (C758 - C757) * C15922 +
             (C760 - C759) * C47448) *
                C15919 +
            ((C936 - C935) * C15921 + (C938 - C937) * C15917 +
             (C47384 * C919 - C113 * C910) * C15922 +
             (C47384 * C925 - C113 * C920) * C47448) *
                C47479) *
               C47268) *
              C47163 * C47465)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C47384 * C124 - C113 * C117) * C15921 +
              (C47384 * C138 - C113 * C125) * C15917 + (C146 - C147) * C15922 +
              (C148 - C149) * C47448) *
                 C15919 +
             ((C4868 - C4869) * C15921 + (C4870 - C4871) * C15917 +
              C4872 * C15922 + C4873 * C47448) *
                 C47479) *
                C3234 +
            (((C113 * C468 - C47384 * C478) * C15921 +
              (C113 * C479 - C47384 * C498) * C15917 + (C509 - C510) * C15922 +
              (C511 - C512) * C47448) *
                 C15919 +
             ((C5490 - C5491) * C15921 + (C5492 - C5493) * C15917 +
              C5494 * C15922 + C5495 * C47448) *
                 C47479) *
                C47268) *
               C47500 +
           ((((C4869 - C4868) * C15921 + (C4871 - C4870) * C15917 +
              C4874 * C15922 + C4875 * C47448) *
                 C15919 +
             ((C4876 - C4877) * C15921 + (C4878 - C4879) * C15917 +
              C4880 * C15922 + C4881 * C47448) *
                 C47479) *
                C3234 +
            (((C5491 - C5490) * C15921 + (C5493 - C5492) * C15917 +
              C5496 * C15922 + C5497 * C47448) *
                 C15919 +
             ((C5906 - C5907) * C15921 + (C5908 - C5909) * C15917 +
              C6246 * C15922 + C6247 * C47448) *
                 C47479) *
                C47268) *
               C47488 +
           ((((C4877 - C4876) * C15921 + (C4879 - C4878) * C15917 +
              C4882 * C15922 + C4883 * C47448) *
                 C15919 +
             ((C5736 - C5737) * C15921 + (C5738 - C5739) * C15917 +
              C6048 * C15922 + C6049 * C47448) *
                 C47479) *
                C3234 +
            (((C5907 - C5906) * C15921 + (C5909 - C5908) * C15917 +
              C6248 * C15922 + C6249 * C47448) *
                 C15919 +
             ((C6392 - C6393) * C15921 + (C6394 - C6395) * C15917 +
              (C6250 - C6251) * C15922 + (C6252 - C6253) * C47448) *
                 C47479) *
                C47268) *
               C47461) *
              C2580 +
          (((((C147 - C146) * C15921 + (C149 - C148) * C15917 +
              (C151 - C150) * C15922 + (C153 - C152) * C47448) *
                 C15919 +
             (C4874 * C15921 + C4875 * C15917 + C352 * C15922 + C353 * C47448) *
                 C47479) *
                C3234 +
            (((C510 - C509) * C15921 + (C512 - C511) * C15917 +
              (C514 - C513) * C15922 + (C516 - C515) * C47448) *
                 C15919 +
             (C5496 * C15921 + C5497 * C15917 + C939 * C15922 + C940 * C47448) *
                 C47479) *
                C47268) *
               C47500 +
           (((C4872 * C15921 + C4873 * C15917 + C4884 * C15922 +
              C4885 * C47448) *
                 C15919 +
             (C4882 * C15921 + C4883 * C15917 + C354 * C15922 + C355 * C47448) *
                 C47479) *
                C3234 +
            ((C5494 * C15921 + C5495 * C15917 + C5498 * C15922 +
              C5499 * C47448) *
                 C15919 +
             (C6248 * C15921 + C6249 * C15917 + (C1565 - C1566) * C15922 +
              (C1567 - C1568) * C47448) *
                 C47479) *
                C47268) *
               C47488 +
           (((C4880 * C15921 + C4881 * C15917 + C4886 * C15922 +
              C4887 * C47448) *
                 C15919 +
             (C6050 * C15921 + C6051 * C15917 + (C1407 - C1408) * C15922 +
              (C1409 - C1410) * C47448) *
                 C47479) *
                C3234 +
            ((C6246 * C15921 + C6247 * C15917 + (C1566 - C1565) * C15922 +
              (C1568 - C1567) * C47448) *
                 C15919 +
             ((C6251 - C6250) * C15921 + (C6253 - C6252) * C15917 +
              (C47384 * C1673 - C113 * C1668) * C15922 +
              (C47384 * C1677 - C113 * C1674) * C47448) *
                 C47479) *
                C47268) *
               C47461) *
              C47146)) /
            (p * q * std::sqrt(p + q));
    d2ee[95] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C47384 * C124 - C113 * C117) * C15921 +
             (C47384 * C138 - C113 * C125) * C15917 + (C146 - C147) * C15922 +
             (C148 - C149) * C47448) *
                C15919 +
            ((C4868 - C4869) * C15921 + (C4870 - C4871) * C15917 +
             C4872 * C15922 + C4873 * C47448) *
                C47479) *
               C47181 * C47429 +
           (((C4869 - C4868) * C15921 + (C4871 - C4870) * C15917 +
             C4874 * C15922 + C4875 * C47448) *
                C15919 +
            ((C4876 - C4877) * C15921 + (C4878 - C4879) * C15917 +
             C4880 * C15922 + C4881 * C47448) *
                C47479) *
               C47181 * C47226) *
              C636 +
          ((((C147 - C146) * C15921 + (C149 - C148) * C15917 +
             (C151 - C150) * C15922 + (C153 - C152) * C47448) *
                C15919 +
            (C4874 * C15921 + C4875 * C15917 + C352 * C15922 + C353 * C47448) *
                C47479) *
               C47181 * C47429 +
           ((C4872 * C15921 + C4873 * C15917 + C4884 * C15922 +
             C4885 * C47448) *
                C15919 +
            (C4882 * C15921 + C4883 * C15917 + C354 * C15922 + C355 * C47448) *
                C47479) *
               C47181 * C47226) *
              C637 +
          (((C166 * C15921 + C167 * C15917 + (C155 - C154) * C15922 +
             (C157 - C156) * C47448) *
                C15919 +
            (C4884 * C15921 + C4885 * C15917 + C645 * C15922 + C646 * C47448) *
                C47479) *
               C47181 * C47429 +
           ((C352 * C15921 + C353 * C15917 + C5164 * C15922 + C5165 * C47448) *
                C15919 +
            (C4886 * C15921 + C4887 * C15917 + (C348 - C349) * C15922 +
             (C350 - C351) * C47448) *
                C47479) *
               C47181 * C47226) *
              C638 +
          (((C168 * C15921 + C169 * C15917 + (C159 - C158) * C15922 +
             (C161 - C160) * C47448) *
                C15919 +
            (C5164 * C15921 + C5165 * C15917 + (C647 - C648) * C15922 +
             (C649 - C650) * C47448) *
                C47479) *
               C47181 * C47429 +
           ((C645 * C15921 + C646 * C15917 + (C648 - C647) * C15922 +
             (C650 - C649) * C47448) *
                C15919 +
            ((C349 - C348) * C15921 + (C351 - C350) * C15917 +
             (C47384 * C315 - C113 * C296) * C15922 +
             (C47384 * C326 - C113 * C316) * C47448) *
                C47479) *
               C47181 * C47226) *
              C47465)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C47384 * C124 - C113 * C117) * C15921 +
             (C47384 * C138 - C113 * C125) * C15917 + (C146 - C147) * C15922 +
             (C148 - C149) * C47448) *
                C15919 +
            ((C4868 - C4869) * C15921 + (C4870 - C4871) * C15917 +
             C4872 * C15922 + C4873 * C47448) *
                C47479) *
               C47181 * C1392 +
           (((C4869 - C4868) * C15921 + (C4871 - C4870) * C15917 +
             C4874 * C15922 + C4875 * C47448) *
                C15919 +
            ((C4876 - C4877) * C15921 + (C4878 - C4879) * C15917 +
             C4880 * C15922 + C4881 * C47448) *
                C47479) *
               C47181 * C1393 +
           (((C4877 - C4876) * C15921 + (C4879 - C4878) * C15917 +
             C4882 * C15922 + C4883 * C47448) *
                C15919 +
            ((C5736 - C5737) * C15921 + (C5738 - C5739) * C15917 +
             C6048 * C15922 + C6049 * C47448) *
                C47479) *
               C47181 * C1394 +
           (((C5737 - C5736) * C15921 + (C5739 - C5738) * C15917 +
             C6050 * C15922 + C6051 * C47448) *
                C15919 +
            ((C5740 - C5741) * C15921 + (C5742 - C5743) * C15917 +
             (C5744 - C5745) * C15922 + (C5746 - C5747) * C47448) *
                C47479) *
               C47181 * C47471) *
              C47415 +
          ((((C147 - C146) * C15921 + (C149 - C148) * C15917 +
             (C151 - C150) * C15922 + (C153 - C152) * C47448) *
                C15919 +
            (C4874 * C15921 + C4875 * C15917 + C352 * C15922 + C353 * C47448) *
                C47479) *
               C47181 * C1392 +
           ((C4872 * C15921 + C4873 * C15917 + C4884 * C15922 +
             C4885 * C47448) *
                C15919 +
            (C4882 * C15921 + C4883 * C15917 + C354 * C15922 + C355 * C47448) *
                C47479) *
               C47181 * C1393 +
           ((C4880 * C15921 + C4881 * C15917 + C4886 * C15922 +
             C4887 * C47448) *
                C15919 +
            (C6050 * C15921 + C6051 * C15917 + (C1407 - C1408) * C15922 +
             (C1409 - C1410) * C47448) *
                C47479) *
               C47181 * C1394 +
           ((C6048 * C15921 + C6049 * C15917 + (C1408 - C1407) * C15922 +
             (C1410 - C1409) * C47448) *
                C15919 +
            ((C5745 - C5744) * C15921 + (C5747 - C5746) * C15917 +
             (C47384 * C1140 - C113 * C1129) * C15922 +
             (C47384 * C1147 - C113 * C1141) * C47448) *
                C47479) *
               C47181 * C47471) *
              C47146)) /
            (p * q * std::sqrt(p + q));
    d2ee[96] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C47384 * C124 - C113 * C117) * C15921 +
              (C47384 * C138 - C113 * C125) * C15917 + (C146 - C147) * C15922 +
              (C148 - C149) * C47448) *
                 C15919 +
             ((C4868 - C4869) * C15921 + (C4870 - C4871) * C15917 +
              C4872 * C15922 + C4873 * C47448) *
                 C47479) *
                C47430 +
            (((C113 * C468 - C47384 * C478) * C15921 +
              (C113 * C479 - C47384 * C498) * C15917 + (C509 - C510) * C15922 +
              (C511 - C512) * C47448) *
                 C15919 +
             ((C5490 - C5491) * C15921 + (C5492 - C5493) * C15917 +
              C5494 * C15922 + C5495 * C47448) *
                 C47479) *
                C47268) *
               C47429 +
           ((((C4869 - C4868) * C15921 + (C4871 - C4870) * C15917 +
              C4874 * C15922 + C4875 * C47448) *
                 C15919 +
             ((C4876 - C4877) * C15921 + (C4878 - C4879) * C15917 +
              C4880 * C15922 + C4881 * C47448) *
                 C47479) *
                C47430 +
            (((C5491 - C5490) * C15921 + (C5493 - C5492) * C15917 +
              C5496 * C15922 + C5497 * C47448) *
                 C15919 +
             ((C5906 - C5907) * C15921 + (C5908 - C5909) * C15917 +
              C6246 * C15922 + C6247 * C47448) *
                 C47479) *
                C47268) *
               C47226) *
              C284 +
          (((((C147 - C146) * C15921 + (C149 - C148) * C15917 +
              (C151 - C150) * C15922 + (C153 - C152) * C47448) *
                 C15919 +
             (C4874 * C15921 + C4875 * C15917 + C352 * C15922 + C353 * C47448) *
                 C47479) *
                C47430 +
            (((C510 - C509) * C15921 + (C512 - C511) * C15917 +
              (C514 - C513) * C15922 + (C516 - C515) * C47448) *
                 C15919 +
             (C5496 * C15921 + C5497 * C15917 + C939 * C15922 + C940 * C47448) *
                 C47479) *
                C47268) *
               C47429 +
           (((C4872 * C15921 + C4873 * C15917 + C4884 * C15922 +
              C4885 * C47448) *
                 C15919 +
             (C4882 * C15921 + C4883 * C15917 + C354 * C15922 + C355 * C47448) *
                 C47479) *
                C47430 +
            ((C5494 * C15921 + C5495 * C15917 + C5498 * C15922 +
              C5499 * C47448) *
                 C15919 +
             (C6248 * C15921 + C6249 * C15917 + (C1565 - C1566) * C15922 +
              (C1567 - C1568) * C47448) *
                 C47479) *
                C47268) *
               C47226) *
              C285 +
          ((((C166 * C15921 + C167 * C15917 + (C155 - C154) * C15922 +
              (C157 - C156) * C47448) *
                 C15919 +
             (C4884 * C15921 + C4885 * C15917 + C645 * C15922 + C646 * C47448) *
                 C47479) *
                C47430 +
            ((C533 * C15921 + C534 * C15917 + (C526 - C525) * C15922 +
              (C528 - C527) * C47448) *
                 C15919 +
             (C5498 * C15921 + C5499 * C15917 + (C935 - C936) * C15922 +
              (C937 - C938) * C47448) *
                 C47479) *
                C47268) *
               C47429 +
           (((C352 * C15921 + C353 * C15917 + C5164 * C15922 + C5165 * C47448) *
                 C15919 +
             (C4886 * C15921 + C4887 * C15917 + (C348 - C349) * C15922 +
              (C350 - C351) * C47448) *
                 C47479) *
                C47430 +
            ((C939 * C15921 + C940 * C15917 + (C936 - C935) * C15922 +
              (C938 - C937) * C47448) *
                 C15919 +
             ((C1566 - C1565) * C15921 + (C1568 - C1567) * C15917 +
              (C47384 * C1557 - C113 * C1556) * C15922 +
              (C47384 * C1559 - C113 * C1558) * C47448) *
                 C47479) *
                C47268) *
               C47226) *
              C47455)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C47384 * C124 - C113 * C117) * C15921 +
             (C47384 * C138 - C113 * C125) * C15917 + (C146 - C147) * C15922 +
             (C148 - C149) * C47448) *
                C15919 +
            ((C4868 - C4869) * C15921 + (C4870 - C4871) * C15917 +
             C4872 * C15922 + C4873 * C47448) *
                C47479) *
               C47430 +
           (((C113 * C468 - C47384 * C478) * C15921 +
             (C113 * C479 - C47384 * C498) * C15917 + (C509 - C510) * C15922 +
             (C511 - C512) * C47448) *
                C15919 +
            ((C5490 - C5491) * C15921 + (C5492 - C5493) * C15917 +
             C5494 * C15922 + C5495 * C47448) *
                C47479) *
               C47268) *
              C1392 +
          ((((C4869 - C4868) * C15921 + (C4871 - C4870) * C15917 +
             C4874 * C15922 + C4875 * C47448) *
                C15919 +
            ((C4876 - C4877) * C15921 + (C4878 - C4879) * C15917 +
             C4880 * C15922 + C4881 * C47448) *
                C47479) *
               C47430 +
           (((C5491 - C5490) * C15921 + (C5493 - C5492) * C15917 +
             C5496 * C15922 + C5497 * C47448) *
                C15919 +
            ((C5906 - C5907) * C15921 + (C5908 - C5909) * C15917 +
             C6246 * C15922 + C6247 * C47448) *
                C47479) *
               C47268) *
              C1393 +
          ((((C4877 - C4876) * C15921 + (C4879 - C4878) * C15917 +
             C4882 * C15922 + C4883 * C47448) *
                C15919 +
            ((C5736 - C5737) * C15921 + (C5738 - C5739) * C15917 +
             C6048 * C15922 + C6049 * C47448) *
                C47479) *
               C47430 +
           (((C5907 - C5906) * C15921 + (C5909 - C5908) * C15917 +
             C6248 * C15922 + C6249 * C47448) *
                C15919 +
            ((C6392 - C6393) * C15921 + (C6394 - C6395) * C15917 +
             (C6250 - C6251) * C15922 + (C6252 - C6253) * C47448) *
                C47479) *
               C47268) *
              C1394 +
          ((((C5737 - C5736) * C15921 + (C5739 - C5738) * C15917 +
             C6050 * C15922 + C6051 * C47448) *
                C15919 +
            ((C5740 - C5741) * C15921 + (C5742 - C5743) * C15917 +
             (C5744 - C5745) * C15922 + (C5746 - C5747) * C47448) *
                C47479) *
               C47430 +
           (((C6393 - C6392) * C15921 + (C6395 - C6394) * C15917 +
             (C6251 - C6250) * C15922 + (C6253 - C6252) * C47448) *
                C15919 +
            ((C47384 * C6385 - C113 * C6383) * C15921 +
             (C47384 * C6389 - C113 * C6386) * C15917 +
             (C47384 * C6387 - C113 * C6384) * C15922 +
             (C47384 * C6390 - C113 * C6388) * C47448) *
                C47479) *
               C47268) *
              C47471) *
         C47135) /
            (p * q * std::sqrt(p + q));
    d2ee[97] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C47384 * C124 - C113 * C117) * C15921 +
             (C47384 * C138 - C113 * C125) * C15917 + (C146 - C147) * C15922 +
             (C148 - C149) * C47448) *
                C15919 +
            ((C4868 - C4869) * C15921 + (C4870 - C4871) * C15917 +
             C4872 * C15922 + C4873 * C47448) *
                C47479) *
               C47181 * C47500 +
           (((C4869 - C4868) * C15921 + (C4871 - C4870) * C15917 +
             C4874 * C15922 + C4875 * C47448) *
                C15919 +
            ((C4876 - C4877) * C15921 + (C4878 - C4879) * C15917 +
             C4880 * C15922 + C4881 * C47448) *
                C47479) *
               C47181 * C47488 +
           (((C4877 - C4876) * C15921 + (C4879 - C4878) * C15917 +
             C4882 * C15922 + C4883 * C47448) *
                C15919 +
            ((C5736 - C5737) * C15921 + (C5738 - C5739) * C15917 +
             C6048 * C15922 + C6049 * C47448) *
                C47479) *
               C47181 * C47461) *
              C284 +
          ((((C147 - C146) * C15921 + (C149 - C148) * C15917 +
             (C151 - C150) * C15922 + (C153 - C152) * C47448) *
                C15919 +
            (C4874 * C15921 + C4875 * C15917 + C352 * C15922 + C353 * C47448) *
                C47479) *
               C47181 * C47500 +
           ((C4872 * C15921 + C4873 * C15917 + C4884 * C15922 +
             C4885 * C47448) *
                C15919 +
            (C4882 * C15921 + C4883 * C15917 + C354 * C15922 + C355 * C47448) *
                C47479) *
               C47181 * C47488 +
           ((C4880 * C15921 + C4881 * C15917 + C4886 * C15922 +
             C4887 * C47448) *
                C15919 +
            (C6050 * C15921 + C6051 * C15917 + (C1407 - C1408) * C15922 +
             (C1409 - C1410) * C47448) *
                C47479) *
               C47181 * C47461) *
              C285 +
          (((C166 * C15921 + C167 * C15917 + (C155 - C154) * C15922 +
             (C157 - C156) * C47448) *
                C15919 +
            (C4884 * C15921 + C4885 * C15917 + C645 * C15922 + C646 * C47448) *
                C47479) *
               C47181 * C47500 +
           ((C352 * C15921 + C353 * C15917 + C5164 * C15922 + C5165 * C47448) *
                C15919 +
            (C4886 * C15921 + C4887 * C15917 + (C348 - C349) * C15922 +
             (C350 - C351) * C47448) *
                C47479) *
               C47181 * C47488 +
           ((C354 * C15921 + C355 * C15917 + (C349 - C348) * C15922 +
             (C351 - C350) * C47448) *
                C15919 +
            ((C1408 - C1407) * C15921 + (C1410 - C1409) * C15917 +
             (C47384 * C1399 - C113 * C1398) * C15922 +
             (C47384 * C1401 - C113 * C1400) * C47448) *
                C47479) *
               C47181 * C47461) *
              C47455)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C47384 * C124 - C113 * C117) * C15921 +
            (C47384 * C138 - C113 * C125) * C15917 + (C146 - C147) * C15922 +
            (C148 - C149) * C47448) *
               C15919 +
           ((C4868 - C4869) * C15921 + (C4870 - C4871) * C15917 +
            C4872 * C15922 + C4873 * C47448) *
               C47479) *
              C47181 * C47163 * C108 +
          (((C147 - C146) * C15921 + (C149 - C148) * C15917 +
            (C151 - C150) * C15922 + (C153 - C152) * C47448) *
               C15919 +
           (C4874 * C15921 + C4875 * C15917 + C352 * C15922 + C353 * C47448) *
               C47479) *
              C47181 * C47163 * C109 +
          ((C166 * C15921 + C167 * C15917 + (C155 - C154) * C15922 +
            (C157 - C156) * C47448) *
               C15919 +
           (C4884 * C15921 + C4885 * C15917 + C645 * C15922 + C646 * C47448) *
               C47479) *
              C47181 * C47163 * C110 +
          ((C168 * C15921 + C169 * C15917 + (C159 - C158) * C15922 +
            (C161 - C160) * C47448) *
               C15919 +
           (C5164 * C15921 + C5165 * C15917 + (C647 - C648) * C15922 +
            (C649 - C650) * C47448) *
               C47479) *
              C47181 * C47163 * C111 +
          ((C170 * C15921 + C171 * C15917 + (C163 - C162) * C15922 +
            (C165 - C164) * C47448) *
               C15919 +
           ((C648 - C647) * C15921 + (C650 - C649) * C15917 +
            (C47384 * C641 - C113 * C640) * C15922 +
            (C47384 * C643 - C113 * C642) * C47448) *
               C47479) *
              C47181 * C47163 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C47384 * C124 - C113 * C117) * C15921 +
             (C47384 * C138 - C113 * C125) * C15917 + (C146 - C147) * C15922 +
             (C148 - C149) * C47448) *
                C15919 +
            ((C4868 - C4869) * C15921 + (C4870 - C4871) * C15917 +
             C4872 * C15922 + C4873 * C47448) *
                C47479) *
               C47501 +
           (((C113 * C468 - C47384 * C478) * C15921 +
             (C113 * C479 - C47384 * C498) * C15917 + (C509 - C510) * C15922 +
             (C511 - C512) * C47448) *
                C15919 +
            ((C5490 - C5491) * C15921 + (C5492 - C5493) * C15917 +
             C5494 * C15922 + C5495 * C47448) *
                C47479) *
               C47490 +
           (((C47384 * C484 - C113 * C471) * C15921 +
             (C47384 * C501 - C113 * C485) * C15917 + (C517 - C518) * C15922 +
             (C519 - C520) * C47448) *
                C15919 +
            ((C5902 - C5903) * C15921 + (C5904 - C5905) * C15917 +
             C6972 * C15922 + C6973 * C47448) *
                C47479) *
               C47464) *
              C47163 * C284 +
          ((((C147 - C146) * C15921 + (C149 - C148) * C15917 +
             (C151 - C150) * C15922 + (C153 - C152) * C47448) *
                C15919 +
            (C4874 * C15921 + C4875 * C15917 + C352 * C15922 + C353 * C47448) *
                C47479) *
               C47501 +
           (((C510 - C509) * C15921 + (C512 - C511) * C15917 +
             (C514 - C513) * C15922 + (C516 - C515) * C47448) *
                C15919 +
            (C5496 * C15921 + C5497 * C15917 + C939 * C15922 + C940 * C47448) *
                C47479) *
               C47490 +
           (((C518 - C517) * C15921 + (C520 - C519) * C15917 +
             (C522 - C521) * C15922 + (C524 - C523) * C47448) *
                C15919 +
            (C6974 * C15921 + C6975 * C15917 + (C2147 - C2148) * C15922 +
             (C2149 - C2150) * C47448) *
                C47479) *
               C47464) *
              C47163 * C285 +
          (((C166 * C15921 + C167 * C15917 + (C155 - C154) * C15922 +
             (C157 - C156) * C47448) *
                C15919 +
            (C4884 * C15921 + C4885 * C15917 + C645 * C15922 + C646 * C47448) *
                C47479) *
               C47501 +
           ((C533 * C15921 + C534 * C15917 + (C526 - C525) * C15922 +
             (C528 - C527) * C47448) *
                C15919 +
            (C5498 * C15921 + C5499 * C15917 + (C935 - C936) * C15922 +
             (C937 - C938) * C47448) *
                C47479) *
               C47490 +
           ((C535 * C15921 + C536 * C15917 + (C530 - C529) * C15922 +
             (C532 - C531) * C47448) *
                C15919 +
            ((C2148 - C2147) * C15921 + (C2150 - C2149) * C15917 +
             (C47384 * C2139 - C113 * C2138) * C15922 +
             (C47384 * C2141 - C113 * C2140) * C47448) *
                C47479) *
               C47464) *
              C47163 * C47455)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C47384 * C124 - C113 * C117) * C15921 +
             (C47384 * C138 - C113 * C125) * C15917 + (C146 - C147) * C15922 +
             (C148 - C149) * C47448) *
                C15919 +
            ((C4868 - C4869) * C15921 + (C4870 - C4871) * C15917 +
             C4872 * C15922 + C4873 * C47448) *
                C47479) *
               C47181 * C1050 +
           (((C4869 - C4868) * C15921 + (C4871 - C4870) * C15917 +
             C4874 * C15922 + C4875 * C47448) *
                C15919 +
            ((C4876 - C4877) * C15921 + (C4878 - C4879) * C15917 +
             C4880 * C15922 + C4881 * C47448) *
                C47479) *
               C47181 * C1051 +
           (((C4877 - C4876) * C15921 + (C4879 - C4878) * C15917 +
             C4882 * C15922 + C4883 * C47448) *
                C15919 +
            ((C5736 - C5737) * C15921 + (C5738 - C5739) * C15917 +
             C6048 * C15922 + C6049 * C47448) *
                C47479) *
               C47181 * C47461) *
              C47497 +
          ((((C147 - C146) * C15921 + (C149 - C148) * C15917 +
             (C151 - C150) * C15922 + (C153 - C152) * C47448) *
                C15919 +
            (C4874 * C15921 + C4875 * C15917 + C352 * C15922 + C353 * C47448) *
                C47479) *
               C47181 * C1050 +
           ((C4872 * C15921 + C4873 * C15917 + C4884 * C15922 +
             C4885 * C47448) *
                C15919 +
            (C4882 * C15921 + C4883 * C15917 + C354 * C15922 + C355 * C47448) *
                C47479) *
               C47181 * C1051 +
           ((C4880 * C15921 + C4881 * C15917 + C4886 * C15922 +
             C4887 * C47448) *
                C15919 +
            (C6050 * C15921 + C6051 * C15917 + (C1407 - C1408) * C15922 +
             (C1409 - C1410) * C47448) *
                C47479) *
               C47181 * C47461) *
              C47484 +
          (((C166 * C15921 + C167 * C15917 + (C155 - C154) * C15922 +
             (C157 - C156) * C47448) *
                C15919 +
            (C4884 * C15921 + C4885 * C15917 + C645 * C15922 + C646 * C47448) *
                C47479) *
               C47181 * C1050 +
           ((C352 * C15921 + C353 * C15917 + C5164 * C15922 + C5165 * C47448) *
                C15919 +
            (C4886 * C15921 + C4887 * C15917 + (C348 - C349) * C15922 +
             (C350 - C351) * C47448) *
                C47479) *
               C47181 * C1051 +
           ((C354 * C15921 + C355 * C15917 + (C349 - C348) * C15922 +
             (C351 - C350) * C47448) *
                C15919 +
            ((C1408 - C1407) * C15921 + (C1410 - C1409) * C15917 +
             (C47384 * C1399 - C113 * C1398) * C15922 +
             (C47384 * C1401 - C113 * C1400) * C47448) *
                C47479) *
               C47181 * C47461) *
              C47455)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C47384 * C124 - C113 * C117) * C15921 +
            (C47384 * C138 - C113 * C125) * C15917 + (C146 - C147) * C15922 +
            (C148 - C149) * C47448) *
               C15919 +
           ((C4868 - C4869) * C15921 + (C4870 - C4871) * C15917 +
            C4872 * C15922 + C4873 * C47448) *
               C47479) *
              C47181 * C1118 +
          (((C4869 - C4868) * C15921 + (C4871 - C4870) * C15917 +
            C4874 * C15922 + C4875 * C47448) *
               C15919 +
           ((C4876 - C4877) * C15921 + (C4878 - C4879) * C15917 +
            C4880 * C15922 + C4881 * C47448) *
               C47479) *
              C47181 * C1119 +
          (((C4877 - C4876) * C15921 + (C4879 - C4878) * C15917 +
            C4882 * C15922 + C4883 * C47448) *
               C15919 +
           ((C5736 - C5737) * C15921 + (C5738 - C5739) * C15917 +
            C6048 * C15922 + C6049 * C47448) *
               C47479) *
              C47181 * C1120 +
          (((C5737 - C5736) * C15921 + (C5739 - C5738) * C15917 +
            C6050 * C15922 + C6051 * C47448) *
               C15919 +
           ((C5740 - C5741) * C15921 + (C5742 - C5743) * C15917 +
            (C5744 - C5745) * C15922 + (C5746 - C5747) * C47448) *
               C47479) *
              C47181 * C1121 +
          (((C5741 - C5740) * C15921 + (C5743 - C5742) * C15917 +
            (C5745 - C5744) * C15922 + (C5747 - C5746) * C47448) *
               C15919 +
           ((C47384 * C5729 - C113 * C5727) * C15921 +
            (C47384 * C5733 - C113 * C5730) * C15917 +
            (C47384 * C5731 - C113 * C5728) * C15922 +
            (C47384 * C5734 - C113 * C5732) * C47448) *
               C47479) *
              C47181 * C1122) *
         C47135) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C47384 * C124 - C113 * C117) * C15921 +
             (C47384 * C138 - C113 * C125) * C15917 + (C146 - C147) * C15922 +
             (C148 - C149) * C47448) *
                C15919 +
            ((C4868 - C4869) * C15921 + (C4870 - C4871) * C15917 +
             C4872 * C15922 + C4873 * C47448) *
                C47479) *
               C47501 +
           (((C113 * C468 - C47384 * C478) * C15921 +
             (C113 * C479 - C47384 * C498) * C15917 + (C509 - C510) * C15922 +
             (C511 - C512) * C47448) *
                C15919 +
            ((C5490 - C5491) * C15921 + (C5492 - C5493) * C15917 +
             C5494 * C15922 + C5495 * C47448) *
                C47479) *
               C47490 +
           (((C47384 * C484 - C113 * C471) * C15921 +
             (C47384 * C501 - C113 * C485) * C15917 + (C517 - C518) * C15922 +
             (C519 - C520) * C47448) *
                C15919 +
            ((C5902 - C5903) * C15921 + (C5904 - C5905) * C15917 +
             C6972 * C15922 + C6973 * C47448) *
                C47479) *
               C47464) *
              C1050 +
          ((((C4869 - C4868) * C15921 + (C4871 - C4870) * C15917 +
             C4874 * C15922 + C4875 * C47448) *
                C15919 +
            ((C4876 - C4877) * C15921 + (C4878 - C4879) * C15917 +
             C4880 * C15922 + C4881 * C47448) *
                C47479) *
               C47501 +
           (((C5491 - C5490) * C15921 + (C5493 - C5492) * C15917 +
             C5496 * C15922 + C5497 * C47448) *
                C15919 +
            ((C5906 - C5907) * C15921 + (C5908 - C5909) * C15917 +
             C6246 * C15922 + C6247 * C47448) *
                C47479) *
               C47490 +
           (((C5903 - C5902) * C15921 + (C5905 - C5904) * C15917 +
             C6974 * C15922 + C6975 * C47448) *
                C15919 +
            ((C5910 - C5911) * C15921 + (C5912 - C5913) * C15917 +
             (C5914 - C5915) * C15922 + (C5916 - C5917) * C47448) *
                C47479) *
               C47464) *
              C1051 +
          ((((C4877 - C4876) * C15921 + (C4879 - C4878) * C15917 +
             C4882 * C15922 + C4883 * C47448) *
                C15919 +
            ((C5736 - C5737) * C15921 + (C5738 - C5739) * C15917 +
             C6048 * C15922 + C6049 * C47448) *
                C47479) *
               C47501 +
           (((C5907 - C5906) * C15921 + (C5909 - C5908) * C15917 +
             C6248 * C15922 + C6249 * C47448) *
                C15919 +
            ((C6392 - C6393) * C15921 + (C6394 - C6395) * C15917 +
             (C6250 - C6251) * C15922 + (C6252 - C6253) * C47448) *
                C47479) *
               C47490 +
           (((C5911 - C5910) * C15921 + (C5913 - C5912) * C15917 +
             (C5915 - C5914) * C15922 + (C5917 - C5916) * C47448) *
                C15919 +
            ((C47384 * C5895 - C113 * C5893) * C15921 +
             (C47384 * C5899 - C113 * C5896) * C15917 +
             (C47384 * C5897 - C113 * C5894) * C15922 +
             (C47384 * C5900 - C113 * C5898) * C47448) *
                C47479) *
               C47464) *
              C47461) *
         C47135) /
            (p * q * std::sqrt(p + q));
    d2ee[98] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C47384 * C124 - C113 * C117) * C15921 +
             (C47384 * C138 - C113 * C125) * C15917 + (C146 - C147) * C15922 +
             (C148 - C149) * C47448) *
                C15919 +
            ((C4868 - C4869) * C15921 + (C4870 - C4871) * C15917 +
             C4872 * C15922 + C4873 * C47448) *
                C47479) *
               C47430 +
           (((C113 * C468 - C47384 * C478) * C15921 +
             (C113 * C479 - C47384 * C498) * C15917 + (C509 - C510) * C15922 +
             (C511 - C512) * C47448) *
                C15919 +
            ((C5490 - C5491) * C15921 + (C5492 - C5493) * C15917 +
             C5494 * C15922 + C5495 * C47448) *
                C47479) *
               C47268) *
              C47163 * C636 +
          ((((C147 - C146) * C15921 + (C149 - C148) * C15917 +
             (C151 - C150) * C15922 + (C153 - C152) * C47448) *
                C15919 +
            (C4874 * C15921 + C4875 * C15917 + C352 * C15922 + C353 * C47448) *
                C47479) *
               C47430 +
           (((C510 - C509) * C15921 + (C512 - C511) * C15917 +
             (C514 - C513) * C15922 + (C516 - C515) * C47448) *
                C15919 +
            (C5496 * C15921 + C5497 * C15917 + C939 * C15922 + C940 * C47448) *
                C47479) *
               C47268) *
              C47163 * C637 +
          (((C166 * C15921 + C167 * C15917 + (C155 - C154) * C15922 +
             (C157 - C156) * C47448) *
                C15919 +
            (C4884 * C15921 + C4885 * C15917 + C645 * C15922 + C646 * C47448) *
                C47479) *
               C47430 +
           ((C533 * C15921 + C534 * C15917 + (C526 - C525) * C15922 +
             (C528 - C527) * C47448) *
                C15919 +
            (C5498 * C15921 + C5499 * C15917 + (C935 - C936) * C15922 +
             (C937 - C938) * C47448) *
                C47479) *
               C47268) *
              C47163 * C638 +
          (((C168 * C15921 + C169 * C15917 + (C159 - C158) * C15922 +
             (C161 - C160) * C47448) *
                C15919 +
            (C5164 * C15921 + C5165 * C15917 + (C647 - C648) * C15922 +
             (C649 - C650) * C47448) *
                C47479) *
               C47430 +
           ((C755 * C15921 + C756 * C15917 + (C758 - C757) * C15922 +
             (C760 - C759) * C47448) *
                C15919 +
            ((C936 - C935) * C15921 + (C938 - C937) * C15917 +
             (C47384 * C919 - C113 * C910) * C15922 +
             (C47384 * C925 - C113 * C920) * C47448) *
                C47479) *
               C47268) *
              C47163 * C47465)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C47384 * C124 - C113 * C117) * C15921 +
              (C47384 * C138 - C113 * C125) * C15917 + (C146 - C147) * C15922 +
              (C148 - C149) * C47448) *
                 C15919 +
             ((C4868 - C4869) * C15921 + (C4870 - C4871) * C15917 +
              C4872 * C15922 + C4873 * C47448) *
                 C47479) *
                C47430 +
            (((C113 * C468 - C47384 * C478) * C15921 +
              (C113 * C479 - C47384 * C498) * C15917 + (C509 - C510) * C15922 +
              (C511 - C512) * C47448) *
                 C15919 +
             ((C5490 - C5491) * C15921 + (C5492 - C5493) * C15917 +
              C5494 * C15922 + C5495 * C47448) *
                 C47479) *
                C47268) *
               C1050 +
           ((((C4869 - C4868) * C15921 + (C4871 - C4870) * C15917 +
              C4874 * C15922 + C4875 * C47448) *
                 C15919 +
             ((C4876 - C4877) * C15921 + (C4878 - C4879) * C15917 +
              C4880 * C15922 + C4881 * C47448) *
                 C47479) *
                C47430 +
            (((C5491 - C5490) * C15921 + (C5493 - C5492) * C15917 +
              C5496 * C15922 + C5497 * C47448) *
                 C15919 +
             ((C5906 - C5907) * C15921 + (C5908 - C5909) * C15917 +
              C6246 * C15922 + C6247 * C47448) *
                 C47479) *
                C47268) *
               C1051 +
           ((((C4877 - C4876) * C15921 + (C4879 - C4878) * C15917 +
              C4882 * C15922 + C4883 * C47448) *
                 C15919 +
             ((C5736 - C5737) * C15921 + (C5738 - C5739) * C15917 +
              C6048 * C15922 + C6049 * C47448) *
                 C47479) *
                C47430 +
            (((C5907 - C5906) * C15921 + (C5909 - C5908) * C15917 +
              C6248 * C15922 + C6249 * C47448) *
                 C15919 +
             ((C6392 - C6393) * C15921 + (C6394 - C6395) * C15917 +
              (C6250 - C6251) * C15922 + (C6252 - C6253) * C47448) *
                 C47479) *
                C47268) *
               C47461) *
              C47415 +
          (((((C147 - C146) * C15921 + (C149 - C148) * C15917 +
              (C151 - C150) * C15922 + (C153 - C152) * C47448) *
                 C15919 +
             (C4874 * C15921 + C4875 * C15917 + C352 * C15922 + C353 * C47448) *
                 C47479) *
                C47430 +
            (((C510 - C509) * C15921 + (C512 - C511) * C15917 +
              (C514 - C513) * C15922 + (C516 - C515) * C47448) *
                 C15919 +
             (C5496 * C15921 + C5497 * C15917 + C939 * C15922 + C940 * C47448) *
                 C47479) *
                C47268) *
               C1050 +
           (((C4872 * C15921 + C4873 * C15917 + C4884 * C15922 +
              C4885 * C47448) *
                 C15919 +
             (C4882 * C15921 + C4883 * C15917 + C354 * C15922 + C355 * C47448) *
                 C47479) *
                C47430 +
            ((C5494 * C15921 + C5495 * C15917 + C5498 * C15922 +
              C5499 * C47448) *
                 C15919 +
             (C6248 * C15921 + C6249 * C15917 + (C1565 - C1566) * C15922 +
              (C1567 - C1568) * C47448) *
                 C47479) *
                C47268) *
               C1051 +
           (((C4880 * C15921 + C4881 * C15917 + C4886 * C15922 +
              C4887 * C47448) *
                 C15919 +
             (C6050 * C15921 + C6051 * C15917 + (C1407 - C1408) * C15922 +
              (C1409 - C1410) * C47448) *
                 C47479) *
                C47430 +
            ((C6246 * C15921 + C6247 * C15917 + (C1566 - C1565) * C15922 +
              (C1568 - C1567) * C47448) *
                 C15919 +
             ((C6251 - C6250) * C15921 + (C6253 - C6252) * C15917 +
              (C47384 * C1673 - C113 * C1668) * C15922 +
              (C47384 * C1677 - C113 * C1674) * C47448) *
                 C47479) *
                C47268) *
               C47461) *
              C47146)) /
            (p * q * std::sqrt(p + q));
    d2ee[99] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C47384 * C124 - C113 * C117) * C15921 +
            (C47384 * C138 - C113 * C125) * C15917 + (C146 - C147) * C15922 +
            (C148 - C149) * C47448) *
               C15919 +
           ((C4868 - C4869) * C15921 + (C4870 - C4871) * C15917 +
            C4872 * C15922 + C4873 * C47448) *
               C47479) *
              C47181 * C47163 * C108 +
          (((C147 - C146) * C15921 + (C149 - C148) * C15917 +
            (C151 - C150) * C15922 + (C153 - C152) * C47448) *
               C15919 +
           (C4874 * C15921 + C4875 * C15917 + C352 * C15922 + C353 * C47448) *
               C47479) *
              C47181 * C47163 * C109 +
          ((C166 * C15921 + C167 * C15917 + (C155 - C154) * C15922 +
            (C157 - C156) * C47448) *
               C15919 +
           (C4884 * C15921 + C4885 * C15917 + C645 * C15922 + C646 * C47448) *
               C47479) *
              C47181 * C47163 * C110 +
          ((C168 * C15921 + C169 * C15917 + (C159 - C158) * C15922 +
            (C161 - C160) * C47448) *
               C15919 +
           (C5164 * C15921 + C5165 * C15917 + (C647 - C648) * C15922 +
            (C649 - C650) * C47448) *
               C47479) *
              C47181 * C47163 * C111 +
          ((C170 * C15921 + C171 * C15917 + (C163 - C162) * C15922 +
            (C165 - C164) * C47448) *
               C15919 +
           ((C648 - C647) * C15921 + (C650 - C649) * C15917 +
            (C47384 * C641 - C113 * C640) * C15922 +
            (C47384 * C643 - C113 * C642) * C47448) *
               C47479) *
              C47181 * C47163 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C47384 * C124 - C113 * C117) * C15921 +
             (C47384 * C138 - C113 * C125) * C15917 + (C146 - C147) * C15922 +
             (C148 - C149) * C47448) *
                C15919 +
            ((C4868 - C4869) * C15921 + (C4870 - C4871) * C15917 +
             C4872 * C15922 + C4873 * C47448) *
                C47479) *
               C47181 * C47500 +
           (((C4869 - C4868) * C15921 + (C4871 - C4870) * C15917 +
             C4874 * C15922 + C4875 * C47448) *
                C15919 +
            ((C4876 - C4877) * C15921 + (C4878 - C4879) * C15917 +
             C4880 * C15922 + C4881 * C47448) *
                C47479) *
               C47181 * C47488 +
           (((C4877 - C4876) * C15921 + (C4879 - C4878) * C15917 +
             C4882 * C15922 + C4883 * C47448) *
                C15919 +
            ((C5736 - C5737) * C15921 + (C5738 - C5739) * C15917 +
             C6048 * C15922 + C6049 * C47448) *
                C47479) *
               C47181 * C47461) *
              C284 +
          ((((C147 - C146) * C15921 + (C149 - C148) * C15917 +
             (C151 - C150) * C15922 + (C153 - C152) * C47448) *
                C15919 +
            (C4874 * C15921 + C4875 * C15917 + C352 * C15922 + C353 * C47448) *
                C47479) *
               C47181 * C47500 +
           ((C4872 * C15921 + C4873 * C15917 + C4884 * C15922 +
             C4885 * C47448) *
                C15919 +
            (C4882 * C15921 + C4883 * C15917 + C354 * C15922 + C355 * C47448) *
                C47479) *
               C47181 * C47488 +
           ((C4880 * C15921 + C4881 * C15917 + C4886 * C15922 +
             C4887 * C47448) *
                C15919 +
            (C6050 * C15921 + C6051 * C15917 + (C1407 - C1408) * C15922 +
             (C1409 - C1410) * C47448) *
                C47479) *
               C47181 * C47461) *
              C285 +
          (((C166 * C15921 + C167 * C15917 + (C155 - C154) * C15922 +
             (C157 - C156) * C47448) *
                C15919 +
            (C4884 * C15921 + C4885 * C15917 + C645 * C15922 + C646 * C47448) *
                C47479) *
               C47181 * C47500 +
           ((C352 * C15921 + C353 * C15917 + C5164 * C15922 + C5165 * C47448) *
                C15919 +
            (C4886 * C15921 + C4887 * C15917 + (C348 - C349) * C15922 +
             (C350 - C351) * C47448) *
                C47479) *
               C47181 * C47488 +
           ((C354 * C15921 + C355 * C15917 + (C349 - C348) * C15922 +
             (C351 - C350) * C47448) *
                C15919 +
            ((C1408 - C1407) * C15921 + (C1410 - C1409) * C15917 +
             (C47384 * C1399 - C113 * C1398) * C15922 +
             (C47384 * C1401 - C113 * C1400) * C47448) *
                C47479) *
               C47181 * C47461) *
              C47455)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C47384 * C124 - C113 * C117) * C15921 +
             (C47384 * C138 - C113 * C125) * C15917 + (C146 - C147) * C15922 +
             (C148 - C149) * C47448) *
                C15919 +
            ((C4868 - C4869) * C15921 + (C4870 - C4871) * C15917 +
             C4872 * C15922 + C4873 * C47448) *
                C47479) *
               C47181 * C1050 +
           (((C4869 - C4868) * C15921 + (C4871 - C4870) * C15917 +
             C4874 * C15922 + C4875 * C47448) *
                C15919 +
            ((C4876 - C4877) * C15921 + (C4878 - C4879) * C15917 +
             C4880 * C15922 + C4881 * C47448) *
                C47479) *
               C47181 * C1051 +
           (((C4877 - C4876) * C15921 + (C4879 - C4878) * C15917 +
             C4882 * C15922 + C4883 * C47448) *
                C15919 +
            ((C5736 - C5737) * C15921 + (C5738 - C5739) * C15917 +
             C6048 * C15922 + C6049 * C47448) *
                C47479) *
               C47181 * C47461) *
              C47497 +
          ((((C147 - C146) * C15921 + (C149 - C148) * C15917 +
             (C151 - C150) * C15922 + (C153 - C152) * C47448) *
                C15919 +
            (C4874 * C15921 + C4875 * C15917 + C352 * C15922 + C353 * C47448) *
                C47479) *
               C47181 * C1050 +
           ((C4872 * C15921 + C4873 * C15917 + C4884 * C15922 +
             C4885 * C47448) *
                C15919 +
            (C4882 * C15921 + C4883 * C15917 + C354 * C15922 + C355 * C47448) *
                C47479) *
               C47181 * C1051 +
           ((C4880 * C15921 + C4881 * C15917 + C4886 * C15922 +
             C4887 * C47448) *
                C15919 +
            (C6050 * C15921 + C6051 * C15917 + (C1407 - C1408) * C15922 +
             (C1409 - C1410) * C47448) *
                C47479) *
               C47181 * C47461) *
              C47484 +
          (((C166 * C15921 + C167 * C15917 + (C155 - C154) * C15922 +
             (C157 - C156) * C47448) *
                C15919 +
            (C4884 * C15921 + C4885 * C15917 + C645 * C15922 + C646 * C47448) *
                C47479) *
               C47181 * C1050 +
           ((C352 * C15921 + C353 * C15917 + C5164 * C15922 + C5165 * C47448) *
                C15919 +
            (C4886 * C15921 + C4887 * C15917 + (C348 - C349) * C15922 +
             (C350 - C351) * C47448) *
                C47479) *
               C47181 * C1051 +
           ((C354 * C15921 + C355 * C15917 + (C349 - C348) * C15922 +
             (C351 - C350) * C47448) *
                C15919 +
            ((C1408 - C1407) * C15921 + (C1410 - C1409) * C15917 +
             (C47384 * C1399 - C113 * C1398) * C15922 +
             (C47384 * C1401 - C113 * C1400) * C47448) *
                C47479) *
               C47181 * C47461) *
              C47455)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C47384 * C124 - C113 * C117) * C15921 +
            (C47384 * C138 - C113 * C125) * C15917 + (C146 - C147) * C15922 +
            (C148 - C149) * C47448) *
               C15919 +
           ((C4868 - C4869) * C15921 + (C4870 - C4871) * C15917 +
            C4872 * C15922 + C4873 * C47448) *
               C47479) *
              C47181 * C1118 +
          (((C4869 - C4868) * C15921 + (C4871 - C4870) * C15917 +
            C4874 * C15922 + C4875 * C47448) *
               C15919 +
           ((C4876 - C4877) * C15921 + (C4878 - C4879) * C15917 +
            C4880 * C15922 + C4881 * C47448) *
               C47479) *
              C47181 * C1119 +
          (((C4877 - C4876) * C15921 + (C4879 - C4878) * C15917 +
            C4882 * C15922 + C4883 * C47448) *
               C15919 +
           ((C5736 - C5737) * C15921 + (C5738 - C5739) * C15917 +
            C6048 * C15922 + C6049 * C47448) *
               C47479) *
              C47181 * C1120 +
          (((C5737 - C5736) * C15921 + (C5739 - C5738) * C15917 +
            C6050 * C15922 + C6051 * C47448) *
               C15919 +
           ((C5740 - C5741) * C15921 + (C5742 - C5743) * C15917 +
            (C5744 - C5745) * C15922 + (C5746 - C5747) * C47448) *
               C47479) *
              C47181 * C1121 +
          (((C5741 - C5740) * C15921 + (C5743 - C5742) * C15917 +
            (C5745 - C5744) * C15922 + (C5747 - C5746) * C47448) *
               C15919 +
           ((C47384 * C5729 - C113 * C5727) * C15921 +
            (C47384 * C5733 - C113 * C5730) * C15917 +
            (C47384 * C5731 - C113 * C5728) * C15922 +
            (C47384 * C5734 - C113 * C5732) * C47448) *
               C47479) *
              C47181 * C1122) *
         C47135) /
            (p * q * std::sqrt(p + q));
    d2ee[100] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C47384 * C124 - C113 * C117) * C21355 +
             (C47384 * C138 - C113 * C125) * C47110) *
                C21352 +
            ((C4868 - C4869) * C21355 + (C4870 - C4871) * C47110) * C21353 +
            C21477 * C21354) *
               C47181 * C47222 +
           (((C4869 - C4868) * C21355 + (C4871 - C4870) * C47110) * C21352 +
            ((C4876 - C4877) * C21355 + (C4878 - C4879) * C47110) * C21353 +
            C22118 * C21354) *
               C47181 * C47229 +
           (C21477 * C21352 +
            ((C5736 - C5737) * C21355 + (C5738 - C5739) * C47110) * C21353 +
            C22119 * C21354) *
               C47181 * C2840) *
              C47140 +
          ((((C147 - C146) * C21355 + (C149 - C148) * C47110) * C21352 +
            (C4874 * C21355 + C4875 * C47110) * C21353 + C21475 * C21354) *
               C47181 * C47222 +
           ((C4872 * C21355 + C4873 * C47110) * C21352 +
            (C4882 * C21355 + C4883 * C47110) * C21353 + C22348 * C21354) *
               C47181 * C47229 +
           (C21475 * C21352 + (C6050 * C21355 + C6051 * C47110) * C21353 +
            ((C5744 - C5745) * C21355 + (C5746 - C5747) * C47110) * C21354) *
               C47181 * C2840) *
              C47149 +
          (((C166 * C21355 + C167 * C47110) * C21352 +
            (C4884 * C21355 + C4885 * C47110) * C21353 + C21476 * C21354) *
               C47181 * C47222 +
           ((C352 * C21355 + C353 * C47110) * C21352 +
            (C4886 * C21355 + C4887 * C47110) * C21353 +
            ((C1407 - C1408) * C21355 + (C1409 - C1410) * C47110) * C21354) *
               C47181 * C47229 +
           (C21476 * C21352 +
            ((C1408 - C1407) * C21355 + (C1410 - C1409) * C47110) * C21353 +
            ((C47384 * C1140 - C113 * C1129) * C21355 +
             (C47384 * C1147 - C113 * C1141) * C47110) *
                C21354) *
               C47181 * C2840) *
              C2843)) /
        (p * q * std::sqrt(p + q));
    d2ee[101] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C47384 * C124 - C113 * C117) * C21355 +
              (C47384 * C138 - C113 * C125) * C47110) *
                 C21352 +
             ((C4868 - C4869) * C21355 + (C4870 - C4871) * C47110) * C21353 +
             C21477 * C21354) *
                C47430 +
            (((C113 * C468 - C47384 * C478) * C21355 +
              (C113 * C479 - C47384 * C498) * C47110) *
                 C21352 +
             ((C5490 - C5491) * C21355 + (C5492 - C5493) * C47110) * C21353 +
             C22246 * C21354) *
                C47268) *
               C47222 +
           ((((C4869 - C4868) * C21355 + (C4871 - C4870) * C47110) * C21352 +
             ((C4876 - C4877) * C21355 + (C4878 - C4879) * C47110) * C21353 +
             C22118 * C21354) *
                C47430 +
            (((C5491 - C5490) * C21355 + (C5493 - C5492) * C47110) * C21352 +
             ((C5906 - C5907) * C21355 + (C5908 - C5909) * C47110) * C21353 +
             C22608 * C21354) *
                C47268) *
               C47229 +
           ((C21477 * C21352 +
             ((C5736 - C5737) * C21355 + (C5738 - C5739) * C47110) * C21353 +
             C22119 * C21354) *
                C47430 +
            (C22246 * C21352 +
             ((C6392 - C6393) * C21355 + (C6394 - C6395) * C47110) * C21353 +
             ((C22602 - C22603) * C21355 + (C22604 - C22605) * C47110) *
                 C21354) *
                C47268) *
               C2840) *
              C2580 +
          (((((C147 - C146) * C21355 + (C149 - C148) * C47110) * C21352 +
             (C4874 * C21355 + C4875 * C47110) * C21353 + C21475 * C21354) *
                C47430 +
            (((C510 - C509) * C21355 + (C512 - C511) * C47110) * C21352 +
             (C5496 * C21355 + C5497 * C47110) * C21353 + C22497 * C21354) *
                C47268) *
               C47222 +
           (((C4872 * C21355 + C4873 * C47110) * C21352 +
             (C4882 * C21355 + C4883 * C47110) * C21353 + C22348 * C21354) *
                C47430 +
            ((C5494 * C21355 + C5495 * C47110) * C21352 +
             (C6248 * C21355 + C6249 * C47110) * C21353 +
             ((C6250 - C6251) * C21355 + (C6252 - C6253) * C47110) * C21354) *
                C47268) *
               C47229 +
           ((C21475 * C21352 + (C6050 * C21355 + C6051 * C47110) * C21353 +
             ((C5744 - C5745) * C21355 + (C5746 - C5747) * C47110) * C21354) *
                C47430 +
            (C22497 * C21352 +
             ((C6251 - C6250) * C21355 + (C6253 - C6252) * C47110) * C21353 +
             ((C47384 * C6387 - C113 * C6384) * C21355 +
              (C47384 * C6390 - C113 * C6388) * C47110) *
                 C21354) *
                C47268) *
               C2840) *
              C47146)) /
        (p * q * std::sqrt(p + q));
    d2ee[102] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C47384 * C124 - C113 * C117) * C21355 +
             (C47384 * C138 - C113 * C125) * C47110) *
                C21352 +
            ((C4868 - C4869) * C21355 + (C4870 - C4871) * C47110) * C21353 +
            C21477 * C21354) *
               C47181 * C47507 +
           (((C4869 - C4868) * C21355 + (C4871 - C4870) * C47110) * C21352 +
            ((C4876 - C4877) * C21355 + (C4878 - C4879) * C47110) * C21353 +
            C22118 * C21354) *
               C47181 * C47503 +
           (C21477 * C21352 +
            ((C5736 - C5737) * C21355 + (C5738 - C5739) * C47110) * C21353 +
            C22119 * C21354) *
               C47181 * C47493 +
           (C22118 * C21352 +
            ((C5740 - C5741) * C21355 + (C5742 - C5743) * C47110) * C21353 +
            ((C22110 - C22111) * C21355 + (C22112 - C22113) * C47110) *
                C21354) *
               C47181 * C47471) *
              C2580 +
          ((((C147 - C146) * C21355 + (C149 - C148) * C47110) * C21352 +
            (C4874 * C21355 + C4875 * C47110) * C21353 + C21475 * C21354) *
               C47181 * C47507 +
           ((C4872 * C21355 + C4873 * C47110) * C21352 +
            (C4882 * C21355 + C4883 * C47110) * C21353 + C22348 * C21354) *
               C47181 * C47503 +
           (C21475 * C21352 + (C6050 * C21355 + C6051 * C47110) * C21353 +
            ((C5744 - C5745) * C21355 + (C5746 - C5747) * C47110) * C21354) *
               C47181 * C47493 +
           (C22348 * C21352 +
            ((C5745 - C5744) * C21355 + (C5747 - C5746) * C47110) * C21353 +
            ((C47384 * C5731 - C113 * C5728) * C21355 +
             (C47384 * C5734 - C113 * C5732) * C47110) *
                C21354) *
               C47181 * C47471) *
              C47146)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C47384 * C124 - C113 * C117) * C21355 +
             (C47384 * C138 - C113 * C125) * C47110) *
                C21352 +
            ((C4868 - C4869) * C21355 + (C4870 - C4871) * C47110) * C21353 +
            C21477 * C21354) *
               C47181 * C2472 +
           (((C4869 - C4868) * C21355 + (C4871 - C4870) * C47110) * C21352 +
            ((C4876 - C4877) * C21355 + (C4878 - C4879) * C47110) * C21353 +
            C22118 * C21354) *
               C47181 * C47226) *
              C47506 +
          ((((C147 - C146) * C21355 + (C149 - C148) * C47110) * C21352 +
            (C4874 * C21355 + C4875 * C47110) * C21353 + C21475 * C21354) *
               C47181 * C2472 +
           ((C4872 * C21355 + C4873 * C47110) * C21352 +
            (C4882 * C21355 + C4883 * C47110) * C21353 + C22348 * C21354) *
               C47181 * C47226) *
              C47499 +
          (((C166 * C21355 + C167 * C47110) * C21352 +
            (C4884 * C21355 + C4885 * C47110) * C21353 + C21476 * C21354) *
               C47181 * C2472 +
           ((C352 * C21355 + C353 * C47110) * C21352 +
            (C4886 * C21355 + C4887 * C47110) * C21353 +
            ((C1407 - C1408) * C21355 + (C1409 - C1410) * C47110) * C21354) *
               C47181 * C47226) *
              C47486 +
          (((C168 * C21355 + C169 * C47110) * C21352 +
            (C5164 * C21355 + C5165 * C47110) * C21353 +
            ((C348 - C349) * C21355 + (C350 - C351) * C47110) * C21354) *
               C47181 * C2472 +
           ((C645 * C21355 + C646 * C47110) * C21352 +
            ((C349 - C348) * C21355 + (C351 - C350) * C47110) * C21353 +
            ((C47384 * C1399 - C113 * C1398) * C21355 +
             (C47384 * C1401 - C113 * C1400) * C47110) *
                C21354) *
               C47181 * C47226) *
              C47465)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C47384 * C124 - C113 * C117) * C21355 +
              (C47384 * C138 - C113 * C125) * C47110) *
                 C21352 +
             ((C4868 - C4869) * C21355 + (C4870 - C4871) * C47110) * C21353 +
             C21477 * C21354) *
                C47501 +
            (((C113 * C468 - C47384 * C478) * C21355 +
              (C113 * C479 - C47384 * C498) * C47110) *
                 C21352 +
             ((C5490 - C5491) * C21355 + (C5492 - C5493) * C47110) * C21353 +
             C22246 * C21354) *
                C47490 +
            (((C47384 * C484 - C113 * C471) * C21355 +
              (C47384 * C501 - C113 * C485) * C47110) *
                 C21352 +
             ((C5902 - C5903) * C21355 + (C5904 - C5905) * C47110) * C21353 +
             C22247 * C21354) *
                C47464) *
               C2472 +
           ((((C4869 - C4868) * C21355 + (C4871 - C4870) * C47110) * C21352 +
             ((C4876 - C4877) * C21355 + (C4878 - C4879) * C47110) * C21353 +
             C22118 * C21354) *
                C47501 +
            (((C5491 - C5490) * C21355 + (C5493 - C5492) * C47110) * C21352 +
             ((C5906 - C5907) * C21355 + (C5908 - C5909) * C47110) * C21353 +
             C22608 * C21354) *
                C47490 +
            (((C5903 - C5902) * C21355 + (C5905 - C5904) * C47110) * C21352 +
             ((C5910 - C5911) * C21355 + (C5912 - C5913) * C47110) * C21353 +
             ((C22238 - C22239) * C21355 + (C22240 - C22241) * C47110) *
                 C21354) *
                C47464) *
               C47226) *
              C2580 +
          (((((C147 - C146) * C21355 + (C149 - C148) * C47110) * C21352 +
             (C4874 * C21355 + C4875 * C47110) * C21353 + C21475 * C21354) *
                C47501 +
            (((C510 - C509) * C21355 + (C512 - C511) * C47110) * C21352 +
             (C5496 * C21355 + C5497 * C47110) * C21353 + C22497 * C21354) *
                C47490 +
            (((C518 - C517) * C21355 + (C520 - C519) * C47110) * C21352 +
             (C6974 * C21355 + C6975 * C47110) * C21353 +
             ((C5914 - C5915) * C21355 + (C5916 - C5917) * C47110) * C21354) *
                C47464) *
               C2472 +
           (((C4872 * C21355 + C4873 * C47110) * C21352 +
             (C4882 * C21355 + C4883 * C47110) * C21353 + C22348 * C21354) *
                C47501 +
            ((C5494 * C21355 + C5495 * C47110) * C21352 +
             (C6248 * C21355 + C6249 * C47110) * C21353 +
             ((C6250 - C6251) * C21355 + (C6252 - C6253) * C47110) * C21354) *
                C47490 +
            ((C6972 * C21355 + C6973 * C47110) * C21352 +
             ((C5915 - C5914) * C21355 + (C5917 - C5916) * C47110) * C21353 +
             ((C47384 * C5897 - C113 * C5894) * C21355 +
              (C47384 * C5900 - C113 * C5898) * C47110) *
                 C21354) *
                C47464) *
               C47226) *
              C47146)) /
            (p * q * std::sqrt(p + q));
    d2ee[103] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C47384 * C124 - C113 * C117) * C21355 +
              (C47384 * C138 - C113 * C125) * C47110) *
                 C21352 +
             ((C4868 - C4869) * C21355 + (C4870 - C4871) * C47110) * C21353 +
             C21477 * C21354) *
                C47430 +
            (((C113 * C468 - C47384 * C478) * C21355 +
              (C113 * C479 - C47384 * C498) * C47110) *
                 C21352 +
             ((C5490 - C5491) * C21355 + (C5492 - C5493) * C47110) * C21353 +
             C22246 * C21354) *
                C47268) *
               C2472 +
           ((((C4869 - C4868) * C21355 + (C4871 - C4870) * C47110) * C21352 +
             ((C4876 - C4877) * C21355 + (C4878 - C4879) * C47110) * C21353 +
             C22118 * C21354) *
                C47430 +
            (((C5491 - C5490) * C21355 + (C5493 - C5492) * C47110) * C21352 +
             ((C5906 - C5907) * C21355 + (C5908 - C5909) * C47110) * C21353 +
             C22608 * C21354) *
                C47268) *
               C47226) *
              C47140 +
          (((((C147 - C146) * C21355 + (C149 - C148) * C47110) * C21352 +
             (C4874 * C21355 + C4875 * C47110) * C21353 + C21475 * C21354) *
                C47430 +
            (((C510 - C509) * C21355 + (C512 - C511) * C47110) * C21352 +
             (C5496 * C21355 + C5497 * C47110) * C21353 + C22497 * C21354) *
                C47268) *
               C2472 +
           (((C4872 * C21355 + C4873 * C47110) * C21352 +
             (C4882 * C21355 + C4883 * C47110) * C21353 + C22348 * C21354) *
                C47430 +
            ((C5494 * C21355 + C5495 * C47110) * C21352 +
             (C6248 * C21355 + C6249 * C47110) * C21353 +
             ((C6250 - C6251) * C21355 + (C6252 - C6253) * C47110) * C21354) *
                C47268) *
               C47226) *
              C47149 +
          ((((C166 * C21355 + C167 * C47110) * C21352 +
             (C4884 * C21355 + C4885 * C47110) * C21353 + C21476 * C21354) *
                C47430 +
            ((C533 * C21355 + C534 * C47110) * C21352 +
             (C5498 * C21355 + C5499 * C47110) * C21353 +
             ((C1565 - C1566) * C21355 + (C1567 - C1568) * C47110) * C21354) *
                C47268) *
               C2472 +
           (((C352 * C21355 + C353 * C47110) * C21352 +
             (C4886 * C21355 + C4887 * C47110) * C21353 +
             ((C1407 - C1408) * C21355 + (C1409 - C1410) * C47110) * C21354) *
                C47430 +
            ((C939 * C21355 + C940 * C47110) * C21352 +
             ((C1566 - C1565) * C21355 + (C1568 - C1567) * C47110) * C21353 +
             ((C47384 * C1673 - C113 * C1668) * C21355 +
              (C47384 * C1677 - C113 * C1674) * C47110) *
                 C21354) *
                C47268) *
               C47226) *
              C2843)) /
        (p * q * std::sqrt(p + q));
    d2ee[104] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C47384 * C124 - C113 * C117) * C21355 +
             (C47384 * C138 - C113 * C125) * C47110) *
                C21352 +
            ((C4868 - C4869) * C21355 + (C4870 - C4871) * C47110) * C21353 +
            C21477 * C21354) *
               C47181 * C2472 +
           (((C4869 - C4868) * C21355 + (C4871 - C4870) * C47110) * C21352 +
            ((C4876 - C4877) * C21355 + (C4878 - C4879) * C47110) * C21353 +
            C22118 * C21354) *
               C47181 * C47226) *
              C47506 +
          ((((C147 - C146) * C21355 + (C149 - C148) * C47110) * C21352 +
            (C4874 * C21355 + C4875 * C47110) * C21353 + C21475 * C21354) *
               C47181 * C2472 +
           ((C4872 * C21355 + C4873 * C47110) * C21352 +
            (C4882 * C21355 + C4883 * C47110) * C21353 + C22348 * C21354) *
               C47181 * C47226) *
              C47499 +
          (((C166 * C21355 + C167 * C47110) * C21352 +
            (C4884 * C21355 + C4885 * C47110) * C21353 + C21476 * C21354) *
               C47181 * C2472 +
           ((C352 * C21355 + C353 * C47110) * C21352 +
            (C4886 * C21355 + C4887 * C47110) * C21353 +
            ((C1407 - C1408) * C21355 + (C1409 - C1410) * C47110) * C21354) *
               C47181 * C47226) *
              C47486 +
          (((C168 * C21355 + C169 * C47110) * C21352 +
            (C5164 * C21355 + C5165 * C47110) * C21353 +
            ((C348 - C349) * C21355 + (C350 - C351) * C47110) * C21354) *
               C47181 * C2472 +
           ((C645 * C21355 + C646 * C47110) * C21352 +
            ((C349 - C348) * C21355 + (C351 - C350) * C47110) * C21353 +
            ((C47384 * C1399 - C113 * C1398) * C21355 +
             (C47384 * C1401 - C113 * C1400) * C47110) *
                C21354) *
               C47181 * C47226) *
              C47465)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C47384 * C124 - C113 * C117) * C21355 +
             (C47384 * C138 - C113 * C125) * C47110) *
                C21352 +
            ((C4868 - C4869) * C21355 + (C4870 - C4871) * C47110) * C21353 +
            C21477 * C21354) *
               C47181 * C47507 +
           (((C4869 - C4868) * C21355 + (C4871 - C4870) * C47110) * C21352 +
            ((C4876 - C4877) * C21355 + (C4878 - C4879) * C47110) * C21353 +
            C22118 * C21354) *
               C47181 * C47503 +
           (C21477 * C21352 +
            ((C5736 - C5737) * C21355 + (C5738 - C5739) * C47110) * C21353 +
            C22119 * C21354) *
               C47181 * C47493 +
           (C22118 * C21352 +
            ((C5740 - C5741) * C21355 + (C5742 - C5743) * C47110) * C21353 +
            ((C22110 - C22111) * C21355 + (C22112 - C22113) * C47110) *
                C21354) *
               C47181 * C47471) *
              C2580 +
          ((((C147 - C146) * C21355 + (C149 - C148) * C47110) * C21352 +
            (C4874 * C21355 + C4875 * C47110) * C21353 + C21475 * C21354) *
               C47181 * C47507 +
           ((C4872 * C21355 + C4873 * C47110) * C21352 +
            (C4882 * C21355 + C4883 * C47110) * C21353 + C22348 * C21354) *
               C47181 * C47503 +
           (C21475 * C21352 + (C6050 * C21355 + C6051 * C47110) * C21353 +
            ((C5744 - C5745) * C21355 + (C5746 - C5747) * C47110) * C21354) *
               C47181 * C47493 +
           (C22348 * C21352 +
            ((C5745 - C5744) * C21355 + (C5747 - C5746) * C47110) * C21353 +
            ((C47384 * C5731 - C113 * C5728) * C21355 +
             (C47384 * C5734 - C113 * C5732) * C47110) *
                C21354) *
               C47181 * C47471) *
              C47146)) /
            (p * q * std::sqrt(p + q));
    d2ee[105] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C47384 * C124 - C113 * C117) * C21355 +
              (C47384 * C138 - C113 * C125) * C47110) *
                 C21352 +
             ((C4868 - C4869) * C21355 + (C4870 - C4871) * C47110) * C21353 +
             C21477 * C21354) *
                C3234 +
            (((C113 * C468 - C47384 * C478) * C21355 +
              (C113 * C479 - C47384 * C498) * C47110) *
                 C21352 +
             ((C5490 - C5491) * C21355 + (C5492 - C5493) * C47110) * C21353 +
             C22246 * C21354) *
                C47268) *
               C47222 +
           ((((C4869 - C4868) * C21355 + (C4871 - C4870) * C47110) * C21352 +
             ((C4876 - C4877) * C21355 + (C4878 - C4879) * C47110) * C21353 +
             C22118 * C21354) *
                C3234 +
            (((C5491 - C5490) * C21355 + (C5493 - C5492) * C47110) * C21352 +
             ((C5906 - C5907) * C21355 + (C5908 - C5909) * C47110) * C21353 +
             C22608 * C21354) *
                C47268) *
               C47229 +
           ((C21477 * C21352 +
             ((C5736 - C5737) * C21355 + (C5738 - C5739) * C47110) * C21353 +
             C22119 * C21354) *
                C3234 +
            (C22246 * C21352 +
             ((C6392 - C6393) * C21355 + (C6394 - C6395) * C47110) * C21353 +
             ((C22602 - C22603) * C21355 + (C22604 - C22605) * C47110) *
                 C21354) *
                C47268) *
               C2840) *
              C47415 +
          (((((C147 - C146) * C21355 + (C149 - C148) * C47110) * C21352 +
             (C4874 * C21355 + C4875 * C47110) * C21353 + C21475 * C21354) *
                C3234 +
            (((C510 - C509) * C21355 + (C512 - C511) * C47110) * C21352 +
             (C5496 * C21355 + C5497 * C47110) * C21353 + C22497 * C21354) *
                C47268) *
               C47222 +
           (((C4872 * C21355 + C4873 * C47110) * C21352 +
             (C4882 * C21355 + C4883 * C47110) * C21353 + C22348 * C21354) *
                C3234 +
            ((C5494 * C21355 + C5495 * C47110) * C21352 +
             (C6248 * C21355 + C6249 * C47110) * C21353 +
             ((C6250 - C6251) * C21355 + (C6252 - C6253) * C47110) * C21354) *
                C47268) *
               C47229 +
           ((C21475 * C21352 + (C6050 * C21355 + C6051 * C47110) * C21353 +
             ((C5744 - C5745) * C21355 + (C5746 - C5747) * C47110) * C21354) *
                C3234 +
            (C22497 * C21352 +
             ((C6251 - C6250) * C21355 + (C6253 - C6252) * C47110) * C21353 +
             ((C47384 * C6387 - C113 * C6384) * C21355 +
              (C47384 * C6390 - C113 * C6388) * C47110) *
                 C21354) *
                C47268) *
               C2840) *
              C47146)) /
        (p * q * std::sqrt(p + q));
    d2ee[106] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C47384 * C124 - C113 * C117) * C21355 +
             (C47384 * C138 - C113 * C125) * C47110) *
                C21352 +
            ((C4868 - C4869) * C21355 + (C4870 - C4871) * C47110) * C21353 +
            C21477 * C21354) *
               C47264 +
           (((C113 * C468 - C47384 * C478) * C21355 +
             (C113 * C479 - C47384 * C498) * C47110) *
                C21352 +
            ((C5490 - C5491) * C21355 + (C5492 - C5493) * C47110) * C21353 +
            C22246 * C21354) *
               C47271 +
           (((C47384 * C484 - C113 * C471) * C21355 +
             (C47384 * C501 - C113 * C485) * C47110) *
                C21352 +
            ((C5902 - C5903) * C21355 + (C5904 - C5905) * C47110) * C21353 +
            C22247 * C21354) *
               C3742) *
              C47222 +
          ((((C4869 - C4868) * C21355 + (C4871 - C4870) * C47110) * C21352 +
            ((C4876 - C4877) * C21355 + (C4878 - C4879) * C47110) * C21353 +
            C22118 * C21354) *
               C47264 +
           (((C5491 - C5490) * C21355 + (C5493 - C5492) * C47110) * C21352 +
            ((C5906 - C5907) * C21355 + (C5908 - C5909) * C47110) * C21353 +
            C22608 * C21354) *
               C47271 +
           (((C5903 - C5902) * C21355 + (C5905 - C5904) * C47110) * C21352 +
            ((C5910 - C5911) * C21355 + (C5912 - C5913) * C47110) * C21353 +
            ((C22238 - C22239) * C21355 + (C22240 - C22241) * C47110) *
                C21354) *
               C3742) *
              C47229 +
          ((C21477 * C21352 +
            ((C5736 - C5737) * C21355 + (C5738 - C5739) * C47110) * C21353 +
            C22119 * C21354) *
               C47264 +
           (C22246 * C21352 +
            ((C6392 - C6393) * C21355 + (C6394 - C6395) * C47110) * C21353 +
            ((C22602 - C22603) * C21355 + (C22604 - C22605) * C47110) *
                C21354) *
               C47271 +
           (C22247 * C21352 +
            ((C22239 - C22238) * C21355 + (C22241 - C22240) * C47110) * C21353 +
            ((C47384 * C22230 - C113 * C22229) * C21355 +
             (C47384 * C22232 - C113 * C22231) * C47110) *
                C21354) *
               C3742) *
              C2840) *
         C47135) /
        (p * q * std::sqrt(p + q));
    d2ee[107] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C47384 * C124 - C113 * C117) * C21355 +
             (C47384 * C138 - C113 * C125) * C47110) *
                C21352 +
            ((C4868 - C4869) * C21355 + (C4870 - C4871) * C47110) * C21353 +
            C21477 * C21354) *
               C3234 +
           (((C113 * C468 - C47384 * C478) * C21355 +
             (C113 * C479 - C47384 * C498) * C47110) *
                C21352 +
            ((C5490 - C5491) * C21355 + (C5492 - C5493) * C47110) * C21353 +
            C22246 * C21354) *
               C47268) *
              C47507 +
          ((((C4869 - C4868) * C21355 + (C4871 - C4870) * C47110) * C21352 +
            ((C4876 - C4877) * C21355 + (C4878 - C4879) * C47110) * C21353 +
            C22118 * C21354) *
               C3234 +
           (((C5491 - C5490) * C21355 + (C5493 - C5492) * C47110) * C21352 +
            ((C5906 - C5907) * C21355 + (C5908 - C5909) * C47110) * C21353 +
            C22608 * C21354) *
               C47268) *
              C47503 +
          ((C21477 * C21352 +
            ((C5736 - C5737) * C21355 + (C5738 - C5739) * C47110) * C21353 +
            C22119 * C21354) *
               C3234 +
           (C22246 * C21352 +
            ((C6392 - C6393) * C21355 + (C6394 - C6395) * C47110) * C21353 +
            ((C22602 - C22603) * C21355 + (C22604 - C22605) * C47110) *
                C21354) *
               C47268) *
              C47493 +
          ((C22118 * C21352 +
            ((C5740 - C5741) * C21355 + (C5742 - C5743) * C47110) * C21353 +
            ((C22110 - C22111) * C21355 + (C22112 - C22113) * C47110) *
                C21354) *
               C3234 +
           (C22608 * C21352 +
            ((C22603 - C22602) * C21355 + (C22605 - C22604) * C47110) * C21353 +
            ((C47384 * C22596 - C113 * C22595) * C21355 +
             (C47384 * C22598 - C113 * C22597) * C47110) *
                C21354) *
               C47268) *
              C47471) *
         C47135) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C47384 * C124 - C113 * C117) * C21355 +
              (C47384 * C138 - C113 * C125) * C47110) *
                 C21352 +
             ((C4868 - C4869) * C21355 + (C4870 - C4871) * C47110) * C21353 +
             C21477 * C21354) *
                C3234 +
            (((C113 * C468 - C47384 * C478) * C21355 +
              (C113 * C479 - C47384 * C498) * C47110) *
                 C21352 +
             ((C5490 - C5491) * C21355 + (C5492 - C5493) * C47110) * C21353 +
             C22246 * C21354) *
                C47268) *
               C2472 +
           ((((C4869 - C4868) * C21355 + (C4871 - C4870) * C47110) * C21352 +
             ((C4876 - C4877) * C21355 + (C4878 - C4879) * C47110) * C21353 +
             C22118 * C21354) *
                C3234 +
            (((C5491 - C5490) * C21355 + (C5493 - C5492) * C47110) * C21352 +
             ((C5906 - C5907) * C21355 + (C5908 - C5909) * C47110) * C21353 +
             C22608 * C21354) *
                C47268) *
               C47226) *
              C47497 +
          (((((C147 - C146) * C21355 + (C149 - C148) * C47110) * C21352 +
             (C4874 * C21355 + C4875 * C47110) * C21353 + C21475 * C21354) *
                C3234 +
            (((C510 - C509) * C21355 + (C512 - C511) * C47110) * C21352 +
             (C5496 * C21355 + C5497 * C47110) * C21353 + C22497 * C21354) *
                C47268) *
               C2472 +
           (((C4872 * C21355 + C4873 * C47110) * C21352 +
             (C4882 * C21355 + C4883 * C47110) * C21353 + C22348 * C21354) *
                C3234 +
            ((C5494 * C21355 + C5495 * C47110) * C21352 +
             (C6248 * C21355 + C6249 * C47110) * C21353 +
             ((C6250 - C6251) * C21355 + (C6252 - C6253) * C47110) * C21354) *
                C47268) *
               C47226) *
              C47484 +
          ((((C166 * C21355 + C167 * C47110) * C21352 +
             (C4884 * C21355 + C4885 * C47110) * C21353 + C21476 * C21354) *
                C3234 +
            ((C533 * C21355 + C534 * C47110) * C21352 +
             (C5498 * C21355 + C5499 * C47110) * C21353 +
             ((C1565 - C1566) * C21355 + (C1567 - C1568) * C47110) * C21354) *
                C47268) *
               C2472 +
           (((C352 * C21355 + C353 * C47110) * C21352 +
             (C4886 * C21355 + C4887 * C47110) * C21353 +
             ((C1407 - C1408) * C21355 + (C1409 - C1410) * C47110) * C21354) *
                C3234 +
            ((C939 * C21355 + C940 * C47110) * C21352 +
             ((C1566 - C1565) * C21355 + (C1568 - C1567) * C47110) * C21353 +
             ((C47384 * C1673 - C113 * C1668) * C21355 +
              (C47384 * C1677 - C113 * C1674) * C47110) *
                 C21354) *
                C47268) *
               C47226) *
              C47455)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C47384 * C124 - C113 * C117) * C21355 +
             (C47384 * C138 - C113 * C125) * C47110) *
                C21352 +
            ((C4868 - C4869) * C21355 + (C4870 - C4871) * C47110) * C21353 +
            C21477 * C21354) *
               C47508 +
           (((C113 * C468 - C47384 * C478) * C21355 +
             (C113 * C479 - C47384 * C498) * C47110) *
                C21352 +
            ((C5490 - C5491) * C21355 + (C5492 - C5493) * C47110) * C21353 +
            C22246 * C21354) *
               C47505 +
           (((C47384 * C484 - C113 * C471) * C21355 +
             (C47384 * C501 - C113 * C485) * C47110) *
                C21352 +
            ((C5902 - C5903) * C21355 + (C5904 - C5905) * C47110) * C21353 +
            C22247 * C21354) *
               C47496 +
           (((C113 * C1968 - C47384 * C1974) * C21355 +
             (C113 * C1975 - C47384 * C1986) * C47110) *
                C21352 +
            ((C7248 - C7249) * C21355 + (C7250 - C7251) * C47110) * C21353 +
            ((C23241 - C23242) * C21355 + (C23243 - C23244) * C47110) *
                C21354) *
               C47477) *
              C2472 +
          ((((C4869 - C4868) * C21355 + (C4871 - C4870) * C47110) * C21352 +
            ((C4876 - C4877) * C21355 + (C4878 - C4879) * C47110) * C21353 +
            C22118 * C21354) *
               C47508 +
           (((C5491 - C5490) * C21355 + (C5493 - C5492) * C47110) * C21352 +
            ((C5906 - C5907) * C21355 + (C5908 - C5909) * C47110) * C21353 +
            C22608 * C21354) *
               C47505 +
           (((C5903 - C5902) * C21355 + (C5905 - C5904) * C47110) * C21352 +
            ((C5910 - C5911) * C21355 + (C5912 - C5913) * C47110) * C21353 +
            ((C22238 - C22239) * C21355 + (C22240 - C22241) * C47110) *
                C21354) *
               C47496 +
           (((C7249 - C7248) * C21355 + (C7251 - C7250) * C47110) * C21352 +
            ((C23242 - C23241) * C21355 + (C23244 - C23243) * C47110) * C21353 +
            ((C47384 * C23237 - C113 * C23236) * C21355 +
             (C47384 * C23239 - C113 * C23238) * C47110) *
                C21354) *
               C47477) *
              C47226) *
         C47135) /
            (p * q * std::sqrt(p + q));
    d2ee[108] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C47384 * C124 - C113 * C117) * C21355 +
              (C47384 * C138 - C113 * C125) * C47110) *
                 C21352 +
             ((C4868 - C4869) * C21355 + (C4870 - C4871) * C47110) * C21353 +
             C21477 * C21354) *
                C47264 +
            (((C113 * C468 - C47384 * C478) * C21355 +
              (C113 * C479 - C47384 * C498) * C47110) *
                 C21352 +
             ((C5490 - C5491) * C21355 + (C5492 - C5493) * C47110) * C21353 +
             C22246 * C21354) *
                C47271 +
            (((C47384 * C484 - C113 * C471) * C21355 +
              (C47384 * C501 - C113 * C485) * C47110) *
                 C21352 +
             ((C5902 - C5903) * C21355 + (C5904 - C5905) * C47110) * C21353 +
             C22247 * C21354) *
                C3742) *
               C2472 +
           ((((C4869 - C4868) * C21355 + (C4871 - C4870) * C47110) * C21352 +
             ((C4876 - C4877) * C21355 + (C4878 - C4879) * C47110) * C21353 +
             C22118 * C21354) *
                C47264 +
            (((C5491 - C5490) * C21355 + (C5493 - C5492) * C47110) * C21352 +
             ((C5906 - C5907) * C21355 + (C5908 - C5909) * C47110) * C21353 +
             C22608 * C21354) *
                C47271 +
            (((C5903 - C5902) * C21355 + (C5905 - C5904) * C47110) * C21352 +
             ((C5910 - C5911) * C21355 + (C5912 - C5913) * C47110) * C21353 +
             ((C22238 - C22239) * C21355 + (C22240 - C22241) * C47110) *
                 C21354) *
                C3742) *
               C47226) *
              C47415 +
          (((((C147 - C146) * C21355 + (C149 - C148) * C47110) * C21352 +
             (C4874 * C21355 + C4875 * C47110) * C21353 + C21475 * C21354) *
                C47264 +
            (((C510 - C509) * C21355 + (C512 - C511) * C47110) * C21352 +
             (C5496 * C21355 + C5497 * C47110) * C21353 + C22497 * C21354) *
                C47271 +
            (((C518 - C517) * C21355 + (C520 - C519) * C47110) * C21352 +
             (C6974 * C21355 + C6975 * C47110) * C21353 +
             ((C5914 - C5915) * C21355 + (C5916 - C5917) * C47110) * C21354) *
                C3742) *
               C2472 +
           (((C4872 * C21355 + C4873 * C47110) * C21352 +
             (C4882 * C21355 + C4883 * C47110) * C21353 + C22348 * C21354) *
                C47264 +
            ((C5494 * C21355 + C5495 * C47110) * C21352 +
             (C6248 * C21355 + C6249 * C47110) * C21353 +
             ((C6250 - C6251) * C21355 + (C6252 - C6253) * C47110) * C21354) *
                C47271 +
            ((C6972 * C21355 + C6973 * C47110) * C21352 +
             ((C5915 - C5914) * C21355 + (C5917 - C5916) * C47110) * C21353 +
             ((C47384 * C5897 - C113 * C5894) * C21355 +
              (C47384 * C5900 - C113 * C5898) * C47110) *
                 C21354) *
                C3742) *
               C47226) *
              C47146)) /
        (p * q * std::sqrt(p + q));
    d2ee[109] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C47384 * C124 - C113 * C117) * C21355 +
              (C47384 * C138 - C113 * C125) * C47110) *
                 C21352 +
             ((C4868 - C4869) * C21355 + (C4870 - C4871) * C47110) * C21353 +
             C21477 * C21354) *
                C3234 +
            (((C113 * C468 - C47384 * C478) * C21355 +
              (C113 * C479 - C47384 * C498) * C47110) *
                 C21352 +
             ((C5490 - C5491) * C21355 + (C5492 - C5493) * C47110) * C21353 +
             C22246 * C21354) *
                C47268) *
               C2472 +
           ((((C4869 - C4868) * C21355 + (C4871 - C4870) * C47110) * C21352 +
             ((C4876 - C4877) * C21355 + (C4878 - C4879) * C47110) * C21353 +
             C22118 * C21354) *
                C3234 +
            (((C5491 - C5490) * C21355 + (C5493 - C5492) * C47110) * C21352 +
             ((C5906 - C5907) * C21355 + (C5908 - C5909) * C47110) * C21353 +
             C22608 * C21354) *
                C47268) *
               C47226) *
              C47497 +
          (((((C147 - C146) * C21355 + (C149 - C148) * C47110) * C21352 +
             (C4874 * C21355 + C4875 * C47110) * C21353 + C21475 * C21354) *
                C3234 +
            (((C510 - C509) * C21355 + (C512 - C511) * C47110) * C21352 +
             (C5496 * C21355 + C5497 * C47110) * C21353 + C22497 * C21354) *
                C47268) *
               C2472 +
           (((C4872 * C21355 + C4873 * C47110) * C21352 +
             (C4882 * C21355 + C4883 * C47110) * C21353 + C22348 * C21354) *
                C3234 +
            ((C5494 * C21355 + C5495 * C47110) * C21352 +
             (C6248 * C21355 + C6249 * C47110) * C21353 +
             ((C6250 - C6251) * C21355 + (C6252 - C6253) * C47110) * C21354) *
                C47268) *
               C47226) *
              C47484 +
          ((((C166 * C21355 + C167 * C47110) * C21352 +
             (C4884 * C21355 + C4885 * C47110) * C21353 + C21476 * C21354) *
                C3234 +
            ((C533 * C21355 + C534 * C47110) * C21352 +
             (C5498 * C21355 + C5499 * C47110) * C21353 +
             ((C1565 - C1566) * C21355 + (C1567 - C1568) * C47110) * C21354) *
                C47268) *
               C2472 +
           (((C352 * C21355 + C353 * C47110) * C21352 +
             (C4886 * C21355 + C4887 * C47110) * C21353 +
             ((C1407 - C1408) * C21355 + (C1409 - C1410) * C47110) * C21354) *
                C3234 +
            ((C939 * C21355 + C940 * C47110) * C21352 +
             ((C1566 - C1565) * C21355 + (C1568 - C1567) * C47110) * C21353 +
             ((C47384 * C1673 - C113 * C1668) * C21355 +
              (C47384 * C1677 - C113 * C1674) * C47110) *
                 C21354) *
                C47268) *
               C47226) *
              C47455)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C47384 * C124 - C113 * C117) * C21355 +
             (C47384 * C138 - C113 * C125) * C47110) *
                C21352 +
            ((C4868 - C4869) * C21355 + (C4870 - C4871) * C47110) * C21353 +
            C21477 * C21354) *
               C3234 +
           (((C113 * C468 - C47384 * C478) * C21355 +
             (C113 * C479 - C47384 * C498) * C47110) *
                C21352 +
            ((C5490 - C5491) * C21355 + (C5492 - C5493) * C47110) * C21353 +
            C22246 * C21354) *
               C47268) *
              C47507 +
          ((((C4869 - C4868) * C21355 + (C4871 - C4870) * C47110) * C21352 +
            ((C4876 - C4877) * C21355 + (C4878 - C4879) * C47110) * C21353 +
            C22118 * C21354) *
               C3234 +
           (((C5491 - C5490) * C21355 + (C5493 - C5492) * C47110) * C21352 +
            ((C5906 - C5907) * C21355 + (C5908 - C5909) * C47110) * C21353 +
            C22608 * C21354) *
               C47268) *
              C47503 +
          ((C21477 * C21352 +
            ((C5736 - C5737) * C21355 + (C5738 - C5739) * C47110) * C21353 +
            C22119 * C21354) *
               C3234 +
           (C22246 * C21352 +
            ((C6392 - C6393) * C21355 + (C6394 - C6395) * C47110) * C21353 +
            ((C22602 - C22603) * C21355 + (C22604 - C22605) * C47110) *
                C21354) *
               C47268) *
              C47493 +
          ((C22118 * C21352 +
            ((C5740 - C5741) * C21355 + (C5742 - C5743) * C47110) * C21353 +
            ((C22110 - C22111) * C21355 + (C22112 - C22113) * C47110) *
                C21354) *
               C3234 +
           (C22608 * C21352 +
            ((C22603 - C22602) * C21355 + (C22605 - C22604) * C47110) * C21353 +
            ((C47384 * C22596 - C113 * C22595) * C21355 +
             (C47384 * C22598 - C113 * C22597) * C47110) *
                C21354) *
               C47268) *
              C47471) *
         C47135) /
            (p * q * std::sqrt(p + q));
    d2ee[110] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C47384 * C124 - C113 * C117) * C21355 +
             (C47384 * C138 - C113 * C125) * C47110) *
                C21352 +
            ((C4868 - C4869) * C21355 + (C4870 - C4871) * C47110) * C21353 +
            C21477 * C21354) *
               C47181 * C1392 +
           (((C4869 - C4868) * C21355 + (C4871 - C4870) * C47110) * C21352 +
            ((C4876 - C4877) * C21355 + (C4878 - C4879) * C47110) * C21353 +
            C22118 * C21354) *
               C47181 * C1393 +
           (C21477 * C21352 +
            ((C5736 - C5737) * C21355 + (C5738 - C5739) * C47110) * C21353 +
            C22119 * C21354) *
               C47181 * C1394 +
           (C22118 * C21352 +
            ((C5740 - C5741) * C21355 + (C5742 - C5743) * C47110) * C21353 +
            ((C22110 - C22111) * C21355 + (C22112 - C22113) * C47110) *
                C21354) *
               C47181 * C47471) *
              C47415 +
          ((((C147 - C146) * C21355 + (C149 - C148) * C47110) * C21352 +
            (C4874 * C21355 + C4875 * C47110) * C21353 + C21475 * C21354) *
               C47181 * C1392 +
           ((C4872 * C21355 + C4873 * C47110) * C21352 +
            (C4882 * C21355 + C4883 * C47110) * C21353 + C22348 * C21354) *
               C47181 * C1393 +
           (C21475 * C21352 + (C6050 * C21355 + C6051 * C47110) * C21353 +
            ((C5744 - C5745) * C21355 + (C5746 - C5747) * C47110) * C21354) *
               C47181 * C1394 +
           (C22348 * C21352 +
            ((C5745 - C5744) * C21355 + (C5747 - C5746) * C47110) * C21353 +
            ((C47384 * C5731 - C113 * C5728) * C21355 +
             (C47384 * C5734 - C113 * C5732) * C47110) *
                C21354) *
               C47181 * C47471) *
              C47146)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C47384 * C124 - C113 * C117) * C21355 +
             (C47384 * C138 - C113 * C125) * C47110) *
                C21352 +
            ((C4868 - C4869) * C21355 + (C4870 - C4871) * C47110) * C21353 +
            C21477 * C21354) *
               C47181 * C47429 +
           (((C4869 - C4868) * C21355 + (C4871 - C4870) * C47110) * C21352 +
            ((C4876 - C4877) * C21355 + (C4878 - C4879) * C47110) * C21353 +
            ((C5737 - C5736) * C21355 + (C5739 - C5738) * C47110) * C21354) *
               C47181 * C47226) *
              C636 +
          ((((C147 - C146) * C21355 + (C149 - C148) * C47110) * C21352 +
            (C4874 * C21355 + C4875 * C47110) * C21353 + C21475 * C21354) *
               C47181 * C47429 +
           ((C4872 * C21355 + C4873 * C47110) * C21352 +
            (C4882 * C21355 + C4883 * C47110) * C21353 +
            (C6048 * C21355 + C6049 * C47110) * C21354) *
               C47181 * C47226) *
              C637 +
          (((C166 * C21355 + C167 * C47110) * C21352 +
            (C4884 * C21355 + C4885 * C47110) * C21353 + C21476 * C21354) *
               C47181 * C47429 +
           ((C352 * C21355 + C353 * C47110) * C21352 +
            (C4886 * C21355 + C4887 * C47110) * C21353 +
            ((C1407 - C1408) * C21355 + (C1409 - C1410) * C47110) * C21354) *
               C47181 * C47226) *
              C638 +
          (((C168 * C21355 + C169 * C47110) * C21352 +
            (C5164 * C21355 + C5165 * C47110) * C21353 +
            ((C348 - C349) * C21355 + (C350 - C351) * C47110) * C21354) *
               C47181 * C47429 +
           ((C645 * C21355 + C646 * C47110) * C21352 +
            ((C349 - C348) * C21355 + (C351 - C350) * C47110) * C21353 +
            ((C47384 * C1399 - C113 * C1398) * C21355 +
             (C47384 * C1401 - C113 * C1400) * C47110) *
                C21354) *
               C47181 * C47226) *
              C47465)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C47384 * C124 - C113 * C117) * C21355 +
              (C47384 * C138 - C113 * C125) * C47110) *
                 C21352 +
             ((C4868 - C4869) * C21355 + (C4870 - C4871) * C47110) * C21353 +
             C21477 * C21354) *
                C1788 +
            (((C113 * C468 - C47384 * C478) * C21355 +
              (C113 * C479 - C47384 * C498) * C47110) *
                 C21352 +
             ((C5490 - C5491) * C21355 + (C5492 - C5493) * C47110) * C21353 +
             C22246 * C21354) *
                C1789 +
            (((C47384 * C484 - C113 * C471) * C21355 +
              (C47384 * C501 - C113 * C485) * C47110) *
                 C21352 +
             ((C5902 - C5903) * C21355 + (C5904 - C5905) * C47110) * C21353 +
             C22247 * C21354) *
                C47464) *
               C47429 +
           ((((C4869 - C4868) * C21355 + (C4871 - C4870) * C47110) * C21352 +
             ((C4876 - C4877) * C21355 + (C4878 - C4879) * C47110) * C21353 +
             C22118 * C21354) *
                C1788 +
            (((C5491 - C5490) * C21355 + (C5493 - C5492) * C47110) * C21352 +
             ((C5906 - C5907) * C21355 + (C5908 - C5909) * C47110) * C21353 +
             C22608 * C21354) *
                C1789 +
            (((C5903 - C5902) * C21355 + (C5905 - C5904) * C47110) * C21352 +
             ((C5910 - C5911) * C21355 + (C5912 - C5913) * C47110) * C21353 +
             ((C22238 - C22239) * C21355 + (C22240 - C22241) * C47110) *
                 C21354) *
                C47464) *
               C47226) *
              C47415 +
          (((((C147 - C146) * C21355 + (C149 - C148) * C47110) * C21352 +
             (C4874 * C21355 + C4875 * C47110) * C21353 + C21475 * C21354) *
                C1788 +
            (((C510 - C509) * C21355 + (C512 - C511) * C47110) * C21352 +
             (C5496 * C21355 + C5497 * C47110) * C21353 + C22497 * C21354) *
                C1789 +
            (((C518 - C517) * C21355 + (C520 - C519) * C47110) * C21352 +
             (C6974 * C21355 + C6975 * C47110) * C21353 +
             ((C5914 - C5915) * C21355 + (C5916 - C5917) * C47110) * C21354) *
                C47464) *
               C47429 +
           (((C4872 * C21355 + C4873 * C47110) * C21352 +
             (C4882 * C21355 + C4883 * C47110) * C21353 + C22348 * C21354) *
                C1788 +
            ((C5494 * C21355 + C5495 * C47110) * C21352 +
             (C6248 * C21355 + C6249 * C47110) * C21353 +
             ((C6250 - C6251) * C21355 + (C6252 - C6253) * C47110) * C21354) *
                C1789 +
            ((C6972 * C21355 + C6973 * C47110) * C21352 +
             ((C5915 - C5914) * C21355 + (C5917 - C5916) * C47110) * C21353 +
             ((C47384 * C5897 - C113 * C5894) * C21355 +
              (C47384 * C5900 - C113 * C5898) * C47110) *
                 C21354) *
                C47464) *
               C47226) *
              C47146)) /
            (p * q * std::sqrt(p + q));
    d2ee[111] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C47384 * C124 - C113 * C117) * C21355 +
             (C47384 * C138 - C113 * C125) * C47110) *
                C21352 +
            ((C4868 - C4869) * C21355 + (C4870 - C4871) * C47110) * C21353 +
            C21477 * C21354) *
               C47430 +
           (((C113 * C468 - C47384 * C478) * C21355 +
             (C113 * C479 - C47384 * C498) * C47110) *
                C21352 +
            ((C5490 - C5491) * C21355 + (C5492 - C5493) * C47110) * C21353 +
            C22246 * C21354) *
               C47268) *
              C1392 +
          ((((C4869 - C4868) * C21355 + (C4871 - C4870) * C47110) * C21352 +
            ((C4876 - C4877) * C21355 + (C4878 - C4879) * C47110) * C21353 +
            C22118 * C21354) *
               C47430 +
           (((C5491 - C5490) * C21355 + (C5493 - C5492) * C47110) * C21352 +
            ((C5906 - C5907) * C21355 + (C5908 - C5909) * C47110) * C21353 +
            C22608 * C21354) *
               C47268) *
              C1393 +
          ((C21477 * C21352 +
            ((C5736 - C5737) * C21355 + (C5738 - C5739) * C47110) * C21353 +
            C22119 * C21354) *
               C47430 +
           (C22246 * C21352 +
            ((C6392 - C6393) * C21355 + (C6394 - C6395) * C47110) * C21353 +
            ((C22602 - C22603) * C21355 + (C22604 - C22605) * C47110) *
                C21354) *
               C47268) *
              C1394 +
          ((C22118 * C21352 +
            ((C5740 - C5741) * C21355 + (C5742 - C5743) * C47110) * C21353 +
            ((C22110 - C22111) * C21355 + (C22112 - C22113) * C47110) *
                C21354) *
               C47430 +
           (C22608 * C21352 +
            ((C22603 - C22602) * C21355 + (C22605 - C22604) * C47110) * C21353 +
            ((C47384 * C22596 - C113 * C22595) * C21355 +
             (C47384 * C22598 - C113 * C22597) * C47110) *
                C21354) *
               C47268) *
              C47471) *
         C47135) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C47384 * C124 - C113 * C117) * C21355 +
              (C47384 * C138 - C113 * C125) * C47110) *
                 C21352 +
             ((C4868 - C4869) * C21355 + (C4870 - C4871) * C47110) * C21353 +
             C21477 * C21354) *
                C47430 +
            (((C113 * C468 - C47384 * C478) * C21355 +
              (C113 * C479 - C47384 * C498) * C47110) *
                 C21352 +
             ((C5490 - C5491) * C21355 + (C5492 - C5493) * C47110) * C21353 +
             ((C5907 - C5906) * C21355 + (C5909 - C5908) * C47110) * C21354) *
                C47268) *
               C47429 +
           ((((C4869 - C4868) * C21355 + (C4871 - C4870) * C47110) * C21352 +
             ((C4876 - C4877) * C21355 + (C4878 - C4879) * C47110) * C21353 +
             ((C5737 - C5736) * C21355 + (C5739 - C5738) * C47110) * C21354) *
                C47430 +
            (((C5491 - C5490) * C21355 + (C5493 - C5492) * C47110) * C21352 +
             ((C5906 - C5907) * C21355 + (C5908 - C5909) * C47110) * C21353 +
             ((C6393 - C6392) * C21355 + (C6395 - C6394) * C47110) * C21354) *
                C47268) *
               C47226) *
              C284 +
          (((((C147 - C146) * C21355 + (C149 - C148) * C47110) * C21352 +
             (C4874 * C21355 + C4875 * C47110) * C21353 + C21475 * C21354) *
                C47430 +
            (((C510 - C509) * C21355 + (C512 - C511) * C47110) * C21352 +
             (C5496 * C21355 + C5497 * C47110) * C21353 +
             (C6246 * C21355 + C6247 * C47110) * C21354) *
                C47268) *
               C47429 +
           (((C4872 * C21355 + C4873 * C47110) * C21352 +
             (C4882 * C21355 + C4883 * C47110) * C21353 +
             (C6048 * C21355 + C6049 * C47110) * C21354) *
                C47430 +
            ((C5494 * C21355 + C5495 * C47110) * C21352 +
             (C6248 * C21355 + C6249 * C47110) * C21353 +
             ((C6250 - C6251) * C21355 + (C6252 - C6253) * C47110) * C21354) *
                C47268) *
               C47226) *
              C285 +
          ((((C166 * C21355 + C167 * C47110) * C21352 +
             (C4884 * C21355 + C4885 * C47110) * C21353 + C21476 * C21354) *
                C47430 +
            ((C533 * C21355 + C534 * C47110) * C21352 +
             (C5498 * C21355 + C5499 * C47110) * C21353 +
             ((C1565 - C1566) * C21355 + (C1567 - C1568) * C47110) * C21354) *
                C47268) *
               C47429 +
           (((C352 * C21355 + C353 * C47110) * C21352 +
             (C4886 * C21355 + C4887 * C47110) * C21353 +
             ((C1407 - C1408) * C21355 + (C1409 - C1410) * C47110) * C21354) *
                C47430 +
            ((C939 * C21355 + C940 * C47110) * C21352 +
             ((C1566 - C1565) * C21355 + (C1568 - C1567) * C47110) * C21353 +
             ((C47384 * C1673 - C113 * C1668) * C21355 +
              (C47384 * C1677 - C113 * C1674) * C47110) *
                 C21354) *
                C47268) *
               C47226) *
              C47455)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C47384 * C124 - C113 * C117) * C21355 +
             (C47384 * C138 - C113 * C125) * C47110) *
                C21352 +
            ((C4868 - C4869) * C21355 + (C4870 - C4871) * C47110) * C21353 +
            C21477 * C21354) *
               C2248 +
           (((C113 * C468 - C47384 * C478) * C21355 +
             (C113 * C479 - C47384 * C498) * C47110) *
                C21352 +
            ((C5490 - C5491) * C21355 + (C5492 - C5493) * C47110) * C21353 +
            C22246 * C21354) *
               C2249 +
           (((C47384 * C484 - C113 * C471) * C21355 +
             (C47384 * C501 - C113 * C485) * C47110) *
                C21352 +
            ((C5902 - C5903) * C21355 + (C5904 - C5905) * C47110) * C21353 +
            C22247 * C21354) *
               C2250 +
           (((C113 * C1968 - C47384 * C1974) * C21355 +
             (C113 * C1975 - C47384 * C1986) * C47110) *
                C21352 +
            ((C7248 - C7249) * C21355 + (C7250 - C7251) * C47110) * C21353 +
            ((C23241 - C23242) * C21355 + (C23243 - C23244) * C47110) *
                C21354) *
               C47477) *
              C47429 +
          ((((C4869 - C4868) * C21355 + (C4871 - C4870) * C47110) * C21352 +
            ((C4876 - C4877) * C21355 + (C4878 - C4879) * C47110) * C21353 +
            C22118 * C21354) *
               C2248 +
           (((C5491 - C5490) * C21355 + (C5493 - C5492) * C47110) * C21352 +
            ((C5906 - C5907) * C21355 + (C5908 - C5909) * C47110) * C21353 +
            C22608 * C21354) *
               C2249 +
           (((C5903 - C5902) * C21355 + (C5905 - C5904) * C47110) * C21352 +
            ((C5910 - C5911) * C21355 + (C5912 - C5913) * C47110) * C21353 +
            ((C22238 - C22239) * C21355 + (C22240 - C22241) * C47110) *
                C21354) *
               C2250 +
           (((C7249 - C7248) * C21355 + (C7251 - C7250) * C47110) * C21352 +
            ((C23242 - C23241) * C21355 + (C23244 - C23243) * C47110) * C21353 +
            ((C47384 * C23237 - C113 * C23236) * C21355 +
             (C47384 * C23239 - C113 * C23238) * C47110) *
                C21354) *
               C47477) *
              C47226) *
         C47135) /
            (p * q * std::sqrt(p + q));
    d2ee[112] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C47384 * C124 - C113 * C117) * C21355 +
                (C47384 * C138 - C113 * C125) * C47110) *
                   C21352 +
               ((C4868 - C4869) * C21355 + (C4870 - C4871) * C47110) * C21353 +
               ((C4877 - C4876) * C21355 + (C4879 - C4878) * C47110) * C21354) *
                  C47181 * C47163 * C108 +
              (((C147 - C146) * C21355 + (C149 - C148) * C47110) * C21352 +
               (C4874 * C21355 + C4875 * C47110) * C21353 +
               (C4880 * C21355 + C4881 * C47110) * C21354) *
                  C47181 * C47163 * C109 +
              ((C166 * C21355 + C167 * C47110) * C21352 +
               (C4884 * C21355 + C4885 * C47110) * C21353 +
               (C354 * C21355 + C355 * C47110) * C21354) *
                  C47181 * C47163 * C110 +
              ((C168 * C21355 + C169 * C47110) * C21352 +
               (C5164 * C21355 + C5165 * C47110) * C21353 +
               ((C348 - C349) * C21355 + (C350 - C351) * C47110) * C21354) *
                  C47181 * C47163 * C111 +
              ((C170 * C21355 + C171 * C47110) * C21352 +
               ((C648 - C647) * C21355 + (C650 - C649) * C47110) * C21353 +
               ((C47384 * C315 - C113 * C296) * C21355 +
                (C47384 * C326 - C113 * C316) * C47110) *
                   C21354) *
                  C47181 * C47163 * C112) +
         0.5 * std::pow(Pi, 2.5) *
             (((((C47384 * C124 - C113 * C117) * C21355 +
                 (C47384 * C138 - C113 * C125) * C47110) *
                    C21352 +
                ((C4868 - C4869) * C21355 + (C4870 - C4871) * C47110) * C21353 +
                C21477 * C21354) *
                   C47181 * C47500 +
               (((C4869 - C4868) * C21355 + (C4871 - C4870) * C47110) * C21352 +
                ((C4876 - C4877) * C21355 + (C4878 - C4879) * C47110) * C21353 +
                ((C5737 - C5736) * C21355 + (C5739 - C5738) * C47110) *
                    C21354) *
                   C47181 * C47488 +
               (C21477 * C21352 +
                ((C5736 - C5737) * C21355 + (C5738 - C5739) * C47110) * C21353 +
                ((C5741 - C5740) * C21355 + (C5743 - C5742) * C47110) *
                    C21354) *
                   C47181 * C47461) *
                  C284 +
              ((((C147 - C146) * C21355 + (C149 - C148) * C47110) * C21352 +
                (C4874 * C21355 + C4875 * C47110) * C21353 + C21475 * C21354) *
                   C47181 * C47500 +
               ((C4872 * C21355 + C4873 * C47110) * C21352 +
                (C4882 * C21355 + C4883 * C47110) * C21353 +
                (C6048 * C21355 + C6049 * C47110) * C21354) *
                   C47181 * C47488 +
               (C21475 * C21352 + (C6050 * C21355 + C6051 * C47110) * C21353 +
                ((C5744 - C5745) * C21355 + (C5746 - C5747) * C47110) *
                    C21354) *
                   C47181 * C47461) *
                  C285 +
              (((C166 * C21355 + C167 * C47110) * C21352 +
                (C4884 * C21355 + C4885 * C47110) * C21353 + C21476 * C21354) *
                   C47181 * C47500 +
               ((C352 * C21355 + C353 * C47110) * C21352 +
                (C4886 * C21355 + C4887 * C47110) * C21353 +
                ((C1407 - C1408) * C21355 + (C1409 - C1410) * C47110) *
                    C21354) *
                   C47181 * C47488 +
               (C21476 * C21352 +
                ((C1408 - C1407) * C21355 + (C1410 - C1409) * C47110) * C21353 +
                ((C47384 * C1140 - C113 * C1129) * C21355 +
                 (C47384 * C1147 - C113 * C1141) * C47110) *
                    C21354) *
                   C47181 * C47461) *
                  C47455)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C47384 * C124 - C113 * C117) * C21355 +
             (C47384 * C138 - C113 * C125) * C47110) *
                C21352 +
            ((C4868 - C4869) * C21355 + (C4870 - C4871) * C47110) * C21353 +
            C21477 * C21354) *
               C47501 +
           (((C113 * C468 - C47384 * C478) * C21355 +
             (C113 * C479 - C47384 * C498) * C47110) *
                C21352 +
            ((C5490 - C5491) * C21355 + (C5492 - C5493) * C47110) * C21353 +
            ((C5907 - C5906) * C21355 + (C5909 - C5908) * C47110) * C21354) *
               C47490 +
           (((C47384 * C484 - C113 * C471) * C21355 +
             (C47384 * C501 - C113 * C485) * C47110) *
                C21352 +
            ((C5902 - C5903) * C21355 + (C5904 - C5905) * C47110) * C21353 +
            ((C5911 - C5910) * C21355 + (C5913 - C5912) * C47110) * C21354) *
               C47464) *
              C47163 * C284 +
          ((((C147 - C146) * C21355 + (C149 - C148) * C47110) * C21352 +
            (C4874 * C21355 + C4875 * C47110) * C21353 + C21475 * C21354) *
               C47501 +
           (((C510 - C509) * C21355 + (C512 - C511) * C47110) * C21352 +
            (C5496 * C21355 + C5497 * C47110) * C21353 +
            (C6246 * C21355 + C6247 * C47110) * C21354) *
               C47490 +
           (((C518 - C517) * C21355 + (C520 - C519) * C47110) * C21352 +
            (C6974 * C21355 + C6975 * C47110) * C21353 +
            ((C5914 - C5915) * C21355 + (C5916 - C5917) * C47110) * C21354) *
               C47464) *
              C47163 * C285 +
          (((C166 * C21355 + C167 * C47110) * C21352 +
            (C4884 * C21355 + C4885 * C47110) * C21353 + C21476 * C21354) *
               C47501 +
           ((C533 * C21355 + C534 * C47110) * C21352 +
            (C5498 * C21355 + C5499 * C47110) * C21353 +
            ((C1565 - C1566) * C21355 + (C1567 - C1568) * C47110) * C21354) *
               C47490 +
           ((C535 * C21355 + C536 * C47110) * C21352 +
            ((C2148 - C2147) * C21355 + (C2150 - C2149) * C47110) * C21353 +
            ((C47384 * C1283 - C113 * C1266) * C21355 +
             (C47384 * C1293 - C113 * C1284) * C47110) *
                C21354) *
               C47464) *
              C47163 * C47455)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C47384 * C124 - C113 * C117) * C21355 +
             (C47384 * C138 - C113 * C125) * C47110) *
                C21352 +
            ((C4868 - C4869) * C21355 + (C4870 - C4871) * C47110) * C21353 +
            C21477 * C21354) *
               C47181 * C1050 +
           (((C4869 - C4868) * C21355 + (C4871 - C4870) * C47110) * C21352 +
            ((C4876 - C4877) * C21355 + (C4878 - C4879) * C47110) * C21353 +
            ((C5737 - C5736) * C21355 + (C5739 - C5738) * C47110) * C21354) *
               C47181 * C1051 +
           (C21477 * C21352 +
            ((C5736 - C5737) * C21355 + (C5738 - C5739) * C47110) * C21353 +
            ((C5741 - C5740) * C21355 + (C5743 - C5742) * C47110) * C21354) *
               C47181 * C47461) *
              C47497 +
          ((((C147 - C146) * C21355 + (C149 - C148) * C47110) * C21352 +
            (C4874 * C21355 + C4875 * C47110) * C21353 + C21475 * C21354) *
               C47181 * C1050 +
           ((C4872 * C21355 + C4873 * C47110) * C21352 +
            (C4882 * C21355 + C4883 * C47110) * C21353 +
            (C6048 * C21355 + C6049 * C47110) * C21354) *
               C47181 * C1051 +
           (C21475 * C21352 + (C6050 * C21355 + C6051 * C47110) * C21353 +
            ((C5744 - C5745) * C21355 + (C5746 - C5747) * C47110) * C21354) *
               C47181 * C47461) *
              C47484 +
          (((C166 * C21355 + C167 * C47110) * C21352 +
            (C4884 * C21355 + C4885 * C47110) * C21353 + C21476 * C21354) *
               C47181 * C1050 +
           ((C352 * C21355 + C353 * C47110) * C21352 +
            (C4886 * C21355 + C4887 * C47110) * C21353 +
            ((C1407 - C1408) * C21355 + (C1409 - C1410) * C47110) * C21354) *
               C47181 * C1051 +
           (C21476 * C21352 +
            ((C1408 - C1407) * C21355 + (C1410 - C1409) * C47110) * C21353 +
            ((C47384 * C1140 - C113 * C1129) * C21355 +
             (C47384 * C1147 - C113 * C1141) * C47110) *
                C21354) *
               C47181 * C47461) *
              C47455)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C47384 * C124 - C113 * C117) * C21355 +
            (C47384 * C138 - C113 * C125) * C47110) *
               C21352 +
           ((C4868 - C4869) * C21355 + (C4870 - C4871) * C47110) * C21353 +
           C21477 * C21354) *
              C47181 * C1118 +
          (((C4869 - C4868) * C21355 + (C4871 - C4870) * C47110) * C21352 +
           ((C4876 - C4877) * C21355 + (C4878 - C4879) * C47110) * C21353 +
           C22118 * C21354) *
              C47181 * C1119 +
          (C21477 * C21352 +
           ((C5736 - C5737) * C21355 + (C5738 - C5739) * C47110) * C21353 +
           C22119 * C21354) *
              C47181 * C1120 +
          (C22118 * C21352 +
           ((C5740 - C5741) * C21355 + (C5742 - C5743) * C47110) * C21353 +
           ((C22110 - C22111) * C21355 + (C22112 - C22113) * C47110) * C21354) *
              C47181 * C1121 +
          (C22119 * C21352 +
           ((C22111 - C22110) * C21355 + (C22113 - C22112) * C47110) * C21353 +
           ((C47384 * C22102 - C113 * C22101) * C21355 +
            (C47384 * C22104 - C113 * C22103) * C47110) *
               C21354) *
              C47181 * C1122) *
         C47135) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C47384 * C124 - C113 * C117) * C21355 +
             (C47384 * C138 - C113 * C125) * C47110) *
                C21352 +
            ((C4868 - C4869) * C21355 + (C4870 - C4871) * C47110) * C21353 +
            C21477 * C21354) *
               C47501 +
           (((C113 * C468 - C47384 * C478) * C21355 +
             (C113 * C479 - C47384 * C498) * C47110) *
                C21352 +
            ((C5490 - C5491) * C21355 + (C5492 - C5493) * C47110) * C21353 +
            C22246 * C21354) *
               C47490 +
           (((C47384 * C484 - C113 * C471) * C21355 +
             (C47384 * C501 - C113 * C485) * C47110) *
                C21352 +
            ((C5902 - C5903) * C21355 + (C5904 - C5905) * C47110) * C21353 +
            C22247 * C21354) *
               C47464) *
              C1050 +
          ((((C4869 - C4868) * C21355 + (C4871 - C4870) * C47110) * C21352 +
            ((C4876 - C4877) * C21355 + (C4878 - C4879) * C47110) * C21353 +
            C22118 * C21354) *
               C47501 +
           (((C5491 - C5490) * C21355 + (C5493 - C5492) * C47110) * C21352 +
            ((C5906 - C5907) * C21355 + (C5908 - C5909) * C47110) * C21353 +
            ((C6393 - C6392) * C21355 + (C6395 - C6394) * C47110) * C21354) *
               C47490 +
           (((C5903 - C5902) * C21355 + (C5905 - C5904) * C47110) * C21352 +
            ((C5910 - C5911) * C21355 + (C5912 - C5913) * C47110) * C21353 +
            ((C22238 - C22239) * C21355 + (C22240 - C22241) * C47110) *
                C21354) *
               C47464) *
              C1051 +
          ((C21477 * C21352 +
            ((C5736 - C5737) * C21355 + (C5738 - C5739) * C47110) * C21353 +
            C22119 * C21354) *
               C47501 +
           (C22246 * C21352 +
            ((C6392 - C6393) * C21355 + (C6394 - C6395) * C47110) * C21353 +
            ((C113 * C6383 - C47384 * C6385) * C21355 +
             (C113 * C6386 - C47384 * C6389) * C47110) *
                C21354) *
               C47490 +
           (C22247 * C21352 +
            ((C22239 - C22238) * C21355 + (C22241 - C22240) * C47110) * C21353 +
            ((C47384 * C22230 - C113 * C22229) * C21355 +
             (C47384 * C22232 - C113 * C22231) * C47110) *
                C21354) *
               C47464) *
              C47461) *
         C47135) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C47384 * C124 - C113 * C117) * C21355 +
             (C47384 * C138 - C113 * C125) * C47110) *
                C21352 +
            ((C4868 - C4869) * C21355 + (C4870 - C4871) * C47110) * C21353 +
            C21477 * C21354) *
               C1788 +
           (((C113 * C468 - C47384 * C478) * C21355 +
             (C113 * C479 - C47384 * C498) * C47110) *
                C21352 +
            ((C5490 - C5491) * C21355 + (C5492 - C5493) * C47110) * C21353 +
            C22246 * C21354) *
               C1789 +
           (((C47384 * C484 - C113 * C471) * C21355 +
             (C47384 * C501 - C113 * C485) * C47110) *
                C21352 +
            ((C5902 - C5903) * C21355 + (C5904 - C5905) * C47110) * C21353 +
            C22247 * C21354) *
               C47464) *
              C47163 * C47497 +
          ((((C147 - C146) * C21355 + (C149 - C148) * C47110) * C21352 +
            (C4874 * C21355 + C4875 * C47110) * C21353 + C21475 * C21354) *
               C1788 +
           (((C510 - C509) * C21355 + (C512 - C511) * C47110) * C21352 +
            (C5496 * C21355 + C5497 * C47110) * C21353 + C22497 * C21354) *
               C1789 +
           (((C518 - C517) * C21355 + (C520 - C519) * C47110) * C21352 +
            (C6974 * C21355 + C6975 * C47110) * C21353 +
            ((C5914 - C5915) * C21355 + (C5916 - C5917) * C47110) * C21354) *
               C47464) *
              C47163 * C47484 +
          (((C166 * C21355 + C167 * C47110) * C21352 +
            (C4884 * C21355 + C4885 * C47110) * C21353 + C21476 * C21354) *
               C1788 +
           ((C533 * C21355 + C534 * C47110) * C21352 +
            (C5498 * C21355 + C5499 * C47110) * C21353 +
            ((C1565 - C1566) * C21355 + (C1567 - C1568) * C47110) * C21354) *
               C1789 +
           ((C535 * C21355 + C536 * C47110) * C21352 +
            ((C2148 - C2147) * C21355 + (C2150 - C2149) * C47110) * C21353 +
            ((C47384 * C1283 - C113 * C1266) * C21355 +
             (C47384 * C1293 - C113 * C1284) * C47110) *
                C21354) *
               C47464) *
              C47163 * C47455)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C47384 * C124 - C113 * C117) * C21355 +
             (C47384 * C138 - C113 * C125) * C47110) *
                C21352 +
            ((C4868 - C4869) * C21355 + (C4870 - C4871) * C47110) * C21353 +
            C21477 * C21354) *
               C1788 +
           (((C113 * C468 - C47384 * C478) * C21355 +
             (C113 * C479 - C47384 * C498) * C47110) *
                C21352 +
            ((C5490 - C5491) * C21355 + (C5492 - C5493) * C47110) * C21353 +
            C22246 * C21354) *
               C1789 +
           (((C47384 * C484 - C113 * C471) * C21355 +
             (C47384 * C501 - C113 * C485) * C47110) *
                C21352 +
            ((C5902 - C5903) * C21355 + (C5904 - C5905) * C47110) * C21353 +
            C22247 * C21354) *
               C47464) *
              C47500 +
          ((((C4869 - C4868) * C21355 + (C4871 - C4870) * C47110) * C21352 +
            ((C4876 - C4877) * C21355 + (C4878 - C4879) * C47110) * C21353 +
            C22118 * C21354) *
               C1788 +
           (((C5491 - C5490) * C21355 + (C5493 - C5492) * C47110) * C21352 +
            ((C5906 - C5907) * C21355 + (C5908 - C5909) * C47110) * C21353 +
            C22608 * C21354) *
               C1789 +
           (((C5903 - C5902) * C21355 + (C5905 - C5904) * C47110) * C21352 +
            ((C5910 - C5911) * C21355 + (C5912 - C5913) * C47110) * C21353 +
            ((C22238 - C22239) * C21355 + (C22240 - C22241) * C47110) *
                C21354) *
               C47464) *
              C47488 +
          ((C21477 * C21352 +
            ((C5736 - C5737) * C21355 + (C5738 - C5739) * C47110) * C21353 +
            C22119 * C21354) *
               C1788 +
           (C22246 * C21352 +
            ((C6392 - C6393) * C21355 + (C6394 - C6395) * C47110) * C21353 +
            ((C22602 - C22603) * C21355 + (C22604 - C22605) * C47110) *
                C21354) *
               C1789 +
           (C22247 * C21352 +
            ((C22239 - C22238) * C21355 + (C22241 - C22240) * C47110) * C21353 +
            ((C47384 * C22230 - C113 * C22229) * C21355 +
             (C47384 * C22232 - C113 * C22231) * C47110) *
                C21354) *
               C47464) *
              C47461) *
         C47135) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C47384 * C124 - C113 * C117) * C21355 +
            (C47384 * C138 - C113 * C125) * C47110) *
               C21352 +
           ((C4868 - C4869) * C21355 + (C4870 - C4871) * C47110) * C21353 +
           C21477 * C21354) *
              C1963 +
          (((C113 * C468 - C47384 * C478) * C21355 +
            (C113 * C479 - C47384 * C498) * C47110) *
               C21352 +
           ((C5490 - C5491) * C21355 + (C5492 - C5493) * C47110) * C21353 +
           C22246 * C21354) *
              C1964 +
          (((C47384 * C484 - C113 * C471) * C21355 +
            (C47384 * C501 - C113 * C485) * C47110) *
               C21352 +
           ((C5902 - C5903) * C21355 + (C5904 - C5905) * C47110) * C21353 +
           C22247 * C21354) *
              C1965 +
          (((C113 * C1968 - C47384 * C1974) * C21355 +
            (C113 * C1975 - C47384 * C1986) * C47110) *
               C21352 +
           ((C7248 - C7249) * C21355 + (C7250 - C7251) * C47110) * C21353 +
           ((C113 * C7239 - C47384 * C7241) * C21355 +
            (C113 * C7242 - C47384 * C7245) * C47110) *
               C21354) *
              C1966 +
          (((C47384 * C1980 - C113 * C1971) * C21355 +
            (C47384 * C1989 - C113 * C1981) * C47110) *
               C21352 +
           ((C47384 * C6771 - C113 * C6769) * C21355 +
            (C47384 * C6775 - C113 * C6772) * C47110) *
               C21353 +
           ((C47384 * C22891 - C113 * C22890) * C21355 +
            (C47384 * C22893 - C113 * C22892) * C47110) *
               C21354) *
              C1967) *
         C47163 * C47135) /
            (p * q * std::sqrt(p + q));
    d2ee[113] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C47384 * C124 - C113 * C117) * C21355 +
              (C47384 * C138 - C113 * C125) * C47110) *
                 C21352 +
             ((C4868 - C4869) * C21355 + (C4870 - C4871) * C47110) * C21353 +
             C21477 * C21354) *
                C47430 +
            (((C113 * C468 - C47384 * C478) * C21355 +
              (C113 * C479 - C47384 * C498) * C47110) *
                 C21352 +
             ((C5490 - C5491) * C21355 + (C5492 - C5493) * C47110) * C21353 +
             C22246 * C21354) *
                C47268) *
               C1050 +
           ((((C4869 - C4868) * C21355 + (C4871 - C4870) * C47110) * C21352 +
             ((C4876 - C4877) * C21355 + (C4878 - C4879) * C47110) * C21353 +
             C22118 * C21354) *
                C47430 +
            (((C5491 - C5490) * C21355 + (C5493 - C5492) * C47110) * C21352 +
             ((C5906 - C5907) * C21355 + (C5908 - C5909) * C47110) * C21353 +
             ((C6393 - C6392) * C21355 + (C6395 - C6394) * C47110) * C21354) *
                C47268) *
               C1051 +
           ((C21477 * C21352 +
             ((C5736 - C5737) * C21355 + (C5738 - C5739) * C47110) * C21353 +
             C22119 * C21354) *
                C47430 +
            (C22246 * C21352 +
             ((C6392 - C6393) * C21355 + (C6394 - C6395) * C47110) * C21353 +
             ((C113 * C6383 - C47384 * C6385) * C21355 +
              (C113 * C6386 - C47384 * C6389) * C47110) *
                 C21354) *
                C47268) *
               C47461) *
              C47415 +
          (((((C147 - C146) * C21355 + (C149 - C148) * C47110) * C21352 +
             (C4874 * C21355 + C4875 * C47110) * C21353 + C21475 * C21354) *
                C47430 +
            (((C510 - C509) * C21355 + (C512 - C511) * C47110) * C21352 +
             (C5496 * C21355 + C5497 * C47110) * C21353 + C22497 * C21354) *
                C47268) *
               C1050 +
           (((C4872 * C21355 + C4873 * C47110) * C21352 +
             (C4882 * C21355 + C4883 * C47110) * C21353 + C22348 * C21354) *
                C47430 +
            ((C5494 * C21355 + C5495 * C47110) * C21352 +
             (C6248 * C21355 + C6249 * C47110) * C21353 +
             ((C6250 - C6251) * C21355 + (C6252 - C6253) * C47110) * C21354) *
                C47268) *
               C1051 +
           ((C21475 * C21352 + (C6050 * C21355 + C6051 * C47110) * C21353 +
             ((C5744 - C5745) * C21355 + (C5746 - C5747) * C47110) * C21354) *
                C47430 +
            (C22497 * C21352 +
             ((C6251 - C6250) * C21355 + (C6253 - C6252) * C47110) * C21353 +
             ((C47384 * C6387 - C113 * C6384) * C21355 +
              (C47384 * C6390 - C113 * C6388) * C47110) *
                 C21354) *
                C47268) *
               C47461) *
              C47146)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C47384 * C124 - C113 * C117) * C21355 +
             (C47384 * C138 - C113 * C125) * C47110) *
                C21352 +
            ((C4868 - C4869) * C21355 + (C4870 - C4871) * C47110) * C21353 +
            C21477 * C21354) *
               C47430 +
           (((C113 * C468 - C47384 * C478) * C21355 +
             (C113 * C479 - C47384 * C498) * C47110) *
                C21352 +
            ((C5490 - C5491) * C21355 + (C5492 - C5493) * C47110) * C21353 +
            ((C5907 - C5906) * C21355 + (C5909 - C5908) * C47110) * C21354) *
               C47268) *
              C47163 * C636 +
          ((((C147 - C146) * C21355 + (C149 - C148) * C47110) * C21352 +
            (C4874 * C21355 + C4875 * C47110) * C21353 + C21475 * C21354) *
               C47430 +
           (((C510 - C509) * C21355 + (C512 - C511) * C47110) * C21352 +
            (C5496 * C21355 + C5497 * C47110) * C21353 +
            (C6246 * C21355 + C6247 * C47110) * C21354) *
               C47268) *
              C47163 * C637 +
          (((C166 * C21355 + C167 * C47110) * C21352 +
            (C4884 * C21355 + C4885 * C47110) * C21353 + C21476 * C21354) *
               C47430 +
           ((C533 * C21355 + C534 * C47110) * C21352 +
            (C5498 * C21355 + C5499 * C47110) * C21353 +
            ((C1565 - C1566) * C21355 + (C1567 - C1568) * C47110) * C21354) *
               C47268) *
              C47163 * C638 +
          (((C168 * C21355 + C169 * C47110) * C21352 +
            (C5164 * C21355 + C5165 * C47110) * C21353 +
            ((C348 - C349) * C21355 + (C350 - C351) * C47110) * C21354) *
               C47430 +
           ((C755 * C21355 + C756 * C47110) * C21352 +
            ((C936 - C935) * C21355 + (C938 - C937) * C47110) * C21353 +
            ((C47384 * C1557 - C113 * C1556) * C21355 +
             (C47384 * C1559 - C113 * C1558) * C47110) *
                C21354) *
               C47268) *
              C47163 * C47465)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C47384 * C124 - C113 * C117) * C21355 +
             (C47384 * C138 - C113 * C125) * C47110) *
                C21352 +
            ((C4868 - C4869) * C21355 + (C4870 - C4871) * C47110) * C21353 +
            C21477 * C21354) *
               C2248 +
           (((C113 * C468 - C47384 * C478) * C21355 +
             (C113 * C479 - C47384 * C498) * C47110) *
                C21352 +
            ((C5490 - C5491) * C21355 + (C5492 - C5493) * C47110) * C21353 +
            C22246 * C21354) *
               C2249 +
           (((C47384 * C484 - C113 * C471) * C21355 +
             (C47384 * C501 - C113 * C485) * C47110) *
                C21352 +
            ((C5902 - C5903) * C21355 + (C5904 - C5905) * C47110) * C21353 +
            C22247 * C21354) *
               C2250 +
           (((C113 * C1968 - C47384 * C1974) * C21355 +
             (C113 * C1975 - C47384 * C1986) * C47110) *
                C21352 +
            ((C7248 - C7249) * C21355 + (C7250 - C7251) * C47110) * C21353 +
            ((C113 * C7239 - C47384 * C7241) * C21355 +
             (C113 * C7242 - C47384 * C7245) * C47110) *
                C21354) *
               C47477) *
              C47163 * C47415 +
          ((((C147 - C146) * C21355 + (C149 - C148) * C47110) * C21352 +
            (C4874 * C21355 + C4875 * C47110) * C21353 + C21475 * C21354) *
               C2248 +
           (((C510 - C509) * C21355 + (C512 - C511) * C47110) * C21352 +
            (C5496 * C21355 + C5497 * C47110) * C21353 + C22497 * C21354) *
               C2249 +
           (((C518 - C517) * C21355 + (C520 - C519) * C47110) * C21352 +
            (C6974 * C21355 + C6975 * C47110) * C21353 +
            ((C5914 - C5915) * C21355 + (C5916 - C5917) * C47110) * C21354) *
               C2250 +
           (((C2258 - C2257) * C21355 + (C2260 - C2259) * C47110) * C21352 +
            ((C7107 - C7106) * C21355 + (C7109 - C7108) * C47110) * C21353 +
            ((C47384 * C7243 - C113 * C7240) * C21355 +
             (C47384 * C7246 - C113 * C7244) * C47110) *
                C21354) *
               C47477) *
              C47163 * C47146)) /
            (p * q * std::sqrt(p + q));
    d2ee[114] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C47384 * C124 - C113 * C117) * C21355 +
             (C47384 * C138 - C113 * C125) * C47110) *
                C21352 +
            ((C4868 - C4869) * C21355 + (C4870 - C4871) * C47110) * C21353 +
            C21477 * C21354) *
               C47181 * C47500 +
           (((C4869 - C4868) * C21355 + (C4871 - C4870) * C47110) * C21352 +
            ((C4876 - C4877) * C21355 + (C4878 - C4879) * C47110) * C21353 +
            ((C5737 - C5736) * C21355 + (C5739 - C5738) * C47110) * C21354) *
               C47181 * C47488 +
           (C21477 * C21352 +
            ((C5736 - C5737) * C21355 + (C5738 - C5739) * C47110) * C21353 +
            ((C5741 - C5740) * C21355 + (C5743 - C5742) * C47110) * C21354) *
               C47181 * C47461) *
              C284 +
          ((((C147 - C146) * C21355 + (C149 - C148) * C47110) * C21352 +
            (C4874 * C21355 + C4875 * C47110) * C21353 + C21475 * C21354) *
               C47181 * C47500 +
           ((C4872 * C21355 + C4873 * C47110) * C21352 +
            (C4882 * C21355 + C4883 * C47110) * C21353 +
            (C6048 * C21355 + C6049 * C47110) * C21354) *
               C47181 * C47488 +
           (C21475 * C21352 + (C6050 * C21355 + C6051 * C47110) * C21353 +
            ((C5744 - C5745) * C21355 + (C5746 - C5747) * C47110) * C21354) *
               C47181 * C47461) *
              C285 +
          (((C166 * C21355 + C167 * C47110) * C21352 +
            (C4884 * C21355 + C4885 * C47110) * C21353 + C21476 * C21354) *
               C47181 * C47500 +
           ((C352 * C21355 + C353 * C47110) * C21352 +
            (C4886 * C21355 + C4887 * C47110) * C21353 +
            ((C1407 - C1408) * C21355 + (C1409 - C1410) * C47110) * C21354) *
               C47181 * C47488 +
           (C21476 * C21352 +
            ((C1408 - C1407) * C21355 + (C1410 - C1409) * C47110) * C21353 +
            ((C47384 * C1140 - C113 * C1129) * C21355 +
             (C47384 * C1147 - C113 * C1141) * C47110) *
                C21354) *
               C47181 * C47461) *
              C47455)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C47384 * C124 - C113 * C117) * C21355 +
            (C47384 * C138 - C113 * C125) * C47110) *
               C21352 +
           ((C4868 - C4869) * C21355 + (C4870 - C4871) * C47110) * C21353 +
           ((C4877 - C4876) * C21355 + (C4879 - C4878) * C47110) * C21354) *
              C47181 * C47163 * C108 +
          (((C147 - C146) * C21355 + (C149 - C148) * C47110) * C21352 +
           (C4874 * C21355 + C4875 * C47110) * C21353 +
           (C4880 * C21355 + C4881 * C47110) * C21354) *
              C47181 * C47163 * C109 +
          ((C166 * C21355 + C167 * C47110) * C21352 +
           (C4884 * C21355 + C4885 * C47110) * C21353 +
           (C354 * C21355 + C355 * C47110) * C21354) *
              C47181 * C47163 * C110 +
          ((C168 * C21355 + C169 * C47110) * C21352 +
           (C5164 * C21355 + C5165 * C47110) * C21353 +
           ((C348 - C349) * C21355 + (C350 - C351) * C47110) * C21354) *
              C47181 * C47163 * C111 +
          ((C170 * C21355 + C171 * C47110) * C21352 +
           ((C648 - C647) * C21355 + (C650 - C649) * C47110) * C21353 +
           ((C47384 * C315 - C113 * C296) * C21355 +
            (C47384 * C326 - C113 * C316) * C47110) *
               C21354) *
              C47181 * C47163 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C47384 * C124 - C113 * C117) * C21355 +
             (C47384 * C138 - C113 * C125) * C47110) *
                C21352 +
            ((C4868 - C4869) * C21355 + (C4870 - C4871) * C47110) * C21353 +
            C21477 * C21354) *
               C47181 * C1050 +
           (((C4869 - C4868) * C21355 + (C4871 - C4870) * C47110) * C21352 +
            ((C4876 - C4877) * C21355 + (C4878 - C4879) * C47110) * C21353 +
            ((C5737 - C5736) * C21355 + (C5739 - C5738) * C47110) * C21354) *
               C47181 * C1051 +
           (C21477 * C21352 +
            ((C5736 - C5737) * C21355 + (C5738 - C5739) * C47110) * C21353 +
            ((C5741 - C5740) * C21355 + (C5743 - C5742) * C47110) * C21354) *
               C47181 * C47461) *
              C47497 +
          ((((C147 - C146) * C21355 + (C149 - C148) * C47110) * C21352 +
            (C4874 * C21355 + C4875 * C47110) * C21353 + C21475 * C21354) *
               C47181 * C1050 +
           ((C4872 * C21355 + C4873 * C47110) * C21352 +
            (C4882 * C21355 + C4883 * C47110) * C21353 +
            (C6048 * C21355 + C6049 * C47110) * C21354) *
               C47181 * C1051 +
           (C21475 * C21352 + (C6050 * C21355 + C6051 * C47110) * C21353 +
            ((C5744 - C5745) * C21355 + (C5746 - C5747) * C47110) * C21354) *
               C47181 * C47461) *
              C47484 +
          (((C166 * C21355 + C167 * C47110) * C21352 +
            (C4884 * C21355 + C4885 * C47110) * C21353 + C21476 * C21354) *
               C47181 * C1050 +
           ((C352 * C21355 + C353 * C47110) * C21352 +
            (C4886 * C21355 + C4887 * C47110) * C21353 +
            ((C1407 - C1408) * C21355 + (C1409 - C1410) * C47110) * C21354) *
               C47181 * C1051 +
           (C21476 * C21352 +
            ((C1408 - C1407) * C21355 + (C1410 - C1409) * C47110) * C21353 +
            ((C47384 * C1140 - C113 * C1129) * C21355 +
             (C47384 * C1147 - C113 * C1141) * C47110) *
                C21354) *
               C47181 * C47461) *
              C47455)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C47384 * C124 - C113 * C117) * C21355 +
            (C47384 * C138 - C113 * C125) * C47110) *
               C21352 +
           ((C4868 - C4869) * C21355 + (C4870 - C4871) * C47110) * C21353 +
           C21477 * C21354) *
              C47181 * C1118 +
          (((C4869 - C4868) * C21355 + (C4871 - C4870) * C47110) * C21352 +
           ((C4876 - C4877) * C21355 + (C4878 - C4879) * C47110) * C21353 +
           C22118 * C21354) *
              C47181 * C1119 +
          (C21477 * C21352 +
           ((C5736 - C5737) * C21355 + (C5738 - C5739) * C47110) * C21353 +
           C22119 * C21354) *
              C47181 * C1120 +
          (C22118 * C21352 +
           ((C5740 - C5741) * C21355 + (C5742 - C5743) * C47110) * C21353 +
           ((C22110 - C22111) * C21355 + (C22112 - C22113) * C47110) * C21354) *
              C47181 * C1121 +
          (C22119 * C21352 +
           ((C22111 - C22110) * C21355 + (C22113 - C22112) * C47110) * C21353 +
           ((C47384 * C22102 - C113 * C22101) * C21355 +
            (C47384 * C22104 - C113 * C22103) * C47110) *
               C21354) *
              C47181 * C1122) *
         C47135) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C47384 * C124 - C113 * C117) * C21355 +
             (C47384 * C138 - C113 * C125) * C47110) *
                C21352 +
            ((C4868 - C4869) * C21355 + (C4870 - C4871) * C47110) * C21353 +
            C21477 * C21354) *
               C1788 +
           (((C113 * C468 - C47384 * C478) * C21355 +
             (C113 * C479 - C47384 * C498) * C47110) *
                C21352 +
            ((C5490 - C5491) * C21355 + (C5492 - C5493) * C47110) * C21353 +
            C22246 * C21354) *
               C1789 +
           (((C47384 * C484 - C113 * C471) * C21355 +
             (C47384 * C501 - C113 * C485) * C47110) *
                C21352 +
            ((C5902 - C5903) * C21355 + (C5904 - C5905) * C47110) * C21353 +
            C22247 * C21354) *
               C47464) *
              C47163 * C47497 +
          ((((C147 - C146) * C21355 + (C149 - C148) * C47110) * C21352 +
            (C4874 * C21355 + C4875 * C47110) * C21353 + C21475 * C21354) *
               C1788 +
           (((C510 - C509) * C21355 + (C512 - C511) * C47110) * C21352 +
            (C5496 * C21355 + C5497 * C47110) * C21353 + C22497 * C21354) *
               C1789 +
           (((C518 - C517) * C21355 + (C520 - C519) * C47110) * C21352 +
            (C6974 * C21355 + C6975 * C47110) * C21353 +
            ((C5914 - C5915) * C21355 + (C5916 - C5917) * C47110) * C21354) *
               C47464) *
              C47163 * C47484 +
          (((C166 * C21355 + C167 * C47110) * C21352 +
            (C4884 * C21355 + C4885 * C47110) * C21353 + C21476 * C21354) *
               C1788 +
           ((C533 * C21355 + C534 * C47110) * C21352 +
            (C5498 * C21355 + C5499 * C47110) * C21353 +
            ((C1565 - C1566) * C21355 + (C1567 - C1568) * C47110) * C21354) *
               C1789 +
           ((C535 * C21355 + C536 * C47110) * C21352 +
            ((C2148 - C2147) * C21355 + (C2150 - C2149) * C47110) * C21353 +
            ((C47384 * C1283 - C113 * C1266) * C21355 +
             (C47384 * C1293 - C113 * C1284) * C47110) *
                C21354) *
               C47464) *
              C47163 * C47455)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C47384 * C124 - C113 * C117) * C21355 +
             (C47384 * C138 - C113 * C125) * C47110) *
                C21352 +
            ((C4868 - C4869) * C21355 + (C4870 - C4871) * C47110) * C21353 +
            C21477 * C21354) *
               C1788 +
           (((C113 * C468 - C47384 * C478) * C21355 +
             (C113 * C479 - C47384 * C498) * C47110) *
                C21352 +
            ((C5490 - C5491) * C21355 + (C5492 - C5493) * C47110) * C21353 +
            C22246 * C21354) *
               C1789 +
           (((C47384 * C484 - C113 * C471) * C21355 +
             (C47384 * C501 - C113 * C485) * C47110) *
                C21352 +
            ((C5902 - C5903) * C21355 + (C5904 - C5905) * C47110) * C21353 +
            C22247 * C21354) *
               C47464) *
              C47500 +
          ((((C4869 - C4868) * C21355 + (C4871 - C4870) * C47110) * C21352 +
            ((C4876 - C4877) * C21355 + (C4878 - C4879) * C47110) * C21353 +
            C22118 * C21354) *
               C1788 +
           (((C5491 - C5490) * C21355 + (C5493 - C5492) * C47110) * C21352 +
            ((C5906 - C5907) * C21355 + (C5908 - C5909) * C47110) * C21353 +
            C22608 * C21354) *
               C1789 +
           (((C5903 - C5902) * C21355 + (C5905 - C5904) * C47110) * C21352 +
            ((C5910 - C5911) * C21355 + (C5912 - C5913) * C47110) * C21353 +
            ((C22238 - C22239) * C21355 + (C22240 - C22241) * C47110) *
                C21354) *
               C47464) *
              C47488 +
          ((C21477 * C21352 +
            ((C5736 - C5737) * C21355 + (C5738 - C5739) * C47110) * C21353 +
            C22119 * C21354) *
               C1788 +
           (C22246 * C21352 +
            ((C6392 - C6393) * C21355 + (C6394 - C6395) * C47110) * C21353 +
            ((C22602 - C22603) * C21355 + (C22604 - C22605) * C47110) *
                C21354) *
               C1789 +
           (C22247 * C21352 +
            ((C22239 - C22238) * C21355 + (C22241 - C22240) * C47110) * C21353 +
            ((C47384 * C22230 - C113 * C22229) * C21355 +
             (C47384 * C22232 - C113 * C22231) * C47110) *
                C21354) *
               C47464) *
              C47461) *
         C47135) /
            (p * q * std::sqrt(p + q));
    d2ee[115] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C47384 * C124 - C113 * C117) * C21355 +
              (C47384 * C138 - C113 * C125) * C47110) *
                 C21352 +
             ((C4868 - C4869) * C21355 + (C4870 - C4871) * C47110) * C21353 +
             C21477 * C21354) *
                C3234 +
            (((C113 * C468 - C47384 * C478) * C21355 +
              (C113 * C479 - C47384 * C498) * C47110) *
                 C21352 +
             ((C5490 - C5491) * C21355 + (C5492 - C5493) * C47110) * C21353 +
             C22246 * C21354) *
                C47268) *
               C47429 +
           ((((C4869 - C4868) * C21355 + (C4871 - C4870) * C47110) * C21352 +
             ((C4876 - C4877) * C21355 + (C4878 - C4879) * C47110) * C21353 +
             C22118 * C21354) *
                C3234 +
            (((C5491 - C5490) * C21355 + (C5493 - C5492) * C47110) * C21352 +
             ((C5906 - C5907) * C21355 + (C5908 - C5909) * C47110) * C21353 +
             C22608 * C21354) *
                C47268) *
               C47226) *
              C47140 +
          (((((C147 - C146) * C21355 + (C149 - C148) * C47110) * C21352 +
             (C4874 * C21355 + C4875 * C47110) * C21353 + C21475 * C21354) *
                C3234 +
            (((C510 - C509) * C21355 + (C512 - C511) * C47110) * C21352 +
             (C5496 * C21355 + C5497 * C47110) * C21353 + C22497 * C21354) *
                C47268) *
               C47429 +
           (((C4872 * C21355 + C4873 * C47110) * C21352 +
             (C4882 * C21355 + C4883 * C47110) * C21353 + C22348 * C21354) *
                C3234 +
            ((C5494 * C21355 + C5495 * C47110) * C21352 +
             (C6248 * C21355 + C6249 * C47110) * C21353 +
             ((C6250 - C6251) * C21355 + (C6252 - C6253) * C47110) * C21354) *
                C47268) *
               C47226) *
              C47149 +
          ((((C166 * C21355 + C167 * C47110) * C21352 +
             (C4884 * C21355 + C4885 * C47110) * C21353 + C21476 * C21354) *
                C3234 +
            ((C533 * C21355 + C534 * C47110) * C21352 +
             (C5498 * C21355 + C5499 * C47110) * C21353 +
             ((C1565 - C1566) * C21355 + (C1567 - C1568) * C47110) * C21354) *
                C47268) *
               C47429 +
           (((C352 * C21355 + C353 * C47110) * C21352 +
             (C4886 * C21355 + C4887 * C47110) * C21353 +
             ((C1407 - C1408) * C21355 + (C1409 - C1410) * C47110) * C21354) *
                C3234 +
            ((C939 * C21355 + C940 * C47110) * C21352 +
             ((C1566 - C1565) * C21355 + (C1568 - C1567) * C47110) * C21353 +
             ((C47384 * C1673 - C113 * C1668) * C21355 +
              (C47384 * C1677 - C113 * C1674) * C47110) *
                 C21354) *
                C47268) *
               C47226) *
              C2843)) /
        (p * q * std::sqrt(p + q));
    d2ee[116] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C47384 * C124 - C113 * C117) * C21355 +
              (C47384 * C138 - C113 * C125) * C47110) *
                 C21352 +
             ((C4868 - C4869) * C21355 + (C4870 - C4871) * C47110) * C21353 +
             C21477 * C21354) *
                C47264 +
            (((C113 * C468 - C47384 * C478) * C21355 +
              (C113 * C479 - C47384 * C498) * C47110) *
                 C21352 +
             ((C5490 - C5491) * C21355 + (C5492 - C5493) * C47110) * C21353 +
             C22246 * C21354) *
                C47271 +
            (((C47384 * C484 - C113 * C471) * C21355 +
              (C47384 * C501 - C113 * C485) * C47110) *
                 C21352 +
             ((C5902 - C5903) * C21355 + (C5904 - C5905) * C47110) * C21353 +
             C22247 * C21354) *
                C3742) *
               C47429 +
           ((((C4869 - C4868) * C21355 + (C4871 - C4870) * C47110) * C21352 +
             ((C4876 - C4877) * C21355 + (C4878 - C4879) * C47110) * C21353 +
             C22118 * C21354) *
                C47264 +
            (((C5491 - C5490) * C21355 + (C5493 - C5492) * C47110) * C21352 +
             ((C5906 - C5907) * C21355 + (C5908 - C5909) * C47110) * C21353 +
             C22608 * C21354) *
                C47271 +
            (((C5903 - C5902) * C21355 + (C5905 - C5904) * C47110) * C21352 +
             ((C5910 - C5911) * C21355 + (C5912 - C5913) * C47110) * C21353 +
             ((C22238 - C22239) * C21355 + (C22240 - C22241) * C47110) *
                 C21354) *
                C3742) *
               C47226) *
              C2580 +
          (((((C147 - C146) * C21355 + (C149 - C148) * C47110) * C21352 +
             (C4874 * C21355 + C4875 * C47110) * C21353 + C21475 * C21354) *
                C47264 +
            (((C510 - C509) * C21355 + (C512 - C511) * C47110) * C21352 +
             (C5496 * C21355 + C5497 * C47110) * C21353 + C22497 * C21354) *
                C47271 +
            (((C518 - C517) * C21355 + (C520 - C519) * C47110) * C21352 +
             (C6974 * C21355 + C6975 * C47110) * C21353 +
             ((C5914 - C5915) * C21355 + (C5916 - C5917) * C47110) * C21354) *
                C3742) *
               C47429 +
           (((C4872 * C21355 + C4873 * C47110) * C21352 +
             (C4882 * C21355 + C4883 * C47110) * C21353 + C22348 * C21354) *
                C47264 +
            ((C5494 * C21355 + C5495 * C47110) * C21352 +
             (C6248 * C21355 + C6249 * C47110) * C21353 +
             ((C6250 - C6251) * C21355 + (C6252 - C6253) * C47110) * C21354) *
                C47271 +
            ((C6972 * C21355 + C6973 * C47110) * C21352 +
             ((C5915 - C5914) * C21355 + (C5917 - C5916) * C47110) * C21353 +
             ((C47384 * C5897 - C113 * C5894) * C21355 +
              (C47384 * C5900 - C113 * C5898) * C47110) *
                 C21354) *
                C3742) *
               C47226) *
              C47146)) /
        (p * q * std::sqrt(p + q));
    d2ee[117] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C47384 * C124 - C113 * C117) * C21355 +
              (C47384 * C138 - C113 * C125) * C47110) *
                 C21352 +
             ((C4868 - C4869) * C21355 + (C4870 - C4871) * C47110) * C21353 +
             C21477 * C21354) *
                C3234 +
            (((C113 * C468 - C47384 * C478) * C21355 +
              (C113 * C479 - C47384 * C498) * C47110) *
                 C21352 +
             ((C5490 - C5491) * C21355 + (C5492 - C5493) * C47110) * C21353 +
             C22246 * C21354) *
                C47268) *
               C47500 +
           ((((C4869 - C4868) * C21355 + (C4871 - C4870) * C47110) * C21352 +
             ((C4876 - C4877) * C21355 + (C4878 - C4879) * C47110) * C21353 +
             C22118 * C21354) *
                C3234 +
            (((C5491 - C5490) * C21355 + (C5493 - C5492) * C47110) * C21352 +
             ((C5906 - C5907) * C21355 + (C5908 - C5909) * C47110) * C21353 +
             C22608 * C21354) *
                C47268) *
               C47488 +
           ((C21477 * C21352 +
             ((C5736 - C5737) * C21355 + (C5738 - C5739) * C47110) * C21353 +
             C22119 * C21354) *
                C3234 +
            (C22246 * C21352 +
             ((C6392 - C6393) * C21355 + (C6394 - C6395) * C47110) * C21353 +
             ((C22602 - C22603) * C21355 + (C22604 - C22605) * C47110) *
                 C21354) *
                C47268) *
               C47461) *
              C2580 +
          (((((C147 - C146) * C21355 + (C149 - C148) * C47110) * C21352 +
             (C4874 * C21355 + C4875 * C47110) * C21353 + C21475 * C21354) *
                C3234 +
            (((C510 - C509) * C21355 + (C512 - C511) * C47110) * C21352 +
             (C5496 * C21355 + C5497 * C47110) * C21353 + C22497 * C21354) *
                C47268) *
               C47500 +
           (((C4872 * C21355 + C4873 * C47110) * C21352 +
             (C4882 * C21355 + C4883 * C47110) * C21353 + C22348 * C21354) *
                C3234 +
            ((C5494 * C21355 + C5495 * C47110) * C21352 +
             (C6248 * C21355 + C6249 * C47110) * C21353 +
             ((C6250 - C6251) * C21355 + (C6252 - C6253) * C47110) * C21354) *
                C47268) *
               C47488 +
           ((C21475 * C21352 + (C6050 * C21355 + C6051 * C47110) * C21353 +
             ((C5744 - C5745) * C21355 + (C5746 - C5747) * C47110) * C21354) *
                C3234 +
            (C22497 * C21352 +
             ((C6251 - C6250) * C21355 + (C6253 - C6252) * C47110) * C21353 +
             ((C47384 * C6387 - C113 * C6384) * C21355 +
              (C47384 * C6390 - C113 * C6388) * C47110) *
                 C21354) *
                C47268) *
               C47461) *
              C47146)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C47384 * C124 - C113 * C117) * C21355 +
             (C47384 * C138 - C113 * C125) * C47110) *
                C21352 +
            ((C4868 - C4869) * C21355 + (C4870 - C4871) * C47110) * C21353 +
            C21477 * C21354) *
               C3234 +
           (((C113 * C468 - C47384 * C478) * C21355 +
             (C113 * C479 - C47384 * C498) * C47110) *
                C21352 +
            ((C5490 - C5491) * C21355 + (C5492 - C5493) * C47110) * C21353 +
            C22246 * C21354) *
               C47268) *
              C47163 * C47506 +
          ((((C147 - C146) * C21355 + (C149 - C148) * C47110) * C21352 +
            (C4874 * C21355 + C4875 * C47110) * C21353 + C21475 * C21354) *
               C3234 +
           (((C510 - C509) * C21355 + (C512 - C511) * C47110) * C21352 +
            (C5496 * C21355 + C5497 * C47110) * C21353 + C22497 * C21354) *
               C47268) *
              C47163 * C47499 +
          (((C166 * C21355 + C167 * C47110) * C21352 +
            (C4884 * C21355 + C4885 * C47110) * C21353 + C21476 * C21354) *
               C3234 +
           ((C533 * C21355 + C534 * C47110) * C21352 +
            (C5498 * C21355 + C5499 * C47110) * C21353 +
            ((C1565 - C1566) * C21355 + (C1567 - C1568) * C47110) * C21354) *
               C47268) *
              C47163 * C47486 +
          (((C168 * C21355 + C169 * C47110) * C21352 +
            (C5164 * C21355 + C5165 * C47110) * C21353 +
            ((C348 - C349) * C21355 + (C350 - C351) * C47110) * C21354) *
               C3234 +
           ((C755 * C21355 + C756 * C47110) * C21352 +
            ((C936 - C935) * C21355 + (C938 - C937) * C47110) * C21353 +
            ((C47384 * C1557 - C113 * C1556) * C21355 +
             (C47384 * C1559 - C113 * C1558) * C47110) *
                C21354) *
               C47268) *
              C47163 * C47465)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C47384 * C124 - C113 * C117) * C21355 +
             (C47384 * C138 - C113 * C125) * C47110) *
                C21352 +
            ((C4868 - C4869) * C21355 + (C4870 - C4871) * C47110) * C21353 +
            C21477 * C21354) *
               C47508 +
           (((C113 * C468 - C47384 * C478) * C21355 +
             (C113 * C479 - C47384 * C498) * C47110) *
                C21352 +
            ((C5490 - C5491) * C21355 + (C5492 - C5493) * C47110) * C21353 +
            C22246 * C21354) *
               C47505 +
           (((C47384 * C484 - C113 * C471) * C21355 +
             (C47384 * C501 - C113 * C485) * C47110) *
                C21352 +
            ((C5902 - C5903) * C21355 + (C5904 - C5905) * C47110) * C21353 +
            C22247 * C21354) *
               C47496 +
           (((C113 * C1968 - C47384 * C1974) * C21355 +
             (C113 * C1975 - C47384 * C1986) * C47110) *
                C21352 +
            ((C7248 - C7249) * C21355 + (C7250 - C7251) * C47110) * C21353 +
            ((C23241 - C23242) * C21355 + (C23243 - C23244) * C47110) *
                C21354) *
               C47477) *
              C47163 * C2580 +
          ((((C147 - C146) * C21355 + (C149 - C148) * C47110) * C21352 +
            (C4874 * C21355 + C4875 * C47110) * C21353 + C21475 * C21354) *
               C47508 +
           (((C510 - C509) * C21355 + (C512 - C511) * C47110) * C21352 +
            (C5496 * C21355 + C5497 * C47110) * C21353 + C22497 * C21354) *
               C47505 +
           (((C518 - C517) * C21355 + (C520 - C519) * C47110) * C21352 +
            (C6974 * C21355 + C6975 * C47110) * C21353 +
            ((C5914 - C5915) * C21355 + (C5916 - C5917) * C47110) * C21354) *
               C47496 +
           (((C2258 - C2257) * C21355 + (C2260 - C2259) * C47110) * C21352 +
            ((C7107 - C7106) * C21355 + (C7109 - C7108) * C47110) * C21353 +
            ((C47384 * C7243 - C113 * C7240) * C21355 +
             (C47384 * C7246 - C113 * C7244) * C47110) *
                C21354) *
               C47477) *
              C47163 * C47146)) /
            (p * q * std::sqrt(p + q));
    d2ee[118] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C47384 * C124 - C113 * C117) * C21355 +
             (C47384 * C138 - C113 * C125) * C47110) *
                C21352 +
            ((C4868 - C4869) * C21355 + (C4870 - C4871) * C47110) * C21353 +
            C21477 * C21354) *
               C47264 +
           (((C113 * C468 - C47384 * C478) * C21355 +
             (C113 * C479 - C47384 * C498) * C47110) *
                C21352 +
            ((C5490 - C5491) * C21355 + (C5492 - C5493) * C47110) * C21353 +
            C22246 * C21354) *
               C47271 +
           (((C47384 * C484 - C113 * C471) * C21355 +
             (C47384 * C501 - C113 * C485) * C47110) *
                C21352 +
            ((C5902 - C5903) * C21355 + (C5904 - C5905) * C47110) * C21353 +
            C22247 * C21354) *
               C3742) *
              C47163 * C47140 +
          ((((C147 - C146) * C21355 + (C149 - C148) * C47110) * C21352 +
            (C4874 * C21355 + C4875 * C47110) * C21353 + C21475 * C21354) *
               C47264 +
           (((C510 - C509) * C21355 + (C512 - C511) * C47110) * C21352 +
            (C5496 * C21355 + C5497 * C47110) * C21353 + C22497 * C21354) *
               C47271 +
           (((C518 - C517) * C21355 + (C520 - C519) * C47110) * C21352 +
            (C6974 * C21355 + C6975 * C47110) * C21353 +
            ((C5914 - C5915) * C21355 + (C5916 - C5917) * C47110) * C21354) *
               C3742) *
              C47163 * C47149 +
          (((C166 * C21355 + C167 * C47110) * C21352 +
            (C4884 * C21355 + C4885 * C47110) * C21353 + C21476 * C21354) *
               C47264 +
           ((C533 * C21355 + C534 * C47110) * C21352 +
            (C5498 * C21355 + C5499 * C47110) * C21353 +
            ((C1565 - C1566) * C21355 + (C1567 - C1568) * C47110) * C21354) *
               C47271 +
           ((C535 * C21355 + C536 * C47110) * C21352 +
            ((C2148 - C2147) * C21355 + (C2150 - C2149) * C47110) * C21353 +
            ((C47384 * C1283 - C113 * C1266) * C21355 +
             (C47384 * C1293 - C113 * C1284) * C47110) *
                C21354) *
               C3742) *
              C47163 * C2843)) /
        (p * q * std::sqrt(p + q));
    d2ee[119] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C47384 * C124 - C113 * C117) * C21355 +
             (C47384 * C138 - C113 * C125) * C47110) *
                C21352 +
            ((C4868 - C4869) * C21355 + (C4870 - C4871) * C47110) * C21353 +
            C21477 * C21354) *
               C3234 +
           (((C113 * C468 - C47384 * C478) * C21355 +
             (C113 * C479 - C47384 * C498) * C47110) *
                C21352 +
            ((C5490 - C5491) * C21355 + (C5492 - C5493) * C47110) * C21353 +
            C22246 * C21354) *
               C47268) *
              C47163 * C47506 +
          ((((C147 - C146) * C21355 + (C149 - C148) * C47110) * C21352 +
            (C4874 * C21355 + C4875 * C47110) * C21353 + C21475 * C21354) *
               C3234 +
           (((C510 - C509) * C21355 + (C512 - C511) * C47110) * C21352 +
            (C5496 * C21355 + C5497 * C47110) * C21353 + C22497 * C21354) *
               C47268) *
              C47163 * C47499 +
          (((C166 * C21355 + C167 * C47110) * C21352 +
            (C4884 * C21355 + C4885 * C47110) * C21353 + C21476 * C21354) *
               C3234 +
           ((C533 * C21355 + C534 * C47110) * C21352 +
            (C5498 * C21355 + C5499 * C47110) * C21353 +
            ((C1565 - C1566) * C21355 + (C1567 - C1568) * C47110) * C21354) *
               C47268) *
              C47163 * C47486 +
          (((C168 * C21355 + C169 * C47110) * C21352 +
            (C5164 * C21355 + C5165 * C47110) * C21353 +
            ((C348 - C349) * C21355 + (C350 - C351) * C47110) * C21354) *
               C3234 +
           ((C755 * C21355 + C756 * C47110) * C21352 +
            ((C936 - C935) * C21355 + (C938 - C937) * C47110) * C21353 +
            ((C47384 * C1557 - C113 * C1556) * C21355 +
             (C47384 * C1559 - C113 * C1558) * C47110) *
                C21354) *
               C47268) *
              C47163 * C47465)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C47384 * C124 - C113 * C117) * C21355 +
              (C47384 * C138 - C113 * C125) * C47110) *
                 C21352 +
             ((C4868 - C4869) * C21355 + (C4870 - C4871) * C47110) * C21353 +
             C21477 * C21354) *
                C3234 +
            (((C113 * C468 - C47384 * C478) * C21355 +
              (C113 * C479 - C47384 * C498) * C47110) *
                 C21352 +
             ((C5490 - C5491) * C21355 + (C5492 - C5493) * C47110) * C21353 +
             C22246 * C21354) *
                C47268) *
               C47500 +
           ((((C4869 - C4868) * C21355 + (C4871 - C4870) * C47110) * C21352 +
             ((C4876 - C4877) * C21355 + (C4878 - C4879) * C47110) * C21353 +
             C22118 * C21354) *
                C3234 +
            (((C5491 - C5490) * C21355 + (C5493 - C5492) * C47110) * C21352 +
             ((C5906 - C5907) * C21355 + (C5908 - C5909) * C47110) * C21353 +
             C22608 * C21354) *
                C47268) *
               C47488 +
           ((C21477 * C21352 +
             ((C5736 - C5737) * C21355 + (C5738 - C5739) * C47110) * C21353 +
             C22119 * C21354) *
                C3234 +
            (C22246 * C21352 +
             ((C6392 - C6393) * C21355 + (C6394 - C6395) * C47110) * C21353 +
             ((C22602 - C22603) * C21355 + (C22604 - C22605) * C47110) *
                 C21354) *
                C47268) *
               C47461) *
              C2580 +
          (((((C147 - C146) * C21355 + (C149 - C148) * C47110) * C21352 +
             (C4874 * C21355 + C4875 * C47110) * C21353 + C21475 * C21354) *
                C3234 +
            (((C510 - C509) * C21355 + (C512 - C511) * C47110) * C21352 +
             (C5496 * C21355 + C5497 * C47110) * C21353 + C22497 * C21354) *
                C47268) *
               C47500 +
           (((C4872 * C21355 + C4873 * C47110) * C21352 +
             (C4882 * C21355 + C4883 * C47110) * C21353 + C22348 * C21354) *
                C3234 +
            ((C5494 * C21355 + C5495 * C47110) * C21352 +
             (C6248 * C21355 + C6249 * C47110) * C21353 +
             ((C6250 - C6251) * C21355 + (C6252 - C6253) * C47110) * C21354) *
                C47268) *
               C47488 +
           ((C21475 * C21352 + (C6050 * C21355 + C6051 * C47110) * C21353 +
             ((C5744 - C5745) * C21355 + (C5746 - C5747) * C47110) * C21354) *
                C3234 +
            (C22497 * C21352 +
             ((C6251 - C6250) * C21355 + (C6253 - C6252) * C47110) * C21353 +
             ((C47384 * C6387 - C113 * C6384) * C21355 +
              (C47384 * C6390 - C113 * C6388) * C47110) *
                 C21354) *
                C47268) *
               C47461) *
              C47146)) /
            (p * q * std::sqrt(p + q));
    d2ee[120] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C47384 * C124 - C113 * C117) * C21355 +
             (C47384 * C138 - C113 * C125) * C47110) *
                C21352 +
            ((C4868 - C4869) * C21355 + (C4870 - C4871) * C47110) * C21353 +
            C21477 * C21354) *
               C47181 * C47429 +
           (((C4869 - C4868) * C21355 + (C4871 - C4870) * C47110) * C21352 +
            ((C4876 - C4877) * C21355 + (C4878 - C4879) * C47110) * C21353 +
            ((C5737 - C5736) * C21355 + (C5739 - C5738) * C47110) * C21354) *
               C47181 * C47226) *
              C636 +
          ((((C147 - C146) * C21355 + (C149 - C148) * C47110) * C21352 +
            (C4874 * C21355 + C4875 * C47110) * C21353 + C21475 * C21354) *
               C47181 * C47429 +
           ((C4872 * C21355 + C4873 * C47110) * C21352 +
            (C4882 * C21355 + C4883 * C47110) * C21353 +
            (C6048 * C21355 + C6049 * C47110) * C21354) *
               C47181 * C47226) *
              C637 +
          (((C166 * C21355 + C167 * C47110) * C21352 +
            (C4884 * C21355 + C4885 * C47110) * C21353 + C21476 * C21354) *
               C47181 * C47429 +
           ((C352 * C21355 + C353 * C47110) * C21352 +
            (C4886 * C21355 + C4887 * C47110) * C21353 +
            ((C1407 - C1408) * C21355 + (C1409 - C1410) * C47110) * C21354) *
               C47181 * C47226) *
              C638 +
          (((C168 * C21355 + C169 * C47110) * C21352 +
            (C5164 * C21355 + C5165 * C47110) * C21353 +
            ((C348 - C349) * C21355 + (C350 - C351) * C47110) * C21354) *
               C47181 * C47429 +
           ((C645 * C21355 + C646 * C47110) * C21352 +
            ((C349 - C348) * C21355 + (C351 - C350) * C47110) * C21353 +
            ((C47384 * C1399 - C113 * C1398) * C21355 +
             (C47384 * C1401 - C113 * C1400) * C47110) *
                C21354) *
               C47181 * C47226) *
              C47465)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C47384 * C124 - C113 * C117) * C21355 +
             (C47384 * C138 - C113 * C125) * C47110) *
                C21352 +
            ((C4868 - C4869) * C21355 + (C4870 - C4871) * C47110) * C21353 +
            C21477 * C21354) *
               C47181 * C1392 +
           (((C4869 - C4868) * C21355 + (C4871 - C4870) * C47110) * C21352 +
            ((C4876 - C4877) * C21355 + (C4878 - C4879) * C47110) * C21353 +
            C22118 * C21354) *
               C47181 * C1393 +
           (C21477 * C21352 +
            ((C5736 - C5737) * C21355 + (C5738 - C5739) * C47110) * C21353 +
            C22119 * C21354) *
               C47181 * C1394 +
           (C22118 * C21352 +
            ((C5740 - C5741) * C21355 + (C5742 - C5743) * C47110) * C21353 +
            ((C22110 - C22111) * C21355 + (C22112 - C22113) * C47110) *
                C21354) *
               C47181 * C47471) *
              C47415 +
          ((((C147 - C146) * C21355 + (C149 - C148) * C47110) * C21352 +
            (C4874 * C21355 + C4875 * C47110) * C21353 + C21475 * C21354) *
               C47181 * C1392 +
           ((C4872 * C21355 + C4873 * C47110) * C21352 +
            (C4882 * C21355 + C4883 * C47110) * C21353 + C22348 * C21354) *
               C47181 * C1393 +
           (C21475 * C21352 + (C6050 * C21355 + C6051 * C47110) * C21353 +
            ((C5744 - C5745) * C21355 + (C5746 - C5747) * C47110) * C21354) *
               C47181 * C1394 +
           (C22348 * C21352 +
            ((C5745 - C5744) * C21355 + (C5747 - C5746) * C47110) * C21353 +
            ((C47384 * C5731 - C113 * C5728) * C21355 +
             (C47384 * C5734 - C113 * C5732) * C47110) *
                C21354) *
               C47181 * C47471) *
              C47146)) /
            (p * q * std::sqrt(p + q));
    d2ee[121] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C47384 * C124 - C113 * C117) * C21355 +
              (C47384 * C138 - C113 * C125) * C47110) *
                 C21352 +
             ((C4868 - C4869) * C21355 + (C4870 - C4871) * C47110) * C21353 +
             C21477 * C21354) *
                C47430 +
            (((C113 * C468 - C47384 * C478) * C21355 +
              (C113 * C479 - C47384 * C498) * C47110) *
                 C21352 +
             ((C5490 - C5491) * C21355 + (C5492 - C5493) * C47110) * C21353 +
             ((C5907 - C5906) * C21355 + (C5909 - C5908) * C47110) * C21354) *
                C47268) *
               C47429 +
           ((((C4869 - C4868) * C21355 + (C4871 - C4870) * C47110) * C21352 +
             ((C4876 - C4877) * C21355 + (C4878 - C4879) * C47110) * C21353 +
             ((C5737 - C5736) * C21355 + (C5739 - C5738) * C47110) * C21354) *
                C47430 +
            (((C5491 - C5490) * C21355 + (C5493 - C5492) * C47110) * C21352 +
             ((C5906 - C5907) * C21355 + (C5908 - C5909) * C47110) * C21353 +
             ((C6393 - C6392) * C21355 + (C6395 - C6394) * C47110) * C21354) *
                C47268) *
               C47226) *
              C284 +
          (((((C147 - C146) * C21355 + (C149 - C148) * C47110) * C21352 +
             (C4874 * C21355 + C4875 * C47110) * C21353 + C21475 * C21354) *
                C47430 +
            (((C510 - C509) * C21355 + (C512 - C511) * C47110) * C21352 +
             (C5496 * C21355 + C5497 * C47110) * C21353 +
             (C6246 * C21355 + C6247 * C47110) * C21354) *
                C47268) *
               C47429 +
           (((C4872 * C21355 + C4873 * C47110) * C21352 +
             (C4882 * C21355 + C4883 * C47110) * C21353 +
             (C6048 * C21355 + C6049 * C47110) * C21354) *
                C47430 +
            ((C5494 * C21355 + C5495 * C47110) * C21352 +
             (C6248 * C21355 + C6249 * C47110) * C21353 +
             ((C6250 - C6251) * C21355 + (C6252 - C6253) * C47110) * C21354) *
                C47268) *
               C47226) *
              C285 +
          ((((C166 * C21355 + C167 * C47110) * C21352 +
             (C4884 * C21355 + C4885 * C47110) * C21353 + C21476 * C21354) *
                C47430 +
            ((C533 * C21355 + C534 * C47110) * C21352 +
             (C5498 * C21355 + C5499 * C47110) * C21353 +
             ((C1565 - C1566) * C21355 + (C1567 - C1568) * C47110) * C21354) *
                C47268) *
               C47429 +
           (((C352 * C21355 + C353 * C47110) * C21352 +
             (C4886 * C21355 + C4887 * C47110) * C21353 +
             ((C1407 - C1408) * C21355 + (C1409 - C1410) * C47110) * C21354) *
                C47430 +
            ((C939 * C21355 + C940 * C47110) * C21352 +
             ((C1566 - C1565) * C21355 + (C1568 - C1567) * C47110) * C21353 +
             ((C47384 * C1673 - C113 * C1668) * C21355 +
              (C47384 * C1677 - C113 * C1674) * C47110) *
                 C21354) *
                C47268) *
               C47226) *
              C47455)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C47384 * C124 - C113 * C117) * C21355 +
             (C47384 * C138 - C113 * C125) * C47110) *
                C21352 +
            ((C4868 - C4869) * C21355 + (C4870 - C4871) * C47110) * C21353 +
            C21477 * C21354) *
               C47430 +
           (((C113 * C468 - C47384 * C478) * C21355 +
             (C113 * C479 - C47384 * C498) * C47110) *
                C21352 +
            ((C5490 - C5491) * C21355 + (C5492 - C5493) * C47110) * C21353 +
            C22246 * C21354) *
               C47268) *
              C1392 +
          ((((C4869 - C4868) * C21355 + (C4871 - C4870) * C47110) * C21352 +
            ((C4876 - C4877) * C21355 + (C4878 - C4879) * C47110) * C21353 +
            C22118 * C21354) *
               C47430 +
           (((C5491 - C5490) * C21355 + (C5493 - C5492) * C47110) * C21352 +
            ((C5906 - C5907) * C21355 + (C5908 - C5909) * C47110) * C21353 +
            C22608 * C21354) *
               C47268) *
              C1393 +
          ((C21477 * C21352 +
            ((C5736 - C5737) * C21355 + (C5738 - C5739) * C47110) * C21353 +
            C22119 * C21354) *
               C47430 +
           (C22246 * C21352 +
            ((C6392 - C6393) * C21355 + (C6394 - C6395) * C47110) * C21353 +
            ((C22602 - C22603) * C21355 + (C22604 - C22605) * C47110) *
                C21354) *
               C47268) *
              C1394 +
          ((C22118 * C21352 +
            ((C5740 - C5741) * C21355 + (C5742 - C5743) * C47110) * C21353 +
            ((C22110 - C22111) * C21355 + (C22112 - C22113) * C47110) *
                C21354) *
               C47430 +
           (C22608 * C21352 +
            ((C22603 - C22602) * C21355 + (C22605 - C22604) * C47110) * C21353 +
            ((C47384 * C22596 - C113 * C22595) * C21355 +
             (C47384 * C22598 - C113 * C22597) * C47110) *
                C21354) *
               C47268) *
              C47471) *
         C47135) /
            (p * q * std::sqrt(p + q));
    d2ee[122] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C47384 * C124 - C113 * C117) * C21355 +
             (C47384 * C138 - C113 * C125) * C47110) *
                C21352 +
            ((C4868 - C4869) * C21355 + (C4870 - C4871) * C47110) * C21353 +
            C21477 * C21354) *
               C47181 * C47500 +
           (((C4869 - C4868) * C21355 + (C4871 - C4870) * C47110) * C21352 +
            ((C4876 - C4877) * C21355 + (C4878 - C4879) * C47110) * C21353 +
            ((C5737 - C5736) * C21355 + (C5739 - C5738) * C47110) * C21354) *
               C47181 * C47488 +
           (C21477 * C21352 +
            ((C5736 - C5737) * C21355 + (C5738 - C5739) * C47110) * C21353 +
            ((C5741 - C5740) * C21355 + (C5743 - C5742) * C47110) * C21354) *
               C47181 * C47461) *
              C284 +
          ((((C147 - C146) * C21355 + (C149 - C148) * C47110) * C21352 +
            (C4874 * C21355 + C4875 * C47110) * C21353 + C21475 * C21354) *
               C47181 * C47500 +
           ((C4872 * C21355 + C4873 * C47110) * C21352 +
            (C4882 * C21355 + C4883 * C47110) * C21353 +
            (C6048 * C21355 + C6049 * C47110) * C21354) *
               C47181 * C47488 +
           (C21475 * C21352 + (C6050 * C21355 + C6051 * C47110) * C21353 +
            ((C5744 - C5745) * C21355 + (C5746 - C5747) * C47110) * C21354) *
               C47181 * C47461) *
              C285 +
          (((C166 * C21355 + C167 * C47110) * C21352 +
            (C4884 * C21355 + C4885 * C47110) * C21353 + C21476 * C21354) *
               C47181 * C47500 +
           ((C352 * C21355 + C353 * C47110) * C21352 +
            (C4886 * C21355 + C4887 * C47110) * C21353 +
            ((C1407 - C1408) * C21355 + (C1409 - C1410) * C47110) * C21354) *
               C47181 * C47488 +
           (C21476 * C21352 +
            ((C1408 - C1407) * C21355 + (C1410 - C1409) * C47110) * C21353 +
            ((C47384 * C1140 - C113 * C1129) * C21355 +
             (C47384 * C1147 - C113 * C1141) * C47110) *
                C21354) *
               C47181 * C47461) *
              C47455)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C47384 * C124 - C113 * C117) * C21355 +
            (C47384 * C138 - C113 * C125) * C47110) *
               C21352 +
           ((C4868 - C4869) * C21355 + (C4870 - C4871) * C47110) * C21353 +
           ((C4877 - C4876) * C21355 + (C4879 - C4878) * C47110) * C21354) *
              C47181 * C47163 * C108 +
          (((C147 - C146) * C21355 + (C149 - C148) * C47110) * C21352 +
           (C4874 * C21355 + C4875 * C47110) * C21353 +
           (C4880 * C21355 + C4881 * C47110) * C21354) *
              C47181 * C47163 * C109 +
          ((C166 * C21355 + C167 * C47110) * C21352 +
           (C4884 * C21355 + C4885 * C47110) * C21353 +
           (C354 * C21355 + C355 * C47110) * C21354) *
              C47181 * C47163 * C110 +
          ((C168 * C21355 + C169 * C47110) * C21352 +
           (C5164 * C21355 + C5165 * C47110) * C21353 +
           ((C348 - C349) * C21355 + (C350 - C351) * C47110) * C21354) *
              C47181 * C47163 * C111 +
          ((C170 * C21355 + C171 * C47110) * C21352 +
           ((C648 - C647) * C21355 + (C650 - C649) * C47110) * C21353 +
           ((C47384 * C315 - C113 * C296) * C21355 +
            (C47384 * C326 - C113 * C316) * C47110) *
               C21354) *
              C47181 * C47163 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C47384 * C124 - C113 * C117) * C21355 +
             (C47384 * C138 - C113 * C125) * C47110) *
                C21352 +
            ((C4868 - C4869) * C21355 + (C4870 - C4871) * C47110) * C21353 +
            C21477 * C21354) *
               C47501 +
           (((C113 * C468 - C47384 * C478) * C21355 +
             (C113 * C479 - C47384 * C498) * C47110) *
                C21352 +
            ((C5490 - C5491) * C21355 + (C5492 - C5493) * C47110) * C21353 +
            ((C5907 - C5906) * C21355 + (C5909 - C5908) * C47110) * C21354) *
               C47490 +
           (((C47384 * C484 - C113 * C471) * C21355 +
             (C47384 * C501 - C113 * C485) * C47110) *
                C21352 +
            ((C5902 - C5903) * C21355 + (C5904 - C5905) * C47110) * C21353 +
            ((C5911 - C5910) * C21355 + (C5913 - C5912) * C47110) * C21354) *
               C47464) *
              C47163 * C284 +
          ((((C147 - C146) * C21355 + (C149 - C148) * C47110) * C21352 +
            (C4874 * C21355 + C4875 * C47110) * C21353 + C21475 * C21354) *
               C47501 +
           (((C510 - C509) * C21355 + (C512 - C511) * C47110) * C21352 +
            (C5496 * C21355 + C5497 * C47110) * C21353 +
            (C6246 * C21355 + C6247 * C47110) * C21354) *
               C47490 +
           (((C518 - C517) * C21355 + (C520 - C519) * C47110) * C21352 +
            (C6974 * C21355 + C6975 * C47110) * C21353 +
            ((C5914 - C5915) * C21355 + (C5916 - C5917) * C47110) * C21354) *
               C47464) *
              C47163 * C285 +
          (((C166 * C21355 + C167 * C47110) * C21352 +
            (C4884 * C21355 + C4885 * C47110) * C21353 + C21476 * C21354) *
               C47501 +
           ((C533 * C21355 + C534 * C47110) * C21352 +
            (C5498 * C21355 + C5499 * C47110) * C21353 +
            ((C1565 - C1566) * C21355 + (C1567 - C1568) * C47110) * C21354) *
               C47490 +
           ((C535 * C21355 + C536 * C47110) * C21352 +
            ((C2148 - C2147) * C21355 + (C2150 - C2149) * C47110) * C21353 +
            ((C47384 * C1283 - C113 * C1266) * C21355 +
             (C47384 * C1293 - C113 * C1284) * C47110) *
                C21354) *
               C47464) *
              C47163 * C47455)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C47384 * C124 - C113 * C117) * C21355 +
             (C47384 * C138 - C113 * C125) * C47110) *
                C21352 +
            ((C4868 - C4869) * C21355 + (C4870 - C4871) * C47110) * C21353 +
            C21477 * C21354) *
               C47181 * C1050 +
           (((C4869 - C4868) * C21355 + (C4871 - C4870) * C47110) * C21352 +
            ((C4876 - C4877) * C21355 + (C4878 - C4879) * C47110) * C21353 +
            ((C5737 - C5736) * C21355 + (C5739 - C5738) * C47110) * C21354) *
               C47181 * C1051 +
           (C21477 * C21352 +
            ((C5736 - C5737) * C21355 + (C5738 - C5739) * C47110) * C21353 +
            ((C5741 - C5740) * C21355 + (C5743 - C5742) * C47110) * C21354) *
               C47181 * C47461) *
              C47497 +
          ((((C147 - C146) * C21355 + (C149 - C148) * C47110) * C21352 +
            (C4874 * C21355 + C4875 * C47110) * C21353 + C21475 * C21354) *
               C47181 * C1050 +
           ((C4872 * C21355 + C4873 * C47110) * C21352 +
            (C4882 * C21355 + C4883 * C47110) * C21353 +
            (C6048 * C21355 + C6049 * C47110) * C21354) *
               C47181 * C1051 +
           (C21475 * C21352 + (C6050 * C21355 + C6051 * C47110) * C21353 +
            ((C5744 - C5745) * C21355 + (C5746 - C5747) * C47110) * C21354) *
               C47181 * C47461) *
              C47484 +
          (((C166 * C21355 + C167 * C47110) * C21352 +
            (C4884 * C21355 + C4885 * C47110) * C21353 + C21476 * C21354) *
               C47181 * C1050 +
           ((C352 * C21355 + C353 * C47110) * C21352 +
            (C4886 * C21355 + C4887 * C47110) * C21353 +
            ((C1407 - C1408) * C21355 + (C1409 - C1410) * C47110) * C21354) *
               C47181 * C1051 +
           (C21476 * C21352 +
            ((C1408 - C1407) * C21355 + (C1410 - C1409) * C47110) * C21353 +
            ((C47384 * C1140 - C113 * C1129) * C21355 +
             (C47384 * C1147 - C113 * C1141) * C47110) *
                C21354) *
               C47181 * C47461) *
              C47455)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C47384 * C124 - C113 * C117) * C21355 +
            (C47384 * C138 - C113 * C125) * C47110) *
               C21352 +
           ((C4868 - C4869) * C21355 + (C4870 - C4871) * C47110) * C21353 +
           C21477 * C21354) *
              C47181 * C1118 +
          (((C4869 - C4868) * C21355 + (C4871 - C4870) * C47110) * C21352 +
           ((C4876 - C4877) * C21355 + (C4878 - C4879) * C47110) * C21353 +
           C22118 * C21354) *
              C47181 * C1119 +
          (C21477 * C21352 +
           ((C5736 - C5737) * C21355 + (C5738 - C5739) * C47110) * C21353 +
           C22119 * C21354) *
              C47181 * C1120 +
          (C22118 * C21352 +
           ((C5740 - C5741) * C21355 + (C5742 - C5743) * C47110) * C21353 +
           ((C22110 - C22111) * C21355 + (C22112 - C22113) * C47110) * C21354) *
              C47181 * C1121 +
          (C22119 * C21352 +
           ((C22111 - C22110) * C21355 + (C22113 - C22112) * C47110) * C21353 +
           ((C47384 * C22102 - C113 * C22101) * C21355 +
            (C47384 * C22104 - C113 * C22103) * C47110) *
               C21354) *
              C47181 * C1122) *
         C47135) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C47384 * C124 - C113 * C117) * C21355 +
             (C47384 * C138 - C113 * C125) * C47110) *
                C21352 +
            ((C4868 - C4869) * C21355 + (C4870 - C4871) * C47110) * C21353 +
            C21477 * C21354) *
               C47501 +
           (((C113 * C468 - C47384 * C478) * C21355 +
             (C113 * C479 - C47384 * C498) * C47110) *
                C21352 +
            ((C5490 - C5491) * C21355 + (C5492 - C5493) * C47110) * C21353 +
            C22246 * C21354) *
               C47490 +
           (((C47384 * C484 - C113 * C471) * C21355 +
             (C47384 * C501 - C113 * C485) * C47110) *
                C21352 +
            ((C5902 - C5903) * C21355 + (C5904 - C5905) * C47110) * C21353 +
            C22247 * C21354) *
               C47464) *
              C1050 +
          ((((C4869 - C4868) * C21355 + (C4871 - C4870) * C47110) * C21352 +
            ((C4876 - C4877) * C21355 + (C4878 - C4879) * C47110) * C21353 +
            C22118 * C21354) *
               C47501 +
           (((C5491 - C5490) * C21355 + (C5493 - C5492) * C47110) * C21352 +
            ((C5906 - C5907) * C21355 + (C5908 - C5909) * C47110) * C21353 +
            ((C6393 - C6392) * C21355 + (C6395 - C6394) * C47110) * C21354) *
               C47490 +
           (((C5903 - C5902) * C21355 + (C5905 - C5904) * C47110) * C21352 +
            ((C5910 - C5911) * C21355 + (C5912 - C5913) * C47110) * C21353 +
            ((C22238 - C22239) * C21355 + (C22240 - C22241) * C47110) *
                C21354) *
               C47464) *
              C1051 +
          ((C21477 * C21352 +
            ((C5736 - C5737) * C21355 + (C5738 - C5739) * C47110) * C21353 +
            C22119 * C21354) *
               C47501 +
           (C22246 * C21352 +
            ((C6392 - C6393) * C21355 + (C6394 - C6395) * C47110) * C21353 +
            ((C113 * C6383 - C47384 * C6385) * C21355 +
             (C113 * C6386 - C47384 * C6389) * C47110) *
                C21354) *
               C47490 +
           (C22247 * C21352 +
            ((C22239 - C22238) * C21355 + (C22241 - C22240) * C47110) * C21353 +
            ((C47384 * C22230 - C113 * C22229) * C21355 +
             (C47384 * C22232 - C113 * C22231) * C47110) *
                C21354) *
               C47464) *
              C47461) *
         C47135) /
            (p * q * std::sqrt(p + q));
    d2ee[123] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C47384 * C124 - C113 * C117) * C21355 +
             (C47384 * C138 - C113 * C125) * C47110) *
                C21352 +
            ((C4868 - C4869) * C21355 + (C4870 - C4871) * C47110) * C21353 +
            C21477 * C21354) *
               C47430 +
           (((C113 * C468 - C47384 * C478) * C21355 +
             (C113 * C479 - C47384 * C498) * C47110) *
                C21352 +
            ((C5490 - C5491) * C21355 + (C5492 - C5493) * C47110) * C21353 +
            ((C5907 - C5906) * C21355 + (C5909 - C5908) * C47110) * C21354) *
               C47268) *
              C47163 * C636 +
          ((((C147 - C146) * C21355 + (C149 - C148) * C47110) * C21352 +
            (C4874 * C21355 + C4875 * C47110) * C21353 + C21475 * C21354) *
               C47430 +
           (((C510 - C509) * C21355 + (C512 - C511) * C47110) * C21352 +
            (C5496 * C21355 + C5497 * C47110) * C21353 +
            (C6246 * C21355 + C6247 * C47110) * C21354) *
               C47268) *
              C47163 * C637 +
          (((C166 * C21355 + C167 * C47110) * C21352 +
            (C4884 * C21355 + C4885 * C47110) * C21353 + C21476 * C21354) *
               C47430 +
           ((C533 * C21355 + C534 * C47110) * C21352 +
            (C5498 * C21355 + C5499 * C47110) * C21353 +
            ((C1565 - C1566) * C21355 + (C1567 - C1568) * C47110) * C21354) *
               C47268) *
              C47163 * C638 +
          (((C168 * C21355 + C169 * C47110) * C21352 +
            (C5164 * C21355 + C5165 * C47110) * C21353 +
            ((C348 - C349) * C21355 + (C350 - C351) * C47110) * C21354) *
               C47430 +
           ((C755 * C21355 + C756 * C47110) * C21352 +
            ((C936 - C935) * C21355 + (C938 - C937) * C47110) * C21353 +
            ((C47384 * C1557 - C113 * C1556) * C21355 +
             (C47384 * C1559 - C113 * C1558) * C47110) *
                C21354) *
               C47268) *
              C47163 * C47465)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C47384 * C124 - C113 * C117) * C21355 +
              (C47384 * C138 - C113 * C125) * C47110) *
                 C21352 +
             ((C4868 - C4869) * C21355 + (C4870 - C4871) * C47110) * C21353 +
             C21477 * C21354) *
                C47430 +
            (((C113 * C468 - C47384 * C478) * C21355 +
              (C113 * C479 - C47384 * C498) * C47110) *
                 C21352 +
             ((C5490 - C5491) * C21355 + (C5492 - C5493) * C47110) * C21353 +
             C22246 * C21354) *
                C47268) *
               C1050 +
           ((((C4869 - C4868) * C21355 + (C4871 - C4870) * C47110) * C21352 +
             ((C4876 - C4877) * C21355 + (C4878 - C4879) * C47110) * C21353 +
             C22118 * C21354) *
                C47430 +
            (((C5491 - C5490) * C21355 + (C5493 - C5492) * C47110) * C21352 +
             ((C5906 - C5907) * C21355 + (C5908 - C5909) * C47110) * C21353 +
             ((C6393 - C6392) * C21355 + (C6395 - C6394) * C47110) * C21354) *
                C47268) *
               C1051 +
           ((C21477 * C21352 +
             ((C5736 - C5737) * C21355 + (C5738 - C5739) * C47110) * C21353 +
             C22119 * C21354) *
                C47430 +
            (C22246 * C21352 +
             ((C6392 - C6393) * C21355 + (C6394 - C6395) * C47110) * C21353 +
             ((C113 * C6383 - C47384 * C6385) * C21355 +
              (C113 * C6386 - C47384 * C6389) * C47110) *
                 C21354) *
                C47268) *
               C47461) *
              C47415 +
          (((((C147 - C146) * C21355 + (C149 - C148) * C47110) * C21352 +
             (C4874 * C21355 + C4875 * C47110) * C21353 + C21475 * C21354) *
                C47430 +
            (((C510 - C509) * C21355 + (C512 - C511) * C47110) * C21352 +
             (C5496 * C21355 + C5497 * C47110) * C21353 + C22497 * C21354) *
                C47268) *
               C1050 +
           (((C4872 * C21355 + C4873 * C47110) * C21352 +
             (C4882 * C21355 + C4883 * C47110) * C21353 + C22348 * C21354) *
                C47430 +
            ((C5494 * C21355 + C5495 * C47110) * C21352 +
             (C6248 * C21355 + C6249 * C47110) * C21353 +
             ((C6250 - C6251) * C21355 + (C6252 - C6253) * C47110) * C21354) *
                C47268) *
               C1051 +
           ((C21475 * C21352 + (C6050 * C21355 + C6051 * C47110) * C21353 +
             ((C5744 - C5745) * C21355 + (C5746 - C5747) * C47110) * C21354) *
                C47430 +
            (C22497 * C21352 +
             ((C6251 - C6250) * C21355 + (C6253 - C6252) * C47110) * C21353 +
             ((C47384 * C6387 - C113 * C6384) * C21355 +
              (C47384 * C6390 - C113 * C6388) * C47110) *
                 C21354) *
                C47268) *
               C47461) *
              C47146)) /
            (p * q * std::sqrt(p + q));
    d2ee[124] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C47384 * C124 - C113 * C117) * C21355 +
            (C47384 * C138 - C113 * C125) * C47110) *
               C21352 +
           ((C4868 - C4869) * C21355 + (C4870 - C4871) * C47110) * C21353 +
           ((C4877 - C4876) * C21355 + (C4879 - C4878) * C47110) * C21354) *
              C47181 * C47163 * C108 +
          (((C147 - C146) * C21355 + (C149 - C148) * C47110) * C21352 +
           (C4874 * C21355 + C4875 * C47110) * C21353 +
           (C4880 * C21355 + C4881 * C47110) * C21354) *
              C47181 * C47163 * C109 +
          ((C166 * C21355 + C167 * C47110) * C21352 +
           (C4884 * C21355 + C4885 * C47110) * C21353 +
           (C354 * C21355 + C355 * C47110) * C21354) *
              C47181 * C47163 * C110 +
          ((C168 * C21355 + C169 * C47110) * C21352 +
           (C5164 * C21355 + C5165 * C47110) * C21353 +
           ((C348 - C349) * C21355 + (C350 - C351) * C47110) * C21354) *
              C47181 * C47163 * C111 +
          ((C170 * C21355 + C171 * C47110) * C21352 +
           ((C648 - C647) * C21355 + (C650 - C649) * C47110) * C21353 +
           ((C47384 * C315 - C113 * C296) * C21355 +
            (C47384 * C326 - C113 * C316) * C47110) *
               C21354) *
              C47181 * C47163 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C47384 * C124 - C113 * C117) * C21355 +
             (C47384 * C138 - C113 * C125) * C47110) *
                C21352 +
            ((C4868 - C4869) * C21355 + (C4870 - C4871) * C47110) * C21353 +
            C21477 * C21354) *
               C47181 * C47500 +
           (((C4869 - C4868) * C21355 + (C4871 - C4870) * C47110) * C21352 +
            ((C4876 - C4877) * C21355 + (C4878 - C4879) * C47110) * C21353 +
            ((C5737 - C5736) * C21355 + (C5739 - C5738) * C47110) * C21354) *
               C47181 * C47488 +
           (C21477 * C21352 +
            ((C5736 - C5737) * C21355 + (C5738 - C5739) * C47110) * C21353 +
            ((C5741 - C5740) * C21355 + (C5743 - C5742) * C47110) * C21354) *
               C47181 * C47461) *
              C284 +
          ((((C147 - C146) * C21355 + (C149 - C148) * C47110) * C21352 +
            (C4874 * C21355 + C4875 * C47110) * C21353 + C21475 * C21354) *
               C47181 * C47500 +
           ((C4872 * C21355 + C4873 * C47110) * C21352 +
            (C4882 * C21355 + C4883 * C47110) * C21353 +
            (C6048 * C21355 + C6049 * C47110) * C21354) *
               C47181 * C47488 +
           (C21475 * C21352 + (C6050 * C21355 + C6051 * C47110) * C21353 +
            ((C5744 - C5745) * C21355 + (C5746 - C5747) * C47110) * C21354) *
               C47181 * C47461) *
              C285 +
          (((C166 * C21355 + C167 * C47110) * C21352 +
            (C4884 * C21355 + C4885 * C47110) * C21353 + C21476 * C21354) *
               C47181 * C47500 +
           ((C352 * C21355 + C353 * C47110) * C21352 +
            (C4886 * C21355 + C4887 * C47110) * C21353 +
            ((C1407 - C1408) * C21355 + (C1409 - C1410) * C47110) * C21354) *
               C47181 * C47488 +
           (C21476 * C21352 +
            ((C1408 - C1407) * C21355 + (C1410 - C1409) * C47110) * C21353 +
            ((C47384 * C1140 - C113 * C1129) * C21355 +
             (C47384 * C1147 - C113 * C1141) * C47110) *
                C21354) *
               C47181 * C47461) *
              C47455)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C47384 * C124 - C113 * C117) * C21355 +
             (C47384 * C138 - C113 * C125) * C47110) *
                C21352 +
            ((C4868 - C4869) * C21355 + (C4870 - C4871) * C47110) * C21353 +
            C21477 * C21354) *
               C47181 * C1050 +
           (((C4869 - C4868) * C21355 + (C4871 - C4870) * C47110) * C21352 +
            ((C4876 - C4877) * C21355 + (C4878 - C4879) * C47110) * C21353 +
            ((C5737 - C5736) * C21355 + (C5739 - C5738) * C47110) * C21354) *
               C47181 * C1051 +
           (C21477 * C21352 +
            ((C5736 - C5737) * C21355 + (C5738 - C5739) * C47110) * C21353 +
            ((C5741 - C5740) * C21355 + (C5743 - C5742) * C47110) * C21354) *
               C47181 * C47461) *
              C47497 +
          ((((C147 - C146) * C21355 + (C149 - C148) * C47110) * C21352 +
            (C4874 * C21355 + C4875 * C47110) * C21353 + C21475 * C21354) *
               C47181 * C1050 +
           ((C4872 * C21355 + C4873 * C47110) * C21352 +
            (C4882 * C21355 + C4883 * C47110) * C21353 +
            (C6048 * C21355 + C6049 * C47110) * C21354) *
               C47181 * C1051 +
           (C21475 * C21352 + (C6050 * C21355 + C6051 * C47110) * C21353 +
            ((C5744 - C5745) * C21355 + (C5746 - C5747) * C47110) * C21354) *
               C47181 * C47461) *
              C47484 +
          (((C166 * C21355 + C167 * C47110) * C21352 +
            (C4884 * C21355 + C4885 * C47110) * C21353 + C21476 * C21354) *
               C47181 * C1050 +
           ((C352 * C21355 + C353 * C47110) * C21352 +
            (C4886 * C21355 + C4887 * C47110) * C21353 +
            ((C1407 - C1408) * C21355 + (C1409 - C1410) * C47110) * C21354) *
               C47181 * C1051 +
           (C21476 * C21352 +
            ((C1408 - C1407) * C21355 + (C1410 - C1409) * C47110) * C21353 +
            ((C47384 * C1140 - C113 * C1129) * C21355 +
             (C47384 * C1147 - C113 * C1141) * C47110) *
                C21354) *
               C47181 * C47461) *
              C47455)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C47384 * C124 - C113 * C117) * C21355 +
            (C47384 * C138 - C113 * C125) * C47110) *
               C21352 +
           ((C4868 - C4869) * C21355 + (C4870 - C4871) * C47110) * C21353 +
           C21477 * C21354) *
              C47181 * C1118 +
          (((C4869 - C4868) * C21355 + (C4871 - C4870) * C47110) * C21352 +
           ((C4876 - C4877) * C21355 + (C4878 - C4879) * C47110) * C21353 +
           C22118 * C21354) *
              C47181 * C1119 +
          (C21477 * C21352 +
           ((C5736 - C5737) * C21355 + (C5738 - C5739) * C47110) * C21353 +
           C22119 * C21354) *
              C47181 * C1120 +
          (C22118 * C21352 +
           ((C5740 - C5741) * C21355 + (C5742 - C5743) * C47110) * C21353 +
           ((C22110 - C22111) * C21355 + (C22112 - C22113) * C47110) * C21354) *
              C47181 * C1121 +
          (C22119 * C21352 +
           ((C22111 - C22110) * C21355 + (C22113 - C22112) * C47110) * C21353 +
           ((C47384 * C22102 - C113 * C22101) * C21355 +
            (C47384 * C22104 - C113 * C22103) * C47110) *
               C21354) *
              C47181 * C1122) *
         C47135) /
            (p * q * std::sqrt(p + q));
    d2ee[125] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C10297 * C124 - C10299 * C117 + C47481 * C478 - C10300 * C468) *
                 C21355 +
             (C10297 * C138 - C10299 * C125 + C47481 * C498 - C10300 * C479) *
                 C47110) *
                C15919 +
            ((C25705 - C25706 + C25707 - C25708) * C21355 +
             (C25709 - C25710 + C25711 - C25712) * C47110) *
                C47479) *
               C47181 * C47222 +
           (((C25706 - C25705 + C25708 - C25707) * C21355 +
             (C25710 - C25709 + C25712 - C25711) * C47110) *
                C15919 +
            ((C25713 - C25714 + C25715 - C25716) * C21355 +
             (C25717 - C25718 + C25719 - C25720) * C47110) *
                C47479) *
               C47181 * C47229 +
           (((C25714 - C25713 + C25716 - C25715) * C21355 +
             (C25718 - C25717 + C25720 - C25719) * C47110) *
                C15919 +
            ((C26557 - C26558 + C26559 - C26560) * C21355 +
             (C26561 - C26562 + C26563 - C26564) * C47110) *
                C47479) *
               C47181 * C2840) *
              C47140 +
          ((((C10303 - C10302 + C10305 - C10304) * C21355 +
             (C10307 - C10306 + C10309 - C10308) * C47110) *
                C15919 +
            ((C10480 - C10481 + C10482 - C10483) * C21355 +
             (C10484 - C10485 + C10486 - C10487) * C47110) *
                C47479) *
               C47181 * C47222 +
           (((C10481 - C10480 + C10483 - C10482) * C21355 +
             (C10485 - C10484 + C10487 - C10486) * C47110) *
                C15919 +
            ((C10488 - C10489 + C10490 - C10491) * C21355 +
             (C10492 - C10493 + C10494 - C10495) * C47110) *
                C47479) *
               C47181 * C47229 +
           (((C10489 - C10488 + C10491 - C10490) * C21355 +
             (C10493 - C10492 + C10495 - C10494) * C47110) *
                C15919 +
            ((C11680 - C11681 + C11682 - C11683) * C21355 +
             (C11684 - C11685 + C11686 - C11687) * C47110) *
                C47479) *
               C47181 * C2840) *
              C47149 +
          ((((C10311 - C10310 + C10313 - C10312) * C21355 +
             (C10315 - C10314 + C10317 - C10316) * C47110) *
                C15919 +
            ((C10496 - C10497 + C10498 - C10499) * C21355 +
             (C10500 - C10501 + C10502 - C10503) * C47110) *
                C47479) *
               C47181 * C47222 +
           (((C10497 - C10496 + C10499 - C10498) * C21355 +
             (C10501 - C10500 + C10503 - C10502) * C47110) *
                C15919 +
            ((C10504 - C10505 + C10506 - C10507) * C21355 +
             (C10508 - C10509 + C10510 - C10511) * C47110) *
                C47479) *
               C47181 * C47229 +
           (((C10505 - C10504 + C10507 - C10506) * C21355 +
             (C10509 - C10508 + C10511 - C10510) * C47110) *
                C15919 +
            ((C10297 * C1134 - C10299 * C1126 + C47481 * C1673 -
              C10300 * C1668) *
                 C21355 +
             (C10297 * C1144 - C10299 * C1135 + C47481 * C1677 -
              C10300 * C1674) *
                 C47110) *
                C47479) *
               C47181 * C2840) *
              C2843)) /
        (p * q * std::sqrt(p + q));
    d2ee[126] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C10297 * C124 - C10299 * C117 + C47481 * C478 - C10300 * C468) *
                  C21355 +
              (C10297 * C138 - C10299 * C125 + C47481 * C498 - C10300 * C479) *
                  C47110) *
                 C15919 +
             ((C25705 - C25706 + C25707 - C25708) * C21355 +
              (C25709 - C25710 + C25711 - C25712) * C47110) *
                 C47479) *
                C47430 +
            (((C10299 * C468 - C10297 * C478 + C10300 * C471 - C47481 * C484) *
                  C21355 +
              (C10299 * C479 - C10297 * C498 + C10300 * C485 - C47481 * C501) *
                  C47110) *
                 C15919 +
             ((C26321 - C26322 + C26323 - C26324) * C21355 +
              (C26325 - C26326 + C26327 - C26328) * C47110) *
                 C47479) *
                C47268) *
               C47222 +
           ((((C25706 - C25705 + C25708 - C25707) * C21355 +
              (C25710 - C25709 + C25712 - C25711) * C47110) *
                 C15919 +
             ((C25713 - C25714 + C25715 - C25716) * C21355 +
              (C25717 - C25718 + C25719 - C25720) * C47110) *
                 C47479) *
                C47430 +
            (((C26322 - C26321 + C26324 - C26323) * C21355 +
              (C26326 - C26325 + C26328 - C26327) * C47110) *
                 C15919 +
             ((C26727 - C26728 + C26729 - C26730) * C21355 +
              (C26731 - C26732 + C26733 - C26734) * C47110) *
                 C47479) *
                C47268) *
               C47229 +
           ((((C25714 - C25713 + C25716 - C25715) * C21355 +
              (C25718 - C25717 + C25720 - C25719) * C47110) *
                 C15919 +
             ((C26557 - C26558 + C26559 - C26560) * C21355 +
              (C26561 - C26562 + C26563 - C26564) * C47110) *
                 C47479) *
                C47430 +
            (((C26728 - C26727 + C26730 - C26729) * C21355 +
              (C26732 - C26731 + C26734 - C26733) * C47110) *
                 C15919 +
             ((C27197 - C27198 + C27199 - C27200) * C21355 +
              (C27201 - C27202 + C27203 - C27204) * C47110) *
                 C47479) *
                C47268) *
               C2840) *
              C2580 +
          (((((C10303 - C10302 + C10305 - C10304) * C21355 +
              (C10307 - C10306 + C10309 - C10308) * C47110) *
                 C15919 +
             ((C10480 - C10481 + C10482 - C10483) * C21355 +
              (C10484 - C10485 + C10486 - C10487) * C47110) *
                 C47479) *
                C47430 +
            (((C10659 - C10658 + C10661 - C10660) * C21355 +
              (C10663 - C10662 + C10665 - C10664) * C47110) *
                 C15919 +
             ((C11160 - C11161 + C11162 - C11163) * C21355 +
              (C11164 - C11165 + C11166 - C11167) * C47110) *
                 C47479) *
                C47268) *
               C47222 +
           ((((C10481 - C10480 + C10483 - C10482) * C21355 +
              (C10485 - C10484 + C10487 - C10486) * C47110) *
                 C15919 +
             ((C10488 - C10489 + C10490 - C10491) * C21355 +
              (C10492 - C10493 + C10494 - C10495) * C47110) *
                 C47479) *
                C47430 +
            (((C11161 - C11160 + C11163 - C11162) * C21355 +
              (C11165 - C11164 + C11167 - C11166) * C47110) *
                 C15919 +
             ((C11882 - C11883 + C11884 - C11885) * C21355 +
              (C11886 - C11887 + C11888 - C11889) * C47110) *
                 C47479) *
                C47268) *
               C47229 +
           ((((C10489 - C10488 + C10491 - C10490) * C21355 +
              (C10493 - C10492 + C10495 - C10494) * C47110) *
                 C15919 +
             ((C11680 - C11681 + C11682 - C11683) * C21355 +
              (C11684 - C11685 + C11686 - C11687) * C47110) *
                 C47479) *
                C47430 +
            (((C11883 - C11882 + C11885 - C11884) * C21355 +
              (C11887 - C11886 + C11889 - C11888) * C47110) *
                 C15919 +
             ((C10297 * C1671 - C10299 * C1667 + C47481 * C5897 -
               C10300 * C5894) *
                  C21355 +
              (C10297 * C1676 - C10299 * C1672 + C47481 * C5900 -
               C10300 * C5898) *
                  C47110) *
                 C47479) *
                C47268) *
               C2840) *
              C47146)) /
        (p * q * std::sqrt(p + q));
    d2ee[127] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C10297 * C124 - C10299 * C117 + C47481 * C478 - C10300 * C468) *
                 C21355 +
             (C10297 * C138 - C10299 * C125 + C47481 * C498 - C10300 * C479) *
                 C47110) *
                C15919 +
            ((C25705 - C25706 + C25707 - C25708) * C21355 +
             (C25709 - C25710 + C25711 - C25712) * C47110) *
                C47479) *
               C47181 * C47507 +
           (((C25706 - C25705 + C25708 - C25707) * C21355 +
             (C25710 - C25709 + C25712 - C25711) * C47110) *
                C15919 +
            ((C25713 - C25714 + C25715 - C25716) * C21355 +
             (C25717 - C25718 + C25719 - C25720) * C47110) *
                C47479) *
               C47181 * C47503 +
           (((C25714 - C25713 + C25716 - C25715) * C21355 +
             (C25718 - C25717 + C25720 - C25719) * C47110) *
                C15919 +
            ((C26557 - C26558 + C26559 - C26560) * C21355 +
             (C26561 - C26562 + C26563 - C26564) * C47110) *
                C47479) *
               C47181 * C47493 +
           (((C26558 - C26557 + C26560 - C26559) * C21355 +
             (C26562 - C26561 + C26564 - C26563) * C47110) *
                C15919 +
            ((C26565 - C26566 + C26567 - C26568) * C21355 +
             (C26569 - C26570 + C26571 - C26572) * C47110) *
                C47479) *
               C47181 * C47471) *
              C2580 +
          ((((C10303 - C10302 + C10305 - C10304) * C21355 +
             (C10307 - C10306 + C10309 - C10308) * C47110) *
                C15919 +
            ((C10480 - C10481 + C10482 - C10483) * C21355 +
             (C10484 - C10485 + C10486 - C10487) * C47110) *
                C47479) *
               C47181 * C47507 +
           (((C10481 - C10480 + C10483 - C10482) * C21355 +
             (C10485 - C10484 + C10487 - C10486) * C47110) *
                C15919 +
            ((C10488 - C10489 + C10490 - C10491) * C21355 +
             (C10492 - C10493 + C10494 - C10495) * C47110) *
                C47479) *
               C47181 * C47503 +
           (((C10489 - C10488 + C10491 - C10490) * C21355 +
             (C10493 - C10492 + C10495 - C10494) * C47110) *
                C15919 +
            ((C11680 - C11681 + C11682 - C11683) * C21355 +
             (C11684 - C11685 + C11686 - C11687) * C47110) *
                C47479) *
               C47181 * C47493 +
           (((C11681 - C11680 + C11683 - C11682) * C21355 +
             (C11685 - C11684 + C11687 - C11686) * C47110) *
                C15919 +
            ((C10297 * C1138 - C10299 * C1128 + C47481 * C6387 -
              C10300 * C6384) *
                 C21355 +
             (C10297 * C1146 - C10299 * C1139 + C47481 * C6390 -
              C10300 * C6388) *
                 C47110) *
                C47479) *
               C47181 * C47471) *
              C47146)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C10297 * C124 - C10299 * C117 + C47481 * C478 - C10300 * C468) *
                 C21355 +
             (C10297 * C138 - C10299 * C125 + C47481 * C498 - C10300 * C479) *
                 C47110) *
                C15919 +
            ((C25705 - C25706 + C25707 - C25708) * C21355 +
             (C25709 - C25710 + C25711 - C25712) * C47110) *
                C47479) *
               C47181 * C2472 +
           (((C25706 - C25705 + C25708 - C25707) * C21355 +
             (C25710 - C25709 + C25712 - C25711) * C47110) *
                C15919 +
            ((C25713 - C25714 + C25715 - C25716) * C21355 +
             (C25717 - C25718 + C25719 - C25720) * C47110) *
                C47479) *
               C47181 * C47226) *
              C47506 +
          ((((C10303 - C10302 + C10305 - C10304) * C21355 +
             (C10307 - C10306 + C10309 - C10308) * C47110) *
                C15919 +
            ((C10480 - C10481 + C10482 - C10483) * C21355 +
             (C10484 - C10485 + C10486 - C10487) * C47110) *
                C47479) *
               C47181 * C2472 +
           (((C10481 - C10480 + C10483 - C10482) * C21355 +
             (C10485 - C10484 + C10487 - C10486) * C47110) *
                C15919 +
            ((C10488 - C10489 + C10490 - C10491) * C21355 +
             (C10492 - C10493 + C10494 - C10495) * C47110) *
                C47479) *
               C47181 * C47226) *
              C47499 +
          ((((C10311 - C10310 + C10313 - C10312) * C21355 +
             (C10315 - C10314 + C10317 - C10316) * C47110) *
                C15919 +
            ((C10496 - C10497 + C10498 - C10499) * C21355 +
             (C10500 - C10501 + C10502 - C10503) * C47110) *
                C47479) *
               C47181 * C2472 +
           (((C10497 - C10496 + C10499 - C10498) * C21355 +
             (C10501 - C10500 + C10503 - C10502) * C47110) *
                C15919 +
            ((C10504 - C10505 + C10506 - C10507) * C21355 +
             (C10508 - C10509 + C10510 - C10511) * C47110) *
                C47479) *
               C47181 * C47226) *
              C47486 +
          ((((C10319 - C10318 + C10321 - C10320) * C21355 +
             (C10323 - C10322 + C10325 - C10324) * C47110) *
                C15919 +
            ((C10820 - C10821 + C10822 - C10823) * C21355 +
             (C10824 - C10825 + C10826 - C10827) * C47110) *
                C47479) *
               C47181 * C2472 +
           (((C10821 - C10820 + C10823 - C10822) * C21355 +
             (C10825 - C10824 + C10827 - C10826) * C47110) *
                C15919 +
            ((C10297 * C311 - C10299 * C294 + C47481 * C1557 - C10300 * C1556) *
                 C21355 +
             (C10297 * C324 - C10299 * C312 + C47481 * C1559 - C10300 * C1558) *
                 C47110) *
                C47479) *
               C47181 * C47226) *
              C47465)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C10297 * C124 - C10299 * C117 + C47481 * C478 - C10300 * C468) *
                  C21355 +
              (C10297 * C138 - C10299 * C125 + C47481 * C498 - C10300 * C479) *
                  C47110) *
                 C15919 +
             ((C25705 - C25706 + C25707 - C25708) * C21355 +
              (C25709 - C25710 + C25711 - C25712) * C47110) *
                 C47479) *
                C47501 +
            (((C10299 * C468 - C10297 * C478 + C10300 * C471 - C47481 * C484) *
                  C21355 +
              (C10299 * C479 - C10297 * C498 + C10300 * C485 - C47481 * C501) *
                  C47110) *
                 C15919 +
             ((C26321 - C26322 + C26323 - C26324) * C21355 +
              (C26325 - C26326 + C26327 - C26328) * C47110) *
                 C47479) *
                C47490 +
            (((C10297 * C484 - C10299 * C471 + C47481 * C1974 -
               C10300 * C1968) *
                  C21355 +
              (C10297 * C501 - C10299 * C485 + C47481 * C1986 -
               C10300 * C1975) *
                  C47110) *
                 C15919 +
             ((C26719 - C26720 + C26721 - C26722) * C21355 +
              (C26723 - C26724 + C26725 - C26726) * C47110) *
                 C47479) *
                C47464) *
               C2472 +
           ((((C25706 - C25705 + C25708 - C25707) * C21355 +
              (C25710 - C25709 + C25712 - C25711) * C47110) *
                 C15919 +
             ((C25713 - C25714 + C25715 - C25716) * C21355 +
              (C25717 - C25718 + C25719 - C25720) * C47110) *
                 C47479) *
                C47501 +
            (((C26322 - C26321 + C26324 - C26323) * C21355 +
              (C26326 - C26325 + C26328 - C26327) * C47110) *
                 C15919 +
             ((C26727 - C26728 + C26729 - C26730) * C21355 +
              (C26731 - C26732 + C26733 - C26734) * C47110) *
                 C47479) *
                C47490 +
            (((C26720 - C26719 + C26722 - C26721) * C21355 +
              (C26724 - C26723 + C26726 - C26725) * C47110) *
                 C15919 +
             ((C26735 - C26736 + C26737 - C26738) * C21355 +
              (C26739 - C26740 + C26741 - C26742) * C47110) *
                 C47479) *
                C47464) *
               C47226) *
              C2580 +
          (((((C10303 - C10302 + C10305 - C10304) * C21355 +
              (C10307 - C10306 + C10309 - C10308) * C47110) *
                 C15919 +
             ((C10480 - C10481 + C10482 - C10483) * C21355 +
              (C10484 - C10485 + C10486 - C10487) * C47110) *
                 C47479) *
                C47501 +
            (((C10659 - C10658 + C10661 - C10660) * C21355 +
              (C10663 - C10662 + C10665 - C10664) * C47110) *
                 C15919 +
             ((C11160 - C11161 + C11162 - C11163) * C21355 +
              (C11164 - C11165 + C11166 - C11167) * C47110) *
                 C47479) *
                C47490 +
            (((C10667 - C10666 + C10669 - C10668) * C21355 +
              (C10671 - C10670 + C10673 - C10672) * C47110) *
                 C15919 +
             ((C12596 - C12597 + C12598 - C12599) * C21355 +
              (C12600 - C12601 + C12602 - C12603) * C47110) *
                 C47479) *
                C47464) *
               C2472 +
           ((((C10481 - C10480 + C10483 - C10482) * C21355 +
              (C10485 - C10484 + C10487 - C10486) * C47110) *
                 C15919 +
             ((C10488 - C10489 + C10490 - C10491) * C21355 +
              (C10492 - C10493 + C10494 - C10495) * C47110) *
                 C47479) *
                C47501 +
            (((C11161 - C11160 + C11163 - C11162) * C21355 +
              (C11165 - C11164 + C11167 - C11166) * C47110) *
                 C15919 +
             ((C11882 - C11883 + C11884 - C11885) * C21355 +
              (C11886 - C11887 + C11888 - C11889) * C47110) *
                 C47479) *
                C47490 +
            (((C12597 - C12596 + C12599 - C12598) * C21355 +
              (C12601 - C12600 + C12603 - C12602) * C47110) *
                 C15919 +
             ((C10297 * C1281 - C10299 * C1265 + C47481 * C7243 -
               C10300 * C7240) *
                  C21355 +
              (C10297 * C1292 - C10299 * C1282 + C47481 * C7246 -
               C10300 * C7244) *
                  C47110) *
                 C47479) *
                C47464) *
               C47226) *
              C47146)) /
            (p * q * std::sqrt(p + q));
    d2ee[128] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C10297 * C124 - C10299 * C117 + C47481 * C478 - C10300 * C468) *
                  C21355 +
              (C10297 * C138 - C10299 * C125 + C47481 * C498 - C10300 * C479) *
                  C47110) *
                 C15919 +
             ((C25705 - C25706 + C25707 - C25708) * C21355 +
              (C25709 - C25710 + C25711 - C25712) * C47110) *
                 C47479) *
                C47430 +
            (((C10299 * C468 - C10297 * C478 + C10300 * C471 - C47481 * C484) *
                  C21355 +
              (C10299 * C479 - C10297 * C498 + C10300 * C485 - C47481 * C501) *
                  C47110) *
                 C15919 +
             ((C26321 - C26322 + C26323 - C26324) * C21355 +
              (C26325 - C26326 + C26327 - C26328) * C47110) *
                 C47479) *
                C47268) *
               C2472 +
           ((((C25706 - C25705 + C25708 - C25707) * C21355 +
              (C25710 - C25709 + C25712 - C25711) * C47110) *
                 C15919 +
             ((C25713 - C25714 + C25715 - C25716) * C21355 +
              (C25717 - C25718 + C25719 - C25720) * C47110) *
                 C47479) *
                C47430 +
            (((C26322 - C26321 + C26324 - C26323) * C21355 +
              (C26326 - C26325 + C26328 - C26327) * C47110) *
                 C15919 +
             ((C26727 - C26728 + C26729 - C26730) * C21355 +
              (C26731 - C26732 + C26733 - C26734) * C47110) *
                 C47479) *
                C47268) *
               C47226) *
              C47140 +
          (((((C10303 - C10302 + C10305 - C10304) * C21355 +
              (C10307 - C10306 + C10309 - C10308) * C47110) *
                 C15919 +
             ((C10480 - C10481 + C10482 - C10483) * C21355 +
              (C10484 - C10485 + C10486 - C10487) * C47110) *
                 C47479) *
                C47430 +
            (((C10659 - C10658 + C10661 - C10660) * C21355 +
              (C10663 - C10662 + C10665 - C10664) * C47110) *
                 C15919 +
             ((C11160 - C11161 + C11162 - C11163) * C21355 +
              (C11164 - C11165 + C11166 - C11167) * C47110) *
                 C47479) *
                C47268) *
               C2472 +
           ((((C10481 - C10480 + C10483 - C10482) * C21355 +
              (C10485 - C10484 + C10487 - C10486) * C47110) *
                 C15919 +
             ((C10488 - C10489 + C10490 - C10491) * C21355 +
              (C10492 - C10493 + C10494 - C10495) * C47110) *
                 C47479) *
                C47430 +
            (((C11161 - C11160 + C11163 - C11162) * C21355 +
              (C11165 - C11164 + C11167 - C11166) * C47110) *
                 C15919 +
             ((C11882 - C11883 + C11884 - C11885) * C21355 +
              (C11886 - C11887 + C11888 - C11889) * C47110) *
                 C47479) *
                C47268) *
               C47226) *
              C47149 +
          (((((C10311 - C10310 + C10313 - C10312) * C21355 +
              (C10315 - C10314 + C10317 - C10316) * C47110) *
                 C15919 +
             ((C10496 - C10497 + C10498 - C10499) * C21355 +
              (C10500 - C10501 + C10502 - C10503) * C47110) *
                 C47479) *
                C47430 +
            (((C10675 - C10674 + C10677 - C10676) * C21355 +
              (C10679 - C10678 + C10681 - C10680) * C47110) *
                 C15919 +
             ((C11168 - C11169 + C11170 - C11171) * C21355 +
              (C11172 - C11173 + C11174 - C11175) * C47110) *
                 C47479) *
                C47268) *
               C2472 +
           ((((C10497 - C10496 + C10499 - C10498) * C21355 +
              (C10501 - C10500 + C10503 - C10502) * C47110) *
                 C15919 +
             ((C10504 - C10505 + C10506 - C10507) * C21355 +
              (C10508 - C10509 + C10510 - C10511) * C47110) *
                 C47479) *
                C47430 +
            (((C11169 - C11168 + C11171 - C11170) * C21355 +
              (C11173 - C11172 + C11175 - C11174) * C47110) *
                 C15919 +
             ((C10297 * C1277 - C10299 * C1263 + C47481 * C1283 -
               C10300 * C1266) *
                  C21355 +
              (C10297 * C1290 - C10299 * C1278 + C47481 * C1293 -
               C10300 * C1284) *
                  C47110) *
                 C47479) *
                C47268) *
               C47226) *
              C2843)) /
        (p * q * std::sqrt(p + q));
    d2ee[129] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C10297 * C124 - C10299 * C117 + C47481 * C478 - C10300 * C468) *
                 C21355 +
             (C10297 * C138 - C10299 * C125 + C47481 * C498 - C10300 * C479) *
                 C47110) *
                C15919 +
            ((C25705 - C25706 + C25707 - C25708) * C21355 +
             (C25709 - C25710 + C25711 - C25712) * C47110) *
                C47479) *
               C47181 * C2472 +
           (((C25706 - C25705 + C25708 - C25707) * C21355 +
             (C25710 - C25709 + C25712 - C25711) * C47110) *
                C15919 +
            ((C25713 - C25714 + C25715 - C25716) * C21355 +
             (C25717 - C25718 + C25719 - C25720) * C47110) *
                C47479) *
               C47181 * C47226) *
              C47506 +
          ((((C10303 - C10302 + C10305 - C10304) * C21355 +
             (C10307 - C10306 + C10309 - C10308) * C47110) *
                C15919 +
            ((C10480 - C10481 + C10482 - C10483) * C21355 +
             (C10484 - C10485 + C10486 - C10487) * C47110) *
                C47479) *
               C47181 * C2472 +
           (((C10481 - C10480 + C10483 - C10482) * C21355 +
             (C10485 - C10484 + C10487 - C10486) * C47110) *
                C15919 +
            ((C10488 - C10489 + C10490 - C10491) * C21355 +
             (C10492 - C10493 + C10494 - C10495) * C47110) *
                C47479) *
               C47181 * C47226) *
              C47499 +
          ((((C10311 - C10310 + C10313 - C10312) * C21355 +
             (C10315 - C10314 + C10317 - C10316) * C47110) *
                C15919 +
            ((C10496 - C10497 + C10498 - C10499) * C21355 +
             (C10500 - C10501 + C10502 - C10503) * C47110) *
                C47479) *
               C47181 * C2472 +
           (((C10497 - C10496 + C10499 - C10498) * C21355 +
             (C10501 - C10500 + C10503 - C10502) * C47110) *
                C15919 +
            ((C10504 - C10505 + C10506 - C10507) * C21355 +
             (C10508 - C10509 + C10510 - C10511) * C47110) *
                C47479) *
               C47181 * C47226) *
              C47486 +
          ((((C10319 - C10318 + C10321 - C10320) * C21355 +
             (C10323 - C10322 + C10325 - C10324) * C47110) *
                C15919 +
            ((C10820 - C10821 + C10822 - C10823) * C21355 +
             (C10824 - C10825 + C10826 - C10827) * C47110) *
                C47479) *
               C47181 * C2472 +
           (((C10821 - C10820 + C10823 - C10822) * C21355 +
             (C10825 - C10824 + C10827 - C10826) * C47110) *
                C15919 +
            ((C10297 * C311 - C10299 * C294 + C47481 * C1557 - C10300 * C1556) *
                 C21355 +
             (C10297 * C324 - C10299 * C312 + C47481 * C1559 - C10300 * C1558) *
                 C47110) *
                C47479) *
               C47181 * C47226) *
              C47465)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C10297 * C124 - C10299 * C117 + C47481 * C478 - C10300 * C468) *
                 C21355 +
             (C10297 * C138 - C10299 * C125 + C47481 * C498 - C10300 * C479) *
                 C47110) *
                C15919 +
            ((C25705 - C25706 + C25707 - C25708) * C21355 +
             (C25709 - C25710 + C25711 - C25712) * C47110) *
                C47479) *
               C47181 * C47507 +
           (((C25706 - C25705 + C25708 - C25707) * C21355 +
             (C25710 - C25709 + C25712 - C25711) * C47110) *
                C15919 +
            ((C25713 - C25714 + C25715 - C25716) * C21355 +
             (C25717 - C25718 + C25719 - C25720) * C47110) *
                C47479) *
               C47181 * C47503 +
           (((C25714 - C25713 + C25716 - C25715) * C21355 +
             (C25718 - C25717 + C25720 - C25719) * C47110) *
                C15919 +
            ((C26557 - C26558 + C26559 - C26560) * C21355 +
             (C26561 - C26562 + C26563 - C26564) * C47110) *
                C47479) *
               C47181 * C47493 +
           (((C26558 - C26557 + C26560 - C26559) * C21355 +
             (C26562 - C26561 + C26564 - C26563) * C47110) *
                C15919 +
            ((C26565 - C26566 + C26567 - C26568) * C21355 +
             (C26569 - C26570 + C26571 - C26572) * C47110) *
                C47479) *
               C47181 * C47471) *
              C2580 +
          ((((C10303 - C10302 + C10305 - C10304) * C21355 +
             (C10307 - C10306 + C10309 - C10308) * C47110) *
                C15919 +
            ((C10480 - C10481 + C10482 - C10483) * C21355 +
             (C10484 - C10485 + C10486 - C10487) * C47110) *
                C47479) *
               C47181 * C47507 +
           (((C10481 - C10480 + C10483 - C10482) * C21355 +
             (C10485 - C10484 + C10487 - C10486) * C47110) *
                C15919 +
            ((C10488 - C10489 + C10490 - C10491) * C21355 +
             (C10492 - C10493 + C10494 - C10495) * C47110) *
                C47479) *
               C47181 * C47503 +
           (((C10489 - C10488 + C10491 - C10490) * C21355 +
             (C10493 - C10492 + C10495 - C10494) * C47110) *
                C15919 +
            ((C11680 - C11681 + C11682 - C11683) * C21355 +
             (C11684 - C11685 + C11686 - C11687) * C47110) *
                C47479) *
               C47181 * C47493 +
           (((C11681 - C11680 + C11683 - C11682) * C21355 +
             (C11685 - C11684 + C11687 - C11686) * C47110) *
                C15919 +
            ((C10297 * C1138 - C10299 * C1128 + C47481 * C6387 -
              C10300 * C6384) *
                 C21355 +
             (C10297 * C1146 - C10299 * C1139 + C47481 * C6390 -
              C10300 * C6388) *
                 C47110) *
                C47479) *
               C47181 * C47471) *
              C47146)) /
            (p * q * std::sqrt(p + q));
    d2ee[130] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C10297 * C124 - C10299 * C117 + C47481 * C478 - C10300 * C468) *
                  C21355 +
              (C10297 * C138 - C10299 * C125 + C47481 * C498 - C10300 * C479) *
                  C47110) *
                 C15919 +
             ((C25705 - C25706 + C25707 - C25708) * C21355 +
              (C25709 - C25710 + C25711 - C25712) * C47110) *
                 C47479) *
                C3234 +
            (((C10299 * C468 - C10297 * C478 + C10300 * C471 - C47481 * C484) *
                  C21355 +
              (C10299 * C479 - C10297 * C498 + C10300 * C485 - C47481 * C501) *
                  C47110) *
                 C15919 +
             ((C26321 - C26322 + C26323 - C26324) * C21355 +
              (C26325 - C26326 + C26327 - C26328) * C47110) *
                 C47479) *
                C47268) *
               C47222 +
           ((((C25706 - C25705 + C25708 - C25707) * C21355 +
              (C25710 - C25709 + C25712 - C25711) * C47110) *
                 C15919 +
             ((C25713 - C25714 + C25715 - C25716) * C21355 +
              (C25717 - C25718 + C25719 - C25720) * C47110) *
                 C47479) *
                C3234 +
            (((C26322 - C26321 + C26324 - C26323) * C21355 +
              (C26326 - C26325 + C26328 - C26327) * C47110) *
                 C15919 +
             ((C26727 - C26728 + C26729 - C26730) * C21355 +
              (C26731 - C26732 + C26733 - C26734) * C47110) *
                 C47479) *
                C47268) *
               C47229 +
           ((((C25714 - C25713 + C25716 - C25715) * C21355 +
              (C25718 - C25717 + C25720 - C25719) * C47110) *
                 C15919 +
             ((C26557 - C26558 + C26559 - C26560) * C21355 +
              (C26561 - C26562 + C26563 - C26564) * C47110) *
                 C47479) *
                C3234 +
            (((C26728 - C26727 + C26730 - C26729) * C21355 +
              (C26732 - C26731 + C26734 - C26733) * C47110) *
                 C15919 +
             ((C27197 - C27198 + C27199 - C27200) * C21355 +
              (C27201 - C27202 + C27203 - C27204) * C47110) *
                 C47479) *
                C47268) *
               C2840) *
              C47415 +
          (((((C10303 - C10302 + C10305 - C10304) * C21355 +
              (C10307 - C10306 + C10309 - C10308) * C47110) *
                 C15919 +
             ((C10480 - C10481 + C10482 - C10483) * C21355 +
              (C10484 - C10485 + C10486 - C10487) * C47110) *
                 C47479) *
                C3234 +
            (((C10659 - C10658 + C10661 - C10660) * C21355 +
              (C10663 - C10662 + C10665 - C10664) * C47110) *
                 C15919 +
             ((C11160 - C11161 + C11162 - C11163) * C21355 +
              (C11164 - C11165 + C11166 - C11167) * C47110) *
                 C47479) *
                C47268) *
               C47222 +
           ((((C10481 - C10480 + C10483 - C10482) * C21355 +
              (C10485 - C10484 + C10487 - C10486) * C47110) *
                 C15919 +
             ((C10488 - C10489 + C10490 - C10491) * C21355 +
              (C10492 - C10493 + C10494 - C10495) * C47110) *
                 C47479) *
                C3234 +
            (((C11161 - C11160 + C11163 - C11162) * C21355 +
              (C11165 - C11164 + C11167 - C11166) * C47110) *
                 C15919 +
             ((C11882 - C11883 + C11884 - C11885) * C21355 +
              (C11886 - C11887 + C11888 - C11889) * C47110) *
                 C47479) *
                C47268) *
               C47229 +
           ((((C10489 - C10488 + C10491 - C10490) * C21355 +
              (C10493 - C10492 + C10495 - C10494) * C47110) *
                 C15919 +
             ((C11680 - C11681 + C11682 - C11683) * C21355 +
              (C11684 - C11685 + C11686 - C11687) * C47110) *
                 C47479) *
                C3234 +
            (((C11883 - C11882 + C11885 - C11884) * C21355 +
              (C11887 - C11886 + C11889 - C11888) * C47110) *
                 C15919 +
             ((C10297 * C1671 - C10299 * C1667 + C47481 * C5897 -
               C10300 * C5894) *
                  C21355 +
              (C10297 * C1676 - C10299 * C1672 + C47481 * C5900 -
               C10300 * C5898) *
                  C47110) *
                 C47479) *
                C47268) *
               C2840) *
              C47146)) /
        (p * q * std::sqrt(p + q));
    d2ee[131] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C10297 * C124 - C10299 * C117 + C47481 * C478 - C10300 * C468) *
                 C21355 +
             (C10297 * C138 - C10299 * C125 + C47481 * C498 - C10300 * C479) *
                 C47110) *
                C15919 +
            ((C25705 - C25706 + C25707 - C25708) * C21355 +
             (C25709 - C25710 + C25711 - C25712) * C47110) *
                C47479) *
               C47264 +
           (((C10299 * C468 - C10297 * C478 + C10300 * C471 - C47481 * C484) *
                 C21355 +
             (C10299 * C479 - C10297 * C498 + C10300 * C485 - C47481 * C501) *
                 C47110) *
                C15919 +
            ((C26321 - C26322 + C26323 - C26324) * C21355 +
             (C26325 - C26326 + C26327 - C26328) * C47110) *
                C47479) *
               C47271 +
           (((C10297 * C484 - C10299 * C471 + C47481 * C1974 - C10300 * C1968) *
                 C21355 +
             (C10297 * C501 - C10299 * C485 + C47481 * C1986 - C10300 * C1975) *
                 C47110) *
                C15919 +
            ((C26719 - C26720 + C26721 - C26722) * C21355 +
             (C26723 - C26724 + C26725 - C26726) * C47110) *
                C47479) *
               C3742) *
              C47222 +
          ((((C25706 - C25705 + C25708 - C25707) * C21355 +
             (C25710 - C25709 + C25712 - C25711) * C47110) *
                C15919 +
            ((C25713 - C25714 + C25715 - C25716) * C21355 +
             (C25717 - C25718 + C25719 - C25720) * C47110) *
                C47479) *
               C47264 +
           (((C26322 - C26321 + C26324 - C26323) * C21355 +
             (C26326 - C26325 + C26328 - C26327) * C47110) *
                C15919 +
            ((C26727 - C26728 + C26729 - C26730) * C21355 +
             (C26731 - C26732 + C26733 - C26734) * C47110) *
                C47479) *
               C47271 +
           (((C26720 - C26719 + C26722 - C26721) * C21355 +
             (C26724 - C26723 + C26726 - C26725) * C47110) *
                C15919 +
            ((C26735 - C26736 + C26737 - C26738) * C21355 +
             (C26739 - C26740 + C26741 - C26742) * C47110) *
                C47479) *
               C3742) *
              C47229 +
          ((((C25714 - C25713 + C25716 - C25715) * C21355 +
             (C25718 - C25717 + C25720 - C25719) * C47110) *
                C15919 +
            ((C26557 - C26558 + C26559 - C26560) * C21355 +
             (C26561 - C26562 + C26563 - C26564) * C47110) *
                C47479) *
               C47264 +
           (((C26728 - C26727 + C26730 - C26729) * C21355 +
             (C26732 - C26731 + C26734 - C26733) * C47110) *
                C15919 +
            ((C27197 - C27198 + C27199 - C27200) * C21355 +
             (C27201 - C27202 + C27203 - C27204) * C47110) *
                C47479) *
               C47271 +
           (((C26736 - C26735 + C26738 - C26737) * C21355 +
             (C26740 - C26739 + C26742 - C26741) * C47110) *
                C15919 +
            ((C10297 * C5895 - C10299 * C5893 + C47481 * C23237 -
              C10300 * C23236) *
                 C21355 +
             (C10297 * C5899 - C10299 * C5896 + C47481 * C23239 -
              C10300 * C23238) *
                 C47110) *
                C47479) *
               C3742) *
              C2840) *
         C47135) /
        (p * q * std::sqrt(p + q));
    d2ee[132] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C10297 * C124 - C10299 * C117 + C47481 * C478 - C10300 * C468) *
                 C21355 +
             (C10297 * C138 - C10299 * C125 + C47481 * C498 - C10300 * C479) *
                 C47110) *
                C15919 +
            ((C25705 - C25706 + C25707 - C25708) * C21355 +
             (C25709 - C25710 + C25711 - C25712) * C47110) *
                C47479) *
               C3234 +
           (((C10299 * C468 - C10297 * C478 + C10300 * C471 - C47481 * C484) *
                 C21355 +
             (C10299 * C479 - C10297 * C498 + C10300 * C485 - C47481 * C501) *
                 C47110) *
                C15919 +
            ((C26321 - C26322 + C26323 - C26324) * C21355 +
             (C26325 - C26326 + C26327 - C26328) * C47110) *
                C47479) *
               C47268) *
              C47507 +
          ((((C25706 - C25705 + C25708 - C25707) * C21355 +
             (C25710 - C25709 + C25712 - C25711) * C47110) *
                C15919 +
            ((C25713 - C25714 + C25715 - C25716) * C21355 +
             (C25717 - C25718 + C25719 - C25720) * C47110) *
                C47479) *
               C3234 +
           (((C26322 - C26321 + C26324 - C26323) * C21355 +
             (C26326 - C26325 + C26328 - C26327) * C47110) *
                C15919 +
            ((C26727 - C26728 + C26729 - C26730) * C21355 +
             (C26731 - C26732 + C26733 - C26734) * C47110) *
                C47479) *
               C47268) *
              C47503 +
          ((((C25714 - C25713 + C25716 - C25715) * C21355 +
             (C25718 - C25717 + C25720 - C25719) * C47110) *
                C15919 +
            ((C26557 - C26558 + C26559 - C26560) * C21355 +
             (C26561 - C26562 + C26563 - C26564) * C47110) *
                C47479) *
               C3234 +
           (((C26728 - C26727 + C26730 - C26729) * C21355 +
             (C26732 - C26731 + C26734 - C26733) * C47110) *
                C15919 +
            ((C27197 - C27198 + C27199 - C27200) * C21355 +
             (C27201 - C27202 + C27203 - C27204) * C47110) *
                C47479) *
               C47268) *
              C47493 +
          ((((C26558 - C26557 + C26560 - C26559) * C21355 +
             (C26562 - C26561 + C26564 - C26563) * C47110) *
                C15919 +
            ((C26565 - C26566 + C26567 - C26568) * C21355 +
             (C26569 - C26570 + C26571 - C26572) * C47110) *
                C47479) *
               C3234 +
           (((C27198 - C27197 + C27200 - C27199) * C21355 +
             (C27202 - C27201 + C27204 - C27203) * C47110) *
                C15919 +
            ((C10297 * C6385 - C10299 * C6383 + C47481 * C22230 -
              C10300 * C22229) *
                 C21355 +
             (C10297 * C6389 - C10299 * C6386 + C47481 * C22232 -
              C10300 * C22231) *
                 C47110) *
                C47479) *
               C47268) *
              C47471) *
         C47135) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C10297 * C124 - C10299 * C117 + C47481 * C478 - C10300 * C468) *
                  C21355 +
              (C10297 * C138 - C10299 * C125 + C47481 * C498 - C10300 * C479) *
                  C47110) *
                 C15919 +
             ((C25705 - C25706 + C25707 - C25708) * C21355 +
              (C25709 - C25710 + C25711 - C25712) * C47110) *
                 C47479) *
                C3234 +
            (((C10299 * C468 - C10297 * C478 + C10300 * C471 - C47481 * C484) *
                  C21355 +
              (C10299 * C479 - C10297 * C498 + C10300 * C485 - C47481 * C501) *
                  C47110) *
                 C15919 +
             ((C26321 - C26322 + C26323 - C26324) * C21355 +
              (C26325 - C26326 + C26327 - C26328) * C47110) *
                 C47479) *
                C47268) *
               C2472 +
           ((((C25706 - C25705 + C25708 - C25707) * C21355 +
              (C25710 - C25709 + C25712 - C25711) * C47110) *
                 C15919 +
             ((C25713 - C25714 + C25715 - C25716) * C21355 +
              (C25717 - C25718 + C25719 - C25720) * C47110) *
                 C47479) *
                C3234 +
            (((C26322 - C26321 + C26324 - C26323) * C21355 +
              (C26326 - C26325 + C26328 - C26327) * C47110) *
                 C15919 +
             ((C26727 - C26728 + C26729 - C26730) * C21355 +
              (C26731 - C26732 + C26733 - C26734) * C47110) *
                 C47479) *
                C47268) *
               C47226) *
              C47497 +
          (((((C10303 - C10302 + C10305 - C10304) * C21355 +
              (C10307 - C10306 + C10309 - C10308) * C47110) *
                 C15919 +
             ((C10480 - C10481 + C10482 - C10483) * C21355 +
              (C10484 - C10485 + C10486 - C10487) * C47110) *
                 C47479) *
                C3234 +
            (((C10659 - C10658 + C10661 - C10660) * C21355 +
              (C10663 - C10662 + C10665 - C10664) * C47110) *
                 C15919 +
             ((C11160 - C11161 + C11162 - C11163) * C21355 +
              (C11164 - C11165 + C11166 - C11167) * C47110) *
                 C47479) *
                C47268) *
               C2472 +
           ((((C10481 - C10480 + C10483 - C10482) * C21355 +
              (C10485 - C10484 + C10487 - C10486) * C47110) *
                 C15919 +
             ((C10488 - C10489 + C10490 - C10491) * C21355 +
              (C10492 - C10493 + C10494 - C10495) * C47110) *
                 C47479) *
                C3234 +
            (((C11161 - C11160 + C11163 - C11162) * C21355 +
              (C11165 - C11164 + C11167 - C11166) * C47110) *
                 C15919 +
             ((C11882 - C11883 + C11884 - C11885) * C21355 +
              (C11886 - C11887 + C11888 - C11889) * C47110) *
                 C47479) *
                C47268) *
               C47226) *
              C47484 +
          (((((C10311 - C10310 + C10313 - C10312) * C21355 +
              (C10315 - C10314 + C10317 - C10316) * C47110) *
                 C15919 +
             ((C10496 - C10497 + C10498 - C10499) * C21355 +
              (C10500 - C10501 + C10502 - C10503) * C47110) *
                 C47479) *
                C3234 +
            (((C10675 - C10674 + C10677 - C10676) * C21355 +
              (C10679 - C10678 + C10681 - C10680) * C47110) *
                 C15919 +
             ((C11168 - C11169 + C11170 - C11171) * C21355 +
              (C11172 - C11173 + C11174 - C11175) * C47110) *
                 C47479) *
                C47268) *
               C2472 +
           ((((C10497 - C10496 + C10499 - C10498) * C21355 +
              (C10501 - C10500 + C10503 - C10502) * C47110) *
                 C15919 +
             ((C10504 - C10505 + C10506 - C10507) * C21355 +
              (C10508 - C10509 + C10510 - C10511) * C47110) *
                 C47479) *
                C3234 +
            (((C11169 - C11168 + C11171 - C11170) * C21355 +
              (C11173 - C11172 + C11175 - C11174) * C47110) *
                 C15919 +
             ((C10297 * C1277 - C10299 * C1263 + C47481 * C1283 -
               C10300 * C1266) *
                  C21355 +
              (C10297 * C1290 - C10299 * C1278 + C47481 * C1293 -
               C10300 * C1284) *
                  C47110) *
                 C47479) *
                C47268) *
               C47226) *
              C47455)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C10297 * C124 - C10299 * C117 + C47481 * C478 - C10300 * C468) *
                 C21355 +
             (C10297 * C138 - C10299 * C125 + C47481 * C498 - C10300 * C479) *
                 C47110) *
                C15919 +
            ((C25705 - C25706 + C25707 - C25708) * C21355 +
             (C25709 - C25710 + C25711 - C25712) * C47110) *
                C47479) *
               C47508 +
           (((C10299 * C468 - C10297 * C478 + C10300 * C471 - C47481 * C484) *
                 C21355 +
             (C10299 * C479 - C10297 * C498 + C10300 * C485 - C47481 * C501) *
                 C47110) *
                C15919 +
            ((C26321 - C26322 + C26323 - C26324) * C21355 +
             (C26325 - C26326 + C26327 - C26328) * C47110) *
                C47479) *
               C47505 +
           (((C10297 * C484 - C10299 * C471 + C47481 * C1974 - C10300 * C1968) *
                 C21355 +
             (C10297 * C501 - C10299 * C485 + C47481 * C1986 - C10300 * C1975) *
                 C47110) *
                C15919 +
            ((C26719 - C26720 + C26721 - C26722) * C21355 +
             (C26723 - C26724 + C26725 - C26726) * C47110) *
                C47479) *
               C47496 +
           (((C10299 * C1968 - C10297 * C1974 + C10300 * C1971 -
              C47481 * C1980) *
                 C21355 +
             (C10299 * C1975 - C10297 * C1986 + C10300 * C1981 -
              C47481 * C1989) *
                 C47110) *
                C15919 +
            ((C28037 - C28038 + C28039 - C28040) * C21355 +
             (C28041 - C28042 + C28043 - C28044) * C47110) *
                C47479) *
               C47477) *
              C2472 +
          ((((C25706 - C25705 + C25708 - C25707) * C21355 +
             (C25710 - C25709 + C25712 - C25711) * C47110) *
                C15919 +
            ((C25713 - C25714 + C25715 - C25716) * C21355 +
             (C25717 - C25718 + C25719 - C25720) * C47110) *
                C47479) *
               C47508 +
           (((C26322 - C26321 + C26324 - C26323) * C21355 +
             (C26326 - C26325 + C26328 - C26327) * C47110) *
                C15919 +
            ((C26727 - C26728 + C26729 - C26730) * C21355 +
             (C26731 - C26732 + C26733 - C26734) * C47110) *
                C47479) *
               C47505 +
           (((C26720 - C26719 + C26722 - C26721) * C21355 +
             (C26724 - C26723 + C26726 - C26725) * C47110) *
                C15919 +
            ((C26735 - C26736 + C26737 - C26738) * C21355 +
             (C26739 - C26740 + C26741 - C26742) * C47110) *
                C47479) *
               C47496 +
           (((C28038 - C28037 + C28040 - C28039) * C21355 +
             (C28042 - C28041 + C28044 - C28043) * C47110) *
                C15919 +
            ((C10297 * C7241 - C10299 * C7239 + C47481 * C22891 -
              C10300 * C22890) *
                 C21355 +
             (C10297 * C7245 - C10299 * C7242 + C47481 * C22893 -
              C10300 * C22892) *
                 C47110) *
                C47479) *
               C47477) *
              C47226) *
         C47135) /
            (p * q * std::sqrt(p + q));
    d2ee[133] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C10297 * C124 - C10299 * C117 + C47481 * C478 - C10300 * C468) *
                  C21355 +
              (C10297 * C138 - C10299 * C125 + C47481 * C498 - C10300 * C479) *
                  C47110) *
                 C15919 +
             ((C25705 - C25706 + C25707 - C25708) * C21355 +
              (C25709 - C25710 + C25711 - C25712) * C47110) *
                 C47479) *
                C47264 +
            (((C10299 * C468 - C10297 * C478 + C10300 * C471 - C47481 * C484) *
                  C21355 +
              (C10299 * C479 - C10297 * C498 + C10300 * C485 - C47481 * C501) *
                  C47110) *
                 C15919 +
             ((C26321 - C26322 + C26323 - C26324) * C21355 +
              (C26325 - C26326 + C26327 - C26328) * C47110) *
                 C47479) *
                C47271 +
            (((C10297 * C484 - C10299 * C471 + C47481 * C1974 -
               C10300 * C1968) *
                  C21355 +
              (C10297 * C501 - C10299 * C485 + C47481 * C1986 -
               C10300 * C1975) *
                  C47110) *
                 C15919 +
             ((C26719 - C26720 + C26721 - C26722) * C21355 +
              (C26723 - C26724 + C26725 - C26726) * C47110) *
                 C47479) *
                C3742) *
               C2472 +
           ((((C25706 - C25705 + C25708 - C25707) * C21355 +
              (C25710 - C25709 + C25712 - C25711) * C47110) *
                 C15919 +
             ((C25713 - C25714 + C25715 - C25716) * C21355 +
              (C25717 - C25718 + C25719 - C25720) * C47110) *
                 C47479) *
                C47264 +
            (((C26322 - C26321 + C26324 - C26323) * C21355 +
              (C26326 - C26325 + C26328 - C26327) * C47110) *
                 C15919 +
             ((C26727 - C26728 + C26729 - C26730) * C21355 +
              (C26731 - C26732 + C26733 - C26734) * C47110) *
                 C47479) *
                C47271 +
            (((C26720 - C26719 + C26722 - C26721) * C21355 +
              (C26724 - C26723 + C26726 - C26725) * C47110) *
                 C15919 +
             ((C26735 - C26736 + C26737 - C26738) * C21355 +
              (C26739 - C26740 + C26741 - C26742) * C47110) *
                 C47479) *
                C3742) *
               C47226) *
              C47415 +
          (((((C10303 - C10302 + C10305 - C10304) * C21355 +
              (C10307 - C10306 + C10309 - C10308) * C47110) *
                 C15919 +
             ((C10480 - C10481 + C10482 - C10483) * C21355 +
              (C10484 - C10485 + C10486 - C10487) * C47110) *
                 C47479) *
                C47264 +
            (((C10659 - C10658 + C10661 - C10660) * C21355 +
              (C10663 - C10662 + C10665 - C10664) * C47110) *
                 C15919 +
             ((C11160 - C11161 + C11162 - C11163) * C21355 +
              (C11164 - C11165 + C11166 - C11167) * C47110) *
                 C47479) *
                C47271 +
            (((C10667 - C10666 + C10669 - C10668) * C21355 +
              (C10671 - C10670 + C10673 - C10672) * C47110) *
                 C15919 +
             ((C12596 - C12597 + C12598 - C12599) * C21355 +
              (C12600 - C12601 + C12602 - C12603) * C47110) *
                 C47479) *
                C3742) *
               C2472 +
           ((((C10481 - C10480 + C10483 - C10482) * C21355 +
              (C10485 - C10484 + C10487 - C10486) * C47110) *
                 C15919 +
             ((C10488 - C10489 + C10490 - C10491) * C21355 +
              (C10492 - C10493 + C10494 - C10495) * C47110) *
                 C47479) *
                C47264 +
            (((C11161 - C11160 + C11163 - C11162) * C21355 +
              (C11165 - C11164 + C11167 - C11166) * C47110) *
                 C15919 +
             ((C11882 - C11883 + C11884 - C11885) * C21355 +
              (C11886 - C11887 + C11888 - C11889) * C47110) *
                 C47479) *
                C47271 +
            (((C12597 - C12596 + C12599 - C12598) * C21355 +
              (C12601 - C12600 + C12603 - C12602) * C47110) *
                 C15919 +
             ((C10297 * C1281 - C10299 * C1265 + C47481 * C7243 -
               C10300 * C7240) *
                  C21355 +
              (C10297 * C1292 - C10299 * C1282 + C47481 * C7246 -
               C10300 * C7244) *
                  C47110) *
                 C47479) *
                C3742) *
               C47226) *
              C47146)) /
        (p * q * std::sqrt(p + q));
    d2ee[134] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C10297 * C124 - C10299 * C117 + C47481 * C478 - C10300 * C468) *
                  C21355 +
              (C10297 * C138 - C10299 * C125 + C47481 * C498 - C10300 * C479) *
                  C47110) *
                 C15919 +
             ((C25705 - C25706 + C25707 - C25708) * C21355 +
              (C25709 - C25710 + C25711 - C25712) * C47110) *
                 C47479) *
                C3234 +
            (((C10299 * C468 - C10297 * C478 + C10300 * C471 - C47481 * C484) *
                  C21355 +
              (C10299 * C479 - C10297 * C498 + C10300 * C485 - C47481 * C501) *
                  C47110) *
                 C15919 +
             ((C26321 - C26322 + C26323 - C26324) * C21355 +
              (C26325 - C26326 + C26327 - C26328) * C47110) *
                 C47479) *
                C47268) *
               C2472 +
           ((((C25706 - C25705 + C25708 - C25707) * C21355 +
              (C25710 - C25709 + C25712 - C25711) * C47110) *
                 C15919 +
             ((C25713 - C25714 + C25715 - C25716) * C21355 +
              (C25717 - C25718 + C25719 - C25720) * C47110) *
                 C47479) *
                C3234 +
            (((C26322 - C26321 + C26324 - C26323) * C21355 +
              (C26326 - C26325 + C26328 - C26327) * C47110) *
                 C15919 +
             ((C26727 - C26728 + C26729 - C26730) * C21355 +
              (C26731 - C26732 + C26733 - C26734) * C47110) *
                 C47479) *
                C47268) *
               C47226) *
              C47497 +
          (((((C10303 - C10302 + C10305 - C10304) * C21355 +
              (C10307 - C10306 + C10309 - C10308) * C47110) *
                 C15919 +
             ((C10480 - C10481 + C10482 - C10483) * C21355 +
              (C10484 - C10485 + C10486 - C10487) * C47110) *
                 C47479) *
                C3234 +
            (((C10659 - C10658 + C10661 - C10660) * C21355 +
              (C10663 - C10662 + C10665 - C10664) * C47110) *
                 C15919 +
             ((C11160 - C11161 + C11162 - C11163) * C21355 +
              (C11164 - C11165 + C11166 - C11167) * C47110) *
                 C47479) *
                C47268) *
               C2472 +
           ((((C10481 - C10480 + C10483 - C10482) * C21355 +
              (C10485 - C10484 + C10487 - C10486) * C47110) *
                 C15919 +
             ((C10488 - C10489 + C10490 - C10491) * C21355 +
              (C10492 - C10493 + C10494 - C10495) * C47110) *
                 C47479) *
                C3234 +
            (((C11161 - C11160 + C11163 - C11162) * C21355 +
              (C11165 - C11164 + C11167 - C11166) * C47110) *
                 C15919 +
             ((C11882 - C11883 + C11884 - C11885) * C21355 +
              (C11886 - C11887 + C11888 - C11889) * C47110) *
                 C47479) *
                C47268) *
               C47226) *
              C47484 +
          (((((C10311 - C10310 + C10313 - C10312) * C21355 +
              (C10315 - C10314 + C10317 - C10316) * C47110) *
                 C15919 +
             ((C10496 - C10497 + C10498 - C10499) * C21355 +
              (C10500 - C10501 + C10502 - C10503) * C47110) *
                 C47479) *
                C3234 +
            (((C10675 - C10674 + C10677 - C10676) * C21355 +
              (C10679 - C10678 + C10681 - C10680) * C47110) *
                 C15919 +
             ((C11168 - C11169 + C11170 - C11171) * C21355 +
              (C11172 - C11173 + C11174 - C11175) * C47110) *
                 C47479) *
                C47268) *
               C2472 +
           ((((C10497 - C10496 + C10499 - C10498) * C21355 +
              (C10501 - C10500 + C10503 - C10502) * C47110) *
                 C15919 +
             ((C10504 - C10505 + C10506 - C10507) * C21355 +
              (C10508 - C10509 + C10510 - C10511) * C47110) *
                 C47479) *
                C3234 +
            (((C11169 - C11168 + C11171 - C11170) * C21355 +
              (C11173 - C11172 + C11175 - C11174) * C47110) *
                 C15919 +
             ((C10297 * C1277 - C10299 * C1263 + C47481 * C1283 -
               C10300 * C1266) *
                  C21355 +
              (C10297 * C1290 - C10299 * C1278 + C47481 * C1293 -
               C10300 * C1284) *
                  C47110) *
                 C47479) *
                C47268) *
               C47226) *
              C47455)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C10297 * C124 - C10299 * C117 + C47481 * C478 - C10300 * C468) *
                 C21355 +
             (C10297 * C138 - C10299 * C125 + C47481 * C498 - C10300 * C479) *
                 C47110) *
                C15919 +
            ((C25705 - C25706 + C25707 - C25708) * C21355 +
             (C25709 - C25710 + C25711 - C25712) * C47110) *
                C47479) *
               C3234 +
           (((C10299 * C468 - C10297 * C478 + C10300 * C471 - C47481 * C484) *
                 C21355 +
             (C10299 * C479 - C10297 * C498 + C10300 * C485 - C47481 * C501) *
                 C47110) *
                C15919 +
            ((C26321 - C26322 + C26323 - C26324) * C21355 +
             (C26325 - C26326 + C26327 - C26328) * C47110) *
                C47479) *
               C47268) *
              C47507 +
          ((((C25706 - C25705 + C25708 - C25707) * C21355 +
             (C25710 - C25709 + C25712 - C25711) * C47110) *
                C15919 +
            ((C25713 - C25714 + C25715 - C25716) * C21355 +
             (C25717 - C25718 + C25719 - C25720) * C47110) *
                C47479) *
               C3234 +
           (((C26322 - C26321 + C26324 - C26323) * C21355 +
             (C26326 - C26325 + C26328 - C26327) * C47110) *
                C15919 +
            ((C26727 - C26728 + C26729 - C26730) * C21355 +
             (C26731 - C26732 + C26733 - C26734) * C47110) *
                C47479) *
               C47268) *
              C47503 +
          ((((C25714 - C25713 + C25716 - C25715) * C21355 +
             (C25718 - C25717 + C25720 - C25719) * C47110) *
                C15919 +
            ((C26557 - C26558 + C26559 - C26560) * C21355 +
             (C26561 - C26562 + C26563 - C26564) * C47110) *
                C47479) *
               C3234 +
           (((C26728 - C26727 + C26730 - C26729) * C21355 +
             (C26732 - C26731 + C26734 - C26733) * C47110) *
                C15919 +
            ((C27197 - C27198 + C27199 - C27200) * C21355 +
             (C27201 - C27202 + C27203 - C27204) * C47110) *
                C47479) *
               C47268) *
              C47493 +
          ((((C26558 - C26557 + C26560 - C26559) * C21355 +
             (C26562 - C26561 + C26564 - C26563) * C47110) *
                C15919 +
            ((C26565 - C26566 + C26567 - C26568) * C21355 +
             (C26569 - C26570 + C26571 - C26572) * C47110) *
                C47479) *
               C3234 +
           (((C27198 - C27197 + C27200 - C27199) * C21355 +
             (C27202 - C27201 + C27204 - C27203) * C47110) *
                C15919 +
            ((C10297 * C6385 - C10299 * C6383 + C47481 * C22230 -
              C10300 * C22229) *
                 C21355 +
             (C10297 * C6389 - C10299 * C6386 + C47481 * C22232 -
              C10300 * C22231) *
                 C47110) *
                C47479) *
               C47268) *
              C47471) *
         C47135) /
            (p * q * std::sqrt(p + q));
    d2ee[135] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C10297 * C124 - C10299 * C117 + C47481 * C478 - C10300 * C468) *
                 C21355 +
             (C10297 * C138 - C10299 * C125 + C47481 * C498 - C10300 * C479) *
                 C47110) *
                C15919 +
            ((C25705 - C25706 + C25707 - C25708) * C21355 +
             (C25709 - C25710 + C25711 - C25712) * C47110) *
                C47479) *
               C47181 * C1392 +
           (((C25706 - C25705 + C25708 - C25707) * C21355 +
             (C25710 - C25709 + C25712 - C25711) * C47110) *
                C15919 +
            ((C25713 - C25714 + C25715 - C25716) * C21355 +
             (C25717 - C25718 + C25719 - C25720) * C47110) *
                C47479) *
               C47181 * C1393 +
           (((C25714 - C25713 + C25716 - C25715) * C21355 +
             (C25718 - C25717 + C25720 - C25719) * C47110) *
                C15919 +
            ((C26557 - C26558 + C26559 - C26560) * C21355 +
             (C26561 - C26562 + C26563 - C26564) * C47110) *
                C47479) *
               C47181 * C1394 +
           (((C26558 - C26557 + C26560 - C26559) * C21355 +
             (C26562 - C26561 + C26564 - C26563) * C47110) *
                C15919 +
            ((C26565 - C26566 + C26567 - C26568) * C21355 +
             (C26569 - C26570 + C26571 - C26572) * C47110) *
                C47479) *
               C47181 * C47471) *
              C47415 +
          ((((C10303 - C10302 + C10305 - C10304) * C21355 +
             (C10307 - C10306 + C10309 - C10308) * C47110) *
                C15919 +
            ((C10480 - C10481 + C10482 - C10483) * C21355 +
             (C10484 - C10485 + C10486 - C10487) * C47110) *
                C47479) *
               C47181 * C1392 +
           (((C10481 - C10480 + C10483 - C10482) * C21355 +
             (C10485 - C10484 + C10487 - C10486) * C47110) *
                C15919 +
            ((C10488 - C10489 + C10490 - C10491) * C21355 +
             (C10492 - C10493 + C10494 - C10495) * C47110) *
                C47479) *
               C47181 * C1393 +
           (((C10489 - C10488 + C10491 - C10490) * C21355 +
             (C10493 - C10492 + C10495 - C10494) * C47110) *
                C15919 +
            ((C11680 - C11681 + C11682 - C11683) * C21355 +
             (C11684 - C11685 + C11686 - C11687) * C47110) *
                C47479) *
               C47181 * C1394 +
           (((C11681 - C11680 + C11683 - C11682) * C21355 +
             (C11685 - C11684 + C11687 - C11686) * C47110) *
                C15919 +
            ((C10297 * C1138 - C10299 * C1128 + C47481 * C6387 -
              C10300 * C6384) *
                 C21355 +
             (C10297 * C1146 - C10299 * C1139 + C47481 * C6390 -
              C10300 * C6388) *
                 C47110) *
                C47479) *
               C47181 * C47471) *
              C47146)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C10297 * C124 - C10299 * C117 + C47481 * C478 - C10300 * C468) *
                 C21355 +
             (C10297 * C138 - C10299 * C125 + C47481 * C498 - C10300 * C479) *
                 C47110) *
                C15919 +
            ((C25705 - C25706 + C25707 - C25708) * C21355 +
             (C25709 - C25710 + C25711 - C25712) * C47110) *
                C47479) *
               C47181 * C47429 +
           (((C25706 - C25705 + C25708 - C25707) * C21355 +
             (C25710 - C25709 + C25712 - C25711) * C47110) *
                C15919 +
            ((C25713 - C25714 + C25715 - C25716) * C21355 +
             (C25717 - C25718 + C25719 - C25720) * C47110) *
                C47479) *
               C47181 * C47226) *
              C636 +
          ((((C10303 - C10302 + C10305 - C10304) * C21355 +
             (C10307 - C10306 + C10309 - C10308) * C47110) *
                C15919 +
            ((C10480 - C10481 + C10482 - C10483) * C21355 +
             (C10484 - C10485 + C10486 - C10487) * C47110) *
                C47479) *
               C47181 * C47429 +
           (((C10481 - C10480 + C10483 - C10482) * C21355 +
             (C10485 - C10484 + C10487 - C10486) * C47110) *
                C15919 +
            ((C10488 - C10489 + C10490 - C10491) * C21355 +
             (C10492 - C10493 + C10494 - C10495) * C47110) *
                C47479) *
               C47181 * C47226) *
              C637 +
          ((((C10311 - C10310 + C10313 - C10312) * C21355 +
             (C10315 - C10314 + C10317 - C10316) * C47110) *
                C15919 +
            ((C10496 - C10497 + C10498 - C10499) * C21355 +
             (C10500 - C10501 + C10502 - C10503) * C47110) *
                C47479) *
               C47181 * C47429 +
           (((C10497 - C10496 + C10499 - C10498) * C21355 +
             (C10501 - C10500 + C10503 - C10502) * C47110) *
                C15919 +
            ((C10504 - C10505 + C10506 - C10507) * C21355 +
             (C10508 - C10509 + C10510 - C10511) * C47110) *
                C47479) *
               C47181 * C47226) *
              C638 +
          ((((C10319 - C10318 + C10321 - C10320) * C21355 +
             (C10323 - C10322 + C10325 - C10324) * C47110) *
                C15919 +
            ((C10820 - C10821 + C10822 - C10823) * C21355 +
             (C10824 - C10825 + C10826 - C10827) * C47110) *
                C47479) *
               C47181 * C47429 +
           (((C10821 - C10820 + C10823 - C10822) * C21355 +
             (C10825 - C10824 + C10827 - C10826) * C47110) *
                C15919 +
            ((C10297 * C311 - C10299 * C294 + C47481 * C1557 - C10300 * C1556) *
                 C21355 +
             (C10297 * C324 - C10299 * C312 + C47481 * C1559 - C10300 * C1558) *
                 C47110) *
                C47479) *
               C47181 * C47226) *
              C47465)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C10297 * C124 - C10299 * C117 + C47481 * C478 - C10300 * C468) *
                  C21355 +
              (C10297 * C138 - C10299 * C125 + C47481 * C498 - C10300 * C479) *
                  C47110) *
                 C15919 +
             ((C25705 - C25706 + C25707 - C25708) * C21355 +
              (C25709 - C25710 + C25711 - C25712) * C47110) *
                 C47479) *
                C1788 +
            (((C10299 * C468 - C10297 * C478 + C10300 * C471 - C47481 * C484) *
                  C21355 +
              (C10299 * C479 - C10297 * C498 + C10300 * C485 - C47481 * C501) *
                  C47110) *
                 C15919 +
             ((C26321 - C26322 + C26323 - C26324) * C21355 +
              (C26325 - C26326 + C26327 - C26328) * C47110) *
                 C47479) *
                C1789 +
            (((C10297 * C484 - C10299 * C471 + C47481 * C1974 -
               C10300 * C1968) *
                  C21355 +
              (C10297 * C501 - C10299 * C485 + C47481 * C1986 -
               C10300 * C1975) *
                  C47110) *
                 C15919 +
             ((C26719 - C26720 + C26721 - C26722) * C21355 +
              (C26723 - C26724 + C26725 - C26726) * C47110) *
                 C47479) *
                C47464) *
               C47429 +
           ((((C25706 - C25705 + C25708 - C25707) * C21355 +
              (C25710 - C25709 + C25712 - C25711) * C47110) *
                 C15919 +
             ((C25713 - C25714 + C25715 - C25716) * C21355 +
              (C25717 - C25718 + C25719 - C25720) * C47110) *
                 C47479) *
                C1788 +
            (((C26322 - C26321 + C26324 - C26323) * C21355 +
              (C26326 - C26325 + C26328 - C26327) * C47110) *
                 C15919 +
             ((C26727 - C26728 + C26729 - C26730) * C21355 +
              (C26731 - C26732 + C26733 - C26734) * C47110) *
                 C47479) *
                C1789 +
            (((C26720 - C26719 + C26722 - C26721) * C21355 +
              (C26724 - C26723 + C26726 - C26725) * C47110) *
                 C15919 +
             ((C26735 - C26736 + C26737 - C26738) * C21355 +
              (C26739 - C26740 + C26741 - C26742) * C47110) *
                 C47479) *
                C47464) *
               C47226) *
              C47415 +
          (((((C10303 - C10302 + C10305 - C10304) * C21355 +
              (C10307 - C10306 + C10309 - C10308) * C47110) *
                 C15919 +
             ((C10480 - C10481 + C10482 - C10483) * C21355 +
              (C10484 - C10485 + C10486 - C10487) * C47110) *
                 C47479) *
                C1788 +
            (((C10659 - C10658 + C10661 - C10660) * C21355 +
              (C10663 - C10662 + C10665 - C10664) * C47110) *
                 C15919 +
             ((C11160 - C11161 + C11162 - C11163) * C21355 +
              (C11164 - C11165 + C11166 - C11167) * C47110) *
                 C47479) *
                C1789 +
            (((C10667 - C10666 + C10669 - C10668) * C21355 +
              (C10671 - C10670 + C10673 - C10672) * C47110) *
                 C15919 +
             ((C12596 - C12597 + C12598 - C12599) * C21355 +
              (C12600 - C12601 + C12602 - C12603) * C47110) *
                 C47479) *
                C47464) *
               C47429 +
           ((((C10481 - C10480 + C10483 - C10482) * C21355 +
              (C10485 - C10484 + C10487 - C10486) * C47110) *
                 C15919 +
             ((C10488 - C10489 + C10490 - C10491) * C21355 +
              (C10492 - C10493 + C10494 - C10495) * C47110) *
                 C47479) *
                C1788 +
            (((C11161 - C11160 + C11163 - C11162) * C21355 +
              (C11165 - C11164 + C11167 - C11166) * C47110) *
                 C15919 +
             ((C11882 - C11883 + C11884 - C11885) * C21355 +
              (C11886 - C11887 + C11888 - C11889) * C47110) *
                 C47479) *
                C1789 +
            (((C12597 - C12596 + C12599 - C12598) * C21355 +
              (C12601 - C12600 + C12603 - C12602) * C47110) *
                 C15919 +
             ((C10297 * C1281 - C10299 * C1265 + C47481 * C7243 -
               C10300 * C7240) *
                  C21355 +
              (C10297 * C1292 - C10299 * C1282 + C47481 * C7246 -
               C10300 * C7244) *
                  C47110) *
                 C47479) *
                C47464) *
               C47226) *
              C47146)) /
            (p * q * std::sqrt(p + q));
    d2ee[136] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C10297 * C124 - C10299 * C117 + C47481 * C478 - C10300 * C468) *
                 C21355 +
             (C10297 * C138 - C10299 * C125 + C47481 * C498 - C10300 * C479) *
                 C47110) *
                C15919 +
            ((C25705 - C25706 + C25707 - C25708) * C21355 +
             (C25709 - C25710 + C25711 - C25712) * C47110) *
                C47479) *
               C47430 +
           (((C10299 * C468 - C10297 * C478 + C10300 * C471 - C47481 * C484) *
                 C21355 +
             (C10299 * C479 - C10297 * C498 + C10300 * C485 - C47481 * C501) *
                 C47110) *
                C15919 +
            ((C26321 - C26322 + C26323 - C26324) * C21355 +
             (C26325 - C26326 + C26327 - C26328) * C47110) *
                C47479) *
               C47268) *
              C1392 +
          ((((C25706 - C25705 + C25708 - C25707) * C21355 +
             (C25710 - C25709 + C25712 - C25711) * C47110) *
                C15919 +
            ((C25713 - C25714 + C25715 - C25716) * C21355 +
             (C25717 - C25718 + C25719 - C25720) * C47110) *
                C47479) *
               C47430 +
           (((C26322 - C26321 + C26324 - C26323) * C21355 +
             (C26326 - C26325 + C26328 - C26327) * C47110) *
                C15919 +
            ((C26727 - C26728 + C26729 - C26730) * C21355 +
             (C26731 - C26732 + C26733 - C26734) * C47110) *
                C47479) *
               C47268) *
              C1393 +
          ((((C25714 - C25713 + C25716 - C25715) * C21355 +
             (C25718 - C25717 + C25720 - C25719) * C47110) *
                C15919 +
            ((C26557 - C26558 + C26559 - C26560) * C21355 +
             (C26561 - C26562 + C26563 - C26564) * C47110) *
                C47479) *
               C47430 +
           (((C26728 - C26727 + C26730 - C26729) * C21355 +
             (C26732 - C26731 + C26734 - C26733) * C47110) *
                C15919 +
            ((C27197 - C27198 + C27199 - C27200) * C21355 +
             (C27201 - C27202 + C27203 - C27204) * C47110) *
                C47479) *
               C47268) *
              C1394 +
          ((((C26558 - C26557 + C26560 - C26559) * C21355 +
             (C26562 - C26561 + C26564 - C26563) * C47110) *
                C15919 +
            ((C26565 - C26566 + C26567 - C26568) * C21355 +
             (C26569 - C26570 + C26571 - C26572) * C47110) *
                C47479) *
               C47430 +
           (((C27198 - C27197 + C27200 - C27199) * C21355 +
             (C27202 - C27201 + C27204 - C27203) * C47110) *
                C15919 +
            ((C10297 * C6385 - C10299 * C6383 + C47481 * C22230 -
              C10300 * C22229) *
                 C21355 +
             (C10297 * C6389 - C10299 * C6386 + C47481 * C22232 -
              C10300 * C22231) *
                 C47110) *
                C47479) *
               C47268) *
              C47471) *
         C47135) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C10297 * C124 - C10299 * C117 + C47481 * C478 - C10300 * C468) *
                  C21355 +
              (C10297 * C138 - C10299 * C125 + C47481 * C498 - C10300 * C479) *
                  C47110) *
                 C15919 +
             ((C25705 - C25706 + C25707 - C25708) * C21355 +
              (C25709 - C25710 + C25711 - C25712) * C47110) *
                 C47479) *
                C47430 +
            (((C10299 * C468 - C10297 * C478 + C10300 * C471 - C47481 * C484) *
                  C21355 +
              (C10299 * C479 - C10297 * C498 + C10300 * C485 - C47481 * C501) *
                  C47110) *
                 C15919 +
             ((C26321 - C26322 + C26323 - C26324) * C21355 +
              (C26325 - C26326 + C26327 - C26328) * C47110) *
                 C47479) *
                C47268) *
               C47429 +
           ((((C25706 - C25705 + C25708 - C25707) * C21355 +
              (C25710 - C25709 + C25712 - C25711) * C47110) *
                 C15919 +
             ((C25713 - C25714 + C25715 - C25716) * C21355 +
              (C25717 - C25718 + C25719 - C25720) * C47110) *
                 C47479) *
                C47430 +
            (((C26322 - C26321 + C26324 - C26323) * C21355 +
              (C26326 - C26325 + C26328 - C26327) * C47110) *
                 C15919 +
             ((C10297 * C1273 - C10299 * C1261 + C47481 * C1279 -
               C10300 * C1264) *
                  C21355 +
              (C10297 * C1288 - C10299 * C1274 + C47481 * C1291 -
               C10300 * C1280) *
                  C47110) *
                 C47479) *
                C47268) *
               C47226) *
              C284 +
          (((((C10303 - C10302 + C10305 - C10304) * C21355 +
              (C10307 - C10306 + C10309 - C10308) * C47110) *
                 C15919 +
             ((C10480 - C10481 + C10482 - C10483) * C21355 +
              (C10484 - C10485 + C10486 - C10487) * C47110) *
                 C47479) *
                C47430 +
            (((C10659 - C10658 + C10661 - C10660) * C21355 +
              (C10663 - C10662 + C10665 - C10664) * C47110) *
                 C15919 +
             ((C11160 - C11161 + C11162 - C11163) * C21355 +
              (C11164 - C11165 + C11166 - C11167) * C47110) *
                 C47479) *
                C47268) *
               C47429 +
           ((((C10481 - C10480 + C10483 - C10482) * C21355 +
              (C10485 - C10484 + C10487 - C10486) * C47110) *
                 C15919 +
             ((C10488 - C10489 + C10490 - C10491) * C21355 +
              (C10492 - C10493 + C10494 - C10495) * C47110) *
                 C47479) *
                C47430 +
            (((C11161 - C11160 + C11163 - C11162) * C21355 +
              (C11165 - C11164 + C11167 - C11166) * C47110) *
                 C15919 +
             ((C11882 - C11883 + C11884 - C11885) * C21355 +
              (C11886 - C11887 + C11888 - C11889) * C47110) *
                 C47479) *
                C47268) *
               C47226) *
              C285 +
          (((((C10311 - C10310 + C10313 - C10312) * C21355 +
              (C10315 - C10314 + C10317 - C10316) * C47110) *
                 C15919 +
             ((C10496 - C10497 + C10498 - C10499) * C21355 +
              (C10500 - C10501 + C10502 - C10503) * C47110) *
                 C47479) *
                C47430 +
            (((C10675 - C10674 + C10677 - C10676) * C21355 +
              (C10679 - C10678 + C10681 - C10680) * C47110) *
                 C15919 +
             ((C11168 - C11169 + C11170 - C11171) * C21355 +
              (C11172 - C11173 + C11174 - C11175) * C47110) *
                 C47479) *
                C47268) *
               C47429 +
           ((((C10497 - C10496 + C10499 - C10498) * C21355 +
              (C10501 - C10500 + C10503 - C10502) * C47110) *
                 C15919 +
             ((C10504 - C10505 + C10506 - C10507) * C21355 +
              (C10508 - C10509 + C10510 - C10511) * C47110) *
                 C47479) *
                C47430 +
            (((C11169 - C11168 + C11171 - C11170) * C21355 +
              (C11173 - C11172 + C11175 - C11174) * C47110) *
                 C15919 +
             ((C10297 * C1277 - C10299 * C1263 + C47481 * C1283 -
               C10300 * C1266) *
                  C21355 +
              (C10297 * C1290 - C10299 * C1278 + C47481 * C1293 -
               C10300 * C1284) *
                  C47110) *
                 C47479) *
                C47268) *
               C47226) *
              C47455)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C10297 * C124 - C10299 * C117 + C47481 * C478 - C10300 * C468) *
                 C21355 +
             (C10297 * C138 - C10299 * C125 + C47481 * C498 - C10300 * C479) *
                 C47110) *
                C15919 +
            ((C25705 - C25706 + C25707 - C25708) * C21355 +
             (C25709 - C25710 + C25711 - C25712) * C47110) *
                C47479) *
               C2248 +
           (((C10299 * C468 - C10297 * C478 + C10300 * C471 - C47481 * C484) *
                 C21355 +
             (C10299 * C479 - C10297 * C498 + C10300 * C485 - C47481 * C501) *
                 C47110) *
                C15919 +
            ((C26321 - C26322 + C26323 - C26324) * C21355 +
             (C26325 - C26326 + C26327 - C26328) * C47110) *
                C47479) *
               C2249 +
           (((C10297 * C484 - C10299 * C471 + C47481 * C1974 - C10300 * C1968) *
                 C21355 +
             (C10297 * C501 - C10299 * C485 + C47481 * C1986 - C10300 * C1975) *
                 C47110) *
                C15919 +
            ((C26719 - C26720 + C26721 - C26722) * C21355 +
             (C26723 - C26724 + C26725 - C26726) * C47110) *
                C47479) *
               C2250 +
           (((C10299 * C1968 - C10297 * C1974 + C10300 * C1971 -
              C47481 * C1980) *
                 C21355 +
             (C10299 * C1975 - C10297 * C1986 + C10300 * C1981 -
              C47481 * C1989) *
                 C47110) *
                C15919 +
            ((C28037 - C28038 + C28039 - C28040) * C21355 +
             (C28041 - C28042 + C28043 - C28044) * C47110) *
                C47479) *
               C47477) *
              C47429 +
          ((((C25706 - C25705 + C25708 - C25707) * C21355 +
             (C25710 - C25709 + C25712 - C25711) * C47110) *
                C15919 +
            ((C25713 - C25714 + C25715 - C25716) * C21355 +
             (C25717 - C25718 + C25719 - C25720) * C47110) *
                C47479) *
               C2248 +
           (((C26322 - C26321 + C26324 - C26323) * C21355 +
             (C26326 - C26325 + C26328 - C26327) * C47110) *
                C15919 +
            ((C26727 - C26728 + C26729 - C26730) * C21355 +
             (C26731 - C26732 + C26733 - C26734) * C47110) *
                C47479) *
               C2249 +
           (((C26720 - C26719 + C26722 - C26721) * C21355 +
             (C26724 - C26723 + C26726 - C26725) * C47110) *
                C15919 +
            ((C26735 - C26736 + C26737 - C26738) * C21355 +
             (C26739 - C26740 + C26741 - C26742) * C47110) *
                C47479) *
               C2250 +
           (((C28038 - C28037 + C28040 - C28039) * C21355 +
             (C28042 - C28041 + C28044 - C28043) * C47110) *
                C15919 +
            ((C10297 * C7241 - C10299 * C7239 + C47481 * C22891 -
              C10300 * C22890) *
                 C21355 +
             (C10297 * C7245 - C10299 * C7242 + C47481 * C22893 -
              C10300 * C22892) *
                 C47110) *
                C47479) *
               C47477) *
              C47226) *
         C47135) /
            (p * q * std::sqrt(p + q));
    d2ee[137] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C10297 * C124 - C10299 * C117 + C47481 * C478 -
                 C10300 * C468) *
                    C21355 +
                (C10297 * C138 - C10299 * C125 + C47481 * C498 -
                 C10300 * C479) *
                    C47110) *
                   C15919 +
               ((C10297 * C297 - C10299 * C287 + C47481 * C911 -
                 C10300 * C906) *
                    C21355 +
                (C10297 * C317 - C10299 * C298 + C47481 * C921 -
                 C10300 * C912) *
                    C47110) *
                   C47479) *
                  C47181 * C47163 * C108 +
              (((C10303 - C10302 + C10305 - C10304) * C21355 +
                (C10307 - C10306 + C10309 - C10308) * C47110) *
                   C15919 +
               ((C10480 - C10481 + C10482 - C10483) * C21355 +
                (C10484 - C10485 + C10486 - C10487) * C47110) *
                   C47479) *
                  C47181 * C47163 * C109 +
              (((C10311 - C10310 + C10313 - C10312) * C21355 +
                (C10315 - C10314 + C10317 - C10316) * C47110) *
                   C15919 +
               ((C10496 - C10497 + C10498 - C10499) * C21355 +
                (C10500 - C10501 + C10502 - C10503) * C47110) *
                   C47479) *
                  C47181 * C47163 * C110 +
              (((C10319 - C10318 + C10321 - C10320) * C21355 +
                (C10323 - C10322 + C10325 - C10324) * C47110) *
                   C15919 +
               ((C10820 - C10821 + C10822 - C10823) * C21355 +
                (C10824 - C10825 + C10826 - C10827) * C47110) *
                   C47479) *
                  C47181 * C47163 * C111 +
              (((C10327 - C10326 + C10329 - C10328) * C21355 +
                (C10331 - C10330 + C10333 - C10332) * C47110) *
                   C15919 +
               ((C10297 * C313 - C10299 * C295 + C47481 * C919 -
                 C10300 * C910) *
                    C21355 +
                (C10297 * C325 - C10299 * C314 + C47481 * C925 -
                 C10300 * C920) *
                    C47110) *
                   C47479) *
                  C47181 * C47163 * C112) +
         0.5 * std::pow(Pi, 2.5) *
             (((((C10297 * C124 - C10299 * C117 + C47481 * C478 -
                  C10300 * C468) *
                     C21355 +
                 (C10297 * C138 - C10299 * C125 + C47481 * C498 -
                  C10300 * C479) *
                     C47110) *
                    C15919 +
                ((C25705 - C25706 + C25707 - C25708) * C21355 +
                 (C25709 - C25710 + C25711 - C25712) * C47110) *
                    C47479) *
                   C47181 * C47500 +
               (((C25706 - C25705 + C25708 - C25707) * C21355 +
                 (C25710 - C25709 + C25712 - C25711) * C47110) *
                    C15919 +
                ((C25713 - C25714 + C25715 - C25716) * C21355 +
                 (C25717 - C25718 + C25719 - C25720) * C47110) *
                    C47479) *
                   C47181 * C47488 +
               (((C25714 - C25713 + C25716 - C25715) * C21355 +
                 (C25718 - C25717 + C25720 - C25719) * C47110) *
                    C15919 +
                ((C10297 * C1130 - C10299 * C1124 + C47481 * C1669 -
                  C10300 * C1666) *
                     C21355 +
                 (C10297 * C1142 - C10299 * C1131 + C47481 * C1675 -
                  C10300 * C1670) *
                     C47110) *
                    C47479) *
                   C47181 * C47461) *
                  C284 +
              ((((C10303 - C10302 + C10305 - C10304) * C21355 +
                 (C10307 - C10306 + C10309 - C10308) * C47110) *
                    C15919 +
                ((C10480 - C10481 + C10482 - C10483) * C21355 +
                 (C10484 - C10485 + C10486 - C10487) * C47110) *
                    C47479) *
                   C47181 * C47500 +
               (((C10481 - C10480 + C10483 - C10482) * C21355 +
                 (C10485 - C10484 + C10487 - C10486) * C47110) *
                    C15919 +
                ((C10488 - C10489 + C10490 - C10491) * C21355 +
                 (C10492 - C10493 + C10494 - C10495) * C47110) *
                    C47479) *
                   C47181 * C47488 +
               (((C10489 - C10488 + C10491 - C10490) * C21355 +
                 (C10493 - C10492 + C10495 - C10494) * C47110) *
                    C15919 +
                ((C11680 - C11681 + C11682 - C11683) * C21355 +
                 (C11684 - C11685 + C11686 - C11687) * C47110) *
                    C47479) *
                   C47181 * C47461) *
                  C285 +
              ((((C10311 - C10310 + C10313 - C10312) * C21355 +
                 (C10315 - C10314 + C10317 - C10316) * C47110) *
                    C15919 +
                ((C10496 - C10497 + C10498 - C10499) * C21355 +
                 (C10500 - C10501 + C10502 - C10503) * C47110) *
                    C47479) *
                   C47181 * C47500 +
               (((C10497 - C10496 + C10499 - C10498) * C21355 +
                 (C10501 - C10500 + C10503 - C10502) * C47110) *
                    C15919 +
                ((C10504 - C10505 + C10506 - C10507) * C21355 +
                 (C10508 - C10509 + C10510 - C10511) * C47110) *
                    C47479) *
                   C47181 * C47488 +
               (((C10505 - C10504 + C10507 - C10506) * C21355 +
                 (C10509 - C10508 + C10511 - C10510) * C47110) *
                    C15919 +
                ((C10297 * C1134 - C10299 * C1126 + C47481 * C1673 -
                  C10300 * C1668) *
                     C21355 +
                 (C10297 * C1144 - C10299 * C1135 + C47481 * C1677 -
                  C10300 * C1674) *
                     C47110) *
                    C47479) *
                   C47181 * C47461) *
                  C47455)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C10297 * C124 - C10299 * C117 + C47481 * C478 - C10300 * C468) *
                 C21355 +
             (C10297 * C138 - C10299 * C125 + C47481 * C498 - C10300 * C479) *
                 C47110) *
                C15919 +
            ((C25705 - C25706 + C25707 - C25708) * C21355 +
             (C25709 - C25710 + C25711 - C25712) * C47110) *
                C47479) *
               C47501 +
           (((C10299 * C468 - C10297 * C478 + C10300 * C471 - C47481 * C484) *
                 C21355 +
             (C10299 * C479 - C10297 * C498 + C10300 * C485 - C47481 * C501) *
                 C47110) *
                C15919 +
            ((C10299 * C906 - C10297 * C911 + C10300 * C1258 - C47481 * C1267) *
                 C21355 +
             (C10299 * C912 - C10297 * C921 + C10300 * C1268 - C47481 * C1285) *
                 C47110) *
                C47479) *
               C47490 +
           (((C10297 * C484 - C10299 * C471 + C47481 * C1974 - C10300 * C1968) *
                 C21355 +
             (C10297 * C501 - C10299 * C485 + C47481 * C1986 - C10300 * C1975) *
                 C47110) *
                C15919 +
            ((C10297 * C1267 - C10299 * C1258 + C47481 * C2365 -
              C10300 * C2362) *
                 C21355 +
             (C10297 * C1285 - C10299 * C1268 + C47481 * C2371 -
              C10300 * C2366) *
                 C47110) *
                C47479) *
               C47464) *
              C47163 * C284 +
          ((((C10303 - C10302 + C10305 - C10304) * C21355 +
             (C10307 - C10306 + C10309 - C10308) * C47110) *
                C15919 +
            ((C10480 - C10481 + C10482 - C10483) * C21355 +
             (C10484 - C10485 + C10486 - C10487) * C47110) *
                C47479) *
               C47501 +
           (((C10659 - C10658 + C10661 - C10660) * C21355 +
             (C10663 - C10662 + C10665 - C10664) * C47110) *
                C15919 +
            ((C11160 - C11161 + C11162 - C11163) * C21355 +
             (C11164 - C11165 + C11166 - C11167) * C47110) *
                C47479) *
               C47490 +
           (((C10667 - C10666 + C10669 - C10668) * C21355 +
             (C10671 - C10670 + C10673 - C10672) * C47110) *
                C15919 +
            ((C12596 - C12597 + C12598 - C12599) * C21355 +
             (C12600 - C12601 + C12602 - C12603) * C47110) *
                C47479) *
               C47464) *
              C47163 * C285 +
          ((((C10311 - C10310 + C10313 - C10312) * C21355 +
             (C10315 - C10314 + C10317 - C10316) * C47110) *
                C15919 +
            ((C10496 - C10497 + C10498 - C10499) * C21355 +
             (C10500 - C10501 + C10502 - C10503) * C47110) *
                C47479) *
               C47501 +
           (((C10675 - C10674 + C10677 - C10676) * C21355 +
             (C10679 - C10678 + C10681 - C10680) * C47110) *
                C15919 +
            ((C11168 - C11169 + C11170 - C11171) * C21355 +
             (C11172 - C11173 + C11174 - C11175) * C47110) *
                C47479) *
               C47490 +
           (((C10683 - C10682 + C10685 - C10684) * C21355 +
             (C10687 - C10686 + C10689 - C10688) * C47110) *
                C15919 +
            ((C10297 * C1271 - C10299 * C1260 + C47481 * C2369 -
              C10300 * C2364) *
                 C21355 +
             (C10297 * C1287 - C10299 * C1272 + C47481 * C2373 -
              C10300 * C2370) *
                 C47110) *
                C47479) *
               C47464) *
              C47163 * C47455)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C10297 * C124 - C10299 * C117 + C47481 * C478 - C10300 * C468) *
                 C21355 +
             (C10297 * C138 - C10299 * C125 + C47481 * C498 - C10300 * C479) *
                 C47110) *
                C15919 +
            ((C25705 - C25706 + C25707 - C25708) * C21355 +
             (C25709 - C25710 + C25711 - C25712) * C47110) *
                C47479) *
               C47181 * C1050 +
           (((C25706 - C25705 + C25708 - C25707) * C21355 +
             (C25710 - C25709 + C25712 - C25711) * C47110) *
                C15919 +
            ((C25713 - C25714 + C25715 - C25716) * C21355 +
             (C25717 - C25718 + C25719 - C25720) * C47110) *
                C47479) *
               C47181 * C1051 +
           (((C25714 - C25713 + C25716 - C25715) * C21355 +
             (C25718 - C25717 + C25720 - C25719) * C47110) *
                C15919 +
            ((C10297 * C1130 - C10299 * C1124 + C47481 * C1669 -
              C10300 * C1666) *
                 C21355 +
             (C10297 * C1142 - C10299 * C1131 + C47481 * C1675 -
              C10300 * C1670) *
                 C47110) *
                C47479) *
               C47181 * C47461) *
              C47497 +
          ((((C10303 - C10302 + C10305 - C10304) * C21355 +
             (C10307 - C10306 + C10309 - C10308) * C47110) *
                C15919 +
            ((C10480 - C10481 + C10482 - C10483) * C21355 +
             (C10484 - C10485 + C10486 - C10487) * C47110) *
                C47479) *
               C47181 * C1050 +
           (((C10481 - C10480 + C10483 - C10482) * C21355 +
             (C10485 - C10484 + C10487 - C10486) * C47110) *
                C15919 +
            ((C10488 - C10489 + C10490 - C10491) * C21355 +
             (C10492 - C10493 + C10494 - C10495) * C47110) *
                C47479) *
               C47181 * C1051 +
           (((C10489 - C10488 + C10491 - C10490) * C21355 +
             (C10493 - C10492 + C10495 - C10494) * C47110) *
                C15919 +
            ((C11680 - C11681 + C11682 - C11683) * C21355 +
             (C11684 - C11685 + C11686 - C11687) * C47110) *
                C47479) *
               C47181 * C47461) *
              C47484 +
          ((((C10311 - C10310 + C10313 - C10312) * C21355 +
             (C10315 - C10314 + C10317 - C10316) * C47110) *
                C15919 +
            ((C10496 - C10497 + C10498 - C10499) * C21355 +
             (C10500 - C10501 + C10502 - C10503) * C47110) *
                C47479) *
               C47181 * C1050 +
           (((C10497 - C10496 + C10499 - C10498) * C21355 +
             (C10501 - C10500 + C10503 - C10502) * C47110) *
                C15919 +
            ((C10504 - C10505 + C10506 - C10507) * C21355 +
             (C10508 - C10509 + C10510 - C10511) * C47110) *
                C47479) *
               C47181 * C1051 +
           (((C10505 - C10504 + C10507 - C10506) * C21355 +
             (C10509 - C10508 + C10511 - C10510) * C47110) *
                C15919 +
            ((C10297 * C1134 - C10299 * C1126 + C47481 * C1673 -
              C10300 * C1668) *
                 C21355 +
             (C10297 * C1144 - C10299 * C1135 + C47481 * C1677 -
              C10300 * C1674) *
                 C47110) *
                C47479) *
               C47181 * C47461) *
              C47455)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C10297 * C124 - C10299 * C117 + C47481 * C478 - C10300 * C468) *
                C21355 +
            (C10297 * C138 - C10299 * C125 + C47481 * C498 - C10300 * C479) *
                C47110) *
               C15919 +
           ((C25705 - C25706 + C25707 - C25708) * C21355 +
            (C25709 - C25710 + C25711 - C25712) * C47110) *
               C47479) *
              C47181 * C1118 +
          (((C25706 - C25705 + C25708 - C25707) * C21355 +
            (C25710 - C25709 + C25712 - C25711) * C47110) *
               C15919 +
           ((C25713 - C25714 + C25715 - C25716) * C21355 +
            (C25717 - C25718 + C25719 - C25720) * C47110) *
               C47479) *
              C47181 * C1119 +
          (((C25714 - C25713 + C25716 - C25715) * C21355 +
            (C25718 - C25717 + C25720 - C25719) * C47110) *
               C15919 +
           ((C26557 - C26558 + C26559 - C26560) * C21355 +
            (C26561 - C26562 + C26563 - C26564) * C47110) *
               C47479) *
              C47181 * C1120 +
          (((C26558 - C26557 + C26560 - C26559) * C21355 +
            (C26562 - C26561 + C26564 - C26563) * C47110) *
               C15919 +
           ((C26565 - C26566 + C26567 - C26568) * C21355 +
            (C26569 - C26570 + C26571 - C26572) * C47110) *
               C47479) *
              C47181 * C1121 +
          (((C26566 - C26565 + C26568 - C26567) * C21355 +
            (C26570 - C26569 + C26572 - C26571) * C47110) *
               C15919 +
           ((C10297 * C5729 - C10299 * C5727 + C47481 * C22596 -
             C10300 * C22595) *
                C21355 +
            (C10297 * C5733 - C10299 * C5730 + C47481 * C22598 -
             C10300 * C22597) *
                C47110) *
               C47479) *
              C47181 * C1122) *
         C47135) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C10297 * C124 - C10299 * C117 + C47481 * C478 - C10300 * C468) *
                 C21355 +
             (C10297 * C138 - C10299 * C125 + C47481 * C498 - C10300 * C479) *
                 C47110) *
                C15919 +
            ((C25705 - C25706 + C25707 - C25708) * C21355 +
             (C25709 - C25710 + C25711 - C25712) * C47110) *
                C47479) *
               C47501 +
           (((C10299 * C468 - C10297 * C478 + C10300 * C471 - C47481 * C484) *
                 C21355 +
             (C10299 * C479 - C10297 * C498 + C10300 * C485 - C47481 * C501) *
                 C47110) *
                C15919 +
            ((C26321 - C26322 + C26323 - C26324) * C21355 +
             (C26325 - C26326 + C26327 - C26328) * C47110) *
                C47479) *
               C47490 +
           (((C10297 * C484 - C10299 * C471 + C47481 * C1974 - C10300 * C1968) *
                 C21355 +
             (C10297 * C501 - C10299 * C485 + C47481 * C1986 - C10300 * C1975) *
                 C47110) *
                C15919 +
            ((C26719 - C26720 + C26721 - C26722) * C21355 +
             (C26723 - C26724 + C26725 - C26726) * C47110) *
                C47479) *
               C47464) *
              C1050 +
          ((((C25706 - C25705 + C25708 - C25707) * C21355 +
             (C25710 - C25709 + C25712 - C25711) * C47110) *
                C15919 +
            ((C25713 - C25714 + C25715 - C25716) * C21355 +
             (C25717 - C25718 + C25719 - C25720) * C47110) *
                C47479) *
               C47501 +
           (((C26322 - C26321 + C26324 - C26323) * C21355 +
             (C26326 - C26325 + C26328 - C26327) * C47110) *
                C15919 +
            ((C26727 - C26728 + C26729 - C26730) * C21355 +
             (C26731 - C26732 + C26733 - C26734) * C47110) *
                C47479) *
               C47490 +
           (((C26720 - C26719 + C26722 - C26721) * C21355 +
             (C26724 - C26723 + C26726 - C26725) * C47110) *
                C15919 +
            ((C26735 - C26736 + C26737 - C26738) * C21355 +
             (C26739 - C26740 + C26741 - C26742) * C47110) *
                C47479) *
               C47464) *
              C1051 +
          ((((C25714 - C25713 + C25716 - C25715) * C21355 +
             (C25718 - C25717 + C25720 - C25719) * C47110) *
                C15919 +
            ((C26557 - C26558 + C26559 - C26560) * C21355 +
             (C26561 - C26562 + C26563 - C26564) * C47110) *
                C47479) *
               C47501 +
           (((C26728 - C26727 + C26730 - C26729) * C21355 +
             (C26732 - C26731 + C26734 - C26733) * C47110) *
                C15919 +
            ((C10299 * C1666 - C10297 * C1669 + C10300 * C5893 -
              C47481 * C5895) *
                 C21355 +
             (C10299 * C1670 - C10297 * C1675 + C10300 * C5896 -
              C47481 * C5899) *
                 C47110) *
                C47479) *
               C47490 +
           (((C26736 - C26735 + C26738 - C26737) * C21355 +
             (C26740 - C26739 + C26742 - C26741) * C47110) *
                C15919 +
            ((C10297 * C5895 - C10299 * C5893 + C47481 * C23237 -
              C10300 * C23236) *
                 C21355 +
             (C10297 * C5899 - C10299 * C5896 + C47481 * C23239 -
              C10300 * C23238) *
                 C47110) *
                C47479) *
               C47464) *
              C47461) *
         C47135) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C10297 * C124 - C10299 * C117 + C47481 * C478 - C10300 * C468) *
                 C21355 +
             (C10297 * C138 - C10299 * C125 + C47481 * C498 - C10300 * C479) *
                 C47110) *
                C15919 +
            ((C25705 - C25706 + C25707 - C25708) * C21355 +
             (C25709 - C25710 + C25711 - C25712) * C47110) *
                C47479) *
               C1788 +
           (((C10299 * C468 - C10297 * C478 + C10300 * C471 - C47481 * C484) *
                 C21355 +
             (C10299 * C479 - C10297 * C498 + C10300 * C485 - C47481 * C501) *
                 C47110) *
                C15919 +
            ((C26321 - C26322 + C26323 - C26324) * C21355 +
             (C26325 - C26326 + C26327 - C26328) * C47110) *
                C47479) *
               C1789 +
           (((C10297 * C484 - C10299 * C471 + C47481 * C1974 - C10300 * C1968) *
                 C21355 +
             (C10297 * C501 - C10299 * C485 + C47481 * C1986 - C10300 * C1975) *
                 C47110) *
                C15919 +
            ((C26719 - C26720 + C26721 - C26722) * C21355 +
             (C26723 - C26724 + C26725 - C26726) * C47110) *
                C47479) *
               C47464) *
              C47163 * C47497 +
          ((((C10303 - C10302 + C10305 - C10304) * C21355 +
             (C10307 - C10306 + C10309 - C10308) * C47110) *
                C15919 +
            ((C10480 - C10481 + C10482 - C10483) * C21355 +
             (C10484 - C10485 + C10486 - C10487) * C47110) *
                C47479) *
               C1788 +
           (((C10659 - C10658 + C10661 - C10660) * C21355 +
             (C10663 - C10662 + C10665 - C10664) * C47110) *
                C15919 +
            ((C11160 - C11161 + C11162 - C11163) * C21355 +
             (C11164 - C11165 + C11166 - C11167) * C47110) *
                C47479) *
               C1789 +
           (((C10667 - C10666 + C10669 - C10668) * C21355 +
             (C10671 - C10670 + C10673 - C10672) * C47110) *
                C15919 +
            ((C12596 - C12597 + C12598 - C12599) * C21355 +
             (C12600 - C12601 + C12602 - C12603) * C47110) *
                C47479) *
               C47464) *
              C47163 * C47484 +
          ((((C10311 - C10310 + C10313 - C10312) * C21355 +
             (C10315 - C10314 + C10317 - C10316) * C47110) *
                C15919 +
            ((C10496 - C10497 + C10498 - C10499) * C21355 +
             (C10500 - C10501 + C10502 - C10503) * C47110) *
                C47479) *
               C1788 +
           (((C10675 - C10674 + C10677 - C10676) * C21355 +
             (C10679 - C10678 + C10681 - C10680) * C47110) *
                C15919 +
            ((C11168 - C11169 + C11170 - C11171) * C21355 +
             (C11172 - C11173 + C11174 - C11175) * C47110) *
                C47479) *
               C1789 +
           (((C10683 - C10682 + C10685 - C10684) * C21355 +
             (C10687 - C10686 + C10689 - C10688) * C47110) *
                C15919 +
            ((C10297 * C1271 - C10299 * C1260 + C47481 * C2369 -
              C10300 * C2364) *
                 C21355 +
             (C10297 * C1287 - C10299 * C1272 + C47481 * C2373 -
              C10300 * C2370) *
                 C47110) *
                C47479) *
               C47464) *
              C47163 * C47455)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C10297 * C124 - C10299 * C117 + C47481 * C478 - C10300 * C468) *
                 C21355 +
             (C10297 * C138 - C10299 * C125 + C47481 * C498 - C10300 * C479) *
                 C47110) *
                C15919 +
            ((C25705 - C25706 + C25707 - C25708) * C21355 +
             (C25709 - C25710 + C25711 - C25712) * C47110) *
                C47479) *
               C1788 +
           (((C10299 * C468 - C10297 * C478 + C10300 * C471 - C47481 * C484) *
                 C21355 +
             (C10299 * C479 - C10297 * C498 + C10300 * C485 - C47481 * C501) *
                 C47110) *
                C15919 +
            ((C26321 - C26322 + C26323 - C26324) * C21355 +
             (C26325 - C26326 + C26327 - C26328) * C47110) *
                C47479) *
               C1789 +
           (((C10297 * C484 - C10299 * C471 + C47481 * C1974 - C10300 * C1968) *
                 C21355 +
             (C10297 * C501 - C10299 * C485 + C47481 * C1986 - C10300 * C1975) *
                 C47110) *
                C15919 +
            ((C26719 - C26720 + C26721 - C26722) * C21355 +
             (C26723 - C26724 + C26725 - C26726) * C47110) *
                C47479) *
               C47464) *
              C47500 +
          ((((C25706 - C25705 + C25708 - C25707) * C21355 +
             (C25710 - C25709 + C25712 - C25711) * C47110) *
                C15919 +
            ((C25713 - C25714 + C25715 - C25716) * C21355 +
             (C25717 - C25718 + C25719 - C25720) * C47110) *
                C47479) *
               C1788 +
           (((C26322 - C26321 + C26324 - C26323) * C21355 +
             (C26326 - C26325 + C26328 - C26327) * C47110) *
                C15919 +
            ((C26727 - C26728 + C26729 - C26730) * C21355 +
             (C26731 - C26732 + C26733 - C26734) * C47110) *
                C47479) *
               C1789 +
           (((C26720 - C26719 + C26722 - C26721) * C21355 +
             (C26724 - C26723 + C26726 - C26725) * C47110) *
                C15919 +
            ((C26735 - C26736 + C26737 - C26738) * C21355 +
             (C26739 - C26740 + C26741 - C26742) * C47110) *
                C47479) *
               C47464) *
              C47488 +
          ((((C25714 - C25713 + C25716 - C25715) * C21355 +
             (C25718 - C25717 + C25720 - C25719) * C47110) *
                C15919 +
            ((C26557 - C26558 + C26559 - C26560) * C21355 +
             (C26561 - C26562 + C26563 - C26564) * C47110) *
                C47479) *
               C1788 +
           (((C26728 - C26727 + C26730 - C26729) * C21355 +
             (C26732 - C26731 + C26734 - C26733) * C47110) *
                C15919 +
            ((C27197 - C27198 + C27199 - C27200) * C21355 +
             (C27201 - C27202 + C27203 - C27204) * C47110) *
                C47479) *
               C1789 +
           (((C26736 - C26735 + C26738 - C26737) * C21355 +
             (C26740 - C26739 + C26742 - C26741) * C47110) *
                C15919 +
            ((C10297 * C5895 - C10299 * C5893 + C47481 * C23237 -
              C10300 * C23236) *
                 C21355 +
             (C10297 * C5899 - C10299 * C5896 + C47481 * C23239 -
              C10300 * C23238) *
                 C47110) *
                C47479) *
               C47464) *
              C47461) *
         C47135) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C10297 * C124 - C10299 * C117 + C47481 * C478 - C10300 * C468) *
                C21355 +
            (C10297 * C138 - C10299 * C125 + C47481 * C498 - C10300 * C479) *
                C47110) *
               C15919 +
           ((C25705 - C25706 + C25707 - C25708) * C21355 +
            (C25709 - C25710 + C25711 - C25712) * C47110) *
               C47479) *
              C1963 +
          (((C10299 * C468 - C10297 * C478 + C10300 * C471 - C47481 * C484) *
                C21355 +
            (C10299 * C479 - C10297 * C498 + C10300 * C485 - C47481 * C501) *
                C47110) *
               C15919 +
           ((C26321 - C26322 + C26323 - C26324) * C21355 +
            (C26325 - C26326 + C26327 - C26328) * C47110) *
               C47479) *
              C1964 +
          (((C10297 * C484 - C10299 * C471 + C47481 * C1974 - C10300 * C1968) *
                C21355 +
            (C10297 * C501 - C10299 * C485 + C47481 * C1986 - C10300 * C1975) *
                C47110) *
               C15919 +
           ((C26719 - C26720 + C26721 - C26722) * C21355 +
            (C26723 - C26724 + C26725 - C26726) * C47110) *
               C47479) *
              C1965 +
          (((C10299 * C1968 - C10297 * C1974 + C10300 * C1971 -
             C47481 * C1980) *
                C21355 +
            (C10299 * C1975 - C10297 * C1986 + C10300 * C1981 -
             C47481 * C1989) *
                C47110) *
               C15919 +
           ((C10299 * C2362 - C10297 * C2365 + C10300 * C6769 -
             C47481 * C6771) *
                C21355 +
            (C10299 * C2366 - C10297 * C2371 + C10300 * C6772 -
             C47481 * C6775) *
                C47110) *
               C47479) *
              C1966 +
          (((C10297 * C1980 - C10299 * C1971 + C47481 * C12395 -
             C10300 * C12393) *
                C21355 +
            (C10297 * C1989 - C10299 * C1981 + C47481 * C12399 -
             C10300 * C12396) *
                C47110) *
               C15919 +
           ((C10297 * C6771 - C10299 * C6769 + C47481 * C27579 -
             C10300 * C27578) *
                C21355 +
            (C10297 * C6775 - C10299 * C6772 + C47481 * C27581 -
             C10300 * C27580) *
                C47110) *
               C47479) *
              C1967) *
         C47163 * C47135) /
            (p * q * std::sqrt(p + q));
    d2ee[138] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C10297 * C124 - C10299 * C117 + C47481 * C478 - C10300 * C468) *
                  C21355 +
              (C10297 * C138 - C10299 * C125 + C47481 * C498 - C10300 * C479) *
                  C47110) *
                 C15919 +
             ((C25705 - C25706 + C25707 - C25708) * C21355 +
              (C25709 - C25710 + C25711 - C25712) * C47110) *
                 C47479) *
                C47430 +
            (((C10299 * C468 - C10297 * C478 + C10300 * C471 - C47481 * C484) *
                  C21355 +
              (C10299 * C479 - C10297 * C498 + C10300 * C485 - C47481 * C501) *
                  C47110) *
                 C15919 +
             ((C26321 - C26322 + C26323 - C26324) * C21355 +
              (C26325 - C26326 + C26327 - C26328) * C47110) *
                 C47479) *
                C47268) *
               C1050 +
           ((((C25706 - C25705 + C25708 - C25707) * C21355 +
              (C25710 - C25709 + C25712 - C25711) * C47110) *
                 C15919 +
             ((C25713 - C25714 + C25715 - C25716) * C21355 +
              (C25717 - C25718 + C25719 - C25720) * C47110) *
                 C47479) *
                C47430 +
            (((C26322 - C26321 + C26324 - C26323) * C21355 +
              (C26326 - C26325 + C26328 - C26327) * C47110) *
                 C15919 +
             ((C26727 - C26728 + C26729 - C26730) * C21355 +
              (C26731 - C26732 + C26733 - C26734) * C47110) *
                 C47479) *
                C47268) *
               C1051 +
           ((((C25714 - C25713 + C25716 - C25715) * C21355 +
              (C25718 - C25717 + C25720 - C25719) * C47110) *
                 C15919 +
             ((C26557 - C26558 + C26559 - C26560) * C21355 +
              (C26561 - C26562 + C26563 - C26564) * C47110) *
                 C47479) *
                C47430 +
            (((C26728 - C26727 + C26730 - C26729) * C21355 +
              (C26732 - C26731 + C26734 - C26733) * C47110) *
                 C15919 +
             ((C10299 * C1666 - C10297 * C1669 + C10300 * C5893 -
               C47481 * C5895) *
                  C21355 +
              (C10299 * C1670 - C10297 * C1675 + C10300 * C5896 -
               C47481 * C5899) *
                  C47110) *
                 C47479) *
                C47268) *
               C47461) *
              C47415 +
          (((((C10303 - C10302 + C10305 - C10304) * C21355 +
              (C10307 - C10306 + C10309 - C10308) * C47110) *
                 C15919 +
             ((C10480 - C10481 + C10482 - C10483) * C21355 +
              (C10484 - C10485 + C10486 - C10487) * C47110) *
                 C47479) *
                C47430 +
            (((C10659 - C10658 + C10661 - C10660) * C21355 +
              (C10663 - C10662 + C10665 - C10664) * C47110) *
                 C15919 +
             ((C11160 - C11161 + C11162 - C11163) * C21355 +
              (C11164 - C11165 + C11166 - C11167) * C47110) *
                 C47479) *
                C47268) *
               C1050 +
           ((((C10481 - C10480 + C10483 - C10482) * C21355 +
              (C10485 - C10484 + C10487 - C10486) * C47110) *
                 C15919 +
             ((C10488 - C10489 + C10490 - C10491) * C21355 +
              (C10492 - C10493 + C10494 - C10495) * C47110) *
                 C47479) *
                C47430 +
            (((C11161 - C11160 + C11163 - C11162) * C21355 +
              (C11165 - C11164 + C11167 - C11166) * C47110) *
                 C15919 +
             ((C11882 - C11883 + C11884 - C11885) * C21355 +
              (C11886 - C11887 + C11888 - C11889) * C47110) *
                 C47479) *
                C47268) *
               C1051 +
           ((((C10489 - C10488 + C10491 - C10490) * C21355 +
              (C10493 - C10492 + C10495 - C10494) * C47110) *
                 C15919 +
             ((C11680 - C11681 + C11682 - C11683) * C21355 +
              (C11684 - C11685 + C11686 - C11687) * C47110) *
                 C47479) *
                C47430 +
            (((C11883 - C11882 + C11885 - C11884) * C21355 +
              (C11887 - C11886 + C11889 - C11888) * C47110) *
                 C15919 +
             ((C10297 * C1671 - C10299 * C1667 + C47481 * C5897 -
               C10300 * C5894) *
                  C21355 +
              (C10297 * C1676 - C10299 * C1672 + C47481 * C5900 -
               C10300 * C5898) *
                  C47110) *
                 C47479) *
                C47268) *
               C47461) *
              C47146)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C10297 * C124 - C10299 * C117 + C47481 * C478 - C10300 * C468) *
                 C21355 +
             (C10297 * C138 - C10299 * C125 + C47481 * C498 - C10300 * C479) *
                 C47110) *
                C15919 +
            ((C25705 - C25706 + C25707 - C25708) * C21355 +
             (C25709 - C25710 + C25711 - C25712) * C47110) *
                C47479) *
               C47430 +
           (((C10299 * C468 - C10297 * C478 + C10300 * C471 - C47481 * C484) *
                 C21355 +
             (C10299 * C479 - C10297 * C498 + C10300 * C485 - C47481 * C501) *
                 C47110) *
                C15919 +
            ((C10299 * C906 - C10297 * C911 + C10300 * C1258 - C47481 * C1267) *
                 C21355 +
             (C10299 * C912 - C10297 * C921 + C10300 * C1268 - C47481 * C1285) *
                 C47110) *
                C47479) *
               C47268) *
              C47163 * C636 +
          ((((C10303 - C10302 + C10305 - C10304) * C21355 +
             (C10307 - C10306 + C10309 - C10308) * C47110) *
                C15919 +
            ((C10480 - C10481 + C10482 - C10483) * C21355 +
             (C10484 - C10485 + C10486 - C10487) * C47110) *
                C47479) *
               C47430 +
           (((C10659 - C10658 + C10661 - C10660) * C21355 +
             (C10663 - C10662 + C10665 - C10664) * C47110) *
                C15919 +
            ((C11160 - C11161 + C11162 - C11163) * C21355 +
             (C11164 - C11165 + C11166 - C11167) * C47110) *
                C47479) *
               C47268) *
              C47163 * C637 +
          ((((C10311 - C10310 + C10313 - C10312) * C21355 +
             (C10315 - C10314 + C10317 - C10316) * C47110) *
                C15919 +
            ((C10496 - C10497 + C10498 - C10499) * C21355 +
             (C10500 - C10501 + C10502 - C10503) * C47110) *
                C47479) *
               C47430 +
           (((C10675 - C10674 + C10677 - C10676) * C21355 +
             (C10679 - C10678 + C10681 - C10680) * C47110) *
                C15919 +
            ((C11168 - C11169 + C11170 - C11171) * C21355 +
             (C11172 - C11173 + C11174 - C11175) * C47110) *
                C47479) *
               C47268) *
              C47163 * C638 +
          ((((C10319 - C10318 + C10321 - C10320) * C21355 +
             (C10323 - C10322 + C10325 - C10324) * C47110) *
                C15919 +
            ((C10820 - C10821 + C10822 - C10823) * C21355 +
             (C10824 - C10825 + C10826 - C10827) * C47110) *
                C47479) *
               C47430 +
           (((C10959 - C10958 + C10961 - C10960) * C21355 +
             (C10963 - C10962 + C10965 - C10964) * C47110) *
                C15919 +
            ((C10297 * C917 - C10299 * C909 + C47481 * C2139 - C10300 * C2138) *
                 C21355 +
             (C10297 * C924 - C10299 * C918 + C47481 * C2141 - C10300 * C2140) *
                 C47110) *
                C47479) *
               C47268) *
              C47163 * C47465)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C10297 * C124 - C10299 * C117 + C47481 * C478 - C10300 * C468) *
                 C21355 +
             (C10297 * C138 - C10299 * C125 + C47481 * C498 - C10300 * C479) *
                 C47110) *
                C15919 +
            ((C25705 - C25706 + C25707 - C25708) * C21355 +
             (C25709 - C25710 + C25711 - C25712) * C47110) *
                C47479) *
               C2248 +
           (((C10299 * C468 - C10297 * C478 + C10300 * C471 - C47481 * C484) *
                 C21355 +
             (C10299 * C479 - C10297 * C498 + C10300 * C485 - C47481 * C501) *
                 C47110) *
                C15919 +
            ((C26321 - C26322 + C26323 - C26324) * C21355 +
             (C26325 - C26326 + C26327 - C26328) * C47110) *
                C47479) *
               C2249 +
           (((C10297 * C484 - C10299 * C471 + C47481 * C1974 - C10300 * C1968) *
                 C21355 +
             (C10297 * C501 - C10299 * C485 + C47481 * C1986 - C10300 * C1975) *
                 C47110) *
                C15919 +
            ((C26719 - C26720 + C26721 - C26722) * C21355 +
             (C26723 - C26724 + C26725 - C26726) * C47110) *
                C47479) *
               C2250 +
           (((C10299 * C1968 - C10297 * C1974 + C10300 * C1971 -
              C47481 * C1980) *
                 C21355 +
             (C10299 * C1975 - C10297 * C1986 + C10300 * C1981 -
              C47481 * C1989) *
                 C47110) *
                C15919 +
            ((C10299 * C2362 - C10297 * C2365 + C10300 * C6769 -
              C47481 * C6771) *
                 C21355 +
             (C10299 * C2366 - C10297 * C2371 + C10300 * C6772 -
              C47481 * C6775) *
                 C47110) *
                C47479) *
               C47477) *
              C47163 * C47415 +
          ((((C10303 - C10302 + C10305 - C10304) * C21355 +
             (C10307 - C10306 + C10309 - C10308) * C47110) *
                C15919 +
            ((C10480 - C10481 + C10482 - C10483) * C21355 +
             (C10484 - C10485 + C10486 - C10487) * C47110) *
                C47479) *
               C2248 +
           (((C10659 - C10658 + C10661 - C10660) * C21355 +
             (C10663 - C10662 + C10665 - C10664) * C47110) *
                C15919 +
            ((C11160 - C11161 + C11162 - C11163) * C21355 +
             (C11164 - C11165 + C11166 - C11167) * C47110) *
                C47479) *
               C2249 +
           (((C10667 - C10666 + C10669 - C10668) * C21355 +
             (C10671 - C10670 + C10673 - C10672) * C47110) *
                C15919 +
            ((C12596 - C12597 + C12598 - C12599) * C21355 +
             (C12600 - C12601 + C12602 - C12603) * C47110) *
                C47479) *
               C2250 +
           (((C12735 - C12734 + C12737 - C12736) * C21355 +
             (C12739 - C12738 + C12741 - C12740) * C47110) *
                C15919 +
            ((C10297 * C2367 - C10299 * C2363 + C47481 * C6773 -
              C10300 * C6770) *
                 C21355 +
             (C10297 * C2372 - C10299 * C2368 + C47481 * C6776 -
              C10300 * C6774) *
                 C47110) *
                C47479) *
               C47477) *
              C47163 * C47146)) /
            (p * q * std::sqrt(p + q));
    d2ee[139] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C10297 * C124 - C10299 * C117 + C47481 * C478 - C10300 * C468) *
                 C21355 +
             (C10297 * C138 - C10299 * C125 + C47481 * C498 - C10300 * C479) *
                 C47110) *
                C15919 +
            ((C25705 - C25706 + C25707 - C25708) * C21355 +
             (C25709 - C25710 + C25711 - C25712) * C47110) *
                C47479) *
               C47181 * C47500 +
           (((C25706 - C25705 + C25708 - C25707) * C21355 +
             (C25710 - C25709 + C25712 - C25711) * C47110) *
                C15919 +
            ((C25713 - C25714 + C25715 - C25716) * C21355 +
             (C25717 - C25718 + C25719 - C25720) * C47110) *
                C47479) *
               C47181 * C47488 +
           (((C25714 - C25713 + C25716 - C25715) * C21355 +
             (C25718 - C25717 + C25720 - C25719) * C47110) *
                C15919 +
            ((C10297 * C1130 - C10299 * C1124 + C47481 * C1669 -
              C10300 * C1666) *
                 C21355 +
             (C10297 * C1142 - C10299 * C1131 + C47481 * C1675 -
              C10300 * C1670) *
                 C47110) *
                C47479) *
               C47181 * C47461) *
              C284 +
          ((((C10303 - C10302 + C10305 - C10304) * C21355 +
             (C10307 - C10306 + C10309 - C10308) * C47110) *
                C15919 +
            ((C10480 - C10481 + C10482 - C10483) * C21355 +
             (C10484 - C10485 + C10486 - C10487) * C47110) *
                C47479) *
               C47181 * C47500 +
           (((C10481 - C10480 + C10483 - C10482) * C21355 +
             (C10485 - C10484 + C10487 - C10486) * C47110) *
                C15919 +
            ((C10488 - C10489 + C10490 - C10491) * C21355 +
             (C10492 - C10493 + C10494 - C10495) * C47110) *
                C47479) *
               C47181 * C47488 +
           (((C10489 - C10488 + C10491 - C10490) * C21355 +
             (C10493 - C10492 + C10495 - C10494) * C47110) *
                C15919 +
            ((C11680 - C11681 + C11682 - C11683) * C21355 +
             (C11684 - C11685 + C11686 - C11687) * C47110) *
                C47479) *
               C47181 * C47461) *
              C285 +
          ((((C10311 - C10310 + C10313 - C10312) * C21355 +
             (C10315 - C10314 + C10317 - C10316) * C47110) *
                C15919 +
            ((C10496 - C10497 + C10498 - C10499) * C21355 +
             (C10500 - C10501 + C10502 - C10503) * C47110) *
                C47479) *
               C47181 * C47500 +
           (((C10497 - C10496 + C10499 - C10498) * C21355 +
             (C10501 - C10500 + C10503 - C10502) * C47110) *
                C15919 +
            ((C10504 - C10505 + C10506 - C10507) * C21355 +
             (C10508 - C10509 + C10510 - C10511) * C47110) *
                C47479) *
               C47181 * C47488 +
           (((C10505 - C10504 + C10507 - C10506) * C21355 +
             (C10509 - C10508 + C10511 - C10510) * C47110) *
                C15919 +
            ((C10297 * C1134 - C10299 * C1126 + C47481 * C1673 -
              C10300 * C1668) *
                 C21355 +
             (C10297 * C1144 - C10299 * C1135 + C47481 * C1677 -
              C10300 * C1674) *
                 C47110) *
                C47479) *
               C47181 * C47461) *
              C47455)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C10297 * C124 - C10299 * C117 + C47481 * C478 - C10300 * C468) *
                C21355 +
            (C10297 * C138 - C10299 * C125 + C47481 * C498 - C10300 * C479) *
                C47110) *
               C15919 +
           ((C10297 * C297 - C10299 * C287 + C47481 * C911 - C10300 * C906) *
                C21355 +
            (C10297 * C317 - C10299 * C298 + C47481 * C921 - C10300 * C912) *
                C47110) *
               C47479) *
              C47181 * C47163 * C108 +
          (((C10303 - C10302 + C10305 - C10304) * C21355 +
            (C10307 - C10306 + C10309 - C10308) * C47110) *
               C15919 +
           ((C10480 - C10481 + C10482 - C10483) * C21355 +
            (C10484 - C10485 + C10486 - C10487) * C47110) *
               C47479) *
              C47181 * C47163 * C109 +
          (((C10311 - C10310 + C10313 - C10312) * C21355 +
            (C10315 - C10314 + C10317 - C10316) * C47110) *
               C15919 +
           ((C10496 - C10497 + C10498 - C10499) * C21355 +
            (C10500 - C10501 + C10502 - C10503) * C47110) *
               C47479) *
              C47181 * C47163 * C110 +
          (((C10319 - C10318 + C10321 - C10320) * C21355 +
            (C10323 - C10322 + C10325 - C10324) * C47110) *
               C15919 +
           ((C10820 - C10821 + C10822 - C10823) * C21355 +
            (C10824 - C10825 + C10826 - C10827) * C47110) *
               C47479) *
              C47181 * C47163 * C111 +
          (((C10327 - C10326 + C10329 - C10328) * C21355 +
            (C10331 - C10330 + C10333 - C10332) * C47110) *
               C15919 +
           ((C10297 * C313 - C10299 * C295 + C47481 * C919 - C10300 * C910) *
                C21355 +
            (C10297 * C325 - C10299 * C314 + C47481 * C925 - C10300 * C920) *
                C47110) *
               C47479) *
              C47181 * C47163 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C10297 * C124 - C10299 * C117 + C47481 * C478 - C10300 * C468) *
                 C21355 +
             (C10297 * C138 - C10299 * C125 + C47481 * C498 - C10300 * C479) *
                 C47110) *
                C15919 +
            ((C25705 - C25706 + C25707 - C25708) * C21355 +
             (C25709 - C25710 + C25711 - C25712) * C47110) *
                C47479) *
               C47181 * C1050 +
           (((C25706 - C25705 + C25708 - C25707) * C21355 +
             (C25710 - C25709 + C25712 - C25711) * C47110) *
                C15919 +
            ((C25713 - C25714 + C25715 - C25716) * C21355 +
             (C25717 - C25718 + C25719 - C25720) * C47110) *
                C47479) *
               C47181 * C1051 +
           (((C25714 - C25713 + C25716 - C25715) * C21355 +
             (C25718 - C25717 + C25720 - C25719) * C47110) *
                C15919 +
            ((C10297 * C1130 - C10299 * C1124 + C47481 * C1669 -
              C10300 * C1666) *
                 C21355 +
             (C10297 * C1142 - C10299 * C1131 + C47481 * C1675 -
              C10300 * C1670) *
                 C47110) *
                C47479) *
               C47181 * C47461) *
              C47497 +
          ((((C10303 - C10302 + C10305 - C10304) * C21355 +
             (C10307 - C10306 + C10309 - C10308) * C47110) *
                C15919 +
            ((C10480 - C10481 + C10482 - C10483) * C21355 +
             (C10484 - C10485 + C10486 - C10487) * C47110) *
                C47479) *
               C47181 * C1050 +
           (((C10481 - C10480 + C10483 - C10482) * C21355 +
             (C10485 - C10484 + C10487 - C10486) * C47110) *
                C15919 +
            ((C10488 - C10489 + C10490 - C10491) * C21355 +
             (C10492 - C10493 + C10494 - C10495) * C47110) *
                C47479) *
               C47181 * C1051 +
           (((C10489 - C10488 + C10491 - C10490) * C21355 +
             (C10493 - C10492 + C10495 - C10494) * C47110) *
                C15919 +
            ((C11680 - C11681 + C11682 - C11683) * C21355 +
             (C11684 - C11685 + C11686 - C11687) * C47110) *
                C47479) *
               C47181 * C47461) *
              C47484 +
          ((((C10311 - C10310 + C10313 - C10312) * C21355 +
             (C10315 - C10314 + C10317 - C10316) * C47110) *
                C15919 +
            ((C10496 - C10497 + C10498 - C10499) * C21355 +
             (C10500 - C10501 + C10502 - C10503) * C47110) *
                C47479) *
               C47181 * C1050 +
           (((C10497 - C10496 + C10499 - C10498) * C21355 +
             (C10501 - C10500 + C10503 - C10502) * C47110) *
                C15919 +
            ((C10504 - C10505 + C10506 - C10507) * C21355 +
             (C10508 - C10509 + C10510 - C10511) * C47110) *
                C47479) *
               C47181 * C1051 +
           (((C10505 - C10504 + C10507 - C10506) * C21355 +
             (C10509 - C10508 + C10511 - C10510) * C47110) *
                C15919 +
            ((C10297 * C1134 - C10299 * C1126 + C47481 * C1673 -
              C10300 * C1668) *
                 C21355 +
             (C10297 * C1144 - C10299 * C1135 + C47481 * C1677 -
              C10300 * C1674) *
                 C47110) *
                C47479) *
               C47181 * C47461) *
              C47455)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C10297 * C124 - C10299 * C117 + C47481 * C478 - C10300 * C468) *
                C21355 +
            (C10297 * C138 - C10299 * C125 + C47481 * C498 - C10300 * C479) *
                C47110) *
               C15919 +
           ((C25705 - C25706 + C25707 - C25708) * C21355 +
            (C25709 - C25710 + C25711 - C25712) * C47110) *
               C47479) *
              C47181 * C1118 +
          (((C25706 - C25705 + C25708 - C25707) * C21355 +
            (C25710 - C25709 + C25712 - C25711) * C47110) *
               C15919 +
           ((C25713 - C25714 + C25715 - C25716) * C21355 +
            (C25717 - C25718 + C25719 - C25720) * C47110) *
               C47479) *
              C47181 * C1119 +
          (((C25714 - C25713 + C25716 - C25715) * C21355 +
            (C25718 - C25717 + C25720 - C25719) * C47110) *
               C15919 +
           ((C26557 - C26558 + C26559 - C26560) * C21355 +
            (C26561 - C26562 + C26563 - C26564) * C47110) *
               C47479) *
              C47181 * C1120 +
          (((C26558 - C26557 + C26560 - C26559) * C21355 +
            (C26562 - C26561 + C26564 - C26563) * C47110) *
               C15919 +
           ((C26565 - C26566 + C26567 - C26568) * C21355 +
            (C26569 - C26570 + C26571 - C26572) * C47110) *
               C47479) *
              C47181 * C1121 +
          (((C26566 - C26565 + C26568 - C26567) * C21355 +
            (C26570 - C26569 + C26572 - C26571) * C47110) *
               C15919 +
           ((C10297 * C5729 - C10299 * C5727 + C47481 * C22596 -
             C10300 * C22595) *
                C21355 +
            (C10297 * C5733 - C10299 * C5730 + C47481 * C22598 -
             C10300 * C22597) *
                C47110) *
               C47479) *
              C47181 * C1122) *
         C47135) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C10297 * C124 - C10299 * C117 + C47481 * C478 - C10300 * C468) *
                 C21355 +
             (C10297 * C138 - C10299 * C125 + C47481 * C498 - C10300 * C479) *
                 C47110) *
                C15919 +
            ((C25705 - C25706 + C25707 - C25708) * C21355 +
             (C25709 - C25710 + C25711 - C25712) * C47110) *
                C47479) *
               C1788 +
           (((C10299 * C468 - C10297 * C478 + C10300 * C471 - C47481 * C484) *
                 C21355 +
             (C10299 * C479 - C10297 * C498 + C10300 * C485 - C47481 * C501) *
                 C47110) *
                C15919 +
            ((C26321 - C26322 + C26323 - C26324) * C21355 +
             (C26325 - C26326 + C26327 - C26328) * C47110) *
                C47479) *
               C1789 +
           (((C10297 * C484 - C10299 * C471 + C47481 * C1974 - C10300 * C1968) *
                 C21355 +
             (C10297 * C501 - C10299 * C485 + C47481 * C1986 - C10300 * C1975) *
                 C47110) *
                C15919 +
            ((C26719 - C26720 + C26721 - C26722) * C21355 +
             (C26723 - C26724 + C26725 - C26726) * C47110) *
                C47479) *
               C47464) *
              C47163 * C47497 +
          ((((C10303 - C10302 + C10305 - C10304) * C21355 +
             (C10307 - C10306 + C10309 - C10308) * C47110) *
                C15919 +
            ((C10480 - C10481 + C10482 - C10483) * C21355 +
             (C10484 - C10485 + C10486 - C10487) * C47110) *
                C47479) *
               C1788 +
           (((C10659 - C10658 + C10661 - C10660) * C21355 +
             (C10663 - C10662 + C10665 - C10664) * C47110) *
                C15919 +
            ((C11160 - C11161 + C11162 - C11163) * C21355 +
             (C11164 - C11165 + C11166 - C11167) * C47110) *
                C47479) *
               C1789 +
           (((C10667 - C10666 + C10669 - C10668) * C21355 +
             (C10671 - C10670 + C10673 - C10672) * C47110) *
                C15919 +
            ((C12596 - C12597 + C12598 - C12599) * C21355 +
             (C12600 - C12601 + C12602 - C12603) * C47110) *
                C47479) *
               C47464) *
              C47163 * C47484 +
          ((((C10311 - C10310 + C10313 - C10312) * C21355 +
             (C10315 - C10314 + C10317 - C10316) * C47110) *
                C15919 +
            ((C10496 - C10497 + C10498 - C10499) * C21355 +
             (C10500 - C10501 + C10502 - C10503) * C47110) *
                C47479) *
               C1788 +
           (((C10675 - C10674 + C10677 - C10676) * C21355 +
             (C10679 - C10678 + C10681 - C10680) * C47110) *
                C15919 +
            ((C11168 - C11169 + C11170 - C11171) * C21355 +
             (C11172 - C11173 + C11174 - C11175) * C47110) *
                C47479) *
               C1789 +
           (((C10683 - C10682 + C10685 - C10684) * C21355 +
             (C10687 - C10686 + C10689 - C10688) * C47110) *
                C15919 +
            ((C10297 * C1271 - C10299 * C1260 + C47481 * C2369 -
              C10300 * C2364) *
                 C21355 +
             (C10297 * C1287 - C10299 * C1272 + C47481 * C2373 -
              C10300 * C2370) *
                 C47110) *
                C47479) *
               C47464) *
              C47163 * C47455)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C10297 * C124 - C10299 * C117 + C47481 * C478 - C10300 * C468) *
                 C21355 +
             (C10297 * C138 - C10299 * C125 + C47481 * C498 - C10300 * C479) *
                 C47110) *
                C15919 +
            ((C25705 - C25706 + C25707 - C25708) * C21355 +
             (C25709 - C25710 + C25711 - C25712) * C47110) *
                C47479) *
               C1788 +
           (((C10299 * C468 - C10297 * C478 + C10300 * C471 - C47481 * C484) *
                 C21355 +
             (C10299 * C479 - C10297 * C498 + C10300 * C485 - C47481 * C501) *
                 C47110) *
                C15919 +
            ((C26321 - C26322 + C26323 - C26324) * C21355 +
             (C26325 - C26326 + C26327 - C26328) * C47110) *
                C47479) *
               C1789 +
           (((C10297 * C484 - C10299 * C471 + C47481 * C1974 - C10300 * C1968) *
                 C21355 +
             (C10297 * C501 - C10299 * C485 + C47481 * C1986 - C10300 * C1975) *
                 C47110) *
                C15919 +
            ((C26719 - C26720 + C26721 - C26722) * C21355 +
             (C26723 - C26724 + C26725 - C26726) * C47110) *
                C47479) *
               C47464) *
              C47500 +
          ((((C25706 - C25705 + C25708 - C25707) * C21355 +
             (C25710 - C25709 + C25712 - C25711) * C47110) *
                C15919 +
            ((C25713 - C25714 + C25715 - C25716) * C21355 +
             (C25717 - C25718 + C25719 - C25720) * C47110) *
                C47479) *
               C1788 +
           (((C26322 - C26321 + C26324 - C26323) * C21355 +
             (C26326 - C26325 + C26328 - C26327) * C47110) *
                C15919 +
            ((C26727 - C26728 + C26729 - C26730) * C21355 +
             (C26731 - C26732 + C26733 - C26734) * C47110) *
                C47479) *
               C1789 +
           (((C26720 - C26719 + C26722 - C26721) * C21355 +
             (C26724 - C26723 + C26726 - C26725) * C47110) *
                C15919 +
            ((C26735 - C26736 + C26737 - C26738) * C21355 +
             (C26739 - C26740 + C26741 - C26742) * C47110) *
                C47479) *
               C47464) *
              C47488 +
          ((((C25714 - C25713 + C25716 - C25715) * C21355 +
             (C25718 - C25717 + C25720 - C25719) * C47110) *
                C15919 +
            ((C26557 - C26558 + C26559 - C26560) * C21355 +
             (C26561 - C26562 + C26563 - C26564) * C47110) *
                C47479) *
               C1788 +
           (((C26728 - C26727 + C26730 - C26729) * C21355 +
             (C26732 - C26731 + C26734 - C26733) * C47110) *
                C15919 +
            ((C27197 - C27198 + C27199 - C27200) * C21355 +
             (C27201 - C27202 + C27203 - C27204) * C47110) *
                C47479) *
               C1789 +
           (((C26736 - C26735 + C26738 - C26737) * C21355 +
             (C26740 - C26739 + C26742 - C26741) * C47110) *
                C15919 +
            ((C10297 * C5895 - C10299 * C5893 + C47481 * C23237 -
              C10300 * C23236) *
                 C21355 +
             (C10297 * C5899 - C10299 * C5896 + C47481 * C23239 -
              C10300 * C23238) *
                 C47110) *
                C47479) *
               C47464) *
              C47461) *
         C47135) /
            (p * q * std::sqrt(p + q));
    d2ee[140] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C10297 * C124 - C10299 * C117 + C47481 * C478 - C10300 * C468) *
                  C21355 +
              (C10297 * C138 - C10299 * C125 + C47481 * C498 - C10300 * C479) *
                  C47110) *
                 C15919 +
             ((C25705 - C25706 + C25707 - C25708) * C21355 +
              (C25709 - C25710 + C25711 - C25712) * C47110) *
                 C47479) *
                C3234 +
            (((C10299 * C468 - C10297 * C478 + C10300 * C471 - C47481 * C484) *
                  C21355 +
              (C10299 * C479 - C10297 * C498 + C10300 * C485 - C47481 * C501) *
                  C47110) *
                 C15919 +
             ((C26321 - C26322 + C26323 - C26324) * C21355 +
              (C26325 - C26326 + C26327 - C26328) * C47110) *
                 C47479) *
                C47268) *
               C47429 +
           ((((C25706 - C25705 + C25708 - C25707) * C21355 +
              (C25710 - C25709 + C25712 - C25711) * C47110) *
                 C15919 +
             ((C25713 - C25714 + C25715 - C25716) * C21355 +
              (C25717 - C25718 + C25719 - C25720) * C47110) *
                 C47479) *
                C3234 +
            (((C26322 - C26321 + C26324 - C26323) * C21355 +
              (C26326 - C26325 + C26328 - C26327) * C47110) *
                 C15919 +
             ((C26727 - C26728 + C26729 - C26730) * C21355 +
              (C26731 - C26732 + C26733 - C26734) * C47110) *
                 C47479) *
                C47268) *
               C47226) *
              C47140 +
          (((((C10303 - C10302 + C10305 - C10304) * C21355 +
              (C10307 - C10306 + C10309 - C10308) * C47110) *
                 C15919 +
             ((C10480 - C10481 + C10482 - C10483) * C21355 +
              (C10484 - C10485 + C10486 - C10487) * C47110) *
                 C47479) *
                C3234 +
            (((C10659 - C10658 + C10661 - C10660) * C21355 +
              (C10663 - C10662 + C10665 - C10664) * C47110) *
                 C15919 +
             ((C11160 - C11161 + C11162 - C11163) * C21355 +
              (C11164 - C11165 + C11166 - C11167) * C47110) *
                 C47479) *
                C47268) *
               C47429 +
           ((((C10481 - C10480 + C10483 - C10482) * C21355 +
              (C10485 - C10484 + C10487 - C10486) * C47110) *
                 C15919 +
             ((C10488 - C10489 + C10490 - C10491) * C21355 +
              (C10492 - C10493 + C10494 - C10495) * C47110) *
                 C47479) *
                C3234 +
            (((C11161 - C11160 + C11163 - C11162) * C21355 +
              (C11165 - C11164 + C11167 - C11166) * C47110) *
                 C15919 +
             ((C11882 - C11883 + C11884 - C11885) * C21355 +
              (C11886 - C11887 + C11888 - C11889) * C47110) *
                 C47479) *
                C47268) *
               C47226) *
              C47149 +
          (((((C10311 - C10310 + C10313 - C10312) * C21355 +
              (C10315 - C10314 + C10317 - C10316) * C47110) *
                 C15919 +
             ((C10496 - C10497 + C10498 - C10499) * C21355 +
              (C10500 - C10501 + C10502 - C10503) * C47110) *
                 C47479) *
                C3234 +
            (((C10675 - C10674 + C10677 - C10676) * C21355 +
              (C10679 - C10678 + C10681 - C10680) * C47110) *
                 C15919 +
             ((C11168 - C11169 + C11170 - C11171) * C21355 +
              (C11172 - C11173 + C11174 - C11175) * C47110) *
                 C47479) *
                C47268) *
               C47429 +
           ((((C10497 - C10496 + C10499 - C10498) * C21355 +
              (C10501 - C10500 + C10503 - C10502) * C47110) *
                 C15919 +
             ((C10504 - C10505 + C10506 - C10507) * C21355 +
              (C10508 - C10509 + C10510 - C10511) * C47110) *
                 C47479) *
                C3234 +
            (((C11169 - C11168 + C11171 - C11170) * C21355 +
              (C11173 - C11172 + C11175 - C11174) * C47110) *
                 C15919 +
             ((C10297 * C1277 - C10299 * C1263 + C47481 * C1283 -
               C10300 * C1266) *
                  C21355 +
              (C10297 * C1290 - C10299 * C1278 + C47481 * C1293 -
               C10300 * C1284) *
                  C47110) *
                 C47479) *
                C47268) *
               C47226) *
              C2843)) /
        (p * q * std::sqrt(p + q));
    d2ee[141] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C10297 * C124 - C10299 * C117 + C47481 * C478 - C10300 * C468) *
                  C21355 +
              (C10297 * C138 - C10299 * C125 + C47481 * C498 - C10300 * C479) *
                  C47110) *
                 C15919 +
             ((C25705 - C25706 + C25707 - C25708) * C21355 +
              (C25709 - C25710 + C25711 - C25712) * C47110) *
                 C47479) *
                C47264 +
            (((C10299 * C468 - C10297 * C478 + C10300 * C471 - C47481 * C484) *
                  C21355 +
              (C10299 * C479 - C10297 * C498 + C10300 * C485 - C47481 * C501) *
                  C47110) *
                 C15919 +
             ((C26321 - C26322 + C26323 - C26324) * C21355 +
              (C26325 - C26326 + C26327 - C26328) * C47110) *
                 C47479) *
                C47271 +
            (((C10297 * C484 - C10299 * C471 + C47481 * C1974 -
               C10300 * C1968) *
                  C21355 +
              (C10297 * C501 - C10299 * C485 + C47481 * C1986 -
               C10300 * C1975) *
                  C47110) *
                 C15919 +
             ((C26719 - C26720 + C26721 - C26722) * C21355 +
              (C26723 - C26724 + C26725 - C26726) * C47110) *
                 C47479) *
                C3742) *
               C47429 +
           ((((C25706 - C25705 + C25708 - C25707) * C21355 +
              (C25710 - C25709 + C25712 - C25711) * C47110) *
                 C15919 +
             ((C25713 - C25714 + C25715 - C25716) * C21355 +
              (C25717 - C25718 + C25719 - C25720) * C47110) *
                 C47479) *
                C47264 +
            (((C26322 - C26321 + C26324 - C26323) * C21355 +
              (C26326 - C26325 + C26328 - C26327) * C47110) *
                 C15919 +
             ((C26727 - C26728 + C26729 - C26730) * C21355 +
              (C26731 - C26732 + C26733 - C26734) * C47110) *
                 C47479) *
                C47271 +
            (((C26720 - C26719 + C26722 - C26721) * C21355 +
              (C26724 - C26723 + C26726 - C26725) * C47110) *
                 C15919 +
             ((C26735 - C26736 + C26737 - C26738) * C21355 +
              (C26739 - C26740 + C26741 - C26742) * C47110) *
                 C47479) *
                C3742) *
               C47226) *
              C2580 +
          (((((C10303 - C10302 + C10305 - C10304) * C21355 +
              (C10307 - C10306 + C10309 - C10308) * C47110) *
                 C15919 +
             ((C10480 - C10481 + C10482 - C10483) * C21355 +
              (C10484 - C10485 + C10486 - C10487) * C47110) *
                 C47479) *
                C47264 +
            (((C10659 - C10658 + C10661 - C10660) * C21355 +
              (C10663 - C10662 + C10665 - C10664) * C47110) *
                 C15919 +
             ((C11160 - C11161 + C11162 - C11163) * C21355 +
              (C11164 - C11165 + C11166 - C11167) * C47110) *
                 C47479) *
                C47271 +
            (((C10667 - C10666 + C10669 - C10668) * C21355 +
              (C10671 - C10670 + C10673 - C10672) * C47110) *
                 C15919 +
             ((C12596 - C12597 + C12598 - C12599) * C21355 +
              (C12600 - C12601 + C12602 - C12603) * C47110) *
                 C47479) *
                C3742) *
               C47429 +
           ((((C10481 - C10480 + C10483 - C10482) * C21355 +
              (C10485 - C10484 + C10487 - C10486) * C47110) *
                 C15919 +
             ((C10488 - C10489 + C10490 - C10491) * C21355 +
              (C10492 - C10493 + C10494 - C10495) * C47110) *
                 C47479) *
                C47264 +
            (((C11161 - C11160 + C11163 - C11162) * C21355 +
              (C11165 - C11164 + C11167 - C11166) * C47110) *
                 C15919 +
             ((C11882 - C11883 + C11884 - C11885) * C21355 +
              (C11886 - C11887 + C11888 - C11889) * C47110) *
                 C47479) *
                C47271 +
            (((C12597 - C12596 + C12599 - C12598) * C21355 +
              (C12601 - C12600 + C12603 - C12602) * C47110) *
                 C15919 +
             ((C10297 * C1281 - C10299 * C1265 + C47481 * C7243 -
               C10300 * C7240) *
                  C21355 +
              (C10297 * C1292 - C10299 * C1282 + C47481 * C7246 -
               C10300 * C7244) *
                  C47110) *
                 C47479) *
                C3742) *
               C47226) *
              C47146)) /
        (p * q * std::sqrt(p + q));
    d2ee[142] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C10297 * C124 - C10299 * C117 + C47481 * C478 - C10300 * C468) *
                  C21355 +
              (C10297 * C138 - C10299 * C125 + C47481 * C498 - C10300 * C479) *
                  C47110) *
                 C15919 +
             ((C25705 - C25706 + C25707 - C25708) * C21355 +
              (C25709 - C25710 + C25711 - C25712) * C47110) *
                 C47479) *
                C3234 +
            (((C10299 * C468 - C10297 * C478 + C10300 * C471 - C47481 * C484) *
                  C21355 +
              (C10299 * C479 - C10297 * C498 + C10300 * C485 - C47481 * C501) *
                  C47110) *
                 C15919 +
             ((C26321 - C26322 + C26323 - C26324) * C21355 +
              (C26325 - C26326 + C26327 - C26328) * C47110) *
                 C47479) *
                C47268) *
               C47500 +
           ((((C25706 - C25705 + C25708 - C25707) * C21355 +
              (C25710 - C25709 + C25712 - C25711) * C47110) *
                 C15919 +
             ((C25713 - C25714 + C25715 - C25716) * C21355 +
              (C25717 - C25718 + C25719 - C25720) * C47110) *
                 C47479) *
                C3234 +
            (((C26322 - C26321 + C26324 - C26323) * C21355 +
              (C26326 - C26325 + C26328 - C26327) * C47110) *
                 C15919 +
             ((C26727 - C26728 + C26729 - C26730) * C21355 +
              (C26731 - C26732 + C26733 - C26734) * C47110) *
                 C47479) *
                C47268) *
               C47488 +
           ((((C25714 - C25713 + C25716 - C25715) * C21355 +
              (C25718 - C25717 + C25720 - C25719) * C47110) *
                 C15919 +
             ((C26557 - C26558 + C26559 - C26560) * C21355 +
              (C26561 - C26562 + C26563 - C26564) * C47110) *
                 C47479) *
                C3234 +
            (((C26728 - C26727 + C26730 - C26729) * C21355 +
              (C26732 - C26731 + C26734 - C26733) * C47110) *
                 C15919 +
             ((C27197 - C27198 + C27199 - C27200) * C21355 +
              (C27201 - C27202 + C27203 - C27204) * C47110) *
                 C47479) *
                C47268) *
               C47461) *
              C2580 +
          (((((C10303 - C10302 + C10305 - C10304) * C21355 +
              (C10307 - C10306 + C10309 - C10308) * C47110) *
                 C15919 +
             ((C10480 - C10481 + C10482 - C10483) * C21355 +
              (C10484 - C10485 + C10486 - C10487) * C47110) *
                 C47479) *
                C3234 +
            (((C10659 - C10658 + C10661 - C10660) * C21355 +
              (C10663 - C10662 + C10665 - C10664) * C47110) *
                 C15919 +
             ((C11160 - C11161 + C11162 - C11163) * C21355 +
              (C11164 - C11165 + C11166 - C11167) * C47110) *
                 C47479) *
                C47268) *
               C47500 +
           ((((C10481 - C10480 + C10483 - C10482) * C21355 +
              (C10485 - C10484 + C10487 - C10486) * C47110) *
                 C15919 +
             ((C10488 - C10489 + C10490 - C10491) * C21355 +
              (C10492 - C10493 + C10494 - C10495) * C47110) *
                 C47479) *
                C3234 +
            (((C11161 - C11160 + C11163 - C11162) * C21355 +
              (C11165 - C11164 + C11167 - C11166) * C47110) *
                 C15919 +
             ((C11882 - C11883 + C11884 - C11885) * C21355 +
              (C11886 - C11887 + C11888 - C11889) * C47110) *
                 C47479) *
                C47268) *
               C47488 +
           ((((C10489 - C10488 + C10491 - C10490) * C21355 +
              (C10493 - C10492 + C10495 - C10494) * C47110) *
                 C15919 +
             ((C11680 - C11681 + C11682 - C11683) * C21355 +
              (C11684 - C11685 + C11686 - C11687) * C47110) *
                 C47479) *
                C3234 +
            (((C11883 - C11882 + C11885 - C11884) * C21355 +
              (C11887 - C11886 + C11889 - C11888) * C47110) *
                 C15919 +
             ((C10297 * C1671 - C10299 * C1667 + C47481 * C5897 -
               C10300 * C5894) *
                  C21355 +
              (C10297 * C1676 - C10299 * C1672 + C47481 * C5900 -
               C10300 * C5898) *
                  C47110) *
                 C47479) *
                C47268) *
               C47461) *
              C47146)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C10297 * C124 - C10299 * C117 + C47481 * C478 - C10300 * C468) *
                 C21355 +
             (C10297 * C138 - C10299 * C125 + C47481 * C498 - C10300 * C479) *
                 C47110) *
                C15919 +
            ((C25705 - C25706 + C25707 - C25708) * C21355 +
             (C25709 - C25710 + C25711 - C25712) * C47110) *
                C47479) *
               C3234 +
           (((C10299 * C468 - C10297 * C478 + C10300 * C471 - C47481 * C484) *
                 C21355 +
             (C10299 * C479 - C10297 * C498 + C10300 * C485 - C47481 * C501) *
                 C47110) *
                C15919 +
            ((C26321 - C26322 + C26323 - C26324) * C21355 +
             (C26325 - C26326 + C26327 - C26328) * C47110) *
                C47479) *
               C47268) *
              C47163 * C47506 +
          ((((C10303 - C10302 + C10305 - C10304) * C21355 +
             (C10307 - C10306 + C10309 - C10308) * C47110) *
                C15919 +
            ((C10480 - C10481 + C10482 - C10483) * C21355 +
             (C10484 - C10485 + C10486 - C10487) * C47110) *
                C47479) *
               C3234 +
           (((C10659 - C10658 + C10661 - C10660) * C21355 +
             (C10663 - C10662 + C10665 - C10664) * C47110) *
                C15919 +
            ((C11160 - C11161 + C11162 - C11163) * C21355 +
             (C11164 - C11165 + C11166 - C11167) * C47110) *
                C47479) *
               C47268) *
              C47163 * C47499 +
          ((((C10311 - C10310 + C10313 - C10312) * C21355 +
             (C10315 - C10314 + C10317 - C10316) * C47110) *
                C15919 +
            ((C10496 - C10497 + C10498 - C10499) * C21355 +
             (C10500 - C10501 + C10502 - C10503) * C47110) *
                C47479) *
               C3234 +
           (((C10675 - C10674 + C10677 - C10676) * C21355 +
             (C10679 - C10678 + C10681 - C10680) * C47110) *
                C15919 +
            ((C11168 - C11169 + C11170 - C11171) * C21355 +
             (C11172 - C11173 + C11174 - C11175) * C47110) *
                C47479) *
               C47268) *
              C47163 * C47486 +
          ((((C10319 - C10318 + C10321 - C10320) * C21355 +
             (C10323 - C10322 + C10325 - C10324) * C47110) *
                C15919 +
            ((C10820 - C10821 + C10822 - C10823) * C21355 +
             (C10824 - C10825 + C10826 - C10827) * C47110) *
                C47479) *
               C3234 +
           (((C10959 - C10958 + C10961 - C10960) * C21355 +
             (C10963 - C10962 + C10965 - C10964) * C47110) *
                C15919 +
            ((C10297 * C917 - C10299 * C909 + C47481 * C2139 - C10300 * C2138) *
                 C21355 +
             (C10297 * C924 - C10299 * C918 + C47481 * C2141 - C10300 * C2140) *
                 C47110) *
                C47479) *
               C47268) *
              C47163 * C47465)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C10297 * C124 - C10299 * C117 + C47481 * C478 - C10300 * C468) *
                 C21355 +
             (C10297 * C138 - C10299 * C125 + C47481 * C498 - C10300 * C479) *
                 C47110) *
                C15919 +
            ((C25705 - C25706 + C25707 - C25708) * C21355 +
             (C25709 - C25710 + C25711 - C25712) * C47110) *
                C47479) *
               C47508 +
           (((C10299 * C468 - C10297 * C478 + C10300 * C471 - C47481 * C484) *
                 C21355 +
             (C10299 * C479 - C10297 * C498 + C10300 * C485 - C47481 * C501) *
                 C47110) *
                C15919 +
            ((C26321 - C26322 + C26323 - C26324) * C21355 +
             (C26325 - C26326 + C26327 - C26328) * C47110) *
                C47479) *
               C47505 +
           (((C10297 * C484 - C10299 * C471 + C47481 * C1974 - C10300 * C1968) *
                 C21355 +
             (C10297 * C501 - C10299 * C485 + C47481 * C1986 - C10300 * C1975) *
                 C47110) *
                C15919 +
            ((C26719 - C26720 + C26721 - C26722) * C21355 +
             (C26723 - C26724 + C26725 - C26726) * C47110) *
                C47479) *
               C47496 +
           (((C10299 * C1968 - C10297 * C1974 + C10300 * C1971 -
              C47481 * C1980) *
                 C21355 +
             (C10299 * C1975 - C10297 * C1986 + C10300 * C1981 -
              C47481 * C1989) *
                 C47110) *
                C15919 +
            ((C28037 - C28038 + C28039 - C28040) * C21355 +
             (C28041 - C28042 + C28043 - C28044) * C47110) *
                C47479) *
               C47477) *
              C47163 * C2580 +
          ((((C10303 - C10302 + C10305 - C10304) * C21355 +
             (C10307 - C10306 + C10309 - C10308) * C47110) *
                C15919 +
            ((C10480 - C10481 + C10482 - C10483) * C21355 +
             (C10484 - C10485 + C10486 - C10487) * C47110) *
                C47479) *
               C47508 +
           (((C10659 - C10658 + C10661 - C10660) * C21355 +
             (C10663 - C10662 + C10665 - C10664) * C47110) *
                C15919 +
            ((C11160 - C11161 + C11162 - C11163) * C21355 +
             (C11164 - C11165 + C11166 - C11167) * C47110) *
                C47479) *
               C47505 +
           (((C10667 - C10666 + C10669 - C10668) * C21355 +
             (C10671 - C10670 + C10673 - C10672) * C47110) *
                C15919 +
            ((C12596 - C12597 + C12598 - C12599) * C21355 +
             (C12600 - C12601 + C12602 - C12603) * C47110) *
                C47479) *
               C47496 +
           (((C12735 - C12734 + C12737 - C12736) * C21355 +
             (C12739 - C12738 + C12741 - C12740) * C47110) *
                C15919 +
            ((C10297 * C2367 - C10299 * C2363 + C47481 * C6773 -
              C10300 * C6770) *
                 C21355 +
             (C10297 * C2372 - C10299 * C2368 + C47481 * C6776 -
              C10300 * C6774) *
                 C47110) *
                C47479) *
               C47477) *
              C47163 * C47146)) /
            (p * q * std::sqrt(p + q));
    d2ee[143] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C10297 * C124 - C10299 * C117 + C47481 * C478 - C10300 * C468) *
                 C21355 +
             (C10297 * C138 - C10299 * C125 + C47481 * C498 - C10300 * C479) *
                 C47110) *
                C15919 +
            ((C25705 - C25706 + C25707 - C25708) * C21355 +
             (C25709 - C25710 + C25711 - C25712) * C47110) *
                C47479) *
               C47264 +
           (((C10299 * C468 - C10297 * C478 + C10300 * C471 - C47481 * C484) *
                 C21355 +
             (C10299 * C479 - C10297 * C498 + C10300 * C485 - C47481 * C501) *
                 C47110) *
                C15919 +
            ((C26321 - C26322 + C26323 - C26324) * C21355 +
             (C26325 - C26326 + C26327 - C26328) * C47110) *
                C47479) *
               C47271 +
           (((C10297 * C484 - C10299 * C471 + C47481 * C1974 - C10300 * C1968) *
                 C21355 +
             (C10297 * C501 - C10299 * C485 + C47481 * C1986 - C10300 * C1975) *
                 C47110) *
                C15919 +
            ((C26719 - C26720 + C26721 - C26722) * C21355 +
             (C26723 - C26724 + C26725 - C26726) * C47110) *
                C47479) *
               C3742) *
              C47163 * C47140 +
          ((((C10303 - C10302 + C10305 - C10304) * C21355 +
             (C10307 - C10306 + C10309 - C10308) * C47110) *
                C15919 +
            ((C10480 - C10481 + C10482 - C10483) * C21355 +
             (C10484 - C10485 + C10486 - C10487) * C47110) *
                C47479) *
               C47264 +
           (((C10659 - C10658 + C10661 - C10660) * C21355 +
             (C10663 - C10662 + C10665 - C10664) * C47110) *
                C15919 +
            ((C11160 - C11161 + C11162 - C11163) * C21355 +
             (C11164 - C11165 + C11166 - C11167) * C47110) *
                C47479) *
               C47271 +
           (((C10667 - C10666 + C10669 - C10668) * C21355 +
             (C10671 - C10670 + C10673 - C10672) * C47110) *
                C15919 +
            ((C12596 - C12597 + C12598 - C12599) * C21355 +
             (C12600 - C12601 + C12602 - C12603) * C47110) *
                C47479) *
               C3742) *
              C47163 * C47149 +
          ((((C10311 - C10310 + C10313 - C10312) * C21355 +
             (C10315 - C10314 + C10317 - C10316) * C47110) *
                C15919 +
            ((C10496 - C10497 + C10498 - C10499) * C21355 +
             (C10500 - C10501 + C10502 - C10503) * C47110) *
                C47479) *
               C47264 +
           (((C10675 - C10674 + C10677 - C10676) * C21355 +
             (C10679 - C10678 + C10681 - C10680) * C47110) *
                C15919 +
            ((C11168 - C11169 + C11170 - C11171) * C21355 +
             (C11172 - C11173 + C11174 - C11175) * C47110) *
                C47479) *
               C47271 +
           (((C10683 - C10682 + C10685 - C10684) * C21355 +
             (C10687 - C10686 + C10689 - C10688) * C47110) *
                C15919 +
            ((C10297 * C1271 - C10299 * C1260 + C47481 * C2369 -
              C10300 * C2364) *
                 C21355 +
             (C10297 * C1287 - C10299 * C1272 + C47481 * C2373 -
              C10300 * C2370) *
                 C47110) *
                C47479) *
               C3742) *
              C47163 * C2843)) /
        (p * q * std::sqrt(p + q));
    d2ee[144] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C10297 * C124 - C10299 * C117 + C47481 * C478 - C10300 * C468) *
                 C21355 +
             (C10297 * C138 - C10299 * C125 + C47481 * C498 - C10300 * C479) *
                 C47110) *
                C15919 +
            ((C25705 - C25706 + C25707 - C25708) * C21355 +
             (C25709 - C25710 + C25711 - C25712) * C47110) *
                C47479) *
               C3234 +
           (((C10299 * C468 - C10297 * C478 + C10300 * C471 - C47481 * C484) *
                 C21355 +
             (C10299 * C479 - C10297 * C498 + C10300 * C485 - C47481 * C501) *
                 C47110) *
                C15919 +
            ((C26321 - C26322 + C26323 - C26324) * C21355 +
             (C26325 - C26326 + C26327 - C26328) * C47110) *
                C47479) *
               C47268) *
              C47163 * C47506 +
          ((((C10303 - C10302 + C10305 - C10304) * C21355 +
             (C10307 - C10306 + C10309 - C10308) * C47110) *
                C15919 +
            ((C10480 - C10481 + C10482 - C10483) * C21355 +
             (C10484 - C10485 + C10486 - C10487) * C47110) *
                C47479) *
               C3234 +
           (((C10659 - C10658 + C10661 - C10660) * C21355 +
             (C10663 - C10662 + C10665 - C10664) * C47110) *
                C15919 +
            ((C11160 - C11161 + C11162 - C11163) * C21355 +
             (C11164 - C11165 + C11166 - C11167) * C47110) *
                C47479) *
               C47268) *
              C47163 * C47499 +
          ((((C10311 - C10310 + C10313 - C10312) * C21355 +
             (C10315 - C10314 + C10317 - C10316) * C47110) *
                C15919 +
            ((C10496 - C10497 + C10498 - C10499) * C21355 +
             (C10500 - C10501 + C10502 - C10503) * C47110) *
                C47479) *
               C3234 +
           (((C10675 - C10674 + C10677 - C10676) * C21355 +
             (C10679 - C10678 + C10681 - C10680) * C47110) *
                C15919 +
            ((C11168 - C11169 + C11170 - C11171) * C21355 +
             (C11172 - C11173 + C11174 - C11175) * C47110) *
                C47479) *
               C47268) *
              C47163 * C47486 +
          ((((C10319 - C10318 + C10321 - C10320) * C21355 +
             (C10323 - C10322 + C10325 - C10324) * C47110) *
                C15919 +
            ((C10820 - C10821 + C10822 - C10823) * C21355 +
             (C10824 - C10825 + C10826 - C10827) * C47110) *
                C47479) *
               C3234 +
           (((C10959 - C10958 + C10961 - C10960) * C21355 +
             (C10963 - C10962 + C10965 - C10964) * C47110) *
                C15919 +
            ((C10297 * C917 - C10299 * C909 + C47481 * C2139 - C10300 * C2138) *
                 C21355 +
             (C10297 * C924 - C10299 * C918 + C47481 * C2141 - C10300 * C2140) *
                 C47110) *
                C47479) *
               C47268) *
              C47163 * C47465)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C10297 * C124 - C10299 * C117 + C47481 * C478 - C10300 * C468) *
                  C21355 +
              (C10297 * C138 - C10299 * C125 + C47481 * C498 - C10300 * C479) *
                  C47110) *
                 C15919 +
             ((C25705 - C25706 + C25707 - C25708) * C21355 +
              (C25709 - C25710 + C25711 - C25712) * C47110) *
                 C47479) *
                C3234 +
            (((C10299 * C468 - C10297 * C478 + C10300 * C471 - C47481 * C484) *
                  C21355 +
              (C10299 * C479 - C10297 * C498 + C10300 * C485 - C47481 * C501) *
                  C47110) *
                 C15919 +
             ((C26321 - C26322 + C26323 - C26324) * C21355 +
              (C26325 - C26326 + C26327 - C26328) * C47110) *
                 C47479) *
                C47268) *
               C47500 +
           ((((C25706 - C25705 + C25708 - C25707) * C21355 +
              (C25710 - C25709 + C25712 - C25711) * C47110) *
                 C15919 +
             ((C25713 - C25714 + C25715 - C25716) * C21355 +
              (C25717 - C25718 + C25719 - C25720) * C47110) *
                 C47479) *
                C3234 +
            (((C26322 - C26321 + C26324 - C26323) * C21355 +
              (C26326 - C26325 + C26328 - C26327) * C47110) *
                 C15919 +
             ((C26727 - C26728 + C26729 - C26730) * C21355 +
              (C26731 - C26732 + C26733 - C26734) * C47110) *
                 C47479) *
                C47268) *
               C47488 +
           ((((C25714 - C25713 + C25716 - C25715) * C21355 +
              (C25718 - C25717 + C25720 - C25719) * C47110) *
                 C15919 +
             ((C26557 - C26558 + C26559 - C26560) * C21355 +
              (C26561 - C26562 + C26563 - C26564) * C47110) *
                 C47479) *
                C3234 +
            (((C26728 - C26727 + C26730 - C26729) * C21355 +
              (C26732 - C26731 + C26734 - C26733) * C47110) *
                 C15919 +
             ((C27197 - C27198 + C27199 - C27200) * C21355 +
              (C27201 - C27202 + C27203 - C27204) * C47110) *
                 C47479) *
                C47268) *
               C47461) *
              C2580 +
          (((((C10303 - C10302 + C10305 - C10304) * C21355 +
              (C10307 - C10306 + C10309 - C10308) * C47110) *
                 C15919 +
             ((C10480 - C10481 + C10482 - C10483) * C21355 +
              (C10484 - C10485 + C10486 - C10487) * C47110) *
                 C47479) *
                C3234 +
            (((C10659 - C10658 + C10661 - C10660) * C21355 +
              (C10663 - C10662 + C10665 - C10664) * C47110) *
                 C15919 +
             ((C11160 - C11161 + C11162 - C11163) * C21355 +
              (C11164 - C11165 + C11166 - C11167) * C47110) *
                 C47479) *
                C47268) *
               C47500 +
           ((((C10481 - C10480 + C10483 - C10482) * C21355 +
              (C10485 - C10484 + C10487 - C10486) * C47110) *
                 C15919 +
             ((C10488 - C10489 + C10490 - C10491) * C21355 +
              (C10492 - C10493 + C10494 - C10495) * C47110) *
                 C47479) *
                C3234 +
            (((C11161 - C11160 + C11163 - C11162) * C21355 +
              (C11165 - C11164 + C11167 - C11166) * C47110) *
                 C15919 +
             ((C11882 - C11883 + C11884 - C11885) * C21355 +
              (C11886 - C11887 + C11888 - C11889) * C47110) *
                 C47479) *
                C47268) *
               C47488 +
           ((((C10489 - C10488 + C10491 - C10490) * C21355 +
              (C10493 - C10492 + C10495 - C10494) * C47110) *
                 C15919 +
             ((C11680 - C11681 + C11682 - C11683) * C21355 +
              (C11684 - C11685 + C11686 - C11687) * C47110) *
                 C47479) *
                C3234 +
            (((C11883 - C11882 + C11885 - C11884) * C21355 +
              (C11887 - C11886 + C11889 - C11888) * C47110) *
                 C15919 +
             ((C10297 * C1671 - C10299 * C1667 + C47481 * C5897 -
               C10300 * C5894) *
                  C21355 +
              (C10297 * C1676 - C10299 * C1672 + C47481 * C5900 -
               C10300 * C5898) *
                  C47110) *
                 C47479) *
                C47268) *
               C47461) *
              C47146)) /
            (p * q * std::sqrt(p + q));
    d2ee[145] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C10297 * C124 - C10299 * C117 + C47481 * C478 - C10300 * C468) *
                 C21355 +
             (C10297 * C138 - C10299 * C125 + C47481 * C498 - C10300 * C479) *
                 C47110) *
                C15919 +
            ((C25705 - C25706 + C25707 - C25708) * C21355 +
             (C25709 - C25710 + C25711 - C25712) * C47110) *
                C47479) *
               C47181 * C47429 +
           (((C25706 - C25705 + C25708 - C25707) * C21355 +
             (C25710 - C25709 + C25712 - C25711) * C47110) *
                C15919 +
            ((C25713 - C25714 + C25715 - C25716) * C21355 +
             (C25717 - C25718 + C25719 - C25720) * C47110) *
                C47479) *
               C47181 * C47226) *
              C636 +
          ((((C10303 - C10302 + C10305 - C10304) * C21355 +
             (C10307 - C10306 + C10309 - C10308) * C47110) *
                C15919 +
            ((C10480 - C10481 + C10482 - C10483) * C21355 +
             (C10484 - C10485 + C10486 - C10487) * C47110) *
                C47479) *
               C47181 * C47429 +
           (((C10481 - C10480 + C10483 - C10482) * C21355 +
             (C10485 - C10484 + C10487 - C10486) * C47110) *
                C15919 +
            ((C10488 - C10489 + C10490 - C10491) * C21355 +
             (C10492 - C10493 + C10494 - C10495) * C47110) *
                C47479) *
               C47181 * C47226) *
              C637 +
          ((((C10311 - C10310 + C10313 - C10312) * C21355 +
             (C10315 - C10314 + C10317 - C10316) * C47110) *
                C15919 +
            ((C10496 - C10497 + C10498 - C10499) * C21355 +
             (C10500 - C10501 + C10502 - C10503) * C47110) *
                C47479) *
               C47181 * C47429 +
           (((C10497 - C10496 + C10499 - C10498) * C21355 +
             (C10501 - C10500 + C10503 - C10502) * C47110) *
                C15919 +
            ((C10504 - C10505 + C10506 - C10507) * C21355 +
             (C10508 - C10509 + C10510 - C10511) * C47110) *
                C47479) *
               C47181 * C47226) *
              C638 +
          ((((C10319 - C10318 + C10321 - C10320) * C21355 +
             (C10323 - C10322 + C10325 - C10324) * C47110) *
                C15919 +
            ((C10820 - C10821 + C10822 - C10823) * C21355 +
             (C10824 - C10825 + C10826 - C10827) * C47110) *
                C47479) *
               C47181 * C47429 +
           (((C10821 - C10820 + C10823 - C10822) * C21355 +
             (C10825 - C10824 + C10827 - C10826) * C47110) *
                C15919 +
            ((C10297 * C311 - C10299 * C294 + C47481 * C1557 - C10300 * C1556) *
                 C21355 +
             (C10297 * C324 - C10299 * C312 + C47481 * C1559 - C10300 * C1558) *
                 C47110) *
                C47479) *
               C47181 * C47226) *
              C47465)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C10297 * C124 - C10299 * C117 + C47481 * C478 - C10300 * C468) *
                 C21355 +
             (C10297 * C138 - C10299 * C125 + C47481 * C498 - C10300 * C479) *
                 C47110) *
                C15919 +
            ((C25705 - C25706 + C25707 - C25708) * C21355 +
             (C25709 - C25710 + C25711 - C25712) * C47110) *
                C47479) *
               C47181 * C1392 +
           (((C25706 - C25705 + C25708 - C25707) * C21355 +
             (C25710 - C25709 + C25712 - C25711) * C47110) *
                C15919 +
            ((C25713 - C25714 + C25715 - C25716) * C21355 +
             (C25717 - C25718 + C25719 - C25720) * C47110) *
                C47479) *
               C47181 * C1393 +
           (((C25714 - C25713 + C25716 - C25715) * C21355 +
             (C25718 - C25717 + C25720 - C25719) * C47110) *
                C15919 +
            ((C26557 - C26558 + C26559 - C26560) * C21355 +
             (C26561 - C26562 + C26563 - C26564) * C47110) *
                C47479) *
               C47181 * C1394 +
           (((C26558 - C26557 + C26560 - C26559) * C21355 +
             (C26562 - C26561 + C26564 - C26563) * C47110) *
                C15919 +
            ((C26565 - C26566 + C26567 - C26568) * C21355 +
             (C26569 - C26570 + C26571 - C26572) * C47110) *
                C47479) *
               C47181 * C47471) *
              C47415 +
          ((((C10303 - C10302 + C10305 - C10304) * C21355 +
             (C10307 - C10306 + C10309 - C10308) * C47110) *
                C15919 +
            ((C10480 - C10481 + C10482 - C10483) * C21355 +
             (C10484 - C10485 + C10486 - C10487) * C47110) *
                C47479) *
               C47181 * C1392 +
           (((C10481 - C10480 + C10483 - C10482) * C21355 +
             (C10485 - C10484 + C10487 - C10486) * C47110) *
                C15919 +
            ((C10488 - C10489 + C10490 - C10491) * C21355 +
             (C10492 - C10493 + C10494 - C10495) * C47110) *
                C47479) *
               C47181 * C1393 +
           (((C10489 - C10488 + C10491 - C10490) * C21355 +
             (C10493 - C10492 + C10495 - C10494) * C47110) *
                C15919 +
            ((C11680 - C11681 + C11682 - C11683) * C21355 +
             (C11684 - C11685 + C11686 - C11687) * C47110) *
                C47479) *
               C47181 * C1394 +
           (((C11681 - C11680 + C11683 - C11682) * C21355 +
             (C11685 - C11684 + C11687 - C11686) * C47110) *
                C15919 +
            ((C10297 * C1138 - C10299 * C1128 + C47481 * C6387 -
              C10300 * C6384) *
                 C21355 +
             (C10297 * C1146 - C10299 * C1139 + C47481 * C6390 -
              C10300 * C6388) *
                 C47110) *
                C47479) *
               C47181 * C47471) *
              C47146)) /
            (p * q * std::sqrt(p + q));
    d2ee[146] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C10297 * C124 - C10299 * C117 + C47481 * C478 - C10300 * C468) *
                  C21355 +
              (C10297 * C138 - C10299 * C125 + C47481 * C498 - C10300 * C479) *
                  C47110) *
                 C15919 +
             ((C25705 - C25706 + C25707 - C25708) * C21355 +
              (C25709 - C25710 + C25711 - C25712) * C47110) *
                 C47479) *
                C47430 +
            (((C10299 * C468 - C10297 * C478 + C10300 * C471 - C47481 * C484) *
                  C21355 +
              (C10299 * C479 - C10297 * C498 + C10300 * C485 - C47481 * C501) *
                  C47110) *
                 C15919 +
             ((C26321 - C26322 + C26323 - C26324) * C21355 +
              (C26325 - C26326 + C26327 - C26328) * C47110) *
                 C47479) *
                C47268) *
               C47429 +
           ((((C25706 - C25705 + C25708 - C25707) * C21355 +
              (C25710 - C25709 + C25712 - C25711) * C47110) *
                 C15919 +
             ((C25713 - C25714 + C25715 - C25716) * C21355 +
              (C25717 - C25718 + C25719 - C25720) * C47110) *
                 C47479) *
                C47430 +
            (((C26322 - C26321 + C26324 - C26323) * C21355 +
              (C26326 - C26325 + C26328 - C26327) * C47110) *
                 C15919 +
             ((C10297 * C1273 - C10299 * C1261 + C47481 * C1279 -
               C10300 * C1264) *
                  C21355 +
              (C10297 * C1288 - C10299 * C1274 + C47481 * C1291 -
               C10300 * C1280) *
                  C47110) *
                 C47479) *
                C47268) *
               C47226) *
              C284 +
          (((((C10303 - C10302 + C10305 - C10304) * C21355 +
              (C10307 - C10306 + C10309 - C10308) * C47110) *
                 C15919 +
             ((C10480 - C10481 + C10482 - C10483) * C21355 +
              (C10484 - C10485 + C10486 - C10487) * C47110) *
                 C47479) *
                C47430 +
            (((C10659 - C10658 + C10661 - C10660) * C21355 +
              (C10663 - C10662 + C10665 - C10664) * C47110) *
                 C15919 +
             ((C11160 - C11161 + C11162 - C11163) * C21355 +
              (C11164 - C11165 + C11166 - C11167) * C47110) *
                 C47479) *
                C47268) *
               C47429 +
           ((((C10481 - C10480 + C10483 - C10482) * C21355 +
              (C10485 - C10484 + C10487 - C10486) * C47110) *
                 C15919 +
             ((C10488 - C10489 + C10490 - C10491) * C21355 +
              (C10492 - C10493 + C10494 - C10495) * C47110) *
                 C47479) *
                C47430 +
            (((C11161 - C11160 + C11163 - C11162) * C21355 +
              (C11165 - C11164 + C11167 - C11166) * C47110) *
                 C15919 +
             ((C11882 - C11883 + C11884 - C11885) * C21355 +
              (C11886 - C11887 + C11888 - C11889) * C47110) *
                 C47479) *
                C47268) *
               C47226) *
              C285 +
          (((((C10311 - C10310 + C10313 - C10312) * C21355 +
              (C10315 - C10314 + C10317 - C10316) * C47110) *
                 C15919 +
             ((C10496 - C10497 + C10498 - C10499) * C21355 +
              (C10500 - C10501 + C10502 - C10503) * C47110) *
                 C47479) *
                C47430 +
            (((C10675 - C10674 + C10677 - C10676) * C21355 +
              (C10679 - C10678 + C10681 - C10680) * C47110) *
                 C15919 +
             ((C11168 - C11169 + C11170 - C11171) * C21355 +
              (C11172 - C11173 + C11174 - C11175) * C47110) *
                 C47479) *
                C47268) *
               C47429 +
           ((((C10497 - C10496 + C10499 - C10498) * C21355 +
              (C10501 - C10500 + C10503 - C10502) * C47110) *
                 C15919 +
             ((C10504 - C10505 + C10506 - C10507) * C21355 +
              (C10508 - C10509 + C10510 - C10511) * C47110) *
                 C47479) *
                C47430 +
            (((C11169 - C11168 + C11171 - C11170) * C21355 +
              (C11173 - C11172 + C11175 - C11174) * C47110) *
                 C15919 +
             ((C10297 * C1277 - C10299 * C1263 + C47481 * C1283 -
               C10300 * C1266) *
                  C21355 +
              (C10297 * C1290 - C10299 * C1278 + C47481 * C1293 -
               C10300 * C1284) *
                  C47110) *
                 C47479) *
                C47268) *
               C47226) *
              C47455)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C10297 * C124 - C10299 * C117 + C47481 * C478 - C10300 * C468) *
                 C21355 +
             (C10297 * C138 - C10299 * C125 + C47481 * C498 - C10300 * C479) *
                 C47110) *
                C15919 +
            ((C25705 - C25706 + C25707 - C25708) * C21355 +
             (C25709 - C25710 + C25711 - C25712) * C47110) *
                C47479) *
               C47430 +
           (((C10299 * C468 - C10297 * C478 + C10300 * C471 - C47481 * C484) *
                 C21355 +
             (C10299 * C479 - C10297 * C498 + C10300 * C485 - C47481 * C501) *
                 C47110) *
                C15919 +
            ((C26321 - C26322 + C26323 - C26324) * C21355 +
             (C26325 - C26326 + C26327 - C26328) * C47110) *
                C47479) *
               C47268) *
              C1392 +
          ((((C25706 - C25705 + C25708 - C25707) * C21355 +
             (C25710 - C25709 + C25712 - C25711) * C47110) *
                C15919 +
            ((C25713 - C25714 + C25715 - C25716) * C21355 +
             (C25717 - C25718 + C25719 - C25720) * C47110) *
                C47479) *
               C47430 +
           (((C26322 - C26321 + C26324 - C26323) * C21355 +
             (C26326 - C26325 + C26328 - C26327) * C47110) *
                C15919 +
            ((C26727 - C26728 + C26729 - C26730) * C21355 +
             (C26731 - C26732 + C26733 - C26734) * C47110) *
                C47479) *
               C47268) *
              C1393 +
          ((((C25714 - C25713 + C25716 - C25715) * C21355 +
             (C25718 - C25717 + C25720 - C25719) * C47110) *
                C15919 +
            ((C26557 - C26558 + C26559 - C26560) * C21355 +
             (C26561 - C26562 + C26563 - C26564) * C47110) *
                C47479) *
               C47430 +
           (((C26728 - C26727 + C26730 - C26729) * C21355 +
             (C26732 - C26731 + C26734 - C26733) * C47110) *
                C15919 +
            ((C27197 - C27198 + C27199 - C27200) * C21355 +
             (C27201 - C27202 + C27203 - C27204) * C47110) *
                C47479) *
               C47268) *
              C1394 +
          ((((C26558 - C26557 + C26560 - C26559) * C21355 +
             (C26562 - C26561 + C26564 - C26563) * C47110) *
                C15919 +
            ((C26565 - C26566 + C26567 - C26568) * C21355 +
             (C26569 - C26570 + C26571 - C26572) * C47110) *
                C47479) *
               C47430 +
           (((C27198 - C27197 + C27200 - C27199) * C21355 +
             (C27202 - C27201 + C27204 - C27203) * C47110) *
                C15919 +
            ((C10297 * C6385 - C10299 * C6383 + C47481 * C22230 -
              C10300 * C22229) *
                 C21355 +
             (C10297 * C6389 - C10299 * C6386 + C47481 * C22232 -
              C10300 * C22231) *
                 C47110) *
                C47479) *
               C47268) *
              C47471) *
         C47135) /
            (p * q * std::sqrt(p + q));
    d2ee[147] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C10297 * C124 - C10299 * C117 + C47481 * C478 - C10300 * C468) *
                 C21355 +
             (C10297 * C138 - C10299 * C125 + C47481 * C498 - C10300 * C479) *
                 C47110) *
                C15919 +
            ((C25705 - C25706 + C25707 - C25708) * C21355 +
             (C25709 - C25710 + C25711 - C25712) * C47110) *
                C47479) *
               C47181 * C47500 +
           (((C25706 - C25705 + C25708 - C25707) * C21355 +
             (C25710 - C25709 + C25712 - C25711) * C47110) *
                C15919 +
            ((C25713 - C25714 + C25715 - C25716) * C21355 +
             (C25717 - C25718 + C25719 - C25720) * C47110) *
                C47479) *
               C47181 * C47488 +
           (((C25714 - C25713 + C25716 - C25715) * C21355 +
             (C25718 - C25717 + C25720 - C25719) * C47110) *
                C15919 +
            ((C10297 * C1130 - C10299 * C1124 + C47481 * C1669 -
              C10300 * C1666) *
                 C21355 +
             (C10297 * C1142 - C10299 * C1131 + C47481 * C1675 -
              C10300 * C1670) *
                 C47110) *
                C47479) *
               C47181 * C47461) *
              C284 +
          ((((C10303 - C10302 + C10305 - C10304) * C21355 +
             (C10307 - C10306 + C10309 - C10308) * C47110) *
                C15919 +
            ((C10480 - C10481 + C10482 - C10483) * C21355 +
             (C10484 - C10485 + C10486 - C10487) * C47110) *
                C47479) *
               C47181 * C47500 +
           (((C10481 - C10480 + C10483 - C10482) * C21355 +
             (C10485 - C10484 + C10487 - C10486) * C47110) *
                C15919 +
            ((C10488 - C10489 + C10490 - C10491) * C21355 +
             (C10492 - C10493 + C10494 - C10495) * C47110) *
                C47479) *
               C47181 * C47488 +
           (((C10489 - C10488 + C10491 - C10490) * C21355 +
             (C10493 - C10492 + C10495 - C10494) * C47110) *
                C15919 +
            ((C11680 - C11681 + C11682 - C11683) * C21355 +
             (C11684 - C11685 + C11686 - C11687) * C47110) *
                C47479) *
               C47181 * C47461) *
              C285 +
          ((((C10311 - C10310 + C10313 - C10312) * C21355 +
             (C10315 - C10314 + C10317 - C10316) * C47110) *
                C15919 +
            ((C10496 - C10497 + C10498 - C10499) * C21355 +
             (C10500 - C10501 + C10502 - C10503) * C47110) *
                C47479) *
               C47181 * C47500 +
           (((C10497 - C10496 + C10499 - C10498) * C21355 +
             (C10501 - C10500 + C10503 - C10502) * C47110) *
                C15919 +
            ((C10504 - C10505 + C10506 - C10507) * C21355 +
             (C10508 - C10509 + C10510 - C10511) * C47110) *
                C47479) *
               C47181 * C47488 +
           (((C10505 - C10504 + C10507 - C10506) * C21355 +
             (C10509 - C10508 + C10511 - C10510) * C47110) *
                C15919 +
            ((C10297 * C1134 - C10299 * C1126 + C47481 * C1673 -
              C10300 * C1668) *
                 C21355 +
             (C10297 * C1144 - C10299 * C1135 + C47481 * C1677 -
              C10300 * C1674) *
                 C47110) *
                C47479) *
               C47181 * C47461) *
              C47455)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C10297 * C124 - C10299 * C117 + C47481 * C478 - C10300 * C468) *
                C21355 +
            (C10297 * C138 - C10299 * C125 + C47481 * C498 - C10300 * C479) *
                C47110) *
               C15919 +
           ((C10297 * C297 - C10299 * C287 + C47481 * C911 - C10300 * C906) *
                C21355 +
            (C10297 * C317 - C10299 * C298 + C47481 * C921 - C10300 * C912) *
                C47110) *
               C47479) *
              C47181 * C47163 * C108 +
          (((C10303 - C10302 + C10305 - C10304) * C21355 +
            (C10307 - C10306 + C10309 - C10308) * C47110) *
               C15919 +
           ((C10480 - C10481 + C10482 - C10483) * C21355 +
            (C10484 - C10485 + C10486 - C10487) * C47110) *
               C47479) *
              C47181 * C47163 * C109 +
          (((C10311 - C10310 + C10313 - C10312) * C21355 +
            (C10315 - C10314 + C10317 - C10316) * C47110) *
               C15919 +
           ((C10496 - C10497 + C10498 - C10499) * C21355 +
            (C10500 - C10501 + C10502 - C10503) * C47110) *
               C47479) *
              C47181 * C47163 * C110 +
          (((C10319 - C10318 + C10321 - C10320) * C21355 +
            (C10323 - C10322 + C10325 - C10324) * C47110) *
               C15919 +
           ((C10820 - C10821 + C10822 - C10823) * C21355 +
            (C10824 - C10825 + C10826 - C10827) * C47110) *
               C47479) *
              C47181 * C47163 * C111 +
          (((C10327 - C10326 + C10329 - C10328) * C21355 +
            (C10331 - C10330 + C10333 - C10332) * C47110) *
               C15919 +
           ((C10297 * C313 - C10299 * C295 + C47481 * C919 - C10300 * C910) *
                C21355 +
            (C10297 * C325 - C10299 * C314 + C47481 * C925 - C10300 * C920) *
                C47110) *
               C47479) *
              C47181 * C47163 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C10297 * C124 - C10299 * C117 + C47481 * C478 - C10300 * C468) *
                 C21355 +
             (C10297 * C138 - C10299 * C125 + C47481 * C498 - C10300 * C479) *
                 C47110) *
                C15919 +
            ((C25705 - C25706 + C25707 - C25708) * C21355 +
             (C25709 - C25710 + C25711 - C25712) * C47110) *
                C47479) *
               C47501 +
           (((C10299 * C468 - C10297 * C478 + C10300 * C471 - C47481 * C484) *
                 C21355 +
             (C10299 * C479 - C10297 * C498 + C10300 * C485 - C47481 * C501) *
                 C47110) *
                C15919 +
            ((C10299 * C906 - C10297 * C911 + C10300 * C1258 - C47481 * C1267) *
                 C21355 +
             (C10299 * C912 - C10297 * C921 + C10300 * C1268 - C47481 * C1285) *
                 C47110) *
                C47479) *
               C47490 +
           (((C10297 * C484 - C10299 * C471 + C47481 * C1974 - C10300 * C1968) *
                 C21355 +
             (C10297 * C501 - C10299 * C485 + C47481 * C1986 - C10300 * C1975) *
                 C47110) *
                C15919 +
            ((C10297 * C1267 - C10299 * C1258 + C47481 * C2365 -
              C10300 * C2362) *
                 C21355 +
             (C10297 * C1285 - C10299 * C1268 + C47481 * C2371 -
              C10300 * C2366) *
                 C47110) *
                C47479) *
               C47464) *
              C47163 * C284 +
          ((((C10303 - C10302 + C10305 - C10304) * C21355 +
             (C10307 - C10306 + C10309 - C10308) * C47110) *
                C15919 +
            ((C10480 - C10481 + C10482 - C10483) * C21355 +
             (C10484 - C10485 + C10486 - C10487) * C47110) *
                C47479) *
               C47501 +
           (((C10659 - C10658 + C10661 - C10660) * C21355 +
             (C10663 - C10662 + C10665 - C10664) * C47110) *
                C15919 +
            ((C11160 - C11161 + C11162 - C11163) * C21355 +
             (C11164 - C11165 + C11166 - C11167) * C47110) *
                C47479) *
               C47490 +
           (((C10667 - C10666 + C10669 - C10668) * C21355 +
             (C10671 - C10670 + C10673 - C10672) * C47110) *
                C15919 +
            ((C12596 - C12597 + C12598 - C12599) * C21355 +
             (C12600 - C12601 + C12602 - C12603) * C47110) *
                C47479) *
               C47464) *
              C47163 * C285 +
          ((((C10311 - C10310 + C10313 - C10312) * C21355 +
             (C10315 - C10314 + C10317 - C10316) * C47110) *
                C15919 +
            ((C10496 - C10497 + C10498 - C10499) * C21355 +
             (C10500 - C10501 + C10502 - C10503) * C47110) *
                C47479) *
               C47501 +
           (((C10675 - C10674 + C10677 - C10676) * C21355 +
             (C10679 - C10678 + C10681 - C10680) * C47110) *
                C15919 +
            ((C11168 - C11169 + C11170 - C11171) * C21355 +
             (C11172 - C11173 + C11174 - C11175) * C47110) *
                C47479) *
               C47490 +
           (((C10683 - C10682 + C10685 - C10684) * C21355 +
             (C10687 - C10686 + C10689 - C10688) * C47110) *
                C15919 +
            ((C10297 * C1271 - C10299 * C1260 + C47481 * C2369 -
              C10300 * C2364) *
                 C21355 +
             (C10297 * C1287 - C10299 * C1272 + C47481 * C2373 -
              C10300 * C2370) *
                 C47110) *
                C47479) *
               C47464) *
              C47163 * C47455)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C10297 * C124 - C10299 * C117 + C47481 * C478 - C10300 * C468) *
                 C21355 +
             (C10297 * C138 - C10299 * C125 + C47481 * C498 - C10300 * C479) *
                 C47110) *
                C15919 +
            ((C25705 - C25706 + C25707 - C25708) * C21355 +
             (C25709 - C25710 + C25711 - C25712) * C47110) *
                C47479) *
               C47181 * C1050 +
           (((C25706 - C25705 + C25708 - C25707) * C21355 +
             (C25710 - C25709 + C25712 - C25711) * C47110) *
                C15919 +
            ((C25713 - C25714 + C25715 - C25716) * C21355 +
             (C25717 - C25718 + C25719 - C25720) * C47110) *
                C47479) *
               C47181 * C1051 +
           (((C25714 - C25713 + C25716 - C25715) * C21355 +
             (C25718 - C25717 + C25720 - C25719) * C47110) *
                C15919 +
            ((C10297 * C1130 - C10299 * C1124 + C47481 * C1669 -
              C10300 * C1666) *
                 C21355 +
             (C10297 * C1142 - C10299 * C1131 + C47481 * C1675 -
              C10300 * C1670) *
                 C47110) *
                C47479) *
               C47181 * C47461) *
              C47497 +
          ((((C10303 - C10302 + C10305 - C10304) * C21355 +
             (C10307 - C10306 + C10309 - C10308) * C47110) *
                C15919 +
            ((C10480 - C10481 + C10482 - C10483) * C21355 +
             (C10484 - C10485 + C10486 - C10487) * C47110) *
                C47479) *
               C47181 * C1050 +
           (((C10481 - C10480 + C10483 - C10482) * C21355 +
             (C10485 - C10484 + C10487 - C10486) * C47110) *
                C15919 +
            ((C10488 - C10489 + C10490 - C10491) * C21355 +
             (C10492 - C10493 + C10494 - C10495) * C47110) *
                C47479) *
               C47181 * C1051 +
           (((C10489 - C10488 + C10491 - C10490) * C21355 +
             (C10493 - C10492 + C10495 - C10494) * C47110) *
                C15919 +
            ((C11680 - C11681 + C11682 - C11683) * C21355 +
             (C11684 - C11685 + C11686 - C11687) * C47110) *
                C47479) *
               C47181 * C47461) *
              C47484 +
          ((((C10311 - C10310 + C10313 - C10312) * C21355 +
             (C10315 - C10314 + C10317 - C10316) * C47110) *
                C15919 +
            ((C10496 - C10497 + C10498 - C10499) * C21355 +
             (C10500 - C10501 + C10502 - C10503) * C47110) *
                C47479) *
               C47181 * C1050 +
           (((C10497 - C10496 + C10499 - C10498) * C21355 +
             (C10501 - C10500 + C10503 - C10502) * C47110) *
                C15919 +
            ((C10504 - C10505 + C10506 - C10507) * C21355 +
             (C10508 - C10509 + C10510 - C10511) * C47110) *
                C47479) *
               C47181 * C1051 +
           (((C10505 - C10504 + C10507 - C10506) * C21355 +
             (C10509 - C10508 + C10511 - C10510) * C47110) *
                C15919 +
            ((C10297 * C1134 - C10299 * C1126 + C47481 * C1673 -
              C10300 * C1668) *
                 C21355 +
             (C10297 * C1144 - C10299 * C1135 + C47481 * C1677 -
              C10300 * C1674) *
                 C47110) *
                C47479) *
               C47181 * C47461) *
              C47455)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C10297 * C124 - C10299 * C117 + C47481 * C478 - C10300 * C468) *
                C21355 +
            (C10297 * C138 - C10299 * C125 + C47481 * C498 - C10300 * C479) *
                C47110) *
               C15919 +
           ((C25705 - C25706 + C25707 - C25708) * C21355 +
            (C25709 - C25710 + C25711 - C25712) * C47110) *
               C47479) *
              C47181 * C1118 +
          (((C25706 - C25705 + C25708 - C25707) * C21355 +
            (C25710 - C25709 + C25712 - C25711) * C47110) *
               C15919 +
           ((C25713 - C25714 + C25715 - C25716) * C21355 +
            (C25717 - C25718 + C25719 - C25720) * C47110) *
               C47479) *
              C47181 * C1119 +
          (((C25714 - C25713 + C25716 - C25715) * C21355 +
            (C25718 - C25717 + C25720 - C25719) * C47110) *
               C15919 +
           ((C26557 - C26558 + C26559 - C26560) * C21355 +
            (C26561 - C26562 + C26563 - C26564) * C47110) *
               C47479) *
              C47181 * C1120 +
          (((C26558 - C26557 + C26560 - C26559) * C21355 +
            (C26562 - C26561 + C26564 - C26563) * C47110) *
               C15919 +
           ((C26565 - C26566 + C26567 - C26568) * C21355 +
            (C26569 - C26570 + C26571 - C26572) * C47110) *
               C47479) *
              C47181 * C1121 +
          (((C26566 - C26565 + C26568 - C26567) * C21355 +
            (C26570 - C26569 + C26572 - C26571) * C47110) *
               C15919 +
           ((C10297 * C5729 - C10299 * C5727 + C47481 * C22596 -
             C10300 * C22595) *
                C21355 +
            (C10297 * C5733 - C10299 * C5730 + C47481 * C22598 -
             C10300 * C22597) *
                C47110) *
               C47479) *
              C47181 * C1122) *
         C47135) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C10297 * C124 - C10299 * C117 + C47481 * C478 - C10300 * C468) *
                 C21355 +
             (C10297 * C138 - C10299 * C125 + C47481 * C498 - C10300 * C479) *
                 C47110) *
                C15919 +
            ((C25705 - C25706 + C25707 - C25708) * C21355 +
             (C25709 - C25710 + C25711 - C25712) * C47110) *
                C47479) *
               C47501 +
           (((C10299 * C468 - C10297 * C478 + C10300 * C471 - C47481 * C484) *
                 C21355 +
             (C10299 * C479 - C10297 * C498 + C10300 * C485 - C47481 * C501) *
                 C47110) *
                C15919 +
            ((C26321 - C26322 + C26323 - C26324) * C21355 +
             (C26325 - C26326 + C26327 - C26328) * C47110) *
                C47479) *
               C47490 +
           (((C10297 * C484 - C10299 * C471 + C47481 * C1974 - C10300 * C1968) *
                 C21355 +
             (C10297 * C501 - C10299 * C485 + C47481 * C1986 - C10300 * C1975) *
                 C47110) *
                C15919 +
            ((C26719 - C26720 + C26721 - C26722) * C21355 +
             (C26723 - C26724 + C26725 - C26726) * C47110) *
                C47479) *
               C47464) *
              C1050 +
          ((((C25706 - C25705 + C25708 - C25707) * C21355 +
             (C25710 - C25709 + C25712 - C25711) * C47110) *
                C15919 +
            ((C25713 - C25714 + C25715 - C25716) * C21355 +
             (C25717 - C25718 + C25719 - C25720) * C47110) *
                C47479) *
               C47501 +
           (((C26322 - C26321 + C26324 - C26323) * C21355 +
             (C26326 - C26325 + C26328 - C26327) * C47110) *
                C15919 +
            ((C26727 - C26728 + C26729 - C26730) * C21355 +
             (C26731 - C26732 + C26733 - C26734) * C47110) *
                C47479) *
               C47490 +
           (((C26720 - C26719 + C26722 - C26721) * C21355 +
             (C26724 - C26723 + C26726 - C26725) * C47110) *
                C15919 +
            ((C26735 - C26736 + C26737 - C26738) * C21355 +
             (C26739 - C26740 + C26741 - C26742) * C47110) *
                C47479) *
               C47464) *
              C1051 +
          ((((C25714 - C25713 + C25716 - C25715) * C21355 +
             (C25718 - C25717 + C25720 - C25719) * C47110) *
                C15919 +
            ((C26557 - C26558 + C26559 - C26560) * C21355 +
             (C26561 - C26562 + C26563 - C26564) * C47110) *
                C47479) *
               C47501 +
           (((C26728 - C26727 + C26730 - C26729) * C21355 +
             (C26732 - C26731 + C26734 - C26733) * C47110) *
                C15919 +
            ((C10299 * C1666 - C10297 * C1669 + C10300 * C5893 -
              C47481 * C5895) *
                 C21355 +
             (C10299 * C1670 - C10297 * C1675 + C10300 * C5896 -
              C47481 * C5899) *
                 C47110) *
                C47479) *
               C47490 +
           (((C26736 - C26735 + C26738 - C26737) * C21355 +
             (C26740 - C26739 + C26742 - C26741) * C47110) *
                C15919 +
            ((C10297 * C5895 - C10299 * C5893 + C47481 * C23237 -
              C10300 * C23236) *
                 C21355 +
             (C10297 * C5899 - C10299 * C5896 + C47481 * C23239 -
              C10300 * C23238) *
                 C47110) *
                C47479) *
               C47464) *
              C47461) *
         C47135) /
            (p * q * std::sqrt(p + q));
    d2ee[148] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C10297 * C124 - C10299 * C117 + C47481 * C478 - C10300 * C468) *
                 C21355 +
             (C10297 * C138 - C10299 * C125 + C47481 * C498 - C10300 * C479) *
                 C47110) *
                C15919 +
            ((C25705 - C25706 + C25707 - C25708) * C21355 +
             (C25709 - C25710 + C25711 - C25712) * C47110) *
                C47479) *
               C47430 +
           (((C10299 * C468 - C10297 * C478 + C10300 * C471 - C47481 * C484) *
                 C21355 +
             (C10299 * C479 - C10297 * C498 + C10300 * C485 - C47481 * C501) *
                 C47110) *
                C15919 +
            ((C10299 * C906 - C10297 * C911 + C10300 * C1258 - C47481 * C1267) *
                 C21355 +
             (C10299 * C912 - C10297 * C921 + C10300 * C1268 - C47481 * C1285) *
                 C47110) *
                C47479) *
               C47268) *
              C47163 * C636 +
          ((((C10303 - C10302 + C10305 - C10304) * C21355 +
             (C10307 - C10306 + C10309 - C10308) * C47110) *
                C15919 +
            ((C10480 - C10481 + C10482 - C10483) * C21355 +
             (C10484 - C10485 + C10486 - C10487) * C47110) *
                C47479) *
               C47430 +
           (((C10659 - C10658 + C10661 - C10660) * C21355 +
             (C10663 - C10662 + C10665 - C10664) * C47110) *
                C15919 +
            ((C11160 - C11161 + C11162 - C11163) * C21355 +
             (C11164 - C11165 + C11166 - C11167) * C47110) *
                C47479) *
               C47268) *
              C47163 * C637 +
          ((((C10311 - C10310 + C10313 - C10312) * C21355 +
             (C10315 - C10314 + C10317 - C10316) * C47110) *
                C15919 +
            ((C10496 - C10497 + C10498 - C10499) * C21355 +
             (C10500 - C10501 + C10502 - C10503) * C47110) *
                C47479) *
               C47430 +
           (((C10675 - C10674 + C10677 - C10676) * C21355 +
             (C10679 - C10678 + C10681 - C10680) * C47110) *
                C15919 +
            ((C11168 - C11169 + C11170 - C11171) * C21355 +
             (C11172 - C11173 + C11174 - C11175) * C47110) *
                C47479) *
               C47268) *
              C47163 * C638 +
          ((((C10319 - C10318 + C10321 - C10320) * C21355 +
             (C10323 - C10322 + C10325 - C10324) * C47110) *
                C15919 +
            ((C10820 - C10821 + C10822 - C10823) * C21355 +
             (C10824 - C10825 + C10826 - C10827) * C47110) *
                C47479) *
               C47430 +
           (((C10959 - C10958 + C10961 - C10960) * C21355 +
             (C10963 - C10962 + C10965 - C10964) * C47110) *
                C15919 +
            ((C10297 * C917 - C10299 * C909 + C47481 * C2139 - C10300 * C2138) *
                 C21355 +
             (C10297 * C924 - C10299 * C918 + C47481 * C2141 - C10300 * C2140) *
                 C47110) *
                C47479) *
               C47268) *
              C47163 * C47465)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C10297 * C124 - C10299 * C117 + C47481 * C478 - C10300 * C468) *
                  C21355 +
              (C10297 * C138 - C10299 * C125 + C47481 * C498 - C10300 * C479) *
                  C47110) *
                 C15919 +
             ((C25705 - C25706 + C25707 - C25708) * C21355 +
              (C25709 - C25710 + C25711 - C25712) * C47110) *
                 C47479) *
                C47430 +
            (((C10299 * C468 - C10297 * C478 + C10300 * C471 - C47481 * C484) *
                  C21355 +
              (C10299 * C479 - C10297 * C498 + C10300 * C485 - C47481 * C501) *
                  C47110) *
                 C15919 +
             ((C26321 - C26322 + C26323 - C26324) * C21355 +
              (C26325 - C26326 + C26327 - C26328) * C47110) *
                 C47479) *
                C47268) *
               C1050 +
           ((((C25706 - C25705 + C25708 - C25707) * C21355 +
              (C25710 - C25709 + C25712 - C25711) * C47110) *
                 C15919 +
             ((C25713 - C25714 + C25715 - C25716) * C21355 +
              (C25717 - C25718 + C25719 - C25720) * C47110) *
                 C47479) *
                C47430 +
            (((C26322 - C26321 + C26324 - C26323) * C21355 +
              (C26326 - C26325 + C26328 - C26327) * C47110) *
                 C15919 +
             ((C26727 - C26728 + C26729 - C26730) * C21355 +
              (C26731 - C26732 + C26733 - C26734) * C47110) *
                 C47479) *
                C47268) *
               C1051 +
           ((((C25714 - C25713 + C25716 - C25715) * C21355 +
              (C25718 - C25717 + C25720 - C25719) * C47110) *
                 C15919 +
             ((C26557 - C26558 + C26559 - C26560) * C21355 +
              (C26561 - C26562 + C26563 - C26564) * C47110) *
                 C47479) *
                C47430 +
            (((C26728 - C26727 + C26730 - C26729) * C21355 +
              (C26732 - C26731 + C26734 - C26733) * C47110) *
                 C15919 +
             ((C10299 * C1666 - C10297 * C1669 + C10300 * C5893 -
               C47481 * C5895) *
                  C21355 +
              (C10299 * C1670 - C10297 * C1675 + C10300 * C5896 -
               C47481 * C5899) *
                  C47110) *
                 C47479) *
                C47268) *
               C47461) *
              C47415 +
          (((((C10303 - C10302 + C10305 - C10304) * C21355 +
              (C10307 - C10306 + C10309 - C10308) * C47110) *
                 C15919 +
             ((C10480 - C10481 + C10482 - C10483) * C21355 +
              (C10484 - C10485 + C10486 - C10487) * C47110) *
                 C47479) *
                C47430 +
            (((C10659 - C10658 + C10661 - C10660) * C21355 +
              (C10663 - C10662 + C10665 - C10664) * C47110) *
                 C15919 +
             ((C11160 - C11161 + C11162 - C11163) * C21355 +
              (C11164 - C11165 + C11166 - C11167) * C47110) *
                 C47479) *
                C47268) *
               C1050 +
           ((((C10481 - C10480 + C10483 - C10482) * C21355 +
              (C10485 - C10484 + C10487 - C10486) * C47110) *
                 C15919 +
             ((C10488 - C10489 + C10490 - C10491) * C21355 +
              (C10492 - C10493 + C10494 - C10495) * C47110) *
                 C47479) *
                C47430 +
            (((C11161 - C11160 + C11163 - C11162) * C21355 +
              (C11165 - C11164 + C11167 - C11166) * C47110) *
                 C15919 +
             ((C11882 - C11883 + C11884 - C11885) * C21355 +
              (C11886 - C11887 + C11888 - C11889) * C47110) *
                 C47479) *
                C47268) *
               C1051 +
           ((((C10489 - C10488 + C10491 - C10490) * C21355 +
              (C10493 - C10492 + C10495 - C10494) * C47110) *
                 C15919 +
             ((C11680 - C11681 + C11682 - C11683) * C21355 +
              (C11684 - C11685 + C11686 - C11687) * C47110) *
                 C47479) *
                C47430 +
            (((C11883 - C11882 + C11885 - C11884) * C21355 +
              (C11887 - C11886 + C11889 - C11888) * C47110) *
                 C15919 +
             ((C10297 * C1671 - C10299 * C1667 + C47481 * C5897 -
               C10300 * C5894) *
                  C21355 +
              (C10297 * C1676 - C10299 * C1672 + C47481 * C5900 -
               C10300 * C5898) *
                  C47110) *
                 C47479) *
                C47268) *
               C47461) *
              C47146)) /
            (p * q * std::sqrt(p + q));
    d2ee[149] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C10297 * C124 - C10299 * C117 + C47481 * C478 - C10300 * C468) *
                C21355 +
            (C10297 * C138 - C10299 * C125 + C47481 * C498 - C10300 * C479) *
                C47110) *
               C15919 +
           ((C10297 * C297 - C10299 * C287 + C47481 * C911 - C10300 * C906) *
                C21355 +
            (C10297 * C317 - C10299 * C298 + C47481 * C921 - C10300 * C912) *
                C47110) *
               C47479) *
              C47181 * C47163 * C108 +
          (((C10303 - C10302 + C10305 - C10304) * C21355 +
            (C10307 - C10306 + C10309 - C10308) * C47110) *
               C15919 +
           ((C10480 - C10481 + C10482 - C10483) * C21355 +
            (C10484 - C10485 + C10486 - C10487) * C47110) *
               C47479) *
              C47181 * C47163 * C109 +
          (((C10311 - C10310 + C10313 - C10312) * C21355 +
            (C10315 - C10314 + C10317 - C10316) * C47110) *
               C15919 +
           ((C10496 - C10497 + C10498 - C10499) * C21355 +
            (C10500 - C10501 + C10502 - C10503) * C47110) *
               C47479) *
              C47181 * C47163 * C110 +
          (((C10319 - C10318 + C10321 - C10320) * C21355 +
            (C10323 - C10322 + C10325 - C10324) * C47110) *
               C15919 +
           ((C10820 - C10821 + C10822 - C10823) * C21355 +
            (C10824 - C10825 + C10826 - C10827) * C47110) *
               C47479) *
              C47181 * C47163 * C111 +
          (((C10327 - C10326 + C10329 - C10328) * C21355 +
            (C10331 - C10330 + C10333 - C10332) * C47110) *
               C15919 +
           ((C10297 * C313 - C10299 * C295 + C47481 * C919 - C10300 * C910) *
                C21355 +
            (C10297 * C325 - C10299 * C314 + C47481 * C925 - C10300 * C920) *
                C47110) *
               C47479) *
              C47181 * C47163 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C10297 * C124 - C10299 * C117 + C47481 * C478 - C10300 * C468) *
                 C21355 +
             (C10297 * C138 - C10299 * C125 + C47481 * C498 - C10300 * C479) *
                 C47110) *
                C15919 +
            ((C25705 - C25706 + C25707 - C25708) * C21355 +
             (C25709 - C25710 + C25711 - C25712) * C47110) *
                C47479) *
               C47181 * C47500 +
           (((C25706 - C25705 + C25708 - C25707) * C21355 +
             (C25710 - C25709 + C25712 - C25711) * C47110) *
                C15919 +
            ((C25713 - C25714 + C25715 - C25716) * C21355 +
             (C25717 - C25718 + C25719 - C25720) * C47110) *
                C47479) *
               C47181 * C47488 +
           (((C25714 - C25713 + C25716 - C25715) * C21355 +
             (C25718 - C25717 + C25720 - C25719) * C47110) *
                C15919 +
            ((C10297 * C1130 - C10299 * C1124 + C47481 * C1669 -
              C10300 * C1666) *
                 C21355 +
             (C10297 * C1142 - C10299 * C1131 + C47481 * C1675 -
              C10300 * C1670) *
                 C47110) *
                C47479) *
               C47181 * C47461) *
              C284 +
          ((((C10303 - C10302 + C10305 - C10304) * C21355 +
             (C10307 - C10306 + C10309 - C10308) * C47110) *
                C15919 +
            ((C10480 - C10481 + C10482 - C10483) * C21355 +
             (C10484 - C10485 + C10486 - C10487) * C47110) *
                C47479) *
               C47181 * C47500 +
           (((C10481 - C10480 + C10483 - C10482) * C21355 +
             (C10485 - C10484 + C10487 - C10486) * C47110) *
                C15919 +
            ((C10488 - C10489 + C10490 - C10491) * C21355 +
             (C10492 - C10493 + C10494 - C10495) * C47110) *
                C47479) *
               C47181 * C47488 +
           (((C10489 - C10488 + C10491 - C10490) * C21355 +
             (C10493 - C10492 + C10495 - C10494) * C47110) *
                C15919 +
            ((C11680 - C11681 + C11682 - C11683) * C21355 +
             (C11684 - C11685 + C11686 - C11687) * C47110) *
                C47479) *
               C47181 * C47461) *
              C285 +
          ((((C10311 - C10310 + C10313 - C10312) * C21355 +
             (C10315 - C10314 + C10317 - C10316) * C47110) *
                C15919 +
            ((C10496 - C10497 + C10498 - C10499) * C21355 +
             (C10500 - C10501 + C10502 - C10503) * C47110) *
                C47479) *
               C47181 * C47500 +
           (((C10497 - C10496 + C10499 - C10498) * C21355 +
             (C10501 - C10500 + C10503 - C10502) * C47110) *
                C15919 +
            ((C10504 - C10505 + C10506 - C10507) * C21355 +
             (C10508 - C10509 + C10510 - C10511) * C47110) *
                C47479) *
               C47181 * C47488 +
           (((C10505 - C10504 + C10507 - C10506) * C21355 +
             (C10509 - C10508 + C10511 - C10510) * C47110) *
                C15919 +
            ((C10297 * C1134 - C10299 * C1126 + C47481 * C1673 -
              C10300 * C1668) *
                 C21355 +
             (C10297 * C1144 - C10299 * C1135 + C47481 * C1677 -
              C10300 * C1674) *
                 C47110) *
                C47479) *
               C47181 * C47461) *
              C47455)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C10297 * C124 - C10299 * C117 + C47481 * C478 - C10300 * C468) *
                 C21355 +
             (C10297 * C138 - C10299 * C125 + C47481 * C498 - C10300 * C479) *
                 C47110) *
                C15919 +
            ((C25705 - C25706 + C25707 - C25708) * C21355 +
             (C25709 - C25710 + C25711 - C25712) * C47110) *
                C47479) *
               C47181 * C1050 +
           (((C25706 - C25705 + C25708 - C25707) * C21355 +
             (C25710 - C25709 + C25712 - C25711) * C47110) *
                C15919 +
            ((C25713 - C25714 + C25715 - C25716) * C21355 +
             (C25717 - C25718 + C25719 - C25720) * C47110) *
                C47479) *
               C47181 * C1051 +
           (((C25714 - C25713 + C25716 - C25715) * C21355 +
             (C25718 - C25717 + C25720 - C25719) * C47110) *
                C15919 +
            ((C10297 * C1130 - C10299 * C1124 + C47481 * C1669 -
              C10300 * C1666) *
                 C21355 +
             (C10297 * C1142 - C10299 * C1131 + C47481 * C1675 -
              C10300 * C1670) *
                 C47110) *
                C47479) *
               C47181 * C47461) *
              C47497 +
          ((((C10303 - C10302 + C10305 - C10304) * C21355 +
             (C10307 - C10306 + C10309 - C10308) * C47110) *
                C15919 +
            ((C10480 - C10481 + C10482 - C10483) * C21355 +
             (C10484 - C10485 + C10486 - C10487) * C47110) *
                C47479) *
               C47181 * C1050 +
           (((C10481 - C10480 + C10483 - C10482) * C21355 +
             (C10485 - C10484 + C10487 - C10486) * C47110) *
                C15919 +
            ((C10488 - C10489 + C10490 - C10491) * C21355 +
             (C10492 - C10493 + C10494 - C10495) * C47110) *
                C47479) *
               C47181 * C1051 +
           (((C10489 - C10488 + C10491 - C10490) * C21355 +
             (C10493 - C10492 + C10495 - C10494) * C47110) *
                C15919 +
            ((C11680 - C11681 + C11682 - C11683) * C21355 +
             (C11684 - C11685 + C11686 - C11687) * C47110) *
                C47479) *
               C47181 * C47461) *
              C47484 +
          ((((C10311 - C10310 + C10313 - C10312) * C21355 +
             (C10315 - C10314 + C10317 - C10316) * C47110) *
                C15919 +
            ((C10496 - C10497 + C10498 - C10499) * C21355 +
             (C10500 - C10501 + C10502 - C10503) * C47110) *
                C47479) *
               C47181 * C1050 +
           (((C10497 - C10496 + C10499 - C10498) * C21355 +
             (C10501 - C10500 + C10503 - C10502) * C47110) *
                C15919 +
            ((C10504 - C10505 + C10506 - C10507) * C21355 +
             (C10508 - C10509 + C10510 - C10511) * C47110) *
                C47479) *
               C47181 * C1051 +
           (((C10505 - C10504 + C10507 - C10506) * C21355 +
             (C10509 - C10508 + C10511 - C10510) * C47110) *
                C15919 +
            ((C10297 * C1134 - C10299 * C1126 + C47481 * C1673 -
              C10300 * C1668) *
                 C21355 +
             (C10297 * C1144 - C10299 * C1135 + C47481 * C1677 -
              C10300 * C1674) *
                 C47110) *
                C47479) *
               C47181 * C47461) *
              C47455)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C10297 * C124 - C10299 * C117 + C47481 * C478 - C10300 * C468) *
                C21355 +
            (C10297 * C138 - C10299 * C125 + C47481 * C498 - C10300 * C479) *
                C47110) *
               C15919 +
           ((C25705 - C25706 + C25707 - C25708) * C21355 +
            (C25709 - C25710 + C25711 - C25712) * C47110) *
               C47479) *
              C47181 * C1118 +
          (((C25706 - C25705 + C25708 - C25707) * C21355 +
            (C25710 - C25709 + C25712 - C25711) * C47110) *
               C15919 +
           ((C25713 - C25714 + C25715 - C25716) * C21355 +
            (C25717 - C25718 + C25719 - C25720) * C47110) *
               C47479) *
              C47181 * C1119 +
          (((C25714 - C25713 + C25716 - C25715) * C21355 +
            (C25718 - C25717 + C25720 - C25719) * C47110) *
               C15919 +
           ((C26557 - C26558 + C26559 - C26560) * C21355 +
            (C26561 - C26562 + C26563 - C26564) * C47110) *
               C47479) *
              C47181 * C1120 +
          (((C26558 - C26557 + C26560 - C26559) * C21355 +
            (C26562 - C26561 + C26564 - C26563) * C47110) *
               C15919 +
           ((C26565 - C26566 + C26567 - C26568) * C21355 +
            (C26569 - C26570 + C26571 - C26572) * C47110) *
               C47479) *
              C47181 * C1121 +
          (((C26566 - C26565 + C26568 - C26567) * C21355 +
            (C26570 - C26569 + C26572 - C26571) * C47110) *
               C15919 +
           ((C10297 * C5729 - C10299 * C5727 + C47481 * C22596 -
             C10300 * C22595) *
                C21355 +
            (C10297 * C5733 - C10299 * C5730 + C47481 * C22598 -
             C10300 * C22597) *
                C47110) *
               C47479) *
              C47181 * C1122) *
         C47135) /
            (p * q * std::sqrt(p + q));
    d2ee[150] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C31090 * C124 - C31092 * C117 + C47481 * C478 - C31093 * C468) *
                C15921 +
            (C31090 * C138 - C31092 * C125 + C47481 * C498 - C31093 * C479) *
                C15917 +
            (C31095 - C31096 + C31097 - C31098) * C15922 +
            (C31099 - C31100 + C31101 - C31102) * C47448) *
               C47369 * C47181 * C47222 +
           ((C31092 * C287 - C31090 * C297 + C31093 * C906 - C47481 * C911) *
                C15921 +
            (C31092 * C298 - C31090 * C317 + C31093 * C912 - C47481 * C921) *
                C15917 +
            (C31273 - C31274 + C31275 - C31276) * C15922 +
            (C31277 - C31278 + C31279 - C31280) * C47448) *
               C47369 * C47181 * C47229 +
           ((C31090 * C303 - C31092 * C290 + C47481 * C1273 - C31093 * C1261) *
                C15921 +
            (C31090 * C320 - C31092 * C304 + C47481 * C1288 - C31093 * C1274) *
                C15917 +
            (C31281 - C31282 + C31283 - C31284) * C15922 +
            (C31285 - C31286 + C31287 - C31288) * C47448) *
               C47369 * C47181 * C2840) *
              C47140 +
          (((C31096 - C31095 + C31098 - C31097) * C15921 +
            (C31100 - C31099 + C31102 - C31101) * C15917 +
            (C31103 - C31104 + C31105 - C31106) * C15922 +
            (C31107 - C31108 + C31109 - C31110) * C47448) *
               C47369 * C47181 * C47222 +
           ((C31274 - C31273 + C31276 - C31275) * C15921 +
            (C31278 - C31277 + C31280 - C31279) * C15917 +
            (C31289 - C31290 + C31291 - C31292) * C15922 +
            (C31293 - C31294 + C31295 - C31296) * C47448) *
               C47369 * C47181 * C47229 +
           ((C31282 - C31281 + C31284 - C31283) * C15921 +
            (C31286 - C31285 + C31288 - C31287) * C15917 +
            (C31297 - C31298 + C31299 - C31300) * C15922 +
            (C31301 - C31302 + C31303 - C31304) * C47448) *
               C47369 * C47181 * C2840) *
              C47149 +
          (((C31104 - C31103 + C31106 - C31105) * C15921 +
            (C31108 - C31107 + C31110 - C31109) * C15917 +
            (C31111 - C31112 + C31113 - C31114) * C15922 +
            (C31115 - C31116 + C31117 - C31118) * C47448) *
               C47369 * C47181 * C47222 +
           ((C31290 - C31289 + C31292 - C31291) * C15921 +
            (C31294 - C31293 + C31296 - C31295) * C15917 +
            (C31613 - C31614 + C31615 - C31616) * C15922 +
            (C31617 - C31618 + C31619 - C31620) * C47448) *
               C47369 * C47181 * C47229 +
           ((C31298 - C31297 + C31300 - C31299) * C15921 +
            (C31302 - C31301 + C31304 - C31303) * C15917 +
            (C31090 * C311 - C31092 * C294 + C47481 * C1557 - C31093 * C1556) *
                C15922 +
            (C31090 * C324 - C31092 * C312 + C47481 * C1559 - C31093 * C1558) *
                C47448) *
               C47369 * C47181 * C2840) *
              C2843)) /
        (p * q * std::sqrt(p + q));
    d2ee[151] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C31090 * C124 - C31092 * C117 + C47481 * C478 - C31093 * C468) *
                 C15921 +
             (C31090 * C138 - C31092 * C125 + C47481 * C498 - C31093 * C479) *
                 C15917 +
             (C31095 - C31096 + C31097 - C31098) * C15922 +
             (C31099 - C31100 + C31101 - C31102) * C47448) *
                C47369 * C47430 +
            ((C31092 * C468 - C31090 * C478 + C31093 * C471 - C47481 * C484) *
                 C15921 +
             (C31092 * C479 - C31090 * C498 + C31093 * C485 - C47481 * C501) *
                 C15917 +
             (C31451 - C31452 + C31453 - C31454) * C15922 +
             (C31455 - C31456 + C31457 - C31458) * C47448) *
                C47369 * C47268) *
               C47222 +
           (((C31092 * C287 - C31090 * C297 + C31093 * C906 - C47481 * C911) *
                 C15921 +
             (C31092 * C298 - C31090 * C317 + C31093 * C912 - C47481 * C921) *
                 C15917 +
             (C31273 - C31274 + C31275 - C31276) * C15922 +
             (C31277 - C31278 + C31279 - C31280) * C47448) *
                C47369 * C47430 +
            ((C31090 * C911 - C31092 * C906 + C47481 * C1267 - C31093 * C1258) *
                 C15921 +
             (C31090 * C921 - C31092 * C912 + C47481 * C1285 - C31093 * C1268) *
                 C15917 +
             (C31953 - C31954 + C31955 - C31956) * C15922 +
             (C31957 - C31958 + C31959 - C31960) * C47448) *
                C47369 * C47268) *
               C47229 +
           (((C31090 * C303 - C31092 * C290 + C47481 * C1273 - C31093 * C1261) *
                 C15921 +
             (C31090 * C320 - C31092 * C304 + C47481 * C1288 - C31093 * C1274) *
                 C15917 +
             (C31281 - C31282 + C31283 - C31284) * C15922 +
             (C31285 - C31286 + C31287 - C31288) * C47448) *
                C47369 * C47430 +
            ((C31092 * C1261 - C31090 * C1273 + C31093 * C1264 -
              C47481 * C1279) *
                 C15921 +
             (C31092 * C1274 - C31090 * C1288 + C31093 * C1280 -
              C47481 * C1291) *
                 C15917 +
             (C32675 - C32676 + C32677 - C32678) * C15922 +
             (C32679 - C32680 + C32681 - C32682) * C47448) *
                C47369 * C47268) *
               C2840) *
              C2580 +
          ((((C31096 - C31095 + C31098 - C31097) * C15921 +
             (C31100 - C31099 + C31102 - C31101) * C15917 +
             (C31103 - C31104 + C31105 - C31106) * C15922 +
             (C31107 - C31108 + C31109 - C31110) * C47448) *
                C47369 * C47430 +
            ((C31452 - C31451 + C31454 - C31453) * C15921 +
             (C31456 - C31455 + C31458 - C31457) * C15917 +
             (C31467 - C31468 + C31469 - C31470) * C15922 +
             (C31471 - C31472 + C31473 - C31474) * C47448) *
                C47369 * C47268) *
               C47222 +
           (((C31274 - C31273 + C31276 - C31275) * C15921 +
             (C31278 - C31277 + C31280 - C31279) * C15917 +
             (C31289 - C31290 + C31291 - C31292) * C15922 +
             (C31293 - C31294 + C31295 - C31296) * C47448) *
                C47369 * C47430 +
            ((C31954 - C31953 + C31956 - C31955) * C15921 +
             (C31958 - C31957 + C31960 - C31959) * C15917 +
             (C31961 - C31962 + C31963 - C31964) * C15922 +
             (C31965 - C31966 + C31967 - C31968) * C47448) *
                C47369 * C47268) *
               C47229 +
           (((C31282 - C31281 + C31284 - C31283) * C15921 +
             (C31286 - C31285 + C31288 - C31287) * C15917 +
             (C31297 - C31298 + C31299 - C31300) * C15922 +
             (C31301 - C31302 + C31303 - C31304) * C47448) *
                C47369 * C47430 +
            ((C32676 - C32675 + C32678 - C32677) * C15921 +
             (C32680 - C32679 + C32682 - C32681) * C15917 +
             (C31090 * C1277 - C31092 * C1263 + C47481 * C1283 -
              C31093 * C1266) *
                 C15922 +
             (C31090 * C1290 - C31092 * C1278 + C47481 * C1293 -
              C31093 * C1284) *
                 C47448) *
                C47369 * C47268) *
               C2840) *
              C47146)) /
        (p * q * std::sqrt(p + q));
    d2ee[152] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C31090 * C124 - C31092 * C117 + C47481 * C478 - C31093 * C468) *
                C15921 +
            (C31090 * C138 - C31092 * C125 + C47481 * C498 - C31093 * C479) *
                C15917 +
            (C31095 - C31096 + C31097 - C31098) * C15922 +
            (C31099 - C31100 + C31101 - C31102) * C47448) *
               C47369 * C47181 * C47507 +
           ((C31092 * C287 - C31090 * C297 + C31093 * C906 - C47481 * C911) *
                C15921 +
            (C31092 * C298 - C31090 * C317 + C31093 * C912 - C47481 * C921) *
                C15917 +
            (C31273 - C31274 + C31275 - C31276) * C15922 +
            (C31277 - C31278 + C31279 - C31280) * C47448) *
               C47369 * C47181 * C47503 +
           ((C31090 * C303 - C31092 * C290 + C47481 * C1273 - C31093 * C1261) *
                C15921 +
            (C31090 * C320 - C31092 * C304 + C47481 * C1288 - C31093 * C1274) *
                C15917 +
            (C31281 - C31282 + C31283 - C31284) * C15922 +
            (C31285 - C31286 + C31287 - C31288) * C47448) *
               C47369 * C47181 * C47493 +
           ((C31092 * C1124 - C31090 * C1130 + C31093 * C1666 -
             C47481 * C1669) *
                C15921 +
            (C31092 * C1131 - C31090 * C1142 + C31093 * C1670 -
             C47481 * C1675) *
                C15917 +
            (C32473 - C32474 + C32475 - C32476) * C15922 +
            (C32477 - C32478 + C32479 - C32480) * C47448) *
               C47369 * C47181 * C47471) *
              C2580 +
          (((C31096 - C31095 + C31098 - C31097) * C15921 +
            (C31100 - C31099 + C31102 - C31101) * C15917 +
            (C31103 - C31104 + C31105 - C31106) * C15922 +
            (C31107 - C31108 + C31109 - C31110) * C47448) *
               C47369 * C47181 * C47507 +
           ((C31274 - C31273 + C31276 - C31275) * C15921 +
            (C31278 - C31277 + C31280 - C31279) * C15917 +
            (C31289 - C31290 + C31291 - C31292) * C15922 +
            (C31293 - C31294 + C31295 - C31296) * C47448) *
               C47369 * C47181 * C47503 +
           ((C31282 - C31281 + C31284 - C31283) * C15921 +
            (C31286 - C31285 + C31288 - C31287) * C15917 +
            (C31297 - C31298 + C31299 - C31300) * C15922 +
            (C31301 - C31302 + C31303 - C31304) * C47448) *
               C47369 * C47181 * C47493 +
           ((C32474 - C32473 + C32476 - C32475) * C15921 +
            (C32478 - C32477 + C32480 - C32479) * C15917 +
            (C31090 * C1134 - C31092 * C1126 + C47481 * C1673 -
             C31093 * C1668) *
                C15922 +
            (C31090 * C1144 - C31092 * C1135 + C47481 * C1677 -
             C31093 * C1674) *
                C47448) *
               C47369 * C47181 * C47471) *
              C47146)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C31090 * C124 - C31092 * C117 + C47481 * C478 - C31093 * C468) *
                C15921 +
            (C31090 * C138 - C31092 * C125 + C47481 * C498 - C31093 * C479) *
                C15917 +
            (C31095 - C31096 + C31097 - C31098) * C15922 +
            (C31099 - C31100 + C31101 - C31102) * C47448) *
               C47369 * C47181 * C2472 +
           ((C31092 * C287 - C31090 * C297 + C31093 * C906 - C47481 * C911) *
                C15921 +
            (C31092 * C298 - C31090 * C317 + C31093 * C912 - C47481 * C921) *
                C15917 +
            (C31273 - C31274 + C31275 - C31276) * C15922 +
            (C31277 - C31278 + C31279 - C31280) * C47448) *
               C47369 * C47181 * C47226) *
              C47506 +
          (((C31096 - C31095 + C31098 - C31097) * C15921 +
            (C31100 - C31099 + C31102 - C31101) * C15917 +
            (C31103 - C31104 + C31105 - C31106) * C15922 +
            (C31107 - C31108 + C31109 - C31110) * C47448) *
               C47369 * C47181 * C2472 +
           ((C31274 - C31273 + C31276 - C31275) * C15921 +
            (C31278 - C31277 + C31280 - C31279) * C15917 +
            (C31289 - C31290 + C31291 - C31292) * C15922 +
            (C31293 - C31294 + C31295 - C31296) * C47448) *
               C47369 * C47181 * C47226) *
              C47499 +
          (((C31104 - C31103 + C31106 - C31105) * C15921 +
            (C31108 - C31107 + C31110 - C31109) * C15917 +
            (C31111 - C31112 + C31113 - C31114) * C15922 +
            (C31115 - C31116 + C31117 - C31118) * C47448) *
               C47369 * C47181 * C2472 +
           ((C31290 - C31289 + C31292 - C31291) * C15921 +
            (C31294 - C31293 + C31296 - C31295) * C15917 +
            (C31613 - C31614 + C31615 - C31616) * C15922 +
            (C31617 - C31618 + C31619 - C31620) * C47448) *
               C47369 * C47181 * C47226) *
              C47486 +
          (((C31112 - C31111 + C31114 - C31113) * C15921 +
            (C31116 - C31115 + C31118 - C31117) * C15917 +
            (C31119 - C31120 + C31121 - C31122) * C15922 +
            (C31123 - C31124 + C31125 - C31126) * C47448) *
               C47369 * C47181 * C2472 +
           ((C31614 - C31613 + C31616 - C31615) * C15921 +
            (C31618 - C31617 + C31620 - C31619) * C15917 +
            (C31090 * C313 - C31092 * C295 + C47481 * C919 - C31093 * C910) *
                C15922 +
            (C31090 * C325 - C31092 * C314 + C47481 * C925 - C31093 * C920) *
                C47448) *
               C47369 * C47181 * C47226) *
              C47465)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C31090 * C124 - C31092 * C117 + C47481 * C478 - C31093 * C468) *
                 C15921 +
             (C31090 * C138 - C31092 * C125 + C47481 * C498 - C31093 * C479) *
                 C15917 +
             (C31095 - C31096 + C31097 - C31098) * C15922 +
             (C31099 - C31100 + C31101 - C31102) * C47448) *
                C47369 * C47501 +
            ((C31092 * C468 - C31090 * C478 + C31093 * C471 - C47481 * C484) *
                 C15921 +
             (C31092 * C479 - C31090 * C498 + C31093 * C485 - C47481 * C501) *
                 C15917 +
             (C31451 - C31452 + C31453 - C31454) * C15922 +
             (C31455 - C31456 + C31457 - C31458) * C47448) *
                C47369 * C47490 +
            ((C31090 * C484 - C31092 * C471 + C47481 * C1974 - C31093 * C1968) *
                 C15921 +
             (C31090 * C501 - C31092 * C485 + C47481 * C1986 - C31093 * C1975) *
                 C15917 +
             (C31459 - C31460 + C31461 - C31462) * C15922 +
             (C31463 - C31464 + C31465 - C31466) * C47448) *
                C47369 * C47464) *
               C2472 +
           (((C31092 * C287 - C31090 * C297 + C31093 * C906 - C47481 * C911) *
                 C15921 +
             (C31092 * C298 - C31090 * C317 + C31093 * C912 - C47481 * C921) *
                 C15917 +
             (C31273 - C31274 + C31275 - C31276) * C15922 +
             (C31277 - C31278 + C31279 - C31280) * C47448) *
                C47369 * C47501 +
            ((C31090 * C911 - C31092 * C906 + C47481 * C1267 - C31093 * C1258) *
                 C15921 +
             (C31090 * C921 - C31092 * C912 + C47481 * C1285 - C31093 * C1268) *
                 C15917 +
             (C31953 - C31954 + C31955 - C31956) * C15922 +
             (C31957 - C31958 + C31959 - C31960) * C47448) *
                C47369 * C47490 +
            ((C31092 * C1258 - C31090 * C1267 + C31093 * C2362 -
              C47481 * C2365) *
                 C15921 +
             (C31092 * C1268 - C31090 * C1285 + C31093 * C2366 -
              C47481 * C2371) *
                 C15917 +
             (C33381 - C33382 + C33383 - C33384) * C15922 +
             (C33385 - C33386 + C33387 - C33388) * C47448) *
                C47369 * C47464) *
               C47226) *
              C2580 +
          ((((C31096 - C31095 + C31098 - C31097) * C15921 +
             (C31100 - C31099 + C31102 - C31101) * C15917 +
             (C31103 - C31104 + C31105 - C31106) * C15922 +
             (C31107 - C31108 + C31109 - C31110) * C47448) *
                C47369 * C47501 +
            ((C31452 - C31451 + C31454 - C31453) * C15921 +
             (C31456 - C31455 + C31458 - C31457) * C15917 +
             (C31467 - C31468 + C31469 - C31470) * C15922 +
             (C31471 - C31472 + C31473 - C31474) * C47448) *
                C47369 * C47490 +
            ((C31460 - C31459 + C31462 - C31461) * C15921 +
             (C31464 - C31463 + C31466 - C31465) * C15917 +
             (C31475 - C31476 + C31477 - C31478) * C15922 +
             (C31479 - C31480 + C31481 - C31482) * C47448) *
                C47369 * C47464) *
               C2472 +
           (((C31274 - C31273 + C31276 - C31275) * C15921 +
             (C31278 - C31277 + C31280 - C31279) * C15917 +
             (C31289 - C31290 + C31291 - C31292) * C15922 +
             (C31293 - C31294 + C31295 - C31296) * C47448) *
                C47369 * C47501 +
            ((C31954 - C31953 + C31956 - C31955) * C15921 +
             (C31958 - C31957 + C31960 - C31959) * C15917 +
             (C31961 - C31962 + C31963 - C31964) * C15922 +
             (C31965 - C31966 + C31967 - C31968) * C47448) *
                C47369 * C47490 +
            ((C33382 - C33381 + C33384 - C33383) * C15921 +
             (C33386 - C33385 + C33388 - C33387) * C15917 +
             (C31090 * C1271 - C31092 * C1260 + C47481 * C2369 -
              C31093 * C2364) *
                 C15922 +
             (C31090 * C1287 - C31092 * C1272 + C47481 * C2373 -
              C31093 * C2370) *
                 C47448) *
                C47369 * C47464) *
               C47226) *
              C47146)) /
            (p * q * std::sqrt(p + q));
    d2ee[153] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C31090 * C124 - C31092 * C117 + C47481 * C478 - C31093 * C468) *
                 C15921 +
             (C31090 * C138 - C31092 * C125 + C47481 * C498 - C31093 * C479) *
                 C15917 +
             (C31095 - C31096 + C31097 - C31098) * C15922 +
             (C31099 - C31100 + C31101 - C31102) * C47448) *
                C47369 * C47430 +
            ((C31092 * C468 - C31090 * C478 + C31093 * C471 - C47481 * C484) *
                 C15921 +
             (C31092 * C479 - C31090 * C498 + C31093 * C485 - C47481 * C501) *
                 C15917 +
             (C31451 - C31452 + C31453 - C31454) * C15922 +
             (C31455 - C31456 + C31457 - C31458) * C47448) *
                C47369 * C47268) *
               C2472 +
           (((C31092 * C287 - C31090 * C297 + C31093 * C906 - C47481 * C911) *
                 C15921 +
             (C31092 * C298 - C31090 * C317 + C31093 * C912 - C47481 * C921) *
                 C15917 +
             (C31273 - C31274 + C31275 - C31276) * C15922 +
             (C31277 - C31278 + C31279 - C31280) * C47448) *
                C47369 * C47430 +
            ((C31090 * C911 - C31092 * C906 + C47481 * C1267 - C31093 * C1258) *
                 C15921 +
             (C31090 * C921 - C31092 * C912 + C47481 * C1285 - C31093 * C1268) *
                 C15917 +
             (C31953 - C31954 + C31955 - C31956) * C15922 +
             (C31957 - C31958 + C31959 - C31960) * C47448) *
                C47369 * C47268) *
               C47226) *
              C47140 +
          ((((C31096 - C31095 + C31098 - C31097) * C15921 +
             (C31100 - C31099 + C31102 - C31101) * C15917 +
             (C31103 - C31104 + C31105 - C31106) * C15922 +
             (C31107 - C31108 + C31109 - C31110) * C47448) *
                C47369 * C47430 +
            ((C31452 - C31451 + C31454 - C31453) * C15921 +
             (C31456 - C31455 + C31458 - C31457) * C15917 +
             (C31467 - C31468 + C31469 - C31470) * C15922 +
             (C31471 - C31472 + C31473 - C31474) * C47448) *
                C47369 * C47268) *
               C2472 +
           (((C31274 - C31273 + C31276 - C31275) * C15921 +
             (C31278 - C31277 + C31280 - C31279) * C15917 +
             (C31289 - C31290 + C31291 - C31292) * C15922 +
             (C31293 - C31294 + C31295 - C31296) * C47448) *
                C47369 * C47430 +
            ((C31954 - C31953 + C31956 - C31955) * C15921 +
             (C31958 - C31957 + C31960 - C31959) * C15917 +
             (C31961 - C31962 + C31963 - C31964) * C15922 +
             (C31965 - C31966 + C31967 - C31968) * C47448) *
                C47369 * C47268) *
               C47226) *
              C47149 +
          ((((C31104 - C31103 + C31106 - C31105) * C15921 +
             (C31108 - C31107 + C31110 - C31109) * C15917 +
             (C31111 - C31112 + C31113 - C31114) * C15922 +
             (C31115 - C31116 + C31117 - C31118) * C47448) *
                C47369 * C47430 +
            ((C31468 - C31467 + C31470 - C31469) * C15921 +
             (C31472 - C31471 + C31474 - C31473) * C15917 +
             (C31751 - C31752 + C31753 - C31754) * C15922 +
             (C31755 - C31756 + C31757 - C31758) * C47448) *
                C47369 * C47268) *
               C2472 +
           (((C31290 - C31289 + C31292 - C31291) * C15921 +
             (C31294 - C31293 + C31296 - C31295) * C15917 +
             (C31613 - C31614 + C31615 - C31616) * C15922 +
             (C31617 - C31618 + C31619 - C31620) * C47448) *
                C47369 * C47430 +
            ((C31962 - C31961 + C31964 - C31963) * C15921 +
             (C31966 - C31965 + C31968 - C31967) * C15917 +
             (C31090 * C917 - C31092 * C909 + C47481 * C2139 - C31093 * C2138) *
                 C15922 +
             (C31090 * C924 - C31092 * C918 + C47481 * C2141 - C31093 * C2140) *
                 C47448) *
                C47369 * C47268) *
               C47226) *
              C2843)) /
        (p * q * std::sqrt(p + q));
    d2ee[154] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C31090 * C124 - C31092 * C117 + C47481 * C478 - C31093 * C468) *
                C15921 +
            (C31090 * C138 - C31092 * C125 + C47481 * C498 - C31093 * C479) *
                C15917 +
            (C31095 - C31096 + C31097 - C31098) * C15922 +
            (C31099 - C31100 + C31101 - C31102) * C47448) *
               C47369 * C47181 * C2472 +
           ((C31092 * C287 - C31090 * C297 + C31093 * C906 - C47481 * C911) *
                C15921 +
            (C31092 * C298 - C31090 * C317 + C31093 * C912 - C47481 * C921) *
                C15917 +
            (C31273 - C31274 + C31275 - C31276) * C15922 +
            (C31277 - C31278 + C31279 - C31280) * C47448) *
               C47369 * C47181 * C47226) *
              C47506 +
          (((C31096 - C31095 + C31098 - C31097) * C15921 +
            (C31100 - C31099 + C31102 - C31101) * C15917 +
            (C31103 - C31104 + C31105 - C31106) * C15922 +
            (C31107 - C31108 + C31109 - C31110) * C47448) *
               C47369 * C47181 * C2472 +
           ((C31274 - C31273 + C31276 - C31275) * C15921 +
            (C31278 - C31277 + C31280 - C31279) * C15917 +
            (C31289 - C31290 + C31291 - C31292) * C15922 +
            (C31293 - C31294 + C31295 - C31296) * C47448) *
               C47369 * C47181 * C47226) *
              C47499 +
          (((C31104 - C31103 + C31106 - C31105) * C15921 +
            (C31108 - C31107 + C31110 - C31109) * C15917 +
            (C31111 - C31112 + C31113 - C31114) * C15922 +
            (C31115 - C31116 + C31117 - C31118) * C47448) *
               C47369 * C47181 * C2472 +
           ((C31290 - C31289 + C31292 - C31291) * C15921 +
            (C31294 - C31293 + C31296 - C31295) * C15917 +
            (C31613 - C31614 + C31615 - C31616) * C15922 +
            (C31617 - C31618 + C31619 - C31620) * C47448) *
               C47369 * C47181 * C47226) *
              C47486 +
          (((C31112 - C31111 + C31114 - C31113) * C15921 +
            (C31116 - C31115 + C31118 - C31117) * C15917 +
            (C31119 - C31120 + C31121 - C31122) * C15922 +
            (C31123 - C31124 + C31125 - C31126) * C47448) *
               C47369 * C47181 * C2472 +
           ((C31614 - C31613 + C31616 - C31615) * C15921 +
            (C31618 - C31617 + C31620 - C31619) * C15917 +
            (C31090 * C313 - C31092 * C295 + C47481 * C919 - C31093 * C910) *
                C15922 +
            (C31090 * C325 - C31092 * C314 + C47481 * C925 - C31093 * C920) *
                C47448) *
               C47369 * C47181 * C47226) *
              C47465)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C31090 * C124 - C31092 * C117 + C47481 * C478 - C31093 * C468) *
                C15921 +
            (C31090 * C138 - C31092 * C125 + C47481 * C498 - C31093 * C479) *
                C15917 +
            (C31095 - C31096 + C31097 - C31098) * C15922 +
            (C31099 - C31100 + C31101 - C31102) * C47448) *
               C47369 * C47181 * C47507 +
           ((C31092 * C287 - C31090 * C297 + C31093 * C906 - C47481 * C911) *
                C15921 +
            (C31092 * C298 - C31090 * C317 + C31093 * C912 - C47481 * C921) *
                C15917 +
            (C31273 - C31274 + C31275 - C31276) * C15922 +
            (C31277 - C31278 + C31279 - C31280) * C47448) *
               C47369 * C47181 * C47503 +
           ((C31090 * C303 - C31092 * C290 + C47481 * C1273 - C31093 * C1261) *
                C15921 +
            (C31090 * C320 - C31092 * C304 + C47481 * C1288 - C31093 * C1274) *
                C15917 +
            (C31281 - C31282 + C31283 - C31284) * C15922 +
            (C31285 - C31286 + C31287 - C31288) * C47448) *
               C47369 * C47181 * C47493 +
           ((C31092 * C1124 - C31090 * C1130 + C31093 * C1666 -
             C47481 * C1669) *
                C15921 +
            (C31092 * C1131 - C31090 * C1142 + C31093 * C1670 -
             C47481 * C1675) *
                C15917 +
            (C32473 - C32474 + C32475 - C32476) * C15922 +
            (C32477 - C32478 + C32479 - C32480) * C47448) *
               C47369 * C47181 * C47471) *
              C2580 +
          (((C31096 - C31095 + C31098 - C31097) * C15921 +
            (C31100 - C31099 + C31102 - C31101) * C15917 +
            (C31103 - C31104 + C31105 - C31106) * C15922 +
            (C31107 - C31108 + C31109 - C31110) * C47448) *
               C47369 * C47181 * C47507 +
           ((C31274 - C31273 + C31276 - C31275) * C15921 +
            (C31278 - C31277 + C31280 - C31279) * C15917 +
            (C31289 - C31290 + C31291 - C31292) * C15922 +
            (C31293 - C31294 + C31295 - C31296) * C47448) *
               C47369 * C47181 * C47503 +
           ((C31282 - C31281 + C31284 - C31283) * C15921 +
            (C31286 - C31285 + C31288 - C31287) * C15917 +
            (C31297 - C31298 + C31299 - C31300) * C15922 +
            (C31301 - C31302 + C31303 - C31304) * C47448) *
               C47369 * C47181 * C47493 +
           ((C32474 - C32473 + C32476 - C32475) * C15921 +
            (C32478 - C32477 + C32480 - C32479) * C15917 +
            (C31090 * C1134 - C31092 * C1126 + C47481 * C1673 -
             C31093 * C1668) *
                C15922 +
            (C31090 * C1144 - C31092 * C1135 + C47481 * C1677 -
             C31093 * C1674) *
                C47448) *
               C47369 * C47181 * C47471) *
              C47146)) /
            (p * q * std::sqrt(p + q));
    d2ee[155] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C31090 * C124 - C31092 * C117 + C47481 * C478 - C31093 * C468) *
                 C15921 +
             (C31090 * C138 - C31092 * C125 + C47481 * C498 - C31093 * C479) *
                 C15917 +
             (C31095 - C31096 + C31097 - C31098) * C15922 +
             (C31099 - C31100 + C31101 - C31102) * C47448) *
                C47369 * C3234 +
            ((C31092 * C468 - C31090 * C478 + C31093 * C471 - C47481 * C484) *
                 C15921 +
             (C31092 * C479 - C31090 * C498 + C31093 * C485 - C47481 * C501) *
                 C15917 +
             (C31451 - C31452 + C31453 - C31454) * C15922 +
             (C31455 - C31456 + C31457 - C31458) * C47448) *
                C47369 * C47268) *
               C47222 +
           (((C31092 * C287 - C31090 * C297 + C31093 * C906 - C47481 * C911) *
                 C15921 +
             (C31092 * C298 - C31090 * C317 + C31093 * C912 - C47481 * C921) *
                 C15917 +
             (C31273 - C31274 + C31275 - C31276) * C15922 +
             (C31277 - C31278 + C31279 - C31280) * C47448) *
                C47369 * C3234 +
            ((C31090 * C911 - C31092 * C906 + C47481 * C1267 - C31093 * C1258) *
                 C15921 +
             (C31090 * C921 - C31092 * C912 + C47481 * C1285 - C31093 * C1268) *
                 C15917 +
             (C31953 - C31954 + C31955 - C31956) * C15922 +
             (C31957 - C31958 + C31959 - C31960) * C47448) *
                C47369 * C47268) *
               C47229 +
           (((C31090 * C303 - C31092 * C290 + C47481 * C1273 - C31093 * C1261) *
                 C15921 +
             (C31090 * C320 - C31092 * C304 + C47481 * C1288 - C31093 * C1274) *
                 C15917 +
             (C31281 - C31282 + C31283 - C31284) * C15922 +
             (C31285 - C31286 + C31287 - C31288) * C47448) *
                C47369 * C3234 +
            ((C31092 * C1261 - C31090 * C1273 + C31093 * C1264 -
              C47481 * C1279) *
                 C15921 +
             (C31092 * C1274 - C31090 * C1288 + C31093 * C1280 -
              C47481 * C1291) *
                 C15917 +
             (C32675 - C32676 + C32677 - C32678) * C15922 +
             (C32679 - C32680 + C32681 - C32682) * C47448) *
                C47369 * C47268) *
               C2840) *
              C47415 +
          ((((C31096 - C31095 + C31098 - C31097) * C15921 +
             (C31100 - C31099 + C31102 - C31101) * C15917 +
             (C31103 - C31104 + C31105 - C31106) * C15922 +
             (C31107 - C31108 + C31109 - C31110) * C47448) *
                C47369 * C3234 +
            ((C31452 - C31451 + C31454 - C31453) * C15921 +
             (C31456 - C31455 + C31458 - C31457) * C15917 +
             (C31467 - C31468 + C31469 - C31470) * C15922 +
             (C31471 - C31472 + C31473 - C31474) * C47448) *
                C47369 * C47268) *
               C47222 +
           (((C31274 - C31273 + C31276 - C31275) * C15921 +
             (C31278 - C31277 + C31280 - C31279) * C15917 +
             (C31289 - C31290 + C31291 - C31292) * C15922 +
             (C31293 - C31294 + C31295 - C31296) * C47448) *
                C47369 * C3234 +
            ((C31954 - C31953 + C31956 - C31955) * C15921 +
             (C31958 - C31957 + C31960 - C31959) * C15917 +
             (C31961 - C31962 + C31963 - C31964) * C15922 +
             (C31965 - C31966 + C31967 - C31968) * C47448) *
                C47369 * C47268) *
               C47229 +
           (((C31282 - C31281 + C31284 - C31283) * C15921 +
             (C31286 - C31285 + C31288 - C31287) * C15917 +
             (C31297 - C31298 + C31299 - C31300) * C15922 +
             (C31301 - C31302 + C31303 - C31304) * C47448) *
                C47369 * C3234 +
            ((C32676 - C32675 + C32678 - C32677) * C15921 +
             (C32680 - C32679 + C32682 - C32681) * C15917 +
             (C31090 * C1277 - C31092 * C1263 + C47481 * C1283 -
              C31093 * C1266) *
                 C15922 +
             (C31090 * C1290 - C31092 * C1278 + C47481 * C1293 -
              C31093 * C1284) *
                 C47448) *
                C47369 * C47268) *
               C2840) *
              C47146)) /
        (p * q * std::sqrt(p + q));
    d2ee[156] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C31090 * C124 - C31092 * C117 + C47481 * C478 - C31093 * C468) *
                C15921 +
            (C31090 * C138 - C31092 * C125 + C47481 * C498 - C31093 * C479) *
                C15917 +
            (C31095 - C31096 + C31097 - C31098) * C15922 +
            (C31099 - C31100 + C31101 - C31102) * C47448) *
               C47369 * C47264 +
           ((C31092 * C468 - C31090 * C478 + C31093 * C471 - C47481 * C484) *
                C15921 +
            (C31092 * C479 - C31090 * C498 + C31093 * C485 - C47481 * C501) *
                C15917 +
            (C31451 - C31452 + C31453 - C31454) * C15922 +
            (C31455 - C31456 + C31457 - C31458) * C47448) *
               C47369 * C47271 +
           ((C31090 * C484 - C31092 * C471 + C47481 * C1974 - C31093 * C1968) *
                C15921 +
            (C31090 * C501 - C31092 * C485 + C47481 * C1986 - C31093 * C1975) *
                C15917 +
            (C31459 - C31460 + C31461 - C31462) * C15922 +
            (C31463 - C31464 + C31465 - C31466) * C47448) *
               C47369 * C3742) *
              C47222 +
          (((C31092 * C287 - C31090 * C297 + C31093 * C906 - C47481 * C911) *
                C15921 +
            (C31092 * C298 - C31090 * C317 + C31093 * C912 - C47481 * C921) *
                C15917 +
            (C31273 - C31274 + C31275 - C31276) * C15922 +
            (C31277 - C31278 + C31279 - C31280) * C47448) *
               C47369 * C47264 +
           ((C31090 * C911 - C31092 * C906 + C47481 * C1267 - C31093 * C1258) *
                C15921 +
            (C31090 * C921 - C31092 * C912 + C47481 * C1285 - C31093 * C1268) *
                C15917 +
            (C31953 - C31954 + C31955 - C31956) * C15922 +
            (C31957 - C31958 + C31959 - C31960) * C47448) *
               C47369 * C47271 +
           ((C31092 * C1258 - C31090 * C1267 + C31093 * C2362 -
             C47481 * C2365) *
                C15921 +
            (C31092 * C1268 - C31090 * C1285 + C31093 * C2366 -
             C47481 * C2371) *
                C15917 +
            (C33381 - C33382 + C33383 - C33384) * C15922 +
            (C33385 - C33386 + C33387 - C33388) * C47448) *
               C47369 * C3742) *
              C47229 +
          (((C31090 * C303 - C31092 * C290 + C47481 * C1273 - C31093 * C1261) *
                C15921 +
            (C31090 * C320 - C31092 * C304 + C47481 * C1288 - C31093 * C1274) *
                C15917 +
            (C31281 - C31282 + C31283 - C31284) * C15922 +
            (C31285 - C31286 + C31287 - C31288) * C47448) *
               C47369 * C47264 +
           ((C31092 * C1261 - C31090 * C1273 + C31093 * C1264 -
             C47481 * C1279) *
                C15921 +
            (C31092 * C1274 - C31090 * C1288 + C31093 * C1280 -
             C47481 * C1291) *
                C15917 +
            (C32675 - C32676 + C32677 - C32678) * C15922 +
            (C32679 - C32680 + C32681 - C32682) * C47448) *
               C47369 * C47271 +
           ((C31090 * C1279 - C31092 * C1264 + C47481 * C7241 -
             C31093 * C7239) *
                C15921 +
            (C31090 * C1291 - C31092 * C1280 + C47481 * C7245 -
             C31093 * C7242) *
                C15917 +
            (C31090 * C1281 - C31092 * C1265 + C47481 * C7243 -
             C31093 * C7240) *
                C15922 +
            (C31090 * C1292 - C31092 * C1282 + C47481 * C7246 -
             C31093 * C7244) *
                C47448) *
               C47369 * C3742) *
              C2840) *
         C47135) /
        (p * q * std::sqrt(p + q));
    d2ee[157] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C31090 * C124 - C31092 * C117 + C47481 * C478 - C31093 * C468) *
                C15921 +
            (C31090 * C138 - C31092 * C125 + C47481 * C498 - C31093 * C479) *
                C15917 +
            (C31095 - C31096 + C31097 - C31098) * C15922 +
            (C31099 - C31100 + C31101 - C31102) * C47448) *
               C47369 * C3234 +
           ((C31092 * C468 - C31090 * C478 + C31093 * C471 - C47481 * C484) *
                C15921 +
            (C31092 * C479 - C31090 * C498 + C31093 * C485 - C47481 * C501) *
                C15917 +
            (C31451 - C31452 + C31453 - C31454) * C15922 +
            (C31455 - C31456 + C31457 - C31458) * C47448) *
               C47369 * C47268) *
              C47507 +
          (((C31092 * C287 - C31090 * C297 + C31093 * C906 - C47481 * C911) *
                C15921 +
            (C31092 * C298 - C31090 * C317 + C31093 * C912 - C47481 * C921) *
                C15917 +
            (C31273 - C31274 + C31275 - C31276) * C15922 +
            (C31277 - C31278 + C31279 - C31280) * C47448) *
               C47369 * C3234 +
           ((C31090 * C911 - C31092 * C906 + C47481 * C1267 - C31093 * C1258) *
                C15921 +
            (C31090 * C921 - C31092 * C912 + C47481 * C1285 - C31093 * C1268) *
                C15917 +
            (C31953 - C31954 + C31955 - C31956) * C15922 +
            (C31957 - C31958 + C31959 - C31960) * C47448) *
               C47369 * C47268) *
              C47503 +
          (((C31090 * C303 - C31092 * C290 + C47481 * C1273 - C31093 * C1261) *
                C15921 +
            (C31090 * C320 - C31092 * C304 + C47481 * C1288 - C31093 * C1274) *
                C15917 +
            (C31281 - C31282 + C31283 - C31284) * C15922 +
            (C31285 - C31286 + C31287 - C31288) * C47448) *
               C47369 * C3234 +
           ((C31092 * C1261 - C31090 * C1273 + C31093 * C1264 -
             C47481 * C1279) *
                C15921 +
            (C31092 * C1274 - C31090 * C1288 + C31093 * C1280 -
             C47481 * C1291) *
                C15917 +
            (C32675 - C32676 + C32677 - C32678) * C15922 +
            (C32679 - C32680 + C32681 - C32682) * C47448) *
               C47369 * C47268) *
              C47493 +
          (((C31092 * C1124 - C31090 * C1130 + C31093 * C1666 -
             C47481 * C1669) *
                C15921 +
            (C31092 * C1131 - C31090 * C1142 + C31093 * C1670 -
             C47481 * C1675) *
                C15917 +
            (C32473 - C32474 + C32475 - C32476) * C15922 +
            (C32477 - C32478 + C32479 - C32480) * C47448) *
               C47369 * C3234 +
           ((C31090 * C1669 - C31092 * C1666 + C47481 * C5895 -
             C31093 * C5893) *
                C15921 +
            (C31090 * C1675 - C31092 * C1670 + C47481 * C5899 -
             C31093 * C5896) *
                C15917 +
            (C31090 * C1671 - C31092 * C1667 + C47481 * C5897 -
             C31093 * C5894) *
                C15922 +
            (C31090 * C1676 - C31092 * C1672 + C47481 * C5900 -
             C31093 * C5898) *
                C47448) *
               C47369 * C47268) *
              C47471) *
         C47135) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C31090 * C124 - C31092 * C117 + C47481 * C478 - C31093 * C468) *
                 C15921 +
             (C31090 * C138 - C31092 * C125 + C47481 * C498 - C31093 * C479) *
                 C15917 +
             (C31095 - C31096 + C31097 - C31098) * C15922 +
             (C31099 - C31100 + C31101 - C31102) * C47448) *
                C47369 * C3234 +
            ((C31092 * C468 - C31090 * C478 + C31093 * C471 - C47481 * C484) *
                 C15921 +
             (C31092 * C479 - C31090 * C498 + C31093 * C485 - C47481 * C501) *
                 C15917 +
             (C31451 - C31452 + C31453 - C31454) * C15922 +
             (C31455 - C31456 + C31457 - C31458) * C47448) *
                C47369 * C47268) *
               C2472 +
           (((C31092 * C287 - C31090 * C297 + C31093 * C906 - C47481 * C911) *
                 C15921 +
             (C31092 * C298 - C31090 * C317 + C31093 * C912 - C47481 * C921) *
                 C15917 +
             (C31273 - C31274 + C31275 - C31276) * C15922 +
             (C31277 - C31278 + C31279 - C31280) * C47448) *
                C47369 * C3234 +
            ((C31090 * C911 - C31092 * C906 + C47481 * C1267 - C31093 * C1258) *
                 C15921 +
             (C31090 * C921 - C31092 * C912 + C47481 * C1285 - C31093 * C1268) *
                 C15917 +
             (C31953 - C31954 + C31955 - C31956) * C15922 +
             (C31957 - C31958 + C31959 - C31960) * C47448) *
                C47369 * C47268) *
               C47226) *
              C47497 +
          ((((C31096 - C31095 + C31098 - C31097) * C15921 +
             (C31100 - C31099 + C31102 - C31101) * C15917 +
             (C31103 - C31104 + C31105 - C31106) * C15922 +
             (C31107 - C31108 + C31109 - C31110) * C47448) *
                C47369 * C3234 +
            ((C31452 - C31451 + C31454 - C31453) * C15921 +
             (C31456 - C31455 + C31458 - C31457) * C15917 +
             (C31467 - C31468 + C31469 - C31470) * C15922 +
             (C31471 - C31472 + C31473 - C31474) * C47448) *
                C47369 * C47268) *
               C2472 +
           (((C31274 - C31273 + C31276 - C31275) * C15921 +
             (C31278 - C31277 + C31280 - C31279) * C15917 +
             (C31289 - C31290 + C31291 - C31292) * C15922 +
             (C31293 - C31294 + C31295 - C31296) * C47448) *
                C47369 * C3234 +
            ((C31954 - C31953 + C31956 - C31955) * C15921 +
             (C31958 - C31957 + C31960 - C31959) * C15917 +
             (C31961 - C31962 + C31963 - C31964) * C15922 +
             (C31965 - C31966 + C31967 - C31968) * C47448) *
                C47369 * C47268) *
               C47226) *
              C47484 +
          ((((C31104 - C31103 + C31106 - C31105) * C15921 +
             (C31108 - C31107 + C31110 - C31109) * C15917 +
             (C31111 - C31112 + C31113 - C31114) * C15922 +
             (C31115 - C31116 + C31117 - C31118) * C47448) *
                C47369 * C3234 +
            ((C31468 - C31467 + C31470 - C31469) * C15921 +
             (C31472 - C31471 + C31474 - C31473) * C15917 +
             (C31751 - C31752 + C31753 - C31754) * C15922 +
             (C31755 - C31756 + C31757 - C31758) * C47448) *
                C47369 * C47268) *
               C2472 +
           (((C31290 - C31289 + C31292 - C31291) * C15921 +
             (C31294 - C31293 + C31296 - C31295) * C15917 +
             (C31613 - C31614 + C31615 - C31616) * C15922 +
             (C31617 - C31618 + C31619 - C31620) * C47448) *
                C47369 * C3234 +
            ((C31962 - C31961 + C31964 - C31963) * C15921 +
             (C31966 - C31965 + C31968 - C31967) * C15917 +
             (C31090 * C917 - C31092 * C909 + C47481 * C2139 - C31093 * C2138) *
                 C15922 +
             (C31090 * C924 - C31092 * C918 + C47481 * C2141 - C31093 * C2140) *
                 C47448) *
                C47369 * C47268) *
               C47226) *
              C47455)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C31090 * C124 - C31092 * C117 + C47481 * C478 - C31093 * C468) *
                C15921 +
            (C31090 * C138 - C31092 * C125 + C47481 * C498 - C31093 * C479) *
                C15917 +
            (C31095 - C31096 + C31097 - C31098) * C15922 +
            (C31099 - C31100 + C31101 - C31102) * C47448) *
               C47369 * C47508 +
           ((C31092 * C468 - C31090 * C478 + C31093 * C471 - C47481 * C484) *
                C15921 +
            (C31092 * C479 - C31090 * C498 + C31093 * C485 - C47481 * C501) *
                C15917 +
            (C31451 - C31452 + C31453 - C31454) * C15922 +
            (C31455 - C31456 + C31457 - C31458) * C47448) *
               C47369 * C47505 +
           ((C31090 * C484 - C31092 * C471 + C47481 * C1974 - C31093 * C1968) *
                C15921 +
            (C31090 * C501 - C31092 * C485 + C47481 * C1986 - C31093 * C1975) *
                C15917 +
            (C31459 - C31460 + C31461 - C31462) * C15922 +
            (C31463 - C31464 + C31465 - C31466) * C47448) *
               C47369 * C47496 +
           ((C31092 * C1968 - C31090 * C1974 + C31093 * C1971 -
             C47481 * C1980) *
                C15921 +
            (C31092 * C1975 - C31090 * C1986 + C31093 * C1981 -
             C47481 * C1989) *
                C15917 +
            (C33519 - C33520 + C33521 - C33522) * C15922 +
            (C33523 - C33524 + C33525 - C33526) * C47448) *
               C47369 * C47477) *
              C2472 +
          (((C31092 * C287 - C31090 * C297 + C31093 * C906 - C47481 * C911) *
                C15921 +
            (C31092 * C298 - C31090 * C317 + C31093 * C912 - C47481 * C921) *
                C15917 +
            (C31273 - C31274 + C31275 - C31276) * C15922 +
            (C31277 - C31278 + C31279 - C31280) * C47448) *
               C47369 * C47508 +
           ((C31090 * C911 - C31092 * C906 + C47481 * C1267 - C31093 * C1258) *
                C15921 +
            (C31090 * C921 - C31092 * C912 + C47481 * C1285 - C31093 * C1268) *
                C15917 +
            (C31953 - C31954 + C31955 - C31956) * C15922 +
            (C31957 - C31958 + C31959 - C31960) * C47448) *
               C47369 * C47505 +
           ((C31092 * C1258 - C31090 * C1267 + C31093 * C2362 -
             C47481 * C2365) *
                C15921 +
            (C31092 * C1268 - C31090 * C1285 + C31093 * C2366 -
             C47481 * C2371) *
                C15917 +
            (C33381 - C33382 + C33383 - C33384) * C15922 +
            (C33385 - C33386 + C33387 - C33388) * C47448) *
               C47369 * C47496 +
           ((C31090 * C2365 - C31092 * C2362 + C47481 * C6771 -
             C31093 * C6769) *
                C15921 +
            (C31090 * C2371 - C31092 * C2366 + C47481 * C6775 -
             C31093 * C6772) *
                C15917 +
            (C31090 * C2367 - C31092 * C2363 + C47481 * C6773 -
             C31093 * C6770) *
                C15922 +
            (C31090 * C2372 - C31092 * C2368 + C47481 * C6776 -
             C31093 * C6774) *
                C47448) *
               C47369 * C47477) *
              C47226) *
         C47135) /
            (p * q * std::sqrt(p + q));
    d2ee[158] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C31090 * C124 - C31092 * C117 + C47481 * C478 - C31093 * C468) *
                 C15921 +
             (C31090 * C138 - C31092 * C125 + C47481 * C498 - C31093 * C479) *
                 C15917 +
             (C31095 - C31096 + C31097 - C31098) * C15922 +
             (C31099 - C31100 + C31101 - C31102) * C47448) *
                C47369 * C47264 +
            ((C31092 * C468 - C31090 * C478 + C31093 * C471 - C47481 * C484) *
                 C15921 +
             (C31092 * C479 - C31090 * C498 + C31093 * C485 - C47481 * C501) *
                 C15917 +
             (C31451 - C31452 + C31453 - C31454) * C15922 +
             (C31455 - C31456 + C31457 - C31458) * C47448) *
                C47369 * C47271 +
            ((C31090 * C484 - C31092 * C471 + C47481 * C1974 - C31093 * C1968) *
                 C15921 +
             (C31090 * C501 - C31092 * C485 + C47481 * C1986 - C31093 * C1975) *
                 C15917 +
             (C31459 - C31460 + C31461 - C31462) * C15922 +
             (C31463 - C31464 + C31465 - C31466) * C47448) *
                C47369 * C3742) *
               C2472 +
           (((C31092 * C287 - C31090 * C297 + C31093 * C906 - C47481 * C911) *
                 C15921 +
             (C31092 * C298 - C31090 * C317 + C31093 * C912 - C47481 * C921) *
                 C15917 +
             (C31273 - C31274 + C31275 - C31276) * C15922 +
             (C31277 - C31278 + C31279 - C31280) * C47448) *
                C47369 * C47264 +
            ((C31090 * C911 - C31092 * C906 + C47481 * C1267 - C31093 * C1258) *
                 C15921 +
             (C31090 * C921 - C31092 * C912 + C47481 * C1285 - C31093 * C1268) *
                 C15917 +
             (C31953 - C31954 + C31955 - C31956) * C15922 +
             (C31957 - C31958 + C31959 - C31960) * C47448) *
                C47369 * C47271 +
            ((C31092 * C1258 - C31090 * C1267 + C31093 * C2362 -
              C47481 * C2365) *
                 C15921 +
             (C31092 * C1268 - C31090 * C1285 + C31093 * C2366 -
              C47481 * C2371) *
                 C15917 +
             (C33381 - C33382 + C33383 - C33384) * C15922 +
             (C33385 - C33386 + C33387 - C33388) * C47448) *
                C47369 * C3742) *
               C47226) *
              C47415 +
          ((((C31096 - C31095 + C31098 - C31097) * C15921 +
             (C31100 - C31099 + C31102 - C31101) * C15917 +
             (C31103 - C31104 + C31105 - C31106) * C15922 +
             (C31107 - C31108 + C31109 - C31110) * C47448) *
                C47369 * C47264 +
            ((C31452 - C31451 + C31454 - C31453) * C15921 +
             (C31456 - C31455 + C31458 - C31457) * C15917 +
             (C31467 - C31468 + C31469 - C31470) * C15922 +
             (C31471 - C31472 + C31473 - C31474) * C47448) *
                C47369 * C47271 +
            ((C31460 - C31459 + C31462 - C31461) * C15921 +
             (C31464 - C31463 + C31466 - C31465) * C15917 +
             (C31475 - C31476 + C31477 - C31478) * C15922 +
             (C31479 - C31480 + C31481 - C31482) * C47448) *
                C47369 * C3742) *
               C2472 +
           (((C31274 - C31273 + C31276 - C31275) * C15921 +
             (C31278 - C31277 + C31280 - C31279) * C15917 +
             (C31289 - C31290 + C31291 - C31292) * C15922 +
             (C31293 - C31294 + C31295 - C31296) * C47448) *
                C47369 * C47264 +
            ((C31954 - C31953 + C31956 - C31955) * C15921 +
             (C31958 - C31957 + C31960 - C31959) * C15917 +
             (C31961 - C31962 + C31963 - C31964) * C15922 +
             (C31965 - C31966 + C31967 - C31968) * C47448) *
                C47369 * C47271 +
            ((C33382 - C33381 + C33384 - C33383) * C15921 +
             (C33386 - C33385 + C33388 - C33387) * C15917 +
             (C31090 * C1271 - C31092 * C1260 + C47481 * C2369 -
              C31093 * C2364) *
                 C15922 +
             (C31090 * C1287 - C31092 * C1272 + C47481 * C2373 -
              C31093 * C2370) *
                 C47448) *
                C47369 * C3742) *
               C47226) *
              C47146)) /
        (p * q * std::sqrt(p + q));
    d2ee[159] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C31090 * C124 - C31092 * C117 + C47481 * C478 - C31093 * C468) *
                 C15921 +
             (C31090 * C138 - C31092 * C125 + C47481 * C498 - C31093 * C479) *
                 C15917 +
             (C31095 - C31096 + C31097 - C31098) * C15922 +
             (C31099 - C31100 + C31101 - C31102) * C47448) *
                C47369 * C3234 +
            ((C31092 * C468 - C31090 * C478 + C31093 * C471 - C47481 * C484) *
                 C15921 +
             (C31092 * C479 - C31090 * C498 + C31093 * C485 - C47481 * C501) *
                 C15917 +
             (C31451 - C31452 + C31453 - C31454) * C15922 +
             (C31455 - C31456 + C31457 - C31458) * C47448) *
                C47369 * C47268) *
               C2472 +
           (((C31092 * C287 - C31090 * C297 + C31093 * C906 - C47481 * C911) *
                 C15921 +
             (C31092 * C298 - C31090 * C317 + C31093 * C912 - C47481 * C921) *
                 C15917 +
             (C31273 - C31274 + C31275 - C31276) * C15922 +
             (C31277 - C31278 + C31279 - C31280) * C47448) *
                C47369 * C3234 +
            ((C31090 * C911 - C31092 * C906 + C47481 * C1267 - C31093 * C1258) *
                 C15921 +
             (C31090 * C921 - C31092 * C912 + C47481 * C1285 - C31093 * C1268) *
                 C15917 +
             (C31953 - C31954 + C31955 - C31956) * C15922 +
             (C31957 - C31958 + C31959 - C31960) * C47448) *
                C47369 * C47268) *
               C47226) *
              C47497 +
          ((((C31096 - C31095 + C31098 - C31097) * C15921 +
             (C31100 - C31099 + C31102 - C31101) * C15917 +
             (C31103 - C31104 + C31105 - C31106) * C15922 +
             (C31107 - C31108 + C31109 - C31110) * C47448) *
                C47369 * C3234 +
            ((C31452 - C31451 + C31454 - C31453) * C15921 +
             (C31456 - C31455 + C31458 - C31457) * C15917 +
             (C31467 - C31468 + C31469 - C31470) * C15922 +
             (C31471 - C31472 + C31473 - C31474) * C47448) *
                C47369 * C47268) *
               C2472 +
           (((C31274 - C31273 + C31276 - C31275) * C15921 +
             (C31278 - C31277 + C31280 - C31279) * C15917 +
             (C31289 - C31290 + C31291 - C31292) * C15922 +
             (C31293 - C31294 + C31295 - C31296) * C47448) *
                C47369 * C3234 +
            ((C31954 - C31953 + C31956 - C31955) * C15921 +
             (C31958 - C31957 + C31960 - C31959) * C15917 +
             (C31961 - C31962 + C31963 - C31964) * C15922 +
             (C31965 - C31966 + C31967 - C31968) * C47448) *
                C47369 * C47268) *
               C47226) *
              C47484 +
          ((((C31104 - C31103 + C31106 - C31105) * C15921 +
             (C31108 - C31107 + C31110 - C31109) * C15917 +
             (C31111 - C31112 + C31113 - C31114) * C15922 +
             (C31115 - C31116 + C31117 - C31118) * C47448) *
                C47369 * C3234 +
            ((C31468 - C31467 + C31470 - C31469) * C15921 +
             (C31472 - C31471 + C31474 - C31473) * C15917 +
             (C31751 - C31752 + C31753 - C31754) * C15922 +
             (C31755 - C31756 + C31757 - C31758) * C47448) *
                C47369 * C47268) *
               C2472 +
           (((C31290 - C31289 + C31292 - C31291) * C15921 +
             (C31294 - C31293 + C31296 - C31295) * C15917 +
             (C31613 - C31614 + C31615 - C31616) * C15922 +
             (C31617 - C31618 + C31619 - C31620) * C47448) *
                C47369 * C3234 +
            ((C31962 - C31961 + C31964 - C31963) * C15921 +
             (C31966 - C31965 + C31968 - C31967) * C15917 +
             (C31090 * C917 - C31092 * C909 + C47481 * C2139 - C31093 * C2138) *
                 C15922 +
             (C31090 * C924 - C31092 * C918 + C47481 * C2141 - C31093 * C2140) *
                 C47448) *
                C47369 * C47268) *
               C47226) *
              C47455)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C31090 * C124 - C31092 * C117 + C47481 * C478 - C31093 * C468) *
                C15921 +
            (C31090 * C138 - C31092 * C125 + C47481 * C498 - C31093 * C479) *
                C15917 +
            (C31095 - C31096 + C31097 - C31098) * C15922 +
            (C31099 - C31100 + C31101 - C31102) * C47448) *
               C47369 * C3234 +
           ((C31092 * C468 - C31090 * C478 + C31093 * C471 - C47481 * C484) *
                C15921 +
            (C31092 * C479 - C31090 * C498 + C31093 * C485 - C47481 * C501) *
                C15917 +
            (C31451 - C31452 + C31453 - C31454) * C15922 +
            (C31455 - C31456 + C31457 - C31458) * C47448) *
               C47369 * C47268) *
              C47507 +
          (((C31092 * C287 - C31090 * C297 + C31093 * C906 - C47481 * C911) *
                C15921 +
            (C31092 * C298 - C31090 * C317 + C31093 * C912 - C47481 * C921) *
                C15917 +
            (C31273 - C31274 + C31275 - C31276) * C15922 +
            (C31277 - C31278 + C31279 - C31280) * C47448) *
               C47369 * C3234 +
           ((C31090 * C911 - C31092 * C906 + C47481 * C1267 - C31093 * C1258) *
                C15921 +
            (C31090 * C921 - C31092 * C912 + C47481 * C1285 - C31093 * C1268) *
                C15917 +
            (C31953 - C31954 + C31955 - C31956) * C15922 +
            (C31957 - C31958 + C31959 - C31960) * C47448) *
               C47369 * C47268) *
              C47503 +
          (((C31090 * C303 - C31092 * C290 + C47481 * C1273 - C31093 * C1261) *
                C15921 +
            (C31090 * C320 - C31092 * C304 + C47481 * C1288 - C31093 * C1274) *
                C15917 +
            (C31281 - C31282 + C31283 - C31284) * C15922 +
            (C31285 - C31286 + C31287 - C31288) * C47448) *
               C47369 * C3234 +
           ((C31092 * C1261 - C31090 * C1273 + C31093 * C1264 -
             C47481 * C1279) *
                C15921 +
            (C31092 * C1274 - C31090 * C1288 + C31093 * C1280 -
             C47481 * C1291) *
                C15917 +
            (C32675 - C32676 + C32677 - C32678) * C15922 +
            (C32679 - C32680 + C32681 - C32682) * C47448) *
               C47369 * C47268) *
              C47493 +
          (((C31092 * C1124 - C31090 * C1130 + C31093 * C1666 -
             C47481 * C1669) *
                C15921 +
            (C31092 * C1131 - C31090 * C1142 + C31093 * C1670 -
             C47481 * C1675) *
                C15917 +
            (C32473 - C32474 + C32475 - C32476) * C15922 +
            (C32477 - C32478 + C32479 - C32480) * C47448) *
               C47369 * C3234 +
           ((C31090 * C1669 - C31092 * C1666 + C47481 * C5895 -
             C31093 * C5893) *
                C15921 +
            (C31090 * C1675 - C31092 * C1670 + C47481 * C5899 -
             C31093 * C5896) *
                C15917 +
            (C31090 * C1671 - C31092 * C1667 + C47481 * C5897 -
             C31093 * C5894) *
                C15922 +
            (C31090 * C1676 - C31092 * C1672 + C47481 * C5900 -
             C31093 * C5898) *
                C47448) *
               C47369 * C47268) *
              C47471) *
         C47135) /
            (p * q * std::sqrt(p + q));
    d2ee[160] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C31090 * C124 - C31092 * C117 + C47481 * C478 - C31093 * C468) *
                C15921 +
            (C31090 * C138 - C31092 * C125 + C47481 * C498 - C31093 * C479) *
                C15917 +
            (C31095 - C31096 + C31097 - C31098) * C15922 +
            (C31099 - C31100 + C31101 - C31102) * C47448) *
               C47369 * C47181 * C1392 +
           ((C31092 * C287 - C31090 * C297 + C31093 * C906 - C47481 * C911) *
                C15921 +
            (C31092 * C298 - C31090 * C317 + C31093 * C912 - C47481 * C921) *
                C15917 +
            (C31273 - C31274 + C31275 - C31276) * C15922 +
            (C31277 - C31278 + C31279 - C31280) * C47448) *
               C47369 * C47181 * C1393 +
           ((C31090 * C303 - C31092 * C290 + C47481 * C1273 - C31093 * C1261) *
                C15921 +
            (C31090 * C320 - C31092 * C304 + C47481 * C1288 - C31093 * C1274) *
                C15917 +
            (C31281 - C31282 + C31283 - C31284) * C15922 +
            (C31285 - C31286 + C31287 - C31288) * C47448) *
               C47369 * C47181 * C1394 +
           ((C31092 * C1124 - C31090 * C1130 + C31093 * C1666 -
             C47481 * C1669) *
                C15921 +
            (C31092 * C1131 - C31090 * C1142 + C31093 * C1670 -
             C47481 * C1675) *
                C15917 +
            (C32473 - C32474 + C32475 - C32476) * C15922 +
            (C32477 - C32478 + C32479 - C32480) * C47448) *
               C47369 * C47181 * C47471) *
              C47415 +
          (((C31096 - C31095 + C31098 - C31097) * C15921 +
            (C31100 - C31099 + C31102 - C31101) * C15917 +
            (C31103 - C31104 + C31105 - C31106) * C15922 +
            (C31107 - C31108 + C31109 - C31110) * C47448) *
               C47369 * C47181 * C1392 +
           ((C31274 - C31273 + C31276 - C31275) * C15921 +
            (C31278 - C31277 + C31280 - C31279) * C15917 +
            (C31289 - C31290 + C31291 - C31292) * C15922 +
            (C31293 - C31294 + C31295 - C31296) * C47448) *
               C47369 * C47181 * C1393 +
           ((C31282 - C31281 + C31284 - C31283) * C15921 +
            (C31286 - C31285 + C31288 - C31287) * C15917 +
            (C31297 - C31298 + C31299 - C31300) * C15922 +
            (C31301 - C31302 + C31303 - C31304) * C47448) *
               C47369 * C47181 * C1394 +
           ((C32474 - C32473 + C32476 - C32475) * C15921 +
            (C32478 - C32477 + C32480 - C32479) * C15917 +
            (C31090 * C1134 - C31092 * C1126 + C47481 * C1673 -
             C31093 * C1668) *
                C15922 +
            (C31090 * C1144 - C31092 * C1135 + C47481 * C1677 -
             C31093 * C1674) *
                C47448) *
               C47369 * C47181 * C47471) *
              C47146)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C31090 * C124 - C31092 * C117 + C47481 * C478 - C31093 * C468) *
                C15921 +
            (C31090 * C138 - C31092 * C125 + C47481 * C498 - C31093 * C479) *
                C15917 +
            (C31095 - C31096 + C31097 - C31098) * C15922 +
            (C31099 - C31100 + C31101 - C31102) * C47448) *
               C47369 * C47181 * C47429 +
           ((C31092 * C287 - C31090 * C297 + C31093 * C906 - C47481 * C911) *
                C15921 +
            (C31092 * C298 - C31090 * C317 + C31093 * C912 - C47481 * C921) *
                C15917 +
            (C31273 - C31274 + C31275 - C31276) * C15922 +
            (C31277 - C31278 + C31279 - C31280) * C47448) *
               C47369 * C47181 * C47226) *
              C636 +
          (((C31096 - C31095 + C31098 - C31097) * C15921 +
            (C31100 - C31099 + C31102 - C31101) * C15917 +
            (C31103 - C31104 + C31105 - C31106) * C15922 +
            (C31107 - C31108 + C31109 - C31110) * C47448) *
               C47369 * C47181 * C47429 +
           ((C31274 - C31273 + C31276 - C31275) * C15921 +
            (C31278 - C31277 + C31280 - C31279) * C15917 +
            (C31289 - C31290 + C31291 - C31292) * C15922 +
            (C31293 - C31294 + C31295 - C31296) * C47448) *
               C47369 * C47181 * C47226) *
              C637 +
          (((C31104 - C31103 + C31106 - C31105) * C15921 +
            (C31108 - C31107 + C31110 - C31109) * C15917 +
            (C31111 - C31112 + C31113 - C31114) * C15922 +
            (C31115 - C31116 + C31117 - C31118) * C47448) *
               C47369 * C47181 * C47429 +
           ((C31290 - C31289 + C31292 - C31291) * C15921 +
            (C31294 - C31293 + C31296 - C31295) * C15917 +
            (C31613 - C31614 + C31615 - C31616) * C15922 +
            (C31617 - C31618 + C31619 - C31620) * C47448) *
               C47369 * C47181 * C47226) *
              C638 +
          (((C31112 - C31111 + C31114 - C31113) * C15921 +
            (C31116 - C31115 + C31118 - C31117) * C15917 +
            (C31119 - C31120 + C31121 - C31122) * C15922 +
            (C31123 - C31124 + C31125 - C31126) * C47448) *
               C47369 * C47181 * C47429 +
           ((C31614 - C31613 + C31616 - C31615) * C15921 +
            (C31618 - C31617 + C31620 - C31619) * C15917 +
            (C31090 * C313 - C31092 * C295 + C47481 * C919 - C31093 * C910) *
                C15922 +
            (C31090 * C325 - C31092 * C314 + C47481 * C925 - C31093 * C920) *
                C47448) *
               C47369 * C47181 * C47226) *
              C47465)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C31090 * C124 - C31092 * C117 + C47481 * C478 - C31093 * C468) *
                 C15921 +
             (C31090 * C138 - C31092 * C125 + C47481 * C498 - C31093 * C479) *
                 C15917 +
             (C31095 - C31096 + C31097 - C31098) * C15922 +
             (C31099 - C31100 + C31101 - C31102) * C47448) *
                C47369 * C1788 +
            ((C31092 * C468 - C31090 * C478 + C31093 * C471 - C47481 * C484) *
                 C15921 +
             (C31092 * C479 - C31090 * C498 + C31093 * C485 - C47481 * C501) *
                 C15917 +
             (C31451 - C31452 + C31453 - C31454) * C15922 +
             (C31455 - C31456 + C31457 - C31458) * C47448) *
                C47369 * C1789 +
            ((C31090 * C484 - C31092 * C471 + C47481 * C1974 - C31093 * C1968) *
                 C15921 +
             (C31090 * C501 - C31092 * C485 + C47481 * C1986 - C31093 * C1975) *
                 C15917 +
             (C31459 - C31460 + C31461 - C31462) * C15922 +
             (C31463 - C31464 + C31465 - C31466) * C47448) *
                C47369 * C47464) *
               C47429 +
           (((C31092 * C287 - C31090 * C297 + C31093 * C906 - C47481 * C911) *
                 C15921 +
             (C31092 * C298 - C31090 * C317 + C31093 * C912 - C47481 * C921) *
                 C15917 +
             (C31273 - C31274 + C31275 - C31276) * C15922 +
             (C31277 - C31278 + C31279 - C31280) * C47448) *
                C47369 * C1788 +
            ((C31090 * C911 - C31092 * C906 + C47481 * C1267 - C31093 * C1258) *
                 C15921 +
             (C31090 * C921 - C31092 * C912 + C47481 * C1285 - C31093 * C1268) *
                 C15917 +
             (C31953 - C31954 + C31955 - C31956) * C15922 +
             (C31957 - C31958 + C31959 - C31960) * C47448) *
                C47369 * C1789 +
            ((C31092 * C1258 - C31090 * C1267 + C31093 * C2362 -
              C47481 * C2365) *
                 C15921 +
             (C31092 * C1268 - C31090 * C1285 + C31093 * C2366 -
              C47481 * C2371) *
                 C15917 +
             (C33381 - C33382 + C33383 - C33384) * C15922 +
             (C33385 - C33386 + C33387 - C33388) * C47448) *
                C47369 * C47464) *
               C47226) *
              C47415 +
          ((((C31096 - C31095 + C31098 - C31097) * C15921 +
             (C31100 - C31099 + C31102 - C31101) * C15917 +
             (C31103 - C31104 + C31105 - C31106) * C15922 +
             (C31107 - C31108 + C31109 - C31110) * C47448) *
                C47369 * C1788 +
            ((C31452 - C31451 + C31454 - C31453) * C15921 +
             (C31456 - C31455 + C31458 - C31457) * C15917 +
             (C31467 - C31468 + C31469 - C31470) * C15922 +
             (C31471 - C31472 + C31473 - C31474) * C47448) *
                C47369 * C1789 +
            ((C31460 - C31459 + C31462 - C31461) * C15921 +
             (C31464 - C31463 + C31466 - C31465) * C15917 +
             (C31475 - C31476 + C31477 - C31478) * C15922 +
             (C31479 - C31480 + C31481 - C31482) * C47448) *
                C47369 * C47464) *
               C47429 +
           (((C31274 - C31273 + C31276 - C31275) * C15921 +
             (C31278 - C31277 + C31280 - C31279) * C15917 +
             (C31289 - C31290 + C31291 - C31292) * C15922 +
             (C31293 - C31294 + C31295 - C31296) * C47448) *
                C47369 * C1788 +
            ((C31954 - C31953 + C31956 - C31955) * C15921 +
             (C31958 - C31957 + C31960 - C31959) * C15917 +
             (C31961 - C31962 + C31963 - C31964) * C15922 +
             (C31965 - C31966 + C31967 - C31968) * C47448) *
                C47369 * C1789 +
            ((C33382 - C33381 + C33384 - C33383) * C15921 +
             (C33386 - C33385 + C33388 - C33387) * C15917 +
             (C31090 * C1271 - C31092 * C1260 + C47481 * C2369 -
              C31093 * C2364) *
                 C15922 +
             (C31090 * C1287 - C31092 * C1272 + C47481 * C2373 -
              C31093 * C2370) *
                 C47448) *
                C47369 * C47464) *
               C47226) *
              C47146)) /
            (p * q * std::sqrt(p + q));
    d2ee[161] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C31090 * C124 - C31092 * C117 + C47481 * C478 - C31093 * C468) *
                C15921 +
            (C31090 * C138 - C31092 * C125 + C47481 * C498 - C31093 * C479) *
                C15917 +
            (C31095 - C31096 + C31097 - C31098) * C15922 +
            (C31099 - C31100 + C31101 - C31102) * C47448) *
               C47369 * C47430 +
           ((C31092 * C468 - C31090 * C478 + C31093 * C471 - C47481 * C484) *
                C15921 +
            (C31092 * C479 - C31090 * C498 + C31093 * C485 - C47481 * C501) *
                C15917 +
            (C31451 - C31452 + C31453 - C31454) * C15922 +
            (C31455 - C31456 + C31457 - C31458) * C47448) *
               C47369 * C47268) *
              C1392 +
          (((C31092 * C287 - C31090 * C297 + C31093 * C906 - C47481 * C911) *
                C15921 +
            (C31092 * C298 - C31090 * C317 + C31093 * C912 - C47481 * C921) *
                C15917 +
            (C31273 - C31274 + C31275 - C31276) * C15922 +
            (C31277 - C31278 + C31279 - C31280) * C47448) *
               C47369 * C47430 +
           ((C31090 * C911 - C31092 * C906 + C47481 * C1267 - C31093 * C1258) *
                C15921 +
            (C31090 * C921 - C31092 * C912 + C47481 * C1285 - C31093 * C1268) *
                C15917 +
            (C31953 - C31954 + C31955 - C31956) * C15922 +
            (C31957 - C31958 + C31959 - C31960) * C47448) *
               C47369 * C47268) *
              C1393 +
          (((C31090 * C303 - C31092 * C290 + C47481 * C1273 - C31093 * C1261) *
                C15921 +
            (C31090 * C320 - C31092 * C304 + C47481 * C1288 - C31093 * C1274) *
                C15917 +
            (C31281 - C31282 + C31283 - C31284) * C15922 +
            (C31285 - C31286 + C31287 - C31288) * C47448) *
               C47369 * C47430 +
           ((C31092 * C1261 - C31090 * C1273 + C31093 * C1264 -
             C47481 * C1279) *
                C15921 +
            (C31092 * C1274 - C31090 * C1288 + C31093 * C1280 -
             C47481 * C1291) *
                C15917 +
            (C32675 - C32676 + C32677 - C32678) * C15922 +
            (C32679 - C32680 + C32681 - C32682) * C47448) *
               C47369 * C47268) *
              C1394 +
          (((C31092 * C1124 - C31090 * C1130 + C31093 * C1666 -
             C47481 * C1669) *
                C15921 +
            (C31092 * C1131 - C31090 * C1142 + C31093 * C1670 -
             C47481 * C1675) *
                C15917 +
            (C32473 - C32474 + C32475 - C32476) * C15922 +
            (C32477 - C32478 + C32479 - C32480) * C47448) *
               C47369 * C47430 +
           ((C31090 * C1669 - C31092 * C1666 + C47481 * C5895 -
             C31093 * C5893) *
                C15921 +
            (C31090 * C1675 - C31092 * C1670 + C47481 * C5899 -
             C31093 * C5896) *
                C15917 +
            (C31090 * C1671 - C31092 * C1667 + C47481 * C5897 -
             C31093 * C5894) *
                C15922 +
            (C31090 * C1676 - C31092 * C1672 + C47481 * C5900 -
             C31093 * C5898) *
                C47448) *
               C47369 * C47268) *
              C47471) *
         C47135) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C31090 * C124 - C31092 * C117 + C47481 * C478 - C31093 * C468) *
                 C15921 +
             (C31090 * C138 - C31092 * C125 + C47481 * C498 - C31093 * C479) *
                 C15917 +
             (C31095 - C31096 + C31097 - C31098) * C15922 +
             (C31099 - C31100 + C31101 - C31102) * C47448) *
                C47369 * C47430 +
            ((C31092 * C468 - C31090 * C478 + C31093 * C471 - C47481 * C484) *
                 C15921 +
             (C31092 * C479 - C31090 * C498 + C31093 * C485 - C47481 * C501) *
                 C15917 +
             (C31451 - C31452 + C31453 - C31454) * C15922 +
             (C31455 - C31456 + C31457 - C31458) * C47448) *
                C47369 * C47268) *
               C47429 +
           (((C31092 * C287 - C31090 * C297 + C31093 * C906 - C47481 * C911) *
                 C15921 +
             (C31092 * C298 - C31090 * C317 + C31093 * C912 - C47481 * C921) *
                 C15917 +
             (C31273 - C31274 + C31275 - C31276) * C15922 +
             (C31277 - C31278 + C31279 - C31280) * C47448) *
                C47369 * C47430 +
            ((C31090 * C911 - C31092 * C906 + C47481 * C1267 - C31093 * C1258) *
                 C15921 +
             (C31090 * C921 - C31092 * C912 + C47481 * C1285 - C31093 * C1268) *
                 C15917 +
             (C31953 - C31954 + C31955 - C31956) * C15922 +
             (C31957 - C31958 + C31959 - C31960) * C47448) *
                C47369 * C47268) *
               C47226) *
              C284 +
          ((((C31096 - C31095 + C31098 - C31097) * C15921 +
             (C31100 - C31099 + C31102 - C31101) * C15917 +
             (C31103 - C31104 + C31105 - C31106) * C15922 +
             (C31107 - C31108 + C31109 - C31110) * C47448) *
                C47369 * C47430 +
            ((C31452 - C31451 + C31454 - C31453) * C15921 +
             (C31456 - C31455 + C31458 - C31457) * C15917 +
             (C31467 - C31468 + C31469 - C31470) * C15922 +
             (C31471 - C31472 + C31473 - C31474) * C47448) *
                C47369 * C47268) *
               C47429 +
           (((C31274 - C31273 + C31276 - C31275) * C15921 +
             (C31278 - C31277 + C31280 - C31279) * C15917 +
             (C31289 - C31290 + C31291 - C31292) * C15922 +
             (C31293 - C31294 + C31295 - C31296) * C47448) *
                C47369 * C47430 +
            ((C31954 - C31953 + C31956 - C31955) * C15921 +
             (C31958 - C31957 + C31960 - C31959) * C15917 +
             (C31961 - C31962 + C31963 - C31964) * C15922 +
             (C31965 - C31966 + C31967 - C31968) * C47448) *
                C47369 * C47268) *
               C47226) *
              C285 +
          ((((C31104 - C31103 + C31106 - C31105) * C15921 +
             (C31108 - C31107 + C31110 - C31109) * C15917 +
             (C31111 - C31112 + C31113 - C31114) * C15922 +
             (C31115 - C31116 + C31117 - C31118) * C47448) *
                C47369 * C47430 +
            ((C31468 - C31467 + C31470 - C31469) * C15921 +
             (C31472 - C31471 + C31474 - C31473) * C15917 +
             (C31751 - C31752 + C31753 - C31754) * C15922 +
             (C31755 - C31756 + C31757 - C31758) * C47448) *
                C47369 * C47268) *
               C47429 +
           (((C31290 - C31289 + C31292 - C31291) * C15921 +
             (C31294 - C31293 + C31296 - C31295) * C15917 +
             (C31613 - C31614 + C31615 - C31616) * C15922 +
             (C31617 - C31618 + C31619 - C31620) * C47448) *
                C47369 * C47430 +
            ((C31962 - C31961 + C31964 - C31963) * C15921 +
             (C31966 - C31965 + C31968 - C31967) * C15917 +
             (C31090 * C917 - C31092 * C909 + C47481 * C2139 - C31093 * C2138) *
                 C15922 +
             (C31090 * C924 - C31092 * C918 + C47481 * C2141 - C31093 * C2140) *
                 C47448) *
                C47369 * C47268) *
               C47226) *
              C47455)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C31090 * C124 - C31092 * C117 + C47481 * C478 - C31093 * C468) *
                C15921 +
            (C31090 * C138 - C31092 * C125 + C47481 * C498 - C31093 * C479) *
                C15917 +
            (C31095 - C31096 + C31097 - C31098) * C15922 +
            (C31099 - C31100 + C31101 - C31102) * C47448) *
               C47369 * C2248 +
           ((C31092 * C468 - C31090 * C478 + C31093 * C471 - C47481 * C484) *
                C15921 +
            (C31092 * C479 - C31090 * C498 + C31093 * C485 - C47481 * C501) *
                C15917 +
            (C31451 - C31452 + C31453 - C31454) * C15922 +
            (C31455 - C31456 + C31457 - C31458) * C47448) *
               C47369 * C2249 +
           ((C31090 * C484 - C31092 * C471 + C47481 * C1974 - C31093 * C1968) *
                C15921 +
            (C31090 * C501 - C31092 * C485 + C47481 * C1986 - C31093 * C1975) *
                C15917 +
            (C31459 - C31460 + C31461 - C31462) * C15922 +
            (C31463 - C31464 + C31465 - C31466) * C47448) *
               C47369 * C2250 +
           ((C31092 * C1968 - C31090 * C1974 + C31093 * C1971 -
             C47481 * C1980) *
                C15921 +
            (C31092 * C1975 - C31090 * C1986 + C31093 * C1981 -
             C47481 * C1989) *
                C15917 +
            (C33519 - C33520 + C33521 - C33522) * C15922 +
            (C33523 - C33524 + C33525 - C33526) * C47448) *
               C47369 * C47477) *
              C47429 +
          (((C31092 * C287 - C31090 * C297 + C31093 * C906 - C47481 * C911) *
                C15921 +
            (C31092 * C298 - C31090 * C317 + C31093 * C912 - C47481 * C921) *
                C15917 +
            (C31273 - C31274 + C31275 - C31276) * C15922 +
            (C31277 - C31278 + C31279 - C31280) * C47448) *
               C47369 * C2248 +
           ((C31090 * C911 - C31092 * C906 + C47481 * C1267 - C31093 * C1258) *
                C15921 +
            (C31090 * C921 - C31092 * C912 + C47481 * C1285 - C31093 * C1268) *
                C15917 +
            (C31953 - C31954 + C31955 - C31956) * C15922 +
            (C31957 - C31958 + C31959 - C31960) * C47448) *
               C47369 * C2249 +
           ((C31092 * C1258 - C31090 * C1267 + C31093 * C2362 -
             C47481 * C2365) *
                C15921 +
            (C31092 * C1268 - C31090 * C1285 + C31093 * C2366 -
             C47481 * C2371) *
                C15917 +
            (C33381 - C33382 + C33383 - C33384) * C15922 +
            (C33385 - C33386 + C33387 - C33388) * C47448) *
               C47369 * C2250 +
           ((C31090 * C2365 - C31092 * C2362 + C47481 * C6771 -
             C31093 * C6769) *
                C15921 +
            (C31090 * C2371 - C31092 * C2366 + C47481 * C6775 -
             C31093 * C6772) *
                C15917 +
            (C31090 * C2367 - C31092 * C2363 + C47481 * C6773 -
             C31093 * C6770) *
                C15922 +
            (C31090 * C2372 - C31092 * C2368 + C47481 * C6776 -
             C31093 * C6774) *
                C47448) *
               C47369 * C47477) *
              C47226) *
         C47135) /
            (p * q * std::sqrt(p + q));
    d2ee[162] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((C31090 * C124 - C31092 * C117 + C47481 * C478 - C31093 * C468) *
                   C15921 +
               (C31090 * C138 - C31092 * C125 + C47481 * C498 - C31093 * C479) *
                   C15917 +
               (C31095 - C31096 + C31097 - C31098) * C15922 +
               (C31099 - C31100 + C31101 - C31102) * C47448) *
                  C47369 * C47181 * C47163 * C108 +
              ((C31096 - C31095 + C31098 - C31097) * C15921 +
               (C31100 - C31099 + C31102 - C31101) * C15917 +
               (C31103 - C31104 + C31105 - C31106) * C15922 +
               (C31107 - C31108 + C31109 - C31110) * C47448) *
                  C47369 * C47181 * C47163 * C109 +
              ((C31104 - C31103 + C31106 - C31105) * C15921 +
               (C31108 - C31107 + C31110 - C31109) * C15917 +
               (C31111 - C31112 + C31113 - C31114) * C15922 +
               (C31115 - C31116 + C31117 - C31118) * C47448) *
                  C47369 * C47181 * C47163 * C110 +
              ((C31112 - C31111 + C31114 - C31113) * C15921 +
               (C31116 - C31115 + C31118 - C31117) * C15917 +
               (C31119 - C31120 + C31121 - C31122) * C15922 +
               (C31123 - C31124 + C31125 - C31126) * C47448) *
                  C47369 * C47181 * C47163 * C111 +
              ((C31120 - C31119 + C31122 - C31121) * C15921 +
               (C31124 - C31123 + C31126 - C31125) * C15917 +
               (C31090 * C134 - C31092 * C122 + C47481 * C751 - C31093 * C750) *
                   C15922 +
               (C31090 * C143 - C31092 * C135 + C47481 * C753 - C31093 * C752) *
                   C47448) *
                  C47369 * C47181 * C47163 * C112) +
         0.5 * std::pow(Pi, 2.5) *
             ((((C31090 * C124 - C31092 * C117 + C47481 * C478 -
                 C31093 * C468) *
                    C15921 +
                (C31090 * C138 - C31092 * C125 + C47481 * C498 -
                 C31093 * C479) *
                    C15917 +
                (C31095 - C31096 + C31097 - C31098) * C15922 +
                (C31099 - C31100 + C31101 - C31102) * C47448) *
                   C47369 * C47181 * C47500 +
               ((C31092 * C287 - C31090 * C297 + C31093 * C906 -
                 C47481 * C911) *
                    C15921 +
                (C31092 * C298 - C31090 * C317 + C31093 * C912 -
                 C47481 * C921) *
                    C15917 +
                (C31273 - C31274 + C31275 - C31276) * C15922 +
                (C31277 - C31278 + C31279 - C31280) * C47448) *
                   C47369 * C47181 * C47488 +
               ((C31090 * C303 - C31092 * C290 + C47481 * C1273 -
                 C31093 * C1261) *
                    C15921 +
                (C31090 * C320 - C31092 * C304 + C47481 * C1288 -
                 C31093 * C1274) *
                    C15917 +
                (C31281 - C31282 + C31283 - C31284) * C15922 +
                (C31285 - C31286 + C31287 - C31288) * C47448) *
                   C47369 * C47181 * C47461) *
                  C284 +
              (((C31096 - C31095 + C31098 - C31097) * C15921 +
                (C31100 - C31099 + C31102 - C31101) * C15917 +
                (C31103 - C31104 + C31105 - C31106) * C15922 +
                (C31107 - C31108 + C31109 - C31110) * C47448) *
                   C47369 * C47181 * C47500 +
               ((C31274 - C31273 + C31276 - C31275) * C15921 +
                (C31278 - C31277 + C31280 - C31279) * C15917 +
                (C31289 - C31290 + C31291 - C31292) * C15922 +
                (C31293 - C31294 + C31295 - C31296) * C47448) *
                   C47369 * C47181 * C47488 +
               ((C31282 - C31281 + C31284 - C31283) * C15921 +
                (C31286 - C31285 + C31288 - C31287) * C15917 +
                (C31297 - C31298 + C31299 - C31300) * C15922 +
                (C31301 - C31302 + C31303 - C31304) * C47448) *
                   C47369 * C47181 * C47461) *
                  C285 +
              (((C31104 - C31103 + C31106 - C31105) * C15921 +
                (C31108 - C31107 + C31110 - C31109) * C15917 +
                (C31111 - C31112 + C31113 - C31114) * C15922 +
                (C31115 - C31116 + C31117 - C31118) * C47448) *
                   C47369 * C47181 * C47500 +
               ((C31290 - C31289 + C31292 - C31291) * C15921 +
                (C31294 - C31293 + C31296 - C31295) * C15917 +
                (C31092 * C293 - C31090 * C309 + C31093 * C909 -
                 C47481 * C917) *
                    C15922 +
                (C31092 * C310 - C31090 * C323 + C31093 * C918 -
                 C47481 * C924) *
                    C47448) *
                   C47369 * C47181 * C47488 +
               ((C31298 - C31297 + C31300 - C31299) * C15921 +
                (C31302 - C31301 + C31304 - C31303) * C15917 +
                (C31090 * C311 - C31092 * C294 + C47481 * C1557 -
                 C31093 * C1556) *
                    C15922 +
                (C31090 * C324 - C31092 * C312 + C47481 * C1559 -
                 C31093 * C1558) *
                    C47448) *
                   C47369 * C47181 * C47461) *
                  C47455)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C31090 * C124 - C31092 * C117 + C47481 * C478 - C31093 * C468) *
                C15921 +
            (C31090 * C138 - C31092 * C125 + C47481 * C498 - C31093 * C479) *
                C15917 +
            (C31095 - C31096 + C31097 - C31098) * C15922 +
            (C31099 - C31100 + C31101 - C31102) * C47448) *
               C47369 * C47501 +
           ((C31092 * C468 - C31090 * C478 + C31093 * C471 - C47481 * C484) *
                C15921 +
            (C31092 * C479 - C31090 * C498 + C31093 * C485 - C47481 * C501) *
                C15917 +
            (C31451 - C31452 + C31453 - C31454) * C15922 +
            (C31455 - C31456 + C31457 - C31458) * C47448) *
               C47369 * C47490 +
           ((C31090 * C484 - C31092 * C471 + C47481 * C1974 - C31093 * C1968) *
                C15921 +
            (C31090 * C501 - C31092 * C485 + C47481 * C1986 - C31093 * C1975) *
                C15917 +
            (C31459 - C31460 + C31461 - C31462) * C15922 +
            (C31463 - C31464 + C31465 - C31466) * C47448) *
               C47369 * C47464) *
              C47163 * C284 +
          (((C31096 - C31095 + C31098 - C31097) * C15921 +
            (C31100 - C31099 + C31102 - C31101) * C15917 +
            (C31103 - C31104 + C31105 - C31106) * C15922 +
            (C31107 - C31108 + C31109 - C31110) * C47448) *
               C47369 * C47501 +
           ((C31452 - C31451 + C31454 - C31453) * C15921 +
            (C31456 - C31455 + C31458 - C31457) * C15917 +
            (C31467 - C31468 + C31469 - C31470) * C15922 +
            (C31471 - C31472 + C31473 - C31474) * C47448) *
               C47369 * C47490 +
           ((C31460 - C31459 + C31462 - C31461) * C15921 +
            (C31464 - C31463 + C31466 - C31465) * C15917 +
            (C31475 - C31476 + C31477 - C31478) * C15922 +
            (C31479 - C31480 + C31481 - C31482) * C47448) *
               C47369 * C47464) *
              C47163 * C285 +
          (((C31104 - C31103 + C31106 - C31105) * C15921 +
            (C31108 - C31107 + C31110 - C31109) * C15917 +
            (C31111 - C31112 + C31113 - C31114) * C15922 +
            (C31115 - C31116 + C31117 - C31118) * C47448) *
               C47369 * C47501 +
           ((C31468 - C31467 + C31470 - C31469) * C15921 +
            (C31472 - C31471 + C31474 - C31473) * C15917 +
            (C31092 * C474 - C31090 * C490 + C31093 * C475 - C47481 * C492) *
                C15922 +
            (C31092 * C491 - C31090 * C504 + C31093 * C493 - C47481 * C505) *
                C47448) *
               C47369 * C47490 +
           ((C31476 - C31475 + C31478 - C31477) * C15921 +
            (C31480 - C31479 + C31482 - C31481) * C15917 +
            (C31090 * C492 - C31092 * C475 + C47481 * C2253 - C31093 * C2252) *
                C15922 +
            (C31090 * C505 - C31092 * C493 + C47481 * C2255 - C31093 * C2254) *
                C47448) *
               C47369 * C47464) *
              C47163 * C47455)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C31090 * C124 - C31092 * C117 + C47481 * C478 - C31093 * C468) *
                C15921 +
            (C31090 * C138 - C31092 * C125 + C47481 * C498 - C31093 * C479) *
                C15917 +
            (C31095 - C31096 + C31097 - C31098) * C15922 +
            (C31099 - C31100 + C31101 - C31102) * C47448) *
               C47369 * C47181 * C1050 +
           ((C31092 * C287 - C31090 * C297 + C31093 * C906 - C47481 * C911) *
                C15921 +
            (C31092 * C298 - C31090 * C317 + C31093 * C912 - C47481 * C921) *
                C15917 +
            (C31273 - C31274 + C31275 - C31276) * C15922 +
            (C31277 - C31278 + C31279 - C31280) * C47448) *
               C47369 * C47181 * C1051 +
           ((C31090 * C303 - C31092 * C290 + C47481 * C1273 - C31093 * C1261) *
                C15921 +
            (C31090 * C320 - C31092 * C304 + C47481 * C1288 - C31093 * C1274) *
                C15917 +
            (C31281 - C31282 + C31283 - C31284) * C15922 +
            (C31285 - C31286 + C31287 - C31288) * C47448) *
               C47369 * C47181 * C47461) *
              C47497 +
          (((C31096 - C31095 + C31098 - C31097) * C15921 +
            (C31100 - C31099 + C31102 - C31101) * C15917 +
            (C31103 - C31104 + C31105 - C31106) * C15922 +
            (C31107 - C31108 + C31109 - C31110) * C47448) *
               C47369 * C47181 * C1050 +
           ((C31274 - C31273 + C31276 - C31275) * C15921 +
            (C31278 - C31277 + C31280 - C31279) * C15917 +
            (C31289 - C31290 + C31291 - C31292) * C15922 +
            (C31293 - C31294 + C31295 - C31296) * C47448) *
               C47369 * C47181 * C1051 +
           ((C31282 - C31281 + C31284 - C31283) * C15921 +
            (C31286 - C31285 + C31288 - C31287) * C15917 +
            (C31297 - C31298 + C31299 - C31300) * C15922 +
            (C31301 - C31302 + C31303 - C31304) * C47448) *
               C47369 * C47181 * C47461) *
              C47484 +
          (((C31104 - C31103 + C31106 - C31105) * C15921 +
            (C31108 - C31107 + C31110 - C31109) * C15917 +
            (C31111 - C31112 + C31113 - C31114) * C15922 +
            (C31115 - C31116 + C31117 - C31118) * C47448) *
               C47369 * C47181 * C1050 +
           ((C31290 - C31289 + C31292 - C31291) * C15921 +
            (C31294 - C31293 + C31296 - C31295) * C15917 +
            (C31613 - C31614 + C31615 - C31616) * C15922 +
            (C31617 - C31618 + C31619 - C31620) * C47448) *
               C47369 * C47181 * C1051 +
           ((C31298 - C31297 + C31300 - C31299) * C15921 +
            (C31302 - C31301 + C31304 - C31303) * C15917 +
            (C31090 * C311 - C31092 * C294 + C47481 * C1557 - C31093 * C1556) *
                C15922 +
            (C31090 * C324 - C31092 * C312 + C47481 * C1559 - C31093 * C1558) *
                C47448) *
               C47369 * C47181 * C47461) *
              C47455)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C31090 * C124 - C31092 * C117 + C47481 * C478 - C31093 * C468) *
               C15921 +
           (C31090 * C138 - C31092 * C125 + C47481 * C498 - C31093 * C479) *
               C15917 +
           (C31095 - C31096 + C31097 - C31098) * C15922 +
           (C31099 - C31100 + C31101 - C31102) * C47448) *
              C47369 * C47181 * C1118 +
          ((C31092 * C287 - C31090 * C297 + C31093 * C906 - C47481 * C911) *
               C15921 +
           (C31092 * C298 - C31090 * C317 + C31093 * C912 - C47481 * C921) *
               C15917 +
           (C31273 - C31274 + C31275 - C31276) * C15922 +
           (C31277 - C31278 + C31279 - C31280) * C47448) *
              C47369 * C47181 * C1119 +
          ((C31090 * C303 - C31092 * C290 + C47481 * C1273 - C31093 * C1261) *
               C15921 +
           (C31090 * C320 - C31092 * C304 + C47481 * C1288 - C31093 * C1274) *
               C15917 +
           (C31281 - C31282 + C31283 - C31284) * C15922 +
           (C31285 - C31286 + C31287 - C31288) * C47448) *
              C47369 * C47181 * C1120 +
          ((C31092 * C1124 - C31090 * C1130 + C31093 * C1666 - C47481 * C1669) *
               C15921 +
           (C31092 * C1131 - C31090 * C1142 + C31093 * C1670 - C47481 * C1675) *
               C15917 +
           (C31092 * C1125 - C31090 * C1132 + C31093 * C1667 - C47481 * C1671) *
               C15922 +
           (C31092 * C1133 - C31090 * C1143 + C31093 * C1672 - C47481 * C1676) *
               C47448) *
              C47369 * C47181 * C1121 +
          ((C31090 * C1136 - C31092 * C1127 + C47481 * C6385 - C31093 * C6383) *
               C15921 +
           (C31090 * C1145 - C31092 * C1137 + C47481 * C6389 - C31093 * C6386) *
               C15917 +
           (C31090 * C1138 - C31092 * C1128 + C47481 * C6387 - C31093 * C6384) *
               C15922 +
           (C31090 * C1146 - C31092 * C1139 + C47481 * C6390 - C31093 * C6388) *
               C47448) *
              C47369 * C47181 * C1122) *
         C47135) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C31090 * C124 - C31092 * C117 + C47481 * C478 - C31093 * C468) *
                C15921 +
            (C31090 * C138 - C31092 * C125 + C47481 * C498 - C31093 * C479) *
                C15917 +
            (C31095 - C31096 + C31097 - C31098) * C15922 +
            (C31099 - C31100 + C31101 - C31102) * C47448) *
               C47369 * C47501 +
           ((C31092 * C468 - C31090 * C478 + C31093 * C471 - C47481 * C484) *
                C15921 +
            (C31092 * C479 - C31090 * C498 + C31093 * C485 - C47481 * C501) *
                C15917 +
            (C31451 - C31452 + C31453 - C31454) * C15922 +
            (C31455 - C31456 + C31457 - C31458) * C47448) *
               C47369 * C47490 +
           ((C31090 * C484 - C31092 * C471 + C47481 * C1974 - C31093 * C1968) *
                C15921 +
            (C31090 * C501 - C31092 * C485 + C47481 * C1986 - C31093 * C1975) *
                C15917 +
            (C31459 - C31460 + C31461 - C31462) * C15922 +
            (C31463 - C31464 + C31465 - C31466) * C47448) *
               C47369 * C47464) *
              C1050 +
          (((C31092 * C287 - C31090 * C297 + C31093 * C906 - C47481 * C911) *
                C15921 +
            (C31092 * C298 - C31090 * C317 + C31093 * C912 - C47481 * C921) *
                C15917 +
            (C31273 - C31274 + C31275 - C31276) * C15922 +
            (C31277 - C31278 + C31279 - C31280) * C47448) *
               C47369 * C47501 +
           ((C31090 * C911 - C31092 * C906 + C47481 * C1267 - C31093 * C1258) *
                C15921 +
            (C31090 * C921 - C31092 * C912 + C47481 * C1285 - C31093 * C1268) *
                C15917 +
            (C31953 - C31954 + C31955 - C31956) * C15922 +
            (C31957 - C31958 + C31959 - C31960) * C47448) *
               C47369 * C47490 +
           ((C31092 * C1258 - C31090 * C1267 + C31093 * C2362 -
             C47481 * C2365) *
                C15921 +
            (C31092 * C1268 - C31090 * C1285 + C31093 * C2366 -
             C47481 * C2371) *
                C15917 +
            (C31092 * C1259 - C31090 * C1269 + C31093 * C2363 -
             C47481 * C2367) *
                C15922 +
            (C31092 * C1270 - C31090 * C1286 + C31093 * C2368 -
             C47481 * C2372) *
                C47448) *
               C47369 * C47464) *
              C1051 +
          (((C31090 * C303 - C31092 * C290 + C47481 * C1273 - C31093 * C1261) *
                C15921 +
            (C31090 * C320 - C31092 * C304 + C47481 * C1288 - C31093 * C1274) *
                C15917 +
            (C31281 - C31282 + C31283 - C31284) * C15922 +
            (C31285 - C31286 + C31287 - C31288) * C47448) *
               C47369 * C47501 +
           ((C31092 * C1261 - C31090 * C1273 + C31093 * C1264 -
             C47481 * C1279) *
                C15921 +
            (C31092 * C1274 - C31090 * C1288 + C31093 * C1280 -
             C47481 * C1291) *
                C15917 +
            (C31092 * C1262 - C31090 * C1275 + C31093 * C1265 -
             C47481 * C1281) *
                C15922 +
            (C31092 * C1276 - C31090 * C1289 + C31093 * C1282 -
             C47481 * C1292) *
                C47448) *
               C47369 * C47490 +
           ((C31090 * C1279 - C31092 * C1264 + C47481 * C7241 -
             C31093 * C7239) *
                C15921 +
            (C31090 * C1291 - C31092 * C1280 + C47481 * C7245 -
             C31093 * C7242) *
                C15917 +
            (C31090 * C1281 - C31092 * C1265 + C47481 * C7243 -
             C31093 * C7240) *
                C15922 +
            (C31090 * C1292 - C31092 * C1282 + C47481 * C7246 -
             C31093 * C7244) *
                C47448) *
               C47369 * C47464) *
              C47461) *
         C47135) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C31090 * C124 - C31092 * C117 + C47481 * C478 - C31093 * C468) *
                C15921 +
            (C31090 * C138 - C31092 * C125 + C47481 * C498 - C31093 * C479) *
                C15917 +
            (C31095 - C31096 + C31097 - C31098) * C15922 +
            (C31099 - C31100 + C31101 - C31102) * C47448) *
               C47369 * C1788 +
           ((C31092 * C468 - C31090 * C478 + C31093 * C471 - C47481 * C484) *
                C15921 +
            (C31092 * C479 - C31090 * C498 + C31093 * C485 - C47481 * C501) *
                C15917 +
            (C31451 - C31452 + C31453 - C31454) * C15922 +
            (C31455 - C31456 + C31457 - C31458) * C47448) *
               C47369 * C1789 +
           ((C31090 * C484 - C31092 * C471 + C47481 * C1974 - C31093 * C1968) *
                C15921 +
            (C31090 * C501 - C31092 * C485 + C47481 * C1986 - C31093 * C1975) *
                C15917 +
            (C31459 - C31460 + C31461 - C31462) * C15922 +
            (C31463 - C31464 + C31465 - C31466) * C47448) *
               C47369 * C47464) *
              C47163 * C47497 +
          (((C31096 - C31095 + C31098 - C31097) * C15921 +
            (C31100 - C31099 + C31102 - C31101) * C15917 +
            (C31103 - C31104 + C31105 - C31106) * C15922 +
            (C31107 - C31108 + C31109 - C31110) * C47448) *
               C47369 * C1788 +
           ((C31452 - C31451 + C31454 - C31453) * C15921 +
            (C31456 - C31455 + C31458 - C31457) * C15917 +
            (C31467 - C31468 + C31469 - C31470) * C15922 +
            (C31471 - C31472 + C31473 - C31474) * C47448) *
               C47369 * C1789 +
           ((C31460 - C31459 + C31462 - C31461) * C15921 +
            (C31464 - C31463 + C31466 - C31465) * C15917 +
            (C31475 - C31476 + C31477 - C31478) * C15922 +
            (C31479 - C31480 + C31481 - C31482) * C47448) *
               C47369 * C47464) *
              C47163 * C47484 +
          (((C31104 - C31103 + C31106 - C31105) * C15921 +
            (C31108 - C31107 + C31110 - C31109) * C15917 +
            (C31111 - C31112 + C31113 - C31114) * C15922 +
            (C31115 - C31116 + C31117 - C31118) * C47448) *
               C47369 * C1788 +
           ((C31468 - C31467 + C31470 - C31469) * C15921 +
            (C31472 - C31471 + C31474 - C31473) * C15917 +
            (C31751 - C31752 + C31753 - C31754) * C15922 +
            (C31755 - C31756 + C31757 - C31758) * C47448) *
               C47369 * C1789 +
           ((C31476 - C31475 + C31478 - C31477) * C15921 +
            (C31480 - C31479 + C31482 - C31481) * C15917 +
            (C31090 * C492 - C31092 * C475 + C47481 * C2253 - C31093 * C2252) *
                C15922 +
            (C31090 * C505 - C31092 * C493 + C47481 * C2255 - C31093 * C2254) *
                C47448) *
               C47369 * C47464) *
              C47163 * C47455)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C31090 * C124 - C31092 * C117 + C47481 * C478 - C31093 * C468) *
                C15921 +
            (C31090 * C138 - C31092 * C125 + C47481 * C498 - C31093 * C479) *
                C15917 +
            (C31095 - C31096 + C31097 - C31098) * C15922 +
            (C31099 - C31100 + C31101 - C31102) * C47448) *
               C47369 * C1788 +
           ((C31092 * C468 - C31090 * C478 + C31093 * C471 - C47481 * C484) *
                C15921 +
            (C31092 * C479 - C31090 * C498 + C31093 * C485 - C47481 * C501) *
                C15917 +
            (C31451 - C31452 + C31453 - C31454) * C15922 +
            (C31455 - C31456 + C31457 - C31458) * C47448) *
               C47369 * C1789 +
           ((C31090 * C484 - C31092 * C471 + C47481 * C1974 - C31093 * C1968) *
                C15921 +
            (C31090 * C501 - C31092 * C485 + C47481 * C1986 - C31093 * C1975) *
                C15917 +
            (C31459 - C31460 + C31461 - C31462) * C15922 +
            (C31463 - C31464 + C31465 - C31466) * C47448) *
               C47369 * C47464) *
              C47500 +
          (((C31092 * C287 - C31090 * C297 + C31093 * C906 - C47481 * C911) *
                C15921 +
            (C31092 * C298 - C31090 * C317 + C31093 * C912 - C47481 * C921) *
                C15917 +
            (C31273 - C31274 + C31275 - C31276) * C15922 +
            (C31277 - C31278 + C31279 - C31280) * C47448) *
               C47369 * C1788 +
           ((C31090 * C911 - C31092 * C906 + C47481 * C1267 - C31093 * C1258) *
                C15921 +
            (C31090 * C921 - C31092 * C912 + C47481 * C1285 - C31093 * C1268) *
                C15917 +
            (C31953 - C31954 + C31955 - C31956) * C15922 +
            (C31957 - C31958 + C31959 - C31960) * C47448) *
               C47369 * C1789 +
           ((C31092 * C1258 - C31090 * C1267 + C31093 * C2362 -
             C47481 * C2365) *
                C15921 +
            (C31092 * C1268 - C31090 * C1285 + C31093 * C2366 -
             C47481 * C2371) *
                C15917 +
            (C31092 * C1259 - C31090 * C1269 + C31093 * C2363 -
             C47481 * C2367) *
                C15922 +
            (C31092 * C1270 - C31090 * C1286 + C31093 * C2368 -
             C47481 * C2372) *
                C47448) *
               C47369 * C47464) *
              C47488 +
          (((C31090 * C303 - C31092 * C290 + C47481 * C1273 - C31093 * C1261) *
                C15921 +
            (C31090 * C320 - C31092 * C304 + C47481 * C1288 - C31093 * C1274) *
                C15917 +
            (C31281 - C31282 + C31283 - C31284) * C15922 +
            (C31285 - C31286 + C31287 - C31288) * C47448) *
               C47369 * C1788 +
           ((C31092 * C1261 - C31090 * C1273 + C31093 * C1264 -
             C47481 * C1279) *
                C15921 +
            (C31092 * C1274 - C31090 * C1288 + C31093 * C1280 -
             C47481 * C1291) *
                C15917 +
            (C32675 - C32676 + C32677 - C32678) * C15922 +
            (C32679 - C32680 + C32681 - C32682) * C47448) *
               C47369 * C1789 +
           ((C31090 * C1279 - C31092 * C1264 + C47481 * C7241 -
             C31093 * C7239) *
                C15921 +
            (C31090 * C1291 - C31092 * C1280 + C47481 * C7245 -
             C31093 * C7242) *
                C15917 +
            (C31090 * C1281 - C31092 * C1265 + C47481 * C7243 -
             C31093 * C7240) *
                C15922 +
            (C31090 * C1292 - C31092 * C1282 + C47481 * C7246 -
             C31093 * C7244) *
                C47448) *
               C47369 * C47464) *
              C47461) *
         C47135) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C31090 * C124 - C31092 * C117 + C47481 * C478 - C31093 * C468) *
               C15921 +
           (C31090 * C138 - C31092 * C125 + C47481 * C498 - C31093 * C479) *
               C15917 +
           (C31095 - C31096 + C31097 - C31098) * C15922 +
           (C31099 - C31100 + C31101 - C31102) * C47448) *
              C47369 * C1963 +
          ((C31092 * C468 - C31090 * C478 + C31093 * C471 - C47481 * C484) *
               C15921 +
           (C31092 * C479 - C31090 * C498 + C31093 * C485 - C47481 * C501) *
               C15917 +
           (C31451 - C31452 + C31453 - C31454) * C15922 +
           (C31455 - C31456 + C31457 - C31458) * C47448) *
              C47369 * C1964 +
          ((C31090 * C484 - C31092 * C471 + C47481 * C1974 - C31093 * C1968) *
               C15921 +
           (C31090 * C501 - C31092 * C485 + C47481 * C1986 - C31093 * C1975) *
               C15917 +
           (C31459 - C31460 + C31461 - C31462) * C15922 +
           (C31463 - C31464 + C31465 - C31466) * C47448) *
              C47369 * C1965 +
          ((C31092 * C1968 - C31090 * C1974 + C31093 * C1971 - C47481 * C1980) *
               C15921 +
           (C31092 * C1975 - C31090 * C1986 + C31093 * C1981 - C47481 * C1989) *
               C15917 +
           (C31092 * C1969 - C31090 * C1976 + C31093 * C1972 - C47481 * C1982) *
               C15922 +
           (C31092 * C1977 - C31090 * C1987 + C31093 * C1983 - C47481 * C1990) *
               C47448) *
              C47369 * C1966 +
          ((C31090 * C1980 - C31092 * C1971 + C47481 * C12395 -
            C31093 * C12393) *
               C15921 +
           (C31090 * C1989 - C31092 * C1981 + C47481 * C12399 -
            C31093 * C12396) *
               C15917 +
           (C31090 * C1982 - C31092 * C1972 + C47481 * C12397 -
            C31093 * C12394) *
               C15922 +
           (C31090 * C1990 - C31092 * C1983 + C47481 * C12400 -
            C31093 * C12398) *
               C47448) *
              C47369 * C1967) *
         C47163 * C47135) /
            (p * q * std::sqrt(p + q));
    d2ee[163] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C31090 * C124 - C31092 * C117 + C47481 * C478 - C31093 * C468) *
                 C15921 +
             (C31090 * C138 - C31092 * C125 + C47481 * C498 - C31093 * C479) *
                 C15917 +
             (C31095 - C31096 + C31097 - C31098) * C15922 +
             (C31099 - C31100 + C31101 - C31102) * C47448) *
                C47369 * C47430 +
            ((C31092 * C468 - C31090 * C478 + C31093 * C471 - C47481 * C484) *
                 C15921 +
             (C31092 * C479 - C31090 * C498 + C31093 * C485 - C47481 * C501) *
                 C15917 +
             (C31451 - C31452 + C31453 - C31454) * C15922 +
             (C31455 - C31456 + C31457 - C31458) * C47448) *
                C47369 * C47268) *
               C1050 +
           (((C31092 * C287 - C31090 * C297 + C31093 * C906 - C47481 * C911) *
                 C15921 +
             (C31092 * C298 - C31090 * C317 + C31093 * C912 - C47481 * C921) *
                 C15917 +
             (C31273 - C31274 + C31275 - C31276) * C15922 +
             (C31277 - C31278 + C31279 - C31280) * C47448) *
                C47369 * C47430 +
            ((C31090 * C911 - C31092 * C906 + C47481 * C1267 - C31093 * C1258) *
                 C15921 +
             (C31090 * C921 - C31092 * C912 + C47481 * C1285 - C31093 * C1268) *
                 C15917 +
             (C31953 - C31954 + C31955 - C31956) * C15922 +
             (C31957 - C31958 + C31959 - C31960) * C47448) *
                C47369 * C47268) *
               C1051 +
           (((C31090 * C303 - C31092 * C290 + C47481 * C1273 - C31093 * C1261) *
                 C15921 +
             (C31090 * C320 - C31092 * C304 + C47481 * C1288 - C31093 * C1274) *
                 C15917 +
             (C31281 - C31282 + C31283 - C31284) * C15922 +
             (C31285 - C31286 + C31287 - C31288) * C47448) *
                C47369 * C47430 +
            ((C31092 * C1261 - C31090 * C1273 + C31093 * C1264 -
              C47481 * C1279) *
                 C15921 +
             (C31092 * C1274 - C31090 * C1288 + C31093 * C1280 -
              C47481 * C1291) *
                 C15917 +
             (C32675 - C32676 + C32677 - C32678) * C15922 +
             (C32679 - C32680 + C32681 - C32682) * C47448) *
                C47369 * C47268) *
               C47461) *
              C47415 +
          ((((C31096 - C31095 + C31098 - C31097) * C15921 +
             (C31100 - C31099 + C31102 - C31101) * C15917 +
             (C31103 - C31104 + C31105 - C31106) * C15922 +
             (C31107 - C31108 + C31109 - C31110) * C47448) *
                C47369 * C47430 +
            ((C31452 - C31451 + C31454 - C31453) * C15921 +
             (C31456 - C31455 + C31458 - C31457) * C15917 +
             (C31467 - C31468 + C31469 - C31470) * C15922 +
             (C31471 - C31472 + C31473 - C31474) * C47448) *
                C47369 * C47268) *
               C1050 +
           (((C31274 - C31273 + C31276 - C31275) * C15921 +
             (C31278 - C31277 + C31280 - C31279) * C15917 +
             (C31289 - C31290 + C31291 - C31292) * C15922 +
             (C31293 - C31294 + C31295 - C31296) * C47448) *
                C47369 * C47430 +
            ((C31954 - C31953 + C31956 - C31955) * C15921 +
             (C31958 - C31957 + C31960 - C31959) * C15917 +
             (C31961 - C31962 + C31963 - C31964) * C15922 +
             (C31965 - C31966 + C31967 - C31968) * C47448) *
                C47369 * C47268) *
               C1051 +
           (((C31282 - C31281 + C31284 - C31283) * C15921 +
             (C31286 - C31285 + C31288 - C31287) * C15917 +
             (C31297 - C31298 + C31299 - C31300) * C15922 +
             (C31301 - C31302 + C31303 - C31304) * C47448) *
                C47369 * C47430 +
            ((C32676 - C32675 + C32678 - C32677) * C15921 +
             (C32680 - C32679 + C32682 - C32681) * C15917 +
             (C31090 * C1277 - C31092 * C1263 + C47481 * C1283 -
              C31093 * C1266) *
                 C15922 +
             (C31090 * C1290 - C31092 * C1278 + C47481 * C1293 -
              C31093 * C1284) *
                 C47448) *
                C47369 * C47268) *
               C47461) *
              C47146)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C31090 * C124 - C31092 * C117 + C47481 * C478 - C31093 * C468) *
                C15921 +
            (C31090 * C138 - C31092 * C125 + C47481 * C498 - C31093 * C479) *
                C15917 +
            (C31095 - C31096 + C31097 - C31098) * C15922 +
            (C31099 - C31100 + C31101 - C31102) * C47448) *
               C47369 * C47430 +
           ((C31092 * C468 - C31090 * C478 + C31093 * C471 - C47481 * C484) *
                C15921 +
            (C31092 * C479 - C31090 * C498 + C31093 * C485 - C47481 * C501) *
                C15917 +
            (C31451 - C31452 + C31453 - C31454) * C15922 +
            (C31455 - C31456 + C31457 - C31458) * C47448) *
               C47369 * C47268) *
              C47163 * C636 +
          (((C31096 - C31095 + C31098 - C31097) * C15921 +
            (C31100 - C31099 + C31102 - C31101) * C15917 +
            (C31103 - C31104 + C31105 - C31106) * C15922 +
            (C31107 - C31108 + C31109 - C31110) * C47448) *
               C47369 * C47430 +
           ((C31452 - C31451 + C31454 - C31453) * C15921 +
            (C31456 - C31455 + C31458 - C31457) * C15917 +
            (C31467 - C31468 + C31469 - C31470) * C15922 +
            (C31471 - C31472 + C31473 - C31474) * C47448) *
               C47369 * C47268) *
              C47163 * C637 +
          (((C31104 - C31103 + C31106 - C31105) * C15921 +
            (C31108 - C31107 + C31110 - C31109) * C15917 +
            (C31111 - C31112 + C31113 - C31114) * C15922 +
            (C31115 - C31116 + C31117 - C31118) * C47448) *
               C47369 * C47430 +
           ((C31468 - C31467 + C31470 - C31469) * C15921 +
            (C31472 - C31471 + C31474 - C31473) * C15917 +
            (C31751 - C31752 + C31753 - C31754) * C15922 +
            (C31755 - C31756 + C31757 - C31758) * C47448) *
               C47369 * C47268) *
              C47163 * C638 +
          (((C31112 - C31111 + C31114 - C31113) * C15921 +
            (C31116 - C31115 + C31118 - C31117) * C15917 +
            (C31119 - C31120 + C31121 - C31122) * C15922 +
            (C31123 - C31124 + C31125 - C31126) * C47448) *
               C47369 * C47430 +
           ((C31752 - C31751 + C31754 - C31753) * C15921 +
            (C31756 - C31755 + C31758 - C31757) * C15917 +
            (C31090 * C494 - C31092 * C476 + C47481 * C496 - C31093 * C477) *
                C15922 +
            (C31090 * C506 - C31092 * C495 + C47481 * C507 - C31093 * C497) *
                C47448) *
               C47369 * C47268) *
              C47163 * C47465)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C31090 * C124 - C31092 * C117 + C47481 * C478 - C31093 * C468) *
                C15921 +
            (C31090 * C138 - C31092 * C125 + C47481 * C498 - C31093 * C479) *
                C15917 +
            (C31095 - C31096 + C31097 - C31098) * C15922 +
            (C31099 - C31100 + C31101 - C31102) * C47448) *
               C47369 * C2248 +
           ((C31092 * C468 - C31090 * C478 + C31093 * C471 - C47481 * C484) *
                C15921 +
            (C31092 * C479 - C31090 * C498 + C31093 * C485 - C47481 * C501) *
                C15917 +
            (C31451 - C31452 + C31453 - C31454) * C15922 +
            (C31455 - C31456 + C31457 - C31458) * C47448) *
               C47369 * C2249 +
           ((C31090 * C484 - C31092 * C471 + C47481 * C1974 - C31093 * C1968) *
                C15921 +
            (C31090 * C501 - C31092 * C485 + C47481 * C1986 - C31093 * C1975) *
                C15917 +
            (C31459 - C31460 + C31461 - C31462) * C15922 +
            (C31463 - C31464 + C31465 - C31466) * C47448) *
               C47369 * C2250 +
           ((C31092 * C1968 - C31090 * C1974 + C31093 * C1971 -
             C47481 * C1980) *
                C15921 +
            (C31092 * C1975 - C31090 * C1986 + C31093 * C1981 -
             C47481 * C1989) *
                C15917 +
            (C33519 - C33520 + C33521 - C33522) * C15922 +
            (C33523 - C33524 + C33525 - C33526) * C47448) *
               C47369 * C47477) *
              C47163 * C47415 +
          (((C31096 - C31095 + C31098 - C31097) * C15921 +
            (C31100 - C31099 + C31102 - C31101) * C15917 +
            (C31103 - C31104 + C31105 - C31106) * C15922 +
            (C31107 - C31108 + C31109 - C31110) * C47448) *
               C47369 * C2248 +
           ((C31452 - C31451 + C31454 - C31453) * C15921 +
            (C31456 - C31455 + C31458 - C31457) * C15917 +
            (C31467 - C31468 + C31469 - C31470) * C15922 +
            (C31471 - C31472 + C31473 - C31474) * C47448) *
               C47369 * C2249 +
           ((C31460 - C31459 + C31462 - C31461) * C15921 +
            (C31464 - C31463 + C31466 - C31465) * C15917 +
            (C31475 - C31476 + C31477 - C31478) * C15922 +
            (C31479 - C31480 + C31481 - C31482) * C47448) *
               C47369 * C2250 +
           ((C33520 - C33519 + C33522 - C33521) * C15921 +
            (C33524 - C33523 + C33526 - C33525) * C15917 +
            (C31090 * C1978 - C31092 * C1970 + C47481 * C1984 -
             C31093 * C1973) *
                C15922 +
            (C31090 * C1988 - C31092 * C1979 + C47481 * C1991 -
             C31093 * C1985) *
                C47448) *
               C47369 * C47477) *
              C47163 * C47146)) /
            (p * q * std::sqrt(p + q));
    d2ee[164] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C31090 * C124 - C31092 * C117 + C47481 * C478 - C31093 * C468) *
                C15921 +
            (C31090 * C138 - C31092 * C125 + C47481 * C498 - C31093 * C479) *
                C15917 +
            (C31095 - C31096 + C31097 - C31098) * C15922 +
            (C31099 - C31100 + C31101 - C31102) * C47448) *
               C47369 * C47181 * C47500 +
           ((C31092 * C287 - C31090 * C297 + C31093 * C906 - C47481 * C911) *
                C15921 +
            (C31092 * C298 - C31090 * C317 + C31093 * C912 - C47481 * C921) *
                C15917 +
            (C31273 - C31274 + C31275 - C31276) * C15922 +
            (C31277 - C31278 + C31279 - C31280) * C47448) *
               C47369 * C47181 * C47488 +
           ((C31090 * C303 - C31092 * C290 + C47481 * C1273 - C31093 * C1261) *
                C15921 +
            (C31090 * C320 - C31092 * C304 + C47481 * C1288 - C31093 * C1274) *
                C15917 +
            (C31281 - C31282 + C31283 - C31284) * C15922 +
            (C31285 - C31286 + C31287 - C31288) * C47448) *
               C47369 * C47181 * C47461) *
              C284 +
          (((C31096 - C31095 + C31098 - C31097) * C15921 +
            (C31100 - C31099 + C31102 - C31101) * C15917 +
            (C31103 - C31104 + C31105 - C31106) * C15922 +
            (C31107 - C31108 + C31109 - C31110) * C47448) *
               C47369 * C47181 * C47500 +
           ((C31274 - C31273 + C31276 - C31275) * C15921 +
            (C31278 - C31277 + C31280 - C31279) * C15917 +
            (C31289 - C31290 + C31291 - C31292) * C15922 +
            (C31293 - C31294 + C31295 - C31296) * C47448) *
               C47369 * C47181 * C47488 +
           ((C31282 - C31281 + C31284 - C31283) * C15921 +
            (C31286 - C31285 + C31288 - C31287) * C15917 +
            (C31297 - C31298 + C31299 - C31300) * C15922 +
            (C31301 - C31302 + C31303 - C31304) * C47448) *
               C47369 * C47181 * C47461) *
              C285 +
          (((C31104 - C31103 + C31106 - C31105) * C15921 +
            (C31108 - C31107 + C31110 - C31109) * C15917 +
            (C31111 - C31112 + C31113 - C31114) * C15922 +
            (C31115 - C31116 + C31117 - C31118) * C47448) *
               C47369 * C47181 * C47500 +
           ((C31290 - C31289 + C31292 - C31291) * C15921 +
            (C31294 - C31293 + C31296 - C31295) * C15917 +
            (C31092 * C293 - C31090 * C309 + C31093 * C909 - C47481 * C917) *
                C15922 +
            (C31092 * C310 - C31090 * C323 + C31093 * C918 - C47481 * C924) *
                C47448) *
               C47369 * C47181 * C47488 +
           ((C31298 - C31297 + C31300 - C31299) * C15921 +
            (C31302 - C31301 + C31304 - C31303) * C15917 +
            (C31090 * C311 - C31092 * C294 + C47481 * C1557 - C31093 * C1556) *
                C15922 +
            (C31090 * C324 - C31092 * C312 + C47481 * C1559 - C31093 * C1558) *
                C47448) *
               C47369 * C47181 * C47461) *
              C47455)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C31090 * C124 - C31092 * C117 + C47481 * C478 - C31093 * C468) *
               C15921 +
           (C31090 * C138 - C31092 * C125 + C47481 * C498 - C31093 * C479) *
               C15917 +
           (C31095 - C31096 + C31097 - C31098) * C15922 +
           (C31099 - C31100 + C31101 - C31102) * C47448) *
              C47369 * C47181 * C47163 * C108 +
          ((C31096 - C31095 + C31098 - C31097) * C15921 +
           (C31100 - C31099 + C31102 - C31101) * C15917 +
           (C31103 - C31104 + C31105 - C31106) * C15922 +
           (C31107 - C31108 + C31109 - C31110) * C47448) *
              C47369 * C47181 * C47163 * C109 +
          ((C31104 - C31103 + C31106 - C31105) * C15921 +
           (C31108 - C31107 + C31110 - C31109) * C15917 +
           (C31111 - C31112 + C31113 - C31114) * C15922 +
           (C31115 - C31116 + C31117 - C31118) * C47448) *
              C47369 * C47181 * C47163 * C110 +
          ((C31112 - C31111 + C31114 - C31113) * C15921 +
           (C31116 - C31115 + C31118 - C31117) * C15917 +
           (C31119 - C31120 + C31121 - C31122) * C15922 +
           (C31123 - C31124 + C31125 - C31126) * C47448) *
              C47369 * C47181 * C47163 * C111 +
          ((C31120 - C31119 + C31122 - C31121) * C15921 +
           (C31124 - C31123 + C31126 - C31125) * C15917 +
           (C31090 * C134 - C31092 * C122 + C47481 * C751 - C31093 * C750) *
               C15922 +
           (C31090 * C143 - C31092 * C135 + C47481 * C753 - C31093 * C752) *
               C47448) *
              C47369 * C47181 * C47163 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C31090 * C124 - C31092 * C117 + C47481 * C478 - C31093 * C468) *
                C15921 +
            (C31090 * C138 - C31092 * C125 + C47481 * C498 - C31093 * C479) *
                C15917 +
            (C31095 - C31096 + C31097 - C31098) * C15922 +
            (C31099 - C31100 + C31101 - C31102) * C47448) *
               C47369 * C47181 * C1050 +
           ((C31092 * C287 - C31090 * C297 + C31093 * C906 - C47481 * C911) *
                C15921 +
            (C31092 * C298 - C31090 * C317 + C31093 * C912 - C47481 * C921) *
                C15917 +
            (C31273 - C31274 + C31275 - C31276) * C15922 +
            (C31277 - C31278 + C31279 - C31280) * C47448) *
               C47369 * C47181 * C1051 +
           ((C31090 * C303 - C31092 * C290 + C47481 * C1273 - C31093 * C1261) *
                C15921 +
            (C31090 * C320 - C31092 * C304 + C47481 * C1288 - C31093 * C1274) *
                C15917 +
            (C31281 - C31282 + C31283 - C31284) * C15922 +
            (C31285 - C31286 + C31287 - C31288) * C47448) *
               C47369 * C47181 * C47461) *
              C47497 +
          (((C31096 - C31095 + C31098 - C31097) * C15921 +
            (C31100 - C31099 + C31102 - C31101) * C15917 +
            (C31103 - C31104 + C31105 - C31106) * C15922 +
            (C31107 - C31108 + C31109 - C31110) * C47448) *
               C47369 * C47181 * C1050 +
           ((C31274 - C31273 + C31276 - C31275) * C15921 +
            (C31278 - C31277 + C31280 - C31279) * C15917 +
            (C31289 - C31290 + C31291 - C31292) * C15922 +
            (C31293 - C31294 + C31295 - C31296) * C47448) *
               C47369 * C47181 * C1051 +
           ((C31282 - C31281 + C31284 - C31283) * C15921 +
            (C31286 - C31285 + C31288 - C31287) * C15917 +
            (C31297 - C31298 + C31299 - C31300) * C15922 +
            (C31301 - C31302 + C31303 - C31304) * C47448) *
               C47369 * C47181 * C47461) *
              C47484 +
          (((C31104 - C31103 + C31106 - C31105) * C15921 +
            (C31108 - C31107 + C31110 - C31109) * C15917 +
            (C31111 - C31112 + C31113 - C31114) * C15922 +
            (C31115 - C31116 + C31117 - C31118) * C47448) *
               C47369 * C47181 * C1050 +
           ((C31290 - C31289 + C31292 - C31291) * C15921 +
            (C31294 - C31293 + C31296 - C31295) * C15917 +
            (C31613 - C31614 + C31615 - C31616) * C15922 +
            (C31617 - C31618 + C31619 - C31620) * C47448) *
               C47369 * C47181 * C1051 +
           ((C31298 - C31297 + C31300 - C31299) * C15921 +
            (C31302 - C31301 + C31304 - C31303) * C15917 +
            (C31090 * C311 - C31092 * C294 + C47481 * C1557 - C31093 * C1556) *
                C15922 +
            (C31090 * C324 - C31092 * C312 + C47481 * C1559 - C31093 * C1558) *
                C47448) *
               C47369 * C47181 * C47461) *
              C47455)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C31090 * C124 - C31092 * C117 + C47481 * C478 - C31093 * C468) *
               C15921 +
           (C31090 * C138 - C31092 * C125 + C47481 * C498 - C31093 * C479) *
               C15917 +
           (C31095 - C31096 + C31097 - C31098) * C15922 +
           (C31099 - C31100 + C31101 - C31102) * C47448) *
              C47369 * C47181 * C1118 +
          ((C31092 * C287 - C31090 * C297 + C31093 * C906 - C47481 * C911) *
               C15921 +
           (C31092 * C298 - C31090 * C317 + C31093 * C912 - C47481 * C921) *
               C15917 +
           (C31273 - C31274 + C31275 - C31276) * C15922 +
           (C31277 - C31278 + C31279 - C31280) * C47448) *
              C47369 * C47181 * C1119 +
          ((C31090 * C303 - C31092 * C290 + C47481 * C1273 - C31093 * C1261) *
               C15921 +
           (C31090 * C320 - C31092 * C304 + C47481 * C1288 - C31093 * C1274) *
               C15917 +
           (C31281 - C31282 + C31283 - C31284) * C15922 +
           (C31285 - C31286 + C31287 - C31288) * C47448) *
              C47369 * C47181 * C1120 +
          ((C31092 * C1124 - C31090 * C1130 + C31093 * C1666 - C47481 * C1669) *
               C15921 +
           (C31092 * C1131 - C31090 * C1142 + C31093 * C1670 - C47481 * C1675) *
               C15917 +
           (C31092 * C1125 - C31090 * C1132 + C31093 * C1667 - C47481 * C1671) *
               C15922 +
           (C31092 * C1133 - C31090 * C1143 + C31093 * C1672 - C47481 * C1676) *
               C47448) *
              C47369 * C47181 * C1121 +
          ((C31090 * C1136 - C31092 * C1127 + C47481 * C6385 - C31093 * C6383) *
               C15921 +
           (C31090 * C1145 - C31092 * C1137 + C47481 * C6389 - C31093 * C6386) *
               C15917 +
           (C31090 * C1138 - C31092 * C1128 + C47481 * C6387 - C31093 * C6384) *
               C15922 +
           (C31090 * C1146 - C31092 * C1139 + C47481 * C6390 - C31093 * C6388) *
               C47448) *
              C47369 * C47181 * C1122) *
         C47135) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C31090 * C124 - C31092 * C117 + C47481 * C478 - C31093 * C468) *
                C15921 +
            (C31090 * C138 - C31092 * C125 + C47481 * C498 - C31093 * C479) *
                C15917 +
            (C31095 - C31096 + C31097 - C31098) * C15922 +
            (C31099 - C31100 + C31101 - C31102) * C47448) *
               C47369 * C1788 +
           ((C31092 * C468 - C31090 * C478 + C31093 * C471 - C47481 * C484) *
                C15921 +
            (C31092 * C479 - C31090 * C498 + C31093 * C485 - C47481 * C501) *
                C15917 +
            (C31451 - C31452 + C31453 - C31454) * C15922 +
            (C31455 - C31456 + C31457 - C31458) * C47448) *
               C47369 * C1789 +
           ((C31090 * C484 - C31092 * C471 + C47481 * C1974 - C31093 * C1968) *
                C15921 +
            (C31090 * C501 - C31092 * C485 + C47481 * C1986 - C31093 * C1975) *
                C15917 +
            (C31459 - C31460 + C31461 - C31462) * C15922 +
            (C31463 - C31464 + C31465 - C31466) * C47448) *
               C47369 * C47464) *
              C47163 * C47497 +
          (((C31096 - C31095 + C31098 - C31097) * C15921 +
            (C31100 - C31099 + C31102 - C31101) * C15917 +
            (C31103 - C31104 + C31105 - C31106) * C15922 +
            (C31107 - C31108 + C31109 - C31110) * C47448) *
               C47369 * C1788 +
           ((C31452 - C31451 + C31454 - C31453) * C15921 +
            (C31456 - C31455 + C31458 - C31457) * C15917 +
            (C31467 - C31468 + C31469 - C31470) * C15922 +
            (C31471 - C31472 + C31473 - C31474) * C47448) *
               C47369 * C1789 +
           ((C31460 - C31459 + C31462 - C31461) * C15921 +
            (C31464 - C31463 + C31466 - C31465) * C15917 +
            (C31475 - C31476 + C31477 - C31478) * C15922 +
            (C31479 - C31480 + C31481 - C31482) * C47448) *
               C47369 * C47464) *
              C47163 * C47484 +
          (((C31104 - C31103 + C31106 - C31105) * C15921 +
            (C31108 - C31107 + C31110 - C31109) * C15917 +
            (C31111 - C31112 + C31113 - C31114) * C15922 +
            (C31115 - C31116 + C31117 - C31118) * C47448) *
               C47369 * C1788 +
           ((C31468 - C31467 + C31470 - C31469) * C15921 +
            (C31472 - C31471 + C31474 - C31473) * C15917 +
            (C31751 - C31752 + C31753 - C31754) * C15922 +
            (C31755 - C31756 + C31757 - C31758) * C47448) *
               C47369 * C1789 +
           ((C31476 - C31475 + C31478 - C31477) * C15921 +
            (C31480 - C31479 + C31482 - C31481) * C15917 +
            (C31090 * C492 - C31092 * C475 + C47481 * C2253 - C31093 * C2252) *
                C15922 +
            (C31090 * C505 - C31092 * C493 + C47481 * C2255 - C31093 * C2254) *
                C47448) *
               C47369 * C47464) *
              C47163 * C47455)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C31090 * C124 - C31092 * C117 + C47481 * C478 - C31093 * C468) *
                C15921 +
            (C31090 * C138 - C31092 * C125 + C47481 * C498 - C31093 * C479) *
                C15917 +
            (C31095 - C31096 + C31097 - C31098) * C15922 +
            (C31099 - C31100 + C31101 - C31102) * C47448) *
               C47369 * C1788 +
           ((C31092 * C468 - C31090 * C478 + C31093 * C471 - C47481 * C484) *
                C15921 +
            (C31092 * C479 - C31090 * C498 + C31093 * C485 - C47481 * C501) *
                C15917 +
            (C31451 - C31452 + C31453 - C31454) * C15922 +
            (C31455 - C31456 + C31457 - C31458) * C47448) *
               C47369 * C1789 +
           ((C31090 * C484 - C31092 * C471 + C47481 * C1974 - C31093 * C1968) *
                C15921 +
            (C31090 * C501 - C31092 * C485 + C47481 * C1986 - C31093 * C1975) *
                C15917 +
            (C31459 - C31460 + C31461 - C31462) * C15922 +
            (C31463 - C31464 + C31465 - C31466) * C47448) *
               C47369 * C47464) *
              C47500 +
          (((C31092 * C287 - C31090 * C297 + C31093 * C906 - C47481 * C911) *
                C15921 +
            (C31092 * C298 - C31090 * C317 + C31093 * C912 - C47481 * C921) *
                C15917 +
            (C31273 - C31274 + C31275 - C31276) * C15922 +
            (C31277 - C31278 + C31279 - C31280) * C47448) *
               C47369 * C1788 +
           ((C31090 * C911 - C31092 * C906 + C47481 * C1267 - C31093 * C1258) *
                C15921 +
            (C31090 * C921 - C31092 * C912 + C47481 * C1285 - C31093 * C1268) *
                C15917 +
            (C31953 - C31954 + C31955 - C31956) * C15922 +
            (C31957 - C31958 + C31959 - C31960) * C47448) *
               C47369 * C1789 +
           ((C31092 * C1258 - C31090 * C1267 + C31093 * C2362 -
             C47481 * C2365) *
                C15921 +
            (C31092 * C1268 - C31090 * C1285 + C31093 * C2366 -
             C47481 * C2371) *
                C15917 +
            (C31092 * C1259 - C31090 * C1269 + C31093 * C2363 -
             C47481 * C2367) *
                C15922 +
            (C31092 * C1270 - C31090 * C1286 + C31093 * C2368 -
             C47481 * C2372) *
                C47448) *
               C47369 * C47464) *
              C47488 +
          (((C31090 * C303 - C31092 * C290 + C47481 * C1273 - C31093 * C1261) *
                C15921 +
            (C31090 * C320 - C31092 * C304 + C47481 * C1288 - C31093 * C1274) *
                C15917 +
            (C31281 - C31282 + C31283 - C31284) * C15922 +
            (C31285 - C31286 + C31287 - C31288) * C47448) *
               C47369 * C1788 +
           ((C31092 * C1261 - C31090 * C1273 + C31093 * C1264 -
             C47481 * C1279) *
                C15921 +
            (C31092 * C1274 - C31090 * C1288 + C31093 * C1280 -
             C47481 * C1291) *
                C15917 +
            (C32675 - C32676 + C32677 - C32678) * C15922 +
            (C32679 - C32680 + C32681 - C32682) * C47448) *
               C47369 * C1789 +
           ((C31090 * C1279 - C31092 * C1264 + C47481 * C7241 -
             C31093 * C7239) *
                C15921 +
            (C31090 * C1291 - C31092 * C1280 + C47481 * C7245 -
             C31093 * C7242) *
                C15917 +
            (C31090 * C1281 - C31092 * C1265 + C47481 * C7243 -
             C31093 * C7240) *
                C15922 +
            (C31090 * C1292 - C31092 * C1282 + C47481 * C7246 -
             C31093 * C7244) *
                C47448) *
               C47369 * C47464) *
              C47461) *
         C47135) /
            (p * q * std::sqrt(p + q));
    d2ee[165] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C31090 * C124 - C31092 * C117 + C47481 * C478 - C31093 * C468) *
                 C15921 +
             (C31090 * C138 - C31092 * C125 + C47481 * C498 - C31093 * C479) *
                 C15917 +
             (C31095 - C31096 + C31097 - C31098) * C15922 +
             (C31099 - C31100 + C31101 - C31102) * C47448) *
                C47369 * C3234 +
            ((C31092 * C468 - C31090 * C478 + C31093 * C471 - C47481 * C484) *
                 C15921 +
             (C31092 * C479 - C31090 * C498 + C31093 * C485 - C47481 * C501) *
                 C15917 +
             (C31451 - C31452 + C31453 - C31454) * C15922 +
             (C31455 - C31456 + C31457 - C31458) * C47448) *
                C47369 * C47268) *
               C47429 +
           (((C31092 * C287 - C31090 * C297 + C31093 * C906 - C47481 * C911) *
                 C15921 +
             (C31092 * C298 - C31090 * C317 + C31093 * C912 - C47481 * C921) *
                 C15917 +
             (C31273 - C31274 + C31275 - C31276) * C15922 +
             (C31277 - C31278 + C31279 - C31280) * C47448) *
                C47369 * C3234 +
            ((C31090 * C911 - C31092 * C906 + C47481 * C1267 - C31093 * C1258) *
                 C15921 +
             (C31090 * C921 - C31092 * C912 + C47481 * C1285 - C31093 * C1268) *
                 C15917 +
             (C31953 - C31954 + C31955 - C31956) * C15922 +
             (C31957 - C31958 + C31959 - C31960) * C47448) *
                C47369 * C47268) *
               C47226) *
              C47140 +
          ((((C31096 - C31095 + C31098 - C31097) * C15921 +
             (C31100 - C31099 + C31102 - C31101) * C15917 +
             (C31103 - C31104 + C31105 - C31106) * C15922 +
             (C31107 - C31108 + C31109 - C31110) * C47448) *
                C47369 * C3234 +
            ((C31452 - C31451 + C31454 - C31453) * C15921 +
             (C31456 - C31455 + C31458 - C31457) * C15917 +
             (C31467 - C31468 + C31469 - C31470) * C15922 +
             (C31471 - C31472 + C31473 - C31474) * C47448) *
                C47369 * C47268) *
               C47429 +
           (((C31274 - C31273 + C31276 - C31275) * C15921 +
             (C31278 - C31277 + C31280 - C31279) * C15917 +
             (C31289 - C31290 + C31291 - C31292) * C15922 +
             (C31293 - C31294 + C31295 - C31296) * C47448) *
                C47369 * C3234 +
            ((C31954 - C31953 + C31956 - C31955) * C15921 +
             (C31958 - C31957 + C31960 - C31959) * C15917 +
             (C31961 - C31962 + C31963 - C31964) * C15922 +
             (C31965 - C31966 + C31967 - C31968) * C47448) *
                C47369 * C47268) *
               C47226) *
              C47149 +
          ((((C31104 - C31103 + C31106 - C31105) * C15921 +
             (C31108 - C31107 + C31110 - C31109) * C15917 +
             (C31111 - C31112 + C31113 - C31114) * C15922 +
             (C31115 - C31116 + C31117 - C31118) * C47448) *
                C47369 * C3234 +
            ((C31468 - C31467 + C31470 - C31469) * C15921 +
             (C31472 - C31471 + C31474 - C31473) * C15917 +
             (C31751 - C31752 + C31753 - C31754) * C15922 +
             (C31755 - C31756 + C31757 - C31758) * C47448) *
                C47369 * C47268) *
               C47429 +
           (((C31290 - C31289 + C31292 - C31291) * C15921 +
             (C31294 - C31293 + C31296 - C31295) * C15917 +
             (C31613 - C31614 + C31615 - C31616) * C15922 +
             (C31617 - C31618 + C31619 - C31620) * C47448) *
                C47369 * C3234 +
            ((C31962 - C31961 + C31964 - C31963) * C15921 +
             (C31966 - C31965 + C31968 - C31967) * C15917 +
             (C31090 * C917 - C31092 * C909 + C47481 * C2139 - C31093 * C2138) *
                 C15922 +
             (C31090 * C924 - C31092 * C918 + C47481 * C2141 - C31093 * C2140) *
                 C47448) *
                C47369 * C47268) *
               C47226) *
              C2843)) /
        (p * q * std::sqrt(p + q));
    d2ee[166] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C31090 * C124 - C31092 * C117 + C47481 * C478 - C31093 * C468) *
                 C15921 +
             (C31090 * C138 - C31092 * C125 + C47481 * C498 - C31093 * C479) *
                 C15917 +
             (C31095 - C31096 + C31097 - C31098) * C15922 +
             (C31099 - C31100 + C31101 - C31102) * C47448) *
                C47369 * C47264 +
            ((C31092 * C468 - C31090 * C478 + C31093 * C471 - C47481 * C484) *
                 C15921 +
             (C31092 * C479 - C31090 * C498 + C31093 * C485 - C47481 * C501) *
                 C15917 +
             (C31451 - C31452 + C31453 - C31454) * C15922 +
             (C31455 - C31456 + C31457 - C31458) * C47448) *
                C47369 * C47271 +
            ((C31090 * C484 - C31092 * C471 + C47481 * C1974 - C31093 * C1968) *
                 C15921 +
             (C31090 * C501 - C31092 * C485 + C47481 * C1986 - C31093 * C1975) *
                 C15917 +
             (C31459 - C31460 + C31461 - C31462) * C15922 +
             (C31463 - C31464 + C31465 - C31466) * C47448) *
                C47369 * C3742) *
               C47429 +
           (((C31092 * C287 - C31090 * C297 + C31093 * C906 - C47481 * C911) *
                 C15921 +
             (C31092 * C298 - C31090 * C317 + C31093 * C912 - C47481 * C921) *
                 C15917 +
             (C31273 - C31274 + C31275 - C31276) * C15922 +
             (C31277 - C31278 + C31279 - C31280) * C47448) *
                C47369 * C47264 +
            ((C31090 * C911 - C31092 * C906 + C47481 * C1267 - C31093 * C1258) *
                 C15921 +
             (C31090 * C921 - C31092 * C912 + C47481 * C1285 - C31093 * C1268) *
                 C15917 +
             (C31953 - C31954 + C31955 - C31956) * C15922 +
             (C31957 - C31958 + C31959 - C31960) * C47448) *
                C47369 * C47271 +
            ((C31092 * C1258 - C31090 * C1267 + C31093 * C2362 -
              C47481 * C2365) *
                 C15921 +
             (C31092 * C1268 - C31090 * C1285 + C31093 * C2366 -
              C47481 * C2371) *
                 C15917 +
             (C33381 - C33382 + C33383 - C33384) * C15922 +
             (C33385 - C33386 + C33387 - C33388) * C47448) *
                C47369 * C3742) *
               C47226) *
              C2580 +
          ((((C31096 - C31095 + C31098 - C31097) * C15921 +
             (C31100 - C31099 + C31102 - C31101) * C15917 +
             (C31103 - C31104 + C31105 - C31106) * C15922 +
             (C31107 - C31108 + C31109 - C31110) * C47448) *
                C47369 * C47264 +
            ((C31452 - C31451 + C31454 - C31453) * C15921 +
             (C31456 - C31455 + C31458 - C31457) * C15917 +
             (C31467 - C31468 + C31469 - C31470) * C15922 +
             (C31471 - C31472 + C31473 - C31474) * C47448) *
                C47369 * C47271 +
            ((C31460 - C31459 + C31462 - C31461) * C15921 +
             (C31464 - C31463 + C31466 - C31465) * C15917 +
             (C31475 - C31476 + C31477 - C31478) * C15922 +
             (C31479 - C31480 + C31481 - C31482) * C47448) *
                C47369 * C3742) *
               C47429 +
           (((C31274 - C31273 + C31276 - C31275) * C15921 +
             (C31278 - C31277 + C31280 - C31279) * C15917 +
             (C31289 - C31290 + C31291 - C31292) * C15922 +
             (C31293 - C31294 + C31295 - C31296) * C47448) *
                C47369 * C47264 +
            ((C31954 - C31953 + C31956 - C31955) * C15921 +
             (C31958 - C31957 + C31960 - C31959) * C15917 +
             (C31961 - C31962 + C31963 - C31964) * C15922 +
             (C31965 - C31966 + C31967 - C31968) * C47448) *
                C47369 * C47271 +
            ((C33382 - C33381 + C33384 - C33383) * C15921 +
             (C33386 - C33385 + C33388 - C33387) * C15917 +
             (C31090 * C1271 - C31092 * C1260 + C47481 * C2369 -
              C31093 * C2364) *
                 C15922 +
             (C31090 * C1287 - C31092 * C1272 + C47481 * C2373 -
              C31093 * C2370) *
                 C47448) *
                C47369 * C3742) *
               C47226) *
              C47146)) /
        (p * q * std::sqrt(p + q));
    d2ee[167] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C31090 * C124 - C31092 * C117 + C47481 * C478 - C31093 * C468) *
                 C15921 +
             (C31090 * C138 - C31092 * C125 + C47481 * C498 - C31093 * C479) *
                 C15917 +
             (C31095 - C31096 + C31097 - C31098) * C15922 +
             (C31099 - C31100 + C31101 - C31102) * C47448) *
                C47369 * C3234 +
            ((C31092 * C468 - C31090 * C478 + C31093 * C471 - C47481 * C484) *
                 C15921 +
             (C31092 * C479 - C31090 * C498 + C31093 * C485 - C47481 * C501) *
                 C15917 +
             (C31451 - C31452 + C31453 - C31454) * C15922 +
             (C31455 - C31456 + C31457 - C31458) * C47448) *
                C47369 * C47268) *
               C47500 +
           (((C31092 * C287 - C31090 * C297 + C31093 * C906 - C47481 * C911) *
                 C15921 +
             (C31092 * C298 - C31090 * C317 + C31093 * C912 - C47481 * C921) *
                 C15917 +
             (C31273 - C31274 + C31275 - C31276) * C15922 +
             (C31277 - C31278 + C31279 - C31280) * C47448) *
                C47369 * C3234 +
            ((C31090 * C911 - C31092 * C906 + C47481 * C1267 - C31093 * C1258) *
                 C15921 +
             (C31090 * C921 - C31092 * C912 + C47481 * C1285 - C31093 * C1268) *
                 C15917 +
             (C31953 - C31954 + C31955 - C31956) * C15922 +
             (C31957 - C31958 + C31959 - C31960) * C47448) *
                C47369 * C47268) *
               C47488 +
           (((C31090 * C303 - C31092 * C290 + C47481 * C1273 - C31093 * C1261) *
                 C15921 +
             (C31090 * C320 - C31092 * C304 + C47481 * C1288 - C31093 * C1274) *
                 C15917 +
             (C31281 - C31282 + C31283 - C31284) * C15922 +
             (C31285 - C31286 + C31287 - C31288) * C47448) *
                C47369 * C3234 +
            ((C31092 * C1261 - C31090 * C1273 + C31093 * C1264 -
              C47481 * C1279) *
                 C15921 +
             (C31092 * C1274 - C31090 * C1288 + C31093 * C1280 -
              C47481 * C1291) *
                 C15917 +
             (C32675 - C32676 + C32677 - C32678) * C15922 +
             (C32679 - C32680 + C32681 - C32682) * C47448) *
                C47369 * C47268) *
               C47461) *
              C2580 +
          ((((C31096 - C31095 + C31098 - C31097) * C15921 +
             (C31100 - C31099 + C31102 - C31101) * C15917 +
             (C31103 - C31104 + C31105 - C31106) * C15922 +
             (C31107 - C31108 + C31109 - C31110) * C47448) *
                C47369 * C3234 +
            ((C31452 - C31451 + C31454 - C31453) * C15921 +
             (C31456 - C31455 + C31458 - C31457) * C15917 +
             (C31467 - C31468 + C31469 - C31470) * C15922 +
             (C31471 - C31472 + C31473 - C31474) * C47448) *
                C47369 * C47268) *
               C47500 +
           (((C31274 - C31273 + C31276 - C31275) * C15921 +
             (C31278 - C31277 + C31280 - C31279) * C15917 +
             (C31289 - C31290 + C31291 - C31292) * C15922 +
             (C31293 - C31294 + C31295 - C31296) * C47448) *
                C47369 * C3234 +
            ((C31954 - C31953 + C31956 - C31955) * C15921 +
             (C31958 - C31957 + C31960 - C31959) * C15917 +
             (C31961 - C31962 + C31963 - C31964) * C15922 +
             (C31965 - C31966 + C31967 - C31968) * C47448) *
                C47369 * C47268) *
               C47488 +
           (((C31282 - C31281 + C31284 - C31283) * C15921 +
             (C31286 - C31285 + C31288 - C31287) * C15917 +
             (C31297 - C31298 + C31299 - C31300) * C15922 +
             (C31301 - C31302 + C31303 - C31304) * C47448) *
                C47369 * C3234 +
            ((C32676 - C32675 + C32678 - C32677) * C15921 +
             (C32680 - C32679 + C32682 - C32681) * C15917 +
             (C31090 * C1277 - C31092 * C1263 + C47481 * C1283 -
              C31093 * C1266) *
                 C15922 +
             (C31090 * C1290 - C31092 * C1278 + C47481 * C1293 -
              C31093 * C1284) *
                 C47448) *
                C47369 * C47268) *
               C47461) *
              C47146)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C31090 * C124 - C31092 * C117 + C47481 * C478 - C31093 * C468) *
                C15921 +
            (C31090 * C138 - C31092 * C125 + C47481 * C498 - C31093 * C479) *
                C15917 +
            (C31095 - C31096 + C31097 - C31098) * C15922 +
            (C31099 - C31100 + C31101 - C31102) * C47448) *
               C47369 * C3234 +
           ((C31092 * C468 - C31090 * C478 + C31093 * C471 - C47481 * C484) *
                C15921 +
            (C31092 * C479 - C31090 * C498 + C31093 * C485 - C47481 * C501) *
                C15917 +
            (C31451 - C31452 + C31453 - C31454) * C15922 +
            (C31455 - C31456 + C31457 - C31458) * C47448) *
               C47369 * C47268) *
              C47163 * C47506 +
          (((C31096 - C31095 + C31098 - C31097) * C15921 +
            (C31100 - C31099 + C31102 - C31101) * C15917 +
            (C31103 - C31104 + C31105 - C31106) * C15922 +
            (C31107 - C31108 + C31109 - C31110) * C47448) *
               C47369 * C3234 +
           ((C31452 - C31451 + C31454 - C31453) * C15921 +
            (C31456 - C31455 + C31458 - C31457) * C15917 +
            (C31467 - C31468 + C31469 - C31470) * C15922 +
            (C31471 - C31472 + C31473 - C31474) * C47448) *
               C47369 * C47268) *
              C47163 * C47499 +
          (((C31104 - C31103 + C31106 - C31105) * C15921 +
            (C31108 - C31107 + C31110 - C31109) * C15917 +
            (C31111 - C31112 + C31113 - C31114) * C15922 +
            (C31115 - C31116 + C31117 - C31118) * C47448) *
               C47369 * C3234 +
           ((C31468 - C31467 + C31470 - C31469) * C15921 +
            (C31472 - C31471 + C31474 - C31473) * C15917 +
            (C31751 - C31752 + C31753 - C31754) * C15922 +
            (C31755 - C31756 + C31757 - C31758) * C47448) *
               C47369 * C47268) *
              C47163 * C47486 +
          (((C31112 - C31111 + C31114 - C31113) * C15921 +
            (C31116 - C31115 + C31118 - C31117) * C15917 +
            (C31119 - C31120 + C31121 - C31122) * C15922 +
            (C31123 - C31124 + C31125 - C31126) * C47448) *
               C47369 * C3234 +
           ((C31752 - C31751 + C31754 - C31753) * C15921 +
            (C31756 - C31755 + C31758 - C31757) * C15917 +
            (C31090 * C494 - C31092 * C476 + C47481 * C496 - C31093 * C477) *
                C15922 +
            (C31090 * C506 - C31092 * C495 + C47481 * C507 - C31093 * C497) *
                C47448) *
               C47369 * C47268) *
              C47163 * C47465)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C31090 * C124 - C31092 * C117 + C47481 * C478 - C31093 * C468) *
                C15921 +
            (C31090 * C138 - C31092 * C125 + C47481 * C498 - C31093 * C479) *
                C15917 +
            (C31095 - C31096 + C31097 - C31098) * C15922 +
            (C31099 - C31100 + C31101 - C31102) * C47448) *
               C47369 * C47508 +
           ((C31092 * C468 - C31090 * C478 + C31093 * C471 - C47481 * C484) *
                C15921 +
            (C31092 * C479 - C31090 * C498 + C31093 * C485 - C47481 * C501) *
                C15917 +
            (C31451 - C31452 + C31453 - C31454) * C15922 +
            (C31455 - C31456 + C31457 - C31458) * C47448) *
               C47369 * C47505 +
           ((C31090 * C484 - C31092 * C471 + C47481 * C1974 - C31093 * C1968) *
                C15921 +
            (C31090 * C501 - C31092 * C485 + C47481 * C1986 - C31093 * C1975) *
                C15917 +
            (C31459 - C31460 + C31461 - C31462) * C15922 +
            (C31463 - C31464 + C31465 - C31466) * C47448) *
               C47369 * C47496 +
           ((C31092 * C1968 - C31090 * C1974 + C31093 * C1971 -
             C47481 * C1980) *
                C15921 +
            (C31092 * C1975 - C31090 * C1986 + C31093 * C1981 -
             C47481 * C1989) *
                C15917 +
            (C33519 - C33520 + C33521 - C33522) * C15922 +
            (C33523 - C33524 + C33525 - C33526) * C47448) *
               C47369 * C47477) *
              C47163 * C2580 +
          (((C31096 - C31095 + C31098 - C31097) * C15921 +
            (C31100 - C31099 + C31102 - C31101) * C15917 +
            (C31103 - C31104 + C31105 - C31106) * C15922 +
            (C31107 - C31108 + C31109 - C31110) * C47448) *
               C47369 * C47508 +
           ((C31452 - C31451 + C31454 - C31453) * C15921 +
            (C31456 - C31455 + C31458 - C31457) * C15917 +
            (C31467 - C31468 + C31469 - C31470) * C15922 +
            (C31471 - C31472 + C31473 - C31474) * C47448) *
               C47369 * C47505 +
           ((C31460 - C31459 + C31462 - C31461) * C15921 +
            (C31464 - C31463 + C31466 - C31465) * C15917 +
            (C31475 - C31476 + C31477 - C31478) * C15922 +
            (C31479 - C31480 + C31481 - C31482) * C47448) *
               C47369 * C47496 +
           ((C33520 - C33519 + C33522 - C33521) * C15921 +
            (C33524 - C33523 + C33526 - C33525) * C15917 +
            (C31090 * C1978 - C31092 * C1970 + C47481 * C1984 -
             C31093 * C1973) *
                C15922 +
            (C31090 * C1988 - C31092 * C1979 + C47481 * C1991 -
             C31093 * C1985) *
                C47448) *
               C47369 * C47477) *
              C47163 * C47146)) /
            (p * q * std::sqrt(p + q));
    d2ee[168] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C31090 * C124 - C31092 * C117 + C47481 * C478 - C31093 * C468) *
                C15921 +
            (C31090 * C138 - C31092 * C125 + C47481 * C498 - C31093 * C479) *
                C15917 +
            (C31095 - C31096 + C31097 - C31098) * C15922 +
            (C31099 - C31100 + C31101 - C31102) * C47448) *
               C47369 * C47264 +
           ((C31092 * C468 - C31090 * C478 + C31093 * C471 - C47481 * C484) *
                C15921 +
            (C31092 * C479 - C31090 * C498 + C31093 * C485 - C47481 * C501) *
                C15917 +
            (C31451 - C31452 + C31453 - C31454) * C15922 +
            (C31455 - C31456 + C31457 - C31458) * C47448) *
               C47369 * C47271 +
           ((C31090 * C484 - C31092 * C471 + C47481 * C1974 - C31093 * C1968) *
                C15921 +
            (C31090 * C501 - C31092 * C485 + C47481 * C1986 - C31093 * C1975) *
                C15917 +
            (C31459 - C31460 + C31461 - C31462) * C15922 +
            (C31463 - C31464 + C31465 - C31466) * C47448) *
               C47369 * C3742) *
              C47163 * C47140 +
          (((C31096 - C31095 + C31098 - C31097) * C15921 +
            (C31100 - C31099 + C31102 - C31101) * C15917 +
            (C31103 - C31104 + C31105 - C31106) * C15922 +
            (C31107 - C31108 + C31109 - C31110) * C47448) *
               C47369 * C47264 +
           ((C31452 - C31451 + C31454 - C31453) * C15921 +
            (C31456 - C31455 + C31458 - C31457) * C15917 +
            (C31467 - C31468 + C31469 - C31470) * C15922 +
            (C31471 - C31472 + C31473 - C31474) * C47448) *
               C47369 * C47271 +
           ((C31460 - C31459 + C31462 - C31461) * C15921 +
            (C31464 - C31463 + C31466 - C31465) * C15917 +
            (C31475 - C31476 + C31477 - C31478) * C15922 +
            (C31479 - C31480 + C31481 - C31482) * C47448) *
               C47369 * C3742) *
              C47163 * C47149 +
          (((C31104 - C31103 + C31106 - C31105) * C15921 +
            (C31108 - C31107 + C31110 - C31109) * C15917 +
            (C31111 - C31112 + C31113 - C31114) * C15922 +
            (C31115 - C31116 + C31117 - C31118) * C47448) *
               C47369 * C47264 +
           ((C31468 - C31467 + C31470 - C31469) * C15921 +
            (C31472 - C31471 + C31474 - C31473) * C15917 +
            (C31751 - C31752 + C31753 - C31754) * C15922 +
            (C31755 - C31756 + C31757 - C31758) * C47448) *
               C47369 * C47271 +
           ((C31476 - C31475 + C31478 - C31477) * C15921 +
            (C31480 - C31479 + C31482 - C31481) * C15917 +
            (C31090 * C492 - C31092 * C475 + C47481 * C2253 - C31093 * C2252) *
                C15922 +
            (C31090 * C505 - C31092 * C493 + C47481 * C2255 - C31093 * C2254) *
                C47448) *
               C47369 * C3742) *
              C47163 * C2843)) /
        (p * q * std::sqrt(p + q));
    d2ee[169] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C31090 * C124 - C31092 * C117 + C47481 * C478 - C31093 * C468) *
                C15921 +
            (C31090 * C138 - C31092 * C125 + C47481 * C498 - C31093 * C479) *
                C15917 +
            (C31095 - C31096 + C31097 - C31098) * C15922 +
            (C31099 - C31100 + C31101 - C31102) * C47448) *
               C47369 * C3234 +
           ((C31092 * C468 - C31090 * C478 + C31093 * C471 - C47481 * C484) *
                C15921 +
            (C31092 * C479 - C31090 * C498 + C31093 * C485 - C47481 * C501) *
                C15917 +
            (C31451 - C31452 + C31453 - C31454) * C15922 +
            (C31455 - C31456 + C31457 - C31458) * C47448) *
               C47369 * C47268) *
              C47163 * C47506 +
          (((C31096 - C31095 + C31098 - C31097) * C15921 +
            (C31100 - C31099 + C31102 - C31101) * C15917 +
            (C31103 - C31104 + C31105 - C31106) * C15922 +
            (C31107 - C31108 + C31109 - C31110) * C47448) *
               C47369 * C3234 +
           ((C31452 - C31451 + C31454 - C31453) * C15921 +
            (C31456 - C31455 + C31458 - C31457) * C15917 +
            (C31467 - C31468 + C31469 - C31470) * C15922 +
            (C31471 - C31472 + C31473 - C31474) * C47448) *
               C47369 * C47268) *
              C47163 * C47499 +
          (((C31104 - C31103 + C31106 - C31105) * C15921 +
            (C31108 - C31107 + C31110 - C31109) * C15917 +
            (C31111 - C31112 + C31113 - C31114) * C15922 +
            (C31115 - C31116 + C31117 - C31118) * C47448) *
               C47369 * C3234 +
           ((C31468 - C31467 + C31470 - C31469) * C15921 +
            (C31472 - C31471 + C31474 - C31473) * C15917 +
            (C31751 - C31752 + C31753 - C31754) * C15922 +
            (C31755 - C31756 + C31757 - C31758) * C47448) *
               C47369 * C47268) *
              C47163 * C47486 +
          (((C31112 - C31111 + C31114 - C31113) * C15921 +
            (C31116 - C31115 + C31118 - C31117) * C15917 +
            (C31119 - C31120 + C31121 - C31122) * C15922 +
            (C31123 - C31124 + C31125 - C31126) * C47448) *
               C47369 * C3234 +
           ((C31752 - C31751 + C31754 - C31753) * C15921 +
            (C31756 - C31755 + C31758 - C31757) * C15917 +
            (C31090 * C494 - C31092 * C476 + C47481 * C496 - C31093 * C477) *
                C15922 +
            (C31090 * C506 - C31092 * C495 + C47481 * C507 - C31093 * C497) *
                C47448) *
               C47369 * C47268) *
              C47163 * C47465)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C31090 * C124 - C31092 * C117 + C47481 * C478 - C31093 * C468) *
                 C15921 +
             (C31090 * C138 - C31092 * C125 + C47481 * C498 - C31093 * C479) *
                 C15917 +
             (C31095 - C31096 + C31097 - C31098) * C15922 +
             (C31099 - C31100 + C31101 - C31102) * C47448) *
                C47369 * C3234 +
            ((C31092 * C468 - C31090 * C478 + C31093 * C471 - C47481 * C484) *
                 C15921 +
             (C31092 * C479 - C31090 * C498 + C31093 * C485 - C47481 * C501) *
                 C15917 +
             (C31451 - C31452 + C31453 - C31454) * C15922 +
             (C31455 - C31456 + C31457 - C31458) * C47448) *
                C47369 * C47268) *
               C47500 +
           (((C31092 * C287 - C31090 * C297 + C31093 * C906 - C47481 * C911) *
                 C15921 +
             (C31092 * C298 - C31090 * C317 + C31093 * C912 - C47481 * C921) *
                 C15917 +
             (C31273 - C31274 + C31275 - C31276) * C15922 +
             (C31277 - C31278 + C31279 - C31280) * C47448) *
                C47369 * C3234 +
            ((C31090 * C911 - C31092 * C906 + C47481 * C1267 - C31093 * C1258) *
                 C15921 +
             (C31090 * C921 - C31092 * C912 + C47481 * C1285 - C31093 * C1268) *
                 C15917 +
             (C31953 - C31954 + C31955 - C31956) * C15922 +
             (C31957 - C31958 + C31959 - C31960) * C47448) *
                C47369 * C47268) *
               C47488 +
           (((C31090 * C303 - C31092 * C290 + C47481 * C1273 - C31093 * C1261) *
                 C15921 +
             (C31090 * C320 - C31092 * C304 + C47481 * C1288 - C31093 * C1274) *
                 C15917 +
             (C31281 - C31282 + C31283 - C31284) * C15922 +
             (C31285 - C31286 + C31287 - C31288) * C47448) *
                C47369 * C3234 +
            ((C31092 * C1261 - C31090 * C1273 + C31093 * C1264 -
              C47481 * C1279) *
                 C15921 +
             (C31092 * C1274 - C31090 * C1288 + C31093 * C1280 -
              C47481 * C1291) *
                 C15917 +
             (C32675 - C32676 + C32677 - C32678) * C15922 +
             (C32679 - C32680 + C32681 - C32682) * C47448) *
                C47369 * C47268) *
               C47461) *
              C2580 +
          ((((C31096 - C31095 + C31098 - C31097) * C15921 +
             (C31100 - C31099 + C31102 - C31101) * C15917 +
             (C31103 - C31104 + C31105 - C31106) * C15922 +
             (C31107 - C31108 + C31109 - C31110) * C47448) *
                C47369 * C3234 +
            ((C31452 - C31451 + C31454 - C31453) * C15921 +
             (C31456 - C31455 + C31458 - C31457) * C15917 +
             (C31467 - C31468 + C31469 - C31470) * C15922 +
             (C31471 - C31472 + C31473 - C31474) * C47448) *
                C47369 * C47268) *
               C47500 +
           (((C31274 - C31273 + C31276 - C31275) * C15921 +
             (C31278 - C31277 + C31280 - C31279) * C15917 +
             (C31289 - C31290 + C31291 - C31292) * C15922 +
             (C31293 - C31294 + C31295 - C31296) * C47448) *
                C47369 * C3234 +
            ((C31954 - C31953 + C31956 - C31955) * C15921 +
             (C31958 - C31957 + C31960 - C31959) * C15917 +
             (C31961 - C31962 + C31963 - C31964) * C15922 +
             (C31965 - C31966 + C31967 - C31968) * C47448) *
                C47369 * C47268) *
               C47488 +
           (((C31282 - C31281 + C31284 - C31283) * C15921 +
             (C31286 - C31285 + C31288 - C31287) * C15917 +
             (C31297 - C31298 + C31299 - C31300) * C15922 +
             (C31301 - C31302 + C31303 - C31304) * C47448) *
                C47369 * C3234 +
            ((C32676 - C32675 + C32678 - C32677) * C15921 +
             (C32680 - C32679 + C32682 - C32681) * C15917 +
             (C31090 * C1277 - C31092 * C1263 + C47481 * C1283 -
              C31093 * C1266) *
                 C15922 +
             (C31090 * C1290 - C31092 * C1278 + C47481 * C1293 -
              C31093 * C1284) *
                 C47448) *
                C47369 * C47268) *
               C47461) *
              C47146)) /
            (p * q * std::sqrt(p + q));
    d2ee[170] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C31090 * C124 - C31092 * C117 + C47481 * C478 - C31093 * C468) *
                C15921 +
            (C31090 * C138 - C31092 * C125 + C47481 * C498 - C31093 * C479) *
                C15917 +
            (C31095 - C31096 + C31097 - C31098) * C15922 +
            (C31099 - C31100 + C31101 - C31102) * C47448) *
               C47369 * C47181 * C47429 +
           ((C31092 * C287 - C31090 * C297 + C31093 * C906 - C47481 * C911) *
                C15921 +
            (C31092 * C298 - C31090 * C317 + C31093 * C912 - C47481 * C921) *
                C15917 +
            (C31273 - C31274 + C31275 - C31276) * C15922 +
            (C31277 - C31278 + C31279 - C31280) * C47448) *
               C47369 * C47181 * C47226) *
              C636 +
          (((C31096 - C31095 + C31098 - C31097) * C15921 +
            (C31100 - C31099 + C31102 - C31101) * C15917 +
            (C31103 - C31104 + C31105 - C31106) * C15922 +
            (C31107 - C31108 + C31109 - C31110) * C47448) *
               C47369 * C47181 * C47429 +
           ((C31274 - C31273 + C31276 - C31275) * C15921 +
            (C31278 - C31277 + C31280 - C31279) * C15917 +
            (C31289 - C31290 + C31291 - C31292) * C15922 +
            (C31293 - C31294 + C31295 - C31296) * C47448) *
               C47369 * C47181 * C47226) *
              C637 +
          (((C31104 - C31103 + C31106 - C31105) * C15921 +
            (C31108 - C31107 + C31110 - C31109) * C15917 +
            (C31111 - C31112 + C31113 - C31114) * C15922 +
            (C31115 - C31116 + C31117 - C31118) * C47448) *
               C47369 * C47181 * C47429 +
           ((C31290 - C31289 + C31292 - C31291) * C15921 +
            (C31294 - C31293 + C31296 - C31295) * C15917 +
            (C31613 - C31614 + C31615 - C31616) * C15922 +
            (C31617 - C31618 + C31619 - C31620) * C47448) *
               C47369 * C47181 * C47226) *
              C638 +
          (((C31112 - C31111 + C31114 - C31113) * C15921 +
            (C31116 - C31115 + C31118 - C31117) * C15917 +
            (C31119 - C31120 + C31121 - C31122) * C15922 +
            (C31123 - C31124 + C31125 - C31126) * C47448) *
               C47369 * C47181 * C47429 +
           ((C31614 - C31613 + C31616 - C31615) * C15921 +
            (C31618 - C31617 + C31620 - C31619) * C15917 +
            (C31090 * C313 - C31092 * C295 + C47481 * C919 - C31093 * C910) *
                C15922 +
            (C31090 * C325 - C31092 * C314 + C47481 * C925 - C31093 * C920) *
                C47448) *
               C47369 * C47181 * C47226) *
              C47465)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C31090 * C124 - C31092 * C117 + C47481 * C478 - C31093 * C468) *
                C15921 +
            (C31090 * C138 - C31092 * C125 + C47481 * C498 - C31093 * C479) *
                C15917 +
            (C31095 - C31096 + C31097 - C31098) * C15922 +
            (C31099 - C31100 + C31101 - C31102) * C47448) *
               C47369 * C47181 * C1392 +
           ((C31092 * C287 - C31090 * C297 + C31093 * C906 - C47481 * C911) *
                C15921 +
            (C31092 * C298 - C31090 * C317 + C31093 * C912 - C47481 * C921) *
                C15917 +
            (C31273 - C31274 + C31275 - C31276) * C15922 +
            (C31277 - C31278 + C31279 - C31280) * C47448) *
               C47369 * C47181 * C1393 +
           ((C31090 * C303 - C31092 * C290 + C47481 * C1273 - C31093 * C1261) *
                C15921 +
            (C31090 * C320 - C31092 * C304 + C47481 * C1288 - C31093 * C1274) *
                C15917 +
            (C31281 - C31282 + C31283 - C31284) * C15922 +
            (C31285 - C31286 + C31287 - C31288) * C47448) *
               C47369 * C47181 * C1394 +
           ((C31092 * C1124 - C31090 * C1130 + C31093 * C1666 -
             C47481 * C1669) *
                C15921 +
            (C31092 * C1131 - C31090 * C1142 + C31093 * C1670 -
             C47481 * C1675) *
                C15917 +
            (C32473 - C32474 + C32475 - C32476) * C15922 +
            (C32477 - C32478 + C32479 - C32480) * C47448) *
               C47369 * C47181 * C47471) *
              C47415 +
          (((C31096 - C31095 + C31098 - C31097) * C15921 +
            (C31100 - C31099 + C31102 - C31101) * C15917 +
            (C31103 - C31104 + C31105 - C31106) * C15922 +
            (C31107 - C31108 + C31109 - C31110) * C47448) *
               C47369 * C47181 * C1392 +
           ((C31274 - C31273 + C31276 - C31275) * C15921 +
            (C31278 - C31277 + C31280 - C31279) * C15917 +
            (C31289 - C31290 + C31291 - C31292) * C15922 +
            (C31293 - C31294 + C31295 - C31296) * C47448) *
               C47369 * C47181 * C1393 +
           ((C31282 - C31281 + C31284 - C31283) * C15921 +
            (C31286 - C31285 + C31288 - C31287) * C15917 +
            (C31297 - C31298 + C31299 - C31300) * C15922 +
            (C31301 - C31302 + C31303 - C31304) * C47448) *
               C47369 * C47181 * C1394 +
           ((C32474 - C32473 + C32476 - C32475) * C15921 +
            (C32478 - C32477 + C32480 - C32479) * C15917 +
            (C31090 * C1134 - C31092 * C1126 + C47481 * C1673 -
             C31093 * C1668) *
                C15922 +
            (C31090 * C1144 - C31092 * C1135 + C47481 * C1677 -
             C31093 * C1674) *
                C47448) *
               C47369 * C47181 * C47471) *
              C47146)) /
            (p * q * std::sqrt(p + q));
    d2ee[171] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C31090 * C124 - C31092 * C117 + C47481 * C478 - C31093 * C468) *
                 C15921 +
             (C31090 * C138 - C31092 * C125 + C47481 * C498 - C31093 * C479) *
                 C15917 +
             (C31095 - C31096 + C31097 - C31098) * C15922 +
             (C31099 - C31100 + C31101 - C31102) * C47448) *
                C47369 * C47430 +
            ((C31092 * C468 - C31090 * C478 + C31093 * C471 - C47481 * C484) *
                 C15921 +
             (C31092 * C479 - C31090 * C498 + C31093 * C485 - C47481 * C501) *
                 C15917 +
             (C31451 - C31452 + C31453 - C31454) * C15922 +
             (C31455 - C31456 + C31457 - C31458) * C47448) *
                C47369 * C47268) *
               C47429 +
           (((C31092 * C287 - C31090 * C297 + C31093 * C906 - C47481 * C911) *
                 C15921 +
             (C31092 * C298 - C31090 * C317 + C31093 * C912 - C47481 * C921) *
                 C15917 +
             (C31273 - C31274 + C31275 - C31276) * C15922 +
             (C31277 - C31278 + C31279 - C31280) * C47448) *
                C47369 * C47430 +
            ((C31090 * C911 - C31092 * C906 + C47481 * C1267 - C31093 * C1258) *
                 C15921 +
             (C31090 * C921 - C31092 * C912 + C47481 * C1285 - C31093 * C1268) *
                 C15917 +
             (C31953 - C31954 + C31955 - C31956) * C15922 +
             (C31957 - C31958 + C31959 - C31960) * C47448) *
                C47369 * C47268) *
               C47226) *
              C284 +
          ((((C31096 - C31095 + C31098 - C31097) * C15921 +
             (C31100 - C31099 + C31102 - C31101) * C15917 +
             (C31103 - C31104 + C31105 - C31106) * C15922 +
             (C31107 - C31108 + C31109 - C31110) * C47448) *
                C47369 * C47430 +
            ((C31452 - C31451 + C31454 - C31453) * C15921 +
             (C31456 - C31455 + C31458 - C31457) * C15917 +
             (C31467 - C31468 + C31469 - C31470) * C15922 +
             (C31471 - C31472 + C31473 - C31474) * C47448) *
                C47369 * C47268) *
               C47429 +
           (((C31274 - C31273 + C31276 - C31275) * C15921 +
             (C31278 - C31277 + C31280 - C31279) * C15917 +
             (C31289 - C31290 + C31291 - C31292) * C15922 +
             (C31293 - C31294 + C31295 - C31296) * C47448) *
                C47369 * C47430 +
            ((C31954 - C31953 + C31956 - C31955) * C15921 +
             (C31958 - C31957 + C31960 - C31959) * C15917 +
             (C31961 - C31962 + C31963 - C31964) * C15922 +
             (C31965 - C31966 + C31967 - C31968) * C47448) *
                C47369 * C47268) *
               C47226) *
              C285 +
          ((((C31104 - C31103 + C31106 - C31105) * C15921 +
             (C31108 - C31107 + C31110 - C31109) * C15917 +
             (C31111 - C31112 + C31113 - C31114) * C15922 +
             (C31115 - C31116 + C31117 - C31118) * C47448) *
                C47369 * C47430 +
            ((C31468 - C31467 + C31470 - C31469) * C15921 +
             (C31472 - C31471 + C31474 - C31473) * C15917 +
             (C31751 - C31752 + C31753 - C31754) * C15922 +
             (C31755 - C31756 + C31757 - C31758) * C47448) *
                C47369 * C47268) *
               C47429 +
           (((C31290 - C31289 + C31292 - C31291) * C15921 +
             (C31294 - C31293 + C31296 - C31295) * C15917 +
             (C31613 - C31614 + C31615 - C31616) * C15922 +
             (C31617 - C31618 + C31619 - C31620) * C47448) *
                C47369 * C47430 +
            ((C31962 - C31961 + C31964 - C31963) * C15921 +
             (C31966 - C31965 + C31968 - C31967) * C15917 +
             (C31090 * C917 - C31092 * C909 + C47481 * C2139 - C31093 * C2138) *
                 C15922 +
             (C31090 * C924 - C31092 * C918 + C47481 * C2141 - C31093 * C2140) *
                 C47448) *
                C47369 * C47268) *
               C47226) *
              C47455)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C31090 * C124 - C31092 * C117 + C47481 * C478 - C31093 * C468) *
                C15921 +
            (C31090 * C138 - C31092 * C125 + C47481 * C498 - C31093 * C479) *
                C15917 +
            (C31095 - C31096 + C31097 - C31098) * C15922 +
            (C31099 - C31100 + C31101 - C31102) * C47448) *
               C47369 * C47430 +
           ((C31092 * C468 - C31090 * C478 + C31093 * C471 - C47481 * C484) *
                C15921 +
            (C31092 * C479 - C31090 * C498 + C31093 * C485 - C47481 * C501) *
                C15917 +
            (C31451 - C31452 + C31453 - C31454) * C15922 +
            (C31455 - C31456 + C31457 - C31458) * C47448) *
               C47369 * C47268) *
              C1392 +
          (((C31092 * C287 - C31090 * C297 + C31093 * C906 - C47481 * C911) *
                C15921 +
            (C31092 * C298 - C31090 * C317 + C31093 * C912 - C47481 * C921) *
                C15917 +
            (C31273 - C31274 + C31275 - C31276) * C15922 +
            (C31277 - C31278 + C31279 - C31280) * C47448) *
               C47369 * C47430 +
           ((C31090 * C911 - C31092 * C906 + C47481 * C1267 - C31093 * C1258) *
                C15921 +
            (C31090 * C921 - C31092 * C912 + C47481 * C1285 - C31093 * C1268) *
                C15917 +
            (C31953 - C31954 + C31955 - C31956) * C15922 +
            (C31957 - C31958 + C31959 - C31960) * C47448) *
               C47369 * C47268) *
              C1393 +
          (((C31090 * C303 - C31092 * C290 + C47481 * C1273 - C31093 * C1261) *
                C15921 +
            (C31090 * C320 - C31092 * C304 + C47481 * C1288 - C31093 * C1274) *
                C15917 +
            (C31281 - C31282 + C31283 - C31284) * C15922 +
            (C31285 - C31286 + C31287 - C31288) * C47448) *
               C47369 * C47430 +
           ((C31092 * C1261 - C31090 * C1273 + C31093 * C1264 -
             C47481 * C1279) *
                C15921 +
            (C31092 * C1274 - C31090 * C1288 + C31093 * C1280 -
             C47481 * C1291) *
                C15917 +
            (C32675 - C32676 + C32677 - C32678) * C15922 +
            (C32679 - C32680 + C32681 - C32682) * C47448) *
               C47369 * C47268) *
              C1394 +
          (((C31092 * C1124 - C31090 * C1130 + C31093 * C1666 -
             C47481 * C1669) *
                C15921 +
            (C31092 * C1131 - C31090 * C1142 + C31093 * C1670 -
             C47481 * C1675) *
                C15917 +
            (C32473 - C32474 + C32475 - C32476) * C15922 +
            (C32477 - C32478 + C32479 - C32480) * C47448) *
               C47369 * C47430 +
           ((C31090 * C1669 - C31092 * C1666 + C47481 * C5895 -
             C31093 * C5893) *
                C15921 +
            (C31090 * C1675 - C31092 * C1670 + C47481 * C5899 -
             C31093 * C5896) *
                C15917 +
            (C31090 * C1671 - C31092 * C1667 + C47481 * C5897 -
             C31093 * C5894) *
                C15922 +
            (C31090 * C1676 - C31092 * C1672 + C47481 * C5900 -
             C31093 * C5898) *
                C47448) *
               C47369 * C47268) *
              C47471) *
         C47135) /
            (p * q * std::sqrt(p + q));
    d2ee[172] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C31090 * C124 - C31092 * C117 + C47481 * C478 - C31093 * C468) *
                C15921 +
            (C31090 * C138 - C31092 * C125 + C47481 * C498 - C31093 * C479) *
                C15917 +
            (C31095 - C31096 + C31097 - C31098) * C15922 +
            (C31099 - C31100 + C31101 - C31102) * C47448) *
               C47369 * C47181 * C47500 +
           ((C31092 * C287 - C31090 * C297 + C31093 * C906 - C47481 * C911) *
                C15921 +
            (C31092 * C298 - C31090 * C317 + C31093 * C912 - C47481 * C921) *
                C15917 +
            (C31273 - C31274 + C31275 - C31276) * C15922 +
            (C31277 - C31278 + C31279 - C31280) * C47448) *
               C47369 * C47181 * C47488 +
           ((C31090 * C303 - C31092 * C290 + C47481 * C1273 - C31093 * C1261) *
                C15921 +
            (C31090 * C320 - C31092 * C304 + C47481 * C1288 - C31093 * C1274) *
                C15917 +
            (C31281 - C31282 + C31283 - C31284) * C15922 +
            (C31285 - C31286 + C31287 - C31288) * C47448) *
               C47369 * C47181 * C47461) *
              C284 +
          (((C31096 - C31095 + C31098 - C31097) * C15921 +
            (C31100 - C31099 + C31102 - C31101) * C15917 +
            (C31103 - C31104 + C31105 - C31106) * C15922 +
            (C31107 - C31108 + C31109 - C31110) * C47448) *
               C47369 * C47181 * C47500 +
           ((C31274 - C31273 + C31276 - C31275) * C15921 +
            (C31278 - C31277 + C31280 - C31279) * C15917 +
            (C31289 - C31290 + C31291 - C31292) * C15922 +
            (C31293 - C31294 + C31295 - C31296) * C47448) *
               C47369 * C47181 * C47488 +
           ((C31282 - C31281 + C31284 - C31283) * C15921 +
            (C31286 - C31285 + C31288 - C31287) * C15917 +
            (C31297 - C31298 + C31299 - C31300) * C15922 +
            (C31301 - C31302 + C31303 - C31304) * C47448) *
               C47369 * C47181 * C47461) *
              C285 +
          (((C31104 - C31103 + C31106 - C31105) * C15921 +
            (C31108 - C31107 + C31110 - C31109) * C15917 +
            (C31111 - C31112 + C31113 - C31114) * C15922 +
            (C31115 - C31116 + C31117 - C31118) * C47448) *
               C47369 * C47181 * C47500 +
           ((C31290 - C31289 + C31292 - C31291) * C15921 +
            (C31294 - C31293 + C31296 - C31295) * C15917 +
            (C31092 * C293 - C31090 * C309 + C31093 * C909 - C47481 * C917) *
                C15922 +
            (C31092 * C310 - C31090 * C323 + C31093 * C918 - C47481 * C924) *
                C47448) *
               C47369 * C47181 * C47488 +
           ((C31298 - C31297 + C31300 - C31299) * C15921 +
            (C31302 - C31301 + C31304 - C31303) * C15917 +
            (C31090 * C311 - C31092 * C294 + C47481 * C1557 - C31093 * C1556) *
                C15922 +
            (C31090 * C324 - C31092 * C312 + C47481 * C1559 - C31093 * C1558) *
                C47448) *
               C47369 * C47181 * C47461) *
              C47455)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C31090 * C124 - C31092 * C117 + C47481 * C478 - C31093 * C468) *
               C15921 +
           (C31090 * C138 - C31092 * C125 + C47481 * C498 - C31093 * C479) *
               C15917 +
           (C31095 - C31096 + C31097 - C31098) * C15922 +
           (C31099 - C31100 + C31101 - C31102) * C47448) *
              C47369 * C47181 * C47163 * C108 +
          ((C31096 - C31095 + C31098 - C31097) * C15921 +
           (C31100 - C31099 + C31102 - C31101) * C15917 +
           (C31103 - C31104 + C31105 - C31106) * C15922 +
           (C31107 - C31108 + C31109 - C31110) * C47448) *
              C47369 * C47181 * C47163 * C109 +
          ((C31104 - C31103 + C31106 - C31105) * C15921 +
           (C31108 - C31107 + C31110 - C31109) * C15917 +
           (C31111 - C31112 + C31113 - C31114) * C15922 +
           (C31115 - C31116 + C31117 - C31118) * C47448) *
              C47369 * C47181 * C47163 * C110 +
          ((C31112 - C31111 + C31114 - C31113) * C15921 +
           (C31116 - C31115 + C31118 - C31117) * C15917 +
           (C31119 - C31120 + C31121 - C31122) * C15922 +
           (C31123 - C31124 + C31125 - C31126) * C47448) *
              C47369 * C47181 * C47163 * C111 +
          ((C31120 - C31119 + C31122 - C31121) * C15921 +
           (C31124 - C31123 + C31126 - C31125) * C15917 +
           (C31090 * C134 - C31092 * C122 + C47481 * C751 - C31093 * C750) *
               C15922 +
           (C31090 * C143 - C31092 * C135 + C47481 * C753 - C31093 * C752) *
               C47448) *
              C47369 * C47181 * C47163 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C31090 * C124 - C31092 * C117 + C47481 * C478 - C31093 * C468) *
                C15921 +
            (C31090 * C138 - C31092 * C125 + C47481 * C498 - C31093 * C479) *
                C15917 +
            (C31095 - C31096 + C31097 - C31098) * C15922 +
            (C31099 - C31100 + C31101 - C31102) * C47448) *
               C47369 * C47501 +
           ((C31092 * C468 - C31090 * C478 + C31093 * C471 - C47481 * C484) *
                C15921 +
            (C31092 * C479 - C31090 * C498 + C31093 * C485 - C47481 * C501) *
                C15917 +
            (C31451 - C31452 + C31453 - C31454) * C15922 +
            (C31455 - C31456 + C31457 - C31458) * C47448) *
               C47369 * C47490 +
           ((C31090 * C484 - C31092 * C471 + C47481 * C1974 - C31093 * C1968) *
                C15921 +
            (C31090 * C501 - C31092 * C485 + C47481 * C1986 - C31093 * C1975) *
                C15917 +
            (C31459 - C31460 + C31461 - C31462) * C15922 +
            (C31463 - C31464 + C31465 - C31466) * C47448) *
               C47369 * C47464) *
              C47163 * C284 +
          (((C31096 - C31095 + C31098 - C31097) * C15921 +
            (C31100 - C31099 + C31102 - C31101) * C15917 +
            (C31103 - C31104 + C31105 - C31106) * C15922 +
            (C31107 - C31108 + C31109 - C31110) * C47448) *
               C47369 * C47501 +
           ((C31452 - C31451 + C31454 - C31453) * C15921 +
            (C31456 - C31455 + C31458 - C31457) * C15917 +
            (C31467 - C31468 + C31469 - C31470) * C15922 +
            (C31471 - C31472 + C31473 - C31474) * C47448) *
               C47369 * C47490 +
           ((C31460 - C31459 + C31462 - C31461) * C15921 +
            (C31464 - C31463 + C31466 - C31465) * C15917 +
            (C31475 - C31476 + C31477 - C31478) * C15922 +
            (C31479 - C31480 + C31481 - C31482) * C47448) *
               C47369 * C47464) *
              C47163 * C285 +
          (((C31104 - C31103 + C31106 - C31105) * C15921 +
            (C31108 - C31107 + C31110 - C31109) * C15917 +
            (C31111 - C31112 + C31113 - C31114) * C15922 +
            (C31115 - C31116 + C31117 - C31118) * C47448) *
               C47369 * C47501 +
           ((C31468 - C31467 + C31470 - C31469) * C15921 +
            (C31472 - C31471 + C31474 - C31473) * C15917 +
            (C31092 * C474 - C31090 * C490 + C31093 * C475 - C47481 * C492) *
                C15922 +
            (C31092 * C491 - C31090 * C504 + C31093 * C493 - C47481 * C505) *
                C47448) *
               C47369 * C47490 +
           ((C31476 - C31475 + C31478 - C31477) * C15921 +
            (C31480 - C31479 + C31482 - C31481) * C15917 +
            (C31090 * C492 - C31092 * C475 + C47481 * C2253 - C31093 * C2252) *
                C15922 +
            (C31090 * C505 - C31092 * C493 + C47481 * C2255 - C31093 * C2254) *
                C47448) *
               C47369 * C47464) *
              C47163 * C47455)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C31090 * C124 - C31092 * C117 + C47481 * C478 - C31093 * C468) *
                C15921 +
            (C31090 * C138 - C31092 * C125 + C47481 * C498 - C31093 * C479) *
                C15917 +
            (C31095 - C31096 + C31097 - C31098) * C15922 +
            (C31099 - C31100 + C31101 - C31102) * C47448) *
               C47369 * C47181 * C1050 +
           ((C31092 * C287 - C31090 * C297 + C31093 * C906 - C47481 * C911) *
                C15921 +
            (C31092 * C298 - C31090 * C317 + C31093 * C912 - C47481 * C921) *
                C15917 +
            (C31273 - C31274 + C31275 - C31276) * C15922 +
            (C31277 - C31278 + C31279 - C31280) * C47448) *
               C47369 * C47181 * C1051 +
           ((C31090 * C303 - C31092 * C290 + C47481 * C1273 - C31093 * C1261) *
                C15921 +
            (C31090 * C320 - C31092 * C304 + C47481 * C1288 - C31093 * C1274) *
                C15917 +
            (C31281 - C31282 + C31283 - C31284) * C15922 +
            (C31285 - C31286 + C31287 - C31288) * C47448) *
               C47369 * C47181 * C47461) *
              C47497 +
          (((C31096 - C31095 + C31098 - C31097) * C15921 +
            (C31100 - C31099 + C31102 - C31101) * C15917 +
            (C31103 - C31104 + C31105 - C31106) * C15922 +
            (C31107 - C31108 + C31109 - C31110) * C47448) *
               C47369 * C47181 * C1050 +
           ((C31274 - C31273 + C31276 - C31275) * C15921 +
            (C31278 - C31277 + C31280 - C31279) * C15917 +
            (C31289 - C31290 + C31291 - C31292) * C15922 +
            (C31293 - C31294 + C31295 - C31296) * C47448) *
               C47369 * C47181 * C1051 +
           ((C31282 - C31281 + C31284 - C31283) * C15921 +
            (C31286 - C31285 + C31288 - C31287) * C15917 +
            (C31297 - C31298 + C31299 - C31300) * C15922 +
            (C31301 - C31302 + C31303 - C31304) * C47448) *
               C47369 * C47181 * C47461) *
              C47484 +
          (((C31104 - C31103 + C31106 - C31105) * C15921 +
            (C31108 - C31107 + C31110 - C31109) * C15917 +
            (C31111 - C31112 + C31113 - C31114) * C15922 +
            (C31115 - C31116 + C31117 - C31118) * C47448) *
               C47369 * C47181 * C1050 +
           ((C31290 - C31289 + C31292 - C31291) * C15921 +
            (C31294 - C31293 + C31296 - C31295) * C15917 +
            (C31613 - C31614 + C31615 - C31616) * C15922 +
            (C31617 - C31618 + C31619 - C31620) * C47448) *
               C47369 * C47181 * C1051 +
           ((C31298 - C31297 + C31300 - C31299) * C15921 +
            (C31302 - C31301 + C31304 - C31303) * C15917 +
            (C31090 * C311 - C31092 * C294 + C47481 * C1557 - C31093 * C1556) *
                C15922 +
            (C31090 * C324 - C31092 * C312 + C47481 * C1559 - C31093 * C1558) *
                C47448) *
               C47369 * C47181 * C47461) *
              C47455)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C31090 * C124 - C31092 * C117 + C47481 * C478 - C31093 * C468) *
               C15921 +
           (C31090 * C138 - C31092 * C125 + C47481 * C498 - C31093 * C479) *
               C15917 +
           (C31095 - C31096 + C31097 - C31098) * C15922 +
           (C31099 - C31100 + C31101 - C31102) * C47448) *
              C47369 * C47181 * C1118 +
          ((C31092 * C287 - C31090 * C297 + C31093 * C906 - C47481 * C911) *
               C15921 +
           (C31092 * C298 - C31090 * C317 + C31093 * C912 - C47481 * C921) *
               C15917 +
           (C31273 - C31274 + C31275 - C31276) * C15922 +
           (C31277 - C31278 + C31279 - C31280) * C47448) *
              C47369 * C47181 * C1119 +
          ((C31090 * C303 - C31092 * C290 + C47481 * C1273 - C31093 * C1261) *
               C15921 +
           (C31090 * C320 - C31092 * C304 + C47481 * C1288 - C31093 * C1274) *
               C15917 +
           (C31281 - C31282 + C31283 - C31284) * C15922 +
           (C31285 - C31286 + C31287 - C31288) * C47448) *
              C47369 * C47181 * C1120 +
          ((C31092 * C1124 - C31090 * C1130 + C31093 * C1666 - C47481 * C1669) *
               C15921 +
           (C31092 * C1131 - C31090 * C1142 + C31093 * C1670 - C47481 * C1675) *
               C15917 +
           (C31092 * C1125 - C31090 * C1132 + C31093 * C1667 - C47481 * C1671) *
               C15922 +
           (C31092 * C1133 - C31090 * C1143 + C31093 * C1672 - C47481 * C1676) *
               C47448) *
              C47369 * C47181 * C1121 +
          ((C31090 * C1136 - C31092 * C1127 + C47481 * C6385 - C31093 * C6383) *
               C15921 +
           (C31090 * C1145 - C31092 * C1137 + C47481 * C6389 - C31093 * C6386) *
               C15917 +
           (C31090 * C1138 - C31092 * C1128 + C47481 * C6387 - C31093 * C6384) *
               C15922 +
           (C31090 * C1146 - C31092 * C1139 + C47481 * C6390 - C31093 * C6388) *
               C47448) *
              C47369 * C47181 * C1122) *
         C47135) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C31090 * C124 - C31092 * C117 + C47481 * C478 - C31093 * C468) *
                C15921 +
            (C31090 * C138 - C31092 * C125 + C47481 * C498 - C31093 * C479) *
                C15917 +
            (C31095 - C31096 + C31097 - C31098) * C15922 +
            (C31099 - C31100 + C31101 - C31102) * C47448) *
               C47369 * C47501 +
           ((C31092 * C468 - C31090 * C478 + C31093 * C471 - C47481 * C484) *
                C15921 +
            (C31092 * C479 - C31090 * C498 + C31093 * C485 - C47481 * C501) *
                C15917 +
            (C31451 - C31452 + C31453 - C31454) * C15922 +
            (C31455 - C31456 + C31457 - C31458) * C47448) *
               C47369 * C47490 +
           ((C31090 * C484 - C31092 * C471 + C47481 * C1974 - C31093 * C1968) *
                C15921 +
            (C31090 * C501 - C31092 * C485 + C47481 * C1986 - C31093 * C1975) *
                C15917 +
            (C31459 - C31460 + C31461 - C31462) * C15922 +
            (C31463 - C31464 + C31465 - C31466) * C47448) *
               C47369 * C47464) *
              C1050 +
          (((C31092 * C287 - C31090 * C297 + C31093 * C906 - C47481 * C911) *
                C15921 +
            (C31092 * C298 - C31090 * C317 + C31093 * C912 - C47481 * C921) *
                C15917 +
            (C31273 - C31274 + C31275 - C31276) * C15922 +
            (C31277 - C31278 + C31279 - C31280) * C47448) *
               C47369 * C47501 +
           ((C31090 * C911 - C31092 * C906 + C47481 * C1267 - C31093 * C1258) *
                C15921 +
            (C31090 * C921 - C31092 * C912 + C47481 * C1285 - C31093 * C1268) *
                C15917 +
            (C31953 - C31954 + C31955 - C31956) * C15922 +
            (C31957 - C31958 + C31959 - C31960) * C47448) *
               C47369 * C47490 +
           ((C31092 * C1258 - C31090 * C1267 + C31093 * C2362 -
             C47481 * C2365) *
                C15921 +
            (C31092 * C1268 - C31090 * C1285 + C31093 * C2366 -
             C47481 * C2371) *
                C15917 +
            (C31092 * C1259 - C31090 * C1269 + C31093 * C2363 -
             C47481 * C2367) *
                C15922 +
            (C31092 * C1270 - C31090 * C1286 + C31093 * C2368 -
             C47481 * C2372) *
                C47448) *
               C47369 * C47464) *
              C1051 +
          (((C31090 * C303 - C31092 * C290 + C47481 * C1273 - C31093 * C1261) *
                C15921 +
            (C31090 * C320 - C31092 * C304 + C47481 * C1288 - C31093 * C1274) *
                C15917 +
            (C31281 - C31282 + C31283 - C31284) * C15922 +
            (C31285 - C31286 + C31287 - C31288) * C47448) *
               C47369 * C47501 +
           ((C31092 * C1261 - C31090 * C1273 + C31093 * C1264 -
             C47481 * C1279) *
                C15921 +
            (C31092 * C1274 - C31090 * C1288 + C31093 * C1280 -
             C47481 * C1291) *
                C15917 +
            (C31092 * C1262 - C31090 * C1275 + C31093 * C1265 -
             C47481 * C1281) *
                C15922 +
            (C31092 * C1276 - C31090 * C1289 + C31093 * C1282 -
             C47481 * C1292) *
                C47448) *
               C47369 * C47490 +
           ((C31090 * C1279 - C31092 * C1264 + C47481 * C7241 -
             C31093 * C7239) *
                C15921 +
            (C31090 * C1291 - C31092 * C1280 + C47481 * C7245 -
             C31093 * C7242) *
                C15917 +
            (C31090 * C1281 - C31092 * C1265 + C47481 * C7243 -
             C31093 * C7240) *
                C15922 +
            (C31090 * C1292 - C31092 * C1282 + C47481 * C7246 -
             C31093 * C7244) *
                C47448) *
               C47369 * C47464) *
              C47461) *
         C47135) /
            (p * q * std::sqrt(p + q));
    d2ee[173] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C31090 * C124 - C31092 * C117 + C47481 * C478 - C31093 * C468) *
                C15921 +
            (C31090 * C138 - C31092 * C125 + C47481 * C498 - C31093 * C479) *
                C15917 +
            (C31095 - C31096 + C31097 - C31098) * C15922 +
            (C31099 - C31100 + C31101 - C31102) * C47448) *
               C47369 * C47430 +
           ((C31092 * C468 - C31090 * C478 + C31093 * C471 - C47481 * C484) *
                C15921 +
            (C31092 * C479 - C31090 * C498 + C31093 * C485 - C47481 * C501) *
                C15917 +
            (C31451 - C31452 + C31453 - C31454) * C15922 +
            (C31455 - C31456 + C31457 - C31458) * C47448) *
               C47369 * C47268) *
              C47163 * C636 +
          (((C31096 - C31095 + C31098 - C31097) * C15921 +
            (C31100 - C31099 + C31102 - C31101) * C15917 +
            (C31103 - C31104 + C31105 - C31106) * C15922 +
            (C31107 - C31108 + C31109 - C31110) * C47448) *
               C47369 * C47430 +
           ((C31452 - C31451 + C31454 - C31453) * C15921 +
            (C31456 - C31455 + C31458 - C31457) * C15917 +
            (C31467 - C31468 + C31469 - C31470) * C15922 +
            (C31471 - C31472 + C31473 - C31474) * C47448) *
               C47369 * C47268) *
              C47163 * C637 +
          (((C31104 - C31103 + C31106 - C31105) * C15921 +
            (C31108 - C31107 + C31110 - C31109) * C15917 +
            (C31111 - C31112 + C31113 - C31114) * C15922 +
            (C31115 - C31116 + C31117 - C31118) * C47448) *
               C47369 * C47430 +
           ((C31468 - C31467 + C31470 - C31469) * C15921 +
            (C31472 - C31471 + C31474 - C31473) * C15917 +
            (C31751 - C31752 + C31753 - C31754) * C15922 +
            (C31755 - C31756 + C31757 - C31758) * C47448) *
               C47369 * C47268) *
              C47163 * C638 +
          (((C31112 - C31111 + C31114 - C31113) * C15921 +
            (C31116 - C31115 + C31118 - C31117) * C15917 +
            (C31119 - C31120 + C31121 - C31122) * C15922 +
            (C31123 - C31124 + C31125 - C31126) * C47448) *
               C47369 * C47430 +
           ((C31752 - C31751 + C31754 - C31753) * C15921 +
            (C31756 - C31755 + C31758 - C31757) * C15917 +
            (C31090 * C494 - C31092 * C476 + C47481 * C496 - C31093 * C477) *
                C15922 +
            (C31090 * C506 - C31092 * C495 + C47481 * C507 - C31093 * C497) *
                C47448) *
               C47369 * C47268) *
              C47163 * C47465)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C31090 * C124 - C31092 * C117 + C47481 * C478 - C31093 * C468) *
                 C15921 +
             (C31090 * C138 - C31092 * C125 + C47481 * C498 - C31093 * C479) *
                 C15917 +
             (C31095 - C31096 + C31097 - C31098) * C15922 +
             (C31099 - C31100 + C31101 - C31102) * C47448) *
                C47369 * C47430 +
            ((C31092 * C468 - C31090 * C478 + C31093 * C471 - C47481 * C484) *
                 C15921 +
             (C31092 * C479 - C31090 * C498 + C31093 * C485 - C47481 * C501) *
                 C15917 +
             (C31451 - C31452 + C31453 - C31454) * C15922 +
             (C31455 - C31456 + C31457 - C31458) * C47448) *
                C47369 * C47268) *
               C1050 +
           (((C31092 * C287 - C31090 * C297 + C31093 * C906 - C47481 * C911) *
                 C15921 +
             (C31092 * C298 - C31090 * C317 + C31093 * C912 - C47481 * C921) *
                 C15917 +
             (C31273 - C31274 + C31275 - C31276) * C15922 +
             (C31277 - C31278 + C31279 - C31280) * C47448) *
                C47369 * C47430 +
            ((C31090 * C911 - C31092 * C906 + C47481 * C1267 - C31093 * C1258) *
                 C15921 +
             (C31090 * C921 - C31092 * C912 + C47481 * C1285 - C31093 * C1268) *
                 C15917 +
             (C31953 - C31954 + C31955 - C31956) * C15922 +
             (C31957 - C31958 + C31959 - C31960) * C47448) *
                C47369 * C47268) *
               C1051 +
           (((C31090 * C303 - C31092 * C290 + C47481 * C1273 - C31093 * C1261) *
                 C15921 +
             (C31090 * C320 - C31092 * C304 + C47481 * C1288 - C31093 * C1274) *
                 C15917 +
             (C31281 - C31282 + C31283 - C31284) * C15922 +
             (C31285 - C31286 + C31287 - C31288) * C47448) *
                C47369 * C47430 +
            ((C31092 * C1261 - C31090 * C1273 + C31093 * C1264 -
              C47481 * C1279) *
                 C15921 +
             (C31092 * C1274 - C31090 * C1288 + C31093 * C1280 -
              C47481 * C1291) *
                 C15917 +
             (C32675 - C32676 + C32677 - C32678) * C15922 +
             (C32679 - C32680 + C32681 - C32682) * C47448) *
                C47369 * C47268) *
               C47461) *
              C47415 +
          ((((C31096 - C31095 + C31098 - C31097) * C15921 +
             (C31100 - C31099 + C31102 - C31101) * C15917 +
             (C31103 - C31104 + C31105 - C31106) * C15922 +
             (C31107 - C31108 + C31109 - C31110) * C47448) *
                C47369 * C47430 +
            ((C31452 - C31451 + C31454 - C31453) * C15921 +
             (C31456 - C31455 + C31458 - C31457) * C15917 +
             (C31467 - C31468 + C31469 - C31470) * C15922 +
             (C31471 - C31472 + C31473 - C31474) * C47448) *
                C47369 * C47268) *
               C1050 +
           (((C31274 - C31273 + C31276 - C31275) * C15921 +
             (C31278 - C31277 + C31280 - C31279) * C15917 +
             (C31289 - C31290 + C31291 - C31292) * C15922 +
             (C31293 - C31294 + C31295 - C31296) * C47448) *
                C47369 * C47430 +
            ((C31954 - C31953 + C31956 - C31955) * C15921 +
             (C31958 - C31957 + C31960 - C31959) * C15917 +
             (C31961 - C31962 + C31963 - C31964) * C15922 +
             (C31965 - C31966 + C31967 - C31968) * C47448) *
                C47369 * C47268) *
               C1051 +
           (((C31282 - C31281 + C31284 - C31283) * C15921 +
             (C31286 - C31285 + C31288 - C31287) * C15917 +
             (C31297 - C31298 + C31299 - C31300) * C15922 +
             (C31301 - C31302 + C31303 - C31304) * C47448) *
                C47369 * C47430 +
            ((C32676 - C32675 + C32678 - C32677) * C15921 +
             (C32680 - C32679 + C32682 - C32681) * C15917 +
             (C31090 * C1277 - C31092 * C1263 + C47481 * C1283 -
              C31093 * C1266) *
                 C15922 +
             (C31090 * C1290 - C31092 * C1278 + C47481 * C1293 -
              C31093 * C1284) *
                 C47448) *
                C47369 * C47268) *
               C47461) *
              C47146)) /
            (p * q * std::sqrt(p + q));
    d2ee[174] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C31090 * C124 - C31092 * C117 + C47481 * C478 - C31093 * C468) *
               C15921 +
           (C31090 * C138 - C31092 * C125 + C47481 * C498 - C31093 * C479) *
               C15917 +
           (C31095 - C31096 + C31097 - C31098) * C15922 +
           (C31099 - C31100 + C31101 - C31102) * C47448) *
              C47369 * C47181 * C47163 * C108 +
          ((C31096 - C31095 + C31098 - C31097) * C15921 +
           (C31100 - C31099 + C31102 - C31101) * C15917 +
           (C31103 - C31104 + C31105 - C31106) * C15922 +
           (C31107 - C31108 + C31109 - C31110) * C47448) *
              C47369 * C47181 * C47163 * C109 +
          ((C31104 - C31103 + C31106 - C31105) * C15921 +
           (C31108 - C31107 + C31110 - C31109) * C15917 +
           (C31111 - C31112 + C31113 - C31114) * C15922 +
           (C31115 - C31116 + C31117 - C31118) * C47448) *
              C47369 * C47181 * C47163 * C110 +
          ((C31112 - C31111 + C31114 - C31113) * C15921 +
           (C31116 - C31115 + C31118 - C31117) * C15917 +
           (C31119 - C31120 + C31121 - C31122) * C15922 +
           (C31123 - C31124 + C31125 - C31126) * C47448) *
              C47369 * C47181 * C47163 * C111 +
          ((C31120 - C31119 + C31122 - C31121) * C15921 +
           (C31124 - C31123 + C31126 - C31125) * C15917 +
           (C31090 * C134 - C31092 * C122 + C47481 * C751 - C31093 * C750) *
               C15922 +
           (C31090 * C143 - C31092 * C135 + C47481 * C753 - C31093 * C752) *
               C47448) *
              C47369 * C47181 * C47163 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C31090 * C124 - C31092 * C117 + C47481 * C478 - C31093 * C468) *
                C15921 +
            (C31090 * C138 - C31092 * C125 + C47481 * C498 - C31093 * C479) *
                C15917 +
            (C31095 - C31096 + C31097 - C31098) * C15922 +
            (C31099 - C31100 + C31101 - C31102) * C47448) *
               C47369 * C47181 * C47500 +
           ((C31092 * C287 - C31090 * C297 + C31093 * C906 - C47481 * C911) *
                C15921 +
            (C31092 * C298 - C31090 * C317 + C31093 * C912 - C47481 * C921) *
                C15917 +
            (C31273 - C31274 + C31275 - C31276) * C15922 +
            (C31277 - C31278 + C31279 - C31280) * C47448) *
               C47369 * C47181 * C47488 +
           ((C31090 * C303 - C31092 * C290 + C47481 * C1273 - C31093 * C1261) *
                C15921 +
            (C31090 * C320 - C31092 * C304 + C47481 * C1288 - C31093 * C1274) *
                C15917 +
            (C31281 - C31282 + C31283 - C31284) * C15922 +
            (C31285 - C31286 + C31287 - C31288) * C47448) *
               C47369 * C47181 * C47461) *
              C284 +
          (((C31096 - C31095 + C31098 - C31097) * C15921 +
            (C31100 - C31099 + C31102 - C31101) * C15917 +
            (C31103 - C31104 + C31105 - C31106) * C15922 +
            (C31107 - C31108 + C31109 - C31110) * C47448) *
               C47369 * C47181 * C47500 +
           ((C31274 - C31273 + C31276 - C31275) * C15921 +
            (C31278 - C31277 + C31280 - C31279) * C15917 +
            (C31289 - C31290 + C31291 - C31292) * C15922 +
            (C31293 - C31294 + C31295 - C31296) * C47448) *
               C47369 * C47181 * C47488 +
           ((C31282 - C31281 + C31284 - C31283) * C15921 +
            (C31286 - C31285 + C31288 - C31287) * C15917 +
            (C31297 - C31298 + C31299 - C31300) * C15922 +
            (C31301 - C31302 + C31303 - C31304) * C47448) *
               C47369 * C47181 * C47461) *
              C285 +
          (((C31104 - C31103 + C31106 - C31105) * C15921 +
            (C31108 - C31107 + C31110 - C31109) * C15917 +
            (C31111 - C31112 + C31113 - C31114) * C15922 +
            (C31115 - C31116 + C31117 - C31118) * C47448) *
               C47369 * C47181 * C47500 +
           ((C31290 - C31289 + C31292 - C31291) * C15921 +
            (C31294 - C31293 + C31296 - C31295) * C15917 +
            (C31092 * C293 - C31090 * C309 + C31093 * C909 - C47481 * C917) *
                C15922 +
            (C31092 * C310 - C31090 * C323 + C31093 * C918 - C47481 * C924) *
                C47448) *
               C47369 * C47181 * C47488 +
           ((C31298 - C31297 + C31300 - C31299) * C15921 +
            (C31302 - C31301 + C31304 - C31303) * C15917 +
            (C31090 * C311 - C31092 * C294 + C47481 * C1557 - C31093 * C1556) *
                C15922 +
            (C31090 * C324 - C31092 * C312 + C47481 * C1559 - C31093 * C1558) *
                C47448) *
               C47369 * C47181 * C47461) *
              C47455)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C31090 * C124 - C31092 * C117 + C47481 * C478 - C31093 * C468) *
                C15921 +
            (C31090 * C138 - C31092 * C125 + C47481 * C498 - C31093 * C479) *
                C15917 +
            (C31095 - C31096 + C31097 - C31098) * C15922 +
            (C31099 - C31100 + C31101 - C31102) * C47448) *
               C47369 * C47181 * C1050 +
           ((C31092 * C287 - C31090 * C297 + C31093 * C906 - C47481 * C911) *
                C15921 +
            (C31092 * C298 - C31090 * C317 + C31093 * C912 - C47481 * C921) *
                C15917 +
            (C31273 - C31274 + C31275 - C31276) * C15922 +
            (C31277 - C31278 + C31279 - C31280) * C47448) *
               C47369 * C47181 * C1051 +
           ((C31090 * C303 - C31092 * C290 + C47481 * C1273 - C31093 * C1261) *
                C15921 +
            (C31090 * C320 - C31092 * C304 + C47481 * C1288 - C31093 * C1274) *
                C15917 +
            (C31281 - C31282 + C31283 - C31284) * C15922 +
            (C31285 - C31286 + C31287 - C31288) * C47448) *
               C47369 * C47181 * C47461) *
              C47497 +
          (((C31096 - C31095 + C31098 - C31097) * C15921 +
            (C31100 - C31099 + C31102 - C31101) * C15917 +
            (C31103 - C31104 + C31105 - C31106) * C15922 +
            (C31107 - C31108 + C31109 - C31110) * C47448) *
               C47369 * C47181 * C1050 +
           ((C31274 - C31273 + C31276 - C31275) * C15921 +
            (C31278 - C31277 + C31280 - C31279) * C15917 +
            (C31289 - C31290 + C31291 - C31292) * C15922 +
            (C31293 - C31294 + C31295 - C31296) * C47448) *
               C47369 * C47181 * C1051 +
           ((C31282 - C31281 + C31284 - C31283) * C15921 +
            (C31286 - C31285 + C31288 - C31287) * C15917 +
            (C31297 - C31298 + C31299 - C31300) * C15922 +
            (C31301 - C31302 + C31303 - C31304) * C47448) *
               C47369 * C47181 * C47461) *
              C47484 +
          (((C31104 - C31103 + C31106 - C31105) * C15921 +
            (C31108 - C31107 + C31110 - C31109) * C15917 +
            (C31111 - C31112 + C31113 - C31114) * C15922 +
            (C31115 - C31116 + C31117 - C31118) * C47448) *
               C47369 * C47181 * C1050 +
           ((C31290 - C31289 + C31292 - C31291) * C15921 +
            (C31294 - C31293 + C31296 - C31295) * C15917 +
            (C31613 - C31614 + C31615 - C31616) * C15922 +
            (C31617 - C31618 + C31619 - C31620) * C47448) *
               C47369 * C47181 * C1051 +
           ((C31298 - C31297 + C31300 - C31299) * C15921 +
            (C31302 - C31301 + C31304 - C31303) * C15917 +
            (C31090 * C311 - C31092 * C294 + C47481 * C1557 - C31093 * C1556) *
                C15922 +
            (C31090 * C324 - C31092 * C312 + C47481 * C1559 - C31093 * C1558) *
                C47448) *
               C47369 * C47181 * C47461) *
              C47455)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C31090 * C124 - C31092 * C117 + C47481 * C478 - C31093 * C468) *
               C15921 +
           (C31090 * C138 - C31092 * C125 + C47481 * C498 - C31093 * C479) *
               C15917 +
           (C31095 - C31096 + C31097 - C31098) * C15922 +
           (C31099 - C31100 + C31101 - C31102) * C47448) *
              C47369 * C47181 * C1118 +
          ((C31092 * C287 - C31090 * C297 + C31093 * C906 - C47481 * C911) *
               C15921 +
           (C31092 * C298 - C31090 * C317 + C31093 * C912 - C47481 * C921) *
               C15917 +
           (C31273 - C31274 + C31275 - C31276) * C15922 +
           (C31277 - C31278 + C31279 - C31280) * C47448) *
              C47369 * C47181 * C1119 +
          ((C31090 * C303 - C31092 * C290 + C47481 * C1273 - C31093 * C1261) *
               C15921 +
           (C31090 * C320 - C31092 * C304 + C47481 * C1288 - C31093 * C1274) *
               C15917 +
           (C31281 - C31282 + C31283 - C31284) * C15922 +
           (C31285 - C31286 + C31287 - C31288) * C47448) *
              C47369 * C47181 * C1120 +
          ((C31092 * C1124 - C31090 * C1130 + C31093 * C1666 - C47481 * C1669) *
               C15921 +
           (C31092 * C1131 - C31090 * C1142 + C31093 * C1670 - C47481 * C1675) *
               C15917 +
           (C31092 * C1125 - C31090 * C1132 + C31093 * C1667 - C47481 * C1671) *
               C15922 +
           (C31092 * C1133 - C31090 * C1143 + C31093 * C1672 - C47481 * C1676) *
               C47448) *
              C47369 * C47181 * C1121 +
          ((C31090 * C1136 - C31092 * C1127 + C47481 * C6385 - C31093 * C6383) *
               C15921 +
           (C31090 * C1145 - C31092 * C1137 + C47481 * C6389 - C31093 * C6386) *
               C15917 +
           (C31090 * C1138 - C31092 * C1128 + C47481 * C6387 - C31093 * C6384) *
               C15922 +
           (C31090 * C1146 - C31092 * C1139 + C47481 * C6390 - C31093 * C6388) *
               C47448) *
              C47369 * C47181 * C1122) *
         C47135) /
            (p * q * std::sqrt(p + q));
    d2ee[175] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C31090 * C124 - C31092 * C117 + C47481 * C478 - C31093 * C468) *
                 C21355 +
             (C31090 * C138 - C31092 * C125 + C47481 * C498 - C31093 * C479) *
                 C47110) *
                C4717 +
            ((C36849 - C36850 + C36851 - C36852) * C21355 +
             (C36853 - C36854 + C36855 - C36856) * C47110) *
                C47479) *
               C47181 * C47222 +
           (((C36850 - C36849 + C36852 - C36851) * C21355 +
             (C36854 - C36853 + C36856 - C36855) * C47110) *
                C4717 +
            ((C36857 - C36858 + C36859 - C36860) * C21355 +
             (C36861 - C36862 + C36863 - C36864) * C47110) *
                C47479) *
               C47181 * C47229 +
           (((C36858 - C36857 + C36860 - C36859) * C21355 +
             (C36862 - C36861 + C36864 - C36863) * C47110) *
                C4717 +
            ((C37701 - C37702 + C37703 - C37704) * C21355 +
             (C37705 - C37706 + C37707 - C37708) * C47110) *
                C47479) *
               C47181 * C2840) *
              C47140 +
          ((((C31096 - C31095 + C31098 - C31097) * C21355 +
             (C31100 - C31099 + C31102 - C31101) * C47110) *
                C4717 +
            ((C31273 - C31274 + C31275 - C31276) * C21355 +
             (C31277 - C31278 + C31279 - C31280) * C47110) *
                C47479) *
               C47181 * C47222 +
           (((C31274 - C31273 + C31276 - C31275) * C21355 +
             (C31278 - C31277 + C31280 - C31279) * C47110) *
                C4717 +
            ((C31281 - C31282 + C31283 - C31284) * C21355 +
             (C31285 - C31286 + C31287 - C31288) * C47110) *
                C47479) *
               C47181 * C47229 +
           (((C31282 - C31281 + C31284 - C31283) * C21355 +
             (C31286 - C31285 + C31288 - C31287) * C47110) *
                C4717 +
            ((C32473 - C32474 + C32475 - C32476) * C21355 +
             (C32477 - C32478 + C32479 - C32480) * C47110) *
                C47479) *
               C47181 * C2840) *
              C47149 +
          ((((C31104 - C31103 + C31106 - C31105) * C21355 +
             (C31108 - C31107 + C31110 - C31109) * C47110) *
                C4717 +
            ((C31289 - C31290 + C31291 - C31292) * C21355 +
             (C31293 - C31294 + C31295 - C31296) * C47110) *
                C47479) *
               C47181 * C47222 +
           (((C31290 - C31289 + C31292 - C31291) * C21355 +
             (C31294 - C31293 + C31296 - C31295) * C47110) *
                C4717 +
            ((C31297 - C31298 + C31299 - C31300) * C21355 +
             (C31301 - C31302 + C31303 - C31304) * C47110) *
                C47479) *
               C47181 * C47229 +
           (((C31298 - C31297 + C31300 - C31299) * C21355 +
             (C31302 - C31301 + C31304 - C31303) * C47110) *
                C4717 +
            ((C31090 * C1134 - C31092 * C1126 + C47481 * C1673 -
              C31093 * C1668) *
                 C21355 +
             (C31090 * C1144 - C31092 * C1135 + C47481 * C1677 -
              C31093 * C1674) *
                 C47110) *
                C47479) *
               C47181 * C2840) *
              C2843)) /
        (p * q * std::sqrt(p + q));
    d2ee[176] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C31090 * C124 - C31092 * C117 + C47481 * C478 - C31093 * C468) *
                  C21355 +
              (C31090 * C138 - C31092 * C125 + C47481 * C498 - C31093 * C479) *
                  C47110) *
                 C4717 +
             ((C36849 - C36850 + C36851 - C36852) * C21355 +
              (C36853 - C36854 + C36855 - C36856) * C47110) *
                 C47479) *
                C47430 +
            (((C31092 * C468 - C31090 * C478 + C31093 * C471 - C47481 * C484) *
                  C21355 +
              (C31092 * C479 - C31090 * C498 + C31093 * C485 - C47481 * C501) *
                  C47110) *
                 C4717 +
             ((C37465 - C37466 + C37467 - C37468) * C21355 +
              (C37469 - C37470 + C37471 - C37472) * C47110) *
                 C47479) *
                C47268) *
               C47222 +
           ((((C36850 - C36849 + C36852 - C36851) * C21355 +
              (C36854 - C36853 + C36856 - C36855) * C47110) *
                 C4717 +
             ((C36857 - C36858 + C36859 - C36860) * C21355 +
              (C36861 - C36862 + C36863 - C36864) * C47110) *
                 C47479) *
                C47430 +
            (((C37466 - C37465 + C37468 - C37467) * C21355 +
              (C37470 - C37469 + C37472 - C37471) * C47110) *
                 C4717 +
             ((C37871 - C37872 + C37873 - C37874) * C21355 +
              (C37875 - C37876 + C37877 - C37878) * C47110) *
                 C47479) *
                C47268) *
               C47229 +
           ((((C36858 - C36857 + C36860 - C36859) * C21355 +
              (C36862 - C36861 + C36864 - C36863) * C47110) *
                 C4717 +
             ((C37701 - C37702 + C37703 - C37704) * C21355 +
              (C37705 - C37706 + C37707 - C37708) * C47110) *
                 C47479) *
                C47430 +
            (((C37872 - C37871 + C37874 - C37873) * C21355 +
              (C37876 - C37875 + C37878 - C37877) * C47110) *
                 C4717 +
             ((C38341 - C38342 + C38343 - C38344) * C21355 +
              (C38345 - C38346 + C38347 - C38348) * C47110) *
                 C47479) *
                C47268) *
               C2840) *
              C2580 +
          (((((C31096 - C31095 + C31098 - C31097) * C21355 +
              (C31100 - C31099 + C31102 - C31101) * C47110) *
                 C4717 +
             ((C31273 - C31274 + C31275 - C31276) * C21355 +
              (C31277 - C31278 + C31279 - C31280) * C47110) *
                 C47479) *
                C47430 +
            (((C31452 - C31451 + C31454 - C31453) * C21355 +
              (C31456 - C31455 + C31458 - C31457) * C47110) *
                 C4717 +
             ((C31953 - C31954 + C31955 - C31956) * C21355 +
              (C31957 - C31958 + C31959 - C31960) * C47110) *
                 C47479) *
                C47268) *
               C47222 +
           ((((C31274 - C31273 + C31276 - C31275) * C21355 +
              (C31278 - C31277 + C31280 - C31279) * C47110) *
                 C4717 +
             ((C31281 - C31282 + C31283 - C31284) * C21355 +
              (C31285 - C31286 + C31287 - C31288) * C47110) *
                 C47479) *
                C47430 +
            (((C31954 - C31953 + C31956 - C31955) * C21355 +
              (C31958 - C31957 + C31960 - C31959) * C47110) *
                 C4717 +
             ((C32675 - C32676 + C32677 - C32678) * C21355 +
              (C32679 - C32680 + C32681 - C32682) * C47110) *
                 C47479) *
                C47268) *
               C47229 +
           ((((C31282 - C31281 + C31284 - C31283) * C21355 +
              (C31286 - C31285 + C31288 - C31287) * C47110) *
                 C4717 +
             ((C32473 - C32474 + C32475 - C32476) * C21355 +
              (C32477 - C32478 + C32479 - C32480) * C47110) *
                 C47479) *
                C47430 +
            (((C32676 - C32675 + C32678 - C32677) * C21355 +
              (C32680 - C32679 + C32682 - C32681) * C47110) *
                 C4717 +
             ((C31090 * C1671 - C31092 * C1667 + C47481 * C5897 -
               C31093 * C5894) *
                  C21355 +
              (C31090 * C1676 - C31092 * C1672 + C47481 * C5900 -
               C31093 * C5898) *
                  C47110) *
                 C47479) *
                C47268) *
               C2840) *
              C47146)) /
        (p * q * std::sqrt(p + q));
    d2ee[177] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C31090 * C124 - C31092 * C117 + C47481 * C478 - C31093 * C468) *
                 C21355 +
             (C31090 * C138 - C31092 * C125 + C47481 * C498 - C31093 * C479) *
                 C47110) *
                C4717 +
            ((C36849 - C36850 + C36851 - C36852) * C21355 +
             (C36853 - C36854 + C36855 - C36856) * C47110) *
                C47479) *
               C47181 * C47507 +
           (((C36850 - C36849 + C36852 - C36851) * C21355 +
             (C36854 - C36853 + C36856 - C36855) * C47110) *
                C4717 +
            ((C36857 - C36858 + C36859 - C36860) * C21355 +
             (C36861 - C36862 + C36863 - C36864) * C47110) *
                C47479) *
               C47181 * C47503 +
           (((C36858 - C36857 + C36860 - C36859) * C21355 +
             (C36862 - C36861 + C36864 - C36863) * C47110) *
                C4717 +
            ((C37701 - C37702 + C37703 - C37704) * C21355 +
             (C37705 - C37706 + C37707 - C37708) * C47110) *
                C47479) *
               C47181 * C47493 +
           (((C37702 - C37701 + C37704 - C37703) * C21355 +
             (C37706 - C37705 + C37708 - C37707) * C47110) *
                C4717 +
            ((C37709 - C37710 + C37711 - C37712) * C21355 +
             (C37713 - C37714 + C37715 - C37716) * C47110) *
                C47479) *
               C47181 * C47471) *
              C2580 +
          ((((C31096 - C31095 + C31098 - C31097) * C21355 +
             (C31100 - C31099 + C31102 - C31101) * C47110) *
                C4717 +
            ((C31273 - C31274 + C31275 - C31276) * C21355 +
             (C31277 - C31278 + C31279 - C31280) * C47110) *
                C47479) *
               C47181 * C47507 +
           (((C31274 - C31273 + C31276 - C31275) * C21355 +
             (C31278 - C31277 + C31280 - C31279) * C47110) *
                C4717 +
            ((C31281 - C31282 + C31283 - C31284) * C21355 +
             (C31285 - C31286 + C31287 - C31288) * C47110) *
                C47479) *
               C47181 * C47503 +
           (((C31282 - C31281 + C31284 - C31283) * C21355 +
             (C31286 - C31285 + C31288 - C31287) * C47110) *
                C4717 +
            ((C32473 - C32474 + C32475 - C32476) * C21355 +
             (C32477 - C32478 + C32479 - C32480) * C47110) *
                C47479) *
               C47181 * C47493 +
           (((C32474 - C32473 + C32476 - C32475) * C21355 +
             (C32478 - C32477 + C32480 - C32479) * C47110) *
                C4717 +
            ((C31090 * C1138 - C31092 * C1128 + C47481 * C6387 -
              C31093 * C6384) *
                 C21355 +
             (C31090 * C1146 - C31092 * C1139 + C47481 * C6390 -
              C31093 * C6388) *
                 C47110) *
                C47479) *
               C47181 * C47471) *
              C47146)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C31090 * C124 - C31092 * C117 + C47481 * C478 - C31093 * C468) *
                 C21355 +
             (C31090 * C138 - C31092 * C125 + C47481 * C498 - C31093 * C479) *
                 C47110) *
                C4717 +
            ((C36849 - C36850 + C36851 - C36852) * C21355 +
             (C36853 - C36854 + C36855 - C36856) * C47110) *
                C47479) *
               C47181 * C2472 +
           (((C36850 - C36849 + C36852 - C36851) * C21355 +
             (C36854 - C36853 + C36856 - C36855) * C47110) *
                C4717 +
            ((C36857 - C36858 + C36859 - C36860) * C21355 +
             (C36861 - C36862 + C36863 - C36864) * C47110) *
                C47479) *
               C47181 * C47226) *
              C47506 +
          ((((C31096 - C31095 + C31098 - C31097) * C21355 +
             (C31100 - C31099 + C31102 - C31101) * C47110) *
                C4717 +
            ((C31273 - C31274 + C31275 - C31276) * C21355 +
             (C31277 - C31278 + C31279 - C31280) * C47110) *
                C47479) *
               C47181 * C2472 +
           (((C31274 - C31273 + C31276 - C31275) * C21355 +
             (C31278 - C31277 + C31280 - C31279) * C47110) *
                C4717 +
            ((C31281 - C31282 + C31283 - C31284) * C21355 +
             (C31285 - C31286 + C31287 - C31288) * C47110) *
                C47479) *
               C47181 * C47226) *
              C47499 +
          ((((C31104 - C31103 + C31106 - C31105) * C21355 +
             (C31108 - C31107 + C31110 - C31109) * C47110) *
                C4717 +
            ((C31289 - C31290 + C31291 - C31292) * C21355 +
             (C31293 - C31294 + C31295 - C31296) * C47110) *
                C47479) *
               C47181 * C2472 +
           (((C31290 - C31289 + C31292 - C31291) * C21355 +
             (C31294 - C31293 + C31296 - C31295) * C47110) *
                C4717 +
            ((C31297 - C31298 + C31299 - C31300) * C21355 +
             (C31301 - C31302 + C31303 - C31304) * C47110) *
                C47479) *
               C47181 * C47226) *
              C47486 +
          ((((C31112 - C31111 + C31114 - C31113) * C21355 +
             (C31116 - C31115 + C31118 - C31117) * C47110) *
                C4717 +
            ((C31613 - C31614 + C31615 - C31616) * C21355 +
             (C31617 - C31618 + C31619 - C31620) * C47110) *
                C47479) *
               C47181 * C2472 +
           (((C31614 - C31613 + C31616 - C31615) * C21355 +
             (C31618 - C31617 + C31620 - C31619) * C47110) *
                C4717 +
            ((C31090 * C311 - C31092 * C294 + C47481 * C1557 - C31093 * C1556) *
                 C21355 +
             (C31090 * C324 - C31092 * C312 + C47481 * C1559 - C31093 * C1558) *
                 C47110) *
                C47479) *
               C47181 * C47226) *
              C47465)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C31090 * C124 - C31092 * C117 + C47481 * C478 - C31093 * C468) *
                  C21355 +
              (C31090 * C138 - C31092 * C125 + C47481 * C498 - C31093 * C479) *
                  C47110) *
                 C4717 +
             ((C36849 - C36850 + C36851 - C36852) * C21355 +
              (C36853 - C36854 + C36855 - C36856) * C47110) *
                 C47479) *
                C47501 +
            (((C31092 * C468 - C31090 * C478 + C31093 * C471 - C47481 * C484) *
                  C21355 +
              (C31092 * C479 - C31090 * C498 + C31093 * C485 - C47481 * C501) *
                  C47110) *
                 C4717 +
             ((C37465 - C37466 + C37467 - C37468) * C21355 +
              (C37469 - C37470 + C37471 - C37472) * C47110) *
                 C47479) *
                C47490 +
            (((C31090 * C484 - C31092 * C471 + C47481 * C1974 -
               C31093 * C1968) *
                  C21355 +
              (C31090 * C501 - C31092 * C485 + C47481 * C1986 -
               C31093 * C1975) *
                  C47110) *
                 C4717 +
             ((C37863 - C37864 + C37865 - C37866) * C21355 +
              (C37867 - C37868 + C37869 - C37870) * C47110) *
                 C47479) *
                C47464) *
               C2472 +
           ((((C36850 - C36849 + C36852 - C36851) * C21355 +
              (C36854 - C36853 + C36856 - C36855) * C47110) *
                 C4717 +
             ((C36857 - C36858 + C36859 - C36860) * C21355 +
              (C36861 - C36862 + C36863 - C36864) * C47110) *
                 C47479) *
                C47501 +
            (((C37466 - C37465 + C37468 - C37467) * C21355 +
              (C37470 - C37469 + C37472 - C37471) * C47110) *
                 C4717 +
             ((C37871 - C37872 + C37873 - C37874) * C21355 +
              (C37875 - C37876 + C37877 - C37878) * C47110) *
                 C47479) *
                C47490 +
            (((C37864 - C37863 + C37866 - C37865) * C21355 +
              (C37868 - C37867 + C37870 - C37869) * C47110) *
                 C4717 +
             ((C37879 - C37880 + C37881 - C37882) * C21355 +
              (C37883 - C37884 + C37885 - C37886) * C47110) *
                 C47479) *
                C47464) *
               C47226) *
              C2580 +
          (((((C31096 - C31095 + C31098 - C31097) * C21355 +
              (C31100 - C31099 + C31102 - C31101) * C47110) *
                 C4717 +
             ((C31273 - C31274 + C31275 - C31276) * C21355 +
              (C31277 - C31278 + C31279 - C31280) * C47110) *
                 C47479) *
                C47501 +
            (((C31452 - C31451 + C31454 - C31453) * C21355 +
              (C31456 - C31455 + C31458 - C31457) * C47110) *
                 C4717 +
             ((C31953 - C31954 + C31955 - C31956) * C21355 +
              (C31957 - C31958 + C31959 - C31960) * C47110) *
                 C47479) *
                C47490 +
            (((C31460 - C31459 + C31462 - C31461) * C21355 +
              (C31464 - C31463 + C31466 - C31465) * C47110) *
                 C4717 +
             ((C33381 - C33382 + C33383 - C33384) * C21355 +
              (C33385 - C33386 + C33387 - C33388) * C47110) *
                 C47479) *
                C47464) *
               C2472 +
           ((((C31274 - C31273 + C31276 - C31275) * C21355 +
              (C31278 - C31277 + C31280 - C31279) * C47110) *
                 C4717 +
             ((C31281 - C31282 + C31283 - C31284) * C21355 +
              (C31285 - C31286 + C31287 - C31288) * C47110) *
                 C47479) *
                C47501 +
            (((C31954 - C31953 + C31956 - C31955) * C21355 +
              (C31958 - C31957 + C31960 - C31959) * C47110) *
                 C4717 +
             ((C32675 - C32676 + C32677 - C32678) * C21355 +
              (C32679 - C32680 + C32681 - C32682) * C47110) *
                 C47479) *
                C47490 +
            (((C33382 - C33381 + C33384 - C33383) * C21355 +
              (C33386 - C33385 + C33388 - C33387) * C47110) *
                 C4717 +
             ((C31090 * C1281 - C31092 * C1265 + C47481 * C7243 -
               C31093 * C7240) *
                  C21355 +
              (C31090 * C1292 - C31092 * C1282 + C47481 * C7246 -
               C31093 * C7244) *
                  C47110) *
                 C47479) *
                C47464) *
               C47226) *
              C47146)) /
            (p * q * std::sqrt(p + q));
    d2ee[178] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C31090 * C124 - C31092 * C117 + C47481 * C478 - C31093 * C468) *
                  C21355 +
              (C31090 * C138 - C31092 * C125 + C47481 * C498 - C31093 * C479) *
                  C47110) *
                 C4717 +
             ((C36849 - C36850 + C36851 - C36852) * C21355 +
              (C36853 - C36854 + C36855 - C36856) * C47110) *
                 C47479) *
                C47430 +
            (((C31092 * C468 - C31090 * C478 + C31093 * C471 - C47481 * C484) *
                  C21355 +
              (C31092 * C479 - C31090 * C498 + C31093 * C485 - C47481 * C501) *
                  C47110) *
                 C4717 +
             ((C37465 - C37466 + C37467 - C37468) * C21355 +
              (C37469 - C37470 + C37471 - C37472) * C47110) *
                 C47479) *
                C47268) *
               C2472 +
           ((((C36850 - C36849 + C36852 - C36851) * C21355 +
              (C36854 - C36853 + C36856 - C36855) * C47110) *
                 C4717 +
             ((C36857 - C36858 + C36859 - C36860) * C21355 +
              (C36861 - C36862 + C36863 - C36864) * C47110) *
                 C47479) *
                C47430 +
            (((C37466 - C37465 + C37468 - C37467) * C21355 +
              (C37470 - C37469 + C37472 - C37471) * C47110) *
                 C4717 +
             ((C37871 - C37872 + C37873 - C37874) * C21355 +
              (C37875 - C37876 + C37877 - C37878) * C47110) *
                 C47479) *
                C47268) *
               C47226) *
              C47140 +
          (((((C31096 - C31095 + C31098 - C31097) * C21355 +
              (C31100 - C31099 + C31102 - C31101) * C47110) *
                 C4717 +
             ((C31273 - C31274 + C31275 - C31276) * C21355 +
              (C31277 - C31278 + C31279 - C31280) * C47110) *
                 C47479) *
                C47430 +
            (((C31452 - C31451 + C31454 - C31453) * C21355 +
              (C31456 - C31455 + C31458 - C31457) * C47110) *
                 C4717 +
             ((C31953 - C31954 + C31955 - C31956) * C21355 +
              (C31957 - C31958 + C31959 - C31960) * C47110) *
                 C47479) *
                C47268) *
               C2472 +
           ((((C31274 - C31273 + C31276 - C31275) * C21355 +
              (C31278 - C31277 + C31280 - C31279) * C47110) *
                 C4717 +
             ((C31281 - C31282 + C31283 - C31284) * C21355 +
              (C31285 - C31286 + C31287 - C31288) * C47110) *
                 C47479) *
                C47430 +
            (((C31954 - C31953 + C31956 - C31955) * C21355 +
              (C31958 - C31957 + C31960 - C31959) * C47110) *
                 C4717 +
             ((C32675 - C32676 + C32677 - C32678) * C21355 +
              (C32679 - C32680 + C32681 - C32682) * C47110) *
                 C47479) *
                C47268) *
               C47226) *
              C47149 +
          (((((C31104 - C31103 + C31106 - C31105) * C21355 +
              (C31108 - C31107 + C31110 - C31109) * C47110) *
                 C4717 +
             ((C31289 - C31290 + C31291 - C31292) * C21355 +
              (C31293 - C31294 + C31295 - C31296) * C47110) *
                 C47479) *
                C47430 +
            (((C31468 - C31467 + C31470 - C31469) * C21355 +
              (C31472 - C31471 + C31474 - C31473) * C47110) *
                 C4717 +
             ((C31961 - C31962 + C31963 - C31964) * C21355 +
              (C31965 - C31966 + C31967 - C31968) * C47110) *
                 C47479) *
                C47268) *
               C2472 +
           ((((C31290 - C31289 + C31292 - C31291) * C21355 +
              (C31294 - C31293 + C31296 - C31295) * C47110) *
                 C4717 +
             ((C31297 - C31298 + C31299 - C31300) * C21355 +
              (C31301 - C31302 + C31303 - C31304) * C47110) *
                 C47479) *
                C47430 +
            (((C31962 - C31961 + C31964 - C31963) * C21355 +
              (C31966 - C31965 + C31968 - C31967) * C47110) *
                 C4717 +
             ((C31090 * C1277 - C31092 * C1263 + C47481 * C1283 -
               C31093 * C1266) *
                  C21355 +
              (C31090 * C1290 - C31092 * C1278 + C47481 * C1293 -
               C31093 * C1284) *
                  C47110) *
                 C47479) *
                C47268) *
               C47226) *
              C2843)) /
        (p * q * std::sqrt(p + q));
    d2ee[179] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C31090 * C124 - C31092 * C117 + C47481 * C478 - C31093 * C468) *
                 C21355 +
             (C31090 * C138 - C31092 * C125 + C47481 * C498 - C31093 * C479) *
                 C47110) *
                C4717 +
            ((C36849 - C36850 + C36851 - C36852) * C21355 +
             (C36853 - C36854 + C36855 - C36856) * C47110) *
                C47479) *
               C47181 * C2472 +
           (((C36850 - C36849 + C36852 - C36851) * C21355 +
             (C36854 - C36853 + C36856 - C36855) * C47110) *
                C4717 +
            ((C36857 - C36858 + C36859 - C36860) * C21355 +
             (C36861 - C36862 + C36863 - C36864) * C47110) *
                C47479) *
               C47181 * C47226) *
              C47506 +
          ((((C31096 - C31095 + C31098 - C31097) * C21355 +
             (C31100 - C31099 + C31102 - C31101) * C47110) *
                C4717 +
            ((C31273 - C31274 + C31275 - C31276) * C21355 +
             (C31277 - C31278 + C31279 - C31280) * C47110) *
                C47479) *
               C47181 * C2472 +
           (((C31274 - C31273 + C31276 - C31275) * C21355 +
             (C31278 - C31277 + C31280 - C31279) * C47110) *
                C4717 +
            ((C31281 - C31282 + C31283 - C31284) * C21355 +
             (C31285 - C31286 + C31287 - C31288) * C47110) *
                C47479) *
               C47181 * C47226) *
              C47499 +
          ((((C31104 - C31103 + C31106 - C31105) * C21355 +
             (C31108 - C31107 + C31110 - C31109) * C47110) *
                C4717 +
            ((C31289 - C31290 + C31291 - C31292) * C21355 +
             (C31293 - C31294 + C31295 - C31296) * C47110) *
                C47479) *
               C47181 * C2472 +
           (((C31290 - C31289 + C31292 - C31291) * C21355 +
             (C31294 - C31293 + C31296 - C31295) * C47110) *
                C4717 +
            ((C31297 - C31298 + C31299 - C31300) * C21355 +
             (C31301 - C31302 + C31303 - C31304) * C47110) *
                C47479) *
               C47181 * C47226) *
              C47486 +
          ((((C31112 - C31111 + C31114 - C31113) * C21355 +
             (C31116 - C31115 + C31118 - C31117) * C47110) *
                C4717 +
            ((C31613 - C31614 + C31615 - C31616) * C21355 +
             (C31617 - C31618 + C31619 - C31620) * C47110) *
                C47479) *
               C47181 * C2472 +
           (((C31614 - C31613 + C31616 - C31615) * C21355 +
             (C31618 - C31617 + C31620 - C31619) * C47110) *
                C4717 +
            ((C31090 * C311 - C31092 * C294 + C47481 * C1557 - C31093 * C1556) *
                 C21355 +
             (C31090 * C324 - C31092 * C312 + C47481 * C1559 - C31093 * C1558) *
                 C47110) *
                C47479) *
               C47181 * C47226) *
              C47465)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C31090 * C124 - C31092 * C117 + C47481 * C478 - C31093 * C468) *
                 C21355 +
             (C31090 * C138 - C31092 * C125 + C47481 * C498 - C31093 * C479) *
                 C47110) *
                C4717 +
            ((C36849 - C36850 + C36851 - C36852) * C21355 +
             (C36853 - C36854 + C36855 - C36856) * C47110) *
                C47479) *
               C47181 * C47507 +
           (((C36850 - C36849 + C36852 - C36851) * C21355 +
             (C36854 - C36853 + C36856 - C36855) * C47110) *
                C4717 +
            ((C36857 - C36858 + C36859 - C36860) * C21355 +
             (C36861 - C36862 + C36863 - C36864) * C47110) *
                C47479) *
               C47181 * C47503 +
           (((C36858 - C36857 + C36860 - C36859) * C21355 +
             (C36862 - C36861 + C36864 - C36863) * C47110) *
                C4717 +
            ((C37701 - C37702 + C37703 - C37704) * C21355 +
             (C37705 - C37706 + C37707 - C37708) * C47110) *
                C47479) *
               C47181 * C47493 +
           (((C37702 - C37701 + C37704 - C37703) * C21355 +
             (C37706 - C37705 + C37708 - C37707) * C47110) *
                C4717 +
            ((C37709 - C37710 + C37711 - C37712) * C21355 +
             (C37713 - C37714 + C37715 - C37716) * C47110) *
                C47479) *
               C47181 * C47471) *
              C2580 +
          ((((C31096 - C31095 + C31098 - C31097) * C21355 +
             (C31100 - C31099 + C31102 - C31101) * C47110) *
                C4717 +
            ((C31273 - C31274 + C31275 - C31276) * C21355 +
             (C31277 - C31278 + C31279 - C31280) * C47110) *
                C47479) *
               C47181 * C47507 +
           (((C31274 - C31273 + C31276 - C31275) * C21355 +
             (C31278 - C31277 + C31280 - C31279) * C47110) *
                C4717 +
            ((C31281 - C31282 + C31283 - C31284) * C21355 +
             (C31285 - C31286 + C31287 - C31288) * C47110) *
                C47479) *
               C47181 * C47503 +
           (((C31282 - C31281 + C31284 - C31283) * C21355 +
             (C31286 - C31285 + C31288 - C31287) * C47110) *
                C4717 +
            ((C32473 - C32474 + C32475 - C32476) * C21355 +
             (C32477 - C32478 + C32479 - C32480) * C47110) *
                C47479) *
               C47181 * C47493 +
           (((C32474 - C32473 + C32476 - C32475) * C21355 +
             (C32478 - C32477 + C32480 - C32479) * C47110) *
                C4717 +
            ((C31090 * C1138 - C31092 * C1128 + C47481 * C6387 -
              C31093 * C6384) *
                 C21355 +
             (C31090 * C1146 - C31092 * C1139 + C47481 * C6390 -
              C31093 * C6388) *
                 C47110) *
                C47479) *
               C47181 * C47471) *
              C47146)) /
            (p * q * std::sqrt(p + q));
    d2ee[180] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C31090 * C124 - C31092 * C117 + C47481 * C478 - C31093 * C468) *
                  C21355 +
              (C31090 * C138 - C31092 * C125 + C47481 * C498 - C31093 * C479) *
                  C47110) *
                 C4717 +
             ((C36849 - C36850 + C36851 - C36852) * C21355 +
              (C36853 - C36854 + C36855 - C36856) * C47110) *
                 C47479) *
                C3234 +
            (((C31092 * C468 - C31090 * C478 + C31093 * C471 - C47481 * C484) *
                  C21355 +
              (C31092 * C479 - C31090 * C498 + C31093 * C485 - C47481 * C501) *
                  C47110) *
                 C4717 +
             ((C37465 - C37466 + C37467 - C37468) * C21355 +
              (C37469 - C37470 + C37471 - C37472) * C47110) *
                 C47479) *
                C47268) *
               C47222 +
           ((((C36850 - C36849 + C36852 - C36851) * C21355 +
              (C36854 - C36853 + C36856 - C36855) * C47110) *
                 C4717 +
             ((C36857 - C36858 + C36859 - C36860) * C21355 +
              (C36861 - C36862 + C36863 - C36864) * C47110) *
                 C47479) *
                C3234 +
            (((C37466 - C37465 + C37468 - C37467) * C21355 +
              (C37470 - C37469 + C37472 - C37471) * C47110) *
                 C4717 +
             ((C37871 - C37872 + C37873 - C37874) * C21355 +
              (C37875 - C37876 + C37877 - C37878) * C47110) *
                 C47479) *
                C47268) *
               C47229 +
           ((((C36858 - C36857 + C36860 - C36859) * C21355 +
              (C36862 - C36861 + C36864 - C36863) * C47110) *
                 C4717 +
             ((C37701 - C37702 + C37703 - C37704) * C21355 +
              (C37705 - C37706 + C37707 - C37708) * C47110) *
                 C47479) *
                C3234 +
            (((C37872 - C37871 + C37874 - C37873) * C21355 +
              (C37876 - C37875 + C37878 - C37877) * C47110) *
                 C4717 +
             ((C38341 - C38342 + C38343 - C38344) * C21355 +
              (C38345 - C38346 + C38347 - C38348) * C47110) *
                 C47479) *
                C47268) *
               C2840) *
              C47415 +
          (((((C31096 - C31095 + C31098 - C31097) * C21355 +
              (C31100 - C31099 + C31102 - C31101) * C47110) *
                 C4717 +
             ((C31273 - C31274 + C31275 - C31276) * C21355 +
              (C31277 - C31278 + C31279 - C31280) * C47110) *
                 C47479) *
                C3234 +
            (((C31452 - C31451 + C31454 - C31453) * C21355 +
              (C31456 - C31455 + C31458 - C31457) * C47110) *
                 C4717 +
             ((C31953 - C31954 + C31955 - C31956) * C21355 +
              (C31957 - C31958 + C31959 - C31960) * C47110) *
                 C47479) *
                C47268) *
               C47222 +
           ((((C31274 - C31273 + C31276 - C31275) * C21355 +
              (C31278 - C31277 + C31280 - C31279) * C47110) *
                 C4717 +
             ((C31281 - C31282 + C31283 - C31284) * C21355 +
              (C31285 - C31286 + C31287 - C31288) * C47110) *
                 C47479) *
                C3234 +
            (((C31954 - C31953 + C31956 - C31955) * C21355 +
              (C31958 - C31957 + C31960 - C31959) * C47110) *
                 C4717 +
             ((C32675 - C32676 + C32677 - C32678) * C21355 +
              (C32679 - C32680 + C32681 - C32682) * C47110) *
                 C47479) *
                C47268) *
               C47229 +
           ((((C31282 - C31281 + C31284 - C31283) * C21355 +
              (C31286 - C31285 + C31288 - C31287) * C47110) *
                 C4717 +
             ((C32473 - C32474 + C32475 - C32476) * C21355 +
              (C32477 - C32478 + C32479 - C32480) * C47110) *
                 C47479) *
                C3234 +
            (((C32676 - C32675 + C32678 - C32677) * C21355 +
              (C32680 - C32679 + C32682 - C32681) * C47110) *
                 C4717 +
             ((C31090 * C1671 - C31092 * C1667 + C47481 * C5897 -
               C31093 * C5894) *
                  C21355 +
              (C31090 * C1676 - C31092 * C1672 + C47481 * C5900 -
               C31093 * C5898) *
                  C47110) *
                 C47479) *
                C47268) *
               C2840) *
              C47146)) /
        (p * q * std::sqrt(p + q));
    d2ee[181] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C31090 * C124 - C31092 * C117 + C47481 * C478 - C31093 * C468) *
                 C21355 +
             (C31090 * C138 - C31092 * C125 + C47481 * C498 - C31093 * C479) *
                 C47110) *
                C4717 +
            ((C36849 - C36850 + C36851 - C36852) * C21355 +
             (C36853 - C36854 + C36855 - C36856) * C47110) *
                C47479) *
               C47264 +
           (((C31092 * C468 - C31090 * C478 + C31093 * C471 - C47481 * C484) *
                 C21355 +
             (C31092 * C479 - C31090 * C498 + C31093 * C485 - C47481 * C501) *
                 C47110) *
                C4717 +
            ((C37465 - C37466 + C37467 - C37468) * C21355 +
             (C37469 - C37470 + C37471 - C37472) * C47110) *
                C47479) *
               C47271 +
           (((C31090 * C484 - C31092 * C471 + C47481 * C1974 - C31093 * C1968) *
                 C21355 +
             (C31090 * C501 - C31092 * C485 + C47481 * C1986 - C31093 * C1975) *
                 C47110) *
                C4717 +
            ((C37863 - C37864 + C37865 - C37866) * C21355 +
             (C37867 - C37868 + C37869 - C37870) * C47110) *
                C47479) *
               C3742) *
              C47222 +
          ((((C36850 - C36849 + C36852 - C36851) * C21355 +
             (C36854 - C36853 + C36856 - C36855) * C47110) *
                C4717 +
            ((C36857 - C36858 + C36859 - C36860) * C21355 +
             (C36861 - C36862 + C36863 - C36864) * C47110) *
                C47479) *
               C47264 +
           (((C37466 - C37465 + C37468 - C37467) * C21355 +
             (C37470 - C37469 + C37472 - C37471) * C47110) *
                C4717 +
            ((C37871 - C37872 + C37873 - C37874) * C21355 +
             (C37875 - C37876 + C37877 - C37878) * C47110) *
                C47479) *
               C47271 +
           (((C37864 - C37863 + C37866 - C37865) * C21355 +
             (C37868 - C37867 + C37870 - C37869) * C47110) *
                C4717 +
            ((C37879 - C37880 + C37881 - C37882) * C21355 +
             (C37883 - C37884 + C37885 - C37886) * C47110) *
                C47479) *
               C3742) *
              C47229 +
          ((((C36858 - C36857 + C36860 - C36859) * C21355 +
             (C36862 - C36861 + C36864 - C36863) * C47110) *
                C4717 +
            ((C37701 - C37702 + C37703 - C37704) * C21355 +
             (C37705 - C37706 + C37707 - C37708) * C47110) *
                C47479) *
               C47264 +
           (((C37872 - C37871 + C37874 - C37873) * C21355 +
             (C37876 - C37875 + C37878 - C37877) * C47110) *
                C4717 +
            ((C38341 - C38342 + C38343 - C38344) * C21355 +
             (C38345 - C38346 + C38347 - C38348) * C47110) *
                C47479) *
               C47271 +
           (((C37880 - C37879 + C37882 - C37881) * C21355 +
             (C37884 - C37883 + C37886 - C37885) * C47110) *
                C4717 +
            ((C31090 * C5895 - C31092 * C5893 + C47481 * C23237 -
              C31093 * C23236) *
                 C21355 +
             (C31090 * C5899 - C31092 * C5896 + C47481 * C23239 -
              C31093 * C23238) *
                 C47110) *
                C47479) *
               C3742) *
              C2840) *
         C47135) /
        (p * q * std::sqrt(p + q));
    d2ee[182] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C31090 * C124 - C31092 * C117 + C47481 * C478 - C31093 * C468) *
                 C21355 +
             (C31090 * C138 - C31092 * C125 + C47481 * C498 - C31093 * C479) *
                 C47110) *
                C4717 +
            ((C36849 - C36850 + C36851 - C36852) * C21355 +
             (C36853 - C36854 + C36855 - C36856) * C47110) *
                C47479) *
               C3234 +
           (((C31092 * C468 - C31090 * C478 + C31093 * C471 - C47481 * C484) *
                 C21355 +
             (C31092 * C479 - C31090 * C498 + C31093 * C485 - C47481 * C501) *
                 C47110) *
                C4717 +
            ((C37465 - C37466 + C37467 - C37468) * C21355 +
             (C37469 - C37470 + C37471 - C37472) * C47110) *
                C47479) *
               C47268) *
              C47507 +
          ((((C36850 - C36849 + C36852 - C36851) * C21355 +
             (C36854 - C36853 + C36856 - C36855) * C47110) *
                C4717 +
            ((C36857 - C36858 + C36859 - C36860) * C21355 +
             (C36861 - C36862 + C36863 - C36864) * C47110) *
                C47479) *
               C3234 +
           (((C37466 - C37465 + C37468 - C37467) * C21355 +
             (C37470 - C37469 + C37472 - C37471) * C47110) *
                C4717 +
            ((C37871 - C37872 + C37873 - C37874) * C21355 +
             (C37875 - C37876 + C37877 - C37878) * C47110) *
                C47479) *
               C47268) *
              C47503 +
          ((((C36858 - C36857 + C36860 - C36859) * C21355 +
             (C36862 - C36861 + C36864 - C36863) * C47110) *
                C4717 +
            ((C37701 - C37702 + C37703 - C37704) * C21355 +
             (C37705 - C37706 + C37707 - C37708) * C47110) *
                C47479) *
               C3234 +
           (((C37872 - C37871 + C37874 - C37873) * C21355 +
             (C37876 - C37875 + C37878 - C37877) * C47110) *
                C4717 +
            ((C38341 - C38342 + C38343 - C38344) * C21355 +
             (C38345 - C38346 + C38347 - C38348) * C47110) *
                C47479) *
               C47268) *
              C47493 +
          ((((C37702 - C37701 + C37704 - C37703) * C21355 +
             (C37706 - C37705 + C37708 - C37707) * C47110) *
                C4717 +
            ((C37709 - C37710 + C37711 - C37712) * C21355 +
             (C37713 - C37714 + C37715 - C37716) * C47110) *
                C47479) *
               C3234 +
           (((C38342 - C38341 + C38344 - C38343) * C21355 +
             (C38346 - C38345 + C38348 - C38347) * C47110) *
                C4717 +
            ((C31090 * C6385 - C31092 * C6383 + C47481 * C22230 -
              C31093 * C22229) *
                 C21355 +
             (C31090 * C6389 - C31092 * C6386 + C47481 * C22232 -
              C31093 * C22231) *
                 C47110) *
                C47479) *
               C47268) *
              C47471) *
         C47135) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C31090 * C124 - C31092 * C117 + C47481 * C478 - C31093 * C468) *
                  C21355 +
              (C31090 * C138 - C31092 * C125 + C47481 * C498 - C31093 * C479) *
                  C47110) *
                 C4717 +
             ((C36849 - C36850 + C36851 - C36852) * C21355 +
              (C36853 - C36854 + C36855 - C36856) * C47110) *
                 C47479) *
                C3234 +
            (((C31092 * C468 - C31090 * C478 + C31093 * C471 - C47481 * C484) *
                  C21355 +
              (C31092 * C479 - C31090 * C498 + C31093 * C485 - C47481 * C501) *
                  C47110) *
                 C4717 +
             ((C37465 - C37466 + C37467 - C37468) * C21355 +
              (C37469 - C37470 + C37471 - C37472) * C47110) *
                 C47479) *
                C47268) *
               C2472 +
           ((((C36850 - C36849 + C36852 - C36851) * C21355 +
              (C36854 - C36853 + C36856 - C36855) * C47110) *
                 C4717 +
             ((C36857 - C36858 + C36859 - C36860) * C21355 +
              (C36861 - C36862 + C36863 - C36864) * C47110) *
                 C47479) *
                C3234 +
            (((C37466 - C37465 + C37468 - C37467) * C21355 +
              (C37470 - C37469 + C37472 - C37471) * C47110) *
                 C4717 +
             ((C37871 - C37872 + C37873 - C37874) * C21355 +
              (C37875 - C37876 + C37877 - C37878) * C47110) *
                 C47479) *
                C47268) *
               C47226) *
              C47497 +
          (((((C31096 - C31095 + C31098 - C31097) * C21355 +
              (C31100 - C31099 + C31102 - C31101) * C47110) *
                 C4717 +
             ((C31273 - C31274 + C31275 - C31276) * C21355 +
              (C31277 - C31278 + C31279 - C31280) * C47110) *
                 C47479) *
                C3234 +
            (((C31452 - C31451 + C31454 - C31453) * C21355 +
              (C31456 - C31455 + C31458 - C31457) * C47110) *
                 C4717 +
             ((C31953 - C31954 + C31955 - C31956) * C21355 +
              (C31957 - C31958 + C31959 - C31960) * C47110) *
                 C47479) *
                C47268) *
               C2472 +
           ((((C31274 - C31273 + C31276 - C31275) * C21355 +
              (C31278 - C31277 + C31280 - C31279) * C47110) *
                 C4717 +
             ((C31281 - C31282 + C31283 - C31284) * C21355 +
              (C31285 - C31286 + C31287 - C31288) * C47110) *
                 C47479) *
                C3234 +
            (((C31954 - C31953 + C31956 - C31955) * C21355 +
              (C31958 - C31957 + C31960 - C31959) * C47110) *
                 C4717 +
             ((C32675 - C32676 + C32677 - C32678) * C21355 +
              (C32679 - C32680 + C32681 - C32682) * C47110) *
                 C47479) *
                C47268) *
               C47226) *
              C47484 +
          (((((C31104 - C31103 + C31106 - C31105) * C21355 +
              (C31108 - C31107 + C31110 - C31109) * C47110) *
                 C4717 +
             ((C31289 - C31290 + C31291 - C31292) * C21355 +
              (C31293 - C31294 + C31295 - C31296) * C47110) *
                 C47479) *
                C3234 +
            (((C31468 - C31467 + C31470 - C31469) * C21355 +
              (C31472 - C31471 + C31474 - C31473) * C47110) *
                 C4717 +
             ((C31961 - C31962 + C31963 - C31964) * C21355 +
              (C31965 - C31966 + C31967 - C31968) * C47110) *
                 C47479) *
                C47268) *
               C2472 +
           ((((C31290 - C31289 + C31292 - C31291) * C21355 +
              (C31294 - C31293 + C31296 - C31295) * C47110) *
                 C4717 +
             ((C31297 - C31298 + C31299 - C31300) * C21355 +
              (C31301 - C31302 + C31303 - C31304) * C47110) *
                 C47479) *
                C3234 +
            (((C31962 - C31961 + C31964 - C31963) * C21355 +
              (C31966 - C31965 + C31968 - C31967) * C47110) *
                 C4717 +
             ((C31090 * C1277 - C31092 * C1263 + C47481 * C1283 -
               C31093 * C1266) *
                  C21355 +
              (C31090 * C1290 - C31092 * C1278 + C47481 * C1293 -
               C31093 * C1284) *
                  C47110) *
                 C47479) *
                C47268) *
               C47226) *
              C47455)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C31090 * C124 - C31092 * C117 + C47481 * C478 - C31093 * C468) *
                 C21355 +
             (C31090 * C138 - C31092 * C125 + C47481 * C498 - C31093 * C479) *
                 C47110) *
                C4717 +
            ((C36849 - C36850 + C36851 - C36852) * C21355 +
             (C36853 - C36854 + C36855 - C36856) * C47110) *
                C47479) *
               C47508 +
           (((C31092 * C468 - C31090 * C478 + C31093 * C471 - C47481 * C484) *
                 C21355 +
             (C31092 * C479 - C31090 * C498 + C31093 * C485 - C47481 * C501) *
                 C47110) *
                C4717 +
            ((C37465 - C37466 + C37467 - C37468) * C21355 +
             (C37469 - C37470 + C37471 - C37472) * C47110) *
                C47479) *
               C47505 +
           (((C31090 * C484 - C31092 * C471 + C47481 * C1974 - C31093 * C1968) *
                 C21355 +
             (C31090 * C501 - C31092 * C485 + C47481 * C1986 - C31093 * C1975) *
                 C47110) *
                C4717 +
            ((C37863 - C37864 + C37865 - C37866) * C21355 +
             (C37867 - C37868 + C37869 - C37870) * C47110) *
                C47479) *
               C47496 +
           (((C31092 * C1968 - C31090 * C1974 + C31093 * C1971 -
              C47481 * C1980) *
                 C21355 +
             (C31092 * C1975 - C31090 * C1986 + C31093 * C1981 -
              C47481 * C1989) *
                 C47110) *
                C4717 +
            ((C39177 - C39178 + C39179 - C39180) * C21355 +
             (C39181 - C39182 + C39183 - C39184) * C47110) *
                C47479) *
               C47477) *
              C2472 +
          ((((C36850 - C36849 + C36852 - C36851) * C21355 +
             (C36854 - C36853 + C36856 - C36855) * C47110) *
                C4717 +
            ((C36857 - C36858 + C36859 - C36860) * C21355 +
             (C36861 - C36862 + C36863 - C36864) * C47110) *
                C47479) *
               C47508 +
           (((C37466 - C37465 + C37468 - C37467) * C21355 +
             (C37470 - C37469 + C37472 - C37471) * C47110) *
                C4717 +
            ((C37871 - C37872 + C37873 - C37874) * C21355 +
             (C37875 - C37876 + C37877 - C37878) * C47110) *
                C47479) *
               C47505 +
           (((C37864 - C37863 + C37866 - C37865) * C21355 +
             (C37868 - C37867 + C37870 - C37869) * C47110) *
                C4717 +
            ((C37879 - C37880 + C37881 - C37882) * C21355 +
             (C37883 - C37884 + C37885 - C37886) * C47110) *
                C47479) *
               C47496 +
           (((C39178 - C39177 + C39180 - C39179) * C21355 +
             (C39182 - C39181 + C39184 - C39183) * C47110) *
                C4717 +
            ((C31090 * C7241 - C31092 * C7239 + C47481 * C22891 -
              C31093 * C22890) *
                 C21355 +
             (C31090 * C7245 - C31092 * C7242 + C47481 * C22893 -
              C31093 * C22892) *
                 C47110) *
                C47479) *
               C47477) *
              C47226) *
         C47135) /
            (p * q * std::sqrt(p + q));
    d2ee[183] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C31090 * C124 - C31092 * C117 + C47481 * C478 - C31093 * C468) *
                  C21355 +
              (C31090 * C138 - C31092 * C125 + C47481 * C498 - C31093 * C479) *
                  C47110) *
                 C4717 +
             ((C36849 - C36850 + C36851 - C36852) * C21355 +
              (C36853 - C36854 + C36855 - C36856) * C47110) *
                 C47479) *
                C47264 +
            (((C31092 * C468 - C31090 * C478 + C31093 * C471 - C47481 * C484) *
                  C21355 +
              (C31092 * C479 - C31090 * C498 + C31093 * C485 - C47481 * C501) *
                  C47110) *
                 C4717 +
             ((C37465 - C37466 + C37467 - C37468) * C21355 +
              (C37469 - C37470 + C37471 - C37472) * C47110) *
                 C47479) *
                C47271 +
            (((C31090 * C484 - C31092 * C471 + C47481 * C1974 -
               C31093 * C1968) *
                  C21355 +
              (C31090 * C501 - C31092 * C485 + C47481 * C1986 -
               C31093 * C1975) *
                  C47110) *
                 C4717 +
             ((C37863 - C37864 + C37865 - C37866) * C21355 +
              (C37867 - C37868 + C37869 - C37870) * C47110) *
                 C47479) *
                C3742) *
               C2472 +
           ((((C36850 - C36849 + C36852 - C36851) * C21355 +
              (C36854 - C36853 + C36856 - C36855) * C47110) *
                 C4717 +
             ((C36857 - C36858 + C36859 - C36860) * C21355 +
              (C36861 - C36862 + C36863 - C36864) * C47110) *
                 C47479) *
                C47264 +
            (((C37466 - C37465 + C37468 - C37467) * C21355 +
              (C37470 - C37469 + C37472 - C37471) * C47110) *
                 C4717 +
             ((C37871 - C37872 + C37873 - C37874) * C21355 +
              (C37875 - C37876 + C37877 - C37878) * C47110) *
                 C47479) *
                C47271 +
            (((C37864 - C37863 + C37866 - C37865) * C21355 +
              (C37868 - C37867 + C37870 - C37869) * C47110) *
                 C4717 +
             ((C37879 - C37880 + C37881 - C37882) * C21355 +
              (C37883 - C37884 + C37885 - C37886) * C47110) *
                 C47479) *
                C3742) *
               C47226) *
              C47415 +
          (((((C31096 - C31095 + C31098 - C31097) * C21355 +
              (C31100 - C31099 + C31102 - C31101) * C47110) *
                 C4717 +
             ((C31273 - C31274 + C31275 - C31276) * C21355 +
              (C31277 - C31278 + C31279 - C31280) * C47110) *
                 C47479) *
                C47264 +
            (((C31452 - C31451 + C31454 - C31453) * C21355 +
              (C31456 - C31455 + C31458 - C31457) * C47110) *
                 C4717 +
             ((C31953 - C31954 + C31955 - C31956) * C21355 +
              (C31957 - C31958 + C31959 - C31960) * C47110) *
                 C47479) *
                C47271 +
            (((C31460 - C31459 + C31462 - C31461) * C21355 +
              (C31464 - C31463 + C31466 - C31465) * C47110) *
                 C4717 +
             ((C33381 - C33382 + C33383 - C33384) * C21355 +
              (C33385 - C33386 + C33387 - C33388) * C47110) *
                 C47479) *
                C3742) *
               C2472 +
           ((((C31274 - C31273 + C31276 - C31275) * C21355 +
              (C31278 - C31277 + C31280 - C31279) * C47110) *
                 C4717 +
             ((C31281 - C31282 + C31283 - C31284) * C21355 +
              (C31285 - C31286 + C31287 - C31288) * C47110) *
                 C47479) *
                C47264 +
            (((C31954 - C31953 + C31956 - C31955) * C21355 +
              (C31958 - C31957 + C31960 - C31959) * C47110) *
                 C4717 +
             ((C32675 - C32676 + C32677 - C32678) * C21355 +
              (C32679 - C32680 + C32681 - C32682) * C47110) *
                 C47479) *
                C47271 +
            (((C33382 - C33381 + C33384 - C33383) * C21355 +
              (C33386 - C33385 + C33388 - C33387) * C47110) *
                 C4717 +
             ((C31090 * C1281 - C31092 * C1265 + C47481 * C7243 -
               C31093 * C7240) *
                  C21355 +
              (C31090 * C1292 - C31092 * C1282 + C47481 * C7246 -
               C31093 * C7244) *
                  C47110) *
                 C47479) *
                C3742) *
               C47226) *
              C47146)) /
        (p * q * std::sqrt(p + q));
    d2ee[184] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C31090 * C124 - C31092 * C117 + C47481 * C478 - C31093 * C468) *
                  C21355 +
              (C31090 * C138 - C31092 * C125 + C47481 * C498 - C31093 * C479) *
                  C47110) *
                 C4717 +
             ((C36849 - C36850 + C36851 - C36852) * C21355 +
              (C36853 - C36854 + C36855 - C36856) * C47110) *
                 C47479) *
                C3234 +
            (((C31092 * C468 - C31090 * C478 + C31093 * C471 - C47481 * C484) *
                  C21355 +
              (C31092 * C479 - C31090 * C498 + C31093 * C485 - C47481 * C501) *
                  C47110) *
                 C4717 +
             ((C37465 - C37466 + C37467 - C37468) * C21355 +
              (C37469 - C37470 + C37471 - C37472) * C47110) *
                 C47479) *
                C47268) *
               C2472 +
           ((((C36850 - C36849 + C36852 - C36851) * C21355 +
              (C36854 - C36853 + C36856 - C36855) * C47110) *
                 C4717 +
             ((C36857 - C36858 + C36859 - C36860) * C21355 +
              (C36861 - C36862 + C36863 - C36864) * C47110) *
                 C47479) *
                C3234 +
            (((C37466 - C37465 + C37468 - C37467) * C21355 +
              (C37470 - C37469 + C37472 - C37471) * C47110) *
                 C4717 +
             ((C37871 - C37872 + C37873 - C37874) * C21355 +
              (C37875 - C37876 + C37877 - C37878) * C47110) *
                 C47479) *
                C47268) *
               C47226) *
              C47497 +
          (((((C31096 - C31095 + C31098 - C31097) * C21355 +
              (C31100 - C31099 + C31102 - C31101) * C47110) *
                 C4717 +
             ((C31273 - C31274 + C31275 - C31276) * C21355 +
              (C31277 - C31278 + C31279 - C31280) * C47110) *
                 C47479) *
                C3234 +
            (((C31452 - C31451 + C31454 - C31453) * C21355 +
              (C31456 - C31455 + C31458 - C31457) * C47110) *
                 C4717 +
             ((C31953 - C31954 + C31955 - C31956) * C21355 +
              (C31957 - C31958 + C31959 - C31960) * C47110) *
                 C47479) *
                C47268) *
               C2472 +
           ((((C31274 - C31273 + C31276 - C31275) * C21355 +
              (C31278 - C31277 + C31280 - C31279) * C47110) *
                 C4717 +
             ((C31281 - C31282 + C31283 - C31284) * C21355 +
              (C31285 - C31286 + C31287 - C31288) * C47110) *
                 C47479) *
                C3234 +
            (((C31954 - C31953 + C31956 - C31955) * C21355 +
              (C31958 - C31957 + C31960 - C31959) * C47110) *
                 C4717 +
             ((C32675 - C32676 + C32677 - C32678) * C21355 +
              (C32679 - C32680 + C32681 - C32682) * C47110) *
                 C47479) *
                C47268) *
               C47226) *
              C47484 +
          (((((C31104 - C31103 + C31106 - C31105) * C21355 +
              (C31108 - C31107 + C31110 - C31109) * C47110) *
                 C4717 +
             ((C31289 - C31290 + C31291 - C31292) * C21355 +
              (C31293 - C31294 + C31295 - C31296) * C47110) *
                 C47479) *
                C3234 +
            (((C31468 - C31467 + C31470 - C31469) * C21355 +
              (C31472 - C31471 + C31474 - C31473) * C47110) *
                 C4717 +
             ((C31961 - C31962 + C31963 - C31964) * C21355 +
              (C31965 - C31966 + C31967 - C31968) * C47110) *
                 C47479) *
                C47268) *
               C2472 +
           ((((C31290 - C31289 + C31292 - C31291) * C21355 +
              (C31294 - C31293 + C31296 - C31295) * C47110) *
                 C4717 +
             ((C31297 - C31298 + C31299 - C31300) * C21355 +
              (C31301 - C31302 + C31303 - C31304) * C47110) *
                 C47479) *
                C3234 +
            (((C31962 - C31961 + C31964 - C31963) * C21355 +
              (C31966 - C31965 + C31968 - C31967) * C47110) *
                 C4717 +
             ((C31090 * C1277 - C31092 * C1263 + C47481 * C1283 -
               C31093 * C1266) *
                  C21355 +
              (C31090 * C1290 - C31092 * C1278 + C47481 * C1293 -
               C31093 * C1284) *
                  C47110) *
                 C47479) *
                C47268) *
               C47226) *
              C47455)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C31090 * C124 - C31092 * C117 + C47481 * C478 - C31093 * C468) *
                 C21355 +
             (C31090 * C138 - C31092 * C125 + C47481 * C498 - C31093 * C479) *
                 C47110) *
                C4717 +
            ((C36849 - C36850 + C36851 - C36852) * C21355 +
             (C36853 - C36854 + C36855 - C36856) * C47110) *
                C47479) *
               C3234 +
           (((C31092 * C468 - C31090 * C478 + C31093 * C471 - C47481 * C484) *
                 C21355 +
             (C31092 * C479 - C31090 * C498 + C31093 * C485 - C47481 * C501) *
                 C47110) *
                C4717 +
            ((C37465 - C37466 + C37467 - C37468) * C21355 +
             (C37469 - C37470 + C37471 - C37472) * C47110) *
                C47479) *
               C47268) *
              C47507 +
          ((((C36850 - C36849 + C36852 - C36851) * C21355 +
             (C36854 - C36853 + C36856 - C36855) * C47110) *
                C4717 +
            ((C36857 - C36858 + C36859 - C36860) * C21355 +
             (C36861 - C36862 + C36863 - C36864) * C47110) *
                C47479) *
               C3234 +
           (((C37466 - C37465 + C37468 - C37467) * C21355 +
             (C37470 - C37469 + C37472 - C37471) * C47110) *
                C4717 +
            ((C37871 - C37872 + C37873 - C37874) * C21355 +
             (C37875 - C37876 + C37877 - C37878) * C47110) *
                C47479) *
               C47268) *
              C47503 +
          ((((C36858 - C36857 + C36860 - C36859) * C21355 +
             (C36862 - C36861 + C36864 - C36863) * C47110) *
                C4717 +
            ((C37701 - C37702 + C37703 - C37704) * C21355 +
             (C37705 - C37706 + C37707 - C37708) * C47110) *
                C47479) *
               C3234 +
           (((C37872 - C37871 + C37874 - C37873) * C21355 +
             (C37876 - C37875 + C37878 - C37877) * C47110) *
                C4717 +
            ((C38341 - C38342 + C38343 - C38344) * C21355 +
             (C38345 - C38346 + C38347 - C38348) * C47110) *
                C47479) *
               C47268) *
              C47493 +
          ((((C37702 - C37701 + C37704 - C37703) * C21355 +
             (C37706 - C37705 + C37708 - C37707) * C47110) *
                C4717 +
            ((C37709 - C37710 + C37711 - C37712) * C21355 +
             (C37713 - C37714 + C37715 - C37716) * C47110) *
                C47479) *
               C3234 +
           (((C38342 - C38341 + C38344 - C38343) * C21355 +
             (C38346 - C38345 + C38348 - C38347) * C47110) *
                C4717 +
            ((C31090 * C6385 - C31092 * C6383 + C47481 * C22230 -
              C31093 * C22229) *
                 C21355 +
             (C31090 * C6389 - C31092 * C6386 + C47481 * C22232 -
              C31093 * C22231) *
                 C47110) *
                C47479) *
               C47268) *
              C47471) *
         C47135) /
            (p * q * std::sqrt(p + q));
    d2ee[185] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C31090 * C124 - C31092 * C117 + C47481 * C478 - C31093 * C468) *
                 C21355 +
             (C31090 * C138 - C31092 * C125 + C47481 * C498 - C31093 * C479) *
                 C47110) *
                C4717 +
            ((C36849 - C36850 + C36851 - C36852) * C21355 +
             (C36853 - C36854 + C36855 - C36856) * C47110) *
                C47479) *
               C47181 * C1392 +
           (((C36850 - C36849 + C36852 - C36851) * C21355 +
             (C36854 - C36853 + C36856 - C36855) * C47110) *
                C4717 +
            ((C36857 - C36858 + C36859 - C36860) * C21355 +
             (C36861 - C36862 + C36863 - C36864) * C47110) *
                C47479) *
               C47181 * C1393 +
           (((C36858 - C36857 + C36860 - C36859) * C21355 +
             (C36862 - C36861 + C36864 - C36863) * C47110) *
                C4717 +
            ((C37701 - C37702 + C37703 - C37704) * C21355 +
             (C37705 - C37706 + C37707 - C37708) * C47110) *
                C47479) *
               C47181 * C1394 +
           (((C37702 - C37701 + C37704 - C37703) * C21355 +
             (C37706 - C37705 + C37708 - C37707) * C47110) *
                C4717 +
            ((C37709 - C37710 + C37711 - C37712) * C21355 +
             (C37713 - C37714 + C37715 - C37716) * C47110) *
                C47479) *
               C47181 * C47471) *
              C47415 +
          ((((C31096 - C31095 + C31098 - C31097) * C21355 +
             (C31100 - C31099 + C31102 - C31101) * C47110) *
                C4717 +
            ((C31273 - C31274 + C31275 - C31276) * C21355 +
             (C31277 - C31278 + C31279 - C31280) * C47110) *
                C47479) *
               C47181 * C1392 +
           (((C31274 - C31273 + C31276 - C31275) * C21355 +
             (C31278 - C31277 + C31280 - C31279) * C47110) *
                C4717 +
            ((C31281 - C31282 + C31283 - C31284) * C21355 +
             (C31285 - C31286 + C31287 - C31288) * C47110) *
                C47479) *
               C47181 * C1393 +
           (((C31282 - C31281 + C31284 - C31283) * C21355 +
             (C31286 - C31285 + C31288 - C31287) * C47110) *
                C4717 +
            ((C32473 - C32474 + C32475 - C32476) * C21355 +
             (C32477 - C32478 + C32479 - C32480) * C47110) *
                C47479) *
               C47181 * C1394 +
           (((C32474 - C32473 + C32476 - C32475) * C21355 +
             (C32478 - C32477 + C32480 - C32479) * C47110) *
                C4717 +
            ((C31090 * C1138 - C31092 * C1128 + C47481 * C6387 -
              C31093 * C6384) *
                 C21355 +
             (C31090 * C1146 - C31092 * C1139 + C47481 * C6390 -
              C31093 * C6388) *
                 C47110) *
                C47479) *
               C47181 * C47471) *
              C47146)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C31090 * C124 - C31092 * C117 + C47481 * C478 - C31093 * C468) *
                 C21355 +
             (C31090 * C138 - C31092 * C125 + C47481 * C498 - C31093 * C479) *
                 C47110) *
                C4717 +
            ((C36849 - C36850 + C36851 - C36852) * C21355 +
             (C36853 - C36854 + C36855 - C36856) * C47110) *
                C47479) *
               C47181 * C47429 +
           (((C36850 - C36849 + C36852 - C36851) * C21355 +
             (C36854 - C36853 + C36856 - C36855) * C47110) *
                C4717 +
            ((C36857 - C36858 + C36859 - C36860) * C21355 +
             (C36861 - C36862 + C36863 - C36864) * C47110) *
                C47479) *
               C47181 * C47226) *
              C636 +
          ((((C31096 - C31095 + C31098 - C31097) * C21355 +
             (C31100 - C31099 + C31102 - C31101) * C47110) *
                C4717 +
            ((C31273 - C31274 + C31275 - C31276) * C21355 +
             (C31277 - C31278 + C31279 - C31280) * C47110) *
                C47479) *
               C47181 * C47429 +
           (((C31274 - C31273 + C31276 - C31275) * C21355 +
             (C31278 - C31277 + C31280 - C31279) * C47110) *
                C4717 +
            ((C31281 - C31282 + C31283 - C31284) * C21355 +
             (C31285 - C31286 + C31287 - C31288) * C47110) *
                C47479) *
               C47181 * C47226) *
              C637 +
          ((((C31104 - C31103 + C31106 - C31105) * C21355 +
             (C31108 - C31107 + C31110 - C31109) * C47110) *
                C4717 +
            ((C31289 - C31290 + C31291 - C31292) * C21355 +
             (C31293 - C31294 + C31295 - C31296) * C47110) *
                C47479) *
               C47181 * C47429 +
           (((C31290 - C31289 + C31292 - C31291) * C21355 +
             (C31294 - C31293 + C31296 - C31295) * C47110) *
                C4717 +
            ((C31297 - C31298 + C31299 - C31300) * C21355 +
             (C31301 - C31302 + C31303 - C31304) * C47110) *
                C47479) *
               C47181 * C47226) *
              C638 +
          ((((C31112 - C31111 + C31114 - C31113) * C21355 +
             (C31116 - C31115 + C31118 - C31117) * C47110) *
                C4717 +
            ((C31613 - C31614 + C31615 - C31616) * C21355 +
             (C31617 - C31618 + C31619 - C31620) * C47110) *
                C47479) *
               C47181 * C47429 +
           (((C31614 - C31613 + C31616 - C31615) * C21355 +
             (C31618 - C31617 + C31620 - C31619) * C47110) *
                C4717 +
            ((C31090 * C311 - C31092 * C294 + C47481 * C1557 - C31093 * C1556) *
                 C21355 +
             (C31090 * C324 - C31092 * C312 + C47481 * C1559 - C31093 * C1558) *
                 C47110) *
                C47479) *
               C47181 * C47226) *
              C47465)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C31090 * C124 - C31092 * C117 + C47481 * C478 - C31093 * C468) *
                  C21355 +
              (C31090 * C138 - C31092 * C125 + C47481 * C498 - C31093 * C479) *
                  C47110) *
                 C4717 +
             ((C36849 - C36850 + C36851 - C36852) * C21355 +
              (C36853 - C36854 + C36855 - C36856) * C47110) *
                 C47479) *
                C1788 +
            (((C31092 * C468 - C31090 * C478 + C31093 * C471 - C47481 * C484) *
                  C21355 +
              (C31092 * C479 - C31090 * C498 + C31093 * C485 - C47481 * C501) *
                  C47110) *
                 C4717 +
             ((C37465 - C37466 + C37467 - C37468) * C21355 +
              (C37469 - C37470 + C37471 - C37472) * C47110) *
                 C47479) *
                C1789 +
            (((C31090 * C484 - C31092 * C471 + C47481 * C1974 -
               C31093 * C1968) *
                  C21355 +
              (C31090 * C501 - C31092 * C485 + C47481 * C1986 -
               C31093 * C1975) *
                  C47110) *
                 C4717 +
             ((C37863 - C37864 + C37865 - C37866) * C21355 +
              (C37867 - C37868 + C37869 - C37870) * C47110) *
                 C47479) *
                C47464) *
               C47429 +
           ((((C36850 - C36849 + C36852 - C36851) * C21355 +
              (C36854 - C36853 + C36856 - C36855) * C47110) *
                 C4717 +
             ((C36857 - C36858 + C36859 - C36860) * C21355 +
              (C36861 - C36862 + C36863 - C36864) * C47110) *
                 C47479) *
                C1788 +
            (((C37466 - C37465 + C37468 - C37467) * C21355 +
              (C37470 - C37469 + C37472 - C37471) * C47110) *
                 C4717 +
             ((C37871 - C37872 + C37873 - C37874) * C21355 +
              (C37875 - C37876 + C37877 - C37878) * C47110) *
                 C47479) *
                C1789 +
            (((C37864 - C37863 + C37866 - C37865) * C21355 +
              (C37868 - C37867 + C37870 - C37869) * C47110) *
                 C4717 +
             ((C37879 - C37880 + C37881 - C37882) * C21355 +
              (C37883 - C37884 + C37885 - C37886) * C47110) *
                 C47479) *
                C47464) *
               C47226) *
              C47415 +
          (((((C31096 - C31095 + C31098 - C31097) * C21355 +
              (C31100 - C31099 + C31102 - C31101) * C47110) *
                 C4717 +
             ((C31273 - C31274 + C31275 - C31276) * C21355 +
              (C31277 - C31278 + C31279 - C31280) * C47110) *
                 C47479) *
                C1788 +
            (((C31452 - C31451 + C31454 - C31453) * C21355 +
              (C31456 - C31455 + C31458 - C31457) * C47110) *
                 C4717 +
             ((C31953 - C31954 + C31955 - C31956) * C21355 +
              (C31957 - C31958 + C31959 - C31960) * C47110) *
                 C47479) *
                C1789 +
            (((C31460 - C31459 + C31462 - C31461) * C21355 +
              (C31464 - C31463 + C31466 - C31465) * C47110) *
                 C4717 +
             ((C33381 - C33382 + C33383 - C33384) * C21355 +
              (C33385 - C33386 + C33387 - C33388) * C47110) *
                 C47479) *
                C47464) *
               C47429 +
           ((((C31274 - C31273 + C31276 - C31275) * C21355 +
              (C31278 - C31277 + C31280 - C31279) * C47110) *
                 C4717 +
             ((C31281 - C31282 + C31283 - C31284) * C21355 +
              (C31285 - C31286 + C31287 - C31288) * C47110) *
                 C47479) *
                C1788 +
            (((C31954 - C31953 + C31956 - C31955) * C21355 +
              (C31958 - C31957 + C31960 - C31959) * C47110) *
                 C4717 +
             ((C32675 - C32676 + C32677 - C32678) * C21355 +
              (C32679 - C32680 + C32681 - C32682) * C47110) *
                 C47479) *
                C1789 +
            (((C33382 - C33381 + C33384 - C33383) * C21355 +
              (C33386 - C33385 + C33388 - C33387) * C47110) *
                 C4717 +
             ((C31090 * C1281 - C31092 * C1265 + C47481 * C7243 -
               C31093 * C7240) *
                  C21355 +
              (C31090 * C1292 - C31092 * C1282 + C47481 * C7246 -
               C31093 * C7244) *
                  C47110) *
                 C47479) *
                C47464) *
               C47226) *
              C47146)) /
            (p * q * std::sqrt(p + q));
    d2ee[186] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C31090 * C124 - C31092 * C117 + C47481 * C478 - C31093 * C468) *
                 C21355 +
             (C31090 * C138 - C31092 * C125 + C47481 * C498 - C31093 * C479) *
                 C47110) *
                C4717 +
            ((C36849 - C36850 + C36851 - C36852) * C21355 +
             (C36853 - C36854 + C36855 - C36856) * C47110) *
                C47479) *
               C47430 +
           (((C31092 * C468 - C31090 * C478 + C31093 * C471 - C47481 * C484) *
                 C21355 +
             (C31092 * C479 - C31090 * C498 + C31093 * C485 - C47481 * C501) *
                 C47110) *
                C4717 +
            ((C37465 - C37466 + C37467 - C37468) * C21355 +
             (C37469 - C37470 + C37471 - C37472) * C47110) *
                C47479) *
               C47268) *
              C1392 +
          ((((C36850 - C36849 + C36852 - C36851) * C21355 +
             (C36854 - C36853 + C36856 - C36855) * C47110) *
                C4717 +
            ((C36857 - C36858 + C36859 - C36860) * C21355 +
             (C36861 - C36862 + C36863 - C36864) * C47110) *
                C47479) *
               C47430 +
           (((C37466 - C37465 + C37468 - C37467) * C21355 +
             (C37470 - C37469 + C37472 - C37471) * C47110) *
                C4717 +
            ((C37871 - C37872 + C37873 - C37874) * C21355 +
             (C37875 - C37876 + C37877 - C37878) * C47110) *
                C47479) *
               C47268) *
              C1393 +
          ((((C36858 - C36857 + C36860 - C36859) * C21355 +
             (C36862 - C36861 + C36864 - C36863) * C47110) *
                C4717 +
            ((C37701 - C37702 + C37703 - C37704) * C21355 +
             (C37705 - C37706 + C37707 - C37708) * C47110) *
                C47479) *
               C47430 +
           (((C37872 - C37871 + C37874 - C37873) * C21355 +
             (C37876 - C37875 + C37878 - C37877) * C47110) *
                C4717 +
            ((C38341 - C38342 + C38343 - C38344) * C21355 +
             (C38345 - C38346 + C38347 - C38348) * C47110) *
                C47479) *
               C47268) *
              C1394 +
          ((((C37702 - C37701 + C37704 - C37703) * C21355 +
             (C37706 - C37705 + C37708 - C37707) * C47110) *
                C4717 +
            ((C37709 - C37710 + C37711 - C37712) * C21355 +
             (C37713 - C37714 + C37715 - C37716) * C47110) *
                C47479) *
               C47430 +
           (((C38342 - C38341 + C38344 - C38343) * C21355 +
             (C38346 - C38345 + C38348 - C38347) * C47110) *
                C4717 +
            ((C31090 * C6385 - C31092 * C6383 + C47481 * C22230 -
              C31093 * C22229) *
                 C21355 +
             (C31090 * C6389 - C31092 * C6386 + C47481 * C22232 -
              C31093 * C22231) *
                 C47110) *
                C47479) *
               C47268) *
              C47471) *
         C47135) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C31090 * C124 - C31092 * C117 + C47481 * C478 - C31093 * C468) *
                  C21355 +
              (C31090 * C138 - C31092 * C125 + C47481 * C498 - C31093 * C479) *
                  C47110) *
                 C4717 +
             ((C36849 - C36850 + C36851 - C36852) * C21355 +
              (C36853 - C36854 + C36855 - C36856) * C47110) *
                 C47479) *
                C47430 +
            (((C31092 * C468 - C31090 * C478 + C31093 * C471 - C47481 * C484) *
                  C21355 +
              (C31092 * C479 - C31090 * C498 + C31093 * C485 - C47481 * C501) *
                  C47110) *
                 C4717 +
             ((C37465 - C37466 + C37467 - C37468) * C21355 +
              (C37469 - C37470 + C37471 - C37472) * C47110) *
                 C47479) *
                C47268) *
               C47429 +
           ((((C36850 - C36849 + C36852 - C36851) * C21355 +
              (C36854 - C36853 + C36856 - C36855) * C47110) *
                 C4717 +
             ((C36857 - C36858 + C36859 - C36860) * C21355 +
              (C36861 - C36862 + C36863 - C36864) * C47110) *
                 C47479) *
                C47430 +
            (((C37466 - C37465 + C37468 - C37467) * C21355 +
              (C37470 - C37469 + C37472 - C37471) * C47110) *
                 C4717 +
             ((C31090 * C1273 - C31092 * C1261 + C47481 * C1279 -
               C31093 * C1264) *
                  C21355 +
              (C31090 * C1288 - C31092 * C1274 + C47481 * C1291 -
               C31093 * C1280) *
                  C47110) *
                 C47479) *
                C47268) *
               C47226) *
              C284 +
          (((((C31096 - C31095 + C31098 - C31097) * C21355 +
              (C31100 - C31099 + C31102 - C31101) * C47110) *
                 C4717 +
             ((C31273 - C31274 + C31275 - C31276) * C21355 +
              (C31277 - C31278 + C31279 - C31280) * C47110) *
                 C47479) *
                C47430 +
            (((C31452 - C31451 + C31454 - C31453) * C21355 +
              (C31456 - C31455 + C31458 - C31457) * C47110) *
                 C4717 +
             ((C31953 - C31954 + C31955 - C31956) * C21355 +
              (C31957 - C31958 + C31959 - C31960) * C47110) *
                 C47479) *
                C47268) *
               C47429 +
           ((((C31274 - C31273 + C31276 - C31275) * C21355 +
              (C31278 - C31277 + C31280 - C31279) * C47110) *
                 C4717 +
             ((C31281 - C31282 + C31283 - C31284) * C21355 +
              (C31285 - C31286 + C31287 - C31288) * C47110) *
                 C47479) *
                C47430 +
            (((C31954 - C31953 + C31956 - C31955) * C21355 +
              (C31958 - C31957 + C31960 - C31959) * C47110) *
                 C4717 +
             ((C32675 - C32676 + C32677 - C32678) * C21355 +
              (C32679 - C32680 + C32681 - C32682) * C47110) *
                 C47479) *
                C47268) *
               C47226) *
              C285 +
          (((((C31104 - C31103 + C31106 - C31105) * C21355 +
              (C31108 - C31107 + C31110 - C31109) * C47110) *
                 C4717 +
             ((C31289 - C31290 + C31291 - C31292) * C21355 +
              (C31293 - C31294 + C31295 - C31296) * C47110) *
                 C47479) *
                C47430 +
            (((C31468 - C31467 + C31470 - C31469) * C21355 +
              (C31472 - C31471 + C31474 - C31473) * C47110) *
                 C4717 +
             ((C31961 - C31962 + C31963 - C31964) * C21355 +
              (C31965 - C31966 + C31967 - C31968) * C47110) *
                 C47479) *
                C47268) *
               C47429 +
           ((((C31290 - C31289 + C31292 - C31291) * C21355 +
              (C31294 - C31293 + C31296 - C31295) * C47110) *
                 C4717 +
             ((C31297 - C31298 + C31299 - C31300) * C21355 +
              (C31301 - C31302 + C31303 - C31304) * C47110) *
                 C47479) *
                C47430 +
            (((C31962 - C31961 + C31964 - C31963) * C21355 +
              (C31966 - C31965 + C31968 - C31967) * C47110) *
                 C4717 +
             ((C31090 * C1277 - C31092 * C1263 + C47481 * C1283 -
               C31093 * C1266) *
                  C21355 +
              (C31090 * C1290 - C31092 * C1278 + C47481 * C1293 -
               C31093 * C1284) *
                  C47110) *
                 C47479) *
                C47268) *
               C47226) *
              C47455)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C31090 * C124 - C31092 * C117 + C47481 * C478 - C31093 * C468) *
                 C21355 +
             (C31090 * C138 - C31092 * C125 + C47481 * C498 - C31093 * C479) *
                 C47110) *
                C4717 +
            ((C36849 - C36850 + C36851 - C36852) * C21355 +
             (C36853 - C36854 + C36855 - C36856) * C47110) *
                C47479) *
               C2248 +
           (((C31092 * C468 - C31090 * C478 + C31093 * C471 - C47481 * C484) *
                 C21355 +
             (C31092 * C479 - C31090 * C498 + C31093 * C485 - C47481 * C501) *
                 C47110) *
                C4717 +
            ((C37465 - C37466 + C37467 - C37468) * C21355 +
             (C37469 - C37470 + C37471 - C37472) * C47110) *
                C47479) *
               C2249 +
           (((C31090 * C484 - C31092 * C471 + C47481 * C1974 - C31093 * C1968) *
                 C21355 +
             (C31090 * C501 - C31092 * C485 + C47481 * C1986 - C31093 * C1975) *
                 C47110) *
                C4717 +
            ((C37863 - C37864 + C37865 - C37866) * C21355 +
             (C37867 - C37868 + C37869 - C37870) * C47110) *
                C47479) *
               C2250 +
           (((C31092 * C1968 - C31090 * C1974 + C31093 * C1971 -
              C47481 * C1980) *
                 C21355 +
             (C31092 * C1975 - C31090 * C1986 + C31093 * C1981 -
              C47481 * C1989) *
                 C47110) *
                C4717 +
            ((C39177 - C39178 + C39179 - C39180) * C21355 +
             (C39181 - C39182 + C39183 - C39184) * C47110) *
                C47479) *
               C47477) *
              C47429 +
          ((((C36850 - C36849 + C36852 - C36851) * C21355 +
             (C36854 - C36853 + C36856 - C36855) * C47110) *
                C4717 +
            ((C36857 - C36858 + C36859 - C36860) * C21355 +
             (C36861 - C36862 + C36863 - C36864) * C47110) *
                C47479) *
               C2248 +
           (((C37466 - C37465 + C37468 - C37467) * C21355 +
             (C37470 - C37469 + C37472 - C37471) * C47110) *
                C4717 +
            ((C37871 - C37872 + C37873 - C37874) * C21355 +
             (C37875 - C37876 + C37877 - C37878) * C47110) *
                C47479) *
               C2249 +
           (((C37864 - C37863 + C37866 - C37865) * C21355 +
             (C37868 - C37867 + C37870 - C37869) * C47110) *
                C4717 +
            ((C37879 - C37880 + C37881 - C37882) * C21355 +
             (C37883 - C37884 + C37885 - C37886) * C47110) *
                C47479) *
               C2250 +
           (((C39178 - C39177 + C39180 - C39179) * C21355 +
             (C39182 - C39181 + C39184 - C39183) * C47110) *
                C4717 +
            ((C31090 * C7241 - C31092 * C7239 + C47481 * C22891 -
              C31093 * C22890) *
                 C21355 +
             (C31090 * C7245 - C31092 * C7242 + C47481 * C22893 -
              C31093 * C22892) *
                 C47110) *
                C47479) *
               C47477) *
              C47226) *
         C47135) /
            (p * q * std::sqrt(p + q));
    d2ee[187] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C31090 * C124 - C31092 * C117 + C47481 * C478 -
                 C31093 * C468) *
                    C21355 +
                (C31090 * C138 - C31092 * C125 + C47481 * C498 -
                 C31093 * C479) *
                    C47110) *
                   C4717 +
               ((C31090 * C297 - C31092 * C287 + C47481 * C911 -
                 C31093 * C906) *
                    C21355 +
                (C31090 * C317 - C31092 * C298 + C47481 * C921 -
                 C31093 * C912) *
                    C47110) *
                   C47479) *
                  C47181 * C47163 * C108 +
              (((C31096 - C31095 + C31098 - C31097) * C21355 +
                (C31100 - C31099 + C31102 - C31101) * C47110) *
                   C4717 +
               ((C31273 - C31274 + C31275 - C31276) * C21355 +
                (C31277 - C31278 + C31279 - C31280) * C47110) *
                   C47479) *
                  C47181 * C47163 * C109 +
              (((C31104 - C31103 + C31106 - C31105) * C21355 +
                (C31108 - C31107 + C31110 - C31109) * C47110) *
                   C4717 +
               ((C31289 - C31290 + C31291 - C31292) * C21355 +
                (C31293 - C31294 + C31295 - C31296) * C47110) *
                   C47479) *
                  C47181 * C47163 * C110 +
              (((C31112 - C31111 + C31114 - C31113) * C21355 +
                (C31116 - C31115 + C31118 - C31117) * C47110) *
                   C4717 +
               ((C31613 - C31614 + C31615 - C31616) * C21355 +
                (C31617 - C31618 + C31619 - C31620) * C47110) *
                   C47479) *
                  C47181 * C47163 * C111 +
              (((C31120 - C31119 + C31122 - C31121) * C21355 +
                (C31124 - C31123 + C31126 - C31125) * C47110) *
                   C4717 +
               ((C31090 * C313 - C31092 * C295 + C47481 * C919 -
                 C31093 * C910) *
                    C21355 +
                (C31090 * C325 - C31092 * C314 + C47481 * C925 -
                 C31093 * C920) *
                    C47110) *
                   C47479) *
                  C47181 * C47163 * C112) +
         0.5 * std::pow(Pi, 2.5) *
             (((((C31090 * C124 - C31092 * C117 + C47481 * C478 -
                  C31093 * C468) *
                     C21355 +
                 (C31090 * C138 - C31092 * C125 + C47481 * C498 -
                  C31093 * C479) *
                     C47110) *
                    C4717 +
                ((C36849 - C36850 + C36851 - C36852) * C21355 +
                 (C36853 - C36854 + C36855 - C36856) * C47110) *
                    C47479) *
                   C47181 * C47500 +
               (((C36850 - C36849 + C36852 - C36851) * C21355 +
                 (C36854 - C36853 + C36856 - C36855) * C47110) *
                    C4717 +
                ((C36857 - C36858 + C36859 - C36860) * C21355 +
                 (C36861 - C36862 + C36863 - C36864) * C47110) *
                    C47479) *
                   C47181 * C47488 +
               (((C36858 - C36857 + C36860 - C36859) * C21355 +
                 (C36862 - C36861 + C36864 - C36863) * C47110) *
                    C4717 +
                ((C31090 * C1130 - C31092 * C1124 + C47481 * C1669 -
                  C31093 * C1666) *
                     C21355 +
                 (C31090 * C1142 - C31092 * C1131 + C47481 * C1675 -
                  C31093 * C1670) *
                     C47110) *
                    C47479) *
                   C47181 * C47461) *
                  C284 +
              ((((C31096 - C31095 + C31098 - C31097) * C21355 +
                 (C31100 - C31099 + C31102 - C31101) * C47110) *
                    C4717 +
                ((C31273 - C31274 + C31275 - C31276) * C21355 +
                 (C31277 - C31278 + C31279 - C31280) * C47110) *
                    C47479) *
                   C47181 * C47500 +
               (((C31274 - C31273 + C31276 - C31275) * C21355 +
                 (C31278 - C31277 + C31280 - C31279) * C47110) *
                    C4717 +
                ((C31281 - C31282 + C31283 - C31284) * C21355 +
                 (C31285 - C31286 + C31287 - C31288) * C47110) *
                    C47479) *
                   C47181 * C47488 +
               (((C31282 - C31281 + C31284 - C31283) * C21355 +
                 (C31286 - C31285 + C31288 - C31287) * C47110) *
                    C4717 +
                ((C32473 - C32474 + C32475 - C32476) * C21355 +
                 (C32477 - C32478 + C32479 - C32480) * C47110) *
                    C47479) *
                   C47181 * C47461) *
                  C285 +
              ((((C31104 - C31103 + C31106 - C31105) * C21355 +
                 (C31108 - C31107 + C31110 - C31109) * C47110) *
                    C4717 +
                ((C31289 - C31290 + C31291 - C31292) * C21355 +
                 (C31293 - C31294 + C31295 - C31296) * C47110) *
                    C47479) *
                   C47181 * C47500 +
               (((C31290 - C31289 + C31292 - C31291) * C21355 +
                 (C31294 - C31293 + C31296 - C31295) * C47110) *
                    C4717 +
                ((C31297 - C31298 + C31299 - C31300) * C21355 +
                 (C31301 - C31302 + C31303 - C31304) * C47110) *
                    C47479) *
                   C47181 * C47488 +
               (((C31298 - C31297 + C31300 - C31299) * C21355 +
                 (C31302 - C31301 + C31304 - C31303) * C47110) *
                    C4717 +
                ((C31090 * C1134 - C31092 * C1126 + C47481 * C1673 -
                  C31093 * C1668) *
                     C21355 +
                 (C31090 * C1144 - C31092 * C1135 + C47481 * C1677 -
                  C31093 * C1674) *
                     C47110) *
                    C47479) *
                   C47181 * C47461) *
                  C47455)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C31090 * C124 - C31092 * C117 + C47481 * C478 - C31093 * C468) *
                 C21355 +
             (C31090 * C138 - C31092 * C125 + C47481 * C498 - C31093 * C479) *
                 C47110) *
                C4717 +
            ((C36849 - C36850 + C36851 - C36852) * C21355 +
             (C36853 - C36854 + C36855 - C36856) * C47110) *
                C47479) *
               C47501 +
           (((C31092 * C468 - C31090 * C478 + C31093 * C471 - C47481 * C484) *
                 C21355 +
             (C31092 * C479 - C31090 * C498 + C31093 * C485 - C47481 * C501) *
                 C47110) *
                C4717 +
            ((C31092 * C906 - C31090 * C911 + C31093 * C1258 - C47481 * C1267) *
                 C21355 +
             (C31092 * C912 - C31090 * C921 + C31093 * C1268 - C47481 * C1285) *
                 C47110) *
                C47479) *
               C47490 +
           (((C31090 * C484 - C31092 * C471 + C47481 * C1974 - C31093 * C1968) *
                 C21355 +
             (C31090 * C501 - C31092 * C485 + C47481 * C1986 - C31093 * C1975) *
                 C47110) *
                C4717 +
            ((C31090 * C1267 - C31092 * C1258 + C47481 * C2365 -
              C31093 * C2362) *
                 C21355 +
             (C31090 * C1285 - C31092 * C1268 + C47481 * C2371 -
              C31093 * C2366) *
                 C47110) *
                C47479) *
               C47464) *
              C47163 * C284 +
          ((((C31096 - C31095 + C31098 - C31097) * C21355 +
             (C31100 - C31099 + C31102 - C31101) * C47110) *
                C4717 +
            ((C31273 - C31274 + C31275 - C31276) * C21355 +
             (C31277 - C31278 + C31279 - C31280) * C47110) *
                C47479) *
               C47501 +
           (((C31452 - C31451 + C31454 - C31453) * C21355 +
             (C31456 - C31455 + C31458 - C31457) * C47110) *
                C4717 +
            ((C31953 - C31954 + C31955 - C31956) * C21355 +
             (C31957 - C31958 + C31959 - C31960) * C47110) *
                C47479) *
               C47490 +
           (((C31460 - C31459 + C31462 - C31461) * C21355 +
             (C31464 - C31463 + C31466 - C31465) * C47110) *
                C4717 +
            ((C33381 - C33382 + C33383 - C33384) * C21355 +
             (C33385 - C33386 + C33387 - C33388) * C47110) *
                C47479) *
               C47464) *
              C47163 * C285 +
          ((((C31104 - C31103 + C31106 - C31105) * C21355 +
             (C31108 - C31107 + C31110 - C31109) * C47110) *
                C4717 +
            ((C31289 - C31290 + C31291 - C31292) * C21355 +
             (C31293 - C31294 + C31295 - C31296) * C47110) *
                C47479) *
               C47501 +
           (((C31468 - C31467 + C31470 - C31469) * C21355 +
             (C31472 - C31471 + C31474 - C31473) * C47110) *
                C4717 +
            ((C31961 - C31962 + C31963 - C31964) * C21355 +
             (C31965 - C31966 + C31967 - C31968) * C47110) *
                C47479) *
               C47490 +
           (((C31476 - C31475 + C31478 - C31477) * C21355 +
             (C31480 - C31479 + C31482 - C31481) * C47110) *
                C4717 +
            ((C31090 * C1271 - C31092 * C1260 + C47481 * C2369 -
              C31093 * C2364) *
                 C21355 +
             (C31090 * C1287 - C31092 * C1272 + C47481 * C2373 -
              C31093 * C2370) *
                 C47110) *
                C47479) *
               C47464) *
              C47163 * C47455)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C31090 * C124 - C31092 * C117 + C47481 * C478 - C31093 * C468) *
                 C21355 +
             (C31090 * C138 - C31092 * C125 + C47481 * C498 - C31093 * C479) *
                 C47110) *
                C4717 +
            ((C36849 - C36850 + C36851 - C36852) * C21355 +
             (C36853 - C36854 + C36855 - C36856) * C47110) *
                C47479) *
               C47181 * C1050 +
           (((C36850 - C36849 + C36852 - C36851) * C21355 +
             (C36854 - C36853 + C36856 - C36855) * C47110) *
                C4717 +
            ((C36857 - C36858 + C36859 - C36860) * C21355 +
             (C36861 - C36862 + C36863 - C36864) * C47110) *
                C47479) *
               C47181 * C1051 +
           (((C36858 - C36857 + C36860 - C36859) * C21355 +
             (C36862 - C36861 + C36864 - C36863) * C47110) *
                C4717 +
            ((C31090 * C1130 - C31092 * C1124 + C47481 * C1669 -
              C31093 * C1666) *
                 C21355 +
             (C31090 * C1142 - C31092 * C1131 + C47481 * C1675 -
              C31093 * C1670) *
                 C47110) *
                C47479) *
               C47181 * C47461) *
              C47497 +
          ((((C31096 - C31095 + C31098 - C31097) * C21355 +
             (C31100 - C31099 + C31102 - C31101) * C47110) *
                C4717 +
            ((C31273 - C31274 + C31275 - C31276) * C21355 +
             (C31277 - C31278 + C31279 - C31280) * C47110) *
                C47479) *
               C47181 * C1050 +
           (((C31274 - C31273 + C31276 - C31275) * C21355 +
             (C31278 - C31277 + C31280 - C31279) * C47110) *
                C4717 +
            ((C31281 - C31282 + C31283 - C31284) * C21355 +
             (C31285 - C31286 + C31287 - C31288) * C47110) *
                C47479) *
               C47181 * C1051 +
           (((C31282 - C31281 + C31284 - C31283) * C21355 +
             (C31286 - C31285 + C31288 - C31287) * C47110) *
                C4717 +
            ((C32473 - C32474 + C32475 - C32476) * C21355 +
             (C32477 - C32478 + C32479 - C32480) * C47110) *
                C47479) *
               C47181 * C47461) *
              C47484 +
          ((((C31104 - C31103 + C31106 - C31105) * C21355 +
             (C31108 - C31107 + C31110 - C31109) * C47110) *
                C4717 +
            ((C31289 - C31290 + C31291 - C31292) * C21355 +
             (C31293 - C31294 + C31295 - C31296) * C47110) *
                C47479) *
               C47181 * C1050 +
           (((C31290 - C31289 + C31292 - C31291) * C21355 +
             (C31294 - C31293 + C31296 - C31295) * C47110) *
                C4717 +
            ((C31297 - C31298 + C31299 - C31300) * C21355 +
             (C31301 - C31302 + C31303 - C31304) * C47110) *
                C47479) *
               C47181 * C1051 +
           (((C31298 - C31297 + C31300 - C31299) * C21355 +
             (C31302 - C31301 + C31304 - C31303) * C47110) *
                C4717 +
            ((C31090 * C1134 - C31092 * C1126 + C47481 * C1673 -
              C31093 * C1668) *
                 C21355 +
             (C31090 * C1144 - C31092 * C1135 + C47481 * C1677 -
              C31093 * C1674) *
                 C47110) *
                C47479) *
               C47181 * C47461) *
              C47455)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C31090 * C124 - C31092 * C117 + C47481 * C478 - C31093 * C468) *
                C21355 +
            (C31090 * C138 - C31092 * C125 + C47481 * C498 - C31093 * C479) *
                C47110) *
               C4717 +
           ((C36849 - C36850 + C36851 - C36852) * C21355 +
            (C36853 - C36854 + C36855 - C36856) * C47110) *
               C47479) *
              C47181 * C1118 +
          (((C36850 - C36849 + C36852 - C36851) * C21355 +
            (C36854 - C36853 + C36856 - C36855) * C47110) *
               C4717 +
           ((C36857 - C36858 + C36859 - C36860) * C21355 +
            (C36861 - C36862 + C36863 - C36864) * C47110) *
               C47479) *
              C47181 * C1119 +
          (((C36858 - C36857 + C36860 - C36859) * C21355 +
            (C36862 - C36861 + C36864 - C36863) * C47110) *
               C4717 +
           ((C37701 - C37702 + C37703 - C37704) * C21355 +
            (C37705 - C37706 + C37707 - C37708) * C47110) *
               C47479) *
              C47181 * C1120 +
          (((C37702 - C37701 + C37704 - C37703) * C21355 +
            (C37706 - C37705 + C37708 - C37707) * C47110) *
               C4717 +
           ((C37709 - C37710 + C37711 - C37712) * C21355 +
            (C37713 - C37714 + C37715 - C37716) * C47110) *
               C47479) *
              C47181 * C1121 +
          (((C37710 - C37709 + C37712 - C37711) * C21355 +
            (C37714 - C37713 + C37716 - C37715) * C47110) *
               C4717 +
           ((C31090 * C5729 - C31092 * C5727 + C47481 * C22596 -
             C31093 * C22595) *
                C21355 +
            (C31090 * C5733 - C31092 * C5730 + C47481 * C22598 -
             C31093 * C22597) *
                C47110) *
               C47479) *
              C47181 * C1122) *
         C47135) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C31090 * C124 - C31092 * C117 + C47481 * C478 - C31093 * C468) *
                 C21355 +
             (C31090 * C138 - C31092 * C125 + C47481 * C498 - C31093 * C479) *
                 C47110) *
                C4717 +
            ((C36849 - C36850 + C36851 - C36852) * C21355 +
             (C36853 - C36854 + C36855 - C36856) * C47110) *
                C47479) *
               C47501 +
           (((C31092 * C468 - C31090 * C478 + C31093 * C471 - C47481 * C484) *
                 C21355 +
             (C31092 * C479 - C31090 * C498 + C31093 * C485 - C47481 * C501) *
                 C47110) *
                C4717 +
            ((C37465 - C37466 + C37467 - C37468) * C21355 +
             (C37469 - C37470 + C37471 - C37472) * C47110) *
                C47479) *
               C47490 +
           (((C31090 * C484 - C31092 * C471 + C47481 * C1974 - C31093 * C1968) *
                 C21355 +
             (C31090 * C501 - C31092 * C485 + C47481 * C1986 - C31093 * C1975) *
                 C47110) *
                C4717 +
            ((C37863 - C37864 + C37865 - C37866) * C21355 +
             (C37867 - C37868 + C37869 - C37870) * C47110) *
                C47479) *
               C47464) *
              C1050 +
          ((((C36850 - C36849 + C36852 - C36851) * C21355 +
             (C36854 - C36853 + C36856 - C36855) * C47110) *
                C4717 +
            ((C36857 - C36858 + C36859 - C36860) * C21355 +
             (C36861 - C36862 + C36863 - C36864) * C47110) *
                C47479) *
               C47501 +
           (((C37466 - C37465 + C37468 - C37467) * C21355 +
             (C37470 - C37469 + C37472 - C37471) * C47110) *
                C4717 +
            ((C37871 - C37872 + C37873 - C37874) * C21355 +
             (C37875 - C37876 + C37877 - C37878) * C47110) *
                C47479) *
               C47490 +
           (((C37864 - C37863 + C37866 - C37865) * C21355 +
             (C37868 - C37867 + C37870 - C37869) * C47110) *
                C4717 +
            ((C37879 - C37880 + C37881 - C37882) * C21355 +
             (C37883 - C37884 + C37885 - C37886) * C47110) *
                C47479) *
               C47464) *
              C1051 +
          ((((C36858 - C36857 + C36860 - C36859) * C21355 +
             (C36862 - C36861 + C36864 - C36863) * C47110) *
                C4717 +
            ((C37701 - C37702 + C37703 - C37704) * C21355 +
             (C37705 - C37706 + C37707 - C37708) * C47110) *
                C47479) *
               C47501 +
           (((C37872 - C37871 + C37874 - C37873) * C21355 +
             (C37876 - C37875 + C37878 - C37877) * C47110) *
                C4717 +
            ((C31092 * C1666 - C31090 * C1669 + C31093 * C5893 -
              C47481 * C5895) *
                 C21355 +
             (C31092 * C1670 - C31090 * C1675 + C31093 * C5896 -
              C47481 * C5899) *
                 C47110) *
                C47479) *
               C47490 +
           (((C37880 - C37879 + C37882 - C37881) * C21355 +
             (C37884 - C37883 + C37886 - C37885) * C47110) *
                C4717 +
            ((C31090 * C5895 - C31092 * C5893 + C47481 * C23237 -
              C31093 * C23236) *
                 C21355 +
             (C31090 * C5899 - C31092 * C5896 + C47481 * C23239 -
              C31093 * C23238) *
                 C47110) *
                C47479) *
               C47464) *
              C47461) *
         C47135) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C31090 * C124 - C31092 * C117 + C47481 * C478 - C31093 * C468) *
                 C21355 +
             (C31090 * C138 - C31092 * C125 + C47481 * C498 - C31093 * C479) *
                 C47110) *
                C4717 +
            ((C36849 - C36850 + C36851 - C36852) * C21355 +
             (C36853 - C36854 + C36855 - C36856) * C47110) *
                C47479) *
               C1788 +
           (((C31092 * C468 - C31090 * C478 + C31093 * C471 - C47481 * C484) *
                 C21355 +
             (C31092 * C479 - C31090 * C498 + C31093 * C485 - C47481 * C501) *
                 C47110) *
                C4717 +
            ((C37465 - C37466 + C37467 - C37468) * C21355 +
             (C37469 - C37470 + C37471 - C37472) * C47110) *
                C47479) *
               C1789 +
           (((C31090 * C484 - C31092 * C471 + C47481 * C1974 - C31093 * C1968) *
                 C21355 +
             (C31090 * C501 - C31092 * C485 + C47481 * C1986 - C31093 * C1975) *
                 C47110) *
                C4717 +
            ((C37863 - C37864 + C37865 - C37866) * C21355 +
             (C37867 - C37868 + C37869 - C37870) * C47110) *
                C47479) *
               C47464) *
              C47163 * C47497 +
          ((((C31096 - C31095 + C31098 - C31097) * C21355 +
             (C31100 - C31099 + C31102 - C31101) * C47110) *
                C4717 +
            ((C31273 - C31274 + C31275 - C31276) * C21355 +
             (C31277 - C31278 + C31279 - C31280) * C47110) *
                C47479) *
               C1788 +
           (((C31452 - C31451 + C31454 - C31453) * C21355 +
             (C31456 - C31455 + C31458 - C31457) * C47110) *
                C4717 +
            ((C31953 - C31954 + C31955 - C31956) * C21355 +
             (C31957 - C31958 + C31959 - C31960) * C47110) *
                C47479) *
               C1789 +
           (((C31460 - C31459 + C31462 - C31461) * C21355 +
             (C31464 - C31463 + C31466 - C31465) * C47110) *
                C4717 +
            ((C33381 - C33382 + C33383 - C33384) * C21355 +
             (C33385 - C33386 + C33387 - C33388) * C47110) *
                C47479) *
               C47464) *
              C47163 * C47484 +
          ((((C31104 - C31103 + C31106 - C31105) * C21355 +
             (C31108 - C31107 + C31110 - C31109) * C47110) *
                C4717 +
            ((C31289 - C31290 + C31291 - C31292) * C21355 +
             (C31293 - C31294 + C31295 - C31296) * C47110) *
                C47479) *
               C1788 +
           (((C31468 - C31467 + C31470 - C31469) * C21355 +
             (C31472 - C31471 + C31474 - C31473) * C47110) *
                C4717 +
            ((C31961 - C31962 + C31963 - C31964) * C21355 +
             (C31965 - C31966 + C31967 - C31968) * C47110) *
                C47479) *
               C1789 +
           (((C31476 - C31475 + C31478 - C31477) * C21355 +
             (C31480 - C31479 + C31482 - C31481) * C47110) *
                C4717 +
            ((C31090 * C1271 - C31092 * C1260 + C47481 * C2369 -
              C31093 * C2364) *
                 C21355 +
             (C31090 * C1287 - C31092 * C1272 + C47481 * C2373 -
              C31093 * C2370) *
                 C47110) *
                C47479) *
               C47464) *
              C47163 * C47455)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C31090 * C124 - C31092 * C117 + C47481 * C478 - C31093 * C468) *
                 C21355 +
             (C31090 * C138 - C31092 * C125 + C47481 * C498 - C31093 * C479) *
                 C47110) *
                C4717 +
            ((C36849 - C36850 + C36851 - C36852) * C21355 +
             (C36853 - C36854 + C36855 - C36856) * C47110) *
                C47479) *
               C1788 +
           (((C31092 * C468 - C31090 * C478 + C31093 * C471 - C47481 * C484) *
                 C21355 +
             (C31092 * C479 - C31090 * C498 + C31093 * C485 - C47481 * C501) *
                 C47110) *
                C4717 +
            ((C37465 - C37466 + C37467 - C37468) * C21355 +
             (C37469 - C37470 + C37471 - C37472) * C47110) *
                C47479) *
               C1789 +
           (((C31090 * C484 - C31092 * C471 + C47481 * C1974 - C31093 * C1968) *
                 C21355 +
             (C31090 * C501 - C31092 * C485 + C47481 * C1986 - C31093 * C1975) *
                 C47110) *
                C4717 +
            ((C37863 - C37864 + C37865 - C37866) * C21355 +
             (C37867 - C37868 + C37869 - C37870) * C47110) *
                C47479) *
               C47464) *
              C47500 +
          ((((C36850 - C36849 + C36852 - C36851) * C21355 +
             (C36854 - C36853 + C36856 - C36855) * C47110) *
                C4717 +
            ((C36857 - C36858 + C36859 - C36860) * C21355 +
             (C36861 - C36862 + C36863 - C36864) * C47110) *
                C47479) *
               C1788 +
           (((C37466 - C37465 + C37468 - C37467) * C21355 +
             (C37470 - C37469 + C37472 - C37471) * C47110) *
                C4717 +
            ((C37871 - C37872 + C37873 - C37874) * C21355 +
             (C37875 - C37876 + C37877 - C37878) * C47110) *
                C47479) *
               C1789 +
           (((C37864 - C37863 + C37866 - C37865) * C21355 +
             (C37868 - C37867 + C37870 - C37869) * C47110) *
                C4717 +
            ((C37879 - C37880 + C37881 - C37882) * C21355 +
             (C37883 - C37884 + C37885 - C37886) * C47110) *
                C47479) *
               C47464) *
              C47488 +
          ((((C36858 - C36857 + C36860 - C36859) * C21355 +
             (C36862 - C36861 + C36864 - C36863) * C47110) *
                C4717 +
            ((C37701 - C37702 + C37703 - C37704) * C21355 +
             (C37705 - C37706 + C37707 - C37708) * C47110) *
                C47479) *
               C1788 +
           (((C37872 - C37871 + C37874 - C37873) * C21355 +
             (C37876 - C37875 + C37878 - C37877) * C47110) *
                C4717 +
            ((C38341 - C38342 + C38343 - C38344) * C21355 +
             (C38345 - C38346 + C38347 - C38348) * C47110) *
                C47479) *
               C1789 +
           (((C37880 - C37879 + C37882 - C37881) * C21355 +
             (C37884 - C37883 + C37886 - C37885) * C47110) *
                C4717 +
            ((C31090 * C5895 - C31092 * C5893 + C47481 * C23237 -
              C31093 * C23236) *
                 C21355 +
             (C31090 * C5899 - C31092 * C5896 + C47481 * C23239 -
              C31093 * C23238) *
                 C47110) *
                C47479) *
               C47464) *
              C47461) *
         C47135) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C31090 * C124 - C31092 * C117 + C47481 * C478 - C31093 * C468) *
                C21355 +
            (C31090 * C138 - C31092 * C125 + C47481 * C498 - C31093 * C479) *
                C47110) *
               C4717 +
           ((C36849 - C36850 + C36851 - C36852) * C21355 +
            (C36853 - C36854 + C36855 - C36856) * C47110) *
               C47479) *
              C1963 +
          (((C31092 * C468 - C31090 * C478 + C31093 * C471 - C47481 * C484) *
                C21355 +
            (C31092 * C479 - C31090 * C498 + C31093 * C485 - C47481 * C501) *
                C47110) *
               C4717 +
           ((C37465 - C37466 + C37467 - C37468) * C21355 +
            (C37469 - C37470 + C37471 - C37472) * C47110) *
               C47479) *
              C1964 +
          (((C31090 * C484 - C31092 * C471 + C47481 * C1974 - C31093 * C1968) *
                C21355 +
            (C31090 * C501 - C31092 * C485 + C47481 * C1986 - C31093 * C1975) *
                C47110) *
               C4717 +
           ((C37863 - C37864 + C37865 - C37866) * C21355 +
            (C37867 - C37868 + C37869 - C37870) * C47110) *
               C47479) *
              C1965 +
          (((C31092 * C1968 - C31090 * C1974 + C31093 * C1971 -
             C47481 * C1980) *
                C21355 +
            (C31092 * C1975 - C31090 * C1986 + C31093 * C1981 -
             C47481 * C1989) *
                C47110) *
               C4717 +
           ((C31092 * C2362 - C31090 * C2365 + C31093 * C6769 -
             C47481 * C6771) *
                C21355 +
            (C31092 * C2366 - C31090 * C2371 + C31093 * C6772 -
             C47481 * C6775) *
                C47110) *
               C47479) *
              C1966 +
          (((C31090 * C1980 - C31092 * C1971 + C47481 * C12395 -
             C31093 * C12393) *
                C21355 +
            (C31090 * C1989 - C31092 * C1981 + C47481 * C12399 -
             C31093 * C12396) *
                C47110) *
               C4717 +
           ((C31090 * C6771 - C31092 * C6769 + C47481 * C27579 -
             C31093 * C27578) *
                C21355 +
            (C31090 * C6775 - C31092 * C6772 + C47481 * C27581 -
             C31093 * C27580) *
                C47110) *
               C47479) *
              C1967) *
         C47163 * C47135) /
            (p * q * std::sqrt(p + q));
    d2ee[188] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C31090 * C124 - C31092 * C117 + C47481 * C478 - C31093 * C468) *
                  C21355 +
              (C31090 * C138 - C31092 * C125 + C47481 * C498 - C31093 * C479) *
                  C47110) *
                 C4717 +
             ((C36849 - C36850 + C36851 - C36852) * C21355 +
              (C36853 - C36854 + C36855 - C36856) * C47110) *
                 C47479) *
                C47430 +
            (((C31092 * C468 - C31090 * C478 + C31093 * C471 - C47481 * C484) *
                  C21355 +
              (C31092 * C479 - C31090 * C498 + C31093 * C485 - C47481 * C501) *
                  C47110) *
                 C4717 +
             ((C37465 - C37466 + C37467 - C37468) * C21355 +
              (C37469 - C37470 + C37471 - C37472) * C47110) *
                 C47479) *
                C47268) *
               C1050 +
           ((((C36850 - C36849 + C36852 - C36851) * C21355 +
              (C36854 - C36853 + C36856 - C36855) * C47110) *
                 C4717 +
             ((C36857 - C36858 + C36859 - C36860) * C21355 +
              (C36861 - C36862 + C36863 - C36864) * C47110) *
                 C47479) *
                C47430 +
            (((C37466 - C37465 + C37468 - C37467) * C21355 +
              (C37470 - C37469 + C37472 - C37471) * C47110) *
                 C4717 +
             ((C37871 - C37872 + C37873 - C37874) * C21355 +
              (C37875 - C37876 + C37877 - C37878) * C47110) *
                 C47479) *
                C47268) *
               C1051 +
           ((((C36858 - C36857 + C36860 - C36859) * C21355 +
              (C36862 - C36861 + C36864 - C36863) * C47110) *
                 C4717 +
             ((C37701 - C37702 + C37703 - C37704) * C21355 +
              (C37705 - C37706 + C37707 - C37708) * C47110) *
                 C47479) *
                C47430 +
            (((C37872 - C37871 + C37874 - C37873) * C21355 +
              (C37876 - C37875 + C37878 - C37877) * C47110) *
                 C4717 +
             ((C31092 * C1666 - C31090 * C1669 + C31093 * C5893 -
               C47481 * C5895) *
                  C21355 +
              (C31092 * C1670 - C31090 * C1675 + C31093 * C5896 -
               C47481 * C5899) *
                  C47110) *
                 C47479) *
                C47268) *
               C47461) *
              C47415 +
          (((((C31096 - C31095 + C31098 - C31097) * C21355 +
              (C31100 - C31099 + C31102 - C31101) * C47110) *
                 C4717 +
             ((C31273 - C31274 + C31275 - C31276) * C21355 +
              (C31277 - C31278 + C31279 - C31280) * C47110) *
                 C47479) *
                C47430 +
            (((C31452 - C31451 + C31454 - C31453) * C21355 +
              (C31456 - C31455 + C31458 - C31457) * C47110) *
                 C4717 +
             ((C31953 - C31954 + C31955 - C31956) * C21355 +
              (C31957 - C31958 + C31959 - C31960) * C47110) *
                 C47479) *
                C47268) *
               C1050 +
           ((((C31274 - C31273 + C31276 - C31275) * C21355 +
              (C31278 - C31277 + C31280 - C31279) * C47110) *
                 C4717 +
             ((C31281 - C31282 + C31283 - C31284) * C21355 +
              (C31285 - C31286 + C31287 - C31288) * C47110) *
                 C47479) *
                C47430 +
            (((C31954 - C31953 + C31956 - C31955) * C21355 +
              (C31958 - C31957 + C31960 - C31959) * C47110) *
                 C4717 +
             ((C32675 - C32676 + C32677 - C32678) * C21355 +
              (C32679 - C32680 + C32681 - C32682) * C47110) *
                 C47479) *
                C47268) *
               C1051 +
           ((((C31282 - C31281 + C31284 - C31283) * C21355 +
              (C31286 - C31285 + C31288 - C31287) * C47110) *
                 C4717 +
             ((C32473 - C32474 + C32475 - C32476) * C21355 +
              (C32477 - C32478 + C32479 - C32480) * C47110) *
                 C47479) *
                C47430 +
            (((C32676 - C32675 + C32678 - C32677) * C21355 +
              (C32680 - C32679 + C32682 - C32681) * C47110) *
                 C4717 +
             ((C31090 * C1671 - C31092 * C1667 + C47481 * C5897 -
               C31093 * C5894) *
                  C21355 +
              (C31090 * C1676 - C31092 * C1672 + C47481 * C5900 -
               C31093 * C5898) *
                  C47110) *
                 C47479) *
                C47268) *
               C47461) *
              C47146)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C31090 * C124 - C31092 * C117 + C47481 * C478 - C31093 * C468) *
                 C21355 +
             (C31090 * C138 - C31092 * C125 + C47481 * C498 - C31093 * C479) *
                 C47110) *
                C4717 +
            ((C36849 - C36850 + C36851 - C36852) * C21355 +
             (C36853 - C36854 + C36855 - C36856) * C47110) *
                C47479) *
               C47430 +
           (((C31092 * C468 - C31090 * C478 + C31093 * C471 - C47481 * C484) *
                 C21355 +
             (C31092 * C479 - C31090 * C498 + C31093 * C485 - C47481 * C501) *
                 C47110) *
                C4717 +
            ((C31092 * C906 - C31090 * C911 + C31093 * C1258 - C47481 * C1267) *
                 C21355 +
             (C31092 * C912 - C31090 * C921 + C31093 * C1268 - C47481 * C1285) *
                 C47110) *
                C47479) *
               C47268) *
              C47163 * C636 +
          ((((C31096 - C31095 + C31098 - C31097) * C21355 +
             (C31100 - C31099 + C31102 - C31101) * C47110) *
                C4717 +
            ((C31273 - C31274 + C31275 - C31276) * C21355 +
             (C31277 - C31278 + C31279 - C31280) * C47110) *
                C47479) *
               C47430 +
           (((C31452 - C31451 + C31454 - C31453) * C21355 +
             (C31456 - C31455 + C31458 - C31457) * C47110) *
                C4717 +
            ((C31953 - C31954 + C31955 - C31956) * C21355 +
             (C31957 - C31958 + C31959 - C31960) * C47110) *
                C47479) *
               C47268) *
              C47163 * C637 +
          ((((C31104 - C31103 + C31106 - C31105) * C21355 +
             (C31108 - C31107 + C31110 - C31109) * C47110) *
                C4717 +
            ((C31289 - C31290 + C31291 - C31292) * C21355 +
             (C31293 - C31294 + C31295 - C31296) * C47110) *
                C47479) *
               C47430 +
           (((C31468 - C31467 + C31470 - C31469) * C21355 +
             (C31472 - C31471 + C31474 - C31473) * C47110) *
                C4717 +
            ((C31961 - C31962 + C31963 - C31964) * C21355 +
             (C31965 - C31966 + C31967 - C31968) * C47110) *
                C47479) *
               C47268) *
              C47163 * C638 +
          ((((C31112 - C31111 + C31114 - C31113) * C21355 +
             (C31116 - C31115 + C31118 - C31117) * C47110) *
                C4717 +
            ((C31613 - C31614 + C31615 - C31616) * C21355 +
             (C31617 - C31618 + C31619 - C31620) * C47110) *
                C47479) *
               C47430 +
           (((C31752 - C31751 + C31754 - C31753) * C21355 +
             (C31756 - C31755 + C31758 - C31757) * C47110) *
                C4717 +
            ((C31090 * C917 - C31092 * C909 + C47481 * C2139 - C31093 * C2138) *
                 C21355 +
             (C31090 * C924 - C31092 * C918 + C47481 * C2141 - C31093 * C2140) *
                 C47110) *
                C47479) *
               C47268) *
              C47163 * C47465)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C31090 * C124 - C31092 * C117 + C47481 * C478 - C31093 * C468) *
                 C21355 +
             (C31090 * C138 - C31092 * C125 + C47481 * C498 - C31093 * C479) *
                 C47110) *
                C4717 +
            ((C36849 - C36850 + C36851 - C36852) * C21355 +
             (C36853 - C36854 + C36855 - C36856) * C47110) *
                C47479) *
               C2248 +
           (((C31092 * C468 - C31090 * C478 + C31093 * C471 - C47481 * C484) *
                 C21355 +
             (C31092 * C479 - C31090 * C498 + C31093 * C485 - C47481 * C501) *
                 C47110) *
                C4717 +
            ((C37465 - C37466 + C37467 - C37468) * C21355 +
             (C37469 - C37470 + C37471 - C37472) * C47110) *
                C47479) *
               C2249 +
           (((C31090 * C484 - C31092 * C471 + C47481 * C1974 - C31093 * C1968) *
                 C21355 +
             (C31090 * C501 - C31092 * C485 + C47481 * C1986 - C31093 * C1975) *
                 C47110) *
                C4717 +
            ((C37863 - C37864 + C37865 - C37866) * C21355 +
             (C37867 - C37868 + C37869 - C37870) * C47110) *
                C47479) *
               C2250 +
           (((C31092 * C1968 - C31090 * C1974 + C31093 * C1971 -
              C47481 * C1980) *
                 C21355 +
             (C31092 * C1975 - C31090 * C1986 + C31093 * C1981 -
              C47481 * C1989) *
                 C47110) *
                C4717 +
            ((C31092 * C2362 - C31090 * C2365 + C31093 * C6769 -
              C47481 * C6771) *
                 C21355 +
             (C31092 * C2366 - C31090 * C2371 + C31093 * C6772 -
              C47481 * C6775) *
                 C47110) *
                C47479) *
               C47477) *
              C47163 * C47415 +
          ((((C31096 - C31095 + C31098 - C31097) * C21355 +
             (C31100 - C31099 + C31102 - C31101) * C47110) *
                C4717 +
            ((C31273 - C31274 + C31275 - C31276) * C21355 +
             (C31277 - C31278 + C31279 - C31280) * C47110) *
                C47479) *
               C2248 +
           (((C31452 - C31451 + C31454 - C31453) * C21355 +
             (C31456 - C31455 + C31458 - C31457) * C47110) *
                C4717 +
            ((C31953 - C31954 + C31955 - C31956) * C21355 +
             (C31957 - C31958 + C31959 - C31960) * C47110) *
                C47479) *
               C2249 +
           (((C31460 - C31459 + C31462 - C31461) * C21355 +
             (C31464 - C31463 + C31466 - C31465) * C47110) *
                C4717 +
            ((C33381 - C33382 + C33383 - C33384) * C21355 +
             (C33385 - C33386 + C33387 - C33388) * C47110) *
                C47479) *
               C2250 +
           (((C33520 - C33519 + C33522 - C33521) * C21355 +
             (C33524 - C33523 + C33526 - C33525) * C47110) *
                C4717 +
            ((C31090 * C2367 - C31092 * C2363 + C47481 * C6773 -
              C31093 * C6770) *
                 C21355 +
             (C31090 * C2372 - C31092 * C2368 + C47481 * C6776 -
              C31093 * C6774) *
                 C47110) *
                C47479) *
               C47477) *
              C47163 * C47146)) /
            (p * q * std::sqrt(p + q));
    d2ee[189] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C31090 * C124 - C31092 * C117 + C47481 * C478 - C31093 * C468) *
                 C21355 +
             (C31090 * C138 - C31092 * C125 + C47481 * C498 - C31093 * C479) *
                 C47110) *
                C4717 +
            ((C36849 - C36850 + C36851 - C36852) * C21355 +
             (C36853 - C36854 + C36855 - C36856) * C47110) *
                C47479) *
               C47181 * C47500 +
           (((C36850 - C36849 + C36852 - C36851) * C21355 +
             (C36854 - C36853 + C36856 - C36855) * C47110) *
                C4717 +
            ((C36857 - C36858 + C36859 - C36860) * C21355 +
             (C36861 - C36862 + C36863 - C36864) * C47110) *
                C47479) *
               C47181 * C47488 +
           (((C36858 - C36857 + C36860 - C36859) * C21355 +
             (C36862 - C36861 + C36864 - C36863) * C47110) *
                C4717 +
            ((C31090 * C1130 - C31092 * C1124 + C47481 * C1669 -
              C31093 * C1666) *
                 C21355 +
             (C31090 * C1142 - C31092 * C1131 + C47481 * C1675 -
              C31093 * C1670) *
                 C47110) *
                C47479) *
               C47181 * C47461) *
              C284 +
          ((((C31096 - C31095 + C31098 - C31097) * C21355 +
             (C31100 - C31099 + C31102 - C31101) * C47110) *
                C4717 +
            ((C31273 - C31274 + C31275 - C31276) * C21355 +
             (C31277 - C31278 + C31279 - C31280) * C47110) *
                C47479) *
               C47181 * C47500 +
           (((C31274 - C31273 + C31276 - C31275) * C21355 +
             (C31278 - C31277 + C31280 - C31279) * C47110) *
                C4717 +
            ((C31281 - C31282 + C31283 - C31284) * C21355 +
             (C31285 - C31286 + C31287 - C31288) * C47110) *
                C47479) *
               C47181 * C47488 +
           (((C31282 - C31281 + C31284 - C31283) * C21355 +
             (C31286 - C31285 + C31288 - C31287) * C47110) *
                C4717 +
            ((C32473 - C32474 + C32475 - C32476) * C21355 +
             (C32477 - C32478 + C32479 - C32480) * C47110) *
                C47479) *
               C47181 * C47461) *
              C285 +
          ((((C31104 - C31103 + C31106 - C31105) * C21355 +
             (C31108 - C31107 + C31110 - C31109) * C47110) *
                C4717 +
            ((C31289 - C31290 + C31291 - C31292) * C21355 +
             (C31293 - C31294 + C31295 - C31296) * C47110) *
                C47479) *
               C47181 * C47500 +
           (((C31290 - C31289 + C31292 - C31291) * C21355 +
             (C31294 - C31293 + C31296 - C31295) * C47110) *
                C4717 +
            ((C31297 - C31298 + C31299 - C31300) * C21355 +
             (C31301 - C31302 + C31303 - C31304) * C47110) *
                C47479) *
               C47181 * C47488 +
           (((C31298 - C31297 + C31300 - C31299) * C21355 +
             (C31302 - C31301 + C31304 - C31303) * C47110) *
                C4717 +
            ((C31090 * C1134 - C31092 * C1126 + C47481 * C1673 -
              C31093 * C1668) *
                 C21355 +
             (C31090 * C1144 - C31092 * C1135 + C47481 * C1677 -
              C31093 * C1674) *
                 C47110) *
                C47479) *
               C47181 * C47461) *
              C47455)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C31090 * C124 - C31092 * C117 + C47481 * C478 - C31093 * C468) *
                C21355 +
            (C31090 * C138 - C31092 * C125 + C47481 * C498 - C31093 * C479) *
                C47110) *
               C4717 +
           ((C31090 * C297 - C31092 * C287 + C47481 * C911 - C31093 * C906) *
                C21355 +
            (C31090 * C317 - C31092 * C298 + C47481 * C921 - C31093 * C912) *
                C47110) *
               C47479) *
              C47181 * C47163 * C108 +
          (((C31096 - C31095 + C31098 - C31097) * C21355 +
            (C31100 - C31099 + C31102 - C31101) * C47110) *
               C4717 +
           ((C31273 - C31274 + C31275 - C31276) * C21355 +
            (C31277 - C31278 + C31279 - C31280) * C47110) *
               C47479) *
              C47181 * C47163 * C109 +
          (((C31104 - C31103 + C31106 - C31105) * C21355 +
            (C31108 - C31107 + C31110 - C31109) * C47110) *
               C4717 +
           ((C31289 - C31290 + C31291 - C31292) * C21355 +
            (C31293 - C31294 + C31295 - C31296) * C47110) *
               C47479) *
              C47181 * C47163 * C110 +
          (((C31112 - C31111 + C31114 - C31113) * C21355 +
            (C31116 - C31115 + C31118 - C31117) * C47110) *
               C4717 +
           ((C31613 - C31614 + C31615 - C31616) * C21355 +
            (C31617 - C31618 + C31619 - C31620) * C47110) *
               C47479) *
              C47181 * C47163 * C111 +
          (((C31120 - C31119 + C31122 - C31121) * C21355 +
            (C31124 - C31123 + C31126 - C31125) * C47110) *
               C4717 +
           ((C31090 * C313 - C31092 * C295 + C47481 * C919 - C31093 * C910) *
                C21355 +
            (C31090 * C325 - C31092 * C314 + C47481 * C925 - C31093 * C920) *
                C47110) *
               C47479) *
              C47181 * C47163 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C31090 * C124 - C31092 * C117 + C47481 * C478 - C31093 * C468) *
                 C21355 +
             (C31090 * C138 - C31092 * C125 + C47481 * C498 - C31093 * C479) *
                 C47110) *
                C4717 +
            ((C36849 - C36850 + C36851 - C36852) * C21355 +
             (C36853 - C36854 + C36855 - C36856) * C47110) *
                C47479) *
               C47181 * C1050 +
           (((C36850 - C36849 + C36852 - C36851) * C21355 +
             (C36854 - C36853 + C36856 - C36855) * C47110) *
                C4717 +
            ((C36857 - C36858 + C36859 - C36860) * C21355 +
             (C36861 - C36862 + C36863 - C36864) * C47110) *
                C47479) *
               C47181 * C1051 +
           (((C36858 - C36857 + C36860 - C36859) * C21355 +
             (C36862 - C36861 + C36864 - C36863) * C47110) *
                C4717 +
            ((C31090 * C1130 - C31092 * C1124 + C47481 * C1669 -
              C31093 * C1666) *
                 C21355 +
             (C31090 * C1142 - C31092 * C1131 + C47481 * C1675 -
              C31093 * C1670) *
                 C47110) *
                C47479) *
               C47181 * C47461) *
              C47497 +
          ((((C31096 - C31095 + C31098 - C31097) * C21355 +
             (C31100 - C31099 + C31102 - C31101) * C47110) *
                C4717 +
            ((C31273 - C31274 + C31275 - C31276) * C21355 +
             (C31277 - C31278 + C31279 - C31280) * C47110) *
                C47479) *
               C47181 * C1050 +
           (((C31274 - C31273 + C31276 - C31275) * C21355 +
             (C31278 - C31277 + C31280 - C31279) * C47110) *
                C4717 +
            ((C31281 - C31282 + C31283 - C31284) * C21355 +
             (C31285 - C31286 + C31287 - C31288) * C47110) *
                C47479) *
               C47181 * C1051 +
           (((C31282 - C31281 + C31284 - C31283) * C21355 +
             (C31286 - C31285 + C31288 - C31287) * C47110) *
                C4717 +
            ((C32473 - C32474 + C32475 - C32476) * C21355 +
             (C32477 - C32478 + C32479 - C32480) * C47110) *
                C47479) *
               C47181 * C47461) *
              C47484 +
          ((((C31104 - C31103 + C31106 - C31105) * C21355 +
             (C31108 - C31107 + C31110 - C31109) * C47110) *
                C4717 +
            ((C31289 - C31290 + C31291 - C31292) * C21355 +
             (C31293 - C31294 + C31295 - C31296) * C47110) *
                C47479) *
               C47181 * C1050 +
           (((C31290 - C31289 + C31292 - C31291) * C21355 +
             (C31294 - C31293 + C31296 - C31295) * C47110) *
                C4717 +
            ((C31297 - C31298 + C31299 - C31300) * C21355 +
             (C31301 - C31302 + C31303 - C31304) * C47110) *
                C47479) *
               C47181 * C1051 +
           (((C31298 - C31297 + C31300 - C31299) * C21355 +
             (C31302 - C31301 + C31304 - C31303) * C47110) *
                C4717 +
            ((C31090 * C1134 - C31092 * C1126 + C47481 * C1673 -
              C31093 * C1668) *
                 C21355 +
             (C31090 * C1144 - C31092 * C1135 + C47481 * C1677 -
              C31093 * C1674) *
                 C47110) *
                C47479) *
               C47181 * C47461) *
              C47455)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C31090 * C124 - C31092 * C117 + C47481 * C478 - C31093 * C468) *
                C21355 +
            (C31090 * C138 - C31092 * C125 + C47481 * C498 - C31093 * C479) *
                C47110) *
               C4717 +
           ((C36849 - C36850 + C36851 - C36852) * C21355 +
            (C36853 - C36854 + C36855 - C36856) * C47110) *
               C47479) *
              C47181 * C1118 +
          (((C36850 - C36849 + C36852 - C36851) * C21355 +
            (C36854 - C36853 + C36856 - C36855) * C47110) *
               C4717 +
           ((C36857 - C36858 + C36859 - C36860) * C21355 +
            (C36861 - C36862 + C36863 - C36864) * C47110) *
               C47479) *
              C47181 * C1119 +
          (((C36858 - C36857 + C36860 - C36859) * C21355 +
            (C36862 - C36861 + C36864 - C36863) * C47110) *
               C4717 +
           ((C37701 - C37702 + C37703 - C37704) * C21355 +
            (C37705 - C37706 + C37707 - C37708) * C47110) *
               C47479) *
              C47181 * C1120 +
          (((C37702 - C37701 + C37704 - C37703) * C21355 +
            (C37706 - C37705 + C37708 - C37707) * C47110) *
               C4717 +
           ((C37709 - C37710 + C37711 - C37712) * C21355 +
            (C37713 - C37714 + C37715 - C37716) * C47110) *
               C47479) *
              C47181 * C1121 +
          (((C37710 - C37709 + C37712 - C37711) * C21355 +
            (C37714 - C37713 + C37716 - C37715) * C47110) *
               C4717 +
           ((C31090 * C5729 - C31092 * C5727 + C47481 * C22596 -
             C31093 * C22595) *
                C21355 +
            (C31090 * C5733 - C31092 * C5730 + C47481 * C22598 -
             C31093 * C22597) *
                C47110) *
               C47479) *
              C47181 * C1122) *
         C47135) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C31090 * C124 - C31092 * C117 + C47481 * C478 - C31093 * C468) *
                 C21355 +
             (C31090 * C138 - C31092 * C125 + C47481 * C498 - C31093 * C479) *
                 C47110) *
                C4717 +
            ((C36849 - C36850 + C36851 - C36852) * C21355 +
             (C36853 - C36854 + C36855 - C36856) * C47110) *
                C47479) *
               C1788 +
           (((C31092 * C468 - C31090 * C478 + C31093 * C471 - C47481 * C484) *
                 C21355 +
             (C31092 * C479 - C31090 * C498 + C31093 * C485 - C47481 * C501) *
                 C47110) *
                C4717 +
            ((C37465 - C37466 + C37467 - C37468) * C21355 +
             (C37469 - C37470 + C37471 - C37472) * C47110) *
                C47479) *
               C1789 +
           (((C31090 * C484 - C31092 * C471 + C47481 * C1974 - C31093 * C1968) *
                 C21355 +
             (C31090 * C501 - C31092 * C485 + C47481 * C1986 - C31093 * C1975) *
                 C47110) *
                C4717 +
            ((C37863 - C37864 + C37865 - C37866) * C21355 +
             (C37867 - C37868 + C37869 - C37870) * C47110) *
                C47479) *
               C47464) *
              C47163 * C47497 +
          ((((C31096 - C31095 + C31098 - C31097) * C21355 +
             (C31100 - C31099 + C31102 - C31101) * C47110) *
                C4717 +
            ((C31273 - C31274 + C31275 - C31276) * C21355 +
             (C31277 - C31278 + C31279 - C31280) * C47110) *
                C47479) *
               C1788 +
           (((C31452 - C31451 + C31454 - C31453) * C21355 +
             (C31456 - C31455 + C31458 - C31457) * C47110) *
                C4717 +
            ((C31953 - C31954 + C31955 - C31956) * C21355 +
             (C31957 - C31958 + C31959 - C31960) * C47110) *
                C47479) *
               C1789 +
           (((C31460 - C31459 + C31462 - C31461) * C21355 +
             (C31464 - C31463 + C31466 - C31465) * C47110) *
                C4717 +
            ((C33381 - C33382 + C33383 - C33384) * C21355 +
             (C33385 - C33386 + C33387 - C33388) * C47110) *
                C47479) *
               C47464) *
              C47163 * C47484 +
          ((((C31104 - C31103 + C31106 - C31105) * C21355 +
             (C31108 - C31107 + C31110 - C31109) * C47110) *
                C4717 +
            ((C31289 - C31290 + C31291 - C31292) * C21355 +
             (C31293 - C31294 + C31295 - C31296) * C47110) *
                C47479) *
               C1788 +
           (((C31468 - C31467 + C31470 - C31469) * C21355 +
             (C31472 - C31471 + C31474 - C31473) * C47110) *
                C4717 +
            ((C31961 - C31962 + C31963 - C31964) * C21355 +
             (C31965 - C31966 + C31967 - C31968) * C47110) *
                C47479) *
               C1789 +
           (((C31476 - C31475 + C31478 - C31477) * C21355 +
             (C31480 - C31479 + C31482 - C31481) * C47110) *
                C4717 +
            ((C31090 * C1271 - C31092 * C1260 + C47481 * C2369 -
              C31093 * C2364) *
                 C21355 +
             (C31090 * C1287 - C31092 * C1272 + C47481 * C2373 -
              C31093 * C2370) *
                 C47110) *
                C47479) *
               C47464) *
              C47163 * C47455)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C31090 * C124 - C31092 * C117 + C47481 * C478 - C31093 * C468) *
                 C21355 +
             (C31090 * C138 - C31092 * C125 + C47481 * C498 - C31093 * C479) *
                 C47110) *
                C4717 +
            ((C36849 - C36850 + C36851 - C36852) * C21355 +
             (C36853 - C36854 + C36855 - C36856) * C47110) *
                C47479) *
               C1788 +
           (((C31092 * C468 - C31090 * C478 + C31093 * C471 - C47481 * C484) *
                 C21355 +
             (C31092 * C479 - C31090 * C498 + C31093 * C485 - C47481 * C501) *
                 C47110) *
                C4717 +
            ((C37465 - C37466 + C37467 - C37468) * C21355 +
             (C37469 - C37470 + C37471 - C37472) * C47110) *
                C47479) *
               C1789 +
           (((C31090 * C484 - C31092 * C471 + C47481 * C1974 - C31093 * C1968) *
                 C21355 +
             (C31090 * C501 - C31092 * C485 + C47481 * C1986 - C31093 * C1975) *
                 C47110) *
                C4717 +
            ((C37863 - C37864 + C37865 - C37866) * C21355 +
             (C37867 - C37868 + C37869 - C37870) * C47110) *
                C47479) *
               C47464) *
              C47500 +
          ((((C36850 - C36849 + C36852 - C36851) * C21355 +
             (C36854 - C36853 + C36856 - C36855) * C47110) *
                C4717 +
            ((C36857 - C36858 + C36859 - C36860) * C21355 +
             (C36861 - C36862 + C36863 - C36864) * C47110) *
                C47479) *
               C1788 +
           (((C37466 - C37465 + C37468 - C37467) * C21355 +
             (C37470 - C37469 + C37472 - C37471) * C47110) *
                C4717 +
            ((C37871 - C37872 + C37873 - C37874) * C21355 +
             (C37875 - C37876 + C37877 - C37878) * C47110) *
                C47479) *
               C1789 +
           (((C37864 - C37863 + C37866 - C37865) * C21355 +
             (C37868 - C37867 + C37870 - C37869) * C47110) *
                C4717 +
            ((C37879 - C37880 + C37881 - C37882) * C21355 +
             (C37883 - C37884 + C37885 - C37886) * C47110) *
                C47479) *
               C47464) *
              C47488 +
          ((((C36858 - C36857 + C36860 - C36859) * C21355 +
             (C36862 - C36861 + C36864 - C36863) * C47110) *
                C4717 +
            ((C37701 - C37702 + C37703 - C37704) * C21355 +
             (C37705 - C37706 + C37707 - C37708) * C47110) *
                C47479) *
               C1788 +
           (((C37872 - C37871 + C37874 - C37873) * C21355 +
             (C37876 - C37875 + C37878 - C37877) * C47110) *
                C4717 +
            ((C38341 - C38342 + C38343 - C38344) * C21355 +
             (C38345 - C38346 + C38347 - C38348) * C47110) *
                C47479) *
               C1789 +
           (((C37880 - C37879 + C37882 - C37881) * C21355 +
             (C37884 - C37883 + C37886 - C37885) * C47110) *
                C4717 +
            ((C31090 * C5895 - C31092 * C5893 + C47481 * C23237 -
              C31093 * C23236) *
                 C21355 +
             (C31090 * C5899 - C31092 * C5896 + C47481 * C23239 -
              C31093 * C23238) *
                 C47110) *
                C47479) *
               C47464) *
              C47461) *
         C47135) /
            (p * q * std::sqrt(p + q));
    d2ee[190] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C31090 * C124 - C31092 * C117 + C47481 * C478 - C31093 * C468) *
                  C21355 +
              (C31090 * C138 - C31092 * C125 + C47481 * C498 - C31093 * C479) *
                  C47110) *
                 C4717 +
             ((C36849 - C36850 + C36851 - C36852) * C21355 +
              (C36853 - C36854 + C36855 - C36856) * C47110) *
                 C47479) *
                C3234 +
            (((C31092 * C468 - C31090 * C478 + C31093 * C471 - C47481 * C484) *
                  C21355 +
              (C31092 * C479 - C31090 * C498 + C31093 * C485 - C47481 * C501) *
                  C47110) *
                 C4717 +
             ((C37465 - C37466 + C37467 - C37468) * C21355 +
              (C37469 - C37470 + C37471 - C37472) * C47110) *
                 C47479) *
                C47268) *
               C47429 +
           ((((C36850 - C36849 + C36852 - C36851) * C21355 +
              (C36854 - C36853 + C36856 - C36855) * C47110) *
                 C4717 +
             ((C36857 - C36858 + C36859 - C36860) * C21355 +
              (C36861 - C36862 + C36863 - C36864) * C47110) *
                 C47479) *
                C3234 +
            (((C37466 - C37465 + C37468 - C37467) * C21355 +
              (C37470 - C37469 + C37472 - C37471) * C47110) *
                 C4717 +
             ((C37871 - C37872 + C37873 - C37874) * C21355 +
              (C37875 - C37876 + C37877 - C37878) * C47110) *
                 C47479) *
                C47268) *
               C47226) *
              C47140 +
          (((((C31096 - C31095 + C31098 - C31097) * C21355 +
              (C31100 - C31099 + C31102 - C31101) * C47110) *
                 C4717 +
             ((C31273 - C31274 + C31275 - C31276) * C21355 +
              (C31277 - C31278 + C31279 - C31280) * C47110) *
                 C47479) *
                C3234 +
            (((C31452 - C31451 + C31454 - C31453) * C21355 +
              (C31456 - C31455 + C31458 - C31457) * C47110) *
                 C4717 +
             ((C31953 - C31954 + C31955 - C31956) * C21355 +
              (C31957 - C31958 + C31959 - C31960) * C47110) *
                 C47479) *
                C47268) *
               C47429 +
           ((((C31274 - C31273 + C31276 - C31275) * C21355 +
              (C31278 - C31277 + C31280 - C31279) * C47110) *
                 C4717 +
             ((C31281 - C31282 + C31283 - C31284) * C21355 +
              (C31285 - C31286 + C31287 - C31288) * C47110) *
                 C47479) *
                C3234 +
            (((C31954 - C31953 + C31956 - C31955) * C21355 +
              (C31958 - C31957 + C31960 - C31959) * C47110) *
                 C4717 +
             ((C32675 - C32676 + C32677 - C32678) * C21355 +
              (C32679 - C32680 + C32681 - C32682) * C47110) *
                 C47479) *
                C47268) *
               C47226) *
              C47149 +
          (((((C31104 - C31103 + C31106 - C31105) * C21355 +
              (C31108 - C31107 + C31110 - C31109) * C47110) *
                 C4717 +
             ((C31289 - C31290 + C31291 - C31292) * C21355 +
              (C31293 - C31294 + C31295 - C31296) * C47110) *
                 C47479) *
                C3234 +
            (((C31468 - C31467 + C31470 - C31469) * C21355 +
              (C31472 - C31471 + C31474 - C31473) * C47110) *
                 C4717 +
             ((C31961 - C31962 + C31963 - C31964) * C21355 +
              (C31965 - C31966 + C31967 - C31968) * C47110) *
                 C47479) *
                C47268) *
               C47429 +
           ((((C31290 - C31289 + C31292 - C31291) * C21355 +
              (C31294 - C31293 + C31296 - C31295) * C47110) *
                 C4717 +
             ((C31297 - C31298 + C31299 - C31300) * C21355 +
              (C31301 - C31302 + C31303 - C31304) * C47110) *
                 C47479) *
                C3234 +
            (((C31962 - C31961 + C31964 - C31963) * C21355 +
              (C31966 - C31965 + C31968 - C31967) * C47110) *
                 C4717 +
             ((C31090 * C1277 - C31092 * C1263 + C47481 * C1283 -
               C31093 * C1266) *
                  C21355 +
              (C31090 * C1290 - C31092 * C1278 + C47481 * C1293 -
               C31093 * C1284) *
                  C47110) *
                 C47479) *
                C47268) *
               C47226) *
              C2843)) /
        (p * q * std::sqrt(p + q));
    d2ee[191] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C31090 * C124 - C31092 * C117 + C47481 * C478 - C31093 * C468) *
                  C21355 +
              (C31090 * C138 - C31092 * C125 + C47481 * C498 - C31093 * C479) *
                  C47110) *
                 C4717 +
             ((C36849 - C36850 + C36851 - C36852) * C21355 +
              (C36853 - C36854 + C36855 - C36856) * C47110) *
                 C47479) *
                C47264 +
            (((C31092 * C468 - C31090 * C478 + C31093 * C471 - C47481 * C484) *
                  C21355 +
              (C31092 * C479 - C31090 * C498 + C31093 * C485 - C47481 * C501) *
                  C47110) *
                 C4717 +
             ((C37465 - C37466 + C37467 - C37468) * C21355 +
              (C37469 - C37470 + C37471 - C37472) * C47110) *
                 C47479) *
                C47271 +
            (((C31090 * C484 - C31092 * C471 + C47481 * C1974 -
               C31093 * C1968) *
                  C21355 +
              (C31090 * C501 - C31092 * C485 + C47481 * C1986 -
               C31093 * C1975) *
                  C47110) *
                 C4717 +
             ((C37863 - C37864 + C37865 - C37866) * C21355 +
              (C37867 - C37868 + C37869 - C37870) * C47110) *
                 C47479) *
                C3742) *
               C47429 +
           ((((C36850 - C36849 + C36852 - C36851) * C21355 +
              (C36854 - C36853 + C36856 - C36855) * C47110) *
                 C4717 +
             ((C36857 - C36858 + C36859 - C36860) * C21355 +
              (C36861 - C36862 + C36863 - C36864) * C47110) *
                 C47479) *
                C47264 +
            (((C37466 - C37465 + C37468 - C37467) * C21355 +
              (C37470 - C37469 + C37472 - C37471) * C47110) *
                 C4717 +
             ((C37871 - C37872 + C37873 - C37874) * C21355 +
              (C37875 - C37876 + C37877 - C37878) * C47110) *
                 C47479) *
                C47271 +
            (((C37864 - C37863 + C37866 - C37865) * C21355 +
              (C37868 - C37867 + C37870 - C37869) * C47110) *
                 C4717 +
             ((C37879 - C37880 + C37881 - C37882) * C21355 +
              (C37883 - C37884 + C37885 - C37886) * C47110) *
                 C47479) *
                C3742) *
               C47226) *
              C2580 +
          (((((C31096 - C31095 + C31098 - C31097) * C21355 +
              (C31100 - C31099 + C31102 - C31101) * C47110) *
                 C4717 +
             ((C31273 - C31274 + C31275 - C31276) * C21355 +
              (C31277 - C31278 + C31279 - C31280) * C47110) *
                 C47479) *
                C47264 +
            (((C31452 - C31451 + C31454 - C31453) * C21355 +
              (C31456 - C31455 + C31458 - C31457) * C47110) *
                 C4717 +
             ((C31953 - C31954 + C31955 - C31956) * C21355 +
              (C31957 - C31958 + C31959 - C31960) * C47110) *
                 C47479) *
                C47271 +
            (((C31460 - C31459 + C31462 - C31461) * C21355 +
              (C31464 - C31463 + C31466 - C31465) * C47110) *
                 C4717 +
             ((C33381 - C33382 + C33383 - C33384) * C21355 +
              (C33385 - C33386 + C33387 - C33388) * C47110) *
                 C47479) *
                C3742) *
               C47429 +
           ((((C31274 - C31273 + C31276 - C31275) * C21355 +
              (C31278 - C31277 + C31280 - C31279) * C47110) *
                 C4717 +
             ((C31281 - C31282 + C31283 - C31284) * C21355 +
              (C31285 - C31286 + C31287 - C31288) * C47110) *
                 C47479) *
                C47264 +
            (((C31954 - C31953 + C31956 - C31955) * C21355 +
              (C31958 - C31957 + C31960 - C31959) * C47110) *
                 C4717 +
             ((C32675 - C32676 + C32677 - C32678) * C21355 +
              (C32679 - C32680 + C32681 - C32682) * C47110) *
                 C47479) *
                C47271 +
            (((C33382 - C33381 + C33384 - C33383) * C21355 +
              (C33386 - C33385 + C33388 - C33387) * C47110) *
                 C4717 +
             ((C31090 * C1281 - C31092 * C1265 + C47481 * C7243 -
               C31093 * C7240) *
                  C21355 +
              (C31090 * C1292 - C31092 * C1282 + C47481 * C7246 -
               C31093 * C7244) *
                  C47110) *
                 C47479) *
                C3742) *
               C47226) *
              C47146)) /
        (p * q * std::sqrt(p + q));
    d2ee[192] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C31090 * C124 - C31092 * C117 + C47481 * C478 - C31093 * C468) *
                  C21355 +
              (C31090 * C138 - C31092 * C125 + C47481 * C498 - C31093 * C479) *
                  C47110) *
                 C4717 +
             ((C36849 - C36850 + C36851 - C36852) * C21355 +
              (C36853 - C36854 + C36855 - C36856) * C47110) *
                 C47479) *
                C3234 +
            (((C31092 * C468 - C31090 * C478 + C31093 * C471 - C47481 * C484) *
                  C21355 +
              (C31092 * C479 - C31090 * C498 + C31093 * C485 - C47481 * C501) *
                  C47110) *
                 C4717 +
             ((C37465 - C37466 + C37467 - C37468) * C21355 +
              (C37469 - C37470 + C37471 - C37472) * C47110) *
                 C47479) *
                C47268) *
               C47500 +
           ((((C36850 - C36849 + C36852 - C36851) * C21355 +
              (C36854 - C36853 + C36856 - C36855) * C47110) *
                 C4717 +
             ((C36857 - C36858 + C36859 - C36860) * C21355 +
              (C36861 - C36862 + C36863 - C36864) * C47110) *
                 C47479) *
                C3234 +
            (((C37466 - C37465 + C37468 - C37467) * C21355 +
              (C37470 - C37469 + C37472 - C37471) * C47110) *
                 C4717 +
             ((C37871 - C37872 + C37873 - C37874) * C21355 +
              (C37875 - C37876 + C37877 - C37878) * C47110) *
                 C47479) *
                C47268) *
               C47488 +
           ((((C36858 - C36857 + C36860 - C36859) * C21355 +
              (C36862 - C36861 + C36864 - C36863) * C47110) *
                 C4717 +
             ((C37701 - C37702 + C37703 - C37704) * C21355 +
              (C37705 - C37706 + C37707 - C37708) * C47110) *
                 C47479) *
                C3234 +
            (((C37872 - C37871 + C37874 - C37873) * C21355 +
              (C37876 - C37875 + C37878 - C37877) * C47110) *
                 C4717 +
             ((C38341 - C38342 + C38343 - C38344) * C21355 +
              (C38345 - C38346 + C38347 - C38348) * C47110) *
                 C47479) *
                C47268) *
               C47461) *
              C2580 +
          (((((C31096 - C31095 + C31098 - C31097) * C21355 +
              (C31100 - C31099 + C31102 - C31101) * C47110) *
                 C4717 +
             ((C31273 - C31274 + C31275 - C31276) * C21355 +
              (C31277 - C31278 + C31279 - C31280) * C47110) *
                 C47479) *
                C3234 +
            (((C31452 - C31451 + C31454 - C31453) * C21355 +
              (C31456 - C31455 + C31458 - C31457) * C47110) *
                 C4717 +
             ((C31953 - C31954 + C31955 - C31956) * C21355 +
              (C31957 - C31958 + C31959 - C31960) * C47110) *
                 C47479) *
                C47268) *
               C47500 +
           ((((C31274 - C31273 + C31276 - C31275) * C21355 +
              (C31278 - C31277 + C31280 - C31279) * C47110) *
                 C4717 +
             ((C31281 - C31282 + C31283 - C31284) * C21355 +
              (C31285 - C31286 + C31287 - C31288) * C47110) *
                 C47479) *
                C3234 +
            (((C31954 - C31953 + C31956 - C31955) * C21355 +
              (C31958 - C31957 + C31960 - C31959) * C47110) *
                 C4717 +
             ((C32675 - C32676 + C32677 - C32678) * C21355 +
              (C32679 - C32680 + C32681 - C32682) * C47110) *
                 C47479) *
                C47268) *
               C47488 +
           ((((C31282 - C31281 + C31284 - C31283) * C21355 +
              (C31286 - C31285 + C31288 - C31287) * C47110) *
                 C4717 +
             ((C32473 - C32474 + C32475 - C32476) * C21355 +
              (C32477 - C32478 + C32479 - C32480) * C47110) *
                 C47479) *
                C3234 +
            (((C32676 - C32675 + C32678 - C32677) * C21355 +
              (C32680 - C32679 + C32682 - C32681) * C47110) *
                 C4717 +
             ((C31090 * C1671 - C31092 * C1667 + C47481 * C5897 -
               C31093 * C5894) *
                  C21355 +
              (C31090 * C1676 - C31092 * C1672 + C47481 * C5900 -
               C31093 * C5898) *
                  C47110) *
                 C47479) *
                C47268) *
               C47461) *
              C47146)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C31090 * C124 - C31092 * C117 + C47481 * C478 - C31093 * C468) *
                 C21355 +
             (C31090 * C138 - C31092 * C125 + C47481 * C498 - C31093 * C479) *
                 C47110) *
                C4717 +
            ((C36849 - C36850 + C36851 - C36852) * C21355 +
             (C36853 - C36854 + C36855 - C36856) * C47110) *
                C47479) *
               C3234 +
           (((C31092 * C468 - C31090 * C478 + C31093 * C471 - C47481 * C484) *
                 C21355 +
             (C31092 * C479 - C31090 * C498 + C31093 * C485 - C47481 * C501) *
                 C47110) *
                C4717 +
            ((C37465 - C37466 + C37467 - C37468) * C21355 +
             (C37469 - C37470 + C37471 - C37472) * C47110) *
                C47479) *
               C47268) *
              C47163 * C47506 +
          ((((C31096 - C31095 + C31098 - C31097) * C21355 +
             (C31100 - C31099 + C31102 - C31101) * C47110) *
                C4717 +
            ((C31273 - C31274 + C31275 - C31276) * C21355 +
             (C31277 - C31278 + C31279 - C31280) * C47110) *
                C47479) *
               C3234 +
           (((C31452 - C31451 + C31454 - C31453) * C21355 +
             (C31456 - C31455 + C31458 - C31457) * C47110) *
                C4717 +
            ((C31953 - C31954 + C31955 - C31956) * C21355 +
             (C31957 - C31958 + C31959 - C31960) * C47110) *
                C47479) *
               C47268) *
              C47163 * C47499 +
          ((((C31104 - C31103 + C31106 - C31105) * C21355 +
             (C31108 - C31107 + C31110 - C31109) * C47110) *
                C4717 +
            ((C31289 - C31290 + C31291 - C31292) * C21355 +
             (C31293 - C31294 + C31295 - C31296) * C47110) *
                C47479) *
               C3234 +
           (((C31468 - C31467 + C31470 - C31469) * C21355 +
             (C31472 - C31471 + C31474 - C31473) * C47110) *
                C4717 +
            ((C31961 - C31962 + C31963 - C31964) * C21355 +
             (C31965 - C31966 + C31967 - C31968) * C47110) *
                C47479) *
               C47268) *
              C47163 * C47486 +
          ((((C31112 - C31111 + C31114 - C31113) * C21355 +
             (C31116 - C31115 + C31118 - C31117) * C47110) *
                C4717 +
            ((C31613 - C31614 + C31615 - C31616) * C21355 +
             (C31617 - C31618 + C31619 - C31620) * C47110) *
                C47479) *
               C3234 +
           (((C31752 - C31751 + C31754 - C31753) * C21355 +
             (C31756 - C31755 + C31758 - C31757) * C47110) *
                C4717 +
            ((C31090 * C917 - C31092 * C909 + C47481 * C2139 - C31093 * C2138) *
                 C21355 +
             (C31090 * C924 - C31092 * C918 + C47481 * C2141 - C31093 * C2140) *
                 C47110) *
                C47479) *
               C47268) *
              C47163 * C47465)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C31090 * C124 - C31092 * C117 + C47481 * C478 - C31093 * C468) *
                 C21355 +
             (C31090 * C138 - C31092 * C125 + C47481 * C498 - C31093 * C479) *
                 C47110) *
                C4717 +
            ((C36849 - C36850 + C36851 - C36852) * C21355 +
             (C36853 - C36854 + C36855 - C36856) * C47110) *
                C47479) *
               C47508 +
           (((C31092 * C468 - C31090 * C478 + C31093 * C471 - C47481 * C484) *
                 C21355 +
             (C31092 * C479 - C31090 * C498 + C31093 * C485 - C47481 * C501) *
                 C47110) *
                C4717 +
            ((C37465 - C37466 + C37467 - C37468) * C21355 +
             (C37469 - C37470 + C37471 - C37472) * C47110) *
                C47479) *
               C47505 +
           (((C31090 * C484 - C31092 * C471 + C47481 * C1974 - C31093 * C1968) *
                 C21355 +
             (C31090 * C501 - C31092 * C485 + C47481 * C1986 - C31093 * C1975) *
                 C47110) *
                C4717 +
            ((C37863 - C37864 + C37865 - C37866) * C21355 +
             (C37867 - C37868 + C37869 - C37870) * C47110) *
                C47479) *
               C47496 +
           (((C31092 * C1968 - C31090 * C1974 + C31093 * C1971 -
              C47481 * C1980) *
                 C21355 +
             (C31092 * C1975 - C31090 * C1986 + C31093 * C1981 -
              C47481 * C1989) *
                 C47110) *
                C4717 +
            ((C39177 - C39178 + C39179 - C39180) * C21355 +
             (C39181 - C39182 + C39183 - C39184) * C47110) *
                C47479) *
               C47477) *
              C47163 * C2580 +
          ((((C31096 - C31095 + C31098 - C31097) * C21355 +
             (C31100 - C31099 + C31102 - C31101) * C47110) *
                C4717 +
            ((C31273 - C31274 + C31275 - C31276) * C21355 +
             (C31277 - C31278 + C31279 - C31280) * C47110) *
                C47479) *
               C47508 +
           (((C31452 - C31451 + C31454 - C31453) * C21355 +
             (C31456 - C31455 + C31458 - C31457) * C47110) *
                C4717 +
            ((C31953 - C31954 + C31955 - C31956) * C21355 +
             (C31957 - C31958 + C31959 - C31960) * C47110) *
                C47479) *
               C47505 +
           (((C31460 - C31459 + C31462 - C31461) * C21355 +
             (C31464 - C31463 + C31466 - C31465) * C47110) *
                C4717 +
            ((C33381 - C33382 + C33383 - C33384) * C21355 +
             (C33385 - C33386 + C33387 - C33388) * C47110) *
                C47479) *
               C47496 +
           (((C33520 - C33519 + C33522 - C33521) * C21355 +
             (C33524 - C33523 + C33526 - C33525) * C47110) *
                C4717 +
            ((C31090 * C2367 - C31092 * C2363 + C47481 * C6773 -
              C31093 * C6770) *
                 C21355 +
             (C31090 * C2372 - C31092 * C2368 + C47481 * C6776 -
              C31093 * C6774) *
                 C47110) *
                C47479) *
               C47477) *
              C47163 * C47146)) /
            (p * q * std::sqrt(p + q));
    d2ee[193] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C31090 * C124 - C31092 * C117 + C47481 * C478 - C31093 * C468) *
                 C21355 +
             (C31090 * C138 - C31092 * C125 + C47481 * C498 - C31093 * C479) *
                 C47110) *
                C4717 +
            ((C36849 - C36850 + C36851 - C36852) * C21355 +
             (C36853 - C36854 + C36855 - C36856) * C47110) *
                C47479) *
               C47264 +
           (((C31092 * C468 - C31090 * C478 + C31093 * C471 - C47481 * C484) *
                 C21355 +
             (C31092 * C479 - C31090 * C498 + C31093 * C485 - C47481 * C501) *
                 C47110) *
                C4717 +
            ((C37465 - C37466 + C37467 - C37468) * C21355 +
             (C37469 - C37470 + C37471 - C37472) * C47110) *
                C47479) *
               C47271 +
           (((C31090 * C484 - C31092 * C471 + C47481 * C1974 - C31093 * C1968) *
                 C21355 +
             (C31090 * C501 - C31092 * C485 + C47481 * C1986 - C31093 * C1975) *
                 C47110) *
                C4717 +
            ((C37863 - C37864 + C37865 - C37866) * C21355 +
             (C37867 - C37868 + C37869 - C37870) * C47110) *
                C47479) *
               C3742) *
              C47163 * C47140 +
          ((((C31096 - C31095 + C31098 - C31097) * C21355 +
             (C31100 - C31099 + C31102 - C31101) * C47110) *
                C4717 +
            ((C31273 - C31274 + C31275 - C31276) * C21355 +
             (C31277 - C31278 + C31279 - C31280) * C47110) *
                C47479) *
               C47264 +
           (((C31452 - C31451 + C31454 - C31453) * C21355 +
             (C31456 - C31455 + C31458 - C31457) * C47110) *
                C4717 +
            ((C31953 - C31954 + C31955 - C31956) * C21355 +
             (C31957 - C31958 + C31959 - C31960) * C47110) *
                C47479) *
               C47271 +
           (((C31460 - C31459 + C31462 - C31461) * C21355 +
             (C31464 - C31463 + C31466 - C31465) * C47110) *
                C4717 +
            ((C33381 - C33382 + C33383 - C33384) * C21355 +
             (C33385 - C33386 + C33387 - C33388) * C47110) *
                C47479) *
               C3742) *
              C47163 * C47149 +
          ((((C31104 - C31103 + C31106 - C31105) * C21355 +
             (C31108 - C31107 + C31110 - C31109) * C47110) *
                C4717 +
            ((C31289 - C31290 + C31291 - C31292) * C21355 +
             (C31293 - C31294 + C31295 - C31296) * C47110) *
                C47479) *
               C47264 +
           (((C31468 - C31467 + C31470 - C31469) * C21355 +
             (C31472 - C31471 + C31474 - C31473) * C47110) *
                C4717 +
            ((C31961 - C31962 + C31963 - C31964) * C21355 +
             (C31965 - C31966 + C31967 - C31968) * C47110) *
                C47479) *
               C47271 +
           (((C31476 - C31475 + C31478 - C31477) * C21355 +
             (C31480 - C31479 + C31482 - C31481) * C47110) *
                C4717 +
            ((C31090 * C1271 - C31092 * C1260 + C47481 * C2369 -
              C31093 * C2364) *
                 C21355 +
             (C31090 * C1287 - C31092 * C1272 + C47481 * C2373 -
              C31093 * C2370) *
                 C47110) *
                C47479) *
               C3742) *
              C47163 * C2843)) /
        (p * q * std::sqrt(p + q));
    d2ee[194] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C31090 * C124 - C31092 * C117 + C47481 * C478 - C31093 * C468) *
                 C21355 +
             (C31090 * C138 - C31092 * C125 + C47481 * C498 - C31093 * C479) *
                 C47110) *
                C4717 +
            ((C36849 - C36850 + C36851 - C36852) * C21355 +
             (C36853 - C36854 + C36855 - C36856) * C47110) *
                C47479) *
               C3234 +
           (((C31092 * C468 - C31090 * C478 + C31093 * C471 - C47481 * C484) *
                 C21355 +
             (C31092 * C479 - C31090 * C498 + C31093 * C485 - C47481 * C501) *
                 C47110) *
                C4717 +
            ((C37465 - C37466 + C37467 - C37468) * C21355 +
             (C37469 - C37470 + C37471 - C37472) * C47110) *
                C47479) *
               C47268) *
              C47163 * C47506 +
          ((((C31096 - C31095 + C31098 - C31097) * C21355 +
             (C31100 - C31099 + C31102 - C31101) * C47110) *
                C4717 +
            ((C31273 - C31274 + C31275 - C31276) * C21355 +
             (C31277 - C31278 + C31279 - C31280) * C47110) *
                C47479) *
               C3234 +
           (((C31452 - C31451 + C31454 - C31453) * C21355 +
             (C31456 - C31455 + C31458 - C31457) * C47110) *
                C4717 +
            ((C31953 - C31954 + C31955 - C31956) * C21355 +
             (C31957 - C31958 + C31959 - C31960) * C47110) *
                C47479) *
               C47268) *
              C47163 * C47499 +
          ((((C31104 - C31103 + C31106 - C31105) * C21355 +
             (C31108 - C31107 + C31110 - C31109) * C47110) *
                C4717 +
            ((C31289 - C31290 + C31291 - C31292) * C21355 +
             (C31293 - C31294 + C31295 - C31296) * C47110) *
                C47479) *
               C3234 +
           (((C31468 - C31467 + C31470 - C31469) * C21355 +
             (C31472 - C31471 + C31474 - C31473) * C47110) *
                C4717 +
            ((C31961 - C31962 + C31963 - C31964) * C21355 +
             (C31965 - C31966 + C31967 - C31968) * C47110) *
                C47479) *
               C47268) *
              C47163 * C47486 +
          ((((C31112 - C31111 + C31114 - C31113) * C21355 +
             (C31116 - C31115 + C31118 - C31117) * C47110) *
                C4717 +
            ((C31613 - C31614 + C31615 - C31616) * C21355 +
             (C31617 - C31618 + C31619 - C31620) * C47110) *
                C47479) *
               C3234 +
           (((C31752 - C31751 + C31754 - C31753) * C21355 +
             (C31756 - C31755 + C31758 - C31757) * C47110) *
                C4717 +
            ((C31090 * C917 - C31092 * C909 + C47481 * C2139 - C31093 * C2138) *
                 C21355 +
             (C31090 * C924 - C31092 * C918 + C47481 * C2141 - C31093 * C2140) *
                 C47110) *
                C47479) *
               C47268) *
              C47163 * C47465)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C31090 * C124 - C31092 * C117 + C47481 * C478 - C31093 * C468) *
                  C21355 +
              (C31090 * C138 - C31092 * C125 + C47481 * C498 - C31093 * C479) *
                  C47110) *
                 C4717 +
             ((C36849 - C36850 + C36851 - C36852) * C21355 +
              (C36853 - C36854 + C36855 - C36856) * C47110) *
                 C47479) *
                C3234 +
            (((C31092 * C468 - C31090 * C478 + C31093 * C471 - C47481 * C484) *
                  C21355 +
              (C31092 * C479 - C31090 * C498 + C31093 * C485 - C47481 * C501) *
                  C47110) *
                 C4717 +
             ((C37465 - C37466 + C37467 - C37468) * C21355 +
              (C37469 - C37470 + C37471 - C37472) * C47110) *
                 C47479) *
                C47268) *
               C47500 +
           ((((C36850 - C36849 + C36852 - C36851) * C21355 +
              (C36854 - C36853 + C36856 - C36855) * C47110) *
                 C4717 +
             ((C36857 - C36858 + C36859 - C36860) * C21355 +
              (C36861 - C36862 + C36863 - C36864) * C47110) *
                 C47479) *
                C3234 +
            (((C37466 - C37465 + C37468 - C37467) * C21355 +
              (C37470 - C37469 + C37472 - C37471) * C47110) *
                 C4717 +
             ((C37871 - C37872 + C37873 - C37874) * C21355 +
              (C37875 - C37876 + C37877 - C37878) * C47110) *
                 C47479) *
                C47268) *
               C47488 +
           ((((C36858 - C36857 + C36860 - C36859) * C21355 +
              (C36862 - C36861 + C36864 - C36863) * C47110) *
                 C4717 +
             ((C37701 - C37702 + C37703 - C37704) * C21355 +
              (C37705 - C37706 + C37707 - C37708) * C47110) *
                 C47479) *
                C3234 +
            (((C37872 - C37871 + C37874 - C37873) * C21355 +
              (C37876 - C37875 + C37878 - C37877) * C47110) *
                 C4717 +
             ((C38341 - C38342 + C38343 - C38344) * C21355 +
              (C38345 - C38346 + C38347 - C38348) * C47110) *
                 C47479) *
                C47268) *
               C47461) *
              C2580 +
          (((((C31096 - C31095 + C31098 - C31097) * C21355 +
              (C31100 - C31099 + C31102 - C31101) * C47110) *
                 C4717 +
             ((C31273 - C31274 + C31275 - C31276) * C21355 +
              (C31277 - C31278 + C31279 - C31280) * C47110) *
                 C47479) *
                C3234 +
            (((C31452 - C31451 + C31454 - C31453) * C21355 +
              (C31456 - C31455 + C31458 - C31457) * C47110) *
                 C4717 +
             ((C31953 - C31954 + C31955 - C31956) * C21355 +
              (C31957 - C31958 + C31959 - C31960) * C47110) *
                 C47479) *
                C47268) *
               C47500 +
           ((((C31274 - C31273 + C31276 - C31275) * C21355 +
              (C31278 - C31277 + C31280 - C31279) * C47110) *
                 C4717 +
             ((C31281 - C31282 + C31283 - C31284) * C21355 +
              (C31285 - C31286 + C31287 - C31288) * C47110) *
                 C47479) *
                C3234 +
            (((C31954 - C31953 + C31956 - C31955) * C21355 +
              (C31958 - C31957 + C31960 - C31959) * C47110) *
                 C4717 +
             ((C32675 - C32676 + C32677 - C32678) * C21355 +
              (C32679 - C32680 + C32681 - C32682) * C47110) *
                 C47479) *
                C47268) *
               C47488 +
           ((((C31282 - C31281 + C31284 - C31283) * C21355 +
              (C31286 - C31285 + C31288 - C31287) * C47110) *
                 C4717 +
             ((C32473 - C32474 + C32475 - C32476) * C21355 +
              (C32477 - C32478 + C32479 - C32480) * C47110) *
                 C47479) *
                C3234 +
            (((C32676 - C32675 + C32678 - C32677) * C21355 +
              (C32680 - C32679 + C32682 - C32681) * C47110) *
                 C4717 +
             ((C31090 * C1671 - C31092 * C1667 + C47481 * C5897 -
               C31093 * C5894) *
                  C21355 +
              (C31090 * C1676 - C31092 * C1672 + C47481 * C5900 -
               C31093 * C5898) *
                  C47110) *
                 C47479) *
                C47268) *
               C47461) *
              C47146)) /
            (p * q * std::sqrt(p + q));
    d2ee[195] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C31090 * C124 - C31092 * C117 + C47481 * C478 - C31093 * C468) *
                 C21355 +
             (C31090 * C138 - C31092 * C125 + C47481 * C498 - C31093 * C479) *
                 C47110) *
                C4717 +
            ((C36849 - C36850 + C36851 - C36852) * C21355 +
             (C36853 - C36854 + C36855 - C36856) * C47110) *
                C47479) *
               C47181 * C47429 +
           (((C36850 - C36849 + C36852 - C36851) * C21355 +
             (C36854 - C36853 + C36856 - C36855) * C47110) *
                C4717 +
            ((C36857 - C36858 + C36859 - C36860) * C21355 +
             (C36861 - C36862 + C36863 - C36864) * C47110) *
                C47479) *
               C47181 * C47226) *
              C636 +
          ((((C31096 - C31095 + C31098 - C31097) * C21355 +
             (C31100 - C31099 + C31102 - C31101) * C47110) *
                C4717 +
            ((C31273 - C31274 + C31275 - C31276) * C21355 +
             (C31277 - C31278 + C31279 - C31280) * C47110) *
                C47479) *
               C47181 * C47429 +
           (((C31274 - C31273 + C31276 - C31275) * C21355 +
             (C31278 - C31277 + C31280 - C31279) * C47110) *
                C4717 +
            ((C31281 - C31282 + C31283 - C31284) * C21355 +
             (C31285 - C31286 + C31287 - C31288) * C47110) *
                C47479) *
               C47181 * C47226) *
              C637 +
          ((((C31104 - C31103 + C31106 - C31105) * C21355 +
             (C31108 - C31107 + C31110 - C31109) * C47110) *
                C4717 +
            ((C31289 - C31290 + C31291 - C31292) * C21355 +
             (C31293 - C31294 + C31295 - C31296) * C47110) *
                C47479) *
               C47181 * C47429 +
           (((C31290 - C31289 + C31292 - C31291) * C21355 +
             (C31294 - C31293 + C31296 - C31295) * C47110) *
                C4717 +
            ((C31297 - C31298 + C31299 - C31300) * C21355 +
             (C31301 - C31302 + C31303 - C31304) * C47110) *
                C47479) *
               C47181 * C47226) *
              C638 +
          ((((C31112 - C31111 + C31114 - C31113) * C21355 +
             (C31116 - C31115 + C31118 - C31117) * C47110) *
                C4717 +
            ((C31613 - C31614 + C31615 - C31616) * C21355 +
             (C31617 - C31618 + C31619 - C31620) * C47110) *
                C47479) *
               C47181 * C47429 +
           (((C31614 - C31613 + C31616 - C31615) * C21355 +
             (C31618 - C31617 + C31620 - C31619) * C47110) *
                C4717 +
            ((C31090 * C311 - C31092 * C294 + C47481 * C1557 - C31093 * C1556) *
                 C21355 +
             (C31090 * C324 - C31092 * C312 + C47481 * C1559 - C31093 * C1558) *
                 C47110) *
                C47479) *
               C47181 * C47226) *
              C47465)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C31090 * C124 - C31092 * C117 + C47481 * C478 - C31093 * C468) *
                 C21355 +
             (C31090 * C138 - C31092 * C125 + C47481 * C498 - C31093 * C479) *
                 C47110) *
                C4717 +
            ((C36849 - C36850 + C36851 - C36852) * C21355 +
             (C36853 - C36854 + C36855 - C36856) * C47110) *
                C47479) *
               C47181 * C1392 +
           (((C36850 - C36849 + C36852 - C36851) * C21355 +
             (C36854 - C36853 + C36856 - C36855) * C47110) *
                C4717 +
            ((C36857 - C36858 + C36859 - C36860) * C21355 +
             (C36861 - C36862 + C36863 - C36864) * C47110) *
                C47479) *
               C47181 * C1393 +
           (((C36858 - C36857 + C36860 - C36859) * C21355 +
             (C36862 - C36861 + C36864 - C36863) * C47110) *
                C4717 +
            ((C37701 - C37702 + C37703 - C37704) * C21355 +
             (C37705 - C37706 + C37707 - C37708) * C47110) *
                C47479) *
               C47181 * C1394 +
           (((C37702 - C37701 + C37704 - C37703) * C21355 +
             (C37706 - C37705 + C37708 - C37707) * C47110) *
                C4717 +
            ((C37709 - C37710 + C37711 - C37712) * C21355 +
             (C37713 - C37714 + C37715 - C37716) * C47110) *
                C47479) *
               C47181 * C47471) *
              C47415 +
          ((((C31096 - C31095 + C31098 - C31097) * C21355 +
             (C31100 - C31099 + C31102 - C31101) * C47110) *
                C4717 +
            ((C31273 - C31274 + C31275 - C31276) * C21355 +
             (C31277 - C31278 + C31279 - C31280) * C47110) *
                C47479) *
               C47181 * C1392 +
           (((C31274 - C31273 + C31276 - C31275) * C21355 +
             (C31278 - C31277 + C31280 - C31279) * C47110) *
                C4717 +
            ((C31281 - C31282 + C31283 - C31284) * C21355 +
             (C31285 - C31286 + C31287 - C31288) * C47110) *
                C47479) *
               C47181 * C1393 +
           (((C31282 - C31281 + C31284 - C31283) * C21355 +
             (C31286 - C31285 + C31288 - C31287) * C47110) *
                C4717 +
            ((C32473 - C32474 + C32475 - C32476) * C21355 +
             (C32477 - C32478 + C32479 - C32480) * C47110) *
                C47479) *
               C47181 * C1394 +
           (((C32474 - C32473 + C32476 - C32475) * C21355 +
             (C32478 - C32477 + C32480 - C32479) * C47110) *
                C4717 +
            ((C31090 * C1138 - C31092 * C1128 + C47481 * C6387 -
              C31093 * C6384) *
                 C21355 +
             (C31090 * C1146 - C31092 * C1139 + C47481 * C6390 -
              C31093 * C6388) *
                 C47110) *
                C47479) *
               C47181 * C47471) *
              C47146)) /
            (p * q * std::sqrt(p + q));
    d2ee[196] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C31090 * C124 - C31092 * C117 + C47481 * C478 - C31093 * C468) *
                  C21355 +
              (C31090 * C138 - C31092 * C125 + C47481 * C498 - C31093 * C479) *
                  C47110) *
                 C4717 +
             ((C36849 - C36850 + C36851 - C36852) * C21355 +
              (C36853 - C36854 + C36855 - C36856) * C47110) *
                 C47479) *
                C47430 +
            (((C31092 * C468 - C31090 * C478 + C31093 * C471 - C47481 * C484) *
                  C21355 +
              (C31092 * C479 - C31090 * C498 + C31093 * C485 - C47481 * C501) *
                  C47110) *
                 C4717 +
             ((C37465 - C37466 + C37467 - C37468) * C21355 +
              (C37469 - C37470 + C37471 - C37472) * C47110) *
                 C47479) *
                C47268) *
               C47429 +
           ((((C36850 - C36849 + C36852 - C36851) * C21355 +
              (C36854 - C36853 + C36856 - C36855) * C47110) *
                 C4717 +
             ((C36857 - C36858 + C36859 - C36860) * C21355 +
              (C36861 - C36862 + C36863 - C36864) * C47110) *
                 C47479) *
                C47430 +
            (((C37466 - C37465 + C37468 - C37467) * C21355 +
              (C37470 - C37469 + C37472 - C37471) * C47110) *
                 C4717 +
             ((C31090 * C1273 - C31092 * C1261 + C47481 * C1279 -
               C31093 * C1264) *
                  C21355 +
              (C31090 * C1288 - C31092 * C1274 + C47481 * C1291 -
               C31093 * C1280) *
                  C47110) *
                 C47479) *
                C47268) *
               C47226) *
              C284 +
          (((((C31096 - C31095 + C31098 - C31097) * C21355 +
              (C31100 - C31099 + C31102 - C31101) * C47110) *
                 C4717 +
             ((C31273 - C31274 + C31275 - C31276) * C21355 +
              (C31277 - C31278 + C31279 - C31280) * C47110) *
                 C47479) *
                C47430 +
            (((C31452 - C31451 + C31454 - C31453) * C21355 +
              (C31456 - C31455 + C31458 - C31457) * C47110) *
                 C4717 +
             ((C31953 - C31954 + C31955 - C31956) * C21355 +
              (C31957 - C31958 + C31959 - C31960) * C47110) *
                 C47479) *
                C47268) *
               C47429 +
           ((((C31274 - C31273 + C31276 - C31275) * C21355 +
              (C31278 - C31277 + C31280 - C31279) * C47110) *
                 C4717 +
             ((C31281 - C31282 + C31283 - C31284) * C21355 +
              (C31285 - C31286 + C31287 - C31288) * C47110) *
                 C47479) *
                C47430 +
            (((C31954 - C31953 + C31956 - C31955) * C21355 +
              (C31958 - C31957 + C31960 - C31959) * C47110) *
                 C4717 +
             ((C32675 - C32676 + C32677 - C32678) * C21355 +
              (C32679 - C32680 + C32681 - C32682) * C47110) *
                 C47479) *
                C47268) *
               C47226) *
              C285 +
          (((((C31104 - C31103 + C31106 - C31105) * C21355 +
              (C31108 - C31107 + C31110 - C31109) * C47110) *
                 C4717 +
             ((C31289 - C31290 + C31291 - C31292) * C21355 +
              (C31293 - C31294 + C31295 - C31296) * C47110) *
                 C47479) *
                C47430 +
            (((C31468 - C31467 + C31470 - C31469) * C21355 +
              (C31472 - C31471 + C31474 - C31473) * C47110) *
                 C4717 +
             ((C31961 - C31962 + C31963 - C31964) * C21355 +
              (C31965 - C31966 + C31967 - C31968) * C47110) *
                 C47479) *
                C47268) *
               C47429 +
           ((((C31290 - C31289 + C31292 - C31291) * C21355 +
              (C31294 - C31293 + C31296 - C31295) * C47110) *
                 C4717 +
             ((C31297 - C31298 + C31299 - C31300) * C21355 +
              (C31301 - C31302 + C31303 - C31304) * C47110) *
                 C47479) *
                C47430 +
            (((C31962 - C31961 + C31964 - C31963) * C21355 +
              (C31966 - C31965 + C31968 - C31967) * C47110) *
                 C4717 +
             ((C31090 * C1277 - C31092 * C1263 + C47481 * C1283 -
               C31093 * C1266) *
                  C21355 +
              (C31090 * C1290 - C31092 * C1278 + C47481 * C1293 -
               C31093 * C1284) *
                  C47110) *
                 C47479) *
                C47268) *
               C47226) *
              C47455)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C31090 * C124 - C31092 * C117 + C47481 * C478 - C31093 * C468) *
                 C21355 +
             (C31090 * C138 - C31092 * C125 + C47481 * C498 - C31093 * C479) *
                 C47110) *
                C4717 +
            ((C36849 - C36850 + C36851 - C36852) * C21355 +
             (C36853 - C36854 + C36855 - C36856) * C47110) *
                C47479) *
               C47430 +
           (((C31092 * C468 - C31090 * C478 + C31093 * C471 - C47481 * C484) *
                 C21355 +
             (C31092 * C479 - C31090 * C498 + C31093 * C485 - C47481 * C501) *
                 C47110) *
                C4717 +
            ((C37465 - C37466 + C37467 - C37468) * C21355 +
             (C37469 - C37470 + C37471 - C37472) * C47110) *
                C47479) *
               C47268) *
              C1392 +
          ((((C36850 - C36849 + C36852 - C36851) * C21355 +
             (C36854 - C36853 + C36856 - C36855) * C47110) *
                C4717 +
            ((C36857 - C36858 + C36859 - C36860) * C21355 +
             (C36861 - C36862 + C36863 - C36864) * C47110) *
                C47479) *
               C47430 +
           (((C37466 - C37465 + C37468 - C37467) * C21355 +
             (C37470 - C37469 + C37472 - C37471) * C47110) *
                C4717 +
            ((C37871 - C37872 + C37873 - C37874) * C21355 +
             (C37875 - C37876 + C37877 - C37878) * C47110) *
                C47479) *
               C47268) *
              C1393 +
          ((((C36858 - C36857 + C36860 - C36859) * C21355 +
             (C36862 - C36861 + C36864 - C36863) * C47110) *
                C4717 +
            ((C37701 - C37702 + C37703 - C37704) * C21355 +
             (C37705 - C37706 + C37707 - C37708) * C47110) *
                C47479) *
               C47430 +
           (((C37872 - C37871 + C37874 - C37873) * C21355 +
             (C37876 - C37875 + C37878 - C37877) * C47110) *
                C4717 +
            ((C38341 - C38342 + C38343 - C38344) * C21355 +
             (C38345 - C38346 + C38347 - C38348) * C47110) *
                C47479) *
               C47268) *
              C1394 +
          ((((C37702 - C37701 + C37704 - C37703) * C21355 +
             (C37706 - C37705 + C37708 - C37707) * C47110) *
                C4717 +
            ((C37709 - C37710 + C37711 - C37712) * C21355 +
             (C37713 - C37714 + C37715 - C37716) * C47110) *
                C47479) *
               C47430 +
           (((C38342 - C38341 + C38344 - C38343) * C21355 +
             (C38346 - C38345 + C38348 - C38347) * C47110) *
                C4717 +
            ((C31090 * C6385 - C31092 * C6383 + C47481 * C22230 -
              C31093 * C22229) *
                 C21355 +
             (C31090 * C6389 - C31092 * C6386 + C47481 * C22232 -
              C31093 * C22231) *
                 C47110) *
                C47479) *
               C47268) *
              C47471) *
         C47135) /
            (p * q * std::sqrt(p + q));
    d2ee[197] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C31090 * C124 - C31092 * C117 + C47481 * C478 - C31093 * C468) *
                 C21355 +
             (C31090 * C138 - C31092 * C125 + C47481 * C498 - C31093 * C479) *
                 C47110) *
                C4717 +
            ((C36849 - C36850 + C36851 - C36852) * C21355 +
             (C36853 - C36854 + C36855 - C36856) * C47110) *
                C47479) *
               C47181 * C47500 +
           (((C36850 - C36849 + C36852 - C36851) * C21355 +
             (C36854 - C36853 + C36856 - C36855) * C47110) *
                C4717 +
            ((C36857 - C36858 + C36859 - C36860) * C21355 +
             (C36861 - C36862 + C36863 - C36864) * C47110) *
                C47479) *
               C47181 * C47488 +
           (((C36858 - C36857 + C36860 - C36859) * C21355 +
             (C36862 - C36861 + C36864 - C36863) * C47110) *
                C4717 +
            ((C31090 * C1130 - C31092 * C1124 + C47481 * C1669 -
              C31093 * C1666) *
                 C21355 +
             (C31090 * C1142 - C31092 * C1131 + C47481 * C1675 -
              C31093 * C1670) *
                 C47110) *
                C47479) *
               C47181 * C47461) *
              C284 +
          ((((C31096 - C31095 + C31098 - C31097) * C21355 +
             (C31100 - C31099 + C31102 - C31101) * C47110) *
                C4717 +
            ((C31273 - C31274 + C31275 - C31276) * C21355 +
             (C31277 - C31278 + C31279 - C31280) * C47110) *
                C47479) *
               C47181 * C47500 +
           (((C31274 - C31273 + C31276 - C31275) * C21355 +
             (C31278 - C31277 + C31280 - C31279) * C47110) *
                C4717 +
            ((C31281 - C31282 + C31283 - C31284) * C21355 +
             (C31285 - C31286 + C31287 - C31288) * C47110) *
                C47479) *
               C47181 * C47488 +
           (((C31282 - C31281 + C31284 - C31283) * C21355 +
             (C31286 - C31285 + C31288 - C31287) * C47110) *
                C4717 +
            ((C32473 - C32474 + C32475 - C32476) * C21355 +
             (C32477 - C32478 + C32479 - C32480) * C47110) *
                C47479) *
               C47181 * C47461) *
              C285 +
          ((((C31104 - C31103 + C31106 - C31105) * C21355 +
             (C31108 - C31107 + C31110 - C31109) * C47110) *
                C4717 +
            ((C31289 - C31290 + C31291 - C31292) * C21355 +
             (C31293 - C31294 + C31295 - C31296) * C47110) *
                C47479) *
               C47181 * C47500 +
           (((C31290 - C31289 + C31292 - C31291) * C21355 +
             (C31294 - C31293 + C31296 - C31295) * C47110) *
                C4717 +
            ((C31297 - C31298 + C31299 - C31300) * C21355 +
             (C31301 - C31302 + C31303 - C31304) * C47110) *
                C47479) *
               C47181 * C47488 +
           (((C31298 - C31297 + C31300 - C31299) * C21355 +
             (C31302 - C31301 + C31304 - C31303) * C47110) *
                C4717 +
            ((C31090 * C1134 - C31092 * C1126 + C47481 * C1673 -
              C31093 * C1668) *
                 C21355 +
             (C31090 * C1144 - C31092 * C1135 + C47481 * C1677 -
              C31093 * C1674) *
                 C47110) *
                C47479) *
               C47181 * C47461) *
              C47455)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C31090 * C124 - C31092 * C117 + C47481 * C478 - C31093 * C468) *
                C21355 +
            (C31090 * C138 - C31092 * C125 + C47481 * C498 - C31093 * C479) *
                C47110) *
               C4717 +
           ((C31090 * C297 - C31092 * C287 + C47481 * C911 - C31093 * C906) *
                C21355 +
            (C31090 * C317 - C31092 * C298 + C47481 * C921 - C31093 * C912) *
                C47110) *
               C47479) *
              C47181 * C47163 * C108 +
          (((C31096 - C31095 + C31098 - C31097) * C21355 +
            (C31100 - C31099 + C31102 - C31101) * C47110) *
               C4717 +
           ((C31273 - C31274 + C31275 - C31276) * C21355 +
            (C31277 - C31278 + C31279 - C31280) * C47110) *
               C47479) *
              C47181 * C47163 * C109 +
          (((C31104 - C31103 + C31106 - C31105) * C21355 +
            (C31108 - C31107 + C31110 - C31109) * C47110) *
               C4717 +
           ((C31289 - C31290 + C31291 - C31292) * C21355 +
            (C31293 - C31294 + C31295 - C31296) * C47110) *
               C47479) *
              C47181 * C47163 * C110 +
          (((C31112 - C31111 + C31114 - C31113) * C21355 +
            (C31116 - C31115 + C31118 - C31117) * C47110) *
               C4717 +
           ((C31613 - C31614 + C31615 - C31616) * C21355 +
            (C31617 - C31618 + C31619 - C31620) * C47110) *
               C47479) *
              C47181 * C47163 * C111 +
          (((C31120 - C31119 + C31122 - C31121) * C21355 +
            (C31124 - C31123 + C31126 - C31125) * C47110) *
               C4717 +
           ((C31090 * C313 - C31092 * C295 + C47481 * C919 - C31093 * C910) *
                C21355 +
            (C31090 * C325 - C31092 * C314 + C47481 * C925 - C31093 * C920) *
                C47110) *
               C47479) *
              C47181 * C47163 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C31090 * C124 - C31092 * C117 + C47481 * C478 - C31093 * C468) *
                 C21355 +
             (C31090 * C138 - C31092 * C125 + C47481 * C498 - C31093 * C479) *
                 C47110) *
                C4717 +
            ((C36849 - C36850 + C36851 - C36852) * C21355 +
             (C36853 - C36854 + C36855 - C36856) * C47110) *
                C47479) *
               C47501 +
           (((C31092 * C468 - C31090 * C478 + C31093 * C471 - C47481 * C484) *
                 C21355 +
             (C31092 * C479 - C31090 * C498 + C31093 * C485 - C47481 * C501) *
                 C47110) *
                C4717 +
            ((C31092 * C906 - C31090 * C911 + C31093 * C1258 - C47481 * C1267) *
                 C21355 +
             (C31092 * C912 - C31090 * C921 + C31093 * C1268 - C47481 * C1285) *
                 C47110) *
                C47479) *
               C47490 +
           (((C31090 * C484 - C31092 * C471 + C47481 * C1974 - C31093 * C1968) *
                 C21355 +
             (C31090 * C501 - C31092 * C485 + C47481 * C1986 - C31093 * C1975) *
                 C47110) *
                C4717 +
            ((C31090 * C1267 - C31092 * C1258 + C47481 * C2365 -
              C31093 * C2362) *
                 C21355 +
             (C31090 * C1285 - C31092 * C1268 + C47481 * C2371 -
              C31093 * C2366) *
                 C47110) *
                C47479) *
               C47464) *
              C47163 * C284 +
          ((((C31096 - C31095 + C31098 - C31097) * C21355 +
             (C31100 - C31099 + C31102 - C31101) * C47110) *
                C4717 +
            ((C31273 - C31274 + C31275 - C31276) * C21355 +
             (C31277 - C31278 + C31279 - C31280) * C47110) *
                C47479) *
               C47501 +
           (((C31452 - C31451 + C31454 - C31453) * C21355 +
             (C31456 - C31455 + C31458 - C31457) * C47110) *
                C4717 +
            ((C31953 - C31954 + C31955 - C31956) * C21355 +
             (C31957 - C31958 + C31959 - C31960) * C47110) *
                C47479) *
               C47490 +
           (((C31460 - C31459 + C31462 - C31461) * C21355 +
             (C31464 - C31463 + C31466 - C31465) * C47110) *
                C4717 +
            ((C33381 - C33382 + C33383 - C33384) * C21355 +
             (C33385 - C33386 + C33387 - C33388) * C47110) *
                C47479) *
               C47464) *
              C47163 * C285 +
          ((((C31104 - C31103 + C31106 - C31105) * C21355 +
             (C31108 - C31107 + C31110 - C31109) * C47110) *
                C4717 +
            ((C31289 - C31290 + C31291 - C31292) * C21355 +
             (C31293 - C31294 + C31295 - C31296) * C47110) *
                C47479) *
               C47501 +
           (((C31468 - C31467 + C31470 - C31469) * C21355 +
             (C31472 - C31471 + C31474 - C31473) * C47110) *
                C4717 +
            ((C31961 - C31962 + C31963 - C31964) * C21355 +
             (C31965 - C31966 + C31967 - C31968) * C47110) *
                C47479) *
               C47490 +
           (((C31476 - C31475 + C31478 - C31477) * C21355 +
             (C31480 - C31479 + C31482 - C31481) * C47110) *
                C4717 +
            ((C31090 * C1271 - C31092 * C1260 + C47481 * C2369 -
              C31093 * C2364) *
                 C21355 +
             (C31090 * C1287 - C31092 * C1272 + C47481 * C2373 -
              C31093 * C2370) *
                 C47110) *
                C47479) *
               C47464) *
              C47163 * C47455)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C31090 * C124 - C31092 * C117 + C47481 * C478 - C31093 * C468) *
                 C21355 +
             (C31090 * C138 - C31092 * C125 + C47481 * C498 - C31093 * C479) *
                 C47110) *
                C4717 +
            ((C36849 - C36850 + C36851 - C36852) * C21355 +
             (C36853 - C36854 + C36855 - C36856) * C47110) *
                C47479) *
               C47181 * C1050 +
           (((C36850 - C36849 + C36852 - C36851) * C21355 +
             (C36854 - C36853 + C36856 - C36855) * C47110) *
                C4717 +
            ((C36857 - C36858 + C36859 - C36860) * C21355 +
             (C36861 - C36862 + C36863 - C36864) * C47110) *
                C47479) *
               C47181 * C1051 +
           (((C36858 - C36857 + C36860 - C36859) * C21355 +
             (C36862 - C36861 + C36864 - C36863) * C47110) *
                C4717 +
            ((C31090 * C1130 - C31092 * C1124 + C47481 * C1669 -
              C31093 * C1666) *
                 C21355 +
             (C31090 * C1142 - C31092 * C1131 + C47481 * C1675 -
              C31093 * C1670) *
                 C47110) *
                C47479) *
               C47181 * C47461) *
              C47497 +
          ((((C31096 - C31095 + C31098 - C31097) * C21355 +
             (C31100 - C31099 + C31102 - C31101) * C47110) *
                C4717 +
            ((C31273 - C31274 + C31275 - C31276) * C21355 +
             (C31277 - C31278 + C31279 - C31280) * C47110) *
                C47479) *
               C47181 * C1050 +
           (((C31274 - C31273 + C31276 - C31275) * C21355 +
             (C31278 - C31277 + C31280 - C31279) * C47110) *
                C4717 +
            ((C31281 - C31282 + C31283 - C31284) * C21355 +
             (C31285 - C31286 + C31287 - C31288) * C47110) *
                C47479) *
               C47181 * C1051 +
           (((C31282 - C31281 + C31284 - C31283) * C21355 +
             (C31286 - C31285 + C31288 - C31287) * C47110) *
                C4717 +
            ((C32473 - C32474 + C32475 - C32476) * C21355 +
             (C32477 - C32478 + C32479 - C32480) * C47110) *
                C47479) *
               C47181 * C47461) *
              C47484 +
          ((((C31104 - C31103 + C31106 - C31105) * C21355 +
             (C31108 - C31107 + C31110 - C31109) * C47110) *
                C4717 +
            ((C31289 - C31290 + C31291 - C31292) * C21355 +
             (C31293 - C31294 + C31295 - C31296) * C47110) *
                C47479) *
               C47181 * C1050 +
           (((C31290 - C31289 + C31292 - C31291) * C21355 +
             (C31294 - C31293 + C31296 - C31295) * C47110) *
                C4717 +
            ((C31297 - C31298 + C31299 - C31300) * C21355 +
             (C31301 - C31302 + C31303 - C31304) * C47110) *
                C47479) *
               C47181 * C1051 +
           (((C31298 - C31297 + C31300 - C31299) * C21355 +
             (C31302 - C31301 + C31304 - C31303) * C47110) *
                C4717 +
            ((C31090 * C1134 - C31092 * C1126 + C47481 * C1673 -
              C31093 * C1668) *
                 C21355 +
             (C31090 * C1144 - C31092 * C1135 + C47481 * C1677 -
              C31093 * C1674) *
                 C47110) *
                C47479) *
               C47181 * C47461) *
              C47455)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C31090 * C124 - C31092 * C117 + C47481 * C478 - C31093 * C468) *
                C21355 +
            (C31090 * C138 - C31092 * C125 + C47481 * C498 - C31093 * C479) *
                C47110) *
               C4717 +
           ((C36849 - C36850 + C36851 - C36852) * C21355 +
            (C36853 - C36854 + C36855 - C36856) * C47110) *
               C47479) *
              C47181 * C1118 +
          (((C36850 - C36849 + C36852 - C36851) * C21355 +
            (C36854 - C36853 + C36856 - C36855) * C47110) *
               C4717 +
           ((C36857 - C36858 + C36859 - C36860) * C21355 +
            (C36861 - C36862 + C36863 - C36864) * C47110) *
               C47479) *
              C47181 * C1119 +
          (((C36858 - C36857 + C36860 - C36859) * C21355 +
            (C36862 - C36861 + C36864 - C36863) * C47110) *
               C4717 +
           ((C37701 - C37702 + C37703 - C37704) * C21355 +
            (C37705 - C37706 + C37707 - C37708) * C47110) *
               C47479) *
              C47181 * C1120 +
          (((C37702 - C37701 + C37704 - C37703) * C21355 +
            (C37706 - C37705 + C37708 - C37707) * C47110) *
               C4717 +
           ((C37709 - C37710 + C37711 - C37712) * C21355 +
            (C37713 - C37714 + C37715 - C37716) * C47110) *
               C47479) *
              C47181 * C1121 +
          (((C37710 - C37709 + C37712 - C37711) * C21355 +
            (C37714 - C37713 + C37716 - C37715) * C47110) *
               C4717 +
           ((C31090 * C5729 - C31092 * C5727 + C47481 * C22596 -
             C31093 * C22595) *
                C21355 +
            (C31090 * C5733 - C31092 * C5730 + C47481 * C22598 -
             C31093 * C22597) *
                C47110) *
               C47479) *
              C47181 * C1122) *
         C47135) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C31090 * C124 - C31092 * C117 + C47481 * C478 - C31093 * C468) *
                 C21355 +
             (C31090 * C138 - C31092 * C125 + C47481 * C498 - C31093 * C479) *
                 C47110) *
                C4717 +
            ((C36849 - C36850 + C36851 - C36852) * C21355 +
             (C36853 - C36854 + C36855 - C36856) * C47110) *
                C47479) *
               C47501 +
           (((C31092 * C468 - C31090 * C478 + C31093 * C471 - C47481 * C484) *
                 C21355 +
             (C31092 * C479 - C31090 * C498 + C31093 * C485 - C47481 * C501) *
                 C47110) *
                C4717 +
            ((C37465 - C37466 + C37467 - C37468) * C21355 +
             (C37469 - C37470 + C37471 - C37472) * C47110) *
                C47479) *
               C47490 +
           (((C31090 * C484 - C31092 * C471 + C47481 * C1974 - C31093 * C1968) *
                 C21355 +
             (C31090 * C501 - C31092 * C485 + C47481 * C1986 - C31093 * C1975) *
                 C47110) *
                C4717 +
            ((C37863 - C37864 + C37865 - C37866) * C21355 +
             (C37867 - C37868 + C37869 - C37870) * C47110) *
                C47479) *
               C47464) *
              C1050 +
          ((((C36850 - C36849 + C36852 - C36851) * C21355 +
             (C36854 - C36853 + C36856 - C36855) * C47110) *
                C4717 +
            ((C36857 - C36858 + C36859 - C36860) * C21355 +
             (C36861 - C36862 + C36863 - C36864) * C47110) *
                C47479) *
               C47501 +
           (((C37466 - C37465 + C37468 - C37467) * C21355 +
             (C37470 - C37469 + C37472 - C37471) * C47110) *
                C4717 +
            ((C37871 - C37872 + C37873 - C37874) * C21355 +
             (C37875 - C37876 + C37877 - C37878) * C47110) *
                C47479) *
               C47490 +
           (((C37864 - C37863 + C37866 - C37865) * C21355 +
             (C37868 - C37867 + C37870 - C37869) * C47110) *
                C4717 +
            ((C37879 - C37880 + C37881 - C37882) * C21355 +
             (C37883 - C37884 + C37885 - C37886) * C47110) *
                C47479) *
               C47464) *
              C1051 +
          ((((C36858 - C36857 + C36860 - C36859) * C21355 +
             (C36862 - C36861 + C36864 - C36863) * C47110) *
                C4717 +
            ((C37701 - C37702 + C37703 - C37704) * C21355 +
             (C37705 - C37706 + C37707 - C37708) * C47110) *
                C47479) *
               C47501 +
           (((C37872 - C37871 + C37874 - C37873) * C21355 +
             (C37876 - C37875 + C37878 - C37877) * C47110) *
                C4717 +
            ((C31092 * C1666 - C31090 * C1669 + C31093 * C5893 -
              C47481 * C5895) *
                 C21355 +
             (C31092 * C1670 - C31090 * C1675 + C31093 * C5896 -
              C47481 * C5899) *
                 C47110) *
                C47479) *
               C47490 +
           (((C37880 - C37879 + C37882 - C37881) * C21355 +
             (C37884 - C37883 + C37886 - C37885) * C47110) *
                C4717 +
            ((C31090 * C5895 - C31092 * C5893 + C47481 * C23237 -
              C31093 * C23236) *
                 C21355 +
             (C31090 * C5899 - C31092 * C5896 + C47481 * C23239 -
              C31093 * C23238) *
                 C47110) *
                C47479) *
               C47464) *
              C47461) *
         C47135) /
            (p * q * std::sqrt(p + q));
    d2ee[198] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C31090 * C124 - C31092 * C117 + C47481 * C478 - C31093 * C468) *
                 C21355 +
             (C31090 * C138 - C31092 * C125 + C47481 * C498 - C31093 * C479) *
                 C47110) *
                C4717 +
            ((C36849 - C36850 + C36851 - C36852) * C21355 +
             (C36853 - C36854 + C36855 - C36856) * C47110) *
                C47479) *
               C47430 +
           (((C31092 * C468 - C31090 * C478 + C31093 * C471 - C47481 * C484) *
                 C21355 +
             (C31092 * C479 - C31090 * C498 + C31093 * C485 - C47481 * C501) *
                 C47110) *
                C4717 +
            ((C31092 * C906 - C31090 * C911 + C31093 * C1258 - C47481 * C1267) *
                 C21355 +
             (C31092 * C912 - C31090 * C921 + C31093 * C1268 - C47481 * C1285) *
                 C47110) *
                C47479) *
               C47268) *
              C47163 * C636 +
          ((((C31096 - C31095 + C31098 - C31097) * C21355 +
             (C31100 - C31099 + C31102 - C31101) * C47110) *
                C4717 +
            ((C31273 - C31274 + C31275 - C31276) * C21355 +
             (C31277 - C31278 + C31279 - C31280) * C47110) *
                C47479) *
               C47430 +
           (((C31452 - C31451 + C31454 - C31453) * C21355 +
             (C31456 - C31455 + C31458 - C31457) * C47110) *
                C4717 +
            ((C31953 - C31954 + C31955 - C31956) * C21355 +
             (C31957 - C31958 + C31959 - C31960) * C47110) *
                C47479) *
               C47268) *
              C47163 * C637 +
          ((((C31104 - C31103 + C31106 - C31105) * C21355 +
             (C31108 - C31107 + C31110 - C31109) * C47110) *
                C4717 +
            ((C31289 - C31290 + C31291 - C31292) * C21355 +
             (C31293 - C31294 + C31295 - C31296) * C47110) *
                C47479) *
               C47430 +
           (((C31468 - C31467 + C31470 - C31469) * C21355 +
             (C31472 - C31471 + C31474 - C31473) * C47110) *
                C4717 +
            ((C31961 - C31962 + C31963 - C31964) * C21355 +
             (C31965 - C31966 + C31967 - C31968) * C47110) *
                C47479) *
               C47268) *
              C47163 * C638 +
          ((((C31112 - C31111 + C31114 - C31113) * C21355 +
             (C31116 - C31115 + C31118 - C31117) * C47110) *
                C4717 +
            ((C31613 - C31614 + C31615 - C31616) * C21355 +
             (C31617 - C31618 + C31619 - C31620) * C47110) *
                C47479) *
               C47430 +
           (((C31752 - C31751 + C31754 - C31753) * C21355 +
             (C31756 - C31755 + C31758 - C31757) * C47110) *
                C4717 +
            ((C31090 * C917 - C31092 * C909 + C47481 * C2139 - C31093 * C2138) *
                 C21355 +
             (C31090 * C924 - C31092 * C918 + C47481 * C2141 - C31093 * C2140) *
                 C47110) *
                C47479) *
               C47268) *
              C47163 * C47465)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C31090 * C124 - C31092 * C117 + C47481 * C478 - C31093 * C468) *
                  C21355 +
              (C31090 * C138 - C31092 * C125 + C47481 * C498 - C31093 * C479) *
                  C47110) *
                 C4717 +
             ((C36849 - C36850 + C36851 - C36852) * C21355 +
              (C36853 - C36854 + C36855 - C36856) * C47110) *
                 C47479) *
                C47430 +
            (((C31092 * C468 - C31090 * C478 + C31093 * C471 - C47481 * C484) *
                  C21355 +
              (C31092 * C479 - C31090 * C498 + C31093 * C485 - C47481 * C501) *
                  C47110) *
                 C4717 +
             ((C37465 - C37466 + C37467 - C37468) * C21355 +
              (C37469 - C37470 + C37471 - C37472) * C47110) *
                 C47479) *
                C47268) *
               C1050 +
           ((((C36850 - C36849 + C36852 - C36851) * C21355 +
              (C36854 - C36853 + C36856 - C36855) * C47110) *
                 C4717 +
             ((C36857 - C36858 + C36859 - C36860) * C21355 +
              (C36861 - C36862 + C36863 - C36864) * C47110) *
                 C47479) *
                C47430 +
            (((C37466 - C37465 + C37468 - C37467) * C21355 +
              (C37470 - C37469 + C37472 - C37471) * C47110) *
                 C4717 +
             ((C37871 - C37872 + C37873 - C37874) * C21355 +
              (C37875 - C37876 + C37877 - C37878) * C47110) *
                 C47479) *
                C47268) *
               C1051 +
           ((((C36858 - C36857 + C36860 - C36859) * C21355 +
              (C36862 - C36861 + C36864 - C36863) * C47110) *
                 C4717 +
             ((C37701 - C37702 + C37703 - C37704) * C21355 +
              (C37705 - C37706 + C37707 - C37708) * C47110) *
                 C47479) *
                C47430 +
            (((C37872 - C37871 + C37874 - C37873) * C21355 +
              (C37876 - C37875 + C37878 - C37877) * C47110) *
                 C4717 +
             ((C31092 * C1666 - C31090 * C1669 + C31093 * C5893 -
               C47481 * C5895) *
                  C21355 +
              (C31092 * C1670 - C31090 * C1675 + C31093 * C5896 -
               C47481 * C5899) *
                  C47110) *
                 C47479) *
                C47268) *
               C47461) *
              C47415 +
          (((((C31096 - C31095 + C31098 - C31097) * C21355 +
              (C31100 - C31099 + C31102 - C31101) * C47110) *
                 C4717 +
             ((C31273 - C31274 + C31275 - C31276) * C21355 +
              (C31277 - C31278 + C31279 - C31280) * C47110) *
                 C47479) *
                C47430 +
            (((C31452 - C31451 + C31454 - C31453) * C21355 +
              (C31456 - C31455 + C31458 - C31457) * C47110) *
                 C4717 +
             ((C31953 - C31954 + C31955 - C31956) * C21355 +
              (C31957 - C31958 + C31959 - C31960) * C47110) *
                 C47479) *
                C47268) *
               C1050 +
           ((((C31274 - C31273 + C31276 - C31275) * C21355 +
              (C31278 - C31277 + C31280 - C31279) * C47110) *
                 C4717 +
             ((C31281 - C31282 + C31283 - C31284) * C21355 +
              (C31285 - C31286 + C31287 - C31288) * C47110) *
                 C47479) *
                C47430 +
            (((C31954 - C31953 + C31956 - C31955) * C21355 +
              (C31958 - C31957 + C31960 - C31959) * C47110) *
                 C4717 +
             ((C32675 - C32676 + C32677 - C32678) * C21355 +
              (C32679 - C32680 + C32681 - C32682) * C47110) *
                 C47479) *
                C47268) *
               C1051 +
           ((((C31282 - C31281 + C31284 - C31283) * C21355 +
              (C31286 - C31285 + C31288 - C31287) * C47110) *
                 C4717 +
             ((C32473 - C32474 + C32475 - C32476) * C21355 +
              (C32477 - C32478 + C32479 - C32480) * C47110) *
                 C47479) *
                C47430 +
            (((C32676 - C32675 + C32678 - C32677) * C21355 +
              (C32680 - C32679 + C32682 - C32681) * C47110) *
                 C4717 +
             ((C31090 * C1671 - C31092 * C1667 + C47481 * C5897 -
               C31093 * C5894) *
                  C21355 +
              (C31090 * C1676 - C31092 * C1672 + C47481 * C5900 -
               C31093 * C5898) *
                  C47110) *
                 C47479) *
                C47268) *
               C47461) *
              C47146)) /
            (p * q * std::sqrt(p + q));
    d2ee[199] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C31090 * C124 - C31092 * C117 + C47481 * C478 - C31093 * C468) *
                C21355 +
            (C31090 * C138 - C31092 * C125 + C47481 * C498 - C31093 * C479) *
                C47110) *
               C4717 +
           ((C31090 * C297 - C31092 * C287 + C47481 * C911 - C31093 * C906) *
                C21355 +
            (C31090 * C317 - C31092 * C298 + C47481 * C921 - C31093 * C912) *
                C47110) *
               C47479) *
              C47181 * C47163 * C108 +
          (((C31096 - C31095 + C31098 - C31097) * C21355 +
            (C31100 - C31099 + C31102 - C31101) * C47110) *
               C4717 +
           ((C31273 - C31274 + C31275 - C31276) * C21355 +
            (C31277 - C31278 + C31279 - C31280) * C47110) *
               C47479) *
              C47181 * C47163 * C109 +
          (((C31104 - C31103 + C31106 - C31105) * C21355 +
            (C31108 - C31107 + C31110 - C31109) * C47110) *
               C4717 +
           ((C31289 - C31290 + C31291 - C31292) * C21355 +
            (C31293 - C31294 + C31295 - C31296) * C47110) *
               C47479) *
              C47181 * C47163 * C110 +
          (((C31112 - C31111 + C31114 - C31113) * C21355 +
            (C31116 - C31115 + C31118 - C31117) * C47110) *
               C4717 +
           ((C31613 - C31614 + C31615 - C31616) * C21355 +
            (C31617 - C31618 + C31619 - C31620) * C47110) *
               C47479) *
              C47181 * C47163 * C111 +
          (((C31120 - C31119 + C31122 - C31121) * C21355 +
            (C31124 - C31123 + C31126 - C31125) * C47110) *
               C4717 +
           ((C31090 * C313 - C31092 * C295 + C47481 * C919 - C31093 * C910) *
                C21355 +
            (C31090 * C325 - C31092 * C314 + C47481 * C925 - C31093 * C920) *
                C47110) *
               C47479) *
              C47181 * C47163 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C31090 * C124 - C31092 * C117 + C47481 * C478 - C31093 * C468) *
                 C21355 +
             (C31090 * C138 - C31092 * C125 + C47481 * C498 - C31093 * C479) *
                 C47110) *
                C4717 +
            ((C36849 - C36850 + C36851 - C36852) * C21355 +
             (C36853 - C36854 + C36855 - C36856) * C47110) *
                C47479) *
               C47181 * C47500 +
           (((C36850 - C36849 + C36852 - C36851) * C21355 +
             (C36854 - C36853 + C36856 - C36855) * C47110) *
                C4717 +
            ((C36857 - C36858 + C36859 - C36860) * C21355 +
             (C36861 - C36862 + C36863 - C36864) * C47110) *
                C47479) *
               C47181 * C47488 +
           (((C36858 - C36857 + C36860 - C36859) * C21355 +
             (C36862 - C36861 + C36864 - C36863) * C47110) *
                C4717 +
            ((C31090 * C1130 - C31092 * C1124 + C47481 * C1669 -
              C31093 * C1666) *
                 C21355 +
             (C31090 * C1142 - C31092 * C1131 + C47481 * C1675 -
              C31093 * C1670) *
                 C47110) *
                C47479) *
               C47181 * C47461) *
              C284 +
          ((((C31096 - C31095 + C31098 - C31097) * C21355 +
             (C31100 - C31099 + C31102 - C31101) * C47110) *
                C4717 +
            ((C31273 - C31274 + C31275 - C31276) * C21355 +
             (C31277 - C31278 + C31279 - C31280) * C47110) *
                C47479) *
               C47181 * C47500 +
           (((C31274 - C31273 + C31276 - C31275) * C21355 +
             (C31278 - C31277 + C31280 - C31279) * C47110) *
                C4717 +
            ((C31281 - C31282 + C31283 - C31284) * C21355 +
             (C31285 - C31286 + C31287 - C31288) * C47110) *
                C47479) *
               C47181 * C47488 +
           (((C31282 - C31281 + C31284 - C31283) * C21355 +
             (C31286 - C31285 + C31288 - C31287) * C47110) *
                C4717 +
            ((C32473 - C32474 + C32475 - C32476) * C21355 +
             (C32477 - C32478 + C32479 - C32480) * C47110) *
                C47479) *
               C47181 * C47461) *
              C285 +
          ((((C31104 - C31103 + C31106 - C31105) * C21355 +
             (C31108 - C31107 + C31110 - C31109) * C47110) *
                C4717 +
            ((C31289 - C31290 + C31291 - C31292) * C21355 +
             (C31293 - C31294 + C31295 - C31296) * C47110) *
                C47479) *
               C47181 * C47500 +
           (((C31290 - C31289 + C31292 - C31291) * C21355 +
             (C31294 - C31293 + C31296 - C31295) * C47110) *
                C4717 +
            ((C31297 - C31298 + C31299 - C31300) * C21355 +
             (C31301 - C31302 + C31303 - C31304) * C47110) *
                C47479) *
               C47181 * C47488 +
           (((C31298 - C31297 + C31300 - C31299) * C21355 +
             (C31302 - C31301 + C31304 - C31303) * C47110) *
                C4717 +
            ((C31090 * C1134 - C31092 * C1126 + C47481 * C1673 -
              C31093 * C1668) *
                 C21355 +
             (C31090 * C1144 - C31092 * C1135 + C47481 * C1677 -
              C31093 * C1674) *
                 C47110) *
                C47479) *
               C47181 * C47461) *
              C47455)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C31090 * C124 - C31092 * C117 + C47481 * C478 - C31093 * C468) *
                 C21355 +
             (C31090 * C138 - C31092 * C125 + C47481 * C498 - C31093 * C479) *
                 C47110) *
                C4717 +
            ((C36849 - C36850 + C36851 - C36852) * C21355 +
             (C36853 - C36854 + C36855 - C36856) * C47110) *
                C47479) *
               C47181 * C1050 +
           (((C36850 - C36849 + C36852 - C36851) * C21355 +
             (C36854 - C36853 + C36856 - C36855) * C47110) *
                C4717 +
            ((C36857 - C36858 + C36859 - C36860) * C21355 +
             (C36861 - C36862 + C36863 - C36864) * C47110) *
                C47479) *
               C47181 * C1051 +
           (((C36858 - C36857 + C36860 - C36859) * C21355 +
             (C36862 - C36861 + C36864 - C36863) * C47110) *
                C4717 +
            ((C31090 * C1130 - C31092 * C1124 + C47481 * C1669 -
              C31093 * C1666) *
                 C21355 +
             (C31090 * C1142 - C31092 * C1131 + C47481 * C1675 -
              C31093 * C1670) *
                 C47110) *
                C47479) *
               C47181 * C47461) *
              C47497 +
          ((((C31096 - C31095 + C31098 - C31097) * C21355 +
             (C31100 - C31099 + C31102 - C31101) * C47110) *
                C4717 +
            ((C31273 - C31274 + C31275 - C31276) * C21355 +
             (C31277 - C31278 + C31279 - C31280) * C47110) *
                C47479) *
               C47181 * C1050 +
           (((C31274 - C31273 + C31276 - C31275) * C21355 +
             (C31278 - C31277 + C31280 - C31279) * C47110) *
                C4717 +
            ((C31281 - C31282 + C31283 - C31284) * C21355 +
             (C31285 - C31286 + C31287 - C31288) * C47110) *
                C47479) *
               C47181 * C1051 +
           (((C31282 - C31281 + C31284 - C31283) * C21355 +
             (C31286 - C31285 + C31288 - C31287) * C47110) *
                C4717 +
            ((C32473 - C32474 + C32475 - C32476) * C21355 +
             (C32477 - C32478 + C32479 - C32480) * C47110) *
                C47479) *
               C47181 * C47461) *
              C47484 +
          ((((C31104 - C31103 + C31106 - C31105) * C21355 +
             (C31108 - C31107 + C31110 - C31109) * C47110) *
                C4717 +
            ((C31289 - C31290 + C31291 - C31292) * C21355 +
             (C31293 - C31294 + C31295 - C31296) * C47110) *
                C47479) *
               C47181 * C1050 +
           (((C31290 - C31289 + C31292 - C31291) * C21355 +
             (C31294 - C31293 + C31296 - C31295) * C47110) *
                C4717 +
            ((C31297 - C31298 + C31299 - C31300) * C21355 +
             (C31301 - C31302 + C31303 - C31304) * C47110) *
                C47479) *
               C47181 * C1051 +
           (((C31298 - C31297 + C31300 - C31299) * C21355 +
             (C31302 - C31301 + C31304 - C31303) * C47110) *
                C4717 +
            ((C31090 * C1134 - C31092 * C1126 + C47481 * C1673 -
              C31093 * C1668) *
                 C21355 +
             (C31090 * C1144 - C31092 * C1135 + C47481 * C1677 -
              C31093 * C1674) *
                 C47110) *
                C47479) *
               C47181 * C47461) *
              C47455)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C31090 * C124 - C31092 * C117 + C47481 * C478 - C31093 * C468) *
                C21355 +
            (C31090 * C138 - C31092 * C125 + C47481 * C498 - C31093 * C479) *
                C47110) *
               C4717 +
           ((C36849 - C36850 + C36851 - C36852) * C21355 +
            (C36853 - C36854 + C36855 - C36856) * C47110) *
               C47479) *
              C47181 * C1118 +
          (((C36850 - C36849 + C36852 - C36851) * C21355 +
            (C36854 - C36853 + C36856 - C36855) * C47110) *
               C4717 +
           ((C36857 - C36858 + C36859 - C36860) * C21355 +
            (C36861 - C36862 + C36863 - C36864) * C47110) *
               C47479) *
              C47181 * C1119 +
          (((C36858 - C36857 + C36860 - C36859) * C21355 +
            (C36862 - C36861 + C36864 - C36863) * C47110) *
               C4717 +
           ((C37701 - C37702 + C37703 - C37704) * C21355 +
            (C37705 - C37706 + C37707 - C37708) * C47110) *
               C47479) *
              C47181 * C1120 +
          (((C37702 - C37701 + C37704 - C37703) * C21355 +
            (C37706 - C37705 + C37708 - C37707) * C47110) *
               C4717 +
           ((C37709 - C37710 + C37711 - C37712) * C21355 +
            (C37713 - C37714 + C37715 - C37716) * C47110) *
               C47479) *
              C47181 * C1121 +
          (((C37710 - C37709 + C37712 - C37711) * C21355 +
            (C37714 - C37713 + C37716 - C37715) * C47110) *
               C4717 +
           ((C31090 * C5729 - C31092 * C5727 + C47481 * C22596 -
             C31093 * C22595) *
                C21355 +
            (C31090 * C5733 - C31092 * C5730 + C47481 * C22598 -
             C31093 * C22597) *
                C47110) *
               C47479) *
              C47181 * C1122) *
         C47135) /
            (p * q * std::sqrt(p + q));
    d2ee[200] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((C42210 * C124 - C42213 * C117 + C42211 * C478 -
                      C42214 * C468 + C42212 * C484 - C42215 * C471) *
                         C21355 +
                     (C42210 * C138 - C42213 * C125 + C42211 * C498 -
                      C42214 * C479 + C42212 * C501 - C42215 * C485) *
                         C47110) *
                        C47369 * C47181 * C47222 +
                    ((C42213 * C287 - C42210 * C297 + C42214 * C906 -
                      C42211 * C911 + C42215 * C1258 - C42212 * C1267) *
                         C21355 +
                     (C42213 * C298 - C42210 * C317 + C42214 * C912 -
                      C42211 * C921 + C42215 * C1268 - C42212 * C1285) *
                         C47110) *
                        C47369 * C47181 * C47229 +
                    ((C42210 * C303 - C42213 * C290 + C42211 * C1273 -
                      C42214 * C1261 + C42212 * C1279 - C42215 * C1264) *
                         C21355 +
                     (C42210 * C320 - C42213 * C304 + C42211 * C1288 -
                      C42214 * C1274 + C42212 * C1291 - C42215 * C1280) *
                         C47110) *
                        C47369 * C47181 * C2840) *
                       C47140 +
                   (((C42213 * C118 - C42210 * C126 + C42214 * C469 -
                      C42211 * C480 + C42215 * C472 - C42212 * C486) *
                         C21355 +
                     (C42213 * C127 - C42210 * C139 + C42214 * C481 -
                      C42211 * C499 + C42215 * C487 - C42212 * C502) *
                         C47110) *
                        C47369 * C47181 * C47222 +
                    ((C42210 * C299 - C42213 * C288 + C42211 * C913 -
                      C42214 * C907 + C42212 * C1269 - C42215 * C1259) *
                         C21355 +
                     (C42210 * C318 - C42213 * C300 + C42211 * C922 -
                      C42214 * C914 + C42212 * C1286 - C42215 * C1270) *
                         C47110) *
                        C47369 * C47181 * C47229 +
                    ((C42213 * C291 - C42210 * C305 + C42214 * C1262 -
                      C42211 * C1275 + C42215 * C1265 - C42212 * C1281) *
                         C21355 +
                     (C42213 * C306 - C42210 * C321 + C42214 * C1276 -
                      C42211 * C1289 + C42215 * C1282 - C42212 * C1292) *
                         C47110) *
                        C47369 * C47181 * C2840) *
                       C47149 +
                   (((C42210 * C128 - C42213 * C119 + C42211 * C482 -
                      C42214 * C470 + C42212 * C488 - C42215 * C473) *
                         C21355 +
                     (C42210 * C140 - C42213 * C129 + C42211 * C500 -
                      C42214 * C483 + C42212 * C503 - C42215 * C489) *
                         C47110) *
                        C47369 * C47181 * C47222 +
                    ((C42213 * C289 - C42210 * C301 + C42214 * C908 -
                      C42211 * C915 + C42215 * C1260 - C42212 * C1271) *
                         C21355 +
                     (C42213 * C302 - C42210 * C319 + C42214 * C916 -
                      C42211 * C923 + C42215 * C1272 - C42212 * C1287) *
                         C47110) *
                        C47369 * C47181 * C47229 +
                    ((C42210 * C307 - C42213 * C292 + C42211 * C1277 -
                      C42214 * C1263 + C42212 * C1283 - C42215 * C1266) *
                         C21355 +
                     (C42210 * C322 - C42213 * C308 + C42211 * C1290 -
                      C42214 * C1278 + C42212 * C1293 - C42215 * C1284) *
                         C47110) *
                        C47369 * C47181 * C2840) *
                       C2843)) /
                 (p * q * std::sqrt(p + q));
    d2ee[201] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((((C42210 * C124 - C42213 * C117 + C42211 * C478 -
                       C42214 * C468 + C42212 * C484 - C42215 * C471) *
                          C21355 +
                      (C42210 * C138 - C42213 * C125 + C42211 * C498 -
                       C42214 * C479 + C42212 * C501 - C42215 * C485) *
                          C47110) *
                         C47369 * C47430 +
                     ((C42213 * C468 - C42210 * C478 + C42214 * C471 -
                       C42211 * C484 + C42215 * C1968 - C42212 * C1974) *
                          C21355 +
                      (C42213 * C479 - C42210 * C498 + C42214 * C485 -
                       C42211 * C501 + C42215 * C1975 - C42212 * C1986) *
                          C47110) *
                         C47369 * C47268) *
                        C47222 +
                    (((C42213 * C287 - C42210 * C297 + C42214 * C906 -
                       C42211 * C911 + C42215 * C1258 - C42212 * C1267) *
                          C21355 +
                      (C42213 * C298 - C42210 * C317 + C42214 * C912 -
                       C42211 * C921 + C42215 * C1268 - C42212 * C1285) *
                          C47110) *
                         C47369 * C47430 +
                     ((C42210 * C911 - C42213 * C906 + C42211 * C1267 -
                       C42214 * C1258 + C42212 * C2365 - C42215 * C2362) *
                          C21355 +
                      (C42210 * C921 - C42213 * C912 + C42211 * C1285 -
                       C42214 * C1268 + C42212 * C2371 - C42215 * C2366) *
                          C47110) *
                         C47369 * C47268) *
                        C47229 +
                    (((C42210 * C303 - C42213 * C290 + C42211 * C1273 -
                       C42214 * C1261 + C42212 * C1279 - C42215 * C1264) *
                          C21355 +
                      (C42210 * C320 - C42213 * C304 + C42211 * C1288 -
                       C42214 * C1274 + C42212 * C1291 - C42215 * C1280) *
                          C47110) *
                         C47369 * C47430 +
                     ((C42213 * C1261 - C42210 * C1273 + C42214 * C1264 -
                       C42211 * C1279 + C42215 * C7239 - C42212 * C7241) *
                          C21355 +
                      (C42213 * C1274 - C42210 * C1288 + C42214 * C1280 -
                       C42211 * C1291 + C42215 * C7242 - C42212 * C7245) *
                          C47110) *
                         C47369 * C47268) *
                        C2840) *
                       C2580 +
                   ((((C42213 * C118 - C42210 * C126 + C42214 * C469 -
                       C42211 * C480 + C42215 * C472 - C42212 * C486) *
                          C21355 +
                      (C42213 * C127 - C42210 * C139 + C42214 * C481 -
                       C42211 * C499 + C42215 * C487 - C42212 * C502) *
                          C47110) *
                         C47369 * C47430 +
                     ((C42210 * C480 - C42213 * C469 + C42211 * C486 -
                       C42214 * C472 + C42212 * C1976 - C42215 * C1969) *
                          C21355 +
                      (C42210 * C499 - C42213 * C481 + C42211 * C502 -
                       C42214 * C487 + C42212 * C1987 - C42215 * C1977) *
                          C47110) *
                         C47369 * C47268) *
                        C47222 +
                    (((C42210 * C299 - C42213 * C288 + C42211 * C913 -
                       C42214 * C907 + C42212 * C1269 - C42215 * C1259) *
                          C21355 +
                      (C42210 * C318 - C42213 * C300 + C42211 * C922 -
                       C42214 * C914 + C42212 * C1286 - C42215 * C1270) *
                          C47110) *
                         C47369 * C47430 +
                     ((C42213 * C907 - C42210 * C913 + C42214 * C1259 -
                       C42211 * C1269 + C42215 * C2363 - C42212 * C2367) *
                          C21355 +
                      (C42213 * C914 - C42210 * C922 + C42214 * C1270 -
                       C42211 * C1286 + C42215 * C2368 - C42212 * C2372) *
                          C47110) *
                         C47369 * C47268) *
                        C47229 +
                    (((C42213 * C291 - C42210 * C305 + C42214 * C1262 -
                       C42211 * C1275 + C42215 * C1265 - C42212 * C1281) *
                          C21355 +
                      (C42213 * C306 - C42210 * C321 + C42214 * C1276 -
                       C42211 * C1289 + C42215 * C1282 - C42212 * C1292) *
                          C47110) *
                         C47369 * C47430 +
                     ((C42210 * C1275 - C42213 * C1262 + C42211 * C1281 -
                       C42214 * C1265 + C42212 * C7243 - C42215 * C7240) *
                          C21355 +
                      (C42210 * C1289 - C42213 * C1276 + C42211 * C1292 -
                       C42214 * C1282 + C42212 * C7246 - C42215 * C7244) *
                          C47110) *
                         C47369 * C47268) *
                        C2840) *
                       C47146)) /
                 (p * q * std::sqrt(p + q));
    d2ee[202] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C42210 * C124 - C42213 * C117 + C42211 * C478 -
                      C42214 * C468 + C42212 * C484 - C42215 * C471) *
                         C21355 +
                     (C42210 * C138 - C42213 * C125 + C42211 * C498 -
                      C42214 * C479 + C42212 * C501 - C42215 * C485) *
                         C47110) *
                        C47369 * C47181 * C47507 +
                    ((C42213 * C287 - C42210 * C297 + C42214 * C906 -
                      C42211 * C911 + C42215 * C1258 - C42212 * C1267) *
                         C21355 +
                     (C42213 * C298 - C42210 * C317 + C42214 * C912 -
                      C42211 * C921 + C42215 * C1268 - C42212 * C1285) *
                         C47110) *
                        C47369 * C47181 * C47503 +
                    ((C42210 * C303 - C42213 * C290 + C42211 * C1273 -
                      C42214 * C1261 + C42212 * C1279 - C42215 * C1264) *
                         C21355 +
                     (C42210 * C320 - C42213 * C304 + C42211 * C1288 -
                      C42214 * C1274 + C42212 * C1291 - C42215 * C1280) *
                         C47110) *
                        C47369 * C47181 * C47493 +
                    ((C42213 * C1124 - C42210 * C1130 + C42214 * C1666 -
                      C42211 * C1669 + C42215 * C5893 - C42212 * C5895) *
                         C21355 +
                     (C42213 * C1131 - C42210 * C1142 + C42214 * C1670 -
                      C42211 * C1675 + C42215 * C5896 - C42212 * C5899) *
                         C47110) *
                        C47369 * C47181 * C47471) *
                       C2580 +
                   (((C42213 * C118 - C42210 * C126 + C42214 * C469 -
                      C42211 * C480 + C42215 * C472 - C42212 * C486) *
                         C21355 +
                     (C42213 * C127 - C42210 * C139 + C42214 * C481 -
                      C42211 * C499 + C42215 * C487 - C42212 * C502) *
                         C47110) *
                        C47369 * C47181 * C47507 +
                    ((C42210 * C299 - C42213 * C288 + C42211 * C913 -
                      C42214 * C907 + C42212 * C1269 - C42215 * C1259) *
                         C21355 +
                     (C42210 * C318 - C42213 * C300 + C42211 * C922 -
                      C42214 * C914 + C42212 * C1286 - C42215 * C1270) *
                         C47110) *
                        C47369 * C47181 * C47503 +
                    ((C42213 * C291 - C42210 * C305 + C42214 * C1262 -
                      C42211 * C1275 + C42215 * C1265 - C42212 * C1281) *
                         C21355 +
                     (C42213 * C306 - C42210 * C321 + C42214 * C1276 -
                      C42211 * C1289 + C42215 * C1282 - C42212 * C1292) *
                         C47110) *
                        C47369 * C47181 * C47493 +
                    ((C42210 * C1132 - C42213 * C1125 + C42211 * C1671 -
                      C42214 * C1667 + C42212 * C5897 - C42215 * C5894) *
                         C21355 +
                     (C42210 * C1143 - C42213 * C1133 + C42211 * C1676 -
                      C42214 * C1672 + C42212 * C5900 - C42215 * C5898) *
                         C47110) *
                        C47369 * C47181 * C47471) *
                       C47146)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C42210 * C124 - C42213 * C117 + C42211 * C478 -
                      C42214 * C468 + C42212 * C484 - C42215 * C471) *
                         C21355 +
                     (C42210 * C138 - C42213 * C125 + C42211 * C498 -
                      C42214 * C479 + C42212 * C501 - C42215 * C485) *
                         C47110) *
                        C47369 * C47181 * C2472 +
                    ((C42213 * C287 - C42210 * C297 + C42214 * C906 -
                      C42211 * C911 + C42215 * C1258 - C42212 * C1267) *
                         C21355 +
                     (C42213 * C298 - C42210 * C317 + C42214 * C912 -
                      C42211 * C921 + C42215 * C1268 - C42212 * C1285) *
                         C47110) *
                        C47369 * C47181 * C47226) *
                       C47506 +
                   (((C42213 * C118 - C42210 * C126 + C42214 * C469 -
                      C42211 * C480 + C42215 * C472 - C42212 * C486) *
                         C21355 +
                     (C42213 * C127 - C42210 * C139 + C42214 * C481 -
                      C42211 * C499 + C42215 * C487 - C42212 * C502) *
                         C47110) *
                        C47369 * C47181 * C2472 +
                    ((C42210 * C299 - C42213 * C288 + C42211 * C913 -
                      C42214 * C907 + C42212 * C1269 - C42215 * C1259) *
                         C21355 +
                     (C42210 * C318 - C42213 * C300 + C42211 * C922 -
                      C42214 * C914 + C42212 * C1286 - C42215 * C1270) *
                         C47110) *
                        C47369 * C47181 * C47226) *
                       C47499 +
                   (((C42210 * C128 - C42213 * C119 + C42211 * C482 -
                      C42214 * C470 + C42212 * C488 - C42215 * C473) *
                         C21355 +
                     (C42210 * C140 - C42213 * C129 + C42211 * C500 -
                      C42214 * C483 + C42212 * C503 - C42215 * C489) *
                         C47110) *
                        C47369 * C47181 * C2472 +
                    ((C42213 * C289 - C42210 * C301 + C42214 * C908 -
                      C42211 * C915 + C42215 * C1260 - C42212 * C1271) *
                         C21355 +
                     (C42213 * C302 - C42210 * C319 + C42214 * C916 -
                      C42211 * C923 + C42215 * C1272 - C42212 * C1287) *
                         C47110) *
                        C47369 * C47181 * C47226) *
                       C47486 +
                   (((C42213 * C120 - C42210 * C130 + C42214 * C474 -
                      C42211 * C490 + C42215 * C475 - C42212 * C492) *
                         C21355 +
                     (C42213 * C131 - C42210 * C141 + C42214 * C491 -
                      C42211 * C504 + C42215 * C493 - C42212 * C505) *
                         C47110) *
                        C47369 * C47181 * C2472 +
                    ((C42210 * C309 - C42213 * C293 + C42211 * C917 -
                      C42214 * C909 + C42212 * C2139 - C42215 * C2138) *
                         C21355 +
                     (C42210 * C323 - C42213 * C310 + C42211 * C924 -
                      C42214 * C918 + C42212 * C2141 - C42215 * C2140) *
                         C47110) *
                        C47369 * C47181 * C47226) *
                       C47465)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  (((((C42210 * C124 - C42213 * C117 + C42211 * C478 -
                       C42214 * C468 + C42212 * C484 - C42215 * C471) *
                          C21355 +
                      (C42210 * C138 - C42213 * C125 + C42211 * C498 -
                       C42214 * C479 + C42212 * C501 - C42215 * C485) *
                          C47110) *
                         C47369 * C47501 +
                     ((C42213 * C468 - C42210 * C478 + C42214 * C471 -
                       C42211 * C484 + C42215 * C1968 - C42212 * C1974) *
                          C21355 +
                      (C42213 * C479 - C42210 * C498 + C42214 * C485 -
                       C42211 * C501 + C42215 * C1975 - C42212 * C1986) *
                          C47110) *
                         C47369 * C47490 +
                     ((C42210 * C484 - C42213 * C471 + C42211 * C1974 -
                       C42214 * C1968 + C42212 * C1980 - C42215 * C1971) *
                          C21355 +
                      (C42210 * C501 - C42213 * C485 + C42211 * C1986 -
                       C42214 * C1975 + C42212 * C1989 - C42215 * C1981) *
                          C47110) *
                         C47369 * C47464) *
                        C2472 +
                    (((C42213 * C287 - C42210 * C297 + C42214 * C906 -
                       C42211 * C911 + C42215 * C1258 - C42212 * C1267) *
                          C21355 +
                      (C42213 * C298 - C42210 * C317 + C42214 * C912 -
                       C42211 * C921 + C42215 * C1268 - C42212 * C1285) *
                          C47110) *
                         C47369 * C47501 +
                     ((C42210 * C911 - C42213 * C906 + C42211 * C1267 -
                       C42214 * C1258 + C42212 * C2365 - C42215 * C2362) *
                          C21355 +
                      (C42210 * C921 - C42213 * C912 + C42211 * C1285 -
                       C42214 * C1268 + C42212 * C2371 - C42215 * C2366) *
                          C47110) *
                         C47369 * C47490 +
                     ((C42213 * C1258 - C42210 * C1267 + C42214 * C2362 -
                       C42211 * C2365 + C42215 * C6769 - C42212 * C6771) *
                          C21355 +
                      (C42213 * C1268 - C42210 * C1285 + C42214 * C2366 -
                       C42211 * C2371 + C42215 * C6772 - C42212 * C6775) *
                          C47110) *
                         C47369 * C47464) *
                        C47226) *
                       C2580 +
                   ((((C42213 * C118 - C42210 * C126 + C42214 * C469 -
                       C42211 * C480 + C42215 * C472 - C42212 * C486) *
                          C21355 +
                      (C42213 * C127 - C42210 * C139 + C42214 * C481 -
                       C42211 * C499 + C42215 * C487 - C42212 * C502) *
                          C47110) *
                         C47369 * C47501 +
                     ((C42210 * C480 - C42213 * C469 + C42211 * C486 -
                       C42214 * C472 + C42212 * C1976 - C42215 * C1969) *
                          C21355 +
                      (C42210 * C499 - C42213 * C481 + C42211 * C502 -
                       C42214 * C487 + C42212 * C1987 - C42215 * C1977) *
                          C47110) *
                         C47369 * C47490 +
                     ((C42213 * C472 - C42210 * C486 + C42214 * C1969 -
                       C42211 * C1976 + C42215 * C1972 - C42212 * C1982) *
                          C21355 +
                      (C42213 * C487 - C42210 * C502 + C42214 * C1977 -
                       C42211 * C1987 + C42215 * C1983 - C42212 * C1990) *
                          C47110) *
                         C47369 * C47464) *
                        C2472 +
                    (((C42210 * C299 - C42213 * C288 + C42211 * C913 -
                       C42214 * C907 + C42212 * C1269 - C42215 * C1259) *
                          C21355 +
                      (C42210 * C318 - C42213 * C300 + C42211 * C922 -
                       C42214 * C914 + C42212 * C1286 - C42215 * C1270) *
                          C47110) *
                         C47369 * C47501 +
                     ((C42213 * C907 - C42210 * C913 + C42214 * C1259 -
                       C42211 * C1269 + C42215 * C2363 - C42212 * C2367) *
                          C21355 +
                      (C42213 * C914 - C42210 * C922 + C42214 * C1270 -
                       C42211 * C1286 + C42215 * C2368 - C42212 * C2372) *
                          C47110) *
                         C47369 * C47490 +
                     ((C42210 * C1269 - C42213 * C1259 + C42211 * C2367 -
                       C42214 * C2363 + C42212 * C6773 - C42215 * C6770) *
                          C21355 +
                      (C42210 * C1286 - C42213 * C1270 + C42211 * C2372 -
                       C42214 * C2368 + C42212 * C6776 - C42215 * C6774) *
                          C47110) *
                         C47369 * C47464) *
                        C47226) *
                       C47146)) /
                     (p * q * std::sqrt(p + q));
    d2ee[203] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((((C42210 * C124 - C42213 * C117 + C42211 * C478 -
                       C42214 * C468 + C42212 * C484 - C42215 * C471) *
                          C21355 +
                      (C42210 * C138 - C42213 * C125 + C42211 * C498 -
                       C42214 * C479 + C42212 * C501 - C42215 * C485) *
                          C47110) *
                         C47369 * C47430 +
                     ((C42213 * C468 - C42210 * C478 + C42214 * C471 -
                       C42211 * C484 + C42215 * C1968 - C42212 * C1974) *
                          C21355 +
                      (C42213 * C479 - C42210 * C498 + C42214 * C485 -
                       C42211 * C501 + C42215 * C1975 - C42212 * C1986) *
                          C47110) *
                         C47369 * C47268) *
                        C2472 +
                    (((C42213 * C287 - C42210 * C297 + C42214 * C906 -
                       C42211 * C911 + C42215 * C1258 - C42212 * C1267) *
                          C21355 +
                      (C42213 * C298 - C42210 * C317 + C42214 * C912 -
                       C42211 * C921 + C42215 * C1268 - C42212 * C1285) *
                          C47110) *
                         C47369 * C47430 +
                     ((C42210 * C911 - C42213 * C906 + C42211 * C1267 -
                       C42214 * C1258 + C42212 * C2365 - C42215 * C2362) *
                          C21355 +
                      (C42210 * C921 - C42213 * C912 + C42211 * C1285 -
                       C42214 * C1268 + C42212 * C2371 - C42215 * C2366) *
                          C47110) *
                         C47369 * C47268) *
                        C47226) *
                       C47140 +
                   ((((C42213 * C118 - C42210 * C126 + C42214 * C469 -
                       C42211 * C480 + C42215 * C472 - C42212 * C486) *
                          C21355 +
                      (C42213 * C127 - C42210 * C139 + C42214 * C481 -
                       C42211 * C499 + C42215 * C487 - C42212 * C502) *
                          C47110) *
                         C47369 * C47430 +
                     ((C42210 * C480 - C42213 * C469 + C42211 * C486 -
                       C42214 * C472 + C42212 * C1976 - C42215 * C1969) *
                          C21355 +
                      (C42210 * C499 - C42213 * C481 + C42211 * C502 -
                       C42214 * C487 + C42212 * C1987 - C42215 * C1977) *
                          C47110) *
                         C47369 * C47268) *
                        C2472 +
                    (((C42210 * C299 - C42213 * C288 + C42211 * C913 -
                       C42214 * C907 + C42212 * C1269 - C42215 * C1259) *
                          C21355 +
                      (C42210 * C318 - C42213 * C300 + C42211 * C922 -
                       C42214 * C914 + C42212 * C1286 - C42215 * C1270) *
                          C47110) *
                         C47369 * C47430 +
                     ((C42213 * C907 - C42210 * C913 + C42214 * C1259 -
                       C42211 * C1269 + C42215 * C2363 - C42212 * C2367) *
                          C21355 +
                      (C42213 * C914 - C42210 * C922 + C42214 * C1270 -
                       C42211 * C1286 + C42215 * C2368 - C42212 * C2372) *
                          C47110) *
                         C47369 * C47268) *
                        C47226) *
                       C47149 +
                   ((((C42210 * C128 - C42213 * C119 + C42211 * C482 -
                       C42214 * C470 + C42212 * C488 - C42215 * C473) *
                          C21355 +
                      (C42210 * C140 - C42213 * C129 + C42211 * C500 -
                       C42214 * C483 + C42212 * C503 - C42215 * C489) *
                          C47110) *
                         C47369 * C47430 +
                     ((C42213 * C470 - C42210 * C482 + C42214 * C473 -
                       C42211 * C488 + C42215 * C1970 - C42212 * C1978) *
                          C21355 +
                      (C42213 * C483 - C42210 * C500 + C42214 * C489 -
                       C42211 * C503 + C42215 * C1979 - C42212 * C1988) *
                          C47110) *
                         C47369 * C47268) *
                        C2472 +
                    (((C42213 * C289 - C42210 * C301 + C42214 * C908 -
                       C42211 * C915 + C42215 * C1260 - C42212 * C1271) *
                          C21355 +
                      (C42213 * C302 - C42210 * C319 + C42214 * C916 -
                       C42211 * C923 + C42215 * C1272 - C42212 * C1287) *
                          C47110) *
                         C47369 * C47430 +
                     ((C42210 * C915 - C42213 * C908 + C42211 * C1271 -
                       C42214 * C1260 + C42212 * C2369 - C42215 * C2364) *
                          C21355 +
                      (C42210 * C923 - C42213 * C916 + C42211 * C1287 -
                       C42214 * C1272 + C42212 * C2373 - C42215 * C2370) *
                          C47110) *
                         C47369 * C47268) *
                        C47226) *
                       C2843)) /
                 (p * q * std::sqrt(p + q));
    d2ee[204] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((C42210 * C124 - C42213 * C117 + C42211 * C478 -
                      C42214 * C468 + C42212 * C484 - C42215 * C471) *
                         C21355 +
                     (C42210 * C138 - C42213 * C125 + C42211 * C498 -
                      C42214 * C479 + C42212 * C501 - C42215 * C485) *
                         C47110) *
                        C47369 * C47181 * C2472 +
                    ((C42213 * C287 - C42210 * C297 + C42214 * C906 -
                      C42211 * C911 + C42215 * C1258 - C42212 * C1267) *
                         C21355 +
                     (C42213 * C298 - C42210 * C317 + C42214 * C912 -
                      C42211 * C921 + C42215 * C1268 - C42212 * C1285) *
                         C47110) *
                        C47369 * C47181 * C47226) *
                       C47506 +
                   (((C42213 * C118 - C42210 * C126 + C42214 * C469 -
                      C42211 * C480 + C42215 * C472 - C42212 * C486) *
                         C21355 +
                     (C42213 * C127 - C42210 * C139 + C42214 * C481 -
                      C42211 * C499 + C42215 * C487 - C42212 * C502) *
                         C47110) *
                        C47369 * C47181 * C2472 +
                    ((C42210 * C299 - C42213 * C288 + C42211 * C913 -
                      C42214 * C907 + C42212 * C1269 - C42215 * C1259) *
                         C21355 +
                     (C42210 * C318 - C42213 * C300 + C42211 * C922 -
                      C42214 * C914 + C42212 * C1286 - C42215 * C1270) *
                         C47110) *
                        C47369 * C47181 * C47226) *
                       C47499 +
                   (((C42210 * C128 - C42213 * C119 + C42211 * C482 -
                      C42214 * C470 + C42212 * C488 - C42215 * C473) *
                         C21355 +
                     (C42210 * C140 - C42213 * C129 + C42211 * C500 -
                      C42214 * C483 + C42212 * C503 - C42215 * C489) *
                         C47110) *
                        C47369 * C47181 * C2472 +
                    ((C42213 * C289 - C42210 * C301 + C42214 * C908 -
                      C42211 * C915 + C42215 * C1260 - C42212 * C1271) *
                         C21355 +
                     (C42213 * C302 - C42210 * C319 + C42214 * C916 -
                      C42211 * C923 + C42215 * C1272 - C42212 * C1287) *
                         C47110) *
                        C47369 * C47181 * C47226) *
                       C47486 +
                   (((C42213 * C120 - C42210 * C130 + C42214 * C474 -
                      C42211 * C490 + C42215 * C475 - C42212 * C492) *
                         C21355 +
                     (C42213 * C131 - C42210 * C141 + C42214 * C491 -
                      C42211 * C504 + C42215 * C493 - C42212 * C505) *
                         C47110) *
                        C47369 * C47181 * C2472 +
                    ((C42210 * C309 - C42213 * C293 + C42211 * C917 -
                      C42214 * C909 + C42212 * C2139 - C42215 * C2138) *
                         C21355 +
                     (C42210 * C323 - C42213 * C310 + C42211 * C924 -
                      C42214 * C918 + C42212 * C2141 - C42215 * C2140) *
                         C47110) *
                        C47369 * C47181 * C47226) *
                       C47465)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((C42210 * C124 - C42213 * C117 + C42211 * C478 -
                      C42214 * C468 + C42212 * C484 - C42215 * C471) *
                         C21355 +
                     (C42210 * C138 - C42213 * C125 + C42211 * C498 -
                      C42214 * C479 + C42212 * C501 - C42215 * C485) *
                         C47110) *
                        C47369 * C47181 * C47507 +
                    ((C42213 * C287 - C42210 * C297 + C42214 * C906 -
                      C42211 * C911 + C42215 * C1258 - C42212 * C1267) *
                         C21355 +
                     (C42213 * C298 - C42210 * C317 + C42214 * C912 -
                      C42211 * C921 + C42215 * C1268 - C42212 * C1285) *
                         C47110) *
                        C47369 * C47181 * C47503 +
                    ((C42210 * C303 - C42213 * C290 + C42211 * C1273 -
                      C42214 * C1261 + C42212 * C1279 - C42215 * C1264) *
                         C21355 +
                     (C42210 * C320 - C42213 * C304 + C42211 * C1288 -
                      C42214 * C1274 + C42212 * C1291 - C42215 * C1280) *
                         C47110) *
                        C47369 * C47181 * C47493 +
                    ((C42213 * C1124 - C42210 * C1130 + C42214 * C1666 -
                      C42211 * C1669 + C42215 * C5893 - C42212 * C5895) *
                         C21355 +
                     (C42213 * C1131 - C42210 * C1142 + C42214 * C1670 -
                      C42211 * C1675 + C42215 * C5896 - C42212 * C5899) *
                         C47110) *
                        C47369 * C47181 * C47471) *
                       C2580 +
                   (((C42213 * C118 - C42210 * C126 + C42214 * C469 -
                      C42211 * C480 + C42215 * C472 - C42212 * C486) *
                         C21355 +
                     (C42213 * C127 - C42210 * C139 + C42214 * C481 -
                      C42211 * C499 + C42215 * C487 - C42212 * C502) *
                         C47110) *
                        C47369 * C47181 * C47507 +
                    ((C42210 * C299 - C42213 * C288 + C42211 * C913 -
                      C42214 * C907 + C42212 * C1269 - C42215 * C1259) *
                         C21355 +
                     (C42210 * C318 - C42213 * C300 + C42211 * C922 -
                      C42214 * C914 + C42212 * C1286 - C42215 * C1270) *
                         C47110) *
                        C47369 * C47181 * C47503 +
                    ((C42213 * C291 - C42210 * C305 + C42214 * C1262 -
                      C42211 * C1275 + C42215 * C1265 - C42212 * C1281) *
                         C21355 +
                     (C42213 * C306 - C42210 * C321 + C42214 * C1276 -
                      C42211 * C1289 + C42215 * C1282 - C42212 * C1292) *
                         C47110) *
                        C47369 * C47181 * C47493 +
                    ((C42210 * C1132 - C42213 * C1125 + C42211 * C1671 -
                      C42214 * C1667 + C42212 * C5897 - C42215 * C5894) *
                         C21355 +
                     (C42210 * C1143 - C42213 * C1133 + C42211 * C1676 -
                      C42214 * C1672 + C42212 * C5900 - C42215 * C5898) *
                         C47110) *
                        C47369 * C47181 * C47471) *
                       C47146)) /
                     (p * q * std::sqrt(p + q));
    d2ee[205] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((((C42210 * C124 - C42213 * C117 + C42211 * C478 -
                       C42214 * C468 + C42212 * C484 - C42215 * C471) *
                          C21355 +
                      (C42210 * C138 - C42213 * C125 + C42211 * C498 -
                       C42214 * C479 + C42212 * C501 - C42215 * C485) *
                          C47110) *
                         C47369 * C3234 +
                     ((C42213 * C468 - C42210 * C478 + C42214 * C471 -
                       C42211 * C484 + C42215 * C1968 - C42212 * C1974) *
                          C21355 +
                      (C42213 * C479 - C42210 * C498 + C42214 * C485 -
                       C42211 * C501 + C42215 * C1975 - C42212 * C1986) *
                          C47110) *
                         C47369 * C47268) *
                        C47222 +
                    (((C42213 * C287 - C42210 * C297 + C42214 * C906 -
                       C42211 * C911 + C42215 * C1258 - C42212 * C1267) *
                          C21355 +
                      (C42213 * C298 - C42210 * C317 + C42214 * C912 -
                       C42211 * C921 + C42215 * C1268 - C42212 * C1285) *
                          C47110) *
                         C47369 * C3234 +
                     ((C42210 * C911 - C42213 * C906 + C42211 * C1267 -
                       C42214 * C1258 + C42212 * C2365 - C42215 * C2362) *
                          C21355 +
                      (C42210 * C921 - C42213 * C912 + C42211 * C1285 -
                       C42214 * C1268 + C42212 * C2371 - C42215 * C2366) *
                          C47110) *
                         C47369 * C47268) *
                        C47229 +
                    (((C42210 * C303 - C42213 * C290 + C42211 * C1273 -
                       C42214 * C1261 + C42212 * C1279 - C42215 * C1264) *
                          C21355 +
                      (C42210 * C320 - C42213 * C304 + C42211 * C1288 -
                       C42214 * C1274 + C42212 * C1291 - C42215 * C1280) *
                          C47110) *
                         C47369 * C3234 +
                     ((C42213 * C1261 - C42210 * C1273 + C42214 * C1264 -
                       C42211 * C1279 + C42215 * C7239 - C42212 * C7241) *
                          C21355 +
                      (C42213 * C1274 - C42210 * C1288 + C42214 * C1280 -
                       C42211 * C1291 + C42215 * C7242 - C42212 * C7245) *
                          C47110) *
                         C47369 * C47268) *
                        C2840) *
                       C47415 +
                   ((((C42213 * C118 - C42210 * C126 + C42214 * C469 -
                       C42211 * C480 + C42215 * C472 - C42212 * C486) *
                          C21355 +
                      (C42213 * C127 - C42210 * C139 + C42214 * C481 -
                       C42211 * C499 + C42215 * C487 - C42212 * C502) *
                          C47110) *
                         C47369 * C3234 +
                     ((C42210 * C480 - C42213 * C469 + C42211 * C486 -
                       C42214 * C472 + C42212 * C1976 - C42215 * C1969) *
                          C21355 +
                      (C42210 * C499 - C42213 * C481 + C42211 * C502 -
                       C42214 * C487 + C42212 * C1987 - C42215 * C1977) *
                          C47110) *
                         C47369 * C47268) *
                        C47222 +
                    (((C42210 * C299 - C42213 * C288 + C42211 * C913 -
                       C42214 * C907 + C42212 * C1269 - C42215 * C1259) *
                          C21355 +
                      (C42210 * C318 - C42213 * C300 + C42211 * C922 -
                       C42214 * C914 + C42212 * C1286 - C42215 * C1270) *
                          C47110) *
                         C47369 * C3234 +
                     ((C42213 * C907 - C42210 * C913 + C42214 * C1259 -
                       C42211 * C1269 + C42215 * C2363 - C42212 * C2367) *
                          C21355 +
                      (C42213 * C914 - C42210 * C922 + C42214 * C1270 -
                       C42211 * C1286 + C42215 * C2368 - C42212 * C2372) *
                          C47110) *
                         C47369 * C47268) *
                        C47229 +
                    (((C42213 * C291 - C42210 * C305 + C42214 * C1262 -
                       C42211 * C1275 + C42215 * C1265 - C42212 * C1281) *
                          C21355 +
                      (C42213 * C306 - C42210 * C321 + C42214 * C1276 -
                       C42211 * C1289 + C42215 * C1282 - C42212 * C1292) *
                          C47110) *
                         C47369 * C3234 +
                     ((C42210 * C1275 - C42213 * C1262 + C42211 * C1281 -
                       C42214 * C1265 + C42212 * C7243 - C42215 * C7240) *
                          C21355 +
                      (C42210 * C1289 - C42213 * C1276 + C42211 * C1292 -
                       C42214 * C1282 + C42212 * C7246 - C42215 * C7244) *
                          C47110) *
                         C47369 * C47268) *
                        C2840) *
                       C47146)) /
                 (p * q * std::sqrt(p + q));
    d2ee[206] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((C42210 * C124 - C42213 * C117 + C42211 * C478 -
                      C42214 * C468 + C42212 * C484 - C42215 * C471) *
                         C21355 +
                     (C42210 * C138 - C42213 * C125 + C42211 * C498 -
                      C42214 * C479 + C42212 * C501 - C42215 * C485) *
                         C47110) *
                        C47369 * C47264 +
                    ((C42213 * C468 - C42210 * C478 + C42214 * C471 -
                      C42211 * C484 + C42215 * C1968 - C42212 * C1974) *
                         C21355 +
                     (C42213 * C479 - C42210 * C498 + C42214 * C485 -
                      C42211 * C501 + C42215 * C1975 - C42212 * C1986) *
                         C47110) *
                        C47369 * C47271 +
                    ((C42210 * C484 - C42213 * C471 + C42211 * C1974 -
                      C42214 * C1968 + C42212 * C1980 - C42215 * C1971) *
                         C21355 +
                     (C42210 * C501 - C42213 * C485 + C42211 * C1986 -
                      C42214 * C1975 + C42212 * C1989 - C42215 * C1981) *
                         C47110) *
                        C47369 * C3742) *
                       C47222 +
                   (((C42213 * C287 - C42210 * C297 + C42214 * C906 -
                      C42211 * C911 + C42215 * C1258 - C42212 * C1267) *
                         C21355 +
                     (C42213 * C298 - C42210 * C317 + C42214 * C912 -
                      C42211 * C921 + C42215 * C1268 - C42212 * C1285) *
                         C47110) *
                        C47369 * C47264 +
                    ((C42210 * C911 - C42213 * C906 + C42211 * C1267 -
                      C42214 * C1258 + C42212 * C2365 - C42215 * C2362) *
                         C21355 +
                     (C42210 * C921 - C42213 * C912 + C42211 * C1285 -
                      C42214 * C1268 + C42212 * C2371 - C42215 * C2366) *
                         C47110) *
                        C47369 * C47271 +
                    ((C42213 * C1258 - C42210 * C1267 + C42214 * C2362 -
                      C42211 * C2365 + C42215 * C6769 - C42212 * C6771) *
                         C21355 +
                     (C42213 * C1268 - C42210 * C1285 + C42214 * C2366 -
                      C42211 * C2371 + C42215 * C6772 - C42212 * C6775) *
                         C47110) *
                        C47369 * C3742) *
                       C47229 +
                   (((C42210 * C303 - C42213 * C290 + C42211 * C1273 -
                      C42214 * C1261 + C42212 * C1279 - C42215 * C1264) *
                         C21355 +
                     (C42210 * C320 - C42213 * C304 + C42211 * C1288 -
                      C42214 * C1274 + C42212 * C1291 - C42215 * C1280) *
                         C47110) *
                        C47369 * C47264 +
                    ((C42213 * C1261 - C42210 * C1273 + C42214 * C1264 -
                      C42211 * C1279 + C42215 * C7239 - C42212 * C7241) *
                         C21355 +
                     (C42213 * C1274 - C42210 * C1288 + C42214 * C1280 -
                      C42211 * C1291 + C42215 * C7242 - C42212 * C7245) *
                         C47110) *
                        C47369 * C47271 +
                    ((C42210 * C1279 - C42213 * C1264 + C42211 * C7241 -
                      C42214 * C7239 + C42212 * C22891 - C42215 * C22890) *
                         C21355 +
                     (C42210 * C1291 - C42213 * C1280 + C42211 * C7245 -
                      C42214 * C7242 + C42212 * C22893 - C42215 * C22892) *
                         C47110) *
                        C47369 * C3742) *
                       C2840) *
                  C47135) /
                 (p * q * std::sqrt(p + q));
    d2ee[207] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C42210 * C124 - C42213 * C117 + C42211 * C478 -
                      C42214 * C468 + C42212 * C484 - C42215 * C471) *
                         C21355 +
                     (C42210 * C138 - C42213 * C125 + C42211 * C498 -
                      C42214 * C479 + C42212 * C501 - C42215 * C485) *
                         C47110) *
                        C47369 * C3234 +
                    ((C42213 * C468 - C42210 * C478 + C42214 * C471 -
                      C42211 * C484 + C42215 * C1968 - C42212 * C1974) *
                         C21355 +
                     (C42213 * C479 - C42210 * C498 + C42214 * C485 -
                      C42211 * C501 + C42215 * C1975 - C42212 * C1986) *
                         C47110) *
                        C47369 * C47268) *
                       C47507 +
                   (((C42213 * C287 - C42210 * C297 + C42214 * C906 -
                      C42211 * C911 + C42215 * C1258 - C42212 * C1267) *
                         C21355 +
                     (C42213 * C298 - C42210 * C317 + C42214 * C912 -
                      C42211 * C921 + C42215 * C1268 - C42212 * C1285) *
                         C47110) *
                        C47369 * C3234 +
                    ((C42210 * C911 - C42213 * C906 + C42211 * C1267 -
                      C42214 * C1258 + C42212 * C2365 - C42215 * C2362) *
                         C21355 +
                     (C42210 * C921 - C42213 * C912 + C42211 * C1285 -
                      C42214 * C1268 + C42212 * C2371 - C42215 * C2366) *
                         C47110) *
                        C47369 * C47268) *
                       C47503 +
                   (((C42210 * C303 - C42213 * C290 + C42211 * C1273 -
                      C42214 * C1261 + C42212 * C1279 - C42215 * C1264) *
                         C21355 +
                     (C42210 * C320 - C42213 * C304 + C42211 * C1288 -
                      C42214 * C1274 + C42212 * C1291 - C42215 * C1280) *
                         C47110) *
                        C47369 * C3234 +
                    ((C42213 * C1261 - C42210 * C1273 + C42214 * C1264 -
                      C42211 * C1279 + C42215 * C7239 - C42212 * C7241) *
                         C21355 +
                     (C42213 * C1274 - C42210 * C1288 + C42214 * C1280 -
                      C42211 * C1291 + C42215 * C7242 - C42212 * C7245) *
                         C47110) *
                        C47369 * C47268) *
                       C47493 +
                   (((C42213 * C1124 - C42210 * C1130 + C42214 * C1666 -
                      C42211 * C1669 + C42215 * C5893 - C42212 * C5895) *
                         C21355 +
                     (C42213 * C1131 - C42210 * C1142 + C42214 * C1670 -
                      C42211 * C1675 + C42215 * C5896 - C42212 * C5899) *
                         C47110) *
                        C47369 * C3234 +
                    ((C42210 * C1669 - C42213 * C1666 + C42211 * C5895 -
                      C42214 * C5893 + C42212 * C23237 - C42215 * C23236) *
                         C21355 +
                     (C42210 * C1675 - C42213 * C1670 + C42211 * C5899 -
                      C42214 * C5896 + C42212 * C23239 - C42215 * C23238) *
                         C47110) *
                        C47369 * C47268) *
                       C47471) *
                  C47135) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((((C42210 * C124 - C42213 * C117 + C42211 * C478 -
                       C42214 * C468 + C42212 * C484 - C42215 * C471) *
                          C21355 +
                      (C42210 * C138 - C42213 * C125 + C42211 * C498 -
                       C42214 * C479 + C42212 * C501 - C42215 * C485) *
                          C47110) *
                         C47369 * C3234 +
                     ((C42213 * C468 - C42210 * C478 + C42214 * C471 -
                       C42211 * C484 + C42215 * C1968 - C42212 * C1974) *
                          C21355 +
                      (C42213 * C479 - C42210 * C498 + C42214 * C485 -
                       C42211 * C501 + C42215 * C1975 - C42212 * C1986) *
                          C47110) *
                         C47369 * C47268) *
                        C2472 +
                    (((C42213 * C287 - C42210 * C297 + C42214 * C906 -
                       C42211 * C911 + C42215 * C1258 - C42212 * C1267) *
                          C21355 +
                      (C42213 * C298 - C42210 * C317 + C42214 * C912 -
                       C42211 * C921 + C42215 * C1268 - C42212 * C1285) *
                          C47110) *
                         C47369 * C3234 +
                     ((C42210 * C911 - C42213 * C906 + C42211 * C1267 -
                       C42214 * C1258 + C42212 * C2365 - C42215 * C2362) *
                          C21355 +
                      (C42210 * C921 - C42213 * C912 + C42211 * C1285 -
                       C42214 * C1268 + C42212 * C2371 - C42215 * C2366) *
                          C47110) *
                         C47369 * C47268) *
                        C47226) *
                       C47497 +
                   ((((C42213 * C118 - C42210 * C126 + C42214 * C469 -
                       C42211 * C480 + C42215 * C472 - C42212 * C486) *
                          C21355 +
                      (C42213 * C127 - C42210 * C139 + C42214 * C481 -
                       C42211 * C499 + C42215 * C487 - C42212 * C502) *
                          C47110) *
                         C47369 * C3234 +
                     ((C42210 * C480 - C42213 * C469 + C42211 * C486 -
                       C42214 * C472 + C42212 * C1976 - C42215 * C1969) *
                          C21355 +
                      (C42210 * C499 - C42213 * C481 + C42211 * C502 -
                       C42214 * C487 + C42212 * C1987 - C42215 * C1977) *
                          C47110) *
                         C47369 * C47268) *
                        C2472 +
                    (((C42210 * C299 - C42213 * C288 + C42211 * C913 -
                       C42214 * C907 + C42212 * C1269 - C42215 * C1259) *
                          C21355 +
                      (C42210 * C318 - C42213 * C300 + C42211 * C922 -
                       C42214 * C914 + C42212 * C1286 - C42215 * C1270) *
                          C47110) *
                         C47369 * C3234 +
                     ((C42213 * C907 - C42210 * C913 + C42214 * C1259 -
                       C42211 * C1269 + C42215 * C2363 - C42212 * C2367) *
                          C21355 +
                      (C42213 * C914 - C42210 * C922 + C42214 * C1270 -
                       C42211 * C1286 + C42215 * C2368 - C42212 * C2372) *
                          C47110) *
                         C47369 * C47268) *
                        C47226) *
                       C47484 +
                   ((((C42210 * C128 - C42213 * C119 + C42211 * C482 -
                       C42214 * C470 + C42212 * C488 - C42215 * C473) *
                          C21355 +
                      (C42210 * C140 - C42213 * C129 + C42211 * C500 -
                       C42214 * C483 + C42212 * C503 - C42215 * C489) *
                          C47110) *
                         C47369 * C3234 +
                     ((C42213 * C470 - C42210 * C482 + C42214 * C473 -
                       C42211 * C488 + C42215 * C1970 - C42212 * C1978) *
                          C21355 +
                      (C42213 * C483 - C42210 * C500 + C42214 * C489 -
                       C42211 * C503 + C42215 * C1979 - C42212 * C1988) *
                          C47110) *
                         C47369 * C47268) *
                        C2472 +
                    (((C42213 * C289 - C42210 * C301 + C42214 * C908 -
                       C42211 * C915 + C42215 * C1260 - C42212 * C1271) *
                          C21355 +
                      (C42213 * C302 - C42210 * C319 + C42214 * C916 -
                       C42211 * C923 + C42215 * C1272 - C42212 * C1287) *
                          C47110) *
                         C47369 * C3234 +
                     ((C42210 * C915 - C42213 * C908 + C42211 * C1271 -
                       C42214 * C1260 + C42212 * C2369 - C42215 * C2364) *
                          C21355 +
                      (C42210 * C923 - C42213 * C916 + C42211 * C1287 -
                       C42214 * C1272 + C42212 * C2373 - C42215 * C2370) *
                          C47110) *
                         C47369 * C47268) *
                        C47226) *
                       C47455)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  ((((C42210 * C124 - C42213 * C117 + C42211 * C478 -
                      C42214 * C468 + C42212 * C484 - C42215 * C471) *
                         C21355 +
                     (C42210 * C138 - C42213 * C125 + C42211 * C498 -
                      C42214 * C479 + C42212 * C501 - C42215 * C485) *
                         C47110) *
                        C47369 * C47508 +
                    ((C42213 * C468 - C42210 * C478 + C42214 * C471 -
                      C42211 * C484 + C42215 * C1968 - C42212 * C1974) *
                         C21355 +
                     (C42213 * C479 - C42210 * C498 + C42214 * C485 -
                      C42211 * C501 + C42215 * C1975 - C42212 * C1986) *
                         C47110) *
                        C47369 * C47505 +
                    ((C42210 * C484 - C42213 * C471 + C42211 * C1974 -
                      C42214 * C1968 + C42212 * C1980 - C42215 * C1971) *
                         C21355 +
                     (C42210 * C501 - C42213 * C485 + C42211 * C1986 -
                      C42214 * C1975 + C42212 * C1989 - C42215 * C1981) *
                         C47110) *
                        C47369 * C47496 +
                    ((C42213 * C1968 - C42210 * C1974 + C42214 * C1971 -
                      C42211 * C1980 + C42215 * C12393 - C42212 * C12395) *
                         C21355 +
                     (C42213 * C1975 - C42210 * C1986 + C42214 * C1981 -
                      C42211 * C1989 + C42215 * C12396 - C42212 * C12399) *
                         C47110) *
                        C47369 * C47477) *
                       C2472 +
                   (((C42213 * C287 - C42210 * C297 + C42214 * C906 -
                      C42211 * C911 + C42215 * C1258 - C42212 * C1267) *
                         C21355 +
                     (C42213 * C298 - C42210 * C317 + C42214 * C912 -
                      C42211 * C921 + C42215 * C1268 - C42212 * C1285) *
                         C47110) *
                        C47369 * C47508 +
                    ((C42210 * C911 - C42213 * C906 + C42211 * C1267 -
                      C42214 * C1258 + C42212 * C2365 - C42215 * C2362) *
                         C21355 +
                     (C42210 * C921 - C42213 * C912 + C42211 * C1285 -
                      C42214 * C1268 + C42212 * C2371 - C42215 * C2366) *
                         C47110) *
                        C47369 * C47505 +
                    ((C42213 * C1258 - C42210 * C1267 + C42214 * C2362 -
                      C42211 * C2365 + C42215 * C6769 - C42212 * C6771) *
                         C21355 +
                     (C42213 * C1268 - C42210 * C1285 + C42214 * C2366 -
                      C42211 * C2371 + C42215 * C6772 - C42212 * C6775) *
                         C47110) *
                        C47369 * C47496 +
                    ((C42210 * C2365 - C42213 * C2362 + C42211 * C6771 -
                      C42214 * C6769 + C42212 * C27579 - C42215 * C27578) *
                         C21355 +
                     (C42210 * C2371 - C42213 * C2366 + C42211 * C6775 -
                      C42214 * C6772 + C42212 * C27581 - C42215 * C27580) *
                         C47110) *
                        C47369 * C47477) *
                       C47226) *
                  C47135) /
                     (p * q * std::sqrt(p + q));
    d2ee[208] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((((C42210 * C124 - C42213 * C117 + C42211 * C478 -
                       C42214 * C468 + C42212 * C484 - C42215 * C471) *
                          C21355 +
                      (C42210 * C138 - C42213 * C125 + C42211 * C498 -
                       C42214 * C479 + C42212 * C501 - C42215 * C485) *
                          C47110) *
                         C47369 * C47264 +
                     ((C42213 * C468 - C42210 * C478 + C42214 * C471 -
                       C42211 * C484 + C42215 * C1968 - C42212 * C1974) *
                          C21355 +
                      (C42213 * C479 - C42210 * C498 + C42214 * C485 -
                       C42211 * C501 + C42215 * C1975 - C42212 * C1986) *
                          C47110) *
                         C47369 * C47271 +
                     ((C42210 * C484 - C42213 * C471 + C42211 * C1974 -
                       C42214 * C1968 + C42212 * C1980 - C42215 * C1971) *
                          C21355 +
                      (C42210 * C501 - C42213 * C485 + C42211 * C1986 -
                       C42214 * C1975 + C42212 * C1989 - C42215 * C1981) *
                          C47110) *
                         C47369 * C3742) *
                        C2472 +
                    (((C42213 * C287 - C42210 * C297 + C42214 * C906 -
                       C42211 * C911 + C42215 * C1258 - C42212 * C1267) *
                          C21355 +
                      (C42213 * C298 - C42210 * C317 + C42214 * C912 -
                       C42211 * C921 + C42215 * C1268 - C42212 * C1285) *
                          C47110) *
                         C47369 * C47264 +
                     ((C42210 * C911 - C42213 * C906 + C42211 * C1267 -
                       C42214 * C1258 + C42212 * C2365 - C42215 * C2362) *
                          C21355 +
                      (C42210 * C921 - C42213 * C912 + C42211 * C1285 -
                       C42214 * C1268 + C42212 * C2371 - C42215 * C2366) *
                          C47110) *
                         C47369 * C47271 +
                     ((C42213 * C1258 - C42210 * C1267 + C42214 * C2362 -
                       C42211 * C2365 + C42215 * C6769 - C42212 * C6771) *
                          C21355 +
                      (C42213 * C1268 - C42210 * C1285 + C42214 * C2366 -
                       C42211 * C2371 + C42215 * C6772 - C42212 * C6775) *
                          C47110) *
                         C47369 * C3742) *
                        C47226) *
                       C47415 +
                   ((((C42213 * C118 - C42210 * C126 + C42214 * C469 -
                       C42211 * C480 + C42215 * C472 - C42212 * C486) *
                          C21355 +
                      (C42213 * C127 - C42210 * C139 + C42214 * C481 -
                       C42211 * C499 + C42215 * C487 - C42212 * C502) *
                          C47110) *
                         C47369 * C47264 +
                     ((C42210 * C480 - C42213 * C469 + C42211 * C486 -
                       C42214 * C472 + C42212 * C1976 - C42215 * C1969) *
                          C21355 +
                      (C42210 * C499 - C42213 * C481 + C42211 * C502 -
                       C42214 * C487 + C42212 * C1987 - C42215 * C1977) *
                          C47110) *
                         C47369 * C47271 +
                     ((C42213 * C472 - C42210 * C486 + C42214 * C1969 -
                       C42211 * C1976 + C42215 * C1972 - C42212 * C1982) *
                          C21355 +
                      (C42213 * C487 - C42210 * C502 + C42214 * C1977 -
                       C42211 * C1987 + C42215 * C1983 - C42212 * C1990) *
                          C47110) *
                         C47369 * C3742) *
                        C2472 +
                    (((C42210 * C299 - C42213 * C288 + C42211 * C913 -
                       C42214 * C907 + C42212 * C1269 - C42215 * C1259) *
                          C21355 +
                      (C42210 * C318 - C42213 * C300 + C42211 * C922 -
                       C42214 * C914 + C42212 * C1286 - C42215 * C1270) *
                          C47110) *
                         C47369 * C47264 +
                     ((C42213 * C907 - C42210 * C913 + C42214 * C1259 -
                       C42211 * C1269 + C42215 * C2363 - C42212 * C2367) *
                          C21355 +
                      (C42213 * C914 - C42210 * C922 + C42214 * C1270 -
                       C42211 * C1286 + C42215 * C2368 - C42212 * C2372) *
                          C47110) *
                         C47369 * C47271 +
                     ((C42210 * C1269 - C42213 * C1259 + C42211 * C2367 -
                       C42214 * C2363 + C42212 * C6773 - C42215 * C6770) *
                          C21355 +
                      (C42210 * C1286 - C42213 * C1270 + C42211 * C2372 -
                       C42214 * C2368 + C42212 * C6776 - C42215 * C6774) *
                          C47110) *
                         C47369 * C3742) *
                        C47226) *
                       C47146)) /
                 (p * q * std::sqrt(p + q));
    d2ee[209] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((((C42210 * C124 - C42213 * C117 + C42211 * C478 -
                       C42214 * C468 + C42212 * C484 - C42215 * C471) *
                          C21355 +
                      (C42210 * C138 - C42213 * C125 + C42211 * C498 -
                       C42214 * C479 + C42212 * C501 - C42215 * C485) *
                          C47110) *
                         C47369 * C3234 +
                     ((C42213 * C468 - C42210 * C478 + C42214 * C471 -
                       C42211 * C484 + C42215 * C1968 - C42212 * C1974) *
                          C21355 +
                      (C42213 * C479 - C42210 * C498 + C42214 * C485 -
                       C42211 * C501 + C42215 * C1975 - C42212 * C1986) *
                          C47110) *
                         C47369 * C47268) *
                        C2472 +
                    (((C42213 * C287 - C42210 * C297 + C42214 * C906 -
                       C42211 * C911 + C42215 * C1258 - C42212 * C1267) *
                          C21355 +
                      (C42213 * C298 - C42210 * C317 + C42214 * C912 -
                       C42211 * C921 + C42215 * C1268 - C42212 * C1285) *
                          C47110) *
                         C47369 * C3234 +
                     ((C42210 * C911 - C42213 * C906 + C42211 * C1267 -
                       C42214 * C1258 + C42212 * C2365 - C42215 * C2362) *
                          C21355 +
                      (C42210 * C921 - C42213 * C912 + C42211 * C1285 -
                       C42214 * C1268 + C42212 * C2371 - C42215 * C2366) *
                          C47110) *
                         C47369 * C47268) *
                        C47226) *
                       C47497 +
                   ((((C42213 * C118 - C42210 * C126 + C42214 * C469 -
                       C42211 * C480 + C42215 * C472 - C42212 * C486) *
                          C21355 +
                      (C42213 * C127 - C42210 * C139 + C42214 * C481 -
                       C42211 * C499 + C42215 * C487 - C42212 * C502) *
                          C47110) *
                         C47369 * C3234 +
                     ((C42210 * C480 - C42213 * C469 + C42211 * C486 -
                       C42214 * C472 + C42212 * C1976 - C42215 * C1969) *
                          C21355 +
                      (C42210 * C499 - C42213 * C481 + C42211 * C502 -
                       C42214 * C487 + C42212 * C1987 - C42215 * C1977) *
                          C47110) *
                         C47369 * C47268) *
                        C2472 +
                    (((C42210 * C299 - C42213 * C288 + C42211 * C913 -
                       C42214 * C907 + C42212 * C1269 - C42215 * C1259) *
                          C21355 +
                      (C42210 * C318 - C42213 * C300 + C42211 * C922 -
                       C42214 * C914 + C42212 * C1286 - C42215 * C1270) *
                          C47110) *
                         C47369 * C3234 +
                     ((C42213 * C907 - C42210 * C913 + C42214 * C1259 -
                       C42211 * C1269 + C42215 * C2363 - C42212 * C2367) *
                          C21355 +
                      (C42213 * C914 - C42210 * C922 + C42214 * C1270 -
                       C42211 * C1286 + C42215 * C2368 - C42212 * C2372) *
                          C47110) *
                         C47369 * C47268) *
                        C47226) *
                       C47484 +
                   ((((C42210 * C128 - C42213 * C119 + C42211 * C482 -
                       C42214 * C470 + C42212 * C488 - C42215 * C473) *
                          C21355 +
                      (C42210 * C140 - C42213 * C129 + C42211 * C500 -
                       C42214 * C483 + C42212 * C503 - C42215 * C489) *
                          C47110) *
                         C47369 * C3234 +
                     ((C42213 * C470 - C42210 * C482 + C42214 * C473 -
                       C42211 * C488 + C42215 * C1970 - C42212 * C1978) *
                          C21355 +
                      (C42213 * C483 - C42210 * C500 + C42214 * C489 -
                       C42211 * C503 + C42215 * C1979 - C42212 * C1988) *
                          C47110) *
                         C47369 * C47268) *
                        C2472 +
                    (((C42213 * C289 - C42210 * C301 + C42214 * C908 -
                       C42211 * C915 + C42215 * C1260 - C42212 * C1271) *
                          C21355 +
                      (C42213 * C302 - C42210 * C319 + C42214 * C916 -
                       C42211 * C923 + C42215 * C1272 - C42212 * C1287) *
                          C47110) *
                         C47369 * C3234 +
                     ((C42210 * C915 - C42213 * C908 + C42211 * C1271 -
                       C42214 * C1260 + C42212 * C2369 - C42215 * C2364) *
                          C21355 +
                      (C42210 * C923 - C42213 * C916 + C42211 * C1287 -
                       C42214 * C1272 + C42212 * C2373 - C42215 * C2370) *
                          C47110) *
                         C47369 * C47268) *
                        C47226) *
                       C47455)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((C42210 * C124 - C42213 * C117 + C42211 * C478 -
                      C42214 * C468 + C42212 * C484 - C42215 * C471) *
                         C21355 +
                     (C42210 * C138 - C42213 * C125 + C42211 * C498 -
                      C42214 * C479 + C42212 * C501 - C42215 * C485) *
                         C47110) *
                        C47369 * C3234 +
                    ((C42213 * C468 - C42210 * C478 + C42214 * C471 -
                      C42211 * C484 + C42215 * C1968 - C42212 * C1974) *
                         C21355 +
                     (C42213 * C479 - C42210 * C498 + C42214 * C485 -
                      C42211 * C501 + C42215 * C1975 - C42212 * C1986) *
                         C47110) *
                        C47369 * C47268) *
                       C47507 +
                   (((C42213 * C287 - C42210 * C297 + C42214 * C906 -
                      C42211 * C911 + C42215 * C1258 - C42212 * C1267) *
                         C21355 +
                     (C42213 * C298 - C42210 * C317 + C42214 * C912 -
                      C42211 * C921 + C42215 * C1268 - C42212 * C1285) *
                         C47110) *
                        C47369 * C3234 +
                    ((C42210 * C911 - C42213 * C906 + C42211 * C1267 -
                      C42214 * C1258 + C42212 * C2365 - C42215 * C2362) *
                         C21355 +
                     (C42210 * C921 - C42213 * C912 + C42211 * C1285 -
                      C42214 * C1268 + C42212 * C2371 - C42215 * C2366) *
                         C47110) *
                        C47369 * C47268) *
                       C47503 +
                   (((C42210 * C303 - C42213 * C290 + C42211 * C1273 -
                      C42214 * C1261 + C42212 * C1279 - C42215 * C1264) *
                         C21355 +
                     (C42210 * C320 - C42213 * C304 + C42211 * C1288 -
                      C42214 * C1274 + C42212 * C1291 - C42215 * C1280) *
                         C47110) *
                        C47369 * C3234 +
                    ((C42213 * C1261 - C42210 * C1273 + C42214 * C1264 -
                      C42211 * C1279 + C42215 * C7239 - C42212 * C7241) *
                         C21355 +
                     (C42213 * C1274 - C42210 * C1288 + C42214 * C1280 -
                      C42211 * C1291 + C42215 * C7242 - C42212 * C7245) *
                         C47110) *
                        C47369 * C47268) *
                       C47493 +
                   (((C42213 * C1124 - C42210 * C1130 + C42214 * C1666 -
                      C42211 * C1669 + C42215 * C5893 - C42212 * C5895) *
                         C21355 +
                     (C42213 * C1131 - C42210 * C1142 + C42214 * C1670 -
                      C42211 * C1675 + C42215 * C5896 - C42212 * C5899) *
                         C47110) *
                        C47369 * C3234 +
                    ((C42210 * C1669 - C42213 * C1666 + C42211 * C5895 -
                      C42214 * C5893 + C42212 * C23237 - C42215 * C23236) *
                         C21355 +
                     (C42210 * C1675 - C42213 * C1670 + C42211 * C5899 -
                      C42214 * C5896 + C42212 * C23239 - C42215 * C23238) *
                         C47110) *
                        C47369 * C47268) *
                       C47471) *
                  C47135) /
                     (p * q * std::sqrt(p + q));
    d2ee[210] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C42210 * C124 - C42213 * C117 + C42211 * C478 -
                      C42214 * C468 + C42212 * C484 - C42215 * C471) *
                         C21355 +
                     (C42210 * C138 - C42213 * C125 + C42211 * C498 -
                      C42214 * C479 + C42212 * C501 - C42215 * C485) *
                         C47110) *
                        C47369 * C47181 * C1392 +
                    ((C42213 * C287 - C42210 * C297 + C42214 * C906 -
                      C42211 * C911 + C42215 * C1258 - C42212 * C1267) *
                         C21355 +
                     (C42213 * C298 - C42210 * C317 + C42214 * C912 -
                      C42211 * C921 + C42215 * C1268 - C42212 * C1285) *
                         C47110) *
                        C47369 * C47181 * C1393 +
                    ((C42210 * C303 - C42213 * C290 + C42211 * C1273 -
                      C42214 * C1261 + C42212 * C1279 - C42215 * C1264) *
                         C21355 +
                     (C42210 * C320 - C42213 * C304 + C42211 * C1288 -
                      C42214 * C1274 + C42212 * C1291 - C42215 * C1280) *
                         C47110) *
                        C47369 * C47181 * C1394 +
                    ((C42213 * C1124 - C42210 * C1130 + C42214 * C1666 -
                      C42211 * C1669 + C42215 * C5893 - C42212 * C5895) *
                         C21355 +
                     (C42213 * C1131 - C42210 * C1142 + C42214 * C1670 -
                      C42211 * C1675 + C42215 * C5896 - C42212 * C5899) *
                         C47110) *
                        C47369 * C47181 * C47471) *
                       C47415 +
                   (((C42213 * C118 - C42210 * C126 + C42214 * C469 -
                      C42211 * C480 + C42215 * C472 - C42212 * C486) *
                         C21355 +
                     (C42213 * C127 - C42210 * C139 + C42214 * C481 -
                      C42211 * C499 + C42215 * C487 - C42212 * C502) *
                         C47110) *
                        C47369 * C47181 * C1392 +
                    ((C42210 * C299 - C42213 * C288 + C42211 * C913 -
                      C42214 * C907 + C42212 * C1269 - C42215 * C1259) *
                         C21355 +
                     (C42210 * C318 - C42213 * C300 + C42211 * C922 -
                      C42214 * C914 + C42212 * C1286 - C42215 * C1270) *
                         C47110) *
                        C47369 * C47181 * C1393 +
                    ((C42213 * C291 - C42210 * C305 + C42214 * C1262 -
                      C42211 * C1275 + C42215 * C1265 - C42212 * C1281) *
                         C21355 +
                     (C42213 * C306 - C42210 * C321 + C42214 * C1276 -
                      C42211 * C1289 + C42215 * C1282 - C42212 * C1292) *
                         C47110) *
                        C47369 * C47181 * C1394 +
                    ((C42210 * C1132 - C42213 * C1125 + C42211 * C1671 -
                      C42214 * C1667 + C42212 * C5897 - C42215 * C5894) *
                         C21355 +
                     (C42210 * C1143 - C42213 * C1133 + C42211 * C1676 -
                      C42214 * C1672 + C42212 * C5900 - C42215 * C5898) *
                         C47110) *
                        C47369 * C47181 * C47471) *
                       C47146)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C42210 * C124 - C42213 * C117 + C42211 * C478 -
                      C42214 * C468 + C42212 * C484 - C42215 * C471) *
                         C21355 +
                     (C42210 * C138 - C42213 * C125 + C42211 * C498 -
                      C42214 * C479 + C42212 * C501 - C42215 * C485) *
                         C47110) *
                        C47369 * C47181 * C47429 +
                    ((C42213 * C287 - C42210 * C297 + C42214 * C906 -
                      C42211 * C911 + C42215 * C1258 - C42212 * C1267) *
                         C21355 +
                     (C42213 * C298 - C42210 * C317 + C42214 * C912 -
                      C42211 * C921 + C42215 * C1268 - C42212 * C1285) *
                         C47110) *
                        C47369 * C47181 * C47226) *
                       C636 +
                   (((C42213 * C118 - C42210 * C126 + C42214 * C469 -
                      C42211 * C480 + C42215 * C472 - C42212 * C486) *
                         C21355 +
                     (C42213 * C127 - C42210 * C139 + C42214 * C481 -
                      C42211 * C499 + C42215 * C487 - C42212 * C502) *
                         C47110) *
                        C47369 * C47181 * C47429 +
                    ((C42210 * C299 - C42213 * C288 + C42211 * C913 -
                      C42214 * C907 + C42212 * C1269 - C42215 * C1259) *
                         C21355 +
                     (C42210 * C318 - C42213 * C300 + C42211 * C922 -
                      C42214 * C914 + C42212 * C1286 - C42215 * C1270) *
                         C47110) *
                        C47369 * C47181 * C47226) *
                       C637 +
                   (((C42210 * C128 - C42213 * C119 + C42211 * C482 -
                      C42214 * C470 + C42212 * C488 - C42215 * C473) *
                         C21355 +
                     (C42210 * C140 - C42213 * C129 + C42211 * C500 -
                      C42214 * C483 + C42212 * C503 - C42215 * C489) *
                         C47110) *
                        C47369 * C47181 * C47429 +
                    ((C42213 * C289 - C42210 * C301 + C42214 * C908 -
                      C42211 * C915 + C42215 * C1260 - C42212 * C1271) *
                         C21355 +
                     (C42213 * C302 - C42210 * C319 + C42214 * C916 -
                      C42211 * C923 + C42215 * C1272 - C42212 * C1287) *
                         C47110) *
                        C47369 * C47181 * C47226) *
                       C638 +
                   (((C42213 * C120 - C42210 * C130 + C42214 * C474 -
                      C42211 * C490 + C42215 * C475 - C42212 * C492) *
                         C21355 +
                     (C42213 * C131 - C42210 * C141 + C42214 * C491 -
                      C42211 * C504 + C42215 * C493 - C42212 * C505) *
                         C47110) *
                        C47369 * C47181 * C47429 +
                    ((C42210 * C309 - C42213 * C293 + C42211 * C917 -
                      C42214 * C909 + C42212 * C2139 - C42215 * C2138) *
                         C21355 +
                     (C42210 * C323 - C42213 * C310 + C42211 * C924 -
                      C42214 * C918 + C42212 * C2141 - C42215 * C2140) *
                         C47110) *
                        C47369 * C47181 * C47226) *
                       C47465)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  (((((C42210 * C124 - C42213 * C117 + C42211 * C478 -
                       C42214 * C468 + C42212 * C484 - C42215 * C471) *
                          C21355 +
                      (C42210 * C138 - C42213 * C125 + C42211 * C498 -
                       C42214 * C479 + C42212 * C501 - C42215 * C485) *
                          C47110) *
                         C47369 * C1788 +
                     ((C42213 * C468 - C42210 * C478 + C42214 * C471 -
                       C42211 * C484 + C42215 * C1968 - C42212 * C1974) *
                          C21355 +
                      (C42213 * C479 - C42210 * C498 + C42214 * C485 -
                       C42211 * C501 + C42215 * C1975 - C42212 * C1986) *
                          C47110) *
                         C47369 * C1789 +
                     ((C42210 * C484 - C42213 * C471 + C42211 * C1974 -
                       C42214 * C1968 + C42212 * C1980 - C42215 * C1971) *
                          C21355 +
                      (C42210 * C501 - C42213 * C485 + C42211 * C1986 -
                       C42214 * C1975 + C42212 * C1989 - C42215 * C1981) *
                          C47110) *
                         C47369 * C47464) *
                        C47429 +
                    (((C42213 * C287 - C42210 * C297 + C42214 * C906 -
                       C42211 * C911 + C42215 * C1258 - C42212 * C1267) *
                          C21355 +
                      (C42213 * C298 - C42210 * C317 + C42214 * C912 -
                       C42211 * C921 + C42215 * C1268 - C42212 * C1285) *
                          C47110) *
                         C47369 * C1788 +
                     ((C42210 * C911 - C42213 * C906 + C42211 * C1267 -
                       C42214 * C1258 + C42212 * C2365 - C42215 * C2362) *
                          C21355 +
                      (C42210 * C921 - C42213 * C912 + C42211 * C1285 -
                       C42214 * C1268 + C42212 * C2371 - C42215 * C2366) *
                          C47110) *
                         C47369 * C1789 +
                     ((C42213 * C1258 - C42210 * C1267 + C42214 * C2362 -
                       C42211 * C2365 + C42215 * C6769 - C42212 * C6771) *
                          C21355 +
                      (C42213 * C1268 - C42210 * C1285 + C42214 * C2366 -
                       C42211 * C2371 + C42215 * C6772 - C42212 * C6775) *
                          C47110) *
                         C47369 * C47464) *
                        C47226) *
                       C47415 +
                   ((((C42213 * C118 - C42210 * C126 + C42214 * C469 -
                       C42211 * C480 + C42215 * C472 - C42212 * C486) *
                          C21355 +
                      (C42213 * C127 - C42210 * C139 + C42214 * C481 -
                       C42211 * C499 + C42215 * C487 - C42212 * C502) *
                          C47110) *
                         C47369 * C1788 +
                     ((C42210 * C480 - C42213 * C469 + C42211 * C486 -
                       C42214 * C472 + C42212 * C1976 - C42215 * C1969) *
                          C21355 +
                      (C42210 * C499 - C42213 * C481 + C42211 * C502 -
                       C42214 * C487 + C42212 * C1987 - C42215 * C1977) *
                          C47110) *
                         C47369 * C1789 +
                     ((C42213 * C472 - C42210 * C486 + C42214 * C1969 -
                       C42211 * C1976 + C42215 * C1972 - C42212 * C1982) *
                          C21355 +
                      (C42213 * C487 - C42210 * C502 + C42214 * C1977 -
                       C42211 * C1987 + C42215 * C1983 - C42212 * C1990) *
                          C47110) *
                         C47369 * C47464) *
                        C47429 +
                    (((C42210 * C299 - C42213 * C288 + C42211 * C913 -
                       C42214 * C907 + C42212 * C1269 - C42215 * C1259) *
                          C21355 +
                      (C42210 * C318 - C42213 * C300 + C42211 * C922 -
                       C42214 * C914 + C42212 * C1286 - C42215 * C1270) *
                          C47110) *
                         C47369 * C1788 +
                     ((C42213 * C907 - C42210 * C913 + C42214 * C1259 -
                       C42211 * C1269 + C42215 * C2363 - C42212 * C2367) *
                          C21355 +
                      (C42213 * C914 - C42210 * C922 + C42214 * C1270 -
                       C42211 * C1286 + C42215 * C2368 - C42212 * C2372) *
                          C47110) *
                         C47369 * C1789 +
                     ((C42210 * C1269 - C42213 * C1259 + C42211 * C2367 -
                       C42214 * C2363 + C42212 * C6773 - C42215 * C6770) *
                          C21355 +
                      (C42210 * C1286 - C42213 * C1270 + C42211 * C2372 -
                       C42214 * C2368 + C42212 * C6776 - C42215 * C6774) *
                          C47110) *
                         C47369 * C47464) *
                        C47226) *
                       C47146)) /
                     (p * q * std::sqrt(p + q));
    d2ee[211] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C42210 * C124 - C42213 * C117 + C42211 * C478 -
                      C42214 * C468 + C42212 * C484 - C42215 * C471) *
                         C21355 +
                     (C42210 * C138 - C42213 * C125 + C42211 * C498 -
                      C42214 * C479 + C42212 * C501 - C42215 * C485) *
                         C47110) *
                        C47369 * C47430 +
                    ((C42213 * C468 - C42210 * C478 + C42214 * C471 -
                      C42211 * C484 + C42215 * C1968 - C42212 * C1974) *
                         C21355 +
                     (C42213 * C479 - C42210 * C498 + C42214 * C485 -
                      C42211 * C501 + C42215 * C1975 - C42212 * C1986) *
                         C47110) *
                        C47369 * C47268) *
                       C1392 +
                   (((C42213 * C287 - C42210 * C297 + C42214 * C906 -
                      C42211 * C911 + C42215 * C1258 - C42212 * C1267) *
                         C21355 +
                     (C42213 * C298 - C42210 * C317 + C42214 * C912 -
                      C42211 * C921 + C42215 * C1268 - C42212 * C1285) *
                         C47110) *
                        C47369 * C47430 +
                    ((C42210 * C911 - C42213 * C906 + C42211 * C1267 -
                      C42214 * C1258 + C42212 * C2365 - C42215 * C2362) *
                         C21355 +
                     (C42210 * C921 - C42213 * C912 + C42211 * C1285 -
                      C42214 * C1268 + C42212 * C2371 - C42215 * C2366) *
                         C47110) *
                        C47369 * C47268) *
                       C1393 +
                   (((C42210 * C303 - C42213 * C290 + C42211 * C1273 -
                      C42214 * C1261 + C42212 * C1279 - C42215 * C1264) *
                         C21355 +
                     (C42210 * C320 - C42213 * C304 + C42211 * C1288 -
                      C42214 * C1274 + C42212 * C1291 - C42215 * C1280) *
                         C47110) *
                        C47369 * C47430 +
                    ((C42213 * C1261 - C42210 * C1273 + C42214 * C1264 -
                      C42211 * C1279 + C42215 * C7239 - C42212 * C7241) *
                         C21355 +
                     (C42213 * C1274 - C42210 * C1288 + C42214 * C1280 -
                      C42211 * C1291 + C42215 * C7242 - C42212 * C7245) *
                         C47110) *
                        C47369 * C47268) *
                       C1394 +
                   (((C42213 * C1124 - C42210 * C1130 + C42214 * C1666 -
                      C42211 * C1669 + C42215 * C5893 - C42212 * C5895) *
                         C21355 +
                     (C42213 * C1131 - C42210 * C1142 + C42214 * C1670 -
                      C42211 * C1675 + C42215 * C5896 - C42212 * C5899) *
                         C47110) *
                        C47369 * C47430 +
                    ((C42210 * C1669 - C42213 * C1666 + C42211 * C5895 -
                      C42214 * C5893 + C42212 * C23237 - C42215 * C23236) *
                         C21355 +
                     (C42210 * C1675 - C42213 * C1670 + C42211 * C5899 -
                      C42214 * C5896 + C42212 * C23239 - C42215 * C23238) *
                         C47110) *
                        C47369 * C47268) *
                       C47471) *
                  C47135) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((((C42210 * C124 - C42213 * C117 + C42211 * C478 -
                       C42214 * C468 + C42212 * C484 - C42215 * C471) *
                          C21355 +
                      (C42210 * C138 - C42213 * C125 + C42211 * C498 -
                       C42214 * C479 + C42212 * C501 - C42215 * C485) *
                          C47110) *
                         C47369 * C47430 +
                     ((C42213 * C468 - C42210 * C478 + C42214 * C471 -
                       C42211 * C484 + C42215 * C1968 - C42212 * C1974) *
                          C21355 +
                      (C42213 * C479 - C42210 * C498 + C42214 * C485 -
                       C42211 * C501 + C42215 * C1975 - C42212 * C1986) *
                          C47110) *
                         C47369 * C47268) *
                        C47429 +
                    (((C42213 * C287 - C42210 * C297 + C42214 * C906 -
                       C42211 * C911 + C42215 * C1258 - C42212 * C1267) *
                          C21355 +
                      (C42213 * C298 - C42210 * C317 + C42214 * C912 -
                       C42211 * C921 + C42215 * C1268 - C42212 * C1285) *
                          C47110) *
                         C47369 * C47430 +
                     ((C42210 * C911 - C42213 * C906 + C42211 * C1267 -
                       C42214 * C1258 + C42212 * C2365 - C42215 * C2362) *
                          C21355 +
                      (C42210 * C921 - C42213 * C912 + C42211 * C1285 -
                       C42214 * C1268 + C42212 * C2371 - C42215 * C2366) *
                          C47110) *
                         C47369 * C47268) *
                        C47226) *
                       C284 +
                   ((((C42213 * C118 - C42210 * C126 + C42214 * C469 -
                       C42211 * C480 + C42215 * C472 - C42212 * C486) *
                          C21355 +
                      (C42213 * C127 - C42210 * C139 + C42214 * C481 -
                       C42211 * C499 + C42215 * C487 - C42212 * C502) *
                          C47110) *
                         C47369 * C47430 +
                     ((C42210 * C480 - C42213 * C469 + C42211 * C486 -
                       C42214 * C472 + C42212 * C1976 - C42215 * C1969) *
                          C21355 +
                      (C42210 * C499 - C42213 * C481 + C42211 * C502 -
                       C42214 * C487 + C42212 * C1987 - C42215 * C1977) *
                          C47110) *
                         C47369 * C47268) *
                        C47429 +
                    (((C42210 * C299 - C42213 * C288 + C42211 * C913 -
                       C42214 * C907 + C42212 * C1269 - C42215 * C1259) *
                          C21355 +
                      (C42210 * C318 - C42213 * C300 + C42211 * C922 -
                       C42214 * C914 + C42212 * C1286 - C42215 * C1270) *
                          C47110) *
                         C47369 * C47430 +
                     ((C42213 * C907 - C42210 * C913 + C42214 * C1259 -
                       C42211 * C1269 + C42215 * C2363 - C42212 * C2367) *
                          C21355 +
                      (C42213 * C914 - C42210 * C922 + C42214 * C1270 -
                       C42211 * C1286 + C42215 * C2368 - C42212 * C2372) *
                          C47110) *
                         C47369 * C47268) *
                        C47226) *
                       C285 +
                   ((((C42210 * C128 - C42213 * C119 + C42211 * C482 -
                       C42214 * C470 + C42212 * C488 - C42215 * C473) *
                          C21355 +
                      (C42210 * C140 - C42213 * C129 + C42211 * C500 -
                       C42214 * C483 + C42212 * C503 - C42215 * C489) *
                          C47110) *
                         C47369 * C47430 +
                     ((C42213 * C470 - C42210 * C482 + C42214 * C473 -
                       C42211 * C488 + C42215 * C1970 - C42212 * C1978) *
                          C21355 +
                      (C42213 * C483 - C42210 * C500 + C42214 * C489 -
                       C42211 * C503 + C42215 * C1979 - C42212 * C1988) *
                          C47110) *
                         C47369 * C47268) *
                        C47429 +
                    (((C42213 * C289 - C42210 * C301 + C42214 * C908 -
                       C42211 * C915 + C42215 * C1260 - C42212 * C1271) *
                          C21355 +
                      (C42213 * C302 - C42210 * C319 + C42214 * C916 -
                       C42211 * C923 + C42215 * C1272 - C42212 * C1287) *
                          C47110) *
                         C47369 * C47430 +
                     ((C42210 * C915 - C42213 * C908 + C42211 * C1271 -
                       C42214 * C1260 + C42212 * C2369 - C42215 * C2364) *
                          C21355 +
                      (C42210 * C923 - C42213 * C916 + C42211 * C1287 -
                       C42214 * C1272 + C42212 * C2373 - C42215 * C2370) *
                          C47110) *
                         C47369 * C47268) *
                        C47226) *
                       C47455)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  ((((C42210 * C124 - C42213 * C117 + C42211 * C478 -
                      C42214 * C468 + C42212 * C484 - C42215 * C471) *
                         C21355 +
                     (C42210 * C138 - C42213 * C125 + C42211 * C498 -
                      C42214 * C479 + C42212 * C501 - C42215 * C485) *
                         C47110) *
                        C47369 * C2248 +
                    ((C42213 * C468 - C42210 * C478 + C42214 * C471 -
                      C42211 * C484 + C42215 * C1968 - C42212 * C1974) *
                         C21355 +
                     (C42213 * C479 - C42210 * C498 + C42214 * C485 -
                      C42211 * C501 + C42215 * C1975 - C42212 * C1986) *
                         C47110) *
                        C47369 * C2249 +
                    ((C42210 * C484 - C42213 * C471 + C42211 * C1974 -
                      C42214 * C1968 + C42212 * C1980 - C42215 * C1971) *
                         C21355 +
                     (C42210 * C501 - C42213 * C485 + C42211 * C1986 -
                      C42214 * C1975 + C42212 * C1989 - C42215 * C1981) *
                         C47110) *
                        C47369 * C2250 +
                    ((C42213 * C1968 - C42210 * C1974 + C42214 * C1971 -
                      C42211 * C1980 + C42215 * C12393 - C42212 * C12395) *
                         C21355 +
                     (C42213 * C1975 - C42210 * C1986 + C42214 * C1981 -
                      C42211 * C1989 + C42215 * C12396 - C42212 * C12399) *
                         C47110) *
                        C47369 * C47477) *
                       C47429 +
                   (((C42213 * C287 - C42210 * C297 + C42214 * C906 -
                      C42211 * C911 + C42215 * C1258 - C42212 * C1267) *
                         C21355 +
                     (C42213 * C298 - C42210 * C317 + C42214 * C912 -
                      C42211 * C921 + C42215 * C1268 - C42212 * C1285) *
                         C47110) *
                        C47369 * C2248 +
                    ((C42210 * C911 - C42213 * C906 + C42211 * C1267 -
                      C42214 * C1258 + C42212 * C2365 - C42215 * C2362) *
                         C21355 +
                     (C42210 * C921 - C42213 * C912 + C42211 * C1285 -
                      C42214 * C1268 + C42212 * C2371 - C42215 * C2366) *
                         C47110) *
                        C47369 * C2249 +
                    ((C42213 * C1258 - C42210 * C1267 + C42214 * C2362 -
                      C42211 * C2365 + C42215 * C6769 - C42212 * C6771) *
                         C21355 +
                     (C42213 * C1268 - C42210 * C1285 + C42214 * C2366 -
                      C42211 * C2371 + C42215 * C6772 - C42212 * C6775) *
                         C47110) *
                        C47369 * C2250 +
                    ((C42210 * C2365 - C42213 * C2362 + C42211 * C6771 -
                      C42214 * C6769 + C42212 * C27579 - C42215 * C27578) *
                         C21355 +
                     (C42210 * C2371 - C42213 * C2366 + C42211 * C6775 -
                      C42214 * C6772 + C42212 * C27581 - C42215 * C27580) *
                         C47110) *
                        C47369 * C47477) *
                       C47226) *
                  C47135) /
                     (p * q * std::sqrt(p + q));
    d2ee[212] += (0.5 * std::pow(Pi, 2.5) *
                      (((C42210 * C124 - C42213 * C117 + C42211 * C478 -
                         C42214 * C468 + C42212 * C484 - C42215 * C471) *
                            C21355 +
                        (C42210 * C138 - C42213 * C125 + C42211 * C498 -
                         C42214 * C479 + C42212 * C501 - C42215 * C485) *
                            C47110) *
                           C47369 * C47181 * C47163 * C108 +
                       ((C42213 * C118 - C42210 * C126 + C42214 * C469 -
                         C42211 * C480 + C42215 * C472 - C42212 * C486) *
                            C21355 +
                        (C42213 * C127 - C42210 * C139 + C42214 * C481 -
                         C42211 * C499 + C42215 * C487 - C42212 * C502) *
                            C47110) *
                           C47369 * C47181 * C47163 * C109 +
                       ((C42210 * C128 - C42213 * C119 + C42211 * C482 -
                         C42214 * C470 + C42212 * C488 - C42215 * C473) *
                            C21355 +
                        (C42210 * C140 - C42213 * C129 + C42211 * C500 -
                         C42214 * C483 + C42212 * C503 - C42215 * C489) *
                            C47110) *
                           C47369 * C47181 * C47163 * C110 +
                       ((C42213 * C120 - C42210 * C130 + C42214 * C474 -
                         C42211 * C490 + C42215 * C475 - C42212 * C492) *
                            C21355 +
                        (C42213 * C131 - C42210 * C141 + C42214 * C491 -
                         C42211 * C504 + C42215 * C493 - C42212 * C505) *
                            C47110) *
                           C47369 * C47181 * C47163 * C111 +
                       ((C42210 * C132 - C42213 * C121 + C42211 * C494 -
                         C42214 * C476 + C42212 * C496 - C42215 * C477) *
                            C21355 +
                        (C42210 * C142 - C42213 * C133 + C42211 * C506 -
                         C42214 * C495 + C42212 * C507 - C42215 * C497) *
                            C47110) *
                           C47369 * C47181 * C47163 * C112) +
                  0.5 * std::pow(Pi, 2.5) *
                      ((((C42210 * C124 - C42213 * C117 + C42211 * C478 -
                          C42214 * C468 + C42212 * C484 - C42215 * C471) *
                             C21355 +
                         (C42210 * C138 - C42213 * C125 + C42211 * C498 -
                          C42214 * C479 + C42212 * C501 - C42215 * C485) *
                             C47110) *
                            C47369 * C47181 * C47500 +
                        ((C42213 * C287 - C42210 * C297 + C42214 * C906 -
                          C42211 * C911 + C42215 * C1258 - C42212 * C1267) *
                             C21355 +
                         (C42213 * C298 - C42210 * C317 + C42214 * C912 -
                          C42211 * C921 + C42215 * C1268 - C42212 * C1285) *
                             C47110) *
                            C47369 * C47181 * C47488 +
                        ((C42210 * C303 - C42213 * C290 + C42211 * C1273 -
                          C42214 * C1261 + C42212 * C1279 - C42215 * C1264) *
                             C21355 +
                         (C42210 * C320 - C42213 * C304 + C42211 * C1288 -
                          C42214 * C1274 + C42212 * C1291 - C42215 * C1280) *
                             C47110) *
                            C47369 * C47181 * C47461) *
                           C284 +
                       (((C42213 * C118 - C42210 * C126 + C42214 * C469 -
                          C42211 * C480 + C42215 * C472 - C42212 * C486) *
                             C21355 +
                         (C42213 * C127 - C42210 * C139 + C42214 * C481 -
                          C42211 * C499 + C42215 * C487 - C42212 * C502) *
                             C47110) *
                            C47369 * C47181 * C47500 +
                        ((C42210 * C299 - C42213 * C288 + C42211 * C913 -
                          C42214 * C907 + C42212 * C1269 - C42215 * C1259) *
                             C21355 +
                         (C42210 * C318 - C42213 * C300 + C42211 * C922 -
                          C42214 * C914 + C42212 * C1286 - C42215 * C1270) *
                             C47110) *
                            C47369 * C47181 * C47488 +
                        ((C42213 * C291 - C42210 * C305 + C42214 * C1262 -
                          C42211 * C1275 + C42215 * C1265 - C42212 * C1281) *
                             C21355 +
                         (C42213 * C306 - C42210 * C321 + C42214 * C1276 -
                          C42211 * C1289 + C42215 * C1282 - C42212 * C1292) *
                             C47110) *
                            C47369 * C47181 * C47461) *
                           C285 +
                       (((C42210 * C128 - C42213 * C119 + C42211 * C482 -
                          C42214 * C470 + C42212 * C488 - C42215 * C473) *
                             C21355 +
                         (C42210 * C140 - C42213 * C129 + C42211 * C500 -
                          C42214 * C483 + C42212 * C503 - C42215 * C489) *
                             C47110) *
                            C47369 * C47181 * C47500 +
                        ((C42213 * C289 - C42210 * C301 + C42214 * C908 -
                          C42211 * C915 + C42215 * C1260 - C42212 * C1271) *
                             C21355 +
                         (C42213 * C302 - C42210 * C319 + C42214 * C916 -
                          C42211 * C923 + C42215 * C1272 - C42212 * C1287) *
                             C47110) *
                            C47369 * C47181 * C47488 +
                        ((C42210 * C307 - C42213 * C292 + C42211 * C1277 -
                          C42214 * C1263 + C42212 * C1283 - C42215 * C1266) *
                             C21355 +
                         (C42210 * C322 - C42213 * C308 + C42211 * C1290 -
                          C42214 * C1278 + C42212 * C1293 - C42215 * C1284) *
                             C47110) *
                            C47369 * C47181 * C47461) *
                           C47455)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::pow(Pi, 2.5) *
                  ((((C42210 * C124 - C42213 * C117 + C42211 * C478 -
                      C42214 * C468 + C42212 * C484 - C42215 * C471) *
                         C21355 +
                     (C42210 * C138 - C42213 * C125 + C42211 * C498 -
                      C42214 * C479 + C42212 * C501 - C42215 * C485) *
                         C47110) *
                        C47369 * C47501 +
                    ((C42213 * C468 - C42210 * C478 + C42214 * C471 -
                      C42211 * C484 + C42215 * C1968 - C42212 * C1974) *
                         C21355 +
                     (C42213 * C479 - C42210 * C498 + C42214 * C485 -
                      C42211 * C501 + C42215 * C1975 - C42212 * C1986) *
                         C47110) *
                        C47369 * C47490 +
                    ((C42210 * C484 - C42213 * C471 + C42211 * C1974 -
                      C42214 * C1968 + C42212 * C1980 - C42215 * C1971) *
                         C21355 +
                     (C42210 * C501 - C42213 * C485 + C42211 * C1986 -
                      C42214 * C1975 + C42212 * C1989 - C42215 * C1981) *
                         C47110) *
                        C47369 * C47464) *
                       C47163 * C284 +
                   (((C42213 * C118 - C42210 * C126 + C42214 * C469 -
                      C42211 * C480 + C42215 * C472 - C42212 * C486) *
                         C21355 +
                     (C42213 * C127 - C42210 * C139 + C42214 * C481 -
                      C42211 * C499 + C42215 * C487 - C42212 * C502) *
                         C47110) *
                        C47369 * C47501 +
                    ((C42210 * C480 - C42213 * C469 + C42211 * C486 -
                      C42214 * C472 + C42212 * C1976 - C42215 * C1969) *
                         C21355 +
                     (C42210 * C499 - C42213 * C481 + C42211 * C502 -
                      C42214 * C487 + C42212 * C1987 - C42215 * C1977) *
                         C47110) *
                        C47369 * C47490 +
                    ((C42213 * C472 - C42210 * C486 + C42214 * C1969 -
                      C42211 * C1976 + C42215 * C1972 - C42212 * C1982) *
                         C21355 +
                     (C42213 * C487 - C42210 * C502 + C42214 * C1977 -
                      C42211 * C1987 + C42215 * C1983 - C42212 * C1990) *
                         C47110) *
                        C47369 * C47464) *
                       C47163 * C285 +
                   (((C42210 * C128 - C42213 * C119 + C42211 * C482 -
                      C42214 * C470 + C42212 * C488 - C42215 * C473) *
                         C21355 +
                     (C42210 * C140 - C42213 * C129 + C42211 * C500 -
                      C42214 * C483 + C42212 * C503 - C42215 * C489) *
                         C47110) *
                        C47369 * C47501 +
                    ((C42213 * C470 - C42210 * C482 + C42214 * C473 -
                      C42211 * C488 + C42215 * C1970 - C42212 * C1978) *
                         C21355 +
                     (C42213 * C483 - C42210 * C500 + C42214 * C489 -
                      C42211 * C503 + C42215 * C1979 - C42212 * C1988) *
                         C47110) *
                        C47369 * C47490 +
                    ((C42210 * C488 - C42213 * C473 + C42211 * C1978 -
                      C42214 * C1970 + C42212 * C1984 - C42215 * C1973) *
                         C21355 +
                     (C42210 * C503 - C42213 * C489 + C42211 * C1988 -
                      C42214 * C1979 + C42212 * C1991 - C42215 * C1985) *
                         C47110) *
                        C47369 * C47464) *
                       C47163 * C47455)) /
                     (p * q * std::sqrt(p + q)) +
                 (0.5 * std::pow(Pi, 2.5) *
                  ((((C42210 * C124 - C42213 * C117 + C42211 * C478 -
                      C42214 * C468 + C42212 * C484 - C42215 * C471) *
                         C21355 +
                     (C42210 * C138 - C42213 * C125 + C42211 * C498 -
                      C42214 * C479 + C42212 * C501 - C42215 * C485) *
                         C47110) *
                        C47369 * C47181 * C1050 +
                    ((C42213 * C287 - C42210 * C297 + C42214 * C906 -
                      C42211 * C911 + C42215 * C1258 - C42212 * C1267) *
                         C21355 +
                     (C42213 * C298 - C42210 * C317 + C42214 * C912 -
                      C42211 * C921 + C42215 * C1268 - C42212 * C1285) *
                         C47110) *
                        C47369 * C47181 * C1051 +
                    ((C42210 * C303 - C42213 * C290 + C42211 * C1273 -
                      C42214 * C1261 + C42212 * C1279 - C42215 * C1264) *
                         C21355 +
                     (C42210 * C320 - C42213 * C304 + C42211 * C1288 -
                      C42214 * C1274 + C42212 * C1291 - C42215 * C1280) *
                         C47110) *
                        C47369 * C47181 * C47461) *
                       C47497 +
                   (((C42213 * C118 - C42210 * C126 + C42214 * C469 -
                      C42211 * C480 + C42215 * C472 - C42212 * C486) *
                         C21355 +
                     (C42213 * C127 - C42210 * C139 + C42214 * C481 -
                      C42211 * C499 + C42215 * C487 - C42212 * C502) *
                         C47110) *
                        C47369 * C47181 * C1050 +
                    ((C42210 * C299 - C42213 * C288 + C42211 * C913 -
                      C42214 * C907 + C42212 * C1269 - C42215 * C1259) *
                         C21355 +
                     (C42210 * C318 - C42213 * C300 + C42211 * C922 -
                      C42214 * C914 + C42212 * C1286 - C42215 * C1270) *
                         C47110) *
                        C47369 * C47181 * C1051 +
                    ((C42213 * C291 - C42210 * C305 + C42214 * C1262 -
                      C42211 * C1275 + C42215 * C1265 - C42212 * C1281) *
                         C21355 +
                     (C42213 * C306 - C42210 * C321 + C42214 * C1276 -
                      C42211 * C1289 + C42215 * C1282 - C42212 * C1292) *
                         C47110) *
                        C47369 * C47181 * C47461) *
                       C47484 +
                   (((C42210 * C128 - C42213 * C119 + C42211 * C482 -
                      C42214 * C470 + C42212 * C488 - C42215 * C473) *
                         C21355 +
                     (C42210 * C140 - C42213 * C129 + C42211 * C500 -
                      C42214 * C483 + C42212 * C503 - C42215 * C489) *
                         C47110) *
                        C47369 * C47181 * C1050 +
                    ((C42213 * C289 - C42210 * C301 + C42214 * C908 -
                      C42211 * C915 + C42215 * C1260 - C42212 * C1271) *
                         C21355 +
                     (C42213 * C302 - C42210 * C319 + C42214 * C916 -
                      C42211 * C923 + C42215 * C1272 - C42212 * C1287) *
                         C47110) *
                        C47369 * C47181 * C1051 +
                    ((C42210 * C307 - C42213 * C292 + C42211 * C1277 -
                      C42214 * C1263 + C42212 * C1283 - C42215 * C1266) *
                         C21355 +
                     (C42210 * C322 - C42213 * C308 + C42211 * C1290 -
                      C42214 * C1278 + C42212 * C1293 - C42215 * C1284) *
                         C47110) *
                        C47369 * C47181 * C47461) *
                       C47455)) /
                     (p * q * std::sqrt(p + q)) +
                 (0.5 * std::pow(Pi, 2.5) *
                  (((C42210 * C124 - C42213 * C117 + C42211 * C478 -
                     C42214 * C468 + C42212 * C484 - C42215 * C471) *
                        C21355 +
                    (C42210 * C138 - C42213 * C125 + C42211 * C498 -
                     C42214 * C479 + C42212 * C501 - C42215 * C485) *
                        C47110) *
                       C47369 * C47181 * C1118 +
                   ((C42213 * C287 - C42210 * C297 + C42214 * C906 -
                     C42211 * C911 + C42215 * C1258 - C42212 * C1267) *
                        C21355 +
                    (C42213 * C298 - C42210 * C317 + C42214 * C912 -
                     C42211 * C921 + C42215 * C1268 - C42212 * C1285) *
                        C47110) *
                       C47369 * C47181 * C1119 +
                   ((C42210 * C303 - C42213 * C290 + C42211 * C1273 -
                     C42214 * C1261 + C42212 * C1279 - C42215 * C1264) *
                        C21355 +
                    (C42210 * C320 - C42213 * C304 + C42211 * C1288 -
                     C42214 * C1274 + C42212 * C1291 - C42215 * C1280) *
                        C47110) *
                       C47369 * C47181 * C1120 +
                   ((C42213 * C1124 - C42210 * C1130 + C42214 * C1666 -
                     C42211 * C1669 + C42215 * C5893 - C42212 * C5895) *
                        C21355 +
                    (C42213 * C1131 - C42210 * C1142 + C42214 * C1670 -
                     C42211 * C1675 + C42215 * C5896 - C42212 * C5899) *
                        C47110) *
                       C47369 * C47181 * C1121 +
                   ((C42210 * C1136 - C42213 * C1127 + C42211 * C6385 -
                     C42214 * C6383 + C42212 * C22230 - C42215 * C22229) *
                        C21355 +
                    (C42210 * C1145 - C42213 * C1137 + C42211 * C6389 -
                     C42214 * C6386 + C42212 * C22232 - C42215 * C22231) *
                        C47110) *
                       C47369 * C47181 * C1122) *
                  C47135) /
                     (p * q * std::sqrt(p + q)) -
                 (std::pow(Pi, 2.5) *
                  ((((C42210 * C124 - C42213 * C117 + C42211 * C478 -
                      C42214 * C468 + C42212 * C484 - C42215 * C471) *
                         C21355 +
                     (C42210 * C138 - C42213 * C125 + C42211 * C498 -
                      C42214 * C479 + C42212 * C501 - C42215 * C485) *
                         C47110) *
                        C47369 * C47501 +
                    ((C42213 * C468 - C42210 * C478 + C42214 * C471 -
                      C42211 * C484 + C42215 * C1968 - C42212 * C1974) *
                         C21355 +
                     (C42213 * C479 - C42210 * C498 + C42214 * C485 -
                      C42211 * C501 + C42215 * C1975 - C42212 * C1986) *
                         C47110) *
                        C47369 * C47490 +
                    ((C42210 * C484 - C42213 * C471 + C42211 * C1974 -
                      C42214 * C1968 + C42212 * C1980 - C42215 * C1971) *
                         C21355 +
                     (C42210 * C501 - C42213 * C485 + C42211 * C1986 -
                      C42214 * C1975 + C42212 * C1989 - C42215 * C1981) *
                         C47110) *
                        C47369 * C47464) *
                       C1050 +
                   (((C42213 * C287 - C42210 * C297 + C42214 * C906 -
                      C42211 * C911 + C42215 * C1258 - C42212 * C1267) *
                         C21355 +
                     (C42213 * C298 - C42210 * C317 + C42214 * C912 -
                      C42211 * C921 + C42215 * C1268 - C42212 * C1285) *
                         C47110) *
                        C47369 * C47501 +
                    ((C42210 * C911 - C42213 * C906 + C42211 * C1267 -
                      C42214 * C1258 + C42212 * C2365 - C42215 * C2362) *
                         C21355 +
                     (C42210 * C921 - C42213 * C912 + C42211 * C1285 -
                      C42214 * C1268 + C42212 * C2371 - C42215 * C2366) *
                         C47110) *
                        C47369 * C47490 +
                    ((C42213 * C1258 - C42210 * C1267 + C42214 * C2362 -
                      C42211 * C2365 + C42215 * C6769 - C42212 * C6771) *
                         C21355 +
                     (C42213 * C1268 - C42210 * C1285 + C42214 * C2366 -
                      C42211 * C2371 + C42215 * C6772 - C42212 * C6775) *
                         C47110) *
                        C47369 * C47464) *
                       C1051 +
                   (((C42210 * C303 - C42213 * C290 + C42211 * C1273 -
                      C42214 * C1261 + C42212 * C1279 - C42215 * C1264) *
                         C21355 +
                     (C42210 * C320 - C42213 * C304 + C42211 * C1288 -
                      C42214 * C1274 + C42212 * C1291 - C42215 * C1280) *
                         C47110) *
                        C47369 * C47501 +
                    ((C42213 * C1261 - C42210 * C1273 + C42214 * C1264 -
                      C42211 * C1279 + C42215 * C7239 - C42212 * C7241) *
                         C21355 +
                     (C42213 * C1274 - C42210 * C1288 + C42214 * C1280 -
                      C42211 * C1291 + C42215 * C7242 - C42212 * C7245) *
                         C47110) *
                        C47369 * C47490 +
                    ((C42210 * C1279 - C42213 * C1264 + C42211 * C7241 -
                      C42214 * C7239 + C42212 * C22891 - C42215 * C22890) *
                         C21355 +
                     (C42210 * C1291 - C42213 * C1280 + C42211 * C7245 -
                      C42214 * C7242 + C42212 * C22893 - C42215 * C22892) *
                         C47110) *
                        C47369 * C47464) *
                       C47461) *
                  C47135) /
                     (p * q * std::sqrt(p + q)) -
                 (std::pow(Pi, 2.5) *
                  ((((C42210 * C124 - C42213 * C117 + C42211 * C478 -
                      C42214 * C468 + C42212 * C484 - C42215 * C471) *
                         C21355 +
                     (C42210 * C138 - C42213 * C125 + C42211 * C498 -
                      C42214 * C479 + C42212 * C501 - C42215 * C485) *
                         C47110) *
                        C47369 * C1788 +
                    ((C42213 * C468 - C42210 * C478 + C42214 * C471 -
                      C42211 * C484 + C42215 * C1968 - C42212 * C1974) *
                         C21355 +
                     (C42213 * C479 - C42210 * C498 + C42214 * C485 -
                      C42211 * C501 + C42215 * C1975 - C42212 * C1986) *
                         C47110) *
                        C47369 * C1789 +
                    ((C42210 * C484 - C42213 * C471 + C42211 * C1974 -
                      C42214 * C1968 + C42212 * C1980 - C42215 * C1971) *
                         C21355 +
                     (C42210 * C501 - C42213 * C485 + C42211 * C1986 -
                      C42214 * C1975 + C42212 * C1989 - C42215 * C1981) *
                         C47110) *
                        C47369 * C47464) *
                       C47163 * C47497 +
                   (((C42213 * C118 - C42210 * C126 + C42214 * C469 -
                      C42211 * C480 + C42215 * C472 - C42212 * C486) *
                         C21355 +
                     (C42213 * C127 - C42210 * C139 + C42214 * C481 -
                      C42211 * C499 + C42215 * C487 - C42212 * C502) *
                         C47110) *
                        C47369 * C1788 +
                    ((C42210 * C480 - C42213 * C469 + C42211 * C486 -
                      C42214 * C472 + C42212 * C1976 - C42215 * C1969) *
                         C21355 +
                     (C42210 * C499 - C42213 * C481 + C42211 * C502 -
                      C42214 * C487 + C42212 * C1987 - C42215 * C1977) *
                         C47110) *
                        C47369 * C1789 +
                    ((C42213 * C472 - C42210 * C486 + C42214 * C1969 -
                      C42211 * C1976 + C42215 * C1972 - C42212 * C1982) *
                         C21355 +
                     (C42213 * C487 - C42210 * C502 + C42214 * C1977 -
                      C42211 * C1987 + C42215 * C1983 - C42212 * C1990) *
                         C47110) *
                        C47369 * C47464) *
                       C47163 * C47484 +
                   (((C42210 * C128 - C42213 * C119 + C42211 * C482 -
                      C42214 * C470 + C42212 * C488 - C42215 * C473) *
                         C21355 +
                     (C42210 * C140 - C42213 * C129 + C42211 * C500 -
                      C42214 * C483 + C42212 * C503 - C42215 * C489) *
                         C47110) *
                        C47369 * C1788 +
                    ((C42213 * C470 - C42210 * C482 + C42214 * C473 -
                      C42211 * C488 + C42215 * C1970 - C42212 * C1978) *
                         C21355 +
                     (C42213 * C483 - C42210 * C500 + C42214 * C489 -
                      C42211 * C503 + C42215 * C1979 - C42212 * C1988) *
                         C47110) *
                        C47369 * C1789 +
                    ((C42210 * C488 - C42213 * C473 + C42211 * C1978 -
                      C42214 * C1970 + C42212 * C1984 - C42215 * C1973) *
                         C21355 +
                     (C42210 * C503 - C42213 * C489 + C42211 * C1988 -
                      C42214 * C1979 + C42212 * C1991 - C42215 * C1985) *
                         C47110) *
                        C47369 * C47464) *
                       C47163 * C47455)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::pow(Pi, 2.5) *
                  ((((C42210 * C124 - C42213 * C117 + C42211 * C478 -
                      C42214 * C468 + C42212 * C484 - C42215 * C471) *
                         C21355 +
                     (C42210 * C138 - C42213 * C125 + C42211 * C498 -
                      C42214 * C479 + C42212 * C501 - C42215 * C485) *
                         C47110) *
                        C47369 * C1788 +
                    ((C42213 * C468 - C42210 * C478 + C42214 * C471 -
                      C42211 * C484 + C42215 * C1968 - C42212 * C1974) *
                         C21355 +
                     (C42213 * C479 - C42210 * C498 + C42214 * C485 -
                      C42211 * C501 + C42215 * C1975 - C42212 * C1986) *
                         C47110) *
                        C47369 * C1789 +
                    ((C42210 * C484 - C42213 * C471 + C42211 * C1974 -
                      C42214 * C1968 + C42212 * C1980 - C42215 * C1971) *
                         C21355 +
                     (C42210 * C501 - C42213 * C485 + C42211 * C1986 -
                      C42214 * C1975 + C42212 * C1989 - C42215 * C1981) *
                         C47110) *
                        C47369 * C47464) *
                       C47500 +
                   (((C42213 * C287 - C42210 * C297 + C42214 * C906 -
                      C42211 * C911 + C42215 * C1258 - C42212 * C1267) *
                         C21355 +
                     (C42213 * C298 - C42210 * C317 + C42214 * C912 -
                      C42211 * C921 + C42215 * C1268 - C42212 * C1285) *
                         C47110) *
                        C47369 * C1788 +
                    ((C42210 * C911 - C42213 * C906 + C42211 * C1267 -
                      C42214 * C1258 + C42212 * C2365 - C42215 * C2362) *
                         C21355 +
                     (C42210 * C921 - C42213 * C912 + C42211 * C1285 -
                      C42214 * C1268 + C42212 * C2371 - C42215 * C2366) *
                         C47110) *
                        C47369 * C1789 +
                    ((C42213 * C1258 - C42210 * C1267 + C42214 * C2362 -
                      C42211 * C2365 + C42215 * C6769 - C42212 * C6771) *
                         C21355 +
                     (C42213 * C1268 - C42210 * C1285 + C42214 * C2366 -
                      C42211 * C2371 + C42215 * C6772 - C42212 * C6775) *
                         C47110) *
                        C47369 * C47464) *
                       C47488 +
                   (((C42210 * C303 - C42213 * C290 + C42211 * C1273 -
                      C42214 * C1261 + C42212 * C1279 - C42215 * C1264) *
                         C21355 +
                     (C42210 * C320 - C42213 * C304 + C42211 * C1288 -
                      C42214 * C1274 + C42212 * C1291 - C42215 * C1280) *
                         C47110) *
                        C47369 * C1788 +
                    ((C42213 * C1261 - C42210 * C1273 + C42214 * C1264 -
                      C42211 * C1279 + C42215 * C7239 - C42212 * C7241) *
                         C21355 +
                     (C42213 * C1274 - C42210 * C1288 + C42214 * C1280 -
                      C42211 * C1291 + C42215 * C7242 - C42212 * C7245) *
                         C47110) *
                        C47369 * C1789 +
                    ((C42210 * C1279 - C42213 * C1264 + C42211 * C7241 -
                      C42214 * C7239 + C42212 * C22891 - C42215 * C22890) *
                         C21355 +
                     (C42210 * C1291 - C42213 * C1280 + C42211 * C7245 -
                      C42214 * C7242 + C42212 * C22893 - C42215 * C22892) *
                         C47110) *
                        C47369 * C47464) *
                       C47461) *
                  C47135) /
                     (p * q * std::sqrt(p + q)) +
                 (2 * std::pow(Pi, 2.5) *
                  (((C42210 * C124 - C42213 * C117 + C42211 * C478 -
                     C42214 * C468 + C42212 * C484 - C42215 * C471) *
                        C21355 +
                    (C42210 * C138 - C42213 * C125 + C42211 * C498 -
                     C42214 * C479 + C42212 * C501 - C42215 * C485) *
                        C47110) *
                       C47369 * C1963 +
                   ((C42213 * C468 - C42210 * C478 + C42214 * C471 -
                     C42211 * C484 + C42215 * C1968 - C42212 * C1974) *
                        C21355 +
                    (C42213 * C479 - C42210 * C498 + C42214 * C485 -
                     C42211 * C501 + C42215 * C1975 - C42212 * C1986) *
                        C47110) *
                       C47369 * C1964 +
                   ((C42210 * C484 - C42213 * C471 + C42211 * C1974 -
                     C42214 * C1968 + C42212 * C1980 - C42215 * C1971) *
                        C21355 +
                    (C42210 * C501 - C42213 * C485 + C42211 * C1986 -
                     C42214 * C1975 + C42212 * C1989 - C42215 * C1981) *
                        C47110) *
                       C47369 * C1965 +
                   ((C42213 * C1968 - C42210 * C1974 + C42214 * C1971 -
                     C42211 * C1980 + C42215 * C12393 - C42212 * C12395) *
                        C21355 +
                    (C42213 * C1975 - C42210 * C1986 + C42214 * C1981 -
                     C42211 * C1989 + C42215 * C12396 - C42212 * C12399) *
                        C47110) *
                       C47369 * C1966 +
                   ((C42210 * C1980 - C42213 * C1971 + C42211 * C12395 -
                     C42214 * C12393 + C42212 * C43685 - C42215 * C43684) *
                        C21355 +
                    (C42210 * C1989 - C42213 * C1981 + C42211 * C12399 -
                     C42214 * C12396 + C42212 * C43687 - C42215 * C43686) *
                        C47110) *
                       C47369 * C1967) *
                  C47163 * C47135) /
                     (p * q * std::sqrt(p + q));
    d2ee[213] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((((C42210 * C124 - C42213 * C117 + C42211 * C478 -
                       C42214 * C468 + C42212 * C484 - C42215 * C471) *
                          C21355 +
                      (C42210 * C138 - C42213 * C125 + C42211 * C498 -
                       C42214 * C479 + C42212 * C501 - C42215 * C485) *
                          C47110) *
                         C47369 * C47430 +
                     ((C42213 * C468 - C42210 * C478 + C42214 * C471 -
                       C42211 * C484 + C42215 * C1968 - C42212 * C1974) *
                          C21355 +
                      (C42213 * C479 - C42210 * C498 + C42214 * C485 -
                       C42211 * C501 + C42215 * C1975 - C42212 * C1986) *
                          C47110) *
                         C47369 * C47268) *
                        C1050 +
                    (((C42213 * C287 - C42210 * C297 + C42214 * C906 -
                       C42211 * C911 + C42215 * C1258 - C42212 * C1267) *
                          C21355 +
                      (C42213 * C298 - C42210 * C317 + C42214 * C912 -
                       C42211 * C921 + C42215 * C1268 - C42212 * C1285) *
                          C47110) *
                         C47369 * C47430 +
                     ((C42210 * C911 - C42213 * C906 + C42211 * C1267 -
                       C42214 * C1258 + C42212 * C2365 - C42215 * C2362) *
                          C21355 +
                      (C42210 * C921 - C42213 * C912 + C42211 * C1285 -
                       C42214 * C1268 + C42212 * C2371 - C42215 * C2366) *
                          C47110) *
                         C47369 * C47268) *
                        C1051 +
                    (((C42210 * C303 - C42213 * C290 + C42211 * C1273 -
                       C42214 * C1261 + C42212 * C1279 - C42215 * C1264) *
                          C21355 +
                      (C42210 * C320 - C42213 * C304 + C42211 * C1288 -
                       C42214 * C1274 + C42212 * C1291 - C42215 * C1280) *
                          C47110) *
                         C47369 * C47430 +
                     ((C42213 * C1261 - C42210 * C1273 + C42214 * C1264 -
                       C42211 * C1279 + C42215 * C7239 - C42212 * C7241) *
                          C21355 +
                      (C42213 * C1274 - C42210 * C1288 + C42214 * C1280 -
                       C42211 * C1291 + C42215 * C7242 - C42212 * C7245) *
                          C47110) *
                         C47369 * C47268) *
                        C47461) *
                       C47415 +
                   ((((C42213 * C118 - C42210 * C126 + C42214 * C469 -
                       C42211 * C480 + C42215 * C472 - C42212 * C486) *
                          C21355 +
                      (C42213 * C127 - C42210 * C139 + C42214 * C481 -
                       C42211 * C499 + C42215 * C487 - C42212 * C502) *
                          C47110) *
                         C47369 * C47430 +
                     ((C42210 * C480 - C42213 * C469 + C42211 * C486 -
                       C42214 * C472 + C42212 * C1976 - C42215 * C1969) *
                          C21355 +
                      (C42210 * C499 - C42213 * C481 + C42211 * C502 -
                       C42214 * C487 + C42212 * C1987 - C42215 * C1977) *
                          C47110) *
                         C47369 * C47268) *
                        C1050 +
                    (((C42210 * C299 - C42213 * C288 + C42211 * C913 -
                       C42214 * C907 + C42212 * C1269 - C42215 * C1259) *
                          C21355 +
                      (C42210 * C318 - C42213 * C300 + C42211 * C922 -
                       C42214 * C914 + C42212 * C1286 - C42215 * C1270) *
                          C47110) *
                         C47369 * C47430 +
                     ((C42213 * C907 - C42210 * C913 + C42214 * C1259 -
                       C42211 * C1269 + C42215 * C2363 - C42212 * C2367) *
                          C21355 +
                      (C42213 * C914 - C42210 * C922 + C42214 * C1270 -
                       C42211 * C1286 + C42215 * C2368 - C42212 * C2372) *
                          C47110) *
                         C47369 * C47268) *
                        C1051 +
                    (((C42213 * C291 - C42210 * C305 + C42214 * C1262 -
                       C42211 * C1275 + C42215 * C1265 - C42212 * C1281) *
                          C21355 +
                      (C42213 * C306 - C42210 * C321 + C42214 * C1276 -
                       C42211 * C1289 + C42215 * C1282 - C42212 * C1292) *
                          C47110) *
                         C47369 * C47430 +
                     ((C42210 * C1275 - C42213 * C1262 + C42211 * C1281 -
                       C42214 * C1265 + C42212 * C7243 - C42215 * C7240) *
                          C21355 +
                      (C42210 * C1289 - C42213 * C1276 + C42211 * C1292 -
                       C42214 * C1282 + C42212 * C7246 - C42215 * C7244) *
                          C47110) *
                         C47369 * C47268) *
                        C47461) *
                       C47146)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C42210 * C124 - C42213 * C117 + C42211 * C478 -
                      C42214 * C468 + C42212 * C484 - C42215 * C471) *
                         C21355 +
                     (C42210 * C138 - C42213 * C125 + C42211 * C498 -
                      C42214 * C479 + C42212 * C501 - C42215 * C485) *
                         C47110) *
                        C47369 * C47430 +
                    ((C42213 * C468 - C42210 * C478 + C42214 * C471 -
                      C42211 * C484 + C42215 * C1968 - C42212 * C1974) *
                         C21355 +
                     (C42213 * C479 - C42210 * C498 + C42214 * C485 -
                      C42211 * C501 + C42215 * C1975 - C42212 * C1986) *
                         C47110) *
                        C47369 * C47268) *
                       C47163 * C636 +
                   (((C42213 * C118 - C42210 * C126 + C42214 * C469 -
                      C42211 * C480 + C42215 * C472 - C42212 * C486) *
                         C21355 +
                     (C42213 * C127 - C42210 * C139 + C42214 * C481 -
                      C42211 * C499 + C42215 * C487 - C42212 * C502) *
                         C47110) *
                        C47369 * C47430 +
                    ((C42210 * C480 - C42213 * C469 + C42211 * C486 -
                      C42214 * C472 + C42212 * C1976 - C42215 * C1969) *
                         C21355 +
                     (C42210 * C499 - C42213 * C481 + C42211 * C502 -
                      C42214 * C487 + C42212 * C1987 - C42215 * C1977) *
                         C47110) *
                        C47369 * C47268) *
                       C47163 * C637 +
                   (((C42210 * C128 - C42213 * C119 + C42211 * C482 -
                      C42214 * C470 + C42212 * C488 - C42215 * C473) *
                         C21355 +
                     (C42210 * C140 - C42213 * C129 + C42211 * C500 -
                      C42214 * C483 + C42212 * C503 - C42215 * C489) *
                         C47110) *
                        C47369 * C47430 +
                    ((C42213 * C470 - C42210 * C482 + C42214 * C473 -
                      C42211 * C488 + C42215 * C1970 - C42212 * C1978) *
                         C21355 +
                     (C42213 * C483 - C42210 * C500 + C42214 * C489 -
                      C42211 * C503 + C42215 * C1979 - C42212 * C1988) *
                         C47110) *
                        C47369 * C47268) *
                       C47163 * C638 +
                   (((C42213 * C120 - C42210 * C130 + C42214 * C474 -
                      C42211 * C490 + C42215 * C475 - C42212 * C492) *
                         C21355 +
                     (C42213 * C131 - C42210 * C141 + C42214 * C491 -
                      C42211 * C504 + C42215 * C493 - C42212 * C505) *
                         C47110) *
                        C47369 * C47430 +
                    ((C42210 * C490 - C42213 * C474 + C42211 * C492 -
                      C42214 * C475 + C42212 * C2253 - C42215 * C2252) *
                         C21355 +
                     (C42210 * C504 - C42213 * C491 + C42211 * C505 -
                      C42214 * C493 + C42212 * C2255 - C42215 * C2254) *
                         C47110) *
                        C47369 * C47268) *
                       C47163 * C47465)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  ((((C42210 * C124 - C42213 * C117 + C42211 * C478 -
                      C42214 * C468 + C42212 * C484 - C42215 * C471) *
                         C21355 +
                     (C42210 * C138 - C42213 * C125 + C42211 * C498 -
                      C42214 * C479 + C42212 * C501 - C42215 * C485) *
                         C47110) *
                        C47369 * C2248 +
                    ((C42213 * C468 - C42210 * C478 + C42214 * C471 -
                      C42211 * C484 + C42215 * C1968 - C42212 * C1974) *
                         C21355 +
                     (C42213 * C479 - C42210 * C498 + C42214 * C485 -
                      C42211 * C501 + C42215 * C1975 - C42212 * C1986) *
                         C47110) *
                        C47369 * C2249 +
                    ((C42210 * C484 - C42213 * C471 + C42211 * C1974 -
                      C42214 * C1968 + C42212 * C1980 - C42215 * C1971) *
                         C21355 +
                     (C42210 * C501 - C42213 * C485 + C42211 * C1986 -
                      C42214 * C1975 + C42212 * C1989 - C42215 * C1981) *
                         C47110) *
                        C47369 * C2250 +
                    ((C42213 * C1968 - C42210 * C1974 + C42214 * C1971 -
                      C42211 * C1980 + C42215 * C12393 - C42212 * C12395) *
                         C21355 +
                     (C42213 * C1975 - C42210 * C1986 + C42214 * C1981 -
                      C42211 * C1989 + C42215 * C12396 - C42212 * C12399) *
                         C47110) *
                        C47369 * C47477) *
                       C47163 * C47415 +
                   (((C42213 * C118 - C42210 * C126 + C42214 * C469 -
                      C42211 * C480 + C42215 * C472 - C42212 * C486) *
                         C21355 +
                     (C42213 * C127 - C42210 * C139 + C42214 * C481 -
                      C42211 * C499 + C42215 * C487 - C42212 * C502) *
                         C47110) *
                        C47369 * C2248 +
                    ((C42210 * C480 - C42213 * C469 + C42211 * C486 -
                      C42214 * C472 + C42212 * C1976 - C42215 * C1969) *
                         C21355 +
                     (C42210 * C499 - C42213 * C481 + C42211 * C502 -
                      C42214 * C487 + C42212 * C1987 - C42215 * C1977) *
                         C47110) *
                        C47369 * C2249 +
                    ((C42213 * C472 - C42210 * C486 + C42214 * C1969 -
                      C42211 * C1976 + C42215 * C1972 - C42212 * C1982) *
                         C21355 +
                     (C42213 * C487 - C42210 * C502 + C42214 * C1977 -
                      C42211 * C1987 + C42215 * C1983 - C42212 * C1990) *
                         C47110) *
                        C47369 * C2250 +
                    ((C42210 * C1976 - C42213 * C1969 + C42211 * C1982 -
                      C42214 * C1972 + C42212 * C12397 - C42215 * C12394) *
                         C21355 +
                     (C42210 * C1987 - C42213 * C1977 + C42211 * C1990 -
                      C42214 * C1983 + C42212 * C12400 - C42215 * C12398) *
                         C47110) *
                        C47369 * C47477) *
                       C47163 * C47146)) /
                     (p * q * std::sqrt(p + q));
    d2ee[214] += (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  ((((C42210 * C124 - C42213 * C117 + C42211 * C478 -
                      C42214 * C468 + C42212 * C484 - C42215 * C471) *
                         C21355 +
                     (C42210 * C138 - C42213 * C125 + C42211 * C498 -
                      C42214 * C479 + C42212 * C501 - C42215 * C485) *
                         C47110) *
                        C47369 * C47181 * C47500 +
                    ((C42213 * C287 - C42210 * C297 + C42214 * C906 -
                      C42211 * C911 + C42215 * C1258 - C42212 * C1267) *
                         C21355 +
                     (C42213 * C298 - C42210 * C317 + C42214 * C912 -
                      C42211 * C921 + C42215 * C1268 - C42212 * C1285) *
                         C47110) *
                        C47369 * C47181 * C47488 +
                    ((C42210 * C303 - C42213 * C290 + C42211 * C1273 -
                      C42214 * C1261 + C42212 * C1279 - C42215 * C1264) *
                         C21355 +
                     (C42210 * C320 - C42213 * C304 + C42211 * C1288 -
                      C42214 * C1274 + C42212 * C1291 - C42215 * C1280) *
                         C47110) *
                        C47369 * C47181 * C47461) *
                       C284 +
                   (((C42213 * C118 - C42210 * C126 + C42214 * C469 -
                      C42211 * C480 + C42215 * C472 - C42212 * C486) *
                         C21355 +
                     (C42213 * C127 - C42210 * C139 + C42214 * C481 -
                      C42211 * C499 + C42215 * C487 - C42212 * C502) *
                         C47110) *
                        C47369 * C47181 * C47500 +
                    ((C42210 * C299 - C42213 * C288 + C42211 * C913 -
                      C42214 * C907 + C42212 * C1269 - C42215 * C1259) *
                         C21355 +
                     (C42210 * C318 - C42213 * C300 + C42211 * C922 -
                      C42214 * C914 + C42212 * C1286 - C42215 * C1270) *
                         C47110) *
                        C47369 * C47181 * C47488 +
                    ((C42213 * C291 - C42210 * C305 + C42214 * C1262 -
                      C42211 * C1275 + C42215 * C1265 - C42212 * C1281) *
                         C21355 +
                     (C42213 * C306 - C42210 * C321 + C42214 * C1276 -
                      C42211 * C1289 + C42215 * C1282 - C42212 * C1292) *
                         C47110) *
                        C47369 * C47181 * C47461) *
                       C285 +
                   (((C42210 * C128 - C42213 * C119 + C42211 * C482 -
                      C42214 * C470 + C42212 * C488 - C42215 * C473) *
                         C21355 +
                     (C42210 * C140 - C42213 * C129 + C42211 * C500 -
                      C42214 * C483 + C42212 * C503 - C42215 * C489) *
                         C47110) *
                        C47369 * C47181 * C47500 +
                    ((C42213 * C289 - C42210 * C301 + C42214 * C908 -
                      C42211 * C915 + C42215 * C1260 - C42212 * C1271) *
                         C21355 +
                     (C42213 * C302 - C42210 * C319 + C42214 * C916 -
                      C42211 * C923 + C42215 * C1272 - C42212 * C1287) *
                         C47110) *
                        C47369 * C47181 * C47488 +
                    ((C42210 * C307 - C42213 * C292 + C42211 * C1277 -
                      C42214 * C1263 + C42212 * C1283 - C42215 * C1266) *
                         C21355 +
                     (C42210 * C322 - C42213 * C308 + C42211 * C1290 -
                      C42214 * C1278 + C42212 * C1293 - C42215 * C1284) *
                         C47110) *
                        C47369 * C47181 * C47461) *
                       C47455)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  (((C42210 * C124 - C42213 * C117 + C42211 * C478 -
                     C42214 * C468 + C42212 * C484 - C42215 * C471) *
                        C21355 +
                    (C42210 * C138 - C42213 * C125 + C42211 * C498 -
                     C42214 * C479 + C42212 * C501 - C42215 * C485) *
                        C47110) *
                       C47369 * C47181 * C47163 * C108 +
                   ((C42213 * C118 - C42210 * C126 + C42214 * C469 -
                     C42211 * C480 + C42215 * C472 - C42212 * C486) *
                        C21355 +
                    (C42213 * C127 - C42210 * C139 + C42214 * C481 -
                     C42211 * C499 + C42215 * C487 - C42212 * C502) *
                        C47110) *
                       C47369 * C47181 * C47163 * C109 +
                   ((C42210 * C128 - C42213 * C119 + C42211 * C482 -
                     C42214 * C470 + C42212 * C488 - C42215 * C473) *
                        C21355 +
                    (C42210 * C140 - C42213 * C129 + C42211 * C500 -
                     C42214 * C483 + C42212 * C503 - C42215 * C489) *
                        C47110) *
                       C47369 * C47181 * C47163 * C110 +
                   ((C42213 * C120 - C42210 * C130 + C42214 * C474 -
                     C42211 * C490 + C42215 * C475 - C42212 * C492) *
                        C21355 +
                    (C42213 * C131 - C42210 * C141 + C42214 * C491 -
                     C42211 * C504 + C42215 * C493 - C42212 * C505) *
                        C47110) *
                       C47369 * C47181 * C47163 * C111 +
                   ((C42210 * C132 - C42213 * C121 + C42211 * C494 -
                     C42214 * C476 + C42212 * C496 - C42215 * C477) *
                        C21355 +
                    (C42210 * C142 - C42213 * C133 + C42211 * C506 -
                     C42214 * C495 + C42212 * C507 - C42215 * C497) *
                        C47110) *
                       C47369 * C47181 * C47163 * C112)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  ((((C42210 * C124 - C42213 * C117 + C42211 * C478 -
                      C42214 * C468 + C42212 * C484 - C42215 * C471) *
                         C21355 +
                     (C42210 * C138 - C42213 * C125 + C42211 * C498 -
                      C42214 * C479 + C42212 * C501 - C42215 * C485) *
                         C47110) *
                        C47369 * C47181 * C1050 +
                    ((C42213 * C287 - C42210 * C297 + C42214 * C906 -
                      C42211 * C911 + C42215 * C1258 - C42212 * C1267) *
                         C21355 +
                     (C42213 * C298 - C42210 * C317 + C42214 * C912 -
                      C42211 * C921 + C42215 * C1268 - C42212 * C1285) *
                         C47110) *
                        C47369 * C47181 * C1051 +
                    ((C42210 * C303 - C42213 * C290 + C42211 * C1273 -
                      C42214 * C1261 + C42212 * C1279 - C42215 * C1264) *
                         C21355 +
                     (C42210 * C320 - C42213 * C304 + C42211 * C1288 -
                      C42214 * C1274 + C42212 * C1291 - C42215 * C1280) *
                         C47110) *
                        C47369 * C47181 * C47461) *
                       C47497 +
                   (((C42213 * C118 - C42210 * C126 + C42214 * C469 -
                      C42211 * C480 + C42215 * C472 - C42212 * C486) *
                         C21355 +
                     (C42213 * C127 - C42210 * C139 + C42214 * C481 -
                      C42211 * C499 + C42215 * C487 - C42212 * C502) *
                         C47110) *
                        C47369 * C47181 * C1050 +
                    ((C42210 * C299 - C42213 * C288 + C42211 * C913 -
                      C42214 * C907 + C42212 * C1269 - C42215 * C1259) *
                         C21355 +
                     (C42210 * C318 - C42213 * C300 + C42211 * C922 -
                      C42214 * C914 + C42212 * C1286 - C42215 * C1270) *
                         C47110) *
                        C47369 * C47181 * C1051 +
                    ((C42213 * C291 - C42210 * C305 + C42214 * C1262 -
                      C42211 * C1275 + C42215 * C1265 - C42212 * C1281) *
                         C21355 +
                     (C42213 * C306 - C42210 * C321 + C42214 * C1276 -
                      C42211 * C1289 + C42215 * C1282 - C42212 * C1292) *
                         C47110) *
                        C47369 * C47181 * C47461) *
                       C47484 +
                   (((C42210 * C128 - C42213 * C119 + C42211 * C482 -
                      C42214 * C470 + C42212 * C488 - C42215 * C473) *
                         C21355 +
                     (C42210 * C140 - C42213 * C129 + C42211 * C500 -
                      C42214 * C483 + C42212 * C503 - C42215 * C489) *
                         C47110) *
                        C47369 * C47181 * C1050 +
                    ((C42213 * C289 - C42210 * C301 + C42214 * C908 -
                      C42211 * C915 + C42215 * C1260 - C42212 * C1271) *
                         C21355 +
                     (C42213 * C302 - C42210 * C319 + C42214 * C916 -
                      C42211 * C923 + C42215 * C1272 - C42212 * C1287) *
                         C47110) *
                        C47369 * C47181 * C1051 +
                    ((C42210 * C307 - C42213 * C292 + C42211 * C1277 -
                      C42214 * C1263 + C42212 * C1283 - C42215 * C1266) *
                         C21355 +
                     (C42210 * C322 - C42213 * C308 + C42211 * C1290 -
                      C42214 * C1278 + C42212 * C1293 - C42215 * C1284) *
                         C47110) *
                        C47369 * C47181 * C47461) *
                       C47455)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  (((C42210 * C124 - C42213 * C117 + C42211 * C478 -
                     C42214 * C468 + C42212 * C484 - C42215 * C471) *
                        C21355 +
                    (C42210 * C138 - C42213 * C125 + C42211 * C498 -
                     C42214 * C479 + C42212 * C501 - C42215 * C485) *
                        C47110) *
                       C47369 * C47181 * C1118 +
                   ((C42213 * C287 - C42210 * C297 + C42214 * C906 -
                     C42211 * C911 + C42215 * C1258 - C42212 * C1267) *
                        C21355 +
                    (C42213 * C298 - C42210 * C317 + C42214 * C912 -
                     C42211 * C921 + C42215 * C1268 - C42212 * C1285) *
                        C47110) *
                       C47369 * C47181 * C1119 +
                   ((C42210 * C303 - C42213 * C290 + C42211 * C1273 -
                     C42214 * C1261 + C42212 * C1279 - C42215 * C1264) *
                        C21355 +
                    (C42210 * C320 - C42213 * C304 + C42211 * C1288 -
                     C42214 * C1274 + C42212 * C1291 - C42215 * C1280) *
                        C47110) *
                       C47369 * C47181 * C1120 +
                   ((C42213 * C1124 - C42210 * C1130 + C42214 * C1666 -
                     C42211 * C1669 + C42215 * C5893 - C42212 * C5895) *
                        C21355 +
                    (C42213 * C1131 - C42210 * C1142 + C42214 * C1670 -
                     C42211 * C1675 + C42215 * C5896 - C42212 * C5899) *
                        C47110) *
                       C47369 * C47181 * C1121 +
                   ((C42210 * C1136 - C42213 * C1127 + C42211 * C6385 -
                     C42214 * C6383 + C42212 * C22230 - C42215 * C22229) *
                        C21355 +
                    (C42210 * C1145 - C42213 * C1137 + C42211 * C6389 -
                     C42214 * C6386 + C42212 * C22232 - C42215 * C22231) *
                        C47110) *
                       C47369 * C47181 * C1122) *
                  C47135) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C42210 * C124 - C42213 * C117 + C42211 * C478 -
                      C42214 * C468 + C42212 * C484 - C42215 * C471) *
                         C21355 +
                     (C42210 * C138 - C42213 * C125 + C42211 * C498 -
                      C42214 * C479 + C42212 * C501 - C42215 * C485) *
                         C47110) *
                        C47369 * C1788 +
                    ((C42213 * C468 - C42210 * C478 + C42214 * C471 -
                      C42211 * C484 + C42215 * C1968 - C42212 * C1974) *
                         C21355 +
                     (C42213 * C479 - C42210 * C498 + C42214 * C485 -
                      C42211 * C501 + C42215 * C1975 - C42212 * C1986) *
                         C47110) *
                        C47369 * C1789 +
                    ((C42210 * C484 - C42213 * C471 + C42211 * C1974 -
                      C42214 * C1968 + C42212 * C1980 - C42215 * C1971) *
                         C21355 +
                     (C42210 * C501 - C42213 * C485 + C42211 * C1986 -
                      C42214 * C1975 + C42212 * C1989 - C42215 * C1981) *
                         C47110) *
                        C47369 * C47464) *
                       C47163 * C47497 +
                   (((C42213 * C118 - C42210 * C126 + C42214 * C469 -
                      C42211 * C480 + C42215 * C472 - C42212 * C486) *
                         C21355 +
                     (C42213 * C127 - C42210 * C139 + C42214 * C481 -
                      C42211 * C499 + C42215 * C487 - C42212 * C502) *
                         C47110) *
                        C47369 * C1788 +
                    ((C42210 * C480 - C42213 * C469 + C42211 * C486 -
                      C42214 * C472 + C42212 * C1976 - C42215 * C1969) *
                         C21355 +
                     (C42210 * C499 - C42213 * C481 + C42211 * C502 -
                      C42214 * C487 + C42212 * C1987 - C42215 * C1977) *
                         C47110) *
                        C47369 * C1789 +
                    ((C42213 * C472 - C42210 * C486 + C42214 * C1969 -
                      C42211 * C1976 + C42215 * C1972 - C42212 * C1982) *
                         C21355 +
                     (C42213 * C487 - C42210 * C502 + C42214 * C1977 -
                      C42211 * C1987 + C42215 * C1983 - C42212 * C1990) *
                         C47110) *
                        C47369 * C47464) *
                       C47163 * C47484 +
                   (((C42210 * C128 - C42213 * C119 + C42211 * C482 -
                      C42214 * C470 + C42212 * C488 - C42215 * C473) *
                         C21355 +
                     (C42210 * C140 - C42213 * C129 + C42211 * C500 -
                      C42214 * C483 + C42212 * C503 - C42215 * C489) *
                         C47110) *
                        C47369 * C1788 +
                    ((C42213 * C470 - C42210 * C482 + C42214 * C473 -
                      C42211 * C488 + C42215 * C1970 - C42212 * C1978) *
                         C21355 +
                     (C42213 * C483 - C42210 * C500 + C42214 * C489 -
                      C42211 * C503 + C42215 * C1979 - C42212 * C1988) *
                         C47110) *
                        C47369 * C1789 +
                    ((C42210 * C488 - C42213 * C473 + C42211 * C1978 -
                      C42214 * C1970 + C42212 * C1984 - C42215 * C1973) *
                         C21355 +
                     (C42210 * C503 - C42213 * C489 + C42211 * C1988 -
                      C42214 * C1979 + C42212 * C1991 - C42215 * C1985) *
                         C47110) *
                        C47369 * C47464) *
                       C47163 * C47455)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C42210 * C124 - C42213 * C117 + C42211 * C478 -
                      C42214 * C468 + C42212 * C484 - C42215 * C471) *
                         C21355 +
                     (C42210 * C138 - C42213 * C125 + C42211 * C498 -
                      C42214 * C479 + C42212 * C501 - C42215 * C485) *
                         C47110) *
                        C47369 * C1788 +
                    ((C42213 * C468 - C42210 * C478 + C42214 * C471 -
                      C42211 * C484 + C42215 * C1968 - C42212 * C1974) *
                         C21355 +
                     (C42213 * C479 - C42210 * C498 + C42214 * C485 -
                      C42211 * C501 + C42215 * C1975 - C42212 * C1986) *
                         C47110) *
                        C47369 * C1789 +
                    ((C42210 * C484 - C42213 * C471 + C42211 * C1974 -
                      C42214 * C1968 + C42212 * C1980 - C42215 * C1971) *
                         C21355 +
                     (C42210 * C501 - C42213 * C485 + C42211 * C1986 -
                      C42214 * C1975 + C42212 * C1989 - C42215 * C1981) *
                         C47110) *
                        C47369 * C47464) *
                       C47500 +
                   (((C42213 * C287 - C42210 * C297 + C42214 * C906 -
                      C42211 * C911 + C42215 * C1258 - C42212 * C1267) *
                         C21355 +
                     (C42213 * C298 - C42210 * C317 + C42214 * C912 -
                      C42211 * C921 + C42215 * C1268 - C42212 * C1285) *
                         C47110) *
                        C47369 * C1788 +
                    ((C42210 * C911 - C42213 * C906 + C42211 * C1267 -
                      C42214 * C1258 + C42212 * C2365 - C42215 * C2362) *
                         C21355 +
                     (C42210 * C921 - C42213 * C912 + C42211 * C1285 -
                      C42214 * C1268 + C42212 * C2371 - C42215 * C2366) *
                         C47110) *
                        C47369 * C1789 +
                    ((C42213 * C1258 - C42210 * C1267 + C42214 * C2362 -
                      C42211 * C2365 + C42215 * C6769 - C42212 * C6771) *
                         C21355 +
                     (C42213 * C1268 - C42210 * C1285 + C42214 * C2366 -
                      C42211 * C2371 + C42215 * C6772 - C42212 * C6775) *
                         C47110) *
                        C47369 * C47464) *
                       C47488 +
                   (((C42210 * C303 - C42213 * C290 + C42211 * C1273 -
                      C42214 * C1261 + C42212 * C1279 - C42215 * C1264) *
                         C21355 +
                     (C42210 * C320 - C42213 * C304 + C42211 * C1288 -
                      C42214 * C1274 + C42212 * C1291 - C42215 * C1280) *
                         C47110) *
                        C47369 * C1788 +
                    ((C42213 * C1261 - C42210 * C1273 + C42214 * C1264 -
                      C42211 * C1279 + C42215 * C7239 - C42212 * C7241) *
                         C21355 +
                     (C42213 * C1274 - C42210 * C1288 + C42214 * C1280 -
                      C42211 * C1291 + C42215 * C7242 - C42212 * C7245) *
                         C47110) *
                        C47369 * C1789 +
                    ((C42210 * C1279 - C42213 * C1264 + C42211 * C7241 -
                      C42214 * C7239 + C42212 * C22891 - C42215 * C22890) *
                         C21355 +
                     (C42210 * C1291 - C42213 * C1280 + C42211 * C7245 -
                      C42214 * C7242 + C42212 * C22893 - C42215 * C22892) *
                         C47110) *
                        C47369 * C47464) *
                       C47461) *
                  C47135) /
                     (p * q * std::sqrt(p + q));
    d2ee[215] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((((C42210 * C124 - C42213 * C117 + C42211 * C478 -
                       C42214 * C468 + C42212 * C484 - C42215 * C471) *
                          C21355 +
                      (C42210 * C138 - C42213 * C125 + C42211 * C498 -
                       C42214 * C479 + C42212 * C501 - C42215 * C485) *
                          C47110) *
                         C47369 * C3234 +
                     ((C42213 * C468 - C42210 * C478 + C42214 * C471 -
                       C42211 * C484 + C42215 * C1968 - C42212 * C1974) *
                          C21355 +
                      (C42213 * C479 - C42210 * C498 + C42214 * C485 -
                       C42211 * C501 + C42215 * C1975 - C42212 * C1986) *
                          C47110) *
                         C47369 * C47268) *
                        C47429 +
                    (((C42213 * C287 - C42210 * C297 + C42214 * C906 -
                       C42211 * C911 + C42215 * C1258 - C42212 * C1267) *
                          C21355 +
                      (C42213 * C298 - C42210 * C317 + C42214 * C912 -
                       C42211 * C921 + C42215 * C1268 - C42212 * C1285) *
                          C47110) *
                         C47369 * C3234 +
                     ((C42210 * C911 - C42213 * C906 + C42211 * C1267 -
                       C42214 * C1258 + C42212 * C2365 - C42215 * C2362) *
                          C21355 +
                      (C42210 * C921 - C42213 * C912 + C42211 * C1285 -
                       C42214 * C1268 + C42212 * C2371 - C42215 * C2366) *
                          C47110) *
                         C47369 * C47268) *
                        C47226) *
                       C47140 +
                   ((((C42213 * C118 - C42210 * C126 + C42214 * C469 -
                       C42211 * C480 + C42215 * C472 - C42212 * C486) *
                          C21355 +
                      (C42213 * C127 - C42210 * C139 + C42214 * C481 -
                       C42211 * C499 + C42215 * C487 - C42212 * C502) *
                          C47110) *
                         C47369 * C3234 +
                     ((C42210 * C480 - C42213 * C469 + C42211 * C486 -
                       C42214 * C472 + C42212 * C1976 - C42215 * C1969) *
                          C21355 +
                      (C42210 * C499 - C42213 * C481 + C42211 * C502 -
                       C42214 * C487 + C42212 * C1987 - C42215 * C1977) *
                          C47110) *
                         C47369 * C47268) *
                        C47429 +
                    (((C42210 * C299 - C42213 * C288 + C42211 * C913 -
                       C42214 * C907 + C42212 * C1269 - C42215 * C1259) *
                          C21355 +
                      (C42210 * C318 - C42213 * C300 + C42211 * C922 -
                       C42214 * C914 + C42212 * C1286 - C42215 * C1270) *
                          C47110) *
                         C47369 * C3234 +
                     ((C42213 * C907 - C42210 * C913 + C42214 * C1259 -
                       C42211 * C1269 + C42215 * C2363 - C42212 * C2367) *
                          C21355 +
                      (C42213 * C914 - C42210 * C922 + C42214 * C1270 -
                       C42211 * C1286 + C42215 * C2368 - C42212 * C2372) *
                          C47110) *
                         C47369 * C47268) *
                        C47226) *
                       C47149 +
                   ((((C42210 * C128 - C42213 * C119 + C42211 * C482 -
                       C42214 * C470 + C42212 * C488 - C42215 * C473) *
                          C21355 +
                      (C42210 * C140 - C42213 * C129 + C42211 * C500 -
                       C42214 * C483 + C42212 * C503 - C42215 * C489) *
                          C47110) *
                         C47369 * C3234 +
                     ((C42213 * C470 - C42210 * C482 + C42214 * C473 -
                       C42211 * C488 + C42215 * C1970 - C42212 * C1978) *
                          C21355 +
                      (C42213 * C483 - C42210 * C500 + C42214 * C489 -
                       C42211 * C503 + C42215 * C1979 - C42212 * C1988) *
                          C47110) *
                         C47369 * C47268) *
                        C47429 +
                    (((C42213 * C289 - C42210 * C301 + C42214 * C908 -
                       C42211 * C915 + C42215 * C1260 - C42212 * C1271) *
                          C21355 +
                      (C42213 * C302 - C42210 * C319 + C42214 * C916 -
                       C42211 * C923 + C42215 * C1272 - C42212 * C1287) *
                          C47110) *
                         C47369 * C3234 +
                     ((C42210 * C915 - C42213 * C908 + C42211 * C1271 -
                       C42214 * C1260 + C42212 * C2369 - C42215 * C2364) *
                          C21355 +
                      (C42210 * C923 - C42213 * C916 + C42211 * C1287 -
                       C42214 * C1272 + C42212 * C2373 - C42215 * C2370) *
                          C47110) *
                         C47369 * C47268) *
                        C47226) *
                       C2843)) /
                 (p * q * std::sqrt(p + q));
    d2ee[216] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((((C42210 * C124 - C42213 * C117 + C42211 * C478 -
                       C42214 * C468 + C42212 * C484 - C42215 * C471) *
                          C21355 +
                      (C42210 * C138 - C42213 * C125 + C42211 * C498 -
                       C42214 * C479 + C42212 * C501 - C42215 * C485) *
                          C47110) *
                         C47369 * C47264 +
                     ((C42213 * C468 - C42210 * C478 + C42214 * C471 -
                       C42211 * C484 + C42215 * C1968 - C42212 * C1974) *
                          C21355 +
                      (C42213 * C479 - C42210 * C498 + C42214 * C485 -
                       C42211 * C501 + C42215 * C1975 - C42212 * C1986) *
                          C47110) *
                         C47369 * C47271 +
                     ((C42210 * C484 - C42213 * C471 + C42211 * C1974 -
                       C42214 * C1968 + C42212 * C1980 - C42215 * C1971) *
                          C21355 +
                      (C42210 * C501 - C42213 * C485 + C42211 * C1986 -
                       C42214 * C1975 + C42212 * C1989 - C42215 * C1981) *
                          C47110) *
                         C47369 * C3742) *
                        C47429 +
                    (((C42213 * C287 - C42210 * C297 + C42214 * C906 -
                       C42211 * C911 + C42215 * C1258 - C42212 * C1267) *
                          C21355 +
                      (C42213 * C298 - C42210 * C317 + C42214 * C912 -
                       C42211 * C921 + C42215 * C1268 - C42212 * C1285) *
                          C47110) *
                         C47369 * C47264 +
                     ((C42210 * C911 - C42213 * C906 + C42211 * C1267 -
                       C42214 * C1258 + C42212 * C2365 - C42215 * C2362) *
                          C21355 +
                      (C42210 * C921 - C42213 * C912 + C42211 * C1285 -
                       C42214 * C1268 + C42212 * C2371 - C42215 * C2366) *
                          C47110) *
                         C47369 * C47271 +
                     ((C42213 * C1258 - C42210 * C1267 + C42214 * C2362 -
                       C42211 * C2365 + C42215 * C6769 - C42212 * C6771) *
                          C21355 +
                      (C42213 * C1268 - C42210 * C1285 + C42214 * C2366 -
                       C42211 * C2371 + C42215 * C6772 - C42212 * C6775) *
                          C47110) *
                         C47369 * C3742) *
                        C47226) *
                       C2580 +
                   ((((C42213 * C118 - C42210 * C126 + C42214 * C469 -
                       C42211 * C480 + C42215 * C472 - C42212 * C486) *
                          C21355 +
                      (C42213 * C127 - C42210 * C139 + C42214 * C481 -
                       C42211 * C499 + C42215 * C487 - C42212 * C502) *
                          C47110) *
                         C47369 * C47264 +
                     ((C42210 * C480 - C42213 * C469 + C42211 * C486 -
                       C42214 * C472 + C42212 * C1976 - C42215 * C1969) *
                          C21355 +
                      (C42210 * C499 - C42213 * C481 + C42211 * C502 -
                       C42214 * C487 + C42212 * C1987 - C42215 * C1977) *
                          C47110) *
                         C47369 * C47271 +
                     ((C42213 * C472 - C42210 * C486 + C42214 * C1969 -
                       C42211 * C1976 + C42215 * C1972 - C42212 * C1982) *
                          C21355 +
                      (C42213 * C487 - C42210 * C502 + C42214 * C1977 -
                       C42211 * C1987 + C42215 * C1983 - C42212 * C1990) *
                          C47110) *
                         C47369 * C3742) *
                        C47429 +
                    (((C42210 * C299 - C42213 * C288 + C42211 * C913 -
                       C42214 * C907 + C42212 * C1269 - C42215 * C1259) *
                          C21355 +
                      (C42210 * C318 - C42213 * C300 + C42211 * C922 -
                       C42214 * C914 + C42212 * C1286 - C42215 * C1270) *
                          C47110) *
                         C47369 * C47264 +
                     ((C42213 * C907 - C42210 * C913 + C42214 * C1259 -
                       C42211 * C1269 + C42215 * C2363 - C42212 * C2367) *
                          C21355 +
                      (C42213 * C914 - C42210 * C922 + C42214 * C1270 -
                       C42211 * C1286 + C42215 * C2368 - C42212 * C2372) *
                          C47110) *
                         C47369 * C47271 +
                     ((C42210 * C1269 - C42213 * C1259 + C42211 * C2367 -
                       C42214 * C2363 + C42212 * C6773 - C42215 * C6770) *
                          C21355 +
                      (C42210 * C1286 - C42213 * C1270 + C42211 * C2372 -
                       C42214 * C2368 + C42212 * C6776 - C42215 * C6774) *
                          C47110) *
                         C47369 * C3742) *
                        C47226) *
                       C47146)) /
                 (p * q * std::sqrt(p + q));
    d2ee[217] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((((C42210 * C124 - C42213 * C117 + C42211 * C478 -
                       C42214 * C468 + C42212 * C484 - C42215 * C471) *
                          C21355 +
                      (C42210 * C138 - C42213 * C125 + C42211 * C498 -
                       C42214 * C479 + C42212 * C501 - C42215 * C485) *
                          C47110) *
                         C47369 * C3234 +
                     ((C42213 * C468 - C42210 * C478 + C42214 * C471 -
                       C42211 * C484 + C42215 * C1968 - C42212 * C1974) *
                          C21355 +
                      (C42213 * C479 - C42210 * C498 + C42214 * C485 -
                       C42211 * C501 + C42215 * C1975 - C42212 * C1986) *
                          C47110) *
                         C47369 * C47268) *
                        C47500 +
                    (((C42213 * C287 - C42210 * C297 + C42214 * C906 -
                       C42211 * C911 + C42215 * C1258 - C42212 * C1267) *
                          C21355 +
                      (C42213 * C298 - C42210 * C317 + C42214 * C912 -
                       C42211 * C921 + C42215 * C1268 - C42212 * C1285) *
                          C47110) *
                         C47369 * C3234 +
                     ((C42210 * C911 - C42213 * C906 + C42211 * C1267 -
                       C42214 * C1258 + C42212 * C2365 - C42215 * C2362) *
                          C21355 +
                      (C42210 * C921 - C42213 * C912 + C42211 * C1285 -
                       C42214 * C1268 + C42212 * C2371 - C42215 * C2366) *
                          C47110) *
                         C47369 * C47268) *
                        C47488 +
                    (((C42210 * C303 - C42213 * C290 + C42211 * C1273 -
                       C42214 * C1261 + C42212 * C1279 - C42215 * C1264) *
                          C21355 +
                      (C42210 * C320 - C42213 * C304 + C42211 * C1288 -
                       C42214 * C1274 + C42212 * C1291 - C42215 * C1280) *
                          C47110) *
                         C47369 * C3234 +
                     ((C42213 * C1261 - C42210 * C1273 + C42214 * C1264 -
                       C42211 * C1279 + C42215 * C7239 - C42212 * C7241) *
                          C21355 +
                      (C42213 * C1274 - C42210 * C1288 + C42214 * C1280 -
                       C42211 * C1291 + C42215 * C7242 - C42212 * C7245) *
                          C47110) *
                         C47369 * C47268) *
                        C47461) *
                       C2580 +
                   ((((C42213 * C118 - C42210 * C126 + C42214 * C469 -
                       C42211 * C480 + C42215 * C472 - C42212 * C486) *
                          C21355 +
                      (C42213 * C127 - C42210 * C139 + C42214 * C481 -
                       C42211 * C499 + C42215 * C487 - C42212 * C502) *
                          C47110) *
                         C47369 * C3234 +
                     ((C42210 * C480 - C42213 * C469 + C42211 * C486 -
                       C42214 * C472 + C42212 * C1976 - C42215 * C1969) *
                          C21355 +
                      (C42210 * C499 - C42213 * C481 + C42211 * C502 -
                       C42214 * C487 + C42212 * C1987 - C42215 * C1977) *
                          C47110) *
                         C47369 * C47268) *
                        C47500 +
                    (((C42210 * C299 - C42213 * C288 + C42211 * C913 -
                       C42214 * C907 + C42212 * C1269 - C42215 * C1259) *
                          C21355 +
                      (C42210 * C318 - C42213 * C300 + C42211 * C922 -
                       C42214 * C914 + C42212 * C1286 - C42215 * C1270) *
                          C47110) *
                         C47369 * C3234 +
                     ((C42213 * C907 - C42210 * C913 + C42214 * C1259 -
                       C42211 * C1269 + C42215 * C2363 - C42212 * C2367) *
                          C21355 +
                      (C42213 * C914 - C42210 * C922 + C42214 * C1270 -
                       C42211 * C1286 + C42215 * C2368 - C42212 * C2372) *
                          C47110) *
                         C47369 * C47268) *
                        C47488 +
                    (((C42213 * C291 - C42210 * C305 + C42214 * C1262 -
                       C42211 * C1275 + C42215 * C1265 - C42212 * C1281) *
                          C21355 +
                      (C42213 * C306 - C42210 * C321 + C42214 * C1276 -
                       C42211 * C1289 + C42215 * C1282 - C42212 * C1292) *
                          C47110) *
                         C47369 * C3234 +
                     ((C42210 * C1275 - C42213 * C1262 + C42211 * C1281 -
                       C42214 * C1265 + C42212 * C7243 - C42215 * C7240) *
                          C21355 +
                      (C42210 * C1289 - C42213 * C1276 + C42211 * C1292 -
                       C42214 * C1282 + C42212 * C7246 - C42215 * C7244) *
                          C47110) *
                         C47369 * C47268) *
                        C47461) *
                       C47146)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C42210 * C124 - C42213 * C117 + C42211 * C478 -
                      C42214 * C468 + C42212 * C484 - C42215 * C471) *
                         C21355 +
                     (C42210 * C138 - C42213 * C125 + C42211 * C498 -
                      C42214 * C479 + C42212 * C501 - C42215 * C485) *
                         C47110) *
                        C47369 * C3234 +
                    ((C42213 * C468 - C42210 * C478 + C42214 * C471 -
                      C42211 * C484 + C42215 * C1968 - C42212 * C1974) *
                         C21355 +
                     (C42213 * C479 - C42210 * C498 + C42214 * C485 -
                      C42211 * C501 + C42215 * C1975 - C42212 * C1986) *
                         C47110) *
                        C47369 * C47268) *
                       C47163 * C47506 +
                   (((C42213 * C118 - C42210 * C126 + C42214 * C469 -
                      C42211 * C480 + C42215 * C472 - C42212 * C486) *
                         C21355 +
                     (C42213 * C127 - C42210 * C139 + C42214 * C481 -
                      C42211 * C499 + C42215 * C487 - C42212 * C502) *
                         C47110) *
                        C47369 * C3234 +
                    ((C42210 * C480 - C42213 * C469 + C42211 * C486 -
                      C42214 * C472 + C42212 * C1976 - C42215 * C1969) *
                         C21355 +
                     (C42210 * C499 - C42213 * C481 + C42211 * C502 -
                      C42214 * C487 + C42212 * C1987 - C42215 * C1977) *
                         C47110) *
                        C47369 * C47268) *
                       C47163 * C47499 +
                   (((C42210 * C128 - C42213 * C119 + C42211 * C482 -
                      C42214 * C470 + C42212 * C488 - C42215 * C473) *
                         C21355 +
                     (C42210 * C140 - C42213 * C129 + C42211 * C500 -
                      C42214 * C483 + C42212 * C503 - C42215 * C489) *
                         C47110) *
                        C47369 * C3234 +
                    ((C42213 * C470 - C42210 * C482 + C42214 * C473 -
                      C42211 * C488 + C42215 * C1970 - C42212 * C1978) *
                         C21355 +
                     (C42213 * C483 - C42210 * C500 + C42214 * C489 -
                      C42211 * C503 + C42215 * C1979 - C42212 * C1988) *
                         C47110) *
                        C47369 * C47268) *
                       C47163 * C47486 +
                   (((C42213 * C120 - C42210 * C130 + C42214 * C474 -
                      C42211 * C490 + C42215 * C475 - C42212 * C492) *
                         C21355 +
                     (C42213 * C131 - C42210 * C141 + C42214 * C491 -
                      C42211 * C504 + C42215 * C493 - C42212 * C505) *
                         C47110) *
                        C47369 * C3234 +
                    ((C42210 * C490 - C42213 * C474 + C42211 * C492 -
                      C42214 * C475 + C42212 * C2253 - C42215 * C2252) *
                         C21355 +
                     (C42210 * C504 - C42213 * C491 + C42211 * C505 -
                      C42214 * C493 + C42212 * C2255 - C42215 * C2254) *
                         C47110) *
                        C47369 * C47268) *
                       C47163 * C47465)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  ((((C42210 * C124 - C42213 * C117 + C42211 * C478 -
                      C42214 * C468 + C42212 * C484 - C42215 * C471) *
                         C21355 +
                     (C42210 * C138 - C42213 * C125 + C42211 * C498 -
                      C42214 * C479 + C42212 * C501 - C42215 * C485) *
                         C47110) *
                        C47369 * C47508 +
                    ((C42213 * C468 - C42210 * C478 + C42214 * C471 -
                      C42211 * C484 + C42215 * C1968 - C42212 * C1974) *
                         C21355 +
                     (C42213 * C479 - C42210 * C498 + C42214 * C485 -
                      C42211 * C501 + C42215 * C1975 - C42212 * C1986) *
                         C47110) *
                        C47369 * C47505 +
                    ((C42210 * C484 - C42213 * C471 + C42211 * C1974 -
                      C42214 * C1968 + C42212 * C1980 - C42215 * C1971) *
                         C21355 +
                     (C42210 * C501 - C42213 * C485 + C42211 * C1986 -
                      C42214 * C1975 + C42212 * C1989 - C42215 * C1981) *
                         C47110) *
                        C47369 * C47496 +
                    ((C42213 * C1968 - C42210 * C1974 + C42214 * C1971 -
                      C42211 * C1980 + C42215 * C12393 - C42212 * C12395) *
                         C21355 +
                     (C42213 * C1975 - C42210 * C1986 + C42214 * C1981 -
                      C42211 * C1989 + C42215 * C12396 - C42212 * C12399) *
                         C47110) *
                        C47369 * C47477) *
                       C47163 * C2580 +
                   (((C42213 * C118 - C42210 * C126 + C42214 * C469 -
                      C42211 * C480 + C42215 * C472 - C42212 * C486) *
                         C21355 +
                     (C42213 * C127 - C42210 * C139 + C42214 * C481 -
                      C42211 * C499 + C42215 * C487 - C42212 * C502) *
                         C47110) *
                        C47369 * C47508 +
                    ((C42210 * C480 - C42213 * C469 + C42211 * C486 -
                      C42214 * C472 + C42212 * C1976 - C42215 * C1969) *
                         C21355 +
                     (C42210 * C499 - C42213 * C481 + C42211 * C502 -
                      C42214 * C487 + C42212 * C1987 - C42215 * C1977) *
                         C47110) *
                        C47369 * C47505 +
                    ((C42213 * C472 - C42210 * C486 + C42214 * C1969 -
                      C42211 * C1976 + C42215 * C1972 - C42212 * C1982) *
                         C21355 +
                     (C42213 * C487 - C42210 * C502 + C42214 * C1977 -
                      C42211 * C1987 + C42215 * C1983 - C42212 * C1990) *
                         C47110) *
                        C47369 * C47496 +
                    ((C42210 * C1976 - C42213 * C1969 + C42211 * C1982 -
                      C42214 * C1972 + C42212 * C12397 - C42215 * C12394) *
                         C21355 +
                     (C42210 * C1987 - C42213 * C1977 + C42211 * C1990 -
                      C42214 * C1983 + C42212 * C12400 - C42215 * C12398) *
                         C47110) *
                        C47369 * C47477) *
                       C47163 * C47146)) /
                     (p * q * std::sqrt(p + q));
    d2ee[218] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((C42210 * C124 - C42213 * C117 + C42211 * C478 -
                      C42214 * C468 + C42212 * C484 - C42215 * C471) *
                         C21355 +
                     (C42210 * C138 - C42213 * C125 + C42211 * C498 -
                      C42214 * C479 + C42212 * C501 - C42215 * C485) *
                         C47110) *
                        C47369 * C47264 +
                    ((C42213 * C468 - C42210 * C478 + C42214 * C471 -
                      C42211 * C484 + C42215 * C1968 - C42212 * C1974) *
                         C21355 +
                     (C42213 * C479 - C42210 * C498 + C42214 * C485 -
                      C42211 * C501 + C42215 * C1975 - C42212 * C1986) *
                         C47110) *
                        C47369 * C47271 +
                    ((C42210 * C484 - C42213 * C471 + C42211 * C1974 -
                      C42214 * C1968 + C42212 * C1980 - C42215 * C1971) *
                         C21355 +
                     (C42210 * C501 - C42213 * C485 + C42211 * C1986 -
                      C42214 * C1975 + C42212 * C1989 - C42215 * C1981) *
                         C47110) *
                        C47369 * C3742) *
                       C47163 * C47140 +
                   (((C42213 * C118 - C42210 * C126 + C42214 * C469 -
                      C42211 * C480 + C42215 * C472 - C42212 * C486) *
                         C21355 +
                     (C42213 * C127 - C42210 * C139 + C42214 * C481 -
                      C42211 * C499 + C42215 * C487 - C42212 * C502) *
                         C47110) *
                        C47369 * C47264 +
                    ((C42210 * C480 - C42213 * C469 + C42211 * C486 -
                      C42214 * C472 + C42212 * C1976 - C42215 * C1969) *
                         C21355 +
                     (C42210 * C499 - C42213 * C481 + C42211 * C502 -
                      C42214 * C487 + C42212 * C1987 - C42215 * C1977) *
                         C47110) *
                        C47369 * C47271 +
                    ((C42213 * C472 - C42210 * C486 + C42214 * C1969 -
                      C42211 * C1976 + C42215 * C1972 - C42212 * C1982) *
                         C21355 +
                     (C42213 * C487 - C42210 * C502 + C42214 * C1977 -
                      C42211 * C1987 + C42215 * C1983 - C42212 * C1990) *
                         C47110) *
                        C47369 * C3742) *
                       C47163 * C47149 +
                   (((C42210 * C128 - C42213 * C119 + C42211 * C482 -
                      C42214 * C470 + C42212 * C488 - C42215 * C473) *
                         C21355 +
                     (C42210 * C140 - C42213 * C129 + C42211 * C500 -
                      C42214 * C483 + C42212 * C503 - C42215 * C489) *
                         C47110) *
                        C47369 * C47264 +
                    ((C42213 * C470 - C42210 * C482 + C42214 * C473 -
                      C42211 * C488 + C42215 * C1970 - C42212 * C1978) *
                         C21355 +
                     (C42213 * C483 - C42210 * C500 + C42214 * C489 -
                      C42211 * C503 + C42215 * C1979 - C42212 * C1988) *
                         C47110) *
                        C47369 * C47271 +
                    ((C42210 * C488 - C42213 * C473 + C42211 * C1978 -
                      C42214 * C1970 + C42212 * C1984 - C42215 * C1973) *
                         C21355 +
                     (C42210 * C503 - C42213 * C489 + C42211 * C1988 -
                      C42214 * C1979 + C42212 * C1991 - C42215 * C1985) *
                         C47110) *
                        C47369 * C3742) *
                       C47163 * C2843)) /
                 (p * q * std::sqrt(p + q));
    d2ee[219] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((C42210 * C124 - C42213 * C117 + C42211 * C478 -
                      C42214 * C468 + C42212 * C484 - C42215 * C471) *
                         C21355 +
                     (C42210 * C138 - C42213 * C125 + C42211 * C498 -
                      C42214 * C479 + C42212 * C501 - C42215 * C485) *
                         C47110) *
                        C47369 * C3234 +
                    ((C42213 * C468 - C42210 * C478 + C42214 * C471 -
                      C42211 * C484 + C42215 * C1968 - C42212 * C1974) *
                         C21355 +
                     (C42213 * C479 - C42210 * C498 + C42214 * C485 -
                      C42211 * C501 + C42215 * C1975 - C42212 * C1986) *
                         C47110) *
                        C47369 * C47268) *
                       C47163 * C47506 +
                   (((C42213 * C118 - C42210 * C126 + C42214 * C469 -
                      C42211 * C480 + C42215 * C472 - C42212 * C486) *
                         C21355 +
                     (C42213 * C127 - C42210 * C139 + C42214 * C481 -
                      C42211 * C499 + C42215 * C487 - C42212 * C502) *
                         C47110) *
                        C47369 * C3234 +
                    ((C42210 * C480 - C42213 * C469 + C42211 * C486 -
                      C42214 * C472 + C42212 * C1976 - C42215 * C1969) *
                         C21355 +
                     (C42210 * C499 - C42213 * C481 + C42211 * C502 -
                      C42214 * C487 + C42212 * C1987 - C42215 * C1977) *
                         C47110) *
                        C47369 * C47268) *
                       C47163 * C47499 +
                   (((C42210 * C128 - C42213 * C119 + C42211 * C482 -
                      C42214 * C470 + C42212 * C488 - C42215 * C473) *
                         C21355 +
                     (C42210 * C140 - C42213 * C129 + C42211 * C500 -
                      C42214 * C483 + C42212 * C503 - C42215 * C489) *
                         C47110) *
                        C47369 * C3234 +
                    ((C42213 * C470 - C42210 * C482 + C42214 * C473 -
                      C42211 * C488 + C42215 * C1970 - C42212 * C1978) *
                         C21355 +
                     (C42213 * C483 - C42210 * C500 + C42214 * C489 -
                      C42211 * C503 + C42215 * C1979 - C42212 * C1988) *
                         C47110) *
                        C47369 * C47268) *
                       C47163 * C47486 +
                   (((C42213 * C120 - C42210 * C130 + C42214 * C474 -
                      C42211 * C490 + C42215 * C475 - C42212 * C492) *
                         C21355 +
                     (C42213 * C131 - C42210 * C141 + C42214 * C491 -
                      C42211 * C504 + C42215 * C493 - C42212 * C505) *
                         C47110) *
                        C47369 * C3234 +
                    ((C42210 * C490 - C42213 * C474 + C42211 * C492 -
                      C42214 * C475 + C42212 * C2253 - C42215 * C2252) *
                         C21355 +
                     (C42210 * C504 - C42213 * C491 + C42211 * C505 -
                      C42214 * C493 + C42212 * C2255 - C42215 * C2254) *
                         C47110) *
                        C47369 * C47268) *
                       C47163 * C47465)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((((C42210 * C124 - C42213 * C117 + C42211 * C478 -
                       C42214 * C468 + C42212 * C484 - C42215 * C471) *
                          C21355 +
                      (C42210 * C138 - C42213 * C125 + C42211 * C498 -
                       C42214 * C479 + C42212 * C501 - C42215 * C485) *
                          C47110) *
                         C47369 * C3234 +
                     ((C42213 * C468 - C42210 * C478 + C42214 * C471 -
                       C42211 * C484 + C42215 * C1968 - C42212 * C1974) *
                          C21355 +
                      (C42213 * C479 - C42210 * C498 + C42214 * C485 -
                       C42211 * C501 + C42215 * C1975 - C42212 * C1986) *
                          C47110) *
                         C47369 * C47268) *
                        C47500 +
                    (((C42213 * C287 - C42210 * C297 + C42214 * C906 -
                       C42211 * C911 + C42215 * C1258 - C42212 * C1267) *
                          C21355 +
                      (C42213 * C298 - C42210 * C317 + C42214 * C912 -
                       C42211 * C921 + C42215 * C1268 - C42212 * C1285) *
                          C47110) *
                         C47369 * C3234 +
                     ((C42210 * C911 - C42213 * C906 + C42211 * C1267 -
                       C42214 * C1258 + C42212 * C2365 - C42215 * C2362) *
                          C21355 +
                      (C42210 * C921 - C42213 * C912 + C42211 * C1285 -
                       C42214 * C1268 + C42212 * C2371 - C42215 * C2366) *
                          C47110) *
                         C47369 * C47268) *
                        C47488 +
                    (((C42210 * C303 - C42213 * C290 + C42211 * C1273 -
                       C42214 * C1261 + C42212 * C1279 - C42215 * C1264) *
                          C21355 +
                      (C42210 * C320 - C42213 * C304 + C42211 * C1288 -
                       C42214 * C1274 + C42212 * C1291 - C42215 * C1280) *
                          C47110) *
                         C47369 * C3234 +
                     ((C42213 * C1261 - C42210 * C1273 + C42214 * C1264 -
                       C42211 * C1279 + C42215 * C7239 - C42212 * C7241) *
                          C21355 +
                      (C42213 * C1274 - C42210 * C1288 + C42214 * C1280 -
                       C42211 * C1291 + C42215 * C7242 - C42212 * C7245) *
                          C47110) *
                         C47369 * C47268) *
                        C47461) *
                       C2580 +
                   ((((C42213 * C118 - C42210 * C126 + C42214 * C469 -
                       C42211 * C480 + C42215 * C472 - C42212 * C486) *
                          C21355 +
                      (C42213 * C127 - C42210 * C139 + C42214 * C481 -
                       C42211 * C499 + C42215 * C487 - C42212 * C502) *
                          C47110) *
                         C47369 * C3234 +
                     ((C42210 * C480 - C42213 * C469 + C42211 * C486 -
                       C42214 * C472 + C42212 * C1976 - C42215 * C1969) *
                          C21355 +
                      (C42210 * C499 - C42213 * C481 + C42211 * C502 -
                       C42214 * C487 + C42212 * C1987 - C42215 * C1977) *
                          C47110) *
                         C47369 * C47268) *
                        C47500 +
                    (((C42210 * C299 - C42213 * C288 + C42211 * C913 -
                       C42214 * C907 + C42212 * C1269 - C42215 * C1259) *
                          C21355 +
                      (C42210 * C318 - C42213 * C300 + C42211 * C922 -
                       C42214 * C914 + C42212 * C1286 - C42215 * C1270) *
                          C47110) *
                         C47369 * C3234 +
                     ((C42213 * C907 - C42210 * C913 + C42214 * C1259 -
                       C42211 * C1269 + C42215 * C2363 - C42212 * C2367) *
                          C21355 +
                      (C42213 * C914 - C42210 * C922 + C42214 * C1270 -
                       C42211 * C1286 + C42215 * C2368 - C42212 * C2372) *
                          C47110) *
                         C47369 * C47268) *
                        C47488 +
                    (((C42213 * C291 - C42210 * C305 + C42214 * C1262 -
                       C42211 * C1275 + C42215 * C1265 - C42212 * C1281) *
                          C21355 +
                      (C42213 * C306 - C42210 * C321 + C42214 * C1276 -
                       C42211 * C1289 + C42215 * C1282 - C42212 * C1292) *
                          C47110) *
                         C47369 * C3234 +
                     ((C42210 * C1275 - C42213 * C1262 + C42211 * C1281 -
                       C42214 * C1265 + C42212 * C7243 - C42215 * C7240) *
                          C21355 +
                      (C42210 * C1289 - C42213 * C1276 + C42211 * C1292 -
                       C42214 * C1282 + C42212 * C7246 - C42215 * C7244) *
                          C47110) *
                         C47369 * C47268) *
                        C47461) *
                       C47146)) /
                     (p * q * std::sqrt(p + q));
    d2ee[220] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((C42210 * C124 - C42213 * C117 + C42211 * C478 -
                      C42214 * C468 + C42212 * C484 - C42215 * C471) *
                         C21355 +
                     (C42210 * C138 - C42213 * C125 + C42211 * C498 -
                      C42214 * C479 + C42212 * C501 - C42215 * C485) *
                         C47110) *
                        C47369 * C47181 * C47429 +
                    ((C42213 * C287 - C42210 * C297 + C42214 * C906 -
                      C42211 * C911 + C42215 * C1258 - C42212 * C1267) *
                         C21355 +
                     (C42213 * C298 - C42210 * C317 + C42214 * C912 -
                      C42211 * C921 + C42215 * C1268 - C42212 * C1285) *
                         C47110) *
                        C47369 * C47181 * C47226) *
                       C636 +
                   (((C42213 * C118 - C42210 * C126 + C42214 * C469 -
                      C42211 * C480 + C42215 * C472 - C42212 * C486) *
                         C21355 +
                     (C42213 * C127 - C42210 * C139 + C42214 * C481 -
                      C42211 * C499 + C42215 * C487 - C42212 * C502) *
                         C47110) *
                        C47369 * C47181 * C47429 +
                    ((C42210 * C299 - C42213 * C288 + C42211 * C913 -
                      C42214 * C907 + C42212 * C1269 - C42215 * C1259) *
                         C21355 +
                     (C42210 * C318 - C42213 * C300 + C42211 * C922 -
                      C42214 * C914 + C42212 * C1286 - C42215 * C1270) *
                         C47110) *
                        C47369 * C47181 * C47226) *
                       C637 +
                   (((C42210 * C128 - C42213 * C119 + C42211 * C482 -
                      C42214 * C470 + C42212 * C488 - C42215 * C473) *
                         C21355 +
                     (C42210 * C140 - C42213 * C129 + C42211 * C500 -
                      C42214 * C483 + C42212 * C503 - C42215 * C489) *
                         C47110) *
                        C47369 * C47181 * C47429 +
                    ((C42213 * C289 - C42210 * C301 + C42214 * C908 -
                      C42211 * C915 + C42215 * C1260 - C42212 * C1271) *
                         C21355 +
                     (C42213 * C302 - C42210 * C319 + C42214 * C916 -
                      C42211 * C923 + C42215 * C1272 - C42212 * C1287) *
                         C47110) *
                        C47369 * C47181 * C47226) *
                       C638 +
                   (((C42213 * C120 - C42210 * C130 + C42214 * C474 -
                      C42211 * C490 + C42215 * C475 - C42212 * C492) *
                         C21355 +
                     (C42213 * C131 - C42210 * C141 + C42214 * C491 -
                      C42211 * C504 + C42215 * C493 - C42212 * C505) *
                         C47110) *
                        C47369 * C47181 * C47429 +
                    ((C42210 * C309 - C42213 * C293 + C42211 * C917 -
                      C42214 * C909 + C42212 * C2139 - C42215 * C2138) *
                         C21355 +
                     (C42210 * C323 - C42213 * C310 + C42211 * C924 -
                      C42214 * C918 + C42212 * C2141 - C42215 * C2140) *
                         C47110) *
                        C47369 * C47181 * C47226) *
                       C47465)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((C42210 * C124 - C42213 * C117 + C42211 * C478 -
                      C42214 * C468 + C42212 * C484 - C42215 * C471) *
                         C21355 +
                     (C42210 * C138 - C42213 * C125 + C42211 * C498 -
                      C42214 * C479 + C42212 * C501 - C42215 * C485) *
                         C47110) *
                        C47369 * C47181 * C1392 +
                    ((C42213 * C287 - C42210 * C297 + C42214 * C906 -
                      C42211 * C911 + C42215 * C1258 - C42212 * C1267) *
                         C21355 +
                     (C42213 * C298 - C42210 * C317 + C42214 * C912 -
                      C42211 * C921 + C42215 * C1268 - C42212 * C1285) *
                         C47110) *
                        C47369 * C47181 * C1393 +
                    ((C42210 * C303 - C42213 * C290 + C42211 * C1273 -
                      C42214 * C1261 + C42212 * C1279 - C42215 * C1264) *
                         C21355 +
                     (C42210 * C320 - C42213 * C304 + C42211 * C1288 -
                      C42214 * C1274 + C42212 * C1291 - C42215 * C1280) *
                         C47110) *
                        C47369 * C47181 * C1394 +
                    ((C42213 * C1124 - C42210 * C1130 + C42214 * C1666 -
                      C42211 * C1669 + C42215 * C5893 - C42212 * C5895) *
                         C21355 +
                     (C42213 * C1131 - C42210 * C1142 + C42214 * C1670 -
                      C42211 * C1675 + C42215 * C5896 - C42212 * C5899) *
                         C47110) *
                        C47369 * C47181 * C47471) *
                       C47415 +
                   (((C42213 * C118 - C42210 * C126 + C42214 * C469 -
                      C42211 * C480 + C42215 * C472 - C42212 * C486) *
                         C21355 +
                     (C42213 * C127 - C42210 * C139 + C42214 * C481 -
                      C42211 * C499 + C42215 * C487 - C42212 * C502) *
                         C47110) *
                        C47369 * C47181 * C1392 +
                    ((C42210 * C299 - C42213 * C288 + C42211 * C913 -
                      C42214 * C907 + C42212 * C1269 - C42215 * C1259) *
                         C21355 +
                     (C42210 * C318 - C42213 * C300 + C42211 * C922 -
                      C42214 * C914 + C42212 * C1286 - C42215 * C1270) *
                         C47110) *
                        C47369 * C47181 * C1393 +
                    ((C42213 * C291 - C42210 * C305 + C42214 * C1262 -
                      C42211 * C1275 + C42215 * C1265 - C42212 * C1281) *
                         C21355 +
                     (C42213 * C306 - C42210 * C321 + C42214 * C1276 -
                      C42211 * C1289 + C42215 * C1282 - C42212 * C1292) *
                         C47110) *
                        C47369 * C47181 * C1394 +
                    ((C42210 * C1132 - C42213 * C1125 + C42211 * C1671 -
                      C42214 * C1667 + C42212 * C5897 - C42215 * C5894) *
                         C21355 +
                     (C42210 * C1143 - C42213 * C1133 + C42211 * C1676 -
                      C42214 * C1672 + C42212 * C5900 - C42215 * C5898) *
                         C47110) *
                        C47369 * C47181 * C47471) *
                       C47146)) /
                     (p * q * std::sqrt(p + q));
    d2ee[221] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((((C42210 * C124 - C42213 * C117 + C42211 * C478 -
                       C42214 * C468 + C42212 * C484 - C42215 * C471) *
                          C21355 +
                      (C42210 * C138 - C42213 * C125 + C42211 * C498 -
                       C42214 * C479 + C42212 * C501 - C42215 * C485) *
                          C47110) *
                         C47369 * C47430 +
                     ((C42213 * C468 - C42210 * C478 + C42214 * C471 -
                       C42211 * C484 + C42215 * C1968 - C42212 * C1974) *
                          C21355 +
                      (C42213 * C479 - C42210 * C498 + C42214 * C485 -
                       C42211 * C501 + C42215 * C1975 - C42212 * C1986) *
                          C47110) *
                         C47369 * C47268) *
                        C47429 +
                    (((C42213 * C287 - C42210 * C297 + C42214 * C906 -
                       C42211 * C911 + C42215 * C1258 - C42212 * C1267) *
                          C21355 +
                      (C42213 * C298 - C42210 * C317 + C42214 * C912 -
                       C42211 * C921 + C42215 * C1268 - C42212 * C1285) *
                          C47110) *
                         C47369 * C47430 +
                     ((C42210 * C911 - C42213 * C906 + C42211 * C1267 -
                       C42214 * C1258 + C42212 * C2365 - C42215 * C2362) *
                          C21355 +
                      (C42210 * C921 - C42213 * C912 + C42211 * C1285 -
                       C42214 * C1268 + C42212 * C2371 - C42215 * C2366) *
                          C47110) *
                         C47369 * C47268) *
                        C47226) *
                       C284 +
                   ((((C42213 * C118 - C42210 * C126 + C42214 * C469 -
                       C42211 * C480 + C42215 * C472 - C42212 * C486) *
                          C21355 +
                      (C42213 * C127 - C42210 * C139 + C42214 * C481 -
                       C42211 * C499 + C42215 * C487 - C42212 * C502) *
                          C47110) *
                         C47369 * C47430 +
                     ((C42210 * C480 - C42213 * C469 + C42211 * C486 -
                       C42214 * C472 + C42212 * C1976 - C42215 * C1969) *
                          C21355 +
                      (C42210 * C499 - C42213 * C481 + C42211 * C502 -
                       C42214 * C487 + C42212 * C1987 - C42215 * C1977) *
                          C47110) *
                         C47369 * C47268) *
                        C47429 +
                    (((C42210 * C299 - C42213 * C288 + C42211 * C913 -
                       C42214 * C907 + C42212 * C1269 - C42215 * C1259) *
                          C21355 +
                      (C42210 * C318 - C42213 * C300 + C42211 * C922 -
                       C42214 * C914 + C42212 * C1286 - C42215 * C1270) *
                          C47110) *
                         C47369 * C47430 +
                     ((C42213 * C907 - C42210 * C913 + C42214 * C1259 -
                       C42211 * C1269 + C42215 * C2363 - C42212 * C2367) *
                          C21355 +
                      (C42213 * C914 - C42210 * C922 + C42214 * C1270 -
                       C42211 * C1286 + C42215 * C2368 - C42212 * C2372) *
                          C47110) *
                         C47369 * C47268) *
                        C47226) *
                       C285 +
                   ((((C42210 * C128 - C42213 * C119 + C42211 * C482 -
                       C42214 * C470 + C42212 * C488 - C42215 * C473) *
                          C21355 +
                      (C42210 * C140 - C42213 * C129 + C42211 * C500 -
                       C42214 * C483 + C42212 * C503 - C42215 * C489) *
                          C47110) *
                         C47369 * C47430 +
                     ((C42213 * C470 - C42210 * C482 + C42214 * C473 -
                       C42211 * C488 + C42215 * C1970 - C42212 * C1978) *
                          C21355 +
                      (C42213 * C483 - C42210 * C500 + C42214 * C489 -
                       C42211 * C503 + C42215 * C1979 - C42212 * C1988) *
                          C47110) *
                         C47369 * C47268) *
                        C47429 +
                    (((C42213 * C289 - C42210 * C301 + C42214 * C908 -
                       C42211 * C915 + C42215 * C1260 - C42212 * C1271) *
                          C21355 +
                      (C42213 * C302 - C42210 * C319 + C42214 * C916 -
                       C42211 * C923 + C42215 * C1272 - C42212 * C1287) *
                          C47110) *
                         C47369 * C47430 +
                     ((C42210 * C915 - C42213 * C908 + C42211 * C1271 -
                       C42214 * C1260 + C42212 * C2369 - C42215 * C2364) *
                          C21355 +
                      (C42210 * C923 - C42213 * C916 + C42211 * C1287 -
                       C42214 * C1272 + C42212 * C2373 - C42215 * C2370) *
                          C47110) *
                         C47369 * C47268) *
                        C47226) *
                       C47455)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((C42210 * C124 - C42213 * C117 + C42211 * C478 -
                      C42214 * C468 + C42212 * C484 - C42215 * C471) *
                         C21355 +
                     (C42210 * C138 - C42213 * C125 + C42211 * C498 -
                      C42214 * C479 + C42212 * C501 - C42215 * C485) *
                         C47110) *
                        C47369 * C47430 +
                    ((C42213 * C468 - C42210 * C478 + C42214 * C471 -
                      C42211 * C484 + C42215 * C1968 - C42212 * C1974) *
                         C21355 +
                     (C42213 * C479 - C42210 * C498 + C42214 * C485 -
                      C42211 * C501 + C42215 * C1975 - C42212 * C1986) *
                         C47110) *
                        C47369 * C47268) *
                       C1392 +
                   (((C42213 * C287 - C42210 * C297 + C42214 * C906 -
                      C42211 * C911 + C42215 * C1258 - C42212 * C1267) *
                         C21355 +
                     (C42213 * C298 - C42210 * C317 + C42214 * C912 -
                      C42211 * C921 + C42215 * C1268 - C42212 * C1285) *
                         C47110) *
                        C47369 * C47430 +
                    ((C42210 * C911 - C42213 * C906 + C42211 * C1267 -
                      C42214 * C1258 + C42212 * C2365 - C42215 * C2362) *
                         C21355 +
                     (C42210 * C921 - C42213 * C912 + C42211 * C1285 -
                      C42214 * C1268 + C42212 * C2371 - C42215 * C2366) *
                         C47110) *
                        C47369 * C47268) *
                       C1393 +
                   (((C42210 * C303 - C42213 * C290 + C42211 * C1273 -
                      C42214 * C1261 + C42212 * C1279 - C42215 * C1264) *
                         C21355 +
                     (C42210 * C320 - C42213 * C304 + C42211 * C1288 -
                      C42214 * C1274 + C42212 * C1291 - C42215 * C1280) *
                         C47110) *
                        C47369 * C47430 +
                    ((C42213 * C1261 - C42210 * C1273 + C42214 * C1264 -
                      C42211 * C1279 + C42215 * C7239 - C42212 * C7241) *
                         C21355 +
                     (C42213 * C1274 - C42210 * C1288 + C42214 * C1280 -
                      C42211 * C1291 + C42215 * C7242 - C42212 * C7245) *
                         C47110) *
                        C47369 * C47268) *
                       C1394 +
                   (((C42213 * C1124 - C42210 * C1130 + C42214 * C1666 -
                      C42211 * C1669 + C42215 * C5893 - C42212 * C5895) *
                         C21355 +
                     (C42213 * C1131 - C42210 * C1142 + C42214 * C1670 -
                      C42211 * C1675 + C42215 * C5896 - C42212 * C5899) *
                         C47110) *
                        C47369 * C47430 +
                    ((C42210 * C1669 - C42213 * C1666 + C42211 * C5895 -
                      C42214 * C5893 + C42212 * C23237 - C42215 * C23236) *
                         C21355 +
                     (C42210 * C1675 - C42213 * C1670 + C42211 * C5899 -
                      C42214 * C5896 + C42212 * C23239 - C42215 * C23238) *
                         C47110) *
                        C47369 * C47268) *
                       C47471) *
                  C47135) /
                     (p * q * std::sqrt(p + q));
    d2ee[222] += (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  ((((C42210 * C124 - C42213 * C117 + C42211 * C478 -
                      C42214 * C468 + C42212 * C484 - C42215 * C471) *
                         C21355 +
                     (C42210 * C138 - C42213 * C125 + C42211 * C498 -
                      C42214 * C479 + C42212 * C501 - C42215 * C485) *
                         C47110) *
                        C47369 * C47181 * C47500 +
                    ((C42213 * C287 - C42210 * C297 + C42214 * C906 -
                      C42211 * C911 + C42215 * C1258 - C42212 * C1267) *
                         C21355 +
                     (C42213 * C298 - C42210 * C317 + C42214 * C912 -
                      C42211 * C921 + C42215 * C1268 - C42212 * C1285) *
                         C47110) *
                        C47369 * C47181 * C47488 +
                    ((C42210 * C303 - C42213 * C290 + C42211 * C1273 -
                      C42214 * C1261 + C42212 * C1279 - C42215 * C1264) *
                         C21355 +
                     (C42210 * C320 - C42213 * C304 + C42211 * C1288 -
                      C42214 * C1274 + C42212 * C1291 - C42215 * C1280) *
                         C47110) *
                        C47369 * C47181 * C47461) *
                       C284 +
                   (((C42213 * C118 - C42210 * C126 + C42214 * C469 -
                      C42211 * C480 + C42215 * C472 - C42212 * C486) *
                         C21355 +
                     (C42213 * C127 - C42210 * C139 + C42214 * C481 -
                      C42211 * C499 + C42215 * C487 - C42212 * C502) *
                         C47110) *
                        C47369 * C47181 * C47500 +
                    ((C42210 * C299 - C42213 * C288 + C42211 * C913 -
                      C42214 * C907 + C42212 * C1269 - C42215 * C1259) *
                         C21355 +
                     (C42210 * C318 - C42213 * C300 + C42211 * C922 -
                      C42214 * C914 + C42212 * C1286 - C42215 * C1270) *
                         C47110) *
                        C47369 * C47181 * C47488 +
                    ((C42213 * C291 - C42210 * C305 + C42214 * C1262 -
                      C42211 * C1275 + C42215 * C1265 - C42212 * C1281) *
                         C21355 +
                     (C42213 * C306 - C42210 * C321 + C42214 * C1276 -
                      C42211 * C1289 + C42215 * C1282 - C42212 * C1292) *
                         C47110) *
                        C47369 * C47181 * C47461) *
                       C285 +
                   (((C42210 * C128 - C42213 * C119 + C42211 * C482 -
                      C42214 * C470 + C42212 * C488 - C42215 * C473) *
                         C21355 +
                     (C42210 * C140 - C42213 * C129 + C42211 * C500 -
                      C42214 * C483 + C42212 * C503 - C42215 * C489) *
                         C47110) *
                        C47369 * C47181 * C47500 +
                    ((C42213 * C289 - C42210 * C301 + C42214 * C908 -
                      C42211 * C915 + C42215 * C1260 - C42212 * C1271) *
                         C21355 +
                     (C42213 * C302 - C42210 * C319 + C42214 * C916 -
                      C42211 * C923 + C42215 * C1272 - C42212 * C1287) *
                         C47110) *
                        C47369 * C47181 * C47488 +
                    ((C42210 * C307 - C42213 * C292 + C42211 * C1277 -
                      C42214 * C1263 + C42212 * C1283 - C42215 * C1266) *
                         C21355 +
                     (C42210 * C322 - C42213 * C308 + C42211 * C1290 -
                      C42214 * C1278 + C42212 * C1293 - C42215 * C1284) *
                         C47110) *
                        C47369 * C47181 * C47461) *
                       C47455)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  (((C42210 * C124 - C42213 * C117 + C42211 * C478 -
                     C42214 * C468 + C42212 * C484 - C42215 * C471) *
                        C21355 +
                    (C42210 * C138 - C42213 * C125 + C42211 * C498 -
                     C42214 * C479 + C42212 * C501 - C42215 * C485) *
                        C47110) *
                       C47369 * C47181 * C47163 * C108 +
                   ((C42213 * C118 - C42210 * C126 + C42214 * C469 -
                     C42211 * C480 + C42215 * C472 - C42212 * C486) *
                        C21355 +
                    (C42213 * C127 - C42210 * C139 + C42214 * C481 -
                     C42211 * C499 + C42215 * C487 - C42212 * C502) *
                        C47110) *
                       C47369 * C47181 * C47163 * C109 +
                   ((C42210 * C128 - C42213 * C119 + C42211 * C482 -
                     C42214 * C470 + C42212 * C488 - C42215 * C473) *
                        C21355 +
                    (C42210 * C140 - C42213 * C129 + C42211 * C500 -
                     C42214 * C483 + C42212 * C503 - C42215 * C489) *
                        C47110) *
                       C47369 * C47181 * C47163 * C110 +
                   ((C42213 * C120 - C42210 * C130 + C42214 * C474 -
                     C42211 * C490 + C42215 * C475 - C42212 * C492) *
                        C21355 +
                    (C42213 * C131 - C42210 * C141 + C42214 * C491 -
                     C42211 * C504 + C42215 * C493 - C42212 * C505) *
                        C47110) *
                       C47369 * C47181 * C47163 * C111 +
                   ((C42210 * C132 - C42213 * C121 + C42211 * C494 -
                     C42214 * C476 + C42212 * C496 - C42215 * C477) *
                        C21355 +
                    (C42210 * C142 - C42213 * C133 + C42211 * C506 -
                     C42214 * C495 + C42212 * C507 - C42215 * C497) *
                        C47110) *
                       C47369 * C47181 * C47163 * C112)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C42210 * C124 - C42213 * C117 + C42211 * C478 -
                      C42214 * C468 + C42212 * C484 - C42215 * C471) *
                         C21355 +
                     (C42210 * C138 - C42213 * C125 + C42211 * C498 -
                      C42214 * C479 + C42212 * C501 - C42215 * C485) *
                         C47110) *
                        C47369 * C47501 +
                    ((C42213 * C468 - C42210 * C478 + C42214 * C471 -
                      C42211 * C484 + C42215 * C1968 - C42212 * C1974) *
                         C21355 +
                     (C42213 * C479 - C42210 * C498 + C42214 * C485 -
                      C42211 * C501 + C42215 * C1975 - C42212 * C1986) *
                         C47110) *
                        C47369 * C47490 +
                    ((C42210 * C484 - C42213 * C471 + C42211 * C1974 -
                      C42214 * C1968 + C42212 * C1980 - C42215 * C1971) *
                         C21355 +
                     (C42210 * C501 - C42213 * C485 + C42211 * C1986 -
                      C42214 * C1975 + C42212 * C1989 - C42215 * C1981) *
                         C47110) *
                        C47369 * C47464) *
                       C47163 * C284 +
                   (((C42213 * C118 - C42210 * C126 + C42214 * C469 -
                      C42211 * C480 + C42215 * C472 - C42212 * C486) *
                         C21355 +
                     (C42213 * C127 - C42210 * C139 + C42214 * C481 -
                      C42211 * C499 + C42215 * C487 - C42212 * C502) *
                         C47110) *
                        C47369 * C47501 +
                    ((C42210 * C480 - C42213 * C469 + C42211 * C486 -
                      C42214 * C472 + C42212 * C1976 - C42215 * C1969) *
                         C21355 +
                     (C42210 * C499 - C42213 * C481 + C42211 * C502 -
                      C42214 * C487 + C42212 * C1987 - C42215 * C1977) *
                         C47110) *
                        C47369 * C47490 +
                    ((C42213 * C472 - C42210 * C486 + C42214 * C1969 -
                      C42211 * C1976 + C42215 * C1972 - C42212 * C1982) *
                         C21355 +
                     (C42213 * C487 - C42210 * C502 + C42214 * C1977 -
                      C42211 * C1987 + C42215 * C1983 - C42212 * C1990) *
                         C47110) *
                        C47369 * C47464) *
                       C47163 * C285 +
                   (((C42210 * C128 - C42213 * C119 + C42211 * C482 -
                      C42214 * C470 + C42212 * C488 - C42215 * C473) *
                         C21355 +
                     (C42210 * C140 - C42213 * C129 + C42211 * C500 -
                      C42214 * C483 + C42212 * C503 - C42215 * C489) *
                         C47110) *
                        C47369 * C47501 +
                    ((C42213 * C470 - C42210 * C482 + C42214 * C473 -
                      C42211 * C488 + C42215 * C1970 - C42212 * C1978) *
                         C21355 +
                     (C42213 * C483 - C42210 * C500 + C42214 * C489 -
                      C42211 * C503 + C42215 * C1979 - C42212 * C1988) *
                         C47110) *
                        C47369 * C47490 +
                    ((C42210 * C488 - C42213 * C473 + C42211 * C1978 -
                      C42214 * C1970 + C42212 * C1984 - C42215 * C1973) *
                         C21355 +
                     (C42210 * C503 - C42213 * C489 + C42211 * C1988 -
                      C42214 * C1979 + C42212 * C1991 - C42215 * C1985) *
                         C47110) *
                        C47369 * C47464) *
                       C47163 * C47455)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  ((((C42210 * C124 - C42213 * C117 + C42211 * C478 -
                      C42214 * C468 + C42212 * C484 - C42215 * C471) *
                         C21355 +
                     (C42210 * C138 - C42213 * C125 + C42211 * C498 -
                      C42214 * C479 + C42212 * C501 - C42215 * C485) *
                         C47110) *
                        C47369 * C47181 * C1050 +
                    ((C42213 * C287 - C42210 * C297 + C42214 * C906 -
                      C42211 * C911 + C42215 * C1258 - C42212 * C1267) *
                         C21355 +
                     (C42213 * C298 - C42210 * C317 + C42214 * C912 -
                      C42211 * C921 + C42215 * C1268 - C42212 * C1285) *
                         C47110) *
                        C47369 * C47181 * C1051 +
                    ((C42210 * C303 - C42213 * C290 + C42211 * C1273 -
                      C42214 * C1261 + C42212 * C1279 - C42215 * C1264) *
                         C21355 +
                     (C42210 * C320 - C42213 * C304 + C42211 * C1288 -
                      C42214 * C1274 + C42212 * C1291 - C42215 * C1280) *
                         C47110) *
                        C47369 * C47181 * C47461) *
                       C47497 +
                   (((C42213 * C118 - C42210 * C126 + C42214 * C469 -
                      C42211 * C480 + C42215 * C472 - C42212 * C486) *
                         C21355 +
                     (C42213 * C127 - C42210 * C139 + C42214 * C481 -
                      C42211 * C499 + C42215 * C487 - C42212 * C502) *
                         C47110) *
                        C47369 * C47181 * C1050 +
                    ((C42210 * C299 - C42213 * C288 + C42211 * C913 -
                      C42214 * C907 + C42212 * C1269 - C42215 * C1259) *
                         C21355 +
                     (C42210 * C318 - C42213 * C300 + C42211 * C922 -
                      C42214 * C914 + C42212 * C1286 - C42215 * C1270) *
                         C47110) *
                        C47369 * C47181 * C1051 +
                    ((C42213 * C291 - C42210 * C305 + C42214 * C1262 -
                      C42211 * C1275 + C42215 * C1265 - C42212 * C1281) *
                         C21355 +
                     (C42213 * C306 - C42210 * C321 + C42214 * C1276 -
                      C42211 * C1289 + C42215 * C1282 - C42212 * C1292) *
                         C47110) *
                        C47369 * C47181 * C47461) *
                       C47484 +
                   (((C42210 * C128 - C42213 * C119 + C42211 * C482 -
                      C42214 * C470 + C42212 * C488 - C42215 * C473) *
                         C21355 +
                     (C42210 * C140 - C42213 * C129 + C42211 * C500 -
                      C42214 * C483 + C42212 * C503 - C42215 * C489) *
                         C47110) *
                        C47369 * C47181 * C1050 +
                    ((C42213 * C289 - C42210 * C301 + C42214 * C908 -
                      C42211 * C915 + C42215 * C1260 - C42212 * C1271) *
                         C21355 +
                     (C42213 * C302 - C42210 * C319 + C42214 * C916 -
                      C42211 * C923 + C42215 * C1272 - C42212 * C1287) *
                         C47110) *
                        C47369 * C47181 * C1051 +
                    ((C42210 * C307 - C42213 * C292 + C42211 * C1277 -
                      C42214 * C1263 + C42212 * C1283 - C42215 * C1266) *
                         C21355 +
                     (C42210 * C322 - C42213 * C308 + C42211 * C1290 -
                      C42214 * C1278 + C42212 * C1293 - C42215 * C1284) *
                         C47110) *
                        C47369 * C47181 * C47461) *
                       C47455)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  (((C42210 * C124 - C42213 * C117 + C42211 * C478 -
                     C42214 * C468 + C42212 * C484 - C42215 * C471) *
                        C21355 +
                    (C42210 * C138 - C42213 * C125 + C42211 * C498 -
                     C42214 * C479 + C42212 * C501 - C42215 * C485) *
                        C47110) *
                       C47369 * C47181 * C1118 +
                   ((C42213 * C287 - C42210 * C297 + C42214 * C906 -
                     C42211 * C911 + C42215 * C1258 - C42212 * C1267) *
                        C21355 +
                    (C42213 * C298 - C42210 * C317 + C42214 * C912 -
                     C42211 * C921 + C42215 * C1268 - C42212 * C1285) *
                        C47110) *
                       C47369 * C47181 * C1119 +
                   ((C42210 * C303 - C42213 * C290 + C42211 * C1273 -
                     C42214 * C1261 + C42212 * C1279 - C42215 * C1264) *
                        C21355 +
                    (C42210 * C320 - C42213 * C304 + C42211 * C1288 -
                     C42214 * C1274 + C42212 * C1291 - C42215 * C1280) *
                        C47110) *
                       C47369 * C47181 * C1120 +
                   ((C42213 * C1124 - C42210 * C1130 + C42214 * C1666 -
                     C42211 * C1669 + C42215 * C5893 - C42212 * C5895) *
                        C21355 +
                    (C42213 * C1131 - C42210 * C1142 + C42214 * C1670 -
                     C42211 * C1675 + C42215 * C5896 - C42212 * C5899) *
                        C47110) *
                       C47369 * C47181 * C1121 +
                   ((C42210 * C1136 - C42213 * C1127 + C42211 * C6385 -
                     C42214 * C6383 + C42212 * C22230 - C42215 * C22229) *
                        C21355 +
                    (C42210 * C1145 - C42213 * C1137 + C42211 * C6389 -
                     C42214 * C6386 + C42212 * C22232 - C42215 * C22231) *
                        C47110) *
                       C47369 * C47181 * C1122) *
                  C47135) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C42210 * C124 - C42213 * C117 + C42211 * C478 -
                      C42214 * C468 + C42212 * C484 - C42215 * C471) *
                         C21355 +
                     (C42210 * C138 - C42213 * C125 + C42211 * C498 -
                      C42214 * C479 + C42212 * C501 - C42215 * C485) *
                         C47110) *
                        C47369 * C47501 +
                    ((C42213 * C468 - C42210 * C478 + C42214 * C471 -
                      C42211 * C484 + C42215 * C1968 - C42212 * C1974) *
                         C21355 +
                     (C42213 * C479 - C42210 * C498 + C42214 * C485 -
                      C42211 * C501 + C42215 * C1975 - C42212 * C1986) *
                         C47110) *
                        C47369 * C47490 +
                    ((C42210 * C484 - C42213 * C471 + C42211 * C1974 -
                      C42214 * C1968 + C42212 * C1980 - C42215 * C1971) *
                         C21355 +
                     (C42210 * C501 - C42213 * C485 + C42211 * C1986 -
                      C42214 * C1975 + C42212 * C1989 - C42215 * C1981) *
                         C47110) *
                        C47369 * C47464) *
                       C1050 +
                   (((C42213 * C287 - C42210 * C297 + C42214 * C906 -
                      C42211 * C911 + C42215 * C1258 - C42212 * C1267) *
                         C21355 +
                     (C42213 * C298 - C42210 * C317 + C42214 * C912 -
                      C42211 * C921 + C42215 * C1268 - C42212 * C1285) *
                         C47110) *
                        C47369 * C47501 +
                    ((C42210 * C911 - C42213 * C906 + C42211 * C1267 -
                      C42214 * C1258 + C42212 * C2365 - C42215 * C2362) *
                         C21355 +
                     (C42210 * C921 - C42213 * C912 + C42211 * C1285 -
                      C42214 * C1268 + C42212 * C2371 - C42215 * C2366) *
                         C47110) *
                        C47369 * C47490 +
                    ((C42213 * C1258 - C42210 * C1267 + C42214 * C2362 -
                      C42211 * C2365 + C42215 * C6769 - C42212 * C6771) *
                         C21355 +
                     (C42213 * C1268 - C42210 * C1285 + C42214 * C2366 -
                      C42211 * C2371 + C42215 * C6772 - C42212 * C6775) *
                         C47110) *
                        C47369 * C47464) *
                       C1051 +
                   (((C42210 * C303 - C42213 * C290 + C42211 * C1273 -
                      C42214 * C1261 + C42212 * C1279 - C42215 * C1264) *
                         C21355 +
                     (C42210 * C320 - C42213 * C304 + C42211 * C1288 -
                      C42214 * C1274 + C42212 * C1291 - C42215 * C1280) *
                         C47110) *
                        C47369 * C47501 +
                    ((C42213 * C1261 - C42210 * C1273 + C42214 * C1264 -
                      C42211 * C1279 + C42215 * C7239 - C42212 * C7241) *
                         C21355 +
                     (C42213 * C1274 - C42210 * C1288 + C42214 * C1280 -
                      C42211 * C1291 + C42215 * C7242 - C42212 * C7245) *
                         C47110) *
                        C47369 * C47490 +
                    ((C42210 * C1279 - C42213 * C1264 + C42211 * C7241 -
                      C42214 * C7239 + C42212 * C22891 - C42215 * C22890) *
                         C21355 +
                     (C42210 * C1291 - C42213 * C1280 + C42211 * C7245 -
                      C42214 * C7242 + C42212 * C22893 - C42215 * C22892) *
                         C47110) *
                        C47369 * C47464) *
                       C47461) *
                  C47135) /
                     (p * q * std::sqrt(p + q));
    d2ee[223] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((C42210 * C124 - C42213 * C117 + C42211 * C478 -
                      C42214 * C468 + C42212 * C484 - C42215 * C471) *
                         C21355 +
                     (C42210 * C138 - C42213 * C125 + C42211 * C498 -
                      C42214 * C479 + C42212 * C501 - C42215 * C485) *
                         C47110) *
                        C47369 * C47430 +
                    ((C42213 * C468 - C42210 * C478 + C42214 * C471 -
                      C42211 * C484 + C42215 * C1968 - C42212 * C1974) *
                         C21355 +
                     (C42213 * C479 - C42210 * C498 + C42214 * C485 -
                      C42211 * C501 + C42215 * C1975 - C42212 * C1986) *
                         C47110) *
                        C47369 * C47268) *
                       C47163 * C636 +
                   (((C42213 * C118 - C42210 * C126 + C42214 * C469 -
                      C42211 * C480 + C42215 * C472 - C42212 * C486) *
                         C21355 +
                     (C42213 * C127 - C42210 * C139 + C42214 * C481 -
                      C42211 * C499 + C42215 * C487 - C42212 * C502) *
                         C47110) *
                        C47369 * C47430 +
                    ((C42210 * C480 - C42213 * C469 + C42211 * C486 -
                      C42214 * C472 + C42212 * C1976 - C42215 * C1969) *
                         C21355 +
                     (C42210 * C499 - C42213 * C481 + C42211 * C502 -
                      C42214 * C487 + C42212 * C1987 - C42215 * C1977) *
                         C47110) *
                        C47369 * C47268) *
                       C47163 * C637 +
                   (((C42210 * C128 - C42213 * C119 + C42211 * C482 -
                      C42214 * C470 + C42212 * C488 - C42215 * C473) *
                         C21355 +
                     (C42210 * C140 - C42213 * C129 + C42211 * C500 -
                      C42214 * C483 + C42212 * C503 - C42215 * C489) *
                         C47110) *
                        C47369 * C47430 +
                    ((C42213 * C470 - C42210 * C482 + C42214 * C473 -
                      C42211 * C488 + C42215 * C1970 - C42212 * C1978) *
                         C21355 +
                     (C42213 * C483 - C42210 * C500 + C42214 * C489 -
                      C42211 * C503 + C42215 * C1979 - C42212 * C1988) *
                         C47110) *
                        C47369 * C47268) *
                       C47163 * C638 +
                   (((C42213 * C120 - C42210 * C130 + C42214 * C474 -
                      C42211 * C490 + C42215 * C475 - C42212 * C492) *
                         C21355 +
                     (C42213 * C131 - C42210 * C141 + C42214 * C491 -
                      C42211 * C504 + C42215 * C493 - C42212 * C505) *
                         C47110) *
                        C47369 * C47430 +
                    ((C42210 * C490 - C42213 * C474 + C42211 * C492 -
                      C42214 * C475 + C42212 * C2253 - C42215 * C2252) *
                         C21355 +
                     (C42210 * C504 - C42213 * C491 + C42211 * C505 -
                      C42214 * C493 + C42212 * C2255 - C42215 * C2254) *
                         C47110) *
                        C47369 * C47268) *
                       C47163 * C47465)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((((C42210 * C124 - C42213 * C117 + C42211 * C478 -
                       C42214 * C468 + C42212 * C484 - C42215 * C471) *
                          C21355 +
                      (C42210 * C138 - C42213 * C125 + C42211 * C498 -
                       C42214 * C479 + C42212 * C501 - C42215 * C485) *
                          C47110) *
                         C47369 * C47430 +
                     ((C42213 * C468 - C42210 * C478 + C42214 * C471 -
                       C42211 * C484 + C42215 * C1968 - C42212 * C1974) *
                          C21355 +
                      (C42213 * C479 - C42210 * C498 + C42214 * C485 -
                       C42211 * C501 + C42215 * C1975 - C42212 * C1986) *
                          C47110) *
                         C47369 * C47268) *
                        C1050 +
                    (((C42213 * C287 - C42210 * C297 + C42214 * C906 -
                       C42211 * C911 + C42215 * C1258 - C42212 * C1267) *
                          C21355 +
                      (C42213 * C298 - C42210 * C317 + C42214 * C912 -
                       C42211 * C921 + C42215 * C1268 - C42212 * C1285) *
                          C47110) *
                         C47369 * C47430 +
                     ((C42210 * C911 - C42213 * C906 + C42211 * C1267 -
                       C42214 * C1258 + C42212 * C2365 - C42215 * C2362) *
                          C21355 +
                      (C42210 * C921 - C42213 * C912 + C42211 * C1285 -
                       C42214 * C1268 + C42212 * C2371 - C42215 * C2366) *
                          C47110) *
                         C47369 * C47268) *
                        C1051 +
                    (((C42210 * C303 - C42213 * C290 + C42211 * C1273 -
                       C42214 * C1261 + C42212 * C1279 - C42215 * C1264) *
                          C21355 +
                      (C42210 * C320 - C42213 * C304 + C42211 * C1288 -
                       C42214 * C1274 + C42212 * C1291 - C42215 * C1280) *
                          C47110) *
                         C47369 * C47430 +
                     ((C42213 * C1261 - C42210 * C1273 + C42214 * C1264 -
                       C42211 * C1279 + C42215 * C7239 - C42212 * C7241) *
                          C21355 +
                      (C42213 * C1274 - C42210 * C1288 + C42214 * C1280 -
                       C42211 * C1291 + C42215 * C7242 - C42212 * C7245) *
                          C47110) *
                         C47369 * C47268) *
                        C47461) *
                       C47415 +
                   ((((C42213 * C118 - C42210 * C126 + C42214 * C469 -
                       C42211 * C480 + C42215 * C472 - C42212 * C486) *
                          C21355 +
                      (C42213 * C127 - C42210 * C139 + C42214 * C481 -
                       C42211 * C499 + C42215 * C487 - C42212 * C502) *
                          C47110) *
                         C47369 * C47430 +
                     ((C42210 * C480 - C42213 * C469 + C42211 * C486 -
                       C42214 * C472 + C42212 * C1976 - C42215 * C1969) *
                          C21355 +
                      (C42210 * C499 - C42213 * C481 + C42211 * C502 -
                       C42214 * C487 + C42212 * C1987 - C42215 * C1977) *
                          C47110) *
                         C47369 * C47268) *
                        C1050 +
                    (((C42210 * C299 - C42213 * C288 + C42211 * C913 -
                       C42214 * C907 + C42212 * C1269 - C42215 * C1259) *
                          C21355 +
                      (C42210 * C318 - C42213 * C300 + C42211 * C922 -
                       C42214 * C914 + C42212 * C1286 - C42215 * C1270) *
                          C47110) *
                         C47369 * C47430 +
                     ((C42213 * C907 - C42210 * C913 + C42214 * C1259 -
                       C42211 * C1269 + C42215 * C2363 - C42212 * C2367) *
                          C21355 +
                      (C42213 * C914 - C42210 * C922 + C42214 * C1270 -
                       C42211 * C1286 + C42215 * C2368 - C42212 * C2372) *
                          C47110) *
                         C47369 * C47268) *
                        C1051 +
                    (((C42213 * C291 - C42210 * C305 + C42214 * C1262 -
                       C42211 * C1275 + C42215 * C1265 - C42212 * C1281) *
                          C21355 +
                      (C42213 * C306 - C42210 * C321 + C42214 * C1276 -
                       C42211 * C1289 + C42215 * C1282 - C42212 * C1292) *
                          C47110) *
                         C47369 * C47430 +
                     ((C42210 * C1275 - C42213 * C1262 + C42211 * C1281 -
                       C42214 * C1265 + C42212 * C7243 - C42215 * C7240) *
                          C21355 +
                      (C42210 * C1289 - C42213 * C1276 + C42211 * C1292 -
                       C42214 * C1282 + C42212 * C7246 - C42215 * C7244) *
                          C47110) *
                         C47369 * C47268) *
                        C47461) *
                       C47146)) /
                     (p * q * std::sqrt(p + q));
    d2ee[224] += (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  (((C42210 * C124 - C42213 * C117 + C42211 * C478 -
                     C42214 * C468 + C42212 * C484 - C42215 * C471) *
                        C21355 +
                    (C42210 * C138 - C42213 * C125 + C42211 * C498 -
                     C42214 * C479 + C42212 * C501 - C42215 * C485) *
                        C47110) *
                       C47369 * C47181 * C47163 * C108 +
                   ((C42213 * C118 - C42210 * C126 + C42214 * C469 -
                     C42211 * C480 + C42215 * C472 - C42212 * C486) *
                        C21355 +
                    (C42213 * C127 - C42210 * C139 + C42214 * C481 -
                     C42211 * C499 + C42215 * C487 - C42212 * C502) *
                        C47110) *
                       C47369 * C47181 * C47163 * C109 +
                   ((C42210 * C128 - C42213 * C119 + C42211 * C482 -
                     C42214 * C470 + C42212 * C488 - C42215 * C473) *
                        C21355 +
                    (C42210 * C140 - C42213 * C129 + C42211 * C500 -
                     C42214 * C483 + C42212 * C503 - C42215 * C489) *
                        C47110) *
                       C47369 * C47181 * C47163 * C110 +
                   ((C42213 * C120 - C42210 * C130 + C42214 * C474 -
                     C42211 * C490 + C42215 * C475 - C42212 * C492) *
                        C21355 +
                    (C42213 * C131 - C42210 * C141 + C42214 * C491 -
                     C42211 * C504 + C42215 * C493 - C42212 * C505) *
                        C47110) *
                       C47369 * C47181 * C47163 * C111 +
                   ((C42210 * C132 - C42213 * C121 + C42211 * C494 -
                     C42214 * C476 + C42212 * C496 - C42215 * C477) *
                        C21355 +
                    (C42210 * C142 - C42213 * C133 + C42211 * C506 -
                     C42214 * C495 + C42212 * C507 - C42215 * C497) *
                        C47110) *
                       C47369 * C47181 * C47163 * C112)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  ((((C42210 * C124 - C42213 * C117 + C42211 * C478 -
                      C42214 * C468 + C42212 * C484 - C42215 * C471) *
                         C21355 +
                     (C42210 * C138 - C42213 * C125 + C42211 * C498 -
                      C42214 * C479 + C42212 * C501 - C42215 * C485) *
                         C47110) *
                        C47369 * C47181 * C47500 +
                    ((C42213 * C287 - C42210 * C297 + C42214 * C906 -
                      C42211 * C911 + C42215 * C1258 - C42212 * C1267) *
                         C21355 +
                     (C42213 * C298 - C42210 * C317 + C42214 * C912 -
                      C42211 * C921 + C42215 * C1268 - C42212 * C1285) *
                         C47110) *
                        C47369 * C47181 * C47488 +
                    ((C42210 * C303 - C42213 * C290 + C42211 * C1273 -
                      C42214 * C1261 + C42212 * C1279 - C42215 * C1264) *
                         C21355 +
                     (C42210 * C320 - C42213 * C304 + C42211 * C1288 -
                      C42214 * C1274 + C42212 * C1291 - C42215 * C1280) *
                         C47110) *
                        C47369 * C47181 * C47461) *
                       C284 +
                   (((C42213 * C118 - C42210 * C126 + C42214 * C469 -
                      C42211 * C480 + C42215 * C472 - C42212 * C486) *
                         C21355 +
                     (C42213 * C127 - C42210 * C139 + C42214 * C481 -
                      C42211 * C499 + C42215 * C487 - C42212 * C502) *
                         C47110) *
                        C47369 * C47181 * C47500 +
                    ((C42210 * C299 - C42213 * C288 + C42211 * C913 -
                      C42214 * C907 + C42212 * C1269 - C42215 * C1259) *
                         C21355 +
                     (C42210 * C318 - C42213 * C300 + C42211 * C922 -
                      C42214 * C914 + C42212 * C1286 - C42215 * C1270) *
                         C47110) *
                        C47369 * C47181 * C47488 +
                    ((C42213 * C291 - C42210 * C305 + C42214 * C1262 -
                      C42211 * C1275 + C42215 * C1265 - C42212 * C1281) *
                         C21355 +
                     (C42213 * C306 - C42210 * C321 + C42214 * C1276 -
                      C42211 * C1289 + C42215 * C1282 - C42212 * C1292) *
                         C47110) *
                        C47369 * C47181 * C47461) *
                       C285 +
                   (((C42210 * C128 - C42213 * C119 + C42211 * C482 -
                      C42214 * C470 + C42212 * C488 - C42215 * C473) *
                         C21355 +
                     (C42210 * C140 - C42213 * C129 + C42211 * C500 -
                      C42214 * C483 + C42212 * C503 - C42215 * C489) *
                         C47110) *
                        C47369 * C47181 * C47500 +
                    ((C42213 * C289 - C42210 * C301 + C42214 * C908 -
                      C42211 * C915 + C42215 * C1260 - C42212 * C1271) *
                         C21355 +
                     (C42213 * C302 - C42210 * C319 + C42214 * C916 -
                      C42211 * C923 + C42215 * C1272 - C42212 * C1287) *
                         C47110) *
                        C47369 * C47181 * C47488 +
                    ((C42210 * C307 - C42213 * C292 + C42211 * C1277 -
                      C42214 * C1263 + C42212 * C1283 - C42215 * C1266) *
                         C21355 +
                     (C42210 * C322 - C42213 * C308 + C42211 * C1290 -
                      C42214 * C1278 + C42212 * C1293 - C42215 * C1284) *
                         C47110) *
                        C47369 * C47181 * C47461) *
                       C47455)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  ((((C42210 * C124 - C42213 * C117 + C42211 * C478 -
                      C42214 * C468 + C42212 * C484 - C42215 * C471) *
                         C21355 +
                     (C42210 * C138 - C42213 * C125 + C42211 * C498 -
                      C42214 * C479 + C42212 * C501 - C42215 * C485) *
                         C47110) *
                        C47369 * C47181 * C1050 +
                    ((C42213 * C287 - C42210 * C297 + C42214 * C906 -
                      C42211 * C911 + C42215 * C1258 - C42212 * C1267) *
                         C21355 +
                     (C42213 * C298 - C42210 * C317 + C42214 * C912 -
                      C42211 * C921 + C42215 * C1268 - C42212 * C1285) *
                         C47110) *
                        C47369 * C47181 * C1051 +
                    ((C42210 * C303 - C42213 * C290 + C42211 * C1273 -
                      C42214 * C1261 + C42212 * C1279 - C42215 * C1264) *
                         C21355 +
                     (C42210 * C320 - C42213 * C304 + C42211 * C1288 -
                      C42214 * C1274 + C42212 * C1291 - C42215 * C1280) *
                         C47110) *
                        C47369 * C47181 * C47461) *
                       C47497 +
                   (((C42213 * C118 - C42210 * C126 + C42214 * C469 -
                      C42211 * C480 + C42215 * C472 - C42212 * C486) *
                         C21355 +
                     (C42213 * C127 - C42210 * C139 + C42214 * C481 -
                      C42211 * C499 + C42215 * C487 - C42212 * C502) *
                         C47110) *
                        C47369 * C47181 * C1050 +
                    ((C42210 * C299 - C42213 * C288 + C42211 * C913 -
                      C42214 * C907 + C42212 * C1269 - C42215 * C1259) *
                         C21355 +
                     (C42210 * C318 - C42213 * C300 + C42211 * C922 -
                      C42214 * C914 + C42212 * C1286 - C42215 * C1270) *
                         C47110) *
                        C47369 * C47181 * C1051 +
                    ((C42213 * C291 - C42210 * C305 + C42214 * C1262 -
                      C42211 * C1275 + C42215 * C1265 - C42212 * C1281) *
                         C21355 +
                     (C42213 * C306 - C42210 * C321 + C42214 * C1276 -
                      C42211 * C1289 + C42215 * C1282 - C42212 * C1292) *
                         C47110) *
                        C47369 * C47181 * C47461) *
                       C47484 +
                   (((C42210 * C128 - C42213 * C119 + C42211 * C482 -
                      C42214 * C470 + C42212 * C488 - C42215 * C473) *
                         C21355 +
                     (C42210 * C140 - C42213 * C129 + C42211 * C500 -
                      C42214 * C483 + C42212 * C503 - C42215 * C489) *
                         C47110) *
                        C47369 * C47181 * C1050 +
                    ((C42213 * C289 - C42210 * C301 + C42214 * C908 -
                      C42211 * C915 + C42215 * C1260 - C42212 * C1271) *
                         C21355 +
                     (C42213 * C302 - C42210 * C319 + C42214 * C916 -
                      C42211 * C923 + C42215 * C1272 - C42212 * C1287) *
                         C47110) *
                        C47369 * C47181 * C1051 +
                    ((C42210 * C307 - C42213 * C292 + C42211 * C1277 -
                      C42214 * C1263 + C42212 * C1283 - C42215 * C1266) *
                         C21355 +
                     (C42210 * C322 - C42213 * C308 + C42211 * C1290 -
                      C42214 * C1278 + C42212 * C1293 - C42215 * C1284) *
                         C47110) *
                        C47369 * C47181 * C47461) *
                       C47455)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  (((C42210 * C124 - C42213 * C117 + C42211 * C478 -
                     C42214 * C468 + C42212 * C484 - C42215 * C471) *
                        C21355 +
                    (C42210 * C138 - C42213 * C125 + C42211 * C498 -
                     C42214 * C479 + C42212 * C501 - C42215 * C485) *
                        C47110) *
                       C47369 * C47181 * C1118 +
                   ((C42213 * C287 - C42210 * C297 + C42214 * C906 -
                     C42211 * C911 + C42215 * C1258 - C42212 * C1267) *
                        C21355 +
                    (C42213 * C298 - C42210 * C317 + C42214 * C912 -
                     C42211 * C921 + C42215 * C1268 - C42212 * C1285) *
                        C47110) *
                       C47369 * C47181 * C1119 +
                   ((C42210 * C303 - C42213 * C290 + C42211 * C1273 -
                     C42214 * C1261 + C42212 * C1279 - C42215 * C1264) *
                        C21355 +
                    (C42210 * C320 - C42213 * C304 + C42211 * C1288 -
                     C42214 * C1274 + C42212 * C1291 - C42215 * C1280) *
                        C47110) *
                       C47369 * C47181 * C1120 +
                   ((C42213 * C1124 - C42210 * C1130 + C42214 * C1666 -
                     C42211 * C1669 + C42215 * C5893 - C42212 * C5895) *
                        C21355 +
                    (C42213 * C1131 - C42210 * C1142 + C42214 * C1670 -
                     C42211 * C1675 + C42215 * C5896 - C42212 * C5899) *
                        C47110) *
                       C47369 * C47181 * C1121 +
                   ((C42210 * C1136 - C42213 * C1127 + C42211 * C6385 -
                     C42214 * C6383 + C42212 * C22230 - C42215 * C22229) *
                        C21355 +
                    (C42210 * C1145 - C42213 * C1137 + C42211 * C6389 -
                     C42214 * C6386 + C42212 * C22232 - C42215 * C22231) *
                        C47110) *
                       C47369 * C47181 * C1122) *
                  C47135) /
                     (p * q * std::sqrt(p + q));
}
