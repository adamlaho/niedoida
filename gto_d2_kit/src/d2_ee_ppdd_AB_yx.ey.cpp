/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

#include "gto_d2_kit/d2_ee_ppdd_AB_yx.hpp"
#include <cmath>
/*

*/
#pragma GCC optimize("O0")
namespace {
    const double Pi = M_PI;
}
#pragma GCC optimize("O0")

void second_derivative_ee_1122_12_21(const double ae,
                                     const double xA,
                                     const double yA,
                                     const double zA,
                                     const double be,
                                     const double xB,
                                     const double yB,
                                     const double zB,
                                     const double ce,
                                     const double xC,
                                     const double yC,
                                     const double zC,
                                     const double de,
                                     const double xD,
                                     const double yD,
                                     const double zD,
                                     const double* const bs,
                                     double* const d2ee)
{
    const double p = ae + be;
    const double q = ce + de;
    const double xP = (ae * xA + be * xB) / p;
    const double yP = (ae * yA + be * yB) / p;
    const double zP = (ae * zA + be * zB) / p;
    const double xQ = (ce * xC + de * xD) / q;
    const double yQ = (ce * yC + de * yD) / q;
    const double zQ = (ce * zC + de * zD) / q;
    const double C46272 = ae * be;
    const double C46271 = ae + be;
    const double C46270 = 0 * be;
    const double C46269 = xA - xB;
    const double C46291 = yA - yB;
    const double C46309 = 0 * be;
    const double C46322 = xP - xQ;
    const double C46321 = yP - yQ;
    const double C46320 = p + q;
    const double C46319 = p * q;
    const double C46327 = bs[3];
    const double C46337 = bs[4];
    const double C46346 = bs[5];
    const double C46360 = bs[6];
    const double C46382 = bs[7];
    const double C46491 = zP - zQ;
    const double C46654 = bs[2];
    const double C117 = bs[0];
    const double C47036 = ce + de;
    const double C47035 = ce * de;
    const double C47034 = xC - xD;
    const double C47068 = yC - yD;
    const double C47086 = zC - zD;
    const double C47260 = zA - zB;
    const double C46273 = std::pow(C46271, 2);
    const double C47023 = 2 * C46271;
    const double C46274 = C46272 * C46269;
    const double C47014 = std::pow(C46269, 2);
    const double C47321 = C46269 * be;
    const double C47320 = C46269 * ae;
    const double C46310 = C46272 * C46291;
    const double C47275 = std::pow(C46291, 2);
    const double C47355 = C46291 * be;
    const double C47353 = C46291 * ae;
    const double C46347 = std::pow(C46322, 2);
    const double C46407 = C46322 * be;
    const double C46329 = C46321 * ae;
    const double C46328 = C46321 * C46322;
    const double C46503 = std::pow(C46321, 2);
    const double C46323 = 2 * C46319;
    const double C46522 = std::pow(C46491, 2);
    const double C47040 = 2 * C47036;
    const double C47039 = std::pow(C47036, 2);
    const double C47041 = C47034 * de;
    const double C47038 = C47034 * ce;
    const double C47037 = std::pow(C47034, 2);
    const double C47069 = std::pow(C47068, 2);
    const double C47128 = C47068 * de;
    const double C47126 = C47068 * ce;
    const double C47087 = std::pow(C47086, 2);
    const double C47170 = C47086 * de;
    const double C47168 = C47086 * ce;
    const double C47290 = std::pow(C47260, 2);
    const double C47356 = C47260 * be;
    const double C47354 = C47260 * ae;
    const double C46275 = 2 * C46273;
    const double C138 = (std::pow((2 * p * q) / (p + q), 2) * bs[2] *
                         (yP - yQ) * (xP - xQ) * ae * be) /
                        C46273;
    const double C47322 = std::pow(C47023, -1);
    const double C47015 = C47014 * C46272;
    const double C47276 = C47275 * C46272;
    const double C46410 = C46327 * C46407;
    const double C46413 = C46337 * C46407;
    const double C46419 = C46346 * C46407;
    const double C46433 = C46360 * C46407;
    const double C46454 = C46382 * C46407;
    const double C46332 = C46327 * C46329;
    const double C46339 = C46337 * C46329;
    const double C46349 = C46346 * C46329;
    const double C46364 = C46360 * C46329;
    const double C46388 = C46382 * C46329;
    const double C46331 = C46328 * ae;
    const double C46324 = C46323 / C46320;
    const double C124 = (-(bs[1] * C46407 * C46323) / C46320) / C46271;
    const double C127 = (-(bs[1] * C46329 * C46323) / C46320) / C46271;
    const double C118 = -(C46322 * bs[1] * C46323) / C46320;
    const double C261 = -(C46321 * bs[1] * C46323) / C46320;
    const double C414 = -(C46491 * bs[1] * C46323) / C46320;
    const double C47053 = std::pow(C47040, -1);
    const double C47330 = std::pow(C47040, -2);
    const double C47054 = 2 * C47039;
    const double C47334 = C47039 * C47040;
    const double C47333 = 4 * C47039;
    const double C47323 = std::pow(C47038, 2);
    const double C47042 = C47037 * C47035;
    const double C47070 = C47069 * C47035;
    const double C47335 = std::pow(C47126, 2);
    const double C47088 = C47087 * C47035;
    const double C47337 = std::pow(C47168, 2);
    const double C47291 = C47290 * C46272;
    const double C47016 = C47015 / C46271;
    const double C47277 = C47276 / C46271;
    const double C46333 = C46331 * be;
    const double C46326 = -C46324;
    const double C46336 = std::pow(C46324, 4);
    const double C46359 = std::pow(C46324, 6);
    const double C139 =
        (be * std::pow(C46324, 2) * bs[2] * C46321 * ae +
         C46322 * std::pow(-C46324, 3) * bs[3] * C46321 * C46322 * ae * be) /
        C46273;
    const double C46653 = std::pow(C46324, 2);
    const double C125 =
        (C46322 * std::pow(C46324, 2) * bs[2] * C46407) / C46271 -
        (be * bs[1] * C46323) / (C46320 * C46271);
    const double C47368 = 4 * C47334;
    const double C47367 = C47036 * C47333;
    const double C47043 = C47042 / C47036;
    const double C47071 = C47070 / C47036;
    const double C47089 = C47088 / C47036;
    const double C47292 = C47291 / C46271;
    const double C47017 = -C47016;
    const double C47278 = -C47277;
    const double C46338 = C46337 * C46333;
    const double C46348 = C46346 * C46333;
    const double C46362 = C46360 * C46333;
    const double C46386 = C46382 * C46333;
    const double C46330 = std::pow(C46326, 3);
    const double C46345 = std::pow(C46326, 5);
    const double C46381 = std::pow(C46326, 7);
    const double C46341 = C46336 * C46339;
    const double C46415 = C46336 * C46413;
    const double C46420 = C46337 * C46336;
    const double C46367 = C46359 * C46364;
    const double C46435 = C46359 * C46433;
    const double C46455 = C46360 * C46359;
    const double C46655 = C46654 * C46653;
    const double C128 = (C46322 * C46653 * C46654 * C46329) / C46271;
    const double C271 = (C46321 * C46653 * C46654 * C46407) / C46271;
    const double C274 = (C46321 * C46653 * C46654 * C46329) / C46271 -
                        (ae * bs[1] * C46323) / (C46320 * C46271);
    const double C424 = (C46491 * C46653 * C46654 * C46407) / C46271;
    const double C427 = (C46491 * C46653 * C46654 * C46329) / C46271;
    const double C47044 = -C47043;
    const double C47072 = -C47071;
    const double C47090 = -C47089;
    const double C47293 = -C47292;
    const double C47018 = std::exp(C47017);
    const double C47279 = std::exp(C47278);
    const double C46340 = C46336 * C46338;
    const double C46366 = C46359 * C46362;
    const double C46334 = C46330 * C46332;
    const double C46408 = C46327 * C46330;
    const double C46411 = C46330 * C46410;
    const double C291 = (ae * std::pow(C46324, 2) * bs[2] * C46322 * be +
                         C46321 * C46330 * C46327 * C46333) /
                        C46273;
    const double C444 = ((zP - zQ) * C46330 * C46327 * C46333) / C46273;
    const double C46351 = C46345 * C46349;
    const double C46350 = C46345 * C46348;
    const double C46421 = C46345 * C46419;
    const double C46434 = C46346 * C46345;
    const double C46391 = C46381 * C46388;
    const double C46390 = C46381 * C46386;
    const double C46457 = C46381 * C46454;
    const double C46344 = be * C46341;
    const double C46343 = C46322 * C46341;
    const double C46740 = C46321 * C46341;
    const double C46416 = C46322 * C46415;
    const double C46501 = ae * C46415;
    const double C46500 = C46321 * C46415;
    const double C46423 = C46322 * C46420;
    const double C46422 = C46420 * be;
    const double C46663 = C46420 * C46347;
    const double C46743 = C46420 * C46503;
    const double C46815 = C46321 * C46420;
    const double C46814 = C46420 * ae;
    const double C46992 = C46420 * C46522;
    const double C47006 = C46491 * C46420;
    const double C46369 = C46367 * C46347;
    const double C46380 = be * C46367;
    const double C46379 = C46322 * C46367;
    const double C46871 = C46321 * C46367;
    const double C46911 = C46367 * C46522;
    const double C46439 = C46322 * C46435;
    const double C46554 = C46435 * C46503;
    const double C46606 = ae * C46435;
    const double C46605 = C46321 * C46435;
    const double C46625 = C46435 * C46522;
    const double C46634 = C46491 * C46435;
    const double C46460 = C46455 * C46347;
    const double C46459 = C46322 * C46455;
    const double C46458 = C46455 * be;
    const double C46875 = C46455 * C46503;
    const double C119 = C46655 * C46347 - (bs[1] * C46323) / C46320;
    const double C262 = C46321 * C46322 * C46655;
    const double C264 = C46655 * C46503 - (bs[1] * C46323) / C46320;
    const double C415 = C46491 * C46322 * C46655;
    const double C417 = C46655 * C46522 - (bs[1] * C46323) / C46320;
    const double C812 = C46491 * C46321 * C46655;
    const double C47045 = std::exp(C47044);
    const double C47073 = std::exp(C47072);
    const double C47091 = std::exp(C47090);
    const double C47294 = std::exp(C47293);
    const double C21484 = C47018 * C271;
    const double C25950 = C47018 * C424;
    const double C46276 = C46274 * C47018;
    const double C47358 = C47322 * C47018;
    const double C47357 = C47018 * C47320;
    const double C4575 = -(C47018 * C47321) / C46271;
    const double C46311 = C46310 * C47279;
    const double C116 = -(2 * C46272 * (yA - yB) * C47279) / C46271;
    const double C4581 =
        ((C47279 - (C46291 * 2 * C46272 * C46291 * C47279) / C46271) * ae) /
            C46271 -
        (0 * be) / C46275;
    const double C4582 =
        (0 * ae) / C46271 - (C46272 * C46291 * C47279) / C46273;
    const double C15775 =
        (-(0 * be) / C46271) / (2 * C46271) -
        ((C47279 - (C46291 * 2 * C46272 * C46291 * C47279) / C46271) * be) /
            C46271;
    const double C15776 =
        (-(2 * C46272 * C46291 * C47279) / C46271) / (2 * C46271) -
        (0 * be) / C46271;
    const double C47389 = C47322 * C47279;
    const double C47388 = C47279 * C47353;
    const double C15771 = -(C47279 * C47355) / C46271;
    const double C447 =
        (C46330 * C46327 * C46333 + C46340 * std::pow(zP - zQ, 2)) / C46273;
    const double C46368 = C46322 * C46366;
    const double C46553 = C46321 * C46366;
    const double C46579 = C46366 * C46522;
    const double C46586 = C46491 * C46366;
    const double C140 = (C46330 * C46327 * C46333 + be * C46322 * C46334 +
                         C46322 * (be * C46334 + C46322 * std::pow(C46324, 4) *
                                                     bs[4] * C46333)) /
                        C46273;
    const double C141 =
        (2 * (be * C46334 + C46322 * C46340) +
         be * (C46334 + C46341 * std::pow(C46322, 2)) +
         C46322 * (C46340 + be * C46322 * C46341 +
                   C46322 * (be * C46341 +
                             C46322 * std::pow(C46326, 5) * bs[5] * C46333))) /
        C46273;
    const double C292 = (ae * (C46322 * C46330 * C46327 * C46322 * be +
                               bs[2] * std::pow(C46324, 2) * be) +
                         C46321 * (be * C46334 + C46322 * C46340)) /
                        C46273;
    const double C445 = ((zP - zQ) * (be * C46334 + C46322 * C46340)) / C46273;
    const double C129 = (C46653 * C46654 * C46329 + C46334 * C46347) / C46271;
    const double C131 =
        (2 * C46322 * C46334 + C46322 * (C46334 + C46341 * C46347)) / C46271;
    const double C275 =
        (C46321 * C46322 * C46334 + C46322 * C46655 * ae) / C46271;
    const double C280 =
        (C46653 * C46654 * C46329 + C46321 * (C46321 * C46334 + C46655 * ae) +
         C46321 * C46655 * ae) /
        C46271;
    const double C428 = (C46491 * C46322 * C46334) / C46271;
    const double C429 = (C46491 * (C46334 + C46341 * C46347)) / C46271;
    const double C433 = (C46653 * C46654 * C46329 + C46334 * C46522) / C46271;
    const double C820 = (C46491 * (C46321 * C46334 + C46655 * ae)) / C46271;
    const double C1853 =
        (2 * C46491 * C46334 + C46491 * (C46334 + C46341 * C46522)) / C46271;
    const double C46414 = C46408 * be;
    const double C46662 = C46322 * C46408;
    const double C46742 = C46321 * C46408;
    const double C46741 = C46408 * ae;
    const double C276 = (C46321 * (C46334 + C46341 * C46347) +
                         (C46655 + C46408 * C46347) * ae) /
                        C46271;
    const double C1025 =
        (2 * (C46321 * C46334 + C46655 * ae) +
         C46321 * (C46334 + C46321 * (C46321 * C46341 + C46408 * ae) +
                   C46321 * C46408 * ae) +
         (C46655 + C46408 * C46503) * ae) /
        C46271;
    const double C120 =
        2 * C46322 * C46655 + C46322 * (C46655 + C46408 * C46347);
    const double C263 = C46321 * (C46655 + C46408 * C46347);
    const double C416 = C46491 * (C46655 + C46408 * C46347);
    const double C1016 =
        2 * C46321 * C46655 + C46321 * (C46655 + C46408 * C46503);
    const double C1153 = C46491 * (C46655 + C46408 * C46503);
    const double C1844 =
        2 * C46491 * C46655 + C46491 * (C46655 + C46408 * C46522);
    const double C1847 =
        3 * (C46655 + C46408 * C46522) +
        C46491 * (2 * C46491 * C46408 + C46491 * (C46408 + C46420 * C46522));
    const double C294 = (C46330 * C46327 * C46333 + ae * C46321 * C46411 +
                         C46321 * (ae * C46411 + C46321 * C46340)) /
                        C46273;
    const double C827 =
        (ae * C46491 * C46411 + C46321 * C46491 * C46340) / C46273;
    const double C126 =
        (C46653 * C46654 * C46407 + C46322 * (C46322 * C46411 + C46655 * be) +
         C46322 * C46655 * be) /
        C46271;
    const double C272 = (C46321 * (C46322 * C46411 + C46655 * be)) / C46271;
    const double C277 = (C46653 * C46654 * C46407 + C46411 * C46503) / C46271;
    const double C425 = (C46491 * (C46322 * C46411 + C46655 * be)) / C46271;
    const double C430 = (C46653 * C46654 * C46407 + C46411 * C46522) / C46271;
    const double C817 = (C46491 * C46321 * C46411) / C46271;
    const double C1022 =
        (2 * C46321 * C46411 + C46321 * (C46411 + C46415 * C46503)) / C46271;
    const double C1165 = (C46491 * (C46411 + C46415 * C46503)) / C46271;
    const double C1850 =
        (2 * C46491 * C46411 + C46491 * (C46411 + C46415 * C46522)) / C46271;
    const double C21486 = C47018 * C291;
    const double C25952 = C47018 * C444;
    const double C46353 = C46351 * C46347;
    const double C46358 = be * C46351;
    const double C46357 = C46322 * C46351;
    const double C46813 = C46321 * C46351;
    const double C46863 = C46351 * C46522;
    const double C46910 = C46491 * C46351;
    const double C1859 =
        (3 * (C46334 + C46341 * C46522) +
         C46491 * (2 * C46491 * C46341 + C46491 * (C46341 + C46351 * C46522))) /
        C46271;
    const double C46352 = C46322 * C46350;
    const double C46502 = C46321 * C46350;
    const double C46534 = C46491 * C46350;
    const double C1034 = (2 * (ae * C46411 + C46321 * C46340) +
                          ae * (C46411 + C46415 * std::pow(C46321, 2)) +
                          C46321 * (C46340 + ae * C46321 * C46415 +
                                    C46321 * (ae * C46415 + C46321 * C46350))) /
                         C46273;
    const double C1177 = (ae * (C46411 + C46415 * C46522) +
                          C46321 * (C46340 + C46350 * C46522)) /
                         C46273;
    const double C1862 =
        (2 * C46491 * C46340 + C46491 * (C46340 + C46350 * C46522)) / C46273;
    const double C46424 = C46322 * C46421;
    const double C46505 = C46421 * C46503;
    const double C46552 = ae * C46421;
    const double C46551 = C46321 * C46421;
    const double C46585 = C46491 * C46421;
    const double C46857 = C46421 * C46522;
    const double C1856 =
        (3 * (C46411 + C46415 * C46522) +
         C46491 * (2 * C46491 * C46415 + C46491 * (C46415 + C46421 * C46522))) /
        C46271;
    const double C46438 = C46434 * C46347;
    const double C46437 = C46322 * C46434;
    const double C46436 = C46434 * be;
    const double C46816 = C46434 * C46503;
    const double C46873 = C46321 * C46434;
    const double C46872 = C46434 * ae;
    const double C47007 = C46434 * C46522;
    const double C46393 = C46391 * C46347;
    const double C46392 = C46322 * C46390;
    const double C46607 = C46321 * C46390;
    const double C46626 = C46390 * C46522;
    const double C46635 = C46491 * C46390;
    const double C46461 = C46322 * C46457;
    const double C46609 = C46457 * C46503;
    const double C434 = (C46322 * C46334 + C46343 * C46522) / C46271;
    const double C1180 =
        (C46491 * C46340 + ae * C46491 * C46500 +
         C46321 * (ae * C46491 * C46415 + C46321 * C46491 * C46350)) /
        C46273;
    const double C1183 =
        (C46340 + C46350 * C46522 + ae * (C46500 + C46321 * C46421 * C46522) +
         C46321 * (ae * (C46415 + C46421 * C46522) +
                   C46321 * (C46350 + C46366 * C46522))) /
        C46273;
    const double C1159 = (C46321 * C46411 + C46500 * C46522) / C46271;
    const double C46425 = C46423 * be;
    const double C46667 = 2 * C46423;
    const double C46749 = C46321 * C46423;
    const double C46748 = C46423 * ae;
    const double C46664 = C46408 + C46663;
    const double C46745 = C46408 + C46743;
    const double C46820 = 2 * C46815;
    const double C46818 = C46815 * ae;
    const double C46993 = C46408 + C46992;
    const double C47008 = 2 * C47006;
    const double C46371 = C46351 + C46369;
    const double C46387 = 2 * C46379;
    const double C46385 = be * C46379;
    const double C46827 = C46321 * C46379;
    const double C46866 = C46379 * C46522;
    const double C46913 = C46351 + C46911;
    const double C46558 = C46421 + C46554;
    const double C46613 = 2 * C46605;
    const double C46611 = ae * C46605;
    const double C46633 = C46491 * C46605;
    const double C46900 = C46605 * C46522;
    const double C46627 = C46421 + C46625;
    const double C46637 = ae * C46634;
    const double C46463 = C46434 + C46460;
    const double C46462 = C46459 * be;
    const double C46830 = C46459 * C46503;
    const double C46879 = C46434 + C46875;
    const double C47047 = C47045 * C47038;
    const double C47046 = C47045 / C47040;
    const double C47056 = C47053 * C47045;
    const double C47326 = C47045 * C47041;
    const double C47365 = C47330 * C47045;
    const double C47359 = C47045 * C47323;
    const double C47127 = C47073 / C47040;
    const double C47129 = C47073 * C47126;
    const double C47136 = C47053 * C47073;
    const double C47341 = C47073 * C47128;
    const double C47371 = C47330 * C47073;
    const double C47369 = C47073 * C47335;
    const double C47169 = C47091 / C47040;
    const double C47171 = C47091 * C47168;
    const double C47178 = C47053 * C47091;
    const double C47347 = C47091 * C47170;
    const double C47374 = C47330 * C47091;
    const double C47372 = C47091 * C47337;
    const double C47391 = C47322 * C47294;
    const double C47390 = C47294 * C47354;
    const double C31197 = -(C47294 * C47356) / C46271;
    const double C115 = ((0 * ae) / C46271 - C46276 / C46273) / (2 * C46271) -
                        (0 * be) / C46271;
    const double C4579 =
        (-C46270 / C46271) / (2 * C46271) -
        ((C47018 - (C46269 * 2 * C46276) / C46271) * be) / C46271;
    const double C4580 =
        (-(2 * C46276) / C46271) / (2 * C46271) - (0 * be) / C46271;
    const double C15773 =
        ((C47018 - (C46269 * 2 * C46276) / C46271) * ae) / C46271 -
        C46270 / C46275;
    const double C15774 = (0 * ae) / C46271 - C46276 / C46273;
    const double C21369 = -(2 * C46276) / C46271;
    const double C114 =
        (((C47018 - (C46269 * 2 * C46276) / C46271) * ae) / C46271 -
         C46270 / C46275) /
            (2 * C46271) -
        ((C46269 * ((0 * ae) / C46271 - C46276 / C46273) + C47358) * be) /
            C46271;
    const double C103 = C47358 / C47023;
    const double C101 = C47018 / C47023 - (C47357 * C47321) / C46273;
    const double C102 = C47357 / C46275 - (C47358 * C47321) / C46271;
    const double C15769 = C47357 / C46271;
    const double C4734 = C4575 * C291;
    const double C4730 = C4575 * C271;
    const double C10530 = C4575 * C444;
    const double C10526 = C4575 * C424;
    const double C21372 = ((0 * ae) / C46271 - C46311 / C46273) / (2 * C46271) -
                          (0 * be) / C46271;
    const double C21371 =
        (((C47279 - (C46291 * 2 * C46311) / C46271) * ae) / C46271 -
         C46309 / C46275) /
            (2 * C46271) -
        ((C46291 * ((0 * ae) / C46271 - C46311 / C46273) + C47389) * be) /
            C46271;
    const double C21368 = C47389 / C47023;
    const double C4577 = C47388 / C46271;
    const double C21366 = C47279 / C47023 - (C47388 * C47355) / C46273;
    const double C21367 = C47388 / C46275 - (C47389 * C47355) / C46271;
    const double C10539 = C4575 * C447;
    const double C25957 = C47018 * C447;
    const double C46580 = C46350 + C46579;
    const double C46588 = C46321 * C46586;
    const double C46645 = 2 * C46586;
    const double C4751 = C4575 * C292;
    const double C4736 = C47358 * C292;
    const double C15930 = C47358 * C292;
    const double C21499 = C47018 * C292;
    const double C10547 = C4575 * C445;
    const double C10532 = C47358 * C445;
    const double C25961 = C47018 * C445;
    const double C31498 = C47358 * C445;
    const double C46417 = C46416 + C46414;
    const double C281 =
        (C46322 * C46334 + C46321 * (C46321 * C46343 + C46662 * ae) +
         C46321 * C46662 * ae) /
        C46271;
    const double C821 = (C46491 * (C46321 * C46343 + C46662 * ae)) / C46271;
    const double C265 = C46322 * C46655 + C46662 * C46503;
    const double C418 = C46322 * C46655 + C46662 * C46522;
    const double C813 = C46491 * C46321 * C46662;
    const double C1017 =
        2 * C46321 * C46662 + C46321 * (C46662 + C46423 * C46503);
    const double C1154 = C46491 * (C46662 + C46423 * C46503);
    const double C1845 =
        2 * C46491 * C46662 + C46491 * (C46662 + C46423 * C46522);
    const double C1150 = C46321 * C46655 + C46742 * C46522;
    const double C2222 =
        2 * C46491 * C46742 + C46491 * (C46742 + C46815 * C46522);
    const double C46744 = C46740 + C46741;
    const double C4743 = C4575 * C294;
    const double C21490 = C47018 * C294;
    const double C5391 = C4575 * C827;
    const double C21989 = C47018 * C827;
    const double C4747 = C4575 * C272;
    const double C4732 = C47358 * C272;
    const double C15926 = C47358 * C272;
    const double C21497 = C47018 * C272;
    const double C4739 = C4575 * C277;
    const double C21488 = C47018 * C277;
    const double C10543 = C4575 * C425;
    const double C10528 = C47358 * C425;
    const double C25959 = C47018 * C425;
    const double C31494 = C47358 * C425;
    const double C10535 = C4575 * C430;
    const double C25955 = C47018 * C430;
    const double C5387 = C4575 * C817;
    const double C21987 = C47018 * C817;
    const double C5646 = C4575 * C1022;
    const double C21493 = C47018 * C1022;
    const double C5824 = C4575 * C1165;
    const double C21991 = C47018 * C1165;
    const double C12246 = C4575 * C1850;
    const double C27670 = C47018 * C1850;
    const double C46355 = C46341 + C46353;
    const double C46370 = C46358 + C46368;
    const double C46363 = 2 * C46357;
    const double C46361 = be * C46357;
    const double C46747 = C46321 * C46357;
    const double C1026 =
        (2 * (C46321 * C46343 + C46662 * ae) +
         C46321 * (C46343 + C46321 * (C46321 * C46357 + C46423 * ae) +
                   C46321 * C46423 * ae) +
         (C46662 + C46423 * C46503) * ae) /
        C46271;
    const double C1854 =
        (2 * C46491 * C46343 + C46491 * (C46343 + C46357 * C46522)) / C46271;
    const double C1860 =
        (3 * (C46343 + C46357 * C46522) +
         C46491 * (2 * C46491 * C46357 + C46491 * (C46357 + C46379 * C46522))) /
        C46271;
    const double C46817 = C46813 + C46814;
    const double C46864 = C46341 + C46863;
    const double C46912 = 2 * C46910;
    const double C46354 = C46344 + C46352;
    const double C46504 = C46501 + C46502;
    const double C1865 =
        (3 * (C46340 + C46350 * C46522) +
         C46491 * (2 * C46534 + C46491 * (C46350 + C46366 * C46522))) /
        C46273;
    const double C2231 =
        (ae * (2 * C46491 * C46415 + C46491 * (C46415 + C46421 * C46522)) +
         C46321 * (2 * C46534 + C46491 * (C46350 + C46366 * C46522))) /
        C46273;
    const double C5650 = C4575 * C1034;
    const double C21495 = C47018 * C1034;
    const double C5820 = C4575 * C1177;
    const double C22316 = C47018 * C1177;
    const double C12250 = C4575 * C1862;
    const double C27672 = C47018 * C1862;
    const double C46426 = C46424 + C46422;
    const double C46506 = C46415 + C46505;
    const double C46556 = C46552 + C46553;
    const double C46557 = 2 * C46551;
    const double C46555 = ae * C46551;
    const double C2225 =
        (2 * C46491 * C46500 + C46491 * (C46500 + C46551 * C46522)) / C46271;
    const double C6701 =
        (3 * (C46500 + C46551 * C46522) +
         C46491 * (2 * C46491 * C46551 + C46491 * (C46551 + C46605 * C46522))) /
        C46271;
    const double C46587 = ae * C46585;
    const double C46906 = 2 * C46585;
    const double C46858 = C46415 + C46857;
    const double C12255 = C4575 * C1856;
    const double C27675 = C47018 * C1856;
    const double C46441 = C46420 + C46438;
    const double C46440 = C46437 * be;
    const double C46456 = 2 * C46437;
    const double C46750 = C46437 * C46503;
    const double C46829 = C46321 * C46437;
    const double C46828 = C46437 * ae;
    const double C46995 = C46437 * C46522;
    const double C1848 =
        3 * (C46662 + C46423 * C46522) +
        C46491 * (2 * C46491 * C46423 + C46491 * (C46423 + C46437 * C46522));
    const double C46442 = C46439 + C46436;
    const double C46819 = C46420 + C46816;
    const double C46880 = 2 * C46873;
    const double C46878 = C46873 * ae;
    const double C47003 = C46873 * C46522;
    const double C6699 =
        3 * (C46742 + C46815 * C46522) +
        C46491 * (2 * C46491 * C46815 + C46491 * (C46815 + C46873 * C46522));
    const double C46877 = C46871 + C46872;
    const double C47009 = C46420 + C47007;
    const double C46395 = C46367 + C46393;
    const double C46394 = C46380 + C46392;
    const double C46612 = C46606 + C46607;
    const double C46628 = C46366 + C46626;
    const double C46638 = C46321 * C46635;
    const double C46464 = C46461 + C46458;
    const double C46614 = C46435 + C46609;
    const double C5828 = C4575 * C1180;
    const double C21993 = C47018 * C1180;
    const double C5837 = C4575 * C1183;
    const double C22320 = C47018 * C1183;
    const double C5816 = C4575 * C1159;
    const double C22314 = C47018 * C1159;
    const double C1151 = C46321 * C46662 + C46749 * C46522;
    const double C121 = 3 * (C46655 + C46408 * C46347) +
                        C46322 * (2 * C46662 + C46322 * C46664);
    const double C266 = C46655 + C46408 * C46347 + C46664 * C46503;
    const double C267 = C46321 * (2 * C46662 + C46322 * C46664);
    const double C419 = C46655 + C46408 * C46347 + C46664 * C46522;
    const double C420 = C46491 * (2 * C46662 + C46322 * C46664);
    const double C814 = C46491 * C46321 * C46664;
    const double C1019 = 3 * (C46655 + C46408 * C46503) +
                         C46321 * (2 * C46742 + C46321 * C46745);
    const double C1156 = C46655 + C46408 * C46503 + C46745 * C46522;
    const double C1542 = C46491 * (2 * C46742 + C46321 * C46745);
    const double C12237 =
        4 * (2 * C46491 * C46408 + C46491 * C46993) +
        C46491 * (3 * C46993 + C46491 * (2 * C46491 * C46420 +
                                         C46491 * (C46420 + C46434 * C46522)));
    const double C46373 = C46322 * C46371;
    const double C46383 = 3 * C46371;
    const double C46378 = be * C46371;
    const double C46754 = C46321 * C46371;
    const double C46389 = C46366 + C46385;
    const double C46867 = C46357 + C46866;
    const double C46914 = C46491 * C46913;
    const double C46561 = C46321 * C46558;
    const double C46608 = 3 * C46558;
    const double C46604 = ae * C46558;
    const double C46615 = C46366 + C46611;
    const double C46636 = ae * C46633;
    const double C46901 = C46551 + C46900;
    const double C46629 = ae * C46627;
    const double C46907 = C46491 * C46627;
    const double C46466 = C46322 * C46463;
    const double C46465 = C46463 * be;
    const double C46757 = C46463 * C46503;
    const double C46833 = C46437 + C46830;
    const double C46882 = C46321 * C46879;
    const double C47048 = C47047 * C47041;
    const double C47055 = C47047 / C47054;
    const double C47327 = C47053 * C47047;
    const double C47325 = C47047 / C47036;
    const double C258 = (C47045 * std::pow(C47041, 2)) / C47039 + C47046;
    const double C47057 = C47056 * C47041;
    const double C47331 = C47038 * C47056;
    const double C47329 = 2 * C47056;
    const double C47375 = C47056 / C47333;
    const double C112 = C47056 / C47368;
    const double C2703 = C47056 / C47040;
    const double C47361 = C47326 / C47036;
    const double C259 = (-2 * C47053 * C47326) / C47036;
    const double C47392 = C47359 / C47039;
    const double C942 = (C47073 * std::pow(C47128, 2)) / C47039 + C47127;
    const double C47130 = C47129 * C47128;
    const double C47135 = C47129 / C47054;
    const double C47339 = C47129 / C47036;
    const double C47336 = C47053 * C47129;
    const double C47137 = C47136 * C47128;
    const double C47345 = C47126 * C47136;
    const double C47344 = 2 * C47136;
    const double C47381 = C47136 / C47333;
    const double C1014 = C47136 / C47368;
    const double C2700 = C47136 / C47040;
    const double C47377 = C47341 / C47036;
    const double C943 = (-2 * C47053 * C47341) / C47036;
    const double C47397 = C47369 / C47039;
    const double C1664 = (C47091 * std::pow(C47170, 2)) / C47039 + C47169;
    const double C47172 = C47171 * C47170;
    const double C47177 = C47171 / C47054;
    const double C47340 = C47171 / C47036;
    const double C47338 = C47053 * C47171;
    const double C47179 = C47178 * C47170;
    const double C47351 = C47168 * C47178;
    const double C47350 = 2 * C47178;
    const double C47387 = C47178 / C47333;
    const double C1843 = C47178 / C47368;
    const double C3602 = C47178 / C47040;
    const double C47383 = C47347 / C47036;
    const double C1665 = (-2 * C47053 * C47347) / C47036;
    const double C47399 = C47372 / C47039;
    const double C42157 = C47391 / C47023;
    const double C10231 = C47390 / C46271;
    const double C42155 = C47294 / C47023 - (C47390 * C47356) / C46273;
    const double C42156 = C47390 / C46275 - (C47391 * C47356) / C46271;
    const double C4767 = C4579 * C276;
    const double C4763 = C4579 * C263;
    const double C4750 = C4579 * C275;
    const double C4746 = C4579 * C262;
    const double C4742 = C4579 * C280;
    const double C4738 = C4579 * C264;
    const double C4735 = C4579 * C274;
    const double C4731 = C4579 * C261;
    const double C5390 = C4579 * C820;
    const double C5386 = C4579 * C812;
    const double C5651 = C4579 * C1025;
    const double C5647 = C4579 * C1016;
    const double C5825 = C4579 * C1153;
    const double C10563 = C4579 * C429;
    const double C10559 = C4579 * C416;
    const double C10555 = C4579 * C434;
    const double C10546 = C4579 * C428;
    const double C10542 = C4579 * C415;
    const double C10538 = C4579 * C433;
    const double C10534 = C4579 * C417;
    const double C10531 = C4579 * C427;
    const double C10527 = C4579 * C414;
    const double C12258 = C4579 * C1859;
    const double C12254 = C4579 * C1847;
    const double C12251 = C4579 * C1853;
    const double C12247 = C4579 * C1844;
    const double C4752 = C4580 * C276;
    const double C4748 = C4580 * C263;
    const double C4737 = C4580 * C275;
    const double C4733 = C4580 * C262;
    const double C10548 = C4580 * C429;
    const double C10544 = C4580 * C416;
    const double C10540 = C4580 * C434;
    const double C10533 = C4580 * C428;
    const double C10529 = C4580 * C415;
    const double C15961 = C15773 * C276;
    const double C15957 = C15773 * C263;
    const double C15944 = C15773 * C275;
    const double C15940 = C15773 * C262;
    const double C15936 = C15773 * C280;
    const double C15932 = C15773 * C264;
    const double C15929 = C15773 * C274;
    const double C15925 = C15773 * C261;
    const double C16584 = C15773 * C820;
    const double C16580 = C15773 * C812;
    const double C16837 = C15773 * C1025;
    const double C16833 = C15773 * C1016;
    const double C17003 = C15773 * C1153;
    const double C31529 = C15773 * C429;
    const double C31525 = C15773 * C416;
    const double C31521 = C15773 * C434;
    const double C31512 = C15773 * C428;
    const double C31508 = C15773 * C415;
    const double C31504 = C15773 * C433;
    const double C31500 = C15773 * C417;
    const double C31497 = C15773 * C427;
    const double C31493 = C15773 * C414;
    const double C33216 = C15773 * C1859;
    const double C33212 = C15773 * C1847;
    const double C33209 = C15773 * C1853;
    const double C33205 = C15773 * C1844;
    const double C15946 = C15774 * C276;
    const double C15942 = C15774 * C263;
    const double C15931 = C15774 * C275;
    const double C15927 = C15774 * C262;
    const double C31514 = C15774 * C429;
    const double C31510 = C15774 * C416;
    const double C31506 = C15774 * C434;
    const double C31499 = C15774 * C428;
    const double C31495 = C15774 * C415;
    const double C21511 = C21369 * C276;
    const double C21509 = C21369 * C263;
    const double C21498 = C21369 * C275;
    const double C21496 = C21369 * C262;
    const double C21494 = C21369 * C1025;
    const double C21492 = C21369 * C1016;
    const double C21491 = C21369 * C280;
    const double C21489 = C21369 * C264;
    const double C21487 = C21369 * C274;
    const double C21485 = C21369 * C261;
    const double C21990 = C21369 * C1153;
    const double C21988 = C21369 * C820;
    const double C21986 = C21369 * C812;
    const double C25969 = C21369 * C429;
    const double C25967 = C21369 * C416;
    const double C25965 = C21369 * C434;
    const double C25960 = C21369 * C428;
    const double C25958 = C21369 * C415;
    const double C25956 = C21369 * C433;
    const double C25954 = C21369 * C417;
    const double C25953 = C21369 * C427;
    const double C25951 = C21369 * C414;
    const double C27676 = C21369 * C1859;
    const double C27674 = C21369 * C1847;
    const double C27673 = C21369 * C1853;
    const double C27671 = C21369 * C1844;
    const double C15945 = C15769 * C292;
    const double C15941 = C15769 * C272;
    const double C15937 = C15769 * C294;
    const double C15933 = C15769 * C277;
    const double C15928 = C15769 * C291;
    const double C15924 = C15769 * C271;
    const double C16585 = C15769 * C827;
    const double C16581 = C15769 * C817;
    const double C16836 = C15769 * C1034;
    const double C16832 = C15769 * C1022;
    const double C17015 = C15769 * C1183;
    const double C17006 = C15769 * C1180;
    const double C17002 = C15769 * C1165;
    const double C16998 = C15769 * C1177;
    const double C16994 = C15769 * C1159;
    const double C31513 = C15769 * C445;
    const double C31509 = C15769 * C425;
    const double C31505 = C15769 * C447;
    const double C31501 = C15769 * C430;
    const double C31496 = C15769 * C444;
    const double C31492 = C15769 * C424;
    const double C33213 = C15769 * C1856;
    const double C33208 = C15769 * C1862;
    const double C33204 = C15769 * C1850;
    const double C113 =
        (((0 - (C46269 * C46270) / C46271) * ae) / C46271 - (0 * be) / C46275) /
            (2 * C46271) -
        ((C46269 * (((C47018 - (C46269 * 2 * C46276) / C46271) * ae) / C46271 -
                    C46270 / C46275) +
          C15769) *
         be) /
            C46271 +
        (0 * ae) / C46271 - C46276 / C46273;
    const double C21370 =
        (((0 - (C46291 * C46309) / C46271) * ae) / C46271 - (0 * be) / C46275) /
            (2 * C46271) -
        ((C46291 * (((C47279 - (C46291 * 2 * C46311) / C46271) * ae) / C46271 -
                    C46309 / C46275) +
          C4577) *
         be) /
            C46271 +
        (0 * ae) / C46271 - C46311 / C46273;
    const double C6705 =
        (ae * (3 * (C46415 + C46421 * C46522) +
               C46491 * (2 * C46585 + C46491 * (C46421 + C46435 * C46522))) +
         C46321 *
             (3 * C46580 +
              C46491 * (2 * C46586 + C46491 * (C46366 + C46390 * C46522)))) /
        C46273;
    const double C7175 =
        (2 * C46534 + C46491 * C46580 +
         ae * (2 * C46491 * C46551 +
               C46491 * (C46551 + C46321 * C46435 * C46522)) +
         C46321 *
             (ae * (2 * C46585 + C46491 * (C46421 + C46435 * C46522)) +
              C46321 * (2 * C46586 + C46491 * (C46366 + C46390 * C46522)))) /
        C46273;
    const double C12243 =
        (4 * (2 * C46534 + C46491 * C46580) +
         C46491 *
             (3 * C46580 +
              C46491 * (2 * C46586 + C46491 * (C46366 + C46390 * C46522)))) /
        C46273;
    const double C130 =
        (2 * (C46322 * C46411 + C46655 * be) +
         C46322 * (C46411 + C46322 * C46417 + C46322 * C46408 * be) +
         (C46655 + C46408 * C46347) * be) /
        C46271;
    const double C273 =
        (C46321 * (C46411 + C46322 * C46417 + C46662 * be)) / C46271;
    const double C278 =
        (C46322 * C46411 + C46655 * be + C46417 * C46503) / C46271;
    const double C426 =
        (C46491 * (C46411 + C46322 * C46417 + C46662 * be)) / C46271;
    const double C431 =
        (C46322 * C46411 + C46655 * be + C46417 * C46522) / C46271;
    const double C818 = (C46491 * C46321 * C46417) / C46271;
    const double C4759 = C4579 * C281;
    const double C4744 = C4580 * C281;
    const double C15953 = C15773 * C281;
    const double C15938 = C15774 * C281;
    const double C21502 = C21369 * C281;
    const double C5399 = C4579 * C821;
    const double C5392 = C4580 * C821;
    const double C16593 = C15773 * C821;
    const double C16586 = C15774 * C821;
    const double C21997 = C21369 * C821;
    const double C4755 = C4579 * C265;
    const double C4740 = C4580 * C265;
    const double C15949 = C15773 * C265;
    const double C15934 = C15774 * C265;
    const double C21500 = C21369 * C265;
    const double C10551 = C4579 * C418;
    const double C10536 = C4580 * C418;
    const double C25963 = C21369 * C418;
    const double C31517 = C15773 * C418;
    const double C31502 = C15774 * C418;
    const double C5395 = C4579 * C813;
    const double C5388 = C4580 * C813;
    const double C16589 = C15773 * C813;
    const double C16582 = C15774 * C813;
    const double C21995 = C21369 * C813;
    const double C5649 = C4580 * C1017;
    const double C5970 = C4579 * C1017;
    const double C16835 = C15774 * C1017;
    const double C17148 = C15773 * C1017;
    const double C21505 = C21369 * C1017;
    const double C5827 = C4580 * C1154;
    const double C6172 = C4579 * C1154;
    const double C17005 = C15774 * C1154;
    const double C17350 = C15773 * C1154;
    const double C21999 = C21369 * C1154;
    const double C12249 = C4580 * C1845;
    const double C12586 = C4579 * C1845;
    const double C28014 = C21369 * C1845;
    const double C33207 = C15774 * C1845;
    const double C33544 = C15773 * C1845;
    const double C5817 = C4579 * C1150;
    const double C16995 = C15773 * C1150;
    const double C22315 = C21369 * C1150;
    const double C7178 = C4579 * C2222;
    const double C18332 = C15773 * C2222;
    const double C23336 = C21369 * C2222;
    const double C1031 =
        (3 * (C46334 + C46321 * C46744 + C46742 * ae) +
         C46321 * (2 * C46744 +
                   C46321 * (C46341 + C46321 * (C46321 * C46351 + C46420 * ae) +
                             C46321 * C46420 * ae) +
                   C46745 * ae) +
         (2 * C46742 + C46321 * C46745) * ae) /
        C46271;
    const double C1162 =
        (C46321 * C46334 + C46655 * ae + C46744 * C46522) / C46271;
    const double C1168 =
        (C46491 * (C46334 + C46321 * C46744 + C46742 * ae)) / C46271;
    const double C1174 = (C46334 + C46321 * C46744 + C46742 * ae +
                          (C46341 + C46321 * (C46321 * C46351 + C46420 * ae) +
                           C46321 * C46420 * ae) *
                              C46522) /
                         C46271;
    const double C1548 =
        (C46491 * (2 * C46744 +
                   C46321 * (C46341 + C46321 * (C46321 * C46351 + C46420 * ae) +
                             C46321 * C46420 * ae) +
                   C46745 * ae)) /
        C46271;
    const double C2228 =
        (2 * C46491 * C46744 +
         C46491 * (C46744 + (C46321 * C46351 + C46420 * ae) * C46522)) /
        C46271;
    const double C133 = (3 * (C46334 + C46341 * C46347) +
                         C46322 * (2 * C46343 + C46322 * C46355)) /
                        C46271;
    const double C282 =
        (C46334 + C46341 * C46347 + C46321 * (C46321 * C46355 + C46664 * ae) +
         C46321 * C46664 * ae) /
        C46271;
    const double C284 = (C46321 * (2 * C46343 + C46322 * C46355) +
                         (2 * C46662 + C46322 * C46664) * ae) /
                        C46271;
    const double C435 = (C46334 + C46341 * C46347 + C46355 * C46522) / C46271;
    const double C437 = (C46491 * (2 * C46343 + C46322 * C46355)) / C46271;
    const double C822 = (C46491 * (C46321 * C46355 + C46664 * ae)) / C46271;
    const double C1855 =
        (2 * C46491 * C46355 + C46491 * (C46355 + C46371 * C46522)) / C46271;
    const double C46372 = C46322 * C46370;
    const double C46377 = 2 * C46370;
    const double C46510 = C46321 * C46370;
    const double C46536 = C46491 * C46370;
    const double C46365 = C46350 + C46361;
    const double C46751 = C46747 + C46748;
    const double C5653 = C4580 * C1026;
    const double C5974 = C4579 * C1026;
    const double C16839 = C15774 * C1026;
    const double C17152 = C15773 * C1026;
    const double C21507 = C21369 * C1026;
    const double C12253 = C4580 * C1854;
    const double C12590 = C4579 * C1854;
    const double C28016 = C21369 * C1854;
    const double C33211 = C15774 * C1854;
    const double C33548 = C15773 * C1854;
    const double C12260 = C4580 * C1860;
    const double C33218 = C15774 * C1860;
    const double C43925 = C21369 * C1860;
    const double C46821 = C46321 * C46817;
    const double C46870 = 2 * C46817;
    const double C6703 =
        (3 * (C46744 + C46817 * C46522) +
         C46491 *
             (2 * C46491 * C46817 +
              C46491 * (C46817 + (C46321 * C46367 + C46434 * ae) * C46522))) /
        C46271;
    const double C12241 =
        (4 * (2 * C46491 * C46341 + C46491 * C46864) +
         C46491 *
             (3 * C46864 + C46491 * (2 * C46491 * C46351 +
                                     C46491 * (C46351 + C46367 * C46522)))) /
        C46271;
    const double C142 =
        (3 * (C46340 + be * C46343 + C46322 * C46354) +
         be * (2 * C46343 + C46322 * C46355) +
         C46322 *
             (2 * C46354 + be * C46355 +
              C46322 * (C46350 + be * C46322 * C46351 +
                        C46322 * (be * C46351 + C46322 * std::pow(C46324, 6) *
                                                    bs[6] * C46333)))) /
        C46273;
    const double C293 =
        (ae * (C46330 * C46327 * C46407 +
               C46322 * (C46322 * C46336 * C46337 * C46407 + C46408 * be) +
               C46322 * C46408 * be) +
         C46321 * (C46340 + be * C46343 + C46322 * C46354)) /
        C46273;
    const double C295 = (be * C46334 + C46322 * C46340 + ae * C46321 * C46417 +
                         C46321 * (ae * C46417 + C46321 * C46354)) /
                        C46273;
    const double C446 =
        ((zP - zQ) * (C46340 + be * C46343 + C46322 * C46354)) / C46273;
    const double C448 =
        (be * C46334 + C46322 * C46340 + C46354 * std::pow(zP - zQ, 2)) /
        C46273;
    const double C828 =
        (ae * C46491 * C46417 + C46321 * C46491 * C46354) / C46273;
    const double C1863 =
        (2 * C46491 * C46354 + C46491 * (C46354 + C46370 * C46522)) / C46273;
    const double C12259 = C4575 * C1865;
    const double C27677 = C47018 * C1865;
    const double C33217 = C15769 * C1865;
    const double C7183 = C4575 * C2231;
    const double C18337 = C15769 * C2231;
    const double C23339 = C47018 * C2231;
    const double C46427 = C46322 * C46426;
    const double C46432 = 2 * C46426;
    const double C46509 = ae * C46426;
    const double C46508 = C46321 * C46426;
    const double C1035 = (2 * (ae * C46417 + C46321 * C46354) +
                          ae * (C46417 + C46426 * std::pow(C46321, 2)) +
                          C46321 * (C46354 + ae * C46321 * C46426 +
                                    C46321 * (ae * C46426 + C46321 * C46370))) /
                         C46273;
    const double C1178 = (ae * (C46417 + C46426 * C46522) +
                          C46321 * (C46354 + C46370 * C46522)) /
                         C46273;
    const double C1023 =
        (2 * C46321 * C46417 + C46321 * (C46417 + C46426 * C46503)) / C46271;
    const double C1166 = (C46491 * (C46417 + C46426 * C46503)) / C46271;
    const double C1851 =
        (2 * C46491 * C46417 + C46491 * (C46417 + C46426 * C46522)) / C46271;
    const double C1037 =
        (3 * (C46340 + ae * C46500 + C46321 * C46504) +
         ae * (2 * C46500 + C46321 * C46506) +
         C46321 * (2 * C46504 + ae * C46506 +
                   C46321 * (C46350 + ae * C46321 * C46421 +
                             C46321 * (ae * C46421 + C46321 * C46366)))) /
        C46273;
    const double C1551 =
        (2 * (ae * C46491 * C46415 + C46321 * C46534) + ae * C46491 * C46506 +
         C46321 *
             (C46534 + ae * C46491 * C46321 * C46421 +
              C46321 * (ae * C46491 * C46421 + C46321 * C46491 * C46366))) /
        C46273;
    const double C5813 =
        (2 * (ae * (C46415 + C46421 * C46522) + C46321 * C46580) +
         ae * (C46506 + C46558 * C46522) +
         C46321 * (C46580 + ae * (C46551 + C46321 * C46435 * C46522) +
                   C46321 * (ae * (C46421 + C46435 * C46522) +
                             C46321 * (C46366 + C46390 * C46522)))) /
        C46273;
    const double C1028 = (3 * (C46411 + C46415 * C46503) +
                          C46321 * (2 * C46500 + C46321 * C46506)) /
                         C46271;
    const double C1171 = (C46411 + C46415 * C46503 + C46506 * C46522) / C46271;
    const double C1545 = (C46491 * (2 * C46500 + C46321 * C46506)) / C46271;
    const double C7171 =
        (2 * C46491 * C46506 + C46491 * (C46506 + C46558 * C46522)) / C46271;
    const double C46560 = C46321 * C46556;
    const double C46603 = 2 * C46556;
    const double C46559 = C46350 + C46555;
    const double C7179 = C4575 * C2225;
    const double C18333 = C15769 * C2225;
    const double C23337 = C47018 * C2225;
    const double C27679 = C47018 * C6701;
    const double C46589 = C46587 + C46588;
    const double C12239 =
        (4 * (2 * C46491 * C46415 + C46491 * C46858) +
         C46491 * (3 * C46858 + C46491 * (2 * C46585 + C46491 * C46627))) /
        C46271;
    const double C46443 = C46441 * be;
    const double C46668 = C46322 * C46441;
    const double C46672 = 3 * C46441;
    const double C46756 = C46321 * C46441;
    const double C46755 = C46441 * ae;
    const double C1027 =
        (2 * (C46321 * C46355 + C46664 * ae) +
         C46321 * (C46355 + C46321 * (C46321 * C46371 + C46441 * ae) +
                   C46321 * C46441 * ae) +
         (C46664 + C46441 * C46503) * ae) /
        C46271;
    const double C1018 =
        2 * C46321 * C46664 + C46321 * (C46664 + C46441 * C46503);
    const double C1155 = C46491 * (C46664 + C46441 * C46503);
    const double C1846 =
        2 * C46491 * C46664 + C46491 * (C46664 + C46441 * C46522);
    const double C1849 =
        3 * (C46664 + C46441 * C46522) +
        C46491 * (2 * C46491 * C46441 + C46491 * (C46441 + C46463 * C46522));
    const double C46752 = C46423 + C46750;
    const double C46834 = 2 * C46829;
    const double C46832 = C46829 * ae;
    const double C2223 =
        2 * C46491 * C46749 + C46491 * (C46749 + C46829 * C46522);
    const double C6700 =
        3 * (C46749 + C46829 * C46522) +
        C46491 * (2 * C46491 * C46829 +
                  C46491 * (C46829 + C46321 * C46459 * C46522));
    const double C46831 = C46827 + C46828;
    const double C46996 = C46423 + C46995;
    const double C12256 = C4580 * C1848;
    const double C33214 = C15774 * C1848;
    const double C43923 = C21369 * C1848;
    const double C46444 = C46322 * C46442;
    const double C46453 = 2 * C46442;
    const double C46511 = C46442 * C46503;
    const double C46566 = ae * C46442;
    const double C46565 = C46321 * C46442;
    const double C46591 = C46491 * C46442;
    const double C46860 = C46442 * C46522;
    const double C1857 =
        (3 * (C46417 + C46426 * C46522) +
         C46491 * (2 * C46491 * C46426 + C46491 * (C46426 + C46442 * C46522))) /
        C46271;
    const double C46822 = C46321 * C46819;
    const double C46876 = 3 * C46819;
    const double C46874 = C46819 * ae;
    const double C7169 =
        2 * C46491 * C46745 + C46491 * (C46745 + C46819 * C46522);
    const double C22977 =
        3 * (C46745 + C46819 * C46522) +
        C46491 * (2 * C46491 * C46819 + C46491 * (C46819 + C46879 * C46522));
    const double C47004 = C46815 + C47003;
    const double C27678 = C21369 * C6699;
    const double C46881 = C46321 * C46877;
    const double C46903 = C46877 * C46522;
    const double C47010 = C46491 * C47009;
    const double C46397 = C46322 * C46395;
    const double C1861 =
        (3 * (C46355 + C46371 * C46522) +
         C46491 * (2 * C46491 * C46371 + C46491 * (C46371 + C46395 * C46522))) /
        C46271;
    const double C46396 = C46322 * C46394;
    const double C46567 = C46321 * C46394;
    const double C46582 = C46394 * C46522;
    const double C46592 = C46491 * C46394;
    const double C46616 = C46321 * C46612;
    const double C46630 = C46321 * C46628;
    const double C46646 = C46491 * C46628;
    const double C22980 =
        (3 * C46580 + C46491 * (2 * C46586 + C46491 * C46628) +
         ae * (3 * (C46551 + C46605 * C46522) +
               C46491 * (2 * C46633 +
                         C46491 * (C46605 + C46321 * C46457 * C46522))) +
         C46321 * (ae * (3 * C46627 +
                         C46491 * (2 * C46634 +
                                   C46491 * (C46435 + C46457 * C46522))) +
                   C46321 * (3 * C46628 +
                             C46491 * (2 * C46635 +
                                       C46491 * (C46390 + std::pow(C46324, 8) *
                                                              bs[8] * C46333 *
                                                              C46522))))) /
        C46273;
    const double C46640 = C46637 + C46638;
    const double C46467 = C46322 * C46464;
    const double C46568 = C46464 * C46503;
    const double C46617 = C46321 * C46614;
    const double C22978 =
        (3 * (C46506 + C46558 * C46522) +
         C46491 * (2 * C46491 * C46558 + C46491 * (C46558 + C46614 * C46522))) /
        C46271;
    const double C5819 = C4580 * C1151;
    const double C6902 = C4579 * C1151;
    const double C16997 = C15774 * C1151;
    const double C18064 = C15773 * C1151;
    const double C23128 = C21369 * C1151;
    const double C4770 = C4579 * C266;
    const double C4757 = C4580 * C266;
    const double C15964 = C15773 * C266;
    const double C15951 = C15774 * C266;
    const double C21513 = C21369 * C266;
    const double C4765 = C4580 * C267;
    const double C5054 = C4579 * C267;
    const double C15959 = C15774 * C267;
    const double C16248 = C15773 * C267;
    const double C21734 = C21369 * C267;
    const double C10566 = C4579 * C419;
    const double C10553 = C4580 * C419;
    const double C25970 = C21369 * C419;
    const double C31532 = C15773 * C419;
    const double C31519 = C15774 * C419;
    const double C10561 = C4580 * C420;
    const double C10834 = C4579 * C420;
    const double C26242 = C21369 * C420;
    const double C31527 = C15774 * C420;
    const double C31800 = C15773 * C420;
    const double C5402 = C4579 * C814;
    const double C5397 = C4580 * C814;
    const double C16596 = C15773 * C814;
    const double C16591 = C15774 * C814;
    const double C22002 = C21369 * C814;
    const double C5654 = C4579 * C1019;
    const double C16840 = C15773 * C1019;
    const double C22189 = C21369 * C1019;
    const double C5832 = C4579 * C1156;
    const double C17010 = C15773 * C1156;
    const double C22319 = C21369 * C1156;
    const double C6318 = C4579 * C1542;
    const double C17488 = C15773 * C1542;
    const double C22323 = C21369 * C1542;
    const double C43664 = C21369 * C12237;
    const double C46375 = C46363 + C46373;
    const double C12242 =
        (4 * (2 * C46491 * C46357 + C46491 * C46867) +
         C46491 * (3 * C46867 +
                   C46491 * (2 * C46491 * C46379 +
                             C46491 * (C46379 + C46322 * C46391 * C46522)))) /
        C46271;
    const double C46915 = C46912 + C46914;
    const double C46563 = C46557 + C46561;
    const double C46639 = C46586 + C46636;
    const double C27666 =
        (4 * (2 * C46491 * C46551 + C46491 * C46901) +
         C46491 * (3 * C46901 +
                   C46491 * (2 * C46633 +
                             C46491 * (C46605 + C46321 * C46457 * C46522)))) /
        C46271;
    const double C46908 = C46906 + C46907;
    const double C46468 = C46456 + C46466;
    const double C46759 = C46441 + C46757;
    const double C46836 = C46321 * C46833;
    const double C46884 = C46880 + C46882;
    const double C47049 = C47048 / C47039;
    const double C47362 = 2 * C47327;
    const double C47058 = C47057 / C47036;
    const double C47366 = C47331 / C47054;
    const double C47393 = C47325 - C47361;
    const double C2440 = -C47361;
    const double C47407 = C47392 + C47046;
    const double C47131 = C47130 / C47039;
    const double C47370 = 2 * C47336;
    const double C47138 = C47137 / C47036;
    const double C47380 = C47345 / C47054;
    const double C47401 = C47339 - C47377;
    const double C2332 = -C47377;
    const double C47410 = C47397 + C47127;
    const double C47173 = C47172 / C47039;
    const double C47373 = 2 * C47338;
    const double C47180 = C47179 / C47036;
    const double C47386 = C47351 / C47054;
    const double C47404 = C47340 - C47383;
    const double C3094 = -C47383;
    const double C47411 = C47399 + C47169;
    const double C22187 = C21494 - C21495;
    const double C22186 = C21492 - C21493;
    const double C21521 = C21490 - C21491;
    const double C21520 = C21488 - C21489;
    const double C22312 = C21990 - C21991;
    const double C26830 = C21991 - C21990;
    const double C26443 = C21988 - C21989;
    const double C26441 = C21989 - C21988;
    const double C26442 = C21986 - C21987;
    const double C26440 = C21987 - C21986;
    const double C42380 = C25957 - C25956;
    const double C42379 = C25955 - C25954;
    const double C43662 = C27675 - C27674;
    const double C43661 = C27673 - C27672;
    const double C43660 = C27671 - C27670;
    const double C27681 = C47018 * C6705;
    const double C23343 = C47018 * C7175;
    const double C43667 = C47018 * C12243;
    const double C4762 = C4575 * C273;
    const double C4749 = C47358 * C273;
    const double C15956 = C15769 * C273;
    const double C15943 = C47358 * C273;
    const double C21508 = C47018 * C273;
    const double C4754 = C4575 * C278;
    const double C4741 = C47358 * C278;
    const double C15948 = C15769 * C278;
    const double C15935 = C47358 * C278;
    const double C21501 = C47018 * C278;
    const double C10558 = C4575 * C426;
    const double C10545 = C47358 * C426;
    const double C25966 = C47018 * C426;
    const double C31524 = C15769 * C426;
    const double C31511 = C47358 * C426;
    const double C10550 = C4575 * C431;
    const double C10537 = C47358 * C431;
    const double C25962 = C47018 * C431;
    const double C31516 = C15769 * C431;
    const double C31503 = C47358 * C431;
    const double C5394 = C4575 * C818;
    const double C5389 = C47358 * C818;
    const double C16588 = C15769 * C818;
    const double C16583 = C47358 * C818;
    const double C21994 = C47018 * C818;
    const double C26828 = C22314 - C22315;
    const double C26826 = C22315 - C22314;
    const double C5658 = C4579 * C1031;
    const double C16844 = C15773 * C1031;
    const double C22191 = C21369 * C1031;
    const double C5821 = C4579 * C1162;
    const double C16999 = C15773 * C1162;
    const double C22317 = C21369 * C1162;
    const double C5829 = C4579 * C1168;
    const double C17007 = C15773 * C1168;
    const double C21992 = C21369 * C1168;
    const double C5836 = C4579 * C1174;
    const double C17014 = C15773 * C1174;
    const double C22321 = C21369 * C1174;
    const double C6322 = C4579 * C1548;
    const double C17492 = C15773 * C1548;
    const double C22325 = C21369 * C1548;
    const double C7182 = C4579 * C2228;
    const double C18336 = C15773 * C2228;
    const double C23338 = C21369 * C2228;
    const double C4774 = C4579 * C282;
    const double C4761 = C4580 * C282;
    const double C15968 = C15773 * C282;
    const double C15955 = C15774 * C282;
    const double C21515 = C21369 * C282;
    const double C4769 = C4580 * C284;
    const double C5058 = C4579 * C284;
    const double C15963 = C15774 * C284;
    const double C16252 = C15773 * C284;
    const double C21736 = C21369 * C284;
    const double C10570 = C4579 * C435;
    const double C10557 = C4580 * C435;
    const double C25972 = C21369 * C435;
    const double C31536 = C15773 * C435;
    const double C31523 = C15774 * C435;
    const double C10565 = C4580 * C437;
    const double C10838 = C4579 * C437;
    const double C26244 = C21369 * C437;
    const double C31531 = C15774 * C437;
    const double C31804 = C15773 * C437;
    const double C5406 = C4579 * C822;
    const double C5401 = C4580 * C822;
    const double C16600 = C15773 * C822;
    const double C16595 = C15774 * C822;
    const double C22004 = C21369 * C822;
    const double C12592 = C4580 * C1855;
    const double C33550 = C15774 * C1855;
    const double C42387 = C21369 * C1855;
    const double C46384 = C46377 + C46378;
    const double C1866 =
        (3 * (C46354 + C46370 * C46522) +
         C46491 * (2 * C46536 + C46491 * (C46370 + C46394 * C46522))) /
        C46273;
    const double C2232 =
        (ae * (2 * C46491 * C46426 + C46491 * (C46426 + C46442 * C46522)) +
         C46321 * (2 * C46536 + C46491 * (C46370 + C46394 * C46522))) /
        C46273;
    const double C46374 = C46365 + C46372;
    const double C1163 =
        (C46321 * C46343 + C46662 * ae + C46751 * C46522) / C46271;
    const double C1169 =
        (C46491 * (C46343 + C46321 * C46751 + C46749 * ae)) / C46271;
    const double C1175 = (C46343 + C46321 * C46751 + C46749 * ae +
                          (C46357 + C46321 * (C46321 * C46379 + C46437 * ae) +
                           C46321 * C46437 * ae) *
                              C46522) /
                         C46271;
    const double C2229 =
        (2 * C46491 * C46751 +
         C46491 * (C46751 + (C46321 * C46379 + C46437 * ae) * C46522)) /
        C46271;
    const double C46823 = C46341 + C46821;
    const double C27680 = C21369 * C6703;
    const double C43666 = C21369 * C12241;
    const double C4766 = C4575 * C293;
    const double C4753 = C47358 * C293;
    const double C15960 = C15769 * C293;
    const double C15947 = C47358 * C293;
    const double C21510 = C47018 * C293;
    const double C4758 = C4575 * C295;
    const double C4745 = C47358 * C295;
    const double C15952 = C15769 * C295;
    const double C15939 = C47358 * C295;
    const double C21503 = C47018 * C295;
    const double C10562 = C4575 * C446;
    const double C10549 = C47358 * C446;
    const double C25968 = C47018 * C446;
    const double C31528 = C15769 * C446;
    const double C31515 = C47358 * C446;
    const double C10554 = C4575 * C448;
    const double C10541 = C47358 * C448;
    const double C25964 = C47018 * C448;
    const double C31520 = C15769 * C448;
    const double C31507 = C47358 * C448;
    const double C5398 = C4575 * C828;
    const double C5393 = C47358 * C828;
    const double C16592 = C15769 * C828;
    const double C16587 = C47358 * C828;
    const double C21996 = C47018 * C828;
    const double C12252 = C47358 * C1863;
    const double C12591 = C4575 * C1863;
    const double C28017 = C47018 * C1863;
    const double C33210 = C47358 * C1863;
    const double C33549 = C15769 * C1863;
    const double C43663 = C27677 - C27676;
    const double C46428 = C46415 + C46427;
    const double C46512 = C46509 + C46510;
    const double C1181 =
        (C46491 * C46354 + ae * C46491 * C46508 +
         C46321 * (ae * C46491 * C46426 + C46321 * C46491 * C46370)) /
        C46273;
    const double C1184 =
        (C46354 + C46370 * C46522 + ae * (C46508 + C46321 * C46442 * C46522) +
         C46321 * (ae * (C46426 + C46442 * C46522) +
                   C46321 * (C46370 + C46394 * C46522))) /
        C46273;
    const double C1160 = (C46321 * C46417 + C46508 * C46522) / C46271;
    const double C5652 = C47358 * C1035;
    const double C5975 = C4575 * C1035;
    const double C16838 = C47358 * C1035;
    const double C17153 = C15769 * C1035;
    const double C21506 = C47018 * C1035;
    const double C5822 = C47358 * C1178;
    const double C6907 = C4575 * C1178;
    const double C17000 = C47358 * C1178;
    const double C18069 = C15769 * C1178;
    const double C23131 = C47018 * C1178;
    const double C5648 = C47358 * C1023;
    const double C5971 = C4575 * C1023;
    const double C16834 = C47358 * C1023;
    const double C17149 = C15769 * C1023;
    const double C21504 = C47018 * C1023;
    const double C5826 = C47358 * C1166;
    const double C6173 = C4575 * C1166;
    const double C17004 = C47358 * C1166;
    const double C17351 = C15769 * C1166;
    const double C21998 = C47018 * C1166;
    const double C12248 = C47358 * C1851;
    const double C12587 = C4575 * C1851;
    const double C28015 = C47018 * C1851;
    const double C33206 = C47358 * C1851;
    const double C33545 = C15769 * C1851;
    const double C5659 = C4575 * C1037;
    const double C16845 = C15769 * C1037;
    const double C22190 = C47018 * C1037;
    const double C6323 = C4575 * C1551;
    const double C17493 = C15769 * C1551;
    const double C22324 = C47018 * C1551;
    const double C22329 = C47018 * C5813;
    const double C5655 = C4575 * C1028;
    const double C16841 = C15769 * C1028;
    const double C22188 = C47018 * C1028;
    const double C5833 = C4575 * C1171;
    const double C17011 = C15769 * C1171;
    const double C22318 = C47018 * C1171;
    const double C6319 = C4575 * C1545;
    const double C17489 = C15769 * C1545;
    const double C22322 = C47018 * C1545;
    const double C23341 = C47018 * C7171;
    const double C46610 = C46603 + C46604;
    const double C46562 = C46559 + C46560;
    const double C28150 = C23336 - C23337;
    const double C28148 = C23337 - C23336;
    const double C43665 = C47018 * C12239;
    const double C46669 = C46667 + C46668;
    const double C1152 = C46321 * C46664 + C46756 * C46522;
    const double C2224 =
        2 * C46491 * C46756 + C46491 * (C46756 + C46321 * C46463 * C46522);
    const double C46758 = C46754 + C46755;
    const double C5976 = C4580 * C1027;
    const double C17154 = C15774 * C1027;
    const double C21518 = C21369 * C1027;
    const double C5972 = C4580 * C1018;
    const double C17150 = C15774 * C1018;
    const double C21516 = C21369 * C1018;
    const double C6174 = C4580 * C1155;
    const double C17352 = C15774 * C1155;
    const double C22006 = C21369 * C1155;
    const double C12588 = C4580 * C1846;
    const double C33546 = C15774 * C1846;
    const double C42385 = C21369 * C1846;
    const double C1032 =
        (3 * (C46343 + C46321 * C46751 + C46749 * ae) +
         C46321 * (2 * C46751 +
                   C46321 * (C46357 + C46321 * (C46321 * C46379 + C46437 * ae) +
                             C46321 * C46437 * ae) +
                   C46752 * ae) +
         (2 * C46749 + C46321 * C46752) * ae) /
        C46271;
    const double C1549 =
        (C46491 * (2 * C46751 +
                   C46321 * (C46357 + C46321 * (C46321 * C46379 + C46437 * ae) +
                             C46321 * C46437 * ae) +
                   C46752 * ae)) /
        C46271;
    const double C1020 = 3 * (C46662 + C46423 * C46503) +
                         C46321 * (2 * C46749 + C46321 * C46752);
    const double C1157 = C46662 + C46423 * C46503 + C46752 * C46522;
    const double C1543 = C46491 * (2 * C46749 + C46321 * C46752);
    const double C7170 =
        2 * C46491 * C46752 + C46491 * (C46752 + C46833 * C46522);
    const double C7180 = C4580 * C2223;
    const double C18334 = C15774 * C2223;
    const double C27880 = C21369 * C2223;
    const double C46835 = C46321 * C46831;
    const double C6704 =
        (3 * (C46751 + C46831 * C46522) +
         C46491 * (2 * C46491 * C46831 +
                   C46491 * (C46831 + (C46321 * C46322 * C46391 + C46459 * ae) *
                                          C46522))) /
        C46271;
    const double C12238 =
        4 * (2 * C46491 * C46423 + C46491 * C46996) +
        C46491 * (3 * C46996 + C46491 * (2 * C46491 * C46437 +
                                         C46491 * (C46437 + C46459 * C46522)));
    const double C46445 = C46421 + C46444;
    const double C46513 = C46426 + C46511;
    const double C46571 = 2 * C46565;
    const double C46569 = ae * C46565;
    const double C2226 =
        (2 * C46491 * C46508 + C46491 * (C46508 + C46565 * C46522)) / C46271;
    const double C6702 =
        (3 * (C46508 + C46565 * C46522) +
         C46491 * (2 * C46491 * C46565 +
                   C46491 * (C46565 + C46321 * C46464 * C46522))) /
        C46271;
    const double C46593 = ae * C46591;
    const double C46861 = C46426 + C46860;
    const double C12257 = C47358 * C1857;
    const double C33215 = C47358 * C1857;
    const double C43924 = C47018 * C1857;
    const double C46824 = C46820 + C46822;
    const double C23340 = C21369 * C7169;
    const double C27665 =
        4 * (2 * C46491 * C46815 + C46491 * C47004) +
        C46491 * (3 * C47004 +
                  C46491 * (2 * C46491 * C46873 +
                            C46491 * (C46873 + C46321 * C46455 * C46522)));
    const double C46883 = C46351 + C46881;
    const double C46904 = C46817 + C46903;
    const double C47011 = C47008 + C47010;
    const double C46399 = C46387 + C46397;
    const double C46398 = C46389 + C46396;
    const double C46570 = C46566 + C46567;
    const double C46583 = C46370 + C46582;
    const double C46594 = C46321 * C46592;
    const double C46618 = C46615 + C46616;
    const double C46631 = C46629 + C46630;
    const double C46647 = C46645 + C46646;
    const double C46641 = C46321 * C46640;
    const double C46469 = C46435 + C46467;
    const double C46572 = C46442 + C46568;
    const double C46619 = C46613 + C46617;
    const double C135 = (4 * (2 * C46343 + C46322 * C46355) +
                         C46322 * (3 * C46355 + C46322 * C46375)) /
                        C46271;
    const double C439 =
        (2 * C46343 + C46322 * C46355 + C46375 * C46522) / C46271;
    const double C441 = (C46491 * (3 * C46355 + C46322 * C46375)) / C46271;
    const double C43657 =
        (5 * (3 * C46864 + C46491 * C46915) +
         C46491 * (4 * C46915 +
                   C46491 * (3 * C46913 +
                             C46491 * (2 * C46491 * C46367 +
                                       C46491 * (C46367 + C46391 * C46522))))) /
        C46271;
    const double C6315 =
        (3 * (C46534 + ae * C46491 * C46551 + C46321 * C46589) +
         ae * C46491 * C46563 +
         C46321 * (2 * C46589 + ae * C46491 * C46558 +
                   C46321 * (C46586 + ae * C46491 * C46321 * C46435 +
                             C46321 * (ae * C46491 * C46435 +
                                       C46321 * C46491 * C46390)))) /
        C46273;
    const double C5639 = (4 * (2 * C46500 + C46321 * C46506) +
                          C46321 * (3 * C46506 + C46321 * C46563)) /
                         C46271;
    const double C5809 =
        (2 * C46500 + C46321 * C46506 + C46563 * C46522) / C46271;
    const double C6311 = (C46491 * (3 * C46506 + C46321 * C46563)) / C46271;
    const double C43656 =
        (5 * (3 * C46858 + C46491 * C46908) +
         C46491 * (4 * C46908 +
                   C46491 * (3 * C46627 +
                             C46491 * (2 * C46634 +
                                       C46491 * (C46435 + C46457 * C46522))))) /
        C46271;
    const double C46470 = C46468 * be;
    const double C46673 = C46322 * C46468;
    const double C1021 = 3 * (C46664 + C46441 * C46503) +
                         C46321 * (2 * C46756 + C46321 * C46759);
    const double C1158 = C46664 + C46441 * C46503 + C46759 * C46522;
    const double C1544 = C46491 * (2 * C46756 + C46321 * C46759);
    const double C46838 = C46834 + C46836;
    const double C46886 = C46321 * C46884;
    const double C47050 = C47046 - C47049;
    const double C47394 = C47362 / C47036;
    const double C47059 = C47055 - C47058;
    const double C47408 = C47393 / C47040;
    const double C47132 = C47127 - C47131;
    const double C47398 = C47370 / C47036;
    const double C47139 = C47135 - C47138;
    const double C47412 = C47401 / C47040;
    const double C47174 = C47169 - C47173;
    const double C47400 = C47373 / C47036;
    const double C47181 = C47177 - C47180;
    const double C47414 = C47404 / C47040;
    const double C42390 = C42380 * C47279;
    const double C42389 = C42379 * C116;
    const double C43670 = C43662 * C116;
    const double C43669 = C43661 * C47279;
    const double C43668 = C43660 * C116;
    const double C21522 = C21500 - C21501;
    const double C42381 = C25963 - C25962;
    const double C26446 = C21994 - C21995;
    const double C26444 = C21995 - C21994;
    const double C43026 = C26826 * C116;
    const double C26829 = C22316 - C22317;
    const double C26827 = C22317 - C22316;
    const double C22313 = C21992 - C21993;
    const double C26831 = C21993 - C21992;
    const double C22331 = C22320 - C22321;
    const double C26833 = C22321 - C22320;
    const double C28151 = C23338 - C23339;
    const double C28149 = C23339 - C23338;
    const double C12261 = C47358 * C1866;
    const double C33219 = C47358 * C1866;
    const double C43926 = C47018 * C1866;
    const double C7185 = C47358 * C2232;
    const double C18339 = C47358 * C2232;
    const double C27883 = C47018 * C2232;
    const double C143 =
        (4 * (2 * C46354 + be * C46355 + C46322 * C46374) +
         be * (3 * C46355 + C46322 * C46375) +
         C46322 * (3 * C46374 + be * C46375 +
                   C46322 * (2 * C46370 + be * C46371 +
                             C46322 * (C46366 + be * C46322 * C46367 +
                                       C46322 * (be * C46367 +
                                                 C46322 * std::pow(C46326, 7) *
                                                     bs[7] * C46333))))) /
        C46273;
    const double C449 = (C46340 + be * C46343 + C46322 * C46354 +
                         C46374 * std::pow(zP - zQ, 2)) /
                        C46273;
    const double C450 =
        ((zP - zQ) * (2 * C46354 + be * C46355 + C46322 * C46374)) / C46273;
    const double C5823 = C4580 * C1163;
    const double C6906 = C4579 * C1163;
    const double C17001 = C15774 * C1163;
    const double C18068 = C15773 * C1163;
    const double C23130 = C21369 * C1163;
    const double C5831 = C4580 * C1169;
    const double C6176 = C4579 * C1169;
    const double C17009 = C15774 * C1169;
    const double C17354 = C15773 * C1169;
    const double C22001 = C21369 * C1169;
    const double C5838 = C4580 * C1175;
    const double C17016 = C15774 * C1175;
    const double C23134 = C21369 * C1175;
    const double C7184 = C4580 * C2229;
    const double C18338 = C15774 * C2229;
    const double C27882 = C21369 * C2229;
    const double C46825 = C46823 + C46818;
    const double C21523 = C21502 - C21503;
    const double C42382 = C25965 - C25964;
    const double C26447 = C21996 - C21997;
    const double C26445 = C21997 - C21996;
    const double C43922 = C28017 - C28016;
    const double C43671 = C43663 * C47279;
    const double C46429 = C46428 + C46425;
    const double C5830 = C47358 * C1181;
    const double C6177 = C4575 * C1181;
    const double C17008 = C47358 * C1181;
    const double C17355 = C15769 * C1181;
    const double C22000 = C47018 * C1181;
    const double C5839 = C47358 * C1184;
    const double C17017 = C47358 * C1184;
    const double C23135 = C47018 * C1184;
    const double C5818 = C47358 * C1160;
    const double C6903 = C4575 * C1160;
    const double C16996 = C47358 * C1160;
    const double C18065 = C15769 * C1160;
    const double C23129 = C47018 * C1160;
    const double C22431 = C21506 - C21507;
    const double C22430 = C21504 - C21505;
    const double C22582 = C21998 - C21999;
    const double C27158 = C21999 - C21998;
    const double C43921 = C28015 - C28014;
    const double C22197 = C22190 - C22191;
    const double C22691 = C22324 - C22325;
    const double C27291 = C22325 - C22324;
    const double C22196 = C22188 - C22189;
    const double C22330 = C22318 - C22319;
    const double C26832 = C22319 - C22318;
    const double C22690 = C22322 - C22323;
    const double C27290 = C22323 - C22322;
    const double C5643 =
        (4 * (2 * C46504 + ae * C46506 + C46321 * C46562) +
         ae * (3 * C46506 + C46321 * C46563) +
         C46321 *
             (3 * C46562 + ae * C46563 +
              C46321 * (2 * C46556 + ae * C46558 +
                        C46321 * (C46366 + ae * C46321 * C46435 +
                                  C46321 * (ae * C46435 + C46321 * C46390))))) /
        C46273;
    const double C44028 = C28148 * C116;
    const double C286 =
        (2 * C46343 + C46322 * C46355 +
         C46321 * (C46321 * C46375 + C46669 * ae) + C46321 * C46669 * ae) /
        C46271;
    const double C288 = (C46321 * (3 * C46355 + C46322 * C46375) +
                         (3 * C46664 + C46322 * C46669) * ae) /
                        C46271;
    const double C824 = (C46491 * (C46321 * C46375 + C46669 * ae)) / C46271;
    const double C122 = 4 * (2 * C46662 + C46322 * C46664) +
                        C46322 * (3 * C46664 + C46322 * C46669);
    const double C268 = 2 * C46662 + C46322 * C46664 + C46669 * C46503;
    const double C269 = C46321 * (3 * C46664 + C46322 * C46669);
    const double C421 = 2 * C46662 + C46322 * C46664 + C46669 * C46522;
    const double C422 = C46491 * (3 * C46664 + C46322 * C46669);
    const double C815 = C46491 * C46321 * C46669;
    const double C1290 =
        2 * C46321 * C46669 + C46321 * (C46669 + C46468 * C46503);
    const double C1440 = C46491 * (C46669 + C46468 * C46503);
    const double C2014 = C46321 * C46669 + C46321 * C46468 * C46522;
    const double C2120 =
        2 * C46491 * C46669 + C46491 * (C46669 + C46468 * C46522);
    const double C6904 = C4580 * C1152;
    const double C18066 = C15774 * C1152;
    const double C25974 = C21369 * C1152;
    const double C1033 =
        (3 * (C46355 + C46321 * C46758 + C46756 * ae) +
         C46321 * (2 * C46758 +
                   C46321 * (C46371 + C46321 * (C46321 * C46395 + C46463 * ae) +
                             C46321 * C46463 * ae) +
                   C46759 * ae) +
         (2 * C46756 + C46321 * C46759) * ae) /
        C46271;
    const double C1164 =
        (C46321 * C46355 + C46664 * ae + C46758 * C46522) / C46271;
    const double C1170 =
        (C46491 * (C46355 + C46321 * C46758 + C46756 * ae)) / C46271;
    const double C1176 = (C46355 + C46321 * C46758 + C46756 * ae +
                          (C46371 + C46321 * (C46321 * C46395 + C46463 * ae) +
                           C46321 * C46463 * ae) *
                              C46522) /
                         C46271;
    const double C1550 =
        (C46491 * (2 * C46758 +
                   C46321 * (C46371 + C46321 * (C46321 * C46395 + C46463 * ae) +
                             C46321 * C46463 * ae) +
                   C46759 * ae)) /
        C46271;
    const double C2230 =
        (2 * C46491 * C46758 +
         C46491 * (C46758 + (C46321 * C46395 + C46463 * ae) * C46522)) /
        C46271;
    const double C5660 = C4580 * C1032;
    const double C16846 = C15774 * C1032;
    const double C22434 = C21369 * C1032;
    const double C6324 = C4580 * C1549;
    const double C17494 = C15774 * C1549;
    const double C22586 = C21369 * C1549;
    const double C5656 = C4580 * C1020;
    const double C16842 = C15774 * C1020;
    const double C22432 = C21369 * C1020;
    const double C5834 = C4580 * C1157;
    const double C17012 = C15774 * C1157;
    const double C23132 = C21369 * C1157;
    const double C6320 = C4580 * C1543;
    const double C17490 = C15774 * C1543;
    const double C22584 = C21369 * C1543;
    const double C46837 = C46357 + C46835;
    const double C46446 = C46445 + C46440;
    const double C1038 =
        (3 * (C46354 + ae * C46508 + C46321 * C46512) +
         ae * (2 * C46508 + C46321 * C46513) +
         C46321 * (2 * C46512 + ae * C46513 +
                   C46321 * (C46370 + ae * C46321 * C46442 +
                             C46321 * (ae * C46442 + C46321 * C46394)))) /
        C46273;
    const double C1552 =
        (2 * (ae * C46491 * C46426 + C46321 * C46536) + ae * C46491 * C46513 +
         C46321 *
             (C46536 + ae * C46491 * C46321 * C46442 +
              C46321 * (ae * C46491 * C46442 + C46321 * C46491 * C46394))) /
        C46273;
    const double C1029 = (3 * (C46417 + C46426 * C46503) +
                          C46321 * (2 * C46508 + C46321 * C46513)) /
                         C46271;
    const double C1172 = (C46417 + C46426 * C46503 + C46513 * C46522) / C46271;
    const double C1546 = (C46491 * (2 * C46508 + C46321 * C46513)) / C46271;
    const double C46573 = C46370 + C46569;
    const double C7181 = C47358 * C2226;
    const double C18335 = C47358 * C2226;
    const double C27881 = C47018 * C2226;
    const double C12240 =
        (4 * (2 * C46491 * C46426 + C46491 * C46861) +
         C46491 *
             (3 * C46861 +
              C46491 * (2 * C46591 + C46491 * (C46442 + C46464 * C46522)))) /
        C46271;
    const double C5637 = 4 * (2 * C46742 + C46321 * C46745) +
                         C46321 * (3 * C46745 + C46321 * C46824);
    const double C5807 = 2 * C46742 + C46321 * C46745 + C46824 * C46522;
    const double C6309 = C46491 * (3 * C46745 + C46321 * C46824);
    const double C23331 =
        2 * C46491 * C46824 + C46491 * (C46824 + C46884 * C46522);
    const double C46885 = C46883 + C46878;
    const double C27667 =
        (4 * (2 * C46491 * C46817 + C46491 * C46904) +
         C46491 * (3 * C46904 + C46491 * (2 * C46491 * C46877 +
                                          C46491 * (C46877 + (C46321 * C46391 +
                                                              C46455 * ae) *
                                                                 C46522)))) /
        C46271;
    const double C43655 =
        5 * (3 * C46993 + C46491 * C47011) +
        C46491 * (4 * C47011 +
                  C46491 * (3 * C47009 +
                            C46491 * (2 * C46491 * C46434 +
                                      C46491 * (C46434 + C46455 * C46522))));
    const double C46401 = C46322 * C46399;
    const double C1292 =
        (2 * (C46321 * C46375 + C46669 * ae) +
         C46321 * (C46375 + C46321 * (C46321 * C46399 + C46468 * ae) +
                   C46321 * C46468 * ae) +
         (C46669 + C46468 * C46503) * ae) /
        C46271;
    const double C1442 =
        (C46491 * (C46375 + C46321 * (C46321 * C46399 + C46468 * ae) +
                   C46321 * C46468 * ae)) /
        C46271;
    const double C2016 = (C46321 * C46375 + C46669 * ae +
                          (C46321 * C46399 + C46468 * ae) * C46522) /
                         C46271;
    const double C2122 =
        (2 * C46491 * C46375 + C46491 * (C46375 + C46399 * C46522)) / C46271;
    const double C46400 = C46322 * C46398;
    const double C46517 = C46321 * C46398;
    const double C46538 = C46491 * C46398;
    const double C1864 =
        (2 * C46491 * C46374 + C46491 * (C46374 + C46398 * C46522)) / C46273;
    const double C46574 = C46321 * C46570;
    const double C6706 =
        (ae * (3 * (C46426 + C46442 * C46522) +
               C46491 * (2 * C46591 + C46491 * (C46442 + C46464 * C46522))) +
         C46321 * (3 * C46583 +
                   C46491 * (2 * C46592 +
                             C46491 * (C46394 + (be * C46391 +
                                                 C46322 * std::pow(C46324, 8) *
                                                     bs[8] * C46333) *
                                                    C46522)))) /
        C46273;
    const double C7176 =
        (2 * C46536 + C46491 * C46583 +
         ae * (2 * C46491 * C46565 +
               C46491 * (C46565 + C46321 * C46464 * C46522)) +
         C46321 * (ae * (2 * C46591 + C46491 * (C46442 + C46464 * C46522)) +
                   C46321 * (2 * C46592 +
                             C46491 * (C46394 + (be * C46391 +
                                                 C46322 * std::pow(C46324, 8) *
                                                     bs[8] * C46333) *
                                                    C46522)))) /
        C46273;
    const double C12244 =
        (4 * (2 * C46536 + C46491 * C46583) +
         C46491 * (3 * C46583 +
                   C46491 * (2 * C46592 +
                             C46491 * (C46394 + (be * C46391 +
                                                 C46322 * std::pow(C46324, 8) *
                                                     bs[8] * C46333) *
                                                    C46522)))) /
        C46273;
    const double C46595 = C46593 + C46594;
    const double C46620 = C46321 * C46618;
    const double C23334 =
        (2 * (ae * (2 * C46585 + C46491 * C46627) + C46321 * C46647) +
         ae * (2 * C46491 * C46558 + C46491 * (C46558 + C46614 * C46522)) +
         C46321 *
             (C46647 +
              ae * (2 * C46633 + C46491 * (C46605 + C46321 * C46457 * C46522)) +
              C46321 *
                  (ae * (2 * C46634 + C46491 * (C46435 + C46457 * C46522)) +
                   C46321 * (2 * C46635 +
                             C46491 * (C46390 + std::pow(C46324, 8) * bs[8] *
                                                    C46333 * C46522))))) /
        C46273;
    const double C27668 =
        (ae * (4 * (2 * C46585 + C46491 * C46627) +
               C46491 * (3 * C46627 +
                         C46491 * (2 * C46634 +
                                   C46491 * (C46435 + C46457 * C46522)))) +
         C46321 * (4 * C46647 +
                   C46491 * (3 * C46628 +
                             C46491 * (2 * C46635 +
                                       C46491 * (C46390 + std::pow(C46324, 8) *
                                                              bs[8] * C46333 *
                                                              C46522))))) /
        C46273;
    const double C43658 =
        (5 * (3 * C46580 + C46491 * C46647) +
         C46491 * (4 * C46647 +
                   C46491 * (3 * C46628 +
                             C46491 * (2 * C46635 +
                                       C46491 * (C46390 + std::pow(C46324, 8) *
                                                              bs[8] * C46333 *
                                                              C46522))))) /
        C46273;
    const double C46642 = C46639 + C46641;
    const double C46471 = C46469 + C46462;
    const double C46575 = C46321 * C46572;
    const double C5814 =
        (2 * (ae * (C46426 + C46442 * C46522) + C46321 * C46583) +
         ae * (C46513 + C46572 * C46522) +
         C46321 * (C46583 + ae * (C46565 + C46321 * C46464 * C46522) +
                   C46321 * (ae * (C46442 + C46464 * C46522) +
                             C46321 * (C46394 + (be * C46391 +
                                                 C46322 * std::pow(C46324, 8) *
                                                     bs[8] * C46333) *
                                                    C46522)))) /
        C46273;
    const double C7172 =
        (2 * C46491 * C46513 + C46491 * (C46513 + C46572 * C46522)) / C46271;
    const double C46621 = C46321 * C46619;
    const double C22310 =
        (3 * (C46580 + ae * (C46551 + C46605 * C46522) + C46321 * C46631) +
         ae * (C46563 + C46619 * C46522) +
         C46321 * (2 * C46631 + ae * (C46558 + C46614 * C46522) +
                   C46321 * (C46628 + ae * (C46605 + C46321 * C46457 * C46522) +
                             C46321 * (ae * (C46435 + C46457 * C46522) +
                                       C46321 * (C46390 + std::pow(C46324, 8) *
                                                              bs[8] * C46333 *
                                                              C46522))))) /
        C46273;
    const double C23332 =
        (2 * C46491 * C46563 + C46491 * (C46563 + C46619 * C46522)) / C46271;
    const double C10572 = C4580 * C439;
    const double C31538 = C15774 * C439;
    const double C42596 = C21369 * C439;
    const double C10840 = C4580 * C441;
    const double C31806 = C15774 * C441;
    const double C22695 = C47018 * C6315;
    const double C22193 = C47018 * C5639;
    const double C22327 = C47018 * C5809;
    const double C22693 = C47018 * C6311;
    const double C46674 = C46672 + C46673;
    const double C5638 = 4 * (2 * C46749 + C46321 * C46752) +
                         C46321 * (3 * C46752 + C46321 * C46838);
    const double C5808 = 2 * C46749 + C46321 * C46752 + C46838 * C46522;
    const double C6310 = C46491 * (3 * C46752 + C46321 * C46838);
    const double C46888 = C46876 + C46886;
    const double C47324 = C47050 * C47038;
    const double C47364 = C47329 + C47050;
    const double C47332 = C47059 / C47040;
    const double C47328 = C47059 * C47038;
    const double C554 = C47408 - (C47050 * C47041) / C47036;
    const double C47342 = C47132 * C47126;
    const double C47379 = C47344 + C47132;
    const double C47346 = C47139 / C47040;
    const double C47343 = C47139 * C47126;
    const double C1284 = C47412 - (C47132 * C47128) / C47036;
    const double C47348 = C47174 * C47168;
    const double C47385 = C47350 + C47174;
    const double C47352 = C47181 / C47040;
    const double C47349 = C47181 * C47168;
    const double C2116 = C47414 - (C47174 * C47170) / C47036;
    const double C42395 = C42389 + C42390;
    const double C43672 = C43668 + C43669;
    const double C42391 = C42381 * C116;
    const double C43027 = C26827 * C47279;
    const double C43029 = C22331 * C47279;
    const double C44029 = C28149 * C47279;
    const double C10571 = C4575 * C449;
    const double C10556 = C47358 * C449;
    const double C25973 = C47018 * C449;
    const double C31537 = C15769 * C449;
    const double C31522 = C47358 * C449;
    const double C10564 = C47358 * C450;
    const double C10839 = C4575 * C450;
    const double C26245 = C47018 * C450;
    const double C31530 = C47358 * C450;
    const double C31805 = C15769 * C450;
    const double C27879 = C23130 - C23131;
    const double C27877 = C23131 - C23130;
    const double C5641 =
        (4 * (2 * C46744 + C46321 * C46825 + C46745 * ae) +
         C46321 *
             (3 * C46825 +
              C46321 *
                  (2 * C46817 +
                   C46321 * (C46351 + C46321 * (C46321 * C46367 + C46434 * ae) +
                             C46321 * C46434 * ae) +
                   C46819 * ae) +
              C46824 * ae) +
         (3 * C46745 + C46321 * C46824) * ae) /
        C46271;
    const double C5811 =
        (2 * C46744 + C46321 * C46825 + C46745 * ae +
         (2 * C46817 +
          C46321 * (C46351 + C46321 * (C46321 * C46367 + C46434 * ae) +
                    C46321 * C46434 * ae) +
          C46819 * ae) *
             C46522) /
        C46271;
    const double C6313 =
        (C46491 *
         (3 * C46825 +
          C46321 *
              (2 * C46817 +
               C46321 * (C46351 + C46321 * (C46321 * C46367 + C46434 * ae) +
                         C46321 * C46434 * ae) +
               C46819 * ae) +
          C46824 * ae)) /
        C46271;
    const double C7173 =
        (2 * C46491 * C46825 +
         C46491 * (C46825 + (C46351 + C46321 * (C46321 * C46367 + C46434 * ae) +
                             C46321 * C46434 * ae) *
                                C46522)) /
        C46271;
    const double C42392 = C42382 * C47279;
    const double C43928 = C43922 * C47279;
    const double C43673 = C43670 + C43671;
    const double C296 =
        (C46340 + be * C46343 + C46322 * C46354 + ae * C46321 * C46429 +
         C46321 * (ae * C46429 + C46321 * C46374)) /
        C46273;
    const double C297 =
        (ae * (2 * C46417 + C46322 * C46429 + (C46408 + C46420 * C46347) * be) +
         C46321 * (2 * C46354 + be * C46355 + C46322 * C46374)) /
        C46273;
    const double C829 =
        (ae * C46491 * C46429 + C46321 * C46491 * C46374) / C46273;
    const double C132 = (3 * (C46411 + C46322 * C46417 + C46662 * be) +
                         C46322 * (2 * C46417 + C46322 * C46429 + C46664 * be) +
                         (2 * C46662 + C46322 * C46664) * be) /
                        C46271;
    const double C279 =
        (C46411 + C46322 * C46417 + C46662 * be + C46429 * C46503) / C46271;
    const double C283 =
        (C46321 * (2 * C46417 + C46322 * C46429 + C46664 * be)) / C46271;
    const double C432 =
        (C46411 + C46322 * C46417 + C46662 * be + C46429 * C46522) / C46271;
    const double C436 =
        (C46491 * (2 * C46417 + C46322 * C46429 + C46664 * be)) / C46271;
    const double C819 = (C46491 * C46321 * C46429) / C46271;
    const double C22583 = C22000 - C22001;
    const double C27159 = C22001 - C22000;
    const double C27878 = C23128 - C23129;
    const double C27876 = C23129 - C23128;
    const double C43927 = C43921 * C116;
    const double C43028 = C22330 * C116;
    const double C22195 = C47018 * C5643;
    const double C4776 = C4580 * C286;
    const double C15970 = C15774 * C286;
    const double C21740 = C21369 * C286;
    const double C5060 = C4580 * C288;
    const double C16254 = C15774 * C288;
    const double C5408 = C4580 * C824;
    const double C16602 = C15774 * C824;
    const double C26110 = C21369 * C824;
    const double C4772 = C4580 * C268;
    const double C15966 = C15774 * C268;
    const double C21738 = C21369 * C268;
    const double C5056 = C4580 * C269;
    const double C16250 = C15774 * C269;
    const double C10568 = C4580 * C421;
    const double C31534 = C15774 * C421;
    const double C42594 = C21369 * C421;
    const double C10836 = C4580 * C422;
    const double C31802 = C15774 * C422;
    const double C5404 = C4580 * C815;
    const double C16598 = C15774 * C815;
    const double C26108 = C21369 * C815;
    const double C6908 = C4580 * C1164;
    const double C18070 = C15774 * C1164;
    const double C25976 = C21369 * C1164;
    const double C6178 = C4580 * C1170;
    const double C17356 = C15774 * C1170;
    const double C22008 = C21369 * C1170;
    const double C46839 = C46837 + C46832;
    const double C46447 = C46322 * C46446;
    const double C46452 = 3 * C46446;
    const double C46516 = ae * C46446;
    const double C46515 = C46321 * C46446;
    const double C1036 = (2 * (ae * C46429 + C46321 * C46374) +
                          ae * (C46429 + C46446 * std::pow(C46321, 2)) +
                          C46321 * (C46374 + ae * C46321 * C46446 +
                                    C46321 * (ae * C46446 + C46321 * C46398))) /
                         C46273;
    const double C1179 = (ae * (C46429 + C46446 * C46522) +
                          C46321 * (C46374 + C46398 * C46522)) /
                         C46273;
    const double C1024 =
        (2 * C46321 * C46429 + C46321 * (C46429 + C46446 * C46503)) / C46271;
    const double C1167 = (C46491 * (C46429 + C46446 * C46503)) / C46271;
    const double C1852 =
        (2 * C46491 * C46429 + C46491 * (C46429 + C46446 * C46522)) / C46271;
    const double C5661 = C47358 * C1038;
    const double C16847 = C47358 * C1038;
    const double C22435 = C47018 * C1038;
    const double C6325 = C47358 * C1552;
    const double C17495 = C47358 * C1552;
    const double C22587 = C47018 * C1552;
    const double C5657 = C47358 * C1029;
    const double C16843 = C47358 * C1029;
    const double C22433 = C47018 * C1029;
    const double C5835 = C47358 * C1172;
    const double C17013 = C47358 * C1172;
    const double C23133 = C47018 * C1172;
    const double C6321 = C47358 * C1546;
    const double C17491 = C47358 * C1546;
    const double C22585 = C47018 * C1546;
    const double C22192 = C21369 * C5637;
    const double C22326 = C21369 * C5807;
    const double C22692 = C21369 * C6309;
    const double C46887 = C46321 * C46885;
    const double C22979 =
        (3 * (C46825 + C46885 * C46522) +
         C46491 *
             (2 * C46491 * C46885 +
              C46491 *
                  (C46885 + (C46367 + C46321 * (C46321 * C46391 + C46455 * ae) +
                             C46321 * C46455 * ae) *
                                C46522))) /
        C46271;
    const double C46403 = C46383 + C46401;
    const double C46402 = C46384 + C46400;
    const double C1867 =
        (3 * (C46374 + C46398 * C46522) +
         C46491 * (2 * C46538 +
                   C46491 * (C46398 + (C46390 + be * C46322 * C46391 +
                                       C46322 * (be * C46391 +
                                                 C46322 * std::pow(C46324, 8) *
                                                     bs[8] * C46333)) *
                                          C46522))) /
        C46273;
    const double C12593 = C47358 * C1864;
    const double C33551 = C47358 * C1864;
    const double C42388 = C47018 * C1864;
    const double C46576 = C46573 + C46574;
    const double C46622 = C46610 + C46620;
    const double C46472 = C46322 * C46471;
    const double C46518 = C46471 * C46503;
    const double C2233 =
        (ae * (2 * C46491 * C46446 + C46491 * (C46446 + C46471 * C46522)) +
         C46321 * (2 * C46538 +
                   C46491 * (C46398 + (C46390 + be * C46322 * C46391 +
                                       C46322 * (be * C46391 +
                                                 C46322 * std::pow(C46324, 8) *
                                                     bs[8] * C46333)) *
                                          C46522))) /
        C46273;
    const double C1858 =
        (3 * (C46429 + C46446 * C46522) +
         C46491 * (2 * C46491 * C46446 + C46491 * (C46446 + C46471 * C46522))) /
        C46271;
    const double C46577 = C46571 + C46575;
    const double C46623 = C46608 + C46621;
    const double C123 = 5 * (3 * C46664 + C46322 * C46669) +
                        C46322 * (4 * C46669 + C46322 * C46674);
    const double C270 = 3 * C46664 + C46322 * C46669 + C46674 * C46503;
    const double C423 = 3 * C46664 + C46322 * C46669 + C46674 * C46522;
    const double C558 = C46321 * (4 * C46669 + C46322 * C46674);
    const double C662 = C46491 * (4 * C46669 + C46322 * C46674);
    const double C816 = C46491 * C46321 * C46674;
    const double C22181 = 5 * (3 * C46745 + C46321 * C46824) +
                          C46321 * (4 * C46824 + C46321 * C46888);
    const double C22307 = 3 * C46745 + C46321 * C46824 + C46888 * C46522;
    const double C22685 = C46491 * (4 * C46824 + C46321 * C46888);
    const double C47360 = C47324 / C47036;
    const double C47395 = C47364 / C47040;
    const double C47396 = C47366 + C47332;
    const double C556 = C47332 - C47057 / C47054;
    const double C47363 = C47328 / C47036;
    const double C47376 = C47342 / C47036;
    const double C47402 = C47379 / C47040;
    const double C47403 = C47380 + C47346;
    const double C1286 = C47346 - C47137 / C47054;
    const double C47378 = C47343 / C47036;
    const double C47382 = C47348 / C47036;
    const double C47405 = C47385 / C47040;
    const double C47406 = C47386 + C47352;
    const double C2118 = C47352 - C47179 / C47054;
    const double C47384 = C47349 / C47036;
    const double C43030 = C43026 + C43027;
    const double C44030 = C44028 + C44029;
    const double C42384 = C25973 - C25972;
    const double C43821 = C27877 * C47279;
    const double C22194 = C21369 * C5641;
    const double C22328 = C21369 * C5811;
    const double C22694 = C21369 * C6313;
    const double C23342 = C21369 * C7173;
    const double C42396 = C42391 + C42392;
    const double C4775 = C4575 * C296;
    const double C4760 = C47358 * C296;
    const double C15969 = C15769 * C296;
    const double C15954 = C47358 * C296;
    const double C21514 = C47018 * C296;
    const double C4768 = C47358 * C297;
    const double C5059 = C4575 * C297;
    const double C15962 = C47358 * C297;
    const double C16253 = C15769 * C297;
    const double C21737 = C47018 * C297;
    const double C5407 = C4575 * C829;
    const double C5400 = C47358 * C829;
    const double C16601 = C15769 * C829;
    const double C16594 = C47358 * C829;
    const double C22005 = C47018 * C829;
    const double C4771 = C4575 * C279;
    const double C4756 = C47358 * C279;
    const double C15965 = C15769 * C279;
    const double C15950 = C47358 * C279;
    const double C21512 = C47018 * C279;
    const double C4764 = C47358 * C283;
    const double C5055 = C4575 * C283;
    const double C15958 = C47358 * C283;
    const double C16249 = C15769 * C283;
    const double C21735 = C47018 * C283;
    const double C10567 = C4575 * C432;
    const double C10552 = C47358 * C432;
    const double C25971 = C47018 * C432;
    const double C31533 = C15769 * C432;
    const double C31518 = C47358 * C432;
    const double C10560 = C47358 * C436;
    const double C10835 = C4575 * C436;
    const double C26243 = C47018 * C436;
    const double C31526 = C47358 * C436;
    const double C31801 = C15769 * C436;
    const double C5403 = C4575 * C819;
    const double C5396 = C47358 * C819;
    const double C16597 = C15769 * C819;
    const double C16590 = C47358 * C819;
    const double C22003 = C47018 * C819;
    const double C43820 = C27876 * C116;
    const double C43929 = C43927 + C43928;
    const double C43031 = C43028 + C43029;
    const double C5642 =
        (4 * (2 * C46751 + C46321 * C46839 + C46752 * ae) +
         C46321 * (3 * C46839 +
                   C46321 * (2 * C46831 +
                             C46321 * (C46379 +
                                       C46321 * (C46321 * C46322 * C46391 +
                                                 C46459 * ae) +
                                       C46321 * C46459 * ae) +
                             C46833 * ae) +
                   C46838 * ae) +
         (3 * C46752 + C46321 * C46838) * ae) /
        C46271;
    const double C5812 =
        (2 * C46751 + C46321 * C46839 + C46752 * ae +
         (2 * C46831 +
          C46321 * (C46379 + C46321 * (C46321 * C46322 * C46391 + C46459 * ae) +
                    C46321 * C46459 * ae) +
          C46833 * ae) *
             C46522) /
        C46271;
    const double C6314 =
        (C46491 * (3 * C46839 +
                   C46321 * (2 * C46831 +
                             C46321 * (C46379 +
                                       C46321 * (C46321 * C46322 * C46391 +
                                                 C46459 * ae) +
                                       C46321 * C46459 * ae) +
                             C46833 * ae) +
                   C46838 * ae)) /
        C46271;
    const double C7174 =
        (2 * C46491 * C46839 +
         C46491 * (C46839 +
                   (C46379 + C46321 * (C46321 * C46322 * C46391 + C46459 * ae) +
                    C46321 * C46459 * ae) *
                       C46522)) /
        C46271;
    const double C46448 = C46432 + C46447;
    const double C46519 = C46516 + C46517;
    const double C1182 =
        (C46491 * C46374 + ae * C46491 * C46515 +
         C46321 * (ae * C46491 * C46446 + C46321 * C46491 * C46398)) /
        C46273;
    const double C1185 =
        (C46374 + C46398 * C46522 + ae * (C46515 + C46321 * C46471 * C46522) +
         C46321 * (ae * (C46446 + C46471 * C46522) +
                   C46321 * (C46398 + (C46390 + be * C46322 * C46391 +
                                       C46322 * (be * C46391 +
                                                 C46322 * std::pow(C46324, 8) *
                                                     bs[8] * C46333)) *
                                          C46522))) /
        C46273;
    const double C1161 = (C46321 * C46429 + C46515 * C46522) / C46271;
    const double C2227 =
        (2 * C46491 * C46515 + C46491 * (C46515 + C46321 * C46471 * C46522)) /
        C46271;
    const double C5977 = C47358 * C1036;
    const double C17155 = C47358 * C1036;
    const double C21519 = C47018 * C1036;
    const double C6909 = C47358 * C1179;
    const double C18071 = C47358 * C1179;
    const double C25977 = C47018 * C1179;
    const double C5973 = C47358 * C1024;
    const double C17151 = C47358 * C1024;
    const double C21517 = C47018 * C1024;
    const double C6175 = C47358 * C1167;
    const double C17353 = C47358 * C1167;
    const double C22007 = C47018 * C1167;
    const double C12589 = C47358 * C1852;
    const double C33547 = C47358 * C1852;
    const double C42386 = C47018 * C1852;
    const double C46889 = C46870 + C46887;
    const double C137 = (5 * (3 * C46355 + C46322 * C46375) +
                         C46322 * (4 * C46375 + C46322 * C46403)) /
                        C46271;
    const double C290 =
        (3 * C46355 + C46322 * C46375 +
         C46321 * (C46321 * C46403 + C46674 * ae) + C46321 * C46674 * ae) /
        C46271;
    const double C443 =
        (3 * C46355 + C46322 * C46375 + C46403 * C46522) / C46271;
    const double C560 = (C46321 * (4 * C46375 + C46322 * C46403) +
                         (4 * C46669 + C46322 * C46674) * ae) /
                        C46271;
    const double C664 = (C46491 * (4 * C46375 + C46322 * C46403)) / C46271;
    const double C826 = (C46491 * (C46321 * C46403 + C46674 * ae)) / C46271;
    const double C144 =
        (5 * (3 * C46374 + be * C46375 + C46322 * C46402) +
         be * (4 * C46375 + C46322 * C46403) +
         C46322 *
             (4 * C46402 + be * C46403 +
              C46322 *
                  (3 * C46398 + be * C46399 +
                   C46322 * (2 * C46394 + be * C46395 +
                             C46322 * (C46390 + be * C46322 * C46391 +
                                       C46322 * (be * C46391 +
                                                 C46322 * std::pow(C46324, 8) *
                                                     bs[8] * C46333)))))) /
        C46273;
    const double C451 = (2 * C46354 + be * C46355 + C46322 * C46374 +
                         C46402 * std::pow(zP - zQ, 2)) /
                        C46273;
    const double C452 =
        ((zP - zQ) * (3 * C46374 + be * C46375 + C46322 * C46402)) / C46273;
    const double C453 =
        (3 * C46374 + be * C46375 + C46322 * C46402 +
         (3 * C46398 + be * C46399 +
          C46322 *
              (2 * C46394 + be * C46395 +
               C46322 * (C46390 + be * C46322 * C46391 +
                         C46322 * (be * C46391 + C46322 * std::pow(C46324, 8) *
                                                     bs[8] * C46333)))) *
             std::pow(zP - zQ, 2)) /
        C46273;
    const double C665 =
        ((zP - zQ) *
         (4 * C46402 + be * C46403 +
          C46322 * (3 * C46398 + be * C46399 +
                    C46322 * (2 * C46394 + be * C46395 +
                              C46322 * (C46390 + be * C46322 * C46391 +
                                        C46322 * (be * C46391 +
                                                  C46322 * std::pow(C46324, 8) *
                                                      bs[8] * C46333)))))) /
        C46273;
    const double C2123 =
        (2 * C46491 * C46402 +
         C46491 * (C46402 + (2 * C46394 + be * C46395 +
                             C46322 * (C46390 + be * C46322 * C46391 +
                                       C46322 * (be * C46391 +
                                                 C46322 * std::pow(C46324, 8) *
                                                     bs[8] * C46333))) *
                                C46522)) /
        C46273;
    const double C46473 = C46453 + C46472;
    const double C46520 = C46446 + C46518;
    const double C5644 =
        (4 * (2 * C46512 + ae * C46513 + C46321 * C46576) +
         ae * (3 * C46513 + C46321 * C46577) +
         C46321 *
             (3 * C46576 + ae * C46577 +
              C46321 *
                  (2 * C46570 + ae * C46572 +
                   C46321 * (C46394 + ae * C46321 * C46464 +
                             C46321 * (ae * C46464 +
                                       C46321 * (be * C46391 +
                                                 C46322 * std::pow(C46324, 8) *
                                                     bs[8] * C46333)))))) /
        C46273;
    const double C6316 =
        (3 * (C46536 + ae * C46491 * C46565 + C46321 * C46595) +
         ae * C46491 * C46577 +
         C46321 * (2 * C46595 + ae * C46491 * C46572 +
                   C46321 * (C46592 + ae * C46491 * C46321 * C46464 +
                             C46321 * (ae * C46491 * C46464 +
                                       C46321 * C46491 *
                                           (be * C46391 +
                                            C46322 * std::pow(C46324, 8) *
                                                bs[8] * C46333))))) /
        C46273;
    const double C5640 = (4 * (2 * C46508 + C46321 * C46513) +
                          C46321 * (3 * C46513 + C46321 * C46577)) /
                         C46271;
    const double C5810 =
        (2 * C46508 + C46321 * C46513 + C46577 * C46522) / C46271;
    const double C6312 = (C46491 * (3 * C46513 + C46321 * C46577)) / C46271;
    const double C22184 =
        (5 * (3 * C46562 + ae * C46563 + C46321 * C46622) +
         ae * (4 * C46563 + C46321 * C46623) +
         C46321 *
             (4 * C46622 + ae * C46623 +
              C46321 *
                  (3 * C46618 + ae * C46619 +
                   C46321 * (2 * C46612 + ae * C46614 +
                             C46321 * (C46390 + ae * C46321 * C46457 +
                                       C46321 * (ae * C46457 +
                                                 C46321 * std::pow(C46324, 8) *
                                                     bs[8] * C46333)))))) /
        C46273;
    const double C22688 =
        (4 * (2 * C46589 + ae * C46491 * C46558 + C46321 * C46642) +
         ae * C46491 * C46623 +
         C46321 * (3 * C46642 + ae * C46491 * C46619 +
                   C46321 * (2 * C46640 + ae * C46491 * C46614 +
                             C46321 * (C46635 + ae * C46491 * C46321 * C46457 +
                                       C46321 * (ae * C46491 * C46457 +
                                                 C46321 * C46491 *
                                                     std::pow(C46324, 8) *
                                                     bs[8] * C46333))))) /
        C46273;
    const double C22182 = (5 * (3 * C46506 + C46321 * C46563) +
                           C46321 * (4 * C46563 + C46321 * C46623)) /
                          C46271;
    const double C22308 =
        (3 * C46506 + C46321 * C46563 + C46623 * C46522) / C46271;
    const double C22686 = (C46491 * (4 * C46563 + C46321 * C46623)) / C46271;
    const double C47416 = C47360 + C47408;
    const double C555 = C47395 - (C47059 * C47041) / C47036;
    const double C111 = C47396 / C47040 - C47057 / C47367;
    const double C47409 = C47363 + C47395;
    const double C47417 = C47376 + C47412;
    const double C1285 = C47402 - (C47139 * C47128) / C47036;
    const double C1013 = C47403 / C47040 - C47137 / C47367;
    const double C47413 = C47378 + C47402;
    const double C47418 = C47382 + C47414;
    const double C2117 = C47405 - (C47181 * C47170) / C47036;
    const double C1842 = C47406 / C47040 - C47179 / C47367;
    const double C47415 = C47384 + C47405;
    const double C42394 = C42384 * C47279;
    const double C21525 = C21514 - C21515;
    const double C26451 = C22004 - C22005;
    const double C26449 = C22005 - C22004;
    const double C21524 = C21512 - C21513;
    const double C42383 = C25971 - C25970;
    const double C26450 = C22002 - C22003;
    const double C26448 = C22003 - C22002;
    const double C43822 = C43820 + C43821;
    const double C46449 = C46448 + C46443;
    const double C6179 = C47358 * C1182;
    const double C17357 = C47358 * C1182;
    const double C22009 = C47018 * C1182;
    const double C6905 = C47358 * C1161;
    const double C18067 = C47358 * C1161;
    const double C25975 = C47018 * C1161;
    const double C46890 = C46889 + C46874;
    const double C10573 = C47358 * C451;
    const double C31539 = C47358 * C451;
    const double C42597 = C47018 * C451;
    const double C10841 = C47358 * C452;
    const double C31807 = C47358 * C452;
    const double C46474 = C46473 + C46465;
    const double C1039 =
        (3 * (C46374 + ae * C46515 + C46321 * C46519) +
         ae * (2 * C46515 + C46321 * C46520) +
         C46321 *
             (2 * C46519 + ae * C46520 +
              C46321 *
                  (C46398 + ae * C46321 * C46471 +
                   C46321 * (ae * C46471 +
                             C46321 * (C46390 + be * C46322 * C46391 +
                                       C46322 * (be * C46391 +
                                                 C46322 * std::pow(C46324, 8) *
                                                     bs[8] * C46333)))))) /
        C46273;
    const double C1553 =
        (2 * (ae * C46491 * C46446 + C46321 * C46538) + ae * C46491 * C46520 +
         C46321 * (C46538 + ae * C46491 * C46321 * C46471 +
                   C46321 * (ae * C46491 * C46471 +
                             C46321 * C46491 *
                                 (C46390 + be * C46322 * C46391 +
                                  C46322 * (be * C46391 +
                                            C46322 * std::pow(C46324, 8) *
                                                bs[8] * C46333))))) /
        C46273;
    const double C1030 = (3 * (C46429 + C46446 * C46503) +
                          C46321 * (2 * C46515 + C46321 * C46520)) /
                         C46271;
    const double C1173 = (C46429 + C46446 * C46503 + C46520 * C46522) / C46271;
    const double C1547 = (C46491 * (2 * C46515 + C46321 * C46520)) / C46271;
    const double C108 =
        (C47407 + 2 * C47050) / C47040 - (C47416 * C47041) / C47036;
    const double C109 =
        (C47394 + 2 * C47059 + C47416) / C47040 - (C47409 * C47041) / C47036;
    const double C110 = (C47365 + C47056 / C47036 + C47409) / C47040 -
                        (C47396 * C47041) / C47036;
    const double C1010 =
        (C47410 + 2 * C47132) / C47040 - (C47417 * C47128) / C47036;
    const double C1011 =
        (C47398 + 2 * C47139 + C47417) / C47040 - (C47413 * C47128) / C47036;
    const double C1012 = (C47371 + C47136 / C47036 + C47413) / C47040 -
                         (C47403 * C47128) / C47036;
    const double C1839 =
        (C47411 + 2 * C47174) / C47040 - (C47418 * C47170) / C47036;
    const double C1840 =
        (C47400 + 2 * C47181 + C47418) / C47040 - (C47415 * C47170) / C47036;
    const double C1841 = (C47374 + C47178 / C47036 + C47415) / C47040 -
                         (C47406 * C47170) / C47036;
    const double C42393 = C42383 * C116;
    const double C298 =
        (2 * C46354 + be * C46355 + C46322 * C46374 + ae * C46321 * C46449 +
         C46321 * (ae * C46449 + C46321 * C46402)) /
        C46273;
    const double C299 =
        (ae * (3 * C46429 + C46322 * C46449 +
               (2 * C46423 + C46322 * C46441) * be) +
         C46321 * (3 * C46374 + be * C46375 + C46322 * C46402)) /
        C46273;
    const double C830 =
        (ae * C46491 * C46449 + C46321 * C46491 * C46402) / C46273;
    const double C134 = (4 * (2 * C46417 + C46322 * C46429 + C46664 * be) +
                         C46322 * (3 * C46429 + C46322 * C46449 + C46669 * be) +
                         (3 * C46664 + C46322 * C46669) * be) /
                        C46271;
    const double C285 =
        (2 * C46417 + C46322 * C46429 + C46664 * be + C46449 * C46503) / C46271;
    const double C287 =
        (C46321 * (3 * C46429 + C46322 * C46449 + C46669 * be)) / C46271;
    const double C438 =
        (2 * C46417 + C46322 * C46429 + C46664 * be + C46449 * C46522) / C46271;
    const double C440 =
        (C46491 * (3 * C46429 + C46322 * C46449 + C46669 * be)) / C46271;
    const double C823 = (C46491 * C46321 * C46449) / C46271;
    const double C22183 =
        (5 * (3 * C46825 + C46321 * C46890 + C46824 * ae) +
         C46321 * (4 * C46890 +
                   C46321 * (3 * C46885 +
                             C46321 * (2 * C46877 +
                                       C46321 * (C46367 +
                                                 C46321 * (C46321 * C46391 +
                                                           C46455 * ae) +
                                                 C46321 * C46455 * ae) +
                                       C46879 * ae) +
                             C46884 * ae) +
                   C46888 * ae) +
         (4 * C46824 + C46321 * C46888) * ae) /
        C46271;
    const double C22309 =
        (3 * C46825 + C46321 * C46890 + C46824 * ae +
         (3 * C46885 +
          C46321 *
              (2 * C46877 +
               C46321 * (C46367 + C46321 * (C46321 * C46391 + C46455 * ae) +
                         C46321 * C46455 * ae) +
               C46879 * ae) +
          C46884 * ae) *
             C46522) /
        C46271;
    const double C22687 =
        (C46491 *
         (4 * C46890 +
          C46321 *
              (3 * C46885 +
               C46321 * (2 * C46877 +
                         C46321 * (C46367 +
                                   C46321 * (C46321 * C46391 + C46455 * ae) +
                                   C46321 * C46455 * ae) +
                         C46879 * ae) +
               C46884 * ae) +
          C46888 * ae)) /
        C46271;
    const double C23333 =
        (2 * C46491 * C46890 +
         C46491 *
             (C46890 +
              (2 * C46877 +
               C46321 * (C46367 + C46321 * (C46321 * C46391 + C46455 * ae) +
                         C46321 * C46455 * ae) +
               C46879 * ae) *
                  C46522)) /
        C46271;
    const double C46475 = C46322 * C46474;
    const double C1293 =
        (2 * (ae * C46449 + C46321 * C46402) + ae * (C46449 + C46474 * C46503) +
         C46321 *
             (C46402 + ae * C46321 * C46474 +
              C46321 *
                  (ae * C46474 +
                   C46321 * (2 * C46394 + be * C46395 +
                             C46322 * (C46390 + be * C46322 * C46391 +
                                       C46322 * (be * C46391 +
                                                 C46322 * std::pow(C46324, 8) *
                                                     bs[8] * C46333)))))) /
        C46273;
    const double C1443 =
        (C46491 * C46402 + ae * C46491 * C46321 * C46474 +
         C46321 * (ae * C46491 * C46474 +
                   C46321 * C46491 *
                       (2 * C46394 + be * C46395 +
                        C46322 * (C46390 + be * C46322 * C46391 +
                                  C46322 * (be * C46391 +
                                            C46322 * std::pow(C46324, 8) *
                                                bs[8] * C46333))))) /
        C46273;
    const double C2017 =
        (ae * (C46449 + C46474 * C46522) +
         C46321 * (C46402 + (2 * C46394 + be * C46395 +
                             C46322 * (C46390 + be * C46322 * C46391 +
                                       C46322 * (be * C46391 +
                                                 C46322 * std::pow(C46324, 8) *
                                                     bs[8] * C46333))) *
                                C46522)) /
        C46273;
    const double C1291 =
        (2 * C46321 * C46449 + C46321 * (C46449 + C46474 * C46503)) / C46271;
    const double C1441 = (C46491 * (C46449 + C46474 * C46503)) / C46271;
    const double C2015 = (C46321 * C46449 + C46321 * C46474 * C46522) / C46271;
    const double C2121 =
        (2 * C46491 * C46449 + C46491 * (C46449 + C46474 * C46522)) / C46271;
    const double C42397 = C42393 + C42394;
    const double C4777 = C47358 * C298;
    const double C15971 = C47358 * C298;
    const double C21741 = C47018 * C298;
    const double C5061 = C47358 * C299;
    const double C16255 = C47358 * C299;
    const double C5409 = C47358 * C830;
    const double C16603 = C47358 * C830;
    const double C26111 = C47018 * C830;
    const double C4773 = C47358 * C285;
    const double C15967 = C47358 * C285;
    const double C21739 = C47018 * C285;
    const double C5057 = C47358 * C287;
    const double C16251 = C47358 * C287;
    const double C10569 = C47358 * C438;
    const double C31535 = C47358 * C438;
    const double C42595 = C47018 * C438;
    const double C10837 = C47358 * C440;
    const double C31803 = C47358 * C440;
    const double C5405 = C47358 * C823;
    const double C16599 = C47358 * C823;
    const double C26109 = C47018 * C823;
    const double C46476 = C46452 + C46475;
    const double C46477 = C46476 + C46470;
    const double C300 =
        (3 * C46374 + be * C46375 + C46322 * C46402 + ae * C46321 * C46477 +
         C46321 *
             (ae * C46477 +
              C46321 *
                  (3 * C46398 + be * C46399 +
                   C46322 * (2 * C46394 + be * C46395 +
                             C46322 * (C46390 + be * C46322 * C46391 +
                                       C46322 * (be * C46391 +
                                                 C46322 * std::pow(C46324, 8) *
                                                     bs[8] * C46333)))))) /
        C46273;
    const double C561 =
        (ae * (4 * C46449 + C46322 * C46477 +
               (3 * C46441 + C46322 * C46468) * be) +
         C46321 *
             (4 * C46402 + be * C46403 +
              C46322 *
                  (3 * C46398 + be * C46399 +
                   C46322 * (2 * C46394 + be * C46395 +
                             C46322 * (C46390 + be * C46322 * C46391 +
                                       C46322 * (be * C46391 +
                                                 C46322 * std::pow(C46324, 8) *
                                                     bs[8] * C46333)))))) /
        C46273;
    const double C831 =
        (ae * C46491 * C46477 +
         C46321 * C46491 *
             (3 * C46398 + be * C46399 +
              C46322 * (2 * C46394 + be * C46395 +
                        C46322 * (C46390 + be * C46322 * C46391 +
                                  C46322 * (be * C46391 +
                                            C46322 * std::pow(C46324, 8) *
                                                bs[8] * C46333))))) /
        C46273;
    const double C136 = (5 * (3 * C46429 + C46322 * C46449 + C46669 * be) +
                         C46322 * (4 * C46449 + C46322 * C46477 + C46674 * be) +
                         (4 * C46669 + C46322 * C46674) * be) /
                        C46271;
    const double C289 =
        (3 * C46429 + C46322 * C46449 + C46669 * be + C46477 * C46503) / C46271;
    const double C442 =
        (3 * C46429 + C46322 * C46449 + C46669 * be + C46477 * C46522) / C46271;
    const double C559 =
        (C46321 * (4 * C46449 + C46322 * C46477 + C46674 * be)) / C46271;
    const double C663 =
        (C46491 * (4 * C46449 + C46322 * C46477 + C46674 * be)) / C46271;
    const double C825 = (C46491 * C46321 * C46477) / C46271;
    d2ee[0] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                ((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
                    C103 * C126 - C115 * C119) *
                       C116 +
                   (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
                    C103 * C140 - C115 * C129) *
                       C47279) *
                      C47294 * C47091 * C47132 +
                  ((C113 * C261 - C101 * C271 + C114 * C262 - C102 * C272 +
                    C115 * C263 - C103 * C273) *
                       C116 +
                   (C113 * C274 - C101 * C291 + C114 * C275 - C102 * C292 +
                    C115 * C276 - C103 * C293) *
                       C47279) *
                      C47294 * C47091 * C47139 +
                  ((C101 * C277 - C113 * C264 + C102 * C278 - C114 * C265 +
                    C103 * C279 - C115 * C266) *
                       C116 +
                   (C101 * C294 - C113 * C280 + C102 * C295 - C114 * C281 +
                    C103 * C296 - C115 * C282) *
                       C47279) *
                      C47294 * C47091 * C2700) *
                     C47050 +
                 (((C113 * C118 - C101 * C125 + C114 * C119 - C102 * C126 +
                    C115 * C120 - C103 * C130) *
                       C116 +
                   (C113 * C128 - C101 * C139 + C114 * C129 - C102 * C140 +
                    C115 * C131 - C103 * C141) *
                       C47279) *
                      C47294 * C47091 * C47132 +
                  ((C101 * C272 - C113 * C262 + C102 * C273 - C114 * C263 +
                    C103 * C283 - C115 * C267) *
                       C116 +
                   (C101 * C292 - C113 * C275 + C102 * C293 - C114 * C276 +
                    C103 * C297 - C115 * C284) *
                       C47279) *
                      C47294 * C47091 * C47139 +
                  ((C113 * C265 - C101 * C278 + C114 * C266 - C102 * C279 +
                    C115 * C268 - C103 * C285) *
                       C116 +
                   (C113 * C281 - C101 * C295 + C114 * C282 - C102 * C296 +
                    C115 * C286 - C103 * C298) *
                       C47279) *
                      C47294 * C47091 * C2700) *
                     C47059 +
                 (((C101 * C126 - C113 * C119 + C102 * C130 - C114 * C120 +
                    C103 * C132 - C115 * C121) *
                       C116 +
                   (C101 * C140 - C113 * C129 + C102 * C141 - C114 * C131 +
                    C103 * C142 - C115 * C133) *
                       C47279) *
                      C47294 * C47091 * C47132 +
                  ((C113 * C263 - C101 * C273 + C114 * C267 - C102 * C283 +
                    C115 * C269 - C103 * C287) *
                       C116 +
                   (C113 * C276 - C101 * C293 + C114 * C284 - C102 * C297 +
                    C115 * C288 - C103 * C299) *
                       C47279) *
                      C47294 * C47091 * C47139 +
                  ((C101 * C279 - C113 * C266 + C102 * C285 - C114 * C268 +
                    C103 * C289 - C115 * C270) *
                       C116 +
                   (C101 * C296 - C113 * C282 + C102 * C298 - C114 * C286 +
                    C103 * C300 - C115 * C290) *
                       C47279) *
                      C47294 * C47091 * C2700) *
                     C2703)) /
               (p * q * std::sqrt(p + q));
    d2ee[1] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                (((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
                     C103 * C126 - C115 * C119) *
                        C116 +
                    (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
                     C103 * C140 - C115 * C129) *
                        C47279) *
                       C47294 * C47340 +
                   ((C113 * C414 - C101 * C424 + C114 * C415 - C102 * C425 +
                     C115 * C416 - C103 * C426) *
                        C116 +
                    (C113 * C427 - C101 * C444 + C114 * C428 - C102 * C445 +
                     C115 * C429 - C103 * C446) *
                        C47279) *
                       C47294 * C47178) *
                      C47132 +
                  (((C113 * C261 - C101 * C271 + C114 * C262 - C102 * C272 +
                     C115 * C263 - C103 * C273) *
                        C116 +
                    (C113 * C274 - C101 * C291 + C114 * C275 - C102 * C292 +
                     C115 * C276 - C103 * C293) *
                        C47279) *
                       C47294 * C47340 +
                   ((C101 * C817 - C113 * C812 + C102 * C818 - C114 * C813 +
                     C103 * C819 - C115 * C814) *
                        C116 +
                    (C101 * C827 - C113 * C820 + C102 * C828 - C114 * C821 +
                     C103 * C829 - C115 * C822) *
                        C47279) *
                       C47294 * C47178) *
                      C47139 +
                  (((C101 * C277 - C113 * C264 + C102 * C278 - C114 * C265 +
                     C103 * C279 - C115 * C266) *
                        C116 +
                    (C101 * C294 - C113 * C280 + C102 * C295 - C114 * C281 +
                     C103 * C296 - C115 * C282) *
                        C47279) *
                       C47294 * C47340 +
                   ((C113 * C1153 - C101 * C1165 + C114 * C1154 - C102 * C1166 +
                     C115 * C1155 - C103 * C1167) *
                        C116 +
                    (C113 * C1168 - C101 * C1180 + C114 * C1169 - C102 * C1181 +
                     C115 * C1170 - C103 * C1182) *
                        C47279) *
                       C47294 * C47178) *
                      C2700) *
                     C2440 +
                 ((((C113 * C118 - C101 * C125 + C114 * C119 - C102 * C126 +
                     C115 * C120 - C103 * C130) *
                        C116 +
                    (C113 * C128 - C101 * C139 + C114 * C129 - C102 * C140 +
                     C115 * C131 - C103 * C141) *
                        C47279) *
                       C47294 * C47340 +
                   ((C101 * C425 - C113 * C415 + C102 * C426 - C114 * C416 +
                     C103 * C436 - C115 * C420) *
                        C116 +
                    (C101 * C445 - C113 * C428 + C102 * C446 - C114 * C429 +
                     C103 * C450 - C115 * C437) *
                        C47279) *
                       C47294 * C47178) *
                      C47132 +
                  (((C101 * C272 - C113 * C262 + C102 * C273 - C114 * C263 +
                     C103 * C283 - C115 * C267) *
                        C116 +
                    (C101 * C292 - C113 * C275 + C102 * C293 - C114 * C276 +
                     C103 * C297 - C115 * C284) *
                        C47279) *
                       C47294 * C47340 +
                   ((C113 * C813 - C101 * C818 + C114 * C814 - C102 * C819 +
                     C115 * C815 - C103 * C823) *
                        C116 +
                    (C113 * C821 - C101 * C828 + C114 * C822 - C102 * C829 +
                     C115 * C824 - C103 * C830) *
                        C47279) *
                       C47294 * C47178) *
                      C47139 +
                  (((C113 * C265 - C101 * C278 + C114 * C266 - C102 * C279 +
                     C115 * C268 - C103 * C285) *
                        C116 +
                    (C113 * C281 - C101 * C295 + C114 * C282 - C102 * C296 +
                     C115 * C286 - C103 * C298) *
                        C47279) *
                       C47294 * C47340 +
                   ((C101 * C1166 - C113 * C1154 + C102 * C1167 - C114 * C1155 +
                     C103 * C1441 - C115 * C1440) *
                        C116 +
                    (C101 * C1181 - C113 * C1169 + C102 * C1182 - C114 * C1170 +
                     C103 * C1443 - C115 * C1442) *
                        C47279) *
                       C47294 * C47178) *
                      C2700) *
                     C47056)) /
               (p * q * std::sqrt(p + q));
    d2ee[2] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                ((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
                    C103 * C126 - C115 * C119) *
                       C116 +
                   (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
                    C103 * C140 - C115 * C129) *
                       C47279) *
                      C47294 * C47091 * C47417 +
                  ((C113 * C261 - C101 * C271 + C114 * C262 - C102 * C272 +
                    C115 * C263 - C103 * C273) *
                       C116 +
                   (C113 * C274 - C101 * C291 + C114 * C275 - C102 * C292 +
                    C115 * C276 - C103 * C293) *
                       C47279) *
                      C47294 * C47091 * C47413 +
                  ((C101 * C277 - C113 * C264 + C102 * C278 - C114 * C265 +
                    C103 * C279 - C115 * C266) *
                       C116 +
                   (C101 * C294 - C113 * C280 + C102 * C295 - C114 * C281 +
                    C103 * C296 - C115 * C282) *
                       C47279) *
                      C47294 * C47091 * C47403 +
                  ((C113 * C1016 - C101 * C1022 + C114 * C1017 - C102 * C1023 +
                    C115 * C1018 - C103 * C1024) *
                       C116 +
                   (C113 * C1025 - C101 * C1034 + C114 * C1026 - C102 * C1035 +
                    C115 * C1027 - C103 * C1036) *
                       C47279) *
                      C47294 * C47091 * C47381) *
                     C2440 +
                 (((C113 * C118 - C101 * C125 + C114 * C119 - C102 * C126 +
                    C115 * C120 - C103 * C130) *
                       C116 +
                   (C113 * C128 - C101 * C139 + C114 * C129 - C102 * C140 +
                    C115 * C131 - C103 * C141) *
                       C47279) *
                      C47294 * C47091 * C47417 +
                  ((C101 * C272 - C113 * C262 + C102 * C273 - C114 * C263 +
                    C103 * C283 - C115 * C267) *
                       C116 +
                   (C101 * C292 - C113 * C275 + C102 * C293 - C114 * C276 +
                    C103 * C297 - C115 * C284) *
                       C47279) *
                      C47294 * C47091 * C47413 +
                  ((C113 * C265 - C101 * C278 + C114 * C266 - C102 * C279 +
                    C115 * C268 - C103 * C285) *
                       C116 +
                   (C113 * C281 - C101 * C295 + C114 * C282 - C102 * C296 +
                    C115 * C286 - C103 * C298) *
                       C47279) *
                      C47294 * C47091 * C47403 +
                  ((C101 * C1023 - C113 * C1017 + C102 * C1024 - C114 * C1018 +
                    C103 * C1291 - C115 * C1290) *
                       C116 +
                   (C101 * C1035 - C113 * C1026 + C102 * C1036 - C114 * C1027 +
                    C103 * C1293 - C115 * C1292) *
                       C47279) *
                      C47294 * C47091 * C47381) *
                     C47056)) /
                   (p * q * std::sqrt(p + q)) -
               (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                ((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
                    C103 * C126 - C115 * C119) *
                       C116 +
                   (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
                    C103 * C140 - C115 * C129) *
                       C47279) *
                      C47294 * C47091 * C2332 +
                  ((C113 * C261 - C101 * C271 + C114 * C262 - C102 * C272 +
                    C115 * C263 - C103 * C273) *
                       C116 +
                   (C113 * C274 - C101 * C291 + C114 * C275 - C102 * C292 +
                    C115 * C276 - C103 * C293) *
                       C47279) *
                      C47294 * C47091 * C47136) *
                     C47416 +
                 (((C113 * C118 - C101 * C125 + C114 * C119 - C102 * C126 +
                    C115 * C120 - C103 * C130) *
                       C116 +
                   (C113 * C128 - C101 * C139 + C114 * C129 - C102 * C140 +
                    C115 * C131 - C103 * C141) *
                       C47279) *
                      C47294 * C47091 * C2332 +
                  ((C101 * C272 - C113 * C262 + C102 * C273 - C114 * C263 +
                    C103 * C283 - C115 * C267) *
                       C116 +
                   (C101 * C292 - C113 * C275 + C102 * C293 - C114 * C276 +
                    C103 * C297 - C115 * C284) *
                       C47279) *
                      C47294 * C47091 * C47136) *
                     C47409 +
                 (((C101 * C126 - C113 * C119 + C102 * C130 - C114 * C120 +
                    C103 * C132 - C115 * C121) *
                       C116 +
                   (C101 * C140 - C113 * C129 + C102 * C141 - C114 * C131 +
                    C103 * C142 - C115 * C133) *
                       C47279) *
                      C47294 * C47091 * C2332 +
                  ((C113 * C263 - C101 * C273 + C114 * C267 - C102 * C283 +
                    C115 * C269 - C103 * C287) *
                       C116 +
                   (C113 * C276 - C101 * C293 + C114 * C284 - C102 * C297 +
                    C115 * C288 - C103 * C299) *
                       C47279) *
                      C47294 * C47091 * C47136) *
                     C47396 +
                 (((C113 * C120 - C101 * C130 + C114 * C121 - C102 * C132 +
                    C115 * C122 - C103 * C134) *
                       C116 +
                   (C113 * C131 - C101 * C141 + C114 * C133 - C102 * C142 +
                    C115 * C135 - C103 * C143) *
                       C47279) *
                      C47294 * C47091 * C2332 +
                  ((C101 * C283 - C113 * C267 + C102 * C287 - C114 * C269 +
                    C103 * C559 - C115 * C558) *
                       C116 +
                   (C101 * C297 - C113 * C284 + C102 * C299 - C114 * C288 +
                    C103 * C561 - C115 * C560) *
                       C47279) *
                      C47294 * C47091 * C47136) *
                     C47375)) /
                   (p * q * std::sqrt(p + q)) +
               (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                (((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
                     C103 * C126 - C115 * C119) *
                        C116 +
                    (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
                     C103 * C140 - C115 * C129) *
                        C47279) *
                       C47294 * C47411 +
                   ((C113 * C414 - C101 * C424 + C114 * C415 - C102 * C425 +
                     C115 * C416 - C103 * C426) *
                        C116 +
                    (C113 * C427 - C101 * C444 + C114 * C428 - C102 * C445 +
                     C115 * C429 - C103 * C446) *
                        C47279) *
                       C47294 * C47400 +
                   ((C101 * C430 - C113 * C417 + C102 * C431 - C114 * C418 +
                     C103 * C432 - C115 * C419) *
                        C116 +
                    (C101 * C447 - C113 * C433 + C102 * C448 - C114 * C434 +
                     C103 * C449 - C115 * C435) *
                        C47279) *
                       C47294 * C47374) *
                      C2332 +
                  (((C113 * C261 - C101 * C271 + C114 * C262 - C102 * C272 +
                     C115 * C263 - C103 * C273) *
                        C116 +
                    (C113 * C274 - C101 * C291 + C114 * C275 - C102 * C292 +
                     C115 * C276 - C103 * C293) *
                        C47279) *
                       C47294 * C47411 +
                   ((C101 * C817 - C113 * C812 + C102 * C818 - C114 * C813 +
                     C103 * C819 - C115 * C814) *
                        C116 +
                    (C101 * C827 - C113 * C820 + C102 * C828 - C114 * C821 +
                     C103 * C829 - C115 * C822) *
                        C47279) *
                       C47294 * C47400 +
                   ((C113 * C1150 - C101 * C1159 + C114 * C1151 - C102 * C1160 +
                     C115 * C1152 - C103 * C1161) *
                        C116 +
                    (C113 * C1162 - C101 * C1177 + C114 * C1163 - C102 * C1178 +
                     C115 * C1164 - C103 * C1179) *
                        C47279) *
                       C47294 * C47374) *
                      C47136) *
                     C2440 +
                 ((((C113 * C118 - C101 * C125 + C114 * C119 - C102 * C126 +
                     C115 * C120 - C103 * C130) *
                        C116 +
                    (C113 * C128 - C101 * C139 + C114 * C129 - C102 * C140 +
                     C115 * C131 - C103 * C141) *
                        C47279) *
                       C47294 * C47411 +
                   ((C101 * C425 - C113 * C415 + C102 * C426 - C114 * C416 +
                     C103 * C436 - C115 * C420) *
                        C116 +
                    (C101 * C445 - C113 * C428 + C102 * C446 - C114 * C429 +
                     C103 * C450 - C115 * C437) *
                        C47279) *
                       C47294 * C47400 +
                   ((C113 * C418 - C101 * C431 + C114 * C419 - C102 * C432 +
                     C115 * C421 - C103 * C438) *
                        C116 +
                    (C113 * C434 - C101 * C448 + C114 * C435 - C102 * C449 +
                     C115 * C439 - C103 * C451) *
                        C47279) *
                       C47294 * C47374) *
                      C2332 +
                  (((C101 * C272 - C113 * C262 + C102 * C273 - C114 * C263 +
                     C103 * C283 - C115 * C267) *
                        C116 +
                    (C101 * C292 - C113 * C275 + C102 * C293 - C114 * C276 +
                     C103 * C297 - C115 * C284) *
                        C47279) *
                       C47294 * C47411 +
                   ((C113 * C813 - C101 * C818 + C114 * C814 - C102 * C819 +
                     C115 * C815 - C103 * C823) *
                        C116 +
                    (C113 * C821 - C101 * C828 + C114 * C822 - C102 * C829 +
                     C115 * C824 - C103 * C830) *
                        C47279) *
                       C47294 * C47400 +
                   ((C101 * C1160 - C113 * C1151 + C102 * C1161 - C114 * C1152 +
                     C103 * C2015 - C115 * C2014) *
                        C116 +
                    (C101 * C1178 - C113 * C1163 + C102 * C1179 - C114 * C1164 +
                     C103 * C2017 - C115 * C2016) *
                        C47279) *
                       C47294 * C47374) *
                      C47136) *
                     C47056)) /
                   (p * q * std::sqrt(p + q));
    d2ee[3] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                (((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
                     C103 * C126 - C115 * C119) *
                        C116 +
                    (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
                     C103 * C140 - C115 * C129) *
                        C47279) *
                       C47294 * C47340 +
                   ((C113 * C414 - C101 * C424 + C114 * C415 - C102 * C425 +
                     C115 * C416 - C103 * C426) *
                        C116 +
                    (C113 * C427 - C101 * C444 + C114 * C428 - C102 * C445 +
                     C115 * C429 - C103 * C446) *
                        C47279) *
                       C47294 * C47178) *
                      C2332 +
                  (((C113 * C261 - C101 * C271 + C114 * C262 - C102 * C272 +
                     C115 * C263 - C103 * C273) *
                        C116 +
                    (C113 * C274 - C101 * C291 + C114 * C275 - C102 * C292 +
                     C115 * C276 - C103 * C293) *
                        C47279) *
                       C47294 * C47340 +
                   ((C101 * C817 - C113 * C812 + C102 * C818 - C114 * C813 +
                     C103 * C819 - C115 * C814) *
                        C116 +
                    (C101 * C827 - C113 * C820 + C102 * C828 - C114 * C821 +
                     C103 * C829 - C115 * C822) *
                        C47279) *
                       C47294 * C47178) *
                      C47136) *
                     C47050 +
                 ((((C113 * C118 - C101 * C125 + C114 * C119 - C102 * C126 +
                     C115 * C120 - C103 * C130) *
                        C116 +
                    (C113 * C128 - C101 * C139 + C114 * C129 - C102 * C140 +
                     C115 * C131 - C103 * C141) *
                        C47279) *
                       C47294 * C47340 +
                   ((C101 * C425 - C113 * C415 + C102 * C426 - C114 * C416 +
                     C103 * C436 - C115 * C420) *
                        C116 +
                    (C101 * C445 - C113 * C428 + C102 * C446 - C114 * C429 +
                     C103 * C450 - C115 * C437) *
                        C47279) *
                       C47294 * C47178) *
                      C2332 +
                  (((C101 * C272 - C113 * C262 + C102 * C273 - C114 * C263 +
                     C103 * C283 - C115 * C267) *
                        C116 +
                    (C101 * C292 - C113 * C275 + C102 * C293 - C114 * C276 +
                     C103 * C297 - C115 * C284) *
                        C47279) *
                       C47294 * C47340 +
                   ((C113 * C813 - C101 * C818 + C114 * C814 - C102 * C819 +
                     C115 * C815 - C103 * C823) *
                        C116 +
                    (C113 * C821 - C101 * C828 + C114 * C822 - C102 * C829 +
                     C115 * C824 - C103 * C830) *
                        C47279) *
                       C47294 * C47178) *
                      C47136) *
                     C47059 +
                 ((((C101 * C126 - C113 * C119 + C102 * C130 - C114 * C120 +
                     C103 * C132 - C115 * C121) *
                        C116 +
                    (C101 * C140 - C113 * C129 + C102 * C141 - C114 * C131 +
                     C103 * C142 - C115 * C133) *
                        C47279) *
                       C47294 * C47340 +
                   ((C113 * C416 - C101 * C426 + C114 * C420 - C102 * C436 +
                     C115 * C422 - C103 * C440) *
                        C116 +
                    (C113 * C429 - C101 * C446 + C114 * C437 - C102 * C450 +
                     C115 * C441 - C103 * C452) *
                        C47279) *
                       C47294 * C47178) *
                      C2332 +
                  (((C113 * C263 - C101 * C273 + C114 * C267 - C102 * C283 +
                     C115 * C269 - C103 * C287) *
                        C116 +
                    (C113 * C276 - C101 * C293 + C114 * C284 - C102 * C297 +
                     C115 * C288 - C103 * C299) *
                        C47279) *
                       C47294 * C47340 +
                   ((C101 * C819 - C113 * C814 + C102 * C823 - C114 * C815 +
                     C103 * C825 - C115 * C816) *
                        C116 +
                    (C101 * C829 - C113 * C822 + C102 * C830 - C114 * C824 +
                     C103 * C831 - C115 * C826) *
                        C47279) *
                       C47294 * C47178) *
                      C47136) *
                     C2703)) /
               (p * q * std::sqrt(p + q));
    d2ee[4] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                ((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
                    C103 * C126 - C115 * C119) *
                       C116 +
                   (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
                    C103 * C140 - C115 * C129) *
                       C47279) *
                      C47294 * C47091 * C2332 +
                  ((C113 * C261 - C101 * C271 + C114 * C262 - C102 * C272 +
                    C115 * C263 - C103 * C273) *
                       C116 +
                   (C113 * C274 - C101 * C291 + C114 * C275 - C102 * C292 +
                    C115 * C276 - C103 * C293) *
                       C47279) *
                      C47294 * C47091 * C47136) *
                     C47416 +
                 (((C113 * C118 - C101 * C125 + C114 * C119 - C102 * C126 +
                    C115 * C120 - C103 * C130) *
                       C116 +
                   (C113 * C128 - C101 * C139 + C114 * C129 - C102 * C140 +
                    C115 * C131 - C103 * C141) *
                       C47279) *
                      C47294 * C47091 * C2332 +
                  ((C101 * C272 - C113 * C262 + C102 * C273 - C114 * C263 +
                    C103 * C283 - C115 * C267) *
                       C116 +
                   (C101 * C292 - C113 * C275 + C102 * C293 - C114 * C276 +
                    C103 * C297 - C115 * C284) *
                       C47279) *
                      C47294 * C47091 * C47136) *
                     C47409 +
                 (((C101 * C126 - C113 * C119 + C102 * C130 - C114 * C120 +
                    C103 * C132 - C115 * C121) *
                       C116 +
                   (C101 * C140 - C113 * C129 + C102 * C141 - C114 * C131 +
                    C103 * C142 - C115 * C133) *
                       C47279) *
                      C47294 * C47091 * C2332 +
                  ((C113 * C263 - C101 * C273 + C114 * C267 - C102 * C283 +
                    C115 * C269 - C103 * C287) *
                       C116 +
                   (C113 * C276 - C101 * C293 + C114 * C284 - C102 * C297 +
                    C115 * C288 - C103 * C299) *
                       C47279) *
                      C47294 * C47091 * C47136) *
                     C47396 +
                 (((C113 * C120 - C101 * C130 + C114 * C121 - C102 * C132 +
                    C115 * C122 - C103 * C134) *
                       C116 +
                   (C113 * C131 - C101 * C141 + C114 * C133 - C102 * C142 +
                    C115 * C135 - C103 * C143) *
                       C47279) *
                      C47294 * C47091 * C2332 +
                  ((C101 * C283 - C113 * C267 + C102 * C287 - C114 * C269 +
                    C103 * C559 - C115 * C558) *
                       C116 +
                   (C101 * C297 - C113 * C284 + C102 * C299 - C114 * C288 +
                    C103 * C561 - C115 * C560) *
                       C47279) *
                      C47294 * C47091 * C47136) *
                     C47375)) /
                   (p * q * std::sqrt(p + q)) -
               (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                ((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
                    C103 * C126 - C115 * C119) *
                       C116 +
                   (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
                    C103 * C140 - C115 * C129) *
                       C47279) *
                      C47294 * C47091 * C47417 +
                  ((C113 * C261 - C101 * C271 + C114 * C262 - C102 * C272 +
                    C115 * C263 - C103 * C273) *
                       C116 +
                   (C113 * C274 - C101 * C291 + C114 * C275 - C102 * C292 +
                    C115 * C276 - C103 * C293) *
                       C47279) *
                      C47294 * C47091 * C47413 +
                  ((C101 * C277 - C113 * C264 + C102 * C278 - C114 * C265 +
                    C103 * C279 - C115 * C266) *
                       C116 +
                   (C101 * C294 - C113 * C280 + C102 * C295 - C114 * C281 +
                    C103 * C296 - C115 * C282) *
                       C47279) *
                      C47294 * C47091 * C47403 +
                  ((C113 * C1016 - C101 * C1022 + C114 * C1017 - C102 * C1023 +
                    C115 * C1018 - C103 * C1024) *
                       C116 +
                   (C113 * C1025 - C101 * C1034 + C114 * C1026 - C102 * C1035 +
                    C115 * C1027 - C103 * C1036) *
                       C47279) *
                      C47294 * C47091 * C47381) *
                     C2440 +
                 (((C113 * C118 - C101 * C125 + C114 * C119 - C102 * C126 +
                    C115 * C120 - C103 * C130) *
                       C116 +
                   (C113 * C128 - C101 * C139 + C114 * C129 - C102 * C140 +
                    C115 * C131 - C103 * C141) *
                       C47279) *
                      C47294 * C47091 * C47417 +
                  ((C101 * C272 - C113 * C262 + C102 * C273 - C114 * C263 +
                    C103 * C283 - C115 * C267) *
                       C116 +
                   (C101 * C292 - C113 * C275 + C102 * C293 - C114 * C276 +
                    C103 * C297 - C115 * C284) *
                       C47279) *
                      C47294 * C47091 * C47413 +
                  ((C113 * C265 - C101 * C278 + C114 * C266 - C102 * C279 +
                    C115 * C268 - C103 * C285) *
                       C116 +
                   (C113 * C281 - C101 * C295 + C114 * C282 - C102 * C296 +
                    C115 * C286 - C103 * C298) *
                       C47279) *
                      C47294 * C47091 * C47403 +
                  ((C101 * C1023 - C113 * C1017 + C102 * C1024 - C114 * C1018 +
                    C103 * C1291 - C115 * C1290) *
                       C116 +
                   (C101 * C1035 - C113 * C1026 + C102 * C1036 - C114 * C1027 +
                    C103 * C1293 - C115 * C1292) *
                       C47279) *
                      C47294 * C47091 * C47381) *
                     C47056)) /
                   (p * q * std::sqrt(p + q));
    d2ee[5] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                (((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
                     C103 * C126 - C115 * C119) *
                        C116 +
                    (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
                     C103 * C140 - C115 * C129) *
                        C47279) *
                       C47294 * C3094 +
                   ((C113 * C414 - C101 * C424 + C114 * C415 - C102 * C425 +
                     C115 * C416 - C103 * C426) *
                        C116 +
                    (C113 * C427 - C101 * C444 + C114 * C428 - C102 * C445 +
                     C115 * C429 - C103 * C446) *
                        C47279) *
                       C47294 * C47178) *
                      C47132 +
                  (((C113 * C261 - C101 * C271 + C114 * C262 - C102 * C272 +
                     C115 * C263 - C103 * C273) *
                        C116 +
                    (C113 * C274 - C101 * C291 + C114 * C275 - C102 * C292 +
                     C115 * C276 - C103 * C293) *
                        C47279) *
                       C47294 * C3094 +
                   ((C101 * C817 - C113 * C812 + C102 * C818 - C114 * C813 +
                     C103 * C819 - C115 * C814) *
                        C116 +
                    (C101 * C827 - C113 * C820 + C102 * C828 - C114 * C821 +
                     C103 * C829 - C115 * C822) *
                        C47279) *
                       C47294 * C47178) *
                      C47139 +
                  (((C101 * C277 - C113 * C264 + C102 * C278 - C114 * C265 +
                     C103 * C279 - C115 * C266) *
                        C116 +
                    (C101 * C294 - C113 * C280 + C102 * C295 - C114 * C281 +
                     C103 * C296 - C115 * C282) *
                        C47279) *
                       C47294 * C3094 +
                   ((C113 * C1153 - C101 * C1165 + C114 * C1154 - C102 * C1166 +
                     C115 * C1155 - C103 * C1167) *
                        C116 +
                    (C113 * C1168 - C101 * C1180 + C114 * C1169 - C102 * C1181 +
                     C115 * C1170 - C103 * C1182) *
                        C47279) *
                       C47294 * C47178) *
                      C2700) *
                     C47325 +
                 ((((C113 * C118 - C101 * C125 + C114 * C119 - C102 * C126 +
                     C115 * C120 - C103 * C130) *
                        C116 +
                    (C113 * C128 - C101 * C139 + C114 * C129 - C102 * C140 +
                     C115 * C131 - C103 * C141) *
                        C47279) *
                       C47294 * C3094 +
                   ((C101 * C425 - C113 * C415 + C102 * C426 - C114 * C416 +
                     C103 * C436 - C115 * C420) *
                        C116 +
                    (C101 * C445 - C113 * C428 + C102 * C446 - C114 * C429 +
                     C103 * C450 - C115 * C437) *
                        C47279) *
                       C47294 * C47178) *
                      C47132 +
                  (((C101 * C272 - C113 * C262 + C102 * C273 - C114 * C263 +
                     C103 * C283 - C115 * C267) *
                        C116 +
                    (C101 * C292 - C113 * C275 + C102 * C293 - C114 * C276 +
                     C103 * C297 - C115 * C284) *
                        C47279) *
                       C47294 * C3094 +
                   ((C113 * C813 - C101 * C818 + C114 * C814 - C102 * C819 +
                     C115 * C815 - C103 * C823) *
                        C116 +
                    (C113 * C821 - C101 * C828 + C114 * C822 - C102 * C829 +
                     C115 * C824 - C103 * C830) *
                        C47279) *
                       C47294 * C47178) *
                      C47139 +
                  (((C113 * C265 - C101 * C278 + C114 * C266 - C102 * C279 +
                     C115 * C268 - C103 * C285) *
                        C116 +
                    (C113 * C281 - C101 * C295 + C114 * C282 - C102 * C296 +
                     C115 * C286 - C103 * C298) *
                        C47279) *
                       C47294 * C3094 +
                   ((C101 * C1166 - C113 * C1154 + C102 * C1167 - C114 * C1155 +
                     C103 * C1441 - C115 * C1440) *
                        C116 +
                    (C101 * C1181 - C113 * C1169 + C102 * C1182 - C114 * C1170 +
                     C103 * C1443 - C115 * C1442) *
                        C47279) *
                       C47294 * C47178) *
                      C2700) *
                     C47056)) /
               (p * q * std::sqrt(p + q));
    d2ee[6] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                ((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
                    C103 * C126 - C115 * C119) *
                       C116 +
                   (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
                    C103 * C140 - C115 * C129) *
                       C47279) *
                      C47294 * C47174 +
                  ((C113 * C414 - C101 * C424 + C114 * C415 - C102 * C425 +
                    C115 * C416 - C103 * C426) *
                       C116 +
                   (C113 * C427 - C101 * C444 + C114 * C428 - C102 * C445 +
                    C115 * C429 - C103 * C446) *
                       C47279) *
                      C47294 * C47181 +
                  ((C101 * C430 - C113 * C417 + C102 * C431 - C114 * C418 +
                    C103 * C432 - C115 * C419) *
                       C116 +
                   (C101 * C447 - C113 * C433 + C102 * C448 - C114 * C434 +
                    C103 * C449 - C115 * C435) *
                       C47279) *
                      C47294 * C3602) *
                     C47132 +
                 (((C113 * C261 - C101 * C271 + C114 * C262 - C102 * C272 +
                    C115 * C263 - C103 * C273) *
                       C116 +
                   (C113 * C274 - C101 * C291 + C114 * C275 - C102 * C292 +
                    C115 * C276 - C103 * C293) *
                       C47279) *
                      C47294 * C47174 +
                  ((C101 * C817 - C113 * C812 + C102 * C818 - C114 * C813 +
                    C103 * C819 - C115 * C814) *
                       C116 +
                   (C101 * C827 - C113 * C820 + C102 * C828 - C114 * C821 +
                    C103 * C829 - C115 * C822) *
                       C47279) *
                      C47294 * C47181 +
                  ((C113 * C1150 - C101 * C1159 + C114 * C1151 - C102 * C1160 +
                    C115 * C1152 - C103 * C1161) *
                       C116 +
                   (C113 * C1162 - C101 * C1177 + C114 * C1163 - C102 * C1178 +
                    C115 * C1164 - C103 * C1179) *
                       C47279) *
                      C47294 * C3602) *
                     C47139 +
                 (((C101 * C277 - C113 * C264 + C102 * C278 - C114 * C265 +
                    C103 * C279 - C115 * C266) *
                       C116 +
                   (C101 * C294 - C113 * C280 + C102 * C295 - C114 * C281 +
                    C103 * C296 - C115 * C282) *
                       C47279) *
                      C47294 * C47174 +
                  ((C113 * C1153 - C101 * C1165 + C114 * C1154 - C102 * C1166 +
                    C115 * C1155 - C103 * C1167) *
                       C116 +
                   (C113 * C1168 - C101 * C1180 + C114 * C1169 - C102 * C1181 +
                    C115 * C1170 - C103 * C1182) *
                       C47279) *
                      C47294 * C47181 +
                  ((C101 * C1171 - C113 * C1156 + C102 * C1172 - C114 * C1157 +
                    C103 * C1173 - C115 * C1158) *
                       C116 +
                   (C101 * C1183 - C113 * C1174 + C102 * C1184 - C114 * C1175 +
                    C103 * C1185 - C115 * C1176) *
                       C47279) *
                      C47294 * C3602) *
                     C2700) *
                C47045) /
               (p * q * std::sqrt(p + q));
    d2ee[7] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                ((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
                    C103 * C126 - C115 * C119) *
                       C116 +
                   (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
                    C103 * C140 - C115 * C129) *
                       C47279) *
                      C47294 * C3094 +
                  ((C113 * C414 - C101 * C424 + C114 * C415 - C102 * C425 +
                    C115 * C416 - C103 * C426) *
                       C116 +
                   (C113 * C427 - C101 * C444 + C114 * C428 - C102 * C445 +
                    C115 * C429 - C103 * C446) *
                       C47279) *
                      C47294 * C47178) *
                     C47417 +
                 (((C113 * C261 - C101 * C271 + C114 * C262 - C102 * C272 +
                    C115 * C263 - C103 * C273) *
                       C116 +
                   (C113 * C274 - C101 * C291 + C114 * C275 - C102 * C292 +
                    C115 * C276 - C103 * C293) *
                       C47279) *
                      C47294 * C3094 +
                  ((C101 * C817 - C113 * C812 + C102 * C818 - C114 * C813 +
                    C103 * C819 - C115 * C814) *
                       C116 +
                   (C101 * C827 - C113 * C820 + C102 * C828 - C114 * C821 +
                    C103 * C829 - C115 * C822) *
                       C47279) *
                      C47294 * C47178) *
                     C47413 +
                 (((C101 * C277 - C113 * C264 + C102 * C278 - C114 * C265 +
                    C103 * C279 - C115 * C266) *
                       C116 +
                   (C101 * C294 - C113 * C280 + C102 * C295 - C114 * C281 +
                    C103 * C296 - C115 * C282) *
                       C47279) *
                      C47294 * C3094 +
                  ((C113 * C1153 - C101 * C1165 + C114 * C1154 - C102 * C1166 +
                    C115 * C1155 - C103 * C1167) *
                       C116 +
                   (C113 * C1168 - C101 * C1180 + C114 * C1169 - C102 * C1181 +
                    C115 * C1170 - C103 * C1182) *
                       C47279) *
                      C47294 * C47178) *
                     C47403 +
                 (((C113 * C1016 - C101 * C1022 + C114 * C1017 - C102 * C1023 +
                    C115 * C1018 - C103 * C1024) *
                       C116 +
                   (C113 * C1025 - C101 * C1034 + C114 * C1026 - C102 * C1035 +
                    C115 * C1027 - C103 * C1036) *
                       C47279) *
                      C47294 * C3094 +
                  ((C101 * C1545 - C113 * C1542 + C102 * C1546 - C114 * C1543 +
                    C103 * C1547 - C115 * C1544) *
                       C116 +
                   (C101 * C1551 - C113 * C1548 + C102 * C1552 - C114 * C1549 +
                    C103 * C1553 - C115 * C1550) *
                       C47279) *
                      C47294 * C47178) *
                     C47381) *
                C47045) /
                   (p * q * std::sqrt(p + q)) -
               (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                (((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
                     C103 * C126 - C115 * C119) *
                        C116 +
                    (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
                     C103 * C140 - C115 * C129) *
                        C47279) *
                       C47294 * C3094 +
                   ((C113 * C414 - C101 * C424 + C114 * C415 - C102 * C425 +
                     C115 * C416 - C103 * C426) *
                        C116 +
                    (C113 * C427 - C101 * C444 + C114 * C428 - C102 * C445 +
                     C115 * C429 - C103 * C446) *
                        C47279) *
                       C47294 * C47178) *
                      C2332 +
                  (((C113 * C261 - C101 * C271 + C114 * C262 - C102 * C272 +
                     C115 * C263 - C103 * C273) *
                        C116 +
                    (C113 * C274 - C101 * C291 + C114 * C275 - C102 * C292 +
                     C115 * C276 - C103 * C293) *
                        C47279) *
                       C47294 * C3094 +
                   ((C101 * C817 - C113 * C812 + C102 * C818 - C114 * C813 +
                     C103 * C819 - C115 * C814) *
                        C116 +
                    (C101 * C827 - C113 * C820 + C102 * C828 - C114 * C821 +
                     C103 * C829 - C115 * C822) *
                        C47279) *
                       C47294 * C47178) *
                      C47136) *
                     C47407 +
                 ((((C113 * C118 - C101 * C125 + C114 * C119 - C102 * C126 +
                     C115 * C120 - C103 * C130) *
                        C116 +
                    (C113 * C128 - C101 * C139 + C114 * C129 - C102 * C140 +
                     C115 * C131 - C103 * C141) *
                        C47279) *
                       C47294 * C3094 +
                   ((C101 * C425 - C113 * C415 + C102 * C426 - C114 * C416 +
                     C103 * C436 - C115 * C420) *
                        C116 +
                    (C101 * C445 - C113 * C428 + C102 * C446 - C114 * C429 +
                     C103 * C450 - C115 * C437) *
                        C47279) *
                       C47294 * C47178) *
                      C2332 +
                  (((C101 * C272 - C113 * C262 + C102 * C273 - C114 * C263 +
                     C103 * C283 - C115 * C267) *
                        C116 +
                    (C101 * C292 - C113 * C275 + C102 * C293 - C114 * C276 +
                     C103 * C297 - C115 * C284) *
                        C47279) *
                       C47294 * C3094 +
                   ((C113 * C813 - C101 * C818 + C114 * C814 - C102 * C819 +
                     C115 * C815 - C103 * C823) *
                        C116 +
                    (C113 * C821 - C101 * C828 + C114 * C822 - C102 * C829 +
                     C115 * C824 - C103 * C830) *
                        C47279) *
                       C47294 * C47178) *
                      C47136) *
                     C47394 +
                 ((((C101 * C126 - C113 * C119 + C102 * C130 - C114 * C120 +
                     C103 * C132 - C115 * C121) *
                        C116 +
                    (C101 * C140 - C113 * C129 + C102 * C141 - C114 * C131 +
                     C103 * C142 - C115 * C133) *
                        C47279) *
                       C47294 * C3094 +
                   ((C113 * C416 - C101 * C426 + C114 * C420 - C102 * C436 +
                     C115 * C422 - C103 * C440) *
                        C116 +
                    (C113 * C429 - C101 * C446 + C114 * C437 - C102 * C450 +
                     C115 * C441 - C103 * C452) *
                        C47279) *
                       C47294 * C47178) *
                      C2332 +
                  (((C113 * C263 - C101 * C273 + C114 * C267 - C102 * C283 +
                     C115 * C269 - C103 * C287) *
                        C116 +
                    (C113 * C276 - C101 * C293 + C114 * C284 - C102 * C297 +
                     C115 * C288 - C103 * C299) *
                        C47279) *
                       C47294 * C3094 +
                   ((C101 * C819 - C113 * C814 + C102 * C823 - C114 * C815 +
                     C103 * C825 - C115 * C816) *
                        C116 +
                    (C101 * C829 - C113 * C822 + C102 * C830 - C114 * C824 +
                     C103 * C831 - C115 * C826) *
                        C47279) *
                       C47294 * C47178) *
                      C47136) *
                     C47365)) /
                   (p * q * std::sqrt(p + q)) +
               (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                ((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
                    C103 * C126 - C115 * C119) *
                       C116 +
                   (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
                    C103 * C140 - C115 * C129) *
                       C47279) *
                      C47294 * C47418 +
                  ((C113 * C414 - C101 * C424 + C114 * C415 - C102 * C425 +
                    C115 * C416 - C103 * C426) *
                       C116 +
                   (C113 * C427 - C101 * C444 + C114 * C428 - C102 * C445 +
                    C115 * C429 - C103 * C446) *
                       C47279) *
                      C47294 * C47415 +
                  ((C101 * C430 - C113 * C417 + C102 * C431 - C114 * C418 +
                    C103 * C432 - C115 * C419) *
                       C116 +
                   (C101 * C447 - C113 * C433 + C102 * C448 - C114 * C434 +
                    C103 * C449 - C115 * C435) *
                       C47279) *
                      C47294 * C47406 +
                  ((C113 * C1844 - C101 * C1850 + C114 * C1845 - C102 * C1851 +
                    C115 * C1846 - C103 * C1852) *
                       C116 +
                   (C113 * C1853 - C101 * C1862 + C114 * C1854 - C102 * C1863 +
                    C115 * C1855 - C103 * C1864) *
                       C47279) *
                      C47294 * C47387) *
                     C2332 +
                 (((C113 * C261 - C101 * C271 + C114 * C262 - C102 * C272 +
                    C115 * C263 - C103 * C273) *
                       C116 +
                   (C113 * C274 - C101 * C291 + C114 * C275 - C102 * C292 +
                    C115 * C276 - C103 * C293) *
                       C47279) *
                      C47294 * C47418 +
                  ((C101 * C817 - C113 * C812 + C102 * C818 - C114 * C813 +
                    C103 * C819 - C115 * C814) *
                       C116 +
                   (C101 * C827 - C113 * C820 + C102 * C828 - C114 * C821 +
                    C103 * C829 - C115 * C822) *
                       C47279) *
                      C47294 * C47415 +
                  ((C113 * C1150 - C101 * C1159 + C114 * C1151 - C102 * C1160 +
                    C115 * C1152 - C103 * C1161) *
                       C116 +
                   (C113 * C1162 - C101 * C1177 + C114 * C1163 - C102 * C1178 +
                    C115 * C1164 - C103 * C1179) *
                       C47279) *
                      C47294 * C47406 +
                  ((C101 * C2225 - C113 * C2222 + C102 * C2226 - C114 * C2223 +
                    C103 * C2227 - C115 * C2224) *
                       C116 +
                   (C101 * C2231 - C113 * C2228 + C102 * C2232 - C114 * C2229 +
                    C103 * C2233 - C115 * C2230) *
                       C47279) *
                      C47294 * C47387) *
                     C47136) *
                C47045) /
                   (p * q * std::sqrt(p + q));
    d2ee[8] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                (((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
                     C103 * C126 - C115 * C119) *
                        C116 +
                    (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
                     C103 * C140 - C115 * C129) *
                        C47279) *
                       C47294 * C47174 +
                   ((C113 * C414 - C101 * C424 + C114 * C415 - C102 * C425 +
                     C115 * C416 - C103 * C426) *
                        C116 +
                    (C113 * C427 - C101 * C444 + C114 * C428 - C102 * C445 +
                     C115 * C429 - C103 * C446) *
                        C47279) *
                       C47294 * C47181 +
                   ((C101 * C430 - C113 * C417 + C102 * C431 - C114 * C418 +
                     C103 * C432 - C115 * C419) *
                        C116 +
                    (C101 * C447 - C113 * C433 + C102 * C448 - C114 * C434 +
                     C103 * C449 - C115 * C435) *
                        C47279) *
                       C47294 * C3602) *
                      C2332 +
                  (((C113 * C261 - C101 * C271 + C114 * C262 - C102 * C272 +
                     C115 * C263 - C103 * C273) *
                        C116 +
                    (C113 * C274 - C101 * C291 + C114 * C275 - C102 * C292 +
                     C115 * C276 - C103 * C293) *
                        C47279) *
                       C47294 * C47174 +
                   ((C101 * C817 - C113 * C812 + C102 * C818 - C114 * C813 +
                     C103 * C819 - C115 * C814) *
                        C116 +
                    (C101 * C827 - C113 * C820 + C102 * C828 - C114 * C821 +
                     C103 * C829 - C115 * C822) *
                        C47279) *
                       C47294 * C47181 +
                   ((C113 * C1150 - C101 * C1159 + C114 * C1151 - C102 * C1160 +
                     C115 * C1152 - C103 * C1161) *
                        C116 +
                    (C113 * C1162 - C101 * C1177 + C114 * C1163 - C102 * C1178 +
                     C115 * C1164 - C103 * C1179) *
                        C47279) *
                       C47294 * C3602) *
                      C47136) *
                     C47325 +
                 ((((C113 * C118 - C101 * C125 + C114 * C119 - C102 * C126 +
                     C115 * C120 - C103 * C130) *
                        C116 +
                    (C113 * C128 - C101 * C139 + C114 * C129 - C102 * C140 +
                     C115 * C131 - C103 * C141) *
                        C47279) *
                       C47294 * C47174 +
                   ((C101 * C425 - C113 * C415 + C102 * C426 - C114 * C416 +
                     C103 * C436 - C115 * C420) *
                        C116 +
                    (C101 * C445 - C113 * C428 + C102 * C446 - C114 * C429 +
                     C103 * C450 - C115 * C437) *
                        C47279) *
                       C47294 * C47181 +
                   ((C113 * C418 - C101 * C431 + C114 * C419 - C102 * C432 +
                     C115 * C421 - C103 * C438) *
                        C116 +
                    (C113 * C434 - C101 * C448 + C114 * C435 - C102 * C449 +
                     C115 * C439 - C103 * C451) *
                        C47279) *
                       C47294 * C3602) *
                      C2332 +
                  (((C101 * C272 - C113 * C262 + C102 * C273 - C114 * C263 +
                     C103 * C283 - C115 * C267) *
                        C116 +
                    (C101 * C292 - C113 * C275 + C102 * C293 - C114 * C276 +
                     C103 * C297 - C115 * C284) *
                        C47279) *
                       C47294 * C47174 +
                   ((C113 * C813 - C101 * C818 + C114 * C814 - C102 * C819 +
                     C115 * C815 - C103 * C823) *
                        C116 +
                    (C113 * C821 - C101 * C828 + C114 * C822 - C102 * C829 +
                     C115 * C824 - C103 * C830) *
                        C47279) *
                       C47294 * C47181 +
                   ((C101 * C1160 - C113 * C1151 + C102 * C1161 - C114 * C1152 +
                     C103 * C2015 - C115 * C2014) *
                        C116 +
                    (C101 * C1178 - C113 * C1163 + C102 * C1179 - C114 * C1164 +
                     C103 * C2017 - C115 * C2016) *
                        C47279) *
                       C47294 * C3602) *
                      C47136) *
                     C47056)) /
               (p * q * std::sqrt(p + q));
    d2ee[9] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                (((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
                     C103 * C126 - C115 * C119) *
                        C116 +
                    (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
                     C103 * C140 - C115 * C129) *
                        C47279) *
                       C47294 * C3094 +
                   ((C113 * C414 - C101 * C424 + C114 * C415 - C102 * C425 +
                     C115 * C416 - C103 * C426) *
                        C116 +
                    (C113 * C427 - C101 * C444 + C114 * C428 - C102 * C445 +
                     C115 * C429 - C103 * C446) *
                        C47279) *
                       C47294 * C47178) *
                      C2332 +
                  (((C113 * C261 - C101 * C271 + C114 * C262 - C102 * C272 +
                     C115 * C263 - C103 * C273) *
                        C116 +
                    (C113 * C274 - C101 * C291 + C114 * C275 - C102 * C292 +
                     C115 * C276 - C103 * C293) *
                        C47279) *
                       C47294 * C3094 +
                   ((C101 * C817 - C113 * C812 + C102 * C818 - C114 * C813 +
                     C103 * C819 - C115 * C814) *
                        C116 +
                    (C101 * C827 - C113 * C820 + C102 * C828 - C114 * C821 +
                     C103 * C829 - C115 * C822) *
                        C47279) *
                       C47294 * C47178) *
                      C47136) *
                     C47407 +
                 ((((C113 * C118 - C101 * C125 + C114 * C119 - C102 * C126 +
                     C115 * C120 - C103 * C130) *
                        C116 +
                    (C113 * C128 - C101 * C139 + C114 * C129 - C102 * C140 +
                     C115 * C131 - C103 * C141) *
                        C47279) *
                       C47294 * C3094 +
                   ((C101 * C425 - C113 * C415 + C102 * C426 - C114 * C416 +
                     C103 * C436 - C115 * C420) *
                        C116 +
                    (C101 * C445 - C113 * C428 + C102 * C446 - C114 * C429 +
                     C103 * C450 - C115 * C437) *
                        C47279) *
                       C47294 * C47178) *
                      C2332 +
                  (((C101 * C272 - C113 * C262 + C102 * C273 - C114 * C263 +
                     C103 * C283 - C115 * C267) *
                        C116 +
                    (C101 * C292 - C113 * C275 + C102 * C293 - C114 * C276 +
                     C103 * C297 - C115 * C284) *
                        C47279) *
                       C47294 * C3094 +
                   ((C113 * C813 - C101 * C818 + C114 * C814 - C102 * C819 +
                     C115 * C815 - C103 * C823) *
                        C116 +
                    (C113 * C821 - C101 * C828 + C114 * C822 - C102 * C829 +
                     C115 * C824 - C103 * C830) *
                        C47279) *
                       C47294 * C47178) *
                      C47136) *
                     C47394 +
                 ((((C101 * C126 - C113 * C119 + C102 * C130 - C114 * C120 +
                     C103 * C132 - C115 * C121) *
                        C116 +
                    (C101 * C140 - C113 * C129 + C102 * C141 - C114 * C131 +
                     C103 * C142 - C115 * C133) *
                        C47279) *
                       C47294 * C3094 +
                   ((C113 * C416 - C101 * C426 + C114 * C420 - C102 * C436 +
                     C115 * C422 - C103 * C440) *
                        C116 +
                    (C113 * C429 - C101 * C446 + C114 * C437 - C102 * C450 +
                     C115 * C441 - C103 * C452) *
                        C47279) *
                       C47294 * C47178) *
                      C2332 +
                  (((C113 * C263 - C101 * C273 + C114 * C267 - C102 * C283 +
                     C115 * C269 - C103 * C287) *
                        C116 +
                    (C113 * C276 - C101 * C293 + C114 * C284 - C102 * C297 +
                     C115 * C288 - C103 * C299) *
                        C47279) *
                       C47294 * C3094 +
                   ((C101 * C819 - C113 * C814 + C102 * C823 - C114 * C815 +
                     C103 * C825 - C115 * C816) *
                        C116 +
                    (C101 * C829 - C113 * C822 + C102 * C830 - C114 * C824 +
                     C103 * C831 - C115 * C826) *
                        C47279) *
                       C47294 * C47178) *
                      C47136) *
                     C47365)) /
                   (p * q * std::sqrt(p + q)) -
               (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                ((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
                    C103 * C126 - C115 * C119) *
                       C116 +
                   (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
                    C103 * C140 - C115 * C129) *
                       C47279) *
                      C47294 * C3094 +
                  ((C113 * C414 - C101 * C424 + C114 * C415 - C102 * C425 +
                    C115 * C416 - C103 * C426) *
                       C116 +
                   (C113 * C427 - C101 * C444 + C114 * C428 - C102 * C445 +
                    C115 * C429 - C103 * C446) *
                       C47279) *
                      C47294 * C47178) *
                     C47417 +
                 (((C113 * C261 - C101 * C271 + C114 * C262 - C102 * C272 +
                    C115 * C263 - C103 * C273) *
                       C116 +
                   (C113 * C274 - C101 * C291 + C114 * C275 - C102 * C292 +
                    C115 * C276 - C103 * C293) *
                       C47279) *
                      C47294 * C3094 +
                  ((C101 * C817 - C113 * C812 + C102 * C818 - C114 * C813 +
                    C103 * C819 - C115 * C814) *
                       C116 +
                   (C101 * C827 - C113 * C820 + C102 * C828 - C114 * C821 +
                    C103 * C829 - C115 * C822) *
                       C47279) *
                      C47294 * C47178) *
                     C47413 +
                 (((C101 * C277 - C113 * C264 + C102 * C278 - C114 * C265 +
                    C103 * C279 - C115 * C266) *
                       C116 +
                   (C101 * C294 - C113 * C280 + C102 * C295 - C114 * C281 +
                    C103 * C296 - C115 * C282) *
                       C47279) *
                      C47294 * C3094 +
                  ((C113 * C1153 - C101 * C1165 + C114 * C1154 - C102 * C1166 +
                    C115 * C1155 - C103 * C1167) *
                       C116 +
                   (C113 * C1168 - C101 * C1180 + C114 * C1169 - C102 * C1181 +
                    C115 * C1170 - C103 * C1182) *
                       C47279) *
                      C47294 * C47178) *
                     C47403 +
                 (((C113 * C1016 - C101 * C1022 + C114 * C1017 - C102 * C1023 +
                    C115 * C1018 - C103 * C1024) *
                       C116 +
                   (C113 * C1025 - C101 * C1034 + C114 * C1026 - C102 * C1035 +
                    C115 * C1027 - C103 * C1036) *
                       C47279) *
                      C47294 * C3094 +
                  ((C101 * C1545 - C113 * C1542 + C102 * C1546 - C114 * C1543 +
                    C103 * C1547 - C115 * C1544) *
                       C116 +
                   (C101 * C1551 - C113 * C1548 + C102 * C1552 - C114 * C1549 +
                    C103 * C1553 - C115 * C1550) *
                       C47279) *
                      C47294 * C47178) *
                     C47381) *
                C47045) /
                   (p * q * std::sqrt(p + q));
    d2ee[10] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 ((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
                     C103 * C126 - C115 * C119) *
                        C116 +
                    (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
                     C103 * C140 - C115 * C129) *
                        C47279) *
                       C47294 * C47091 * C1284 +
                   ((C113 * C261 - C101 * C271 + C114 * C262 - C102 * C272 +
                     C115 * C263 - C103 * C273) *
                        C116 +
                    (C113 * C274 - C101 * C291 + C114 * C275 - C102 * C292 +
                     C115 * C276 - C103 * C293) *
                        C47279) *
                       C47294 * C47091 * C1285 +
                   ((C101 * C277 - C113 * C264 + C102 * C278 - C114 * C265 +
                     C103 * C279 - C115 * C266) *
                        C116 +
                    (C101 * C294 - C113 * C280 + C102 * C295 - C114 * C281 +
                     C103 * C296 - C115 * C282) *
                        C47279) *
                       C47294 * C47091 * C1286 +
                   ((C113 * C1016 - C101 * C1022 + C114 * C1017 - C102 * C1023 +
                     C115 * C1018 - C103 * C1024) *
                        C116 +
                    (C113 * C1025 - C101 * C1034 + C114 * C1026 - C102 * C1035 +
                     C115 * C1027 - C103 * C1036) *
                        C47279) *
                       C47294 * C47091 * C47381) *
                      C47325 +
                  (((C113 * C118 - C101 * C125 + C114 * C119 - C102 * C126 +
                     C115 * C120 - C103 * C130) *
                        C116 +
                    (C113 * C128 - C101 * C139 + C114 * C129 - C102 * C140 +
                     C115 * C131 - C103 * C141) *
                        C47279) *
                       C47294 * C47091 * C1284 +
                   ((C101 * C272 - C113 * C262 + C102 * C273 - C114 * C263 +
                     C103 * C283 - C115 * C267) *
                        C116 +
                    (C101 * C292 - C113 * C275 + C102 * C293 - C114 * C276 +
                     C103 * C297 - C115 * C284) *
                        C47279) *
                       C47294 * C47091 * C1285 +
                   ((C113 * C265 - C101 * C278 + C114 * C266 - C102 * C279 +
                     C115 * C268 - C103 * C285) *
                        C116 +
                    (C113 * C281 - C101 * C295 + C114 * C282 - C102 * C296 +
                     C115 * C286 - C103 * C298) *
                        C47279) *
                       C47294 * C47091 * C1286 +
                   ((C101 * C1023 - C113 * C1017 + C102 * C1024 - C114 * C1018 +
                     C103 * C1291 - C115 * C1290) *
                        C116 +
                    (C101 * C1035 - C113 * C1026 + C102 * C1036 - C114 * C1027 +
                     C103 * C1293 - C115 * C1292) *
                        C47279) *
                       C47294 * C47091 * C47381) *
                      C47056)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 ((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
                     C103 * C126 - C115 * C119) *
                        C116 +
                    (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
                     C103 * C140 - C115 * C129) *
                        C47279) *
                       C47294 * C47091 * C47339 +
                   ((C113 * C261 - C101 * C271 + C114 * C262 - C102 * C272 +
                     C115 * C263 - C103 * C273) *
                        C116 +
                    (C113 * C274 - C101 * C291 + C114 * C275 - C102 * C292 +
                     C115 * C276 - C103 * C293) *
                        C47279) *
                       C47294 * C47091 * C47136) *
                      C554 +
                  (((C113 * C118 - C101 * C125 + C114 * C119 - C102 * C126 +
                     C115 * C120 - C103 * C130) *
                        C116 +
                    (C113 * C128 - C101 * C139 + C114 * C129 - C102 * C140 +
                     C115 * C131 - C103 * C141) *
                        C47279) *
                       C47294 * C47091 * C47339 +
                   ((C101 * C272 - C113 * C262 + C102 * C273 - C114 * C263 +
                     C103 * C283 - C115 * C267) *
                        C116 +
                    (C101 * C292 - C113 * C275 + C102 * C293 - C114 * C276 +
                     C103 * C297 - C115 * C284) *
                        C47279) *
                       C47294 * C47091 * C47136) *
                      C555 +
                  (((C101 * C126 - C113 * C119 + C102 * C130 - C114 * C120 +
                     C103 * C132 - C115 * C121) *
                        C116 +
                    (C101 * C140 - C113 * C129 + C102 * C141 - C114 * C131 +
                     C103 * C142 - C115 * C133) *
                        C47279) *
                       C47294 * C47091 * C47339 +
                   ((C113 * C263 - C101 * C273 + C114 * C267 - C102 * C283 +
                     C115 * C269 - C103 * C287) *
                        C116 +
                    (C113 * C276 - C101 * C293 + C114 * C284 - C102 * C297 +
                     C115 * C288 - C103 * C299) *
                        C47279) *
                       C47294 * C47091 * C47136) *
                      C556 +
                  (((C113 * C120 - C101 * C130 + C114 * C121 - C102 * C132 +
                     C115 * C122 - C103 * C134) *
                        C116 +
                    (C113 * C131 - C101 * C141 + C114 * C133 - C102 * C142 +
                     C115 * C135 - C103 * C143) *
                        C47279) *
                       C47294 * C47091 * C47339 +
                   ((C101 * C283 - C113 * C267 + C102 * C287 - C114 * C269 +
                     C103 * C559 - C115 * C558) *
                        C116 +
                    (C101 * C297 - C113 * C284 + C102 * C299 - C114 * C288 +
                     C103 * C561 - C115 * C560) *
                        C47279) *
                       C47294 * C47091 * C47136) *
                      C47375)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                 (((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
                      C103 * C126 - C115 * C119) *
                         C116 +
                     (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
                      C103 * C140 - C115 * C129) *
                         C47279) *
                        C47294 * C1664 +
                    ((C113 * C414 - C101 * C424 + C114 * C415 - C102 * C425 +
                      C115 * C416 - C103 * C426) *
                         C116 +
                     (C113 * C427 - C101 * C444 + C114 * C428 - C102 * C445 +
                      C115 * C429 - C103 * C446) *
                         C47279) *
                        C47294 * C1665 +
                    ((C101 * C430 - C113 * C417 + C102 * C431 - C114 * C418 +
                      C103 * C432 - C115 * C419) *
                         C116 +
                     (C101 * C447 - C113 * C433 + C102 * C448 - C114 * C434 +
                      C103 * C449 - C115 * C435) *
                         C47279) *
                        C47294 * C47374) *
                       C47339 +
                   (((C113 * C261 - C101 * C271 + C114 * C262 - C102 * C272 +
                      C115 * C263 - C103 * C273) *
                         C116 +
                     (C113 * C274 - C101 * C291 + C114 * C275 - C102 * C292 +
                      C115 * C276 - C103 * C293) *
                         C47279) *
                        C47294 * C1664 +
                    ((C101 * C817 - C113 * C812 + C102 * C818 - C114 * C813 +
                      C103 * C819 - C115 * C814) *
                         C116 +
                     (C101 * C827 - C113 * C820 + C102 * C828 - C114 * C821 +
                      C103 * C829 - C115 * C822) *
                         C47279) *
                        C47294 * C1665 +
                    ((C113 * C1150 - C101 * C1159 + C114 * C1151 -
                      C102 * C1160 + C115 * C1152 - C103 * C1161) *
                         C116 +
                     (C113 * C1162 - C101 * C1177 + C114 * C1163 -
                      C102 * C1178 + C115 * C1164 - C103 * C1179) *
                         C47279) *
                        C47294 * C47374) *
                       C47136) *
                      C47325 +
                  ((((C113 * C118 - C101 * C125 + C114 * C119 - C102 * C126 +
                      C115 * C120 - C103 * C130) *
                         C116 +
                     (C113 * C128 - C101 * C139 + C114 * C129 - C102 * C140 +
                      C115 * C131 - C103 * C141) *
                         C47279) *
                        C47294 * C1664 +
                    ((C101 * C425 - C113 * C415 + C102 * C426 - C114 * C416 +
                      C103 * C436 - C115 * C420) *
                         C116 +
                     (C101 * C445 - C113 * C428 + C102 * C446 - C114 * C429 +
                      C103 * C450 - C115 * C437) *
                         C47279) *
                        C47294 * C1665 +
                    ((C113 * C418 - C101 * C431 + C114 * C419 - C102 * C432 +
                      C115 * C421 - C103 * C438) *
                         C116 +
                     (C113 * C434 - C101 * C448 + C114 * C435 - C102 * C449 +
                      C115 * C439 - C103 * C451) *
                         C47279) *
                        C47294 * C47374) *
                       C47339 +
                   (((C101 * C272 - C113 * C262 + C102 * C273 - C114 * C263 +
                      C103 * C283 - C115 * C267) *
                         C116 +
                     (C101 * C292 - C113 * C275 + C102 * C293 - C114 * C276 +
                      C103 * C297 - C115 * C284) *
                         C47279) *
                        C47294 * C1664 +
                    ((C113 * C813 - C101 * C818 + C114 * C814 - C102 * C819 +
                      C115 * C815 - C103 * C823) *
                         C116 +
                     (C113 * C821 - C101 * C828 + C114 * C822 - C102 * C829 +
                      C115 * C824 - C103 * C830) *
                         C47279) *
                        C47294 * C1665 +
                    ((C101 * C1160 - C113 * C1151 + C102 * C1161 -
                      C114 * C1152 + C103 * C2015 - C115 * C2014) *
                         C116 +
                     (C101 * C1178 - C113 * C1163 + C102 * C1179 -
                      C114 * C1164 + C103 * C2017 - C115 * C2016) *
                         C47279) *
                        C47294 * C47374) *
                       C47136) *
                      C47056)) /
                    (p * q * std::sqrt(p + q));
    d2ee[11] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 ((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
                     C103 * C126 - C115 * C119) *
                        C116 +
                    (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
                     C103 * C140 - C115 * C129) *
                        C47279) *
                       C47294 * C47340 +
                   ((C113 * C414 - C101 * C424 + C114 * C415 - C102 * C425 +
                     C115 * C416 - C103 * C426) *
                        C116 +
                    (C113 * C427 - C101 * C444 + C114 * C428 - C102 * C445 +
                     C115 * C429 - C103 * C446) *
                        C47279) *
                       C47294 * C47178) *
                      C1284 +
                  (((C113 * C261 - C101 * C271 + C114 * C262 - C102 * C272 +
                     C115 * C263 - C103 * C273) *
                        C116 +
                    (C113 * C274 - C101 * C291 + C114 * C275 - C102 * C292 +
                     C115 * C276 - C103 * C293) *
                        C47279) *
                       C47294 * C47340 +
                   ((C101 * C817 - C113 * C812 + C102 * C818 - C114 * C813 +
                     C103 * C819 - C115 * C814) *
                        C116 +
                    (C101 * C827 - C113 * C820 + C102 * C828 - C114 * C821 +
                     C103 * C829 - C115 * C822) *
                        C47279) *
                       C47294 * C47178) *
                      C1285 +
                  (((C101 * C277 - C113 * C264 + C102 * C278 - C114 * C265 +
                     C103 * C279 - C115 * C266) *
                        C116 +
                    (C101 * C294 - C113 * C280 + C102 * C295 - C114 * C281 +
                     C103 * C296 - C115 * C282) *
                        C47279) *
                       C47294 * C47340 +
                   ((C113 * C1153 - C101 * C1165 + C114 * C1154 - C102 * C1166 +
                     C115 * C1155 - C103 * C1167) *
                        C116 +
                    (C113 * C1168 - C101 * C1180 + C114 * C1169 - C102 * C1181 +
                     C115 * C1170 - C103 * C1182) *
                        C47279) *
                       C47294 * C47178) *
                      C1286 +
                  (((C113 * C1016 - C101 * C1022 + C114 * C1017 - C102 * C1023 +
                     C115 * C1018 - C103 * C1024) *
                        C116 +
                    (C113 * C1025 - C101 * C1034 + C114 * C1026 - C102 * C1035 +
                     C115 * C1027 - C103 * C1036) *
                        C47279) *
                       C47294 * C47340 +
                   ((C101 * C1545 - C113 * C1542 + C102 * C1546 - C114 * C1543 +
                     C103 * C1547 - C115 * C1544) *
                        C116 +
                    (C101 * C1551 - C113 * C1548 + C102 * C1552 - C114 * C1549 +
                     C103 * C1553 - C115 * C1550) *
                        C47279) *
                       C47294 * C47178) *
                      C47381) *
                 C47045) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 (((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
                      C103 * C126 - C115 * C119) *
                         C116 +
                     (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
                      C103 * C140 - C115 * C129) *
                         C47279) *
                        C47294 * C47340 +
                    ((C113 * C414 - C101 * C424 + C114 * C415 - C102 * C425 +
                      C115 * C416 - C103 * C426) *
                         C116 +
                     (C113 * C427 - C101 * C444 + C114 * C428 - C102 * C445 +
                      C115 * C429 - C103 * C446) *
                         C47279) *
                        C47294 * C47178) *
                       C47339 +
                   (((C113 * C261 - C101 * C271 + C114 * C262 - C102 * C272 +
                      C115 * C263 - C103 * C273) *
                         C116 +
                     (C113 * C274 - C101 * C291 + C114 * C275 - C102 * C292 +
                      C115 * C276 - C103 * C293) *
                         C47279) *
                        C47294 * C47340 +
                    ((C101 * C817 - C113 * C812 + C102 * C818 - C114 * C813 +
                      C103 * C819 - C115 * C814) *
                         C116 +
                     (C101 * C827 - C113 * C820 + C102 * C828 - C114 * C821 +
                      C103 * C829 - C115 * C822) *
                         C47279) *
                        C47294 * C47178) *
                       C47136) *
                      C258 +
                  ((((C113 * C118 - C101 * C125 + C114 * C119 - C102 * C126 +
                      C115 * C120 - C103 * C130) *
                         C116 +
                     (C113 * C128 - C101 * C139 + C114 * C129 - C102 * C140 +
                      C115 * C131 - C103 * C141) *
                         C47279) *
                        C47294 * C47340 +
                    ((C101 * C425 - C113 * C415 + C102 * C426 - C114 * C416 +
                      C103 * C436 - C115 * C420) *
                         C116 +
                     (C101 * C445 - C113 * C428 + C102 * C446 - C114 * C429 +
                      C103 * C450 - C115 * C437) *
                         C47279) *
                        C47294 * C47178) *
                       C47339 +
                   (((C101 * C272 - C113 * C262 + C102 * C273 - C114 * C263 +
                      C103 * C283 - C115 * C267) *
                         C116 +
                     (C101 * C292 - C113 * C275 + C102 * C293 - C114 * C276 +
                      C103 * C297 - C115 * C284) *
                         C47279) *
                        C47294 * C47340 +
                    ((C113 * C813 - C101 * C818 + C114 * C814 - C102 * C819 +
                      C115 * C815 - C103 * C823) *
                         C116 +
                     (C113 * C821 - C101 * C828 + C114 * C822 - C102 * C829 +
                      C115 * C824 - C103 * C830) *
                         C47279) *
                        C47294 * C47178) *
                       C47136) *
                      C259 +
                  ((((C101 * C126 - C113 * C119 + C102 * C130 - C114 * C120 +
                      C103 * C132 - C115 * C121) *
                         C116 +
                     (C101 * C140 - C113 * C129 + C102 * C141 - C114 * C131 +
                      C103 * C142 - C115 * C133) *
                         C47279) *
                        C47294 * C47340 +
                    ((C113 * C416 - C101 * C426 + C114 * C420 - C102 * C436 +
                      C115 * C422 - C103 * C440) *
                         C116 +
                     (C113 * C429 - C101 * C446 + C114 * C437 - C102 * C450 +
                      C115 * C441 - C103 * C452) *
                         C47279) *
                        C47294 * C47178) *
                       C47339 +
                   (((C113 * C263 - C101 * C273 + C114 * C267 - C102 * C283 +
                      C115 * C269 - C103 * C287) *
                         C116 +
                     (C113 * C276 - C101 * C293 + C114 * C284 - C102 * C297 +
                      C115 * C288 - C103 * C299) *
                         C47279) *
                        C47294 * C47340 +
                    ((C101 * C819 - C113 * C814 + C102 * C823 - C114 * C815 +
                      C103 * C825 - C115 * C816) *
                         C116 +
                     (C101 * C829 - C113 * C822 + C102 * C830 - C114 * C824 +
                      C103 * C831 - C115 * C826) *
                         C47279) *
                        C47294 * C47178) *
                       C47136) *
                      C47365)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                 ((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
                     C103 * C126 - C115 * C119) *
                        C116 +
                    (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
                     C103 * C140 - C115 * C129) *
                        C47279) *
                       C47294 * C2116 +
                   ((C113 * C414 - C101 * C424 + C114 * C415 - C102 * C425 +
                     C115 * C416 - C103 * C426) *
                        C116 +
                    (C113 * C427 - C101 * C444 + C114 * C428 - C102 * C445 +
                     C115 * C429 - C103 * C446) *
                        C47279) *
                       C47294 * C2117 +
                   ((C101 * C430 - C113 * C417 + C102 * C431 - C114 * C418 +
                     C103 * C432 - C115 * C419) *
                        C116 +
                    (C101 * C447 - C113 * C433 + C102 * C448 - C114 * C434 +
                     C103 * C449 - C115 * C435) *
                        C47279) *
                       C47294 * C2118 +
                   ((C113 * C1844 - C101 * C1850 + C114 * C1845 - C102 * C1851 +
                     C115 * C1846 - C103 * C1852) *
                        C116 +
                    (C113 * C1853 - C101 * C1862 + C114 * C1854 - C102 * C1863 +
                     C115 * C1855 - C103 * C1864) *
                        C47279) *
                       C47294 * C47387) *
                      C47339 +
                  (((C113 * C261 - C101 * C271 + C114 * C262 - C102 * C272 +
                     C115 * C263 - C103 * C273) *
                        C116 +
                    (C113 * C274 - C101 * C291 + C114 * C275 - C102 * C292 +
                     C115 * C276 - C103 * C293) *
                        C47279) *
                       C47294 * C2116 +
                   ((C101 * C817 - C113 * C812 + C102 * C818 - C114 * C813 +
                     C103 * C819 - C115 * C814) *
                        C116 +
                    (C101 * C827 - C113 * C820 + C102 * C828 - C114 * C821 +
                     C103 * C829 - C115 * C822) *
                        C47279) *
                       C47294 * C2117 +
                   ((C113 * C1150 - C101 * C1159 + C114 * C1151 - C102 * C1160 +
                     C115 * C1152 - C103 * C1161) *
                        C116 +
                    (C113 * C1162 - C101 * C1177 + C114 * C1163 - C102 * C1178 +
                     C115 * C1164 - C103 * C1179) *
                        C47279) *
                       C47294 * C2118 +
                   ((C101 * C2225 - C113 * C2222 + C102 * C2226 - C114 * C2223 +
                     C103 * C2227 - C115 * C2224) *
                        C116 +
                    (C101 * C2231 - C113 * C2228 + C102 * C2232 - C114 * C2229 +
                     C103 * C2233 - C115 * C2230) *
                        C47279) *
                       C47294 * C47387) *
                      C47136) *
                 C47045) /
                    (p * q * std::sqrt(p + q));
    d2ee[12] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
                C103 * C126 - C115 * C119) *
                   C116 +
               (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
                C103 * C140 - C115 * C129) *
                   C47279) *
                  C47294 * C47091 * C47073 * C108 +
              ((C113 * C118 - C101 * C125 + C114 * C119 - C102 * C126 +
                C115 * C120 - C103 * C130) *
                   C116 +
               (C113 * C128 - C101 * C139 + C114 * C129 - C102 * C140 +
                C115 * C131 - C103 * C141) *
                   C47279) *
                  C47294 * C47091 * C47073 * C109 +
              ((C101 * C126 - C113 * C119 + C102 * C130 - C114 * C120 +
                C103 * C132 - C115 * C121) *
                   C116 +
               (C101 * C140 - C113 * C129 + C102 * C141 - C114 * C131 +
                C103 * C142 - C115 * C133) *
                   C47279) *
                  C47294 * C47091 * C47073 * C110 +
              ((C113 * C120 - C101 * C130 + C114 * C121 - C102 * C132 +
                C115 * C122 - C103 * C134) *
                   C116 +
               (C113 * C131 - C101 * C141 + C114 * C133 - C102 * C142 +
                C115 * C135 - C103 * C143) *
                   C47279) *
                  C47294 * C47091 * C47073 * C111 +
              ((C101 * C132 - C113 * C121 + C102 * C134 - C114 * C122 +
                C103 * C136 - C115 * C123) *
                   C116 +
               (C101 * C142 - C113 * C133 + C102 * C143 - C114 * C135 +
                C103 * C144 - C115 * C137) *
                   C47279) *
                  C47294 * C47091 * C47073 * C112) +
         0.5 * std::pow(Pi, 2.5) *
             ((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
                 C103 * C126 - C115 * C119) *
                    C116 +
                (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
                 C103 * C140 - C115 * C129) *
                    C47279) *
                   C47294 * C47091 * C47410 +
               ((C113 * C261 - C101 * C271 + C114 * C262 - C102 * C272 +
                 C115 * C263 - C103 * C273) *
                    C116 +
                (C113 * C274 - C101 * C291 + C114 * C275 - C102 * C292 +
                 C115 * C276 - C103 * C293) *
                    C47279) *
                   C47294 * C47091 * C47398 +
               ((C101 * C277 - C113 * C264 + C102 * C278 - C114 * C265 +
                 C103 * C279 - C115 * C266) *
                    C116 +
                (C101 * C294 - C113 * C280 + C102 * C295 - C114 * C281 +
                 C103 * C296 - C115 * C282) *
                    C47279) *
                   C47294 * C47091 * C47371) *
                  C258 +
              (((C113 * C118 - C101 * C125 + C114 * C119 - C102 * C126 +
                 C115 * C120 - C103 * C130) *
                    C116 +
                (C113 * C128 - C101 * C139 + C114 * C129 - C102 * C140 +
                 C115 * C131 - C103 * C141) *
                    C47279) *
                   C47294 * C47091 * C47410 +
               ((C101 * C272 - C113 * C262 + C102 * C273 - C114 * C263 +
                 C103 * C283 - C115 * C267) *
                    C116 +
                (C101 * C292 - C113 * C275 + C102 * C293 - C114 * C276 +
                 C103 * C297 - C115 * C284) *
                    C47279) *
                   C47294 * C47091 * C47398 +
               ((C113 * C265 - C101 * C278 + C114 * C266 - C102 * C279 +
                 C115 * C268 - C103 * C285) *
                    C116 +
                (C113 * C281 - C101 * C295 + C114 * C282 - C102 * C296 +
                 C115 * C286 - C103 * C298) *
                    C47279) *
                   C47294 * C47091 * C47371) *
                  C259 +
              (((C101 * C126 - C113 * C119 + C102 * C130 - C114 * C120 +
                 C103 * C132 - C115 * C121) *
                    C116 +
                (C101 * C140 - C113 * C129 + C102 * C141 - C114 * C131 +
                 C103 * C142 - C115 * C133) *
                    C47279) *
                   C47294 * C47091 * C47410 +
               ((C113 * C263 - C101 * C273 + C114 * C267 - C102 * C283 +
                 C115 * C269 - C103 * C287) *
                    C116 +
                (C113 * C276 - C101 * C293 + C114 * C284 - C102 * C297 +
                 C115 * C288 - C103 * C299) *
                    C47279) *
                   C47294 * C47091 * C47398 +
               ((C101 * C279 - C113 * C266 + C102 * C285 - C114 * C268 +
                 C103 * C289 - C115 * C270) *
                    C116 +
                (C101 * C296 - C113 * C282 + C102 * C298 - C114 * C286 +
                 C103 * C300 - C115 * C290) *
                    C47279) *
                   C47294 * C47091 * C47371) *
                  C47365)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) * ((((C101 * C124 - C113 * C117 + C102 * C125 -
                                 C114 * C118 + C103 * C126 - C115 * C119) *
                                    C116 +
                                (C101 * C138 - C113 * C127 + C102 * C139 -
                                 C114 * C128 + C103 * C140 - C115 * C129) *
                                    C47279) *
                                   C47294 * C47411 +
                               ((C113 * C414 - C101 * C424 + C114 * C415 -
                                 C102 * C425 + C115 * C416 - C103 * C426) *
                                    C116 +
                                (C113 * C427 - C101 * C444 + C114 * C428 -
                                 C102 * C445 + C115 * C429 - C103 * C446) *
                                    C47279) *
                                   C47294 * C47400 +
                               ((C101 * C430 - C113 * C417 + C102 * C431 -
                                 C114 * C418 + C103 * C432 - C115 * C419) *
                                    C116 +
                                (C101 * C447 - C113 * C433 + C102 * C448 -
                                 C114 * C434 + C103 * C449 - C115 * C435) *
                                    C47279) *
                                   C47294 * C47374) *
                                  C47073 * C258 +
                              (((C113 * C118 - C101 * C125 + C114 * C119 -
                                 C102 * C126 + C115 * C120 - C103 * C130) *
                                    C116 +
                                (C113 * C128 - C101 * C139 + C114 * C129 -
                                 C102 * C140 + C115 * C131 - C103 * C141) *
                                    C47279) *
                                   C47294 * C47411 +
                               ((C101 * C425 - C113 * C415 + C102 * C426 -
                                 C114 * C416 + C103 * C436 - C115 * C420) *
                                    C116 +
                                (C101 * C445 - C113 * C428 + C102 * C446 -
                                 C114 * C429 + C103 * C450 - C115 * C437) *
                                    C47279) *
                                   C47294 * C47400 +
                               ((C113 * C418 - C101 * C431 + C114 * C419 -
                                 C102 * C432 + C115 * C421 - C103 * C438) *
                                    C116 +
                                (C113 * C434 - C101 * C448 + C114 * C435 -
                                 C102 * C449 + C115 * C439 - C103 * C451) *
                                    C47279) *
                                   C47294 * C47374) *
                                  C47073 * C259 +
                              (((C101 * C126 - C113 * C119 + C102 * C130 -
                                 C114 * C120 + C103 * C132 - C115 * C121) *
                                    C116 +
                                (C101 * C140 - C113 * C129 + C102 * C141 -
                                 C114 * C131 + C103 * C142 - C115 * C133) *
                                    C47279) *
                                   C47294 * C47411 +
                               ((C113 * C416 - C101 * C426 + C114 * C420 -
                                 C102 * C436 + C115 * C422 - C103 * C440) *
                                    C116 +
                                (C113 * C429 - C101 * C446 + C114 * C437 -
                                 C102 * C450 + C115 * C441 - C103 * C452) *
                                    C47279) *
                                   C47294 * C47400 +
                               ((C101 * C432 - C113 * C419 + C102 * C438 -
                                 C114 * C421 + C103 * C442 - C115 * C423) *
                                    C116 +
                                (C101 * C449 - C113 * C435 + C102 * C451 -
                                 C114 * C439 + C103 * C453 - C115 * C443) *
                                    C47279) *
                                   C47294 * C47374) *
                                  C47073 * C47365)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
             C103 * C126 - C115 * C119) *
                C116 +
            (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
             C103 * C140 - C115 * C129) *
                C47279) *
               C47294 * C47091 * C942 +
           ((C113 * C261 - C101 * C271 + C114 * C262 - C102 * C272 +
             C115 * C263 - C103 * C273) *
                C116 +
            (C113 * C274 - C101 * C291 + C114 * C275 - C102 * C292 +
             C115 * C276 - C103 * C293) *
                C47279) *
               C47294 * C47091 * C943 +
           ((C101 * C277 - C113 * C264 + C102 * C278 - C114 * C265 +
             C103 * C279 - C115 * C266) *
                C116 +
            (C101 * C294 - C113 * C280 + C102 * C295 - C114 * C281 +
             C103 * C296 - C115 * C282) *
                C47279) *
               C47294 * C47091 * C47371) *
              C47407 +
          (((C113 * C118 - C101 * C125 + C114 * C119 - C102 * C126 +
             C115 * C120 - C103 * C130) *
                C116 +
            (C113 * C128 - C101 * C139 + C114 * C129 - C102 * C140 +
             C115 * C131 - C103 * C141) *
                C47279) *
               C47294 * C47091 * C942 +
           ((C101 * C272 - C113 * C262 + C102 * C273 - C114 * C263 +
             C103 * C283 - C115 * C267) *
                C116 +
            (C101 * C292 - C113 * C275 + C102 * C293 - C114 * C276 +
             C103 * C297 - C115 * C284) *
                C47279) *
               C47294 * C47091 * C943 +
           ((C113 * C265 - C101 * C278 + C114 * C266 - C102 * C279 +
             C115 * C268 - C103 * C285) *
                C116 +
            (C113 * C281 - C101 * C295 + C114 * C282 - C102 * C296 +
             C115 * C286 - C103 * C298) *
                C47279) *
               C47294 * C47091 * C47371) *
              C47394 +
          (((C101 * C126 - C113 * C119 + C102 * C130 - C114 * C120 +
             C103 * C132 - C115 * C121) *
                C116 +
            (C101 * C140 - C113 * C129 + C102 * C141 - C114 * C131 +
             C103 * C142 - C115 * C133) *
                C47279) *
               C47294 * C47091 * C942 +
           ((C113 * C263 - C101 * C273 + C114 * C267 - C102 * C283 +
             C115 * C269 - C103 * C287) *
                C116 +
            (C113 * C276 - C101 * C293 + C114 * C284 - C102 * C297 +
             C115 * C288 - C103 * C299) *
                C47279) *
               C47294 * C47091 * C943 +
           ((C101 * C279 - C113 * C266 + C102 * C285 - C114 * C268 +
             C103 * C289 - C115 * C270) *
                C116 +
            (C101 * C296 - C113 * C282 + C102 * C298 - C114 * C286 +
             C103 * C300 - C115 * C290) *
                C47279) *
               C47294 * C47091 * C47371) *
              C47365)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
            C103 * C126 - C115 * C119) *
               C116 +
           (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
            C103 * C140 - C115 * C129) *
               C47279) *
              C47294 * C47091 * C1010 +
          ((C113 * C261 - C101 * C271 + C114 * C262 - C102 * C272 +
            C115 * C263 - C103 * C273) *
               C116 +
           (C113 * C274 - C101 * C291 + C114 * C275 - C102 * C292 +
            C115 * C276 - C103 * C293) *
               C47279) *
              C47294 * C47091 * C1011 +
          ((C101 * C277 - C113 * C264 + C102 * C278 - C114 * C265 +
            C103 * C279 - C115 * C266) *
               C116 +
           (C101 * C294 - C113 * C280 + C102 * C295 - C114 * C281 +
            C103 * C296 - C115 * C282) *
               C47279) *
              C47294 * C47091 * C1012 +
          ((C113 * C1016 - C101 * C1022 + C114 * C1017 - C102 * C1023 +
            C115 * C1018 - C103 * C1024) *
               C116 +
           (C113 * C1025 - C101 * C1034 + C114 * C1026 - C102 * C1035 +
            C115 * C1027 - C103 * C1036) *
               C47279) *
              C47294 * C47091 * C1013 +
          ((C101 * C1028 - C113 * C1019 + C102 * C1029 - C114 * C1020 +
            C103 * C1030 - C115 * C1021) *
               C116 +
           (C101 * C1037 - C113 * C1031 + C102 * C1038 - C114 * C1032 +
            C103 * C1039 - C115 * C1033) *
               C47279) *
              C47294 * C47091 * C1014) *
         C47045) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
             C103 * C126 - C115 * C119) *
                C116 +
            (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
             C103 * C140 - C115 * C129) *
                C47279) *
               C47294 * C47411 +
           ((C113 * C414 - C101 * C424 + C114 * C415 - C102 * C425 +
             C115 * C416 - C103 * C426) *
                C116 +
            (C113 * C427 - C101 * C444 + C114 * C428 - C102 * C445 +
             C115 * C429 - C103 * C446) *
                C47279) *
               C47294 * C47400 +
           ((C101 * C430 - C113 * C417 + C102 * C431 - C114 * C418 +
             C103 * C432 - C115 * C419) *
                C116 +
            (C101 * C447 - C113 * C433 + C102 * C448 - C114 * C434 +
             C103 * C449 - C115 * C435) *
                C47279) *
               C47294 * C47374) *
              C942 +
          (((C113 * C261 - C101 * C271 + C114 * C262 - C102 * C272 +
             C115 * C263 - C103 * C273) *
                C116 +
            (C113 * C274 - C101 * C291 + C114 * C275 - C102 * C292 +
             C115 * C276 - C103 * C293) *
                C47279) *
               C47294 * C47411 +
           ((C101 * C817 - C113 * C812 + C102 * C818 - C114 * C813 +
             C103 * C819 - C115 * C814) *
                C116 +
            (C101 * C827 - C113 * C820 + C102 * C828 - C114 * C821 +
             C103 * C829 - C115 * C822) *
                C47279) *
               C47294 * C47400 +
           ((C113 * C1150 - C101 * C1159 + C114 * C1151 - C102 * C1160 +
             C115 * C1152 - C103 * C1161) *
                C116 +
            (C113 * C1162 - C101 * C1177 + C114 * C1163 - C102 * C1178 +
             C115 * C1164 - C103 * C1179) *
                C47279) *
               C47294 * C47374) *
              C943 +
          (((C101 * C277 - C113 * C264 + C102 * C278 - C114 * C265 +
             C103 * C279 - C115 * C266) *
                C116 +
            (C101 * C294 - C113 * C280 + C102 * C295 - C114 * C281 +
             C103 * C296 - C115 * C282) *
                C47279) *
               C47294 * C47411 +
           ((C113 * C1153 - C101 * C1165 + C114 * C1154 - C102 * C1166 +
             C115 * C1155 - C103 * C1167) *
                C116 +
            (C113 * C1168 - C101 * C1180 + C114 * C1169 - C102 * C1181 +
             C115 * C1170 - C103 * C1182) *
                C47279) *
               C47294 * C47400 +
           ((C101 * C1171 - C113 * C1156 + C102 * C1172 - C114 * C1157 +
             C103 * C1173 - C115 * C1158) *
                C116 +
            (C101 * C1183 - C113 * C1174 + C102 * C1184 - C114 * C1175 +
             C103 * C1185 - C115 * C1176) *
                C47279) *
               C47294 * C47374) *
              C47371) *
         C47045) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) * ((((C101 * C124 - C113 * C117 + C102 * C125 -
                                 C114 * C118 + C103 * C126 - C115 * C119) *
                                    C116 +
                                (C101 * C138 - C113 * C127 + C102 * C139 -
                                 C114 * C128 + C103 * C140 - C115 * C129) *
                                    C47279) *
                                   C47294 * C1664 +
                               ((C113 * C414 - C101 * C424 + C114 * C415 -
                                 C102 * C425 + C115 * C416 - C103 * C426) *
                                    C116 +
                                (C113 * C427 - C101 * C444 + C114 * C428 -
                                 C102 * C445 + C115 * C429 - C103 * C446) *
                                    C47279) *
                                   C47294 * C1665 +
                               ((C101 * C430 - C113 * C417 + C102 * C431 -
                                 C114 * C418 + C103 * C432 - C115 * C419) *
                                    C116 +
                                (C101 * C447 - C113 * C433 + C102 * C448 -
                                 C114 * C434 + C103 * C449 - C115 * C435) *
                                    C47279) *
                                   C47294 * C47374) *
                                  C47073 * C47407 +
                              (((C113 * C118 - C101 * C125 + C114 * C119 -
                                 C102 * C126 + C115 * C120 - C103 * C130) *
                                    C116 +
                                (C113 * C128 - C101 * C139 + C114 * C129 -
                                 C102 * C140 + C115 * C131 - C103 * C141) *
                                    C47279) *
                                   C47294 * C1664 +
                               ((C101 * C425 - C113 * C415 + C102 * C426 -
                                 C114 * C416 + C103 * C436 - C115 * C420) *
                                    C116 +
                                (C101 * C445 - C113 * C428 + C102 * C446 -
                                 C114 * C429 + C103 * C450 - C115 * C437) *
                                    C47279) *
                                   C47294 * C1665 +
                               ((C113 * C418 - C101 * C431 + C114 * C419 -
                                 C102 * C432 + C115 * C421 - C103 * C438) *
                                    C116 +
                                (C113 * C434 - C101 * C448 + C114 * C435 -
                                 C102 * C449 + C115 * C439 - C103 * C451) *
                                    C47279) *
                                   C47294 * C47374) *
                                  C47073 * C47394 +
                              (((C101 * C126 - C113 * C119 + C102 * C130 -
                                 C114 * C120 + C103 * C132 - C115 * C121) *
                                    C116 +
                                (C101 * C140 - C113 * C129 + C102 * C141 -
                                 C114 * C131 + C103 * C142 - C115 * C133) *
                                    C47279) *
                                   C47294 * C1664 +
                               ((C113 * C416 - C101 * C426 + C114 * C420 -
                                 C102 * C436 + C115 * C422 - C103 * C440) *
                                    C116 +
                                (C113 * C429 - C101 * C446 + C114 * C437 -
                                 C102 * C450 + C115 * C441 - C103 * C452) *
                                    C47279) *
                                   C47294 * C1665 +
                               ((C101 * C432 - C113 * C419 + C102 * C438 -
                                 C114 * C421 + C103 * C442 - C115 * C423) *
                                    C116 +
                                (C101 * C449 - C113 * C435 + C102 * C451 -
                                 C114 * C439 + C103 * C453 - C115 * C443) *
                                    C47279) *
                                   C47294 * C47374) *
                                  C47073 * C47365)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
             C103 * C126 - C115 * C119) *
                C116 +
            (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
             C103 * C140 - C115 * C129) *
                C47279) *
               C47294 * C1664 +
           ((C113 * C414 - C101 * C424 + C114 * C415 - C102 * C425 +
             C115 * C416 - C103 * C426) *
                C116 +
            (C113 * C427 - C101 * C444 + C114 * C428 - C102 * C445 +
             C115 * C429 - C103 * C446) *
                C47279) *
               C47294 * C1665 +
           ((C101 * C430 - C113 * C417 + C102 * C431 - C114 * C418 +
             C103 * C432 - C115 * C419) *
                C116 +
            (C101 * C447 - C113 * C433 + C102 * C448 - C114 * C434 +
             C103 * C449 - C115 * C435) *
                C47279) *
               C47294 * C47374) *
              C47410 +
          (((C113 * C261 - C101 * C271 + C114 * C262 - C102 * C272 +
             C115 * C263 - C103 * C273) *
                C116 +
            (C113 * C274 - C101 * C291 + C114 * C275 - C102 * C292 +
             C115 * C276 - C103 * C293) *
                C47279) *
               C47294 * C1664 +
           ((C101 * C817 - C113 * C812 + C102 * C818 - C114 * C813 +
             C103 * C819 - C115 * C814) *
                C116 +
            (C101 * C827 - C113 * C820 + C102 * C828 - C114 * C821 +
             C103 * C829 - C115 * C822) *
                C47279) *
               C47294 * C1665 +
           ((C113 * C1150 - C101 * C1159 + C114 * C1151 - C102 * C1160 +
             C115 * C1152 - C103 * C1161) *
                C116 +
            (C113 * C1162 - C101 * C1177 + C114 * C1163 - C102 * C1178 +
             C115 * C1164 - C103 * C1179) *
                C47279) *
               C47294 * C47374) *
              C47398 +
          (((C101 * C277 - C113 * C264 + C102 * C278 - C114 * C265 +
             C103 * C279 - C115 * C266) *
                C116 +
            (C101 * C294 - C113 * C280 + C102 * C295 - C114 * C281 +
             C103 * C296 - C115 * C282) *
                C47279) *
               C47294 * C1664 +
           ((C113 * C1153 - C101 * C1165 + C114 * C1154 - C102 * C1166 +
             C115 * C1155 - C103 * C1167) *
                C116 +
            (C113 * C1168 - C101 * C1180 + C114 * C1169 - C102 * C1181 +
             C115 * C1170 - C103 * C1182) *
                C47279) *
               C47294 * C1665 +
           ((C101 * C1171 - C113 * C1156 + C102 * C1172 - C114 * C1157 +
             C103 * C1173 - C115 * C1158) *
                C116 +
            (C101 * C1183 - C113 * C1174 + C102 * C1184 - C114 * C1175 +
             C103 * C1185 - C115 * C1176) *
                C47279) *
               C47294 * C47374) *
              C47371) *
         C47045) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
            C103 * C126 - C115 * C119) *
               C116 +
           (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
            C103 * C140 - C115 * C129) *
               C47279) *
              C47294 * C1839 +
          ((C113 * C414 - C101 * C424 + C114 * C415 - C102 * C425 +
            C115 * C416 - C103 * C426) *
               C116 +
           (C113 * C427 - C101 * C444 + C114 * C428 - C102 * C445 +
            C115 * C429 - C103 * C446) *
               C47279) *
              C47294 * C1840 +
          ((C101 * C430 - C113 * C417 + C102 * C431 - C114 * C418 +
            C103 * C432 - C115 * C419) *
               C116 +
           (C101 * C447 - C113 * C433 + C102 * C448 - C114 * C434 +
            C103 * C449 - C115 * C435) *
               C47279) *
              C47294 * C1841 +
          ((C113 * C1844 - C101 * C1850 + C114 * C1845 - C102 * C1851 +
            C115 * C1846 - C103 * C1852) *
               C116 +
           (C113 * C1853 - C101 * C1862 + C114 * C1854 - C102 * C1863 +
            C115 * C1855 - C103 * C1864) *
               C47279) *
              C47294 * C1842 +
          ((C101 * C1856 - C113 * C1847 + C102 * C1857 - C114 * C1848 +
            C103 * C1858 - C115 * C1849) *
               C116 +
           (C101 * C1865 - C113 * C1859 + C102 * C1866 - C114 * C1860 +
            C103 * C1867 - C115 * C1861) *
               C47279) *
              C47294 * C1843) *
         C47073 * C47045) /
            (p * q * std::sqrt(p + q));
    d2ee[13] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 (((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
                      C103 * C126 - C115 * C119) *
                         C116 +
                     (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
                      C103 * C140 - C115 * C129) *
                         C47279) *
                        C47294 * C47340 +
                    ((C113 * C414 - C101 * C424 + C114 * C415 - C102 * C425 +
                      C115 * C416 - C103 * C426) *
                         C116 +
                     (C113 * C427 - C101 * C444 + C114 * C428 - C102 * C445 +
                      C115 * C429 - C103 * C446) *
                         C47279) *
                        C47294 * C47178) *
                       C942 +
                   (((C113 * C261 - C101 * C271 + C114 * C262 - C102 * C272 +
                      C115 * C263 - C103 * C273) *
                         C116 +
                     (C113 * C274 - C101 * C291 + C114 * C275 - C102 * C292 +
                      C115 * C276 - C103 * C293) *
                         C47279) *
                        C47294 * C47340 +
                    ((C101 * C817 - C113 * C812 + C102 * C818 - C114 * C813 +
                      C103 * C819 - C115 * C814) *
                         C116 +
                     (C101 * C827 - C113 * C820 + C102 * C828 - C114 * C821 +
                      C103 * C829 - C115 * C822) *
                         C47279) *
                        C47294 * C47178) *
                       C943 +
                   (((C101 * C277 - C113 * C264 + C102 * C278 - C114 * C265 +
                      C103 * C279 - C115 * C266) *
                         C116 +
                     (C101 * C294 - C113 * C280 + C102 * C295 - C114 * C281 +
                      C103 * C296 - C115 * C282) *
                         C47279) *
                        C47294 * C47340 +
                    ((C113 * C1153 - C101 * C1165 + C114 * C1154 -
                      C102 * C1166 + C115 * C1155 - C103 * C1167) *
                         C116 +
                     (C113 * C1168 - C101 * C1180 + C114 * C1169 -
                      C102 * C1181 + C115 * C1170 - C103 * C1182) *
                         C47279) *
                        C47294 * C47178) *
                       C47371) *
                      C47325 +
                  ((((C113 * C118 - C101 * C125 + C114 * C119 - C102 * C126 +
                      C115 * C120 - C103 * C130) *
                         C116 +
                     (C113 * C128 - C101 * C139 + C114 * C129 - C102 * C140 +
                      C115 * C131 - C103 * C141) *
                         C47279) *
                        C47294 * C47340 +
                    ((C101 * C425 - C113 * C415 + C102 * C426 - C114 * C416 +
                      C103 * C436 - C115 * C420) *
                         C116 +
                     (C101 * C445 - C113 * C428 + C102 * C446 - C114 * C429 +
                      C103 * C450 - C115 * C437) *
                         C47279) *
                        C47294 * C47178) *
                       C942 +
                   (((C101 * C272 - C113 * C262 + C102 * C273 - C114 * C263 +
                      C103 * C283 - C115 * C267) *
                         C116 +
                     (C101 * C292 - C113 * C275 + C102 * C293 - C114 * C276 +
                      C103 * C297 - C115 * C284) *
                         C47279) *
                        C47294 * C47340 +
                    ((C113 * C813 - C101 * C818 + C114 * C814 - C102 * C819 +
                      C115 * C815 - C103 * C823) *
                         C116 +
                     (C113 * C821 - C101 * C828 + C114 * C822 - C102 * C829 +
                      C115 * C824 - C103 * C830) *
                         C47279) *
                        C47294 * C47178) *
                       C943 +
                   (((C113 * C265 - C101 * C278 + C114 * C266 - C102 * C279 +
                      C115 * C268 - C103 * C285) *
                         C116 +
                     (C113 * C281 - C101 * C295 + C114 * C282 - C102 * C296 +
                      C115 * C286 - C103 * C298) *
                         C47279) *
                        C47294 * C47340 +
                    ((C101 * C1166 - C113 * C1154 + C102 * C1167 -
                      C114 * C1155 + C103 * C1441 - C115 * C1440) *
                         C116 +
                     (C101 * C1181 - C113 * C1169 + C102 * C1182 -
                      C114 * C1170 + C103 * C1443 - C115 * C1442) *
                         C47279) *
                        C47294 * C47178) *
                       C47371) *
                      C47056)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 ((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
                     C103 * C126 - C115 * C119) *
                        C116 +
                    (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
                     C103 * C140 - C115 * C129) *
                        C47279) *
                       C47294 * C47340 +
                   ((C113 * C414 - C101 * C424 + C114 * C415 - C102 * C425 +
                     C115 * C416 - C103 * C426) *
                        C116 +
                    (C113 * C427 - C101 * C444 + C114 * C428 - C102 * C445 +
                     C115 * C429 - C103 * C446) *
                        C47279) *
                       C47294 * C47178) *
                      C47073 * C554 +
                  (((C113 * C118 - C101 * C125 + C114 * C119 - C102 * C126 +
                     C115 * C120 - C103 * C130) *
                        C116 +
                    (C113 * C128 - C101 * C139 + C114 * C129 - C102 * C140 +
                     C115 * C131 - C103 * C141) *
                        C47279) *
                       C47294 * C47340 +
                   ((C101 * C425 - C113 * C415 + C102 * C426 - C114 * C416 +
                     C103 * C436 - C115 * C420) *
                        C116 +
                    (C101 * C445 - C113 * C428 + C102 * C446 - C114 * C429 +
                     C103 * C450 - C115 * C437) *
                        C47279) *
                       C47294 * C47178) *
                      C47073 * C555 +
                  (((C101 * C126 - C113 * C119 + C102 * C130 - C114 * C120 +
                     C103 * C132 - C115 * C121) *
                        C116 +
                    (C101 * C140 - C113 * C129 + C102 * C141 - C114 * C131 +
                     C103 * C142 - C115 * C133) *
                        C47279) *
                       C47294 * C47340 +
                   ((C113 * C416 - C101 * C426 + C114 * C420 - C102 * C436 +
                     C115 * C422 - C103 * C440) *
                        C116 +
                    (C113 * C429 - C101 * C446 + C114 * C437 - C102 * C450 +
                     C115 * C441 - C103 * C452) *
                        C47279) *
                       C47294 * C47178) *
                      C47073 * C556 +
                  (((C113 * C120 - C101 * C130 + C114 * C121 - C102 * C132 +
                     C115 * C122 - C103 * C134) *
                        C116 +
                    (C113 * C131 - C101 * C141 + C114 * C133 - C102 * C142 +
                     C115 * C135 - C103 * C143) *
                        C47279) *
                       C47294 * C47340 +
                   ((C101 * C436 - C113 * C420 + C102 * C440 - C114 * C422 +
                     C103 * C663 - C115 * C662) *
                        C116 +
                    (C101 * C450 - C113 * C437 + C102 * C452 - C114 * C441 +
                     C103 * C665 - C115 * C664) *
                        C47279) *
                       C47294 * C47178) *
                      C47073 * C47375)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                 ((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
                     C103 * C126 - C115 * C119) *
                        C116 +
                    (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
                     C103 * C140 - C115 * C129) *
                        C47279) *
                       C47294 * C2116 +
                   ((C113 * C414 - C101 * C424 + C114 * C415 - C102 * C425 +
                     C115 * C416 - C103 * C426) *
                        C116 +
                    (C113 * C427 - C101 * C444 + C114 * C428 - C102 * C445 +
                     C115 * C429 - C103 * C446) *
                        C47279) *
                       C47294 * C2117 +
                   ((C101 * C430 - C113 * C417 + C102 * C431 - C114 * C418 +
                     C103 * C432 - C115 * C419) *
                        C116 +
                    (C101 * C447 - C113 * C433 + C102 * C448 - C114 * C434 +
                     C103 * C449 - C115 * C435) *
                        C47279) *
                       C47294 * C2118 +
                   ((C113 * C1844 - C101 * C1850 + C114 * C1845 - C102 * C1851 +
                     C115 * C1846 - C103 * C1852) *
                        C116 +
                    (C113 * C1853 - C101 * C1862 + C114 * C1854 - C102 * C1863 +
                     C115 * C1855 - C103 * C1864) *
                        C47279) *
                       C47294 * C47387) *
                      C47073 * C47325 +
                  (((C113 * C118 - C101 * C125 + C114 * C119 - C102 * C126 +
                     C115 * C120 - C103 * C130) *
                        C116 +
                    (C113 * C128 - C101 * C139 + C114 * C129 - C102 * C140 +
                     C115 * C131 - C103 * C141) *
                        C47279) *
                       C47294 * C2116 +
                   ((C101 * C425 - C113 * C415 + C102 * C426 - C114 * C416 +
                     C103 * C436 - C115 * C420) *
                        C116 +
                    (C101 * C445 - C113 * C428 + C102 * C446 - C114 * C429 +
                     C103 * C450 - C115 * C437) *
                        C47279) *
                       C47294 * C2117 +
                   ((C113 * C418 - C101 * C431 + C114 * C419 - C102 * C432 +
                     C115 * C421 - C103 * C438) *
                        C116 +
                    (C113 * C434 - C101 * C448 + C114 * C435 - C102 * C449 +
                     C115 * C439 - C103 * C451) *
                        C47279) *
                       C47294 * C2118 +
                   ((C101 * C1851 - C113 * C1845 + C102 * C1852 - C114 * C1846 +
                     C103 * C2121 - C115 * C2120) *
                        C116 +
                    (C101 * C1863 - C113 * C1854 + C102 * C1864 - C114 * C1855 +
                     C103 * C2123 - C115 * C2122) *
                        C47279) *
                       C47294 * C47387) *
                      C47073 * C47056)) /
                    (p * q * std::sqrt(p + q));
    d2ee[14] += (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                 ((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
                     C103 * C126 - C115 * C119) *
                        C116 +
                    (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
                     C103 * C140 - C115 * C129) *
                        C47279) *
                       C47294 * C47091 * C47410 +
                   ((C113 * C261 - C101 * C271 + C114 * C262 - C102 * C272 +
                     C115 * C263 - C103 * C273) *
                        C116 +
                    (C113 * C274 - C101 * C291 + C114 * C275 - C102 * C292 +
                     C115 * C276 - C103 * C293) *
                        C47279) *
                       C47294 * C47091 * C47398 +
                   ((C101 * C277 - C113 * C264 + C102 * C278 - C114 * C265 +
                     C103 * C279 - C115 * C266) *
                        C116 +
                    (C101 * C294 - C113 * C280 + C102 * C295 - C114 * C281 +
                     C103 * C296 - C115 * C282) *
                        C47279) *
                       C47294 * C47091 * C47371) *
                      C258 +
                  (((C113 * C118 - C101 * C125 + C114 * C119 - C102 * C126 +
                     C115 * C120 - C103 * C130) *
                        C116 +
                    (C113 * C128 - C101 * C139 + C114 * C129 - C102 * C140 +
                     C115 * C131 - C103 * C141) *
                        C47279) *
                       C47294 * C47091 * C47410 +
                   ((C101 * C272 - C113 * C262 + C102 * C273 - C114 * C263 +
                     C103 * C283 - C115 * C267) *
                        C116 +
                    (C101 * C292 - C113 * C275 + C102 * C293 - C114 * C276 +
                     C103 * C297 - C115 * C284) *
                        C47279) *
                       C47294 * C47091 * C47398 +
                   ((C113 * C265 - C101 * C278 + C114 * C266 - C102 * C279 +
                     C115 * C268 - C103 * C285) *
                        C116 +
                    (C113 * C281 - C101 * C295 + C114 * C282 - C102 * C296 +
                     C115 * C286 - C103 * C298) *
                        C47279) *
                       C47294 * C47091 * C47371) *
                      C259 +
                  (((C101 * C126 - C113 * C119 + C102 * C130 - C114 * C120 +
                     C103 * C132 - C115 * C121) *
                        C116 +
                    (C101 * C140 - C113 * C129 + C102 * C141 - C114 * C131 +
                     C103 * C142 - C115 * C133) *
                        C47279) *
                       C47294 * C47091 * C47410 +
                   ((C113 * C263 - C101 * C273 + C114 * C267 - C102 * C283 +
                     C115 * C269 - C103 * C287) *
                        C116 +
                    (C113 * C276 - C101 * C293 + C114 * C284 - C102 * C297 +
                     C115 * C288 - C103 * C299) *
                        C47279) *
                       C47294 * C47091 * C47398 +
                   ((C101 * C279 - C113 * C266 + C102 * C285 - C114 * C268 +
                     C103 * C289 - C115 * C270) *
                        C116 +
                    (C101 * C296 - C113 * C282 + C102 * C298 - C114 * C286 +
                     C103 * C300 - C115 * C290) *
                        C47279) *
                       C47294 * C47091 * C47371) *
                      C47365)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                 (((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
                    C103 * C126 - C115 * C119) *
                       C116 +
                   (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
                    C103 * C140 - C115 * C129) *
                       C47279) *
                      C47294 * C47091 * C47073 * C108 +
                  ((C113 * C118 - C101 * C125 + C114 * C119 - C102 * C126 +
                    C115 * C120 - C103 * C130) *
                       C116 +
                   (C113 * C128 - C101 * C139 + C114 * C129 - C102 * C140 +
                    C115 * C131 - C103 * C141) *
                       C47279) *
                      C47294 * C47091 * C47073 * C109 +
                  ((C101 * C126 - C113 * C119 + C102 * C130 - C114 * C120 +
                    C103 * C132 - C115 * C121) *
                       C116 +
                   (C101 * C140 - C113 * C129 + C102 * C141 - C114 * C131 +
                    C103 * C142 - C115 * C133) *
                       C47279) *
                      C47294 * C47091 * C47073 * C110 +
                  ((C113 * C120 - C101 * C130 + C114 * C121 - C102 * C132 +
                    C115 * C122 - C103 * C134) *
                       C116 +
                   (C113 * C131 - C101 * C141 + C114 * C133 - C102 * C142 +
                    C115 * C135 - C103 * C143) *
                       C47279) *
                      C47294 * C47091 * C47073 * C111 +
                  ((C101 * C132 - C113 * C121 + C102 * C134 - C114 * C122 +
                    C103 * C136 - C115 * C123) *
                       C116 +
                   (C101 * C142 - C113 * C133 + C102 * C143 - C114 * C135 +
                    C103 * C144 - C115 * C137) *
                       C47279) *
                      C47294 * C47091 * C47073 * C112)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                 ((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
                     C103 * C126 - C115 * C119) *
                        C116 +
                    (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
                     C103 * C140 - C115 * C129) *
                        C47279) *
                       C47294 * C47091 * C942 +
                   ((C113 * C261 - C101 * C271 + C114 * C262 - C102 * C272 +
                     C115 * C263 - C103 * C273) *
                        C116 +
                    (C113 * C274 - C101 * C291 + C114 * C275 - C102 * C292 +
                     C115 * C276 - C103 * C293) *
                        C47279) *
                       C47294 * C47091 * C943 +
                   ((C101 * C277 - C113 * C264 + C102 * C278 - C114 * C265 +
                     C103 * C279 - C115 * C266) *
                        C116 +
                    (C101 * C294 - C113 * C280 + C102 * C295 - C114 * C281 +
                     C103 * C296 - C115 * C282) *
                        C47279) *
                       C47294 * C47091 * C47371) *
                      C47407 +
                  (((C113 * C118 - C101 * C125 + C114 * C119 - C102 * C126 +
                     C115 * C120 - C103 * C130) *
                        C116 +
                    (C113 * C128 - C101 * C139 + C114 * C129 - C102 * C140 +
                     C115 * C131 - C103 * C141) *
                        C47279) *
                       C47294 * C47091 * C942 +
                   ((C101 * C272 - C113 * C262 + C102 * C273 - C114 * C263 +
                     C103 * C283 - C115 * C267) *
                        C116 +
                    (C101 * C292 - C113 * C275 + C102 * C293 - C114 * C276 +
                     C103 * C297 - C115 * C284) *
                        C47279) *
                       C47294 * C47091 * C943 +
                   ((C113 * C265 - C101 * C278 + C114 * C266 - C102 * C279 +
                     C115 * C268 - C103 * C285) *
                        C116 +
                    (C113 * C281 - C101 * C295 + C114 * C282 - C102 * C296 +
                     C115 * C286 - C103 * C298) *
                        C47279) *
                       C47294 * C47091 * C47371) *
                      C47394 +
                  (((C101 * C126 - C113 * C119 + C102 * C130 - C114 * C120 +
                     C103 * C132 - C115 * C121) *
                        C116 +
                    (C101 * C140 - C113 * C129 + C102 * C141 - C114 * C131 +
                     C103 * C142 - C115 * C133) *
                        C47279) *
                       C47294 * C47091 * C942 +
                   ((C113 * C263 - C101 * C273 + C114 * C267 - C102 * C283 +
                     C115 * C269 - C103 * C287) *
                        C116 +
                    (C113 * C276 - C101 * C293 + C114 * C284 - C102 * C297 +
                     C115 * C288 - C103 * C299) *
                        C47279) *
                       C47294 * C47091 * C943 +
                   ((C101 * C279 - C113 * C266 + C102 * C285 - C114 * C268 +
                     C103 * C289 - C115 * C270) *
                        C116 +
                    (C101 * C296 - C113 * C282 + C102 * C298 - C114 * C286 +
                     C103 * C300 - C115 * C290) *
                        C47279) *
                       C47294 * C47091 * C47371) *
                      C47365)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                 (((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
                    C103 * C126 - C115 * C119) *
                       C116 +
                   (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
                    C103 * C140 - C115 * C129) *
                       C47279) *
                      C47294 * C47091 * C1010 +
                  ((C113 * C261 - C101 * C271 + C114 * C262 - C102 * C272 +
                    C115 * C263 - C103 * C273) *
                       C116 +
                   (C113 * C274 - C101 * C291 + C114 * C275 - C102 * C292 +
                    C115 * C276 - C103 * C293) *
                       C47279) *
                      C47294 * C47091 * C1011 +
                  ((C101 * C277 - C113 * C264 + C102 * C278 - C114 * C265 +
                    C103 * C279 - C115 * C266) *
                       C116 +
                   (C101 * C294 - C113 * C280 + C102 * C295 - C114 * C281 +
                    C103 * C296 - C115 * C282) *
                       C47279) *
                      C47294 * C47091 * C1012 +
                  ((C113 * C1016 - C101 * C1022 + C114 * C1017 - C102 * C1023 +
                    C115 * C1018 - C103 * C1024) *
                       C116 +
                   (C113 * C1025 - C101 * C1034 + C114 * C1026 - C102 * C1035 +
                    C115 * C1027 - C103 * C1036) *
                       C47279) *
                      C47294 * C47091 * C1013 +
                  ((C101 * C1028 - C113 * C1019 + C102 * C1029 - C114 * C1020 +
                    C103 * C1030 - C115 * C1021) *
                       C116 +
                   (C101 * C1037 - C113 * C1031 + C102 * C1038 - C114 * C1032 +
                    C103 * C1039 - C115 * C1033) *
                       C47279) *
                      C47294 * C47091 * C1014) *
                 C47045) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 ((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
                     C103 * C126 - C115 * C119) *
                        C116 +
                    (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
                     C103 * C140 - C115 * C129) *
                        C47279) *
                       C47294 * C1664 +
                   ((C113 * C414 - C101 * C424 + C114 * C415 - C102 * C425 +
                     C115 * C416 - C103 * C426) *
                        C116 +
                    (C113 * C427 - C101 * C444 + C114 * C428 - C102 * C445 +
                     C115 * C429 - C103 * C446) *
                        C47279) *
                       C47294 * C1665 +
                   ((C101 * C430 - C113 * C417 + C102 * C431 - C114 * C418 +
                     C103 * C432 - C115 * C419) *
                        C116 +
                    (C101 * C447 - C113 * C433 + C102 * C448 - C114 * C434 +
                     C103 * C449 - C115 * C435) *
                        C47279) *
                       C47294 * C47374) *
                      C47073 * C47407 +
                  (((C113 * C118 - C101 * C125 + C114 * C119 - C102 * C126 +
                     C115 * C120 - C103 * C130) *
                        C116 +
                    (C113 * C128 - C101 * C139 + C114 * C129 - C102 * C140 +
                     C115 * C131 - C103 * C141) *
                        C47279) *
                       C47294 * C1664 +
                   ((C101 * C425 - C113 * C415 + C102 * C426 - C114 * C416 +
                     C103 * C436 - C115 * C420) *
                        C116 +
                    (C101 * C445 - C113 * C428 + C102 * C446 - C114 * C429 +
                     C103 * C450 - C115 * C437) *
                        C47279) *
                       C47294 * C1665 +
                   ((C113 * C418 - C101 * C431 + C114 * C419 - C102 * C432 +
                     C115 * C421 - C103 * C438) *
                        C116 +
                    (C113 * C434 - C101 * C448 + C114 * C435 - C102 * C449 +
                     C115 * C439 - C103 * C451) *
                        C47279) *
                       C47294 * C47374) *
                      C47073 * C47394 +
                  (((C101 * C126 - C113 * C119 + C102 * C130 - C114 * C120 +
                     C103 * C132 - C115 * C121) *
                        C116 +
                    (C101 * C140 - C113 * C129 + C102 * C141 - C114 * C131 +
                     C103 * C142 - C115 * C133) *
                        C47279) *
                       C47294 * C1664 +
                   ((C113 * C416 - C101 * C426 + C114 * C420 - C102 * C436 +
                     C115 * C422 - C103 * C440) *
                        C116 +
                    (C113 * C429 - C101 * C446 + C114 * C437 - C102 * C450 +
                     C115 * C441 - C103 * C452) *
                        C47279) *
                       C47294 * C1665 +
                   ((C101 * C432 - C113 * C419 + C102 * C438 - C114 * C421 +
                     C103 * C442 - C115 * C423) *
                        C116 +
                    (C101 * C449 - C113 * C435 + C102 * C451 - C114 * C439 +
                     C103 * C453 - C115 * C443) *
                        C47279) *
                       C47294 * C47374) *
                      C47073 * C47365)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 ((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
                     C103 * C126 - C115 * C119) *
                        C116 +
                    (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
                     C103 * C140 - C115 * C129) *
                        C47279) *
                       C47294 * C1664 +
                   ((C113 * C414 - C101 * C424 + C114 * C415 - C102 * C425 +
                     C115 * C416 - C103 * C426) *
                        C116 +
                    (C113 * C427 - C101 * C444 + C114 * C428 - C102 * C445 +
                     C115 * C429 - C103 * C446) *
                        C47279) *
                       C47294 * C1665 +
                   ((C101 * C430 - C113 * C417 + C102 * C431 - C114 * C418 +
                     C103 * C432 - C115 * C419) *
                        C116 +
                    (C101 * C447 - C113 * C433 + C102 * C448 - C114 * C434 +
                     C103 * C449 - C115 * C435) *
                        C47279) *
                       C47294 * C47374) *
                      C47410 +
                  (((C113 * C261 - C101 * C271 + C114 * C262 - C102 * C272 +
                     C115 * C263 - C103 * C273) *
                        C116 +
                    (C113 * C274 - C101 * C291 + C114 * C275 - C102 * C292 +
                     C115 * C276 - C103 * C293) *
                        C47279) *
                       C47294 * C1664 +
                   ((C101 * C817 - C113 * C812 + C102 * C818 - C114 * C813 +
                     C103 * C819 - C115 * C814) *
                        C116 +
                    (C101 * C827 - C113 * C820 + C102 * C828 - C114 * C821 +
                     C103 * C829 - C115 * C822) *
                        C47279) *
                       C47294 * C1665 +
                   ((C113 * C1150 - C101 * C1159 + C114 * C1151 - C102 * C1160 +
                     C115 * C1152 - C103 * C1161) *
                        C116 +
                    (C113 * C1162 - C101 * C1177 + C114 * C1163 - C102 * C1178 +
                     C115 * C1164 - C103 * C1179) *
                        C47279) *
                       C47294 * C47374) *
                      C47398 +
                  (((C101 * C277 - C113 * C264 + C102 * C278 - C114 * C265 +
                     C103 * C279 - C115 * C266) *
                        C116 +
                    (C101 * C294 - C113 * C280 + C102 * C295 - C114 * C281 +
                     C103 * C296 - C115 * C282) *
                        C47279) *
                       C47294 * C1664 +
                   ((C113 * C1153 - C101 * C1165 + C114 * C1154 - C102 * C1166 +
                     C115 * C1155 - C103 * C1167) *
                        C116 +
                    (C113 * C1168 - C101 * C1180 + C114 * C1169 - C102 * C1181 +
                     C115 * C1170 - C103 * C1182) *
                        C47279) *
                       C47294 * C1665 +
                   ((C101 * C1171 - C113 * C1156 + C102 * C1172 - C114 * C1157 +
                     C103 * C1173 - C115 * C1158) *
                        C116 +
                    (C101 * C1183 - C113 * C1174 + C102 * C1184 - C114 * C1175 +
                     C103 * C1185 - C115 * C1176) *
                        C47279) *
                       C47294 * C47374) *
                      C47371) *
                 C47045) /
                    (p * q * std::sqrt(p + q));
    d2ee[15] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 (((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
                      C103 * C126 - C115 * C119) *
                         C116 +
                     (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
                      C103 * C140 - C115 * C129) *
                         C47279) *
                        C47294 * C3094 +
                    ((C113 * C414 - C101 * C424 + C114 * C415 - C102 * C425 +
                      C115 * C416 - C103 * C426) *
                         C116 +
                     (C113 * C427 - C101 * C444 + C114 * C428 - C102 * C445 +
                      C115 * C429 - C103 * C446) *
                         C47279) *
                        C47294 * C47178) *
                       C47339 +
                   (((C113 * C261 - C101 * C271 + C114 * C262 - C102 * C272 +
                      C115 * C263 - C103 * C273) *
                         C116 +
                     (C113 * C274 - C101 * C291 + C114 * C275 - C102 * C292 +
                      C115 * C276 - C103 * C293) *
                         C47279) *
                        C47294 * C3094 +
                    ((C101 * C817 - C113 * C812 + C102 * C818 - C114 * C813 +
                      C103 * C819 - C115 * C814) *
                         C116 +
                     (C101 * C827 - C113 * C820 + C102 * C828 - C114 * C821 +
                      C103 * C829 - C115 * C822) *
                         C47279) *
                        C47294 * C47178) *
                       C47136) *
                      C47050 +
                  ((((C113 * C118 - C101 * C125 + C114 * C119 - C102 * C126 +
                      C115 * C120 - C103 * C130) *
                         C116 +
                     (C113 * C128 - C101 * C139 + C114 * C129 - C102 * C140 +
                      C115 * C131 - C103 * C141) *
                         C47279) *
                        C47294 * C3094 +
                    ((C101 * C425 - C113 * C415 + C102 * C426 - C114 * C416 +
                      C103 * C436 - C115 * C420) *
                         C116 +
                     (C101 * C445 - C113 * C428 + C102 * C446 - C114 * C429 +
                      C103 * C450 - C115 * C437) *
                         C47279) *
                        C47294 * C47178) *
                       C47339 +
                   (((C101 * C272 - C113 * C262 + C102 * C273 - C114 * C263 +
                      C103 * C283 - C115 * C267) *
                         C116 +
                     (C101 * C292 - C113 * C275 + C102 * C293 - C114 * C276 +
                      C103 * C297 - C115 * C284) *
                         C47279) *
                        C47294 * C3094 +
                    ((C113 * C813 - C101 * C818 + C114 * C814 - C102 * C819 +
                      C115 * C815 - C103 * C823) *
                         C116 +
                     (C113 * C821 - C101 * C828 + C114 * C822 - C102 * C829 +
                      C115 * C824 - C103 * C830) *
                         C47279) *
                        C47294 * C47178) *
                       C47136) *
                      C47059 +
                  ((((C101 * C126 - C113 * C119 + C102 * C130 - C114 * C120 +
                      C103 * C132 - C115 * C121) *
                         C116 +
                     (C101 * C140 - C113 * C129 + C102 * C141 - C114 * C131 +
                      C103 * C142 - C115 * C133) *
                         C47279) *
                        C47294 * C3094 +
                    ((C113 * C416 - C101 * C426 + C114 * C420 - C102 * C436 +
                      C115 * C422 - C103 * C440) *
                         C116 +
                     (C113 * C429 - C101 * C446 + C114 * C437 - C102 * C450 +
                      C115 * C441 - C103 * C452) *
                         C47279) *
                        C47294 * C47178) *
                       C47339 +
                   (((C113 * C263 - C101 * C273 + C114 * C267 - C102 * C283 +
                      C115 * C269 - C103 * C287) *
                         C116 +
                     (C113 * C276 - C101 * C293 + C114 * C284 - C102 * C297 +
                      C115 * C288 - C103 * C299) *
                         C47279) *
                        C47294 * C3094 +
                    ((C101 * C819 - C113 * C814 + C102 * C823 - C114 * C815 +
                      C103 * C825 - C115 * C816) *
                         C116 +
                     (C101 * C829 - C113 * C822 + C102 * C830 - C114 * C824 +
                      C103 * C831 - C115 * C826) *
                         C47279) *
                        C47294 * C47178) *
                       C47136) *
                      C2703)) /
                (p * q * std::sqrt(p + q));
    d2ee[16] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 (((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
                      C103 * C126 - C115 * C119) *
                         C116 +
                     (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
                      C103 * C140 - C115 * C129) *
                         C47279) *
                        C47294 * C47174 +
                    ((C113 * C414 - C101 * C424 + C114 * C415 - C102 * C425 +
                      C115 * C416 - C103 * C426) *
                         C116 +
                     (C113 * C427 - C101 * C444 + C114 * C428 - C102 * C445 +
                      C115 * C429 - C103 * C446) *
                         C47279) *
                        C47294 * C47181 +
                    ((C101 * C430 - C113 * C417 + C102 * C431 - C114 * C418 +
                      C103 * C432 - C115 * C419) *
                         C116 +
                     (C101 * C447 - C113 * C433 + C102 * C448 - C114 * C434 +
                      C103 * C449 - C115 * C435) *
                         C47279) *
                        C47294 * C3602) *
                       C47339 +
                   (((C113 * C261 - C101 * C271 + C114 * C262 - C102 * C272 +
                      C115 * C263 - C103 * C273) *
                         C116 +
                     (C113 * C274 - C101 * C291 + C114 * C275 - C102 * C292 +
                      C115 * C276 - C103 * C293) *
                         C47279) *
                        C47294 * C47174 +
                    ((C101 * C817 - C113 * C812 + C102 * C818 - C114 * C813 +
                      C103 * C819 - C115 * C814) *
                         C116 +
                     (C101 * C827 - C113 * C820 + C102 * C828 - C114 * C821 +
                      C103 * C829 - C115 * C822) *
                         C47279) *
                        C47294 * C47181 +
                    ((C113 * C1150 - C101 * C1159 + C114 * C1151 -
                      C102 * C1160 + C115 * C1152 - C103 * C1161) *
                         C116 +
                     (C113 * C1162 - C101 * C1177 + C114 * C1163 -
                      C102 * C1178 + C115 * C1164 - C103 * C1179) *
                         C47279) *
                        C47294 * C3602) *
                       C47136) *
                      C2440 +
                  ((((C113 * C118 - C101 * C125 + C114 * C119 - C102 * C126 +
                      C115 * C120 - C103 * C130) *
                         C116 +
                     (C113 * C128 - C101 * C139 + C114 * C129 - C102 * C140 +
                      C115 * C131 - C103 * C141) *
                         C47279) *
                        C47294 * C47174 +
                    ((C101 * C425 - C113 * C415 + C102 * C426 - C114 * C416 +
                      C103 * C436 - C115 * C420) *
                         C116 +
                     (C101 * C445 - C113 * C428 + C102 * C446 - C114 * C429 +
                      C103 * C450 - C115 * C437) *
                         C47279) *
                        C47294 * C47181 +
                    ((C113 * C418 - C101 * C431 + C114 * C419 - C102 * C432 +
                      C115 * C421 - C103 * C438) *
                         C116 +
                     (C113 * C434 - C101 * C448 + C114 * C435 - C102 * C449 +
                      C115 * C439 - C103 * C451) *
                         C47279) *
                        C47294 * C3602) *
                       C47339 +
                   (((C101 * C272 - C113 * C262 + C102 * C273 - C114 * C263 +
                      C103 * C283 - C115 * C267) *
                         C116 +
                     (C101 * C292 - C113 * C275 + C102 * C293 - C114 * C276 +
                      C103 * C297 - C115 * C284) *
                         C47279) *
                        C47294 * C47174 +
                    ((C113 * C813 - C101 * C818 + C114 * C814 - C102 * C819 +
                      C115 * C815 - C103 * C823) *
                         C116 +
                     (C113 * C821 - C101 * C828 + C114 * C822 - C102 * C829 +
                      C115 * C824 - C103 * C830) *
                         C47279) *
                        C47294 * C47181 +
                    ((C101 * C1160 - C113 * C1151 + C102 * C1161 -
                      C114 * C1152 + C103 * C2015 - C115 * C2014) *
                         C116 +
                     (C101 * C1178 - C113 * C1163 + C102 * C1179 -
                      C114 * C1164 + C103 * C2017 - C115 * C2016) *
                         C47279) *
                        C47294 * C3602) *
                       C47136) *
                      C47056)) /
                (p * q * std::sqrt(p + q));
    d2ee[17] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 (((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
                      C103 * C126 - C115 * C119) *
                         C116 +
                     (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
                      C103 * C140 - C115 * C129) *
                         C47279) *
                        C47294 * C3094 +
                    ((C113 * C414 - C101 * C424 + C114 * C415 - C102 * C425 +
                      C115 * C416 - C103 * C426) *
                         C116 +
                     (C113 * C427 - C101 * C444 + C114 * C428 - C102 * C445 +
                      C115 * C429 - C103 * C446) *
                         C47279) *
                        C47294 * C47178) *
                       C47410 +
                   (((C113 * C261 - C101 * C271 + C114 * C262 - C102 * C272 +
                      C115 * C263 - C103 * C273) *
                         C116 +
                     (C113 * C274 - C101 * C291 + C114 * C275 - C102 * C292 +
                      C115 * C276 - C103 * C293) *
                         C47279) *
                        C47294 * C3094 +
                    ((C101 * C817 - C113 * C812 + C102 * C818 - C114 * C813 +
                      C103 * C819 - C115 * C814) *
                         C116 +
                     (C101 * C827 - C113 * C820 + C102 * C828 - C114 * C821 +
                      C103 * C829 - C115 * C822) *
                         C47279) *
                        C47294 * C47178) *
                       C47398 +
                   (((C101 * C277 - C113 * C264 + C102 * C278 - C114 * C265 +
                      C103 * C279 - C115 * C266) *
                         C116 +
                     (C101 * C294 - C113 * C280 + C102 * C295 - C114 * C281 +
                      C103 * C296 - C115 * C282) *
                         C47279) *
                        C47294 * C3094 +
                    ((C113 * C1153 - C101 * C1165 + C114 * C1154 -
                      C102 * C1166 + C115 * C1155 - C103 * C1167) *
                         C116 +
                     (C113 * C1168 - C101 * C1180 + C114 * C1169 -
                      C102 * C1181 + C115 * C1170 - C103 * C1182) *
                         C47279) *
                        C47294 * C47178) *
                       C47371) *
                      C2440 +
                  ((((C113 * C118 - C101 * C125 + C114 * C119 - C102 * C126 +
                      C115 * C120 - C103 * C130) *
                         C116 +
                     (C113 * C128 - C101 * C139 + C114 * C129 - C102 * C140 +
                      C115 * C131 - C103 * C141) *
                         C47279) *
                        C47294 * C3094 +
                    ((C101 * C425 - C113 * C415 + C102 * C426 - C114 * C416 +
                      C103 * C436 - C115 * C420) *
                         C116 +
                     (C101 * C445 - C113 * C428 + C102 * C446 - C114 * C429 +
                      C103 * C450 - C115 * C437) *
                         C47279) *
                        C47294 * C47178) *
                       C47410 +
                   (((C101 * C272 - C113 * C262 + C102 * C273 - C114 * C263 +
                      C103 * C283 - C115 * C267) *
                         C116 +
                     (C101 * C292 - C113 * C275 + C102 * C293 - C114 * C276 +
                      C103 * C297 - C115 * C284) *
                         C47279) *
                        C47294 * C3094 +
                    ((C113 * C813 - C101 * C818 + C114 * C814 - C102 * C819 +
                      C115 * C815 - C103 * C823) *
                         C116 +
                     (C113 * C821 - C101 * C828 + C114 * C822 - C102 * C829 +
                      C115 * C824 - C103 * C830) *
                         C47279) *
                        C47294 * C47178) *
                       C47398 +
                   (((C113 * C265 - C101 * C278 + C114 * C266 - C102 * C279 +
                      C115 * C268 - C103 * C285) *
                         C116 +
                     (C113 * C281 - C101 * C295 + C114 * C282 - C102 * C296 +
                      C115 * C286 - C103 * C298) *
                         C47279) *
                        C47294 * C3094 +
                    ((C101 * C1166 - C113 * C1154 + C102 * C1167 -
                      C114 * C1155 + C103 * C1441 - C115 * C1440) *
                         C116 +
                     (C101 * C1181 - C113 * C1169 + C102 * C1182 -
                      C114 * C1170 + C103 * C1443 - C115 * C1442) *
                         C47279) *
                        C47294 * C47178) *
                       C47371) *
                      C47056)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 ((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
                     C103 * C126 - C115 * C119) *
                        C116 +
                    (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
                     C103 * C140 - C115 * C129) *
                        C47279) *
                       C47294 * C3094 +
                   ((C113 * C414 - C101 * C424 + C114 * C415 - C102 * C425 +
                     C115 * C416 - C103 * C426) *
                        C116 +
                    (C113 * C427 - C101 * C444 + C114 * C428 - C102 * C445 +
                     C115 * C429 - C103 * C446) *
                        C47279) *
                       C47294 * C47178) *
                      C47073 * C47416 +
                  (((C113 * C118 - C101 * C125 + C114 * C119 - C102 * C126 +
                     C115 * C120 - C103 * C130) *
                        C116 +
                    (C113 * C128 - C101 * C139 + C114 * C129 - C102 * C140 +
                     C115 * C131 - C103 * C141) *
                        C47279) *
                       C47294 * C3094 +
                   ((C101 * C425 - C113 * C415 + C102 * C426 - C114 * C416 +
                     C103 * C436 - C115 * C420) *
                        C116 +
                    (C101 * C445 - C113 * C428 + C102 * C446 - C114 * C429 +
                     C103 * C450 - C115 * C437) *
                        C47279) *
                       C47294 * C47178) *
                      C47073 * C47409 +
                  (((C101 * C126 - C113 * C119 + C102 * C130 - C114 * C120 +
                     C103 * C132 - C115 * C121) *
                        C116 +
                    (C101 * C140 - C113 * C129 + C102 * C141 - C114 * C131 +
                     C103 * C142 - C115 * C133) *
                        C47279) *
                       C47294 * C3094 +
                   ((C113 * C416 - C101 * C426 + C114 * C420 - C102 * C436 +
                     C115 * C422 - C103 * C440) *
                        C116 +
                    (C113 * C429 - C101 * C446 + C114 * C437 - C102 * C450 +
                     C115 * C441 - C103 * C452) *
                        C47279) *
                       C47294 * C47178) *
                      C47073 * C47396 +
                  (((C113 * C120 - C101 * C130 + C114 * C121 - C102 * C132 +
                     C115 * C122 - C103 * C134) *
                        C116 +
                    (C113 * C131 - C101 * C141 + C114 * C133 - C102 * C142 +
                     C115 * C135 - C103 * C143) *
                        C47279) *
                       C47294 * C3094 +
                   ((C101 * C436 - C113 * C420 + C102 * C440 - C114 * C422 +
                     C103 * C663 - C115 * C662) *
                        C116 +
                    (C101 * C450 - C113 * C437 + C102 * C452 - C114 * C441 +
                     C103 * C665 - C115 * C664) *
                        C47279) *
                       C47294 * C47178) *
                      C47073 * C47375)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                 ((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
                     C103 * C126 - C115 * C119) *
                        C116 +
                    (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
                     C103 * C140 - C115 * C129) *
                        C47279) *
                       C47294 * C47418 +
                   ((C113 * C414 - C101 * C424 + C114 * C415 - C102 * C425 +
                     C115 * C416 - C103 * C426) *
                        C116 +
                    (C113 * C427 - C101 * C444 + C114 * C428 - C102 * C445 +
                     C115 * C429 - C103 * C446) *
                        C47279) *
                       C47294 * C47415 +
                   ((C101 * C430 - C113 * C417 + C102 * C431 - C114 * C418 +
                     C103 * C432 - C115 * C419) *
                        C116 +
                    (C101 * C447 - C113 * C433 + C102 * C448 - C114 * C434 +
                     C103 * C449 - C115 * C435) *
                        C47279) *
                       C47294 * C47406 +
                   ((C113 * C1844 - C101 * C1850 + C114 * C1845 - C102 * C1851 +
                     C115 * C1846 - C103 * C1852) *
                        C116 +
                    (C113 * C1853 - C101 * C1862 + C114 * C1854 - C102 * C1863 +
                     C115 * C1855 - C103 * C1864) *
                        C47279) *
                       C47294 * C47387) *
                      C47073 * C2440 +
                  (((C113 * C118 - C101 * C125 + C114 * C119 - C102 * C126 +
                     C115 * C120 - C103 * C130) *
                        C116 +
                    (C113 * C128 - C101 * C139 + C114 * C129 - C102 * C140 +
                     C115 * C131 - C103 * C141) *
                        C47279) *
                       C47294 * C47418 +
                   ((C101 * C425 - C113 * C415 + C102 * C426 - C114 * C416 +
                     C103 * C436 - C115 * C420) *
                        C116 +
                    (C101 * C445 - C113 * C428 + C102 * C446 - C114 * C429 +
                     C103 * C450 - C115 * C437) *
                        C47279) *
                       C47294 * C47415 +
                   ((C113 * C418 - C101 * C431 + C114 * C419 - C102 * C432 +
                     C115 * C421 - C103 * C438) *
                        C116 +
                    (C113 * C434 - C101 * C448 + C114 * C435 - C102 * C449 +
                     C115 * C439 - C103 * C451) *
                        C47279) *
                       C47294 * C47406 +
                   ((C101 * C1851 - C113 * C1845 + C102 * C1852 - C114 * C1846 +
                     C103 * C2121 - C115 * C2120) *
                        C116 +
                    (C101 * C1863 - C113 * C1854 + C102 * C1864 - C114 * C1855 +
                     C103 * C2123 - C115 * C2122) *
                        C47279) *
                       C47294 * C47387) *
                      C47073 * C47056)) /
                    (p * q * std::sqrt(p + q));
    d2ee[18] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 ((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
                     C103 * C126 - C115 * C119) *
                        C116 +
                    (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
                     C103 * C140 - C115 * C129) *
                        C47279) *
                       C47294 * C47174 +
                   ((C113 * C414 - C101 * C424 + C114 * C415 - C102 * C425 +
                     C115 * C416 - C103 * C426) *
                        C116 +
                    (C113 * C427 - C101 * C444 + C114 * C428 - C102 * C445 +
                     C115 * C429 - C103 * C446) *
                        C47279) *
                       C47294 * C47181 +
                   ((C101 * C430 - C113 * C417 + C102 * C431 - C114 * C418 +
                     C103 * C432 - C115 * C419) *
                        C116 +
                    (C101 * C447 - C113 * C433 + C102 * C448 - C114 * C434 +
                     C103 * C449 - C115 * C435) *
                        C47279) *
                       C47294 * C3602) *
                      C47073 * C47050 +
                  (((C113 * C118 - C101 * C125 + C114 * C119 - C102 * C126 +
                     C115 * C120 - C103 * C130) *
                        C116 +
                    (C113 * C128 - C101 * C139 + C114 * C129 - C102 * C140 +
                     C115 * C131 - C103 * C141) *
                        C47279) *
                       C47294 * C47174 +
                   ((C101 * C425 - C113 * C415 + C102 * C426 - C114 * C416 +
                     C103 * C436 - C115 * C420) *
                        C116 +
                    (C101 * C445 - C113 * C428 + C102 * C446 - C114 * C429 +
                     C103 * C450 - C115 * C437) *
                        C47279) *
                       C47294 * C47181 +
                   ((C113 * C418 - C101 * C431 + C114 * C419 - C102 * C432 +
                     C115 * C421 - C103 * C438) *
                        C116 +
                    (C113 * C434 - C101 * C448 + C114 * C435 - C102 * C449 +
                     C115 * C439 - C103 * C451) *
                        C47279) *
                       C47294 * C3602) *
                      C47073 * C47059 +
                  (((C101 * C126 - C113 * C119 + C102 * C130 - C114 * C120 +
                     C103 * C132 - C115 * C121) *
                        C116 +
                    (C101 * C140 - C113 * C129 + C102 * C141 - C114 * C131 +
                     C103 * C142 - C115 * C133) *
                        C47279) *
                       C47294 * C47174 +
                   ((C113 * C416 - C101 * C426 + C114 * C420 - C102 * C436 +
                     C115 * C422 - C103 * C440) *
                        C116 +
                    (C113 * C429 - C101 * C446 + C114 * C437 - C102 * C450 +
                     C115 * C441 - C103 * C452) *
                        C47279) *
                       C47294 * C47181 +
                   ((C101 * C432 - C113 * C419 + C102 * C438 - C114 * C421 +
                     C103 * C442 - C115 * C423) *
                        C116 +
                    (C101 * C449 - C113 * C435 + C102 * C451 - C114 * C439 +
                     C103 * C453 - C115 * C443) *
                        C47279) *
                       C47294 * C3602) *
                      C47073 * C2703)) /
                (p * q * std::sqrt(p + q));
    d2ee[19] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 ((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
                     C103 * C126 - C115 * C119) *
                        C116 +
                    (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
                     C103 * C140 - C115 * C129) *
                        C47279) *
                       C47294 * C3094 +
                   ((C113 * C414 - C101 * C424 + C114 * C415 - C102 * C425 +
                     C115 * C416 - C103 * C426) *
                        C116 +
                    (C113 * C427 - C101 * C444 + C114 * C428 - C102 * C445 +
                     C115 * C429 - C103 * C446) *
                        C47279) *
                       C47294 * C47178) *
                      C47073 * C47416 +
                  (((C113 * C118 - C101 * C125 + C114 * C119 - C102 * C126 +
                     C115 * C120 - C103 * C130) *
                        C116 +
                    (C113 * C128 - C101 * C139 + C114 * C129 - C102 * C140 +
                     C115 * C131 - C103 * C141) *
                        C47279) *
                       C47294 * C3094 +
                   ((C101 * C425 - C113 * C415 + C102 * C426 - C114 * C416 +
                     C103 * C436 - C115 * C420) *
                        C116 +
                    (C101 * C445 - C113 * C428 + C102 * C446 - C114 * C429 +
                     C103 * C450 - C115 * C437) *
                        C47279) *
                       C47294 * C47178) *
                      C47073 * C47409 +
                  (((C101 * C126 - C113 * C119 + C102 * C130 - C114 * C120 +
                     C103 * C132 - C115 * C121) *
                        C116 +
                    (C101 * C140 - C113 * C129 + C102 * C141 - C114 * C131 +
                     C103 * C142 - C115 * C133) *
                        C47279) *
                       C47294 * C3094 +
                   ((C113 * C416 - C101 * C426 + C114 * C420 - C102 * C436 +
                     C115 * C422 - C103 * C440) *
                        C116 +
                    (C113 * C429 - C101 * C446 + C114 * C437 - C102 * C450 +
                     C115 * C441 - C103 * C452) *
                        C47279) *
                       C47294 * C47178) *
                      C47073 * C47396 +
                  (((C113 * C120 - C101 * C130 + C114 * C121 - C102 * C132 +
                     C115 * C122 - C103 * C134) *
                        C116 +
                    (C113 * C131 - C101 * C141 + C114 * C133 - C102 * C142 +
                     C115 * C135 - C103 * C143) *
                        C47279) *
                       C47294 * C3094 +
                   ((C101 * C436 - C113 * C420 + C102 * C440 - C114 * C422 +
                     C103 * C663 - C115 * C662) *
                        C116 +
                    (C101 * C450 - C113 * C437 + C102 * C452 - C114 * C441 +
                     C103 * C665 - C115 * C664) *
                        C47279) *
                       C47294 * C47178) *
                      C47073 * C47375)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
                      C103 * C126 - C115 * C119) *
                         C116 +
                     (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
                      C103 * C140 - C115 * C129) *
                         C47279) *
                        C47294 * C3094 +
                    ((C113 * C414 - C101 * C424 + C114 * C415 - C102 * C425 +
                      C115 * C416 - C103 * C426) *
                         C116 +
                     (C113 * C427 - C101 * C444 + C114 * C428 - C102 * C445 +
                      C115 * C429 - C103 * C446) *
                         C47279) *
                        C47294 * C47178) *
                       C47410 +
                   (((C113 * C261 - C101 * C271 + C114 * C262 - C102 * C272 +
                      C115 * C263 - C103 * C273) *
                         C116 +
                     (C113 * C274 - C101 * C291 + C114 * C275 - C102 * C292 +
                      C115 * C276 - C103 * C293) *
                         C47279) *
                        C47294 * C3094 +
                    ((C101 * C817 - C113 * C812 + C102 * C818 - C114 * C813 +
                      C103 * C819 - C115 * C814) *
                         C116 +
                     (C101 * C827 - C113 * C820 + C102 * C828 - C114 * C821 +
                      C103 * C829 - C115 * C822) *
                         C47279) *
                        C47294 * C47178) *
                       C47398 +
                   (((C101 * C277 - C113 * C264 + C102 * C278 - C114 * C265 +
                      C103 * C279 - C115 * C266) *
                         C116 +
                     (C101 * C294 - C113 * C280 + C102 * C295 - C114 * C281 +
                      C103 * C296 - C115 * C282) *
                         C47279) *
                        C47294 * C3094 +
                    ((C113 * C1153 - C101 * C1165 + C114 * C1154 -
                      C102 * C1166 + C115 * C1155 - C103 * C1167) *
                         C116 +
                     (C113 * C1168 - C101 * C1180 + C114 * C1169 -
                      C102 * C1181 + C115 * C1170 - C103 * C1182) *
                         C47279) *
                        C47294 * C47178) *
                       C47371) *
                      C2440 +
                  ((((C113 * C118 - C101 * C125 + C114 * C119 - C102 * C126 +
                      C115 * C120 - C103 * C130) *
                         C116 +
                     (C113 * C128 - C101 * C139 + C114 * C129 - C102 * C140 +
                      C115 * C131 - C103 * C141) *
                         C47279) *
                        C47294 * C3094 +
                    ((C101 * C425 - C113 * C415 + C102 * C426 - C114 * C416 +
                      C103 * C436 - C115 * C420) *
                         C116 +
                     (C101 * C445 - C113 * C428 + C102 * C446 - C114 * C429 +
                      C103 * C450 - C115 * C437) *
                         C47279) *
                        C47294 * C47178) *
                       C47410 +
                   (((C101 * C272 - C113 * C262 + C102 * C273 - C114 * C263 +
                      C103 * C283 - C115 * C267) *
                         C116 +
                     (C101 * C292 - C113 * C275 + C102 * C293 - C114 * C276 +
                      C103 * C297 - C115 * C284) *
                         C47279) *
                        C47294 * C3094 +
                    ((C113 * C813 - C101 * C818 + C114 * C814 - C102 * C819 +
                      C115 * C815 - C103 * C823) *
                         C116 +
                     (C113 * C821 - C101 * C828 + C114 * C822 - C102 * C829 +
                      C115 * C824 - C103 * C830) *
                         C47279) *
                        C47294 * C47178) *
                       C47398 +
                   (((C113 * C265 - C101 * C278 + C114 * C266 - C102 * C279 +
                      C115 * C268 - C103 * C285) *
                         C116 +
                     (C113 * C281 - C101 * C295 + C114 * C282 - C102 * C296 +
                      C115 * C286 - C103 * C298) *
                         C47279) *
                        C47294 * C3094 +
                    ((C101 * C1166 - C113 * C1154 + C102 * C1167 -
                      C114 * C1155 + C103 * C1441 - C115 * C1440) *
                         C116 +
                     (C101 * C1181 - C113 * C1169 + C102 * C1182 -
                      C114 * C1170 + C103 * C1443 - C115 * C1442) *
                         C47279) *
                        C47294 * C47178) *
                       C47371) *
                      C47056)) /
                    (p * q * std::sqrt(p + q));
    d2ee[20] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 ((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
                     C103 * C126 - C115 * C119) *
                        C116 +
                    (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
                     C103 * C140 - C115 * C129) *
                        C47279) *
                       C47294 * C47091 * C47339 +
                   ((C113 * C261 - C101 * C271 + C114 * C262 - C102 * C272 +
                     C115 * C263 - C103 * C273) *
                        C116 +
                    (C113 * C274 - C101 * C291 + C114 * C275 - C102 * C292 +
                     C115 * C276 - C103 * C293) *
                        C47279) *
                       C47294 * C47091 * C47136) *
                      C554 +
                  (((C113 * C118 - C101 * C125 + C114 * C119 - C102 * C126 +
                     C115 * C120 - C103 * C130) *
                        C116 +
                    (C113 * C128 - C101 * C139 + C114 * C129 - C102 * C140 +
                     C115 * C131 - C103 * C141) *
                        C47279) *
                       C47294 * C47091 * C47339 +
                   ((C101 * C272 - C113 * C262 + C102 * C273 - C114 * C263 +
                     C103 * C283 - C115 * C267) *
                        C116 +
                    (C101 * C292 - C113 * C275 + C102 * C293 - C114 * C276 +
                     C103 * C297 - C115 * C284) *
                        C47279) *
                       C47294 * C47091 * C47136) *
                      C555 +
                  (((C101 * C126 - C113 * C119 + C102 * C130 - C114 * C120 +
                     C103 * C132 - C115 * C121) *
                        C116 +
                    (C101 * C140 - C113 * C129 + C102 * C141 - C114 * C131 +
                     C103 * C142 - C115 * C133) *
                        C47279) *
                       C47294 * C47091 * C47339 +
                   ((C113 * C263 - C101 * C273 + C114 * C267 - C102 * C283 +
                     C115 * C269 - C103 * C287) *
                        C116 +
                    (C113 * C276 - C101 * C293 + C114 * C284 - C102 * C297 +
                     C115 * C288 - C103 * C299) *
                        C47279) *
                       C47294 * C47091 * C47136) *
                      C556 +
                  (((C113 * C120 - C101 * C130 + C114 * C121 - C102 * C132 +
                     C115 * C122 - C103 * C134) *
                        C116 +
                    (C113 * C131 - C101 * C141 + C114 * C133 - C102 * C142 +
                     C115 * C135 - C103 * C143) *
                        C47279) *
                       C47294 * C47091 * C47339 +
                   ((C101 * C283 - C113 * C267 + C102 * C287 - C114 * C269 +
                     C103 * C559 - C115 * C558) *
                        C116 +
                    (C101 * C297 - C113 * C284 + C102 * C299 - C114 * C288 +
                     C103 * C561 - C115 * C560) *
                        C47279) *
                       C47294 * C47091 * C47136) *
                      C47375)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 ((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
                     C103 * C126 - C115 * C119) *
                        C116 +
                    (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
                     C103 * C140 - C115 * C129) *
                        C47279) *
                       C47294 * C47091 * C1284 +
                   ((C113 * C261 - C101 * C271 + C114 * C262 - C102 * C272 +
                     C115 * C263 - C103 * C273) *
                        C116 +
                    (C113 * C274 - C101 * C291 + C114 * C275 - C102 * C292 +
                     C115 * C276 - C103 * C293) *
                        C47279) *
                       C47294 * C47091 * C1285 +
                   ((C101 * C277 - C113 * C264 + C102 * C278 - C114 * C265 +
                     C103 * C279 - C115 * C266) *
                        C116 +
                    (C101 * C294 - C113 * C280 + C102 * C295 - C114 * C281 +
                     C103 * C296 - C115 * C282) *
                        C47279) *
                       C47294 * C47091 * C1286 +
                   ((C113 * C1016 - C101 * C1022 + C114 * C1017 - C102 * C1023 +
                     C115 * C1018 - C103 * C1024) *
                        C116 +
                    (C113 * C1025 - C101 * C1034 + C114 * C1026 - C102 * C1035 +
                     C115 * C1027 - C103 * C1036) *
                        C47279) *
                       C47294 * C47091 * C47381) *
                      C47325 +
                  (((C113 * C118 - C101 * C125 + C114 * C119 - C102 * C126 +
                     C115 * C120 - C103 * C130) *
                        C116 +
                    (C113 * C128 - C101 * C139 + C114 * C129 - C102 * C140 +
                     C115 * C131 - C103 * C141) *
                        C47279) *
                       C47294 * C47091 * C1284 +
                   ((C101 * C272 - C113 * C262 + C102 * C273 - C114 * C263 +
                     C103 * C283 - C115 * C267) *
                        C116 +
                    (C101 * C292 - C113 * C275 + C102 * C293 - C114 * C276 +
                     C103 * C297 - C115 * C284) *
                        C47279) *
                       C47294 * C47091 * C1285 +
                   ((C113 * C265 - C101 * C278 + C114 * C266 - C102 * C279 +
                     C115 * C268 - C103 * C285) *
                        C116 +
                    (C113 * C281 - C101 * C295 + C114 * C282 - C102 * C296 +
                     C115 * C286 - C103 * C298) *
                        C47279) *
                       C47294 * C47091 * C1286 +
                   ((C101 * C1023 - C113 * C1017 + C102 * C1024 - C114 * C1018 +
                     C103 * C1291 - C115 * C1290) *
                        C116 +
                    (C101 * C1035 - C113 * C1026 + C102 * C1036 - C114 * C1027 +
                     C103 * C1293 - C115 * C1292) *
                        C47279) *
                       C47294 * C47091 * C47381) *
                      C47056)) /
                    (p * q * std::sqrt(p + q));
    d2ee[21] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
                      C103 * C126 - C115 * C119) *
                         C116 +
                     (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
                      C103 * C140 - C115 * C129) *
                         C47279) *
                        C47294 * C47340 +
                    ((C113 * C414 - C101 * C424 + C114 * C415 - C102 * C425 +
                      C115 * C416 - C103 * C426) *
                         C116 +
                     (C113 * C427 - C101 * C444 + C114 * C428 - C102 * C445 +
                      C115 * C429 - C103 * C446) *
                         C47279) *
                        C47294 * C47178) *
                       C47339 +
                   (((C113 * C261 - C101 * C271 + C114 * C262 - C102 * C272 +
                      C115 * C263 - C103 * C273) *
                         C116 +
                     (C113 * C274 - C101 * C291 + C114 * C275 - C102 * C292 +
                      C115 * C276 - C103 * C293) *
                         C47279) *
                        C47294 * C47340 +
                    ((C101 * C817 - C113 * C812 + C102 * C818 - C114 * C813 +
                      C103 * C819 - C115 * C814) *
                         C116 +
                     (C101 * C827 - C113 * C820 + C102 * C828 - C114 * C821 +
                      C103 * C829 - C115 * C822) *
                         C47279) *
                        C47294 * C47178) *
                       C47136) *
                      C258 +
                  ((((C113 * C118 - C101 * C125 + C114 * C119 - C102 * C126 +
                      C115 * C120 - C103 * C130) *
                         C116 +
                     (C113 * C128 - C101 * C139 + C114 * C129 - C102 * C140 +
                      C115 * C131 - C103 * C141) *
                         C47279) *
                        C47294 * C47340 +
                    ((C101 * C425 - C113 * C415 + C102 * C426 - C114 * C416 +
                      C103 * C436 - C115 * C420) *
                         C116 +
                     (C101 * C445 - C113 * C428 + C102 * C446 - C114 * C429 +
                      C103 * C450 - C115 * C437) *
                         C47279) *
                        C47294 * C47178) *
                       C47339 +
                   (((C101 * C272 - C113 * C262 + C102 * C273 - C114 * C263 +
                      C103 * C283 - C115 * C267) *
                         C116 +
                     (C101 * C292 - C113 * C275 + C102 * C293 - C114 * C276 +
                      C103 * C297 - C115 * C284) *
                         C47279) *
                        C47294 * C47340 +
                    ((C113 * C813 - C101 * C818 + C114 * C814 - C102 * C819 +
                      C115 * C815 - C103 * C823) *
                         C116 +
                     (C113 * C821 - C101 * C828 + C114 * C822 - C102 * C829 +
                      C115 * C824 - C103 * C830) *
                         C47279) *
                        C47294 * C47178) *
                       C47136) *
                      C259 +
                  ((((C101 * C126 - C113 * C119 + C102 * C130 - C114 * C120 +
                      C103 * C132 - C115 * C121) *
                         C116 +
                     (C101 * C140 - C113 * C129 + C102 * C141 - C114 * C131 +
                      C103 * C142 - C115 * C133) *
                         C47279) *
                        C47294 * C47340 +
                    ((C113 * C416 - C101 * C426 + C114 * C420 - C102 * C436 +
                      C115 * C422 - C103 * C440) *
                         C116 +
                     (C113 * C429 - C101 * C446 + C114 * C437 - C102 * C450 +
                      C115 * C441 - C103 * C452) *
                         C47279) *
                        C47294 * C47178) *
                       C47339 +
                   (((C113 * C263 - C101 * C273 + C114 * C267 - C102 * C283 +
                      C115 * C269 - C103 * C287) *
                         C116 +
                     (C113 * C276 - C101 * C293 + C114 * C284 - C102 * C297 +
                      C115 * C288 - C103 * C299) *
                         C47279) *
                        C47294 * C47340 +
                    ((C101 * C819 - C113 * C814 + C102 * C823 - C114 * C815 +
                      C103 * C825 - C115 * C816) *
                         C116 +
                     (C101 * C829 - C113 * C822 + C102 * C830 - C114 * C824 +
                      C103 * C831 - C115 * C826) *
                         C47279) *
                        C47294 * C47178) *
                       C47136) *
                      C47365)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 ((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
                     C103 * C126 - C115 * C119) *
                        C116 +
                    (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
                     C103 * C140 - C115 * C129) *
                        C47279) *
                       C47294 * C47340 +
                   ((C113 * C414 - C101 * C424 + C114 * C415 - C102 * C425 +
                     C115 * C416 - C103 * C426) *
                        C116 +
                    (C113 * C427 - C101 * C444 + C114 * C428 - C102 * C445 +
                     C115 * C429 - C103 * C446) *
                        C47279) *
                       C47294 * C47178) *
                      C1284 +
                  (((C113 * C261 - C101 * C271 + C114 * C262 - C102 * C272 +
                     C115 * C263 - C103 * C273) *
                        C116 +
                    (C113 * C274 - C101 * C291 + C114 * C275 - C102 * C292 +
                     C115 * C276 - C103 * C293) *
                        C47279) *
                       C47294 * C47340 +
                   ((C101 * C817 - C113 * C812 + C102 * C818 - C114 * C813 +
                     C103 * C819 - C115 * C814) *
                        C116 +
                    (C101 * C827 - C113 * C820 + C102 * C828 - C114 * C821 +
                     C103 * C829 - C115 * C822) *
                        C47279) *
                       C47294 * C47178) *
                      C1285 +
                  (((C101 * C277 - C113 * C264 + C102 * C278 - C114 * C265 +
                     C103 * C279 - C115 * C266) *
                        C116 +
                    (C101 * C294 - C113 * C280 + C102 * C295 - C114 * C281 +
                     C103 * C296 - C115 * C282) *
                        C47279) *
                       C47294 * C47340 +
                   ((C113 * C1153 - C101 * C1165 + C114 * C1154 - C102 * C1166 +
                     C115 * C1155 - C103 * C1167) *
                        C116 +
                    (C113 * C1168 - C101 * C1180 + C114 * C1169 - C102 * C1181 +
                     C115 * C1170 - C103 * C1182) *
                        C47279) *
                       C47294 * C47178) *
                      C1286 +
                  (((C113 * C1016 - C101 * C1022 + C114 * C1017 - C102 * C1023 +
                     C115 * C1018 - C103 * C1024) *
                        C116 +
                    (C113 * C1025 - C101 * C1034 + C114 * C1026 - C102 * C1035 +
                     C115 * C1027 - C103 * C1036) *
                        C47279) *
                       C47294 * C47340 +
                   ((C101 * C1545 - C113 * C1542 + C102 * C1546 - C114 * C1543 +
                     C103 * C1547 - C115 * C1544) *
                        C116 +
                    (C101 * C1551 - C113 * C1548 + C102 * C1552 - C114 * C1549 +
                     C103 * C1553 - C115 * C1550) *
                        C47279) *
                       C47294 * C47178) *
                      C47381) *
                 C47045) /
                    (p * q * std::sqrt(p + q));
    d2ee[22] += (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                 ((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
                     C103 * C126 - C115 * C119) *
                        C116 +
                    (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
                     C103 * C140 - C115 * C129) *
                        C47279) *
                       C47294 * C47091 * C47410 +
                   ((C113 * C261 - C101 * C271 + C114 * C262 - C102 * C272 +
                     C115 * C263 - C103 * C273) *
                        C116 +
                    (C113 * C274 - C101 * C291 + C114 * C275 - C102 * C292 +
                     C115 * C276 - C103 * C293) *
                        C47279) *
                       C47294 * C47091 * C47398 +
                   ((C101 * C277 - C113 * C264 + C102 * C278 - C114 * C265 +
                     C103 * C279 - C115 * C266) *
                        C116 +
                    (C101 * C294 - C113 * C280 + C102 * C295 - C114 * C281 +
                     C103 * C296 - C115 * C282) *
                        C47279) *
                       C47294 * C47091 * C47371) *
                      C258 +
                  (((C113 * C118 - C101 * C125 + C114 * C119 - C102 * C126 +
                     C115 * C120 - C103 * C130) *
                        C116 +
                    (C113 * C128 - C101 * C139 + C114 * C129 - C102 * C140 +
                     C115 * C131 - C103 * C141) *
                        C47279) *
                       C47294 * C47091 * C47410 +
                   ((C101 * C272 - C113 * C262 + C102 * C273 - C114 * C263 +
                     C103 * C283 - C115 * C267) *
                        C116 +
                    (C101 * C292 - C113 * C275 + C102 * C293 - C114 * C276 +
                     C103 * C297 - C115 * C284) *
                        C47279) *
                       C47294 * C47091 * C47398 +
                   ((C113 * C265 - C101 * C278 + C114 * C266 - C102 * C279 +
                     C115 * C268 - C103 * C285) *
                        C116 +
                    (C113 * C281 - C101 * C295 + C114 * C282 - C102 * C296 +
                     C115 * C286 - C103 * C298) *
                        C47279) *
                       C47294 * C47091 * C47371) *
                      C259 +
                  (((C101 * C126 - C113 * C119 + C102 * C130 - C114 * C120 +
                     C103 * C132 - C115 * C121) *
                        C116 +
                    (C101 * C140 - C113 * C129 + C102 * C141 - C114 * C131 +
                     C103 * C142 - C115 * C133) *
                        C47279) *
                       C47294 * C47091 * C47410 +
                   ((C113 * C263 - C101 * C273 + C114 * C267 - C102 * C283 +
                     C115 * C269 - C103 * C287) *
                        C116 +
                    (C113 * C276 - C101 * C293 + C114 * C284 - C102 * C297 +
                     C115 * C288 - C103 * C299) *
                        C47279) *
                       C47294 * C47091 * C47398 +
                   ((C101 * C279 - C113 * C266 + C102 * C285 - C114 * C268 +
                     C103 * C289 - C115 * C270) *
                        C116 +
                    (C101 * C296 - C113 * C282 + C102 * C298 - C114 * C286 +
                     C103 * C300 - C115 * C290) *
                        C47279) *
                       C47294 * C47091 * C47371) *
                      C47365)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                 (((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
                    C103 * C126 - C115 * C119) *
                       C116 +
                   (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
                    C103 * C140 - C115 * C129) *
                       C47279) *
                      C47294 * C47091 * C47073 * C108 +
                  ((C113 * C118 - C101 * C125 + C114 * C119 - C102 * C126 +
                    C115 * C120 - C103 * C130) *
                       C116 +
                   (C113 * C128 - C101 * C139 + C114 * C129 - C102 * C140 +
                    C115 * C131 - C103 * C141) *
                       C47279) *
                      C47294 * C47091 * C47073 * C109 +
                  ((C101 * C126 - C113 * C119 + C102 * C130 - C114 * C120 +
                    C103 * C132 - C115 * C121) *
                       C116 +
                   (C101 * C140 - C113 * C129 + C102 * C141 - C114 * C131 +
                    C103 * C142 - C115 * C133) *
                       C47279) *
                      C47294 * C47091 * C47073 * C110 +
                  ((C113 * C120 - C101 * C130 + C114 * C121 - C102 * C132 +
                    C115 * C122 - C103 * C134) *
                       C116 +
                   (C113 * C131 - C101 * C141 + C114 * C133 - C102 * C142 +
                    C115 * C135 - C103 * C143) *
                       C47279) *
                      C47294 * C47091 * C47073 * C111 +
                  ((C101 * C132 - C113 * C121 + C102 * C134 - C114 * C122 +
                    C103 * C136 - C115 * C123) *
                       C116 +
                   (C101 * C142 - C113 * C133 + C102 * C143 - C114 * C135 +
                    C103 * C144 - C115 * C137) *
                       C47279) *
                      C47294 * C47091 * C47073 * C112)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 ((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
                     C103 * C126 - C115 * C119) *
                        C116 +
                    (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
                     C103 * C140 - C115 * C129) *
                        C47279) *
                       C47294 * C47411 +
                   ((C113 * C414 - C101 * C424 + C114 * C415 - C102 * C425 +
                     C115 * C416 - C103 * C426) *
                        C116 +
                    (C113 * C427 - C101 * C444 + C114 * C428 - C102 * C445 +
                     C115 * C429 - C103 * C446) *
                        C47279) *
                       C47294 * C47400 +
                   ((C101 * C430 - C113 * C417 + C102 * C431 - C114 * C418 +
                     C103 * C432 - C115 * C419) *
                        C116 +
                    (C101 * C447 - C113 * C433 + C102 * C448 - C114 * C434 +
                     C103 * C449 - C115 * C435) *
                        C47279) *
                       C47294 * C47374) *
                      C47073 * C258 +
                  (((C113 * C118 - C101 * C125 + C114 * C119 - C102 * C126 +
                     C115 * C120 - C103 * C130) *
                        C116 +
                    (C113 * C128 - C101 * C139 + C114 * C129 - C102 * C140 +
                     C115 * C131 - C103 * C141) *
                        C47279) *
                       C47294 * C47411 +
                   ((C101 * C425 - C113 * C415 + C102 * C426 - C114 * C416 +
                     C103 * C436 - C115 * C420) *
                        C116 +
                    (C101 * C445 - C113 * C428 + C102 * C446 - C114 * C429 +
                     C103 * C450 - C115 * C437) *
                        C47279) *
                       C47294 * C47400 +
                   ((C113 * C418 - C101 * C431 + C114 * C419 - C102 * C432 +
                     C115 * C421 - C103 * C438) *
                        C116 +
                    (C113 * C434 - C101 * C448 + C114 * C435 - C102 * C449 +
                     C115 * C439 - C103 * C451) *
                        C47279) *
                       C47294 * C47374) *
                      C47073 * C259 +
                  (((C101 * C126 - C113 * C119 + C102 * C130 - C114 * C120 +
                     C103 * C132 - C115 * C121) *
                        C116 +
                    (C101 * C140 - C113 * C129 + C102 * C141 - C114 * C131 +
                     C103 * C142 - C115 * C133) *
                        C47279) *
                       C47294 * C47411 +
                   ((C113 * C416 - C101 * C426 + C114 * C420 - C102 * C436 +
                     C115 * C422 - C103 * C440) *
                        C116 +
                    (C113 * C429 - C101 * C446 + C114 * C437 - C102 * C450 +
                     C115 * C441 - C103 * C452) *
                        C47279) *
                       C47294 * C47400 +
                   ((C101 * C432 - C113 * C419 + C102 * C438 - C114 * C421 +
                     C103 * C442 - C115 * C423) *
                        C116 +
                    (C101 * C449 - C113 * C435 + C102 * C451 - C114 * C439 +
                     C103 * C453 - C115 * C443) *
                        C47279) *
                       C47294 * C47374) *
                      C47073 * C47365)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                 ((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
                     C103 * C126 - C115 * C119) *
                        C116 +
                    (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
                     C103 * C140 - C115 * C129) *
                        C47279) *
                       C47294 * C47091 * C942 +
                   ((C113 * C261 - C101 * C271 + C114 * C262 - C102 * C272 +
                     C115 * C263 - C103 * C273) *
                        C116 +
                    (C113 * C274 - C101 * C291 + C114 * C275 - C102 * C292 +
                     C115 * C276 - C103 * C293) *
                        C47279) *
                       C47294 * C47091 * C943 +
                   ((C101 * C277 - C113 * C264 + C102 * C278 - C114 * C265 +
                     C103 * C279 - C115 * C266) *
                        C116 +
                    (C101 * C294 - C113 * C280 + C102 * C295 - C114 * C281 +
                     C103 * C296 - C115 * C282) *
                        C47279) *
                       C47294 * C47091 * C47371) *
                      C47407 +
                  (((C113 * C118 - C101 * C125 + C114 * C119 - C102 * C126 +
                     C115 * C120 - C103 * C130) *
                        C116 +
                    (C113 * C128 - C101 * C139 + C114 * C129 - C102 * C140 +
                     C115 * C131 - C103 * C141) *
                        C47279) *
                       C47294 * C47091 * C942 +
                   ((C101 * C272 - C113 * C262 + C102 * C273 - C114 * C263 +
                     C103 * C283 - C115 * C267) *
                        C116 +
                    (C101 * C292 - C113 * C275 + C102 * C293 - C114 * C276 +
                     C103 * C297 - C115 * C284) *
                        C47279) *
                       C47294 * C47091 * C943 +
                   ((C113 * C265 - C101 * C278 + C114 * C266 - C102 * C279 +
                     C115 * C268 - C103 * C285) *
                        C116 +
                    (C113 * C281 - C101 * C295 + C114 * C282 - C102 * C296 +
                     C115 * C286 - C103 * C298) *
                        C47279) *
                       C47294 * C47091 * C47371) *
                      C47394 +
                  (((C101 * C126 - C113 * C119 + C102 * C130 - C114 * C120 +
                     C103 * C132 - C115 * C121) *
                        C116 +
                    (C101 * C140 - C113 * C129 + C102 * C141 - C114 * C131 +
                     C103 * C142 - C115 * C133) *
                        C47279) *
                       C47294 * C47091 * C942 +
                   ((C113 * C263 - C101 * C273 + C114 * C267 - C102 * C283 +
                     C115 * C269 - C103 * C287) *
                        C116 +
                    (C113 * C276 - C101 * C293 + C114 * C284 - C102 * C297 +
                     C115 * C288 - C103 * C299) *
                        C47279) *
                       C47294 * C47091 * C943 +
                   ((C101 * C279 - C113 * C266 + C102 * C285 - C114 * C268 +
                     C103 * C289 - C115 * C270) *
                        C116 +
                    (C101 * C296 - C113 * C282 + C102 * C298 - C114 * C286 +
                     C103 * C300 - C115 * C290) *
                        C47279) *
                       C47294 * C47091 * C47371) *
                      C47365)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                 (((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
                    C103 * C126 - C115 * C119) *
                       C116 +
                   (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
                    C103 * C140 - C115 * C129) *
                       C47279) *
                      C47294 * C47091 * C1010 +
                  ((C113 * C261 - C101 * C271 + C114 * C262 - C102 * C272 +
                    C115 * C263 - C103 * C273) *
                       C116 +
                   (C113 * C274 - C101 * C291 + C114 * C275 - C102 * C292 +
                    C115 * C276 - C103 * C293) *
                       C47279) *
                      C47294 * C47091 * C1011 +
                  ((C101 * C277 - C113 * C264 + C102 * C278 - C114 * C265 +
                    C103 * C279 - C115 * C266) *
                       C116 +
                   (C101 * C294 - C113 * C280 + C102 * C295 - C114 * C281 +
                    C103 * C296 - C115 * C282) *
                       C47279) *
                      C47294 * C47091 * C1012 +
                  ((C113 * C1016 - C101 * C1022 + C114 * C1017 - C102 * C1023 +
                    C115 * C1018 - C103 * C1024) *
                       C116 +
                   (C113 * C1025 - C101 * C1034 + C114 * C1026 - C102 * C1035 +
                    C115 * C1027 - C103 * C1036) *
                       C47279) *
                      C47294 * C47091 * C1013 +
                  ((C101 * C1028 - C113 * C1019 + C102 * C1029 - C114 * C1020 +
                    C103 * C1030 - C115 * C1021) *
                       C116 +
                   (C101 * C1037 - C113 * C1031 + C102 * C1038 - C114 * C1032 +
                    C103 * C1039 - C115 * C1033) *
                       C47279) *
                      C47294 * C47091 * C1014) *
                 C47045) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 ((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
                     C103 * C126 - C115 * C119) *
                        C116 +
                    (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
                     C103 * C140 - C115 * C129) *
                        C47279) *
                       C47294 * C47411 +
                   ((C113 * C414 - C101 * C424 + C114 * C415 - C102 * C425 +
                     C115 * C416 - C103 * C426) *
                        C116 +
                    (C113 * C427 - C101 * C444 + C114 * C428 - C102 * C445 +
                     C115 * C429 - C103 * C446) *
                        C47279) *
                       C47294 * C47400 +
                   ((C101 * C430 - C113 * C417 + C102 * C431 - C114 * C418 +
                     C103 * C432 - C115 * C419) *
                        C116 +
                    (C101 * C447 - C113 * C433 + C102 * C448 - C114 * C434 +
                     C103 * C449 - C115 * C435) *
                        C47279) *
                       C47294 * C47374) *
                      C942 +
                  (((C113 * C261 - C101 * C271 + C114 * C262 - C102 * C272 +
                     C115 * C263 - C103 * C273) *
                        C116 +
                    (C113 * C274 - C101 * C291 + C114 * C275 - C102 * C292 +
                     C115 * C276 - C103 * C293) *
                        C47279) *
                       C47294 * C47411 +
                   ((C101 * C817 - C113 * C812 + C102 * C818 - C114 * C813 +
                     C103 * C819 - C115 * C814) *
                        C116 +
                    (C101 * C827 - C113 * C820 + C102 * C828 - C114 * C821 +
                     C103 * C829 - C115 * C822) *
                        C47279) *
                       C47294 * C47400 +
                   ((C113 * C1150 - C101 * C1159 + C114 * C1151 - C102 * C1160 +
                     C115 * C1152 - C103 * C1161) *
                        C116 +
                    (C113 * C1162 - C101 * C1177 + C114 * C1163 - C102 * C1178 +
                     C115 * C1164 - C103 * C1179) *
                        C47279) *
                       C47294 * C47374) *
                      C943 +
                  (((C101 * C277 - C113 * C264 + C102 * C278 - C114 * C265 +
                     C103 * C279 - C115 * C266) *
                        C116 +
                    (C101 * C294 - C113 * C280 + C102 * C295 - C114 * C281 +
                     C103 * C296 - C115 * C282) *
                        C47279) *
                       C47294 * C47411 +
                   ((C113 * C1153 - C101 * C1165 + C114 * C1154 - C102 * C1166 +
                     C115 * C1155 - C103 * C1167) *
                        C116 +
                    (C113 * C1168 - C101 * C1180 + C114 * C1169 - C102 * C1181 +
                     C115 * C1170 - C103 * C1182) *
                        C47279) *
                       C47294 * C47400 +
                   ((C101 * C1171 - C113 * C1156 + C102 * C1172 - C114 * C1157 +
                     C103 * C1173 - C115 * C1158) *
                        C116 +
                    (C101 * C1183 - C113 * C1174 + C102 * C1184 - C114 * C1175 +
                     C103 * C1185 - C115 * C1176) *
                        C47279) *
                       C47294 * C47374) *
                      C47371) *
                 C47045) /
                    (p * q * std::sqrt(p + q));
    d2ee[23] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 ((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
                     C103 * C126 - C115 * C119) *
                        C116 +
                    (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
                     C103 * C140 - C115 * C129) *
                        C47279) *
                       C47294 * C47340 +
                   ((C113 * C414 - C101 * C424 + C114 * C415 - C102 * C425 +
                     C115 * C416 - C103 * C426) *
                        C116 +
                    (C113 * C427 - C101 * C444 + C114 * C428 - C102 * C445 +
                     C115 * C429 - C103 * C446) *
                        C47279) *
                       C47294 * C47178) *
                      C47073 * C554 +
                  (((C113 * C118 - C101 * C125 + C114 * C119 - C102 * C126 +
                     C115 * C120 - C103 * C130) *
                        C116 +
                    (C113 * C128 - C101 * C139 + C114 * C129 - C102 * C140 +
                     C115 * C131 - C103 * C141) *
                        C47279) *
                       C47294 * C47340 +
                   ((C101 * C425 - C113 * C415 + C102 * C426 - C114 * C416 +
                     C103 * C436 - C115 * C420) *
                        C116 +
                    (C101 * C445 - C113 * C428 + C102 * C446 - C114 * C429 +
                     C103 * C450 - C115 * C437) *
                        C47279) *
                       C47294 * C47178) *
                      C47073 * C555 +
                  (((C101 * C126 - C113 * C119 + C102 * C130 - C114 * C120 +
                     C103 * C132 - C115 * C121) *
                        C116 +
                    (C101 * C140 - C113 * C129 + C102 * C141 - C114 * C131 +
                     C103 * C142 - C115 * C133) *
                        C47279) *
                       C47294 * C47340 +
                   ((C113 * C416 - C101 * C426 + C114 * C420 - C102 * C436 +
                     C115 * C422 - C103 * C440) *
                        C116 +
                    (C113 * C429 - C101 * C446 + C114 * C437 - C102 * C450 +
                     C115 * C441 - C103 * C452) *
                        C47279) *
                       C47294 * C47178) *
                      C47073 * C556 +
                  (((C113 * C120 - C101 * C130 + C114 * C121 - C102 * C132 +
                     C115 * C122 - C103 * C134) *
                        C116 +
                    (C113 * C131 - C101 * C141 + C114 * C133 - C102 * C142 +
                     C115 * C135 - C103 * C143) *
                        C47279) *
                       C47294 * C47340 +
                   ((C101 * C436 - C113 * C420 + C102 * C440 - C114 * C422 +
                     C103 * C663 - C115 * C662) *
                        C116 +
                    (C101 * C450 - C113 * C437 + C102 * C452 - C114 * C441 +
                     C103 * C665 - C115 * C664) *
                        C47279) *
                       C47294 * C47178) *
                      C47073 * C47375)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
                      C103 * C126 - C115 * C119) *
                         C116 +
                     (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
                      C103 * C140 - C115 * C129) *
                         C47279) *
                        C47294 * C47340 +
                    ((C113 * C414 - C101 * C424 + C114 * C415 - C102 * C425 +
                      C115 * C416 - C103 * C426) *
                         C116 +
                     (C113 * C427 - C101 * C444 + C114 * C428 - C102 * C445 +
                      C115 * C429 - C103 * C446) *
                         C47279) *
                        C47294 * C47178) *
                       C942 +
                   (((C113 * C261 - C101 * C271 + C114 * C262 - C102 * C272 +
                      C115 * C263 - C103 * C273) *
                         C116 +
                     (C113 * C274 - C101 * C291 + C114 * C275 - C102 * C292 +
                      C115 * C276 - C103 * C293) *
                         C47279) *
                        C47294 * C47340 +
                    ((C101 * C817 - C113 * C812 + C102 * C818 - C114 * C813 +
                      C103 * C819 - C115 * C814) *
                         C116 +
                     (C101 * C827 - C113 * C820 + C102 * C828 - C114 * C821 +
                      C103 * C829 - C115 * C822) *
                         C47279) *
                        C47294 * C47178) *
                       C943 +
                   (((C101 * C277 - C113 * C264 + C102 * C278 - C114 * C265 +
                      C103 * C279 - C115 * C266) *
                         C116 +
                     (C101 * C294 - C113 * C280 + C102 * C295 - C114 * C281 +
                      C103 * C296 - C115 * C282) *
                         C47279) *
                        C47294 * C47340 +
                    ((C113 * C1153 - C101 * C1165 + C114 * C1154 -
                      C102 * C1166 + C115 * C1155 - C103 * C1167) *
                         C116 +
                     (C113 * C1168 - C101 * C1180 + C114 * C1169 -
                      C102 * C1181 + C115 * C1170 - C103 * C1182) *
                         C47279) *
                        C47294 * C47178) *
                       C47371) *
                      C47325 +
                  ((((C113 * C118 - C101 * C125 + C114 * C119 - C102 * C126 +
                      C115 * C120 - C103 * C130) *
                         C116 +
                     (C113 * C128 - C101 * C139 + C114 * C129 - C102 * C140 +
                      C115 * C131 - C103 * C141) *
                         C47279) *
                        C47294 * C47340 +
                    ((C101 * C425 - C113 * C415 + C102 * C426 - C114 * C416 +
                      C103 * C436 - C115 * C420) *
                         C116 +
                     (C101 * C445 - C113 * C428 + C102 * C446 - C114 * C429 +
                      C103 * C450 - C115 * C437) *
                         C47279) *
                        C47294 * C47178) *
                       C942 +
                   (((C101 * C272 - C113 * C262 + C102 * C273 - C114 * C263 +
                      C103 * C283 - C115 * C267) *
                         C116 +
                     (C101 * C292 - C113 * C275 + C102 * C293 - C114 * C276 +
                      C103 * C297 - C115 * C284) *
                         C47279) *
                        C47294 * C47340 +
                    ((C113 * C813 - C101 * C818 + C114 * C814 - C102 * C819 +
                      C115 * C815 - C103 * C823) *
                         C116 +
                     (C113 * C821 - C101 * C828 + C114 * C822 - C102 * C829 +
                      C115 * C824 - C103 * C830) *
                         C47279) *
                        C47294 * C47178) *
                       C943 +
                   (((C113 * C265 - C101 * C278 + C114 * C266 - C102 * C279 +
                      C115 * C268 - C103 * C285) *
                         C116 +
                     (C113 * C281 - C101 * C295 + C114 * C282 - C102 * C296 +
                      C115 * C286 - C103 * C298) *
                         C47279) *
                        C47294 * C47340 +
                    ((C101 * C1166 - C113 * C1154 + C102 * C1167 -
                      C114 * C1155 + C103 * C1441 - C115 * C1440) *
                         C116 +
                     (C101 * C1181 - C113 * C1169 + C102 * C1182 -
                      C114 * C1170 + C103 * C1443 - C115 * C1442) *
                         C47279) *
                        C47294 * C47178) *
                       C47371) *
                      C47056)) /
                    (p * q * std::sqrt(p + q));
    d2ee[24] += (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                 (((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
                    C103 * C126 - C115 * C119) *
                       C116 +
                   (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
                    C103 * C140 - C115 * C129) *
                       C47279) *
                      C47294 * C47091 * C47073 * C108 +
                  ((C113 * C118 - C101 * C125 + C114 * C119 - C102 * C126 +
                    C115 * C120 - C103 * C130) *
                       C116 +
                   (C113 * C128 - C101 * C139 + C114 * C129 - C102 * C140 +
                    C115 * C131 - C103 * C141) *
                       C47279) *
                      C47294 * C47091 * C47073 * C109 +
                  ((C101 * C126 - C113 * C119 + C102 * C130 - C114 * C120 +
                    C103 * C132 - C115 * C121) *
                       C116 +
                   (C101 * C140 - C113 * C129 + C102 * C141 - C114 * C131 +
                    C103 * C142 - C115 * C133) *
                       C47279) *
                      C47294 * C47091 * C47073 * C110 +
                  ((C113 * C120 - C101 * C130 + C114 * C121 - C102 * C132 +
                    C115 * C122 - C103 * C134) *
                       C116 +
                   (C113 * C131 - C101 * C141 + C114 * C133 - C102 * C142 +
                    C115 * C135 - C103 * C143) *
                       C47279) *
                      C47294 * C47091 * C47073 * C111 +
                  ((C101 * C132 - C113 * C121 + C102 * C134 - C114 * C122 +
                    C103 * C136 - C115 * C123) *
                       C116 +
                   (C101 * C142 - C113 * C133 + C102 * C143 - C114 * C135 +
                    C103 * C144 - C115 * C137) *
                       C47279) *
                      C47294 * C47091 * C47073 * C112)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                 ((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
                     C103 * C126 - C115 * C119) *
                        C116 +
                    (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
                     C103 * C140 - C115 * C129) *
                        C47279) *
                       C47294 * C47091 * C47410 +
                   ((C113 * C261 - C101 * C271 + C114 * C262 - C102 * C272 +
                     C115 * C263 - C103 * C273) *
                        C116 +
                    (C113 * C274 - C101 * C291 + C114 * C275 - C102 * C292 +
                     C115 * C276 - C103 * C293) *
                        C47279) *
                       C47294 * C47091 * C47398 +
                   ((C101 * C277 - C113 * C264 + C102 * C278 - C114 * C265 +
                     C103 * C279 - C115 * C266) *
                        C116 +
                    (C101 * C294 - C113 * C280 + C102 * C295 - C114 * C281 +
                     C103 * C296 - C115 * C282) *
                        C47279) *
                       C47294 * C47091 * C47371) *
                      C258 +
                  (((C113 * C118 - C101 * C125 + C114 * C119 - C102 * C126 +
                     C115 * C120 - C103 * C130) *
                        C116 +
                    (C113 * C128 - C101 * C139 + C114 * C129 - C102 * C140 +
                     C115 * C131 - C103 * C141) *
                        C47279) *
                       C47294 * C47091 * C47410 +
                   ((C101 * C272 - C113 * C262 + C102 * C273 - C114 * C263 +
                     C103 * C283 - C115 * C267) *
                        C116 +
                    (C101 * C292 - C113 * C275 + C102 * C293 - C114 * C276 +
                     C103 * C297 - C115 * C284) *
                        C47279) *
                       C47294 * C47091 * C47398 +
                   ((C113 * C265 - C101 * C278 + C114 * C266 - C102 * C279 +
                     C115 * C268 - C103 * C285) *
                        C116 +
                    (C113 * C281 - C101 * C295 + C114 * C282 - C102 * C296 +
                     C115 * C286 - C103 * C298) *
                        C47279) *
                       C47294 * C47091 * C47371) *
                      C259 +
                  (((C101 * C126 - C113 * C119 + C102 * C130 - C114 * C120 +
                     C103 * C132 - C115 * C121) *
                        C116 +
                    (C101 * C140 - C113 * C129 + C102 * C141 - C114 * C131 +
                     C103 * C142 - C115 * C133) *
                        C47279) *
                       C47294 * C47091 * C47410 +
                   ((C113 * C263 - C101 * C273 + C114 * C267 - C102 * C283 +
                     C115 * C269 - C103 * C287) *
                        C116 +
                    (C113 * C276 - C101 * C293 + C114 * C284 - C102 * C297 +
                     C115 * C288 - C103 * C299) *
                        C47279) *
                       C47294 * C47091 * C47398 +
                   ((C101 * C279 - C113 * C266 + C102 * C285 - C114 * C268 +
                     C103 * C289 - C115 * C270) *
                        C116 +
                    (C101 * C296 - C113 * C282 + C102 * C298 - C114 * C286 +
                     C103 * C300 - C115 * C290) *
                        C47279) *
                       C47294 * C47091 * C47371) *
                      C47365)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                 ((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
                     C103 * C126 - C115 * C119) *
                        C116 +
                    (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
                     C103 * C140 - C115 * C129) *
                        C47279) *
                       C47294 * C47091 * C942 +
                   ((C113 * C261 - C101 * C271 + C114 * C262 - C102 * C272 +
                     C115 * C263 - C103 * C273) *
                        C116 +
                    (C113 * C274 - C101 * C291 + C114 * C275 - C102 * C292 +
                     C115 * C276 - C103 * C293) *
                        C47279) *
                       C47294 * C47091 * C943 +
                   ((C101 * C277 - C113 * C264 + C102 * C278 - C114 * C265 +
                     C103 * C279 - C115 * C266) *
                        C116 +
                    (C101 * C294 - C113 * C280 + C102 * C295 - C114 * C281 +
                     C103 * C296 - C115 * C282) *
                        C47279) *
                       C47294 * C47091 * C47371) *
                      C47407 +
                  (((C113 * C118 - C101 * C125 + C114 * C119 - C102 * C126 +
                     C115 * C120 - C103 * C130) *
                        C116 +
                    (C113 * C128 - C101 * C139 + C114 * C129 - C102 * C140 +
                     C115 * C131 - C103 * C141) *
                        C47279) *
                       C47294 * C47091 * C942 +
                   ((C101 * C272 - C113 * C262 + C102 * C273 - C114 * C263 +
                     C103 * C283 - C115 * C267) *
                        C116 +
                    (C101 * C292 - C113 * C275 + C102 * C293 - C114 * C276 +
                     C103 * C297 - C115 * C284) *
                        C47279) *
                       C47294 * C47091 * C943 +
                   ((C113 * C265 - C101 * C278 + C114 * C266 - C102 * C279 +
                     C115 * C268 - C103 * C285) *
                        C116 +
                    (C113 * C281 - C101 * C295 + C114 * C282 - C102 * C296 +
                     C115 * C286 - C103 * C298) *
                        C47279) *
                       C47294 * C47091 * C47371) *
                      C47394 +
                  (((C101 * C126 - C113 * C119 + C102 * C130 - C114 * C120 +
                     C103 * C132 - C115 * C121) *
                        C116 +
                    (C101 * C140 - C113 * C129 + C102 * C141 - C114 * C131 +
                     C103 * C142 - C115 * C133) *
                        C47279) *
                       C47294 * C47091 * C942 +
                   ((C113 * C263 - C101 * C273 + C114 * C267 - C102 * C283 +
                     C115 * C269 - C103 * C287) *
                        C116 +
                    (C113 * C276 - C101 * C293 + C114 * C284 - C102 * C297 +
                     C115 * C288 - C103 * C299) *
                        C47279) *
                       C47294 * C47091 * C943 +
                   ((C101 * C279 - C113 * C266 + C102 * C285 - C114 * C268 +
                     C103 * C289 - C115 * C270) *
                        C116 +
                    (C101 * C296 - C113 * C282 + C102 * C298 - C114 * C286 +
                     C103 * C300 - C115 * C290) *
                        C47279) *
                       C47294 * C47091 * C47371) *
                      C47365)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                 (((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
                    C103 * C126 - C115 * C119) *
                       C116 +
                   (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
                    C103 * C140 - C115 * C129) *
                       C47279) *
                      C47294 * C47091 * C1010 +
                  ((C113 * C261 - C101 * C271 + C114 * C262 - C102 * C272 +
                    C115 * C263 - C103 * C273) *
                       C116 +
                   (C113 * C274 - C101 * C291 + C114 * C275 - C102 * C292 +
                    C115 * C276 - C103 * C293) *
                       C47279) *
                      C47294 * C47091 * C1011 +
                  ((C101 * C277 - C113 * C264 + C102 * C278 - C114 * C265 +
                    C103 * C279 - C115 * C266) *
                       C116 +
                   (C101 * C294 - C113 * C280 + C102 * C295 - C114 * C281 +
                    C103 * C296 - C115 * C282) *
                       C47279) *
                      C47294 * C47091 * C1012 +
                  ((C113 * C1016 - C101 * C1022 + C114 * C1017 - C102 * C1023 +
                    C115 * C1018 - C103 * C1024) *
                       C116 +
                   (C113 * C1025 - C101 * C1034 + C114 * C1026 - C102 * C1035 +
                    C115 * C1027 - C103 * C1036) *
                       C47279) *
                      C47294 * C47091 * C1013 +
                  ((C101 * C1028 - C113 * C1019 + C102 * C1029 - C114 * C1020 +
                    C103 * C1030 - C115 * C1021) *
                       C116 +
                   (C101 * C1037 - C113 * C1031 + C102 * C1038 - C114 * C1032 +
                    C103 * C1039 - C115 * C1033) *
                       C47279) *
                      C47294 * C47091 * C1014) *
                 C47045) /
                    (p * q * std::sqrt(p + q));
    d2ee[25] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C4575 * C124 - C4579 * C117 + C47358 * C125 - C4580 * C118) *
                C4581 +
            (C4575 * C138 - C4579 * C127 + C47358 * C139 - C4580 * C128) *
                C4577 +
            (C4730 - C4731 + C4732 - C4733) * C4582 +
            (C4734 - C4735 + C4736 - C4737) * C47389) *
               C47294 * C47091 * C47132 +
           ((C4731 - C4730 + C4733 - C4732) * C4581 +
            (C4735 - C4734 + C4737 - C4736) * C4577 +
            (C4738 - C4739 + C4740 - C4741) * C4582 +
            (C4742 - C4743 + C4744 - C4745) * C47389) *
               C47294 * C47091 * C47139 +
           ((C4739 - C4738 + C4741 - C4740) * C4581 +
            (C4743 - C4742 + C4745 - C4744) * C4577 +
            (C5646 - C5647 + C5648 - C5649) * C4582 +
            (C5650 - C5651 + C5652 - C5653) * C47389) *
               C47294 * C47091 * C2700) *
              C47050 +
          (((C4579 * C118 - C4575 * C125 + C4580 * C119 - C47358 * C126) *
                C4581 +
            (C4579 * C128 - C4575 * C139 + C4580 * C129 - C47358 * C140) *
                C4577 +
            (C4746 - C4747 + C4748 - C4749) * C4582 +
            (C4750 - C4751 + C4752 - C4753) * C47389) *
               C47294 * C47091 * C47132 +
           ((C4747 - C4746 + C4749 - C4748) * C4581 +
            (C4751 - C4750 + C4753 - C4752) * C4577 +
            (C4754 - C4755 + C4756 - C4757) * C4582 +
            (C4758 - C4759 + C4760 - C4761) * C47389) *
               C47294 * C47091 * C47139 +
           ((C4755 - C4754 + C4757 - C4756) * C4581 +
            (C4759 - C4758 + C4761 - C4760) * C4577 +
            (C5970 - C5971 + C5972 - C5973) * C4582 +
            (C5974 - C5975 + C5976 - C5977) * C47389) *
               C47294 * C47091 * C2700) *
              C47059 +
          (((C4575 * C126 - C4579 * C119 + C47358 * C130 - C4580 * C120) *
                C4581 +
            (C4575 * C140 - C4579 * C129 + C47358 * C141 - C4580 * C131) *
                C4577 +
            (C4762 - C4763 + C4764 - C4765) * C4582 +
            (C4766 - C4767 + C4768 - C4769) * C47389) *
               C47294 * C47091 * C47132 +
           ((C4763 - C4762 + C4765 - C4764) * C4581 +
            (C4767 - C4766 + C4769 - C4768) * C4577 +
            (C4770 - C4771 + C4772 - C4773) * C4582 +
            (C4774 - C4775 + C4776 - C4777) * C47389) *
               C47294 * C47091 * C47139 +
           ((C4771 - C4770 + C4773 - C4772) * C4581 +
            (C4775 - C4774 + C4777 - C4776) * C4577 +
            (C4575 * C1024 - C4579 * C1018 + C47358 * C1291 - C4580 * C1290) *
                C4582 +
            (C4575 * C1036 - C4579 * C1027 + C47358 * C1293 - C4580 * C1292) *
                C47389) *
               C47294 * C47091 * C2700) *
              C2703)) /
        (p * q * std::sqrt(p + q));
    d2ee[26] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C4575 * C124 - C4579 * C117 + C47358 * C125 - C4580 * C118) *
                 C4581 +
             (C4575 * C138 - C4579 * C127 + C47358 * C139 - C4580 * C128) *
                 C4577 +
             (C4730 - C4731 + C4732 - C4733) * C4582 +
             (C4734 - C4735 + C4736 - C4737) * C47389) *
                C47294 * C47340 +
            ((C4579 * C414 - C4575 * C424 + C4580 * C415 - C47358 * C425) *
                 C4581 +
             (C4579 * C427 - C4575 * C444 + C4580 * C428 - C47358 * C445) *
                 C4577 +
             (C5386 - C5387 + C5388 - C5389) * C4582 +
             (C5390 - C5391 + C5392 - C5393) * C47389) *
                C47294 * C47178) *
               C47132 +
           (((C4731 - C4730 + C4733 - C4732) * C4581 +
             (C4735 - C4734 + C4737 - C4736) * C4577 +
             (C4738 - C4739 + C4740 - C4741) * C4582 +
             (C4742 - C4743 + C4744 - C4745) * C47389) *
                C47294 * C47340 +
            ((C5387 - C5386 + C5389 - C5388) * C4581 +
             (C5391 - C5390 + C5393 - C5392) * C4577 +
             (C5824 - C5825 + C5826 - C5827) * C4582 +
             (C5828 - C5829 + C5830 - C5831) * C47389) *
                C47294 * C47178) *
               C47139 +
           (((C4739 - C4738 + C4741 - C4740) * C4581 +
             (C4743 - C4742 + C4745 - C4744) * C4577 +
             (C5646 - C5647 + C5648 - C5649) * C4582 +
             (C5650 - C5651 + C5652 - C5653) * C47389) *
                C47294 * C47340 +
            ((C5825 - C5824 + C5827 - C5826) * C4581 +
             (C5829 - C5828 + C5831 - C5830) * C4577 +
             (C6318 - C6319 + C6320 - C6321) * C4582 +
             (C6322 - C6323 + C6324 - C6325) * C47389) *
                C47294 * C47178) *
               C2700) *
              C2440 +
          ((((C4579 * C118 - C4575 * C125 + C4580 * C119 - C47358 * C126) *
                 C4581 +
             (C4579 * C128 - C4575 * C139 + C4580 * C129 - C47358 * C140) *
                 C4577 +
             (C4746 - C4747 + C4748 - C4749) * C4582 +
             (C4750 - C4751 + C4752 - C4753) * C47389) *
                C47294 * C47340 +
            ((C4575 * C425 - C4579 * C415 + C47358 * C426 - C4580 * C416) *
                 C4581 +
             (C4575 * C445 - C4579 * C428 + C47358 * C446 - C4580 * C429) *
                 C4577 +
             (C5394 - C5395 + C5396 - C5397) * C4582 +
             (C5398 - C5399 + C5400 - C5401) * C47389) *
                C47294 * C47178) *
               C47132 +
           (((C4747 - C4746 + C4749 - C4748) * C4581 +
             (C4751 - C4750 + C4753 - C4752) * C4577 +
             (C4754 - C4755 + C4756 - C4757) * C4582 +
             (C4758 - C4759 + C4760 - C4761) * C47389) *
                C47294 * C47340 +
            ((C5395 - C5394 + C5397 - C5396) * C4581 +
             (C5399 - C5398 + C5401 - C5400) * C4577 +
             (C6172 - C6173 + C6174 - C6175) * C4582 +
             (C6176 - C6177 + C6178 - C6179) * C47389) *
                C47294 * C47178) *
               C47139 +
           (((C4755 - C4754 + C4757 - C4756) * C4581 +
             (C4759 - C4758 + C4761 - C4760) * C4577 +
             (C5970 - C5971 + C5972 - C5973) * C4582 +
             (C5974 - C5975 + C5976 - C5977) * C47389) *
                C47294 * C47340 +
            ((C6173 - C6172 + C6175 - C6174) * C4581 +
             (C6177 - C6176 + C6179 - C6178) * C4577 +
             (C4575 * C1546 - C4579 * C1543 + C47358 * C1547 - C4580 * C1544) *
                 C4582 +
             (C4575 * C1552 - C4579 * C1549 + C47358 * C1553 - C4580 * C1550) *
                 C47389) *
                C47294 * C47178) *
               C2700) *
              C47056)) /
        (p * q * std::sqrt(p + q));
    d2ee[27] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4575 * C124 - C4579 * C117 + C47358 * C125 - C4580 * C118) *
                C4581 +
            (C4575 * C138 - C4579 * C127 + C47358 * C139 - C4580 * C128) *
                C4577 +
            (C4730 - C4731 + C4732 - C4733) * C4582 +
            (C4734 - C4735 + C4736 - C4737) * C47389) *
               C47294 * C47091 * C47417 +
           ((C4731 - C4730 + C4733 - C4732) * C4581 +
            (C4735 - C4734 + C4737 - C4736) * C4577 +
            (C4738 - C4739 + C4740 - C4741) * C4582 +
            (C4742 - C4743 + C4744 - C4745) * C47389) *
               C47294 * C47091 * C47413 +
           ((C4739 - C4738 + C4741 - C4740) * C4581 +
            (C4743 - C4742 + C4745 - C4744) * C4577 +
            (C5646 - C5647 + C5648 - C5649) * C4582 +
            (C5650 - C5651 + C5652 - C5653) * C47389) *
               C47294 * C47091 * C47403 +
           ((C5647 - C5646 + C5649 - C5648) * C4581 +
            (C5651 - C5650 + C5653 - C5652) * C4577 +
            (C5654 - C5655 + C5656 - C5657) * C4582 +
            (C5658 - C5659 + C5660 - C5661) * C47389) *
               C47294 * C47091 * C47381) *
              C2440 +
          (((C4579 * C118 - C4575 * C125 + C4580 * C119 - C47358 * C126) *
                C4581 +
            (C4579 * C128 - C4575 * C139 + C4580 * C129 - C47358 * C140) *
                C4577 +
            (C4746 - C4747 + C4748 - C4749) * C4582 +
            (C4750 - C4751 + C4752 - C4753) * C47389) *
               C47294 * C47091 * C47417 +
           ((C4747 - C4746 + C4749 - C4748) * C4581 +
            (C4751 - C4750 + C4753 - C4752) * C4577 +
            (C4754 - C4755 + C4756 - C4757) * C4582 +
            (C4758 - C4759 + C4760 - C4761) * C47389) *
               C47294 * C47091 * C47413 +
           ((C4755 - C4754 + C4757 - C4756) * C4581 +
            (C4759 - C4758 + C4761 - C4760) * C4577 +
            (C5970 - C5971 + C5972 - C5973) * C4582 +
            (C5974 - C5975 + C5976 - C5977) * C47389) *
               C47294 * C47091 * C47403 +
           ((C5971 - C5970 + C5973 - C5972) * C4581 +
            (C5975 - C5974 + C5977 - C5976) * C4577 +
            (C4575 * C1029 - C4579 * C1020 + C47358 * C1030 - C4580 * C1021) *
                C4582 +
            (C4575 * C1038 - C4579 * C1032 + C47358 * C1039 - C4580 * C1033) *
                C47389) *
               C47294 * C47091 * C47381) *
              C47056)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4575 * C124 - C4579 * C117 + C47358 * C125 - C4580 * C118) *
                C4581 +
            (C4575 * C138 - C4579 * C127 + C47358 * C139 - C4580 * C128) *
                C4577 +
            (C4730 - C4731 + C4732 - C4733) * C4582 +
            (C4734 - C4735 + C4736 - C4737) * C47389) *
               C47294 * C47091 * C2332 +
           ((C4731 - C4730 + C4733 - C4732) * C4581 +
            (C4735 - C4734 + C4737 - C4736) * C4577 +
            (C4738 - C4739 + C4740 - C4741) * C4582 +
            (C4742 - C4743 + C4744 - C4745) * C47389) *
               C47294 * C47091 * C47136) *
              C47416 +
          (((C4579 * C118 - C4575 * C125 + C4580 * C119 - C47358 * C126) *
                C4581 +
            (C4579 * C128 - C4575 * C139 + C4580 * C129 - C47358 * C140) *
                C4577 +
            (C4746 - C4747 + C4748 - C4749) * C4582 +
            (C4750 - C4751 + C4752 - C4753) * C47389) *
               C47294 * C47091 * C2332 +
           ((C4747 - C4746 + C4749 - C4748) * C4581 +
            (C4751 - C4750 + C4753 - C4752) * C4577 +
            (C4754 - C4755 + C4756 - C4757) * C4582 +
            (C4758 - C4759 + C4760 - C4761) * C47389) *
               C47294 * C47091 * C47136) *
              C47409 +
          (((C4575 * C126 - C4579 * C119 + C47358 * C130 - C4580 * C120) *
                C4581 +
            (C4575 * C140 - C4579 * C129 + C47358 * C141 - C4580 * C131) *
                C4577 +
            (C4762 - C4763 + C4764 - C4765) * C4582 +
            (C4766 - C4767 + C4768 - C4769) * C47389) *
               C47294 * C47091 * C2332 +
           ((C4763 - C4762 + C4765 - C4764) * C4581 +
            (C4767 - C4766 + C4769 - C4768) * C4577 +
            (C4770 - C4771 + C4772 - C4773) * C4582 +
            (C4774 - C4775 + C4776 - C4777) * C47389) *
               C47294 * C47091 * C47136) *
              C47396 +
          (((C4579 * C120 - C4575 * C130 + C4580 * C121 - C47358 * C132) *
                C4581 +
            (C4579 * C131 - C4575 * C141 + C4580 * C133 - C47358 * C142) *
                C4577 +
            (C5054 - C5055 + C5056 - C5057) * C4582 +
            (C5058 - C5059 + C5060 - C5061) * C47389) *
               C47294 * C47091 * C2332 +
           ((C5055 - C5054 + C5057 - C5056) * C4581 +
            (C5059 - C5058 + C5061 - C5060) * C4577 +
            (C4575 * C285 - C4579 * C268 + C47358 * C289 - C4580 * C270) *
                C4582 +
            (C4575 * C298 - C4579 * C286 + C47358 * C300 - C4580 * C290) *
                C47389) *
               C47294 * C47091 * C47136) *
              C47375)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C4575 * C124 - C4579 * C117 + C47358 * C125 - C4580 * C118) *
                 C4581 +
             (C4575 * C138 - C4579 * C127 + C47358 * C139 - C4580 * C128) *
                 C4577 +
             (C4730 - C4731 + C4732 - C4733) * C4582 +
             (C4734 - C4735 + C4736 - C4737) * C47389) *
                C47294 * C47411 +
            ((C4579 * C414 - C4575 * C424 + C4580 * C415 - C47358 * C425) *
                 C4581 +
             (C4579 * C427 - C4575 * C444 + C4580 * C428 - C47358 * C445) *
                 C4577 +
             (C5386 - C5387 + C5388 - C5389) * C4582 +
             (C5390 - C5391 + C5392 - C5393) * C47389) *
                C47294 * C47400 +
            ((C4575 * C430 - C4579 * C417 + C47358 * C431 - C4580 * C418) *
                 C4581 +
             (C4575 * C447 - C4579 * C433 + C47358 * C448 - C4580 * C434) *
                 C4577 +
             (C5816 - C5817 + C5818 - C5819) * C4582 +
             (C5820 - C5821 + C5822 - C5823) * C47389) *
                C47294 * C47374) *
               C2332 +
           (((C4731 - C4730 + C4733 - C4732) * C4581 +
             (C4735 - C4734 + C4737 - C4736) * C4577 +
             (C4738 - C4739 + C4740 - C4741) * C4582 +
             (C4742 - C4743 + C4744 - C4745) * C47389) *
                C47294 * C47411 +
            ((C5387 - C5386 + C5389 - C5388) * C4581 +
             (C5391 - C5390 + C5393 - C5392) * C4577 +
             (C5824 - C5825 + C5826 - C5827) * C4582 +
             (C5828 - C5829 + C5830 - C5831) * C47389) *
                C47294 * C47400 +
            ((C5817 - C5816 + C5819 - C5818) * C4581 +
             (C5821 - C5820 + C5823 - C5822) * C4577 +
             (C5832 - C5833 + C5834 - C5835) * C4582 +
             (C5836 - C5837 + C5838 - C5839) * C47389) *
                C47294 * C47374) *
               C47136) *
              C2440 +
          ((((C4579 * C118 - C4575 * C125 + C4580 * C119 - C47358 * C126) *
                 C4581 +
             (C4579 * C128 - C4575 * C139 + C4580 * C129 - C47358 * C140) *
                 C4577 +
             (C4746 - C4747 + C4748 - C4749) * C4582 +
             (C4750 - C4751 + C4752 - C4753) * C47389) *
                C47294 * C47411 +
            ((C4575 * C425 - C4579 * C415 + C47358 * C426 - C4580 * C416) *
                 C4581 +
             (C4575 * C445 - C4579 * C428 + C47358 * C446 - C4580 * C429) *
                 C4577 +
             (C5394 - C5395 + C5396 - C5397) * C4582 +
             (C5398 - C5399 + C5400 - C5401) * C47389) *
                C47294 * C47400 +
            ((C4579 * C418 - C4575 * C431 + C4580 * C419 - C47358 * C432) *
                 C4581 +
             (C4579 * C434 - C4575 * C448 + C4580 * C435 - C47358 * C449) *
                 C4577 +
             (C6902 - C6903 + C6904 - C6905) * C4582 +
             (C6906 - C6907 + C6908 - C6909) * C47389) *
                C47294 * C47374) *
               C2332 +
           (((C4747 - C4746 + C4749 - C4748) * C4581 +
             (C4751 - C4750 + C4753 - C4752) * C4577 +
             (C4754 - C4755 + C4756 - C4757) * C4582 +
             (C4758 - C4759 + C4760 - C4761) * C47389) *
                C47294 * C47411 +
            ((C5395 - C5394 + C5397 - C5396) * C4581 +
             (C5399 - C5398 + C5401 - C5400) * C4577 +
             (C6172 - C6173 + C6174 - C6175) * C4582 +
             (C6176 - C6177 + C6178 - C6179) * C47389) *
                C47294 * C47400 +
            ((C6903 - C6902 + C6905 - C6904) * C4581 +
             (C6907 - C6906 + C6909 - C6908) * C4577 +
             (C4575 * C1172 - C4579 * C1157 + C47358 * C1173 - C4580 * C1158) *
                 C4582 +
             (C4575 * C1184 - C4579 * C1175 + C47358 * C1185 - C4580 * C1176) *
                 C47389) *
                C47294 * C47374) *
               C47136) *
              C47056)) /
            (p * q * std::sqrt(p + q));
    d2ee[28] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C4575 * C124 - C4579 * C117 + C47358 * C125 - C4580 * C118) *
                 C4581 +
             (C4575 * C138 - C4579 * C127 + C47358 * C139 - C4580 * C128) *
                 C4577 +
             (C4730 - C4731 + C4732 - C4733) * C4582 +
             (C4734 - C4735 + C4736 - C4737) * C47389) *
                C47294 * C47340 +
            ((C4579 * C414 - C4575 * C424 + C4580 * C415 - C47358 * C425) *
                 C4581 +
             (C4579 * C427 - C4575 * C444 + C4580 * C428 - C47358 * C445) *
                 C4577 +
             (C5386 - C5387 + C5388 - C5389) * C4582 +
             (C5390 - C5391 + C5392 - C5393) * C47389) *
                C47294 * C47178) *
               C2332 +
           (((C4731 - C4730 + C4733 - C4732) * C4581 +
             (C4735 - C4734 + C4737 - C4736) * C4577 +
             (C4738 - C4739 + C4740 - C4741) * C4582 +
             (C4742 - C4743 + C4744 - C4745) * C47389) *
                C47294 * C47340 +
            ((C5387 - C5386 + C5389 - C5388) * C4581 +
             (C5391 - C5390 + C5393 - C5392) * C4577 +
             (C5824 - C5825 + C5826 - C5827) * C4582 +
             (C5828 - C5829 + C5830 - C5831) * C47389) *
                C47294 * C47178) *
               C47136) *
              C47050 +
          ((((C4579 * C118 - C4575 * C125 + C4580 * C119 - C47358 * C126) *
                 C4581 +
             (C4579 * C128 - C4575 * C139 + C4580 * C129 - C47358 * C140) *
                 C4577 +
             (C4746 - C4747 + C4748 - C4749) * C4582 +
             (C4750 - C4751 + C4752 - C4753) * C47389) *
                C47294 * C47340 +
            ((C4575 * C425 - C4579 * C415 + C47358 * C426 - C4580 * C416) *
                 C4581 +
             (C4575 * C445 - C4579 * C428 + C47358 * C446 - C4580 * C429) *
                 C4577 +
             (C5394 - C5395 + C5396 - C5397) * C4582 +
             (C5398 - C5399 + C5400 - C5401) * C47389) *
                C47294 * C47178) *
               C2332 +
           (((C4747 - C4746 + C4749 - C4748) * C4581 +
             (C4751 - C4750 + C4753 - C4752) * C4577 +
             (C4754 - C4755 + C4756 - C4757) * C4582 +
             (C4758 - C4759 + C4760 - C4761) * C47389) *
                C47294 * C47340 +
            ((C5395 - C5394 + C5397 - C5396) * C4581 +
             (C5399 - C5398 + C5401 - C5400) * C4577 +
             (C6172 - C6173 + C6174 - C6175) * C4582 +
             (C6176 - C6177 + C6178 - C6179) * C47389) *
                C47294 * C47178) *
               C47136) *
              C47059 +
          ((((C4575 * C126 - C4579 * C119 + C47358 * C130 - C4580 * C120) *
                 C4581 +
             (C4575 * C140 - C4579 * C129 + C47358 * C141 - C4580 * C131) *
                 C4577 +
             (C4762 - C4763 + C4764 - C4765) * C4582 +
             (C4766 - C4767 + C4768 - C4769) * C47389) *
                C47294 * C47340 +
            ((C4579 * C416 - C4575 * C426 + C4580 * C420 - C47358 * C436) *
                 C4581 +
             (C4579 * C429 - C4575 * C446 + C4580 * C437 - C47358 * C450) *
                 C4577 +
             (C5402 - C5403 + C5404 - C5405) * C4582 +
             (C5406 - C5407 + C5408 - C5409) * C47389) *
                C47294 * C47178) *
               C2332 +
           (((C4763 - C4762 + C4765 - C4764) * C4581 +
             (C4767 - C4766 + C4769 - C4768) * C4577 +
             (C4770 - C4771 + C4772 - C4773) * C4582 +
             (C4774 - C4775 + C4776 - C4777) * C47389) *
                C47294 * C47340 +
            ((C5403 - C5402 + C5405 - C5404) * C4581 +
             (C5407 - C5406 + C5409 - C5408) * C4577 +
             (C4575 * C1167 - C4579 * C1155 + C47358 * C1441 - C4580 * C1440) *
                 C4582 +
             (C4575 * C1182 - C4579 * C1170 + C47358 * C1443 - C4580 * C1442) *
                 C47389) *
                C47294 * C47178) *
               C47136) *
              C2703)) /
        (p * q * std::sqrt(p + q));
    d2ee[29] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C4575 * C124 - C4579 * C117 + C47358 * C125 - C4580 * C118) *
                C4581 +
            (C4575 * C138 - C4579 * C127 + C47358 * C139 - C4580 * C128) *
                C4577 +
            (C4730 - C4731 + C4732 - C4733) * C4582 +
            (C4734 - C4735 + C4736 - C4737) * C47389) *
               C47294 * C47091 * C2332 +
           ((C4731 - C4730 + C4733 - C4732) * C4581 +
            (C4735 - C4734 + C4737 - C4736) * C4577 +
            (C4738 - C4739 + C4740 - C4741) * C4582 +
            (C4742 - C4743 + C4744 - C4745) * C47389) *
               C47294 * C47091 * C47136) *
              C47416 +
          (((C4579 * C118 - C4575 * C125 + C4580 * C119 - C47358 * C126) *
                C4581 +
            (C4579 * C128 - C4575 * C139 + C4580 * C129 - C47358 * C140) *
                C4577 +
            (C4746 - C4747 + C4748 - C4749) * C4582 +
            (C4750 - C4751 + C4752 - C4753) * C47389) *
               C47294 * C47091 * C2332 +
           ((C4747 - C4746 + C4749 - C4748) * C4581 +
            (C4751 - C4750 + C4753 - C4752) * C4577 +
            (C4754 - C4755 + C4756 - C4757) * C4582 +
            (C4758 - C4759 + C4760 - C4761) * C47389) *
               C47294 * C47091 * C47136) *
              C47409 +
          (((C4575 * C126 - C4579 * C119 + C47358 * C130 - C4580 * C120) *
                C4581 +
            (C4575 * C140 - C4579 * C129 + C47358 * C141 - C4580 * C131) *
                C4577 +
            (C4762 - C4763 + C4764 - C4765) * C4582 +
            (C4766 - C4767 + C4768 - C4769) * C47389) *
               C47294 * C47091 * C2332 +
           ((C4763 - C4762 + C4765 - C4764) * C4581 +
            (C4767 - C4766 + C4769 - C4768) * C4577 +
            (C4770 - C4771 + C4772 - C4773) * C4582 +
            (C4774 - C4775 + C4776 - C4777) * C47389) *
               C47294 * C47091 * C47136) *
              C47396 +
          (((C4579 * C120 - C4575 * C130 + C4580 * C121 - C47358 * C132) *
                C4581 +
            (C4579 * C131 - C4575 * C141 + C4580 * C133 - C47358 * C142) *
                C4577 +
            (C5054 - C5055 + C5056 - C5057) * C4582 +
            (C5058 - C5059 + C5060 - C5061) * C47389) *
               C47294 * C47091 * C2332 +
           ((C5055 - C5054 + C5057 - C5056) * C4581 +
            (C5059 - C5058 + C5061 - C5060) * C4577 +
            (C4575 * C285 - C4579 * C268 + C47358 * C289 - C4580 * C270) *
                C4582 +
            (C4575 * C298 - C4579 * C286 + C47358 * C300 - C4580 * C290) *
                C47389) *
               C47294 * C47091 * C47136) *
              C47375)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C4575 * C124 - C4579 * C117 + C47358 * C125 - C4580 * C118) *
                C4581 +
            (C4575 * C138 - C4579 * C127 + C47358 * C139 - C4580 * C128) *
                C4577 +
            (C4730 - C4731 + C4732 - C4733) * C4582 +
            (C4734 - C4735 + C4736 - C4737) * C47389) *
               C47294 * C47091 * C47417 +
           ((C4731 - C4730 + C4733 - C4732) * C4581 +
            (C4735 - C4734 + C4737 - C4736) * C4577 +
            (C4738 - C4739 + C4740 - C4741) * C4582 +
            (C4742 - C4743 + C4744 - C4745) * C47389) *
               C47294 * C47091 * C47413 +
           ((C4739 - C4738 + C4741 - C4740) * C4581 +
            (C4743 - C4742 + C4745 - C4744) * C4577 +
            (C5646 - C5647 + C5648 - C5649) * C4582 +
            (C5650 - C5651 + C5652 - C5653) * C47389) *
               C47294 * C47091 * C47403 +
           ((C5647 - C5646 + C5649 - C5648) * C4581 +
            (C5651 - C5650 + C5653 - C5652) * C4577 +
            (C5654 - C5655 + C5656 - C5657) * C4582 +
            (C5658 - C5659 + C5660 - C5661) * C47389) *
               C47294 * C47091 * C47381) *
              C2440 +
          (((C4579 * C118 - C4575 * C125 + C4580 * C119 - C47358 * C126) *
                C4581 +
            (C4579 * C128 - C4575 * C139 + C4580 * C129 - C47358 * C140) *
                C4577 +
            (C4746 - C4747 + C4748 - C4749) * C4582 +
            (C4750 - C4751 + C4752 - C4753) * C47389) *
               C47294 * C47091 * C47417 +
           ((C4747 - C4746 + C4749 - C4748) * C4581 +
            (C4751 - C4750 + C4753 - C4752) * C4577 +
            (C4754 - C4755 + C4756 - C4757) * C4582 +
            (C4758 - C4759 + C4760 - C4761) * C47389) *
               C47294 * C47091 * C47413 +
           ((C4755 - C4754 + C4757 - C4756) * C4581 +
            (C4759 - C4758 + C4761 - C4760) * C4577 +
            (C5970 - C5971 + C5972 - C5973) * C4582 +
            (C5974 - C5975 + C5976 - C5977) * C47389) *
               C47294 * C47091 * C47403 +
           ((C5971 - C5970 + C5973 - C5972) * C4581 +
            (C5975 - C5974 + C5977 - C5976) * C4577 +
            (C4575 * C1029 - C4579 * C1020 + C47358 * C1030 - C4580 * C1021) *
                C4582 +
            (C4575 * C1038 - C4579 * C1032 + C47358 * C1039 - C4580 * C1033) *
                C47389) *
               C47294 * C47091 * C47381) *
              C47056)) /
            (p * q * std::sqrt(p + q));
    d2ee[30] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C4575 * C124 - C4579 * C117 + C47358 * C125 - C4580 * C118) *
                 C4581 +
             (C4575 * C138 - C4579 * C127 + C47358 * C139 - C4580 * C128) *
                 C4577 +
             (C4730 - C4731 + C4732 - C4733) * C4582 +
             (C4734 - C4735 + C4736 - C4737) * C47389) *
                C47294 * C3094 +
            ((C4579 * C414 - C4575 * C424 + C4580 * C415 - C47358 * C425) *
                 C4581 +
             (C4579 * C427 - C4575 * C444 + C4580 * C428 - C47358 * C445) *
                 C4577 +
             (C5386 - C5387 + C5388 - C5389) * C4582 +
             (C5390 - C5391 + C5392 - C5393) * C47389) *
                C47294 * C47178) *
               C47132 +
           (((C4731 - C4730 + C4733 - C4732) * C4581 +
             (C4735 - C4734 + C4737 - C4736) * C4577 +
             (C4738 - C4739 + C4740 - C4741) * C4582 +
             (C4742 - C4743 + C4744 - C4745) * C47389) *
                C47294 * C3094 +
            ((C5387 - C5386 + C5389 - C5388) * C4581 +
             (C5391 - C5390 + C5393 - C5392) * C4577 +
             (C5824 - C5825 + C5826 - C5827) * C4582 +
             (C5828 - C5829 + C5830 - C5831) * C47389) *
                C47294 * C47178) *
               C47139 +
           (((C4739 - C4738 + C4741 - C4740) * C4581 +
             (C4743 - C4742 + C4745 - C4744) * C4577 +
             (C5646 - C5647 + C5648 - C5649) * C4582 +
             (C5650 - C5651 + C5652 - C5653) * C47389) *
                C47294 * C3094 +
            ((C5825 - C5824 + C5827 - C5826) * C4581 +
             (C5829 - C5828 + C5831 - C5830) * C4577 +
             (C6318 - C6319 + C6320 - C6321) * C4582 +
             (C6322 - C6323 + C6324 - C6325) * C47389) *
                C47294 * C47178) *
               C2700) *
              C47325 +
          ((((C4579 * C118 - C4575 * C125 + C4580 * C119 - C47358 * C126) *
                 C4581 +
             (C4579 * C128 - C4575 * C139 + C4580 * C129 - C47358 * C140) *
                 C4577 +
             (C4746 - C4747 + C4748 - C4749) * C4582 +
             (C4750 - C4751 + C4752 - C4753) * C47389) *
                C47294 * C3094 +
            ((C4575 * C425 - C4579 * C415 + C47358 * C426 - C4580 * C416) *
                 C4581 +
             (C4575 * C445 - C4579 * C428 + C47358 * C446 - C4580 * C429) *
                 C4577 +
             (C5394 - C5395 + C5396 - C5397) * C4582 +
             (C5398 - C5399 + C5400 - C5401) * C47389) *
                C47294 * C47178) *
               C47132 +
           (((C4747 - C4746 + C4749 - C4748) * C4581 +
             (C4751 - C4750 + C4753 - C4752) * C4577 +
             (C4754 - C4755 + C4756 - C4757) * C4582 +
             (C4758 - C4759 + C4760 - C4761) * C47389) *
                C47294 * C3094 +
            ((C5395 - C5394 + C5397 - C5396) * C4581 +
             (C5399 - C5398 + C5401 - C5400) * C4577 +
             (C6172 - C6173 + C6174 - C6175) * C4582 +
             (C6176 - C6177 + C6178 - C6179) * C47389) *
                C47294 * C47178) *
               C47139 +
           (((C4755 - C4754 + C4757 - C4756) * C4581 +
             (C4759 - C4758 + C4761 - C4760) * C4577 +
             (C5970 - C5971 + C5972 - C5973) * C4582 +
             (C5974 - C5975 + C5976 - C5977) * C47389) *
                C47294 * C3094 +
            ((C6173 - C6172 + C6175 - C6174) * C4581 +
             (C6177 - C6176 + C6179 - C6178) * C4577 +
             (C4575 * C1546 - C4579 * C1543 + C47358 * C1547 - C4580 * C1544) *
                 C4582 +
             (C4575 * C1552 - C4579 * C1549 + C47358 * C1553 - C4580 * C1550) *
                 C47389) *
                C47294 * C47178) *
               C2700) *
              C47056)) /
        (p * q * std::sqrt(p + q));
    d2ee[31] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C4575 * C124 - C4579 * C117 + C47358 * C125 - C4580 * C118) *
                C4581 +
            (C4575 * C138 - C4579 * C127 + C47358 * C139 - C4580 * C128) *
                C4577 +
            (C4730 - C4731 + C4732 - C4733) * C4582 +
            (C4734 - C4735 + C4736 - C4737) * C47389) *
               C47294 * C47174 +
           ((C4579 * C414 - C4575 * C424 + C4580 * C415 - C47358 * C425) *
                C4581 +
            (C4579 * C427 - C4575 * C444 + C4580 * C428 - C47358 * C445) *
                C4577 +
            (C5386 - C5387 + C5388 - C5389) * C4582 +
            (C5390 - C5391 + C5392 - C5393) * C47389) *
               C47294 * C47181 +
           ((C4575 * C430 - C4579 * C417 + C47358 * C431 - C4580 * C418) *
                C4581 +
            (C4575 * C447 - C4579 * C433 + C47358 * C448 - C4580 * C434) *
                C4577 +
            (C5816 - C5817 + C5818 - C5819) * C4582 +
            (C5820 - C5821 + C5822 - C5823) * C47389) *
               C47294 * C3602) *
              C47132 +
          (((C4731 - C4730 + C4733 - C4732) * C4581 +
            (C4735 - C4734 + C4737 - C4736) * C4577 +
            (C4738 - C4739 + C4740 - C4741) * C4582 +
            (C4742 - C4743 + C4744 - C4745) * C47389) *
               C47294 * C47174 +
           ((C5387 - C5386 + C5389 - C5388) * C4581 +
            (C5391 - C5390 + C5393 - C5392) * C4577 +
            (C5824 - C5825 + C5826 - C5827) * C4582 +
            (C5828 - C5829 + C5830 - C5831) * C47389) *
               C47294 * C47181 +
           ((C5817 - C5816 + C5819 - C5818) * C4581 +
            (C5821 - C5820 + C5823 - C5822) * C4577 +
            (C5832 - C5833 + C5834 - C5835) * C4582 +
            (C5836 - C5837 + C5838 - C5839) * C47389) *
               C47294 * C3602) *
              C47139 +
          (((C4739 - C4738 + C4741 - C4740) * C4581 +
            (C4743 - C4742 + C4745 - C4744) * C4577 +
            (C5646 - C5647 + C5648 - C5649) * C4582 +
            (C5650 - C5651 + C5652 - C5653) * C47389) *
               C47294 * C47174 +
           ((C5825 - C5824 + C5827 - C5826) * C4581 +
            (C5829 - C5828 + C5831 - C5830) * C4577 +
            (C6318 - C6319 + C6320 - C6321) * C4582 +
            (C6322 - C6323 + C6324 - C6325) * C47389) *
               C47294 * C47181 +
           ((C5833 - C5832 + C5835 - C5834) * C4581 +
            (C5837 - C5836 + C5839 - C5838) * C4577 +
            (C4575 * C5809 - C4579 * C5807 + C47358 * C5810 - C4580 * C5808) *
                C4582 +
            (C4575 * C5813 - C4579 * C5811 + C47358 * C5814 - C4580 * C5812) *
                C47389) *
               C47294 * C3602) *
              C2700) *
         C47045) /
        (p * q * std::sqrt(p + q));
    d2ee[32] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4575 * C124 - C4579 * C117 + C47358 * C125 - C4580 * C118) *
                C4581 +
            (C4575 * C138 - C4579 * C127 + C47358 * C139 - C4580 * C128) *
                C4577 +
            (C4730 - C4731 + C4732 - C4733) * C4582 +
            (C4734 - C4735 + C4736 - C4737) * C47389) *
               C47294 * C3094 +
           ((C4579 * C414 - C4575 * C424 + C4580 * C415 - C47358 * C425) *
                C4581 +
            (C4579 * C427 - C4575 * C444 + C4580 * C428 - C47358 * C445) *
                C4577 +
            (C5386 - C5387 + C5388 - C5389) * C4582 +
            (C5390 - C5391 + C5392 - C5393) * C47389) *
               C47294 * C47178) *
              C47417 +
          (((C4731 - C4730 + C4733 - C4732) * C4581 +
            (C4735 - C4734 + C4737 - C4736) * C4577 +
            (C4738 - C4739 + C4740 - C4741) * C4582 +
            (C4742 - C4743 + C4744 - C4745) * C47389) *
               C47294 * C3094 +
           ((C5387 - C5386 + C5389 - C5388) * C4581 +
            (C5391 - C5390 + C5393 - C5392) * C4577 +
            (C5824 - C5825 + C5826 - C5827) * C4582 +
            (C5828 - C5829 + C5830 - C5831) * C47389) *
               C47294 * C47178) *
              C47413 +
          (((C4739 - C4738 + C4741 - C4740) * C4581 +
            (C4743 - C4742 + C4745 - C4744) * C4577 +
            (C5646 - C5647 + C5648 - C5649) * C4582 +
            (C5650 - C5651 + C5652 - C5653) * C47389) *
               C47294 * C3094 +
           ((C5825 - C5824 + C5827 - C5826) * C4581 +
            (C5829 - C5828 + C5831 - C5830) * C4577 +
            (C6318 - C6319 + C6320 - C6321) * C4582 +
            (C6322 - C6323 + C6324 - C6325) * C47389) *
               C47294 * C47178) *
              C47403 +
          (((C5647 - C5646 + C5649 - C5648) * C4581 +
            (C5651 - C5650 + C5653 - C5652) * C4577 +
            (C5654 - C5655 + C5656 - C5657) * C4582 +
            (C5658 - C5659 + C5660 - C5661) * C47389) *
               C47294 * C3094 +
           ((C6319 - C6318 + C6321 - C6320) * C4581 +
            (C6323 - C6322 + C6325 - C6324) * C4577 +
            (C4575 * C6311 - C4579 * C6309 + C47358 * C6312 - C4580 * C6310) *
                C4582 +
            (C4575 * C6315 - C4579 * C6313 + C47358 * C6316 - C4580 * C6314) *
                C47389) *
               C47294 * C47178) *
              C47381) *
         C47045) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C4575 * C124 - C4579 * C117 + C47358 * C125 - C4580 * C118) *
                 C4581 +
             (C4575 * C138 - C4579 * C127 + C47358 * C139 - C4580 * C128) *
                 C4577 +
             (C4730 - C4731 + C4732 - C4733) * C4582 +
             (C4734 - C4735 + C4736 - C4737) * C47389) *
                C47294 * C3094 +
            ((C4579 * C414 - C4575 * C424 + C4580 * C415 - C47358 * C425) *
                 C4581 +
             (C4579 * C427 - C4575 * C444 + C4580 * C428 - C47358 * C445) *
                 C4577 +
             (C5386 - C5387 + C5388 - C5389) * C4582 +
             (C5390 - C5391 + C5392 - C5393) * C47389) *
                C47294 * C47178) *
               C2332 +
           (((C4731 - C4730 + C4733 - C4732) * C4581 +
             (C4735 - C4734 + C4737 - C4736) * C4577 +
             (C4738 - C4739 + C4740 - C4741) * C4582 +
             (C4742 - C4743 + C4744 - C4745) * C47389) *
                C47294 * C3094 +
            ((C5387 - C5386 + C5389 - C5388) * C4581 +
             (C5391 - C5390 + C5393 - C5392) * C4577 +
             (C5824 - C5825 + C5826 - C5827) * C4582 +
             (C5828 - C5829 + C5830 - C5831) * C47389) *
                C47294 * C47178) *
               C47136) *
              C47407 +
          ((((C4579 * C118 - C4575 * C125 + C4580 * C119 - C47358 * C126) *
                 C4581 +
             (C4579 * C128 - C4575 * C139 + C4580 * C129 - C47358 * C140) *
                 C4577 +
             (C4746 - C4747 + C4748 - C4749) * C4582 +
             (C4750 - C4751 + C4752 - C4753) * C47389) *
                C47294 * C3094 +
            ((C4575 * C425 - C4579 * C415 + C47358 * C426 - C4580 * C416) *
                 C4581 +
             (C4575 * C445 - C4579 * C428 + C47358 * C446 - C4580 * C429) *
                 C4577 +
             (C5394 - C5395 + C5396 - C5397) * C4582 +
             (C5398 - C5399 + C5400 - C5401) * C47389) *
                C47294 * C47178) *
               C2332 +
           (((C4747 - C4746 + C4749 - C4748) * C4581 +
             (C4751 - C4750 + C4753 - C4752) * C4577 +
             (C4754 - C4755 + C4756 - C4757) * C4582 +
             (C4758 - C4759 + C4760 - C4761) * C47389) *
                C47294 * C3094 +
            ((C5395 - C5394 + C5397 - C5396) * C4581 +
             (C5399 - C5398 + C5401 - C5400) * C4577 +
             (C6172 - C6173 + C6174 - C6175) * C4582 +
             (C6176 - C6177 + C6178 - C6179) * C47389) *
                C47294 * C47178) *
               C47136) *
              C47394 +
          ((((C4575 * C126 - C4579 * C119 + C47358 * C130 - C4580 * C120) *
                 C4581 +
             (C4575 * C140 - C4579 * C129 + C47358 * C141 - C4580 * C131) *
                 C4577 +
             (C4762 - C4763 + C4764 - C4765) * C4582 +
             (C4766 - C4767 + C4768 - C4769) * C47389) *
                C47294 * C3094 +
            ((C4579 * C416 - C4575 * C426 + C4580 * C420 - C47358 * C436) *
                 C4581 +
             (C4579 * C429 - C4575 * C446 + C4580 * C437 - C47358 * C450) *
                 C4577 +
             (C5402 - C5403 + C5404 - C5405) * C4582 +
             (C5406 - C5407 + C5408 - C5409) * C47389) *
                C47294 * C47178) *
               C2332 +
           (((C4763 - C4762 + C4765 - C4764) * C4581 +
             (C4767 - C4766 + C4769 - C4768) * C4577 +
             (C4770 - C4771 + C4772 - C4773) * C4582 +
             (C4774 - C4775 + C4776 - C4777) * C47389) *
                C47294 * C3094 +
            ((C5403 - C5402 + C5405 - C5404) * C4581 +
             (C5407 - C5406 + C5409 - C5408) * C4577 +
             (C4575 * C1167 - C4579 * C1155 + C47358 * C1441 - C4580 * C1440) *
                 C4582 +
             (C4575 * C1182 - C4579 * C1170 + C47358 * C1443 - C4580 * C1442) *
                 C47389) *
                C47294 * C47178) *
               C47136) *
              C47365)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C4575 * C124 - C4579 * C117 + C47358 * C125 - C4580 * C118) *
                C4581 +
            (C4575 * C138 - C4579 * C127 + C47358 * C139 - C4580 * C128) *
                C4577 +
            (C4730 - C4731 + C4732 - C4733) * C4582 +
            (C4734 - C4735 + C4736 - C4737) * C47389) *
               C47294 * C47418 +
           ((C4579 * C414 - C4575 * C424 + C4580 * C415 - C47358 * C425) *
                C4581 +
            (C4579 * C427 - C4575 * C444 + C4580 * C428 - C47358 * C445) *
                C4577 +
            (C5386 - C5387 + C5388 - C5389) * C4582 +
            (C5390 - C5391 + C5392 - C5393) * C47389) *
               C47294 * C47415 +
           ((C4575 * C430 - C4579 * C417 + C47358 * C431 - C4580 * C418) *
                C4581 +
            (C4575 * C447 - C4579 * C433 + C47358 * C448 - C4580 * C434) *
                C4577 +
            (C5816 - C5817 + C5818 - C5819) * C4582 +
            (C5820 - C5821 + C5822 - C5823) * C47389) *
               C47294 * C47406 +
           ((C4579 * C1844 - C4575 * C1850 + C4580 * C1845 - C47358 * C1851) *
                C4581 +
            (C4579 * C1853 - C4575 * C1862 + C4580 * C1854 - C47358 * C1863) *
                C4577 +
            (C7178 - C7179 + C7180 - C7181) * C4582 +
            (C7182 - C7183 + C7184 - C7185) * C47389) *
               C47294 * C47387) *
              C2332 +
          (((C4731 - C4730 + C4733 - C4732) * C4581 +
            (C4735 - C4734 + C4737 - C4736) * C4577 +
            (C4738 - C4739 + C4740 - C4741) * C4582 +
            (C4742 - C4743 + C4744 - C4745) * C47389) *
               C47294 * C47418 +
           ((C5387 - C5386 + C5389 - C5388) * C4581 +
            (C5391 - C5390 + C5393 - C5392) * C4577 +
            (C5824 - C5825 + C5826 - C5827) * C4582 +
            (C5828 - C5829 + C5830 - C5831) * C47389) *
               C47294 * C47415 +
           ((C5817 - C5816 + C5819 - C5818) * C4581 +
            (C5821 - C5820 + C5823 - C5822) * C4577 +
            (C5832 - C5833 + C5834 - C5835) * C4582 +
            (C5836 - C5837 + C5838 - C5839) * C47389) *
               C47294 * C47406 +
           ((C7179 - C7178 + C7181 - C7180) * C4581 +
            (C7183 - C7182 + C7185 - C7184) * C4577 +
            (C4575 * C7171 - C4579 * C7169 + C47358 * C7172 - C4580 * C7170) *
                C4582 +
            (C4575 * C7175 - C4579 * C7173 + C47358 * C7176 - C4580 * C7174) *
                C47389) *
               C47294 * C47387) *
              C47136) *
         C47045) /
            (p * q * std::sqrt(p + q));
    d2ee[33] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C4575 * C124 - C4579 * C117 + C47358 * C125 - C4580 * C118) *
                 C4581 +
             (C4575 * C138 - C4579 * C127 + C47358 * C139 - C4580 * C128) *
                 C4577 +
             (C4730 - C4731 + C4732 - C4733) * C4582 +
             (C4734 - C4735 + C4736 - C4737) * C47389) *
                C47294 * C47174 +
            ((C4579 * C414 - C4575 * C424 + C4580 * C415 - C47358 * C425) *
                 C4581 +
             (C4579 * C427 - C4575 * C444 + C4580 * C428 - C47358 * C445) *
                 C4577 +
             (C5386 - C5387 + C5388 - C5389) * C4582 +
             (C5390 - C5391 + C5392 - C5393) * C47389) *
                C47294 * C47181 +
            ((C4575 * C430 - C4579 * C417 + C47358 * C431 - C4580 * C418) *
                 C4581 +
             (C4575 * C447 - C4579 * C433 + C47358 * C448 - C4580 * C434) *
                 C4577 +
             (C5816 - C5817 + C5818 - C5819) * C4582 +
             (C5820 - C5821 + C5822 - C5823) * C47389) *
                C47294 * C3602) *
               C2332 +
           (((C4731 - C4730 + C4733 - C4732) * C4581 +
             (C4735 - C4734 + C4737 - C4736) * C4577 +
             (C4738 - C4739 + C4740 - C4741) * C4582 +
             (C4742 - C4743 + C4744 - C4745) * C47389) *
                C47294 * C47174 +
            ((C5387 - C5386 + C5389 - C5388) * C4581 +
             (C5391 - C5390 + C5393 - C5392) * C4577 +
             (C5824 - C5825 + C5826 - C5827) * C4582 +
             (C5828 - C5829 + C5830 - C5831) * C47389) *
                C47294 * C47181 +
            ((C5817 - C5816 + C5819 - C5818) * C4581 +
             (C5821 - C5820 + C5823 - C5822) * C4577 +
             (C5832 - C5833 + C5834 - C5835) * C4582 +
             (C5836 - C5837 + C5838 - C5839) * C47389) *
                C47294 * C3602) *
               C47136) *
              C47325 +
          ((((C4579 * C118 - C4575 * C125 + C4580 * C119 - C47358 * C126) *
                 C4581 +
             (C4579 * C128 - C4575 * C139 + C4580 * C129 - C47358 * C140) *
                 C4577 +
             (C4746 - C4747 + C4748 - C4749) * C4582 +
             (C4750 - C4751 + C4752 - C4753) * C47389) *
                C47294 * C47174 +
            ((C4575 * C425 - C4579 * C415 + C47358 * C426 - C4580 * C416) *
                 C4581 +
             (C4575 * C445 - C4579 * C428 + C47358 * C446 - C4580 * C429) *
                 C4577 +
             (C5394 - C5395 + C5396 - C5397) * C4582 +
             (C5398 - C5399 + C5400 - C5401) * C47389) *
                C47294 * C47181 +
            ((C4579 * C418 - C4575 * C431 + C4580 * C419 - C47358 * C432) *
                 C4581 +
             (C4579 * C434 - C4575 * C448 + C4580 * C435 - C47358 * C449) *
                 C4577 +
             (C6902 - C6903 + C6904 - C6905) * C4582 +
             (C6906 - C6907 + C6908 - C6909) * C47389) *
                C47294 * C3602) *
               C2332 +
           (((C4747 - C4746 + C4749 - C4748) * C4581 +
             (C4751 - C4750 + C4753 - C4752) * C4577 +
             (C4754 - C4755 + C4756 - C4757) * C4582 +
             (C4758 - C4759 + C4760 - C4761) * C47389) *
                C47294 * C47174 +
            ((C5395 - C5394 + C5397 - C5396) * C4581 +
             (C5399 - C5398 + C5401 - C5400) * C4577 +
             (C6172 - C6173 + C6174 - C6175) * C4582 +
             (C6176 - C6177 + C6178 - C6179) * C47389) *
                C47294 * C47181 +
            ((C6903 - C6902 + C6905 - C6904) * C4581 +
             (C6907 - C6906 + C6909 - C6908) * C4577 +
             (C4575 * C1172 - C4579 * C1157 + C47358 * C1173 - C4580 * C1158) *
                 C4582 +
             (C4575 * C1184 - C4579 * C1175 + C47358 * C1185 - C4580 * C1176) *
                 C47389) *
                C47294 * C3602) *
               C47136) *
              C47056)) /
        (p * q * std::sqrt(p + q));
    d2ee[34] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C4575 * C124 - C4579 * C117 + C47358 * C125 - C4580 * C118) *
                 C4581 +
             (C4575 * C138 - C4579 * C127 + C47358 * C139 - C4580 * C128) *
                 C4577 +
             (C4730 - C4731 + C4732 - C4733) * C4582 +
             (C4734 - C4735 + C4736 - C4737) * C47389) *
                C47294 * C3094 +
            ((C4579 * C414 - C4575 * C424 + C4580 * C415 - C47358 * C425) *
                 C4581 +
             (C4579 * C427 - C4575 * C444 + C4580 * C428 - C47358 * C445) *
                 C4577 +
             (C5386 - C5387 + C5388 - C5389) * C4582 +
             (C5390 - C5391 + C5392 - C5393) * C47389) *
                C47294 * C47178) *
               C2332 +
           (((C4731 - C4730 + C4733 - C4732) * C4581 +
             (C4735 - C4734 + C4737 - C4736) * C4577 +
             (C4738 - C4739 + C4740 - C4741) * C4582 +
             (C4742 - C4743 + C4744 - C4745) * C47389) *
                C47294 * C3094 +
            ((C5387 - C5386 + C5389 - C5388) * C4581 +
             (C5391 - C5390 + C5393 - C5392) * C4577 +
             (C5824 - C5825 + C5826 - C5827) * C4582 +
             (C5828 - C5829 + C5830 - C5831) * C47389) *
                C47294 * C47178) *
               C47136) *
              C47407 +
          ((((C4579 * C118 - C4575 * C125 + C4580 * C119 - C47358 * C126) *
                 C4581 +
             (C4579 * C128 - C4575 * C139 + C4580 * C129 - C47358 * C140) *
                 C4577 +
             (C4746 - C4747 + C4748 - C4749) * C4582 +
             (C4750 - C4751 + C4752 - C4753) * C47389) *
                C47294 * C3094 +
            ((C4575 * C425 - C4579 * C415 + C47358 * C426 - C4580 * C416) *
                 C4581 +
             (C4575 * C445 - C4579 * C428 + C47358 * C446 - C4580 * C429) *
                 C4577 +
             (C5394 - C5395 + C5396 - C5397) * C4582 +
             (C5398 - C5399 + C5400 - C5401) * C47389) *
                C47294 * C47178) *
               C2332 +
           (((C4747 - C4746 + C4749 - C4748) * C4581 +
             (C4751 - C4750 + C4753 - C4752) * C4577 +
             (C4754 - C4755 + C4756 - C4757) * C4582 +
             (C4758 - C4759 + C4760 - C4761) * C47389) *
                C47294 * C3094 +
            ((C5395 - C5394 + C5397 - C5396) * C4581 +
             (C5399 - C5398 + C5401 - C5400) * C4577 +
             (C6172 - C6173 + C6174 - C6175) * C4582 +
             (C6176 - C6177 + C6178 - C6179) * C47389) *
                C47294 * C47178) *
               C47136) *
              C47394 +
          ((((C4575 * C126 - C4579 * C119 + C47358 * C130 - C4580 * C120) *
                 C4581 +
             (C4575 * C140 - C4579 * C129 + C47358 * C141 - C4580 * C131) *
                 C4577 +
             (C4762 - C4763 + C4764 - C4765) * C4582 +
             (C4766 - C4767 + C4768 - C4769) * C47389) *
                C47294 * C3094 +
            ((C4579 * C416 - C4575 * C426 + C4580 * C420 - C47358 * C436) *
                 C4581 +
             (C4579 * C429 - C4575 * C446 + C4580 * C437 - C47358 * C450) *
                 C4577 +
             (C5402 - C5403 + C5404 - C5405) * C4582 +
             (C5406 - C5407 + C5408 - C5409) * C47389) *
                C47294 * C47178) *
               C2332 +
           (((C4763 - C4762 + C4765 - C4764) * C4581 +
             (C4767 - C4766 + C4769 - C4768) * C4577 +
             (C4770 - C4771 + C4772 - C4773) * C4582 +
             (C4774 - C4775 + C4776 - C4777) * C47389) *
                C47294 * C3094 +
            ((C5403 - C5402 + C5405 - C5404) * C4581 +
             (C5407 - C5406 + C5409 - C5408) * C4577 +
             (C4575 * C1167 - C4579 * C1155 + C47358 * C1441 - C4580 * C1440) *
                 C4582 +
             (C4575 * C1182 - C4579 * C1170 + C47358 * C1443 - C4580 * C1442) *
                 C47389) *
                C47294 * C47178) *
               C47136) *
              C47365)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C4575 * C124 - C4579 * C117 + C47358 * C125 - C4580 * C118) *
                C4581 +
            (C4575 * C138 - C4579 * C127 + C47358 * C139 - C4580 * C128) *
                C4577 +
            (C4730 - C4731 + C4732 - C4733) * C4582 +
            (C4734 - C4735 + C4736 - C4737) * C47389) *
               C47294 * C3094 +
           ((C4579 * C414 - C4575 * C424 + C4580 * C415 - C47358 * C425) *
                C4581 +
            (C4579 * C427 - C4575 * C444 + C4580 * C428 - C47358 * C445) *
                C4577 +
            (C5386 - C5387 + C5388 - C5389) * C4582 +
            (C5390 - C5391 + C5392 - C5393) * C47389) *
               C47294 * C47178) *
              C47417 +
          (((C4731 - C4730 + C4733 - C4732) * C4581 +
            (C4735 - C4734 + C4737 - C4736) * C4577 +
            (C4738 - C4739 + C4740 - C4741) * C4582 +
            (C4742 - C4743 + C4744 - C4745) * C47389) *
               C47294 * C3094 +
           ((C5387 - C5386 + C5389 - C5388) * C4581 +
            (C5391 - C5390 + C5393 - C5392) * C4577 +
            (C5824 - C5825 + C5826 - C5827) * C4582 +
            (C5828 - C5829 + C5830 - C5831) * C47389) *
               C47294 * C47178) *
              C47413 +
          (((C4739 - C4738 + C4741 - C4740) * C4581 +
            (C4743 - C4742 + C4745 - C4744) * C4577 +
            (C5646 - C5647 + C5648 - C5649) * C4582 +
            (C5650 - C5651 + C5652 - C5653) * C47389) *
               C47294 * C3094 +
           ((C5825 - C5824 + C5827 - C5826) * C4581 +
            (C5829 - C5828 + C5831 - C5830) * C4577 +
            (C6318 - C6319 + C6320 - C6321) * C4582 +
            (C6322 - C6323 + C6324 - C6325) * C47389) *
               C47294 * C47178) *
              C47403 +
          (((C5647 - C5646 + C5649 - C5648) * C4581 +
            (C5651 - C5650 + C5653 - C5652) * C4577 +
            (C5654 - C5655 + C5656 - C5657) * C4582 +
            (C5658 - C5659 + C5660 - C5661) * C47389) *
               C47294 * C3094 +
           ((C6319 - C6318 + C6321 - C6320) * C4581 +
            (C6323 - C6322 + C6325 - C6324) * C4577 +
            (C4575 * C6311 - C4579 * C6309 + C47358 * C6312 - C4580 * C6310) *
                C4582 +
            (C4575 * C6315 - C4579 * C6313 + C47358 * C6316 - C4580 * C6314) *
                C47389) *
               C47294 * C47178) *
              C47381) *
         C47045) /
            (p * q * std::sqrt(p + q));
    d2ee[35] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4575 * C124 - C4579 * C117 + C47358 * C125 - C4580 * C118) *
                C4581 +
            (C4575 * C138 - C4579 * C127 + C47358 * C139 - C4580 * C128) *
                C4577 +
            (C4730 - C4731 + C4732 - C4733) * C4582 +
            (C4734 - C4735 + C4736 - C4737) * C47389) *
               C47294 * C47091 * C1284 +
           ((C4731 - C4730 + C4733 - C4732) * C4581 +
            (C4735 - C4734 + C4737 - C4736) * C4577 +
            (C4738 - C4739 + C4740 - C4741) * C4582 +
            (C4742 - C4743 + C4744 - C4745) * C47389) *
               C47294 * C47091 * C1285 +
           ((C4739 - C4738 + C4741 - C4740) * C4581 +
            (C4743 - C4742 + C4745 - C4744) * C4577 +
            (C5646 - C5647 + C5648 - C5649) * C4582 +
            (C5650 - C5651 + C5652 - C5653) * C47389) *
               C47294 * C47091 * C1286 +
           ((C5647 - C5646 + C5649 - C5648) * C4581 +
            (C5651 - C5650 + C5653 - C5652) * C4577 +
            (C5654 - C5655 + C5656 - C5657) * C4582 +
            (C5658 - C5659 + C5660 - C5661) * C47389) *
               C47294 * C47091 * C47381) *
              C47325 +
          (((C4579 * C118 - C4575 * C125 + C4580 * C119 - C47358 * C126) *
                C4581 +
            (C4579 * C128 - C4575 * C139 + C4580 * C129 - C47358 * C140) *
                C4577 +
            (C4746 - C4747 + C4748 - C4749) * C4582 +
            (C4750 - C4751 + C4752 - C4753) * C47389) *
               C47294 * C47091 * C1284 +
           ((C4747 - C4746 + C4749 - C4748) * C4581 +
            (C4751 - C4750 + C4753 - C4752) * C4577 +
            (C4754 - C4755 + C4756 - C4757) * C4582 +
            (C4758 - C4759 + C4760 - C4761) * C47389) *
               C47294 * C47091 * C1285 +
           ((C4755 - C4754 + C4757 - C4756) * C4581 +
            (C4759 - C4758 + C4761 - C4760) * C4577 +
            (C5970 - C5971 + C5972 - C5973) * C4582 +
            (C5974 - C5975 + C5976 - C5977) * C47389) *
               C47294 * C47091 * C1286 +
           ((C5971 - C5970 + C5973 - C5972) * C4581 +
            (C5975 - C5974 + C5977 - C5976) * C4577 +
            (C4575 * C1029 - C4579 * C1020 + C47358 * C1030 - C4580 * C1021) *
                C4582 +
            (C4575 * C1038 - C4579 * C1032 + C47358 * C1039 - C4580 * C1033) *
                C47389) *
               C47294 * C47091 * C47381) *
              C47056)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4575 * C124 - C4579 * C117 + C47358 * C125 - C4580 * C118) *
                C4581 +
            (C4575 * C138 - C4579 * C127 + C47358 * C139 - C4580 * C128) *
                C4577 +
            (C4730 - C4731 + C4732 - C4733) * C4582 +
            (C4734 - C4735 + C4736 - C4737) * C47389) *
               C47294 * C47091 * C47339 +
           ((C4731 - C4730 + C4733 - C4732) * C4581 +
            (C4735 - C4734 + C4737 - C4736) * C4577 +
            (C4738 - C4739 + C4740 - C4741) * C4582 +
            (C4742 - C4743 + C4744 - C4745) * C47389) *
               C47294 * C47091 * C47136) *
              C554 +
          (((C4579 * C118 - C4575 * C125 + C4580 * C119 - C47358 * C126) *
                C4581 +
            (C4579 * C128 - C4575 * C139 + C4580 * C129 - C47358 * C140) *
                C4577 +
            (C4746 - C4747 + C4748 - C4749) * C4582 +
            (C4750 - C4751 + C4752 - C4753) * C47389) *
               C47294 * C47091 * C47339 +
           ((C4747 - C4746 + C4749 - C4748) * C4581 +
            (C4751 - C4750 + C4753 - C4752) * C4577 +
            (C4754 - C4755 + C4756 - C4757) * C4582 +
            (C4758 - C4759 + C4760 - C4761) * C47389) *
               C47294 * C47091 * C47136) *
              C555 +
          (((C4575 * C126 - C4579 * C119 + C47358 * C130 - C4580 * C120) *
                C4581 +
            (C4575 * C140 - C4579 * C129 + C47358 * C141 - C4580 * C131) *
                C4577 +
            (C4762 - C4763 + C4764 - C4765) * C4582 +
            (C4766 - C4767 + C4768 - C4769) * C47389) *
               C47294 * C47091 * C47339 +
           ((C4763 - C4762 + C4765 - C4764) * C4581 +
            (C4767 - C4766 + C4769 - C4768) * C4577 +
            (C4770 - C4771 + C4772 - C4773) * C4582 +
            (C4774 - C4775 + C4776 - C4777) * C47389) *
               C47294 * C47091 * C47136) *
              C556 +
          (((C4579 * C120 - C4575 * C130 + C4580 * C121 - C47358 * C132) *
                C4581 +
            (C4579 * C131 - C4575 * C141 + C4580 * C133 - C47358 * C142) *
                C4577 +
            (C5054 - C5055 + C5056 - C5057) * C4582 +
            (C5058 - C5059 + C5060 - C5061) * C47389) *
               C47294 * C47091 * C47339 +
           ((C5055 - C5054 + C5057 - C5056) * C4581 +
            (C5059 - C5058 + C5061 - C5060) * C4577 +
            (C4575 * C285 - C4579 * C268 + C47358 * C289 - C4580 * C270) *
                C4582 +
            (C4575 * C298 - C4579 * C286 + C47358 * C300 - C4580 * C290) *
                C47389) *
               C47294 * C47091 * C47136) *
              C47375)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C4575 * C124 - C4579 * C117 + C47358 * C125 - C4580 * C118) *
                 C4581 +
             (C4575 * C138 - C4579 * C127 + C47358 * C139 - C4580 * C128) *
                 C4577 +
             (C4730 - C4731 + C4732 - C4733) * C4582 +
             (C4734 - C4735 + C4736 - C4737) * C47389) *
                C47294 * C1664 +
            ((C4579 * C414 - C4575 * C424 + C4580 * C415 - C47358 * C425) *
                 C4581 +
             (C4579 * C427 - C4575 * C444 + C4580 * C428 - C47358 * C445) *
                 C4577 +
             (C5386 - C5387 + C5388 - C5389) * C4582 +
             (C5390 - C5391 + C5392 - C5393) * C47389) *
                C47294 * C1665 +
            ((C4575 * C430 - C4579 * C417 + C47358 * C431 - C4580 * C418) *
                 C4581 +
             (C4575 * C447 - C4579 * C433 + C47358 * C448 - C4580 * C434) *
                 C4577 +
             (C5816 - C5817 + C5818 - C5819) * C4582 +
             (C5820 - C5821 + C5822 - C5823) * C47389) *
                C47294 * C47374) *
               C47339 +
           (((C4731 - C4730 + C4733 - C4732) * C4581 +
             (C4735 - C4734 + C4737 - C4736) * C4577 +
             (C4738 - C4739 + C4740 - C4741) * C4582 +
             (C4742 - C4743 + C4744 - C4745) * C47389) *
                C47294 * C1664 +
            ((C5387 - C5386 + C5389 - C5388) * C4581 +
             (C5391 - C5390 + C5393 - C5392) * C4577 +
             (C5824 - C5825 + C5826 - C5827) * C4582 +
             (C5828 - C5829 + C5830 - C5831) * C47389) *
                C47294 * C1665 +
            ((C5817 - C5816 + C5819 - C5818) * C4581 +
             (C5821 - C5820 + C5823 - C5822) * C4577 +
             (C5832 - C5833 + C5834 - C5835) * C4582 +
             (C5836 - C5837 + C5838 - C5839) * C47389) *
                C47294 * C47374) *
               C47136) *
              C47325 +
          ((((C4579 * C118 - C4575 * C125 + C4580 * C119 - C47358 * C126) *
                 C4581 +
             (C4579 * C128 - C4575 * C139 + C4580 * C129 - C47358 * C140) *
                 C4577 +
             (C4746 - C4747 + C4748 - C4749) * C4582 +
             (C4750 - C4751 + C4752 - C4753) * C47389) *
                C47294 * C1664 +
            ((C4575 * C425 - C4579 * C415 + C47358 * C426 - C4580 * C416) *
                 C4581 +
             (C4575 * C445 - C4579 * C428 + C47358 * C446 - C4580 * C429) *
                 C4577 +
             (C5394 - C5395 + C5396 - C5397) * C4582 +
             (C5398 - C5399 + C5400 - C5401) * C47389) *
                C47294 * C1665 +
            ((C4579 * C418 - C4575 * C431 + C4580 * C419 - C47358 * C432) *
                 C4581 +
             (C4579 * C434 - C4575 * C448 + C4580 * C435 - C47358 * C449) *
                 C4577 +
             (C6902 - C6903 + C6904 - C6905) * C4582 +
             (C6906 - C6907 + C6908 - C6909) * C47389) *
                C47294 * C47374) *
               C47339 +
           (((C4747 - C4746 + C4749 - C4748) * C4581 +
             (C4751 - C4750 + C4753 - C4752) * C4577 +
             (C4754 - C4755 + C4756 - C4757) * C4582 +
             (C4758 - C4759 + C4760 - C4761) * C47389) *
                C47294 * C1664 +
            ((C5395 - C5394 + C5397 - C5396) * C4581 +
             (C5399 - C5398 + C5401 - C5400) * C4577 +
             (C6172 - C6173 + C6174 - C6175) * C4582 +
             (C6176 - C6177 + C6178 - C6179) * C47389) *
                C47294 * C1665 +
            ((C6903 - C6902 + C6905 - C6904) * C4581 +
             (C6907 - C6906 + C6909 - C6908) * C4577 +
             (C4575 * C1172 - C4579 * C1157 + C47358 * C1173 - C4580 * C1158) *
                 C4582 +
             (C4575 * C1184 - C4579 * C1175 + C47358 * C1185 - C4580 * C1176) *
                 C47389) *
                C47294 * C47374) *
               C47136) *
              C47056)) /
            (p * q * std::sqrt(p + q));
    d2ee[36] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4575 * C124 - C4579 * C117 + C47358 * C125 - C4580 * C118) *
                C4581 +
            (C4575 * C138 - C4579 * C127 + C47358 * C139 - C4580 * C128) *
                C4577 +
            (C4730 - C4731 + C4732 - C4733) * C4582 +
            (C4734 - C4735 + C4736 - C4737) * C47389) *
               C47294 * C47340 +
           ((C4579 * C414 - C4575 * C424 + C4580 * C415 - C47358 * C425) *
                C4581 +
            (C4579 * C427 - C4575 * C444 + C4580 * C428 - C47358 * C445) *
                C4577 +
            (C5386 - C5387 + C5388 - C5389) * C4582 +
            (C5390 - C5391 + C5392 - C5393) * C47389) *
               C47294 * C47178) *
              C1284 +
          (((C4731 - C4730 + C4733 - C4732) * C4581 +
            (C4735 - C4734 + C4737 - C4736) * C4577 +
            (C4738 - C4739 + C4740 - C4741) * C4582 +
            (C4742 - C4743 + C4744 - C4745) * C47389) *
               C47294 * C47340 +
           ((C5387 - C5386 + C5389 - C5388) * C4581 +
            (C5391 - C5390 + C5393 - C5392) * C4577 +
            (C5824 - C5825 + C5826 - C5827) * C4582 +
            (C5828 - C5829 + C5830 - C5831) * C47389) *
               C47294 * C47178) *
              C1285 +
          (((C4739 - C4738 + C4741 - C4740) * C4581 +
            (C4743 - C4742 + C4745 - C4744) * C4577 +
            (C5646 - C5647 + C5648 - C5649) * C4582 +
            (C5650 - C5651 + C5652 - C5653) * C47389) *
               C47294 * C47340 +
           ((C5825 - C5824 + C5827 - C5826) * C4581 +
            (C5829 - C5828 + C5831 - C5830) * C4577 +
            (C6318 - C6319 + C6320 - C6321) * C4582 +
            (C6322 - C6323 + C6324 - C6325) * C47389) *
               C47294 * C47178) *
              C1286 +
          (((C5647 - C5646 + C5649 - C5648) * C4581 +
            (C5651 - C5650 + C5653 - C5652) * C4577 +
            (C5654 - C5655 + C5656 - C5657) * C4582 +
            (C5658 - C5659 + C5660 - C5661) * C47389) *
               C47294 * C47340 +
           ((C6319 - C6318 + C6321 - C6320) * C4581 +
            (C6323 - C6322 + C6325 - C6324) * C4577 +
            (C4575 * C6311 - C4579 * C6309 + C47358 * C6312 - C4580 * C6310) *
                C4582 +
            (C4575 * C6315 - C4579 * C6313 + C47358 * C6316 - C4580 * C6314) *
                C47389) *
               C47294 * C47178) *
              C47381) *
         C47045) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C4575 * C124 - C4579 * C117 + C47358 * C125 - C4580 * C118) *
                 C4581 +
             (C4575 * C138 - C4579 * C127 + C47358 * C139 - C4580 * C128) *
                 C4577 +
             (C4730 - C4731 + C4732 - C4733) * C4582 +
             (C4734 - C4735 + C4736 - C4737) * C47389) *
                C47294 * C47340 +
            ((C4579 * C414 - C4575 * C424 + C4580 * C415 - C47358 * C425) *
                 C4581 +
             (C4579 * C427 - C4575 * C444 + C4580 * C428 - C47358 * C445) *
                 C4577 +
             (C5386 - C5387 + C5388 - C5389) * C4582 +
             (C5390 - C5391 + C5392 - C5393) * C47389) *
                C47294 * C47178) *
               C47339 +
           (((C4731 - C4730 + C4733 - C4732) * C4581 +
             (C4735 - C4734 + C4737 - C4736) * C4577 +
             (C4738 - C4739 + C4740 - C4741) * C4582 +
             (C4742 - C4743 + C4744 - C4745) * C47389) *
                C47294 * C47340 +
            ((C5387 - C5386 + C5389 - C5388) * C4581 +
             (C5391 - C5390 + C5393 - C5392) * C4577 +
             (C4575 * C1165 - C4579 * C1153 + C47358 * C1166 - C4580 * C1154) *
                 C4582 +
             (C4575 * C1180 - C4579 * C1168 + C47358 * C1181 - C4580 * C1169) *
                 C47389) *
                C47294 * C47178) *
               C47136) *
              C258 +
          ((((C4579 * C118 - C4575 * C125 + C4580 * C119 - C47358 * C126) *
                 C4581 +
             (C4579 * C128 - C4575 * C139 + C4580 * C129 - C47358 * C140) *
                 C4577 +
             (C4746 - C4747 + C4748 - C4749) * C4582 +
             (C4750 - C4751 + C4752 - C4753) * C47389) *
                C47294 * C47340 +
            ((C4575 * C425 - C4579 * C415 + C47358 * C426 - C4580 * C416) *
                 C4581 +
             (C4575 * C445 - C4579 * C428 + C47358 * C446 - C4580 * C429) *
                 C4577 +
             (C5394 - C5395 + C5396 - C5397) * C4582 +
             (C5398 - C5399 + C5400 - C5401) * C47389) *
                C47294 * C47178) *
               C47339 +
           (((C4747 - C4746 + C4749 - C4748) * C4581 +
             (C4751 - C4750 + C4753 - C4752) * C4577 +
             (C4754 - C4755 + C4756 - C4757) * C4582 +
             (C4758 - C4759 + C4760 - C4761) * C47389) *
                C47294 * C47340 +
            ((C5395 - C5394 + C5397 - C5396) * C4581 +
             (C5399 - C5398 + C5401 - C5400) * C4577 +
             (C4579 * C1154 - C4575 * C1166 + C4580 * C1155 - C47358 * C1167) *
                 C4582 +
             (C4579 * C1169 - C4575 * C1181 + C4580 * C1170 - C47358 * C1182) *
                 C47389) *
                C47294 * C47178) *
               C47136) *
              C259 +
          ((((C4575 * C126 - C4579 * C119 + C47358 * C130 - C4580 * C120) *
                 C4581 +
             (C4575 * C140 - C4579 * C129 + C47358 * C141 - C4580 * C131) *
                 C4577 +
             (C4762 - C4763 + C4764 - C4765) * C4582 +
             (C4766 - C4767 + C4768 - C4769) * C47389) *
                C47294 * C47340 +
            ((C4579 * C416 - C4575 * C426 + C4580 * C420 - C47358 * C436) *
                 C4581 +
             (C4579 * C429 - C4575 * C446 + C4580 * C437 - C47358 * C450) *
                 C4577 +
             (C5402 - C5403 + C5404 - C5405) * C4582 +
             (C5406 - C5407 + C5408 - C5409) * C47389) *
                C47294 * C47178) *
               C47339 +
           (((C4763 - C4762 + C4765 - C4764) * C4581 +
             (C4767 - C4766 + C4769 - C4768) * C4577 +
             (C4770 - C4771 + C4772 - C4773) * C4582 +
             (C4774 - C4775 + C4776 - C4777) * C47389) *
                C47294 * C47340 +
            ((C5403 - C5402 + C5405 - C5404) * C4581 +
             (C5407 - C5406 + C5409 - C5408) * C4577 +
             (C4575 * C1167 - C4579 * C1155 + C47358 * C1441 - C4580 * C1440) *
                 C4582 +
             (C4575 * C1182 - C4579 * C1170 + C47358 * C1443 - C4580 * C1442) *
                 C47389) *
                C47294 * C47178) *
               C47136) *
              C47365)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C4575 * C124 - C4579 * C117 + C47358 * C125 - C4580 * C118) *
                C4581 +
            (C4575 * C138 - C4579 * C127 + C47358 * C139 - C4580 * C128) *
                C4577 +
            (C4730 - C4731 + C4732 - C4733) * C4582 +
            (C4734 - C4735 + C4736 - C4737) * C47389) *
               C47294 * C2116 +
           ((C4579 * C414 - C4575 * C424 + C4580 * C415 - C47358 * C425) *
                C4581 +
            (C4579 * C427 - C4575 * C444 + C4580 * C428 - C47358 * C445) *
                C4577 +
            (C5386 - C5387 + C5388 - C5389) * C4582 +
            (C5390 - C5391 + C5392 - C5393) * C47389) *
               C47294 * C2117 +
           ((C4575 * C430 - C4579 * C417 + C47358 * C431 - C4580 * C418) *
                C4581 +
            (C4575 * C447 - C4579 * C433 + C47358 * C448 - C4580 * C434) *
                C4577 +
            (C5816 - C5817 + C5818 - C5819) * C4582 +
            (C5820 - C5821 + C5822 - C5823) * C47389) *
               C47294 * C2118 +
           ((C4579 * C1844 - C4575 * C1850 + C4580 * C1845 - C47358 * C1851) *
                C4581 +
            (C4579 * C1853 - C4575 * C1862 + C4580 * C1854 - C47358 * C1863) *
                C4577 +
            (C7178 - C7179 + C7180 - C7181) * C4582 +
            (C7182 - C7183 + C7184 - C7185) * C47389) *
               C47294 * C47387) *
              C47339 +
          (((C4731 - C4730 + C4733 - C4732) * C4581 +
            (C4735 - C4734 + C4737 - C4736) * C4577 +
            (C4738 - C4739 + C4740 - C4741) * C4582 +
            (C4742 - C4743 + C4744 - C4745) * C47389) *
               C47294 * C2116 +
           ((C5387 - C5386 + C5389 - C5388) * C4581 +
            (C5391 - C5390 + C5393 - C5392) * C4577 +
            (C5824 - C5825 + C5826 - C5827) * C4582 +
            (C5828 - C5829 + C5830 - C5831) * C47389) *
               C47294 * C2117 +
           ((C5817 - C5816 + C5819 - C5818) * C4581 +
            (C5821 - C5820 + C5823 - C5822) * C4577 +
            (C5832 - C5833 + C5834 - C5835) * C4582 +
            (C5836 - C5837 + C5838 - C5839) * C47389) *
               C47294 * C2118 +
           ((C7179 - C7178 + C7181 - C7180) * C4581 +
            (C7183 - C7182 + C7185 - C7184) * C4577 +
            (C4575 * C7171 - C4579 * C7169 + C47358 * C7172 - C4580 * C7170) *
                C4582 +
            (C4575 * C7175 - C4579 * C7173 + C47358 * C7176 - C4580 * C7174) *
                C47389) *
               C47294 * C47387) *
              C47136) *
         C47045) /
            (p * q * std::sqrt(p + q));
    d2ee[37] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((C4575 * C124 - C4579 * C117 + C47358 * C125 - C4580 * C118) *
                   C4581 +
               (C4575 * C138 - C4579 * C127 + C47358 * C139 - C4580 * C128) *
                   C4577 +
               (C4575 * C271 - C4579 * C261 + C47358 * C272 - C4580 * C262) *
                   C4582 +
               (C4575 * C291 - C4579 * C274 + C47358 * C292 - C4580 * C275) *
                   C47389) *
                  C47294 * C47091 * C47073 * C108 +
              ((C4579 * C118 - C4575 * C125 + C4580 * C119 - C47358 * C126) *
                   C4581 +
               (C4579 * C128 - C4575 * C139 + C4580 * C129 - C47358 * C140) *
                   C4577 +
               (C4579 * C262 - C4575 * C272 + C4580 * C263 - C47358 * C273) *
                   C4582 +
               (C4579 * C275 - C4575 * C292 + C4580 * C276 - C47358 * C293) *
                   C47389) *
                  C47294 * C47091 * C47073 * C109 +
              ((C4575 * C126 - C4579 * C119 + C47358 * C130 - C4580 * C120) *
                   C4581 +
               (C4575 * C140 - C4579 * C129 + C47358 * C141 - C4580 * C131) *
                   C4577 +
               (C4575 * C273 - C4579 * C263 + C47358 * C283 - C4580 * C267) *
                   C4582 +
               (C4575 * C293 - C4579 * C276 + C47358 * C297 - C4580 * C284) *
                   C47389) *
                  C47294 * C47091 * C47073 * C110 +
              ((C4579 * C120 - C4575 * C130 + C4580 * C121 - C47358 * C132) *
                   C4581 +
               (C4579 * C131 - C4575 * C141 + C4580 * C133 - C47358 * C142) *
                   C4577 +
               (C4579 * C267 - C4575 * C283 + C4580 * C269 - C47358 * C287) *
                   C4582 +
               (C4579 * C284 - C4575 * C297 + C4580 * C288 - C47358 * C299) *
                   C47389) *
                  C47294 * C47091 * C47073 * C111 +
              ((C4575 * C132 - C4579 * C121 + C47358 * C134 - C4580 * C122) *
                   C4581 +
               (C4575 * C142 - C4579 * C133 + C47358 * C143 - C4580 * C135) *
                   C4577 +
               (C4575 * C287 - C4579 * C269 + C47358 * C559 - C4580 * C558) *
                   C4582 +
               (C4575 * C299 - C4579 * C288 + C47358 * C561 - C4580 * C560) *
                   C47389) *
                  C47294 * C47091 * C47073 * C112) +
         0.5 * std::pow(Pi, 2.5) *
             ((((C4575 * C124 - C4579 * C117 + C47358 * C125 - C4580 * C118) *
                    C4581 +
                (C4575 * C138 - C4579 * C127 + C47358 * C139 - C4580 * C128) *
                    C4577 +
                (C4730 - C4731 + C4732 - C4733) * C4582 +
                (C4734 - C4735 + C4736 - C4737) * C47389) *
                   C47294 * C47091 * C47410 +
               ((C4731 - C4730 + C4733 - C4732) * C4581 +
                (C4735 - C4734 + C4737 - C4736) * C4577 +
                (C4738 - C4739 + C4740 - C4741) * C4582 +
                (C4742 - C4743 + C4744 - C4745) * C47389) *
                   C47294 * C47091 * C47398 +
               ((C4739 - C4738 + C4741 - C4740) * C4581 +
                (C4743 - C4742 + C4745 - C4744) * C4577 +
                (C4575 * C1022 - C4579 * C1016 + C47358 * C1023 -
                 C4580 * C1017) *
                    C4582 +
                (C4575 * C1034 - C4579 * C1025 + C47358 * C1035 -
                 C4580 * C1026) *
                    C47389) *
                   C47294 * C47091 * C47371) *
                  C258 +
              (((C4579 * C118 - C4575 * C125 + C4580 * C119 - C47358 * C126) *
                    C4581 +
                (C4579 * C128 - C4575 * C139 + C4580 * C129 - C47358 * C140) *
                    C4577 +
                (C4746 - C4747 + C4748 - C4749) * C4582 +
                (C4750 - C4751 + C4752 - C4753) * C47389) *
                   C47294 * C47091 * C47410 +
               ((C4747 - C4746 + C4749 - C4748) * C4581 +
                (C4751 - C4750 + C4753 - C4752) * C4577 +
                (C4754 - C4755 + C4756 - C4757) * C4582 +
                (C4758 - C4759 + C4760 - C4761) * C47389) *
                   C47294 * C47091 * C47398 +
               ((C4755 - C4754 + C4757 - C4756) * C4581 +
                (C4759 - C4758 + C4761 - C4760) * C4577 +
                (C4579 * C1017 - C4575 * C1023 + C4580 * C1018 -
                 C47358 * C1024) *
                    C4582 +
                (C4579 * C1026 - C4575 * C1035 + C4580 * C1027 -
                 C47358 * C1036) *
                    C47389) *
                   C47294 * C47091 * C47371) *
                  C259 +
              (((C4575 * C126 - C4579 * C119 + C47358 * C130 - C4580 * C120) *
                    C4581 +
                (C4575 * C140 - C4579 * C129 + C47358 * C141 - C4580 * C131) *
                    C4577 +
                (C4762 - C4763 + C4764 - C4765) * C4582 +
                (C4766 - C4767 + C4768 - C4769) * C47389) *
                   C47294 * C47091 * C47410 +
               ((C4763 - C4762 + C4765 - C4764) * C4581 +
                (C4767 - C4766 + C4769 - C4768) * C4577 +
                (C4770 - C4771 + C4772 - C4773) * C4582 +
                (C4774 - C4775 + C4776 - C4777) * C47389) *
                   C47294 * C47091 * C47398 +
               ((C4771 - C4770 + C4773 - C4772) * C4581 +
                (C4775 - C4774 + C4777 - C4776) * C4577 +
                (C4575 * C1024 - C4579 * C1018 + C47358 * C1291 -
                 C4580 * C1290) *
                    C4582 +
                (C4575 * C1036 - C4579 * C1027 + C47358 * C1293 -
                 C4580 * C1292) *
                    C47389) *
                   C47294 * C47091 * C47371) *
                  C47365)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C4575 * C124 - C4579 * C117 + C47358 * C125 - C4580 * C118) *
                C4581 +
            (C4575 * C138 - C4579 * C127 + C47358 * C139 - C4580 * C128) *
                C4577 +
            (C4730 - C4731 + C4732 - C4733) * C4582 +
            (C4734 - C4735 + C4736 - C4737) * C47389) *
               C47294 * C47411 +
           ((C4579 * C414 - C4575 * C424 + C4580 * C415 - C47358 * C425) *
                C4581 +
            (C4579 * C427 - C4575 * C444 + C4580 * C428 - C47358 * C445) *
                C4577 +
            (C4579 * C812 - C4575 * C817 + C4580 * C813 - C47358 * C818) *
                C4582 +
            (C4579 * C820 - C4575 * C827 + C4580 * C821 - C47358 * C828) *
                C47389) *
               C47294 * C47400 +
           ((C4575 * C430 - C4579 * C417 + C47358 * C431 - C4580 * C418) *
                C4581 +
            (C4575 * C447 - C4579 * C433 + C47358 * C448 - C4580 * C434) *
                C4577 +
            (C4575 * C1159 - C4579 * C1150 + C47358 * C1160 - C4580 * C1151) *
                C4582 +
            (C4575 * C1177 - C4579 * C1162 + C47358 * C1178 - C4580 * C1163) *
                C47389) *
               C47294 * C47374) *
              C47073 * C258 +
          (((C4579 * C118 - C4575 * C125 + C4580 * C119 - C47358 * C126) *
                C4581 +
            (C4579 * C128 - C4575 * C139 + C4580 * C129 - C47358 * C140) *
                C4577 +
            (C4746 - C4747 + C4748 - C4749) * C4582 +
            (C4750 - C4751 + C4752 - C4753) * C47389) *
               C47294 * C47411 +
           ((C4575 * C425 - C4579 * C415 + C47358 * C426 - C4580 * C416) *
                C4581 +
            (C4575 * C445 - C4579 * C428 + C47358 * C446 - C4580 * C429) *
                C4577 +
            (C4575 * C818 - C4579 * C813 + C47358 * C819 - C4580 * C814) *
                C4582 +
            (C4575 * C828 - C4579 * C821 + C47358 * C829 - C4580 * C822) *
                C47389) *
               C47294 * C47400 +
           ((C4579 * C418 - C4575 * C431 + C4580 * C419 - C47358 * C432) *
                C4581 +
            (C4579 * C434 - C4575 * C448 + C4580 * C435 - C47358 * C449) *
                C4577 +
            (C4579 * C1151 - C4575 * C1160 + C4580 * C1152 - C47358 * C1161) *
                C4582 +
            (C4579 * C1163 - C4575 * C1178 + C4580 * C1164 - C47358 * C1179) *
                C47389) *
               C47294 * C47374) *
              C47073 * C259 +
          (((C4575 * C126 - C4579 * C119 + C47358 * C130 - C4580 * C120) *
                C4581 +
            (C4575 * C140 - C4579 * C129 + C47358 * C141 - C4580 * C131) *
                C4577 +
            (C4762 - C4763 + C4764 - C4765) * C4582 +
            (C4766 - C4767 + C4768 - C4769) * C47389) *
               C47294 * C47411 +
           ((C4579 * C416 - C4575 * C426 + C4580 * C420 - C47358 * C436) *
                C4581 +
            (C4579 * C429 - C4575 * C446 + C4580 * C437 - C47358 * C450) *
                C4577 +
            (C4579 * C814 - C4575 * C819 + C4580 * C815 - C47358 * C823) *
                C4582 +
            (C4579 * C822 - C4575 * C829 + C4580 * C824 - C47358 * C830) *
                C47389) *
               C47294 * C47400 +
           ((C4575 * C432 - C4579 * C419 + C47358 * C438 - C4580 * C421) *
                C4581 +
            (C4575 * C449 - C4579 * C435 + C47358 * C451 - C4580 * C439) *
                C4577 +
            (C4575 * C1161 - C4579 * C1152 + C47358 * C2015 - C4580 * C2014) *
                C4582 +
            (C4575 * C1179 - C4579 * C1164 + C47358 * C2017 - C4580 * C2016) *
                C47389) *
               C47294 * C47374) *
              C47073 * C47365)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C4575 * C124 - C4579 * C117 + C47358 * C125 - C4580 * C118) *
                C4581 +
            (C4575 * C138 - C4579 * C127 + C47358 * C139 - C4580 * C128) *
                C4577 +
            (C4730 - C4731 + C4732 - C4733) * C4582 +
            (C4734 - C4735 + C4736 - C4737) * C47389) *
               C47294 * C47091 * C942 +
           ((C4731 - C4730 + C4733 - C4732) * C4581 +
            (C4735 - C4734 + C4737 - C4736) * C4577 +
            (C4738 - C4739 + C4740 - C4741) * C4582 +
            (C4742 - C4743 + C4744 - C4745) * C47389) *
               C47294 * C47091 * C943 +
           ((C4739 - C4738 + C4741 - C4740) * C4581 +
            (C4743 - C4742 + C4745 - C4744) * C4577 +
            (C4575 * C1022 - C4579 * C1016 + C47358 * C1023 - C4580 * C1017) *
                C4582 +
            (C4575 * C1034 - C4579 * C1025 + C47358 * C1035 - C4580 * C1026) *
                C47389) *
               C47294 * C47091 * C47371) *
              C47407 +
          (((C4579 * C118 - C4575 * C125 + C4580 * C119 - C47358 * C126) *
                C4581 +
            (C4579 * C128 - C4575 * C139 + C4580 * C129 - C47358 * C140) *
                C4577 +
            (C4746 - C4747 + C4748 - C4749) * C4582 +
            (C4750 - C4751 + C4752 - C4753) * C47389) *
               C47294 * C47091 * C942 +
           ((C4747 - C4746 + C4749 - C4748) * C4581 +
            (C4751 - C4750 + C4753 - C4752) * C4577 +
            (C4754 - C4755 + C4756 - C4757) * C4582 +
            (C4758 - C4759 + C4760 - C4761) * C47389) *
               C47294 * C47091 * C943 +
           ((C4755 - C4754 + C4757 - C4756) * C4581 +
            (C4759 - C4758 + C4761 - C4760) * C4577 +
            (C4579 * C1017 - C4575 * C1023 + C4580 * C1018 - C47358 * C1024) *
                C4582 +
            (C4579 * C1026 - C4575 * C1035 + C4580 * C1027 - C47358 * C1036) *
                C47389) *
               C47294 * C47091 * C47371) *
              C47394 +
          (((C4575 * C126 - C4579 * C119 + C47358 * C130 - C4580 * C120) *
                C4581 +
            (C4575 * C140 - C4579 * C129 + C47358 * C141 - C4580 * C131) *
                C4577 +
            (C4762 - C4763 + C4764 - C4765) * C4582 +
            (C4766 - C4767 + C4768 - C4769) * C47389) *
               C47294 * C47091 * C942 +
           ((C4763 - C4762 + C4765 - C4764) * C4581 +
            (C4767 - C4766 + C4769 - C4768) * C4577 +
            (C4770 - C4771 + C4772 - C4773) * C4582 +
            (C4774 - C4775 + C4776 - C4777) * C47389) *
               C47294 * C47091 * C943 +
           ((C4771 - C4770 + C4773 - C4772) * C4581 +
            (C4775 - C4774 + C4777 - C4776) * C4577 +
            (C4575 * C1024 - C4579 * C1018 + C47358 * C1291 - C4580 * C1290) *
                C4582 +
            (C4575 * C1036 - C4579 * C1027 + C47358 * C1293 - C4580 * C1292) *
                C47389) *
               C47294 * C47091 * C47371) *
              C47365)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C4575 * C124 - C4579 * C117 + C47358 * C125 - C4580 * C118) *
               C4581 +
           (C4575 * C138 - C4579 * C127 + C47358 * C139 - C4580 * C128) *
               C4577 +
           (C4730 - C4731 + C4732 - C4733) * C4582 +
           (C4734 - C4735 + C4736 - C4737) * C47389) *
              C47294 * C47091 * C1010 +
          ((C4731 - C4730 + C4733 - C4732) * C4581 +
           (C4735 - C4734 + C4737 - C4736) * C4577 +
           (C4738 - C4739 + C4740 - C4741) * C4582 +
           (C4742 - C4743 + C4744 - C4745) * C47389) *
              C47294 * C47091 * C1011 +
          ((C4739 - C4738 + C4741 - C4740) * C4581 +
           (C4743 - C4742 + C4745 - C4744) * C4577 +
           (C5646 - C5647 + C5648 - C5649) * C4582 +
           (C5650 - C5651 + C5652 - C5653) * C47389) *
              C47294 * C47091 * C1012 +
          ((C5647 - C5646 + C5649 - C5648) * C4581 +
           (C5651 - C5650 + C5653 - C5652) * C4577 +
           (C5654 - C5655 + C5656 - C5657) * C4582 +
           (C5658 - C5659 + C5660 - C5661) * C47389) *
              C47294 * C47091 * C1013 +
          ((C5655 - C5654 + C5657 - C5656) * C4581 +
           (C5659 - C5658 + C5661 - C5660) * C4577 +
           (C4575 * C5639 - C4579 * C5637 + C47358 * C5640 - C4580 * C5638) *
               C4582 +
           (C4575 * C5643 - C4579 * C5641 + C47358 * C5644 - C4580 * C5642) *
               C47389) *
              C47294 * C47091 * C1014) *
         C47045) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C4575 * C124 - C4579 * C117 + C47358 * C125 - C4580 * C118) *
                C4581 +
            (C4575 * C138 - C4579 * C127 + C47358 * C139 - C4580 * C128) *
                C4577 +
            (C4730 - C4731 + C4732 - C4733) * C4582 +
            (C4734 - C4735 + C4736 - C4737) * C47389) *
               C47294 * C47411 +
           ((C4579 * C414 - C4575 * C424 + C4580 * C415 - C47358 * C425) *
                C4581 +
            (C4579 * C427 - C4575 * C444 + C4580 * C428 - C47358 * C445) *
                C4577 +
            (C5386 - C5387 + C5388 - C5389) * C4582 +
            (C5390 - C5391 + C5392 - C5393) * C47389) *
               C47294 * C47400 +
           ((C4575 * C430 - C4579 * C417 + C47358 * C431 - C4580 * C418) *
                C4581 +
            (C4575 * C447 - C4579 * C433 + C47358 * C448 - C4580 * C434) *
                C4577 +
            (C5816 - C5817 + C5818 - C5819) * C4582 +
            (C5820 - C5821 + C5822 - C5823) * C47389) *
               C47294 * C47374) *
              C942 +
          (((C4731 - C4730 + C4733 - C4732) * C4581 +
            (C4735 - C4734 + C4737 - C4736) * C4577 +
            (C4738 - C4739 + C4740 - C4741) * C4582 +
            (C4742 - C4743 + C4744 - C4745) * C47389) *
               C47294 * C47411 +
           ((C5387 - C5386 + C5389 - C5388) * C4581 +
            (C5391 - C5390 + C5393 - C5392) * C4577 +
            (C5824 - C5825 + C5826 - C5827) * C4582 +
            (C5828 - C5829 + C5830 - C5831) * C47389) *
               C47294 * C47400 +
           ((C5817 - C5816 + C5819 - C5818) * C4581 +
            (C5821 - C5820 + C5823 - C5822) * C4577 +
            (C5832 - C5833 + C5834 - C5835) * C4582 +
            (C5836 - C5837 + C5838 - C5839) * C47389) *
               C47294 * C47374) *
              C943 +
          (((C4739 - C4738 + C4741 - C4740) * C4581 +
            (C4743 - C4742 + C4745 - C4744) * C4577 +
            (C5646 - C5647 + C5648 - C5649) * C4582 +
            (C5650 - C5651 + C5652 - C5653) * C47389) *
               C47294 * C47411 +
           ((C5825 - C5824 + C5827 - C5826) * C4581 +
            (C5829 - C5828 + C5831 - C5830) * C4577 +
            (C4579 * C1542 - C4575 * C1545 + C4580 * C1543 - C47358 * C1546) *
                C4582 +
            (C4579 * C1548 - C4575 * C1551 + C4580 * C1549 - C47358 * C1552) *
                C47389) *
               C47294 * C47400 +
           ((C5833 - C5832 + C5835 - C5834) * C4581 +
            (C5837 - C5836 + C5839 - C5838) * C4577 +
            (C4575 * C5809 - C4579 * C5807 + C47358 * C5810 - C4580 * C5808) *
                C4582 +
            (C4575 * C5813 - C4579 * C5811 + C47358 * C5814 - C4580 * C5812) *
                C47389) *
               C47294 * C47374) *
              C47371) *
         C47045) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C4575 * C124 - C4579 * C117 + C47358 * C125 - C4580 * C118) *
                C4581 +
            (C4575 * C138 - C4579 * C127 + C47358 * C139 - C4580 * C128) *
                C4577 +
            (C4730 - C4731 + C4732 - C4733) * C4582 +
            (C4734 - C4735 + C4736 - C4737) * C47389) *
               C47294 * C1664 +
           ((C4579 * C414 - C4575 * C424 + C4580 * C415 - C47358 * C425) *
                C4581 +
            (C4579 * C427 - C4575 * C444 + C4580 * C428 - C47358 * C445) *
                C4577 +
            (C5386 - C5387 + C5388 - C5389) * C4582 +
            (C5390 - C5391 + C5392 - C5393) * C47389) *
               C47294 * C1665 +
           ((C4575 * C430 - C4579 * C417 + C47358 * C431 - C4580 * C418) *
                C4581 +
            (C4575 * C447 - C4579 * C433 + C47358 * C448 - C4580 * C434) *
                C4577 +
            (C5816 - C5817 + C5818 - C5819) * C4582 +
            (C5820 - C5821 + C5822 - C5823) * C47389) *
               C47294 * C47374) *
              C47073 * C47407 +
          (((C4579 * C118 - C4575 * C125 + C4580 * C119 - C47358 * C126) *
                C4581 +
            (C4579 * C128 - C4575 * C139 + C4580 * C129 - C47358 * C140) *
                C4577 +
            (C4746 - C4747 + C4748 - C4749) * C4582 +
            (C4750 - C4751 + C4752 - C4753) * C47389) *
               C47294 * C1664 +
           ((C4575 * C425 - C4579 * C415 + C47358 * C426 - C4580 * C416) *
                C4581 +
            (C4575 * C445 - C4579 * C428 + C47358 * C446 - C4580 * C429) *
                C4577 +
            (C5394 - C5395 + C5396 - C5397) * C4582 +
            (C5398 - C5399 + C5400 - C5401) * C47389) *
               C47294 * C1665 +
           ((C4579 * C418 - C4575 * C431 + C4580 * C419 - C47358 * C432) *
                C4581 +
            (C4579 * C434 - C4575 * C448 + C4580 * C435 - C47358 * C449) *
                C4577 +
            (C4579 * C1151 - C4575 * C1160 + C4580 * C1152 - C47358 * C1161) *
                C4582 +
            (C4579 * C1163 - C4575 * C1178 + C4580 * C1164 - C47358 * C1179) *
                C47389) *
               C47294 * C47374) *
              C47073 * C47394 +
          (((C4575 * C126 - C4579 * C119 + C47358 * C130 - C4580 * C120) *
                C4581 +
            (C4575 * C140 - C4579 * C129 + C47358 * C141 - C4580 * C131) *
                C4577 +
            (C4762 - C4763 + C4764 - C4765) * C4582 +
            (C4766 - C4767 + C4768 - C4769) * C47389) *
               C47294 * C1664 +
           ((C4579 * C416 - C4575 * C426 + C4580 * C420 - C47358 * C436) *
                C4581 +
            (C4579 * C429 - C4575 * C446 + C4580 * C437 - C47358 * C450) *
                C4577 +
            (C5402 - C5403 + C5404 - C5405) * C4582 +
            (C5406 - C5407 + C5408 - C5409) * C47389) *
               C47294 * C1665 +
           ((C4575 * C432 - C4579 * C419 + C47358 * C438 - C4580 * C421) *
                C4581 +
            (C4575 * C449 - C4579 * C435 + C47358 * C451 - C4580 * C439) *
                C4577 +
            (C4575 * C1161 - C4579 * C1152 + C47358 * C2015 - C4580 * C2014) *
                C4582 +
            (C4575 * C1179 - C4579 * C1164 + C47358 * C2017 - C4580 * C2016) *
                C47389) *
               C47294 * C47374) *
              C47073 * C47365)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C4575 * C124 - C4579 * C117 + C47358 * C125 - C4580 * C118) *
                C4581 +
            (C4575 * C138 - C4579 * C127 + C47358 * C139 - C4580 * C128) *
                C4577 +
            (C4730 - C4731 + C4732 - C4733) * C4582 +
            (C4734 - C4735 + C4736 - C4737) * C47389) *
               C47294 * C1664 +
           ((C4579 * C414 - C4575 * C424 + C4580 * C415 - C47358 * C425) *
                C4581 +
            (C4579 * C427 - C4575 * C444 + C4580 * C428 - C47358 * C445) *
                C4577 +
            (C5386 - C5387 + C5388 - C5389) * C4582 +
            (C5390 - C5391 + C5392 - C5393) * C47389) *
               C47294 * C1665 +
           ((C4575 * C430 - C4579 * C417 + C47358 * C431 - C4580 * C418) *
                C4581 +
            (C4575 * C447 - C4579 * C433 + C47358 * C448 - C4580 * C434) *
                C4577 +
            (C5816 - C5817 + C5818 - C5819) * C4582 +
            (C5820 - C5821 + C5822 - C5823) * C47389) *
               C47294 * C47374) *
              C47410 +
          (((C4731 - C4730 + C4733 - C4732) * C4581 +
            (C4735 - C4734 + C4737 - C4736) * C4577 +
            (C4738 - C4739 + C4740 - C4741) * C4582 +
            (C4742 - C4743 + C4744 - C4745) * C47389) *
               C47294 * C1664 +
           ((C5387 - C5386 + C5389 - C5388) * C4581 +
            (C5391 - C5390 + C5393 - C5392) * C4577 +
            (C5824 - C5825 + C5826 - C5827) * C4582 +
            (C5828 - C5829 + C5830 - C5831) * C47389) *
               C47294 * C1665 +
           ((C5817 - C5816 + C5819 - C5818) * C4581 +
            (C5821 - C5820 + C5823 - C5822) * C4577 +
            (C5832 - C5833 + C5834 - C5835) * C4582 +
            (C5836 - C5837 + C5838 - C5839) * C47389) *
               C47294 * C47374) *
              C47398 +
          (((C4739 - C4738 + C4741 - C4740) * C4581 +
            (C4743 - C4742 + C4745 - C4744) * C4577 +
            (C5646 - C5647 + C5648 - C5649) * C4582 +
            (C5650 - C5651 + C5652 - C5653) * C47389) *
               C47294 * C1664 +
           ((C5825 - C5824 + C5827 - C5826) * C4581 +
            (C5829 - C5828 + C5831 - C5830) * C4577 +
            (C6318 - C6319 + C6320 - C6321) * C4582 +
            (C6322 - C6323 + C6324 - C6325) * C47389) *
               C47294 * C1665 +
           ((C5833 - C5832 + C5835 - C5834) * C4581 +
            (C5837 - C5836 + C5839 - C5838) * C4577 +
            (C4575 * C5809 - C4579 * C5807 + C47358 * C5810 - C4580 * C5808) *
                C4582 +
            (C4575 * C5813 - C4579 * C5811 + C47358 * C5814 - C4580 * C5812) *
                C47389) *
               C47294 * C47374) *
              C47371) *
         C47045) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C4575 * C124 - C4579 * C117 + C47358 * C125 - C4580 * C118) *
               C4581 +
           (C4575 * C138 - C4579 * C127 + C47358 * C139 - C4580 * C128) *
               C4577 +
           (C4730 - C4731 + C4732 - C4733) * C4582 +
           (C4734 - C4735 + C4736 - C4737) * C47389) *
              C47294 * C1839 +
          ((C4579 * C414 - C4575 * C424 + C4580 * C415 - C47358 * C425) *
               C4581 +
           (C4579 * C427 - C4575 * C444 + C4580 * C428 - C47358 * C445) *
               C4577 +
           (C5386 - C5387 + C5388 - C5389) * C4582 +
           (C5390 - C5391 + C5392 - C5393) * C47389) *
              C47294 * C1840 +
          ((C4575 * C430 - C4579 * C417 + C47358 * C431 - C4580 * C418) *
               C4581 +
           (C4575 * C447 - C4579 * C433 + C47358 * C448 - C4580 * C434) *
               C4577 +
           (C5816 - C5817 + C5818 - C5819) * C4582 +
           (C5820 - C5821 + C5822 - C5823) * C47389) *
              C47294 * C1841 +
          ((C4579 * C1844 - C4575 * C1850 + C4580 * C1845 - C47358 * C1851) *
               C4581 +
           (C4579 * C1853 - C4575 * C1862 + C4580 * C1854 - C47358 * C1863) *
               C4577 +
           (C4579 * C2222 - C4575 * C2225 + C4580 * C2223 - C47358 * C2226) *
               C4582 +
           (C4579 * C2228 - C4575 * C2231 + C4580 * C2229 - C47358 * C2232) *
               C47389) *
              C47294 * C1842 +
          ((C4575 * C1856 - C4579 * C1847 + C47358 * C1857 - C4580 * C1848) *
               C4581 +
           (C4575 * C1865 - C4579 * C1859 + C47358 * C1866 - C4580 * C1860) *
               C4577 +
           (C4575 * C6701 - C4579 * C6699 + C47358 * C6702 - C4580 * C6700) *
               C4582 +
           (C4575 * C6705 - C4579 * C6703 + C47358 * C6706 - C4580 * C6704) *
               C47389) *
              C47294 * C1843) *
         C47073 * C47045) /
            (p * q * std::sqrt(p + q));
    d2ee[38] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C4575 * C124 - C4579 * C117 + C47358 * C125 - C4580 * C118) *
                 C4581 +
             (C4575 * C138 - C4579 * C127 + C47358 * C139 - C4580 * C128) *
                 C4577 +
             (C4730 - C4731 + C4732 - C4733) * C4582 +
             (C4734 - C4735 + C4736 - C4737) * C47389) *
                C47294 * C47340 +
            ((C4579 * C414 - C4575 * C424 + C4580 * C415 - C47358 * C425) *
                 C4581 +
             (C4579 * C427 - C4575 * C444 + C4580 * C428 - C47358 * C445) *
                 C4577 +
             (C5386 - C5387 + C5388 - C5389) * C4582 +
             (C5390 - C5391 + C5392 - C5393) * C47389) *
                C47294 * C47178) *
               C942 +
           (((C4731 - C4730 + C4733 - C4732) * C4581 +
             (C4735 - C4734 + C4737 - C4736) * C4577 +
             (C4738 - C4739 + C4740 - C4741) * C4582 +
             (C4742 - C4743 + C4744 - C4745) * C47389) *
                C47294 * C47340 +
            ((C5387 - C5386 + C5389 - C5388) * C4581 +
             (C5391 - C5390 + C5393 - C5392) * C4577 +
             (C5824 - C5825 + C5826 - C5827) * C4582 +
             (C5828 - C5829 + C5830 - C5831) * C47389) *
                C47294 * C47178) *
               C943 +
           (((C4739 - C4738 + C4741 - C4740) * C4581 +
             (C4743 - C4742 + C4745 - C4744) * C4577 +
             (C5646 - C5647 + C5648 - C5649) * C4582 +
             (C5650 - C5651 + C5652 - C5653) * C47389) *
                C47294 * C47340 +
            ((C5825 - C5824 + C5827 - C5826) * C4581 +
             (C5829 - C5828 + C5831 - C5830) * C4577 +
             (C4579 * C1542 - C4575 * C1545 + C4580 * C1543 - C47358 * C1546) *
                 C4582 +
             (C4579 * C1548 - C4575 * C1551 + C4580 * C1549 - C47358 * C1552) *
                 C47389) *
                C47294 * C47178) *
               C47371) *
              C47325 +
          ((((C4579 * C118 - C4575 * C125 + C4580 * C119 - C47358 * C126) *
                 C4581 +
             (C4579 * C128 - C4575 * C139 + C4580 * C129 - C47358 * C140) *
                 C4577 +
             (C4746 - C4747 + C4748 - C4749) * C4582 +
             (C4750 - C4751 + C4752 - C4753) * C47389) *
                C47294 * C47340 +
            ((C4575 * C425 - C4579 * C415 + C47358 * C426 - C4580 * C416) *
                 C4581 +
             (C4575 * C445 - C4579 * C428 + C47358 * C446 - C4580 * C429) *
                 C4577 +
             (C5394 - C5395 + C5396 - C5397) * C4582 +
             (C5398 - C5399 + C5400 - C5401) * C47389) *
                C47294 * C47178) *
               C942 +
           (((C4747 - C4746 + C4749 - C4748) * C4581 +
             (C4751 - C4750 + C4753 - C4752) * C4577 +
             (C4754 - C4755 + C4756 - C4757) * C4582 +
             (C4758 - C4759 + C4760 - C4761) * C47389) *
                C47294 * C47340 +
            ((C5395 - C5394 + C5397 - C5396) * C4581 +
             (C5399 - C5398 + C5401 - C5400) * C4577 +
             (C6172 - C6173 + C6174 - C6175) * C4582 +
             (C6176 - C6177 + C6178 - C6179) * C47389) *
                C47294 * C47178) *
               C943 +
           (((C4755 - C4754 + C4757 - C4756) * C4581 +
             (C4759 - C4758 + C4761 - C4760) * C4577 +
             (C5970 - C5971 + C5972 - C5973) * C4582 +
             (C5974 - C5975 + C5976 - C5977) * C47389) *
                C47294 * C47340 +
            ((C6173 - C6172 + C6175 - C6174) * C4581 +
             (C6177 - C6176 + C6179 - C6178) * C4577 +
             (C4575 * C1546 - C4579 * C1543 + C47358 * C1547 - C4580 * C1544) *
                 C4582 +
             (C4575 * C1552 - C4579 * C1549 + C47358 * C1553 - C4580 * C1550) *
                 C47389) *
                C47294 * C47178) *
               C47371) *
              C47056)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4575 * C124 - C4579 * C117 + C47358 * C125 - C4580 * C118) *
                C4581 +
            (C4575 * C138 - C4579 * C127 + C47358 * C139 - C4580 * C128) *
                C4577 +
            (C4730 - C4731 + C4732 - C4733) * C4582 +
            (C4734 - C4735 + C4736 - C4737) * C47389) *
               C47294 * C47340 +
           ((C4579 * C414 - C4575 * C424 + C4580 * C415 - C47358 * C425) *
                C4581 +
            (C4579 * C427 - C4575 * C444 + C4580 * C428 - C47358 * C445) *
                C4577 +
            (C4579 * C812 - C4575 * C817 + C4580 * C813 - C47358 * C818) *
                C4582 +
            (C4579 * C820 - C4575 * C827 + C4580 * C821 - C47358 * C828) *
                C47389) *
               C47294 * C47178) *
              C47073 * C554 +
          (((C4579 * C118 - C4575 * C125 + C4580 * C119 - C47358 * C126) *
                C4581 +
            (C4579 * C128 - C4575 * C139 + C4580 * C129 - C47358 * C140) *
                C4577 +
            (C4746 - C4747 + C4748 - C4749) * C4582 +
            (C4750 - C4751 + C4752 - C4753) * C47389) *
               C47294 * C47340 +
           ((C4575 * C425 - C4579 * C415 + C47358 * C426 - C4580 * C416) *
                C4581 +
            (C4575 * C445 - C4579 * C428 + C47358 * C446 - C4580 * C429) *
                C4577 +
            (C4575 * C818 - C4579 * C813 + C47358 * C819 - C4580 * C814) *
                C4582 +
            (C4575 * C828 - C4579 * C821 + C47358 * C829 - C4580 * C822) *
                C47389) *
               C47294 * C47178) *
              C47073 * C555 +
          (((C4575 * C126 - C4579 * C119 + C47358 * C130 - C4580 * C120) *
                C4581 +
            (C4575 * C140 - C4579 * C129 + C47358 * C141 - C4580 * C131) *
                C4577 +
            (C4762 - C4763 + C4764 - C4765) * C4582 +
            (C4766 - C4767 + C4768 - C4769) * C47389) *
               C47294 * C47340 +
           ((C4579 * C416 - C4575 * C426 + C4580 * C420 - C47358 * C436) *
                C4581 +
            (C4579 * C429 - C4575 * C446 + C4580 * C437 - C47358 * C450) *
                C4577 +
            (C4579 * C814 - C4575 * C819 + C4580 * C815 - C47358 * C823) *
                C4582 +
            (C4579 * C822 - C4575 * C829 + C4580 * C824 - C47358 * C830) *
                C47389) *
               C47294 * C47178) *
              C47073 * C556 +
          (((C4579 * C120 - C4575 * C130 + C4580 * C121 - C47358 * C132) *
                C4581 +
            (C4579 * C131 - C4575 * C141 + C4580 * C133 - C47358 * C142) *
                C4577 +
            (C5054 - C5055 + C5056 - C5057) * C4582 +
            (C5058 - C5059 + C5060 - C5061) * C47389) *
               C47294 * C47340 +
           ((C4575 * C436 - C4579 * C420 + C47358 * C440 - C4580 * C422) *
                C4581 +
            (C4575 * C450 - C4579 * C437 + C47358 * C452 - C4580 * C441) *
                C4577 +
            (C4575 * C823 - C4579 * C815 + C47358 * C825 - C4580 * C816) *
                C4582 +
            (C4575 * C830 - C4579 * C824 + C47358 * C831 - C4580 * C826) *
                C47389) *
               C47294 * C47178) *
              C47073 * C47375)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C4575 * C124 - C4579 * C117 + C47358 * C125 - C4580 * C118) *
                C4581 +
            (C4575 * C138 - C4579 * C127 + C47358 * C139 - C4580 * C128) *
                C4577 +
            (C4730 - C4731 + C4732 - C4733) * C4582 +
            (C4734 - C4735 + C4736 - C4737) * C47389) *
               C47294 * C2116 +
           ((C4579 * C414 - C4575 * C424 + C4580 * C415 - C47358 * C425) *
                C4581 +
            (C4579 * C427 - C4575 * C444 + C4580 * C428 - C47358 * C445) *
                C4577 +
            (C5386 - C5387 + C5388 - C5389) * C4582 +
            (C5390 - C5391 + C5392 - C5393) * C47389) *
               C47294 * C2117 +
           ((C4575 * C430 - C4579 * C417 + C47358 * C431 - C4580 * C418) *
                C4581 +
            (C4575 * C447 - C4579 * C433 + C47358 * C448 - C4580 * C434) *
                C4577 +
            (C5816 - C5817 + C5818 - C5819) * C4582 +
            (C5820 - C5821 + C5822 - C5823) * C47389) *
               C47294 * C2118 +
           ((C4579 * C1844 - C4575 * C1850 + C4580 * C1845 - C47358 * C1851) *
                C4581 +
            (C4579 * C1853 - C4575 * C1862 + C4580 * C1854 - C47358 * C1863) *
                C4577 +
            (C4579 * C2222 - C4575 * C2225 + C4580 * C2223 - C47358 * C2226) *
                C4582 +
            (C4579 * C2228 - C4575 * C2231 + C4580 * C2229 - C47358 * C2232) *
                C47389) *
               C47294 * C47387) *
              C47073 * C47325 +
          (((C4579 * C118 - C4575 * C125 + C4580 * C119 - C47358 * C126) *
                C4581 +
            (C4579 * C128 - C4575 * C139 + C4580 * C129 - C47358 * C140) *
                C4577 +
            (C4746 - C4747 + C4748 - C4749) * C4582 +
            (C4750 - C4751 + C4752 - C4753) * C47389) *
               C47294 * C2116 +
           ((C4575 * C425 - C4579 * C415 + C47358 * C426 - C4580 * C416) *
                C4581 +
            (C4575 * C445 - C4579 * C428 + C47358 * C446 - C4580 * C429) *
                C4577 +
            (C5394 - C5395 + C5396 - C5397) * C4582 +
            (C5398 - C5399 + C5400 - C5401) * C47389) *
               C47294 * C2117 +
           ((C4579 * C418 - C4575 * C431 + C4580 * C419 - C47358 * C432) *
                C4581 +
            (C4579 * C434 - C4575 * C448 + C4580 * C435 - C47358 * C449) *
                C4577 +
            (C6902 - C6903 + C6904 - C6905) * C4582 +
            (C6906 - C6907 + C6908 - C6909) * C47389) *
               C47294 * C2118 +
           ((C4575 * C1851 - C4579 * C1845 + C47358 * C1852 - C4580 * C1846) *
                C4581 +
            (C4575 * C1863 - C4579 * C1854 + C47358 * C1864 - C4580 * C1855) *
                C4577 +
            (C4575 * C2226 - C4579 * C2223 + C47358 * C2227 - C4580 * C2224) *
                C4582 +
            (C4575 * C2232 - C4579 * C2229 + C47358 * C2233 - C4580 * C2230) *
                C47389) *
               C47294 * C47387) *
              C47073 * C47056)) /
            (p * q * std::sqrt(p + q));
    d2ee[39] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C4575 * C124 - C4579 * C117 + C47358 * C125 - C4580 * C118) *
                C4581 +
            (C4575 * C138 - C4579 * C127 + C47358 * C139 - C4580 * C128) *
                C4577 +
            (C4730 - C4731 + C4732 - C4733) * C4582 +
            (C4734 - C4735 + C4736 - C4737) * C47389) *
               C47294 * C47091 * C47410 +
           ((C4731 - C4730 + C4733 - C4732) * C4581 +
            (C4735 - C4734 + C4737 - C4736) * C4577 +
            (C4738 - C4739 + C4740 - C4741) * C4582 +
            (C4742 - C4743 + C4744 - C4745) * C47389) *
               C47294 * C47091 * C47398 +
           ((C4739 - C4738 + C4741 - C4740) * C4581 +
            (C4743 - C4742 + C4745 - C4744) * C4577 +
            (C4575 * C1022 - C4579 * C1016 + C47358 * C1023 - C4580 * C1017) *
                C4582 +
            (C4575 * C1034 - C4579 * C1025 + C47358 * C1035 - C4580 * C1026) *
                C47389) *
               C47294 * C47091 * C47371) *
              C258 +
          (((C4579 * C118 - C4575 * C125 + C4580 * C119 - C47358 * C126) *
                C4581 +
            (C4579 * C128 - C4575 * C139 + C4580 * C129 - C47358 * C140) *
                C4577 +
            (C4746 - C4747 + C4748 - C4749) * C4582 +
            (C4750 - C4751 + C4752 - C4753) * C47389) *
               C47294 * C47091 * C47410 +
           ((C4747 - C4746 + C4749 - C4748) * C4581 +
            (C4751 - C4750 + C4753 - C4752) * C4577 +
            (C4754 - C4755 + C4756 - C4757) * C4582 +
            (C4758 - C4759 + C4760 - C4761) * C47389) *
               C47294 * C47091 * C47398 +
           ((C4755 - C4754 + C4757 - C4756) * C4581 +
            (C4759 - C4758 + C4761 - C4760) * C4577 +
            (C4579 * C1017 - C4575 * C1023 + C4580 * C1018 - C47358 * C1024) *
                C4582 +
            (C4579 * C1026 - C4575 * C1035 + C4580 * C1027 - C47358 * C1036) *
                C47389) *
               C47294 * C47091 * C47371) *
              C259 +
          (((C4575 * C126 - C4579 * C119 + C47358 * C130 - C4580 * C120) *
                C4581 +
            (C4575 * C140 - C4579 * C129 + C47358 * C141 - C4580 * C131) *
                C4577 +
            (C4762 - C4763 + C4764 - C4765) * C4582 +
            (C4766 - C4767 + C4768 - C4769) * C47389) *
               C47294 * C47091 * C47410 +
           ((C4763 - C4762 + C4765 - C4764) * C4581 +
            (C4767 - C4766 + C4769 - C4768) * C4577 +
            (C4770 - C4771 + C4772 - C4773) * C4582 +
            (C4774 - C4775 + C4776 - C4777) * C47389) *
               C47294 * C47091 * C47398 +
           ((C4771 - C4770 + C4773 - C4772) * C4581 +
            (C4775 - C4774 + C4777 - C4776) * C4577 +
            (C4575 * C1024 - C4579 * C1018 + C47358 * C1291 - C4580 * C1290) *
                C4582 +
            (C4575 * C1036 - C4579 * C1027 + C47358 * C1293 - C4580 * C1292) *
                C47389) *
               C47294 * C47091 * C47371) *
              C47365)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C4575 * C124 - C4579 * C117 + C47358 * C125 - C4580 * C118) *
               C4581 +
           (C4575 * C138 - C4579 * C127 + C47358 * C139 - C4580 * C128) *
               C4577 +
           (C4575 * C271 - C4579 * C261 + C47358 * C272 - C4580 * C262) *
               C4582 +
           (C4575 * C291 - C4579 * C274 + C47358 * C292 - C4580 * C275) *
               C47389) *
              C47294 * C47091 * C47073 * C108 +
          ((C4579 * C118 - C4575 * C125 + C4580 * C119 - C47358 * C126) *
               C4581 +
           (C4579 * C128 - C4575 * C139 + C4580 * C129 - C47358 * C140) *
               C4577 +
           (C4579 * C262 - C4575 * C272 + C4580 * C263 - C47358 * C273) *
               C4582 +
           (C4579 * C275 - C4575 * C292 + C4580 * C276 - C47358 * C293) *
               C47389) *
              C47294 * C47091 * C47073 * C109 +
          ((C4575 * C126 - C4579 * C119 + C47358 * C130 - C4580 * C120) *
               C4581 +
           (C4575 * C140 - C4579 * C129 + C47358 * C141 - C4580 * C131) *
               C4577 +
           (C4575 * C273 - C4579 * C263 + C47358 * C283 - C4580 * C267) *
               C4582 +
           (C4575 * C293 - C4579 * C276 + C47358 * C297 - C4580 * C284) *
               C47389) *
              C47294 * C47091 * C47073 * C110 +
          ((C4579 * C120 - C4575 * C130 + C4580 * C121 - C47358 * C132) *
               C4581 +
           (C4579 * C131 - C4575 * C141 + C4580 * C133 - C47358 * C142) *
               C4577 +
           (C4579 * C267 - C4575 * C283 + C4580 * C269 - C47358 * C287) *
               C4582 +
           (C4579 * C284 - C4575 * C297 + C4580 * C288 - C47358 * C299) *
               C47389) *
              C47294 * C47091 * C47073 * C111 +
          ((C4575 * C132 - C4579 * C121 + C47358 * C134 - C4580 * C122) *
               C4581 +
           (C4575 * C142 - C4579 * C133 + C47358 * C143 - C4580 * C135) *
               C4577 +
           (C4575 * C287 - C4579 * C269 + C47358 * C559 - C4580 * C558) *
               C4582 +
           (C4575 * C299 - C4579 * C288 + C47358 * C561 - C4580 * C560) *
               C47389) *
              C47294 * C47091 * C47073 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C4575 * C124 - C4579 * C117 + C47358 * C125 - C4580 * C118) *
                C4581 +
            (C4575 * C138 - C4579 * C127 + C47358 * C139 - C4580 * C128) *
                C4577 +
            (C4730 - C4731 + C4732 - C4733) * C4582 +
            (C4734 - C4735 + C4736 - C4737) * C47389) *
               C47294 * C47091 * C942 +
           ((C4731 - C4730 + C4733 - C4732) * C4581 +
            (C4735 - C4734 + C4737 - C4736) * C4577 +
            (C4738 - C4739 + C4740 - C4741) * C4582 +
            (C4742 - C4743 + C4744 - C4745) * C47389) *
               C47294 * C47091 * C943 +
           ((C4739 - C4738 + C4741 - C4740) * C4581 +
            (C4743 - C4742 + C4745 - C4744) * C4577 +
            (C4575 * C1022 - C4579 * C1016 + C47358 * C1023 - C4580 * C1017) *
                C4582 +
            (C4575 * C1034 - C4579 * C1025 + C47358 * C1035 - C4580 * C1026) *
                C47389) *
               C47294 * C47091 * C47371) *
              C47407 +
          (((C4579 * C118 - C4575 * C125 + C4580 * C119 - C47358 * C126) *
                C4581 +
            (C4579 * C128 - C4575 * C139 + C4580 * C129 - C47358 * C140) *
                C4577 +
            (C4746 - C4747 + C4748 - C4749) * C4582 +
            (C4750 - C4751 + C4752 - C4753) * C47389) *
               C47294 * C47091 * C942 +
           ((C4747 - C4746 + C4749 - C4748) * C4581 +
            (C4751 - C4750 + C4753 - C4752) * C4577 +
            (C4754 - C4755 + C4756 - C4757) * C4582 +
            (C4758 - C4759 + C4760 - C4761) * C47389) *
               C47294 * C47091 * C943 +
           ((C4755 - C4754 + C4757 - C4756) * C4581 +
            (C4759 - C4758 + C4761 - C4760) * C4577 +
            (C4579 * C1017 - C4575 * C1023 + C4580 * C1018 - C47358 * C1024) *
                C4582 +
            (C4579 * C1026 - C4575 * C1035 + C4580 * C1027 - C47358 * C1036) *
                C47389) *
               C47294 * C47091 * C47371) *
              C47394 +
          (((C4575 * C126 - C4579 * C119 + C47358 * C130 - C4580 * C120) *
                C4581 +
            (C4575 * C140 - C4579 * C129 + C47358 * C141 - C4580 * C131) *
                C4577 +
            (C4762 - C4763 + C4764 - C4765) * C4582 +
            (C4766 - C4767 + C4768 - C4769) * C47389) *
               C47294 * C47091 * C942 +
           ((C4763 - C4762 + C4765 - C4764) * C4581 +
            (C4767 - C4766 + C4769 - C4768) * C4577 +
            (C4770 - C4771 + C4772 - C4773) * C4582 +
            (C4774 - C4775 + C4776 - C4777) * C47389) *
               C47294 * C47091 * C943 +
           ((C4771 - C4770 + C4773 - C4772) * C4581 +
            (C4775 - C4774 + C4777 - C4776) * C4577 +
            (C4575 * C1024 - C4579 * C1018 + C47358 * C1291 - C4580 * C1290) *
                C4582 +
            (C4575 * C1036 - C4579 * C1027 + C47358 * C1293 - C4580 * C1292) *
                C47389) *
               C47294 * C47091 * C47371) *
              C47365)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C4575 * C124 - C4579 * C117 + C47358 * C125 - C4580 * C118) *
               C4581 +
           (C4575 * C138 - C4579 * C127 + C47358 * C139 - C4580 * C128) *
               C4577 +
           (C4730 - C4731 + C4732 - C4733) * C4582 +
           (C4734 - C4735 + C4736 - C4737) * C47389) *
              C47294 * C47091 * C1010 +
          ((C4731 - C4730 + C4733 - C4732) * C4581 +
           (C4735 - C4734 + C4737 - C4736) * C4577 +
           (C4738 - C4739 + C4740 - C4741) * C4582 +
           (C4742 - C4743 + C4744 - C4745) * C47389) *
              C47294 * C47091 * C1011 +
          ((C4739 - C4738 + C4741 - C4740) * C4581 +
           (C4743 - C4742 + C4745 - C4744) * C4577 +
           (C5646 - C5647 + C5648 - C5649) * C4582 +
           (C5650 - C5651 + C5652 - C5653) * C47389) *
              C47294 * C47091 * C1012 +
          ((C5647 - C5646 + C5649 - C5648) * C4581 +
           (C5651 - C5650 + C5653 - C5652) * C4577 +
           (C5654 - C5655 + C5656 - C5657) * C4582 +
           (C5658 - C5659 + C5660 - C5661) * C47389) *
              C47294 * C47091 * C1013 +
          ((C5655 - C5654 + C5657 - C5656) * C4581 +
           (C5659 - C5658 + C5661 - C5660) * C4577 +
           (C4575 * C5639 - C4579 * C5637 + C47358 * C5640 - C4580 * C5638) *
               C4582 +
           (C4575 * C5643 - C4579 * C5641 + C47358 * C5644 - C4580 * C5642) *
               C47389) *
              C47294 * C47091 * C1014) *
         C47045) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4575 * C124 - C4579 * C117 + C47358 * C125 - C4580 * C118) *
                C4581 +
            (C4575 * C138 - C4579 * C127 + C47358 * C139 - C4580 * C128) *
                C4577 +
            (C4730 - C4731 + C4732 - C4733) * C4582 +
            (C4734 - C4735 + C4736 - C4737) * C47389) *
               C47294 * C1664 +
           ((C4579 * C414 - C4575 * C424 + C4580 * C415 - C47358 * C425) *
                C4581 +
            (C4579 * C427 - C4575 * C444 + C4580 * C428 - C47358 * C445) *
                C4577 +
            (C5386 - C5387 + C5388 - C5389) * C4582 +
            (C5390 - C5391 + C5392 - C5393) * C47389) *
               C47294 * C1665 +
           ((C4575 * C430 - C4579 * C417 + C47358 * C431 - C4580 * C418) *
                C4581 +
            (C4575 * C447 - C4579 * C433 + C47358 * C448 - C4580 * C434) *
                C4577 +
            (C5816 - C5817 + C5818 - C5819) * C4582 +
            (C5820 - C5821 + C5822 - C5823) * C47389) *
               C47294 * C47374) *
              C47073 * C47407 +
          (((C4579 * C118 - C4575 * C125 + C4580 * C119 - C47358 * C126) *
                C4581 +
            (C4579 * C128 - C4575 * C139 + C4580 * C129 - C47358 * C140) *
                C4577 +
            (C4746 - C4747 + C4748 - C4749) * C4582 +
            (C4750 - C4751 + C4752 - C4753) * C47389) *
               C47294 * C1664 +
           ((C4575 * C425 - C4579 * C415 + C47358 * C426 - C4580 * C416) *
                C4581 +
            (C4575 * C445 - C4579 * C428 + C47358 * C446 - C4580 * C429) *
                C4577 +
            (C5394 - C5395 + C5396 - C5397) * C4582 +
            (C5398 - C5399 + C5400 - C5401) * C47389) *
               C47294 * C1665 +
           ((C4579 * C418 - C4575 * C431 + C4580 * C419 - C47358 * C432) *
                C4581 +
            (C4579 * C434 - C4575 * C448 + C4580 * C435 - C47358 * C449) *
                C4577 +
            (C4579 * C1151 - C4575 * C1160 + C4580 * C1152 - C47358 * C1161) *
                C4582 +
            (C4579 * C1163 - C4575 * C1178 + C4580 * C1164 - C47358 * C1179) *
                C47389) *
               C47294 * C47374) *
              C47073 * C47394 +
          (((C4575 * C126 - C4579 * C119 + C47358 * C130 - C4580 * C120) *
                C4581 +
            (C4575 * C140 - C4579 * C129 + C47358 * C141 - C4580 * C131) *
                C4577 +
            (C4762 - C4763 + C4764 - C4765) * C4582 +
            (C4766 - C4767 + C4768 - C4769) * C47389) *
               C47294 * C1664 +
           ((C4579 * C416 - C4575 * C426 + C4580 * C420 - C47358 * C436) *
                C4581 +
            (C4579 * C429 - C4575 * C446 + C4580 * C437 - C47358 * C450) *
                C4577 +
            (C5402 - C5403 + C5404 - C5405) * C4582 +
            (C5406 - C5407 + C5408 - C5409) * C47389) *
               C47294 * C1665 +
           ((C4575 * C432 - C4579 * C419 + C47358 * C438 - C4580 * C421) *
                C4581 +
            (C4575 * C449 - C4579 * C435 + C47358 * C451 - C4580 * C439) *
                C4577 +
            (C4575 * C1161 - C4579 * C1152 + C47358 * C2015 - C4580 * C2014) *
                C4582 +
            (C4575 * C1179 - C4579 * C1164 + C47358 * C2017 - C4580 * C2016) *
                C47389) *
               C47294 * C47374) *
              C47073 * C47365)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4575 * C124 - C4579 * C117 + C47358 * C125 - C4580 * C118) *
                C4581 +
            (C4575 * C138 - C4579 * C127 + C47358 * C139 - C4580 * C128) *
                C4577 +
            (C4730 - C4731 + C4732 - C4733) * C4582 +
            (C4734 - C4735 + C4736 - C4737) * C47389) *
               C47294 * C1664 +
           ((C4579 * C414 - C4575 * C424 + C4580 * C415 - C47358 * C425) *
                C4581 +
            (C4579 * C427 - C4575 * C444 + C4580 * C428 - C47358 * C445) *
                C4577 +
            (C5386 - C5387 + C5388 - C5389) * C4582 +
            (C5390 - C5391 + C5392 - C5393) * C47389) *
               C47294 * C1665 +
           ((C4575 * C430 - C4579 * C417 + C47358 * C431 - C4580 * C418) *
                C4581 +
            (C4575 * C447 - C4579 * C433 + C47358 * C448 - C4580 * C434) *
                C4577 +
            (C5816 - C5817 + C5818 - C5819) * C4582 +
            (C5820 - C5821 + C5822 - C5823) * C47389) *
               C47294 * C47374) *
              C47410 +
          (((C4731 - C4730 + C4733 - C4732) * C4581 +
            (C4735 - C4734 + C4737 - C4736) * C4577 +
            (C4738 - C4739 + C4740 - C4741) * C4582 +
            (C4742 - C4743 + C4744 - C4745) * C47389) *
               C47294 * C1664 +
           ((C5387 - C5386 + C5389 - C5388) * C4581 +
            (C5391 - C5390 + C5393 - C5392) * C4577 +
            (C5824 - C5825 + C5826 - C5827) * C4582 +
            (C5828 - C5829 + C5830 - C5831) * C47389) *
               C47294 * C1665 +
           ((C5817 - C5816 + C5819 - C5818) * C4581 +
            (C5821 - C5820 + C5823 - C5822) * C4577 +
            (C5832 - C5833 + C5834 - C5835) * C4582 +
            (C5836 - C5837 + C5838 - C5839) * C47389) *
               C47294 * C47374) *
              C47398 +
          (((C4739 - C4738 + C4741 - C4740) * C4581 +
            (C4743 - C4742 + C4745 - C4744) * C4577 +
            (C5646 - C5647 + C5648 - C5649) * C4582 +
            (C5650 - C5651 + C5652 - C5653) * C47389) *
               C47294 * C1664 +
           ((C5825 - C5824 + C5827 - C5826) * C4581 +
            (C5829 - C5828 + C5831 - C5830) * C4577 +
            (C6318 - C6319 + C6320 - C6321) * C4582 +
            (C6322 - C6323 + C6324 - C6325) * C47389) *
               C47294 * C1665 +
           ((C5833 - C5832 + C5835 - C5834) * C4581 +
            (C5837 - C5836 + C5839 - C5838) * C4577 +
            (C4575 * C5809 - C4579 * C5807 + C47358 * C5810 - C4580 * C5808) *
                C4582 +
            (C4575 * C5813 - C4579 * C5811 + C47358 * C5814 - C4580 * C5812) *
                C47389) *
               C47294 * C47374) *
              C47371) *
         C47045) /
            (p * q * std::sqrt(p + q));
    d2ee[40] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C4575 * C124 - C4579 * C117 + C47358 * C125 - C4580 * C118) *
                 C4581 +
             (C4575 * C138 - C4579 * C127 + C47358 * C139 - C4580 * C128) *
                 C4577 +
             (C4730 - C4731 + C4732 - C4733) * C4582 +
             (C4734 - C4735 + C4736 - C4737) * C47389) *
                C47294 * C3094 +
            ((C4579 * C414 - C4575 * C424 + C4580 * C415 - C47358 * C425) *
                 C4581 +
             (C4579 * C427 - C4575 * C444 + C4580 * C428 - C47358 * C445) *
                 C4577 +
             (C5386 - C5387 + C5388 - C5389) * C4582 +
             (C5390 - C5391 + C5392 - C5393) * C47389) *
                C47294 * C47178) *
               C47339 +
           (((C4731 - C4730 + C4733 - C4732) * C4581 +
             (C4735 - C4734 + C4737 - C4736) * C4577 +
             (C4738 - C4739 + C4740 - C4741) * C4582 +
             (C4742 - C4743 + C4744 - C4745) * C47389) *
                C47294 * C3094 +
            ((C5387 - C5386 + C5389 - C5388) * C4581 +
             (C5391 - C5390 + C5393 - C5392) * C4577 +
             (C5824 - C5825 + C5826 - C5827) * C4582 +
             (C5828 - C5829 + C5830 - C5831) * C47389) *
                C47294 * C47178) *
               C47136) *
              C47050 +
          ((((C4579 * C118 - C4575 * C125 + C4580 * C119 - C47358 * C126) *
                 C4581 +
             (C4579 * C128 - C4575 * C139 + C4580 * C129 - C47358 * C140) *
                 C4577 +
             (C4746 - C4747 + C4748 - C4749) * C4582 +
             (C4750 - C4751 + C4752 - C4753) * C47389) *
                C47294 * C3094 +
            ((C4575 * C425 - C4579 * C415 + C47358 * C426 - C4580 * C416) *
                 C4581 +
             (C4575 * C445 - C4579 * C428 + C47358 * C446 - C4580 * C429) *
                 C4577 +
             (C5394 - C5395 + C5396 - C5397) * C4582 +
             (C5398 - C5399 + C5400 - C5401) * C47389) *
                C47294 * C47178) *
               C47339 +
           (((C4747 - C4746 + C4749 - C4748) * C4581 +
             (C4751 - C4750 + C4753 - C4752) * C4577 +
             (C4754 - C4755 + C4756 - C4757) * C4582 +
             (C4758 - C4759 + C4760 - C4761) * C47389) *
                C47294 * C3094 +
            ((C5395 - C5394 + C5397 - C5396) * C4581 +
             (C5399 - C5398 + C5401 - C5400) * C4577 +
             (C6172 - C6173 + C6174 - C6175) * C4582 +
             (C6176 - C6177 + C6178 - C6179) * C47389) *
                C47294 * C47178) *
               C47136) *
              C47059 +
          ((((C4575 * C126 - C4579 * C119 + C47358 * C130 - C4580 * C120) *
                 C4581 +
             (C4575 * C140 - C4579 * C129 + C47358 * C141 - C4580 * C131) *
                 C4577 +
             (C4762 - C4763 + C4764 - C4765) * C4582 +
             (C4766 - C4767 + C4768 - C4769) * C47389) *
                C47294 * C3094 +
            ((C4579 * C416 - C4575 * C426 + C4580 * C420 - C47358 * C436) *
                 C4581 +
             (C4579 * C429 - C4575 * C446 + C4580 * C437 - C47358 * C450) *
                 C4577 +
             (C5402 - C5403 + C5404 - C5405) * C4582 +
             (C5406 - C5407 + C5408 - C5409) * C47389) *
                C47294 * C47178) *
               C47339 +
           (((C4763 - C4762 + C4765 - C4764) * C4581 +
             (C4767 - C4766 + C4769 - C4768) * C4577 +
             (C4770 - C4771 + C4772 - C4773) * C4582 +
             (C4774 - C4775 + C4776 - C4777) * C47389) *
                C47294 * C3094 +
            ((C5403 - C5402 + C5405 - C5404) * C4581 +
             (C5407 - C5406 + C5409 - C5408) * C4577 +
             (C4575 * C1167 - C4579 * C1155 + C47358 * C1441 - C4580 * C1440) *
                 C4582 +
             (C4575 * C1182 - C4579 * C1170 + C47358 * C1443 - C4580 * C1442) *
                 C47389) *
                C47294 * C47178) *
               C47136) *
              C2703)) /
        (p * q * std::sqrt(p + q));
    d2ee[41] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C4575 * C124 - C4579 * C117 + C47358 * C125 - C4580 * C118) *
                 C4581 +
             (C4575 * C138 - C4579 * C127 + C47358 * C139 - C4580 * C128) *
                 C4577 +
             (C4730 - C4731 + C4732 - C4733) * C4582 +
             (C4734 - C4735 + C4736 - C4737) * C47389) *
                C47294 * C47174 +
            ((C4579 * C414 - C4575 * C424 + C4580 * C415 - C47358 * C425) *
                 C4581 +
             (C4579 * C427 - C4575 * C444 + C4580 * C428 - C47358 * C445) *
                 C4577 +
             (C5386 - C5387 + C5388 - C5389) * C4582 +
             (C5390 - C5391 + C5392 - C5393) * C47389) *
                C47294 * C47181 +
            ((C4575 * C430 - C4579 * C417 + C47358 * C431 - C4580 * C418) *
                 C4581 +
             (C4575 * C447 - C4579 * C433 + C47358 * C448 - C4580 * C434) *
                 C4577 +
             (C5816 - C5817 + C5818 - C5819) * C4582 +
             (C5820 - C5821 + C5822 - C5823) * C47389) *
                C47294 * C3602) *
               C47339 +
           (((C4731 - C4730 + C4733 - C4732) * C4581 +
             (C4735 - C4734 + C4737 - C4736) * C4577 +
             (C4738 - C4739 + C4740 - C4741) * C4582 +
             (C4742 - C4743 + C4744 - C4745) * C47389) *
                C47294 * C47174 +
            ((C5387 - C5386 + C5389 - C5388) * C4581 +
             (C5391 - C5390 + C5393 - C5392) * C4577 +
             (C5824 - C5825 + C5826 - C5827) * C4582 +
             (C5828 - C5829 + C5830 - C5831) * C47389) *
                C47294 * C47181 +
            ((C5817 - C5816 + C5819 - C5818) * C4581 +
             (C5821 - C5820 + C5823 - C5822) * C4577 +
             (C5832 - C5833 + C5834 - C5835) * C4582 +
             (C5836 - C5837 + C5838 - C5839) * C47389) *
                C47294 * C3602) *
               C47136) *
              C2440 +
          ((((C4579 * C118 - C4575 * C125 + C4580 * C119 - C47358 * C126) *
                 C4581 +
             (C4579 * C128 - C4575 * C139 + C4580 * C129 - C47358 * C140) *
                 C4577 +
             (C4746 - C4747 + C4748 - C4749) * C4582 +
             (C4750 - C4751 + C4752 - C4753) * C47389) *
                C47294 * C47174 +
            ((C4575 * C425 - C4579 * C415 + C47358 * C426 - C4580 * C416) *
                 C4581 +
             (C4575 * C445 - C4579 * C428 + C47358 * C446 - C4580 * C429) *
                 C4577 +
             (C5394 - C5395 + C5396 - C5397) * C4582 +
             (C5398 - C5399 + C5400 - C5401) * C47389) *
                C47294 * C47181 +
            ((C4579 * C418 - C4575 * C431 + C4580 * C419 - C47358 * C432) *
                 C4581 +
             (C4579 * C434 - C4575 * C448 + C4580 * C435 - C47358 * C449) *
                 C4577 +
             (C6902 - C6903 + C6904 - C6905) * C4582 +
             (C6906 - C6907 + C6908 - C6909) * C47389) *
                C47294 * C3602) *
               C47339 +
           (((C4747 - C4746 + C4749 - C4748) * C4581 +
             (C4751 - C4750 + C4753 - C4752) * C4577 +
             (C4754 - C4755 + C4756 - C4757) * C4582 +
             (C4758 - C4759 + C4760 - C4761) * C47389) *
                C47294 * C47174 +
            ((C5395 - C5394 + C5397 - C5396) * C4581 +
             (C5399 - C5398 + C5401 - C5400) * C4577 +
             (C6172 - C6173 + C6174 - C6175) * C4582 +
             (C6176 - C6177 + C6178 - C6179) * C47389) *
                C47294 * C47181 +
            ((C6903 - C6902 + C6905 - C6904) * C4581 +
             (C6907 - C6906 + C6909 - C6908) * C4577 +
             (C4575 * C1172 - C4579 * C1157 + C47358 * C1173 - C4580 * C1158) *
                 C4582 +
             (C4575 * C1184 - C4579 * C1175 + C47358 * C1185 - C4580 * C1176) *
                 C47389) *
                C47294 * C3602) *
               C47136) *
              C47056)) /
        (p * q * std::sqrt(p + q));
    d2ee[42] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C4575 * C124 - C4579 * C117 + C47358 * C125 - C4580 * C118) *
                 C4581 +
             (C4575 * C138 - C4579 * C127 + C47358 * C139 - C4580 * C128) *
                 C4577 +
             (C4730 - C4731 + C4732 - C4733) * C4582 +
             (C4734 - C4735 + C4736 - C4737) * C47389) *
                C47294 * C3094 +
            ((C4579 * C414 - C4575 * C424 + C4580 * C415 - C47358 * C425) *
                 C4581 +
             (C4579 * C427 - C4575 * C444 + C4580 * C428 - C47358 * C445) *
                 C4577 +
             (C5386 - C5387 + C5388 - C5389) * C4582 +
             (C5390 - C5391 + C5392 - C5393) * C47389) *
                C47294 * C47178) *
               C47410 +
           (((C4731 - C4730 + C4733 - C4732) * C4581 +
             (C4735 - C4734 + C4737 - C4736) * C4577 +
             (C4738 - C4739 + C4740 - C4741) * C4582 +
             (C4742 - C4743 + C4744 - C4745) * C47389) *
                C47294 * C3094 +
            ((C5387 - C5386 + C5389 - C5388) * C4581 +
             (C5391 - C5390 + C5393 - C5392) * C4577 +
             (C5824 - C5825 + C5826 - C5827) * C4582 +
             (C5828 - C5829 + C5830 - C5831) * C47389) *
                C47294 * C47178) *
               C47398 +
           (((C4739 - C4738 + C4741 - C4740) * C4581 +
             (C4743 - C4742 + C4745 - C4744) * C4577 +
             (C5646 - C5647 + C5648 - C5649) * C4582 +
             (C5650 - C5651 + C5652 - C5653) * C47389) *
                C47294 * C3094 +
            ((C5825 - C5824 + C5827 - C5826) * C4581 +
             (C5829 - C5828 + C5831 - C5830) * C4577 +
             (C6318 - C6319 + C6320 - C6321) * C4582 +
             (C6322 - C6323 + C6324 - C6325) * C47389) *
                C47294 * C47178) *
               C47371) *
              C2440 +
          ((((C4579 * C118 - C4575 * C125 + C4580 * C119 - C47358 * C126) *
                 C4581 +
             (C4579 * C128 - C4575 * C139 + C4580 * C129 - C47358 * C140) *
                 C4577 +
             (C4746 - C4747 + C4748 - C4749) * C4582 +
             (C4750 - C4751 + C4752 - C4753) * C47389) *
                C47294 * C3094 +
            ((C4575 * C425 - C4579 * C415 + C47358 * C426 - C4580 * C416) *
                 C4581 +
             (C4575 * C445 - C4579 * C428 + C47358 * C446 - C4580 * C429) *
                 C4577 +
             (C5394 - C5395 + C5396 - C5397) * C4582 +
             (C5398 - C5399 + C5400 - C5401) * C47389) *
                C47294 * C47178) *
               C47410 +
           (((C4747 - C4746 + C4749 - C4748) * C4581 +
             (C4751 - C4750 + C4753 - C4752) * C4577 +
             (C4754 - C4755 + C4756 - C4757) * C4582 +
             (C4758 - C4759 + C4760 - C4761) * C47389) *
                C47294 * C3094 +
            ((C5395 - C5394 + C5397 - C5396) * C4581 +
             (C5399 - C5398 + C5401 - C5400) * C4577 +
             (C6172 - C6173 + C6174 - C6175) * C4582 +
             (C6176 - C6177 + C6178 - C6179) * C47389) *
                C47294 * C47178) *
               C47398 +
           (((C4755 - C4754 + C4757 - C4756) * C4581 +
             (C4759 - C4758 + C4761 - C4760) * C4577 +
             (C5970 - C5971 + C5972 - C5973) * C4582 +
             (C5974 - C5975 + C5976 - C5977) * C47389) *
                C47294 * C3094 +
            ((C6173 - C6172 + C6175 - C6174) * C4581 +
             (C6177 - C6176 + C6179 - C6178) * C4577 +
             (C4575 * C1546 - C4579 * C1543 + C47358 * C1547 - C4580 * C1544) *
                 C4582 +
             (C4575 * C1552 - C4579 * C1549 + C47358 * C1553 - C4580 * C1550) *
                 C47389) *
                C47294 * C47178) *
               C47371) *
              C47056)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4575 * C124 - C4579 * C117 + C47358 * C125 - C4580 * C118) *
                C4581 +
            (C4575 * C138 - C4579 * C127 + C47358 * C139 - C4580 * C128) *
                C4577 +
            (C4730 - C4731 + C4732 - C4733) * C4582 +
            (C4734 - C4735 + C4736 - C4737) * C47389) *
               C47294 * C3094 +
           ((C4579 * C414 - C4575 * C424 + C4580 * C415 - C47358 * C425) *
                C4581 +
            (C4579 * C427 - C4575 * C444 + C4580 * C428 - C47358 * C445) *
                C4577 +
            (C5386 - C5387 + C5388 - C5389) * C4582 +
            (C5390 - C5391 + C5392 - C5393) * C47389) *
               C47294 * C47178) *
              C47073 * C47416 +
          (((C4579 * C118 - C4575 * C125 + C4580 * C119 - C47358 * C126) *
                C4581 +
            (C4579 * C128 - C4575 * C139 + C4580 * C129 - C47358 * C140) *
                C4577 +
            (C4746 - C4747 + C4748 - C4749) * C4582 +
            (C4750 - C4751 + C4752 - C4753) * C47389) *
               C47294 * C3094 +
           ((C4575 * C425 - C4579 * C415 + C47358 * C426 - C4580 * C416) *
                C4581 +
            (C4575 * C445 - C4579 * C428 + C47358 * C446 - C4580 * C429) *
                C4577 +
            (C5394 - C5395 + C5396 - C5397) * C4582 +
            (C5398 - C5399 + C5400 - C5401) * C47389) *
               C47294 * C47178) *
              C47073 * C47409 +
          (((C4575 * C126 - C4579 * C119 + C47358 * C130 - C4580 * C120) *
                C4581 +
            (C4575 * C140 - C4579 * C129 + C47358 * C141 - C4580 * C131) *
                C4577 +
            (C4762 - C4763 + C4764 - C4765) * C4582 +
            (C4766 - C4767 + C4768 - C4769) * C47389) *
               C47294 * C3094 +
           ((C4579 * C416 - C4575 * C426 + C4580 * C420 - C47358 * C436) *
                C4581 +
            (C4579 * C429 - C4575 * C446 + C4580 * C437 - C47358 * C450) *
                C4577 +
            (C5402 - C5403 + C5404 - C5405) * C4582 +
            (C5406 - C5407 + C5408 - C5409) * C47389) *
               C47294 * C47178) *
              C47073 * C47396 +
          (((C4579 * C120 - C4575 * C130 + C4580 * C121 - C47358 * C132) *
                C4581 +
            (C4579 * C131 - C4575 * C141 + C4580 * C133 - C47358 * C142) *
                C4577 +
            (C5054 - C5055 + C5056 - C5057) * C4582 +
            (C5058 - C5059 + C5060 - C5061) * C47389) *
               C47294 * C3094 +
           ((C4575 * C436 - C4579 * C420 + C47358 * C440 - C4580 * C422) *
                C4581 +
            (C4575 * C450 - C4579 * C437 + C47358 * C452 - C4580 * C441) *
                C4577 +
            (C4575 * C823 - C4579 * C815 + C47358 * C825 - C4580 * C816) *
                C4582 +
            (C4575 * C830 - C4579 * C824 + C47358 * C831 - C4580 * C826) *
                C47389) *
               C47294 * C47178) *
              C47073 * C47375)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C4575 * C124 - C4579 * C117 + C47358 * C125 - C4580 * C118) *
                C4581 +
            (C4575 * C138 - C4579 * C127 + C47358 * C139 - C4580 * C128) *
                C4577 +
            (C4730 - C4731 + C4732 - C4733) * C4582 +
            (C4734 - C4735 + C4736 - C4737) * C47389) *
               C47294 * C47418 +
           ((C4579 * C414 - C4575 * C424 + C4580 * C415 - C47358 * C425) *
                C4581 +
            (C4579 * C427 - C4575 * C444 + C4580 * C428 - C47358 * C445) *
                C4577 +
            (C5386 - C5387 + C5388 - C5389) * C4582 +
            (C5390 - C5391 + C5392 - C5393) * C47389) *
               C47294 * C47415 +
           ((C4575 * C430 - C4579 * C417 + C47358 * C431 - C4580 * C418) *
                C4581 +
            (C4575 * C447 - C4579 * C433 + C47358 * C448 - C4580 * C434) *
                C4577 +
            (C5816 - C5817 + C5818 - C5819) * C4582 +
            (C5820 - C5821 + C5822 - C5823) * C47389) *
               C47294 * C47406 +
           ((C4579 * C1844 - C4575 * C1850 + C4580 * C1845 - C47358 * C1851) *
                C4581 +
            (C4579 * C1853 - C4575 * C1862 + C4580 * C1854 - C47358 * C1863) *
                C4577 +
            (C7178 - C7179 + C7180 - C7181) * C4582 +
            (C7182 - C7183 + C7184 - C7185) * C47389) *
               C47294 * C47387) *
              C47073 * C2440 +
          (((C4579 * C118 - C4575 * C125 + C4580 * C119 - C47358 * C126) *
                C4581 +
            (C4579 * C128 - C4575 * C139 + C4580 * C129 - C47358 * C140) *
                C4577 +
            (C4746 - C4747 + C4748 - C4749) * C4582 +
            (C4750 - C4751 + C4752 - C4753) * C47389) *
               C47294 * C47418 +
           ((C4575 * C425 - C4579 * C415 + C47358 * C426 - C4580 * C416) *
                C4581 +
            (C4575 * C445 - C4579 * C428 + C47358 * C446 - C4580 * C429) *
                C4577 +
            (C5394 - C5395 + C5396 - C5397) * C4582 +
            (C5398 - C5399 + C5400 - C5401) * C47389) *
               C47294 * C47415 +
           ((C4579 * C418 - C4575 * C431 + C4580 * C419 - C47358 * C432) *
                C4581 +
            (C4579 * C434 - C4575 * C448 + C4580 * C435 - C47358 * C449) *
                C4577 +
            (C6902 - C6903 + C6904 - C6905) * C4582 +
            (C6906 - C6907 + C6908 - C6909) * C47389) *
               C47294 * C47406 +
           ((C4575 * C1851 - C4579 * C1845 + C47358 * C1852 - C4580 * C1846) *
                C4581 +
            (C4575 * C1863 - C4579 * C1854 + C47358 * C1864 - C4580 * C1855) *
                C4577 +
            (C4575 * C2226 - C4579 * C2223 + C47358 * C2227 - C4580 * C2224) *
                C4582 +
            (C4575 * C2232 - C4579 * C2229 + C47358 * C2233 - C4580 * C2230) *
                C47389) *
               C47294 * C47387) *
              C47073 * C47056)) /
            (p * q * std::sqrt(p + q));
    d2ee[43] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C4575 * C124 - C4579 * C117 + C47358 * C125 - C4580 * C118) *
                C4581 +
            (C4575 * C138 - C4579 * C127 + C47358 * C139 - C4580 * C128) *
                C4577 +
            (C4730 - C4731 + C4732 - C4733) * C4582 +
            (C4734 - C4735 + C4736 - C4737) * C47389) *
               C47294 * C47174 +
           ((C4579 * C414 - C4575 * C424 + C4580 * C415 - C47358 * C425) *
                C4581 +
            (C4579 * C427 - C4575 * C444 + C4580 * C428 - C47358 * C445) *
                C4577 +
            (C5386 - C5387 + C5388 - C5389) * C4582 +
            (C5390 - C5391 + C5392 - C5393) * C47389) *
               C47294 * C47181 +
           ((C4575 * C430 - C4579 * C417 + C47358 * C431 - C4580 * C418) *
                C4581 +
            (C4575 * C447 - C4579 * C433 + C47358 * C448 - C4580 * C434) *
                C4577 +
            (C5816 - C5817 + C5818 - C5819) * C4582 +
            (C5820 - C5821 + C5822 - C5823) * C47389) *
               C47294 * C3602) *
              C47073 * C47050 +
          (((C4579 * C118 - C4575 * C125 + C4580 * C119 - C47358 * C126) *
                C4581 +
            (C4579 * C128 - C4575 * C139 + C4580 * C129 - C47358 * C140) *
                C4577 +
            (C4746 - C4747 + C4748 - C4749) * C4582 +
            (C4750 - C4751 + C4752 - C4753) * C47389) *
               C47294 * C47174 +
           ((C4575 * C425 - C4579 * C415 + C47358 * C426 - C4580 * C416) *
                C4581 +
            (C4575 * C445 - C4579 * C428 + C47358 * C446 - C4580 * C429) *
                C4577 +
            (C5394 - C5395 + C5396 - C5397) * C4582 +
            (C5398 - C5399 + C5400 - C5401) * C47389) *
               C47294 * C47181 +
           ((C4579 * C418 - C4575 * C431 + C4580 * C419 - C47358 * C432) *
                C4581 +
            (C4579 * C434 - C4575 * C448 + C4580 * C435 - C47358 * C449) *
                C4577 +
            (C6902 - C6903 + C6904 - C6905) * C4582 +
            (C6906 - C6907 + C6908 - C6909) * C47389) *
               C47294 * C3602) *
              C47073 * C47059 +
          (((C4575 * C126 - C4579 * C119 + C47358 * C130 - C4580 * C120) *
                C4581 +
            (C4575 * C140 - C4579 * C129 + C47358 * C141 - C4580 * C131) *
                C4577 +
            (C4762 - C4763 + C4764 - C4765) * C4582 +
            (C4766 - C4767 + C4768 - C4769) * C47389) *
               C47294 * C47174 +
           ((C4579 * C416 - C4575 * C426 + C4580 * C420 - C47358 * C436) *
                C4581 +
            (C4579 * C429 - C4575 * C446 + C4580 * C437 - C47358 * C450) *
                C4577 +
            (C5402 - C5403 + C5404 - C5405) * C4582 +
            (C5406 - C5407 + C5408 - C5409) * C47389) *
               C47294 * C47181 +
           ((C4575 * C432 - C4579 * C419 + C47358 * C438 - C4580 * C421) *
                C4581 +
            (C4575 * C449 - C4579 * C435 + C47358 * C451 - C4580 * C439) *
                C4577 +
            (C4575 * C1161 - C4579 * C1152 + C47358 * C2015 - C4580 * C2014) *
                C4582 +
            (C4575 * C1179 - C4579 * C1164 + C47358 * C2017 - C4580 * C2016) *
                C47389) *
               C47294 * C3602) *
              C47073 * C2703)) /
        (p * q * std::sqrt(p + q));
    d2ee[44] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C4575 * C124 - C4579 * C117 + C47358 * C125 - C4580 * C118) *
                C4581 +
            (C4575 * C138 - C4579 * C127 + C47358 * C139 - C4580 * C128) *
                C4577 +
            (C4730 - C4731 + C4732 - C4733) * C4582 +
            (C4734 - C4735 + C4736 - C4737) * C47389) *
               C47294 * C3094 +
           ((C4579 * C414 - C4575 * C424 + C4580 * C415 - C47358 * C425) *
                C4581 +
            (C4579 * C427 - C4575 * C444 + C4580 * C428 - C47358 * C445) *
                C4577 +
            (C5386 - C5387 + C5388 - C5389) * C4582 +
            (C5390 - C5391 + C5392 - C5393) * C47389) *
               C47294 * C47178) *
              C47073 * C47416 +
          (((C4579 * C118 - C4575 * C125 + C4580 * C119 - C47358 * C126) *
                C4581 +
            (C4579 * C128 - C4575 * C139 + C4580 * C129 - C47358 * C140) *
                C4577 +
            (C4746 - C4747 + C4748 - C4749) * C4582 +
            (C4750 - C4751 + C4752 - C4753) * C47389) *
               C47294 * C3094 +
           ((C4575 * C425 - C4579 * C415 + C47358 * C426 - C4580 * C416) *
                C4581 +
            (C4575 * C445 - C4579 * C428 + C47358 * C446 - C4580 * C429) *
                C4577 +
            (C5394 - C5395 + C5396 - C5397) * C4582 +
            (C5398 - C5399 + C5400 - C5401) * C47389) *
               C47294 * C47178) *
              C47073 * C47409 +
          (((C4575 * C126 - C4579 * C119 + C47358 * C130 - C4580 * C120) *
                C4581 +
            (C4575 * C140 - C4579 * C129 + C47358 * C141 - C4580 * C131) *
                C4577 +
            (C4762 - C4763 + C4764 - C4765) * C4582 +
            (C4766 - C4767 + C4768 - C4769) * C47389) *
               C47294 * C3094 +
           ((C4579 * C416 - C4575 * C426 + C4580 * C420 - C47358 * C436) *
                C4581 +
            (C4579 * C429 - C4575 * C446 + C4580 * C437 - C47358 * C450) *
                C4577 +
            (C5402 - C5403 + C5404 - C5405) * C4582 +
            (C5406 - C5407 + C5408 - C5409) * C47389) *
               C47294 * C47178) *
              C47073 * C47396 +
          (((C4579 * C120 - C4575 * C130 + C4580 * C121 - C47358 * C132) *
                C4581 +
            (C4579 * C131 - C4575 * C141 + C4580 * C133 - C47358 * C142) *
                C4577 +
            (C5054 - C5055 + C5056 - C5057) * C4582 +
            (C5058 - C5059 + C5060 - C5061) * C47389) *
               C47294 * C3094 +
           ((C4575 * C436 - C4579 * C420 + C47358 * C440 - C4580 * C422) *
                C4581 +
            (C4575 * C450 - C4579 * C437 + C47358 * C452 - C4580 * C441) *
                C4577 +
            (C4575 * C823 - C4579 * C815 + C47358 * C825 - C4580 * C816) *
                C4582 +
            (C4575 * C830 - C4579 * C824 + C47358 * C831 - C4580 * C826) *
                C47389) *
               C47294 * C47178) *
              C47073 * C47375)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C4575 * C124 - C4579 * C117 + C47358 * C125 - C4580 * C118) *
                 C4581 +
             (C4575 * C138 - C4579 * C127 + C47358 * C139 - C4580 * C128) *
                 C4577 +
             (C4730 - C4731 + C4732 - C4733) * C4582 +
             (C4734 - C4735 + C4736 - C4737) * C47389) *
                C47294 * C3094 +
            ((C4579 * C414 - C4575 * C424 + C4580 * C415 - C47358 * C425) *
                 C4581 +
             (C4579 * C427 - C4575 * C444 + C4580 * C428 - C47358 * C445) *
                 C4577 +
             (C5386 - C5387 + C5388 - C5389) * C4582 +
             (C5390 - C5391 + C5392 - C5393) * C47389) *
                C47294 * C47178) *
               C47410 +
           (((C4731 - C4730 + C4733 - C4732) * C4581 +
             (C4735 - C4734 + C4737 - C4736) * C4577 +
             (C4738 - C4739 + C4740 - C4741) * C4582 +
             (C4742 - C4743 + C4744 - C4745) * C47389) *
                C47294 * C3094 +
            ((C5387 - C5386 + C5389 - C5388) * C4581 +
             (C5391 - C5390 + C5393 - C5392) * C4577 +
             (C5824 - C5825 + C5826 - C5827) * C4582 +
             (C5828 - C5829 + C5830 - C5831) * C47389) *
                C47294 * C47178) *
               C47398 +
           (((C4739 - C4738 + C4741 - C4740) * C4581 +
             (C4743 - C4742 + C4745 - C4744) * C4577 +
             (C5646 - C5647 + C5648 - C5649) * C4582 +
             (C5650 - C5651 + C5652 - C5653) * C47389) *
                C47294 * C3094 +
            ((C5825 - C5824 + C5827 - C5826) * C4581 +
             (C5829 - C5828 + C5831 - C5830) * C4577 +
             (C6318 - C6319 + C6320 - C6321) * C4582 +
             (C6322 - C6323 + C6324 - C6325) * C47389) *
                C47294 * C47178) *
               C47371) *
              C2440 +
          ((((C4579 * C118 - C4575 * C125 + C4580 * C119 - C47358 * C126) *
                 C4581 +
             (C4579 * C128 - C4575 * C139 + C4580 * C129 - C47358 * C140) *
                 C4577 +
             (C4746 - C4747 + C4748 - C4749) * C4582 +
             (C4750 - C4751 + C4752 - C4753) * C47389) *
                C47294 * C3094 +
            ((C4575 * C425 - C4579 * C415 + C47358 * C426 - C4580 * C416) *
                 C4581 +
             (C4575 * C445 - C4579 * C428 + C47358 * C446 - C4580 * C429) *
                 C4577 +
             (C5394 - C5395 + C5396 - C5397) * C4582 +
             (C5398 - C5399 + C5400 - C5401) * C47389) *
                C47294 * C47178) *
               C47410 +
           (((C4747 - C4746 + C4749 - C4748) * C4581 +
             (C4751 - C4750 + C4753 - C4752) * C4577 +
             (C4754 - C4755 + C4756 - C4757) * C4582 +
             (C4758 - C4759 + C4760 - C4761) * C47389) *
                C47294 * C3094 +
            ((C5395 - C5394 + C5397 - C5396) * C4581 +
             (C5399 - C5398 + C5401 - C5400) * C4577 +
             (C6172 - C6173 + C6174 - C6175) * C4582 +
             (C6176 - C6177 + C6178 - C6179) * C47389) *
                C47294 * C47178) *
               C47398 +
           (((C4755 - C4754 + C4757 - C4756) * C4581 +
             (C4759 - C4758 + C4761 - C4760) * C4577 +
             (C5970 - C5971 + C5972 - C5973) * C4582 +
             (C5974 - C5975 + C5976 - C5977) * C47389) *
                C47294 * C3094 +
            ((C6173 - C6172 + C6175 - C6174) * C4581 +
             (C6177 - C6176 + C6179 - C6178) * C4577 +
             (C4575 * C1546 - C4579 * C1543 + C47358 * C1547 - C4580 * C1544) *
                 C4582 +
             (C4575 * C1552 - C4579 * C1549 + C47358 * C1553 - C4580 * C1550) *
                 C47389) *
                C47294 * C47178) *
               C47371) *
              C47056)) /
            (p * q * std::sqrt(p + q));
    d2ee[45] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C4575 * C124 - C4579 * C117 + C47358 * C125 - C4580 * C118) *
                C4581 +
            (C4575 * C138 - C4579 * C127 + C47358 * C139 - C4580 * C128) *
                C4577 +
            (C4730 - C4731 + C4732 - C4733) * C4582 +
            (C4734 - C4735 + C4736 - C4737) * C47389) *
               C47294 * C47091 * C47339 +
           ((C4731 - C4730 + C4733 - C4732) * C4581 +
            (C4735 - C4734 + C4737 - C4736) * C4577 +
            (C4738 - C4739 + C4740 - C4741) * C4582 +
            (C4742 - C4743 + C4744 - C4745) * C47389) *
               C47294 * C47091 * C47136) *
              C554 +
          (((C4579 * C118 - C4575 * C125 + C4580 * C119 - C47358 * C126) *
                C4581 +
            (C4579 * C128 - C4575 * C139 + C4580 * C129 - C47358 * C140) *
                C4577 +
            (C4746 - C4747 + C4748 - C4749) * C4582 +
            (C4750 - C4751 + C4752 - C4753) * C47389) *
               C47294 * C47091 * C47339 +
           ((C4747 - C4746 + C4749 - C4748) * C4581 +
            (C4751 - C4750 + C4753 - C4752) * C4577 +
            (C4754 - C4755 + C4756 - C4757) * C4582 +
            (C4758 - C4759 + C4760 - C4761) * C47389) *
               C47294 * C47091 * C47136) *
              C555 +
          (((C4575 * C126 - C4579 * C119 + C47358 * C130 - C4580 * C120) *
                C4581 +
            (C4575 * C140 - C4579 * C129 + C47358 * C141 - C4580 * C131) *
                C4577 +
            (C4762 - C4763 + C4764 - C4765) * C4582 +
            (C4766 - C4767 + C4768 - C4769) * C47389) *
               C47294 * C47091 * C47339 +
           ((C4763 - C4762 + C4765 - C4764) * C4581 +
            (C4767 - C4766 + C4769 - C4768) * C4577 +
            (C4770 - C4771 + C4772 - C4773) * C4582 +
            (C4774 - C4775 + C4776 - C4777) * C47389) *
               C47294 * C47091 * C47136) *
              C556 +
          (((C4579 * C120 - C4575 * C130 + C4580 * C121 - C47358 * C132) *
                C4581 +
            (C4579 * C131 - C4575 * C141 + C4580 * C133 - C47358 * C142) *
                C4577 +
            (C5054 - C5055 + C5056 - C5057) * C4582 +
            (C5058 - C5059 + C5060 - C5061) * C47389) *
               C47294 * C47091 * C47339 +
           ((C5055 - C5054 + C5057 - C5056) * C4581 +
            (C5059 - C5058 + C5061 - C5060) * C4577 +
            (C4575 * C285 - C4579 * C268 + C47358 * C289 - C4580 * C270) *
                C4582 +
            (C4575 * C298 - C4579 * C286 + C47358 * C300 - C4580 * C290) *
                C47389) *
               C47294 * C47091 * C47136) *
              C47375)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C4575 * C124 - C4579 * C117 + C47358 * C125 - C4580 * C118) *
                C4581 +
            (C4575 * C138 - C4579 * C127 + C47358 * C139 - C4580 * C128) *
                C4577 +
            (C4730 - C4731 + C4732 - C4733) * C4582 +
            (C4734 - C4735 + C4736 - C4737) * C47389) *
               C47294 * C47091 * C1284 +
           ((C4731 - C4730 + C4733 - C4732) * C4581 +
            (C4735 - C4734 + C4737 - C4736) * C4577 +
            (C4738 - C4739 + C4740 - C4741) * C4582 +
            (C4742 - C4743 + C4744 - C4745) * C47389) *
               C47294 * C47091 * C1285 +
           ((C4739 - C4738 + C4741 - C4740) * C4581 +
            (C4743 - C4742 + C4745 - C4744) * C4577 +
            (C5646 - C5647 + C5648 - C5649) * C4582 +
            (C5650 - C5651 + C5652 - C5653) * C47389) *
               C47294 * C47091 * C1286 +
           ((C5647 - C5646 + C5649 - C5648) * C4581 +
            (C5651 - C5650 + C5653 - C5652) * C4577 +
            (C5654 - C5655 + C5656 - C5657) * C4582 +
            (C5658 - C5659 + C5660 - C5661) * C47389) *
               C47294 * C47091 * C47381) *
              C47325 +
          (((C4579 * C118 - C4575 * C125 + C4580 * C119 - C47358 * C126) *
                C4581 +
            (C4579 * C128 - C4575 * C139 + C4580 * C129 - C47358 * C140) *
                C4577 +
            (C4746 - C4747 + C4748 - C4749) * C4582 +
            (C4750 - C4751 + C4752 - C4753) * C47389) *
               C47294 * C47091 * C1284 +
           ((C4747 - C4746 + C4749 - C4748) * C4581 +
            (C4751 - C4750 + C4753 - C4752) * C4577 +
            (C4754 - C4755 + C4756 - C4757) * C4582 +
            (C4758 - C4759 + C4760 - C4761) * C47389) *
               C47294 * C47091 * C1285 +
           ((C4755 - C4754 + C4757 - C4756) * C4581 +
            (C4759 - C4758 + C4761 - C4760) * C4577 +
            (C5970 - C5971 + C5972 - C5973) * C4582 +
            (C5974 - C5975 + C5976 - C5977) * C47389) *
               C47294 * C47091 * C1286 +
           ((C5971 - C5970 + C5973 - C5972) * C4581 +
            (C5975 - C5974 + C5977 - C5976) * C4577 +
            (C4575 * C1029 - C4579 * C1020 + C47358 * C1030 - C4580 * C1021) *
                C4582 +
            (C4575 * C1038 - C4579 * C1032 + C47358 * C1039 - C4580 * C1033) *
                C47389) *
               C47294 * C47091 * C47381) *
              C47056)) /
            (p * q * std::sqrt(p + q));
    d2ee[46] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C4575 * C124 - C4579 * C117 + C47358 * C125 - C4580 * C118) *
                 C4581 +
             (C4575 * C138 - C4579 * C127 + C47358 * C139 - C4580 * C128) *
                 C4577 +
             (C4730 - C4731 + C4732 - C4733) * C4582 +
             (C4734 - C4735 + C4736 - C4737) * C47389) *
                C47294 * C47340 +
            ((C4579 * C414 - C4575 * C424 + C4580 * C415 - C47358 * C425) *
                 C4581 +
             (C4579 * C427 - C4575 * C444 + C4580 * C428 - C47358 * C445) *
                 C4577 +
             (C5386 - C5387 + C5388 - C5389) * C4582 +
             (C5390 - C5391 + C5392 - C5393) * C47389) *
                C47294 * C47178) *
               C47339 +
           (((C4731 - C4730 + C4733 - C4732) * C4581 +
             (C4735 - C4734 + C4737 - C4736) * C4577 +
             (C4738 - C4739 + C4740 - C4741) * C4582 +
             (C4742 - C4743 + C4744 - C4745) * C47389) *
                C47294 * C47340 +
            ((C5387 - C5386 + C5389 - C5388) * C4581 +
             (C5391 - C5390 + C5393 - C5392) * C4577 +
             (C4575 * C1165 - C4579 * C1153 + C47358 * C1166 - C4580 * C1154) *
                 C4582 +
             (C4575 * C1180 - C4579 * C1168 + C47358 * C1181 - C4580 * C1169) *
                 C47389) *
                C47294 * C47178) *
               C47136) *
              C258 +
          ((((C4579 * C118 - C4575 * C125 + C4580 * C119 - C47358 * C126) *
                 C4581 +
             (C4579 * C128 - C4575 * C139 + C4580 * C129 - C47358 * C140) *
                 C4577 +
             (C4746 - C4747 + C4748 - C4749) * C4582 +
             (C4750 - C4751 + C4752 - C4753) * C47389) *
                C47294 * C47340 +
            ((C4575 * C425 - C4579 * C415 + C47358 * C426 - C4580 * C416) *
                 C4581 +
             (C4575 * C445 - C4579 * C428 + C47358 * C446 - C4580 * C429) *
                 C4577 +
             (C5394 - C5395 + C5396 - C5397) * C4582 +
             (C5398 - C5399 + C5400 - C5401) * C47389) *
                C47294 * C47178) *
               C47339 +
           (((C4747 - C4746 + C4749 - C4748) * C4581 +
             (C4751 - C4750 + C4753 - C4752) * C4577 +
             (C4754 - C4755 + C4756 - C4757) * C4582 +
             (C4758 - C4759 + C4760 - C4761) * C47389) *
                C47294 * C47340 +
            ((C5395 - C5394 + C5397 - C5396) * C4581 +
             (C5399 - C5398 + C5401 - C5400) * C4577 +
             (C4579 * C1154 - C4575 * C1166 + C4580 * C1155 - C47358 * C1167) *
                 C4582 +
             (C4579 * C1169 - C4575 * C1181 + C4580 * C1170 - C47358 * C1182) *
                 C47389) *
                C47294 * C47178) *
               C47136) *
              C259 +
          ((((C4575 * C126 - C4579 * C119 + C47358 * C130 - C4580 * C120) *
                 C4581 +
             (C4575 * C140 - C4579 * C129 + C47358 * C141 - C4580 * C131) *
                 C4577 +
             (C4762 - C4763 + C4764 - C4765) * C4582 +
             (C4766 - C4767 + C4768 - C4769) * C47389) *
                C47294 * C47340 +
            ((C4579 * C416 - C4575 * C426 + C4580 * C420 - C47358 * C436) *
                 C4581 +
             (C4579 * C429 - C4575 * C446 + C4580 * C437 - C47358 * C450) *
                 C4577 +
             (C5402 - C5403 + C5404 - C5405) * C4582 +
             (C5406 - C5407 + C5408 - C5409) * C47389) *
                C47294 * C47178) *
               C47339 +
           (((C4763 - C4762 + C4765 - C4764) * C4581 +
             (C4767 - C4766 + C4769 - C4768) * C4577 +
             (C4770 - C4771 + C4772 - C4773) * C4582 +
             (C4774 - C4775 + C4776 - C4777) * C47389) *
                C47294 * C47340 +
            ((C5403 - C5402 + C5405 - C5404) * C4581 +
             (C5407 - C5406 + C5409 - C5408) * C4577 +
             (C4575 * C1167 - C4579 * C1155 + C47358 * C1441 - C4580 * C1440) *
                 C4582 +
             (C4575 * C1182 - C4579 * C1170 + C47358 * C1443 - C4580 * C1442) *
                 C47389) *
                C47294 * C47178) *
               C47136) *
              C47365)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C4575 * C124 - C4579 * C117 + C47358 * C125 - C4580 * C118) *
                C4581 +
            (C4575 * C138 - C4579 * C127 + C47358 * C139 - C4580 * C128) *
                C4577 +
            (C4730 - C4731 + C4732 - C4733) * C4582 +
            (C4734 - C4735 + C4736 - C4737) * C47389) *
               C47294 * C47340 +
           ((C4579 * C414 - C4575 * C424 + C4580 * C415 - C47358 * C425) *
                C4581 +
            (C4579 * C427 - C4575 * C444 + C4580 * C428 - C47358 * C445) *
                C4577 +
            (C5386 - C5387 + C5388 - C5389) * C4582 +
            (C5390 - C5391 + C5392 - C5393) * C47389) *
               C47294 * C47178) *
              C1284 +
          (((C4731 - C4730 + C4733 - C4732) * C4581 +
            (C4735 - C4734 + C4737 - C4736) * C4577 +
            (C4738 - C4739 + C4740 - C4741) * C4582 +
            (C4742 - C4743 + C4744 - C4745) * C47389) *
               C47294 * C47340 +
           ((C5387 - C5386 + C5389 - C5388) * C4581 +
            (C5391 - C5390 + C5393 - C5392) * C4577 +
            (C5824 - C5825 + C5826 - C5827) * C4582 +
            (C5828 - C5829 + C5830 - C5831) * C47389) *
               C47294 * C47178) *
              C1285 +
          (((C4739 - C4738 + C4741 - C4740) * C4581 +
            (C4743 - C4742 + C4745 - C4744) * C4577 +
            (C5646 - C5647 + C5648 - C5649) * C4582 +
            (C5650 - C5651 + C5652 - C5653) * C47389) *
               C47294 * C47340 +
           ((C5825 - C5824 + C5827 - C5826) * C4581 +
            (C5829 - C5828 + C5831 - C5830) * C4577 +
            (C6318 - C6319 + C6320 - C6321) * C4582 +
            (C6322 - C6323 + C6324 - C6325) * C47389) *
               C47294 * C47178) *
              C1286 +
          (((C5647 - C5646 + C5649 - C5648) * C4581 +
            (C5651 - C5650 + C5653 - C5652) * C4577 +
            (C5654 - C5655 + C5656 - C5657) * C4582 +
            (C5658 - C5659 + C5660 - C5661) * C47389) *
               C47294 * C47340 +
           ((C6319 - C6318 + C6321 - C6320) * C4581 +
            (C6323 - C6322 + C6325 - C6324) * C4577 +
            (C4575 * C6311 - C4579 * C6309 + C47358 * C6312 - C4580 * C6310) *
                C4582 +
            (C4575 * C6315 - C4579 * C6313 + C47358 * C6316 - C4580 * C6314) *
                C47389) *
               C47294 * C47178) *
              C47381) *
         C47045) /
            (p * q * std::sqrt(p + q));
    d2ee[47] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C4575 * C124 - C4579 * C117 + C47358 * C125 - C4580 * C118) *
                C4581 +
            (C4575 * C138 - C4579 * C127 + C47358 * C139 - C4580 * C128) *
                C4577 +
            (C4730 - C4731 + C4732 - C4733) * C4582 +
            (C4734 - C4735 + C4736 - C4737) * C47389) *
               C47294 * C47091 * C47410 +
           ((C4731 - C4730 + C4733 - C4732) * C4581 +
            (C4735 - C4734 + C4737 - C4736) * C4577 +
            (C4738 - C4739 + C4740 - C4741) * C4582 +
            (C4742 - C4743 + C4744 - C4745) * C47389) *
               C47294 * C47091 * C47398 +
           ((C4739 - C4738 + C4741 - C4740) * C4581 +
            (C4743 - C4742 + C4745 - C4744) * C4577 +
            (C4575 * C1022 - C4579 * C1016 + C47358 * C1023 - C4580 * C1017) *
                C4582 +
            (C4575 * C1034 - C4579 * C1025 + C47358 * C1035 - C4580 * C1026) *
                C47389) *
               C47294 * C47091 * C47371) *
              C258 +
          (((C4579 * C118 - C4575 * C125 + C4580 * C119 - C47358 * C126) *
                C4581 +
            (C4579 * C128 - C4575 * C139 + C4580 * C129 - C47358 * C140) *
                C4577 +
            (C4746 - C4747 + C4748 - C4749) * C4582 +
            (C4750 - C4751 + C4752 - C4753) * C47389) *
               C47294 * C47091 * C47410 +
           ((C4747 - C4746 + C4749 - C4748) * C4581 +
            (C4751 - C4750 + C4753 - C4752) * C4577 +
            (C4754 - C4755 + C4756 - C4757) * C4582 +
            (C4758 - C4759 + C4760 - C4761) * C47389) *
               C47294 * C47091 * C47398 +
           ((C4755 - C4754 + C4757 - C4756) * C4581 +
            (C4759 - C4758 + C4761 - C4760) * C4577 +
            (C4579 * C1017 - C4575 * C1023 + C4580 * C1018 - C47358 * C1024) *
                C4582 +
            (C4579 * C1026 - C4575 * C1035 + C4580 * C1027 - C47358 * C1036) *
                C47389) *
               C47294 * C47091 * C47371) *
              C259 +
          (((C4575 * C126 - C4579 * C119 + C47358 * C130 - C4580 * C120) *
                C4581 +
            (C4575 * C140 - C4579 * C129 + C47358 * C141 - C4580 * C131) *
                C4577 +
            (C4762 - C4763 + C4764 - C4765) * C4582 +
            (C4766 - C4767 + C4768 - C4769) * C47389) *
               C47294 * C47091 * C47410 +
           ((C4763 - C4762 + C4765 - C4764) * C4581 +
            (C4767 - C4766 + C4769 - C4768) * C4577 +
            (C4770 - C4771 + C4772 - C4773) * C4582 +
            (C4774 - C4775 + C4776 - C4777) * C47389) *
               C47294 * C47091 * C47398 +
           ((C4771 - C4770 + C4773 - C4772) * C4581 +
            (C4775 - C4774 + C4777 - C4776) * C4577 +
            (C4575 * C1024 - C4579 * C1018 + C47358 * C1291 - C4580 * C1290) *
                C4582 +
            (C4575 * C1036 - C4579 * C1027 + C47358 * C1293 - C4580 * C1292) *
                C47389) *
               C47294 * C47091 * C47371) *
              C47365)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C4575 * C124 - C4579 * C117 + C47358 * C125 - C4580 * C118) *
               C4581 +
           (C4575 * C138 - C4579 * C127 + C47358 * C139 - C4580 * C128) *
               C4577 +
           (C4575 * C271 - C4579 * C261 + C47358 * C272 - C4580 * C262) *
               C4582 +
           (C4575 * C291 - C4579 * C274 + C47358 * C292 - C4580 * C275) *
               C47389) *
              C47294 * C47091 * C47073 * C108 +
          ((C4579 * C118 - C4575 * C125 + C4580 * C119 - C47358 * C126) *
               C4581 +
           (C4579 * C128 - C4575 * C139 + C4580 * C129 - C47358 * C140) *
               C4577 +
           (C4579 * C262 - C4575 * C272 + C4580 * C263 - C47358 * C273) *
               C4582 +
           (C4579 * C275 - C4575 * C292 + C4580 * C276 - C47358 * C293) *
               C47389) *
              C47294 * C47091 * C47073 * C109 +
          ((C4575 * C126 - C4579 * C119 + C47358 * C130 - C4580 * C120) *
               C4581 +
           (C4575 * C140 - C4579 * C129 + C47358 * C141 - C4580 * C131) *
               C4577 +
           (C4575 * C273 - C4579 * C263 + C47358 * C283 - C4580 * C267) *
               C4582 +
           (C4575 * C293 - C4579 * C276 + C47358 * C297 - C4580 * C284) *
               C47389) *
              C47294 * C47091 * C47073 * C110 +
          ((C4579 * C120 - C4575 * C130 + C4580 * C121 - C47358 * C132) *
               C4581 +
           (C4579 * C131 - C4575 * C141 + C4580 * C133 - C47358 * C142) *
               C4577 +
           (C4579 * C267 - C4575 * C283 + C4580 * C269 - C47358 * C287) *
               C4582 +
           (C4579 * C284 - C4575 * C297 + C4580 * C288 - C47358 * C299) *
               C47389) *
              C47294 * C47091 * C47073 * C111 +
          ((C4575 * C132 - C4579 * C121 + C47358 * C134 - C4580 * C122) *
               C4581 +
           (C4575 * C142 - C4579 * C133 + C47358 * C143 - C4580 * C135) *
               C4577 +
           (C4575 * C287 - C4579 * C269 + C47358 * C559 - C4580 * C558) *
               C4582 +
           (C4575 * C299 - C4579 * C288 + C47358 * C561 - C4580 * C560) *
               C47389) *
              C47294 * C47091 * C47073 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4575 * C124 - C4579 * C117 + C47358 * C125 - C4580 * C118) *
                C4581 +
            (C4575 * C138 - C4579 * C127 + C47358 * C139 - C4580 * C128) *
                C4577 +
            (C4730 - C4731 + C4732 - C4733) * C4582 +
            (C4734 - C4735 + C4736 - C4737) * C47389) *
               C47294 * C47411 +
           ((C4579 * C414 - C4575 * C424 + C4580 * C415 - C47358 * C425) *
                C4581 +
            (C4579 * C427 - C4575 * C444 + C4580 * C428 - C47358 * C445) *
                C4577 +
            (C4579 * C812 - C4575 * C817 + C4580 * C813 - C47358 * C818) *
                C4582 +
            (C4579 * C820 - C4575 * C827 + C4580 * C821 - C47358 * C828) *
                C47389) *
               C47294 * C47400 +
           ((C4575 * C430 - C4579 * C417 + C47358 * C431 - C4580 * C418) *
                C4581 +
            (C4575 * C447 - C4579 * C433 + C47358 * C448 - C4580 * C434) *
                C4577 +
            (C4575 * C1159 - C4579 * C1150 + C47358 * C1160 - C4580 * C1151) *
                C4582 +
            (C4575 * C1177 - C4579 * C1162 + C47358 * C1178 - C4580 * C1163) *
                C47389) *
               C47294 * C47374) *
              C47073 * C258 +
          (((C4579 * C118 - C4575 * C125 + C4580 * C119 - C47358 * C126) *
                C4581 +
            (C4579 * C128 - C4575 * C139 + C4580 * C129 - C47358 * C140) *
                C4577 +
            (C4746 - C4747 + C4748 - C4749) * C4582 +
            (C4750 - C4751 + C4752 - C4753) * C47389) *
               C47294 * C47411 +
           ((C4575 * C425 - C4579 * C415 + C47358 * C426 - C4580 * C416) *
                C4581 +
            (C4575 * C445 - C4579 * C428 + C47358 * C446 - C4580 * C429) *
                C4577 +
            (C4575 * C818 - C4579 * C813 + C47358 * C819 - C4580 * C814) *
                C4582 +
            (C4575 * C828 - C4579 * C821 + C47358 * C829 - C4580 * C822) *
                C47389) *
               C47294 * C47400 +
           ((C4579 * C418 - C4575 * C431 + C4580 * C419 - C47358 * C432) *
                C4581 +
            (C4579 * C434 - C4575 * C448 + C4580 * C435 - C47358 * C449) *
                C4577 +
            (C4579 * C1151 - C4575 * C1160 + C4580 * C1152 - C47358 * C1161) *
                C4582 +
            (C4579 * C1163 - C4575 * C1178 + C4580 * C1164 - C47358 * C1179) *
                C47389) *
               C47294 * C47374) *
              C47073 * C259 +
          (((C4575 * C126 - C4579 * C119 + C47358 * C130 - C4580 * C120) *
                C4581 +
            (C4575 * C140 - C4579 * C129 + C47358 * C141 - C4580 * C131) *
                C4577 +
            (C4762 - C4763 + C4764 - C4765) * C4582 +
            (C4766 - C4767 + C4768 - C4769) * C47389) *
               C47294 * C47411 +
           ((C4579 * C416 - C4575 * C426 + C4580 * C420 - C47358 * C436) *
                C4581 +
            (C4579 * C429 - C4575 * C446 + C4580 * C437 - C47358 * C450) *
                C4577 +
            (C4579 * C814 - C4575 * C819 + C4580 * C815 - C47358 * C823) *
                C4582 +
            (C4579 * C822 - C4575 * C829 + C4580 * C824 - C47358 * C830) *
                C47389) *
               C47294 * C47400 +
           ((C4575 * C432 - C4579 * C419 + C47358 * C438 - C4580 * C421) *
                C4581 +
            (C4575 * C449 - C4579 * C435 + C47358 * C451 - C4580 * C439) *
                C4577 +
            (C4575 * C1161 - C4579 * C1152 + C47358 * C2015 - C4580 * C2014) *
                C4582 +
            (C4575 * C1179 - C4579 * C1164 + C47358 * C2017 - C4580 * C2016) *
                C47389) *
               C47294 * C47374) *
              C47073 * C47365)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C4575 * C124 - C4579 * C117 + C47358 * C125 - C4580 * C118) *
                C4581 +
            (C4575 * C138 - C4579 * C127 + C47358 * C139 - C4580 * C128) *
                C4577 +
            (C4730 - C4731 + C4732 - C4733) * C4582 +
            (C4734 - C4735 + C4736 - C4737) * C47389) *
               C47294 * C47091 * C942 +
           ((C4731 - C4730 + C4733 - C4732) * C4581 +
            (C4735 - C4734 + C4737 - C4736) * C4577 +
            (C4738 - C4739 + C4740 - C4741) * C4582 +
            (C4742 - C4743 + C4744 - C4745) * C47389) *
               C47294 * C47091 * C943 +
           ((C4739 - C4738 + C4741 - C4740) * C4581 +
            (C4743 - C4742 + C4745 - C4744) * C4577 +
            (C4575 * C1022 - C4579 * C1016 + C47358 * C1023 - C4580 * C1017) *
                C4582 +
            (C4575 * C1034 - C4579 * C1025 + C47358 * C1035 - C4580 * C1026) *
                C47389) *
               C47294 * C47091 * C47371) *
              C47407 +
          (((C4579 * C118 - C4575 * C125 + C4580 * C119 - C47358 * C126) *
                C4581 +
            (C4579 * C128 - C4575 * C139 + C4580 * C129 - C47358 * C140) *
                C4577 +
            (C4746 - C4747 + C4748 - C4749) * C4582 +
            (C4750 - C4751 + C4752 - C4753) * C47389) *
               C47294 * C47091 * C942 +
           ((C4747 - C4746 + C4749 - C4748) * C4581 +
            (C4751 - C4750 + C4753 - C4752) * C4577 +
            (C4754 - C4755 + C4756 - C4757) * C4582 +
            (C4758 - C4759 + C4760 - C4761) * C47389) *
               C47294 * C47091 * C943 +
           ((C4755 - C4754 + C4757 - C4756) * C4581 +
            (C4759 - C4758 + C4761 - C4760) * C4577 +
            (C4579 * C1017 - C4575 * C1023 + C4580 * C1018 - C47358 * C1024) *
                C4582 +
            (C4579 * C1026 - C4575 * C1035 + C4580 * C1027 - C47358 * C1036) *
                C47389) *
               C47294 * C47091 * C47371) *
              C47394 +
          (((C4575 * C126 - C4579 * C119 + C47358 * C130 - C4580 * C120) *
                C4581 +
            (C4575 * C140 - C4579 * C129 + C47358 * C141 - C4580 * C131) *
                C4577 +
            (C4762 - C4763 + C4764 - C4765) * C4582 +
            (C4766 - C4767 + C4768 - C4769) * C47389) *
               C47294 * C47091 * C942 +
           ((C4763 - C4762 + C4765 - C4764) * C4581 +
            (C4767 - C4766 + C4769 - C4768) * C4577 +
            (C4770 - C4771 + C4772 - C4773) * C4582 +
            (C4774 - C4775 + C4776 - C4777) * C47389) *
               C47294 * C47091 * C943 +
           ((C4771 - C4770 + C4773 - C4772) * C4581 +
            (C4775 - C4774 + C4777 - C4776) * C4577 +
            (C4575 * C1024 - C4579 * C1018 + C47358 * C1291 - C4580 * C1290) *
                C4582 +
            (C4575 * C1036 - C4579 * C1027 + C47358 * C1293 - C4580 * C1292) *
                C47389) *
               C47294 * C47091 * C47371) *
              C47365)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C4575 * C124 - C4579 * C117 + C47358 * C125 - C4580 * C118) *
               C4581 +
           (C4575 * C138 - C4579 * C127 + C47358 * C139 - C4580 * C128) *
               C4577 +
           (C4730 - C4731 + C4732 - C4733) * C4582 +
           (C4734 - C4735 + C4736 - C4737) * C47389) *
              C47294 * C47091 * C1010 +
          ((C4731 - C4730 + C4733 - C4732) * C4581 +
           (C4735 - C4734 + C4737 - C4736) * C4577 +
           (C4738 - C4739 + C4740 - C4741) * C4582 +
           (C4742 - C4743 + C4744 - C4745) * C47389) *
              C47294 * C47091 * C1011 +
          ((C4739 - C4738 + C4741 - C4740) * C4581 +
           (C4743 - C4742 + C4745 - C4744) * C4577 +
           (C5646 - C5647 + C5648 - C5649) * C4582 +
           (C5650 - C5651 + C5652 - C5653) * C47389) *
              C47294 * C47091 * C1012 +
          ((C5647 - C5646 + C5649 - C5648) * C4581 +
           (C5651 - C5650 + C5653 - C5652) * C4577 +
           (C5654 - C5655 + C5656 - C5657) * C4582 +
           (C5658 - C5659 + C5660 - C5661) * C47389) *
              C47294 * C47091 * C1013 +
          ((C5655 - C5654 + C5657 - C5656) * C4581 +
           (C5659 - C5658 + C5661 - C5660) * C4577 +
           (C4575 * C5639 - C4579 * C5637 + C47358 * C5640 - C4580 * C5638) *
               C4582 +
           (C4575 * C5643 - C4579 * C5641 + C47358 * C5644 - C4580 * C5642) *
               C47389) *
              C47294 * C47091 * C1014) *
         C47045) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4575 * C124 - C4579 * C117 + C47358 * C125 - C4580 * C118) *
                C4581 +
            (C4575 * C138 - C4579 * C127 + C47358 * C139 - C4580 * C128) *
                C4577 +
            (C4730 - C4731 + C4732 - C4733) * C4582 +
            (C4734 - C4735 + C4736 - C4737) * C47389) *
               C47294 * C47411 +
           ((C4579 * C414 - C4575 * C424 + C4580 * C415 - C47358 * C425) *
                C4581 +
            (C4579 * C427 - C4575 * C444 + C4580 * C428 - C47358 * C445) *
                C4577 +
            (C5386 - C5387 + C5388 - C5389) * C4582 +
            (C5390 - C5391 + C5392 - C5393) * C47389) *
               C47294 * C47400 +
           ((C4575 * C430 - C4579 * C417 + C47358 * C431 - C4580 * C418) *
                C4581 +
            (C4575 * C447 - C4579 * C433 + C47358 * C448 - C4580 * C434) *
                C4577 +
            (C5816 - C5817 + C5818 - C5819) * C4582 +
            (C5820 - C5821 + C5822 - C5823) * C47389) *
               C47294 * C47374) *
              C942 +
          (((C4731 - C4730 + C4733 - C4732) * C4581 +
            (C4735 - C4734 + C4737 - C4736) * C4577 +
            (C4738 - C4739 + C4740 - C4741) * C4582 +
            (C4742 - C4743 + C4744 - C4745) * C47389) *
               C47294 * C47411 +
           ((C5387 - C5386 + C5389 - C5388) * C4581 +
            (C5391 - C5390 + C5393 - C5392) * C4577 +
            (C5824 - C5825 + C5826 - C5827) * C4582 +
            (C5828 - C5829 + C5830 - C5831) * C47389) *
               C47294 * C47400 +
           ((C5817 - C5816 + C5819 - C5818) * C4581 +
            (C5821 - C5820 + C5823 - C5822) * C4577 +
            (C5832 - C5833 + C5834 - C5835) * C4582 +
            (C5836 - C5837 + C5838 - C5839) * C47389) *
               C47294 * C47374) *
              C943 +
          (((C4739 - C4738 + C4741 - C4740) * C4581 +
            (C4743 - C4742 + C4745 - C4744) * C4577 +
            (C5646 - C5647 + C5648 - C5649) * C4582 +
            (C5650 - C5651 + C5652 - C5653) * C47389) *
               C47294 * C47411 +
           ((C5825 - C5824 + C5827 - C5826) * C4581 +
            (C5829 - C5828 + C5831 - C5830) * C4577 +
            (C4579 * C1542 - C4575 * C1545 + C4580 * C1543 - C47358 * C1546) *
                C4582 +
            (C4579 * C1548 - C4575 * C1551 + C4580 * C1549 - C47358 * C1552) *
                C47389) *
               C47294 * C47400 +
           ((C5833 - C5832 + C5835 - C5834) * C4581 +
            (C5837 - C5836 + C5839 - C5838) * C4577 +
            (C4575 * C5809 - C4579 * C5807 + C47358 * C5810 - C4580 * C5808) *
                C4582 +
            (C4575 * C5813 - C4579 * C5811 + C47358 * C5814 - C4580 * C5812) *
                C47389) *
               C47294 * C47374) *
              C47371) *
         C47045) /
            (p * q * std::sqrt(p + q));
    d2ee[48] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C4575 * C124 - C4579 * C117 + C47358 * C125 - C4580 * C118) *
                C4581 +
            (C4575 * C138 - C4579 * C127 + C47358 * C139 - C4580 * C128) *
                C4577 +
            (C4730 - C4731 + C4732 - C4733) * C4582 +
            (C4734 - C4735 + C4736 - C4737) * C47389) *
               C47294 * C47340 +
           ((C4579 * C414 - C4575 * C424 + C4580 * C415 - C47358 * C425) *
                C4581 +
            (C4579 * C427 - C4575 * C444 + C4580 * C428 - C47358 * C445) *
                C4577 +
            (C4579 * C812 - C4575 * C817 + C4580 * C813 - C47358 * C818) *
                C4582 +
            (C4579 * C820 - C4575 * C827 + C4580 * C821 - C47358 * C828) *
                C47389) *
               C47294 * C47178) *
              C47073 * C554 +
          (((C4579 * C118 - C4575 * C125 + C4580 * C119 - C47358 * C126) *
                C4581 +
            (C4579 * C128 - C4575 * C139 + C4580 * C129 - C47358 * C140) *
                C4577 +
            (C4746 - C4747 + C4748 - C4749) * C4582 +
            (C4750 - C4751 + C4752 - C4753) * C47389) *
               C47294 * C47340 +
           ((C4575 * C425 - C4579 * C415 + C47358 * C426 - C4580 * C416) *
                C4581 +
            (C4575 * C445 - C4579 * C428 + C47358 * C446 - C4580 * C429) *
                C4577 +
            (C4575 * C818 - C4579 * C813 + C47358 * C819 - C4580 * C814) *
                C4582 +
            (C4575 * C828 - C4579 * C821 + C47358 * C829 - C4580 * C822) *
                C47389) *
               C47294 * C47178) *
              C47073 * C555 +
          (((C4575 * C126 - C4579 * C119 + C47358 * C130 - C4580 * C120) *
                C4581 +
            (C4575 * C140 - C4579 * C129 + C47358 * C141 - C4580 * C131) *
                C4577 +
            (C4762 - C4763 + C4764 - C4765) * C4582 +
            (C4766 - C4767 + C4768 - C4769) * C47389) *
               C47294 * C47340 +
           ((C4579 * C416 - C4575 * C426 + C4580 * C420 - C47358 * C436) *
                C4581 +
            (C4579 * C429 - C4575 * C446 + C4580 * C437 - C47358 * C450) *
                C4577 +
            (C4579 * C814 - C4575 * C819 + C4580 * C815 - C47358 * C823) *
                C4582 +
            (C4579 * C822 - C4575 * C829 + C4580 * C824 - C47358 * C830) *
                C47389) *
               C47294 * C47178) *
              C47073 * C556 +
          (((C4579 * C120 - C4575 * C130 + C4580 * C121 - C47358 * C132) *
                C4581 +
            (C4579 * C131 - C4575 * C141 + C4580 * C133 - C47358 * C142) *
                C4577 +
            (C5054 - C5055 + C5056 - C5057) * C4582 +
            (C5058 - C5059 + C5060 - C5061) * C47389) *
               C47294 * C47340 +
           ((C4575 * C436 - C4579 * C420 + C47358 * C440 - C4580 * C422) *
                C4581 +
            (C4575 * C450 - C4579 * C437 + C47358 * C452 - C4580 * C441) *
                C4577 +
            (C4575 * C823 - C4579 * C815 + C47358 * C825 - C4580 * C816) *
                C4582 +
            (C4575 * C830 - C4579 * C824 + C47358 * C831 - C4580 * C826) *
                C47389) *
               C47294 * C47178) *
              C47073 * C47375)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C4575 * C124 - C4579 * C117 + C47358 * C125 - C4580 * C118) *
                 C4581 +
             (C4575 * C138 - C4579 * C127 + C47358 * C139 - C4580 * C128) *
                 C4577 +
             (C4730 - C4731 + C4732 - C4733) * C4582 +
             (C4734 - C4735 + C4736 - C4737) * C47389) *
                C47294 * C47340 +
            ((C4579 * C414 - C4575 * C424 + C4580 * C415 - C47358 * C425) *
                 C4581 +
             (C4579 * C427 - C4575 * C444 + C4580 * C428 - C47358 * C445) *
                 C4577 +
             (C5386 - C5387 + C5388 - C5389) * C4582 +
             (C5390 - C5391 + C5392 - C5393) * C47389) *
                C47294 * C47178) *
               C942 +
           (((C4731 - C4730 + C4733 - C4732) * C4581 +
             (C4735 - C4734 + C4737 - C4736) * C4577 +
             (C4738 - C4739 + C4740 - C4741) * C4582 +
             (C4742 - C4743 + C4744 - C4745) * C47389) *
                C47294 * C47340 +
            ((C5387 - C5386 + C5389 - C5388) * C4581 +
             (C5391 - C5390 + C5393 - C5392) * C4577 +
             (C5824 - C5825 + C5826 - C5827) * C4582 +
             (C5828 - C5829 + C5830 - C5831) * C47389) *
                C47294 * C47178) *
               C943 +
           (((C4739 - C4738 + C4741 - C4740) * C4581 +
             (C4743 - C4742 + C4745 - C4744) * C4577 +
             (C5646 - C5647 + C5648 - C5649) * C4582 +
             (C5650 - C5651 + C5652 - C5653) * C47389) *
                C47294 * C47340 +
            ((C5825 - C5824 + C5827 - C5826) * C4581 +
             (C5829 - C5828 + C5831 - C5830) * C4577 +
             (C4579 * C1542 - C4575 * C1545 + C4580 * C1543 - C47358 * C1546) *
                 C4582 +
             (C4579 * C1548 - C4575 * C1551 + C4580 * C1549 - C47358 * C1552) *
                 C47389) *
                C47294 * C47178) *
               C47371) *
              C47325 +
          ((((C4579 * C118 - C4575 * C125 + C4580 * C119 - C47358 * C126) *
                 C4581 +
             (C4579 * C128 - C4575 * C139 + C4580 * C129 - C47358 * C140) *
                 C4577 +
             (C4746 - C4747 + C4748 - C4749) * C4582 +
             (C4750 - C4751 + C4752 - C4753) * C47389) *
                C47294 * C47340 +
            ((C4575 * C425 - C4579 * C415 + C47358 * C426 - C4580 * C416) *
                 C4581 +
             (C4575 * C445 - C4579 * C428 + C47358 * C446 - C4580 * C429) *
                 C4577 +
             (C5394 - C5395 + C5396 - C5397) * C4582 +
             (C5398 - C5399 + C5400 - C5401) * C47389) *
                C47294 * C47178) *
               C942 +
           (((C4747 - C4746 + C4749 - C4748) * C4581 +
             (C4751 - C4750 + C4753 - C4752) * C4577 +
             (C4754 - C4755 + C4756 - C4757) * C4582 +
             (C4758 - C4759 + C4760 - C4761) * C47389) *
                C47294 * C47340 +
            ((C5395 - C5394 + C5397 - C5396) * C4581 +
             (C5399 - C5398 + C5401 - C5400) * C4577 +
             (C6172 - C6173 + C6174 - C6175) * C4582 +
             (C6176 - C6177 + C6178 - C6179) * C47389) *
                C47294 * C47178) *
               C943 +
           (((C4755 - C4754 + C4757 - C4756) * C4581 +
             (C4759 - C4758 + C4761 - C4760) * C4577 +
             (C5970 - C5971 + C5972 - C5973) * C4582 +
             (C5974 - C5975 + C5976 - C5977) * C47389) *
                C47294 * C47340 +
            ((C6173 - C6172 + C6175 - C6174) * C4581 +
             (C6177 - C6176 + C6179 - C6178) * C4577 +
             (C4575 * C1546 - C4579 * C1543 + C47358 * C1547 - C4580 * C1544) *
                 C4582 +
             (C4575 * C1552 - C4579 * C1549 + C47358 * C1553 - C4580 * C1550) *
                 C47389) *
                C47294 * C47178) *
               C47371) *
              C47056)) /
            (p * q * std::sqrt(p + q));
    d2ee[49] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C4575 * C124 - C4579 * C117 + C47358 * C125 - C4580 * C118) *
               C4581 +
           (C4575 * C138 - C4579 * C127 + C47358 * C139 - C4580 * C128) *
               C4577 +
           (C4575 * C271 - C4579 * C261 + C47358 * C272 - C4580 * C262) *
               C4582 +
           (C4575 * C291 - C4579 * C274 + C47358 * C292 - C4580 * C275) *
               C47389) *
              C47294 * C47091 * C47073 * C108 +
          ((C4579 * C118 - C4575 * C125 + C4580 * C119 - C47358 * C126) *
               C4581 +
           (C4579 * C128 - C4575 * C139 + C4580 * C129 - C47358 * C140) *
               C4577 +
           (C4579 * C262 - C4575 * C272 + C4580 * C263 - C47358 * C273) *
               C4582 +
           (C4579 * C275 - C4575 * C292 + C4580 * C276 - C47358 * C293) *
               C47389) *
              C47294 * C47091 * C47073 * C109 +
          ((C4575 * C126 - C4579 * C119 + C47358 * C130 - C4580 * C120) *
               C4581 +
           (C4575 * C140 - C4579 * C129 + C47358 * C141 - C4580 * C131) *
               C4577 +
           (C4575 * C273 - C4579 * C263 + C47358 * C283 - C4580 * C267) *
               C4582 +
           (C4575 * C293 - C4579 * C276 + C47358 * C297 - C4580 * C284) *
               C47389) *
              C47294 * C47091 * C47073 * C110 +
          ((C4579 * C120 - C4575 * C130 + C4580 * C121 - C47358 * C132) *
               C4581 +
           (C4579 * C131 - C4575 * C141 + C4580 * C133 - C47358 * C142) *
               C4577 +
           (C4579 * C267 - C4575 * C283 + C4580 * C269 - C47358 * C287) *
               C4582 +
           (C4579 * C284 - C4575 * C297 + C4580 * C288 - C47358 * C299) *
               C47389) *
              C47294 * C47091 * C47073 * C111 +
          ((C4575 * C132 - C4579 * C121 + C47358 * C134 - C4580 * C122) *
               C4581 +
           (C4575 * C142 - C4579 * C133 + C47358 * C143 - C4580 * C135) *
               C4577 +
           (C4575 * C287 - C4579 * C269 + C47358 * C559 - C4580 * C558) *
               C4582 +
           (C4575 * C299 - C4579 * C288 + C47358 * C561 - C4580 * C560) *
               C47389) *
              C47294 * C47091 * C47073 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C4575 * C124 - C4579 * C117 + C47358 * C125 - C4580 * C118) *
                C4581 +
            (C4575 * C138 - C4579 * C127 + C47358 * C139 - C4580 * C128) *
                C4577 +
            (C4730 - C4731 + C4732 - C4733) * C4582 +
            (C4734 - C4735 + C4736 - C4737) * C47389) *
               C47294 * C47091 * C47410 +
           ((C4731 - C4730 + C4733 - C4732) * C4581 +
            (C4735 - C4734 + C4737 - C4736) * C4577 +
            (C4738 - C4739 + C4740 - C4741) * C4582 +
            (C4742 - C4743 + C4744 - C4745) * C47389) *
               C47294 * C47091 * C47398 +
           ((C4739 - C4738 + C4741 - C4740) * C4581 +
            (C4743 - C4742 + C4745 - C4744) * C4577 +
            (C4575 * C1022 - C4579 * C1016 + C47358 * C1023 - C4580 * C1017) *
                C4582 +
            (C4575 * C1034 - C4579 * C1025 + C47358 * C1035 - C4580 * C1026) *
                C47389) *
               C47294 * C47091 * C47371) *
              C258 +
          (((C4579 * C118 - C4575 * C125 + C4580 * C119 - C47358 * C126) *
                C4581 +
            (C4579 * C128 - C4575 * C139 + C4580 * C129 - C47358 * C140) *
                C4577 +
            (C4746 - C4747 + C4748 - C4749) * C4582 +
            (C4750 - C4751 + C4752 - C4753) * C47389) *
               C47294 * C47091 * C47410 +
           ((C4747 - C4746 + C4749 - C4748) * C4581 +
            (C4751 - C4750 + C4753 - C4752) * C4577 +
            (C4754 - C4755 + C4756 - C4757) * C4582 +
            (C4758 - C4759 + C4760 - C4761) * C47389) *
               C47294 * C47091 * C47398 +
           ((C4755 - C4754 + C4757 - C4756) * C4581 +
            (C4759 - C4758 + C4761 - C4760) * C4577 +
            (C4579 * C1017 - C4575 * C1023 + C4580 * C1018 - C47358 * C1024) *
                C4582 +
            (C4579 * C1026 - C4575 * C1035 + C4580 * C1027 - C47358 * C1036) *
                C47389) *
               C47294 * C47091 * C47371) *
              C259 +
          (((C4575 * C126 - C4579 * C119 + C47358 * C130 - C4580 * C120) *
                C4581 +
            (C4575 * C140 - C4579 * C129 + C47358 * C141 - C4580 * C131) *
                C4577 +
            (C4762 - C4763 + C4764 - C4765) * C4582 +
            (C4766 - C4767 + C4768 - C4769) * C47389) *
               C47294 * C47091 * C47410 +
           ((C4763 - C4762 + C4765 - C4764) * C4581 +
            (C4767 - C4766 + C4769 - C4768) * C4577 +
            (C4770 - C4771 + C4772 - C4773) * C4582 +
            (C4774 - C4775 + C4776 - C4777) * C47389) *
               C47294 * C47091 * C47398 +
           ((C4771 - C4770 + C4773 - C4772) * C4581 +
            (C4775 - C4774 + C4777 - C4776) * C4577 +
            (C4575 * C1024 - C4579 * C1018 + C47358 * C1291 - C4580 * C1290) *
                C4582 +
            (C4575 * C1036 - C4579 * C1027 + C47358 * C1293 - C4580 * C1292) *
                C47389) *
               C47294 * C47091 * C47371) *
              C47365)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C4575 * C124 - C4579 * C117 + C47358 * C125 - C4580 * C118) *
                C4581 +
            (C4575 * C138 - C4579 * C127 + C47358 * C139 - C4580 * C128) *
                C4577 +
            (C4730 - C4731 + C4732 - C4733) * C4582 +
            (C4734 - C4735 + C4736 - C4737) * C47389) *
               C47294 * C47091 * C942 +
           ((C4731 - C4730 + C4733 - C4732) * C4581 +
            (C4735 - C4734 + C4737 - C4736) * C4577 +
            (C4738 - C4739 + C4740 - C4741) * C4582 +
            (C4742 - C4743 + C4744 - C4745) * C47389) *
               C47294 * C47091 * C943 +
           ((C4739 - C4738 + C4741 - C4740) * C4581 +
            (C4743 - C4742 + C4745 - C4744) * C4577 +
            (C4575 * C1022 - C4579 * C1016 + C47358 * C1023 - C4580 * C1017) *
                C4582 +
            (C4575 * C1034 - C4579 * C1025 + C47358 * C1035 - C4580 * C1026) *
                C47389) *
               C47294 * C47091 * C47371) *
              C47407 +
          (((C4579 * C118 - C4575 * C125 + C4580 * C119 - C47358 * C126) *
                C4581 +
            (C4579 * C128 - C4575 * C139 + C4580 * C129 - C47358 * C140) *
                C4577 +
            (C4746 - C4747 + C4748 - C4749) * C4582 +
            (C4750 - C4751 + C4752 - C4753) * C47389) *
               C47294 * C47091 * C942 +
           ((C4747 - C4746 + C4749 - C4748) * C4581 +
            (C4751 - C4750 + C4753 - C4752) * C4577 +
            (C4754 - C4755 + C4756 - C4757) * C4582 +
            (C4758 - C4759 + C4760 - C4761) * C47389) *
               C47294 * C47091 * C943 +
           ((C4755 - C4754 + C4757 - C4756) * C4581 +
            (C4759 - C4758 + C4761 - C4760) * C4577 +
            (C4579 * C1017 - C4575 * C1023 + C4580 * C1018 - C47358 * C1024) *
                C4582 +
            (C4579 * C1026 - C4575 * C1035 + C4580 * C1027 - C47358 * C1036) *
                C47389) *
               C47294 * C47091 * C47371) *
              C47394 +
          (((C4575 * C126 - C4579 * C119 + C47358 * C130 - C4580 * C120) *
                C4581 +
            (C4575 * C140 - C4579 * C129 + C47358 * C141 - C4580 * C131) *
                C4577 +
            (C4762 - C4763 + C4764 - C4765) * C4582 +
            (C4766 - C4767 + C4768 - C4769) * C47389) *
               C47294 * C47091 * C942 +
           ((C4763 - C4762 + C4765 - C4764) * C4581 +
            (C4767 - C4766 + C4769 - C4768) * C4577 +
            (C4770 - C4771 + C4772 - C4773) * C4582 +
            (C4774 - C4775 + C4776 - C4777) * C47389) *
               C47294 * C47091 * C943 +
           ((C4771 - C4770 + C4773 - C4772) * C4581 +
            (C4775 - C4774 + C4777 - C4776) * C4577 +
            (C4575 * C1024 - C4579 * C1018 + C47358 * C1291 - C4580 * C1290) *
                C4582 +
            (C4575 * C1036 - C4579 * C1027 + C47358 * C1293 - C4580 * C1292) *
                C47389) *
               C47294 * C47091 * C47371) *
              C47365)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C4575 * C124 - C4579 * C117 + C47358 * C125 - C4580 * C118) *
               C4581 +
           (C4575 * C138 - C4579 * C127 + C47358 * C139 - C4580 * C128) *
               C4577 +
           (C4730 - C4731 + C4732 - C4733) * C4582 +
           (C4734 - C4735 + C4736 - C4737) * C47389) *
              C47294 * C47091 * C1010 +
          ((C4731 - C4730 + C4733 - C4732) * C4581 +
           (C4735 - C4734 + C4737 - C4736) * C4577 +
           (C4738 - C4739 + C4740 - C4741) * C4582 +
           (C4742 - C4743 + C4744 - C4745) * C47389) *
              C47294 * C47091 * C1011 +
          ((C4739 - C4738 + C4741 - C4740) * C4581 +
           (C4743 - C4742 + C4745 - C4744) * C4577 +
           (C5646 - C5647 + C5648 - C5649) * C4582 +
           (C5650 - C5651 + C5652 - C5653) * C47389) *
              C47294 * C47091 * C1012 +
          ((C5647 - C5646 + C5649 - C5648) * C4581 +
           (C5651 - C5650 + C5653 - C5652) * C4577 +
           (C5654 - C5655 + C5656 - C5657) * C4582 +
           (C5658 - C5659 + C5660 - C5661) * C47389) *
              C47294 * C47091 * C1013 +
          ((C5655 - C5654 + C5657 - C5656) * C4581 +
           (C5659 - C5658 + C5661 - C5660) * C4577 +
           (C4575 * C5639 - C4579 * C5637 + C47358 * C5640 - C4580 * C5638) *
               C4582 +
           (C4575 * C5643 - C4579 * C5641 + C47358 * C5644 - C4580 * C5642) *
               C47389) *
              C47294 * C47091 * C1014) *
         C47045) /
            (p * q * std::sqrt(p + q));
    d2ee[50] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C4575 * C124 - C4579 * C117 + C47358 * C125 - C4580 * C118) *
                 C116 +
             (C4575 * C138 - C4579 * C127 + C47358 * C139 - C4580 * C128) *
                 C47279) *
                C10231 +
            ((C10526 - C10527 + C10528 - C10529) * C116 +
             (C10530 - C10531 + C10532 - C10533) * C47279) *
                C47391) *
               C47091 * C47132 +
           (((C4731 - C4730 + C4733 - C4732) * C116 +
             (C4735 - C4734 + C4737 - C4736) * C47279) *
                C10231 +
            ((C5386 - C5387 + C5388 - C5389) * C116 +
             (C5390 - C5391 + C5392 - C5393) * C47279) *
                C47391) *
               C47091 * C47139 +
           (((C4739 - C4738 + C4741 - C4740) * C116 +
             (C4743 - C4742 + C4745 - C4744) * C47279) *
                C10231 +
            ((C5824 - C5825 + C5826 - C5827) * C116 +
             (C5828 - C5829 + C5830 - C5831) * C47279) *
                C47391) *
               C47091 * C2700) *
              C47050 +
          ((((C4579 * C118 - C4575 * C125 + C4580 * C119 - C47358 * C126) *
                 C116 +
             (C4579 * C128 - C4575 * C139 + C4580 * C129 - C47358 * C140) *
                 C47279) *
                C10231 +
            ((C10542 - C10543 + C10544 - C10545) * C116 +
             (C10546 - C10547 + C10548 - C10549) * C47279) *
                C47391) *
               C47091 * C47132 +
           (((C4747 - C4746 + C4749 - C4748) * C116 +
             (C4751 - C4750 + C4753 - C4752) * C47279) *
                C10231 +
            ((C5394 - C5395 + C5396 - C5397) * C116 +
             (C5398 - C5399 + C5400 - C5401) * C47279) *
                C47391) *
               C47091 * C47139 +
           (((C4755 - C4754 + C4757 - C4756) * C116 +
             (C4759 - C4758 + C4761 - C4760) * C47279) *
                C10231 +
            ((C6172 - C6173 + C6174 - C6175) * C116 +
             (C6176 - C6177 + C6178 - C6179) * C47279) *
                C47391) *
               C47091 * C2700) *
              C47059 +
          ((((C4575 * C126 - C4579 * C119 + C47358 * C130 - C4580 * C120) *
                 C116 +
             (C4575 * C140 - C4579 * C129 + C47358 * C141 - C4580 * C131) *
                 C47279) *
                C10231 +
            ((C10558 - C10559 + C10560 - C10561) * C116 +
             (C10562 - C10563 + C10564 - C10565) * C47279) *
                C47391) *
               C47091 * C47132 +
           (((C4763 - C4762 + C4765 - C4764) * C116 +
             (C4767 - C4766 + C4769 - C4768) * C47279) *
                C10231 +
            ((C5402 - C5403 + C5404 - C5405) * C116 +
             (C5406 - C5407 + C5408 - C5409) * C47279) *
                C47391) *
               C47091 * C47139 +
           (((C4771 - C4770 + C4773 - C4772) * C116 +
             (C4775 - C4774 + C4777 - C4776) * C47279) *
                C10231 +
            ((C4575 * C1167 - C4579 * C1155 + C47358 * C1441 - C4580 * C1440) *
                 C116 +
             (C4575 * C1182 - C4579 * C1170 + C47358 * C1443 - C4580 * C1442) *
                 C47279) *
                C47391) *
               C47091 * C2700) *
              C2703)) /
        (p * q * std::sqrt(p + q));
    d2ee[51] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C4575 * C124 - C4579 * C117 + C47358 * C125 - C4580 * C118) *
                  C116 +
              (C4575 * C138 - C4579 * C127 + C47358 * C139 - C4580 * C128) *
                  C47279) *
                 C10231 +
             ((C10526 - C10527 + C10528 - C10529) * C116 +
              (C10530 - C10531 + C10532 - C10533) * C47279) *
                 C47391) *
                C47340 +
            (((C10527 - C10526 + C10529 - C10528) * C116 +
              (C10531 - C10530 + C10533 - C10532) * C47279) *
                 C10231 +
             ((C10534 - C10535 + C10536 - C10537) * C116 +
              (C10538 - C10539 + C10540 - C10541) * C47279) *
                 C47391) *
                C47178) *
               C47132 +
           ((((C4731 - C4730 + C4733 - C4732) * C116 +
              (C4735 - C4734 + C4737 - C4736) * C47279) *
                 C10231 +
             ((C5386 - C5387 + C5388 - C5389) * C116 +
              (C5390 - C5391 + C5392 - C5393) * C47279) *
                 C47391) *
                C47340 +
            (((C5387 - C5386 + C5389 - C5388) * C116 +
              (C5391 - C5390 + C5393 - C5392) * C47279) *
                 C10231 +
             ((C5816 - C5817 + C5818 - C5819) * C116 +
              (C5820 - C5821 + C5822 - C5823) * C47279) *
                 C47391) *
                C47178) *
               C47139 +
           ((((C4739 - C4738 + C4741 - C4740) * C116 +
              (C4743 - C4742 + C4745 - C4744) * C47279) *
                 C10231 +
             ((C5824 - C5825 + C5826 - C5827) * C116 +
              (C5828 - C5829 + C5830 - C5831) * C47279) *
                 C47391) *
                C47340 +
            (((C5825 - C5824 + C5827 - C5826) * C116 +
              (C5829 - C5828 + C5831 - C5830) * C47279) *
                 C10231 +
             ((C5832 - C5833 + C5834 - C5835) * C116 +
              (C5836 - C5837 + C5838 - C5839) * C47279) *
                 C47391) *
                C47178) *
               C2700) *
              C2440 +
          (((((C4579 * C118 - C4575 * C125 + C4580 * C119 - C47358 * C126) *
                  C116 +
              (C4579 * C128 - C4575 * C139 + C4580 * C129 - C47358 * C140) *
                  C47279) *
                 C10231 +
             ((C10542 - C10543 + C10544 - C10545) * C116 +
              (C10546 - C10547 + C10548 - C10549) * C47279) *
                 C47391) *
                C47340 +
            (((C10543 - C10542 + C10545 - C10544) * C116 +
              (C10547 - C10546 + C10549 - C10548) * C47279) *
                 C10231 +
             ((C10550 - C10551 + C10552 - C10553) * C116 +
              (C10554 - C10555 + C10556 - C10557) * C47279) *
                 C47391) *
                C47178) *
               C47132 +
           ((((C4747 - C4746 + C4749 - C4748) * C116 +
              (C4751 - C4750 + C4753 - C4752) * C47279) *
                 C10231 +
             ((C5394 - C5395 + C5396 - C5397) * C116 +
              (C5398 - C5399 + C5400 - C5401) * C47279) *
                 C47391) *
                C47340 +
            (((C5395 - C5394 + C5397 - C5396) * C116 +
              (C5399 - C5398 + C5401 - C5400) * C47279) *
                 C10231 +
             ((C6902 - C6903 + C6904 - C6905) * C116 +
              (C6906 - C6907 + C6908 - C6909) * C47279) *
                 C47391) *
                C47178) *
               C47139 +
           ((((C4755 - C4754 + C4757 - C4756) * C116 +
              (C4759 - C4758 + C4761 - C4760) * C47279) *
                 C10231 +
             ((C6172 - C6173 + C6174 - C6175) * C116 +
              (C6176 - C6177 + C6178 - C6179) * C47279) *
                 C47391) *
                C47340 +
            (((C6173 - C6172 + C6175 - C6174) * C116 +
              (C6177 - C6176 + C6179 - C6178) * C47279) *
                 C10231 +
             ((C4575 * C1172 - C4579 * C1157 + C47358 * C1173 - C4580 * C1158) *
                  C116 +
              (C4575 * C1184 - C4579 * C1175 + C47358 * C1185 - C4580 * C1176) *
                  C47279) *
                 C47391) *
                C47178) *
               C2700) *
              C47056)) /
        (p * q * std::sqrt(p + q));
    d2ee[52] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C4575 * C124 - C4579 * C117 + C47358 * C125 - C4580 * C118) *
                 C116 +
             (C4575 * C138 - C4579 * C127 + C47358 * C139 - C4580 * C128) *
                 C47279) *
                C10231 +
            ((C10526 - C10527 + C10528 - C10529) * C116 +
             (C10530 - C10531 + C10532 - C10533) * C47279) *
                C47391) *
               C47091 * C47417 +
           (((C4731 - C4730 + C4733 - C4732) * C116 +
             (C4735 - C4734 + C4737 - C4736) * C47279) *
                C10231 +
            ((C5386 - C5387 + C5388 - C5389) * C116 +
             (C5390 - C5391 + C5392 - C5393) * C47279) *
                C47391) *
               C47091 * C47413 +
           (((C4739 - C4738 + C4741 - C4740) * C116 +
             (C4743 - C4742 + C4745 - C4744) * C47279) *
                C10231 +
            ((C5824 - C5825 + C5826 - C5827) * C116 +
             (C5828 - C5829 + C5830 - C5831) * C47279) *
                C47391) *
               C47091 * C47403 +
           (((C5647 - C5646 + C5649 - C5648) * C116 +
             (C5651 - C5650 + C5653 - C5652) * C47279) *
                C10231 +
            ((C6318 - C6319 + C6320 - C6321) * C116 +
             (C6322 - C6323 + C6324 - C6325) * C47279) *
                C47391) *
               C47091 * C47381) *
              C2440 +
          ((((C4579 * C118 - C4575 * C125 + C4580 * C119 - C47358 * C126) *
                 C116 +
             (C4579 * C128 - C4575 * C139 + C4580 * C129 - C47358 * C140) *
                 C47279) *
                C10231 +
            ((C10542 - C10543 + C10544 - C10545) * C116 +
             (C10546 - C10547 + C10548 - C10549) * C47279) *
                C47391) *
               C47091 * C47417 +
           (((C4747 - C4746 + C4749 - C4748) * C116 +
             (C4751 - C4750 + C4753 - C4752) * C47279) *
                C10231 +
            ((C5394 - C5395 + C5396 - C5397) * C116 +
             (C5398 - C5399 + C5400 - C5401) * C47279) *
                C47391) *
               C47091 * C47413 +
           (((C4755 - C4754 + C4757 - C4756) * C116 +
             (C4759 - C4758 + C4761 - C4760) * C47279) *
                C10231 +
            ((C6172 - C6173 + C6174 - C6175) * C116 +
             (C6176 - C6177 + C6178 - C6179) * C47279) *
                C47391) *
               C47091 * C47403 +
           (((C5971 - C5970 + C5973 - C5972) * C116 +
             (C5975 - C5974 + C5977 - C5976) * C47279) *
                C10231 +
            ((C4575 * C1546 - C4579 * C1543 + C47358 * C1547 - C4580 * C1544) *
                 C116 +
             (C4575 * C1552 - C4579 * C1549 + C47358 * C1553 - C4580 * C1550) *
                 C47279) *
                C47391) *
               C47091 * C47381) *
              C47056)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C4575 * C124 - C4579 * C117 + C47358 * C125 - C4580 * C118) *
                 C116 +
             (C4575 * C138 - C4579 * C127 + C47358 * C139 - C4580 * C128) *
                 C47279) *
                C10231 +
            ((C10526 - C10527 + C10528 - C10529) * C116 +
             (C10530 - C10531 + C10532 - C10533) * C47279) *
                C47391) *
               C47091 * C2332 +
           (((C4731 - C4730 + C4733 - C4732) * C116 +
             (C4735 - C4734 + C4737 - C4736) * C47279) *
                C10231 +
            ((C5386 - C5387 + C5388 - C5389) * C116 +
             (C5390 - C5391 + C5392 - C5393) * C47279) *
                C47391) *
               C47091 * C47136) *
              C47416 +
          ((((C4579 * C118 - C4575 * C125 + C4580 * C119 - C47358 * C126) *
                 C116 +
             (C4579 * C128 - C4575 * C139 + C4580 * C129 - C47358 * C140) *
                 C47279) *
                C10231 +
            ((C10542 - C10543 + C10544 - C10545) * C116 +
             (C10546 - C10547 + C10548 - C10549) * C47279) *
                C47391) *
               C47091 * C2332 +
           (((C4747 - C4746 + C4749 - C4748) * C116 +
             (C4751 - C4750 + C4753 - C4752) * C47279) *
                C10231 +
            ((C5394 - C5395 + C5396 - C5397) * C116 +
             (C5398 - C5399 + C5400 - C5401) * C47279) *
                C47391) *
               C47091 * C47136) *
              C47409 +
          ((((C4575 * C126 - C4579 * C119 + C47358 * C130 - C4580 * C120) *
                 C116 +
             (C4575 * C140 - C4579 * C129 + C47358 * C141 - C4580 * C131) *
                 C47279) *
                C10231 +
            ((C10558 - C10559 + C10560 - C10561) * C116 +
             (C10562 - C10563 + C10564 - C10565) * C47279) *
                C47391) *
               C47091 * C2332 +
           (((C4763 - C4762 + C4765 - C4764) * C116 +
             (C4767 - C4766 + C4769 - C4768) * C47279) *
                C10231 +
            ((C5402 - C5403 + C5404 - C5405) * C116 +
             (C5406 - C5407 + C5408 - C5409) * C47279) *
                C47391) *
               C47091 * C47136) *
              C47396 +
          ((((C4579 * C120 - C4575 * C130 + C4580 * C121 - C47358 * C132) *
                 C116 +
             (C4579 * C131 - C4575 * C141 + C4580 * C133 - C47358 * C142) *
                 C47279) *
                C10231 +
            ((C10834 - C10835 + C10836 - C10837) * C116 +
             (C10838 - C10839 + C10840 - C10841) * C47279) *
                C47391) *
               C47091 * C2332 +
           (((C5055 - C5054 + C5057 - C5056) * C116 +
             (C5059 - C5058 + C5061 - C5060) * C47279) *
                C10231 +
            ((C4575 * C823 - C4579 * C815 + C47358 * C825 - C4580 * C816) *
                 C116 +
             (C4575 * C830 - C4579 * C824 + C47358 * C831 - C4580 * C826) *
                 C47279) *
                C47391) *
               C47091 * C47136) *
              C47375)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C4575 * C124 - C4579 * C117 + C47358 * C125 - C4580 * C118) *
                  C116 +
              (C4575 * C138 - C4579 * C127 + C47358 * C139 - C4580 * C128) *
                  C47279) *
                 C10231 +
             ((C10526 - C10527 + C10528 - C10529) * C116 +
              (C10530 - C10531 + C10532 - C10533) * C47279) *
                 C47391) *
                C47411 +
            (((C10527 - C10526 + C10529 - C10528) * C116 +
              (C10531 - C10530 + C10533 - C10532) * C47279) *
                 C10231 +
             ((C10534 - C10535 + C10536 - C10537) * C116 +
              (C10538 - C10539 + C10540 - C10541) * C47279) *
                 C47391) *
                C47400 +
            (((C10535 - C10534 + C10537 - C10536) * C116 +
              (C10539 - C10538 + C10541 - C10540) * C47279) *
                 C10231 +
             ((C12246 - C12247 + C12248 - C12249) * C116 +
              (C12250 - C12251 + C12252 - C12253) * C47279) *
                 C47391) *
                C47374) *
               C2332 +
           ((((C4731 - C4730 + C4733 - C4732) * C116 +
              (C4735 - C4734 + C4737 - C4736) * C47279) *
                 C10231 +
             ((C5386 - C5387 + C5388 - C5389) * C116 +
              (C5390 - C5391 + C5392 - C5393) * C47279) *
                 C47391) *
                C47411 +
            (((C5387 - C5386 + C5389 - C5388) * C116 +
              (C5391 - C5390 + C5393 - C5392) * C47279) *
                 C10231 +
             ((C5816 - C5817 + C5818 - C5819) * C116 +
              (C5820 - C5821 + C5822 - C5823) * C47279) *
                 C47391) *
                C47400 +
            (((C5817 - C5816 + C5819 - C5818) * C116 +
              (C5821 - C5820 + C5823 - C5822) * C47279) *
                 C10231 +
             ((C7178 - C7179 + C7180 - C7181) * C116 +
              (C7182 - C7183 + C7184 - C7185) * C47279) *
                 C47391) *
                C47374) *
               C47136) *
              C2440 +
          (((((C4579 * C118 - C4575 * C125 + C4580 * C119 - C47358 * C126) *
                  C116 +
              (C4579 * C128 - C4575 * C139 + C4580 * C129 - C47358 * C140) *
                  C47279) *
                 C10231 +
             ((C10542 - C10543 + C10544 - C10545) * C116 +
              (C10546 - C10547 + C10548 - C10549) * C47279) *
                 C47391) *
                C47411 +
            (((C10543 - C10542 + C10545 - C10544) * C116 +
              (C10547 - C10546 + C10549 - C10548) * C47279) *
                 C10231 +
             ((C10550 - C10551 + C10552 - C10553) * C116 +
              (C10554 - C10555 + C10556 - C10557) * C47279) *
                 C47391) *
                C47400 +
            (((C10551 - C10550 + C10553 - C10552) * C116 +
              (C10555 - C10554 + C10557 - C10556) * C47279) *
                 C10231 +
             ((C12586 - C12587 + C12588 - C12589) * C116 +
              (C12590 - C12591 + C12592 - C12593) * C47279) *
                 C47391) *
                C47374) *
               C2332 +
           ((((C4747 - C4746 + C4749 - C4748) * C116 +
              (C4751 - C4750 + C4753 - C4752) * C47279) *
                 C10231 +
             ((C5394 - C5395 + C5396 - C5397) * C116 +
              (C5398 - C5399 + C5400 - C5401) * C47279) *
                 C47391) *
                C47411 +
            (((C5395 - C5394 + C5397 - C5396) * C116 +
              (C5399 - C5398 + C5401 - C5400) * C47279) *
                 C10231 +
             ((C6902 - C6903 + C6904 - C6905) * C116 +
              (C6906 - C6907 + C6908 - C6909) * C47279) *
                 C47391) *
                C47400 +
            (((C6903 - C6902 + C6905 - C6904) * C116 +
              (C6907 - C6906 + C6909 - C6908) * C47279) *
                 C10231 +
             ((C4575 * C2226 - C4579 * C2223 + C47358 * C2227 - C4580 * C2224) *
                  C116 +
              (C4575 * C2232 - C4579 * C2229 + C47358 * C2233 - C4580 * C2230) *
                  C47279) *
                 C47391) *
                C47374) *
               C47136) *
              C47056)) /
            (p * q * std::sqrt(p + q));
    d2ee[53] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C4575 * C124 - C4579 * C117 + C47358 * C125 - C4580 * C118) *
                  C116 +
              (C4575 * C138 - C4579 * C127 + C47358 * C139 - C4580 * C128) *
                  C47279) *
                 C10231 +
             ((C10526 - C10527 + C10528 - C10529) * C116 +
              (C10530 - C10531 + C10532 - C10533) * C47279) *
                 C47391) *
                C47340 +
            (((C10527 - C10526 + C10529 - C10528) * C116 +
              (C10531 - C10530 + C10533 - C10532) * C47279) *
                 C10231 +
             ((C10534 - C10535 + C10536 - C10537) * C116 +
              (C10538 - C10539 + C10540 - C10541) * C47279) *
                 C47391) *
                C47178) *
               C2332 +
           ((((C4731 - C4730 + C4733 - C4732) * C116 +
              (C4735 - C4734 + C4737 - C4736) * C47279) *
                 C10231 +
             ((C5386 - C5387 + C5388 - C5389) * C116 +
              (C5390 - C5391 + C5392 - C5393) * C47279) *
                 C47391) *
                C47340 +
            (((C5387 - C5386 + C5389 - C5388) * C116 +
              (C5391 - C5390 + C5393 - C5392) * C47279) *
                 C10231 +
             ((C5816 - C5817 + C5818 - C5819) * C116 +
              (C5820 - C5821 + C5822 - C5823) * C47279) *
                 C47391) *
                C47178) *
               C47136) *
              C47050 +
          (((((C4579 * C118 - C4575 * C125 + C4580 * C119 - C47358 * C126) *
                  C116 +
              (C4579 * C128 - C4575 * C139 + C4580 * C129 - C47358 * C140) *
                  C47279) *
                 C10231 +
             ((C10542 - C10543 + C10544 - C10545) * C116 +
              (C10546 - C10547 + C10548 - C10549) * C47279) *
                 C47391) *
                C47340 +
            (((C10543 - C10542 + C10545 - C10544) * C116 +
              (C10547 - C10546 + C10549 - C10548) * C47279) *
                 C10231 +
             ((C10550 - C10551 + C10552 - C10553) * C116 +
              (C10554 - C10555 + C10556 - C10557) * C47279) *
                 C47391) *
                C47178) *
               C2332 +
           ((((C4747 - C4746 + C4749 - C4748) * C116 +
              (C4751 - C4750 + C4753 - C4752) * C47279) *
                 C10231 +
             ((C5394 - C5395 + C5396 - C5397) * C116 +
              (C5398 - C5399 + C5400 - C5401) * C47279) *
                 C47391) *
                C47340 +
            (((C5395 - C5394 + C5397 - C5396) * C116 +
              (C5399 - C5398 + C5401 - C5400) * C47279) *
                 C10231 +
             ((C6902 - C6903 + C6904 - C6905) * C116 +
              (C6906 - C6907 + C6908 - C6909) * C47279) *
                 C47391) *
                C47178) *
               C47136) *
              C47059 +
          (((((C4575 * C126 - C4579 * C119 + C47358 * C130 - C4580 * C120) *
                  C116 +
              (C4575 * C140 - C4579 * C129 + C47358 * C141 - C4580 * C131) *
                  C47279) *
                 C10231 +
             ((C10558 - C10559 + C10560 - C10561) * C116 +
              (C10562 - C10563 + C10564 - C10565) * C47279) *
                 C47391) *
                C47340 +
            (((C10559 - C10558 + C10561 - C10560) * C116 +
              (C10563 - C10562 + C10565 - C10564) * C47279) *
                 C10231 +
             ((C10566 - C10567 + C10568 - C10569) * C116 +
              (C10570 - C10571 + C10572 - C10573) * C47279) *
                 C47391) *
                C47178) *
               C2332 +
           ((((C4763 - C4762 + C4765 - C4764) * C116 +
              (C4767 - C4766 + C4769 - C4768) * C47279) *
                 C10231 +
             ((C5402 - C5403 + C5404 - C5405) * C116 +
              (C5406 - C5407 + C5408 - C5409) * C47279) *
                 C47391) *
                C47340 +
            (((C5403 - C5402 + C5405 - C5404) * C116 +
              (C5407 - C5406 + C5409 - C5408) * C47279) *
                 C10231 +
             ((C4575 * C1161 - C4579 * C1152 + C47358 * C2015 - C4580 * C2014) *
                  C116 +
              (C4575 * C1179 - C4579 * C1164 + C47358 * C2017 - C4580 * C2016) *
                  C47279) *
                 C47391) *
                C47178) *
               C47136) *
              C2703)) /
        (p * q * std::sqrt(p + q));
    d2ee[54] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C4575 * C124 - C4579 * C117 + C47358 * C125 - C4580 * C118) *
                 C116 +
             (C4575 * C138 - C4579 * C127 + C47358 * C139 - C4580 * C128) *
                 C47279) *
                C10231 +
            ((C10526 - C10527 + C10528 - C10529) * C116 +
             (C10530 - C10531 + C10532 - C10533) * C47279) *
                C47391) *
               C47091 * C2332 +
           (((C4731 - C4730 + C4733 - C4732) * C116 +
             (C4735 - C4734 + C4737 - C4736) * C47279) *
                C10231 +
            ((C5386 - C5387 + C5388 - C5389) * C116 +
             (C5390 - C5391 + C5392 - C5393) * C47279) *
                C47391) *
               C47091 * C47136) *
              C47416 +
          ((((C4579 * C118 - C4575 * C125 + C4580 * C119 - C47358 * C126) *
                 C116 +
             (C4579 * C128 - C4575 * C139 + C4580 * C129 - C47358 * C140) *
                 C47279) *
                C10231 +
            ((C10542 - C10543 + C10544 - C10545) * C116 +
             (C10546 - C10547 + C10548 - C10549) * C47279) *
                C47391) *
               C47091 * C2332 +
           (((C4747 - C4746 + C4749 - C4748) * C116 +
             (C4751 - C4750 + C4753 - C4752) * C47279) *
                C10231 +
            ((C5394 - C5395 + C5396 - C5397) * C116 +
             (C5398 - C5399 + C5400 - C5401) * C47279) *
                C47391) *
               C47091 * C47136) *
              C47409 +
          ((((C4575 * C126 - C4579 * C119 + C47358 * C130 - C4580 * C120) *
                 C116 +
             (C4575 * C140 - C4579 * C129 + C47358 * C141 - C4580 * C131) *
                 C47279) *
                C10231 +
            ((C10558 - C10559 + C10560 - C10561) * C116 +
             (C10562 - C10563 + C10564 - C10565) * C47279) *
                C47391) *
               C47091 * C2332 +
           (((C4763 - C4762 + C4765 - C4764) * C116 +
             (C4767 - C4766 + C4769 - C4768) * C47279) *
                C10231 +
            ((C5402 - C5403 + C5404 - C5405) * C116 +
             (C5406 - C5407 + C5408 - C5409) * C47279) *
                C47391) *
               C47091 * C47136) *
              C47396 +
          ((((C4579 * C120 - C4575 * C130 + C4580 * C121 - C47358 * C132) *
                 C116 +
             (C4579 * C131 - C4575 * C141 + C4580 * C133 - C47358 * C142) *
                 C47279) *
                C10231 +
            ((C10834 - C10835 + C10836 - C10837) * C116 +
             (C10838 - C10839 + C10840 - C10841) * C47279) *
                C47391) *
               C47091 * C2332 +
           (((C5055 - C5054 + C5057 - C5056) * C116 +
             (C5059 - C5058 + C5061 - C5060) * C47279) *
                C10231 +
            ((C4575 * C823 - C4579 * C815 + C47358 * C825 - C4580 * C816) *
                 C116 +
             (C4575 * C830 - C4579 * C824 + C47358 * C831 - C4580 * C826) *
                 C47279) *
                C47391) *
               C47091 * C47136) *
              C47375)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C4575 * C124 - C4579 * C117 + C47358 * C125 - C4580 * C118) *
                 C116 +
             (C4575 * C138 - C4579 * C127 + C47358 * C139 - C4580 * C128) *
                 C47279) *
                C10231 +
            ((C10526 - C10527 + C10528 - C10529) * C116 +
             (C10530 - C10531 + C10532 - C10533) * C47279) *
                C47391) *
               C47091 * C47417 +
           (((C4731 - C4730 + C4733 - C4732) * C116 +
             (C4735 - C4734 + C4737 - C4736) * C47279) *
                C10231 +
            ((C5386 - C5387 + C5388 - C5389) * C116 +
             (C5390 - C5391 + C5392 - C5393) * C47279) *
                C47391) *
               C47091 * C47413 +
           (((C4739 - C4738 + C4741 - C4740) * C116 +
             (C4743 - C4742 + C4745 - C4744) * C47279) *
                C10231 +
            ((C5824 - C5825 + C5826 - C5827) * C116 +
             (C5828 - C5829 + C5830 - C5831) * C47279) *
                C47391) *
               C47091 * C47403 +
           (((C5647 - C5646 + C5649 - C5648) * C116 +
             (C5651 - C5650 + C5653 - C5652) * C47279) *
                C10231 +
            ((C6318 - C6319 + C6320 - C6321) * C116 +
             (C6322 - C6323 + C6324 - C6325) * C47279) *
                C47391) *
               C47091 * C47381) *
              C2440 +
          ((((C4579 * C118 - C4575 * C125 + C4580 * C119 - C47358 * C126) *
                 C116 +
             (C4579 * C128 - C4575 * C139 + C4580 * C129 - C47358 * C140) *
                 C47279) *
                C10231 +
            ((C10542 - C10543 + C10544 - C10545) * C116 +
             (C10546 - C10547 + C10548 - C10549) * C47279) *
                C47391) *
               C47091 * C47417 +
           (((C4747 - C4746 + C4749 - C4748) * C116 +
             (C4751 - C4750 + C4753 - C4752) * C47279) *
                C10231 +
            ((C5394 - C5395 + C5396 - C5397) * C116 +
             (C5398 - C5399 + C5400 - C5401) * C47279) *
                C47391) *
               C47091 * C47413 +
           (((C4755 - C4754 + C4757 - C4756) * C116 +
             (C4759 - C4758 + C4761 - C4760) * C47279) *
                C10231 +
            ((C6172 - C6173 + C6174 - C6175) * C116 +
             (C6176 - C6177 + C6178 - C6179) * C47279) *
                C47391) *
               C47091 * C47403 +
           (((C5971 - C5970 + C5973 - C5972) * C116 +
             (C5975 - C5974 + C5977 - C5976) * C47279) *
                C10231 +
            ((C4575 * C1546 - C4579 * C1543 + C47358 * C1547 - C4580 * C1544) *
                 C116 +
             (C4575 * C1552 - C4579 * C1549 + C47358 * C1553 - C4580 * C1550) *
                 C47279) *
                C47391) *
               C47091 * C47381) *
              C47056)) /
            (p * q * std::sqrt(p + q));
    d2ee[55] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C4575 * C124 - C4579 * C117 + C47358 * C125 - C4580 * C118) *
                  C116 +
              (C4575 * C138 - C4579 * C127 + C47358 * C139 - C4580 * C128) *
                  C47279) *
                 C10231 +
             ((C10526 - C10527 + C10528 - C10529) * C116 +
              (C10530 - C10531 + C10532 - C10533) * C47279) *
                 C47391) *
                C3094 +
            (((C10527 - C10526 + C10529 - C10528) * C116 +
              (C10531 - C10530 + C10533 - C10532) * C47279) *
                 C10231 +
             ((C10534 - C10535 + C10536 - C10537) * C116 +
              (C10538 - C10539 + C10540 - C10541) * C47279) *
                 C47391) *
                C47178) *
               C47132 +
           ((((C4731 - C4730 + C4733 - C4732) * C116 +
              (C4735 - C4734 + C4737 - C4736) * C47279) *
                 C10231 +
             ((C5386 - C5387 + C5388 - C5389) * C116 +
              (C5390 - C5391 + C5392 - C5393) * C47279) *
                 C47391) *
                C3094 +
            (((C5387 - C5386 + C5389 - C5388) * C116 +
              (C5391 - C5390 + C5393 - C5392) * C47279) *
                 C10231 +
             ((C5816 - C5817 + C5818 - C5819) * C116 +
              (C5820 - C5821 + C5822 - C5823) * C47279) *
                 C47391) *
                C47178) *
               C47139 +
           ((((C4739 - C4738 + C4741 - C4740) * C116 +
              (C4743 - C4742 + C4745 - C4744) * C47279) *
                 C10231 +
             ((C5824 - C5825 + C5826 - C5827) * C116 +
              (C5828 - C5829 + C5830 - C5831) * C47279) *
                 C47391) *
                C3094 +
            (((C5825 - C5824 + C5827 - C5826) * C116 +
              (C5829 - C5828 + C5831 - C5830) * C47279) *
                 C10231 +
             ((C5832 - C5833 + C5834 - C5835) * C116 +
              (C5836 - C5837 + C5838 - C5839) * C47279) *
                 C47391) *
                C47178) *
               C2700) *
              C47325 +
          (((((C4579 * C118 - C4575 * C125 + C4580 * C119 - C47358 * C126) *
                  C116 +
              (C4579 * C128 - C4575 * C139 + C4580 * C129 - C47358 * C140) *
                  C47279) *
                 C10231 +
             ((C10542 - C10543 + C10544 - C10545) * C116 +
              (C10546 - C10547 + C10548 - C10549) * C47279) *
                 C47391) *
                C3094 +
            (((C10543 - C10542 + C10545 - C10544) * C116 +
              (C10547 - C10546 + C10549 - C10548) * C47279) *
                 C10231 +
             ((C10550 - C10551 + C10552 - C10553) * C116 +
              (C10554 - C10555 + C10556 - C10557) * C47279) *
                 C47391) *
                C47178) *
               C47132 +
           ((((C4747 - C4746 + C4749 - C4748) * C116 +
              (C4751 - C4750 + C4753 - C4752) * C47279) *
                 C10231 +
             ((C5394 - C5395 + C5396 - C5397) * C116 +
              (C5398 - C5399 + C5400 - C5401) * C47279) *
                 C47391) *
                C3094 +
            (((C5395 - C5394 + C5397 - C5396) * C116 +
              (C5399 - C5398 + C5401 - C5400) * C47279) *
                 C10231 +
             ((C6902 - C6903 + C6904 - C6905) * C116 +
              (C6906 - C6907 + C6908 - C6909) * C47279) *
                 C47391) *
                C47178) *
               C47139 +
           ((((C4755 - C4754 + C4757 - C4756) * C116 +
              (C4759 - C4758 + C4761 - C4760) * C47279) *
                 C10231 +
             ((C6172 - C6173 + C6174 - C6175) * C116 +
              (C6176 - C6177 + C6178 - C6179) * C47279) *
                 C47391) *
                C3094 +
            (((C6173 - C6172 + C6175 - C6174) * C116 +
              (C6177 - C6176 + C6179 - C6178) * C47279) *
                 C10231 +
             ((C4575 * C1172 - C4579 * C1157 + C47358 * C1173 - C4580 * C1158) *
                  C116 +
              (C4575 * C1184 - C4579 * C1175 + C47358 * C1185 - C4580 * C1176) *
                  C47279) *
                 C47391) *
                C47178) *
               C2700) *
              C47056)) /
        (p * q * std::sqrt(p + q));
    d2ee[56] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C4575 * C124 - C4579 * C117 + C47358 * C125 - C4580 * C118) *
                 C116 +
             (C4575 * C138 - C4579 * C127 + C47358 * C139 - C4580 * C128) *
                 C47279) *
                C10231 +
            ((C10526 - C10527 + C10528 - C10529) * C116 +
             (C10530 - C10531 + C10532 - C10533) * C47279) *
                C47391) *
               C47174 +
           (((C10527 - C10526 + C10529 - C10528) * C116 +
             (C10531 - C10530 + C10533 - C10532) * C47279) *
                C10231 +
            ((C10534 - C10535 + C10536 - C10537) * C116 +
             (C10538 - C10539 + C10540 - C10541) * C47279) *
                C47391) *
               C47181 +
           (((C10535 - C10534 + C10537 - C10536) * C116 +
             (C10539 - C10538 + C10541 - C10540) * C47279) *
                C10231 +
            ((C12246 - C12247 + C12248 - C12249) * C116 +
             (C12250 - C12251 + C12252 - C12253) * C47279) *
                C47391) *
               C3602) *
              C47132 +
          ((((C4731 - C4730 + C4733 - C4732) * C116 +
             (C4735 - C4734 + C4737 - C4736) * C47279) *
                C10231 +
            ((C5386 - C5387 + C5388 - C5389) * C116 +
             (C5390 - C5391 + C5392 - C5393) * C47279) *
                C47391) *
               C47174 +
           (((C5387 - C5386 + C5389 - C5388) * C116 +
             (C5391 - C5390 + C5393 - C5392) * C47279) *
                C10231 +
            ((C5816 - C5817 + C5818 - C5819) * C116 +
             (C5820 - C5821 + C5822 - C5823) * C47279) *
                C47391) *
               C47181 +
           (((C5817 - C5816 + C5819 - C5818) * C116 +
             (C5821 - C5820 + C5823 - C5822) * C47279) *
                C10231 +
            ((C7178 - C7179 + C7180 - C7181) * C116 +
             (C7182 - C7183 + C7184 - C7185) * C47279) *
                C47391) *
               C3602) *
              C47139 +
          ((((C4739 - C4738 + C4741 - C4740) * C116 +
             (C4743 - C4742 + C4745 - C4744) * C47279) *
                C10231 +
            ((C5824 - C5825 + C5826 - C5827) * C116 +
             (C5828 - C5829 + C5830 - C5831) * C47279) *
                C47391) *
               C47174 +
           (((C5825 - C5824 + C5827 - C5826) * C116 +
             (C5829 - C5828 + C5831 - C5830) * C47279) *
                C10231 +
            ((C5832 - C5833 + C5834 - C5835) * C116 +
             (C5836 - C5837 + C5838 - C5839) * C47279) *
                C47391) *
               C47181 +
           (((C5833 - C5832 + C5835 - C5834) * C116 +
             (C5837 - C5836 + C5839 - C5838) * C47279) *
                C10231 +
            ((C4575 * C7171 - C4579 * C7169 + C47358 * C7172 - C4580 * C7170) *
                 C116 +
             (C4575 * C7175 - C4579 * C7173 + C47358 * C7176 - C4580 * C7174) *
                 C47279) *
                C47391) *
               C3602) *
              C2700) *
         C47045) /
        (p * q * std::sqrt(p + q));
    d2ee[57] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C4575 * C124 - C4579 * C117 + C47358 * C125 - C4580 * C118) *
                 C116 +
             (C4575 * C138 - C4579 * C127 + C47358 * C139 - C4580 * C128) *
                 C47279) *
                C10231 +
            ((C10526 - C10527 + C10528 - C10529) * C116 +
             (C10530 - C10531 + C10532 - C10533) * C47279) *
                C47391) *
               C3094 +
           (((C10527 - C10526 + C10529 - C10528) * C116 +
             (C10531 - C10530 + C10533 - C10532) * C47279) *
                C10231 +
            ((C10534 - C10535 + C10536 - C10537) * C116 +
             (C10538 - C10539 + C10540 - C10541) * C47279) *
                C47391) *
               C47178) *
              C47417 +
          ((((C4731 - C4730 + C4733 - C4732) * C116 +
             (C4735 - C4734 + C4737 - C4736) * C47279) *
                C10231 +
            ((C5386 - C5387 + C5388 - C5389) * C116 +
             (C5390 - C5391 + C5392 - C5393) * C47279) *
                C47391) *
               C3094 +
           (((C5387 - C5386 + C5389 - C5388) * C116 +
             (C5391 - C5390 + C5393 - C5392) * C47279) *
                C10231 +
            ((C5816 - C5817 + C5818 - C5819) * C116 +
             (C5820 - C5821 + C5822 - C5823) * C47279) *
                C47391) *
               C47178) *
              C47413 +
          ((((C4739 - C4738 + C4741 - C4740) * C116 +
             (C4743 - C4742 + C4745 - C4744) * C47279) *
                C10231 +
            ((C5824 - C5825 + C5826 - C5827) * C116 +
             (C5828 - C5829 + C5830 - C5831) * C47279) *
                C47391) *
               C3094 +
           (((C5825 - C5824 + C5827 - C5826) * C116 +
             (C5829 - C5828 + C5831 - C5830) * C47279) *
                C10231 +
            ((C5832 - C5833 + C5834 - C5835) * C116 +
             (C5836 - C5837 + C5838 - C5839) * C47279) *
                C47391) *
               C47178) *
              C47403 +
          ((((C5647 - C5646 + C5649 - C5648) * C116 +
             (C5651 - C5650 + C5653 - C5652) * C47279) *
                C10231 +
            ((C6318 - C6319 + C6320 - C6321) * C116 +
             (C6322 - C6323 + C6324 - C6325) * C47279) *
                C47391) *
               C3094 +
           (((C6319 - C6318 + C6321 - C6320) * C116 +
             (C6323 - C6322 + C6325 - C6324) * C47279) *
                C10231 +
            ((C4575 * C5809 - C4579 * C5807 + C47358 * C5810 - C4580 * C5808) *
                 C116 +
             (C4575 * C5813 - C4579 * C5811 + C47358 * C5814 - C4580 * C5812) *
                 C47279) *
                C47391) *
               C47178) *
              C47381) *
         C47045) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C4575 * C124 - C4579 * C117 + C47358 * C125 - C4580 * C118) *
                  C116 +
              (C4575 * C138 - C4579 * C127 + C47358 * C139 - C4580 * C128) *
                  C47279) *
                 C10231 +
             ((C10526 - C10527 + C10528 - C10529) * C116 +
              (C10530 - C10531 + C10532 - C10533) * C47279) *
                 C47391) *
                C3094 +
            (((C10527 - C10526 + C10529 - C10528) * C116 +
              (C10531 - C10530 + C10533 - C10532) * C47279) *
                 C10231 +
             ((C10534 - C10535 + C10536 - C10537) * C116 +
              (C10538 - C10539 + C10540 - C10541) * C47279) *
                 C47391) *
                C47178) *
               C2332 +
           ((((C4731 - C4730 + C4733 - C4732) * C116 +
              (C4735 - C4734 + C4737 - C4736) * C47279) *
                 C10231 +
             ((C5386 - C5387 + C5388 - C5389) * C116 +
              (C5390 - C5391 + C5392 - C5393) * C47279) *
                 C47391) *
                C3094 +
            (((C5387 - C5386 + C5389 - C5388) * C116 +
              (C5391 - C5390 + C5393 - C5392) * C47279) *
                 C10231 +
             ((C5816 - C5817 + C5818 - C5819) * C116 +
              (C5820 - C5821 + C5822 - C5823) * C47279) *
                 C47391) *
                C47178) *
               C47136) *
              C47407 +
          (((((C4579 * C118 - C4575 * C125 + C4580 * C119 - C47358 * C126) *
                  C116 +
              (C4579 * C128 - C4575 * C139 + C4580 * C129 - C47358 * C140) *
                  C47279) *
                 C10231 +
             ((C10542 - C10543 + C10544 - C10545) * C116 +
              (C10546 - C10547 + C10548 - C10549) * C47279) *
                 C47391) *
                C3094 +
            (((C10543 - C10542 + C10545 - C10544) * C116 +
              (C10547 - C10546 + C10549 - C10548) * C47279) *
                 C10231 +
             ((C10550 - C10551 + C10552 - C10553) * C116 +
              (C10554 - C10555 + C10556 - C10557) * C47279) *
                 C47391) *
                C47178) *
               C2332 +
           ((((C4747 - C4746 + C4749 - C4748) * C116 +
              (C4751 - C4750 + C4753 - C4752) * C47279) *
                 C10231 +
             ((C5394 - C5395 + C5396 - C5397) * C116 +
              (C5398 - C5399 + C5400 - C5401) * C47279) *
                 C47391) *
                C3094 +
            (((C5395 - C5394 + C5397 - C5396) * C116 +
              (C5399 - C5398 + C5401 - C5400) * C47279) *
                 C10231 +
             ((C6902 - C6903 + C6904 - C6905) * C116 +
              (C6906 - C6907 + C6908 - C6909) * C47279) *
                 C47391) *
                C47178) *
               C47136) *
              C47394 +
          (((((C4575 * C126 - C4579 * C119 + C47358 * C130 - C4580 * C120) *
                  C116 +
              (C4575 * C140 - C4579 * C129 + C47358 * C141 - C4580 * C131) *
                  C47279) *
                 C10231 +
             ((C10558 - C10559 + C10560 - C10561) * C116 +
              (C10562 - C10563 + C10564 - C10565) * C47279) *
                 C47391) *
                C3094 +
            (((C10559 - C10558 + C10561 - C10560) * C116 +
              (C10563 - C10562 + C10565 - C10564) * C47279) *
                 C10231 +
             ((C10566 - C10567 + C10568 - C10569) * C116 +
              (C10570 - C10571 + C10572 - C10573) * C47279) *
                 C47391) *
                C47178) *
               C2332 +
           ((((C4763 - C4762 + C4765 - C4764) * C116 +
              (C4767 - C4766 + C4769 - C4768) * C47279) *
                 C10231 +
             ((C5402 - C5403 + C5404 - C5405) * C116 +
              (C5406 - C5407 + C5408 - C5409) * C47279) *
                 C47391) *
                C3094 +
            (((C5403 - C5402 + C5405 - C5404) * C116 +
              (C5407 - C5406 + C5409 - C5408) * C47279) *
                 C10231 +
             ((C4575 * C1161 - C4579 * C1152 + C47358 * C2015 - C4580 * C2014) *
                  C116 +
              (C4575 * C1179 - C4579 * C1164 + C47358 * C2017 - C4580 * C2016) *
                  C47279) *
                 C47391) *
                C47178) *
               C47136) *
              C47365)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C4575 * C124 - C4579 * C117 + C47358 * C125 - C4580 * C118) *
                 C116 +
             (C4575 * C138 - C4579 * C127 + C47358 * C139 - C4580 * C128) *
                 C47279) *
                C10231 +
            ((C10526 - C10527 + C10528 - C10529) * C116 +
             (C10530 - C10531 + C10532 - C10533) * C47279) *
                C47391) *
               C47418 +
           (((C10527 - C10526 + C10529 - C10528) * C116 +
             (C10531 - C10530 + C10533 - C10532) * C47279) *
                C10231 +
            ((C10534 - C10535 + C10536 - C10537) * C116 +
             (C10538 - C10539 + C10540 - C10541) * C47279) *
                C47391) *
               C47415 +
           (((C10535 - C10534 + C10537 - C10536) * C116 +
             (C10539 - C10538 + C10541 - C10540) * C47279) *
                C10231 +
            ((C12246 - C12247 + C12248 - C12249) * C116 +
             (C12250 - C12251 + C12252 - C12253) * C47279) *
                C47391) *
               C47406 +
           (((C12247 - C12246 + C12249 - C12248) * C116 +
             (C12251 - C12250 + C12253 - C12252) * C47279) *
                C10231 +
            ((C12254 - C12255 + C12256 - C12257) * C116 +
             (C12258 - C12259 + C12260 - C12261) * C47279) *
                C47391) *
               C47387) *
              C2332 +
          ((((C4731 - C4730 + C4733 - C4732) * C116 +
             (C4735 - C4734 + C4737 - C4736) * C47279) *
                C10231 +
            ((C5386 - C5387 + C5388 - C5389) * C116 +
             (C5390 - C5391 + C5392 - C5393) * C47279) *
                C47391) *
               C47418 +
           (((C5387 - C5386 + C5389 - C5388) * C116 +
             (C5391 - C5390 + C5393 - C5392) * C47279) *
                C10231 +
            ((C5816 - C5817 + C5818 - C5819) * C116 +
             (C5820 - C5821 + C5822 - C5823) * C47279) *
                C47391) *
               C47415 +
           (((C5817 - C5816 + C5819 - C5818) * C116 +
             (C5821 - C5820 + C5823 - C5822) * C47279) *
                C10231 +
            ((C7178 - C7179 + C7180 - C7181) * C116 +
             (C7182 - C7183 + C7184 - C7185) * C47279) *
                C47391) *
               C47406 +
           (((C7179 - C7178 + C7181 - C7180) * C116 +
             (C7183 - C7182 + C7185 - C7184) * C47279) *
                C10231 +
            ((C4575 * C6701 - C4579 * C6699 + C47358 * C6702 - C4580 * C6700) *
                 C116 +
             (C4575 * C6705 - C4579 * C6703 + C47358 * C6706 - C4580 * C6704) *
                 C47279) *
                C47391) *
               C47387) *
              C47136) *
         C47045) /
            (p * q * std::sqrt(p + q));
    d2ee[58] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C4575 * C124 - C4579 * C117 + C47358 * C125 - C4580 * C118) *
                  C116 +
              (C4575 * C138 - C4579 * C127 + C47358 * C139 - C4580 * C128) *
                  C47279) *
                 C10231 +
             ((C10526 - C10527 + C10528 - C10529) * C116 +
              (C10530 - C10531 + C10532 - C10533) * C47279) *
                 C47391) *
                C47174 +
            (((C10527 - C10526 + C10529 - C10528) * C116 +
              (C10531 - C10530 + C10533 - C10532) * C47279) *
                 C10231 +
             ((C10534 - C10535 + C10536 - C10537) * C116 +
              (C10538 - C10539 + C10540 - C10541) * C47279) *
                 C47391) *
                C47181 +
            (((C10535 - C10534 + C10537 - C10536) * C116 +
              (C10539 - C10538 + C10541 - C10540) * C47279) *
                 C10231 +
             ((C12246 - C12247 + C12248 - C12249) * C116 +
              (C12250 - C12251 + C12252 - C12253) * C47279) *
                 C47391) *
                C3602) *
               C2332 +
           ((((C4731 - C4730 + C4733 - C4732) * C116 +
              (C4735 - C4734 + C4737 - C4736) * C47279) *
                 C10231 +
             ((C5386 - C5387 + C5388 - C5389) * C116 +
              (C5390 - C5391 + C5392 - C5393) * C47279) *
                 C47391) *
                C47174 +
            (((C5387 - C5386 + C5389 - C5388) * C116 +
              (C5391 - C5390 + C5393 - C5392) * C47279) *
                 C10231 +
             ((C5816 - C5817 + C5818 - C5819) * C116 +
              (C5820 - C5821 + C5822 - C5823) * C47279) *
                 C47391) *
                C47181 +
            (((C5817 - C5816 + C5819 - C5818) * C116 +
              (C5821 - C5820 + C5823 - C5822) * C47279) *
                 C10231 +
             ((C7178 - C7179 + C7180 - C7181) * C116 +
              (C7182 - C7183 + C7184 - C7185) * C47279) *
                 C47391) *
                C3602) *
               C47136) *
              C47325 +
          (((((C4579 * C118 - C4575 * C125 + C4580 * C119 - C47358 * C126) *
                  C116 +
              (C4579 * C128 - C4575 * C139 + C4580 * C129 - C47358 * C140) *
                  C47279) *
                 C10231 +
             ((C10542 - C10543 + C10544 - C10545) * C116 +
              (C10546 - C10547 + C10548 - C10549) * C47279) *
                 C47391) *
                C47174 +
            (((C10543 - C10542 + C10545 - C10544) * C116 +
              (C10547 - C10546 + C10549 - C10548) * C47279) *
                 C10231 +
             ((C10550 - C10551 + C10552 - C10553) * C116 +
              (C10554 - C10555 + C10556 - C10557) * C47279) *
                 C47391) *
                C47181 +
            (((C10551 - C10550 + C10553 - C10552) * C116 +
              (C10555 - C10554 + C10557 - C10556) * C47279) *
                 C10231 +
             ((C12586 - C12587 + C12588 - C12589) * C116 +
              (C12590 - C12591 + C12592 - C12593) * C47279) *
                 C47391) *
                C3602) *
               C2332 +
           ((((C4747 - C4746 + C4749 - C4748) * C116 +
              (C4751 - C4750 + C4753 - C4752) * C47279) *
                 C10231 +
             ((C5394 - C5395 + C5396 - C5397) * C116 +
              (C5398 - C5399 + C5400 - C5401) * C47279) *
                 C47391) *
                C47174 +
            (((C5395 - C5394 + C5397 - C5396) * C116 +
              (C5399 - C5398 + C5401 - C5400) * C47279) *
                 C10231 +
             ((C6902 - C6903 + C6904 - C6905) * C116 +
              (C6906 - C6907 + C6908 - C6909) * C47279) *
                 C47391) *
                C47181 +
            (((C6903 - C6902 + C6905 - C6904) * C116 +
              (C6907 - C6906 + C6909 - C6908) * C47279) *
                 C10231 +
             ((C4575 * C2226 - C4579 * C2223 + C47358 * C2227 - C4580 * C2224) *
                  C116 +
              (C4575 * C2232 - C4579 * C2229 + C47358 * C2233 - C4580 * C2230) *
                  C47279) *
                 C47391) *
                C3602) *
               C47136) *
              C47056)) /
        (p * q * std::sqrt(p + q));
    d2ee[59] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C4575 * C124 - C4579 * C117 + C47358 * C125 - C4580 * C118) *
                  C116 +
              (C4575 * C138 - C4579 * C127 + C47358 * C139 - C4580 * C128) *
                  C47279) *
                 C10231 +
             ((C10526 - C10527 + C10528 - C10529) * C116 +
              (C10530 - C10531 + C10532 - C10533) * C47279) *
                 C47391) *
                C3094 +
            (((C10527 - C10526 + C10529 - C10528) * C116 +
              (C10531 - C10530 + C10533 - C10532) * C47279) *
                 C10231 +
             ((C10534 - C10535 + C10536 - C10537) * C116 +
              (C10538 - C10539 + C10540 - C10541) * C47279) *
                 C47391) *
                C47178) *
               C2332 +
           ((((C4731 - C4730 + C4733 - C4732) * C116 +
              (C4735 - C4734 + C4737 - C4736) * C47279) *
                 C10231 +
             ((C5386 - C5387 + C5388 - C5389) * C116 +
              (C5390 - C5391 + C5392 - C5393) * C47279) *
                 C47391) *
                C3094 +
            (((C5387 - C5386 + C5389 - C5388) * C116 +
              (C5391 - C5390 + C5393 - C5392) * C47279) *
                 C10231 +
             ((C5816 - C5817 + C5818 - C5819) * C116 +
              (C5820 - C5821 + C5822 - C5823) * C47279) *
                 C47391) *
                C47178) *
               C47136) *
              C47407 +
          (((((C4579 * C118 - C4575 * C125 + C4580 * C119 - C47358 * C126) *
                  C116 +
              (C4579 * C128 - C4575 * C139 + C4580 * C129 - C47358 * C140) *
                  C47279) *
                 C10231 +
             ((C10542 - C10543 + C10544 - C10545) * C116 +
              (C10546 - C10547 + C10548 - C10549) * C47279) *
                 C47391) *
                C3094 +
            (((C10543 - C10542 + C10545 - C10544) * C116 +
              (C10547 - C10546 + C10549 - C10548) * C47279) *
                 C10231 +
             ((C10550 - C10551 + C10552 - C10553) * C116 +
              (C10554 - C10555 + C10556 - C10557) * C47279) *
                 C47391) *
                C47178) *
               C2332 +
           ((((C4747 - C4746 + C4749 - C4748) * C116 +
              (C4751 - C4750 + C4753 - C4752) * C47279) *
                 C10231 +
             ((C5394 - C5395 + C5396 - C5397) * C116 +
              (C5398 - C5399 + C5400 - C5401) * C47279) *
                 C47391) *
                C3094 +
            (((C5395 - C5394 + C5397 - C5396) * C116 +
              (C5399 - C5398 + C5401 - C5400) * C47279) *
                 C10231 +
             ((C6902 - C6903 + C6904 - C6905) * C116 +
              (C6906 - C6907 + C6908 - C6909) * C47279) *
                 C47391) *
                C47178) *
               C47136) *
              C47394 +
          (((((C4575 * C126 - C4579 * C119 + C47358 * C130 - C4580 * C120) *
                  C116 +
              (C4575 * C140 - C4579 * C129 + C47358 * C141 - C4580 * C131) *
                  C47279) *
                 C10231 +
             ((C10558 - C10559 + C10560 - C10561) * C116 +
              (C10562 - C10563 + C10564 - C10565) * C47279) *
                 C47391) *
                C3094 +
            (((C10559 - C10558 + C10561 - C10560) * C116 +
              (C10563 - C10562 + C10565 - C10564) * C47279) *
                 C10231 +
             ((C10566 - C10567 + C10568 - C10569) * C116 +
              (C10570 - C10571 + C10572 - C10573) * C47279) *
                 C47391) *
                C47178) *
               C2332 +
           ((((C4763 - C4762 + C4765 - C4764) * C116 +
              (C4767 - C4766 + C4769 - C4768) * C47279) *
                 C10231 +
             ((C5402 - C5403 + C5404 - C5405) * C116 +
              (C5406 - C5407 + C5408 - C5409) * C47279) *
                 C47391) *
                C3094 +
            (((C5403 - C5402 + C5405 - C5404) * C116 +
              (C5407 - C5406 + C5409 - C5408) * C47279) *
                 C10231 +
             ((C4575 * C1161 - C4579 * C1152 + C47358 * C2015 - C4580 * C2014) *
                  C116 +
              (C4575 * C1179 - C4579 * C1164 + C47358 * C2017 - C4580 * C2016) *
                  C47279) *
                 C47391) *
                C47178) *
               C47136) *
              C47365)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C4575 * C124 - C4579 * C117 + C47358 * C125 - C4580 * C118) *
                 C116 +
             (C4575 * C138 - C4579 * C127 + C47358 * C139 - C4580 * C128) *
                 C47279) *
                C10231 +
            ((C10526 - C10527 + C10528 - C10529) * C116 +
             (C10530 - C10531 + C10532 - C10533) * C47279) *
                C47391) *
               C3094 +
           (((C10527 - C10526 + C10529 - C10528) * C116 +
             (C10531 - C10530 + C10533 - C10532) * C47279) *
                C10231 +
            ((C10534 - C10535 + C10536 - C10537) * C116 +
             (C10538 - C10539 + C10540 - C10541) * C47279) *
                C47391) *
               C47178) *
              C47417 +
          ((((C4731 - C4730 + C4733 - C4732) * C116 +
             (C4735 - C4734 + C4737 - C4736) * C47279) *
                C10231 +
            ((C5386 - C5387 + C5388 - C5389) * C116 +
             (C5390 - C5391 + C5392 - C5393) * C47279) *
                C47391) *
               C3094 +
           (((C5387 - C5386 + C5389 - C5388) * C116 +
             (C5391 - C5390 + C5393 - C5392) * C47279) *
                C10231 +
            ((C5816 - C5817 + C5818 - C5819) * C116 +
             (C5820 - C5821 + C5822 - C5823) * C47279) *
                C47391) *
               C47178) *
              C47413 +
          ((((C4739 - C4738 + C4741 - C4740) * C116 +
             (C4743 - C4742 + C4745 - C4744) * C47279) *
                C10231 +
            ((C5824 - C5825 + C5826 - C5827) * C116 +
             (C5828 - C5829 + C5830 - C5831) * C47279) *
                C47391) *
               C3094 +
           (((C5825 - C5824 + C5827 - C5826) * C116 +
             (C5829 - C5828 + C5831 - C5830) * C47279) *
                C10231 +
            ((C5832 - C5833 + C5834 - C5835) * C116 +
             (C5836 - C5837 + C5838 - C5839) * C47279) *
                C47391) *
               C47178) *
              C47403 +
          ((((C5647 - C5646 + C5649 - C5648) * C116 +
             (C5651 - C5650 + C5653 - C5652) * C47279) *
                C10231 +
            ((C6318 - C6319 + C6320 - C6321) * C116 +
             (C6322 - C6323 + C6324 - C6325) * C47279) *
                C47391) *
               C3094 +
           (((C6319 - C6318 + C6321 - C6320) * C116 +
             (C6323 - C6322 + C6325 - C6324) * C47279) *
                C10231 +
            ((C4575 * C5809 - C4579 * C5807 + C47358 * C5810 - C4580 * C5808) *
                 C116 +
             (C4575 * C5813 - C4579 * C5811 + C47358 * C5814 - C4580 * C5812) *
                 C47279) *
                C47391) *
               C47178) *
              C47381) *
         C47045) /
            (p * q * std::sqrt(p + q));
    d2ee[60] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C4575 * C124 - C4579 * C117 + C47358 * C125 - C4580 * C118) *
                 C116 +
             (C4575 * C138 - C4579 * C127 + C47358 * C139 - C4580 * C128) *
                 C47279) *
                C10231 +
            ((C10526 - C10527 + C10528 - C10529) * C116 +
             (C10530 - C10531 + C10532 - C10533) * C47279) *
                C47391) *
               C47091 * C1284 +
           (((C4731 - C4730 + C4733 - C4732) * C116 +
             (C4735 - C4734 + C4737 - C4736) * C47279) *
                C10231 +
            ((C5386 - C5387 + C5388 - C5389) * C116 +
             (C5390 - C5391 + C5392 - C5393) * C47279) *
                C47391) *
               C47091 * C1285 +
           (((C4739 - C4738 + C4741 - C4740) * C116 +
             (C4743 - C4742 + C4745 - C4744) * C47279) *
                C10231 +
            ((C5824 - C5825 + C5826 - C5827) * C116 +
             (C5828 - C5829 + C5830 - C5831) * C47279) *
                C47391) *
               C47091 * C1286 +
           (((C5647 - C5646 + C5649 - C5648) * C116 +
             (C5651 - C5650 + C5653 - C5652) * C47279) *
                C10231 +
            ((C6318 - C6319 + C6320 - C6321) * C116 +
             (C6322 - C6323 + C6324 - C6325) * C47279) *
                C47391) *
               C47091 * C47381) *
              C47325 +
          ((((C4579 * C118 - C4575 * C125 + C4580 * C119 - C47358 * C126) *
                 C116 +
             (C4579 * C128 - C4575 * C139 + C4580 * C129 - C47358 * C140) *
                 C47279) *
                C10231 +
            ((C10542 - C10543 + C10544 - C10545) * C116 +
             (C10546 - C10547 + C10548 - C10549) * C47279) *
                C47391) *
               C47091 * C1284 +
           (((C4747 - C4746 + C4749 - C4748) * C116 +
             (C4751 - C4750 + C4753 - C4752) * C47279) *
                C10231 +
            ((C5394 - C5395 + C5396 - C5397) * C116 +
             (C5398 - C5399 + C5400 - C5401) * C47279) *
                C47391) *
               C47091 * C1285 +
           (((C4755 - C4754 + C4757 - C4756) * C116 +
             (C4759 - C4758 + C4761 - C4760) * C47279) *
                C10231 +
            ((C6172 - C6173 + C6174 - C6175) * C116 +
             (C6176 - C6177 + C6178 - C6179) * C47279) *
                C47391) *
               C47091 * C1286 +
           (((C5971 - C5970 + C5973 - C5972) * C116 +
             (C5975 - C5974 + C5977 - C5976) * C47279) *
                C10231 +
            ((C4575 * C1546 - C4579 * C1543 + C47358 * C1547 - C4580 * C1544) *
                 C116 +
             (C4575 * C1552 - C4579 * C1549 + C47358 * C1553 - C4580 * C1550) *
                 C47279) *
                C47391) *
               C47091 * C47381) *
              C47056)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C4575 * C124 - C4579 * C117 + C47358 * C125 - C4580 * C118) *
                 C116 +
             (C4575 * C138 - C4579 * C127 + C47358 * C139 - C4580 * C128) *
                 C47279) *
                C10231 +
            ((C10526 - C10527 + C10528 - C10529) * C116 +
             (C10530 - C10531 + C10532 - C10533) * C47279) *
                C47391) *
               C47091 * C47339 +
           (((C4731 - C4730 + C4733 - C4732) * C116 +
             (C4735 - C4734 + C4737 - C4736) * C47279) *
                C10231 +
            ((C5386 - C5387 + C5388 - C5389) * C116 +
             (C5390 - C5391 + C5392 - C5393) * C47279) *
                C47391) *
               C47091 * C47136) *
              C554 +
          ((((C4579 * C118 - C4575 * C125 + C4580 * C119 - C47358 * C126) *
                 C116 +
             (C4579 * C128 - C4575 * C139 + C4580 * C129 - C47358 * C140) *
                 C47279) *
                C10231 +
            ((C10542 - C10543 + C10544 - C10545) * C116 +
             (C10546 - C10547 + C10548 - C10549) * C47279) *
                C47391) *
               C47091 * C47339 +
           (((C4747 - C4746 + C4749 - C4748) * C116 +
             (C4751 - C4750 + C4753 - C4752) * C47279) *
                C10231 +
            ((C5394 - C5395 + C5396 - C5397) * C116 +
             (C5398 - C5399 + C5400 - C5401) * C47279) *
                C47391) *
               C47091 * C47136) *
              C555 +
          ((((C4575 * C126 - C4579 * C119 + C47358 * C130 - C4580 * C120) *
                 C116 +
             (C4575 * C140 - C4579 * C129 + C47358 * C141 - C4580 * C131) *
                 C47279) *
                C10231 +
            ((C10558 - C10559 + C10560 - C10561) * C116 +
             (C10562 - C10563 + C10564 - C10565) * C47279) *
                C47391) *
               C47091 * C47339 +
           (((C4763 - C4762 + C4765 - C4764) * C116 +
             (C4767 - C4766 + C4769 - C4768) * C47279) *
                C10231 +
            ((C5402 - C5403 + C5404 - C5405) * C116 +
             (C5406 - C5407 + C5408 - C5409) * C47279) *
                C47391) *
               C47091 * C47136) *
              C556 +
          ((((C4579 * C120 - C4575 * C130 + C4580 * C121 - C47358 * C132) *
                 C116 +
             (C4579 * C131 - C4575 * C141 + C4580 * C133 - C47358 * C142) *
                 C47279) *
                C10231 +
            ((C4579 * C420 - C4575 * C436 + C4580 * C422 - C47358 * C440) *
                 C116 +
             (C4579 * C437 - C4575 * C450 + C4580 * C441 - C47358 * C452) *
                 C47279) *
                C47391) *
               C47091 * C47339 +
           (((C5055 - C5054 + C5057 - C5056) * C116 +
             (C5059 - C5058 + C5061 - C5060) * C47279) *
                C10231 +
            ((C4575 * C823 - C4579 * C815 + C47358 * C825 - C4580 * C816) *
                 C116 +
             (C4575 * C830 - C4579 * C824 + C47358 * C831 - C4580 * C826) *
                 C47279) *
                C47391) *
               C47091 * C47136) *
              C47375)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C4575 * C124 - C4579 * C117 + C47358 * C125 - C4580 * C118) *
                  C116 +
              (C4575 * C138 - C4579 * C127 + C47358 * C139 - C4580 * C128) *
                  C47279) *
                 C10231 +
             ((C10526 - C10527 + C10528 - C10529) * C116 +
              (C10530 - C10531 + C10532 - C10533) * C47279) *
                 C47391) *
                C1664 +
            (((C10527 - C10526 + C10529 - C10528) * C116 +
              (C10531 - C10530 + C10533 - C10532) * C47279) *
                 C10231 +
             ((C10534 - C10535 + C10536 - C10537) * C116 +
              (C10538 - C10539 + C10540 - C10541) * C47279) *
                 C47391) *
                C1665 +
            (((C10535 - C10534 + C10537 - C10536) * C116 +
              (C10539 - C10538 + C10541 - C10540) * C47279) *
                 C10231 +
             ((C12246 - C12247 + C12248 - C12249) * C116 +
              (C12250 - C12251 + C12252 - C12253) * C47279) *
                 C47391) *
                C47374) *
               C47339 +
           ((((C4731 - C4730 + C4733 - C4732) * C116 +
              (C4735 - C4734 + C4737 - C4736) * C47279) *
                 C10231 +
             ((C5386 - C5387 + C5388 - C5389) * C116 +
              (C5390 - C5391 + C5392 - C5393) * C47279) *
                 C47391) *
                C1664 +
            (((C5387 - C5386 + C5389 - C5388) * C116 +
              (C5391 - C5390 + C5393 - C5392) * C47279) *
                 C10231 +
             ((C5816 - C5817 + C5818 - C5819) * C116 +
              (C5820 - C5821 + C5822 - C5823) * C47279) *
                 C47391) *
                C1665 +
            (((C5817 - C5816 + C5819 - C5818) * C116 +
              (C5821 - C5820 + C5823 - C5822) * C47279) *
                 C10231 +
             ((C7178 - C7179 + C7180 - C7181) * C116 +
              (C7182 - C7183 + C7184 - C7185) * C47279) *
                 C47391) *
                C47374) *
               C47136) *
              C47325 +
          (((((C4579 * C118 - C4575 * C125 + C4580 * C119 - C47358 * C126) *
                  C116 +
              (C4579 * C128 - C4575 * C139 + C4580 * C129 - C47358 * C140) *
                  C47279) *
                 C10231 +
             ((C10542 - C10543 + C10544 - C10545) * C116 +
              (C10546 - C10547 + C10548 - C10549) * C47279) *
                 C47391) *
                C1664 +
            (((C10543 - C10542 + C10545 - C10544) * C116 +
              (C10547 - C10546 + C10549 - C10548) * C47279) *
                 C10231 +
             ((C10550 - C10551 + C10552 - C10553) * C116 +
              (C10554 - C10555 + C10556 - C10557) * C47279) *
                 C47391) *
                C1665 +
            (((C10551 - C10550 + C10553 - C10552) * C116 +
              (C10555 - C10554 + C10557 - C10556) * C47279) *
                 C10231 +
             ((C4579 * C1845 - C4575 * C1851 + C4580 * C1846 - C47358 * C1852) *
                  C116 +
              (C4579 * C1854 - C4575 * C1863 + C4580 * C1855 - C47358 * C1864) *
                  C47279) *
                 C47391) *
                C47374) *
               C47339 +
           ((((C4747 - C4746 + C4749 - C4748) * C116 +
              (C4751 - C4750 + C4753 - C4752) * C47279) *
                 C10231 +
             ((C5394 - C5395 + C5396 - C5397) * C116 +
              (C5398 - C5399 + C5400 - C5401) * C47279) *
                 C47391) *
                C1664 +
            (((C5395 - C5394 + C5397 - C5396) * C116 +
              (C5399 - C5398 + C5401 - C5400) * C47279) *
                 C10231 +
             ((C6902 - C6903 + C6904 - C6905) * C116 +
              (C6906 - C6907 + C6908 - C6909) * C47279) *
                 C47391) *
                C1665 +
            (((C6903 - C6902 + C6905 - C6904) * C116 +
              (C6907 - C6906 + C6909 - C6908) * C47279) *
                 C10231 +
             ((C4575 * C2226 - C4579 * C2223 + C47358 * C2227 - C4580 * C2224) *
                  C116 +
              (C4575 * C2232 - C4579 * C2229 + C47358 * C2233 - C4580 * C2230) *
                  C47279) *
                 C47391) *
                C47374) *
               C47136) *
              C47056)) /
            (p * q * std::sqrt(p + q));
    d2ee[61] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C4575 * C124 - C4579 * C117 + C47358 * C125 - C4580 * C118) *
                 C116 +
             (C4575 * C138 - C4579 * C127 + C47358 * C139 - C4580 * C128) *
                 C47279) *
                C10231 +
            ((C10526 - C10527 + C10528 - C10529) * C116 +
             (C10530 - C10531 + C10532 - C10533) * C47279) *
                C47391) *
               C47340 +
           (((C10527 - C10526 + C10529 - C10528) * C116 +
             (C10531 - C10530 + C10533 - C10532) * C47279) *
                C10231 +
            ((C10534 - C10535 + C10536 - C10537) * C116 +
             (C10538 - C10539 + C10540 - C10541) * C47279) *
                C47391) *
               C47178) *
              C1284 +
          ((((C4731 - C4730 + C4733 - C4732) * C116 +
             (C4735 - C4734 + C4737 - C4736) * C47279) *
                C10231 +
            ((C5386 - C5387 + C5388 - C5389) * C116 +
             (C5390 - C5391 + C5392 - C5393) * C47279) *
                C47391) *
               C47340 +
           (((C5387 - C5386 + C5389 - C5388) * C116 +
             (C5391 - C5390 + C5393 - C5392) * C47279) *
                C10231 +
            ((C5816 - C5817 + C5818 - C5819) * C116 +
             (C5820 - C5821 + C5822 - C5823) * C47279) *
                C47391) *
               C47178) *
              C1285 +
          ((((C4739 - C4738 + C4741 - C4740) * C116 +
             (C4743 - C4742 + C4745 - C4744) * C47279) *
                C10231 +
            ((C5824 - C5825 + C5826 - C5827) * C116 +
             (C5828 - C5829 + C5830 - C5831) * C47279) *
                C47391) *
               C47340 +
           (((C5825 - C5824 + C5827 - C5826) * C116 +
             (C5829 - C5828 + C5831 - C5830) * C47279) *
                C10231 +
            ((C5832 - C5833 + C5834 - C5835) * C116 +
             (C5836 - C5837 + C5838 - C5839) * C47279) *
                C47391) *
               C47178) *
              C1286 +
          ((((C5647 - C5646 + C5649 - C5648) * C116 +
             (C5651 - C5650 + C5653 - C5652) * C47279) *
                C10231 +
            ((C6318 - C6319 + C6320 - C6321) * C116 +
             (C6322 - C6323 + C6324 - C6325) * C47279) *
                C47391) *
               C47340 +
           (((C6319 - C6318 + C6321 - C6320) * C116 +
             (C6323 - C6322 + C6325 - C6324) * C47279) *
                C10231 +
            ((C4575 * C5809 - C4579 * C5807 + C47358 * C5810 - C4580 * C5808) *
                 C116 +
             (C4575 * C5813 - C4579 * C5811 + C47358 * C5814 - C4580 * C5812) *
                 C47279) *
                C47391) *
               C47178) *
              C47381) *
         C47045) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C4575 * C124 - C4579 * C117 + C47358 * C125 - C4580 * C118) *
                  C116 +
              (C4575 * C138 - C4579 * C127 + C47358 * C139 - C4580 * C128) *
                  C47279) *
                 C10231 +
             ((C10526 - C10527 + C10528 - C10529) * C116 +
              (C10530 - C10531 + C10532 - C10533) * C47279) *
                 C47391) *
                C47340 +
            (((C10527 - C10526 + C10529 - C10528) * C116 +
              (C10531 - C10530 + C10533 - C10532) * C47279) *
                 C10231 +
             ((C10534 - C10535 + C10536 - C10537) * C116 +
              (C10538 - C10539 + C10540 - C10541) * C47279) *
                 C47391) *
                C47178) *
               C47339 +
           ((((C4731 - C4730 + C4733 - C4732) * C116 +
              (C4735 - C4734 + C4737 - C4736) * C47279) *
                 C10231 +
             ((C5386 - C5387 + C5388 - C5389) * C116 +
              (C5390 - C5391 + C5392 - C5393) * C47279) *
                 C47391) *
                C47340 +
            (((C5387 - C5386 + C5389 - C5388) * C116 +
              (C5391 - C5390 + C5393 - C5392) * C47279) *
                 C10231 +
             ((C5816 - C5817 + C5818 - C5819) * C116 +
              (C5820 - C5821 + C5822 - C5823) * C47279) *
                 C47391) *
                C47178) *
               C47136) *
              C258 +
          (((((C4579 * C118 - C4575 * C125 + C4580 * C119 - C47358 * C126) *
                  C116 +
              (C4579 * C128 - C4575 * C139 + C4580 * C129 - C47358 * C140) *
                  C47279) *
                 C10231 +
             ((C10542 - C10543 + C10544 - C10545) * C116 +
              (C10546 - C10547 + C10548 - C10549) * C47279) *
                 C47391) *
                C47340 +
            (((C10543 - C10542 + C10545 - C10544) * C116 +
              (C10547 - C10546 + C10549 - C10548) * C47279) *
                 C10231 +
             ((C10550 - C10551 + C10552 - C10553) * C116 +
              (C10554 - C10555 + C10556 - C10557) * C47279) *
                 C47391) *
                C47178) *
               C47339 +
           ((((C4747 - C4746 + C4749 - C4748) * C116 +
              (C4751 - C4750 + C4753 - C4752) * C47279) *
                 C10231 +
             ((C5394 - C5395 + C5396 - C5397) * C116 +
              (C5398 - C5399 + C5400 - C5401) * C47279) *
                 C47391) *
                C47340 +
            (((C5395 - C5394 + C5397 - C5396) * C116 +
              (C5399 - C5398 + C5401 - C5400) * C47279) *
                 C10231 +
             ((C6902 - C6903 + C6904 - C6905) * C116 +
              (C6906 - C6907 + C6908 - C6909) * C47279) *
                 C47391) *
                C47178) *
               C47136) *
              C259 +
          (((((C4575 * C126 - C4579 * C119 + C47358 * C130 - C4580 * C120) *
                  C116 +
              (C4575 * C140 - C4579 * C129 + C47358 * C141 - C4580 * C131) *
                  C47279) *
                 C10231 +
             ((C10558 - C10559 + C10560 - C10561) * C116 +
              (C10562 - C10563 + C10564 - C10565) * C47279) *
                 C47391) *
                C47340 +
            (((C10559 - C10558 + C10561 - C10560) * C116 +
              (C10563 - C10562 + C10565 - C10564) * C47279) *
                 C10231 +
             ((C10566 - C10567 + C10568 - C10569) * C116 +
              (C10570 - C10571 + C10572 - C10573) * C47279) *
                 C47391) *
                C47178) *
               C47339 +
           ((((C4763 - C4762 + C4765 - C4764) * C116 +
              (C4767 - C4766 + C4769 - C4768) * C47279) *
                 C10231 +
             ((C5402 - C5403 + C5404 - C5405) * C116 +
              (C5406 - C5407 + C5408 - C5409) * C47279) *
                 C47391) *
                C47340 +
            (((C5403 - C5402 + C5405 - C5404) * C116 +
              (C5407 - C5406 + C5409 - C5408) * C47279) *
                 C10231 +
             ((C4575 * C1161 - C4579 * C1152 + C47358 * C2015 - C4580 * C2014) *
                  C116 +
              (C4575 * C1179 - C4579 * C1164 + C47358 * C2017 - C4580 * C2016) *
                  C47279) *
                 C47391) *
                C47178) *
               C47136) *
              C47365)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C4575 * C124 - C4579 * C117 + C47358 * C125 - C4580 * C118) *
                 C116 +
             (C4575 * C138 - C4579 * C127 + C47358 * C139 - C4580 * C128) *
                 C47279) *
                C10231 +
            ((C10526 - C10527 + C10528 - C10529) * C116 +
             (C10530 - C10531 + C10532 - C10533) * C47279) *
                C47391) *
               C2116 +
           (((C10527 - C10526 + C10529 - C10528) * C116 +
             (C10531 - C10530 + C10533 - C10532) * C47279) *
                C10231 +
            ((C10534 - C10535 + C10536 - C10537) * C116 +
             (C10538 - C10539 + C10540 - C10541) * C47279) *
                C47391) *
               C2117 +
           (((C10535 - C10534 + C10537 - C10536) * C116 +
             (C10539 - C10538 + C10541 - C10540) * C47279) *
                C10231 +
            ((C12246 - C12247 + C12248 - C12249) * C116 +
             (C12250 - C12251 + C12252 - C12253) * C47279) *
                C47391) *
               C2118 +
           (((C12247 - C12246 + C12249 - C12248) * C116 +
             (C12251 - C12250 + C12253 - C12252) * C47279) *
                C10231 +
            ((C12254 - C12255 + C12256 - C12257) * C116 +
             (C12258 - C12259 + C12260 - C12261) * C47279) *
                C47391) *
               C47387) *
              C47339 +
          ((((C4731 - C4730 + C4733 - C4732) * C116 +
             (C4735 - C4734 + C4737 - C4736) * C47279) *
                C10231 +
            ((C5386 - C5387 + C5388 - C5389) * C116 +
             (C5390 - C5391 + C5392 - C5393) * C47279) *
                C47391) *
               C2116 +
           (((C5387 - C5386 + C5389 - C5388) * C116 +
             (C5391 - C5390 + C5393 - C5392) * C47279) *
                C10231 +
            ((C5816 - C5817 + C5818 - C5819) * C116 +
             (C5820 - C5821 + C5822 - C5823) * C47279) *
                C47391) *
               C2117 +
           (((C5817 - C5816 + C5819 - C5818) * C116 +
             (C5821 - C5820 + C5823 - C5822) * C47279) *
                C10231 +
            ((C7178 - C7179 + C7180 - C7181) * C116 +
             (C7182 - C7183 + C7184 - C7185) * C47279) *
                C47391) *
               C2118 +
           (((C7179 - C7178 + C7181 - C7180) * C116 +
             (C7183 - C7182 + C7185 - C7184) * C47279) *
                C10231 +
            ((C4575 * C6701 - C4579 * C6699 + C47358 * C6702 - C4580 * C6700) *
                 C116 +
             (C4575 * C6705 - C4579 * C6703 + C47358 * C6706 - C4580 * C6704) *
                 C47279) *
                C47391) *
               C47387) *
              C47136) *
         C47045) /
            (p * q * std::sqrt(p + q));
    d2ee[62] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C4575 * C124 - C4579 * C117 + C47358 * C125 - C4580 * C118) *
                    C116 +
                (C4575 * C138 - C4579 * C127 + C47358 * C139 - C4580 * C128) *
                    C47279) *
                   C10231 +
               ((C4575 * C424 - C4579 * C414 + C47358 * C425 - C4580 * C415) *
                    C116 +
                (C4575 * C444 - C4579 * C427 + C47358 * C445 - C4580 * C428) *
                    C47279) *
                   C47391) *
                  C47091 * C47073 * C108 +
              (((C4579 * C118 - C4575 * C125 + C4580 * C119 - C47358 * C126) *
                    C116 +
                (C4579 * C128 - C4575 * C139 + C4580 * C129 - C47358 * C140) *
                    C47279) *
                   C10231 +
               ((C4579 * C415 - C4575 * C425 + C4580 * C416 - C47358 * C426) *
                    C116 +
                (C4579 * C428 - C4575 * C445 + C4580 * C429 - C47358 * C446) *
                    C47279) *
                   C47391) *
                  C47091 * C47073 * C109 +
              (((C4575 * C126 - C4579 * C119 + C47358 * C130 - C4580 * C120) *
                    C116 +
                (C4575 * C140 - C4579 * C129 + C47358 * C141 - C4580 * C131) *
                    C47279) *
                   C10231 +
               ((C4575 * C426 - C4579 * C416 + C47358 * C436 - C4580 * C420) *
                    C116 +
                (C4575 * C446 - C4579 * C429 + C47358 * C450 - C4580 * C437) *
                    C47279) *
                   C47391) *
                  C47091 * C47073 * C110 +
              (((C4579 * C120 - C4575 * C130 + C4580 * C121 - C47358 * C132) *
                    C116 +
                (C4579 * C131 - C4575 * C141 + C4580 * C133 - C47358 * C142) *
                    C47279) *
                   C10231 +
               ((C4579 * C420 - C4575 * C436 + C4580 * C422 - C47358 * C440) *
                    C116 +
                (C4579 * C437 - C4575 * C450 + C4580 * C441 - C47358 * C452) *
                    C47279) *
                   C47391) *
                  C47091 * C47073 * C111 +
              (((C4575 * C132 - C4579 * C121 + C47358 * C134 - C4580 * C122) *
                    C116 +
                (C4575 * C142 - C4579 * C133 + C47358 * C143 - C4580 * C135) *
                    C47279) *
                   C10231 +
               ((C4575 * C440 - C4579 * C422 + C47358 * C663 - C4580 * C662) *
                    C116 +
                (C4575 * C452 - C4579 * C441 + C47358 * C665 - C4580 * C664) *
                    C47279) *
                   C47391) *
                  C47091 * C47073 * C112) +
         0.5 * std::pow(Pi, 2.5) *
             (((((C4575 * C124 - C4579 * C117 + C47358 * C125 - C4580 * C118) *
                     C116 +
                 (C4575 * C138 - C4579 * C127 + C47358 * C139 - C4580 * C128) *
                     C47279) *
                    C10231 +
                ((C4575 * C424 - C4579 * C414 + C47358 * C425 - C4580 * C415) *
                     C116 +
                 (C4575 * C444 - C4579 * C427 + C47358 * C445 - C4580 * C428) *
                     C47279) *
                    C47391) *
                   C47091 * C47410 +
               (((C4731 - C4730 + C4733 - C4732) * C116 +
                 (C4735 - C4734 + C4737 - C4736) * C47279) *
                    C10231 +
                ((C5386 - C5387 + C5388 - C5389) * C116 +
                 (C5390 - C5391 + C5392 - C5393) * C47279) *
                    C47391) *
                   C47091 * C47398 +
               (((C4739 - C4738 + C4741 - C4740) * C116 +
                 (C4743 - C4742 + C4745 - C4744) * C47279) *
                    C10231 +
                ((C5824 - C5825 + C5826 - C5827) * C116 +
                 (C5828 - C5829 + C5830 - C5831) * C47279) *
                    C47391) *
                   C47091 * C47371) *
                  C258 +
              ((((C4579 * C118 - C4575 * C125 + C4580 * C119 - C47358 * C126) *
                     C116 +
                 (C4579 * C128 - C4575 * C139 + C4580 * C129 - C47358 * C140) *
                     C47279) *
                    C10231 +
                ((C4579 * C415 - C4575 * C425 + C4580 * C416 - C47358 * C426) *
                     C116 +
                 (C4579 * C428 - C4575 * C445 + C4580 * C429 - C47358 * C446) *
                     C47279) *
                    C47391) *
                   C47091 * C47410 +
               (((C4747 - C4746 + C4749 - C4748) * C116 +
                 (C4751 - C4750 + C4753 - C4752) * C47279) *
                    C10231 +
                ((C5394 - C5395 + C5396 - C5397) * C116 +
                 (C5398 - C5399 + C5400 - C5401) * C47279) *
                    C47391) *
                   C47091 * C47398 +
               (((C4755 - C4754 + C4757 - C4756) * C116 +
                 (C4759 - C4758 + C4761 - C4760) * C47279) *
                    C10231 +
                ((C6172 - C6173 + C6174 - C6175) * C116 +
                 (C6176 - C6177 + C6178 - C6179) * C47279) *
                    C47391) *
                   C47091 * C47371) *
                  C259 +
              ((((C4575 * C126 - C4579 * C119 + C47358 * C130 - C4580 * C120) *
                     C116 +
                 (C4575 * C140 - C4579 * C129 + C47358 * C141 - C4580 * C131) *
                     C47279) *
                    C10231 +
                ((C4575 * C426 - C4579 * C416 + C47358 * C436 - C4580 * C420) *
                     C116 +
                 (C4575 * C446 - C4579 * C429 + C47358 * C450 - C4580 * C437) *
                     C47279) *
                    C47391) *
                   C47091 * C47410 +
               (((C4763 - C4762 + C4765 - C4764) * C116 +
                 (C4767 - C4766 + C4769 - C4768) * C47279) *
                    C10231 +
                ((C5402 - C5403 + C5404 - C5405) * C116 +
                 (C5406 - C5407 + C5408 - C5409) * C47279) *
                    C47391) *
                   C47091 * C47398 +
               (((C4771 - C4770 + C4773 - C4772) * C116 +
                 (C4775 - C4774 + C4777 - C4776) * C47279) *
                    C10231 +
                ((C4575 * C1167 - C4579 * C1155 + C47358 * C1441 -
                  C4580 * C1440) *
                     C116 +
                 (C4575 * C1182 - C4579 * C1170 + C47358 * C1443 -
                  C4580 * C1442) *
                     C47279) *
                    C47391) *
                   C47091 * C47371) *
                  C47365)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C4575 * C124 - C4579 * C117 + C47358 * C125 - C4580 * C118) *
                 C116 +
             (C4575 * C138 - C4579 * C127 + C47358 * C139 - C4580 * C128) *
                 C47279) *
                C10231 +
            ((C10526 - C10527 + C10528 - C10529) * C116 +
             (C10530 - C10531 + C10532 - C10533) * C47279) *
                C47391) *
               C47411 +
           (((C10527 - C10526 + C10529 - C10528) * C116 +
             (C10531 - C10530 + C10533 - C10532) * C47279) *
                C10231 +
            ((C10534 - C10535 + C10536 - C10537) * C116 +
             (C10538 - C10539 + C10540 - C10541) * C47279) *
                C47391) *
               C47400 +
           (((C10535 - C10534 + C10537 - C10536) * C116 +
             (C10539 - C10538 + C10541 - C10540) * C47279) *
                C10231 +
            ((C4575 * C1850 - C4579 * C1844 + C47358 * C1851 - C4580 * C1845) *
                 C116 +
             (C4575 * C1862 - C4579 * C1853 + C47358 * C1863 - C4580 * C1854) *
                 C47279) *
                C47391) *
               C47374) *
              C47073 * C258 +
          ((((C4579 * C118 - C4575 * C125 + C4580 * C119 - C47358 * C126) *
                 C116 +
             (C4579 * C128 - C4575 * C139 + C4580 * C129 - C47358 * C140) *
                 C47279) *
                C10231 +
            ((C10542 - C10543 + C10544 - C10545) * C116 +
             (C10546 - C10547 + C10548 - C10549) * C47279) *
                C47391) *
               C47411 +
           (((C10543 - C10542 + C10545 - C10544) * C116 +
             (C10547 - C10546 + C10549 - C10548) * C47279) *
                C10231 +
            ((C10550 - C10551 + C10552 - C10553) * C116 +
             (C10554 - C10555 + C10556 - C10557) * C47279) *
                C47391) *
               C47400 +
           (((C10551 - C10550 + C10553 - C10552) * C116 +
             (C10555 - C10554 + C10557 - C10556) * C47279) *
                C10231 +
            ((C4579 * C1845 - C4575 * C1851 + C4580 * C1846 - C47358 * C1852) *
                 C116 +
             (C4579 * C1854 - C4575 * C1863 + C4580 * C1855 - C47358 * C1864) *
                 C47279) *
                C47391) *
               C47374) *
              C47073 * C259 +
          ((((C4575 * C126 - C4579 * C119 + C47358 * C130 - C4580 * C120) *
                 C116 +
             (C4575 * C140 - C4579 * C129 + C47358 * C141 - C4580 * C131) *
                 C47279) *
                C10231 +
            ((C10558 - C10559 + C10560 - C10561) * C116 +
             (C10562 - C10563 + C10564 - C10565) * C47279) *
                C47391) *
               C47411 +
           (((C10559 - C10558 + C10561 - C10560) * C116 +
             (C10563 - C10562 + C10565 - C10564) * C47279) *
                C10231 +
            ((C10566 - C10567 + C10568 - C10569) * C116 +
             (C10570 - C10571 + C10572 - C10573) * C47279) *
                C47391) *
               C47400 +
           (((C10567 - C10566 + C10569 - C10568) * C116 +
             (C10571 - C10570 + C10573 - C10572) * C47279) *
                C10231 +
            ((C4575 * C1852 - C4579 * C1846 + C47358 * C2121 - C4580 * C2120) *
                 C116 +
             (C4575 * C1864 - C4579 * C1855 + C47358 * C2123 - C4580 * C2122) *
                 C47279) *
                C47391) *
               C47374) *
              C47073 * C47365)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C4575 * C124 - C4579 * C117 + C47358 * C125 - C4580 * C118) *
                 C116 +
             (C4575 * C138 - C4579 * C127 + C47358 * C139 - C4580 * C128) *
                 C47279) *
                C10231 +
            ((C10526 - C10527 + C10528 - C10529) * C116 +
             (C10530 - C10531 + C10532 - C10533) * C47279) *
                C47391) *
               C47091 * C942 +
           (((C4731 - C4730 + C4733 - C4732) * C116 +
             (C4735 - C4734 + C4737 - C4736) * C47279) *
                C10231 +
            ((C5386 - C5387 + C5388 - C5389) * C116 +
             (C5390 - C5391 + C5392 - C5393) * C47279) *
                C47391) *
               C47091 * C943 +
           (((C4739 - C4738 + C4741 - C4740) * C116 +
             (C4743 - C4742 + C4745 - C4744) * C47279) *
                C10231 +
            ((C5824 - C5825 + C5826 - C5827) * C116 +
             (C5828 - C5829 + C5830 - C5831) * C47279) *
                C47391) *
               C47091 * C47371) *
              C47407 +
          ((((C4579 * C118 - C4575 * C125 + C4580 * C119 - C47358 * C126) *
                 C116 +
             (C4579 * C128 - C4575 * C139 + C4580 * C129 - C47358 * C140) *
                 C47279) *
                C10231 +
            ((C10542 - C10543 + C10544 - C10545) * C116 +
             (C10546 - C10547 + C10548 - C10549) * C47279) *
                C47391) *
               C47091 * C942 +
           (((C4747 - C4746 + C4749 - C4748) * C116 +
             (C4751 - C4750 + C4753 - C4752) * C47279) *
                C10231 +
            ((C5394 - C5395 + C5396 - C5397) * C116 +
             (C5398 - C5399 + C5400 - C5401) * C47279) *
                C47391) *
               C47091 * C943 +
           (((C4755 - C4754 + C4757 - C4756) * C116 +
             (C4759 - C4758 + C4761 - C4760) * C47279) *
                C10231 +
            ((C6172 - C6173 + C6174 - C6175) * C116 +
             (C6176 - C6177 + C6178 - C6179) * C47279) *
                C47391) *
               C47091 * C47371) *
              C47394 +
          ((((C4575 * C126 - C4579 * C119 + C47358 * C130 - C4580 * C120) *
                 C116 +
             (C4575 * C140 - C4579 * C129 + C47358 * C141 - C4580 * C131) *
                 C47279) *
                C10231 +
            ((C10558 - C10559 + C10560 - C10561) * C116 +
             (C10562 - C10563 + C10564 - C10565) * C47279) *
                C47391) *
               C47091 * C942 +
           (((C4763 - C4762 + C4765 - C4764) * C116 +
             (C4767 - C4766 + C4769 - C4768) * C47279) *
                C10231 +
            ((C5402 - C5403 + C5404 - C5405) * C116 +
             (C5406 - C5407 + C5408 - C5409) * C47279) *
                C47391) *
               C47091 * C943 +
           (((C4771 - C4770 + C4773 - C4772) * C116 +
             (C4775 - C4774 + C4777 - C4776) * C47279) *
                C10231 +
            ((C4575 * C1167 - C4579 * C1155 + C47358 * C1441 - C4580 * C1440) *
                 C116 +
             (C4575 * C1182 - C4579 * C1170 + C47358 * C1443 - C4580 * C1442) *
                 C47279) *
                C47391) *
               C47091 * C47371) *
              C47365)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C4575 * C124 - C4579 * C117 + C47358 * C125 - C4580 * C118) *
                C116 +
            (C4575 * C138 - C4579 * C127 + C47358 * C139 - C4580 * C128) *
                C47279) *
               C10231 +
           ((C10526 - C10527 + C10528 - C10529) * C116 +
            (C10530 - C10531 + C10532 - C10533) * C47279) *
               C47391) *
              C47091 * C1010 +
          (((C4731 - C4730 + C4733 - C4732) * C116 +
            (C4735 - C4734 + C4737 - C4736) * C47279) *
               C10231 +
           ((C5386 - C5387 + C5388 - C5389) * C116 +
            (C5390 - C5391 + C5392 - C5393) * C47279) *
               C47391) *
              C47091 * C1011 +
          (((C4739 - C4738 + C4741 - C4740) * C116 +
            (C4743 - C4742 + C4745 - C4744) * C47279) *
               C10231 +
           ((C5824 - C5825 + C5826 - C5827) * C116 +
            (C5828 - C5829 + C5830 - C5831) * C47279) *
               C47391) *
              C47091 * C1012 +
          (((C5647 - C5646 + C5649 - C5648) * C116 +
            (C5651 - C5650 + C5653 - C5652) * C47279) *
               C10231 +
           ((C6318 - C6319 + C6320 - C6321) * C116 +
            (C6322 - C6323 + C6324 - C6325) * C47279) *
               C47391) *
              C47091 * C1013 +
          (((C5655 - C5654 + C5657 - C5656) * C116 +
            (C5659 - C5658 + C5661 - C5660) * C47279) *
               C10231 +
           ((C4575 * C6311 - C4579 * C6309 + C47358 * C6312 - C4580 * C6310) *
                C116 +
            (C4575 * C6315 - C4579 * C6313 + C47358 * C6316 - C4580 * C6314) *
                C47279) *
               C47391) *
              C47091 * C1014) *
         C47045) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C4575 * C124 - C4579 * C117 + C47358 * C125 - C4580 * C118) *
                 C116 +
             (C4575 * C138 - C4579 * C127 + C47358 * C139 - C4580 * C128) *
                 C47279) *
                C10231 +
            ((C10526 - C10527 + C10528 - C10529) * C116 +
             (C10530 - C10531 + C10532 - C10533) * C47279) *
                C47391) *
               C47411 +
           (((C10527 - C10526 + C10529 - C10528) * C116 +
             (C10531 - C10530 + C10533 - C10532) * C47279) *
                C10231 +
            ((C10534 - C10535 + C10536 - C10537) * C116 +
             (C10538 - C10539 + C10540 - C10541) * C47279) *
                C47391) *
               C47400 +
           (((C10535 - C10534 + C10537 - C10536) * C116 +
             (C10539 - C10538 + C10541 - C10540) * C47279) *
                C10231 +
            ((C4575 * C1850 - C4579 * C1844 + C47358 * C1851 - C4580 * C1845) *
                 C116 +
             (C4575 * C1862 - C4579 * C1853 + C47358 * C1863 - C4580 * C1854) *
                 C47279) *
                C47391) *
               C47374) *
              C942 +
          ((((C4731 - C4730 + C4733 - C4732) * C116 +
             (C4735 - C4734 + C4737 - C4736) * C47279) *
                C10231 +
            ((C5386 - C5387 + C5388 - C5389) * C116 +
             (C5390 - C5391 + C5392 - C5393) * C47279) *
                C47391) *
               C47411 +
           (((C5387 - C5386 + C5389 - C5388) * C116 +
             (C5391 - C5390 + C5393 - C5392) * C47279) *
                C10231 +
            ((C5816 - C5817 + C5818 - C5819) * C116 +
             (C5820 - C5821 + C5822 - C5823) * C47279) *
                C47391) *
               C47400 +
           (((C5817 - C5816 + C5819 - C5818) * C116 +
             (C5821 - C5820 + C5823 - C5822) * C47279) *
                C10231 +
            ((C7178 - C7179 + C7180 - C7181) * C116 +
             (C7182 - C7183 + C7184 - C7185) * C47279) *
                C47391) *
               C47374) *
              C943 +
          ((((C4739 - C4738 + C4741 - C4740) * C116 +
             (C4743 - C4742 + C4745 - C4744) * C47279) *
                C10231 +
            ((C5824 - C5825 + C5826 - C5827) * C116 +
             (C5828 - C5829 + C5830 - C5831) * C47279) *
                C47391) *
               C47411 +
           (((C5825 - C5824 + C5827 - C5826) * C116 +
             (C5829 - C5828 + C5831 - C5830) * C47279) *
                C10231 +
            ((C5832 - C5833 + C5834 - C5835) * C116 +
             (C5836 - C5837 + C5838 - C5839) * C47279) *
                C47391) *
               C47400 +
           (((C5833 - C5832 + C5835 - C5834) * C116 +
             (C5837 - C5836 + C5839 - C5838) * C47279) *
                C10231 +
            ((C4575 * C7171 - C4579 * C7169 + C47358 * C7172 - C4580 * C7170) *
                 C116 +
             (C4575 * C7175 - C4579 * C7173 + C47358 * C7176 - C4580 * C7174) *
                 C47279) *
                C47391) *
               C47374) *
              C47371) *
         C47045) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C4575 * C124 - C4579 * C117 + C47358 * C125 - C4580 * C118) *
                 C116 +
             (C4575 * C138 - C4579 * C127 + C47358 * C139 - C4580 * C128) *
                 C47279) *
                C10231 +
            ((C10526 - C10527 + C10528 - C10529) * C116 +
             (C10530 - C10531 + C10532 - C10533) * C47279) *
                C47391) *
               C1664 +
           (((C10527 - C10526 + C10529 - C10528) * C116 +
             (C10531 - C10530 + C10533 - C10532) * C47279) *
                C10231 +
            ((C10534 - C10535 + C10536 - C10537) * C116 +
             (C10538 - C10539 + C10540 - C10541) * C47279) *
                C47391) *
               C1665 +
           (((C10535 - C10534 + C10537 - C10536) * C116 +
             (C10539 - C10538 + C10541 - C10540) * C47279) *
                C10231 +
            ((C4575 * C1850 - C4579 * C1844 + C47358 * C1851 - C4580 * C1845) *
                 C116 +
             (C4575 * C1862 - C4579 * C1853 + C47358 * C1863 - C4580 * C1854) *
                 C47279) *
                C47391) *
               C47374) *
              C47073 * C47407 +
          ((((C4579 * C118 - C4575 * C125 + C4580 * C119 - C47358 * C126) *
                 C116 +
             (C4579 * C128 - C4575 * C139 + C4580 * C129 - C47358 * C140) *
                 C47279) *
                C10231 +
            ((C10542 - C10543 + C10544 - C10545) * C116 +
             (C10546 - C10547 + C10548 - C10549) * C47279) *
                C47391) *
               C1664 +
           (((C10543 - C10542 + C10545 - C10544) * C116 +
             (C10547 - C10546 + C10549 - C10548) * C47279) *
                C10231 +
            ((C10550 - C10551 + C10552 - C10553) * C116 +
             (C10554 - C10555 + C10556 - C10557) * C47279) *
                C47391) *
               C1665 +
           (((C10551 - C10550 + C10553 - C10552) * C116 +
             (C10555 - C10554 + C10557 - C10556) * C47279) *
                C10231 +
            ((C4579 * C1845 - C4575 * C1851 + C4580 * C1846 - C47358 * C1852) *
                 C116 +
             (C4579 * C1854 - C4575 * C1863 + C4580 * C1855 - C47358 * C1864) *
                 C47279) *
                C47391) *
               C47374) *
              C47073 * C47394 +
          ((((C4575 * C126 - C4579 * C119 + C47358 * C130 - C4580 * C120) *
                 C116 +
             (C4575 * C140 - C4579 * C129 + C47358 * C141 - C4580 * C131) *
                 C47279) *
                C10231 +
            ((C10558 - C10559 + C10560 - C10561) * C116 +
             (C10562 - C10563 + C10564 - C10565) * C47279) *
                C47391) *
               C1664 +
           (((C10559 - C10558 + C10561 - C10560) * C116 +
             (C10563 - C10562 + C10565 - C10564) * C47279) *
                C10231 +
            ((C10566 - C10567 + C10568 - C10569) * C116 +
             (C10570 - C10571 + C10572 - C10573) * C47279) *
                C47391) *
               C1665 +
           (((C10567 - C10566 + C10569 - C10568) * C116 +
             (C10571 - C10570 + C10573 - C10572) * C47279) *
                C10231 +
            ((C4575 * C1852 - C4579 * C1846 + C47358 * C2121 - C4580 * C2120) *
                 C116 +
             (C4575 * C1864 - C4579 * C1855 + C47358 * C2123 - C4580 * C2122) *
                 C47279) *
                C47391) *
               C47374) *
              C47073 * C47365)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C4575 * C124 - C4579 * C117 + C47358 * C125 - C4580 * C118) *
                 C116 +
             (C4575 * C138 - C4579 * C127 + C47358 * C139 - C4580 * C128) *
                 C47279) *
                C10231 +
            ((C10526 - C10527 + C10528 - C10529) * C116 +
             (C10530 - C10531 + C10532 - C10533) * C47279) *
                C47391) *
               C1664 +
           (((C10527 - C10526 + C10529 - C10528) * C116 +
             (C10531 - C10530 + C10533 - C10532) * C47279) *
                C10231 +
            ((C10534 - C10535 + C10536 - C10537) * C116 +
             (C10538 - C10539 + C10540 - C10541) * C47279) *
                C47391) *
               C1665 +
           (((C10535 - C10534 + C10537 - C10536) * C116 +
             (C10539 - C10538 + C10541 - C10540) * C47279) *
                C10231 +
            ((C4575 * C1850 - C4579 * C1844 + C47358 * C1851 - C4580 * C1845) *
                 C116 +
             (C4575 * C1862 - C4579 * C1853 + C47358 * C1863 - C4580 * C1854) *
                 C47279) *
                C47391) *
               C47374) *
              C47410 +
          ((((C4731 - C4730 + C4733 - C4732) * C116 +
             (C4735 - C4734 + C4737 - C4736) * C47279) *
                C10231 +
            ((C5386 - C5387 + C5388 - C5389) * C116 +
             (C5390 - C5391 + C5392 - C5393) * C47279) *
                C47391) *
               C1664 +
           (((C5387 - C5386 + C5389 - C5388) * C116 +
             (C5391 - C5390 + C5393 - C5392) * C47279) *
                C10231 +
            ((C5816 - C5817 + C5818 - C5819) * C116 +
             (C5820 - C5821 + C5822 - C5823) * C47279) *
                C47391) *
               C1665 +
           (((C5817 - C5816 + C5819 - C5818) * C116 +
             (C5821 - C5820 + C5823 - C5822) * C47279) *
                C10231 +
            ((C7178 - C7179 + C7180 - C7181) * C116 +
             (C7182 - C7183 + C7184 - C7185) * C47279) *
                C47391) *
               C47374) *
              C47398 +
          ((((C4739 - C4738 + C4741 - C4740) * C116 +
             (C4743 - C4742 + C4745 - C4744) * C47279) *
                C10231 +
            ((C5824 - C5825 + C5826 - C5827) * C116 +
             (C5828 - C5829 + C5830 - C5831) * C47279) *
                C47391) *
               C1664 +
           (((C5825 - C5824 + C5827 - C5826) * C116 +
             (C5829 - C5828 + C5831 - C5830) * C47279) *
                C10231 +
            ((C5832 - C5833 + C5834 - C5835) * C116 +
             (C5836 - C5837 + C5838 - C5839) * C47279) *
                C47391) *
               C1665 +
           (((C5833 - C5832 + C5835 - C5834) * C116 +
             (C5837 - C5836 + C5839 - C5838) * C47279) *
                C10231 +
            ((C4575 * C7171 - C4579 * C7169 + C47358 * C7172 - C4580 * C7170) *
                 C116 +
             (C4575 * C7175 - C4579 * C7173 + C47358 * C7176 - C4580 * C7174) *
                 C47279) *
                C47391) *
               C47374) *
              C47371) *
         C47045) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C4575 * C124 - C4579 * C117 + C47358 * C125 - C4580 * C118) *
                C116 +
            (C4575 * C138 - C4579 * C127 + C47358 * C139 - C4580 * C128) *
                C47279) *
               C10231 +
           ((C10526 - C10527 + C10528 - C10529) * C116 +
            (C10530 - C10531 + C10532 - C10533) * C47279) *
               C47391) *
              C1839 +
          (((C10527 - C10526 + C10529 - C10528) * C116 +
            (C10531 - C10530 + C10533 - C10532) * C47279) *
               C10231 +
           ((C10534 - C10535 + C10536 - C10537) * C116 +
            (C10538 - C10539 + C10540 - C10541) * C47279) *
               C47391) *
              C1840 +
          (((C10535 - C10534 + C10537 - C10536) * C116 +
            (C10539 - C10538 + C10541 - C10540) * C47279) *
               C10231 +
           ((C12246 - C12247 + C12248 - C12249) * C116 +
            (C12250 - C12251 + C12252 - C12253) * C47279) *
               C47391) *
              C1841 +
          (((C12247 - C12246 + C12249 - C12248) * C116 +
            (C12251 - C12250 + C12253 - C12252) * C47279) *
               C10231 +
           ((C12254 - C12255 + C12256 - C12257) * C116 +
            (C12258 - C12259 + C12260 - C12261) * C47279) *
               C47391) *
              C1842 +
          (((C12255 - C12254 + C12257 - C12256) * C116 +
            (C12259 - C12258 + C12261 - C12260) * C47279) *
               C10231 +
           ((C4575 * C12239 - C4579 * C12237 + C47358 * C12240 -
             C4580 * C12238) *
                C116 +
            (C4575 * C12243 - C4579 * C12241 + C47358 * C12244 -
             C4580 * C12242) *
                C47279) *
               C47391) *
              C1843) *
         C47073 * C47045) /
            (p * q * std::sqrt(p + q));
    d2ee[63] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C4575 * C124 - C4579 * C117 + C47358 * C125 - C4580 * C118) *
                  C116 +
              (C4575 * C138 - C4579 * C127 + C47358 * C139 - C4580 * C128) *
                  C47279) *
                 C10231 +
             ((C10526 - C10527 + C10528 - C10529) * C116 +
              (C10530 - C10531 + C10532 - C10533) * C47279) *
                 C47391) *
                C47340 +
            (((C10527 - C10526 + C10529 - C10528) * C116 +
              (C10531 - C10530 + C10533 - C10532) * C47279) *
                 C10231 +
             ((C10534 - C10535 + C10536 - C10537) * C116 +
              (C10538 - C10539 + C10540 - C10541) * C47279) *
                 C47391) *
                C47178) *
               C942 +
           ((((C4731 - C4730 + C4733 - C4732) * C116 +
              (C4735 - C4734 + C4737 - C4736) * C47279) *
                 C10231 +
             ((C5386 - C5387 + C5388 - C5389) * C116 +
              (C5390 - C5391 + C5392 - C5393) * C47279) *
                 C47391) *
                C47340 +
            (((C5387 - C5386 + C5389 - C5388) * C116 +
              (C5391 - C5390 + C5393 - C5392) * C47279) *
                 C10231 +
             ((C5816 - C5817 + C5818 - C5819) * C116 +
              (C5820 - C5821 + C5822 - C5823) * C47279) *
                 C47391) *
                C47178) *
               C943 +
           ((((C4739 - C4738 + C4741 - C4740) * C116 +
              (C4743 - C4742 + C4745 - C4744) * C47279) *
                 C10231 +
             ((C5824 - C5825 + C5826 - C5827) * C116 +
              (C5828 - C5829 + C5830 - C5831) * C47279) *
                 C47391) *
                C47340 +
            (((C5825 - C5824 + C5827 - C5826) * C116 +
              (C5829 - C5828 + C5831 - C5830) * C47279) *
                 C10231 +
             ((C5832 - C5833 + C5834 - C5835) * C116 +
              (C5836 - C5837 + C5838 - C5839) * C47279) *
                 C47391) *
                C47178) *
               C47371) *
              C47325 +
          (((((C4579 * C118 - C4575 * C125 + C4580 * C119 - C47358 * C126) *
                  C116 +
              (C4579 * C128 - C4575 * C139 + C4580 * C129 - C47358 * C140) *
                  C47279) *
                 C10231 +
             ((C10542 - C10543 + C10544 - C10545) * C116 +
              (C10546 - C10547 + C10548 - C10549) * C47279) *
                 C47391) *
                C47340 +
            (((C10543 - C10542 + C10545 - C10544) * C116 +
              (C10547 - C10546 + C10549 - C10548) * C47279) *
                 C10231 +
             ((C10550 - C10551 + C10552 - C10553) * C116 +
              (C10554 - C10555 + C10556 - C10557) * C47279) *
                 C47391) *
                C47178) *
               C942 +
           ((((C4747 - C4746 + C4749 - C4748) * C116 +
              (C4751 - C4750 + C4753 - C4752) * C47279) *
                 C10231 +
             ((C5394 - C5395 + C5396 - C5397) * C116 +
              (C5398 - C5399 + C5400 - C5401) * C47279) *
                 C47391) *
                C47340 +
            (((C5395 - C5394 + C5397 - C5396) * C116 +
              (C5399 - C5398 + C5401 - C5400) * C47279) *
                 C10231 +
             ((C6902 - C6903 + C6904 - C6905) * C116 +
              (C6906 - C6907 + C6908 - C6909) * C47279) *
                 C47391) *
                C47178) *
               C943 +
           ((((C4755 - C4754 + C4757 - C4756) * C116 +
              (C4759 - C4758 + C4761 - C4760) * C47279) *
                 C10231 +
             ((C6172 - C6173 + C6174 - C6175) * C116 +
              (C6176 - C6177 + C6178 - C6179) * C47279) *
                 C47391) *
                C47340 +
            (((C6173 - C6172 + C6175 - C6174) * C116 +
              (C6177 - C6176 + C6179 - C6178) * C47279) *
                 C10231 +
             ((C4575 * C1172 - C4579 * C1157 + C47358 * C1173 - C4580 * C1158) *
                  C116 +
              (C4575 * C1184 - C4579 * C1175 + C47358 * C1185 - C4580 * C1176) *
                  C47279) *
                 C47391) *
                C47178) *
               C47371) *
              C47056)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C4575 * C124 - C4579 * C117 + C47358 * C125 - C4580 * C118) *
                 C116 +
             (C4575 * C138 - C4579 * C127 + C47358 * C139 - C4580 * C128) *
                 C47279) *
                C10231 +
            ((C10526 - C10527 + C10528 - C10529) * C116 +
             (C10530 - C10531 + C10532 - C10533) * C47279) *
                C47391) *
               C47340 +
           (((C10527 - C10526 + C10529 - C10528) * C116 +
             (C10531 - C10530 + C10533 - C10532) * C47279) *
                C10231 +
            ((C10534 - C10535 + C10536 - C10537) * C116 +
             (C10538 - C10539 + C10540 - C10541) * C47279) *
                C47391) *
               C47178) *
              C47073 * C554 +
          ((((C4579 * C118 - C4575 * C125 + C4580 * C119 - C47358 * C126) *
                 C116 +
             (C4579 * C128 - C4575 * C139 + C4580 * C129 - C47358 * C140) *
                 C47279) *
                C10231 +
            ((C10542 - C10543 + C10544 - C10545) * C116 +
             (C10546 - C10547 + C10548 - C10549) * C47279) *
                C47391) *
               C47340 +
           (((C10543 - C10542 + C10545 - C10544) * C116 +
             (C10547 - C10546 + C10549 - C10548) * C47279) *
                C10231 +
            ((C10550 - C10551 + C10552 - C10553) * C116 +
             (C10554 - C10555 + C10556 - C10557) * C47279) *
                C47391) *
               C47178) *
              C47073 * C555 +
          ((((C4575 * C126 - C4579 * C119 + C47358 * C130 - C4580 * C120) *
                 C116 +
             (C4575 * C140 - C4579 * C129 + C47358 * C141 - C4580 * C131) *
                 C47279) *
                C10231 +
            ((C10558 - C10559 + C10560 - C10561) * C116 +
             (C10562 - C10563 + C10564 - C10565) * C47279) *
                C47391) *
               C47340 +
           (((C10559 - C10558 + C10561 - C10560) * C116 +
             (C10563 - C10562 + C10565 - C10564) * C47279) *
                C10231 +
            ((C10566 - C10567 + C10568 - C10569) * C116 +
             (C10570 - C10571 + C10572 - C10573) * C47279) *
                C47391) *
               C47178) *
              C47073 * C556 +
          ((((C4579 * C120 - C4575 * C130 + C4580 * C121 - C47358 * C132) *
                 C116 +
             (C4579 * C131 - C4575 * C141 + C4580 * C133 - C47358 * C142) *
                 C47279) *
                C10231 +
            ((C10834 - C10835 + C10836 - C10837) * C116 +
             (C10838 - C10839 + C10840 - C10841) * C47279) *
                C47391) *
               C47340 +
           (((C10835 - C10834 + C10837 - C10836) * C116 +
             (C10839 - C10838 + C10841 - C10840) * C47279) *
                C10231 +
            ((C4575 * C438 - C4579 * C421 + C47358 * C442 - C4580 * C423) *
                 C116 +
             (C4575 * C451 - C4579 * C439 + C47358 * C453 - C4580 * C443) *
                 C47279) *
                C47391) *
               C47178) *
              C47073 * C47375)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C4575 * C124 - C4579 * C117 + C47358 * C125 - C4580 * C118) *
                 C116 +
             (C4575 * C138 - C4579 * C127 + C47358 * C139 - C4580 * C128) *
                 C47279) *
                C10231 +
            ((C10526 - C10527 + C10528 - C10529) * C116 +
             (C10530 - C10531 + C10532 - C10533) * C47279) *
                C47391) *
               C2116 +
           (((C10527 - C10526 + C10529 - C10528) * C116 +
             (C10531 - C10530 + C10533 - C10532) * C47279) *
                C10231 +
            ((C10534 - C10535 + C10536 - C10537) * C116 +
             (C10538 - C10539 + C10540 - C10541) * C47279) *
                C47391) *
               C2117 +
           (((C10535 - C10534 + C10537 - C10536) * C116 +
             (C10539 - C10538 + C10541 - C10540) * C47279) *
                C10231 +
            ((C12246 - C12247 + C12248 - C12249) * C116 +
             (C12250 - C12251 + C12252 - C12253) * C47279) *
                C47391) *
               C2118 +
           (((C12247 - C12246 + C12249 - C12248) * C116 +
             (C12251 - C12250 + C12253 - C12252) * C47279) *
                C10231 +
            ((C12254 - C12255 + C12256 - C12257) * C116 +
             (C12258 - C12259 + C12260 - C12261) * C47279) *
                C47391) *
               C47387) *
              C47073 * C47325 +
          ((((C4579 * C118 - C4575 * C125 + C4580 * C119 - C47358 * C126) *
                 C116 +
             (C4579 * C128 - C4575 * C139 + C4580 * C129 - C47358 * C140) *
                 C47279) *
                C10231 +
            ((C10542 - C10543 + C10544 - C10545) * C116 +
             (C10546 - C10547 + C10548 - C10549) * C47279) *
                C47391) *
               C2116 +
           (((C10543 - C10542 + C10545 - C10544) * C116 +
             (C10547 - C10546 + C10549 - C10548) * C47279) *
                C10231 +
            ((C10550 - C10551 + C10552 - C10553) * C116 +
             (C10554 - C10555 + C10556 - C10557) * C47279) *
                C47391) *
               C2117 +
           (((C10551 - C10550 + C10553 - C10552) * C116 +
             (C10555 - C10554 + C10557 - C10556) * C47279) *
                C10231 +
            ((C12586 - C12587 + C12588 - C12589) * C116 +
             (C12590 - C12591 + C12592 - C12593) * C47279) *
                C47391) *
               C2118 +
           (((C12587 - C12586 + C12589 - C12588) * C116 +
             (C12591 - C12590 + C12593 - C12592) * C47279) *
                C10231 +
            ((C4575 * C1857 - C4579 * C1848 + C47358 * C1858 - C4580 * C1849) *
                 C116 +
             (C4575 * C1866 - C4579 * C1860 + C47358 * C1867 - C4580 * C1861) *
                 C47279) *
                C47391) *
               C47387) *
              C47073 * C47056)) /
            (p * q * std::sqrt(p + q));
    d2ee[64] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C4575 * C124 - C4579 * C117 + C47358 * C125 - C4580 * C118) *
                 C116 +
             (C4575 * C138 - C4579 * C127 + C47358 * C139 - C4580 * C128) *
                 C47279) *
                C10231 +
            ((C4575 * C424 - C4579 * C414 + C47358 * C425 - C4580 * C415) *
                 C116 +
             (C4575 * C444 - C4579 * C427 + C47358 * C445 - C4580 * C428) *
                 C47279) *
                C47391) *
               C47091 * C47410 +
           (((C4731 - C4730 + C4733 - C4732) * C116 +
             (C4735 - C4734 + C4737 - C4736) * C47279) *
                C10231 +
            ((C5386 - C5387 + C5388 - C5389) * C116 +
             (C5390 - C5391 + C5392 - C5393) * C47279) *
                C47391) *
               C47091 * C47398 +
           (((C4739 - C4738 + C4741 - C4740) * C116 +
             (C4743 - C4742 + C4745 - C4744) * C47279) *
                C10231 +
            ((C5824 - C5825 + C5826 - C5827) * C116 +
             (C5828 - C5829 + C5830 - C5831) * C47279) *
                C47391) *
               C47091 * C47371) *
              C258 +
          ((((C4579 * C118 - C4575 * C125 + C4580 * C119 - C47358 * C126) *
                 C116 +
             (C4579 * C128 - C4575 * C139 + C4580 * C129 - C47358 * C140) *
                 C47279) *
                C10231 +
            ((C4579 * C415 - C4575 * C425 + C4580 * C416 - C47358 * C426) *
                 C116 +
             (C4579 * C428 - C4575 * C445 + C4580 * C429 - C47358 * C446) *
                 C47279) *
                C47391) *
               C47091 * C47410 +
           (((C4747 - C4746 + C4749 - C4748) * C116 +
             (C4751 - C4750 + C4753 - C4752) * C47279) *
                C10231 +
            ((C5394 - C5395 + C5396 - C5397) * C116 +
             (C5398 - C5399 + C5400 - C5401) * C47279) *
                C47391) *
               C47091 * C47398 +
           (((C4755 - C4754 + C4757 - C4756) * C116 +
             (C4759 - C4758 + C4761 - C4760) * C47279) *
                C10231 +
            ((C6172 - C6173 + C6174 - C6175) * C116 +
             (C6176 - C6177 + C6178 - C6179) * C47279) *
                C47391) *
               C47091 * C47371) *
              C259 +
          ((((C4575 * C126 - C4579 * C119 + C47358 * C130 - C4580 * C120) *
                 C116 +
             (C4575 * C140 - C4579 * C129 + C47358 * C141 - C4580 * C131) *
                 C47279) *
                C10231 +
            ((C4575 * C426 - C4579 * C416 + C47358 * C436 - C4580 * C420) *
                 C116 +
             (C4575 * C446 - C4579 * C429 + C47358 * C450 - C4580 * C437) *
                 C47279) *
                C47391) *
               C47091 * C47410 +
           (((C4763 - C4762 + C4765 - C4764) * C116 +
             (C4767 - C4766 + C4769 - C4768) * C47279) *
                C10231 +
            ((C5402 - C5403 + C5404 - C5405) * C116 +
             (C5406 - C5407 + C5408 - C5409) * C47279) *
                C47391) *
               C47091 * C47398 +
           (((C4771 - C4770 + C4773 - C4772) * C116 +
             (C4775 - C4774 + C4777 - C4776) * C47279) *
                C10231 +
            ((C4575 * C1167 - C4579 * C1155 + C47358 * C1441 - C4580 * C1440) *
                 C116 +
             (C4575 * C1182 - C4579 * C1170 + C47358 * C1443 - C4580 * C1442) *
                 C47279) *
                C47391) *
               C47091 * C47371) *
              C47365)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C4575 * C124 - C4579 * C117 + C47358 * C125 - C4580 * C118) *
                C116 +
            (C4575 * C138 - C4579 * C127 + C47358 * C139 - C4580 * C128) *
                C47279) *
               C10231 +
           ((C4575 * C424 - C4579 * C414 + C47358 * C425 - C4580 * C415) *
                C116 +
            (C4575 * C444 - C4579 * C427 + C47358 * C445 - C4580 * C428) *
                C47279) *
               C47391) *
              C47091 * C47073 * C108 +
          (((C4579 * C118 - C4575 * C125 + C4580 * C119 - C47358 * C126) *
                C116 +
            (C4579 * C128 - C4575 * C139 + C4580 * C129 - C47358 * C140) *
                C47279) *
               C10231 +
           ((C4579 * C415 - C4575 * C425 + C4580 * C416 - C47358 * C426) *
                C116 +
            (C4579 * C428 - C4575 * C445 + C4580 * C429 - C47358 * C446) *
                C47279) *
               C47391) *
              C47091 * C47073 * C109 +
          (((C4575 * C126 - C4579 * C119 + C47358 * C130 - C4580 * C120) *
                C116 +
            (C4575 * C140 - C4579 * C129 + C47358 * C141 - C4580 * C131) *
                C47279) *
               C10231 +
           ((C4575 * C426 - C4579 * C416 + C47358 * C436 - C4580 * C420) *
                C116 +
            (C4575 * C446 - C4579 * C429 + C47358 * C450 - C4580 * C437) *
                C47279) *
               C47391) *
              C47091 * C47073 * C110 +
          (((C4579 * C120 - C4575 * C130 + C4580 * C121 - C47358 * C132) *
                C116 +
            (C4579 * C131 - C4575 * C141 + C4580 * C133 - C47358 * C142) *
                C47279) *
               C10231 +
           ((C4579 * C420 - C4575 * C436 + C4580 * C422 - C47358 * C440) *
                C116 +
            (C4579 * C437 - C4575 * C450 + C4580 * C441 - C47358 * C452) *
                C47279) *
               C47391) *
              C47091 * C47073 * C111 +
          (((C4575 * C132 - C4579 * C121 + C47358 * C134 - C4580 * C122) *
                C116 +
            (C4575 * C142 - C4579 * C133 + C47358 * C143 - C4580 * C135) *
                C47279) *
               C10231 +
           ((C4575 * C440 - C4579 * C422 + C47358 * C663 - C4580 * C662) *
                C116 +
            (C4575 * C452 - C4579 * C441 + C47358 * C665 - C4580 * C664) *
                C47279) *
               C47391) *
              C47091 * C47073 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C4575 * C124 - C4579 * C117 + C47358 * C125 - C4580 * C118) *
                 C116 +
             (C4575 * C138 - C4579 * C127 + C47358 * C139 - C4580 * C128) *
                 C47279) *
                C10231 +
            ((C10526 - C10527 + C10528 - C10529) * C116 +
             (C10530 - C10531 + C10532 - C10533) * C47279) *
                C47391) *
               C47091 * C942 +
           (((C4731 - C4730 + C4733 - C4732) * C116 +
             (C4735 - C4734 + C4737 - C4736) * C47279) *
                C10231 +
            ((C5386 - C5387 + C5388 - C5389) * C116 +
             (C5390 - C5391 + C5392 - C5393) * C47279) *
                C47391) *
               C47091 * C943 +
           (((C4739 - C4738 + C4741 - C4740) * C116 +
             (C4743 - C4742 + C4745 - C4744) * C47279) *
                C10231 +
            ((C5824 - C5825 + C5826 - C5827) * C116 +
             (C5828 - C5829 + C5830 - C5831) * C47279) *
                C47391) *
               C47091 * C47371) *
              C47407 +
          ((((C4579 * C118 - C4575 * C125 + C4580 * C119 - C47358 * C126) *
                 C116 +
             (C4579 * C128 - C4575 * C139 + C4580 * C129 - C47358 * C140) *
                 C47279) *
                C10231 +
            ((C10542 - C10543 + C10544 - C10545) * C116 +
             (C10546 - C10547 + C10548 - C10549) * C47279) *
                C47391) *
               C47091 * C942 +
           (((C4747 - C4746 + C4749 - C4748) * C116 +
             (C4751 - C4750 + C4753 - C4752) * C47279) *
                C10231 +
            ((C5394 - C5395 + C5396 - C5397) * C116 +
             (C5398 - C5399 + C5400 - C5401) * C47279) *
                C47391) *
               C47091 * C943 +
           (((C4755 - C4754 + C4757 - C4756) * C116 +
             (C4759 - C4758 + C4761 - C4760) * C47279) *
                C10231 +
            ((C6172 - C6173 + C6174 - C6175) * C116 +
             (C6176 - C6177 + C6178 - C6179) * C47279) *
                C47391) *
               C47091 * C47371) *
              C47394 +
          ((((C4575 * C126 - C4579 * C119 + C47358 * C130 - C4580 * C120) *
                 C116 +
             (C4575 * C140 - C4579 * C129 + C47358 * C141 - C4580 * C131) *
                 C47279) *
                C10231 +
            ((C10558 - C10559 + C10560 - C10561) * C116 +
             (C10562 - C10563 + C10564 - C10565) * C47279) *
                C47391) *
               C47091 * C942 +
           (((C4763 - C4762 + C4765 - C4764) * C116 +
             (C4767 - C4766 + C4769 - C4768) * C47279) *
                C10231 +
            ((C5402 - C5403 + C5404 - C5405) * C116 +
             (C5406 - C5407 + C5408 - C5409) * C47279) *
                C47391) *
               C47091 * C943 +
           (((C4771 - C4770 + C4773 - C4772) * C116 +
             (C4775 - C4774 + C4777 - C4776) * C47279) *
                C10231 +
            ((C4575 * C1167 - C4579 * C1155 + C47358 * C1441 - C4580 * C1440) *
                 C116 +
             (C4575 * C1182 - C4579 * C1170 + C47358 * C1443 - C4580 * C1442) *
                 C47279) *
                C47391) *
               C47091 * C47371) *
              C47365)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C4575 * C124 - C4579 * C117 + C47358 * C125 - C4580 * C118) *
                C116 +
            (C4575 * C138 - C4579 * C127 + C47358 * C139 - C4580 * C128) *
                C47279) *
               C10231 +
           ((C10526 - C10527 + C10528 - C10529) * C116 +
            (C10530 - C10531 + C10532 - C10533) * C47279) *
               C47391) *
              C47091 * C1010 +
          (((C4731 - C4730 + C4733 - C4732) * C116 +
            (C4735 - C4734 + C4737 - C4736) * C47279) *
               C10231 +
           ((C5386 - C5387 + C5388 - C5389) * C116 +
            (C5390 - C5391 + C5392 - C5393) * C47279) *
               C47391) *
              C47091 * C1011 +
          (((C4739 - C4738 + C4741 - C4740) * C116 +
            (C4743 - C4742 + C4745 - C4744) * C47279) *
               C10231 +
           ((C5824 - C5825 + C5826 - C5827) * C116 +
            (C5828 - C5829 + C5830 - C5831) * C47279) *
               C47391) *
              C47091 * C1012 +
          (((C5647 - C5646 + C5649 - C5648) * C116 +
            (C5651 - C5650 + C5653 - C5652) * C47279) *
               C10231 +
           ((C6318 - C6319 + C6320 - C6321) * C116 +
            (C6322 - C6323 + C6324 - C6325) * C47279) *
               C47391) *
              C47091 * C1013 +
          (((C5655 - C5654 + C5657 - C5656) * C116 +
            (C5659 - C5658 + C5661 - C5660) * C47279) *
               C10231 +
           ((C4575 * C6311 - C4579 * C6309 + C47358 * C6312 - C4580 * C6310) *
                C116 +
            (C4575 * C6315 - C4579 * C6313 + C47358 * C6316 - C4580 * C6314) *
                C47279) *
               C47391) *
              C47091 * C1014) *
         C47045) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C4575 * C124 - C4579 * C117 + C47358 * C125 - C4580 * C118) *
                 C116 +
             (C4575 * C138 - C4579 * C127 + C47358 * C139 - C4580 * C128) *
                 C47279) *
                C10231 +
            ((C10526 - C10527 + C10528 - C10529) * C116 +
             (C10530 - C10531 + C10532 - C10533) * C47279) *
                C47391) *
               C1664 +
           (((C10527 - C10526 + C10529 - C10528) * C116 +
             (C10531 - C10530 + C10533 - C10532) * C47279) *
                C10231 +
            ((C10534 - C10535 + C10536 - C10537) * C116 +
             (C10538 - C10539 + C10540 - C10541) * C47279) *
                C47391) *
               C1665 +
           (((C10535 - C10534 + C10537 - C10536) * C116 +
             (C10539 - C10538 + C10541 - C10540) * C47279) *
                C10231 +
            ((C4575 * C1850 - C4579 * C1844 + C47358 * C1851 - C4580 * C1845) *
                 C116 +
             (C4575 * C1862 - C4579 * C1853 + C47358 * C1863 - C4580 * C1854) *
                 C47279) *
                C47391) *
               C47374) *
              C47073 * C47407 +
          ((((C4579 * C118 - C4575 * C125 + C4580 * C119 - C47358 * C126) *
                 C116 +
             (C4579 * C128 - C4575 * C139 + C4580 * C129 - C47358 * C140) *
                 C47279) *
                C10231 +
            ((C10542 - C10543 + C10544 - C10545) * C116 +
             (C10546 - C10547 + C10548 - C10549) * C47279) *
                C47391) *
               C1664 +
           (((C10543 - C10542 + C10545 - C10544) * C116 +
             (C10547 - C10546 + C10549 - C10548) * C47279) *
                C10231 +
            ((C10550 - C10551 + C10552 - C10553) * C116 +
             (C10554 - C10555 + C10556 - C10557) * C47279) *
                C47391) *
               C1665 +
           (((C10551 - C10550 + C10553 - C10552) * C116 +
             (C10555 - C10554 + C10557 - C10556) * C47279) *
                C10231 +
            ((C4579 * C1845 - C4575 * C1851 + C4580 * C1846 - C47358 * C1852) *
                 C116 +
             (C4579 * C1854 - C4575 * C1863 + C4580 * C1855 - C47358 * C1864) *
                 C47279) *
                C47391) *
               C47374) *
              C47073 * C47394 +
          ((((C4575 * C126 - C4579 * C119 + C47358 * C130 - C4580 * C120) *
                 C116 +
             (C4575 * C140 - C4579 * C129 + C47358 * C141 - C4580 * C131) *
                 C47279) *
                C10231 +
            ((C10558 - C10559 + C10560 - C10561) * C116 +
             (C10562 - C10563 + C10564 - C10565) * C47279) *
                C47391) *
               C1664 +
           (((C10559 - C10558 + C10561 - C10560) * C116 +
             (C10563 - C10562 + C10565 - C10564) * C47279) *
                C10231 +
            ((C10566 - C10567 + C10568 - C10569) * C116 +
             (C10570 - C10571 + C10572 - C10573) * C47279) *
                C47391) *
               C1665 +
           (((C10567 - C10566 + C10569 - C10568) * C116 +
             (C10571 - C10570 + C10573 - C10572) * C47279) *
                C10231 +
            ((C4575 * C1852 - C4579 * C1846 + C47358 * C2121 - C4580 * C2120) *
                 C116 +
             (C4575 * C1864 - C4579 * C1855 + C47358 * C2123 - C4580 * C2122) *
                 C47279) *
                C47391) *
               C47374) *
              C47073 * C47365)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C4575 * C124 - C4579 * C117 + C47358 * C125 - C4580 * C118) *
                 C116 +
             (C4575 * C138 - C4579 * C127 + C47358 * C139 - C4580 * C128) *
                 C47279) *
                C10231 +
            ((C10526 - C10527 + C10528 - C10529) * C116 +
             (C10530 - C10531 + C10532 - C10533) * C47279) *
                C47391) *
               C1664 +
           (((C10527 - C10526 + C10529 - C10528) * C116 +
             (C10531 - C10530 + C10533 - C10532) * C47279) *
                C10231 +
            ((C10534 - C10535 + C10536 - C10537) * C116 +
             (C10538 - C10539 + C10540 - C10541) * C47279) *
                C47391) *
               C1665 +
           (((C10535 - C10534 + C10537 - C10536) * C116 +
             (C10539 - C10538 + C10541 - C10540) * C47279) *
                C10231 +
            ((C4575 * C1850 - C4579 * C1844 + C47358 * C1851 - C4580 * C1845) *
                 C116 +
             (C4575 * C1862 - C4579 * C1853 + C47358 * C1863 - C4580 * C1854) *
                 C47279) *
                C47391) *
               C47374) *
              C47410 +
          ((((C4731 - C4730 + C4733 - C4732) * C116 +
             (C4735 - C4734 + C4737 - C4736) * C47279) *
                C10231 +
            ((C5386 - C5387 + C5388 - C5389) * C116 +
             (C5390 - C5391 + C5392 - C5393) * C47279) *
                C47391) *
               C1664 +
           (((C5387 - C5386 + C5389 - C5388) * C116 +
             (C5391 - C5390 + C5393 - C5392) * C47279) *
                C10231 +
            ((C5816 - C5817 + C5818 - C5819) * C116 +
             (C5820 - C5821 + C5822 - C5823) * C47279) *
                C47391) *
               C1665 +
           (((C5817 - C5816 + C5819 - C5818) * C116 +
             (C5821 - C5820 + C5823 - C5822) * C47279) *
                C10231 +
            ((C7178 - C7179 + C7180 - C7181) * C116 +
             (C7182 - C7183 + C7184 - C7185) * C47279) *
                C47391) *
               C47374) *
              C47398 +
          ((((C4739 - C4738 + C4741 - C4740) * C116 +
             (C4743 - C4742 + C4745 - C4744) * C47279) *
                C10231 +
            ((C5824 - C5825 + C5826 - C5827) * C116 +
             (C5828 - C5829 + C5830 - C5831) * C47279) *
                C47391) *
               C1664 +
           (((C5825 - C5824 + C5827 - C5826) * C116 +
             (C5829 - C5828 + C5831 - C5830) * C47279) *
                C10231 +
            ((C5832 - C5833 + C5834 - C5835) * C116 +
             (C5836 - C5837 + C5838 - C5839) * C47279) *
                C47391) *
               C1665 +
           (((C5833 - C5832 + C5835 - C5834) * C116 +
             (C5837 - C5836 + C5839 - C5838) * C47279) *
                C10231 +
            ((C4575 * C7171 - C4579 * C7169 + C47358 * C7172 - C4580 * C7170) *
                 C116 +
             (C4575 * C7175 - C4579 * C7173 + C47358 * C7176 - C4580 * C7174) *
                 C47279) *
                C47391) *
               C47374) *
              C47371) *
         C47045) /
            (p * q * std::sqrt(p + q));
    d2ee[65] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C4575 * C124 - C4579 * C117 + C47358 * C125 - C4580 * C118) *
                  C116 +
              (C4575 * C138 - C4579 * C127 + C47358 * C139 - C4580 * C128) *
                  C47279) *
                 C10231 +
             ((C10526 - C10527 + C10528 - C10529) * C116 +
              (C10530 - C10531 + C10532 - C10533) * C47279) *
                 C47391) *
                C3094 +
            (((C10527 - C10526 + C10529 - C10528) * C116 +
              (C10531 - C10530 + C10533 - C10532) * C47279) *
                 C10231 +
             ((C10534 - C10535 + C10536 - C10537) * C116 +
              (C10538 - C10539 + C10540 - C10541) * C47279) *
                 C47391) *
                C47178) *
               C47339 +
           ((((C4731 - C4730 + C4733 - C4732) * C116 +
              (C4735 - C4734 + C4737 - C4736) * C47279) *
                 C10231 +
             ((C5386 - C5387 + C5388 - C5389) * C116 +
              (C5390 - C5391 + C5392 - C5393) * C47279) *
                 C47391) *
                C3094 +
            (((C5387 - C5386 + C5389 - C5388) * C116 +
              (C5391 - C5390 + C5393 - C5392) * C47279) *
                 C10231 +
             ((C5816 - C5817 + C5818 - C5819) * C116 +
              (C5820 - C5821 + C5822 - C5823) * C47279) *
                 C47391) *
                C47178) *
               C47136) *
              C47050 +
          (((((C4579 * C118 - C4575 * C125 + C4580 * C119 - C47358 * C126) *
                  C116 +
              (C4579 * C128 - C4575 * C139 + C4580 * C129 - C47358 * C140) *
                  C47279) *
                 C10231 +
             ((C10542 - C10543 + C10544 - C10545) * C116 +
              (C10546 - C10547 + C10548 - C10549) * C47279) *
                 C47391) *
                C3094 +
            (((C10543 - C10542 + C10545 - C10544) * C116 +
              (C10547 - C10546 + C10549 - C10548) * C47279) *
                 C10231 +
             ((C10550 - C10551 + C10552 - C10553) * C116 +
              (C10554 - C10555 + C10556 - C10557) * C47279) *
                 C47391) *
                C47178) *
               C47339 +
           ((((C4747 - C4746 + C4749 - C4748) * C116 +
              (C4751 - C4750 + C4753 - C4752) * C47279) *
                 C10231 +
             ((C5394 - C5395 + C5396 - C5397) * C116 +
              (C5398 - C5399 + C5400 - C5401) * C47279) *
                 C47391) *
                C3094 +
            (((C5395 - C5394 + C5397 - C5396) * C116 +
              (C5399 - C5398 + C5401 - C5400) * C47279) *
                 C10231 +
             ((C6902 - C6903 + C6904 - C6905) * C116 +
              (C6906 - C6907 + C6908 - C6909) * C47279) *
                 C47391) *
                C47178) *
               C47136) *
              C47059 +
          (((((C4575 * C126 - C4579 * C119 + C47358 * C130 - C4580 * C120) *
                  C116 +
              (C4575 * C140 - C4579 * C129 + C47358 * C141 - C4580 * C131) *
                  C47279) *
                 C10231 +
             ((C10558 - C10559 + C10560 - C10561) * C116 +
              (C10562 - C10563 + C10564 - C10565) * C47279) *
                 C47391) *
                C3094 +
            (((C10559 - C10558 + C10561 - C10560) * C116 +
              (C10563 - C10562 + C10565 - C10564) * C47279) *
                 C10231 +
             ((C10566 - C10567 + C10568 - C10569) * C116 +
              (C10570 - C10571 + C10572 - C10573) * C47279) *
                 C47391) *
                C47178) *
               C47339 +
           ((((C4763 - C4762 + C4765 - C4764) * C116 +
              (C4767 - C4766 + C4769 - C4768) * C47279) *
                 C10231 +
             ((C5402 - C5403 + C5404 - C5405) * C116 +
              (C5406 - C5407 + C5408 - C5409) * C47279) *
                 C47391) *
                C3094 +
            (((C5403 - C5402 + C5405 - C5404) * C116 +
              (C5407 - C5406 + C5409 - C5408) * C47279) *
                 C10231 +
             ((C4575 * C1161 - C4579 * C1152 + C47358 * C2015 - C4580 * C2014) *
                  C116 +
              (C4575 * C1179 - C4579 * C1164 + C47358 * C2017 - C4580 * C2016) *
                  C47279) *
                 C47391) *
                C47178) *
               C47136) *
              C2703)) /
        (p * q * std::sqrt(p + q));
    d2ee[66] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C4575 * C124 - C4579 * C117 + C47358 * C125 - C4580 * C118) *
                  C116 +
              (C4575 * C138 - C4579 * C127 + C47358 * C139 - C4580 * C128) *
                  C47279) *
                 C10231 +
             ((C10526 - C10527 + C10528 - C10529) * C116 +
              (C10530 - C10531 + C10532 - C10533) * C47279) *
                 C47391) *
                C47174 +
            (((C10527 - C10526 + C10529 - C10528) * C116 +
              (C10531 - C10530 + C10533 - C10532) * C47279) *
                 C10231 +
             ((C10534 - C10535 + C10536 - C10537) * C116 +
              (C10538 - C10539 + C10540 - C10541) * C47279) *
                 C47391) *
                C47181 +
            (((C10535 - C10534 + C10537 - C10536) * C116 +
              (C10539 - C10538 + C10541 - C10540) * C47279) *
                 C10231 +
             ((C12246 - C12247 + C12248 - C12249) * C116 +
              (C12250 - C12251 + C12252 - C12253) * C47279) *
                 C47391) *
                C3602) *
               C47339 +
           ((((C4731 - C4730 + C4733 - C4732) * C116 +
              (C4735 - C4734 + C4737 - C4736) * C47279) *
                 C10231 +
             ((C5386 - C5387 + C5388 - C5389) * C116 +
              (C5390 - C5391 + C5392 - C5393) * C47279) *
                 C47391) *
                C47174 +
            (((C5387 - C5386 + C5389 - C5388) * C116 +
              (C5391 - C5390 + C5393 - C5392) * C47279) *
                 C10231 +
             ((C5816 - C5817 + C5818 - C5819) * C116 +
              (C5820 - C5821 + C5822 - C5823) * C47279) *
                 C47391) *
                C47181 +
            (((C5817 - C5816 + C5819 - C5818) * C116 +
              (C5821 - C5820 + C5823 - C5822) * C47279) *
                 C10231 +
             ((C7178 - C7179 + C7180 - C7181) * C116 +
              (C7182 - C7183 + C7184 - C7185) * C47279) *
                 C47391) *
                C3602) *
               C47136) *
              C2440 +
          (((((C4579 * C118 - C4575 * C125 + C4580 * C119 - C47358 * C126) *
                  C116 +
              (C4579 * C128 - C4575 * C139 + C4580 * C129 - C47358 * C140) *
                  C47279) *
                 C10231 +
             ((C10542 - C10543 + C10544 - C10545) * C116 +
              (C10546 - C10547 + C10548 - C10549) * C47279) *
                 C47391) *
                C47174 +
            (((C10543 - C10542 + C10545 - C10544) * C116 +
              (C10547 - C10546 + C10549 - C10548) * C47279) *
                 C10231 +
             ((C10550 - C10551 + C10552 - C10553) * C116 +
              (C10554 - C10555 + C10556 - C10557) * C47279) *
                 C47391) *
                C47181 +
            (((C10551 - C10550 + C10553 - C10552) * C116 +
              (C10555 - C10554 + C10557 - C10556) * C47279) *
                 C10231 +
             ((C12586 - C12587 + C12588 - C12589) * C116 +
              (C12590 - C12591 + C12592 - C12593) * C47279) *
                 C47391) *
                C3602) *
               C47339 +
           ((((C4747 - C4746 + C4749 - C4748) * C116 +
              (C4751 - C4750 + C4753 - C4752) * C47279) *
                 C10231 +
             ((C5394 - C5395 + C5396 - C5397) * C116 +
              (C5398 - C5399 + C5400 - C5401) * C47279) *
                 C47391) *
                C47174 +
            (((C5395 - C5394 + C5397 - C5396) * C116 +
              (C5399 - C5398 + C5401 - C5400) * C47279) *
                 C10231 +
             ((C6902 - C6903 + C6904 - C6905) * C116 +
              (C6906 - C6907 + C6908 - C6909) * C47279) *
                 C47391) *
                C47181 +
            (((C6903 - C6902 + C6905 - C6904) * C116 +
              (C6907 - C6906 + C6909 - C6908) * C47279) *
                 C10231 +
             ((C4575 * C2226 - C4579 * C2223 + C47358 * C2227 - C4580 * C2224) *
                  C116 +
              (C4575 * C2232 - C4579 * C2229 + C47358 * C2233 - C4580 * C2230) *
                  C47279) *
                 C47391) *
                C3602) *
               C47136) *
              C47056)) /
        (p * q * std::sqrt(p + q));
    d2ee[67] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C4575 * C124 - C4579 * C117 + C47358 * C125 - C4580 * C118) *
                  C116 +
              (C4575 * C138 - C4579 * C127 + C47358 * C139 - C4580 * C128) *
                  C47279) *
                 C10231 +
             ((C10526 - C10527 + C10528 - C10529) * C116 +
              (C10530 - C10531 + C10532 - C10533) * C47279) *
                 C47391) *
                C3094 +
            (((C10527 - C10526 + C10529 - C10528) * C116 +
              (C10531 - C10530 + C10533 - C10532) * C47279) *
                 C10231 +
             ((C10534 - C10535 + C10536 - C10537) * C116 +
              (C10538 - C10539 + C10540 - C10541) * C47279) *
                 C47391) *
                C47178) *
               C47410 +
           ((((C4731 - C4730 + C4733 - C4732) * C116 +
              (C4735 - C4734 + C4737 - C4736) * C47279) *
                 C10231 +
             ((C5386 - C5387 + C5388 - C5389) * C116 +
              (C5390 - C5391 + C5392 - C5393) * C47279) *
                 C47391) *
                C3094 +
            (((C5387 - C5386 + C5389 - C5388) * C116 +
              (C5391 - C5390 + C5393 - C5392) * C47279) *
                 C10231 +
             ((C5816 - C5817 + C5818 - C5819) * C116 +
              (C5820 - C5821 + C5822 - C5823) * C47279) *
                 C47391) *
                C47178) *
               C47398 +
           ((((C4739 - C4738 + C4741 - C4740) * C116 +
              (C4743 - C4742 + C4745 - C4744) * C47279) *
                 C10231 +
             ((C5824 - C5825 + C5826 - C5827) * C116 +
              (C5828 - C5829 + C5830 - C5831) * C47279) *
                 C47391) *
                C3094 +
            (((C5825 - C5824 + C5827 - C5826) * C116 +
              (C5829 - C5828 + C5831 - C5830) * C47279) *
                 C10231 +
             ((C5832 - C5833 + C5834 - C5835) * C116 +
              (C5836 - C5837 + C5838 - C5839) * C47279) *
                 C47391) *
                C47178) *
               C47371) *
              C2440 +
          (((((C4579 * C118 - C4575 * C125 + C4580 * C119 - C47358 * C126) *
                  C116 +
              (C4579 * C128 - C4575 * C139 + C4580 * C129 - C47358 * C140) *
                  C47279) *
                 C10231 +
             ((C10542 - C10543 + C10544 - C10545) * C116 +
              (C10546 - C10547 + C10548 - C10549) * C47279) *
                 C47391) *
                C3094 +
            (((C10543 - C10542 + C10545 - C10544) * C116 +
              (C10547 - C10546 + C10549 - C10548) * C47279) *
                 C10231 +
             ((C10550 - C10551 + C10552 - C10553) * C116 +
              (C10554 - C10555 + C10556 - C10557) * C47279) *
                 C47391) *
                C47178) *
               C47410 +
           ((((C4747 - C4746 + C4749 - C4748) * C116 +
              (C4751 - C4750 + C4753 - C4752) * C47279) *
                 C10231 +
             ((C5394 - C5395 + C5396 - C5397) * C116 +
              (C5398 - C5399 + C5400 - C5401) * C47279) *
                 C47391) *
                C3094 +
            (((C5395 - C5394 + C5397 - C5396) * C116 +
              (C5399 - C5398 + C5401 - C5400) * C47279) *
                 C10231 +
             ((C6902 - C6903 + C6904 - C6905) * C116 +
              (C6906 - C6907 + C6908 - C6909) * C47279) *
                 C47391) *
                C47178) *
               C47398 +
           ((((C4755 - C4754 + C4757 - C4756) * C116 +
              (C4759 - C4758 + C4761 - C4760) * C47279) *
                 C10231 +
             ((C6172 - C6173 + C6174 - C6175) * C116 +
              (C6176 - C6177 + C6178 - C6179) * C47279) *
                 C47391) *
                C3094 +
            (((C6173 - C6172 + C6175 - C6174) * C116 +
              (C6177 - C6176 + C6179 - C6178) * C47279) *
                 C10231 +
             ((C4575 * C1172 - C4579 * C1157 + C47358 * C1173 - C4580 * C1158) *
                  C116 +
              (C4575 * C1184 - C4579 * C1175 + C47358 * C1185 - C4580 * C1176) *
                  C47279) *
                 C47391) *
                C47178) *
               C47371) *
              C47056)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C4575 * C124 - C4579 * C117 + C47358 * C125 - C4580 * C118) *
                 C116 +
             (C4575 * C138 - C4579 * C127 + C47358 * C139 - C4580 * C128) *
                 C47279) *
                C10231 +
            ((C10526 - C10527 + C10528 - C10529) * C116 +
             (C10530 - C10531 + C10532 - C10533) * C47279) *
                C47391) *
               C3094 +
           (((C10527 - C10526 + C10529 - C10528) * C116 +
             (C10531 - C10530 + C10533 - C10532) * C47279) *
                C10231 +
            ((C10534 - C10535 + C10536 - C10537) * C116 +
             (C10538 - C10539 + C10540 - C10541) * C47279) *
                C47391) *
               C47178) *
              C47073 * C47416 +
          ((((C4579 * C118 - C4575 * C125 + C4580 * C119 - C47358 * C126) *
                 C116 +
             (C4579 * C128 - C4575 * C139 + C4580 * C129 - C47358 * C140) *
                 C47279) *
                C10231 +
            ((C10542 - C10543 + C10544 - C10545) * C116 +
             (C10546 - C10547 + C10548 - C10549) * C47279) *
                C47391) *
               C3094 +
           (((C10543 - C10542 + C10545 - C10544) * C116 +
             (C10547 - C10546 + C10549 - C10548) * C47279) *
                C10231 +
            ((C10550 - C10551 + C10552 - C10553) * C116 +
             (C10554 - C10555 + C10556 - C10557) * C47279) *
                C47391) *
               C47178) *
              C47073 * C47409 +
          ((((C4575 * C126 - C4579 * C119 + C47358 * C130 - C4580 * C120) *
                 C116 +
             (C4575 * C140 - C4579 * C129 + C47358 * C141 - C4580 * C131) *
                 C47279) *
                C10231 +
            ((C10558 - C10559 + C10560 - C10561) * C116 +
             (C10562 - C10563 + C10564 - C10565) * C47279) *
                C47391) *
               C3094 +
           (((C10559 - C10558 + C10561 - C10560) * C116 +
             (C10563 - C10562 + C10565 - C10564) * C47279) *
                C10231 +
            ((C10566 - C10567 + C10568 - C10569) * C116 +
             (C10570 - C10571 + C10572 - C10573) * C47279) *
                C47391) *
               C47178) *
              C47073 * C47396 +
          ((((C4579 * C120 - C4575 * C130 + C4580 * C121 - C47358 * C132) *
                 C116 +
             (C4579 * C131 - C4575 * C141 + C4580 * C133 - C47358 * C142) *
                 C47279) *
                C10231 +
            ((C10834 - C10835 + C10836 - C10837) * C116 +
             (C10838 - C10839 + C10840 - C10841) * C47279) *
                C47391) *
               C3094 +
           (((C10835 - C10834 + C10837 - C10836) * C116 +
             (C10839 - C10838 + C10841 - C10840) * C47279) *
                C10231 +
            ((C4575 * C438 - C4579 * C421 + C47358 * C442 - C4580 * C423) *
                 C116 +
             (C4575 * C451 - C4579 * C439 + C47358 * C453 - C4580 * C443) *
                 C47279) *
                C47391) *
               C47178) *
              C47073 * C47375)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C4575 * C124 - C4579 * C117 + C47358 * C125 - C4580 * C118) *
                 C116 +
             (C4575 * C138 - C4579 * C127 + C47358 * C139 - C4580 * C128) *
                 C47279) *
                C10231 +
            ((C10526 - C10527 + C10528 - C10529) * C116 +
             (C10530 - C10531 + C10532 - C10533) * C47279) *
                C47391) *
               C47418 +
           (((C10527 - C10526 + C10529 - C10528) * C116 +
             (C10531 - C10530 + C10533 - C10532) * C47279) *
                C10231 +
            ((C10534 - C10535 + C10536 - C10537) * C116 +
             (C10538 - C10539 + C10540 - C10541) * C47279) *
                C47391) *
               C47415 +
           (((C10535 - C10534 + C10537 - C10536) * C116 +
             (C10539 - C10538 + C10541 - C10540) * C47279) *
                C10231 +
            ((C12246 - C12247 + C12248 - C12249) * C116 +
             (C12250 - C12251 + C12252 - C12253) * C47279) *
                C47391) *
               C47406 +
           (((C12247 - C12246 + C12249 - C12248) * C116 +
             (C12251 - C12250 + C12253 - C12252) * C47279) *
                C10231 +
            ((C12254 - C12255 + C12256 - C12257) * C116 +
             (C12258 - C12259 + C12260 - C12261) * C47279) *
                C47391) *
               C47387) *
              C47073 * C2440 +
          ((((C4579 * C118 - C4575 * C125 + C4580 * C119 - C47358 * C126) *
                 C116 +
             (C4579 * C128 - C4575 * C139 + C4580 * C129 - C47358 * C140) *
                 C47279) *
                C10231 +
            ((C10542 - C10543 + C10544 - C10545) * C116 +
             (C10546 - C10547 + C10548 - C10549) * C47279) *
                C47391) *
               C47418 +
           (((C10543 - C10542 + C10545 - C10544) * C116 +
             (C10547 - C10546 + C10549 - C10548) * C47279) *
                C10231 +
            ((C10550 - C10551 + C10552 - C10553) * C116 +
             (C10554 - C10555 + C10556 - C10557) * C47279) *
                C47391) *
               C47415 +
           (((C10551 - C10550 + C10553 - C10552) * C116 +
             (C10555 - C10554 + C10557 - C10556) * C47279) *
                C10231 +
            ((C12586 - C12587 + C12588 - C12589) * C116 +
             (C12590 - C12591 + C12592 - C12593) * C47279) *
                C47391) *
               C47406 +
           (((C12587 - C12586 + C12589 - C12588) * C116 +
             (C12591 - C12590 + C12593 - C12592) * C47279) *
                C10231 +
            ((C4575 * C1857 - C4579 * C1848 + C47358 * C1858 - C4580 * C1849) *
                 C116 +
             (C4575 * C1866 - C4579 * C1860 + C47358 * C1867 - C4580 * C1861) *
                 C47279) *
                C47391) *
               C47387) *
              C47073 * C47056)) /
            (p * q * std::sqrt(p + q));
    d2ee[68] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C4575 * C124 - C4579 * C117 + C47358 * C125 - C4580 * C118) *
                 C116 +
             (C4575 * C138 - C4579 * C127 + C47358 * C139 - C4580 * C128) *
                 C47279) *
                C10231 +
            ((C10526 - C10527 + C10528 - C10529) * C116 +
             (C10530 - C10531 + C10532 - C10533) * C47279) *
                C47391) *
               C47174 +
           (((C10527 - C10526 + C10529 - C10528) * C116 +
             (C10531 - C10530 + C10533 - C10532) * C47279) *
                C10231 +
            ((C10534 - C10535 + C10536 - C10537) * C116 +
             (C10538 - C10539 + C10540 - C10541) * C47279) *
                C47391) *
               C47181 +
           (((C10535 - C10534 + C10537 - C10536) * C116 +
             (C10539 - C10538 + C10541 - C10540) * C47279) *
                C10231 +
            ((C12246 - C12247 + C12248 - C12249) * C116 +
             (C12250 - C12251 + C12252 - C12253) * C47279) *
                C47391) *
               C3602) *
              C47073 * C47050 +
          ((((C4579 * C118 - C4575 * C125 + C4580 * C119 - C47358 * C126) *
                 C116 +
             (C4579 * C128 - C4575 * C139 + C4580 * C129 - C47358 * C140) *
                 C47279) *
                C10231 +
            ((C10542 - C10543 + C10544 - C10545) * C116 +
             (C10546 - C10547 + C10548 - C10549) * C47279) *
                C47391) *
               C47174 +
           (((C10543 - C10542 + C10545 - C10544) * C116 +
             (C10547 - C10546 + C10549 - C10548) * C47279) *
                C10231 +
            ((C10550 - C10551 + C10552 - C10553) * C116 +
             (C10554 - C10555 + C10556 - C10557) * C47279) *
                C47391) *
               C47181 +
           (((C10551 - C10550 + C10553 - C10552) * C116 +
             (C10555 - C10554 + C10557 - C10556) * C47279) *
                C10231 +
            ((C12586 - C12587 + C12588 - C12589) * C116 +
             (C12590 - C12591 + C12592 - C12593) * C47279) *
                C47391) *
               C3602) *
              C47073 * C47059 +
          ((((C4575 * C126 - C4579 * C119 + C47358 * C130 - C4580 * C120) *
                 C116 +
             (C4575 * C140 - C4579 * C129 + C47358 * C141 - C4580 * C131) *
                 C47279) *
                C10231 +
            ((C10558 - C10559 + C10560 - C10561) * C116 +
             (C10562 - C10563 + C10564 - C10565) * C47279) *
                C47391) *
               C47174 +
           (((C10559 - C10558 + C10561 - C10560) * C116 +
             (C10563 - C10562 + C10565 - C10564) * C47279) *
                C10231 +
            ((C10566 - C10567 + C10568 - C10569) * C116 +
             (C10570 - C10571 + C10572 - C10573) * C47279) *
                C47391) *
               C47181 +
           (((C10567 - C10566 + C10569 - C10568) * C116 +
             (C10571 - C10570 + C10573 - C10572) * C47279) *
                C10231 +
            ((C4575 * C1852 - C4579 * C1846 + C47358 * C2121 - C4580 * C2120) *
                 C116 +
             (C4575 * C1864 - C4579 * C1855 + C47358 * C2123 - C4580 * C2122) *
                 C47279) *
                C47391) *
               C3602) *
              C47073 * C2703)) /
        (p * q * std::sqrt(p + q));
    d2ee[69] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C4575 * C124 - C4579 * C117 + C47358 * C125 - C4580 * C118) *
                 C116 +
             (C4575 * C138 - C4579 * C127 + C47358 * C139 - C4580 * C128) *
                 C47279) *
                C10231 +
            ((C10526 - C10527 + C10528 - C10529) * C116 +
             (C10530 - C10531 + C10532 - C10533) * C47279) *
                C47391) *
               C3094 +
           (((C10527 - C10526 + C10529 - C10528) * C116 +
             (C10531 - C10530 + C10533 - C10532) * C47279) *
                C10231 +
            ((C10534 - C10535 + C10536 - C10537) * C116 +
             (C10538 - C10539 + C10540 - C10541) * C47279) *
                C47391) *
               C47178) *
              C47073 * C47416 +
          ((((C4579 * C118 - C4575 * C125 + C4580 * C119 - C47358 * C126) *
                 C116 +
             (C4579 * C128 - C4575 * C139 + C4580 * C129 - C47358 * C140) *
                 C47279) *
                C10231 +
            ((C10542 - C10543 + C10544 - C10545) * C116 +
             (C10546 - C10547 + C10548 - C10549) * C47279) *
                C47391) *
               C3094 +
           (((C10543 - C10542 + C10545 - C10544) * C116 +
             (C10547 - C10546 + C10549 - C10548) * C47279) *
                C10231 +
            ((C10550 - C10551 + C10552 - C10553) * C116 +
             (C10554 - C10555 + C10556 - C10557) * C47279) *
                C47391) *
               C47178) *
              C47073 * C47409 +
          ((((C4575 * C126 - C4579 * C119 + C47358 * C130 - C4580 * C120) *
                 C116 +
             (C4575 * C140 - C4579 * C129 + C47358 * C141 - C4580 * C131) *
                 C47279) *
                C10231 +
            ((C10558 - C10559 + C10560 - C10561) * C116 +
             (C10562 - C10563 + C10564 - C10565) * C47279) *
                C47391) *
               C3094 +
           (((C10559 - C10558 + C10561 - C10560) * C116 +
             (C10563 - C10562 + C10565 - C10564) * C47279) *
                C10231 +
            ((C10566 - C10567 + C10568 - C10569) * C116 +
             (C10570 - C10571 + C10572 - C10573) * C47279) *
                C47391) *
               C47178) *
              C47073 * C47396 +
          ((((C4579 * C120 - C4575 * C130 + C4580 * C121 - C47358 * C132) *
                 C116 +
             (C4579 * C131 - C4575 * C141 + C4580 * C133 - C47358 * C142) *
                 C47279) *
                C10231 +
            ((C10834 - C10835 + C10836 - C10837) * C116 +
             (C10838 - C10839 + C10840 - C10841) * C47279) *
                C47391) *
               C3094 +
           (((C10835 - C10834 + C10837 - C10836) * C116 +
             (C10839 - C10838 + C10841 - C10840) * C47279) *
                C10231 +
            ((C4575 * C438 - C4579 * C421 + C47358 * C442 - C4580 * C423) *
                 C116 +
             (C4575 * C451 - C4579 * C439 + C47358 * C453 - C4580 * C443) *
                 C47279) *
                C47391) *
               C47178) *
              C47073 * C47375)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C4575 * C124 - C4579 * C117 + C47358 * C125 - C4580 * C118) *
                  C116 +
              (C4575 * C138 - C4579 * C127 + C47358 * C139 - C4580 * C128) *
                  C47279) *
                 C10231 +
             ((C10526 - C10527 + C10528 - C10529) * C116 +
              (C10530 - C10531 + C10532 - C10533) * C47279) *
                 C47391) *
                C3094 +
            (((C10527 - C10526 + C10529 - C10528) * C116 +
              (C10531 - C10530 + C10533 - C10532) * C47279) *
                 C10231 +
             ((C10534 - C10535 + C10536 - C10537) * C116 +
              (C10538 - C10539 + C10540 - C10541) * C47279) *
                 C47391) *
                C47178) *
               C47410 +
           ((((C4731 - C4730 + C4733 - C4732) * C116 +
              (C4735 - C4734 + C4737 - C4736) * C47279) *
                 C10231 +
             ((C5386 - C5387 + C5388 - C5389) * C116 +
              (C5390 - C5391 + C5392 - C5393) * C47279) *
                 C47391) *
                C3094 +
            (((C5387 - C5386 + C5389 - C5388) * C116 +
              (C5391 - C5390 + C5393 - C5392) * C47279) *
                 C10231 +
             ((C5816 - C5817 + C5818 - C5819) * C116 +
              (C5820 - C5821 + C5822 - C5823) * C47279) *
                 C47391) *
                C47178) *
               C47398 +
           ((((C4739 - C4738 + C4741 - C4740) * C116 +
              (C4743 - C4742 + C4745 - C4744) * C47279) *
                 C10231 +
             ((C5824 - C5825 + C5826 - C5827) * C116 +
              (C5828 - C5829 + C5830 - C5831) * C47279) *
                 C47391) *
                C3094 +
            (((C5825 - C5824 + C5827 - C5826) * C116 +
              (C5829 - C5828 + C5831 - C5830) * C47279) *
                 C10231 +
             ((C5832 - C5833 + C5834 - C5835) * C116 +
              (C5836 - C5837 + C5838 - C5839) * C47279) *
                 C47391) *
                C47178) *
               C47371) *
              C2440 +
          (((((C4579 * C118 - C4575 * C125 + C4580 * C119 - C47358 * C126) *
                  C116 +
              (C4579 * C128 - C4575 * C139 + C4580 * C129 - C47358 * C140) *
                  C47279) *
                 C10231 +
             ((C10542 - C10543 + C10544 - C10545) * C116 +
              (C10546 - C10547 + C10548 - C10549) * C47279) *
                 C47391) *
                C3094 +
            (((C10543 - C10542 + C10545 - C10544) * C116 +
              (C10547 - C10546 + C10549 - C10548) * C47279) *
                 C10231 +
             ((C10550 - C10551 + C10552 - C10553) * C116 +
              (C10554 - C10555 + C10556 - C10557) * C47279) *
                 C47391) *
                C47178) *
               C47410 +
           ((((C4747 - C4746 + C4749 - C4748) * C116 +
              (C4751 - C4750 + C4753 - C4752) * C47279) *
                 C10231 +
             ((C5394 - C5395 + C5396 - C5397) * C116 +
              (C5398 - C5399 + C5400 - C5401) * C47279) *
                 C47391) *
                C3094 +
            (((C5395 - C5394 + C5397 - C5396) * C116 +
              (C5399 - C5398 + C5401 - C5400) * C47279) *
                 C10231 +
             ((C6902 - C6903 + C6904 - C6905) * C116 +
              (C6906 - C6907 + C6908 - C6909) * C47279) *
                 C47391) *
                C47178) *
               C47398 +
           ((((C4755 - C4754 + C4757 - C4756) * C116 +
              (C4759 - C4758 + C4761 - C4760) * C47279) *
                 C10231 +
             ((C6172 - C6173 + C6174 - C6175) * C116 +
              (C6176 - C6177 + C6178 - C6179) * C47279) *
                 C47391) *
                C3094 +
            (((C6173 - C6172 + C6175 - C6174) * C116 +
              (C6177 - C6176 + C6179 - C6178) * C47279) *
                 C10231 +
             ((C4575 * C1172 - C4579 * C1157 + C47358 * C1173 - C4580 * C1158) *
                  C116 +
              (C4575 * C1184 - C4579 * C1175 + C47358 * C1185 - C4580 * C1176) *
                  C47279) *
                 C47391) *
                C47178) *
               C47371) *
              C47056)) /
            (p * q * std::sqrt(p + q));
    d2ee[70] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C4575 * C124 - C4579 * C117 + C47358 * C125 - C4580 * C118) *
                 C116 +
             (C4575 * C138 - C4579 * C127 + C47358 * C139 - C4580 * C128) *
                 C47279) *
                C10231 +
            ((C10526 - C10527 + C10528 - C10529) * C116 +
             (C10530 - C10531 + C10532 - C10533) * C47279) *
                C47391) *
               C47091 * C47339 +
           (((C4731 - C4730 + C4733 - C4732) * C116 +
             (C4735 - C4734 + C4737 - C4736) * C47279) *
                C10231 +
            ((C5386 - C5387 + C5388 - C5389) * C116 +
             (C5390 - C5391 + C5392 - C5393) * C47279) *
                C47391) *
               C47091 * C47136) *
              C554 +
          ((((C4579 * C118 - C4575 * C125 + C4580 * C119 - C47358 * C126) *
                 C116 +
             (C4579 * C128 - C4575 * C139 + C4580 * C129 - C47358 * C140) *
                 C47279) *
                C10231 +
            ((C10542 - C10543 + C10544 - C10545) * C116 +
             (C10546 - C10547 + C10548 - C10549) * C47279) *
                C47391) *
               C47091 * C47339 +
           (((C4747 - C4746 + C4749 - C4748) * C116 +
             (C4751 - C4750 + C4753 - C4752) * C47279) *
                C10231 +
            ((C5394 - C5395 + C5396 - C5397) * C116 +
             (C5398 - C5399 + C5400 - C5401) * C47279) *
                C47391) *
               C47091 * C47136) *
              C555 +
          ((((C4575 * C126 - C4579 * C119 + C47358 * C130 - C4580 * C120) *
                 C116 +
             (C4575 * C140 - C4579 * C129 + C47358 * C141 - C4580 * C131) *
                 C47279) *
                C10231 +
            ((C10558 - C10559 + C10560 - C10561) * C116 +
             (C10562 - C10563 + C10564 - C10565) * C47279) *
                C47391) *
               C47091 * C47339 +
           (((C4763 - C4762 + C4765 - C4764) * C116 +
             (C4767 - C4766 + C4769 - C4768) * C47279) *
                C10231 +
            ((C5402 - C5403 + C5404 - C5405) * C116 +
             (C5406 - C5407 + C5408 - C5409) * C47279) *
                C47391) *
               C47091 * C47136) *
              C556 +
          ((((C4579 * C120 - C4575 * C130 + C4580 * C121 - C47358 * C132) *
                 C116 +
             (C4579 * C131 - C4575 * C141 + C4580 * C133 - C47358 * C142) *
                 C47279) *
                C10231 +
            ((C4579 * C420 - C4575 * C436 + C4580 * C422 - C47358 * C440) *
                 C116 +
             (C4579 * C437 - C4575 * C450 + C4580 * C441 - C47358 * C452) *
                 C47279) *
                C47391) *
               C47091 * C47339 +
           (((C5055 - C5054 + C5057 - C5056) * C116 +
             (C5059 - C5058 + C5061 - C5060) * C47279) *
                C10231 +
            ((C4575 * C823 - C4579 * C815 + C47358 * C825 - C4580 * C816) *
                 C116 +
             (C4575 * C830 - C4579 * C824 + C47358 * C831 - C4580 * C826) *
                 C47279) *
                C47391) *
               C47091 * C47136) *
              C47375)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C4575 * C124 - C4579 * C117 + C47358 * C125 - C4580 * C118) *
                 C116 +
             (C4575 * C138 - C4579 * C127 + C47358 * C139 - C4580 * C128) *
                 C47279) *
                C10231 +
            ((C10526 - C10527 + C10528 - C10529) * C116 +
             (C10530 - C10531 + C10532 - C10533) * C47279) *
                C47391) *
               C47091 * C1284 +
           (((C4731 - C4730 + C4733 - C4732) * C116 +
             (C4735 - C4734 + C4737 - C4736) * C47279) *
                C10231 +
            ((C5386 - C5387 + C5388 - C5389) * C116 +
             (C5390 - C5391 + C5392 - C5393) * C47279) *
                C47391) *
               C47091 * C1285 +
           (((C4739 - C4738 + C4741 - C4740) * C116 +
             (C4743 - C4742 + C4745 - C4744) * C47279) *
                C10231 +
            ((C5824 - C5825 + C5826 - C5827) * C116 +
             (C5828 - C5829 + C5830 - C5831) * C47279) *
                C47391) *
               C47091 * C1286 +
           (((C5647 - C5646 + C5649 - C5648) * C116 +
             (C5651 - C5650 + C5653 - C5652) * C47279) *
                C10231 +
            ((C6318 - C6319 + C6320 - C6321) * C116 +
             (C6322 - C6323 + C6324 - C6325) * C47279) *
                C47391) *
               C47091 * C47381) *
              C47325 +
          ((((C4579 * C118 - C4575 * C125 + C4580 * C119 - C47358 * C126) *
                 C116 +
             (C4579 * C128 - C4575 * C139 + C4580 * C129 - C47358 * C140) *
                 C47279) *
                C10231 +
            ((C10542 - C10543 + C10544 - C10545) * C116 +
             (C10546 - C10547 + C10548 - C10549) * C47279) *
                C47391) *
               C47091 * C1284 +
           (((C4747 - C4746 + C4749 - C4748) * C116 +
             (C4751 - C4750 + C4753 - C4752) * C47279) *
                C10231 +
            ((C5394 - C5395 + C5396 - C5397) * C116 +
             (C5398 - C5399 + C5400 - C5401) * C47279) *
                C47391) *
               C47091 * C1285 +
           (((C4755 - C4754 + C4757 - C4756) * C116 +
             (C4759 - C4758 + C4761 - C4760) * C47279) *
                C10231 +
            ((C6172 - C6173 + C6174 - C6175) * C116 +
             (C6176 - C6177 + C6178 - C6179) * C47279) *
                C47391) *
               C47091 * C1286 +
           (((C5971 - C5970 + C5973 - C5972) * C116 +
             (C5975 - C5974 + C5977 - C5976) * C47279) *
                C10231 +
            ((C4575 * C1546 - C4579 * C1543 + C47358 * C1547 - C4580 * C1544) *
                 C116 +
             (C4575 * C1552 - C4579 * C1549 + C47358 * C1553 - C4580 * C1550) *
                 C47279) *
                C47391) *
               C47091 * C47381) *
              C47056)) /
            (p * q * std::sqrt(p + q));
    d2ee[71] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C4575 * C124 - C4579 * C117 + C47358 * C125 - C4580 * C118) *
                  C116 +
              (C4575 * C138 - C4579 * C127 + C47358 * C139 - C4580 * C128) *
                  C47279) *
                 C10231 +
             ((C10526 - C10527 + C10528 - C10529) * C116 +
              (C10530 - C10531 + C10532 - C10533) * C47279) *
                 C47391) *
                C47340 +
            (((C10527 - C10526 + C10529 - C10528) * C116 +
              (C10531 - C10530 + C10533 - C10532) * C47279) *
                 C10231 +
             ((C10534 - C10535 + C10536 - C10537) * C116 +
              (C10538 - C10539 + C10540 - C10541) * C47279) *
                 C47391) *
                C47178) *
               C47339 +
           ((((C4731 - C4730 + C4733 - C4732) * C116 +
              (C4735 - C4734 + C4737 - C4736) * C47279) *
                 C10231 +
             ((C5386 - C5387 + C5388 - C5389) * C116 +
              (C5390 - C5391 + C5392 - C5393) * C47279) *
                 C47391) *
                C47340 +
            (((C5387 - C5386 + C5389 - C5388) * C116 +
              (C5391 - C5390 + C5393 - C5392) * C47279) *
                 C10231 +
             ((C5816 - C5817 + C5818 - C5819) * C116 +
              (C5820 - C5821 + C5822 - C5823) * C47279) *
                 C47391) *
                C47178) *
               C47136) *
              C258 +
          (((((C4579 * C118 - C4575 * C125 + C4580 * C119 - C47358 * C126) *
                  C116 +
              (C4579 * C128 - C4575 * C139 + C4580 * C129 - C47358 * C140) *
                  C47279) *
                 C10231 +
             ((C10542 - C10543 + C10544 - C10545) * C116 +
              (C10546 - C10547 + C10548 - C10549) * C47279) *
                 C47391) *
                C47340 +
            (((C10543 - C10542 + C10545 - C10544) * C116 +
              (C10547 - C10546 + C10549 - C10548) * C47279) *
                 C10231 +
             ((C10550 - C10551 + C10552 - C10553) * C116 +
              (C10554 - C10555 + C10556 - C10557) * C47279) *
                 C47391) *
                C47178) *
               C47339 +
           ((((C4747 - C4746 + C4749 - C4748) * C116 +
              (C4751 - C4750 + C4753 - C4752) * C47279) *
                 C10231 +
             ((C5394 - C5395 + C5396 - C5397) * C116 +
              (C5398 - C5399 + C5400 - C5401) * C47279) *
                 C47391) *
                C47340 +
            (((C5395 - C5394 + C5397 - C5396) * C116 +
              (C5399 - C5398 + C5401 - C5400) * C47279) *
                 C10231 +
             ((C6902 - C6903 + C6904 - C6905) * C116 +
              (C6906 - C6907 + C6908 - C6909) * C47279) *
                 C47391) *
                C47178) *
               C47136) *
              C259 +
          (((((C4575 * C126 - C4579 * C119 + C47358 * C130 - C4580 * C120) *
                  C116 +
              (C4575 * C140 - C4579 * C129 + C47358 * C141 - C4580 * C131) *
                  C47279) *
                 C10231 +
             ((C10558 - C10559 + C10560 - C10561) * C116 +
              (C10562 - C10563 + C10564 - C10565) * C47279) *
                 C47391) *
                C47340 +
            (((C10559 - C10558 + C10561 - C10560) * C116 +
              (C10563 - C10562 + C10565 - C10564) * C47279) *
                 C10231 +
             ((C10566 - C10567 + C10568 - C10569) * C116 +
              (C10570 - C10571 + C10572 - C10573) * C47279) *
                 C47391) *
                C47178) *
               C47339 +
           ((((C4763 - C4762 + C4765 - C4764) * C116 +
              (C4767 - C4766 + C4769 - C4768) * C47279) *
                 C10231 +
             ((C5402 - C5403 + C5404 - C5405) * C116 +
              (C5406 - C5407 + C5408 - C5409) * C47279) *
                 C47391) *
                C47340 +
            (((C5403 - C5402 + C5405 - C5404) * C116 +
              (C5407 - C5406 + C5409 - C5408) * C47279) *
                 C10231 +
             ((C4575 * C1161 - C4579 * C1152 + C47358 * C2015 - C4580 * C2014) *
                  C116 +
              (C4575 * C1179 - C4579 * C1164 + C47358 * C2017 - C4580 * C2016) *
                  C47279) *
                 C47391) *
                C47178) *
               C47136) *
              C47365)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C4575 * C124 - C4579 * C117 + C47358 * C125 - C4580 * C118) *
                 C116 +
             (C4575 * C138 - C4579 * C127 + C47358 * C139 - C4580 * C128) *
                 C47279) *
                C10231 +
            ((C10526 - C10527 + C10528 - C10529) * C116 +
             (C10530 - C10531 + C10532 - C10533) * C47279) *
                C47391) *
               C47340 +
           (((C10527 - C10526 + C10529 - C10528) * C116 +
             (C10531 - C10530 + C10533 - C10532) * C47279) *
                C10231 +
            ((C10534 - C10535 + C10536 - C10537) * C116 +
             (C10538 - C10539 + C10540 - C10541) * C47279) *
                C47391) *
               C47178) *
              C1284 +
          ((((C4731 - C4730 + C4733 - C4732) * C116 +
             (C4735 - C4734 + C4737 - C4736) * C47279) *
                C10231 +
            ((C5386 - C5387 + C5388 - C5389) * C116 +
             (C5390 - C5391 + C5392 - C5393) * C47279) *
                C47391) *
               C47340 +
           (((C5387 - C5386 + C5389 - C5388) * C116 +
             (C5391 - C5390 + C5393 - C5392) * C47279) *
                C10231 +
            ((C5816 - C5817 + C5818 - C5819) * C116 +
             (C5820 - C5821 + C5822 - C5823) * C47279) *
                C47391) *
               C47178) *
              C1285 +
          ((((C4739 - C4738 + C4741 - C4740) * C116 +
             (C4743 - C4742 + C4745 - C4744) * C47279) *
                C10231 +
            ((C5824 - C5825 + C5826 - C5827) * C116 +
             (C5828 - C5829 + C5830 - C5831) * C47279) *
                C47391) *
               C47340 +
           (((C5825 - C5824 + C5827 - C5826) * C116 +
             (C5829 - C5828 + C5831 - C5830) * C47279) *
                C10231 +
            ((C5832 - C5833 + C5834 - C5835) * C116 +
             (C5836 - C5837 + C5838 - C5839) * C47279) *
                C47391) *
               C47178) *
              C1286 +
          ((((C5647 - C5646 + C5649 - C5648) * C116 +
             (C5651 - C5650 + C5653 - C5652) * C47279) *
                C10231 +
            ((C6318 - C6319 + C6320 - C6321) * C116 +
             (C6322 - C6323 + C6324 - C6325) * C47279) *
                C47391) *
               C47340 +
           (((C6319 - C6318 + C6321 - C6320) * C116 +
             (C6323 - C6322 + C6325 - C6324) * C47279) *
                C10231 +
            ((C4575 * C5809 - C4579 * C5807 + C47358 * C5810 - C4580 * C5808) *
                 C116 +
             (C4575 * C5813 - C4579 * C5811 + C47358 * C5814 - C4580 * C5812) *
                 C47279) *
                C47391) *
               C47178) *
              C47381) *
         C47045) /
            (p * q * std::sqrt(p + q));
    d2ee[72] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C4575 * C124 - C4579 * C117 + C47358 * C125 - C4580 * C118) *
                 C116 +
             (C4575 * C138 - C4579 * C127 + C47358 * C139 - C4580 * C128) *
                 C47279) *
                C10231 +
            ((C4575 * C424 - C4579 * C414 + C47358 * C425 - C4580 * C415) *
                 C116 +
             (C4575 * C444 - C4579 * C427 + C47358 * C445 - C4580 * C428) *
                 C47279) *
                C47391) *
               C47091 * C47410 +
           (((C4731 - C4730 + C4733 - C4732) * C116 +
             (C4735 - C4734 + C4737 - C4736) * C47279) *
                C10231 +
            ((C5386 - C5387 + C5388 - C5389) * C116 +
             (C5390 - C5391 + C5392 - C5393) * C47279) *
                C47391) *
               C47091 * C47398 +
           (((C4739 - C4738 + C4741 - C4740) * C116 +
             (C4743 - C4742 + C4745 - C4744) * C47279) *
                C10231 +
            ((C5824 - C5825 + C5826 - C5827) * C116 +
             (C5828 - C5829 + C5830 - C5831) * C47279) *
                C47391) *
               C47091 * C47371) *
              C258 +
          ((((C4579 * C118 - C4575 * C125 + C4580 * C119 - C47358 * C126) *
                 C116 +
             (C4579 * C128 - C4575 * C139 + C4580 * C129 - C47358 * C140) *
                 C47279) *
                C10231 +
            ((C4579 * C415 - C4575 * C425 + C4580 * C416 - C47358 * C426) *
                 C116 +
             (C4579 * C428 - C4575 * C445 + C4580 * C429 - C47358 * C446) *
                 C47279) *
                C47391) *
               C47091 * C47410 +
           (((C4747 - C4746 + C4749 - C4748) * C116 +
             (C4751 - C4750 + C4753 - C4752) * C47279) *
                C10231 +
            ((C5394 - C5395 + C5396 - C5397) * C116 +
             (C5398 - C5399 + C5400 - C5401) * C47279) *
                C47391) *
               C47091 * C47398 +
           (((C4755 - C4754 + C4757 - C4756) * C116 +
             (C4759 - C4758 + C4761 - C4760) * C47279) *
                C10231 +
            ((C6172 - C6173 + C6174 - C6175) * C116 +
             (C6176 - C6177 + C6178 - C6179) * C47279) *
                C47391) *
               C47091 * C47371) *
              C259 +
          ((((C4575 * C126 - C4579 * C119 + C47358 * C130 - C4580 * C120) *
                 C116 +
             (C4575 * C140 - C4579 * C129 + C47358 * C141 - C4580 * C131) *
                 C47279) *
                C10231 +
            ((C4575 * C426 - C4579 * C416 + C47358 * C436 - C4580 * C420) *
                 C116 +
             (C4575 * C446 - C4579 * C429 + C47358 * C450 - C4580 * C437) *
                 C47279) *
                C47391) *
               C47091 * C47410 +
           (((C4763 - C4762 + C4765 - C4764) * C116 +
             (C4767 - C4766 + C4769 - C4768) * C47279) *
                C10231 +
            ((C5402 - C5403 + C5404 - C5405) * C116 +
             (C5406 - C5407 + C5408 - C5409) * C47279) *
                C47391) *
               C47091 * C47398 +
           (((C4771 - C4770 + C4773 - C4772) * C116 +
             (C4775 - C4774 + C4777 - C4776) * C47279) *
                C10231 +
            ((C4575 * C1167 - C4579 * C1155 + C47358 * C1441 - C4580 * C1440) *
                 C116 +
             (C4575 * C1182 - C4579 * C1170 + C47358 * C1443 - C4580 * C1442) *
                 C47279) *
                C47391) *
               C47091 * C47371) *
              C47365)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C4575 * C124 - C4579 * C117 + C47358 * C125 - C4580 * C118) *
                C116 +
            (C4575 * C138 - C4579 * C127 + C47358 * C139 - C4580 * C128) *
                C47279) *
               C10231 +
           ((C4575 * C424 - C4579 * C414 + C47358 * C425 - C4580 * C415) *
                C116 +
            (C4575 * C444 - C4579 * C427 + C47358 * C445 - C4580 * C428) *
                C47279) *
               C47391) *
              C47091 * C47073 * C108 +
          (((C4579 * C118 - C4575 * C125 + C4580 * C119 - C47358 * C126) *
                C116 +
            (C4579 * C128 - C4575 * C139 + C4580 * C129 - C47358 * C140) *
                C47279) *
               C10231 +
           ((C4579 * C415 - C4575 * C425 + C4580 * C416 - C47358 * C426) *
                C116 +
            (C4579 * C428 - C4575 * C445 + C4580 * C429 - C47358 * C446) *
                C47279) *
               C47391) *
              C47091 * C47073 * C109 +
          (((C4575 * C126 - C4579 * C119 + C47358 * C130 - C4580 * C120) *
                C116 +
            (C4575 * C140 - C4579 * C129 + C47358 * C141 - C4580 * C131) *
                C47279) *
               C10231 +
           ((C4575 * C426 - C4579 * C416 + C47358 * C436 - C4580 * C420) *
                C116 +
            (C4575 * C446 - C4579 * C429 + C47358 * C450 - C4580 * C437) *
                C47279) *
               C47391) *
              C47091 * C47073 * C110 +
          (((C4579 * C120 - C4575 * C130 + C4580 * C121 - C47358 * C132) *
                C116 +
            (C4579 * C131 - C4575 * C141 + C4580 * C133 - C47358 * C142) *
                C47279) *
               C10231 +
           ((C4579 * C420 - C4575 * C436 + C4580 * C422 - C47358 * C440) *
                C116 +
            (C4579 * C437 - C4575 * C450 + C4580 * C441 - C47358 * C452) *
                C47279) *
               C47391) *
              C47091 * C47073 * C111 +
          (((C4575 * C132 - C4579 * C121 + C47358 * C134 - C4580 * C122) *
                C116 +
            (C4575 * C142 - C4579 * C133 + C47358 * C143 - C4580 * C135) *
                C47279) *
               C10231 +
           ((C4575 * C440 - C4579 * C422 + C47358 * C663 - C4580 * C662) *
                C116 +
            (C4575 * C452 - C4579 * C441 + C47358 * C665 - C4580 * C664) *
                C47279) *
               C47391) *
              C47091 * C47073 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C4575 * C124 - C4579 * C117 + C47358 * C125 - C4580 * C118) *
                 C116 +
             (C4575 * C138 - C4579 * C127 + C47358 * C139 - C4580 * C128) *
                 C47279) *
                C10231 +
            ((C10526 - C10527 + C10528 - C10529) * C116 +
             (C10530 - C10531 + C10532 - C10533) * C47279) *
                C47391) *
               C47411 +
           (((C10527 - C10526 + C10529 - C10528) * C116 +
             (C10531 - C10530 + C10533 - C10532) * C47279) *
                C10231 +
            ((C10534 - C10535 + C10536 - C10537) * C116 +
             (C10538 - C10539 + C10540 - C10541) * C47279) *
                C47391) *
               C47400 +
           (((C10535 - C10534 + C10537 - C10536) * C116 +
             (C10539 - C10538 + C10541 - C10540) * C47279) *
                C10231 +
            ((C4575 * C1850 - C4579 * C1844 + C47358 * C1851 - C4580 * C1845) *
                 C116 +
             (C4575 * C1862 - C4579 * C1853 + C47358 * C1863 - C4580 * C1854) *
                 C47279) *
                C47391) *
               C47374) *
              C47073 * C258 +
          ((((C4579 * C118 - C4575 * C125 + C4580 * C119 - C47358 * C126) *
                 C116 +
             (C4579 * C128 - C4575 * C139 + C4580 * C129 - C47358 * C140) *
                 C47279) *
                C10231 +
            ((C10542 - C10543 + C10544 - C10545) * C116 +
             (C10546 - C10547 + C10548 - C10549) * C47279) *
                C47391) *
               C47411 +
           (((C10543 - C10542 + C10545 - C10544) * C116 +
             (C10547 - C10546 + C10549 - C10548) * C47279) *
                C10231 +
            ((C10550 - C10551 + C10552 - C10553) * C116 +
             (C10554 - C10555 + C10556 - C10557) * C47279) *
                C47391) *
               C47400 +
           (((C10551 - C10550 + C10553 - C10552) * C116 +
             (C10555 - C10554 + C10557 - C10556) * C47279) *
                C10231 +
            ((C4579 * C1845 - C4575 * C1851 + C4580 * C1846 - C47358 * C1852) *
                 C116 +
             (C4579 * C1854 - C4575 * C1863 + C4580 * C1855 - C47358 * C1864) *
                 C47279) *
                C47391) *
               C47374) *
              C47073 * C259 +
          ((((C4575 * C126 - C4579 * C119 + C47358 * C130 - C4580 * C120) *
                 C116 +
             (C4575 * C140 - C4579 * C129 + C47358 * C141 - C4580 * C131) *
                 C47279) *
                C10231 +
            ((C10558 - C10559 + C10560 - C10561) * C116 +
             (C10562 - C10563 + C10564 - C10565) * C47279) *
                C47391) *
               C47411 +
           (((C10559 - C10558 + C10561 - C10560) * C116 +
             (C10563 - C10562 + C10565 - C10564) * C47279) *
                C10231 +
            ((C10566 - C10567 + C10568 - C10569) * C116 +
             (C10570 - C10571 + C10572 - C10573) * C47279) *
                C47391) *
               C47400 +
           (((C10567 - C10566 + C10569 - C10568) * C116 +
             (C10571 - C10570 + C10573 - C10572) * C47279) *
                C10231 +
            ((C4575 * C1852 - C4579 * C1846 + C47358 * C2121 - C4580 * C2120) *
                 C116 +
             (C4575 * C1864 - C4579 * C1855 + C47358 * C2123 - C4580 * C2122) *
                 C47279) *
                C47391) *
               C47374) *
              C47073 * C47365)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C4575 * C124 - C4579 * C117 + C47358 * C125 - C4580 * C118) *
                 C116 +
             (C4575 * C138 - C4579 * C127 + C47358 * C139 - C4580 * C128) *
                 C47279) *
                C10231 +
            ((C10526 - C10527 + C10528 - C10529) * C116 +
             (C10530 - C10531 + C10532 - C10533) * C47279) *
                C47391) *
               C47091 * C942 +
           (((C4731 - C4730 + C4733 - C4732) * C116 +
             (C4735 - C4734 + C4737 - C4736) * C47279) *
                C10231 +
            ((C5386 - C5387 + C5388 - C5389) * C116 +
             (C5390 - C5391 + C5392 - C5393) * C47279) *
                C47391) *
               C47091 * C943 +
           (((C4739 - C4738 + C4741 - C4740) * C116 +
             (C4743 - C4742 + C4745 - C4744) * C47279) *
                C10231 +
            ((C5824 - C5825 + C5826 - C5827) * C116 +
             (C5828 - C5829 + C5830 - C5831) * C47279) *
                C47391) *
               C47091 * C47371) *
              C47407 +
          ((((C4579 * C118 - C4575 * C125 + C4580 * C119 - C47358 * C126) *
                 C116 +
             (C4579 * C128 - C4575 * C139 + C4580 * C129 - C47358 * C140) *
                 C47279) *
                C10231 +
            ((C10542 - C10543 + C10544 - C10545) * C116 +
             (C10546 - C10547 + C10548 - C10549) * C47279) *
                C47391) *
               C47091 * C942 +
           (((C4747 - C4746 + C4749 - C4748) * C116 +
             (C4751 - C4750 + C4753 - C4752) * C47279) *
                C10231 +
            ((C5394 - C5395 + C5396 - C5397) * C116 +
             (C5398 - C5399 + C5400 - C5401) * C47279) *
                C47391) *
               C47091 * C943 +
           (((C4755 - C4754 + C4757 - C4756) * C116 +
             (C4759 - C4758 + C4761 - C4760) * C47279) *
                C10231 +
            ((C6172 - C6173 + C6174 - C6175) * C116 +
             (C6176 - C6177 + C6178 - C6179) * C47279) *
                C47391) *
               C47091 * C47371) *
              C47394 +
          ((((C4575 * C126 - C4579 * C119 + C47358 * C130 - C4580 * C120) *
                 C116 +
             (C4575 * C140 - C4579 * C129 + C47358 * C141 - C4580 * C131) *
                 C47279) *
                C10231 +
            ((C10558 - C10559 + C10560 - C10561) * C116 +
             (C10562 - C10563 + C10564 - C10565) * C47279) *
                C47391) *
               C47091 * C942 +
           (((C4763 - C4762 + C4765 - C4764) * C116 +
             (C4767 - C4766 + C4769 - C4768) * C47279) *
                C10231 +
            ((C5402 - C5403 + C5404 - C5405) * C116 +
             (C5406 - C5407 + C5408 - C5409) * C47279) *
                C47391) *
               C47091 * C943 +
           (((C4771 - C4770 + C4773 - C4772) * C116 +
             (C4775 - C4774 + C4777 - C4776) * C47279) *
                C10231 +
            ((C4575 * C1167 - C4579 * C1155 + C47358 * C1441 - C4580 * C1440) *
                 C116 +
             (C4575 * C1182 - C4579 * C1170 + C47358 * C1443 - C4580 * C1442) *
                 C47279) *
                C47391) *
               C47091 * C47371) *
              C47365)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C4575 * C124 - C4579 * C117 + C47358 * C125 - C4580 * C118) *
                C116 +
            (C4575 * C138 - C4579 * C127 + C47358 * C139 - C4580 * C128) *
                C47279) *
               C10231 +
           ((C10526 - C10527 + C10528 - C10529) * C116 +
            (C10530 - C10531 + C10532 - C10533) * C47279) *
               C47391) *
              C47091 * C1010 +
          (((C4731 - C4730 + C4733 - C4732) * C116 +
            (C4735 - C4734 + C4737 - C4736) * C47279) *
               C10231 +
           ((C5386 - C5387 + C5388 - C5389) * C116 +
            (C5390 - C5391 + C5392 - C5393) * C47279) *
               C47391) *
              C47091 * C1011 +
          (((C4739 - C4738 + C4741 - C4740) * C116 +
            (C4743 - C4742 + C4745 - C4744) * C47279) *
               C10231 +
           ((C5824 - C5825 + C5826 - C5827) * C116 +
            (C5828 - C5829 + C5830 - C5831) * C47279) *
               C47391) *
              C47091 * C1012 +
          (((C5647 - C5646 + C5649 - C5648) * C116 +
            (C5651 - C5650 + C5653 - C5652) * C47279) *
               C10231 +
           ((C6318 - C6319 + C6320 - C6321) * C116 +
            (C6322 - C6323 + C6324 - C6325) * C47279) *
               C47391) *
              C47091 * C1013 +
          (((C5655 - C5654 + C5657 - C5656) * C116 +
            (C5659 - C5658 + C5661 - C5660) * C47279) *
               C10231 +
           ((C4575 * C6311 - C4579 * C6309 + C47358 * C6312 - C4580 * C6310) *
                C116 +
            (C4575 * C6315 - C4579 * C6313 + C47358 * C6316 - C4580 * C6314) *
                C47279) *
               C47391) *
              C47091 * C1014) *
         C47045) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C4575 * C124 - C4579 * C117 + C47358 * C125 - C4580 * C118) *
                 C116 +
             (C4575 * C138 - C4579 * C127 + C47358 * C139 - C4580 * C128) *
                 C47279) *
                C10231 +
            ((C10526 - C10527 + C10528 - C10529) * C116 +
             (C10530 - C10531 + C10532 - C10533) * C47279) *
                C47391) *
               C47411 +
           (((C10527 - C10526 + C10529 - C10528) * C116 +
             (C10531 - C10530 + C10533 - C10532) * C47279) *
                C10231 +
            ((C10534 - C10535 + C10536 - C10537) * C116 +
             (C10538 - C10539 + C10540 - C10541) * C47279) *
                C47391) *
               C47400 +
           (((C10535 - C10534 + C10537 - C10536) * C116 +
             (C10539 - C10538 + C10541 - C10540) * C47279) *
                C10231 +
            ((C4575 * C1850 - C4579 * C1844 + C47358 * C1851 - C4580 * C1845) *
                 C116 +
             (C4575 * C1862 - C4579 * C1853 + C47358 * C1863 - C4580 * C1854) *
                 C47279) *
                C47391) *
               C47374) *
              C942 +
          ((((C4731 - C4730 + C4733 - C4732) * C116 +
             (C4735 - C4734 + C4737 - C4736) * C47279) *
                C10231 +
            ((C5386 - C5387 + C5388 - C5389) * C116 +
             (C5390 - C5391 + C5392 - C5393) * C47279) *
                C47391) *
               C47411 +
           (((C5387 - C5386 + C5389 - C5388) * C116 +
             (C5391 - C5390 + C5393 - C5392) * C47279) *
                C10231 +
            ((C5816 - C5817 + C5818 - C5819) * C116 +
             (C5820 - C5821 + C5822 - C5823) * C47279) *
                C47391) *
               C47400 +
           (((C5817 - C5816 + C5819 - C5818) * C116 +
             (C5821 - C5820 + C5823 - C5822) * C47279) *
                C10231 +
            ((C7178 - C7179 + C7180 - C7181) * C116 +
             (C7182 - C7183 + C7184 - C7185) * C47279) *
                C47391) *
               C47374) *
              C943 +
          ((((C4739 - C4738 + C4741 - C4740) * C116 +
             (C4743 - C4742 + C4745 - C4744) * C47279) *
                C10231 +
            ((C5824 - C5825 + C5826 - C5827) * C116 +
             (C5828 - C5829 + C5830 - C5831) * C47279) *
                C47391) *
               C47411 +
           (((C5825 - C5824 + C5827 - C5826) * C116 +
             (C5829 - C5828 + C5831 - C5830) * C47279) *
                C10231 +
            ((C5832 - C5833 + C5834 - C5835) * C116 +
             (C5836 - C5837 + C5838 - C5839) * C47279) *
                C47391) *
               C47400 +
           (((C5833 - C5832 + C5835 - C5834) * C116 +
             (C5837 - C5836 + C5839 - C5838) * C47279) *
                C10231 +
            ((C4575 * C7171 - C4579 * C7169 + C47358 * C7172 - C4580 * C7170) *
                 C116 +
             (C4575 * C7175 - C4579 * C7173 + C47358 * C7176 - C4580 * C7174) *
                 C47279) *
                C47391) *
               C47374) *
              C47371) *
         C47045) /
            (p * q * std::sqrt(p + q));
    d2ee[73] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C4575 * C124 - C4579 * C117 + C47358 * C125 - C4580 * C118) *
                 C116 +
             (C4575 * C138 - C4579 * C127 + C47358 * C139 - C4580 * C128) *
                 C47279) *
                C10231 +
            ((C10526 - C10527 + C10528 - C10529) * C116 +
             (C10530 - C10531 + C10532 - C10533) * C47279) *
                C47391) *
               C47340 +
           (((C10527 - C10526 + C10529 - C10528) * C116 +
             (C10531 - C10530 + C10533 - C10532) * C47279) *
                C10231 +
            ((C10534 - C10535 + C10536 - C10537) * C116 +
             (C10538 - C10539 + C10540 - C10541) * C47279) *
                C47391) *
               C47178) *
              C47073 * C554 +
          ((((C4579 * C118 - C4575 * C125 + C4580 * C119 - C47358 * C126) *
                 C116 +
             (C4579 * C128 - C4575 * C139 + C4580 * C129 - C47358 * C140) *
                 C47279) *
                C10231 +
            ((C10542 - C10543 + C10544 - C10545) * C116 +
             (C10546 - C10547 + C10548 - C10549) * C47279) *
                C47391) *
               C47340 +
           (((C10543 - C10542 + C10545 - C10544) * C116 +
             (C10547 - C10546 + C10549 - C10548) * C47279) *
                C10231 +
            ((C10550 - C10551 + C10552 - C10553) * C116 +
             (C10554 - C10555 + C10556 - C10557) * C47279) *
                C47391) *
               C47178) *
              C47073 * C555 +
          ((((C4575 * C126 - C4579 * C119 + C47358 * C130 - C4580 * C120) *
                 C116 +
             (C4575 * C140 - C4579 * C129 + C47358 * C141 - C4580 * C131) *
                 C47279) *
                C10231 +
            ((C10558 - C10559 + C10560 - C10561) * C116 +
             (C10562 - C10563 + C10564 - C10565) * C47279) *
                C47391) *
               C47340 +
           (((C10559 - C10558 + C10561 - C10560) * C116 +
             (C10563 - C10562 + C10565 - C10564) * C47279) *
                C10231 +
            ((C10566 - C10567 + C10568 - C10569) * C116 +
             (C10570 - C10571 + C10572 - C10573) * C47279) *
                C47391) *
               C47178) *
              C47073 * C556 +
          ((((C4579 * C120 - C4575 * C130 + C4580 * C121 - C47358 * C132) *
                 C116 +
             (C4579 * C131 - C4575 * C141 + C4580 * C133 - C47358 * C142) *
                 C47279) *
                C10231 +
            ((C10834 - C10835 + C10836 - C10837) * C116 +
             (C10838 - C10839 + C10840 - C10841) * C47279) *
                C47391) *
               C47340 +
           (((C10835 - C10834 + C10837 - C10836) * C116 +
             (C10839 - C10838 + C10841 - C10840) * C47279) *
                C10231 +
            ((C4575 * C438 - C4579 * C421 + C47358 * C442 - C4580 * C423) *
                 C116 +
             (C4575 * C451 - C4579 * C439 + C47358 * C453 - C4580 * C443) *
                 C47279) *
                C47391) *
               C47178) *
              C47073 * C47375)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C4575 * C124 - C4579 * C117 + C47358 * C125 - C4580 * C118) *
                  C116 +
              (C4575 * C138 - C4579 * C127 + C47358 * C139 - C4580 * C128) *
                  C47279) *
                 C10231 +
             ((C10526 - C10527 + C10528 - C10529) * C116 +
              (C10530 - C10531 + C10532 - C10533) * C47279) *
                 C47391) *
                C47340 +
            (((C10527 - C10526 + C10529 - C10528) * C116 +
              (C10531 - C10530 + C10533 - C10532) * C47279) *
                 C10231 +
             ((C10534 - C10535 + C10536 - C10537) * C116 +
              (C10538 - C10539 + C10540 - C10541) * C47279) *
                 C47391) *
                C47178) *
               C942 +
           ((((C4731 - C4730 + C4733 - C4732) * C116 +
              (C4735 - C4734 + C4737 - C4736) * C47279) *
                 C10231 +
             ((C5386 - C5387 + C5388 - C5389) * C116 +
              (C5390 - C5391 + C5392 - C5393) * C47279) *
                 C47391) *
                C47340 +
            (((C5387 - C5386 + C5389 - C5388) * C116 +
              (C5391 - C5390 + C5393 - C5392) * C47279) *
                 C10231 +
             ((C5816 - C5817 + C5818 - C5819) * C116 +
              (C5820 - C5821 + C5822 - C5823) * C47279) *
                 C47391) *
                C47178) *
               C943 +
           ((((C4739 - C4738 + C4741 - C4740) * C116 +
              (C4743 - C4742 + C4745 - C4744) * C47279) *
                 C10231 +
             ((C5824 - C5825 + C5826 - C5827) * C116 +
              (C5828 - C5829 + C5830 - C5831) * C47279) *
                 C47391) *
                C47340 +
            (((C5825 - C5824 + C5827 - C5826) * C116 +
              (C5829 - C5828 + C5831 - C5830) * C47279) *
                 C10231 +
             ((C5832 - C5833 + C5834 - C5835) * C116 +
              (C5836 - C5837 + C5838 - C5839) * C47279) *
                 C47391) *
                C47178) *
               C47371) *
              C47325 +
          (((((C4579 * C118 - C4575 * C125 + C4580 * C119 - C47358 * C126) *
                  C116 +
              (C4579 * C128 - C4575 * C139 + C4580 * C129 - C47358 * C140) *
                  C47279) *
                 C10231 +
             ((C10542 - C10543 + C10544 - C10545) * C116 +
              (C10546 - C10547 + C10548 - C10549) * C47279) *
                 C47391) *
                C47340 +
            (((C10543 - C10542 + C10545 - C10544) * C116 +
              (C10547 - C10546 + C10549 - C10548) * C47279) *
                 C10231 +
             ((C10550 - C10551 + C10552 - C10553) * C116 +
              (C10554 - C10555 + C10556 - C10557) * C47279) *
                 C47391) *
                C47178) *
               C942 +
           ((((C4747 - C4746 + C4749 - C4748) * C116 +
              (C4751 - C4750 + C4753 - C4752) * C47279) *
                 C10231 +
             ((C5394 - C5395 + C5396 - C5397) * C116 +
              (C5398 - C5399 + C5400 - C5401) * C47279) *
                 C47391) *
                C47340 +
            (((C5395 - C5394 + C5397 - C5396) * C116 +
              (C5399 - C5398 + C5401 - C5400) * C47279) *
                 C10231 +
             ((C6902 - C6903 + C6904 - C6905) * C116 +
              (C6906 - C6907 + C6908 - C6909) * C47279) *
                 C47391) *
                C47178) *
               C943 +
           ((((C4755 - C4754 + C4757 - C4756) * C116 +
              (C4759 - C4758 + C4761 - C4760) * C47279) *
                 C10231 +
             ((C6172 - C6173 + C6174 - C6175) * C116 +
              (C6176 - C6177 + C6178 - C6179) * C47279) *
                 C47391) *
                C47340 +
            (((C6173 - C6172 + C6175 - C6174) * C116 +
              (C6177 - C6176 + C6179 - C6178) * C47279) *
                 C10231 +
             ((C4575 * C1172 - C4579 * C1157 + C47358 * C1173 - C4580 * C1158) *
                  C116 +
              (C4575 * C1184 - C4579 * C1175 + C47358 * C1185 - C4580 * C1176) *
                  C47279) *
                 C47391) *
                C47178) *
               C47371) *
              C47056)) /
            (p * q * std::sqrt(p + q));
    d2ee[74] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C4575 * C124 - C4579 * C117 + C47358 * C125 - C4580 * C118) *
                C116 +
            (C4575 * C138 - C4579 * C127 + C47358 * C139 - C4580 * C128) *
                C47279) *
               C10231 +
           ((C4575 * C424 - C4579 * C414 + C47358 * C425 - C4580 * C415) *
                C116 +
            (C4575 * C444 - C4579 * C427 + C47358 * C445 - C4580 * C428) *
                C47279) *
               C47391) *
              C47091 * C47073 * C108 +
          (((C4579 * C118 - C4575 * C125 + C4580 * C119 - C47358 * C126) *
                C116 +
            (C4579 * C128 - C4575 * C139 + C4580 * C129 - C47358 * C140) *
                C47279) *
               C10231 +
           ((C4579 * C415 - C4575 * C425 + C4580 * C416 - C47358 * C426) *
                C116 +
            (C4579 * C428 - C4575 * C445 + C4580 * C429 - C47358 * C446) *
                C47279) *
               C47391) *
              C47091 * C47073 * C109 +
          (((C4575 * C126 - C4579 * C119 + C47358 * C130 - C4580 * C120) *
                C116 +
            (C4575 * C140 - C4579 * C129 + C47358 * C141 - C4580 * C131) *
                C47279) *
               C10231 +
           ((C4575 * C426 - C4579 * C416 + C47358 * C436 - C4580 * C420) *
                C116 +
            (C4575 * C446 - C4579 * C429 + C47358 * C450 - C4580 * C437) *
                C47279) *
               C47391) *
              C47091 * C47073 * C110 +
          (((C4579 * C120 - C4575 * C130 + C4580 * C121 - C47358 * C132) *
                C116 +
            (C4579 * C131 - C4575 * C141 + C4580 * C133 - C47358 * C142) *
                C47279) *
               C10231 +
           ((C4579 * C420 - C4575 * C436 + C4580 * C422 - C47358 * C440) *
                C116 +
            (C4579 * C437 - C4575 * C450 + C4580 * C441 - C47358 * C452) *
                C47279) *
               C47391) *
              C47091 * C47073 * C111 +
          (((C4575 * C132 - C4579 * C121 + C47358 * C134 - C4580 * C122) *
                C116 +
            (C4575 * C142 - C4579 * C133 + C47358 * C143 - C4580 * C135) *
                C47279) *
               C10231 +
           ((C4575 * C440 - C4579 * C422 + C47358 * C663 - C4580 * C662) *
                C116 +
            (C4575 * C452 - C4579 * C441 + C47358 * C665 - C4580 * C664) *
                C47279) *
               C47391) *
              C47091 * C47073 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C4575 * C124 - C4579 * C117 + C47358 * C125 - C4580 * C118) *
                 C116 +
             (C4575 * C138 - C4579 * C127 + C47358 * C139 - C4580 * C128) *
                 C47279) *
                C10231 +
            ((C4575 * C424 - C4579 * C414 + C47358 * C425 - C4580 * C415) *
                 C116 +
             (C4575 * C444 - C4579 * C427 + C47358 * C445 - C4580 * C428) *
                 C47279) *
                C47391) *
               C47091 * C47410 +
           (((C4731 - C4730 + C4733 - C4732) * C116 +
             (C4735 - C4734 + C4737 - C4736) * C47279) *
                C10231 +
            ((C5386 - C5387 + C5388 - C5389) * C116 +
             (C5390 - C5391 + C5392 - C5393) * C47279) *
                C47391) *
               C47091 * C47398 +
           (((C4739 - C4738 + C4741 - C4740) * C116 +
             (C4743 - C4742 + C4745 - C4744) * C47279) *
                C10231 +
            ((C5824 - C5825 + C5826 - C5827) * C116 +
             (C5828 - C5829 + C5830 - C5831) * C47279) *
                C47391) *
               C47091 * C47371) *
              C258 +
          ((((C4579 * C118 - C4575 * C125 + C4580 * C119 - C47358 * C126) *
                 C116 +
             (C4579 * C128 - C4575 * C139 + C4580 * C129 - C47358 * C140) *
                 C47279) *
                C10231 +
            ((C4579 * C415 - C4575 * C425 + C4580 * C416 - C47358 * C426) *
                 C116 +
             (C4579 * C428 - C4575 * C445 + C4580 * C429 - C47358 * C446) *
                 C47279) *
                C47391) *
               C47091 * C47410 +
           (((C4747 - C4746 + C4749 - C4748) * C116 +
             (C4751 - C4750 + C4753 - C4752) * C47279) *
                C10231 +
            ((C5394 - C5395 + C5396 - C5397) * C116 +
             (C5398 - C5399 + C5400 - C5401) * C47279) *
                C47391) *
               C47091 * C47398 +
           (((C4755 - C4754 + C4757 - C4756) * C116 +
             (C4759 - C4758 + C4761 - C4760) * C47279) *
                C10231 +
            ((C6172 - C6173 + C6174 - C6175) * C116 +
             (C6176 - C6177 + C6178 - C6179) * C47279) *
                C47391) *
               C47091 * C47371) *
              C259 +
          ((((C4575 * C126 - C4579 * C119 + C47358 * C130 - C4580 * C120) *
                 C116 +
             (C4575 * C140 - C4579 * C129 + C47358 * C141 - C4580 * C131) *
                 C47279) *
                C10231 +
            ((C4575 * C426 - C4579 * C416 + C47358 * C436 - C4580 * C420) *
                 C116 +
             (C4575 * C446 - C4579 * C429 + C47358 * C450 - C4580 * C437) *
                 C47279) *
                C47391) *
               C47091 * C47410 +
           (((C4763 - C4762 + C4765 - C4764) * C116 +
             (C4767 - C4766 + C4769 - C4768) * C47279) *
                C10231 +
            ((C5402 - C5403 + C5404 - C5405) * C116 +
             (C5406 - C5407 + C5408 - C5409) * C47279) *
                C47391) *
               C47091 * C47398 +
           (((C4771 - C4770 + C4773 - C4772) * C116 +
             (C4775 - C4774 + C4777 - C4776) * C47279) *
                C10231 +
            ((C4575 * C1167 - C4579 * C1155 + C47358 * C1441 - C4580 * C1440) *
                 C116 +
             (C4575 * C1182 - C4579 * C1170 + C47358 * C1443 - C4580 * C1442) *
                 C47279) *
                C47391) *
               C47091 * C47371) *
              C47365)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C4575 * C124 - C4579 * C117 + C47358 * C125 - C4580 * C118) *
                 C116 +
             (C4575 * C138 - C4579 * C127 + C47358 * C139 - C4580 * C128) *
                 C47279) *
                C10231 +
            ((C10526 - C10527 + C10528 - C10529) * C116 +
             (C10530 - C10531 + C10532 - C10533) * C47279) *
                C47391) *
               C47091 * C942 +
           (((C4731 - C4730 + C4733 - C4732) * C116 +
             (C4735 - C4734 + C4737 - C4736) * C47279) *
                C10231 +
            ((C5386 - C5387 + C5388 - C5389) * C116 +
             (C5390 - C5391 + C5392 - C5393) * C47279) *
                C47391) *
               C47091 * C943 +
           (((C4739 - C4738 + C4741 - C4740) * C116 +
             (C4743 - C4742 + C4745 - C4744) * C47279) *
                C10231 +
            ((C5824 - C5825 + C5826 - C5827) * C116 +
             (C5828 - C5829 + C5830 - C5831) * C47279) *
                C47391) *
               C47091 * C47371) *
              C47407 +
          ((((C4579 * C118 - C4575 * C125 + C4580 * C119 - C47358 * C126) *
                 C116 +
             (C4579 * C128 - C4575 * C139 + C4580 * C129 - C47358 * C140) *
                 C47279) *
                C10231 +
            ((C10542 - C10543 + C10544 - C10545) * C116 +
             (C10546 - C10547 + C10548 - C10549) * C47279) *
                C47391) *
               C47091 * C942 +
           (((C4747 - C4746 + C4749 - C4748) * C116 +
             (C4751 - C4750 + C4753 - C4752) * C47279) *
                C10231 +
            ((C5394 - C5395 + C5396 - C5397) * C116 +
             (C5398 - C5399 + C5400 - C5401) * C47279) *
                C47391) *
               C47091 * C943 +
           (((C4755 - C4754 + C4757 - C4756) * C116 +
             (C4759 - C4758 + C4761 - C4760) * C47279) *
                C10231 +
            ((C6172 - C6173 + C6174 - C6175) * C116 +
             (C6176 - C6177 + C6178 - C6179) * C47279) *
                C47391) *
               C47091 * C47371) *
              C47394 +
          ((((C4575 * C126 - C4579 * C119 + C47358 * C130 - C4580 * C120) *
                 C116 +
             (C4575 * C140 - C4579 * C129 + C47358 * C141 - C4580 * C131) *
                 C47279) *
                C10231 +
            ((C10558 - C10559 + C10560 - C10561) * C116 +
             (C10562 - C10563 + C10564 - C10565) * C47279) *
                C47391) *
               C47091 * C942 +
           (((C4763 - C4762 + C4765 - C4764) * C116 +
             (C4767 - C4766 + C4769 - C4768) * C47279) *
                C10231 +
            ((C5402 - C5403 + C5404 - C5405) * C116 +
             (C5406 - C5407 + C5408 - C5409) * C47279) *
                C47391) *
               C47091 * C943 +
           (((C4771 - C4770 + C4773 - C4772) * C116 +
             (C4775 - C4774 + C4777 - C4776) * C47279) *
                C10231 +
            ((C4575 * C1167 - C4579 * C1155 + C47358 * C1441 - C4580 * C1440) *
                 C116 +
             (C4575 * C1182 - C4579 * C1170 + C47358 * C1443 - C4580 * C1442) *
                 C47279) *
                C47391) *
               C47091 * C47371) *
              C47365)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C4575 * C124 - C4579 * C117 + C47358 * C125 - C4580 * C118) *
                C116 +
            (C4575 * C138 - C4579 * C127 + C47358 * C139 - C4580 * C128) *
                C47279) *
               C10231 +
           ((C10526 - C10527 + C10528 - C10529) * C116 +
            (C10530 - C10531 + C10532 - C10533) * C47279) *
               C47391) *
              C47091 * C1010 +
          (((C4731 - C4730 + C4733 - C4732) * C116 +
            (C4735 - C4734 + C4737 - C4736) * C47279) *
               C10231 +
           ((C5386 - C5387 + C5388 - C5389) * C116 +
            (C5390 - C5391 + C5392 - C5393) * C47279) *
               C47391) *
              C47091 * C1011 +
          (((C4739 - C4738 + C4741 - C4740) * C116 +
            (C4743 - C4742 + C4745 - C4744) * C47279) *
               C10231 +
           ((C5824 - C5825 + C5826 - C5827) * C116 +
            (C5828 - C5829 + C5830 - C5831) * C47279) *
               C47391) *
              C47091 * C1012 +
          (((C5647 - C5646 + C5649 - C5648) * C116 +
            (C5651 - C5650 + C5653 - C5652) * C47279) *
               C10231 +
           ((C6318 - C6319 + C6320 - C6321) * C116 +
            (C6322 - C6323 + C6324 - C6325) * C47279) *
               C47391) *
              C47091 * C1013 +
          (((C5655 - C5654 + C5657 - C5656) * C116 +
            (C5659 - C5658 + C5661 - C5660) * C47279) *
               C10231 +
           ((C4575 * C6311 - C4579 * C6309 + C47358 * C6312 - C4580 * C6310) *
                C116 +
            (C4575 * C6315 - C4579 * C6313 + C47358 * C6316 - C4580 * C6314) *
                C47279) *
               C47391) *
              C47091 * C1014) *
         C47045) /
            (p * q * std::sqrt(p + q));
    d2ee[75] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C15769 * C124 - C15773 * C117 + C47358 * C125 - C15774 * C118) *
                C15775 +
            (C15769 * C138 - C15773 * C127 + C47358 * C139 - C15774 * C128) *
                C15771 +
            (C15924 - C15925 + C15926 - C15927) * C15776 +
            (C15928 - C15929 + C15930 - C15931) * C47389) *
               C47294 * C47091 * C47132 +
           ((C15925 - C15924 + C15927 - C15926) * C15775 +
            (C15929 - C15928 + C15931 - C15930) * C15771 +
            (C15932 - C15933 + C15934 - C15935) * C15776 +
            (C15936 - C15937 + C15938 - C15939) * C47389) *
               C47294 * C47091 * C47139 +
           ((C15933 - C15932 + C15935 - C15934) * C15775 +
            (C15937 - C15936 + C15939 - C15938) * C15771 +
            (C16832 - C16833 + C16834 - C16835) * C15776 +
            (C16836 - C16837 + C16838 - C16839) * C47389) *
               C47294 * C47091 * C2700) *
              C47050 +
          (((C15773 * C118 - C15769 * C125 + C15774 * C119 - C47358 * C126) *
                C15775 +
            (C15773 * C128 - C15769 * C139 + C15774 * C129 - C47358 * C140) *
                C15771 +
            (C15940 - C15941 + C15942 - C15943) * C15776 +
            (C15944 - C15945 + C15946 - C15947) * C47389) *
               C47294 * C47091 * C47132 +
           ((C15941 - C15940 + C15943 - C15942) * C15775 +
            (C15945 - C15944 + C15947 - C15946) * C15771 +
            (C15948 - C15949 + C15950 - C15951) * C15776 +
            (C15952 - C15953 + C15954 - C15955) * C47389) *
               C47294 * C47091 * C47139 +
           ((C15949 - C15948 + C15951 - C15950) * C15775 +
            (C15953 - C15952 + C15955 - C15954) * C15771 +
            (C17148 - C17149 + C17150 - C17151) * C15776 +
            (C17152 - C17153 + C17154 - C17155) * C47389) *
               C47294 * C47091 * C2700) *
              C47059 +
          (((C15769 * C126 - C15773 * C119 + C47358 * C130 - C15774 * C120) *
                C15775 +
            (C15769 * C140 - C15773 * C129 + C47358 * C141 - C15774 * C131) *
                C15771 +
            (C15956 - C15957 + C15958 - C15959) * C15776 +
            (C15960 - C15961 + C15962 - C15963) * C47389) *
               C47294 * C47091 * C47132 +
           ((C15957 - C15956 + C15959 - C15958) * C15775 +
            (C15961 - C15960 + C15963 - C15962) * C15771 +
            (C15964 - C15965 + C15966 - C15967) * C15776 +
            (C15968 - C15969 + C15970 - C15971) * C47389) *
               C47294 * C47091 * C47139 +
           ((C15965 - C15964 + C15967 - C15966) * C15775 +
            (C15969 - C15968 + C15971 - C15970) * C15771 +
            (C15769 * C1024 - C15773 * C1018 + C47358 * C1291 -
             C15774 * C1290) *
                C15776 +
            (C15769 * C1036 - C15773 * C1027 + C47358 * C1293 -
             C15774 * C1292) *
                C47389) *
               C47294 * C47091 * C2700) *
              C2703)) /
        (p * q * std::sqrt(p + q));
    d2ee[76] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C15769 * C124 - C15773 * C117 + C47358 * C125 - C15774 * C118) *
                 C15775 +
             (C15769 * C138 - C15773 * C127 + C47358 * C139 - C15774 * C128) *
                 C15771 +
             (C15924 - C15925 + C15926 - C15927) * C15776 +
             (C15928 - C15929 + C15930 - C15931) * C47389) *
                C47294 * C47340 +
            ((C15773 * C414 - C15769 * C424 + C15774 * C415 - C47358 * C425) *
                 C15775 +
             (C15773 * C427 - C15769 * C444 + C15774 * C428 - C47358 * C445) *
                 C15771 +
             (C16580 - C16581 + C16582 - C16583) * C15776 +
             (C16584 - C16585 + C16586 - C16587) * C47389) *
                C47294 * C47178) *
               C47132 +
           (((C15925 - C15924 + C15927 - C15926) * C15775 +
             (C15929 - C15928 + C15931 - C15930) * C15771 +
             (C15932 - C15933 + C15934 - C15935) * C15776 +
             (C15936 - C15937 + C15938 - C15939) * C47389) *
                C47294 * C47340 +
            ((C16581 - C16580 + C16583 - C16582) * C15775 +
             (C16585 - C16584 + C16587 - C16586) * C15771 +
             (C17002 - C17003 + C17004 - C17005) * C15776 +
             (C17006 - C17007 + C17008 - C17009) * C47389) *
                C47294 * C47178) *
               C47139 +
           (((C15933 - C15932 + C15935 - C15934) * C15775 +
             (C15937 - C15936 + C15939 - C15938) * C15771 +
             (C16832 - C16833 + C16834 - C16835) * C15776 +
             (C16836 - C16837 + C16838 - C16839) * C47389) *
                C47294 * C47340 +
            ((C17003 - C17002 + C17005 - C17004) * C15775 +
             (C17007 - C17006 + C17009 - C17008) * C15771 +
             (C17488 - C17489 + C17490 - C17491) * C15776 +
             (C17492 - C17493 + C17494 - C17495) * C47389) *
                C47294 * C47178) *
               C2700) *
              C2440 +
          ((((C15773 * C118 - C15769 * C125 + C15774 * C119 - C47358 * C126) *
                 C15775 +
             (C15773 * C128 - C15769 * C139 + C15774 * C129 - C47358 * C140) *
                 C15771 +
             (C15940 - C15941 + C15942 - C15943) * C15776 +
             (C15944 - C15945 + C15946 - C15947) * C47389) *
                C47294 * C47340 +
            ((C15769 * C425 - C15773 * C415 + C47358 * C426 - C15774 * C416) *
                 C15775 +
             (C15769 * C445 - C15773 * C428 + C47358 * C446 - C15774 * C429) *
                 C15771 +
             (C16588 - C16589 + C16590 - C16591) * C15776 +
             (C16592 - C16593 + C16594 - C16595) * C47389) *
                C47294 * C47178) *
               C47132 +
           (((C15941 - C15940 + C15943 - C15942) * C15775 +
             (C15945 - C15944 + C15947 - C15946) * C15771 +
             (C15948 - C15949 + C15950 - C15951) * C15776 +
             (C15952 - C15953 + C15954 - C15955) * C47389) *
                C47294 * C47340 +
            ((C16589 - C16588 + C16591 - C16590) * C15775 +
             (C16593 - C16592 + C16595 - C16594) * C15771 +
             (C17350 - C17351 + C17352 - C17353) * C15776 +
             (C17354 - C17355 + C17356 - C17357) * C47389) *
                C47294 * C47178) *
               C47139 +
           (((C15949 - C15948 + C15951 - C15950) * C15775 +
             (C15953 - C15952 + C15955 - C15954) * C15771 +
             (C17148 - C17149 + C17150 - C17151) * C15776 +
             (C17152 - C17153 + C17154 - C17155) * C47389) *
                C47294 * C47340 +
            ((C17351 - C17350 + C17353 - C17352) * C15775 +
             (C17355 - C17354 + C17357 - C17356) * C15771 +
             (C15769 * C1546 - C15773 * C1543 + C47358 * C1547 -
              C15774 * C1544) *
                 C15776 +
             (C15769 * C1552 - C15773 * C1549 + C47358 * C1553 -
              C15774 * C1550) *
                 C47389) *
                C47294 * C47178) *
               C2700) *
              C47056)) /
        (p * q * std::sqrt(p + q));
    d2ee[77] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C15769 * C124 - C15773 * C117 + C47358 * C125 - C15774 * C118) *
                C15775 +
            (C15769 * C138 - C15773 * C127 + C47358 * C139 - C15774 * C128) *
                C15771 +
            (C15924 - C15925 + C15926 - C15927) * C15776 +
            (C15928 - C15929 + C15930 - C15931) * C47389) *
               C47294 * C47091 * C47417 +
           ((C15925 - C15924 + C15927 - C15926) * C15775 +
            (C15929 - C15928 + C15931 - C15930) * C15771 +
            (C15932 - C15933 + C15934 - C15935) * C15776 +
            (C15936 - C15937 + C15938 - C15939) * C47389) *
               C47294 * C47091 * C47413 +
           ((C15933 - C15932 + C15935 - C15934) * C15775 +
            (C15937 - C15936 + C15939 - C15938) * C15771 +
            (C16832 - C16833 + C16834 - C16835) * C15776 +
            (C16836 - C16837 + C16838 - C16839) * C47389) *
               C47294 * C47091 * C47403 +
           ((C16833 - C16832 + C16835 - C16834) * C15775 +
            (C16837 - C16836 + C16839 - C16838) * C15771 +
            (C16840 - C16841 + C16842 - C16843) * C15776 +
            (C16844 - C16845 + C16846 - C16847) * C47389) *
               C47294 * C47091 * C47381) *
              C2440 +
          (((C15773 * C118 - C15769 * C125 + C15774 * C119 - C47358 * C126) *
                C15775 +
            (C15773 * C128 - C15769 * C139 + C15774 * C129 - C47358 * C140) *
                C15771 +
            (C15940 - C15941 + C15942 - C15943) * C15776 +
            (C15944 - C15945 + C15946 - C15947) * C47389) *
               C47294 * C47091 * C47417 +
           ((C15941 - C15940 + C15943 - C15942) * C15775 +
            (C15945 - C15944 + C15947 - C15946) * C15771 +
            (C15948 - C15949 + C15950 - C15951) * C15776 +
            (C15952 - C15953 + C15954 - C15955) * C47389) *
               C47294 * C47091 * C47413 +
           ((C15949 - C15948 + C15951 - C15950) * C15775 +
            (C15953 - C15952 + C15955 - C15954) * C15771 +
            (C17148 - C17149 + C17150 - C17151) * C15776 +
            (C17152 - C17153 + C17154 - C17155) * C47389) *
               C47294 * C47091 * C47403 +
           ((C17149 - C17148 + C17151 - C17150) * C15775 +
            (C17153 - C17152 + C17155 - C17154) * C15771 +
            (C15769 * C1029 - C15773 * C1020 + C47358 * C1030 -
             C15774 * C1021) *
                C15776 +
            (C15769 * C1038 - C15773 * C1032 + C47358 * C1039 -
             C15774 * C1033) *
                C47389) *
               C47294 * C47091 * C47381) *
              C47056)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C15769 * C124 - C15773 * C117 + C47358 * C125 - C15774 * C118) *
                C15775 +
            (C15769 * C138 - C15773 * C127 + C47358 * C139 - C15774 * C128) *
                C15771 +
            (C15924 - C15925 + C15926 - C15927) * C15776 +
            (C15928 - C15929 + C15930 - C15931) * C47389) *
               C47294 * C47091 * C2332 +
           ((C15925 - C15924 + C15927 - C15926) * C15775 +
            (C15929 - C15928 + C15931 - C15930) * C15771 +
            (C15932 - C15933 + C15934 - C15935) * C15776 +
            (C15936 - C15937 + C15938 - C15939) * C47389) *
               C47294 * C47091 * C47136) *
              C47416 +
          (((C15773 * C118 - C15769 * C125 + C15774 * C119 - C47358 * C126) *
                C15775 +
            (C15773 * C128 - C15769 * C139 + C15774 * C129 - C47358 * C140) *
                C15771 +
            (C15940 - C15941 + C15942 - C15943) * C15776 +
            (C15944 - C15945 + C15946 - C15947) * C47389) *
               C47294 * C47091 * C2332 +
           ((C15941 - C15940 + C15943 - C15942) * C15775 +
            (C15945 - C15944 + C15947 - C15946) * C15771 +
            (C15948 - C15949 + C15950 - C15951) * C15776 +
            (C15952 - C15953 + C15954 - C15955) * C47389) *
               C47294 * C47091 * C47136) *
              C47409 +
          (((C15769 * C126 - C15773 * C119 + C47358 * C130 - C15774 * C120) *
                C15775 +
            (C15769 * C140 - C15773 * C129 + C47358 * C141 - C15774 * C131) *
                C15771 +
            (C15956 - C15957 + C15958 - C15959) * C15776 +
            (C15960 - C15961 + C15962 - C15963) * C47389) *
               C47294 * C47091 * C2332 +
           ((C15957 - C15956 + C15959 - C15958) * C15775 +
            (C15961 - C15960 + C15963 - C15962) * C15771 +
            (C15964 - C15965 + C15966 - C15967) * C15776 +
            (C15968 - C15969 + C15970 - C15971) * C47389) *
               C47294 * C47091 * C47136) *
              C47396 +
          (((C15773 * C120 - C15769 * C130 + C15774 * C121 - C47358 * C132) *
                C15775 +
            (C15773 * C131 - C15769 * C141 + C15774 * C133 - C47358 * C142) *
                C15771 +
            (C16248 - C16249 + C16250 - C16251) * C15776 +
            (C16252 - C16253 + C16254 - C16255) * C47389) *
               C47294 * C47091 * C2332 +
           ((C16249 - C16248 + C16251 - C16250) * C15775 +
            (C16253 - C16252 + C16255 - C16254) * C15771 +
            (C15769 * C285 - C15773 * C268 + C47358 * C289 - C15774 * C270) *
                C15776 +
            (C15769 * C298 - C15773 * C286 + C47358 * C300 - C15774 * C290) *
                C47389) *
               C47294 * C47091 * C47136) *
              C47375)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C15769 * C124 - C15773 * C117 + C47358 * C125 - C15774 * C118) *
                 C15775 +
             (C15769 * C138 - C15773 * C127 + C47358 * C139 - C15774 * C128) *
                 C15771 +
             (C15924 - C15925 + C15926 - C15927) * C15776 +
             (C15928 - C15929 + C15930 - C15931) * C47389) *
                C47294 * C47411 +
            ((C15773 * C414 - C15769 * C424 + C15774 * C415 - C47358 * C425) *
                 C15775 +
             (C15773 * C427 - C15769 * C444 + C15774 * C428 - C47358 * C445) *
                 C15771 +
             (C16580 - C16581 + C16582 - C16583) * C15776 +
             (C16584 - C16585 + C16586 - C16587) * C47389) *
                C47294 * C47400 +
            ((C15769 * C430 - C15773 * C417 + C47358 * C431 - C15774 * C418) *
                 C15775 +
             (C15769 * C447 - C15773 * C433 + C47358 * C448 - C15774 * C434) *
                 C15771 +
             (C16994 - C16995 + C16996 - C16997) * C15776 +
             (C16998 - C16999 + C17000 - C17001) * C47389) *
                C47294 * C47374) *
               C2332 +
           (((C15925 - C15924 + C15927 - C15926) * C15775 +
             (C15929 - C15928 + C15931 - C15930) * C15771 +
             (C15932 - C15933 + C15934 - C15935) * C15776 +
             (C15936 - C15937 + C15938 - C15939) * C47389) *
                C47294 * C47411 +
            ((C16581 - C16580 + C16583 - C16582) * C15775 +
             (C16585 - C16584 + C16587 - C16586) * C15771 +
             (C17002 - C17003 + C17004 - C17005) * C15776 +
             (C17006 - C17007 + C17008 - C17009) * C47389) *
                C47294 * C47400 +
            ((C16995 - C16994 + C16997 - C16996) * C15775 +
             (C16999 - C16998 + C17001 - C17000) * C15771 +
             (C17010 - C17011 + C17012 - C17013) * C15776 +
             (C17014 - C17015 + C17016 - C17017) * C47389) *
                C47294 * C47374) *
               C47136) *
              C2440 +
          ((((C15773 * C118 - C15769 * C125 + C15774 * C119 - C47358 * C126) *
                 C15775 +
             (C15773 * C128 - C15769 * C139 + C15774 * C129 - C47358 * C140) *
                 C15771 +
             (C15940 - C15941 + C15942 - C15943) * C15776 +
             (C15944 - C15945 + C15946 - C15947) * C47389) *
                C47294 * C47411 +
            ((C15769 * C425 - C15773 * C415 + C47358 * C426 - C15774 * C416) *
                 C15775 +
             (C15769 * C445 - C15773 * C428 + C47358 * C446 - C15774 * C429) *
                 C15771 +
             (C16588 - C16589 + C16590 - C16591) * C15776 +
             (C16592 - C16593 + C16594 - C16595) * C47389) *
                C47294 * C47400 +
            ((C15773 * C418 - C15769 * C431 + C15774 * C419 - C47358 * C432) *
                 C15775 +
             (C15773 * C434 - C15769 * C448 + C15774 * C435 - C47358 * C449) *
                 C15771 +
             (C18064 - C18065 + C18066 - C18067) * C15776 +
             (C18068 - C18069 + C18070 - C18071) * C47389) *
                C47294 * C47374) *
               C2332 +
           (((C15941 - C15940 + C15943 - C15942) * C15775 +
             (C15945 - C15944 + C15947 - C15946) * C15771 +
             (C15948 - C15949 + C15950 - C15951) * C15776 +
             (C15952 - C15953 + C15954 - C15955) * C47389) *
                C47294 * C47411 +
            ((C16589 - C16588 + C16591 - C16590) * C15775 +
             (C16593 - C16592 + C16595 - C16594) * C15771 +
             (C17350 - C17351 + C17352 - C17353) * C15776 +
             (C17354 - C17355 + C17356 - C17357) * C47389) *
                C47294 * C47400 +
            ((C18065 - C18064 + C18067 - C18066) * C15775 +
             (C18069 - C18068 + C18071 - C18070) * C15771 +
             (C15769 * C1172 - C15773 * C1157 + C47358 * C1173 -
              C15774 * C1158) *
                 C15776 +
             (C15769 * C1184 - C15773 * C1175 + C47358 * C1185 -
              C15774 * C1176) *
                 C47389) *
                C47294 * C47374) *
               C47136) *
              C47056)) /
            (p * q * std::sqrt(p + q));
    d2ee[78] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C15769 * C124 - C15773 * C117 + C47358 * C125 - C15774 * C118) *
                 C15775 +
             (C15769 * C138 - C15773 * C127 + C47358 * C139 - C15774 * C128) *
                 C15771 +
             (C15924 - C15925 + C15926 - C15927) * C15776 +
             (C15928 - C15929 + C15930 - C15931) * C47389) *
                C47294 * C47340 +
            ((C15773 * C414 - C15769 * C424 + C15774 * C415 - C47358 * C425) *
                 C15775 +
             (C15773 * C427 - C15769 * C444 + C15774 * C428 - C47358 * C445) *
                 C15771 +
             (C16580 - C16581 + C16582 - C16583) * C15776 +
             (C16584 - C16585 + C16586 - C16587) * C47389) *
                C47294 * C47178) *
               C2332 +
           (((C15925 - C15924 + C15927 - C15926) * C15775 +
             (C15929 - C15928 + C15931 - C15930) * C15771 +
             (C15932 - C15933 + C15934 - C15935) * C15776 +
             (C15936 - C15937 + C15938 - C15939) * C47389) *
                C47294 * C47340 +
            ((C16581 - C16580 + C16583 - C16582) * C15775 +
             (C16585 - C16584 + C16587 - C16586) * C15771 +
             (C17002 - C17003 + C17004 - C17005) * C15776 +
             (C17006 - C17007 + C17008 - C17009) * C47389) *
                C47294 * C47178) *
               C47136) *
              C47050 +
          ((((C15773 * C118 - C15769 * C125 + C15774 * C119 - C47358 * C126) *
                 C15775 +
             (C15773 * C128 - C15769 * C139 + C15774 * C129 - C47358 * C140) *
                 C15771 +
             (C15940 - C15941 + C15942 - C15943) * C15776 +
             (C15944 - C15945 + C15946 - C15947) * C47389) *
                C47294 * C47340 +
            ((C15769 * C425 - C15773 * C415 + C47358 * C426 - C15774 * C416) *
                 C15775 +
             (C15769 * C445 - C15773 * C428 + C47358 * C446 - C15774 * C429) *
                 C15771 +
             (C16588 - C16589 + C16590 - C16591) * C15776 +
             (C16592 - C16593 + C16594 - C16595) * C47389) *
                C47294 * C47178) *
               C2332 +
           (((C15941 - C15940 + C15943 - C15942) * C15775 +
             (C15945 - C15944 + C15947 - C15946) * C15771 +
             (C15948 - C15949 + C15950 - C15951) * C15776 +
             (C15952 - C15953 + C15954 - C15955) * C47389) *
                C47294 * C47340 +
            ((C16589 - C16588 + C16591 - C16590) * C15775 +
             (C16593 - C16592 + C16595 - C16594) * C15771 +
             (C17350 - C17351 + C17352 - C17353) * C15776 +
             (C17354 - C17355 + C17356 - C17357) * C47389) *
                C47294 * C47178) *
               C47136) *
              C47059 +
          ((((C15769 * C126 - C15773 * C119 + C47358 * C130 - C15774 * C120) *
                 C15775 +
             (C15769 * C140 - C15773 * C129 + C47358 * C141 - C15774 * C131) *
                 C15771 +
             (C15956 - C15957 + C15958 - C15959) * C15776 +
             (C15960 - C15961 + C15962 - C15963) * C47389) *
                C47294 * C47340 +
            ((C15773 * C416 - C15769 * C426 + C15774 * C420 - C47358 * C436) *
                 C15775 +
             (C15773 * C429 - C15769 * C446 + C15774 * C437 - C47358 * C450) *
                 C15771 +
             (C16596 - C16597 + C16598 - C16599) * C15776 +
             (C16600 - C16601 + C16602 - C16603) * C47389) *
                C47294 * C47178) *
               C2332 +
           (((C15957 - C15956 + C15959 - C15958) * C15775 +
             (C15961 - C15960 + C15963 - C15962) * C15771 +
             (C15964 - C15965 + C15966 - C15967) * C15776 +
             (C15968 - C15969 + C15970 - C15971) * C47389) *
                C47294 * C47340 +
            ((C16597 - C16596 + C16599 - C16598) * C15775 +
             (C16601 - C16600 + C16603 - C16602) * C15771 +
             (C15769 * C1167 - C15773 * C1155 + C47358 * C1441 -
              C15774 * C1440) *
                 C15776 +
             (C15769 * C1182 - C15773 * C1170 + C47358 * C1443 -
              C15774 * C1442) *
                 C47389) *
                C47294 * C47178) *
               C47136) *
              C2703)) /
        (p * q * std::sqrt(p + q));
    d2ee[79] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C15769 * C124 - C15773 * C117 + C47358 * C125 - C15774 * C118) *
                C15775 +
            (C15769 * C138 - C15773 * C127 + C47358 * C139 - C15774 * C128) *
                C15771 +
            (C15924 - C15925 + C15926 - C15927) * C15776 +
            (C15928 - C15929 + C15930 - C15931) * C47389) *
               C47294 * C47091 * C2332 +
           ((C15925 - C15924 + C15927 - C15926) * C15775 +
            (C15929 - C15928 + C15931 - C15930) * C15771 +
            (C15932 - C15933 + C15934 - C15935) * C15776 +
            (C15936 - C15937 + C15938 - C15939) * C47389) *
               C47294 * C47091 * C47136) *
              C47416 +
          (((C15773 * C118 - C15769 * C125 + C15774 * C119 - C47358 * C126) *
                C15775 +
            (C15773 * C128 - C15769 * C139 + C15774 * C129 - C47358 * C140) *
                C15771 +
            (C15940 - C15941 + C15942 - C15943) * C15776 +
            (C15944 - C15945 + C15946 - C15947) * C47389) *
               C47294 * C47091 * C2332 +
           ((C15941 - C15940 + C15943 - C15942) * C15775 +
            (C15945 - C15944 + C15947 - C15946) * C15771 +
            (C15948 - C15949 + C15950 - C15951) * C15776 +
            (C15952 - C15953 + C15954 - C15955) * C47389) *
               C47294 * C47091 * C47136) *
              C47409 +
          (((C15769 * C126 - C15773 * C119 + C47358 * C130 - C15774 * C120) *
                C15775 +
            (C15769 * C140 - C15773 * C129 + C47358 * C141 - C15774 * C131) *
                C15771 +
            (C15956 - C15957 + C15958 - C15959) * C15776 +
            (C15960 - C15961 + C15962 - C15963) * C47389) *
               C47294 * C47091 * C2332 +
           ((C15957 - C15956 + C15959 - C15958) * C15775 +
            (C15961 - C15960 + C15963 - C15962) * C15771 +
            (C15964 - C15965 + C15966 - C15967) * C15776 +
            (C15968 - C15969 + C15970 - C15971) * C47389) *
               C47294 * C47091 * C47136) *
              C47396 +
          (((C15773 * C120 - C15769 * C130 + C15774 * C121 - C47358 * C132) *
                C15775 +
            (C15773 * C131 - C15769 * C141 + C15774 * C133 - C47358 * C142) *
                C15771 +
            (C16248 - C16249 + C16250 - C16251) * C15776 +
            (C16252 - C16253 + C16254 - C16255) * C47389) *
               C47294 * C47091 * C2332 +
           ((C16249 - C16248 + C16251 - C16250) * C15775 +
            (C16253 - C16252 + C16255 - C16254) * C15771 +
            (C15769 * C285 - C15773 * C268 + C47358 * C289 - C15774 * C270) *
                C15776 +
            (C15769 * C298 - C15773 * C286 + C47358 * C300 - C15774 * C290) *
                C47389) *
               C47294 * C47091 * C47136) *
              C47375)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C15769 * C124 - C15773 * C117 + C47358 * C125 - C15774 * C118) *
                C15775 +
            (C15769 * C138 - C15773 * C127 + C47358 * C139 - C15774 * C128) *
                C15771 +
            (C15924 - C15925 + C15926 - C15927) * C15776 +
            (C15928 - C15929 + C15930 - C15931) * C47389) *
               C47294 * C47091 * C47417 +
           ((C15925 - C15924 + C15927 - C15926) * C15775 +
            (C15929 - C15928 + C15931 - C15930) * C15771 +
            (C15932 - C15933 + C15934 - C15935) * C15776 +
            (C15936 - C15937 + C15938 - C15939) * C47389) *
               C47294 * C47091 * C47413 +
           ((C15933 - C15932 + C15935 - C15934) * C15775 +
            (C15937 - C15936 + C15939 - C15938) * C15771 +
            (C16832 - C16833 + C16834 - C16835) * C15776 +
            (C16836 - C16837 + C16838 - C16839) * C47389) *
               C47294 * C47091 * C47403 +
           ((C16833 - C16832 + C16835 - C16834) * C15775 +
            (C16837 - C16836 + C16839 - C16838) * C15771 +
            (C16840 - C16841 + C16842 - C16843) * C15776 +
            (C16844 - C16845 + C16846 - C16847) * C47389) *
               C47294 * C47091 * C47381) *
              C2440 +
          (((C15773 * C118 - C15769 * C125 + C15774 * C119 - C47358 * C126) *
                C15775 +
            (C15773 * C128 - C15769 * C139 + C15774 * C129 - C47358 * C140) *
                C15771 +
            (C15940 - C15941 + C15942 - C15943) * C15776 +
            (C15944 - C15945 + C15946 - C15947) * C47389) *
               C47294 * C47091 * C47417 +
           ((C15941 - C15940 + C15943 - C15942) * C15775 +
            (C15945 - C15944 + C15947 - C15946) * C15771 +
            (C15948 - C15949 + C15950 - C15951) * C15776 +
            (C15952 - C15953 + C15954 - C15955) * C47389) *
               C47294 * C47091 * C47413 +
           ((C15949 - C15948 + C15951 - C15950) * C15775 +
            (C15953 - C15952 + C15955 - C15954) * C15771 +
            (C17148 - C17149 + C17150 - C17151) * C15776 +
            (C17152 - C17153 + C17154 - C17155) * C47389) *
               C47294 * C47091 * C47403 +
           ((C17149 - C17148 + C17151 - C17150) * C15775 +
            (C17153 - C17152 + C17155 - C17154) * C15771 +
            (C15769 * C1029 - C15773 * C1020 + C47358 * C1030 -
             C15774 * C1021) *
                C15776 +
            (C15769 * C1038 - C15773 * C1032 + C47358 * C1039 -
             C15774 * C1033) *
                C47389) *
               C47294 * C47091 * C47381) *
              C47056)) /
            (p * q * std::sqrt(p + q));
    d2ee[80] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C15769 * C124 - C15773 * C117 + C47358 * C125 - C15774 * C118) *
                 C15775 +
             (C15769 * C138 - C15773 * C127 + C47358 * C139 - C15774 * C128) *
                 C15771 +
             (C15924 - C15925 + C15926 - C15927) * C15776 +
             (C15928 - C15929 + C15930 - C15931) * C47389) *
                C47294 * C3094 +
            ((C15773 * C414 - C15769 * C424 + C15774 * C415 - C47358 * C425) *
                 C15775 +
             (C15773 * C427 - C15769 * C444 + C15774 * C428 - C47358 * C445) *
                 C15771 +
             (C16580 - C16581 + C16582 - C16583) * C15776 +
             (C16584 - C16585 + C16586 - C16587) * C47389) *
                C47294 * C47178) *
               C47132 +
           (((C15925 - C15924 + C15927 - C15926) * C15775 +
             (C15929 - C15928 + C15931 - C15930) * C15771 +
             (C15932 - C15933 + C15934 - C15935) * C15776 +
             (C15936 - C15937 + C15938 - C15939) * C47389) *
                C47294 * C3094 +
            ((C16581 - C16580 + C16583 - C16582) * C15775 +
             (C16585 - C16584 + C16587 - C16586) * C15771 +
             (C17002 - C17003 + C17004 - C17005) * C15776 +
             (C17006 - C17007 + C17008 - C17009) * C47389) *
                C47294 * C47178) *
               C47139 +
           (((C15933 - C15932 + C15935 - C15934) * C15775 +
             (C15937 - C15936 + C15939 - C15938) * C15771 +
             (C16832 - C16833 + C16834 - C16835) * C15776 +
             (C16836 - C16837 + C16838 - C16839) * C47389) *
                C47294 * C3094 +
            ((C17003 - C17002 + C17005 - C17004) * C15775 +
             (C17007 - C17006 + C17009 - C17008) * C15771 +
             (C17488 - C17489 + C17490 - C17491) * C15776 +
             (C17492 - C17493 + C17494 - C17495) * C47389) *
                C47294 * C47178) *
               C2700) *
              C47325 +
          ((((C15773 * C118 - C15769 * C125 + C15774 * C119 - C47358 * C126) *
                 C15775 +
             (C15773 * C128 - C15769 * C139 + C15774 * C129 - C47358 * C140) *
                 C15771 +
             (C15940 - C15941 + C15942 - C15943) * C15776 +
             (C15944 - C15945 + C15946 - C15947) * C47389) *
                C47294 * C3094 +
            ((C15769 * C425 - C15773 * C415 + C47358 * C426 - C15774 * C416) *
                 C15775 +
             (C15769 * C445 - C15773 * C428 + C47358 * C446 - C15774 * C429) *
                 C15771 +
             (C16588 - C16589 + C16590 - C16591) * C15776 +
             (C16592 - C16593 + C16594 - C16595) * C47389) *
                C47294 * C47178) *
               C47132 +
           (((C15941 - C15940 + C15943 - C15942) * C15775 +
             (C15945 - C15944 + C15947 - C15946) * C15771 +
             (C15948 - C15949 + C15950 - C15951) * C15776 +
             (C15952 - C15953 + C15954 - C15955) * C47389) *
                C47294 * C3094 +
            ((C16589 - C16588 + C16591 - C16590) * C15775 +
             (C16593 - C16592 + C16595 - C16594) * C15771 +
             (C17350 - C17351 + C17352 - C17353) * C15776 +
             (C17354 - C17355 + C17356 - C17357) * C47389) *
                C47294 * C47178) *
               C47139 +
           (((C15949 - C15948 + C15951 - C15950) * C15775 +
             (C15953 - C15952 + C15955 - C15954) * C15771 +
             (C17148 - C17149 + C17150 - C17151) * C15776 +
             (C17152 - C17153 + C17154 - C17155) * C47389) *
                C47294 * C3094 +
            ((C17351 - C17350 + C17353 - C17352) * C15775 +
             (C17355 - C17354 + C17357 - C17356) * C15771 +
             (C15769 * C1546 - C15773 * C1543 + C47358 * C1547 -
              C15774 * C1544) *
                 C15776 +
             (C15769 * C1552 - C15773 * C1549 + C47358 * C1553 -
              C15774 * C1550) *
                 C47389) *
                C47294 * C47178) *
               C2700) *
              C47056)) /
        (p * q * std::sqrt(p + q));
    d2ee[81] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C15769 * C124 - C15773 * C117 + C47358 * C125 - C15774 * C118) *
                C15775 +
            (C15769 * C138 - C15773 * C127 + C47358 * C139 - C15774 * C128) *
                C15771 +
            (C15924 - C15925 + C15926 - C15927) * C15776 +
            (C15928 - C15929 + C15930 - C15931) * C47389) *
               C47294 * C47174 +
           ((C15773 * C414 - C15769 * C424 + C15774 * C415 - C47358 * C425) *
                C15775 +
            (C15773 * C427 - C15769 * C444 + C15774 * C428 - C47358 * C445) *
                C15771 +
            (C16580 - C16581 + C16582 - C16583) * C15776 +
            (C16584 - C16585 + C16586 - C16587) * C47389) *
               C47294 * C47181 +
           ((C15769 * C430 - C15773 * C417 + C47358 * C431 - C15774 * C418) *
                C15775 +
            (C15769 * C447 - C15773 * C433 + C47358 * C448 - C15774 * C434) *
                C15771 +
            (C16994 - C16995 + C16996 - C16997) * C15776 +
            (C16998 - C16999 + C17000 - C17001) * C47389) *
               C47294 * C3602) *
              C47132 +
          (((C15925 - C15924 + C15927 - C15926) * C15775 +
            (C15929 - C15928 + C15931 - C15930) * C15771 +
            (C15932 - C15933 + C15934 - C15935) * C15776 +
            (C15936 - C15937 + C15938 - C15939) * C47389) *
               C47294 * C47174 +
           ((C16581 - C16580 + C16583 - C16582) * C15775 +
            (C16585 - C16584 + C16587 - C16586) * C15771 +
            (C17002 - C17003 + C17004 - C17005) * C15776 +
            (C17006 - C17007 + C17008 - C17009) * C47389) *
               C47294 * C47181 +
           ((C16995 - C16994 + C16997 - C16996) * C15775 +
            (C16999 - C16998 + C17001 - C17000) * C15771 +
            (C17010 - C17011 + C17012 - C17013) * C15776 +
            (C17014 - C17015 + C17016 - C17017) * C47389) *
               C47294 * C3602) *
              C47139 +
          (((C15933 - C15932 + C15935 - C15934) * C15775 +
            (C15937 - C15936 + C15939 - C15938) * C15771 +
            (C16832 - C16833 + C16834 - C16835) * C15776 +
            (C16836 - C16837 + C16838 - C16839) * C47389) *
               C47294 * C47174 +
           ((C17003 - C17002 + C17005 - C17004) * C15775 +
            (C17007 - C17006 + C17009 - C17008) * C15771 +
            (C17488 - C17489 + C17490 - C17491) * C15776 +
            (C17492 - C17493 + C17494 - C17495) * C47389) *
               C47294 * C47181 +
           ((C17011 - C17010 + C17013 - C17012) * C15775 +
            (C17015 - C17014 + C17017 - C17016) * C15771 +
            (C15769 * C5809 - C15773 * C5807 + C47358 * C5810 -
             C15774 * C5808) *
                C15776 +
            (C15769 * C5813 - C15773 * C5811 + C47358 * C5814 -
             C15774 * C5812) *
                C47389) *
               C47294 * C3602) *
              C2700) *
         C47045) /
        (p * q * std::sqrt(p + q));
    d2ee[82] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C15769 * C124 - C15773 * C117 + C47358 * C125 - C15774 * C118) *
                C15775 +
            (C15769 * C138 - C15773 * C127 + C47358 * C139 - C15774 * C128) *
                C15771 +
            (C15924 - C15925 + C15926 - C15927) * C15776 +
            (C15928 - C15929 + C15930 - C15931) * C47389) *
               C47294 * C3094 +
           ((C15773 * C414 - C15769 * C424 + C15774 * C415 - C47358 * C425) *
                C15775 +
            (C15773 * C427 - C15769 * C444 + C15774 * C428 - C47358 * C445) *
                C15771 +
            (C16580 - C16581 + C16582 - C16583) * C15776 +
            (C16584 - C16585 + C16586 - C16587) * C47389) *
               C47294 * C47178) *
              C47417 +
          (((C15925 - C15924 + C15927 - C15926) * C15775 +
            (C15929 - C15928 + C15931 - C15930) * C15771 +
            (C15932 - C15933 + C15934 - C15935) * C15776 +
            (C15936 - C15937 + C15938 - C15939) * C47389) *
               C47294 * C3094 +
           ((C16581 - C16580 + C16583 - C16582) * C15775 +
            (C16585 - C16584 + C16587 - C16586) * C15771 +
            (C17002 - C17003 + C17004 - C17005) * C15776 +
            (C17006 - C17007 + C17008 - C17009) * C47389) *
               C47294 * C47178) *
              C47413 +
          (((C15933 - C15932 + C15935 - C15934) * C15775 +
            (C15937 - C15936 + C15939 - C15938) * C15771 +
            (C16832 - C16833 + C16834 - C16835) * C15776 +
            (C16836 - C16837 + C16838 - C16839) * C47389) *
               C47294 * C3094 +
           ((C17003 - C17002 + C17005 - C17004) * C15775 +
            (C17007 - C17006 + C17009 - C17008) * C15771 +
            (C17488 - C17489 + C17490 - C17491) * C15776 +
            (C17492 - C17493 + C17494 - C17495) * C47389) *
               C47294 * C47178) *
              C47403 +
          (((C16833 - C16832 + C16835 - C16834) * C15775 +
            (C16837 - C16836 + C16839 - C16838) * C15771 +
            (C16840 - C16841 + C16842 - C16843) * C15776 +
            (C16844 - C16845 + C16846 - C16847) * C47389) *
               C47294 * C3094 +
           ((C17489 - C17488 + C17491 - C17490) * C15775 +
            (C17493 - C17492 + C17495 - C17494) * C15771 +
            (C15769 * C6311 - C15773 * C6309 + C47358 * C6312 -
             C15774 * C6310) *
                C15776 +
            (C15769 * C6315 - C15773 * C6313 + C47358 * C6316 -
             C15774 * C6314) *
                C47389) *
               C47294 * C47178) *
              C47381) *
         C47045) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C15769 * C124 - C15773 * C117 + C47358 * C125 - C15774 * C118) *
                 C15775 +
             (C15769 * C138 - C15773 * C127 + C47358 * C139 - C15774 * C128) *
                 C15771 +
             (C15924 - C15925 + C15926 - C15927) * C15776 +
             (C15928 - C15929 + C15930 - C15931) * C47389) *
                C47294 * C3094 +
            ((C15773 * C414 - C15769 * C424 + C15774 * C415 - C47358 * C425) *
                 C15775 +
             (C15773 * C427 - C15769 * C444 + C15774 * C428 - C47358 * C445) *
                 C15771 +
             (C16580 - C16581 + C16582 - C16583) * C15776 +
             (C16584 - C16585 + C16586 - C16587) * C47389) *
                C47294 * C47178) *
               C2332 +
           (((C15925 - C15924 + C15927 - C15926) * C15775 +
             (C15929 - C15928 + C15931 - C15930) * C15771 +
             (C15932 - C15933 + C15934 - C15935) * C15776 +
             (C15936 - C15937 + C15938 - C15939) * C47389) *
                C47294 * C3094 +
            ((C16581 - C16580 + C16583 - C16582) * C15775 +
             (C16585 - C16584 + C16587 - C16586) * C15771 +
             (C17002 - C17003 + C17004 - C17005) * C15776 +
             (C17006 - C17007 + C17008 - C17009) * C47389) *
                C47294 * C47178) *
               C47136) *
              C47407 +
          ((((C15773 * C118 - C15769 * C125 + C15774 * C119 - C47358 * C126) *
                 C15775 +
             (C15773 * C128 - C15769 * C139 + C15774 * C129 - C47358 * C140) *
                 C15771 +
             (C15940 - C15941 + C15942 - C15943) * C15776 +
             (C15944 - C15945 + C15946 - C15947) * C47389) *
                C47294 * C3094 +
            ((C15769 * C425 - C15773 * C415 + C47358 * C426 - C15774 * C416) *
                 C15775 +
             (C15769 * C445 - C15773 * C428 + C47358 * C446 - C15774 * C429) *
                 C15771 +
             (C16588 - C16589 + C16590 - C16591) * C15776 +
             (C16592 - C16593 + C16594 - C16595) * C47389) *
                C47294 * C47178) *
               C2332 +
           (((C15941 - C15940 + C15943 - C15942) * C15775 +
             (C15945 - C15944 + C15947 - C15946) * C15771 +
             (C15948 - C15949 + C15950 - C15951) * C15776 +
             (C15952 - C15953 + C15954 - C15955) * C47389) *
                C47294 * C3094 +
            ((C16589 - C16588 + C16591 - C16590) * C15775 +
             (C16593 - C16592 + C16595 - C16594) * C15771 +
             (C17350 - C17351 + C17352 - C17353) * C15776 +
             (C17354 - C17355 + C17356 - C17357) * C47389) *
                C47294 * C47178) *
               C47136) *
              C47394 +
          ((((C15769 * C126 - C15773 * C119 + C47358 * C130 - C15774 * C120) *
                 C15775 +
             (C15769 * C140 - C15773 * C129 + C47358 * C141 - C15774 * C131) *
                 C15771 +
             (C15956 - C15957 + C15958 - C15959) * C15776 +
             (C15960 - C15961 + C15962 - C15963) * C47389) *
                C47294 * C3094 +
            ((C15773 * C416 - C15769 * C426 + C15774 * C420 - C47358 * C436) *
                 C15775 +
             (C15773 * C429 - C15769 * C446 + C15774 * C437 - C47358 * C450) *
                 C15771 +
             (C16596 - C16597 + C16598 - C16599) * C15776 +
             (C16600 - C16601 + C16602 - C16603) * C47389) *
                C47294 * C47178) *
               C2332 +
           (((C15957 - C15956 + C15959 - C15958) * C15775 +
             (C15961 - C15960 + C15963 - C15962) * C15771 +
             (C15964 - C15965 + C15966 - C15967) * C15776 +
             (C15968 - C15969 + C15970 - C15971) * C47389) *
                C47294 * C3094 +
            ((C16597 - C16596 + C16599 - C16598) * C15775 +
             (C16601 - C16600 + C16603 - C16602) * C15771 +
             (C15769 * C1167 - C15773 * C1155 + C47358 * C1441 -
              C15774 * C1440) *
                 C15776 +
             (C15769 * C1182 - C15773 * C1170 + C47358 * C1443 -
              C15774 * C1442) *
                 C47389) *
                C47294 * C47178) *
               C47136) *
              C47365)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C15769 * C124 - C15773 * C117 + C47358 * C125 - C15774 * C118) *
                C15775 +
            (C15769 * C138 - C15773 * C127 + C47358 * C139 - C15774 * C128) *
                C15771 +
            (C15924 - C15925 + C15926 - C15927) * C15776 +
            (C15928 - C15929 + C15930 - C15931) * C47389) *
               C47294 * C47418 +
           ((C15773 * C414 - C15769 * C424 + C15774 * C415 - C47358 * C425) *
                C15775 +
            (C15773 * C427 - C15769 * C444 + C15774 * C428 - C47358 * C445) *
                C15771 +
            (C16580 - C16581 + C16582 - C16583) * C15776 +
            (C16584 - C16585 + C16586 - C16587) * C47389) *
               C47294 * C47415 +
           ((C15769 * C430 - C15773 * C417 + C47358 * C431 - C15774 * C418) *
                C15775 +
            (C15769 * C447 - C15773 * C433 + C47358 * C448 - C15774 * C434) *
                C15771 +
            (C16994 - C16995 + C16996 - C16997) * C15776 +
            (C16998 - C16999 + C17000 - C17001) * C47389) *
               C47294 * C47406 +
           ((C15773 * C1844 - C15769 * C1850 + C15774 * C1845 -
             C47358 * C1851) *
                C15775 +
            (C15773 * C1853 - C15769 * C1862 + C15774 * C1854 -
             C47358 * C1863) *
                C15771 +
            (C18332 - C18333 + C18334 - C18335) * C15776 +
            (C18336 - C18337 + C18338 - C18339) * C47389) *
               C47294 * C47387) *
              C2332 +
          (((C15925 - C15924 + C15927 - C15926) * C15775 +
            (C15929 - C15928 + C15931 - C15930) * C15771 +
            (C15932 - C15933 + C15934 - C15935) * C15776 +
            (C15936 - C15937 + C15938 - C15939) * C47389) *
               C47294 * C47418 +
           ((C16581 - C16580 + C16583 - C16582) * C15775 +
            (C16585 - C16584 + C16587 - C16586) * C15771 +
            (C17002 - C17003 + C17004 - C17005) * C15776 +
            (C17006 - C17007 + C17008 - C17009) * C47389) *
               C47294 * C47415 +
           ((C16995 - C16994 + C16997 - C16996) * C15775 +
            (C16999 - C16998 + C17001 - C17000) * C15771 +
            (C17010 - C17011 + C17012 - C17013) * C15776 +
            (C17014 - C17015 + C17016 - C17017) * C47389) *
               C47294 * C47406 +
           ((C18333 - C18332 + C18335 - C18334) * C15775 +
            (C18337 - C18336 + C18339 - C18338) * C15771 +
            (C15769 * C7171 - C15773 * C7169 + C47358 * C7172 -
             C15774 * C7170) *
                C15776 +
            (C15769 * C7175 - C15773 * C7173 + C47358 * C7176 -
             C15774 * C7174) *
                C47389) *
               C47294 * C47387) *
              C47136) *
         C47045) /
            (p * q * std::sqrt(p + q));
    d2ee[83] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C15769 * C124 - C15773 * C117 + C47358 * C125 - C15774 * C118) *
                 C15775 +
             (C15769 * C138 - C15773 * C127 + C47358 * C139 - C15774 * C128) *
                 C15771 +
             (C15924 - C15925 + C15926 - C15927) * C15776 +
             (C15928 - C15929 + C15930 - C15931) * C47389) *
                C47294 * C47174 +
            ((C15773 * C414 - C15769 * C424 + C15774 * C415 - C47358 * C425) *
                 C15775 +
             (C15773 * C427 - C15769 * C444 + C15774 * C428 - C47358 * C445) *
                 C15771 +
             (C16580 - C16581 + C16582 - C16583) * C15776 +
             (C16584 - C16585 + C16586 - C16587) * C47389) *
                C47294 * C47181 +
            ((C15769 * C430 - C15773 * C417 + C47358 * C431 - C15774 * C418) *
                 C15775 +
             (C15769 * C447 - C15773 * C433 + C47358 * C448 - C15774 * C434) *
                 C15771 +
             (C16994 - C16995 + C16996 - C16997) * C15776 +
             (C16998 - C16999 + C17000 - C17001) * C47389) *
                C47294 * C3602) *
               C2332 +
           (((C15925 - C15924 + C15927 - C15926) * C15775 +
             (C15929 - C15928 + C15931 - C15930) * C15771 +
             (C15932 - C15933 + C15934 - C15935) * C15776 +
             (C15936 - C15937 + C15938 - C15939) * C47389) *
                C47294 * C47174 +
            ((C16581 - C16580 + C16583 - C16582) * C15775 +
             (C16585 - C16584 + C16587 - C16586) * C15771 +
             (C17002 - C17003 + C17004 - C17005) * C15776 +
             (C17006 - C17007 + C17008 - C17009) * C47389) *
                C47294 * C47181 +
            ((C16995 - C16994 + C16997 - C16996) * C15775 +
             (C16999 - C16998 + C17001 - C17000) * C15771 +
             (C17010 - C17011 + C17012 - C17013) * C15776 +
             (C17014 - C17015 + C17016 - C17017) * C47389) *
                C47294 * C3602) *
               C47136) *
              C47325 +
          ((((C15773 * C118 - C15769 * C125 + C15774 * C119 - C47358 * C126) *
                 C15775 +
             (C15773 * C128 - C15769 * C139 + C15774 * C129 - C47358 * C140) *
                 C15771 +
             (C15940 - C15941 + C15942 - C15943) * C15776 +
             (C15944 - C15945 + C15946 - C15947) * C47389) *
                C47294 * C47174 +
            ((C15769 * C425 - C15773 * C415 + C47358 * C426 - C15774 * C416) *
                 C15775 +
             (C15769 * C445 - C15773 * C428 + C47358 * C446 - C15774 * C429) *
                 C15771 +
             (C16588 - C16589 + C16590 - C16591) * C15776 +
             (C16592 - C16593 + C16594 - C16595) * C47389) *
                C47294 * C47181 +
            ((C15773 * C418 - C15769 * C431 + C15774 * C419 - C47358 * C432) *
                 C15775 +
             (C15773 * C434 - C15769 * C448 + C15774 * C435 - C47358 * C449) *
                 C15771 +
             (C18064 - C18065 + C18066 - C18067) * C15776 +
             (C18068 - C18069 + C18070 - C18071) * C47389) *
                C47294 * C3602) *
               C2332 +
           (((C15941 - C15940 + C15943 - C15942) * C15775 +
             (C15945 - C15944 + C15947 - C15946) * C15771 +
             (C15948 - C15949 + C15950 - C15951) * C15776 +
             (C15952 - C15953 + C15954 - C15955) * C47389) *
                C47294 * C47174 +
            ((C16589 - C16588 + C16591 - C16590) * C15775 +
             (C16593 - C16592 + C16595 - C16594) * C15771 +
             (C17350 - C17351 + C17352 - C17353) * C15776 +
             (C17354 - C17355 + C17356 - C17357) * C47389) *
                C47294 * C47181 +
            ((C18065 - C18064 + C18067 - C18066) * C15775 +
             (C18069 - C18068 + C18071 - C18070) * C15771 +
             (C15769 * C1172 - C15773 * C1157 + C47358 * C1173 -
              C15774 * C1158) *
                 C15776 +
             (C15769 * C1184 - C15773 * C1175 + C47358 * C1185 -
              C15774 * C1176) *
                 C47389) *
                C47294 * C3602) *
               C47136) *
              C47056)) /
        (p * q * std::sqrt(p + q));
    d2ee[84] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C15769 * C124 - C15773 * C117 + C47358 * C125 - C15774 * C118) *
                 C15775 +
             (C15769 * C138 - C15773 * C127 + C47358 * C139 - C15774 * C128) *
                 C15771 +
             (C15924 - C15925 + C15926 - C15927) * C15776 +
             (C15928 - C15929 + C15930 - C15931) * C47389) *
                C47294 * C3094 +
            ((C15773 * C414 - C15769 * C424 + C15774 * C415 - C47358 * C425) *
                 C15775 +
             (C15773 * C427 - C15769 * C444 + C15774 * C428 - C47358 * C445) *
                 C15771 +
             (C16580 - C16581 + C16582 - C16583) * C15776 +
             (C16584 - C16585 + C16586 - C16587) * C47389) *
                C47294 * C47178) *
               C2332 +
           (((C15925 - C15924 + C15927 - C15926) * C15775 +
             (C15929 - C15928 + C15931 - C15930) * C15771 +
             (C15932 - C15933 + C15934 - C15935) * C15776 +
             (C15936 - C15937 + C15938 - C15939) * C47389) *
                C47294 * C3094 +
            ((C16581 - C16580 + C16583 - C16582) * C15775 +
             (C16585 - C16584 + C16587 - C16586) * C15771 +
             (C17002 - C17003 + C17004 - C17005) * C15776 +
             (C17006 - C17007 + C17008 - C17009) * C47389) *
                C47294 * C47178) *
               C47136) *
              C47407 +
          ((((C15773 * C118 - C15769 * C125 + C15774 * C119 - C47358 * C126) *
                 C15775 +
             (C15773 * C128 - C15769 * C139 + C15774 * C129 - C47358 * C140) *
                 C15771 +
             (C15940 - C15941 + C15942 - C15943) * C15776 +
             (C15944 - C15945 + C15946 - C15947) * C47389) *
                C47294 * C3094 +
            ((C15769 * C425 - C15773 * C415 + C47358 * C426 - C15774 * C416) *
                 C15775 +
             (C15769 * C445 - C15773 * C428 + C47358 * C446 - C15774 * C429) *
                 C15771 +
             (C16588 - C16589 + C16590 - C16591) * C15776 +
             (C16592 - C16593 + C16594 - C16595) * C47389) *
                C47294 * C47178) *
               C2332 +
           (((C15941 - C15940 + C15943 - C15942) * C15775 +
             (C15945 - C15944 + C15947 - C15946) * C15771 +
             (C15948 - C15949 + C15950 - C15951) * C15776 +
             (C15952 - C15953 + C15954 - C15955) * C47389) *
                C47294 * C3094 +
            ((C16589 - C16588 + C16591 - C16590) * C15775 +
             (C16593 - C16592 + C16595 - C16594) * C15771 +
             (C17350 - C17351 + C17352 - C17353) * C15776 +
             (C17354 - C17355 + C17356 - C17357) * C47389) *
                C47294 * C47178) *
               C47136) *
              C47394 +
          ((((C15769 * C126 - C15773 * C119 + C47358 * C130 - C15774 * C120) *
                 C15775 +
             (C15769 * C140 - C15773 * C129 + C47358 * C141 - C15774 * C131) *
                 C15771 +
             (C15956 - C15957 + C15958 - C15959) * C15776 +
             (C15960 - C15961 + C15962 - C15963) * C47389) *
                C47294 * C3094 +
            ((C15773 * C416 - C15769 * C426 + C15774 * C420 - C47358 * C436) *
                 C15775 +
             (C15773 * C429 - C15769 * C446 + C15774 * C437 - C47358 * C450) *
                 C15771 +
             (C16596 - C16597 + C16598 - C16599) * C15776 +
             (C16600 - C16601 + C16602 - C16603) * C47389) *
                C47294 * C47178) *
               C2332 +
           (((C15957 - C15956 + C15959 - C15958) * C15775 +
             (C15961 - C15960 + C15963 - C15962) * C15771 +
             (C15964 - C15965 + C15966 - C15967) * C15776 +
             (C15968 - C15969 + C15970 - C15971) * C47389) *
                C47294 * C3094 +
            ((C16597 - C16596 + C16599 - C16598) * C15775 +
             (C16601 - C16600 + C16603 - C16602) * C15771 +
             (C15769 * C1167 - C15773 * C1155 + C47358 * C1441 -
              C15774 * C1440) *
                 C15776 +
             (C15769 * C1182 - C15773 * C1170 + C47358 * C1443 -
              C15774 * C1442) *
                 C47389) *
                C47294 * C47178) *
               C47136) *
              C47365)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C15769 * C124 - C15773 * C117 + C47358 * C125 - C15774 * C118) *
                C15775 +
            (C15769 * C138 - C15773 * C127 + C47358 * C139 - C15774 * C128) *
                C15771 +
            (C15924 - C15925 + C15926 - C15927) * C15776 +
            (C15928 - C15929 + C15930 - C15931) * C47389) *
               C47294 * C3094 +
           ((C15773 * C414 - C15769 * C424 + C15774 * C415 - C47358 * C425) *
                C15775 +
            (C15773 * C427 - C15769 * C444 + C15774 * C428 - C47358 * C445) *
                C15771 +
            (C16580 - C16581 + C16582 - C16583) * C15776 +
            (C16584 - C16585 + C16586 - C16587) * C47389) *
               C47294 * C47178) *
              C47417 +
          (((C15925 - C15924 + C15927 - C15926) * C15775 +
            (C15929 - C15928 + C15931 - C15930) * C15771 +
            (C15932 - C15933 + C15934 - C15935) * C15776 +
            (C15936 - C15937 + C15938 - C15939) * C47389) *
               C47294 * C3094 +
           ((C16581 - C16580 + C16583 - C16582) * C15775 +
            (C16585 - C16584 + C16587 - C16586) * C15771 +
            (C17002 - C17003 + C17004 - C17005) * C15776 +
            (C17006 - C17007 + C17008 - C17009) * C47389) *
               C47294 * C47178) *
              C47413 +
          (((C15933 - C15932 + C15935 - C15934) * C15775 +
            (C15937 - C15936 + C15939 - C15938) * C15771 +
            (C16832 - C16833 + C16834 - C16835) * C15776 +
            (C16836 - C16837 + C16838 - C16839) * C47389) *
               C47294 * C3094 +
           ((C17003 - C17002 + C17005 - C17004) * C15775 +
            (C17007 - C17006 + C17009 - C17008) * C15771 +
            (C17488 - C17489 + C17490 - C17491) * C15776 +
            (C17492 - C17493 + C17494 - C17495) * C47389) *
               C47294 * C47178) *
              C47403 +
          (((C16833 - C16832 + C16835 - C16834) * C15775 +
            (C16837 - C16836 + C16839 - C16838) * C15771 +
            (C16840 - C16841 + C16842 - C16843) * C15776 +
            (C16844 - C16845 + C16846 - C16847) * C47389) *
               C47294 * C3094 +
           ((C17489 - C17488 + C17491 - C17490) * C15775 +
            (C17493 - C17492 + C17495 - C17494) * C15771 +
            (C15769 * C6311 - C15773 * C6309 + C47358 * C6312 -
             C15774 * C6310) *
                C15776 +
            (C15769 * C6315 - C15773 * C6313 + C47358 * C6316 -
             C15774 * C6314) *
                C47389) *
               C47294 * C47178) *
              C47381) *
         C47045) /
            (p * q * std::sqrt(p + q));
    d2ee[85] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C15769 * C124 - C15773 * C117 + C47358 * C125 - C15774 * C118) *
                C15775 +
            (C15769 * C138 - C15773 * C127 + C47358 * C139 - C15774 * C128) *
                C15771 +
            (C15924 - C15925 + C15926 - C15927) * C15776 +
            (C15928 - C15929 + C15930 - C15931) * C47389) *
               C47294 * C47091 * C1284 +
           ((C15925 - C15924 + C15927 - C15926) * C15775 +
            (C15929 - C15928 + C15931 - C15930) * C15771 +
            (C15932 - C15933 + C15934 - C15935) * C15776 +
            (C15936 - C15937 + C15938 - C15939) * C47389) *
               C47294 * C47091 * C1285 +
           ((C15933 - C15932 + C15935 - C15934) * C15775 +
            (C15937 - C15936 + C15939 - C15938) * C15771 +
            (C16832 - C16833 + C16834 - C16835) * C15776 +
            (C16836 - C16837 + C16838 - C16839) * C47389) *
               C47294 * C47091 * C1286 +
           ((C16833 - C16832 + C16835 - C16834) * C15775 +
            (C16837 - C16836 + C16839 - C16838) * C15771 +
            (C16840 - C16841 + C16842 - C16843) * C15776 +
            (C16844 - C16845 + C16846 - C16847) * C47389) *
               C47294 * C47091 * C47381) *
              C47325 +
          (((C15773 * C118 - C15769 * C125 + C15774 * C119 - C47358 * C126) *
                C15775 +
            (C15773 * C128 - C15769 * C139 + C15774 * C129 - C47358 * C140) *
                C15771 +
            (C15940 - C15941 + C15942 - C15943) * C15776 +
            (C15944 - C15945 + C15946 - C15947) * C47389) *
               C47294 * C47091 * C1284 +
           ((C15941 - C15940 + C15943 - C15942) * C15775 +
            (C15945 - C15944 + C15947 - C15946) * C15771 +
            (C15948 - C15949 + C15950 - C15951) * C15776 +
            (C15952 - C15953 + C15954 - C15955) * C47389) *
               C47294 * C47091 * C1285 +
           ((C15949 - C15948 + C15951 - C15950) * C15775 +
            (C15953 - C15952 + C15955 - C15954) * C15771 +
            (C17148 - C17149 + C17150 - C17151) * C15776 +
            (C17152 - C17153 + C17154 - C17155) * C47389) *
               C47294 * C47091 * C1286 +
           ((C17149 - C17148 + C17151 - C17150) * C15775 +
            (C17153 - C17152 + C17155 - C17154) * C15771 +
            (C15769 * C1029 - C15773 * C1020 + C47358 * C1030 -
             C15774 * C1021) *
                C15776 +
            (C15769 * C1038 - C15773 * C1032 + C47358 * C1039 -
             C15774 * C1033) *
                C47389) *
               C47294 * C47091 * C47381) *
              C47056)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C15769 * C124 - C15773 * C117 + C47358 * C125 - C15774 * C118) *
                C15775 +
            (C15769 * C138 - C15773 * C127 + C47358 * C139 - C15774 * C128) *
                C15771 +
            (C15924 - C15925 + C15926 - C15927) * C15776 +
            (C15928 - C15929 + C15930 - C15931) * C47389) *
               C47294 * C47091 * C47339 +
           ((C15925 - C15924 + C15927 - C15926) * C15775 +
            (C15929 - C15928 + C15931 - C15930) * C15771 +
            (C15932 - C15933 + C15934 - C15935) * C15776 +
            (C15936 - C15937 + C15938 - C15939) * C47389) *
               C47294 * C47091 * C47136) *
              C554 +
          (((C15773 * C118 - C15769 * C125 + C15774 * C119 - C47358 * C126) *
                C15775 +
            (C15773 * C128 - C15769 * C139 + C15774 * C129 - C47358 * C140) *
                C15771 +
            (C15940 - C15941 + C15942 - C15943) * C15776 +
            (C15944 - C15945 + C15946 - C15947) * C47389) *
               C47294 * C47091 * C47339 +
           ((C15941 - C15940 + C15943 - C15942) * C15775 +
            (C15945 - C15944 + C15947 - C15946) * C15771 +
            (C15948 - C15949 + C15950 - C15951) * C15776 +
            (C15952 - C15953 + C15954 - C15955) * C47389) *
               C47294 * C47091 * C47136) *
              C555 +
          (((C15769 * C126 - C15773 * C119 + C47358 * C130 - C15774 * C120) *
                C15775 +
            (C15769 * C140 - C15773 * C129 + C47358 * C141 - C15774 * C131) *
                C15771 +
            (C15956 - C15957 + C15958 - C15959) * C15776 +
            (C15960 - C15961 + C15962 - C15963) * C47389) *
               C47294 * C47091 * C47339 +
           ((C15957 - C15956 + C15959 - C15958) * C15775 +
            (C15961 - C15960 + C15963 - C15962) * C15771 +
            (C15964 - C15965 + C15966 - C15967) * C15776 +
            (C15968 - C15969 + C15970 - C15971) * C47389) *
               C47294 * C47091 * C47136) *
              C556 +
          (((C15773 * C120 - C15769 * C130 + C15774 * C121 - C47358 * C132) *
                C15775 +
            (C15773 * C131 - C15769 * C141 + C15774 * C133 - C47358 * C142) *
                C15771 +
            (C16248 - C16249 + C16250 - C16251) * C15776 +
            (C16252 - C16253 + C16254 - C16255) * C47389) *
               C47294 * C47091 * C47339 +
           ((C16249 - C16248 + C16251 - C16250) * C15775 +
            (C16253 - C16252 + C16255 - C16254) * C15771 +
            (C15769 * C285 - C15773 * C268 + C47358 * C289 - C15774 * C270) *
                C15776 +
            (C15769 * C298 - C15773 * C286 + C47358 * C300 - C15774 * C290) *
                C47389) *
               C47294 * C47091 * C47136) *
              C47375)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C15769 * C124 - C15773 * C117 + C47358 * C125 - C15774 * C118) *
                 C15775 +
             (C15769 * C138 - C15773 * C127 + C47358 * C139 - C15774 * C128) *
                 C15771 +
             (C15924 - C15925 + C15926 - C15927) * C15776 +
             (C15928 - C15929 + C15930 - C15931) * C47389) *
                C47294 * C1664 +
            ((C15773 * C414 - C15769 * C424 + C15774 * C415 - C47358 * C425) *
                 C15775 +
             (C15773 * C427 - C15769 * C444 + C15774 * C428 - C47358 * C445) *
                 C15771 +
             (C16580 - C16581 + C16582 - C16583) * C15776 +
             (C16584 - C16585 + C16586 - C16587) * C47389) *
                C47294 * C1665 +
            ((C15769 * C430 - C15773 * C417 + C47358 * C431 - C15774 * C418) *
                 C15775 +
             (C15769 * C447 - C15773 * C433 + C47358 * C448 - C15774 * C434) *
                 C15771 +
             (C16994 - C16995 + C16996 - C16997) * C15776 +
             (C16998 - C16999 + C17000 - C17001) * C47389) *
                C47294 * C47374) *
               C47339 +
           (((C15925 - C15924 + C15927 - C15926) * C15775 +
             (C15929 - C15928 + C15931 - C15930) * C15771 +
             (C15932 - C15933 + C15934 - C15935) * C15776 +
             (C15936 - C15937 + C15938 - C15939) * C47389) *
                C47294 * C1664 +
            ((C16581 - C16580 + C16583 - C16582) * C15775 +
             (C16585 - C16584 + C16587 - C16586) * C15771 +
             (C17002 - C17003 + C17004 - C17005) * C15776 +
             (C17006 - C17007 + C17008 - C17009) * C47389) *
                C47294 * C1665 +
            ((C16995 - C16994 + C16997 - C16996) * C15775 +
             (C16999 - C16998 + C17001 - C17000) * C15771 +
             (C17010 - C17011 + C17012 - C17013) * C15776 +
             (C17014 - C17015 + C17016 - C17017) * C47389) *
                C47294 * C47374) *
               C47136) *
              C47325 +
          ((((C15773 * C118 - C15769 * C125 + C15774 * C119 - C47358 * C126) *
                 C15775 +
             (C15773 * C128 - C15769 * C139 + C15774 * C129 - C47358 * C140) *
                 C15771 +
             (C15940 - C15941 + C15942 - C15943) * C15776 +
             (C15944 - C15945 + C15946 - C15947) * C47389) *
                C47294 * C1664 +
            ((C15769 * C425 - C15773 * C415 + C47358 * C426 - C15774 * C416) *
                 C15775 +
             (C15769 * C445 - C15773 * C428 + C47358 * C446 - C15774 * C429) *
                 C15771 +
             (C16588 - C16589 + C16590 - C16591) * C15776 +
             (C16592 - C16593 + C16594 - C16595) * C47389) *
                C47294 * C1665 +
            ((C15773 * C418 - C15769 * C431 + C15774 * C419 - C47358 * C432) *
                 C15775 +
             (C15773 * C434 - C15769 * C448 + C15774 * C435 - C47358 * C449) *
                 C15771 +
             (C18064 - C18065 + C18066 - C18067) * C15776 +
             (C18068 - C18069 + C18070 - C18071) * C47389) *
                C47294 * C47374) *
               C47339 +
           (((C15941 - C15940 + C15943 - C15942) * C15775 +
             (C15945 - C15944 + C15947 - C15946) * C15771 +
             (C15948 - C15949 + C15950 - C15951) * C15776 +
             (C15952 - C15953 + C15954 - C15955) * C47389) *
                C47294 * C1664 +
            ((C16589 - C16588 + C16591 - C16590) * C15775 +
             (C16593 - C16592 + C16595 - C16594) * C15771 +
             (C17350 - C17351 + C17352 - C17353) * C15776 +
             (C17354 - C17355 + C17356 - C17357) * C47389) *
                C47294 * C1665 +
            ((C18065 - C18064 + C18067 - C18066) * C15775 +
             (C18069 - C18068 + C18071 - C18070) * C15771 +
             (C15769 * C1172 - C15773 * C1157 + C47358 * C1173 -
              C15774 * C1158) *
                 C15776 +
             (C15769 * C1184 - C15773 * C1175 + C47358 * C1185 -
              C15774 * C1176) *
                 C47389) *
                C47294 * C47374) *
               C47136) *
              C47056)) /
            (p * q * std::sqrt(p + q));
    d2ee[86] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C15769 * C124 - C15773 * C117 + C47358 * C125 - C15774 * C118) *
                C15775 +
            (C15769 * C138 - C15773 * C127 + C47358 * C139 - C15774 * C128) *
                C15771 +
            (C15924 - C15925 + C15926 - C15927) * C15776 +
            (C15928 - C15929 + C15930 - C15931) * C47389) *
               C47294 * C47340 +
           ((C15773 * C414 - C15769 * C424 + C15774 * C415 - C47358 * C425) *
                C15775 +
            (C15773 * C427 - C15769 * C444 + C15774 * C428 - C47358 * C445) *
                C15771 +
            (C16580 - C16581 + C16582 - C16583) * C15776 +
            (C16584 - C16585 + C16586 - C16587) * C47389) *
               C47294 * C47178) *
              C1284 +
          (((C15925 - C15924 + C15927 - C15926) * C15775 +
            (C15929 - C15928 + C15931 - C15930) * C15771 +
            (C15932 - C15933 + C15934 - C15935) * C15776 +
            (C15936 - C15937 + C15938 - C15939) * C47389) *
               C47294 * C47340 +
           ((C16581 - C16580 + C16583 - C16582) * C15775 +
            (C16585 - C16584 + C16587 - C16586) * C15771 +
            (C17002 - C17003 + C17004 - C17005) * C15776 +
            (C17006 - C17007 + C17008 - C17009) * C47389) *
               C47294 * C47178) *
              C1285 +
          (((C15933 - C15932 + C15935 - C15934) * C15775 +
            (C15937 - C15936 + C15939 - C15938) * C15771 +
            (C16832 - C16833 + C16834 - C16835) * C15776 +
            (C16836 - C16837 + C16838 - C16839) * C47389) *
               C47294 * C47340 +
           ((C17003 - C17002 + C17005 - C17004) * C15775 +
            (C17007 - C17006 + C17009 - C17008) * C15771 +
            (C17488 - C17489 + C17490 - C17491) * C15776 +
            (C17492 - C17493 + C17494 - C17495) * C47389) *
               C47294 * C47178) *
              C1286 +
          (((C16833 - C16832 + C16835 - C16834) * C15775 +
            (C16837 - C16836 + C16839 - C16838) * C15771 +
            (C16840 - C16841 + C16842 - C16843) * C15776 +
            (C16844 - C16845 + C16846 - C16847) * C47389) *
               C47294 * C47340 +
           ((C17489 - C17488 + C17491 - C17490) * C15775 +
            (C17493 - C17492 + C17495 - C17494) * C15771 +
            (C15769 * C6311 - C15773 * C6309 + C47358 * C6312 -
             C15774 * C6310) *
                C15776 +
            (C15769 * C6315 - C15773 * C6313 + C47358 * C6316 -
             C15774 * C6314) *
                C47389) *
               C47294 * C47178) *
              C47381) *
         C47045) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C15769 * C124 - C15773 * C117 + C47358 * C125 - C15774 * C118) *
                 C15775 +
             (C15769 * C138 - C15773 * C127 + C47358 * C139 - C15774 * C128) *
                 C15771 +
             (C15924 - C15925 + C15926 - C15927) * C15776 +
             (C15928 - C15929 + C15930 - C15931) * C47389) *
                C47294 * C47340 +
            ((C15773 * C414 - C15769 * C424 + C15774 * C415 - C47358 * C425) *
                 C15775 +
             (C15773 * C427 - C15769 * C444 + C15774 * C428 - C47358 * C445) *
                 C15771 +
             (C16580 - C16581 + C16582 - C16583) * C15776 +
             (C16584 - C16585 + C16586 - C16587) * C47389) *
                C47294 * C47178) *
               C47339 +
           (((C15925 - C15924 + C15927 - C15926) * C15775 +
             (C15929 - C15928 + C15931 - C15930) * C15771 +
             (C15932 - C15933 + C15934 - C15935) * C15776 +
             (C15936 - C15937 + C15938 - C15939) * C47389) *
                C47294 * C47340 +
            ((C16581 - C16580 + C16583 - C16582) * C15775 +
             (C16585 - C16584 + C16587 - C16586) * C15771 +
             (C15769 * C1165 - C15773 * C1153 + C47358 * C1166 -
              C15774 * C1154) *
                 C15776 +
             (C15769 * C1180 - C15773 * C1168 + C47358 * C1181 -
              C15774 * C1169) *
                 C47389) *
                C47294 * C47178) *
               C47136) *
              C258 +
          ((((C15773 * C118 - C15769 * C125 + C15774 * C119 - C47358 * C126) *
                 C15775 +
             (C15773 * C128 - C15769 * C139 + C15774 * C129 - C47358 * C140) *
                 C15771 +
             (C15940 - C15941 + C15942 - C15943) * C15776 +
             (C15944 - C15945 + C15946 - C15947) * C47389) *
                C47294 * C47340 +
            ((C15769 * C425 - C15773 * C415 + C47358 * C426 - C15774 * C416) *
                 C15775 +
             (C15769 * C445 - C15773 * C428 + C47358 * C446 - C15774 * C429) *
                 C15771 +
             (C16588 - C16589 + C16590 - C16591) * C15776 +
             (C16592 - C16593 + C16594 - C16595) * C47389) *
                C47294 * C47178) *
               C47339 +
           (((C15941 - C15940 + C15943 - C15942) * C15775 +
             (C15945 - C15944 + C15947 - C15946) * C15771 +
             (C15948 - C15949 + C15950 - C15951) * C15776 +
             (C15952 - C15953 + C15954 - C15955) * C47389) *
                C47294 * C47340 +
            ((C16589 - C16588 + C16591 - C16590) * C15775 +
             (C16593 - C16592 + C16595 - C16594) * C15771 +
             (C15773 * C1154 - C15769 * C1166 + C15774 * C1155 -
              C47358 * C1167) *
                 C15776 +
             (C15773 * C1169 - C15769 * C1181 + C15774 * C1170 -
              C47358 * C1182) *
                 C47389) *
                C47294 * C47178) *
               C47136) *
              C259 +
          ((((C15769 * C126 - C15773 * C119 + C47358 * C130 - C15774 * C120) *
                 C15775 +
             (C15769 * C140 - C15773 * C129 + C47358 * C141 - C15774 * C131) *
                 C15771 +
             (C15956 - C15957 + C15958 - C15959) * C15776 +
             (C15960 - C15961 + C15962 - C15963) * C47389) *
                C47294 * C47340 +
            ((C15773 * C416 - C15769 * C426 + C15774 * C420 - C47358 * C436) *
                 C15775 +
             (C15773 * C429 - C15769 * C446 + C15774 * C437 - C47358 * C450) *
                 C15771 +
             (C16596 - C16597 + C16598 - C16599) * C15776 +
             (C16600 - C16601 + C16602 - C16603) * C47389) *
                C47294 * C47178) *
               C47339 +
           (((C15957 - C15956 + C15959 - C15958) * C15775 +
             (C15961 - C15960 + C15963 - C15962) * C15771 +
             (C15964 - C15965 + C15966 - C15967) * C15776 +
             (C15968 - C15969 + C15970 - C15971) * C47389) *
                C47294 * C47340 +
            ((C16597 - C16596 + C16599 - C16598) * C15775 +
             (C16601 - C16600 + C16603 - C16602) * C15771 +
             (C15769 * C1167 - C15773 * C1155 + C47358 * C1441 -
              C15774 * C1440) *
                 C15776 +
             (C15769 * C1182 - C15773 * C1170 + C47358 * C1443 -
              C15774 * C1442) *
                 C47389) *
                C47294 * C47178) *
               C47136) *
              C47365)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C15769 * C124 - C15773 * C117 + C47358 * C125 - C15774 * C118) *
                C15775 +
            (C15769 * C138 - C15773 * C127 + C47358 * C139 - C15774 * C128) *
                C15771 +
            (C15924 - C15925 + C15926 - C15927) * C15776 +
            (C15928 - C15929 + C15930 - C15931) * C47389) *
               C47294 * C2116 +
           ((C15773 * C414 - C15769 * C424 + C15774 * C415 - C47358 * C425) *
                C15775 +
            (C15773 * C427 - C15769 * C444 + C15774 * C428 - C47358 * C445) *
                C15771 +
            (C16580 - C16581 + C16582 - C16583) * C15776 +
            (C16584 - C16585 + C16586 - C16587) * C47389) *
               C47294 * C2117 +
           ((C15769 * C430 - C15773 * C417 + C47358 * C431 - C15774 * C418) *
                C15775 +
            (C15769 * C447 - C15773 * C433 + C47358 * C448 - C15774 * C434) *
                C15771 +
            (C16994 - C16995 + C16996 - C16997) * C15776 +
            (C16998 - C16999 + C17000 - C17001) * C47389) *
               C47294 * C2118 +
           ((C15773 * C1844 - C15769 * C1850 + C15774 * C1845 -
             C47358 * C1851) *
                C15775 +
            (C15773 * C1853 - C15769 * C1862 + C15774 * C1854 -
             C47358 * C1863) *
                C15771 +
            (C18332 - C18333 + C18334 - C18335) * C15776 +
            (C18336 - C18337 + C18338 - C18339) * C47389) *
               C47294 * C47387) *
              C47339 +
          (((C15925 - C15924 + C15927 - C15926) * C15775 +
            (C15929 - C15928 + C15931 - C15930) * C15771 +
            (C15932 - C15933 + C15934 - C15935) * C15776 +
            (C15936 - C15937 + C15938 - C15939) * C47389) *
               C47294 * C2116 +
           ((C16581 - C16580 + C16583 - C16582) * C15775 +
            (C16585 - C16584 + C16587 - C16586) * C15771 +
            (C17002 - C17003 + C17004 - C17005) * C15776 +
            (C17006 - C17007 + C17008 - C17009) * C47389) *
               C47294 * C2117 +
           ((C16995 - C16994 + C16997 - C16996) * C15775 +
            (C16999 - C16998 + C17001 - C17000) * C15771 +
            (C17010 - C17011 + C17012 - C17013) * C15776 +
            (C17014 - C17015 + C17016 - C17017) * C47389) *
               C47294 * C2118 +
           ((C18333 - C18332 + C18335 - C18334) * C15775 +
            (C18337 - C18336 + C18339 - C18338) * C15771 +
            (C15769 * C7171 - C15773 * C7169 + C47358 * C7172 -
             C15774 * C7170) *
                C15776 +
            (C15769 * C7175 - C15773 * C7173 + C47358 * C7176 -
             C15774 * C7174) *
                C47389) *
               C47294 * C47387) *
              C47136) *
         C47045) /
            (p * q * std::sqrt(p + q));
    d2ee[87] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((C15769 * C124 - C15773 * C117 + C47358 * C125 - C15774 * C118) *
                   C15775 +
               (C15769 * C138 - C15773 * C127 + C47358 * C139 - C15774 * C128) *
                   C15771 +
               (C15769 * C271 - C15773 * C261 + C47358 * C272 - C15774 * C262) *
                   C15776 +
               (C15769 * C291 - C15773 * C274 + C47358 * C292 - C15774 * C275) *
                   C47389) *
                  C47294 * C47091 * C47073 * C108 +
              ((C15773 * C118 - C15769 * C125 + C15774 * C119 - C47358 * C126) *
                   C15775 +
               (C15773 * C128 - C15769 * C139 + C15774 * C129 - C47358 * C140) *
                   C15771 +
               (C15773 * C262 - C15769 * C272 + C15774 * C263 - C47358 * C273) *
                   C15776 +
               (C15773 * C275 - C15769 * C292 + C15774 * C276 - C47358 * C293) *
                   C47389) *
                  C47294 * C47091 * C47073 * C109 +
              ((C15769 * C126 - C15773 * C119 + C47358 * C130 - C15774 * C120) *
                   C15775 +
               (C15769 * C140 - C15773 * C129 + C47358 * C141 - C15774 * C131) *
                   C15771 +
               (C15769 * C273 - C15773 * C263 + C47358 * C283 - C15774 * C267) *
                   C15776 +
               (C15769 * C293 - C15773 * C276 + C47358 * C297 - C15774 * C284) *
                   C47389) *
                  C47294 * C47091 * C47073 * C110 +
              ((C15773 * C120 - C15769 * C130 + C15774 * C121 - C47358 * C132) *
                   C15775 +
               (C15773 * C131 - C15769 * C141 + C15774 * C133 - C47358 * C142) *
                   C15771 +
               (C15773 * C267 - C15769 * C283 + C15774 * C269 - C47358 * C287) *
                   C15776 +
               (C15773 * C284 - C15769 * C297 + C15774 * C288 - C47358 * C299) *
                   C47389) *
                  C47294 * C47091 * C47073 * C111 +
              ((C15769 * C132 - C15773 * C121 + C47358 * C134 - C15774 * C122) *
                   C15775 +
               (C15769 * C142 - C15773 * C133 + C47358 * C143 - C15774 * C135) *
                   C15771 +
               (C15769 * C287 - C15773 * C269 + C47358 * C559 - C15774 * C558) *
                   C15776 +
               (C15769 * C299 - C15773 * C288 + C47358 * C561 - C15774 * C560) *
                   C47389) *
                  C47294 * C47091 * C47073 * C112) +
         0.5 * std::pow(Pi, 2.5) *
             ((((C15769 * C124 - C15773 * C117 + C47358 * C125 -
                 C15774 * C118) *
                    C15775 +
                (C15769 * C138 - C15773 * C127 + C47358 * C139 -
                 C15774 * C128) *
                    C15771 +
                (C15924 - C15925 + C15926 - C15927) * C15776 +
                (C15928 - C15929 + C15930 - C15931) * C47389) *
                   C47294 * C47091 * C47410 +
               ((C15925 - C15924 + C15927 - C15926) * C15775 +
                (C15929 - C15928 + C15931 - C15930) * C15771 +
                (C15932 - C15933 + C15934 - C15935) * C15776 +
                (C15936 - C15937 + C15938 - C15939) * C47389) *
                   C47294 * C47091 * C47398 +
               ((C15933 - C15932 + C15935 - C15934) * C15775 +
                (C15937 - C15936 + C15939 - C15938) * C15771 +
                (C15769 * C1022 - C15773 * C1016 + C47358 * C1023 -
                 C15774 * C1017) *
                    C15776 +
                (C15769 * C1034 - C15773 * C1025 + C47358 * C1035 -
                 C15774 * C1026) *
                    C47389) *
                   C47294 * C47091 * C47371) *
                  C258 +
              (((C15773 * C118 - C15769 * C125 + C15774 * C119 -
                 C47358 * C126) *
                    C15775 +
                (C15773 * C128 - C15769 * C139 + C15774 * C129 -
                 C47358 * C140) *
                    C15771 +
                (C15940 - C15941 + C15942 - C15943) * C15776 +
                (C15944 - C15945 + C15946 - C15947) * C47389) *
                   C47294 * C47091 * C47410 +
               ((C15941 - C15940 + C15943 - C15942) * C15775 +
                (C15945 - C15944 + C15947 - C15946) * C15771 +
                (C15948 - C15949 + C15950 - C15951) * C15776 +
                (C15952 - C15953 + C15954 - C15955) * C47389) *
                   C47294 * C47091 * C47398 +
               ((C15949 - C15948 + C15951 - C15950) * C15775 +
                (C15953 - C15952 + C15955 - C15954) * C15771 +
                (C15773 * C1017 - C15769 * C1023 + C15774 * C1018 -
                 C47358 * C1024) *
                    C15776 +
                (C15773 * C1026 - C15769 * C1035 + C15774 * C1027 -
                 C47358 * C1036) *
                    C47389) *
                   C47294 * C47091 * C47371) *
                  C259 +
              (((C15769 * C126 - C15773 * C119 + C47358 * C130 -
                 C15774 * C120) *
                    C15775 +
                (C15769 * C140 - C15773 * C129 + C47358 * C141 -
                 C15774 * C131) *
                    C15771 +
                (C15956 - C15957 + C15958 - C15959) * C15776 +
                (C15960 - C15961 + C15962 - C15963) * C47389) *
                   C47294 * C47091 * C47410 +
               ((C15957 - C15956 + C15959 - C15958) * C15775 +
                (C15961 - C15960 + C15963 - C15962) * C15771 +
                (C15964 - C15965 + C15966 - C15967) * C15776 +
                (C15968 - C15969 + C15970 - C15971) * C47389) *
                   C47294 * C47091 * C47398 +
               ((C15965 - C15964 + C15967 - C15966) * C15775 +
                (C15969 - C15968 + C15971 - C15970) * C15771 +
                (C15769 * C1024 - C15773 * C1018 + C47358 * C1291 -
                 C15774 * C1290) *
                    C15776 +
                (C15769 * C1036 - C15773 * C1027 + C47358 * C1293 -
                 C15774 * C1292) *
                    C47389) *
                   C47294 * C47091 * C47371) *
                  C47365)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C15769 * C124 - C15773 * C117 + C47358 * C125 - C15774 * C118) *
                C15775 +
            (C15769 * C138 - C15773 * C127 + C47358 * C139 - C15774 * C128) *
                C15771 +
            (C15924 - C15925 + C15926 - C15927) * C15776 +
            (C15928 - C15929 + C15930 - C15931) * C47389) *
               C47294 * C47411 +
           ((C15773 * C414 - C15769 * C424 + C15774 * C415 - C47358 * C425) *
                C15775 +
            (C15773 * C427 - C15769 * C444 + C15774 * C428 - C47358 * C445) *
                C15771 +
            (C15773 * C812 - C15769 * C817 + C15774 * C813 - C47358 * C818) *
                C15776 +
            (C15773 * C820 - C15769 * C827 + C15774 * C821 - C47358 * C828) *
                C47389) *
               C47294 * C47400 +
           ((C15769 * C430 - C15773 * C417 + C47358 * C431 - C15774 * C418) *
                C15775 +
            (C15769 * C447 - C15773 * C433 + C47358 * C448 - C15774 * C434) *
                C15771 +
            (C15769 * C1159 - C15773 * C1150 + C47358 * C1160 -
             C15774 * C1151) *
                C15776 +
            (C15769 * C1177 - C15773 * C1162 + C47358 * C1178 -
             C15774 * C1163) *
                C47389) *
               C47294 * C47374) *
              C47073 * C258 +
          (((C15773 * C118 - C15769 * C125 + C15774 * C119 - C47358 * C126) *
                C15775 +
            (C15773 * C128 - C15769 * C139 + C15774 * C129 - C47358 * C140) *
                C15771 +
            (C15940 - C15941 + C15942 - C15943) * C15776 +
            (C15944 - C15945 + C15946 - C15947) * C47389) *
               C47294 * C47411 +
           ((C15769 * C425 - C15773 * C415 + C47358 * C426 - C15774 * C416) *
                C15775 +
            (C15769 * C445 - C15773 * C428 + C47358 * C446 - C15774 * C429) *
                C15771 +
            (C15769 * C818 - C15773 * C813 + C47358 * C819 - C15774 * C814) *
                C15776 +
            (C15769 * C828 - C15773 * C821 + C47358 * C829 - C15774 * C822) *
                C47389) *
               C47294 * C47400 +
           ((C15773 * C418 - C15769 * C431 + C15774 * C419 - C47358 * C432) *
                C15775 +
            (C15773 * C434 - C15769 * C448 + C15774 * C435 - C47358 * C449) *
                C15771 +
            (C15773 * C1151 - C15769 * C1160 + C15774 * C1152 -
             C47358 * C1161) *
                C15776 +
            (C15773 * C1163 - C15769 * C1178 + C15774 * C1164 -
             C47358 * C1179) *
                C47389) *
               C47294 * C47374) *
              C47073 * C259 +
          (((C15769 * C126 - C15773 * C119 + C47358 * C130 - C15774 * C120) *
                C15775 +
            (C15769 * C140 - C15773 * C129 + C47358 * C141 - C15774 * C131) *
                C15771 +
            (C15956 - C15957 + C15958 - C15959) * C15776 +
            (C15960 - C15961 + C15962 - C15963) * C47389) *
               C47294 * C47411 +
           ((C15773 * C416 - C15769 * C426 + C15774 * C420 - C47358 * C436) *
                C15775 +
            (C15773 * C429 - C15769 * C446 + C15774 * C437 - C47358 * C450) *
                C15771 +
            (C15773 * C814 - C15769 * C819 + C15774 * C815 - C47358 * C823) *
                C15776 +
            (C15773 * C822 - C15769 * C829 + C15774 * C824 - C47358 * C830) *
                C47389) *
               C47294 * C47400 +
           ((C15769 * C432 - C15773 * C419 + C47358 * C438 - C15774 * C421) *
                C15775 +
            (C15769 * C449 - C15773 * C435 + C47358 * C451 - C15774 * C439) *
                C15771 +
            (C15769 * C1161 - C15773 * C1152 + C47358 * C2015 -
             C15774 * C2014) *
                C15776 +
            (C15769 * C1179 - C15773 * C1164 + C47358 * C2017 -
             C15774 * C2016) *
                C47389) *
               C47294 * C47374) *
              C47073 * C47365)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C15769 * C124 - C15773 * C117 + C47358 * C125 - C15774 * C118) *
                C15775 +
            (C15769 * C138 - C15773 * C127 + C47358 * C139 - C15774 * C128) *
                C15771 +
            (C15924 - C15925 + C15926 - C15927) * C15776 +
            (C15928 - C15929 + C15930 - C15931) * C47389) *
               C47294 * C47091 * C942 +
           ((C15925 - C15924 + C15927 - C15926) * C15775 +
            (C15929 - C15928 + C15931 - C15930) * C15771 +
            (C15932 - C15933 + C15934 - C15935) * C15776 +
            (C15936 - C15937 + C15938 - C15939) * C47389) *
               C47294 * C47091 * C943 +
           ((C15933 - C15932 + C15935 - C15934) * C15775 +
            (C15937 - C15936 + C15939 - C15938) * C15771 +
            (C15769 * C1022 - C15773 * C1016 + C47358 * C1023 -
             C15774 * C1017) *
                C15776 +
            (C15769 * C1034 - C15773 * C1025 + C47358 * C1035 -
             C15774 * C1026) *
                C47389) *
               C47294 * C47091 * C47371) *
              C47407 +
          (((C15773 * C118 - C15769 * C125 + C15774 * C119 - C47358 * C126) *
                C15775 +
            (C15773 * C128 - C15769 * C139 + C15774 * C129 - C47358 * C140) *
                C15771 +
            (C15940 - C15941 + C15942 - C15943) * C15776 +
            (C15944 - C15945 + C15946 - C15947) * C47389) *
               C47294 * C47091 * C942 +
           ((C15941 - C15940 + C15943 - C15942) * C15775 +
            (C15945 - C15944 + C15947 - C15946) * C15771 +
            (C15948 - C15949 + C15950 - C15951) * C15776 +
            (C15952 - C15953 + C15954 - C15955) * C47389) *
               C47294 * C47091 * C943 +
           ((C15949 - C15948 + C15951 - C15950) * C15775 +
            (C15953 - C15952 + C15955 - C15954) * C15771 +
            (C15773 * C1017 - C15769 * C1023 + C15774 * C1018 -
             C47358 * C1024) *
                C15776 +
            (C15773 * C1026 - C15769 * C1035 + C15774 * C1027 -
             C47358 * C1036) *
                C47389) *
               C47294 * C47091 * C47371) *
              C47394 +
          (((C15769 * C126 - C15773 * C119 + C47358 * C130 - C15774 * C120) *
                C15775 +
            (C15769 * C140 - C15773 * C129 + C47358 * C141 - C15774 * C131) *
                C15771 +
            (C15956 - C15957 + C15958 - C15959) * C15776 +
            (C15960 - C15961 + C15962 - C15963) * C47389) *
               C47294 * C47091 * C942 +
           ((C15957 - C15956 + C15959 - C15958) * C15775 +
            (C15961 - C15960 + C15963 - C15962) * C15771 +
            (C15964 - C15965 + C15966 - C15967) * C15776 +
            (C15968 - C15969 + C15970 - C15971) * C47389) *
               C47294 * C47091 * C943 +
           ((C15965 - C15964 + C15967 - C15966) * C15775 +
            (C15969 - C15968 + C15971 - C15970) * C15771 +
            (C15769 * C1024 - C15773 * C1018 + C47358 * C1291 -
             C15774 * C1290) *
                C15776 +
            (C15769 * C1036 - C15773 * C1027 + C47358 * C1293 -
             C15774 * C1292) *
                C47389) *
               C47294 * C47091 * C47371) *
              C47365)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C15769 * C124 - C15773 * C117 + C47358 * C125 - C15774 * C118) *
               C15775 +
           (C15769 * C138 - C15773 * C127 + C47358 * C139 - C15774 * C128) *
               C15771 +
           (C15924 - C15925 + C15926 - C15927) * C15776 +
           (C15928 - C15929 + C15930 - C15931) * C47389) *
              C47294 * C47091 * C1010 +
          ((C15925 - C15924 + C15927 - C15926) * C15775 +
           (C15929 - C15928 + C15931 - C15930) * C15771 +
           (C15932 - C15933 + C15934 - C15935) * C15776 +
           (C15936 - C15937 + C15938 - C15939) * C47389) *
              C47294 * C47091 * C1011 +
          ((C15933 - C15932 + C15935 - C15934) * C15775 +
           (C15937 - C15936 + C15939 - C15938) * C15771 +
           (C16832 - C16833 + C16834 - C16835) * C15776 +
           (C16836 - C16837 + C16838 - C16839) * C47389) *
              C47294 * C47091 * C1012 +
          ((C16833 - C16832 + C16835 - C16834) * C15775 +
           (C16837 - C16836 + C16839 - C16838) * C15771 +
           (C16840 - C16841 + C16842 - C16843) * C15776 +
           (C16844 - C16845 + C16846 - C16847) * C47389) *
              C47294 * C47091 * C1013 +
          ((C16841 - C16840 + C16843 - C16842) * C15775 +
           (C16845 - C16844 + C16847 - C16846) * C15771 +
           (C15769 * C5639 - C15773 * C5637 + C47358 * C5640 - C15774 * C5638) *
               C15776 +
           (C15769 * C5643 - C15773 * C5641 + C47358 * C5644 - C15774 * C5642) *
               C47389) *
              C47294 * C47091 * C1014) *
         C47045) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C15769 * C124 - C15773 * C117 + C47358 * C125 - C15774 * C118) *
                C15775 +
            (C15769 * C138 - C15773 * C127 + C47358 * C139 - C15774 * C128) *
                C15771 +
            (C15924 - C15925 + C15926 - C15927) * C15776 +
            (C15928 - C15929 + C15930 - C15931) * C47389) *
               C47294 * C47411 +
           ((C15773 * C414 - C15769 * C424 + C15774 * C415 - C47358 * C425) *
                C15775 +
            (C15773 * C427 - C15769 * C444 + C15774 * C428 - C47358 * C445) *
                C15771 +
            (C16580 - C16581 + C16582 - C16583) * C15776 +
            (C16584 - C16585 + C16586 - C16587) * C47389) *
               C47294 * C47400 +
           ((C15769 * C430 - C15773 * C417 + C47358 * C431 - C15774 * C418) *
                C15775 +
            (C15769 * C447 - C15773 * C433 + C47358 * C448 - C15774 * C434) *
                C15771 +
            (C16994 - C16995 + C16996 - C16997) * C15776 +
            (C16998 - C16999 + C17000 - C17001) * C47389) *
               C47294 * C47374) *
              C942 +
          (((C15925 - C15924 + C15927 - C15926) * C15775 +
            (C15929 - C15928 + C15931 - C15930) * C15771 +
            (C15932 - C15933 + C15934 - C15935) * C15776 +
            (C15936 - C15937 + C15938 - C15939) * C47389) *
               C47294 * C47411 +
           ((C16581 - C16580 + C16583 - C16582) * C15775 +
            (C16585 - C16584 + C16587 - C16586) * C15771 +
            (C17002 - C17003 + C17004 - C17005) * C15776 +
            (C17006 - C17007 + C17008 - C17009) * C47389) *
               C47294 * C47400 +
           ((C16995 - C16994 + C16997 - C16996) * C15775 +
            (C16999 - C16998 + C17001 - C17000) * C15771 +
            (C17010 - C17011 + C17012 - C17013) * C15776 +
            (C17014 - C17015 + C17016 - C17017) * C47389) *
               C47294 * C47374) *
              C943 +
          (((C15933 - C15932 + C15935 - C15934) * C15775 +
            (C15937 - C15936 + C15939 - C15938) * C15771 +
            (C16832 - C16833 + C16834 - C16835) * C15776 +
            (C16836 - C16837 + C16838 - C16839) * C47389) *
               C47294 * C47411 +
           ((C17003 - C17002 + C17005 - C17004) * C15775 +
            (C17007 - C17006 + C17009 - C17008) * C15771 +
            (C15773 * C1542 - C15769 * C1545 + C15774 * C1543 -
             C47358 * C1546) *
                C15776 +
            (C15773 * C1548 - C15769 * C1551 + C15774 * C1549 -
             C47358 * C1552) *
                C47389) *
               C47294 * C47400 +
           ((C17011 - C17010 + C17013 - C17012) * C15775 +
            (C17015 - C17014 + C17017 - C17016) * C15771 +
            (C15769 * C5809 - C15773 * C5807 + C47358 * C5810 -
             C15774 * C5808) *
                C15776 +
            (C15769 * C5813 - C15773 * C5811 + C47358 * C5814 -
             C15774 * C5812) *
                C47389) *
               C47294 * C47374) *
              C47371) *
         C47045) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C15769 * C124 - C15773 * C117 + C47358 * C125 - C15774 * C118) *
                C15775 +
            (C15769 * C138 - C15773 * C127 + C47358 * C139 - C15774 * C128) *
                C15771 +
            (C15924 - C15925 + C15926 - C15927) * C15776 +
            (C15928 - C15929 + C15930 - C15931) * C47389) *
               C47294 * C1664 +
           ((C15773 * C414 - C15769 * C424 + C15774 * C415 - C47358 * C425) *
                C15775 +
            (C15773 * C427 - C15769 * C444 + C15774 * C428 - C47358 * C445) *
                C15771 +
            (C16580 - C16581 + C16582 - C16583) * C15776 +
            (C16584 - C16585 + C16586 - C16587) * C47389) *
               C47294 * C1665 +
           ((C15769 * C430 - C15773 * C417 + C47358 * C431 - C15774 * C418) *
                C15775 +
            (C15769 * C447 - C15773 * C433 + C47358 * C448 - C15774 * C434) *
                C15771 +
            (C16994 - C16995 + C16996 - C16997) * C15776 +
            (C16998 - C16999 + C17000 - C17001) * C47389) *
               C47294 * C47374) *
              C47073 * C47407 +
          (((C15773 * C118 - C15769 * C125 + C15774 * C119 - C47358 * C126) *
                C15775 +
            (C15773 * C128 - C15769 * C139 + C15774 * C129 - C47358 * C140) *
                C15771 +
            (C15940 - C15941 + C15942 - C15943) * C15776 +
            (C15944 - C15945 + C15946 - C15947) * C47389) *
               C47294 * C1664 +
           ((C15769 * C425 - C15773 * C415 + C47358 * C426 - C15774 * C416) *
                C15775 +
            (C15769 * C445 - C15773 * C428 + C47358 * C446 - C15774 * C429) *
                C15771 +
            (C16588 - C16589 + C16590 - C16591) * C15776 +
            (C16592 - C16593 + C16594 - C16595) * C47389) *
               C47294 * C1665 +
           ((C15773 * C418 - C15769 * C431 + C15774 * C419 - C47358 * C432) *
                C15775 +
            (C15773 * C434 - C15769 * C448 + C15774 * C435 - C47358 * C449) *
                C15771 +
            (C15773 * C1151 - C15769 * C1160 + C15774 * C1152 -
             C47358 * C1161) *
                C15776 +
            (C15773 * C1163 - C15769 * C1178 + C15774 * C1164 -
             C47358 * C1179) *
                C47389) *
               C47294 * C47374) *
              C47073 * C47394 +
          (((C15769 * C126 - C15773 * C119 + C47358 * C130 - C15774 * C120) *
                C15775 +
            (C15769 * C140 - C15773 * C129 + C47358 * C141 - C15774 * C131) *
                C15771 +
            (C15956 - C15957 + C15958 - C15959) * C15776 +
            (C15960 - C15961 + C15962 - C15963) * C47389) *
               C47294 * C1664 +
           ((C15773 * C416 - C15769 * C426 + C15774 * C420 - C47358 * C436) *
                C15775 +
            (C15773 * C429 - C15769 * C446 + C15774 * C437 - C47358 * C450) *
                C15771 +
            (C16596 - C16597 + C16598 - C16599) * C15776 +
            (C16600 - C16601 + C16602 - C16603) * C47389) *
               C47294 * C1665 +
           ((C15769 * C432 - C15773 * C419 + C47358 * C438 - C15774 * C421) *
                C15775 +
            (C15769 * C449 - C15773 * C435 + C47358 * C451 - C15774 * C439) *
                C15771 +
            (C15769 * C1161 - C15773 * C1152 + C47358 * C2015 -
             C15774 * C2014) *
                C15776 +
            (C15769 * C1179 - C15773 * C1164 + C47358 * C2017 -
             C15774 * C2016) *
                C47389) *
               C47294 * C47374) *
              C47073 * C47365)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C15769 * C124 - C15773 * C117 + C47358 * C125 - C15774 * C118) *
                C15775 +
            (C15769 * C138 - C15773 * C127 + C47358 * C139 - C15774 * C128) *
                C15771 +
            (C15924 - C15925 + C15926 - C15927) * C15776 +
            (C15928 - C15929 + C15930 - C15931) * C47389) *
               C47294 * C1664 +
           ((C15773 * C414 - C15769 * C424 + C15774 * C415 - C47358 * C425) *
                C15775 +
            (C15773 * C427 - C15769 * C444 + C15774 * C428 - C47358 * C445) *
                C15771 +
            (C16580 - C16581 + C16582 - C16583) * C15776 +
            (C16584 - C16585 + C16586 - C16587) * C47389) *
               C47294 * C1665 +
           ((C15769 * C430 - C15773 * C417 + C47358 * C431 - C15774 * C418) *
                C15775 +
            (C15769 * C447 - C15773 * C433 + C47358 * C448 - C15774 * C434) *
                C15771 +
            (C16994 - C16995 + C16996 - C16997) * C15776 +
            (C16998 - C16999 + C17000 - C17001) * C47389) *
               C47294 * C47374) *
              C47410 +
          (((C15925 - C15924 + C15927 - C15926) * C15775 +
            (C15929 - C15928 + C15931 - C15930) * C15771 +
            (C15932 - C15933 + C15934 - C15935) * C15776 +
            (C15936 - C15937 + C15938 - C15939) * C47389) *
               C47294 * C1664 +
           ((C16581 - C16580 + C16583 - C16582) * C15775 +
            (C16585 - C16584 + C16587 - C16586) * C15771 +
            (C17002 - C17003 + C17004 - C17005) * C15776 +
            (C17006 - C17007 + C17008 - C17009) * C47389) *
               C47294 * C1665 +
           ((C16995 - C16994 + C16997 - C16996) * C15775 +
            (C16999 - C16998 + C17001 - C17000) * C15771 +
            (C17010 - C17011 + C17012 - C17013) * C15776 +
            (C17014 - C17015 + C17016 - C17017) * C47389) *
               C47294 * C47374) *
              C47398 +
          (((C15933 - C15932 + C15935 - C15934) * C15775 +
            (C15937 - C15936 + C15939 - C15938) * C15771 +
            (C16832 - C16833 + C16834 - C16835) * C15776 +
            (C16836 - C16837 + C16838 - C16839) * C47389) *
               C47294 * C1664 +
           ((C17003 - C17002 + C17005 - C17004) * C15775 +
            (C17007 - C17006 + C17009 - C17008) * C15771 +
            (C17488 - C17489 + C17490 - C17491) * C15776 +
            (C17492 - C17493 + C17494 - C17495) * C47389) *
               C47294 * C1665 +
           ((C17011 - C17010 + C17013 - C17012) * C15775 +
            (C17015 - C17014 + C17017 - C17016) * C15771 +
            (C15769 * C5809 - C15773 * C5807 + C47358 * C5810 -
             C15774 * C5808) *
                C15776 +
            (C15769 * C5813 - C15773 * C5811 + C47358 * C5814 -
             C15774 * C5812) *
                C47389) *
               C47294 * C47374) *
              C47371) *
         C47045) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C15769 * C124 - C15773 * C117 + C47358 * C125 - C15774 * C118) *
               C15775 +
           (C15769 * C138 - C15773 * C127 + C47358 * C139 - C15774 * C128) *
               C15771 +
           (C15924 - C15925 + C15926 - C15927) * C15776 +
           (C15928 - C15929 + C15930 - C15931) * C47389) *
              C47294 * C1839 +
          ((C15773 * C414 - C15769 * C424 + C15774 * C415 - C47358 * C425) *
               C15775 +
           (C15773 * C427 - C15769 * C444 + C15774 * C428 - C47358 * C445) *
               C15771 +
           (C16580 - C16581 + C16582 - C16583) * C15776 +
           (C16584 - C16585 + C16586 - C16587) * C47389) *
              C47294 * C1840 +
          ((C15769 * C430 - C15773 * C417 + C47358 * C431 - C15774 * C418) *
               C15775 +
           (C15769 * C447 - C15773 * C433 + C47358 * C448 - C15774 * C434) *
               C15771 +
           (C16994 - C16995 + C16996 - C16997) * C15776 +
           (C16998 - C16999 + C17000 - C17001) * C47389) *
              C47294 * C1841 +
          ((C15773 * C1844 - C15769 * C1850 + C15774 * C1845 - C47358 * C1851) *
               C15775 +
           (C15773 * C1853 - C15769 * C1862 + C15774 * C1854 - C47358 * C1863) *
               C15771 +
           (C15773 * C2222 - C15769 * C2225 + C15774 * C2223 - C47358 * C2226) *
               C15776 +
           (C15773 * C2228 - C15769 * C2231 + C15774 * C2229 - C47358 * C2232) *
               C47389) *
              C47294 * C1842 +
          ((C15769 * C1856 - C15773 * C1847 + C47358 * C1857 - C15774 * C1848) *
               C15775 +
           (C15769 * C1865 - C15773 * C1859 + C47358 * C1866 - C15774 * C1860) *
               C15771 +
           (C15769 * C6701 - C15773 * C6699 + C47358 * C6702 - C15774 * C6700) *
               C15776 +
           (C15769 * C6705 - C15773 * C6703 + C47358 * C6706 - C15774 * C6704) *
               C47389) *
              C47294 * C1843) *
         C47073 * C47045) /
            (p * q * std::sqrt(p + q));
    d2ee[88] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C15769 * C124 - C15773 * C117 + C47358 * C125 - C15774 * C118) *
                 C15775 +
             (C15769 * C138 - C15773 * C127 + C47358 * C139 - C15774 * C128) *
                 C15771 +
             (C15924 - C15925 + C15926 - C15927) * C15776 +
             (C15928 - C15929 + C15930 - C15931) * C47389) *
                C47294 * C47340 +
            ((C15773 * C414 - C15769 * C424 + C15774 * C415 - C47358 * C425) *
                 C15775 +
             (C15773 * C427 - C15769 * C444 + C15774 * C428 - C47358 * C445) *
                 C15771 +
             (C16580 - C16581 + C16582 - C16583) * C15776 +
             (C16584 - C16585 + C16586 - C16587) * C47389) *
                C47294 * C47178) *
               C942 +
           (((C15925 - C15924 + C15927 - C15926) * C15775 +
             (C15929 - C15928 + C15931 - C15930) * C15771 +
             (C15932 - C15933 + C15934 - C15935) * C15776 +
             (C15936 - C15937 + C15938 - C15939) * C47389) *
                C47294 * C47340 +
            ((C16581 - C16580 + C16583 - C16582) * C15775 +
             (C16585 - C16584 + C16587 - C16586) * C15771 +
             (C17002 - C17003 + C17004 - C17005) * C15776 +
             (C17006 - C17007 + C17008 - C17009) * C47389) *
                C47294 * C47178) *
               C943 +
           (((C15933 - C15932 + C15935 - C15934) * C15775 +
             (C15937 - C15936 + C15939 - C15938) * C15771 +
             (C16832 - C16833 + C16834 - C16835) * C15776 +
             (C16836 - C16837 + C16838 - C16839) * C47389) *
                C47294 * C47340 +
            ((C17003 - C17002 + C17005 - C17004) * C15775 +
             (C17007 - C17006 + C17009 - C17008) * C15771 +
             (C15773 * C1542 - C15769 * C1545 + C15774 * C1543 -
              C47358 * C1546) *
                 C15776 +
             (C15773 * C1548 - C15769 * C1551 + C15774 * C1549 -
              C47358 * C1552) *
                 C47389) *
                C47294 * C47178) *
               C47371) *
              C47325 +
          ((((C15773 * C118 - C15769 * C125 + C15774 * C119 - C47358 * C126) *
                 C15775 +
             (C15773 * C128 - C15769 * C139 + C15774 * C129 - C47358 * C140) *
                 C15771 +
             (C15940 - C15941 + C15942 - C15943) * C15776 +
             (C15944 - C15945 + C15946 - C15947) * C47389) *
                C47294 * C47340 +
            ((C15769 * C425 - C15773 * C415 + C47358 * C426 - C15774 * C416) *
                 C15775 +
             (C15769 * C445 - C15773 * C428 + C47358 * C446 - C15774 * C429) *
                 C15771 +
             (C16588 - C16589 + C16590 - C16591) * C15776 +
             (C16592 - C16593 + C16594 - C16595) * C47389) *
                C47294 * C47178) *
               C942 +
           (((C15941 - C15940 + C15943 - C15942) * C15775 +
             (C15945 - C15944 + C15947 - C15946) * C15771 +
             (C15948 - C15949 + C15950 - C15951) * C15776 +
             (C15952 - C15953 + C15954 - C15955) * C47389) *
                C47294 * C47340 +
            ((C16589 - C16588 + C16591 - C16590) * C15775 +
             (C16593 - C16592 + C16595 - C16594) * C15771 +
             (C17350 - C17351 + C17352 - C17353) * C15776 +
             (C17354 - C17355 + C17356 - C17357) * C47389) *
                C47294 * C47178) *
               C943 +
           (((C15949 - C15948 + C15951 - C15950) * C15775 +
             (C15953 - C15952 + C15955 - C15954) * C15771 +
             (C17148 - C17149 + C17150 - C17151) * C15776 +
             (C17152 - C17153 + C17154 - C17155) * C47389) *
                C47294 * C47340 +
            ((C17351 - C17350 + C17353 - C17352) * C15775 +
             (C17355 - C17354 + C17357 - C17356) * C15771 +
             (C15769 * C1546 - C15773 * C1543 + C47358 * C1547 -
              C15774 * C1544) *
                 C15776 +
             (C15769 * C1552 - C15773 * C1549 + C47358 * C1553 -
              C15774 * C1550) *
                 C47389) *
                C47294 * C47178) *
               C47371) *
              C47056)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C15769 * C124 - C15773 * C117 + C47358 * C125 - C15774 * C118) *
                C15775 +
            (C15769 * C138 - C15773 * C127 + C47358 * C139 - C15774 * C128) *
                C15771 +
            (C15924 - C15925 + C15926 - C15927) * C15776 +
            (C15928 - C15929 + C15930 - C15931) * C47389) *
               C47294 * C47340 +
           ((C15773 * C414 - C15769 * C424 + C15774 * C415 - C47358 * C425) *
                C15775 +
            (C15773 * C427 - C15769 * C444 + C15774 * C428 - C47358 * C445) *
                C15771 +
            (C15773 * C812 - C15769 * C817 + C15774 * C813 - C47358 * C818) *
                C15776 +
            (C15773 * C820 - C15769 * C827 + C15774 * C821 - C47358 * C828) *
                C47389) *
               C47294 * C47178) *
              C47073 * C554 +
          (((C15773 * C118 - C15769 * C125 + C15774 * C119 - C47358 * C126) *
                C15775 +
            (C15773 * C128 - C15769 * C139 + C15774 * C129 - C47358 * C140) *
                C15771 +
            (C15940 - C15941 + C15942 - C15943) * C15776 +
            (C15944 - C15945 + C15946 - C15947) * C47389) *
               C47294 * C47340 +
           ((C15769 * C425 - C15773 * C415 + C47358 * C426 - C15774 * C416) *
                C15775 +
            (C15769 * C445 - C15773 * C428 + C47358 * C446 - C15774 * C429) *
                C15771 +
            (C15769 * C818 - C15773 * C813 + C47358 * C819 - C15774 * C814) *
                C15776 +
            (C15769 * C828 - C15773 * C821 + C47358 * C829 - C15774 * C822) *
                C47389) *
               C47294 * C47178) *
              C47073 * C555 +
          (((C15769 * C126 - C15773 * C119 + C47358 * C130 - C15774 * C120) *
                C15775 +
            (C15769 * C140 - C15773 * C129 + C47358 * C141 - C15774 * C131) *
                C15771 +
            (C15956 - C15957 + C15958 - C15959) * C15776 +
            (C15960 - C15961 + C15962 - C15963) * C47389) *
               C47294 * C47340 +
           ((C15773 * C416 - C15769 * C426 + C15774 * C420 - C47358 * C436) *
                C15775 +
            (C15773 * C429 - C15769 * C446 + C15774 * C437 - C47358 * C450) *
                C15771 +
            (C15773 * C814 - C15769 * C819 + C15774 * C815 - C47358 * C823) *
                C15776 +
            (C15773 * C822 - C15769 * C829 + C15774 * C824 - C47358 * C830) *
                C47389) *
               C47294 * C47178) *
              C47073 * C556 +
          (((C15773 * C120 - C15769 * C130 + C15774 * C121 - C47358 * C132) *
                C15775 +
            (C15773 * C131 - C15769 * C141 + C15774 * C133 - C47358 * C142) *
                C15771 +
            (C16248 - C16249 + C16250 - C16251) * C15776 +
            (C16252 - C16253 + C16254 - C16255) * C47389) *
               C47294 * C47340 +
           ((C15769 * C436 - C15773 * C420 + C47358 * C440 - C15774 * C422) *
                C15775 +
            (C15769 * C450 - C15773 * C437 + C47358 * C452 - C15774 * C441) *
                C15771 +
            (C15769 * C823 - C15773 * C815 + C47358 * C825 - C15774 * C816) *
                C15776 +
            (C15769 * C830 - C15773 * C824 + C47358 * C831 - C15774 * C826) *
                C47389) *
               C47294 * C47178) *
              C47073 * C47375)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C15769 * C124 - C15773 * C117 + C47358 * C125 - C15774 * C118) *
                C15775 +
            (C15769 * C138 - C15773 * C127 + C47358 * C139 - C15774 * C128) *
                C15771 +
            (C15924 - C15925 + C15926 - C15927) * C15776 +
            (C15928 - C15929 + C15930 - C15931) * C47389) *
               C47294 * C2116 +
           ((C15773 * C414 - C15769 * C424 + C15774 * C415 - C47358 * C425) *
                C15775 +
            (C15773 * C427 - C15769 * C444 + C15774 * C428 - C47358 * C445) *
                C15771 +
            (C16580 - C16581 + C16582 - C16583) * C15776 +
            (C16584 - C16585 + C16586 - C16587) * C47389) *
               C47294 * C2117 +
           ((C15769 * C430 - C15773 * C417 + C47358 * C431 - C15774 * C418) *
                C15775 +
            (C15769 * C447 - C15773 * C433 + C47358 * C448 - C15774 * C434) *
                C15771 +
            (C16994 - C16995 + C16996 - C16997) * C15776 +
            (C16998 - C16999 + C17000 - C17001) * C47389) *
               C47294 * C2118 +
           ((C15773 * C1844 - C15769 * C1850 + C15774 * C1845 -
             C47358 * C1851) *
                C15775 +
            (C15773 * C1853 - C15769 * C1862 + C15774 * C1854 -
             C47358 * C1863) *
                C15771 +
            (C15773 * C2222 - C15769 * C2225 + C15774 * C2223 -
             C47358 * C2226) *
                C15776 +
            (C15773 * C2228 - C15769 * C2231 + C15774 * C2229 -
             C47358 * C2232) *
                C47389) *
               C47294 * C47387) *
              C47073 * C47325 +
          (((C15773 * C118 - C15769 * C125 + C15774 * C119 - C47358 * C126) *
                C15775 +
            (C15773 * C128 - C15769 * C139 + C15774 * C129 - C47358 * C140) *
                C15771 +
            (C15940 - C15941 + C15942 - C15943) * C15776 +
            (C15944 - C15945 + C15946 - C15947) * C47389) *
               C47294 * C2116 +
           ((C15769 * C425 - C15773 * C415 + C47358 * C426 - C15774 * C416) *
                C15775 +
            (C15769 * C445 - C15773 * C428 + C47358 * C446 - C15774 * C429) *
                C15771 +
            (C16588 - C16589 + C16590 - C16591) * C15776 +
            (C16592 - C16593 + C16594 - C16595) * C47389) *
               C47294 * C2117 +
           ((C15773 * C418 - C15769 * C431 + C15774 * C419 - C47358 * C432) *
                C15775 +
            (C15773 * C434 - C15769 * C448 + C15774 * C435 - C47358 * C449) *
                C15771 +
            (C18064 - C18065 + C18066 - C18067) * C15776 +
            (C18068 - C18069 + C18070 - C18071) * C47389) *
               C47294 * C2118 +
           ((C15769 * C1851 - C15773 * C1845 + C47358 * C1852 -
             C15774 * C1846) *
                C15775 +
            (C15769 * C1863 - C15773 * C1854 + C47358 * C1864 -
             C15774 * C1855) *
                C15771 +
            (C15769 * C2226 - C15773 * C2223 + C47358 * C2227 -
             C15774 * C2224) *
                C15776 +
            (C15769 * C2232 - C15773 * C2229 + C47358 * C2233 -
             C15774 * C2230) *
                C47389) *
               C47294 * C47387) *
              C47073 * C47056)) /
            (p * q * std::sqrt(p + q));
    d2ee[89] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C15769 * C124 - C15773 * C117 + C47358 * C125 - C15774 * C118) *
                C15775 +
            (C15769 * C138 - C15773 * C127 + C47358 * C139 - C15774 * C128) *
                C15771 +
            (C15924 - C15925 + C15926 - C15927) * C15776 +
            (C15928 - C15929 + C15930 - C15931) * C47389) *
               C47294 * C47091 * C47410 +
           ((C15925 - C15924 + C15927 - C15926) * C15775 +
            (C15929 - C15928 + C15931 - C15930) * C15771 +
            (C15932 - C15933 + C15934 - C15935) * C15776 +
            (C15936 - C15937 + C15938 - C15939) * C47389) *
               C47294 * C47091 * C47398 +
           ((C15933 - C15932 + C15935 - C15934) * C15775 +
            (C15937 - C15936 + C15939 - C15938) * C15771 +
            (C15769 * C1022 - C15773 * C1016 + C47358 * C1023 -
             C15774 * C1017) *
                C15776 +
            (C15769 * C1034 - C15773 * C1025 + C47358 * C1035 -
             C15774 * C1026) *
                C47389) *
               C47294 * C47091 * C47371) *
              C258 +
          (((C15773 * C118 - C15769 * C125 + C15774 * C119 - C47358 * C126) *
                C15775 +
            (C15773 * C128 - C15769 * C139 + C15774 * C129 - C47358 * C140) *
                C15771 +
            (C15940 - C15941 + C15942 - C15943) * C15776 +
            (C15944 - C15945 + C15946 - C15947) * C47389) *
               C47294 * C47091 * C47410 +
           ((C15941 - C15940 + C15943 - C15942) * C15775 +
            (C15945 - C15944 + C15947 - C15946) * C15771 +
            (C15948 - C15949 + C15950 - C15951) * C15776 +
            (C15952 - C15953 + C15954 - C15955) * C47389) *
               C47294 * C47091 * C47398 +
           ((C15949 - C15948 + C15951 - C15950) * C15775 +
            (C15953 - C15952 + C15955 - C15954) * C15771 +
            (C15773 * C1017 - C15769 * C1023 + C15774 * C1018 -
             C47358 * C1024) *
                C15776 +
            (C15773 * C1026 - C15769 * C1035 + C15774 * C1027 -
             C47358 * C1036) *
                C47389) *
               C47294 * C47091 * C47371) *
              C259 +
          (((C15769 * C126 - C15773 * C119 + C47358 * C130 - C15774 * C120) *
                C15775 +
            (C15769 * C140 - C15773 * C129 + C47358 * C141 - C15774 * C131) *
                C15771 +
            (C15956 - C15957 + C15958 - C15959) * C15776 +
            (C15960 - C15961 + C15962 - C15963) * C47389) *
               C47294 * C47091 * C47410 +
           ((C15957 - C15956 + C15959 - C15958) * C15775 +
            (C15961 - C15960 + C15963 - C15962) * C15771 +
            (C15964 - C15965 + C15966 - C15967) * C15776 +
            (C15968 - C15969 + C15970 - C15971) * C47389) *
               C47294 * C47091 * C47398 +
           ((C15965 - C15964 + C15967 - C15966) * C15775 +
            (C15969 - C15968 + C15971 - C15970) * C15771 +
            (C15769 * C1024 - C15773 * C1018 + C47358 * C1291 -
             C15774 * C1290) *
                C15776 +
            (C15769 * C1036 - C15773 * C1027 + C47358 * C1293 -
             C15774 * C1292) *
                C47389) *
               C47294 * C47091 * C47371) *
              C47365)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C15769 * C124 - C15773 * C117 + C47358 * C125 - C15774 * C118) *
               C15775 +
           (C15769 * C138 - C15773 * C127 + C47358 * C139 - C15774 * C128) *
               C15771 +
           (C15769 * C271 - C15773 * C261 + C47358 * C272 - C15774 * C262) *
               C15776 +
           (C15769 * C291 - C15773 * C274 + C47358 * C292 - C15774 * C275) *
               C47389) *
              C47294 * C47091 * C47073 * C108 +
          ((C15773 * C118 - C15769 * C125 + C15774 * C119 - C47358 * C126) *
               C15775 +
           (C15773 * C128 - C15769 * C139 + C15774 * C129 - C47358 * C140) *
               C15771 +
           (C15773 * C262 - C15769 * C272 + C15774 * C263 - C47358 * C273) *
               C15776 +
           (C15773 * C275 - C15769 * C292 + C15774 * C276 - C47358 * C293) *
               C47389) *
              C47294 * C47091 * C47073 * C109 +
          ((C15769 * C126 - C15773 * C119 + C47358 * C130 - C15774 * C120) *
               C15775 +
           (C15769 * C140 - C15773 * C129 + C47358 * C141 - C15774 * C131) *
               C15771 +
           (C15769 * C273 - C15773 * C263 + C47358 * C283 - C15774 * C267) *
               C15776 +
           (C15769 * C293 - C15773 * C276 + C47358 * C297 - C15774 * C284) *
               C47389) *
              C47294 * C47091 * C47073 * C110 +
          ((C15773 * C120 - C15769 * C130 + C15774 * C121 - C47358 * C132) *
               C15775 +
           (C15773 * C131 - C15769 * C141 + C15774 * C133 - C47358 * C142) *
               C15771 +
           (C15773 * C267 - C15769 * C283 + C15774 * C269 - C47358 * C287) *
               C15776 +
           (C15773 * C284 - C15769 * C297 + C15774 * C288 - C47358 * C299) *
               C47389) *
              C47294 * C47091 * C47073 * C111 +
          ((C15769 * C132 - C15773 * C121 + C47358 * C134 - C15774 * C122) *
               C15775 +
           (C15769 * C142 - C15773 * C133 + C47358 * C143 - C15774 * C135) *
               C15771 +
           (C15769 * C287 - C15773 * C269 + C47358 * C559 - C15774 * C558) *
               C15776 +
           (C15769 * C299 - C15773 * C288 + C47358 * C561 - C15774 * C560) *
               C47389) *
              C47294 * C47091 * C47073 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C15769 * C124 - C15773 * C117 + C47358 * C125 - C15774 * C118) *
                C15775 +
            (C15769 * C138 - C15773 * C127 + C47358 * C139 - C15774 * C128) *
                C15771 +
            (C15924 - C15925 + C15926 - C15927) * C15776 +
            (C15928 - C15929 + C15930 - C15931) * C47389) *
               C47294 * C47091 * C942 +
           ((C15925 - C15924 + C15927 - C15926) * C15775 +
            (C15929 - C15928 + C15931 - C15930) * C15771 +
            (C15932 - C15933 + C15934 - C15935) * C15776 +
            (C15936 - C15937 + C15938 - C15939) * C47389) *
               C47294 * C47091 * C943 +
           ((C15933 - C15932 + C15935 - C15934) * C15775 +
            (C15937 - C15936 + C15939 - C15938) * C15771 +
            (C15769 * C1022 - C15773 * C1016 + C47358 * C1023 -
             C15774 * C1017) *
                C15776 +
            (C15769 * C1034 - C15773 * C1025 + C47358 * C1035 -
             C15774 * C1026) *
                C47389) *
               C47294 * C47091 * C47371) *
              C47407 +
          (((C15773 * C118 - C15769 * C125 + C15774 * C119 - C47358 * C126) *
                C15775 +
            (C15773 * C128 - C15769 * C139 + C15774 * C129 - C47358 * C140) *
                C15771 +
            (C15940 - C15941 + C15942 - C15943) * C15776 +
            (C15944 - C15945 + C15946 - C15947) * C47389) *
               C47294 * C47091 * C942 +
           ((C15941 - C15940 + C15943 - C15942) * C15775 +
            (C15945 - C15944 + C15947 - C15946) * C15771 +
            (C15948 - C15949 + C15950 - C15951) * C15776 +
            (C15952 - C15953 + C15954 - C15955) * C47389) *
               C47294 * C47091 * C943 +
           ((C15949 - C15948 + C15951 - C15950) * C15775 +
            (C15953 - C15952 + C15955 - C15954) * C15771 +
            (C15773 * C1017 - C15769 * C1023 + C15774 * C1018 -
             C47358 * C1024) *
                C15776 +
            (C15773 * C1026 - C15769 * C1035 + C15774 * C1027 -
             C47358 * C1036) *
                C47389) *
               C47294 * C47091 * C47371) *
              C47394 +
          (((C15769 * C126 - C15773 * C119 + C47358 * C130 - C15774 * C120) *
                C15775 +
            (C15769 * C140 - C15773 * C129 + C47358 * C141 - C15774 * C131) *
                C15771 +
            (C15956 - C15957 + C15958 - C15959) * C15776 +
            (C15960 - C15961 + C15962 - C15963) * C47389) *
               C47294 * C47091 * C942 +
           ((C15957 - C15956 + C15959 - C15958) * C15775 +
            (C15961 - C15960 + C15963 - C15962) * C15771 +
            (C15964 - C15965 + C15966 - C15967) * C15776 +
            (C15968 - C15969 + C15970 - C15971) * C47389) *
               C47294 * C47091 * C943 +
           ((C15965 - C15964 + C15967 - C15966) * C15775 +
            (C15969 - C15968 + C15971 - C15970) * C15771 +
            (C15769 * C1024 - C15773 * C1018 + C47358 * C1291 -
             C15774 * C1290) *
                C15776 +
            (C15769 * C1036 - C15773 * C1027 + C47358 * C1293 -
             C15774 * C1292) *
                C47389) *
               C47294 * C47091 * C47371) *
              C47365)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C15769 * C124 - C15773 * C117 + C47358 * C125 - C15774 * C118) *
               C15775 +
           (C15769 * C138 - C15773 * C127 + C47358 * C139 - C15774 * C128) *
               C15771 +
           (C15924 - C15925 + C15926 - C15927) * C15776 +
           (C15928 - C15929 + C15930 - C15931) * C47389) *
              C47294 * C47091 * C1010 +
          ((C15925 - C15924 + C15927 - C15926) * C15775 +
           (C15929 - C15928 + C15931 - C15930) * C15771 +
           (C15932 - C15933 + C15934 - C15935) * C15776 +
           (C15936 - C15937 + C15938 - C15939) * C47389) *
              C47294 * C47091 * C1011 +
          ((C15933 - C15932 + C15935 - C15934) * C15775 +
           (C15937 - C15936 + C15939 - C15938) * C15771 +
           (C16832 - C16833 + C16834 - C16835) * C15776 +
           (C16836 - C16837 + C16838 - C16839) * C47389) *
              C47294 * C47091 * C1012 +
          ((C16833 - C16832 + C16835 - C16834) * C15775 +
           (C16837 - C16836 + C16839 - C16838) * C15771 +
           (C16840 - C16841 + C16842 - C16843) * C15776 +
           (C16844 - C16845 + C16846 - C16847) * C47389) *
              C47294 * C47091 * C1013 +
          ((C16841 - C16840 + C16843 - C16842) * C15775 +
           (C16845 - C16844 + C16847 - C16846) * C15771 +
           (C15769 * C5639 - C15773 * C5637 + C47358 * C5640 - C15774 * C5638) *
               C15776 +
           (C15769 * C5643 - C15773 * C5641 + C47358 * C5644 - C15774 * C5642) *
               C47389) *
              C47294 * C47091 * C1014) *
         C47045) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C15769 * C124 - C15773 * C117 + C47358 * C125 - C15774 * C118) *
                C15775 +
            (C15769 * C138 - C15773 * C127 + C47358 * C139 - C15774 * C128) *
                C15771 +
            (C15924 - C15925 + C15926 - C15927) * C15776 +
            (C15928 - C15929 + C15930 - C15931) * C47389) *
               C47294 * C1664 +
           ((C15773 * C414 - C15769 * C424 + C15774 * C415 - C47358 * C425) *
                C15775 +
            (C15773 * C427 - C15769 * C444 + C15774 * C428 - C47358 * C445) *
                C15771 +
            (C16580 - C16581 + C16582 - C16583) * C15776 +
            (C16584 - C16585 + C16586 - C16587) * C47389) *
               C47294 * C1665 +
           ((C15769 * C430 - C15773 * C417 + C47358 * C431 - C15774 * C418) *
                C15775 +
            (C15769 * C447 - C15773 * C433 + C47358 * C448 - C15774 * C434) *
                C15771 +
            (C16994 - C16995 + C16996 - C16997) * C15776 +
            (C16998 - C16999 + C17000 - C17001) * C47389) *
               C47294 * C47374) *
              C47073 * C47407 +
          (((C15773 * C118 - C15769 * C125 + C15774 * C119 - C47358 * C126) *
                C15775 +
            (C15773 * C128 - C15769 * C139 + C15774 * C129 - C47358 * C140) *
                C15771 +
            (C15940 - C15941 + C15942 - C15943) * C15776 +
            (C15944 - C15945 + C15946 - C15947) * C47389) *
               C47294 * C1664 +
           ((C15769 * C425 - C15773 * C415 + C47358 * C426 - C15774 * C416) *
                C15775 +
            (C15769 * C445 - C15773 * C428 + C47358 * C446 - C15774 * C429) *
                C15771 +
            (C16588 - C16589 + C16590 - C16591) * C15776 +
            (C16592 - C16593 + C16594 - C16595) * C47389) *
               C47294 * C1665 +
           ((C15773 * C418 - C15769 * C431 + C15774 * C419 - C47358 * C432) *
                C15775 +
            (C15773 * C434 - C15769 * C448 + C15774 * C435 - C47358 * C449) *
                C15771 +
            (C15773 * C1151 - C15769 * C1160 + C15774 * C1152 -
             C47358 * C1161) *
                C15776 +
            (C15773 * C1163 - C15769 * C1178 + C15774 * C1164 -
             C47358 * C1179) *
                C47389) *
               C47294 * C47374) *
              C47073 * C47394 +
          (((C15769 * C126 - C15773 * C119 + C47358 * C130 - C15774 * C120) *
                C15775 +
            (C15769 * C140 - C15773 * C129 + C47358 * C141 - C15774 * C131) *
                C15771 +
            (C15956 - C15957 + C15958 - C15959) * C15776 +
            (C15960 - C15961 + C15962 - C15963) * C47389) *
               C47294 * C1664 +
           ((C15773 * C416 - C15769 * C426 + C15774 * C420 - C47358 * C436) *
                C15775 +
            (C15773 * C429 - C15769 * C446 + C15774 * C437 - C47358 * C450) *
                C15771 +
            (C16596 - C16597 + C16598 - C16599) * C15776 +
            (C16600 - C16601 + C16602 - C16603) * C47389) *
               C47294 * C1665 +
           ((C15769 * C432 - C15773 * C419 + C47358 * C438 - C15774 * C421) *
                C15775 +
            (C15769 * C449 - C15773 * C435 + C47358 * C451 - C15774 * C439) *
                C15771 +
            (C15769 * C1161 - C15773 * C1152 + C47358 * C2015 -
             C15774 * C2014) *
                C15776 +
            (C15769 * C1179 - C15773 * C1164 + C47358 * C2017 -
             C15774 * C2016) *
                C47389) *
               C47294 * C47374) *
              C47073 * C47365)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C15769 * C124 - C15773 * C117 + C47358 * C125 - C15774 * C118) *
                C15775 +
            (C15769 * C138 - C15773 * C127 + C47358 * C139 - C15774 * C128) *
                C15771 +
            (C15924 - C15925 + C15926 - C15927) * C15776 +
            (C15928 - C15929 + C15930 - C15931) * C47389) *
               C47294 * C1664 +
           ((C15773 * C414 - C15769 * C424 + C15774 * C415 - C47358 * C425) *
                C15775 +
            (C15773 * C427 - C15769 * C444 + C15774 * C428 - C47358 * C445) *
                C15771 +
            (C16580 - C16581 + C16582 - C16583) * C15776 +
            (C16584 - C16585 + C16586 - C16587) * C47389) *
               C47294 * C1665 +
           ((C15769 * C430 - C15773 * C417 + C47358 * C431 - C15774 * C418) *
                C15775 +
            (C15769 * C447 - C15773 * C433 + C47358 * C448 - C15774 * C434) *
                C15771 +
            (C16994 - C16995 + C16996 - C16997) * C15776 +
            (C16998 - C16999 + C17000 - C17001) * C47389) *
               C47294 * C47374) *
              C47410 +
          (((C15925 - C15924 + C15927 - C15926) * C15775 +
            (C15929 - C15928 + C15931 - C15930) * C15771 +
            (C15932 - C15933 + C15934 - C15935) * C15776 +
            (C15936 - C15937 + C15938 - C15939) * C47389) *
               C47294 * C1664 +
           ((C16581 - C16580 + C16583 - C16582) * C15775 +
            (C16585 - C16584 + C16587 - C16586) * C15771 +
            (C17002 - C17003 + C17004 - C17005) * C15776 +
            (C17006 - C17007 + C17008 - C17009) * C47389) *
               C47294 * C1665 +
           ((C16995 - C16994 + C16997 - C16996) * C15775 +
            (C16999 - C16998 + C17001 - C17000) * C15771 +
            (C17010 - C17011 + C17012 - C17013) * C15776 +
            (C17014 - C17015 + C17016 - C17017) * C47389) *
               C47294 * C47374) *
              C47398 +
          (((C15933 - C15932 + C15935 - C15934) * C15775 +
            (C15937 - C15936 + C15939 - C15938) * C15771 +
            (C16832 - C16833 + C16834 - C16835) * C15776 +
            (C16836 - C16837 + C16838 - C16839) * C47389) *
               C47294 * C1664 +
           ((C17003 - C17002 + C17005 - C17004) * C15775 +
            (C17007 - C17006 + C17009 - C17008) * C15771 +
            (C17488 - C17489 + C17490 - C17491) * C15776 +
            (C17492 - C17493 + C17494 - C17495) * C47389) *
               C47294 * C1665 +
           ((C17011 - C17010 + C17013 - C17012) * C15775 +
            (C17015 - C17014 + C17017 - C17016) * C15771 +
            (C15769 * C5809 - C15773 * C5807 + C47358 * C5810 -
             C15774 * C5808) *
                C15776 +
            (C15769 * C5813 - C15773 * C5811 + C47358 * C5814 -
             C15774 * C5812) *
                C47389) *
               C47294 * C47374) *
              C47371) *
         C47045) /
            (p * q * std::sqrt(p + q));
    d2ee[90] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C15769 * C124 - C15773 * C117 + C47358 * C125 - C15774 * C118) *
                 C15775 +
             (C15769 * C138 - C15773 * C127 + C47358 * C139 - C15774 * C128) *
                 C15771 +
             (C15924 - C15925 + C15926 - C15927) * C15776 +
             (C15928 - C15929 + C15930 - C15931) * C47389) *
                C47294 * C3094 +
            ((C15773 * C414 - C15769 * C424 + C15774 * C415 - C47358 * C425) *
                 C15775 +
             (C15773 * C427 - C15769 * C444 + C15774 * C428 - C47358 * C445) *
                 C15771 +
             (C16580 - C16581 + C16582 - C16583) * C15776 +
             (C16584 - C16585 + C16586 - C16587) * C47389) *
                C47294 * C47178) *
               C47339 +
           (((C15925 - C15924 + C15927 - C15926) * C15775 +
             (C15929 - C15928 + C15931 - C15930) * C15771 +
             (C15932 - C15933 + C15934 - C15935) * C15776 +
             (C15936 - C15937 + C15938 - C15939) * C47389) *
                C47294 * C3094 +
            ((C16581 - C16580 + C16583 - C16582) * C15775 +
             (C16585 - C16584 + C16587 - C16586) * C15771 +
             (C17002 - C17003 + C17004 - C17005) * C15776 +
             (C17006 - C17007 + C17008 - C17009) * C47389) *
                C47294 * C47178) *
               C47136) *
              C47050 +
          ((((C15773 * C118 - C15769 * C125 + C15774 * C119 - C47358 * C126) *
                 C15775 +
             (C15773 * C128 - C15769 * C139 + C15774 * C129 - C47358 * C140) *
                 C15771 +
             (C15940 - C15941 + C15942 - C15943) * C15776 +
             (C15944 - C15945 + C15946 - C15947) * C47389) *
                C47294 * C3094 +
            ((C15769 * C425 - C15773 * C415 + C47358 * C426 - C15774 * C416) *
                 C15775 +
             (C15769 * C445 - C15773 * C428 + C47358 * C446 - C15774 * C429) *
                 C15771 +
             (C16588 - C16589 + C16590 - C16591) * C15776 +
             (C16592 - C16593 + C16594 - C16595) * C47389) *
                C47294 * C47178) *
               C47339 +
           (((C15941 - C15940 + C15943 - C15942) * C15775 +
             (C15945 - C15944 + C15947 - C15946) * C15771 +
             (C15948 - C15949 + C15950 - C15951) * C15776 +
             (C15952 - C15953 + C15954 - C15955) * C47389) *
                C47294 * C3094 +
            ((C16589 - C16588 + C16591 - C16590) * C15775 +
             (C16593 - C16592 + C16595 - C16594) * C15771 +
             (C17350 - C17351 + C17352 - C17353) * C15776 +
             (C17354 - C17355 + C17356 - C17357) * C47389) *
                C47294 * C47178) *
               C47136) *
              C47059 +
          ((((C15769 * C126 - C15773 * C119 + C47358 * C130 - C15774 * C120) *
                 C15775 +
             (C15769 * C140 - C15773 * C129 + C47358 * C141 - C15774 * C131) *
                 C15771 +
             (C15956 - C15957 + C15958 - C15959) * C15776 +
             (C15960 - C15961 + C15962 - C15963) * C47389) *
                C47294 * C3094 +
            ((C15773 * C416 - C15769 * C426 + C15774 * C420 - C47358 * C436) *
                 C15775 +
             (C15773 * C429 - C15769 * C446 + C15774 * C437 - C47358 * C450) *
                 C15771 +
             (C16596 - C16597 + C16598 - C16599) * C15776 +
             (C16600 - C16601 + C16602 - C16603) * C47389) *
                C47294 * C47178) *
               C47339 +
           (((C15957 - C15956 + C15959 - C15958) * C15775 +
             (C15961 - C15960 + C15963 - C15962) * C15771 +
             (C15964 - C15965 + C15966 - C15967) * C15776 +
             (C15968 - C15969 + C15970 - C15971) * C47389) *
                C47294 * C3094 +
            ((C16597 - C16596 + C16599 - C16598) * C15775 +
             (C16601 - C16600 + C16603 - C16602) * C15771 +
             (C15769 * C1167 - C15773 * C1155 + C47358 * C1441 -
              C15774 * C1440) *
                 C15776 +
             (C15769 * C1182 - C15773 * C1170 + C47358 * C1443 -
              C15774 * C1442) *
                 C47389) *
                C47294 * C47178) *
               C47136) *
              C2703)) /
        (p * q * std::sqrt(p + q));
    d2ee[91] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C15769 * C124 - C15773 * C117 + C47358 * C125 - C15774 * C118) *
                 C15775 +
             (C15769 * C138 - C15773 * C127 + C47358 * C139 - C15774 * C128) *
                 C15771 +
             (C15924 - C15925 + C15926 - C15927) * C15776 +
             (C15928 - C15929 + C15930 - C15931) * C47389) *
                C47294 * C47174 +
            ((C15773 * C414 - C15769 * C424 + C15774 * C415 - C47358 * C425) *
                 C15775 +
             (C15773 * C427 - C15769 * C444 + C15774 * C428 - C47358 * C445) *
                 C15771 +
             (C16580 - C16581 + C16582 - C16583) * C15776 +
             (C16584 - C16585 + C16586 - C16587) * C47389) *
                C47294 * C47181 +
            ((C15769 * C430 - C15773 * C417 + C47358 * C431 - C15774 * C418) *
                 C15775 +
             (C15769 * C447 - C15773 * C433 + C47358 * C448 - C15774 * C434) *
                 C15771 +
             (C16994 - C16995 + C16996 - C16997) * C15776 +
             (C16998 - C16999 + C17000 - C17001) * C47389) *
                C47294 * C3602) *
               C47339 +
           (((C15925 - C15924 + C15927 - C15926) * C15775 +
             (C15929 - C15928 + C15931 - C15930) * C15771 +
             (C15932 - C15933 + C15934 - C15935) * C15776 +
             (C15936 - C15937 + C15938 - C15939) * C47389) *
                C47294 * C47174 +
            ((C16581 - C16580 + C16583 - C16582) * C15775 +
             (C16585 - C16584 + C16587 - C16586) * C15771 +
             (C17002 - C17003 + C17004 - C17005) * C15776 +
             (C17006 - C17007 + C17008 - C17009) * C47389) *
                C47294 * C47181 +
            ((C16995 - C16994 + C16997 - C16996) * C15775 +
             (C16999 - C16998 + C17001 - C17000) * C15771 +
             (C17010 - C17011 + C17012 - C17013) * C15776 +
             (C17014 - C17015 + C17016 - C17017) * C47389) *
                C47294 * C3602) *
               C47136) *
              C2440 +
          ((((C15773 * C118 - C15769 * C125 + C15774 * C119 - C47358 * C126) *
                 C15775 +
             (C15773 * C128 - C15769 * C139 + C15774 * C129 - C47358 * C140) *
                 C15771 +
             (C15940 - C15941 + C15942 - C15943) * C15776 +
             (C15944 - C15945 + C15946 - C15947) * C47389) *
                C47294 * C47174 +
            ((C15769 * C425 - C15773 * C415 + C47358 * C426 - C15774 * C416) *
                 C15775 +
             (C15769 * C445 - C15773 * C428 + C47358 * C446 - C15774 * C429) *
                 C15771 +
             (C16588 - C16589 + C16590 - C16591) * C15776 +
             (C16592 - C16593 + C16594 - C16595) * C47389) *
                C47294 * C47181 +
            ((C15773 * C418 - C15769 * C431 + C15774 * C419 - C47358 * C432) *
                 C15775 +
             (C15773 * C434 - C15769 * C448 + C15774 * C435 - C47358 * C449) *
                 C15771 +
             (C18064 - C18065 + C18066 - C18067) * C15776 +
             (C18068 - C18069 + C18070 - C18071) * C47389) *
                C47294 * C3602) *
               C47339 +
           (((C15941 - C15940 + C15943 - C15942) * C15775 +
             (C15945 - C15944 + C15947 - C15946) * C15771 +
             (C15948 - C15949 + C15950 - C15951) * C15776 +
             (C15952 - C15953 + C15954 - C15955) * C47389) *
                C47294 * C47174 +
            ((C16589 - C16588 + C16591 - C16590) * C15775 +
             (C16593 - C16592 + C16595 - C16594) * C15771 +
             (C17350 - C17351 + C17352 - C17353) * C15776 +
             (C17354 - C17355 + C17356 - C17357) * C47389) *
                C47294 * C47181 +
            ((C18065 - C18064 + C18067 - C18066) * C15775 +
             (C18069 - C18068 + C18071 - C18070) * C15771 +
             (C15769 * C1172 - C15773 * C1157 + C47358 * C1173 -
              C15774 * C1158) *
                 C15776 +
             (C15769 * C1184 - C15773 * C1175 + C47358 * C1185 -
              C15774 * C1176) *
                 C47389) *
                C47294 * C3602) *
               C47136) *
              C47056)) /
        (p * q * std::sqrt(p + q));
    d2ee[92] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C15769 * C124 - C15773 * C117 + C47358 * C125 - C15774 * C118) *
                 C15775 +
             (C15769 * C138 - C15773 * C127 + C47358 * C139 - C15774 * C128) *
                 C15771 +
             (C15924 - C15925 + C15926 - C15927) * C15776 +
             (C15928 - C15929 + C15930 - C15931) * C47389) *
                C47294 * C3094 +
            ((C15773 * C414 - C15769 * C424 + C15774 * C415 - C47358 * C425) *
                 C15775 +
             (C15773 * C427 - C15769 * C444 + C15774 * C428 - C47358 * C445) *
                 C15771 +
             (C16580 - C16581 + C16582 - C16583) * C15776 +
             (C16584 - C16585 + C16586 - C16587) * C47389) *
                C47294 * C47178) *
               C47410 +
           (((C15925 - C15924 + C15927 - C15926) * C15775 +
             (C15929 - C15928 + C15931 - C15930) * C15771 +
             (C15932 - C15933 + C15934 - C15935) * C15776 +
             (C15936 - C15937 + C15938 - C15939) * C47389) *
                C47294 * C3094 +
            ((C16581 - C16580 + C16583 - C16582) * C15775 +
             (C16585 - C16584 + C16587 - C16586) * C15771 +
             (C17002 - C17003 + C17004 - C17005) * C15776 +
             (C17006 - C17007 + C17008 - C17009) * C47389) *
                C47294 * C47178) *
               C47398 +
           (((C15933 - C15932 + C15935 - C15934) * C15775 +
             (C15937 - C15936 + C15939 - C15938) * C15771 +
             (C16832 - C16833 + C16834 - C16835) * C15776 +
             (C16836 - C16837 + C16838 - C16839) * C47389) *
                C47294 * C3094 +
            ((C17003 - C17002 + C17005 - C17004) * C15775 +
             (C17007 - C17006 + C17009 - C17008) * C15771 +
             (C17488 - C17489 + C17490 - C17491) * C15776 +
             (C17492 - C17493 + C17494 - C17495) * C47389) *
                C47294 * C47178) *
               C47371) *
              C2440 +
          ((((C15773 * C118 - C15769 * C125 + C15774 * C119 - C47358 * C126) *
                 C15775 +
             (C15773 * C128 - C15769 * C139 + C15774 * C129 - C47358 * C140) *
                 C15771 +
             (C15940 - C15941 + C15942 - C15943) * C15776 +
             (C15944 - C15945 + C15946 - C15947) * C47389) *
                C47294 * C3094 +
            ((C15769 * C425 - C15773 * C415 + C47358 * C426 - C15774 * C416) *
                 C15775 +
             (C15769 * C445 - C15773 * C428 + C47358 * C446 - C15774 * C429) *
                 C15771 +
             (C16588 - C16589 + C16590 - C16591) * C15776 +
             (C16592 - C16593 + C16594 - C16595) * C47389) *
                C47294 * C47178) *
               C47410 +
           (((C15941 - C15940 + C15943 - C15942) * C15775 +
             (C15945 - C15944 + C15947 - C15946) * C15771 +
             (C15948 - C15949 + C15950 - C15951) * C15776 +
             (C15952 - C15953 + C15954 - C15955) * C47389) *
                C47294 * C3094 +
            ((C16589 - C16588 + C16591 - C16590) * C15775 +
             (C16593 - C16592 + C16595 - C16594) * C15771 +
             (C17350 - C17351 + C17352 - C17353) * C15776 +
             (C17354 - C17355 + C17356 - C17357) * C47389) *
                C47294 * C47178) *
               C47398 +
           (((C15949 - C15948 + C15951 - C15950) * C15775 +
             (C15953 - C15952 + C15955 - C15954) * C15771 +
             (C17148 - C17149 + C17150 - C17151) * C15776 +
             (C17152 - C17153 + C17154 - C17155) * C47389) *
                C47294 * C3094 +
            ((C17351 - C17350 + C17353 - C17352) * C15775 +
             (C17355 - C17354 + C17357 - C17356) * C15771 +
             (C15769 * C1546 - C15773 * C1543 + C47358 * C1547 -
              C15774 * C1544) *
                 C15776 +
             (C15769 * C1552 - C15773 * C1549 + C47358 * C1553 -
              C15774 * C1550) *
                 C47389) *
                C47294 * C47178) *
               C47371) *
              C47056)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C15769 * C124 - C15773 * C117 + C47358 * C125 - C15774 * C118) *
                C15775 +
            (C15769 * C138 - C15773 * C127 + C47358 * C139 - C15774 * C128) *
                C15771 +
            (C15924 - C15925 + C15926 - C15927) * C15776 +
            (C15928 - C15929 + C15930 - C15931) * C47389) *
               C47294 * C3094 +
           ((C15773 * C414 - C15769 * C424 + C15774 * C415 - C47358 * C425) *
                C15775 +
            (C15773 * C427 - C15769 * C444 + C15774 * C428 - C47358 * C445) *
                C15771 +
            (C16580 - C16581 + C16582 - C16583) * C15776 +
            (C16584 - C16585 + C16586 - C16587) * C47389) *
               C47294 * C47178) *
              C47073 * C47416 +
          (((C15773 * C118 - C15769 * C125 + C15774 * C119 - C47358 * C126) *
                C15775 +
            (C15773 * C128 - C15769 * C139 + C15774 * C129 - C47358 * C140) *
                C15771 +
            (C15940 - C15941 + C15942 - C15943) * C15776 +
            (C15944 - C15945 + C15946 - C15947) * C47389) *
               C47294 * C3094 +
           ((C15769 * C425 - C15773 * C415 + C47358 * C426 - C15774 * C416) *
                C15775 +
            (C15769 * C445 - C15773 * C428 + C47358 * C446 - C15774 * C429) *
                C15771 +
            (C16588 - C16589 + C16590 - C16591) * C15776 +
            (C16592 - C16593 + C16594 - C16595) * C47389) *
               C47294 * C47178) *
              C47073 * C47409 +
          (((C15769 * C126 - C15773 * C119 + C47358 * C130 - C15774 * C120) *
                C15775 +
            (C15769 * C140 - C15773 * C129 + C47358 * C141 - C15774 * C131) *
                C15771 +
            (C15956 - C15957 + C15958 - C15959) * C15776 +
            (C15960 - C15961 + C15962 - C15963) * C47389) *
               C47294 * C3094 +
           ((C15773 * C416 - C15769 * C426 + C15774 * C420 - C47358 * C436) *
                C15775 +
            (C15773 * C429 - C15769 * C446 + C15774 * C437 - C47358 * C450) *
                C15771 +
            (C16596 - C16597 + C16598 - C16599) * C15776 +
            (C16600 - C16601 + C16602 - C16603) * C47389) *
               C47294 * C47178) *
              C47073 * C47396 +
          (((C15773 * C120 - C15769 * C130 + C15774 * C121 - C47358 * C132) *
                C15775 +
            (C15773 * C131 - C15769 * C141 + C15774 * C133 - C47358 * C142) *
                C15771 +
            (C16248 - C16249 + C16250 - C16251) * C15776 +
            (C16252 - C16253 + C16254 - C16255) * C47389) *
               C47294 * C3094 +
           ((C15769 * C436 - C15773 * C420 + C47358 * C440 - C15774 * C422) *
                C15775 +
            (C15769 * C450 - C15773 * C437 + C47358 * C452 - C15774 * C441) *
                C15771 +
            (C15769 * C823 - C15773 * C815 + C47358 * C825 - C15774 * C816) *
                C15776 +
            (C15769 * C830 - C15773 * C824 + C47358 * C831 - C15774 * C826) *
                C47389) *
               C47294 * C47178) *
              C47073 * C47375)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C15769 * C124 - C15773 * C117 + C47358 * C125 - C15774 * C118) *
                C15775 +
            (C15769 * C138 - C15773 * C127 + C47358 * C139 - C15774 * C128) *
                C15771 +
            (C15924 - C15925 + C15926 - C15927) * C15776 +
            (C15928 - C15929 + C15930 - C15931) * C47389) *
               C47294 * C47418 +
           ((C15773 * C414 - C15769 * C424 + C15774 * C415 - C47358 * C425) *
                C15775 +
            (C15773 * C427 - C15769 * C444 + C15774 * C428 - C47358 * C445) *
                C15771 +
            (C16580 - C16581 + C16582 - C16583) * C15776 +
            (C16584 - C16585 + C16586 - C16587) * C47389) *
               C47294 * C47415 +
           ((C15769 * C430 - C15773 * C417 + C47358 * C431 - C15774 * C418) *
                C15775 +
            (C15769 * C447 - C15773 * C433 + C47358 * C448 - C15774 * C434) *
                C15771 +
            (C16994 - C16995 + C16996 - C16997) * C15776 +
            (C16998 - C16999 + C17000 - C17001) * C47389) *
               C47294 * C47406 +
           ((C15773 * C1844 - C15769 * C1850 + C15774 * C1845 -
             C47358 * C1851) *
                C15775 +
            (C15773 * C1853 - C15769 * C1862 + C15774 * C1854 -
             C47358 * C1863) *
                C15771 +
            (C18332 - C18333 + C18334 - C18335) * C15776 +
            (C18336 - C18337 + C18338 - C18339) * C47389) *
               C47294 * C47387) *
              C47073 * C2440 +
          (((C15773 * C118 - C15769 * C125 + C15774 * C119 - C47358 * C126) *
                C15775 +
            (C15773 * C128 - C15769 * C139 + C15774 * C129 - C47358 * C140) *
                C15771 +
            (C15940 - C15941 + C15942 - C15943) * C15776 +
            (C15944 - C15945 + C15946 - C15947) * C47389) *
               C47294 * C47418 +
           ((C15769 * C425 - C15773 * C415 + C47358 * C426 - C15774 * C416) *
                C15775 +
            (C15769 * C445 - C15773 * C428 + C47358 * C446 - C15774 * C429) *
                C15771 +
            (C16588 - C16589 + C16590 - C16591) * C15776 +
            (C16592 - C16593 + C16594 - C16595) * C47389) *
               C47294 * C47415 +
           ((C15773 * C418 - C15769 * C431 + C15774 * C419 - C47358 * C432) *
                C15775 +
            (C15773 * C434 - C15769 * C448 + C15774 * C435 - C47358 * C449) *
                C15771 +
            (C18064 - C18065 + C18066 - C18067) * C15776 +
            (C18068 - C18069 + C18070 - C18071) * C47389) *
               C47294 * C47406 +
           ((C15769 * C1851 - C15773 * C1845 + C47358 * C1852 -
             C15774 * C1846) *
                C15775 +
            (C15769 * C1863 - C15773 * C1854 + C47358 * C1864 -
             C15774 * C1855) *
                C15771 +
            (C15769 * C2226 - C15773 * C2223 + C47358 * C2227 -
             C15774 * C2224) *
                C15776 +
            (C15769 * C2232 - C15773 * C2229 + C47358 * C2233 -
             C15774 * C2230) *
                C47389) *
               C47294 * C47387) *
              C47073 * C47056)) /
            (p * q * std::sqrt(p + q));
    d2ee[93] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C15769 * C124 - C15773 * C117 + C47358 * C125 - C15774 * C118) *
                C15775 +
            (C15769 * C138 - C15773 * C127 + C47358 * C139 - C15774 * C128) *
                C15771 +
            (C15924 - C15925 + C15926 - C15927) * C15776 +
            (C15928 - C15929 + C15930 - C15931) * C47389) *
               C47294 * C47174 +
           ((C15773 * C414 - C15769 * C424 + C15774 * C415 - C47358 * C425) *
                C15775 +
            (C15773 * C427 - C15769 * C444 + C15774 * C428 - C47358 * C445) *
                C15771 +
            (C16580 - C16581 + C16582 - C16583) * C15776 +
            (C16584 - C16585 + C16586 - C16587) * C47389) *
               C47294 * C47181 +
           ((C15769 * C430 - C15773 * C417 + C47358 * C431 - C15774 * C418) *
                C15775 +
            (C15769 * C447 - C15773 * C433 + C47358 * C448 - C15774 * C434) *
                C15771 +
            (C16994 - C16995 + C16996 - C16997) * C15776 +
            (C16998 - C16999 + C17000 - C17001) * C47389) *
               C47294 * C3602) *
              C47073 * C47050 +
          (((C15773 * C118 - C15769 * C125 + C15774 * C119 - C47358 * C126) *
                C15775 +
            (C15773 * C128 - C15769 * C139 + C15774 * C129 - C47358 * C140) *
                C15771 +
            (C15940 - C15941 + C15942 - C15943) * C15776 +
            (C15944 - C15945 + C15946 - C15947) * C47389) *
               C47294 * C47174 +
           ((C15769 * C425 - C15773 * C415 + C47358 * C426 - C15774 * C416) *
                C15775 +
            (C15769 * C445 - C15773 * C428 + C47358 * C446 - C15774 * C429) *
                C15771 +
            (C16588 - C16589 + C16590 - C16591) * C15776 +
            (C16592 - C16593 + C16594 - C16595) * C47389) *
               C47294 * C47181 +
           ((C15773 * C418 - C15769 * C431 + C15774 * C419 - C47358 * C432) *
                C15775 +
            (C15773 * C434 - C15769 * C448 + C15774 * C435 - C47358 * C449) *
                C15771 +
            (C18064 - C18065 + C18066 - C18067) * C15776 +
            (C18068 - C18069 + C18070 - C18071) * C47389) *
               C47294 * C3602) *
              C47073 * C47059 +
          (((C15769 * C126 - C15773 * C119 + C47358 * C130 - C15774 * C120) *
                C15775 +
            (C15769 * C140 - C15773 * C129 + C47358 * C141 - C15774 * C131) *
                C15771 +
            (C15956 - C15957 + C15958 - C15959) * C15776 +
            (C15960 - C15961 + C15962 - C15963) * C47389) *
               C47294 * C47174 +
           ((C15773 * C416 - C15769 * C426 + C15774 * C420 - C47358 * C436) *
                C15775 +
            (C15773 * C429 - C15769 * C446 + C15774 * C437 - C47358 * C450) *
                C15771 +
            (C16596 - C16597 + C16598 - C16599) * C15776 +
            (C16600 - C16601 + C16602 - C16603) * C47389) *
               C47294 * C47181 +
           ((C15769 * C432 - C15773 * C419 + C47358 * C438 - C15774 * C421) *
                C15775 +
            (C15769 * C449 - C15773 * C435 + C47358 * C451 - C15774 * C439) *
                C15771 +
            (C15769 * C1161 - C15773 * C1152 + C47358 * C2015 -
             C15774 * C2014) *
                C15776 +
            (C15769 * C1179 - C15773 * C1164 + C47358 * C2017 -
             C15774 * C2016) *
                C47389) *
               C47294 * C3602) *
              C47073 * C2703)) /
        (p * q * std::sqrt(p + q));
    d2ee[94] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C15769 * C124 - C15773 * C117 + C47358 * C125 - C15774 * C118) *
                C15775 +
            (C15769 * C138 - C15773 * C127 + C47358 * C139 - C15774 * C128) *
                C15771 +
            (C15924 - C15925 + C15926 - C15927) * C15776 +
            (C15928 - C15929 + C15930 - C15931) * C47389) *
               C47294 * C3094 +
           ((C15773 * C414 - C15769 * C424 + C15774 * C415 - C47358 * C425) *
                C15775 +
            (C15773 * C427 - C15769 * C444 + C15774 * C428 - C47358 * C445) *
                C15771 +
            (C16580 - C16581 + C16582 - C16583) * C15776 +
            (C16584 - C16585 + C16586 - C16587) * C47389) *
               C47294 * C47178) *
              C47073 * C47416 +
          (((C15773 * C118 - C15769 * C125 + C15774 * C119 - C47358 * C126) *
                C15775 +
            (C15773 * C128 - C15769 * C139 + C15774 * C129 - C47358 * C140) *
                C15771 +
            (C15940 - C15941 + C15942 - C15943) * C15776 +
            (C15944 - C15945 + C15946 - C15947) * C47389) *
               C47294 * C3094 +
           ((C15769 * C425 - C15773 * C415 + C47358 * C426 - C15774 * C416) *
                C15775 +
            (C15769 * C445 - C15773 * C428 + C47358 * C446 - C15774 * C429) *
                C15771 +
            (C16588 - C16589 + C16590 - C16591) * C15776 +
            (C16592 - C16593 + C16594 - C16595) * C47389) *
               C47294 * C47178) *
              C47073 * C47409 +
          (((C15769 * C126 - C15773 * C119 + C47358 * C130 - C15774 * C120) *
                C15775 +
            (C15769 * C140 - C15773 * C129 + C47358 * C141 - C15774 * C131) *
                C15771 +
            (C15956 - C15957 + C15958 - C15959) * C15776 +
            (C15960 - C15961 + C15962 - C15963) * C47389) *
               C47294 * C3094 +
           ((C15773 * C416 - C15769 * C426 + C15774 * C420 - C47358 * C436) *
                C15775 +
            (C15773 * C429 - C15769 * C446 + C15774 * C437 - C47358 * C450) *
                C15771 +
            (C16596 - C16597 + C16598 - C16599) * C15776 +
            (C16600 - C16601 + C16602 - C16603) * C47389) *
               C47294 * C47178) *
              C47073 * C47396 +
          (((C15773 * C120 - C15769 * C130 + C15774 * C121 - C47358 * C132) *
                C15775 +
            (C15773 * C131 - C15769 * C141 + C15774 * C133 - C47358 * C142) *
                C15771 +
            (C16248 - C16249 + C16250 - C16251) * C15776 +
            (C16252 - C16253 + C16254 - C16255) * C47389) *
               C47294 * C3094 +
           ((C15769 * C436 - C15773 * C420 + C47358 * C440 - C15774 * C422) *
                C15775 +
            (C15769 * C450 - C15773 * C437 + C47358 * C452 - C15774 * C441) *
                C15771 +
            (C15769 * C823 - C15773 * C815 + C47358 * C825 - C15774 * C816) *
                C15776 +
            (C15769 * C830 - C15773 * C824 + C47358 * C831 - C15774 * C826) *
                C47389) *
               C47294 * C47178) *
              C47073 * C47375)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C15769 * C124 - C15773 * C117 + C47358 * C125 - C15774 * C118) *
                 C15775 +
             (C15769 * C138 - C15773 * C127 + C47358 * C139 - C15774 * C128) *
                 C15771 +
             (C15924 - C15925 + C15926 - C15927) * C15776 +
             (C15928 - C15929 + C15930 - C15931) * C47389) *
                C47294 * C3094 +
            ((C15773 * C414 - C15769 * C424 + C15774 * C415 - C47358 * C425) *
                 C15775 +
             (C15773 * C427 - C15769 * C444 + C15774 * C428 - C47358 * C445) *
                 C15771 +
             (C16580 - C16581 + C16582 - C16583) * C15776 +
             (C16584 - C16585 + C16586 - C16587) * C47389) *
                C47294 * C47178) *
               C47410 +
           (((C15925 - C15924 + C15927 - C15926) * C15775 +
             (C15929 - C15928 + C15931 - C15930) * C15771 +
             (C15932 - C15933 + C15934 - C15935) * C15776 +
             (C15936 - C15937 + C15938 - C15939) * C47389) *
                C47294 * C3094 +
            ((C16581 - C16580 + C16583 - C16582) * C15775 +
             (C16585 - C16584 + C16587 - C16586) * C15771 +
             (C17002 - C17003 + C17004 - C17005) * C15776 +
             (C17006 - C17007 + C17008 - C17009) * C47389) *
                C47294 * C47178) *
               C47398 +
           (((C15933 - C15932 + C15935 - C15934) * C15775 +
             (C15937 - C15936 + C15939 - C15938) * C15771 +
             (C16832 - C16833 + C16834 - C16835) * C15776 +
             (C16836 - C16837 + C16838 - C16839) * C47389) *
                C47294 * C3094 +
            ((C17003 - C17002 + C17005 - C17004) * C15775 +
             (C17007 - C17006 + C17009 - C17008) * C15771 +
             (C17488 - C17489 + C17490 - C17491) * C15776 +
             (C17492 - C17493 + C17494 - C17495) * C47389) *
                C47294 * C47178) *
               C47371) *
              C2440 +
          ((((C15773 * C118 - C15769 * C125 + C15774 * C119 - C47358 * C126) *
                 C15775 +
             (C15773 * C128 - C15769 * C139 + C15774 * C129 - C47358 * C140) *
                 C15771 +
             (C15940 - C15941 + C15942 - C15943) * C15776 +
             (C15944 - C15945 + C15946 - C15947) * C47389) *
                C47294 * C3094 +
            ((C15769 * C425 - C15773 * C415 + C47358 * C426 - C15774 * C416) *
                 C15775 +
             (C15769 * C445 - C15773 * C428 + C47358 * C446 - C15774 * C429) *
                 C15771 +
             (C16588 - C16589 + C16590 - C16591) * C15776 +
             (C16592 - C16593 + C16594 - C16595) * C47389) *
                C47294 * C47178) *
               C47410 +
           (((C15941 - C15940 + C15943 - C15942) * C15775 +
             (C15945 - C15944 + C15947 - C15946) * C15771 +
             (C15948 - C15949 + C15950 - C15951) * C15776 +
             (C15952 - C15953 + C15954 - C15955) * C47389) *
                C47294 * C3094 +
            ((C16589 - C16588 + C16591 - C16590) * C15775 +
             (C16593 - C16592 + C16595 - C16594) * C15771 +
             (C17350 - C17351 + C17352 - C17353) * C15776 +
             (C17354 - C17355 + C17356 - C17357) * C47389) *
                C47294 * C47178) *
               C47398 +
           (((C15949 - C15948 + C15951 - C15950) * C15775 +
             (C15953 - C15952 + C15955 - C15954) * C15771 +
             (C17148 - C17149 + C17150 - C17151) * C15776 +
             (C17152 - C17153 + C17154 - C17155) * C47389) *
                C47294 * C3094 +
            ((C17351 - C17350 + C17353 - C17352) * C15775 +
             (C17355 - C17354 + C17357 - C17356) * C15771 +
             (C15769 * C1546 - C15773 * C1543 + C47358 * C1547 -
              C15774 * C1544) *
                 C15776 +
             (C15769 * C1552 - C15773 * C1549 + C47358 * C1553 -
              C15774 * C1550) *
                 C47389) *
                C47294 * C47178) *
               C47371) *
              C47056)) /
            (p * q * std::sqrt(p + q));
    d2ee[95] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C15769 * C124 - C15773 * C117 + C47358 * C125 - C15774 * C118) *
                C15775 +
            (C15769 * C138 - C15773 * C127 + C47358 * C139 - C15774 * C128) *
                C15771 +
            (C15924 - C15925 + C15926 - C15927) * C15776 +
            (C15928 - C15929 + C15930 - C15931) * C47389) *
               C47294 * C47091 * C47339 +
           ((C15925 - C15924 + C15927 - C15926) * C15775 +
            (C15929 - C15928 + C15931 - C15930) * C15771 +
            (C15932 - C15933 + C15934 - C15935) * C15776 +
            (C15936 - C15937 + C15938 - C15939) * C47389) *
               C47294 * C47091 * C47136) *
              C554 +
          (((C15773 * C118 - C15769 * C125 + C15774 * C119 - C47358 * C126) *
                C15775 +
            (C15773 * C128 - C15769 * C139 + C15774 * C129 - C47358 * C140) *
                C15771 +
            (C15940 - C15941 + C15942 - C15943) * C15776 +
            (C15944 - C15945 + C15946 - C15947) * C47389) *
               C47294 * C47091 * C47339 +
           ((C15941 - C15940 + C15943 - C15942) * C15775 +
            (C15945 - C15944 + C15947 - C15946) * C15771 +
            (C15948 - C15949 + C15950 - C15951) * C15776 +
            (C15952 - C15953 + C15954 - C15955) * C47389) *
               C47294 * C47091 * C47136) *
              C555 +
          (((C15769 * C126 - C15773 * C119 + C47358 * C130 - C15774 * C120) *
                C15775 +
            (C15769 * C140 - C15773 * C129 + C47358 * C141 - C15774 * C131) *
                C15771 +
            (C15956 - C15957 + C15958 - C15959) * C15776 +
            (C15960 - C15961 + C15962 - C15963) * C47389) *
               C47294 * C47091 * C47339 +
           ((C15957 - C15956 + C15959 - C15958) * C15775 +
            (C15961 - C15960 + C15963 - C15962) * C15771 +
            (C15964 - C15965 + C15966 - C15967) * C15776 +
            (C15968 - C15969 + C15970 - C15971) * C47389) *
               C47294 * C47091 * C47136) *
              C556 +
          (((C15773 * C120 - C15769 * C130 + C15774 * C121 - C47358 * C132) *
                C15775 +
            (C15773 * C131 - C15769 * C141 + C15774 * C133 - C47358 * C142) *
                C15771 +
            (C16248 - C16249 + C16250 - C16251) * C15776 +
            (C16252 - C16253 + C16254 - C16255) * C47389) *
               C47294 * C47091 * C47339 +
           ((C16249 - C16248 + C16251 - C16250) * C15775 +
            (C16253 - C16252 + C16255 - C16254) * C15771 +
            (C15769 * C285 - C15773 * C268 + C47358 * C289 - C15774 * C270) *
                C15776 +
            (C15769 * C298 - C15773 * C286 + C47358 * C300 - C15774 * C290) *
                C47389) *
               C47294 * C47091 * C47136) *
              C47375)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C15769 * C124 - C15773 * C117 + C47358 * C125 - C15774 * C118) *
                C15775 +
            (C15769 * C138 - C15773 * C127 + C47358 * C139 - C15774 * C128) *
                C15771 +
            (C15924 - C15925 + C15926 - C15927) * C15776 +
            (C15928 - C15929 + C15930 - C15931) * C47389) *
               C47294 * C47091 * C1284 +
           ((C15925 - C15924 + C15927 - C15926) * C15775 +
            (C15929 - C15928 + C15931 - C15930) * C15771 +
            (C15932 - C15933 + C15934 - C15935) * C15776 +
            (C15936 - C15937 + C15938 - C15939) * C47389) *
               C47294 * C47091 * C1285 +
           ((C15933 - C15932 + C15935 - C15934) * C15775 +
            (C15937 - C15936 + C15939 - C15938) * C15771 +
            (C16832 - C16833 + C16834 - C16835) * C15776 +
            (C16836 - C16837 + C16838 - C16839) * C47389) *
               C47294 * C47091 * C1286 +
           ((C16833 - C16832 + C16835 - C16834) * C15775 +
            (C16837 - C16836 + C16839 - C16838) * C15771 +
            (C16840 - C16841 + C16842 - C16843) * C15776 +
            (C16844 - C16845 + C16846 - C16847) * C47389) *
               C47294 * C47091 * C47381) *
              C47325 +
          (((C15773 * C118 - C15769 * C125 + C15774 * C119 - C47358 * C126) *
                C15775 +
            (C15773 * C128 - C15769 * C139 + C15774 * C129 - C47358 * C140) *
                C15771 +
            (C15940 - C15941 + C15942 - C15943) * C15776 +
            (C15944 - C15945 + C15946 - C15947) * C47389) *
               C47294 * C47091 * C1284 +
           ((C15941 - C15940 + C15943 - C15942) * C15775 +
            (C15945 - C15944 + C15947 - C15946) * C15771 +
            (C15948 - C15949 + C15950 - C15951) * C15776 +
            (C15952 - C15953 + C15954 - C15955) * C47389) *
               C47294 * C47091 * C1285 +
           ((C15949 - C15948 + C15951 - C15950) * C15775 +
            (C15953 - C15952 + C15955 - C15954) * C15771 +
            (C17148 - C17149 + C17150 - C17151) * C15776 +
            (C17152 - C17153 + C17154 - C17155) * C47389) *
               C47294 * C47091 * C1286 +
           ((C17149 - C17148 + C17151 - C17150) * C15775 +
            (C17153 - C17152 + C17155 - C17154) * C15771 +
            (C15769 * C1029 - C15773 * C1020 + C47358 * C1030 -
             C15774 * C1021) *
                C15776 +
            (C15769 * C1038 - C15773 * C1032 + C47358 * C1039 -
             C15774 * C1033) *
                C47389) *
               C47294 * C47091 * C47381) *
              C47056)) /
            (p * q * std::sqrt(p + q));
    d2ee[96] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C15769 * C124 - C15773 * C117 + C47358 * C125 - C15774 * C118) *
                 C15775 +
             (C15769 * C138 - C15773 * C127 + C47358 * C139 - C15774 * C128) *
                 C15771 +
             (C15924 - C15925 + C15926 - C15927) * C15776 +
             (C15928 - C15929 + C15930 - C15931) * C47389) *
                C47294 * C47340 +
            ((C15773 * C414 - C15769 * C424 + C15774 * C415 - C47358 * C425) *
                 C15775 +
             (C15773 * C427 - C15769 * C444 + C15774 * C428 - C47358 * C445) *
                 C15771 +
             (C16580 - C16581 + C16582 - C16583) * C15776 +
             (C16584 - C16585 + C16586 - C16587) * C47389) *
                C47294 * C47178) *
               C47339 +
           (((C15925 - C15924 + C15927 - C15926) * C15775 +
             (C15929 - C15928 + C15931 - C15930) * C15771 +
             (C15932 - C15933 + C15934 - C15935) * C15776 +
             (C15936 - C15937 + C15938 - C15939) * C47389) *
                C47294 * C47340 +
            ((C16581 - C16580 + C16583 - C16582) * C15775 +
             (C16585 - C16584 + C16587 - C16586) * C15771 +
             (C15769 * C1165 - C15773 * C1153 + C47358 * C1166 -
              C15774 * C1154) *
                 C15776 +
             (C15769 * C1180 - C15773 * C1168 + C47358 * C1181 -
              C15774 * C1169) *
                 C47389) *
                C47294 * C47178) *
               C47136) *
              C258 +
          ((((C15773 * C118 - C15769 * C125 + C15774 * C119 - C47358 * C126) *
                 C15775 +
             (C15773 * C128 - C15769 * C139 + C15774 * C129 - C47358 * C140) *
                 C15771 +
             (C15940 - C15941 + C15942 - C15943) * C15776 +
             (C15944 - C15945 + C15946 - C15947) * C47389) *
                C47294 * C47340 +
            ((C15769 * C425 - C15773 * C415 + C47358 * C426 - C15774 * C416) *
                 C15775 +
             (C15769 * C445 - C15773 * C428 + C47358 * C446 - C15774 * C429) *
                 C15771 +
             (C16588 - C16589 + C16590 - C16591) * C15776 +
             (C16592 - C16593 + C16594 - C16595) * C47389) *
                C47294 * C47178) *
               C47339 +
           (((C15941 - C15940 + C15943 - C15942) * C15775 +
             (C15945 - C15944 + C15947 - C15946) * C15771 +
             (C15948 - C15949 + C15950 - C15951) * C15776 +
             (C15952 - C15953 + C15954 - C15955) * C47389) *
                C47294 * C47340 +
            ((C16589 - C16588 + C16591 - C16590) * C15775 +
             (C16593 - C16592 + C16595 - C16594) * C15771 +
             (C15773 * C1154 - C15769 * C1166 + C15774 * C1155 -
              C47358 * C1167) *
                 C15776 +
             (C15773 * C1169 - C15769 * C1181 + C15774 * C1170 -
              C47358 * C1182) *
                 C47389) *
                C47294 * C47178) *
               C47136) *
              C259 +
          ((((C15769 * C126 - C15773 * C119 + C47358 * C130 - C15774 * C120) *
                 C15775 +
             (C15769 * C140 - C15773 * C129 + C47358 * C141 - C15774 * C131) *
                 C15771 +
             (C15956 - C15957 + C15958 - C15959) * C15776 +
             (C15960 - C15961 + C15962 - C15963) * C47389) *
                C47294 * C47340 +
            ((C15773 * C416 - C15769 * C426 + C15774 * C420 - C47358 * C436) *
                 C15775 +
             (C15773 * C429 - C15769 * C446 + C15774 * C437 - C47358 * C450) *
                 C15771 +
             (C16596 - C16597 + C16598 - C16599) * C15776 +
             (C16600 - C16601 + C16602 - C16603) * C47389) *
                C47294 * C47178) *
               C47339 +
           (((C15957 - C15956 + C15959 - C15958) * C15775 +
             (C15961 - C15960 + C15963 - C15962) * C15771 +
             (C15964 - C15965 + C15966 - C15967) * C15776 +
             (C15968 - C15969 + C15970 - C15971) * C47389) *
                C47294 * C47340 +
            ((C16597 - C16596 + C16599 - C16598) * C15775 +
             (C16601 - C16600 + C16603 - C16602) * C15771 +
             (C15769 * C1167 - C15773 * C1155 + C47358 * C1441 -
              C15774 * C1440) *
                 C15776 +
             (C15769 * C1182 - C15773 * C1170 + C47358 * C1443 -
              C15774 * C1442) *
                 C47389) *
                C47294 * C47178) *
               C47136) *
              C47365)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C15769 * C124 - C15773 * C117 + C47358 * C125 - C15774 * C118) *
                C15775 +
            (C15769 * C138 - C15773 * C127 + C47358 * C139 - C15774 * C128) *
                C15771 +
            (C15924 - C15925 + C15926 - C15927) * C15776 +
            (C15928 - C15929 + C15930 - C15931) * C47389) *
               C47294 * C47340 +
           ((C15773 * C414 - C15769 * C424 + C15774 * C415 - C47358 * C425) *
                C15775 +
            (C15773 * C427 - C15769 * C444 + C15774 * C428 - C47358 * C445) *
                C15771 +
            (C16580 - C16581 + C16582 - C16583) * C15776 +
            (C16584 - C16585 + C16586 - C16587) * C47389) *
               C47294 * C47178) *
              C1284 +
          (((C15925 - C15924 + C15927 - C15926) * C15775 +
            (C15929 - C15928 + C15931 - C15930) * C15771 +
            (C15932 - C15933 + C15934 - C15935) * C15776 +
            (C15936 - C15937 + C15938 - C15939) * C47389) *
               C47294 * C47340 +
           ((C16581 - C16580 + C16583 - C16582) * C15775 +
            (C16585 - C16584 + C16587 - C16586) * C15771 +
            (C17002 - C17003 + C17004 - C17005) * C15776 +
            (C17006 - C17007 + C17008 - C17009) * C47389) *
               C47294 * C47178) *
              C1285 +
          (((C15933 - C15932 + C15935 - C15934) * C15775 +
            (C15937 - C15936 + C15939 - C15938) * C15771 +
            (C16832 - C16833 + C16834 - C16835) * C15776 +
            (C16836 - C16837 + C16838 - C16839) * C47389) *
               C47294 * C47340 +
           ((C17003 - C17002 + C17005 - C17004) * C15775 +
            (C17007 - C17006 + C17009 - C17008) * C15771 +
            (C17488 - C17489 + C17490 - C17491) * C15776 +
            (C17492 - C17493 + C17494 - C17495) * C47389) *
               C47294 * C47178) *
              C1286 +
          (((C16833 - C16832 + C16835 - C16834) * C15775 +
            (C16837 - C16836 + C16839 - C16838) * C15771 +
            (C16840 - C16841 + C16842 - C16843) * C15776 +
            (C16844 - C16845 + C16846 - C16847) * C47389) *
               C47294 * C47340 +
           ((C17489 - C17488 + C17491 - C17490) * C15775 +
            (C17493 - C17492 + C17495 - C17494) * C15771 +
            (C15769 * C6311 - C15773 * C6309 + C47358 * C6312 -
             C15774 * C6310) *
                C15776 +
            (C15769 * C6315 - C15773 * C6313 + C47358 * C6316 -
             C15774 * C6314) *
                C47389) *
               C47294 * C47178) *
              C47381) *
         C47045) /
            (p * q * std::sqrt(p + q));
    d2ee[97] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C15769 * C124 - C15773 * C117 + C47358 * C125 - C15774 * C118) *
                C15775 +
            (C15769 * C138 - C15773 * C127 + C47358 * C139 - C15774 * C128) *
                C15771 +
            (C15924 - C15925 + C15926 - C15927) * C15776 +
            (C15928 - C15929 + C15930 - C15931) * C47389) *
               C47294 * C47091 * C47410 +
           ((C15925 - C15924 + C15927 - C15926) * C15775 +
            (C15929 - C15928 + C15931 - C15930) * C15771 +
            (C15932 - C15933 + C15934 - C15935) * C15776 +
            (C15936 - C15937 + C15938 - C15939) * C47389) *
               C47294 * C47091 * C47398 +
           ((C15933 - C15932 + C15935 - C15934) * C15775 +
            (C15937 - C15936 + C15939 - C15938) * C15771 +
            (C15769 * C1022 - C15773 * C1016 + C47358 * C1023 -
             C15774 * C1017) *
                C15776 +
            (C15769 * C1034 - C15773 * C1025 + C47358 * C1035 -
             C15774 * C1026) *
                C47389) *
               C47294 * C47091 * C47371) *
              C258 +
          (((C15773 * C118 - C15769 * C125 + C15774 * C119 - C47358 * C126) *
                C15775 +
            (C15773 * C128 - C15769 * C139 + C15774 * C129 - C47358 * C140) *
                C15771 +
            (C15940 - C15941 + C15942 - C15943) * C15776 +
            (C15944 - C15945 + C15946 - C15947) * C47389) *
               C47294 * C47091 * C47410 +
           ((C15941 - C15940 + C15943 - C15942) * C15775 +
            (C15945 - C15944 + C15947 - C15946) * C15771 +
            (C15948 - C15949 + C15950 - C15951) * C15776 +
            (C15952 - C15953 + C15954 - C15955) * C47389) *
               C47294 * C47091 * C47398 +
           ((C15949 - C15948 + C15951 - C15950) * C15775 +
            (C15953 - C15952 + C15955 - C15954) * C15771 +
            (C15773 * C1017 - C15769 * C1023 + C15774 * C1018 -
             C47358 * C1024) *
                C15776 +
            (C15773 * C1026 - C15769 * C1035 + C15774 * C1027 -
             C47358 * C1036) *
                C47389) *
               C47294 * C47091 * C47371) *
              C259 +
          (((C15769 * C126 - C15773 * C119 + C47358 * C130 - C15774 * C120) *
                C15775 +
            (C15769 * C140 - C15773 * C129 + C47358 * C141 - C15774 * C131) *
                C15771 +
            (C15956 - C15957 + C15958 - C15959) * C15776 +
            (C15960 - C15961 + C15962 - C15963) * C47389) *
               C47294 * C47091 * C47410 +
           ((C15957 - C15956 + C15959 - C15958) * C15775 +
            (C15961 - C15960 + C15963 - C15962) * C15771 +
            (C15964 - C15965 + C15966 - C15967) * C15776 +
            (C15968 - C15969 + C15970 - C15971) * C47389) *
               C47294 * C47091 * C47398 +
           ((C15965 - C15964 + C15967 - C15966) * C15775 +
            (C15969 - C15968 + C15971 - C15970) * C15771 +
            (C15769 * C1024 - C15773 * C1018 + C47358 * C1291 -
             C15774 * C1290) *
                C15776 +
            (C15769 * C1036 - C15773 * C1027 + C47358 * C1293 -
             C15774 * C1292) *
                C47389) *
               C47294 * C47091 * C47371) *
              C47365)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C15769 * C124 - C15773 * C117 + C47358 * C125 - C15774 * C118) *
               C15775 +
           (C15769 * C138 - C15773 * C127 + C47358 * C139 - C15774 * C128) *
               C15771 +
           (C15769 * C271 - C15773 * C261 + C47358 * C272 - C15774 * C262) *
               C15776 +
           (C15769 * C291 - C15773 * C274 + C47358 * C292 - C15774 * C275) *
               C47389) *
              C47294 * C47091 * C47073 * C108 +
          ((C15773 * C118 - C15769 * C125 + C15774 * C119 - C47358 * C126) *
               C15775 +
           (C15773 * C128 - C15769 * C139 + C15774 * C129 - C47358 * C140) *
               C15771 +
           (C15773 * C262 - C15769 * C272 + C15774 * C263 - C47358 * C273) *
               C15776 +
           (C15773 * C275 - C15769 * C292 + C15774 * C276 - C47358 * C293) *
               C47389) *
              C47294 * C47091 * C47073 * C109 +
          ((C15769 * C126 - C15773 * C119 + C47358 * C130 - C15774 * C120) *
               C15775 +
           (C15769 * C140 - C15773 * C129 + C47358 * C141 - C15774 * C131) *
               C15771 +
           (C15769 * C273 - C15773 * C263 + C47358 * C283 - C15774 * C267) *
               C15776 +
           (C15769 * C293 - C15773 * C276 + C47358 * C297 - C15774 * C284) *
               C47389) *
              C47294 * C47091 * C47073 * C110 +
          ((C15773 * C120 - C15769 * C130 + C15774 * C121 - C47358 * C132) *
               C15775 +
           (C15773 * C131 - C15769 * C141 + C15774 * C133 - C47358 * C142) *
               C15771 +
           (C15773 * C267 - C15769 * C283 + C15774 * C269 - C47358 * C287) *
               C15776 +
           (C15773 * C284 - C15769 * C297 + C15774 * C288 - C47358 * C299) *
               C47389) *
              C47294 * C47091 * C47073 * C111 +
          ((C15769 * C132 - C15773 * C121 + C47358 * C134 - C15774 * C122) *
               C15775 +
           (C15769 * C142 - C15773 * C133 + C47358 * C143 - C15774 * C135) *
               C15771 +
           (C15769 * C287 - C15773 * C269 + C47358 * C559 - C15774 * C558) *
               C15776 +
           (C15769 * C299 - C15773 * C288 + C47358 * C561 - C15774 * C560) *
               C47389) *
              C47294 * C47091 * C47073 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C15769 * C124 - C15773 * C117 + C47358 * C125 - C15774 * C118) *
                C15775 +
            (C15769 * C138 - C15773 * C127 + C47358 * C139 - C15774 * C128) *
                C15771 +
            (C15924 - C15925 + C15926 - C15927) * C15776 +
            (C15928 - C15929 + C15930 - C15931) * C47389) *
               C47294 * C47411 +
           ((C15773 * C414 - C15769 * C424 + C15774 * C415 - C47358 * C425) *
                C15775 +
            (C15773 * C427 - C15769 * C444 + C15774 * C428 - C47358 * C445) *
                C15771 +
            (C15773 * C812 - C15769 * C817 + C15774 * C813 - C47358 * C818) *
                C15776 +
            (C15773 * C820 - C15769 * C827 + C15774 * C821 - C47358 * C828) *
                C47389) *
               C47294 * C47400 +
           ((C15769 * C430 - C15773 * C417 + C47358 * C431 - C15774 * C418) *
                C15775 +
            (C15769 * C447 - C15773 * C433 + C47358 * C448 - C15774 * C434) *
                C15771 +
            (C15769 * C1159 - C15773 * C1150 + C47358 * C1160 -
             C15774 * C1151) *
                C15776 +
            (C15769 * C1177 - C15773 * C1162 + C47358 * C1178 -
             C15774 * C1163) *
                C47389) *
               C47294 * C47374) *
              C47073 * C258 +
          (((C15773 * C118 - C15769 * C125 + C15774 * C119 - C47358 * C126) *
                C15775 +
            (C15773 * C128 - C15769 * C139 + C15774 * C129 - C47358 * C140) *
                C15771 +
            (C15940 - C15941 + C15942 - C15943) * C15776 +
            (C15944 - C15945 + C15946 - C15947) * C47389) *
               C47294 * C47411 +
           ((C15769 * C425 - C15773 * C415 + C47358 * C426 - C15774 * C416) *
                C15775 +
            (C15769 * C445 - C15773 * C428 + C47358 * C446 - C15774 * C429) *
                C15771 +
            (C15769 * C818 - C15773 * C813 + C47358 * C819 - C15774 * C814) *
                C15776 +
            (C15769 * C828 - C15773 * C821 + C47358 * C829 - C15774 * C822) *
                C47389) *
               C47294 * C47400 +
           ((C15773 * C418 - C15769 * C431 + C15774 * C419 - C47358 * C432) *
                C15775 +
            (C15773 * C434 - C15769 * C448 + C15774 * C435 - C47358 * C449) *
                C15771 +
            (C15773 * C1151 - C15769 * C1160 + C15774 * C1152 -
             C47358 * C1161) *
                C15776 +
            (C15773 * C1163 - C15769 * C1178 + C15774 * C1164 -
             C47358 * C1179) *
                C47389) *
               C47294 * C47374) *
              C47073 * C259 +
          (((C15769 * C126 - C15773 * C119 + C47358 * C130 - C15774 * C120) *
                C15775 +
            (C15769 * C140 - C15773 * C129 + C47358 * C141 - C15774 * C131) *
                C15771 +
            (C15956 - C15957 + C15958 - C15959) * C15776 +
            (C15960 - C15961 + C15962 - C15963) * C47389) *
               C47294 * C47411 +
           ((C15773 * C416 - C15769 * C426 + C15774 * C420 - C47358 * C436) *
                C15775 +
            (C15773 * C429 - C15769 * C446 + C15774 * C437 - C47358 * C450) *
                C15771 +
            (C15773 * C814 - C15769 * C819 + C15774 * C815 - C47358 * C823) *
                C15776 +
            (C15773 * C822 - C15769 * C829 + C15774 * C824 - C47358 * C830) *
                C47389) *
               C47294 * C47400 +
           ((C15769 * C432 - C15773 * C419 + C47358 * C438 - C15774 * C421) *
                C15775 +
            (C15769 * C449 - C15773 * C435 + C47358 * C451 - C15774 * C439) *
                C15771 +
            (C15769 * C1161 - C15773 * C1152 + C47358 * C2015 -
             C15774 * C2014) *
                C15776 +
            (C15769 * C1179 - C15773 * C1164 + C47358 * C2017 -
             C15774 * C2016) *
                C47389) *
               C47294 * C47374) *
              C47073 * C47365)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C15769 * C124 - C15773 * C117 + C47358 * C125 - C15774 * C118) *
                C15775 +
            (C15769 * C138 - C15773 * C127 + C47358 * C139 - C15774 * C128) *
                C15771 +
            (C15924 - C15925 + C15926 - C15927) * C15776 +
            (C15928 - C15929 + C15930 - C15931) * C47389) *
               C47294 * C47091 * C942 +
           ((C15925 - C15924 + C15927 - C15926) * C15775 +
            (C15929 - C15928 + C15931 - C15930) * C15771 +
            (C15932 - C15933 + C15934 - C15935) * C15776 +
            (C15936 - C15937 + C15938 - C15939) * C47389) *
               C47294 * C47091 * C943 +
           ((C15933 - C15932 + C15935 - C15934) * C15775 +
            (C15937 - C15936 + C15939 - C15938) * C15771 +
            (C15769 * C1022 - C15773 * C1016 + C47358 * C1023 -
             C15774 * C1017) *
                C15776 +
            (C15769 * C1034 - C15773 * C1025 + C47358 * C1035 -
             C15774 * C1026) *
                C47389) *
               C47294 * C47091 * C47371) *
              C47407 +
          (((C15773 * C118 - C15769 * C125 + C15774 * C119 - C47358 * C126) *
                C15775 +
            (C15773 * C128 - C15769 * C139 + C15774 * C129 - C47358 * C140) *
                C15771 +
            (C15940 - C15941 + C15942 - C15943) * C15776 +
            (C15944 - C15945 + C15946 - C15947) * C47389) *
               C47294 * C47091 * C942 +
           ((C15941 - C15940 + C15943 - C15942) * C15775 +
            (C15945 - C15944 + C15947 - C15946) * C15771 +
            (C15948 - C15949 + C15950 - C15951) * C15776 +
            (C15952 - C15953 + C15954 - C15955) * C47389) *
               C47294 * C47091 * C943 +
           ((C15949 - C15948 + C15951 - C15950) * C15775 +
            (C15953 - C15952 + C15955 - C15954) * C15771 +
            (C15773 * C1017 - C15769 * C1023 + C15774 * C1018 -
             C47358 * C1024) *
                C15776 +
            (C15773 * C1026 - C15769 * C1035 + C15774 * C1027 -
             C47358 * C1036) *
                C47389) *
               C47294 * C47091 * C47371) *
              C47394 +
          (((C15769 * C126 - C15773 * C119 + C47358 * C130 - C15774 * C120) *
                C15775 +
            (C15769 * C140 - C15773 * C129 + C47358 * C141 - C15774 * C131) *
                C15771 +
            (C15956 - C15957 + C15958 - C15959) * C15776 +
            (C15960 - C15961 + C15962 - C15963) * C47389) *
               C47294 * C47091 * C942 +
           ((C15957 - C15956 + C15959 - C15958) * C15775 +
            (C15961 - C15960 + C15963 - C15962) * C15771 +
            (C15964 - C15965 + C15966 - C15967) * C15776 +
            (C15968 - C15969 + C15970 - C15971) * C47389) *
               C47294 * C47091 * C943 +
           ((C15965 - C15964 + C15967 - C15966) * C15775 +
            (C15969 - C15968 + C15971 - C15970) * C15771 +
            (C15769 * C1024 - C15773 * C1018 + C47358 * C1291 -
             C15774 * C1290) *
                C15776 +
            (C15769 * C1036 - C15773 * C1027 + C47358 * C1293 -
             C15774 * C1292) *
                C47389) *
               C47294 * C47091 * C47371) *
              C47365)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C15769 * C124 - C15773 * C117 + C47358 * C125 - C15774 * C118) *
               C15775 +
           (C15769 * C138 - C15773 * C127 + C47358 * C139 - C15774 * C128) *
               C15771 +
           (C15924 - C15925 + C15926 - C15927) * C15776 +
           (C15928 - C15929 + C15930 - C15931) * C47389) *
              C47294 * C47091 * C1010 +
          ((C15925 - C15924 + C15927 - C15926) * C15775 +
           (C15929 - C15928 + C15931 - C15930) * C15771 +
           (C15932 - C15933 + C15934 - C15935) * C15776 +
           (C15936 - C15937 + C15938 - C15939) * C47389) *
              C47294 * C47091 * C1011 +
          ((C15933 - C15932 + C15935 - C15934) * C15775 +
           (C15937 - C15936 + C15939 - C15938) * C15771 +
           (C16832 - C16833 + C16834 - C16835) * C15776 +
           (C16836 - C16837 + C16838 - C16839) * C47389) *
              C47294 * C47091 * C1012 +
          ((C16833 - C16832 + C16835 - C16834) * C15775 +
           (C16837 - C16836 + C16839 - C16838) * C15771 +
           (C16840 - C16841 + C16842 - C16843) * C15776 +
           (C16844 - C16845 + C16846 - C16847) * C47389) *
              C47294 * C47091 * C1013 +
          ((C16841 - C16840 + C16843 - C16842) * C15775 +
           (C16845 - C16844 + C16847 - C16846) * C15771 +
           (C15769 * C5639 - C15773 * C5637 + C47358 * C5640 - C15774 * C5638) *
               C15776 +
           (C15769 * C5643 - C15773 * C5641 + C47358 * C5644 - C15774 * C5642) *
               C47389) *
              C47294 * C47091 * C1014) *
         C47045) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C15769 * C124 - C15773 * C117 + C47358 * C125 - C15774 * C118) *
                C15775 +
            (C15769 * C138 - C15773 * C127 + C47358 * C139 - C15774 * C128) *
                C15771 +
            (C15924 - C15925 + C15926 - C15927) * C15776 +
            (C15928 - C15929 + C15930 - C15931) * C47389) *
               C47294 * C47411 +
           ((C15773 * C414 - C15769 * C424 + C15774 * C415 - C47358 * C425) *
                C15775 +
            (C15773 * C427 - C15769 * C444 + C15774 * C428 - C47358 * C445) *
                C15771 +
            (C16580 - C16581 + C16582 - C16583) * C15776 +
            (C16584 - C16585 + C16586 - C16587) * C47389) *
               C47294 * C47400 +
           ((C15769 * C430 - C15773 * C417 + C47358 * C431 - C15774 * C418) *
                C15775 +
            (C15769 * C447 - C15773 * C433 + C47358 * C448 - C15774 * C434) *
                C15771 +
            (C16994 - C16995 + C16996 - C16997) * C15776 +
            (C16998 - C16999 + C17000 - C17001) * C47389) *
               C47294 * C47374) *
              C942 +
          (((C15925 - C15924 + C15927 - C15926) * C15775 +
            (C15929 - C15928 + C15931 - C15930) * C15771 +
            (C15932 - C15933 + C15934 - C15935) * C15776 +
            (C15936 - C15937 + C15938 - C15939) * C47389) *
               C47294 * C47411 +
           ((C16581 - C16580 + C16583 - C16582) * C15775 +
            (C16585 - C16584 + C16587 - C16586) * C15771 +
            (C17002 - C17003 + C17004 - C17005) * C15776 +
            (C17006 - C17007 + C17008 - C17009) * C47389) *
               C47294 * C47400 +
           ((C16995 - C16994 + C16997 - C16996) * C15775 +
            (C16999 - C16998 + C17001 - C17000) * C15771 +
            (C17010 - C17011 + C17012 - C17013) * C15776 +
            (C17014 - C17015 + C17016 - C17017) * C47389) *
               C47294 * C47374) *
              C943 +
          (((C15933 - C15932 + C15935 - C15934) * C15775 +
            (C15937 - C15936 + C15939 - C15938) * C15771 +
            (C16832 - C16833 + C16834 - C16835) * C15776 +
            (C16836 - C16837 + C16838 - C16839) * C47389) *
               C47294 * C47411 +
           ((C17003 - C17002 + C17005 - C17004) * C15775 +
            (C17007 - C17006 + C17009 - C17008) * C15771 +
            (C15773 * C1542 - C15769 * C1545 + C15774 * C1543 -
             C47358 * C1546) *
                C15776 +
            (C15773 * C1548 - C15769 * C1551 + C15774 * C1549 -
             C47358 * C1552) *
                C47389) *
               C47294 * C47400 +
           ((C17011 - C17010 + C17013 - C17012) * C15775 +
            (C17015 - C17014 + C17017 - C17016) * C15771 +
            (C15769 * C5809 - C15773 * C5807 + C47358 * C5810 -
             C15774 * C5808) *
                C15776 +
            (C15769 * C5813 - C15773 * C5811 + C47358 * C5814 -
             C15774 * C5812) *
                C47389) *
               C47294 * C47374) *
              C47371) *
         C47045) /
            (p * q * std::sqrt(p + q));
    d2ee[98] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C15769 * C124 - C15773 * C117 + C47358 * C125 - C15774 * C118) *
                C15775 +
            (C15769 * C138 - C15773 * C127 + C47358 * C139 - C15774 * C128) *
                C15771 +
            (C15924 - C15925 + C15926 - C15927) * C15776 +
            (C15928 - C15929 + C15930 - C15931) * C47389) *
               C47294 * C47340 +
           ((C15773 * C414 - C15769 * C424 + C15774 * C415 - C47358 * C425) *
                C15775 +
            (C15773 * C427 - C15769 * C444 + C15774 * C428 - C47358 * C445) *
                C15771 +
            (C15773 * C812 - C15769 * C817 + C15774 * C813 - C47358 * C818) *
                C15776 +
            (C15773 * C820 - C15769 * C827 + C15774 * C821 - C47358 * C828) *
                C47389) *
               C47294 * C47178) *
              C47073 * C554 +
          (((C15773 * C118 - C15769 * C125 + C15774 * C119 - C47358 * C126) *
                C15775 +
            (C15773 * C128 - C15769 * C139 + C15774 * C129 - C47358 * C140) *
                C15771 +
            (C15940 - C15941 + C15942 - C15943) * C15776 +
            (C15944 - C15945 + C15946 - C15947) * C47389) *
               C47294 * C47340 +
           ((C15769 * C425 - C15773 * C415 + C47358 * C426 - C15774 * C416) *
                C15775 +
            (C15769 * C445 - C15773 * C428 + C47358 * C446 - C15774 * C429) *
                C15771 +
            (C15769 * C818 - C15773 * C813 + C47358 * C819 - C15774 * C814) *
                C15776 +
            (C15769 * C828 - C15773 * C821 + C47358 * C829 - C15774 * C822) *
                C47389) *
               C47294 * C47178) *
              C47073 * C555 +
          (((C15769 * C126 - C15773 * C119 + C47358 * C130 - C15774 * C120) *
                C15775 +
            (C15769 * C140 - C15773 * C129 + C47358 * C141 - C15774 * C131) *
                C15771 +
            (C15956 - C15957 + C15958 - C15959) * C15776 +
            (C15960 - C15961 + C15962 - C15963) * C47389) *
               C47294 * C47340 +
           ((C15773 * C416 - C15769 * C426 + C15774 * C420 - C47358 * C436) *
                C15775 +
            (C15773 * C429 - C15769 * C446 + C15774 * C437 - C47358 * C450) *
                C15771 +
            (C15773 * C814 - C15769 * C819 + C15774 * C815 - C47358 * C823) *
                C15776 +
            (C15773 * C822 - C15769 * C829 + C15774 * C824 - C47358 * C830) *
                C47389) *
               C47294 * C47178) *
              C47073 * C556 +
          (((C15773 * C120 - C15769 * C130 + C15774 * C121 - C47358 * C132) *
                C15775 +
            (C15773 * C131 - C15769 * C141 + C15774 * C133 - C47358 * C142) *
                C15771 +
            (C16248 - C16249 + C16250 - C16251) * C15776 +
            (C16252 - C16253 + C16254 - C16255) * C47389) *
               C47294 * C47340 +
           ((C15769 * C436 - C15773 * C420 + C47358 * C440 - C15774 * C422) *
                C15775 +
            (C15769 * C450 - C15773 * C437 + C47358 * C452 - C15774 * C441) *
                C15771 +
            (C15769 * C823 - C15773 * C815 + C47358 * C825 - C15774 * C816) *
                C15776 +
            (C15769 * C830 - C15773 * C824 + C47358 * C831 - C15774 * C826) *
                C47389) *
               C47294 * C47178) *
              C47073 * C47375)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C15769 * C124 - C15773 * C117 + C47358 * C125 - C15774 * C118) *
                 C15775 +
             (C15769 * C138 - C15773 * C127 + C47358 * C139 - C15774 * C128) *
                 C15771 +
             (C15924 - C15925 + C15926 - C15927) * C15776 +
             (C15928 - C15929 + C15930 - C15931) * C47389) *
                C47294 * C47340 +
            ((C15773 * C414 - C15769 * C424 + C15774 * C415 - C47358 * C425) *
                 C15775 +
             (C15773 * C427 - C15769 * C444 + C15774 * C428 - C47358 * C445) *
                 C15771 +
             (C16580 - C16581 + C16582 - C16583) * C15776 +
             (C16584 - C16585 + C16586 - C16587) * C47389) *
                C47294 * C47178) *
               C942 +
           (((C15925 - C15924 + C15927 - C15926) * C15775 +
             (C15929 - C15928 + C15931 - C15930) * C15771 +
             (C15932 - C15933 + C15934 - C15935) * C15776 +
             (C15936 - C15937 + C15938 - C15939) * C47389) *
                C47294 * C47340 +
            ((C16581 - C16580 + C16583 - C16582) * C15775 +
             (C16585 - C16584 + C16587 - C16586) * C15771 +
             (C17002 - C17003 + C17004 - C17005) * C15776 +
             (C17006 - C17007 + C17008 - C17009) * C47389) *
                C47294 * C47178) *
               C943 +
           (((C15933 - C15932 + C15935 - C15934) * C15775 +
             (C15937 - C15936 + C15939 - C15938) * C15771 +
             (C16832 - C16833 + C16834 - C16835) * C15776 +
             (C16836 - C16837 + C16838 - C16839) * C47389) *
                C47294 * C47340 +
            ((C17003 - C17002 + C17005 - C17004) * C15775 +
             (C17007 - C17006 + C17009 - C17008) * C15771 +
             (C15773 * C1542 - C15769 * C1545 + C15774 * C1543 -
              C47358 * C1546) *
                 C15776 +
             (C15773 * C1548 - C15769 * C1551 + C15774 * C1549 -
              C47358 * C1552) *
                 C47389) *
                C47294 * C47178) *
               C47371) *
              C47325 +
          ((((C15773 * C118 - C15769 * C125 + C15774 * C119 - C47358 * C126) *
                 C15775 +
             (C15773 * C128 - C15769 * C139 + C15774 * C129 - C47358 * C140) *
                 C15771 +
             (C15940 - C15941 + C15942 - C15943) * C15776 +
             (C15944 - C15945 + C15946 - C15947) * C47389) *
                C47294 * C47340 +
            ((C15769 * C425 - C15773 * C415 + C47358 * C426 - C15774 * C416) *
                 C15775 +
             (C15769 * C445 - C15773 * C428 + C47358 * C446 - C15774 * C429) *
                 C15771 +
             (C16588 - C16589 + C16590 - C16591) * C15776 +
             (C16592 - C16593 + C16594 - C16595) * C47389) *
                C47294 * C47178) *
               C942 +
           (((C15941 - C15940 + C15943 - C15942) * C15775 +
             (C15945 - C15944 + C15947 - C15946) * C15771 +
             (C15948 - C15949 + C15950 - C15951) * C15776 +
             (C15952 - C15953 + C15954 - C15955) * C47389) *
                C47294 * C47340 +
            ((C16589 - C16588 + C16591 - C16590) * C15775 +
             (C16593 - C16592 + C16595 - C16594) * C15771 +
             (C17350 - C17351 + C17352 - C17353) * C15776 +
             (C17354 - C17355 + C17356 - C17357) * C47389) *
                C47294 * C47178) *
               C943 +
           (((C15949 - C15948 + C15951 - C15950) * C15775 +
             (C15953 - C15952 + C15955 - C15954) * C15771 +
             (C17148 - C17149 + C17150 - C17151) * C15776 +
             (C17152 - C17153 + C17154 - C17155) * C47389) *
                C47294 * C47340 +
            ((C17351 - C17350 + C17353 - C17352) * C15775 +
             (C17355 - C17354 + C17357 - C17356) * C15771 +
             (C15769 * C1546 - C15773 * C1543 + C47358 * C1547 -
              C15774 * C1544) *
                 C15776 +
             (C15769 * C1552 - C15773 * C1549 + C47358 * C1553 -
              C15774 * C1550) *
                 C47389) *
                C47294 * C47178) *
               C47371) *
              C47056)) /
            (p * q * std::sqrt(p + q));
    d2ee[99] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C15769 * C124 - C15773 * C117 + C47358 * C125 - C15774 * C118) *
               C15775 +
           (C15769 * C138 - C15773 * C127 + C47358 * C139 - C15774 * C128) *
               C15771 +
           (C15769 * C271 - C15773 * C261 + C47358 * C272 - C15774 * C262) *
               C15776 +
           (C15769 * C291 - C15773 * C274 + C47358 * C292 - C15774 * C275) *
               C47389) *
              C47294 * C47091 * C47073 * C108 +
          ((C15773 * C118 - C15769 * C125 + C15774 * C119 - C47358 * C126) *
               C15775 +
           (C15773 * C128 - C15769 * C139 + C15774 * C129 - C47358 * C140) *
               C15771 +
           (C15773 * C262 - C15769 * C272 + C15774 * C263 - C47358 * C273) *
               C15776 +
           (C15773 * C275 - C15769 * C292 + C15774 * C276 - C47358 * C293) *
               C47389) *
              C47294 * C47091 * C47073 * C109 +
          ((C15769 * C126 - C15773 * C119 + C47358 * C130 - C15774 * C120) *
               C15775 +
           (C15769 * C140 - C15773 * C129 + C47358 * C141 - C15774 * C131) *
               C15771 +
           (C15769 * C273 - C15773 * C263 + C47358 * C283 - C15774 * C267) *
               C15776 +
           (C15769 * C293 - C15773 * C276 + C47358 * C297 - C15774 * C284) *
               C47389) *
              C47294 * C47091 * C47073 * C110 +
          ((C15773 * C120 - C15769 * C130 + C15774 * C121 - C47358 * C132) *
               C15775 +
           (C15773 * C131 - C15769 * C141 + C15774 * C133 - C47358 * C142) *
               C15771 +
           (C15773 * C267 - C15769 * C283 + C15774 * C269 - C47358 * C287) *
               C15776 +
           (C15773 * C284 - C15769 * C297 + C15774 * C288 - C47358 * C299) *
               C47389) *
              C47294 * C47091 * C47073 * C111 +
          ((C15769 * C132 - C15773 * C121 + C47358 * C134 - C15774 * C122) *
               C15775 +
           (C15769 * C142 - C15773 * C133 + C47358 * C143 - C15774 * C135) *
               C15771 +
           (C15769 * C287 - C15773 * C269 + C47358 * C559 - C15774 * C558) *
               C15776 +
           (C15769 * C299 - C15773 * C288 + C47358 * C561 - C15774 * C560) *
               C47389) *
              C47294 * C47091 * C47073 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C15769 * C124 - C15773 * C117 + C47358 * C125 - C15774 * C118) *
                C15775 +
            (C15769 * C138 - C15773 * C127 + C47358 * C139 - C15774 * C128) *
                C15771 +
            (C15924 - C15925 + C15926 - C15927) * C15776 +
            (C15928 - C15929 + C15930 - C15931) * C47389) *
               C47294 * C47091 * C47410 +
           ((C15925 - C15924 + C15927 - C15926) * C15775 +
            (C15929 - C15928 + C15931 - C15930) * C15771 +
            (C15932 - C15933 + C15934 - C15935) * C15776 +
            (C15936 - C15937 + C15938 - C15939) * C47389) *
               C47294 * C47091 * C47398 +
           ((C15933 - C15932 + C15935 - C15934) * C15775 +
            (C15937 - C15936 + C15939 - C15938) * C15771 +
            (C15769 * C1022 - C15773 * C1016 + C47358 * C1023 -
             C15774 * C1017) *
                C15776 +
            (C15769 * C1034 - C15773 * C1025 + C47358 * C1035 -
             C15774 * C1026) *
                C47389) *
               C47294 * C47091 * C47371) *
              C258 +
          (((C15773 * C118 - C15769 * C125 + C15774 * C119 - C47358 * C126) *
                C15775 +
            (C15773 * C128 - C15769 * C139 + C15774 * C129 - C47358 * C140) *
                C15771 +
            (C15940 - C15941 + C15942 - C15943) * C15776 +
            (C15944 - C15945 + C15946 - C15947) * C47389) *
               C47294 * C47091 * C47410 +
           ((C15941 - C15940 + C15943 - C15942) * C15775 +
            (C15945 - C15944 + C15947 - C15946) * C15771 +
            (C15948 - C15949 + C15950 - C15951) * C15776 +
            (C15952 - C15953 + C15954 - C15955) * C47389) *
               C47294 * C47091 * C47398 +
           ((C15949 - C15948 + C15951 - C15950) * C15775 +
            (C15953 - C15952 + C15955 - C15954) * C15771 +
            (C15773 * C1017 - C15769 * C1023 + C15774 * C1018 -
             C47358 * C1024) *
                C15776 +
            (C15773 * C1026 - C15769 * C1035 + C15774 * C1027 -
             C47358 * C1036) *
                C47389) *
               C47294 * C47091 * C47371) *
              C259 +
          (((C15769 * C126 - C15773 * C119 + C47358 * C130 - C15774 * C120) *
                C15775 +
            (C15769 * C140 - C15773 * C129 + C47358 * C141 - C15774 * C131) *
                C15771 +
            (C15956 - C15957 + C15958 - C15959) * C15776 +
            (C15960 - C15961 + C15962 - C15963) * C47389) *
               C47294 * C47091 * C47410 +
           ((C15957 - C15956 + C15959 - C15958) * C15775 +
            (C15961 - C15960 + C15963 - C15962) * C15771 +
            (C15964 - C15965 + C15966 - C15967) * C15776 +
            (C15968 - C15969 + C15970 - C15971) * C47389) *
               C47294 * C47091 * C47398 +
           ((C15965 - C15964 + C15967 - C15966) * C15775 +
            (C15969 - C15968 + C15971 - C15970) * C15771 +
            (C15769 * C1024 - C15773 * C1018 + C47358 * C1291 -
             C15774 * C1290) *
                C15776 +
            (C15769 * C1036 - C15773 * C1027 + C47358 * C1293 -
             C15774 * C1292) *
                C47389) *
               C47294 * C47091 * C47371) *
              C47365)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C15769 * C124 - C15773 * C117 + C47358 * C125 - C15774 * C118) *
                C15775 +
            (C15769 * C138 - C15773 * C127 + C47358 * C139 - C15774 * C128) *
                C15771 +
            (C15924 - C15925 + C15926 - C15927) * C15776 +
            (C15928 - C15929 + C15930 - C15931) * C47389) *
               C47294 * C47091 * C942 +
           ((C15925 - C15924 + C15927 - C15926) * C15775 +
            (C15929 - C15928 + C15931 - C15930) * C15771 +
            (C15932 - C15933 + C15934 - C15935) * C15776 +
            (C15936 - C15937 + C15938 - C15939) * C47389) *
               C47294 * C47091 * C943 +
           ((C15933 - C15932 + C15935 - C15934) * C15775 +
            (C15937 - C15936 + C15939 - C15938) * C15771 +
            (C15769 * C1022 - C15773 * C1016 + C47358 * C1023 -
             C15774 * C1017) *
                C15776 +
            (C15769 * C1034 - C15773 * C1025 + C47358 * C1035 -
             C15774 * C1026) *
                C47389) *
               C47294 * C47091 * C47371) *
              C47407 +
          (((C15773 * C118 - C15769 * C125 + C15774 * C119 - C47358 * C126) *
                C15775 +
            (C15773 * C128 - C15769 * C139 + C15774 * C129 - C47358 * C140) *
                C15771 +
            (C15940 - C15941 + C15942 - C15943) * C15776 +
            (C15944 - C15945 + C15946 - C15947) * C47389) *
               C47294 * C47091 * C942 +
           ((C15941 - C15940 + C15943 - C15942) * C15775 +
            (C15945 - C15944 + C15947 - C15946) * C15771 +
            (C15948 - C15949 + C15950 - C15951) * C15776 +
            (C15952 - C15953 + C15954 - C15955) * C47389) *
               C47294 * C47091 * C943 +
           ((C15949 - C15948 + C15951 - C15950) * C15775 +
            (C15953 - C15952 + C15955 - C15954) * C15771 +
            (C15773 * C1017 - C15769 * C1023 + C15774 * C1018 -
             C47358 * C1024) *
                C15776 +
            (C15773 * C1026 - C15769 * C1035 + C15774 * C1027 -
             C47358 * C1036) *
                C47389) *
               C47294 * C47091 * C47371) *
              C47394 +
          (((C15769 * C126 - C15773 * C119 + C47358 * C130 - C15774 * C120) *
                C15775 +
            (C15769 * C140 - C15773 * C129 + C47358 * C141 - C15774 * C131) *
                C15771 +
            (C15956 - C15957 + C15958 - C15959) * C15776 +
            (C15960 - C15961 + C15962 - C15963) * C47389) *
               C47294 * C47091 * C942 +
           ((C15957 - C15956 + C15959 - C15958) * C15775 +
            (C15961 - C15960 + C15963 - C15962) * C15771 +
            (C15964 - C15965 + C15966 - C15967) * C15776 +
            (C15968 - C15969 + C15970 - C15971) * C47389) *
               C47294 * C47091 * C943 +
           ((C15965 - C15964 + C15967 - C15966) * C15775 +
            (C15969 - C15968 + C15971 - C15970) * C15771 +
            (C15769 * C1024 - C15773 * C1018 + C47358 * C1291 -
             C15774 * C1290) *
                C15776 +
            (C15769 * C1036 - C15773 * C1027 + C47358 * C1293 -
             C15774 * C1292) *
                C47389) *
               C47294 * C47091 * C47371) *
              C47365)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C15769 * C124 - C15773 * C117 + C47358 * C125 - C15774 * C118) *
               C15775 +
           (C15769 * C138 - C15773 * C127 + C47358 * C139 - C15774 * C128) *
               C15771 +
           (C15924 - C15925 + C15926 - C15927) * C15776 +
           (C15928 - C15929 + C15930 - C15931) * C47389) *
              C47294 * C47091 * C1010 +
          ((C15925 - C15924 + C15927 - C15926) * C15775 +
           (C15929 - C15928 + C15931 - C15930) * C15771 +
           (C15932 - C15933 + C15934 - C15935) * C15776 +
           (C15936 - C15937 + C15938 - C15939) * C47389) *
              C47294 * C47091 * C1011 +
          ((C15933 - C15932 + C15935 - C15934) * C15775 +
           (C15937 - C15936 + C15939 - C15938) * C15771 +
           (C16832 - C16833 + C16834 - C16835) * C15776 +
           (C16836 - C16837 + C16838 - C16839) * C47389) *
              C47294 * C47091 * C1012 +
          ((C16833 - C16832 + C16835 - C16834) * C15775 +
           (C16837 - C16836 + C16839 - C16838) * C15771 +
           (C16840 - C16841 + C16842 - C16843) * C15776 +
           (C16844 - C16845 + C16846 - C16847) * C47389) *
              C47294 * C47091 * C1013 +
          ((C16841 - C16840 + C16843 - C16842) * C15775 +
           (C16845 - C16844 + C16847 - C16846) * C15771 +
           (C15769 * C5639 - C15773 * C5637 + C47358 * C5640 - C15774 * C5638) *
               C15776 +
           (C15769 * C5643 - C15773 * C5641 + C47358 * C5644 - C15774 * C5642) *
               C47389) *
              C47294 * C47091 * C1014) *
         C47045) /
            (p * q * std::sqrt(p + q));
    d2ee[100] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C47018 * C124 - C21369 * C117) * C21370 +
            (C47018 * C138 - C21369 * C127) * C21366 +
            (C21484 - C21485) * C21371 + (C21486 - C21487) * C21367 +
            C21520 * C21372 + C21521 * C21368) *
               C47294 * C47091 * C47132 +
           ((C21485 - C21484) * C21370 + (C21487 - C21486) * C21366 +
            (C21489 - C21488) * C21371 + (C21491 - C21490) * C21367 +
            C22186 * C21372 + C22187 * C21368) *
               C47294 * C47091 * C47139 +
           (C21520 * C21370 + C21521 * C21366 + (C21493 - C21492) * C21371 +
            (C21495 - C21494) * C21367 + C22196 * C21372 + C22197 * C21368) *
               C47294 * C47091 * C2700) *
              C47050 +
          (((C21369 * C118 - C47018 * C125) * C21370 +
            (C21369 * C128 - C47018 * C139) * C21366 +
            (C21496 - C21497) * C21371 + (C21498 - C21499) * C21367 +
            C21522 * C21372 + C21523 * C21368) *
               C47294 * C47091 * C47132 +
           ((C21497 - C21496) * C21370 + (C21499 - C21498) * C21366 +
            (C21501 - C21500) * C21371 + (C21503 - C21502) * C21367 +
            C22430 * C21372 + C22431 * C21368) *
               C47294 * C47091 * C47139 +
           (C21522 * C21370 + C21523 * C21366 + (C21505 - C21504) * C21371 +
            (C21507 - C21506) * C21367 + (C22432 - C22433) * C21372 +
            (C22434 - C22435) * C21368) *
               C47294 * C47091 * C2700) *
              C47059 +
          (((C47018 * C126 - C21369 * C119) * C21370 +
            (C47018 * C140 - C21369 * C129) * C21366 +
            (C21508 - C21509) * C21371 + (C21510 - C21511) * C21367 +
            C21524 * C21372 + C21525 * C21368) *
               C47294 * C47091 * C47132 +
           ((C21509 - C21508) * C21370 + (C21511 - C21510) * C21366 +
            (C21513 - C21512) * C21371 + (C21515 - C21514) * C21367 +
            (C21516 - C21517) * C21372 + (C21518 - C21519) * C21368) *
               C47294 * C47091 * C47139 +
           (C21524 * C21370 + C21525 * C21366 + (C21517 - C21516) * C21371 +
            (C21519 - C21518) * C21367 +
            (C47018 * C1030 - C21369 * C1021) * C21372 +
            (C47018 * C1039 - C21369 * C1033) * C21368) *
               C47294 * C47091 * C2700) *
              C2703)) /
        (p * q * std::sqrt(p + q));
    d2ee[101] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C47018 * C124 - C21369 * C117) * C21370 +
             (C47018 * C138 - C21369 * C127) * C21366 +
             (C21484 - C21485) * C21371 + (C21486 - C21487) * C21367 +
             C21520 * C21372 + C21521 * C21368) *
                C47294 * C47340 +
            ((C21369 * C414 - C47018 * C424) * C21370 +
             (C21369 * C427 - C47018 * C444) * C21366 +
             (C21986 - C21987) * C21371 + (C21988 - C21989) * C21367 +
             C22312 * C21372 + C22313 * C21368) *
                C47294 * C47178) *
               C47132 +
           (((C21485 - C21484) * C21370 + (C21487 - C21486) * C21366 +
             (C21489 - C21488) * C21371 + (C21491 - C21490) * C21367 +
             C22186 * C21372 + C22187 * C21368) *
                C47294 * C47340 +
            ((C21987 - C21986) * C21370 + (C21989 - C21988) * C21366 +
             (C21991 - C21990) * C21371 + (C21993 - C21992) * C21367 +
             C22690 * C21372 + C22691 * C21368) *
                C47294 * C47178) *
               C47139 +
           ((C21520 * C21370 + C21521 * C21366 + (C21493 - C21492) * C21371 +
             (C21495 - C21494) * C21367 + C22196 * C21372 + C22197 * C21368) *
                C47294 * C47340 +
            (C22312 * C21370 + C22313 * C21366 + (C22323 - C22322) * C21371 +
             (C22325 - C22324) * C21367 + (C22692 - C22693) * C21372 +
             (C22694 - C22695) * C21368) *
                C47294 * C47178) *
               C2700) *
              C2440 +
          ((((C21369 * C118 - C47018 * C125) * C21370 +
             (C21369 * C128 - C47018 * C139) * C21366 +
             (C21496 - C21497) * C21371 + (C21498 - C21499) * C21367 +
             C21522 * C21372 + C21523 * C21368) *
                C47294 * C47340 +
            ((C47018 * C425 - C21369 * C415) * C21370 +
             (C47018 * C445 - C21369 * C428) * C21366 +
             (C21994 - C21995) * C21371 + (C21996 - C21997) * C21367 +
             C22582 * C21372 + C22583 * C21368) *
                C47294 * C47178) *
               C47132 +
           (((C21497 - C21496) * C21370 + (C21499 - C21498) * C21366 +
             (C21501 - C21500) * C21371 + (C21503 - C21502) * C21367 +
             C22430 * C21372 + C22431 * C21368) *
                C47294 * C47340 +
            ((C21995 - C21994) * C21370 + (C21997 - C21996) * C21366 +
             (C21999 - C21998) * C21371 + (C22001 - C22000) * C21367 +
             (C22584 - C22585) * C21372 + (C22586 - C22587) * C21368) *
                C47294 * C47178) *
               C47139 +
           ((C21522 * C21370 + C21523 * C21366 + (C21505 - C21504) * C21371 +
             (C21507 - C21506) * C21367 + (C22432 - C22433) * C21372 +
             (C22434 - C22435) * C21368) *
                C47294 * C47340 +
            (C22582 * C21370 + C22583 * C21366 + (C22585 - C22584) * C21371 +
             (C22587 - C22586) * C21367 +
             (C47018 * C6312 - C21369 * C6310) * C21372 +
             (C47018 * C6316 - C21369 * C6314) * C21368) *
                C47294 * C47178) *
               C2700) *
              C47056)) /
        (p * q * std::sqrt(p + q));
    d2ee[102] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C47018 * C124 - C21369 * C117) * C21370 +
            (C47018 * C138 - C21369 * C127) * C21366 +
            (C21484 - C21485) * C21371 + (C21486 - C21487) * C21367 +
            C21520 * C21372 + C21521 * C21368) *
               C47294 * C47091 * C47417 +
           ((C21485 - C21484) * C21370 + (C21487 - C21486) * C21366 +
            (C21489 - C21488) * C21371 + (C21491 - C21490) * C21367 +
            C22186 * C21372 + C22187 * C21368) *
               C47294 * C47091 * C47413 +
           (C21520 * C21370 + C21521 * C21366 + (C21493 - C21492) * C21371 +
            (C21495 - C21494) * C21367 + C22196 * C21372 + C22197 * C21368) *
               C47294 * C47091 * C47403 +
           (C22186 * C21370 + C22187 * C21366 + (C22189 - C22188) * C21371 +
            (C22191 - C22190) * C21367 + (C22192 - C22193) * C21372 +
            (C22194 - C22195) * C21368) *
               C47294 * C47091 * C47381) *
              C2440 +
          (((C21369 * C118 - C47018 * C125) * C21370 +
            (C21369 * C128 - C47018 * C139) * C21366 +
            (C21496 - C21497) * C21371 + (C21498 - C21499) * C21367 +
            C21522 * C21372 + C21523 * C21368) *
               C47294 * C47091 * C47417 +
           ((C21497 - C21496) * C21370 + (C21499 - C21498) * C21366 +
            (C21501 - C21500) * C21371 + (C21503 - C21502) * C21367 +
            C22430 * C21372 + C22431 * C21368) *
               C47294 * C47091 * C47413 +
           (C21522 * C21370 + C21523 * C21366 + (C21505 - C21504) * C21371 +
            (C21507 - C21506) * C21367 + (C22432 - C22433) * C21372 +
            (C22434 - C22435) * C21368) *
               C47294 * C47091 * C47403 +
           (C22430 * C21370 + C22431 * C21366 + (C22433 - C22432) * C21371 +
            (C22435 - C22434) * C21367 +
            (C47018 * C5640 - C21369 * C5638) * C21372 +
            (C47018 * C5644 - C21369 * C5642) * C21368) *
               C47294 * C47091 * C47381) *
              C47056)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C47018 * C124 - C21369 * C117) * C21370 +
            (C47018 * C138 - C21369 * C127) * C21366 +
            (C21484 - C21485) * C21371 + (C21486 - C21487) * C21367 +
            C21520 * C21372 + C21521 * C21368) *
               C47294 * C47091 * C2332 +
           ((C21485 - C21484) * C21370 + (C21487 - C21486) * C21366 +
            (C21489 - C21488) * C21371 + (C21491 - C21490) * C21367 +
            C22186 * C21372 + C22187 * C21368) *
               C47294 * C47091 * C47136) *
              C47416 +
          (((C21369 * C118 - C47018 * C125) * C21370 +
            (C21369 * C128 - C47018 * C139) * C21366 +
            (C21496 - C21497) * C21371 + (C21498 - C21499) * C21367 +
            C21522 * C21372 + C21523 * C21368) *
               C47294 * C47091 * C2332 +
           ((C21497 - C21496) * C21370 + (C21499 - C21498) * C21366 +
            (C21501 - C21500) * C21371 + (C21503 - C21502) * C21367 +
            C22430 * C21372 + C22431 * C21368) *
               C47294 * C47091 * C47136) *
              C47409 +
          (((C47018 * C126 - C21369 * C119) * C21370 +
            (C47018 * C140 - C21369 * C129) * C21366 +
            (C21508 - C21509) * C21371 + (C21510 - C21511) * C21367 +
            C21524 * C21372 + C21525 * C21368) *
               C47294 * C47091 * C2332 +
           ((C21509 - C21508) * C21370 + (C21511 - C21510) * C21366 +
            (C21513 - C21512) * C21371 + (C21515 - C21514) * C21367 +
            (C21516 - C21517) * C21372 + (C21518 - C21519) * C21368) *
               C47294 * C47091 * C47136) *
              C47396 +
          (((C21369 * C120 - C47018 * C130) * C21370 +
            (C21369 * C131 - C47018 * C141) * C21366 +
            (C21734 - C21735) * C21371 + (C21736 - C21737) * C21367 +
            (C21738 - C21739) * C21372 + (C21740 - C21741) * C21368) *
               C47294 * C47091 * C2332 +
           ((C21735 - C21734) * C21370 + (C21737 - C21736) * C21366 +
            (C21739 - C21738) * C21371 + (C21741 - C21740) * C21367 +
            (C47018 * C1291 - C21369 * C1290) * C21372 +
            (C47018 * C1293 - C21369 * C1292) * C21368) *
               C47294 * C47091 * C47136) *
              C47375)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C47018 * C124 - C21369 * C117) * C21370 +
             (C47018 * C138 - C21369 * C127) * C21366 +
             (C21484 - C21485) * C21371 + (C21486 - C21487) * C21367 +
             C21520 * C21372 + C21521 * C21368) *
                C47294 * C47411 +
            ((C21369 * C414 - C47018 * C424) * C21370 +
             (C21369 * C427 - C47018 * C444) * C21366 +
             (C21986 - C21987) * C21371 + (C21988 - C21989) * C21367 +
             C22312 * C21372 + C22313 * C21368) *
                C47294 * C47400 +
            ((C47018 * C430 - C21369 * C417) * C21370 +
             (C47018 * C447 - C21369 * C433) * C21366 +
             (C22314 - C22315) * C21371 + (C22316 - C22317) * C21367 +
             C22330 * C21372 + C22331 * C21368) *
                C47294 * C47374) *
               C2332 +
           (((C21485 - C21484) * C21370 + (C21487 - C21486) * C21366 +
             (C21489 - C21488) * C21371 + (C21491 - C21490) * C21367 +
             C22186 * C21372 + C22187 * C21368) *
                C47294 * C47411 +
            ((C21987 - C21986) * C21370 + (C21989 - C21988) * C21366 +
             (C21991 - C21990) * C21371 + (C21993 - C21992) * C21367 +
             C22690 * C21372 + C22691 * C21368) *
                C47294 * C47400 +
            ((C22315 - C22314) * C21370 + (C22317 - C22316) * C21366 +
             (C22319 - C22318) * C21371 + (C22321 - C22320) * C21367 +
             (C22326 - C22327) * C21372 + (C22328 - C22329) * C21368) *
                C47294 * C47374) *
               C47136) *
              C2440 +
          ((((C21369 * C118 - C47018 * C125) * C21370 +
             (C21369 * C128 - C47018 * C139) * C21366 +
             (C21496 - C21497) * C21371 + (C21498 - C21499) * C21367 +
             C21522 * C21372 + C21523 * C21368) *
                C47294 * C47411 +
            ((C47018 * C425 - C21369 * C415) * C21370 +
             (C47018 * C445 - C21369 * C428) * C21366 +
             (C21994 - C21995) * C21371 + (C21996 - C21997) * C21367 +
             C22582 * C21372 + C22583 * C21368) *
                C47294 * C47400 +
            ((C21369 * C418 - C47018 * C431) * C21370 +
             (C21369 * C434 - C47018 * C448) * C21366 +
             (C23128 - C23129) * C21371 + (C23130 - C23131) * C21367 +
             (C23132 - C23133) * C21372 + (C23134 - C23135) * C21368) *
                C47294 * C47374) *
               C2332 +
           (((C21497 - C21496) * C21370 + (C21499 - C21498) * C21366 +
             (C21501 - C21500) * C21371 + (C21503 - C21502) * C21367 +
             C22430 * C21372 + C22431 * C21368) *
                C47294 * C47411 +
            ((C21995 - C21994) * C21370 + (C21997 - C21996) * C21366 +
             (C21999 - C21998) * C21371 + (C22001 - C22000) * C21367 +
             (C22584 - C22585) * C21372 + (C22586 - C22587) * C21368) *
                C47294 * C47400 +
            ((C23129 - C23128) * C21370 + (C23131 - C23130) * C21366 +
             (C23133 - C23132) * C21371 + (C23135 - C23134) * C21367 +
             (C47018 * C5810 - C21369 * C5808) * C21372 +
             (C47018 * C5814 - C21369 * C5812) * C21368) *
                C47294 * C47374) *
               C47136) *
              C47056)) /
            (p * q * std::sqrt(p + q));
    d2ee[103] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((((C47018 * C124 - C21369 * C117) * C21370 +
                      (C47018 * C138 - C21369 * C127) * C21366 +
                      (C21484 - C21485) * C21371 + (C21486 - C21487) * C21367 +
                      C21520 * C21372 + C21521 * C21368) *
                         C47294 * C47340 +
                     ((C21369 * C414 - C47018 * C424) * C21370 +
                      (C21369 * C427 - C47018 * C444) * C21366 +
                      (C21986 - C21987) * C21371 + (C21988 - C21989) * C21367 +
                      C22312 * C21372 + C22313 * C21368) *
                         C47294 * C47178) *
                        C2332 +
                    (((C21485 - C21484) * C21370 + (C21487 - C21486) * C21366 +
                      (C21489 - C21488) * C21371 + (C21491 - C21490) * C21367 +
                      C22186 * C21372 + C22187 * C21368) *
                         C47294 * C47340 +
                     ((C21987 - C21986) * C21370 + (C21989 - C21988) * C21366 +
                      (C21991 - C21990) * C21371 + (C21993 - C21992) * C21367 +
                      C22690 * C21372 + C22691 * C21368) *
                         C47294 * C47178) *
                        C47136) *
                       C47050 +
                   ((((C21369 * C118 - C47018 * C125) * C21370 +
                      (C21369 * C128 - C47018 * C139) * C21366 +
                      (C21496 - C21497) * C21371 + (C21498 - C21499) * C21367 +
                      C21522 * C21372 + C21523 * C21368) *
                         C47294 * C47340 +
                     ((C47018 * C425 - C21369 * C415) * C21370 +
                      (C47018 * C445 - C21369 * C428) * C21366 +
                      (C21994 - C21995) * C21371 + (C21996 - C21997) * C21367 +
                      C22582 * C21372 + C22583 * C21368) *
                         C47294 * C47178) *
                        C2332 +
                    (((C21497 - C21496) * C21370 + (C21499 - C21498) * C21366 +
                      (C21501 - C21500) * C21371 + (C21503 - C21502) * C21367 +
                      C22430 * C21372 + C22431 * C21368) *
                         C47294 * C47340 +
                     ((C21995 - C21994) * C21370 + (C21997 - C21996) * C21366 +
                      (C21999 - C21998) * C21371 + (C22001 - C22000) * C21367 +
                      (C22584 - C22585) * C21372 + (C22586 - C22587) * C21368) *
                         C47294 * C47178) *
                        C47136) *
                       C47059 +
                   ((((C47018 * C126 - C21369 * C119) * C21370 +
                      (C47018 * C140 - C21369 * C129) * C21366 +
                      (C21508 - C21509) * C21371 + (C21510 - C21511) * C21367 +
                      C21524 * C21372 + C21525 * C21368) *
                         C47294 * C47340 +
                     ((C21369 * C416 - C47018 * C426) * C21370 +
                      (C21369 * C429 - C47018 * C446) * C21366 +
                      (C22002 - C22003) * C21371 + (C22004 - C22005) * C21367 +
                      (C22006 - C22007) * C21372 + (C22008 - C22009) * C21368) *
                         C47294 * C47178) *
                        C2332 +
                    (((C21509 - C21508) * C21370 + (C21511 - C21510) * C21366 +
                      (C21513 - C21512) * C21371 + (C21515 - C21514) * C21367 +
                      (C21516 - C21517) * C21372 + (C21518 - C21519) * C21368) *
                         C47294 * C47340 +
                     ((C22003 - C22002) * C21370 + (C22005 - C22004) * C21366 +
                      (C22007 - C22006) * C21371 + (C22009 - C22008) * C21367 +
                      (C47018 * C1547 - C21369 * C1544) * C21372 +
                      (C47018 * C1553 - C21369 * C1550) * C21368) *
                         C47294 * C47178) *
                        C47136) *
                       C2703)) /
                 (p * q * std::sqrt(p + q));
    d2ee[104] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C47018 * C124 - C21369 * C117) * C21370 +
            (C47018 * C138 - C21369 * C127) * C21366 +
            (C21484 - C21485) * C21371 + (C21486 - C21487) * C21367 +
            C21520 * C21372 + C21521 * C21368) *
               C47294 * C47091 * C2332 +
           ((C21485 - C21484) * C21370 + (C21487 - C21486) * C21366 +
            (C21489 - C21488) * C21371 + (C21491 - C21490) * C21367 +
            C22186 * C21372 + C22187 * C21368) *
               C47294 * C47091 * C47136) *
              C47416 +
          (((C21369 * C118 - C47018 * C125) * C21370 +
            (C21369 * C128 - C47018 * C139) * C21366 +
            (C21496 - C21497) * C21371 + (C21498 - C21499) * C21367 +
            C21522 * C21372 + C21523 * C21368) *
               C47294 * C47091 * C2332 +
           ((C21497 - C21496) * C21370 + (C21499 - C21498) * C21366 +
            (C21501 - C21500) * C21371 + (C21503 - C21502) * C21367 +
            C22430 * C21372 + C22431 * C21368) *
               C47294 * C47091 * C47136) *
              C47409 +
          (((C47018 * C126 - C21369 * C119) * C21370 +
            (C47018 * C140 - C21369 * C129) * C21366 +
            (C21508 - C21509) * C21371 + (C21510 - C21511) * C21367 +
            C21524 * C21372 + C21525 * C21368) *
               C47294 * C47091 * C2332 +
           ((C21509 - C21508) * C21370 + (C21511 - C21510) * C21366 +
            (C21513 - C21512) * C21371 + (C21515 - C21514) * C21367 +
            (C21516 - C21517) * C21372 + (C21518 - C21519) * C21368) *
               C47294 * C47091 * C47136) *
              C47396 +
          (((C21369 * C120 - C47018 * C130) * C21370 +
            (C21369 * C131 - C47018 * C141) * C21366 +
            (C21734 - C21735) * C21371 + (C21736 - C21737) * C21367 +
            (C21738 - C21739) * C21372 + (C21740 - C21741) * C21368) *
               C47294 * C47091 * C2332 +
           ((C21735 - C21734) * C21370 + (C21737 - C21736) * C21366 +
            (C21739 - C21738) * C21371 + (C21741 - C21740) * C21367 +
            (C47018 * C1291 - C21369 * C1290) * C21372 +
            (C47018 * C1293 - C21369 * C1292) * C21368) *
               C47294 * C47091 * C47136) *
              C47375)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C47018 * C124 - C21369 * C117) * C21370 +
            (C47018 * C138 - C21369 * C127) * C21366 +
            (C21484 - C21485) * C21371 + (C21486 - C21487) * C21367 +
            C21520 * C21372 + C21521 * C21368) *
               C47294 * C47091 * C47417 +
           ((C21485 - C21484) * C21370 + (C21487 - C21486) * C21366 +
            (C21489 - C21488) * C21371 + (C21491 - C21490) * C21367 +
            C22186 * C21372 + C22187 * C21368) *
               C47294 * C47091 * C47413 +
           (C21520 * C21370 + C21521 * C21366 + (C21493 - C21492) * C21371 +
            (C21495 - C21494) * C21367 + C22196 * C21372 + C22197 * C21368) *
               C47294 * C47091 * C47403 +
           (C22186 * C21370 + C22187 * C21366 + (C22189 - C22188) * C21371 +
            (C22191 - C22190) * C21367 + (C22192 - C22193) * C21372 +
            (C22194 - C22195) * C21368) *
               C47294 * C47091 * C47381) *
              C2440 +
          (((C21369 * C118 - C47018 * C125) * C21370 +
            (C21369 * C128 - C47018 * C139) * C21366 +
            (C21496 - C21497) * C21371 + (C21498 - C21499) * C21367 +
            C21522 * C21372 + C21523 * C21368) *
               C47294 * C47091 * C47417 +
           ((C21497 - C21496) * C21370 + (C21499 - C21498) * C21366 +
            (C21501 - C21500) * C21371 + (C21503 - C21502) * C21367 +
            C22430 * C21372 + C22431 * C21368) *
               C47294 * C47091 * C47413 +
           (C21522 * C21370 + C21523 * C21366 + (C21505 - C21504) * C21371 +
            (C21507 - C21506) * C21367 + (C22432 - C22433) * C21372 +
            (C22434 - C22435) * C21368) *
               C47294 * C47091 * C47403 +
           (C22430 * C21370 + C22431 * C21366 + (C22433 - C22432) * C21371 +
            (C22435 - C22434) * C21367 +
            (C47018 * C5640 - C21369 * C5638) * C21372 +
            (C47018 * C5644 - C21369 * C5642) * C21368) *
               C47294 * C47091 * C47381) *
              C47056)) /
            (p * q * std::sqrt(p + q));
    d2ee[105] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C47018 * C124 - C21369 * C117) * C21370 +
             (C47018 * C138 - C21369 * C127) * C21366 +
             (C21484 - C21485) * C21371 + (C21486 - C21487) * C21367 +
             C21520 * C21372 + C21521 * C21368) *
                C47294 * C3094 +
            ((C21369 * C414 - C47018 * C424) * C21370 +
             (C21369 * C427 - C47018 * C444) * C21366 +
             (C21986 - C21987) * C21371 + (C21988 - C21989) * C21367 +
             C22312 * C21372 + C22313 * C21368) *
                C47294 * C47178) *
               C47132 +
           (((C21485 - C21484) * C21370 + (C21487 - C21486) * C21366 +
             (C21489 - C21488) * C21371 + (C21491 - C21490) * C21367 +
             C22186 * C21372 + C22187 * C21368) *
                C47294 * C3094 +
            ((C21987 - C21986) * C21370 + (C21989 - C21988) * C21366 +
             (C21991 - C21990) * C21371 + (C21993 - C21992) * C21367 +
             C22690 * C21372 + C22691 * C21368) *
                C47294 * C47178) *
               C47139 +
           ((C21520 * C21370 + C21521 * C21366 + (C21493 - C21492) * C21371 +
             (C21495 - C21494) * C21367 + C22196 * C21372 + C22197 * C21368) *
                C47294 * C3094 +
            (C22312 * C21370 + C22313 * C21366 + (C22323 - C22322) * C21371 +
             (C22325 - C22324) * C21367 + (C22692 - C22693) * C21372 +
             (C22694 - C22695) * C21368) *
                C47294 * C47178) *
               C2700) *
              C47325 +
          ((((C21369 * C118 - C47018 * C125) * C21370 +
             (C21369 * C128 - C47018 * C139) * C21366 +
             (C21496 - C21497) * C21371 + (C21498 - C21499) * C21367 +
             C21522 * C21372 + C21523 * C21368) *
                C47294 * C3094 +
            ((C47018 * C425 - C21369 * C415) * C21370 +
             (C47018 * C445 - C21369 * C428) * C21366 +
             (C21994 - C21995) * C21371 + (C21996 - C21997) * C21367 +
             C22582 * C21372 + C22583 * C21368) *
                C47294 * C47178) *
               C47132 +
           (((C21497 - C21496) * C21370 + (C21499 - C21498) * C21366 +
             (C21501 - C21500) * C21371 + (C21503 - C21502) * C21367 +
             C22430 * C21372 + C22431 * C21368) *
                C47294 * C3094 +
            ((C21995 - C21994) * C21370 + (C21997 - C21996) * C21366 +
             (C21999 - C21998) * C21371 + (C22001 - C22000) * C21367 +
             (C22584 - C22585) * C21372 + (C22586 - C22587) * C21368) *
                C47294 * C47178) *
               C47139 +
           ((C21522 * C21370 + C21523 * C21366 + (C21505 - C21504) * C21371 +
             (C21507 - C21506) * C21367 + (C22432 - C22433) * C21372 +
             (C22434 - C22435) * C21368) *
                C47294 * C3094 +
            (C22582 * C21370 + C22583 * C21366 + (C22585 - C22584) * C21371 +
             (C22587 - C22586) * C21367 +
             (C47018 * C6312 - C21369 * C6310) * C21372 +
             (C47018 * C6316 - C21369 * C6314) * C21368) *
                C47294 * C47178) *
               C2700) *
              C47056)) /
        (p * q * std::sqrt(p + q));
    d2ee[106] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C47018 * C124 - C21369 * C117) * C21370 +
            (C47018 * C138 - C21369 * C127) * C21366 +
            (C21484 - C21485) * C21371 + (C21486 - C21487) * C21367 +
            C21520 * C21372 + C21521 * C21368) *
               C47294 * C47174 +
           ((C21369 * C414 - C47018 * C424) * C21370 +
            (C21369 * C427 - C47018 * C444) * C21366 +
            (C21986 - C21987) * C21371 + (C21988 - C21989) * C21367 +
            C22312 * C21372 + C22313 * C21368) *
               C47294 * C47181 +
           ((C47018 * C430 - C21369 * C417) * C21370 +
            (C47018 * C447 - C21369 * C433) * C21366 +
            (C22314 - C22315) * C21371 + (C22316 - C22317) * C21367 +
            C22330 * C21372 + C22331 * C21368) *
               C47294 * C3602) *
              C47132 +
          (((C21485 - C21484) * C21370 + (C21487 - C21486) * C21366 +
            (C21489 - C21488) * C21371 + (C21491 - C21490) * C21367 +
            C22186 * C21372 + C22187 * C21368) *
               C47294 * C47174 +
           ((C21987 - C21986) * C21370 + (C21989 - C21988) * C21366 +
            (C21991 - C21990) * C21371 + (C21993 - C21992) * C21367 +
            C22690 * C21372 + C22691 * C21368) *
               C47294 * C47181 +
           ((C22315 - C22314) * C21370 + (C22317 - C22316) * C21366 +
            (C22319 - C22318) * C21371 + (C22321 - C22320) * C21367 +
            (C22326 - C22327) * C21372 + (C22328 - C22329) * C21368) *
               C47294 * C3602) *
              C47139 +
          ((C21520 * C21370 + C21521 * C21366 + (C21493 - C21492) * C21371 +
            (C21495 - C21494) * C21367 + C22196 * C21372 + C22197 * C21368) *
               C47294 * C47174 +
           (C22312 * C21370 + C22313 * C21366 + (C22323 - C22322) * C21371 +
            (C22325 - C22324) * C21367 + (C22692 - C22693) * C21372 +
            (C22694 - C22695) * C21368) *
               C47294 * C47181 +
           (C22330 * C21370 + C22331 * C21366 + (C22327 - C22326) * C21371 +
            (C22329 - C22328) * C21367 +
            (C47018 * C22308 - C21369 * C22307) * C21372 +
            (C47018 * C22310 - C21369 * C22309) * C21368) *
               C47294 * C3602) *
              C2700) *
         C47045) /
        (p * q * std::sqrt(p + q));
    d2ee[107] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C47018 * C124 - C21369 * C117) * C21370 +
            (C47018 * C138 - C21369 * C127) * C21366 +
            (C21484 - C21485) * C21371 + (C21486 - C21487) * C21367 +
            C21520 * C21372 + C21521 * C21368) *
               C47294 * C3094 +
           ((C21369 * C414 - C47018 * C424) * C21370 +
            (C21369 * C427 - C47018 * C444) * C21366 +
            (C21986 - C21987) * C21371 + (C21988 - C21989) * C21367 +
            C22312 * C21372 + C22313 * C21368) *
               C47294 * C47178) *
              C47417 +
          (((C21485 - C21484) * C21370 + (C21487 - C21486) * C21366 +
            (C21489 - C21488) * C21371 + (C21491 - C21490) * C21367 +
            C22186 * C21372 + C22187 * C21368) *
               C47294 * C3094 +
           ((C21987 - C21986) * C21370 + (C21989 - C21988) * C21366 +
            (C21991 - C21990) * C21371 + (C21993 - C21992) * C21367 +
            C22690 * C21372 + C22691 * C21368) *
               C47294 * C47178) *
              C47413 +
          ((C21520 * C21370 + C21521 * C21366 + (C21493 - C21492) * C21371 +
            (C21495 - C21494) * C21367 + C22196 * C21372 + C22197 * C21368) *
               C47294 * C3094 +
           (C22312 * C21370 + C22313 * C21366 + (C22323 - C22322) * C21371 +
            (C22325 - C22324) * C21367 + (C22692 - C22693) * C21372 +
            (C22694 - C22695) * C21368) *
               C47294 * C47178) *
              C47403 +
          ((C22186 * C21370 + C22187 * C21366 + (C22189 - C22188) * C21371 +
            (C22191 - C22190) * C21367 + (C22192 - C22193) * C21372 +
            (C22194 - C22195) * C21368) *
               C47294 * C3094 +
           (C22690 * C21370 + C22691 * C21366 + (C22693 - C22692) * C21371 +
            (C22695 - C22694) * C21367 +
            (C47018 * C22686 - C21369 * C22685) * C21372 +
            (C47018 * C22688 - C21369 * C22687) * C21368) *
               C47294 * C47178) *
              C47381) *
         C47045) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C47018 * C124 - C21369 * C117) * C21370 +
             (C47018 * C138 - C21369 * C127) * C21366 +
             (C21484 - C21485) * C21371 + (C21486 - C21487) * C21367 +
             C21520 * C21372 + C21521 * C21368) *
                C47294 * C3094 +
            ((C21369 * C414 - C47018 * C424) * C21370 +
             (C21369 * C427 - C47018 * C444) * C21366 +
             (C21986 - C21987) * C21371 + (C21988 - C21989) * C21367 +
             C22312 * C21372 + C22313 * C21368) *
                C47294 * C47178) *
               C2332 +
           (((C21485 - C21484) * C21370 + (C21487 - C21486) * C21366 +
             (C21489 - C21488) * C21371 + (C21491 - C21490) * C21367 +
             C22186 * C21372 + C22187 * C21368) *
                C47294 * C3094 +
            ((C21987 - C21986) * C21370 + (C21989 - C21988) * C21366 +
             (C21991 - C21990) * C21371 + (C21993 - C21992) * C21367 +
             C22690 * C21372 + C22691 * C21368) *
                C47294 * C47178) *
               C47136) *
              C47407 +
          ((((C21369 * C118 - C47018 * C125) * C21370 +
             (C21369 * C128 - C47018 * C139) * C21366 +
             (C21496 - C21497) * C21371 + (C21498 - C21499) * C21367 +
             C21522 * C21372 + C21523 * C21368) *
                C47294 * C3094 +
            ((C47018 * C425 - C21369 * C415) * C21370 +
             (C47018 * C445 - C21369 * C428) * C21366 +
             (C21994 - C21995) * C21371 + (C21996 - C21997) * C21367 +
             C22582 * C21372 + C22583 * C21368) *
                C47294 * C47178) *
               C2332 +
           (((C21497 - C21496) * C21370 + (C21499 - C21498) * C21366 +
             (C21501 - C21500) * C21371 + (C21503 - C21502) * C21367 +
             C22430 * C21372 + C22431 * C21368) *
                C47294 * C3094 +
            ((C21995 - C21994) * C21370 + (C21997 - C21996) * C21366 +
             (C21999 - C21998) * C21371 + (C22001 - C22000) * C21367 +
             (C22584 - C22585) * C21372 + (C22586 - C22587) * C21368) *
                C47294 * C47178) *
               C47136) *
              C47394 +
          ((((C47018 * C126 - C21369 * C119) * C21370 +
             (C47018 * C140 - C21369 * C129) * C21366 +
             (C21508 - C21509) * C21371 + (C21510 - C21511) * C21367 +
             C21524 * C21372 + C21525 * C21368) *
                C47294 * C3094 +
            ((C21369 * C416 - C47018 * C426) * C21370 +
             (C21369 * C429 - C47018 * C446) * C21366 +
             (C22002 - C22003) * C21371 + (C22004 - C22005) * C21367 +
             (C22006 - C22007) * C21372 + (C22008 - C22009) * C21368) *
                C47294 * C47178) *
               C2332 +
           (((C21509 - C21508) * C21370 + (C21511 - C21510) * C21366 +
             (C21513 - C21512) * C21371 + (C21515 - C21514) * C21367 +
             (C21516 - C21517) * C21372 + (C21518 - C21519) * C21368) *
                C47294 * C3094 +
            ((C22003 - C22002) * C21370 + (C22005 - C22004) * C21366 +
             (C22007 - C22006) * C21371 + (C22009 - C22008) * C21367 +
             (C47018 * C1547 - C21369 * C1544) * C21372 +
             (C47018 * C1553 - C21369 * C1550) * C21368) *
                C47294 * C47178) *
               C47136) *
              C47365)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C47018 * C124 - C21369 * C117) * C21370 +
            (C47018 * C138 - C21369 * C127) * C21366 +
            (C21484 - C21485) * C21371 + (C21486 - C21487) * C21367 +
            C21520 * C21372 + C21521 * C21368) *
               C47294 * C47418 +
           ((C21369 * C414 - C47018 * C424) * C21370 +
            (C21369 * C427 - C47018 * C444) * C21366 +
            (C21986 - C21987) * C21371 + (C21988 - C21989) * C21367 +
            C22312 * C21372 + C22313 * C21368) *
               C47294 * C47415 +
           ((C47018 * C430 - C21369 * C417) * C21370 +
            (C47018 * C447 - C21369 * C433) * C21366 +
            (C22314 - C22315) * C21371 + (C22316 - C22317) * C21367 +
            C22330 * C21372 + C22331 * C21368) *
               C47294 * C47406 +
           ((C21369 * C1844 - C47018 * C1850) * C21370 +
            (C21369 * C1853 - C47018 * C1862) * C21366 +
            (C23336 - C23337) * C21371 + (C23338 - C23339) * C21367 +
            (C23340 - C23341) * C21372 + (C23342 - C23343) * C21368) *
               C47294 * C47387) *
              C2332 +
          (((C21485 - C21484) * C21370 + (C21487 - C21486) * C21366 +
            (C21489 - C21488) * C21371 + (C21491 - C21490) * C21367 +
            C22186 * C21372 + C22187 * C21368) *
               C47294 * C47418 +
           ((C21987 - C21986) * C21370 + (C21989 - C21988) * C21366 +
            (C21991 - C21990) * C21371 + (C21993 - C21992) * C21367 +
            C22690 * C21372 + C22691 * C21368) *
               C47294 * C47415 +
           ((C22315 - C22314) * C21370 + (C22317 - C22316) * C21366 +
            (C22319 - C22318) * C21371 + (C22321 - C22320) * C21367 +
            (C22326 - C22327) * C21372 + (C22328 - C22329) * C21368) *
               C47294 * C47406 +
           ((C23337 - C23336) * C21370 + (C23339 - C23338) * C21366 +
            (C23341 - C23340) * C21371 + (C23343 - C23342) * C21367 +
            (C47018 * C23332 - C21369 * C23331) * C21372 +
            (C47018 * C23334 - C21369 * C23333) * C21368) *
               C47294 * C47387) *
              C47136) *
         C47045) /
            (p * q * std::sqrt(p + q));
    d2ee[108] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((((C47018 * C124 - C21369 * C117) * C21370 +
                      (C47018 * C138 - C21369 * C127) * C21366 +
                      (C21484 - C21485) * C21371 + (C21486 - C21487) * C21367 +
                      C21520 * C21372 + C21521 * C21368) *
                         C47294 * C47174 +
                     ((C21369 * C414 - C47018 * C424) * C21370 +
                      (C21369 * C427 - C47018 * C444) * C21366 +
                      (C21986 - C21987) * C21371 + (C21988 - C21989) * C21367 +
                      C22312 * C21372 + C22313 * C21368) *
                         C47294 * C47181 +
                     ((C47018 * C430 - C21369 * C417) * C21370 +
                      (C47018 * C447 - C21369 * C433) * C21366 +
                      (C22314 - C22315) * C21371 + (C22316 - C22317) * C21367 +
                      C22330 * C21372 + C22331 * C21368) *
                         C47294 * C3602) *
                        C2332 +
                    (((C21485 - C21484) * C21370 + (C21487 - C21486) * C21366 +
                      (C21489 - C21488) * C21371 + (C21491 - C21490) * C21367 +
                      C22186 * C21372 + C22187 * C21368) *
                         C47294 * C47174 +
                     ((C21987 - C21986) * C21370 + (C21989 - C21988) * C21366 +
                      (C21991 - C21990) * C21371 + (C21993 - C21992) * C21367 +
                      C22690 * C21372 + C22691 * C21368) *
                         C47294 * C47181 +
                     ((C22315 - C22314) * C21370 + (C22317 - C22316) * C21366 +
                      (C22319 - C22318) * C21371 + (C22321 - C22320) * C21367 +
                      (C22326 - C22327) * C21372 + (C22328 - C22329) * C21368) *
                         C47294 * C3602) *
                        C47136) *
                       C47325 +
                   ((((C21369 * C118 - C47018 * C125) * C21370 +
                      (C21369 * C128 - C47018 * C139) * C21366 +
                      (C21496 - C21497) * C21371 + (C21498 - C21499) * C21367 +
                      C21522 * C21372 + C21523 * C21368) *
                         C47294 * C47174 +
                     ((C47018 * C425 - C21369 * C415) * C21370 +
                      (C47018 * C445 - C21369 * C428) * C21366 +
                      (C21994 - C21995) * C21371 + (C21996 - C21997) * C21367 +
                      C22582 * C21372 + C22583 * C21368) *
                         C47294 * C47181 +
                     ((C21369 * C418 - C47018 * C431) * C21370 +
                      (C21369 * C434 - C47018 * C448) * C21366 +
                      (C23128 - C23129) * C21371 + (C23130 - C23131) * C21367 +
                      (C23132 - C23133) * C21372 + (C23134 - C23135) * C21368) *
                         C47294 * C3602) *
                        C2332 +
                    (((C21497 - C21496) * C21370 + (C21499 - C21498) * C21366 +
                      (C21501 - C21500) * C21371 + (C21503 - C21502) * C21367 +
                      C22430 * C21372 + C22431 * C21368) *
                         C47294 * C47174 +
                     ((C21995 - C21994) * C21370 + (C21997 - C21996) * C21366 +
                      (C21999 - C21998) * C21371 + (C22001 - C22000) * C21367 +
                      (C22584 - C22585) * C21372 + (C22586 - C22587) * C21368) *
                         C47294 * C47181 +
                     ((C23129 - C23128) * C21370 + (C23131 - C23130) * C21366 +
                      (C23133 - C23132) * C21371 + (C23135 - C23134) * C21367 +
                      (C47018 * C5810 - C21369 * C5808) * C21372 +
                      (C47018 * C5814 - C21369 * C5812) * C21368) *
                         C47294 * C3602) *
                        C47136) *
                       C47056)) /
                 (p * q * std::sqrt(p + q));
    d2ee[109] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C47018 * C124 - C21369 * C117) * C21370 +
             (C47018 * C138 - C21369 * C127) * C21366 +
             (C21484 - C21485) * C21371 + (C21486 - C21487) * C21367 +
             C21520 * C21372 + C21521 * C21368) *
                C47294 * C3094 +
            ((C21369 * C414 - C47018 * C424) * C21370 +
             (C21369 * C427 - C47018 * C444) * C21366 +
             (C21986 - C21987) * C21371 + (C21988 - C21989) * C21367 +
             C22312 * C21372 + C22313 * C21368) *
                C47294 * C47178) *
               C2332 +
           (((C21485 - C21484) * C21370 + (C21487 - C21486) * C21366 +
             (C21489 - C21488) * C21371 + (C21491 - C21490) * C21367 +
             C22186 * C21372 + C22187 * C21368) *
                C47294 * C3094 +
            ((C21987 - C21986) * C21370 + (C21989 - C21988) * C21366 +
             (C21991 - C21990) * C21371 + (C21993 - C21992) * C21367 +
             C22690 * C21372 + C22691 * C21368) *
                C47294 * C47178) *
               C47136) *
              C47407 +
          ((((C21369 * C118 - C47018 * C125) * C21370 +
             (C21369 * C128 - C47018 * C139) * C21366 +
             (C21496 - C21497) * C21371 + (C21498 - C21499) * C21367 +
             C21522 * C21372 + C21523 * C21368) *
                C47294 * C3094 +
            ((C47018 * C425 - C21369 * C415) * C21370 +
             (C47018 * C445 - C21369 * C428) * C21366 +
             (C21994 - C21995) * C21371 + (C21996 - C21997) * C21367 +
             C22582 * C21372 + C22583 * C21368) *
                C47294 * C47178) *
               C2332 +
           (((C21497 - C21496) * C21370 + (C21499 - C21498) * C21366 +
             (C21501 - C21500) * C21371 + (C21503 - C21502) * C21367 +
             C22430 * C21372 + C22431 * C21368) *
                C47294 * C3094 +
            ((C21995 - C21994) * C21370 + (C21997 - C21996) * C21366 +
             (C21999 - C21998) * C21371 + (C22001 - C22000) * C21367 +
             (C22584 - C22585) * C21372 + (C22586 - C22587) * C21368) *
                C47294 * C47178) *
               C47136) *
              C47394 +
          ((((C47018 * C126 - C21369 * C119) * C21370 +
             (C47018 * C140 - C21369 * C129) * C21366 +
             (C21508 - C21509) * C21371 + (C21510 - C21511) * C21367 +
             C21524 * C21372 + C21525 * C21368) *
                C47294 * C3094 +
            ((C21369 * C416 - C47018 * C426) * C21370 +
             (C21369 * C429 - C47018 * C446) * C21366 +
             (C22002 - C22003) * C21371 + (C22004 - C22005) * C21367 +
             (C22006 - C22007) * C21372 + (C22008 - C22009) * C21368) *
                C47294 * C47178) *
               C2332 +
           (((C21509 - C21508) * C21370 + (C21511 - C21510) * C21366 +
             (C21513 - C21512) * C21371 + (C21515 - C21514) * C21367 +
             (C21516 - C21517) * C21372 + (C21518 - C21519) * C21368) *
                C47294 * C3094 +
            ((C22003 - C22002) * C21370 + (C22005 - C22004) * C21366 +
             (C22007 - C22006) * C21371 + (C22009 - C22008) * C21367 +
             (C47018 * C1547 - C21369 * C1544) * C21372 +
             (C47018 * C1553 - C21369 * C1550) * C21368) *
                C47294 * C47178) *
               C47136) *
              C47365)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C47018 * C124 - C21369 * C117) * C21370 +
            (C47018 * C138 - C21369 * C127) * C21366 +
            (C21484 - C21485) * C21371 + (C21486 - C21487) * C21367 +
            C21520 * C21372 + C21521 * C21368) *
               C47294 * C3094 +
           ((C21369 * C414 - C47018 * C424) * C21370 +
            (C21369 * C427 - C47018 * C444) * C21366 +
            (C21986 - C21987) * C21371 + (C21988 - C21989) * C21367 +
            C22312 * C21372 + C22313 * C21368) *
               C47294 * C47178) *
              C47417 +
          (((C21485 - C21484) * C21370 + (C21487 - C21486) * C21366 +
            (C21489 - C21488) * C21371 + (C21491 - C21490) * C21367 +
            C22186 * C21372 + C22187 * C21368) *
               C47294 * C3094 +
           ((C21987 - C21986) * C21370 + (C21989 - C21988) * C21366 +
            (C21991 - C21990) * C21371 + (C21993 - C21992) * C21367 +
            C22690 * C21372 + C22691 * C21368) *
               C47294 * C47178) *
              C47413 +
          ((C21520 * C21370 + C21521 * C21366 + (C21493 - C21492) * C21371 +
            (C21495 - C21494) * C21367 + C22196 * C21372 + C22197 * C21368) *
               C47294 * C3094 +
           (C22312 * C21370 + C22313 * C21366 + (C22323 - C22322) * C21371 +
            (C22325 - C22324) * C21367 + (C22692 - C22693) * C21372 +
            (C22694 - C22695) * C21368) *
               C47294 * C47178) *
              C47403 +
          ((C22186 * C21370 + C22187 * C21366 + (C22189 - C22188) * C21371 +
            (C22191 - C22190) * C21367 + (C22192 - C22193) * C21372 +
            (C22194 - C22195) * C21368) *
               C47294 * C3094 +
           (C22690 * C21370 + C22691 * C21366 + (C22693 - C22692) * C21371 +
            (C22695 - C22694) * C21367 +
            (C47018 * C22686 - C21369 * C22685) * C21372 +
            (C47018 * C22688 - C21369 * C22687) * C21368) *
               C47294 * C47178) *
              C47381) *
         C47045) /
            (p * q * std::sqrt(p + q));
    d2ee[110] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C47018 * C124 - C21369 * C117) * C21370 +
            (C47018 * C138 - C21369 * C127) * C21366 +
            (C21484 - C21485) * C21371 + (C21486 - C21487) * C21367 +
            C21520 * C21372 + C21521 * C21368) *
               C47294 * C47091 * C1284 +
           ((C21485 - C21484) * C21370 + (C21487 - C21486) * C21366 +
            (C21489 - C21488) * C21371 + (C21491 - C21490) * C21367 +
            C22186 * C21372 + C22187 * C21368) *
               C47294 * C47091 * C1285 +
           (C21520 * C21370 + C21521 * C21366 + (C21493 - C21492) * C21371 +
            (C21495 - C21494) * C21367 + C22196 * C21372 + C22197 * C21368) *
               C47294 * C47091 * C1286 +
           (C22186 * C21370 + C22187 * C21366 + (C22189 - C22188) * C21371 +
            (C22191 - C22190) * C21367 + (C22192 - C22193) * C21372 +
            (C22194 - C22195) * C21368) *
               C47294 * C47091 * C47381) *
              C47325 +
          (((C21369 * C118 - C47018 * C125) * C21370 +
            (C21369 * C128 - C47018 * C139) * C21366 +
            (C21496 - C21497) * C21371 + (C21498 - C21499) * C21367 +
            C21522 * C21372 + C21523 * C21368) *
               C47294 * C47091 * C1284 +
           ((C21497 - C21496) * C21370 + (C21499 - C21498) * C21366 +
            (C21501 - C21500) * C21371 + (C21503 - C21502) * C21367 +
            C22430 * C21372 + C22431 * C21368) *
               C47294 * C47091 * C1285 +
           (C21522 * C21370 + C21523 * C21366 + (C21505 - C21504) * C21371 +
            (C21507 - C21506) * C21367 + (C22432 - C22433) * C21372 +
            (C22434 - C22435) * C21368) *
               C47294 * C47091 * C1286 +
           (C22430 * C21370 + C22431 * C21366 + (C22433 - C22432) * C21371 +
            (C22435 - C22434) * C21367 +
            (C47018 * C5640 - C21369 * C5638) * C21372 +
            (C47018 * C5644 - C21369 * C5642) * C21368) *
               C47294 * C47091 * C47381) *
              C47056)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C47018 * C124 - C21369 * C117) * C21370 +
            (C47018 * C138 - C21369 * C127) * C21366 +
            (C21484 - C21485) * C21371 + (C21486 - C21487) * C21367 +
            C21520 * C21372 + C21521 * C21368) *
               C47294 * C47091 * C47339 +
           ((C21485 - C21484) * C21370 + (C21487 - C21486) * C21366 +
            (C21489 - C21488) * C21371 + (C21491 - C21490) * C21367 +
            (C21492 - C21493) * C21372 + (C21494 - C21495) * C21368) *
               C47294 * C47091 * C47136) *
              C554 +
          (((C21369 * C118 - C47018 * C125) * C21370 +
            (C21369 * C128 - C47018 * C139) * C21366 +
            (C21496 - C21497) * C21371 + (C21498 - C21499) * C21367 +
            C21522 * C21372 + C21523 * C21368) *
               C47294 * C47091 * C47339 +
           ((C21497 - C21496) * C21370 + (C21499 - C21498) * C21366 +
            (C21501 - C21500) * C21371 + (C21503 - C21502) * C21367 +
            (C21504 - C21505) * C21372 + (C21506 - C21507) * C21368) *
               C47294 * C47091 * C47136) *
              C555 +
          (((C47018 * C126 - C21369 * C119) * C21370 +
            (C47018 * C140 - C21369 * C129) * C21366 +
            (C21508 - C21509) * C21371 + (C21510 - C21511) * C21367 +
            C21524 * C21372 + C21525 * C21368) *
               C47294 * C47091 * C47339 +
           ((C21509 - C21508) * C21370 + (C21511 - C21510) * C21366 +
            (C21513 - C21512) * C21371 + (C21515 - C21514) * C21367 +
            (C21516 - C21517) * C21372 + (C21518 - C21519) * C21368) *
               C47294 * C47091 * C47136) *
              C556 +
          (((C21369 * C120 - C47018 * C130) * C21370 +
            (C21369 * C131 - C47018 * C141) * C21366 +
            (C21734 - C21735) * C21371 + (C21736 - C21737) * C21367 +
            (C21738 - C21739) * C21372 + (C21740 - C21741) * C21368) *
               C47294 * C47091 * C47339 +
           ((C21735 - C21734) * C21370 + (C21737 - C21736) * C21366 +
            (C21739 - C21738) * C21371 + (C21741 - C21740) * C21367 +
            (C47018 * C1291 - C21369 * C1290) * C21372 +
            (C47018 * C1293 - C21369 * C1292) * C21368) *
               C47294 * C47091 * C47136) *
              C47375)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C47018 * C124 - C21369 * C117) * C21370 +
             (C47018 * C138 - C21369 * C127) * C21366 +
             (C21484 - C21485) * C21371 + (C21486 - C21487) * C21367 +
             C21520 * C21372 + C21521 * C21368) *
                C47294 * C1664 +
            ((C21369 * C414 - C47018 * C424) * C21370 +
             (C21369 * C427 - C47018 * C444) * C21366 +
             (C21986 - C21987) * C21371 + (C21988 - C21989) * C21367 +
             C22312 * C21372 + C22313 * C21368) *
                C47294 * C1665 +
            ((C47018 * C430 - C21369 * C417) * C21370 +
             (C47018 * C447 - C21369 * C433) * C21366 +
             (C22314 - C22315) * C21371 + (C22316 - C22317) * C21367 +
             C22330 * C21372 + C22331 * C21368) *
                C47294 * C47374) *
               C47339 +
           (((C21485 - C21484) * C21370 + (C21487 - C21486) * C21366 +
             (C21489 - C21488) * C21371 + (C21491 - C21490) * C21367 +
             C22186 * C21372 + C22187 * C21368) *
                C47294 * C1664 +
            ((C21987 - C21986) * C21370 + (C21989 - C21988) * C21366 +
             (C21991 - C21990) * C21371 + (C21993 - C21992) * C21367 +
             C22690 * C21372 + C22691 * C21368) *
                C47294 * C1665 +
            ((C22315 - C22314) * C21370 + (C22317 - C22316) * C21366 +
             (C22319 - C22318) * C21371 + (C22321 - C22320) * C21367 +
             (C22326 - C22327) * C21372 + (C22328 - C22329) * C21368) *
                C47294 * C47374) *
               C47136) *
              C47325 +
          ((((C21369 * C118 - C47018 * C125) * C21370 +
             (C21369 * C128 - C47018 * C139) * C21366 +
             (C21496 - C21497) * C21371 + (C21498 - C21499) * C21367 +
             C21522 * C21372 + C21523 * C21368) *
                C47294 * C1664 +
            ((C47018 * C425 - C21369 * C415) * C21370 +
             (C47018 * C445 - C21369 * C428) * C21366 +
             (C21994 - C21995) * C21371 + (C21996 - C21997) * C21367 +
             C22582 * C21372 + C22583 * C21368) *
                C47294 * C1665 +
            ((C21369 * C418 - C47018 * C431) * C21370 +
             (C21369 * C434 - C47018 * C448) * C21366 +
             (C23128 - C23129) * C21371 + (C23130 - C23131) * C21367 +
             (C23132 - C23133) * C21372 + (C23134 - C23135) * C21368) *
                C47294 * C47374) *
               C47339 +
           (((C21497 - C21496) * C21370 + (C21499 - C21498) * C21366 +
             (C21501 - C21500) * C21371 + (C21503 - C21502) * C21367 +
             C22430 * C21372 + C22431 * C21368) *
                C47294 * C1664 +
            ((C21995 - C21994) * C21370 + (C21997 - C21996) * C21366 +
             (C21999 - C21998) * C21371 + (C22001 - C22000) * C21367 +
             (C22584 - C22585) * C21372 + (C22586 - C22587) * C21368) *
                C47294 * C1665 +
            ((C23129 - C23128) * C21370 + (C23131 - C23130) * C21366 +
             (C23133 - C23132) * C21371 + (C23135 - C23134) * C21367 +
             (C47018 * C5810 - C21369 * C5808) * C21372 +
             (C47018 * C5814 - C21369 * C5812) * C21368) *
                C47294 * C47374) *
               C47136) *
              C47056)) /
            (p * q * std::sqrt(p + q));
    d2ee[111] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C47018 * C124 - C21369 * C117) * C21370 +
            (C47018 * C138 - C21369 * C127) * C21366 +
            (C21484 - C21485) * C21371 + (C21486 - C21487) * C21367 +
            C21520 * C21372 + C21521 * C21368) *
               C47294 * C47340 +
           ((C21369 * C414 - C47018 * C424) * C21370 +
            (C21369 * C427 - C47018 * C444) * C21366 +
            (C21986 - C21987) * C21371 + (C21988 - C21989) * C21367 +
            C22312 * C21372 + C22313 * C21368) *
               C47294 * C47178) *
              C1284 +
          (((C21485 - C21484) * C21370 + (C21487 - C21486) * C21366 +
            (C21489 - C21488) * C21371 + (C21491 - C21490) * C21367 +
            C22186 * C21372 + C22187 * C21368) *
               C47294 * C47340 +
           ((C21987 - C21986) * C21370 + (C21989 - C21988) * C21366 +
            (C21991 - C21990) * C21371 + (C21993 - C21992) * C21367 +
            C22690 * C21372 + C22691 * C21368) *
               C47294 * C47178) *
              C1285 +
          ((C21520 * C21370 + C21521 * C21366 + (C21493 - C21492) * C21371 +
            (C21495 - C21494) * C21367 + C22196 * C21372 + C22197 * C21368) *
               C47294 * C47340 +
           (C22312 * C21370 + C22313 * C21366 + (C22323 - C22322) * C21371 +
            (C22325 - C22324) * C21367 + (C22692 - C22693) * C21372 +
            (C22694 - C22695) * C21368) *
               C47294 * C47178) *
              C1286 +
          ((C22186 * C21370 + C22187 * C21366 + (C22189 - C22188) * C21371 +
            (C22191 - C22190) * C21367 + (C22192 - C22193) * C21372 +
            (C22194 - C22195) * C21368) *
               C47294 * C47340 +
           (C22690 * C21370 + C22691 * C21366 + (C22693 - C22692) * C21371 +
            (C22695 - C22694) * C21367 +
            (C47018 * C22686 - C21369 * C22685) * C21372 +
            (C47018 * C22688 - C21369 * C22687) * C21368) *
               C47294 * C47178) *
              C47381) *
         C47045) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C47018 * C124 - C21369 * C117) * C21370 +
             (C47018 * C138 - C21369 * C127) * C21366 +
             (C21484 - C21485) * C21371 + (C21486 - C21487) * C21367 +
             C21520 * C21372 + C21521 * C21368) *
                C47294 * C47340 +
            ((C21369 * C414 - C47018 * C424) * C21370 +
             (C21369 * C427 - C47018 * C444) * C21366 +
             (C21986 - C21987) * C21371 + (C21988 - C21989) * C21367 +
             (C21990 - C21991) * C21372 + (C21992 - C21993) * C21368) *
                C47294 * C47178) *
               C47339 +
           (((C21485 - C21484) * C21370 + (C21487 - C21486) * C21366 +
             (C21489 - C21488) * C21371 + (C21491 - C21490) * C21367 +
             (C21492 - C21493) * C21372 + (C21494 - C21495) * C21368) *
                C47294 * C47340 +
            ((C21987 - C21986) * C21370 + (C21989 - C21988) * C21366 +
             (C21991 - C21990) * C21371 + (C21993 - C21992) * C21367 +
             (C47018 * C1545 - C21369 * C1542) * C21372 +
             (C47018 * C1551 - C21369 * C1548) * C21368) *
                C47294 * C47178) *
               C47136) *
              C258 +
          ((((C21369 * C118 - C47018 * C125) * C21370 +
             (C21369 * C128 - C47018 * C139) * C21366 +
             (C21496 - C21497) * C21371 + (C21498 - C21499) * C21367 +
             C21522 * C21372 + C21523 * C21368) *
                C47294 * C47340 +
            ((C47018 * C425 - C21369 * C415) * C21370 +
             (C47018 * C445 - C21369 * C428) * C21366 +
             (C21994 - C21995) * C21371 + (C21996 - C21997) * C21367 +
             (C21998 - C21999) * C21372 + (C22000 - C22001) * C21368) *
                C47294 * C47178) *
               C47339 +
           (((C21497 - C21496) * C21370 + (C21499 - C21498) * C21366 +
             (C21501 - C21500) * C21371 + (C21503 - C21502) * C21367 +
             (C21504 - C21505) * C21372 + (C21506 - C21507) * C21368) *
                C47294 * C47340 +
            ((C21995 - C21994) * C21370 + (C21997 - C21996) * C21366 +
             (C21999 - C21998) * C21371 + (C22001 - C22000) * C21367 +
             (C21369 * C1543 - C47018 * C1546) * C21372 +
             (C21369 * C1549 - C47018 * C1552) * C21368) *
                C47294 * C47178) *
               C47136) *
              C259 +
          ((((C47018 * C126 - C21369 * C119) * C21370 +
             (C47018 * C140 - C21369 * C129) * C21366 +
             (C21508 - C21509) * C21371 + (C21510 - C21511) * C21367 +
             C21524 * C21372 + C21525 * C21368) *
                C47294 * C47340 +
            ((C21369 * C416 - C47018 * C426) * C21370 +
             (C21369 * C429 - C47018 * C446) * C21366 +
             (C22002 - C22003) * C21371 + (C22004 - C22005) * C21367 +
             (C22006 - C22007) * C21372 + (C22008 - C22009) * C21368) *
                C47294 * C47178) *
               C47339 +
           (((C21509 - C21508) * C21370 + (C21511 - C21510) * C21366 +
             (C21513 - C21512) * C21371 + (C21515 - C21514) * C21367 +
             (C21516 - C21517) * C21372 + (C21518 - C21519) * C21368) *
                C47294 * C47340 +
            ((C22003 - C22002) * C21370 + (C22005 - C22004) * C21366 +
             (C22007 - C22006) * C21371 + (C22009 - C22008) * C21367 +
             (C47018 * C1547 - C21369 * C1544) * C21372 +
             (C47018 * C1553 - C21369 * C1550) * C21368) *
                C47294 * C47178) *
               C47136) *
              C47365)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C47018 * C124 - C21369 * C117) * C21370 +
            (C47018 * C138 - C21369 * C127) * C21366 +
            (C21484 - C21485) * C21371 + (C21486 - C21487) * C21367 +
            C21520 * C21372 + C21521 * C21368) *
               C47294 * C2116 +
           ((C21369 * C414 - C47018 * C424) * C21370 +
            (C21369 * C427 - C47018 * C444) * C21366 +
            (C21986 - C21987) * C21371 + (C21988 - C21989) * C21367 +
            C22312 * C21372 + C22313 * C21368) *
               C47294 * C2117 +
           ((C47018 * C430 - C21369 * C417) * C21370 +
            (C47018 * C447 - C21369 * C433) * C21366 +
            (C22314 - C22315) * C21371 + (C22316 - C22317) * C21367 +
            C22330 * C21372 + C22331 * C21368) *
               C47294 * C2118 +
           ((C21369 * C1844 - C47018 * C1850) * C21370 +
            (C21369 * C1853 - C47018 * C1862) * C21366 +
            (C23336 - C23337) * C21371 + (C23338 - C23339) * C21367 +
            (C23340 - C23341) * C21372 + (C23342 - C23343) * C21368) *
               C47294 * C47387) *
              C47339 +
          (((C21485 - C21484) * C21370 + (C21487 - C21486) * C21366 +
            (C21489 - C21488) * C21371 + (C21491 - C21490) * C21367 +
            C22186 * C21372 + C22187 * C21368) *
               C47294 * C2116 +
           ((C21987 - C21986) * C21370 + (C21989 - C21988) * C21366 +
            (C21991 - C21990) * C21371 + (C21993 - C21992) * C21367 +
            C22690 * C21372 + C22691 * C21368) *
               C47294 * C2117 +
           ((C22315 - C22314) * C21370 + (C22317 - C22316) * C21366 +
            (C22319 - C22318) * C21371 + (C22321 - C22320) * C21367 +
            (C22326 - C22327) * C21372 + (C22328 - C22329) * C21368) *
               C47294 * C2118 +
           ((C23337 - C23336) * C21370 + (C23339 - C23338) * C21366 +
            (C23341 - C23340) * C21371 + (C23343 - C23342) * C21367 +
            (C47018 * C23332 - C21369 * C23331) * C21372 +
            (C47018 * C23334 - C21369 * C23333) * C21368) *
               C47294 * C47387) *
              C47136) *
         C47045) /
            (p * q * std::sqrt(p + q));
    d2ee[112] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((C47018 * C124 - C21369 * C117) * C21370 +
               (C47018 * C138 - C21369 * C127) * C21366 +
               (C47018 * C271 - C21369 * C261) * C21371 +
               (C47018 * C291 - C21369 * C274) * C21367 +
               (C47018 * C277 - C21369 * C264) * C21372 +
               (C47018 * C294 - C21369 * C280) * C21368) *
                  C47294 * C47091 * C47073 * C108 +
              ((C21369 * C118 - C47018 * C125) * C21370 +
               (C21369 * C128 - C47018 * C139) * C21366 +
               (C21369 * C262 - C47018 * C272) * C21371 +
               (C21369 * C275 - C47018 * C292) * C21367 +
               (C21369 * C265 - C47018 * C278) * C21372 +
               (C21369 * C281 - C47018 * C295) * C21368) *
                  C47294 * C47091 * C47073 * C109 +
              ((C47018 * C126 - C21369 * C119) * C21370 +
               (C47018 * C140 - C21369 * C129) * C21366 +
               (C47018 * C273 - C21369 * C263) * C21371 +
               (C47018 * C293 - C21369 * C276) * C21367 +
               (C47018 * C279 - C21369 * C266) * C21372 +
               (C47018 * C296 - C21369 * C282) * C21368) *
                  C47294 * C47091 * C47073 * C110 +
              ((C21369 * C120 - C47018 * C130) * C21370 +
               (C21369 * C131 - C47018 * C141) * C21366 +
               (C21369 * C267 - C47018 * C283) * C21371 +
               (C21369 * C284 - C47018 * C297) * C21367 +
               (C21369 * C268 - C47018 * C285) * C21372 +
               (C21369 * C286 - C47018 * C298) * C21368) *
                  C47294 * C47091 * C47073 * C111 +
              ((C47018 * C132 - C21369 * C121) * C21370 +
               (C47018 * C142 - C21369 * C133) * C21366 +
               (C47018 * C287 - C21369 * C269) * C21371 +
               (C47018 * C299 - C21369 * C288) * C21367 +
               (C47018 * C289 - C21369 * C270) * C21372 +
               (C47018 * C300 - C21369 * C290) * C21368) *
                  C47294 * C47091 * C47073 * C112) +
         0.5 * std::pow(Pi, 2.5) *
             ((((C47018 * C124 - C21369 * C117) * C21370 +
                (C47018 * C138 - C21369 * C127) * C21366 +
                (C21484 - C21485) * C21371 + (C21486 - C21487) * C21367 +
                C21520 * C21372 + C21521 * C21368) *
                   C47294 * C47091 * C47410 +
               ((C21485 - C21484) * C21370 + (C21487 - C21486) * C21366 +
                (C21489 - C21488) * C21371 + (C21491 - C21490) * C21367 +
                (C21492 - C21493) * C21372 + (C21494 - C21495) * C21368) *
                   C47294 * C47091 * C47398 +
               (C21520 * C21370 + C21521 * C21366 + (C21493 - C21492) * C21371 +
                (C21495 - C21494) * C21367 +
                (C47018 * C1028 - C21369 * C1019) * C21372 +
                (C47018 * C1037 - C21369 * C1031) * C21368) *
                   C47294 * C47091 * C47371) *
                  C258 +
              (((C21369 * C118 - C47018 * C125) * C21370 +
                (C21369 * C128 - C47018 * C139) * C21366 +
                (C21496 - C21497) * C21371 + (C21498 - C21499) * C21367 +
                C21522 * C21372 + C21523 * C21368) *
                   C47294 * C47091 * C47410 +
               ((C21497 - C21496) * C21370 + (C21499 - C21498) * C21366 +
                (C21501 - C21500) * C21371 + (C21503 - C21502) * C21367 +
                (C21504 - C21505) * C21372 + (C21506 - C21507) * C21368) *
                   C47294 * C47091 * C47398 +
               (C21522 * C21370 + C21523 * C21366 + (C21505 - C21504) * C21371 +
                (C21507 - C21506) * C21367 +
                (C21369 * C1020 - C47018 * C1029) * C21372 +
                (C21369 * C1032 - C47018 * C1038) * C21368) *
                   C47294 * C47091 * C47371) *
                  C259 +
              (((C47018 * C126 - C21369 * C119) * C21370 +
                (C47018 * C140 - C21369 * C129) * C21366 +
                (C21508 - C21509) * C21371 + (C21510 - C21511) * C21367 +
                C21524 * C21372 + C21525 * C21368) *
                   C47294 * C47091 * C47410 +
               ((C21509 - C21508) * C21370 + (C21511 - C21510) * C21366 +
                (C21513 - C21512) * C21371 + (C21515 - C21514) * C21367 +
                (C21516 - C21517) * C21372 + (C21518 - C21519) * C21368) *
                   C47294 * C47091 * C47398 +
               (C21524 * C21370 + C21525 * C21366 + (C21517 - C21516) * C21371 +
                (C21519 - C21518) * C21367 +
                (C47018 * C1030 - C21369 * C1021) * C21372 +
                (C47018 * C1039 - C21369 * C1033) * C21368) *
                   C47294 * C47091 * C47371) *
                  C47365)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C47018 * C124 - C21369 * C117) * C21370 +
            (C47018 * C138 - C21369 * C127) * C21366 +
            (C21484 - C21485) * C21371 + (C21486 - C21487) * C21367 +
            C21520 * C21372 + C21521 * C21368) *
               C47294 * C47411 +
           ((C21369 * C414 - C47018 * C424) * C21370 +
            (C21369 * C427 - C47018 * C444) * C21366 +
            (C21369 * C812 - C47018 * C817) * C21371 +
            (C21369 * C820 - C47018 * C827) * C21367 +
            (C21369 * C1153 - C47018 * C1165) * C21372 +
            (C21369 * C1168 - C47018 * C1180) * C21368) *
               C47294 * C47400 +
           ((C47018 * C430 - C21369 * C417) * C21370 +
            (C47018 * C447 - C21369 * C433) * C21366 +
            (C47018 * C1159 - C21369 * C1150) * C21371 +
            (C47018 * C1177 - C21369 * C1162) * C21367 +
            (C47018 * C1171 - C21369 * C1156) * C21372 +
            (C47018 * C1183 - C21369 * C1174) * C21368) *
               C47294 * C47374) *
              C47073 * C258 +
          (((C21369 * C118 - C47018 * C125) * C21370 +
            (C21369 * C128 - C47018 * C139) * C21366 +
            (C21496 - C21497) * C21371 + (C21498 - C21499) * C21367 +
            C21522 * C21372 + C21523 * C21368) *
               C47294 * C47411 +
           ((C47018 * C425 - C21369 * C415) * C21370 +
            (C47018 * C445 - C21369 * C428) * C21366 +
            (C47018 * C818 - C21369 * C813) * C21371 +
            (C47018 * C828 - C21369 * C821) * C21367 +
            (C47018 * C1166 - C21369 * C1154) * C21372 +
            (C47018 * C1181 - C21369 * C1169) * C21368) *
               C47294 * C47400 +
           ((C21369 * C418 - C47018 * C431) * C21370 +
            (C21369 * C434 - C47018 * C448) * C21366 +
            (C21369 * C1151 - C47018 * C1160) * C21371 +
            (C21369 * C1163 - C47018 * C1178) * C21367 +
            (C21369 * C1157 - C47018 * C1172) * C21372 +
            (C21369 * C1175 - C47018 * C1184) * C21368) *
               C47294 * C47374) *
              C47073 * C259 +
          (((C47018 * C126 - C21369 * C119) * C21370 +
            (C47018 * C140 - C21369 * C129) * C21366 +
            (C21508 - C21509) * C21371 + (C21510 - C21511) * C21367 +
            C21524 * C21372 + C21525 * C21368) *
               C47294 * C47411 +
           ((C21369 * C416 - C47018 * C426) * C21370 +
            (C21369 * C429 - C47018 * C446) * C21366 +
            (C21369 * C814 - C47018 * C819) * C21371 +
            (C21369 * C822 - C47018 * C829) * C21367 +
            (C21369 * C1155 - C47018 * C1167) * C21372 +
            (C21369 * C1170 - C47018 * C1182) * C21368) *
               C47294 * C47400 +
           ((C47018 * C432 - C21369 * C419) * C21370 +
            (C47018 * C449 - C21369 * C435) * C21366 +
            (C47018 * C1161 - C21369 * C1152) * C21371 +
            (C47018 * C1179 - C21369 * C1164) * C21367 +
            (C47018 * C1173 - C21369 * C1158) * C21372 +
            (C47018 * C1185 - C21369 * C1176) * C21368) *
               C47294 * C47374) *
              C47073 * C47365)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C47018 * C124 - C21369 * C117) * C21370 +
            (C47018 * C138 - C21369 * C127) * C21366 +
            (C21484 - C21485) * C21371 + (C21486 - C21487) * C21367 +
            C21520 * C21372 + C21521 * C21368) *
               C47294 * C47091 * C942 +
           ((C21485 - C21484) * C21370 + (C21487 - C21486) * C21366 +
            (C21489 - C21488) * C21371 + (C21491 - C21490) * C21367 +
            (C21492 - C21493) * C21372 + (C21494 - C21495) * C21368) *
               C47294 * C47091 * C943 +
           (C21520 * C21370 + C21521 * C21366 + (C21493 - C21492) * C21371 +
            (C21495 - C21494) * C21367 +
            (C47018 * C1028 - C21369 * C1019) * C21372 +
            (C47018 * C1037 - C21369 * C1031) * C21368) *
               C47294 * C47091 * C47371) *
              C47407 +
          (((C21369 * C118 - C47018 * C125) * C21370 +
            (C21369 * C128 - C47018 * C139) * C21366 +
            (C21496 - C21497) * C21371 + (C21498 - C21499) * C21367 +
            C21522 * C21372 + C21523 * C21368) *
               C47294 * C47091 * C942 +
           ((C21497 - C21496) * C21370 + (C21499 - C21498) * C21366 +
            (C21501 - C21500) * C21371 + (C21503 - C21502) * C21367 +
            (C21504 - C21505) * C21372 + (C21506 - C21507) * C21368) *
               C47294 * C47091 * C943 +
           (C21522 * C21370 + C21523 * C21366 + (C21505 - C21504) * C21371 +
            (C21507 - C21506) * C21367 +
            (C21369 * C1020 - C47018 * C1029) * C21372 +
            (C21369 * C1032 - C47018 * C1038) * C21368) *
               C47294 * C47091 * C47371) *
              C47394 +
          (((C47018 * C126 - C21369 * C119) * C21370 +
            (C47018 * C140 - C21369 * C129) * C21366 +
            (C21508 - C21509) * C21371 + (C21510 - C21511) * C21367 +
            C21524 * C21372 + C21525 * C21368) *
               C47294 * C47091 * C942 +
           ((C21509 - C21508) * C21370 + (C21511 - C21510) * C21366 +
            (C21513 - C21512) * C21371 + (C21515 - C21514) * C21367 +
            (C21516 - C21517) * C21372 + (C21518 - C21519) * C21368) *
               C47294 * C47091 * C943 +
           (C21524 * C21370 + C21525 * C21366 + (C21517 - C21516) * C21371 +
            (C21519 - C21518) * C21367 +
            (C47018 * C1030 - C21369 * C1021) * C21372 +
            (C47018 * C1039 - C21369 * C1033) * C21368) *
               C47294 * C47091 * C47371) *
              C47365)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C47018 * C124 - C21369 * C117) * C21370 +
           (C47018 * C138 - C21369 * C127) * C21366 +
           (C21484 - C21485) * C21371 + (C21486 - C21487) * C21367 +
           C21520 * C21372 + C21521 * C21368) *
              C47294 * C47091 * C1010 +
          ((C21485 - C21484) * C21370 + (C21487 - C21486) * C21366 +
           (C21489 - C21488) * C21371 + (C21491 - C21490) * C21367 +
           C22186 * C21372 + C22187 * C21368) *
              C47294 * C47091 * C1011 +
          (C21520 * C21370 + C21521 * C21366 + (C21493 - C21492) * C21371 +
           (C21495 - C21494) * C21367 + C22196 * C21372 + C22197 * C21368) *
              C47294 * C47091 * C1012 +
          (C22186 * C21370 + C22187 * C21366 + (C22189 - C22188) * C21371 +
           (C22191 - C22190) * C21367 + (C22192 - C22193) * C21372 +
           (C22194 - C22195) * C21368) *
              C47294 * C47091 * C1013 +
          (C22196 * C21370 + C22197 * C21366 + (C22193 - C22192) * C21371 +
           (C22195 - C22194) * C21367 +
           (C47018 * C22182 - C21369 * C22181) * C21372 +
           (C47018 * C22184 - C21369 * C22183) * C21368) *
              C47294 * C47091 * C1014) *
         C47045) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C47018 * C124 - C21369 * C117) * C21370 +
            (C47018 * C138 - C21369 * C127) * C21366 +
            (C21484 - C21485) * C21371 + (C21486 - C21487) * C21367 +
            C21520 * C21372 + C21521 * C21368) *
               C47294 * C47411 +
           ((C21369 * C414 - C47018 * C424) * C21370 +
            (C21369 * C427 - C47018 * C444) * C21366 +
            (C21986 - C21987) * C21371 + (C21988 - C21989) * C21367 +
            C22312 * C21372 + C22313 * C21368) *
               C47294 * C47400 +
           ((C47018 * C430 - C21369 * C417) * C21370 +
            (C47018 * C447 - C21369 * C433) * C21366 +
            (C22314 - C22315) * C21371 + (C22316 - C22317) * C21367 +
            C22330 * C21372 + C22331 * C21368) *
               C47294 * C47374) *
              C942 +
          (((C21485 - C21484) * C21370 + (C21487 - C21486) * C21366 +
            (C21489 - C21488) * C21371 + (C21491 - C21490) * C21367 +
            C22186 * C21372 + C22187 * C21368) *
               C47294 * C47411 +
           ((C21987 - C21986) * C21370 + (C21989 - C21988) * C21366 +
            (C21991 - C21990) * C21371 + (C21993 - C21992) * C21367 +
            (C22322 - C22323) * C21372 + (C22324 - C22325) * C21368) *
               C47294 * C47400 +
           ((C22315 - C22314) * C21370 + (C22317 - C22316) * C21366 +
            (C22319 - C22318) * C21371 + (C22321 - C22320) * C21367 +
            (C22326 - C22327) * C21372 + (C22328 - C22329) * C21368) *
               C47294 * C47374) *
              C943 +
          ((C21520 * C21370 + C21521 * C21366 + (C21493 - C21492) * C21371 +
            (C21495 - C21494) * C21367 + C22196 * C21372 + C22197 * C21368) *
               C47294 * C47411 +
           (C22312 * C21370 + C22313 * C21366 + (C22323 - C22322) * C21371 +
            (C22325 - C22324) * C21367 +
            (C21369 * C6309 - C47018 * C6311) * C21372 +
            (C21369 * C6313 - C47018 * C6315) * C21368) *
               C47294 * C47400 +
           (C22330 * C21370 + C22331 * C21366 + (C22327 - C22326) * C21371 +
            (C22329 - C22328) * C21367 +
            (C47018 * C22308 - C21369 * C22307) * C21372 +
            (C47018 * C22310 - C21369 * C22309) * C21368) *
               C47294 * C47374) *
              C47371) *
         C47045) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C47018 * C124 - C21369 * C117) * C21370 +
            (C47018 * C138 - C21369 * C127) * C21366 +
            (C21484 - C21485) * C21371 + (C21486 - C21487) * C21367 +
            C21520 * C21372 + C21521 * C21368) *
               C47294 * C1664 +
           ((C21369 * C414 - C47018 * C424) * C21370 +
            (C21369 * C427 - C47018 * C444) * C21366 +
            (C21986 - C21987) * C21371 + (C21988 - C21989) * C21367 +
            C22312 * C21372 + C22313 * C21368) *
               C47294 * C1665 +
           ((C47018 * C430 - C21369 * C417) * C21370 +
            (C47018 * C447 - C21369 * C433) * C21366 +
            (C22314 - C22315) * C21371 + (C22316 - C22317) * C21367 +
            C22330 * C21372 + C22331 * C21368) *
               C47294 * C47374) *
              C47073 * C47407 +
          (((C21369 * C118 - C47018 * C125) * C21370 +
            (C21369 * C128 - C47018 * C139) * C21366 +
            (C21496 - C21497) * C21371 + (C21498 - C21499) * C21367 +
            C21522 * C21372 + C21523 * C21368) *
               C47294 * C1664 +
           ((C47018 * C425 - C21369 * C415) * C21370 +
            (C47018 * C445 - C21369 * C428) * C21366 +
            (C21994 - C21995) * C21371 + (C21996 - C21997) * C21367 +
            C22582 * C21372 + C22583 * C21368) *
               C47294 * C1665 +
           ((C21369 * C418 - C47018 * C431) * C21370 +
            (C21369 * C434 - C47018 * C448) * C21366 +
            (C21369 * C1151 - C47018 * C1160) * C21371 +
            (C21369 * C1163 - C47018 * C1178) * C21367 +
            (C21369 * C1157 - C47018 * C1172) * C21372 +
            (C21369 * C1175 - C47018 * C1184) * C21368) *
               C47294 * C47374) *
              C47073 * C47394 +
          (((C47018 * C126 - C21369 * C119) * C21370 +
            (C47018 * C140 - C21369 * C129) * C21366 +
            (C21508 - C21509) * C21371 + (C21510 - C21511) * C21367 +
            C21524 * C21372 + C21525 * C21368) *
               C47294 * C1664 +
           ((C21369 * C416 - C47018 * C426) * C21370 +
            (C21369 * C429 - C47018 * C446) * C21366 +
            (C22002 - C22003) * C21371 + (C22004 - C22005) * C21367 +
            (C22006 - C22007) * C21372 + (C22008 - C22009) * C21368) *
               C47294 * C1665 +
           ((C47018 * C432 - C21369 * C419) * C21370 +
            (C47018 * C449 - C21369 * C435) * C21366 +
            (C47018 * C1161 - C21369 * C1152) * C21371 +
            (C47018 * C1179 - C21369 * C1164) * C21367 +
            (C47018 * C1173 - C21369 * C1158) * C21372 +
            (C47018 * C1185 - C21369 * C1176) * C21368) *
               C47294 * C47374) *
              C47073 * C47365)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C47018 * C124 - C21369 * C117) * C21370 +
            (C47018 * C138 - C21369 * C127) * C21366 +
            (C21484 - C21485) * C21371 + (C21486 - C21487) * C21367 +
            C21520 * C21372 + C21521 * C21368) *
               C47294 * C1664 +
           ((C21369 * C414 - C47018 * C424) * C21370 +
            (C21369 * C427 - C47018 * C444) * C21366 +
            (C21986 - C21987) * C21371 + (C21988 - C21989) * C21367 +
            C22312 * C21372 + C22313 * C21368) *
               C47294 * C1665 +
           ((C47018 * C430 - C21369 * C417) * C21370 +
            (C47018 * C447 - C21369 * C433) * C21366 +
            (C22314 - C22315) * C21371 + (C22316 - C22317) * C21367 +
            C22330 * C21372 + C22331 * C21368) *
               C47294 * C47374) *
              C47410 +
          (((C21485 - C21484) * C21370 + (C21487 - C21486) * C21366 +
            (C21489 - C21488) * C21371 + (C21491 - C21490) * C21367 +
            C22186 * C21372 + C22187 * C21368) *
               C47294 * C1664 +
           ((C21987 - C21986) * C21370 + (C21989 - C21988) * C21366 +
            (C21991 - C21990) * C21371 + (C21993 - C21992) * C21367 +
            C22690 * C21372 + C22691 * C21368) *
               C47294 * C1665 +
           ((C22315 - C22314) * C21370 + (C22317 - C22316) * C21366 +
            (C22319 - C22318) * C21371 + (C22321 - C22320) * C21367 +
            (C22326 - C22327) * C21372 + (C22328 - C22329) * C21368) *
               C47294 * C47374) *
              C47398 +
          ((C21520 * C21370 + C21521 * C21366 + (C21493 - C21492) * C21371 +
            (C21495 - C21494) * C21367 + C22196 * C21372 + C22197 * C21368) *
               C47294 * C1664 +
           (C22312 * C21370 + C22313 * C21366 + (C22323 - C22322) * C21371 +
            (C22325 - C22324) * C21367 + (C22692 - C22693) * C21372 +
            (C22694 - C22695) * C21368) *
               C47294 * C1665 +
           (C22330 * C21370 + C22331 * C21366 + (C22327 - C22326) * C21371 +
            (C22329 - C22328) * C21367 +
            (C47018 * C22308 - C21369 * C22307) * C21372 +
            (C47018 * C22310 - C21369 * C22309) * C21368) *
               C47294 * C47374) *
              C47371) *
         C47045) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C47018 * C124 - C21369 * C117) * C21370 +
           (C47018 * C138 - C21369 * C127) * C21366 +
           (C21484 - C21485) * C21371 + (C21486 - C21487) * C21367 +
           C21520 * C21372 + C21521 * C21368) *
              C47294 * C1839 +
          ((C21369 * C414 - C47018 * C424) * C21370 +
           (C21369 * C427 - C47018 * C444) * C21366 +
           (C21986 - C21987) * C21371 + (C21988 - C21989) * C21367 +
           C22312 * C21372 + C22313 * C21368) *
              C47294 * C1840 +
          ((C47018 * C430 - C21369 * C417) * C21370 +
           (C47018 * C447 - C21369 * C433) * C21366 +
           (C22314 - C22315) * C21371 + (C22316 - C22317) * C21367 +
           C22330 * C21372 + C22331 * C21368) *
              C47294 * C1841 +
          ((C21369 * C1844 - C47018 * C1850) * C21370 +
           (C21369 * C1853 - C47018 * C1862) * C21366 +
           (C21369 * C2222 - C47018 * C2225) * C21371 +
           (C21369 * C2228 - C47018 * C2231) * C21367 +
           (C21369 * C7169 - C47018 * C7171) * C21372 +
           (C21369 * C7173 - C47018 * C7175) * C21368) *
              C47294 * C1842 +
          ((C47018 * C1856 - C21369 * C1847) * C21370 +
           (C47018 * C1865 - C21369 * C1859) * C21366 +
           (C47018 * C6701 - C21369 * C6699) * C21371 +
           (C47018 * C6705 - C21369 * C6703) * C21367 +
           (C47018 * C22978 - C21369 * C22977) * C21372 +
           (C47018 * C22980 - C21369 * C22979) * C21368) *
              C47294 * C1843) *
         C47073 * C47045) /
            (p * q * std::sqrt(p + q));
    d2ee[113] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C47018 * C124 - C21369 * C117) * C21370 +
             (C47018 * C138 - C21369 * C127) * C21366 +
             (C21484 - C21485) * C21371 + (C21486 - C21487) * C21367 +
             C21520 * C21372 + C21521 * C21368) *
                C47294 * C47340 +
            ((C21369 * C414 - C47018 * C424) * C21370 +
             (C21369 * C427 - C47018 * C444) * C21366 +
             (C21986 - C21987) * C21371 + (C21988 - C21989) * C21367 +
             C22312 * C21372 + C22313 * C21368) *
                C47294 * C47178) *
               C942 +
           (((C21485 - C21484) * C21370 + (C21487 - C21486) * C21366 +
             (C21489 - C21488) * C21371 + (C21491 - C21490) * C21367 +
             C22186 * C21372 + C22187 * C21368) *
                C47294 * C47340 +
            ((C21987 - C21986) * C21370 + (C21989 - C21988) * C21366 +
             (C21991 - C21990) * C21371 + (C21993 - C21992) * C21367 +
             (C22322 - C22323) * C21372 + (C22324 - C22325) * C21368) *
                C47294 * C47178) *
               C943 +
           ((C21520 * C21370 + C21521 * C21366 + (C21493 - C21492) * C21371 +
             (C21495 - C21494) * C21367 + C22196 * C21372 + C22197 * C21368) *
                C47294 * C47340 +
            (C22312 * C21370 + C22313 * C21366 + (C22323 - C22322) * C21371 +
             (C22325 - C22324) * C21367 +
             (C21369 * C6309 - C47018 * C6311) * C21372 +
             (C21369 * C6313 - C47018 * C6315) * C21368) *
                C47294 * C47178) *
               C47371) *
              C47325 +
          ((((C21369 * C118 - C47018 * C125) * C21370 +
             (C21369 * C128 - C47018 * C139) * C21366 +
             (C21496 - C21497) * C21371 + (C21498 - C21499) * C21367 +
             C21522 * C21372 + C21523 * C21368) *
                C47294 * C47340 +
            ((C47018 * C425 - C21369 * C415) * C21370 +
             (C47018 * C445 - C21369 * C428) * C21366 +
             (C21994 - C21995) * C21371 + (C21996 - C21997) * C21367 +
             C22582 * C21372 + C22583 * C21368) *
                C47294 * C47178) *
               C942 +
           (((C21497 - C21496) * C21370 + (C21499 - C21498) * C21366 +
             (C21501 - C21500) * C21371 + (C21503 - C21502) * C21367 +
             C22430 * C21372 + C22431 * C21368) *
                C47294 * C47340 +
            ((C21995 - C21994) * C21370 + (C21997 - C21996) * C21366 +
             (C21999 - C21998) * C21371 + (C22001 - C22000) * C21367 +
             (C22584 - C22585) * C21372 + (C22586 - C22587) * C21368) *
                C47294 * C47178) *
               C943 +
           ((C21522 * C21370 + C21523 * C21366 + (C21505 - C21504) * C21371 +
             (C21507 - C21506) * C21367 + (C22432 - C22433) * C21372 +
             (C22434 - C22435) * C21368) *
                C47294 * C47340 +
            (C22582 * C21370 + C22583 * C21366 + (C22585 - C22584) * C21371 +
             (C22587 - C22586) * C21367 +
             (C47018 * C6312 - C21369 * C6310) * C21372 +
             (C47018 * C6316 - C21369 * C6314) * C21368) *
                C47294 * C47178) *
               C47371) *
              C47056)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C47018 * C124 - C21369 * C117) * C21370 +
            (C47018 * C138 - C21369 * C127) * C21366 +
            (C21484 - C21485) * C21371 + (C21486 - C21487) * C21367 +
            C21520 * C21372 + C21521 * C21368) *
               C47294 * C47340 +
           ((C21369 * C414 - C47018 * C424) * C21370 +
            (C21369 * C427 - C47018 * C444) * C21366 +
            (C21369 * C812 - C47018 * C817) * C21371 +
            (C21369 * C820 - C47018 * C827) * C21367 +
            (C21369 * C1153 - C47018 * C1165) * C21372 +
            (C21369 * C1168 - C47018 * C1180) * C21368) *
               C47294 * C47178) *
              C47073 * C554 +
          (((C21369 * C118 - C47018 * C125) * C21370 +
            (C21369 * C128 - C47018 * C139) * C21366 +
            (C21496 - C21497) * C21371 + (C21498 - C21499) * C21367 +
            C21522 * C21372 + C21523 * C21368) *
               C47294 * C47340 +
           ((C47018 * C425 - C21369 * C415) * C21370 +
            (C47018 * C445 - C21369 * C428) * C21366 +
            (C47018 * C818 - C21369 * C813) * C21371 +
            (C47018 * C828 - C21369 * C821) * C21367 +
            (C47018 * C1166 - C21369 * C1154) * C21372 +
            (C47018 * C1181 - C21369 * C1169) * C21368) *
               C47294 * C47178) *
              C47073 * C555 +
          (((C47018 * C126 - C21369 * C119) * C21370 +
            (C47018 * C140 - C21369 * C129) * C21366 +
            (C21508 - C21509) * C21371 + (C21510 - C21511) * C21367 +
            C21524 * C21372 + C21525 * C21368) *
               C47294 * C47340 +
           ((C21369 * C416 - C47018 * C426) * C21370 +
            (C21369 * C429 - C47018 * C446) * C21366 +
            (C21369 * C814 - C47018 * C819) * C21371 +
            (C21369 * C822 - C47018 * C829) * C21367 +
            (C21369 * C1155 - C47018 * C1167) * C21372 +
            (C21369 * C1170 - C47018 * C1182) * C21368) *
               C47294 * C47178) *
              C47073 * C556 +
          (((C21369 * C120 - C47018 * C130) * C21370 +
            (C21369 * C131 - C47018 * C141) * C21366 +
            (C21734 - C21735) * C21371 + (C21736 - C21737) * C21367 +
            (C21738 - C21739) * C21372 + (C21740 - C21741) * C21368) *
               C47294 * C47340 +
           ((C47018 * C436 - C21369 * C420) * C21370 +
            (C47018 * C450 - C21369 * C437) * C21366 +
            (C47018 * C823 - C21369 * C815) * C21371 +
            (C47018 * C830 - C21369 * C824) * C21367 +
            (C47018 * C1441 - C21369 * C1440) * C21372 +
            (C47018 * C1443 - C21369 * C1442) * C21368) *
               C47294 * C47178) *
              C47073 * C47375)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C47018 * C124 - C21369 * C117) * C21370 +
            (C47018 * C138 - C21369 * C127) * C21366 +
            (C21484 - C21485) * C21371 + (C21486 - C21487) * C21367 +
            C21520 * C21372 + C21521 * C21368) *
               C47294 * C2116 +
           ((C21369 * C414 - C47018 * C424) * C21370 +
            (C21369 * C427 - C47018 * C444) * C21366 +
            (C21986 - C21987) * C21371 + (C21988 - C21989) * C21367 +
            C22312 * C21372 + C22313 * C21368) *
               C47294 * C2117 +
           ((C47018 * C430 - C21369 * C417) * C21370 +
            (C47018 * C447 - C21369 * C433) * C21366 +
            (C22314 - C22315) * C21371 + (C22316 - C22317) * C21367 +
            C22330 * C21372 + C22331 * C21368) *
               C47294 * C2118 +
           ((C21369 * C1844 - C47018 * C1850) * C21370 +
            (C21369 * C1853 - C47018 * C1862) * C21366 +
            (C21369 * C2222 - C47018 * C2225) * C21371 +
            (C21369 * C2228 - C47018 * C2231) * C21367 +
            (C21369 * C7169 - C47018 * C7171) * C21372 +
            (C21369 * C7173 - C47018 * C7175) * C21368) *
               C47294 * C47387) *
              C47073 * C47325 +
          (((C21369 * C118 - C47018 * C125) * C21370 +
            (C21369 * C128 - C47018 * C139) * C21366 +
            (C21496 - C21497) * C21371 + (C21498 - C21499) * C21367 +
            C21522 * C21372 + C21523 * C21368) *
               C47294 * C2116 +
           ((C47018 * C425 - C21369 * C415) * C21370 +
            (C47018 * C445 - C21369 * C428) * C21366 +
            (C21994 - C21995) * C21371 + (C21996 - C21997) * C21367 +
            C22582 * C21372 + C22583 * C21368) *
               C47294 * C2117 +
           ((C21369 * C418 - C47018 * C431) * C21370 +
            (C21369 * C434 - C47018 * C448) * C21366 +
            (C23128 - C23129) * C21371 + (C23130 - C23131) * C21367 +
            (C23132 - C23133) * C21372 + (C23134 - C23135) * C21368) *
               C47294 * C2118 +
           ((C47018 * C1851 - C21369 * C1845) * C21370 +
            (C47018 * C1863 - C21369 * C1854) * C21366 +
            (C47018 * C2226 - C21369 * C2223) * C21371 +
            (C47018 * C2232 - C21369 * C2229) * C21367 +
            (C47018 * C7172 - C21369 * C7170) * C21372 +
            (C47018 * C7176 - C21369 * C7174) * C21368) *
               C47294 * C47387) *
              C47073 * C47056)) /
            (p * q * std::sqrt(p + q));
    d2ee[114] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C47018 * C124 - C21369 * C117) * C21370 +
            (C47018 * C138 - C21369 * C127) * C21366 +
            (C21484 - C21485) * C21371 + (C21486 - C21487) * C21367 +
            C21520 * C21372 + C21521 * C21368) *
               C47294 * C47091 * C47410 +
           ((C21485 - C21484) * C21370 + (C21487 - C21486) * C21366 +
            (C21489 - C21488) * C21371 + (C21491 - C21490) * C21367 +
            (C21492 - C21493) * C21372 + (C21494 - C21495) * C21368) *
               C47294 * C47091 * C47398 +
           (C21520 * C21370 + C21521 * C21366 + (C21493 - C21492) * C21371 +
            (C21495 - C21494) * C21367 +
            (C47018 * C1028 - C21369 * C1019) * C21372 +
            (C47018 * C1037 - C21369 * C1031) * C21368) *
               C47294 * C47091 * C47371) *
              C258 +
          (((C21369 * C118 - C47018 * C125) * C21370 +
            (C21369 * C128 - C47018 * C139) * C21366 +
            (C21496 - C21497) * C21371 + (C21498 - C21499) * C21367 +
            C21522 * C21372 + C21523 * C21368) *
               C47294 * C47091 * C47410 +
           ((C21497 - C21496) * C21370 + (C21499 - C21498) * C21366 +
            (C21501 - C21500) * C21371 + (C21503 - C21502) * C21367 +
            (C21504 - C21505) * C21372 + (C21506 - C21507) * C21368) *
               C47294 * C47091 * C47398 +
           (C21522 * C21370 + C21523 * C21366 + (C21505 - C21504) * C21371 +
            (C21507 - C21506) * C21367 +
            (C21369 * C1020 - C47018 * C1029) * C21372 +
            (C21369 * C1032 - C47018 * C1038) * C21368) *
               C47294 * C47091 * C47371) *
              C259 +
          (((C47018 * C126 - C21369 * C119) * C21370 +
            (C47018 * C140 - C21369 * C129) * C21366 +
            (C21508 - C21509) * C21371 + (C21510 - C21511) * C21367 +
            C21524 * C21372 + C21525 * C21368) *
               C47294 * C47091 * C47410 +
           ((C21509 - C21508) * C21370 + (C21511 - C21510) * C21366 +
            (C21513 - C21512) * C21371 + (C21515 - C21514) * C21367 +
            (C21516 - C21517) * C21372 + (C21518 - C21519) * C21368) *
               C47294 * C47091 * C47398 +
           (C21524 * C21370 + C21525 * C21366 + (C21517 - C21516) * C21371 +
            (C21519 - C21518) * C21367 +
            (C47018 * C1030 - C21369 * C1021) * C21372 +
            (C47018 * C1039 - C21369 * C1033) * C21368) *
               C47294 * C47091 * C47371) *
              C47365)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C47018 * C124 - C21369 * C117) * C21370 +
           (C47018 * C138 - C21369 * C127) * C21366 +
           (C47018 * C271 - C21369 * C261) * C21371 +
           (C47018 * C291 - C21369 * C274) * C21367 +
           (C47018 * C277 - C21369 * C264) * C21372 +
           (C47018 * C294 - C21369 * C280) * C21368) *
              C47294 * C47091 * C47073 * C108 +
          ((C21369 * C118 - C47018 * C125) * C21370 +
           (C21369 * C128 - C47018 * C139) * C21366 +
           (C21369 * C262 - C47018 * C272) * C21371 +
           (C21369 * C275 - C47018 * C292) * C21367 +
           (C21369 * C265 - C47018 * C278) * C21372 +
           (C21369 * C281 - C47018 * C295) * C21368) *
              C47294 * C47091 * C47073 * C109 +
          ((C47018 * C126 - C21369 * C119) * C21370 +
           (C47018 * C140 - C21369 * C129) * C21366 +
           (C47018 * C273 - C21369 * C263) * C21371 +
           (C47018 * C293 - C21369 * C276) * C21367 +
           (C47018 * C279 - C21369 * C266) * C21372 +
           (C47018 * C296 - C21369 * C282) * C21368) *
              C47294 * C47091 * C47073 * C110 +
          ((C21369 * C120 - C47018 * C130) * C21370 +
           (C21369 * C131 - C47018 * C141) * C21366 +
           (C21369 * C267 - C47018 * C283) * C21371 +
           (C21369 * C284 - C47018 * C297) * C21367 +
           (C21369 * C268 - C47018 * C285) * C21372 +
           (C21369 * C286 - C47018 * C298) * C21368) *
              C47294 * C47091 * C47073 * C111 +
          ((C47018 * C132 - C21369 * C121) * C21370 +
           (C47018 * C142 - C21369 * C133) * C21366 +
           (C47018 * C287 - C21369 * C269) * C21371 +
           (C47018 * C299 - C21369 * C288) * C21367 +
           (C47018 * C289 - C21369 * C270) * C21372 +
           (C47018 * C300 - C21369 * C290) * C21368) *
              C47294 * C47091 * C47073 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C47018 * C124 - C21369 * C117) * C21370 +
            (C47018 * C138 - C21369 * C127) * C21366 +
            (C21484 - C21485) * C21371 + (C21486 - C21487) * C21367 +
            C21520 * C21372 + C21521 * C21368) *
               C47294 * C47091 * C942 +
           ((C21485 - C21484) * C21370 + (C21487 - C21486) * C21366 +
            (C21489 - C21488) * C21371 + (C21491 - C21490) * C21367 +
            (C21492 - C21493) * C21372 + (C21494 - C21495) * C21368) *
               C47294 * C47091 * C943 +
           (C21520 * C21370 + C21521 * C21366 + (C21493 - C21492) * C21371 +
            (C21495 - C21494) * C21367 +
            (C47018 * C1028 - C21369 * C1019) * C21372 +
            (C47018 * C1037 - C21369 * C1031) * C21368) *
               C47294 * C47091 * C47371) *
              C47407 +
          (((C21369 * C118 - C47018 * C125) * C21370 +
            (C21369 * C128 - C47018 * C139) * C21366 +
            (C21496 - C21497) * C21371 + (C21498 - C21499) * C21367 +
            C21522 * C21372 + C21523 * C21368) *
               C47294 * C47091 * C942 +
           ((C21497 - C21496) * C21370 + (C21499 - C21498) * C21366 +
            (C21501 - C21500) * C21371 + (C21503 - C21502) * C21367 +
            (C21504 - C21505) * C21372 + (C21506 - C21507) * C21368) *
               C47294 * C47091 * C943 +
           (C21522 * C21370 + C21523 * C21366 + (C21505 - C21504) * C21371 +
            (C21507 - C21506) * C21367 +
            (C21369 * C1020 - C47018 * C1029) * C21372 +
            (C21369 * C1032 - C47018 * C1038) * C21368) *
               C47294 * C47091 * C47371) *
              C47394 +
          (((C47018 * C126 - C21369 * C119) * C21370 +
            (C47018 * C140 - C21369 * C129) * C21366 +
            (C21508 - C21509) * C21371 + (C21510 - C21511) * C21367 +
            C21524 * C21372 + C21525 * C21368) *
               C47294 * C47091 * C942 +
           ((C21509 - C21508) * C21370 + (C21511 - C21510) * C21366 +
            (C21513 - C21512) * C21371 + (C21515 - C21514) * C21367 +
            (C21516 - C21517) * C21372 + (C21518 - C21519) * C21368) *
               C47294 * C47091 * C943 +
           (C21524 * C21370 + C21525 * C21366 + (C21517 - C21516) * C21371 +
            (C21519 - C21518) * C21367 +
            (C47018 * C1030 - C21369 * C1021) * C21372 +
            (C47018 * C1039 - C21369 * C1033) * C21368) *
               C47294 * C47091 * C47371) *
              C47365)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C47018 * C124 - C21369 * C117) * C21370 +
           (C47018 * C138 - C21369 * C127) * C21366 +
           (C21484 - C21485) * C21371 + (C21486 - C21487) * C21367 +
           C21520 * C21372 + C21521 * C21368) *
              C47294 * C47091 * C1010 +
          ((C21485 - C21484) * C21370 + (C21487 - C21486) * C21366 +
           (C21489 - C21488) * C21371 + (C21491 - C21490) * C21367 +
           C22186 * C21372 + C22187 * C21368) *
              C47294 * C47091 * C1011 +
          (C21520 * C21370 + C21521 * C21366 + (C21493 - C21492) * C21371 +
           (C21495 - C21494) * C21367 + C22196 * C21372 + C22197 * C21368) *
              C47294 * C47091 * C1012 +
          (C22186 * C21370 + C22187 * C21366 + (C22189 - C22188) * C21371 +
           (C22191 - C22190) * C21367 + (C22192 - C22193) * C21372 +
           (C22194 - C22195) * C21368) *
              C47294 * C47091 * C1013 +
          (C22196 * C21370 + C22197 * C21366 + (C22193 - C22192) * C21371 +
           (C22195 - C22194) * C21367 +
           (C47018 * C22182 - C21369 * C22181) * C21372 +
           (C47018 * C22184 - C21369 * C22183) * C21368) *
              C47294 * C47091 * C1014) *
         C47045) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C47018 * C124 - C21369 * C117) * C21370 +
            (C47018 * C138 - C21369 * C127) * C21366 +
            (C21484 - C21485) * C21371 + (C21486 - C21487) * C21367 +
            C21520 * C21372 + C21521 * C21368) *
               C47294 * C1664 +
           ((C21369 * C414 - C47018 * C424) * C21370 +
            (C21369 * C427 - C47018 * C444) * C21366 +
            (C21986 - C21987) * C21371 + (C21988 - C21989) * C21367 +
            C22312 * C21372 + C22313 * C21368) *
               C47294 * C1665 +
           ((C47018 * C430 - C21369 * C417) * C21370 +
            (C47018 * C447 - C21369 * C433) * C21366 +
            (C22314 - C22315) * C21371 + (C22316 - C22317) * C21367 +
            C22330 * C21372 + C22331 * C21368) *
               C47294 * C47374) *
              C47073 * C47407 +
          (((C21369 * C118 - C47018 * C125) * C21370 +
            (C21369 * C128 - C47018 * C139) * C21366 +
            (C21496 - C21497) * C21371 + (C21498 - C21499) * C21367 +
            C21522 * C21372 + C21523 * C21368) *
               C47294 * C1664 +
           ((C47018 * C425 - C21369 * C415) * C21370 +
            (C47018 * C445 - C21369 * C428) * C21366 +
            (C21994 - C21995) * C21371 + (C21996 - C21997) * C21367 +
            C22582 * C21372 + C22583 * C21368) *
               C47294 * C1665 +
           ((C21369 * C418 - C47018 * C431) * C21370 +
            (C21369 * C434 - C47018 * C448) * C21366 +
            (C21369 * C1151 - C47018 * C1160) * C21371 +
            (C21369 * C1163 - C47018 * C1178) * C21367 +
            (C21369 * C1157 - C47018 * C1172) * C21372 +
            (C21369 * C1175 - C47018 * C1184) * C21368) *
               C47294 * C47374) *
              C47073 * C47394 +
          (((C47018 * C126 - C21369 * C119) * C21370 +
            (C47018 * C140 - C21369 * C129) * C21366 +
            (C21508 - C21509) * C21371 + (C21510 - C21511) * C21367 +
            C21524 * C21372 + C21525 * C21368) *
               C47294 * C1664 +
           ((C21369 * C416 - C47018 * C426) * C21370 +
            (C21369 * C429 - C47018 * C446) * C21366 +
            (C22002 - C22003) * C21371 + (C22004 - C22005) * C21367 +
            (C22006 - C22007) * C21372 + (C22008 - C22009) * C21368) *
               C47294 * C1665 +
           ((C47018 * C432 - C21369 * C419) * C21370 +
            (C47018 * C449 - C21369 * C435) * C21366 +
            (C47018 * C1161 - C21369 * C1152) * C21371 +
            (C47018 * C1179 - C21369 * C1164) * C21367 +
            (C47018 * C1173 - C21369 * C1158) * C21372 +
            (C47018 * C1185 - C21369 * C1176) * C21368) *
               C47294 * C47374) *
              C47073 * C47365)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C47018 * C124 - C21369 * C117) * C21370 +
            (C47018 * C138 - C21369 * C127) * C21366 +
            (C21484 - C21485) * C21371 + (C21486 - C21487) * C21367 +
            C21520 * C21372 + C21521 * C21368) *
               C47294 * C1664 +
           ((C21369 * C414 - C47018 * C424) * C21370 +
            (C21369 * C427 - C47018 * C444) * C21366 +
            (C21986 - C21987) * C21371 + (C21988 - C21989) * C21367 +
            C22312 * C21372 + C22313 * C21368) *
               C47294 * C1665 +
           ((C47018 * C430 - C21369 * C417) * C21370 +
            (C47018 * C447 - C21369 * C433) * C21366 +
            (C22314 - C22315) * C21371 + (C22316 - C22317) * C21367 +
            C22330 * C21372 + C22331 * C21368) *
               C47294 * C47374) *
              C47410 +
          (((C21485 - C21484) * C21370 + (C21487 - C21486) * C21366 +
            (C21489 - C21488) * C21371 + (C21491 - C21490) * C21367 +
            C22186 * C21372 + C22187 * C21368) *
               C47294 * C1664 +
           ((C21987 - C21986) * C21370 + (C21989 - C21988) * C21366 +
            (C21991 - C21990) * C21371 + (C21993 - C21992) * C21367 +
            C22690 * C21372 + C22691 * C21368) *
               C47294 * C1665 +
           ((C22315 - C22314) * C21370 + (C22317 - C22316) * C21366 +
            (C22319 - C22318) * C21371 + (C22321 - C22320) * C21367 +
            (C22326 - C22327) * C21372 + (C22328 - C22329) * C21368) *
               C47294 * C47374) *
              C47398 +
          ((C21520 * C21370 + C21521 * C21366 + (C21493 - C21492) * C21371 +
            (C21495 - C21494) * C21367 + C22196 * C21372 + C22197 * C21368) *
               C47294 * C1664 +
           (C22312 * C21370 + C22313 * C21366 + (C22323 - C22322) * C21371 +
            (C22325 - C22324) * C21367 + (C22692 - C22693) * C21372 +
            (C22694 - C22695) * C21368) *
               C47294 * C1665 +
           (C22330 * C21370 + C22331 * C21366 + (C22327 - C22326) * C21371 +
            (C22329 - C22328) * C21367 +
            (C47018 * C22308 - C21369 * C22307) * C21372 +
            (C47018 * C22310 - C21369 * C22309) * C21368) *
               C47294 * C47374) *
              C47371) *
         C47045) /
            (p * q * std::sqrt(p + q));
    d2ee[115] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((((C47018 * C124 - C21369 * C117) * C21370 +
                      (C47018 * C138 - C21369 * C127) * C21366 +
                      (C21484 - C21485) * C21371 + (C21486 - C21487) * C21367 +
                      C21520 * C21372 + C21521 * C21368) *
                         C47294 * C3094 +
                     ((C21369 * C414 - C47018 * C424) * C21370 +
                      (C21369 * C427 - C47018 * C444) * C21366 +
                      (C21986 - C21987) * C21371 + (C21988 - C21989) * C21367 +
                      C22312 * C21372 + C22313 * C21368) *
                         C47294 * C47178) *
                        C47339 +
                    (((C21485 - C21484) * C21370 + (C21487 - C21486) * C21366 +
                      (C21489 - C21488) * C21371 + (C21491 - C21490) * C21367 +
                      C22186 * C21372 + C22187 * C21368) *
                         C47294 * C3094 +
                     ((C21987 - C21986) * C21370 + (C21989 - C21988) * C21366 +
                      (C21991 - C21990) * C21371 + (C21993 - C21992) * C21367 +
                      C22690 * C21372 + C22691 * C21368) *
                         C47294 * C47178) *
                        C47136) *
                       C47050 +
                   ((((C21369 * C118 - C47018 * C125) * C21370 +
                      (C21369 * C128 - C47018 * C139) * C21366 +
                      (C21496 - C21497) * C21371 + (C21498 - C21499) * C21367 +
                      C21522 * C21372 + C21523 * C21368) *
                         C47294 * C3094 +
                     ((C47018 * C425 - C21369 * C415) * C21370 +
                      (C47018 * C445 - C21369 * C428) * C21366 +
                      (C21994 - C21995) * C21371 + (C21996 - C21997) * C21367 +
                      C22582 * C21372 + C22583 * C21368) *
                         C47294 * C47178) *
                        C47339 +
                    (((C21497 - C21496) * C21370 + (C21499 - C21498) * C21366 +
                      (C21501 - C21500) * C21371 + (C21503 - C21502) * C21367 +
                      C22430 * C21372 + C22431 * C21368) *
                         C47294 * C3094 +
                     ((C21995 - C21994) * C21370 + (C21997 - C21996) * C21366 +
                      (C21999 - C21998) * C21371 + (C22001 - C22000) * C21367 +
                      (C22584 - C22585) * C21372 + (C22586 - C22587) * C21368) *
                         C47294 * C47178) *
                        C47136) *
                       C47059 +
                   ((((C47018 * C126 - C21369 * C119) * C21370 +
                      (C47018 * C140 - C21369 * C129) * C21366 +
                      (C21508 - C21509) * C21371 + (C21510 - C21511) * C21367 +
                      C21524 * C21372 + C21525 * C21368) *
                         C47294 * C3094 +
                     ((C21369 * C416 - C47018 * C426) * C21370 +
                      (C21369 * C429 - C47018 * C446) * C21366 +
                      (C22002 - C22003) * C21371 + (C22004 - C22005) * C21367 +
                      (C22006 - C22007) * C21372 + (C22008 - C22009) * C21368) *
                         C47294 * C47178) *
                        C47339 +
                    (((C21509 - C21508) * C21370 + (C21511 - C21510) * C21366 +
                      (C21513 - C21512) * C21371 + (C21515 - C21514) * C21367 +
                      (C21516 - C21517) * C21372 + (C21518 - C21519) * C21368) *
                         C47294 * C3094 +
                     ((C22003 - C22002) * C21370 + (C22005 - C22004) * C21366 +
                      (C22007 - C22006) * C21371 + (C22009 - C22008) * C21367 +
                      (C47018 * C1547 - C21369 * C1544) * C21372 +
                      (C47018 * C1553 - C21369 * C1550) * C21368) *
                         C47294 * C47178) *
                        C47136) *
                       C2703)) /
                 (p * q * std::sqrt(p + q));
    d2ee[116] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((((C47018 * C124 - C21369 * C117) * C21370 +
                      (C47018 * C138 - C21369 * C127) * C21366 +
                      (C21484 - C21485) * C21371 + (C21486 - C21487) * C21367 +
                      C21520 * C21372 + C21521 * C21368) *
                         C47294 * C47174 +
                     ((C21369 * C414 - C47018 * C424) * C21370 +
                      (C21369 * C427 - C47018 * C444) * C21366 +
                      (C21986 - C21987) * C21371 + (C21988 - C21989) * C21367 +
                      C22312 * C21372 + C22313 * C21368) *
                         C47294 * C47181 +
                     ((C47018 * C430 - C21369 * C417) * C21370 +
                      (C47018 * C447 - C21369 * C433) * C21366 +
                      (C22314 - C22315) * C21371 + (C22316 - C22317) * C21367 +
                      C22330 * C21372 + C22331 * C21368) *
                         C47294 * C3602) *
                        C47339 +
                    (((C21485 - C21484) * C21370 + (C21487 - C21486) * C21366 +
                      (C21489 - C21488) * C21371 + (C21491 - C21490) * C21367 +
                      C22186 * C21372 + C22187 * C21368) *
                         C47294 * C47174 +
                     ((C21987 - C21986) * C21370 + (C21989 - C21988) * C21366 +
                      (C21991 - C21990) * C21371 + (C21993 - C21992) * C21367 +
                      C22690 * C21372 + C22691 * C21368) *
                         C47294 * C47181 +
                     ((C22315 - C22314) * C21370 + (C22317 - C22316) * C21366 +
                      (C22319 - C22318) * C21371 + (C22321 - C22320) * C21367 +
                      (C22326 - C22327) * C21372 + (C22328 - C22329) * C21368) *
                         C47294 * C3602) *
                        C47136) *
                       C2440 +
                   ((((C21369 * C118 - C47018 * C125) * C21370 +
                      (C21369 * C128 - C47018 * C139) * C21366 +
                      (C21496 - C21497) * C21371 + (C21498 - C21499) * C21367 +
                      C21522 * C21372 + C21523 * C21368) *
                         C47294 * C47174 +
                     ((C47018 * C425 - C21369 * C415) * C21370 +
                      (C47018 * C445 - C21369 * C428) * C21366 +
                      (C21994 - C21995) * C21371 + (C21996 - C21997) * C21367 +
                      C22582 * C21372 + C22583 * C21368) *
                         C47294 * C47181 +
                     ((C21369 * C418 - C47018 * C431) * C21370 +
                      (C21369 * C434 - C47018 * C448) * C21366 +
                      (C23128 - C23129) * C21371 + (C23130 - C23131) * C21367 +
                      (C23132 - C23133) * C21372 + (C23134 - C23135) * C21368) *
                         C47294 * C3602) *
                        C47339 +
                    (((C21497 - C21496) * C21370 + (C21499 - C21498) * C21366 +
                      (C21501 - C21500) * C21371 + (C21503 - C21502) * C21367 +
                      C22430 * C21372 + C22431 * C21368) *
                         C47294 * C47174 +
                     ((C21995 - C21994) * C21370 + (C21997 - C21996) * C21366 +
                      (C21999 - C21998) * C21371 + (C22001 - C22000) * C21367 +
                      (C22584 - C22585) * C21372 + (C22586 - C22587) * C21368) *
                         C47294 * C47181 +
                     ((C23129 - C23128) * C21370 + (C23131 - C23130) * C21366 +
                      (C23133 - C23132) * C21371 + (C23135 - C23134) * C21367 +
                      (C47018 * C5810 - C21369 * C5808) * C21372 +
                      (C47018 * C5814 - C21369 * C5812) * C21368) *
                         C47294 * C3602) *
                        C47136) *
                       C47056)) /
                 (p * q * std::sqrt(p + q));
    d2ee[117] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C47018 * C124 - C21369 * C117) * C21370 +
             (C47018 * C138 - C21369 * C127) * C21366 +
             (C21484 - C21485) * C21371 + (C21486 - C21487) * C21367 +
             C21520 * C21372 + C21521 * C21368) *
                C47294 * C3094 +
            ((C21369 * C414 - C47018 * C424) * C21370 +
             (C21369 * C427 - C47018 * C444) * C21366 +
             (C21986 - C21987) * C21371 + (C21988 - C21989) * C21367 +
             C22312 * C21372 + C22313 * C21368) *
                C47294 * C47178) *
               C47410 +
           (((C21485 - C21484) * C21370 + (C21487 - C21486) * C21366 +
             (C21489 - C21488) * C21371 + (C21491 - C21490) * C21367 +
             C22186 * C21372 + C22187 * C21368) *
                C47294 * C3094 +
            ((C21987 - C21986) * C21370 + (C21989 - C21988) * C21366 +
             (C21991 - C21990) * C21371 + (C21993 - C21992) * C21367 +
             C22690 * C21372 + C22691 * C21368) *
                C47294 * C47178) *
               C47398 +
           ((C21520 * C21370 + C21521 * C21366 + (C21493 - C21492) * C21371 +
             (C21495 - C21494) * C21367 + C22196 * C21372 + C22197 * C21368) *
                C47294 * C3094 +
            (C22312 * C21370 + C22313 * C21366 + (C22323 - C22322) * C21371 +
             (C22325 - C22324) * C21367 + (C22692 - C22693) * C21372 +
             (C22694 - C22695) * C21368) *
                C47294 * C47178) *
               C47371) *
              C2440 +
          ((((C21369 * C118 - C47018 * C125) * C21370 +
             (C21369 * C128 - C47018 * C139) * C21366 +
             (C21496 - C21497) * C21371 + (C21498 - C21499) * C21367 +
             C21522 * C21372 + C21523 * C21368) *
                C47294 * C3094 +
            ((C47018 * C425 - C21369 * C415) * C21370 +
             (C47018 * C445 - C21369 * C428) * C21366 +
             (C21994 - C21995) * C21371 + (C21996 - C21997) * C21367 +
             C22582 * C21372 + C22583 * C21368) *
                C47294 * C47178) *
               C47410 +
           (((C21497 - C21496) * C21370 + (C21499 - C21498) * C21366 +
             (C21501 - C21500) * C21371 + (C21503 - C21502) * C21367 +
             C22430 * C21372 + C22431 * C21368) *
                C47294 * C3094 +
            ((C21995 - C21994) * C21370 + (C21997 - C21996) * C21366 +
             (C21999 - C21998) * C21371 + (C22001 - C22000) * C21367 +
             (C22584 - C22585) * C21372 + (C22586 - C22587) * C21368) *
                C47294 * C47178) *
               C47398 +
           ((C21522 * C21370 + C21523 * C21366 + (C21505 - C21504) * C21371 +
             (C21507 - C21506) * C21367 + (C22432 - C22433) * C21372 +
             (C22434 - C22435) * C21368) *
                C47294 * C3094 +
            (C22582 * C21370 + C22583 * C21366 + (C22585 - C22584) * C21371 +
             (C22587 - C22586) * C21367 +
             (C47018 * C6312 - C21369 * C6310) * C21372 +
             (C47018 * C6316 - C21369 * C6314) * C21368) *
                C47294 * C47178) *
               C47371) *
              C47056)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C47018 * C124 - C21369 * C117) * C21370 +
            (C47018 * C138 - C21369 * C127) * C21366 +
            (C21484 - C21485) * C21371 + (C21486 - C21487) * C21367 +
            C21520 * C21372 + C21521 * C21368) *
               C47294 * C3094 +
           ((C21369 * C414 - C47018 * C424) * C21370 +
            (C21369 * C427 - C47018 * C444) * C21366 +
            (C21986 - C21987) * C21371 + (C21988 - C21989) * C21367 +
            C22312 * C21372 + C22313 * C21368) *
               C47294 * C47178) *
              C47073 * C47416 +
          (((C21369 * C118 - C47018 * C125) * C21370 +
            (C21369 * C128 - C47018 * C139) * C21366 +
            (C21496 - C21497) * C21371 + (C21498 - C21499) * C21367 +
            C21522 * C21372 + C21523 * C21368) *
               C47294 * C3094 +
           ((C47018 * C425 - C21369 * C415) * C21370 +
            (C47018 * C445 - C21369 * C428) * C21366 +
            (C21994 - C21995) * C21371 + (C21996 - C21997) * C21367 +
            C22582 * C21372 + C22583 * C21368) *
               C47294 * C47178) *
              C47073 * C47409 +
          (((C47018 * C126 - C21369 * C119) * C21370 +
            (C47018 * C140 - C21369 * C129) * C21366 +
            (C21508 - C21509) * C21371 + (C21510 - C21511) * C21367 +
            C21524 * C21372 + C21525 * C21368) *
               C47294 * C3094 +
           ((C21369 * C416 - C47018 * C426) * C21370 +
            (C21369 * C429 - C47018 * C446) * C21366 +
            (C22002 - C22003) * C21371 + (C22004 - C22005) * C21367 +
            (C22006 - C22007) * C21372 + (C22008 - C22009) * C21368) *
               C47294 * C47178) *
              C47073 * C47396 +
          (((C21369 * C120 - C47018 * C130) * C21370 +
            (C21369 * C131 - C47018 * C141) * C21366 +
            (C21734 - C21735) * C21371 + (C21736 - C21737) * C21367 +
            (C21738 - C21739) * C21372 + (C21740 - C21741) * C21368) *
               C47294 * C3094 +
           ((C47018 * C436 - C21369 * C420) * C21370 +
            (C47018 * C450 - C21369 * C437) * C21366 +
            (C47018 * C823 - C21369 * C815) * C21371 +
            (C47018 * C830 - C21369 * C824) * C21367 +
            (C47018 * C1441 - C21369 * C1440) * C21372 +
            (C47018 * C1443 - C21369 * C1442) * C21368) *
               C47294 * C47178) *
              C47073 * C47375)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C47018 * C124 - C21369 * C117) * C21370 +
            (C47018 * C138 - C21369 * C127) * C21366 +
            (C21484 - C21485) * C21371 + (C21486 - C21487) * C21367 +
            C21520 * C21372 + C21521 * C21368) *
               C47294 * C47418 +
           ((C21369 * C414 - C47018 * C424) * C21370 +
            (C21369 * C427 - C47018 * C444) * C21366 +
            (C21986 - C21987) * C21371 + (C21988 - C21989) * C21367 +
            C22312 * C21372 + C22313 * C21368) *
               C47294 * C47415 +
           ((C47018 * C430 - C21369 * C417) * C21370 +
            (C47018 * C447 - C21369 * C433) * C21366 +
            (C22314 - C22315) * C21371 + (C22316 - C22317) * C21367 +
            C22330 * C21372 + C22331 * C21368) *
               C47294 * C47406 +
           ((C21369 * C1844 - C47018 * C1850) * C21370 +
            (C21369 * C1853 - C47018 * C1862) * C21366 +
            (C23336 - C23337) * C21371 + (C23338 - C23339) * C21367 +
            (C23340 - C23341) * C21372 + (C23342 - C23343) * C21368) *
               C47294 * C47387) *
              C47073 * C2440 +
          (((C21369 * C118 - C47018 * C125) * C21370 +
            (C21369 * C128 - C47018 * C139) * C21366 +
            (C21496 - C21497) * C21371 + (C21498 - C21499) * C21367 +
            C21522 * C21372 + C21523 * C21368) *
               C47294 * C47418 +
           ((C47018 * C425 - C21369 * C415) * C21370 +
            (C47018 * C445 - C21369 * C428) * C21366 +
            (C21994 - C21995) * C21371 + (C21996 - C21997) * C21367 +
            C22582 * C21372 + C22583 * C21368) *
               C47294 * C47415 +
           ((C21369 * C418 - C47018 * C431) * C21370 +
            (C21369 * C434 - C47018 * C448) * C21366 +
            (C23128 - C23129) * C21371 + (C23130 - C23131) * C21367 +
            (C23132 - C23133) * C21372 + (C23134 - C23135) * C21368) *
               C47294 * C47406 +
           ((C47018 * C1851 - C21369 * C1845) * C21370 +
            (C47018 * C1863 - C21369 * C1854) * C21366 +
            (C47018 * C2226 - C21369 * C2223) * C21371 +
            (C47018 * C2232 - C21369 * C2229) * C21367 +
            (C47018 * C7172 - C21369 * C7170) * C21372 +
            (C47018 * C7176 - C21369 * C7174) * C21368) *
               C47294 * C47387) *
              C47073 * C47056)) /
            (p * q * std::sqrt(p + q));
    d2ee[118] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((C47018 * C124 - C21369 * C117) * C21370 +
                     (C47018 * C138 - C21369 * C127) * C21366 +
                     (C21484 - C21485) * C21371 + (C21486 - C21487) * C21367 +
                     C21520 * C21372 + C21521 * C21368) *
                        C47294 * C47174 +
                    ((C21369 * C414 - C47018 * C424) * C21370 +
                     (C21369 * C427 - C47018 * C444) * C21366 +
                     (C21986 - C21987) * C21371 + (C21988 - C21989) * C21367 +
                     C22312 * C21372 + C22313 * C21368) *
                        C47294 * C47181 +
                    ((C47018 * C430 - C21369 * C417) * C21370 +
                     (C47018 * C447 - C21369 * C433) * C21366 +
                     (C22314 - C22315) * C21371 + (C22316 - C22317) * C21367 +
                     C22330 * C21372 + C22331 * C21368) *
                        C47294 * C3602) *
                       C47073 * C47050 +
                   (((C21369 * C118 - C47018 * C125) * C21370 +
                     (C21369 * C128 - C47018 * C139) * C21366 +
                     (C21496 - C21497) * C21371 + (C21498 - C21499) * C21367 +
                     C21522 * C21372 + C21523 * C21368) *
                        C47294 * C47174 +
                    ((C47018 * C425 - C21369 * C415) * C21370 +
                     (C47018 * C445 - C21369 * C428) * C21366 +
                     (C21994 - C21995) * C21371 + (C21996 - C21997) * C21367 +
                     C22582 * C21372 + C22583 * C21368) *
                        C47294 * C47181 +
                    ((C21369 * C418 - C47018 * C431) * C21370 +
                     (C21369 * C434 - C47018 * C448) * C21366 +
                     (C23128 - C23129) * C21371 + (C23130 - C23131) * C21367 +
                     (C23132 - C23133) * C21372 + (C23134 - C23135) * C21368) *
                        C47294 * C3602) *
                       C47073 * C47059 +
                   (((C47018 * C126 - C21369 * C119) * C21370 +
                     (C47018 * C140 - C21369 * C129) * C21366 +
                     (C21508 - C21509) * C21371 + (C21510 - C21511) * C21367 +
                     C21524 * C21372 + C21525 * C21368) *
                        C47294 * C47174 +
                    ((C21369 * C416 - C47018 * C426) * C21370 +
                     (C21369 * C429 - C47018 * C446) * C21366 +
                     (C22002 - C22003) * C21371 + (C22004 - C22005) * C21367 +
                     (C22006 - C22007) * C21372 + (C22008 - C22009) * C21368) *
                        C47294 * C47181 +
                    ((C47018 * C432 - C21369 * C419) * C21370 +
                     (C47018 * C449 - C21369 * C435) * C21366 +
                     (C47018 * C1161 - C21369 * C1152) * C21371 +
                     (C47018 * C1179 - C21369 * C1164) * C21367 +
                     (C47018 * C1173 - C21369 * C1158) * C21372 +
                     (C47018 * C1185 - C21369 * C1176) * C21368) *
                        C47294 * C3602) *
                       C47073 * C2703)) /
                 (p * q * std::sqrt(p + q));
    d2ee[119] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C47018 * C124 - C21369 * C117) * C21370 +
            (C47018 * C138 - C21369 * C127) * C21366 +
            (C21484 - C21485) * C21371 + (C21486 - C21487) * C21367 +
            C21520 * C21372 + C21521 * C21368) *
               C47294 * C3094 +
           ((C21369 * C414 - C47018 * C424) * C21370 +
            (C21369 * C427 - C47018 * C444) * C21366 +
            (C21986 - C21987) * C21371 + (C21988 - C21989) * C21367 +
            C22312 * C21372 + C22313 * C21368) *
               C47294 * C47178) *
              C47073 * C47416 +
          (((C21369 * C118 - C47018 * C125) * C21370 +
            (C21369 * C128 - C47018 * C139) * C21366 +
            (C21496 - C21497) * C21371 + (C21498 - C21499) * C21367 +
            C21522 * C21372 + C21523 * C21368) *
               C47294 * C3094 +
           ((C47018 * C425 - C21369 * C415) * C21370 +
            (C47018 * C445 - C21369 * C428) * C21366 +
            (C21994 - C21995) * C21371 + (C21996 - C21997) * C21367 +
            C22582 * C21372 + C22583 * C21368) *
               C47294 * C47178) *
              C47073 * C47409 +
          (((C47018 * C126 - C21369 * C119) * C21370 +
            (C47018 * C140 - C21369 * C129) * C21366 +
            (C21508 - C21509) * C21371 + (C21510 - C21511) * C21367 +
            C21524 * C21372 + C21525 * C21368) *
               C47294 * C3094 +
           ((C21369 * C416 - C47018 * C426) * C21370 +
            (C21369 * C429 - C47018 * C446) * C21366 +
            (C22002 - C22003) * C21371 + (C22004 - C22005) * C21367 +
            (C22006 - C22007) * C21372 + (C22008 - C22009) * C21368) *
               C47294 * C47178) *
              C47073 * C47396 +
          (((C21369 * C120 - C47018 * C130) * C21370 +
            (C21369 * C131 - C47018 * C141) * C21366 +
            (C21734 - C21735) * C21371 + (C21736 - C21737) * C21367 +
            (C21738 - C21739) * C21372 + (C21740 - C21741) * C21368) *
               C47294 * C3094 +
           ((C47018 * C436 - C21369 * C420) * C21370 +
            (C47018 * C450 - C21369 * C437) * C21366 +
            (C47018 * C823 - C21369 * C815) * C21371 +
            (C47018 * C830 - C21369 * C824) * C21367 +
            (C47018 * C1441 - C21369 * C1440) * C21372 +
            (C47018 * C1443 - C21369 * C1442) * C21368) *
               C47294 * C47178) *
              C47073 * C47375)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C47018 * C124 - C21369 * C117) * C21370 +
             (C47018 * C138 - C21369 * C127) * C21366 +
             (C21484 - C21485) * C21371 + (C21486 - C21487) * C21367 +
             C21520 * C21372 + C21521 * C21368) *
                C47294 * C3094 +
            ((C21369 * C414 - C47018 * C424) * C21370 +
             (C21369 * C427 - C47018 * C444) * C21366 +
             (C21986 - C21987) * C21371 + (C21988 - C21989) * C21367 +
             C22312 * C21372 + C22313 * C21368) *
                C47294 * C47178) *
               C47410 +
           (((C21485 - C21484) * C21370 + (C21487 - C21486) * C21366 +
             (C21489 - C21488) * C21371 + (C21491 - C21490) * C21367 +
             C22186 * C21372 + C22187 * C21368) *
                C47294 * C3094 +
            ((C21987 - C21986) * C21370 + (C21989 - C21988) * C21366 +
             (C21991 - C21990) * C21371 + (C21993 - C21992) * C21367 +
             C22690 * C21372 + C22691 * C21368) *
                C47294 * C47178) *
               C47398 +
           ((C21520 * C21370 + C21521 * C21366 + (C21493 - C21492) * C21371 +
             (C21495 - C21494) * C21367 + C22196 * C21372 + C22197 * C21368) *
                C47294 * C3094 +
            (C22312 * C21370 + C22313 * C21366 + (C22323 - C22322) * C21371 +
             (C22325 - C22324) * C21367 + (C22692 - C22693) * C21372 +
             (C22694 - C22695) * C21368) *
                C47294 * C47178) *
               C47371) *
              C2440 +
          ((((C21369 * C118 - C47018 * C125) * C21370 +
             (C21369 * C128 - C47018 * C139) * C21366 +
             (C21496 - C21497) * C21371 + (C21498 - C21499) * C21367 +
             C21522 * C21372 + C21523 * C21368) *
                C47294 * C3094 +
            ((C47018 * C425 - C21369 * C415) * C21370 +
             (C47018 * C445 - C21369 * C428) * C21366 +
             (C21994 - C21995) * C21371 + (C21996 - C21997) * C21367 +
             C22582 * C21372 + C22583 * C21368) *
                C47294 * C47178) *
               C47410 +
           (((C21497 - C21496) * C21370 + (C21499 - C21498) * C21366 +
             (C21501 - C21500) * C21371 + (C21503 - C21502) * C21367 +
             C22430 * C21372 + C22431 * C21368) *
                C47294 * C3094 +
            ((C21995 - C21994) * C21370 + (C21997 - C21996) * C21366 +
             (C21999 - C21998) * C21371 + (C22001 - C22000) * C21367 +
             (C22584 - C22585) * C21372 + (C22586 - C22587) * C21368) *
                C47294 * C47178) *
               C47398 +
           ((C21522 * C21370 + C21523 * C21366 + (C21505 - C21504) * C21371 +
             (C21507 - C21506) * C21367 + (C22432 - C22433) * C21372 +
             (C22434 - C22435) * C21368) *
                C47294 * C3094 +
            (C22582 * C21370 + C22583 * C21366 + (C22585 - C22584) * C21371 +
             (C22587 - C22586) * C21367 +
             (C47018 * C6312 - C21369 * C6310) * C21372 +
             (C47018 * C6316 - C21369 * C6314) * C21368) *
                C47294 * C47178) *
               C47371) *
              C47056)) /
            (p * q * std::sqrt(p + q));
    d2ee[120] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C47018 * C124 - C21369 * C117) * C21370 +
            (C47018 * C138 - C21369 * C127) * C21366 +
            (C21484 - C21485) * C21371 + (C21486 - C21487) * C21367 +
            C21520 * C21372 + C21521 * C21368) *
               C47294 * C47091 * C47339 +
           ((C21485 - C21484) * C21370 + (C21487 - C21486) * C21366 +
            (C21489 - C21488) * C21371 + (C21491 - C21490) * C21367 +
            (C21492 - C21493) * C21372 + (C21494 - C21495) * C21368) *
               C47294 * C47091 * C47136) *
              C554 +
          (((C21369 * C118 - C47018 * C125) * C21370 +
            (C21369 * C128 - C47018 * C139) * C21366 +
            (C21496 - C21497) * C21371 + (C21498 - C21499) * C21367 +
            C21522 * C21372 + C21523 * C21368) *
               C47294 * C47091 * C47339 +
           ((C21497 - C21496) * C21370 + (C21499 - C21498) * C21366 +
            (C21501 - C21500) * C21371 + (C21503 - C21502) * C21367 +
            (C21504 - C21505) * C21372 + (C21506 - C21507) * C21368) *
               C47294 * C47091 * C47136) *
              C555 +
          (((C47018 * C126 - C21369 * C119) * C21370 +
            (C47018 * C140 - C21369 * C129) * C21366 +
            (C21508 - C21509) * C21371 + (C21510 - C21511) * C21367 +
            C21524 * C21372 + C21525 * C21368) *
               C47294 * C47091 * C47339 +
           ((C21509 - C21508) * C21370 + (C21511 - C21510) * C21366 +
            (C21513 - C21512) * C21371 + (C21515 - C21514) * C21367 +
            (C21516 - C21517) * C21372 + (C21518 - C21519) * C21368) *
               C47294 * C47091 * C47136) *
              C556 +
          (((C21369 * C120 - C47018 * C130) * C21370 +
            (C21369 * C131 - C47018 * C141) * C21366 +
            (C21734 - C21735) * C21371 + (C21736 - C21737) * C21367 +
            (C21738 - C21739) * C21372 + (C21740 - C21741) * C21368) *
               C47294 * C47091 * C47339 +
           ((C21735 - C21734) * C21370 + (C21737 - C21736) * C21366 +
            (C21739 - C21738) * C21371 + (C21741 - C21740) * C21367 +
            (C47018 * C1291 - C21369 * C1290) * C21372 +
            (C47018 * C1293 - C21369 * C1292) * C21368) *
               C47294 * C47091 * C47136) *
              C47375)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C47018 * C124 - C21369 * C117) * C21370 +
            (C47018 * C138 - C21369 * C127) * C21366 +
            (C21484 - C21485) * C21371 + (C21486 - C21487) * C21367 +
            C21520 * C21372 + C21521 * C21368) *
               C47294 * C47091 * C1284 +
           ((C21485 - C21484) * C21370 + (C21487 - C21486) * C21366 +
            (C21489 - C21488) * C21371 + (C21491 - C21490) * C21367 +
            C22186 * C21372 + C22187 * C21368) *
               C47294 * C47091 * C1285 +
           (C21520 * C21370 + C21521 * C21366 + (C21493 - C21492) * C21371 +
            (C21495 - C21494) * C21367 + C22196 * C21372 + C22197 * C21368) *
               C47294 * C47091 * C1286 +
           (C22186 * C21370 + C22187 * C21366 + (C22189 - C22188) * C21371 +
            (C22191 - C22190) * C21367 + (C22192 - C22193) * C21372 +
            (C22194 - C22195) * C21368) *
               C47294 * C47091 * C47381) *
              C47325 +
          (((C21369 * C118 - C47018 * C125) * C21370 +
            (C21369 * C128 - C47018 * C139) * C21366 +
            (C21496 - C21497) * C21371 + (C21498 - C21499) * C21367 +
            C21522 * C21372 + C21523 * C21368) *
               C47294 * C47091 * C1284 +
           ((C21497 - C21496) * C21370 + (C21499 - C21498) * C21366 +
            (C21501 - C21500) * C21371 + (C21503 - C21502) * C21367 +
            C22430 * C21372 + C22431 * C21368) *
               C47294 * C47091 * C1285 +
           (C21522 * C21370 + C21523 * C21366 + (C21505 - C21504) * C21371 +
            (C21507 - C21506) * C21367 + (C22432 - C22433) * C21372 +
            (C22434 - C22435) * C21368) *
               C47294 * C47091 * C1286 +
           (C22430 * C21370 + C22431 * C21366 + (C22433 - C22432) * C21371 +
            (C22435 - C22434) * C21367 +
            (C47018 * C5640 - C21369 * C5638) * C21372 +
            (C47018 * C5644 - C21369 * C5642) * C21368) *
               C47294 * C47091 * C47381) *
              C47056)) /
            (p * q * std::sqrt(p + q));
    d2ee[121] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C47018 * C124 - C21369 * C117) * C21370 +
             (C47018 * C138 - C21369 * C127) * C21366 +
             (C21484 - C21485) * C21371 + (C21486 - C21487) * C21367 +
             C21520 * C21372 + C21521 * C21368) *
                C47294 * C47340 +
            ((C21369 * C414 - C47018 * C424) * C21370 +
             (C21369 * C427 - C47018 * C444) * C21366 +
             (C21986 - C21987) * C21371 + (C21988 - C21989) * C21367 +
             (C21990 - C21991) * C21372 + (C21992 - C21993) * C21368) *
                C47294 * C47178) *
               C47339 +
           (((C21485 - C21484) * C21370 + (C21487 - C21486) * C21366 +
             (C21489 - C21488) * C21371 + (C21491 - C21490) * C21367 +
             (C21492 - C21493) * C21372 + (C21494 - C21495) * C21368) *
                C47294 * C47340 +
            ((C21987 - C21986) * C21370 + (C21989 - C21988) * C21366 +
             (C21991 - C21990) * C21371 + (C21993 - C21992) * C21367 +
             (C47018 * C1545 - C21369 * C1542) * C21372 +
             (C47018 * C1551 - C21369 * C1548) * C21368) *
                C47294 * C47178) *
               C47136) *
              C258 +
          ((((C21369 * C118 - C47018 * C125) * C21370 +
             (C21369 * C128 - C47018 * C139) * C21366 +
             (C21496 - C21497) * C21371 + (C21498 - C21499) * C21367 +
             C21522 * C21372 + C21523 * C21368) *
                C47294 * C47340 +
            ((C47018 * C425 - C21369 * C415) * C21370 +
             (C47018 * C445 - C21369 * C428) * C21366 +
             (C21994 - C21995) * C21371 + (C21996 - C21997) * C21367 +
             (C21998 - C21999) * C21372 + (C22000 - C22001) * C21368) *
                C47294 * C47178) *
               C47339 +
           (((C21497 - C21496) * C21370 + (C21499 - C21498) * C21366 +
             (C21501 - C21500) * C21371 + (C21503 - C21502) * C21367 +
             (C21504 - C21505) * C21372 + (C21506 - C21507) * C21368) *
                C47294 * C47340 +
            ((C21995 - C21994) * C21370 + (C21997 - C21996) * C21366 +
             (C21999 - C21998) * C21371 + (C22001 - C22000) * C21367 +
             (C21369 * C1543 - C47018 * C1546) * C21372 +
             (C21369 * C1549 - C47018 * C1552) * C21368) *
                C47294 * C47178) *
               C47136) *
              C259 +
          ((((C47018 * C126 - C21369 * C119) * C21370 +
             (C47018 * C140 - C21369 * C129) * C21366 +
             (C21508 - C21509) * C21371 + (C21510 - C21511) * C21367 +
             C21524 * C21372 + C21525 * C21368) *
                C47294 * C47340 +
            ((C21369 * C416 - C47018 * C426) * C21370 +
             (C21369 * C429 - C47018 * C446) * C21366 +
             (C22002 - C22003) * C21371 + (C22004 - C22005) * C21367 +
             (C22006 - C22007) * C21372 + (C22008 - C22009) * C21368) *
                C47294 * C47178) *
               C47339 +
           (((C21509 - C21508) * C21370 + (C21511 - C21510) * C21366 +
             (C21513 - C21512) * C21371 + (C21515 - C21514) * C21367 +
             (C21516 - C21517) * C21372 + (C21518 - C21519) * C21368) *
                C47294 * C47340 +
            ((C22003 - C22002) * C21370 + (C22005 - C22004) * C21366 +
             (C22007 - C22006) * C21371 + (C22009 - C22008) * C21367 +
             (C47018 * C1547 - C21369 * C1544) * C21372 +
             (C47018 * C1553 - C21369 * C1550) * C21368) *
                C47294 * C47178) *
               C47136) *
              C47365)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C47018 * C124 - C21369 * C117) * C21370 +
            (C47018 * C138 - C21369 * C127) * C21366 +
            (C21484 - C21485) * C21371 + (C21486 - C21487) * C21367 +
            C21520 * C21372 + C21521 * C21368) *
               C47294 * C47340 +
           ((C21369 * C414 - C47018 * C424) * C21370 +
            (C21369 * C427 - C47018 * C444) * C21366 +
            (C21986 - C21987) * C21371 + (C21988 - C21989) * C21367 +
            C22312 * C21372 + C22313 * C21368) *
               C47294 * C47178) *
              C1284 +
          (((C21485 - C21484) * C21370 + (C21487 - C21486) * C21366 +
            (C21489 - C21488) * C21371 + (C21491 - C21490) * C21367 +
            C22186 * C21372 + C22187 * C21368) *
               C47294 * C47340 +
           ((C21987 - C21986) * C21370 + (C21989 - C21988) * C21366 +
            (C21991 - C21990) * C21371 + (C21993 - C21992) * C21367 +
            C22690 * C21372 + C22691 * C21368) *
               C47294 * C47178) *
              C1285 +
          ((C21520 * C21370 + C21521 * C21366 + (C21493 - C21492) * C21371 +
            (C21495 - C21494) * C21367 + C22196 * C21372 + C22197 * C21368) *
               C47294 * C47340 +
           (C22312 * C21370 + C22313 * C21366 + (C22323 - C22322) * C21371 +
            (C22325 - C22324) * C21367 + (C22692 - C22693) * C21372 +
            (C22694 - C22695) * C21368) *
               C47294 * C47178) *
              C1286 +
          ((C22186 * C21370 + C22187 * C21366 + (C22189 - C22188) * C21371 +
            (C22191 - C22190) * C21367 + (C22192 - C22193) * C21372 +
            (C22194 - C22195) * C21368) *
               C47294 * C47340 +
           (C22690 * C21370 + C22691 * C21366 + (C22693 - C22692) * C21371 +
            (C22695 - C22694) * C21367 +
            (C47018 * C22686 - C21369 * C22685) * C21372 +
            (C47018 * C22688 - C21369 * C22687) * C21368) *
               C47294 * C47178) *
              C47381) *
         C47045) /
            (p * q * std::sqrt(p + q));
    d2ee[122] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C47018 * C124 - C21369 * C117) * C21370 +
            (C47018 * C138 - C21369 * C127) * C21366 +
            (C21484 - C21485) * C21371 + (C21486 - C21487) * C21367 +
            C21520 * C21372 + C21521 * C21368) *
               C47294 * C47091 * C47410 +
           ((C21485 - C21484) * C21370 + (C21487 - C21486) * C21366 +
            (C21489 - C21488) * C21371 + (C21491 - C21490) * C21367 +
            (C21492 - C21493) * C21372 + (C21494 - C21495) * C21368) *
               C47294 * C47091 * C47398 +
           (C21520 * C21370 + C21521 * C21366 + (C21493 - C21492) * C21371 +
            (C21495 - C21494) * C21367 +
            (C47018 * C1028 - C21369 * C1019) * C21372 +
            (C47018 * C1037 - C21369 * C1031) * C21368) *
               C47294 * C47091 * C47371) *
              C258 +
          (((C21369 * C118 - C47018 * C125) * C21370 +
            (C21369 * C128 - C47018 * C139) * C21366 +
            (C21496 - C21497) * C21371 + (C21498 - C21499) * C21367 +
            C21522 * C21372 + C21523 * C21368) *
               C47294 * C47091 * C47410 +
           ((C21497 - C21496) * C21370 + (C21499 - C21498) * C21366 +
            (C21501 - C21500) * C21371 + (C21503 - C21502) * C21367 +
            (C21504 - C21505) * C21372 + (C21506 - C21507) * C21368) *
               C47294 * C47091 * C47398 +
           (C21522 * C21370 + C21523 * C21366 + (C21505 - C21504) * C21371 +
            (C21507 - C21506) * C21367 +
            (C21369 * C1020 - C47018 * C1029) * C21372 +
            (C21369 * C1032 - C47018 * C1038) * C21368) *
               C47294 * C47091 * C47371) *
              C259 +
          (((C47018 * C126 - C21369 * C119) * C21370 +
            (C47018 * C140 - C21369 * C129) * C21366 +
            (C21508 - C21509) * C21371 + (C21510 - C21511) * C21367 +
            C21524 * C21372 + C21525 * C21368) *
               C47294 * C47091 * C47410 +
           ((C21509 - C21508) * C21370 + (C21511 - C21510) * C21366 +
            (C21513 - C21512) * C21371 + (C21515 - C21514) * C21367 +
            (C21516 - C21517) * C21372 + (C21518 - C21519) * C21368) *
               C47294 * C47091 * C47398 +
           (C21524 * C21370 + C21525 * C21366 + (C21517 - C21516) * C21371 +
            (C21519 - C21518) * C21367 +
            (C47018 * C1030 - C21369 * C1021) * C21372 +
            (C47018 * C1039 - C21369 * C1033) * C21368) *
               C47294 * C47091 * C47371) *
              C47365)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C47018 * C124 - C21369 * C117) * C21370 +
           (C47018 * C138 - C21369 * C127) * C21366 +
           (C47018 * C271 - C21369 * C261) * C21371 +
           (C47018 * C291 - C21369 * C274) * C21367 +
           (C47018 * C277 - C21369 * C264) * C21372 +
           (C47018 * C294 - C21369 * C280) * C21368) *
              C47294 * C47091 * C47073 * C108 +
          ((C21369 * C118 - C47018 * C125) * C21370 +
           (C21369 * C128 - C47018 * C139) * C21366 +
           (C21369 * C262 - C47018 * C272) * C21371 +
           (C21369 * C275 - C47018 * C292) * C21367 +
           (C21369 * C265 - C47018 * C278) * C21372 +
           (C21369 * C281 - C47018 * C295) * C21368) *
              C47294 * C47091 * C47073 * C109 +
          ((C47018 * C126 - C21369 * C119) * C21370 +
           (C47018 * C140 - C21369 * C129) * C21366 +
           (C47018 * C273 - C21369 * C263) * C21371 +
           (C47018 * C293 - C21369 * C276) * C21367 +
           (C47018 * C279 - C21369 * C266) * C21372 +
           (C47018 * C296 - C21369 * C282) * C21368) *
              C47294 * C47091 * C47073 * C110 +
          ((C21369 * C120 - C47018 * C130) * C21370 +
           (C21369 * C131 - C47018 * C141) * C21366 +
           (C21369 * C267 - C47018 * C283) * C21371 +
           (C21369 * C284 - C47018 * C297) * C21367 +
           (C21369 * C268 - C47018 * C285) * C21372 +
           (C21369 * C286 - C47018 * C298) * C21368) *
              C47294 * C47091 * C47073 * C111 +
          ((C47018 * C132 - C21369 * C121) * C21370 +
           (C47018 * C142 - C21369 * C133) * C21366 +
           (C47018 * C287 - C21369 * C269) * C21371 +
           (C47018 * C299 - C21369 * C288) * C21367 +
           (C47018 * C289 - C21369 * C270) * C21372 +
           (C47018 * C300 - C21369 * C290) * C21368) *
              C47294 * C47091 * C47073 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C47018 * C124 - C21369 * C117) * C21370 +
            (C47018 * C138 - C21369 * C127) * C21366 +
            (C21484 - C21485) * C21371 + (C21486 - C21487) * C21367 +
            C21520 * C21372 + C21521 * C21368) *
               C47294 * C47411 +
           ((C21369 * C414 - C47018 * C424) * C21370 +
            (C21369 * C427 - C47018 * C444) * C21366 +
            (C21369 * C812 - C47018 * C817) * C21371 +
            (C21369 * C820 - C47018 * C827) * C21367 +
            (C21369 * C1153 - C47018 * C1165) * C21372 +
            (C21369 * C1168 - C47018 * C1180) * C21368) *
               C47294 * C47400 +
           ((C47018 * C430 - C21369 * C417) * C21370 +
            (C47018 * C447 - C21369 * C433) * C21366 +
            (C47018 * C1159 - C21369 * C1150) * C21371 +
            (C47018 * C1177 - C21369 * C1162) * C21367 +
            (C47018 * C1171 - C21369 * C1156) * C21372 +
            (C47018 * C1183 - C21369 * C1174) * C21368) *
               C47294 * C47374) *
              C47073 * C258 +
          (((C21369 * C118 - C47018 * C125) * C21370 +
            (C21369 * C128 - C47018 * C139) * C21366 +
            (C21496 - C21497) * C21371 + (C21498 - C21499) * C21367 +
            C21522 * C21372 + C21523 * C21368) *
               C47294 * C47411 +
           ((C47018 * C425 - C21369 * C415) * C21370 +
            (C47018 * C445 - C21369 * C428) * C21366 +
            (C47018 * C818 - C21369 * C813) * C21371 +
            (C47018 * C828 - C21369 * C821) * C21367 +
            (C47018 * C1166 - C21369 * C1154) * C21372 +
            (C47018 * C1181 - C21369 * C1169) * C21368) *
               C47294 * C47400 +
           ((C21369 * C418 - C47018 * C431) * C21370 +
            (C21369 * C434 - C47018 * C448) * C21366 +
            (C21369 * C1151 - C47018 * C1160) * C21371 +
            (C21369 * C1163 - C47018 * C1178) * C21367 +
            (C21369 * C1157 - C47018 * C1172) * C21372 +
            (C21369 * C1175 - C47018 * C1184) * C21368) *
               C47294 * C47374) *
              C47073 * C259 +
          (((C47018 * C126 - C21369 * C119) * C21370 +
            (C47018 * C140 - C21369 * C129) * C21366 +
            (C21508 - C21509) * C21371 + (C21510 - C21511) * C21367 +
            C21524 * C21372 + C21525 * C21368) *
               C47294 * C47411 +
           ((C21369 * C416 - C47018 * C426) * C21370 +
            (C21369 * C429 - C47018 * C446) * C21366 +
            (C21369 * C814 - C47018 * C819) * C21371 +
            (C21369 * C822 - C47018 * C829) * C21367 +
            (C21369 * C1155 - C47018 * C1167) * C21372 +
            (C21369 * C1170 - C47018 * C1182) * C21368) *
               C47294 * C47400 +
           ((C47018 * C432 - C21369 * C419) * C21370 +
            (C47018 * C449 - C21369 * C435) * C21366 +
            (C47018 * C1161 - C21369 * C1152) * C21371 +
            (C47018 * C1179 - C21369 * C1164) * C21367 +
            (C47018 * C1173 - C21369 * C1158) * C21372 +
            (C47018 * C1185 - C21369 * C1176) * C21368) *
               C47294 * C47374) *
              C47073 * C47365)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C47018 * C124 - C21369 * C117) * C21370 +
            (C47018 * C138 - C21369 * C127) * C21366 +
            (C21484 - C21485) * C21371 + (C21486 - C21487) * C21367 +
            C21520 * C21372 + C21521 * C21368) *
               C47294 * C47091 * C942 +
           ((C21485 - C21484) * C21370 + (C21487 - C21486) * C21366 +
            (C21489 - C21488) * C21371 + (C21491 - C21490) * C21367 +
            (C21492 - C21493) * C21372 + (C21494 - C21495) * C21368) *
               C47294 * C47091 * C943 +
           (C21520 * C21370 + C21521 * C21366 + (C21493 - C21492) * C21371 +
            (C21495 - C21494) * C21367 +
            (C47018 * C1028 - C21369 * C1019) * C21372 +
            (C47018 * C1037 - C21369 * C1031) * C21368) *
               C47294 * C47091 * C47371) *
              C47407 +
          (((C21369 * C118 - C47018 * C125) * C21370 +
            (C21369 * C128 - C47018 * C139) * C21366 +
            (C21496 - C21497) * C21371 + (C21498 - C21499) * C21367 +
            C21522 * C21372 + C21523 * C21368) *
               C47294 * C47091 * C942 +
           ((C21497 - C21496) * C21370 + (C21499 - C21498) * C21366 +
            (C21501 - C21500) * C21371 + (C21503 - C21502) * C21367 +
            (C21504 - C21505) * C21372 + (C21506 - C21507) * C21368) *
               C47294 * C47091 * C943 +
           (C21522 * C21370 + C21523 * C21366 + (C21505 - C21504) * C21371 +
            (C21507 - C21506) * C21367 +
            (C21369 * C1020 - C47018 * C1029) * C21372 +
            (C21369 * C1032 - C47018 * C1038) * C21368) *
               C47294 * C47091 * C47371) *
              C47394 +
          (((C47018 * C126 - C21369 * C119) * C21370 +
            (C47018 * C140 - C21369 * C129) * C21366 +
            (C21508 - C21509) * C21371 + (C21510 - C21511) * C21367 +
            C21524 * C21372 + C21525 * C21368) *
               C47294 * C47091 * C942 +
           ((C21509 - C21508) * C21370 + (C21511 - C21510) * C21366 +
            (C21513 - C21512) * C21371 + (C21515 - C21514) * C21367 +
            (C21516 - C21517) * C21372 + (C21518 - C21519) * C21368) *
               C47294 * C47091 * C943 +
           (C21524 * C21370 + C21525 * C21366 + (C21517 - C21516) * C21371 +
            (C21519 - C21518) * C21367 +
            (C47018 * C1030 - C21369 * C1021) * C21372 +
            (C47018 * C1039 - C21369 * C1033) * C21368) *
               C47294 * C47091 * C47371) *
              C47365)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C47018 * C124 - C21369 * C117) * C21370 +
           (C47018 * C138 - C21369 * C127) * C21366 +
           (C21484 - C21485) * C21371 + (C21486 - C21487) * C21367 +
           C21520 * C21372 + C21521 * C21368) *
              C47294 * C47091 * C1010 +
          ((C21485 - C21484) * C21370 + (C21487 - C21486) * C21366 +
           (C21489 - C21488) * C21371 + (C21491 - C21490) * C21367 +
           C22186 * C21372 + C22187 * C21368) *
              C47294 * C47091 * C1011 +
          (C21520 * C21370 + C21521 * C21366 + (C21493 - C21492) * C21371 +
           (C21495 - C21494) * C21367 + C22196 * C21372 + C22197 * C21368) *
              C47294 * C47091 * C1012 +
          (C22186 * C21370 + C22187 * C21366 + (C22189 - C22188) * C21371 +
           (C22191 - C22190) * C21367 + (C22192 - C22193) * C21372 +
           (C22194 - C22195) * C21368) *
              C47294 * C47091 * C1013 +
          (C22196 * C21370 + C22197 * C21366 + (C22193 - C22192) * C21371 +
           (C22195 - C22194) * C21367 +
           (C47018 * C22182 - C21369 * C22181) * C21372 +
           (C47018 * C22184 - C21369 * C22183) * C21368) *
              C47294 * C47091 * C1014) *
         C47045) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C47018 * C124 - C21369 * C117) * C21370 +
            (C47018 * C138 - C21369 * C127) * C21366 +
            (C21484 - C21485) * C21371 + (C21486 - C21487) * C21367 +
            C21520 * C21372 + C21521 * C21368) *
               C47294 * C47411 +
           ((C21369 * C414 - C47018 * C424) * C21370 +
            (C21369 * C427 - C47018 * C444) * C21366 +
            (C21986 - C21987) * C21371 + (C21988 - C21989) * C21367 +
            C22312 * C21372 + C22313 * C21368) *
               C47294 * C47400 +
           ((C47018 * C430 - C21369 * C417) * C21370 +
            (C47018 * C447 - C21369 * C433) * C21366 +
            (C22314 - C22315) * C21371 + (C22316 - C22317) * C21367 +
            C22330 * C21372 + C22331 * C21368) *
               C47294 * C47374) *
              C942 +
          (((C21485 - C21484) * C21370 + (C21487 - C21486) * C21366 +
            (C21489 - C21488) * C21371 + (C21491 - C21490) * C21367 +
            C22186 * C21372 + C22187 * C21368) *
               C47294 * C47411 +
           ((C21987 - C21986) * C21370 + (C21989 - C21988) * C21366 +
            (C21991 - C21990) * C21371 + (C21993 - C21992) * C21367 +
            (C22322 - C22323) * C21372 + (C22324 - C22325) * C21368) *
               C47294 * C47400 +
           ((C22315 - C22314) * C21370 + (C22317 - C22316) * C21366 +
            (C22319 - C22318) * C21371 + (C22321 - C22320) * C21367 +
            (C22326 - C22327) * C21372 + (C22328 - C22329) * C21368) *
               C47294 * C47374) *
              C943 +
          ((C21520 * C21370 + C21521 * C21366 + (C21493 - C21492) * C21371 +
            (C21495 - C21494) * C21367 + C22196 * C21372 + C22197 * C21368) *
               C47294 * C47411 +
           (C22312 * C21370 + C22313 * C21366 + (C22323 - C22322) * C21371 +
            (C22325 - C22324) * C21367 +
            (C21369 * C6309 - C47018 * C6311) * C21372 +
            (C21369 * C6313 - C47018 * C6315) * C21368) *
               C47294 * C47400 +
           (C22330 * C21370 + C22331 * C21366 + (C22327 - C22326) * C21371 +
            (C22329 - C22328) * C21367 +
            (C47018 * C22308 - C21369 * C22307) * C21372 +
            (C47018 * C22310 - C21369 * C22309) * C21368) *
               C47294 * C47374) *
              C47371) *
         C47045) /
            (p * q * std::sqrt(p + q));
    d2ee[123] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C47018 * C124 - C21369 * C117) * C21370 +
            (C47018 * C138 - C21369 * C127) * C21366 +
            (C21484 - C21485) * C21371 + (C21486 - C21487) * C21367 +
            C21520 * C21372 + C21521 * C21368) *
               C47294 * C47340 +
           ((C21369 * C414 - C47018 * C424) * C21370 +
            (C21369 * C427 - C47018 * C444) * C21366 +
            (C21369 * C812 - C47018 * C817) * C21371 +
            (C21369 * C820 - C47018 * C827) * C21367 +
            (C21369 * C1153 - C47018 * C1165) * C21372 +
            (C21369 * C1168 - C47018 * C1180) * C21368) *
               C47294 * C47178) *
              C47073 * C554 +
          (((C21369 * C118 - C47018 * C125) * C21370 +
            (C21369 * C128 - C47018 * C139) * C21366 +
            (C21496 - C21497) * C21371 + (C21498 - C21499) * C21367 +
            C21522 * C21372 + C21523 * C21368) *
               C47294 * C47340 +
           ((C47018 * C425 - C21369 * C415) * C21370 +
            (C47018 * C445 - C21369 * C428) * C21366 +
            (C47018 * C818 - C21369 * C813) * C21371 +
            (C47018 * C828 - C21369 * C821) * C21367 +
            (C47018 * C1166 - C21369 * C1154) * C21372 +
            (C47018 * C1181 - C21369 * C1169) * C21368) *
               C47294 * C47178) *
              C47073 * C555 +
          (((C47018 * C126 - C21369 * C119) * C21370 +
            (C47018 * C140 - C21369 * C129) * C21366 +
            (C21508 - C21509) * C21371 + (C21510 - C21511) * C21367 +
            C21524 * C21372 + C21525 * C21368) *
               C47294 * C47340 +
           ((C21369 * C416 - C47018 * C426) * C21370 +
            (C21369 * C429 - C47018 * C446) * C21366 +
            (C21369 * C814 - C47018 * C819) * C21371 +
            (C21369 * C822 - C47018 * C829) * C21367 +
            (C21369 * C1155 - C47018 * C1167) * C21372 +
            (C21369 * C1170 - C47018 * C1182) * C21368) *
               C47294 * C47178) *
              C47073 * C556 +
          (((C21369 * C120 - C47018 * C130) * C21370 +
            (C21369 * C131 - C47018 * C141) * C21366 +
            (C21734 - C21735) * C21371 + (C21736 - C21737) * C21367 +
            (C21738 - C21739) * C21372 + (C21740 - C21741) * C21368) *
               C47294 * C47340 +
           ((C47018 * C436 - C21369 * C420) * C21370 +
            (C47018 * C450 - C21369 * C437) * C21366 +
            (C47018 * C823 - C21369 * C815) * C21371 +
            (C47018 * C830 - C21369 * C824) * C21367 +
            (C47018 * C1441 - C21369 * C1440) * C21372 +
            (C47018 * C1443 - C21369 * C1442) * C21368) *
               C47294 * C47178) *
              C47073 * C47375)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C47018 * C124 - C21369 * C117) * C21370 +
             (C47018 * C138 - C21369 * C127) * C21366 +
             (C21484 - C21485) * C21371 + (C21486 - C21487) * C21367 +
             C21520 * C21372 + C21521 * C21368) *
                C47294 * C47340 +
            ((C21369 * C414 - C47018 * C424) * C21370 +
             (C21369 * C427 - C47018 * C444) * C21366 +
             (C21986 - C21987) * C21371 + (C21988 - C21989) * C21367 +
             C22312 * C21372 + C22313 * C21368) *
                C47294 * C47178) *
               C942 +
           (((C21485 - C21484) * C21370 + (C21487 - C21486) * C21366 +
             (C21489 - C21488) * C21371 + (C21491 - C21490) * C21367 +
             C22186 * C21372 + C22187 * C21368) *
                C47294 * C47340 +
            ((C21987 - C21986) * C21370 + (C21989 - C21988) * C21366 +
             (C21991 - C21990) * C21371 + (C21993 - C21992) * C21367 +
             (C22322 - C22323) * C21372 + (C22324 - C22325) * C21368) *
                C47294 * C47178) *
               C943 +
           ((C21520 * C21370 + C21521 * C21366 + (C21493 - C21492) * C21371 +
             (C21495 - C21494) * C21367 + C22196 * C21372 + C22197 * C21368) *
                C47294 * C47340 +
            (C22312 * C21370 + C22313 * C21366 + (C22323 - C22322) * C21371 +
             (C22325 - C22324) * C21367 +
             (C21369 * C6309 - C47018 * C6311) * C21372 +
             (C21369 * C6313 - C47018 * C6315) * C21368) *
                C47294 * C47178) *
               C47371) *
              C47325 +
          ((((C21369 * C118 - C47018 * C125) * C21370 +
             (C21369 * C128 - C47018 * C139) * C21366 +
             (C21496 - C21497) * C21371 + (C21498 - C21499) * C21367 +
             C21522 * C21372 + C21523 * C21368) *
                C47294 * C47340 +
            ((C47018 * C425 - C21369 * C415) * C21370 +
             (C47018 * C445 - C21369 * C428) * C21366 +
             (C21994 - C21995) * C21371 + (C21996 - C21997) * C21367 +
             C22582 * C21372 + C22583 * C21368) *
                C47294 * C47178) *
               C942 +
           (((C21497 - C21496) * C21370 + (C21499 - C21498) * C21366 +
             (C21501 - C21500) * C21371 + (C21503 - C21502) * C21367 +
             C22430 * C21372 + C22431 * C21368) *
                C47294 * C47340 +
            ((C21995 - C21994) * C21370 + (C21997 - C21996) * C21366 +
             (C21999 - C21998) * C21371 + (C22001 - C22000) * C21367 +
             (C22584 - C22585) * C21372 + (C22586 - C22587) * C21368) *
                C47294 * C47178) *
               C943 +
           ((C21522 * C21370 + C21523 * C21366 + (C21505 - C21504) * C21371 +
             (C21507 - C21506) * C21367 + (C22432 - C22433) * C21372 +
             (C22434 - C22435) * C21368) *
                C47294 * C47340 +
            (C22582 * C21370 + C22583 * C21366 + (C22585 - C22584) * C21371 +
             (C22587 - C22586) * C21367 +
             (C47018 * C6312 - C21369 * C6310) * C21372 +
             (C47018 * C6316 - C21369 * C6314) * C21368) *
                C47294 * C47178) *
               C47371) *
              C47056)) /
            (p * q * std::sqrt(p + q));
    d2ee[124] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C47018 * C124 - C21369 * C117) * C21370 +
           (C47018 * C138 - C21369 * C127) * C21366 +
           (C47018 * C271 - C21369 * C261) * C21371 +
           (C47018 * C291 - C21369 * C274) * C21367 +
           (C47018 * C277 - C21369 * C264) * C21372 +
           (C47018 * C294 - C21369 * C280) * C21368) *
              C47294 * C47091 * C47073 * C108 +
          ((C21369 * C118 - C47018 * C125) * C21370 +
           (C21369 * C128 - C47018 * C139) * C21366 +
           (C21369 * C262 - C47018 * C272) * C21371 +
           (C21369 * C275 - C47018 * C292) * C21367 +
           (C21369 * C265 - C47018 * C278) * C21372 +
           (C21369 * C281 - C47018 * C295) * C21368) *
              C47294 * C47091 * C47073 * C109 +
          ((C47018 * C126 - C21369 * C119) * C21370 +
           (C47018 * C140 - C21369 * C129) * C21366 +
           (C47018 * C273 - C21369 * C263) * C21371 +
           (C47018 * C293 - C21369 * C276) * C21367 +
           (C47018 * C279 - C21369 * C266) * C21372 +
           (C47018 * C296 - C21369 * C282) * C21368) *
              C47294 * C47091 * C47073 * C110 +
          ((C21369 * C120 - C47018 * C130) * C21370 +
           (C21369 * C131 - C47018 * C141) * C21366 +
           (C21369 * C267 - C47018 * C283) * C21371 +
           (C21369 * C284 - C47018 * C297) * C21367 +
           (C21369 * C268 - C47018 * C285) * C21372 +
           (C21369 * C286 - C47018 * C298) * C21368) *
              C47294 * C47091 * C47073 * C111 +
          ((C47018 * C132 - C21369 * C121) * C21370 +
           (C47018 * C142 - C21369 * C133) * C21366 +
           (C47018 * C287 - C21369 * C269) * C21371 +
           (C47018 * C299 - C21369 * C288) * C21367 +
           (C47018 * C289 - C21369 * C270) * C21372 +
           (C47018 * C300 - C21369 * C290) * C21368) *
              C47294 * C47091 * C47073 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C47018 * C124 - C21369 * C117) * C21370 +
            (C47018 * C138 - C21369 * C127) * C21366 +
            (C21484 - C21485) * C21371 + (C21486 - C21487) * C21367 +
            C21520 * C21372 + C21521 * C21368) *
               C47294 * C47091 * C47410 +
           ((C21485 - C21484) * C21370 + (C21487 - C21486) * C21366 +
            (C21489 - C21488) * C21371 + (C21491 - C21490) * C21367 +
            (C21492 - C21493) * C21372 + (C21494 - C21495) * C21368) *
               C47294 * C47091 * C47398 +
           (C21520 * C21370 + C21521 * C21366 + (C21493 - C21492) * C21371 +
            (C21495 - C21494) * C21367 +
            (C47018 * C1028 - C21369 * C1019) * C21372 +
            (C47018 * C1037 - C21369 * C1031) * C21368) *
               C47294 * C47091 * C47371) *
              C258 +
          (((C21369 * C118 - C47018 * C125) * C21370 +
            (C21369 * C128 - C47018 * C139) * C21366 +
            (C21496 - C21497) * C21371 + (C21498 - C21499) * C21367 +
            C21522 * C21372 + C21523 * C21368) *
               C47294 * C47091 * C47410 +
           ((C21497 - C21496) * C21370 + (C21499 - C21498) * C21366 +
            (C21501 - C21500) * C21371 + (C21503 - C21502) * C21367 +
            (C21504 - C21505) * C21372 + (C21506 - C21507) * C21368) *
               C47294 * C47091 * C47398 +
           (C21522 * C21370 + C21523 * C21366 + (C21505 - C21504) * C21371 +
            (C21507 - C21506) * C21367 +
            (C21369 * C1020 - C47018 * C1029) * C21372 +
            (C21369 * C1032 - C47018 * C1038) * C21368) *
               C47294 * C47091 * C47371) *
              C259 +
          (((C47018 * C126 - C21369 * C119) * C21370 +
            (C47018 * C140 - C21369 * C129) * C21366 +
            (C21508 - C21509) * C21371 + (C21510 - C21511) * C21367 +
            C21524 * C21372 + C21525 * C21368) *
               C47294 * C47091 * C47410 +
           ((C21509 - C21508) * C21370 + (C21511 - C21510) * C21366 +
            (C21513 - C21512) * C21371 + (C21515 - C21514) * C21367 +
            (C21516 - C21517) * C21372 + (C21518 - C21519) * C21368) *
               C47294 * C47091 * C47398 +
           (C21524 * C21370 + C21525 * C21366 + (C21517 - C21516) * C21371 +
            (C21519 - C21518) * C21367 +
            (C47018 * C1030 - C21369 * C1021) * C21372 +
            (C47018 * C1039 - C21369 * C1033) * C21368) *
               C47294 * C47091 * C47371) *
              C47365)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C47018 * C124 - C21369 * C117) * C21370 +
            (C47018 * C138 - C21369 * C127) * C21366 +
            (C21484 - C21485) * C21371 + (C21486 - C21487) * C21367 +
            C21520 * C21372 + C21521 * C21368) *
               C47294 * C47091 * C942 +
           ((C21485 - C21484) * C21370 + (C21487 - C21486) * C21366 +
            (C21489 - C21488) * C21371 + (C21491 - C21490) * C21367 +
            (C21492 - C21493) * C21372 + (C21494 - C21495) * C21368) *
               C47294 * C47091 * C943 +
           (C21520 * C21370 + C21521 * C21366 + (C21493 - C21492) * C21371 +
            (C21495 - C21494) * C21367 +
            (C47018 * C1028 - C21369 * C1019) * C21372 +
            (C47018 * C1037 - C21369 * C1031) * C21368) *
               C47294 * C47091 * C47371) *
              C47407 +
          (((C21369 * C118 - C47018 * C125) * C21370 +
            (C21369 * C128 - C47018 * C139) * C21366 +
            (C21496 - C21497) * C21371 + (C21498 - C21499) * C21367 +
            C21522 * C21372 + C21523 * C21368) *
               C47294 * C47091 * C942 +
           ((C21497 - C21496) * C21370 + (C21499 - C21498) * C21366 +
            (C21501 - C21500) * C21371 + (C21503 - C21502) * C21367 +
            (C21504 - C21505) * C21372 + (C21506 - C21507) * C21368) *
               C47294 * C47091 * C943 +
           (C21522 * C21370 + C21523 * C21366 + (C21505 - C21504) * C21371 +
            (C21507 - C21506) * C21367 +
            (C21369 * C1020 - C47018 * C1029) * C21372 +
            (C21369 * C1032 - C47018 * C1038) * C21368) *
               C47294 * C47091 * C47371) *
              C47394 +
          (((C47018 * C126 - C21369 * C119) * C21370 +
            (C47018 * C140 - C21369 * C129) * C21366 +
            (C21508 - C21509) * C21371 + (C21510 - C21511) * C21367 +
            C21524 * C21372 + C21525 * C21368) *
               C47294 * C47091 * C942 +
           ((C21509 - C21508) * C21370 + (C21511 - C21510) * C21366 +
            (C21513 - C21512) * C21371 + (C21515 - C21514) * C21367 +
            (C21516 - C21517) * C21372 + (C21518 - C21519) * C21368) *
               C47294 * C47091 * C943 +
           (C21524 * C21370 + C21525 * C21366 + (C21517 - C21516) * C21371 +
            (C21519 - C21518) * C21367 +
            (C47018 * C1030 - C21369 * C1021) * C21372 +
            (C47018 * C1039 - C21369 * C1033) * C21368) *
               C47294 * C47091 * C47371) *
              C47365)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C47018 * C124 - C21369 * C117) * C21370 +
           (C47018 * C138 - C21369 * C127) * C21366 +
           (C21484 - C21485) * C21371 + (C21486 - C21487) * C21367 +
           C21520 * C21372 + C21521 * C21368) *
              C47294 * C47091 * C1010 +
          ((C21485 - C21484) * C21370 + (C21487 - C21486) * C21366 +
           (C21489 - C21488) * C21371 + (C21491 - C21490) * C21367 +
           C22186 * C21372 + C22187 * C21368) *
              C47294 * C47091 * C1011 +
          (C21520 * C21370 + C21521 * C21366 + (C21493 - C21492) * C21371 +
           (C21495 - C21494) * C21367 + C22196 * C21372 + C22197 * C21368) *
              C47294 * C47091 * C1012 +
          (C22186 * C21370 + C22187 * C21366 + (C22189 - C22188) * C21371 +
           (C22191 - C22190) * C21367 + (C22192 - C22193) * C21372 +
           (C22194 - C22195) * C21368) *
              C47294 * C47091 * C1013 +
          (C22196 * C21370 + C22197 * C21366 + (C22193 - C22192) * C21371 +
           (C22195 - C22194) * C21367 +
           (C47018 * C22182 - C21369 * C22181) * C21372 +
           (C47018 * C22184 - C21369 * C22183) * C21368) *
              C47294 * C47091 * C1014) *
         C47045) /
            (p * q * std::sqrt(p + q));
    d2ee[125] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((((C47018 * C124 - C21369 * C117) * C15775 +
                      (C47018 * C138 - C21369 * C127) * C15771 +
                      (C21484 - C21485) * C15776 + (C21486 - C21487) * C47389) *
                         C10231 +
                     ((C25950 - C25951) * C15775 + (C25952 - C25953) * C15771 +
                      C26440 * C15776 + C26441 * C47389) *
                         C47391) *
                        C47091 * C47132 +
                    (((C21485 - C21484) * C15775 + (C21487 - C21486) * C15771 +
                      (C21489 - C21488) * C15776 + (C21491 - C21490) * C47389) *
                         C10231 +
                     (C26442 * C15775 + C26443 * C15771 + C22312 * C15776 +
                      C22313 * C47389) *
                         C47391) *
                        C47091 * C47139 +
                    ((C21520 * C15775 + C21521 * C15771 +
                      (C21493 - C21492) * C15776 + (C21495 - C21494) * C47389) *
                         C10231 +
                     (C26830 * C15775 + C26831 * C15771 + C22690 * C15776 +
                      C22691 * C47389) *
                         C47391) *
                        C47091 * C2700) *
                       C47050 +
                   ((((C21369 * C118 - C47018 * C125) * C15775 +
                      (C21369 * C128 - C47018 * C139) * C15771 +
                      (C21496 - C21497) * C15776 + (C21498 - C21499) * C47389) *
                         C10231 +
                     ((C25958 - C25959) * C15775 + (C25960 - C25961) * C15771 +
                      C26444 * C15776 + C26445 * C47389) *
                         C47391) *
                        C47091 * C47132 +
                    (((C21497 - C21496) * C15775 + (C21499 - C21498) * C15771 +
                      (C21501 - C21500) * C15776 + (C21503 - C21502) * C47389) *
                         C10231 +
                     (C26446 * C15775 + C26447 * C15771 + C22582 * C15776 +
                      C22583 * C47389) *
                         C47391) *
                        C47091 * C47139 +
                    ((C21522 * C15775 + C21523 * C15771 +
                      (C21505 - C21504) * C15776 + (C21507 - C21506) * C47389) *
                         C10231 +
                     (C27158 * C15775 + C27159 * C15771 +
                      (C22584 - C22585) * C15776 + (C22586 - C22587) * C47389) *
                         C47391) *
                        C47091 * C2700) *
                       C47059 +
                   ((((C47018 * C126 - C21369 * C119) * C15775 +
                      (C47018 * C140 - C21369 * C129) * C15771 +
                      (C21508 - C21509) * C15776 + (C21510 - C21511) * C47389) *
                         C10231 +
                     ((C25966 - C25967) * C15775 + (C25968 - C25969) * C15771 +
                      C26448 * C15776 + C26449 * C47389) *
                         C47391) *
                        C47091 * C47132 +
                    (((C21509 - C21508) * C15775 + (C21511 - C21510) * C15771 +
                      (C21513 - C21512) * C15776 + (C21515 - C21514) * C47389) *
                         C10231 +
                     (C26450 * C15775 + C26451 * C15771 +
                      (C22006 - C22007) * C15776 + (C22008 - C22009) * C47389) *
                         C47391) *
                        C47091 * C47139 +
                    ((C21524 * C15775 + C21525 * C15771 +
                      (C21517 - C21516) * C15776 + (C21519 - C21518) * C47389) *
                         C10231 +
                     ((C22007 - C22006) * C15775 + (C22009 - C22008) * C15771 +
                      (C47018 * C1547 - C21369 * C1544) * C15776 +
                      (C47018 * C1553 - C21369 * C1550) * C47389) *
                         C47391) *
                        C47091 * C2700) *
                       C2703)) /
                 (p * q * std::sqrt(p + q));
    d2ee[126] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C47018 * C124 - C21369 * C117) * C15775 +
              (C47018 * C138 - C21369 * C127) * C15771 +
              (C21484 - C21485) * C15776 + (C21486 - C21487) * C47389) *
                 C10231 +
             ((C25950 - C25951) * C15775 + (C25952 - C25953) * C15771 +
              C26440 * C15776 + C26441 * C47389) *
                 C47391) *
                C47340 +
            (((C25951 - C25950) * C15775 + (C25953 - C25952) * C15771 +
              C26442 * C15776 + C26443 * C47389) *
                 C10231 +
             ((C25954 - C25955) * C15775 + (C25956 - C25957) * C15771 +
              C26826 * C15776 + C26827 * C47389) *
                 C47391) *
                C47178) *
               C47132 +
           ((((C21485 - C21484) * C15775 + (C21487 - C21486) * C15771 +
              (C21489 - C21488) * C15776 + (C21491 - C21490) * C47389) *
                 C10231 +
             (C26442 * C15775 + C26443 * C15771 + C22312 * C15776 +
              C22313 * C47389) *
                 C47391) *
                C47340 +
            ((C26440 * C15775 + C26441 * C15771 + C26830 * C15776 +
              C26831 * C47389) *
                 C10231 +
             (C26828 * C15775 + C26829 * C15771 + C22330 * C15776 +
              C22331 * C47389) *
                 C47391) *
                C47178) *
               C47139 +
           (((C21520 * C15775 + C21521 * C15771 + (C21493 - C21492) * C15776 +
              (C21495 - C21494) * C47389) *
                 C10231 +
             (C26830 * C15775 + C26831 * C15771 + C22690 * C15776 +
              C22691 * C47389) *
                 C47391) *
                C47340 +
            ((C22312 * C15775 + C22313 * C15771 + C27290 * C15776 +
              C27291 * C47389) *
                 C10231 +
             (C26832 * C15775 + C26833 * C15771 + (C22326 - C22327) * C15776 +
              (C22328 - C22329) * C47389) *
                 C47391) *
                C47178) *
               C2700) *
              C2440 +
          (((((C21369 * C118 - C47018 * C125) * C15775 +
              (C21369 * C128 - C47018 * C139) * C15771 +
              (C21496 - C21497) * C15776 + (C21498 - C21499) * C47389) *
                 C10231 +
             ((C25958 - C25959) * C15775 + (C25960 - C25961) * C15771 +
              C26444 * C15776 + C26445 * C47389) *
                 C47391) *
                C47340 +
            (((C25959 - C25958) * C15775 + (C25961 - C25960) * C15771 +
              C26446 * C15776 + C26447 * C47389) *
                 C10231 +
             ((C25962 - C25963) * C15775 + (C25964 - C25965) * C15771 +
              C27876 * C15776 + C27877 * C47389) *
                 C47391) *
                C47178) *
               C47132 +
           ((((C21497 - C21496) * C15775 + (C21499 - C21498) * C15771 +
              (C21501 - C21500) * C15776 + (C21503 - C21502) * C47389) *
                 C10231 +
             (C26446 * C15775 + C26447 * C15771 + C22582 * C15776 +
              C22583 * C47389) *
                 C47391) *
                C47340 +
            ((C26444 * C15775 + C26445 * C15771 + C27158 * C15776 +
              C27159 * C47389) *
                 C10231 +
             (C27878 * C15775 + C27879 * C15771 + (C23132 - C23133) * C15776 +
              (C23134 - C23135) * C47389) *
                 C47391) *
                C47178) *
               C47139 +
           (((C21522 * C15775 + C21523 * C15771 + (C21505 - C21504) * C15776 +
              (C21507 - C21506) * C47389) *
                 C10231 +
             (C27158 * C15775 + C27159 * C15771 + (C22584 - C22585) * C15776 +
              (C22586 - C22587) * C47389) *
                 C47391) *
                C47340 +
            ((C22582 * C15775 + C22583 * C15771 + (C22585 - C22584) * C15776 +
              (C22587 - C22586) * C47389) *
                 C10231 +
             ((C23133 - C23132) * C15775 + (C23135 - C23134) * C15771 +
              (C47018 * C5810 - C21369 * C5808) * C15776 +
              (C47018 * C5814 - C21369 * C5812) * C47389) *
                 C47391) *
                C47178) *
               C2700) *
              C47056)) /
        (p * q * std::sqrt(p + q));
    d2ee[127] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C47018 * C124 - C21369 * C117) * C15775 +
             (C47018 * C138 - C21369 * C127) * C15771 +
             (C21484 - C21485) * C15776 + (C21486 - C21487) * C47389) *
                C10231 +
            ((C25950 - C25951) * C15775 + (C25952 - C25953) * C15771 +
             C26440 * C15776 + C26441 * C47389) *
                C47391) *
               C47091 * C47417 +
           (((C21485 - C21484) * C15775 + (C21487 - C21486) * C15771 +
             (C21489 - C21488) * C15776 + (C21491 - C21490) * C47389) *
                C10231 +
            (C26442 * C15775 + C26443 * C15771 + C22312 * C15776 +
             C22313 * C47389) *
                C47391) *
               C47091 * C47413 +
           ((C21520 * C15775 + C21521 * C15771 + (C21493 - C21492) * C15776 +
             (C21495 - C21494) * C47389) *
                C10231 +
            (C26830 * C15775 + C26831 * C15771 + C22690 * C15776 +
             C22691 * C47389) *
                C47391) *
               C47091 * C47403 +
           ((C22186 * C15775 + C22187 * C15771 + (C22189 - C22188) * C15776 +
             (C22191 - C22190) * C47389) *
                C10231 +
            (C27290 * C15775 + C27291 * C15771 + (C22692 - C22693) * C15776 +
             (C22694 - C22695) * C47389) *
                C47391) *
               C47091 * C47381) *
              C2440 +
          ((((C21369 * C118 - C47018 * C125) * C15775 +
             (C21369 * C128 - C47018 * C139) * C15771 +
             (C21496 - C21497) * C15776 + (C21498 - C21499) * C47389) *
                C10231 +
            ((C25958 - C25959) * C15775 + (C25960 - C25961) * C15771 +
             C26444 * C15776 + C26445 * C47389) *
                C47391) *
               C47091 * C47417 +
           (((C21497 - C21496) * C15775 + (C21499 - C21498) * C15771 +
             (C21501 - C21500) * C15776 + (C21503 - C21502) * C47389) *
                C10231 +
            (C26446 * C15775 + C26447 * C15771 + C22582 * C15776 +
             C22583 * C47389) *
                C47391) *
               C47091 * C47413 +
           ((C21522 * C15775 + C21523 * C15771 + (C21505 - C21504) * C15776 +
             (C21507 - C21506) * C47389) *
                C10231 +
            (C27158 * C15775 + C27159 * C15771 + (C22584 - C22585) * C15776 +
             (C22586 - C22587) * C47389) *
                C47391) *
               C47091 * C47403 +
           ((C22430 * C15775 + C22431 * C15771 + (C22433 - C22432) * C15776 +
             (C22435 - C22434) * C47389) *
                C10231 +
            ((C22585 - C22584) * C15775 + (C22587 - C22586) * C15771 +
             (C47018 * C6312 - C21369 * C6310) * C15776 +
             (C47018 * C6316 - C21369 * C6314) * C47389) *
                C47391) *
               C47091 * C47381) *
              C47056)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C47018 * C124 - C21369 * C117) * C15775 +
             (C47018 * C138 - C21369 * C127) * C15771 +
             (C21484 - C21485) * C15776 + (C21486 - C21487) * C47389) *
                C10231 +
            ((C25950 - C25951) * C15775 + (C25952 - C25953) * C15771 +
             C26440 * C15776 + C26441 * C47389) *
                C47391) *
               C47091 * C2332 +
           (((C21485 - C21484) * C15775 + (C21487 - C21486) * C15771 +
             (C21489 - C21488) * C15776 + (C21491 - C21490) * C47389) *
                C10231 +
            (C26442 * C15775 + C26443 * C15771 + C22312 * C15776 +
             C22313 * C47389) *
                C47391) *
               C47091 * C47136) *
              C47416 +
          ((((C21369 * C118 - C47018 * C125) * C15775 +
             (C21369 * C128 - C47018 * C139) * C15771 +
             (C21496 - C21497) * C15776 + (C21498 - C21499) * C47389) *
                C10231 +
            ((C25958 - C25959) * C15775 + (C25960 - C25961) * C15771 +
             C26444 * C15776 + C26445 * C47389) *
                C47391) *
               C47091 * C2332 +
           (((C21497 - C21496) * C15775 + (C21499 - C21498) * C15771 +
             (C21501 - C21500) * C15776 + (C21503 - C21502) * C47389) *
                C10231 +
            (C26446 * C15775 + C26447 * C15771 + C22582 * C15776 +
             C22583 * C47389) *
                C47391) *
               C47091 * C47136) *
              C47409 +
          ((((C47018 * C126 - C21369 * C119) * C15775 +
             (C47018 * C140 - C21369 * C129) * C15771 +
             (C21508 - C21509) * C15776 + (C21510 - C21511) * C47389) *
                C10231 +
            ((C25966 - C25967) * C15775 + (C25968 - C25969) * C15771 +
             C26448 * C15776 + C26449 * C47389) *
                C47391) *
               C47091 * C2332 +
           (((C21509 - C21508) * C15775 + (C21511 - C21510) * C15771 +
             (C21513 - C21512) * C15776 + (C21515 - C21514) * C47389) *
                C10231 +
            (C26450 * C15775 + C26451 * C15771 + (C22006 - C22007) * C15776 +
             (C22008 - C22009) * C47389) *
                C47391) *
               C47091 * C47136) *
              C47396 +
          ((((C21369 * C120 - C47018 * C130) * C15775 +
             (C21369 * C131 - C47018 * C141) * C15771 +
             (C21734 - C21735) * C15776 + (C21736 - C21737) * C47389) *
                C10231 +
            ((C26242 - C26243) * C15775 + (C26244 - C26245) * C15771 +
             (C26108 - C26109) * C15776 + (C26110 - C26111) * C47389) *
                C47391) *
               C47091 * C2332 +
           (((C21735 - C21734) * C15775 + (C21737 - C21736) * C15771 +
             (C21739 - C21738) * C15776 + (C21741 - C21740) * C47389) *
                C10231 +
            ((C26109 - C26108) * C15775 + (C26111 - C26110) * C15771 +
             (C47018 * C1441 - C21369 * C1440) * C15776 +
             (C47018 * C1443 - C21369 * C1442) * C47389) *
                C47391) *
               C47091 * C47136) *
              C47375)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C47018 * C124 - C21369 * C117) * C15775 +
              (C47018 * C138 - C21369 * C127) * C15771 +
              (C21484 - C21485) * C15776 + (C21486 - C21487) * C47389) *
                 C10231 +
             ((C25950 - C25951) * C15775 + (C25952 - C25953) * C15771 +
              C26440 * C15776 + C26441 * C47389) *
                 C47391) *
                C47411 +
            (((C25951 - C25950) * C15775 + (C25953 - C25952) * C15771 +
              C26442 * C15776 + C26443 * C47389) *
                 C10231 +
             ((C25954 - C25955) * C15775 + (C25956 - C25957) * C15771 +
              C26826 * C15776 + C26827 * C47389) *
                 C47391) *
                C47400 +
            (((C25955 - C25954) * C15775 + (C25957 - C25956) * C15771 +
              C26828 * C15776 + C26829 * C47389) *
                 C10231 +
             ((C27670 - C27671) * C15775 + (C27672 - C27673) * C15771 +
              C28148 * C15776 + C28149 * C47389) *
                 C47391) *
                C47374) *
               C2332 +
           ((((C21485 - C21484) * C15775 + (C21487 - C21486) * C15771 +
              (C21489 - C21488) * C15776 + (C21491 - C21490) * C47389) *
                 C10231 +
             (C26442 * C15775 + C26443 * C15771 + C22312 * C15776 +
              C22313 * C47389) *
                 C47391) *
                C47411 +
            ((C26440 * C15775 + C26441 * C15771 + C26830 * C15776 +
              C26831 * C47389) *
                 C10231 +
             (C26828 * C15775 + C26829 * C15771 + C22330 * C15776 +
              C22331 * C47389) *
                 C47391) *
                C47400 +
            ((C26826 * C15775 + C26827 * C15771 + C26832 * C15776 +
              C26833 * C47389) *
                 C10231 +
             (C28150 * C15775 + C28151 * C15771 + (C23340 - C23341) * C15776 +
              (C23342 - C23343) * C47389) *
                 C47391) *
                C47374) *
               C47136) *
              C2440 +
          (((((C21369 * C118 - C47018 * C125) * C15775 +
              (C21369 * C128 - C47018 * C139) * C15771 +
              (C21496 - C21497) * C15776 + (C21498 - C21499) * C47389) *
                 C10231 +
             ((C25958 - C25959) * C15775 + (C25960 - C25961) * C15771 +
              C26444 * C15776 + C26445 * C47389) *
                 C47391) *
                C47411 +
            (((C25959 - C25958) * C15775 + (C25961 - C25960) * C15771 +
              C26446 * C15776 + C26447 * C47389) *
                 C10231 +
             ((C25962 - C25963) * C15775 + (C25964 - C25965) * C15771 +
              C27876 * C15776 + C27877 * C47389) *
                 C47391) *
                C47400 +
            (((C25963 - C25962) * C15775 + (C25965 - C25964) * C15771 +
              C27878 * C15776 + C27879 * C47389) *
                 C10231 +
             ((C28014 - C28015) * C15775 + (C28016 - C28017) * C15771 +
              (C27880 - C27881) * C15776 + (C27882 - C27883) * C47389) *
                 C47391) *
                C47374) *
               C2332 +
           ((((C21497 - C21496) * C15775 + (C21499 - C21498) * C15771 +
              (C21501 - C21500) * C15776 + (C21503 - C21502) * C47389) *
                 C10231 +
             (C26446 * C15775 + C26447 * C15771 + C22582 * C15776 +
              C22583 * C47389) *
                 C47391) *
                C47411 +
            ((C26444 * C15775 + C26445 * C15771 + C27158 * C15776 +
              C27159 * C47389) *
                 C10231 +
             (C27878 * C15775 + C27879 * C15771 + (C23132 - C23133) * C15776 +
              (C23134 - C23135) * C47389) *
                 C47391) *
                C47400 +
            ((C27876 * C15775 + C27877 * C15771 + (C23133 - C23132) * C15776 +
              (C23135 - C23134) * C47389) *
                 C10231 +
             ((C27881 - C27880) * C15775 + (C27883 - C27882) * C15771 +
              (C47018 * C7172 - C21369 * C7170) * C15776 +
              (C47018 * C7176 - C21369 * C7174) * C47389) *
                 C47391) *
                C47374) *
               C47136) *
              C47056)) /
            (p * q * std::sqrt(p + q));
    d2ee[128] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C47018 * C124 - C21369 * C117) * C15775 +
              (C47018 * C138 - C21369 * C127) * C15771 +
              (C21484 - C21485) * C15776 + (C21486 - C21487) * C47389) *
                 C10231 +
             ((C25950 - C25951) * C15775 + (C25952 - C25953) * C15771 +
              C26440 * C15776 + C26441 * C47389) *
                 C47391) *
                C47340 +
            (((C25951 - C25950) * C15775 + (C25953 - C25952) * C15771 +
              C26442 * C15776 + C26443 * C47389) *
                 C10231 +
             ((C25954 - C25955) * C15775 + (C25956 - C25957) * C15771 +
              C26826 * C15776 + C26827 * C47389) *
                 C47391) *
                C47178) *
               C2332 +
           ((((C21485 - C21484) * C15775 + (C21487 - C21486) * C15771 +
              (C21489 - C21488) * C15776 + (C21491 - C21490) * C47389) *
                 C10231 +
             (C26442 * C15775 + C26443 * C15771 + C22312 * C15776 +
              C22313 * C47389) *
                 C47391) *
                C47340 +
            ((C26440 * C15775 + C26441 * C15771 + C26830 * C15776 +
              C26831 * C47389) *
                 C10231 +
             (C26828 * C15775 + C26829 * C15771 + C22330 * C15776 +
              C22331 * C47389) *
                 C47391) *
                C47178) *
               C47136) *
              C47050 +
          (((((C21369 * C118 - C47018 * C125) * C15775 +
              (C21369 * C128 - C47018 * C139) * C15771 +
              (C21496 - C21497) * C15776 + (C21498 - C21499) * C47389) *
                 C10231 +
             ((C25958 - C25959) * C15775 + (C25960 - C25961) * C15771 +
              C26444 * C15776 + C26445 * C47389) *
                 C47391) *
                C47340 +
            (((C25959 - C25958) * C15775 + (C25961 - C25960) * C15771 +
              C26446 * C15776 + C26447 * C47389) *
                 C10231 +
             ((C25962 - C25963) * C15775 + (C25964 - C25965) * C15771 +
              C27876 * C15776 + C27877 * C47389) *
                 C47391) *
                C47178) *
               C2332 +
           ((((C21497 - C21496) * C15775 + (C21499 - C21498) * C15771 +
              (C21501 - C21500) * C15776 + (C21503 - C21502) * C47389) *
                 C10231 +
             (C26446 * C15775 + C26447 * C15771 + C22582 * C15776 +
              C22583 * C47389) *
                 C47391) *
                C47340 +
            ((C26444 * C15775 + C26445 * C15771 + C27158 * C15776 +
              C27159 * C47389) *
                 C10231 +
             (C27878 * C15775 + C27879 * C15771 + (C23132 - C23133) * C15776 +
              (C23134 - C23135) * C47389) *
                 C47391) *
                C47178) *
               C47136) *
              C47059 +
          (((((C47018 * C126 - C21369 * C119) * C15775 +
              (C47018 * C140 - C21369 * C129) * C15771 +
              (C21508 - C21509) * C15776 + (C21510 - C21511) * C47389) *
                 C10231 +
             ((C25966 - C25967) * C15775 + (C25968 - C25969) * C15771 +
              C26448 * C15776 + C26449 * C47389) *
                 C47391) *
                C47340 +
            (((C25967 - C25966) * C15775 + (C25969 - C25968) * C15771 +
              C26450 * C15776 + C26451 * C47389) *
                 C10231 +
             ((C25970 - C25971) * C15775 + (C25972 - C25973) * C15771 +
              (C25974 - C25975) * C15776 + (C25976 - C25977) * C47389) *
                 C47391) *
                C47178) *
               C2332 +
           ((((C21509 - C21508) * C15775 + (C21511 - C21510) * C15771 +
              (C21513 - C21512) * C15776 + (C21515 - C21514) * C47389) *
                 C10231 +
             (C26450 * C15775 + C26451 * C15771 + (C22006 - C22007) * C15776 +
              (C22008 - C22009) * C47389) *
                 C47391) *
                C47340 +
            ((C26448 * C15775 + C26449 * C15771 + (C22007 - C22006) * C15776 +
              (C22009 - C22008) * C47389) *
                 C10231 +
             ((C25975 - C25974) * C15775 + (C25977 - C25976) * C15771 +
              (C47018 * C1173 - C21369 * C1158) * C15776 +
              (C47018 * C1185 - C21369 * C1176) * C47389) *
                 C47391) *
                C47178) *
               C47136) *
              C2703)) /
        (p * q * std::sqrt(p + q));
    d2ee[129] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((((C47018 * C124 - C21369 * C117) * C15775 +
                      (C47018 * C138 - C21369 * C127) * C15771 +
                      (C21484 - C21485) * C15776 + (C21486 - C21487) * C47389) *
                         C10231 +
                     ((C25950 - C25951) * C15775 + (C25952 - C25953) * C15771 +
                      C26440 * C15776 + C26441 * C47389) *
                         C47391) *
                        C47091 * C2332 +
                    (((C21485 - C21484) * C15775 + (C21487 - C21486) * C15771 +
                      (C21489 - C21488) * C15776 + (C21491 - C21490) * C47389) *
                         C10231 +
                     (C26442 * C15775 + C26443 * C15771 + C22312 * C15776 +
                      C22313 * C47389) *
                         C47391) *
                        C47091 * C47136) *
                       C47416 +
                   ((((C21369 * C118 - C47018 * C125) * C15775 +
                      (C21369 * C128 - C47018 * C139) * C15771 +
                      (C21496 - C21497) * C15776 + (C21498 - C21499) * C47389) *
                         C10231 +
                     ((C25958 - C25959) * C15775 + (C25960 - C25961) * C15771 +
                      C26444 * C15776 + C26445 * C47389) *
                         C47391) *
                        C47091 * C2332 +
                    (((C21497 - C21496) * C15775 + (C21499 - C21498) * C15771 +
                      (C21501 - C21500) * C15776 + (C21503 - C21502) * C47389) *
                         C10231 +
                     (C26446 * C15775 + C26447 * C15771 + C22582 * C15776 +
                      C22583 * C47389) *
                         C47391) *
                        C47091 * C47136) *
                       C47409 +
                   ((((C47018 * C126 - C21369 * C119) * C15775 +
                      (C47018 * C140 - C21369 * C129) * C15771 +
                      (C21508 - C21509) * C15776 + (C21510 - C21511) * C47389) *
                         C10231 +
                     ((C25966 - C25967) * C15775 + (C25968 - C25969) * C15771 +
                      C26448 * C15776 + C26449 * C47389) *
                         C47391) *
                        C47091 * C2332 +
                    (((C21509 - C21508) * C15775 + (C21511 - C21510) * C15771 +
                      (C21513 - C21512) * C15776 + (C21515 - C21514) * C47389) *
                         C10231 +
                     (C26450 * C15775 + C26451 * C15771 +
                      (C22006 - C22007) * C15776 + (C22008 - C22009) * C47389) *
                         C47391) *
                        C47091 * C47136) *
                       C47396 +
                   ((((C21369 * C120 - C47018 * C130) * C15775 +
                      (C21369 * C131 - C47018 * C141) * C15771 +
                      (C21734 - C21735) * C15776 + (C21736 - C21737) * C47389) *
                         C10231 +
                     ((C26242 - C26243) * C15775 + (C26244 - C26245) * C15771 +
                      (C26108 - C26109) * C15776 + (C26110 - C26111) * C47389) *
                         C47391) *
                        C47091 * C2332 +
                    (((C21735 - C21734) * C15775 + (C21737 - C21736) * C15771 +
                      (C21739 - C21738) * C15776 + (C21741 - C21740) * C47389) *
                         C10231 +
                     ((C26109 - C26108) * C15775 + (C26111 - C26110) * C15771 +
                      (C47018 * C1441 - C21369 * C1440) * C15776 +
                      (C47018 * C1443 - C21369 * C1442) * C47389) *
                         C47391) *
                        C47091 * C47136) *
                       C47375)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((((C47018 * C124 - C21369 * C117) * C15775 +
                      (C47018 * C138 - C21369 * C127) * C15771 +
                      (C21484 - C21485) * C15776 + (C21486 - C21487) * C47389) *
                         C10231 +
                     ((C25950 - C25951) * C15775 + (C25952 - C25953) * C15771 +
                      C26440 * C15776 + C26441 * C47389) *
                         C47391) *
                        C47091 * C47417 +
                    (((C21485 - C21484) * C15775 + (C21487 - C21486) * C15771 +
                      (C21489 - C21488) * C15776 + (C21491 - C21490) * C47389) *
                         C10231 +
                     (C26442 * C15775 + C26443 * C15771 + C22312 * C15776 +
                      C22313 * C47389) *
                         C47391) *
                        C47091 * C47413 +
                    ((C21520 * C15775 + C21521 * C15771 +
                      (C21493 - C21492) * C15776 + (C21495 - C21494) * C47389) *
                         C10231 +
                     (C26830 * C15775 + C26831 * C15771 + C22690 * C15776 +
                      C22691 * C47389) *
                         C47391) *
                        C47091 * C47403 +
                    ((C22186 * C15775 + C22187 * C15771 +
                      (C22189 - C22188) * C15776 + (C22191 - C22190) * C47389) *
                         C10231 +
                     (C27290 * C15775 + C27291 * C15771 +
                      (C22692 - C22693) * C15776 + (C22694 - C22695) * C47389) *
                         C47391) *
                        C47091 * C47381) *
                       C2440 +
                   ((((C21369 * C118 - C47018 * C125) * C15775 +
                      (C21369 * C128 - C47018 * C139) * C15771 +
                      (C21496 - C21497) * C15776 + (C21498 - C21499) * C47389) *
                         C10231 +
                     ((C25958 - C25959) * C15775 + (C25960 - C25961) * C15771 +
                      C26444 * C15776 + C26445 * C47389) *
                         C47391) *
                        C47091 * C47417 +
                    (((C21497 - C21496) * C15775 + (C21499 - C21498) * C15771 +
                      (C21501 - C21500) * C15776 + (C21503 - C21502) * C47389) *
                         C10231 +
                     (C26446 * C15775 + C26447 * C15771 + C22582 * C15776 +
                      C22583 * C47389) *
                         C47391) *
                        C47091 * C47413 +
                    ((C21522 * C15775 + C21523 * C15771 +
                      (C21505 - C21504) * C15776 + (C21507 - C21506) * C47389) *
                         C10231 +
                     (C27158 * C15775 + C27159 * C15771 +
                      (C22584 - C22585) * C15776 + (C22586 - C22587) * C47389) *
                         C47391) *
                        C47091 * C47403 +
                    ((C22430 * C15775 + C22431 * C15771 +
                      (C22433 - C22432) * C15776 + (C22435 - C22434) * C47389) *
                         C10231 +
                     ((C22585 - C22584) * C15775 + (C22587 - C22586) * C15771 +
                      (C47018 * C6312 - C21369 * C6310) * C15776 +
                      (C47018 * C6316 - C21369 * C6314) * C47389) *
                         C47391) *
                        C47091 * C47381) *
                       C47056)) /
                     (p * q * std::sqrt(p + q));
    d2ee[130] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C47018 * C124 - C21369 * C117) * C15775 +
              (C47018 * C138 - C21369 * C127) * C15771 +
              (C21484 - C21485) * C15776 + (C21486 - C21487) * C47389) *
                 C10231 +
             ((C25950 - C25951) * C15775 + (C25952 - C25953) * C15771 +
              C26440 * C15776 + C26441 * C47389) *
                 C47391) *
                C3094 +
            (((C25951 - C25950) * C15775 + (C25953 - C25952) * C15771 +
              C26442 * C15776 + C26443 * C47389) *
                 C10231 +
             ((C25954 - C25955) * C15775 + (C25956 - C25957) * C15771 +
              C26826 * C15776 + C26827 * C47389) *
                 C47391) *
                C47178) *
               C47132 +
           ((((C21485 - C21484) * C15775 + (C21487 - C21486) * C15771 +
              (C21489 - C21488) * C15776 + (C21491 - C21490) * C47389) *
                 C10231 +
             (C26442 * C15775 + C26443 * C15771 + C22312 * C15776 +
              C22313 * C47389) *
                 C47391) *
                C3094 +
            ((C26440 * C15775 + C26441 * C15771 + C26830 * C15776 +
              C26831 * C47389) *
                 C10231 +
             (C26828 * C15775 + C26829 * C15771 + C22330 * C15776 +
              C22331 * C47389) *
                 C47391) *
                C47178) *
               C47139 +
           (((C21520 * C15775 + C21521 * C15771 + (C21493 - C21492) * C15776 +
              (C21495 - C21494) * C47389) *
                 C10231 +
             (C26830 * C15775 + C26831 * C15771 + C22690 * C15776 +
              C22691 * C47389) *
                 C47391) *
                C3094 +
            ((C22312 * C15775 + C22313 * C15771 + C27290 * C15776 +
              C27291 * C47389) *
                 C10231 +
             (C26832 * C15775 + C26833 * C15771 + (C22326 - C22327) * C15776 +
              (C22328 - C22329) * C47389) *
                 C47391) *
                C47178) *
               C2700) *
              C47325 +
          (((((C21369 * C118 - C47018 * C125) * C15775 +
              (C21369 * C128 - C47018 * C139) * C15771 +
              (C21496 - C21497) * C15776 + (C21498 - C21499) * C47389) *
                 C10231 +
             ((C25958 - C25959) * C15775 + (C25960 - C25961) * C15771 +
              C26444 * C15776 + C26445 * C47389) *
                 C47391) *
                C3094 +
            (((C25959 - C25958) * C15775 + (C25961 - C25960) * C15771 +
              C26446 * C15776 + C26447 * C47389) *
                 C10231 +
             ((C25962 - C25963) * C15775 + (C25964 - C25965) * C15771 +
              C27876 * C15776 + C27877 * C47389) *
                 C47391) *
                C47178) *
               C47132 +
           ((((C21497 - C21496) * C15775 + (C21499 - C21498) * C15771 +
              (C21501 - C21500) * C15776 + (C21503 - C21502) * C47389) *
                 C10231 +
             (C26446 * C15775 + C26447 * C15771 + C22582 * C15776 +
              C22583 * C47389) *
                 C47391) *
                C3094 +
            ((C26444 * C15775 + C26445 * C15771 + C27158 * C15776 +
              C27159 * C47389) *
                 C10231 +
             (C27878 * C15775 + C27879 * C15771 + (C23132 - C23133) * C15776 +
              (C23134 - C23135) * C47389) *
                 C47391) *
                C47178) *
               C47139 +
           (((C21522 * C15775 + C21523 * C15771 + (C21505 - C21504) * C15776 +
              (C21507 - C21506) * C47389) *
                 C10231 +
             (C27158 * C15775 + C27159 * C15771 + (C22584 - C22585) * C15776 +
              (C22586 - C22587) * C47389) *
                 C47391) *
                C3094 +
            ((C22582 * C15775 + C22583 * C15771 + (C22585 - C22584) * C15776 +
              (C22587 - C22586) * C47389) *
                 C10231 +
             ((C23133 - C23132) * C15775 + (C23135 - C23134) * C15771 +
              (C47018 * C5810 - C21369 * C5808) * C15776 +
              (C47018 * C5814 - C21369 * C5812) * C47389) *
                 C47391) *
                C47178) *
               C2700) *
              C47056)) /
        (p * q * std::sqrt(p + q));
    d2ee[131] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((((C47018 * C124 - C21369 * C117) * C15775 +
                      (C47018 * C138 - C21369 * C127) * C15771 +
                      (C21484 - C21485) * C15776 + (C21486 - C21487) * C47389) *
                         C10231 +
                     ((C25950 - C25951) * C15775 + (C25952 - C25953) * C15771 +
                      C26440 * C15776 + C26441 * C47389) *
                         C47391) *
                        C47174 +
                    (((C25951 - C25950) * C15775 + (C25953 - C25952) * C15771 +
                      C26442 * C15776 + C26443 * C47389) *
                         C10231 +
                     ((C25954 - C25955) * C15775 + (C25956 - C25957) * C15771 +
                      C26826 * C15776 + C26827 * C47389) *
                         C47391) *
                        C47181 +
                    (((C25955 - C25954) * C15775 + (C25957 - C25956) * C15771 +
                      C26828 * C15776 + C26829 * C47389) *
                         C10231 +
                     ((C27670 - C27671) * C15775 + (C27672 - C27673) * C15771 +
                      C28148 * C15776 + C28149 * C47389) *
                         C47391) *
                        C3602) *
                       C47132 +
                   ((((C21485 - C21484) * C15775 + (C21487 - C21486) * C15771 +
                      (C21489 - C21488) * C15776 + (C21491 - C21490) * C47389) *
                         C10231 +
                     (C26442 * C15775 + C26443 * C15771 + C22312 * C15776 +
                      C22313 * C47389) *
                         C47391) *
                        C47174 +
                    ((C26440 * C15775 + C26441 * C15771 + C26830 * C15776 +
                      C26831 * C47389) *
                         C10231 +
                     (C26828 * C15775 + C26829 * C15771 + C22330 * C15776 +
                      C22331 * C47389) *
                         C47391) *
                        C47181 +
                    ((C26826 * C15775 + C26827 * C15771 + C26832 * C15776 +
                      C26833 * C47389) *
                         C10231 +
                     (C28150 * C15775 + C28151 * C15771 +
                      (C23340 - C23341) * C15776 + (C23342 - C23343) * C47389) *
                         C47391) *
                        C3602) *
                       C47139 +
                   (((C21520 * C15775 + C21521 * C15771 +
                      (C21493 - C21492) * C15776 + (C21495 - C21494) * C47389) *
                         C10231 +
                     (C26830 * C15775 + C26831 * C15771 + C22690 * C15776 +
                      C22691 * C47389) *
                         C47391) *
                        C47174 +
                    ((C22312 * C15775 + C22313 * C15771 + C27290 * C15776 +
                      C27291 * C47389) *
                         C10231 +
                     (C26832 * C15775 + C26833 * C15771 +
                      (C22326 - C22327) * C15776 + (C22328 - C22329) * C47389) *
                         C47391) *
                        C47181 +
                    ((C22330 * C15775 + C22331 * C15771 +
                      (C22327 - C22326) * C15776 + (C22329 - C22328) * C47389) *
                         C10231 +
                     ((C23341 - C23340) * C15775 + (C23343 - C23342) * C15771 +
                      (C47018 * C23332 - C21369 * C23331) * C15776 +
                      (C47018 * C23334 - C21369 * C23333) * C47389) *
                         C47391) *
                        C3602) *
                       C2700) *
                  C47045) /
                 (p * q * std::sqrt(p + q));
    d2ee[132] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C47018 * C124 - C21369 * C117) * C15775 +
             (C47018 * C138 - C21369 * C127) * C15771 +
             (C21484 - C21485) * C15776 + (C21486 - C21487) * C47389) *
                C10231 +
            ((C25950 - C25951) * C15775 + (C25952 - C25953) * C15771 +
             C26440 * C15776 + C26441 * C47389) *
                C47391) *
               C3094 +
           (((C25951 - C25950) * C15775 + (C25953 - C25952) * C15771 +
             C26442 * C15776 + C26443 * C47389) *
                C10231 +
            ((C25954 - C25955) * C15775 + (C25956 - C25957) * C15771 +
             C26826 * C15776 + C26827 * C47389) *
                C47391) *
               C47178) *
              C47417 +
          ((((C21485 - C21484) * C15775 + (C21487 - C21486) * C15771 +
             (C21489 - C21488) * C15776 + (C21491 - C21490) * C47389) *
                C10231 +
            (C26442 * C15775 + C26443 * C15771 + C22312 * C15776 +
             C22313 * C47389) *
                C47391) *
               C3094 +
           ((C26440 * C15775 + C26441 * C15771 + C26830 * C15776 +
             C26831 * C47389) *
                C10231 +
            (C26828 * C15775 + C26829 * C15771 + C22330 * C15776 +
             C22331 * C47389) *
                C47391) *
               C47178) *
              C47413 +
          (((C21520 * C15775 + C21521 * C15771 + (C21493 - C21492) * C15776 +
             (C21495 - C21494) * C47389) *
                C10231 +
            (C26830 * C15775 + C26831 * C15771 + C22690 * C15776 +
             C22691 * C47389) *
                C47391) *
               C3094 +
           ((C22312 * C15775 + C22313 * C15771 + C27290 * C15776 +
             C27291 * C47389) *
                C10231 +
            (C26832 * C15775 + C26833 * C15771 + (C22326 - C22327) * C15776 +
             (C22328 - C22329) * C47389) *
                C47391) *
               C47178) *
              C47403 +
          (((C22186 * C15775 + C22187 * C15771 + (C22189 - C22188) * C15776 +
             (C22191 - C22190) * C47389) *
                C10231 +
            (C27290 * C15775 + C27291 * C15771 + (C22692 - C22693) * C15776 +
             (C22694 - C22695) * C47389) *
                C47391) *
               C3094 +
           ((C22690 * C15775 + C22691 * C15771 + (C22693 - C22692) * C15776 +
             (C22695 - C22694) * C47389) *
                C10231 +
            ((C22327 - C22326) * C15775 + (C22329 - C22328) * C15771 +
             (C47018 * C22308 - C21369 * C22307) * C15776 +
             (C47018 * C22310 - C21369 * C22309) * C47389) *
                C47391) *
               C47178) *
              C47381) *
         C47045) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C47018 * C124 - C21369 * C117) * C15775 +
              (C47018 * C138 - C21369 * C127) * C15771 +
              (C21484 - C21485) * C15776 + (C21486 - C21487) * C47389) *
                 C10231 +
             ((C25950 - C25951) * C15775 + (C25952 - C25953) * C15771 +
              C26440 * C15776 + C26441 * C47389) *
                 C47391) *
                C3094 +
            (((C25951 - C25950) * C15775 + (C25953 - C25952) * C15771 +
              C26442 * C15776 + C26443 * C47389) *
                 C10231 +
             ((C25954 - C25955) * C15775 + (C25956 - C25957) * C15771 +
              C26826 * C15776 + C26827 * C47389) *
                 C47391) *
                C47178) *
               C2332 +
           ((((C21485 - C21484) * C15775 + (C21487 - C21486) * C15771 +
              (C21489 - C21488) * C15776 + (C21491 - C21490) * C47389) *
                 C10231 +
             (C26442 * C15775 + C26443 * C15771 + C22312 * C15776 +
              C22313 * C47389) *
                 C47391) *
                C3094 +
            ((C26440 * C15775 + C26441 * C15771 + C26830 * C15776 +
              C26831 * C47389) *
                 C10231 +
             (C26828 * C15775 + C26829 * C15771 + C22330 * C15776 +
              C22331 * C47389) *
                 C47391) *
                C47178) *
               C47136) *
              C47407 +
          (((((C21369 * C118 - C47018 * C125) * C15775 +
              (C21369 * C128 - C47018 * C139) * C15771 +
              (C21496 - C21497) * C15776 + (C21498 - C21499) * C47389) *
                 C10231 +
             ((C25958 - C25959) * C15775 + (C25960 - C25961) * C15771 +
              C26444 * C15776 + C26445 * C47389) *
                 C47391) *
                C3094 +
            (((C25959 - C25958) * C15775 + (C25961 - C25960) * C15771 +
              C26446 * C15776 + C26447 * C47389) *
                 C10231 +
             ((C25962 - C25963) * C15775 + (C25964 - C25965) * C15771 +
              C27876 * C15776 + C27877 * C47389) *
                 C47391) *
                C47178) *
               C2332 +
           ((((C21497 - C21496) * C15775 + (C21499 - C21498) * C15771 +
              (C21501 - C21500) * C15776 + (C21503 - C21502) * C47389) *
                 C10231 +
             (C26446 * C15775 + C26447 * C15771 + C22582 * C15776 +
              C22583 * C47389) *
                 C47391) *
                C3094 +
            ((C26444 * C15775 + C26445 * C15771 + C27158 * C15776 +
              C27159 * C47389) *
                 C10231 +
             (C27878 * C15775 + C27879 * C15771 + (C23132 - C23133) * C15776 +
              (C23134 - C23135) * C47389) *
                 C47391) *
                C47178) *
               C47136) *
              C47394 +
          (((((C47018 * C126 - C21369 * C119) * C15775 +
              (C47018 * C140 - C21369 * C129) * C15771 +
              (C21508 - C21509) * C15776 + (C21510 - C21511) * C47389) *
                 C10231 +
             ((C25966 - C25967) * C15775 + (C25968 - C25969) * C15771 +
              C26448 * C15776 + C26449 * C47389) *
                 C47391) *
                C3094 +
            (((C25967 - C25966) * C15775 + (C25969 - C25968) * C15771 +
              C26450 * C15776 + C26451 * C47389) *
                 C10231 +
             ((C25970 - C25971) * C15775 + (C25972 - C25973) * C15771 +
              (C25974 - C25975) * C15776 + (C25976 - C25977) * C47389) *
                 C47391) *
                C47178) *
               C2332 +
           ((((C21509 - C21508) * C15775 + (C21511 - C21510) * C15771 +
              (C21513 - C21512) * C15776 + (C21515 - C21514) * C47389) *
                 C10231 +
             (C26450 * C15775 + C26451 * C15771 + (C22006 - C22007) * C15776 +
              (C22008 - C22009) * C47389) *
                 C47391) *
                C3094 +
            ((C26448 * C15775 + C26449 * C15771 + (C22007 - C22006) * C15776 +
              (C22009 - C22008) * C47389) *
                 C10231 +
             ((C25975 - C25974) * C15775 + (C25977 - C25976) * C15771 +
              (C47018 * C1173 - C21369 * C1158) * C15776 +
              (C47018 * C1185 - C21369 * C1176) * C47389) *
                 C47391) *
                C47178) *
               C47136) *
              C47365)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C47018 * C124 - C21369 * C117) * C15775 +
             (C47018 * C138 - C21369 * C127) * C15771 +
             (C21484 - C21485) * C15776 + (C21486 - C21487) * C47389) *
                C10231 +
            ((C25950 - C25951) * C15775 + (C25952 - C25953) * C15771 +
             C26440 * C15776 + C26441 * C47389) *
                C47391) *
               C47418 +
           (((C25951 - C25950) * C15775 + (C25953 - C25952) * C15771 +
             C26442 * C15776 + C26443 * C47389) *
                C10231 +
            ((C25954 - C25955) * C15775 + (C25956 - C25957) * C15771 +
             C26826 * C15776 + C26827 * C47389) *
                C47391) *
               C47415 +
           (((C25955 - C25954) * C15775 + (C25957 - C25956) * C15771 +
             C26828 * C15776 + C26829 * C47389) *
                C10231 +
            ((C27670 - C27671) * C15775 + (C27672 - C27673) * C15771 +
             C28148 * C15776 + C28149 * C47389) *
                C47391) *
               C47406 +
           (((C27671 - C27670) * C15775 + (C27673 - C27672) * C15771 +
             C28150 * C15776 + C28151 * C47389) *
                C10231 +
            ((C27674 - C27675) * C15775 + (C27676 - C27677) * C15771 +
             (C27678 - C27679) * C15776 + (C27680 - C27681) * C47389) *
                C47391) *
               C47387) *
              C2332 +
          ((((C21485 - C21484) * C15775 + (C21487 - C21486) * C15771 +
             (C21489 - C21488) * C15776 + (C21491 - C21490) * C47389) *
                C10231 +
            (C26442 * C15775 + C26443 * C15771 + C22312 * C15776 +
             C22313 * C47389) *
                C47391) *
               C47418 +
           ((C26440 * C15775 + C26441 * C15771 + C26830 * C15776 +
             C26831 * C47389) *
                C10231 +
            (C26828 * C15775 + C26829 * C15771 + C22330 * C15776 +
             C22331 * C47389) *
                C47391) *
               C47415 +
           ((C26826 * C15775 + C26827 * C15771 + C26832 * C15776 +
             C26833 * C47389) *
                C10231 +
            (C28150 * C15775 + C28151 * C15771 + (C23340 - C23341) * C15776 +
             (C23342 - C23343) * C47389) *
                C47391) *
               C47406 +
           ((C28148 * C15775 + C28149 * C15771 + (C23341 - C23340) * C15776 +
             (C23343 - C23342) * C47389) *
                C10231 +
            ((C27679 - C27678) * C15775 + (C27681 - C27680) * C15771 +
             (C47018 * C22978 - C21369 * C22977) * C15776 +
             (C47018 * C22980 - C21369 * C22979) * C47389) *
                C47391) *
               C47387) *
              C47136) *
         C47045) /
            (p * q * std::sqrt(p + q));
    d2ee[133] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C47018 * C124 - C21369 * C117) * C15775 +
              (C47018 * C138 - C21369 * C127) * C15771 +
              (C21484 - C21485) * C15776 + (C21486 - C21487) * C47389) *
                 C10231 +
             ((C25950 - C25951) * C15775 + (C25952 - C25953) * C15771 +
              C26440 * C15776 + C26441 * C47389) *
                 C47391) *
                C47174 +
            (((C25951 - C25950) * C15775 + (C25953 - C25952) * C15771 +
              C26442 * C15776 + C26443 * C47389) *
                 C10231 +
             ((C25954 - C25955) * C15775 + (C25956 - C25957) * C15771 +
              C26826 * C15776 + C26827 * C47389) *
                 C47391) *
                C47181 +
            (((C25955 - C25954) * C15775 + (C25957 - C25956) * C15771 +
              C26828 * C15776 + C26829 * C47389) *
                 C10231 +
             ((C27670 - C27671) * C15775 + (C27672 - C27673) * C15771 +
              C28148 * C15776 + C28149 * C47389) *
                 C47391) *
                C3602) *
               C2332 +
           ((((C21485 - C21484) * C15775 + (C21487 - C21486) * C15771 +
              (C21489 - C21488) * C15776 + (C21491 - C21490) * C47389) *
                 C10231 +
             (C26442 * C15775 + C26443 * C15771 + C22312 * C15776 +
              C22313 * C47389) *
                 C47391) *
                C47174 +
            ((C26440 * C15775 + C26441 * C15771 + C26830 * C15776 +
              C26831 * C47389) *
                 C10231 +
             (C26828 * C15775 + C26829 * C15771 + C22330 * C15776 +
              C22331 * C47389) *
                 C47391) *
                C47181 +
            ((C26826 * C15775 + C26827 * C15771 + C26832 * C15776 +
              C26833 * C47389) *
                 C10231 +
             (C28150 * C15775 + C28151 * C15771 + (C23340 - C23341) * C15776 +
              (C23342 - C23343) * C47389) *
                 C47391) *
                C3602) *
               C47136) *
              C47325 +
          (((((C21369 * C118 - C47018 * C125) * C15775 +
              (C21369 * C128 - C47018 * C139) * C15771 +
              (C21496 - C21497) * C15776 + (C21498 - C21499) * C47389) *
                 C10231 +
             ((C25958 - C25959) * C15775 + (C25960 - C25961) * C15771 +
              C26444 * C15776 + C26445 * C47389) *
                 C47391) *
                C47174 +
            (((C25959 - C25958) * C15775 + (C25961 - C25960) * C15771 +
              C26446 * C15776 + C26447 * C47389) *
                 C10231 +
             ((C25962 - C25963) * C15775 + (C25964 - C25965) * C15771 +
              C27876 * C15776 + C27877 * C47389) *
                 C47391) *
                C47181 +
            (((C25963 - C25962) * C15775 + (C25965 - C25964) * C15771 +
              C27878 * C15776 + C27879 * C47389) *
                 C10231 +
             ((C28014 - C28015) * C15775 + (C28016 - C28017) * C15771 +
              (C27880 - C27881) * C15776 + (C27882 - C27883) * C47389) *
                 C47391) *
                C3602) *
               C2332 +
           ((((C21497 - C21496) * C15775 + (C21499 - C21498) * C15771 +
              (C21501 - C21500) * C15776 + (C21503 - C21502) * C47389) *
                 C10231 +
             (C26446 * C15775 + C26447 * C15771 + C22582 * C15776 +
              C22583 * C47389) *
                 C47391) *
                C47174 +
            ((C26444 * C15775 + C26445 * C15771 + C27158 * C15776 +
              C27159 * C47389) *
                 C10231 +
             (C27878 * C15775 + C27879 * C15771 + (C23132 - C23133) * C15776 +
              (C23134 - C23135) * C47389) *
                 C47391) *
                C47181 +
            ((C27876 * C15775 + C27877 * C15771 + (C23133 - C23132) * C15776 +
              (C23135 - C23134) * C47389) *
                 C10231 +
             ((C27881 - C27880) * C15775 + (C27883 - C27882) * C15771 +
              (C47018 * C7172 - C21369 * C7170) * C15776 +
              (C47018 * C7176 - C21369 * C7174) * C47389) *
                 C47391) *
                C3602) *
               C47136) *
              C47056)) /
        (p * q * std::sqrt(p + q));
    d2ee[134] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C47018 * C124 - C21369 * C117) * C15775 +
              (C47018 * C138 - C21369 * C127) * C15771 +
              (C21484 - C21485) * C15776 + (C21486 - C21487) * C47389) *
                 C10231 +
             ((C25950 - C25951) * C15775 + (C25952 - C25953) * C15771 +
              C26440 * C15776 + C26441 * C47389) *
                 C47391) *
                C3094 +
            (((C25951 - C25950) * C15775 + (C25953 - C25952) * C15771 +
              C26442 * C15776 + C26443 * C47389) *
                 C10231 +
             ((C25954 - C25955) * C15775 + (C25956 - C25957) * C15771 +
              C26826 * C15776 + C26827 * C47389) *
                 C47391) *
                C47178) *
               C2332 +
           ((((C21485 - C21484) * C15775 + (C21487 - C21486) * C15771 +
              (C21489 - C21488) * C15776 + (C21491 - C21490) * C47389) *
                 C10231 +
             (C26442 * C15775 + C26443 * C15771 + C22312 * C15776 +
              C22313 * C47389) *
                 C47391) *
                C3094 +
            ((C26440 * C15775 + C26441 * C15771 + C26830 * C15776 +
              C26831 * C47389) *
                 C10231 +
             (C26828 * C15775 + C26829 * C15771 + C22330 * C15776 +
              C22331 * C47389) *
                 C47391) *
                C47178) *
               C47136) *
              C47407 +
          (((((C21369 * C118 - C47018 * C125) * C15775 +
              (C21369 * C128 - C47018 * C139) * C15771 +
              (C21496 - C21497) * C15776 + (C21498 - C21499) * C47389) *
                 C10231 +
             ((C25958 - C25959) * C15775 + (C25960 - C25961) * C15771 +
              C26444 * C15776 + C26445 * C47389) *
                 C47391) *
                C3094 +
            (((C25959 - C25958) * C15775 + (C25961 - C25960) * C15771 +
              C26446 * C15776 + C26447 * C47389) *
                 C10231 +
             ((C25962 - C25963) * C15775 + (C25964 - C25965) * C15771 +
              C27876 * C15776 + C27877 * C47389) *
                 C47391) *
                C47178) *
               C2332 +
           ((((C21497 - C21496) * C15775 + (C21499 - C21498) * C15771 +
              (C21501 - C21500) * C15776 + (C21503 - C21502) * C47389) *
                 C10231 +
             (C26446 * C15775 + C26447 * C15771 + C22582 * C15776 +
              C22583 * C47389) *
                 C47391) *
                C3094 +
            ((C26444 * C15775 + C26445 * C15771 + C27158 * C15776 +
              C27159 * C47389) *
                 C10231 +
             (C27878 * C15775 + C27879 * C15771 + (C23132 - C23133) * C15776 +
              (C23134 - C23135) * C47389) *
                 C47391) *
                C47178) *
               C47136) *
              C47394 +
          (((((C47018 * C126 - C21369 * C119) * C15775 +
              (C47018 * C140 - C21369 * C129) * C15771 +
              (C21508 - C21509) * C15776 + (C21510 - C21511) * C47389) *
                 C10231 +
             ((C25966 - C25967) * C15775 + (C25968 - C25969) * C15771 +
              C26448 * C15776 + C26449 * C47389) *
                 C47391) *
                C3094 +
            (((C25967 - C25966) * C15775 + (C25969 - C25968) * C15771 +
              C26450 * C15776 + C26451 * C47389) *
                 C10231 +
             ((C25970 - C25971) * C15775 + (C25972 - C25973) * C15771 +
              (C25974 - C25975) * C15776 + (C25976 - C25977) * C47389) *
                 C47391) *
                C47178) *
               C2332 +
           ((((C21509 - C21508) * C15775 + (C21511 - C21510) * C15771 +
              (C21513 - C21512) * C15776 + (C21515 - C21514) * C47389) *
                 C10231 +
             (C26450 * C15775 + C26451 * C15771 + (C22006 - C22007) * C15776 +
              (C22008 - C22009) * C47389) *
                 C47391) *
                C3094 +
            ((C26448 * C15775 + C26449 * C15771 + (C22007 - C22006) * C15776 +
              (C22009 - C22008) * C47389) *
                 C10231 +
             ((C25975 - C25974) * C15775 + (C25977 - C25976) * C15771 +
              (C47018 * C1173 - C21369 * C1158) * C15776 +
              (C47018 * C1185 - C21369 * C1176) * C47389) *
                 C47391) *
                C47178) *
               C47136) *
              C47365)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C47018 * C124 - C21369 * C117) * C15775 +
             (C47018 * C138 - C21369 * C127) * C15771 +
             (C21484 - C21485) * C15776 + (C21486 - C21487) * C47389) *
                C10231 +
            ((C25950 - C25951) * C15775 + (C25952 - C25953) * C15771 +
             C26440 * C15776 + C26441 * C47389) *
                C47391) *
               C3094 +
           (((C25951 - C25950) * C15775 + (C25953 - C25952) * C15771 +
             C26442 * C15776 + C26443 * C47389) *
                C10231 +
            ((C25954 - C25955) * C15775 + (C25956 - C25957) * C15771 +
             C26826 * C15776 + C26827 * C47389) *
                C47391) *
               C47178) *
              C47417 +
          ((((C21485 - C21484) * C15775 + (C21487 - C21486) * C15771 +
             (C21489 - C21488) * C15776 + (C21491 - C21490) * C47389) *
                C10231 +
            (C26442 * C15775 + C26443 * C15771 + C22312 * C15776 +
             C22313 * C47389) *
                C47391) *
               C3094 +
           ((C26440 * C15775 + C26441 * C15771 + C26830 * C15776 +
             C26831 * C47389) *
                C10231 +
            (C26828 * C15775 + C26829 * C15771 + C22330 * C15776 +
             C22331 * C47389) *
                C47391) *
               C47178) *
              C47413 +
          (((C21520 * C15775 + C21521 * C15771 + (C21493 - C21492) * C15776 +
             (C21495 - C21494) * C47389) *
                C10231 +
            (C26830 * C15775 + C26831 * C15771 + C22690 * C15776 +
             C22691 * C47389) *
                C47391) *
               C3094 +
           ((C22312 * C15775 + C22313 * C15771 + C27290 * C15776 +
             C27291 * C47389) *
                C10231 +
            (C26832 * C15775 + C26833 * C15771 + (C22326 - C22327) * C15776 +
             (C22328 - C22329) * C47389) *
                C47391) *
               C47178) *
              C47403 +
          (((C22186 * C15775 + C22187 * C15771 + (C22189 - C22188) * C15776 +
             (C22191 - C22190) * C47389) *
                C10231 +
            (C27290 * C15775 + C27291 * C15771 + (C22692 - C22693) * C15776 +
             (C22694 - C22695) * C47389) *
                C47391) *
               C3094 +
           ((C22690 * C15775 + C22691 * C15771 + (C22693 - C22692) * C15776 +
             (C22695 - C22694) * C47389) *
                C10231 +
            ((C22327 - C22326) * C15775 + (C22329 - C22328) * C15771 +
             (C47018 * C22308 - C21369 * C22307) * C15776 +
             (C47018 * C22310 - C21369 * C22309) * C47389) *
                C47391) *
               C47178) *
              C47381) *
         C47045) /
            (p * q * std::sqrt(p + q));
    d2ee[135] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C47018 * C124 - C21369 * C117) * C15775 +
             (C47018 * C138 - C21369 * C127) * C15771 +
             (C21484 - C21485) * C15776 + (C21486 - C21487) * C47389) *
                C10231 +
            ((C25950 - C25951) * C15775 + (C25952 - C25953) * C15771 +
             C26440 * C15776 + C26441 * C47389) *
                C47391) *
               C47091 * C1284 +
           (((C21485 - C21484) * C15775 + (C21487 - C21486) * C15771 +
             (C21489 - C21488) * C15776 + (C21491 - C21490) * C47389) *
                C10231 +
            (C26442 * C15775 + C26443 * C15771 + C22312 * C15776 +
             C22313 * C47389) *
                C47391) *
               C47091 * C1285 +
           ((C21520 * C15775 + C21521 * C15771 + (C21493 - C21492) * C15776 +
             (C21495 - C21494) * C47389) *
                C10231 +
            (C26830 * C15775 + C26831 * C15771 + C22690 * C15776 +
             C22691 * C47389) *
                C47391) *
               C47091 * C1286 +
           ((C22186 * C15775 + C22187 * C15771 + (C22189 - C22188) * C15776 +
             (C22191 - C22190) * C47389) *
                C10231 +
            ((C22323 - C22322) * C15775 + (C22325 - C22324) * C15771 +
             (C22692 - C22693) * C15776 + (C22694 - C22695) * C47389) *
                C47391) *
               C47091 * C47381) *
              C47325 +
          ((((C21369 * C118 - C47018 * C125) * C15775 +
             (C21369 * C128 - C47018 * C139) * C15771 +
             (C21496 - C21497) * C15776 + (C21498 - C21499) * C47389) *
                C10231 +
            ((C25958 - C25959) * C15775 + (C25960 - C25961) * C15771 +
             C26444 * C15776 + C26445 * C47389) *
                C47391) *
               C47091 * C1284 +
           (((C21497 - C21496) * C15775 + (C21499 - C21498) * C15771 +
             (C21501 - C21500) * C15776 + (C21503 - C21502) * C47389) *
                C10231 +
            (C26446 * C15775 + C26447 * C15771 + C22582 * C15776 +
             C22583 * C47389) *
                C47391) *
               C47091 * C1285 +
           ((C21522 * C15775 + C21523 * C15771 + (C21505 - C21504) * C15776 +
             (C21507 - C21506) * C47389) *
                C10231 +
            ((C21999 - C21998) * C15775 + (C22001 - C22000) * C15771 +
             (C22584 - C22585) * C15776 + (C22586 - C22587) * C47389) *
                C47391) *
               C47091 * C1286 +
           ((C22430 * C15775 + C22431 * C15771 + (C22433 - C22432) * C15776 +
             (C22435 - C22434) * C47389) *
                C10231 +
            ((C22585 - C22584) * C15775 + (C22587 - C22586) * C15771 +
             (C47018 * C6312 - C21369 * C6310) * C15776 +
             (C47018 * C6316 - C21369 * C6314) * C47389) *
                C47391) *
               C47091 * C47381) *
              C47056)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C47018 * C124 - C21369 * C117) * C15775 +
             (C47018 * C138 - C21369 * C127) * C15771 +
             (C21484 - C21485) * C15776 + (C21486 - C21487) * C47389) *
                C10231 +
            ((C25950 - C25951) * C15775 + (C25952 - C25953) * C15771 +
             (C21987 - C21986) * C15776 + (C21989 - C21988) * C47389) *
                C47391) *
               C47091 * C47339 +
           (((C21485 - C21484) * C15775 + (C21487 - C21486) * C15771 +
             (C21489 - C21488) * C15776 + (C21491 - C21490) * C47389) *
                C10231 +
            ((C21986 - C21987) * C15775 + (C21988 - C21989) * C15771 +
             C22312 * C15776 + C22313 * C47389) *
                C47391) *
               C47091 * C47136) *
              C554 +
          ((((C21369 * C118 - C47018 * C125) * C15775 +
             (C21369 * C128 - C47018 * C139) * C15771 +
             (C21496 - C21497) * C15776 + (C21498 - C21499) * C47389) *
                C10231 +
            ((C25958 - C25959) * C15775 + (C25960 - C25961) * C15771 +
             (C21995 - C21994) * C15776 + (C21997 - C21996) * C47389) *
                C47391) *
               C47091 * C47339 +
           (((C21497 - C21496) * C15775 + (C21499 - C21498) * C15771 +
             (C21501 - C21500) * C15776 + (C21503 - C21502) * C47389) *
                C10231 +
            ((C21994 - C21995) * C15775 + (C21996 - C21997) * C15771 +
             C22582 * C15776 + C22583 * C47389) *
                C47391) *
               C47091 * C47136) *
              C555 +
          ((((C47018 * C126 - C21369 * C119) * C15775 +
             (C47018 * C140 - C21369 * C129) * C15771 +
             (C21508 - C21509) * C15776 + (C21510 - C21511) * C47389) *
                C10231 +
            ((C25966 - C25967) * C15775 + (C25968 - C25969) * C15771 +
             (C22003 - C22002) * C15776 + (C22005 - C22004) * C47389) *
                C47391) *
               C47091 * C47339 +
           (((C21509 - C21508) * C15775 + (C21511 - C21510) * C15771 +
             (C21513 - C21512) * C15776 + (C21515 - C21514) * C47389) *
                C10231 +
            ((C22002 - C22003) * C15775 + (C22004 - C22005) * C15771 +
             (C22006 - C22007) * C15776 + (C22008 - C22009) * C47389) *
                C47391) *
               C47091 * C47136) *
              C556 +
          ((((C21369 * C120 - C47018 * C130) * C15775 +
             (C21369 * C131 - C47018 * C141) * C15771 +
             (C21734 - C21735) * C15776 + (C21736 - C21737) * C47389) *
                C10231 +
            ((C21369 * C420 - C47018 * C436) * C15775 +
             (C21369 * C437 - C47018 * C450) * C15771 +
             (C26108 - C26109) * C15776 + (C26110 - C26111) * C47389) *
                C47391) *
               C47091 * C47339 +
           (((C21735 - C21734) * C15775 + (C21737 - C21736) * C15771 +
             (C21739 - C21738) * C15776 + (C21741 - C21740) * C47389) *
                C10231 +
            ((C26109 - C26108) * C15775 + (C26111 - C26110) * C15771 +
             (C47018 * C1441 - C21369 * C1440) * C15776 +
             (C47018 * C1443 - C21369 * C1442) * C47389) *
                C47391) *
               C47091 * C47136) *
              C47375)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C47018 * C124 - C21369 * C117) * C15775 +
              (C47018 * C138 - C21369 * C127) * C15771 +
              (C21484 - C21485) * C15776 + (C21486 - C21487) * C47389) *
                 C10231 +
             ((C25950 - C25951) * C15775 + (C25952 - C25953) * C15771 +
              C26440 * C15776 + C26441 * C47389) *
                 C47391) *
                C1664 +
            (((C25951 - C25950) * C15775 + (C25953 - C25952) * C15771 +
              C26442 * C15776 + C26443 * C47389) *
                 C10231 +
             ((C25954 - C25955) * C15775 + (C25956 - C25957) * C15771 +
              C26826 * C15776 + C26827 * C47389) *
                 C47391) *
                C1665 +
            (((C25955 - C25954) * C15775 + (C25957 - C25956) * C15771 +
              C26828 * C15776 + C26829 * C47389) *
                 C10231 +
             ((C27670 - C27671) * C15775 + (C27672 - C27673) * C15771 +
              (C23337 - C23336) * C15776 + (C23339 - C23338) * C47389) *
                 C47391) *
                C47374) *
               C47339 +
           ((((C21485 - C21484) * C15775 + (C21487 - C21486) * C15771 +
              (C21489 - C21488) * C15776 + (C21491 - C21490) * C47389) *
                 C10231 +
             (C26442 * C15775 + C26443 * C15771 + C22312 * C15776 +
              C22313 * C47389) *
                 C47391) *
                C1664 +
            ((C26440 * C15775 + C26441 * C15771 + C26830 * C15776 +
              C26831 * C47389) *
                 C10231 +
             (C26828 * C15775 + C26829 * C15771 + C22330 * C15776 +
              C22331 * C47389) *
                 C47391) *
                C1665 +
            ((C26826 * C15775 + C26827 * C15771 + C26832 * C15776 +
              C26833 * C47389) *
                 C10231 +
             ((C23336 - C23337) * C15775 + (C23338 - C23339) * C15771 +
              (C23340 - C23341) * C15776 + (C23342 - C23343) * C47389) *
                 C47391) *
                C47374) *
               C47136) *
              C47325 +
          (((((C21369 * C118 - C47018 * C125) * C15775 +
              (C21369 * C128 - C47018 * C139) * C15771 +
              (C21496 - C21497) * C15776 + (C21498 - C21499) * C47389) *
                 C10231 +
             ((C25958 - C25959) * C15775 + (C25960 - C25961) * C15771 +
              C26444 * C15776 + C26445 * C47389) *
                 C47391) *
                C1664 +
            (((C25959 - C25958) * C15775 + (C25961 - C25960) * C15771 +
              C26446 * C15776 + C26447 * C47389) *
                 C10231 +
             ((C25962 - C25963) * C15775 + (C25964 - C25965) * C15771 +
              C27876 * C15776 + C27877 * C47389) *
                 C47391) *
                C1665 +
            (((C25963 - C25962) * C15775 + (C25965 - C25964) * C15771 +
              C27878 * C15776 + C27879 * C47389) *
                 C10231 +
             ((C21369 * C1845 - C47018 * C1851) * C15775 +
              (C21369 * C1854 - C47018 * C1863) * C15771 +
              (C27880 - C27881) * C15776 + (C27882 - C27883) * C47389) *
                 C47391) *
                C47374) *
               C47339 +
           ((((C21497 - C21496) * C15775 + (C21499 - C21498) * C15771 +
              (C21501 - C21500) * C15776 + (C21503 - C21502) * C47389) *
                 C10231 +
             (C26446 * C15775 + C26447 * C15771 + C22582 * C15776 +
              C22583 * C47389) *
                 C47391) *
                C1664 +
            ((C26444 * C15775 + C26445 * C15771 + C27158 * C15776 +
              C27159 * C47389) *
                 C10231 +
             (C27878 * C15775 + C27879 * C15771 + (C23132 - C23133) * C15776 +
              (C23134 - C23135) * C47389) *
                 C47391) *
                C1665 +
            ((C27876 * C15775 + C27877 * C15771 + (C23133 - C23132) * C15776 +
              (C23135 - C23134) * C47389) *
                 C10231 +
             ((C27881 - C27880) * C15775 + (C27883 - C27882) * C15771 +
              (C47018 * C7172 - C21369 * C7170) * C15776 +
              (C47018 * C7176 - C21369 * C7174) * C47389) *
                 C47391) *
                C47374) *
               C47136) *
              C47056)) /
            (p * q * std::sqrt(p + q));
    d2ee[136] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C47018 * C124 - C21369 * C117) * C15775 +
             (C47018 * C138 - C21369 * C127) * C15771 +
             (C21484 - C21485) * C15776 + (C21486 - C21487) * C47389) *
                C10231 +
            ((C25950 - C25951) * C15775 + (C25952 - C25953) * C15771 +
             C26440 * C15776 + C26441 * C47389) *
                C47391) *
               C47340 +
           (((C25951 - C25950) * C15775 + (C25953 - C25952) * C15771 +
             C26442 * C15776 + C26443 * C47389) *
                C10231 +
            ((C25954 - C25955) * C15775 + (C25956 - C25957) * C15771 +
             C26826 * C15776 + C26827 * C47389) *
                C47391) *
               C47178) *
              C1284 +
          ((((C21485 - C21484) * C15775 + (C21487 - C21486) * C15771 +
             (C21489 - C21488) * C15776 + (C21491 - C21490) * C47389) *
                C10231 +
            (C26442 * C15775 + C26443 * C15771 + C22312 * C15776 +
             C22313 * C47389) *
                C47391) *
               C47340 +
           ((C26440 * C15775 + C26441 * C15771 + C26830 * C15776 +
             C26831 * C47389) *
                C10231 +
            (C26828 * C15775 + C26829 * C15771 + C22330 * C15776 +
             C22331 * C47389) *
                C47391) *
               C47178) *
              C1285 +
          (((C21520 * C15775 + C21521 * C15771 + (C21493 - C21492) * C15776 +
             (C21495 - C21494) * C47389) *
                C10231 +
            (C26830 * C15775 + C26831 * C15771 + C22690 * C15776 +
             C22691 * C47389) *
                C47391) *
               C47340 +
           ((C22312 * C15775 + C22313 * C15771 + C27290 * C15776 +
             C27291 * C47389) *
                C10231 +
            (C26832 * C15775 + C26833 * C15771 + (C22326 - C22327) * C15776 +
             (C22328 - C22329) * C47389) *
                C47391) *
               C47178) *
              C1286 +
          (((C22186 * C15775 + C22187 * C15771 + (C22189 - C22188) * C15776 +
             (C22191 - C22190) * C47389) *
                C10231 +
            (C27290 * C15775 + C27291 * C15771 + (C22692 - C22693) * C15776 +
             (C22694 - C22695) * C47389) *
                C47391) *
               C47340 +
           ((C22690 * C15775 + C22691 * C15771 + (C22693 - C22692) * C15776 +
             (C22695 - C22694) * C47389) *
                C10231 +
            ((C22327 - C22326) * C15775 + (C22329 - C22328) * C15771 +
             (C47018 * C22308 - C21369 * C22307) * C15776 +
             (C47018 * C22310 - C21369 * C22309) * C47389) *
                C47391) *
               C47178) *
              C47381) *
         C47045) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C47018 * C124 - C21369 * C117) * C15775 +
              (C47018 * C138 - C21369 * C127) * C15771 +
              (C21484 - C21485) * C15776 + (C21486 - C21487) * C47389) *
                 C10231 +
             ((C25950 - C25951) * C15775 + (C25952 - C25953) * C15771 +
              C26440 * C15776 + C26441 * C47389) *
                 C47391) *
                C47340 +
            (((C25951 - C25950) * C15775 + (C25953 - C25952) * C15771 +
              C26442 * C15776 + C26443 * C47389) *
                 C10231 +
             ((C25954 - C25955) * C15775 + (C25956 - C25957) * C15771 +
              (C22315 - C22314) * C15776 + (C22317 - C22316) * C47389) *
                 C47391) *
                C47178) *
               C47339 +
           ((((C21485 - C21484) * C15775 + (C21487 - C21486) * C15771 +
              (C21489 - C21488) * C15776 + (C21491 - C21490) * C47389) *
                 C10231 +
             (C26442 * C15775 + C26443 * C15771 + C22312 * C15776 +
              C22313 * C47389) *
                 C47391) *
                C47340 +
            ((C26440 * C15775 + C26441 * C15771 + (C21991 - C21990) * C15776 +
              (C21993 - C21992) * C47389) *
                 C10231 +
             ((C22314 - C22315) * C15775 + (C22316 - C22317) * C15771 +
              C22330 * C15776 + C22331 * C47389) *
                 C47391) *
                C47178) *
               C47136) *
              C258 +
          (((((C21369 * C118 - C47018 * C125) * C15775 +
              (C21369 * C128 - C47018 * C139) * C15771 +
              (C21496 - C21497) * C15776 + (C21498 - C21499) * C47389) *
                 C10231 +
             ((C25958 - C25959) * C15775 + (C25960 - C25961) * C15771 +
              C26444 * C15776 + C26445 * C47389) *
                 C47391) *
                C47340 +
            (((C25959 - C25958) * C15775 + (C25961 - C25960) * C15771 +
              C26446 * C15776 + C26447 * C47389) *
                 C10231 +
             ((C25962 - C25963) * C15775 + (C25964 - C25965) * C15771 +
              (C23129 - C23128) * C15776 + (C23131 - C23130) * C47389) *
                 C47391) *
                C47178) *
               C47339 +
           ((((C21497 - C21496) * C15775 + (C21499 - C21498) * C15771 +
              (C21501 - C21500) * C15776 + (C21503 - C21502) * C47389) *
                 C10231 +
             (C26446 * C15775 + C26447 * C15771 + C22582 * C15776 +
              C22583 * C47389) *
                 C47391) *
                C47340 +
            ((C26444 * C15775 + C26445 * C15771 + (C21999 - C21998) * C15776 +
              (C22001 - C22000) * C47389) *
                 C10231 +
             ((C23128 - C23129) * C15775 + (C23130 - C23131) * C15771 +
              (C23132 - C23133) * C15776 + (C23134 - C23135) * C47389) *
                 C47391) *
                C47178) *
               C47136) *
              C259 +
          (((((C47018 * C126 - C21369 * C119) * C15775 +
              (C47018 * C140 - C21369 * C129) * C15771 +
              (C21508 - C21509) * C15776 + (C21510 - C21511) * C47389) *
                 C10231 +
             ((C25966 - C25967) * C15775 + (C25968 - C25969) * C15771 +
              C26448 * C15776 + C26449 * C47389) *
                 C47391) *
                C47340 +
            (((C25967 - C25966) * C15775 + (C25969 - C25968) * C15771 +
              C26450 * C15776 + C26451 * C47389) *
                 C10231 +
             ((C25970 - C25971) * C15775 + (C25972 - C25973) * C15771 +
              (C25974 - C25975) * C15776 + (C25976 - C25977) * C47389) *
                 C47391) *
                C47178) *
               C47339 +
           ((((C21509 - C21508) * C15775 + (C21511 - C21510) * C15771 +
              (C21513 - C21512) * C15776 + (C21515 - C21514) * C47389) *
                 C10231 +
             (C26450 * C15775 + C26451 * C15771 + (C22006 - C22007) * C15776 +
              (C22008 - C22009) * C47389) *
                 C47391) *
                C47340 +
            ((C26448 * C15775 + C26449 * C15771 + (C22007 - C22006) * C15776 +
              (C22009 - C22008) * C47389) *
                 C10231 +
             ((C25975 - C25974) * C15775 + (C25977 - C25976) * C15771 +
              (C47018 * C1173 - C21369 * C1158) * C15776 +
              (C47018 * C1185 - C21369 * C1176) * C47389) *
                 C47391) *
                C47178) *
               C47136) *
              C47365)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C47018 * C124 - C21369 * C117) * C15775 +
             (C47018 * C138 - C21369 * C127) * C15771 +
             (C21484 - C21485) * C15776 + (C21486 - C21487) * C47389) *
                C10231 +
            ((C25950 - C25951) * C15775 + (C25952 - C25953) * C15771 +
             C26440 * C15776 + C26441 * C47389) *
                C47391) *
               C2116 +
           (((C25951 - C25950) * C15775 + (C25953 - C25952) * C15771 +
             C26442 * C15776 + C26443 * C47389) *
                C10231 +
            ((C25954 - C25955) * C15775 + (C25956 - C25957) * C15771 +
             C26826 * C15776 + C26827 * C47389) *
                C47391) *
               C2117 +
           (((C25955 - C25954) * C15775 + (C25957 - C25956) * C15771 +
             C26828 * C15776 + C26829 * C47389) *
                C10231 +
            ((C27670 - C27671) * C15775 + (C27672 - C27673) * C15771 +
             C28148 * C15776 + C28149 * C47389) *
                C47391) *
               C2118 +
           (((C27671 - C27670) * C15775 + (C27673 - C27672) * C15771 +
             C28150 * C15776 + C28151 * C47389) *
                C10231 +
            ((C27674 - C27675) * C15775 + (C27676 - C27677) * C15771 +
             (C27678 - C27679) * C15776 + (C27680 - C27681) * C47389) *
                C47391) *
               C47387) *
              C47339 +
          ((((C21485 - C21484) * C15775 + (C21487 - C21486) * C15771 +
             (C21489 - C21488) * C15776 + (C21491 - C21490) * C47389) *
                C10231 +
            (C26442 * C15775 + C26443 * C15771 + C22312 * C15776 +
             C22313 * C47389) *
                C47391) *
               C2116 +
           ((C26440 * C15775 + C26441 * C15771 + C26830 * C15776 +
             C26831 * C47389) *
                C10231 +
            (C26828 * C15775 + C26829 * C15771 + C22330 * C15776 +
             C22331 * C47389) *
                C47391) *
               C2117 +
           ((C26826 * C15775 + C26827 * C15771 + C26832 * C15776 +
             C26833 * C47389) *
                C10231 +
            (C28150 * C15775 + C28151 * C15771 + (C23340 - C23341) * C15776 +
             (C23342 - C23343) * C47389) *
                C47391) *
               C2118 +
           ((C28148 * C15775 + C28149 * C15771 + (C23341 - C23340) * C15776 +
             (C23343 - C23342) * C47389) *
                C10231 +
            ((C27679 - C27678) * C15775 + (C27681 - C27680) * C15771 +
             (C47018 * C22978 - C21369 * C22977) * C15776 +
             (C47018 * C22980 - C21369 * C22979) * C47389) *
                C47391) *
               C47387) *
              C47136) *
         C47045) /
            (p * q * std::sqrt(p + q));
    d2ee[137] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C47018 * C124 - C21369 * C117) * C15775 +
                (C47018 * C138 - C21369 * C127) * C15771 +
                (C21484 - C21485) * C15776 + (C21486 - C21487) * C47389) *
                   C10231 +
               ((C47018 * C424 - C21369 * C414) * C15775 +
                (C47018 * C444 - C21369 * C427) * C15771 +
                (C21987 - C21986) * C15776 + (C21989 - C21988) * C47389) *
                   C47391) *
                  C47091 * C47073 * C108 +
              (((C21369 * C118 - C47018 * C125) * C15775 +
                (C21369 * C128 - C47018 * C139) * C15771 +
                (C21496 - C21497) * C15776 + (C21498 - C21499) * C47389) *
                   C10231 +
               ((C21369 * C415 - C47018 * C425) * C15775 +
                (C21369 * C428 - C47018 * C445) * C15771 +
                (C21995 - C21994) * C15776 + (C21997 - C21996) * C47389) *
                   C47391) *
                  C47091 * C47073 * C109 +
              (((C47018 * C126 - C21369 * C119) * C15775 +
                (C47018 * C140 - C21369 * C129) * C15771 +
                (C21508 - C21509) * C15776 + (C21510 - C21511) * C47389) *
                   C10231 +
               ((C47018 * C426 - C21369 * C416) * C15775 +
                (C47018 * C446 - C21369 * C429) * C15771 +
                (C22003 - C22002) * C15776 + (C22005 - C22004) * C47389) *
                   C47391) *
                  C47091 * C47073 * C110 +
              (((C21369 * C120 - C47018 * C130) * C15775 +
                (C21369 * C131 - C47018 * C141) * C15771 +
                (C21734 - C21735) * C15776 + (C21736 - C21737) * C47389) *
                   C10231 +
               ((C21369 * C420 - C47018 * C436) * C15775 +
                (C21369 * C437 - C47018 * C450) * C15771 +
                (C21369 * C815 - C47018 * C823) * C15776 +
                (C21369 * C824 - C47018 * C830) * C47389) *
                   C47391) *
                  C47091 * C47073 * C111 +
              (((C47018 * C132 - C21369 * C121) * C15775 +
                (C47018 * C142 - C21369 * C133) * C15771 +
                (C47018 * C287 - C21369 * C269) * C15776 +
                (C47018 * C299 - C21369 * C288) * C47389) *
                   C10231 +
               ((C47018 * C440 - C21369 * C422) * C15775 +
                (C47018 * C452 - C21369 * C441) * C15771 +
                (C47018 * C825 - C21369 * C816) * C15776 +
                (C47018 * C831 - C21369 * C826) * C47389) *
                   C47391) *
                  C47091 * C47073 * C112) +
         0.5 * std::pow(Pi, 2.5) *
             (((((C47018 * C124 - C21369 * C117) * C15775 +
                 (C47018 * C138 - C21369 * C127) * C15771 +
                 (C21484 - C21485) * C15776 + (C21486 - C21487) * C47389) *
                    C10231 +
                ((C47018 * C424 - C21369 * C414) * C15775 +
                 (C47018 * C444 - C21369 * C427) * C15771 +
                 (C21987 - C21986) * C15776 + (C21989 - C21988) * C47389) *
                    C47391) *
                   C47091 * C47410 +
               (((C21485 - C21484) * C15775 + (C21487 - C21486) * C15771 +
                 (C21489 - C21488) * C15776 + (C21491 - C21490) * C47389) *
                    C10231 +
                ((C21986 - C21987) * C15775 + (C21988 - C21989) * C15771 +
                 C22312 * C15776 + C22313 * C47389) *
                    C47391) *
                   C47091 * C47398 +
               ((C21520 * C15775 + C21521 * C15771 +
                 (C21493 - C21492) * C15776 + (C21495 - C21494) * C47389) *
                    C10231 +
                ((C21991 - C21990) * C15775 + (C21993 - C21992) * C15771 +
                 C22690 * C15776 + C22691 * C47389) *
                    C47391) *
                   C47091 * C47371) *
                  C258 +
              ((((C21369 * C118 - C47018 * C125) * C15775 +
                 (C21369 * C128 - C47018 * C139) * C15771 +
                 (C21496 - C21497) * C15776 + (C21498 - C21499) * C47389) *
                    C10231 +
                ((C21369 * C415 - C47018 * C425) * C15775 +
                 (C21369 * C428 - C47018 * C445) * C15771 +
                 (C21995 - C21994) * C15776 + (C21997 - C21996) * C47389) *
                    C47391) *
                   C47091 * C47410 +
               (((C21497 - C21496) * C15775 + (C21499 - C21498) * C15771 +
                 (C21501 - C21500) * C15776 + (C21503 - C21502) * C47389) *
                    C10231 +
                ((C21994 - C21995) * C15775 + (C21996 - C21997) * C15771 +
                 C22582 * C15776 + C22583 * C47389) *
                    C47391) *
                   C47091 * C47398 +
               ((C21522 * C15775 + C21523 * C15771 +
                 (C21505 - C21504) * C15776 + (C21507 - C21506) * C47389) *
                    C10231 +
                ((C21999 - C21998) * C15775 + (C22001 - C22000) * C15771 +
                 (C22584 - C22585) * C15776 + (C22586 - C22587) * C47389) *
                    C47391) *
                   C47091 * C47371) *
                  C259 +
              ((((C47018 * C126 - C21369 * C119) * C15775 +
                 (C47018 * C140 - C21369 * C129) * C15771 +
                 (C21508 - C21509) * C15776 + (C21510 - C21511) * C47389) *
                    C10231 +
                ((C47018 * C426 - C21369 * C416) * C15775 +
                 (C47018 * C446 - C21369 * C429) * C15771 +
                 (C22003 - C22002) * C15776 + (C22005 - C22004) * C47389) *
                    C47391) *
                   C47091 * C47410 +
               (((C21509 - C21508) * C15775 + (C21511 - C21510) * C15771 +
                 (C21513 - C21512) * C15776 + (C21515 - C21514) * C47389) *
                    C10231 +
                ((C22002 - C22003) * C15775 + (C22004 - C22005) * C15771 +
                 (C22006 - C22007) * C15776 + (C22008 - C22009) * C47389) *
                    C47391) *
                   C47091 * C47398 +
               ((C21524 * C15775 + C21525 * C15771 +
                 (C21517 - C21516) * C15776 + (C21519 - C21518) * C47389) *
                    C10231 +
                ((C22007 - C22006) * C15775 + (C22009 - C22008) * C15771 +
                 (C47018 * C1547 - C21369 * C1544) * C15776 +
                 (C47018 * C1553 - C21369 * C1550) * C47389) *
                    C47391) *
                   C47091 * C47371) *
                  C47365)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C47018 * C124 - C21369 * C117) * C15775 +
             (C47018 * C138 - C21369 * C127) * C15771 +
             (C21484 - C21485) * C15776 + (C21486 - C21487) * C47389) *
                C10231 +
            ((C25950 - C25951) * C15775 + (C25952 - C25953) * C15771 +
             (C21987 - C21986) * C15776 + (C21989 - C21988) * C47389) *
                C47391) *
               C47411 +
           (((C25951 - C25950) * C15775 + (C25953 - C25952) * C15771 +
             (C21986 - C21987) * C15776 + (C21988 - C21989) * C47389) *
                C10231 +
            ((C25954 - C25955) * C15775 + (C25956 - C25957) * C15771 +
             (C22315 - C22314) * C15776 + (C22317 - C22316) * C47389) *
                C47391) *
               C47400 +
           (((C25955 - C25954) * C15775 + (C25957 - C25956) * C15771 +
             (C22314 - C22315) * C15776 + (C22316 - C22317) * C47389) *
                C10231 +
            ((C47018 * C1850 - C21369 * C1844) * C15775 +
             (C47018 * C1862 - C21369 * C1853) * C15771 +
             (C23337 - C23336) * C15776 + (C23339 - C23338) * C47389) *
                C47391) *
               C47374) *
              C47073 * C258 +
          ((((C21369 * C118 - C47018 * C125) * C15775 +
             (C21369 * C128 - C47018 * C139) * C15771 +
             (C21496 - C21497) * C15776 + (C21498 - C21499) * C47389) *
                C10231 +
            ((C25958 - C25959) * C15775 + (C25960 - C25961) * C15771 +
             (C21995 - C21994) * C15776 + (C21997 - C21996) * C47389) *
                C47391) *
               C47411 +
           (((C25959 - C25958) * C15775 + (C25961 - C25960) * C15771 +
             (C21994 - C21995) * C15776 + (C21996 - C21997) * C47389) *
                C10231 +
            ((C25962 - C25963) * C15775 + (C25964 - C25965) * C15771 +
             (C23129 - C23128) * C15776 + (C23131 - C23130) * C47389) *
                C47391) *
               C47400 +
           (((C25963 - C25962) * C15775 + (C25965 - C25964) * C15771 +
             (C23128 - C23129) * C15776 + (C23130 - C23131) * C47389) *
                C10231 +
            ((C21369 * C1845 - C47018 * C1851) * C15775 +
             (C21369 * C1854 - C47018 * C1863) * C15771 +
             (C21369 * C2223 - C47018 * C2226) * C15776 +
             (C21369 * C2229 - C47018 * C2232) * C47389) *
                C47391) *
               C47374) *
              C47073 * C259 +
          ((((C47018 * C126 - C21369 * C119) * C15775 +
             (C47018 * C140 - C21369 * C129) * C15771 +
             (C21508 - C21509) * C15776 + (C21510 - C21511) * C47389) *
                C10231 +
            ((C25966 - C25967) * C15775 + (C25968 - C25969) * C15771 +
             (C22003 - C22002) * C15776 + (C22005 - C22004) * C47389) *
                C47391) *
               C47411 +
           (((C25967 - C25966) * C15775 + (C25969 - C25968) * C15771 +
             (C22002 - C22003) * C15776 + (C22004 - C22005) * C47389) *
                C10231 +
            ((C25970 - C25971) * C15775 + (C25972 - C25973) * C15771 +
             (C25974 - C25975) * C15776 + (C25976 - C25977) * C47389) *
                C47391) *
               C47400 +
           (((C25971 - C25970) * C15775 + (C25973 - C25972) * C15771 +
             (C25975 - C25974) * C15776 + (C25977 - C25976) * C47389) *
                C10231 +
            ((C47018 * C1852 - C21369 * C1846) * C15775 +
             (C47018 * C1864 - C21369 * C1855) * C15771 +
             (C47018 * C2227 - C21369 * C2224) * C15776 +
             (C47018 * C2233 - C21369 * C2230) * C47389) *
                C47391) *
               C47374) *
              C47073 * C47365)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C47018 * C124 - C21369 * C117) * C15775 +
             (C47018 * C138 - C21369 * C127) * C15771 +
             (C21484 - C21485) * C15776 + (C21486 - C21487) * C47389) *
                C10231 +
            ((C25950 - C25951) * C15775 + (C25952 - C25953) * C15771 +
             C26440 * C15776 + C26441 * C47389) *
                C47391) *
               C47091 * C942 +
           (((C21485 - C21484) * C15775 + (C21487 - C21486) * C15771 +
             (C21489 - C21488) * C15776 + (C21491 - C21490) * C47389) *
                C10231 +
            (C26442 * C15775 + C26443 * C15771 + C22312 * C15776 +
             C22313 * C47389) *
                C47391) *
               C47091 * C943 +
           ((C21520 * C15775 + C21521 * C15771 + (C21493 - C21492) * C15776 +
             (C21495 - C21494) * C47389) *
                C10231 +
            ((C21991 - C21990) * C15775 + (C21993 - C21992) * C15771 +
             C22690 * C15776 + C22691 * C47389) *
                C47391) *
               C47091 * C47371) *
              C47407 +
          ((((C21369 * C118 - C47018 * C125) * C15775 +
             (C21369 * C128 - C47018 * C139) * C15771 +
             (C21496 - C21497) * C15776 + (C21498 - C21499) * C47389) *
                C10231 +
            ((C25958 - C25959) * C15775 + (C25960 - C25961) * C15771 +
             C26444 * C15776 + C26445 * C47389) *
                C47391) *
               C47091 * C942 +
           (((C21497 - C21496) * C15775 + (C21499 - C21498) * C15771 +
             (C21501 - C21500) * C15776 + (C21503 - C21502) * C47389) *
                C10231 +
            (C26446 * C15775 + C26447 * C15771 + C22582 * C15776 +
             C22583 * C47389) *
                C47391) *
               C47091 * C943 +
           ((C21522 * C15775 + C21523 * C15771 + (C21505 - C21504) * C15776 +
             (C21507 - C21506) * C47389) *
                C10231 +
            ((C21999 - C21998) * C15775 + (C22001 - C22000) * C15771 +
             (C22584 - C22585) * C15776 + (C22586 - C22587) * C47389) *
                C47391) *
               C47091 * C47371) *
              C47394 +
          ((((C47018 * C126 - C21369 * C119) * C15775 +
             (C47018 * C140 - C21369 * C129) * C15771 +
             (C21508 - C21509) * C15776 + (C21510 - C21511) * C47389) *
                C10231 +
            ((C25966 - C25967) * C15775 + (C25968 - C25969) * C15771 +
             C26448 * C15776 + C26449 * C47389) *
                C47391) *
               C47091 * C942 +
           (((C21509 - C21508) * C15775 + (C21511 - C21510) * C15771 +
             (C21513 - C21512) * C15776 + (C21515 - C21514) * C47389) *
                C10231 +
            (C26450 * C15775 + C26451 * C15771 + (C22006 - C22007) * C15776 +
             (C22008 - C22009) * C47389) *
                C47391) *
               C47091 * C943 +
           ((C21524 * C15775 + C21525 * C15771 + (C21517 - C21516) * C15776 +
             (C21519 - C21518) * C47389) *
                C10231 +
            ((C22007 - C22006) * C15775 + (C22009 - C22008) * C15771 +
             (C47018 * C1547 - C21369 * C1544) * C15776 +
             (C47018 * C1553 - C21369 * C1550) * C47389) *
                C47391) *
               C47091 * C47371) *
              C47365)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C47018 * C124 - C21369 * C117) * C15775 +
            (C47018 * C138 - C21369 * C127) * C15771 +
            (C21484 - C21485) * C15776 + (C21486 - C21487) * C47389) *
               C10231 +
           ((C25950 - C25951) * C15775 + (C25952 - C25953) * C15771 +
            C26440 * C15776 + C26441 * C47389) *
               C47391) *
              C47091 * C1010 +
          (((C21485 - C21484) * C15775 + (C21487 - C21486) * C15771 +
            (C21489 - C21488) * C15776 + (C21491 - C21490) * C47389) *
               C10231 +
           (C26442 * C15775 + C26443 * C15771 + C22312 * C15776 +
            C22313 * C47389) *
               C47391) *
              C47091 * C1011 +
          ((C21520 * C15775 + C21521 * C15771 + (C21493 - C21492) * C15776 +
            (C21495 - C21494) * C47389) *
               C10231 +
           ((C21991 - C21990) * C15775 + (C21993 - C21992) * C15771 +
            C22690 * C15776 + C22691 * C47389) *
               C47391) *
              C47091 * C1012 +
          ((C22186 * C15775 + C22187 * C15771 + (C22189 - C22188) * C15776 +
            (C22191 - C22190) * C47389) *
               C10231 +
           ((C22323 - C22322) * C15775 + (C22325 - C22324) * C15771 +
            (C22692 - C22693) * C15776 + (C22694 - C22695) * C47389) *
               C47391) *
              C47091 * C1013 +
          ((C22196 * C15775 + C22197 * C15771 + (C22193 - C22192) * C15776 +
            (C22195 - C22194) * C47389) *
               C10231 +
           ((C22693 - C22692) * C15775 + (C22695 - C22694) * C15771 +
            (C47018 * C22686 - C21369 * C22685) * C15776 +
            (C47018 * C22688 - C21369 * C22687) * C47389) *
               C47391) *
              C47091 * C1014) *
         C47045) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C47018 * C124 - C21369 * C117) * C15775 +
             (C47018 * C138 - C21369 * C127) * C15771 +
             (C21484 - C21485) * C15776 + (C21486 - C21487) * C47389) *
                C10231 +
            ((C25950 - C25951) * C15775 + (C25952 - C25953) * C15771 +
             C26440 * C15776 + C26441 * C47389) *
                C47391) *
               C47411 +
           (((C25951 - C25950) * C15775 + (C25953 - C25952) * C15771 +
             C26442 * C15776 + C26443 * C47389) *
                C10231 +
            ((C25954 - C25955) * C15775 + (C25956 - C25957) * C15771 +
             C26826 * C15776 + C26827 * C47389) *
                C47391) *
               C47400 +
           (((C25955 - C25954) * C15775 + (C25957 - C25956) * C15771 +
             C26828 * C15776 + C26829 * C47389) *
                C10231 +
            ((C47018 * C1850 - C21369 * C1844) * C15775 +
             (C47018 * C1862 - C21369 * C1853) * C15771 +
             (C23337 - C23336) * C15776 + (C23339 - C23338) * C47389) *
                C47391) *
               C47374) *
              C942 +
          ((((C21485 - C21484) * C15775 + (C21487 - C21486) * C15771 +
             (C21489 - C21488) * C15776 + (C21491 - C21490) * C47389) *
                C10231 +
            (C26442 * C15775 + C26443 * C15771 + C22312 * C15776 +
             C22313 * C47389) *
                C47391) *
               C47411 +
           ((C26440 * C15775 + C26441 * C15771 + C26830 * C15776 +
             C26831 * C47389) *
                C10231 +
            (C26828 * C15775 + C26829 * C15771 + C22330 * C15776 +
             C22331 * C47389) *
                C47391) *
               C47400 +
           ((C26826 * C15775 + C26827 * C15771 + C26832 * C15776 +
             C26833 * C47389) *
                C10231 +
            ((C23336 - C23337) * C15775 + (C23338 - C23339) * C15771 +
             (C23340 - C23341) * C15776 + (C23342 - C23343) * C47389) *
                C47391) *
               C47374) *
              C943 +
          (((C21520 * C15775 + C21521 * C15771 + (C21493 - C21492) * C15776 +
             (C21495 - C21494) * C47389) *
                C10231 +
            (C26830 * C15775 + C26831 * C15771 + C22690 * C15776 +
             C22691 * C47389) *
                C47391) *
               C47411 +
           ((C22312 * C15775 + C22313 * C15771 + (C22323 - C22322) * C15776 +
             (C22325 - C22324) * C47389) *
                C10231 +
            (C26832 * C15775 + C26833 * C15771 + (C22326 - C22327) * C15776 +
             (C22328 - C22329) * C47389) *
                C47391) *
               C47400 +
           ((C22330 * C15775 + C22331 * C15771 + (C22327 - C22326) * C15776 +
             (C22329 - C22328) * C47389) *
                C10231 +
            ((C23341 - C23340) * C15775 + (C23343 - C23342) * C15771 +
             (C47018 * C23332 - C21369 * C23331) * C15776 +
             (C47018 * C23334 - C21369 * C23333) * C47389) *
                C47391) *
               C47374) *
              C47371) *
         C47045) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C47018 * C124 - C21369 * C117) * C15775 +
             (C47018 * C138 - C21369 * C127) * C15771 +
             (C21484 - C21485) * C15776 + (C21486 - C21487) * C47389) *
                C10231 +
            ((C25950 - C25951) * C15775 + (C25952 - C25953) * C15771 +
             C26440 * C15776 + C26441 * C47389) *
                C47391) *
               C1664 +
           (((C25951 - C25950) * C15775 + (C25953 - C25952) * C15771 +
             C26442 * C15776 + C26443 * C47389) *
                C10231 +
            ((C25954 - C25955) * C15775 + (C25956 - C25957) * C15771 +
             C26826 * C15776 + C26827 * C47389) *
                C47391) *
               C1665 +
           (((C25955 - C25954) * C15775 + (C25957 - C25956) * C15771 +
             C26828 * C15776 + C26829 * C47389) *
                C10231 +
            ((C47018 * C1850 - C21369 * C1844) * C15775 +
             (C47018 * C1862 - C21369 * C1853) * C15771 +
             (C23337 - C23336) * C15776 + (C23339 - C23338) * C47389) *
                C47391) *
               C47374) *
              C47073 * C47407 +
          ((((C21369 * C118 - C47018 * C125) * C15775 +
             (C21369 * C128 - C47018 * C139) * C15771 +
             (C21496 - C21497) * C15776 + (C21498 - C21499) * C47389) *
                C10231 +
            ((C25958 - C25959) * C15775 + (C25960 - C25961) * C15771 +
             C26444 * C15776 + C26445 * C47389) *
                C47391) *
               C1664 +
           (((C25959 - C25958) * C15775 + (C25961 - C25960) * C15771 +
             C26446 * C15776 + C26447 * C47389) *
                C10231 +
            ((C25962 - C25963) * C15775 + (C25964 - C25965) * C15771 +
             (C23129 - C23128) * C15776 + (C23131 - C23130) * C47389) *
                C47391) *
               C1665 +
           (((C25963 - C25962) * C15775 + (C25965 - C25964) * C15771 +
             (C23128 - C23129) * C15776 + (C23130 - C23131) * C47389) *
                C10231 +
            ((C21369 * C1845 - C47018 * C1851) * C15775 +
             (C21369 * C1854 - C47018 * C1863) * C15771 +
             (C21369 * C2223 - C47018 * C2226) * C15776 +
             (C21369 * C2229 - C47018 * C2232) * C47389) *
                C47391) *
               C47374) *
              C47073 * C47394 +
          ((((C47018 * C126 - C21369 * C119) * C15775 +
             (C47018 * C140 - C21369 * C129) * C15771 +
             (C21508 - C21509) * C15776 + (C21510 - C21511) * C47389) *
                C10231 +
            ((C25966 - C25967) * C15775 + (C25968 - C25969) * C15771 +
             C26448 * C15776 + C26449 * C47389) *
                C47391) *
               C1664 +
           (((C25967 - C25966) * C15775 + (C25969 - C25968) * C15771 +
             C26450 * C15776 + C26451 * C47389) *
                C10231 +
            ((C25970 - C25971) * C15775 + (C25972 - C25973) * C15771 +
             (C25974 - C25975) * C15776 + (C25976 - C25977) * C47389) *
                C47391) *
               C1665 +
           (((C25971 - C25970) * C15775 + (C25973 - C25972) * C15771 +
             (C25975 - C25974) * C15776 + (C25977 - C25976) * C47389) *
                C10231 +
            ((C47018 * C1852 - C21369 * C1846) * C15775 +
             (C47018 * C1864 - C21369 * C1855) * C15771 +
             (C47018 * C2227 - C21369 * C2224) * C15776 +
             (C47018 * C2233 - C21369 * C2230) * C47389) *
                C47391) *
               C47374) *
              C47073 * C47365)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C47018 * C124 - C21369 * C117) * C15775 +
             (C47018 * C138 - C21369 * C127) * C15771 +
             (C21484 - C21485) * C15776 + (C21486 - C21487) * C47389) *
                C10231 +
            ((C25950 - C25951) * C15775 + (C25952 - C25953) * C15771 +
             C26440 * C15776 + C26441 * C47389) *
                C47391) *
               C1664 +
           (((C25951 - C25950) * C15775 + (C25953 - C25952) * C15771 +
             C26442 * C15776 + C26443 * C47389) *
                C10231 +
            ((C25954 - C25955) * C15775 + (C25956 - C25957) * C15771 +
             C26826 * C15776 + C26827 * C47389) *
                C47391) *
               C1665 +
           (((C25955 - C25954) * C15775 + (C25957 - C25956) * C15771 +
             C26828 * C15776 + C26829 * C47389) *
                C10231 +
            ((C47018 * C1850 - C21369 * C1844) * C15775 +
             (C47018 * C1862 - C21369 * C1853) * C15771 +
             (C23337 - C23336) * C15776 + (C23339 - C23338) * C47389) *
                C47391) *
               C47374) *
              C47410 +
          ((((C21485 - C21484) * C15775 + (C21487 - C21486) * C15771 +
             (C21489 - C21488) * C15776 + (C21491 - C21490) * C47389) *
                C10231 +
            (C26442 * C15775 + C26443 * C15771 + C22312 * C15776 +
             C22313 * C47389) *
                C47391) *
               C1664 +
           ((C26440 * C15775 + C26441 * C15771 + C26830 * C15776 +
             C26831 * C47389) *
                C10231 +
            (C26828 * C15775 + C26829 * C15771 + C22330 * C15776 +
             C22331 * C47389) *
                C47391) *
               C1665 +
           ((C26826 * C15775 + C26827 * C15771 + C26832 * C15776 +
             C26833 * C47389) *
                C10231 +
            ((C23336 - C23337) * C15775 + (C23338 - C23339) * C15771 +
             (C23340 - C23341) * C15776 + (C23342 - C23343) * C47389) *
                C47391) *
               C47374) *
              C47398 +
          (((C21520 * C15775 + C21521 * C15771 + (C21493 - C21492) * C15776 +
             (C21495 - C21494) * C47389) *
                C10231 +
            (C26830 * C15775 + C26831 * C15771 + C22690 * C15776 +
             C22691 * C47389) *
                C47391) *
               C1664 +
           ((C22312 * C15775 + C22313 * C15771 + C27290 * C15776 +
             C27291 * C47389) *
                C10231 +
            (C26832 * C15775 + C26833 * C15771 + (C22326 - C22327) * C15776 +
             (C22328 - C22329) * C47389) *
                C47391) *
               C1665 +
           ((C22330 * C15775 + C22331 * C15771 + (C22327 - C22326) * C15776 +
             (C22329 - C22328) * C47389) *
                C10231 +
            ((C23341 - C23340) * C15775 + (C23343 - C23342) * C15771 +
             (C47018 * C23332 - C21369 * C23331) * C15776 +
             (C47018 * C23334 - C21369 * C23333) * C47389) *
                C47391) *
               C47374) *
              C47371) *
         C47045) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C47018 * C124 - C21369 * C117) * C15775 +
            (C47018 * C138 - C21369 * C127) * C15771 +
            (C21484 - C21485) * C15776 + (C21486 - C21487) * C47389) *
               C10231 +
           ((C25950 - C25951) * C15775 + (C25952 - C25953) * C15771 +
            C26440 * C15776 + C26441 * C47389) *
               C47391) *
              C1839 +
          (((C25951 - C25950) * C15775 + (C25953 - C25952) * C15771 +
            C26442 * C15776 + C26443 * C47389) *
               C10231 +
           ((C25954 - C25955) * C15775 + (C25956 - C25957) * C15771 +
            C26826 * C15776 + C26827 * C47389) *
               C47391) *
              C1840 +
          (((C25955 - C25954) * C15775 + (C25957 - C25956) * C15771 +
            C26828 * C15776 + C26829 * C47389) *
               C10231 +
           ((C27670 - C27671) * C15775 + (C27672 - C27673) * C15771 +
            (C23337 - C23336) * C15776 + (C23339 - C23338) * C47389) *
               C47391) *
              C1841 +
          (((C27671 - C27670) * C15775 + (C27673 - C27672) * C15771 +
            (C23336 - C23337) * C15776 + (C23338 - C23339) * C47389) *
               C10231 +
           ((C27674 - C27675) * C15775 + (C27676 - C27677) * C15771 +
            (C27678 - C27679) * C15776 + (C27680 - C27681) * C47389) *
               C47391) *
              C1842 +
          (((C27675 - C27674) * C15775 + (C27677 - C27676) * C15771 +
            (C27679 - C27678) * C15776 + (C27681 - C27680) * C47389) *
               C10231 +
           ((C47018 * C12239 - C21369 * C12237) * C15775 +
            (C47018 * C12243 - C21369 * C12241) * C15771 +
            (C47018 * C27666 - C21369 * C27665) * C15776 +
            (C47018 * C27668 - C21369 * C27667) * C47389) *
               C47391) *
              C1843) *
         C47073 * C47045) /
            (p * q * std::sqrt(p + q));
    d2ee[138] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C47018 * C124 - C21369 * C117) * C15775 +
              (C47018 * C138 - C21369 * C127) * C15771 +
              (C21484 - C21485) * C15776 + (C21486 - C21487) * C47389) *
                 C10231 +
             ((C25950 - C25951) * C15775 + (C25952 - C25953) * C15771 +
              C26440 * C15776 + C26441 * C47389) *
                 C47391) *
                C47340 +
            (((C25951 - C25950) * C15775 + (C25953 - C25952) * C15771 +
              C26442 * C15776 + C26443 * C47389) *
                 C10231 +
             ((C25954 - C25955) * C15775 + (C25956 - C25957) * C15771 +
              C26826 * C15776 + C26827 * C47389) *
                 C47391) *
                C47178) *
               C942 +
           ((((C21485 - C21484) * C15775 + (C21487 - C21486) * C15771 +
              (C21489 - C21488) * C15776 + (C21491 - C21490) * C47389) *
                 C10231 +
             (C26442 * C15775 + C26443 * C15771 + C22312 * C15776 +
              C22313 * C47389) *
                 C47391) *
                C47340 +
            ((C26440 * C15775 + C26441 * C15771 + C26830 * C15776 +
              C26831 * C47389) *
                 C10231 +
             (C26828 * C15775 + C26829 * C15771 + C22330 * C15776 +
              C22331 * C47389) *
                 C47391) *
                C47178) *
               C943 +
           (((C21520 * C15775 + C21521 * C15771 + (C21493 - C21492) * C15776 +
              (C21495 - C21494) * C47389) *
                 C10231 +
             (C26830 * C15775 + C26831 * C15771 + C22690 * C15776 +
              C22691 * C47389) *
                 C47391) *
                C47340 +
            ((C22312 * C15775 + C22313 * C15771 + (C22323 - C22322) * C15776 +
              (C22325 - C22324) * C47389) *
                 C10231 +
             (C26832 * C15775 + C26833 * C15771 + (C22326 - C22327) * C15776 +
              (C22328 - C22329) * C47389) *
                 C47391) *
                C47178) *
               C47371) *
              C47325 +
          (((((C21369 * C118 - C47018 * C125) * C15775 +
              (C21369 * C128 - C47018 * C139) * C15771 +
              (C21496 - C21497) * C15776 + (C21498 - C21499) * C47389) *
                 C10231 +
             ((C25958 - C25959) * C15775 + (C25960 - C25961) * C15771 +
              C26444 * C15776 + C26445 * C47389) *
                 C47391) *
                C47340 +
            (((C25959 - C25958) * C15775 + (C25961 - C25960) * C15771 +
              C26446 * C15776 + C26447 * C47389) *
                 C10231 +
             ((C25962 - C25963) * C15775 + (C25964 - C25965) * C15771 +
              (C23129 - C23128) * C15776 + (C23131 - C23130) * C47389) *
                 C47391) *
                C47178) *
               C942 +
           ((((C21497 - C21496) * C15775 + (C21499 - C21498) * C15771 +
              (C21501 - C21500) * C15776 + (C21503 - C21502) * C47389) *
                 C10231 +
             (C26446 * C15775 + C26447 * C15771 + C22582 * C15776 +
              C22583 * C47389) *
                 C47391) *
                C47340 +
            ((C26444 * C15775 + C26445 * C15771 + C27158 * C15776 +
              C27159 * C47389) *
                 C10231 +
             ((C23128 - C23129) * C15775 + (C23130 - C23131) * C15771 +
              (C23132 - C23133) * C15776 + (C23134 - C23135) * C47389) *
                 C47391) *
                C47178) *
               C943 +
           (((C21522 * C15775 + C21523 * C15771 + (C21505 - C21504) * C15776 +
              (C21507 - C21506) * C47389) *
                 C10231 +
             (C27158 * C15775 + C27159 * C15771 + (C22584 - C22585) * C15776 +
              (C22586 - C22587) * C47389) *
                 C47391) *
                C47340 +
            ((C22582 * C15775 + C22583 * C15771 + (C22585 - C22584) * C15776 +
              (C22587 - C22586) * C47389) *
                 C10231 +
             ((C23133 - C23132) * C15775 + (C23135 - C23134) * C15771 +
              (C47018 * C5810 - C21369 * C5808) * C15776 +
              (C47018 * C5814 - C21369 * C5812) * C47389) *
                 C47391) *
                C47178) *
               C47371) *
              C47056)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C47018 * C124 - C21369 * C117) * C15775 +
             (C47018 * C138 - C21369 * C127) * C15771 +
             (C21484 - C21485) * C15776 + (C21486 - C21487) * C47389) *
                C10231 +
            ((C25950 - C25951) * C15775 + (C25952 - C25953) * C15771 +
             (C21987 - C21986) * C15776 + (C21989 - C21988) * C47389) *
                C47391) *
               C47340 +
           (((C25951 - C25950) * C15775 + (C25953 - C25952) * C15771 +
             (C21986 - C21987) * C15776 + (C21988 - C21989) * C47389) *
                C10231 +
            ((C25954 - C25955) * C15775 + (C25956 - C25957) * C15771 +
             (C22315 - C22314) * C15776 + (C22317 - C22316) * C47389) *
                C47391) *
               C47178) *
              C47073 * C554 +
          ((((C21369 * C118 - C47018 * C125) * C15775 +
             (C21369 * C128 - C47018 * C139) * C15771 +
             (C21496 - C21497) * C15776 + (C21498 - C21499) * C47389) *
                C10231 +
            ((C25958 - C25959) * C15775 + (C25960 - C25961) * C15771 +
             (C21995 - C21994) * C15776 + (C21997 - C21996) * C47389) *
                C47391) *
               C47340 +
           (((C25959 - C25958) * C15775 + (C25961 - C25960) * C15771 +
             (C21994 - C21995) * C15776 + (C21996 - C21997) * C47389) *
                C10231 +
            ((C25962 - C25963) * C15775 + (C25964 - C25965) * C15771 +
             (C23129 - C23128) * C15776 + (C23131 - C23130) * C47389) *
                C47391) *
               C47178) *
              C47073 * C555 +
          ((((C47018 * C126 - C21369 * C119) * C15775 +
             (C47018 * C140 - C21369 * C129) * C15771 +
             (C21508 - C21509) * C15776 + (C21510 - C21511) * C47389) *
                C10231 +
            ((C25966 - C25967) * C15775 + (C25968 - C25969) * C15771 +
             (C22003 - C22002) * C15776 + (C22005 - C22004) * C47389) *
                C47391) *
               C47340 +
           (((C25967 - C25966) * C15775 + (C25969 - C25968) * C15771 +
             (C22002 - C22003) * C15776 + (C22004 - C22005) * C47389) *
                C10231 +
            ((C25970 - C25971) * C15775 + (C25972 - C25973) * C15771 +
             (C25974 - C25975) * C15776 + (C25976 - C25977) * C47389) *
                C47391) *
               C47178) *
              C47073 * C556 +
          ((((C21369 * C120 - C47018 * C130) * C15775 +
             (C21369 * C131 - C47018 * C141) * C15771 +
             (C21734 - C21735) * C15776 + (C21736 - C21737) * C47389) *
                C10231 +
            ((C26242 - C26243) * C15775 + (C26244 - C26245) * C15771 +
             (C26108 - C26109) * C15776 + (C26110 - C26111) * C47389) *
                C47391) *
               C47340 +
           (((C26243 - C26242) * C15775 + (C26245 - C26244) * C15771 +
             (C26109 - C26108) * C15776 + (C26111 - C26110) * C47389) *
                C10231 +
            ((C47018 * C438 - C21369 * C421) * C15775 +
             (C47018 * C451 - C21369 * C439) * C15771 +
             (C47018 * C2015 - C21369 * C2014) * C15776 +
             (C47018 * C2017 - C21369 * C2016) * C47389) *
                C47391) *
               C47178) *
              C47073 * C47375)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C47018 * C124 - C21369 * C117) * C15775 +
             (C47018 * C138 - C21369 * C127) * C15771 +
             (C21484 - C21485) * C15776 + (C21486 - C21487) * C47389) *
                C10231 +
            ((C25950 - C25951) * C15775 + (C25952 - C25953) * C15771 +
             C26440 * C15776 + C26441 * C47389) *
                C47391) *
               C2116 +
           (((C25951 - C25950) * C15775 + (C25953 - C25952) * C15771 +
             C26442 * C15776 + C26443 * C47389) *
                C10231 +
            ((C25954 - C25955) * C15775 + (C25956 - C25957) * C15771 +
             C26826 * C15776 + C26827 * C47389) *
                C47391) *
               C2117 +
           (((C25955 - C25954) * C15775 + (C25957 - C25956) * C15771 +
             C26828 * C15776 + C26829 * C47389) *
                C10231 +
            ((C27670 - C27671) * C15775 + (C27672 - C27673) * C15771 +
             (C23337 - C23336) * C15776 + (C23339 - C23338) * C47389) *
                C47391) *
               C2118 +
           (((C27671 - C27670) * C15775 + (C27673 - C27672) * C15771 +
             (C23336 - C23337) * C15776 + (C23338 - C23339) * C47389) *
                C10231 +
            ((C27674 - C27675) * C15775 + (C27676 - C27677) * C15771 +
             (C27678 - C27679) * C15776 + (C27680 - C27681) * C47389) *
                C47391) *
               C47387) *
              C47073 * C47325 +
          ((((C21369 * C118 - C47018 * C125) * C15775 +
             (C21369 * C128 - C47018 * C139) * C15771 +
             (C21496 - C21497) * C15776 + (C21498 - C21499) * C47389) *
                C10231 +
            ((C25958 - C25959) * C15775 + (C25960 - C25961) * C15771 +
             C26444 * C15776 + C26445 * C47389) *
                C47391) *
               C2116 +
           (((C25959 - C25958) * C15775 + (C25961 - C25960) * C15771 +
             C26446 * C15776 + C26447 * C47389) *
                C10231 +
            ((C25962 - C25963) * C15775 + (C25964 - C25965) * C15771 +
             C27876 * C15776 + C27877 * C47389) *
                C47391) *
               C2117 +
           (((C25963 - C25962) * C15775 + (C25965 - C25964) * C15771 +
             C27878 * C15776 + C27879 * C47389) *
                C10231 +
            ((C28014 - C28015) * C15775 + (C28016 - C28017) * C15771 +
             (C27880 - C27881) * C15776 + (C27882 - C27883) * C47389) *
                C47391) *
               C2118 +
           (((C28015 - C28014) * C15775 + (C28017 - C28016) * C15771 +
             (C27881 - C27880) * C15776 + (C27883 - C27882) * C47389) *
                C10231 +
            ((C47018 * C1857 - C21369 * C1848) * C15775 +
             (C47018 * C1866 - C21369 * C1860) * C15771 +
             (C47018 * C6702 - C21369 * C6700) * C15776 +
             (C47018 * C6706 - C21369 * C6704) * C47389) *
                C47391) *
               C47387) *
              C47073 * C47056)) /
            (p * q * std::sqrt(p + q));
    d2ee[139] += (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  (((((C47018 * C124 - C21369 * C117) * C15775 +
                      (C47018 * C138 - C21369 * C127) * C15771 +
                      (C21484 - C21485) * C15776 + (C21486 - C21487) * C47389) *
                         C10231 +
                     ((C47018 * C424 - C21369 * C414) * C15775 +
                      (C47018 * C444 - C21369 * C427) * C15771 +
                      (C21987 - C21986) * C15776 + (C21989 - C21988) * C47389) *
                         C47391) *
                        C47091 * C47410 +
                    (((C21485 - C21484) * C15775 + (C21487 - C21486) * C15771 +
                      (C21489 - C21488) * C15776 + (C21491 - C21490) * C47389) *
                         C10231 +
                     ((C21986 - C21987) * C15775 + (C21988 - C21989) * C15771 +
                      C22312 * C15776 + C22313 * C47389) *
                         C47391) *
                        C47091 * C47398 +
                    ((C21520 * C15775 + C21521 * C15771 +
                      (C21493 - C21492) * C15776 + (C21495 - C21494) * C47389) *
                         C10231 +
                     ((C21991 - C21990) * C15775 + (C21993 - C21992) * C15771 +
                      C22690 * C15776 + C22691 * C47389) *
                         C47391) *
                        C47091 * C47371) *
                       C258 +
                   ((((C21369 * C118 - C47018 * C125) * C15775 +
                      (C21369 * C128 - C47018 * C139) * C15771 +
                      (C21496 - C21497) * C15776 + (C21498 - C21499) * C47389) *
                         C10231 +
                     ((C21369 * C415 - C47018 * C425) * C15775 +
                      (C21369 * C428 - C47018 * C445) * C15771 +
                      (C21995 - C21994) * C15776 + (C21997 - C21996) * C47389) *
                         C47391) *
                        C47091 * C47410 +
                    (((C21497 - C21496) * C15775 + (C21499 - C21498) * C15771 +
                      (C21501 - C21500) * C15776 + (C21503 - C21502) * C47389) *
                         C10231 +
                     ((C21994 - C21995) * C15775 + (C21996 - C21997) * C15771 +
                      C22582 * C15776 + C22583 * C47389) *
                         C47391) *
                        C47091 * C47398 +
                    ((C21522 * C15775 + C21523 * C15771 +
                      (C21505 - C21504) * C15776 + (C21507 - C21506) * C47389) *
                         C10231 +
                     ((C21999 - C21998) * C15775 + (C22001 - C22000) * C15771 +
                      (C22584 - C22585) * C15776 + (C22586 - C22587) * C47389) *
                         C47391) *
                        C47091 * C47371) *
                       C259 +
                   ((((C47018 * C126 - C21369 * C119) * C15775 +
                      (C47018 * C140 - C21369 * C129) * C15771 +
                      (C21508 - C21509) * C15776 + (C21510 - C21511) * C47389) *
                         C10231 +
                     ((C47018 * C426 - C21369 * C416) * C15775 +
                      (C47018 * C446 - C21369 * C429) * C15771 +
                      (C22003 - C22002) * C15776 + (C22005 - C22004) * C47389) *
                         C47391) *
                        C47091 * C47410 +
                    (((C21509 - C21508) * C15775 + (C21511 - C21510) * C15771 +
                      (C21513 - C21512) * C15776 + (C21515 - C21514) * C47389) *
                         C10231 +
                     ((C22002 - C22003) * C15775 + (C22004 - C22005) * C15771 +
                      (C22006 - C22007) * C15776 + (C22008 - C22009) * C47389) *
                         C47391) *
                        C47091 * C47398 +
                    ((C21524 * C15775 + C21525 * C15771 +
                      (C21517 - C21516) * C15776 + (C21519 - C21518) * C47389) *
                         C10231 +
                     ((C22007 - C22006) * C15775 + (C22009 - C22008) * C15771 +
                      (C47018 * C1547 - C21369 * C1544) * C15776 +
                      (C47018 * C1553 - C21369 * C1550) * C47389) *
                         C47391) *
                        C47091 * C47371) *
                       C47365)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  ((((C47018 * C124 - C21369 * C117) * C15775 +
                     (C47018 * C138 - C21369 * C127) * C15771 +
                     (C21484 - C21485) * C15776 + (C21486 - C21487) * C47389) *
                        C10231 +
                    ((C47018 * C424 - C21369 * C414) * C15775 +
                     (C47018 * C444 - C21369 * C427) * C15771 +
                     (C21987 - C21986) * C15776 + (C21989 - C21988) * C47389) *
                        C47391) *
                       C47091 * C47073 * C108 +
                   (((C21369 * C118 - C47018 * C125) * C15775 +
                     (C21369 * C128 - C47018 * C139) * C15771 +
                     (C21496 - C21497) * C15776 + (C21498 - C21499) * C47389) *
                        C10231 +
                    ((C21369 * C415 - C47018 * C425) * C15775 +
                     (C21369 * C428 - C47018 * C445) * C15771 +
                     (C21995 - C21994) * C15776 + (C21997 - C21996) * C47389) *
                        C47391) *
                       C47091 * C47073 * C109 +
                   (((C47018 * C126 - C21369 * C119) * C15775 +
                     (C47018 * C140 - C21369 * C129) * C15771 +
                     (C21508 - C21509) * C15776 + (C21510 - C21511) * C47389) *
                        C10231 +
                    ((C47018 * C426 - C21369 * C416) * C15775 +
                     (C47018 * C446 - C21369 * C429) * C15771 +
                     (C22003 - C22002) * C15776 + (C22005 - C22004) * C47389) *
                        C47391) *
                       C47091 * C47073 * C110 +
                   (((C21369 * C120 - C47018 * C130) * C15775 +
                     (C21369 * C131 - C47018 * C141) * C15771 +
                     (C21734 - C21735) * C15776 + (C21736 - C21737) * C47389) *
                        C10231 +
                    ((C21369 * C420 - C47018 * C436) * C15775 +
                     (C21369 * C437 - C47018 * C450) * C15771 +
                     (C21369 * C815 - C47018 * C823) * C15776 +
                     (C21369 * C824 - C47018 * C830) * C47389) *
                        C47391) *
                       C47091 * C47073 * C111 +
                   (((C47018 * C132 - C21369 * C121) * C15775 +
                     (C47018 * C142 - C21369 * C133) * C15771 +
                     (C47018 * C287 - C21369 * C269) * C15776 +
                     (C47018 * C299 - C21369 * C288) * C47389) *
                        C10231 +
                    ((C47018 * C440 - C21369 * C422) * C15775 +
                     (C47018 * C452 - C21369 * C441) * C15771 +
                     (C47018 * C825 - C21369 * C816) * C15776 +
                     (C47018 * C831 - C21369 * C826) * C47389) *
                        C47391) *
                       C47091 * C47073 * C112)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  (((((C47018 * C124 - C21369 * C117) * C15775 +
                      (C47018 * C138 - C21369 * C127) * C15771 +
                      (C21484 - C21485) * C15776 + (C21486 - C21487) * C47389) *
                         C10231 +
                     ((C25950 - C25951) * C15775 + (C25952 - C25953) * C15771 +
                      C26440 * C15776 + C26441 * C47389) *
                         C47391) *
                        C47091 * C942 +
                    (((C21485 - C21484) * C15775 + (C21487 - C21486) * C15771 +
                      (C21489 - C21488) * C15776 + (C21491 - C21490) * C47389) *
                         C10231 +
                     (C26442 * C15775 + C26443 * C15771 + C22312 * C15776 +
                      C22313 * C47389) *
                         C47391) *
                        C47091 * C943 +
                    ((C21520 * C15775 + C21521 * C15771 +
                      (C21493 - C21492) * C15776 + (C21495 - C21494) * C47389) *
                         C10231 +
                     ((C21991 - C21990) * C15775 + (C21993 - C21992) * C15771 +
                      C22690 * C15776 + C22691 * C47389) *
                         C47391) *
                        C47091 * C47371) *
                       C47407 +
                   ((((C21369 * C118 - C47018 * C125) * C15775 +
                      (C21369 * C128 - C47018 * C139) * C15771 +
                      (C21496 - C21497) * C15776 + (C21498 - C21499) * C47389) *
                         C10231 +
                     ((C25958 - C25959) * C15775 + (C25960 - C25961) * C15771 +
                      C26444 * C15776 + C26445 * C47389) *
                         C47391) *
                        C47091 * C942 +
                    (((C21497 - C21496) * C15775 + (C21499 - C21498) * C15771 +
                      (C21501 - C21500) * C15776 + (C21503 - C21502) * C47389) *
                         C10231 +
                     (C26446 * C15775 + C26447 * C15771 + C22582 * C15776 +
                      C22583 * C47389) *
                         C47391) *
                        C47091 * C943 +
                    ((C21522 * C15775 + C21523 * C15771 +
                      (C21505 - C21504) * C15776 + (C21507 - C21506) * C47389) *
                         C10231 +
                     ((C21999 - C21998) * C15775 + (C22001 - C22000) * C15771 +
                      (C22584 - C22585) * C15776 + (C22586 - C22587) * C47389) *
                         C47391) *
                        C47091 * C47371) *
                       C47394 +
                   ((((C47018 * C126 - C21369 * C119) * C15775 +
                      (C47018 * C140 - C21369 * C129) * C15771 +
                      (C21508 - C21509) * C15776 + (C21510 - C21511) * C47389) *
                         C10231 +
                     ((C25966 - C25967) * C15775 + (C25968 - C25969) * C15771 +
                      C26448 * C15776 + C26449 * C47389) *
                         C47391) *
                        C47091 * C942 +
                    (((C21509 - C21508) * C15775 + (C21511 - C21510) * C15771 +
                      (C21513 - C21512) * C15776 + (C21515 - C21514) * C47389) *
                         C10231 +
                     (C26450 * C15775 + C26451 * C15771 +
                      (C22006 - C22007) * C15776 + (C22008 - C22009) * C47389) *
                         C47391) *
                        C47091 * C943 +
                    ((C21524 * C15775 + C21525 * C15771 +
                      (C21517 - C21516) * C15776 + (C21519 - C21518) * C47389) *
                         C10231 +
                     ((C22007 - C22006) * C15775 + (C22009 - C22008) * C15771 +
                      (C47018 * C1547 - C21369 * C1544) * C15776 +
                      (C47018 * C1553 - C21369 * C1550) * C47389) *
                         C47391) *
                        C47091 * C47371) *
                       C47365)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  ((((C47018 * C124 - C21369 * C117) * C15775 +
                     (C47018 * C138 - C21369 * C127) * C15771 +
                     (C21484 - C21485) * C15776 + (C21486 - C21487) * C47389) *
                        C10231 +
                    ((C25950 - C25951) * C15775 + (C25952 - C25953) * C15771 +
                     C26440 * C15776 + C26441 * C47389) *
                        C47391) *
                       C47091 * C1010 +
                   (((C21485 - C21484) * C15775 + (C21487 - C21486) * C15771 +
                     (C21489 - C21488) * C15776 + (C21491 - C21490) * C47389) *
                        C10231 +
                    (C26442 * C15775 + C26443 * C15771 + C22312 * C15776 +
                     C22313 * C47389) *
                        C47391) *
                       C47091 * C1011 +
                   ((C21520 * C15775 + C21521 * C15771 +
                     (C21493 - C21492) * C15776 + (C21495 - C21494) * C47389) *
                        C10231 +
                    ((C21991 - C21990) * C15775 + (C21993 - C21992) * C15771 +
                     C22690 * C15776 + C22691 * C47389) *
                        C47391) *
                       C47091 * C1012 +
                   ((C22186 * C15775 + C22187 * C15771 +
                     (C22189 - C22188) * C15776 + (C22191 - C22190) * C47389) *
                        C10231 +
                    ((C22323 - C22322) * C15775 + (C22325 - C22324) * C15771 +
                     (C22692 - C22693) * C15776 + (C22694 - C22695) * C47389) *
                        C47391) *
                       C47091 * C1013 +
                   ((C22196 * C15775 + C22197 * C15771 +
                     (C22193 - C22192) * C15776 + (C22195 - C22194) * C47389) *
                        C10231 +
                    ((C22693 - C22692) * C15775 + (C22695 - C22694) * C15771 +
                     (C47018 * C22686 - C21369 * C22685) * C15776 +
                     (C47018 * C22688 - C21369 * C22687) * C47389) *
                        C47391) *
                       C47091 * C1014) *
                  C47045) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((((C47018 * C124 - C21369 * C117) * C15775 +
                      (C47018 * C138 - C21369 * C127) * C15771 +
                      (C21484 - C21485) * C15776 + (C21486 - C21487) * C47389) *
                         C10231 +
                     ((C25950 - C25951) * C15775 + (C25952 - C25953) * C15771 +
                      C26440 * C15776 + C26441 * C47389) *
                         C47391) *
                        C1664 +
                    (((C25951 - C25950) * C15775 + (C25953 - C25952) * C15771 +
                      C26442 * C15776 + C26443 * C47389) *
                         C10231 +
                     ((C25954 - C25955) * C15775 + (C25956 - C25957) * C15771 +
                      C26826 * C15776 + C26827 * C47389) *
                         C47391) *
                        C1665 +
                    (((C25955 - C25954) * C15775 + (C25957 - C25956) * C15771 +
                      C26828 * C15776 + C26829 * C47389) *
                         C10231 +
                     ((C47018 * C1850 - C21369 * C1844) * C15775 +
                      (C47018 * C1862 - C21369 * C1853) * C15771 +
                      (C23337 - C23336) * C15776 + (C23339 - C23338) * C47389) *
                         C47391) *
                        C47374) *
                       C47073 * C47407 +
                   ((((C21369 * C118 - C47018 * C125) * C15775 +
                      (C21369 * C128 - C47018 * C139) * C15771 +
                      (C21496 - C21497) * C15776 + (C21498 - C21499) * C47389) *
                         C10231 +
                     ((C25958 - C25959) * C15775 + (C25960 - C25961) * C15771 +
                      C26444 * C15776 + C26445 * C47389) *
                         C47391) *
                        C1664 +
                    (((C25959 - C25958) * C15775 + (C25961 - C25960) * C15771 +
                      C26446 * C15776 + C26447 * C47389) *
                         C10231 +
                     ((C25962 - C25963) * C15775 + (C25964 - C25965) * C15771 +
                      (C23129 - C23128) * C15776 + (C23131 - C23130) * C47389) *
                         C47391) *
                        C1665 +
                    (((C25963 - C25962) * C15775 + (C25965 - C25964) * C15771 +
                      (C23128 - C23129) * C15776 + (C23130 - C23131) * C47389) *
                         C10231 +
                     ((C21369 * C1845 - C47018 * C1851) * C15775 +
                      (C21369 * C1854 - C47018 * C1863) * C15771 +
                      (C21369 * C2223 - C47018 * C2226) * C15776 +
                      (C21369 * C2229 - C47018 * C2232) * C47389) *
                         C47391) *
                        C47374) *
                       C47073 * C47394 +
                   ((((C47018 * C126 - C21369 * C119) * C15775 +
                      (C47018 * C140 - C21369 * C129) * C15771 +
                      (C21508 - C21509) * C15776 + (C21510 - C21511) * C47389) *
                         C10231 +
                     ((C25966 - C25967) * C15775 + (C25968 - C25969) * C15771 +
                      C26448 * C15776 + C26449 * C47389) *
                         C47391) *
                        C1664 +
                    (((C25967 - C25966) * C15775 + (C25969 - C25968) * C15771 +
                      C26450 * C15776 + C26451 * C47389) *
                         C10231 +
                     ((C25970 - C25971) * C15775 + (C25972 - C25973) * C15771 +
                      (C25974 - C25975) * C15776 + (C25976 - C25977) * C47389) *
                         C47391) *
                        C1665 +
                    (((C25971 - C25970) * C15775 + (C25973 - C25972) * C15771 +
                      (C25975 - C25974) * C15776 + (C25977 - C25976) * C47389) *
                         C10231 +
                     ((C47018 * C1852 - C21369 * C1846) * C15775 +
                      (C47018 * C1864 - C21369 * C1855) * C15771 +
                      (C47018 * C2227 - C21369 * C2224) * C15776 +
                      (C47018 * C2233 - C21369 * C2230) * C47389) *
                         C47391) *
                        C47374) *
                       C47073 * C47365)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((((C47018 * C124 - C21369 * C117) * C15775 +
                      (C47018 * C138 - C21369 * C127) * C15771 +
                      (C21484 - C21485) * C15776 + (C21486 - C21487) * C47389) *
                         C10231 +
                     ((C25950 - C25951) * C15775 + (C25952 - C25953) * C15771 +
                      C26440 * C15776 + C26441 * C47389) *
                         C47391) *
                        C1664 +
                    (((C25951 - C25950) * C15775 + (C25953 - C25952) * C15771 +
                      C26442 * C15776 + C26443 * C47389) *
                         C10231 +
                     ((C25954 - C25955) * C15775 + (C25956 - C25957) * C15771 +
                      C26826 * C15776 + C26827 * C47389) *
                         C47391) *
                        C1665 +
                    (((C25955 - C25954) * C15775 + (C25957 - C25956) * C15771 +
                      C26828 * C15776 + C26829 * C47389) *
                         C10231 +
                     ((C47018 * C1850 - C21369 * C1844) * C15775 +
                      (C47018 * C1862 - C21369 * C1853) * C15771 +
                      (C23337 - C23336) * C15776 + (C23339 - C23338) * C47389) *
                         C47391) *
                        C47374) *
                       C47410 +
                   ((((C21485 - C21484) * C15775 + (C21487 - C21486) * C15771 +
                      (C21489 - C21488) * C15776 + (C21491 - C21490) * C47389) *
                         C10231 +
                     (C26442 * C15775 + C26443 * C15771 + C22312 * C15776 +
                      C22313 * C47389) *
                         C47391) *
                        C1664 +
                    ((C26440 * C15775 + C26441 * C15771 + C26830 * C15776 +
                      C26831 * C47389) *
                         C10231 +
                     (C26828 * C15775 + C26829 * C15771 + C22330 * C15776 +
                      C22331 * C47389) *
                         C47391) *
                        C1665 +
                    ((C26826 * C15775 + C26827 * C15771 + C26832 * C15776 +
                      C26833 * C47389) *
                         C10231 +
                     ((C23336 - C23337) * C15775 + (C23338 - C23339) * C15771 +
                      (C23340 - C23341) * C15776 + (C23342 - C23343) * C47389) *
                         C47391) *
                        C47374) *
                       C47398 +
                   (((C21520 * C15775 + C21521 * C15771 +
                      (C21493 - C21492) * C15776 + (C21495 - C21494) * C47389) *
                         C10231 +
                     (C26830 * C15775 + C26831 * C15771 + C22690 * C15776 +
                      C22691 * C47389) *
                         C47391) *
                        C1664 +
                    ((C22312 * C15775 + C22313 * C15771 + C27290 * C15776 +
                      C27291 * C47389) *
                         C10231 +
                     (C26832 * C15775 + C26833 * C15771 +
                      (C22326 - C22327) * C15776 + (C22328 - C22329) * C47389) *
                         C47391) *
                        C1665 +
                    ((C22330 * C15775 + C22331 * C15771 +
                      (C22327 - C22326) * C15776 + (C22329 - C22328) * C47389) *
                         C10231 +
                     ((C23341 - C23340) * C15775 + (C23343 - C23342) * C15771 +
                      (C47018 * C23332 - C21369 * C23331) * C15776 +
                      (C47018 * C23334 - C21369 * C23333) * C47389) *
                         C47391) *
                        C47374) *
                       C47371) *
                  C47045) /
                     (p * q * std::sqrt(p + q));
    d2ee[140] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C47018 * C124 - C21369 * C117) * C15775 +
              (C47018 * C138 - C21369 * C127) * C15771 +
              (C21484 - C21485) * C15776 + (C21486 - C21487) * C47389) *
                 C10231 +
             ((C25950 - C25951) * C15775 + (C25952 - C25953) * C15771 +
              C26440 * C15776 + C26441 * C47389) *
                 C47391) *
                C3094 +
            (((C25951 - C25950) * C15775 + (C25953 - C25952) * C15771 +
              C26442 * C15776 + C26443 * C47389) *
                 C10231 +
             ((C25954 - C25955) * C15775 + (C25956 - C25957) * C15771 +
              C26826 * C15776 + C26827 * C47389) *
                 C47391) *
                C47178) *
               C47339 +
           ((((C21485 - C21484) * C15775 + (C21487 - C21486) * C15771 +
              (C21489 - C21488) * C15776 + (C21491 - C21490) * C47389) *
                 C10231 +
             (C26442 * C15775 + C26443 * C15771 + C22312 * C15776 +
              C22313 * C47389) *
                 C47391) *
                C3094 +
            ((C26440 * C15775 + C26441 * C15771 + C26830 * C15776 +
              C26831 * C47389) *
                 C10231 +
             (C26828 * C15775 + C26829 * C15771 + C22330 * C15776 +
              C22331 * C47389) *
                 C47391) *
                C47178) *
               C47136) *
              C47050 +
          (((((C21369 * C118 - C47018 * C125) * C15775 +
              (C21369 * C128 - C47018 * C139) * C15771 +
              (C21496 - C21497) * C15776 + (C21498 - C21499) * C47389) *
                 C10231 +
             ((C25958 - C25959) * C15775 + (C25960 - C25961) * C15771 +
              C26444 * C15776 + C26445 * C47389) *
                 C47391) *
                C3094 +
            (((C25959 - C25958) * C15775 + (C25961 - C25960) * C15771 +
              C26446 * C15776 + C26447 * C47389) *
                 C10231 +
             ((C25962 - C25963) * C15775 + (C25964 - C25965) * C15771 +
              C27876 * C15776 + C27877 * C47389) *
                 C47391) *
                C47178) *
               C47339 +
           ((((C21497 - C21496) * C15775 + (C21499 - C21498) * C15771 +
              (C21501 - C21500) * C15776 + (C21503 - C21502) * C47389) *
                 C10231 +
             (C26446 * C15775 + C26447 * C15771 + C22582 * C15776 +
              C22583 * C47389) *
                 C47391) *
                C3094 +
            ((C26444 * C15775 + C26445 * C15771 + C27158 * C15776 +
              C27159 * C47389) *
                 C10231 +
             (C27878 * C15775 + C27879 * C15771 + (C23132 - C23133) * C15776 +
              (C23134 - C23135) * C47389) *
                 C47391) *
                C47178) *
               C47136) *
              C47059 +
          (((((C47018 * C126 - C21369 * C119) * C15775 +
              (C47018 * C140 - C21369 * C129) * C15771 +
              (C21508 - C21509) * C15776 + (C21510 - C21511) * C47389) *
                 C10231 +
             ((C25966 - C25967) * C15775 + (C25968 - C25969) * C15771 +
              C26448 * C15776 + C26449 * C47389) *
                 C47391) *
                C3094 +
            (((C25967 - C25966) * C15775 + (C25969 - C25968) * C15771 +
              C26450 * C15776 + C26451 * C47389) *
                 C10231 +
             ((C25970 - C25971) * C15775 + (C25972 - C25973) * C15771 +
              (C25974 - C25975) * C15776 + (C25976 - C25977) * C47389) *
                 C47391) *
                C47178) *
               C47339 +
           ((((C21509 - C21508) * C15775 + (C21511 - C21510) * C15771 +
              (C21513 - C21512) * C15776 + (C21515 - C21514) * C47389) *
                 C10231 +
             (C26450 * C15775 + C26451 * C15771 + (C22006 - C22007) * C15776 +
              (C22008 - C22009) * C47389) *
                 C47391) *
                C3094 +
            ((C26448 * C15775 + C26449 * C15771 + (C22007 - C22006) * C15776 +
              (C22009 - C22008) * C47389) *
                 C10231 +
             ((C25975 - C25974) * C15775 + (C25977 - C25976) * C15771 +
              (C47018 * C1173 - C21369 * C1158) * C15776 +
              (C47018 * C1185 - C21369 * C1176) * C47389) *
                 C47391) *
                C47178) *
               C47136) *
              C2703)) /
        (p * q * std::sqrt(p + q));
    d2ee[141] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C47018 * C124 - C21369 * C117) * C15775 +
              (C47018 * C138 - C21369 * C127) * C15771 +
              (C21484 - C21485) * C15776 + (C21486 - C21487) * C47389) *
                 C10231 +
             ((C25950 - C25951) * C15775 + (C25952 - C25953) * C15771 +
              C26440 * C15776 + C26441 * C47389) *
                 C47391) *
                C47174 +
            (((C25951 - C25950) * C15775 + (C25953 - C25952) * C15771 +
              C26442 * C15776 + C26443 * C47389) *
                 C10231 +
             ((C25954 - C25955) * C15775 + (C25956 - C25957) * C15771 +
              C26826 * C15776 + C26827 * C47389) *
                 C47391) *
                C47181 +
            (((C25955 - C25954) * C15775 + (C25957 - C25956) * C15771 +
              C26828 * C15776 + C26829 * C47389) *
                 C10231 +
             ((C27670 - C27671) * C15775 + (C27672 - C27673) * C15771 +
              C28148 * C15776 + C28149 * C47389) *
                 C47391) *
                C3602) *
               C47339 +
           ((((C21485 - C21484) * C15775 + (C21487 - C21486) * C15771 +
              (C21489 - C21488) * C15776 + (C21491 - C21490) * C47389) *
                 C10231 +
             (C26442 * C15775 + C26443 * C15771 + C22312 * C15776 +
              C22313 * C47389) *
                 C47391) *
                C47174 +
            ((C26440 * C15775 + C26441 * C15771 + C26830 * C15776 +
              C26831 * C47389) *
                 C10231 +
             (C26828 * C15775 + C26829 * C15771 + C22330 * C15776 +
              C22331 * C47389) *
                 C47391) *
                C47181 +
            ((C26826 * C15775 + C26827 * C15771 + C26832 * C15776 +
              C26833 * C47389) *
                 C10231 +
             (C28150 * C15775 + C28151 * C15771 + (C23340 - C23341) * C15776 +
              (C23342 - C23343) * C47389) *
                 C47391) *
                C3602) *
               C47136) *
              C2440 +
          (((((C21369 * C118 - C47018 * C125) * C15775 +
              (C21369 * C128 - C47018 * C139) * C15771 +
              (C21496 - C21497) * C15776 + (C21498 - C21499) * C47389) *
                 C10231 +
             ((C25958 - C25959) * C15775 + (C25960 - C25961) * C15771 +
              C26444 * C15776 + C26445 * C47389) *
                 C47391) *
                C47174 +
            (((C25959 - C25958) * C15775 + (C25961 - C25960) * C15771 +
              C26446 * C15776 + C26447 * C47389) *
                 C10231 +
             ((C25962 - C25963) * C15775 + (C25964 - C25965) * C15771 +
              C27876 * C15776 + C27877 * C47389) *
                 C47391) *
                C47181 +
            (((C25963 - C25962) * C15775 + (C25965 - C25964) * C15771 +
              C27878 * C15776 + C27879 * C47389) *
                 C10231 +
             ((C28014 - C28015) * C15775 + (C28016 - C28017) * C15771 +
              (C27880 - C27881) * C15776 + (C27882 - C27883) * C47389) *
                 C47391) *
                C3602) *
               C47339 +
           ((((C21497 - C21496) * C15775 + (C21499 - C21498) * C15771 +
              (C21501 - C21500) * C15776 + (C21503 - C21502) * C47389) *
                 C10231 +
             (C26446 * C15775 + C26447 * C15771 + C22582 * C15776 +
              C22583 * C47389) *
                 C47391) *
                C47174 +
            ((C26444 * C15775 + C26445 * C15771 + C27158 * C15776 +
              C27159 * C47389) *
                 C10231 +
             (C27878 * C15775 + C27879 * C15771 + (C23132 - C23133) * C15776 +
              (C23134 - C23135) * C47389) *
                 C47391) *
                C47181 +
            ((C27876 * C15775 + C27877 * C15771 + (C23133 - C23132) * C15776 +
              (C23135 - C23134) * C47389) *
                 C10231 +
             ((C27881 - C27880) * C15775 + (C27883 - C27882) * C15771 +
              (C47018 * C7172 - C21369 * C7170) * C15776 +
              (C47018 * C7176 - C21369 * C7174) * C47389) *
                 C47391) *
                C3602) *
               C47136) *
              C47056)) /
        (p * q * std::sqrt(p + q));
    d2ee[142] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C47018 * C124 - C21369 * C117) * C15775 +
              (C47018 * C138 - C21369 * C127) * C15771 +
              (C21484 - C21485) * C15776 + (C21486 - C21487) * C47389) *
                 C10231 +
             ((C25950 - C25951) * C15775 + (C25952 - C25953) * C15771 +
              C26440 * C15776 + C26441 * C47389) *
                 C47391) *
                C3094 +
            (((C25951 - C25950) * C15775 + (C25953 - C25952) * C15771 +
              C26442 * C15776 + C26443 * C47389) *
                 C10231 +
             ((C25954 - C25955) * C15775 + (C25956 - C25957) * C15771 +
              C26826 * C15776 + C26827 * C47389) *
                 C47391) *
                C47178) *
               C47410 +
           ((((C21485 - C21484) * C15775 + (C21487 - C21486) * C15771 +
              (C21489 - C21488) * C15776 + (C21491 - C21490) * C47389) *
                 C10231 +
             (C26442 * C15775 + C26443 * C15771 + C22312 * C15776 +
              C22313 * C47389) *
                 C47391) *
                C3094 +
            ((C26440 * C15775 + C26441 * C15771 + C26830 * C15776 +
              C26831 * C47389) *
                 C10231 +
             (C26828 * C15775 + C26829 * C15771 + C22330 * C15776 +
              C22331 * C47389) *
                 C47391) *
                C47178) *
               C47398 +
           (((C21520 * C15775 + C21521 * C15771 + (C21493 - C21492) * C15776 +
              (C21495 - C21494) * C47389) *
                 C10231 +
             (C26830 * C15775 + C26831 * C15771 + C22690 * C15776 +
              C22691 * C47389) *
                 C47391) *
                C3094 +
            ((C22312 * C15775 + C22313 * C15771 + C27290 * C15776 +
              C27291 * C47389) *
                 C10231 +
             (C26832 * C15775 + C26833 * C15771 + (C22326 - C22327) * C15776 +
              (C22328 - C22329) * C47389) *
                 C47391) *
                C47178) *
               C47371) *
              C2440 +
          (((((C21369 * C118 - C47018 * C125) * C15775 +
              (C21369 * C128 - C47018 * C139) * C15771 +
              (C21496 - C21497) * C15776 + (C21498 - C21499) * C47389) *
                 C10231 +
             ((C25958 - C25959) * C15775 + (C25960 - C25961) * C15771 +
              C26444 * C15776 + C26445 * C47389) *
                 C47391) *
                C3094 +
            (((C25959 - C25958) * C15775 + (C25961 - C25960) * C15771 +
              C26446 * C15776 + C26447 * C47389) *
                 C10231 +
             ((C25962 - C25963) * C15775 + (C25964 - C25965) * C15771 +
              C27876 * C15776 + C27877 * C47389) *
                 C47391) *
                C47178) *
               C47410 +
           ((((C21497 - C21496) * C15775 + (C21499 - C21498) * C15771 +
              (C21501 - C21500) * C15776 + (C21503 - C21502) * C47389) *
                 C10231 +
             (C26446 * C15775 + C26447 * C15771 + C22582 * C15776 +
              C22583 * C47389) *
                 C47391) *
                C3094 +
            ((C26444 * C15775 + C26445 * C15771 + C27158 * C15776 +
              C27159 * C47389) *
                 C10231 +
             (C27878 * C15775 + C27879 * C15771 + (C23132 - C23133) * C15776 +
              (C23134 - C23135) * C47389) *
                 C47391) *
                C47178) *
               C47398 +
           (((C21522 * C15775 + C21523 * C15771 + (C21505 - C21504) * C15776 +
              (C21507 - C21506) * C47389) *
                 C10231 +
             (C27158 * C15775 + C27159 * C15771 + (C22584 - C22585) * C15776 +
              (C22586 - C22587) * C47389) *
                 C47391) *
                C3094 +
            ((C22582 * C15775 + C22583 * C15771 + (C22585 - C22584) * C15776 +
              (C22587 - C22586) * C47389) *
                 C10231 +
             ((C23133 - C23132) * C15775 + (C23135 - C23134) * C15771 +
              (C47018 * C5810 - C21369 * C5808) * C15776 +
              (C47018 * C5814 - C21369 * C5812) * C47389) *
                 C47391) *
                C47178) *
               C47371) *
              C47056)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C47018 * C124 - C21369 * C117) * C15775 +
             (C47018 * C138 - C21369 * C127) * C15771 +
             (C21484 - C21485) * C15776 + (C21486 - C21487) * C47389) *
                C10231 +
            ((C25950 - C25951) * C15775 + (C25952 - C25953) * C15771 +
             C26440 * C15776 + C26441 * C47389) *
                C47391) *
               C3094 +
           (((C25951 - C25950) * C15775 + (C25953 - C25952) * C15771 +
             C26442 * C15776 + C26443 * C47389) *
                C10231 +
            ((C25954 - C25955) * C15775 + (C25956 - C25957) * C15771 +
             C26826 * C15776 + C26827 * C47389) *
                C47391) *
               C47178) *
              C47073 * C47416 +
          ((((C21369 * C118 - C47018 * C125) * C15775 +
             (C21369 * C128 - C47018 * C139) * C15771 +
             (C21496 - C21497) * C15776 + (C21498 - C21499) * C47389) *
                C10231 +
            ((C25958 - C25959) * C15775 + (C25960 - C25961) * C15771 +
             C26444 * C15776 + C26445 * C47389) *
                C47391) *
               C3094 +
           (((C25959 - C25958) * C15775 + (C25961 - C25960) * C15771 +
             C26446 * C15776 + C26447 * C47389) *
                C10231 +
            ((C25962 - C25963) * C15775 + (C25964 - C25965) * C15771 +
             C27876 * C15776 + C27877 * C47389) *
                C47391) *
               C47178) *
              C47073 * C47409 +
          ((((C47018 * C126 - C21369 * C119) * C15775 +
             (C47018 * C140 - C21369 * C129) * C15771 +
             (C21508 - C21509) * C15776 + (C21510 - C21511) * C47389) *
                C10231 +
            ((C25966 - C25967) * C15775 + (C25968 - C25969) * C15771 +
             C26448 * C15776 + C26449 * C47389) *
                C47391) *
               C3094 +
           (((C25967 - C25966) * C15775 + (C25969 - C25968) * C15771 +
             C26450 * C15776 + C26451 * C47389) *
                C10231 +
            ((C25970 - C25971) * C15775 + (C25972 - C25973) * C15771 +
             (C25974 - C25975) * C15776 + (C25976 - C25977) * C47389) *
                C47391) *
               C47178) *
              C47073 * C47396 +
          ((((C21369 * C120 - C47018 * C130) * C15775 +
             (C21369 * C131 - C47018 * C141) * C15771 +
             (C21734 - C21735) * C15776 + (C21736 - C21737) * C47389) *
                C10231 +
            ((C26242 - C26243) * C15775 + (C26244 - C26245) * C15771 +
             (C26108 - C26109) * C15776 + (C26110 - C26111) * C47389) *
                C47391) *
               C3094 +
           (((C26243 - C26242) * C15775 + (C26245 - C26244) * C15771 +
             (C26109 - C26108) * C15776 + (C26111 - C26110) * C47389) *
                C10231 +
            ((C47018 * C438 - C21369 * C421) * C15775 +
             (C47018 * C451 - C21369 * C439) * C15771 +
             (C47018 * C2015 - C21369 * C2014) * C15776 +
             (C47018 * C2017 - C21369 * C2016) * C47389) *
                C47391) *
               C47178) *
              C47073 * C47375)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C47018 * C124 - C21369 * C117) * C15775 +
             (C47018 * C138 - C21369 * C127) * C15771 +
             (C21484 - C21485) * C15776 + (C21486 - C21487) * C47389) *
                C10231 +
            ((C25950 - C25951) * C15775 + (C25952 - C25953) * C15771 +
             C26440 * C15776 + C26441 * C47389) *
                C47391) *
               C47418 +
           (((C25951 - C25950) * C15775 + (C25953 - C25952) * C15771 +
             C26442 * C15776 + C26443 * C47389) *
                C10231 +
            ((C25954 - C25955) * C15775 + (C25956 - C25957) * C15771 +
             C26826 * C15776 + C26827 * C47389) *
                C47391) *
               C47415 +
           (((C25955 - C25954) * C15775 + (C25957 - C25956) * C15771 +
             C26828 * C15776 + C26829 * C47389) *
                C10231 +
            ((C27670 - C27671) * C15775 + (C27672 - C27673) * C15771 +
             C28148 * C15776 + C28149 * C47389) *
                C47391) *
               C47406 +
           (((C27671 - C27670) * C15775 + (C27673 - C27672) * C15771 +
             C28150 * C15776 + C28151 * C47389) *
                C10231 +
            ((C27674 - C27675) * C15775 + (C27676 - C27677) * C15771 +
             (C27678 - C27679) * C15776 + (C27680 - C27681) * C47389) *
                C47391) *
               C47387) *
              C47073 * C2440 +
          ((((C21369 * C118 - C47018 * C125) * C15775 +
             (C21369 * C128 - C47018 * C139) * C15771 +
             (C21496 - C21497) * C15776 + (C21498 - C21499) * C47389) *
                C10231 +
            ((C25958 - C25959) * C15775 + (C25960 - C25961) * C15771 +
             C26444 * C15776 + C26445 * C47389) *
                C47391) *
               C47418 +
           (((C25959 - C25958) * C15775 + (C25961 - C25960) * C15771 +
             C26446 * C15776 + C26447 * C47389) *
                C10231 +
            ((C25962 - C25963) * C15775 + (C25964 - C25965) * C15771 +
             C27876 * C15776 + C27877 * C47389) *
                C47391) *
               C47415 +
           (((C25963 - C25962) * C15775 + (C25965 - C25964) * C15771 +
             C27878 * C15776 + C27879 * C47389) *
                C10231 +
            ((C28014 - C28015) * C15775 + (C28016 - C28017) * C15771 +
             (C27880 - C27881) * C15776 + (C27882 - C27883) * C47389) *
                C47391) *
               C47406 +
           (((C28015 - C28014) * C15775 + (C28017 - C28016) * C15771 +
             (C27881 - C27880) * C15776 + (C27883 - C27882) * C47389) *
                C10231 +
            ((C47018 * C1857 - C21369 * C1848) * C15775 +
             (C47018 * C1866 - C21369 * C1860) * C15771 +
             (C47018 * C6702 - C21369 * C6700) * C15776 +
             (C47018 * C6706 - C21369 * C6704) * C47389) *
                C47391) *
               C47387) *
              C47073 * C47056)) /
            (p * q * std::sqrt(p + q));
    d2ee[143] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((((C47018 * C124 - C21369 * C117) * C15775 +
                      (C47018 * C138 - C21369 * C127) * C15771 +
                      (C21484 - C21485) * C15776 + (C21486 - C21487) * C47389) *
                         C10231 +
                     ((C25950 - C25951) * C15775 + (C25952 - C25953) * C15771 +
                      C26440 * C15776 + C26441 * C47389) *
                         C47391) *
                        C47174 +
                    (((C25951 - C25950) * C15775 + (C25953 - C25952) * C15771 +
                      C26442 * C15776 + C26443 * C47389) *
                         C10231 +
                     ((C25954 - C25955) * C15775 + (C25956 - C25957) * C15771 +
                      C26826 * C15776 + C26827 * C47389) *
                         C47391) *
                        C47181 +
                    (((C25955 - C25954) * C15775 + (C25957 - C25956) * C15771 +
                      C26828 * C15776 + C26829 * C47389) *
                         C10231 +
                     ((C27670 - C27671) * C15775 + (C27672 - C27673) * C15771 +
                      C28148 * C15776 + C28149 * C47389) *
                         C47391) *
                        C3602) *
                       C47073 * C47050 +
                   ((((C21369 * C118 - C47018 * C125) * C15775 +
                      (C21369 * C128 - C47018 * C139) * C15771 +
                      (C21496 - C21497) * C15776 + (C21498 - C21499) * C47389) *
                         C10231 +
                     ((C25958 - C25959) * C15775 + (C25960 - C25961) * C15771 +
                      C26444 * C15776 + C26445 * C47389) *
                         C47391) *
                        C47174 +
                    (((C25959 - C25958) * C15775 + (C25961 - C25960) * C15771 +
                      C26446 * C15776 + C26447 * C47389) *
                         C10231 +
                     ((C25962 - C25963) * C15775 + (C25964 - C25965) * C15771 +
                      C27876 * C15776 + C27877 * C47389) *
                         C47391) *
                        C47181 +
                    (((C25963 - C25962) * C15775 + (C25965 - C25964) * C15771 +
                      C27878 * C15776 + C27879 * C47389) *
                         C10231 +
                     ((C28014 - C28015) * C15775 + (C28016 - C28017) * C15771 +
                      (C27880 - C27881) * C15776 + (C27882 - C27883) * C47389) *
                         C47391) *
                        C3602) *
                       C47073 * C47059 +
                   ((((C47018 * C126 - C21369 * C119) * C15775 +
                      (C47018 * C140 - C21369 * C129) * C15771 +
                      (C21508 - C21509) * C15776 + (C21510 - C21511) * C47389) *
                         C10231 +
                     ((C25966 - C25967) * C15775 + (C25968 - C25969) * C15771 +
                      C26448 * C15776 + C26449 * C47389) *
                         C47391) *
                        C47174 +
                    (((C25967 - C25966) * C15775 + (C25969 - C25968) * C15771 +
                      C26450 * C15776 + C26451 * C47389) *
                         C10231 +
                     ((C25970 - C25971) * C15775 + (C25972 - C25973) * C15771 +
                      (C25974 - C25975) * C15776 + (C25976 - C25977) * C47389) *
                         C47391) *
                        C47181 +
                    (((C25971 - C25970) * C15775 + (C25973 - C25972) * C15771 +
                      (C25975 - C25974) * C15776 + (C25977 - C25976) * C47389) *
                         C10231 +
                     ((C47018 * C1852 - C21369 * C1846) * C15775 +
                      (C47018 * C1864 - C21369 * C1855) * C15771 +
                      (C47018 * C2227 - C21369 * C2224) * C15776 +
                      (C47018 * C2233 - C21369 * C2230) * C47389) *
                         C47391) *
                        C3602) *
                       C47073 * C2703)) /
                 (p * q * std::sqrt(p + q));
    d2ee[144] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C47018 * C124 - C21369 * C117) * C15775 +
             (C47018 * C138 - C21369 * C127) * C15771 +
             (C21484 - C21485) * C15776 + (C21486 - C21487) * C47389) *
                C10231 +
            ((C25950 - C25951) * C15775 + (C25952 - C25953) * C15771 +
             C26440 * C15776 + C26441 * C47389) *
                C47391) *
               C3094 +
           (((C25951 - C25950) * C15775 + (C25953 - C25952) * C15771 +
             C26442 * C15776 + C26443 * C47389) *
                C10231 +
            ((C25954 - C25955) * C15775 + (C25956 - C25957) * C15771 +
             C26826 * C15776 + C26827 * C47389) *
                C47391) *
               C47178) *
              C47073 * C47416 +
          ((((C21369 * C118 - C47018 * C125) * C15775 +
             (C21369 * C128 - C47018 * C139) * C15771 +
             (C21496 - C21497) * C15776 + (C21498 - C21499) * C47389) *
                C10231 +
            ((C25958 - C25959) * C15775 + (C25960 - C25961) * C15771 +
             C26444 * C15776 + C26445 * C47389) *
                C47391) *
               C3094 +
           (((C25959 - C25958) * C15775 + (C25961 - C25960) * C15771 +
             C26446 * C15776 + C26447 * C47389) *
                C10231 +
            ((C25962 - C25963) * C15775 + (C25964 - C25965) * C15771 +
             C27876 * C15776 + C27877 * C47389) *
                C47391) *
               C47178) *
              C47073 * C47409 +
          ((((C47018 * C126 - C21369 * C119) * C15775 +
             (C47018 * C140 - C21369 * C129) * C15771 +
             (C21508 - C21509) * C15776 + (C21510 - C21511) * C47389) *
                C10231 +
            ((C25966 - C25967) * C15775 + (C25968 - C25969) * C15771 +
             C26448 * C15776 + C26449 * C47389) *
                C47391) *
               C3094 +
           (((C25967 - C25966) * C15775 + (C25969 - C25968) * C15771 +
             C26450 * C15776 + C26451 * C47389) *
                C10231 +
            ((C25970 - C25971) * C15775 + (C25972 - C25973) * C15771 +
             (C25974 - C25975) * C15776 + (C25976 - C25977) * C47389) *
                C47391) *
               C47178) *
              C47073 * C47396 +
          ((((C21369 * C120 - C47018 * C130) * C15775 +
             (C21369 * C131 - C47018 * C141) * C15771 +
             (C21734 - C21735) * C15776 + (C21736 - C21737) * C47389) *
                C10231 +
            ((C26242 - C26243) * C15775 + (C26244 - C26245) * C15771 +
             (C26108 - C26109) * C15776 + (C26110 - C26111) * C47389) *
                C47391) *
               C3094 +
           (((C26243 - C26242) * C15775 + (C26245 - C26244) * C15771 +
             (C26109 - C26108) * C15776 + (C26111 - C26110) * C47389) *
                C10231 +
            ((C47018 * C438 - C21369 * C421) * C15775 +
             (C47018 * C451 - C21369 * C439) * C15771 +
             (C47018 * C2015 - C21369 * C2014) * C15776 +
             (C47018 * C2017 - C21369 * C2016) * C47389) *
                C47391) *
               C47178) *
              C47073 * C47375)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C47018 * C124 - C21369 * C117) * C15775 +
              (C47018 * C138 - C21369 * C127) * C15771 +
              (C21484 - C21485) * C15776 + (C21486 - C21487) * C47389) *
                 C10231 +
             ((C25950 - C25951) * C15775 + (C25952 - C25953) * C15771 +
              C26440 * C15776 + C26441 * C47389) *
                 C47391) *
                C3094 +
            (((C25951 - C25950) * C15775 + (C25953 - C25952) * C15771 +
              C26442 * C15776 + C26443 * C47389) *
                 C10231 +
             ((C25954 - C25955) * C15775 + (C25956 - C25957) * C15771 +
              C26826 * C15776 + C26827 * C47389) *
                 C47391) *
                C47178) *
               C47410 +
           ((((C21485 - C21484) * C15775 + (C21487 - C21486) * C15771 +
              (C21489 - C21488) * C15776 + (C21491 - C21490) * C47389) *
                 C10231 +
             (C26442 * C15775 + C26443 * C15771 + C22312 * C15776 +
              C22313 * C47389) *
                 C47391) *
                C3094 +
            ((C26440 * C15775 + C26441 * C15771 + C26830 * C15776 +
              C26831 * C47389) *
                 C10231 +
             (C26828 * C15775 + C26829 * C15771 + C22330 * C15776 +
              C22331 * C47389) *
                 C47391) *
                C47178) *
               C47398 +
           (((C21520 * C15775 + C21521 * C15771 + (C21493 - C21492) * C15776 +
              (C21495 - C21494) * C47389) *
                 C10231 +
             (C26830 * C15775 + C26831 * C15771 + C22690 * C15776 +
              C22691 * C47389) *
                 C47391) *
                C3094 +
            ((C22312 * C15775 + C22313 * C15771 + C27290 * C15776 +
              C27291 * C47389) *
                 C10231 +
             (C26832 * C15775 + C26833 * C15771 + (C22326 - C22327) * C15776 +
              (C22328 - C22329) * C47389) *
                 C47391) *
                C47178) *
               C47371) *
              C2440 +
          (((((C21369 * C118 - C47018 * C125) * C15775 +
              (C21369 * C128 - C47018 * C139) * C15771 +
              (C21496 - C21497) * C15776 + (C21498 - C21499) * C47389) *
                 C10231 +
             ((C25958 - C25959) * C15775 + (C25960 - C25961) * C15771 +
              C26444 * C15776 + C26445 * C47389) *
                 C47391) *
                C3094 +
            (((C25959 - C25958) * C15775 + (C25961 - C25960) * C15771 +
              C26446 * C15776 + C26447 * C47389) *
                 C10231 +
             ((C25962 - C25963) * C15775 + (C25964 - C25965) * C15771 +
              C27876 * C15776 + C27877 * C47389) *
                 C47391) *
                C47178) *
               C47410 +
           ((((C21497 - C21496) * C15775 + (C21499 - C21498) * C15771 +
              (C21501 - C21500) * C15776 + (C21503 - C21502) * C47389) *
                 C10231 +
             (C26446 * C15775 + C26447 * C15771 + C22582 * C15776 +
              C22583 * C47389) *
                 C47391) *
                C3094 +
            ((C26444 * C15775 + C26445 * C15771 + C27158 * C15776 +
              C27159 * C47389) *
                 C10231 +
             (C27878 * C15775 + C27879 * C15771 + (C23132 - C23133) * C15776 +
              (C23134 - C23135) * C47389) *
                 C47391) *
                C47178) *
               C47398 +
           (((C21522 * C15775 + C21523 * C15771 + (C21505 - C21504) * C15776 +
              (C21507 - C21506) * C47389) *
                 C10231 +
             (C27158 * C15775 + C27159 * C15771 + (C22584 - C22585) * C15776 +
              (C22586 - C22587) * C47389) *
                 C47391) *
                C3094 +
            ((C22582 * C15775 + C22583 * C15771 + (C22585 - C22584) * C15776 +
              (C22587 - C22586) * C47389) *
                 C10231 +
             ((C23133 - C23132) * C15775 + (C23135 - C23134) * C15771 +
              (C47018 * C5810 - C21369 * C5808) * C15776 +
              (C47018 * C5814 - C21369 * C5812) * C47389) *
                 C47391) *
                C47178) *
               C47371) *
              C47056)) /
            (p * q * std::sqrt(p + q));
    d2ee[145] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((((C47018 * C124 - C21369 * C117) * C15775 +
                      (C47018 * C138 - C21369 * C127) * C15771 +
                      (C21484 - C21485) * C15776 + (C21486 - C21487) * C47389) *
                         C10231 +
                     ((C25950 - C25951) * C15775 + (C25952 - C25953) * C15771 +
                      (C21987 - C21986) * C15776 + (C21989 - C21988) * C47389) *
                         C47391) *
                        C47091 * C47339 +
                    (((C21485 - C21484) * C15775 + (C21487 - C21486) * C15771 +
                      (C21489 - C21488) * C15776 + (C21491 - C21490) * C47389) *
                         C10231 +
                     ((C21986 - C21987) * C15775 + (C21988 - C21989) * C15771 +
                      C22312 * C15776 + C22313 * C47389) *
                         C47391) *
                        C47091 * C47136) *
                       C554 +
                   ((((C21369 * C118 - C47018 * C125) * C15775 +
                      (C21369 * C128 - C47018 * C139) * C15771 +
                      (C21496 - C21497) * C15776 + (C21498 - C21499) * C47389) *
                         C10231 +
                     ((C25958 - C25959) * C15775 + (C25960 - C25961) * C15771 +
                      (C21995 - C21994) * C15776 + (C21997 - C21996) * C47389) *
                         C47391) *
                        C47091 * C47339 +
                    (((C21497 - C21496) * C15775 + (C21499 - C21498) * C15771 +
                      (C21501 - C21500) * C15776 + (C21503 - C21502) * C47389) *
                         C10231 +
                     ((C21994 - C21995) * C15775 + (C21996 - C21997) * C15771 +
                      C22582 * C15776 + C22583 * C47389) *
                         C47391) *
                        C47091 * C47136) *
                       C555 +
                   ((((C47018 * C126 - C21369 * C119) * C15775 +
                      (C47018 * C140 - C21369 * C129) * C15771 +
                      (C21508 - C21509) * C15776 + (C21510 - C21511) * C47389) *
                         C10231 +
                     ((C25966 - C25967) * C15775 + (C25968 - C25969) * C15771 +
                      (C22003 - C22002) * C15776 + (C22005 - C22004) * C47389) *
                         C47391) *
                        C47091 * C47339 +
                    (((C21509 - C21508) * C15775 + (C21511 - C21510) * C15771 +
                      (C21513 - C21512) * C15776 + (C21515 - C21514) * C47389) *
                         C10231 +
                     ((C22002 - C22003) * C15775 + (C22004 - C22005) * C15771 +
                      (C22006 - C22007) * C15776 + (C22008 - C22009) * C47389) *
                         C47391) *
                        C47091 * C47136) *
                       C556 +
                   ((((C21369 * C120 - C47018 * C130) * C15775 +
                      (C21369 * C131 - C47018 * C141) * C15771 +
                      (C21734 - C21735) * C15776 + (C21736 - C21737) * C47389) *
                         C10231 +
                     ((C21369 * C420 - C47018 * C436) * C15775 +
                      (C21369 * C437 - C47018 * C450) * C15771 +
                      (C26108 - C26109) * C15776 + (C26110 - C26111) * C47389) *
                         C47391) *
                        C47091 * C47339 +
                    (((C21735 - C21734) * C15775 + (C21737 - C21736) * C15771 +
                      (C21739 - C21738) * C15776 + (C21741 - C21740) * C47389) *
                         C10231 +
                     ((C26109 - C26108) * C15775 + (C26111 - C26110) * C15771 +
                      (C47018 * C1441 - C21369 * C1440) * C15776 +
                      (C47018 * C1443 - C21369 * C1442) * C47389) *
                         C47391) *
                        C47091 * C47136) *
                       C47375)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((((C47018 * C124 - C21369 * C117) * C15775 +
                      (C47018 * C138 - C21369 * C127) * C15771 +
                      (C21484 - C21485) * C15776 + (C21486 - C21487) * C47389) *
                         C10231 +
                     ((C25950 - C25951) * C15775 + (C25952 - C25953) * C15771 +
                      C26440 * C15776 + C26441 * C47389) *
                         C47391) *
                        C47091 * C1284 +
                    (((C21485 - C21484) * C15775 + (C21487 - C21486) * C15771 +
                      (C21489 - C21488) * C15776 + (C21491 - C21490) * C47389) *
                         C10231 +
                     (C26442 * C15775 + C26443 * C15771 + C22312 * C15776 +
                      C22313 * C47389) *
                         C47391) *
                        C47091 * C1285 +
                    ((C21520 * C15775 + C21521 * C15771 +
                      (C21493 - C21492) * C15776 + (C21495 - C21494) * C47389) *
                         C10231 +
                     (C26830 * C15775 + C26831 * C15771 + C22690 * C15776 +
                      C22691 * C47389) *
                         C47391) *
                        C47091 * C1286 +
                    ((C22186 * C15775 + C22187 * C15771 +
                      (C22189 - C22188) * C15776 + (C22191 - C22190) * C47389) *
                         C10231 +
                     ((C22323 - C22322) * C15775 + (C22325 - C22324) * C15771 +
                      (C22692 - C22693) * C15776 + (C22694 - C22695) * C47389) *
                         C47391) *
                        C47091 * C47381) *
                       C47325 +
                   ((((C21369 * C118 - C47018 * C125) * C15775 +
                      (C21369 * C128 - C47018 * C139) * C15771 +
                      (C21496 - C21497) * C15776 + (C21498 - C21499) * C47389) *
                         C10231 +
                     ((C25958 - C25959) * C15775 + (C25960 - C25961) * C15771 +
                      C26444 * C15776 + C26445 * C47389) *
                         C47391) *
                        C47091 * C1284 +
                    (((C21497 - C21496) * C15775 + (C21499 - C21498) * C15771 +
                      (C21501 - C21500) * C15776 + (C21503 - C21502) * C47389) *
                         C10231 +
                     (C26446 * C15775 + C26447 * C15771 + C22582 * C15776 +
                      C22583 * C47389) *
                         C47391) *
                        C47091 * C1285 +
                    ((C21522 * C15775 + C21523 * C15771 +
                      (C21505 - C21504) * C15776 + (C21507 - C21506) * C47389) *
                         C10231 +
                     ((C21999 - C21998) * C15775 + (C22001 - C22000) * C15771 +
                      (C22584 - C22585) * C15776 + (C22586 - C22587) * C47389) *
                         C47391) *
                        C47091 * C1286 +
                    ((C22430 * C15775 + C22431 * C15771 +
                      (C22433 - C22432) * C15776 + (C22435 - C22434) * C47389) *
                         C10231 +
                     ((C22585 - C22584) * C15775 + (C22587 - C22586) * C15771 +
                      (C47018 * C6312 - C21369 * C6310) * C15776 +
                      (C47018 * C6316 - C21369 * C6314) * C47389) *
                         C47391) *
                        C47091 * C47381) *
                       C47056)) /
                     (p * q * std::sqrt(p + q));
    d2ee[146] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C47018 * C124 - C21369 * C117) * C15775 +
              (C47018 * C138 - C21369 * C127) * C15771 +
              (C21484 - C21485) * C15776 + (C21486 - C21487) * C47389) *
                 C10231 +
             ((C25950 - C25951) * C15775 + (C25952 - C25953) * C15771 +
              C26440 * C15776 + C26441 * C47389) *
                 C47391) *
                C47340 +
            (((C25951 - C25950) * C15775 + (C25953 - C25952) * C15771 +
              C26442 * C15776 + C26443 * C47389) *
                 C10231 +
             ((C25954 - C25955) * C15775 + (C25956 - C25957) * C15771 +
              (C22315 - C22314) * C15776 + (C22317 - C22316) * C47389) *
                 C47391) *
                C47178) *
               C47339 +
           ((((C21485 - C21484) * C15775 + (C21487 - C21486) * C15771 +
              (C21489 - C21488) * C15776 + (C21491 - C21490) * C47389) *
                 C10231 +
             (C26442 * C15775 + C26443 * C15771 + C22312 * C15776 +
              C22313 * C47389) *
                 C47391) *
                C47340 +
            ((C26440 * C15775 + C26441 * C15771 + (C21991 - C21990) * C15776 +
              (C21993 - C21992) * C47389) *
                 C10231 +
             ((C22314 - C22315) * C15775 + (C22316 - C22317) * C15771 +
              C22330 * C15776 + C22331 * C47389) *
                 C47391) *
                C47178) *
               C47136) *
              C258 +
          (((((C21369 * C118 - C47018 * C125) * C15775 +
              (C21369 * C128 - C47018 * C139) * C15771 +
              (C21496 - C21497) * C15776 + (C21498 - C21499) * C47389) *
                 C10231 +
             ((C25958 - C25959) * C15775 + (C25960 - C25961) * C15771 +
              C26444 * C15776 + C26445 * C47389) *
                 C47391) *
                C47340 +
            (((C25959 - C25958) * C15775 + (C25961 - C25960) * C15771 +
              C26446 * C15776 + C26447 * C47389) *
                 C10231 +
             ((C25962 - C25963) * C15775 + (C25964 - C25965) * C15771 +
              (C23129 - C23128) * C15776 + (C23131 - C23130) * C47389) *
                 C47391) *
                C47178) *
               C47339 +
           ((((C21497 - C21496) * C15775 + (C21499 - C21498) * C15771 +
              (C21501 - C21500) * C15776 + (C21503 - C21502) * C47389) *
                 C10231 +
             (C26446 * C15775 + C26447 * C15771 + C22582 * C15776 +
              C22583 * C47389) *
                 C47391) *
                C47340 +
            ((C26444 * C15775 + C26445 * C15771 + (C21999 - C21998) * C15776 +
              (C22001 - C22000) * C47389) *
                 C10231 +
             ((C23128 - C23129) * C15775 + (C23130 - C23131) * C15771 +
              (C23132 - C23133) * C15776 + (C23134 - C23135) * C47389) *
                 C47391) *
                C47178) *
               C47136) *
              C259 +
          (((((C47018 * C126 - C21369 * C119) * C15775 +
              (C47018 * C140 - C21369 * C129) * C15771 +
              (C21508 - C21509) * C15776 + (C21510 - C21511) * C47389) *
                 C10231 +
             ((C25966 - C25967) * C15775 + (C25968 - C25969) * C15771 +
              C26448 * C15776 + C26449 * C47389) *
                 C47391) *
                C47340 +
            (((C25967 - C25966) * C15775 + (C25969 - C25968) * C15771 +
              C26450 * C15776 + C26451 * C47389) *
                 C10231 +
             ((C25970 - C25971) * C15775 + (C25972 - C25973) * C15771 +
              (C25974 - C25975) * C15776 + (C25976 - C25977) * C47389) *
                 C47391) *
                C47178) *
               C47339 +
           ((((C21509 - C21508) * C15775 + (C21511 - C21510) * C15771 +
              (C21513 - C21512) * C15776 + (C21515 - C21514) * C47389) *
                 C10231 +
             (C26450 * C15775 + C26451 * C15771 + (C22006 - C22007) * C15776 +
              (C22008 - C22009) * C47389) *
                 C47391) *
                C47340 +
            ((C26448 * C15775 + C26449 * C15771 + (C22007 - C22006) * C15776 +
              (C22009 - C22008) * C47389) *
                 C10231 +
             ((C25975 - C25974) * C15775 + (C25977 - C25976) * C15771 +
              (C47018 * C1173 - C21369 * C1158) * C15776 +
              (C47018 * C1185 - C21369 * C1176) * C47389) *
                 C47391) *
                C47178) *
               C47136) *
              C47365)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C47018 * C124 - C21369 * C117) * C15775 +
             (C47018 * C138 - C21369 * C127) * C15771 +
             (C21484 - C21485) * C15776 + (C21486 - C21487) * C47389) *
                C10231 +
            ((C25950 - C25951) * C15775 + (C25952 - C25953) * C15771 +
             C26440 * C15776 + C26441 * C47389) *
                C47391) *
               C47340 +
           (((C25951 - C25950) * C15775 + (C25953 - C25952) * C15771 +
             C26442 * C15776 + C26443 * C47389) *
                C10231 +
            ((C25954 - C25955) * C15775 + (C25956 - C25957) * C15771 +
             C26826 * C15776 + C26827 * C47389) *
                C47391) *
               C47178) *
              C1284 +
          ((((C21485 - C21484) * C15775 + (C21487 - C21486) * C15771 +
             (C21489 - C21488) * C15776 + (C21491 - C21490) * C47389) *
                C10231 +
            (C26442 * C15775 + C26443 * C15771 + C22312 * C15776 +
             C22313 * C47389) *
                C47391) *
               C47340 +
           ((C26440 * C15775 + C26441 * C15771 + C26830 * C15776 +
             C26831 * C47389) *
                C10231 +
            (C26828 * C15775 + C26829 * C15771 + C22330 * C15776 +
             C22331 * C47389) *
                C47391) *
               C47178) *
              C1285 +
          (((C21520 * C15775 + C21521 * C15771 + (C21493 - C21492) * C15776 +
             (C21495 - C21494) * C47389) *
                C10231 +
            (C26830 * C15775 + C26831 * C15771 + C22690 * C15776 +
             C22691 * C47389) *
                C47391) *
               C47340 +
           ((C22312 * C15775 + C22313 * C15771 + C27290 * C15776 +
             C27291 * C47389) *
                C10231 +
            (C26832 * C15775 + C26833 * C15771 + (C22326 - C22327) * C15776 +
             (C22328 - C22329) * C47389) *
                C47391) *
               C47178) *
              C1286 +
          (((C22186 * C15775 + C22187 * C15771 + (C22189 - C22188) * C15776 +
             (C22191 - C22190) * C47389) *
                C10231 +
            (C27290 * C15775 + C27291 * C15771 + (C22692 - C22693) * C15776 +
             (C22694 - C22695) * C47389) *
                C47391) *
               C47340 +
           ((C22690 * C15775 + C22691 * C15771 + (C22693 - C22692) * C15776 +
             (C22695 - C22694) * C47389) *
                C10231 +
            ((C22327 - C22326) * C15775 + (C22329 - C22328) * C15771 +
             (C47018 * C22308 - C21369 * C22307) * C15776 +
             (C47018 * C22310 - C21369 * C22309) * C47389) *
                C47391) *
               C47178) *
              C47381) *
         C47045) /
            (p * q * std::sqrt(p + q));
    d2ee[147] += (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  (((((C47018 * C124 - C21369 * C117) * C15775 +
                      (C47018 * C138 - C21369 * C127) * C15771 +
                      (C21484 - C21485) * C15776 + (C21486 - C21487) * C47389) *
                         C10231 +
                     ((C47018 * C424 - C21369 * C414) * C15775 +
                      (C47018 * C444 - C21369 * C427) * C15771 +
                      (C21987 - C21986) * C15776 + (C21989 - C21988) * C47389) *
                         C47391) *
                        C47091 * C47410 +
                    (((C21485 - C21484) * C15775 + (C21487 - C21486) * C15771 +
                      (C21489 - C21488) * C15776 + (C21491 - C21490) * C47389) *
                         C10231 +
                     ((C21986 - C21987) * C15775 + (C21988 - C21989) * C15771 +
                      C22312 * C15776 + C22313 * C47389) *
                         C47391) *
                        C47091 * C47398 +
                    ((C21520 * C15775 + C21521 * C15771 +
                      (C21493 - C21492) * C15776 + (C21495 - C21494) * C47389) *
                         C10231 +
                     ((C21991 - C21990) * C15775 + (C21993 - C21992) * C15771 +
                      C22690 * C15776 + C22691 * C47389) *
                         C47391) *
                        C47091 * C47371) *
                       C258 +
                   ((((C21369 * C118 - C47018 * C125) * C15775 +
                      (C21369 * C128 - C47018 * C139) * C15771 +
                      (C21496 - C21497) * C15776 + (C21498 - C21499) * C47389) *
                         C10231 +
                     ((C21369 * C415 - C47018 * C425) * C15775 +
                      (C21369 * C428 - C47018 * C445) * C15771 +
                      (C21995 - C21994) * C15776 + (C21997 - C21996) * C47389) *
                         C47391) *
                        C47091 * C47410 +
                    (((C21497 - C21496) * C15775 + (C21499 - C21498) * C15771 +
                      (C21501 - C21500) * C15776 + (C21503 - C21502) * C47389) *
                         C10231 +
                     ((C21994 - C21995) * C15775 + (C21996 - C21997) * C15771 +
                      C22582 * C15776 + C22583 * C47389) *
                         C47391) *
                        C47091 * C47398 +
                    ((C21522 * C15775 + C21523 * C15771 +
                      (C21505 - C21504) * C15776 + (C21507 - C21506) * C47389) *
                         C10231 +
                     ((C21999 - C21998) * C15775 + (C22001 - C22000) * C15771 +
                      (C22584 - C22585) * C15776 + (C22586 - C22587) * C47389) *
                         C47391) *
                        C47091 * C47371) *
                       C259 +
                   ((((C47018 * C126 - C21369 * C119) * C15775 +
                      (C47018 * C140 - C21369 * C129) * C15771 +
                      (C21508 - C21509) * C15776 + (C21510 - C21511) * C47389) *
                         C10231 +
                     ((C47018 * C426 - C21369 * C416) * C15775 +
                      (C47018 * C446 - C21369 * C429) * C15771 +
                      (C22003 - C22002) * C15776 + (C22005 - C22004) * C47389) *
                         C47391) *
                        C47091 * C47410 +
                    (((C21509 - C21508) * C15775 + (C21511 - C21510) * C15771 +
                      (C21513 - C21512) * C15776 + (C21515 - C21514) * C47389) *
                         C10231 +
                     ((C22002 - C22003) * C15775 + (C22004 - C22005) * C15771 +
                      (C22006 - C22007) * C15776 + (C22008 - C22009) * C47389) *
                         C47391) *
                        C47091 * C47398 +
                    ((C21524 * C15775 + C21525 * C15771 +
                      (C21517 - C21516) * C15776 + (C21519 - C21518) * C47389) *
                         C10231 +
                     ((C22007 - C22006) * C15775 + (C22009 - C22008) * C15771 +
                      (C47018 * C1547 - C21369 * C1544) * C15776 +
                      (C47018 * C1553 - C21369 * C1550) * C47389) *
                         C47391) *
                        C47091 * C47371) *
                       C47365)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  ((((C47018 * C124 - C21369 * C117) * C15775 +
                     (C47018 * C138 - C21369 * C127) * C15771 +
                     (C21484 - C21485) * C15776 + (C21486 - C21487) * C47389) *
                        C10231 +
                    ((C47018 * C424 - C21369 * C414) * C15775 +
                     (C47018 * C444 - C21369 * C427) * C15771 +
                     (C21987 - C21986) * C15776 + (C21989 - C21988) * C47389) *
                        C47391) *
                       C47091 * C47073 * C108 +
                   (((C21369 * C118 - C47018 * C125) * C15775 +
                     (C21369 * C128 - C47018 * C139) * C15771 +
                     (C21496 - C21497) * C15776 + (C21498 - C21499) * C47389) *
                        C10231 +
                    ((C21369 * C415 - C47018 * C425) * C15775 +
                     (C21369 * C428 - C47018 * C445) * C15771 +
                     (C21995 - C21994) * C15776 + (C21997 - C21996) * C47389) *
                        C47391) *
                       C47091 * C47073 * C109 +
                   (((C47018 * C126 - C21369 * C119) * C15775 +
                     (C47018 * C140 - C21369 * C129) * C15771 +
                     (C21508 - C21509) * C15776 + (C21510 - C21511) * C47389) *
                        C10231 +
                    ((C47018 * C426 - C21369 * C416) * C15775 +
                     (C47018 * C446 - C21369 * C429) * C15771 +
                     (C22003 - C22002) * C15776 + (C22005 - C22004) * C47389) *
                        C47391) *
                       C47091 * C47073 * C110 +
                   (((C21369 * C120 - C47018 * C130) * C15775 +
                     (C21369 * C131 - C47018 * C141) * C15771 +
                     (C21734 - C21735) * C15776 + (C21736 - C21737) * C47389) *
                        C10231 +
                    ((C21369 * C420 - C47018 * C436) * C15775 +
                     (C21369 * C437 - C47018 * C450) * C15771 +
                     (C21369 * C815 - C47018 * C823) * C15776 +
                     (C21369 * C824 - C47018 * C830) * C47389) *
                        C47391) *
                       C47091 * C47073 * C111 +
                   (((C47018 * C132 - C21369 * C121) * C15775 +
                     (C47018 * C142 - C21369 * C133) * C15771 +
                     (C47018 * C287 - C21369 * C269) * C15776 +
                     (C47018 * C299 - C21369 * C288) * C47389) *
                        C10231 +
                    ((C47018 * C440 - C21369 * C422) * C15775 +
                     (C47018 * C452 - C21369 * C441) * C15771 +
                     (C47018 * C825 - C21369 * C816) * C15776 +
                     (C47018 * C831 - C21369 * C826) * C47389) *
                        C47391) *
                       C47091 * C47073 * C112)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((((C47018 * C124 - C21369 * C117) * C15775 +
                      (C47018 * C138 - C21369 * C127) * C15771 +
                      (C21484 - C21485) * C15776 + (C21486 - C21487) * C47389) *
                         C10231 +
                     ((C25950 - C25951) * C15775 + (C25952 - C25953) * C15771 +
                      (C21987 - C21986) * C15776 + (C21989 - C21988) * C47389) *
                         C47391) *
                        C47411 +
                    (((C25951 - C25950) * C15775 + (C25953 - C25952) * C15771 +
                      (C21986 - C21987) * C15776 + (C21988 - C21989) * C47389) *
                         C10231 +
                     ((C25954 - C25955) * C15775 + (C25956 - C25957) * C15771 +
                      (C22315 - C22314) * C15776 + (C22317 - C22316) * C47389) *
                         C47391) *
                        C47400 +
                    (((C25955 - C25954) * C15775 + (C25957 - C25956) * C15771 +
                      (C22314 - C22315) * C15776 + (C22316 - C22317) * C47389) *
                         C10231 +
                     ((C47018 * C1850 - C21369 * C1844) * C15775 +
                      (C47018 * C1862 - C21369 * C1853) * C15771 +
                      (C23337 - C23336) * C15776 + (C23339 - C23338) * C47389) *
                         C47391) *
                        C47374) *
                       C47073 * C258 +
                   ((((C21369 * C118 - C47018 * C125) * C15775 +
                      (C21369 * C128 - C47018 * C139) * C15771 +
                      (C21496 - C21497) * C15776 + (C21498 - C21499) * C47389) *
                         C10231 +
                     ((C25958 - C25959) * C15775 + (C25960 - C25961) * C15771 +
                      (C21995 - C21994) * C15776 + (C21997 - C21996) * C47389) *
                         C47391) *
                        C47411 +
                    (((C25959 - C25958) * C15775 + (C25961 - C25960) * C15771 +
                      (C21994 - C21995) * C15776 + (C21996 - C21997) * C47389) *
                         C10231 +
                     ((C25962 - C25963) * C15775 + (C25964 - C25965) * C15771 +
                      (C23129 - C23128) * C15776 + (C23131 - C23130) * C47389) *
                         C47391) *
                        C47400 +
                    (((C25963 - C25962) * C15775 + (C25965 - C25964) * C15771 +
                      (C23128 - C23129) * C15776 + (C23130 - C23131) * C47389) *
                         C10231 +
                     ((C21369 * C1845 - C47018 * C1851) * C15775 +
                      (C21369 * C1854 - C47018 * C1863) * C15771 +
                      (C21369 * C2223 - C47018 * C2226) * C15776 +
                      (C21369 * C2229 - C47018 * C2232) * C47389) *
                         C47391) *
                        C47374) *
                       C47073 * C259 +
                   ((((C47018 * C126 - C21369 * C119) * C15775 +
                      (C47018 * C140 - C21369 * C129) * C15771 +
                      (C21508 - C21509) * C15776 + (C21510 - C21511) * C47389) *
                         C10231 +
                     ((C25966 - C25967) * C15775 + (C25968 - C25969) * C15771 +
                      (C22003 - C22002) * C15776 + (C22005 - C22004) * C47389) *
                         C47391) *
                        C47411 +
                    (((C25967 - C25966) * C15775 + (C25969 - C25968) * C15771 +
                      (C22002 - C22003) * C15776 + (C22004 - C22005) * C47389) *
                         C10231 +
                     ((C25970 - C25971) * C15775 + (C25972 - C25973) * C15771 +
                      (C25974 - C25975) * C15776 + (C25976 - C25977) * C47389) *
                         C47391) *
                        C47400 +
                    (((C25971 - C25970) * C15775 + (C25973 - C25972) * C15771 +
                      (C25975 - C25974) * C15776 + (C25977 - C25976) * C47389) *
                         C10231 +
                     ((C47018 * C1852 - C21369 * C1846) * C15775 +
                      (C47018 * C1864 - C21369 * C1855) * C15771 +
                      (C47018 * C2227 - C21369 * C2224) * C15776 +
                      (C47018 * C2233 - C21369 * C2230) * C47389) *
                         C47391) *
                        C47374) *
                       C47073 * C47365)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  (((((C47018 * C124 - C21369 * C117) * C15775 +
                      (C47018 * C138 - C21369 * C127) * C15771 +
                      (C21484 - C21485) * C15776 + (C21486 - C21487) * C47389) *
                         C10231 +
                     ((C25950 - C25951) * C15775 + (C25952 - C25953) * C15771 +
                      C26440 * C15776 + C26441 * C47389) *
                         C47391) *
                        C47091 * C942 +
                    (((C21485 - C21484) * C15775 + (C21487 - C21486) * C15771 +
                      (C21489 - C21488) * C15776 + (C21491 - C21490) * C47389) *
                         C10231 +
                     (C26442 * C15775 + C26443 * C15771 + C22312 * C15776 +
                      C22313 * C47389) *
                         C47391) *
                        C47091 * C943 +
                    ((C21520 * C15775 + C21521 * C15771 +
                      (C21493 - C21492) * C15776 + (C21495 - C21494) * C47389) *
                         C10231 +
                     ((C21991 - C21990) * C15775 + (C21993 - C21992) * C15771 +
                      C22690 * C15776 + C22691 * C47389) *
                         C47391) *
                        C47091 * C47371) *
                       C47407 +
                   ((((C21369 * C118 - C47018 * C125) * C15775 +
                      (C21369 * C128 - C47018 * C139) * C15771 +
                      (C21496 - C21497) * C15776 + (C21498 - C21499) * C47389) *
                         C10231 +
                     ((C25958 - C25959) * C15775 + (C25960 - C25961) * C15771 +
                      C26444 * C15776 + C26445 * C47389) *
                         C47391) *
                        C47091 * C942 +
                    (((C21497 - C21496) * C15775 + (C21499 - C21498) * C15771 +
                      (C21501 - C21500) * C15776 + (C21503 - C21502) * C47389) *
                         C10231 +
                     (C26446 * C15775 + C26447 * C15771 + C22582 * C15776 +
                      C22583 * C47389) *
                         C47391) *
                        C47091 * C943 +
                    ((C21522 * C15775 + C21523 * C15771 +
                      (C21505 - C21504) * C15776 + (C21507 - C21506) * C47389) *
                         C10231 +
                     ((C21999 - C21998) * C15775 + (C22001 - C22000) * C15771 +
                      (C22584 - C22585) * C15776 + (C22586 - C22587) * C47389) *
                         C47391) *
                        C47091 * C47371) *
                       C47394 +
                   ((((C47018 * C126 - C21369 * C119) * C15775 +
                      (C47018 * C140 - C21369 * C129) * C15771 +
                      (C21508 - C21509) * C15776 + (C21510 - C21511) * C47389) *
                         C10231 +
                     ((C25966 - C25967) * C15775 + (C25968 - C25969) * C15771 +
                      C26448 * C15776 + C26449 * C47389) *
                         C47391) *
                        C47091 * C942 +
                    (((C21509 - C21508) * C15775 + (C21511 - C21510) * C15771 +
                      (C21513 - C21512) * C15776 + (C21515 - C21514) * C47389) *
                         C10231 +
                     (C26450 * C15775 + C26451 * C15771 +
                      (C22006 - C22007) * C15776 + (C22008 - C22009) * C47389) *
                         C47391) *
                        C47091 * C943 +
                    ((C21524 * C15775 + C21525 * C15771 +
                      (C21517 - C21516) * C15776 + (C21519 - C21518) * C47389) *
                         C10231 +
                     ((C22007 - C22006) * C15775 + (C22009 - C22008) * C15771 +
                      (C47018 * C1547 - C21369 * C1544) * C15776 +
                      (C47018 * C1553 - C21369 * C1550) * C47389) *
                         C47391) *
                        C47091 * C47371) *
                       C47365)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  ((((C47018 * C124 - C21369 * C117) * C15775 +
                     (C47018 * C138 - C21369 * C127) * C15771 +
                     (C21484 - C21485) * C15776 + (C21486 - C21487) * C47389) *
                        C10231 +
                    ((C25950 - C25951) * C15775 + (C25952 - C25953) * C15771 +
                     C26440 * C15776 + C26441 * C47389) *
                        C47391) *
                       C47091 * C1010 +
                   (((C21485 - C21484) * C15775 + (C21487 - C21486) * C15771 +
                     (C21489 - C21488) * C15776 + (C21491 - C21490) * C47389) *
                        C10231 +
                    (C26442 * C15775 + C26443 * C15771 + C22312 * C15776 +
                     C22313 * C47389) *
                        C47391) *
                       C47091 * C1011 +
                   ((C21520 * C15775 + C21521 * C15771 +
                     (C21493 - C21492) * C15776 + (C21495 - C21494) * C47389) *
                        C10231 +
                    ((C21991 - C21990) * C15775 + (C21993 - C21992) * C15771 +
                     C22690 * C15776 + C22691 * C47389) *
                        C47391) *
                       C47091 * C1012 +
                   ((C22186 * C15775 + C22187 * C15771 +
                     (C22189 - C22188) * C15776 + (C22191 - C22190) * C47389) *
                        C10231 +
                    ((C22323 - C22322) * C15775 + (C22325 - C22324) * C15771 +
                     (C22692 - C22693) * C15776 + (C22694 - C22695) * C47389) *
                        C47391) *
                       C47091 * C1013 +
                   ((C22196 * C15775 + C22197 * C15771 +
                     (C22193 - C22192) * C15776 + (C22195 - C22194) * C47389) *
                        C10231 +
                    ((C22693 - C22692) * C15775 + (C22695 - C22694) * C15771 +
                     (C47018 * C22686 - C21369 * C22685) * C15776 +
                     (C47018 * C22688 - C21369 * C22687) * C47389) *
                        C47391) *
                       C47091 * C1014) *
                  C47045) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((((C47018 * C124 - C21369 * C117) * C15775 +
                      (C47018 * C138 - C21369 * C127) * C15771 +
                      (C21484 - C21485) * C15776 + (C21486 - C21487) * C47389) *
                         C10231 +
                     ((C25950 - C25951) * C15775 + (C25952 - C25953) * C15771 +
                      C26440 * C15776 + C26441 * C47389) *
                         C47391) *
                        C47411 +
                    (((C25951 - C25950) * C15775 + (C25953 - C25952) * C15771 +
                      C26442 * C15776 + C26443 * C47389) *
                         C10231 +
                     ((C25954 - C25955) * C15775 + (C25956 - C25957) * C15771 +
                      C26826 * C15776 + C26827 * C47389) *
                         C47391) *
                        C47400 +
                    (((C25955 - C25954) * C15775 + (C25957 - C25956) * C15771 +
                      C26828 * C15776 + C26829 * C47389) *
                         C10231 +
                     ((C47018 * C1850 - C21369 * C1844) * C15775 +
                      (C47018 * C1862 - C21369 * C1853) * C15771 +
                      (C23337 - C23336) * C15776 + (C23339 - C23338) * C47389) *
                         C47391) *
                        C47374) *
                       C942 +
                   ((((C21485 - C21484) * C15775 + (C21487 - C21486) * C15771 +
                      (C21489 - C21488) * C15776 + (C21491 - C21490) * C47389) *
                         C10231 +
                     (C26442 * C15775 + C26443 * C15771 + C22312 * C15776 +
                      C22313 * C47389) *
                         C47391) *
                        C47411 +
                    ((C26440 * C15775 + C26441 * C15771 + C26830 * C15776 +
                      C26831 * C47389) *
                         C10231 +
                     (C26828 * C15775 + C26829 * C15771 + C22330 * C15776 +
                      C22331 * C47389) *
                         C47391) *
                        C47400 +
                    ((C26826 * C15775 + C26827 * C15771 + C26832 * C15776 +
                      C26833 * C47389) *
                         C10231 +
                     ((C23336 - C23337) * C15775 + (C23338 - C23339) * C15771 +
                      (C23340 - C23341) * C15776 + (C23342 - C23343) * C47389) *
                         C47391) *
                        C47374) *
                       C943 +
                   (((C21520 * C15775 + C21521 * C15771 +
                      (C21493 - C21492) * C15776 + (C21495 - C21494) * C47389) *
                         C10231 +
                     (C26830 * C15775 + C26831 * C15771 + C22690 * C15776 +
                      C22691 * C47389) *
                         C47391) *
                        C47411 +
                    ((C22312 * C15775 + C22313 * C15771 +
                      (C22323 - C22322) * C15776 + (C22325 - C22324) * C47389) *
                         C10231 +
                     (C26832 * C15775 + C26833 * C15771 +
                      (C22326 - C22327) * C15776 + (C22328 - C22329) * C47389) *
                         C47391) *
                        C47400 +
                    ((C22330 * C15775 + C22331 * C15771 +
                      (C22327 - C22326) * C15776 + (C22329 - C22328) * C47389) *
                         C10231 +
                     ((C23341 - C23340) * C15775 + (C23343 - C23342) * C15771 +
                      (C47018 * C23332 - C21369 * C23331) * C15776 +
                      (C47018 * C23334 - C21369 * C23333) * C47389) *
                         C47391) *
                        C47374) *
                       C47371) *
                  C47045) /
                     (p * q * std::sqrt(p + q));
    d2ee[148] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C47018 * C124 - C21369 * C117) * C15775 +
             (C47018 * C138 - C21369 * C127) * C15771 +
             (C21484 - C21485) * C15776 + (C21486 - C21487) * C47389) *
                C10231 +
            ((C25950 - C25951) * C15775 + (C25952 - C25953) * C15771 +
             (C21987 - C21986) * C15776 + (C21989 - C21988) * C47389) *
                C47391) *
               C47340 +
           (((C25951 - C25950) * C15775 + (C25953 - C25952) * C15771 +
             (C21986 - C21987) * C15776 + (C21988 - C21989) * C47389) *
                C10231 +
            ((C25954 - C25955) * C15775 + (C25956 - C25957) * C15771 +
             (C22315 - C22314) * C15776 + (C22317 - C22316) * C47389) *
                C47391) *
               C47178) *
              C47073 * C554 +
          ((((C21369 * C118 - C47018 * C125) * C15775 +
             (C21369 * C128 - C47018 * C139) * C15771 +
             (C21496 - C21497) * C15776 + (C21498 - C21499) * C47389) *
                C10231 +
            ((C25958 - C25959) * C15775 + (C25960 - C25961) * C15771 +
             (C21995 - C21994) * C15776 + (C21997 - C21996) * C47389) *
                C47391) *
               C47340 +
           (((C25959 - C25958) * C15775 + (C25961 - C25960) * C15771 +
             (C21994 - C21995) * C15776 + (C21996 - C21997) * C47389) *
                C10231 +
            ((C25962 - C25963) * C15775 + (C25964 - C25965) * C15771 +
             (C23129 - C23128) * C15776 + (C23131 - C23130) * C47389) *
                C47391) *
               C47178) *
              C47073 * C555 +
          ((((C47018 * C126 - C21369 * C119) * C15775 +
             (C47018 * C140 - C21369 * C129) * C15771 +
             (C21508 - C21509) * C15776 + (C21510 - C21511) * C47389) *
                C10231 +
            ((C25966 - C25967) * C15775 + (C25968 - C25969) * C15771 +
             (C22003 - C22002) * C15776 + (C22005 - C22004) * C47389) *
                C47391) *
               C47340 +
           (((C25967 - C25966) * C15775 + (C25969 - C25968) * C15771 +
             (C22002 - C22003) * C15776 + (C22004 - C22005) * C47389) *
                C10231 +
            ((C25970 - C25971) * C15775 + (C25972 - C25973) * C15771 +
             (C25974 - C25975) * C15776 + (C25976 - C25977) * C47389) *
                C47391) *
               C47178) *
              C47073 * C556 +
          ((((C21369 * C120 - C47018 * C130) * C15775 +
             (C21369 * C131 - C47018 * C141) * C15771 +
             (C21734 - C21735) * C15776 + (C21736 - C21737) * C47389) *
                C10231 +
            ((C26242 - C26243) * C15775 + (C26244 - C26245) * C15771 +
             (C26108 - C26109) * C15776 + (C26110 - C26111) * C47389) *
                C47391) *
               C47340 +
           (((C26243 - C26242) * C15775 + (C26245 - C26244) * C15771 +
             (C26109 - C26108) * C15776 + (C26111 - C26110) * C47389) *
                C10231 +
            ((C47018 * C438 - C21369 * C421) * C15775 +
             (C47018 * C451 - C21369 * C439) * C15771 +
             (C47018 * C2015 - C21369 * C2014) * C15776 +
             (C47018 * C2017 - C21369 * C2016) * C47389) *
                C47391) *
               C47178) *
              C47073 * C47375)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C47018 * C124 - C21369 * C117) * C15775 +
              (C47018 * C138 - C21369 * C127) * C15771 +
              (C21484 - C21485) * C15776 + (C21486 - C21487) * C47389) *
                 C10231 +
             ((C25950 - C25951) * C15775 + (C25952 - C25953) * C15771 +
              C26440 * C15776 + C26441 * C47389) *
                 C47391) *
                C47340 +
            (((C25951 - C25950) * C15775 + (C25953 - C25952) * C15771 +
              C26442 * C15776 + C26443 * C47389) *
                 C10231 +
             ((C25954 - C25955) * C15775 + (C25956 - C25957) * C15771 +
              C26826 * C15776 + C26827 * C47389) *
                 C47391) *
                C47178) *
               C942 +
           ((((C21485 - C21484) * C15775 + (C21487 - C21486) * C15771 +
              (C21489 - C21488) * C15776 + (C21491 - C21490) * C47389) *
                 C10231 +
             (C26442 * C15775 + C26443 * C15771 + C22312 * C15776 +
              C22313 * C47389) *
                 C47391) *
                C47340 +
            ((C26440 * C15775 + C26441 * C15771 + C26830 * C15776 +
              C26831 * C47389) *
                 C10231 +
             (C26828 * C15775 + C26829 * C15771 + C22330 * C15776 +
              C22331 * C47389) *
                 C47391) *
                C47178) *
               C943 +
           (((C21520 * C15775 + C21521 * C15771 + (C21493 - C21492) * C15776 +
              (C21495 - C21494) * C47389) *
                 C10231 +
             (C26830 * C15775 + C26831 * C15771 + C22690 * C15776 +
              C22691 * C47389) *
                 C47391) *
                C47340 +
            ((C22312 * C15775 + C22313 * C15771 + (C22323 - C22322) * C15776 +
              (C22325 - C22324) * C47389) *
                 C10231 +
             (C26832 * C15775 + C26833 * C15771 + (C22326 - C22327) * C15776 +
              (C22328 - C22329) * C47389) *
                 C47391) *
                C47178) *
               C47371) *
              C47325 +
          (((((C21369 * C118 - C47018 * C125) * C15775 +
              (C21369 * C128 - C47018 * C139) * C15771 +
              (C21496 - C21497) * C15776 + (C21498 - C21499) * C47389) *
                 C10231 +
             ((C25958 - C25959) * C15775 + (C25960 - C25961) * C15771 +
              C26444 * C15776 + C26445 * C47389) *
                 C47391) *
                C47340 +
            (((C25959 - C25958) * C15775 + (C25961 - C25960) * C15771 +
              C26446 * C15776 + C26447 * C47389) *
                 C10231 +
             ((C25962 - C25963) * C15775 + (C25964 - C25965) * C15771 +
              (C23129 - C23128) * C15776 + (C23131 - C23130) * C47389) *
                 C47391) *
                C47178) *
               C942 +
           ((((C21497 - C21496) * C15775 + (C21499 - C21498) * C15771 +
              (C21501 - C21500) * C15776 + (C21503 - C21502) * C47389) *
                 C10231 +
             (C26446 * C15775 + C26447 * C15771 + C22582 * C15776 +
              C22583 * C47389) *
                 C47391) *
                C47340 +
            ((C26444 * C15775 + C26445 * C15771 + C27158 * C15776 +
              C27159 * C47389) *
                 C10231 +
             ((C23128 - C23129) * C15775 + (C23130 - C23131) * C15771 +
              (C23132 - C23133) * C15776 + (C23134 - C23135) * C47389) *
                 C47391) *
                C47178) *
               C943 +
           (((C21522 * C15775 + C21523 * C15771 + (C21505 - C21504) * C15776 +
              (C21507 - C21506) * C47389) *
                 C10231 +
             (C27158 * C15775 + C27159 * C15771 + (C22584 - C22585) * C15776 +
              (C22586 - C22587) * C47389) *
                 C47391) *
                C47340 +
            ((C22582 * C15775 + C22583 * C15771 + (C22585 - C22584) * C15776 +
              (C22587 - C22586) * C47389) *
                 C10231 +
             ((C23133 - C23132) * C15775 + (C23135 - C23134) * C15771 +
              (C47018 * C5810 - C21369 * C5808) * C15776 +
              (C47018 * C5814 - C21369 * C5812) * C47389) *
                 C47391) *
                C47178) *
               C47371) *
              C47056)) /
            (p * q * std::sqrt(p + q));
    d2ee[149] += (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  ((((C47018 * C124 - C21369 * C117) * C15775 +
                     (C47018 * C138 - C21369 * C127) * C15771 +
                     (C21484 - C21485) * C15776 + (C21486 - C21487) * C47389) *
                        C10231 +
                    ((C47018 * C424 - C21369 * C414) * C15775 +
                     (C47018 * C444 - C21369 * C427) * C15771 +
                     (C21987 - C21986) * C15776 + (C21989 - C21988) * C47389) *
                        C47391) *
                       C47091 * C47073 * C108 +
                   (((C21369 * C118 - C47018 * C125) * C15775 +
                     (C21369 * C128 - C47018 * C139) * C15771 +
                     (C21496 - C21497) * C15776 + (C21498 - C21499) * C47389) *
                        C10231 +
                    ((C21369 * C415 - C47018 * C425) * C15775 +
                     (C21369 * C428 - C47018 * C445) * C15771 +
                     (C21995 - C21994) * C15776 + (C21997 - C21996) * C47389) *
                        C47391) *
                       C47091 * C47073 * C109 +
                   (((C47018 * C126 - C21369 * C119) * C15775 +
                     (C47018 * C140 - C21369 * C129) * C15771 +
                     (C21508 - C21509) * C15776 + (C21510 - C21511) * C47389) *
                        C10231 +
                    ((C47018 * C426 - C21369 * C416) * C15775 +
                     (C47018 * C446 - C21369 * C429) * C15771 +
                     (C22003 - C22002) * C15776 + (C22005 - C22004) * C47389) *
                        C47391) *
                       C47091 * C47073 * C110 +
                   (((C21369 * C120 - C47018 * C130) * C15775 +
                     (C21369 * C131 - C47018 * C141) * C15771 +
                     (C21734 - C21735) * C15776 + (C21736 - C21737) * C47389) *
                        C10231 +
                    ((C21369 * C420 - C47018 * C436) * C15775 +
                     (C21369 * C437 - C47018 * C450) * C15771 +
                     (C21369 * C815 - C47018 * C823) * C15776 +
                     (C21369 * C824 - C47018 * C830) * C47389) *
                        C47391) *
                       C47091 * C47073 * C111 +
                   (((C47018 * C132 - C21369 * C121) * C15775 +
                     (C47018 * C142 - C21369 * C133) * C15771 +
                     (C47018 * C287 - C21369 * C269) * C15776 +
                     (C47018 * C299 - C21369 * C288) * C47389) *
                        C10231 +
                    ((C47018 * C440 - C21369 * C422) * C15775 +
                     (C47018 * C452 - C21369 * C441) * C15771 +
                     (C47018 * C825 - C21369 * C816) * C15776 +
                     (C47018 * C831 - C21369 * C826) * C47389) *
                        C47391) *
                       C47091 * C47073 * C112)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  (((((C47018 * C124 - C21369 * C117) * C15775 +
                      (C47018 * C138 - C21369 * C127) * C15771 +
                      (C21484 - C21485) * C15776 + (C21486 - C21487) * C47389) *
                         C10231 +
                     ((C47018 * C424 - C21369 * C414) * C15775 +
                      (C47018 * C444 - C21369 * C427) * C15771 +
                      (C21987 - C21986) * C15776 + (C21989 - C21988) * C47389) *
                         C47391) *
                        C47091 * C47410 +
                    (((C21485 - C21484) * C15775 + (C21487 - C21486) * C15771 +
                      (C21489 - C21488) * C15776 + (C21491 - C21490) * C47389) *
                         C10231 +
                     ((C21986 - C21987) * C15775 + (C21988 - C21989) * C15771 +
                      C22312 * C15776 + C22313 * C47389) *
                         C47391) *
                        C47091 * C47398 +
                    ((C21520 * C15775 + C21521 * C15771 +
                      (C21493 - C21492) * C15776 + (C21495 - C21494) * C47389) *
                         C10231 +
                     ((C21991 - C21990) * C15775 + (C21993 - C21992) * C15771 +
                      C22690 * C15776 + C22691 * C47389) *
                         C47391) *
                        C47091 * C47371) *
                       C258 +
                   ((((C21369 * C118 - C47018 * C125) * C15775 +
                      (C21369 * C128 - C47018 * C139) * C15771 +
                      (C21496 - C21497) * C15776 + (C21498 - C21499) * C47389) *
                         C10231 +
                     ((C21369 * C415 - C47018 * C425) * C15775 +
                      (C21369 * C428 - C47018 * C445) * C15771 +
                      (C21995 - C21994) * C15776 + (C21997 - C21996) * C47389) *
                         C47391) *
                        C47091 * C47410 +
                    (((C21497 - C21496) * C15775 + (C21499 - C21498) * C15771 +
                      (C21501 - C21500) * C15776 + (C21503 - C21502) * C47389) *
                         C10231 +
                     ((C21994 - C21995) * C15775 + (C21996 - C21997) * C15771 +
                      C22582 * C15776 + C22583 * C47389) *
                         C47391) *
                        C47091 * C47398 +
                    ((C21522 * C15775 + C21523 * C15771 +
                      (C21505 - C21504) * C15776 + (C21507 - C21506) * C47389) *
                         C10231 +
                     ((C21999 - C21998) * C15775 + (C22001 - C22000) * C15771 +
                      (C22584 - C22585) * C15776 + (C22586 - C22587) * C47389) *
                         C47391) *
                        C47091 * C47371) *
                       C259 +
                   ((((C47018 * C126 - C21369 * C119) * C15775 +
                      (C47018 * C140 - C21369 * C129) * C15771 +
                      (C21508 - C21509) * C15776 + (C21510 - C21511) * C47389) *
                         C10231 +
                     ((C47018 * C426 - C21369 * C416) * C15775 +
                      (C47018 * C446 - C21369 * C429) * C15771 +
                      (C22003 - C22002) * C15776 + (C22005 - C22004) * C47389) *
                         C47391) *
                        C47091 * C47410 +
                    (((C21509 - C21508) * C15775 + (C21511 - C21510) * C15771 +
                      (C21513 - C21512) * C15776 + (C21515 - C21514) * C47389) *
                         C10231 +
                     ((C22002 - C22003) * C15775 + (C22004 - C22005) * C15771 +
                      (C22006 - C22007) * C15776 + (C22008 - C22009) * C47389) *
                         C47391) *
                        C47091 * C47398 +
                    ((C21524 * C15775 + C21525 * C15771 +
                      (C21517 - C21516) * C15776 + (C21519 - C21518) * C47389) *
                         C10231 +
                     ((C22007 - C22006) * C15775 + (C22009 - C22008) * C15771 +
                      (C47018 * C1547 - C21369 * C1544) * C15776 +
                      (C47018 * C1553 - C21369 * C1550) * C47389) *
                         C47391) *
                        C47091 * C47371) *
                       C47365)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  (((((C47018 * C124 - C21369 * C117) * C15775 +
                      (C47018 * C138 - C21369 * C127) * C15771 +
                      (C21484 - C21485) * C15776 + (C21486 - C21487) * C47389) *
                         C10231 +
                     ((C25950 - C25951) * C15775 + (C25952 - C25953) * C15771 +
                      C26440 * C15776 + C26441 * C47389) *
                         C47391) *
                        C47091 * C942 +
                    (((C21485 - C21484) * C15775 + (C21487 - C21486) * C15771 +
                      (C21489 - C21488) * C15776 + (C21491 - C21490) * C47389) *
                         C10231 +
                     (C26442 * C15775 + C26443 * C15771 + C22312 * C15776 +
                      C22313 * C47389) *
                         C47391) *
                        C47091 * C943 +
                    ((C21520 * C15775 + C21521 * C15771 +
                      (C21493 - C21492) * C15776 + (C21495 - C21494) * C47389) *
                         C10231 +
                     ((C21991 - C21990) * C15775 + (C21993 - C21992) * C15771 +
                      C22690 * C15776 + C22691 * C47389) *
                         C47391) *
                        C47091 * C47371) *
                       C47407 +
                   ((((C21369 * C118 - C47018 * C125) * C15775 +
                      (C21369 * C128 - C47018 * C139) * C15771 +
                      (C21496 - C21497) * C15776 + (C21498 - C21499) * C47389) *
                         C10231 +
                     ((C25958 - C25959) * C15775 + (C25960 - C25961) * C15771 +
                      C26444 * C15776 + C26445 * C47389) *
                         C47391) *
                        C47091 * C942 +
                    (((C21497 - C21496) * C15775 + (C21499 - C21498) * C15771 +
                      (C21501 - C21500) * C15776 + (C21503 - C21502) * C47389) *
                         C10231 +
                     (C26446 * C15775 + C26447 * C15771 + C22582 * C15776 +
                      C22583 * C47389) *
                         C47391) *
                        C47091 * C943 +
                    ((C21522 * C15775 + C21523 * C15771 +
                      (C21505 - C21504) * C15776 + (C21507 - C21506) * C47389) *
                         C10231 +
                     ((C21999 - C21998) * C15775 + (C22001 - C22000) * C15771 +
                      (C22584 - C22585) * C15776 + (C22586 - C22587) * C47389) *
                         C47391) *
                        C47091 * C47371) *
                       C47394 +
                   ((((C47018 * C126 - C21369 * C119) * C15775 +
                      (C47018 * C140 - C21369 * C129) * C15771 +
                      (C21508 - C21509) * C15776 + (C21510 - C21511) * C47389) *
                         C10231 +
                     ((C25966 - C25967) * C15775 + (C25968 - C25969) * C15771 +
                      C26448 * C15776 + C26449 * C47389) *
                         C47391) *
                        C47091 * C942 +
                    (((C21509 - C21508) * C15775 + (C21511 - C21510) * C15771 +
                      (C21513 - C21512) * C15776 + (C21515 - C21514) * C47389) *
                         C10231 +
                     (C26450 * C15775 + C26451 * C15771 +
                      (C22006 - C22007) * C15776 + (C22008 - C22009) * C47389) *
                         C47391) *
                        C47091 * C943 +
                    ((C21524 * C15775 + C21525 * C15771 +
                      (C21517 - C21516) * C15776 + (C21519 - C21518) * C47389) *
                         C10231 +
                     ((C22007 - C22006) * C15775 + (C22009 - C22008) * C15771 +
                      (C47018 * C1547 - C21369 * C1544) * C15776 +
                      (C47018 * C1553 - C21369 * C1550) * C47389) *
                         C47391) *
                        C47091 * C47371) *
                       C47365)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  ((((C47018 * C124 - C21369 * C117) * C15775 +
                     (C47018 * C138 - C21369 * C127) * C15771 +
                     (C21484 - C21485) * C15776 + (C21486 - C21487) * C47389) *
                        C10231 +
                    ((C25950 - C25951) * C15775 + (C25952 - C25953) * C15771 +
                     C26440 * C15776 + C26441 * C47389) *
                        C47391) *
                       C47091 * C1010 +
                   (((C21485 - C21484) * C15775 + (C21487 - C21486) * C15771 +
                     (C21489 - C21488) * C15776 + (C21491 - C21490) * C47389) *
                        C10231 +
                    (C26442 * C15775 + C26443 * C15771 + C22312 * C15776 +
                     C22313 * C47389) *
                        C47391) *
                       C47091 * C1011 +
                   ((C21520 * C15775 + C21521 * C15771 +
                     (C21493 - C21492) * C15776 + (C21495 - C21494) * C47389) *
                        C10231 +
                    ((C21991 - C21990) * C15775 + (C21993 - C21992) * C15771 +
                     C22690 * C15776 + C22691 * C47389) *
                        C47391) *
                       C47091 * C1012 +
                   ((C22186 * C15775 + C22187 * C15771 +
                     (C22189 - C22188) * C15776 + (C22191 - C22190) * C47389) *
                        C10231 +
                    ((C22323 - C22322) * C15775 + (C22325 - C22324) * C15771 +
                     (C22692 - C22693) * C15776 + (C22694 - C22695) * C47389) *
                        C47391) *
                       C47091 * C1013 +
                   ((C22196 * C15775 + C22197 * C15771 +
                     (C22193 - C22192) * C15776 + (C22195 - C22194) * C47389) *
                        C10231 +
                    ((C22693 - C22692) * C15775 + (C22695 - C22694) * C15771 +
                     (C47018 * C22686 - C21369 * C22685) * C15776 +
                     (C47018 * C22688 - C21369 * C22687) * C47389) *
                        C47391) *
                       C47091 * C1014) *
                  C47045) /
                     (p * q * std::sqrt(p + q));
    d2ee[150] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C15769 * C124 - C15773 * C117 + C47358 * C125 - C15774 * C118) *
                 C116 +
             (C15769 * C138 - C15773 * C127 + C47358 * C139 - C15774 * C128) *
                 C47279) *
                C31197 +
            ((C31492 - C31493 + C31494 - C31495) * C116 +
             (C31496 - C31497 + C31498 - C31499) * C47279) *
                C47391) *
               C47091 * C47132 +
           (((C15925 - C15924 + C15927 - C15926) * C116 +
             (C15929 - C15928 + C15931 - C15930) * C47279) *
                C31197 +
            ((C16580 - C16581 + C16582 - C16583) * C116 +
             (C16584 - C16585 + C16586 - C16587) * C47279) *
                C47391) *
               C47091 * C47139 +
           (((C15933 - C15932 + C15935 - C15934) * C116 +
             (C15937 - C15936 + C15939 - C15938) * C47279) *
                C31197 +
            ((C17002 - C17003 + C17004 - C17005) * C116 +
             (C17006 - C17007 + C17008 - C17009) * C47279) *
                C47391) *
               C47091 * C2700) *
              C47050 +
          ((((C15773 * C118 - C15769 * C125 + C15774 * C119 - C47358 * C126) *
                 C116 +
             (C15773 * C128 - C15769 * C139 + C15774 * C129 - C47358 * C140) *
                 C47279) *
                C31197 +
            ((C31508 - C31509 + C31510 - C31511) * C116 +
             (C31512 - C31513 + C31514 - C31515) * C47279) *
                C47391) *
               C47091 * C47132 +
           (((C15941 - C15940 + C15943 - C15942) * C116 +
             (C15945 - C15944 + C15947 - C15946) * C47279) *
                C31197 +
            ((C16588 - C16589 + C16590 - C16591) * C116 +
             (C16592 - C16593 + C16594 - C16595) * C47279) *
                C47391) *
               C47091 * C47139 +
           (((C15949 - C15948 + C15951 - C15950) * C116 +
             (C15953 - C15952 + C15955 - C15954) * C47279) *
                C31197 +
            ((C17350 - C17351 + C17352 - C17353) * C116 +
             (C17354 - C17355 + C17356 - C17357) * C47279) *
                C47391) *
               C47091 * C2700) *
              C47059 +
          ((((C15769 * C126 - C15773 * C119 + C47358 * C130 - C15774 * C120) *
                 C116 +
             (C15769 * C140 - C15773 * C129 + C47358 * C141 - C15774 * C131) *
                 C47279) *
                C31197 +
            ((C31524 - C31525 + C31526 - C31527) * C116 +
             (C31528 - C31529 + C31530 - C31531) * C47279) *
                C47391) *
               C47091 * C47132 +
           (((C15957 - C15956 + C15959 - C15958) * C116 +
             (C15961 - C15960 + C15963 - C15962) * C47279) *
                C31197 +
            ((C16596 - C16597 + C16598 - C16599) * C116 +
             (C16600 - C16601 + C16602 - C16603) * C47279) *
                C47391) *
               C47091 * C47139 +
           (((C15965 - C15964 + C15967 - C15966) * C116 +
             (C15969 - C15968 + C15971 - C15970) * C47279) *
                C31197 +
            ((C15769 * C1167 - C15773 * C1155 + C47358 * C1441 -
              C15774 * C1440) *
                 C116 +
             (C15769 * C1182 - C15773 * C1170 + C47358 * C1443 -
              C15774 * C1442) *
                 C47279) *
                C47391) *
               C47091 * C2700) *
              C2703)) /
        (p * q * std::sqrt(p + q));
    d2ee[151] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C15769 * C124 - C15773 * C117 + C47358 * C125 - C15774 * C118) *
                  C116 +
              (C15769 * C138 - C15773 * C127 + C47358 * C139 - C15774 * C128) *
                  C47279) *
                 C31197 +
             ((C31492 - C31493 + C31494 - C31495) * C116 +
              (C31496 - C31497 + C31498 - C31499) * C47279) *
                 C47391) *
                C47340 +
            (((C31493 - C31492 + C31495 - C31494) * C116 +
              (C31497 - C31496 + C31499 - C31498) * C47279) *
                 C31197 +
             ((C31500 - C31501 + C31502 - C31503) * C116 +
              (C31504 - C31505 + C31506 - C31507) * C47279) *
                 C47391) *
                C47178) *
               C47132 +
           ((((C15925 - C15924 + C15927 - C15926) * C116 +
              (C15929 - C15928 + C15931 - C15930) * C47279) *
                 C31197 +
             ((C16580 - C16581 + C16582 - C16583) * C116 +
              (C16584 - C16585 + C16586 - C16587) * C47279) *
                 C47391) *
                C47340 +
            (((C16581 - C16580 + C16583 - C16582) * C116 +
              (C16585 - C16584 + C16587 - C16586) * C47279) *
                 C31197 +
             ((C16994 - C16995 + C16996 - C16997) * C116 +
              (C16998 - C16999 + C17000 - C17001) * C47279) *
                 C47391) *
                C47178) *
               C47139 +
           ((((C15933 - C15932 + C15935 - C15934) * C116 +
              (C15937 - C15936 + C15939 - C15938) * C47279) *
                 C31197 +
             ((C17002 - C17003 + C17004 - C17005) * C116 +
              (C17006 - C17007 + C17008 - C17009) * C47279) *
                 C47391) *
                C47340 +
            (((C17003 - C17002 + C17005 - C17004) * C116 +
              (C17007 - C17006 + C17009 - C17008) * C47279) *
                 C31197 +
             ((C17010 - C17011 + C17012 - C17013) * C116 +
              (C17014 - C17015 + C17016 - C17017) * C47279) *
                 C47391) *
                C47178) *
               C2700) *
              C2440 +
          (((((C15773 * C118 - C15769 * C125 + C15774 * C119 - C47358 * C126) *
                  C116 +
              (C15773 * C128 - C15769 * C139 + C15774 * C129 - C47358 * C140) *
                  C47279) *
                 C31197 +
             ((C31508 - C31509 + C31510 - C31511) * C116 +
              (C31512 - C31513 + C31514 - C31515) * C47279) *
                 C47391) *
                C47340 +
            (((C31509 - C31508 + C31511 - C31510) * C116 +
              (C31513 - C31512 + C31515 - C31514) * C47279) *
                 C31197 +
             ((C31516 - C31517 + C31518 - C31519) * C116 +
              (C31520 - C31521 + C31522 - C31523) * C47279) *
                 C47391) *
                C47178) *
               C47132 +
           ((((C15941 - C15940 + C15943 - C15942) * C116 +
              (C15945 - C15944 + C15947 - C15946) * C47279) *
                 C31197 +
             ((C16588 - C16589 + C16590 - C16591) * C116 +
              (C16592 - C16593 + C16594 - C16595) * C47279) *
                 C47391) *
                C47340 +
            (((C16589 - C16588 + C16591 - C16590) * C116 +
              (C16593 - C16592 + C16595 - C16594) * C47279) *
                 C31197 +
             ((C18064 - C18065 + C18066 - C18067) * C116 +
              (C18068 - C18069 + C18070 - C18071) * C47279) *
                 C47391) *
                C47178) *
               C47139 +
           ((((C15949 - C15948 + C15951 - C15950) * C116 +
              (C15953 - C15952 + C15955 - C15954) * C47279) *
                 C31197 +
             ((C17350 - C17351 + C17352 - C17353) * C116 +
              (C17354 - C17355 + C17356 - C17357) * C47279) *
                 C47391) *
                C47340 +
            (((C17351 - C17350 + C17353 - C17352) * C116 +
              (C17355 - C17354 + C17357 - C17356) * C47279) *
                 C31197 +
             ((C15769 * C1172 - C15773 * C1157 + C47358 * C1173 -
               C15774 * C1158) *
                  C116 +
              (C15769 * C1184 - C15773 * C1175 + C47358 * C1185 -
               C15774 * C1176) *
                  C47279) *
                 C47391) *
                C47178) *
               C2700) *
              C47056)) /
        (p * q * std::sqrt(p + q));
    d2ee[152] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C15769 * C124 - C15773 * C117 + C47358 * C125 - C15774 * C118) *
                 C116 +
             (C15769 * C138 - C15773 * C127 + C47358 * C139 - C15774 * C128) *
                 C47279) *
                C31197 +
            ((C31492 - C31493 + C31494 - C31495) * C116 +
             (C31496 - C31497 + C31498 - C31499) * C47279) *
                C47391) *
               C47091 * C47417 +
           (((C15925 - C15924 + C15927 - C15926) * C116 +
             (C15929 - C15928 + C15931 - C15930) * C47279) *
                C31197 +
            ((C16580 - C16581 + C16582 - C16583) * C116 +
             (C16584 - C16585 + C16586 - C16587) * C47279) *
                C47391) *
               C47091 * C47413 +
           (((C15933 - C15932 + C15935 - C15934) * C116 +
             (C15937 - C15936 + C15939 - C15938) * C47279) *
                C31197 +
            ((C17002 - C17003 + C17004 - C17005) * C116 +
             (C17006 - C17007 + C17008 - C17009) * C47279) *
                C47391) *
               C47091 * C47403 +
           (((C16833 - C16832 + C16835 - C16834) * C116 +
             (C16837 - C16836 + C16839 - C16838) * C47279) *
                C31197 +
            ((C17488 - C17489 + C17490 - C17491) * C116 +
             (C17492 - C17493 + C17494 - C17495) * C47279) *
                C47391) *
               C47091 * C47381) *
              C2440 +
          ((((C15773 * C118 - C15769 * C125 + C15774 * C119 - C47358 * C126) *
                 C116 +
             (C15773 * C128 - C15769 * C139 + C15774 * C129 - C47358 * C140) *
                 C47279) *
                C31197 +
            ((C31508 - C31509 + C31510 - C31511) * C116 +
             (C31512 - C31513 + C31514 - C31515) * C47279) *
                C47391) *
               C47091 * C47417 +
           (((C15941 - C15940 + C15943 - C15942) * C116 +
             (C15945 - C15944 + C15947 - C15946) * C47279) *
                C31197 +
            ((C16588 - C16589 + C16590 - C16591) * C116 +
             (C16592 - C16593 + C16594 - C16595) * C47279) *
                C47391) *
               C47091 * C47413 +
           (((C15949 - C15948 + C15951 - C15950) * C116 +
             (C15953 - C15952 + C15955 - C15954) * C47279) *
                C31197 +
            ((C17350 - C17351 + C17352 - C17353) * C116 +
             (C17354 - C17355 + C17356 - C17357) * C47279) *
                C47391) *
               C47091 * C47403 +
           (((C17149 - C17148 + C17151 - C17150) * C116 +
             (C17153 - C17152 + C17155 - C17154) * C47279) *
                C31197 +
            ((C15769 * C1546 - C15773 * C1543 + C47358 * C1547 -
              C15774 * C1544) *
                 C116 +
             (C15769 * C1552 - C15773 * C1549 + C47358 * C1553 -
              C15774 * C1550) *
                 C47279) *
                C47391) *
               C47091 * C47381) *
              C47056)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C15769 * C124 - C15773 * C117 + C47358 * C125 - C15774 * C118) *
                 C116 +
             (C15769 * C138 - C15773 * C127 + C47358 * C139 - C15774 * C128) *
                 C47279) *
                C31197 +
            ((C31492 - C31493 + C31494 - C31495) * C116 +
             (C31496 - C31497 + C31498 - C31499) * C47279) *
                C47391) *
               C47091 * C2332 +
           (((C15925 - C15924 + C15927 - C15926) * C116 +
             (C15929 - C15928 + C15931 - C15930) * C47279) *
                C31197 +
            ((C16580 - C16581 + C16582 - C16583) * C116 +
             (C16584 - C16585 + C16586 - C16587) * C47279) *
                C47391) *
               C47091 * C47136) *
              C47416 +
          ((((C15773 * C118 - C15769 * C125 + C15774 * C119 - C47358 * C126) *
                 C116 +
             (C15773 * C128 - C15769 * C139 + C15774 * C129 - C47358 * C140) *
                 C47279) *
                C31197 +
            ((C31508 - C31509 + C31510 - C31511) * C116 +
             (C31512 - C31513 + C31514 - C31515) * C47279) *
                C47391) *
               C47091 * C2332 +
           (((C15941 - C15940 + C15943 - C15942) * C116 +
             (C15945 - C15944 + C15947 - C15946) * C47279) *
                C31197 +
            ((C16588 - C16589 + C16590 - C16591) * C116 +
             (C16592 - C16593 + C16594 - C16595) * C47279) *
                C47391) *
               C47091 * C47136) *
              C47409 +
          ((((C15769 * C126 - C15773 * C119 + C47358 * C130 - C15774 * C120) *
                 C116 +
             (C15769 * C140 - C15773 * C129 + C47358 * C141 - C15774 * C131) *
                 C47279) *
                C31197 +
            ((C31524 - C31525 + C31526 - C31527) * C116 +
             (C31528 - C31529 + C31530 - C31531) * C47279) *
                C47391) *
               C47091 * C2332 +
           (((C15957 - C15956 + C15959 - C15958) * C116 +
             (C15961 - C15960 + C15963 - C15962) * C47279) *
                C31197 +
            ((C16596 - C16597 + C16598 - C16599) * C116 +
             (C16600 - C16601 + C16602 - C16603) * C47279) *
                C47391) *
               C47091 * C47136) *
              C47396 +
          ((((C15773 * C120 - C15769 * C130 + C15774 * C121 - C47358 * C132) *
                 C116 +
             (C15773 * C131 - C15769 * C141 + C15774 * C133 - C47358 * C142) *
                 C47279) *
                C31197 +
            ((C31800 - C31801 + C31802 - C31803) * C116 +
             (C31804 - C31805 + C31806 - C31807) * C47279) *
                C47391) *
               C47091 * C2332 +
           (((C16249 - C16248 + C16251 - C16250) * C116 +
             (C16253 - C16252 + C16255 - C16254) * C47279) *
                C31197 +
            ((C15769 * C823 - C15773 * C815 + C47358 * C825 - C15774 * C816) *
                 C116 +
             (C15769 * C830 - C15773 * C824 + C47358 * C831 - C15774 * C826) *
                 C47279) *
                C47391) *
               C47091 * C47136) *
              C47375)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C15769 * C124 - C15773 * C117 + C47358 * C125 - C15774 * C118) *
                  C116 +
              (C15769 * C138 - C15773 * C127 + C47358 * C139 - C15774 * C128) *
                  C47279) *
                 C31197 +
             ((C31492 - C31493 + C31494 - C31495) * C116 +
              (C31496 - C31497 + C31498 - C31499) * C47279) *
                 C47391) *
                C47411 +
            (((C31493 - C31492 + C31495 - C31494) * C116 +
              (C31497 - C31496 + C31499 - C31498) * C47279) *
                 C31197 +
             ((C31500 - C31501 + C31502 - C31503) * C116 +
              (C31504 - C31505 + C31506 - C31507) * C47279) *
                 C47391) *
                C47400 +
            (((C31501 - C31500 + C31503 - C31502) * C116 +
              (C31505 - C31504 + C31507 - C31506) * C47279) *
                 C31197 +
             ((C33204 - C33205 + C33206 - C33207) * C116 +
              (C33208 - C33209 + C33210 - C33211) * C47279) *
                 C47391) *
                C47374) *
               C2332 +
           ((((C15925 - C15924 + C15927 - C15926) * C116 +
              (C15929 - C15928 + C15931 - C15930) * C47279) *
                 C31197 +
             ((C16580 - C16581 + C16582 - C16583) * C116 +
              (C16584 - C16585 + C16586 - C16587) * C47279) *
                 C47391) *
                C47411 +
            (((C16581 - C16580 + C16583 - C16582) * C116 +
              (C16585 - C16584 + C16587 - C16586) * C47279) *
                 C31197 +
             ((C16994 - C16995 + C16996 - C16997) * C116 +
              (C16998 - C16999 + C17000 - C17001) * C47279) *
                 C47391) *
                C47400 +
            (((C16995 - C16994 + C16997 - C16996) * C116 +
              (C16999 - C16998 + C17001 - C17000) * C47279) *
                 C31197 +
             ((C18332 - C18333 + C18334 - C18335) * C116 +
              (C18336 - C18337 + C18338 - C18339) * C47279) *
                 C47391) *
                C47374) *
               C47136) *
              C2440 +
          (((((C15773 * C118 - C15769 * C125 + C15774 * C119 - C47358 * C126) *
                  C116 +
              (C15773 * C128 - C15769 * C139 + C15774 * C129 - C47358 * C140) *
                  C47279) *
                 C31197 +
             ((C31508 - C31509 + C31510 - C31511) * C116 +
              (C31512 - C31513 + C31514 - C31515) * C47279) *
                 C47391) *
                C47411 +
            (((C31509 - C31508 + C31511 - C31510) * C116 +
              (C31513 - C31512 + C31515 - C31514) * C47279) *
                 C31197 +
             ((C31516 - C31517 + C31518 - C31519) * C116 +
              (C31520 - C31521 + C31522 - C31523) * C47279) *
                 C47391) *
                C47400 +
            (((C31517 - C31516 + C31519 - C31518) * C116 +
              (C31521 - C31520 + C31523 - C31522) * C47279) *
                 C31197 +
             ((C33544 - C33545 + C33546 - C33547) * C116 +
              (C33548 - C33549 + C33550 - C33551) * C47279) *
                 C47391) *
                C47374) *
               C2332 +
           ((((C15941 - C15940 + C15943 - C15942) * C116 +
              (C15945 - C15944 + C15947 - C15946) * C47279) *
                 C31197 +
             ((C16588 - C16589 + C16590 - C16591) * C116 +
              (C16592 - C16593 + C16594 - C16595) * C47279) *
                 C47391) *
                C47411 +
            (((C16589 - C16588 + C16591 - C16590) * C116 +
              (C16593 - C16592 + C16595 - C16594) * C47279) *
                 C31197 +
             ((C18064 - C18065 + C18066 - C18067) * C116 +
              (C18068 - C18069 + C18070 - C18071) * C47279) *
                 C47391) *
                C47400 +
            (((C18065 - C18064 + C18067 - C18066) * C116 +
              (C18069 - C18068 + C18071 - C18070) * C47279) *
                 C31197 +
             ((C15769 * C2226 - C15773 * C2223 + C47358 * C2227 -
               C15774 * C2224) *
                  C116 +
              (C15769 * C2232 - C15773 * C2229 + C47358 * C2233 -
               C15774 * C2230) *
                  C47279) *
                 C47391) *
                C47374) *
               C47136) *
              C47056)) /
            (p * q * std::sqrt(p + q));
    d2ee[153] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C15769 * C124 - C15773 * C117 + C47358 * C125 - C15774 * C118) *
                  C116 +
              (C15769 * C138 - C15773 * C127 + C47358 * C139 - C15774 * C128) *
                  C47279) *
                 C31197 +
             ((C31492 - C31493 + C31494 - C31495) * C116 +
              (C31496 - C31497 + C31498 - C31499) * C47279) *
                 C47391) *
                C47340 +
            (((C31493 - C31492 + C31495 - C31494) * C116 +
              (C31497 - C31496 + C31499 - C31498) * C47279) *
                 C31197 +
             ((C31500 - C31501 + C31502 - C31503) * C116 +
              (C31504 - C31505 + C31506 - C31507) * C47279) *
                 C47391) *
                C47178) *
               C2332 +
           ((((C15925 - C15924 + C15927 - C15926) * C116 +
              (C15929 - C15928 + C15931 - C15930) * C47279) *
                 C31197 +
             ((C16580 - C16581 + C16582 - C16583) * C116 +
              (C16584 - C16585 + C16586 - C16587) * C47279) *
                 C47391) *
                C47340 +
            (((C16581 - C16580 + C16583 - C16582) * C116 +
              (C16585 - C16584 + C16587 - C16586) * C47279) *
                 C31197 +
             ((C16994 - C16995 + C16996 - C16997) * C116 +
              (C16998 - C16999 + C17000 - C17001) * C47279) *
                 C47391) *
                C47178) *
               C47136) *
              C47050 +
          (((((C15773 * C118 - C15769 * C125 + C15774 * C119 - C47358 * C126) *
                  C116 +
              (C15773 * C128 - C15769 * C139 + C15774 * C129 - C47358 * C140) *
                  C47279) *
                 C31197 +
             ((C31508 - C31509 + C31510 - C31511) * C116 +
              (C31512 - C31513 + C31514 - C31515) * C47279) *
                 C47391) *
                C47340 +
            (((C31509 - C31508 + C31511 - C31510) * C116 +
              (C31513 - C31512 + C31515 - C31514) * C47279) *
                 C31197 +
             ((C31516 - C31517 + C31518 - C31519) * C116 +
              (C31520 - C31521 + C31522 - C31523) * C47279) *
                 C47391) *
                C47178) *
               C2332 +
           ((((C15941 - C15940 + C15943 - C15942) * C116 +
              (C15945 - C15944 + C15947 - C15946) * C47279) *
                 C31197 +
             ((C16588 - C16589 + C16590 - C16591) * C116 +
              (C16592 - C16593 + C16594 - C16595) * C47279) *
                 C47391) *
                C47340 +
            (((C16589 - C16588 + C16591 - C16590) * C116 +
              (C16593 - C16592 + C16595 - C16594) * C47279) *
                 C31197 +
             ((C18064 - C18065 + C18066 - C18067) * C116 +
              (C18068 - C18069 + C18070 - C18071) * C47279) *
                 C47391) *
                C47178) *
               C47136) *
              C47059 +
          (((((C15769 * C126 - C15773 * C119 + C47358 * C130 - C15774 * C120) *
                  C116 +
              (C15769 * C140 - C15773 * C129 + C47358 * C141 - C15774 * C131) *
                  C47279) *
                 C31197 +
             ((C31524 - C31525 + C31526 - C31527) * C116 +
              (C31528 - C31529 + C31530 - C31531) * C47279) *
                 C47391) *
                C47340 +
            (((C31525 - C31524 + C31527 - C31526) * C116 +
              (C31529 - C31528 + C31531 - C31530) * C47279) *
                 C31197 +
             ((C31532 - C31533 + C31534 - C31535) * C116 +
              (C31536 - C31537 + C31538 - C31539) * C47279) *
                 C47391) *
                C47178) *
               C2332 +
           ((((C15957 - C15956 + C15959 - C15958) * C116 +
              (C15961 - C15960 + C15963 - C15962) * C47279) *
                 C31197 +
             ((C16596 - C16597 + C16598 - C16599) * C116 +
              (C16600 - C16601 + C16602 - C16603) * C47279) *
                 C47391) *
                C47340 +
            (((C16597 - C16596 + C16599 - C16598) * C116 +
              (C16601 - C16600 + C16603 - C16602) * C47279) *
                 C31197 +
             ((C15769 * C1161 - C15773 * C1152 + C47358 * C2015 -
               C15774 * C2014) *
                  C116 +
              (C15769 * C1179 - C15773 * C1164 + C47358 * C2017 -
               C15774 * C2016) *
                  C47279) *
                 C47391) *
                C47178) *
               C47136) *
              C2703)) /
        (p * q * std::sqrt(p + q));
    d2ee[154] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C15769 * C124 - C15773 * C117 + C47358 * C125 - C15774 * C118) *
                 C116 +
             (C15769 * C138 - C15773 * C127 + C47358 * C139 - C15774 * C128) *
                 C47279) *
                C31197 +
            ((C31492 - C31493 + C31494 - C31495) * C116 +
             (C31496 - C31497 + C31498 - C31499) * C47279) *
                C47391) *
               C47091 * C2332 +
           (((C15925 - C15924 + C15927 - C15926) * C116 +
             (C15929 - C15928 + C15931 - C15930) * C47279) *
                C31197 +
            ((C16580 - C16581 + C16582 - C16583) * C116 +
             (C16584 - C16585 + C16586 - C16587) * C47279) *
                C47391) *
               C47091 * C47136) *
              C47416 +
          ((((C15773 * C118 - C15769 * C125 + C15774 * C119 - C47358 * C126) *
                 C116 +
             (C15773 * C128 - C15769 * C139 + C15774 * C129 - C47358 * C140) *
                 C47279) *
                C31197 +
            ((C31508 - C31509 + C31510 - C31511) * C116 +
             (C31512 - C31513 + C31514 - C31515) * C47279) *
                C47391) *
               C47091 * C2332 +
           (((C15941 - C15940 + C15943 - C15942) * C116 +
             (C15945 - C15944 + C15947 - C15946) * C47279) *
                C31197 +
            ((C16588 - C16589 + C16590 - C16591) * C116 +
             (C16592 - C16593 + C16594 - C16595) * C47279) *
                C47391) *
               C47091 * C47136) *
              C47409 +
          ((((C15769 * C126 - C15773 * C119 + C47358 * C130 - C15774 * C120) *
                 C116 +
             (C15769 * C140 - C15773 * C129 + C47358 * C141 - C15774 * C131) *
                 C47279) *
                C31197 +
            ((C31524 - C31525 + C31526 - C31527) * C116 +
             (C31528 - C31529 + C31530 - C31531) * C47279) *
                C47391) *
               C47091 * C2332 +
           (((C15957 - C15956 + C15959 - C15958) * C116 +
             (C15961 - C15960 + C15963 - C15962) * C47279) *
                C31197 +
            ((C16596 - C16597 + C16598 - C16599) * C116 +
             (C16600 - C16601 + C16602 - C16603) * C47279) *
                C47391) *
               C47091 * C47136) *
              C47396 +
          ((((C15773 * C120 - C15769 * C130 + C15774 * C121 - C47358 * C132) *
                 C116 +
             (C15773 * C131 - C15769 * C141 + C15774 * C133 - C47358 * C142) *
                 C47279) *
                C31197 +
            ((C31800 - C31801 + C31802 - C31803) * C116 +
             (C31804 - C31805 + C31806 - C31807) * C47279) *
                C47391) *
               C47091 * C2332 +
           (((C16249 - C16248 + C16251 - C16250) * C116 +
             (C16253 - C16252 + C16255 - C16254) * C47279) *
                C31197 +
            ((C15769 * C823 - C15773 * C815 + C47358 * C825 - C15774 * C816) *
                 C116 +
             (C15769 * C830 - C15773 * C824 + C47358 * C831 - C15774 * C826) *
                 C47279) *
                C47391) *
               C47091 * C47136) *
              C47375)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C15769 * C124 - C15773 * C117 + C47358 * C125 - C15774 * C118) *
                 C116 +
             (C15769 * C138 - C15773 * C127 + C47358 * C139 - C15774 * C128) *
                 C47279) *
                C31197 +
            ((C31492 - C31493 + C31494 - C31495) * C116 +
             (C31496 - C31497 + C31498 - C31499) * C47279) *
                C47391) *
               C47091 * C47417 +
           (((C15925 - C15924 + C15927 - C15926) * C116 +
             (C15929 - C15928 + C15931 - C15930) * C47279) *
                C31197 +
            ((C16580 - C16581 + C16582 - C16583) * C116 +
             (C16584 - C16585 + C16586 - C16587) * C47279) *
                C47391) *
               C47091 * C47413 +
           (((C15933 - C15932 + C15935 - C15934) * C116 +
             (C15937 - C15936 + C15939 - C15938) * C47279) *
                C31197 +
            ((C17002 - C17003 + C17004 - C17005) * C116 +
             (C17006 - C17007 + C17008 - C17009) * C47279) *
                C47391) *
               C47091 * C47403 +
           (((C16833 - C16832 + C16835 - C16834) * C116 +
             (C16837 - C16836 + C16839 - C16838) * C47279) *
                C31197 +
            ((C17488 - C17489 + C17490 - C17491) * C116 +
             (C17492 - C17493 + C17494 - C17495) * C47279) *
                C47391) *
               C47091 * C47381) *
              C2440 +
          ((((C15773 * C118 - C15769 * C125 + C15774 * C119 - C47358 * C126) *
                 C116 +
             (C15773 * C128 - C15769 * C139 + C15774 * C129 - C47358 * C140) *
                 C47279) *
                C31197 +
            ((C31508 - C31509 + C31510 - C31511) * C116 +
             (C31512 - C31513 + C31514 - C31515) * C47279) *
                C47391) *
               C47091 * C47417 +
           (((C15941 - C15940 + C15943 - C15942) * C116 +
             (C15945 - C15944 + C15947 - C15946) * C47279) *
                C31197 +
            ((C16588 - C16589 + C16590 - C16591) * C116 +
             (C16592 - C16593 + C16594 - C16595) * C47279) *
                C47391) *
               C47091 * C47413 +
           (((C15949 - C15948 + C15951 - C15950) * C116 +
             (C15953 - C15952 + C15955 - C15954) * C47279) *
                C31197 +
            ((C17350 - C17351 + C17352 - C17353) * C116 +
             (C17354 - C17355 + C17356 - C17357) * C47279) *
                C47391) *
               C47091 * C47403 +
           (((C17149 - C17148 + C17151 - C17150) * C116 +
             (C17153 - C17152 + C17155 - C17154) * C47279) *
                C31197 +
            ((C15769 * C1546 - C15773 * C1543 + C47358 * C1547 -
              C15774 * C1544) *
                 C116 +
             (C15769 * C1552 - C15773 * C1549 + C47358 * C1553 -
              C15774 * C1550) *
                 C47279) *
                C47391) *
               C47091 * C47381) *
              C47056)) /
            (p * q * std::sqrt(p + q));
    d2ee[155] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C15769 * C124 - C15773 * C117 + C47358 * C125 - C15774 * C118) *
                  C116 +
              (C15769 * C138 - C15773 * C127 + C47358 * C139 - C15774 * C128) *
                  C47279) *
                 C31197 +
             ((C31492 - C31493 + C31494 - C31495) * C116 +
              (C31496 - C31497 + C31498 - C31499) * C47279) *
                 C47391) *
                C3094 +
            (((C31493 - C31492 + C31495 - C31494) * C116 +
              (C31497 - C31496 + C31499 - C31498) * C47279) *
                 C31197 +
             ((C31500 - C31501 + C31502 - C31503) * C116 +
              (C31504 - C31505 + C31506 - C31507) * C47279) *
                 C47391) *
                C47178) *
               C47132 +
           ((((C15925 - C15924 + C15927 - C15926) * C116 +
              (C15929 - C15928 + C15931 - C15930) * C47279) *
                 C31197 +
             ((C16580 - C16581 + C16582 - C16583) * C116 +
              (C16584 - C16585 + C16586 - C16587) * C47279) *
                 C47391) *
                C3094 +
            (((C16581 - C16580 + C16583 - C16582) * C116 +
              (C16585 - C16584 + C16587 - C16586) * C47279) *
                 C31197 +
             ((C16994 - C16995 + C16996 - C16997) * C116 +
              (C16998 - C16999 + C17000 - C17001) * C47279) *
                 C47391) *
                C47178) *
               C47139 +
           ((((C15933 - C15932 + C15935 - C15934) * C116 +
              (C15937 - C15936 + C15939 - C15938) * C47279) *
                 C31197 +
             ((C17002 - C17003 + C17004 - C17005) * C116 +
              (C17006 - C17007 + C17008 - C17009) * C47279) *
                 C47391) *
                C3094 +
            (((C17003 - C17002 + C17005 - C17004) * C116 +
              (C17007 - C17006 + C17009 - C17008) * C47279) *
                 C31197 +
             ((C17010 - C17011 + C17012 - C17013) * C116 +
              (C17014 - C17015 + C17016 - C17017) * C47279) *
                 C47391) *
                C47178) *
               C2700) *
              C47325 +
          (((((C15773 * C118 - C15769 * C125 + C15774 * C119 - C47358 * C126) *
                  C116 +
              (C15773 * C128 - C15769 * C139 + C15774 * C129 - C47358 * C140) *
                  C47279) *
                 C31197 +
             ((C31508 - C31509 + C31510 - C31511) * C116 +
              (C31512 - C31513 + C31514 - C31515) * C47279) *
                 C47391) *
                C3094 +
            (((C31509 - C31508 + C31511 - C31510) * C116 +
              (C31513 - C31512 + C31515 - C31514) * C47279) *
                 C31197 +
             ((C31516 - C31517 + C31518 - C31519) * C116 +
              (C31520 - C31521 + C31522 - C31523) * C47279) *
                 C47391) *
                C47178) *
               C47132 +
           ((((C15941 - C15940 + C15943 - C15942) * C116 +
              (C15945 - C15944 + C15947 - C15946) * C47279) *
                 C31197 +
             ((C16588 - C16589 + C16590 - C16591) * C116 +
              (C16592 - C16593 + C16594 - C16595) * C47279) *
                 C47391) *
                C3094 +
            (((C16589 - C16588 + C16591 - C16590) * C116 +
              (C16593 - C16592 + C16595 - C16594) * C47279) *
                 C31197 +
             ((C18064 - C18065 + C18066 - C18067) * C116 +
              (C18068 - C18069 + C18070 - C18071) * C47279) *
                 C47391) *
                C47178) *
               C47139 +
           ((((C15949 - C15948 + C15951 - C15950) * C116 +
              (C15953 - C15952 + C15955 - C15954) * C47279) *
                 C31197 +
             ((C17350 - C17351 + C17352 - C17353) * C116 +
              (C17354 - C17355 + C17356 - C17357) * C47279) *
                 C47391) *
                C3094 +
            (((C17351 - C17350 + C17353 - C17352) * C116 +
              (C17355 - C17354 + C17357 - C17356) * C47279) *
                 C31197 +
             ((C15769 * C1172 - C15773 * C1157 + C47358 * C1173 -
               C15774 * C1158) *
                  C116 +
              (C15769 * C1184 - C15773 * C1175 + C47358 * C1185 -
               C15774 * C1176) *
                  C47279) *
                 C47391) *
                C47178) *
               C2700) *
              C47056)) /
        (p * q * std::sqrt(p + q));
    d2ee[156] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C15769 * C124 - C15773 * C117 + C47358 * C125 - C15774 * C118) *
                 C116 +
             (C15769 * C138 - C15773 * C127 + C47358 * C139 - C15774 * C128) *
                 C47279) *
                C31197 +
            ((C31492 - C31493 + C31494 - C31495) * C116 +
             (C31496 - C31497 + C31498 - C31499) * C47279) *
                C47391) *
               C47174 +
           (((C31493 - C31492 + C31495 - C31494) * C116 +
             (C31497 - C31496 + C31499 - C31498) * C47279) *
                C31197 +
            ((C31500 - C31501 + C31502 - C31503) * C116 +
             (C31504 - C31505 + C31506 - C31507) * C47279) *
                C47391) *
               C47181 +
           (((C31501 - C31500 + C31503 - C31502) * C116 +
             (C31505 - C31504 + C31507 - C31506) * C47279) *
                C31197 +
            ((C33204 - C33205 + C33206 - C33207) * C116 +
             (C33208 - C33209 + C33210 - C33211) * C47279) *
                C47391) *
               C3602) *
              C47132 +
          ((((C15925 - C15924 + C15927 - C15926) * C116 +
             (C15929 - C15928 + C15931 - C15930) * C47279) *
                C31197 +
            ((C16580 - C16581 + C16582 - C16583) * C116 +
             (C16584 - C16585 + C16586 - C16587) * C47279) *
                C47391) *
               C47174 +
           (((C16581 - C16580 + C16583 - C16582) * C116 +
             (C16585 - C16584 + C16587 - C16586) * C47279) *
                C31197 +
            ((C16994 - C16995 + C16996 - C16997) * C116 +
             (C16998 - C16999 + C17000 - C17001) * C47279) *
                C47391) *
               C47181 +
           (((C16995 - C16994 + C16997 - C16996) * C116 +
             (C16999 - C16998 + C17001 - C17000) * C47279) *
                C31197 +
            ((C18332 - C18333 + C18334 - C18335) * C116 +
             (C18336 - C18337 + C18338 - C18339) * C47279) *
                C47391) *
               C3602) *
              C47139 +
          ((((C15933 - C15932 + C15935 - C15934) * C116 +
             (C15937 - C15936 + C15939 - C15938) * C47279) *
                C31197 +
            ((C17002 - C17003 + C17004 - C17005) * C116 +
             (C17006 - C17007 + C17008 - C17009) * C47279) *
                C47391) *
               C47174 +
           (((C17003 - C17002 + C17005 - C17004) * C116 +
             (C17007 - C17006 + C17009 - C17008) * C47279) *
                C31197 +
            ((C17010 - C17011 + C17012 - C17013) * C116 +
             (C17014 - C17015 + C17016 - C17017) * C47279) *
                C47391) *
               C47181 +
           (((C17011 - C17010 + C17013 - C17012) * C116 +
             (C17015 - C17014 + C17017 - C17016) * C47279) *
                C31197 +
            ((C15769 * C7171 - C15773 * C7169 + C47358 * C7172 -
              C15774 * C7170) *
                 C116 +
             (C15769 * C7175 - C15773 * C7173 + C47358 * C7176 -
              C15774 * C7174) *
                 C47279) *
                C47391) *
               C3602) *
              C2700) *
         C47045) /
        (p * q * std::sqrt(p + q));
    d2ee[157] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C15769 * C124 - C15773 * C117 + C47358 * C125 - C15774 * C118) *
                 C116 +
             (C15769 * C138 - C15773 * C127 + C47358 * C139 - C15774 * C128) *
                 C47279) *
                C31197 +
            ((C31492 - C31493 + C31494 - C31495) * C116 +
             (C31496 - C31497 + C31498 - C31499) * C47279) *
                C47391) *
               C3094 +
           (((C31493 - C31492 + C31495 - C31494) * C116 +
             (C31497 - C31496 + C31499 - C31498) * C47279) *
                C31197 +
            ((C31500 - C31501 + C31502 - C31503) * C116 +
             (C31504 - C31505 + C31506 - C31507) * C47279) *
                C47391) *
               C47178) *
              C47417 +
          ((((C15925 - C15924 + C15927 - C15926) * C116 +
             (C15929 - C15928 + C15931 - C15930) * C47279) *
                C31197 +
            ((C16580 - C16581 + C16582 - C16583) * C116 +
             (C16584 - C16585 + C16586 - C16587) * C47279) *
                C47391) *
               C3094 +
           (((C16581 - C16580 + C16583 - C16582) * C116 +
             (C16585 - C16584 + C16587 - C16586) * C47279) *
                C31197 +
            ((C16994 - C16995 + C16996 - C16997) * C116 +
             (C16998 - C16999 + C17000 - C17001) * C47279) *
                C47391) *
               C47178) *
              C47413 +
          ((((C15933 - C15932 + C15935 - C15934) * C116 +
             (C15937 - C15936 + C15939 - C15938) * C47279) *
                C31197 +
            ((C17002 - C17003 + C17004 - C17005) * C116 +
             (C17006 - C17007 + C17008 - C17009) * C47279) *
                C47391) *
               C3094 +
           (((C17003 - C17002 + C17005 - C17004) * C116 +
             (C17007 - C17006 + C17009 - C17008) * C47279) *
                C31197 +
            ((C17010 - C17011 + C17012 - C17013) * C116 +
             (C17014 - C17015 + C17016 - C17017) * C47279) *
                C47391) *
               C47178) *
              C47403 +
          ((((C16833 - C16832 + C16835 - C16834) * C116 +
             (C16837 - C16836 + C16839 - C16838) * C47279) *
                C31197 +
            ((C17488 - C17489 + C17490 - C17491) * C116 +
             (C17492 - C17493 + C17494 - C17495) * C47279) *
                C47391) *
               C3094 +
           (((C17489 - C17488 + C17491 - C17490) * C116 +
             (C17493 - C17492 + C17495 - C17494) * C47279) *
                C31197 +
            ((C15769 * C5809 - C15773 * C5807 + C47358 * C5810 -
              C15774 * C5808) *
                 C116 +
             (C15769 * C5813 - C15773 * C5811 + C47358 * C5814 -
              C15774 * C5812) *
                 C47279) *
                C47391) *
               C47178) *
              C47381) *
         C47045) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C15769 * C124 - C15773 * C117 + C47358 * C125 - C15774 * C118) *
                  C116 +
              (C15769 * C138 - C15773 * C127 + C47358 * C139 - C15774 * C128) *
                  C47279) *
                 C31197 +
             ((C31492 - C31493 + C31494 - C31495) * C116 +
              (C31496 - C31497 + C31498 - C31499) * C47279) *
                 C47391) *
                C3094 +
            (((C31493 - C31492 + C31495 - C31494) * C116 +
              (C31497 - C31496 + C31499 - C31498) * C47279) *
                 C31197 +
             ((C31500 - C31501 + C31502 - C31503) * C116 +
              (C31504 - C31505 + C31506 - C31507) * C47279) *
                 C47391) *
                C47178) *
               C2332 +
           ((((C15925 - C15924 + C15927 - C15926) * C116 +
              (C15929 - C15928 + C15931 - C15930) * C47279) *
                 C31197 +
             ((C16580 - C16581 + C16582 - C16583) * C116 +
              (C16584 - C16585 + C16586 - C16587) * C47279) *
                 C47391) *
                C3094 +
            (((C16581 - C16580 + C16583 - C16582) * C116 +
              (C16585 - C16584 + C16587 - C16586) * C47279) *
                 C31197 +
             ((C16994 - C16995 + C16996 - C16997) * C116 +
              (C16998 - C16999 + C17000 - C17001) * C47279) *
                 C47391) *
                C47178) *
               C47136) *
              C47407 +
          (((((C15773 * C118 - C15769 * C125 + C15774 * C119 - C47358 * C126) *
                  C116 +
              (C15773 * C128 - C15769 * C139 + C15774 * C129 - C47358 * C140) *
                  C47279) *
                 C31197 +
             ((C31508 - C31509 + C31510 - C31511) * C116 +
              (C31512 - C31513 + C31514 - C31515) * C47279) *
                 C47391) *
                C3094 +
            (((C31509 - C31508 + C31511 - C31510) * C116 +
              (C31513 - C31512 + C31515 - C31514) * C47279) *
                 C31197 +
             ((C31516 - C31517 + C31518 - C31519) * C116 +
              (C31520 - C31521 + C31522 - C31523) * C47279) *
                 C47391) *
                C47178) *
               C2332 +
           ((((C15941 - C15940 + C15943 - C15942) * C116 +
              (C15945 - C15944 + C15947 - C15946) * C47279) *
                 C31197 +
             ((C16588 - C16589 + C16590 - C16591) * C116 +
              (C16592 - C16593 + C16594 - C16595) * C47279) *
                 C47391) *
                C3094 +
            (((C16589 - C16588 + C16591 - C16590) * C116 +
              (C16593 - C16592 + C16595 - C16594) * C47279) *
                 C31197 +
             ((C18064 - C18065 + C18066 - C18067) * C116 +
              (C18068 - C18069 + C18070 - C18071) * C47279) *
                 C47391) *
                C47178) *
               C47136) *
              C47394 +
          (((((C15769 * C126 - C15773 * C119 + C47358 * C130 - C15774 * C120) *
                  C116 +
              (C15769 * C140 - C15773 * C129 + C47358 * C141 - C15774 * C131) *
                  C47279) *
                 C31197 +
             ((C31524 - C31525 + C31526 - C31527) * C116 +
              (C31528 - C31529 + C31530 - C31531) * C47279) *
                 C47391) *
                C3094 +
            (((C31525 - C31524 + C31527 - C31526) * C116 +
              (C31529 - C31528 + C31531 - C31530) * C47279) *
                 C31197 +
             ((C31532 - C31533 + C31534 - C31535) * C116 +
              (C31536 - C31537 + C31538 - C31539) * C47279) *
                 C47391) *
                C47178) *
               C2332 +
           ((((C15957 - C15956 + C15959 - C15958) * C116 +
              (C15961 - C15960 + C15963 - C15962) * C47279) *
                 C31197 +
             ((C16596 - C16597 + C16598 - C16599) * C116 +
              (C16600 - C16601 + C16602 - C16603) * C47279) *
                 C47391) *
                C3094 +
            (((C16597 - C16596 + C16599 - C16598) * C116 +
              (C16601 - C16600 + C16603 - C16602) * C47279) *
                 C31197 +
             ((C15769 * C1161 - C15773 * C1152 + C47358 * C2015 -
               C15774 * C2014) *
                  C116 +
              (C15769 * C1179 - C15773 * C1164 + C47358 * C2017 -
               C15774 * C2016) *
                  C47279) *
                 C47391) *
                C47178) *
               C47136) *
              C47365)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C15769 * C124 - C15773 * C117 + C47358 * C125 - C15774 * C118) *
                 C116 +
             (C15769 * C138 - C15773 * C127 + C47358 * C139 - C15774 * C128) *
                 C47279) *
                C31197 +
            ((C31492 - C31493 + C31494 - C31495) * C116 +
             (C31496 - C31497 + C31498 - C31499) * C47279) *
                C47391) *
               C47418 +
           (((C31493 - C31492 + C31495 - C31494) * C116 +
             (C31497 - C31496 + C31499 - C31498) * C47279) *
                C31197 +
            ((C31500 - C31501 + C31502 - C31503) * C116 +
             (C31504 - C31505 + C31506 - C31507) * C47279) *
                C47391) *
               C47415 +
           (((C31501 - C31500 + C31503 - C31502) * C116 +
             (C31505 - C31504 + C31507 - C31506) * C47279) *
                C31197 +
            ((C33204 - C33205 + C33206 - C33207) * C116 +
             (C33208 - C33209 + C33210 - C33211) * C47279) *
                C47391) *
               C47406 +
           (((C33205 - C33204 + C33207 - C33206) * C116 +
             (C33209 - C33208 + C33211 - C33210) * C47279) *
                C31197 +
            ((C33212 - C33213 + C33214 - C33215) * C116 +
             (C33216 - C33217 + C33218 - C33219) * C47279) *
                C47391) *
               C47387) *
              C2332 +
          ((((C15925 - C15924 + C15927 - C15926) * C116 +
             (C15929 - C15928 + C15931 - C15930) * C47279) *
                C31197 +
            ((C16580 - C16581 + C16582 - C16583) * C116 +
             (C16584 - C16585 + C16586 - C16587) * C47279) *
                C47391) *
               C47418 +
           (((C16581 - C16580 + C16583 - C16582) * C116 +
             (C16585 - C16584 + C16587 - C16586) * C47279) *
                C31197 +
            ((C16994 - C16995 + C16996 - C16997) * C116 +
             (C16998 - C16999 + C17000 - C17001) * C47279) *
                C47391) *
               C47415 +
           (((C16995 - C16994 + C16997 - C16996) * C116 +
             (C16999 - C16998 + C17001 - C17000) * C47279) *
                C31197 +
            ((C18332 - C18333 + C18334 - C18335) * C116 +
             (C18336 - C18337 + C18338 - C18339) * C47279) *
                C47391) *
               C47406 +
           (((C18333 - C18332 + C18335 - C18334) * C116 +
             (C18337 - C18336 + C18339 - C18338) * C47279) *
                C31197 +
            ((C15769 * C6701 - C15773 * C6699 + C47358 * C6702 -
              C15774 * C6700) *
                 C116 +
             (C15769 * C6705 - C15773 * C6703 + C47358 * C6706 -
              C15774 * C6704) *
                 C47279) *
                C47391) *
               C47387) *
              C47136) *
         C47045) /
            (p * q * std::sqrt(p + q));
    d2ee[158] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C15769 * C124 - C15773 * C117 + C47358 * C125 - C15774 * C118) *
                  C116 +
              (C15769 * C138 - C15773 * C127 + C47358 * C139 - C15774 * C128) *
                  C47279) *
                 C31197 +
             ((C31492 - C31493 + C31494 - C31495) * C116 +
              (C31496 - C31497 + C31498 - C31499) * C47279) *
                 C47391) *
                C47174 +
            (((C31493 - C31492 + C31495 - C31494) * C116 +
              (C31497 - C31496 + C31499 - C31498) * C47279) *
                 C31197 +
             ((C31500 - C31501 + C31502 - C31503) * C116 +
              (C31504 - C31505 + C31506 - C31507) * C47279) *
                 C47391) *
                C47181 +
            (((C31501 - C31500 + C31503 - C31502) * C116 +
              (C31505 - C31504 + C31507 - C31506) * C47279) *
                 C31197 +
             ((C33204 - C33205 + C33206 - C33207) * C116 +
              (C33208 - C33209 + C33210 - C33211) * C47279) *
                 C47391) *
                C3602) *
               C2332 +
           ((((C15925 - C15924 + C15927 - C15926) * C116 +
              (C15929 - C15928 + C15931 - C15930) * C47279) *
                 C31197 +
             ((C16580 - C16581 + C16582 - C16583) * C116 +
              (C16584 - C16585 + C16586 - C16587) * C47279) *
                 C47391) *
                C47174 +
            (((C16581 - C16580 + C16583 - C16582) * C116 +
              (C16585 - C16584 + C16587 - C16586) * C47279) *
                 C31197 +
             ((C16994 - C16995 + C16996 - C16997) * C116 +
              (C16998 - C16999 + C17000 - C17001) * C47279) *
                 C47391) *
                C47181 +
            (((C16995 - C16994 + C16997 - C16996) * C116 +
              (C16999 - C16998 + C17001 - C17000) * C47279) *
                 C31197 +
             ((C18332 - C18333 + C18334 - C18335) * C116 +
              (C18336 - C18337 + C18338 - C18339) * C47279) *
                 C47391) *
                C3602) *
               C47136) *
              C47325 +
          (((((C15773 * C118 - C15769 * C125 + C15774 * C119 - C47358 * C126) *
                  C116 +
              (C15773 * C128 - C15769 * C139 + C15774 * C129 - C47358 * C140) *
                  C47279) *
                 C31197 +
             ((C31508 - C31509 + C31510 - C31511) * C116 +
              (C31512 - C31513 + C31514 - C31515) * C47279) *
                 C47391) *
                C47174 +
            (((C31509 - C31508 + C31511 - C31510) * C116 +
              (C31513 - C31512 + C31515 - C31514) * C47279) *
                 C31197 +
             ((C31516 - C31517 + C31518 - C31519) * C116 +
              (C31520 - C31521 + C31522 - C31523) * C47279) *
                 C47391) *
                C47181 +
            (((C31517 - C31516 + C31519 - C31518) * C116 +
              (C31521 - C31520 + C31523 - C31522) * C47279) *
                 C31197 +
             ((C33544 - C33545 + C33546 - C33547) * C116 +
              (C33548 - C33549 + C33550 - C33551) * C47279) *
                 C47391) *
                C3602) *
               C2332 +
           ((((C15941 - C15940 + C15943 - C15942) * C116 +
              (C15945 - C15944 + C15947 - C15946) * C47279) *
                 C31197 +
             ((C16588 - C16589 + C16590 - C16591) * C116 +
              (C16592 - C16593 + C16594 - C16595) * C47279) *
                 C47391) *
                C47174 +
            (((C16589 - C16588 + C16591 - C16590) * C116 +
              (C16593 - C16592 + C16595 - C16594) * C47279) *
                 C31197 +
             ((C18064 - C18065 + C18066 - C18067) * C116 +
              (C18068 - C18069 + C18070 - C18071) * C47279) *
                 C47391) *
                C47181 +
            (((C18065 - C18064 + C18067 - C18066) * C116 +
              (C18069 - C18068 + C18071 - C18070) * C47279) *
                 C31197 +
             ((C15769 * C2226 - C15773 * C2223 + C47358 * C2227 -
               C15774 * C2224) *
                  C116 +
              (C15769 * C2232 - C15773 * C2229 + C47358 * C2233 -
               C15774 * C2230) *
                  C47279) *
                 C47391) *
                C3602) *
               C47136) *
              C47056)) /
        (p * q * std::sqrt(p + q));
    d2ee[159] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C15769 * C124 - C15773 * C117 + C47358 * C125 - C15774 * C118) *
                  C116 +
              (C15769 * C138 - C15773 * C127 + C47358 * C139 - C15774 * C128) *
                  C47279) *
                 C31197 +
             ((C31492 - C31493 + C31494 - C31495) * C116 +
              (C31496 - C31497 + C31498 - C31499) * C47279) *
                 C47391) *
                C3094 +
            (((C31493 - C31492 + C31495 - C31494) * C116 +
              (C31497 - C31496 + C31499 - C31498) * C47279) *
                 C31197 +
             ((C31500 - C31501 + C31502 - C31503) * C116 +
              (C31504 - C31505 + C31506 - C31507) * C47279) *
                 C47391) *
                C47178) *
               C2332 +
           ((((C15925 - C15924 + C15927 - C15926) * C116 +
              (C15929 - C15928 + C15931 - C15930) * C47279) *
                 C31197 +
             ((C16580 - C16581 + C16582 - C16583) * C116 +
              (C16584 - C16585 + C16586 - C16587) * C47279) *
                 C47391) *
                C3094 +
            (((C16581 - C16580 + C16583 - C16582) * C116 +
              (C16585 - C16584 + C16587 - C16586) * C47279) *
                 C31197 +
             ((C16994 - C16995 + C16996 - C16997) * C116 +
              (C16998 - C16999 + C17000 - C17001) * C47279) *
                 C47391) *
                C47178) *
               C47136) *
              C47407 +
          (((((C15773 * C118 - C15769 * C125 + C15774 * C119 - C47358 * C126) *
                  C116 +
              (C15773 * C128 - C15769 * C139 + C15774 * C129 - C47358 * C140) *
                  C47279) *
                 C31197 +
             ((C31508 - C31509 + C31510 - C31511) * C116 +
              (C31512 - C31513 + C31514 - C31515) * C47279) *
                 C47391) *
                C3094 +
            (((C31509 - C31508 + C31511 - C31510) * C116 +
              (C31513 - C31512 + C31515 - C31514) * C47279) *
                 C31197 +
             ((C31516 - C31517 + C31518 - C31519) * C116 +
              (C31520 - C31521 + C31522 - C31523) * C47279) *
                 C47391) *
                C47178) *
               C2332 +
           ((((C15941 - C15940 + C15943 - C15942) * C116 +
              (C15945 - C15944 + C15947 - C15946) * C47279) *
                 C31197 +
             ((C16588 - C16589 + C16590 - C16591) * C116 +
              (C16592 - C16593 + C16594 - C16595) * C47279) *
                 C47391) *
                C3094 +
            (((C16589 - C16588 + C16591 - C16590) * C116 +
              (C16593 - C16592 + C16595 - C16594) * C47279) *
                 C31197 +
             ((C18064 - C18065 + C18066 - C18067) * C116 +
              (C18068 - C18069 + C18070 - C18071) * C47279) *
                 C47391) *
                C47178) *
               C47136) *
              C47394 +
          (((((C15769 * C126 - C15773 * C119 + C47358 * C130 - C15774 * C120) *
                  C116 +
              (C15769 * C140 - C15773 * C129 + C47358 * C141 - C15774 * C131) *
                  C47279) *
                 C31197 +
             ((C31524 - C31525 + C31526 - C31527) * C116 +
              (C31528 - C31529 + C31530 - C31531) * C47279) *
                 C47391) *
                C3094 +
            (((C31525 - C31524 + C31527 - C31526) * C116 +
              (C31529 - C31528 + C31531 - C31530) * C47279) *
                 C31197 +
             ((C31532 - C31533 + C31534 - C31535) * C116 +
              (C31536 - C31537 + C31538 - C31539) * C47279) *
                 C47391) *
                C47178) *
               C2332 +
           ((((C15957 - C15956 + C15959 - C15958) * C116 +
              (C15961 - C15960 + C15963 - C15962) * C47279) *
                 C31197 +
             ((C16596 - C16597 + C16598 - C16599) * C116 +
              (C16600 - C16601 + C16602 - C16603) * C47279) *
                 C47391) *
                C3094 +
            (((C16597 - C16596 + C16599 - C16598) * C116 +
              (C16601 - C16600 + C16603 - C16602) * C47279) *
                 C31197 +
             ((C15769 * C1161 - C15773 * C1152 + C47358 * C2015 -
               C15774 * C2014) *
                  C116 +
              (C15769 * C1179 - C15773 * C1164 + C47358 * C2017 -
               C15774 * C2016) *
                  C47279) *
                 C47391) *
                C47178) *
               C47136) *
              C47365)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C15769 * C124 - C15773 * C117 + C47358 * C125 - C15774 * C118) *
                 C116 +
             (C15769 * C138 - C15773 * C127 + C47358 * C139 - C15774 * C128) *
                 C47279) *
                C31197 +
            ((C31492 - C31493 + C31494 - C31495) * C116 +
             (C31496 - C31497 + C31498 - C31499) * C47279) *
                C47391) *
               C3094 +
           (((C31493 - C31492 + C31495 - C31494) * C116 +
             (C31497 - C31496 + C31499 - C31498) * C47279) *
                C31197 +
            ((C31500 - C31501 + C31502 - C31503) * C116 +
             (C31504 - C31505 + C31506 - C31507) * C47279) *
                C47391) *
               C47178) *
              C47417 +
          ((((C15925 - C15924 + C15927 - C15926) * C116 +
             (C15929 - C15928 + C15931 - C15930) * C47279) *
                C31197 +
            ((C16580 - C16581 + C16582 - C16583) * C116 +
             (C16584 - C16585 + C16586 - C16587) * C47279) *
                C47391) *
               C3094 +
           (((C16581 - C16580 + C16583 - C16582) * C116 +
             (C16585 - C16584 + C16587 - C16586) * C47279) *
                C31197 +
            ((C16994 - C16995 + C16996 - C16997) * C116 +
             (C16998 - C16999 + C17000 - C17001) * C47279) *
                C47391) *
               C47178) *
              C47413 +
          ((((C15933 - C15932 + C15935 - C15934) * C116 +
             (C15937 - C15936 + C15939 - C15938) * C47279) *
                C31197 +
            ((C17002 - C17003 + C17004 - C17005) * C116 +
             (C17006 - C17007 + C17008 - C17009) * C47279) *
                C47391) *
               C3094 +
           (((C17003 - C17002 + C17005 - C17004) * C116 +
             (C17007 - C17006 + C17009 - C17008) * C47279) *
                C31197 +
            ((C17010 - C17011 + C17012 - C17013) * C116 +
             (C17014 - C17015 + C17016 - C17017) * C47279) *
                C47391) *
               C47178) *
              C47403 +
          ((((C16833 - C16832 + C16835 - C16834) * C116 +
             (C16837 - C16836 + C16839 - C16838) * C47279) *
                C31197 +
            ((C17488 - C17489 + C17490 - C17491) * C116 +
             (C17492 - C17493 + C17494 - C17495) * C47279) *
                C47391) *
               C3094 +
           (((C17489 - C17488 + C17491 - C17490) * C116 +
             (C17493 - C17492 + C17495 - C17494) * C47279) *
                C31197 +
            ((C15769 * C5809 - C15773 * C5807 + C47358 * C5810 -
              C15774 * C5808) *
                 C116 +
             (C15769 * C5813 - C15773 * C5811 + C47358 * C5814 -
              C15774 * C5812) *
                 C47279) *
                C47391) *
               C47178) *
              C47381) *
         C47045) /
            (p * q * std::sqrt(p + q));
    d2ee[160] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C15769 * C124 - C15773 * C117 + C47358 * C125 - C15774 * C118) *
                 C116 +
             (C15769 * C138 - C15773 * C127 + C47358 * C139 - C15774 * C128) *
                 C47279) *
                C31197 +
            ((C31492 - C31493 + C31494 - C31495) * C116 +
             (C31496 - C31497 + C31498 - C31499) * C47279) *
                C47391) *
               C47091 * C1284 +
           (((C15925 - C15924 + C15927 - C15926) * C116 +
             (C15929 - C15928 + C15931 - C15930) * C47279) *
                C31197 +
            ((C16580 - C16581 + C16582 - C16583) * C116 +
             (C16584 - C16585 + C16586 - C16587) * C47279) *
                C47391) *
               C47091 * C1285 +
           (((C15933 - C15932 + C15935 - C15934) * C116 +
             (C15937 - C15936 + C15939 - C15938) * C47279) *
                C31197 +
            ((C17002 - C17003 + C17004 - C17005) * C116 +
             (C17006 - C17007 + C17008 - C17009) * C47279) *
                C47391) *
               C47091 * C1286 +
           (((C16833 - C16832 + C16835 - C16834) * C116 +
             (C16837 - C16836 + C16839 - C16838) * C47279) *
                C31197 +
            ((C17488 - C17489 + C17490 - C17491) * C116 +
             (C17492 - C17493 + C17494 - C17495) * C47279) *
                C47391) *
               C47091 * C47381) *
              C47325 +
          ((((C15773 * C118 - C15769 * C125 + C15774 * C119 - C47358 * C126) *
                 C116 +
             (C15773 * C128 - C15769 * C139 + C15774 * C129 - C47358 * C140) *
                 C47279) *
                C31197 +
            ((C31508 - C31509 + C31510 - C31511) * C116 +
             (C31512 - C31513 + C31514 - C31515) * C47279) *
                C47391) *
               C47091 * C1284 +
           (((C15941 - C15940 + C15943 - C15942) * C116 +
             (C15945 - C15944 + C15947 - C15946) * C47279) *
                C31197 +
            ((C16588 - C16589 + C16590 - C16591) * C116 +
             (C16592 - C16593 + C16594 - C16595) * C47279) *
                C47391) *
               C47091 * C1285 +
           (((C15949 - C15948 + C15951 - C15950) * C116 +
             (C15953 - C15952 + C15955 - C15954) * C47279) *
                C31197 +
            ((C17350 - C17351 + C17352 - C17353) * C116 +
             (C17354 - C17355 + C17356 - C17357) * C47279) *
                C47391) *
               C47091 * C1286 +
           (((C17149 - C17148 + C17151 - C17150) * C116 +
             (C17153 - C17152 + C17155 - C17154) * C47279) *
                C31197 +
            ((C15769 * C1546 - C15773 * C1543 + C47358 * C1547 -
              C15774 * C1544) *
                 C116 +
             (C15769 * C1552 - C15773 * C1549 + C47358 * C1553 -
              C15774 * C1550) *
                 C47279) *
                C47391) *
               C47091 * C47381) *
              C47056)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C15769 * C124 - C15773 * C117 + C47358 * C125 - C15774 * C118) *
                 C116 +
             (C15769 * C138 - C15773 * C127 + C47358 * C139 - C15774 * C128) *
                 C47279) *
                C31197 +
            ((C31492 - C31493 + C31494 - C31495) * C116 +
             (C31496 - C31497 + C31498 - C31499) * C47279) *
                C47391) *
               C47091 * C47339 +
           (((C15925 - C15924 + C15927 - C15926) * C116 +
             (C15929 - C15928 + C15931 - C15930) * C47279) *
                C31197 +
            ((C16580 - C16581 + C16582 - C16583) * C116 +
             (C16584 - C16585 + C16586 - C16587) * C47279) *
                C47391) *
               C47091 * C47136) *
              C554 +
          ((((C15773 * C118 - C15769 * C125 + C15774 * C119 - C47358 * C126) *
                 C116 +
             (C15773 * C128 - C15769 * C139 + C15774 * C129 - C47358 * C140) *
                 C47279) *
                C31197 +
            ((C31508 - C31509 + C31510 - C31511) * C116 +
             (C31512 - C31513 + C31514 - C31515) * C47279) *
                C47391) *
               C47091 * C47339 +
           (((C15941 - C15940 + C15943 - C15942) * C116 +
             (C15945 - C15944 + C15947 - C15946) * C47279) *
                C31197 +
            ((C16588 - C16589 + C16590 - C16591) * C116 +
             (C16592 - C16593 + C16594 - C16595) * C47279) *
                C47391) *
               C47091 * C47136) *
              C555 +
          ((((C15769 * C126 - C15773 * C119 + C47358 * C130 - C15774 * C120) *
                 C116 +
             (C15769 * C140 - C15773 * C129 + C47358 * C141 - C15774 * C131) *
                 C47279) *
                C31197 +
            ((C31524 - C31525 + C31526 - C31527) * C116 +
             (C31528 - C31529 + C31530 - C31531) * C47279) *
                C47391) *
               C47091 * C47339 +
           (((C15957 - C15956 + C15959 - C15958) * C116 +
             (C15961 - C15960 + C15963 - C15962) * C47279) *
                C31197 +
            ((C16596 - C16597 + C16598 - C16599) * C116 +
             (C16600 - C16601 + C16602 - C16603) * C47279) *
                C47391) *
               C47091 * C47136) *
              C556 +
          ((((C15773 * C120 - C15769 * C130 + C15774 * C121 - C47358 * C132) *
                 C116 +
             (C15773 * C131 - C15769 * C141 + C15774 * C133 - C47358 * C142) *
                 C47279) *
                C31197 +
            ((C15773 * C420 - C15769 * C436 + C15774 * C422 - C47358 * C440) *
                 C116 +
             (C15773 * C437 - C15769 * C450 + C15774 * C441 - C47358 * C452) *
                 C47279) *
                C47391) *
               C47091 * C47339 +
           (((C16249 - C16248 + C16251 - C16250) * C116 +
             (C16253 - C16252 + C16255 - C16254) * C47279) *
                C31197 +
            ((C15769 * C823 - C15773 * C815 + C47358 * C825 - C15774 * C816) *
                 C116 +
             (C15769 * C830 - C15773 * C824 + C47358 * C831 - C15774 * C826) *
                 C47279) *
                C47391) *
               C47091 * C47136) *
              C47375)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C15769 * C124 - C15773 * C117 + C47358 * C125 - C15774 * C118) *
                  C116 +
              (C15769 * C138 - C15773 * C127 + C47358 * C139 - C15774 * C128) *
                  C47279) *
                 C31197 +
             ((C31492 - C31493 + C31494 - C31495) * C116 +
              (C31496 - C31497 + C31498 - C31499) * C47279) *
                 C47391) *
                C1664 +
            (((C31493 - C31492 + C31495 - C31494) * C116 +
              (C31497 - C31496 + C31499 - C31498) * C47279) *
                 C31197 +
             ((C31500 - C31501 + C31502 - C31503) * C116 +
              (C31504 - C31505 + C31506 - C31507) * C47279) *
                 C47391) *
                C1665 +
            (((C31501 - C31500 + C31503 - C31502) * C116 +
              (C31505 - C31504 + C31507 - C31506) * C47279) *
                 C31197 +
             ((C33204 - C33205 + C33206 - C33207) * C116 +
              (C33208 - C33209 + C33210 - C33211) * C47279) *
                 C47391) *
                C47374) *
               C47339 +
           ((((C15925 - C15924 + C15927 - C15926) * C116 +
              (C15929 - C15928 + C15931 - C15930) * C47279) *
                 C31197 +
             ((C16580 - C16581 + C16582 - C16583) * C116 +
              (C16584 - C16585 + C16586 - C16587) * C47279) *
                 C47391) *
                C1664 +
            (((C16581 - C16580 + C16583 - C16582) * C116 +
              (C16585 - C16584 + C16587 - C16586) * C47279) *
                 C31197 +
             ((C16994 - C16995 + C16996 - C16997) * C116 +
              (C16998 - C16999 + C17000 - C17001) * C47279) *
                 C47391) *
                C1665 +
            (((C16995 - C16994 + C16997 - C16996) * C116 +
              (C16999 - C16998 + C17001 - C17000) * C47279) *
                 C31197 +
             ((C18332 - C18333 + C18334 - C18335) * C116 +
              (C18336 - C18337 + C18338 - C18339) * C47279) *
                 C47391) *
                C47374) *
               C47136) *
              C47325 +
          (((((C15773 * C118 - C15769 * C125 + C15774 * C119 - C47358 * C126) *
                  C116 +
              (C15773 * C128 - C15769 * C139 + C15774 * C129 - C47358 * C140) *
                  C47279) *
                 C31197 +
             ((C31508 - C31509 + C31510 - C31511) * C116 +
              (C31512 - C31513 + C31514 - C31515) * C47279) *
                 C47391) *
                C1664 +
            (((C31509 - C31508 + C31511 - C31510) * C116 +
              (C31513 - C31512 + C31515 - C31514) * C47279) *
                 C31197 +
             ((C31516 - C31517 + C31518 - C31519) * C116 +
              (C31520 - C31521 + C31522 - C31523) * C47279) *
                 C47391) *
                C1665 +
            (((C31517 - C31516 + C31519 - C31518) * C116 +
              (C31521 - C31520 + C31523 - C31522) * C47279) *
                 C31197 +
             ((C15773 * C1845 - C15769 * C1851 + C15774 * C1846 -
               C47358 * C1852) *
                  C116 +
              (C15773 * C1854 - C15769 * C1863 + C15774 * C1855 -
               C47358 * C1864) *
                  C47279) *
                 C47391) *
                C47374) *
               C47339 +
           ((((C15941 - C15940 + C15943 - C15942) * C116 +
              (C15945 - C15944 + C15947 - C15946) * C47279) *
                 C31197 +
             ((C16588 - C16589 + C16590 - C16591) * C116 +
              (C16592 - C16593 + C16594 - C16595) * C47279) *
                 C47391) *
                C1664 +
            (((C16589 - C16588 + C16591 - C16590) * C116 +
              (C16593 - C16592 + C16595 - C16594) * C47279) *
                 C31197 +
             ((C18064 - C18065 + C18066 - C18067) * C116 +
              (C18068 - C18069 + C18070 - C18071) * C47279) *
                 C47391) *
                C1665 +
            (((C18065 - C18064 + C18067 - C18066) * C116 +
              (C18069 - C18068 + C18071 - C18070) * C47279) *
                 C31197 +
             ((C15769 * C2226 - C15773 * C2223 + C47358 * C2227 -
               C15774 * C2224) *
                  C116 +
              (C15769 * C2232 - C15773 * C2229 + C47358 * C2233 -
               C15774 * C2230) *
                  C47279) *
                 C47391) *
                C47374) *
               C47136) *
              C47056)) /
            (p * q * std::sqrt(p + q));
    d2ee[161] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C15769 * C124 - C15773 * C117 + C47358 * C125 - C15774 * C118) *
                 C116 +
             (C15769 * C138 - C15773 * C127 + C47358 * C139 - C15774 * C128) *
                 C47279) *
                C31197 +
            ((C31492 - C31493 + C31494 - C31495) * C116 +
             (C31496 - C31497 + C31498 - C31499) * C47279) *
                C47391) *
               C47340 +
           (((C31493 - C31492 + C31495 - C31494) * C116 +
             (C31497 - C31496 + C31499 - C31498) * C47279) *
                C31197 +
            ((C31500 - C31501 + C31502 - C31503) * C116 +
             (C31504 - C31505 + C31506 - C31507) * C47279) *
                C47391) *
               C47178) *
              C1284 +
          ((((C15925 - C15924 + C15927 - C15926) * C116 +
             (C15929 - C15928 + C15931 - C15930) * C47279) *
                C31197 +
            ((C16580 - C16581 + C16582 - C16583) * C116 +
             (C16584 - C16585 + C16586 - C16587) * C47279) *
                C47391) *
               C47340 +
           (((C16581 - C16580 + C16583 - C16582) * C116 +
             (C16585 - C16584 + C16587 - C16586) * C47279) *
                C31197 +
            ((C16994 - C16995 + C16996 - C16997) * C116 +
             (C16998 - C16999 + C17000 - C17001) * C47279) *
                C47391) *
               C47178) *
              C1285 +
          ((((C15933 - C15932 + C15935 - C15934) * C116 +
             (C15937 - C15936 + C15939 - C15938) * C47279) *
                C31197 +
            ((C17002 - C17003 + C17004 - C17005) * C116 +
             (C17006 - C17007 + C17008 - C17009) * C47279) *
                C47391) *
               C47340 +
           (((C17003 - C17002 + C17005 - C17004) * C116 +
             (C17007 - C17006 + C17009 - C17008) * C47279) *
                C31197 +
            ((C17010 - C17011 + C17012 - C17013) * C116 +
             (C17014 - C17015 + C17016 - C17017) * C47279) *
                C47391) *
               C47178) *
              C1286 +
          ((((C16833 - C16832 + C16835 - C16834) * C116 +
             (C16837 - C16836 + C16839 - C16838) * C47279) *
                C31197 +
            ((C17488 - C17489 + C17490 - C17491) * C116 +
             (C17492 - C17493 + C17494 - C17495) * C47279) *
                C47391) *
               C47340 +
           (((C17489 - C17488 + C17491 - C17490) * C116 +
             (C17493 - C17492 + C17495 - C17494) * C47279) *
                C31197 +
            ((C15769 * C5809 - C15773 * C5807 + C47358 * C5810 -
              C15774 * C5808) *
                 C116 +
             (C15769 * C5813 - C15773 * C5811 + C47358 * C5814 -
              C15774 * C5812) *
                 C47279) *
                C47391) *
               C47178) *
              C47381) *
         C47045) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C15769 * C124 - C15773 * C117 + C47358 * C125 - C15774 * C118) *
                  C116 +
              (C15769 * C138 - C15773 * C127 + C47358 * C139 - C15774 * C128) *
                  C47279) *
                 C31197 +
             ((C31492 - C31493 + C31494 - C31495) * C116 +
              (C31496 - C31497 + C31498 - C31499) * C47279) *
                 C47391) *
                C47340 +
            (((C31493 - C31492 + C31495 - C31494) * C116 +
              (C31497 - C31496 + C31499 - C31498) * C47279) *
                 C31197 +
             ((C31500 - C31501 + C31502 - C31503) * C116 +
              (C31504 - C31505 + C31506 - C31507) * C47279) *
                 C47391) *
                C47178) *
               C47339 +
           ((((C15925 - C15924 + C15927 - C15926) * C116 +
              (C15929 - C15928 + C15931 - C15930) * C47279) *
                 C31197 +
             ((C16580 - C16581 + C16582 - C16583) * C116 +
              (C16584 - C16585 + C16586 - C16587) * C47279) *
                 C47391) *
                C47340 +
            (((C16581 - C16580 + C16583 - C16582) * C116 +
              (C16585 - C16584 + C16587 - C16586) * C47279) *
                 C31197 +
             ((C16994 - C16995 + C16996 - C16997) * C116 +
              (C16998 - C16999 + C17000 - C17001) * C47279) *
                 C47391) *
                C47178) *
               C47136) *
              C258 +
          (((((C15773 * C118 - C15769 * C125 + C15774 * C119 - C47358 * C126) *
                  C116 +
              (C15773 * C128 - C15769 * C139 + C15774 * C129 - C47358 * C140) *
                  C47279) *
                 C31197 +
             ((C31508 - C31509 + C31510 - C31511) * C116 +
              (C31512 - C31513 + C31514 - C31515) * C47279) *
                 C47391) *
                C47340 +
            (((C31509 - C31508 + C31511 - C31510) * C116 +
              (C31513 - C31512 + C31515 - C31514) * C47279) *
                 C31197 +
             ((C31516 - C31517 + C31518 - C31519) * C116 +
              (C31520 - C31521 + C31522 - C31523) * C47279) *
                 C47391) *
                C47178) *
               C47339 +
           ((((C15941 - C15940 + C15943 - C15942) * C116 +
              (C15945 - C15944 + C15947 - C15946) * C47279) *
                 C31197 +
             ((C16588 - C16589 + C16590 - C16591) * C116 +
              (C16592 - C16593 + C16594 - C16595) * C47279) *
                 C47391) *
                C47340 +
            (((C16589 - C16588 + C16591 - C16590) * C116 +
              (C16593 - C16592 + C16595 - C16594) * C47279) *
                 C31197 +
             ((C18064 - C18065 + C18066 - C18067) * C116 +
              (C18068 - C18069 + C18070 - C18071) * C47279) *
                 C47391) *
                C47178) *
               C47136) *
              C259 +
          (((((C15769 * C126 - C15773 * C119 + C47358 * C130 - C15774 * C120) *
                  C116 +
              (C15769 * C140 - C15773 * C129 + C47358 * C141 - C15774 * C131) *
                  C47279) *
                 C31197 +
             ((C31524 - C31525 + C31526 - C31527) * C116 +
              (C31528 - C31529 + C31530 - C31531) * C47279) *
                 C47391) *
                C47340 +
            (((C31525 - C31524 + C31527 - C31526) * C116 +
              (C31529 - C31528 + C31531 - C31530) * C47279) *
                 C31197 +
             ((C31532 - C31533 + C31534 - C31535) * C116 +
              (C31536 - C31537 + C31538 - C31539) * C47279) *
                 C47391) *
                C47178) *
               C47339 +
           ((((C15957 - C15956 + C15959 - C15958) * C116 +
              (C15961 - C15960 + C15963 - C15962) * C47279) *
                 C31197 +
             ((C16596 - C16597 + C16598 - C16599) * C116 +
              (C16600 - C16601 + C16602 - C16603) * C47279) *
                 C47391) *
                C47340 +
            (((C16597 - C16596 + C16599 - C16598) * C116 +
              (C16601 - C16600 + C16603 - C16602) * C47279) *
                 C31197 +
             ((C15769 * C1161 - C15773 * C1152 + C47358 * C2015 -
               C15774 * C2014) *
                  C116 +
              (C15769 * C1179 - C15773 * C1164 + C47358 * C2017 -
               C15774 * C2016) *
                  C47279) *
                 C47391) *
                C47178) *
               C47136) *
              C47365)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C15769 * C124 - C15773 * C117 + C47358 * C125 - C15774 * C118) *
                 C116 +
             (C15769 * C138 - C15773 * C127 + C47358 * C139 - C15774 * C128) *
                 C47279) *
                C31197 +
            ((C31492 - C31493 + C31494 - C31495) * C116 +
             (C31496 - C31497 + C31498 - C31499) * C47279) *
                C47391) *
               C2116 +
           (((C31493 - C31492 + C31495 - C31494) * C116 +
             (C31497 - C31496 + C31499 - C31498) * C47279) *
                C31197 +
            ((C31500 - C31501 + C31502 - C31503) * C116 +
             (C31504 - C31505 + C31506 - C31507) * C47279) *
                C47391) *
               C2117 +
           (((C31501 - C31500 + C31503 - C31502) * C116 +
             (C31505 - C31504 + C31507 - C31506) * C47279) *
                C31197 +
            ((C33204 - C33205 + C33206 - C33207) * C116 +
             (C33208 - C33209 + C33210 - C33211) * C47279) *
                C47391) *
               C2118 +
           (((C33205 - C33204 + C33207 - C33206) * C116 +
             (C33209 - C33208 + C33211 - C33210) * C47279) *
                C31197 +
            ((C33212 - C33213 + C33214 - C33215) * C116 +
             (C33216 - C33217 + C33218 - C33219) * C47279) *
                C47391) *
               C47387) *
              C47339 +
          ((((C15925 - C15924 + C15927 - C15926) * C116 +
             (C15929 - C15928 + C15931 - C15930) * C47279) *
                C31197 +
            ((C16580 - C16581 + C16582 - C16583) * C116 +
             (C16584 - C16585 + C16586 - C16587) * C47279) *
                C47391) *
               C2116 +
           (((C16581 - C16580 + C16583 - C16582) * C116 +
             (C16585 - C16584 + C16587 - C16586) * C47279) *
                C31197 +
            ((C16994 - C16995 + C16996 - C16997) * C116 +
             (C16998 - C16999 + C17000 - C17001) * C47279) *
                C47391) *
               C2117 +
           (((C16995 - C16994 + C16997 - C16996) * C116 +
             (C16999 - C16998 + C17001 - C17000) * C47279) *
                C31197 +
            ((C18332 - C18333 + C18334 - C18335) * C116 +
             (C18336 - C18337 + C18338 - C18339) * C47279) *
                C47391) *
               C2118 +
           (((C18333 - C18332 + C18335 - C18334) * C116 +
             (C18337 - C18336 + C18339 - C18338) * C47279) *
                C31197 +
            ((C15769 * C6701 - C15773 * C6699 + C47358 * C6702 -
              C15774 * C6700) *
                 C116 +
             (C15769 * C6705 - C15773 * C6703 + C47358 * C6706 -
              C15774 * C6704) *
                 C47279) *
                C47391) *
               C47387) *
              C47136) *
         C47045) /
            (p * q * std::sqrt(p + q));
    d2ee[162] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C15769 * C124 - C15773 * C117 + C47358 * C125 -
                 C15774 * C118) *
                    C116 +
                (C15769 * C138 - C15773 * C127 + C47358 * C139 -
                 C15774 * C128) *
                    C47279) *
                   C31197 +
               ((C15769 * C424 - C15773 * C414 + C47358 * C425 -
                 C15774 * C415) *
                    C116 +
                (C15769 * C444 - C15773 * C427 + C47358 * C445 -
                 C15774 * C428) *
                    C47279) *
                   C47391) *
                  C47091 * C47073 * C108 +
              (((C15773 * C118 - C15769 * C125 + C15774 * C119 -
                 C47358 * C126) *
                    C116 +
                (C15773 * C128 - C15769 * C139 + C15774 * C129 -
                 C47358 * C140) *
                    C47279) *
                   C31197 +
               ((C15773 * C415 - C15769 * C425 + C15774 * C416 -
                 C47358 * C426) *
                    C116 +
                (C15773 * C428 - C15769 * C445 + C15774 * C429 -
                 C47358 * C446) *
                    C47279) *
                   C47391) *
                  C47091 * C47073 * C109 +
              (((C15769 * C126 - C15773 * C119 + C47358 * C130 -
                 C15774 * C120) *
                    C116 +
                (C15769 * C140 - C15773 * C129 + C47358 * C141 -
                 C15774 * C131) *
                    C47279) *
                   C31197 +
               ((C15769 * C426 - C15773 * C416 + C47358 * C436 -
                 C15774 * C420) *
                    C116 +
                (C15769 * C446 - C15773 * C429 + C47358 * C450 -
                 C15774 * C437) *
                    C47279) *
                   C47391) *
                  C47091 * C47073 * C110 +
              (((C15773 * C120 - C15769 * C130 + C15774 * C121 -
                 C47358 * C132) *
                    C116 +
                (C15773 * C131 - C15769 * C141 + C15774 * C133 -
                 C47358 * C142) *
                    C47279) *
                   C31197 +
               ((C15773 * C420 - C15769 * C436 + C15774 * C422 -
                 C47358 * C440) *
                    C116 +
                (C15773 * C437 - C15769 * C450 + C15774 * C441 -
                 C47358 * C452) *
                    C47279) *
                   C47391) *
                  C47091 * C47073 * C111 +
              (((C15769 * C132 - C15773 * C121 + C47358 * C134 -
                 C15774 * C122) *
                    C116 +
                (C15769 * C142 - C15773 * C133 + C47358 * C143 -
                 C15774 * C135) *
                    C47279) *
                   C31197 +
               ((C15769 * C440 - C15773 * C422 + C47358 * C663 -
                 C15774 * C662) *
                    C116 +
                (C15769 * C452 - C15773 * C441 + C47358 * C665 -
                 C15774 * C664) *
                    C47279) *
                   C47391) *
                  C47091 * C47073 * C112) +
         0.5 * std::pow(Pi, 2.5) *
             (((((C15769 * C124 - C15773 * C117 + C47358 * C125 -
                  C15774 * C118) *
                     C116 +
                 (C15769 * C138 - C15773 * C127 + C47358 * C139 -
                  C15774 * C128) *
                     C47279) *
                    C31197 +
                ((C15769 * C424 - C15773 * C414 + C47358 * C425 -
                  C15774 * C415) *
                     C116 +
                 (C15769 * C444 - C15773 * C427 + C47358 * C445 -
                  C15774 * C428) *
                     C47279) *
                    C47391) *
                   C47091 * C47410 +
               (((C15925 - C15924 + C15927 - C15926) * C116 +
                 (C15929 - C15928 + C15931 - C15930) * C47279) *
                    C31197 +
                ((C16580 - C16581 + C16582 - C16583) * C116 +
                 (C16584 - C16585 + C16586 - C16587) * C47279) *
                    C47391) *
                   C47091 * C47398 +
               (((C15933 - C15932 + C15935 - C15934) * C116 +
                 (C15937 - C15936 + C15939 - C15938) * C47279) *
                    C31197 +
                ((C17002 - C17003 + C17004 - C17005) * C116 +
                 (C17006 - C17007 + C17008 - C17009) * C47279) *
                    C47391) *
                   C47091 * C47371) *
                  C258 +
              ((((C15773 * C118 - C15769 * C125 + C15774 * C119 -
                  C47358 * C126) *
                     C116 +
                 (C15773 * C128 - C15769 * C139 + C15774 * C129 -
                  C47358 * C140) *
                     C47279) *
                    C31197 +
                ((C15773 * C415 - C15769 * C425 + C15774 * C416 -
                  C47358 * C426) *
                     C116 +
                 (C15773 * C428 - C15769 * C445 + C15774 * C429 -
                  C47358 * C446) *
                     C47279) *
                    C47391) *
                   C47091 * C47410 +
               (((C15941 - C15940 + C15943 - C15942) * C116 +
                 (C15945 - C15944 + C15947 - C15946) * C47279) *
                    C31197 +
                ((C16588 - C16589 + C16590 - C16591) * C116 +
                 (C16592 - C16593 + C16594 - C16595) * C47279) *
                    C47391) *
                   C47091 * C47398 +
               (((C15949 - C15948 + C15951 - C15950) * C116 +
                 (C15953 - C15952 + C15955 - C15954) * C47279) *
                    C31197 +
                ((C17350 - C17351 + C17352 - C17353) * C116 +
                 (C17354 - C17355 + C17356 - C17357) * C47279) *
                    C47391) *
                   C47091 * C47371) *
                  C259 +
              ((((C15769 * C126 - C15773 * C119 + C47358 * C130 -
                  C15774 * C120) *
                     C116 +
                 (C15769 * C140 - C15773 * C129 + C47358 * C141 -
                  C15774 * C131) *
                     C47279) *
                    C31197 +
                ((C15769 * C426 - C15773 * C416 + C47358 * C436 -
                  C15774 * C420) *
                     C116 +
                 (C15769 * C446 - C15773 * C429 + C47358 * C450 -
                  C15774 * C437) *
                     C47279) *
                    C47391) *
                   C47091 * C47410 +
               (((C15957 - C15956 + C15959 - C15958) * C116 +
                 (C15961 - C15960 + C15963 - C15962) * C47279) *
                    C31197 +
                ((C16596 - C16597 + C16598 - C16599) * C116 +
                 (C16600 - C16601 + C16602 - C16603) * C47279) *
                    C47391) *
                   C47091 * C47398 +
               (((C15965 - C15964 + C15967 - C15966) * C116 +
                 (C15969 - C15968 + C15971 - C15970) * C47279) *
                    C31197 +
                ((C15769 * C1167 - C15773 * C1155 + C47358 * C1441 -
                  C15774 * C1440) *
                     C116 +
                 (C15769 * C1182 - C15773 * C1170 + C47358 * C1443 -
                  C15774 * C1442) *
                     C47279) *
                    C47391) *
                   C47091 * C47371) *
                  C47365)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C15769 * C124 - C15773 * C117 + C47358 * C125 - C15774 * C118) *
                 C116 +
             (C15769 * C138 - C15773 * C127 + C47358 * C139 - C15774 * C128) *
                 C47279) *
                C31197 +
            ((C31492 - C31493 + C31494 - C31495) * C116 +
             (C31496 - C31497 + C31498 - C31499) * C47279) *
                C47391) *
               C47411 +
           (((C31493 - C31492 + C31495 - C31494) * C116 +
             (C31497 - C31496 + C31499 - C31498) * C47279) *
                C31197 +
            ((C31500 - C31501 + C31502 - C31503) * C116 +
             (C31504 - C31505 + C31506 - C31507) * C47279) *
                C47391) *
               C47400 +
           (((C31501 - C31500 + C31503 - C31502) * C116 +
             (C31505 - C31504 + C31507 - C31506) * C47279) *
                C31197 +
            ((C15769 * C1850 - C15773 * C1844 + C47358 * C1851 -
              C15774 * C1845) *
                 C116 +
             (C15769 * C1862 - C15773 * C1853 + C47358 * C1863 -
              C15774 * C1854) *
                 C47279) *
                C47391) *
               C47374) *
              C47073 * C258 +
          ((((C15773 * C118 - C15769 * C125 + C15774 * C119 - C47358 * C126) *
                 C116 +
             (C15773 * C128 - C15769 * C139 + C15774 * C129 - C47358 * C140) *
                 C47279) *
                C31197 +
            ((C31508 - C31509 + C31510 - C31511) * C116 +
             (C31512 - C31513 + C31514 - C31515) * C47279) *
                C47391) *
               C47411 +
           (((C31509 - C31508 + C31511 - C31510) * C116 +
             (C31513 - C31512 + C31515 - C31514) * C47279) *
                C31197 +
            ((C31516 - C31517 + C31518 - C31519) * C116 +
             (C31520 - C31521 + C31522 - C31523) * C47279) *
                C47391) *
               C47400 +
           (((C31517 - C31516 + C31519 - C31518) * C116 +
             (C31521 - C31520 + C31523 - C31522) * C47279) *
                C31197 +
            ((C15773 * C1845 - C15769 * C1851 + C15774 * C1846 -
              C47358 * C1852) *
                 C116 +
             (C15773 * C1854 - C15769 * C1863 + C15774 * C1855 -
              C47358 * C1864) *
                 C47279) *
                C47391) *
               C47374) *
              C47073 * C259 +
          ((((C15769 * C126 - C15773 * C119 + C47358 * C130 - C15774 * C120) *
                 C116 +
             (C15769 * C140 - C15773 * C129 + C47358 * C141 - C15774 * C131) *
                 C47279) *
                C31197 +
            ((C31524 - C31525 + C31526 - C31527) * C116 +
             (C31528 - C31529 + C31530 - C31531) * C47279) *
                C47391) *
               C47411 +
           (((C31525 - C31524 + C31527 - C31526) * C116 +
             (C31529 - C31528 + C31531 - C31530) * C47279) *
                C31197 +
            ((C31532 - C31533 + C31534 - C31535) * C116 +
             (C31536 - C31537 + C31538 - C31539) * C47279) *
                C47391) *
               C47400 +
           (((C31533 - C31532 + C31535 - C31534) * C116 +
             (C31537 - C31536 + C31539 - C31538) * C47279) *
                C31197 +
            ((C15769 * C1852 - C15773 * C1846 + C47358 * C2121 -
              C15774 * C2120) *
                 C116 +
             (C15769 * C1864 - C15773 * C1855 + C47358 * C2123 -
              C15774 * C2122) *
                 C47279) *
                C47391) *
               C47374) *
              C47073 * C47365)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C15769 * C124 - C15773 * C117 + C47358 * C125 - C15774 * C118) *
                 C116 +
             (C15769 * C138 - C15773 * C127 + C47358 * C139 - C15774 * C128) *
                 C47279) *
                C31197 +
            ((C31492 - C31493 + C31494 - C31495) * C116 +
             (C31496 - C31497 + C31498 - C31499) * C47279) *
                C47391) *
               C47091 * C942 +
           (((C15925 - C15924 + C15927 - C15926) * C116 +
             (C15929 - C15928 + C15931 - C15930) * C47279) *
                C31197 +
            ((C16580 - C16581 + C16582 - C16583) * C116 +
             (C16584 - C16585 + C16586 - C16587) * C47279) *
                C47391) *
               C47091 * C943 +
           (((C15933 - C15932 + C15935 - C15934) * C116 +
             (C15937 - C15936 + C15939 - C15938) * C47279) *
                C31197 +
            ((C17002 - C17003 + C17004 - C17005) * C116 +
             (C17006 - C17007 + C17008 - C17009) * C47279) *
                C47391) *
               C47091 * C47371) *
              C47407 +
          ((((C15773 * C118 - C15769 * C125 + C15774 * C119 - C47358 * C126) *
                 C116 +
             (C15773 * C128 - C15769 * C139 + C15774 * C129 - C47358 * C140) *
                 C47279) *
                C31197 +
            ((C31508 - C31509 + C31510 - C31511) * C116 +
             (C31512 - C31513 + C31514 - C31515) * C47279) *
                C47391) *
               C47091 * C942 +
           (((C15941 - C15940 + C15943 - C15942) * C116 +
             (C15945 - C15944 + C15947 - C15946) * C47279) *
                C31197 +
            ((C16588 - C16589 + C16590 - C16591) * C116 +
             (C16592 - C16593 + C16594 - C16595) * C47279) *
                C47391) *
               C47091 * C943 +
           (((C15949 - C15948 + C15951 - C15950) * C116 +
             (C15953 - C15952 + C15955 - C15954) * C47279) *
                C31197 +
            ((C17350 - C17351 + C17352 - C17353) * C116 +
             (C17354 - C17355 + C17356 - C17357) * C47279) *
                C47391) *
               C47091 * C47371) *
              C47394 +
          ((((C15769 * C126 - C15773 * C119 + C47358 * C130 - C15774 * C120) *
                 C116 +
             (C15769 * C140 - C15773 * C129 + C47358 * C141 - C15774 * C131) *
                 C47279) *
                C31197 +
            ((C31524 - C31525 + C31526 - C31527) * C116 +
             (C31528 - C31529 + C31530 - C31531) * C47279) *
                C47391) *
               C47091 * C942 +
           (((C15957 - C15956 + C15959 - C15958) * C116 +
             (C15961 - C15960 + C15963 - C15962) * C47279) *
                C31197 +
            ((C16596 - C16597 + C16598 - C16599) * C116 +
             (C16600 - C16601 + C16602 - C16603) * C47279) *
                C47391) *
               C47091 * C943 +
           (((C15965 - C15964 + C15967 - C15966) * C116 +
             (C15969 - C15968 + C15971 - C15970) * C47279) *
                C31197 +
            ((C15769 * C1167 - C15773 * C1155 + C47358 * C1441 -
              C15774 * C1440) *
                 C116 +
             (C15769 * C1182 - C15773 * C1170 + C47358 * C1443 -
              C15774 * C1442) *
                 C47279) *
                C47391) *
               C47091 * C47371) *
              C47365)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C15769 * C124 - C15773 * C117 + C47358 * C125 - C15774 * C118) *
                C116 +
            (C15769 * C138 - C15773 * C127 + C47358 * C139 - C15774 * C128) *
                C47279) *
               C31197 +
           ((C31492 - C31493 + C31494 - C31495) * C116 +
            (C31496 - C31497 + C31498 - C31499) * C47279) *
               C47391) *
              C47091 * C1010 +
          (((C15925 - C15924 + C15927 - C15926) * C116 +
            (C15929 - C15928 + C15931 - C15930) * C47279) *
               C31197 +
           ((C16580 - C16581 + C16582 - C16583) * C116 +
            (C16584 - C16585 + C16586 - C16587) * C47279) *
               C47391) *
              C47091 * C1011 +
          (((C15933 - C15932 + C15935 - C15934) * C116 +
            (C15937 - C15936 + C15939 - C15938) * C47279) *
               C31197 +
           ((C17002 - C17003 + C17004 - C17005) * C116 +
            (C17006 - C17007 + C17008 - C17009) * C47279) *
               C47391) *
              C47091 * C1012 +
          (((C16833 - C16832 + C16835 - C16834) * C116 +
            (C16837 - C16836 + C16839 - C16838) * C47279) *
               C31197 +
           ((C17488 - C17489 + C17490 - C17491) * C116 +
            (C17492 - C17493 + C17494 - C17495) * C47279) *
               C47391) *
              C47091 * C1013 +
          (((C16841 - C16840 + C16843 - C16842) * C116 +
            (C16845 - C16844 + C16847 - C16846) * C47279) *
               C31197 +
           ((C15769 * C6311 - C15773 * C6309 + C47358 * C6312 -
             C15774 * C6310) *
                C116 +
            (C15769 * C6315 - C15773 * C6313 + C47358 * C6316 -
             C15774 * C6314) *
                C47279) *
               C47391) *
              C47091 * C1014) *
         C47045) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C15769 * C124 - C15773 * C117 + C47358 * C125 - C15774 * C118) *
                 C116 +
             (C15769 * C138 - C15773 * C127 + C47358 * C139 - C15774 * C128) *
                 C47279) *
                C31197 +
            ((C31492 - C31493 + C31494 - C31495) * C116 +
             (C31496 - C31497 + C31498 - C31499) * C47279) *
                C47391) *
               C47411 +
           (((C31493 - C31492 + C31495 - C31494) * C116 +
             (C31497 - C31496 + C31499 - C31498) * C47279) *
                C31197 +
            ((C31500 - C31501 + C31502 - C31503) * C116 +
             (C31504 - C31505 + C31506 - C31507) * C47279) *
                C47391) *
               C47400 +
           (((C31501 - C31500 + C31503 - C31502) * C116 +
             (C31505 - C31504 + C31507 - C31506) * C47279) *
                C31197 +
            ((C15769 * C1850 - C15773 * C1844 + C47358 * C1851 -
              C15774 * C1845) *
                 C116 +
             (C15769 * C1862 - C15773 * C1853 + C47358 * C1863 -
              C15774 * C1854) *
                 C47279) *
                C47391) *
               C47374) *
              C942 +
          ((((C15925 - C15924 + C15927 - C15926) * C116 +
             (C15929 - C15928 + C15931 - C15930) * C47279) *
                C31197 +
            ((C16580 - C16581 + C16582 - C16583) * C116 +
             (C16584 - C16585 + C16586 - C16587) * C47279) *
                C47391) *
               C47411 +
           (((C16581 - C16580 + C16583 - C16582) * C116 +
             (C16585 - C16584 + C16587 - C16586) * C47279) *
                C31197 +
            ((C16994 - C16995 + C16996 - C16997) * C116 +
             (C16998 - C16999 + C17000 - C17001) * C47279) *
                C47391) *
               C47400 +
           (((C16995 - C16994 + C16997 - C16996) * C116 +
             (C16999 - C16998 + C17001 - C17000) * C47279) *
                C31197 +
            ((C18332 - C18333 + C18334 - C18335) * C116 +
             (C18336 - C18337 + C18338 - C18339) * C47279) *
                C47391) *
               C47374) *
              C943 +
          ((((C15933 - C15932 + C15935 - C15934) * C116 +
             (C15937 - C15936 + C15939 - C15938) * C47279) *
                C31197 +
            ((C17002 - C17003 + C17004 - C17005) * C116 +
             (C17006 - C17007 + C17008 - C17009) * C47279) *
                C47391) *
               C47411 +
           (((C17003 - C17002 + C17005 - C17004) * C116 +
             (C17007 - C17006 + C17009 - C17008) * C47279) *
                C31197 +
            ((C17010 - C17011 + C17012 - C17013) * C116 +
             (C17014 - C17015 + C17016 - C17017) * C47279) *
                C47391) *
               C47400 +
           (((C17011 - C17010 + C17013 - C17012) * C116 +
             (C17015 - C17014 + C17017 - C17016) * C47279) *
                C31197 +
            ((C15769 * C7171 - C15773 * C7169 + C47358 * C7172 -
              C15774 * C7170) *
                 C116 +
             (C15769 * C7175 - C15773 * C7173 + C47358 * C7176 -
              C15774 * C7174) *
                 C47279) *
                C47391) *
               C47374) *
              C47371) *
         C47045) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C15769 * C124 - C15773 * C117 + C47358 * C125 - C15774 * C118) *
                 C116 +
             (C15769 * C138 - C15773 * C127 + C47358 * C139 - C15774 * C128) *
                 C47279) *
                C31197 +
            ((C31492 - C31493 + C31494 - C31495) * C116 +
             (C31496 - C31497 + C31498 - C31499) * C47279) *
                C47391) *
               C1664 +
           (((C31493 - C31492 + C31495 - C31494) * C116 +
             (C31497 - C31496 + C31499 - C31498) * C47279) *
                C31197 +
            ((C31500 - C31501 + C31502 - C31503) * C116 +
             (C31504 - C31505 + C31506 - C31507) * C47279) *
                C47391) *
               C1665 +
           (((C31501 - C31500 + C31503 - C31502) * C116 +
             (C31505 - C31504 + C31507 - C31506) * C47279) *
                C31197 +
            ((C15769 * C1850 - C15773 * C1844 + C47358 * C1851 -
              C15774 * C1845) *
                 C116 +
             (C15769 * C1862 - C15773 * C1853 + C47358 * C1863 -
              C15774 * C1854) *
                 C47279) *
                C47391) *
               C47374) *
              C47073 * C47407 +
          ((((C15773 * C118 - C15769 * C125 + C15774 * C119 - C47358 * C126) *
                 C116 +
             (C15773 * C128 - C15769 * C139 + C15774 * C129 - C47358 * C140) *
                 C47279) *
                C31197 +
            ((C31508 - C31509 + C31510 - C31511) * C116 +
             (C31512 - C31513 + C31514 - C31515) * C47279) *
                C47391) *
               C1664 +
           (((C31509 - C31508 + C31511 - C31510) * C116 +
             (C31513 - C31512 + C31515 - C31514) * C47279) *
                C31197 +
            ((C31516 - C31517 + C31518 - C31519) * C116 +
             (C31520 - C31521 + C31522 - C31523) * C47279) *
                C47391) *
               C1665 +
           (((C31517 - C31516 + C31519 - C31518) * C116 +
             (C31521 - C31520 + C31523 - C31522) * C47279) *
                C31197 +
            ((C15773 * C1845 - C15769 * C1851 + C15774 * C1846 -
              C47358 * C1852) *
                 C116 +
             (C15773 * C1854 - C15769 * C1863 + C15774 * C1855 -
              C47358 * C1864) *
                 C47279) *
                C47391) *
               C47374) *
              C47073 * C47394 +
          ((((C15769 * C126 - C15773 * C119 + C47358 * C130 - C15774 * C120) *
                 C116 +
             (C15769 * C140 - C15773 * C129 + C47358 * C141 - C15774 * C131) *
                 C47279) *
                C31197 +
            ((C31524 - C31525 + C31526 - C31527) * C116 +
             (C31528 - C31529 + C31530 - C31531) * C47279) *
                C47391) *
               C1664 +
           (((C31525 - C31524 + C31527 - C31526) * C116 +
             (C31529 - C31528 + C31531 - C31530) * C47279) *
                C31197 +
            ((C31532 - C31533 + C31534 - C31535) * C116 +
             (C31536 - C31537 + C31538 - C31539) * C47279) *
                C47391) *
               C1665 +
           (((C31533 - C31532 + C31535 - C31534) * C116 +
             (C31537 - C31536 + C31539 - C31538) * C47279) *
                C31197 +
            ((C15769 * C1852 - C15773 * C1846 + C47358 * C2121 -
              C15774 * C2120) *
                 C116 +
             (C15769 * C1864 - C15773 * C1855 + C47358 * C2123 -
              C15774 * C2122) *
                 C47279) *
                C47391) *
               C47374) *
              C47073 * C47365)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C15769 * C124 - C15773 * C117 + C47358 * C125 - C15774 * C118) *
                 C116 +
             (C15769 * C138 - C15773 * C127 + C47358 * C139 - C15774 * C128) *
                 C47279) *
                C31197 +
            ((C31492 - C31493 + C31494 - C31495) * C116 +
             (C31496 - C31497 + C31498 - C31499) * C47279) *
                C47391) *
               C1664 +
           (((C31493 - C31492 + C31495 - C31494) * C116 +
             (C31497 - C31496 + C31499 - C31498) * C47279) *
                C31197 +
            ((C31500 - C31501 + C31502 - C31503) * C116 +
             (C31504 - C31505 + C31506 - C31507) * C47279) *
                C47391) *
               C1665 +
           (((C31501 - C31500 + C31503 - C31502) * C116 +
             (C31505 - C31504 + C31507 - C31506) * C47279) *
                C31197 +
            ((C15769 * C1850 - C15773 * C1844 + C47358 * C1851 -
              C15774 * C1845) *
                 C116 +
             (C15769 * C1862 - C15773 * C1853 + C47358 * C1863 -
              C15774 * C1854) *
                 C47279) *
                C47391) *
               C47374) *
              C47410 +
          ((((C15925 - C15924 + C15927 - C15926) * C116 +
             (C15929 - C15928 + C15931 - C15930) * C47279) *
                C31197 +
            ((C16580 - C16581 + C16582 - C16583) * C116 +
             (C16584 - C16585 + C16586 - C16587) * C47279) *
                C47391) *
               C1664 +
           (((C16581 - C16580 + C16583 - C16582) * C116 +
             (C16585 - C16584 + C16587 - C16586) * C47279) *
                C31197 +
            ((C16994 - C16995 + C16996 - C16997) * C116 +
             (C16998 - C16999 + C17000 - C17001) * C47279) *
                C47391) *
               C1665 +
           (((C16995 - C16994 + C16997 - C16996) * C116 +
             (C16999 - C16998 + C17001 - C17000) * C47279) *
                C31197 +
            ((C18332 - C18333 + C18334 - C18335) * C116 +
             (C18336 - C18337 + C18338 - C18339) * C47279) *
                C47391) *
               C47374) *
              C47398 +
          ((((C15933 - C15932 + C15935 - C15934) * C116 +
             (C15937 - C15936 + C15939 - C15938) * C47279) *
                C31197 +
            ((C17002 - C17003 + C17004 - C17005) * C116 +
             (C17006 - C17007 + C17008 - C17009) * C47279) *
                C47391) *
               C1664 +
           (((C17003 - C17002 + C17005 - C17004) * C116 +
             (C17007 - C17006 + C17009 - C17008) * C47279) *
                C31197 +
            ((C17010 - C17011 + C17012 - C17013) * C116 +
             (C17014 - C17015 + C17016 - C17017) * C47279) *
                C47391) *
               C1665 +
           (((C17011 - C17010 + C17013 - C17012) * C116 +
             (C17015 - C17014 + C17017 - C17016) * C47279) *
                C31197 +
            ((C15769 * C7171 - C15773 * C7169 + C47358 * C7172 -
              C15774 * C7170) *
                 C116 +
             (C15769 * C7175 - C15773 * C7173 + C47358 * C7176 -
              C15774 * C7174) *
                 C47279) *
                C47391) *
               C47374) *
              C47371) *
         C47045) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C15769 * C124 - C15773 * C117 + C47358 * C125 - C15774 * C118) *
                C116 +
            (C15769 * C138 - C15773 * C127 + C47358 * C139 - C15774 * C128) *
                C47279) *
               C31197 +
           ((C31492 - C31493 + C31494 - C31495) * C116 +
            (C31496 - C31497 + C31498 - C31499) * C47279) *
               C47391) *
              C1839 +
          (((C31493 - C31492 + C31495 - C31494) * C116 +
            (C31497 - C31496 + C31499 - C31498) * C47279) *
               C31197 +
           ((C31500 - C31501 + C31502 - C31503) * C116 +
            (C31504 - C31505 + C31506 - C31507) * C47279) *
               C47391) *
              C1840 +
          (((C31501 - C31500 + C31503 - C31502) * C116 +
            (C31505 - C31504 + C31507 - C31506) * C47279) *
               C31197 +
           ((C33204 - C33205 + C33206 - C33207) * C116 +
            (C33208 - C33209 + C33210 - C33211) * C47279) *
               C47391) *
              C1841 +
          (((C33205 - C33204 + C33207 - C33206) * C116 +
            (C33209 - C33208 + C33211 - C33210) * C47279) *
               C31197 +
           ((C33212 - C33213 + C33214 - C33215) * C116 +
            (C33216 - C33217 + C33218 - C33219) * C47279) *
               C47391) *
              C1842 +
          (((C33213 - C33212 + C33215 - C33214) * C116 +
            (C33217 - C33216 + C33219 - C33218) * C47279) *
               C31197 +
           ((C15769 * C12239 - C15773 * C12237 + C47358 * C12240 -
             C15774 * C12238) *
                C116 +
            (C15769 * C12243 - C15773 * C12241 + C47358 * C12244 -
             C15774 * C12242) *
                C47279) *
               C47391) *
              C1843) *
         C47073 * C47045) /
            (p * q * std::sqrt(p + q));
    d2ee[163] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C15769 * C124 - C15773 * C117 + C47358 * C125 - C15774 * C118) *
                  C116 +
              (C15769 * C138 - C15773 * C127 + C47358 * C139 - C15774 * C128) *
                  C47279) *
                 C31197 +
             ((C31492 - C31493 + C31494 - C31495) * C116 +
              (C31496 - C31497 + C31498 - C31499) * C47279) *
                 C47391) *
                C47340 +
            (((C31493 - C31492 + C31495 - C31494) * C116 +
              (C31497 - C31496 + C31499 - C31498) * C47279) *
                 C31197 +
             ((C31500 - C31501 + C31502 - C31503) * C116 +
              (C31504 - C31505 + C31506 - C31507) * C47279) *
                 C47391) *
                C47178) *
               C942 +
           ((((C15925 - C15924 + C15927 - C15926) * C116 +
              (C15929 - C15928 + C15931 - C15930) * C47279) *
                 C31197 +
             ((C16580 - C16581 + C16582 - C16583) * C116 +
              (C16584 - C16585 + C16586 - C16587) * C47279) *
                 C47391) *
                C47340 +
            (((C16581 - C16580 + C16583 - C16582) * C116 +
              (C16585 - C16584 + C16587 - C16586) * C47279) *
                 C31197 +
             ((C16994 - C16995 + C16996 - C16997) * C116 +
              (C16998 - C16999 + C17000 - C17001) * C47279) *
                 C47391) *
                C47178) *
               C943 +
           ((((C15933 - C15932 + C15935 - C15934) * C116 +
              (C15937 - C15936 + C15939 - C15938) * C47279) *
                 C31197 +
             ((C17002 - C17003 + C17004 - C17005) * C116 +
              (C17006 - C17007 + C17008 - C17009) * C47279) *
                 C47391) *
                C47340 +
            (((C17003 - C17002 + C17005 - C17004) * C116 +
              (C17007 - C17006 + C17009 - C17008) * C47279) *
                 C31197 +
             ((C17010 - C17011 + C17012 - C17013) * C116 +
              (C17014 - C17015 + C17016 - C17017) * C47279) *
                 C47391) *
                C47178) *
               C47371) *
              C47325 +
          (((((C15773 * C118 - C15769 * C125 + C15774 * C119 - C47358 * C126) *
                  C116 +
              (C15773 * C128 - C15769 * C139 + C15774 * C129 - C47358 * C140) *
                  C47279) *
                 C31197 +
             ((C31508 - C31509 + C31510 - C31511) * C116 +
              (C31512 - C31513 + C31514 - C31515) * C47279) *
                 C47391) *
                C47340 +
            (((C31509 - C31508 + C31511 - C31510) * C116 +
              (C31513 - C31512 + C31515 - C31514) * C47279) *
                 C31197 +
             ((C31516 - C31517 + C31518 - C31519) * C116 +
              (C31520 - C31521 + C31522 - C31523) * C47279) *
                 C47391) *
                C47178) *
               C942 +
           ((((C15941 - C15940 + C15943 - C15942) * C116 +
              (C15945 - C15944 + C15947 - C15946) * C47279) *
                 C31197 +
             ((C16588 - C16589 + C16590 - C16591) * C116 +
              (C16592 - C16593 + C16594 - C16595) * C47279) *
                 C47391) *
                C47340 +
            (((C16589 - C16588 + C16591 - C16590) * C116 +
              (C16593 - C16592 + C16595 - C16594) * C47279) *
                 C31197 +
             ((C18064 - C18065 + C18066 - C18067) * C116 +
              (C18068 - C18069 + C18070 - C18071) * C47279) *
                 C47391) *
                C47178) *
               C943 +
           ((((C15949 - C15948 + C15951 - C15950) * C116 +
              (C15953 - C15952 + C15955 - C15954) * C47279) *
                 C31197 +
             ((C17350 - C17351 + C17352 - C17353) * C116 +
              (C17354 - C17355 + C17356 - C17357) * C47279) *
                 C47391) *
                C47340 +
            (((C17351 - C17350 + C17353 - C17352) * C116 +
              (C17355 - C17354 + C17357 - C17356) * C47279) *
                 C31197 +
             ((C15769 * C1172 - C15773 * C1157 + C47358 * C1173 -
               C15774 * C1158) *
                  C116 +
              (C15769 * C1184 - C15773 * C1175 + C47358 * C1185 -
               C15774 * C1176) *
                  C47279) *
                 C47391) *
                C47178) *
               C47371) *
              C47056)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C15769 * C124 - C15773 * C117 + C47358 * C125 - C15774 * C118) *
                 C116 +
             (C15769 * C138 - C15773 * C127 + C47358 * C139 - C15774 * C128) *
                 C47279) *
                C31197 +
            ((C31492 - C31493 + C31494 - C31495) * C116 +
             (C31496 - C31497 + C31498 - C31499) * C47279) *
                C47391) *
               C47340 +
           (((C31493 - C31492 + C31495 - C31494) * C116 +
             (C31497 - C31496 + C31499 - C31498) * C47279) *
                C31197 +
            ((C31500 - C31501 + C31502 - C31503) * C116 +
             (C31504 - C31505 + C31506 - C31507) * C47279) *
                C47391) *
               C47178) *
              C47073 * C554 +
          ((((C15773 * C118 - C15769 * C125 + C15774 * C119 - C47358 * C126) *
                 C116 +
             (C15773 * C128 - C15769 * C139 + C15774 * C129 - C47358 * C140) *
                 C47279) *
                C31197 +
            ((C31508 - C31509 + C31510 - C31511) * C116 +
             (C31512 - C31513 + C31514 - C31515) * C47279) *
                C47391) *
               C47340 +
           (((C31509 - C31508 + C31511 - C31510) * C116 +
             (C31513 - C31512 + C31515 - C31514) * C47279) *
                C31197 +
            ((C31516 - C31517 + C31518 - C31519) * C116 +
             (C31520 - C31521 + C31522 - C31523) * C47279) *
                C47391) *
               C47178) *
              C47073 * C555 +
          ((((C15769 * C126 - C15773 * C119 + C47358 * C130 - C15774 * C120) *
                 C116 +
             (C15769 * C140 - C15773 * C129 + C47358 * C141 - C15774 * C131) *
                 C47279) *
                C31197 +
            ((C31524 - C31525 + C31526 - C31527) * C116 +
             (C31528 - C31529 + C31530 - C31531) * C47279) *
                C47391) *
               C47340 +
           (((C31525 - C31524 + C31527 - C31526) * C116 +
             (C31529 - C31528 + C31531 - C31530) * C47279) *
                C31197 +
            ((C31532 - C31533 + C31534 - C31535) * C116 +
             (C31536 - C31537 + C31538 - C31539) * C47279) *
                C47391) *
               C47178) *
              C47073 * C556 +
          ((((C15773 * C120 - C15769 * C130 + C15774 * C121 - C47358 * C132) *
                 C116 +
             (C15773 * C131 - C15769 * C141 + C15774 * C133 - C47358 * C142) *
                 C47279) *
                C31197 +
            ((C31800 - C31801 + C31802 - C31803) * C116 +
             (C31804 - C31805 + C31806 - C31807) * C47279) *
                C47391) *
               C47340 +
           (((C31801 - C31800 + C31803 - C31802) * C116 +
             (C31805 - C31804 + C31807 - C31806) * C47279) *
                C31197 +
            ((C15769 * C438 - C15773 * C421 + C47358 * C442 - C15774 * C423) *
                 C116 +
             (C15769 * C451 - C15773 * C439 + C47358 * C453 - C15774 * C443) *
                 C47279) *
                C47391) *
               C47178) *
              C47073 * C47375)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C15769 * C124 - C15773 * C117 + C47358 * C125 - C15774 * C118) *
                 C116 +
             (C15769 * C138 - C15773 * C127 + C47358 * C139 - C15774 * C128) *
                 C47279) *
                C31197 +
            ((C31492 - C31493 + C31494 - C31495) * C116 +
             (C31496 - C31497 + C31498 - C31499) * C47279) *
                C47391) *
               C2116 +
           (((C31493 - C31492 + C31495 - C31494) * C116 +
             (C31497 - C31496 + C31499 - C31498) * C47279) *
                C31197 +
            ((C31500 - C31501 + C31502 - C31503) * C116 +
             (C31504 - C31505 + C31506 - C31507) * C47279) *
                C47391) *
               C2117 +
           (((C31501 - C31500 + C31503 - C31502) * C116 +
             (C31505 - C31504 + C31507 - C31506) * C47279) *
                C31197 +
            ((C33204 - C33205 + C33206 - C33207) * C116 +
             (C33208 - C33209 + C33210 - C33211) * C47279) *
                C47391) *
               C2118 +
           (((C33205 - C33204 + C33207 - C33206) * C116 +
             (C33209 - C33208 + C33211 - C33210) * C47279) *
                C31197 +
            ((C33212 - C33213 + C33214 - C33215) * C116 +
             (C33216 - C33217 + C33218 - C33219) * C47279) *
                C47391) *
               C47387) *
              C47073 * C47325 +
          ((((C15773 * C118 - C15769 * C125 + C15774 * C119 - C47358 * C126) *
                 C116 +
             (C15773 * C128 - C15769 * C139 + C15774 * C129 - C47358 * C140) *
                 C47279) *
                C31197 +
            ((C31508 - C31509 + C31510 - C31511) * C116 +
             (C31512 - C31513 + C31514 - C31515) * C47279) *
                C47391) *
               C2116 +
           (((C31509 - C31508 + C31511 - C31510) * C116 +
             (C31513 - C31512 + C31515 - C31514) * C47279) *
                C31197 +
            ((C31516 - C31517 + C31518 - C31519) * C116 +
             (C31520 - C31521 + C31522 - C31523) * C47279) *
                C47391) *
               C2117 +
           (((C31517 - C31516 + C31519 - C31518) * C116 +
             (C31521 - C31520 + C31523 - C31522) * C47279) *
                C31197 +
            ((C33544 - C33545 + C33546 - C33547) * C116 +
             (C33548 - C33549 + C33550 - C33551) * C47279) *
                C47391) *
               C2118 +
           (((C33545 - C33544 + C33547 - C33546) * C116 +
             (C33549 - C33548 + C33551 - C33550) * C47279) *
                C31197 +
            ((C15769 * C1857 - C15773 * C1848 + C47358 * C1858 -
              C15774 * C1849) *
                 C116 +
             (C15769 * C1866 - C15773 * C1860 + C47358 * C1867 -
              C15774 * C1861) *
                 C47279) *
                C47391) *
               C47387) *
              C47073 * C47056)) /
            (p * q * std::sqrt(p + q));
    d2ee[164] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C15769 * C124 - C15773 * C117 + C47358 * C125 - C15774 * C118) *
                 C116 +
             (C15769 * C138 - C15773 * C127 + C47358 * C139 - C15774 * C128) *
                 C47279) *
                C31197 +
            ((C15769 * C424 - C15773 * C414 + C47358 * C425 - C15774 * C415) *
                 C116 +
             (C15769 * C444 - C15773 * C427 + C47358 * C445 - C15774 * C428) *
                 C47279) *
                C47391) *
               C47091 * C47410 +
           (((C15925 - C15924 + C15927 - C15926) * C116 +
             (C15929 - C15928 + C15931 - C15930) * C47279) *
                C31197 +
            ((C16580 - C16581 + C16582 - C16583) * C116 +
             (C16584 - C16585 + C16586 - C16587) * C47279) *
                C47391) *
               C47091 * C47398 +
           (((C15933 - C15932 + C15935 - C15934) * C116 +
             (C15937 - C15936 + C15939 - C15938) * C47279) *
                C31197 +
            ((C17002 - C17003 + C17004 - C17005) * C116 +
             (C17006 - C17007 + C17008 - C17009) * C47279) *
                C47391) *
               C47091 * C47371) *
              C258 +
          ((((C15773 * C118 - C15769 * C125 + C15774 * C119 - C47358 * C126) *
                 C116 +
             (C15773 * C128 - C15769 * C139 + C15774 * C129 - C47358 * C140) *
                 C47279) *
                C31197 +
            ((C15773 * C415 - C15769 * C425 + C15774 * C416 - C47358 * C426) *
                 C116 +
             (C15773 * C428 - C15769 * C445 + C15774 * C429 - C47358 * C446) *
                 C47279) *
                C47391) *
               C47091 * C47410 +
           (((C15941 - C15940 + C15943 - C15942) * C116 +
             (C15945 - C15944 + C15947 - C15946) * C47279) *
                C31197 +
            ((C16588 - C16589 + C16590 - C16591) * C116 +
             (C16592 - C16593 + C16594 - C16595) * C47279) *
                C47391) *
               C47091 * C47398 +
           (((C15949 - C15948 + C15951 - C15950) * C116 +
             (C15953 - C15952 + C15955 - C15954) * C47279) *
                C31197 +
            ((C17350 - C17351 + C17352 - C17353) * C116 +
             (C17354 - C17355 + C17356 - C17357) * C47279) *
                C47391) *
               C47091 * C47371) *
              C259 +
          ((((C15769 * C126 - C15773 * C119 + C47358 * C130 - C15774 * C120) *
                 C116 +
             (C15769 * C140 - C15773 * C129 + C47358 * C141 - C15774 * C131) *
                 C47279) *
                C31197 +
            ((C15769 * C426 - C15773 * C416 + C47358 * C436 - C15774 * C420) *
                 C116 +
             (C15769 * C446 - C15773 * C429 + C47358 * C450 - C15774 * C437) *
                 C47279) *
                C47391) *
               C47091 * C47410 +
           (((C15957 - C15956 + C15959 - C15958) * C116 +
             (C15961 - C15960 + C15963 - C15962) * C47279) *
                C31197 +
            ((C16596 - C16597 + C16598 - C16599) * C116 +
             (C16600 - C16601 + C16602 - C16603) * C47279) *
                C47391) *
               C47091 * C47398 +
           (((C15965 - C15964 + C15967 - C15966) * C116 +
             (C15969 - C15968 + C15971 - C15970) * C47279) *
                C31197 +
            ((C15769 * C1167 - C15773 * C1155 + C47358 * C1441 -
              C15774 * C1440) *
                 C116 +
             (C15769 * C1182 - C15773 * C1170 + C47358 * C1443 -
              C15774 * C1442) *
                 C47279) *
                C47391) *
               C47091 * C47371) *
              C47365)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C15769 * C124 - C15773 * C117 + C47358 * C125 - C15774 * C118) *
                C116 +
            (C15769 * C138 - C15773 * C127 + C47358 * C139 - C15774 * C128) *
                C47279) *
               C31197 +
           ((C15769 * C424 - C15773 * C414 + C47358 * C425 - C15774 * C415) *
                C116 +
            (C15769 * C444 - C15773 * C427 + C47358 * C445 - C15774 * C428) *
                C47279) *
               C47391) *
              C47091 * C47073 * C108 +
          (((C15773 * C118 - C15769 * C125 + C15774 * C119 - C47358 * C126) *
                C116 +
            (C15773 * C128 - C15769 * C139 + C15774 * C129 - C47358 * C140) *
                C47279) *
               C31197 +
           ((C15773 * C415 - C15769 * C425 + C15774 * C416 - C47358 * C426) *
                C116 +
            (C15773 * C428 - C15769 * C445 + C15774 * C429 - C47358 * C446) *
                C47279) *
               C47391) *
              C47091 * C47073 * C109 +
          (((C15769 * C126 - C15773 * C119 + C47358 * C130 - C15774 * C120) *
                C116 +
            (C15769 * C140 - C15773 * C129 + C47358 * C141 - C15774 * C131) *
                C47279) *
               C31197 +
           ((C15769 * C426 - C15773 * C416 + C47358 * C436 - C15774 * C420) *
                C116 +
            (C15769 * C446 - C15773 * C429 + C47358 * C450 - C15774 * C437) *
                C47279) *
               C47391) *
              C47091 * C47073 * C110 +
          (((C15773 * C120 - C15769 * C130 + C15774 * C121 - C47358 * C132) *
                C116 +
            (C15773 * C131 - C15769 * C141 + C15774 * C133 - C47358 * C142) *
                C47279) *
               C31197 +
           ((C15773 * C420 - C15769 * C436 + C15774 * C422 - C47358 * C440) *
                C116 +
            (C15773 * C437 - C15769 * C450 + C15774 * C441 - C47358 * C452) *
                C47279) *
               C47391) *
              C47091 * C47073 * C111 +
          (((C15769 * C132 - C15773 * C121 + C47358 * C134 - C15774 * C122) *
                C116 +
            (C15769 * C142 - C15773 * C133 + C47358 * C143 - C15774 * C135) *
                C47279) *
               C31197 +
           ((C15769 * C440 - C15773 * C422 + C47358 * C663 - C15774 * C662) *
                C116 +
            (C15769 * C452 - C15773 * C441 + C47358 * C665 - C15774 * C664) *
                C47279) *
               C47391) *
              C47091 * C47073 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C15769 * C124 - C15773 * C117 + C47358 * C125 - C15774 * C118) *
                 C116 +
             (C15769 * C138 - C15773 * C127 + C47358 * C139 - C15774 * C128) *
                 C47279) *
                C31197 +
            ((C31492 - C31493 + C31494 - C31495) * C116 +
             (C31496 - C31497 + C31498 - C31499) * C47279) *
                C47391) *
               C47091 * C942 +
           (((C15925 - C15924 + C15927 - C15926) * C116 +
             (C15929 - C15928 + C15931 - C15930) * C47279) *
                C31197 +
            ((C16580 - C16581 + C16582 - C16583) * C116 +
             (C16584 - C16585 + C16586 - C16587) * C47279) *
                C47391) *
               C47091 * C943 +
           (((C15933 - C15932 + C15935 - C15934) * C116 +
             (C15937 - C15936 + C15939 - C15938) * C47279) *
                C31197 +
            ((C17002 - C17003 + C17004 - C17005) * C116 +
             (C17006 - C17007 + C17008 - C17009) * C47279) *
                C47391) *
               C47091 * C47371) *
              C47407 +
          ((((C15773 * C118 - C15769 * C125 + C15774 * C119 - C47358 * C126) *
                 C116 +
             (C15773 * C128 - C15769 * C139 + C15774 * C129 - C47358 * C140) *
                 C47279) *
                C31197 +
            ((C31508 - C31509 + C31510 - C31511) * C116 +
             (C31512 - C31513 + C31514 - C31515) * C47279) *
                C47391) *
               C47091 * C942 +
           (((C15941 - C15940 + C15943 - C15942) * C116 +
             (C15945 - C15944 + C15947 - C15946) * C47279) *
                C31197 +
            ((C16588 - C16589 + C16590 - C16591) * C116 +
             (C16592 - C16593 + C16594 - C16595) * C47279) *
                C47391) *
               C47091 * C943 +
           (((C15949 - C15948 + C15951 - C15950) * C116 +
             (C15953 - C15952 + C15955 - C15954) * C47279) *
                C31197 +
            ((C17350 - C17351 + C17352 - C17353) * C116 +
             (C17354 - C17355 + C17356 - C17357) * C47279) *
                C47391) *
               C47091 * C47371) *
              C47394 +
          ((((C15769 * C126 - C15773 * C119 + C47358 * C130 - C15774 * C120) *
                 C116 +
             (C15769 * C140 - C15773 * C129 + C47358 * C141 - C15774 * C131) *
                 C47279) *
                C31197 +
            ((C31524 - C31525 + C31526 - C31527) * C116 +
             (C31528 - C31529 + C31530 - C31531) * C47279) *
                C47391) *
               C47091 * C942 +
           (((C15957 - C15956 + C15959 - C15958) * C116 +
             (C15961 - C15960 + C15963 - C15962) * C47279) *
                C31197 +
            ((C16596 - C16597 + C16598 - C16599) * C116 +
             (C16600 - C16601 + C16602 - C16603) * C47279) *
                C47391) *
               C47091 * C943 +
           (((C15965 - C15964 + C15967 - C15966) * C116 +
             (C15969 - C15968 + C15971 - C15970) * C47279) *
                C31197 +
            ((C15769 * C1167 - C15773 * C1155 + C47358 * C1441 -
              C15774 * C1440) *
                 C116 +
             (C15769 * C1182 - C15773 * C1170 + C47358 * C1443 -
              C15774 * C1442) *
                 C47279) *
                C47391) *
               C47091 * C47371) *
              C47365)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C15769 * C124 - C15773 * C117 + C47358 * C125 - C15774 * C118) *
                C116 +
            (C15769 * C138 - C15773 * C127 + C47358 * C139 - C15774 * C128) *
                C47279) *
               C31197 +
           ((C31492 - C31493 + C31494 - C31495) * C116 +
            (C31496 - C31497 + C31498 - C31499) * C47279) *
               C47391) *
              C47091 * C1010 +
          (((C15925 - C15924 + C15927 - C15926) * C116 +
            (C15929 - C15928 + C15931 - C15930) * C47279) *
               C31197 +
           ((C16580 - C16581 + C16582 - C16583) * C116 +
            (C16584 - C16585 + C16586 - C16587) * C47279) *
               C47391) *
              C47091 * C1011 +
          (((C15933 - C15932 + C15935 - C15934) * C116 +
            (C15937 - C15936 + C15939 - C15938) * C47279) *
               C31197 +
           ((C17002 - C17003 + C17004 - C17005) * C116 +
            (C17006 - C17007 + C17008 - C17009) * C47279) *
               C47391) *
              C47091 * C1012 +
          (((C16833 - C16832 + C16835 - C16834) * C116 +
            (C16837 - C16836 + C16839 - C16838) * C47279) *
               C31197 +
           ((C17488 - C17489 + C17490 - C17491) * C116 +
            (C17492 - C17493 + C17494 - C17495) * C47279) *
               C47391) *
              C47091 * C1013 +
          (((C16841 - C16840 + C16843 - C16842) * C116 +
            (C16845 - C16844 + C16847 - C16846) * C47279) *
               C31197 +
           ((C15769 * C6311 - C15773 * C6309 + C47358 * C6312 -
             C15774 * C6310) *
                C116 +
            (C15769 * C6315 - C15773 * C6313 + C47358 * C6316 -
             C15774 * C6314) *
                C47279) *
               C47391) *
              C47091 * C1014) *
         C47045) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C15769 * C124 - C15773 * C117 + C47358 * C125 - C15774 * C118) *
                 C116 +
             (C15769 * C138 - C15773 * C127 + C47358 * C139 - C15774 * C128) *
                 C47279) *
                C31197 +
            ((C31492 - C31493 + C31494 - C31495) * C116 +
             (C31496 - C31497 + C31498 - C31499) * C47279) *
                C47391) *
               C1664 +
           (((C31493 - C31492 + C31495 - C31494) * C116 +
             (C31497 - C31496 + C31499 - C31498) * C47279) *
                C31197 +
            ((C31500 - C31501 + C31502 - C31503) * C116 +
             (C31504 - C31505 + C31506 - C31507) * C47279) *
                C47391) *
               C1665 +
           (((C31501 - C31500 + C31503 - C31502) * C116 +
             (C31505 - C31504 + C31507 - C31506) * C47279) *
                C31197 +
            ((C15769 * C1850 - C15773 * C1844 + C47358 * C1851 -
              C15774 * C1845) *
                 C116 +
             (C15769 * C1862 - C15773 * C1853 + C47358 * C1863 -
              C15774 * C1854) *
                 C47279) *
                C47391) *
               C47374) *
              C47073 * C47407 +
          ((((C15773 * C118 - C15769 * C125 + C15774 * C119 - C47358 * C126) *
                 C116 +
             (C15773 * C128 - C15769 * C139 + C15774 * C129 - C47358 * C140) *
                 C47279) *
                C31197 +
            ((C31508 - C31509 + C31510 - C31511) * C116 +
             (C31512 - C31513 + C31514 - C31515) * C47279) *
                C47391) *
               C1664 +
           (((C31509 - C31508 + C31511 - C31510) * C116 +
             (C31513 - C31512 + C31515 - C31514) * C47279) *
                C31197 +
            ((C31516 - C31517 + C31518 - C31519) * C116 +
             (C31520 - C31521 + C31522 - C31523) * C47279) *
                C47391) *
               C1665 +
           (((C31517 - C31516 + C31519 - C31518) * C116 +
             (C31521 - C31520 + C31523 - C31522) * C47279) *
                C31197 +
            ((C15773 * C1845 - C15769 * C1851 + C15774 * C1846 -
              C47358 * C1852) *
                 C116 +
             (C15773 * C1854 - C15769 * C1863 + C15774 * C1855 -
              C47358 * C1864) *
                 C47279) *
                C47391) *
               C47374) *
              C47073 * C47394 +
          ((((C15769 * C126 - C15773 * C119 + C47358 * C130 - C15774 * C120) *
                 C116 +
             (C15769 * C140 - C15773 * C129 + C47358 * C141 - C15774 * C131) *
                 C47279) *
                C31197 +
            ((C31524 - C31525 + C31526 - C31527) * C116 +
             (C31528 - C31529 + C31530 - C31531) * C47279) *
                C47391) *
               C1664 +
           (((C31525 - C31524 + C31527 - C31526) * C116 +
             (C31529 - C31528 + C31531 - C31530) * C47279) *
                C31197 +
            ((C31532 - C31533 + C31534 - C31535) * C116 +
             (C31536 - C31537 + C31538 - C31539) * C47279) *
                C47391) *
               C1665 +
           (((C31533 - C31532 + C31535 - C31534) * C116 +
             (C31537 - C31536 + C31539 - C31538) * C47279) *
                C31197 +
            ((C15769 * C1852 - C15773 * C1846 + C47358 * C2121 -
              C15774 * C2120) *
                 C116 +
             (C15769 * C1864 - C15773 * C1855 + C47358 * C2123 -
              C15774 * C2122) *
                 C47279) *
                C47391) *
               C47374) *
              C47073 * C47365)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C15769 * C124 - C15773 * C117 + C47358 * C125 - C15774 * C118) *
                 C116 +
             (C15769 * C138 - C15773 * C127 + C47358 * C139 - C15774 * C128) *
                 C47279) *
                C31197 +
            ((C31492 - C31493 + C31494 - C31495) * C116 +
             (C31496 - C31497 + C31498 - C31499) * C47279) *
                C47391) *
               C1664 +
           (((C31493 - C31492 + C31495 - C31494) * C116 +
             (C31497 - C31496 + C31499 - C31498) * C47279) *
                C31197 +
            ((C31500 - C31501 + C31502 - C31503) * C116 +
             (C31504 - C31505 + C31506 - C31507) * C47279) *
                C47391) *
               C1665 +
           (((C31501 - C31500 + C31503 - C31502) * C116 +
             (C31505 - C31504 + C31507 - C31506) * C47279) *
                C31197 +
            ((C15769 * C1850 - C15773 * C1844 + C47358 * C1851 -
              C15774 * C1845) *
                 C116 +
             (C15769 * C1862 - C15773 * C1853 + C47358 * C1863 -
              C15774 * C1854) *
                 C47279) *
                C47391) *
               C47374) *
              C47410 +
          ((((C15925 - C15924 + C15927 - C15926) * C116 +
             (C15929 - C15928 + C15931 - C15930) * C47279) *
                C31197 +
            ((C16580 - C16581 + C16582 - C16583) * C116 +
             (C16584 - C16585 + C16586 - C16587) * C47279) *
                C47391) *
               C1664 +
           (((C16581 - C16580 + C16583 - C16582) * C116 +
             (C16585 - C16584 + C16587 - C16586) * C47279) *
                C31197 +
            ((C16994 - C16995 + C16996 - C16997) * C116 +
             (C16998 - C16999 + C17000 - C17001) * C47279) *
                C47391) *
               C1665 +
           (((C16995 - C16994 + C16997 - C16996) * C116 +
             (C16999 - C16998 + C17001 - C17000) * C47279) *
                C31197 +
            ((C18332 - C18333 + C18334 - C18335) * C116 +
             (C18336 - C18337 + C18338 - C18339) * C47279) *
                C47391) *
               C47374) *
              C47398 +
          ((((C15933 - C15932 + C15935 - C15934) * C116 +
             (C15937 - C15936 + C15939 - C15938) * C47279) *
                C31197 +
            ((C17002 - C17003 + C17004 - C17005) * C116 +
             (C17006 - C17007 + C17008 - C17009) * C47279) *
                C47391) *
               C1664 +
           (((C17003 - C17002 + C17005 - C17004) * C116 +
             (C17007 - C17006 + C17009 - C17008) * C47279) *
                C31197 +
            ((C17010 - C17011 + C17012 - C17013) * C116 +
             (C17014 - C17015 + C17016 - C17017) * C47279) *
                C47391) *
               C1665 +
           (((C17011 - C17010 + C17013 - C17012) * C116 +
             (C17015 - C17014 + C17017 - C17016) * C47279) *
                C31197 +
            ((C15769 * C7171 - C15773 * C7169 + C47358 * C7172 -
              C15774 * C7170) *
                 C116 +
             (C15769 * C7175 - C15773 * C7173 + C47358 * C7176 -
              C15774 * C7174) *
                 C47279) *
                C47391) *
               C47374) *
              C47371) *
         C47045) /
            (p * q * std::sqrt(p + q));
    d2ee[165] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C15769 * C124 - C15773 * C117 + C47358 * C125 - C15774 * C118) *
                  C116 +
              (C15769 * C138 - C15773 * C127 + C47358 * C139 - C15774 * C128) *
                  C47279) *
                 C31197 +
             ((C31492 - C31493 + C31494 - C31495) * C116 +
              (C31496 - C31497 + C31498 - C31499) * C47279) *
                 C47391) *
                C3094 +
            (((C31493 - C31492 + C31495 - C31494) * C116 +
              (C31497 - C31496 + C31499 - C31498) * C47279) *
                 C31197 +
             ((C31500 - C31501 + C31502 - C31503) * C116 +
              (C31504 - C31505 + C31506 - C31507) * C47279) *
                 C47391) *
                C47178) *
               C47339 +
           ((((C15925 - C15924 + C15927 - C15926) * C116 +
              (C15929 - C15928 + C15931 - C15930) * C47279) *
                 C31197 +
             ((C16580 - C16581 + C16582 - C16583) * C116 +
              (C16584 - C16585 + C16586 - C16587) * C47279) *
                 C47391) *
                C3094 +
            (((C16581 - C16580 + C16583 - C16582) * C116 +
              (C16585 - C16584 + C16587 - C16586) * C47279) *
                 C31197 +
             ((C16994 - C16995 + C16996 - C16997) * C116 +
              (C16998 - C16999 + C17000 - C17001) * C47279) *
                 C47391) *
                C47178) *
               C47136) *
              C47050 +
          (((((C15773 * C118 - C15769 * C125 + C15774 * C119 - C47358 * C126) *
                  C116 +
              (C15773 * C128 - C15769 * C139 + C15774 * C129 - C47358 * C140) *
                  C47279) *
                 C31197 +
             ((C31508 - C31509 + C31510 - C31511) * C116 +
              (C31512 - C31513 + C31514 - C31515) * C47279) *
                 C47391) *
                C3094 +
            (((C31509 - C31508 + C31511 - C31510) * C116 +
              (C31513 - C31512 + C31515 - C31514) * C47279) *
                 C31197 +
             ((C31516 - C31517 + C31518 - C31519) * C116 +
              (C31520 - C31521 + C31522 - C31523) * C47279) *
                 C47391) *
                C47178) *
               C47339 +
           ((((C15941 - C15940 + C15943 - C15942) * C116 +
              (C15945 - C15944 + C15947 - C15946) * C47279) *
                 C31197 +
             ((C16588 - C16589 + C16590 - C16591) * C116 +
              (C16592 - C16593 + C16594 - C16595) * C47279) *
                 C47391) *
                C3094 +
            (((C16589 - C16588 + C16591 - C16590) * C116 +
              (C16593 - C16592 + C16595 - C16594) * C47279) *
                 C31197 +
             ((C18064 - C18065 + C18066 - C18067) * C116 +
              (C18068 - C18069 + C18070 - C18071) * C47279) *
                 C47391) *
                C47178) *
               C47136) *
              C47059 +
          (((((C15769 * C126 - C15773 * C119 + C47358 * C130 - C15774 * C120) *
                  C116 +
              (C15769 * C140 - C15773 * C129 + C47358 * C141 - C15774 * C131) *
                  C47279) *
                 C31197 +
             ((C31524 - C31525 + C31526 - C31527) * C116 +
              (C31528 - C31529 + C31530 - C31531) * C47279) *
                 C47391) *
                C3094 +
            (((C31525 - C31524 + C31527 - C31526) * C116 +
              (C31529 - C31528 + C31531 - C31530) * C47279) *
                 C31197 +
             ((C31532 - C31533 + C31534 - C31535) * C116 +
              (C31536 - C31537 + C31538 - C31539) * C47279) *
                 C47391) *
                C47178) *
               C47339 +
           ((((C15957 - C15956 + C15959 - C15958) * C116 +
              (C15961 - C15960 + C15963 - C15962) * C47279) *
                 C31197 +
             ((C16596 - C16597 + C16598 - C16599) * C116 +
              (C16600 - C16601 + C16602 - C16603) * C47279) *
                 C47391) *
                C3094 +
            (((C16597 - C16596 + C16599 - C16598) * C116 +
              (C16601 - C16600 + C16603 - C16602) * C47279) *
                 C31197 +
             ((C15769 * C1161 - C15773 * C1152 + C47358 * C2015 -
               C15774 * C2014) *
                  C116 +
              (C15769 * C1179 - C15773 * C1164 + C47358 * C2017 -
               C15774 * C2016) *
                  C47279) *
                 C47391) *
                C47178) *
               C47136) *
              C2703)) /
        (p * q * std::sqrt(p + q));
    d2ee[166] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C15769 * C124 - C15773 * C117 + C47358 * C125 - C15774 * C118) *
                  C116 +
              (C15769 * C138 - C15773 * C127 + C47358 * C139 - C15774 * C128) *
                  C47279) *
                 C31197 +
             ((C31492 - C31493 + C31494 - C31495) * C116 +
              (C31496 - C31497 + C31498 - C31499) * C47279) *
                 C47391) *
                C47174 +
            (((C31493 - C31492 + C31495 - C31494) * C116 +
              (C31497 - C31496 + C31499 - C31498) * C47279) *
                 C31197 +
             ((C31500 - C31501 + C31502 - C31503) * C116 +
              (C31504 - C31505 + C31506 - C31507) * C47279) *
                 C47391) *
                C47181 +
            (((C31501 - C31500 + C31503 - C31502) * C116 +
              (C31505 - C31504 + C31507 - C31506) * C47279) *
                 C31197 +
             ((C33204 - C33205 + C33206 - C33207) * C116 +
              (C33208 - C33209 + C33210 - C33211) * C47279) *
                 C47391) *
                C3602) *
               C47339 +
           ((((C15925 - C15924 + C15927 - C15926) * C116 +
              (C15929 - C15928 + C15931 - C15930) * C47279) *
                 C31197 +
             ((C16580 - C16581 + C16582 - C16583) * C116 +
              (C16584 - C16585 + C16586 - C16587) * C47279) *
                 C47391) *
                C47174 +
            (((C16581 - C16580 + C16583 - C16582) * C116 +
              (C16585 - C16584 + C16587 - C16586) * C47279) *
                 C31197 +
             ((C16994 - C16995 + C16996 - C16997) * C116 +
              (C16998 - C16999 + C17000 - C17001) * C47279) *
                 C47391) *
                C47181 +
            (((C16995 - C16994 + C16997 - C16996) * C116 +
              (C16999 - C16998 + C17001 - C17000) * C47279) *
                 C31197 +
             ((C18332 - C18333 + C18334 - C18335) * C116 +
              (C18336 - C18337 + C18338 - C18339) * C47279) *
                 C47391) *
                C3602) *
               C47136) *
              C2440 +
          (((((C15773 * C118 - C15769 * C125 + C15774 * C119 - C47358 * C126) *
                  C116 +
              (C15773 * C128 - C15769 * C139 + C15774 * C129 - C47358 * C140) *
                  C47279) *
                 C31197 +
             ((C31508 - C31509 + C31510 - C31511) * C116 +
              (C31512 - C31513 + C31514 - C31515) * C47279) *
                 C47391) *
                C47174 +
            (((C31509 - C31508 + C31511 - C31510) * C116 +
              (C31513 - C31512 + C31515 - C31514) * C47279) *
                 C31197 +
             ((C31516 - C31517 + C31518 - C31519) * C116 +
              (C31520 - C31521 + C31522 - C31523) * C47279) *
                 C47391) *
                C47181 +
            (((C31517 - C31516 + C31519 - C31518) * C116 +
              (C31521 - C31520 + C31523 - C31522) * C47279) *
                 C31197 +
             ((C33544 - C33545 + C33546 - C33547) * C116 +
              (C33548 - C33549 + C33550 - C33551) * C47279) *
                 C47391) *
                C3602) *
               C47339 +
           ((((C15941 - C15940 + C15943 - C15942) * C116 +
              (C15945 - C15944 + C15947 - C15946) * C47279) *
                 C31197 +
             ((C16588 - C16589 + C16590 - C16591) * C116 +
              (C16592 - C16593 + C16594 - C16595) * C47279) *
                 C47391) *
                C47174 +
            (((C16589 - C16588 + C16591 - C16590) * C116 +
              (C16593 - C16592 + C16595 - C16594) * C47279) *
                 C31197 +
             ((C18064 - C18065 + C18066 - C18067) * C116 +
              (C18068 - C18069 + C18070 - C18071) * C47279) *
                 C47391) *
                C47181 +
            (((C18065 - C18064 + C18067 - C18066) * C116 +
              (C18069 - C18068 + C18071 - C18070) * C47279) *
                 C31197 +
             ((C15769 * C2226 - C15773 * C2223 + C47358 * C2227 -
               C15774 * C2224) *
                  C116 +
              (C15769 * C2232 - C15773 * C2229 + C47358 * C2233 -
               C15774 * C2230) *
                  C47279) *
                 C47391) *
                C3602) *
               C47136) *
              C47056)) /
        (p * q * std::sqrt(p + q));
    d2ee[167] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C15769 * C124 - C15773 * C117 + C47358 * C125 - C15774 * C118) *
                  C116 +
              (C15769 * C138 - C15773 * C127 + C47358 * C139 - C15774 * C128) *
                  C47279) *
                 C31197 +
             ((C31492 - C31493 + C31494 - C31495) * C116 +
              (C31496 - C31497 + C31498 - C31499) * C47279) *
                 C47391) *
                C3094 +
            (((C31493 - C31492 + C31495 - C31494) * C116 +
              (C31497 - C31496 + C31499 - C31498) * C47279) *
                 C31197 +
             ((C31500 - C31501 + C31502 - C31503) * C116 +
              (C31504 - C31505 + C31506 - C31507) * C47279) *
                 C47391) *
                C47178) *
               C47410 +
           ((((C15925 - C15924 + C15927 - C15926) * C116 +
              (C15929 - C15928 + C15931 - C15930) * C47279) *
                 C31197 +
             ((C16580 - C16581 + C16582 - C16583) * C116 +
              (C16584 - C16585 + C16586 - C16587) * C47279) *
                 C47391) *
                C3094 +
            (((C16581 - C16580 + C16583 - C16582) * C116 +
              (C16585 - C16584 + C16587 - C16586) * C47279) *
                 C31197 +
             ((C16994 - C16995 + C16996 - C16997) * C116 +
              (C16998 - C16999 + C17000 - C17001) * C47279) *
                 C47391) *
                C47178) *
               C47398 +
           ((((C15933 - C15932 + C15935 - C15934) * C116 +
              (C15937 - C15936 + C15939 - C15938) * C47279) *
                 C31197 +
             ((C17002 - C17003 + C17004 - C17005) * C116 +
              (C17006 - C17007 + C17008 - C17009) * C47279) *
                 C47391) *
                C3094 +
            (((C17003 - C17002 + C17005 - C17004) * C116 +
              (C17007 - C17006 + C17009 - C17008) * C47279) *
                 C31197 +
             ((C17010 - C17011 + C17012 - C17013) * C116 +
              (C17014 - C17015 + C17016 - C17017) * C47279) *
                 C47391) *
                C47178) *
               C47371) *
              C2440 +
          (((((C15773 * C118 - C15769 * C125 + C15774 * C119 - C47358 * C126) *
                  C116 +
              (C15773 * C128 - C15769 * C139 + C15774 * C129 - C47358 * C140) *
                  C47279) *
                 C31197 +
             ((C31508 - C31509 + C31510 - C31511) * C116 +
              (C31512 - C31513 + C31514 - C31515) * C47279) *
                 C47391) *
                C3094 +
            (((C31509 - C31508 + C31511 - C31510) * C116 +
              (C31513 - C31512 + C31515 - C31514) * C47279) *
                 C31197 +
             ((C31516 - C31517 + C31518 - C31519) * C116 +
              (C31520 - C31521 + C31522 - C31523) * C47279) *
                 C47391) *
                C47178) *
               C47410 +
           ((((C15941 - C15940 + C15943 - C15942) * C116 +
              (C15945 - C15944 + C15947 - C15946) * C47279) *
                 C31197 +
             ((C16588 - C16589 + C16590 - C16591) * C116 +
              (C16592 - C16593 + C16594 - C16595) * C47279) *
                 C47391) *
                C3094 +
            (((C16589 - C16588 + C16591 - C16590) * C116 +
              (C16593 - C16592 + C16595 - C16594) * C47279) *
                 C31197 +
             ((C18064 - C18065 + C18066 - C18067) * C116 +
              (C18068 - C18069 + C18070 - C18071) * C47279) *
                 C47391) *
                C47178) *
               C47398 +
           ((((C15949 - C15948 + C15951 - C15950) * C116 +
              (C15953 - C15952 + C15955 - C15954) * C47279) *
                 C31197 +
             ((C17350 - C17351 + C17352 - C17353) * C116 +
              (C17354 - C17355 + C17356 - C17357) * C47279) *
                 C47391) *
                C3094 +
            (((C17351 - C17350 + C17353 - C17352) * C116 +
              (C17355 - C17354 + C17357 - C17356) * C47279) *
                 C31197 +
             ((C15769 * C1172 - C15773 * C1157 + C47358 * C1173 -
               C15774 * C1158) *
                  C116 +
              (C15769 * C1184 - C15773 * C1175 + C47358 * C1185 -
               C15774 * C1176) *
                  C47279) *
                 C47391) *
                C47178) *
               C47371) *
              C47056)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C15769 * C124 - C15773 * C117 + C47358 * C125 - C15774 * C118) *
                 C116 +
             (C15769 * C138 - C15773 * C127 + C47358 * C139 - C15774 * C128) *
                 C47279) *
                C31197 +
            ((C31492 - C31493 + C31494 - C31495) * C116 +
             (C31496 - C31497 + C31498 - C31499) * C47279) *
                C47391) *
               C3094 +
           (((C31493 - C31492 + C31495 - C31494) * C116 +
             (C31497 - C31496 + C31499 - C31498) * C47279) *
                C31197 +
            ((C31500 - C31501 + C31502 - C31503) * C116 +
             (C31504 - C31505 + C31506 - C31507) * C47279) *
                C47391) *
               C47178) *
              C47073 * C47416 +
          ((((C15773 * C118 - C15769 * C125 + C15774 * C119 - C47358 * C126) *
                 C116 +
             (C15773 * C128 - C15769 * C139 + C15774 * C129 - C47358 * C140) *
                 C47279) *
                C31197 +
            ((C31508 - C31509 + C31510 - C31511) * C116 +
             (C31512 - C31513 + C31514 - C31515) * C47279) *
                C47391) *
               C3094 +
           (((C31509 - C31508 + C31511 - C31510) * C116 +
             (C31513 - C31512 + C31515 - C31514) * C47279) *
                C31197 +
            ((C31516 - C31517 + C31518 - C31519) * C116 +
             (C31520 - C31521 + C31522 - C31523) * C47279) *
                C47391) *
               C47178) *
              C47073 * C47409 +
          ((((C15769 * C126 - C15773 * C119 + C47358 * C130 - C15774 * C120) *
                 C116 +
             (C15769 * C140 - C15773 * C129 + C47358 * C141 - C15774 * C131) *
                 C47279) *
                C31197 +
            ((C31524 - C31525 + C31526 - C31527) * C116 +
             (C31528 - C31529 + C31530 - C31531) * C47279) *
                C47391) *
               C3094 +
           (((C31525 - C31524 + C31527 - C31526) * C116 +
             (C31529 - C31528 + C31531 - C31530) * C47279) *
                C31197 +
            ((C31532 - C31533 + C31534 - C31535) * C116 +
             (C31536 - C31537 + C31538 - C31539) * C47279) *
                C47391) *
               C47178) *
              C47073 * C47396 +
          ((((C15773 * C120 - C15769 * C130 + C15774 * C121 - C47358 * C132) *
                 C116 +
             (C15773 * C131 - C15769 * C141 + C15774 * C133 - C47358 * C142) *
                 C47279) *
                C31197 +
            ((C31800 - C31801 + C31802 - C31803) * C116 +
             (C31804 - C31805 + C31806 - C31807) * C47279) *
                C47391) *
               C3094 +
           (((C31801 - C31800 + C31803 - C31802) * C116 +
             (C31805 - C31804 + C31807 - C31806) * C47279) *
                C31197 +
            ((C15769 * C438 - C15773 * C421 + C47358 * C442 - C15774 * C423) *
                 C116 +
             (C15769 * C451 - C15773 * C439 + C47358 * C453 - C15774 * C443) *
                 C47279) *
                C47391) *
               C47178) *
              C47073 * C47375)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C15769 * C124 - C15773 * C117 + C47358 * C125 - C15774 * C118) *
                 C116 +
             (C15769 * C138 - C15773 * C127 + C47358 * C139 - C15774 * C128) *
                 C47279) *
                C31197 +
            ((C31492 - C31493 + C31494 - C31495) * C116 +
             (C31496 - C31497 + C31498 - C31499) * C47279) *
                C47391) *
               C47418 +
           (((C31493 - C31492 + C31495 - C31494) * C116 +
             (C31497 - C31496 + C31499 - C31498) * C47279) *
                C31197 +
            ((C31500 - C31501 + C31502 - C31503) * C116 +
             (C31504 - C31505 + C31506 - C31507) * C47279) *
                C47391) *
               C47415 +
           (((C31501 - C31500 + C31503 - C31502) * C116 +
             (C31505 - C31504 + C31507 - C31506) * C47279) *
                C31197 +
            ((C33204 - C33205 + C33206 - C33207) * C116 +
             (C33208 - C33209 + C33210 - C33211) * C47279) *
                C47391) *
               C47406 +
           (((C33205 - C33204 + C33207 - C33206) * C116 +
             (C33209 - C33208 + C33211 - C33210) * C47279) *
                C31197 +
            ((C33212 - C33213 + C33214 - C33215) * C116 +
             (C33216 - C33217 + C33218 - C33219) * C47279) *
                C47391) *
               C47387) *
              C47073 * C2440 +
          ((((C15773 * C118 - C15769 * C125 + C15774 * C119 - C47358 * C126) *
                 C116 +
             (C15773 * C128 - C15769 * C139 + C15774 * C129 - C47358 * C140) *
                 C47279) *
                C31197 +
            ((C31508 - C31509 + C31510 - C31511) * C116 +
             (C31512 - C31513 + C31514 - C31515) * C47279) *
                C47391) *
               C47418 +
           (((C31509 - C31508 + C31511 - C31510) * C116 +
             (C31513 - C31512 + C31515 - C31514) * C47279) *
                C31197 +
            ((C31516 - C31517 + C31518 - C31519) * C116 +
             (C31520 - C31521 + C31522 - C31523) * C47279) *
                C47391) *
               C47415 +
           (((C31517 - C31516 + C31519 - C31518) * C116 +
             (C31521 - C31520 + C31523 - C31522) * C47279) *
                C31197 +
            ((C33544 - C33545 + C33546 - C33547) * C116 +
             (C33548 - C33549 + C33550 - C33551) * C47279) *
                C47391) *
               C47406 +
           (((C33545 - C33544 + C33547 - C33546) * C116 +
             (C33549 - C33548 + C33551 - C33550) * C47279) *
                C31197 +
            ((C15769 * C1857 - C15773 * C1848 + C47358 * C1858 -
              C15774 * C1849) *
                 C116 +
             (C15769 * C1866 - C15773 * C1860 + C47358 * C1867 -
              C15774 * C1861) *
                 C47279) *
                C47391) *
               C47387) *
              C47073 * C47056)) /
            (p * q * std::sqrt(p + q));
    d2ee[168] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C15769 * C124 - C15773 * C117 + C47358 * C125 - C15774 * C118) *
                 C116 +
             (C15769 * C138 - C15773 * C127 + C47358 * C139 - C15774 * C128) *
                 C47279) *
                C31197 +
            ((C31492 - C31493 + C31494 - C31495) * C116 +
             (C31496 - C31497 + C31498 - C31499) * C47279) *
                C47391) *
               C47174 +
           (((C31493 - C31492 + C31495 - C31494) * C116 +
             (C31497 - C31496 + C31499 - C31498) * C47279) *
                C31197 +
            ((C31500 - C31501 + C31502 - C31503) * C116 +
             (C31504 - C31505 + C31506 - C31507) * C47279) *
                C47391) *
               C47181 +
           (((C31501 - C31500 + C31503 - C31502) * C116 +
             (C31505 - C31504 + C31507 - C31506) * C47279) *
                C31197 +
            ((C33204 - C33205 + C33206 - C33207) * C116 +
             (C33208 - C33209 + C33210 - C33211) * C47279) *
                C47391) *
               C3602) *
              C47073 * C47050 +
          ((((C15773 * C118 - C15769 * C125 + C15774 * C119 - C47358 * C126) *
                 C116 +
             (C15773 * C128 - C15769 * C139 + C15774 * C129 - C47358 * C140) *
                 C47279) *
                C31197 +
            ((C31508 - C31509 + C31510 - C31511) * C116 +
             (C31512 - C31513 + C31514 - C31515) * C47279) *
                C47391) *
               C47174 +
           (((C31509 - C31508 + C31511 - C31510) * C116 +
             (C31513 - C31512 + C31515 - C31514) * C47279) *
                C31197 +
            ((C31516 - C31517 + C31518 - C31519) * C116 +
             (C31520 - C31521 + C31522 - C31523) * C47279) *
                C47391) *
               C47181 +
           (((C31517 - C31516 + C31519 - C31518) * C116 +
             (C31521 - C31520 + C31523 - C31522) * C47279) *
                C31197 +
            ((C33544 - C33545 + C33546 - C33547) * C116 +
             (C33548 - C33549 + C33550 - C33551) * C47279) *
                C47391) *
               C3602) *
              C47073 * C47059 +
          ((((C15769 * C126 - C15773 * C119 + C47358 * C130 - C15774 * C120) *
                 C116 +
             (C15769 * C140 - C15773 * C129 + C47358 * C141 - C15774 * C131) *
                 C47279) *
                C31197 +
            ((C31524 - C31525 + C31526 - C31527) * C116 +
             (C31528 - C31529 + C31530 - C31531) * C47279) *
                C47391) *
               C47174 +
           (((C31525 - C31524 + C31527 - C31526) * C116 +
             (C31529 - C31528 + C31531 - C31530) * C47279) *
                C31197 +
            ((C31532 - C31533 + C31534 - C31535) * C116 +
             (C31536 - C31537 + C31538 - C31539) * C47279) *
                C47391) *
               C47181 +
           (((C31533 - C31532 + C31535 - C31534) * C116 +
             (C31537 - C31536 + C31539 - C31538) * C47279) *
                C31197 +
            ((C15769 * C1852 - C15773 * C1846 + C47358 * C2121 -
              C15774 * C2120) *
                 C116 +
             (C15769 * C1864 - C15773 * C1855 + C47358 * C2123 -
              C15774 * C2122) *
                 C47279) *
                C47391) *
               C3602) *
              C47073 * C2703)) /
        (p * q * std::sqrt(p + q));
    d2ee[169] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C15769 * C124 - C15773 * C117 + C47358 * C125 - C15774 * C118) *
                 C116 +
             (C15769 * C138 - C15773 * C127 + C47358 * C139 - C15774 * C128) *
                 C47279) *
                C31197 +
            ((C31492 - C31493 + C31494 - C31495) * C116 +
             (C31496 - C31497 + C31498 - C31499) * C47279) *
                C47391) *
               C3094 +
           (((C31493 - C31492 + C31495 - C31494) * C116 +
             (C31497 - C31496 + C31499 - C31498) * C47279) *
                C31197 +
            ((C31500 - C31501 + C31502 - C31503) * C116 +
             (C31504 - C31505 + C31506 - C31507) * C47279) *
                C47391) *
               C47178) *
              C47073 * C47416 +
          ((((C15773 * C118 - C15769 * C125 + C15774 * C119 - C47358 * C126) *
                 C116 +
             (C15773 * C128 - C15769 * C139 + C15774 * C129 - C47358 * C140) *
                 C47279) *
                C31197 +
            ((C31508 - C31509 + C31510 - C31511) * C116 +
             (C31512 - C31513 + C31514 - C31515) * C47279) *
                C47391) *
               C3094 +
           (((C31509 - C31508 + C31511 - C31510) * C116 +
             (C31513 - C31512 + C31515 - C31514) * C47279) *
                C31197 +
            ((C31516 - C31517 + C31518 - C31519) * C116 +
             (C31520 - C31521 + C31522 - C31523) * C47279) *
                C47391) *
               C47178) *
              C47073 * C47409 +
          ((((C15769 * C126 - C15773 * C119 + C47358 * C130 - C15774 * C120) *
                 C116 +
             (C15769 * C140 - C15773 * C129 + C47358 * C141 - C15774 * C131) *
                 C47279) *
                C31197 +
            ((C31524 - C31525 + C31526 - C31527) * C116 +
             (C31528 - C31529 + C31530 - C31531) * C47279) *
                C47391) *
               C3094 +
           (((C31525 - C31524 + C31527 - C31526) * C116 +
             (C31529 - C31528 + C31531 - C31530) * C47279) *
                C31197 +
            ((C31532 - C31533 + C31534 - C31535) * C116 +
             (C31536 - C31537 + C31538 - C31539) * C47279) *
                C47391) *
               C47178) *
              C47073 * C47396 +
          ((((C15773 * C120 - C15769 * C130 + C15774 * C121 - C47358 * C132) *
                 C116 +
             (C15773 * C131 - C15769 * C141 + C15774 * C133 - C47358 * C142) *
                 C47279) *
                C31197 +
            ((C31800 - C31801 + C31802 - C31803) * C116 +
             (C31804 - C31805 + C31806 - C31807) * C47279) *
                C47391) *
               C3094 +
           (((C31801 - C31800 + C31803 - C31802) * C116 +
             (C31805 - C31804 + C31807 - C31806) * C47279) *
                C31197 +
            ((C15769 * C438 - C15773 * C421 + C47358 * C442 - C15774 * C423) *
                 C116 +
             (C15769 * C451 - C15773 * C439 + C47358 * C453 - C15774 * C443) *
                 C47279) *
                C47391) *
               C47178) *
              C47073 * C47375)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C15769 * C124 - C15773 * C117 + C47358 * C125 - C15774 * C118) *
                  C116 +
              (C15769 * C138 - C15773 * C127 + C47358 * C139 - C15774 * C128) *
                  C47279) *
                 C31197 +
             ((C31492 - C31493 + C31494 - C31495) * C116 +
              (C31496 - C31497 + C31498 - C31499) * C47279) *
                 C47391) *
                C3094 +
            (((C31493 - C31492 + C31495 - C31494) * C116 +
              (C31497 - C31496 + C31499 - C31498) * C47279) *
                 C31197 +
             ((C31500 - C31501 + C31502 - C31503) * C116 +
              (C31504 - C31505 + C31506 - C31507) * C47279) *
                 C47391) *
                C47178) *
               C47410 +
           ((((C15925 - C15924 + C15927 - C15926) * C116 +
              (C15929 - C15928 + C15931 - C15930) * C47279) *
                 C31197 +
             ((C16580 - C16581 + C16582 - C16583) * C116 +
              (C16584 - C16585 + C16586 - C16587) * C47279) *
                 C47391) *
                C3094 +
            (((C16581 - C16580 + C16583 - C16582) * C116 +
              (C16585 - C16584 + C16587 - C16586) * C47279) *
                 C31197 +
             ((C16994 - C16995 + C16996 - C16997) * C116 +
              (C16998 - C16999 + C17000 - C17001) * C47279) *
                 C47391) *
                C47178) *
               C47398 +
           ((((C15933 - C15932 + C15935 - C15934) * C116 +
              (C15937 - C15936 + C15939 - C15938) * C47279) *
                 C31197 +
             ((C17002 - C17003 + C17004 - C17005) * C116 +
              (C17006 - C17007 + C17008 - C17009) * C47279) *
                 C47391) *
                C3094 +
            (((C17003 - C17002 + C17005 - C17004) * C116 +
              (C17007 - C17006 + C17009 - C17008) * C47279) *
                 C31197 +
             ((C17010 - C17011 + C17012 - C17013) * C116 +
              (C17014 - C17015 + C17016 - C17017) * C47279) *
                 C47391) *
                C47178) *
               C47371) *
              C2440 +
          (((((C15773 * C118 - C15769 * C125 + C15774 * C119 - C47358 * C126) *
                  C116 +
              (C15773 * C128 - C15769 * C139 + C15774 * C129 - C47358 * C140) *
                  C47279) *
                 C31197 +
             ((C31508 - C31509 + C31510 - C31511) * C116 +
              (C31512 - C31513 + C31514 - C31515) * C47279) *
                 C47391) *
                C3094 +
            (((C31509 - C31508 + C31511 - C31510) * C116 +
              (C31513 - C31512 + C31515 - C31514) * C47279) *
                 C31197 +
             ((C31516 - C31517 + C31518 - C31519) * C116 +
              (C31520 - C31521 + C31522 - C31523) * C47279) *
                 C47391) *
                C47178) *
               C47410 +
           ((((C15941 - C15940 + C15943 - C15942) * C116 +
              (C15945 - C15944 + C15947 - C15946) * C47279) *
                 C31197 +
             ((C16588 - C16589 + C16590 - C16591) * C116 +
              (C16592 - C16593 + C16594 - C16595) * C47279) *
                 C47391) *
                C3094 +
            (((C16589 - C16588 + C16591 - C16590) * C116 +
              (C16593 - C16592 + C16595 - C16594) * C47279) *
                 C31197 +
             ((C18064 - C18065 + C18066 - C18067) * C116 +
              (C18068 - C18069 + C18070 - C18071) * C47279) *
                 C47391) *
                C47178) *
               C47398 +
           ((((C15949 - C15948 + C15951 - C15950) * C116 +
              (C15953 - C15952 + C15955 - C15954) * C47279) *
                 C31197 +
             ((C17350 - C17351 + C17352 - C17353) * C116 +
              (C17354 - C17355 + C17356 - C17357) * C47279) *
                 C47391) *
                C3094 +
            (((C17351 - C17350 + C17353 - C17352) * C116 +
              (C17355 - C17354 + C17357 - C17356) * C47279) *
                 C31197 +
             ((C15769 * C1172 - C15773 * C1157 + C47358 * C1173 -
               C15774 * C1158) *
                  C116 +
              (C15769 * C1184 - C15773 * C1175 + C47358 * C1185 -
               C15774 * C1176) *
                  C47279) *
                 C47391) *
                C47178) *
               C47371) *
              C47056)) /
            (p * q * std::sqrt(p + q));
    d2ee[170] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C15769 * C124 - C15773 * C117 + C47358 * C125 - C15774 * C118) *
                 C116 +
             (C15769 * C138 - C15773 * C127 + C47358 * C139 - C15774 * C128) *
                 C47279) *
                C31197 +
            ((C31492 - C31493 + C31494 - C31495) * C116 +
             (C31496 - C31497 + C31498 - C31499) * C47279) *
                C47391) *
               C47091 * C47339 +
           (((C15925 - C15924 + C15927 - C15926) * C116 +
             (C15929 - C15928 + C15931 - C15930) * C47279) *
                C31197 +
            ((C16580 - C16581 + C16582 - C16583) * C116 +
             (C16584 - C16585 + C16586 - C16587) * C47279) *
                C47391) *
               C47091 * C47136) *
              C554 +
          ((((C15773 * C118 - C15769 * C125 + C15774 * C119 - C47358 * C126) *
                 C116 +
             (C15773 * C128 - C15769 * C139 + C15774 * C129 - C47358 * C140) *
                 C47279) *
                C31197 +
            ((C31508 - C31509 + C31510 - C31511) * C116 +
             (C31512 - C31513 + C31514 - C31515) * C47279) *
                C47391) *
               C47091 * C47339 +
           (((C15941 - C15940 + C15943 - C15942) * C116 +
             (C15945 - C15944 + C15947 - C15946) * C47279) *
                C31197 +
            ((C16588 - C16589 + C16590 - C16591) * C116 +
             (C16592 - C16593 + C16594 - C16595) * C47279) *
                C47391) *
               C47091 * C47136) *
              C555 +
          ((((C15769 * C126 - C15773 * C119 + C47358 * C130 - C15774 * C120) *
                 C116 +
             (C15769 * C140 - C15773 * C129 + C47358 * C141 - C15774 * C131) *
                 C47279) *
                C31197 +
            ((C31524 - C31525 + C31526 - C31527) * C116 +
             (C31528 - C31529 + C31530 - C31531) * C47279) *
                C47391) *
               C47091 * C47339 +
           (((C15957 - C15956 + C15959 - C15958) * C116 +
             (C15961 - C15960 + C15963 - C15962) * C47279) *
                C31197 +
            ((C16596 - C16597 + C16598 - C16599) * C116 +
             (C16600 - C16601 + C16602 - C16603) * C47279) *
                C47391) *
               C47091 * C47136) *
              C556 +
          ((((C15773 * C120 - C15769 * C130 + C15774 * C121 - C47358 * C132) *
                 C116 +
             (C15773 * C131 - C15769 * C141 + C15774 * C133 - C47358 * C142) *
                 C47279) *
                C31197 +
            ((C15773 * C420 - C15769 * C436 + C15774 * C422 - C47358 * C440) *
                 C116 +
             (C15773 * C437 - C15769 * C450 + C15774 * C441 - C47358 * C452) *
                 C47279) *
                C47391) *
               C47091 * C47339 +
           (((C16249 - C16248 + C16251 - C16250) * C116 +
             (C16253 - C16252 + C16255 - C16254) * C47279) *
                C31197 +
            ((C15769 * C823 - C15773 * C815 + C47358 * C825 - C15774 * C816) *
                 C116 +
             (C15769 * C830 - C15773 * C824 + C47358 * C831 - C15774 * C826) *
                 C47279) *
                C47391) *
               C47091 * C47136) *
              C47375)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C15769 * C124 - C15773 * C117 + C47358 * C125 - C15774 * C118) *
                 C116 +
             (C15769 * C138 - C15773 * C127 + C47358 * C139 - C15774 * C128) *
                 C47279) *
                C31197 +
            ((C31492 - C31493 + C31494 - C31495) * C116 +
             (C31496 - C31497 + C31498 - C31499) * C47279) *
                C47391) *
               C47091 * C1284 +
           (((C15925 - C15924 + C15927 - C15926) * C116 +
             (C15929 - C15928 + C15931 - C15930) * C47279) *
                C31197 +
            ((C16580 - C16581 + C16582 - C16583) * C116 +
             (C16584 - C16585 + C16586 - C16587) * C47279) *
                C47391) *
               C47091 * C1285 +
           (((C15933 - C15932 + C15935 - C15934) * C116 +
             (C15937 - C15936 + C15939 - C15938) * C47279) *
                C31197 +
            ((C17002 - C17003 + C17004 - C17005) * C116 +
             (C17006 - C17007 + C17008 - C17009) * C47279) *
                C47391) *
               C47091 * C1286 +
           (((C16833 - C16832 + C16835 - C16834) * C116 +
             (C16837 - C16836 + C16839 - C16838) * C47279) *
                C31197 +
            ((C17488 - C17489 + C17490 - C17491) * C116 +
             (C17492 - C17493 + C17494 - C17495) * C47279) *
                C47391) *
               C47091 * C47381) *
              C47325 +
          ((((C15773 * C118 - C15769 * C125 + C15774 * C119 - C47358 * C126) *
                 C116 +
             (C15773 * C128 - C15769 * C139 + C15774 * C129 - C47358 * C140) *
                 C47279) *
                C31197 +
            ((C31508 - C31509 + C31510 - C31511) * C116 +
             (C31512 - C31513 + C31514 - C31515) * C47279) *
                C47391) *
               C47091 * C1284 +
           (((C15941 - C15940 + C15943 - C15942) * C116 +
             (C15945 - C15944 + C15947 - C15946) * C47279) *
                C31197 +
            ((C16588 - C16589 + C16590 - C16591) * C116 +
             (C16592 - C16593 + C16594 - C16595) * C47279) *
                C47391) *
               C47091 * C1285 +
           (((C15949 - C15948 + C15951 - C15950) * C116 +
             (C15953 - C15952 + C15955 - C15954) * C47279) *
                C31197 +
            ((C17350 - C17351 + C17352 - C17353) * C116 +
             (C17354 - C17355 + C17356 - C17357) * C47279) *
                C47391) *
               C47091 * C1286 +
           (((C17149 - C17148 + C17151 - C17150) * C116 +
             (C17153 - C17152 + C17155 - C17154) * C47279) *
                C31197 +
            ((C15769 * C1546 - C15773 * C1543 + C47358 * C1547 -
              C15774 * C1544) *
                 C116 +
             (C15769 * C1552 - C15773 * C1549 + C47358 * C1553 -
              C15774 * C1550) *
                 C47279) *
                C47391) *
               C47091 * C47381) *
              C47056)) /
            (p * q * std::sqrt(p + q));
    d2ee[171] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C15769 * C124 - C15773 * C117 + C47358 * C125 - C15774 * C118) *
                  C116 +
              (C15769 * C138 - C15773 * C127 + C47358 * C139 - C15774 * C128) *
                  C47279) *
                 C31197 +
             ((C31492 - C31493 + C31494 - C31495) * C116 +
              (C31496 - C31497 + C31498 - C31499) * C47279) *
                 C47391) *
                C47340 +
            (((C31493 - C31492 + C31495 - C31494) * C116 +
              (C31497 - C31496 + C31499 - C31498) * C47279) *
                 C31197 +
             ((C31500 - C31501 + C31502 - C31503) * C116 +
              (C31504 - C31505 + C31506 - C31507) * C47279) *
                 C47391) *
                C47178) *
               C47339 +
           ((((C15925 - C15924 + C15927 - C15926) * C116 +
              (C15929 - C15928 + C15931 - C15930) * C47279) *
                 C31197 +
             ((C16580 - C16581 + C16582 - C16583) * C116 +
              (C16584 - C16585 + C16586 - C16587) * C47279) *
                 C47391) *
                C47340 +
            (((C16581 - C16580 + C16583 - C16582) * C116 +
              (C16585 - C16584 + C16587 - C16586) * C47279) *
                 C31197 +
             ((C16994 - C16995 + C16996 - C16997) * C116 +
              (C16998 - C16999 + C17000 - C17001) * C47279) *
                 C47391) *
                C47178) *
               C47136) *
              C258 +
          (((((C15773 * C118 - C15769 * C125 + C15774 * C119 - C47358 * C126) *
                  C116 +
              (C15773 * C128 - C15769 * C139 + C15774 * C129 - C47358 * C140) *
                  C47279) *
                 C31197 +
             ((C31508 - C31509 + C31510 - C31511) * C116 +
              (C31512 - C31513 + C31514 - C31515) * C47279) *
                 C47391) *
                C47340 +
            (((C31509 - C31508 + C31511 - C31510) * C116 +
              (C31513 - C31512 + C31515 - C31514) * C47279) *
                 C31197 +
             ((C31516 - C31517 + C31518 - C31519) * C116 +
              (C31520 - C31521 + C31522 - C31523) * C47279) *
                 C47391) *
                C47178) *
               C47339 +
           ((((C15941 - C15940 + C15943 - C15942) * C116 +
              (C15945 - C15944 + C15947 - C15946) * C47279) *
                 C31197 +
             ((C16588 - C16589 + C16590 - C16591) * C116 +
              (C16592 - C16593 + C16594 - C16595) * C47279) *
                 C47391) *
                C47340 +
            (((C16589 - C16588 + C16591 - C16590) * C116 +
              (C16593 - C16592 + C16595 - C16594) * C47279) *
                 C31197 +
             ((C18064 - C18065 + C18066 - C18067) * C116 +
              (C18068 - C18069 + C18070 - C18071) * C47279) *
                 C47391) *
                C47178) *
               C47136) *
              C259 +
          (((((C15769 * C126 - C15773 * C119 + C47358 * C130 - C15774 * C120) *
                  C116 +
              (C15769 * C140 - C15773 * C129 + C47358 * C141 - C15774 * C131) *
                  C47279) *
                 C31197 +
             ((C31524 - C31525 + C31526 - C31527) * C116 +
              (C31528 - C31529 + C31530 - C31531) * C47279) *
                 C47391) *
                C47340 +
            (((C31525 - C31524 + C31527 - C31526) * C116 +
              (C31529 - C31528 + C31531 - C31530) * C47279) *
                 C31197 +
             ((C31532 - C31533 + C31534 - C31535) * C116 +
              (C31536 - C31537 + C31538 - C31539) * C47279) *
                 C47391) *
                C47178) *
               C47339 +
           ((((C15957 - C15956 + C15959 - C15958) * C116 +
              (C15961 - C15960 + C15963 - C15962) * C47279) *
                 C31197 +
             ((C16596 - C16597 + C16598 - C16599) * C116 +
              (C16600 - C16601 + C16602 - C16603) * C47279) *
                 C47391) *
                C47340 +
            (((C16597 - C16596 + C16599 - C16598) * C116 +
              (C16601 - C16600 + C16603 - C16602) * C47279) *
                 C31197 +
             ((C15769 * C1161 - C15773 * C1152 + C47358 * C2015 -
               C15774 * C2014) *
                  C116 +
              (C15769 * C1179 - C15773 * C1164 + C47358 * C2017 -
               C15774 * C2016) *
                  C47279) *
                 C47391) *
                C47178) *
               C47136) *
              C47365)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C15769 * C124 - C15773 * C117 + C47358 * C125 - C15774 * C118) *
                 C116 +
             (C15769 * C138 - C15773 * C127 + C47358 * C139 - C15774 * C128) *
                 C47279) *
                C31197 +
            ((C31492 - C31493 + C31494 - C31495) * C116 +
             (C31496 - C31497 + C31498 - C31499) * C47279) *
                C47391) *
               C47340 +
           (((C31493 - C31492 + C31495 - C31494) * C116 +
             (C31497 - C31496 + C31499 - C31498) * C47279) *
                C31197 +
            ((C31500 - C31501 + C31502 - C31503) * C116 +
             (C31504 - C31505 + C31506 - C31507) * C47279) *
                C47391) *
               C47178) *
              C1284 +
          ((((C15925 - C15924 + C15927 - C15926) * C116 +
             (C15929 - C15928 + C15931 - C15930) * C47279) *
                C31197 +
            ((C16580 - C16581 + C16582 - C16583) * C116 +
             (C16584 - C16585 + C16586 - C16587) * C47279) *
                C47391) *
               C47340 +
           (((C16581 - C16580 + C16583 - C16582) * C116 +
             (C16585 - C16584 + C16587 - C16586) * C47279) *
                C31197 +
            ((C16994 - C16995 + C16996 - C16997) * C116 +
             (C16998 - C16999 + C17000 - C17001) * C47279) *
                C47391) *
               C47178) *
              C1285 +
          ((((C15933 - C15932 + C15935 - C15934) * C116 +
             (C15937 - C15936 + C15939 - C15938) * C47279) *
                C31197 +
            ((C17002 - C17003 + C17004 - C17005) * C116 +
             (C17006 - C17007 + C17008 - C17009) * C47279) *
                C47391) *
               C47340 +
           (((C17003 - C17002 + C17005 - C17004) * C116 +
             (C17007 - C17006 + C17009 - C17008) * C47279) *
                C31197 +
            ((C17010 - C17011 + C17012 - C17013) * C116 +
             (C17014 - C17015 + C17016 - C17017) * C47279) *
                C47391) *
               C47178) *
              C1286 +
          ((((C16833 - C16832 + C16835 - C16834) * C116 +
             (C16837 - C16836 + C16839 - C16838) * C47279) *
                C31197 +
            ((C17488 - C17489 + C17490 - C17491) * C116 +
             (C17492 - C17493 + C17494 - C17495) * C47279) *
                C47391) *
               C47340 +
           (((C17489 - C17488 + C17491 - C17490) * C116 +
             (C17493 - C17492 + C17495 - C17494) * C47279) *
                C31197 +
            ((C15769 * C5809 - C15773 * C5807 + C47358 * C5810 -
              C15774 * C5808) *
                 C116 +
             (C15769 * C5813 - C15773 * C5811 + C47358 * C5814 -
              C15774 * C5812) *
                 C47279) *
                C47391) *
               C47178) *
              C47381) *
         C47045) /
            (p * q * std::sqrt(p + q));
    d2ee[172] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C15769 * C124 - C15773 * C117 + C47358 * C125 - C15774 * C118) *
                 C116 +
             (C15769 * C138 - C15773 * C127 + C47358 * C139 - C15774 * C128) *
                 C47279) *
                C31197 +
            ((C15769 * C424 - C15773 * C414 + C47358 * C425 - C15774 * C415) *
                 C116 +
             (C15769 * C444 - C15773 * C427 + C47358 * C445 - C15774 * C428) *
                 C47279) *
                C47391) *
               C47091 * C47410 +
           (((C15925 - C15924 + C15927 - C15926) * C116 +
             (C15929 - C15928 + C15931 - C15930) * C47279) *
                C31197 +
            ((C16580 - C16581 + C16582 - C16583) * C116 +
             (C16584 - C16585 + C16586 - C16587) * C47279) *
                C47391) *
               C47091 * C47398 +
           (((C15933 - C15932 + C15935 - C15934) * C116 +
             (C15937 - C15936 + C15939 - C15938) * C47279) *
                C31197 +
            ((C17002 - C17003 + C17004 - C17005) * C116 +
             (C17006 - C17007 + C17008 - C17009) * C47279) *
                C47391) *
               C47091 * C47371) *
              C258 +
          ((((C15773 * C118 - C15769 * C125 + C15774 * C119 - C47358 * C126) *
                 C116 +
             (C15773 * C128 - C15769 * C139 + C15774 * C129 - C47358 * C140) *
                 C47279) *
                C31197 +
            ((C15773 * C415 - C15769 * C425 + C15774 * C416 - C47358 * C426) *
                 C116 +
             (C15773 * C428 - C15769 * C445 + C15774 * C429 - C47358 * C446) *
                 C47279) *
                C47391) *
               C47091 * C47410 +
           (((C15941 - C15940 + C15943 - C15942) * C116 +
             (C15945 - C15944 + C15947 - C15946) * C47279) *
                C31197 +
            ((C16588 - C16589 + C16590 - C16591) * C116 +
             (C16592 - C16593 + C16594 - C16595) * C47279) *
                C47391) *
               C47091 * C47398 +
           (((C15949 - C15948 + C15951 - C15950) * C116 +
             (C15953 - C15952 + C15955 - C15954) * C47279) *
                C31197 +
            ((C17350 - C17351 + C17352 - C17353) * C116 +
             (C17354 - C17355 + C17356 - C17357) * C47279) *
                C47391) *
               C47091 * C47371) *
              C259 +
          ((((C15769 * C126 - C15773 * C119 + C47358 * C130 - C15774 * C120) *
                 C116 +
             (C15769 * C140 - C15773 * C129 + C47358 * C141 - C15774 * C131) *
                 C47279) *
                C31197 +
            ((C15769 * C426 - C15773 * C416 + C47358 * C436 - C15774 * C420) *
                 C116 +
             (C15769 * C446 - C15773 * C429 + C47358 * C450 - C15774 * C437) *
                 C47279) *
                C47391) *
               C47091 * C47410 +
           (((C15957 - C15956 + C15959 - C15958) * C116 +
             (C15961 - C15960 + C15963 - C15962) * C47279) *
                C31197 +
            ((C16596 - C16597 + C16598 - C16599) * C116 +
             (C16600 - C16601 + C16602 - C16603) * C47279) *
                C47391) *
               C47091 * C47398 +
           (((C15965 - C15964 + C15967 - C15966) * C116 +
             (C15969 - C15968 + C15971 - C15970) * C47279) *
                C31197 +
            ((C15769 * C1167 - C15773 * C1155 + C47358 * C1441 -
              C15774 * C1440) *
                 C116 +
             (C15769 * C1182 - C15773 * C1170 + C47358 * C1443 -
              C15774 * C1442) *
                 C47279) *
                C47391) *
               C47091 * C47371) *
              C47365)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C15769 * C124 - C15773 * C117 + C47358 * C125 - C15774 * C118) *
                C116 +
            (C15769 * C138 - C15773 * C127 + C47358 * C139 - C15774 * C128) *
                C47279) *
               C31197 +
           ((C15769 * C424 - C15773 * C414 + C47358 * C425 - C15774 * C415) *
                C116 +
            (C15769 * C444 - C15773 * C427 + C47358 * C445 - C15774 * C428) *
                C47279) *
               C47391) *
              C47091 * C47073 * C108 +
          (((C15773 * C118 - C15769 * C125 + C15774 * C119 - C47358 * C126) *
                C116 +
            (C15773 * C128 - C15769 * C139 + C15774 * C129 - C47358 * C140) *
                C47279) *
               C31197 +
           ((C15773 * C415 - C15769 * C425 + C15774 * C416 - C47358 * C426) *
                C116 +
            (C15773 * C428 - C15769 * C445 + C15774 * C429 - C47358 * C446) *
                C47279) *
               C47391) *
              C47091 * C47073 * C109 +
          (((C15769 * C126 - C15773 * C119 + C47358 * C130 - C15774 * C120) *
                C116 +
            (C15769 * C140 - C15773 * C129 + C47358 * C141 - C15774 * C131) *
                C47279) *
               C31197 +
           ((C15769 * C426 - C15773 * C416 + C47358 * C436 - C15774 * C420) *
                C116 +
            (C15769 * C446 - C15773 * C429 + C47358 * C450 - C15774 * C437) *
                C47279) *
               C47391) *
              C47091 * C47073 * C110 +
          (((C15773 * C120 - C15769 * C130 + C15774 * C121 - C47358 * C132) *
                C116 +
            (C15773 * C131 - C15769 * C141 + C15774 * C133 - C47358 * C142) *
                C47279) *
               C31197 +
           ((C15773 * C420 - C15769 * C436 + C15774 * C422 - C47358 * C440) *
                C116 +
            (C15773 * C437 - C15769 * C450 + C15774 * C441 - C47358 * C452) *
                C47279) *
               C47391) *
              C47091 * C47073 * C111 +
          (((C15769 * C132 - C15773 * C121 + C47358 * C134 - C15774 * C122) *
                C116 +
            (C15769 * C142 - C15773 * C133 + C47358 * C143 - C15774 * C135) *
                C47279) *
               C31197 +
           ((C15769 * C440 - C15773 * C422 + C47358 * C663 - C15774 * C662) *
                C116 +
            (C15769 * C452 - C15773 * C441 + C47358 * C665 - C15774 * C664) *
                C47279) *
               C47391) *
              C47091 * C47073 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C15769 * C124 - C15773 * C117 + C47358 * C125 - C15774 * C118) *
                 C116 +
             (C15769 * C138 - C15773 * C127 + C47358 * C139 - C15774 * C128) *
                 C47279) *
                C31197 +
            ((C31492 - C31493 + C31494 - C31495) * C116 +
             (C31496 - C31497 + C31498 - C31499) * C47279) *
                C47391) *
               C47411 +
           (((C31493 - C31492 + C31495 - C31494) * C116 +
             (C31497 - C31496 + C31499 - C31498) * C47279) *
                C31197 +
            ((C31500 - C31501 + C31502 - C31503) * C116 +
             (C31504 - C31505 + C31506 - C31507) * C47279) *
                C47391) *
               C47400 +
           (((C31501 - C31500 + C31503 - C31502) * C116 +
             (C31505 - C31504 + C31507 - C31506) * C47279) *
                C31197 +
            ((C15769 * C1850 - C15773 * C1844 + C47358 * C1851 -
              C15774 * C1845) *
                 C116 +
             (C15769 * C1862 - C15773 * C1853 + C47358 * C1863 -
              C15774 * C1854) *
                 C47279) *
                C47391) *
               C47374) *
              C47073 * C258 +
          ((((C15773 * C118 - C15769 * C125 + C15774 * C119 - C47358 * C126) *
                 C116 +
             (C15773 * C128 - C15769 * C139 + C15774 * C129 - C47358 * C140) *
                 C47279) *
                C31197 +
            ((C31508 - C31509 + C31510 - C31511) * C116 +
             (C31512 - C31513 + C31514 - C31515) * C47279) *
                C47391) *
               C47411 +
           (((C31509 - C31508 + C31511 - C31510) * C116 +
             (C31513 - C31512 + C31515 - C31514) * C47279) *
                C31197 +
            ((C31516 - C31517 + C31518 - C31519) * C116 +
             (C31520 - C31521 + C31522 - C31523) * C47279) *
                C47391) *
               C47400 +
           (((C31517 - C31516 + C31519 - C31518) * C116 +
             (C31521 - C31520 + C31523 - C31522) * C47279) *
                C31197 +
            ((C15773 * C1845 - C15769 * C1851 + C15774 * C1846 -
              C47358 * C1852) *
                 C116 +
             (C15773 * C1854 - C15769 * C1863 + C15774 * C1855 -
              C47358 * C1864) *
                 C47279) *
                C47391) *
               C47374) *
              C47073 * C259 +
          ((((C15769 * C126 - C15773 * C119 + C47358 * C130 - C15774 * C120) *
                 C116 +
             (C15769 * C140 - C15773 * C129 + C47358 * C141 - C15774 * C131) *
                 C47279) *
                C31197 +
            ((C31524 - C31525 + C31526 - C31527) * C116 +
             (C31528 - C31529 + C31530 - C31531) * C47279) *
                C47391) *
               C47411 +
           (((C31525 - C31524 + C31527 - C31526) * C116 +
             (C31529 - C31528 + C31531 - C31530) * C47279) *
                C31197 +
            ((C31532 - C31533 + C31534 - C31535) * C116 +
             (C31536 - C31537 + C31538 - C31539) * C47279) *
                C47391) *
               C47400 +
           (((C31533 - C31532 + C31535 - C31534) * C116 +
             (C31537 - C31536 + C31539 - C31538) * C47279) *
                C31197 +
            ((C15769 * C1852 - C15773 * C1846 + C47358 * C2121 -
              C15774 * C2120) *
                 C116 +
             (C15769 * C1864 - C15773 * C1855 + C47358 * C2123 -
              C15774 * C2122) *
                 C47279) *
                C47391) *
               C47374) *
              C47073 * C47365)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C15769 * C124 - C15773 * C117 + C47358 * C125 - C15774 * C118) *
                 C116 +
             (C15769 * C138 - C15773 * C127 + C47358 * C139 - C15774 * C128) *
                 C47279) *
                C31197 +
            ((C31492 - C31493 + C31494 - C31495) * C116 +
             (C31496 - C31497 + C31498 - C31499) * C47279) *
                C47391) *
               C47091 * C942 +
           (((C15925 - C15924 + C15927 - C15926) * C116 +
             (C15929 - C15928 + C15931 - C15930) * C47279) *
                C31197 +
            ((C16580 - C16581 + C16582 - C16583) * C116 +
             (C16584 - C16585 + C16586 - C16587) * C47279) *
                C47391) *
               C47091 * C943 +
           (((C15933 - C15932 + C15935 - C15934) * C116 +
             (C15937 - C15936 + C15939 - C15938) * C47279) *
                C31197 +
            ((C17002 - C17003 + C17004 - C17005) * C116 +
             (C17006 - C17007 + C17008 - C17009) * C47279) *
                C47391) *
               C47091 * C47371) *
              C47407 +
          ((((C15773 * C118 - C15769 * C125 + C15774 * C119 - C47358 * C126) *
                 C116 +
             (C15773 * C128 - C15769 * C139 + C15774 * C129 - C47358 * C140) *
                 C47279) *
                C31197 +
            ((C31508 - C31509 + C31510 - C31511) * C116 +
             (C31512 - C31513 + C31514 - C31515) * C47279) *
                C47391) *
               C47091 * C942 +
           (((C15941 - C15940 + C15943 - C15942) * C116 +
             (C15945 - C15944 + C15947 - C15946) * C47279) *
                C31197 +
            ((C16588 - C16589 + C16590 - C16591) * C116 +
             (C16592 - C16593 + C16594 - C16595) * C47279) *
                C47391) *
               C47091 * C943 +
           (((C15949 - C15948 + C15951 - C15950) * C116 +
             (C15953 - C15952 + C15955 - C15954) * C47279) *
                C31197 +
            ((C17350 - C17351 + C17352 - C17353) * C116 +
             (C17354 - C17355 + C17356 - C17357) * C47279) *
                C47391) *
               C47091 * C47371) *
              C47394 +
          ((((C15769 * C126 - C15773 * C119 + C47358 * C130 - C15774 * C120) *
                 C116 +
             (C15769 * C140 - C15773 * C129 + C47358 * C141 - C15774 * C131) *
                 C47279) *
                C31197 +
            ((C31524 - C31525 + C31526 - C31527) * C116 +
             (C31528 - C31529 + C31530 - C31531) * C47279) *
                C47391) *
               C47091 * C942 +
           (((C15957 - C15956 + C15959 - C15958) * C116 +
             (C15961 - C15960 + C15963 - C15962) * C47279) *
                C31197 +
            ((C16596 - C16597 + C16598 - C16599) * C116 +
             (C16600 - C16601 + C16602 - C16603) * C47279) *
                C47391) *
               C47091 * C943 +
           (((C15965 - C15964 + C15967 - C15966) * C116 +
             (C15969 - C15968 + C15971 - C15970) * C47279) *
                C31197 +
            ((C15769 * C1167 - C15773 * C1155 + C47358 * C1441 -
              C15774 * C1440) *
                 C116 +
             (C15769 * C1182 - C15773 * C1170 + C47358 * C1443 -
              C15774 * C1442) *
                 C47279) *
                C47391) *
               C47091 * C47371) *
              C47365)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C15769 * C124 - C15773 * C117 + C47358 * C125 - C15774 * C118) *
                C116 +
            (C15769 * C138 - C15773 * C127 + C47358 * C139 - C15774 * C128) *
                C47279) *
               C31197 +
           ((C31492 - C31493 + C31494 - C31495) * C116 +
            (C31496 - C31497 + C31498 - C31499) * C47279) *
               C47391) *
              C47091 * C1010 +
          (((C15925 - C15924 + C15927 - C15926) * C116 +
            (C15929 - C15928 + C15931 - C15930) * C47279) *
               C31197 +
           ((C16580 - C16581 + C16582 - C16583) * C116 +
            (C16584 - C16585 + C16586 - C16587) * C47279) *
               C47391) *
              C47091 * C1011 +
          (((C15933 - C15932 + C15935 - C15934) * C116 +
            (C15937 - C15936 + C15939 - C15938) * C47279) *
               C31197 +
           ((C17002 - C17003 + C17004 - C17005) * C116 +
            (C17006 - C17007 + C17008 - C17009) * C47279) *
               C47391) *
              C47091 * C1012 +
          (((C16833 - C16832 + C16835 - C16834) * C116 +
            (C16837 - C16836 + C16839 - C16838) * C47279) *
               C31197 +
           ((C17488 - C17489 + C17490 - C17491) * C116 +
            (C17492 - C17493 + C17494 - C17495) * C47279) *
               C47391) *
              C47091 * C1013 +
          (((C16841 - C16840 + C16843 - C16842) * C116 +
            (C16845 - C16844 + C16847 - C16846) * C47279) *
               C31197 +
           ((C15769 * C6311 - C15773 * C6309 + C47358 * C6312 -
             C15774 * C6310) *
                C116 +
            (C15769 * C6315 - C15773 * C6313 + C47358 * C6316 -
             C15774 * C6314) *
                C47279) *
               C47391) *
              C47091 * C1014) *
         C47045) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C15769 * C124 - C15773 * C117 + C47358 * C125 - C15774 * C118) *
                 C116 +
             (C15769 * C138 - C15773 * C127 + C47358 * C139 - C15774 * C128) *
                 C47279) *
                C31197 +
            ((C31492 - C31493 + C31494 - C31495) * C116 +
             (C31496 - C31497 + C31498 - C31499) * C47279) *
                C47391) *
               C47411 +
           (((C31493 - C31492 + C31495 - C31494) * C116 +
             (C31497 - C31496 + C31499 - C31498) * C47279) *
                C31197 +
            ((C31500 - C31501 + C31502 - C31503) * C116 +
             (C31504 - C31505 + C31506 - C31507) * C47279) *
                C47391) *
               C47400 +
           (((C31501 - C31500 + C31503 - C31502) * C116 +
             (C31505 - C31504 + C31507 - C31506) * C47279) *
                C31197 +
            ((C15769 * C1850 - C15773 * C1844 + C47358 * C1851 -
              C15774 * C1845) *
                 C116 +
             (C15769 * C1862 - C15773 * C1853 + C47358 * C1863 -
              C15774 * C1854) *
                 C47279) *
                C47391) *
               C47374) *
              C942 +
          ((((C15925 - C15924 + C15927 - C15926) * C116 +
             (C15929 - C15928 + C15931 - C15930) * C47279) *
                C31197 +
            ((C16580 - C16581 + C16582 - C16583) * C116 +
             (C16584 - C16585 + C16586 - C16587) * C47279) *
                C47391) *
               C47411 +
           (((C16581 - C16580 + C16583 - C16582) * C116 +
             (C16585 - C16584 + C16587 - C16586) * C47279) *
                C31197 +
            ((C16994 - C16995 + C16996 - C16997) * C116 +
             (C16998 - C16999 + C17000 - C17001) * C47279) *
                C47391) *
               C47400 +
           (((C16995 - C16994 + C16997 - C16996) * C116 +
             (C16999 - C16998 + C17001 - C17000) * C47279) *
                C31197 +
            ((C18332 - C18333 + C18334 - C18335) * C116 +
             (C18336 - C18337 + C18338 - C18339) * C47279) *
                C47391) *
               C47374) *
              C943 +
          ((((C15933 - C15932 + C15935 - C15934) * C116 +
             (C15937 - C15936 + C15939 - C15938) * C47279) *
                C31197 +
            ((C17002 - C17003 + C17004 - C17005) * C116 +
             (C17006 - C17007 + C17008 - C17009) * C47279) *
                C47391) *
               C47411 +
           (((C17003 - C17002 + C17005 - C17004) * C116 +
             (C17007 - C17006 + C17009 - C17008) * C47279) *
                C31197 +
            ((C17010 - C17011 + C17012 - C17013) * C116 +
             (C17014 - C17015 + C17016 - C17017) * C47279) *
                C47391) *
               C47400 +
           (((C17011 - C17010 + C17013 - C17012) * C116 +
             (C17015 - C17014 + C17017 - C17016) * C47279) *
                C31197 +
            ((C15769 * C7171 - C15773 * C7169 + C47358 * C7172 -
              C15774 * C7170) *
                 C116 +
             (C15769 * C7175 - C15773 * C7173 + C47358 * C7176 -
              C15774 * C7174) *
                 C47279) *
                C47391) *
               C47374) *
              C47371) *
         C47045) /
            (p * q * std::sqrt(p + q));
    d2ee[173] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C15769 * C124 - C15773 * C117 + C47358 * C125 - C15774 * C118) *
                 C116 +
             (C15769 * C138 - C15773 * C127 + C47358 * C139 - C15774 * C128) *
                 C47279) *
                C31197 +
            ((C31492 - C31493 + C31494 - C31495) * C116 +
             (C31496 - C31497 + C31498 - C31499) * C47279) *
                C47391) *
               C47340 +
           (((C31493 - C31492 + C31495 - C31494) * C116 +
             (C31497 - C31496 + C31499 - C31498) * C47279) *
                C31197 +
            ((C31500 - C31501 + C31502 - C31503) * C116 +
             (C31504 - C31505 + C31506 - C31507) * C47279) *
                C47391) *
               C47178) *
              C47073 * C554 +
          ((((C15773 * C118 - C15769 * C125 + C15774 * C119 - C47358 * C126) *
                 C116 +
             (C15773 * C128 - C15769 * C139 + C15774 * C129 - C47358 * C140) *
                 C47279) *
                C31197 +
            ((C31508 - C31509 + C31510 - C31511) * C116 +
             (C31512 - C31513 + C31514 - C31515) * C47279) *
                C47391) *
               C47340 +
           (((C31509 - C31508 + C31511 - C31510) * C116 +
             (C31513 - C31512 + C31515 - C31514) * C47279) *
                C31197 +
            ((C31516 - C31517 + C31518 - C31519) * C116 +
             (C31520 - C31521 + C31522 - C31523) * C47279) *
                C47391) *
               C47178) *
              C47073 * C555 +
          ((((C15769 * C126 - C15773 * C119 + C47358 * C130 - C15774 * C120) *
                 C116 +
             (C15769 * C140 - C15773 * C129 + C47358 * C141 - C15774 * C131) *
                 C47279) *
                C31197 +
            ((C31524 - C31525 + C31526 - C31527) * C116 +
             (C31528 - C31529 + C31530 - C31531) * C47279) *
                C47391) *
               C47340 +
           (((C31525 - C31524 + C31527 - C31526) * C116 +
             (C31529 - C31528 + C31531 - C31530) * C47279) *
                C31197 +
            ((C31532 - C31533 + C31534 - C31535) * C116 +
             (C31536 - C31537 + C31538 - C31539) * C47279) *
                C47391) *
               C47178) *
              C47073 * C556 +
          ((((C15773 * C120 - C15769 * C130 + C15774 * C121 - C47358 * C132) *
                 C116 +
             (C15773 * C131 - C15769 * C141 + C15774 * C133 - C47358 * C142) *
                 C47279) *
                C31197 +
            ((C31800 - C31801 + C31802 - C31803) * C116 +
             (C31804 - C31805 + C31806 - C31807) * C47279) *
                C47391) *
               C47340 +
           (((C31801 - C31800 + C31803 - C31802) * C116 +
             (C31805 - C31804 + C31807 - C31806) * C47279) *
                C31197 +
            ((C15769 * C438 - C15773 * C421 + C47358 * C442 - C15774 * C423) *
                 C116 +
             (C15769 * C451 - C15773 * C439 + C47358 * C453 - C15774 * C443) *
                 C47279) *
                C47391) *
               C47178) *
              C47073 * C47375)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C15769 * C124 - C15773 * C117 + C47358 * C125 - C15774 * C118) *
                  C116 +
              (C15769 * C138 - C15773 * C127 + C47358 * C139 - C15774 * C128) *
                  C47279) *
                 C31197 +
             ((C31492 - C31493 + C31494 - C31495) * C116 +
              (C31496 - C31497 + C31498 - C31499) * C47279) *
                 C47391) *
                C47340 +
            (((C31493 - C31492 + C31495 - C31494) * C116 +
              (C31497 - C31496 + C31499 - C31498) * C47279) *
                 C31197 +
             ((C31500 - C31501 + C31502 - C31503) * C116 +
              (C31504 - C31505 + C31506 - C31507) * C47279) *
                 C47391) *
                C47178) *
               C942 +
           ((((C15925 - C15924 + C15927 - C15926) * C116 +
              (C15929 - C15928 + C15931 - C15930) * C47279) *
                 C31197 +
             ((C16580 - C16581 + C16582 - C16583) * C116 +
              (C16584 - C16585 + C16586 - C16587) * C47279) *
                 C47391) *
                C47340 +
            (((C16581 - C16580 + C16583 - C16582) * C116 +
              (C16585 - C16584 + C16587 - C16586) * C47279) *
                 C31197 +
             ((C16994 - C16995 + C16996 - C16997) * C116 +
              (C16998 - C16999 + C17000 - C17001) * C47279) *
                 C47391) *
                C47178) *
               C943 +
           ((((C15933 - C15932 + C15935 - C15934) * C116 +
              (C15937 - C15936 + C15939 - C15938) * C47279) *
                 C31197 +
             ((C17002 - C17003 + C17004 - C17005) * C116 +
              (C17006 - C17007 + C17008 - C17009) * C47279) *
                 C47391) *
                C47340 +
            (((C17003 - C17002 + C17005 - C17004) * C116 +
              (C17007 - C17006 + C17009 - C17008) * C47279) *
                 C31197 +
             ((C17010 - C17011 + C17012 - C17013) * C116 +
              (C17014 - C17015 + C17016 - C17017) * C47279) *
                 C47391) *
                C47178) *
               C47371) *
              C47325 +
          (((((C15773 * C118 - C15769 * C125 + C15774 * C119 - C47358 * C126) *
                  C116 +
              (C15773 * C128 - C15769 * C139 + C15774 * C129 - C47358 * C140) *
                  C47279) *
                 C31197 +
             ((C31508 - C31509 + C31510 - C31511) * C116 +
              (C31512 - C31513 + C31514 - C31515) * C47279) *
                 C47391) *
                C47340 +
            (((C31509 - C31508 + C31511 - C31510) * C116 +
              (C31513 - C31512 + C31515 - C31514) * C47279) *
                 C31197 +
             ((C31516 - C31517 + C31518 - C31519) * C116 +
              (C31520 - C31521 + C31522 - C31523) * C47279) *
                 C47391) *
                C47178) *
               C942 +
           ((((C15941 - C15940 + C15943 - C15942) * C116 +
              (C15945 - C15944 + C15947 - C15946) * C47279) *
                 C31197 +
             ((C16588 - C16589 + C16590 - C16591) * C116 +
              (C16592 - C16593 + C16594 - C16595) * C47279) *
                 C47391) *
                C47340 +
            (((C16589 - C16588 + C16591 - C16590) * C116 +
              (C16593 - C16592 + C16595 - C16594) * C47279) *
                 C31197 +
             ((C18064 - C18065 + C18066 - C18067) * C116 +
              (C18068 - C18069 + C18070 - C18071) * C47279) *
                 C47391) *
                C47178) *
               C943 +
           ((((C15949 - C15948 + C15951 - C15950) * C116 +
              (C15953 - C15952 + C15955 - C15954) * C47279) *
                 C31197 +
             ((C17350 - C17351 + C17352 - C17353) * C116 +
              (C17354 - C17355 + C17356 - C17357) * C47279) *
                 C47391) *
                C47340 +
            (((C17351 - C17350 + C17353 - C17352) * C116 +
              (C17355 - C17354 + C17357 - C17356) * C47279) *
                 C31197 +
             ((C15769 * C1172 - C15773 * C1157 + C47358 * C1173 -
               C15774 * C1158) *
                  C116 +
              (C15769 * C1184 - C15773 * C1175 + C47358 * C1185 -
               C15774 * C1176) *
                  C47279) *
                 C47391) *
                C47178) *
               C47371) *
              C47056)) /
            (p * q * std::sqrt(p + q));
    d2ee[174] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C15769 * C124 - C15773 * C117 + C47358 * C125 - C15774 * C118) *
                C116 +
            (C15769 * C138 - C15773 * C127 + C47358 * C139 - C15774 * C128) *
                C47279) *
               C31197 +
           ((C15769 * C424 - C15773 * C414 + C47358 * C425 - C15774 * C415) *
                C116 +
            (C15769 * C444 - C15773 * C427 + C47358 * C445 - C15774 * C428) *
                C47279) *
               C47391) *
              C47091 * C47073 * C108 +
          (((C15773 * C118 - C15769 * C125 + C15774 * C119 - C47358 * C126) *
                C116 +
            (C15773 * C128 - C15769 * C139 + C15774 * C129 - C47358 * C140) *
                C47279) *
               C31197 +
           ((C15773 * C415 - C15769 * C425 + C15774 * C416 - C47358 * C426) *
                C116 +
            (C15773 * C428 - C15769 * C445 + C15774 * C429 - C47358 * C446) *
                C47279) *
               C47391) *
              C47091 * C47073 * C109 +
          (((C15769 * C126 - C15773 * C119 + C47358 * C130 - C15774 * C120) *
                C116 +
            (C15769 * C140 - C15773 * C129 + C47358 * C141 - C15774 * C131) *
                C47279) *
               C31197 +
           ((C15769 * C426 - C15773 * C416 + C47358 * C436 - C15774 * C420) *
                C116 +
            (C15769 * C446 - C15773 * C429 + C47358 * C450 - C15774 * C437) *
                C47279) *
               C47391) *
              C47091 * C47073 * C110 +
          (((C15773 * C120 - C15769 * C130 + C15774 * C121 - C47358 * C132) *
                C116 +
            (C15773 * C131 - C15769 * C141 + C15774 * C133 - C47358 * C142) *
                C47279) *
               C31197 +
           ((C15773 * C420 - C15769 * C436 + C15774 * C422 - C47358 * C440) *
                C116 +
            (C15773 * C437 - C15769 * C450 + C15774 * C441 - C47358 * C452) *
                C47279) *
               C47391) *
              C47091 * C47073 * C111 +
          (((C15769 * C132 - C15773 * C121 + C47358 * C134 - C15774 * C122) *
                C116 +
            (C15769 * C142 - C15773 * C133 + C47358 * C143 - C15774 * C135) *
                C47279) *
               C31197 +
           ((C15769 * C440 - C15773 * C422 + C47358 * C663 - C15774 * C662) *
                C116 +
            (C15769 * C452 - C15773 * C441 + C47358 * C665 - C15774 * C664) *
                C47279) *
               C47391) *
              C47091 * C47073 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C15769 * C124 - C15773 * C117 + C47358 * C125 - C15774 * C118) *
                 C116 +
             (C15769 * C138 - C15773 * C127 + C47358 * C139 - C15774 * C128) *
                 C47279) *
                C31197 +
            ((C15769 * C424 - C15773 * C414 + C47358 * C425 - C15774 * C415) *
                 C116 +
             (C15769 * C444 - C15773 * C427 + C47358 * C445 - C15774 * C428) *
                 C47279) *
                C47391) *
               C47091 * C47410 +
           (((C15925 - C15924 + C15927 - C15926) * C116 +
             (C15929 - C15928 + C15931 - C15930) * C47279) *
                C31197 +
            ((C16580 - C16581 + C16582 - C16583) * C116 +
             (C16584 - C16585 + C16586 - C16587) * C47279) *
                C47391) *
               C47091 * C47398 +
           (((C15933 - C15932 + C15935 - C15934) * C116 +
             (C15937 - C15936 + C15939 - C15938) * C47279) *
                C31197 +
            ((C17002 - C17003 + C17004 - C17005) * C116 +
             (C17006 - C17007 + C17008 - C17009) * C47279) *
                C47391) *
               C47091 * C47371) *
              C258 +
          ((((C15773 * C118 - C15769 * C125 + C15774 * C119 - C47358 * C126) *
                 C116 +
             (C15773 * C128 - C15769 * C139 + C15774 * C129 - C47358 * C140) *
                 C47279) *
                C31197 +
            ((C15773 * C415 - C15769 * C425 + C15774 * C416 - C47358 * C426) *
                 C116 +
             (C15773 * C428 - C15769 * C445 + C15774 * C429 - C47358 * C446) *
                 C47279) *
                C47391) *
               C47091 * C47410 +
           (((C15941 - C15940 + C15943 - C15942) * C116 +
             (C15945 - C15944 + C15947 - C15946) * C47279) *
                C31197 +
            ((C16588 - C16589 + C16590 - C16591) * C116 +
             (C16592 - C16593 + C16594 - C16595) * C47279) *
                C47391) *
               C47091 * C47398 +
           (((C15949 - C15948 + C15951 - C15950) * C116 +
             (C15953 - C15952 + C15955 - C15954) * C47279) *
                C31197 +
            ((C17350 - C17351 + C17352 - C17353) * C116 +
             (C17354 - C17355 + C17356 - C17357) * C47279) *
                C47391) *
               C47091 * C47371) *
              C259 +
          ((((C15769 * C126 - C15773 * C119 + C47358 * C130 - C15774 * C120) *
                 C116 +
             (C15769 * C140 - C15773 * C129 + C47358 * C141 - C15774 * C131) *
                 C47279) *
                C31197 +
            ((C15769 * C426 - C15773 * C416 + C47358 * C436 - C15774 * C420) *
                 C116 +
             (C15769 * C446 - C15773 * C429 + C47358 * C450 - C15774 * C437) *
                 C47279) *
                C47391) *
               C47091 * C47410 +
           (((C15957 - C15956 + C15959 - C15958) * C116 +
             (C15961 - C15960 + C15963 - C15962) * C47279) *
                C31197 +
            ((C16596 - C16597 + C16598 - C16599) * C116 +
             (C16600 - C16601 + C16602 - C16603) * C47279) *
                C47391) *
               C47091 * C47398 +
           (((C15965 - C15964 + C15967 - C15966) * C116 +
             (C15969 - C15968 + C15971 - C15970) * C47279) *
                C31197 +
            ((C15769 * C1167 - C15773 * C1155 + C47358 * C1441 -
              C15774 * C1440) *
                 C116 +
             (C15769 * C1182 - C15773 * C1170 + C47358 * C1443 -
              C15774 * C1442) *
                 C47279) *
                C47391) *
               C47091 * C47371) *
              C47365)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C15769 * C124 - C15773 * C117 + C47358 * C125 - C15774 * C118) *
                 C116 +
             (C15769 * C138 - C15773 * C127 + C47358 * C139 - C15774 * C128) *
                 C47279) *
                C31197 +
            ((C31492 - C31493 + C31494 - C31495) * C116 +
             (C31496 - C31497 + C31498 - C31499) * C47279) *
                C47391) *
               C47091 * C942 +
           (((C15925 - C15924 + C15927 - C15926) * C116 +
             (C15929 - C15928 + C15931 - C15930) * C47279) *
                C31197 +
            ((C16580 - C16581 + C16582 - C16583) * C116 +
             (C16584 - C16585 + C16586 - C16587) * C47279) *
                C47391) *
               C47091 * C943 +
           (((C15933 - C15932 + C15935 - C15934) * C116 +
             (C15937 - C15936 + C15939 - C15938) * C47279) *
                C31197 +
            ((C17002 - C17003 + C17004 - C17005) * C116 +
             (C17006 - C17007 + C17008 - C17009) * C47279) *
                C47391) *
               C47091 * C47371) *
              C47407 +
          ((((C15773 * C118 - C15769 * C125 + C15774 * C119 - C47358 * C126) *
                 C116 +
             (C15773 * C128 - C15769 * C139 + C15774 * C129 - C47358 * C140) *
                 C47279) *
                C31197 +
            ((C31508 - C31509 + C31510 - C31511) * C116 +
             (C31512 - C31513 + C31514 - C31515) * C47279) *
                C47391) *
               C47091 * C942 +
           (((C15941 - C15940 + C15943 - C15942) * C116 +
             (C15945 - C15944 + C15947 - C15946) * C47279) *
                C31197 +
            ((C16588 - C16589 + C16590 - C16591) * C116 +
             (C16592 - C16593 + C16594 - C16595) * C47279) *
                C47391) *
               C47091 * C943 +
           (((C15949 - C15948 + C15951 - C15950) * C116 +
             (C15953 - C15952 + C15955 - C15954) * C47279) *
                C31197 +
            ((C17350 - C17351 + C17352 - C17353) * C116 +
             (C17354 - C17355 + C17356 - C17357) * C47279) *
                C47391) *
               C47091 * C47371) *
              C47394 +
          ((((C15769 * C126 - C15773 * C119 + C47358 * C130 - C15774 * C120) *
                 C116 +
             (C15769 * C140 - C15773 * C129 + C47358 * C141 - C15774 * C131) *
                 C47279) *
                C31197 +
            ((C31524 - C31525 + C31526 - C31527) * C116 +
             (C31528 - C31529 + C31530 - C31531) * C47279) *
                C47391) *
               C47091 * C942 +
           (((C15957 - C15956 + C15959 - C15958) * C116 +
             (C15961 - C15960 + C15963 - C15962) * C47279) *
                C31197 +
            ((C16596 - C16597 + C16598 - C16599) * C116 +
             (C16600 - C16601 + C16602 - C16603) * C47279) *
                C47391) *
               C47091 * C943 +
           (((C15965 - C15964 + C15967 - C15966) * C116 +
             (C15969 - C15968 + C15971 - C15970) * C47279) *
                C31197 +
            ((C15769 * C1167 - C15773 * C1155 + C47358 * C1441 -
              C15774 * C1440) *
                 C116 +
             (C15769 * C1182 - C15773 * C1170 + C47358 * C1443 -
              C15774 * C1442) *
                 C47279) *
                C47391) *
               C47091 * C47371) *
              C47365)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C15769 * C124 - C15773 * C117 + C47358 * C125 - C15774 * C118) *
                C116 +
            (C15769 * C138 - C15773 * C127 + C47358 * C139 - C15774 * C128) *
                C47279) *
               C31197 +
           ((C31492 - C31493 + C31494 - C31495) * C116 +
            (C31496 - C31497 + C31498 - C31499) * C47279) *
               C47391) *
              C47091 * C1010 +
          (((C15925 - C15924 + C15927 - C15926) * C116 +
            (C15929 - C15928 + C15931 - C15930) * C47279) *
               C31197 +
           ((C16580 - C16581 + C16582 - C16583) * C116 +
            (C16584 - C16585 + C16586 - C16587) * C47279) *
               C47391) *
              C47091 * C1011 +
          (((C15933 - C15932 + C15935 - C15934) * C116 +
            (C15937 - C15936 + C15939 - C15938) * C47279) *
               C31197 +
           ((C17002 - C17003 + C17004 - C17005) * C116 +
            (C17006 - C17007 + C17008 - C17009) * C47279) *
               C47391) *
              C47091 * C1012 +
          (((C16833 - C16832 + C16835 - C16834) * C116 +
            (C16837 - C16836 + C16839 - C16838) * C47279) *
               C31197 +
           ((C17488 - C17489 + C17490 - C17491) * C116 +
            (C17492 - C17493 + C17494 - C17495) * C47279) *
               C47391) *
              C47091 * C1013 +
          (((C16841 - C16840 + C16843 - C16842) * C116 +
            (C16845 - C16844 + C16847 - C16846) * C47279) *
               C31197 +
           ((C15769 * C6311 - C15773 * C6309 + C47358 * C6312 -
             C15774 * C6310) *
                C116 +
            (C15769 * C6315 - C15773 * C6313 + C47358 * C6316 -
             C15774 * C6314) *
                C47279) *
               C47391) *
              C47091 * C1014) *
         C47045) /
            (p * q * std::sqrt(p + q));
    d2ee[175] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((((C47018 * C124 - C21369 * C117) * C4581 +
                      (C47018 * C138 - C21369 * C127) * C4577 +
                      (C21484 - C21485) * C4582 + (C21486 - C21487) * C47389) *
                         C31197 +
                     ((C25950 - C25951) * C4581 + (C25952 - C25953) * C4577 +
                      C26440 * C4582 + C26441 * C47389) *
                         C47391) *
                        C47091 * C47132 +
                    (((C21485 - C21484) * C4581 + (C21487 - C21486) * C4577 +
                      (C21489 - C21488) * C4582 + (C21491 - C21490) * C47389) *
                         C31197 +
                     (C26442 * C4581 + C26443 * C4577 + C22312 * C4582 +
                      C22313 * C47389) *
                         C47391) *
                        C47091 * C47139 +
                    ((C21520 * C4581 + C21521 * C4577 +
                      (C21493 - C21492) * C4582 + (C21495 - C21494) * C47389) *
                         C31197 +
                     (C26830 * C4581 + C26831 * C4577 + C22690 * C4582 +
                      C22691 * C47389) *
                         C47391) *
                        C47091 * C2700) *
                       C47050 +
                   ((((C21369 * C118 - C47018 * C125) * C4581 +
                      (C21369 * C128 - C47018 * C139) * C4577 +
                      (C21496 - C21497) * C4582 + (C21498 - C21499) * C47389) *
                         C31197 +
                     ((C25958 - C25959) * C4581 + (C25960 - C25961) * C4577 +
                      C26444 * C4582 + C26445 * C47389) *
                         C47391) *
                        C47091 * C47132 +
                    (((C21497 - C21496) * C4581 + (C21499 - C21498) * C4577 +
                      (C21501 - C21500) * C4582 + (C21503 - C21502) * C47389) *
                         C31197 +
                     (C26446 * C4581 + C26447 * C4577 + C22582 * C4582 +
                      C22583 * C47389) *
                         C47391) *
                        C47091 * C47139 +
                    ((C21522 * C4581 + C21523 * C4577 +
                      (C21505 - C21504) * C4582 + (C21507 - C21506) * C47389) *
                         C31197 +
                     (C27158 * C4581 + C27159 * C4577 +
                      (C22584 - C22585) * C4582 + (C22586 - C22587) * C47389) *
                         C47391) *
                        C47091 * C2700) *
                       C47059 +
                   ((((C47018 * C126 - C21369 * C119) * C4581 +
                      (C47018 * C140 - C21369 * C129) * C4577 +
                      (C21508 - C21509) * C4582 + (C21510 - C21511) * C47389) *
                         C31197 +
                     ((C25966 - C25967) * C4581 + (C25968 - C25969) * C4577 +
                      C26448 * C4582 + C26449 * C47389) *
                         C47391) *
                        C47091 * C47132 +
                    (((C21509 - C21508) * C4581 + (C21511 - C21510) * C4577 +
                      (C21513 - C21512) * C4582 + (C21515 - C21514) * C47389) *
                         C31197 +
                     (C26450 * C4581 + C26451 * C4577 +
                      (C22006 - C22007) * C4582 + (C22008 - C22009) * C47389) *
                         C47391) *
                        C47091 * C47139 +
                    ((C21524 * C4581 + C21525 * C4577 +
                      (C21517 - C21516) * C4582 + (C21519 - C21518) * C47389) *
                         C31197 +
                     ((C22007 - C22006) * C4581 + (C22009 - C22008) * C4577 +
                      (C47018 * C1547 - C21369 * C1544) * C4582 +
                      (C47018 * C1553 - C21369 * C1550) * C47389) *
                         C47391) *
                        C47091 * C2700) *
                       C2703)) /
                 (p * q * std::sqrt(p + q));
    d2ee[176] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((((C47018 * C124 - C21369 * C117) * C4581 +
                       (C47018 * C138 - C21369 * C127) * C4577 +
                       (C21484 - C21485) * C4582 + (C21486 - C21487) * C47389) *
                          C31197 +
                      ((C25950 - C25951) * C4581 + (C25952 - C25953) * C4577 +
                       C26440 * C4582 + C26441 * C47389) *
                          C47391) *
                         C47340 +
                     (((C25951 - C25950) * C4581 + (C25953 - C25952) * C4577 +
                       C26442 * C4582 + C26443 * C47389) *
                          C31197 +
                      ((C25954 - C25955) * C4581 + (C25956 - C25957) * C4577 +
                       C26826 * C4582 + C26827 * C47389) *
                          C47391) *
                         C47178) *
                        C47132 +
                    ((((C21485 - C21484) * C4581 + (C21487 - C21486) * C4577 +
                       (C21489 - C21488) * C4582 + (C21491 - C21490) * C47389) *
                          C31197 +
                      (C26442 * C4581 + C26443 * C4577 + C22312 * C4582 +
                       C22313 * C47389) *
                          C47391) *
                         C47340 +
                     ((C26440 * C4581 + C26441 * C4577 + C26830 * C4582 +
                       C26831 * C47389) *
                          C31197 +
                      (C26828 * C4581 + C26829 * C4577 + C22330 * C4582 +
                       C22331 * C47389) *
                          C47391) *
                         C47178) *
                        C47139 +
                    (((C21520 * C4581 + C21521 * C4577 +
                       (C21493 - C21492) * C4582 + (C21495 - C21494) * C47389) *
                          C31197 +
                      (C26830 * C4581 + C26831 * C4577 + C22690 * C4582 +
                       C22691 * C47389) *
                          C47391) *
                         C47340 +
                     ((C22312 * C4581 + C22313 * C4577 + C27290 * C4582 +
                       C27291 * C47389) *
                          C31197 +
                      (C26832 * C4581 + C26833 * C4577 +
                       (C22326 - C22327) * C4582 + (C22328 - C22329) * C47389) *
                          C47391) *
                         C47178) *
                        C2700) *
                       C2440 +
                   (((((C21369 * C118 - C47018 * C125) * C4581 +
                       (C21369 * C128 - C47018 * C139) * C4577 +
                       (C21496 - C21497) * C4582 + (C21498 - C21499) * C47389) *
                          C31197 +
                      ((C25958 - C25959) * C4581 + (C25960 - C25961) * C4577 +
                       C26444 * C4582 + C26445 * C47389) *
                          C47391) *
                         C47340 +
                     (((C25959 - C25958) * C4581 + (C25961 - C25960) * C4577 +
                       C26446 * C4582 + C26447 * C47389) *
                          C31197 +
                      ((C25962 - C25963) * C4581 + (C25964 - C25965) * C4577 +
                       C27876 * C4582 + C27877 * C47389) *
                          C47391) *
                         C47178) *
                        C47132 +
                    ((((C21497 - C21496) * C4581 + (C21499 - C21498) * C4577 +
                       (C21501 - C21500) * C4582 + (C21503 - C21502) * C47389) *
                          C31197 +
                      (C26446 * C4581 + C26447 * C4577 + C22582 * C4582 +
                       C22583 * C47389) *
                          C47391) *
                         C47340 +
                     ((C26444 * C4581 + C26445 * C4577 + C27158 * C4582 +
                       C27159 * C47389) *
                          C31197 +
                      (C27878 * C4581 + C27879 * C4577 +
                       (C23132 - C23133) * C4582 + (C23134 - C23135) * C47389) *
                          C47391) *
                         C47178) *
                        C47139 +
                    (((C21522 * C4581 + C21523 * C4577 +
                       (C21505 - C21504) * C4582 + (C21507 - C21506) * C47389) *
                          C31197 +
                      (C27158 * C4581 + C27159 * C4577 +
                       (C22584 - C22585) * C4582 + (C22586 - C22587) * C47389) *
                          C47391) *
                         C47340 +
                     ((C22582 * C4581 + C22583 * C4577 +
                       (C22585 - C22584) * C4582 + (C22587 - C22586) * C47389) *
                          C31197 +
                      ((C23133 - C23132) * C4581 + (C23135 - C23134) * C4577 +
                       (C47018 * C5810 - C21369 * C5808) * C4582 +
                       (C47018 * C5814 - C21369 * C5812) * C47389) *
                          C47391) *
                         C47178) *
                        C2700) *
                       C47056)) /
                 (p * q * std::sqrt(p + q));
    d2ee[177] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((((C47018 * C124 - C21369 * C117) * C4581 +
                      (C47018 * C138 - C21369 * C127) * C4577 +
                      (C21484 - C21485) * C4582 + (C21486 - C21487) * C47389) *
                         C31197 +
                     ((C25950 - C25951) * C4581 + (C25952 - C25953) * C4577 +
                      C26440 * C4582 + C26441 * C47389) *
                         C47391) *
                        C47091 * C47417 +
                    (((C21485 - C21484) * C4581 + (C21487 - C21486) * C4577 +
                      (C21489 - C21488) * C4582 + (C21491 - C21490) * C47389) *
                         C31197 +
                     (C26442 * C4581 + C26443 * C4577 + C22312 * C4582 +
                      C22313 * C47389) *
                         C47391) *
                        C47091 * C47413 +
                    ((C21520 * C4581 + C21521 * C4577 +
                      (C21493 - C21492) * C4582 + (C21495 - C21494) * C47389) *
                         C31197 +
                     (C26830 * C4581 + C26831 * C4577 + C22690 * C4582 +
                      C22691 * C47389) *
                         C47391) *
                        C47091 * C47403 +
                    ((C22186 * C4581 + C22187 * C4577 +
                      (C22189 - C22188) * C4582 + (C22191 - C22190) * C47389) *
                         C31197 +
                     (C27290 * C4581 + C27291 * C4577 +
                      (C22692 - C22693) * C4582 + (C22694 - C22695) * C47389) *
                         C47391) *
                        C47091 * C47381) *
                       C2440 +
                   ((((C21369 * C118 - C47018 * C125) * C4581 +
                      (C21369 * C128 - C47018 * C139) * C4577 +
                      (C21496 - C21497) * C4582 + (C21498 - C21499) * C47389) *
                         C31197 +
                     ((C25958 - C25959) * C4581 + (C25960 - C25961) * C4577 +
                      C26444 * C4582 + C26445 * C47389) *
                         C47391) *
                        C47091 * C47417 +
                    (((C21497 - C21496) * C4581 + (C21499 - C21498) * C4577 +
                      (C21501 - C21500) * C4582 + (C21503 - C21502) * C47389) *
                         C31197 +
                     (C26446 * C4581 + C26447 * C4577 + C22582 * C4582 +
                      C22583 * C47389) *
                         C47391) *
                        C47091 * C47413 +
                    ((C21522 * C4581 + C21523 * C4577 +
                      (C21505 - C21504) * C4582 + (C21507 - C21506) * C47389) *
                         C31197 +
                     (C27158 * C4581 + C27159 * C4577 +
                      (C22584 - C22585) * C4582 + (C22586 - C22587) * C47389) *
                         C47391) *
                        C47091 * C47403 +
                    ((C22430 * C4581 + C22431 * C4577 +
                      (C22433 - C22432) * C4582 + (C22435 - C22434) * C47389) *
                         C31197 +
                     ((C22585 - C22584) * C4581 + (C22587 - C22586) * C4577 +
                      (C47018 * C6312 - C21369 * C6310) * C4582 +
                      (C47018 * C6316 - C21369 * C6314) * C47389) *
                         C47391) *
                        C47091 * C47381) *
                       C47056)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((((C47018 * C124 - C21369 * C117) * C4581 +
                      (C47018 * C138 - C21369 * C127) * C4577 +
                      (C21484 - C21485) * C4582 + (C21486 - C21487) * C47389) *
                         C31197 +
                     ((C25950 - C25951) * C4581 + (C25952 - C25953) * C4577 +
                      C26440 * C4582 + C26441 * C47389) *
                         C47391) *
                        C47091 * C2332 +
                    (((C21485 - C21484) * C4581 + (C21487 - C21486) * C4577 +
                      (C21489 - C21488) * C4582 + (C21491 - C21490) * C47389) *
                         C31197 +
                     (C26442 * C4581 + C26443 * C4577 + C22312 * C4582 +
                      C22313 * C47389) *
                         C47391) *
                        C47091 * C47136) *
                       C47416 +
                   ((((C21369 * C118 - C47018 * C125) * C4581 +
                      (C21369 * C128 - C47018 * C139) * C4577 +
                      (C21496 - C21497) * C4582 + (C21498 - C21499) * C47389) *
                         C31197 +
                     ((C25958 - C25959) * C4581 + (C25960 - C25961) * C4577 +
                      C26444 * C4582 + C26445 * C47389) *
                         C47391) *
                        C47091 * C2332 +
                    (((C21497 - C21496) * C4581 + (C21499 - C21498) * C4577 +
                      (C21501 - C21500) * C4582 + (C21503 - C21502) * C47389) *
                         C31197 +
                     (C26446 * C4581 + C26447 * C4577 + C22582 * C4582 +
                      C22583 * C47389) *
                         C47391) *
                        C47091 * C47136) *
                       C47409 +
                   ((((C47018 * C126 - C21369 * C119) * C4581 +
                      (C47018 * C140 - C21369 * C129) * C4577 +
                      (C21508 - C21509) * C4582 + (C21510 - C21511) * C47389) *
                         C31197 +
                     ((C25966 - C25967) * C4581 + (C25968 - C25969) * C4577 +
                      C26448 * C4582 + C26449 * C47389) *
                         C47391) *
                        C47091 * C2332 +
                    (((C21509 - C21508) * C4581 + (C21511 - C21510) * C4577 +
                      (C21513 - C21512) * C4582 + (C21515 - C21514) * C47389) *
                         C31197 +
                     (C26450 * C4581 + C26451 * C4577 +
                      (C22006 - C22007) * C4582 + (C22008 - C22009) * C47389) *
                         C47391) *
                        C47091 * C47136) *
                       C47396 +
                   ((((C21369 * C120 - C47018 * C130) * C4581 +
                      (C21369 * C131 - C47018 * C141) * C4577 +
                      (C21734 - C21735) * C4582 + (C21736 - C21737) * C47389) *
                         C31197 +
                     ((C26242 - C26243) * C4581 + (C26244 - C26245) * C4577 +
                      (C26108 - C26109) * C4582 + (C26110 - C26111) * C47389) *
                         C47391) *
                        C47091 * C2332 +
                    (((C21735 - C21734) * C4581 + (C21737 - C21736) * C4577 +
                      (C21739 - C21738) * C4582 + (C21741 - C21740) * C47389) *
                         C31197 +
                     ((C26109 - C26108) * C4581 + (C26111 - C26110) * C4577 +
                      (C47018 * C1441 - C21369 * C1440) * C4582 +
                      (C47018 * C1443 - C21369 * C1442) * C47389) *
                         C47391) *
                        C47091 * C47136) *
                       C47375)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  ((((((C47018 * C124 - C21369 * C117) * C4581 +
                       (C47018 * C138 - C21369 * C127) * C4577 +
                       (C21484 - C21485) * C4582 + (C21486 - C21487) * C47389) *
                          C31197 +
                      ((C25950 - C25951) * C4581 + (C25952 - C25953) * C4577 +
                       C26440 * C4582 + C26441 * C47389) *
                          C47391) *
                         C47411 +
                     (((C25951 - C25950) * C4581 + (C25953 - C25952) * C4577 +
                       C26442 * C4582 + C26443 * C47389) *
                          C31197 +
                      ((C25954 - C25955) * C4581 + (C25956 - C25957) * C4577 +
                       C26826 * C4582 + C26827 * C47389) *
                          C47391) *
                         C47400 +
                     (((C25955 - C25954) * C4581 + (C25957 - C25956) * C4577 +
                       C26828 * C4582 + C26829 * C47389) *
                          C31197 +
                      ((C27670 - C27671) * C4581 + (C27672 - C27673) * C4577 +
                       C28148 * C4582 + C28149 * C47389) *
                          C47391) *
                         C47374) *
                        C2332 +
                    ((((C21485 - C21484) * C4581 + (C21487 - C21486) * C4577 +
                       (C21489 - C21488) * C4582 + (C21491 - C21490) * C47389) *
                          C31197 +
                      (C26442 * C4581 + C26443 * C4577 + C22312 * C4582 +
                       C22313 * C47389) *
                          C47391) *
                         C47411 +
                     ((C26440 * C4581 + C26441 * C4577 + C26830 * C4582 +
                       C26831 * C47389) *
                          C31197 +
                      (C26828 * C4581 + C26829 * C4577 + C22330 * C4582 +
                       C22331 * C47389) *
                          C47391) *
                         C47400 +
                     ((C26826 * C4581 + C26827 * C4577 + C26832 * C4582 +
                       C26833 * C47389) *
                          C31197 +
                      (C28150 * C4581 + C28151 * C4577 +
                       (C23340 - C23341) * C4582 + (C23342 - C23343) * C47389) *
                          C47391) *
                         C47374) *
                        C47136) *
                       C2440 +
                   (((((C21369 * C118 - C47018 * C125) * C4581 +
                       (C21369 * C128 - C47018 * C139) * C4577 +
                       (C21496 - C21497) * C4582 + (C21498 - C21499) * C47389) *
                          C31197 +
                      ((C25958 - C25959) * C4581 + (C25960 - C25961) * C4577 +
                       C26444 * C4582 + C26445 * C47389) *
                          C47391) *
                         C47411 +
                     (((C25959 - C25958) * C4581 + (C25961 - C25960) * C4577 +
                       C26446 * C4582 + C26447 * C47389) *
                          C31197 +
                      ((C25962 - C25963) * C4581 + (C25964 - C25965) * C4577 +
                       C27876 * C4582 + C27877 * C47389) *
                          C47391) *
                         C47400 +
                     (((C25963 - C25962) * C4581 + (C25965 - C25964) * C4577 +
                       C27878 * C4582 + C27879 * C47389) *
                          C31197 +
                      ((C28014 - C28015) * C4581 + (C28016 - C28017) * C4577 +
                       (C27880 - C27881) * C4582 + (C27882 - C27883) * C47389) *
                          C47391) *
                         C47374) *
                        C2332 +
                    ((((C21497 - C21496) * C4581 + (C21499 - C21498) * C4577 +
                       (C21501 - C21500) * C4582 + (C21503 - C21502) * C47389) *
                          C31197 +
                      (C26446 * C4581 + C26447 * C4577 + C22582 * C4582 +
                       C22583 * C47389) *
                          C47391) *
                         C47411 +
                     ((C26444 * C4581 + C26445 * C4577 + C27158 * C4582 +
                       C27159 * C47389) *
                          C31197 +
                      (C27878 * C4581 + C27879 * C4577 +
                       (C23132 - C23133) * C4582 + (C23134 - C23135) * C47389) *
                          C47391) *
                         C47400 +
                     ((C27876 * C4581 + C27877 * C4577 +
                       (C23133 - C23132) * C4582 + (C23135 - C23134) * C47389) *
                          C31197 +
                      ((C27881 - C27880) * C4581 + (C27883 - C27882) * C4577 +
                       (C47018 * C7172 - C21369 * C7170) * C4582 +
                       (C47018 * C7176 - C21369 * C7174) * C47389) *
                          C47391) *
                         C47374) *
                        C47136) *
                       C47056)) /
                     (p * q * std::sqrt(p + q));
    d2ee[178] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((((C47018 * C124 - C21369 * C117) * C4581 +
                       (C47018 * C138 - C21369 * C127) * C4577 +
                       (C21484 - C21485) * C4582 + (C21486 - C21487) * C47389) *
                          C31197 +
                      ((C25950 - C25951) * C4581 + (C25952 - C25953) * C4577 +
                       C26440 * C4582 + C26441 * C47389) *
                          C47391) *
                         C47340 +
                     (((C25951 - C25950) * C4581 + (C25953 - C25952) * C4577 +
                       C26442 * C4582 + C26443 * C47389) *
                          C31197 +
                      ((C25954 - C25955) * C4581 + (C25956 - C25957) * C4577 +
                       C26826 * C4582 + C26827 * C47389) *
                          C47391) *
                         C47178) *
                        C2332 +
                    ((((C21485 - C21484) * C4581 + (C21487 - C21486) * C4577 +
                       (C21489 - C21488) * C4582 + (C21491 - C21490) * C47389) *
                          C31197 +
                      (C26442 * C4581 + C26443 * C4577 + C22312 * C4582 +
                       C22313 * C47389) *
                          C47391) *
                         C47340 +
                     ((C26440 * C4581 + C26441 * C4577 + C26830 * C4582 +
                       C26831 * C47389) *
                          C31197 +
                      (C26828 * C4581 + C26829 * C4577 + C22330 * C4582 +
                       C22331 * C47389) *
                          C47391) *
                         C47178) *
                        C47136) *
                       C47050 +
                   (((((C21369 * C118 - C47018 * C125) * C4581 +
                       (C21369 * C128 - C47018 * C139) * C4577 +
                       (C21496 - C21497) * C4582 + (C21498 - C21499) * C47389) *
                          C31197 +
                      ((C25958 - C25959) * C4581 + (C25960 - C25961) * C4577 +
                       C26444 * C4582 + C26445 * C47389) *
                          C47391) *
                         C47340 +
                     (((C25959 - C25958) * C4581 + (C25961 - C25960) * C4577 +
                       C26446 * C4582 + C26447 * C47389) *
                          C31197 +
                      ((C25962 - C25963) * C4581 + (C25964 - C25965) * C4577 +
                       C27876 * C4582 + C27877 * C47389) *
                          C47391) *
                         C47178) *
                        C2332 +
                    ((((C21497 - C21496) * C4581 + (C21499 - C21498) * C4577 +
                       (C21501 - C21500) * C4582 + (C21503 - C21502) * C47389) *
                          C31197 +
                      (C26446 * C4581 + C26447 * C4577 + C22582 * C4582 +
                       C22583 * C47389) *
                          C47391) *
                         C47340 +
                     ((C26444 * C4581 + C26445 * C4577 + C27158 * C4582 +
                       C27159 * C47389) *
                          C31197 +
                      (C27878 * C4581 + C27879 * C4577 +
                       (C23132 - C23133) * C4582 + (C23134 - C23135) * C47389) *
                          C47391) *
                         C47178) *
                        C47136) *
                       C47059 +
                   (((((C47018 * C126 - C21369 * C119) * C4581 +
                       (C47018 * C140 - C21369 * C129) * C4577 +
                       (C21508 - C21509) * C4582 + (C21510 - C21511) * C47389) *
                          C31197 +
                      ((C25966 - C25967) * C4581 + (C25968 - C25969) * C4577 +
                       C26448 * C4582 + C26449 * C47389) *
                          C47391) *
                         C47340 +
                     (((C25967 - C25966) * C4581 + (C25969 - C25968) * C4577 +
                       C26450 * C4582 + C26451 * C47389) *
                          C31197 +
                      ((C25970 - C25971) * C4581 + (C25972 - C25973) * C4577 +
                       (C25974 - C25975) * C4582 + (C25976 - C25977) * C47389) *
                          C47391) *
                         C47178) *
                        C2332 +
                    ((((C21509 - C21508) * C4581 + (C21511 - C21510) * C4577 +
                       (C21513 - C21512) * C4582 + (C21515 - C21514) * C47389) *
                          C31197 +
                      (C26450 * C4581 + C26451 * C4577 +
                       (C22006 - C22007) * C4582 + (C22008 - C22009) * C47389) *
                          C47391) *
                         C47340 +
                     ((C26448 * C4581 + C26449 * C4577 +
                       (C22007 - C22006) * C4582 + (C22009 - C22008) * C47389) *
                          C31197 +
                      ((C25975 - C25974) * C4581 + (C25977 - C25976) * C4577 +
                       (C47018 * C1173 - C21369 * C1158) * C4582 +
                       (C47018 * C1185 - C21369 * C1176) * C47389) *
                          C47391) *
                         C47178) *
                        C47136) *
                       C2703)) /
                 (p * q * std::sqrt(p + q));
    d2ee[179] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((((C47018 * C124 - C21369 * C117) * C4581 +
                      (C47018 * C138 - C21369 * C127) * C4577 +
                      (C21484 - C21485) * C4582 + (C21486 - C21487) * C47389) *
                         C31197 +
                     ((C25950 - C25951) * C4581 + (C25952 - C25953) * C4577 +
                      C26440 * C4582 + C26441 * C47389) *
                         C47391) *
                        C47091 * C2332 +
                    (((C21485 - C21484) * C4581 + (C21487 - C21486) * C4577 +
                      (C21489 - C21488) * C4582 + (C21491 - C21490) * C47389) *
                         C31197 +
                     (C26442 * C4581 + C26443 * C4577 + C22312 * C4582 +
                      C22313 * C47389) *
                         C47391) *
                        C47091 * C47136) *
                       C47416 +
                   ((((C21369 * C118 - C47018 * C125) * C4581 +
                      (C21369 * C128 - C47018 * C139) * C4577 +
                      (C21496 - C21497) * C4582 + (C21498 - C21499) * C47389) *
                         C31197 +
                     ((C25958 - C25959) * C4581 + (C25960 - C25961) * C4577 +
                      C26444 * C4582 + C26445 * C47389) *
                         C47391) *
                        C47091 * C2332 +
                    (((C21497 - C21496) * C4581 + (C21499 - C21498) * C4577 +
                      (C21501 - C21500) * C4582 + (C21503 - C21502) * C47389) *
                         C31197 +
                     (C26446 * C4581 + C26447 * C4577 + C22582 * C4582 +
                      C22583 * C47389) *
                         C47391) *
                        C47091 * C47136) *
                       C47409 +
                   ((((C47018 * C126 - C21369 * C119) * C4581 +
                      (C47018 * C140 - C21369 * C129) * C4577 +
                      (C21508 - C21509) * C4582 + (C21510 - C21511) * C47389) *
                         C31197 +
                     ((C25966 - C25967) * C4581 + (C25968 - C25969) * C4577 +
                      C26448 * C4582 + C26449 * C47389) *
                         C47391) *
                        C47091 * C2332 +
                    (((C21509 - C21508) * C4581 + (C21511 - C21510) * C4577 +
                      (C21513 - C21512) * C4582 + (C21515 - C21514) * C47389) *
                         C31197 +
                     (C26450 * C4581 + C26451 * C4577 +
                      (C22006 - C22007) * C4582 + (C22008 - C22009) * C47389) *
                         C47391) *
                        C47091 * C47136) *
                       C47396 +
                   ((((C21369 * C120 - C47018 * C130) * C4581 +
                      (C21369 * C131 - C47018 * C141) * C4577 +
                      (C21734 - C21735) * C4582 + (C21736 - C21737) * C47389) *
                         C31197 +
                     ((C26242 - C26243) * C4581 + (C26244 - C26245) * C4577 +
                      (C26108 - C26109) * C4582 + (C26110 - C26111) * C47389) *
                         C47391) *
                        C47091 * C2332 +
                    (((C21735 - C21734) * C4581 + (C21737 - C21736) * C4577 +
                      (C21739 - C21738) * C4582 + (C21741 - C21740) * C47389) *
                         C31197 +
                     ((C26109 - C26108) * C4581 + (C26111 - C26110) * C4577 +
                      (C47018 * C1441 - C21369 * C1440) * C4582 +
                      (C47018 * C1443 - C21369 * C1442) * C47389) *
                         C47391) *
                        C47091 * C47136) *
                       C47375)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((((C47018 * C124 - C21369 * C117) * C4581 +
                      (C47018 * C138 - C21369 * C127) * C4577 +
                      (C21484 - C21485) * C4582 + (C21486 - C21487) * C47389) *
                         C31197 +
                     ((C25950 - C25951) * C4581 + (C25952 - C25953) * C4577 +
                      C26440 * C4582 + C26441 * C47389) *
                         C47391) *
                        C47091 * C47417 +
                    (((C21485 - C21484) * C4581 + (C21487 - C21486) * C4577 +
                      (C21489 - C21488) * C4582 + (C21491 - C21490) * C47389) *
                         C31197 +
                     (C26442 * C4581 + C26443 * C4577 + C22312 * C4582 +
                      C22313 * C47389) *
                         C47391) *
                        C47091 * C47413 +
                    ((C21520 * C4581 + C21521 * C4577 +
                      (C21493 - C21492) * C4582 + (C21495 - C21494) * C47389) *
                         C31197 +
                     (C26830 * C4581 + C26831 * C4577 + C22690 * C4582 +
                      C22691 * C47389) *
                         C47391) *
                        C47091 * C47403 +
                    ((C22186 * C4581 + C22187 * C4577 +
                      (C22189 - C22188) * C4582 + (C22191 - C22190) * C47389) *
                         C31197 +
                     (C27290 * C4581 + C27291 * C4577 +
                      (C22692 - C22693) * C4582 + (C22694 - C22695) * C47389) *
                         C47391) *
                        C47091 * C47381) *
                       C2440 +
                   ((((C21369 * C118 - C47018 * C125) * C4581 +
                      (C21369 * C128 - C47018 * C139) * C4577 +
                      (C21496 - C21497) * C4582 + (C21498 - C21499) * C47389) *
                         C31197 +
                     ((C25958 - C25959) * C4581 + (C25960 - C25961) * C4577 +
                      C26444 * C4582 + C26445 * C47389) *
                         C47391) *
                        C47091 * C47417 +
                    (((C21497 - C21496) * C4581 + (C21499 - C21498) * C4577 +
                      (C21501 - C21500) * C4582 + (C21503 - C21502) * C47389) *
                         C31197 +
                     (C26446 * C4581 + C26447 * C4577 + C22582 * C4582 +
                      C22583 * C47389) *
                         C47391) *
                        C47091 * C47413 +
                    ((C21522 * C4581 + C21523 * C4577 +
                      (C21505 - C21504) * C4582 + (C21507 - C21506) * C47389) *
                         C31197 +
                     (C27158 * C4581 + C27159 * C4577 +
                      (C22584 - C22585) * C4582 + (C22586 - C22587) * C47389) *
                         C47391) *
                        C47091 * C47403 +
                    ((C22430 * C4581 + C22431 * C4577 +
                      (C22433 - C22432) * C4582 + (C22435 - C22434) * C47389) *
                         C31197 +
                     ((C22585 - C22584) * C4581 + (C22587 - C22586) * C4577 +
                      (C47018 * C6312 - C21369 * C6310) * C4582 +
                      (C47018 * C6316 - C21369 * C6314) * C47389) *
                         C47391) *
                        C47091 * C47381) *
                       C47056)) /
                     (p * q * std::sqrt(p + q));
    d2ee[180] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((((C47018 * C124 - C21369 * C117) * C4581 +
                       (C47018 * C138 - C21369 * C127) * C4577 +
                       (C21484 - C21485) * C4582 + (C21486 - C21487) * C47389) *
                          C31197 +
                      ((C25950 - C25951) * C4581 + (C25952 - C25953) * C4577 +
                       C26440 * C4582 + C26441 * C47389) *
                          C47391) *
                         C3094 +
                     (((C25951 - C25950) * C4581 + (C25953 - C25952) * C4577 +
                       C26442 * C4582 + C26443 * C47389) *
                          C31197 +
                      ((C25954 - C25955) * C4581 + (C25956 - C25957) * C4577 +
                       C26826 * C4582 + C26827 * C47389) *
                          C47391) *
                         C47178) *
                        C47132 +
                    ((((C21485 - C21484) * C4581 + (C21487 - C21486) * C4577 +
                       (C21489 - C21488) * C4582 + (C21491 - C21490) * C47389) *
                          C31197 +
                      (C26442 * C4581 + C26443 * C4577 + C22312 * C4582 +
                       C22313 * C47389) *
                          C47391) *
                         C3094 +
                     ((C26440 * C4581 + C26441 * C4577 + C26830 * C4582 +
                       C26831 * C47389) *
                          C31197 +
                      (C26828 * C4581 + C26829 * C4577 + C22330 * C4582 +
                       C22331 * C47389) *
                          C47391) *
                         C47178) *
                        C47139 +
                    (((C21520 * C4581 + C21521 * C4577 +
                       (C21493 - C21492) * C4582 + (C21495 - C21494) * C47389) *
                          C31197 +
                      (C26830 * C4581 + C26831 * C4577 + C22690 * C4582 +
                       C22691 * C47389) *
                          C47391) *
                         C3094 +
                     ((C22312 * C4581 + C22313 * C4577 + C27290 * C4582 +
                       C27291 * C47389) *
                          C31197 +
                      (C26832 * C4581 + C26833 * C4577 +
                       (C22326 - C22327) * C4582 + (C22328 - C22329) * C47389) *
                          C47391) *
                         C47178) *
                        C2700) *
                       C47325 +
                   (((((C21369 * C118 - C47018 * C125) * C4581 +
                       (C21369 * C128 - C47018 * C139) * C4577 +
                       (C21496 - C21497) * C4582 + (C21498 - C21499) * C47389) *
                          C31197 +
                      ((C25958 - C25959) * C4581 + (C25960 - C25961) * C4577 +
                       C26444 * C4582 + C26445 * C47389) *
                          C47391) *
                         C3094 +
                     (((C25959 - C25958) * C4581 + (C25961 - C25960) * C4577 +
                       C26446 * C4582 + C26447 * C47389) *
                          C31197 +
                      ((C25962 - C25963) * C4581 + (C25964 - C25965) * C4577 +
                       C27876 * C4582 + C27877 * C47389) *
                          C47391) *
                         C47178) *
                        C47132 +
                    ((((C21497 - C21496) * C4581 + (C21499 - C21498) * C4577 +
                       (C21501 - C21500) * C4582 + (C21503 - C21502) * C47389) *
                          C31197 +
                      (C26446 * C4581 + C26447 * C4577 + C22582 * C4582 +
                       C22583 * C47389) *
                          C47391) *
                         C3094 +
                     ((C26444 * C4581 + C26445 * C4577 + C27158 * C4582 +
                       C27159 * C47389) *
                          C31197 +
                      (C27878 * C4581 + C27879 * C4577 +
                       (C23132 - C23133) * C4582 + (C23134 - C23135) * C47389) *
                          C47391) *
                         C47178) *
                        C47139 +
                    (((C21522 * C4581 + C21523 * C4577 +
                       (C21505 - C21504) * C4582 + (C21507 - C21506) * C47389) *
                          C31197 +
                      (C27158 * C4581 + C27159 * C4577 +
                       (C22584 - C22585) * C4582 + (C22586 - C22587) * C47389) *
                          C47391) *
                         C3094 +
                     ((C22582 * C4581 + C22583 * C4577 +
                       (C22585 - C22584) * C4582 + (C22587 - C22586) * C47389) *
                          C31197 +
                      ((C23133 - C23132) * C4581 + (C23135 - C23134) * C4577 +
                       (C47018 * C5810 - C21369 * C5808) * C4582 +
                       (C47018 * C5814 - C21369 * C5812) * C47389) *
                          C47391) *
                         C47178) *
                        C2700) *
                       C47056)) /
                 (p * q * std::sqrt(p + q));
    d2ee[181] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((((C47018 * C124 - C21369 * C117) * C4581 +
                      (C47018 * C138 - C21369 * C127) * C4577 +
                      (C21484 - C21485) * C4582 + (C21486 - C21487) * C47389) *
                         C31197 +
                     ((C25950 - C25951) * C4581 + (C25952 - C25953) * C4577 +
                      C26440 * C4582 + C26441 * C47389) *
                         C47391) *
                        C47174 +
                    (((C25951 - C25950) * C4581 + (C25953 - C25952) * C4577 +
                      C26442 * C4582 + C26443 * C47389) *
                         C31197 +
                     ((C25954 - C25955) * C4581 + (C25956 - C25957) * C4577 +
                      C26826 * C4582 + C26827 * C47389) *
                         C47391) *
                        C47181 +
                    (((C25955 - C25954) * C4581 + (C25957 - C25956) * C4577 +
                      C26828 * C4582 + C26829 * C47389) *
                         C31197 +
                     ((C27670 - C27671) * C4581 + (C27672 - C27673) * C4577 +
                      C28148 * C4582 + C28149 * C47389) *
                         C47391) *
                        C3602) *
                       C47132 +
                   ((((C21485 - C21484) * C4581 + (C21487 - C21486) * C4577 +
                      (C21489 - C21488) * C4582 + (C21491 - C21490) * C47389) *
                         C31197 +
                     (C26442 * C4581 + C26443 * C4577 + C22312 * C4582 +
                      C22313 * C47389) *
                         C47391) *
                        C47174 +
                    ((C26440 * C4581 + C26441 * C4577 + C26830 * C4582 +
                      C26831 * C47389) *
                         C31197 +
                     (C26828 * C4581 + C26829 * C4577 + C22330 * C4582 +
                      C22331 * C47389) *
                         C47391) *
                        C47181 +
                    ((C26826 * C4581 + C26827 * C4577 + C26832 * C4582 +
                      C26833 * C47389) *
                         C31197 +
                     (C28150 * C4581 + C28151 * C4577 +
                      (C23340 - C23341) * C4582 + (C23342 - C23343) * C47389) *
                         C47391) *
                        C3602) *
                       C47139 +
                   (((C21520 * C4581 + C21521 * C4577 +
                      (C21493 - C21492) * C4582 + (C21495 - C21494) * C47389) *
                         C31197 +
                     (C26830 * C4581 + C26831 * C4577 + C22690 * C4582 +
                      C22691 * C47389) *
                         C47391) *
                        C47174 +
                    ((C22312 * C4581 + C22313 * C4577 + C27290 * C4582 +
                      C27291 * C47389) *
                         C31197 +
                     (C26832 * C4581 + C26833 * C4577 +
                      (C22326 - C22327) * C4582 + (C22328 - C22329) * C47389) *
                         C47391) *
                        C47181 +
                    ((C22330 * C4581 + C22331 * C4577 +
                      (C22327 - C22326) * C4582 + (C22329 - C22328) * C47389) *
                         C31197 +
                     ((C23341 - C23340) * C4581 + (C23343 - C23342) * C4577 +
                      (C47018 * C23332 - C21369 * C23331) * C4582 +
                      (C47018 * C23334 - C21369 * C23333) * C47389) *
                         C47391) *
                        C3602) *
                       C2700) *
                  C47045) /
                 (p * q * std::sqrt(p + q));
    d2ee[182] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((((C47018 * C124 - C21369 * C117) * C4581 +
                      (C47018 * C138 - C21369 * C127) * C4577 +
                      (C21484 - C21485) * C4582 + (C21486 - C21487) * C47389) *
                         C31197 +
                     ((C25950 - C25951) * C4581 + (C25952 - C25953) * C4577 +
                      C26440 * C4582 + C26441 * C47389) *
                         C47391) *
                        C3094 +
                    (((C25951 - C25950) * C4581 + (C25953 - C25952) * C4577 +
                      C26442 * C4582 + C26443 * C47389) *
                         C31197 +
                     ((C25954 - C25955) * C4581 + (C25956 - C25957) * C4577 +
                      C26826 * C4582 + C26827 * C47389) *
                         C47391) *
                        C47178) *
                       C47417 +
                   ((((C21485 - C21484) * C4581 + (C21487 - C21486) * C4577 +
                      (C21489 - C21488) * C4582 + (C21491 - C21490) * C47389) *
                         C31197 +
                     (C26442 * C4581 + C26443 * C4577 + C22312 * C4582 +
                      C22313 * C47389) *
                         C47391) *
                        C3094 +
                    ((C26440 * C4581 + C26441 * C4577 + C26830 * C4582 +
                      C26831 * C47389) *
                         C31197 +
                     (C26828 * C4581 + C26829 * C4577 + C22330 * C4582 +
                      C22331 * C47389) *
                         C47391) *
                        C47178) *
                       C47413 +
                   (((C21520 * C4581 + C21521 * C4577 +
                      (C21493 - C21492) * C4582 + (C21495 - C21494) * C47389) *
                         C31197 +
                     (C26830 * C4581 + C26831 * C4577 + C22690 * C4582 +
                      C22691 * C47389) *
                         C47391) *
                        C3094 +
                    ((C22312 * C4581 + C22313 * C4577 + C27290 * C4582 +
                      C27291 * C47389) *
                         C31197 +
                     (C26832 * C4581 + C26833 * C4577 +
                      (C22326 - C22327) * C4582 + (C22328 - C22329) * C47389) *
                         C47391) *
                        C47178) *
                       C47403 +
                   (((C22186 * C4581 + C22187 * C4577 +
                      (C22189 - C22188) * C4582 + (C22191 - C22190) * C47389) *
                         C31197 +
                     (C27290 * C4581 + C27291 * C4577 +
                      (C22692 - C22693) * C4582 + (C22694 - C22695) * C47389) *
                         C47391) *
                        C3094 +
                    ((C22690 * C4581 + C22691 * C4577 +
                      (C22693 - C22692) * C4582 + (C22695 - C22694) * C47389) *
                         C31197 +
                     ((C22327 - C22326) * C4581 + (C22329 - C22328) * C4577 +
                      (C47018 * C22308 - C21369 * C22307) * C4582 +
                      (C47018 * C22310 - C21369 * C22309) * C47389) *
                         C47391) *
                        C47178) *
                       C47381) *
                  C47045) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((((C47018 * C124 - C21369 * C117) * C4581 +
                       (C47018 * C138 - C21369 * C127) * C4577 +
                       (C21484 - C21485) * C4582 + (C21486 - C21487) * C47389) *
                          C31197 +
                      ((C25950 - C25951) * C4581 + (C25952 - C25953) * C4577 +
                       C26440 * C4582 + C26441 * C47389) *
                          C47391) *
                         C3094 +
                     (((C25951 - C25950) * C4581 + (C25953 - C25952) * C4577 +
                       C26442 * C4582 + C26443 * C47389) *
                          C31197 +
                      ((C25954 - C25955) * C4581 + (C25956 - C25957) * C4577 +
                       C26826 * C4582 + C26827 * C47389) *
                          C47391) *
                         C47178) *
                        C2332 +
                    ((((C21485 - C21484) * C4581 + (C21487 - C21486) * C4577 +
                       (C21489 - C21488) * C4582 + (C21491 - C21490) * C47389) *
                          C31197 +
                      (C26442 * C4581 + C26443 * C4577 + C22312 * C4582 +
                       C22313 * C47389) *
                          C47391) *
                         C3094 +
                     ((C26440 * C4581 + C26441 * C4577 + C26830 * C4582 +
                       C26831 * C47389) *
                          C31197 +
                      (C26828 * C4581 + C26829 * C4577 + C22330 * C4582 +
                       C22331 * C47389) *
                          C47391) *
                         C47178) *
                        C47136) *
                       C47407 +
                   (((((C21369 * C118 - C47018 * C125) * C4581 +
                       (C21369 * C128 - C47018 * C139) * C4577 +
                       (C21496 - C21497) * C4582 + (C21498 - C21499) * C47389) *
                          C31197 +
                      ((C25958 - C25959) * C4581 + (C25960 - C25961) * C4577 +
                       C26444 * C4582 + C26445 * C47389) *
                          C47391) *
                         C3094 +
                     (((C25959 - C25958) * C4581 + (C25961 - C25960) * C4577 +
                       C26446 * C4582 + C26447 * C47389) *
                          C31197 +
                      ((C25962 - C25963) * C4581 + (C25964 - C25965) * C4577 +
                       C27876 * C4582 + C27877 * C47389) *
                          C47391) *
                         C47178) *
                        C2332 +
                    ((((C21497 - C21496) * C4581 + (C21499 - C21498) * C4577 +
                       (C21501 - C21500) * C4582 + (C21503 - C21502) * C47389) *
                          C31197 +
                      (C26446 * C4581 + C26447 * C4577 + C22582 * C4582 +
                       C22583 * C47389) *
                          C47391) *
                         C3094 +
                     ((C26444 * C4581 + C26445 * C4577 + C27158 * C4582 +
                       C27159 * C47389) *
                          C31197 +
                      (C27878 * C4581 + C27879 * C4577 +
                       (C23132 - C23133) * C4582 + (C23134 - C23135) * C47389) *
                          C47391) *
                         C47178) *
                        C47136) *
                       C47394 +
                   (((((C47018 * C126 - C21369 * C119) * C4581 +
                       (C47018 * C140 - C21369 * C129) * C4577 +
                       (C21508 - C21509) * C4582 + (C21510 - C21511) * C47389) *
                          C31197 +
                      ((C25966 - C25967) * C4581 + (C25968 - C25969) * C4577 +
                       C26448 * C4582 + C26449 * C47389) *
                          C47391) *
                         C3094 +
                     (((C25967 - C25966) * C4581 + (C25969 - C25968) * C4577 +
                       C26450 * C4582 + C26451 * C47389) *
                          C31197 +
                      ((C25970 - C25971) * C4581 + (C25972 - C25973) * C4577 +
                       (C25974 - C25975) * C4582 + (C25976 - C25977) * C47389) *
                          C47391) *
                         C47178) *
                        C2332 +
                    ((((C21509 - C21508) * C4581 + (C21511 - C21510) * C4577 +
                       (C21513 - C21512) * C4582 + (C21515 - C21514) * C47389) *
                          C31197 +
                      (C26450 * C4581 + C26451 * C4577 +
                       (C22006 - C22007) * C4582 + (C22008 - C22009) * C47389) *
                          C47391) *
                         C3094 +
                     ((C26448 * C4581 + C26449 * C4577 +
                       (C22007 - C22006) * C4582 + (C22009 - C22008) * C47389) *
                          C31197 +
                      ((C25975 - C25974) * C4581 + (C25977 - C25976) * C4577 +
                       (C47018 * C1173 - C21369 * C1158) * C4582 +
                       (C47018 * C1185 - C21369 * C1176) * C47389) *
                          C47391) *
                         C47178) *
                        C47136) *
                       C47365)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  (((((C47018 * C124 - C21369 * C117) * C4581 +
                      (C47018 * C138 - C21369 * C127) * C4577 +
                      (C21484 - C21485) * C4582 + (C21486 - C21487) * C47389) *
                         C31197 +
                     ((C25950 - C25951) * C4581 + (C25952 - C25953) * C4577 +
                      C26440 * C4582 + C26441 * C47389) *
                         C47391) *
                        C47418 +
                    (((C25951 - C25950) * C4581 + (C25953 - C25952) * C4577 +
                      C26442 * C4582 + C26443 * C47389) *
                         C31197 +
                     ((C25954 - C25955) * C4581 + (C25956 - C25957) * C4577 +
                      C26826 * C4582 + C26827 * C47389) *
                         C47391) *
                        C47415 +
                    (((C25955 - C25954) * C4581 + (C25957 - C25956) * C4577 +
                      C26828 * C4582 + C26829 * C47389) *
                         C31197 +
                     ((C27670 - C27671) * C4581 + (C27672 - C27673) * C4577 +
                      C28148 * C4582 + C28149 * C47389) *
                         C47391) *
                        C47406 +
                    (((C27671 - C27670) * C4581 + (C27673 - C27672) * C4577 +
                      C28150 * C4582 + C28151 * C47389) *
                         C31197 +
                     ((C27674 - C27675) * C4581 + (C27676 - C27677) * C4577 +
                      (C27678 - C27679) * C4582 + (C27680 - C27681) * C47389) *
                         C47391) *
                        C47387) *
                       C2332 +
                   ((((C21485 - C21484) * C4581 + (C21487 - C21486) * C4577 +
                      (C21489 - C21488) * C4582 + (C21491 - C21490) * C47389) *
                         C31197 +
                     (C26442 * C4581 + C26443 * C4577 + C22312 * C4582 +
                      C22313 * C47389) *
                         C47391) *
                        C47418 +
                    ((C26440 * C4581 + C26441 * C4577 + C26830 * C4582 +
                      C26831 * C47389) *
                         C31197 +
                     (C26828 * C4581 + C26829 * C4577 + C22330 * C4582 +
                      C22331 * C47389) *
                         C47391) *
                        C47415 +
                    ((C26826 * C4581 + C26827 * C4577 + C26832 * C4582 +
                      C26833 * C47389) *
                         C31197 +
                     (C28150 * C4581 + C28151 * C4577 +
                      (C23340 - C23341) * C4582 + (C23342 - C23343) * C47389) *
                         C47391) *
                        C47406 +
                    ((C28148 * C4581 + C28149 * C4577 +
                      (C23341 - C23340) * C4582 + (C23343 - C23342) * C47389) *
                         C31197 +
                     ((C27679 - C27678) * C4581 + (C27681 - C27680) * C4577 +
                      (C47018 * C22978 - C21369 * C22977) * C4582 +
                      (C47018 * C22980 - C21369 * C22979) * C47389) *
                         C47391) *
                        C47387) *
                       C47136) *
                  C47045) /
                     (p * q * std::sqrt(p + q));
    d2ee[183] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((((C47018 * C124 - C21369 * C117) * C4581 +
                       (C47018 * C138 - C21369 * C127) * C4577 +
                       (C21484 - C21485) * C4582 + (C21486 - C21487) * C47389) *
                          C31197 +
                      ((C25950 - C25951) * C4581 + (C25952 - C25953) * C4577 +
                       C26440 * C4582 + C26441 * C47389) *
                          C47391) *
                         C47174 +
                     (((C25951 - C25950) * C4581 + (C25953 - C25952) * C4577 +
                       C26442 * C4582 + C26443 * C47389) *
                          C31197 +
                      ((C25954 - C25955) * C4581 + (C25956 - C25957) * C4577 +
                       C26826 * C4582 + C26827 * C47389) *
                          C47391) *
                         C47181 +
                     (((C25955 - C25954) * C4581 + (C25957 - C25956) * C4577 +
                       C26828 * C4582 + C26829 * C47389) *
                          C31197 +
                      ((C27670 - C27671) * C4581 + (C27672 - C27673) * C4577 +
                       C28148 * C4582 + C28149 * C47389) *
                          C47391) *
                         C3602) *
                        C2332 +
                    ((((C21485 - C21484) * C4581 + (C21487 - C21486) * C4577 +
                       (C21489 - C21488) * C4582 + (C21491 - C21490) * C47389) *
                          C31197 +
                      (C26442 * C4581 + C26443 * C4577 + C22312 * C4582 +
                       C22313 * C47389) *
                          C47391) *
                         C47174 +
                     ((C26440 * C4581 + C26441 * C4577 + C26830 * C4582 +
                       C26831 * C47389) *
                          C31197 +
                      (C26828 * C4581 + C26829 * C4577 + C22330 * C4582 +
                       C22331 * C47389) *
                          C47391) *
                         C47181 +
                     ((C26826 * C4581 + C26827 * C4577 + C26832 * C4582 +
                       C26833 * C47389) *
                          C31197 +
                      (C28150 * C4581 + C28151 * C4577 +
                       (C23340 - C23341) * C4582 + (C23342 - C23343) * C47389) *
                          C47391) *
                         C3602) *
                        C47136) *
                       C47325 +
                   (((((C21369 * C118 - C47018 * C125) * C4581 +
                       (C21369 * C128 - C47018 * C139) * C4577 +
                       (C21496 - C21497) * C4582 + (C21498 - C21499) * C47389) *
                          C31197 +
                      ((C25958 - C25959) * C4581 + (C25960 - C25961) * C4577 +
                       C26444 * C4582 + C26445 * C47389) *
                          C47391) *
                         C47174 +
                     (((C25959 - C25958) * C4581 + (C25961 - C25960) * C4577 +
                       C26446 * C4582 + C26447 * C47389) *
                          C31197 +
                      ((C25962 - C25963) * C4581 + (C25964 - C25965) * C4577 +
                       C27876 * C4582 + C27877 * C47389) *
                          C47391) *
                         C47181 +
                     (((C25963 - C25962) * C4581 + (C25965 - C25964) * C4577 +
                       C27878 * C4582 + C27879 * C47389) *
                          C31197 +
                      ((C28014 - C28015) * C4581 + (C28016 - C28017) * C4577 +
                       (C27880 - C27881) * C4582 + (C27882 - C27883) * C47389) *
                          C47391) *
                         C3602) *
                        C2332 +
                    ((((C21497 - C21496) * C4581 + (C21499 - C21498) * C4577 +
                       (C21501 - C21500) * C4582 + (C21503 - C21502) * C47389) *
                          C31197 +
                      (C26446 * C4581 + C26447 * C4577 + C22582 * C4582 +
                       C22583 * C47389) *
                          C47391) *
                         C47174 +
                     ((C26444 * C4581 + C26445 * C4577 + C27158 * C4582 +
                       C27159 * C47389) *
                          C31197 +
                      (C27878 * C4581 + C27879 * C4577 +
                       (C23132 - C23133) * C4582 + (C23134 - C23135) * C47389) *
                          C47391) *
                         C47181 +
                     ((C27876 * C4581 + C27877 * C4577 +
                       (C23133 - C23132) * C4582 + (C23135 - C23134) * C47389) *
                          C31197 +
                      ((C27881 - C27880) * C4581 + (C27883 - C27882) * C4577 +
                       (C47018 * C7172 - C21369 * C7170) * C4582 +
                       (C47018 * C7176 - C21369 * C7174) * C47389) *
                          C47391) *
                         C3602) *
                        C47136) *
                       C47056)) /
                 (p * q * std::sqrt(p + q));
    d2ee[184] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((((C47018 * C124 - C21369 * C117) * C4581 +
                       (C47018 * C138 - C21369 * C127) * C4577 +
                       (C21484 - C21485) * C4582 + (C21486 - C21487) * C47389) *
                          C31197 +
                      ((C25950 - C25951) * C4581 + (C25952 - C25953) * C4577 +
                       C26440 * C4582 + C26441 * C47389) *
                          C47391) *
                         C3094 +
                     (((C25951 - C25950) * C4581 + (C25953 - C25952) * C4577 +
                       C26442 * C4582 + C26443 * C47389) *
                          C31197 +
                      ((C25954 - C25955) * C4581 + (C25956 - C25957) * C4577 +
                       C26826 * C4582 + C26827 * C47389) *
                          C47391) *
                         C47178) *
                        C2332 +
                    ((((C21485 - C21484) * C4581 + (C21487 - C21486) * C4577 +
                       (C21489 - C21488) * C4582 + (C21491 - C21490) * C47389) *
                          C31197 +
                      (C26442 * C4581 + C26443 * C4577 + C22312 * C4582 +
                       C22313 * C47389) *
                          C47391) *
                         C3094 +
                     ((C26440 * C4581 + C26441 * C4577 + C26830 * C4582 +
                       C26831 * C47389) *
                          C31197 +
                      (C26828 * C4581 + C26829 * C4577 + C22330 * C4582 +
                       C22331 * C47389) *
                          C47391) *
                         C47178) *
                        C47136) *
                       C47407 +
                   (((((C21369 * C118 - C47018 * C125) * C4581 +
                       (C21369 * C128 - C47018 * C139) * C4577 +
                       (C21496 - C21497) * C4582 + (C21498 - C21499) * C47389) *
                          C31197 +
                      ((C25958 - C25959) * C4581 + (C25960 - C25961) * C4577 +
                       C26444 * C4582 + C26445 * C47389) *
                          C47391) *
                         C3094 +
                     (((C25959 - C25958) * C4581 + (C25961 - C25960) * C4577 +
                       C26446 * C4582 + C26447 * C47389) *
                          C31197 +
                      ((C25962 - C25963) * C4581 + (C25964 - C25965) * C4577 +
                       C27876 * C4582 + C27877 * C47389) *
                          C47391) *
                         C47178) *
                        C2332 +
                    ((((C21497 - C21496) * C4581 + (C21499 - C21498) * C4577 +
                       (C21501 - C21500) * C4582 + (C21503 - C21502) * C47389) *
                          C31197 +
                      (C26446 * C4581 + C26447 * C4577 + C22582 * C4582 +
                       C22583 * C47389) *
                          C47391) *
                         C3094 +
                     ((C26444 * C4581 + C26445 * C4577 + C27158 * C4582 +
                       C27159 * C47389) *
                          C31197 +
                      (C27878 * C4581 + C27879 * C4577 +
                       (C23132 - C23133) * C4582 + (C23134 - C23135) * C47389) *
                          C47391) *
                         C47178) *
                        C47136) *
                       C47394 +
                   (((((C47018 * C126 - C21369 * C119) * C4581 +
                       (C47018 * C140 - C21369 * C129) * C4577 +
                       (C21508 - C21509) * C4582 + (C21510 - C21511) * C47389) *
                          C31197 +
                      ((C25966 - C25967) * C4581 + (C25968 - C25969) * C4577 +
                       C26448 * C4582 + C26449 * C47389) *
                          C47391) *
                         C3094 +
                     (((C25967 - C25966) * C4581 + (C25969 - C25968) * C4577 +
                       C26450 * C4582 + C26451 * C47389) *
                          C31197 +
                      ((C25970 - C25971) * C4581 + (C25972 - C25973) * C4577 +
                       (C25974 - C25975) * C4582 + (C25976 - C25977) * C47389) *
                          C47391) *
                         C47178) *
                        C2332 +
                    ((((C21509 - C21508) * C4581 + (C21511 - C21510) * C4577 +
                       (C21513 - C21512) * C4582 + (C21515 - C21514) * C47389) *
                          C31197 +
                      (C26450 * C4581 + C26451 * C4577 +
                       (C22006 - C22007) * C4582 + (C22008 - C22009) * C47389) *
                          C47391) *
                         C3094 +
                     ((C26448 * C4581 + C26449 * C4577 +
                       (C22007 - C22006) * C4582 + (C22009 - C22008) * C47389) *
                          C31197 +
                      ((C25975 - C25974) * C4581 + (C25977 - C25976) * C4577 +
                       (C47018 * C1173 - C21369 * C1158) * C4582 +
                       (C47018 * C1185 - C21369 * C1176) * C47389) *
                          C47391) *
                         C47178) *
                        C47136) *
                       C47365)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((((C47018 * C124 - C21369 * C117) * C4581 +
                      (C47018 * C138 - C21369 * C127) * C4577 +
                      (C21484 - C21485) * C4582 + (C21486 - C21487) * C47389) *
                         C31197 +
                     ((C25950 - C25951) * C4581 + (C25952 - C25953) * C4577 +
                      C26440 * C4582 + C26441 * C47389) *
                         C47391) *
                        C3094 +
                    (((C25951 - C25950) * C4581 + (C25953 - C25952) * C4577 +
                      C26442 * C4582 + C26443 * C47389) *
                         C31197 +
                     ((C25954 - C25955) * C4581 + (C25956 - C25957) * C4577 +
                      C26826 * C4582 + C26827 * C47389) *
                         C47391) *
                        C47178) *
                       C47417 +
                   ((((C21485 - C21484) * C4581 + (C21487 - C21486) * C4577 +
                      (C21489 - C21488) * C4582 + (C21491 - C21490) * C47389) *
                         C31197 +
                     (C26442 * C4581 + C26443 * C4577 + C22312 * C4582 +
                      C22313 * C47389) *
                         C47391) *
                        C3094 +
                    ((C26440 * C4581 + C26441 * C4577 + C26830 * C4582 +
                      C26831 * C47389) *
                         C31197 +
                     (C26828 * C4581 + C26829 * C4577 + C22330 * C4582 +
                      C22331 * C47389) *
                         C47391) *
                        C47178) *
                       C47413 +
                   (((C21520 * C4581 + C21521 * C4577 +
                      (C21493 - C21492) * C4582 + (C21495 - C21494) * C47389) *
                         C31197 +
                     (C26830 * C4581 + C26831 * C4577 + C22690 * C4582 +
                      C22691 * C47389) *
                         C47391) *
                        C3094 +
                    ((C22312 * C4581 + C22313 * C4577 + C27290 * C4582 +
                      C27291 * C47389) *
                         C31197 +
                     (C26832 * C4581 + C26833 * C4577 +
                      (C22326 - C22327) * C4582 + (C22328 - C22329) * C47389) *
                         C47391) *
                        C47178) *
                       C47403 +
                   (((C22186 * C4581 + C22187 * C4577 +
                      (C22189 - C22188) * C4582 + (C22191 - C22190) * C47389) *
                         C31197 +
                     (C27290 * C4581 + C27291 * C4577 +
                      (C22692 - C22693) * C4582 + (C22694 - C22695) * C47389) *
                         C47391) *
                        C3094 +
                    ((C22690 * C4581 + C22691 * C4577 +
                      (C22693 - C22692) * C4582 + (C22695 - C22694) * C47389) *
                         C31197 +
                     ((C22327 - C22326) * C4581 + (C22329 - C22328) * C4577 +
                      (C47018 * C22308 - C21369 * C22307) * C4582 +
                      (C47018 * C22310 - C21369 * C22309) * C47389) *
                         C47391) *
                        C47178) *
                       C47381) *
                  C47045) /
                     (p * q * std::sqrt(p + q));
    d2ee[185] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((((C47018 * C124 - C21369 * C117) * C4581 +
                      (C47018 * C138 - C21369 * C127) * C4577 +
                      (C21484 - C21485) * C4582 + (C21486 - C21487) * C47389) *
                         C31197 +
                     ((C25950 - C25951) * C4581 + (C25952 - C25953) * C4577 +
                      C26440 * C4582 + C26441 * C47389) *
                         C47391) *
                        C47091 * C1284 +
                    (((C21485 - C21484) * C4581 + (C21487 - C21486) * C4577 +
                      (C21489 - C21488) * C4582 + (C21491 - C21490) * C47389) *
                         C31197 +
                     (C26442 * C4581 + C26443 * C4577 + C22312 * C4582 +
                      C22313 * C47389) *
                         C47391) *
                        C47091 * C1285 +
                    ((C21520 * C4581 + C21521 * C4577 +
                      (C21493 - C21492) * C4582 + (C21495 - C21494) * C47389) *
                         C31197 +
                     (C26830 * C4581 + C26831 * C4577 + C22690 * C4582 +
                      C22691 * C47389) *
                         C47391) *
                        C47091 * C1286 +
                    ((C22186 * C4581 + C22187 * C4577 +
                      (C22189 - C22188) * C4582 + (C22191 - C22190) * C47389) *
                         C31197 +
                     (C27290 * C4581 + C27291 * C4577 +
                      (C22692 - C22693) * C4582 + (C22694 - C22695) * C47389) *
                         C47391) *
                        C47091 * C47381) *
                       C47325 +
                   ((((C21369 * C118 - C47018 * C125) * C4581 +
                      (C21369 * C128 - C47018 * C139) * C4577 +
                      (C21496 - C21497) * C4582 + (C21498 - C21499) * C47389) *
                         C31197 +
                     ((C25958 - C25959) * C4581 + (C25960 - C25961) * C4577 +
                      C26444 * C4582 + C26445 * C47389) *
                         C47391) *
                        C47091 * C1284 +
                    (((C21497 - C21496) * C4581 + (C21499 - C21498) * C4577 +
                      (C21501 - C21500) * C4582 + (C21503 - C21502) * C47389) *
                         C31197 +
                     (C26446 * C4581 + C26447 * C4577 + C22582 * C4582 +
                      C22583 * C47389) *
                         C47391) *
                        C47091 * C1285 +
                    ((C21522 * C4581 + C21523 * C4577 +
                      (C21505 - C21504) * C4582 + (C21507 - C21506) * C47389) *
                         C31197 +
                     (C27158 * C4581 + C27159 * C4577 +
                      (C22584 - C22585) * C4582 + (C22586 - C22587) * C47389) *
                         C47391) *
                        C47091 * C1286 +
                    ((C22430 * C4581 + C22431 * C4577 +
                      (C22433 - C22432) * C4582 + (C22435 - C22434) * C47389) *
                         C31197 +
                     ((C22585 - C22584) * C4581 + (C22587 - C22586) * C4577 +
                      (C47018 * C6312 - C21369 * C6310) * C4582 +
                      (C47018 * C6316 - C21369 * C6314) * C47389) *
                         C47391) *
                        C47091 * C47381) *
                       C47056)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((((C47018 * C124 - C21369 * C117) * C4581 +
                      (C47018 * C138 - C21369 * C127) * C4577 +
                      (C21484 - C21485) * C4582 + (C21486 - C21487) * C47389) *
                         C31197 +
                     ((C25950 - C25951) * C4581 + (C25952 - C25953) * C4577 +
                      C26440 * C4582 + C26441 * C47389) *
                         C47391) *
                        C47091 * C47339 +
                    (((C21485 - C21484) * C4581 + (C21487 - C21486) * C4577 +
                      (C21489 - C21488) * C4582 + (C21491 - C21490) * C47389) *
                         C31197 +
                     (C26442 * C4581 + C26443 * C4577 + C22312 * C4582 +
                      C22313 * C47389) *
                         C47391) *
                        C47091 * C47136) *
                       C554 +
                   ((((C21369 * C118 - C47018 * C125) * C4581 +
                      (C21369 * C128 - C47018 * C139) * C4577 +
                      (C21496 - C21497) * C4582 + (C21498 - C21499) * C47389) *
                         C31197 +
                     ((C25958 - C25959) * C4581 + (C25960 - C25961) * C4577 +
                      C26444 * C4582 + C26445 * C47389) *
                         C47391) *
                        C47091 * C47339 +
                    (((C21497 - C21496) * C4581 + (C21499 - C21498) * C4577 +
                      (C21501 - C21500) * C4582 + (C21503 - C21502) * C47389) *
                         C31197 +
                     (C26446 * C4581 + C26447 * C4577 + C22582 * C4582 +
                      C22583 * C47389) *
                         C47391) *
                        C47091 * C47136) *
                       C555 +
                   ((((C47018 * C126 - C21369 * C119) * C4581 +
                      (C47018 * C140 - C21369 * C129) * C4577 +
                      (C21508 - C21509) * C4582 + (C21510 - C21511) * C47389) *
                         C31197 +
                     ((C25966 - C25967) * C4581 + (C25968 - C25969) * C4577 +
                      C26448 * C4582 + C26449 * C47389) *
                         C47391) *
                        C47091 * C47339 +
                    (((C21509 - C21508) * C4581 + (C21511 - C21510) * C4577 +
                      (C21513 - C21512) * C4582 + (C21515 - C21514) * C47389) *
                         C31197 +
                     (C26450 * C4581 + C26451 * C4577 +
                      (C22006 - C22007) * C4582 + (C22008 - C22009) * C47389) *
                         C47391) *
                        C47091 * C47136) *
                       C556 +
                   ((((C21369 * C120 - C47018 * C130) * C4581 +
                      (C21369 * C131 - C47018 * C141) * C4577 +
                      (C21734 - C21735) * C4582 + (C21736 - C21737) * C47389) *
                         C31197 +
                     ((C26242 - C26243) * C4581 + (C26244 - C26245) * C4577 +
                      (C26108 - C26109) * C4582 + (C26110 - C26111) * C47389) *
                         C47391) *
                        C47091 * C47339 +
                    (((C21735 - C21734) * C4581 + (C21737 - C21736) * C4577 +
                      (C21739 - C21738) * C4582 + (C21741 - C21740) * C47389) *
                         C31197 +
                     ((C26109 - C26108) * C4581 + (C26111 - C26110) * C4577 +
                      (C47018 * C1441 - C21369 * C1440) * C4582 +
                      (C47018 * C1443 - C21369 * C1442) * C47389) *
                         C47391) *
                        C47091 * C47136) *
                       C47375)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  ((((((C47018 * C124 - C21369 * C117) * C4581 +
                       (C47018 * C138 - C21369 * C127) * C4577 +
                       (C21484 - C21485) * C4582 + (C21486 - C21487) * C47389) *
                          C31197 +
                      ((C25950 - C25951) * C4581 + (C25952 - C25953) * C4577 +
                       C26440 * C4582 + C26441 * C47389) *
                          C47391) *
                         C1664 +
                     (((C25951 - C25950) * C4581 + (C25953 - C25952) * C4577 +
                       C26442 * C4582 + C26443 * C47389) *
                          C31197 +
                      ((C25954 - C25955) * C4581 + (C25956 - C25957) * C4577 +
                       C26826 * C4582 + C26827 * C47389) *
                          C47391) *
                         C1665 +
                     (((C25955 - C25954) * C4581 + (C25957 - C25956) * C4577 +
                       C26828 * C4582 + C26829 * C47389) *
                          C31197 +
                      ((C27670 - C27671) * C4581 + (C27672 - C27673) * C4577 +
                       C28148 * C4582 + C28149 * C47389) *
                          C47391) *
                         C47374) *
                        C47339 +
                    ((((C21485 - C21484) * C4581 + (C21487 - C21486) * C4577 +
                       (C21489 - C21488) * C4582 + (C21491 - C21490) * C47389) *
                          C31197 +
                      (C26442 * C4581 + C26443 * C4577 + C22312 * C4582 +
                       C22313 * C47389) *
                          C47391) *
                         C1664 +
                     ((C26440 * C4581 + C26441 * C4577 + C26830 * C4582 +
                       C26831 * C47389) *
                          C31197 +
                      (C26828 * C4581 + C26829 * C4577 + C22330 * C4582 +
                       C22331 * C47389) *
                          C47391) *
                         C1665 +
                     ((C26826 * C4581 + C26827 * C4577 + C26832 * C4582 +
                       C26833 * C47389) *
                          C31197 +
                      (C28150 * C4581 + C28151 * C4577 +
                       (C23340 - C23341) * C4582 + (C23342 - C23343) * C47389) *
                          C47391) *
                         C47374) *
                        C47136) *
                       C47325 +
                   (((((C21369 * C118 - C47018 * C125) * C4581 +
                       (C21369 * C128 - C47018 * C139) * C4577 +
                       (C21496 - C21497) * C4582 + (C21498 - C21499) * C47389) *
                          C31197 +
                      ((C25958 - C25959) * C4581 + (C25960 - C25961) * C4577 +
                       C26444 * C4582 + C26445 * C47389) *
                          C47391) *
                         C1664 +
                     (((C25959 - C25958) * C4581 + (C25961 - C25960) * C4577 +
                       C26446 * C4582 + C26447 * C47389) *
                          C31197 +
                      ((C25962 - C25963) * C4581 + (C25964 - C25965) * C4577 +
                       C27876 * C4582 + C27877 * C47389) *
                          C47391) *
                         C1665 +
                     (((C25963 - C25962) * C4581 + (C25965 - C25964) * C4577 +
                       C27878 * C4582 + C27879 * C47389) *
                          C31197 +
                      ((C28014 - C28015) * C4581 + (C28016 - C28017) * C4577 +
                       (C27880 - C27881) * C4582 + (C27882 - C27883) * C47389) *
                          C47391) *
                         C47374) *
                        C47339 +
                    ((((C21497 - C21496) * C4581 + (C21499 - C21498) * C4577 +
                       (C21501 - C21500) * C4582 + (C21503 - C21502) * C47389) *
                          C31197 +
                      (C26446 * C4581 + C26447 * C4577 + C22582 * C4582 +
                       C22583 * C47389) *
                          C47391) *
                         C1664 +
                     ((C26444 * C4581 + C26445 * C4577 + C27158 * C4582 +
                       C27159 * C47389) *
                          C31197 +
                      (C27878 * C4581 + C27879 * C4577 +
                       (C23132 - C23133) * C4582 + (C23134 - C23135) * C47389) *
                          C47391) *
                         C1665 +
                     ((C27876 * C4581 + C27877 * C4577 +
                       (C23133 - C23132) * C4582 + (C23135 - C23134) * C47389) *
                          C31197 +
                      ((C27881 - C27880) * C4581 + (C27883 - C27882) * C4577 +
                       (C47018 * C7172 - C21369 * C7170) * C4582 +
                       (C47018 * C7176 - C21369 * C7174) * C47389) *
                          C47391) *
                         C47374) *
                        C47136) *
                       C47056)) /
                     (p * q * std::sqrt(p + q));
    d2ee[186] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((((C47018 * C124 - C21369 * C117) * C4581 +
                      (C47018 * C138 - C21369 * C127) * C4577 +
                      (C21484 - C21485) * C4582 + (C21486 - C21487) * C47389) *
                         C31197 +
                     ((C25950 - C25951) * C4581 + (C25952 - C25953) * C4577 +
                      C26440 * C4582 + C26441 * C47389) *
                         C47391) *
                        C47340 +
                    (((C25951 - C25950) * C4581 + (C25953 - C25952) * C4577 +
                      C26442 * C4582 + C26443 * C47389) *
                         C31197 +
                     ((C25954 - C25955) * C4581 + (C25956 - C25957) * C4577 +
                      C26826 * C4582 + C26827 * C47389) *
                         C47391) *
                        C47178) *
                       C1284 +
                   ((((C21485 - C21484) * C4581 + (C21487 - C21486) * C4577 +
                      (C21489 - C21488) * C4582 + (C21491 - C21490) * C47389) *
                         C31197 +
                     (C26442 * C4581 + C26443 * C4577 + C22312 * C4582 +
                      C22313 * C47389) *
                         C47391) *
                        C47340 +
                    ((C26440 * C4581 + C26441 * C4577 + C26830 * C4582 +
                      C26831 * C47389) *
                         C31197 +
                     (C26828 * C4581 + C26829 * C4577 + C22330 * C4582 +
                      C22331 * C47389) *
                         C47391) *
                        C47178) *
                       C1285 +
                   (((C21520 * C4581 + C21521 * C4577 +
                      (C21493 - C21492) * C4582 + (C21495 - C21494) * C47389) *
                         C31197 +
                     (C26830 * C4581 + C26831 * C4577 + C22690 * C4582 +
                      C22691 * C47389) *
                         C47391) *
                        C47340 +
                    ((C22312 * C4581 + C22313 * C4577 + C27290 * C4582 +
                      C27291 * C47389) *
                         C31197 +
                     (C26832 * C4581 + C26833 * C4577 +
                      (C22326 - C22327) * C4582 + (C22328 - C22329) * C47389) *
                         C47391) *
                        C47178) *
                       C1286 +
                   (((C22186 * C4581 + C22187 * C4577 +
                      (C22189 - C22188) * C4582 + (C22191 - C22190) * C47389) *
                         C31197 +
                     (C27290 * C4581 + C27291 * C4577 +
                      (C22692 - C22693) * C4582 + (C22694 - C22695) * C47389) *
                         C47391) *
                        C47340 +
                    ((C22690 * C4581 + C22691 * C4577 +
                      (C22693 - C22692) * C4582 + (C22695 - C22694) * C47389) *
                         C31197 +
                     ((C22327 - C22326) * C4581 + (C22329 - C22328) * C4577 +
                      (C47018 * C22308 - C21369 * C22307) * C4582 +
                      (C47018 * C22310 - C21369 * C22309) * C47389) *
                         C47391) *
                        C47178) *
                       C47381) *
                  C47045) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((((C47018 * C124 - C21369 * C117) * C4581 +
                       (C47018 * C138 - C21369 * C127) * C4577 +
                       (C21484 - C21485) * C4582 + (C21486 - C21487) * C47389) *
                          C31197 +
                      ((C25950 - C25951) * C4581 + (C25952 - C25953) * C4577 +
                       C26440 * C4582 + C26441 * C47389) *
                          C47391) *
                         C47340 +
                     (((C25951 - C25950) * C4581 + (C25953 - C25952) * C4577 +
                       C26442 * C4582 + C26443 * C47389) *
                          C31197 +
                      ((C25954 - C25955) * C4581 + (C25956 - C25957) * C4577 +
                       C26826 * C4582 + C26827 * C47389) *
                          C47391) *
                         C47178) *
                        C47339 +
                    ((((C21485 - C21484) * C4581 + (C21487 - C21486) * C4577 +
                       (C21489 - C21488) * C4582 + (C21491 - C21490) * C47389) *
                          C31197 +
                      (C26442 * C4581 + C26443 * C4577 + C22312 * C4582 +
                       C22313 * C47389) *
                          C47391) *
                         C47340 +
                     ((C26440 * C4581 + C26441 * C4577 + C26830 * C4582 +
                       C26831 * C47389) *
                          C31197 +
                      (C26828 * C4581 + C26829 * C4577 + C22330 * C4582 +
                       C22331 * C47389) *
                          C47391) *
                         C47178) *
                        C47136) *
                       C258 +
                   (((((C21369 * C118 - C47018 * C125) * C4581 +
                       (C21369 * C128 - C47018 * C139) * C4577 +
                       (C21496 - C21497) * C4582 + (C21498 - C21499) * C47389) *
                          C31197 +
                      ((C25958 - C25959) * C4581 + (C25960 - C25961) * C4577 +
                       C26444 * C4582 + C26445 * C47389) *
                          C47391) *
                         C47340 +
                     (((C25959 - C25958) * C4581 + (C25961 - C25960) * C4577 +
                       C26446 * C4582 + C26447 * C47389) *
                          C31197 +
                      ((C25962 - C25963) * C4581 + (C25964 - C25965) * C4577 +
                       C27876 * C4582 + C27877 * C47389) *
                          C47391) *
                         C47178) *
                        C47339 +
                    ((((C21497 - C21496) * C4581 + (C21499 - C21498) * C4577 +
                       (C21501 - C21500) * C4582 + (C21503 - C21502) * C47389) *
                          C31197 +
                      (C26446 * C4581 + C26447 * C4577 + C22582 * C4582 +
                       C22583 * C47389) *
                          C47391) *
                         C47340 +
                     ((C26444 * C4581 + C26445 * C4577 + C27158 * C4582 +
                       C27159 * C47389) *
                          C31197 +
                      (C27878 * C4581 + C27879 * C4577 +
                       (C23132 - C23133) * C4582 + (C23134 - C23135) * C47389) *
                          C47391) *
                         C47178) *
                        C47136) *
                       C259 +
                   (((((C47018 * C126 - C21369 * C119) * C4581 +
                       (C47018 * C140 - C21369 * C129) * C4577 +
                       (C21508 - C21509) * C4582 + (C21510 - C21511) * C47389) *
                          C31197 +
                      ((C25966 - C25967) * C4581 + (C25968 - C25969) * C4577 +
                       C26448 * C4582 + C26449 * C47389) *
                          C47391) *
                         C47340 +
                     (((C25967 - C25966) * C4581 + (C25969 - C25968) * C4577 +
                       C26450 * C4582 + C26451 * C47389) *
                          C31197 +
                      ((C25970 - C25971) * C4581 + (C25972 - C25973) * C4577 +
                       (C25974 - C25975) * C4582 + (C25976 - C25977) * C47389) *
                          C47391) *
                         C47178) *
                        C47339 +
                    ((((C21509 - C21508) * C4581 + (C21511 - C21510) * C4577 +
                       (C21513 - C21512) * C4582 + (C21515 - C21514) * C47389) *
                          C31197 +
                      (C26450 * C4581 + C26451 * C4577 +
                       (C22006 - C22007) * C4582 + (C22008 - C22009) * C47389) *
                          C47391) *
                         C47340 +
                     ((C26448 * C4581 + C26449 * C4577 +
                       (C22007 - C22006) * C4582 + (C22009 - C22008) * C47389) *
                          C31197 +
                      ((C25975 - C25974) * C4581 + (C25977 - C25976) * C4577 +
                       (C47018 * C1173 - C21369 * C1158) * C4582 +
                       (C47018 * C1185 - C21369 * C1176) * C47389) *
                          C47391) *
                         C47178) *
                        C47136) *
                       C47365)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  (((((C47018 * C124 - C21369 * C117) * C4581 +
                      (C47018 * C138 - C21369 * C127) * C4577 +
                      (C21484 - C21485) * C4582 + (C21486 - C21487) * C47389) *
                         C31197 +
                     ((C25950 - C25951) * C4581 + (C25952 - C25953) * C4577 +
                      C26440 * C4582 + C26441 * C47389) *
                         C47391) *
                        C2116 +
                    (((C25951 - C25950) * C4581 + (C25953 - C25952) * C4577 +
                      C26442 * C4582 + C26443 * C47389) *
                         C31197 +
                     ((C25954 - C25955) * C4581 + (C25956 - C25957) * C4577 +
                      C26826 * C4582 + C26827 * C47389) *
                         C47391) *
                        C2117 +
                    (((C25955 - C25954) * C4581 + (C25957 - C25956) * C4577 +
                      C26828 * C4582 + C26829 * C47389) *
                         C31197 +
                     ((C27670 - C27671) * C4581 + (C27672 - C27673) * C4577 +
                      C28148 * C4582 + C28149 * C47389) *
                         C47391) *
                        C2118 +
                    (((C27671 - C27670) * C4581 + (C27673 - C27672) * C4577 +
                      C28150 * C4582 + C28151 * C47389) *
                         C31197 +
                     ((C27674 - C27675) * C4581 + (C27676 - C27677) * C4577 +
                      (C27678 - C27679) * C4582 + (C27680 - C27681) * C47389) *
                         C47391) *
                        C47387) *
                       C47339 +
                   ((((C21485 - C21484) * C4581 + (C21487 - C21486) * C4577 +
                      (C21489 - C21488) * C4582 + (C21491 - C21490) * C47389) *
                         C31197 +
                     (C26442 * C4581 + C26443 * C4577 + C22312 * C4582 +
                      C22313 * C47389) *
                         C47391) *
                        C2116 +
                    ((C26440 * C4581 + C26441 * C4577 + C26830 * C4582 +
                      C26831 * C47389) *
                         C31197 +
                     (C26828 * C4581 + C26829 * C4577 + C22330 * C4582 +
                      C22331 * C47389) *
                         C47391) *
                        C2117 +
                    ((C26826 * C4581 + C26827 * C4577 + C26832 * C4582 +
                      C26833 * C47389) *
                         C31197 +
                     (C28150 * C4581 + C28151 * C4577 +
                      (C23340 - C23341) * C4582 + (C23342 - C23343) * C47389) *
                         C47391) *
                        C2118 +
                    ((C28148 * C4581 + C28149 * C4577 +
                      (C23341 - C23340) * C4582 + (C23343 - C23342) * C47389) *
                         C31197 +
                     ((C27679 - C27678) * C4581 + (C27681 - C27680) * C4577 +
                      (C47018 * C22978 - C21369 * C22977) * C4582 +
                      (C47018 * C22980 - C21369 * C22979) * C47389) *
                         C47391) *
                        C47387) *
                       C47136) *
                  C47045) /
                     (p * q * std::sqrt(p + q));
    d2ee[187] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C47018 * C124 - C21369 * C117) * C4581 +
                (C47018 * C138 - C21369 * C127) * C4577 +
                (C21484 - C21485) * C4582 + (C21486 - C21487) * C47389) *
                   C31197 +
               ((C25950 - C25951) * C4581 + (C25952 - C25953) * C4577 +
                C26440 * C4582 + C26441 * C47389) *
                   C47391) *
                  C47091 * C47073 * C108 +
              (((C21369 * C118 - C47018 * C125) * C4581 +
                (C21369 * C128 - C47018 * C139) * C4577 +
                (C21496 - C21497) * C4582 + (C21498 - C21499) * C47389) *
                   C31197 +
               ((C25958 - C25959) * C4581 + (C25960 - C25961) * C4577 +
                C26444 * C4582 + C26445 * C47389) *
                   C47391) *
                  C47091 * C47073 * C109 +
              (((C47018 * C126 - C21369 * C119) * C4581 +
                (C47018 * C140 - C21369 * C129) * C4577 +
                (C21508 - C21509) * C4582 + (C21510 - C21511) * C47389) *
                   C31197 +
               ((C25966 - C25967) * C4581 + (C25968 - C25969) * C4577 +
                C26448 * C4582 + C26449 * C47389) *
                   C47391) *
                  C47091 * C47073 * C110 +
              (((C21369 * C120 - C47018 * C130) * C4581 +
                (C21369 * C131 - C47018 * C141) * C4577 +
                (C21734 - C21735) * C4582 + (C21736 - C21737) * C47389) *
                   C31197 +
               ((C26242 - C26243) * C4581 + (C26244 - C26245) * C4577 +
                (C26108 - C26109) * C4582 + (C26110 - C26111) * C47389) *
                   C47391) *
                  C47091 * C47073 * C111 +
              (((C47018 * C132 - C21369 * C121) * C4581 +
                (C47018 * C142 - C21369 * C133) * C4577 +
                (C47018 * C287 - C21369 * C269) * C4582 +
                (C47018 * C299 - C21369 * C288) * C47389) *
                   C31197 +
               ((C47018 * C440 - C21369 * C422) * C4581 +
                (C47018 * C452 - C21369 * C441) * C4577 +
                (C47018 * C825 - C21369 * C816) * C4582 +
                (C47018 * C831 - C21369 * C826) * C47389) *
                   C47391) *
                  C47091 * C47073 * C112) +
         0.5 * std::pow(Pi, 2.5) *
             (((((C47018 * C124 - C21369 * C117) * C4581 +
                 (C47018 * C138 - C21369 * C127) * C4577 +
                 (C21484 - C21485) * C4582 + (C21486 - C21487) * C47389) *
                    C31197 +
                ((C25950 - C25951) * C4581 + (C25952 - C25953) * C4577 +
                 C26440 * C4582 + C26441 * C47389) *
                    C47391) *
                   C47091 * C47410 +
               (((C21485 - C21484) * C4581 + (C21487 - C21486) * C4577 +
                 (C21489 - C21488) * C4582 + (C21491 - C21490) * C47389) *
                    C31197 +
                (C26442 * C4581 + C26443 * C4577 + C22312 * C4582 +
                 C22313 * C47389) *
                    C47391) *
                   C47091 * C47398 +
               ((C21520 * C4581 + C21521 * C4577 + (C21493 - C21492) * C4582 +
                 (C21495 - C21494) * C47389) *
                    C31197 +
                (C26830 * C4581 + C26831 * C4577 + C22690 * C4582 +
                 C22691 * C47389) *
                    C47391) *
                   C47091 * C47371) *
                  C258 +
              ((((C21369 * C118 - C47018 * C125) * C4581 +
                 (C21369 * C128 - C47018 * C139) * C4577 +
                 (C21496 - C21497) * C4582 + (C21498 - C21499) * C47389) *
                    C31197 +
                ((C25958 - C25959) * C4581 + (C25960 - C25961) * C4577 +
                 C26444 * C4582 + C26445 * C47389) *
                    C47391) *
                   C47091 * C47410 +
               (((C21497 - C21496) * C4581 + (C21499 - C21498) * C4577 +
                 (C21501 - C21500) * C4582 + (C21503 - C21502) * C47389) *
                    C31197 +
                (C26446 * C4581 + C26447 * C4577 + C22582 * C4582 +
                 C22583 * C47389) *
                    C47391) *
                   C47091 * C47398 +
               ((C21522 * C4581 + C21523 * C4577 + (C21505 - C21504) * C4582 +
                 (C21507 - C21506) * C47389) *
                    C31197 +
                (C27158 * C4581 + C27159 * C4577 + (C22584 - C22585) * C4582 +
                 (C22586 - C22587) * C47389) *
                    C47391) *
                   C47091 * C47371) *
                  C259 +
              ((((C47018 * C126 - C21369 * C119) * C4581 +
                 (C47018 * C140 - C21369 * C129) * C4577 +
                 (C21508 - C21509) * C4582 + (C21510 - C21511) * C47389) *
                    C31197 +
                ((C25966 - C25967) * C4581 + (C25968 - C25969) * C4577 +
                 C26448 * C4582 + C26449 * C47389) *
                    C47391) *
                   C47091 * C47410 +
               (((C21509 - C21508) * C4581 + (C21511 - C21510) * C4577 +
                 (C21513 - C21512) * C4582 + (C21515 - C21514) * C47389) *
                    C31197 +
                (C26450 * C4581 + C26451 * C4577 + (C22006 - C22007) * C4582 +
                 (C22008 - C22009) * C47389) *
                    C47391) *
                   C47091 * C47398 +
               ((C21524 * C4581 + C21525 * C4577 + (C21517 - C21516) * C4582 +
                 (C21519 - C21518) * C47389) *
                    C31197 +
                ((C22007 - C22006) * C4581 + (C22009 - C22008) * C4577 +
                 (C47018 * C1547 - C21369 * C1544) * C4582 +
                 (C47018 * C1553 - C21369 * C1550) * C47389) *
                    C47391) *
                   C47091 * C47371) *
                  C47365)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C47018 * C124 - C21369 * C117) * C4581 +
             (C47018 * C138 - C21369 * C127) * C4577 +
             (C21484 - C21485) * C4582 + (C21486 - C21487) * C47389) *
                C31197 +
            ((C25950 - C25951) * C4581 + (C25952 - C25953) * C4577 +
             C26440 * C4582 + C26441 * C47389) *
                C47391) *
               C47411 +
           (((C25951 - C25950) * C4581 + (C25953 - C25952) * C4577 +
             C26442 * C4582 + C26443 * C47389) *
                C31197 +
            ((C25954 - C25955) * C4581 + (C25956 - C25957) * C4577 +
             C26826 * C4582 + C26827 * C47389) *
                C47391) *
               C47400 +
           (((C25955 - C25954) * C4581 + (C25957 - C25956) * C4577 +
             C26828 * C4582 + C26829 * C47389) *
                C31197 +
            ((C27670 - C27671) * C4581 + (C27672 - C27673) * C4577 +
             C28148 * C4582 + C28149 * C47389) *
                C47391) *
               C47374) *
              C47073 * C258 +
          ((((C21369 * C118 - C47018 * C125) * C4581 +
             (C21369 * C128 - C47018 * C139) * C4577 +
             (C21496 - C21497) * C4582 + (C21498 - C21499) * C47389) *
                C31197 +
            ((C25958 - C25959) * C4581 + (C25960 - C25961) * C4577 +
             C26444 * C4582 + C26445 * C47389) *
                C47391) *
               C47411 +
           (((C25959 - C25958) * C4581 + (C25961 - C25960) * C4577 +
             C26446 * C4582 + C26447 * C47389) *
                C31197 +
            ((C25962 - C25963) * C4581 + (C25964 - C25965) * C4577 +
             C27876 * C4582 + C27877 * C47389) *
                C47391) *
               C47400 +
           (((C25963 - C25962) * C4581 + (C25965 - C25964) * C4577 +
             C27878 * C4582 + C27879 * C47389) *
                C31197 +
            ((C28014 - C28015) * C4581 + (C28016 - C28017) * C4577 +
             (C27880 - C27881) * C4582 + (C27882 - C27883) * C47389) *
                C47391) *
               C47374) *
              C47073 * C259 +
          ((((C47018 * C126 - C21369 * C119) * C4581 +
             (C47018 * C140 - C21369 * C129) * C4577 +
             (C21508 - C21509) * C4582 + (C21510 - C21511) * C47389) *
                C31197 +
            ((C25966 - C25967) * C4581 + (C25968 - C25969) * C4577 +
             C26448 * C4582 + C26449 * C47389) *
                C47391) *
               C47411 +
           (((C25967 - C25966) * C4581 + (C25969 - C25968) * C4577 +
             C26450 * C4582 + C26451 * C47389) *
                C31197 +
            ((C25970 - C25971) * C4581 + (C25972 - C25973) * C4577 +
             (C25974 - C25975) * C4582 + (C25976 - C25977) * C47389) *
                C47391) *
               C47400 +
           (((C25971 - C25970) * C4581 + (C25973 - C25972) * C4577 +
             (C25975 - C25974) * C4582 + (C25977 - C25976) * C47389) *
                C31197 +
            ((C47018 * C1852 - C21369 * C1846) * C4581 +
             (C47018 * C1864 - C21369 * C1855) * C4577 +
             (C47018 * C2227 - C21369 * C2224) * C4582 +
             (C47018 * C2233 - C21369 * C2230) * C47389) *
                C47391) *
               C47374) *
              C47073 * C47365)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C47018 * C124 - C21369 * C117) * C4581 +
             (C47018 * C138 - C21369 * C127) * C4577 +
             (C21484 - C21485) * C4582 + (C21486 - C21487) * C47389) *
                C31197 +
            ((C25950 - C25951) * C4581 + (C25952 - C25953) * C4577 +
             C26440 * C4582 + C26441 * C47389) *
                C47391) *
               C47091 * C942 +
           (((C21485 - C21484) * C4581 + (C21487 - C21486) * C4577 +
             (C21489 - C21488) * C4582 + (C21491 - C21490) * C47389) *
                C31197 +
            (C26442 * C4581 + C26443 * C4577 + C22312 * C4582 +
             C22313 * C47389) *
                C47391) *
               C47091 * C943 +
           ((C21520 * C4581 + C21521 * C4577 + (C21493 - C21492) * C4582 +
             (C21495 - C21494) * C47389) *
                C31197 +
            (C26830 * C4581 + C26831 * C4577 + C22690 * C4582 +
             C22691 * C47389) *
                C47391) *
               C47091 * C47371) *
              C47407 +
          ((((C21369 * C118 - C47018 * C125) * C4581 +
             (C21369 * C128 - C47018 * C139) * C4577 +
             (C21496 - C21497) * C4582 + (C21498 - C21499) * C47389) *
                C31197 +
            ((C25958 - C25959) * C4581 + (C25960 - C25961) * C4577 +
             C26444 * C4582 + C26445 * C47389) *
                C47391) *
               C47091 * C942 +
           (((C21497 - C21496) * C4581 + (C21499 - C21498) * C4577 +
             (C21501 - C21500) * C4582 + (C21503 - C21502) * C47389) *
                C31197 +
            (C26446 * C4581 + C26447 * C4577 + C22582 * C4582 +
             C22583 * C47389) *
                C47391) *
               C47091 * C943 +
           ((C21522 * C4581 + C21523 * C4577 + (C21505 - C21504) * C4582 +
             (C21507 - C21506) * C47389) *
                C31197 +
            (C27158 * C4581 + C27159 * C4577 + (C22584 - C22585) * C4582 +
             (C22586 - C22587) * C47389) *
                C47391) *
               C47091 * C47371) *
              C47394 +
          ((((C47018 * C126 - C21369 * C119) * C4581 +
             (C47018 * C140 - C21369 * C129) * C4577 +
             (C21508 - C21509) * C4582 + (C21510 - C21511) * C47389) *
                C31197 +
            ((C25966 - C25967) * C4581 + (C25968 - C25969) * C4577 +
             C26448 * C4582 + C26449 * C47389) *
                C47391) *
               C47091 * C942 +
           (((C21509 - C21508) * C4581 + (C21511 - C21510) * C4577 +
             (C21513 - C21512) * C4582 + (C21515 - C21514) * C47389) *
                C31197 +
            (C26450 * C4581 + C26451 * C4577 + (C22006 - C22007) * C4582 +
             (C22008 - C22009) * C47389) *
                C47391) *
               C47091 * C943 +
           ((C21524 * C4581 + C21525 * C4577 + (C21517 - C21516) * C4582 +
             (C21519 - C21518) * C47389) *
                C31197 +
            ((C22007 - C22006) * C4581 + (C22009 - C22008) * C4577 +
             (C47018 * C1547 - C21369 * C1544) * C4582 +
             (C47018 * C1553 - C21369 * C1550) * C47389) *
                C47391) *
               C47091 * C47371) *
              C47365)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C47018 * C124 - C21369 * C117) * C4581 +
            (C47018 * C138 - C21369 * C127) * C4577 +
            (C21484 - C21485) * C4582 + (C21486 - C21487) * C47389) *
               C31197 +
           ((C25950 - C25951) * C4581 + (C25952 - C25953) * C4577 +
            C26440 * C4582 + C26441 * C47389) *
               C47391) *
              C47091 * C1010 +
          (((C21485 - C21484) * C4581 + (C21487 - C21486) * C4577 +
            (C21489 - C21488) * C4582 + (C21491 - C21490) * C47389) *
               C31197 +
           (C26442 * C4581 + C26443 * C4577 + C22312 * C4582 +
            C22313 * C47389) *
               C47391) *
              C47091 * C1011 +
          ((C21520 * C4581 + C21521 * C4577 + (C21493 - C21492) * C4582 +
            (C21495 - C21494) * C47389) *
               C31197 +
           (C26830 * C4581 + C26831 * C4577 + C22690 * C4582 +
            C22691 * C47389) *
               C47391) *
              C47091 * C1012 +
          ((C22186 * C4581 + C22187 * C4577 + (C22189 - C22188) * C4582 +
            (C22191 - C22190) * C47389) *
               C31197 +
           (C27290 * C4581 + C27291 * C4577 + (C22692 - C22693) * C4582 +
            (C22694 - C22695) * C47389) *
               C47391) *
              C47091 * C1013 +
          ((C22196 * C4581 + C22197 * C4577 + (C22193 - C22192) * C4582 +
            (C22195 - C22194) * C47389) *
               C31197 +
           ((C22693 - C22692) * C4581 + (C22695 - C22694) * C4577 +
            (C47018 * C22686 - C21369 * C22685) * C4582 +
            (C47018 * C22688 - C21369 * C22687) * C47389) *
               C47391) *
              C47091 * C1014) *
         C47045) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C47018 * C124 - C21369 * C117) * C4581 +
             (C47018 * C138 - C21369 * C127) * C4577 +
             (C21484 - C21485) * C4582 + (C21486 - C21487) * C47389) *
                C31197 +
            ((C25950 - C25951) * C4581 + (C25952 - C25953) * C4577 +
             C26440 * C4582 + C26441 * C47389) *
                C47391) *
               C47411 +
           (((C25951 - C25950) * C4581 + (C25953 - C25952) * C4577 +
             C26442 * C4582 + C26443 * C47389) *
                C31197 +
            ((C25954 - C25955) * C4581 + (C25956 - C25957) * C4577 +
             C26826 * C4582 + C26827 * C47389) *
                C47391) *
               C47400 +
           (((C25955 - C25954) * C4581 + (C25957 - C25956) * C4577 +
             C26828 * C4582 + C26829 * C47389) *
                C31197 +
            ((C27670 - C27671) * C4581 + (C27672 - C27673) * C4577 +
             C28148 * C4582 + C28149 * C47389) *
                C47391) *
               C47374) *
              C942 +
          ((((C21485 - C21484) * C4581 + (C21487 - C21486) * C4577 +
             (C21489 - C21488) * C4582 + (C21491 - C21490) * C47389) *
                C31197 +
            (C26442 * C4581 + C26443 * C4577 + C22312 * C4582 +
             C22313 * C47389) *
                C47391) *
               C47411 +
           ((C26440 * C4581 + C26441 * C4577 + C26830 * C4582 +
             C26831 * C47389) *
                C31197 +
            (C26828 * C4581 + C26829 * C4577 + C22330 * C4582 +
             C22331 * C47389) *
                C47391) *
               C47400 +
           ((C26826 * C4581 + C26827 * C4577 + C26832 * C4582 +
             C26833 * C47389) *
                C31197 +
            (C28150 * C4581 + C28151 * C4577 + (C23340 - C23341) * C4582 +
             (C23342 - C23343) * C47389) *
                C47391) *
               C47374) *
              C943 +
          (((C21520 * C4581 + C21521 * C4577 + (C21493 - C21492) * C4582 +
             (C21495 - C21494) * C47389) *
                C31197 +
            (C26830 * C4581 + C26831 * C4577 + C22690 * C4582 +
             C22691 * C47389) *
                C47391) *
               C47411 +
           ((C22312 * C4581 + C22313 * C4577 + C27290 * C4582 +
             C27291 * C47389) *
                C31197 +
            (C26832 * C4581 + C26833 * C4577 + (C22326 - C22327) * C4582 +
             (C22328 - C22329) * C47389) *
                C47391) *
               C47400 +
           ((C22330 * C4581 + C22331 * C4577 + (C22327 - C22326) * C4582 +
             (C22329 - C22328) * C47389) *
                C31197 +
            ((C23341 - C23340) * C4581 + (C23343 - C23342) * C4577 +
             (C47018 * C23332 - C21369 * C23331) * C4582 +
             (C47018 * C23334 - C21369 * C23333) * C47389) *
                C47391) *
               C47374) *
              C47371) *
         C47045) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C47018 * C124 - C21369 * C117) * C4581 +
             (C47018 * C138 - C21369 * C127) * C4577 +
             (C21484 - C21485) * C4582 + (C21486 - C21487) * C47389) *
                C31197 +
            ((C25950 - C25951) * C4581 + (C25952 - C25953) * C4577 +
             C26440 * C4582 + C26441 * C47389) *
                C47391) *
               C1664 +
           (((C25951 - C25950) * C4581 + (C25953 - C25952) * C4577 +
             C26442 * C4582 + C26443 * C47389) *
                C31197 +
            ((C25954 - C25955) * C4581 + (C25956 - C25957) * C4577 +
             C26826 * C4582 + C26827 * C47389) *
                C47391) *
               C1665 +
           (((C25955 - C25954) * C4581 + (C25957 - C25956) * C4577 +
             C26828 * C4582 + C26829 * C47389) *
                C31197 +
            ((C27670 - C27671) * C4581 + (C27672 - C27673) * C4577 +
             C28148 * C4582 + C28149 * C47389) *
                C47391) *
               C47374) *
              C47073 * C47407 +
          ((((C21369 * C118 - C47018 * C125) * C4581 +
             (C21369 * C128 - C47018 * C139) * C4577 +
             (C21496 - C21497) * C4582 + (C21498 - C21499) * C47389) *
                C31197 +
            ((C25958 - C25959) * C4581 + (C25960 - C25961) * C4577 +
             C26444 * C4582 + C26445 * C47389) *
                C47391) *
               C1664 +
           (((C25959 - C25958) * C4581 + (C25961 - C25960) * C4577 +
             C26446 * C4582 + C26447 * C47389) *
                C31197 +
            ((C25962 - C25963) * C4581 + (C25964 - C25965) * C4577 +
             C27876 * C4582 + C27877 * C47389) *
                C47391) *
               C1665 +
           (((C25963 - C25962) * C4581 + (C25965 - C25964) * C4577 +
             C27878 * C4582 + C27879 * C47389) *
                C31197 +
            ((C28014 - C28015) * C4581 + (C28016 - C28017) * C4577 +
             (C27880 - C27881) * C4582 + (C27882 - C27883) * C47389) *
                C47391) *
               C47374) *
              C47073 * C47394 +
          ((((C47018 * C126 - C21369 * C119) * C4581 +
             (C47018 * C140 - C21369 * C129) * C4577 +
             (C21508 - C21509) * C4582 + (C21510 - C21511) * C47389) *
                C31197 +
            ((C25966 - C25967) * C4581 + (C25968 - C25969) * C4577 +
             C26448 * C4582 + C26449 * C47389) *
                C47391) *
               C1664 +
           (((C25967 - C25966) * C4581 + (C25969 - C25968) * C4577 +
             C26450 * C4582 + C26451 * C47389) *
                C31197 +
            ((C25970 - C25971) * C4581 + (C25972 - C25973) * C4577 +
             (C25974 - C25975) * C4582 + (C25976 - C25977) * C47389) *
                C47391) *
               C1665 +
           (((C25971 - C25970) * C4581 + (C25973 - C25972) * C4577 +
             (C25975 - C25974) * C4582 + (C25977 - C25976) * C47389) *
                C31197 +
            ((C47018 * C1852 - C21369 * C1846) * C4581 +
             (C47018 * C1864 - C21369 * C1855) * C4577 +
             (C47018 * C2227 - C21369 * C2224) * C4582 +
             (C47018 * C2233 - C21369 * C2230) * C47389) *
                C47391) *
               C47374) *
              C47073 * C47365)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C47018 * C124 - C21369 * C117) * C4581 +
             (C47018 * C138 - C21369 * C127) * C4577 +
             (C21484 - C21485) * C4582 + (C21486 - C21487) * C47389) *
                C31197 +
            ((C25950 - C25951) * C4581 + (C25952 - C25953) * C4577 +
             C26440 * C4582 + C26441 * C47389) *
                C47391) *
               C1664 +
           (((C25951 - C25950) * C4581 + (C25953 - C25952) * C4577 +
             C26442 * C4582 + C26443 * C47389) *
                C31197 +
            ((C25954 - C25955) * C4581 + (C25956 - C25957) * C4577 +
             C26826 * C4582 + C26827 * C47389) *
                C47391) *
               C1665 +
           (((C25955 - C25954) * C4581 + (C25957 - C25956) * C4577 +
             C26828 * C4582 + C26829 * C47389) *
                C31197 +
            ((C27670 - C27671) * C4581 + (C27672 - C27673) * C4577 +
             C28148 * C4582 + C28149 * C47389) *
                C47391) *
               C47374) *
              C47410 +
          ((((C21485 - C21484) * C4581 + (C21487 - C21486) * C4577 +
             (C21489 - C21488) * C4582 + (C21491 - C21490) * C47389) *
                C31197 +
            (C26442 * C4581 + C26443 * C4577 + C22312 * C4582 +
             C22313 * C47389) *
                C47391) *
               C1664 +
           ((C26440 * C4581 + C26441 * C4577 + C26830 * C4582 +
             C26831 * C47389) *
                C31197 +
            (C26828 * C4581 + C26829 * C4577 + C22330 * C4582 +
             C22331 * C47389) *
                C47391) *
               C1665 +
           ((C26826 * C4581 + C26827 * C4577 + C26832 * C4582 +
             C26833 * C47389) *
                C31197 +
            (C28150 * C4581 + C28151 * C4577 + (C23340 - C23341) * C4582 +
             (C23342 - C23343) * C47389) *
                C47391) *
               C47374) *
              C47398 +
          (((C21520 * C4581 + C21521 * C4577 + (C21493 - C21492) * C4582 +
             (C21495 - C21494) * C47389) *
                C31197 +
            (C26830 * C4581 + C26831 * C4577 + C22690 * C4582 +
             C22691 * C47389) *
                C47391) *
               C1664 +
           ((C22312 * C4581 + C22313 * C4577 + C27290 * C4582 +
             C27291 * C47389) *
                C31197 +
            (C26832 * C4581 + C26833 * C4577 + (C22326 - C22327) * C4582 +
             (C22328 - C22329) * C47389) *
                C47391) *
               C1665 +
           ((C22330 * C4581 + C22331 * C4577 + (C22327 - C22326) * C4582 +
             (C22329 - C22328) * C47389) *
                C31197 +
            ((C23341 - C23340) * C4581 + (C23343 - C23342) * C4577 +
             (C47018 * C23332 - C21369 * C23331) * C4582 +
             (C47018 * C23334 - C21369 * C23333) * C47389) *
                C47391) *
               C47374) *
              C47371) *
         C47045) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C47018 * C124 - C21369 * C117) * C4581 +
            (C47018 * C138 - C21369 * C127) * C4577 +
            (C21484 - C21485) * C4582 + (C21486 - C21487) * C47389) *
               C31197 +
           ((C25950 - C25951) * C4581 + (C25952 - C25953) * C4577 +
            C26440 * C4582 + C26441 * C47389) *
               C47391) *
              C1839 +
          (((C25951 - C25950) * C4581 + (C25953 - C25952) * C4577 +
            C26442 * C4582 + C26443 * C47389) *
               C31197 +
           ((C25954 - C25955) * C4581 + (C25956 - C25957) * C4577 +
            C26826 * C4582 + C26827 * C47389) *
               C47391) *
              C1840 +
          (((C25955 - C25954) * C4581 + (C25957 - C25956) * C4577 +
            C26828 * C4582 + C26829 * C47389) *
               C31197 +
           ((C27670 - C27671) * C4581 + (C27672 - C27673) * C4577 +
            C28148 * C4582 + C28149 * C47389) *
               C47391) *
              C1841 +
          (((C27671 - C27670) * C4581 + (C27673 - C27672) * C4577 +
            C28150 * C4582 + C28151 * C47389) *
               C31197 +
           ((C27674 - C27675) * C4581 + (C27676 - C27677) * C4577 +
            (C27678 - C27679) * C4582 + (C27680 - C27681) * C47389) *
               C47391) *
              C1842 +
          (((C27675 - C27674) * C4581 + (C27677 - C27676) * C4577 +
            (C27679 - C27678) * C4582 + (C27681 - C27680) * C47389) *
               C31197 +
           ((C47018 * C12239 - C21369 * C12237) * C4581 +
            (C47018 * C12243 - C21369 * C12241) * C4577 +
            (C47018 * C27666 - C21369 * C27665) * C4582 +
            (C47018 * C27668 - C21369 * C27667) * C47389) *
               C47391) *
              C1843) *
         C47073 * C47045) /
            (p * q * std::sqrt(p + q));
    d2ee[188] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((((C47018 * C124 - C21369 * C117) * C4581 +
                       (C47018 * C138 - C21369 * C127) * C4577 +
                       (C21484 - C21485) * C4582 + (C21486 - C21487) * C47389) *
                          C31197 +
                      ((C25950 - C25951) * C4581 + (C25952 - C25953) * C4577 +
                       C26440 * C4582 + C26441 * C47389) *
                          C47391) *
                         C47340 +
                     (((C25951 - C25950) * C4581 + (C25953 - C25952) * C4577 +
                       C26442 * C4582 + C26443 * C47389) *
                          C31197 +
                      ((C25954 - C25955) * C4581 + (C25956 - C25957) * C4577 +
                       C26826 * C4582 + C26827 * C47389) *
                          C47391) *
                         C47178) *
                        C942 +
                    ((((C21485 - C21484) * C4581 + (C21487 - C21486) * C4577 +
                       (C21489 - C21488) * C4582 + (C21491 - C21490) * C47389) *
                          C31197 +
                      (C26442 * C4581 + C26443 * C4577 + C22312 * C4582 +
                       C22313 * C47389) *
                          C47391) *
                         C47340 +
                     ((C26440 * C4581 + C26441 * C4577 + C26830 * C4582 +
                       C26831 * C47389) *
                          C31197 +
                      (C26828 * C4581 + C26829 * C4577 + C22330 * C4582 +
                       C22331 * C47389) *
                          C47391) *
                         C47178) *
                        C943 +
                    (((C21520 * C4581 + C21521 * C4577 +
                       (C21493 - C21492) * C4582 + (C21495 - C21494) * C47389) *
                          C31197 +
                      (C26830 * C4581 + C26831 * C4577 + C22690 * C4582 +
                       C22691 * C47389) *
                          C47391) *
                         C47340 +
                     ((C22312 * C4581 + C22313 * C4577 + C27290 * C4582 +
                       C27291 * C47389) *
                          C31197 +
                      (C26832 * C4581 + C26833 * C4577 +
                       (C22326 - C22327) * C4582 + (C22328 - C22329) * C47389) *
                          C47391) *
                         C47178) *
                        C47371) *
                       C47325 +
                   (((((C21369 * C118 - C47018 * C125) * C4581 +
                       (C21369 * C128 - C47018 * C139) * C4577 +
                       (C21496 - C21497) * C4582 + (C21498 - C21499) * C47389) *
                          C31197 +
                      ((C25958 - C25959) * C4581 + (C25960 - C25961) * C4577 +
                       C26444 * C4582 + C26445 * C47389) *
                          C47391) *
                         C47340 +
                     (((C25959 - C25958) * C4581 + (C25961 - C25960) * C4577 +
                       C26446 * C4582 + C26447 * C47389) *
                          C31197 +
                      ((C25962 - C25963) * C4581 + (C25964 - C25965) * C4577 +
                       C27876 * C4582 + C27877 * C47389) *
                          C47391) *
                         C47178) *
                        C942 +
                    ((((C21497 - C21496) * C4581 + (C21499 - C21498) * C4577 +
                       (C21501 - C21500) * C4582 + (C21503 - C21502) * C47389) *
                          C31197 +
                      (C26446 * C4581 + C26447 * C4577 + C22582 * C4582 +
                       C22583 * C47389) *
                          C47391) *
                         C47340 +
                     ((C26444 * C4581 + C26445 * C4577 + C27158 * C4582 +
                       C27159 * C47389) *
                          C31197 +
                      (C27878 * C4581 + C27879 * C4577 +
                       (C23132 - C23133) * C4582 + (C23134 - C23135) * C47389) *
                          C47391) *
                         C47178) *
                        C943 +
                    (((C21522 * C4581 + C21523 * C4577 +
                       (C21505 - C21504) * C4582 + (C21507 - C21506) * C47389) *
                          C31197 +
                      (C27158 * C4581 + C27159 * C4577 +
                       (C22584 - C22585) * C4582 + (C22586 - C22587) * C47389) *
                          C47391) *
                         C47340 +
                     ((C22582 * C4581 + C22583 * C4577 +
                       (C22585 - C22584) * C4582 + (C22587 - C22586) * C47389) *
                          C31197 +
                      ((C23133 - C23132) * C4581 + (C23135 - C23134) * C4577 +
                       (C47018 * C5810 - C21369 * C5808) * C4582 +
                       (C47018 * C5814 - C21369 * C5812) * C47389) *
                          C47391) *
                         C47178) *
                        C47371) *
                       C47056)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((((C47018 * C124 - C21369 * C117) * C4581 +
                      (C47018 * C138 - C21369 * C127) * C4577 +
                      (C21484 - C21485) * C4582 + (C21486 - C21487) * C47389) *
                         C31197 +
                     ((C25950 - C25951) * C4581 + (C25952 - C25953) * C4577 +
                      C26440 * C4582 + C26441 * C47389) *
                         C47391) *
                        C47340 +
                    (((C25951 - C25950) * C4581 + (C25953 - C25952) * C4577 +
                      C26442 * C4582 + C26443 * C47389) *
                         C31197 +
                     ((C25954 - C25955) * C4581 + (C25956 - C25957) * C4577 +
                      C26826 * C4582 + C26827 * C47389) *
                         C47391) *
                        C47178) *
                       C47073 * C554 +
                   ((((C21369 * C118 - C47018 * C125) * C4581 +
                      (C21369 * C128 - C47018 * C139) * C4577 +
                      (C21496 - C21497) * C4582 + (C21498 - C21499) * C47389) *
                         C31197 +
                     ((C25958 - C25959) * C4581 + (C25960 - C25961) * C4577 +
                      C26444 * C4582 + C26445 * C47389) *
                         C47391) *
                        C47340 +
                    (((C25959 - C25958) * C4581 + (C25961 - C25960) * C4577 +
                      C26446 * C4582 + C26447 * C47389) *
                         C31197 +
                     ((C25962 - C25963) * C4581 + (C25964 - C25965) * C4577 +
                      C27876 * C4582 + C27877 * C47389) *
                         C47391) *
                        C47178) *
                       C47073 * C555 +
                   ((((C47018 * C126 - C21369 * C119) * C4581 +
                      (C47018 * C140 - C21369 * C129) * C4577 +
                      (C21508 - C21509) * C4582 + (C21510 - C21511) * C47389) *
                         C31197 +
                     ((C25966 - C25967) * C4581 + (C25968 - C25969) * C4577 +
                      C26448 * C4582 + C26449 * C47389) *
                         C47391) *
                        C47340 +
                    (((C25967 - C25966) * C4581 + (C25969 - C25968) * C4577 +
                      C26450 * C4582 + C26451 * C47389) *
                         C31197 +
                     ((C25970 - C25971) * C4581 + (C25972 - C25973) * C4577 +
                      (C25974 - C25975) * C4582 + (C25976 - C25977) * C47389) *
                         C47391) *
                        C47178) *
                       C47073 * C556 +
                   ((((C21369 * C120 - C47018 * C130) * C4581 +
                      (C21369 * C131 - C47018 * C141) * C4577 +
                      (C21734 - C21735) * C4582 + (C21736 - C21737) * C47389) *
                         C31197 +
                     ((C26242 - C26243) * C4581 + (C26244 - C26245) * C4577 +
                      (C26108 - C26109) * C4582 + (C26110 - C26111) * C47389) *
                         C47391) *
                        C47340 +
                    (((C26243 - C26242) * C4581 + (C26245 - C26244) * C4577 +
                      (C26109 - C26108) * C4582 + (C26111 - C26110) * C47389) *
                         C31197 +
                     ((C47018 * C438 - C21369 * C421) * C4581 +
                      (C47018 * C451 - C21369 * C439) * C4577 +
                      (C47018 * C2015 - C21369 * C2014) * C4582 +
                      (C47018 * C2017 - C21369 * C2016) * C47389) *
                         C47391) *
                        C47178) *
                       C47073 * C47375)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  (((((C47018 * C124 - C21369 * C117) * C4581 +
                      (C47018 * C138 - C21369 * C127) * C4577 +
                      (C21484 - C21485) * C4582 + (C21486 - C21487) * C47389) *
                         C31197 +
                     ((C25950 - C25951) * C4581 + (C25952 - C25953) * C4577 +
                      C26440 * C4582 + C26441 * C47389) *
                         C47391) *
                        C2116 +
                    (((C25951 - C25950) * C4581 + (C25953 - C25952) * C4577 +
                      C26442 * C4582 + C26443 * C47389) *
                         C31197 +
                     ((C25954 - C25955) * C4581 + (C25956 - C25957) * C4577 +
                      C26826 * C4582 + C26827 * C47389) *
                         C47391) *
                        C2117 +
                    (((C25955 - C25954) * C4581 + (C25957 - C25956) * C4577 +
                      C26828 * C4582 + C26829 * C47389) *
                         C31197 +
                     ((C27670 - C27671) * C4581 + (C27672 - C27673) * C4577 +
                      C28148 * C4582 + C28149 * C47389) *
                         C47391) *
                        C2118 +
                    (((C27671 - C27670) * C4581 + (C27673 - C27672) * C4577 +
                      C28150 * C4582 + C28151 * C47389) *
                         C31197 +
                     ((C27674 - C27675) * C4581 + (C27676 - C27677) * C4577 +
                      (C27678 - C27679) * C4582 + (C27680 - C27681) * C47389) *
                         C47391) *
                        C47387) *
                       C47073 * C47325 +
                   ((((C21369 * C118 - C47018 * C125) * C4581 +
                      (C21369 * C128 - C47018 * C139) * C4577 +
                      (C21496 - C21497) * C4582 + (C21498 - C21499) * C47389) *
                         C31197 +
                     ((C25958 - C25959) * C4581 + (C25960 - C25961) * C4577 +
                      C26444 * C4582 + C26445 * C47389) *
                         C47391) *
                        C2116 +
                    (((C25959 - C25958) * C4581 + (C25961 - C25960) * C4577 +
                      C26446 * C4582 + C26447 * C47389) *
                         C31197 +
                     ((C25962 - C25963) * C4581 + (C25964 - C25965) * C4577 +
                      C27876 * C4582 + C27877 * C47389) *
                         C47391) *
                        C2117 +
                    (((C25963 - C25962) * C4581 + (C25965 - C25964) * C4577 +
                      C27878 * C4582 + C27879 * C47389) *
                         C31197 +
                     ((C28014 - C28015) * C4581 + (C28016 - C28017) * C4577 +
                      (C27880 - C27881) * C4582 + (C27882 - C27883) * C47389) *
                         C47391) *
                        C2118 +
                    (((C28015 - C28014) * C4581 + (C28017 - C28016) * C4577 +
                      (C27881 - C27880) * C4582 + (C27883 - C27882) * C47389) *
                         C31197 +
                     ((C47018 * C1857 - C21369 * C1848) * C4581 +
                      (C47018 * C1866 - C21369 * C1860) * C4577 +
                      (C47018 * C6702 - C21369 * C6700) * C4582 +
                      (C47018 * C6706 - C21369 * C6704) * C47389) *
                         C47391) *
                        C47387) *
                       C47073 * C47056)) /
                     (p * q * std::sqrt(p + q));
    d2ee[189] += (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  (((((C47018 * C124 - C21369 * C117) * C4581 +
                      (C47018 * C138 - C21369 * C127) * C4577 +
                      (C21484 - C21485) * C4582 + (C21486 - C21487) * C47389) *
                         C31197 +
                     ((C25950 - C25951) * C4581 + (C25952 - C25953) * C4577 +
                      C26440 * C4582 + C26441 * C47389) *
                         C47391) *
                        C47091 * C47410 +
                    (((C21485 - C21484) * C4581 + (C21487 - C21486) * C4577 +
                      (C21489 - C21488) * C4582 + (C21491 - C21490) * C47389) *
                         C31197 +
                     (C26442 * C4581 + C26443 * C4577 + C22312 * C4582 +
                      C22313 * C47389) *
                         C47391) *
                        C47091 * C47398 +
                    ((C21520 * C4581 + C21521 * C4577 +
                      (C21493 - C21492) * C4582 + (C21495 - C21494) * C47389) *
                         C31197 +
                     (C26830 * C4581 + C26831 * C4577 + C22690 * C4582 +
                      C22691 * C47389) *
                         C47391) *
                        C47091 * C47371) *
                       C258 +
                   ((((C21369 * C118 - C47018 * C125) * C4581 +
                      (C21369 * C128 - C47018 * C139) * C4577 +
                      (C21496 - C21497) * C4582 + (C21498 - C21499) * C47389) *
                         C31197 +
                     ((C25958 - C25959) * C4581 + (C25960 - C25961) * C4577 +
                      C26444 * C4582 + C26445 * C47389) *
                         C47391) *
                        C47091 * C47410 +
                    (((C21497 - C21496) * C4581 + (C21499 - C21498) * C4577 +
                      (C21501 - C21500) * C4582 + (C21503 - C21502) * C47389) *
                         C31197 +
                     (C26446 * C4581 + C26447 * C4577 + C22582 * C4582 +
                      C22583 * C47389) *
                         C47391) *
                        C47091 * C47398 +
                    ((C21522 * C4581 + C21523 * C4577 +
                      (C21505 - C21504) * C4582 + (C21507 - C21506) * C47389) *
                         C31197 +
                     (C27158 * C4581 + C27159 * C4577 +
                      (C22584 - C22585) * C4582 + (C22586 - C22587) * C47389) *
                         C47391) *
                        C47091 * C47371) *
                       C259 +
                   ((((C47018 * C126 - C21369 * C119) * C4581 +
                      (C47018 * C140 - C21369 * C129) * C4577 +
                      (C21508 - C21509) * C4582 + (C21510 - C21511) * C47389) *
                         C31197 +
                     ((C25966 - C25967) * C4581 + (C25968 - C25969) * C4577 +
                      C26448 * C4582 + C26449 * C47389) *
                         C47391) *
                        C47091 * C47410 +
                    (((C21509 - C21508) * C4581 + (C21511 - C21510) * C4577 +
                      (C21513 - C21512) * C4582 + (C21515 - C21514) * C47389) *
                         C31197 +
                     (C26450 * C4581 + C26451 * C4577 +
                      (C22006 - C22007) * C4582 + (C22008 - C22009) * C47389) *
                         C47391) *
                        C47091 * C47398 +
                    ((C21524 * C4581 + C21525 * C4577 +
                      (C21517 - C21516) * C4582 + (C21519 - C21518) * C47389) *
                         C31197 +
                     ((C22007 - C22006) * C4581 + (C22009 - C22008) * C4577 +
                      (C47018 * C1547 - C21369 * C1544) * C4582 +
                      (C47018 * C1553 - C21369 * C1550) * C47389) *
                         C47391) *
                        C47091 * C47371) *
                       C47365)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  ((((C47018 * C124 - C21369 * C117) * C4581 +
                     (C47018 * C138 - C21369 * C127) * C4577 +
                     (C21484 - C21485) * C4582 + (C21486 - C21487) * C47389) *
                        C31197 +
                    ((C25950 - C25951) * C4581 + (C25952 - C25953) * C4577 +
                     C26440 * C4582 + C26441 * C47389) *
                        C47391) *
                       C47091 * C47073 * C108 +
                   (((C21369 * C118 - C47018 * C125) * C4581 +
                     (C21369 * C128 - C47018 * C139) * C4577 +
                     (C21496 - C21497) * C4582 + (C21498 - C21499) * C47389) *
                        C31197 +
                    ((C25958 - C25959) * C4581 + (C25960 - C25961) * C4577 +
                     C26444 * C4582 + C26445 * C47389) *
                        C47391) *
                       C47091 * C47073 * C109 +
                   (((C47018 * C126 - C21369 * C119) * C4581 +
                     (C47018 * C140 - C21369 * C129) * C4577 +
                     (C21508 - C21509) * C4582 + (C21510 - C21511) * C47389) *
                        C31197 +
                    ((C25966 - C25967) * C4581 + (C25968 - C25969) * C4577 +
                     C26448 * C4582 + C26449 * C47389) *
                        C47391) *
                       C47091 * C47073 * C110 +
                   (((C21369 * C120 - C47018 * C130) * C4581 +
                     (C21369 * C131 - C47018 * C141) * C4577 +
                     (C21734 - C21735) * C4582 + (C21736 - C21737) * C47389) *
                        C31197 +
                    ((C26242 - C26243) * C4581 + (C26244 - C26245) * C4577 +
                     (C26108 - C26109) * C4582 + (C26110 - C26111) * C47389) *
                        C47391) *
                       C47091 * C47073 * C111 +
                   (((C47018 * C132 - C21369 * C121) * C4581 +
                     (C47018 * C142 - C21369 * C133) * C4577 +
                     (C47018 * C287 - C21369 * C269) * C4582 +
                     (C47018 * C299 - C21369 * C288) * C47389) *
                        C31197 +
                    ((C47018 * C440 - C21369 * C422) * C4581 +
                     (C47018 * C452 - C21369 * C441) * C4577 +
                     (C47018 * C825 - C21369 * C816) * C4582 +
                     (C47018 * C831 - C21369 * C826) * C47389) *
                        C47391) *
                       C47091 * C47073 * C112)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  (((((C47018 * C124 - C21369 * C117) * C4581 +
                      (C47018 * C138 - C21369 * C127) * C4577 +
                      (C21484 - C21485) * C4582 + (C21486 - C21487) * C47389) *
                         C31197 +
                     ((C25950 - C25951) * C4581 + (C25952 - C25953) * C4577 +
                      C26440 * C4582 + C26441 * C47389) *
                         C47391) *
                        C47091 * C942 +
                    (((C21485 - C21484) * C4581 + (C21487 - C21486) * C4577 +
                      (C21489 - C21488) * C4582 + (C21491 - C21490) * C47389) *
                         C31197 +
                     (C26442 * C4581 + C26443 * C4577 + C22312 * C4582 +
                      C22313 * C47389) *
                         C47391) *
                        C47091 * C943 +
                    ((C21520 * C4581 + C21521 * C4577 +
                      (C21493 - C21492) * C4582 + (C21495 - C21494) * C47389) *
                         C31197 +
                     (C26830 * C4581 + C26831 * C4577 + C22690 * C4582 +
                      C22691 * C47389) *
                         C47391) *
                        C47091 * C47371) *
                       C47407 +
                   ((((C21369 * C118 - C47018 * C125) * C4581 +
                      (C21369 * C128 - C47018 * C139) * C4577 +
                      (C21496 - C21497) * C4582 + (C21498 - C21499) * C47389) *
                         C31197 +
                     ((C25958 - C25959) * C4581 + (C25960 - C25961) * C4577 +
                      C26444 * C4582 + C26445 * C47389) *
                         C47391) *
                        C47091 * C942 +
                    (((C21497 - C21496) * C4581 + (C21499 - C21498) * C4577 +
                      (C21501 - C21500) * C4582 + (C21503 - C21502) * C47389) *
                         C31197 +
                     (C26446 * C4581 + C26447 * C4577 + C22582 * C4582 +
                      C22583 * C47389) *
                         C47391) *
                        C47091 * C943 +
                    ((C21522 * C4581 + C21523 * C4577 +
                      (C21505 - C21504) * C4582 + (C21507 - C21506) * C47389) *
                         C31197 +
                     (C27158 * C4581 + C27159 * C4577 +
                      (C22584 - C22585) * C4582 + (C22586 - C22587) * C47389) *
                         C47391) *
                        C47091 * C47371) *
                       C47394 +
                   ((((C47018 * C126 - C21369 * C119) * C4581 +
                      (C47018 * C140 - C21369 * C129) * C4577 +
                      (C21508 - C21509) * C4582 + (C21510 - C21511) * C47389) *
                         C31197 +
                     ((C25966 - C25967) * C4581 + (C25968 - C25969) * C4577 +
                      C26448 * C4582 + C26449 * C47389) *
                         C47391) *
                        C47091 * C942 +
                    (((C21509 - C21508) * C4581 + (C21511 - C21510) * C4577 +
                      (C21513 - C21512) * C4582 + (C21515 - C21514) * C47389) *
                         C31197 +
                     (C26450 * C4581 + C26451 * C4577 +
                      (C22006 - C22007) * C4582 + (C22008 - C22009) * C47389) *
                         C47391) *
                        C47091 * C943 +
                    ((C21524 * C4581 + C21525 * C4577 +
                      (C21517 - C21516) * C4582 + (C21519 - C21518) * C47389) *
                         C31197 +
                     ((C22007 - C22006) * C4581 + (C22009 - C22008) * C4577 +
                      (C47018 * C1547 - C21369 * C1544) * C4582 +
                      (C47018 * C1553 - C21369 * C1550) * C47389) *
                         C47391) *
                        C47091 * C47371) *
                       C47365)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  ((((C47018 * C124 - C21369 * C117) * C4581 +
                     (C47018 * C138 - C21369 * C127) * C4577 +
                     (C21484 - C21485) * C4582 + (C21486 - C21487) * C47389) *
                        C31197 +
                    ((C25950 - C25951) * C4581 + (C25952 - C25953) * C4577 +
                     C26440 * C4582 + C26441 * C47389) *
                        C47391) *
                       C47091 * C1010 +
                   (((C21485 - C21484) * C4581 + (C21487 - C21486) * C4577 +
                     (C21489 - C21488) * C4582 + (C21491 - C21490) * C47389) *
                        C31197 +
                    (C26442 * C4581 + C26443 * C4577 + C22312 * C4582 +
                     C22313 * C47389) *
                        C47391) *
                       C47091 * C1011 +
                   ((C21520 * C4581 + C21521 * C4577 +
                     (C21493 - C21492) * C4582 + (C21495 - C21494) * C47389) *
                        C31197 +
                    (C26830 * C4581 + C26831 * C4577 + C22690 * C4582 +
                     C22691 * C47389) *
                        C47391) *
                       C47091 * C1012 +
                   ((C22186 * C4581 + C22187 * C4577 +
                     (C22189 - C22188) * C4582 + (C22191 - C22190) * C47389) *
                        C31197 +
                    (C27290 * C4581 + C27291 * C4577 +
                     (C22692 - C22693) * C4582 + (C22694 - C22695) * C47389) *
                        C47391) *
                       C47091 * C1013 +
                   ((C22196 * C4581 + C22197 * C4577 +
                     (C22193 - C22192) * C4582 + (C22195 - C22194) * C47389) *
                        C31197 +
                    ((C22693 - C22692) * C4581 + (C22695 - C22694) * C4577 +
                     (C47018 * C22686 - C21369 * C22685) * C4582 +
                     (C47018 * C22688 - C21369 * C22687) * C47389) *
                        C47391) *
                       C47091 * C1014) *
                  C47045) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((((C47018 * C124 - C21369 * C117) * C4581 +
                      (C47018 * C138 - C21369 * C127) * C4577 +
                      (C21484 - C21485) * C4582 + (C21486 - C21487) * C47389) *
                         C31197 +
                     ((C25950 - C25951) * C4581 + (C25952 - C25953) * C4577 +
                      C26440 * C4582 + C26441 * C47389) *
                         C47391) *
                        C1664 +
                    (((C25951 - C25950) * C4581 + (C25953 - C25952) * C4577 +
                      C26442 * C4582 + C26443 * C47389) *
                         C31197 +
                     ((C25954 - C25955) * C4581 + (C25956 - C25957) * C4577 +
                      C26826 * C4582 + C26827 * C47389) *
                         C47391) *
                        C1665 +
                    (((C25955 - C25954) * C4581 + (C25957 - C25956) * C4577 +
                      C26828 * C4582 + C26829 * C47389) *
                         C31197 +
                     ((C27670 - C27671) * C4581 + (C27672 - C27673) * C4577 +
                      C28148 * C4582 + C28149 * C47389) *
                         C47391) *
                        C47374) *
                       C47073 * C47407 +
                   ((((C21369 * C118 - C47018 * C125) * C4581 +
                      (C21369 * C128 - C47018 * C139) * C4577 +
                      (C21496 - C21497) * C4582 + (C21498 - C21499) * C47389) *
                         C31197 +
                     ((C25958 - C25959) * C4581 + (C25960 - C25961) * C4577 +
                      C26444 * C4582 + C26445 * C47389) *
                         C47391) *
                        C1664 +
                    (((C25959 - C25958) * C4581 + (C25961 - C25960) * C4577 +
                      C26446 * C4582 + C26447 * C47389) *
                         C31197 +
                     ((C25962 - C25963) * C4581 + (C25964 - C25965) * C4577 +
                      C27876 * C4582 + C27877 * C47389) *
                         C47391) *
                        C1665 +
                    (((C25963 - C25962) * C4581 + (C25965 - C25964) * C4577 +
                      C27878 * C4582 + C27879 * C47389) *
                         C31197 +
                     ((C28014 - C28015) * C4581 + (C28016 - C28017) * C4577 +
                      (C27880 - C27881) * C4582 + (C27882 - C27883) * C47389) *
                         C47391) *
                        C47374) *
                       C47073 * C47394 +
                   ((((C47018 * C126 - C21369 * C119) * C4581 +
                      (C47018 * C140 - C21369 * C129) * C4577 +
                      (C21508 - C21509) * C4582 + (C21510 - C21511) * C47389) *
                         C31197 +
                     ((C25966 - C25967) * C4581 + (C25968 - C25969) * C4577 +
                      C26448 * C4582 + C26449 * C47389) *
                         C47391) *
                        C1664 +
                    (((C25967 - C25966) * C4581 + (C25969 - C25968) * C4577 +
                      C26450 * C4582 + C26451 * C47389) *
                         C31197 +
                     ((C25970 - C25971) * C4581 + (C25972 - C25973) * C4577 +
                      (C25974 - C25975) * C4582 + (C25976 - C25977) * C47389) *
                         C47391) *
                        C1665 +
                    (((C25971 - C25970) * C4581 + (C25973 - C25972) * C4577 +
                      (C25975 - C25974) * C4582 + (C25977 - C25976) * C47389) *
                         C31197 +
                     ((C47018 * C1852 - C21369 * C1846) * C4581 +
                      (C47018 * C1864 - C21369 * C1855) * C4577 +
                      (C47018 * C2227 - C21369 * C2224) * C4582 +
                      (C47018 * C2233 - C21369 * C2230) * C47389) *
                         C47391) *
                        C47374) *
                       C47073 * C47365)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((((C47018 * C124 - C21369 * C117) * C4581 +
                      (C47018 * C138 - C21369 * C127) * C4577 +
                      (C21484 - C21485) * C4582 + (C21486 - C21487) * C47389) *
                         C31197 +
                     ((C25950 - C25951) * C4581 + (C25952 - C25953) * C4577 +
                      C26440 * C4582 + C26441 * C47389) *
                         C47391) *
                        C1664 +
                    (((C25951 - C25950) * C4581 + (C25953 - C25952) * C4577 +
                      C26442 * C4582 + C26443 * C47389) *
                         C31197 +
                     ((C25954 - C25955) * C4581 + (C25956 - C25957) * C4577 +
                      C26826 * C4582 + C26827 * C47389) *
                         C47391) *
                        C1665 +
                    (((C25955 - C25954) * C4581 + (C25957 - C25956) * C4577 +
                      C26828 * C4582 + C26829 * C47389) *
                         C31197 +
                     ((C27670 - C27671) * C4581 + (C27672 - C27673) * C4577 +
                      C28148 * C4582 + C28149 * C47389) *
                         C47391) *
                        C47374) *
                       C47410 +
                   ((((C21485 - C21484) * C4581 + (C21487 - C21486) * C4577 +
                      (C21489 - C21488) * C4582 + (C21491 - C21490) * C47389) *
                         C31197 +
                     (C26442 * C4581 + C26443 * C4577 + C22312 * C4582 +
                      C22313 * C47389) *
                         C47391) *
                        C1664 +
                    ((C26440 * C4581 + C26441 * C4577 + C26830 * C4582 +
                      C26831 * C47389) *
                         C31197 +
                     (C26828 * C4581 + C26829 * C4577 + C22330 * C4582 +
                      C22331 * C47389) *
                         C47391) *
                        C1665 +
                    ((C26826 * C4581 + C26827 * C4577 + C26832 * C4582 +
                      C26833 * C47389) *
                         C31197 +
                     (C28150 * C4581 + C28151 * C4577 +
                      (C23340 - C23341) * C4582 + (C23342 - C23343) * C47389) *
                         C47391) *
                        C47374) *
                       C47398 +
                   (((C21520 * C4581 + C21521 * C4577 +
                      (C21493 - C21492) * C4582 + (C21495 - C21494) * C47389) *
                         C31197 +
                     (C26830 * C4581 + C26831 * C4577 + C22690 * C4582 +
                      C22691 * C47389) *
                         C47391) *
                        C1664 +
                    ((C22312 * C4581 + C22313 * C4577 + C27290 * C4582 +
                      C27291 * C47389) *
                         C31197 +
                     (C26832 * C4581 + C26833 * C4577 +
                      (C22326 - C22327) * C4582 + (C22328 - C22329) * C47389) *
                         C47391) *
                        C1665 +
                    ((C22330 * C4581 + C22331 * C4577 +
                      (C22327 - C22326) * C4582 + (C22329 - C22328) * C47389) *
                         C31197 +
                     ((C23341 - C23340) * C4581 + (C23343 - C23342) * C4577 +
                      (C47018 * C23332 - C21369 * C23331) * C4582 +
                      (C47018 * C23334 - C21369 * C23333) * C47389) *
                         C47391) *
                        C47374) *
                       C47371) *
                  C47045) /
                     (p * q * std::sqrt(p + q));
    d2ee[190] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((((C47018 * C124 - C21369 * C117) * C4581 +
                       (C47018 * C138 - C21369 * C127) * C4577 +
                       (C21484 - C21485) * C4582 + (C21486 - C21487) * C47389) *
                          C31197 +
                      ((C25950 - C25951) * C4581 + (C25952 - C25953) * C4577 +
                       C26440 * C4582 + C26441 * C47389) *
                          C47391) *
                         C3094 +
                     (((C25951 - C25950) * C4581 + (C25953 - C25952) * C4577 +
                       C26442 * C4582 + C26443 * C47389) *
                          C31197 +
                      ((C25954 - C25955) * C4581 + (C25956 - C25957) * C4577 +
                       C26826 * C4582 + C26827 * C47389) *
                          C47391) *
                         C47178) *
                        C47339 +
                    ((((C21485 - C21484) * C4581 + (C21487 - C21486) * C4577 +
                       (C21489 - C21488) * C4582 + (C21491 - C21490) * C47389) *
                          C31197 +
                      (C26442 * C4581 + C26443 * C4577 + C22312 * C4582 +
                       C22313 * C47389) *
                          C47391) *
                         C3094 +
                     ((C26440 * C4581 + C26441 * C4577 + C26830 * C4582 +
                       C26831 * C47389) *
                          C31197 +
                      (C26828 * C4581 + C26829 * C4577 + C22330 * C4582 +
                       C22331 * C47389) *
                          C47391) *
                         C47178) *
                        C47136) *
                       C47050 +
                   (((((C21369 * C118 - C47018 * C125) * C4581 +
                       (C21369 * C128 - C47018 * C139) * C4577 +
                       (C21496 - C21497) * C4582 + (C21498 - C21499) * C47389) *
                          C31197 +
                      ((C25958 - C25959) * C4581 + (C25960 - C25961) * C4577 +
                       C26444 * C4582 + C26445 * C47389) *
                          C47391) *
                         C3094 +
                     (((C25959 - C25958) * C4581 + (C25961 - C25960) * C4577 +
                       C26446 * C4582 + C26447 * C47389) *
                          C31197 +
                      ((C25962 - C25963) * C4581 + (C25964 - C25965) * C4577 +
                       C27876 * C4582 + C27877 * C47389) *
                          C47391) *
                         C47178) *
                        C47339 +
                    ((((C21497 - C21496) * C4581 + (C21499 - C21498) * C4577 +
                       (C21501 - C21500) * C4582 + (C21503 - C21502) * C47389) *
                          C31197 +
                      (C26446 * C4581 + C26447 * C4577 + C22582 * C4582 +
                       C22583 * C47389) *
                          C47391) *
                         C3094 +
                     ((C26444 * C4581 + C26445 * C4577 + C27158 * C4582 +
                       C27159 * C47389) *
                          C31197 +
                      (C27878 * C4581 + C27879 * C4577 +
                       (C23132 - C23133) * C4582 + (C23134 - C23135) * C47389) *
                          C47391) *
                         C47178) *
                        C47136) *
                       C47059 +
                   (((((C47018 * C126 - C21369 * C119) * C4581 +
                       (C47018 * C140 - C21369 * C129) * C4577 +
                       (C21508 - C21509) * C4582 + (C21510 - C21511) * C47389) *
                          C31197 +
                      ((C25966 - C25967) * C4581 + (C25968 - C25969) * C4577 +
                       C26448 * C4582 + C26449 * C47389) *
                          C47391) *
                         C3094 +
                     (((C25967 - C25966) * C4581 + (C25969 - C25968) * C4577 +
                       C26450 * C4582 + C26451 * C47389) *
                          C31197 +
                      ((C25970 - C25971) * C4581 + (C25972 - C25973) * C4577 +
                       (C25974 - C25975) * C4582 + (C25976 - C25977) * C47389) *
                          C47391) *
                         C47178) *
                        C47339 +
                    ((((C21509 - C21508) * C4581 + (C21511 - C21510) * C4577 +
                       (C21513 - C21512) * C4582 + (C21515 - C21514) * C47389) *
                          C31197 +
                      (C26450 * C4581 + C26451 * C4577 +
                       (C22006 - C22007) * C4582 + (C22008 - C22009) * C47389) *
                          C47391) *
                         C3094 +
                     ((C26448 * C4581 + C26449 * C4577 +
                       (C22007 - C22006) * C4582 + (C22009 - C22008) * C47389) *
                          C31197 +
                      ((C25975 - C25974) * C4581 + (C25977 - C25976) * C4577 +
                       (C47018 * C1173 - C21369 * C1158) * C4582 +
                       (C47018 * C1185 - C21369 * C1176) * C47389) *
                          C47391) *
                         C47178) *
                        C47136) *
                       C2703)) /
                 (p * q * std::sqrt(p + q));
    d2ee[191] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((((C47018 * C124 - C21369 * C117) * C4581 +
                       (C47018 * C138 - C21369 * C127) * C4577 +
                       (C21484 - C21485) * C4582 + (C21486 - C21487) * C47389) *
                          C31197 +
                      ((C25950 - C25951) * C4581 + (C25952 - C25953) * C4577 +
                       C26440 * C4582 + C26441 * C47389) *
                          C47391) *
                         C47174 +
                     (((C25951 - C25950) * C4581 + (C25953 - C25952) * C4577 +
                       C26442 * C4582 + C26443 * C47389) *
                          C31197 +
                      ((C25954 - C25955) * C4581 + (C25956 - C25957) * C4577 +
                       C26826 * C4582 + C26827 * C47389) *
                          C47391) *
                         C47181 +
                     (((C25955 - C25954) * C4581 + (C25957 - C25956) * C4577 +
                       C26828 * C4582 + C26829 * C47389) *
                          C31197 +
                      ((C27670 - C27671) * C4581 + (C27672 - C27673) * C4577 +
                       C28148 * C4582 + C28149 * C47389) *
                          C47391) *
                         C3602) *
                        C47339 +
                    ((((C21485 - C21484) * C4581 + (C21487 - C21486) * C4577 +
                       (C21489 - C21488) * C4582 + (C21491 - C21490) * C47389) *
                          C31197 +
                      (C26442 * C4581 + C26443 * C4577 + C22312 * C4582 +
                       C22313 * C47389) *
                          C47391) *
                         C47174 +
                     ((C26440 * C4581 + C26441 * C4577 + C26830 * C4582 +
                       C26831 * C47389) *
                          C31197 +
                      (C26828 * C4581 + C26829 * C4577 + C22330 * C4582 +
                       C22331 * C47389) *
                          C47391) *
                         C47181 +
                     ((C26826 * C4581 + C26827 * C4577 + C26832 * C4582 +
                       C26833 * C47389) *
                          C31197 +
                      (C28150 * C4581 + C28151 * C4577 +
                       (C23340 - C23341) * C4582 + (C23342 - C23343) * C47389) *
                          C47391) *
                         C3602) *
                        C47136) *
                       C2440 +
                   (((((C21369 * C118 - C47018 * C125) * C4581 +
                       (C21369 * C128 - C47018 * C139) * C4577 +
                       (C21496 - C21497) * C4582 + (C21498 - C21499) * C47389) *
                          C31197 +
                      ((C25958 - C25959) * C4581 + (C25960 - C25961) * C4577 +
                       C26444 * C4582 + C26445 * C47389) *
                          C47391) *
                         C47174 +
                     (((C25959 - C25958) * C4581 + (C25961 - C25960) * C4577 +
                       C26446 * C4582 + C26447 * C47389) *
                          C31197 +
                      ((C25962 - C25963) * C4581 + (C25964 - C25965) * C4577 +
                       C27876 * C4582 + C27877 * C47389) *
                          C47391) *
                         C47181 +
                     (((C25963 - C25962) * C4581 + (C25965 - C25964) * C4577 +
                       C27878 * C4582 + C27879 * C47389) *
                          C31197 +
                      ((C28014 - C28015) * C4581 + (C28016 - C28017) * C4577 +
                       (C27880 - C27881) * C4582 + (C27882 - C27883) * C47389) *
                          C47391) *
                         C3602) *
                        C47339 +
                    ((((C21497 - C21496) * C4581 + (C21499 - C21498) * C4577 +
                       (C21501 - C21500) * C4582 + (C21503 - C21502) * C47389) *
                          C31197 +
                      (C26446 * C4581 + C26447 * C4577 + C22582 * C4582 +
                       C22583 * C47389) *
                          C47391) *
                         C47174 +
                     ((C26444 * C4581 + C26445 * C4577 + C27158 * C4582 +
                       C27159 * C47389) *
                          C31197 +
                      (C27878 * C4581 + C27879 * C4577 +
                       (C23132 - C23133) * C4582 + (C23134 - C23135) * C47389) *
                          C47391) *
                         C47181 +
                     ((C27876 * C4581 + C27877 * C4577 +
                       (C23133 - C23132) * C4582 + (C23135 - C23134) * C47389) *
                          C31197 +
                      ((C27881 - C27880) * C4581 + (C27883 - C27882) * C4577 +
                       (C47018 * C7172 - C21369 * C7170) * C4582 +
                       (C47018 * C7176 - C21369 * C7174) * C47389) *
                          C47391) *
                         C3602) *
                        C47136) *
                       C47056)) /
                 (p * q * std::sqrt(p + q));
    d2ee[192] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((((C47018 * C124 - C21369 * C117) * C4581 +
                       (C47018 * C138 - C21369 * C127) * C4577 +
                       (C21484 - C21485) * C4582 + (C21486 - C21487) * C47389) *
                          C31197 +
                      ((C25950 - C25951) * C4581 + (C25952 - C25953) * C4577 +
                       C26440 * C4582 + C26441 * C47389) *
                          C47391) *
                         C3094 +
                     (((C25951 - C25950) * C4581 + (C25953 - C25952) * C4577 +
                       C26442 * C4582 + C26443 * C47389) *
                          C31197 +
                      ((C25954 - C25955) * C4581 + (C25956 - C25957) * C4577 +
                       C26826 * C4582 + C26827 * C47389) *
                          C47391) *
                         C47178) *
                        C47410 +
                    ((((C21485 - C21484) * C4581 + (C21487 - C21486) * C4577 +
                       (C21489 - C21488) * C4582 + (C21491 - C21490) * C47389) *
                          C31197 +
                      (C26442 * C4581 + C26443 * C4577 + C22312 * C4582 +
                       C22313 * C47389) *
                          C47391) *
                         C3094 +
                     ((C26440 * C4581 + C26441 * C4577 + C26830 * C4582 +
                       C26831 * C47389) *
                          C31197 +
                      (C26828 * C4581 + C26829 * C4577 + C22330 * C4582 +
                       C22331 * C47389) *
                          C47391) *
                         C47178) *
                        C47398 +
                    (((C21520 * C4581 + C21521 * C4577 +
                       (C21493 - C21492) * C4582 + (C21495 - C21494) * C47389) *
                          C31197 +
                      (C26830 * C4581 + C26831 * C4577 + C22690 * C4582 +
                       C22691 * C47389) *
                          C47391) *
                         C3094 +
                     ((C22312 * C4581 + C22313 * C4577 + C27290 * C4582 +
                       C27291 * C47389) *
                          C31197 +
                      (C26832 * C4581 + C26833 * C4577 +
                       (C22326 - C22327) * C4582 + (C22328 - C22329) * C47389) *
                          C47391) *
                         C47178) *
                        C47371) *
                       C2440 +
                   (((((C21369 * C118 - C47018 * C125) * C4581 +
                       (C21369 * C128 - C47018 * C139) * C4577 +
                       (C21496 - C21497) * C4582 + (C21498 - C21499) * C47389) *
                          C31197 +
                      ((C25958 - C25959) * C4581 + (C25960 - C25961) * C4577 +
                       C26444 * C4582 + C26445 * C47389) *
                          C47391) *
                         C3094 +
                     (((C25959 - C25958) * C4581 + (C25961 - C25960) * C4577 +
                       C26446 * C4582 + C26447 * C47389) *
                          C31197 +
                      ((C25962 - C25963) * C4581 + (C25964 - C25965) * C4577 +
                       C27876 * C4582 + C27877 * C47389) *
                          C47391) *
                         C47178) *
                        C47410 +
                    ((((C21497 - C21496) * C4581 + (C21499 - C21498) * C4577 +
                       (C21501 - C21500) * C4582 + (C21503 - C21502) * C47389) *
                          C31197 +
                      (C26446 * C4581 + C26447 * C4577 + C22582 * C4582 +
                       C22583 * C47389) *
                          C47391) *
                         C3094 +
                     ((C26444 * C4581 + C26445 * C4577 + C27158 * C4582 +
                       C27159 * C47389) *
                          C31197 +
                      (C27878 * C4581 + C27879 * C4577 +
                       (C23132 - C23133) * C4582 + (C23134 - C23135) * C47389) *
                          C47391) *
                         C47178) *
                        C47398 +
                    (((C21522 * C4581 + C21523 * C4577 +
                       (C21505 - C21504) * C4582 + (C21507 - C21506) * C47389) *
                          C31197 +
                      (C27158 * C4581 + C27159 * C4577 +
                       (C22584 - C22585) * C4582 + (C22586 - C22587) * C47389) *
                          C47391) *
                         C3094 +
                     ((C22582 * C4581 + C22583 * C4577 +
                       (C22585 - C22584) * C4582 + (C22587 - C22586) * C47389) *
                          C31197 +
                      ((C23133 - C23132) * C4581 + (C23135 - C23134) * C4577 +
                       (C47018 * C5810 - C21369 * C5808) * C4582 +
                       (C47018 * C5814 - C21369 * C5812) * C47389) *
                          C47391) *
                         C47178) *
                        C47371) *
                       C47056)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((((C47018 * C124 - C21369 * C117) * C4581 +
                      (C47018 * C138 - C21369 * C127) * C4577 +
                      (C21484 - C21485) * C4582 + (C21486 - C21487) * C47389) *
                         C31197 +
                     ((C25950 - C25951) * C4581 + (C25952 - C25953) * C4577 +
                      C26440 * C4582 + C26441 * C47389) *
                         C47391) *
                        C3094 +
                    (((C25951 - C25950) * C4581 + (C25953 - C25952) * C4577 +
                      C26442 * C4582 + C26443 * C47389) *
                         C31197 +
                     ((C25954 - C25955) * C4581 + (C25956 - C25957) * C4577 +
                      C26826 * C4582 + C26827 * C47389) *
                         C47391) *
                        C47178) *
                       C47073 * C47416 +
                   ((((C21369 * C118 - C47018 * C125) * C4581 +
                      (C21369 * C128 - C47018 * C139) * C4577 +
                      (C21496 - C21497) * C4582 + (C21498 - C21499) * C47389) *
                         C31197 +
                     ((C25958 - C25959) * C4581 + (C25960 - C25961) * C4577 +
                      C26444 * C4582 + C26445 * C47389) *
                         C47391) *
                        C3094 +
                    (((C25959 - C25958) * C4581 + (C25961 - C25960) * C4577 +
                      C26446 * C4582 + C26447 * C47389) *
                         C31197 +
                     ((C25962 - C25963) * C4581 + (C25964 - C25965) * C4577 +
                      C27876 * C4582 + C27877 * C47389) *
                         C47391) *
                        C47178) *
                       C47073 * C47409 +
                   ((((C47018 * C126 - C21369 * C119) * C4581 +
                      (C47018 * C140 - C21369 * C129) * C4577 +
                      (C21508 - C21509) * C4582 + (C21510 - C21511) * C47389) *
                         C31197 +
                     ((C25966 - C25967) * C4581 + (C25968 - C25969) * C4577 +
                      C26448 * C4582 + C26449 * C47389) *
                         C47391) *
                        C3094 +
                    (((C25967 - C25966) * C4581 + (C25969 - C25968) * C4577 +
                      C26450 * C4582 + C26451 * C47389) *
                         C31197 +
                     ((C25970 - C25971) * C4581 + (C25972 - C25973) * C4577 +
                      (C25974 - C25975) * C4582 + (C25976 - C25977) * C47389) *
                         C47391) *
                        C47178) *
                       C47073 * C47396 +
                   ((((C21369 * C120 - C47018 * C130) * C4581 +
                      (C21369 * C131 - C47018 * C141) * C4577 +
                      (C21734 - C21735) * C4582 + (C21736 - C21737) * C47389) *
                         C31197 +
                     ((C26242 - C26243) * C4581 + (C26244 - C26245) * C4577 +
                      (C26108 - C26109) * C4582 + (C26110 - C26111) * C47389) *
                         C47391) *
                        C3094 +
                    (((C26243 - C26242) * C4581 + (C26245 - C26244) * C4577 +
                      (C26109 - C26108) * C4582 + (C26111 - C26110) * C47389) *
                         C31197 +
                     ((C47018 * C438 - C21369 * C421) * C4581 +
                      (C47018 * C451 - C21369 * C439) * C4577 +
                      (C47018 * C2015 - C21369 * C2014) * C4582 +
                      (C47018 * C2017 - C21369 * C2016) * C47389) *
                         C47391) *
                        C47178) *
                       C47073 * C47375)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  (((((C47018 * C124 - C21369 * C117) * C4581 +
                      (C47018 * C138 - C21369 * C127) * C4577 +
                      (C21484 - C21485) * C4582 + (C21486 - C21487) * C47389) *
                         C31197 +
                     ((C25950 - C25951) * C4581 + (C25952 - C25953) * C4577 +
                      C26440 * C4582 + C26441 * C47389) *
                         C47391) *
                        C47418 +
                    (((C25951 - C25950) * C4581 + (C25953 - C25952) * C4577 +
                      C26442 * C4582 + C26443 * C47389) *
                         C31197 +
                     ((C25954 - C25955) * C4581 + (C25956 - C25957) * C4577 +
                      C26826 * C4582 + C26827 * C47389) *
                         C47391) *
                        C47415 +
                    (((C25955 - C25954) * C4581 + (C25957 - C25956) * C4577 +
                      C26828 * C4582 + C26829 * C47389) *
                         C31197 +
                     ((C27670 - C27671) * C4581 + (C27672 - C27673) * C4577 +
                      C28148 * C4582 + C28149 * C47389) *
                         C47391) *
                        C47406 +
                    (((C27671 - C27670) * C4581 + (C27673 - C27672) * C4577 +
                      C28150 * C4582 + C28151 * C47389) *
                         C31197 +
                     ((C27674 - C27675) * C4581 + (C27676 - C27677) * C4577 +
                      (C27678 - C27679) * C4582 + (C27680 - C27681) * C47389) *
                         C47391) *
                        C47387) *
                       C47073 * C2440 +
                   ((((C21369 * C118 - C47018 * C125) * C4581 +
                      (C21369 * C128 - C47018 * C139) * C4577 +
                      (C21496 - C21497) * C4582 + (C21498 - C21499) * C47389) *
                         C31197 +
                     ((C25958 - C25959) * C4581 + (C25960 - C25961) * C4577 +
                      C26444 * C4582 + C26445 * C47389) *
                         C47391) *
                        C47418 +
                    (((C25959 - C25958) * C4581 + (C25961 - C25960) * C4577 +
                      C26446 * C4582 + C26447 * C47389) *
                         C31197 +
                     ((C25962 - C25963) * C4581 + (C25964 - C25965) * C4577 +
                      C27876 * C4582 + C27877 * C47389) *
                         C47391) *
                        C47415 +
                    (((C25963 - C25962) * C4581 + (C25965 - C25964) * C4577 +
                      C27878 * C4582 + C27879 * C47389) *
                         C31197 +
                     ((C28014 - C28015) * C4581 + (C28016 - C28017) * C4577 +
                      (C27880 - C27881) * C4582 + (C27882 - C27883) * C47389) *
                         C47391) *
                        C47406 +
                    (((C28015 - C28014) * C4581 + (C28017 - C28016) * C4577 +
                      (C27881 - C27880) * C4582 + (C27883 - C27882) * C47389) *
                         C31197 +
                     ((C47018 * C1857 - C21369 * C1848) * C4581 +
                      (C47018 * C1866 - C21369 * C1860) * C4577 +
                      (C47018 * C6702 - C21369 * C6700) * C4582 +
                      (C47018 * C6706 - C21369 * C6704) * C47389) *
                         C47391) *
                        C47387) *
                       C47073 * C47056)) /
                     (p * q * std::sqrt(p + q));
    d2ee[193] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((((C47018 * C124 - C21369 * C117) * C4581 +
                      (C47018 * C138 - C21369 * C127) * C4577 +
                      (C21484 - C21485) * C4582 + (C21486 - C21487) * C47389) *
                         C31197 +
                     ((C25950 - C25951) * C4581 + (C25952 - C25953) * C4577 +
                      C26440 * C4582 + C26441 * C47389) *
                         C47391) *
                        C47174 +
                    (((C25951 - C25950) * C4581 + (C25953 - C25952) * C4577 +
                      C26442 * C4582 + C26443 * C47389) *
                         C31197 +
                     ((C25954 - C25955) * C4581 + (C25956 - C25957) * C4577 +
                      C26826 * C4582 + C26827 * C47389) *
                         C47391) *
                        C47181 +
                    (((C25955 - C25954) * C4581 + (C25957 - C25956) * C4577 +
                      C26828 * C4582 + C26829 * C47389) *
                         C31197 +
                     ((C27670 - C27671) * C4581 + (C27672 - C27673) * C4577 +
                      C28148 * C4582 + C28149 * C47389) *
                         C47391) *
                        C3602) *
                       C47073 * C47050 +
                   ((((C21369 * C118 - C47018 * C125) * C4581 +
                      (C21369 * C128 - C47018 * C139) * C4577 +
                      (C21496 - C21497) * C4582 + (C21498 - C21499) * C47389) *
                         C31197 +
                     ((C25958 - C25959) * C4581 + (C25960 - C25961) * C4577 +
                      C26444 * C4582 + C26445 * C47389) *
                         C47391) *
                        C47174 +
                    (((C25959 - C25958) * C4581 + (C25961 - C25960) * C4577 +
                      C26446 * C4582 + C26447 * C47389) *
                         C31197 +
                     ((C25962 - C25963) * C4581 + (C25964 - C25965) * C4577 +
                      C27876 * C4582 + C27877 * C47389) *
                         C47391) *
                        C47181 +
                    (((C25963 - C25962) * C4581 + (C25965 - C25964) * C4577 +
                      C27878 * C4582 + C27879 * C47389) *
                         C31197 +
                     ((C28014 - C28015) * C4581 + (C28016 - C28017) * C4577 +
                      (C27880 - C27881) * C4582 + (C27882 - C27883) * C47389) *
                         C47391) *
                        C3602) *
                       C47073 * C47059 +
                   ((((C47018 * C126 - C21369 * C119) * C4581 +
                      (C47018 * C140 - C21369 * C129) * C4577 +
                      (C21508 - C21509) * C4582 + (C21510 - C21511) * C47389) *
                         C31197 +
                     ((C25966 - C25967) * C4581 + (C25968 - C25969) * C4577 +
                      C26448 * C4582 + C26449 * C47389) *
                         C47391) *
                        C47174 +
                    (((C25967 - C25966) * C4581 + (C25969 - C25968) * C4577 +
                      C26450 * C4582 + C26451 * C47389) *
                         C31197 +
                     ((C25970 - C25971) * C4581 + (C25972 - C25973) * C4577 +
                      (C25974 - C25975) * C4582 + (C25976 - C25977) * C47389) *
                         C47391) *
                        C47181 +
                    (((C25971 - C25970) * C4581 + (C25973 - C25972) * C4577 +
                      (C25975 - C25974) * C4582 + (C25977 - C25976) * C47389) *
                         C31197 +
                     ((C47018 * C1852 - C21369 * C1846) * C4581 +
                      (C47018 * C1864 - C21369 * C1855) * C4577 +
                      (C47018 * C2227 - C21369 * C2224) * C4582 +
                      (C47018 * C2233 - C21369 * C2230) * C47389) *
                         C47391) *
                        C3602) *
                       C47073 * C2703)) /
                 (p * q * std::sqrt(p + q));
    d2ee[194] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((((C47018 * C124 - C21369 * C117) * C4581 +
                      (C47018 * C138 - C21369 * C127) * C4577 +
                      (C21484 - C21485) * C4582 + (C21486 - C21487) * C47389) *
                         C31197 +
                     ((C25950 - C25951) * C4581 + (C25952 - C25953) * C4577 +
                      C26440 * C4582 + C26441 * C47389) *
                         C47391) *
                        C3094 +
                    (((C25951 - C25950) * C4581 + (C25953 - C25952) * C4577 +
                      C26442 * C4582 + C26443 * C47389) *
                         C31197 +
                     ((C25954 - C25955) * C4581 + (C25956 - C25957) * C4577 +
                      C26826 * C4582 + C26827 * C47389) *
                         C47391) *
                        C47178) *
                       C47073 * C47416 +
                   ((((C21369 * C118 - C47018 * C125) * C4581 +
                      (C21369 * C128 - C47018 * C139) * C4577 +
                      (C21496 - C21497) * C4582 + (C21498 - C21499) * C47389) *
                         C31197 +
                     ((C25958 - C25959) * C4581 + (C25960 - C25961) * C4577 +
                      C26444 * C4582 + C26445 * C47389) *
                         C47391) *
                        C3094 +
                    (((C25959 - C25958) * C4581 + (C25961 - C25960) * C4577 +
                      C26446 * C4582 + C26447 * C47389) *
                         C31197 +
                     ((C25962 - C25963) * C4581 + (C25964 - C25965) * C4577 +
                      C27876 * C4582 + C27877 * C47389) *
                         C47391) *
                        C47178) *
                       C47073 * C47409 +
                   ((((C47018 * C126 - C21369 * C119) * C4581 +
                      (C47018 * C140 - C21369 * C129) * C4577 +
                      (C21508 - C21509) * C4582 + (C21510 - C21511) * C47389) *
                         C31197 +
                     ((C25966 - C25967) * C4581 + (C25968 - C25969) * C4577 +
                      C26448 * C4582 + C26449 * C47389) *
                         C47391) *
                        C3094 +
                    (((C25967 - C25966) * C4581 + (C25969 - C25968) * C4577 +
                      C26450 * C4582 + C26451 * C47389) *
                         C31197 +
                     ((C25970 - C25971) * C4581 + (C25972 - C25973) * C4577 +
                      (C25974 - C25975) * C4582 + (C25976 - C25977) * C47389) *
                         C47391) *
                        C47178) *
                       C47073 * C47396 +
                   ((((C21369 * C120 - C47018 * C130) * C4581 +
                      (C21369 * C131 - C47018 * C141) * C4577 +
                      (C21734 - C21735) * C4582 + (C21736 - C21737) * C47389) *
                         C31197 +
                     ((C26242 - C26243) * C4581 + (C26244 - C26245) * C4577 +
                      (C26108 - C26109) * C4582 + (C26110 - C26111) * C47389) *
                         C47391) *
                        C3094 +
                    (((C26243 - C26242) * C4581 + (C26245 - C26244) * C4577 +
                      (C26109 - C26108) * C4582 + (C26111 - C26110) * C47389) *
                         C31197 +
                     ((C47018 * C438 - C21369 * C421) * C4581 +
                      (C47018 * C451 - C21369 * C439) * C4577 +
                      (C47018 * C2015 - C21369 * C2014) * C4582 +
                      (C47018 * C2017 - C21369 * C2016) * C47389) *
                         C47391) *
                        C47178) *
                       C47073 * C47375)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((((C47018 * C124 - C21369 * C117) * C4581 +
                       (C47018 * C138 - C21369 * C127) * C4577 +
                       (C21484 - C21485) * C4582 + (C21486 - C21487) * C47389) *
                          C31197 +
                      ((C25950 - C25951) * C4581 + (C25952 - C25953) * C4577 +
                       C26440 * C4582 + C26441 * C47389) *
                          C47391) *
                         C3094 +
                     (((C25951 - C25950) * C4581 + (C25953 - C25952) * C4577 +
                       C26442 * C4582 + C26443 * C47389) *
                          C31197 +
                      ((C25954 - C25955) * C4581 + (C25956 - C25957) * C4577 +
                       C26826 * C4582 + C26827 * C47389) *
                          C47391) *
                         C47178) *
                        C47410 +
                    ((((C21485 - C21484) * C4581 + (C21487 - C21486) * C4577 +
                       (C21489 - C21488) * C4582 + (C21491 - C21490) * C47389) *
                          C31197 +
                      (C26442 * C4581 + C26443 * C4577 + C22312 * C4582 +
                       C22313 * C47389) *
                          C47391) *
                         C3094 +
                     ((C26440 * C4581 + C26441 * C4577 + C26830 * C4582 +
                       C26831 * C47389) *
                          C31197 +
                      (C26828 * C4581 + C26829 * C4577 + C22330 * C4582 +
                       C22331 * C47389) *
                          C47391) *
                         C47178) *
                        C47398 +
                    (((C21520 * C4581 + C21521 * C4577 +
                       (C21493 - C21492) * C4582 + (C21495 - C21494) * C47389) *
                          C31197 +
                      (C26830 * C4581 + C26831 * C4577 + C22690 * C4582 +
                       C22691 * C47389) *
                          C47391) *
                         C3094 +
                     ((C22312 * C4581 + C22313 * C4577 + C27290 * C4582 +
                       C27291 * C47389) *
                          C31197 +
                      (C26832 * C4581 + C26833 * C4577 +
                       (C22326 - C22327) * C4582 + (C22328 - C22329) * C47389) *
                          C47391) *
                         C47178) *
                        C47371) *
                       C2440 +
                   (((((C21369 * C118 - C47018 * C125) * C4581 +
                       (C21369 * C128 - C47018 * C139) * C4577 +
                       (C21496 - C21497) * C4582 + (C21498 - C21499) * C47389) *
                          C31197 +
                      ((C25958 - C25959) * C4581 + (C25960 - C25961) * C4577 +
                       C26444 * C4582 + C26445 * C47389) *
                          C47391) *
                         C3094 +
                     (((C25959 - C25958) * C4581 + (C25961 - C25960) * C4577 +
                       C26446 * C4582 + C26447 * C47389) *
                          C31197 +
                      ((C25962 - C25963) * C4581 + (C25964 - C25965) * C4577 +
                       C27876 * C4582 + C27877 * C47389) *
                          C47391) *
                         C47178) *
                        C47410 +
                    ((((C21497 - C21496) * C4581 + (C21499 - C21498) * C4577 +
                       (C21501 - C21500) * C4582 + (C21503 - C21502) * C47389) *
                          C31197 +
                      (C26446 * C4581 + C26447 * C4577 + C22582 * C4582 +
                       C22583 * C47389) *
                          C47391) *
                         C3094 +
                     ((C26444 * C4581 + C26445 * C4577 + C27158 * C4582 +
                       C27159 * C47389) *
                          C31197 +
                      (C27878 * C4581 + C27879 * C4577 +
                       (C23132 - C23133) * C4582 + (C23134 - C23135) * C47389) *
                          C47391) *
                         C47178) *
                        C47398 +
                    (((C21522 * C4581 + C21523 * C4577 +
                       (C21505 - C21504) * C4582 + (C21507 - C21506) * C47389) *
                          C31197 +
                      (C27158 * C4581 + C27159 * C4577 +
                       (C22584 - C22585) * C4582 + (C22586 - C22587) * C47389) *
                          C47391) *
                         C3094 +
                     ((C22582 * C4581 + C22583 * C4577 +
                       (C22585 - C22584) * C4582 + (C22587 - C22586) * C47389) *
                          C31197 +
                      ((C23133 - C23132) * C4581 + (C23135 - C23134) * C4577 +
                       (C47018 * C5810 - C21369 * C5808) * C4582 +
                       (C47018 * C5814 - C21369 * C5812) * C47389) *
                          C47391) *
                         C47178) *
                        C47371) *
                       C47056)) /
                     (p * q * std::sqrt(p + q));
    d2ee[195] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((((C47018 * C124 - C21369 * C117) * C4581 +
                      (C47018 * C138 - C21369 * C127) * C4577 +
                      (C21484 - C21485) * C4582 + (C21486 - C21487) * C47389) *
                         C31197 +
                     ((C25950 - C25951) * C4581 + (C25952 - C25953) * C4577 +
                      C26440 * C4582 + C26441 * C47389) *
                         C47391) *
                        C47091 * C47339 +
                    (((C21485 - C21484) * C4581 + (C21487 - C21486) * C4577 +
                      (C21489 - C21488) * C4582 + (C21491 - C21490) * C47389) *
                         C31197 +
                     (C26442 * C4581 + C26443 * C4577 + C22312 * C4582 +
                      C22313 * C47389) *
                         C47391) *
                        C47091 * C47136) *
                       C554 +
                   ((((C21369 * C118 - C47018 * C125) * C4581 +
                      (C21369 * C128 - C47018 * C139) * C4577 +
                      (C21496 - C21497) * C4582 + (C21498 - C21499) * C47389) *
                         C31197 +
                     ((C25958 - C25959) * C4581 + (C25960 - C25961) * C4577 +
                      C26444 * C4582 + C26445 * C47389) *
                         C47391) *
                        C47091 * C47339 +
                    (((C21497 - C21496) * C4581 + (C21499 - C21498) * C4577 +
                      (C21501 - C21500) * C4582 + (C21503 - C21502) * C47389) *
                         C31197 +
                     (C26446 * C4581 + C26447 * C4577 + C22582 * C4582 +
                      C22583 * C47389) *
                         C47391) *
                        C47091 * C47136) *
                       C555 +
                   ((((C47018 * C126 - C21369 * C119) * C4581 +
                      (C47018 * C140 - C21369 * C129) * C4577 +
                      (C21508 - C21509) * C4582 + (C21510 - C21511) * C47389) *
                         C31197 +
                     ((C25966 - C25967) * C4581 + (C25968 - C25969) * C4577 +
                      C26448 * C4582 + C26449 * C47389) *
                         C47391) *
                        C47091 * C47339 +
                    (((C21509 - C21508) * C4581 + (C21511 - C21510) * C4577 +
                      (C21513 - C21512) * C4582 + (C21515 - C21514) * C47389) *
                         C31197 +
                     (C26450 * C4581 + C26451 * C4577 +
                      (C22006 - C22007) * C4582 + (C22008 - C22009) * C47389) *
                         C47391) *
                        C47091 * C47136) *
                       C556 +
                   ((((C21369 * C120 - C47018 * C130) * C4581 +
                      (C21369 * C131 - C47018 * C141) * C4577 +
                      (C21734 - C21735) * C4582 + (C21736 - C21737) * C47389) *
                         C31197 +
                     ((C26242 - C26243) * C4581 + (C26244 - C26245) * C4577 +
                      (C26108 - C26109) * C4582 + (C26110 - C26111) * C47389) *
                         C47391) *
                        C47091 * C47339 +
                    (((C21735 - C21734) * C4581 + (C21737 - C21736) * C4577 +
                      (C21739 - C21738) * C4582 + (C21741 - C21740) * C47389) *
                         C31197 +
                     ((C26109 - C26108) * C4581 + (C26111 - C26110) * C4577 +
                      (C47018 * C1441 - C21369 * C1440) * C4582 +
                      (C47018 * C1443 - C21369 * C1442) * C47389) *
                         C47391) *
                        C47091 * C47136) *
                       C47375)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((((C47018 * C124 - C21369 * C117) * C4581 +
                      (C47018 * C138 - C21369 * C127) * C4577 +
                      (C21484 - C21485) * C4582 + (C21486 - C21487) * C47389) *
                         C31197 +
                     ((C25950 - C25951) * C4581 + (C25952 - C25953) * C4577 +
                      C26440 * C4582 + C26441 * C47389) *
                         C47391) *
                        C47091 * C1284 +
                    (((C21485 - C21484) * C4581 + (C21487 - C21486) * C4577 +
                      (C21489 - C21488) * C4582 + (C21491 - C21490) * C47389) *
                         C31197 +
                     (C26442 * C4581 + C26443 * C4577 + C22312 * C4582 +
                      C22313 * C47389) *
                         C47391) *
                        C47091 * C1285 +
                    ((C21520 * C4581 + C21521 * C4577 +
                      (C21493 - C21492) * C4582 + (C21495 - C21494) * C47389) *
                         C31197 +
                     (C26830 * C4581 + C26831 * C4577 + C22690 * C4582 +
                      C22691 * C47389) *
                         C47391) *
                        C47091 * C1286 +
                    ((C22186 * C4581 + C22187 * C4577 +
                      (C22189 - C22188) * C4582 + (C22191 - C22190) * C47389) *
                         C31197 +
                     (C27290 * C4581 + C27291 * C4577 +
                      (C22692 - C22693) * C4582 + (C22694 - C22695) * C47389) *
                         C47391) *
                        C47091 * C47381) *
                       C47325 +
                   ((((C21369 * C118 - C47018 * C125) * C4581 +
                      (C21369 * C128 - C47018 * C139) * C4577 +
                      (C21496 - C21497) * C4582 + (C21498 - C21499) * C47389) *
                         C31197 +
                     ((C25958 - C25959) * C4581 + (C25960 - C25961) * C4577 +
                      C26444 * C4582 + C26445 * C47389) *
                         C47391) *
                        C47091 * C1284 +
                    (((C21497 - C21496) * C4581 + (C21499 - C21498) * C4577 +
                      (C21501 - C21500) * C4582 + (C21503 - C21502) * C47389) *
                         C31197 +
                     (C26446 * C4581 + C26447 * C4577 + C22582 * C4582 +
                      C22583 * C47389) *
                         C47391) *
                        C47091 * C1285 +
                    ((C21522 * C4581 + C21523 * C4577 +
                      (C21505 - C21504) * C4582 + (C21507 - C21506) * C47389) *
                         C31197 +
                     (C27158 * C4581 + C27159 * C4577 +
                      (C22584 - C22585) * C4582 + (C22586 - C22587) * C47389) *
                         C47391) *
                        C47091 * C1286 +
                    ((C22430 * C4581 + C22431 * C4577 +
                      (C22433 - C22432) * C4582 + (C22435 - C22434) * C47389) *
                         C31197 +
                     ((C22585 - C22584) * C4581 + (C22587 - C22586) * C4577 +
                      (C47018 * C6312 - C21369 * C6310) * C4582 +
                      (C47018 * C6316 - C21369 * C6314) * C47389) *
                         C47391) *
                        C47091 * C47381) *
                       C47056)) /
                     (p * q * std::sqrt(p + q));
    d2ee[196] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((((C47018 * C124 - C21369 * C117) * C4581 +
                       (C47018 * C138 - C21369 * C127) * C4577 +
                       (C21484 - C21485) * C4582 + (C21486 - C21487) * C47389) *
                          C31197 +
                      ((C25950 - C25951) * C4581 + (C25952 - C25953) * C4577 +
                       C26440 * C4582 + C26441 * C47389) *
                          C47391) *
                         C47340 +
                     (((C25951 - C25950) * C4581 + (C25953 - C25952) * C4577 +
                       C26442 * C4582 + C26443 * C47389) *
                          C31197 +
                      ((C25954 - C25955) * C4581 + (C25956 - C25957) * C4577 +
                       C26826 * C4582 + C26827 * C47389) *
                          C47391) *
                         C47178) *
                        C47339 +
                    ((((C21485 - C21484) * C4581 + (C21487 - C21486) * C4577 +
                       (C21489 - C21488) * C4582 + (C21491 - C21490) * C47389) *
                          C31197 +
                      (C26442 * C4581 + C26443 * C4577 + C22312 * C4582 +
                       C22313 * C47389) *
                          C47391) *
                         C47340 +
                     ((C26440 * C4581 + C26441 * C4577 + C26830 * C4582 +
                       C26831 * C47389) *
                          C31197 +
                      (C26828 * C4581 + C26829 * C4577 + C22330 * C4582 +
                       C22331 * C47389) *
                          C47391) *
                         C47178) *
                        C47136) *
                       C258 +
                   (((((C21369 * C118 - C47018 * C125) * C4581 +
                       (C21369 * C128 - C47018 * C139) * C4577 +
                       (C21496 - C21497) * C4582 + (C21498 - C21499) * C47389) *
                          C31197 +
                      ((C25958 - C25959) * C4581 + (C25960 - C25961) * C4577 +
                       C26444 * C4582 + C26445 * C47389) *
                          C47391) *
                         C47340 +
                     (((C25959 - C25958) * C4581 + (C25961 - C25960) * C4577 +
                       C26446 * C4582 + C26447 * C47389) *
                          C31197 +
                      ((C25962 - C25963) * C4581 + (C25964 - C25965) * C4577 +
                       C27876 * C4582 + C27877 * C47389) *
                          C47391) *
                         C47178) *
                        C47339 +
                    ((((C21497 - C21496) * C4581 + (C21499 - C21498) * C4577 +
                       (C21501 - C21500) * C4582 + (C21503 - C21502) * C47389) *
                          C31197 +
                      (C26446 * C4581 + C26447 * C4577 + C22582 * C4582 +
                       C22583 * C47389) *
                          C47391) *
                         C47340 +
                     ((C26444 * C4581 + C26445 * C4577 + C27158 * C4582 +
                       C27159 * C47389) *
                          C31197 +
                      (C27878 * C4581 + C27879 * C4577 +
                       (C23132 - C23133) * C4582 + (C23134 - C23135) * C47389) *
                          C47391) *
                         C47178) *
                        C47136) *
                       C259 +
                   (((((C47018 * C126 - C21369 * C119) * C4581 +
                       (C47018 * C140 - C21369 * C129) * C4577 +
                       (C21508 - C21509) * C4582 + (C21510 - C21511) * C47389) *
                          C31197 +
                      ((C25966 - C25967) * C4581 + (C25968 - C25969) * C4577 +
                       C26448 * C4582 + C26449 * C47389) *
                          C47391) *
                         C47340 +
                     (((C25967 - C25966) * C4581 + (C25969 - C25968) * C4577 +
                       C26450 * C4582 + C26451 * C47389) *
                          C31197 +
                      ((C25970 - C25971) * C4581 + (C25972 - C25973) * C4577 +
                       (C25974 - C25975) * C4582 + (C25976 - C25977) * C47389) *
                          C47391) *
                         C47178) *
                        C47339 +
                    ((((C21509 - C21508) * C4581 + (C21511 - C21510) * C4577 +
                       (C21513 - C21512) * C4582 + (C21515 - C21514) * C47389) *
                          C31197 +
                      (C26450 * C4581 + C26451 * C4577 +
                       (C22006 - C22007) * C4582 + (C22008 - C22009) * C47389) *
                          C47391) *
                         C47340 +
                     ((C26448 * C4581 + C26449 * C4577 +
                       (C22007 - C22006) * C4582 + (C22009 - C22008) * C47389) *
                          C31197 +
                      ((C25975 - C25974) * C4581 + (C25977 - C25976) * C4577 +
                       (C47018 * C1173 - C21369 * C1158) * C4582 +
                       (C47018 * C1185 - C21369 * C1176) * C47389) *
                          C47391) *
                         C47178) *
                        C47136) *
                       C47365)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((((C47018 * C124 - C21369 * C117) * C4581 +
                      (C47018 * C138 - C21369 * C127) * C4577 +
                      (C21484 - C21485) * C4582 + (C21486 - C21487) * C47389) *
                         C31197 +
                     ((C25950 - C25951) * C4581 + (C25952 - C25953) * C4577 +
                      C26440 * C4582 + C26441 * C47389) *
                         C47391) *
                        C47340 +
                    (((C25951 - C25950) * C4581 + (C25953 - C25952) * C4577 +
                      C26442 * C4582 + C26443 * C47389) *
                         C31197 +
                     ((C25954 - C25955) * C4581 + (C25956 - C25957) * C4577 +
                      C26826 * C4582 + C26827 * C47389) *
                         C47391) *
                        C47178) *
                       C1284 +
                   ((((C21485 - C21484) * C4581 + (C21487 - C21486) * C4577 +
                      (C21489 - C21488) * C4582 + (C21491 - C21490) * C47389) *
                         C31197 +
                     (C26442 * C4581 + C26443 * C4577 + C22312 * C4582 +
                      C22313 * C47389) *
                         C47391) *
                        C47340 +
                    ((C26440 * C4581 + C26441 * C4577 + C26830 * C4582 +
                      C26831 * C47389) *
                         C31197 +
                     (C26828 * C4581 + C26829 * C4577 + C22330 * C4582 +
                      C22331 * C47389) *
                         C47391) *
                        C47178) *
                       C1285 +
                   (((C21520 * C4581 + C21521 * C4577 +
                      (C21493 - C21492) * C4582 + (C21495 - C21494) * C47389) *
                         C31197 +
                     (C26830 * C4581 + C26831 * C4577 + C22690 * C4582 +
                      C22691 * C47389) *
                         C47391) *
                        C47340 +
                    ((C22312 * C4581 + C22313 * C4577 + C27290 * C4582 +
                      C27291 * C47389) *
                         C31197 +
                     (C26832 * C4581 + C26833 * C4577 +
                      (C22326 - C22327) * C4582 + (C22328 - C22329) * C47389) *
                         C47391) *
                        C47178) *
                       C1286 +
                   (((C22186 * C4581 + C22187 * C4577 +
                      (C22189 - C22188) * C4582 + (C22191 - C22190) * C47389) *
                         C31197 +
                     (C27290 * C4581 + C27291 * C4577 +
                      (C22692 - C22693) * C4582 + (C22694 - C22695) * C47389) *
                         C47391) *
                        C47340 +
                    ((C22690 * C4581 + C22691 * C4577 +
                      (C22693 - C22692) * C4582 + (C22695 - C22694) * C47389) *
                         C31197 +
                     ((C22327 - C22326) * C4581 + (C22329 - C22328) * C4577 +
                      (C47018 * C22308 - C21369 * C22307) * C4582 +
                      (C47018 * C22310 - C21369 * C22309) * C47389) *
                         C47391) *
                        C47178) *
                       C47381) *
                  C47045) /
                     (p * q * std::sqrt(p + q));
    d2ee[197] += (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  (((((C47018 * C124 - C21369 * C117) * C4581 +
                      (C47018 * C138 - C21369 * C127) * C4577 +
                      (C21484 - C21485) * C4582 + (C21486 - C21487) * C47389) *
                         C31197 +
                     ((C25950 - C25951) * C4581 + (C25952 - C25953) * C4577 +
                      C26440 * C4582 + C26441 * C47389) *
                         C47391) *
                        C47091 * C47410 +
                    (((C21485 - C21484) * C4581 + (C21487 - C21486) * C4577 +
                      (C21489 - C21488) * C4582 + (C21491 - C21490) * C47389) *
                         C31197 +
                     (C26442 * C4581 + C26443 * C4577 + C22312 * C4582 +
                      C22313 * C47389) *
                         C47391) *
                        C47091 * C47398 +
                    ((C21520 * C4581 + C21521 * C4577 +
                      (C21493 - C21492) * C4582 + (C21495 - C21494) * C47389) *
                         C31197 +
                     (C26830 * C4581 + C26831 * C4577 + C22690 * C4582 +
                      C22691 * C47389) *
                         C47391) *
                        C47091 * C47371) *
                       C258 +
                   ((((C21369 * C118 - C47018 * C125) * C4581 +
                      (C21369 * C128 - C47018 * C139) * C4577 +
                      (C21496 - C21497) * C4582 + (C21498 - C21499) * C47389) *
                         C31197 +
                     ((C25958 - C25959) * C4581 + (C25960 - C25961) * C4577 +
                      C26444 * C4582 + C26445 * C47389) *
                         C47391) *
                        C47091 * C47410 +
                    (((C21497 - C21496) * C4581 + (C21499 - C21498) * C4577 +
                      (C21501 - C21500) * C4582 + (C21503 - C21502) * C47389) *
                         C31197 +
                     (C26446 * C4581 + C26447 * C4577 + C22582 * C4582 +
                      C22583 * C47389) *
                         C47391) *
                        C47091 * C47398 +
                    ((C21522 * C4581 + C21523 * C4577 +
                      (C21505 - C21504) * C4582 + (C21507 - C21506) * C47389) *
                         C31197 +
                     (C27158 * C4581 + C27159 * C4577 +
                      (C22584 - C22585) * C4582 + (C22586 - C22587) * C47389) *
                         C47391) *
                        C47091 * C47371) *
                       C259 +
                   ((((C47018 * C126 - C21369 * C119) * C4581 +
                      (C47018 * C140 - C21369 * C129) * C4577 +
                      (C21508 - C21509) * C4582 + (C21510 - C21511) * C47389) *
                         C31197 +
                     ((C25966 - C25967) * C4581 + (C25968 - C25969) * C4577 +
                      C26448 * C4582 + C26449 * C47389) *
                         C47391) *
                        C47091 * C47410 +
                    (((C21509 - C21508) * C4581 + (C21511 - C21510) * C4577 +
                      (C21513 - C21512) * C4582 + (C21515 - C21514) * C47389) *
                         C31197 +
                     (C26450 * C4581 + C26451 * C4577 +
                      (C22006 - C22007) * C4582 + (C22008 - C22009) * C47389) *
                         C47391) *
                        C47091 * C47398 +
                    ((C21524 * C4581 + C21525 * C4577 +
                      (C21517 - C21516) * C4582 + (C21519 - C21518) * C47389) *
                         C31197 +
                     ((C22007 - C22006) * C4581 + (C22009 - C22008) * C4577 +
                      (C47018 * C1547 - C21369 * C1544) * C4582 +
                      (C47018 * C1553 - C21369 * C1550) * C47389) *
                         C47391) *
                        C47091 * C47371) *
                       C47365)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  ((((C47018 * C124 - C21369 * C117) * C4581 +
                     (C47018 * C138 - C21369 * C127) * C4577 +
                     (C21484 - C21485) * C4582 + (C21486 - C21487) * C47389) *
                        C31197 +
                    ((C25950 - C25951) * C4581 + (C25952 - C25953) * C4577 +
                     C26440 * C4582 + C26441 * C47389) *
                        C47391) *
                       C47091 * C47073 * C108 +
                   (((C21369 * C118 - C47018 * C125) * C4581 +
                     (C21369 * C128 - C47018 * C139) * C4577 +
                     (C21496 - C21497) * C4582 + (C21498 - C21499) * C47389) *
                        C31197 +
                    ((C25958 - C25959) * C4581 + (C25960 - C25961) * C4577 +
                     C26444 * C4582 + C26445 * C47389) *
                        C47391) *
                       C47091 * C47073 * C109 +
                   (((C47018 * C126 - C21369 * C119) * C4581 +
                     (C47018 * C140 - C21369 * C129) * C4577 +
                     (C21508 - C21509) * C4582 + (C21510 - C21511) * C47389) *
                        C31197 +
                    ((C25966 - C25967) * C4581 + (C25968 - C25969) * C4577 +
                     C26448 * C4582 + C26449 * C47389) *
                        C47391) *
                       C47091 * C47073 * C110 +
                   (((C21369 * C120 - C47018 * C130) * C4581 +
                     (C21369 * C131 - C47018 * C141) * C4577 +
                     (C21734 - C21735) * C4582 + (C21736 - C21737) * C47389) *
                        C31197 +
                    ((C26242 - C26243) * C4581 + (C26244 - C26245) * C4577 +
                     (C26108 - C26109) * C4582 + (C26110 - C26111) * C47389) *
                        C47391) *
                       C47091 * C47073 * C111 +
                   (((C47018 * C132 - C21369 * C121) * C4581 +
                     (C47018 * C142 - C21369 * C133) * C4577 +
                     (C47018 * C287 - C21369 * C269) * C4582 +
                     (C47018 * C299 - C21369 * C288) * C47389) *
                        C31197 +
                    ((C47018 * C440 - C21369 * C422) * C4581 +
                     (C47018 * C452 - C21369 * C441) * C4577 +
                     (C47018 * C825 - C21369 * C816) * C4582 +
                     (C47018 * C831 - C21369 * C826) * C47389) *
                        C47391) *
                       C47091 * C47073 * C112)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((((C47018 * C124 - C21369 * C117) * C4581 +
                      (C47018 * C138 - C21369 * C127) * C4577 +
                      (C21484 - C21485) * C4582 + (C21486 - C21487) * C47389) *
                         C31197 +
                     ((C25950 - C25951) * C4581 + (C25952 - C25953) * C4577 +
                      C26440 * C4582 + C26441 * C47389) *
                         C47391) *
                        C47411 +
                    (((C25951 - C25950) * C4581 + (C25953 - C25952) * C4577 +
                      C26442 * C4582 + C26443 * C47389) *
                         C31197 +
                     ((C25954 - C25955) * C4581 + (C25956 - C25957) * C4577 +
                      C26826 * C4582 + C26827 * C47389) *
                         C47391) *
                        C47400 +
                    (((C25955 - C25954) * C4581 + (C25957 - C25956) * C4577 +
                      C26828 * C4582 + C26829 * C47389) *
                         C31197 +
                     ((C27670 - C27671) * C4581 + (C27672 - C27673) * C4577 +
                      C28148 * C4582 + C28149 * C47389) *
                         C47391) *
                        C47374) *
                       C47073 * C258 +
                   ((((C21369 * C118 - C47018 * C125) * C4581 +
                      (C21369 * C128 - C47018 * C139) * C4577 +
                      (C21496 - C21497) * C4582 + (C21498 - C21499) * C47389) *
                         C31197 +
                     ((C25958 - C25959) * C4581 + (C25960 - C25961) * C4577 +
                      C26444 * C4582 + C26445 * C47389) *
                         C47391) *
                        C47411 +
                    (((C25959 - C25958) * C4581 + (C25961 - C25960) * C4577 +
                      C26446 * C4582 + C26447 * C47389) *
                         C31197 +
                     ((C25962 - C25963) * C4581 + (C25964 - C25965) * C4577 +
                      C27876 * C4582 + C27877 * C47389) *
                         C47391) *
                        C47400 +
                    (((C25963 - C25962) * C4581 + (C25965 - C25964) * C4577 +
                      C27878 * C4582 + C27879 * C47389) *
                         C31197 +
                     ((C28014 - C28015) * C4581 + (C28016 - C28017) * C4577 +
                      (C27880 - C27881) * C4582 + (C27882 - C27883) * C47389) *
                         C47391) *
                        C47374) *
                       C47073 * C259 +
                   ((((C47018 * C126 - C21369 * C119) * C4581 +
                      (C47018 * C140 - C21369 * C129) * C4577 +
                      (C21508 - C21509) * C4582 + (C21510 - C21511) * C47389) *
                         C31197 +
                     ((C25966 - C25967) * C4581 + (C25968 - C25969) * C4577 +
                      C26448 * C4582 + C26449 * C47389) *
                         C47391) *
                        C47411 +
                    (((C25967 - C25966) * C4581 + (C25969 - C25968) * C4577 +
                      C26450 * C4582 + C26451 * C47389) *
                         C31197 +
                     ((C25970 - C25971) * C4581 + (C25972 - C25973) * C4577 +
                      (C25974 - C25975) * C4582 + (C25976 - C25977) * C47389) *
                         C47391) *
                        C47400 +
                    (((C25971 - C25970) * C4581 + (C25973 - C25972) * C4577 +
                      (C25975 - C25974) * C4582 + (C25977 - C25976) * C47389) *
                         C31197 +
                     ((C47018 * C1852 - C21369 * C1846) * C4581 +
                      (C47018 * C1864 - C21369 * C1855) * C4577 +
                      (C47018 * C2227 - C21369 * C2224) * C4582 +
                      (C47018 * C2233 - C21369 * C2230) * C47389) *
                         C47391) *
                        C47374) *
                       C47073 * C47365)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  (((((C47018 * C124 - C21369 * C117) * C4581 +
                      (C47018 * C138 - C21369 * C127) * C4577 +
                      (C21484 - C21485) * C4582 + (C21486 - C21487) * C47389) *
                         C31197 +
                     ((C25950 - C25951) * C4581 + (C25952 - C25953) * C4577 +
                      C26440 * C4582 + C26441 * C47389) *
                         C47391) *
                        C47091 * C942 +
                    (((C21485 - C21484) * C4581 + (C21487 - C21486) * C4577 +
                      (C21489 - C21488) * C4582 + (C21491 - C21490) * C47389) *
                         C31197 +
                     (C26442 * C4581 + C26443 * C4577 + C22312 * C4582 +
                      C22313 * C47389) *
                         C47391) *
                        C47091 * C943 +
                    ((C21520 * C4581 + C21521 * C4577 +
                      (C21493 - C21492) * C4582 + (C21495 - C21494) * C47389) *
                         C31197 +
                     (C26830 * C4581 + C26831 * C4577 + C22690 * C4582 +
                      C22691 * C47389) *
                         C47391) *
                        C47091 * C47371) *
                       C47407 +
                   ((((C21369 * C118 - C47018 * C125) * C4581 +
                      (C21369 * C128 - C47018 * C139) * C4577 +
                      (C21496 - C21497) * C4582 + (C21498 - C21499) * C47389) *
                         C31197 +
                     ((C25958 - C25959) * C4581 + (C25960 - C25961) * C4577 +
                      C26444 * C4582 + C26445 * C47389) *
                         C47391) *
                        C47091 * C942 +
                    (((C21497 - C21496) * C4581 + (C21499 - C21498) * C4577 +
                      (C21501 - C21500) * C4582 + (C21503 - C21502) * C47389) *
                         C31197 +
                     (C26446 * C4581 + C26447 * C4577 + C22582 * C4582 +
                      C22583 * C47389) *
                         C47391) *
                        C47091 * C943 +
                    ((C21522 * C4581 + C21523 * C4577 +
                      (C21505 - C21504) * C4582 + (C21507 - C21506) * C47389) *
                         C31197 +
                     (C27158 * C4581 + C27159 * C4577 +
                      (C22584 - C22585) * C4582 + (C22586 - C22587) * C47389) *
                         C47391) *
                        C47091 * C47371) *
                       C47394 +
                   ((((C47018 * C126 - C21369 * C119) * C4581 +
                      (C47018 * C140 - C21369 * C129) * C4577 +
                      (C21508 - C21509) * C4582 + (C21510 - C21511) * C47389) *
                         C31197 +
                     ((C25966 - C25967) * C4581 + (C25968 - C25969) * C4577 +
                      C26448 * C4582 + C26449 * C47389) *
                         C47391) *
                        C47091 * C942 +
                    (((C21509 - C21508) * C4581 + (C21511 - C21510) * C4577 +
                      (C21513 - C21512) * C4582 + (C21515 - C21514) * C47389) *
                         C31197 +
                     (C26450 * C4581 + C26451 * C4577 +
                      (C22006 - C22007) * C4582 + (C22008 - C22009) * C47389) *
                         C47391) *
                        C47091 * C943 +
                    ((C21524 * C4581 + C21525 * C4577 +
                      (C21517 - C21516) * C4582 + (C21519 - C21518) * C47389) *
                         C31197 +
                     ((C22007 - C22006) * C4581 + (C22009 - C22008) * C4577 +
                      (C47018 * C1547 - C21369 * C1544) * C4582 +
                      (C47018 * C1553 - C21369 * C1550) * C47389) *
                         C47391) *
                        C47091 * C47371) *
                       C47365)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  ((((C47018 * C124 - C21369 * C117) * C4581 +
                     (C47018 * C138 - C21369 * C127) * C4577 +
                     (C21484 - C21485) * C4582 + (C21486 - C21487) * C47389) *
                        C31197 +
                    ((C25950 - C25951) * C4581 + (C25952 - C25953) * C4577 +
                     C26440 * C4582 + C26441 * C47389) *
                        C47391) *
                       C47091 * C1010 +
                   (((C21485 - C21484) * C4581 + (C21487 - C21486) * C4577 +
                     (C21489 - C21488) * C4582 + (C21491 - C21490) * C47389) *
                        C31197 +
                    (C26442 * C4581 + C26443 * C4577 + C22312 * C4582 +
                     C22313 * C47389) *
                        C47391) *
                       C47091 * C1011 +
                   ((C21520 * C4581 + C21521 * C4577 +
                     (C21493 - C21492) * C4582 + (C21495 - C21494) * C47389) *
                        C31197 +
                    (C26830 * C4581 + C26831 * C4577 + C22690 * C4582 +
                     C22691 * C47389) *
                        C47391) *
                       C47091 * C1012 +
                   ((C22186 * C4581 + C22187 * C4577 +
                     (C22189 - C22188) * C4582 + (C22191 - C22190) * C47389) *
                        C31197 +
                    (C27290 * C4581 + C27291 * C4577 +
                     (C22692 - C22693) * C4582 + (C22694 - C22695) * C47389) *
                        C47391) *
                       C47091 * C1013 +
                   ((C22196 * C4581 + C22197 * C4577 +
                     (C22193 - C22192) * C4582 + (C22195 - C22194) * C47389) *
                        C31197 +
                    ((C22693 - C22692) * C4581 + (C22695 - C22694) * C4577 +
                     (C47018 * C22686 - C21369 * C22685) * C4582 +
                     (C47018 * C22688 - C21369 * C22687) * C47389) *
                        C47391) *
                       C47091 * C1014) *
                  C47045) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((((C47018 * C124 - C21369 * C117) * C4581 +
                      (C47018 * C138 - C21369 * C127) * C4577 +
                      (C21484 - C21485) * C4582 + (C21486 - C21487) * C47389) *
                         C31197 +
                     ((C25950 - C25951) * C4581 + (C25952 - C25953) * C4577 +
                      C26440 * C4582 + C26441 * C47389) *
                         C47391) *
                        C47411 +
                    (((C25951 - C25950) * C4581 + (C25953 - C25952) * C4577 +
                      C26442 * C4582 + C26443 * C47389) *
                         C31197 +
                     ((C25954 - C25955) * C4581 + (C25956 - C25957) * C4577 +
                      C26826 * C4582 + C26827 * C47389) *
                         C47391) *
                        C47400 +
                    (((C25955 - C25954) * C4581 + (C25957 - C25956) * C4577 +
                      C26828 * C4582 + C26829 * C47389) *
                         C31197 +
                     ((C27670 - C27671) * C4581 + (C27672 - C27673) * C4577 +
                      C28148 * C4582 + C28149 * C47389) *
                         C47391) *
                        C47374) *
                       C942 +
                   ((((C21485 - C21484) * C4581 + (C21487 - C21486) * C4577 +
                      (C21489 - C21488) * C4582 + (C21491 - C21490) * C47389) *
                         C31197 +
                     (C26442 * C4581 + C26443 * C4577 + C22312 * C4582 +
                      C22313 * C47389) *
                         C47391) *
                        C47411 +
                    ((C26440 * C4581 + C26441 * C4577 + C26830 * C4582 +
                      C26831 * C47389) *
                         C31197 +
                     (C26828 * C4581 + C26829 * C4577 + C22330 * C4582 +
                      C22331 * C47389) *
                         C47391) *
                        C47400 +
                    ((C26826 * C4581 + C26827 * C4577 + C26832 * C4582 +
                      C26833 * C47389) *
                         C31197 +
                     (C28150 * C4581 + C28151 * C4577 +
                      (C23340 - C23341) * C4582 + (C23342 - C23343) * C47389) *
                         C47391) *
                        C47374) *
                       C943 +
                   (((C21520 * C4581 + C21521 * C4577 +
                      (C21493 - C21492) * C4582 + (C21495 - C21494) * C47389) *
                         C31197 +
                     (C26830 * C4581 + C26831 * C4577 + C22690 * C4582 +
                      C22691 * C47389) *
                         C47391) *
                        C47411 +
                    ((C22312 * C4581 + C22313 * C4577 + C27290 * C4582 +
                      C27291 * C47389) *
                         C31197 +
                     (C26832 * C4581 + C26833 * C4577 +
                      (C22326 - C22327) * C4582 + (C22328 - C22329) * C47389) *
                         C47391) *
                        C47400 +
                    ((C22330 * C4581 + C22331 * C4577 +
                      (C22327 - C22326) * C4582 + (C22329 - C22328) * C47389) *
                         C31197 +
                     ((C23341 - C23340) * C4581 + (C23343 - C23342) * C4577 +
                      (C47018 * C23332 - C21369 * C23331) * C4582 +
                      (C47018 * C23334 - C21369 * C23333) * C47389) *
                         C47391) *
                        C47374) *
                       C47371) *
                  C47045) /
                     (p * q * std::sqrt(p + q));
    d2ee[198] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((((C47018 * C124 - C21369 * C117) * C4581 +
                      (C47018 * C138 - C21369 * C127) * C4577 +
                      (C21484 - C21485) * C4582 + (C21486 - C21487) * C47389) *
                         C31197 +
                     ((C25950 - C25951) * C4581 + (C25952 - C25953) * C4577 +
                      C26440 * C4582 + C26441 * C47389) *
                         C47391) *
                        C47340 +
                    (((C25951 - C25950) * C4581 + (C25953 - C25952) * C4577 +
                      C26442 * C4582 + C26443 * C47389) *
                         C31197 +
                     ((C25954 - C25955) * C4581 + (C25956 - C25957) * C4577 +
                      C26826 * C4582 + C26827 * C47389) *
                         C47391) *
                        C47178) *
                       C47073 * C554 +
                   ((((C21369 * C118 - C47018 * C125) * C4581 +
                      (C21369 * C128 - C47018 * C139) * C4577 +
                      (C21496 - C21497) * C4582 + (C21498 - C21499) * C47389) *
                         C31197 +
                     ((C25958 - C25959) * C4581 + (C25960 - C25961) * C4577 +
                      C26444 * C4582 + C26445 * C47389) *
                         C47391) *
                        C47340 +
                    (((C25959 - C25958) * C4581 + (C25961 - C25960) * C4577 +
                      C26446 * C4582 + C26447 * C47389) *
                         C31197 +
                     ((C25962 - C25963) * C4581 + (C25964 - C25965) * C4577 +
                      C27876 * C4582 + C27877 * C47389) *
                         C47391) *
                        C47178) *
                       C47073 * C555 +
                   ((((C47018 * C126 - C21369 * C119) * C4581 +
                      (C47018 * C140 - C21369 * C129) * C4577 +
                      (C21508 - C21509) * C4582 + (C21510 - C21511) * C47389) *
                         C31197 +
                     ((C25966 - C25967) * C4581 + (C25968 - C25969) * C4577 +
                      C26448 * C4582 + C26449 * C47389) *
                         C47391) *
                        C47340 +
                    (((C25967 - C25966) * C4581 + (C25969 - C25968) * C4577 +
                      C26450 * C4582 + C26451 * C47389) *
                         C31197 +
                     ((C25970 - C25971) * C4581 + (C25972 - C25973) * C4577 +
                      (C25974 - C25975) * C4582 + (C25976 - C25977) * C47389) *
                         C47391) *
                        C47178) *
                       C47073 * C556 +
                   ((((C21369 * C120 - C47018 * C130) * C4581 +
                      (C21369 * C131 - C47018 * C141) * C4577 +
                      (C21734 - C21735) * C4582 + (C21736 - C21737) * C47389) *
                         C31197 +
                     ((C26242 - C26243) * C4581 + (C26244 - C26245) * C4577 +
                      (C26108 - C26109) * C4582 + (C26110 - C26111) * C47389) *
                         C47391) *
                        C47340 +
                    (((C26243 - C26242) * C4581 + (C26245 - C26244) * C4577 +
                      (C26109 - C26108) * C4582 + (C26111 - C26110) * C47389) *
                         C31197 +
                     ((C47018 * C438 - C21369 * C421) * C4581 +
                      (C47018 * C451 - C21369 * C439) * C4577 +
                      (C47018 * C2015 - C21369 * C2014) * C4582 +
                      (C47018 * C2017 - C21369 * C2016) * C47389) *
                         C47391) *
                        C47178) *
                       C47073 * C47375)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((((C47018 * C124 - C21369 * C117) * C4581 +
                       (C47018 * C138 - C21369 * C127) * C4577 +
                       (C21484 - C21485) * C4582 + (C21486 - C21487) * C47389) *
                          C31197 +
                      ((C25950 - C25951) * C4581 + (C25952 - C25953) * C4577 +
                       C26440 * C4582 + C26441 * C47389) *
                          C47391) *
                         C47340 +
                     (((C25951 - C25950) * C4581 + (C25953 - C25952) * C4577 +
                       C26442 * C4582 + C26443 * C47389) *
                          C31197 +
                      ((C25954 - C25955) * C4581 + (C25956 - C25957) * C4577 +
                       C26826 * C4582 + C26827 * C47389) *
                          C47391) *
                         C47178) *
                        C942 +
                    ((((C21485 - C21484) * C4581 + (C21487 - C21486) * C4577 +
                       (C21489 - C21488) * C4582 + (C21491 - C21490) * C47389) *
                          C31197 +
                      (C26442 * C4581 + C26443 * C4577 + C22312 * C4582 +
                       C22313 * C47389) *
                          C47391) *
                         C47340 +
                     ((C26440 * C4581 + C26441 * C4577 + C26830 * C4582 +
                       C26831 * C47389) *
                          C31197 +
                      (C26828 * C4581 + C26829 * C4577 + C22330 * C4582 +
                       C22331 * C47389) *
                          C47391) *
                         C47178) *
                        C943 +
                    (((C21520 * C4581 + C21521 * C4577 +
                       (C21493 - C21492) * C4582 + (C21495 - C21494) * C47389) *
                          C31197 +
                      (C26830 * C4581 + C26831 * C4577 + C22690 * C4582 +
                       C22691 * C47389) *
                          C47391) *
                         C47340 +
                     ((C22312 * C4581 + C22313 * C4577 + C27290 * C4582 +
                       C27291 * C47389) *
                          C31197 +
                      (C26832 * C4581 + C26833 * C4577 +
                       (C22326 - C22327) * C4582 + (C22328 - C22329) * C47389) *
                          C47391) *
                         C47178) *
                        C47371) *
                       C47325 +
                   (((((C21369 * C118 - C47018 * C125) * C4581 +
                       (C21369 * C128 - C47018 * C139) * C4577 +
                       (C21496 - C21497) * C4582 + (C21498 - C21499) * C47389) *
                          C31197 +
                      ((C25958 - C25959) * C4581 + (C25960 - C25961) * C4577 +
                       C26444 * C4582 + C26445 * C47389) *
                          C47391) *
                         C47340 +
                     (((C25959 - C25958) * C4581 + (C25961 - C25960) * C4577 +
                       C26446 * C4582 + C26447 * C47389) *
                          C31197 +
                      ((C25962 - C25963) * C4581 + (C25964 - C25965) * C4577 +
                       C27876 * C4582 + C27877 * C47389) *
                          C47391) *
                         C47178) *
                        C942 +
                    ((((C21497 - C21496) * C4581 + (C21499 - C21498) * C4577 +
                       (C21501 - C21500) * C4582 + (C21503 - C21502) * C47389) *
                          C31197 +
                      (C26446 * C4581 + C26447 * C4577 + C22582 * C4582 +
                       C22583 * C47389) *
                          C47391) *
                         C47340 +
                     ((C26444 * C4581 + C26445 * C4577 + C27158 * C4582 +
                       C27159 * C47389) *
                          C31197 +
                      (C27878 * C4581 + C27879 * C4577 +
                       (C23132 - C23133) * C4582 + (C23134 - C23135) * C47389) *
                          C47391) *
                         C47178) *
                        C943 +
                    (((C21522 * C4581 + C21523 * C4577 +
                       (C21505 - C21504) * C4582 + (C21507 - C21506) * C47389) *
                          C31197 +
                      (C27158 * C4581 + C27159 * C4577 +
                       (C22584 - C22585) * C4582 + (C22586 - C22587) * C47389) *
                          C47391) *
                         C47340 +
                     ((C22582 * C4581 + C22583 * C4577 +
                       (C22585 - C22584) * C4582 + (C22587 - C22586) * C47389) *
                          C31197 +
                      ((C23133 - C23132) * C4581 + (C23135 - C23134) * C4577 +
                       (C47018 * C5810 - C21369 * C5808) * C4582 +
                       (C47018 * C5814 - C21369 * C5812) * C47389) *
                          C47391) *
                         C47178) *
                        C47371) *
                       C47056)) /
                     (p * q * std::sqrt(p + q));
    d2ee[199] += (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  ((((C47018 * C124 - C21369 * C117) * C4581 +
                     (C47018 * C138 - C21369 * C127) * C4577 +
                     (C21484 - C21485) * C4582 + (C21486 - C21487) * C47389) *
                        C31197 +
                    ((C25950 - C25951) * C4581 + (C25952 - C25953) * C4577 +
                     C26440 * C4582 + C26441 * C47389) *
                        C47391) *
                       C47091 * C47073 * C108 +
                   (((C21369 * C118 - C47018 * C125) * C4581 +
                     (C21369 * C128 - C47018 * C139) * C4577 +
                     (C21496 - C21497) * C4582 + (C21498 - C21499) * C47389) *
                        C31197 +
                    ((C25958 - C25959) * C4581 + (C25960 - C25961) * C4577 +
                     C26444 * C4582 + C26445 * C47389) *
                        C47391) *
                       C47091 * C47073 * C109 +
                   (((C47018 * C126 - C21369 * C119) * C4581 +
                     (C47018 * C140 - C21369 * C129) * C4577 +
                     (C21508 - C21509) * C4582 + (C21510 - C21511) * C47389) *
                        C31197 +
                    ((C25966 - C25967) * C4581 + (C25968 - C25969) * C4577 +
                     C26448 * C4582 + C26449 * C47389) *
                        C47391) *
                       C47091 * C47073 * C110 +
                   (((C21369 * C120 - C47018 * C130) * C4581 +
                     (C21369 * C131 - C47018 * C141) * C4577 +
                     (C21734 - C21735) * C4582 + (C21736 - C21737) * C47389) *
                        C31197 +
                    ((C26242 - C26243) * C4581 + (C26244 - C26245) * C4577 +
                     (C26108 - C26109) * C4582 + (C26110 - C26111) * C47389) *
                        C47391) *
                       C47091 * C47073 * C111 +
                   (((C47018 * C132 - C21369 * C121) * C4581 +
                     (C47018 * C142 - C21369 * C133) * C4577 +
                     (C47018 * C287 - C21369 * C269) * C4582 +
                     (C47018 * C299 - C21369 * C288) * C47389) *
                        C31197 +
                    ((C47018 * C440 - C21369 * C422) * C4581 +
                     (C47018 * C452 - C21369 * C441) * C4577 +
                     (C47018 * C825 - C21369 * C816) * C4582 +
                     (C47018 * C831 - C21369 * C826) * C47389) *
                        C47391) *
                       C47091 * C47073 * C112)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  (((((C47018 * C124 - C21369 * C117) * C4581 +
                      (C47018 * C138 - C21369 * C127) * C4577 +
                      (C21484 - C21485) * C4582 + (C21486 - C21487) * C47389) *
                         C31197 +
                     ((C25950 - C25951) * C4581 + (C25952 - C25953) * C4577 +
                      C26440 * C4582 + C26441 * C47389) *
                         C47391) *
                        C47091 * C47410 +
                    (((C21485 - C21484) * C4581 + (C21487 - C21486) * C4577 +
                      (C21489 - C21488) * C4582 + (C21491 - C21490) * C47389) *
                         C31197 +
                     (C26442 * C4581 + C26443 * C4577 + C22312 * C4582 +
                      C22313 * C47389) *
                         C47391) *
                        C47091 * C47398 +
                    ((C21520 * C4581 + C21521 * C4577 +
                      (C21493 - C21492) * C4582 + (C21495 - C21494) * C47389) *
                         C31197 +
                     (C26830 * C4581 + C26831 * C4577 + C22690 * C4582 +
                      C22691 * C47389) *
                         C47391) *
                        C47091 * C47371) *
                       C258 +
                   ((((C21369 * C118 - C47018 * C125) * C4581 +
                      (C21369 * C128 - C47018 * C139) * C4577 +
                      (C21496 - C21497) * C4582 + (C21498 - C21499) * C47389) *
                         C31197 +
                     ((C25958 - C25959) * C4581 + (C25960 - C25961) * C4577 +
                      C26444 * C4582 + C26445 * C47389) *
                         C47391) *
                        C47091 * C47410 +
                    (((C21497 - C21496) * C4581 + (C21499 - C21498) * C4577 +
                      (C21501 - C21500) * C4582 + (C21503 - C21502) * C47389) *
                         C31197 +
                     (C26446 * C4581 + C26447 * C4577 + C22582 * C4582 +
                      C22583 * C47389) *
                         C47391) *
                        C47091 * C47398 +
                    ((C21522 * C4581 + C21523 * C4577 +
                      (C21505 - C21504) * C4582 + (C21507 - C21506) * C47389) *
                         C31197 +
                     (C27158 * C4581 + C27159 * C4577 +
                      (C22584 - C22585) * C4582 + (C22586 - C22587) * C47389) *
                         C47391) *
                        C47091 * C47371) *
                       C259 +
                   ((((C47018 * C126 - C21369 * C119) * C4581 +
                      (C47018 * C140 - C21369 * C129) * C4577 +
                      (C21508 - C21509) * C4582 + (C21510 - C21511) * C47389) *
                         C31197 +
                     ((C25966 - C25967) * C4581 + (C25968 - C25969) * C4577 +
                      C26448 * C4582 + C26449 * C47389) *
                         C47391) *
                        C47091 * C47410 +
                    (((C21509 - C21508) * C4581 + (C21511 - C21510) * C4577 +
                      (C21513 - C21512) * C4582 + (C21515 - C21514) * C47389) *
                         C31197 +
                     (C26450 * C4581 + C26451 * C4577 +
                      (C22006 - C22007) * C4582 + (C22008 - C22009) * C47389) *
                         C47391) *
                        C47091 * C47398 +
                    ((C21524 * C4581 + C21525 * C4577 +
                      (C21517 - C21516) * C4582 + (C21519 - C21518) * C47389) *
                         C31197 +
                     ((C22007 - C22006) * C4581 + (C22009 - C22008) * C4577 +
                      (C47018 * C1547 - C21369 * C1544) * C4582 +
                      (C47018 * C1553 - C21369 * C1550) * C47389) *
                         C47391) *
                        C47091 * C47371) *
                       C47365)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  (((((C47018 * C124 - C21369 * C117) * C4581 +
                      (C47018 * C138 - C21369 * C127) * C4577 +
                      (C21484 - C21485) * C4582 + (C21486 - C21487) * C47389) *
                         C31197 +
                     ((C25950 - C25951) * C4581 + (C25952 - C25953) * C4577 +
                      C26440 * C4582 + C26441 * C47389) *
                         C47391) *
                        C47091 * C942 +
                    (((C21485 - C21484) * C4581 + (C21487 - C21486) * C4577 +
                      (C21489 - C21488) * C4582 + (C21491 - C21490) * C47389) *
                         C31197 +
                     (C26442 * C4581 + C26443 * C4577 + C22312 * C4582 +
                      C22313 * C47389) *
                         C47391) *
                        C47091 * C943 +
                    ((C21520 * C4581 + C21521 * C4577 +
                      (C21493 - C21492) * C4582 + (C21495 - C21494) * C47389) *
                         C31197 +
                     (C26830 * C4581 + C26831 * C4577 + C22690 * C4582 +
                      C22691 * C47389) *
                         C47391) *
                        C47091 * C47371) *
                       C47407 +
                   ((((C21369 * C118 - C47018 * C125) * C4581 +
                      (C21369 * C128 - C47018 * C139) * C4577 +
                      (C21496 - C21497) * C4582 + (C21498 - C21499) * C47389) *
                         C31197 +
                     ((C25958 - C25959) * C4581 + (C25960 - C25961) * C4577 +
                      C26444 * C4582 + C26445 * C47389) *
                         C47391) *
                        C47091 * C942 +
                    (((C21497 - C21496) * C4581 + (C21499 - C21498) * C4577 +
                      (C21501 - C21500) * C4582 + (C21503 - C21502) * C47389) *
                         C31197 +
                     (C26446 * C4581 + C26447 * C4577 + C22582 * C4582 +
                      C22583 * C47389) *
                         C47391) *
                        C47091 * C943 +
                    ((C21522 * C4581 + C21523 * C4577 +
                      (C21505 - C21504) * C4582 + (C21507 - C21506) * C47389) *
                         C31197 +
                     (C27158 * C4581 + C27159 * C4577 +
                      (C22584 - C22585) * C4582 + (C22586 - C22587) * C47389) *
                         C47391) *
                        C47091 * C47371) *
                       C47394 +
                   ((((C47018 * C126 - C21369 * C119) * C4581 +
                      (C47018 * C140 - C21369 * C129) * C4577 +
                      (C21508 - C21509) * C4582 + (C21510 - C21511) * C47389) *
                         C31197 +
                     ((C25966 - C25967) * C4581 + (C25968 - C25969) * C4577 +
                      C26448 * C4582 + C26449 * C47389) *
                         C47391) *
                        C47091 * C942 +
                    (((C21509 - C21508) * C4581 + (C21511 - C21510) * C4577 +
                      (C21513 - C21512) * C4582 + (C21515 - C21514) * C47389) *
                         C31197 +
                     (C26450 * C4581 + C26451 * C4577 +
                      (C22006 - C22007) * C4582 + (C22008 - C22009) * C47389) *
                         C47391) *
                        C47091 * C943 +
                    ((C21524 * C4581 + C21525 * C4577 +
                      (C21517 - C21516) * C4582 + (C21519 - C21518) * C47389) *
                         C31197 +
                     ((C22007 - C22006) * C4581 + (C22009 - C22008) * C4577 +
                      (C47018 * C1547 - C21369 * C1544) * C4582 +
                      (C47018 * C1553 - C21369 * C1550) * C47389) *
                         C47391) *
                        C47091 * C47371) *
                       C47365)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  ((((C47018 * C124 - C21369 * C117) * C4581 +
                     (C47018 * C138 - C21369 * C127) * C4577 +
                     (C21484 - C21485) * C4582 + (C21486 - C21487) * C47389) *
                        C31197 +
                    ((C25950 - C25951) * C4581 + (C25952 - C25953) * C4577 +
                     C26440 * C4582 + C26441 * C47389) *
                        C47391) *
                       C47091 * C1010 +
                   (((C21485 - C21484) * C4581 + (C21487 - C21486) * C4577 +
                     (C21489 - C21488) * C4582 + (C21491 - C21490) * C47389) *
                        C31197 +
                    (C26442 * C4581 + C26443 * C4577 + C22312 * C4582 +
                     C22313 * C47389) *
                        C47391) *
                       C47091 * C1011 +
                   ((C21520 * C4581 + C21521 * C4577 +
                     (C21493 - C21492) * C4582 + (C21495 - C21494) * C47389) *
                        C31197 +
                    (C26830 * C4581 + C26831 * C4577 + C22690 * C4582 +
                     C22691 * C47389) *
                        C47391) *
                       C47091 * C1012 +
                   ((C22186 * C4581 + C22187 * C4577 +
                     (C22189 - C22188) * C4582 + (C22191 - C22190) * C47389) *
                        C31197 +
                    (C27290 * C4581 + C27291 * C4577 +
                     (C22692 - C22693) * C4582 + (C22694 - C22695) * C47389) *
                        C47391) *
                       C47091 * C1013 +
                   ((C22196 * C4581 + C22197 * C4577 +
                     (C22193 - C22192) * C4582 + (C22195 - C22194) * C47389) *
                        C31197 +
                    ((C22693 - C22692) * C4581 + (C22695 - C22694) * C4577 +
                     (C47018 * C22686 - C21369 * C22685) * C4582 +
                     (C47018 * C22688 - C21369 * C22687) * C47389) *
                        C47391) *
                       C47091 * C1014) *
                  C47045) /
                     (p * q * std::sqrt(p + q));
    d2ee[200] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C47018 * C124 - C21369 * C117) * C116 +
             (C47018 * C138 - C21369 * C127) * C47279) *
                C42155 +
            ((C25950 - C25951) * C116 + (C25952 - C25953) * C47279) * C42156 +
            C42395 * C42157) *
               C47091 * C47132 +
           (((C21485 - C21484) * C116 + (C21487 - C21486) * C47279) * C42155 +
            (C26442 * C116 + C26443 * C47279) * C42156 + C43030 * C42157) *
               C47091 * C47139 +
           ((C21520 * C116 + C21521 * C47279) * C42155 +
            (C26830 * C116 + C26831 * C47279) * C42156 + C43031 * C42157) *
               C47091 * C2700) *
              C47050 +
          ((((C21369 * C118 - C47018 * C125) * C116 +
             (C21369 * C128 - C47018 * C139) * C47279) *
                C42155 +
            ((C25958 - C25959) * C116 + (C25960 - C25961) * C47279) * C42156 +
            C42396 * C42157) *
               C47091 * C47132 +
           (((C21497 - C21496) * C116 + (C21499 - C21498) * C47279) * C42155 +
            (C26446 * C116 + C26447 * C47279) * C42156 + C43822 * C42157) *
               C47091 * C47139 +
           ((C21522 * C116 + C21523 * C47279) * C42155 +
            (C27158 * C116 + C27159 * C47279) * C42156 +
            ((C23132 - C23133) * C116 + (C23134 - C23135) * C47279) * C42157) *
               C47091 * C2700) *
              C47059 +
          ((((C47018 * C126 - C21369 * C119) * C116 +
             (C47018 * C140 - C21369 * C129) * C47279) *
                C42155 +
            ((C25966 - C25967) * C116 + (C25968 - C25969) * C47279) * C42156 +
            C42397 * C42157) *
               C47091 * C47132 +
           (((C21509 - C21508) * C116 + (C21511 - C21510) * C47279) * C42155 +
            (C26450 * C116 + C26451 * C47279) * C42156 +
            ((C25974 - C25975) * C116 + (C25976 - C25977) * C47279) * C42157) *
               C47091 * C47139 +
           ((C21524 * C116 + C21525 * C47279) * C42155 +
            ((C22007 - C22006) * C116 + (C22009 - C22008) * C47279) * C42156 +
            ((C47018 * C1173 - C21369 * C1158) * C116 +
             (C47018 * C1185 - C21369 * C1176) * C47279) *
                C42157) *
               C47091 * C2700) *
              C2703)) /
        (p * q * std::sqrt(p + q));
    d2ee[201] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C47018 * C124 - C21369 * C117) * C116 +
              (C47018 * C138 - C21369 * C127) * C47279) *
                 C42155 +
             ((C25950 - C25951) * C116 + (C25952 - C25953) * C47279) * C42156 +
             C42395 * C42157) *
                C47340 +
            (((C25951 - C25950) * C116 + (C25953 - C25952) * C47279) * C42155 +
             ((C25954 - C25955) * C116 + (C25956 - C25957) * C47279) * C42156 +
             C43672 * C42157) *
                C47178) *
               C47132 +
           ((((C21485 - C21484) * C116 + (C21487 - C21486) * C47279) * C42155 +
             (C26442 * C116 + C26443 * C47279) * C42156 + C43030 * C42157) *
                C47340 +
            ((C26440 * C116 + C26441 * C47279) * C42155 +
             (C26828 * C116 + C26829 * C47279) * C42156 + C44030 * C42157) *
                C47178) *
               C47139 +
           (((C21520 * C116 + C21521 * C47279) * C42155 +
             (C26830 * C116 + C26831 * C47279) * C42156 + C43031 * C42157) *
                C47340 +
            ((C22312 * C116 + C22313 * C47279) * C42155 +
             (C26832 * C116 + C26833 * C47279) * C42156 +
             ((C23340 - C23341) * C116 + (C23342 - C23343) * C47279) * C42157) *
                C47178) *
               C2700) *
              C2440 +
          (((((C21369 * C118 - C47018 * C125) * C116 +
              (C21369 * C128 - C47018 * C139) * C47279) *
                 C42155 +
             ((C25958 - C25959) * C116 + (C25960 - C25961) * C47279) * C42156 +
             C42396 * C42157) *
                C47340 +
            (((C25959 - C25958) * C116 + (C25961 - C25960) * C47279) * C42155 +
             ((C25962 - C25963) * C116 + (C25964 - C25965) * C47279) * C42156 +
             C43929 * C42157) *
                C47178) *
               C47132 +
           ((((C21497 - C21496) * C116 + (C21499 - C21498) * C47279) * C42155 +
             (C26446 * C116 + C26447 * C47279) * C42156 + C43822 * C42157) *
                C47340 +
            ((C26444 * C116 + C26445 * C47279) * C42155 +
             (C27878 * C116 + C27879 * C47279) * C42156 +
             ((C27880 - C27881) * C116 + (C27882 - C27883) * C47279) * C42157) *
                C47178) *
               C47139 +
           (((C21522 * C116 + C21523 * C47279) * C42155 +
             (C27158 * C116 + C27159 * C47279) * C42156 +
             ((C23132 - C23133) * C116 + (C23134 - C23135) * C47279) * C42157) *
                C47340 +
            ((C22582 * C116 + C22583 * C47279) * C42155 +
             ((C23133 - C23132) * C116 + (C23135 - C23134) * C47279) * C42156 +
             ((C47018 * C7172 - C21369 * C7170) * C116 +
              (C47018 * C7176 - C21369 * C7174) * C47279) *
                 C42157) *
                C47178) *
               C2700) *
              C47056)) /
        (p * q * std::sqrt(p + q));
    d2ee[202] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C47018 * C124 - C21369 * C117) * C116 +
             (C47018 * C138 - C21369 * C127) * C47279) *
                C42155 +
            ((C25950 - C25951) * C116 + (C25952 - C25953) * C47279) * C42156 +
            C42395 * C42157) *
               C47091 * C47417 +
           (((C21485 - C21484) * C116 + (C21487 - C21486) * C47279) * C42155 +
            (C26442 * C116 + C26443 * C47279) * C42156 + C43030 * C42157) *
               C47091 * C47413 +
           ((C21520 * C116 + C21521 * C47279) * C42155 +
            (C26830 * C116 + C26831 * C47279) * C42156 + C43031 * C42157) *
               C47091 * C47403 +
           ((C22186 * C116 + C22187 * C47279) * C42155 +
            (C27290 * C116 + C27291 * C47279) * C42156 +
            ((C22326 - C22327) * C116 + (C22328 - C22329) * C47279) * C42157) *
               C47091 * C47381) *
              C2440 +
          ((((C21369 * C118 - C47018 * C125) * C116 +
             (C21369 * C128 - C47018 * C139) * C47279) *
                C42155 +
            ((C25958 - C25959) * C116 + (C25960 - C25961) * C47279) * C42156 +
            C42396 * C42157) *
               C47091 * C47417 +
           (((C21497 - C21496) * C116 + (C21499 - C21498) * C47279) * C42155 +
            (C26446 * C116 + C26447 * C47279) * C42156 + C43822 * C42157) *
               C47091 * C47413 +
           ((C21522 * C116 + C21523 * C47279) * C42155 +
            (C27158 * C116 + C27159 * C47279) * C42156 +
            ((C23132 - C23133) * C116 + (C23134 - C23135) * C47279) * C42157) *
               C47091 * C47403 +
           ((C22430 * C116 + C22431 * C47279) * C42155 +
            ((C22585 - C22584) * C116 + (C22587 - C22586) * C47279) * C42156 +
            ((C47018 * C5810 - C21369 * C5808) * C116 +
             (C47018 * C5814 - C21369 * C5812) * C47279) *
                C42157) *
               C47091 * C47381) *
              C47056)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C47018 * C124 - C21369 * C117) * C116 +
             (C47018 * C138 - C21369 * C127) * C47279) *
                C42155 +
            ((C25950 - C25951) * C116 + (C25952 - C25953) * C47279) * C42156 +
            C42395 * C42157) *
               C47091 * C2332 +
           (((C21485 - C21484) * C116 + (C21487 - C21486) * C47279) * C42155 +
            (C26442 * C116 + C26443 * C47279) * C42156 + C43030 * C42157) *
               C47091 * C47136) *
              C47416 +
          ((((C21369 * C118 - C47018 * C125) * C116 +
             (C21369 * C128 - C47018 * C139) * C47279) *
                C42155 +
            ((C25958 - C25959) * C116 + (C25960 - C25961) * C47279) * C42156 +
            C42396 * C42157) *
               C47091 * C2332 +
           (((C21497 - C21496) * C116 + (C21499 - C21498) * C47279) * C42155 +
            (C26446 * C116 + C26447 * C47279) * C42156 + C43822 * C42157) *
               C47091 * C47136) *
              C47409 +
          ((((C47018 * C126 - C21369 * C119) * C116 +
             (C47018 * C140 - C21369 * C129) * C47279) *
                C42155 +
            ((C25966 - C25967) * C116 + (C25968 - C25969) * C47279) * C42156 +
            C42397 * C42157) *
               C47091 * C2332 +
           (((C21509 - C21508) * C116 + (C21511 - C21510) * C47279) * C42155 +
            (C26450 * C116 + C26451 * C47279) * C42156 +
            ((C25974 - C25975) * C116 + (C25976 - C25977) * C47279) * C42157) *
               C47091 * C47136) *
              C47396 +
          ((((C21369 * C120 - C47018 * C130) * C116 +
             (C21369 * C131 - C47018 * C141) * C47279) *
                C42155 +
            ((C26242 - C26243) * C116 + (C26244 - C26245) * C47279) * C42156 +
            ((C42594 - C42595) * C116 + (C42596 - C42597) * C47279) * C42157) *
               C47091 * C2332 +
           (((C21735 - C21734) * C116 + (C21737 - C21736) * C47279) * C42155 +
            ((C26109 - C26108) * C116 + (C26111 - C26110) * C47279) * C42156 +
            ((C47018 * C2015 - C21369 * C2014) * C116 +
             (C47018 * C2017 - C21369 * C2016) * C47279) *
                C42157) *
               C47091 * C47136) *
              C47375)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C47018 * C124 - C21369 * C117) * C116 +
              (C47018 * C138 - C21369 * C127) * C47279) *
                 C42155 +
             ((C25950 - C25951) * C116 + (C25952 - C25953) * C47279) * C42156 +
             C42395 * C42157) *
                C47411 +
            (((C25951 - C25950) * C116 + (C25953 - C25952) * C47279) * C42155 +
             ((C25954 - C25955) * C116 + (C25956 - C25957) * C47279) * C42156 +
             C43672 * C42157) *
                C47400 +
            (C42395 * C42155 +
             ((C27670 - C27671) * C116 + (C27672 - C27673) * C47279) * C42156 +
             C43673 * C42157) *
                C47374) *
               C2332 +
           ((((C21485 - C21484) * C116 + (C21487 - C21486) * C47279) * C42155 +
             (C26442 * C116 + C26443 * C47279) * C42156 + C43030 * C42157) *
                C47411 +
            ((C26440 * C116 + C26441 * C47279) * C42155 +
             (C26828 * C116 + C26829 * C47279) * C42156 + C44030 * C42157) *
                C47400 +
            (C43030 * C42155 + (C28150 * C116 + C28151 * C47279) * C42156 +
             ((C27678 - C27679) * C116 + (C27680 - C27681) * C47279) * C42157) *
                C47374) *
               C47136) *
              C2440 +
          (((((C21369 * C118 - C47018 * C125) * C116 +
              (C21369 * C128 - C47018 * C139) * C47279) *
                 C42155 +
             ((C25958 - C25959) * C116 + (C25960 - C25961) * C47279) * C42156 +
             C42396 * C42157) *
                C47411 +
            (((C25959 - C25958) * C116 + (C25961 - C25960) * C47279) * C42155 +
             ((C25962 - C25963) * C116 + (C25964 - C25965) * C47279) * C42156 +
             C43929 * C42157) *
                C47400 +
            (C42396 * C42155 +
             ((C28014 - C28015) * C116 + (C28016 - C28017) * C47279) * C42156 +
             ((C43923 - C43924) * C116 + (C43925 - C43926) * C47279) * C42157) *
                C47374) *
               C2332 +
           ((((C21497 - C21496) * C116 + (C21499 - C21498) * C47279) * C42155 +
             (C26446 * C116 + C26447 * C47279) * C42156 + C43822 * C42157) *
                C47411 +
            ((C26444 * C116 + C26445 * C47279) * C42155 +
             (C27878 * C116 + C27879 * C47279) * C42156 +
             ((C27880 - C27881) * C116 + (C27882 - C27883) * C47279) * C42157) *
                C47400 +
            (C43822 * C42155 +
             ((C27881 - C27880) * C116 + (C27883 - C27882) * C47279) * C42156 +
             ((C47018 * C6702 - C21369 * C6700) * C116 +
              (C47018 * C6706 - C21369 * C6704) * C47279) *
                 C42157) *
                C47374) *
               C47136) *
              C47056)) /
            (p * q * std::sqrt(p + q));
    d2ee[203] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C47018 * C124 - C21369 * C117) * C116 +
              (C47018 * C138 - C21369 * C127) * C47279) *
                 C42155 +
             ((C25950 - C25951) * C116 + (C25952 - C25953) * C47279) * C42156 +
             C42395 * C42157) *
                C47340 +
            (((C25951 - C25950) * C116 + (C25953 - C25952) * C47279) * C42155 +
             ((C25954 - C25955) * C116 + (C25956 - C25957) * C47279) * C42156 +
             C43672 * C42157) *
                C47178) *
               C2332 +
           ((((C21485 - C21484) * C116 + (C21487 - C21486) * C47279) * C42155 +
             (C26442 * C116 + C26443 * C47279) * C42156 + C43030 * C42157) *
                C47340 +
            ((C26440 * C116 + C26441 * C47279) * C42155 +
             (C26828 * C116 + C26829 * C47279) * C42156 + C44030 * C42157) *
                C47178) *
               C47136) *
              C47050 +
          (((((C21369 * C118 - C47018 * C125) * C116 +
              (C21369 * C128 - C47018 * C139) * C47279) *
                 C42155 +
             ((C25958 - C25959) * C116 + (C25960 - C25961) * C47279) * C42156 +
             C42396 * C42157) *
                C47340 +
            (((C25959 - C25958) * C116 + (C25961 - C25960) * C47279) * C42155 +
             ((C25962 - C25963) * C116 + (C25964 - C25965) * C47279) * C42156 +
             C43929 * C42157) *
                C47178) *
               C2332 +
           ((((C21497 - C21496) * C116 + (C21499 - C21498) * C47279) * C42155 +
             (C26446 * C116 + C26447 * C47279) * C42156 + C43822 * C42157) *
                C47340 +
            ((C26444 * C116 + C26445 * C47279) * C42155 +
             (C27878 * C116 + C27879 * C47279) * C42156 +
             ((C27880 - C27881) * C116 + (C27882 - C27883) * C47279) * C42157) *
                C47178) *
               C47136) *
              C47059 +
          (((((C47018 * C126 - C21369 * C119) * C116 +
              (C47018 * C140 - C21369 * C129) * C47279) *
                 C42155 +
             ((C25966 - C25967) * C116 + (C25968 - C25969) * C47279) * C42156 +
             C42397 * C42157) *
                C47340 +
            (((C25967 - C25966) * C116 + (C25969 - C25968) * C47279) * C42155 +
             ((C25970 - C25971) * C116 + (C25972 - C25973) * C47279) * C42156 +
             ((C42385 - C42386) * C116 + (C42387 - C42388) * C47279) * C42157) *
                C47178) *
               C2332 +
           ((((C21509 - C21508) * C116 + (C21511 - C21510) * C47279) * C42155 +
             (C26450 * C116 + C26451 * C47279) * C42156 +
             ((C25974 - C25975) * C116 + (C25976 - C25977) * C47279) * C42157) *
                C47340 +
            ((C26448 * C116 + C26449 * C47279) * C42155 +
             ((C25975 - C25974) * C116 + (C25977 - C25976) * C47279) * C42156 +
             ((C47018 * C2227 - C21369 * C2224) * C116 +
              (C47018 * C2233 - C21369 * C2230) * C47279) *
                 C42157) *
                C47178) *
               C47136) *
              C2703)) /
        (p * q * std::sqrt(p + q));
    d2ee[204] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C47018 * C124 - C21369 * C117) * C116 +
             (C47018 * C138 - C21369 * C127) * C47279) *
                C42155 +
            ((C25950 - C25951) * C116 + (C25952 - C25953) * C47279) * C42156 +
            C42395 * C42157) *
               C47091 * C2332 +
           (((C21485 - C21484) * C116 + (C21487 - C21486) * C47279) * C42155 +
            (C26442 * C116 + C26443 * C47279) * C42156 + C43030 * C42157) *
               C47091 * C47136) *
              C47416 +
          ((((C21369 * C118 - C47018 * C125) * C116 +
             (C21369 * C128 - C47018 * C139) * C47279) *
                C42155 +
            ((C25958 - C25959) * C116 + (C25960 - C25961) * C47279) * C42156 +
            C42396 * C42157) *
               C47091 * C2332 +
           (((C21497 - C21496) * C116 + (C21499 - C21498) * C47279) * C42155 +
            (C26446 * C116 + C26447 * C47279) * C42156 + C43822 * C42157) *
               C47091 * C47136) *
              C47409 +
          ((((C47018 * C126 - C21369 * C119) * C116 +
             (C47018 * C140 - C21369 * C129) * C47279) *
                C42155 +
            ((C25966 - C25967) * C116 + (C25968 - C25969) * C47279) * C42156 +
            C42397 * C42157) *
               C47091 * C2332 +
           (((C21509 - C21508) * C116 + (C21511 - C21510) * C47279) * C42155 +
            (C26450 * C116 + C26451 * C47279) * C42156 +
            ((C25974 - C25975) * C116 + (C25976 - C25977) * C47279) * C42157) *
               C47091 * C47136) *
              C47396 +
          ((((C21369 * C120 - C47018 * C130) * C116 +
             (C21369 * C131 - C47018 * C141) * C47279) *
                C42155 +
            ((C26242 - C26243) * C116 + (C26244 - C26245) * C47279) * C42156 +
            ((C42594 - C42595) * C116 + (C42596 - C42597) * C47279) * C42157) *
               C47091 * C2332 +
           (((C21735 - C21734) * C116 + (C21737 - C21736) * C47279) * C42155 +
            ((C26109 - C26108) * C116 + (C26111 - C26110) * C47279) * C42156 +
            ((C47018 * C2015 - C21369 * C2014) * C116 +
             (C47018 * C2017 - C21369 * C2016) * C47279) *
                C42157) *
               C47091 * C47136) *
              C47375)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C47018 * C124 - C21369 * C117) * C116 +
             (C47018 * C138 - C21369 * C127) * C47279) *
                C42155 +
            ((C25950 - C25951) * C116 + (C25952 - C25953) * C47279) * C42156 +
            C42395 * C42157) *
               C47091 * C47417 +
           (((C21485 - C21484) * C116 + (C21487 - C21486) * C47279) * C42155 +
            (C26442 * C116 + C26443 * C47279) * C42156 + C43030 * C42157) *
               C47091 * C47413 +
           ((C21520 * C116 + C21521 * C47279) * C42155 +
            (C26830 * C116 + C26831 * C47279) * C42156 + C43031 * C42157) *
               C47091 * C47403 +
           ((C22186 * C116 + C22187 * C47279) * C42155 +
            (C27290 * C116 + C27291 * C47279) * C42156 +
            ((C22326 - C22327) * C116 + (C22328 - C22329) * C47279) * C42157) *
               C47091 * C47381) *
              C2440 +
          ((((C21369 * C118 - C47018 * C125) * C116 +
             (C21369 * C128 - C47018 * C139) * C47279) *
                C42155 +
            ((C25958 - C25959) * C116 + (C25960 - C25961) * C47279) * C42156 +
            C42396 * C42157) *
               C47091 * C47417 +
           (((C21497 - C21496) * C116 + (C21499 - C21498) * C47279) * C42155 +
            (C26446 * C116 + C26447 * C47279) * C42156 + C43822 * C42157) *
               C47091 * C47413 +
           ((C21522 * C116 + C21523 * C47279) * C42155 +
            (C27158 * C116 + C27159 * C47279) * C42156 +
            ((C23132 - C23133) * C116 + (C23134 - C23135) * C47279) * C42157) *
               C47091 * C47403 +
           ((C22430 * C116 + C22431 * C47279) * C42155 +
            ((C22585 - C22584) * C116 + (C22587 - C22586) * C47279) * C42156 +
            ((C47018 * C5810 - C21369 * C5808) * C116 +
             (C47018 * C5814 - C21369 * C5812) * C47279) *
                C42157) *
               C47091 * C47381) *
              C47056)) /
            (p * q * std::sqrt(p + q));
    d2ee[205] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C47018 * C124 - C21369 * C117) * C116 +
              (C47018 * C138 - C21369 * C127) * C47279) *
                 C42155 +
             ((C25950 - C25951) * C116 + (C25952 - C25953) * C47279) * C42156 +
             C42395 * C42157) *
                C3094 +
            (((C25951 - C25950) * C116 + (C25953 - C25952) * C47279) * C42155 +
             ((C25954 - C25955) * C116 + (C25956 - C25957) * C47279) * C42156 +
             C43672 * C42157) *
                C47178) *
               C47132 +
           ((((C21485 - C21484) * C116 + (C21487 - C21486) * C47279) * C42155 +
             (C26442 * C116 + C26443 * C47279) * C42156 + C43030 * C42157) *
                C3094 +
            ((C26440 * C116 + C26441 * C47279) * C42155 +
             (C26828 * C116 + C26829 * C47279) * C42156 + C44030 * C42157) *
                C47178) *
               C47139 +
           (((C21520 * C116 + C21521 * C47279) * C42155 +
             (C26830 * C116 + C26831 * C47279) * C42156 + C43031 * C42157) *
                C3094 +
            ((C22312 * C116 + C22313 * C47279) * C42155 +
             (C26832 * C116 + C26833 * C47279) * C42156 +
             ((C23340 - C23341) * C116 + (C23342 - C23343) * C47279) * C42157) *
                C47178) *
               C2700) *
              C47325 +
          (((((C21369 * C118 - C47018 * C125) * C116 +
              (C21369 * C128 - C47018 * C139) * C47279) *
                 C42155 +
             ((C25958 - C25959) * C116 + (C25960 - C25961) * C47279) * C42156 +
             C42396 * C42157) *
                C3094 +
            (((C25959 - C25958) * C116 + (C25961 - C25960) * C47279) * C42155 +
             ((C25962 - C25963) * C116 + (C25964 - C25965) * C47279) * C42156 +
             C43929 * C42157) *
                C47178) *
               C47132 +
           ((((C21497 - C21496) * C116 + (C21499 - C21498) * C47279) * C42155 +
             (C26446 * C116 + C26447 * C47279) * C42156 + C43822 * C42157) *
                C3094 +
            ((C26444 * C116 + C26445 * C47279) * C42155 +
             (C27878 * C116 + C27879 * C47279) * C42156 +
             ((C27880 - C27881) * C116 + (C27882 - C27883) * C47279) * C42157) *
                C47178) *
               C47139 +
           (((C21522 * C116 + C21523 * C47279) * C42155 +
             (C27158 * C116 + C27159 * C47279) * C42156 +
             ((C23132 - C23133) * C116 + (C23134 - C23135) * C47279) * C42157) *
                C3094 +
            ((C22582 * C116 + C22583 * C47279) * C42155 +
             ((C23133 - C23132) * C116 + (C23135 - C23134) * C47279) * C42156 +
             ((C47018 * C7172 - C21369 * C7170) * C116 +
              (C47018 * C7176 - C21369 * C7174) * C47279) *
                 C42157) *
                C47178) *
               C2700) *
              C47056)) /
        (p * q * std::sqrt(p + q));
    d2ee[206] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C47018 * C124 - C21369 * C117) * C116 +
             (C47018 * C138 - C21369 * C127) * C47279) *
                C42155 +
            ((C25950 - C25951) * C116 + (C25952 - C25953) * C47279) * C42156 +
            C42395 * C42157) *
               C47174 +
           (((C25951 - C25950) * C116 + (C25953 - C25952) * C47279) * C42155 +
            ((C25954 - C25955) * C116 + (C25956 - C25957) * C47279) * C42156 +
            C43672 * C42157) *
               C47181 +
           (C42395 * C42155 +
            ((C27670 - C27671) * C116 + (C27672 - C27673) * C47279) * C42156 +
            C43673 * C42157) *
               C3602) *
              C47132 +
          ((((C21485 - C21484) * C116 + (C21487 - C21486) * C47279) * C42155 +
            (C26442 * C116 + C26443 * C47279) * C42156 + C43030 * C42157) *
               C47174 +
           ((C26440 * C116 + C26441 * C47279) * C42155 +
            (C26828 * C116 + C26829 * C47279) * C42156 + C44030 * C42157) *
               C47181 +
           (C43030 * C42155 + (C28150 * C116 + C28151 * C47279) * C42156 +
            ((C27678 - C27679) * C116 + (C27680 - C27681) * C47279) * C42157) *
               C3602) *
              C47139 +
          (((C21520 * C116 + C21521 * C47279) * C42155 +
            (C26830 * C116 + C26831 * C47279) * C42156 + C43031 * C42157) *
               C47174 +
           ((C22312 * C116 + C22313 * C47279) * C42155 +
            (C26832 * C116 + C26833 * C47279) * C42156 +
            ((C23340 - C23341) * C116 + (C23342 - C23343) * C47279) * C42157) *
               C47181 +
           (C43031 * C42155 +
            ((C23341 - C23340) * C116 + (C23343 - C23342) * C47279) * C42156 +
            ((C47018 * C22978 - C21369 * C22977) * C116 +
             (C47018 * C22980 - C21369 * C22979) * C47279) *
                C42157) *
               C3602) *
              C2700) *
         C47045) /
        (p * q * std::sqrt(p + q));
    d2ee[207] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C47018 * C124 - C21369 * C117) * C116 +
             (C47018 * C138 - C21369 * C127) * C47279) *
                C42155 +
            ((C25950 - C25951) * C116 + (C25952 - C25953) * C47279) * C42156 +
            C42395 * C42157) *
               C3094 +
           (((C25951 - C25950) * C116 + (C25953 - C25952) * C47279) * C42155 +
            ((C25954 - C25955) * C116 + (C25956 - C25957) * C47279) * C42156 +
            C43672 * C42157) *
               C47178) *
              C47417 +
          ((((C21485 - C21484) * C116 + (C21487 - C21486) * C47279) * C42155 +
            (C26442 * C116 + C26443 * C47279) * C42156 + C43030 * C42157) *
               C3094 +
           ((C26440 * C116 + C26441 * C47279) * C42155 +
            (C26828 * C116 + C26829 * C47279) * C42156 + C44030 * C42157) *
               C47178) *
              C47413 +
          (((C21520 * C116 + C21521 * C47279) * C42155 +
            (C26830 * C116 + C26831 * C47279) * C42156 + C43031 * C42157) *
               C3094 +
           ((C22312 * C116 + C22313 * C47279) * C42155 +
            (C26832 * C116 + C26833 * C47279) * C42156 +
            ((C23340 - C23341) * C116 + (C23342 - C23343) * C47279) * C42157) *
               C47178) *
              C47403 +
          (((C22186 * C116 + C22187 * C47279) * C42155 +
            (C27290 * C116 + C27291 * C47279) * C42156 +
            ((C22326 - C22327) * C116 + (C22328 - C22329) * C47279) * C42157) *
               C3094 +
           ((C22690 * C116 + C22691 * C47279) * C42155 +
            ((C22327 - C22326) * C116 + (C22329 - C22328) * C47279) * C42156 +
            ((C47018 * C23332 - C21369 * C23331) * C116 +
             (C47018 * C23334 - C21369 * C23333) * C47279) *
                C42157) *
               C47178) *
              C47381) *
         C47045) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C47018 * C124 - C21369 * C117) * C116 +
              (C47018 * C138 - C21369 * C127) * C47279) *
                 C42155 +
             ((C25950 - C25951) * C116 + (C25952 - C25953) * C47279) * C42156 +
             C42395 * C42157) *
                C3094 +
            (((C25951 - C25950) * C116 + (C25953 - C25952) * C47279) * C42155 +
             ((C25954 - C25955) * C116 + (C25956 - C25957) * C47279) * C42156 +
             C43672 * C42157) *
                C47178) *
               C2332 +
           ((((C21485 - C21484) * C116 + (C21487 - C21486) * C47279) * C42155 +
             (C26442 * C116 + C26443 * C47279) * C42156 + C43030 * C42157) *
                C3094 +
            ((C26440 * C116 + C26441 * C47279) * C42155 +
             (C26828 * C116 + C26829 * C47279) * C42156 + C44030 * C42157) *
                C47178) *
               C47136) *
              C47407 +
          (((((C21369 * C118 - C47018 * C125) * C116 +
              (C21369 * C128 - C47018 * C139) * C47279) *
                 C42155 +
             ((C25958 - C25959) * C116 + (C25960 - C25961) * C47279) * C42156 +
             C42396 * C42157) *
                C3094 +
            (((C25959 - C25958) * C116 + (C25961 - C25960) * C47279) * C42155 +
             ((C25962 - C25963) * C116 + (C25964 - C25965) * C47279) * C42156 +
             C43929 * C42157) *
                C47178) *
               C2332 +
           ((((C21497 - C21496) * C116 + (C21499 - C21498) * C47279) * C42155 +
             (C26446 * C116 + C26447 * C47279) * C42156 + C43822 * C42157) *
                C3094 +
            ((C26444 * C116 + C26445 * C47279) * C42155 +
             (C27878 * C116 + C27879 * C47279) * C42156 +
             ((C27880 - C27881) * C116 + (C27882 - C27883) * C47279) * C42157) *
                C47178) *
               C47136) *
              C47394 +
          (((((C47018 * C126 - C21369 * C119) * C116 +
              (C47018 * C140 - C21369 * C129) * C47279) *
                 C42155 +
             ((C25966 - C25967) * C116 + (C25968 - C25969) * C47279) * C42156 +
             C42397 * C42157) *
                C3094 +
            (((C25967 - C25966) * C116 + (C25969 - C25968) * C47279) * C42155 +
             ((C25970 - C25971) * C116 + (C25972 - C25973) * C47279) * C42156 +
             ((C42385 - C42386) * C116 + (C42387 - C42388) * C47279) * C42157) *
                C47178) *
               C2332 +
           ((((C21509 - C21508) * C116 + (C21511 - C21510) * C47279) * C42155 +
             (C26450 * C116 + C26451 * C47279) * C42156 +
             ((C25974 - C25975) * C116 + (C25976 - C25977) * C47279) * C42157) *
                C3094 +
            ((C26448 * C116 + C26449 * C47279) * C42155 +
             ((C25975 - C25974) * C116 + (C25977 - C25976) * C47279) * C42156 +
             ((C47018 * C2227 - C21369 * C2224) * C116 +
              (C47018 * C2233 - C21369 * C2230) * C47279) *
                 C42157) *
                C47178) *
               C47136) *
              C47365)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C47018 * C124 - C21369 * C117) * C116 +
             (C47018 * C138 - C21369 * C127) * C47279) *
                C42155 +
            ((C25950 - C25951) * C116 + (C25952 - C25953) * C47279) * C42156 +
            C42395 * C42157) *
               C47418 +
           (((C25951 - C25950) * C116 + (C25953 - C25952) * C47279) * C42155 +
            ((C25954 - C25955) * C116 + (C25956 - C25957) * C47279) * C42156 +
            C43672 * C42157) *
               C47415 +
           (C42395 * C42155 +
            ((C27670 - C27671) * C116 + (C27672 - C27673) * C47279) * C42156 +
            C43673 * C42157) *
               C47406 +
           (C43672 * C42155 +
            ((C27674 - C27675) * C116 + (C27676 - C27677) * C47279) * C42156 +
            ((C43664 - C43665) * C116 + (C43666 - C43667) * C47279) * C42157) *
               C47387) *
              C2332 +
          ((((C21485 - C21484) * C116 + (C21487 - C21486) * C47279) * C42155 +
            (C26442 * C116 + C26443 * C47279) * C42156 + C43030 * C42157) *
               C47418 +
           ((C26440 * C116 + C26441 * C47279) * C42155 +
            (C26828 * C116 + C26829 * C47279) * C42156 + C44030 * C42157) *
               C47415 +
           (C43030 * C42155 + (C28150 * C116 + C28151 * C47279) * C42156 +
            ((C27678 - C27679) * C116 + (C27680 - C27681) * C47279) * C42157) *
               C47406 +
           (C44030 * C42155 +
            ((C27679 - C27678) * C116 + (C27681 - C27680) * C47279) * C42156 +
            ((C47018 * C27666 - C21369 * C27665) * C116 +
             (C47018 * C27668 - C21369 * C27667) * C47279) *
                C42157) *
               C47387) *
              C47136) *
         C47045) /
            (p * q * std::sqrt(p + q));
    d2ee[208] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C47018 * C124 - C21369 * C117) * C116 +
              (C47018 * C138 - C21369 * C127) * C47279) *
                 C42155 +
             ((C25950 - C25951) * C116 + (C25952 - C25953) * C47279) * C42156 +
             C42395 * C42157) *
                C47174 +
            (((C25951 - C25950) * C116 + (C25953 - C25952) * C47279) * C42155 +
             ((C25954 - C25955) * C116 + (C25956 - C25957) * C47279) * C42156 +
             C43672 * C42157) *
                C47181 +
            (C42395 * C42155 +
             ((C27670 - C27671) * C116 + (C27672 - C27673) * C47279) * C42156 +
             C43673 * C42157) *
                C3602) *
               C2332 +
           ((((C21485 - C21484) * C116 + (C21487 - C21486) * C47279) * C42155 +
             (C26442 * C116 + C26443 * C47279) * C42156 + C43030 * C42157) *
                C47174 +
            ((C26440 * C116 + C26441 * C47279) * C42155 +
             (C26828 * C116 + C26829 * C47279) * C42156 + C44030 * C42157) *
                C47181 +
            (C43030 * C42155 + (C28150 * C116 + C28151 * C47279) * C42156 +
             ((C27678 - C27679) * C116 + (C27680 - C27681) * C47279) * C42157) *
                C3602) *
               C47136) *
              C47325 +
          (((((C21369 * C118 - C47018 * C125) * C116 +
              (C21369 * C128 - C47018 * C139) * C47279) *
                 C42155 +
             ((C25958 - C25959) * C116 + (C25960 - C25961) * C47279) * C42156 +
             C42396 * C42157) *
                C47174 +
            (((C25959 - C25958) * C116 + (C25961 - C25960) * C47279) * C42155 +
             ((C25962 - C25963) * C116 + (C25964 - C25965) * C47279) * C42156 +
             C43929 * C42157) *
                C47181 +
            (C42396 * C42155 +
             ((C28014 - C28015) * C116 + (C28016 - C28017) * C47279) * C42156 +
             ((C43923 - C43924) * C116 + (C43925 - C43926) * C47279) * C42157) *
                C3602) *
               C2332 +
           ((((C21497 - C21496) * C116 + (C21499 - C21498) * C47279) * C42155 +
             (C26446 * C116 + C26447 * C47279) * C42156 + C43822 * C42157) *
                C47174 +
            ((C26444 * C116 + C26445 * C47279) * C42155 +
             (C27878 * C116 + C27879 * C47279) * C42156 +
             ((C27880 - C27881) * C116 + (C27882 - C27883) * C47279) * C42157) *
                C47181 +
            (C43822 * C42155 +
             ((C27881 - C27880) * C116 + (C27883 - C27882) * C47279) * C42156 +
             ((C47018 * C6702 - C21369 * C6700) * C116 +
              (C47018 * C6706 - C21369 * C6704) * C47279) *
                 C42157) *
                C3602) *
               C47136) *
              C47056)) /
        (p * q * std::sqrt(p + q));
    d2ee[209] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C47018 * C124 - C21369 * C117) * C116 +
              (C47018 * C138 - C21369 * C127) * C47279) *
                 C42155 +
             ((C25950 - C25951) * C116 + (C25952 - C25953) * C47279) * C42156 +
             C42395 * C42157) *
                C3094 +
            (((C25951 - C25950) * C116 + (C25953 - C25952) * C47279) * C42155 +
             ((C25954 - C25955) * C116 + (C25956 - C25957) * C47279) * C42156 +
             C43672 * C42157) *
                C47178) *
               C2332 +
           ((((C21485 - C21484) * C116 + (C21487 - C21486) * C47279) * C42155 +
             (C26442 * C116 + C26443 * C47279) * C42156 + C43030 * C42157) *
                C3094 +
            ((C26440 * C116 + C26441 * C47279) * C42155 +
             (C26828 * C116 + C26829 * C47279) * C42156 + C44030 * C42157) *
                C47178) *
               C47136) *
              C47407 +
          (((((C21369 * C118 - C47018 * C125) * C116 +
              (C21369 * C128 - C47018 * C139) * C47279) *
                 C42155 +
             ((C25958 - C25959) * C116 + (C25960 - C25961) * C47279) * C42156 +
             C42396 * C42157) *
                C3094 +
            (((C25959 - C25958) * C116 + (C25961 - C25960) * C47279) * C42155 +
             ((C25962 - C25963) * C116 + (C25964 - C25965) * C47279) * C42156 +
             C43929 * C42157) *
                C47178) *
               C2332 +
           ((((C21497 - C21496) * C116 + (C21499 - C21498) * C47279) * C42155 +
             (C26446 * C116 + C26447 * C47279) * C42156 + C43822 * C42157) *
                C3094 +
            ((C26444 * C116 + C26445 * C47279) * C42155 +
             (C27878 * C116 + C27879 * C47279) * C42156 +
             ((C27880 - C27881) * C116 + (C27882 - C27883) * C47279) * C42157) *
                C47178) *
               C47136) *
              C47394 +
          (((((C47018 * C126 - C21369 * C119) * C116 +
              (C47018 * C140 - C21369 * C129) * C47279) *
                 C42155 +
             ((C25966 - C25967) * C116 + (C25968 - C25969) * C47279) * C42156 +
             C42397 * C42157) *
                C3094 +
            (((C25967 - C25966) * C116 + (C25969 - C25968) * C47279) * C42155 +
             ((C25970 - C25971) * C116 + (C25972 - C25973) * C47279) * C42156 +
             ((C42385 - C42386) * C116 + (C42387 - C42388) * C47279) * C42157) *
                C47178) *
               C2332 +
           ((((C21509 - C21508) * C116 + (C21511 - C21510) * C47279) * C42155 +
             (C26450 * C116 + C26451 * C47279) * C42156 +
             ((C25974 - C25975) * C116 + (C25976 - C25977) * C47279) * C42157) *
                C3094 +
            ((C26448 * C116 + C26449 * C47279) * C42155 +
             ((C25975 - C25974) * C116 + (C25977 - C25976) * C47279) * C42156 +
             ((C47018 * C2227 - C21369 * C2224) * C116 +
              (C47018 * C2233 - C21369 * C2230) * C47279) *
                 C42157) *
                C47178) *
               C47136) *
              C47365)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C47018 * C124 - C21369 * C117) * C116 +
             (C47018 * C138 - C21369 * C127) * C47279) *
                C42155 +
            ((C25950 - C25951) * C116 + (C25952 - C25953) * C47279) * C42156 +
            C42395 * C42157) *
               C3094 +
           (((C25951 - C25950) * C116 + (C25953 - C25952) * C47279) * C42155 +
            ((C25954 - C25955) * C116 + (C25956 - C25957) * C47279) * C42156 +
            C43672 * C42157) *
               C47178) *
              C47417 +
          ((((C21485 - C21484) * C116 + (C21487 - C21486) * C47279) * C42155 +
            (C26442 * C116 + C26443 * C47279) * C42156 + C43030 * C42157) *
               C3094 +
           ((C26440 * C116 + C26441 * C47279) * C42155 +
            (C26828 * C116 + C26829 * C47279) * C42156 + C44030 * C42157) *
               C47178) *
              C47413 +
          (((C21520 * C116 + C21521 * C47279) * C42155 +
            (C26830 * C116 + C26831 * C47279) * C42156 + C43031 * C42157) *
               C3094 +
           ((C22312 * C116 + C22313 * C47279) * C42155 +
            (C26832 * C116 + C26833 * C47279) * C42156 +
            ((C23340 - C23341) * C116 + (C23342 - C23343) * C47279) * C42157) *
               C47178) *
              C47403 +
          (((C22186 * C116 + C22187 * C47279) * C42155 +
            (C27290 * C116 + C27291 * C47279) * C42156 +
            ((C22326 - C22327) * C116 + (C22328 - C22329) * C47279) * C42157) *
               C3094 +
           ((C22690 * C116 + C22691 * C47279) * C42155 +
            ((C22327 - C22326) * C116 + (C22329 - C22328) * C47279) * C42156 +
            ((C47018 * C23332 - C21369 * C23331) * C116 +
             (C47018 * C23334 - C21369 * C23333) * C47279) *
                C42157) *
               C47178) *
              C47381) *
         C47045) /
            (p * q * std::sqrt(p + q));
    d2ee[210] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C47018 * C124 - C21369 * C117) * C116 +
             (C47018 * C138 - C21369 * C127) * C47279) *
                C42155 +
            ((C25950 - C25951) * C116 + (C25952 - C25953) * C47279) * C42156 +
            C42395 * C42157) *
               C47091 * C1284 +
           (((C21485 - C21484) * C116 + (C21487 - C21486) * C47279) * C42155 +
            (C26442 * C116 + C26443 * C47279) * C42156 + C43030 * C42157) *
               C47091 * C1285 +
           ((C21520 * C116 + C21521 * C47279) * C42155 +
            (C26830 * C116 + C26831 * C47279) * C42156 + C43031 * C42157) *
               C47091 * C1286 +
           ((C22186 * C116 + C22187 * C47279) * C42155 +
            (C27290 * C116 + C27291 * C47279) * C42156 +
            ((C22326 - C22327) * C116 + (C22328 - C22329) * C47279) * C42157) *
               C47091 * C47381) *
              C47325 +
          ((((C21369 * C118 - C47018 * C125) * C116 +
             (C21369 * C128 - C47018 * C139) * C47279) *
                C42155 +
            ((C25958 - C25959) * C116 + (C25960 - C25961) * C47279) * C42156 +
            C42396 * C42157) *
               C47091 * C1284 +
           (((C21497 - C21496) * C116 + (C21499 - C21498) * C47279) * C42155 +
            (C26446 * C116 + C26447 * C47279) * C42156 +
            (C27876 * C116 + C27877 * C47279) * C42157) *
               C47091 * C1285 +
           ((C21522 * C116 + C21523 * C47279) * C42155 +
            (C27158 * C116 + C27159 * C47279) * C42156 +
            ((C23132 - C23133) * C116 + (C23134 - C23135) * C47279) * C42157) *
               C47091 * C1286 +
           ((C22430 * C116 + C22431 * C47279) * C42155 +
            ((C22585 - C22584) * C116 + (C22587 - C22586) * C47279) * C42156 +
            ((C47018 * C5810 - C21369 * C5808) * C116 +
             (C47018 * C5814 - C21369 * C5812) * C47279) *
                C42157) *
               C47091 * C47381) *
              C47056)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C47018 * C124 - C21369 * C117) * C116 +
             (C47018 * C138 - C21369 * C127) * C47279) *
                C42155 +
            ((C25950 - C25951) * C116 + (C25952 - C25953) * C47279) * C42156 +
            C42395 * C42157) *
               C47091 * C47339 +
           (((C21485 - C21484) * C116 + (C21487 - C21486) * C47279) * C42155 +
            (C26442 * C116 + C26443 * C47279) * C42156 +
            (C26826 * C116 + C26827 * C47279) * C42157) *
               C47091 * C47136) *
              C554 +
          ((((C21369 * C118 - C47018 * C125) * C116 +
             (C21369 * C128 - C47018 * C139) * C47279) *
                C42155 +
            ((C25958 - C25959) * C116 + (C25960 - C25961) * C47279) * C42156 +
            C42396 * C42157) *
               C47091 * C47339 +
           (((C21497 - C21496) * C116 + (C21499 - C21498) * C47279) * C42155 +
            (C26446 * C116 + C26447 * C47279) * C42156 +
            (C27876 * C116 + C27877 * C47279) * C42157) *
               C47091 * C47136) *
              C555 +
          ((((C47018 * C126 - C21369 * C119) * C116 +
             (C47018 * C140 - C21369 * C129) * C47279) *
                C42155 +
            ((C25966 - C25967) * C116 + (C25968 - C25969) * C47279) * C42156 +
            C42397 * C42157) *
               C47091 * C47339 +
           (((C21509 - C21508) * C116 + (C21511 - C21510) * C47279) * C42155 +
            (C26450 * C116 + C26451 * C47279) * C42156 +
            ((C25974 - C25975) * C116 + (C25976 - C25977) * C47279) * C42157) *
               C47091 * C47136) *
              C556 +
          ((((C21369 * C120 - C47018 * C130) * C116 +
             (C21369 * C131 - C47018 * C141) * C47279) *
                C42155 +
            ((C26242 - C26243) * C116 + (C26244 - C26245) * C47279) * C42156 +
            ((C21369 * C421 - C47018 * C438) * C116 +
             (C21369 * C439 - C47018 * C451) * C47279) *
                C42157) *
               C47091 * C47339 +
           (((C21735 - C21734) * C116 + (C21737 - C21736) * C47279) * C42155 +
            ((C26109 - C26108) * C116 + (C26111 - C26110) * C47279) * C42156 +
            ((C47018 * C2015 - C21369 * C2014) * C116 +
             (C47018 * C2017 - C21369 * C2016) * C47279) *
                C42157) *
               C47091 * C47136) *
              C47375)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C47018 * C124 - C21369 * C117) * C116 +
              (C47018 * C138 - C21369 * C127) * C47279) *
                 C42155 +
             ((C25950 - C25951) * C116 + (C25952 - C25953) * C47279) * C42156 +
             C42395 * C42157) *
                C1664 +
            (((C25951 - C25950) * C116 + (C25953 - C25952) * C47279) * C42155 +
             ((C25954 - C25955) * C116 + (C25956 - C25957) * C47279) * C42156 +
             C43672 * C42157) *
                C1665 +
            (C42395 * C42155 +
             ((C27670 - C27671) * C116 + (C27672 - C27673) * C47279) * C42156 +
             C43673 * C42157) *
                C47374) *
               C47339 +
           ((((C21485 - C21484) * C116 + (C21487 - C21486) * C47279) * C42155 +
             (C26442 * C116 + C26443 * C47279) * C42156 + C43030 * C42157) *
                C1664 +
            ((C26440 * C116 + C26441 * C47279) * C42155 +
             (C26828 * C116 + C26829 * C47279) * C42156 +
             (C28148 * C116 + C28149 * C47279) * C42157) *
                C1665 +
            (C43030 * C42155 + (C28150 * C116 + C28151 * C47279) * C42156 +
             ((C27678 - C27679) * C116 + (C27680 - C27681) * C47279) * C42157) *
                C47374) *
               C47136) *
              C47325 +
          (((((C21369 * C118 - C47018 * C125) * C116 +
              (C21369 * C128 - C47018 * C139) * C47279) *
                 C42155 +
             ((C25958 - C25959) * C116 + (C25960 - C25961) * C47279) * C42156 +
             C42396 * C42157) *
                C1664 +
            (((C25959 - C25958) * C116 + (C25961 - C25960) * C47279) * C42155 +
             ((C25962 - C25963) * C116 + (C25964 - C25965) * C47279) * C42156 +
             ((C28015 - C28014) * C116 + (C28017 - C28016) * C47279) * C42157) *
                C1665 +
            (C42396 * C42155 +
             ((C28014 - C28015) * C116 + (C28016 - C28017) * C47279) * C42156 +
             ((C21369 * C1848 - C47018 * C1857) * C116 +
              (C21369 * C1860 - C47018 * C1866) * C47279) *
                 C42157) *
                C47374) *
               C47339 +
           ((((C21497 - C21496) * C116 + (C21499 - C21498) * C47279) * C42155 +
             (C26446 * C116 + C26447 * C47279) * C42156 + C43822 * C42157) *
                C1664 +
            ((C26444 * C116 + C26445 * C47279) * C42155 +
             (C27878 * C116 + C27879 * C47279) * C42156 +
             ((C27880 - C27881) * C116 + (C27882 - C27883) * C47279) * C42157) *
                C1665 +
            (C43822 * C42155 +
             ((C27881 - C27880) * C116 + (C27883 - C27882) * C47279) * C42156 +
             ((C47018 * C6702 - C21369 * C6700) * C116 +
              (C47018 * C6706 - C21369 * C6704) * C47279) *
                 C42157) *
                C47374) *
               C47136) *
              C47056)) /
            (p * q * std::sqrt(p + q));
    d2ee[211] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C47018 * C124 - C21369 * C117) * C116 +
             (C47018 * C138 - C21369 * C127) * C47279) *
                C42155 +
            ((C25950 - C25951) * C116 + (C25952 - C25953) * C47279) * C42156 +
            C42395 * C42157) *
               C47340 +
           (((C25951 - C25950) * C116 + (C25953 - C25952) * C47279) * C42155 +
            ((C25954 - C25955) * C116 + (C25956 - C25957) * C47279) * C42156 +
            ((C27671 - C27670) * C116 + (C27673 - C27672) * C47279) * C42157) *
               C47178) *
              C1284 +
          ((((C21485 - C21484) * C116 + (C21487 - C21486) * C47279) * C42155 +
            (C26442 * C116 + C26443 * C47279) * C42156 + C43030 * C42157) *
               C47340 +
           ((C26440 * C116 + C26441 * C47279) * C42155 +
            (C26828 * C116 + C26829 * C47279) * C42156 +
            (C28148 * C116 + C28149 * C47279) * C42157) *
               C47178) *
              C1285 +
          (((C21520 * C116 + C21521 * C47279) * C42155 +
            (C26830 * C116 + C26831 * C47279) * C42156 + C43031 * C42157) *
               C47340 +
           ((C22312 * C116 + C22313 * C47279) * C42155 +
            (C26832 * C116 + C26833 * C47279) * C42156 +
            ((C23340 - C23341) * C116 + (C23342 - C23343) * C47279) * C42157) *
               C47178) *
              C1286 +
          (((C22186 * C116 + C22187 * C47279) * C42155 +
            (C27290 * C116 + C27291 * C47279) * C42156 +
            ((C22326 - C22327) * C116 + (C22328 - C22329) * C47279) * C42157) *
               C47340 +
           ((C22690 * C116 + C22691 * C47279) * C42155 +
            ((C22327 - C22326) * C116 + (C22329 - C22328) * C47279) * C42156 +
            ((C47018 * C23332 - C21369 * C23331) * C116 +
             (C47018 * C23334 - C21369 * C23333) * C47279) *
                C42157) *
               C47178) *
              C47381) *
         C47045) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C47018 * C124 - C21369 * C117) * C116 +
              (C47018 * C138 - C21369 * C127) * C47279) *
                 C42155 +
             ((C25950 - C25951) * C116 + (C25952 - C25953) * C47279) * C42156 +
             C42395 * C42157) *
                C47340 +
            (((C25951 - C25950) * C116 + (C25953 - C25952) * C47279) * C42155 +
             ((C25954 - C25955) * C116 + (C25956 - C25957) * C47279) * C42156 +
             ((C27671 - C27670) * C116 + (C27673 - C27672) * C47279) * C42157) *
                C47178) *
               C47339 +
           ((((C21485 - C21484) * C116 + (C21487 - C21486) * C47279) * C42155 +
             (C26442 * C116 + C26443 * C47279) * C42156 +
             (C26826 * C116 + C26827 * C47279) * C42157) *
                C47340 +
            ((C26440 * C116 + C26441 * C47279) * C42155 +
             (C26828 * C116 + C26829 * C47279) * C42156 +
             (C28148 * C116 + C28149 * C47279) * C42157) *
                C47178) *
               C47136) *
              C258 +
          (((((C21369 * C118 - C47018 * C125) * C116 +
              (C21369 * C128 - C47018 * C139) * C47279) *
                 C42155 +
             ((C25958 - C25959) * C116 + (C25960 - C25961) * C47279) * C42156 +
             C42396 * C42157) *
                C47340 +
            (((C25959 - C25958) * C116 + (C25961 - C25960) * C47279) * C42155 +
             ((C25962 - C25963) * C116 + (C25964 - C25965) * C47279) * C42156 +
             ((C28015 - C28014) * C116 + (C28017 - C28016) * C47279) * C42157) *
                C47178) *
               C47339 +
           ((((C21497 - C21496) * C116 + (C21499 - C21498) * C47279) * C42155 +
             (C26446 * C116 + C26447 * C47279) * C42156 +
             (C27876 * C116 + C27877 * C47279) * C42157) *
                C47340 +
            ((C26444 * C116 + C26445 * C47279) * C42155 +
             (C27878 * C116 + C27879 * C47279) * C42156 +
             ((C27880 - C27881) * C116 + (C27882 - C27883) * C47279) * C42157) *
                C47178) *
               C47136) *
              C259 +
          (((((C47018 * C126 - C21369 * C119) * C116 +
              (C47018 * C140 - C21369 * C129) * C47279) *
                 C42155 +
             ((C25966 - C25967) * C116 + (C25968 - C25969) * C47279) * C42156 +
             C42397 * C42157) *
                C47340 +
            (((C25967 - C25966) * C116 + (C25969 - C25968) * C47279) * C42155 +
             ((C25970 - C25971) * C116 + (C25972 - C25973) * C47279) * C42156 +
             ((C42385 - C42386) * C116 + (C42387 - C42388) * C47279) * C42157) *
                C47178) *
               C47339 +
           ((((C21509 - C21508) * C116 + (C21511 - C21510) * C47279) * C42155 +
             (C26450 * C116 + C26451 * C47279) * C42156 +
             ((C25974 - C25975) * C116 + (C25976 - C25977) * C47279) * C42157) *
                C47340 +
            ((C26448 * C116 + C26449 * C47279) * C42155 +
             ((C25975 - C25974) * C116 + (C25977 - C25976) * C47279) * C42156 +
             ((C47018 * C2227 - C21369 * C2224) * C116 +
              (C47018 * C2233 - C21369 * C2230) * C47279) *
                 C42157) *
                C47178) *
               C47136) *
              C47365)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C47018 * C124 - C21369 * C117) * C116 +
             (C47018 * C138 - C21369 * C127) * C47279) *
                C42155 +
            ((C25950 - C25951) * C116 + (C25952 - C25953) * C47279) * C42156 +
            C42395 * C42157) *
               C2116 +
           (((C25951 - C25950) * C116 + (C25953 - C25952) * C47279) * C42155 +
            ((C25954 - C25955) * C116 + (C25956 - C25957) * C47279) * C42156 +
            C43672 * C42157) *
               C2117 +
           (C42395 * C42155 +
            ((C27670 - C27671) * C116 + (C27672 - C27673) * C47279) * C42156 +
            C43673 * C42157) *
               C2118 +
           (C43672 * C42155 +
            ((C27674 - C27675) * C116 + (C27676 - C27677) * C47279) * C42156 +
            ((C43664 - C43665) * C116 + (C43666 - C43667) * C47279) * C42157) *
               C47387) *
              C47339 +
          ((((C21485 - C21484) * C116 + (C21487 - C21486) * C47279) * C42155 +
            (C26442 * C116 + C26443 * C47279) * C42156 + C43030 * C42157) *
               C2116 +
           ((C26440 * C116 + C26441 * C47279) * C42155 +
            (C26828 * C116 + C26829 * C47279) * C42156 + C44030 * C42157) *
               C2117 +
           (C43030 * C42155 + (C28150 * C116 + C28151 * C47279) * C42156 +
            ((C27678 - C27679) * C116 + (C27680 - C27681) * C47279) * C42157) *
               C2118 +
           (C44030 * C42155 +
            ((C27679 - C27678) * C116 + (C27681 - C27680) * C47279) * C42156 +
            ((C47018 * C27666 - C21369 * C27665) * C116 +
             (C47018 * C27668 - C21369 * C27667) * C47279) *
                C42157) *
               C47387) *
              C47136) *
         C47045) /
            (p * q * std::sqrt(p + q));
    d2ee[212] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C47018 * C124 - C21369 * C117) * C116 +
                (C47018 * C138 - C21369 * C127) * C47279) *
                   C42155 +
               ((C25950 - C25951) * C116 + (C25952 - C25953) * C47279) *
                   C42156 +
               ((C25955 - C25954) * C116 + (C25957 - C25956) * C47279) *
                   C42157) *
                  C47091 * C47073 * C108 +
              (((C21369 * C118 - C47018 * C125) * C116 +
                (C21369 * C128 - C47018 * C139) * C47279) *
                   C42155 +
               ((C25958 - C25959) * C116 + (C25960 - C25961) * C47279) *
                   C42156 +
               ((C25963 - C25962) * C116 + (C25965 - C25964) * C47279) *
                   C42157) *
                  C47091 * C47073 * C109 +
              (((C47018 * C126 - C21369 * C119) * C116 +
                (C47018 * C140 - C21369 * C129) * C47279) *
                   C42155 +
               ((C25966 - C25967) * C116 + (C25968 - C25969) * C47279) *
                   C42156 +
               ((C25971 - C25970) * C116 + (C25973 - C25972) * C47279) *
                   C42157) *
                  C47091 * C47073 * C110 +
              (((C21369 * C120 - C47018 * C130) * C116 +
                (C21369 * C131 - C47018 * C141) * C47279) *
                   C42155 +
               ((C26242 - C26243) * C116 + (C26244 - C26245) * C47279) *
                   C42156 +
               ((C21369 * C421 - C47018 * C438) * C116 +
                (C21369 * C439 - C47018 * C451) * C47279) *
                   C42157) *
                  C47091 * C47073 * C111 +
              (((C47018 * C132 - C21369 * C121) * C116 +
                (C47018 * C142 - C21369 * C133) * C47279) *
                   C42155 +
               ((C47018 * C440 - C21369 * C422) * C116 +
                (C47018 * C452 - C21369 * C441) * C47279) *
                   C42156 +
               ((C47018 * C442 - C21369 * C423) * C116 +
                (C47018 * C453 - C21369 * C443) * C47279) *
                   C42157) *
                  C47091 * C47073 * C112) +
         0.5 * std::pow(Pi, 2.5) *
             (((((C47018 * C124 - C21369 * C117) * C116 +
                 (C47018 * C138 - C21369 * C127) * C47279) *
                    C42155 +
                ((C25950 - C25951) * C116 + (C25952 - C25953) * C47279) *
                    C42156 +
                ((C25955 - C25954) * C116 + (C25957 - C25956) * C47279) *
                    C42157) *
                   C47091 * C47410 +
               (((C21485 - C21484) * C116 + (C21487 - C21486) * C47279) *
                    C42155 +
                (C26442 * C116 + C26443 * C47279) * C42156 +
                (C26826 * C116 + C26827 * C47279) * C42157) *
                   C47091 * C47398 +
               ((C21520 * C116 + C21521 * C47279) * C42155 +
                (C26830 * C116 + C26831 * C47279) * C42156 +
                (C22330 * C116 + C22331 * C47279) * C42157) *
                   C47091 * C47371) *
                  C258 +
              ((((C21369 * C118 - C47018 * C125) * C116 +
                 (C21369 * C128 - C47018 * C139) * C47279) *
                    C42155 +
                ((C25958 - C25959) * C116 + (C25960 - C25961) * C47279) *
                    C42156 +
                ((C25963 - C25962) * C116 + (C25965 - C25964) * C47279) *
                    C42157) *
                   C47091 * C47410 +
               (((C21497 - C21496) * C116 + (C21499 - C21498) * C47279) *
                    C42155 +
                (C26446 * C116 + C26447 * C47279) * C42156 +
                (C27876 * C116 + C27877 * C47279) * C42157) *
                   C47091 * C47398 +
               ((C21522 * C116 + C21523 * C47279) * C42155 +
                (C27158 * C116 + C27159 * C47279) * C42156 +
                ((C23132 - C23133) * C116 + (C23134 - C23135) * C47279) *
                    C42157) *
                   C47091 * C47371) *
                  C259 +
              ((((C47018 * C126 - C21369 * C119) * C116 +
                 (C47018 * C140 - C21369 * C129) * C47279) *
                    C42155 +
                ((C25966 - C25967) * C116 + (C25968 - C25969) * C47279) *
                    C42156 +
                ((C25971 - C25970) * C116 + (C25973 - C25972) * C47279) *
                    C42157) *
                   C47091 * C47410 +
               (((C21509 - C21508) * C116 + (C21511 - C21510) * C47279) *
                    C42155 +
                (C26450 * C116 + C26451 * C47279) * C42156 +
                ((C25974 - C25975) * C116 + (C25976 - C25977) * C47279) *
                    C42157) *
                   C47091 * C47398 +
               ((C21524 * C116 + C21525 * C47279) * C42155 +
                ((C22007 - C22006) * C116 + (C22009 - C22008) * C47279) *
                    C42156 +
                ((C47018 * C1173 - C21369 * C1158) * C116 +
                 (C47018 * C1185 - C21369 * C1176) * C47279) *
                    C42157) *
                   C47091 * C47371) *
                  C47365)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C47018 * C124 - C21369 * C117) * C116 +
             (C47018 * C138 - C21369 * C127) * C47279) *
                C42155 +
            ((C25950 - C25951) * C116 + (C25952 - C25953) * C47279) * C42156 +
            C42395 * C42157) *
               C47411 +
           (((C25951 - C25950) * C116 + (C25953 - C25952) * C47279) * C42155 +
            ((C25954 - C25955) * C116 + (C25956 - C25957) * C47279) * C42156 +
            ((C27671 - C27670) * C116 + (C27673 - C27672) * C47279) * C42157) *
               C47400 +
           (C42395 * C42155 +
            ((C27670 - C27671) * C116 + (C27672 - C27673) * C47279) * C42156 +
            ((C27675 - C27674) * C116 + (C27677 - C27676) * C47279) * C42157) *
               C47374) *
              C47073 * C258 +
          ((((C21369 * C118 - C47018 * C125) * C116 +
             (C21369 * C128 - C47018 * C139) * C47279) *
                C42155 +
            ((C25958 - C25959) * C116 + (C25960 - C25961) * C47279) * C42156 +
            C42396 * C42157) *
               C47411 +
           (((C25959 - C25958) * C116 + (C25961 - C25960) * C47279) * C42155 +
            ((C25962 - C25963) * C116 + (C25964 - C25965) * C47279) * C42156 +
            ((C28015 - C28014) * C116 + (C28017 - C28016) * C47279) * C42157) *
               C47400 +
           (C42396 * C42155 +
            ((C28014 - C28015) * C116 + (C28016 - C28017) * C47279) * C42156 +
            ((C21369 * C1848 - C47018 * C1857) * C116 +
             (C21369 * C1860 - C47018 * C1866) * C47279) *
                C42157) *
               C47374) *
              C47073 * C259 +
          ((((C47018 * C126 - C21369 * C119) * C116 +
             (C47018 * C140 - C21369 * C129) * C47279) *
                C42155 +
            ((C25966 - C25967) * C116 + (C25968 - C25969) * C47279) * C42156 +
            C42397 * C42157) *
               C47411 +
           (((C25967 - C25966) * C116 + (C25969 - C25968) * C47279) * C42155 +
            ((C25970 - C25971) * C116 + (C25972 - C25973) * C47279) * C42156 +
            ((C42385 - C42386) * C116 + (C42387 - C42388) * C47279) * C42157) *
               C47400 +
           (C42397 * C42155 +
            ((C42386 - C42385) * C116 + (C42388 - C42387) * C47279) * C42156 +
            ((C47018 * C1858 - C21369 * C1849) * C116 +
             (C47018 * C1867 - C21369 * C1861) * C47279) *
                C42157) *
               C47374) *
              C47073 * C47365)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C47018 * C124 - C21369 * C117) * C116 +
             (C47018 * C138 - C21369 * C127) * C47279) *
                C42155 +
            ((C25950 - C25951) * C116 + (C25952 - C25953) * C47279) * C42156 +
            C42395 * C42157) *
               C47091 * C942 +
           (((C21485 - C21484) * C116 + (C21487 - C21486) * C47279) * C42155 +
            (C26442 * C116 + C26443 * C47279) * C42156 +
            (C26826 * C116 + C26827 * C47279) * C42157) *
               C47091 * C943 +
           ((C21520 * C116 + C21521 * C47279) * C42155 +
            (C26830 * C116 + C26831 * C47279) * C42156 +
            (C22330 * C116 + C22331 * C47279) * C42157) *
               C47091 * C47371) *
              C47407 +
          ((((C21369 * C118 - C47018 * C125) * C116 +
             (C21369 * C128 - C47018 * C139) * C47279) *
                C42155 +
            ((C25958 - C25959) * C116 + (C25960 - C25961) * C47279) * C42156 +
            C42396 * C42157) *
               C47091 * C942 +
           (((C21497 - C21496) * C116 + (C21499 - C21498) * C47279) * C42155 +
            (C26446 * C116 + C26447 * C47279) * C42156 +
            (C27876 * C116 + C27877 * C47279) * C42157) *
               C47091 * C943 +
           ((C21522 * C116 + C21523 * C47279) * C42155 +
            (C27158 * C116 + C27159 * C47279) * C42156 +
            ((C23132 - C23133) * C116 + (C23134 - C23135) * C47279) * C42157) *
               C47091 * C47371) *
              C47394 +
          ((((C47018 * C126 - C21369 * C119) * C116 +
             (C47018 * C140 - C21369 * C129) * C47279) *
                C42155 +
            ((C25966 - C25967) * C116 + (C25968 - C25969) * C47279) * C42156 +
            C42397 * C42157) *
               C47091 * C942 +
           (((C21509 - C21508) * C116 + (C21511 - C21510) * C47279) * C42155 +
            (C26450 * C116 + C26451 * C47279) * C42156 +
            ((C25974 - C25975) * C116 + (C25976 - C25977) * C47279) * C42157) *
               C47091 * C943 +
           ((C21524 * C116 + C21525 * C47279) * C42155 +
            ((C22007 - C22006) * C116 + (C22009 - C22008) * C47279) * C42156 +
            ((C47018 * C1173 - C21369 * C1158) * C116 +
             (C47018 * C1185 - C21369 * C1176) * C47279) *
                C42157) *
               C47091 * C47371) *
              C47365)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C47018 * C124 - C21369 * C117) * C116 +
            (C47018 * C138 - C21369 * C127) * C47279) *
               C42155 +
           ((C25950 - C25951) * C116 + (C25952 - C25953) * C47279) * C42156 +
           C42395 * C42157) *
              C47091 * C1010 +
          (((C21485 - C21484) * C116 + (C21487 - C21486) * C47279) * C42155 +
           (C26442 * C116 + C26443 * C47279) * C42156 +
           (C26826 * C116 + C26827 * C47279) * C42157) *
              C47091 * C1011 +
          ((C21520 * C116 + C21521 * C47279) * C42155 +
           (C26830 * C116 + C26831 * C47279) * C42156 +
           (C22330 * C116 + C22331 * C47279) * C42157) *
              C47091 * C1012 +
          ((C22186 * C116 + C22187 * C47279) * C42155 +
           (C27290 * C116 + C27291 * C47279) * C42156 +
           ((C22326 - C22327) * C116 + (C22328 - C22329) * C47279) * C42157) *
              C47091 * C1013 +
          ((C22196 * C116 + C22197 * C47279) * C42155 +
           ((C22693 - C22692) * C116 + (C22695 - C22694) * C47279) * C42156 +
           ((C47018 * C22308 - C21369 * C22307) * C116 +
            (C47018 * C22310 - C21369 * C22309) * C47279) *
               C42157) *
              C47091 * C1014) *
         C47045) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C47018 * C124 - C21369 * C117) * C116 +
             (C47018 * C138 - C21369 * C127) * C47279) *
                C42155 +
            ((C25950 - C25951) * C116 + (C25952 - C25953) * C47279) * C42156 +
            C42395 * C42157) *
               C47411 +
           (((C25951 - C25950) * C116 + (C25953 - C25952) * C47279) * C42155 +
            ((C25954 - C25955) * C116 + (C25956 - C25957) * C47279) * C42156 +
            ((C27671 - C27670) * C116 + (C27673 - C27672) * C47279) * C42157) *
               C47400 +
           (C42395 * C42155 +
            ((C27670 - C27671) * C116 + (C27672 - C27673) * C47279) * C42156 +
            ((C27675 - C27674) * C116 + (C27677 - C27676) * C47279) * C42157) *
               C47374) *
              C942 +
          ((((C21485 - C21484) * C116 + (C21487 - C21486) * C47279) * C42155 +
            (C26442 * C116 + C26443 * C47279) * C42156 + C43030 * C42157) *
               C47411 +
           ((C26440 * C116 + C26441 * C47279) * C42155 +
            (C26828 * C116 + C26829 * C47279) * C42156 +
            (C28148 * C116 + C28149 * C47279) * C42157) *
               C47400 +
           (C43030 * C42155 + (C28150 * C116 + C28151 * C47279) * C42156 +
            ((C27678 - C27679) * C116 + (C27680 - C27681) * C47279) * C42157) *
               C47374) *
              C943 +
          (((C21520 * C116 + C21521 * C47279) * C42155 +
            (C26830 * C116 + C26831 * C47279) * C42156 + C43031 * C42157) *
               C47411 +
           ((C22312 * C116 + C22313 * C47279) * C42155 +
            (C26832 * C116 + C26833 * C47279) * C42156 +
            ((C23340 - C23341) * C116 + (C23342 - C23343) * C47279) * C42157) *
               C47400 +
           (C43031 * C42155 +
            ((C23341 - C23340) * C116 + (C23343 - C23342) * C47279) * C42156 +
            ((C47018 * C22978 - C21369 * C22977) * C116 +
             (C47018 * C22980 - C21369 * C22979) * C47279) *
                C42157) *
               C47374) *
              C47371) *
         C47045) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C47018 * C124 - C21369 * C117) * C116 +
             (C47018 * C138 - C21369 * C127) * C47279) *
                C42155 +
            ((C25950 - C25951) * C116 + (C25952 - C25953) * C47279) * C42156 +
            C42395 * C42157) *
               C1664 +
           (((C25951 - C25950) * C116 + (C25953 - C25952) * C47279) * C42155 +
            ((C25954 - C25955) * C116 + (C25956 - C25957) * C47279) * C42156 +
            ((C27671 - C27670) * C116 + (C27673 - C27672) * C47279) * C42157) *
               C1665 +
           (C42395 * C42155 +
            ((C27670 - C27671) * C116 + (C27672 - C27673) * C47279) * C42156 +
            ((C27675 - C27674) * C116 + (C27677 - C27676) * C47279) * C42157) *
               C47374) *
              C47073 * C47407 +
          ((((C21369 * C118 - C47018 * C125) * C116 +
             (C21369 * C128 - C47018 * C139) * C47279) *
                C42155 +
            ((C25958 - C25959) * C116 + (C25960 - C25961) * C47279) * C42156 +
            C42396 * C42157) *
               C1664 +
           (((C25959 - C25958) * C116 + (C25961 - C25960) * C47279) * C42155 +
            ((C25962 - C25963) * C116 + (C25964 - C25965) * C47279) * C42156 +
            ((C28015 - C28014) * C116 + (C28017 - C28016) * C47279) * C42157) *
               C1665 +
           (C42396 * C42155 +
            ((C28014 - C28015) * C116 + (C28016 - C28017) * C47279) * C42156 +
            ((C21369 * C1848 - C47018 * C1857) * C116 +
             (C21369 * C1860 - C47018 * C1866) * C47279) *
                C42157) *
               C47374) *
              C47073 * C47394 +
          ((((C47018 * C126 - C21369 * C119) * C116 +
             (C47018 * C140 - C21369 * C129) * C47279) *
                C42155 +
            ((C25966 - C25967) * C116 + (C25968 - C25969) * C47279) * C42156 +
            C42397 * C42157) *
               C1664 +
           (((C25967 - C25966) * C116 + (C25969 - C25968) * C47279) * C42155 +
            ((C25970 - C25971) * C116 + (C25972 - C25973) * C47279) * C42156 +
            ((C42385 - C42386) * C116 + (C42387 - C42388) * C47279) * C42157) *
               C1665 +
           (C42397 * C42155 +
            ((C42386 - C42385) * C116 + (C42388 - C42387) * C47279) * C42156 +
            ((C47018 * C1858 - C21369 * C1849) * C116 +
             (C47018 * C1867 - C21369 * C1861) * C47279) *
                C42157) *
               C47374) *
              C47073 * C47365)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C47018 * C124 - C21369 * C117) * C116 +
             (C47018 * C138 - C21369 * C127) * C47279) *
                C42155 +
            ((C25950 - C25951) * C116 + (C25952 - C25953) * C47279) * C42156 +
            C42395 * C42157) *
               C1664 +
           (((C25951 - C25950) * C116 + (C25953 - C25952) * C47279) * C42155 +
            ((C25954 - C25955) * C116 + (C25956 - C25957) * C47279) * C42156 +
            ((C27671 - C27670) * C116 + (C27673 - C27672) * C47279) * C42157) *
               C1665 +
           (C42395 * C42155 +
            ((C27670 - C27671) * C116 + (C27672 - C27673) * C47279) * C42156 +
            ((C27675 - C27674) * C116 + (C27677 - C27676) * C47279) * C42157) *
               C47374) *
              C47410 +
          ((((C21485 - C21484) * C116 + (C21487 - C21486) * C47279) * C42155 +
            (C26442 * C116 + C26443 * C47279) * C42156 + C43030 * C42157) *
               C1664 +
           ((C26440 * C116 + C26441 * C47279) * C42155 +
            (C26828 * C116 + C26829 * C47279) * C42156 +
            (C28148 * C116 + C28149 * C47279) * C42157) *
               C1665 +
           (C43030 * C42155 + (C28150 * C116 + C28151 * C47279) * C42156 +
            ((C27678 - C27679) * C116 + (C27680 - C27681) * C47279) * C42157) *
               C47374) *
              C47398 +
          (((C21520 * C116 + C21521 * C47279) * C42155 +
            (C26830 * C116 + C26831 * C47279) * C42156 + C43031 * C42157) *
               C1664 +
           ((C22312 * C116 + C22313 * C47279) * C42155 +
            (C26832 * C116 + C26833 * C47279) * C42156 +
            ((C23340 - C23341) * C116 + (C23342 - C23343) * C47279) * C42157) *
               C1665 +
           (C43031 * C42155 +
            ((C23341 - C23340) * C116 + (C23343 - C23342) * C47279) * C42156 +
            ((C47018 * C22978 - C21369 * C22977) * C116 +
             (C47018 * C22980 - C21369 * C22979) * C47279) *
                C42157) *
               C47374) *
              C47371) *
         C47045) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C47018 * C124 - C21369 * C117) * C116 +
            (C47018 * C138 - C21369 * C127) * C47279) *
               C42155 +
           ((C25950 - C25951) * C116 + (C25952 - C25953) * C47279) * C42156 +
           C42395 * C42157) *
              C1839 +
          (((C25951 - C25950) * C116 + (C25953 - C25952) * C47279) * C42155 +
           ((C25954 - C25955) * C116 + (C25956 - C25957) * C47279) * C42156 +
           C43672 * C42157) *
              C1840 +
          (C42395 * C42155 +
           ((C27670 - C27671) * C116 + (C27672 - C27673) * C47279) * C42156 +
           C43673 * C42157) *
              C1841 +
          (C43672 * C42155 +
           ((C27674 - C27675) * C116 + (C27676 - C27677) * C47279) * C42156 +
           ((C43664 - C43665) * C116 + (C43666 - C43667) * C47279) * C42157) *
              C1842 +
          (C43673 * C42155 +
           ((C43665 - C43664) * C116 + (C43667 - C43666) * C47279) * C42156 +
           ((C47018 * C43656 - C21369 * C43655) * C116 +
            (C47018 * C43658 - C21369 * C43657) * C47279) *
               C42157) *
              C1843) *
         C47073 * C47045) /
            (p * q * std::sqrt(p + q));
    d2ee[213] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C47018 * C124 - C21369 * C117) * C116 +
              (C47018 * C138 - C21369 * C127) * C47279) *
                 C42155 +
             ((C25950 - C25951) * C116 + (C25952 - C25953) * C47279) * C42156 +
             C42395 * C42157) *
                C47340 +
            (((C25951 - C25950) * C116 + (C25953 - C25952) * C47279) * C42155 +
             ((C25954 - C25955) * C116 + (C25956 - C25957) * C47279) * C42156 +
             ((C27671 - C27670) * C116 + (C27673 - C27672) * C47279) * C42157) *
                C47178) *
               C942 +
           ((((C21485 - C21484) * C116 + (C21487 - C21486) * C47279) * C42155 +
             (C26442 * C116 + C26443 * C47279) * C42156 + C43030 * C42157) *
                C47340 +
            ((C26440 * C116 + C26441 * C47279) * C42155 +
             (C26828 * C116 + C26829 * C47279) * C42156 +
             (C28148 * C116 + C28149 * C47279) * C42157) *
                C47178) *
               C943 +
           (((C21520 * C116 + C21521 * C47279) * C42155 +
             (C26830 * C116 + C26831 * C47279) * C42156 + C43031 * C42157) *
                C47340 +
            ((C22312 * C116 + C22313 * C47279) * C42155 +
             (C26832 * C116 + C26833 * C47279) * C42156 +
             ((C23340 - C23341) * C116 + (C23342 - C23343) * C47279) * C42157) *
                C47178) *
               C47371) *
              C47325 +
          (((((C21369 * C118 - C47018 * C125) * C116 +
              (C21369 * C128 - C47018 * C139) * C47279) *
                 C42155 +
             ((C25958 - C25959) * C116 + (C25960 - C25961) * C47279) * C42156 +
             C42396 * C42157) *
                C47340 +
            (((C25959 - C25958) * C116 + (C25961 - C25960) * C47279) * C42155 +
             ((C25962 - C25963) * C116 + (C25964 - C25965) * C47279) * C42156 +
             ((C28015 - C28014) * C116 + (C28017 - C28016) * C47279) * C42157) *
                C47178) *
               C942 +
           ((((C21497 - C21496) * C116 + (C21499 - C21498) * C47279) * C42155 +
             (C26446 * C116 + C26447 * C47279) * C42156 +
             (C27876 * C116 + C27877 * C47279) * C42157) *
                C47340 +
            ((C26444 * C116 + C26445 * C47279) * C42155 +
             (C27878 * C116 + C27879 * C47279) * C42156 +
             ((C27880 - C27881) * C116 + (C27882 - C27883) * C47279) * C42157) *
                C47178) *
               C943 +
           (((C21522 * C116 + C21523 * C47279) * C42155 +
             (C27158 * C116 + C27159 * C47279) * C42156 +
             ((C23132 - C23133) * C116 + (C23134 - C23135) * C47279) * C42157) *
                C47340 +
            ((C22582 * C116 + C22583 * C47279) * C42155 +
             ((C23133 - C23132) * C116 + (C23135 - C23134) * C47279) * C42156 +
             ((C47018 * C7172 - C21369 * C7170) * C116 +
              (C47018 * C7176 - C21369 * C7174) * C47279) *
                 C42157) *
                C47178) *
               C47371) *
              C47056)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C47018 * C124 - C21369 * C117) * C116 +
             (C47018 * C138 - C21369 * C127) * C47279) *
                C42155 +
            ((C25950 - C25951) * C116 + (C25952 - C25953) * C47279) * C42156 +
            C42395 * C42157) *
               C47340 +
           (((C25951 - C25950) * C116 + (C25953 - C25952) * C47279) * C42155 +
            ((C25954 - C25955) * C116 + (C25956 - C25957) * C47279) * C42156 +
            ((C27671 - C27670) * C116 + (C27673 - C27672) * C47279) * C42157) *
               C47178) *
              C47073 * C554 +
          ((((C21369 * C118 - C47018 * C125) * C116 +
             (C21369 * C128 - C47018 * C139) * C47279) *
                C42155 +
            ((C25958 - C25959) * C116 + (C25960 - C25961) * C47279) * C42156 +
            C42396 * C42157) *
               C47340 +
           (((C25959 - C25958) * C116 + (C25961 - C25960) * C47279) * C42155 +
            ((C25962 - C25963) * C116 + (C25964 - C25965) * C47279) * C42156 +
            ((C28015 - C28014) * C116 + (C28017 - C28016) * C47279) * C42157) *
               C47178) *
              C47073 * C555 +
          ((((C47018 * C126 - C21369 * C119) * C116 +
             (C47018 * C140 - C21369 * C129) * C47279) *
                C42155 +
            ((C25966 - C25967) * C116 + (C25968 - C25969) * C47279) * C42156 +
            C42397 * C42157) *
               C47340 +
           (((C25967 - C25966) * C116 + (C25969 - C25968) * C47279) * C42155 +
            ((C25970 - C25971) * C116 + (C25972 - C25973) * C47279) * C42156 +
            ((C42385 - C42386) * C116 + (C42387 - C42388) * C47279) * C42157) *
               C47178) *
              C47073 * C556 +
          ((((C21369 * C120 - C47018 * C130) * C116 +
             (C21369 * C131 - C47018 * C141) * C47279) *
                C42155 +
            ((C26242 - C26243) * C116 + (C26244 - C26245) * C47279) * C42156 +
            ((C42594 - C42595) * C116 + (C42596 - C42597) * C47279) * C42157) *
               C47340 +
           (((C26243 - C26242) * C116 + (C26245 - C26244) * C47279) * C42155 +
            ((C42595 - C42594) * C116 + (C42597 - C42596) * C47279) * C42156 +
            ((C47018 * C2121 - C21369 * C2120) * C116 +
             (C47018 * C2123 - C21369 * C2122) * C47279) *
                C42157) *
               C47178) *
              C47073 * C47375)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C47018 * C124 - C21369 * C117) * C116 +
             (C47018 * C138 - C21369 * C127) * C47279) *
                C42155 +
            ((C25950 - C25951) * C116 + (C25952 - C25953) * C47279) * C42156 +
            C42395 * C42157) *
               C2116 +
           (((C25951 - C25950) * C116 + (C25953 - C25952) * C47279) * C42155 +
            ((C25954 - C25955) * C116 + (C25956 - C25957) * C47279) * C42156 +
            C43672 * C42157) *
               C2117 +
           (C42395 * C42155 +
            ((C27670 - C27671) * C116 + (C27672 - C27673) * C47279) * C42156 +
            C43673 * C42157) *
               C2118 +
           (C43672 * C42155 +
            ((C27674 - C27675) * C116 + (C27676 - C27677) * C47279) * C42156 +
            ((C43664 - C43665) * C116 + (C43666 - C43667) * C47279) * C42157) *
               C47387) *
              C47073 * C47325 +
          ((((C21369 * C118 - C47018 * C125) * C116 +
             (C21369 * C128 - C47018 * C139) * C47279) *
                C42155 +
            ((C25958 - C25959) * C116 + (C25960 - C25961) * C47279) * C42156 +
            C42396 * C42157) *
               C2116 +
           (((C25959 - C25958) * C116 + (C25961 - C25960) * C47279) * C42155 +
            ((C25962 - C25963) * C116 + (C25964 - C25965) * C47279) * C42156 +
            C43929 * C42157) *
               C2117 +
           (C42396 * C42155 +
            ((C28014 - C28015) * C116 + (C28016 - C28017) * C47279) * C42156 +
            ((C43923 - C43924) * C116 + (C43925 - C43926) * C47279) * C42157) *
               C2118 +
           (C43929 * C42155 +
            ((C43924 - C43923) * C116 + (C43926 - C43925) * C47279) * C42156 +
            ((C47018 * C12240 - C21369 * C12238) * C116 +
             (C47018 * C12244 - C21369 * C12242) * C47279) *
                C42157) *
               C47387) *
              C47073 * C47056)) /
            (p * q * std::sqrt(p + q));
    d2ee[214] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C47018 * C124 - C21369 * C117) * C116 +
             (C47018 * C138 - C21369 * C127) * C47279) *
                C42155 +
            ((C25950 - C25951) * C116 + (C25952 - C25953) * C47279) * C42156 +
            ((C25955 - C25954) * C116 + (C25957 - C25956) * C47279) * C42157) *
               C47091 * C47410 +
           (((C21485 - C21484) * C116 + (C21487 - C21486) * C47279) * C42155 +
            (C26442 * C116 + C26443 * C47279) * C42156 +
            (C26826 * C116 + C26827 * C47279) * C42157) *
               C47091 * C47398 +
           ((C21520 * C116 + C21521 * C47279) * C42155 +
            (C26830 * C116 + C26831 * C47279) * C42156 +
            (C22330 * C116 + C22331 * C47279) * C42157) *
               C47091 * C47371) *
              C258 +
          ((((C21369 * C118 - C47018 * C125) * C116 +
             (C21369 * C128 - C47018 * C139) * C47279) *
                C42155 +
            ((C25958 - C25959) * C116 + (C25960 - C25961) * C47279) * C42156 +
            ((C25963 - C25962) * C116 + (C25965 - C25964) * C47279) * C42157) *
               C47091 * C47410 +
           (((C21497 - C21496) * C116 + (C21499 - C21498) * C47279) * C42155 +
            (C26446 * C116 + C26447 * C47279) * C42156 +
            (C27876 * C116 + C27877 * C47279) * C42157) *
               C47091 * C47398 +
           ((C21522 * C116 + C21523 * C47279) * C42155 +
            (C27158 * C116 + C27159 * C47279) * C42156 +
            ((C23132 - C23133) * C116 + (C23134 - C23135) * C47279) * C42157) *
               C47091 * C47371) *
              C259 +
          ((((C47018 * C126 - C21369 * C119) * C116 +
             (C47018 * C140 - C21369 * C129) * C47279) *
                C42155 +
            ((C25966 - C25967) * C116 + (C25968 - C25969) * C47279) * C42156 +
            ((C25971 - C25970) * C116 + (C25973 - C25972) * C47279) * C42157) *
               C47091 * C47410 +
           (((C21509 - C21508) * C116 + (C21511 - C21510) * C47279) * C42155 +
            (C26450 * C116 + C26451 * C47279) * C42156 +
            ((C25974 - C25975) * C116 + (C25976 - C25977) * C47279) * C42157) *
               C47091 * C47398 +
           ((C21524 * C116 + C21525 * C47279) * C42155 +
            ((C22007 - C22006) * C116 + (C22009 - C22008) * C47279) * C42156 +
            ((C47018 * C1173 - C21369 * C1158) * C116 +
             (C47018 * C1185 - C21369 * C1176) * C47279) *
                C42157) *
               C47091 * C47371) *
              C47365)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C47018 * C124 - C21369 * C117) * C116 +
            (C47018 * C138 - C21369 * C127) * C47279) *
               C42155 +
           ((C25950 - C25951) * C116 + (C25952 - C25953) * C47279) * C42156 +
           ((C25955 - C25954) * C116 + (C25957 - C25956) * C47279) * C42157) *
              C47091 * C47073 * C108 +
          (((C21369 * C118 - C47018 * C125) * C116 +
            (C21369 * C128 - C47018 * C139) * C47279) *
               C42155 +
           ((C25958 - C25959) * C116 + (C25960 - C25961) * C47279) * C42156 +
           ((C25963 - C25962) * C116 + (C25965 - C25964) * C47279) * C42157) *
              C47091 * C47073 * C109 +
          (((C47018 * C126 - C21369 * C119) * C116 +
            (C47018 * C140 - C21369 * C129) * C47279) *
               C42155 +
           ((C25966 - C25967) * C116 + (C25968 - C25969) * C47279) * C42156 +
           ((C25971 - C25970) * C116 + (C25973 - C25972) * C47279) * C42157) *
              C47091 * C47073 * C110 +
          (((C21369 * C120 - C47018 * C130) * C116 +
            (C21369 * C131 - C47018 * C141) * C47279) *
               C42155 +
           ((C26242 - C26243) * C116 + (C26244 - C26245) * C47279) * C42156 +
           ((C21369 * C421 - C47018 * C438) * C116 +
            (C21369 * C439 - C47018 * C451) * C47279) *
               C42157) *
              C47091 * C47073 * C111 +
          (((C47018 * C132 - C21369 * C121) * C116 +
            (C47018 * C142 - C21369 * C133) * C47279) *
               C42155 +
           ((C47018 * C440 - C21369 * C422) * C116 +
            (C47018 * C452 - C21369 * C441) * C47279) *
               C42156 +
           ((C47018 * C442 - C21369 * C423) * C116 +
            (C47018 * C453 - C21369 * C443) * C47279) *
               C42157) *
              C47091 * C47073 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C47018 * C124 - C21369 * C117) * C116 +
             (C47018 * C138 - C21369 * C127) * C47279) *
                C42155 +
            ((C25950 - C25951) * C116 + (C25952 - C25953) * C47279) * C42156 +
            C42395 * C42157) *
               C47091 * C942 +
           (((C21485 - C21484) * C116 + (C21487 - C21486) * C47279) * C42155 +
            (C26442 * C116 + C26443 * C47279) * C42156 +
            (C26826 * C116 + C26827 * C47279) * C42157) *
               C47091 * C943 +
           ((C21520 * C116 + C21521 * C47279) * C42155 +
            (C26830 * C116 + C26831 * C47279) * C42156 +
            (C22330 * C116 + C22331 * C47279) * C42157) *
               C47091 * C47371) *
              C47407 +
          ((((C21369 * C118 - C47018 * C125) * C116 +
             (C21369 * C128 - C47018 * C139) * C47279) *
                C42155 +
            ((C25958 - C25959) * C116 + (C25960 - C25961) * C47279) * C42156 +
            C42396 * C42157) *
               C47091 * C942 +
           (((C21497 - C21496) * C116 + (C21499 - C21498) * C47279) * C42155 +
            (C26446 * C116 + C26447 * C47279) * C42156 +
            (C27876 * C116 + C27877 * C47279) * C42157) *
               C47091 * C943 +
           ((C21522 * C116 + C21523 * C47279) * C42155 +
            (C27158 * C116 + C27159 * C47279) * C42156 +
            ((C23132 - C23133) * C116 + (C23134 - C23135) * C47279) * C42157) *
               C47091 * C47371) *
              C47394 +
          ((((C47018 * C126 - C21369 * C119) * C116 +
             (C47018 * C140 - C21369 * C129) * C47279) *
                C42155 +
            ((C25966 - C25967) * C116 + (C25968 - C25969) * C47279) * C42156 +
            C42397 * C42157) *
               C47091 * C942 +
           (((C21509 - C21508) * C116 + (C21511 - C21510) * C47279) * C42155 +
            (C26450 * C116 + C26451 * C47279) * C42156 +
            ((C25974 - C25975) * C116 + (C25976 - C25977) * C47279) * C42157) *
               C47091 * C943 +
           ((C21524 * C116 + C21525 * C47279) * C42155 +
            ((C22007 - C22006) * C116 + (C22009 - C22008) * C47279) * C42156 +
            ((C47018 * C1173 - C21369 * C1158) * C116 +
             (C47018 * C1185 - C21369 * C1176) * C47279) *
                C42157) *
               C47091 * C47371) *
              C47365)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C47018 * C124 - C21369 * C117) * C116 +
            (C47018 * C138 - C21369 * C127) * C47279) *
               C42155 +
           ((C25950 - C25951) * C116 + (C25952 - C25953) * C47279) * C42156 +
           C42395 * C42157) *
              C47091 * C1010 +
          (((C21485 - C21484) * C116 + (C21487 - C21486) * C47279) * C42155 +
           (C26442 * C116 + C26443 * C47279) * C42156 +
           (C26826 * C116 + C26827 * C47279) * C42157) *
              C47091 * C1011 +
          ((C21520 * C116 + C21521 * C47279) * C42155 +
           (C26830 * C116 + C26831 * C47279) * C42156 +
           (C22330 * C116 + C22331 * C47279) * C42157) *
              C47091 * C1012 +
          ((C22186 * C116 + C22187 * C47279) * C42155 +
           (C27290 * C116 + C27291 * C47279) * C42156 +
           ((C22326 - C22327) * C116 + (C22328 - C22329) * C47279) * C42157) *
              C47091 * C1013 +
          ((C22196 * C116 + C22197 * C47279) * C42155 +
           ((C22693 - C22692) * C116 + (C22695 - C22694) * C47279) * C42156 +
           ((C47018 * C22308 - C21369 * C22307) * C116 +
            (C47018 * C22310 - C21369 * C22309) * C47279) *
               C42157) *
              C47091 * C1014) *
         C47045) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C47018 * C124 - C21369 * C117) * C116 +
             (C47018 * C138 - C21369 * C127) * C47279) *
                C42155 +
            ((C25950 - C25951) * C116 + (C25952 - C25953) * C47279) * C42156 +
            C42395 * C42157) *
               C1664 +
           (((C25951 - C25950) * C116 + (C25953 - C25952) * C47279) * C42155 +
            ((C25954 - C25955) * C116 + (C25956 - C25957) * C47279) * C42156 +
            ((C27671 - C27670) * C116 + (C27673 - C27672) * C47279) * C42157) *
               C1665 +
           (C42395 * C42155 +
            ((C27670 - C27671) * C116 + (C27672 - C27673) * C47279) * C42156 +
            ((C27675 - C27674) * C116 + (C27677 - C27676) * C47279) * C42157) *
               C47374) *
              C47073 * C47407 +
          ((((C21369 * C118 - C47018 * C125) * C116 +
             (C21369 * C128 - C47018 * C139) * C47279) *
                C42155 +
            ((C25958 - C25959) * C116 + (C25960 - C25961) * C47279) * C42156 +
            C42396 * C42157) *
               C1664 +
           (((C25959 - C25958) * C116 + (C25961 - C25960) * C47279) * C42155 +
            ((C25962 - C25963) * C116 + (C25964 - C25965) * C47279) * C42156 +
            ((C28015 - C28014) * C116 + (C28017 - C28016) * C47279) * C42157) *
               C1665 +
           (C42396 * C42155 +
            ((C28014 - C28015) * C116 + (C28016 - C28017) * C47279) * C42156 +
            ((C21369 * C1848 - C47018 * C1857) * C116 +
             (C21369 * C1860 - C47018 * C1866) * C47279) *
                C42157) *
               C47374) *
              C47073 * C47394 +
          ((((C47018 * C126 - C21369 * C119) * C116 +
             (C47018 * C140 - C21369 * C129) * C47279) *
                C42155 +
            ((C25966 - C25967) * C116 + (C25968 - C25969) * C47279) * C42156 +
            C42397 * C42157) *
               C1664 +
           (((C25967 - C25966) * C116 + (C25969 - C25968) * C47279) * C42155 +
            ((C25970 - C25971) * C116 + (C25972 - C25973) * C47279) * C42156 +
            ((C42385 - C42386) * C116 + (C42387 - C42388) * C47279) * C42157) *
               C1665 +
           (C42397 * C42155 +
            ((C42386 - C42385) * C116 + (C42388 - C42387) * C47279) * C42156 +
            ((C47018 * C1858 - C21369 * C1849) * C116 +
             (C47018 * C1867 - C21369 * C1861) * C47279) *
                C42157) *
               C47374) *
              C47073 * C47365)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C47018 * C124 - C21369 * C117) * C116 +
             (C47018 * C138 - C21369 * C127) * C47279) *
                C42155 +
            ((C25950 - C25951) * C116 + (C25952 - C25953) * C47279) * C42156 +
            C42395 * C42157) *
               C1664 +
           (((C25951 - C25950) * C116 + (C25953 - C25952) * C47279) * C42155 +
            ((C25954 - C25955) * C116 + (C25956 - C25957) * C47279) * C42156 +
            ((C27671 - C27670) * C116 + (C27673 - C27672) * C47279) * C42157) *
               C1665 +
           (C42395 * C42155 +
            ((C27670 - C27671) * C116 + (C27672 - C27673) * C47279) * C42156 +
            ((C27675 - C27674) * C116 + (C27677 - C27676) * C47279) * C42157) *
               C47374) *
              C47410 +
          ((((C21485 - C21484) * C116 + (C21487 - C21486) * C47279) * C42155 +
            (C26442 * C116 + C26443 * C47279) * C42156 + C43030 * C42157) *
               C1664 +
           ((C26440 * C116 + C26441 * C47279) * C42155 +
            (C26828 * C116 + C26829 * C47279) * C42156 +
            (C28148 * C116 + C28149 * C47279) * C42157) *
               C1665 +
           (C43030 * C42155 + (C28150 * C116 + C28151 * C47279) * C42156 +
            ((C27678 - C27679) * C116 + (C27680 - C27681) * C47279) * C42157) *
               C47374) *
              C47398 +
          (((C21520 * C116 + C21521 * C47279) * C42155 +
            (C26830 * C116 + C26831 * C47279) * C42156 + C43031 * C42157) *
               C1664 +
           ((C22312 * C116 + C22313 * C47279) * C42155 +
            (C26832 * C116 + C26833 * C47279) * C42156 +
            ((C23340 - C23341) * C116 + (C23342 - C23343) * C47279) * C42157) *
               C1665 +
           (C43031 * C42155 +
            ((C23341 - C23340) * C116 + (C23343 - C23342) * C47279) * C42156 +
            ((C47018 * C22978 - C21369 * C22977) * C116 +
             (C47018 * C22980 - C21369 * C22979) * C47279) *
                C42157) *
               C47374) *
              C47371) *
         C47045) /
            (p * q * std::sqrt(p + q));
    d2ee[215] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C47018 * C124 - C21369 * C117) * C116 +
              (C47018 * C138 - C21369 * C127) * C47279) *
                 C42155 +
             ((C25950 - C25951) * C116 + (C25952 - C25953) * C47279) * C42156 +
             C42395 * C42157) *
                C3094 +
            (((C25951 - C25950) * C116 + (C25953 - C25952) * C47279) * C42155 +
             ((C25954 - C25955) * C116 + (C25956 - C25957) * C47279) * C42156 +
             C43672 * C42157) *
                C47178) *
               C47339 +
           ((((C21485 - C21484) * C116 + (C21487 - C21486) * C47279) * C42155 +
             (C26442 * C116 + C26443 * C47279) * C42156 + C43030 * C42157) *
                C3094 +
            ((C26440 * C116 + C26441 * C47279) * C42155 +
             (C26828 * C116 + C26829 * C47279) * C42156 + C44030 * C42157) *
                C47178) *
               C47136) *
              C47050 +
          (((((C21369 * C118 - C47018 * C125) * C116 +
              (C21369 * C128 - C47018 * C139) * C47279) *
                 C42155 +
             ((C25958 - C25959) * C116 + (C25960 - C25961) * C47279) * C42156 +
             C42396 * C42157) *
                C3094 +
            (((C25959 - C25958) * C116 + (C25961 - C25960) * C47279) * C42155 +
             ((C25962 - C25963) * C116 + (C25964 - C25965) * C47279) * C42156 +
             C43929 * C42157) *
                C47178) *
               C47339 +
           ((((C21497 - C21496) * C116 + (C21499 - C21498) * C47279) * C42155 +
             (C26446 * C116 + C26447 * C47279) * C42156 + C43822 * C42157) *
                C3094 +
            ((C26444 * C116 + C26445 * C47279) * C42155 +
             (C27878 * C116 + C27879 * C47279) * C42156 +
             ((C27880 - C27881) * C116 + (C27882 - C27883) * C47279) * C42157) *
                C47178) *
               C47136) *
              C47059 +
          (((((C47018 * C126 - C21369 * C119) * C116 +
              (C47018 * C140 - C21369 * C129) * C47279) *
                 C42155 +
             ((C25966 - C25967) * C116 + (C25968 - C25969) * C47279) * C42156 +
             C42397 * C42157) *
                C3094 +
            (((C25967 - C25966) * C116 + (C25969 - C25968) * C47279) * C42155 +
             ((C25970 - C25971) * C116 + (C25972 - C25973) * C47279) * C42156 +
             ((C42385 - C42386) * C116 + (C42387 - C42388) * C47279) * C42157) *
                C47178) *
               C47339 +
           ((((C21509 - C21508) * C116 + (C21511 - C21510) * C47279) * C42155 +
             (C26450 * C116 + C26451 * C47279) * C42156 +
             ((C25974 - C25975) * C116 + (C25976 - C25977) * C47279) * C42157) *
                C3094 +
            ((C26448 * C116 + C26449 * C47279) * C42155 +
             ((C25975 - C25974) * C116 + (C25977 - C25976) * C47279) * C42156 +
             ((C47018 * C2227 - C21369 * C2224) * C116 +
              (C47018 * C2233 - C21369 * C2230) * C47279) *
                 C42157) *
                C47178) *
               C47136) *
              C2703)) /
        (p * q * std::sqrt(p + q));
    d2ee[216] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C47018 * C124 - C21369 * C117) * C116 +
              (C47018 * C138 - C21369 * C127) * C47279) *
                 C42155 +
             ((C25950 - C25951) * C116 + (C25952 - C25953) * C47279) * C42156 +
             C42395 * C42157) *
                C47174 +
            (((C25951 - C25950) * C116 + (C25953 - C25952) * C47279) * C42155 +
             ((C25954 - C25955) * C116 + (C25956 - C25957) * C47279) * C42156 +
             C43672 * C42157) *
                C47181 +
            (C42395 * C42155 +
             ((C27670 - C27671) * C116 + (C27672 - C27673) * C47279) * C42156 +
             C43673 * C42157) *
                C3602) *
               C47339 +
           ((((C21485 - C21484) * C116 + (C21487 - C21486) * C47279) * C42155 +
             (C26442 * C116 + C26443 * C47279) * C42156 + C43030 * C42157) *
                C47174 +
            ((C26440 * C116 + C26441 * C47279) * C42155 +
             (C26828 * C116 + C26829 * C47279) * C42156 + C44030 * C42157) *
                C47181 +
            (C43030 * C42155 + (C28150 * C116 + C28151 * C47279) * C42156 +
             ((C27678 - C27679) * C116 + (C27680 - C27681) * C47279) * C42157) *
                C3602) *
               C47136) *
              C2440 +
          (((((C21369 * C118 - C47018 * C125) * C116 +
              (C21369 * C128 - C47018 * C139) * C47279) *
                 C42155 +
             ((C25958 - C25959) * C116 + (C25960 - C25961) * C47279) * C42156 +
             C42396 * C42157) *
                C47174 +
            (((C25959 - C25958) * C116 + (C25961 - C25960) * C47279) * C42155 +
             ((C25962 - C25963) * C116 + (C25964 - C25965) * C47279) * C42156 +
             C43929 * C42157) *
                C47181 +
            (C42396 * C42155 +
             ((C28014 - C28015) * C116 + (C28016 - C28017) * C47279) * C42156 +
             ((C43923 - C43924) * C116 + (C43925 - C43926) * C47279) * C42157) *
                C3602) *
               C47339 +
           ((((C21497 - C21496) * C116 + (C21499 - C21498) * C47279) * C42155 +
             (C26446 * C116 + C26447 * C47279) * C42156 + C43822 * C42157) *
                C47174 +
            ((C26444 * C116 + C26445 * C47279) * C42155 +
             (C27878 * C116 + C27879 * C47279) * C42156 +
             ((C27880 - C27881) * C116 + (C27882 - C27883) * C47279) * C42157) *
                C47181 +
            (C43822 * C42155 +
             ((C27881 - C27880) * C116 + (C27883 - C27882) * C47279) * C42156 +
             ((C47018 * C6702 - C21369 * C6700) * C116 +
              (C47018 * C6706 - C21369 * C6704) * C47279) *
                 C42157) *
                C3602) *
               C47136) *
              C47056)) /
        (p * q * std::sqrt(p + q));
    d2ee[217] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C47018 * C124 - C21369 * C117) * C116 +
              (C47018 * C138 - C21369 * C127) * C47279) *
                 C42155 +
             ((C25950 - C25951) * C116 + (C25952 - C25953) * C47279) * C42156 +
             C42395 * C42157) *
                C3094 +
            (((C25951 - C25950) * C116 + (C25953 - C25952) * C47279) * C42155 +
             ((C25954 - C25955) * C116 + (C25956 - C25957) * C47279) * C42156 +
             C43672 * C42157) *
                C47178) *
               C47410 +
           ((((C21485 - C21484) * C116 + (C21487 - C21486) * C47279) * C42155 +
             (C26442 * C116 + C26443 * C47279) * C42156 + C43030 * C42157) *
                C3094 +
            ((C26440 * C116 + C26441 * C47279) * C42155 +
             (C26828 * C116 + C26829 * C47279) * C42156 + C44030 * C42157) *
                C47178) *
               C47398 +
           (((C21520 * C116 + C21521 * C47279) * C42155 +
             (C26830 * C116 + C26831 * C47279) * C42156 + C43031 * C42157) *
                C3094 +
            ((C22312 * C116 + C22313 * C47279) * C42155 +
             (C26832 * C116 + C26833 * C47279) * C42156 +
             ((C23340 - C23341) * C116 + (C23342 - C23343) * C47279) * C42157) *
                C47178) *
               C47371) *
              C2440 +
          (((((C21369 * C118 - C47018 * C125) * C116 +
              (C21369 * C128 - C47018 * C139) * C47279) *
                 C42155 +
             ((C25958 - C25959) * C116 + (C25960 - C25961) * C47279) * C42156 +
             C42396 * C42157) *
                C3094 +
            (((C25959 - C25958) * C116 + (C25961 - C25960) * C47279) * C42155 +
             ((C25962 - C25963) * C116 + (C25964 - C25965) * C47279) * C42156 +
             C43929 * C42157) *
                C47178) *
               C47410 +
           ((((C21497 - C21496) * C116 + (C21499 - C21498) * C47279) * C42155 +
             (C26446 * C116 + C26447 * C47279) * C42156 + C43822 * C42157) *
                C3094 +
            ((C26444 * C116 + C26445 * C47279) * C42155 +
             (C27878 * C116 + C27879 * C47279) * C42156 +
             ((C27880 - C27881) * C116 + (C27882 - C27883) * C47279) * C42157) *
                C47178) *
               C47398 +
           (((C21522 * C116 + C21523 * C47279) * C42155 +
             (C27158 * C116 + C27159 * C47279) * C42156 +
             ((C23132 - C23133) * C116 + (C23134 - C23135) * C47279) * C42157) *
                C3094 +
            ((C22582 * C116 + C22583 * C47279) * C42155 +
             ((C23133 - C23132) * C116 + (C23135 - C23134) * C47279) * C42156 +
             ((C47018 * C7172 - C21369 * C7170) * C116 +
              (C47018 * C7176 - C21369 * C7174) * C47279) *
                 C42157) *
                C47178) *
               C47371) *
              C47056)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C47018 * C124 - C21369 * C117) * C116 +
             (C47018 * C138 - C21369 * C127) * C47279) *
                C42155 +
            ((C25950 - C25951) * C116 + (C25952 - C25953) * C47279) * C42156 +
            C42395 * C42157) *
               C3094 +
           (((C25951 - C25950) * C116 + (C25953 - C25952) * C47279) * C42155 +
            ((C25954 - C25955) * C116 + (C25956 - C25957) * C47279) * C42156 +
            C43672 * C42157) *
               C47178) *
              C47073 * C47416 +
          ((((C21369 * C118 - C47018 * C125) * C116 +
             (C21369 * C128 - C47018 * C139) * C47279) *
                C42155 +
            ((C25958 - C25959) * C116 + (C25960 - C25961) * C47279) * C42156 +
            C42396 * C42157) *
               C3094 +
           (((C25959 - C25958) * C116 + (C25961 - C25960) * C47279) * C42155 +
            ((C25962 - C25963) * C116 + (C25964 - C25965) * C47279) * C42156 +
            C43929 * C42157) *
               C47178) *
              C47073 * C47409 +
          ((((C47018 * C126 - C21369 * C119) * C116 +
             (C47018 * C140 - C21369 * C129) * C47279) *
                C42155 +
            ((C25966 - C25967) * C116 + (C25968 - C25969) * C47279) * C42156 +
            C42397 * C42157) *
               C3094 +
           (((C25967 - C25966) * C116 + (C25969 - C25968) * C47279) * C42155 +
            ((C25970 - C25971) * C116 + (C25972 - C25973) * C47279) * C42156 +
            ((C42385 - C42386) * C116 + (C42387 - C42388) * C47279) * C42157) *
               C47178) *
              C47073 * C47396 +
          ((((C21369 * C120 - C47018 * C130) * C116 +
             (C21369 * C131 - C47018 * C141) * C47279) *
                C42155 +
            ((C26242 - C26243) * C116 + (C26244 - C26245) * C47279) * C42156 +
            ((C42594 - C42595) * C116 + (C42596 - C42597) * C47279) * C42157) *
               C3094 +
           (((C26243 - C26242) * C116 + (C26245 - C26244) * C47279) * C42155 +
            ((C42595 - C42594) * C116 + (C42597 - C42596) * C47279) * C42156 +
            ((C47018 * C2121 - C21369 * C2120) * C116 +
             (C47018 * C2123 - C21369 * C2122) * C47279) *
                C42157) *
               C47178) *
              C47073 * C47375)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C47018 * C124 - C21369 * C117) * C116 +
             (C47018 * C138 - C21369 * C127) * C47279) *
                C42155 +
            ((C25950 - C25951) * C116 + (C25952 - C25953) * C47279) * C42156 +
            C42395 * C42157) *
               C47418 +
           (((C25951 - C25950) * C116 + (C25953 - C25952) * C47279) * C42155 +
            ((C25954 - C25955) * C116 + (C25956 - C25957) * C47279) * C42156 +
            C43672 * C42157) *
               C47415 +
           (C42395 * C42155 +
            ((C27670 - C27671) * C116 + (C27672 - C27673) * C47279) * C42156 +
            C43673 * C42157) *
               C47406 +
           (C43672 * C42155 +
            ((C27674 - C27675) * C116 + (C27676 - C27677) * C47279) * C42156 +
            ((C43664 - C43665) * C116 + (C43666 - C43667) * C47279) * C42157) *
               C47387) *
              C47073 * C2440 +
          ((((C21369 * C118 - C47018 * C125) * C116 +
             (C21369 * C128 - C47018 * C139) * C47279) *
                C42155 +
            ((C25958 - C25959) * C116 + (C25960 - C25961) * C47279) * C42156 +
            C42396 * C42157) *
               C47418 +
           (((C25959 - C25958) * C116 + (C25961 - C25960) * C47279) * C42155 +
            ((C25962 - C25963) * C116 + (C25964 - C25965) * C47279) * C42156 +
            C43929 * C42157) *
               C47415 +
           (C42396 * C42155 +
            ((C28014 - C28015) * C116 + (C28016 - C28017) * C47279) * C42156 +
            ((C43923 - C43924) * C116 + (C43925 - C43926) * C47279) * C42157) *
               C47406 +
           (C43929 * C42155 +
            ((C43924 - C43923) * C116 + (C43926 - C43925) * C47279) * C42156 +
            ((C47018 * C12240 - C21369 * C12238) * C116 +
             (C47018 * C12244 - C21369 * C12242) * C47279) *
                C42157) *
               C47387) *
              C47073 * C47056)) /
            (p * q * std::sqrt(p + q));
    d2ee[218] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C47018 * C124 - C21369 * C117) * C116 +
             (C47018 * C138 - C21369 * C127) * C47279) *
                C42155 +
            ((C25950 - C25951) * C116 + (C25952 - C25953) * C47279) * C42156 +
            C42395 * C42157) *
               C47174 +
           (((C25951 - C25950) * C116 + (C25953 - C25952) * C47279) * C42155 +
            ((C25954 - C25955) * C116 + (C25956 - C25957) * C47279) * C42156 +
            C43672 * C42157) *
               C47181 +
           (C42395 * C42155 +
            ((C27670 - C27671) * C116 + (C27672 - C27673) * C47279) * C42156 +
            C43673 * C42157) *
               C3602) *
              C47073 * C47050 +
          ((((C21369 * C118 - C47018 * C125) * C116 +
             (C21369 * C128 - C47018 * C139) * C47279) *
                C42155 +
            ((C25958 - C25959) * C116 + (C25960 - C25961) * C47279) * C42156 +
            C42396 * C42157) *
               C47174 +
           (((C25959 - C25958) * C116 + (C25961 - C25960) * C47279) * C42155 +
            ((C25962 - C25963) * C116 + (C25964 - C25965) * C47279) * C42156 +
            C43929 * C42157) *
               C47181 +
           (C42396 * C42155 +
            ((C28014 - C28015) * C116 + (C28016 - C28017) * C47279) * C42156 +
            ((C43923 - C43924) * C116 + (C43925 - C43926) * C47279) * C42157) *
               C3602) *
              C47073 * C47059 +
          ((((C47018 * C126 - C21369 * C119) * C116 +
             (C47018 * C140 - C21369 * C129) * C47279) *
                C42155 +
            ((C25966 - C25967) * C116 + (C25968 - C25969) * C47279) * C42156 +
            C42397 * C42157) *
               C47174 +
           (((C25967 - C25966) * C116 + (C25969 - C25968) * C47279) * C42155 +
            ((C25970 - C25971) * C116 + (C25972 - C25973) * C47279) * C42156 +
            ((C42385 - C42386) * C116 + (C42387 - C42388) * C47279) * C42157) *
               C47181 +
           (C42397 * C42155 +
            ((C42386 - C42385) * C116 + (C42388 - C42387) * C47279) * C42156 +
            ((C47018 * C1858 - C21369 * C1849) * C116 +
             (C47018 * C1867 - C21369 * C1861) * C47279) *
                C42157) *
               C3602) *
              C47073 * C2703)) /
        (p * q * std::sqrt(p + q));
    d2ee[219] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C47018 * C124 - C21369 * C117) * C116 +
             (C47018 * C138 - C21369 * C127) * C47279) *
                C42155 +
            ((C25950 - C25951) * C116 + (C25952 - C25953) * C47279) * C42156 +
            C42395 * C42157) *
               C3094 +
           (((C25951 - C25950) * C116 + (C25953 - C25952) * C47279) * C42155 +
            ((C25954 - C25955) * C116 + (C25956 - C25957) * C47279) * C42156 +
            C43672 * C42157) *
               C47178) *
              C47073 * C47416 +
          ((((C21369 * C118 - C47018 * C125) * C116 +
             (C21369 * C128 - C47018 * C139) * C47279) *
                C42155 +
            ((C25958 - C25959) * C116 + (C25960 - C25961) * C47279) * C42156 +
            C42396 * C42157) *
               C3094 +
           (((C25959 - C25958) * C116 + (C25961 - C25960) * C47279) * C42155 +
            ((C25962 - C25963) * C116 + (C25964 - C25965) * C47279) * C42156 +
            C43929 * C42157) *
               C47178) *
              C47073 * C47409 +
          ((((C47018 * C126 - C21369 * C119) * C116 +
             (C47018 * C140 - C21369 * C129) * C47279) *
                C42155 +
            ((C25966 - C25967) * C116 + (C25968 - C25969) * C47279) * C42156 +
            C42397 * C42157) *
               C3094 +
           (((C25967 - C25966) * C116 + (C25969 - C25968) * C47279) * C42155 +
            ((C25970 - C25971) * C116 + (C25972 - C25973) * C47279) * C42156 +
            ((C42385 - C42386) * C116 + (C42387 - C42388) * C47279) * C42157) *
               C47178) *
              C47073 * C47396 +
          ((((C21369 * C120 - C47018 * C130) * C116 +
             (C21369 * C131 - C47018 * C141) * C47279) *
                C42155 +
            ((C26242 - C26243) * C116 + (C26244 - C26245) * C47279) * C42156 +
            ((C42594 - C42595) * C116 + (C42596 - C42597) * C47279) * C42157) *
               C3094 +
           (((C26243 - C26242) * C116 + (C26245 - C26244) * C47279) * C42155 +
            ((C42595 - C42594) * C116 + (C42597 - C42596) * C47279) * C42156 +
            ((C47018 * C2121 - C21369 * C2120) * C116 +
             (C47018 * C2123 - C21369 * C2122) * C47279) *
                C42157) *
               C47178) *
              C47073 * C47375)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C47018 * C124 - C21369 * C117) * C116 +
              (C47018 * C138 - C21369 * C127) * C47279) *
                 C42155 +
             ((C25950 - C25951) * C116 + (C25952 - C25953) * C47279) * C42156 +
             C42395 * C42157) *
                C3094 +
            (((C25951 - C25950) * C116 + (C25953 - C25952) * C47279) * C42155 +
             ((C25954 - C25955) * C116 + (C25956 - C25957) * C47279) * C42156 +
             C43672 * C42157) *
                C47178) *
               C47410 +
           ((((C21485 - C21484) * C116 + (C21487 - C21486) * C47279) * C42155 +
             (C26442 * C116 + C26443 * C47279) * C42156 + C43030 * C42157) *
                C3094 +
            ((C26440 * C116 + C26441 * C47279) * C42155 +
             (C26828 * C116 + C26829 * C47279) * C42156 + C44030 * C42157) *
                C47178) *
               C47398 +
           (((C21520 * C116 + C21521 * C47279) * C42155 +
             (C26830 * C116 + C26831 * C47279) * C42156 + C43031 * C42157) *
                C3094 +
            ((C22312 * C116 + C22313 * C47279) * C42155 +
             (C26832 * C116 + C26833 * C47279) * C42156 +
             ((C23340 - C23341) * C116 + (C23342 - C23343) * C47279) * C42157) *
                C47178) *
               C47371) *
              C2440 +
          (((((C21369 * C118 - C47018 * C125) * C116 +
              (C21369 * C128 - C47018 * C139) * C47279) *
                 C42155 +
             ((C25958 - C25959) * C116 + (C25960 - C25961) * C47279) * C42156 +
             C42396 * C42157) *
                C3094 +
            (((C25959 - C25958) * C116 + (C25961 - C25960) * C47279) * C42155 +
             ((C25962 - C25963) * C116 + (C25964 - C25965) * C47279) * C42156 +
             C43929 * C42157) *
                C47178) *
               C47410 +
           ((((C21497 - C21496) * C116 + (C21499 - C21498) * C47279) * C42155 +
             (C26446 * C116 + C26447 * C47279) * C42156 + C43822 * C42157) *
                C3094 +
            ((C26444 * C116 + C26445 * C47279) * C42155 +
             (C27878 * C116 + C27879 * C47279) * C42156 +
             ((C27880 - C27881) * C116 + (C27882 - C27883) * C47279) * C42157) *
                C47178) *
               C47398 +
           (((C21522 * C116 + C21523 * C47279) * C42155 +
             (C27158 * C116 + C27159 * C47279) * C42156 +
             ((C23132 - C23133) * C116 + (C23134 - C23135) * C47279) * C42157) *
                C3094 +
            ((C22582 * C116 + C22583 * C47279) * C42155 +
             ((C23133 - C23132) * C116 + (C23135 - C23134) * C47279) * C42156 +
             ((C47018 * C7172 - C21369 * C7170) * C116 +
              (C47018 * C7176 - C21369 * C7174) * C47279) *
                 C42157) *
                C47178) *
               C47371) *
              C47056)) /
            (p * q * std::sqrt(p + q));
    d2ee[220] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C47018 * C124 - C21369 * C117) * C116 +
             (C47018 * C138 - C21369 * C127) * C47279) *
                C42155 +
            ((C25950 - C25951) * C116 + (C25952 - C25953) * C47279) * C42156 +
            C42395 * C42157) *
               C47091 * C47339 +
           (((C21485 - C21484) * C116 + (C21487 - C21486) * C47279) * C42155 +
            (C26442 * C116 + C26443 * C47279) * C42156 +
            (C26826 * C116 + C26827 * C47279) * C42157) *
               C47091 * C47136) *
              C554 +
          ((((C21369 * C118 - C47018 * C125) * C116 +
             (C21369 * C128 - C47018 * C139) * C47279) *
                C42155 +
            ((C25958 - C25959) * C116 + (C25960 - C25961) * C47279) * C42156 +
            C42396 * C42157) *
               C47091 * C47339 +
           (((C21497 - C21496) * C116 + (C21499 - C21498) * C47279) * C42155 +
            (C26446 * C116 + C26447 * C47279) * C42156 +
            (C27876 * C116 + C27877 * C47279) * C42157) *
               C47091 * C47136) *
              C555 +
          ((((C47018 * C126 - C21369 * C119) * C116 +
             (C47018 * C140 - C21369 * C129) * C47279) *
                C42155 +
            ((C25966 - C25967) * C116 + (C25968 - C25969) * C47279) * C42156 +
            C42397 * C42157) *
               C47091 * C47339 +
           (((C21509 - C21508) * C116 + (C21511 - C21510) * C47279) * C42155 +
            (C26450 * C116 + C26451 * C47279) * C42156 +
            ((C25974 - C25975) * C116 + (C25976 - C25977) * C47279) * C42157) *
               C47091 * C47136) *
              C556 +
          ((((C21369 * C120 - C47018 * C130) * C116 +
             (C21369 * C131 - C47018 * C141) * C47279) *
                C42155 +
            ((C26242 - C26243) * C116 + (C26244 - C26245) * C47279) * C42156 +
            ((C21369 * C421 - C47018 * C438) * C116 +
             (C21369 * C439 - C47018 * C451) * C47279) *
                C42157) *
               C47091 * C47339 +
           (((C21735 - C21734) * C116 + (C21737 - C21736) * C47279) * C42155 +
            ((C26109 - C26108) * C116 + (C26111 - C26110) * C47279) * C42156 +
            ((C47018 * C2015 - C21369 * C2014) * C116 +
             (C47018 * C2017 - C21369 * C2016) * C47279) *
                C42157) *
               C47091 * C47136) *
              C47375)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C47018 * C124 - C21369 * C117) * C116 +
             (C47018 * C138 - C21369 * C127) * C47279) *
                C42155 +
            ((C25950 - C25951) * C116 + (C25952 - C25953) * C47279) * C42156 +
            C42395 * C42157) *
               C47091 * C1284 +
           (((C21485 - C21484) * C116 + (C21487 - C21486) * C47279) * C42155 +
            (C26442 * C116 + C26443 * C47279) * C42156 + C43030 * C42157) *
               C47091 * C1285 +
           ((C21520 * C116 + C21521 * C47279) * C42155 +
            (C26830 * C116 + C26831 * C47279) * C42156 + C43031 * C42157) *
               C47091 * C1286 +
           ((C22186 * C116 + C22187 * C47279) * C42155 +
            (C27290 * C116 + C27291 * C47279) * C42156 +
            ((C22326 - C22327) * C116 + (C22328 - C22329) * C47279) * C42157) *
               C47091 * C47381) *
              C47325 +
          ((((C21369 * C118 - C47018 * C125) * C116 +
             (C21369 * C128 - C47018 * C139) * C47279) *
                C42155 +
            ((C25958 - C25959) * C116 + (C25960 - C25961) * C47279) * C42156 +
            C42396 * C42157) *
               C47091 * C1284 +
           (((C21497 - C21496) * C116 + (C21499 - C21498) * C47279) * C42155 +
            (C26446 * C116 + C26447 * C47279) * C42156 +
            (C27876 * C116 + C27877 * C47279) * C42157) *
               C47091 * C1285 +
           ((C21522 * C116 + C21523 * C47279) * C42155 +
            (C27158 * C116 + C27159 * C47279) * C42156 +
            ((C23132 - C23133) * C116 + (C23134 - C23135) * C47279) * C42157) *
               C47091 * C1286 +
           ((C22430 * C116 + C22431 * C47279) * C42155 +
            ((C22585 - C22584) * C116 + (C22587 - C22586) * C47279) * C42156 +
            ((C47018 * C5810 - C21369 * C5808) * C116 +
             (C47018 * C5814 - C21369 * C5812) * C47279) *
                C42157) *
               C47091 * C47381) *
              C47056)) /
            (p * q * std::sqrt(p + q));
    d2ee[221] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C47018 * C124 - C21369 * C117) * C116 +
              (C47018 * C138 - C21369 * C127) * C47279) *
                 C42155 +
             ((C25950 - C25951) * C116 + (C25952 - C25953) * C47279) * C42156 +
             C42395 * C42157) *
                C47340 +
            (((C25951 - C25950) * C116 + (C25953 - C25952) * C47279) * C42155 +
             ((C25954 - C25955) * C116 + (C25956 - C25957) * C47279) * C42156 +
             ((C27671 - C27670) * C116 + (C27673 - C27672) * C47279) * C42157) *
                C47178) *
               C47339 +
           ((((C21485 - C21484) * C116 + (C21487 - C21486) * C47279) * C42155 +
             (C26442 * C116 + C26443 * C47279) * C42156 +
             (C26826 * C116 + C26827 * C47279) * C42157) *
                C47340 +
            ((C26440 * C116 + C26441 * C47279) * C42155 +
             (C26828 * C116 + C26829 * C47279) * C42156 +
             (C28148 * C116 + C28149 * C47279) * C42157) *
                C47178) *
               C47136) *
              C258 +
          (((((C21369 * C118 - C47018 * C125) * C116 +
              (C21369 * C128 - C47018 * C139) * C47279) *
                 C42155 +
             ((C25958 - C25959) * C116 + (C25960 - C25961) * C47279) * C42156 +
             C42396 * C42157) *
                C47340 +
            (((C25959 - C25958) * C116 + (C25961 - C25960) * C47279) * C42155 +
             ((C25962 - C25963) * C116 + (C25964 - C25965) * C47279) * C42156 +
             ((C28015 - C28014) * C116 + (C28017 - C28016) * C47279) * C42157) *
                C47178) *
               C47339 +
           ((((C21497 - C21496) * C116 + (C21499 - C21498) * C47279) * C42155 +
             (C26446 * C116 + C26447 * C47279) * C42156 +
             (C27876 * C116 + C27877 * C47279) * C42157) *
                C47340 +
            ((C26444 * C116 + C26445 * C47279) * C42155 +
             (C27878 * C116 + C27879 * C47279) * C42156 +
             ((C27880 - C27881) * C116 + (C27882 - C27883) * C47279) * C42157) *
                C47178) *
               C47136) *
              C259 +
          (((((C47018 * C126 - C21369 * C119) * C116 +
              (C47018 * C140 - C21369 * C129) * C47279) *
                 C42155 +
             ((C25966 - C25967) * C116 + (C25968 - C25969) * C47279) * C42156 +
             C42397 * C42157) *
                C47340 +
            (((C25967 - C25966) * C116 + (C25969 - C25968) * C47279) * C42155 +
             ((C25970 - C25971) * C116 + (C25972 - C25973) * C47279) * C42156 +
             ((C42385 - C42386) * C116 + (C42387 - C42388) * C47279) * C42157) *
                C47178) *
               C47339 +
           ((((C21509 - C21508) * C116 + (C21511 - C21510) * C47279) * C42155 +
             (C26450 * C116 + C26451 * C47279) * C42156 +
             ((C25974 - C25975) * C116 + (C25976 - C25977) * C47279) * C42157) *
                C47340 +
            ((C26448 * C116 + C26449 * C47279) * C42155 +
             ((C25975 - C25974) * C116 + (C25977 - C25976) * C47279) * C42156 +
             ((C47018 * C2227 - C21369 * C2224) * C116 +
              (C47018 * C2233 - C21369 * C2230) * C47279) *
                 C42157) *
                C47178) *
               C47136) *
              C47365)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C47018 * C124 - C21369 * C117) * C116 +
             (C47018 * C138 - C21369 * C127) * C47279) *
                C42155 +
            ((C25950 - C25951) * C116 + (C25952 - C25953) * C47279) * C42156 +
            C42395 * C42157) *
               C47340 +
           (((C25951 - C25950) * C116 + (C25953 - C25952) * C47279) * C42155 +
            ((C25954 - C25955) * C116 + (C25956 - C25957) * C47279) * C42156 +
            ((C27671 - C27670) * C116 + (C27673 - C27672) * C47279) * C42157) *
               C47178) *
              C1284 +
          ((((C21485 - C21484) * C116 + (C21487 - C21486) * C47279) * C42155 +
            (C26442 * C116 + C26443 * C47279) * C42156 + C43030 * C42157) *
               C47340 +
           ((C26440 * C116 + C26441 * C47279) * C42155 +
            (C26828 * C116 + C26829 * C47279) * C42156 +
            (C28148 * C116 + C28149 * C47279) * C42157) *
               C47178) *
              C1285 +
          (((C21520 * C116 + C21521 * C47279) * C42155 +
            (C26830 * C116 + C26831 * C47279) * C42156 + C43031 * C42157) *
               C47340 +
           ((C22312 * C116 + C22313 * C47279) * C42155 +
            (C26832 * C116 + C26833 * C47279) * C42156 +
            ((C23340 - C23341) * C116 + (C23342 - C23343) * C47279) * C42157) *
               C47178) *
              C1286 +
          (((C22186 * C116 + C22187 * C47279) * C42155 +
            (C27290 * C116 + C27291 * C47279) * C42156 +
            ((C22326 - C22327) * C116 + (C22328 - C22329) * C47279) * C42157) *
               C47340 +
           ((C22690 * C116 + C22691 * C47279) * C42155 +
            ((C22327 - C22326) * C116 + (C22329 - C22328) * C47279) * C42156 +
            ((C47018 * C23332 - C21369 * C23331) * C116 +
             (C47018 * C23334 - C21369 * C23333) * C47279) *
                C42157) *
               C47178) *
              C47381) *
         C47045) /
            (p * q * std::sqrt(p + q));
    d2ee[222] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C47018 * C124 - C21369 * C117) * C116 +
             (C47018 * C138 - C21369 * C127) * C47279) *
                C42155 +
            ((C25950 - C25951) * C116 + (C25952 - C25953) * C47279) * C42156 +
            ((C25955 - C25954) * C116 + (C25957 - C25956) * C47279) * C42157) *
               C47091 * C47410 +
           (((C21485 - C21484) * C116 + (C21487 - C21486) * C47279) * C42155 +
            (C26442 * C116 + C26443 * C47279) * C42156 +
            (C26826 * C116 + C26827 * C47279) * C42157) *
               C47091 * C47398 +
           ((C21520 * C116 + C21521 * C47279) * C42155 +
            (C26830 * C116 + C26831 * C47279) * C42156 +
            (C22330 * C116 + C22331 * C47279) * C42157) *
               C47091 * C47371) *
              C258 +
          ((((C21369 * C118 - C47018 * C125) * C116 +
             (C21369 * C128 - C47018 * C139) * C47279) *
                C42155 +
            ((C25958 - C25959) * C116 + (C25960 - C25961) * C47279) * C42156 +
            ((C25963 - C25962) * C116 + (C25965 - C25964) * C47279) * C42157) *
               C47091 * C47410 +
           (((C21497 - C21496) * C116 + (C21499 - C21498) * C47279) * C42155 +
            (C26446 * C116 + C26447 * C47279) * C42156 +
            (C27876 * C116 + C27877 * C47279) * C42157) *
               C47091 * C47398 +
           ((C21522 * C116 + C21523 * C47279) * C42155 +
            (C27158 * C116 + C27159 * C47279) * C42156 +
            ((C23132 - C23133) * C116 + (C23134 - C23135) * C47279) * C42157) *
               C47091 * C47371) *
              C259 +
          ((((C47018 * C126 - C21369 * C119) * C116 +
             (C47018 * C140 - C21369 * C129) * C47279) *
                C42155 +
            ((C25966 - C25967) * C116 + (C25968 - C25969) * C47279) * C42156 +
            ((C25971 - C25970) * C116 + (C25973 - C25972) * C47279) * C42157) *
               C47091 * C47410 +
           (((C21509 - C21508) * C116 + (C21511 - C21510) * C47279) * C42155 +
            (C26450 * C116 + C26451 * C47279) * C42156 +
            ((C25974 - C25975) * C116 + (C25976 - C25977) * C47279) * C42157) *
               C47091 * C47398 +
           ((C21524 * C116 + C21525 * C47279) * C42155 +
            ((C22007 - C22006) * C116 + (C22009 - C22008) * C47279) * C42156 +
            ((C47018 * C1173 - C21369 * C1158) * C116 +
             (C47018 * C1185 - C21369 * C1176) * C47279) *
                C42157) *
               C47091 * C47371) *
              C47365)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C47018 * C124 - C21369 * C117) * C116 +
            (C47018 * C138 - C21369 * C127) * C47279) *
               C42155 +
           ((C25950 - C25951) * C116 + (C25952 - C25953) * C47279) * C42156 +
           ((C25955 - C25954) * C116 + (C25957 - C25956) * C47279) * C42157) *
              C47091 * C47073 * C108 +
          (((C21369 * C118 - C47018 * C125) * C116 +
            (C21369 * C128 - C47018 * C139) * C47279) *
               C42155 +
           ((C25958 - C25959) * C116 + (C25960 - C25961) * C47279) * C42156 +
           ((C25963 - C25962) * C116 + (C25965 - C25964) * C47279) * C42157) *
              C47091 * C47073 * C109 +
          (((C47018 * C126 - C21369 * C119) * C116 +
            (C47018 * C140 - C21369 * C129) * C47279) *
               C42155 +
           ((C25966 - C25967) * C116 + (C25968 - C25969) * C47279) * C42156 +
           ((C25971 - C25970) * C116 + (C25973 - C25972) * C47279) * C42157) *
              C47091 * C47073 * C110 +
          (((C21369 * C120 - C47018 * C130) * C116 +
            (C21369 * C131 - C47018 * C141) * C47279) *
               C42155 +
           ((C26242 - C26243) * C116 + (C26244 - C26245) * C47279) * C42156 +
           ((C21369 * C421 - C47018 * C438) * C116 +
            (C21369 * C439 - C47018 * C451) * C47279) *
               C42157) *
              C47091 * C47073 * C111 +
          (((C47018 * C132 - C21369 * C121) * C116 +
            (C47018 * C142 - C21369 * C133) * C47279) *
               C42155 +
           ((C47018 * C440 - C21369 * C422) * C116 +
            (C47018 * C452 - C21369 * C441) * C47279) *
               C42156 +
           ((C47018 * C442 - C21369 * C423) * C116 +
            (C47018 * C453 - C21369 * C443) * C47279) *
               C42157) *
              C47091 * C47073 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C47018 * C124 - C21369 * C117) * C116 +
             (C47018 * C138 - C21369 * C127) * C47279) *
                C42155 +
            ((C25950 - C25951) * C116 + (C25952 - C25953) * C47279) * C42156 +
            C42395 * C42157) *
               C47411 +
           (((C25951 - C25950) * C116 + (C25953 - C25952) * C47279) * C42155 +
            ((C25954 - C25955) * C116 + (C25956 - C25957) * C47279) * C42156 +
            ((C27671 - C27670) * C116 + (C27673 - C27672) * C47279) * C42157) *
               C47400 +
           (C42395 * C42155 +
            ((C27670 - C27671) * C116 + (C27672 - C27673) * C47279) * C42156 +
            ((C27675 - C27674) * C116 + (C27677 - C27676) * C47279) * C42157) *
               C47374) *
              C47073 * C258 +
          ((((C21369 * C118 - C47018 * C125) * C116 +
             (C21369 * C128 - C47018 * C139) * C47279) *
                C42155 +
            ((C25958 - C25959) * C116 + (C25960 - C25961) * C47279) * C42156 +
            C42396 * C42157) *
               C47411 +
           (((C25959 - C25958) * C116 + (C25961 - C25960) * C47279) * C42155 +
            ((C25962 - C25963) * C116 + (C25964 - C25965) * C47279) * C42156 +
            ((C28015 - C28014) * C116 + (C28017 - C28016) * C47279) * C42157) *
               C47400 +
           (C42396 * C42155 +
            ((C28014 - C28015) * C116 + (C28016 - C28017) * C47279) * C42156 +
            ((C21369 * C1848 - C47018 * C1857) * C116 +
             (C21369 * C1860 - C47018 * C1866) * C47279) *
                C42157) *
               C47374) *
              C47073 * C259 +
          ((((C47018 * C126 - C21369 * C119) * C116 +
             (C47018 * C140 - C21369 * C129) * C47279) *
                C42155 +
            ((C25966 - C25967) * C116 + (C25968 - C25969) * C47279) * C42156 +
            C42397 * C42157) *
               C47411 +
           (((C25967 - C25966) * C116 + (C25969 - C25968) * C47279) * C42155 +
            ((C25970 - C25971) * C116 + (C25972 - C25973) * C47279) * C42156 +
            ((C42385 - C42386) * C116 + (C42387 - C42388) * C47279) * C42157) *
               C47400 +
           (C42397 * C42155 +
            ((C42386 - C42385) * C116 + (C42388 - C42387) * C47279) * C42156 +
            ((C47018 * C1858 - C21369 * C1849) * C116 +
             (C47018 * C1867 - C21369 * C1861) * C47279) *
                C42157) *
               C47374) *
              C47073 * C47365)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C47018 * C124 - C21369 * C117) * C116 +
             (C47018 * C138 - C21369 * C127) * C47279) *
                C42155 +
            ((C25950 - C25951) * C116 + (C25952 - C25953) * C47279) * C42156 +
            C42395 * C42157) *
               C47091 * C942 +
           (((C21485 - C21484) * C116 + (C21487 - C21486) * C47279) * C42155 +
            (C26442 * C116 + C26443 * C47279) * C42156 +
            (C26826 * C116 + C26827 * C47279) * C42157) *
               C47091 * C943 +
           ((C21520 * C116 + C21521 * C47279) * C42155 +
            (C26830 * C116 + C26831 * C47279) * C42156 +
            (C22330 * C116 + C22331 * C47279) * C42157) *
               C47091 * C47371) *
              C47407 +
          ((((C21369 * C118 - C47018 * C125) * C116 +
             (C21369 * C128 - C47018 * C139) * C47279) *
                C42155 +
            ((C25958 - C25959) * C116 + (C25960 - C25961) * C47279) * C42156 +
            C42396 * C42157) *
               C47091 * C942 +
           (((C21497 - C21496) * C116 + (C21499 - C21498) * C47279) * C42155 +
            (C26446 * C116 + C26447 * C47279) * C42156 +
            (C27876 * C116 + C27877 * C47279) * C42157) *
               C47091 * C943 +
           ((C21522 * C116 + C21523 * C47279) * C42155 +
            (C27158 * C116 + C27159 * C47279) * C42156 +
            ((C23132 - C23133) * C116 + (C23134 - C23135) * C47279) * C42157) *
               C47091 * C47371) *
              C47394 +
          ((((C47018 * C126 - C21369 * C119) * C116 +
             (C47018 * C140 - C21369 * C129) * C47279) *
                C42155 +
            ((C25966 - C25967) * C116 + (C25968 - C25969) * C47279) * C42156 +
            C42397 * C42157) *
               C47091 * C942 +
           (((C21509 - C21508) * C116 + (C21511 - C21510) * C47279) * C42155 +
            (C26450 * C116 + C26451 * C47279) * C42156 +
            ((C25974 - C25975) * C116 + (C25976 - C25977) * C47279) * C42157) *
               C47091 * C943 +
           ((C21524 * C116 + C21525 * C47279) * C42155 +
            ((C22007 - C22006) * C116 + (C22009 - C22008) * C47279) * C42156 +
            ((C47018 * C1173 - C21369 * C1158) * C116 +
             (C47018 * C1185 - C21369 * C1176) * C47279) *
                C42157) *
               C47091 * C47371) *
              C47365)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C47018 * C124 - C21369 * C117) * C116 +
            (C47018 * C138 - C21369 * C127) * C47279) *
               C42155 +
           ((C25950 - C25951) * C116 + (C25952 - C25953) * C47279) * C42156 +
           C42395 * C42157) *
              C47091 * C1010 +
          (((C21485 - C21484) * C116 + (C21487 - C21486) * C47279) * C42155 +
           (C26442 * C116 + C26443 * C47279) * C42156 +
           (C26826 * C116 + C26827 * C47279) * C42157) *
              C47091 * C1011 +
          ((C21520 * C116 + C21521 * C47279) * C42155 +
           (C26830 * C116 + C26831 * C47279) * C42156 +
           (C22330 * C116 + C22331 * C47279) * C42157) *
              C47091 * C1012 +
          ((C22186 * C116 + C22187 * C47279) * C42155 +
           (C27290 * C116 + C27291 * C47279) * C42156 +
           ((C22326 - C22327) * C116 + (C22328 - C22329) * C47279) * C42157) *
              C47091 * C1013 +
          ((C22196 * C116 + C22197 * C47279) * C42155 +
           ((C22693 - C22692) * C116 + (C22695 - C22694) * C47279) * C42156 +
           ((C47018 * C22308 - C21369 * C22307) * C116 +
            (C47018 * C22310 - C21369 * C22309) * C47279) *
               C42157) *
              C47091 * C1014) *
         C47045) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C47018 * C124 - C21369 * C117) * C116 +
             (C47018 * C138 - C21369 * C127) * C47279) *
                C42155 +
            ((C25950 - C25951) * C116 + (C25952 - C25953) * C47279) * C42156 +
            C42395 * C42157) *
               C47411 +
           (((C25951 - C25950) * C116 + (C25953 - C25952) * C47279) * C42155 +
            ((C25954 - C25955) * C116 + (C25956 - C25957) * C47279) * C42156 +
            ((C27671 - C27670) * C116 + (C27673 - C27672) * C47279) * C42157) *
               C47400 +
           (C42395 * C42155 +
            ((C27670 - C27671) * C116 + (C27672 - C27673) * C47279) * C42156 +
            ((C27675 - C27674) * C116 + (C27677 - C27676) * C47279) * C42157) *
               C47374) *
              C942 +
          ((((C21485 - C21484) * C116 + (C21487 - C21486) * C47279) * C42155 +
            (C26442 * C116 + C26443 * C47279) * C42156 + C43030 * C42157) *
               C47411 +
           ((C26440 * C116 + C26441 * C47279) * C42155 +
            (C26828 * C116 + C26829 * C47279) * C42156 +
            (C28148 * C116 + C28149 * C47279) * C42157) *
               C47400 +
           (C43030 * C42155 + (C28150 * C116 + C28151 * C47279) * C42156 +
            ((C27678 - C27679) * C116 + (C27680 - C27681) * C47279) * C42157) *
               C47374) *
              C943 +
          (((C21520 * C116 + C21521 * C47279) * C42155 +
            (C26830 * C116 + C26831 * C47279) * C42156 + C43031 * C42157) *
               C47411 +
           ((C22312 * C116 + C22313 * C47279) * C42155 +
            (C26832 * C116 + C26833 * C47279) * C42156 +
            ((C23340 - C23341) * C116 + (C23342 - C23343) * C47279) * C42157) *
               C47400 +
           (C43031 * C42155 +
            ((C23341 - C23340) * C116 + (C23343 - C23342) * C47279) * C42156 +
            ((C47018 * C22978 - C21369 * C22977) * C116 +
             (C47018 * C22980 - C21369 * C22979) * C47279) *
                C42157) *
               C47374) *
              C47371) *
         C47045) /
            (p * q * std::sqrt(p + q));
    d2ee[223] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C47018 * C124 - C21369 * C117) * C116 +
             (C47018 * C138 - C21369 * C127) * C47279) *
                C42155 +
            ((C25950 - C25951) * C116 + (C25952 - C25953) * C47279) * C42156 +
            C42395 * C42157) *
               C47340 +
           (((C25951 - C25950) * C116 + (C25953 - C25952) * C47279) * C42155 +
            ((C25954 - C25955) * C116 + (C25956 - C25957) * C47279) * C42156 +
            ((C27671 - C27670) * C116 + (C27673 - C27672) * C47279) * C42157) *
               C47178) *
              C47073 * C554 +
          ((((C21369 * C118 - C47018 * C125) * C116 +
             (C21369 * C128 - C47018 * C139) * C47279) *
                C42155 +
            ((C25958 - C25959) * C116 + (C25960 - C25961) * C47279) * C42156 +
            C42396 * C42157) *
               C47340 +
           (((C25959 - C25958) * C116 + (C25961 - C25960) * C47279) * C42155 +
            ((C25962 - C25963) * C116 + (C25964 - C25965) * C47279) * C42156 +
            ((C28015 - C28014) * C116 + (C28017 - C28016) * C47279) * C42157) *
               C47178) *
              C47073 * C555 +
          ((((C47018 * C126 - C21369 * C119) * C116 +
             (C47018 * C140 - C21369 * C129) * C47279) *
                C42155 +
            ((C25966 - C25967) * C116 + (C25968 - C25969) * C47279) * C42156 +
            C42397 * C42157) *
               C47340 +
           (((C25967 - C25966) * C116 + (C25969 - C25968) * C47279) * C42155 +
            ((C25970 - C25971) * C116 + (C25972 - C25973) * C47279) * C42156 +
            ((C42385 - C42386) * C116 + (C42387 - C42388) * C47279) * C42157) *
               C47178) *
              C47073 * C556 +
          ((((C21369 * C120 - C47018 * C130) * C116 +
             (C21369 * C131 - C47018 * C141) * C47279) *
                C42155 +
            ((C26242 - C26243) * C116 + (C26244 - C26245) * C47279) * C42156 +
            ((C42594 - C42595) * C116 + (C42596 - C42597) * C47279) * C42157) *
               C47340 +
           (((C26243 - C26242) * C116 + (C26245 - C26244) * C47279) * C42155 +
            ((C42595 - C42594) * C116 + (C42597 - C42596) * C47279) * C42156 +
            ((C47018 * C2121 - C21369 * C2120) * C116 +
             (C47018 * C2123 - C21369 * C2122) * C47279) *
                C42157) *
               C47178) *
              C47073 * C47375)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C47018 * C124 - C21369 * C117) * C116 +
              (C47018 * C138 - C21369 * C127) * C47279) *
                 C42155 +
             ((C25950 - C25951) * C116 + (C25952 - C25953) * C47279) * C42156 +
             C42395 * C42157) *
                C47340 +
            (((C25951 - C25950) * C116 + (C25953 - C25952) * C47279) * C42155 +
             ((C25954 - C25955) * C116 + (C25956 - C25957) * C47279) * C42156 +
             ((C27671 - C27670) * C116 + (C27673 - C27672) * C47279) * C42157) *
                C47178) *
               C942 +
           ((((C21485 - C21484) * C116 + (C21487 - C21486) * C47279) * C42155 +
             (C26442 * C116 + C26443 * C47279) * C42156 + C43030 * C42157) *
                C47340 +
            ((C26440 * C116 + C26441 * C47279) * C42155 +
             (C26828 * C116 + C26829 * C47279) * C42156 +
             (C28148 * C116 + C28149 * C47279) * C42157) *
                C47178) *
               C943 +
           (((C21520 * C116 + C21521 * C47279) * C42155 +
             (C26830 * C116 + C26831 * C47279) * C42156 + C43031 * C42157) *
                C47340 +
            ((C22312 * C116 + C22313 * C47279) * C42155 +
             (C26832 * C116 + C26833 * C47279) * C42156 +
             ((C23340 - C23341) * C116 + (C23342 - C23343) * C47279) * C42157) *
                C47178) *
               C47371) *
              C47325 +
          (((((C21369 * C118 - C47018 * C125) * C116 +
              (C21369 * C128 - C47018 * C139) * C47279) *
                 C42155 +
             ((C25958 - C25959) * C116 + (C25960 - C25961) * C47279) * C42156 +
             C42396 * C42157) *
                C47340 +
            (((C25959 - C25958) * C116 + (C25961 - C25960) * C47279) * C42155 +
             ((C25962 - C25963) * C116 + (C25964 - C25965) * C47279) * C42156 +
             ((C28015 - C28014) * C116 + (C28017 - C28016) * C47279) * C42157) *
                C47178) *
               C942 +
           ((((C21497 - C21496) * C116 + (C21499 - C21498) * C47279) * C42155 +
             (C26446 * C116 + C26447 * C47279) * C42156 +
             (C27876 * C116 + C27877 * C47279) * C42157) *
                C47340 +
            ((C26444 * C116 + C26445 * C47279) * C42155 +
             (C27878 * C116 + C27879 * C47279) * C42156 +
             ((C27880 - C27881) * C116 + (C27882 - C27883) * C47279) * C42157) *
                C47178) *
               C943 +
           (((C21522 * C116 + C21523 * C47279) * C42155 +
             (C27158 * C116 + C27159 * C47279) * C42156 +
             ((C23132 - C23133) * C116 + (C23134 - C23135) * C47279) * C42157) *
                C47340 +
            ((C22582 * C116 + C22583 * C47279) * C42155 +
             ((C23133 - C23132) * C116 + (C23135 - C23134) * C47279) * C42156 +
             ((C47018 * C7172 - C21369 * C7170) * C116 +
              (C47018 * C7176 - C21369 * C7174) * C47279) *
                 C42157) *
                C47178) *
               C47371) *
              C47056)) /
            (p * q * std::sqrt(p + q));
    d2ee[224] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C47018 * C124 - C21369 * C117) * C116 +
            (C47018 * C138 - C21369 * C127) * C47279) *
               C42155 +
           ((C25950 - C25951) * C116 + (C25952 - C25953) * C47279) * C42156 +
           ((C25955 - C25954) * C116 + (C25957 - C25956) * C47279) * C42157) *
              C47091 * C47073 * C108 +
          (((C21369 * C118 - C47018 * C125) * C116 +
            (C21369 * C128 - C47018 * C139) * C47279) *
               C42155 +
           ((C25958 - C25959) * C116 + (C25960 - C25961) * C47279) * C42156 +
           ((C25963 - C25962) * C116 + (C25965 - C25964) * C47279) * C42157) *
              C47091 * C47073 * C109 +
          (((C47018 * C126 - C21369 * C119) * C116 +
            (C47018 * C140 - C21369 * C129) * C47279) *
               C42155 +
           ((C25966 - C25967) * C116 + (C25968 - C25969) * C47279) * C42156 +
           ((C25971 - C25970) * C116 + (C25973 - C25972) * C47279) * C42157) *
              C47091 * C47073 * C110 +
          (((C21369 * C120 - C47018 * C130) * C116 +
            (C21369 * C131 - C47018 * C141) * C47279) *
               C42155 +
           ((C26242 - C26243) * C116 + (C26244 - C26245) * C47279) * C42156 +
           ((C21369 * C421 - C47018 * C438) * C116 +
            (C21369 * C439 - C47018 * C451) * C47279) *
               C42157) *
              C47091 * C47073 * C111 +
          (((C47018 * C132 - C21369 * C121) * C116 +
            (C47018 * C142 - C21369 * C133) * C47279) *
               C42155 +
           ((C47018 * C440 - C21369 * C422) * C116 +
            (C47018 * C452 - C21369 * C441) * C47279) *
               C42156 +
           ((C47018 * C442 - C21369 * C423) * C116 +
            (C47018 * C453 - C21369 * C443) * C47279) *
               C42157) *
              C47091 * C47073 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C47018 * C124 - C21369 * C117) * C116 +
             (C47018 * C138 - C21369 * C127) * C47279) *
                C42155 +
            ((C25950 - C25951) * C116 + (C25952 - C25953) * C47279) * C42156 +
            ((C25955 - C25954) * C116 + (C25957 - C25956) * C47279) * C42157) *
               C47091 * C47410 +
           (((C21485 - C21484) * C116 + (C21487 - C21486) * C47279) * C42155 +
            (C26442 * C116 + C26443 * C47279) * C42156 +
            (C26826 * C116 + C26827 * C47279) * C42157) *
               C47091 * C47398 +
           ((C21520 * C116 + C21521 * C47279) * C42155 +
            (C26830 * C116 + C26831 * C47279) * C42156 +
            (C22330 * C116 + C22331 * C47279) * C42157) *
               C47091 * C47371) *
              C258 +
          ((((C21369 * C118 - C47018 * C125) * C116 +
             (C21369 * C128 - C47018 * C139) * C47279) *
                C42155 +
            ((C25958 - C25959) * C116 + (C25960 - C25961) * C47279) * C42156 +
            ((C25963 - C25962) * C116 + (C25965 - C25964) * C47279) * C42157) *
               C47091 * C47410 +
           (((C21497 - C21496) * C116 + (C21499 - C21498) * C47279) * C42155 +
            (C26446 * C116 + C26447 * C47279) * C42156 +
            (C27876 * C116 + C27877 * C47279) * C42157) *
               C47091 * C47398 +
           ((C21522 * C116 + C21523 * C47279) * C42155 +
            (C27158 * C116 + C27159 * C47279) * C42156 +
            ((C23132 - C23133) * C116 + (C23134 - C23135) * C47279) * C42157) *
               C47091 * C47371) *
              C259 +
          ((((C47018 * C126 - C21369 * C119) * C116 +
             (C47018 * C140 - C21369 * C129) * C47279) *
                C42155 +
            ((C25966 - C25967) * C116 + (C25968 - C25969) * C47279) * C42156 +
            ((C25971 - C25970) * C116 + (C25973 - C25972) * C47279) * C42157) *
               C47091 * C47410 +
           (((C21509 - C21508) * C116 + (C21511 - C21510) * C47279) * C42155 +
            (C26450 * C116 + C26451 * C47279) * C42156 +
            ((C25974 - C25975) * C116 + (C25976 - C25977) * C47279) * C42157) *
               C47091 * C47398 +
           ((C21524 * C116 + C21525 * C47279) * C42155 +
            ((C22007 - C22006) * C116 + (C22009 - C22008) * C47279) * C42156 +
            ((C47018 * C1173 - C21369 * C1158) * C116 +
             (C47018 * C1185 - C21369 * C1176) * C47279) *
                C42157) *
               C47091 * C47371) *
              C47365)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C47018 * C124 - C21369 * C117) * C116 +
             (C47018 * C138 - C21369 * C127) * C47279) *
                C42155 +
            ((C25950 - C25951) * C116 + (C25952 - C25953) * C47279) * C42156 +
            C42395 * C42157) *
               C47091 * C942 +
           (((C21485 - C21484) * C116 + (C21487 - C21486) * C47279) * C42155 +
            (C26442 * C116 + C26443 * C47279) * C42156 +
            (C26826 * C116 + C26827 * C47279) * C42157) *
               C47091 * C943 +
           ((C21520 * C116 + C21521 * C47279) * C42155 +
            (C26830 * C116 + C26831 * C47279) * C42156 +
            (C22330 * C116 + C22331 * C47279) * C42157) *
               C47091 * C47371) *
              C47407 +
          ((((C21369 * C118 - C47018 * C125) * C116 +
             (C21369 * C128 - C47018 * C139) * C47279) *
                C42155 +
            ((C25958 - C25959) * C116 + (C25960 - C25961) * C47279) * C42156 +
            C42396 * C42157) *
               C47091 * C942 +
           (((C21497 - C21496) * C116 + (C21499 - C21498) * C47279) * C42155 +
            (C26446 * C116 + C26447 * C47279) * C42156 +
            (C27876 * C116 + C27877 * C47279) * C42157) *
               C47091 * C943 +
           ((C21522 * C116 + C21523 * C47279) * C42155 +
            (C27158 * C116 + C27159 * C47279) * C42156 +
            ((C23132 - C23133) * C116 + (C23134 - C23135) * C47279) * C42157) *
               C47091 * C47371) *
              C47394 +
          ((((C47018 * C126 - C21369 * C119) * C116 +
             (C47018 * C140 - C21369 * C129) * C47279) *
                C42155 +
            ((C25966 - C25967) * C116 + (C25968 - C25969) * C47279) * C42156 +
            C42397 * C42157) *
               C47091 * C942 +
           (((C21509 - C21508) * C116 + (C21511 - C21510) * C47279) * C42155 +
            (C26450 * C116 + C26451 * C47279) * C42156 +
            ((C25974 - C25975) * C116 + (C25976 - C25977) * C47279) * C42157) *
               C47091 * C943 +
           ((C21524 * C116 + C21525 * C47279) * C42155 +
            ((C22007 - C22006) * C116 + (C22009 - C22008) * C47279) * C42156 +
            ((C47018 * C1173 - C21369 * C1158) * C116 +
             (C47018 * C1185 - C21369 * C1176) * C47279) *
                C42157) *
               C47091 * C47371) *
              C47365)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C47018 * C124 - C21369 * C117) * C116 +
            (C47018 * C138 - C21369 * C127) * C47279) *
               C42155 +
           ((C25950 - C25951) * C116 + (C25952 - C25953) * C47279) * C42156 +
           C42395 * C42157) *
              C47091 * C1010 +
          (((C21485 - C21484) * C116 + (C21487 - C21486) * C47279) * C42155 +
           (C26442 * C116 + C26443 * C47279) * C42156 +
           (C26826 * C116 + C26827 * C47279) * C42157) *
              C47091 * C1011 +
          ((C21520 * C116 + C21521 * C47279) * C42155 +
           (C26830 * C116 + C26831 * C47279) * C42156 +
           (C22330 * C116 + C22331 * C47279) * C42157) *
              C47091 * C1012 +
          ((C22186 * C116 + C22187 * C47279) * C42155 +
           (C27290 * C116 + C27291 * C47279) * C42156 +
           ((C22326 - C22327) * C116 + (C22328 - C22329) * C47279) * C42157) *
              C47091 * C1013 +
          ((C22196 * C116 + C22197 * C47279) * C42155 +
           ((C22693 - C22692) * C116 + (C22695 - C22694) * C47279) * C42156 +
           ((C47018 * C22308 - C21369 * C22307) * C116 +
            (C47018 * C22310 - C21369 * C22309) * C47279) *
               C42157) *
              C47091 * C1014) *
         C47045) /
            (p * q * std::sqrt(p + q));
}
