/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

#include "gto_d2_kit/d2_ee_ppdd_AB_yy.hpp"
#include <cmath>
/*

*/
#pragma GCC optimize("O0")
namespace {
    const double Pi = M_PI;
}
#pragma GCC optimize("O0")

void second_derivative_ee_1122_12_22(const double ae,
                                     const double xA,
                                     const double yA,
                                     const double zA,
                                     const double be,
                                     const double xB,
                                     const double yB,
                                     const double zB,
                                     const double ce,
                                     const double xC,
                                     const double yC,
                                     const double zC,
                                     const double de,
                                     const double xD,
                                     const double yD,
                                     const double zD,
                                     const double* const bs,
                                     double* const d2ee)
{
    const double p = ae + be;
    const double q = ce + de;
    const double xP = (ae * xA + be * xB) / p;
    const double yP = (ae * yA + be * yB) / p;
    const double zP = (ae * zA + be * zB) / p;
    const double xQ = (ce * xC + de * xD) / q;
    const double yQ = (ce * yC + de * yD) / q;
    const double zQ = (ce * zC + de * zD) / q;
    const double C46789 = ae + be;
    const double C46788 = ae * be;
    const double C46787 = yA - yB;
    const double C46814 = 0 * be;
    const double C46837 = p + q;
    const double C46836 = p * q;
    const double C46843 = bs[3];
    const double C46842 = yP - yQ;
    const double C46850 = bs[4];
    const double C46848 = xP - xQ;
    const double C46858 = bs[5];
    const double C46867 = bs[6];
    const double C46878 = bs[7];
    const double C46895 = bs[2];
    const double C46991 = zP - zQ;
    const double C115 = bs[0];
    const double C47628 = xA - xB;
    const double C47649 = ce + de;
    const double C47648 = ce * de;
    const double C47647 = xC - xD;
    const double C47681 = yC - yD;
    const double C47699 = zC - zD;
    const double C47873 = zA - zB;
    const double C46815 = std::pow(C46789, 2);
    const double C47638 = 2 * C46789;
    const double C46820 = 2 * C46788;
    const double C46795 = C46788 * C46787;
    const double C47886 = std::pow(C46787, 2);
    const double C47958 = C46787 * be;
    const double C47956 = C46787 * ae;
    const double C46838 = 2 * C46836;
    const double C46845 = std::pow(C46842, 2);
    const double C46891 = C46842 * ae;
    const double C46890 = C46842 * be;
    const double C46860 = std::pow(C46848, 2);
    const double C47091 = std::pow(C46991, 2);
    const double C47629 = std::pow(C47628, 2);
    const double C47924 = C47628 * be;
    const double C47923 = C47628 * ae;
    const double C47653 = 2 * C47649;
    const double C47652 = std::pow(C47649, 2);
    const double C47654 = C47647 * de;
    const double C47651 = C47647 * ce;
    const double C47650 = std::pow(C47647, 2);
    const double C47682 = std::pow(C47681, 2);
    const double C47741 = C47681 * de;
    const double C47739 = C47681 * ce;
    const double C47700 = std::pow(C47699, 2);
    const double C47783 = C47699 * de;
    const double C47781 = C47699 * ce;
    const double C47903 = std::pow(C47873, 2);
    const double C47959 = C47873 * be;
    const double C47957 = C47873 * ae;
    const double C46816 = 2 * C46815;
    const double C47925 = std::pow(C47638, -1);
    const double C47887 = C47886 * C46788;
    const double C46840 = C46838 / C46837;
    const double C136 =
        ((std::pow(yP - yQ, 2) * bs[2] * std::pow(C46838 / C46837, 2) -
          (bs[1] * C46838) / C46837) *
         C46788) /
        C46815;
    const double C116 = -(C46848 * bs[1] * C46838) / C46837;
    const double C296 = -(C46842 * bs[1] * C46838) / C46837;
    const double C491 = -(C46991 * bs[1] * C46838) / C46837;
    const double C46852 = C46845 * C46850;
    const double C46861 = C46845 * C46858;
    const double C46869 = C46845 * C46867;
    const double C46881 = C46845 * C46878;
    const double C46899 = C46843 * C46891;
    const double C46905 = C46850 * C46891;
    const double C46913 = C46858 * C46891;
    const double C46928 = C46867 * C46891;
    const double C46955 = C46878 * C46891;
    const double C123 = (-(bs[1] * C46891 * C46838) / C46837) / C46789;
    const double C46898 = C46843 * C46890;
    const double C46903 = C46850 * C46890;
    const double C46911 = C46858 * C46890;
    const double C46924 = C46867 * C46890;
    const double C46949 = C46878 * C46890;
    const double C122 = (-(bs[1] * C46890 * C46838) / C46837) / C46789;
    const double C47630 = C47629 * C46788;
    const double C47666 = std::pow(C47653, -1);
    const double C47933 = std::pow(C47653, -2);
    const double C47667 = 2 * C47652;
    const double C47937 = C47652 * C47653;
    const double C47936 = 4 * C47652;
    const double C47926 = std::pow(C47651, 2);
    const double C47655 = C47650 * C47648;
    const double C47683 = C47682 * C47648;
    const double C47938 = std::pow(C47739, 2);
    const double C47701 = C47700 * C47648;
    const double C47940 = std::pow(C47781, 2);
    const double C47904 = C47903 * C46788;
    const double C47888 = C47887 / C46789;
    const double C46844 = -C46840;
    const double C46851 = std::pow(C46840, 4);
    const double C46868 = std::pow(C46840, 6);
    const double C46894 = std::pow(C46840, 2);
    const double C137 = ((xP - xQ) *
                         (bs[2] * std::pow(C46840, 2) +
                          std::pow(yP - yQ, 2) * bs[3] * std::pow(-C46840, 3)) *
                         C46788) /
                        C46815;
    const double C47631 = C47630 / C46789;
    const double C47971 = 4 * C47937;
    const double C47970 = C47649 * C47936;
    const double C47656 = C47655 / C47649;
    const double C47684 = C47683 / C47649;
    const double C47702 = C47701 / C47649;
    const double C47905 = C47904 / C46789;
    const double C47889 = -C47888;
    const double C46846 = std::pow(C46844, 3);
    const double C46859 = std::pow(C46844, 5);
    const double C46879 = std::pow(C46844, 7);
    const double C46853 = C46852 * C46851;
    const double C46857 = C46850 * C46851;
    const double C46907 = C46851 * C46905;
    const double C46906 = C46851 * C46903;
    const double C46870 = C46869 * C46868;
    const double C46877 = C46867 * C46868;
    const double C46934 = C46868 * C46928;
    const double C46930 = C46868 * C46924;
    const double C46897 = C46895 * C46894;
    const double C124 = (C46848 * C46894 * C46895 * C46890) / C46789;
    const double C125 = (C46848 * C46894 * C46895 * C46891) / C46789;
    const double C308 = (C46842 * C46894 * C46895 * C46890) / C46789 -
                        (be * bs[1] * C46838) / (C46837 * C46789);
    const double C309 = (C46842 * C46894 * C46895 * C46891) / C46789 -
                        (ae * bs[1] * C46838) / (C46837 * C46789);
    const double C503 = (C46991 * C46894 * C46895 * C46890) / C46789;
    const double C504 = (C46991 * C46894 * C46895 * C46891) / C46789;
    const double C47632 = -C47631;
    const double C47657 = -C47656;
    const double C47685 = -C47684;
    const double C47703 = -C47702;
    const double C47906 = -C47905;
    const double C47890 = std::exp(C47889);
    const double C46849 = C46843 * C46846;
    const double C46901 = C46846 * C46899;
    const double C46900 = C46846 * C46898;
    const double C138 =
        ((bs[2] * std::pow(C46840, 2) + C46845 * C46843 * C46846) * C46788 +
         (C46843 * C46846 + C46845 * bs[4] * std::pow(C46840, 4)) * C46788 *
             std::pow(xP - xQ, 2)) /
        C46815;
    const double C326 =
        (ae * C46894 * C46895 * C46890 + be * C46894 * C46895 * C46891 +
         C46842 * (C46895 * C46894 + C46845 * C46843 * C46846) * C46788) /
        C46815;
    const double C46862 = C46861 * C46859;
    const double C46866 = C46858 * C46859;
    const double C46916 = C46859 * C46913;
    const double C46914 = C46859 * C46911;
    const double C46882 = C46881 * C46879;
    const double C46961 = C46879 * C46955;
    const double C46957 = C46879 * C46949;
    const double C46912 = C46857 * C46860;
    const double C46925 = C46848 * C46857;
    const double C47030 = C46857 * ae;
    const double C47028 = C46857 * C46845;
    const double C47027 = C46842 * C46857;
    const double C47026 = C46857 * be;
    const double C47604 = C46857 * C47091;
    const double C47618 = C46991 * C46857;
    const double C46909 = C46848 * C46907;
    const double C47017 = C46842 * C46907;
    const double C47023 = be * C46907;
    const double C46908 = C46848 * C46906;
    const double C47014 = C46842 * C46906;
    const double C47022 = ae * C46906;
    const double C46952 = C46877 * C46860;
    const double C47176 = C46848 * C46877;
    const double C47264 = C46877 * ae;
    const double C47258 = C46877 * C46845;
    const double C47257 = C46842 * C46877;
    const double C47256 = C46877 * be;
    const double C46937 = C46934 * C46860;
    const double C46954 = C46848 * C46934;
    const double C47139 = C46842 * C46934;
    const double C47251 = be * C46934;
    const double C47308 = C46934 * C47091;
    const double C47322 = C46991 * C46934;
    const double C46935 = C46930 * C46860;
    const double C46948 = C46848 * C46930;
    const double C47133 = C46842 * C46930;
    const double C47250 = ae * C46930;
    const double C47307 = C46930 * C47091;
    const double C47321 = C46991 * C46930;
    const double C521 =
        ((zP - zQ) * (C46897 + C46845 * C46843 * C46846) * C46788) / C46815;
    const double C117 = C46897 * C46860 - (bs[1] * C46838) / C46837;
    const double C295 = C46842 * C46848 * C46897;
    const double C297 = C46897 * C46845 - (bs[1] * C46838) / C46837;
    const double C490 = C46991 * C46848 * C46897;
    const double C492 = C46897 * C47091 - (bs[1] * C46838) / C46837;
    const double C943 = C46991 * C46842 * C46897;
    const double C47633 = std::exp(C47632);
    const double C47658 = std::exp(C47657);
    const double C47686 = std::exp(C47685);
    const double C47704 = std::exp(C47703);
    const double C47907 = std::exp(C47906);
    const double C147 = C47890 * C137;
    const double C46796 = C46795 * C47890;
    const double C113 = -(2 * ae * be * (yA - yB) * C47890) / (ae + be);
    const double C114 =
        -((C47890 - (C46787 * 2 * C46788 * C46787 * C47890) / C46789) * 2 *
          C46788) /
        C46789;
    const double C4787 =
        ((C47890 - (C46787 * 2 * C46788 * C46787 * C47890) / C46789) * ae) /
            C46789 -
        (0 * be) / (2 * std::pow(C46789, 2));
    const double C47992 = C47925 * C47890;
    const double C47991 = C47890 * C47956;
    const double C16155 = -(C47890 * C47958) / C46789;
    const double C46854 = C46849 + C46853;
    const double C46904 = C46848 * C46849;
    const double C47018 = C46849 * ae;
    const double C47016 = C46842 * C46849;
    const double C47015 = C46849 * be;
    const double C118 =
        2 * C46848 * C46897 + C46848 * (C46897 + C46849 * C46860);
    const double C294 = C46842 * (C46897 + C46849 * C46860);
    const double C489 = C46991 * (C46897 + C46849 * C46860);
    const double C1170 =
        2 * C46842 * C46897 + C46842 * (C46897 + C46849 * C46845);
    const double C1307 = C46991 * (C46897 + C46849 * C46845);
    const double C2026 =
        2 * C46991 * C46897 + C46991 * (C46897 + C46849 * C47091);
    const double C2027 =
        3 * (C46897 + C46849 * C47091) +
        C46991 * (2 * C46991 * C46849 + C46991 * (C46849 + C46857 * C47091));
    const double C127 = (C46894 * C46895 * C46891 + C46901 * C46860) / C46789;
    const double C129 =
        (2 * C46848 * C46901 + C46848 * (C46901 + C46907 * C46860)) / C46789;
    const double C305 = (C46842 * (C46901 + C46907 * C46860) +
                         (C46897 + C46849 * C46860) * ae) /
                        C46789;
    const double C307 =
        (C46842 * C46848 * C46901 + C46848 * C46897 * ae) / C46789;
    const double C311 =
        (C46894 * C46895 * C46891 + C46842 * (C46842 * C46901 + C46897 * ae) +
         C46842 * C46897 * ae) /
        C46789;
    const double C500 = (C46991 * (C46901 + C46907 * C46860)) / C46789;
    const double C502 = (C46991 * C46848 * C46901) / C46789;
    const double C506 = (C46894 * C46895 * C46891 + C46901 * C47091) / C46789;
    const double C949 = (C46991 * (C46842 * C46901 + C46897 * ae)) / C46789;
    const double C2035 =
        (2 * C46991 * C46901 + C46991 * (C46901 + C46907 * C47091)) / C46789;
    const double C126 = (C46894 * C46895 * C46890 + C46900 * C46860) / C46789;
    const double C128 =
        (2 * C46848 * C46900 + C46848 * (C46900 + C46906 * C46860)) / C46789;
    const double C304 = (C46842 * (C46900 + C46906 * C46860) +
                         (C46897 + C46849 * C46860) * be) /
                        C46789;
    const double C306 =
        (C46842 * C46848 * C46900 + C46848 * C46897 * be) / C46789;
    const double C310 =
        (C46894 * C46895 * C46890 + C46842 * (C46842 * C46900 + C46897 * be) +
         C46842 * C46897 * be) /
        C46789;
    const double C499 = (C46991 * (C46900 + C46906 * C46860)) / C46789;
    const double C501 = (C46991 * C46848 * C46900) / C46789;
    const double C505 = (C46894 * C46895 * C46890 + C46900 * C47091) / C46789;
    const double C948 = (C46991 * (C46842 * C46900 + C46897 * be)) / C46789;
    const double C2034 =
        (2 * C46991 * C46900 + C46991 * (C46900 + C46906 * C47091)) / C46789;
    const double C151 = C47890 * C138;
    const double C46863 = C46857 + C46862;
    const double C46871 = C46866 + C46870;
    const double C46926 = C46866 * C46860;
    const double C46951 = C46848 * C46866;
    const double C47140 = C46866 * ae;
    const double C47136 = C46866 * C46845;
    const double C47135 = C46842 * C46866;
    const double C47134 = C46866 * be;
    const double C47619 = C46866 * C47091;
    const double C46918 = C46916 * C46860;
    const double C46927 = C46848 * C46916;
    const double C47029 = C46842 * C46916;
    const double C47130 = be * C46916;
    const double C47222 = C46991 * C46916;
    const double C47496 = C46916 * C47091;
    const double C2037 =
        (3 * (C46901 + C46907 * C47091) +
         C46991 * (2 * C46991 * C46907 + C46991 * (C46907 + C46916 * C47091))) /
        C46789;
    const double C46917 = C46914 * C46860;
    const double C46923 = C46848 * C46914;
    const double C47025 = C46842 * C46914;
    const double C47129 = ae * C46914;
    const double C47221 = C46991 * C46914;
    const double C47493 = C46914 * C47091;
    const double C2036 =
        (3 * (C46900 + C46906 * C47091) +
         C46991 * (2 * C46991 * C46906 + C46991 * (C46906 + C46914 * C47091))) /
        C46789;
    const double C46883 = C46877 + C46882;
    const double C46964 = C46961 * C46860;
    const double C47179 = C46848 * C46961;
    const double C47263 = C46842 * C46961;
    const double C46962 = C46957 * C46860;
    const double C47175 = C46848 * C46957;
    const double C47255 = C46842 * C46957;
    const double C46915 = C46849 + C46912;
    const double C46931 = 2 * C46925;
    const double C47010 = C46925 * ae;
    const double C47008 = C46842 * C46925;
    const double C47007 = C46925 * be;
    const double C47034 = C46849 + C47028;
    const double C47036 = C47027 * ae;
    const double C47033 = C47027 * be;
    const double C47137 = 2 * C47027;
    const double C47605 = C46849 + C47604;
    const double C47620 = 2 * C47618;
    const double C508 = (C46848 * C46901 + C46909 * C47091) / C46789;
    const double C507 = (C46848 * C46900 + C46908 * C47091) / C46789;
    const double C47031 = C47022 + C47023;
    const double C46959 = C46866 + C46952;
    const double C47188 = C47176 * ae;
    const double C47186 = C47176 * C46845;
    const double C47185 = C46842 * C47176;
    const double C47184 = C47176 * be;
    const double C47270 = C46866 + C47258;
    const double C47272 = C47257 * ae;
    const double C47269 = C47257 * be;
    const double C46940 = C46916 + C46937;
    const double C46960 = 2 * C46954;
    const double C47052 = C46842 * C46954;
    const double C47172 = be * C46954;
    const double C47231 = C46991 * C46954;
    const double C47502 = C46954 * C47091;
    const double C47311 = C46916 + C47308;
    const double C47327 = be * C47322;
    const double C46938 = C46914 + C46935;
    const double C46956 = 2 * C46948;
    const double C47048 = C46842 * C46948;
    const double C47171 = ae * C46948;
    const double C47230 = C46991 * C46948;
    const double C47499 = C46948 * C47091;
    const double C47267 = C47250 + C47251;
    const double C47310 = C46914 + C47307;
    const double C47326 = ae * C47321;
    const double C10857 = C47890 * C521;
    const double C47961 = C47925 * C47633;
    const double C47960 = C47633 * C47923;
    const double C4785 = -(C47633 * C47924) / C46789;
    const double C47660 = C47658 * C47651;
    const double C47659 = C47658 / C47653;
    const double C47669 = C47666 * C47658;
    const double C47929 = C47658 * C47654;
    const double C47968 = C47933 * C47658;
    const double C47962 = C47658 * C47926;
    const double C47740 = C47686 / C47653;
    const double C47742 = C47686 * C47739;
    const double C47749 = C47666 * C47686;
    const double C47944 = C47686 * C47741;
    const double C47974 = C47933 * C47686;
    const double C47972 = C47686 * C47938;
    const double C47782 = C47704 / C47653;
    const double C47784 = C47704 * C47781;
    const double C47791 = C47666 * C47704;
    const double C47950 = C47704 * C47783;
    const double C47977 = C47933 * C47704;
    const double C47975 = C47704 * C47940;
    const double C47994 = C47925 * C47907;
    const double C47993 = C47907 * C47957;
    const double C31617 = -(C47907 * C47959) / C46789;
    const double C46819 = 2 * C46796;
    const double C4788 =
        (((-4 * C46796) / C46789 -
          (C46787 * (C47890 - (C46787 * 2 * C46796) / C46789) * 2 * C46788) /
              C46789) *
         ae) /
        C46789;
    const double C4789 = (0 * ae) / C46789 - C46796 / std::pow(C46789, 2);
    const double C4790 =
        (-((C47890 - (C46787 * 2 * C46796) / C46789) * 2 * C46788) / C46789) /
        (2 * C46789);
    const double C16159 =
        (-(0 * be) / C46789) / (2 * C46789) -
        ((C47890 - (C46787 * 2 * C46796) / C46789) * be) / C46789;
    const double C16160 =
        -(((-4 * C46796) / C46789 -
           (C46787 * (C47890 - (C46787 * 2 * C46796) / C46789) * 2 * C46788) /
               C46789) *
          be) /
        C46789;
    const double C16161 =
        (-(2 * C46796) / C46789) / (2 * C46789) - (0 * be) / C46789;
    const double C16162 =
        (-((C47890 - (C46787 * 2 * C46796) / C46789) * 2 * C46788) / C46789) /
        (2 * C46789);
    const double C21879 = ((0 * ae) / C46789 - C46796 / C46815) / (2 * C46789) -
                          (0 * be) / C46789;
    const double C146 = C113 * C125;
    const double C144 = C113 * C124;
    const double C10856 = C113 * C504;
    const double C10854 = C113 * C503;
    const double C149 = C114 * C117;
    const double C145 = C114 * C116;
    const double C340 = C114 * C295;
    const double C535 = C114 * C490;
    const double C10861 = C114 * C492;
    const double C10855 = C114 * C491;
    const double C11337 = C114 * C943;
    const double C4794 = C4787 * C125;
    const double C4792 = C4787 * C124;
    const double C37402 = C4787 * C504;
    const double C37400 = C4787 * C503;
    const double C21873 = C47992 / C47638;
    const double C4783 = C47991 / C46789;
    const double C21871 = C47890 / C47638 - (C47991 * C47958) / C46815;
    const double C21872 = C47991 / C46816 - (C47992 * C47958) / C46789;
    const double C16179 = C16155 * C138;
    const double C16167 = C16155 * C137;
    const double C26321 = C16155 * C521;
    const double C46855 = C46854 * C46788;
    const double C312 =
        (C46848 * C46900 + C46842 * (C46842 * C46908 + C46904 * be) +
         C46842 * C46904 * be) /
        C46789;
    const double C313 =
        (C46848 * C46901 + C46842 * (C46842 * C46909 + C46904 * ae) +
         C46842 * C46904 * ae) /
        C46789;
    const double C950 = (C46991 * (C46842 * C46908 + C46904 * be)) / C46789;
    const double C951 = (C46991 * (C46842 * C46909 + C46904 * ae)) / C46789;
    const double C298 = C46848 * C46897 + C46904 * C46845;
    const double C493 = C46848 * C46897 + C46904 * C47091;
    const double C944 = C46991 * C46842 * C46904;
    const double C1169 =
        2 * C46842 * C46904 + C46842 * (C46904 + C46925 * C46845);
    const double C1306 = C46991 * (C46904 + C46925 * C46845);
    const double C2025 =
        2 * C46991 * C46904 + C46991 * (C46904 + C46925 * C47091);
    const double C47020 = C47017 + C47018;
    const double C1304 = C46842 * C46897 + C47016 * C47091;
    const double C2430 =
        2 * C46991 * C47016 + C46991 * (C47016 + C47027 * C47091);
    const double C47019 = C47014 + C47015;
    const double C153 = C114 * C118;
    const double C336 = C114 * C294;
    const double C531 = C114 * C489;
    const double C11729 = C114 * C1307;
    const double C12612 = C114 * C2026;
    const double C12621 = C114 * C2027;
    const double C150 = C113 * C127;
    const double C4806 = C4787 * C127;
    const double C154 = C113 * C129;
    const double C4810 = C4787 * C129;
    const double C337 = C113 * C305;
    const double C5012 = C4787 * C305;
    const double C341 = C113 * C307;
    const double C5000 = C4787 * C307;
    const double C532 = C113 * C500;
    const double C5214 = C4787 * C500;
    const double C536 = C113 * C502;
    const double C5202 = C4787 * C502;
    const double C10862 = C113 * C506;
    const double C37414 = C4787 * C506;
    const double C11338 = C113 * C949;
    const double C37884 = C4787 * C949;
    const double C12613 = C113 * C2035;
    const double C39156 = C4787 * C2035;
    const double C148 = C113 * C126;
    const double C4804 = C4787 * C126;
    const double C152 = C113 * C128;
    const double C4808 = C4787 * C128;
    const double C335 = C113 * C304;
    const double C5010 = C4787 * C304;
    const double C339 = C113 * C306;
    const double C4998 = C4787 * C306;
    const double C530 = C113 * C499;
    const double C5212 = C4787 * C499;
    const double C534 = C113 * C501;
    const double C5200 = C4787 * C501;
    const double C10860 = C113 * C505;
    const double C37412 = C4787 * C505;
    const double C11336 = C113 * C948;
    const double C37882 = C4787 * C948;
    const double C12611 = C113 * C2034;
    const double C39154 = C4787 * C2034;
    const double C46864 = C46863 * C46788;
    const double C46872 = C46871 * C46788;
    const double C46932 = C46857 + C46926;
    const double C46958 = 2 * C46951;
    const double C47053 = C46951 * ae;
    const double C47051 = C46951 * C46845;
    const double C47050 = C46842 * C46951;
    const double C47049 = C46951 * be;
    const double C47607 = C46951 * C47091;
    const double C2028 =
        3 * (C46904 + C46925 * C47091) +
        C46991 * (2 * C46991 * C46925 + C46991 * (C46925 + C46951 * C47091));
    const double C47146 = C47139 + C47140;
    const double C47145 = C46857 + C47136;
    const double C47147 = C47135 * ae;
    const double C47144 = C47135 * be;
    const double C47259 = 2 * C47135;
    const double C47615 = C47135 * C47091;
    const double C7015 =
        3 * (C47016 + C47027 * C47091) +
        C46991 * (2 * C46991 * C47027 + C46991 * (C47027 + C47135 * C47091));
    const double C47143 = C47133 + C47134;
    const double C47621 = C46857 + C47619;
    const double C46920 = C46907 + C46918;
    const double C46933 = 2 * C46927;
    const double C47009 = C46842 * C46927;
    const double C47046 = be * C46927;
    const double C2033 =
        (2 * C46991 * C46909 + C46991 * (C46909 + C46927 * C47091)) / C46789;
    const double C2039 =
        (3 * (C46909 + C46927 * C47091) +
         C46991 * (2 * C46991 * C46927 + C46991 * (C46927 + C46954 * C47091))) /
        C46789;
    const double C47035 = C47029 + C47030;
    const double C47225 = be * C47222;
    const double C47525 = 2 * C47222;
    const double C47497 = C46907 + C47496;
    const double C12622 = C113 * C2037;
    const double C39168 = C4787 * C2037;
    const double C46919 = C46906 + C46917;
    const double C46929 = 2 * C46923;
    const double C47006 = C46842 * C46923;
    const double C47045 = ae * C46923;
    const double C2032 =
        (2 * C46991 * C46908 + C46991 * (C46908 + C46923 * C47091)) / C46789;
    const double C2038 =
        (3 * (C46908 + C46923 * C47091) +
         C46991 * (2 * C46991 * C46923 + C46991 * (C46923 + C46948 * C47091))) /
        C46789;
    const double C47032 = C47025 + C47026;
    const double C47142 = C47129 + C47130;
    const double C47224 = ae * C47221;
    const double C47521 = 2 * C47221;
    const double C47494 = C46906 + C47493;
    const double C12620 = C113 * C2036;
    const double C39166 = C4787 * C2036;
    const double C46884 = C46883 * C46788;
    const double C46967 = C46934 + C46964;
    const double C47187 = C46842 * C47179;
    const double C47271 = C47263 + C47264;
    const double C46965 = C46930 + C46962;
    const double C47183 = C46842 * C47175;
    const double C47268 = C47255 + C47256;
    const double C119 = 3 * (C46897 + C46849 * C46860) +
                        C46848 * (2 * C46904 + C46848 * C46915);
    const double C299 = C46897 + C46849 * C46860 + C46915 * C46845;
    const double C300 = C46842 * (2 * C46904 + C46848 * C46915);
    const double C494 = C46897 + C46849 * C46860 + C46915 * C47091;
    const double C495 = C46991 * (2 * C46904 + C46848 * C46915);
    const double C945 = C46991 * C46842 * C46915;
    const double C1303 = C46842 * C46904 + C47008 * C47091;
    const double C1171 = 3 * (C46897 + C46849 * C46845) +
                         C46842 * (2 * C47016 + C46842 * C47034);
    const double C1308 = C46897 + C46849 * C46845 + C47034 * C47091;
    const double C1722 = C46991 * (2 * C47016 + C46842 * C47034);
    const double C12602 =
        4 * (2 * C46991 * C46849 + C46991 * C47605) +
        C46991 * (3 * C47605 + C46991 * (2 * C46991 * C46857 +
                                         C46991 * (C46857 + C46866 * C47091)));
    const double C540 = C113 * C508;
    const double C5206 = C4787 * C508;
    const double C538 = C113 * C507;
    const double C5204 = C4787 * C507;
    const double C46963 = C46848 * C46959;
    const double C47076 = C46959 * ae;
    const double C47074 = C46959 * C46845;
    const double C47073 = C46842 * C46959;
    const double C47072 = C46959 * be;
    const double C47193 = C46951 + C47186;
    const double C47195 = C47185 * ae;
    const double C47192 = C47185 * be;
    const double C47280 = C47270 * ae;
    const double C47278 = C46842 * C47270;
    const double C47277 = C47270 * be;
    const double C46942 = C46848 * C46940;
    const double C46953 = 3 * C46940;
    const double C47000 = C46842 * C46940;
    const double C47069 = be * C46940;
    const double C47234 = be * C47231;
    const double C47503 = C46927 + C47502;
    const double C47314 = be * C47311;
    const double C47526 = C46991 * C47311;
    const double C46941 = C46848 * C46938;
    const double C46947 = 3 * C46938;
    const double C46997 = C46842 * C46938;
    const double C47068 = ae * C46938;
    const double C47181 = C47171 + C47172;
    const double C47233 = ae * C47230;
    const double C47500 = C46923 + C47499;
    const double C47313 = ae * C47310;
    const double C47522 = C46991 * C47310;
    const double C47330 = C47326 + C47327;
    const double C104 = C47961 / C47638;
    const double C102 = C47633 / C47638 - (C47960 * C47924) / C46815;
    const double C103 = C47960 / C46816 - (C47961 * C47924) / C46789;
    const double C16157 = C47960 / C46789;
    const double C47661 = C47660 * C47654;
    const double C47668 = C47660 / C47667;
    const double C47930 = C47666 * C47660;
    const double C47928 = C47660 / C47649;
    const double C291 = (C47658 * std::pow(C47654, 2)) / C47652 + C47659;
    const double C47670 = C47669 * C47654;
    const double C47934 = C47651 * C47669;
    const double C47932 = 2 * C47669;
    const double C47978 = C47669 / C47936;
    const double C112 = C47669 / C47971;
    const double C2911 = C47669 / C47653;
    const double C47964 = C47929 / C47649;
    const double C292 = (-2 * C47666 * C47929) / C47649;
    const double C47995 = C47962 / C47652;
    const double C1094 = (C47686 * std::pow(C47741, 2)) / C47652 + C47740;
    const double C47743 = C47742 * C47741;
    const double C47748 = C47742 / C47667;
    const double C47942 = C47742 / C47649;
    const double C47939 = C47666 * C47742;
    const double C47750 = C47749 * C47741;
    const double C47948 = C47739 * C47749;
    const double C47947 = 2 * C47749;
    const double C47984 = C47749 / C47936;
    const double C1166 = C47749 / C47971;
    const double C2908 = C47749 / C47653;
    const double C47980 = C47944 / C47649;
    const double C1095 = (-2 * C47666 * C47944) / C47649;
    const double C48000 = C47972 / C47652;
    const double C1844 = (C47704 * std::pow(C47783, 2)) / C47652 + C47782;
    const double C47785 = C47784 * C47783;
    const double C47790 = C47784 / C47667;
    const double C47943 = C47784 / C47649;
    const double C47941 = C47666 * C47784;
    const double C47792 = C47791 * C47783;
    const double C47954 = C47781 * C47791;
    const double C47953 = 2 * C47791;
    const double C47990 = C47791 / C47936;
    const double C2023 = C47791 / C47971;
    const double C3810 = C47791 / C47653;
    const double C47986 = C47950 / C47649;
    const double C1845 = (-2 * C47666 * C47950) / C47649;
    const double C48002 = C47975 / C47652;
    const double C42677 = C47994 / C47638;
    const double C10559 = C47993 / C46789;
    const double C42675 = C47907 / C47638 - (C47993 * C47959) / C46815;
    const double C42676 = C47993 / C46816 - (C47994 * C47959) / C46789;
    const double C46821 = C46787 * C46819;
    const double C4809 = C4788 * C118;
    const double C4805 = C4788 * C117;
    const double C4793 = C4788 * C116;
    const double C5011 = C4788 * C294;
    const double C4999 = C4788 * C295;
    const double C5213 = C4788 * C489;
    const double C5201 = C4788 * C490;
    const double C37413 = C4788 * C492;
    const double C37401 = C4788 * C491;
    const double C37883 = C4788 * C943;
    const double C38279 = C4788 * C1307;
    const double C39167 = C4788 * C2027;
    const double C39155 = C4788 * C2026;
    const double C4802 = C4789 * C305;
    const double C4800 = C4789 * C304;
    const double C4798 = C4789 * C307;
    const double C4796 = C4789 * C306;
    const double C37406 = C4789 * C949;
    const double C37404 = C4789 * C948;
    const double C4801 = C4790 * C294;
    const double C4797 = C4790 * C295;
    const double C37405 = C4790 * C943;
    const double C37887 = C4790 * C1307;
    const double C16182 = C16159 * C129;
    const double C16180 = C16159 * C128;
    const double C16178 = C16159 * C127;
    const double C16176 = C16159 * C126;
    const double C16166 = C16159 * C125;
    const double C16164 = C16159 * C124;
    const double C16384 = C16159 * C305;
    const double C16382 = C16159 * C304;
    const double C16372 = C16159 * C307;
    const double C16370 = C16159 * C306;
    const double C16586 = C16159 * C500;
    const double C16584 = C16159 * C499;
    const double C16578 = C16159 * C508;
    const double C16576 = C16159 * C507;
    const double C16574 = C16159 * C502;
    const double C16572 = C16159 * C501;
    const double C26332 = C16159 * C506;
    const double C26330 = C16159 * C505;
    const double C26320 = C16159 * C504;
    const double C26318 = C16159 * C503;
    const double C26802 = C16159 * C949;
    const double C26800 = C16159 * C948;
    const double C28090 = C16159 * C2037;
    const double C28088 = C16159 * C2036;
    const double C28078 = C16159 * C2035;
    const double C28076 = C16159 * C2034;
    const double C16181 = C16160 * C118;
    const double C16177 = C16160 * C117;
    const double C16165 = C16160 * C116;
    const double C16383 = C16160 * C294;
    const double C16371 = C16160 * C295;
    const double C16585 = C16160 * C489;
    const double C16573 = C16160 * C490;
    const double C26331 = C16160 * C492;
    const double C26319 = C16160 * C491;
    const double C26801 = C16160 * C943;
    const double C27197 = C16160 * C1307;
    const double C28089 = C16160 * C2027;
    const double C28077 = C16160 * C2026;
    const double C16174 = C16161 * C305;
    const double C16172 = C16161 * C304;
    const double C16170 = C16161 * C307;
    const double C16168 = C16161 * C306;
    const double C26324 = C16161 * C949;
    const double C26322 = C16161 * C948;
    const double C16173 = C16162 * C294;
    const double C16169 = C16162 * C295;
    const double C26323 = C16162 * C943;
    const double C26805 = C16162 * C1307;
    const double C164 = C144 - C145;
    const double C10872 = C10854 - C10855;
    const double C4807 = C4783 * C138;
    const double C4795 = C4783 * C137;
    const double C37403 = C4783 * C521;
    const double C21875 =
        (((0 - (C46787 * C46814) / C46789) * ae) / C46789 - (0 * be) / C46816) /
            (2 * C46789) -
        ((C46787 * (((C47890 - (C46787 * 2 * C46796) / C46789) * ae) / C46789 -
                    C46814 / C46816) +
          C4783) *
         be) /
            C46789 +
        (0 * ae) / C46789 - C46796 / C46815;
    const double C139 =
        (2 * C46848 * C46855 +
         C46848 * (C46855 +
                   (C46850 * C46851 + C46845 * bs[5] * std::pow(C46844, 5)) *
                       C46788 * std::pow(C46848, 2))) /
        C46815;
    const double C325 =
        (ae * C46848 * C46846 * C46843 * C46890 +
         be * C46848 * C46846 * C46843 * C46891 + C46842 * C46848 * C46855) /
        C46815;
    const double C327 =
        ((C46897 + C46845 * C46843 * C46846) * C46788 +
         ae * (C46842 * C46900 + C46897 * be) +
         be * (C46842 * C46901 + C46897 * ae) +
         C46842 * (ae * C46900 + be * C46901 + C46842 * C46855)) /
        C46815;
    const double C520 = ((zP - zQ) * C46848 * C46855) / C46815;
    const double C522 = ((C46897 + C46845 * C46843 * C46846) * C46788 +
                         C46855 * std::pow(zP - zQ, 2)) /
                        C46815;
    const double C958 = (ae * C46991 * C46900 + be * C46991 * C46901 +
                         C46842 * C46991 * C46855) /
                        C46815;
    const double C343 = C113 * C312;
    const double C5002 = C4787 * C312;
    const double C4994 = C4789 * C312;
    const double C16374 = C16159 * C312;
    const double C16366 = C16161 * C312;
    const double C345 = C113 * C313;
    const double C5004 = C4787 * C313;
    const double C4996 = C4789 * C313;
    const double C16376 = C16159 * C313;
    const double C16368 = C16161 * C313;
    const double C964 = C113 * C950;
    const double C5196 = C4789 * C950;
    const double C5734 = C4787 * C950;
    const double C16568 = C16161 * C950;
    const double C17106 = C16159 * C950;
    const double C966 = C113 * C951;
    const double C5198 = C4789 * C951;
    const double C5736 = C4787 * C951;
    const double C16570 = C16161 * C951;
    const double C17108 = C16159 * C951;
    const double C344 = C114 * C298;
    const double C5003 = C4788 * C298;
    const double C4995 = C4790 * C298;
    const double C16375 = C16160 * C298;
    const double C16367 = C16162 * C298;
    const double C539 = C114 * C493;
    const double C5205 = C4788 * C493;
    const double C16577 = C16160 * C493;
    const double C965 = C114 * C944;
    const double C5197 = C4790 * C944;
    const double C5735 = C4788 * C944;
    const double C16569 = C16162 * C944;
    const double C17107 = C16160 * C944;
    const double C1452 = C114 * C1169;
    const double C5007 = C4790 * C1169;
    const double C6287 = C4788 * C1169;
    const double C16379 = C16162 * C1169;
    const double C17643 = C16160 * C1169;
    const double C1616 = C114 * C1306;
    const double C5739 = C4790 * C1306;
    const double C6495 = C4788 * C1306;
    const double C17111 = C16162 * C1306;
    const double C17851 = C16160 * C1306;
    const double C2324 = C114 * C2025;
    const double C7367 = C4788 * C2025;
    const double C18707 = C16160 * C2025;
    const double C1179 = (2 * (C46842 * C46901 + C46897 * ae) +
                          C46842 * (C46901 + C46842 * C47020 + C47016 * ae) +
                          (C46897 + C46849 * C46845) * ae) /
                         C46789;
    const double C1316 =
        (C46842 * C46901 + C46897 * ae + C47020 * C47091) / C46789;
    const double C1322 =
        (C46991 * (C46901 + C46842 * C47020 + C47016 * ae)) / C46789;
    const double C11724 = C114 * C1304;
    const double C26327 = C16162 * C1304;
    const double C27189 = C16160 * C1304;
    const double C37409 = C4790 * C1304;
    const double C38271 = C4788 * C1304;
    const double C13103 = C114 * C2430;
    const double C28081 = C16162 * C2430;
    const double C28563 = C16160 * C2430;
    const double C39159 = C4790 * C2430;
    const double C39641 = C4788 * C2430;
    const double C1178 = (2 * (C46842 * C46900 + C46897 * be) +
                          C46842 * (C46900 + C46842 * C47019 + C47016 * be) +
                          (C46897 + C46849 * C46845) * be) /
                         C46789;
    const double C1315 =
        (C46842 * C46900 + C46897 * be + C47019 * C47091) / C46789;
    const double C1321 =
        (C46991 * (C46900 + C46842 * C47019 + C47016 * be)) / C46789;
    const double C165 = C148 - C149;
    const double C166 = C152 - C153;
    const double C359 = C335 - C336;
    const double C360 = C339 - C340;
    const double C554 = C530 - C531;
    const double C555 = C534 - C535;
    const double C10873 = C10860 - C10861;
    const double C11345 = C11336 - C11337;
    const double C12624 = C12611 - C12612;
    const double C47005 = C46848 * C46864;
    const double C47024 = C46842 * C46864;
    const double C47110 = C46991 * C46864;
    const double C140 =
        (3 * (C46855 + C46864 * C46860) +
         C46848 * (2 * C46848 * C46864 +
                   C46848 * (C46864 + (C46858 * C46859 +
                                       C46845 * bs[6] * std::pow(C46840, 6)) *
                                          C46788 * C46860))) /
        C46815;
    const double C324 =
        (ae * (C46846 * C46843 * C46890 + C46851 * C46850 * C46890 * C46860) +
         be * (C46846 * C46843 * C46891 + C46851 * C46850 * C46891 * C46860) +
         C46842 * (C46855 + C46864 * C46860)) /
        C46815;
    const double C328 =
        (C46848 * C46855 + ae * (C46842 * C46908 + C46904 * be) +
         be * (C46842 * C46909 + C46904 * ae) +
         C46842 * (ae * C46908 + be * C46909 + C46842 * C46848 * C46864)) /
        C46815;
    const double C519 = ((zP - zQ) * (C46855 + C46864 * C46860)) / C46815;
    const double C523 =
        (C46848 * C46855 + C46848 * C46864 * std::pow(zP - zQ, 2)) / C46815;
    const double C959 = (ae * C46991 * C46908 + be * C46991 * C46909 +
                         C46842 * C46991 * C46848 * C46864) /
                        C46815;
    const double C1188 =
        (2 * (ae * C46900 + be * C46901 + C46842 * C46855) +
         ae * (C46900 + C46842 * C47019 + C47016 * be) +
         be * (C46901 + C46842 * C47020 + C47016 * ae) +
         C46842 * (C46855 + ae * C47019 + be * C47020 +
                   C46842 * (ae * C46906 + be * C46907 + C46842 * C46864))) /
        C46815;
    const double C1331 =
        (ae * (C46900 + C46906 * C47091) + be * (C46901 + C46907 * C47091) +
         C46842 * (C46855 + C46864 * C47091)) /
        C46815;
    const double C1334 =
        (C46991 * C46855 + ae * C46991 * C47019 + be * C46991 * C47020 +
         C46842 * (ae * C46991 * C46906 + be * C46991 * C46907 +
                   C46842 * C46991 * C46864)) /
        C46815;
    const double C2044 =
        (2 * C46991 * C46855 + C46991 * (C46855 + C46864 * C47091)) / C46815;
    const double C46873 = C46872 * C46860;
    const double C46876 = C46848 * C46872;
    const double C47131 = C46842 * C46872;
    const double C47215 = C46872 * C47091;
    const double C47223 = C46991 * C46872;
    const double C46936 = C46848 * C46932;
    const double C46950 = 3 * C46932;
    const double C47001 = C46932 * ae;
    const double C46999 = C46842 * C46932;
    const double C46998 = C46932 * be;
    const double C1168 =
        2 * C46842 * C46915 + C46842 * (C46915 + C46932 * C46845);
    const double C1305 = C46991 * (C46915 + C46932 * C46845);
    const double C2024 =
        2 * C46991 * C46915 + C46991 * (C46915 + C46932 * C47091);
    const double C2029 =
        3 * (C46915 + C46932 * C47091) +
        C46991 * (2 * C46991 * C46932 + C46991 * (C46932 + C46959 * C47091));
    const double C47058 = C47052 + C47053;
    const double C47057 = C46925 + C47051;
    const double C47059 = C47050 * ae;
    const double C47056 = C47050 * be;
    const double C47177 = 2 * C47050;
    const double C2431 =
        2 * C46991 * C47008 + C46991 * (C47008 + C47050 * C47091);
    const double C7016 =
        3 * (C47008 + C47050 * C47091) +
        C46991 * (2 * C46991 * C47050 + C46991 * (C47050 + C47185 * C47091));
    const double C47055 = C47048 + C47049;
    const double C47608 = C46925 + C47607;
    const double C12617 = C114 * C2028;
    const double C47153 = C46842 * C47146;
    const double C47262 = 2 * C47146;
    const double C47249 = be * C47146;
    const double C47320 = C46991 * C47146;
    const double C47518 = C47146 * C47091;
    const double C47154 = C47145 * ae;
    const double C47152 = C46842 * C47145;
    const double C47151 = C47145 * be;
    const double C47260 = 3 * C47145;
    const double C7505 =
        2 * C46991 * C47034 + C46991 * (C47034 + C47145 * C47091);
    const double C23361 =
        3 * (C47034 + C47145 * C47091) +
        C46991 * (2 * C46991 * C47145 + C46991 * (C47145 + C47270 * C47091));
    const double C47616 = C47027 + C47615;
    const double C28085 = C16162 * C7015;
    const double C39163 = C4790 * C7015;
    const double C44544 = C114 * C7015;
    const double C47150 = C46842 * C47143;
    const double C47254 = 2 * C47143;
    const double C47248 = ae * C47143;
    const double C47319 = C46991 * C47143;
    const double C47515 = C47143 * C47091;
    const double C47622 = C46991 * C47621;
    const double C131 = (3 * (C46901 + C46907 * C46860) +
                         C46848 * (2 * C46909 + C46848 * C46920)) /
                        C46789;
    const double C315 =
        (C46901 + C46907 * C46860 + C46842 * (C46842 * C46920 + C46915 * ae) +
         C46842 * C46915 * ae) /
        C46789;
    const double C317 = (C46842 * (2 * C46909 + C46848 * C46920) +
                         (2 * C46904 + C46848 * C46915) * ae) /
                        C46789;
    const double C510 = (C46901 + C46907 * C46860 + C46920 * C47091) / C46789;
    const double C512 = (C46991 * (2 * C46909 + C46848 * C46920)) / C46789;
    const double C953 = (C46991 * (C46842 * C46920 + C46915 * ae)) / C46789;
    const double C2031 =
        (2 * C46991 * C46920 + C46991 * (C46920 + C46940 * C47091)) / C46789;
    const double C47012 = C47009 + C47010;
    const double C2325 = C113 * C2033;
    const double C7368 = C4787 * C2033;
    const double C18708 = C16159 * C2033;
    const double C12618 = C113 * C2039;
    const double C47039 = C46842 * C47035;
    const double C47138 = 2 * C47035;
    const double C47128 = be * C47035;
    const double C2434 =
        (2 * C46991 * C47020 + C46991 * (C47020 + C47035 * C47091)) / C46789;
    const double C7018 =
        (3 * (C47020 + C47035 * C47091) +
         C46991 * (2 * C46991 * C47035 + C46991 * (C47035 + C47146 * C47091))) /
        C46789;
    const double C12605 =
        (4 * (2 * C46991 * C46907 + C46991 * C47497) +
         C46991 * (3 * C47497 + C46991 * (2 * C47222 + C46991 * C47311))) /
        C46789;
    const double C130 = (3 * (C46900 + C46906 * C46860) +
                         C46848 * (2 * C46908 + C46848 * C46919)) /
                        C46789;
    const double C314 =
        (C46900 + C46906 * C46860 + C46842 * (C46842 * C46919 + C46915 * be) +
         C46842 * C46915 * be) /
        C46789;
    const double C316 = (C46842 * (2 * C46908 + C46848 * C46919) +
                         (2 * C46904 + C46848 * C46915) * be) /
                        C46789;
    const double C509 = (C46900 + C46906 * C46860 + C46919 * C47091) / C46789;
    const double C511 = (C46991 * (2 * C46908 + C46848 * C46919)) / C46789;
    const double C952 = (C46991 * (C46842 * C46919 + C46915 * be)) / C46789;
    const double C2030 =
        (2 * C46991 * C46919 + C46991 * (C46919 + C46938 * C47091)) / C46789;
    const double C47011 = C47006 + C47007;
    const double C47054 = C47045 + C47046;
    const double C2323 = C113 * C2032;
    const double C7366 = C4787 * C2032;
    const double C18706 = C16159 * C2032;
    const double C12616 = C113 * C2038;
    const double C47038 = C46842 * C47032;
    const double C47132 = 2 * C47032;
    const double C47127 = ae * C47032;
    const double C1335 =
        (C46855 + C46864 * C47091 + ae * (C47019 + C47032 * C47091) +
         be * (C47020 + C47035 * C47091) +
         C46842 * (ae * (C46906 + C46914 * C47091) +
                   be * (C46907 + C46916 * C47091) +
                   C46842 * (C46864 + C46872 * C47091))) /
        C46815;
    const double C2433 =
        (2 * C46991 * C47019 + C46991 * (C47019 + C47032 * C47091)) / C46789;
    const double C7017 =
        (3 * (C47019 + C47032 * C47091) +
         C46991 * (2 * C46991 * C47032 + C46991 * (C47032 + C47143 * C47091))) /
        C46789;
    const double C47227 = C47224 + C47225;
    const double C12604 =
        (4 * (2 * C46991 * C46906 + C46991 * C47494) +
         C46991 * (3 * C47494 + C46991 * (2 * C47221 + C46991 * C47310))) /
        C46789;
    const double C12626 = C12620 - C12621;
    const double C46885 = C46884 * C46860;
    const double C47173 = C46848 * C46884;
    const double C47252 = C46842 * C46884;
    const double C47309 = C46884 * C47091;
    const double C47323 = C46991 * C46884;
    const double C46970 = C46848 * C46967;
    const double C47075 = C46842 * C46967;
    const double C2041 =
        (3 * (C46920 + C46940 * C47091) +
         C46991 * (2 * C46991 * C46940 + C46991 * (C46940 + C46967 * C47091))) /
        C46789;
    const double C47194 = C47187 + C47188;
    const double C47279 = C46842 * C47271;
    const double C46968 = C46848 * C46965;
    const double C47071 = C46842 * C46965;
    const double C2040 =
        (3 * (C46919 + C46938 * C47091) +
         C46991 * (2 * C46991 * C46938 + C46991 * (C46938 + C46965 * C47091))) /
        C46789;
    const double C47191 = C47183 + C47184;
    const double C47276 = C46842 * C47268;
    const double C157 = C114 * C119;
    const double C4821 = C4788 * C119;
    const double C16193 = C16160 * C119;
    const double C348 = C114 * C299;
    const double C5023 = C4788 * C299;
    const double C5015 = C4790 * C299;
    const double C16395 = C16160 * C299;
    const double C16387 = C16162 * C299;
    const double C352 = C114 * C300;
    const double C4813 = C4790 * C300;
    const double C5387 = C4788 * C300;
    const double C16185 = C16162 * C300;
    const double C16759 = C16160 * C300;
    const double C543 = C114 * C494;
    const double C5225 = C4788 * C494;
    const double C16597 = C16160 * C494;
    const double C547 = C114 * C495;
    const double C5531 = C4788 * C495;
    const double C16903 = C16160 * C495;
    const double C969 = C114 * C945;
    const double C5217 = C4790 * C945;
    const double C5747 = C4788 * C945;
    const double C16589 = C16162 * C945;
    const double C17119 = C16160 * C945;
    const double C2204 = C114 * C1303;
    const double C5209 = C4790 * C1303;
    const double C7223 = C4788 * C1303;
    const double C16581 = C16162 * C1303;
    const double C18563 = C16160 * C1303;
    const double C11738 = C114 * C1308;
    const double C27209 = C16160 * C1308;
    const double C27193 = C16162 * C1308;
    const double C38291 = C4788 * C1308;
    const double C38275 = C4790 * C1308;
    const double C12221 = C114 * C1722;
    const double C27201 = C16162 * C1722;
    const double C27685 = C16160 * C1722;
    const double C38283 = C4790 * C1722;
    const double C38767 = C4788 * C1722;
    const double C44192 = C114 * C12602;
    const double C46966 = C46958 + C46963;
    const double C47080 = C46932 + C47074;
    const double C47082 = C47073 * ae;
    const double C47079 = C47073 * be;
    const double C47201 = C47193 * ae;
    const double C47199 = C46842 * C47193;
    const double C47198 = C47193 * be;
    const double C47283 = C47259 + C47278;
    const double C46944 = C46933 + C46942;
    const double C12607 =
        (4 * (2 * C46991 * C46927 + C46991 * C47503) +
         C46991 *
             (3 * C47503 +
              C46991 * (2 * C47231 + C46991 * (C46954 + C47179 * C47091)))) /
        C46789;
    const double C47527 = C47525 + C47526;
    const double C46943 = C46929 + C46941;
    const double C47077 = C47068 + C47069;
    const double C47236 = C47233 + C47234;
    const double C12606 =
        (4 * (2 * C46991 * C46923 + C46991 * C47500) +
         C46991 *
             (3 * C47500 +
              C46991 * (2 * C47230 + C46991 * (C46948 + C47175 * C47091)))) /
        C46789;
    const double C47316 = C47313 + C47314;
    const double C47523 = C47521 + C47522;
    const double C47662 = C47661 / C47652;
    const double C47965 = 2 * C47930;
    const double C47671 = C47670 / C47649;
    const double C47969 = C47934 / C47667;
    const double C47996 = C47928 - C47964;
    const double C2648 = -C47964;
    const double C48010 = C47995 + C47659;
    const double C47744 = C47743 / C47652;
    const double C47973 = 2 * C47939;
    const double C47751 = C47750 / C47649;
    const double C47983 = C47948 / C47667;
    const double C48004 = C47942 - C47980;
    const double C2540 = -C47980;
    const double C48013 = C48000 + C47740;
    const double C47786 = C47785 / C47652;
    const double C47976 = 2 * C47941;
    const double C47793 = C47792 / C47649;
    const double C47989 = C47954 / C47667;
    const double C48007 = C47943 - C47986;
    const double C3302 = -C47986;
    const double C48014 = C48002 + C47782;
    const double C46822 = C46821 / C46789;
    const double C4828 = C4808 - C4809;
    const double C4827 = C4804 - C4805;
    const double C4824 = C4792 - C4793;
    const double C5030 = C5010 - C5011;
    const double C5027 = C4998 - C4999;
    const double C5232 = C5212 - C5213;
    const double C5229 = C5200 - C5201;
    const double C37419 = C37412 - C37413;
    const double C37416 = C37400 - C37401;
    const double C37890 = C37882 - C37883;
    const double C39173 = C39166 - C39167;
    const double C39170 = C39154 - C39155;
    const double C4826 = C4800 - C4801;
    const double C4825 = C4796 - C4797;
    const double C37417 = C37404 - C37405;
    const double C16200 = C16180 - C16181;
    const double C16199 = C16176 - C16177;
    const double C16196 = C16164 - C16165;
    const double C16402 = C16382 - C16383;
    const double C16399 = C16370 - C16371;
    const double C16604 = C16584 - C16585;
    const double C16601 = C16572 - C16573;
    const double C26337 = C26330 - C26331;
    const double C26334 = C26318 - C26319;
    const double C26808 = C26800 - C26801;
    const double C28095 = C28088 - C28089;
    const double C28092 = C28076 - C28077;
    const double C16198 = C16172 - C16173;
    const double C16197 = C16168 - C16169;
    const double C26335 = C26322 - C26323;
    const double C169 = C164 - C146;
    const double C10874 = C10872 - C10856;
    const double C155 = C47890 * C139;
    const double C4811 = C4783 * C139;
    const double C16183 = C16155 * C139;
    const double C342 = C47890 * C325;
    const double C4799 = C47992 * C325;
    const double C5001 = C4783 * C325;
    const double C16171 = C47992 * C325;
    const double C16373 = C16155 * C325;
    const double C537 = C47890 * C520;
    const double C5203 = C4783 * C520;
    const double C16575 = C16155 * C520;
    const double C10863 = C47890 * C522;
    const double C26333 = C16155 * C522;
    const double C37415 = C4783 * C522;
    const double C11339 = C47890 * C958;
    const double C26325 = C47992 * C958;
    const double C26803 = C16155 * C958;
    const double C37407 = C47992 * C958;
    const double C37885 = C4783 * C958;
    const double C361 = C343 - C344;
    const double C5028 = C5002 - C5003;
    const double C5026 = C4994 - C4995;
    const double C16400 = C16374 - C16375;
    const double C16398 = C16366 - C16367;
    const double C556 = C538 - C539;
    const double C5230 = C5204 - C5205;
    const double C16602 = C16576 - C16577;
    const double C976 = C964 - C965;
    const double C5228 = C5196 - C5197;
    const double C5750 = C5734 - C5735;
    const double C16600 = C16568 - C16569;
    const double C17122 = C17106 - C17107;
    const double C11725 = C113 * C1316;
    const double C26328 = C16161 * C1316;
    const double C27190 = C16159 * C1316;
    const double C37410 = C4789 * C1316;
    const double C38272 = C4787 * C1316;
    const double C11730 = C113 * C1322;
    const double C26806 = C16161 * C1322;
    const double C27198 = C16159 * C1322;
    const double C37888 = C4789 * C1322;
    const double C38280 = C4787 * C1322;
    const double C11723 = C113 * C1315;
    const double C26326 = C16161 * C1315;
    const double C27188 = C16159 * C1315;
    const double C37408 = C4789 * C1315;
    const double C38270 = C4787 * C1315;
    const double C11728 = C113 * C1321;
    const double C26804 = C16161 * C1321;
    const double C27196 = C16159 * C1321;
    const double C37886 = C4789 * C1321;
    const double C38278 = C4787 * C1321;
    const double C170 = C165 - C150;
    const double C171 = C166 - C154;
    const double C365 = C359 - C337;
    const double C366 = C360 - C341;
    const double C560 = C554 - C532;
    const double C561 = C555 - C536;
    const double C10875 = C10873 - C10862;
    const double C11346 = C11345 - C11338;
    const double C12627 = C12624 - C12613;
    const double C47037 = C47031 + C47024;
    const double C2045 =
        (3 * (C46855 + C46864 * C47091) +
         C46991 * (2 * C47110 + C46991 * (C46864 + C46872 * C47091))) /
        C46815;
    const double C2439 =
        (ae * (2 * C46991 * C46906 + C46991 * (C46906 + C46914 * C47091)) +
         be * (2 * C46991 * C46907 + C46991 * (C46907 + C46916 * C47091)) +
         C46842 * (2 * C47110 + C46991 * (C46864 + C46872 * C47091))) /
        C46815;
    const double C159 = C47890 * C140;
    const double C4823 = C4783 * C140;
    const double C16195 = C16155 * C140;
    const double C338 = C47890 * C324;
    const double C4803 = C47992 * C324;
    const double C5013 = C4783 * C324;
    const double C16175 = C47992 * C324;
    const double C16385 = C16155 * C324;
    const double C346 = C47890 * C328;
    const double C5005 = C4783 * C328;
    const double C4997 = C47992 * C328;
    const double C16377 = C16155 * C328;
    const double C16369 = C47992 * C328;
    const double C533 = C47890 * C519;
    const double C5215 = C4783 * C519;
    const double C16587 = C16155 * C519;
    const double C541 = C47890 * C523;
    const double C5207 = C4783 * C523;
    const double C16579 = C16155 * C523;
    const double C967 = C47890 * C959;
    const double C5199 = C47992 * C959;
    const double C5737 = C4783 * C959;
    const double C16571 = C47992 * C959;
    const double C17109 = C16155 * C959;
    const double C11726 = C47890 * C1331;
    const double C26329 = C47992 * C1331;
    const double C27191 = C16155 * C1331;
    const double C37411 = C47992 * C1331;
    const double C38273 = C4783 * C1331;
    const double C11731 = C47890 * C1334;
    const double C26807 = C47992 * C1334;
    const double C27199 = C16155 * C1334;
    const double C37889 = C47992 * C1334;
    const double C38281 = C4783 * C1334;
    const double C12614 = C47890 * C2044;
    const double C28079 = C16155 * C2044;
    const double C39157 = C4783 * C2044;
    const double C46874 = C46864 + C46873;
    const double C46880 = 2 * C46876;
    const double C47047 = C46842 * C46876;
    const double C47112 = C46991 * C46876;
    const double C1330 =
        (ae * (C46908 + C46923 * C47091) + be * (C46909 + C46927 * C47091) +
         C46842 * (C47005 + C46876 * C47091)) /
        C46815;
    const double C2043 =
        (2 * C46991 * C47005 + C46991 * (C47005 + C46876 * C47091)) / C46815;
    const double C47149 = C47142 + C47131;
    const double C47216 = C46864 + C47215;
    const double C47226 = C46842 * C47223;
    const double C47337 = 2 * C47223;
    const double C46939 = C46931 + C46936;
    const double C47003 = C47000 + C47001;
    const double C1302 = C46842 * C46915 + C46999 * C47091;
    const double C2432 =
        2 * C46991 * C46999 + C46991 * (C46999 + C47073 * C47091);
    const double C47002 = C46997 + C46998;
    const double C1448 = C114 * C1168;
    const double C5019 = C4790 * C1168;
    const double C16391 = C16162 * C1168;
    const double C1612 = C114 * C1305;
    const double C5743 = C4790 * C1305;
    const double C17115 = C16162 * C1305;
    const double C2320 = C114 * C2024;
    const double C47062 = C46842 * C47058;
    const double C47178 = 2 * C47058;
    const double C47170 = be * C47058;
    const double C1172 = 3 * (C46904 + C46925 * C46845) +
                         C46842 * (2 * C47008 + C46842 * C47057);
    const double C1309 = C46904 + C46925 * C46845 + C47057 * C47091;
    const double C1723 = C46991 * (2 * C47008 + C46842 * C47057);
    const double C7506 =
        2 * C46991 * C47057 + C46991 * (C47057 + C47193 * C47091);
    const double C7363 = C4790 * C2431;
    const double C12831 = C114 * C2431;
    const double C18703 = C16162 * C2431;
    const double C47061 = C46842 * C47055;
    const double C47174 = 2 * C47055;
    const double C47169 = ae * C47055;
    const double C12603 =
        4 * (2 * C46991 * C46925 + C46991 * C47608) +
        C46991 * (3 * C47608 + C46991 * (2 * C46991 * C46951 +
                                         C46991 * (C46951 + C47176 * C47091)));
    const double C47158 = C46916 + C47153;
    const double C47325 = be * C47320;
    const double C47519 = C47035 + C47518;
    const double C47157 = C47137 + C47152;
    const double C28559 = C16162 * C7505;
    const double C39637 = C4790 * C7505;
    const double C43544 = C114 * C7505;
    const double C28071 =
        4 * (2 * C46991 * C47027 + C46991 * C47616) +
        C46991 * (3 * C47616 + C46991 * (2 * C46991 * C47135 +
                                         C46991 * (C47135 + C47257 * C47091)));
    const double C47156 = C46914 + C47150;
    const double C47266 = C46872 + C47248;
    const double C47324 = ae * C47319;
    const double C47516 = C47032 + C47515;
    const double C47623 = C47620 + C47622;
    const double C158 = C113 * C131;
    const double C4822 = C4787 * C131;
    const double C16194 = C16159 * C131;
    const double C349 = C113 * C315;
    const double C5024 = C4787 * C315;
    const double C5016 = C4789 * C315;
    const double C16396 = C16159 * C315;
    const double C16388 = C16161 * C315;
    const double C353 = C113 * C317;
    const double C4814 = C4789 * C317;
    const double C5388 = C4787 * C317;
    const double C16186 = C16161 * C317;
    const double C16760 = C16159 * C317;
    const double C544 = C113 * C510;
    const double C5226 = C4787 * C510;
    const double C16598 = C16159 * C510;
    const double C548 = C113 * C512;
    const double C5532 = C4787 * C512;
    const double C16904 = C16159 * C512;
    const double C970 = C113 * C953;
    const double C5218 = C4789 * C953;
    const double C5748 = C4787 * C953;
    const double C16590 = C16161 * C953;
    const double C17120 = C16159 * C953;
    const double C2321 = C113 * C2031;
    const double C1177 = (2 * (C46842 * C46909 + C46904 * ae) +
                          C46842 * (C46909 + C46842 * C47012 + C47008 * ae) +
                          (C46904 + C46925 * C46845) * ae) /
                         C46789;
    const double C1314 =
        (C46842 * C46909 + C46904 * ae + C47012 * C47091) / C46789;
    const double C1320 =
        (C46991 * (C46909 + C46842 * C47012 + C47008 * ae)) / C46789;
    const double C2436 =
        (2 * C46991 * C47012 + C46991 * (C47012 + C47058 * C47091)) / C46789;
    const double C47041 = C46907 + C47039;
    const double C13104 = C113 * C2434;
    const double C28082 = C16161 * C2434;
    const double C28564 = C16159 * C2434;
    const double C39160 = C4789 * C2434;
    const double C39642 = C4787 * C2434;
    const double C28086 = C16161 * C7018;
    const double C39164 = C4789 * C7018;
    const double C44545 = C113 * C7018;
    const double C44193 = C113 * C12605;
    const double C156 = C113 * C130;
    const double C4820 = C4787 * C130;
    const double C16192 = C16159 * C130;
    const double C347 = C113 * C314;
    const double C5022 = C4787 * C314;
    const double C5014 = C4789 * C314;
    const double C16394 = C16159 * C314;
    const double C16386 = C16161 * C314;
    const double C351 = C113 * C316;
    const double C4812 = C4789 * C316;
    const double C5386 = C4787 * C316;
    const double C16184 = C16161 * C316;
    const double C16758 = C16159 * C316;
    const double C542 = C113 * C509;
    const double C5224 = C4787 * C509;
    const double C16596 = C16159 * C509;
    const double C546 = C113 * C511;
    const double C5530 = C4787 * C511;
    const double C16902 = C16159 * C511;
    const double C968 = C113 * C952;
    const double C5216 = C4789 * C952;
    const double C5746 = C4787 * C952;
    const double C16588 = C16161 * C952;
    const double C17118 = C16159 * C952;
    const double C2319 = C113 * C2030;
    const double C1187 =
        (2 * (ae * C46908 + be * C46909 + C46842 * C47005) +
         ae * (C46908 + C46842 * C47011 + C47008 * be) +
         be * (C46909 + C46842 * C47012 + C47008 * ae) +
         C46842 * (C47005 + ae * C47011 + be * C47012 +
                   C46842 * (ae * C46923 + be * C46927 + C46842 * C46876))) /
        C46815;
    const double C1333 =
        (C46991 * C47005 + ae * C46991 * C47011 + be * C46991 * C47012 +
         C46842 * (ae * C46991 * C46923 + be * C46991 * C46927 +
                   C46842 * C46991 * C46876)) /
        C46815;
    const double C1336 =
        (C47005 + C46876 * C47091 + ae * (C47011 + C47055 * C47091) +
         be * (C47012 + C47058 * C47091) +
         C46842 * (ae * (C46923 + C46948 * C47091) +
                   be * (C46927 + C46954 * C47091) +
                   C46842 * (C46876 + C46848 * C46884 * C47091))) /
        C46815;
    const double C1176 = (2 * (C46842 * C46908 + C46904 * be) +
                          C46842 * (C46908 + C46842 * C47011 + C47008 * be) +
                          (C46904 + C46925 * C46845) * be) /
                         C46789;
    const double C1313 =
        (C46842 * C46908 + C46904 * be + C47011 * C47091) / C46789;
    const double C1319 =
        (C46991 * (C46908 + C46842 * C47011 + C47008 * be)) / C46789;
    const double C2435 =
        (2 * C46991 * C47011 + C46991 * (C47011 + C47055 * C47091)) / C46789;
    const double C2328 = C2323 - C2324;
    const double C7371 = C7366 - C7367;
    const double C18711 = C18706 - C18707;
    const double C12625 = C12616 - C12617;
    const double C47040 = C46906 + C47038;
    const double C47141 = C46864 + C47127;
    const double C11740 = C47890 * C1335;
    const double C27211 = C16155 * C1335;
    const double C27195 = C47992 * C1335;
    const double C38293 = C4783 * C1335;
    const double C38277 = C47992 * C1335;
    const double C13102 = C113 * C2433;
    const double C28080 = C16161 * C2433;
    const double C28562 = C16159 * C2433;
    const double C39158 = C4789 * C2433;
    const double C39640 = C4787 * C2433;
    const double C28084 = C16161 * C7017;
    const double C39162 = C4789 * C7017;
    const double C44543 = C113 * C7017;
    const double C44191 = C113 * C12604;
    const double C12629 = C12626 - C12622;
    const double C46886 = C46872 + C46885;
    const double C47182 = C46842 * C47173;
    const double C47218 = C47173 * C47091;
    const double C47232 = C46991 * C47173;
    const double C47275 = C47267 + C47252;
    const double C47312 = C46872 + C47309;
    const double C47328 = C46842 * C47323;
    const double C46973 = C46960 + C46970;
    const double C47081 = C47075 + C47076;
    const double C47200 = C46842 * C47194;
    const double C7020 =
        (3 * (C47012 + C47058 * C47091) +
         C46991 * (2 * C46991 * C47058 + C46991 * (C47058 + C47194 * C47091))) /
        C46789;
    const double C47284 = C46934 + C47279;
    const double C46971 = C46956 + C46968;
    const double C47078 = C47071 + C47072;
    const double C47197 = C46842 * C47191;
    const double C7019 =
        (3 * (C47011 + C47055 * C47091) +
         C46991 * (2 * C46991 * C47055 + C46991 * (C47055 + C47191 * C47091))) /
        C46789;
    const double C47282 = C46930 + C47276;
    const double C46969 = C46848 * C46966;
    const double C47105 = C46966 * ae;
    const double C47103 = C46842 * C46966;
    const double C47102 = C46966 * be;
    const double C1173 = 3 * (C46915 + C46932 * C46845) +
                         C46842 * (2 * C46999 + C46842 * C47080);
    const double C1310 = C46915 + C46932 * C46845 + C47080 * C47091;
    const double C1724 = C46991 * (2 * C46999 + C46842 * C47080);
    const double C47204 = C47177 + C47199;
    const double C47290 = C47283 * ae;
    const double C47288 = C46842 * C47283;
    const double C47287 = C47283 * be;
    const double C133 = (4 * (2 * C46909 + C46848 * C46920) +
                         C46848 * (3 * C46920 + C46848 * C46944)) /
                        C46789;
    const double C514 =
        (2 * C46909 + C46848 * C46920 + C46944 * C47091) / C46789;
    const double C516 = (C46991 * (3 * C46920 + C46848 * C46944)) / C46789;
    const double C44187 =
        (5 * (3 * C47497 + C46991 * C47527) +
         C46991 * (4 * C47527 +
                   C46991 * (3 * C47311 +
                             C46991 * (2 * C47322 +
                                       C46991 * (C46934 + C46961 * C47091))))) /
        C46789;
    const double C132 = (4 * (2 * C46908 + C46848 * C46919) +
                         C46848 * (3 * C46919 + C46848 * C46943)) /
                        C46789;
    const double C513 =
        (2 * C46908 + C46848 * C46919 + C46943 * C47091) / C46789;
    const double C515 = (C46991 * (3 * C46919 + C46848 * C46943)) / C46789;
    const double C44186 =
        (5 * (3 * C47494 + C46991 * C47523) +
         C46991 * (4 * C47523 +
                   C46991 * (3 * C47310 +
                             C46991 * (2 * C47321 +
                                       C46991 * (C46930 + C46957 * C47091))))) /
        C46789;
    const double C47663 = C47659 - C47662;
    const double C47997 = C47965 / C47649;
    const double C47672 = C47668 - C47671;
    const double C48011 = C47996 / C47653;
    const double C47745 = C47740 - C47744;
    const double C48001 = C47973 / C47649;
    const double C47752 = C47748 - C47751;
    const double C48015 = C48004 / C47653;
    const double C47787 = C47782 - C47786;
    const double C48003 = C47976 / C47649;
    const double C47794 = C47790 - C47793;
    const double C48017 = C48007 / C47653;
    const double C46823 = C47890 - C46822;
    const double C4836 = C4828 - C4810;
    const double C4835 = C4827 - C4806;
    const double C4832 = C4824 - C4794;
    const double C5038 = C5030 - C5012;
    const double C5035 = C5027 - C5000;
    const double C5240 = C5232 - C5214;
    const double C5237 = C5229 - C5202;
    const double C37423 = C37419 - C37414;
    const double C37420 = C37416 - C37402;
    const double C37892 = C37890 - C37884;
    const double C39177 = C39173 - C39168;
    const double C39174 = C39170 - C39156;
    const double C4834 = C4826 - C4802;
    const double C4833 = C4825 - C4798;
    const double C37421 = C37417 - C37406;
    const double C16208 = C16200 - C16182;
    const double C16207 = C16199 - C16178;
    const double C16204 = C16196 - C16166;
    const double C16410 = C16402 - C16384;
    const double C16407 = C16399 - C16372;
    const double C16612 = C16604 - C16586;
    const double C16609 = C16601 - C16574;
    const double C26341 = C26337 - C26332;
    const double C26338 = C26334 - C26320;
    const double C26810 = C26808 - C26802;
    const double C28099 = C28095 - C28090;
    const double C28096 = C28092 - C28078;
    const double C16206 = C16198 - C16174;
    const double C16205 = C16197 - C16170;
    const double C26339 = C26335 - C26324;
    const double C174 = C169 + C147;
    const double C10876 = C10874 + C10857;
    const double C367 = C361 - C345;
    const double C5036 = C5028 - C5004;
    const double C5034 = C5026 - C4996;
    const double C16408 = C16400 - C16376;
    const double C16406 = C16398 - C16368;
    const double C562 = C556 - C540;
    const double C5238 = C5230 - C5206;
    const double C16610 = C16602 - C16578;
    const double C979 = C976 - C966;
    const double C5236 = C5228 - C5198;
    const double C5754 = C5750 - C5736;
    const double C16608 = C16600 - C16570;
    const double C17126 = C17122 - C17108;
    const double C11741 = C11723 - C11724;
    const double C26336 = C26326 - C26327;
    const double C27212 = C27188 - C27189;
    const double C37418 = C37408 - C37409;
    const double C38294 = C38270 - C38271;
    const double C11742 = C11728 - C11729;
    const double C26809 = C26804 - C26805;
    const double C27214 = C27196 - C27197;
    const double C37891 = C37886 - C37887;
    const double C38296 = C38278 - C38279;
    const double C175 = C170 + C151;
    const double C176 = C171 + C155;
    const double C372 = C366 + C342;
    const double C567 = C561 + C537;
    const double C10877 = C10875 + C10863;
    const double C11347 = C11346 + C11339;
    const double C12623 = C47890 * C2045;
    const double C28091 = C16155 * C2045;
    const double C39169 = C4783 * C2045;
    const double C13105 = C47890 * C2439;
    const double C28083 = C47992 * C2439;
    const double C28565 = C16155 * C2439;
    const double C39161 = C47992 * C2439;
    const double C39643 = C4783 * C2439;
    const double C371 = C365 + C338;
    const double C566 = C560 + C533;
    const double C12630 = C12627 + C12614;
    const double C141 =
        (4 * (2 * C46848 * C46864 + C46848 * C46874) +
         C46848 * (3 * C46874 +
                   C46848 * (2 * C46848 * C46872 +
                             C46848 * (C46872 +
                                       (C46867 * C46868 +
                                        C46845 * bs[7] * std::pow(C46844, 7)) *
                                           C46788 * C46860)))) /
        C46815;
    const double C329 =
        (C46855 + C46864 * C46860 + ae * (C46842 * C46919 + C46915 * be) +
         be * (C46842 * C46920 + C46915 * ae) +
         C46842 * (ae * C46919 + be * C46920 + C46842 * C46874)) /
        C46815;
    const double C330 = (ae * (2 * C46908 + C46848 * C46919) +
                         be * (2 * C46909 + C46848 * C46920) +
                         C46842 * (2 * C46848 * C46864 + C46848 * C46874)) /
                        C46815;
    const double C524 =
        (C46855 + C46864 * C46860 + C46874 * std::pow(zP - zQ, 2)) / C46815;
    const double C525 =
        ((zP - zQ) * (2 * C46848 * C46864 + C46848 * C46874)) / C46815;
    const double C960 = (ae * C46991 * C46919 + be * C46991 * C46920 +
                         C46842 * C46991 * C46874) /
                        C46815;
    const double C47060 = C47054 + C47047;
    const double C2046 =
        (3 * (C47005 + C46876 * C47091) +
         C46991 * (2 * C47112 + C46991 * (C46876 + C46848 * C46884 * C47091))) /
        C46815;
    const double C2440 =
        (ae * (2 * C46991 * C46923 + C46991 * (C46923 + C46948 * C47091)) +
         be * (2 * C46991 * C46927 + C46991 * (C46927 + C46954 * C47091)) +
         C46842 * (2 * C47112 + C46991 * (C46876 + C46848 * C46884 * C47091))) /
        C46815;
    const double C2206 = C47890 * C1330;
    const double C5211 = C47992 * C1330;
    const double C7225 = C4783 * C1330;
    const double C16583 = C47992 * C1330;
    const double C18565 = C16155 * C1330;
    const double C2326 = C47890 * C2043;
    const double C7369 = C4783 * C2043;
    const double C18709 = C16155 * C2043;
    const double C47155 = C46842 * C47149;
    const double C47245 = 2 * C47149;
    const double C7021 =
        (ae * (3 * (C46906 + C46914 * C47091) +
               C46991 * (2 * C47221 + C46991 * (C46914 + C46930 * C47091))) +
         be * (3 * (C46907 + C46916 * C47091) +
               C46991 * (2 * C47222 + C46991 * (C46916 + C46934 * C47091))) +
         C46842 *
             (3 * C47216 +
              C46991 * (2 * C47223 + C46991 * (C46872 + C46884 * C47091)))) /
        C46815;
    const double C7511 =
        (2 * C47110 + C46991 * C47216 +
         ae * (2 * C46991 * C47032 + C46991 * (C47032 + C47143 * C47091)) +
         be * (2 * C46991 * C47035 + C46991 * (C47035 + C47146 * C47091)) +
         C46842 *
             (ae * (2 * C47221 + C46991 * (C46914 + C46930 * C47091)) +
              be * (2 * C47222 + C46991 * (C46916 + C46934 * C47091)) +
              C46842 * (2 * C47223 + C46991 * (C46872 + C46884 * C47091)))) /
        C46815;
    const double C12608 =
        (4 * (2 * C47110 + C46991 * C47216) +
         C46991 *
             (3 * C47216 +
              C46991 * (2 * C47223 + C46991 * (C46872 + C46884 * C47091)))) /
        C46815;
    const double C47228 = C47227 + C47226;
    const double C318 =
        (2 * C46908 + C46848 * C46919 +
         C46842 * (C46842 * C46943 + C46939 * be) + C46842 * C46939 * be) /
        C46789;
    const double C319 =
        (2 * C46909 + C46848 * C46920 +
         C46842 * (C46842 * C46944 + C46939 * ae) + C46842 * C46939 * ae) /
        C46789;
    const double C320 = (C46842 * (3 * C46919 + C46848 * C46943) +
                         (3 * C46915 + C46848 * C46939) * be) /
                        C46789;
    const double C321 = (C46842 * (3 * C46920 + C46848 * C46944) +
                         (3 * C46915 + C46848 * C46939) * ae) /
                        C46789;
    const double C954 = (C46991 * (C46842 * C46943 + C46939 * be)) / C46789;
    const double C955 = (C46991 * (C46842 * C46944 + C46939 * ae)) / C46789;
    const double C120 = 4 * (2 * C46904 + C46848 * C46915) +
                        C46848 * (3 * C46915 + C46848 * C46939);
    const double C301 = 2 * C46904 + C46848 * C46915 + C46939 * C46845;
    const double C302 = C46842 * (3 * C46915 + C46848 * C46939);
    const double C496 = 2 * C46904 + C46848 * C46915 + C46939 * C47091;
    const double C497 = C46991 * (3 * C46915 + C46848 * C46939);
    const double C946 = C46991 * C46842 * C46939;
    const double C1442 =
        2 * C46842 * C46939 + C46842 * (C46939 + C46966 * C46845);
    const double C1606 = C46991 * (C46939 + C46966 * C46845);
    const double C2314 =
        2 * C46991 * C46939 + C46991 * (C46939 + C46966 * C47091);
    const double C1175 = (2 * (C46842 * C46920 + C46915 * ae) +
                          C46842 * (C46920 + C46842 * C47003 + C46999 * ae) +
                          (C46915 + C46932 * C46845) * ae) /
                         C46789;
    const double C1312 =
        (C46842 * C46920 + C46915 * ae + C47003 * C47091) / C46789;
    const double C1318 =
        (C46991 * (C46920 + C46842 * C47003 + C46999 * ae)) / C46789;
    const double C2200 = C114 * C1302;
    const double C5221 = C4790 * C1302;
    const double C16593 = C16162 * C1302;
    const double C1174 = (2 * (C46842 * C46919 + C46915 * be) +
                          C46842 * (C46919 + C46842 * C47002 + C46999 * be) +
                          (C46915 + C46932 * C46845) * be) /
                         C46789;
    const double C1311 =
        (C46842 * C46919 + C46915 * be + C47002 * C47091) / C46789;
    const double C1317 =
        (C46991 * (C46919 + C46842 * C47002 + C46999 * be)) / C46789;
    const double C47064 = C46927 + C47062;
    const double C6283 = C4790 * C1172;
    const double C17639 = C16162 * C1172;
    const double C7219 = C4790 * C1309;
    const double C11734 = C114 * C1309;
    const double C18559 = C16162 * C1309;
    const double C6491 = C4790 * C1723;
    const double C11888 = C114 * C1723;
    const double C17847 = C16162 * C1723;
    const double C47063 = C46923 + C47061;
    const double C47180 = C46876 + C47169;
    const double C47161 = C47158 + C47147;
    const double C28073 =
        (4 * (2 * C46991 * C47035 + C46991 * C47519) +
         C46991 *
             (3 * C47519 +
              C46991 * (2 * C47320 + C46991 * (C47146 + C47271 * C47091)))) /
        C46789;
    const double C5989 = 4 * (2 * C47016 + C46842 * C47034) +
                         C46842 * (3 * C47034 + C46842 * C47157);
    const double C6143 = 2 * C47016 + C46842 * C47034 + C47157 * C47091;
    const double C6633 = C46991 * (3 * C47034 + C46842 * C47157);
    const double C23707 =
        2 * C46991 * C47157 + C46991 * (C47157 + C47283 * C47091);
    const double C47160 = C47156 + C47144;
    const double C47274 = C47266 + C47249;
    const double C47329 = C47223 + C47324;
    const double C28072 =
        (4 * (2 * C46991 * C47032 + C46991 * C47516) +
         C46991 *
             (3 * C47516 +
              C46991 * (2 * C47319 + C46991 * (C47143 + C47268 * C47091)))) /
        C46789;
    const double C44185 =
        5 * (3 * C47605 + C46991 * C47623) +
        C46991 * (4 * C47623 +
                  C46991 * (3 * C47621 +
                            C46991 * (2 * C46991 * C46866 +
                                      C46991 * (C46866 + C46877 * C47091))));
    const double C1453 = C113 * C1177;
    const double C5008 = C4789 * C1177;
    const double C6288 = C4787 * C1177;
    const double C16380 = C16161 * C1177;
    const double C17644 = C16159 * C1177;
    const double C2205 = C113 * C1314;
    const double C5210 = C4789 * C1314;
    const double C7224 = C4787 * C1314;
    const double C16582 = C16161 * C1314;
    const double C18564 = C16159 * C1314;
    const double C1617 = C113 * C1320;
    const double C5740 = C4789 * C1320;
    const double C6496 = C4787 * C1320;
    const double C17112 = C16161 * C1320;
    const double C17852 = C16159 * C1320;
    const double C7364 = C4789 * C2436;
    const double C12832 = C113 * C2436;
    const double C18704 = C16161 * C2436;
    const double C47043 = C47041 + C47036;
    const double C167 = C156 - C157;
    const double C4831 = C4820 - C4821;
    const double C16203 = C16192 - C16193;
    const double C362 = C347 - C348;
    const double C5033 = C5022 - C5023;
    const double C5031 = C5014 - C5015;
    const double C16405 = C16394 - C16395;
    const double C16403 = C16386 - C16387;
    const double C363 = C351 - C352;
    const double C4829 = C4812 - C4813;
    const double C5391 = C5386 - C5387;
    const double C16201 = C16184 - C16185;
    const double C16763 = C16758 - C16759;
    const double C557 = C542 - C543;
    const double C5235 = C5224 - C5225;
    const double C16607 = C16596 - C16597;
    const double C558 = C546 - C547;
    const double C5535 = C5530 - C5531;
    const double C16907 = C16902 - C16903;
    const double C977 = C968 - C969;
    const double C5233 = C5216 - C5217;
    const double C5753 = C5746 - C5747;
    const double C16605 = C16588 - C16589;
    const double C17125 = C17118 - C17119;
    const double C2327 = C2319 - C2320;
    const double C1454 = C47890 * C1187;
    const double C5009 = C47992 * C1187;
    const double C6289 = C4783 * C1187;
    const double C16381 = C47992 * C1187;
    const double C17645 = C16155 * C1187;
    const double C1618 = C47890 * C1333;
    const double C5741 = C47992 * C1333;
    const double C6497 = C4783 * C1333;
    const double C17113 = C47992 * C1333;
    const double C17853 = C16155 * C1333;
    const double C7221 = C47992 * C1336;
    const double C11736 = C47890 * C1336;
    const double C18561 = C47992 * C1336;
    const double C1451 = C113 * C1176;
    const double C5006 = C4789 * C1176;
    const double C6286 = C4787 * C1176;
    const double C16378 = C16161 * C1176;
    const double C17642 = C16159 * C1176;
    const double C2203 = C113 * C1313;
    const double C5208 = C4789 * C1313;
    const double C7222 = C4787 * C1313;
    const double C16580 = C16161 * C1313;
    const double C18562 = C16159 * C1313;
    const double C1615 = C113 * C1319;
    const double C5738 = C4789 * C1319;
    const double C6494 = C4787 * C1319;
    const double C17110 = C16161 * C1319;
    const double C17850 = C16159 * C1319;
    const double C7362 = C4789 * C2435;
    const double C12830 = C113 * C2435;
    const double C18702 = C16161 * C2435;
    const double C2330 = C2328 - C2325;
    const double C7373 = C7371 - C7368;
    const double C18713 = C18711 - C18708;
    const double C12628 = C12625 - C12618;
    const double C47042 = C47040 + C47033;
    const double C47148 = C47141 + C47128;
    const double C13106 = C13102 - C13103;
    const double C28093 = C28080 - C28081;
    const double C28567 = C28562 - C28563;
    const double C39171 = C39158 - C39159;
    const double C39645 = C39640 - C39641;
    const double C28094 = C28084 - C28085;
    const double C39172 = C39162 - C39163;
    const double C44547 = C44543 - C44544;
    const double C44195 = C44191 - C44192;
    const double C46887 = C46848 * C46886;
    const double C47070 = C46842 * C46886;
    const double C47114 = C46991 * C46886;
    const double C1186 =
        (2 * (ae * C46919 + be * C46920 + C46842 * C46874) +
         ae * (C46919 + C46842 * C47002 + C46999 * be) +
         be * (C46920 + C46842 * C47003 + C46999 * ae) +
         C46842 * (C46874 + ae * C47002 + be * C47003 +
                   C46842 * (ae * C46938 + be * C46940 + C46842 * C46886))) /
        C46815;
    const double C1329 =
        (ae * (C46919 + C46938 * C47091) + be * (C46920 + C46940 * C47091) +
         C46842 * (C46874 + C46886 * C47091)) /
        C46815;
    const double C1332 =
        (C46991 * C46874 + ae * C46991 * C47002 + be * C46991 * C47003 +
         C46842 * (ae * C46991 * C46938 + be * C46991 * C46940 +
                   C46842 * C46991 * C46886)) /
        C46815;
    const double C2042 =
        (2 * C46991 * C46874 + C46991 * (C46874 + C46886 * C47091)) / C46815;
    const double C47190 = C47181 + C47182;
    const double C47219 = C46876 + C47218;
    const double C47235 = C46842 * C47232;
    const double C47281 = C46842 * C47275;
    const double C47315 = C46842 * C47312;
    const double C47338 = C46991 * C47312;
    const double C23364 =
        (3 * C47216 + C46991 * (2 * C47223 + C46991 * C47312) +
         ae * (3 * (C47032 + C47143 * C47091) +
               C46991 * (2 * C47319 + C46991 * (C47143 + C47268 * C47091))) +
         be * (3 * (C47035 + C47146 * C47091) +
               C46991 * (2 * C47320 + C46991 * (C47146 + C47271 * C47091))) +
         C46842 *
             (ae * (3 * C47310 +
                    C46991 *
                        (2 * C47321 + C46991 * (C46930 + C46957 * C47091))) +
              be * (3 * C47311 +
                    C46991 *
                        (2 * C47322 + C46991 * (C46934 + C46961 * C47091))) +
              C46842 * (3 * C47312 +
                        C46991 * (2 * C47323 +
                                  C46991 * (C46884 + (C46878 * C46879 +
                                                      C46845 * bs[8] *
                                                          std::pow(C46840, 8)) *
                                                         C46788 * C47091))))) /
        C46815;
    const double C47332 = C47330 + C47328;
    const double C46975 = C46848 * C46973;
    const double C47104 = C46842 * C46973;
    const double C2316 =
        (2 * C46991 * C46944 + C46991 * (C46944 + C46973 * C47091)) / C46789;
    const double C47085 = C46842 * C47081;
    const double C2438 =
        (2 * C46991 * C47003 + C46991 * (C47003 + C47081 * C47091)) / C46789;
    const double C47205 = C46954 + C47200;
    const double C47289 = C47284 + C47272;
    const double C46974 = C46848 * C46971;
    const double C47101 = C46842 * C46971;
    const double C2315 =
        (2 * C46991 * C46943 + C46991 * (C46943 + C46971 * C47091)) / C46789;
    const double C47084 = C46842 * C47078;
    const double C1337 =
        (C46874 + C46886 * C47091 + ae * (C47002 + C47078 * C47091) +
         be * (C47003 + C47081 * C47091) +
         C46842 * (ae * (C46938 + C46965 * C47091) +
                   be * (C46940 + C46967 * C47091) +
                   C46842 * (C46886 +
                             (C46884 + (C46878 * C46879 +
                                        C46845 * bs[8] * std::pow(C46840, 8)) *
                                           C46788 * C46860) *
                                 C47091))) /
        C46815;
    const double C2437 =
        (2 * C46991 * C47002 + C46991 * (C47002 + C47078 * C47091)) / C46789;
    const double C47203 = C46948 + C47197;
    const double C47286 = C47282 + C47269;
    const double C46972 = C46950 + C46969;
    const double C2194 = C46842 * C46939 + C47103 * C47091;
    const double C5990 = 4 * (2 * C47008 + C46842 * C47057) +
                         C46842 * (3 * C47057 + C46842 * C47204);
    const double C6144 = 2 * C47008 + C46842 * C47057 + C47204 * C47091;
    const double C6634 = C46991 * (3 * C47057 + C46842 * C47204);
    const double C47293 = C47260 + C47288;
    const double C162 = C113 * C133;
    const double C552 = C113 * C514;
    const double C793 = C113 * C516;
    const double C160 = C113 * C132;
    const double C550 = C113 * C513;
    const double C791 = C113 * C515;
    const double C47927 = C47663 * C47651;
    const double C47967 = C47932 + C47663;
    const double C47935 = C47672 / C47653;
    const double C47931 = C47672 * C47651;
    const double C671 = C48011 - (C47663 * C47654) / C47649;
    const double C47945 = C47745 * C47739;
    const double C47982 = C47947 + C47745;
    const double C47949 = C47752 / C47653;
    const double C47946 = C47752 * C47739;
    const double C1436 = C48015 - (C47745 * C47741) / C47649;
    const double C47951 = C47787 * C47781;
    const double C47988 = C47953 + C47787;
    const double C47955 = C47794 / C47653;
    const double C47952 = C47794 * C47781;
    const double C2310 = C48017 - (C47787 * C47783) / C47649;
    const double C46824 = C46823 * C46820;
    const double C21877 =
        ((C46823 * ae) / C46789 - C46814 / C46816) / (2 * C46789) -
        ((C46787 * ((0 * ae) / C46789 - C46796 / C46815) + C47992) * be) /
            C46789;
    const double C4844 = C4836 + C4811;
    const double C4843 = C4835 + C4807;
    const double C4840 = C4832 + C4795;
    const double C5046 = C5038 + C5013;
    const double C5043 = C5035 + C5001;
    const double C5248 = C5240 + C5215;
    const double C5245 = C5237 + C5203;
    const double C37427 = C37423 + C37415;
    const double C37424 = C37420 + C37403;
    const double C37894 = C37892 + C37885;
    const double C39178 = C39174 + C39157;
    const double C4842 = C4834 + C4803;
    const double C4841 = C4833 + C4799;
    const double C37425 = C37421 + C37407;
    const double C16216 = C16208 + C16183;
    const double C16215 = C16207 + C16179;
    const double C16212 = C16204 + C16167;
    const double C16418 = C16410 + C16385;
    const double C16415 = C16407 + C16373;
    const double C16620 = C16612 + C16587;
    const double C16617 = C16609 + C16575;
    const double C26345 = C26341 + C26333;
    const double C26342 = C26338 + C26321;
    const double C26812 = C26810 + C26803;
    const double C28100 = C28096 + C28079;
    const double C16214 = C16206 + C16175;
    const double C16213 = C16205 + C16171;
    const double C26343 = C26339 + C26325;
    const double C10878 = C10876 * C4785;
    const double C31912 = C10876 * C16157;
    const double C42899 = C10876 * C47633;
    const double C373 = C367 + C346;
    const double C5044 = C5036 + C5005;
    const double C5042 = C5034 + C4997;
    const double C16416 = C16408 + C16377;
    const double C16414 = C16406 + C16369;
    const double C568 = C562 + C541;
    const double C5246 = C5238 + C5207;
    const double C16618 = C16610 + C16579;
    const double C982 = C979 + C967;
    const double C5244 = C5236 + C5199;
    const double C5758 = C5754 + C5737;
    const double C16616 = C16608 + C16571;
    const double C17130 = C17126 + C17109;
    const double C11745 = C11741 - C11725;
    const double C26340 = C26336 - C26328;
    const double C27218 = C27212 - C27190;
    const double C37422 = C37418 - C37410;
    const double C38300 = C38294 - C38272;
    const double C11746 = C11742 - C11730;
    const double C26811 = C26809 - C26806;
    const double C27220 = C27214 - C27198;
    const double C37893 = C37891 - C37888;
    const double C38302 = C38296 - C38280;
    const double C10864 = C567 * C4785;
    const double C10858 = C567 * C47961;
    const double C31916 = C567 * C16157;
    const double C31913 = C567 * C47961;
    const double C42902 = C567 * C47633;
    const double C10879 = C10877 * C4785;
    const double C31915 = C10877 * C16157;
    const double C42900 = C10877 * C47633;
    const double C11348 = C11347 * C4785;
    const double C32380 = C11347 * C16157;
    const double C43252 = C11347 * C47633;
    const double C12632 = C12629 + C12623;
    const double C28103 = C28099 + C28091;
    const double C39181 = C39177 + C39169;
    const double C10868 = C566 * C4785;
    const double C10865 = C566 * C47961;
    const double C31920 = C566 * C16157;
    const double C31917 = C566 * C47961;
    const double C42905 = C566 * C47633;
    const double C12633 = C12630 * C4785;
    const double C33598 = C12630 * C16157;
    const double C42901 = C12630 * C47633;
    const double C163 = C47890 * C141;
    const double C350 = C47890 * C329;
    const double C5025 = C4783 * C329;
    const double C5017 = C47992 * C329;
    const double C16397 = C16155 * C329;
    const double C16389 = C47992 * C329;
    const double C354 = C47890 * C330;
    const double C4815 = C47992 * C330;
    const double C5389 = C4783 * C330;
    const double C16187 = C47992 * C330;
    const double C16761 = C16155 * C330;
    const double C545 = C47890 * C524;
    const double C5227 = C4783 * C524;
    const double C16599 = C16155 * C524;
    const double C549 = C47890 * C525;
    const double C5533 = C4783 * C525;
    const double C16905 = C16155 * C525;
    const double C971 = C47890 * C960;
    const double C5219 = C47992 * C960;
    const double C5749 = C4783 * C960;
    const double C16591 = C47992 * C960;
    const double C17121 = C16155 * C960;
    const double C12619 = C47890 * C2046;
    const double C7365 = C47992 * C2440;
    const double C12833 = C47890 * C2440;
    const double C18705 = C47992 * C2440;
    const double C28087 = C47992 * C7021;
    const double C39165 = C47992 * C7021;
    const double C44546 = C47890 * C7021;
    const double C28561 = C47992 * C7511;
    const double C39639 = C47992 * C7511;
    const double C43546 = C47890 * C7511;
    const double C44194 = C47890 * C12608;
    const double C355 = C113 * C318;
    const double C5382 = C4789 * C318;
    const double C16754 = C16161 * C318;
    const double C357 = C113 * C319;
    const double C5384 = C4789 * C319;
    const double C16756 = C16161 * C319;
    const double C680 = C113 * C320;
    const double C4816 = C4789 * C320;
    const double C16188 = C16161 * C320;
    const double C682 = C113 * C321;
    const double C4818 = C4789 * C321;
    const double C16190 = C16161 * C321;
    const double C972 = C113 * C954;
    const double C5526 = C4789 * C954;
    const double C16898 = C16161 * C954;
    const double C974 = C113 * C955;
    const double C5528 = C4789 * C955;
    const double C16900 = C16161 * C955;
    const double C161 = C114 * C120;
    const double C356 = C114 * C301;
    const double C5383 = C4790 * C301;
    const double C16755 = C16162 * C301;
    const double C681 = C114 * C302;
    const double C4817 = C4790 * C302;
    const double C16189 = C16162 * C302;
    const double C551 = C114 * C496;
    const double C792 = C114 * C497;
    const double C973 = C114 * C946;
    const double C5527 = C4790 * C946;
    const double C16899 = C16162 * C946;
    const double C1449 = C113 * C1175;
    const double C5020 = C4789 * C1175;
    const double C16392 = C16161 * C1175;
    const double C2201 = C113 * C1312;
    const double C5222 = C4789 * C1312;
    const double C16594 = C16161 * C1312;
    const double C1613 = C113 * C1318;
    const double C5744 = C4789 * C1318;
    const double C17116 = C16161 * C1318;
    const double C1447 = C113 * C1174;
    const double C5018 = C4789 * C1174;
    const double C16390 = C16161 * C1174;
    const double C2199 = C113 * C1311;
    const double C5220 = C4789 * C1311;
    const double C16592 = C16161 * C1311;
    const double C1611 = C113 * C1317;
    const double C5742 = C4789 * C1317;
    const double C17114 = C16161 * C1317;
    const double C47066 = C47064 + C47059;
    const double C47065 = C47063 + C47056;
    const double C47189 = C47180 + C47170;
    const double C47163 = C46842 * C47161;
    const double C47261 = 3 * C47161;
    const double C47247 = be * C47161;
    const double C27205 = C16162 * C6143;
    const double C38287 = C4790 * C6143;
    const double C43897 = C114 * C6143;
    const double C27689 = C16162 * C6633;
    const double C38771 = C4790 * C6633;
    const double C47162 = C46842 * C47160;
    const double C47253 = 3 * C47160;
    const double C47246 = ae * C47160;
    const double C47331 = C47329 + C47325;
    const double C1181 =
        (3 * (C46901 + C46842 * C47020 + C47016 * ae) +
         C46842 * (2 * C47020 + C46842 * C47043 + C47034 * ae) +
         (2 * C47016 + C46842 * C47034) * ae) /
        C46789;
    const double C1324 =
        (C46901 + C46842 * C47020 + C47016 * ae + C47043 * C47091) / C46789;
    const double C1726 =
        (C46991 * (2 * C47020 + C46842 * C47043 + C47034 * ae)) / C46789;
    const double C7508 =
        (2 * C46991 * C47043 + C46991 * (C47043 + C47161 * C47091)) / C46789;
    const double C172 = C167 - C158;
    const double C4839 = C4831 - C4822;
    const double C16211 = C16203 - C16194;
    const double C368 = C362 - C349;
    const double C5041 = C5033 - C5024;
    const double C5039 = C5031 - C5016;
    const double C16413 = C16405 - C16396;
    const double C16411 = C16403 - C16388;
    const double C369 = C363 - C353;
    const double C4837 = C4829 - C4814;
    const double C5393 = C5391 - C5388;
    const double C16209 = C16201 - C16186;
    const double C16765 = C16763 - C16760;
    const double C563 = C557 - C544;
    const double C5243 = C5235 - C5226;
    const double C16615 = C16607 - C16598;
    const double C564 = C558 - C548;
    const double C5537 = C5535 - C5532;
    const double C16909 = C16907 - C16904;
    const double C980 = C977 - C970;
    const double C5241 = C5233 - C5218;
    const double C5757 = C5753 - C5748;
    const double C16613 = C16605 - C16590;
    const double C17129 = C17125 - C17120;
    const double C2329 = C2327 - C2321;
    const double C1456 = C1451 - C1452;
    const double C5029 = C5006 - C5007;
    const double C6291 = C6286 - C6287;
    const double C16401 = C16378 - C16379;
    const double C17647 = C17642 - C17643;
    const double C2208 = C2203 - C2204;
    const double C5231 = C5208 - C5209;
    const double C7227 = C7222 - C7223;
    const double C16603 = C16580 - C16581;
    const double C18567 = C18562 - C18563;
    const double C1620 = C1615 - C1616;
    const double C5751 = C5738 - C5739;
    const double C6499 = C6494 - C6495;
    const double C17123 = C17110 - C17111;
    const double C17855 = C17850 - C17851;
    const double C7370 = C7362 - C7363;
    const double C12836 = C12830 - C12831;
    const double C18710 = C18702 - C18703;
    const double C2332 = C2330 + C2326;
    const double C7375 = C7373 + C7369;
    const double C18715 = C18713 + C18709;
    const double C1189 =
        (3 * (C46855 + ae * C47019 + be * C47020 + C46842 * C47037) +
         ae * (2 * C47019 + C46842 * C47042 + C47034 * be) +
         be * (2 * C47020 + C46842 * C47043 + C47034 * ae) +
         C46842 * (2 * C47037 + ae * C47042 + be * C47043 +
                   C46842 * (C46864 + ae * C47032 + be * C47035 +
                             C46842 * (ae * C46914 + be * C46916 +
                                       C46842 * C46872)))) /
        C46815;
    const double C1731 =
        (2 * (ae * C46991 * C46906 + be * C46991 * C46907 + C46842 * C47110) +
         ae * C46991 * C47042 + be * C46991 * C47043 +
         C46842 * (C47110 + ae * C46991 * C47032 + be * C46991 * C47035 +
                   C46842 * (ae * C46991 * C46914 + be * C46991 * C46916 +
                             C46842 * C46991 * C46872))) /
        C46815;
    const double C6149 =
        (2 * (ae * (C46906 + C46914 * C47091) +
              be * (C46907 + C46916 * C47091) + C46842 * C47216) +
         ae * (C47042 + C47160 * C47091) + be * (C47043 + C47161 * C47091) +
         C46842 * (C47216 + ae * (C47032 + C47143 * C47091) +
                   be * (C47035 + C47146 * C47091) +
                   C46842 * (ae * (C46914 + C46930 * C47091) +
                             be * (C46916 + C46934 * C47091) +
                             C46842 * (C46872 + C46884 * C47091)))) /
        C46815;
    const double C1180 =
        (3 * (C46900 + C46842 * C47019 + C47016 * be) +
         C46842 * (2 * C47019 + C46842 * C47042 + C47034 * be) +
         (2 * C47016 + C46842 * C47034) * be) /
        C46789;
    const double C1323 =
        (C46900 + C46842 * C47019 + C47016 * be + C47042 * C47091) / C46789;
    const double C1725 =
        (C46991 * (2 * C47019 + C46842 * C47042 + C47034 * be)) / C46789;
    const double C7507 =
        (2 * C46991 * C47042 + C46991 * (C47042 + C47160 * C47091)) / C46789;
    const double C47159 = C47148 + C47155;
    const double C13107 = C13106 - C13104;
    const double C28097 = C28093 - C28082;
    const double C28569 = C28567 - C28564;
    const double C39175 = C39171 - C39160;
    const double C39647 = C39645 - C39642;
    const double C28098 = C28094 - C28086;
    const double C39176 = C39172 - C39164;
    const double C44548 = C44547 - C44545;
    const double C44196 = C44195 - C44193;
    const double C46888 = C46880 + C46887;
    const double C47083 = C47077 + C47070;
    const double C2047 =
        (3 * (C46874 + C46886 * C47091) +
         C46991 * (2 * C47114 +
                   C46991 * (C46886 +
                             (C46884 + (C46878 * C46879 +
                                        C46845 * bs[8] * std::pow(C46840, 8)) *
                                           C46788 * C46860) *
                                 C47091))) /
        C46815;
    const double C2441 =
        (ae * (2 * C46991 * C46938 + C46991 * (C46938 + C46965 * C47091)) +
         be * (2 * C46991 * C46940 + C46991 * (C46940 + C46967 * C47091)) +
         C46842 * (2 * C47114 +
                   C46991 * (C46886 +
                             (C46884 + (C46878 * C46879 +
                                        C46845 * bs[8] * std::pow(C46840, 8)) *
                                           C46788 * C46860) *
                                 C47091))) /
        C46815;
    const double C1450 = C47890 * C1186;
    const double C5021 = C47992 * C1186;
    const double C16393 = C47992 * C1186;
    const double C2202 = C47890 * C1329;
    const double C5223 = C47992 * C1329;
    const double C16595 = C47992 * C1329;
    const double C1614 = C47890 * C1332;
    const double C5745 = C47992 * C1332;
    const double C17117 = C47992 * C1332;
    const double C2322 = C47890 * C2042;
    const double C47196 = C46842 * C47190;
    const double C7022 =
        (ae * (3 * (C46923 + C46948 * C47091) +
               C46991 * (2 * C47230 + C46991 * (C46948 + C47175 * C47091))) +
         be * (3 * (C46927 + C46954 * C47091) +
               C46991 * (2 * C47231 + C46991 * (C46954 + C47179 * C47091))) +
         C46842 * (3 * C47219 +
                   C46991 * (2 * C47232 +
                             C46991 * (C47173 + C46848 *
                                                    (C46878 * C46879 +
                                                     C46845 * bs[8] *
                                                         std::pow(C46840, 8)) *
                                                    C46788 * C47091)))) /
        C46815;
    const double C7512 =
        (2 * C47112 + C46991 * C47219 +
         ae * (2 * C46991 * C47055 + C46991 * (C47055 + C47191 * C47091)) +
         be * (2 * C46991 * C47058 + C46991 * (C47058 + C47194 * C47091)) +
         C46842 * (ae * (2 * C47230 + C46991 * (C46948 + C47175 * C47091)) +
                   be * (2 * C47231 + C46991 * (C46954 + C47179 * C47091)) +
                   C46842 * (2 * C47232 +
                             C46991 * (C47173 + C46848 *
                                                    (C46878 * C46879 +
                                                     C46845 * bs[8] *
                                                         std::pow(C46840, 8)) *
                                                    C46788 * C47091)))) /
        C46815;
    const double C12609 =
        (4 * (2 * C47112 + C46991 * C47219) +
         C46991 * (3 * C47219 +
                   C46991 * (2 * C47232 +
                             C46991 * (C47173 + C46848 *
                                                    (C46878 * C46879 +
                                                     C46845 * bs[8] *
                                                         std::pow(C46840, 8)) *
                                                    C46788 * C47091)))) /
        C46815;
    const double C47237 = C47236 + C47235;
    const double C47285 = C47274 + C47281;
    const double C47317 = C47316 + C47315;
    const double C47339 = C47337 + C47338;
    const double C47333 = C46842 * C47332;
    const double C46977 = C46953 + C46975;
    const double C47107 = C47104 + C47105;
    const double C47087 = C46940 + C47085;
    const double C47207 = C47205 + C47195;
    const double C47294 = C46842 * C47289;
    const double C23363 =
        (3 * (C47043 + C47161 * C47091) +
         C46991 * (2 * C46991 * C47161 + C46991 * (C47161 + C47289 * C47091))) /
        C46789;
    const double C46976 = C46947 + C46974;
    const double C47106 = C47101 + C47102;
    const double C47086 = C46938 + C47084;
    const double C47206 = C47203 + C47192;
    const double C47292 = C46842 * C47286;
    const double C23362 =
        (3 * (C47042 + C47160 * C47091) +
         C46991 * (2 * C46991 * C47160 + C46991 * (C47160 + C47286 * C47091))) /
        C46789;
    const double C121 = 5 * (3 * C46915 + C46848 * C46939) +
                        C46848 * (4 * C46939 + C46848 * C46972);
    const double C303 = 3 * C46915 + C46848 * C46939 + C46972 * C46845;
    const double C498 = 3 * C46915 + C46848 * C46939 + C46972 * C47091;
    const double C675 = C46842 * (4 * C46939 + C46848 * C46972);
    const double C786 = C46991 * (4 * C46939 + C46848 * C46972);
    const double C947 = C46991 * C46842 * C46972;
    const double C22615 = 5 * (3 * C47034 + C46842 * C47157) +
                          C46842 * (4 * C47157 + C46842 * C47293);
    const double C22729 = 3 * C47034 + C46842 * C47157 + C47293 * C47091;
    const double C23075 = C46991 * (4 * C47157 + C46842 * C47293);
    const double C47963 = C47927 / C47649;
    const double C47998 = C47967 / C47653;
    const double C47999 = C47969 + C47935;
    const double C673 = C47935 - C47670 / C47667;
    const double C47966 = C47931 / C47649;
    const double C47979 = C47945 / C47649;
    const double C48005 = C47982 / C47653;
    const double C48006 = C47983 + C47949;
    const double C1438 = C47949 - C47750 / C47667;
    const double C47981 = C47946 / C47649;
    const double C47985 = C47951 / C47649;
    const double C48008 = C47988 / C47653;
    const double C48009 = C47989 + C47955;
    const double C2312 = C47955 - C47792 / C47667;
    const double C47987 = C47952 / C47649;
    const double C46829 = C46787 * C46824;
    const double C21876 =
        (ae * -2 * C46814) / (C46815 * 2 * C46789) -
        (((C46787 * ((-4 * C46796) / C46789 - (C46787 * C46824) / C46789) *
           ae) /
              C46789 +
          2 * ((C46823 * ae) / C46789 - C46814 / C46816)) *
         be) /
            C46789 -
        C46824 / C46816;
    const double C21880 = (-C46824 / C46789) / (4 * C46815);
    const double C10866 = C568 * C4785;
    const double C10859 = C568 * C47961;
    const double C31918 = C568 * C16157;
    const double C31914 = C568 * C47961;
    const double C42903 = C568 * C47633;
    const double C11341 = C982 * C4785;
    const double C11340 = C982 * C47961;
    const double C32382 = C982 * C16157;
    const double C32381 = C982 * C47961;
    const double C43254 = C982 * C47633;
    const double C11749 = C11745 + C11726;
    const double C26344 = C26340 + C26329;
    const double C27224 = C27218 + C27191;
    const double C37426 = C37422 + C37411;
    const double C38306 = C38300 + C38273;
    const double C11750 = C11746 + C11731;
    const double C26813 = C26811 + C26807;
    const double C27226 = C27220 + C27199;
    const double C37895 = C37893 + C37889;
    const double C38308 = C38302 + C38281;
    const double C12635 = C12632 * C4785;
    const double C33601 = C12632 * C16157;
    const double C44190 = C12632 * C47633;
    const double C12631 = C12628 + C12619;
    const double C168 = C160 - C161;
    const double C364 = C355 - C356;
    const double C5390 = C5382 - C5383;
    const double C16762 = C16754 - C16755;
    const double C684 = C680 - C681;
    const double C4830 = C4816 - C4817;
    const double C16202 = C16188 - C16189;
    const double C559 = C550 - C551;
    const double C795 = C791 - C792;
    const double C978 = C972 - C973;
    const double C5534 = C5526 - C5527;
    const double C16906 = C16898 - C16899;
    const double C1455 = C1447 - C1448;
    const double C5032 = C5018 - C5019;
    const double C16404 = C16390 - C16391;
    const double C2207 = C2199 - C2200;
    const double C5234 = C5220 - C5221;
    const double C16606 = C16592 - C16593;
    const double C1619 = C1611 - C1612;
    const double C5752 = C5742 - C5743;
    const double C17124 = C17114 - C17115;
    const double C1183 =
        (3 * (C46909 + C46842 * C47012 + C47008 * ae) +
         C46842 * (2 * C47012 + C46842 * C47066 + C47057 * ae) +
         (2 * C47008 + C46842 * C47057) * ae) /
        C46789;
    const double C1326 =
        (C46909 + C46842 * C47012 + C47008 * ae + C47066 * C47091) / C46789;
    const double C1728 =
        (C46991 * (2 * C47012 + C46842 * C47066 + C47057 * ae)) / C46789;
    const double C1190 =
        (3 * (C47005 + ae * C47011 + be * C47012 + C46842 * C47060) +
         ae * (2 * C47011 + C46842 * C47065 + C47057 * be) +
         be * (2 * C47012 + C46842 * C47066 + C47057 * ae) +
         C46842 * (2 * C47060 + ae * C47065 + be * C47066 +
                   C46842 * (C46876 + ae * C47055 + be * C47058 +
                             C46842 * (ae * C46948 + be * C46954 +
                                       C46842 * C46848 * C46884)))) /
        C46815;
    const double C1732 =
        (2 * (ae * C46991 * C46923 + be * C46991 * C46927 + C46842 * C47112) +
         ae * C46991 * C47065 + be * C46991 * C47066 +
         C46842 * (C47112 + ae * C46991 * C47055 + be * C46991 * C47058 +
                   C46842 * (ae * C46991 * C46948 + be * C46991 * C46954 +
                             C46842 * C46991 * C46848 * C46884))) /
        C46815;
    const double C1182 =
        (3 * (C46908 + C46842 * C47011 + C47008 * be) +
         C46842 * (2 * C47011 + C46842 * C47065 + C47057 * be) +
         (2 * C47008 + C46842 * C47057) * be) /
        C46789;
    const double C1325 =
        (C46908 + C46842 * C47011 + C47008 * be + C47065 * C47091) / C46789;
    const double C1727 =
        (C46991 * (2 * C47011 + C46842 * C47065 + C47057 * be)) / C46789;
    const double C47165 = C47138 + C47163;
    const double C47164 = C47132 + C47162;
    const double C47265 = C47245 + C47246;
    const double C11739 = C113 * C1324;
    const double C27210 = C16159 * C1324;
    const double C27194 = C16161 * C1324;
    const double C38292 = C4787 * C1324;
    const double C38276 = C4789 * C1324;
    const double C12222 = C113 * C1726;
    const double C27202 = C16161 * C1726;
    const double C27686 = C16159 * C1726;
    const double C38284 = C4789 * C1726;
    const double C38768 = C4787 * C1726;
    const double C28560 = C16161 * C7508;
    const double C39638 = C4789 * C7508;
    const double C43545 = C113 * C7508;
    const double C177 = C172 + C159;
    const double C4847 = C4839 + C4823;
    const double C16219 = C16211 + C16195;
    const double C374 = C368 + C350;
    const double C5049 = C5041 + C5025;
    const double C5047 = C5039 + C5017;
    const double C16421 = C16413 + C16397;
    const double C16419 = C16411 + C16389;
    const double C375 = C369 + C354;
    const double C4845 = C4837 + C4815;
    const double C5395 = C5393 + C5389;
    const double C16217 = C16209 + C16187;
    const double C16767 = C16765 + C16761;
    const double C569 = C563 + C545;
    const double C5251 = C5243 + C5227;
    const double C16623 = C16615 + C16599;
    const double C570 = C564 + C549;
    const double C5539 = C5537 + C5533;
    const double C16911 = C16909 + C16905;
    const double C983 = C980 + C971;
    const double C5249 = C5241 + C5219;
    const double C5761 = C5757 + C5749;
    const double C16621 = C16613 + C16591;
    const double C17133 = C17129 + C17121;
    const double C1458 = C1456 - C1453;
    const double C5037 = C5029 - C5008;
    const double C6293 = C6291 - C6288;
    const double C16409 = C16401 - C16380;
    const double C17649 = C17647 - C17644;
    const double C2210 = C2208 - C2205;
    const double C5239 = C5231 - C5210;
    const double C7229 = C7227 - C7224;
    const double C16611 = C16603 - C16582;
    const double C18569 = C18567 - C18564;
    const double C1622 = C1620 - C1617;
    const double C5755 = C5751 - C5740;
    const double C6501 = C6499 - C6496;
    const double C17127 = C17123 - C17112;
    const double C17857 = C17855 - C17852;
    const double C7372 = C7370 - C7364;
    const double C12837 = C12836 - C12832;
    const double C18712 = C18710 - C18704;
    const double C12615 = C2332 * C47961;
    const double C12970 = C2332 * C4785;
    const double C33599 = C2332 * C47961;
    const double C33929 = C2332 * C16157;
    const double C42904 = C2332 * C47633;
    const double C12223 = C47890 * C1731;
    const double C27203 = C47992 * C1731;
    const double C27687 = C16155 * C1731;
    const double C38285 = C47992 * C1731;
    const double C38769 = C4783 * C1731;
    const double C27207 = C47992 * C6149;
    const double C38289 = C47992 * C6149;
    const double C43899 = C47890 * C6149;
    const double C11737 = C113 * C1323;
    const double C27208 = C16159 * C1323;
    const double C27192 = C16161 * C1323;
    const double C38290 = C4787 * C1323;
    const double C38274 = C4789 * C1323;
    const double C12220 = C113 * C1725;
    const double C27200 = C16161 * C1725;
    const double C27684 = C16159 * C1725;
    const double C38282 = C4789 * C1725;
    const double C38766 = C4787 * C1725;
    const double C28558 = C16161 * C7507;
    const double C39636 = C4789 * C7507;
    const double C43543 = C113 * C7507;
    const double C13108 = C13107 + C13105;
    const double C28101 = C28097 + C28083;
    const double C28571 = C28569 + C28565;
    const double C39179 = C39175 + C39161;
    const double C39649 = C39647 + C39643;
    const double C28102 = C28098 + C28087;
    const double C39180 = C39176 + C39165;
    const double C44549 = C44548 + C44546;
    const double C44197 = C44196 + C44194;
    const double C142 =
        (5 * (3 * C46874 + C46848 * C46888) +
         C46848 *
             (4 * C46888 +
              C46848 * (3 * C46886 +
                        C46848 * (2 * C46848 * C46884 +
                                  C46848 * (C46884 + (C46878 * C46879 +
                                                      C46845 * bs[8] *
                                                          std::pow(C46840, 8)) *
                                                         C46788 * C46860))))) /
        C46815;
    const double C331 =
        (2 * C46848 * C46864 + C46848 * C46874 +
         ae * (C46842 * C46943 + C46939 * be) +
         be * (C46842 * C46944 + C46939 * ae) +
         C46842 * (ae * C46943 + be * C46944 + C46842 * C46888)) /
        C46815;
    const double C332 = (ae * (3 * C46919 + C46848 * C46943) +
                         be * (3 * C46920 + C46848 * C46944) +
                         C46842 * (3 * C46874 + C46848 * C46888)) /
                        C46815;
    const double C526 = (2 * C46848 * C46864 + C46848 * C46874 +
                         C46888 * std::pow(zP - zQ, 2)) /
                        C46815;
    const double C527 = ((zP - zQ) * (3 * C46874 + C46848 * C46888)) / C46815;
    const double C528 =
        (3 * C46874 + C46848 * C46888 +
         (3 * C46886 +
          C46848 * (2 * C46848 * C46884 +
                    C46848 * (C46884 + (C46878 * C46879 +
                                        C46845 * bs[8] * std::pow(C46840, 8)) *
                                           C46788 * C46860))) *
             std::pow(zP - zQ, 2)) /
        C46815;
    const double C789 =
        ((zP - zQ) *
         (4 * C46888 +
          C46848 * (3 * C46886 +
                    C46848 * (2 * C46848 * C46884 +
                              C46848 * (C46884 +
                                        (C46878 * C46879 +
                                         C46845 * bs[8] * std::pow(C46840, 8)) *
                                            C46788 * C46860))))) /
        C46815;
    const double C961 = (ae * C46991 * C46943 + be * C46991 * C46944 +
                         C46842 * C46991 * C46888) /
                        C46815;
    const double C2197 =
        (ae * (C46943 + C46971 * C47091) + be * (C46944 + C46973 * C47091) +
         C46842 * (C46888 +
                   (2 * C46848 * C46884 +
                    C46848 * (C46884 + (C46878 * C46879 +
                                        C46845 * bs[8] * std::pow(C46840, 8)) *
                                           C46788 * C46860)) *
                       C47091)) /
        C46815;
    const double C2317 =
        (2 * C46991 * C46888 +
         C46991 * (C46888 +
                   (2 * C46848 * C46884 +
                    C46848 * (C46884 + (C46878 * C46879 +
                                        C46845 * bs[8] * std::pow(C46840, 8)) *
                                           C46788 * C46860)) *
                       C47091)) /
        C46815;
    const double C2331 = C2329 + C2322;
    const double C47202 = C47189 + C47196;
    const double C47291 = C46842 * C47285;
    const double C23710 =
        (2 * (ae * (2 * C47221 + C46991 * C47310) +
              be * (2 * C47222 + C46991 * C47311) + C46842 * C47339) +
         ae * (2 * C46991 * C47160 + C46991 * (C47160 + C47286 * C47091)) +
         be * (2 * C46991 * C47161 + C46991 * (C47161 + C47289 * C47091)) +
         C46842 *
             (C47339 + ae * (2 * C47319 + C46991 * (C47143 + C47268 * C47091)) +
              be * (2 * C47320 + C46991 * (C47146 + C47271 * C47091)) +
              C46842 *
                  (ae * (2 * C47321 + C46991 * (C46930 + C46957 * C47091)) +
                   be * (2 * C47322 + C46991 * (C46934 + C46961 * C47091)) +
                   C46842 * (2 * C47323 +
                             C46991 * (C46884 +
                                       (C46878 * C46879 +
                                        C46845 * bs[8] * std::pow(C46840, 8)) *
                                           C46788 * C47091))))) /
        C46815;
    const double C28074 =
        (ae * (4 * (2 * C47221 + C46991 * C47310) +
               C46991 * (3 * C47310 +
                         C46991 * (2 * C47321 +
                                   C46991 * (C46930 + C46957 * C47091)))) +
         be * (4 * (2 * C47222 + C46991 * C47311) +
               C46991 * (3 * C47311 +
                         C46991 * (2 * C47322 +
                                   C46991 * (C46934 + C46961 * C47091)))) +
         C46842 *
             (4 * C47339 +
              C46991 * (3 * C47312 +
                        C46991 * (2 * C47323 +
                                  C46991 * (C46884 + (C46878 * C46879 +
                                                      C46845 * bs[8] *
                                                          std::pow(C46840, 8)) *
                                                         C46788 * C47091))))) /
        C46815;
    const double C44188 =
        (5 * (3 * C47216 + C46991 * C47339) +
         C46991 *
             (4 * C47339 +
              C46991 * (3 * C47312 +
                        C46991 * (2 * C47323 +
                                  C46991 * (C46884 + (C46878 * C46879 +
                                                      C46845 * bs[8] *
                                                          std::pow(C46840, 8)) *
                                                         C46788 * C47091))))) /
        C46815;
    const double C47334 = C47331 + C47333;
    const double C135 = (5 * (3 * C46920 + C46848 * C46944) +
                         C46848 * (4 * C46944 + C46848 * C46977)) /
                        C46789;
    const double C323 =
        (3 * C46920 + C46848 * C46944 +
         C46842 * (C46842 * C46977 + C46972 * ae) + C46842 * C46972 * ae) /
        C46789;
    const double C518 =
        (3 * C46920 + C46848 * C46944 + C46977 * C47091) / C46789;
    const double C677 = (C46842 * (4 * C46944 + C46848 * C46977) +
                         (4 * C46939 + C46848 * C46972) * ae) /
                        C46789;
    const double C788 = (C46991 * (4 * C46944 + C46848 * C46977)) / C46789;
    const double C957 = (C46991 * (C46842 * C46977 + C46972 * ae)) / C46789;
    const double C1444 = (2 * (C46842 * C46944 + C46939 * ae) +
                          C46842 * (C46944 + C46842 * C47107 + C47103 * ae) +
                          (C46939 + C46966 * C46845) * ae) /
                         C46789;
    const double C1608 =
        (C46991 * (C46944 + C46842 * C47107 + C47103 * ae)) / C46789;
    const double C2196 =
        (C46842 * C46944 + C46939 * ae + C47107 * C47091) / C46789;
    const double C47089 = C47087 + C47082;
    const double C47209 = C46842 * C47207;
    const double C7510 =
        (2 * C46991 * C47066 + C46991 * (C47066 + C47207 * C47091)) / C46789;
    const double C47297 = C47262 + C47294;
    const double C333 =
        (3 * C46874 + C46848 * C46888 + ae * (C46842 * C46976 + C46972 * be) +
         be * (C46842 * C46977 + C46972 * ae) +
         C46842 *
             (ae * C46976 + be * C46977 +
              C46842 * (3 * C46886 +
                        C46848 * (2 * C46848 * C46884 +
                                  C46848 * (C46884 + (C46878 * C46879 +
                                                      C46845 * bs[8] *
                                                          std::pow(C46840, 8)) *
                                                         C46788 * C46860))))) /
        C46815;
    const double C678 =
        (ae * (4 * C46943 + C46848 * C46976) +
         be * (4 * C46944 + C46848 * C46977) +
         C46842 *
             (4 * C46888 +
              C46848 * (3 * C46886 +
                        C46848 * (2 * C46848 * C46884 +
                                  C46848 * (C46884 + (C46878 * C46879 +
                                                      C46845 * bs[8] *
                                                          std::pow(C46840, 8)) *
                                                         C46788 * C46860))))) /
        C46815;
    const double C962 =
        (ae * C46991 * C46976 + be * C46991 * C46977 +
         C46842 * C46991 *
             (3 * C46886 +
              C46848 *
                  (2 * C46848 * C46884 +
                   C46848 * (C46884 + (C46878 * C46879 +
                                       C46845 * bs[8] * std::pow(C46840, 8)) *
                                          C46788 * C46860)))) /
        C46815;
    const double C134 = (5 * (3 * C46919 + C46848 * C46943) +
                         C46848 * (4 * C46943 + C46848 * C46976)) /
                        C46789;
    const double C322 =
        (3 * C46919 + C46848 * C46943 +
         C46842 * (C46842 * C46976 + C46972 * be) + C46842 * C46972 * be) /
        C46789;
    const double C517 =
        (3 * C46919 + C46848 * C46943 + C46976 * C47091) / C46789;
    const double C676 = (C46842 * (4 * C46943 + C46848 * C46976) +
                         (4 * C46939 + C46848 * C46972) * be) /
                        C46789;
    const double C787 = (C46991 * (4 * C46943 + C46848 * C46976)) / C46789;
    const double C956 = (C46991 * (C46842 * C46976 + C46972 * be)) / C46789;
    const double C1445 =
        (2 * (ae * C46943 + be * C46944 + C46842 * C46888) +
         ae * (C46943 + C46842 * C47106 + C47103 * be) +
         be * (C46944 + C46842 * C47107 + C47103 * ae) +
         C46842 *
             (C46888 + ae * C47106 + be * C47107 +
              C46842 * (ae * C46971 + be * C46973 +
                        C46842 * (2 * C46848 * C46884 +
                                  C46848 * (C46884 + (C46878 * C46879 +
                                                      C46845 * bs[8] *
                                                          std::pow(C46840, 8)) *
                                                         C46788 * C46860))))) /
        C46815;
    const double C1609 =
        (C46991 * C46888 + ae * C46991 * C47106 + be * C46991 * C47107 +
         C46842 *
             (ae * C46991 * C46971 + be * C46991 * C46973 +
              C46842 * C46991 *
                  (2 * C46848 * C46884 +
                   C46848 * (C46884 + (C46878 * C46879 +
                                       C46845 * bs[8] * std::pow(C46840, 8)) *
                                          C46788 * C46860)))) /
        C46815;
    const double C1443 = (2 * (C46842 * C46943 + C46939 * be) +
                          C46842 * (C46943 + C46842 * C47106 + C47103 * be) +
                          (C46939 + C46966 * C46845) * be) /
                         C46789;
    const double C1607 =
        (C46991 * (C46943 + C46842 * C47106 + C47103 * be)) / C46789;
    const double C2195 =
        (C46842 * C46943 + C46939 * be + C47106 * C47091) / C46789;
    const double C47088 = C47086 + C47079;
    const double C47208 = C46842 * C47206;
    const double C6150 =
        (2 * (ae * (C46923 + C46948 * C47091) +
              be * (C46927 + C46954 * C47091) + C46842 * C47219) +
         ae * (C47065 + C47206 * C47091) + be * (C47066 + C47207 * C47091) +
         C46842 * (C47219 + ae * (C47055 + C47191 * C47091) +
                   be * (C47058 + C47194 * C47091) +
                   C46842 * (ae * (C46948 + C47175 * C47091) +
                             be * (C46954 + C47179 * C47091) +
                             C46842 * (C47173 + C46848 *
                                                    (C46878 * C46879 +
                                                     C46845 * bs[8] *
                                                         std::pow(C46840, 8)) *
                                                    C46788 * C47091)))) /
        C46815;
    const double C7509 =
        (2 * C46991 * C47065 + C46991 * (C47065 + C47206 * C47091)) / C46789;
    const double C47296 = C47254 + C47292;
    const double C48019 = C47963 + C48011;
    const double C672 = C47998 - (C47672 * C47654) / C47649;
    const double C111 = C47999 / C47653 - C47670 / C47970;
    const double C48012 = C47966 + C47998;
    const double C48020 = C47979 + C48015;
    const double C1437 = C48005 - (C47752 * C47741) / C47649;
    const double C1165 = C48006 / C47653 - C47750 / C47970;
    const double C48016 = C47981 + C48005;
    const double C48021 = C47985 + C48017;
    const double C2311 = C48008 - (C47794 * C47783) / C47649;
    const double C2022 = C48009 / C47653 - C47792 / C47970;
    const double C48018 = C47987 + C48008;
    const double C21878 =
        (((-4 * C46796) / C46789 - C46829 / C46789) * ae) / C46816 -
        ((2 * ((0 * ae) / C46789 - C46796 / C46815) - C46829 / C46816) * be) /
            C46789;
    const double C11753 = C11749 * C4785;
    const double C32760 = C11749 * C16157;
    const double C43253 = C11749 * C47633;
    const double C11754 = C11750 * C4785;
    const double C32762 = C11750 * C16157;
    const double C43541 = C11750 * C47633;
    const double C12634 = C12631 * C47961;
    const double C33600 = C12631 * C47961;
    const double C44444 = C12631 * C47633;
    const double C173 = C168 - C162;
    const double C370 = C364 - C357;
    const double C5392 = C5390 - C5384;
    const double C16764 = C16762 - C16756;
    const double C685 = C684 - C682;
    const double C4838 = C4830 - C4818;
    const double C16210 = C16202 - C16190;
    const double C565 = C559 - C552;
    const double C796 = C795 - C793;
    const double C981 = C978 - C974;
    const double C5536 = C5534 - C5528;
    const double C16908 = C16906 - C16900;
    const double C1457 = C1455 - C1449;
    const double C5040 = C5032 - C5020;
    const double C16412 = C16404 - C16392;
    const double C2209 = C2207 - C2201;
    const double C5242 = C5234 - C5222;
    const double C16614 = C16606 - C16594;
    const double C1621 = C1619 - C1613;
    const double C5756 = C5752 - C5744;
    const double C17128 = C17124 - C17116;
    const double C6284 = C4789 * C1183;
    const double C17640 = C16161 * C1183;
    const double C7220 = C4789 * C1326;
    const double C11735 = C113 * C1326;
    const double C18560 = C16161 * C1326;
    const double C6492 = C4789 * C1728;
    const double C11889 = C113 * C1728;
    const double C17848 = C16161 * C1728;
    const double C6285 = C47992 * C1190;
    const double C17641 = C47992 * C1190;
    const double C6493 = C47992 * C1732;
    const double C11890 = C47890 * C1732;
    const double C17849 = C47992 * C1732;
    const double C6282 = C4789 * C1182;
    const double C17638 = C16161 * C1182;
    const double C7218 = C4789 * C1325;
    const double C11733 = C113 * C1325;
    const double C18558 = C16161 * C1325;
    const double C6490 = C4789 * C1727;
    const double C11887 = C113 * C1727;
    const double C17846 = C16161 * C1727;
    const double C47167 = C47165 + C47154;
    const double C47166 = C47164 + C47151;
    const double C47273 = C47265 + C47247;
    const double C10871 = C569 * C4785;
    const double C10867 = C569 * C47961;
    const double C31923 = C569 * C16157;
    const double C31919 = C569 * C47961;
    const double C42906 = C569 * C47633;
    const double C10869 = C570 * C47961;
    const double C11140 = C570 * C4785;
    const double C31921 = C570 * C47961;
    const double C32184 = C570 * C16157;
    const double C43104 = C570 * C47633;
    const double C11343 = C983 * C4785;
    const double C11342 = C983 * C47961;
    const double C32384 = C983 * C16157;
    const double C32383 = C983 * C47961;
    const double C43256 = C983 * C47633;
    const double C1460 = C1458 + C1454;
    const double C5045 = C5037 + C5009;
    const double C6295 = C6293 + C6289;
    const double C16417 = C16409 + C16381;
    const double C17651 = C17649 + C17645;
    const double C2212 = C2210 + C2206;
    const double C5247 = C5239 + C5211;
    const double C7231 = C7229 + C7225;
    const double C16619 = C16611 + C16583;
    const double C18571 = C18569 + C18565;
    const double C1624 = C1622 + C1618;
    const double C5759 = C5755 + C5741;
    const double C6503 = C6501 + C6497;
    const double C17131 = C17127 + C17113;
    const double C17859 = C17857 + C17853;
    const double C7374 = C7372 + C7365;
    const double C12838 = C12837 + C12833;
    const double C18714 = C18712 + C18705;
    const double C11744 = C11737 - C11738;
    const double C27217 = C27208 - C27209;
    const double C27213 = C27192 - C27193;
    const double C38299 = C38290 - C38291;
    const double C38295 = C38274 - C38275;
    const double C12225 = C12220 - C12221;
    const double C27215 = C27200 - C27201;
    const double C27692 = C27684 - C27685;
    const double C38297 = C38282 - C38283;
    const double C38774 = C38766 - C38767;
    const double C28566 = C28558 - C28559;
    const double C39644 = C39636 - C39637;
    const double C43547 = C43543 - C43544;
    const double C13109 = C13108 * C4785;
    const double C34061 = C13108 * C16157;
    const double C43540 = C13108 * C47633;
    const double C44550 = C44549 * C47633;
    const double C44198 = C44197 * C47633;
    const double C358 = C47890 * C331;
    const double C5385 = C47992 * C331;
    const double C16757 = C47992 * C331;
    const double C683 = C47890 * C332;
    const double C4819 = C47992 * C332;
    const double C16191 = C47992 * C332;
    const double C553 = C47890 * C526;
    const double C794 = C47890 * C527;
    const double C975 = C47890 * C961;
    const double C5529 = C47992 * C961;
    const double C16901 = C47992 * C961;
    const double C12969 = C2331 * C47961;
    const double C33928 = C2331 * C47961;
    const double C42907 = C2331 * C47633;
    const double C1185 =
        (3 * (C46920 + C46842 * C47003 + C46999 * ae) +
         C46842 * (2 * C47003 + C46842 * C47089 + C47080 * ae) +
         (2 * C46999 + C46842 * C47080) * ae) /
        C46789;
    const double C1328 =
        (C46920 + C46842 * C47003 + C46999 * ae + C47089 * C47091) / C46789;
    const double C1730 =
        (C46991 * (2 * C47003 + C46842 * C47089 + C47080 * ae)) / C46789;
    const double C47211 = C47178 + C47209;
    const double C47299 = C47297 + C47280;
    const double C1191 =
        (3 * (C46874 + ae * C47002 + be * C47003 + C46842 * C47083) +
         ae * (2 * C47002 + C46842 * C47088 + C47080 * be) +
         be * (2 * C47003 + C46842 * C47089 + C47080 * ae) +
         C46842 *
             (2 * C47083 + ae * C47088 + be * C47089 +
              C46842 * (C46886 + ae * C47078 + be * C47081 +
                        C46842 * (ae * C46965 + be * C46967 +
                                  C46842 * (C46884 + (C46878 * C46879 +
                                                      C46845 * bs[8] *
                                                          std::pow(C46840, 8)) *
                                                         C46788 * C46860))))) /
        C46815;
    const double C1733 =
        (2 * (ae * C46991 * C46938 + be * C46991 * C46940 + C46842 * C47114) +
         ae * C46991 * C47088 + be * C46991 * C47089 +
         C46842 *
             (C47114 + ae * C46991 * C47078 + be * C46991 * C47081 +
              C46842 * (ae * C46991 * C46965 + be * C46991 * C46967 +
                        C46842 * C46991 *
                            (C46884 + (C46878 * C46879 +
                                       C46845 * bs[8] * std::pow(C46840, 8)) *
                                          C46788 * C46860)))) /
        C46815;
    const double C1184 =
        (3 * (C46919 + C46842 * C47002 + C46999 * be) +
         C46842 * (2 * C47002 + C46842 * C47088 + C47080 * be) +
         (2 * C46999 + C46842 * C47080) * be) /
        C46789;
    const double C1327 =
        (C46919 + C46842 * C47002 + C46999 * be + C47088 * C47091) / C46789;
    const double C1729 =
        (C46991 * (2 * C47002 + C46842 * C47088 + C47080 * be)) / C46789;
    const double C47210 = C47174 + C47208;
    const double C47298 = C47296 + C47277;
    const double C108 =
        (C48010 + 2 * C47663) / C47653 - (C48019 * C47654) / C47649;
    const double C109 =
        (C47997 + 2 * C47672 + C48019) / C47653 - (C48012 * C47654) / C47649;
    const double C110 = (C47968 + C47669 / C47649 + C48012) / C47653 -
                        (C47999 * C47654) / C47649;
    const double C1162 =
        (C48013 + 2 * C47745) / C47653 - (C48020 * C47741) / C47649;
    const double C1163 =
        (C48001 + 2 * C47752 + C48020) / C47653 - (C48016 * C47741) / C47649;
    const double C1164 = (C47974 + C47749 / C47649 + C48016) / C47653 -
                         (C48006 * C47741) / C47649;
    const double C2019 =
        (C48014 + 2 * C47787) / C47653 - (C48021 * C47783) / C47649;
    const double C2020 =
        (C48003 + 2 * C47794 + C48021) / C47653 - (C48018 * C47783) / C47649;
    const double C2021 = (C47977 + C47791 / C47649 + C48018) / C47653 -
                         (C48009 * C47783) / C47649;
    const double C178 = C173 + C163;
    const double C1459 = C1457 + C1450;
    const double C5048 = C5040 + C5021;
    const double C16420 = C16412 + C16393;
    const double C2211 = C2209 + C2202;
    const double C5250 = C5242 + C5223;
    const double C16622 = C16614 + C16595;
    const double C1623 = C1621 + C1614;
    const double C5760 = C5756 + C5745;
    const double C17132 = C17128 + C17117;
    const double C6290 = C6282 - C6283;
    const double C17646 = C17638 - C17639;
    const double C7226 = C7218 - C7219;
    const double C11743 = C11733 - C11734;
    const double C18566 = C18558 - C18559;
    const double C6498 = C6490 - C6491;
    const double C11891 = C11887 - C11888;
    const double C17854 = C17846 - C17847;
    const double C5992 =
        (4 * (2 * C47020 + C46842 * C47043 + C47034 * ae) +
         C46842 * (3 * C47043 + C46842 * C47167 + C47157 * ae) +
         (3 * C47034 + C46842 * C47157) * ae) /
        C46789;
    const double C6146 =
        (2 * C47020 + C46842 * C47043 + C47034 * ae + C47167 * C47091) / C46789;
    const double C6636 =
        (C46991 * (3 * C47043 + C46842 * C47167 + C47157 * ae)) / C46789;
    const double C5995 =
        (4 * (2 * C47037 + ae * C47042 + be * C47043 + C46842 * C47159) +
         ae * (3 * C47042 + C46842 * C47166 + C47157 * be) +
         be * (3 * C47043 + C46842 * C47167 + C47157 * ae) +
         C46842 * (3 * C47159 + ae * C47166 + be * C47167 +
                   C46842 * (2 * C47149 + ae * C47160 + be * C47161 +
                             C46842 * (C46872 + ae * C47143 + be * C47146 +
                                       C46842 * (ae * C46930 + be * C46934 +
                                                 C46842 * C46884))))) /
        C46815;
    const double C6639 =
        (3 * (C47110 + ae * C46991 * C47032 + be * C46991 * C47035 +
              C46842 * C47228) +
         ae * C46991 * C47166 + be * C46991 * C47167 +
         C46842 *
             (2 * C47228 + ae * C46991 * C47160 + be * C46991 * C47161 +
              C46842 * (C47223 + ae * C46991 * C47143 + be * C46991 * C47146 +
                        C46842 * (ae * C46991 * C46930 + be * C46991 * C46934 +
                                  C46842 * C46991 * C46884)))) /
        C46815;
    const double C5991 =
        (4 * (2 * C47019 + C46842 * C47042 + C47034 * be) +
         C46842 * (3 * C47042 + C46842 * C47166 + C47157 * be) +
         (3 * C47034 + C46842 * C47157) * be) /
        C46789;
    const double C6145 =
        (2 * C47019 + C46842 * C47042 + C47034 * be + C47166 * C47091) / C46789;
    const double C6635 =
        (C46991 * (3 * C47042 + C46842 * C47166 + C47157 * be)) / C46789;
    const double C47295 = C47273 + C47291;
    const double C11727 = C2212 * C47961;
    const double C12835 = C2212 * C4785;
    const double C32761 = C2212 * C47961;
    const double C33797 = C2212 * C16157;
    const double C43255 = C2212 * C47633;
    const double C11732 = C1624 * C47961;
    const double C12088 = C1624 * C4785;
    const double C32763 = C1624 * C47961;
    const double C33090 = C1624 * C16157;
    const double C43795 = C1624 * C47633;
    const double C13101 = C12838 * C47961;
    const double C34060 = C12838 * C47961;
    const double C44345 = C12838 * C47633;
    const double C11748 = C11744 - C11739;
    const double C27223 = C27217 - C27210;
    const double C27219 = C27213 - C27194;
    const double C38305 = C38299 - C38292;
    const double C38301 = C38295 - C38276;
    const double C12226 = C12225 - C12222;
    const double C27221 = C27215 - C27202;
    const double C27694 = C27692 - C27686;
    const double C38303 = C38297 - C38284;
    const double C38776 = C38774 - C38768;
    const double C28568 = C28566 - C28560;
    const double C39646 = C39644 - C39638;
    const double C43548 = C43547 - C43545;
    const double C376 = C370 + C358;
    const double C5394 = C5392 + C5385;
    const double C16766 = C16764 + C16757;
    const double C686 = C685 + C683;
    const double C4846 = C4838 + C4819;
    const double C16218 = C16210 + C16191;
    const double C571 = C565 + C553;
    const double C797 = C796 + C794;
    const double C984 = C981 + C975;
    const double C5538 = C5536 + C5529;
    const double C16910 = C16908 + C16901;
    const double C47213 = C47211 + C47201;
    const double C47301 = C46842 * C47299;
    const double C23709 =
        (2 * C46991 * C47167 + C46991 * (C47167 + C47299 * C47091)) / C46789;
    const double C47212 = C47210 + C47198;
    const double C47300 = C46842 * C47298;
    const double C22732 =
        (3 * (C47216 + ae * (C47032 + C47143 * C47091) +
              be * (C47035 + C47146 * C47091) + C46842 * C47317) +
         ae * (C47166 + C47298 * C47091) + be * (C47167 + C47299 * C47091) +
         C46842 *
             (2 * C47317 + ae * (C47160 + C47286 * C47091) +
              be * (C47161 + C47289 * C47091) +
              C46842 * (C47312 + ae * (C47143 + C47268 * C47091) +
                        be * (C47146 + C47271 * C47091) +
                        C46842 * (ae * (C46930 + C46957 * C47091) +
                                  be * (C46934 + C46961 * C47091) +
                                  C46842 * (C46884 + (C46878 * C46879 +
                                                      C46845 * bs[8] *
                                                          std::pow(C46840, 8)) *
                                                         C46788 * C47091))))) /
        C46815;
    const double C23708 =
        (2 * C46991 * C47166 + C46991 * (C47166 + C47298 * C47091)) / C46789;
    const double C12834 = C2211 * C47961;
    const double C33796 = C2211 * C47961;
    const double C43257 = C2211 * C47633;
    const double C12089 = C1623 * C47961;
    const double C33091 = C1623 * C47961;
    const double C6292 = C6290 - C6284;
    const double C17648 = C17646 - C17640;
    const double C7228 = C7226 - C7220;
    const double C11747 = C11743 - C11735;
    const double C18568 = C18566 - C18560;
    const double C6500 = C6498 - C6492;
    const double C11892 = C11891 - C11889;
    const double C17856 = C17854 - C17848;
    const double C27206 = C16161 * C6146;
    const double C38288 = C4789 * C6146;
    const double C43898 = C113 * C6146;
    const double C27690 = C16161 * C6636;
    const double C38772 = C4789 * C6636;
    const double C27691 = C47992 * C6639;
    const double C38773 = C47992 * C6639;
    const double C27204 = C16161 * C6145;
    const double C38286 = C4789 * C6145;
    const double C43896 = C113 * C6145;
    const double C27688 = C16161 * C6635;
    const double C38770 = C4789 * C6635;
    const double C11752 = C11748 + C11740;
    const double C27229 = C27223 + C27211;
    const double C27225 = C27219 + C27195;
    const double C38311 = C38305 + C38293;
    const double C38307 = C38301 + C38277;
    const double C12227 = C12226 + C12223;
    const double C27227 = C27221 + C27203;
    const double C27696 = C27694 + C27687;
    const double C38309 = C38303 + C38285;
    const double C38778 = C38776 + C38769;
    const double C28570 = C28568 + C28561;
    const double C39648 = C39646 + C39639;
    const double C43549 = C43548 + C43546;
    const double C10870 = C571 * C47961;
    const double C31922 = C571 * C47961;
    const double C43105 = C571 * C47633;
    const double C11141 = C797 * C47961;
    const double C32185 = C797 * C47961;
    const double C11344 = C984 * C47961;
    const double C32385 = C984 * C47961;
    const double C5994 =
        (4 * (2 * C47012 + C46842 * C47066 + C47057 * ae) +
         C46842 * (3 * C47066 + C46842 * C47213 + C47204 * ae) +
         (3 * C47057 + C46842 * C47204) * ae) /
        C46789;
    const double C6148 =
        (2 * C47012 + C46842 * C47066 + C47057 * ae + C47213 * C47091) / C46789;
    const double C6638 =
        (C46991 * (3 * C47066 + C46842 * C47213 + C47204 * ae)) / C46789;
    const double C47303 = C47261 + C47301;
    const double C5996 =
        (4 * (2 * C47060 + ae * C47065 + be * C47066 + C46842 * C47202) +
         ae * (3 * C47065 + C46842 * C47212 + C47204 * be) +
         be * (3 * C47066 + C46842 * C47213 + C47204 * ae) +
         C46842 * (3 * C47202 + ae * C47212 + be * C47213 +
                   C46842 * (2 * C47190 + ae * C47206 + be * C47207 +
                             C46842 * (C47173 + ae * C47191 + be * C47194 +
                                       C46842 * (ae * C47175 + be * C47179 +
                                                 C46842 * C46848 *
                                                     (C46878 * C46879 +
                                                      C46845 * bs[8] *
                                                          std::pow(C46840, 8)) *
                                                     C46788))))) /
        C46815;
    const double C6640 =
        (3 * (C47112 + ae * C46991 * C47055 + be * C46991 * C47058 +
              C46842 * C47237) +
         ae * C46991 * C47212 + be * C46991 * C47213 +
         C46842 *
             (2 * C47237 + ae * C46991 * C47206 + be * C46991 * C47207 +
              C46842 * (C47232 + ae * C46991 * C47191 + be * C46991 * C47194 +
                        C46842 * (ae * C46991 * C47175 + be * C46991 * C47179 +
                                  C46842 * C46991 * C46848 *
                                      (C46878 * C46879 +
                                       C46845 * bs[8] * std::pow(C46840, 8)) *
                                      C46788)))) /
        C46815;
    const double C5993 =
        (4 * (2 * C47011 + C46842 * C47065 + C47057 * be) +
         C46842 * (3 * C47065 + C46842 * C47212 + C47204 * be) +
         (3 * C47057 + C46842 * C47204) * be) /
        C46789;
    const double C6147 =
        (2 * C47011 + C46842 * C47065 + C47057 * be + C47212 * C47091) / C46789;
    const double C6637 =
        (C46991 * (3 * C47065 + C46842 * C47212 + C47204 * be)) / C46789;
    const double C47302 = C47253 + C47300;
    const double C6294 = C6292 + C6285;
    const double C17650 = C17648 + C17641;
    const double C7230 = C7228 + C7221;
    const double C11751 = C11747 + C11736;
    const double C18570 = C18568 + C18561;
    const double C6502 = C6500 + C6493;
    const double C11893 = C11892 + C11890;
    const double C17858 = C17856 + C17849;
    const double C27216 = C27204 - C27205;
    const double C38298 = C38286 - C38287;
    const double C43900 = C43896 - C43897;
    const double C27693 = C27688 - C27689;
    const double C38775 = C38770 - C38771;
    const double C11756 = C11752 * C4785;
    const double C32765 = C11752 * C16157;
    const double C43542 = C11752 * C47633;
    const double C12228 = C12227 * C4785;
    const double C33222 = C12227 * C16157;
    const double C43895 = C12227 * C47633;
    const double C43550 = C43549 * C47633;
    const double C47305 = C47303 + C47290;
    const double C47304 = C47302 + C47287;
    const double C11755 = C11751 * C47961;
    const double C32764 = C11751 * C47961;
    const double C43796 = C11751 * C47633;
    const double C12224 = C11893 * C47961;
    const double C33223 = C11893 * C47961;
    const double C27222 = C27216 - C27206;
    const double C38304 = C38298 - C38288;
    const double C43901 = C43900 - C43898;
    const double C27695 = C27693 - C27690;
    const double C38777 = C38775 - C38772;
    const double C22617 =
        (5 * (3 * C47043 + C46842 * C47167 + C47157 * ae) +
         C46842 * (4 * C47167 + C46842 * C47305 + C47293 * ae) +
         (4 * C47157 + C46842 * C47293) * ae) /
        C46789;
    const double C22731 =
        (3 * C47043 + C46842 * C47167 + C47157 * ae + C47305 * C47091) / C46789;
    const double C23077 =
        (C46991 * (4 * C47167 + C46842 * C47305 + C47293 * ae)) / C46789;
    const double C22618 =
        (5 * (3 * C47159 + ae * C47166 + be * C47167 + C46842 * C47295) +
         ae * (4 * C47166 + C46842 * C47304 + C47293 * be) +
         be * (4 * C47167 + C46842 * C47305 + C47293 * ae) +
         C46842 *
             (4 * C47295 + ae * C47304 + be * C47305 +
              C46842 *
                  (3 * C47285 + ae * C47298 + be * C47299 +
                   C46842 * (2 * C47275 + ae * C47286 + be * C47289 +
                             C46842 * (C46884 + ae * C47268 + be * C47271 +
                                       C46842 * (ae * C46957 + be * C46961 +
                                                 C46842 *
                                                     (C46878 * C46879 +
                                                      C46845 * bs[8] *
                                                          std::pow(C46840, 8)) *
                                                     C46788)))))) /
        C46815;
    const double C23078 =
        (4 * (2 * C47228 + ae * C46991 * C47160 + be * C46991 * C47161 +
              C46842 * C47334) +
         ae * C46991 * C47304 + be * C46991 * C47305 +
         C46842 *
             (3 * C47334 + ae * C46991 * C47298 + be * C46991 * C47299 +
              C46842 *
                  (2 * C47332 + ae * C46991 * C47286 + be * C46991 * C47289 +
                   C46842 *
                       (C47323 + ae * C46991 * C47268 + be * C46991 * C47271 +
                        C46842 * (ae * C46991 * C46957 + be * C46991 * C46961 +
                                  C46842 * C46991 *
                                      (C46878 * C46879 +
                                       C46845 * bs[8] * std::pow(C46840, 8)) *
                                      C46788))))) /
        C46815;
    const double C22616 =
        (5 * (3 * C47042 + C46842 * C47166 + C47157 * be) +
         C46842 * (4 * C47166 + C46842 * C47304 + C47293 * be) +
         (4 * C47157 + C46842 * C47293) * be) /
        C46789;
    const double C22730 =
        (3 * C47042 + C46842 * C47166 + C47157 * be + C47304 * C47091) / C46789;
    const double C23076 =
        (C46991 * (4 * C47166 + C46842 * C47304 + C47293 * be)) / C46789;
    const double C27228 = C27222 + C27207;
    const double C38310 = C38304 + C38289;
    const double C43902 = C43901 + C43899;
    const double C27697 = C27695 + C27691;
    const double C38779 = C38777 + C38773;
    const double C43903 = C43902 * C47633;
    d2ee[0] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C47890 * C136) * C102 +
            C174 * C103 + C175 * C104) *
               C47907 * C47704 * C47745 -
           (C371 * C104 + C372 * C103 +
            (C113 * C308 - C114 * C296 - C113 * C309 + C47890 * C326) * C102) *
               C47907 * C47704 * C47752 +
           ((C113 * C310 - C114 * C297 - C113 * C311 + C47890 * C327) * C102 +
            C373 * C103 + C374 * C104) *
               C47907 * C47704 * C2908) *
              C47663 +
          ((C372 * C102 + C371 * C103 + C375 * C104) * C47907 * C47704 *
               C47752 -
           (C176 * C104 + C175 * C103 + C174 * C102) * C47907 * C47704 *
               C47745 -
           (C376 * C104 + C374 * C103 + C373 * C102) * C47907 * C47704 *
               C2908) *
              C47672 +
          ((C175 * C102 + C176 * C103 + C177 * C104) * C47907 * C47704 *
               C47745 -
           (C686 * C104 + C375 * C103 + C371 * C102) * C47907 * C47704 *
               C47752 +
           (C374 * C102 + C376 * C103 +
            (C113 * C322 - C114 * C303 - C113 * C323 + C47890 * C333) * C104) *
               C47907 * C47704 * C2908) *
              C2911)) /
        (p * q * std::sqrt(p + q));
    d2ee[1] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C47890 * C136) * C102 +
             C174 * C103 + C175 * C104) *
                C47907 * C47943 -
            (C566 * C104 + C567 * C103 +
             (C113 * C503 - C114 * C491 - C113 * C504 + C47890 * C521) * C102) *
                C47907 * C47791) *
               C47745 +
           (((C113 * C948 - C114 * C943 - C113 * C949 + C47890 * C958) * C102 +
             C982 * C103 + C983 * C104) *
                C47907 * C47791 -
            (C371 * C104 + C372 * C103 +
             (C113 * C308 - C114 * C296 - C113 * C309 + C47890 * C326) * C102) *
                C47907 * C47943) *
               C47752 +
           (((C113 * C310 - C114 * C297 - C113 * C311 + C47890 * C327) * C102 +
             C373 * C103 + C374 * C104) *
                C47907 * C47943 -
            (C1623 * C104 + C1624 * C103 +
             (C113 * C1321 - C114 * C1307 - C113 * C1322 + C47890 * C1334) *
                 C102) *
                C47907 * C47791) *
               C2908) *
              C2648 +
          (((C567 * C102 + C566 * C103 + C570 * C104) * C47907 * C47791 -
            (C176 * C104 + C175 * C103 + C174 * C102) * C47907 * C47943) *
               C47745 +
           ((C372 * C102 + C371 * C103 + C375 * C104) * C47907 * C47943 -
            (C984 * C104 + C983 * C103 + C982 * C102) * C47907 * C47791) *
               C47752 +
           ((C1624 * C102 + C1623 * C103 +
             (C113 * C1607 - C114 * C1606 - C113 * C1608 + C47890 * C1609) *
                 C104) *
                C47907 * C47791 -
            (C376 * C104 + C374 * C103 + C373 * C102) * C47907 * C47943) *
               C2908) *
              C47669)) /
        (p * q * std::sqrt(p + q));
    d2ee[2] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C47890 * C136) * C102 +
            C174 * C103 + C175 * C104) *
               C47907 * C47704 * C48020 -
           (C371 * C104 + C372 * C103 +
            (C113 * C308 - C114 * C296 - C113 * C309 + C47890 * C326) * C102) *
               C47907 * C47704 * C48016 +
           ((C113 * C310 - C114 * C297 - C113 * C311 + C47890 * C327) * C102 +
            C373 * C103 + C374 * C104) *
               C47907 * C47704 * C48006 -
           (C1459 * C104 + C1460 * C103 +
            (C113 * C1178 - C114 * C1170 - C113 * C1179 + C47890 * C1188) *
                C102) *
               C47907 * C47704 * C47984) *
              C2648 +
          ((C372 * C102 + C371 * C103 + C375 * C104) * C47907 * C47704 *
               C48016 -
           (C176 * C104 + C175 * C103 + C174 * C102) * C47907 * C47704 *
               C48020 -
           (C376 * C104 + C374 * C103 + C373 * C102) * C47907 * C47704 *
               C48006 +
           (C1460 * C102 + C1459 * C103 +
            (C113 * C1443 - C114 * C1442 - C113 * C1444 + C47890 * C1445) *
                C104) *
               C47907 * C47704 * C47984) *
              C47669)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C47890 * C136) * C102 +
            C174 * C103 + C175 * C104) *
               C47907 * C47704 * C2540 -
           (C371 * C104 + C372 * C103 +
            (C113 * C308 - C114 * C296 - C113 * C309 + C47890 * C326) * C102) *
               C47907 * C47704 * C47749) *
              C48019 +
          ((C372 * C102 + C371 * C103 + C375 * C104) * C47907 * C47704 *
               C47749 -
           (C176 * C104 + C175 * C103 + C174 * C102) * C47907 * C47704 *
               C2540) *
              C48012 +
          ((C175 * C102 + C176 * C103 + C177 * C104) * C47907 * C47704 * C2540 -
           (C686 * C104 + C375 * C103 + C371 * C102) * C47907 * C47704 *
               C47749) *
              C47999 +
          ((C375 * C102 + C686 * C103 +
            (C113 * C676 - C114 * C675 - C113 * C677 + C47890 * C678) * C104) *
               C47907 * C47704 * C47749 -
           (C178 * C104 + C177 * C103 + C176 * C102) * C47907 * C47704 *
               C2540) *
              C47978)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C47890 * C136) * C102 +
             C174 * C103 + C175 * C104) *
                C47907 * C48014 -
            (C566 * C104 + C567 * C103 +
             (C113 * C503 - C114 * C491 - C113 * C504 + C47890 * C521) * C102) *
                C47907 * C48003 +
            ((C113 * C505 - C114 * C492 - C113 * C506 + C47890 * C522) * C102 +
             C568 * C103 + C569 * C104) *
                C47907 * C47977) *
               C2540 +
           (((C113 * C948 - C114 * C943 - C113 * C949 + C47890 * C958) * C102 +
             C982 * C103 + C983 * C104) *
                C47907 * C48003 -
            (C371 * C104 + C372 * C103 +
             (C113 * C308 - C114 * C296 - C113 * C309 + C47890 * C326) * C102) *
                C47907 * C48014 -
            (C2211 * C104 + C2212 * C103 +
             (C113 * C1315 - C114 * C1304 - C113 * C1316 + C47890 * C1331) *
                 C102) *
                C47907 * C47977) *
               C47749) *
              C2648 +
          (((C567 * C102 + C566 * C103 + C570 * C104) * C47907 * C48003 -
            (C176 * C104 + C175 * C103 + C174 * C102) * C47907 * C48014 -
            (C571 * C104 + C569 * C103 + C568 * C102) * C47907 * C47977) *
               C2540 +
           ((C372 * C102 + C371 * C103 + C375 * C104) * C47907 * C48014 -
            (C984 * C104 + C983 * C103 + C982 * C102) * C47907 * C48003 +
            (C2212 * C102 + C2211 * C103 +
             (C113 * C2195 - C114 * C2194 - C113 * C2196 + C47890 * C2197) *
                 C104) *
                C47907 * C47977) *
               C47749) *
              C47669)) /
            (p * q * std::sqrt(p + q));
    d2ee[3] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C47890 * C136) * C102 +
             C174 * C103 + C175 * C104) *
                C47907 * C47943 -
            (C566 * C104 + C567 * C103 +
             (C113 * C503 - C114 * C491 - C113 * C504 + C47890 * C521) * C102) *
                C47907 * C47791) *
               C2540 +
           (((C113 * C948 - C114 * C943 - C113 * C949 + C47890 * C958) * C102 +
             C982 * C103 + C983 * C104) *
                C47907 * C47791 -
            (C371 * C104 + C372 * C103 +
             (C113 * C308 - C114 * C296 - C113 * C309 + C47890 * C326) * C102) *
                C47907 * C47943) *
               C47749) *
              C47663 +
          (((C567 * C102 + C566 * C103 + C570 * C104) * C47907 * C47791 -
            (C176 * C104 + C175 * C103 + C174 * C102) * C47907 * C47943) *
               C2540 +
           ((C372 * C102 + C371 * C103 + C375 * C104) * C47907 * C47943 -
            (C984 * C104 + C983 * C103 + C982 * C102) * C47907 * C47791) *
               C47749) *
              C47672 +
          (((C175 * C102 + C176 * C103 + C177 * C104) * C47907 * C47943 -
            (C797 * C104 + C570 * C103 + C566 * C102) * C47907 * C47791) *
               C2540 +
           ((C983 * C102 + C984 * C103 +
             (C113 * C956 - C114 * C947 - C113 * C957 + C47890 * C962) * C104) *
                C47907 * C47791 -
            (C686 * C104 + C375 * C103 + C371 * C102) * C47907 * C47943) *
               C47749) *
              C2911)) /
        (p * q * std::sqrt(p + q));
    d2ee[4] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C47890 * C136) * C102 +
            C174 * C103 + C175 * C104) *
               C47907 * C47704 * C2540 -
           (C371 * C104 + C372 * C103 +
            (C113 * C308 - C114 * C296 - C113 * C309 + C47890 * C326) * C102) *
               C47907 * C47704 * C47749) *
              C48019 +
          ((C372 * C102 + C371 * C103 + C375 * C104) * C47907 * C47704 *
               C47749 -
           (C176 * C104 + C175 * C103 + C174 * C102) * C47907 * C47704 *
               C2540) *
              C48012 +
          ((C175 * C102 + C176 * C103 + C177 * C104) * C47907 * C47704 * C2540 -
           (C686 * C104 + C375 * C103 + C371 * C102) * C47907 * C47704 *
               C47749) *
              C47999 +
          ((C375 * C102 + C686 * C103 +
            (C113 * C676 - C114 * C675 - C113 * C677 + C47890 * C678) * C104) *
               C47907 * C47704 * C47749 -
           (C178 * C104 + C177 * C103 + C176 * C102) * C47907 * C47704 *
               C2540) *
              C47978)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C47890 * C136) * C102 +
            C174 * C103 + C175 * C104) *
               C47907 * C47704 * C48020 -
           (C371 * C104 + C372 * C103 +
            (C113 * C308 - C114 * C296 - C113 * C309 + C47890 * C326) * C102) *
               C47907 * C47704 * C48016 +
           ((C113 * C310 - C114 * C297 - C113 * C311 + C47890 * C327) * C102 +
            C373 * C103 + C374 * C104) *
               C47907 * C47704 * C48006 -
           (C1459 * C104 + C1460 * C103 +
            (C113 * C1178 - C114 * C1170 - C113 * C1179 + C47890 * C1188) *
                C102) *
               C47907 * C47704 * C47984) *
              C2648 +
          ((C372 * C102 + C371 * C103 + C375 * C104) * C47907 * C47704 *
               C48016 -
           (C176 * C104 + C175 * C103 + C174 * C102) * C47907 * C47704 *
               C48020 -
           (C376 * C104 + C374 * C103 + C373 * C102) * C47907 * C47704 *
               C48006 +
           (C1460 * C102 + C1459 * C103 +
            (C113 * C1443 - C114 * C1442 - C113 * C1444 + C47890 * C1445) *
                C104) *
               C47907 * C47704 * C47984) *
              C47669)) /
            (p * q * std::sqrt(p + q));
    d2ee[5] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C47890 * C136) * C102 +
             C174 * C103 + C175 * C104) *
                C47907 * C3302 -
            (C566 * C104 + C567 * C103 +
             (C113 * C503 - C114 * C491 - C113 * C504 + C47890 * C521) * C102) *
                C47907 * C47791) *
               C47745 +
           (((C113 * C948 - C114 * C943 - C113 * C949 + C47890 * C958) * C102 +
             C982 * C103 + C983 * C104) *
                C47907 * C47791 -
            (C371 * C104 + C372 * C103 +
             (C113 * C308 - C114 * C296 - C113 * C309 + C47890 * C326) * C102) *
                C47907 * C3302) *
               C47752 +
           (((C113 * C310 - C114 * C297 - C113 * C311 + C47890 * C327) * C102 +
             C373 * C103 + C374 * C104) *
                C47907 * C3302 -
            (C1623 * C104 + C1624 * C103 +
             (C113 * C1321 - C114 * C1307 - C113 * C1322 + C47890 * C1334) *
                 C102) *
                C47907 * C47791) *
               C2908) *
              C47928 +
          (((C567 * C102 + C566 * C103 + C570 * C104) * C47907 * C47791 -
            (C176 * C104 + C175 * C103 + C174 * C102) * C47907 * C3302) *
               C47745 +
           ((C372 * C102 + C371 * C103 + C375 * C104) * C47907 * C3302 -
            (C984 * C104 + C983 * C103 + C982 * C102) * C47907 * C47791) *
               C47752 +
           ((C1624 * C102 + C1623 * C103 +
             (C113 * C1607 - C114 * C1606 - C113 * C1608 + C47890 * C1609) *
                 C104) *
                C47907 * C47791 -
            (C376 * C104 + C374 * C103 + C373 * C102) * C47907 * C3302) *
               C2908) *
              C47669)) /
        (p * q * std::sqrt(p + q));
    d2ee[6] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C47890 * C136) * C102 +
            C174 * C103 + C175 * C104) *
               C47907 * C47787 -
           (C566 * C104 + C567 * C103 +
            (C113 * C503 - C114 * C491 - C113 * C504 + C47890 * C521) * C102) *
               C47907 * C47794 +
           ((C113 * C505 - C114 * C492 - C113 * C506 + C47890 * C522) * C102 +
            C568 * C103 + C569 * C104) *
               C47907 * C3810) *
              C47745 +
          (((C113 * C948 - C114 * C943 - C113 * C949 + C47890 * C958) * C102 +
            C982 * C103 + C983 * C104) *
               C47907 * C47794 -
           (C371 * C104 + C372 * C103 +
            (C113 * C308 - C114 * C296 - C113 * C309 + C47890 * C326) * C102) *
               C47907 * C47787 -
           (C2211 * C104 + C2212 * C103 +
            (C113 * C1315 - C114 * C1304 - C113 * C1316 + C47890 * C1331) *
                C102) *
               C47907 * C3810) *
              C47752 +
          (((C113 * C310 - C114 * C297 - C113 * C311 + C47890 * C327) * C102 +
            C373 * C103 + C374 * C104) *
               C47907 * C47787 -
           (C1623 * C104 + C1624 * C103 +
            (C113 * C1321 - C114 * C1307 - C113 * C1322 + C47890 * C1334) *
                C102) *
               C47907 * C47794 +
           ((C113 * C1323 - C114 * C1308 - C113 * C1324 + C47890 * C1335) *
                C102 +
            (C113 * C1325 - C114 * C1309 - C113 * C1326 + C47890 * C1336) *
                C103 +
            (C113 * C1327 - C114 * C1310 - C113 * C1328 + C47890 * C1337) *
                C104) *
               C47907 * C3810) *
              C2908) *
         C47658) /
        (p * q * std::sqrt(p + q));
    d2ee[7] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C47890 * C136) * C102 +
            C174 * C103 + C175 * C104) *
               C47907 * C3302 -
           (C566 * C104 + C567 * C103 +
            (C113 * C503 - C114 * C491 - C113 * C504 + C47890 * C521) * C102) *
               C47907 * C47791) *
              C48020 +
          (((C113 * C948 - C114 * C943 - C113 * C949 + C47890 * C958) * C102 +
            C982 * C103 + C983 * C104) *
               C47907 * C47791 -
           (C371 * C104 + C372 * C103 +
            (C113 * C308 - C114 * C296 - C113 * C309 + C47890 * C326) * C102) *
               C47907 * C3302) *
              C48016 +
          (((C113 * C310 - C114 * C297 - C113 * C311 + C47890 * C327) * C102 +
            C373 * C103 + C374 * C104) *
               C47907 * C3302 -
           (C1623 * C104 + C1624 * C103 +
            (C113 * C1321 - C114 * C1307 - C113 * C1322 + C47890 * C1334) *
                C102) *
               C47907 * C47791) *
              C48006 +
          (((C113 * C1725 - C114 * C1722 - C113 * C1726 + C47890 * C1731) *
                C102 +
            (C113 * C1727 - C114 * C1723 - C113 * C1728 + C47890 * C1732) *
                C103 +
            (C113 * C1729 - C114 * C1724 - C113 * C1730 + C47890 * C1733) *
                C104) *
               C47907 * C47791 -
           (C1459 * C104 + C1460 * C103 +
            (C113 * C1178 - C114 * C1170 - C113 * C1179 + C47890 * C1188) *
                C102) *
               C47907 * C3302) *
              C47984) *
         C47658) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C47890 * C136) * C102 +
             C174 * C103 + C175 * C104) *
                C47907 * C3302 -
            (C566 * C104 + C567 * C103 +
             (C113 * C503 - C114 * C491 - C113 * C504 + C47890 * C521) * C102) *
                C47907 * C47791) *
               C2540 +
           (((C113 * C948 - C114 * C943 - C113 * C949 + C47890 * C958) * C102 +
             C982 * C103 + C983 * C104) *
                C47907 * C47791 -
            (C371 * C104 + C372 * C103 +
             (C113 * C308 - C114 * C296 - C113 * C309 + C47890 * C326) * C102) *
                C47907 * C3302) *
               C47749) *
              C48010 +
          (((C567 * C102 + C566 * C103 + C570 * C104) * C47907 * C47791 -
            (C176 * C104 + C175 * C103 + C174 * C102) * C47907 * C3302) *
               C2540 +
           ((C372 * C102 + C371 * C103 + C375 * C104) * C47907 * C3302 -
            (C984 * C104 + C983 * C103 + C982 * C102) * C47907 * C47791) *
               C47749) *
              C47997 +
          (((C175 * C102 + C176 * C103 + C177 * C104) * C47907 * C3302 -
            (C797 * C104 + C570 * C103 + C566 * C102) * C47907 * C47791) *
               C2540 +
           ((C983 * C102 + C984 * C103 +
             (C113 * C956 - C114 * C947 - C113 * C957 + C47890 * C962) * C104) *
                C47907 * C47791 -
            (C686 * C104 + C375 * C103 + C371 * C102) * C47907 * C3302) *
               C47749) *
              C47968)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C47890 * C136) * C102 +
            C174 * C103 + C175 * C104) *
               C47907 * C48021 -
           (C566 * C104 + C567 * C103 +
            (C113 * C503 - C114 * C491 - C113 * C504 + C47890 * C521) * C102) *
               C47907 * C48018 +
           ((C113 * C505 - C114 * C492 - C113 * C506 + C47890 * C522) * C102 +
            C568 * C103 + C569 * C104) *
               C47907 * C48009 -
           (C2331 * C104 + C2332 * C103 +
            (C113 * C2034 - C114 * C2026 - C113 * C2035 + C47890 * C2044) *
                C102) *
               C47907 * C47990) *
              C2540 +
          (((C113 * C948 - C114 * C943 - C113 * C949 + C47890 * C958) * C102 +
            C982 * C103 + C983 * C104) *
               C47907 * C48018 -
           (C371 * C104 + C372 * C103 +
            (C113 * C308 - C114 * C296 - C113 * C309 + C47890 * C326) * C102) *
               C47907 * C48021 -
           (C2211 * C104 + C2212 * C103 +
            (C113 * C1315 - C114 * C1304 - C113 * C1316 + C47890 * C1331) *
                C102) *
               C47907 * C48009 +
           ((C113 * C2433 - C114 * C2430 - C113 * C2434 + C47890 * C2439) *
                C102 +
            (C113 * C2435 - C114 * C2431 - C113 * C2436 + C47890 * C2440) *
                C103 +
            (C113 * C2437 - C114 * C2432 - C113 * C2438 + C47890 * C2441) *
                C104) *
               C47907 * C47990) *
              C47749) *
         C47658) /
            (p * q * std::sqrt(p + q));
    d2ee[8] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C47890 * C136) * C102 +
             C174 * C103 + C175 * C104) *
                C47907 * C47787 -
            (C566 * C104 + C567 * C103 +
             (C113 * C503 - C114 * C491 - C113 * C504 + C47890 * C521) * C102) *
                C47907 * C47794 +
            ((C113 * C505 - C114 * C492 - C113 * C506 + C47890 * C522) * C102 +
             C568 * C103 + C569 * C104) *
                C47907 * C3810) *
               C2540 +
           (((C113 * C948 - C114 * C943 - C113 * C949 + C47890 * C958) * C102 +
             C982 * C103 + C983 * C104) *
                C47907 * C47794 -
            (C371 * C104 + C372 * C103 +
             (C113 * C308 - C114 * C296 - C113 * C309 + C47890 * C326) * C102) *
                C47907 * C47787 -
            (C2211 * C104 + C2212 * C103 +
             (C113 * C1315 - C114 * C1304 - C113 * C1316 + C47890 * C1331) *
                 C102) *
                C47907 * C3810) *
               C47749) *
              C47928 +
          (((C567 * C102 + C566 * C103 + C570 * C104) * C47907 * C47794 -
            (C176 * C104 + C175 * C103 + C174 * C102) * C47907 * C47787 -
            (C571 * C104 + C569 * C103 + C568 * C102) * C47907 * C3810) *
               C2540 +
           ((C372 * C102 + C371 * C103 + C375 * C104) * C47907 * C47787 -
            (C984 * C104 + C983 * C103 + C982 * C102) * C47907 * C47794 +
            (C2212 * C102 + C2211 * C103 +
             (C113 * C2195 - C114 * C2194 - C113 * C2196 + C47890 * C2197) *
                 C104) *
                C47907 * C3810) *
               C47749) *
              C47669)) /
        (p * q * std::sqrt(p + q));
    d2ee[9] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C47890 * C136) * C102 +
             C174 * C103 + C175 * C104) *
                C47907 * C3302 -
            (C566 * C104 + C567 * C103 +
             (C113 * C503 - C114 * C491 - C113 * C504 + C47890 * C521) * C102) *
                C47907 * C47791) *
               C2540 +
           (((C113 * C948 - C114 * C943 - C113 * C949 + C47890 * C958) * C102 +
             C982 * C103 + C983 * C104) *
                C47907 * C47791 -
            (C371 * C104 + C372 * C103 +
             (C113 * C308 - C114 * C296 - C113 * C309 + C47890 * C326) * C102) *
                C47907 * C3302) *
               C47749) *
              C48010 +
          (((C567 * C102 + C566 * C103 + C570 * C104) * C47907 * C47791 -
            (C176 * C104 + C175 * C103 + C174 * C102) * C47907 * C3302) *
               C2540 +
           ((C372 * C102 + C371 * C103 + C375 * C104) * C47907 * C3302 -
            (C984 * C104 + C983 * C103 + C982 * C102) * C47907 * C47791) *
               C47749) *
              C47997 +
          (((C175 * C102 + C176 * C103 + C177 * C104) * C47907 * C3302 -
            (C797 * C104 + C570 * C103 + C566 * C102) * C47907 * C47791) *
               C2540 +
           ((C983 * C102 + C984 * C103 +
             (C113 * C956 - C114 * C947 - C113 * C957 + C47890 * C962) * C104) *
                C47907 * C47791 -
            (C686 * C104 + C375 * C103 + C371 * C102) * C47907 * C3302) *
               C47749) *
              C47968)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C47890 * C136) * C102 +
            C174 * C103 + C175 * C104) *
               C47907 * C3302 -
           (C566 * C104 + C567 * C103 +
            (C113 * C503 - C114 * C491 - C113 * C504 + C47890 * C521) * C102) *
               C47907 * C47791) *
              C48020 +
          (((C113 * C948 - C114 * C943 - C113 * C949 + C47890 * C958) * C102 +
            C982 * C103 + C983 * C104) *
               C47907 * C47791 -
           (C371 * C104 + C372 * C103 +
            (C113 * C308 - C114 * C296 - C113 * C309 + C47890 * C326) * C102) *
               C47907 * C3302) *
              C48016 +
          (((C113 * C310 - C114 * C297 - C113 * C311 + C47890 * C327) * C102 +
            C373 * C103 + C374 * C104) *
               C47907 * C3302 -
           (C1623 * C104 + C1624 * C103 +
            (C113 * C1321 - C114 * C1307 - C113 * C1322 + C47890 * C1334) *
                C102) *
               C47907 * C47791) *
              C48006 +
          (((C113 * C1725 - C114 * C1722 - C113 * C1726 + C47890 * C1731) *
                C102 +
            (C113 * C1727 - C114 * C1723 - C113 * C1728 + C47890 * C1732) *
                C103 +
            (C113 * C1729 - C114 * C1724 - C113 * C1730 + C47890 * C1733) *
                C104) *
               C47907 * C47791 -
           (C1459 * C104 + C1460 * C103 +
            (C113 * C1178 - C114 * C1170 - C113 * C1179 + C47890 * C1188) *
                C102) *
               C47907 * C3302) *
              C47984) *
         C47658) /
            (p * q * std::sqrt(p + q));
    d2ee[10] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C47890 * C136) * C102 +
            C174 * C103 + C175 * C104) *
               C47907 * C47704 * C1436 -
           (C371 * C104 + C372 * C103 +
            (C113 * C308 - C114 * C296 - C113 * C309 + C47890 * C326) * C102) *
               C47907 * C47704 * C1437 +
           ((C113 * C310 - C114 * C297 - C113 * C311 + C47890 * C327) * C102 +
            C373 * C103 + C374 * C104) *
               C47907 * C47704 * C1438 -
           (C1459 * C104 + C1460 * C103 +
            (C113 * C1178 - C114 * C1170 - C113 * C1179 + C47890 * C1188) *
                C102) *
               C47907 * C47704 * C47984) *
              C47928 +
          ((C372 * C102 + C371 * C103 + C375 * C104) * C47907 * C47704 * C1437 -
           (C176 * C104 + C175 * C103 + C174 * C102) * C47907 * C47704 * C1436 -
           (C376 * C104 + C374 * C103 + C373 * C102) * C47907 * C47704 * C1438 +
           (C1460 * C102 + C1459 * C103 +
            (C113 * C1443 - C114 * C1442 - C113 * C1444 + C47890 * C1445) *
                C104) *
               C47907 * C47704 * C47984) *
              C47669)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C47890 * C136) * C102 +
            C174 * C103 + C175 * C104) *
               C47907 * C47704 * C47942 -
           (C371 * C104 + C372 * C103 +
            (C113 * C308 - C114 * C296 - C113 * C309 + C47890 * C326) * C102) *
               C47907 * C47704 * C47749) *
              C671 +
          ((C372 * C102 + C371 * C103 + C375 * C104) * C47907 * C47704 *
               C47749 -
           (C176 * C104 + C175 * C103 + C174 * C102) * C47907 * C47704 *
               C47942) *
              C672 +
          ((C175 * C102 + C176 * C103 + C177 * C104) * C47907 * C47704 *
               C47942 -
           (C686 * C104 + C375 * C103 + C371 * C102) * C47907 * C47704 *
               C47749) *
              C673 +
          ((C375 * C102 + C686 * C103 +
            (C113 * C676 - C114 * C675 - C113 * C677 + C47890 * C678) * C104) *
               C47907 * C47704 * C47749 -
           (C178 * C104 + C177 * C103 + C176 * C102) * C47907 * C47704 *
               C47942) *
              C47978)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C47890 * C136) * C102 +
             C174 * C103 + C175 * C104) *
                C47907 * C1844 -
            (C566 * C104 + C567 * C103 +
             (C113 * C503 - C114 * C491 - C113 * C504 + C47890 * C521) * C102) *
                C47907 * C1845 +
            ((C113 * C505 - C114 * C492 - C113 * C506 + C47890 * C522) * C102 +
             C568 * C103 + C569 * C104) *
                C47907 * C47977) *
               C47942 +
           (((C113 * C948 - C114 * C943 - C113 * C949 + C47890 * C958) * C102 +
             C982 * C103 + C983 * C104) *
                C47907 * C1845 -
            (C371 * C104 + C372 * C103 +
             (C113 * C308 - C114 * C296 - C113 * C309 + C47890 * C326) * C102) *
                C47907 * C1844 -
            (C2211 * C104 + C2212 * C103 +
             (C113 * C1315 - C114 * C1304 - C113 * C1316 + C47890 * C1331) *
                 C102) *
                C47907 * C47977) *
               C47749) *
              C47928 +
          (((C567 * C102 + C566 * C103 + C570 * C104) * C47907 * C1845 -
            (C176 * C104 + C175 * C103 + C174 * C102) * C47907 * C1844 -
            (C571 * C104 + C569 * C103 + C568 * C102) * C47907 * C47977) *
               C47942 +
           ((C372 * C102 + C371 * C103 + C375 * C104) * C47907 * C1844 -
            (C984 * C104 + C983 * C103 + C982 * C102) * C47907 * C1845 +
            (C2212 * C102 + C2211 * C103 +
             (C113 * C2195 - C114 * C2194 - C113 * C2196 + C47890 * C2197) *
                 C104) *
                C47907 * C47977) *
               C47749) *
              C47669)) /
            (p * q * std::sqrt(p + q));
    d2ee[11] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C47890 * C136) * C102 +
            C174 * C103 + C175 * C104) *
               C47907 * C47943 -
           (C566 * C104 + C567 * C103 +
            (C113 * C503 - C114 * C491 - C113 * C504 + C47890 * C521) * C102) *
               C47907 * C47791) *
              C1436 +
          (((C113 * C948 - C114 * C943 - C113 * C949 + C47890 * C958) * C102 +
            C982 * C103 + C983 * C104) *
               C47907 * C47791 -
           (C371 * C104 + C372 * C103 +
            (C113 * C308 - C114 * C296 - C113 * C309 + C47890 * C326) * C102) *
               C47907 * C47943) *
              C1437 +
          (((C113 * C310 - C114 * C297 - C113 * C311 + C47890 * C327) * C102 +
            C373 * C103 + C374 * C104) *
               C47907 * C47943 -
           (C1623 * C104 + C1624 * C103 +
            (C113 * C1321 - C114 * C1307 - C113 * C1322 + C47890 * C1334) *
                C102) *
               C47907 * C47791) *
              C1438 +
          (((C113 * C1725 - C114 * C1722 - C113 * C1726 + C47890 * C1731) *
                C102 +
            (C113 * C1727 - C114 * C1723 - C113 * C1728 + C47890 * C1732) *
                C103 +
            (C113 * C1729 - C114 * C1724 - C113 * C1730 + C47890 * C1733) *
                C104) *
               C47907 * C47791 -
           (C1459 * C104 + C1460 * C103 +
            (C113 * C1178 - C114 * C1170 - C113 * C1179 + C47890 * C1188) *
                C102) *
               C47907 * C47943) *
              C47984) *
         C47658) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C47890 * C136) * C102 +
             C174 * C103 + C175 * C104) *
                C47907 * C47943 -
            (C566 * C104 + C567 * C103 +
             (C113 * C503 - C114 * C491 - C113 * C504 + C47890 * C521) * C102) *
                C47907 * C47791) *
               C47942 +
           (((C113 * C948 - C114 * C943 - C113 * C949 + C47890 * C958) * C102 +
             C982 * C103 + C983 * C104) *
                C47907 * C47791 -
            (C371 * C104 + C372 * C103 +
             (C113 * C308 - C114 * C296 - C113 * C309 + C47890 * C326) * C102) *
                C47907 * C47943) *
               C47749) *
              C291 +
          (((C567 * C102 + C566 * C103 + C570 * C104) * C47907 * C47791 -
            (C176 * C104 + C175 * C103 + C174 * C102) * C47907 * C47943) *
               C47942 +
           ((C372 * C102 + C371 * C103 + C375 * C104) * C47907 * C47943 -
            (C984 * C104 + C983 * C103 + C982 * C102) * C47907 * C47791) *
               C47749) *
              C292 +
          (((C175 * C102 + C176 * C103 + C177 * C104) * C47907 * C47943 -
            (C797 * C104 + C570 * C103 + C566 * C102) * C47907 * C47791) *
               C47942 +
           ((C983 * C102 + C984 * C103 +
             (C113 * C956 - C114 * C947 - C113 * C957 + C47890 * C962) * C104) *
                C47907 * C47791 -
            (C686 * C104 + C375 * C103 + C371 * C102) * C47907 * C47943) *
               C47749) *
              C47968)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C47890 * C136) * C102 +
            C174 * C103 + C175 * C104) *
               C47907 * C2310 -
           (C566 * C104 + C567 * C103 +
            (C113 * C503 - C114 * C491 - C113 * C504 + C47890 * C521) * C102) *
               C47907 * C2311 +
           ((C113 * C505 - C114 * C492 - C113 * C506 + C47890 * C522) * C102 +
            C568 * C103 + C569 * C104) *
               C47907 * C2312 -
           (C2331 * C104 + C2332 * C103 +
            (C113 * C2034 - C114 * C2026 - C113 * C2035 + C47890 * C2044) *
                C102) *
               C47907 * C47990) *
              C47942 +
          (((C113 * C948 - C114 * C943 - C113 * C949 + C47890 * C958) * C102 +
            C982 * C103 + C983 * C104) *
               C47907 * C2311 -
           (C371 * C104 + C372 * C103 +
            (C113 * C308 - C114 * C296 - C113 * C309 + C47890 * C326) * C102) *
               C47907 * C2310 -
           (C2211 * C104 + C2212 * C103 +
            (C113 * C1315 - C114 * C1304 - C113 * C1316 + C47890 * C1331) *
                C102) *
               C47907 * C2312 +
           ((C113 * C2433 - C114 * C2430 - C113 * C2434 + C47890 * C2439) *
                C102 +
            (C113 * C2435 - C114 * C2431 - C113 * C2436 + C47890 * C2440) *
                C103 +
            (C113 * C2437 - C114 * C2432 - C113 * C2438 + C47890 * C2441) *
                C104) *
               C47907 * C47990) *
              C47749) *
         C47658) /
            (p * q * std::sqrt(p + q));
    d2ee[12] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((C113 * C122 - C114 * C115 - C113 * C123 + C47890 * C136) *
                   C102 +
               C174 * C103 + C175 * C104) *
                  C47907 * C47704 * C47686 * C108 -
              (C176 * C104 + C175 * C103 + C174 * C102) * C47907 * C47704 *
                  C47686 * C109 +
              (C175 * C102 + C176 * C103 + C177 * C104) * C47907 * C47704 *
                  C47686 * C110 -
              (C178 * C104 + C177 * C103 + C176 * C102) * C47907 * C47704 *
                  C47686 * C111 +
              (C177 * C102 + C178 * C103 +
               (C113 * C134 - C114 * C121 - C113 * C135 + C47890 * C142) *
                   C104) *
                  C47907 * C47704 * C47686 * C112) +
         0.5 * std::pow(Pi, 2.5) *
             ((((C113 * C122 - C114 * C115 - C113 * C123 + C47890 * C136) *
                    C102 +
                C174 * C103 + C175 * C104) *
                   C47907 * C47704 * C48013 -
               (C371 * C104 + C372 * C103 +
                (C113 * C308 - C114 * C296 - C113 * C309 + C47890 * C326) *
                    C102) *
                   C47907 * C47704 * C48001 +
               ((C113 * C310 - C114 * C297 - C113 * C311 + C47890 * C327) *
                    C102 +
                C373 * C103 + C374 * C104) *
                   C47907 * C47704 * C47974) *
                  C291 +
              ((C372 * C102 + C371 * C103 + C375 * C104) * C47907 * C47704 *
                   C48001 -
               (C176 * C104 + C175 * C103 + C174 * C102) * C47907 * C47704 *
                   C48013 -
               (C376 * C104 + C374 * C103 + C373 * C102) * C47907 * C47704 *
                   C47974) *
                  C292 +
              ((C175 * C102 + C176 * C103 + C177 * C104) * C47907 * C47704 *
                   C48013 -
               ((C113 * C320 - C114 * C302 - C113 * C321 + C47890 * C332) *
                    C104 +
                C375 * C103 + C371 * C102) *
                   C47907 * C47704 * C48001 +
               (C374 * C102 + C376 * C103 +
                (C113 * C322 - C114 * C303 - C113 * C323 + C47890 * C333) *
                    C104) *
                   C47907 * C47704 * C47974) *
                  C47968)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C47890 * C136) * C102 +
            C174 * C103 + C175 * C104) *
               C47907 * C48014 -
           (C566 * C104 + C567 * C103 +
            (C113 * C503 - C114 * C491 - C113 * C504 + C47890 * C521) * C102) *
               C47907 * C48003 +
           ((C113 * C505 - C114 * C492 - C113 * C506 + C47890 * C522) * C102 +
            C568 * C103 + C569 * C104) *
               C47907 * C47977) *
              C47686 * C291 +
          ((C567 * C102 + C566 * C103 + C570 * C104) * C47907 * C48003 -
           (C176 * C104 + C175 * C103 + C174 * C102) * C47907 * C48014 -
           (C571 * C104 + C569 * C103 + C568 * C102) * C47907 * C47977) *
              C47686 * C292 +
          ((C175 * C102 + C176 * C103 + C177 * C104) * C47907 * C48014 -
           ((C113 * C515 - C114 * C497 - C113 * C516 + C47890 * C527) * C104 +
            C570 * C103 + C566 * C102) *
               C47907 * C48003 +
           (C569 * C102 + C571 * C103 +
            (C113 * C517 - C114 * C498 - C113 * C518 + C47890 * C528) * C104) *
               C47907 * C47977) *
              C47686 * C47968)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C47890 * C136) * C102 +
            C174 * C103 + C175 * C104) *
               C47907 * C47704 * C1094 -
           (C371 * C104 + C372 * C103 +
            (C113 * C308 - C114 * C296 - C113 * C309 + C47890 * C326) * C102) *
               C47907 * C47704 * C1095 +
           ((C113 * C310 - C114 * C297 - C113 * C311 + C47890 * C327) * C102 +
            C373 * C103 + C374 * C104) *
               C47907 * C47704 * C47974) *
              C48010 +
          ((C372 * C102 + C371 * C103 + C375 * C104) * C47907 * C47704 * C1095 -
           (C176 * C104 + C175 * C103 + C174 * C102) * C47907 * C47704 * C1094 -
           (C376 * C104 + C374 * C103 + C373 * C102) * C47907 * C47704 *
               C47974) *
              C47997 +
          ((C175 * C102 + C176 * C103 + C177 * C104) * C47907 * C47704 * C1094 -
           (C686 * C104 + C375 * C103 + C371 * C102) * C47907 * C47704 * C1095 +
           (C374 * C102 + C376 * C103 +
            (C113 * C322 - C114 * C303 - C113 * C323 + C47890 * C333) * C104) *
               C47907 * C47704 * C47974) *
              C47968)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C113 * C122 - C114 * C115 - C113 * C123 + C47890 * C136) * C102 +
           C174 * C103 + C175 * C104) *
              C47907 * C47704 * C1162 -
          (C371 * C104 + C372 * C103 +
           (C113 * C308 - C114 * C296 - C113 * C309 + C47890 * C326) * C102) *
              C47907 * C47704 * C1163 +
          ((C113 * C310 - C114 * C297 - C113 * C311 + C47890 * C327) * C102 +
           C373 * C103 + C374 * C104) *
              C47907 * C47704 * C1164 -
          ((C113 * C1174 - C114 * C1168 - C113 * C1175 + C47890 * C1186) *
               C104 +
           (C113 * C1176 - C114 * C1169 - C113 * C1177 + C47890 * C1187) *
               C103 +
           (C113 * C1178 - C114 * C1170 - C113 * C1179 + C47890 * C1188) *
               C102) *
              C47907 * C47704 * C1165 +
          ((C113 * C1180 - C114 * C1171 - C113 * C1181 + C47890 * C1189) *
               C102 +
           (C113 * C1182 - C114 * C1172 - C113 * C1183 + C47890 * C1190) *
               C103 +
           (C113 * C1184 - C114 * C1173 - C113 * C1185 + C47890 * C1191) *
               C104) *
              C47907 * C47704 * C1166) *
         C47658) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C47890 * C136) * C102 +
            C174 * C103 + C175 * C104) *
               C47907 * C48014 -
           (C566 * C104 + C567 * C103 +
            (C113 * C503 - C114 * C491 - C113 * C504 + C47890 * C521) * C102) *
               C47907 * C48003 +
           ((C113 * C505 - C114 * C492 - C113 * C506 + C47890 * C522) * C102 +
            C568 * C103 + C569 * C104) *
               C47907 * C47977) *
              C1094 +
          (((C113 * C948 - C114 * C943 - C113 * C949 + C47890 * C958) * C102 +
            C982 * C103 + C983 * C104) *
               C47907 * C48003 -
           (C371 * C104 + C372 * C103 +
            (C113 * C308 - C114 * C296 - C113 * C309 + C47890 * C326) * C102) *
               C47907 * C48014 -
           ((C113 * C1311 - C114 * C1302 - C113 * C1312 + C47890 * C1329) *
                C104 +
            (C113 * C1313 - C114 * C1303 - C113 * C1314 + C47890 * C1330) *
                C103 +
            (C113 * C1315 - C114 * C1304 - C113 * C1316 + C47890 * C1331) *
                C102) *
               C47907 * C47977) *
              C1095 +
          (((C113 * C310 - C114 * C297 - C113 * C311 + C47890 * C327) * C102 +
            C373 * C103 + C374 * C104) *
               C47907 * C48014 -
           ((C113 * C1317 - C114 * C1305 - C113 * C1318 + C47890 * C1332) *
                C104 +
            (C113 * C1319 - C114 * C1306 - C113 * C1320 + C47890 * C1333) *
                C103 +
            (C113 * C1321 - C114 * C1307 - C113 * C1322 + C47890 * C1334) *
                C102) *
               C47907 * C48003 +
           ((C113 * C1323 - C114 * C1308 - C113 * C1324 + C47890 * C1335) *
                C102 +
            (C113 * C1325 - C114 * C1309 - C113 * C1326 + C47890 * C1336) *
                C103 +
            (C113 * C1327 - C114 * C1310 - C113 * C1328 + C47890 * C1337) *
                C104) *
               C47907 * C47977) *
              C47974) *
         C47658) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C47890 * C136) * C102 +
            C174 * C103 + C175 * C104) *
               C47907 * C1844 -
           (C566 * C104 + C567 * C103 +
            (C113 * C503 - C114 * C491 - C113 * C504 + C47890 * C521) * C102) *
               C47907 * C1845 +
           ((C113 * C505 - C114 * C492 - C113 * C506 + C47890 * C522) * C102 +
            C568 * C103 + C569 * C104) *
               C47907 * C47977) *
              C47686 * C48010 +
          ((C567 * C102 + C566 * C103 + C570 * C104) * C47907 * C1845 -
           (C176 * C104 + C175 * C103 + C174 * C102) * C47907 * C1844 -
           (C571 * C104 + C569 * C103 + C568 * C102) * C47907 * C47977) *
              C47686 * C47997 +
          ((C175 * C102 + C176 * C103 + C177 * C104) * C47907 * C1844 -
           (C797 * C104 + C570 * C103 + C566 * C102) * C47907 * C1845 +
           (C569 * C102 + C571 * C103 +
            (C113 * C517 - C114 * C498 - C113 * C518 + C47890 * C528) * C104) *
               C47907 * C47977) *
              C47686 * C47968)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C47890 * C136) * C102 +
            C174 * C103 + C175 * C104) *
               C47907 * C1844 -
           (C566 * C104 + C567 * C103 +
            (C113 * C503 - C114 * C491 - C113 * C504 + C47890 * C521) * C102) *
               C47907 * C1845 +
           ((C113 * C505 - C114 * C492 - C113 * C506 + C47890 * C522) * C102 +
            C568 * C103 + C569 * C104) *
               C47907 * C47977) *
              C48013 +
          (((C113 * C948 - C114 * C943 - C113 * C949 + C47890 * C958) * C102 +
            C982 * C103 + C983 * C104) *
               C47907 * C1845 -
           (C371 * C104 + C372 * C103 +
            (C113 * C308 - C114 * C296 - C113 * C309 + C47890 * C326) * C102) *
               C47907 * C1844 -
           ((C113 * C1311 - C114 * C1302 - C113 * C1312 + C47890 * C1329) *
                C104 +
            (C113 * C1313 - C114 * C1303 - C113 * C1314 + C47890 * C1330) *
                C103 +
            (C113 * C1315 - C114 * C1304 - C113 * C1316 + C47890 * C1331) *
                C102) *
               C47907 * C47977) *
              C48001 +
          (((C113 * C310 - C114 * C297 - C113 * C311 + C47890 * C327) * C102 +
            C373 * C103 + C374 * C104) *
               C47907 * C1844 -
           (C1623 * C104 + C1624 * C103 +
            (C113 * C1321 - C114 * C1307 - C113 * C1322 + C47890 * C1334) *
                C102) *
               C47907 * C1845 +
           ((C113 * C1323 - C114 * C1308 - C113 * C1324 + C47890 * C1335) *
                C102 +
            (C113 * C1325 - C114 * C1309 - C113 * C1326 + C47890 * C1336) *
                C103 +
            (C113 * C1327 - C114 * C1310 - C113 * C1328 + C47890 * C1337) *
                C104) *
               C47907 * C47977) *
              C47974) *
         C47658) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C113 * C122 - C114 * C115 - C113 * C123 + C47890 * C136) * C102 +
           C174 * C103 + C175 * C104) *
              C47907 * C2019 -
          (C566 * C104 + C567 * C103 +
           (C113 * C503 - C114 * C491 - C113 * C504 + C47890 * C521) * C102) *
              C47907 * C2020 +
          ((C113 * C505 - C114 * C492 - C113 * C506 + C47890 * C522) * C102 +
           C568 * C103 + C569 * C104) *
              C47907 * C2021 -
          ((C113 * C2030 - C114 * C2024 - C113 * C2031 + C47890 * C2042) *
               C104 +
           (C113 * C2032 - C114 * C2025 - C113 * C2033 + C47890 * C2043) *
               C103 +
           (C113 * C2034 - C114 * C2026 - C113 * C2035 + C47890 * C2044) *
               C102) *
              C47907 * C2022 +
          ((C113 * C2036 - C114 * C2027 - C113 * C2037 + C47890 * C2045) *
               C102 +
           (C113 * C2038 - C114 * C2028 - C113 * C2039 + C47890 * C2046) *
               C103 +
           (C113 * C2040 - C114 * C2029 - C113 * C2041 + C47890 * C2047) *
               C104) *
              C47907 * C2023) *
         C47686 * C47658) /
            (p * q * std::sqrt(p + q));
    d2ee[13] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C47890 * C136) * C102 +
             C174 * C103 + C175 * C104) *
                C47907 * C47943 -
            (C566 * C104 + C567 * C103 +
             (C113 * C503 - C114 * C491 - C113 * C504 + C47890 * C521) * C102) *
                C47907 * C47791) *
               C1094 +
           (((C113 * C948 - C114 * C943 - C113 * C949 + C47890 * C958) * C102 +
             C982 * C103 + C983 * C104) *
                C47907 * C47791 -
            (C371 * C104 + C372 * C103 +
             (C113 * C308 - C114 * C296 - C113 * C309 + C47890 * C326) * C102) *
                C47907 * C47943) *
               C1095 +
           (((C113 * C310 - C114 * C297 - C113 * C311 + C47890 * C327) * C102 +
             C373 * C103 + C374 * C104) *
                C47907 * C47943 -
            (C1623 * C104 + C1624 * C103 +
             (C113 * C1321 - C114 * C1307 - C113 * C1322 + C47890 * C1334) *
                 C102) *
                C47907 * C47791) *
               C47974) *
              C47928 +
          (((C567 * C102 + C566 * C103 + C570 * C104) * C47907 * C47791 -
            (C176 * C104 + C175 * C103 + C174 * C102) * C47907 * C47943) *
               C1094 +
           ((C372 * C102 + C371 * C103 + C375 * C104) * C47907 * C47943 -
            (C984 * C104 + C983 * C103 + C982 * C102) * C47907 * C47791) *
               C1095 +
           ((C1624 * C102 + C1623 * C103 +
             (C113 * C1607 - C114 * C1606 - C113 * C1608 + C47890 * C1609) *
                 C104) *
                C47907 * C47791 -
            (C376 * C104 + C374 * C103 + C373 * C102) * C47907 * C47943) *
               C47974) *
              C47669)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C47890 * C136) * C102 +
            C174 * C103 + C175 * C104) *
               C47907 * C47943 -
           (C566 * C104 + C567 * C103 +
            (C113 * C503 - C114 * C491 - C113 * C504 + C47890 * C521) * C102) *
               C47907 * C47791) *
              C47686 * C671 +
          ((C567 * C102 + C566 * C103 + C570 * C104) * C47907 * C47791 -
           (C176 * C104 + C175 * C103 + C174 * C102) * C47907 * C47943) *
              C47686 * C672 +
          ((C175 * C102 + C176 * C103 + C177 * C104) * C47907 * C47943 -
           (C797 * C104 + C570 * C103 + C566 * C102) * C47907 * C47791) *
              C47686 * C673 +
          ((C570 * C102 + C797 * C103 +
            (C113 * C787 - C114 * C786 - C113 * C788 + C47890 * C789) * C104) *
               C47907 * C47791 -
           (C178 * C104 + C177 * C103 + C176 * C102) * C47907 * C47943) *
              C47686 * C47978)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C47890 * C136) * C102 +
            C174 * C103 + C175 * C104) *
               C47907 * C2310 -
           (C566 * C104 + C567 * C103 +
            (C113 * C503 - C114 * C491 - C113 * C504 + C47890 * C521) * C102) *
               C47907 * C2311 +
           ((C113 * C505 - C114 * C492 - C113 * C506 + C47890 * C522) * C102 +
            C568 * C103 + C569 * C104) *
               C47907 * C2312 -
           (C2331 * C104 + C2332 * C103 +
            (C113 * C2034 - C114 * C2026 - C113 * C2035 + C47890 * C2044) *
                C102) *
               C47907 * C47990) *
              C47686 * C47928 +
          ((C567 * C102 + C566 * C103 + C570 * C104) * C47907 * C2311 -
           (C176 * C104 + C175 * C103 + C174 * C102) * C47907 * C2310 -
           (C571 * C104 + C569 * C103 + C568 * C102) * C47907 * C2312 +
           (C2332 * C102 + C2331 * C103 +
            (C113 * C2315 - C114 * C2314 - C113 * C2316 + C47890 * C2317) *
                C104) *
               C47907 * C47990) *
              C47686 * C47669)) /
            (p * q * std::sqrt(p + q));
    d2ee[14] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C47890 * C136) * C102 +
            C174 * C103 + C175 * C104) *
               C47907 * C47704 * C48013 -
           (C371 * C104 + C372 * C103 +
            (C113 * C308 - C114 * C296 - C113 * C309 + C47890 * C326) * C102) *
               C47907 * C47704 * C48001 +
           ((C113 * C310 - C114 * C297 - C113 * C311 + C47890 * C327) * C102 +
            C373 * C103 + C374 * C104) *
               C47907 * C47704 * C47974) *
              C291 +
          ((C372 * C102 + C371 * C103 + C375 * C104) * C47907 * C47704 *
               C48001 -
           (C176 * C104 + C175 * C103 + C174 * C102) * C47907 * C47704 *
               C48013 -
           (C376 * C104 + C374 * C103 + C373 * C102) * C47907 * C47704 *
               C47974) *
              C292 +
          ((C175 * C102 + C176 * C103 + C177 * C104) * C47907 * C47704 *
               C48013 -
           ((C113 * C320 - C114 * C302 - C113 * C321 + C47890 * C332) * C104 +
            C375 * C103 + C371 * C102) *
               C47907 * C47704 * C48001 +
           (C374 * C102 + C376 * C103 +
            (C113 * C322 - C114 * C303 - C113 * C323 + C47890 * C333) * C104) *
               C47907 * C47704 * C47974) *
              C47968)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C122 - C114 * C115 - C113 * C123 + C47890 * C136) * C102 +
           C174 * C103 + C175 * C104) *
              C47907 * C47704 * C47686 * C108 -
          (C176 * C104 + C175 * C103 + C174 * C102) * C47907 * C47704 * C47686 *
              C109 +
          (C175 * C102 + C176 * C103 + C177 * C104) * C47907 * C47704 * C47686 *
              C110 -
          (C178 * C104 + C177 * C103 + C176 * C102) * C47907 * C47704 * C47686 *
              C111 +
          (C177 * C102 + C178 * C103 +
           (C113 * C134 - C114 * C121 - C113 * C135 + C47890 * C142) * C104) *
              C47907 * C47704 * C47686 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C47890 * C136) * C102 +
            C174 * C103 + C175 * C104) *
               C47907 * C47704 * C1094 -
           (C371 * C104 + C372 * C103 +
            (C113 * C308 - C114 * C296 - C113 * C309 + C47890 * C326) * C102) *
               C47907 * C47704 * C1095 +
           ((C113 * C310 - C114 * C297 - C113 * C311 + C47890 * C327) * C102 +
            C373 * C103 + C374 * C104) *
               C47907 * C47704 * C47974) *
              C48010 +
          ((C372 * C102 + C371 * C103 + C375 * C104) * C47907 * C47704 * C1095 -
           (C176 * C104 + C175 * C103 + C174 * C102) * C47907 * C47704 * C1094 -
           (C376 * C104 + C374 * C103 + C373 * C102) * C47907 * C47704 *
               C47974) *
              C47997 +
          ((C175 * C102 + C176 * C103 + C177 * C104) * C47907 * C47704 * C1094 -
           (C686 * C104 + C375 * C103 + C371 * C102) * C47907 * C47704 * C1095 +
           (C374 * C102 + C376 * C103 +
            (C113 * C322 - C114 * C303 - C113 * C323 + C47890 * C333) * C104) *
               C47907 * C47704 * C47974) *
              C47968)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C122 - C114 * C115 - C113 * C123 + C47890 * C136) * C102 +
           C174 * C103 + C175 * C104) *
              C47907 * C47704 * C1162 -
          (C371 * C104 + C372 * C103 +
           (C113 * C308 - C114 * C296 - C113 * C309 + C47890 * C326) * C102) *
              C47907 * C47704 * C1163 +
          ((C113 * C310 - C114 * C297 - C113 * C311 + C47890 * C327) * C102 +
           C373 * C103 + C374 * C104) *
              C47907 * C47704 * C1164 -
          ((C113 * C1174 - C114 * C1168 - C113 * C1175 + C47890 * C1186) *
               C104 +
           (C113 * C1176 - C114 * C1169 - C113 * C1177 + C47890 * C1187) *
               C103 +
           (C113 * C1178 - C114 * C1170 - C113 * C1179 + C47890 * C1188) *
               C102) *
              C47907 * C47704 * C1165 +
          ((C113 * C1180 - C114 * C1171 - C113 * C1181 + C47890 * C1189) *
               C102 +
           (C113 * C1182 - C114 * C1172 - C113 * C1183 + C47890 * C1190) *
               C103 +
           (C113 * C1184 - C114 * C1173 - C113 * C1185 + C47890 * C1191) *
               C104) *
              C47907 * C47704 * C1166) *
         C47658) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C47890 * C136) * C102 +
            C174 * C103 + C175 * C104) *
               C47907 * C1844 -
           (C566 * C104 + C567 * C103 +
            (C113 * C503 - C114 * C491 - C113 * C504 + C47890 * C521) * C102) *
               C47907 * C1845 +
           ((C113 * C505 - C114 * C492 - C113 * C506 + C47890 * C522) * C102 +
            C568 * C103 + C569 * C104) *
               C47907 * C47977) *
              C47686 * C48010 +
          ((C567 * C102 + C566 * C103 + C570 * C104) * C47907 * C1845 -
           (C176 * C104 + C175 * C103 + C174 * C102) * C47907 * C1844 -
           (C571 * C104 + C569 * C103 + C568 * C102) * C47907 * C47977) *
              C47686 * C47997 +
          ((C175 * C102 + C176 * C103 + C177 * C104) * C47907 * C1844 -
           (C797 * C104 + C570 * C103 + C566 * C102) * C47907 * C1845 +
           (C569 * C102 + C571 * C103 +
            (C113 * C517 - C114 * C498 - C113 * C518 + C47890 * C528) * C104) *
               C47907 * C47977) *
              C47686 * C47968)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C47890 * C136) * C102 +
            C174 * C103 + C175 * C104) *
               C47907 * C1844 -
           (C566 * C104 + C567 * C103 +
            (C113 * C503 - C114 * C491 - C113 * C504 + C47890 * C521) * C102) *
               C47907 * C1845 +
           ((C113 * C505 - C114 * C492 - C113 * C506 + C47890 * C522) * C102 +
            C568 * C103 + C569 * C104) *
               C47907 * C47977) *
              C48013 +
          (((C113 * C948 - C114 * C943 - C113 * C949 + C47890 * C958) * C102 +
            C982 * C103 + C983 * C104) *
               C47907 * C1845 -
           (C371 * C104 + C372 * C103 +
            (C113 * C308 - C114 * C296 - C113 * C309 + C47890 * C326) * C102) *
               C47907 * C1844 -
           ((C113 * C1311 - C114 * C1302 - C113 * C1312 + C47890 * C1329) *
                C104 +
            (C113 * C1313 - C114 * C1303 - C113 * C1314 + C47890 * C1330) *
                C103 +
            (C113 * C1315 - C114 * C1304 - C113 * C1316 + C47890 * C1331) *
                C102) *
               C47907 * C47977) *
              C48001 +
          (((C113 * C310 - C114 * C297 - C113 * C311 + C47890 * C327) * C102 +
            C373 * C103 + C374 * C104) *
               C47907 * C1844 -
           (C1623 * C104 + C1624 * C103 +
            (C113 * C1321 - C114 * C1307 - C113 * C1322 + C47890 * C1334) *
                C102) *
               C47907 * C1845 +
           ((C113 * C1323 - C114 * C1308 - C113 * C1324 + C47890 * C1335) *
                C102 +
            (C113 * C1325 - C114 * C1309 - C113 * C1326 + C47890 * C1336) *
                C103 +
            (C113 * C1327 - C114 * C1310 - C113 * C1328 + C47890 * C1337) *
                C104) *
               C47907 * C47977) *
              C47974) *
         C47658) /
            (p * q * std::sqrt(p + q));
    d2ee[15] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C47890 * C136) * C102 +
             C174 * C103 + C175 * C104) *
                C47907 * C3302 -
            (C566 * C104 + C567 * C103 +
             (C113 * C503 - C114 * C491 - C113 * C504 + C47890 * C521) * C102) *
                C47907 * C47791) *
               C47942 +
           (((C113 * C948 - C114 * C943 - C113 * C949 + C47890 * C958) * C102 +
             C982 * C103 + C983 * C104) *
                C47907 * C47791 -
            (C371 * C104 + C372 * C103 +
             (C113 * C308 - C114 * C296 - C113 * C309 + C47890 * C326) * C102) *
                C47907 * C3302) *
               C47749) *
              C47663 +
          (((C567 * C102 + C566 * C103 + C570 * C104) * C47907 * C47791 -
            (C176 * C104 + C175 * C103 + C174 * C102) * C47907 * C3302) *
               C47942 +
           ((C372 * C102 + C371 * C103 + C375 * C104) * C47907 * C3302 -
            (C984 * C104 + C983 * C103 + C982 * C102) * C47907 * C47791) *
               C47749) *
              C47672 +
          (((C175 * C102 + C176 * C103 + C177 * C104) * C47907 * C3302 -
            (C797 * C104 + C570 * C103 + C566 * C102) * C47907 * C47791) *
               C47942 +
           ((C983 * C102 + C984 * C103 +
             (C113 * C956 - C114 * C947 - C113 * C957 + C47890 * C962) * C104) *
                C47907 * C47791 -
            (C686 * C104 + C375 * C103 + C371 * C102) * C47907 * C3302) *
               C47749) *
              C2911)) /
        (p * q * std::sqrt(p + q));
    d2ee[16] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C47890 * C136) * C102 +
             C174 * C103 + C175 * C104) *
                C47907 * C47787 -
            (C566 * C104 + C567 * C103 +
             (C113 * C503 - C114 * C491 - C113 * C504 + C47890 * C521) * C102) *
                C47907 * C47794 +
            ((C113 * C505 - C114 * C492 - C113 * C506 + C47890 * C522) * C102 +
             C568 * C103 + C569 * C104) *
                C47907 * C3810) *
               C47942 +
           (((C113 * C948 - C114 * C943 - C113 * C949 + C47890 * C958) * C102 +
             C982 * C103 + C983 * C104) *
                C47907 * C47794 -
            (C371 * C104 + C372 * C103 +
             (C113 * C308 - C114 * C296 - C113 * C309 + C47890 * C326) * C102) *
                C47907 * C47787 -
            (C2211 * C104 + C2212 * C103 +
             (C113 * C1315 - C114 * C1304 - C113 * C1316 + C47890 * C1331) *
                 C102) *
                C47907 * C3810) *
               C47749) *
              C2648 +
          (((C567 * C102 + C566 * C103 + C570 * C104) * C47907 * C47794 -
            (C176 * C104 + C175 * C103 + C174 * C102) * C47907 * C47787 -
            (C571 * C104 + C569 * C103 + C568 * C102) * C47907 * C3810) *
               C47942 +
           ((C372 * C102 + C371 * C103 + C375 * C104) * C47907 * C47787 -
            (C984 * C104 + C983 * C103 + C982 * C102) * C47907 * C47794 +
            (C2212 * C102 + C2211 * C103 +
             (C113 * C2195 - C114 * C2194 - C113 * C2196 + C47890 * C2197) *
                 C104) *
                C47907 * C3810) *
               C47749) *
              C47669)) /
        (p * q * std::sqrt(p + q));
    d2ee[17] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C47890 * C136) * C102 +
             C174 * C103 + C175 * C104) *
                C47907 * C3302 -
            (C566 * C104 + C567 * C103 +
             (C113 * C503 - C114 * C491 - C113 * C504 + C47890 * C521) * C102) *
                C47907 * C47791) *
               C48013 +
           (((C113 * C948 - C114 * C943 - C113 * C949 + C47890 * C958) * C102 +
             C982 * C103 + C983 * C104) *
                C47907 * C47791 -
            (C371 * C104 + C372 * C103 +
             (C113 * C308 - C114 * C296 - C113 * C309 + C47890 * C326) * C102) *
                C47907 * C3302) *
               C48001 +
           (((C113 * C310 - C114 * C297 - C113 * C311 + C47890 * C327) * C102 +
             C373 * C103 + C374 * C104) *
                C47907 * C3302 -
            (C1623 * C104 + C1624 * C103 +
             (C113 * C1321 - C114 * C1307 - C113 * C1322 + C47890 * C1334) *
                 C102) *
                C47907 * C47791) *
               C47974) *
              C2648 +
          (((C567 * C102 + C566 * C103 + C570 * C104) * C47907 * C47791 -
            (C176 * C104 + C175 * C103 + C174 * C102) * C47907 * C3302) *
               C48013 +
           ((C372 * C102 + C371 * C103 + C375 * C104) * C47907 * C3302 -
            (C984 * C104 + C983 * C103 + C982 * C102) * C47907 * C47791) *
               C48001 +
           ((C1624 * C102 + C1623 * C103 +
             (C113 * C1607 - C114 * C1606 - C113 * C1608 + C47890 * C1609) *
                 C104) *
                C47907 * C47791 -
            (C376 * C104 + C374 * C103 + C373 * C102) * C47907 * C3302) *
               C47974) *
              C47669)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C47890 * C136) * C102 +
            C174 * C103 + C175 * C104) *
               C47907 * C3302 -
           (C566 * C104 + C567 * C103 +
            (C113 * C503 - C114 * C491 - C113 * C504 + C47890 * C521) * C102) *
               C47907 * C47791) *
              C47686 * C48019 +
          ((C567 * C102 + C566 * C103 + C570 * C104) * C47907 * C47791 -
           (C176 * C104 + C175 * C103 + C174 * C102) * C47907 * C3302) *
              C47686 * C48012 +
          ((C175 * C102 + C176 * C103 + C177 * C104) * C47907 * C3302 -
           (C797 * C104 + C570 * C103 + C566 * C102) * C47907 * C47791) *
              C47686 * C47999 +
          ((C570 * C102 + C797 * C103 +
            (C113 * C787 - C114 * C786 - C113 * C788 + C47890 * C789) * C104) *
               C47907 * C47791 -
           (C178 * C104 + C177 * C103 + C176 * C102) * C47907 * C3302) *
              C47686 * C47978)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C47890 * C136) * C102 +
            C174 * C103 + C175 * C104) *
               C47907 * C48021 -
           (C566 * C104 + C567 * C103 +
            (C113 * C503 - C114 * C491 - C113 * C504 + C47890 * C521) * C102) *
               C47907 * C48018 +
           ((C113 * C505 - C114 * C492 - C113 * C506 + C47890 * C522) * C102 +
            C568 * C103 + C569 * C104) *
               C47907 * C48009 -
           (C2331 * C104 + C2332 * C103 +
            (C113 * C2034 - C114 * C2026 - C113 * C2035 + C47890 * C2044) *
                C102) *
               C47907 * C47990) *
              C47686 * C2648 +
          ((C567 * C102 + C566 * C103 + C570 * C104) * C47907 * C48018 -
           (C176 * C104 + C175 * C103 + C174 * C102) * C47907 * C48021 -
           (C571 * C104 + C569 * C103 + C568 * C102) * C47907 * C48009 +
           (C2332 * C102 + C2331 * C103 +
            (C113 * C2315 - C114 * C2314 - C113 * C2316 + C47890 * C2317) *
                C104) *
               C47907 * C47990) *
              C47686 * C47669)) /
            (p * q * std::sqrt(p + q));
    d2ee[18] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C47890 * C136) * C102 +
            C174 * C103 + C175 * C104) *
               C47907 * C47787 -
           (C566 * C104 + C567 * C103 +
            (C113 * C503 - C114 * C491 - C113 * C504 + C47890 * C521) * C102) *
               C47907 * C47794 +
           ((C113 * C505 - C114 * C492 - C113 * C506 + C47890 * C522) * C102 +
            C568 * C103 + C569 * C104) *
               C47907 * C3810) *
              C47686 * C47663 +
          ((C567 * C102 + C566 * C103 + C570 * C104) * C47907 * C47794 -
           (C176 * C104 + C175 * C103 + C174 * C102) * C47907 * C47787 -
           (C571 * C104 + C569 * C103 + C568 * C102) * C47907 * C3810) *
              C47686 * C47672 +
          ((C175 * C102 + C176 * C103 + C177 * C104) * C47907 * C47787 -
           (C797 * C104 + C570 * C103 + C566 * C102) * C47907 * C47794 +
           (C569 * C102 + C571 * C103 +
            (C113 * C517 - C114 * C498 - C113 * C518 + C47890 * C528) * C104) *
               C47907 * C3810) *
              C47686 * C2911)) /
        (p * q * std::sqrt(p + q));
    d2ee[19] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C47890 * C136) * C102 +
            C174 * C103 + C175 * C104) *
               C47907 * C3302 -
           (C566 * C104 + C567 * C103 +
            (C113 * C503 - C114 * C491 - C113 * C504 + C47890 * C521) * C102) *
               C47907 * C47791) *
              C47686 * C48019 +
          ((C567 * C102 + C566 * C103 + C570 * C104) * C47907 * C47791 -
           (C176 * C104 + C175 * C103 + C174 * C102) * C47907 * C3302) *
              C47686 * C48012 +
          ((C175 * C102 + C176 * C103 + C177 * C104) * C47907 * C3302 -
           (C797 * C104 + C570 * C103 + C566 * C102) * C47907 * C47791) *
              C47686 * C47999 +
          ((C570 * C102 + C797 * C103 +
            (C113 * C787 - C114 * C786 - C113 * C788 + C47890 * C789) * C104) *
               C47907 * C47791 -
           (C178 * C104 + C177 * C103 + C176 * C102) * C47907 * C3302) *
              C47686 * C47978)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C47890 * C136) * C102 +
             C174 * C103 + C175 * C104) *
                C47907 * C3302 -
            (C566 * C104 + C567 * C103 +
             (C113 * C503 - C114 * C491 - C113 * C504 + C47890 * C521) * C102) *
                C47907 * C47791) *
               C48013 +
           (((C113 * C948 - C114 * C943 - C113 * C949 + C47890 * C958) * C102 +
             C982 * C103 + C983 * C104) *
                C47907 * C47791 -
            (C371 * C104 + C372 * C103 +
             (C113 * C308 - C114 * C296 - C113 * C309 + C47890 * C326) * C102) *
                C47907 * C3302) *
               C48001 +
           (((C113 * C310 - C114 * C297 - C113 * C311 + C47890 * C327) * C102 +
             C373 * C103 + C374 * C104) *
                C47907 * C3302 -
            (C1623 * C104 + C1624 * C103 +
             (C113 * C1321 - C114 * C1307 - C113 * C1322 + C47890 * C1334) *
                 C102) *
                C47907 * C47791) *
               C47974) *
              C2648 +
          (((C567 * C102 + C566 * C103 + C570 * C104) * C47907 * C47791 -
            (C176 * C104 + C175 * C103 + C174 * C102) * C47907 * C3302) *
               C48013 +
           ((C372 * C102 + C371 * C103 + C375 * C104) * C47907 * C3302 -
            (C984 * C104 + C983 * C103 + C982 * C102) * C47907 * C47791) *
               C48001 +
           ((C1624 * C102 + C1623 * C103 +
             (C113 * C1607 - C114 * C1606 - C113 * C1608 + C47890 * C1609) *
                 C104) *
                C47907 * C47791 -
            (C376 * C104 + C374 * C103 + C373 * C102) * C47907 * C3302) *
               C47974) *
              C47669)) /
            (p * q * std::sqrt(p + q));
    d2ee[20] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C47890 * C136) * C102 +
            C174 * C103 + C175 * C104) *
               C47907 * C47704 * C47942 -
           (C371 * C104 + C372 * C103 +
            (C113 * C308 - C114 * C296 - C113 * C309 + C47890 * C326) * C102) *
               C47907 * C47704 * C47749) *
              C671 +
          ((C372 * C102 + C371 * C103 + C375 * C104) * C47907 * C47704 *
               C47749 -
           (C176 * C104 + C175 * C103 + C174 * C102) * C47907 * C47704 *
               C47942) *
              C672 +
          ((C175 * C102 + C176 * C103 + C177 * C104) * C47907 * C47704 *
               C47942 -
           (C686 * C104 + C375 * C103 + C371 * C102) * C47907 * C47704 *
               C47749) *
              C673 +
          ((C375 * C102 + C686 * C103 +
            (C113 * C676 - C114 * C675 - C113 * C677 + C47890 * C678) * C104) *
               C47907 * C47704 * C47749 -
           (C178 * C104 + C177 * C103 + C176 * C102) * C47907 * C47704 *
               C47942) *
              C47978)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C47890 * C136) * C102 +
            C174 * C103 + C175 * C104) *
               C47907 * C47704 * C1436 -
           (C371 * C104 + C372 * C103 +
            (C113 * C308 - C114 * C296 - C113 * C309 + C47890 * C326) * C102) *
               C47907 * C47704 * C1437 +
           ((C113 * C310 - C114 * C297 - C113 * C311 + C47890 * C327) * C102 +
            C373 * C103 + C374 * C104) *
               C47907 * C47704 * C1438 -
           (C1459 * C104 + C1460 * C103 +
            (C113 * C1178 - C114 * C1170 - C113 * C1179 + C47890 * C1188) *
                C102) *
               C47907 * C47704 * C47984) *
              C47928 +
          ((C372 * C102 + C371 * C103 + C375 * C104) * C47907 * C47704 * C1437 -
           (C176 * C104 + C175 * C103 + C174 * C102) * C47907 * C47704 * C1436 -
           (C376 * C104 + C374 * C103 + C373 * C102) * C47907 * C47704 * C1438 +
           (C1460 * C102 + C1459 * C103 +
            (C113 * C1443 - C114 * C1442 - C113 * C1444 + C47890 * C1445) *
                C104) *
               C47907 * C47704 * C47984) *
              C47669)) /
            (p * q * std::sqrt(p + q));
    d2ee[21] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C47890 * C136) * C102 +
             C174 * C103 + C175 * C104) *
                C47907 * C47943 -
            (C566 * C104 + C567 * C103 +
             (C113 * C503 - C114 * C491 - C113 * C504 + C47890 * C521) * C102) *
                C47907 * C47791) *
               C47942 +
           (((C113 * C948 - C114 * C943 - C113 * C949 + C47890 * C958) * C102 +
             C982 * C103 + C983 * C104) *
                C47907 * C47791 -
            (C371 * C104 + C372 * C103 +
             (C113 * C308 - C114 * C296 - C113 * C309 + C47890 * C326) * C102) *
                C47907 * C47943) *
               C47749) *
              C291 +
          (((C567 * C102 + C566 * C103 + C570 * C104) * C47907 * C47791 -
            (C176 * C104 + C175 * C103 + C174 * C102) * C47907 * C47943) *
               C47942 +
           ((C372 * C102 + C371 * C103 + C375 * C104) * C47907 * C47943 -
            (C984 * C104 + C983 * C103 + C982 * C102) * C47907 * C47791) *
               C47749) *
              C292 +
          (((C175 * C102 + C176 * C103 + C177 * C104) * C47907 * C47943 -
            (C797 * C104 + C570 * C103 + C566 * C102) * C47907 * C47791) *
               C47942 +
           ((C983 * C102 + C984 * C103 +
             (C113 * C956 - C114 * C947 - C113 * C957 + C47890 * C962) * C104) *
                C47907 * C47791 -
            (C686 * C104 + C375 * C103 + C371 * C102) * C47907 * C47943) *
               C47749) *
              C47968)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C47890 * C136) * C102 +
            C174 * C103 + C175 * C104) *
               C47907 * C47943 -
           (C566 * C104 + C567 * C103 +
            (C113 * C503 - C114 * C491 - C113 * C504 + C47890 * C521) * C102) *
               C47907 * C47791) *
              C1436 +
          (((C113 * C948 - C114 * C943 - C113 * C949 + C47890 * C958) * C102 +
            C982 * C103 + C983 * C104) *
               C47907 * C47791 -
           (C371 * C104 + C372 * C103 +
            (C113 * C308 - C114 * C296 - C113 * C309 + C47890 * C326) * C102) *
               C47907 * C47943) *
              C1437 +
          (((C113 * C310 - C114 * C297 - C113 * C311 + C47890 * C327) * C102 +
            C373 * C103 + C374 * C104) *
               C47907 * C47943 -
           (C1623 * C104 + C1624 * C103 +
            (C113 * C1321 - C114 * C1307 - C113 * C1322 + C47890 * C1334) *
                C102) *
               C47907 * C47791) *
              C1438 +
          (((C113 * C1725 - C114 * C1722 - C113 * C1726 + C47890 * C1731) *
                C102 +
            (C113 * C1727 - C114 * C1723 - C113 * C1728 + C47890 * C1732) *
                C103 +
            (C113 * C1729 - C114 * C1724 - C113 * C1730 + C47890 * C1733) *
                C104) *
               C47907 * C47791 -
           (C1459 * C104 + C1460 * C103 +
            (C113 * C1178 - C114 * C1170 - C113 * C1179 + C47890 * C1188) *
                C102) *
               C47907 * C47943) *
              C47984) *
         C47658) /
            (p * q * std::sqrt(p + q));
    d2ee[22] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C47890 * C136) * C102 +
            C174 * C103 + C175 * C104) *
               C47907 * C47704 * C48013 -
           (C371 * C104 + C372 * C103 +
            (C113 * C308 - C114 * C296 - C113 * C309 + C47890 * C326) * C102) *
               C47907 * C47704 * C48001 +
           ((C113 * C310 - C114 * C297 - C113 * C311 + C47890 * C327) * C102 +
            C373 * C103 + C374 * C104) *
               C47907 * C47704 * C47974) *
              C291 +
          ((C372 * C102 + C371 * C103 + C375 * C104) * C47907 * C47704 *
               C48001 -
           (C176 * C104 + C175 * C103 + C174 * C102) * C47907 * C47704 *
               C48013 -
           (C376 * C104 + C374 * C103 + C373 * C102) * C47907 * C47704 *
               C47974) *
              C292 +
          ((C175 * C102 + C176 * C103 + C177 * C104) * C47907 * C47704 *
               C48013 -
           ((C113 * C320 - C114 * C302 - C113 * C321 + C47890 * C332) * C104 +
            C375 * C103 + C371 * C102) *
               C47907 * C47704 * C48001 +
           (C374 * C102 + C376 * C103 +
            (C113 * C322 - C114 * C303 - C113 * C323 + C47890 * C333) * C104) *
               C47907 * C47704 * C47974) *
              C47968)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C122 - C114 * C115 - C113 * C123 + C47890 * C136) * C102 +
           C174 * C103 + C175 * C104) *
              C47907 * C47704 * C47686 * C108 -
          (C176 * C104 + C175 * C103 + C174 * C102) * C47907 * C47704 * C47686 *
              C109 +
          (C175 * C102 + C176 * C103 + C177 * C104) * C47907 * C47704 * C47686 *
              C110 -
          (C178 * C104 + C177 * C103 + C176 * C102) * C47907 * C47704 * C47686 *
              C111 +
          (C177 * C102 + C178 * C103 +
           (C113 * C134 - C114 * C121 - C113 * C135 + C47890 * C142) * C104) *
              C47907 * C47704 * C47686 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C47890 * C136) * C102 +
            C174 * C103 + C175 * C104) *
               C47907 * C48014 -
           (C566 * C104 + C567 * C103 +
            (C113 * C503 - C114 * C491 - C113 * C504 + C47890 * C521) * C102) *
               C47907 * C48003 +
           ((C113 * C505 - C114 * C492 - C113 * C506 + C47890 * C522) * C102 +
            C568 * C103 + C569 * C104) *
               C47907 * C47977) *
              C47686 * C291 +
          ((C567 * C102 + C566 * C103 + C570 * C104) * C47907 * C48003 -
           (C176 * C104 + C175 * C103 + C174 * C102) * C47907 * C48014 -
           (C571 * C104 + C569 * C103 + C568 * C102) * C47907 * C47977) *
              C47686 * C292 +
          ((C175 * C102 + C176 * C103 + C177 * C104) * C47907 * C48014 -
           ((C113 * C515 - C114 * C497 - C113 * C516 + C47890 * C527) * C104 +
            C570 * C103 + C566 * C102) *
               C47907 * C48003 +
           (C569 * C102 + C571 * C103 +
            (C113 * C517 - C114 * C498 - C113 * C518 + C47890 * C528) * C104) *
               C47907 * C47977) *
              C47686 * C47968)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C47890 * C136) * C102 +
            C174 * C103 + C175 * C104) *
               C47907 * C47704 * C1094 -
           (C371 * C104 + C372 * C103 +
            (C113 * C308 - C114 * C296 - C113 * C309 + C47890 * C326) * C102) *
               C47907 * C47704 * C1095 +
           ((C113 * C310 - C114 * C297 - C113 * C311 + C47890 * C327) * C102 +
            C373 * C103 + C374 * C104) *
               C47907 * C47704 * C47974) *
              C48010 +
          ((C372 * C102 + C371 * C103 + C375 * C104) * C47907 * C47704 * C1095 -
           (C176 * C104 + C175 * C103 + C174 * C102) * C47907 * C47704 * C1094 -
           (C376 * C104 + C374 * C103 + C373 * C102) * C47907 * C47704 *
               C47974) *
              C47997 +
          ((C175 * C102 + C176 * C103 + C177 * C104) * C47907 * C47704 * C1094 -
           (C686 * C104 + C375 * C103 + C371 * C102) * C47907 * C47704 * C1095 +
           (C374 * C102 + C376 * C103 +
            (C113 * C322 - C114 * C303 - C113 * C323 + C47890 * C333) * C104) *
               C47907 * C47704 * C47974) *
              C47968)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C122 - C114 * C115 - C113 * C123 + C47890 * C136) * C102 +
           C174 * C103 + C175 * C104) *
              C47907 * C47704 * C1162 -
          (C371 * C104 + C372 * C103 +
           (C113 * C308 - C114 * C296 - C113 * C309 + C47890 * C326) * C102) *
              C47907 * C47704 * C1163 +
          ((C113 * C310 - C114 * C297 - C113 * C311 + C47890 * C327) * C102 +
           C373 * C103 + C374 * C104) *
              C47907 * C47704 * C1164 -
          ((C113 * C1174 - C114 * C1168 - C113 * C1175 + C47890 * C1186) *
               C104 +
           (C113 * C1176 - C114 * C1169 - C113 * C1177 + C47890 * C1187) *
               C103 +
           (C113 * C1178 - C114 * C1170 - C113 * C1179 + C47890 * C1188) *
               C102) *
              C47907 * C47704 * C1165 +
          ((C113 * C1180 - C114 * C1171 - C113 * C1181 + C47890 * C1189) *
               C102 +
           (C113 * C1182 - C114 * C1172 - C113 * C1183 + C47890 * C1190) *
               C103 +
           (C113 * C1184 - C114 * C1173 - C113 * C1185 + C47890 * C1191) *
               C104) *
              C47907 * C47704 * C1166) *
         C47658) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C47890 * C136) * C102 +
            C174 * C103 + C175 * C104) *
               C47907 * C48014 -
           (C566 * C104 + C567 * C103 +
            (C113 * C503 - C114 * C491 - C113 * C504 + C47890 * C521) * C102) *
               C47907 * C48003 +
           ((C113 * C505 - C114 * C492 - C113 * C506 + C47890 * C522) * C102 +
            C568 * C103 + C569 * C104) *
               C47907 * C47977) *
              C1094 +
          (((C113 * C948 - C114 * C943 - C113 * C949 + C47890 * C958) * C102 +
            C982 * C103 + C983 * C104) *
               C47907 * C48003 -
           (C371 * C104 + C372 * C103 +
            (C113 * C308 - C114 * C296 - C113 * C309 + C47890 * C326) * C102) *
               C47907 * C48014 -
           ((C113 * C1311 - C114 * C1302 - C113 * C1312 + C47890 * C1329) *
                C104 +
            (C113 * C1313 - C114 * C1303 - C113 * C1314 + C47890 * C1330) *
                C103 +
            (C113 * C1315 - C114 * C1304 - C113 * C1316 + C47890 * C1331) *
                C102) *
               C47907 * C47977) *
              C1095 +
          (((C113 * C310 - C114 * C297 - C113 * C311 + C47890 * C327) * C102 +
            C373 * C103 + C374 * C104) *
               C47907 * C48014 -
           ((C113 * C1317 - C114 * C1305 - C113 * C1318 + C47890 * C1332) *
                C104 +
            (C113 * C1319 - C114 * C1306 - C113 * C1320 + C47890 * C1333) *
                C103 +
            (C113 * C1321 - C114 * C1307 - C113 * C1322 + C47890 * C1334) *
                C102) *
               C47907 * C48003 +
           ((C113 * C1323 - C114 * C1308 - C113 * C1324 + C47890 * C1335) *
                C102 +
            (C113 * C1325 - C114 * C1309 - C113 * C1326 + C47890 * C1336) *
                C103 +
            (C113 * C1327 - C114 * C1310 - C113 * C1328 + C47890 * C1337) *
                C104) *
               C47907 * C47977) *
              C47974) *
         C47658) /
            (p * q * std::sqrt(p + q));
    d2ee[23] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C47890 * C136) * C102 +
            C174 * C103 + C175 * C104) *
               C47907 * C47943 -
           (C566 * C104 + C567 * C103 +
            (C113 * C503 - C114 * C491 - C113 * C504 + C47890 * C521) * C102) *
               C47907 * C47791) *
              C47686 * C671 +
          ((C567 * C102 + C566 * C103 + C570 * C104) * C47907 * C47791 -
           (C176 * C104 + C175 * C103 + C174 * C102) * C47907 * C47943) *
              C47686 * C672 +
          ((C175 * C102 + C176 * C103 + C177 * C104) * C47907 * C47943 -
           (C797 * C104 + C570 * C103 + C566 * C102) * C47907 * C47791) *
              C47686 * C673 +
          ((C570 * C102 + C797 * C103 +
            (C113 * C787 - C114 * C786 - C113 * C788 + C47890 * C789) * C104) *
               C47907 * C47791 -
           (C178 * C104 + C177 * C103 + C176 * C102) * C47907 * C47943) *
              C47686 * C47978)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C47890 * C136) * C102 +
             C174 * C103 + C175 * C104) *
                C47907 * C47943 -
            (C566 * C104 + C567 * C103 +
             (C113 * C503 - C114 * C491 - C113 * C504 + C47890 * C521) * C102) *
                C47907 * C47791) *
               C1094 +
           (((C113 * C948 - C114 * C943 - C113 * C949 + C47890 * C958) * C102 +
             C982 * C103 + C983 * C104) *
                C47907 * C47791 -
            (C371 * C104 + C372 * C103 +
             (C113 * C308 - C114 * C296 - C113 * C309 + C47890 * C326) * C102) *
                C47907 * C47943) *
               C1095 +
           (((C113 * C310 - C114 * C297 - C113 * C311 + C47890 * C327) * C102 +
             C373 * C103 + C374 * C104) *
                C47907 * C47943 -
            (C1623 * C104 + C1624 * C103 +
             (C113 * C1321 - C114 * C1307 - C113 * C1322 + C47890 * C1334) *
                 C102) *
                C47907 * C47791) *
               C47974) *
              C47928 +
          (((C567 * C102 + C566 * C103 + C570 * C104) * C47907 * C47791 -
            (C176 * C104 + C175 * C103 + C174 * C102) * C47907 * C47943) *
               C1094 +
           ((C372 * C102 + C371 * C103 + C375 * C104) * C47907 * C47943 -
            (C984 * C104 + C983 * C103 + C982 * C102) * C47907 * C47791) *
               C1095 +
           ((C1624 * C102 + C1623 * C103 +
             (C113 * C1607 - C114 * C1606 - C113 * C1608 + C47890 * C1609) *
                 C104) *
                C47907 * C47791 -
            (C376 * C104 + C374 * C103 + C373 * C102) * C47907 * C47943) *
               C47974) *
              C47669)) /
            (p * q * std::sqrt(p + q));
    d2ee[24] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C122 - C114 * C115 - C113 * C123 + C47890 * C136) * C102 +
           C174 * C103 + C175 * C104) *
              C47907 * C47704 * C47686 * C108 -
          (C176 * C104 + C175 * C103 + C174 * C102) * C47907 * C47704 * C47686 *
              C109 +
          (C175 * C102 + C176 * C103 + C177 * C104) * C47907 * C47704 * C47686 *
              C110 -
          (C178 * C104 + C177 * C103 + C176 * C102) * C47907 * C47704 * C47686 *
              C111 +
          (C177 * C102 + C178 * C103 +
           (C113 * C134 - C114 * C121 - C113 * C135 + C47890 * C142) * C104) *
              C47907 * C47704 * C47686 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C47890 * C136) * C102 +
            C174 * C103 + C175 * C104) *
               C47907 * C47704 * C48013 -
           (C371 * C104 + C372 * C103 +
            (C113 * C308 - C114 * C296 - C113 * C309 + C47890 * C326) * C102) *
               C47907 * C47704 * C48001 +
           ((C113 * C310 - C114 * C297 - C113 * C311 + C47890 * C327) * C102 +
            C373 * C103 + C374 * C104) *
               C47907 * C47704 * C47974) *
              C291 +
          ((C372 * C102 + C371 * C103 + C375 * C104) * C47907 * C47704 *
               C48001 -
           (C176 * C104 + C175 * C103 + C174 * C102) * C47907 * C47704 *
               C48013 -
           (C376 * C104 + C374 * C103 + C373 * C102) * C47907 * C47704 *
               C47974) *
              C292 +
          ((C175 * C102 + C176 * C103 + C177 * C104) * C47907 * C47704 *
               C48013 -
           ((C113 * C320 - C114 * C302 - C113 * C321 + C47890 * C332) * C104 +
            C375 * C103 + C371 * C102) *
               C47907 * C47704 * C48001 +
           (C374 * C102 + C376 * C103 +
            (C113 * C322 - C114 * C303 - C113 * C323 + C47890 * C333) * C104) *
               C47907 * C47704 * C47974) *
              C47968)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C47890 * C136) * C102 +
            C174 * C103 + C175 * C104) *
               C47907 * C47704 * C1094 -
           (C371 * C104 + C372 * C103 +
            (C113 * C308 - C114 * C296 - C113 * C309 + C47890 * C326) * C102) *
               C47907 * C47704 * C1095 +
           ((C113 * C310 - C114 * C297 - C113 * C311 + C47890 * C327) * C102 +
            C373 * C103 + C374 * C104) *
               C47907 * C47704 * C47974) *
              C48010 +
          ((C372 * C102 + C371 * C103 + C375 * C104) * C47907 * C47704 * C1095 -
           (C176 * C104 + C175 * C103 + C174 * C102) * C47907 * C47704 * C1094 -
           (C376 * C104 + C374 * C103 + C373 * C102) * C47907 * C47704 *
               C47974) *
              C47997 +
          ((C175 * C102 + C176 * C103 + C177 * C104) * C47907 * C47704 * C1094 -
           (C686 * C104 + C375 * C103 + C371 * C102) * C47907 * C47704 * C1095 +
           (C374 * C102 + C376 * C103 +
            (C113 * C322 - C114 * C303 - C113 * C323 + C47890 * C333) * C104) *
               C47907 * C47704 * C47974) *
              C47968)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C122 - C114 * C115 - C113 * C123 + C47890 * C136) * C102 +
           C174 * C103 + C175 * C104) *
              C47907 * C47704 * C1162 -
          (C371 * C104 + C372 * C103 +
           (C113 * C308 - C114 * C296 - C113 * C309 + C47890 * C326) * C102) *
              C47907 * C47704 * C1163 +
          ((C113 * C310 - C114 * C297 - C113 * C311 + C47890 * C327) * C102 +
           C373 * C103 + C374 * C104) *
              C47907 * C47704 * C1164 -
          ((C113 * C1174 - C114 * C1168 - C113 * C1175 + C47890 * C1186) *
               C104 +
           (C113 * C1176 - C114 * C1169 - C113 * C1177 + C47890 * C1187) *
               C103 +
           (C113 * C1178 - C114 * C1170 - C113 * C1179 + C47890 * C1188) *
               C102) *
              C47907 * C47704 * C1165 +
          ((C113 * C1180 - C114 * C1171 - C113 * C1181 + C47890 * C1189) *
               C102 +
           (C113 * C1182 - C114 * C1172 - C113 * C1183 + C47890 * C1190) *
               C103 +
           (C113 * C1184 - C114 * C1173 - C113 * C1185 + C47890 * C1191) *
               C104) *
              C47907 * C47704 * C1166) *
         C47658) /
            (p * q * std::sqrt(p + q));
    d2ee[25] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C4787 * C122 - C4788 * C115 - C4787 * C123 + C4783 * C136 +
             C4789 * C308 - C4790 * C296 - C4789 * C309 + C47992 * C326) *
                C4785 +
            (C4840 + C4841) * C47961) *
               C47907 * C47704 * C47745 -
           ((C5042 + C5043) * C47961 +
            (C4789 * C310 - C4790 * C297 - C4789 * C311 + C47992 * C327 +
             C4787 * C308 - C4788 * C296 - C4787 * C309 + C4783 * C326) *
                C4785) *
               C47907 * C47704 * C47752 +
           ((C4787 * C310 - C4788 * C297 - C4787 * C311 + C4783 * C327 +
             C4789 * C1178 - C4790 * C1170 - C4789 * C1179 + C47992 * C1188) *
                C4785 +
            (C5044 + C5045) * C47961) *
               C47907 * C47704 * C2908) *
              C47663 +
          (((C5043 + C5042) * C4785 + (C5046 + C5047) * C47961) * C47907 *
               C47704 * C47752 -
           ((C4842 + C4843) * C47961 + (C4841 + C4840) * C4785) * C47907 *
               C47704 * C47745 -
           ((C5048 + C5049) * C47961 + (C5045 + C5044) * C4785) * C47907 *
               C47704 * C2908) *
              C47672 +
          (((C4843 + C4842) * C4785 + (C4844 + C4845) * C47961) * C47907 *
               C47704 * C47745 -
           ((C5394 + C5395) * C47961 + (C5047 + C5046) * C4785) * C47907 *
               C47704 * C47752 +
           ((C5049 + C5048) * C4785 +
            (C4787 * C318 - C4788 * C301 - C4787 * C319 + C4783 * C331 +
             C4789 * C1443 - C4790 * C1442 - C4789 * C1444 + C47992 * C1445) *
                C47961) *
               C47907 * C47704 * C2908) *
              C2911)) /
        (p * q * std::sqrt(p + q));
    d2ee[26] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C4787 * C122 - C4788 * C115 - C4787 * C123 + C4783 * C136 +
              C4789 * C308 - C4790 * C296 - C4789 * C309 + C47992 * C326) *
                 C4785 +
             (C4840 + C4841) * C47961) *
                C47907 * C47943 -
            ((C5244 + C5245) * C47961 +
             (C4789 * C948 - C4790 * C943 - C4789 * C949 + C47992 * C958 +
              C4787 * C503 - C4788 * C491 - C4787 * C504 + C4783 * C521) *
                 C4785) *
                C47907 * C47791) *
               C47745 +
           (((C4787 * C948 - C4788 * C943 - C4787 * C949 + C4783 * C958 +
              C4789 * C1321 - C4790 * C1307 - C4789 * C1322 + C47992 * C1334) *
                 C4785 +
             (C5758 + C5759) * C47961) *
                C47907 * C47791 -
            ((C5042 + C5043) * C47961 +
             (C4789 * C310 - C4790 * C297 - C4789 * C311 + C47992 * C327 +
              C4787 * C308 - C4788 * C296 - C4787 * C309 + C4783 * C326) *
                 C4785) *
                C47907 * C47943) *
               C47752 +
           (((C4787 * C310 - C4788 * C297 - C4787 * C311 + C4783 * C327 +
              C4789 * C1178 - C4790 * C1170 - C4789 * C1179 + C47992 * C1188) *
                 C4785 +
             (C5044 + C5045) * C47961) *
                C47907 * C47943 -
            ((C6502 + C6503) * C47961 +
             (C4789 * C1725 - C4790 * C1722 - C4789 * C1726 + C47992 * C1731 +
              C4787 * C1321 - C4788 * C1307 - C4787 * C1322 + C4783 * C1334) *
                 C4785) *
                C47907 * C47791) *
               C2908) *
              C2648 +
          ((((C5245 + C5244) * C4785 + (C5248 + C5249) * C47961) * C47907 *
                C47791 -
            ((C4842 + C4843) * C47961 + (C4841 + C4840) * C4785) * C47907 *
                C47943) *
               C47745 +
           (((C5043 + C5042) * C4785 + (C5046 + C5047) * C47961) * C47907 *
                C47943 -
            ((C5760 + C5761) * C47961 + (C5759 + C5758) * C4785) * C47907 *
                C47791) *
               C47752 +
           (((C6503 + C6502) * C4785 +
             (C4787 * C1317 - C4788 * C1305 - C4787 * C1318 + C4783 * C1332 +
              C4789 * C1729 - C4790 * C1724 - C4789 * C1730 + C47992 * C1733) *
                 C47961) *
                C47907 * C47791 -
            ((C5048 + C5049) * C47961 + (C5045 + C5044) * C4785) * C47907 *
                C47943) *
               C2908) *
              C47669)) /
        (p * q * std::sqrt(p + q));
    d2ee[27] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4787 * C122 - C4788 * C115 - C4787 * C123 + C4783 * C136 +
             C4789 * C308 - C4790 * C296 - C4789 * C309 + C47992 * C326) *
                C4785 +
            (C4840 + C4841) * C47961) *
               C47907 * C47704 * C48020 -
           ((C5042 + C5043) * C47961 +
            (C4789 * C310 - C4790 * C297 - C4789 * C311 + C47992 * C327 +
             C4787 * C308 - C4788 * C296 - C4787 * C309 + C4783 * C326) *
                C4785) *
               C47907 * C47704 * C48016 +
           ((C4787 * C310 - C4788 * C297 - C4787 * C311 + C4783 * C327 +
             C4789 * C1178 - C4790 * C1170 - C4789 * C1179 + C47992 * C1188) *
                C4785 +
            (C5044 + C5045) * C47961) *
               C47907 * C47704 * C48006 -
           ((C6294 + C6295) * C47961 +
            (C4789 * C1180 - C4790 * C1171 - C4789 * C1181 + C47992 * C1189 +
             C4787 * C1178 - C4788 * C1170 - C4787 * C1179 + C4783 * C1188) *
                C4785) *
               C47907 * C47704 * C47984) *
              C2648 +
          (((C5043 + C5042) * C4785 + (C5046 + C5047) * C47961) * C47907 *
               C47704 * C48016 -
           ((C4842 + C4843) * C47961 + (C4841 + C4840) * C4785) * C47907 *
               C47704 * C48020 -
           ((C5048 + C5049) * C47961 + (C5045 + C5044) * C4785) * C47907 *
               C47704 * C48006 +
           ((C6295 + C6294) * C4785 +
            (C4787 * C1174 - C4788 * C1168 - C4787 * C1175 + C4783 * C1186 +
             C4789 * C1184 - C4790 * C1173 - C4789 * C1185 + C47992 * C1191) *
                C47961) *
               C47907 * C47704 * C47984) *
              C47669)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4787 * C122 - C4788 * C115 - C4787 * C123 + C4783 * C136 +
             C4789 * C308 - C4790 * C296 - C4789 * C309 + C47992 * C326) *
                C4785 +
            (C4840 + C4841) * C47961) *
               C47907 * C47704 * C2540 -
           ((C5042 + C5043) * C47961 +
            (C4789 * C310 - C4790 * C297 - C4789 * C311 + C47992 * C327 +
             C4787 * C308 - C4788 * C296 - C4787 * C309 + C4783 * C326) *
                C4785) *
               C47907 * C47704 * C47749) *
              C48019 +
          (((C5043 + C5042) * C4785 + (C5046 + C5047) * C47961) * C47907 *
               C47704 * C47749 -
           ((C4842 + C4843) * C47961 + (C4841 + C4840) * C4785) * C47907 *
               C47704 * C2540) *
              C48012 +
          (((C4843 + C4842) * C4785 + (C4844 + C4845) * C47961) * C47907 *
               C47704 * C2540 -
           ((C5394 + C5395) * C47961 + (C5047 + C5046) * C4785) * C47907 *
               C47704 * C47749) *
              C47999 +
          (((C5395 + C5394) * C4785 +
            (C4787 * C320 - C4788 * C302 - C4787 * C321 + C4783 * C332 +
             C4789 * C322 - C4790 * C303 - C4789 * C323 + C47992 * C333) *
                C47961) *
               C47907 * C47704 * C47749 -
           ((C4846 + C4847) * C47961 + (C4845 + C4844) * C4785) * C47907 *
               C47704 * C2540) *
              C47978)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C4787 * C122 - C4788 * C115 - C4787 * C123 + C4783 * C136 +
              C4789 * C308 - C4790 * C296 - C4789 * C309 + C47992 * C326) *
                 C4785 +
             (C4840 + C4841) * C47961) *
                C47907 * C48014 -
            ((C5244 + C5245) * C47961 +
             (C4789 * C948 - C4790 * C943 - C4789 * C949 + C47992 * C958 +
              C4787 * C503 - C4788 * C491 - C4787 * C504 + C4783 * C521) *
                 C4785) *
                C47907 * C48003 +
            ((C4787 * C505 - C4788 * C492 - C4787 * C506 + C4783 * C522 +
              C4789 * C1315 - C4790 * C1304 - C4789 * C1316 + C47992 * C1331) *
                 C4785 +
             (C5246 + C5247) * C47961) *
                C47907 * C47977) *
               C2540 +
           (((C4787 * C948 - C4788 * C943 - C4787 * C949 + C4783 * C958 +
              C4789 * C1321 - C4790 * C1307 - C4789 * C1322 + C47992 * C1334) *
                 C4785 +
             (C5758 + C5759) * C47961) *
                C47907 * C48003 -
            ((C5042 + C5043) * C47961 +
             (C4789 * C310 - C4790 * C297 - C4789 * C311 + C47992 * C327 +
              C4787 * C308 - C4788 * C296 - C4787 * C309 + C4783 * C326) *
                 C4785) *
                C47907 * C48014 -
            ((C7230 + C7231) * C47961 +
             (C4789 * C1323 - C4790 * C1308 - C4789 * C1324 + C47992 * C1335 +
              C4787 * C1315 - C4788 * C1304 - C4787 * C1316 + C4783 * C1331) *
                 C4785) *
                C47907 * C47977) *
               C47749) *
              C2648 +
          ((((C5245 + C5244) * C4785 + (C5248 + C5249) * C47961) * C47907 *
                C48003 -
            ((C4842 + C4843) * C47961 + (C4841 + C4840) * C4785) * C47907 *
                C48014 -
            ((C5250 + C5251) * C47961 + (C5247 + C5246) * C4785) * C47907 *
                C47977) *
               C2540 +
           (((C5043 + C5042) * C4785 + (C5046 + C5047) * C47961) * C47907 *
                C48014 -
            ((C5760 + C5761) * C47961 + (C5759 + C5758) * C4785) * C47907 *
                C48003 +
            ((C7231 + C7230) * C4785 +
             (C4787 * C1311 - C4788 * C1302 - C4787 * C1312 + C4783 * C1329 +
              C4789 * C1327 - C4790 * C1310 - C4789 * C1328 + C47992 * C1337) *
                 C47961) *
                C47907 * C47977) *
               C47749) *
              C47669)) /
            (p * q * std::sqrt(p + q));
    d2ee[28] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C4787 * C122 - C4788 * C115 - C4787 * C123 + C4783 * C136 +
              C4789 * C308 - C4790 * C296 - C4789 * C309 + C47992 * C326) *
                 C4785 +
             (C4840 + C4841) * C47961) *
                C47907 * C47943 -
            ((C5244 + C5245) * C47961 +
             (C4789 * C948 - C4790 * C943 - C4789 * C949 + C47992 * C958 +
              C4787 * C503 - C4788 * C491 - C4787 * C504 + C4783 * C521) *
                 C4785) *
                C47907 * C47791) *
               C2540 +
           (((C4787 * C948 - C4788 * C943 - C4787 * C949 + C4783 * C958 +
              C4789 * C1321 - C4790 * C1307 - C4789 * C1322 + C47992 * C1334) *
                 C4785 +
             (C5758 + C5759) * C47961) *
                C47907 * C47791 -
            ((C5042 + C5043) * C47961 +
             (C4789 * C310 - C4790 * C297 - C4789 * C311 + C47992 * C327 +
              C4787 * C308 - C4788 * C296 - C4787 * C309 + C4783 * C326) *
                 C4785) *
                C47907 * C47943) *
               C47749) *
              C47663 +
          ((((C5245 + C5244) * C4785 + (C5248 + C5249) * C47961) * C47907 *
                C47791 -
            ((C4842 + C4843) * C47961 + (C4841 + C4840) * C4785) * C47907 *
                C47943) *
               C2540 +
           (((C5043 + C5042) * C4785 + (C5046 + C5047) * C47961) * C47907 *
                C47943 -
            ((C5760 + C5761) * C47961 + (C5759 + C5758) * C4785) * C47907 *
                C47791) *
               C47749) *
              C47672 +
          ((((C4843 + C4842) * C4785 + (C4844 + C4845) * C47961) * C47907 *
                C47943 -
            ((C5538 + C5539) * C47961 + (C5249 + C5248) * C4785) * C47907 *
                C47791) *
               C2540 +
           (((C5761 + C5760) * C4785 +
             (C4787 * C954 - C4788 * C946 - C4787 * C955 + C4783 * C961 +
              C4789 * C1607 - C4790 * C1606 - C4789 * C1608 + C47992 * C1609) *
                 C47961) *
                C47907 * C47791 -
            ((C5394 + C5395) * C47961 + (C5047 + C5046) * C4785) * C47907 *
                C47943) *
               C47749) *
              C2911)) /
        (p * q * std::sqrt(p + q));
    d2ee[29] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C4787 * C122 - C4788 * C115 - C4787 * C123 + C4783 * C136 +
             C4789 * C308 - C4790 * C296 - C4789 * C309 + C47992 * C326) *
                C4785 +
            (C4840 + C4841) * C47961) *
               C47907 * C47704 * C2540 -
           ((C5042 + C5043) * C47961 +
            (C4789 * C310 - C4790 * C297 - C4789 * C311 + C47992 * C327 +
             C4787 * C308 - C4788 * C296 - C4787 * C309 + C4783 * C326) *
                C4785) *
               C47907 * C47704 * C47749) *
              C48019 +
          (((C5043 + C5042) * C4785 + (C5046 + C5047) * C47961) * C47907 *
               C47704 * C47749 -
           ((C4842 + C4843) * C47961 + (C4841 + C4840) * C4785) * C47907 *
               C47704 * C2540) *
              C48012 +
          (((C4843 + C4842) * C4785 + (C4844 + C4845) * C47961) * C47907 *
               C47704 * C2540 -
           ((C5394 + C5395) * C47961 + (C5047 + C5046) * C4785) * C47907 *
               C47704 * C47749) *
              C47999 +
          (((C5395 + C5394) * C4785 +
            (C4787 * C320 - C4788 * C302 - C4787 * C321 + C4783 * C332 +
             C4789 * C322 - C4790 * C303 - C4789 * C323 + C47992 * C333) *
                C47961) *
               C47907 * C47704 * C47749 -
           ((C4846 + C4847) * C47961 + (C4845 + C4844) * C4785) * C47907 *
               C47704 * C2540) *
              C47978)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C4787 * C122 - C4788 * C115 - C4787 * C123 + C4783 * C136 +
             C4789 * C308 - C4790 * C296 - C4789 * C309 + C47992 * C326) *
                C4785 +
            (C4840 + C4841) * C47961) *
               C47907 * C47704 * C48020 -
           ((C5042 + C5043) * C47961 +
            (C4789 * C310 - C4790 * C297 - C4789 * C311 + C47992 * C327 +
             C4787 * C308 - C4788 * C296 - C4787 * C309 + C4783 * C326) *
                C4785) *
               C47907 * C47704 * C48016 +
           ((C4787 * C310 - C4788 * C297 - C4787 * C311 + C4783 * C327 +
             C4789 * C1178 - C4790 * C1170 - C4789 * C1179 + C47992 * C1188) *
                C4785 +
            (C5044 + C5045) * C47961) *
               C47907 * C47704 * C48006 -
           ((C6294 + C6295) * C47961 +
            (C4789 * C1180 - C4790 * C1171 - C4789 * C1181 + C47992 * C1189 +
             C4787 * C1178 - C4788 * C1170 - C4787 * C1179 + C4783 * C1188) *
                C4785) *
               C47907 * C47704 * C47984) *
              C2648 +
          (((C5043 + C5042) * C4785 + (C5046 + C5047) * C47961) * C47907 *
               C47704 * C48016 -
           ((C4842 + C4843) * C47961 + (C4841 + C4840) * C4785) * C47907 *
               C47704 * C48020 -
           ((C5048 + C5049) * C47961 + (C5045 + C5044) * C4785) * C47907 *
               C47704 * C48006 +
           ((C6295 + C6294) * C4785 +
            (C4787 * C1174 - C4788 * C1168 - C4787 * C1175 + C4783 * C1186 +
             C4789 * C1184 - C4790 * C1173 - C4789 * C1185 + C47992 * C1191) *
                C47961) *
               C47907 * C47704 * C47984) *
              C47669)) /
            (p * q * std::sqrt(p + q));
    d2ee[30] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C4787 * C122 - C4788 * C115 - C4787 * C123 + C4783 * C136 +
              C4789 * C308 - C4790 * C296 - C4789 * C309 + C47992 * C326) *
                 C4785 +
             (C4840 + C4841) * C47961) *
                C47907 * C3302 -
            ((C5244 + C5245) * C47961 +
             (C4789 * C948 - C4790 * C943 - C4789 * C949 + C47992 * C958 +
              C4787 * C503 - C4788 * C491 - C4787 * C504 + C4783 * C521) *
                 C4785) *
                C47907 * C47791) *
               C47745 +
           (((C4787 * C948 - C4788 * C943 - C4787 * C949 + C4783 * C958 +
              C4789 * C1321 - C4790 * C1307 - C4789 * C1322 + C47992 * C1334) *
                 C4785 +
             (C5758 + C5759) * C47961) *
                C47907 * C47791 -
            ((C5042 + C5043) * C47961 +
             (C4789 * C310 - C4790 * C297 - C4789 * C311 + C47992 * C327 +
              C4787 * C308 - C4788 * C296 - C4787 * C309 + C4783 * C326) *
                 C4785) *
                C47907 * C3302) *
               C47752 +
           (((C4787 * C310 - C4788 * C297 - C4787 * C311 + C4783 * C327 +
              C4789 * C1178 - C4790 * C1170 - C4789 * C1179 + C47992 * C1188) *
                 C4785 +
             (C5044 + C5045) * C47961) *
                C47907 * C3302 -
            ((C6502 + C6503) * C47961 +
             (C4789 * C1725 - C4790 * C1722 - C4789 * C1726 + C47992 * C1731 +
              C4787 * C1321 - C4788 * C1307 - C4787 * C1322 + C4783 * C1334) *
                 C4785) *
                C47907 * C47791) *
               C2908) *
              C47928 +
          ((((C5245 + C5244) * C4785 + (C5248 + C5249) * C47961) * C47907 *
                C47791 -
            ((C4842 + C4843) * C47961 + (C4841 + C4840) * C4785) * C47907 *
                C3302) *
               C47745 +
           (((C5043 + C5042) * C4785 + (C5046 + C5047) * C47961) * C47907 *
                C3302 -
            ((C5760 + C5761) * C47961 + (C5759 + C5758) * C4785) * C47907 *
                C47791) *
               C47752 +
           (((C6503 + C6502) * C4785 +
             (C4787 * C1317 - C4788 * C1305 - C4787 * C1318 + C4783 * C1332 +
              C4789 * C1729 - C4790 * C1724 - C4789 * C1730 + C47992 * C1733) *
                 C47961) *
                C47907 * C47791 -
            ((C5048 + C5049) * C47961 + (C5045 + C5044) * C4785) * C47907 *
                C3302) *
               C2908) *
              C47669)) /
        (p * q * std::sqrt(p + q));
    d2ee[31] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C4787 * C122 - C4788 * C115 - C4787 * C123 + C4783 * C136 +
             C4789 * C308 - C4790 * C296 - C4789 * C309 + C47992 * C326) *
                C4785 +
            (C4840 + C4841) * C47961) *
               C47907 * C47787 -
           ((C5244 + C5245) * C47961 +
            (C4789 * C948 - C4790 * C943 - C4789 * C949 + C47992 * C958 +
             C4787 * C503 - C4788 * C491 - C4787 * C504 + C4783 * C521) *
                C4785) *
               C47907 * C47794 +
           ((C4787 * C505 - C4788 * C492 - C4787 * C506 + C4783 * C522 +
             C4789 * C1315 - C4790 * C1304 - C4789 * C1316 + C47992 * C1331) *
                C4785 +
            (C5246 + C5247) * C47961) *
               C47907 * C3810) *
              C47745 +
          (((C4787 * C948 - C4788 * C943 - C4787 * C949 + C4783 * C958 +
             C4789 * C1321 - C4790 * C1307 - C4789 * C1322 + C47992 * C1334) *
                C4785 +
            (C5758 + C5759) * C47961) *
               C47907 * C47794 -
           ((C5042 + C5043) * C47961 +
            (C4789 * C310 - C4790 * C297 - C4789 * C311 + C47992 * C327 +
             C4787 * C308 - C4788 * C296 - C4787 * C309 + C4783 * C326) *
                C4785) *
               C47907 * C47787 -
           ((C7230 + C7231) * C47961 +
            (C4789 * C1323 - C4790 * C1308 - C4789 * C1324 + C47992 * C1335 +
             C4787 * C1315 - C4788 * C1304 - C4787 * C1316 + C4783 * C1331) *
                C4785) *
               C47907 * C3810) *
              C47752 +
          (((C4787 * C310 - C4788 * C297 - C4787 * C311 + C4783 * C327 +
             C4789 * C1178 - C4790 * C1170 - C4789 * C1179 + C47992 * C1188) *
                C4785 +
            (C5044 + C5045) * C47961) *
               C47907 * C47787 -
           ((C6502 + C6503) * C47961 +
            (C4789 * C1725 - C4790 * C1722 - C4789 * C1726 + C47992 * C1731 +
             C4787 * C1321 - C4788 * C1307 - C4787 * C1322 + C4783 * C1334) *
                C4785) *
               C47907 * C47794 +
           ((C4787 * C1323 - C4788 * C1308 - C4787 * C1324 + C4783 * C1335 +
             C4789 * C6145 - C4790 * C6143 - C4789 * C6146 + C47992 * C6149) *
                C4785 +
            (C4787 * C1325 - C4788 * C1309 - C4787 * C1326 + C4783 * C1336 +
             C4789 * C6147 - C4790 * C6144 - C4789 * C6148 + C47992 * C6150) *
                C47961) *
               C47907 * C3810) *
              C2908) *
         C47658) /
        (p * q * std::sqrt(p + q));
    d2ee[32] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4787 * C122 - C4788 * C115 - C4787 * C123 + C4783 * C136 +
             C4789 * C308 - C4790 * C296 - C4789 * C309 + C47992 * C326) *
                C4785 +
            (C4840 + C4841) * C47961) *
               C47907 * C3302 -
           ((C5244 + C5245) * C47961 +
            (C4789 * C948 - C4790 * C943 - C4789 * C949 + C47992 * C958 +
             C4787 * C503 - C4788 * C491 - C4787 * C504 + C4783 * C521) *
                C4785) *
               C47907 * C47791) *
              C48020 +
          (((C4787 * C948 - C4788 * C943 - C4787 * C949 + C4783 * C958 +
             C4789 * C1321 - C4790 * C1307 - C4789 * C1322 + C47992 * C1334) *
                C4785 +
            (C5758 + C5759) * C47961) *
               C47907 * C47791 -
           ((C5042 + C5043) * C47961 +
            (C4789 * C310 - C4790 * C297 - C4789 * C311 + C47992 * C327 +
             C4787 * C308 - C4788 * C296 - C4787 * C309 + C4783 * C326) *
                C4785) *
               C47907 * C3302) *
              C48016 +
          (((C4787 * C310 - C4788 * C297 - C4787 * C311 + C4783 * C327 +
             C4789 * C1178 - C4790 * C1170 - C4789 * C1179 + C47992 * C1188) *
                C4785 +
            (C5044 + C5045) * C47961) *
               C47907 * C3302 -
           ((C6502 + C6503) * C47961 +
            (C4789 * C1725 - C4790 * C1722 - C4789 * C1726 + C47992 * C1731 +
             C4787 * C1321 - C4788 * C1307 - C4787 * C1322 + C4783 * C1334) *
                C4785) *
               C47907 * C47791) *
              C48006 +
          (((C4787 * C1725 - C4788 * C1722 - C4787 * C1726 + C4783 * C1731 +
             C4789 * C6635 - C4790 * C6633 - C4789 * C6636 + C47992 * C6639) *
                C4785 +
            (C4787 * C1727 - C4788 * C1723 - C4787 * C1728 + C4783 * C1732 +
             C4789 * C6637 - C4790 * C6634 - C4789 * C6638 + C47992 * C6640) *
                C47961) *
               C47907 * C47791 -
           ((C6294 + C6295) * C47961 +
            (C4789 * C1180 - C4790 * C1171 - C4789 * C1181 + C47992 * C1189 +
             C4787 * C1178 - C4788 * C1170 - C4787 * C1179 + C4783 * C1188) *
                C4785) *
               C47907 * C3302) *
              C47984) *
         C47658) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C4787 * C122 - C4788 * C115 - C4787 * C123 + C4783 * C136 +
              C4789 * C308 - C4790 * C296 - C4789 * C309 + C47992 * C326) *
                 C4785 +
             (C4840 + C4841) * C47961) *
                C47907 * C3302 -
            ((C5244 + C5245) * C47961 +
             (C4789 * C948 - C4790 * C943 - C4789 * C949 + C47992 * C958 +
              C4787 * C503 - C4788 * C491 - C4787 * C504 + C4783 * C521) *
                 C4785) *
                C47907 * C47791) *
               C2540 +
           (((C4787 * C948 - C4788 * C943 - C4787 * C949 + C4783 * C958 +
              C4789 * C1321 - C4790 * C1307 - C4789 * C1322 + C47992 * C1334) *
                 C4785 +
             (C5758 + C5759) * C47961) *
                C47907 * C47791 -
            ((C5042 + C5043) * C47961 +
             (C4789 * C310 - C4790 * C297 - C4789 * C311 + C47992 * C327 +
              C4787 * C308 - C4788 * C296 - C4787 * C309 + C4783 * C326) *
                 C4785) *
                C47907 * C3302) *
               C47749) *
              C48010 +
          ((((C5245 + C5244) * C4785 + (C5248 + C5249) * C47961) * C47907 *
                C47791 -
            ((C4842 + C4843) * C47961 + (C4841 + C4840) * C4785) * C47907 *
                C3302) *
               C2540 +
           (((C5043 + C5042) * C4785 + (C5046 + C5047) * C47961) * C47907 *
                C3302 -
            ((C5760 + C5761) * C47961 + (C5759 + C5758) * C4785) * C47907 *
                C47791) *
               C47749) *
              C47997 +
          ((((C4843 + C4842) * C4785 + (C4844 + C4845) * C47961) * C47907 *
                C3302 -
            ((C5538 + C5539) * C47961 + (C5249 + C5248) * C4785) * C47907 *
                C47791) *
               C2540 +
           (((C5761 + C5760) * C4785 +
             (C4787 * C954 - C4788 * C946 - C4787 * C955 + C4783 * C961 +
              C4789 * C1607 - C4790 * C1606 - C4789 * C1608 + C47992 * C1609) *
                 C47961) *
                C47907 * C47791 -
            ((C5394 + C5395) * C47961 + (C5047 + C5046) * C4785) * C47907 *
                C3302) *
               C47749) *
              C47968)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C4787 * C122 - C4788 * C115 - C4787 * C123 + C4783 * C136 +
             C4789 * C308 - C4790 * C296 - C4789 * C309 + C47992 * C326) *
                C4785 +
            (C4840 + C4841) * C47961) *
               C47907 * C48021 -
           ((C5244 + C5245) * C47961 +
            (C4789 * C948 - C4790 * C943 - C4789 * C949 + C47992 * C958 +
             C4787 * C503 - C4788 * C491 - C4787 * C504 + C4783 * C521) *
                C4785) *
               C47907 * C48018 +
           ((C4787 * C505 - C4788 * C492 - C4787 * C506 + C4783 * C522 +
             C4789 * C1315 - C4790 * C1304 - C4789 * C1316 + C47992 * C1331) *
                C4785 +
            (C5246 + C5247) * C47961) *
               C47907 * C48009 -
           ((C7374 + C7375) * C47961 +
            (C4789 * C2433 - C4790 * C2430 - C4789 * C2434 + C47992 * C2439 +
             C4787 * C2034 - C4788 * C2026 - C4787 * C2035 + C4783 * C2044) *
                C4785) *
               C47907 * C47990) *
              C2540 +
          (((C4787 * C948 - C4788 * C943 - C4787 * C949 + C4783 * C958 +
             C4789 * C1321 - C4790 * C1307 - C4789 * C1322 + C47992 * C1334) *
                C4785 +
            (C5758 + C5759) * C47961) *
               C47907 * C48018 -
           ((C5042 + C5043) * C47961 +
            (C4789 * C310 - C4790 * C297 - C4789 * C311 + C47992 * C327 +
             C4787 * C308 - C4788 * C296 - C4787 * C309 + C4783 * C326) *
                C4785) *
               C47907 * C48021 -
           ((C7230 + C7231) * C47961 +
            (C4789 * C1323 - C4790 * C1308 - C4789 * C1324 + C47992 * C1335 +
             C4787 * C1315 - C4788 * C1304 - C4787 * C1316 + C4783 * C1331) *
                C4785) *
               C47907 * C48009 +
           ((C4787 * C2433 - C4788 * C2430 - C4787 * C2434 + C4783 * C2439 +
             C4789 * C7507 - C4790 * C7505 - C4789 * C7508 + C47992 * C7511) *
                C4785 +
            (C4787 * C2435 - C4788 * C2431 - C4787 * C2436 + C4783 * C2440 +
             C4789 * C7509 - C4790 * C7506 - C4789 * C7510 + C47992 * C7512) *
                C47961) *
               C47907 * C47990) *
              C47749) *
         C47658) /
            (p * q * std::sqrt(p + q));
    d2ee[33] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C4787 * C122 - C4788 * C115 - C4787 * C123 + C4783 * C136 +
              C4789 * C308 - C4790 * C296 - C4789 * C309 + C47992 * C326) *
                 C4785 +
             (C4840 + C4841) * C47961) *
                C47907 * C47787 -
            ((C5244 + C5245) * C47961 +
             (C4789 * C948 - C4790 * C943 - C4789 * C949 + C47992 * C958 +
              C4787 * C503 - C4788 * C491 - C4787 * C504 + C4783 * C521) *
                 C4785) *
                C47907 * C47794 +
            ((C4787 * C505 - C4788 * C492 - C4787 * C506 + C4783 * C522 +
              C4789 * C1315 - C4790 * C1304 - C4789 * C1316 + C47992 * C1331) *
                 C4785 +
             (C5246 + C5247) * C47961) *
                C47907 * C3810) *
               C2540 +
           (((C4787 * C948 - C4788 * C943 - C4787 * C949 + C4783 * C958 +
              C4789 * C1321 - C4790 * C1307 - C4789 * C1322 + C47992 * C1334) *
                 C4785 +
             (C5758 + C5759) * C47961) *
                C47907 * C47794 -
            ((C5042 + C5043) * C47961 +
             (C4789 * C310 - C4790 * C297 - C4789 * C311 + C47992 * C327 +
              C4787 * C308 - C4788 * C296 - C4787 * C309 + C4783 * C326) *
                 C4785) *
                C47907 * C47787 -
            ((C7230 + C7231) * C47961 +
             (C4789 * C1323 - C4790 * C1308 - C4789 * C1324 + C47992 * C1335 +
              C4787 * C1315 - C4788 * C1304 - C4787 * C1316 + C4783 * C1331) *
                 C4785) *
                C47907 * C3810) *
               C47749) *
              C47928 +
          ((((C5245 + C5244) * C4785 + (C5248 + C5249) * C47961) * C47907 *
                C47794 -
            ((C4842 + C4843) * C47961 + (C4841 + C4840) * C4785) * C47907 *
                C47787 -
            ((C5250 + C5251) * C47961 + (C5247 + C5246) * C4785) * C47907 *
                C3810) *
               C2540 +
           (((C5043 + C5042) * C4785 + (C5046 + C5047) * C47961) * C47907 *
                C47787 -
            ((C5760 + C5761) * C47961 + (C5759 + C5758) * C4785) * C47907 *
                C47794 +
            ((C7231 + C7230) * C4785 +
             (C4787 * C1311 - C4788 * C1302 - C4787 * C1312 + C4783 * C1329 +
              C4789 * C1327 - C4790 * C1310 - C4789 * C1328 + C47992 * C1337) *
                 C47961) *
                C47907 * C3810) *
               C47749) *
              C47669)) /
        (p * q * std::sqrt(p + q));
    d2ee[34] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C4787 * C122 - C4788 * C115 - C4787 * C123 + C4783 * C136 +
              C4789 * C308 - C4790 * C296 - C4789 * C309 + C47992 * C326) *
                 C4785 +
             (C4840 + C4841) * C47961) *
                C47907 * C3302 -
            ((C5244 + C5245) * C47961 +
             (C4789 * C948 - C4790 * C943 - C4789 * C949 + C47992 * C958 +
              C4787 * C503 - C4788 * C491 - C4787 * C504 + C4783 * C521) *
                 C4785) *
                C47907 * C47791) *
               C2540 +
           (((C4787 * C948 - C4788 * C943 - C4787 * C949 + C4783 * C958 +
              C4789 * C1321 - C4790 * C1307 - C4789 * C1322 + C47992 * C1334) *
                 C4785 +
             (C5758 + C5759) * C47961) *
                C47907 * C47791 -
            ((C5042 + C5043) * C47961 +
             (C4789 * C310 - C4790 * C297 - C4789 * C311 + C47992 * C327 +
              C4787 * C308 - C4788 * C296 - C4787 * C309 + C4783 * C326) *
                 C4785) *
                C47907 * C3302) *
               C47749) *
              C48010 +
          ((((C5245 + C5244) * C4785 + (C5248 + C5249) * C47961) * C47907 *
                C47791 -
            ((C4842 + C4843) * C47961 + (C4841 + C4840) * C4785) * C47907 *
                C3302) *
               C2540 +
           (((C5043 + C5042) * C4785 + (C5046 + C5047) * C47961) * C47907 *
                C3302 -
            ((C5760 + C5761) * C47961 + (C5759 + C5758) * C4785) * C47907 *
                C47791) *
               C47749) *
              C47997 +
          ((((C4843 + C4842) * C4785 + (C4844 + C4845) * C47961) * C47907 *
                C3302 -
            ((C5538 + C5539) * C47961 + (C5249 + C5248) * C4785) * C47907 *
                C47791) *
               C2540 +
           (((C5761 + C5760) * C4785 +
             (C4787 * C954 - C4788 * C946 - C4787 * C955 + C4783 * C961 +
              C4789 * C1607 - C4790 * C1606 - C4789 * C1608 + C47992 * C1609) *
                 C47961) *
                C47907 * C47791 -
            ((C5394 + C5395) * C47961 + (C5047 + C5046) * C4785) * C47907 *
                C3302) *
               C47749) *
              C47968)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C4787 * C122 - C4788 * C115 - C4787 * C123 + C4783 * C136 +
             C4789 * C308 - C4790 * C296 - C4789 * C309 + C47992 * C326) *
                C4785 +
            (C4840 + C4841) * C47961) *
               C47907 * C3302 -
           ((C5244 + C5245) * C47961 +
            (C4789 * C948 - C4790 * C943 - C4789 * C949 + C47992 * C958 +
             C4787 * C503 - C4788 * C491 - C4787 * C504 + C4783 * C521) *
                C4785) *
               C47907 * C47791) *
              C48020 +
          (((C4787 * C948 - C4788 * C943 - C4787 * C949 + C4783 * C958 +
             C4789 * C1321 - C4790 * C1307 - C4789 * C1322 + C47992 * C1334) *
                C4785 +
            (C5758 + C5759) * C47961) *
               C47907 * C47791 -
           ((C5042 + C5043) * C47961 +
            (C4789 * C310 - C4790 * C297 - C4789 * C311 + C47992 * C327 +
             C4787 * C308 - C4788 * C296 - C4787 * C309 + C4783 * C326) *
                C4785) *
               C47907 * C3302) *
              C48016 +
          (((C4787 * C310 - C4788 * C297 - C4787 * C311 + C4783 * C327 +
             C4789 * C1178 - C4790 * C1170 - C4789 * C1179 + C47992 * C1188) *
                C4785 +
            (C5044 + C5045) * C47961) *
               C47907 * C3302 -
           ((C6502 + C6503) * C47961 +
            (C4789 * C1725 - C4790 * C1722 - C4789 * C1726 + C47992 * C1731 +
             C4787 * C1321 - C4788 * C1307 - C4787 * C1322 + C4783 * C1334) *
                C4785) *
               C47907 * C47791) *
              C48006 +
          (((C4787 * C1725 - C4788 * C1722 - C4787 * C1726 + C4783 * C1731 +
             C4789 * C6635 - C4790 * C6633 - C4789 * C6636 + C47992 * C6639) *
                C4785 +
            (C4787 * C1727 - C4788 * C1723 - C4787 * C1728 + C4783 * C1732 +
             C4789 * C6637 - C4790 * C6634 - C4789 * C6638 + C47992 * C6640) *
                C47961) *
               C47907 * C47791 -
           ((C6294 + C6295) * C47961 +
            (C4789 * C1180 - C4790 * C1171 - C4789 * C1181 + C47992 * C1189 +
             C4787 * C1178 - C4788 * C1170 - C4787 * C1179 + C4783 * C1188) *
                C4785) *
               C47907 * C3302) *
              C47984) *
         C47658) /
            (p * q * std::sqrt(p + q));
    d2ee[35] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4787 * C122 - C4788 * C115 - C4787 * C123 + C4783 * C136 +
             C4789 * C308 - C4790 * C296 - C4789 * C309 + C47992 * C326) *
                C4785 +
            (C4840 + C4841) * C47961) *
               C47907 * C47704 * C1436 -
           ((C5042 + C5043) * C47961 +
            (C4789 * C310 - C4790 * C297 - C4789 * C311 + C47992 * C327 +
             C4787 * C308 - C4788 * C296 - C4787 * C309 + C4783 * C326) *
                C4785) *
               C47907 * C47704 * C1437 +
           ((C4787 * C310 - C4788 * C297 - C4787 * C311 + C4783 * C327 +
             C4789 * C1178 - C4790 * C1170 - C4789 * C1179 + C47992 * C1188) *
                C4785 +
            (C5044 + C5045) * C47961) *
               C47907 * C47704 * C1438 -
           ((C6294 + C6295) * C47961 +
            (C4789 * C1180 - C4790 * C1171 - C4789 * C1181 + C47992 * C1189 +
             C4787 * C1178 - C4788 * C1170 - C4787 * C1179 + C4783 * C1188) *
                C4785) *
               C47907 * C47704 * C47984) *
              C47928 +
          (((C5043 + C5042) * C4785 + (C5046 + C5047) * C47961) * C47907 *
               C47704 * C1437 -
           ((C4842 + C4843) * C47961 + (C4841 + C4840) * C4785) * C47907 *
               C47704 * C1436 -
           ((C5048 + C5049) * C47961 + (C5045 + C5044) * C4785) * C47907 *
               C47704 * C1438 +
           ((C6295 + C6294) * C4785 +
            (C4787 * C1174 - C4788 * C1168 - C4787 * C1175 + C4783 * C1186 +
             C4789 * C1184 - C4790 * C1173 - C4789 * C1185 + C47992 * C1191) *
                C47961) *
               C47907 * C47704 * C47984) *
              C47669)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4787 * C122 - C4788 * C115 - C4787 * C123 + C4783 * C136 +
             C4789 * C308 - C4790 * C296 - C4789 * C309 + C47992 * C326) *
                C4785 +
            (C4840 + C4841) * C47961) *
               C47907 * C47704 * C47942 -
           ((C5042 + C5043) * C47961 +
            (C4789 * C310 - C4790 * C297 - C4789 * C311 + C47992 * C327 +
             C4787 * C308 - C4788 * C296 - C4787 * C309 + C4783 * C326) *
                C4785) *
               C47907 * C47704 * C47749) *
              C671 +
          (((C5043 + C5042) * C4785 + (C5046 + C5047) * C47961) * C47907 *
               C47704 * C47749 -
           ((C4842 + C4843) * C47961 + (C4841 + C4840) * C4785) * C47907 *
               C47704 * C47942) *
              C672 +
          (((C4843 + C4842) * C4785 + (C4844 + C4845) * C47961) * C47907 *
               C47704 * C47942 -
           ((C5394 + C5395) * C47961 + (C5047 + C5046) * C4785) * C47907 *
               C47704 * C47749) *
              C673 +
          (((C5395 + C5394) * C4785 +
            (C4787 * C320 - C4788 * C302 - C4787 * C321 + C4783 * C332 +
             C4789 * C322 - C4790 * C303 - C4789 * C323 + C47992 * C333) *
                C47961) *
               C47907 * C47704 * C47749 -
           ((C4846 + C4847) * C47961 + (C4845 + C4844) * C4785) * C47907 *
               C47704 * C47942) *
              C47978)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C4787 * C122 - C4788 * C115 - C4787 * C123 + C4783 * C136 +
              C4789 * C308 - C4790 * C296 - C4789 * C309 + C47992 * C326) *
                 C4785 +
             (C4840 + C4841) * C47961) *
                C47907 * C1844 -
            ((C5244 + C5245) * C47961 +
             (C4789 * C948 - C4790 * C943 - C4789 * C949 + C47992 * C958 +
              C4787 * C503 - C4788 * C491 - C4787 * C504 + C4783 * C521) *
                 C4785) *
                C47907 * C1845 +
            ((C4787 * C505 - C4788 * C492 - C4787 * C506 + C4783 * C522 +
              C4789 * C1315 - C4790 * C1304 - C4789 * C1316 + C47992 * C1331) *
                 C4785 +
             (C5246 + C5247) * C47961) *
                C47907 * C47977) *
               C47942 +
           (((C4787 * C948 - C4788 * C943 - C4787 * C949 + C4783 * C958 +
              C4789 * C1321 - C4790 * C1307 - C4789 * C1322 + C47992 * C1334) *
                 C4785 +
             (C5758 + C5759) * C47961) *
                C47907 * C1845 -
            ((C5042 + C5043) * C47961 +
             (C4789 * C310 - C4790 * C297 - C4789 * C311 + C47992 * C327 +
              C4787 * C308 - C4788 * C296 - C4787 * C309 + C4783 * C326) *
                 C4785) *
                C47907 * C1844 -
            ((C7230 + C7231) * C47961 +
             (C4789 * C1323 - C4790 * C1308 - C4789 * C1324 + C47992 * C1335 +
              C4787 * C1315 - C4788 * C1304 - C4787 * C1316 + C4783 * C1331) *
                 C4785) *
                C47907 * C47977) *
               C47749) *
              C47928 +
          ((((C5245 + C5244) * C4785 + (C5248 + C5249) * C47961) * C47907 *
                C1845 -
            ((C4842 + C4843) * C47961 + (C4841 + C4840) * C4785) * C47907 *
                C1844 -
            ((C5250 + C5251) * C47961 + (C5247 + C5246) * C4785) * C47907 *
                C47977) *
               C47942 +
           (((C5043 + C5042) * C4785 + (C5046 + C5047) * C47961) * C47907 *
                C1844 -
            ((C5760 + C5761) * C47961 + (C5759 + C5758) * C4785) * C47907 *
                C1845 +
            ((C7231 + C7230) * C4785 +
             (C4787 * C1311 - C4788 * C1302 - C4787 * C1312 + C4783 * C1329 +
              C4789 * C1327 - C4790 * C1310 - C4789 * C1328 + C47992 * C1337) *
                 C47961) *
                C47907 * C47977) *
               C47749) *
              C47669)) /
            (p * q * std::sqrt(p + q));
    d2ee[36] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4787 * C122 - C4788 * C115 - C4787 * C123 + C4783 * C136 +
             C4789 * C308 - C4790 * C296 - C4789 * C309 + C47992 * C326) *
                C4785 +
            (C4840 + C4841) * C47961) *
               C47907 * C47943 -
           ((C5244 + C5245) * C47961 +
            (C4789 * C948 - C4790 * C943 - C4789 * C949 + C47992 * C958 +
             C4787 * C503 - C4788 * C491 - C4787 * C504 + C4783 * C521) *
                C4785) *
               C47907 * C47791) *
              C1436 +
          (((C4787 * C948 - C4788 * C943 - C4787 * C949 + C4783 * C958 +
             C4789 * C1321 - C4790 * C1307 - C4789 * C1322 + C47992 * C1334) *
                C4785 +
            (C5758 + C5759) * C47961) *
               C47907 * C47791 -
           ((C5042 + C5043) * C47961 +
            (C4789 * C310 - C4790 * C297 - C4789 * C311 + C47992 * C327 +
             C4787 * C308 - C4788 * C296 - C4787 * C309 + C4783 * C326) *
                C4785) *
               C47907 * C47943) *
              C1437 +
          (((C4787 * C310 - C4788 * C297 - C4787 * C311 + C4783 * C327 +
             C4789 * C1178 - C4790 * C1170 - C4789 * C1179 + C47992 * C1188) *
                C4785 +
            (C5044 + C5045) * C47961) *
               C47907 * C47943 -
           ((C6502 + C6503) * C47961 +
            (C4789 * C1725 - C4790 * C1722 - C4789 * C1726 + C47992 * C1731 +
             C4787 * C1321 - C4788 * C1307 - C4787 * C1322 + C4783 * C1334) *
                C4785) *
               C47907 * C47791) *
              C1438 +
          (((C4787 * C1725 - C4788 * C1722 - C4787 * C1726 + C4783 * C1731 +
             C4789 * C6635 - C4790 * C6633 - C4789 * C6636 + C47992 * C6639) *
                C4785 +
            (C4787 * C1727 - C4788 * C1723 - C4787 * C1728 + C4783 * C1732 +
             C4789 * C6637 - C4790 * C6634 - C4789 * C6638 + C47992 * C6640) *
                C47961) *
               C47907 * C47791 -
           ((C6294 + C6295) * C47961 +
            (C4789 * C1180 - C4790 * C1171 - C4789 * C1181 + C47992 * C1189 +
             C4787 * C1178 - C4788 * C1170 - C4787 * C1179 + C4783 * C1188) *
                C4785) *
               C47907 * C47943) *
              C47984) *
         C47658) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C4787 * C122 - C4788 * C115 - C4787 * C123 + C4783 * C136 +
              C4789 * C308 - C4790 * C296 - C4789 * C309 + C47992 * C326) *
                 C4785 +
             (C4840 + C4841) * C47961) *
                C47907 * C47943 -
            ((C5244 + C5245) * C47961 +
             (C4789 * C948 - C4790 * C943 - C4789 * C949 + C47992 * C958 +
              C4787 * C503 - C4788 * C491 - C4787 * C504 + C4783 * C521) *
                 C4785) *
                C47907 * C47791) *
               C47942 +
           (((C4787 * C948 - C4788 * C943 - C4787 * C949 + C4783 * C958 +
              C4789 * C1321 - C4790 * C1307 - C4789 * C1322 + C47992 * C1334) *
                 C4785 +
             (C5758 + C5759) * C47961) *
                C47907 * C47791 -
            ((C5042 + C5043) * C47961 +
             (C4789 * C310 - C4790 * C297 - C4789 * C311 + C47992 * C327 +
              C4787 * C308 - C4788 * C296 - C4787 * C309 + C4783 * C326) *
                 C4785) *
                C47907 * C47943) *
               C47749) *
              C291 +
          ((((C5245 + C5244) * C4785 + (C5248 + C5249) * C47961) * C47907 *
                C47791 -
            ((C4842 + C4843) * C47961 + (C4841 + C4840) * C4785) * C47907 *
                C47943) *
               C47942 +
           (((C5043 + C5042) * C4785 + (C5046 + C5047) * C47961) * C47907 *
                C47943 -
            ((C5760 + C5761) * C47961 + (C5759 + C5758) * C4785) * C47907 *
                C47791) *
               C47749) *
              C292 +
          ((((C4843 + C4842) * C4785 + (C4844 + C4845) * C47961) * C47907 *
                C47943 -
            ((C5538 + C5539) * C47961 + (C5249 + C5248) * C4785) * C47907 *
                C47791) *
               C47942 +
           (((C5761 + C5760) * C4785 +
             (C4787 * C954 - C4788 * C946 - C4787 * C955 + C4783 * C961 +
              C4789 * C1607 - C4790 * C1606 - C4789 * C1608 + C47992 * C1609) *
                 C47961) *
                C47907 * C47791 -
            ((C5394 + C5395) * C47961 + (C5047 + C5046) * C4785) * C47907 *
                C47943) *
               C47749) *
              C47968)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C4787 * C122 - C4788 * C115 - C4787 * C123 + C4783 * C136 +
             C4789 * C308 - C4790 * C296 - C4789 * C309 + C47992 * C326) *
                C4785 +
            (C4840 + C4841) * C47961) *
               C47907 * C2310 -
           ((C5244 + C5245) * C47961 +
            (C4789 * C948 - C4790 * C943 - C4789 * C949 + C47992 * C958 +
             C4787 * C503 - C4788 * C491 - C4787 * C504 + C4783 * C521) *
                C4785) *
               C47907 * C2311 +
           ((C4787 * C505 - C4788 * C492 - C4787 * C506 + C4783 * C522 +
             C4789 * C1315 - C4790 * C1304 - C4789 * C1316 + C47992 * C1331) *
                C4785 +
            (C5246 + C5247) * C47961) *
               C47907 * C2312 -
           ((C7374 + C7375) * C47961 +
            (C4789 * C2433 - C4790 * C2430 - C4789 * C2434 + C47992 * C2439 +
             C4787 * C2034 - C4788 * C2026 - C4787 * C2035 + C4783 * C2044) *
                C4785) *
               C47907 * C47990) *
              C47942 +
          (((C4787 * C948 - C4788 * C943 - C4787 * C949 + C4783 * C958 +
             C4789 * C1321 - C4790 * C1307 - C4789 * C1322 + C47992 * C1334) *
                C4785 +
            (C5758 + C5759) * C47961) *
               C47907 * C2311 -
           ((C5042 + C5043) * C47961 +
            (C4789 * C310 - C4790 * C297 - C4789 * C311 + C47992 * C327 +
             C4787 * C308 - C4788 * C296 - C4787 * C309 + C4783 * C326) *
                C4785) *
               C47907 * C2310 -
           ((C7230 + C7231) * C47961 +
            (C4789 * C1323 - C4790 * C1308 - C4789 * C1324 + C47992 * C1335 +
             C4787 * C1315 - C4788 * C1304 - C4787 * C1316 + C4783 * C1331) *
                C4785) *
               C47907 * C2312 +
           ((C4787 * C2433 - C4788 * C2430 - C4787 * C2434 + C4783 * C2439 +
             C4789 * C7507 - C4790 * C7505 - C4789 * C7508 + C47992 * C7511) *
                C4785 +
            (C4787 * C2435 - C4788 * C2431 - C4787 * C2436 + C4783 * C2440 +
             C4789 * C7509 - C4790 * C7506 - C4789 * C7510 + C47992 * C7512) *
                C47961) *
               C47907 * C47990) *
              C47749) *
         C47658) /
            (p * q * std::sqrt(p + q));
    d2ee[37] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((C4787 * C122 - C4788 * C115 - C4787 * C123 + C4783 * C136 +
                C4789 * C308 - C4790 * C296 - C4789 * C309 + C47992 * C326) *
                   C4785 +
               (C4840 + C4841) * C47961) *
                  C47907 * C47704 * C47686 * C108 -
              ((C4842 + C4843) * C47961 + (C4841 + C4840) * C4785) * C47907 *
                  C47704 * C47686 * C109 +
              ((C4843 + C4842) * C4785 + (C4844 + C4845) * C47961) * C47907 *
                  C47704 * C47686 * C110 -
              ((C4846 + C4847) * C47961 + (C4845 + C4844) * C4785) * C47907 *
                  C47704 * C47686 * C111 +
              ((C4847 + C4846) * C4785 +
               (C4787 * C132 - C4788 * C120 - C4787 * C133 + C4783 * C141 +
                C4789 * C676 - C4790 * C675 - C4789 * C677 + C47992 * C678) *
                   C47961) *
                  C47907 * C47704 * C47686 * C112) +
         0.5 * std::pow(Pi, 2.5) *
             ((((C4787 * C122 - C4788 * C115 - C4787 * C123 + C4783 * C136 +
                 C4789 * C308 - C4790 * C296 - C4789 * C309 + C47992 * C326) *
                    C4785 +
                (C4840 + C4841) * C47961) *
                   C47907 * C47704 * C48013 -
               ((C5042 + C5043) * C47961 +
                (C4789 * C310 - C4790 * C297 - C4789 * C311 + C47992 * C327 +
                 C4787 * C308 - C4788 * C296 - C4787 * C309 + C4783 * C326) *
                    C4785) *
                   C47907 * C47704 * C48001 +
               ((C4787 * C310 - C4788 * C297 - C4787 * C311 + C4783 * C327 +
                 C4789 * C1178 - C4790 * C1170 - C4789 * C1179 +
                 C47992 * C1188) *
                    C4785 +
                (C5044 + C5045) * C47961) *
                   C47907 * C47704 * C47974) *
                  C291 +
              (((C5043 + C5042) * C4785 + (C5046 + C5047) * C47961) * C47907 *
                   C47704 * C48001 -
               ((C4842 + C4843) * C47961 + (C4841 + C4840) * C4785) * C47907 *
                   C47704 * C48013 -
               ((C5048 + C5049) * C47961 + (C5045 + C5044) * C4785) * C47907 *
                   C47704 * C47974) *
                  C292 +
              (((C4843 + C4842) * C4785 + (C4844 + C4845) * C47961) * C47907 *
                   C47704 * C48013 -
               ((C4789 * C318 - C4790 * C301 - C4789 * C319 + C47992 * C331 +
                 C4787 * C316 - C4788 * C300 - C4787 * C317 + C4783 * C330) *
                    C47961 +
                (C5047 + C5046) * C4785) *
                   C47907 * C47704 * C48001 +
               ((C5049 + C5048) * C4785 +
                (C4787 * C318 - C4788 * C301 - C4787 * C319 + C4783 * C331 +
                 C4789 * C1443 - C4790 * C1442 - C4789 * C1444 +
                 C47992 * C1445) *
                    C47961) *
                   C47907 * C47704 * C47974) *
                  C47968)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C4787 * C122 - C4788 * C115 - C4787 * C123 + C4783 * C136 +
             C4789 * C308 - C4790 * C296 - C4789 * C309 + C47992 * C326) *
                C4785 +
            (C4840 + C4841) * C47961) *
               C47907 * C48014 -
           ((C5244 + C5245) * C47961 +
            (C4789 * C948 - C4790 * C943 - C4789 * C949 + C47992 * C958 +
             C4787 * C503 - C4788 * C491 - C4787 * C504 + C4783 * C521) *
                C4785) *
               C47907 * C48003 +
           ((C4787 * C505 - C4788 * C492 - C4787 * C506 + C4783 * C522 +
             C4789 * C1315 - C4790 * C1304 - C4789 * C1316 + C47992 * C1331) *
                C4785 +
            (C5246 + C5247) * C47961) *
               C47907 * C47977) *
              C47686 * C291 +
          (((C5245 + C5244) * C4785 + (C5248 + C5249) * C47961) * C47907 *
               C48003 -
           ((C4842 + C4843) * C47961 + (C4841 + C4840) * C4785) * C47907 *
               C48014 -
           ((C5250 + C5251) * C47961 + (C5247 + C5246) * C4785) * C47907 *
               C47977) *
              C47686 * C292 +
          (((C4843 + C4842) * C4785 + (C4844 + C4845) * C47961) * C47907 *
               C48014 -
           ((C4789 * C954 - C4790 * C946 - C4789 * C955 + C47992 * C961 +
             C4787 * C511 - C4788 * C495 - C4787 * C512 + C4783 * C525) *
                C47961 +
            (C5249 + C5248) * C4785) *
               C47907 * C48003 +
           ((C5251 + C5250) * C4785 +
            (C4787 * C513 - C4788 * C496 - C4787 * C514 + C4783 * C526 +
             C4789 * C2195 - C4790 * C2194 - C4789 * C2196 + C47992 * C2197) *
                C47961) *
               C47907 * C47977) *
              C47686 * C47968)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C4787 * C122 - C4788 * C115 - C4787 * C123 + C4783 * C136 +
             C4789 * C308 - C4790 * C296 - C4789 * C309 + C47992 * C326) *
                C4785 +
            (C4840 + C4841) * C47961) *
               C47907 * C47704 * C1094 -
           ((C5042 + C5043) * C47961 +
            (C4789 * C310 - C4790 * C297 - C4789 * C311 + C47992 * C327 +
             C4787 * C308 - C4788 * C296 - C4787 * C309 + C4783 * C326) *
                C4785) *
               C47907 * C47704 * C1095 +
           ((C4787 * C310 - C4788 * C297 - C4787 * C311 + C4783 * C327 +
             C4789 * C1178 - C4790 * C1170 - C4789 * C1179 + C47992 * C1188) *
                C4785 +
            (C5044 + C5045) * C47961) *
               C47907 * C47704 * C47974) *
              C48010 +
          (((C5043 + C5042) * C4785 + (C5046 + C5047) * C47961) * C47907 *
               C47704 * C1095 -
           ((C4842 + C4843) * C47961 + (C4841 + C4840) * C4785) * C47907 *
               C47704 * C1094 -
           ((C5048 + C5049) * C47961 + (C5045 + C5044) * C4785) * C47907 *
               C47704 * C47974) *
              C47997 +
          (((C4843 + C4842) * C4785 + (C4844 + C4845) * C47961) * C47907 *
               C47704 * C1094 -
           ((C5394 + C5395) * C47961 + (C5047 + C5046) * C4785) * C47907 *
               C47704 * C1095 +
           ((C5049 + C5048) * C4785 +
            (C4787 * C318 - C4788 * C301 - C4787 * C319 + C4783 * C331 +
             C4789 * C1443 - C4790 * C1442 - C4789 * C1444 + C47992 * C1445) *
                C47961) *
               C47907 * C47704 * C47974) *
              C47968)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C4787 * C122 - C4788 * C115 - C4787 * C123 + C4783 * C136 +
            C4789 * C308 - C4790 * C296 - C4789 * C309 + C47992 * C326) *
               C4785 +
           (C4840 + C4841) * C47961) *
              C47907 * C47704 * C1162 -
          ((C5042 + C5043) * C47961 +
           (C4789 * C310 - C4790 * C297 - C4789 * C311 + C47992 * C327 +
            C4787 * C308 - C4788 * C296 - C4787 * C309 + C4783 * C326) *
               C4785) *
              C47907 * C47704 * C1163 +
          ((C4787 * C310 - C4788 * C297 - C4787 * C311 + C4783 * C327 +
            C4789 * C1178 - C4790 * C1170 - C4789 * C1179 + C47992 * C1188) *
               C4785 +
           (C5044 + C5045) * C47961) *
              C47907 * C47704 * C1164 -
          ((C4789 * C1182 - C4790 * C1172 - C4789 * C1183 + C47992 * C1190 +
            C4787 * C1176 - C4788 * C1169 - C4787 * C1177 + C4783 * C1187) *
               C47961 +
           (C4789 * C1180 - C4790 * C1171 - C4789 * C1181 + C47992 * C1189 +
            C4787 * C1178 - C4788 * C1170 - C4787 * C1179 + C4783 * C1188) *
               C4785) *
              C47907 * C47704 * C1165 +
          ((C4787 * C1180 - C4788 * C1171 - C4787 * C1181 + C4783 * C1189 +
            C4789 * C5991 - C4790 * C5989 - C4789 * C5992 + C47992 * C5995) *
               C4785 +
           (C4787 * C1182 - C4788 * C1172 - C4787 * C1183 + C4783 * C1190 +
            C4789 * C5993 - C4790 * C5990 - C4789 * C5994 + C47992 * C5996) *
               C47961) *
              C47907 * C47704 * C1166) *
         C47658) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C4787 * C122 - C4788 * C115 - C4787 * C123 + C4783 * C136 +
             C4789 * C308 - C4790 * C296 - C4789 * C309 + C47992 * C326) *
                C4785 +
            (C4840 + C4841) * C47961) *
               C47907 * C48014 -
           ((C5244 + C5245) * C47961 +
            (C4789 * C948 - C4790 * C943 - C4789 * C949 + C47992 * C958 +
             C4787 * C503 - C4788 * C491 - C4787 * C504 + C4783 * C521) *
                C4785) *
               C47907 * C48003 +
           ((C4787 * C505 - C4788 * C492 - C4787 * C506 + C4783 * C522 +
             C4789 * C1315 - C4790 * C1304 - C4789 * C1316 + C47992 * C1331) *
                C4785 +
            (C5246 + C5247) * C47961) *
               C47907 * C47977) *
              C1094 +
          (((C4787 * C948 - C4788 * C943 - C4787 * C949 + C4783 * C958 +
             C4789 * C1321 - C4790 * C1307 - C4789 * C1322 + C47992 * C1334) *
                C4785 +
            (C5758 + C5759) * C47961) *
               C47907 * C48003 -
           ((C5042 + C5043) * C47961 +
            (C4789 * C310 - C4790 * C297 - C4789 * C311 + C47992 * C327 +
             C4787 * C308 - C4788 * C296 - C4787 * C309 + C4783 * C326) *
                C4785) *
               C47907 * C48014 -
           ((C4789 * C1325 - C4790 * C1309 - C4789 * C1326 + C47992 * C1336 +
             C4787 * C1313 - C4788 * C1303 - C4787 * C1314 + C4783 * C1330) *
                C47961 +
            (C4789 * C1323 - C4790 * C1308 - C4789 * C1324 + C47992 * C1335 +
             C4787 * C1315 - C4788 * C1304 - C4787 * C1316 + C4783 * C1331) *
                C4785) *
               C47907 * C47977) *
              C1095 +
          (((C4787 * C310 - C4788 * C297 - C4787 * C311 + C4783 * C327 +
             C4789 * C1178 - C4790 * C1170 - C4789 * C1179 + C47992 * C1188) *
                C4785 +
            (C5044 + C5045) * C47961) *
               C47907 * C48014 -
           ((C4789 * C1727 - C4790 * C1723 - C4789 * C1728 + C47992 * C1732 +
             C4787 * C1319 - C4788 * C1306 - C4787 * C1320 + C4783 * C1333) *
                C47961 +
            (C4789 * C1725 - C4790 * C1722 - C4789 * C1726 + C47992 * C1731 +
             C4787 * C1321 - C4788 * C1307 - C4787 * C1322 + C4783 * C1334) *
                C4785) *
               C47907 * C48003 +
           ((C4787 * C1323 - C4788 * C1308 - C4787 * C1324 + C4783 * C1335 +
             C4789 * C6145 - C4790 * C6143 - C4789 * C6146 + C47992 * C6149) *
                C4785 +
            (C4787 * C1325 - C4788 * C1309 - C4787 * C1326 + C4783 * C1336 +
             C4789 * C6147 - C4790 * C6144 - C4789 * C6148 + C47992 * C6150) *
                C47961) *
               C47907 * C47977) *
              C47974) *
         C47658) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C4787 * C122 - C4788 * C115 - C4787 * C123 + C4783 * C136 +
             C4789 * C308 - C4790 * C296 - C4789 * C309 + C47992 * C326) *
                C4785 +
            (C4840 + C4841) * C47961) *
               C47907 * C1844 -
           ((C5244 + C5245) * C47961 +
            (C4789 * C948 - C4790 * C943 - C4789 * C949 + C47992 * C958 +
             C4787 * C503 - C4788 * C491 - C4787 * C504 + C4783 * C521) *
                C4785) *
               C47907 * C1845 +
           ((C4787 * C505 - C4788 * C492 - C4787 * C506 + C4783 * C522 +
             C4789 * C1315 - C4790 * C1304 - C4789 * C1316 + C47992 * C1331) *
                C4785 +
            (C5246 + C5247) * C47961) *
               C47907 * C47977) *
              C47686 * C48010 +
          (((C5245 + C5244) * C4785 + (C5248 + C5249) * C47961) * C47907 *
               C1845 -
           ((C4842 + C4843) * C47961 + (C4841 + C4840) * C4785) * C47907 *
               C1844 -
           ((C5250 + C5251) * C47961 + (C5247 + C5246) * C4785) * C47907 *
               C47977) *
              C47686 * C47997 +
          (((C4843 + C4842) * C4785 + (C4844 + C4845) * C47961) * C47907 *
               C1844 -
           ((C5538 + C5539) * C47961 + (C5249 + C5248) * C4785) * C47907 *
               C1845 +
           ((C5251 + C5250) * C4785 +
            (C4787 * C513 - C4788 * C496 - C4787 * C514 + C4783 * C526 +
             C4789 * C2195 - C4790 * C2194 - C4789 * C2196 + C47992 * C2197) *
                C47961) *
               C47907 * C47977) *
              C47686 * C47968)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C4787 * C122 - C4788 * C115 - C4787 * C123 + C4783 * C136 +
             C4789 * C308 - C4790 * C296 - C4789 * C309 + C47992 * C326) *
                C4785 +
            (C4840 + C4841) * C47961) *
               C47907 * C1844 -
           ((C5244 + C5245) * C47961 +
            (C4789 * C948 - C4790 * C943 - C4789 * C949 + C47992 * C958 +
             C4787 * C503 - C4788 * C491 - C4787 * C504 + C4783 * C521) *
                C4785) *
               C47907 * C1845 +
           ((C4787 * C505 - C4788 * C492 - C4787 * C506 + C4783 * C522 +
             C4789 * C1315 - C4790 * C1304 - C4789 * C1316 + C47992 * C1331) *
                C4785 +
            (C5246 + C5247) * C47961) *
               C47907 * C47977) *
              C48013 +
          (((C4787 * C948 - C4788 * C943 - C4787 * C949 + C4783 * C958 +
             C4789 * C1321 - C4790 * C1307 - C4789 * C1322 + C47992 * C1334) *
                C4785 +
            (C5758 + C5759) * C47961) *
               C47907 * C1845 -
           ((C5042 + C5043) * C47961 +
            (C4789 * C310 - C4790 * C297 - C4789 * C311 + C47992 * C327 +
             C4787 * C308 - C4788 * C296 - C4787 * C309 + C4783 * C326) *
                C4785) *
               C47907 * C1844 -
           ((C4789 * C1325 - C4790 * C1309 - C4789 * C1326 + C47992 * C1336 +
             C4787 * C1313 - C4788 * C1303 - C4787 * C1314 + C4783 * C1330) *
                C47961 +
            (C4789 * C1323 - C4790 * C1308 - C4789 * C1324 + C47992 * C1335 +
             C4787 * C1315 - C4788 * C1304 - C4787 * C1316 + C4783 * C1331) *
                C4785) *
               C47907 * C47977) *
              C48001 +
          (((C4787 * C310 - C4788 * C297 - C4787 * C311 + C4783 * C327 +
             C4789 * C1178 - C4790 * C1170 - C4789 * C1179 + C47992 * C1188) *
                C4785 +
            (C5044 + C5045) * C47961) *
               C47907 * C1844 -
           ((C6502 + C6503) * C47961 +
            (C4789 * C1725 - C4790 * C1722 - C4789 * C1726 + C47992 * C1731 +
             C4787 * C1321 - C4788 * C1307 - C4787 * C1322 + C4783 * C1334) *
                C4785) *
               C47907 * C1845 +
           ((C4787 * C1323 - C4788 * C1308 - C4787 * C1324 + C4783 * C1335 +
             C4789 * C6145 - C4790 * C6143 - C4789 * C6146 + C47992 * C6149) *
                C4785 +
            (C4787 * C1325 - C4788 * C1309 - C4787 * C1326 + C4783 * C1336 +
             C4789 * C6147 - C4790 * C6144 - C4789 * C6148 + C47992 * C6150) *
                C47961) *
               C47907 * C47977) *
              C47974) *
         C47658) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C4787 * C122 - C4788 * C115 - C4787 * C123 + C4783 * C136 +
            C4789 * C308 - C4790 * C296 - C4789 * C309 + C47992 * C326) *
               C4785 +
           (C4840 + C4841) * C47961) *
              C47907 * C2019 -
          ((C5244 + C5245) * C47961 +
           (C4789 * C948 - C4790 * C943 - C4789 * C949 + C47992 * C958 +
            C4787 * C503 - C4788 * C491 - C4787 * C504 + C4783 * C521) *
               C4785) *
              C47907 * C2020 +
          ((C4787 * C505 - C4788 * C492 - C4787 * C506 + C4783 * C522 +
            C4789 * C1315 - C4790 * C1304 - C4789 * C1316 + C47992 * C1331) *
               C4785 +
           (C5246 + C5247) * C47961) *
              C47907 * C2021 -
          ((C4789 * C2435 - C4790 * C2431 - C4789 * C2436 + C47992 * C2440 +
            C4787 * C2032 - C4788 * C2025 - C4787 * C2033 + C4783 * C2043) *
               C47961 +
           (C4789 * C2433 - C4790 * C2430 - C4789 * C2434 + C47992 * C2439 +
            C4787 * C2034 - C4788 * C2026 - C4787 * C2035 + C4783 * C2044) *
               C4785) *
              C47907 * C2022 +
          ((C4787 * C2036 - C4788 * C2027 - C4787 * C2037 + C4783 * C2045 +
            C4789 * C7017 - C4790 * C7015 - C4789 * C7018 + C47992 * C7021) *
               C4785 +
           (C4787 * C2038 - C4788 * C2028 - C4787 * C2039 + C4783 * C2046 +
            C4789 * C7019 - C4790 * C7016 - C4789 * C7020 + C47992 * C7022) *
               C47961) *
              C47907 * C2023) *
         C47686 * C47658) /
            (p * q * std::sqrt(p + q));
    d2ee[38] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C4787 * C122 - C4788 * C115 - C4787 * C123 + C4783 * C136 +
              C4789 * C308 - C4790 * C296 - C4789 * C309 + C47992 * C326) *
                 C4785 +
             (C4840 + C4841) * C47961) *
                C47907 * C47943 -
            ((C5244 + C5245) * C47961 +
             (C4789 * C948 - C4790 * C943 - C4789 * C949 + C47992 * C958 +
              C4787 * C503 - C4788 * C491 - C4787 * C504 + C4783 * C521) *
                 C4785) *
                C47907 * C47791) *
               C1094 +
           (((C4787 * C948 - C4788 * C943 - C4787 * C949 + C4783 * C958 +
              C4789 * C1321 - C4790 * C1307 - C4789 * C1322 + C47992 * C1334) *
                 C4785 +
             (C5758 + C5759) * C47961) *
                C47907 * C47791 -
            ((C5042 + C5043) * C47961 +
             (C4789 * C310 - C4790 * C297 - C4789 * C311 + C47992 * C327 +
              C4787 * C308 - C4788 * C296 - C4787 * C309 + C4783 * C326) *
                 C4785) *
                C47907 * C47943) *
               C1095 +
           (((C4787 * C310 - C4788 * C297 - C4787 * C311 + C4783 * C327 +
              C4789 * C1178 - C4790 * C1170 - C4789 * C1179 + C47992 * C1188) *
                 C4785 +
             (C5044 + C5045) * C47961) *
                C47907 * C47943 -
            ((C6502 + C6503) * C47961 +
             (C4789 * C1725 - C4790 * C1722 - C4789 * C1726 + C47992 * C1731 +
              C4787 * C1321 - C4788 * C1307 - C4787 * C1322 + C4783 * C1334) *
                 C4785) *
                C47907 * C47791) *
               C47974) *
              C47928 +
          ((((C5245 + C5244) * C4785 + (C5248 + C5249) * C47961) * C47907 *
                C47791 -
            ((C4842 + C4843) * C47961 + (C4841 + C4840) * C4785) * C47907 *
                C47943) *
               C1094 +
           (((C5043 + C5042) * C4785 + (C5046 + C5047) * C47961) * C47907 *
                C47943 -
            ((C5760 + C5761) * C47961 + (C5759 + C5758) * C4785) * C47907 *
                C47791) *
               C1095 +
           (((C6503 + C6502) * C4785 +
             (C4787 * C1317 - C4788 * C1305 - C4787 * C1318 + C4783 * C1332 +
              C4789 * C1729 - C4790 * C1724 - C4789 * C1730 + C47992 * C1733) *
                 C47961) *
                C47907 * C47791 -
            ((C5048 + C5049) * C47961 + (C5045 + C5044) * C4785) * C47907 *
                C47943) *
               C47974) *
              C47669)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4787 * C122 - C4788 * C115 - C4787 * C123 + C4783 * C136 +
             C4789 * C308 - C4790 * C296 - C4789 * C309 + C47992 * C326) *
                C4785 +
            (C4840 + C4841) * C47961) *
               C47907 * C47943 -
           ((C5244 + C5245) * C47961 +
            (C4789 * C948 - C4790 * C943 - C4789 * C949 + C47992 * C958 +
             C4787 * C503 - C4788 * C491 - C4787 * C504 + C4783 * C521) *
                C4785) *
               C47907 * C47791) *
              C47686 * C671 +
          (((C5245 + C5244) * C4785 + (C5248 + C5249) * C47961) * C47907 *
               C47791 -
           ((C4842 + C4843) * C47961 + (C4841 + C4840) * C4785) * C47907 *
               C47943) *
              C47686 * C672 +
          (((C4843 + C4842) * C4785 + (C4844 + C4845) * C47961) * C47907 *
               C47943 -
           ((C5538 + C5539) * C47961 + (C5249 + C5248) * C4785) * C47907 *
               C47791) *
              C47686 * C673 +
          (((C5539 + C5538) * C4785 +
            (C4787 * C515 - C4788 * C497 - C4787 * C516 + C4783 * C527 +
             C4789 * C956 - C4790 * C947 - C4789 * C957 + C47992 * C962) *
                C47961) *
               C47907 * C47791 -
           ((C4846 + C4847) * C47961 + (C4845 + C4844) * C4785) * C47907 *
               C47943) *
              C47686 * C47978)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C4787 * C122 - C4788 * C115 - C4787 * C123 + C4783 * C136 +
             C4789 * C308 - C4790 * C296 - C4789 * C309 + C47992 * C326) *
                C4785 +
            (C4840 + C4841) * C47961) *
               C47907 * C2310 -
           ((C5244 + C5245) * C47961 +
            (C4789 * C948 - C4790 * C943 - C4789 * C949 + C47992 * C958 +
             C4787 * C503 - C4788 * C491 - C4787 * C504 + C4783 * C521) *
                C4785) *
               C47907 * C2311 +
           ((C4787 * C505 - C4788 * C492 - C4787 * C506 + C4783 * C522 +
             C4789 * C1315 - C4790 * C1304 - C4789 * C1316 + C47992 * C1331) *
                C4785 +
            (C5246 + C5247) * C47961) *
               C47907 * C2312 -
           ((C7374 + C7375) * C47961 +
            (C4789 * C2433 - C4790 * C2430 - C4789 * C2434 + C47992 * C2439 +
             C4787 * C2034 - C4788 * C2026 - C4787 * C2035 + C4783 * C2044) *
                C4785) *
               C47907 * C47990) *
              C47686 * C47928 +
          (((C5245 + C5244) * C4785 + (C5248 + C5249) * C47961) * C47907 *
               C2311 -
           ((C4842 + C4843) * C47961 + (C4841 + C4840) * C4785) * C47907 *
               C2310 -
           ((C5250 + C5251) * C47961 + (C5247 + C5246) * C4785) * C47907 *
               C2312 +
           ((C7375 + C7374) * C4785 +
            (C4787 * C2030 - C4788 * C2024 - C4787 * C2031 + C4783 * C2042 +
             C4789 * C2437 - C4790 * C2432 - C4789 * C2438 + C47992 * C2441) *
                C47961) *
               C47907 * C47990) *
              C47686 * C47669)) /
            (p * q * std::sqrt(p + q));
    d2ee[39] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C4787 * C122 - C4788 * C115 - C4787 * C123 + C4783 * C136 +
             C4789 * C308 - C4790 * C296 - C4789 * C309 + C47992 * C326) *
                C4785 +
            (C4840 + C4841) * C47961) *
               C47907 * C47704 * C48013 -
           ((C5042 + C5043) * C47961 +
            (C4789 * C310 - C4790 * C297 - C4789 * C311 + C47992 * C327 +
             C4787 * C308 - C4788 * C296 - C4787 * C309 + C4783 * C326) *
                C4785) *
               C47907 * C47704 * C48001 +
           ((C4787 * C310 - C4788 * C297 - C4787 * C311 + C4783 * C327 +
             C4789 * C1178 - C4790 * C1170 - C4789 * C1179 + C47992 * C1188) *
                C4785 +
            (C5044 + C5045) * C47961) *
               C47907 * C47704 * C47974) *
              C291 +
          (((C5043 + C5042) * C4785 + (C5046 + C5047) * C47961) * C47907 *
               C47704 * C48001 -
           ((C4842 + C4843) * C47961 + (C4841 + C4840) * C4785) * C47907 *
               C47704 * C48013 -
           ((C5048 + C5049) * C47961 + (C5045 + C5044) * C4785) * C47907 *
               C47704 * C47974) *
              C292 +
          (((C4843 + C4842) * C4785 + (C4844 + C4845) * C47961) * C47907 *
               C47704 * C48013 -
           ((C4789 * C318 - C4790 * C301 - C4789 * C319 + C47992 * C331 +
             C4787 * C316 - C4788 * C300 - C4787 * C317 + C4783 * C330) *
                C47961 +
            (C5047 + C5046) * C4785) *
               C47907 * C47704 * C48001 +
           ((C5049 + C5048) * C4785 +
            (C4787 * C318 - C4788 * C301 - C4787 * C319 + C4783 * C331 +
             C4789 * C1443 - C4790 * C1442 - C4789 * C1444 + C47992 * C1445) *
                C47961) *
               C47907 * C47704 * C47974) *
              C47968)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C4787 * C122 - C4788 * C115 - C4787 * C123 + C4783 * C136 +
            C4789 * C308 - C4790 * C296 - C4789 * C309 + C47992 * C326) *
               C4785 +
           (C4840 + C4841) * C47961) *
              C47907 * C47704 * C47686 * C108 -
          ((C4842 + C4843) * C47961 + (C4841 + C4840) * C4785) * C47907 *
              C47704 * C47686 * C109 +
          ((C4843 + C4842) * C4785 + (C4844 + C4845) * C47961) * C47907 *
              C47704 * C47686 * C110 -
          ((C4846 + C4847) * C47961 + (C4845 + C4844) * C4785) * C47907 *
              C47704 * C47686 * C111 +
          ((C4847 + C4846) * C4785 +
           (C4787 * C132 - C4788 * C120 - C4787 * C133 + C4783 * C141 +
            C4789 * C676 - C4790 * C675 - C4789 * C677 + C47992 * C678) *
               C47961) *
              C47907 * C47704 * C47686 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C4787 * C122 - C4788 * C115 - C4787 * C123 + C4783 * C136 +
             C4789 * C308 - C4790 * C296 - C4789 * C309 + C47992 * C326) *
                C4785 +
            (C4840 + C4841) * C47961) *
               C47907 * C47704 * C1094 -
           ((C5042 + C5043) * C47961 +
            (C4789 * C310 - C4790 * C297 - C4789 * C311 + C47992 * C327 +
             C4787 * C308 - C4788 * C296 - C4787 * C309 + C4783 * C326) *
                C4785) *
               C47907 * C47704 * C1095 +
           ((C4787 * C310 - C4788 * C297 - C4787 * C311 + C4783 * C327 +
             C4789 * C1178 - C4790 * C1170 - C4789 * C1179 + C47992 * C1188) *
                C4785 +
            (C5044 + C5045) * C47961) *
               C47907 * C47704 * C47974) *
              C48010 +
          (((C5043 + C5042) * C4785 + (C5046 + C5047) * C47961) * C47907 *
               C47704 * C1095 -
           ((C4842 + C4843) * C47961 + (C4841 + C4840) * C4785) * C47907 *
               C47704 * C1094 -
           ((C5048 + C5049) * C47961 + (C5045 + C5044) * C4785) * C47907 *
               C47704 * C47974) *
              C47997 +
          (((C4843 + C4842) * C4785 + (C4844 + C4845) * C47961) * C47907 *
               C47704 * C1094 -
           ((C5394 + C5395) * C47961 + (C5047 + C5046) * C4785) * C47907 *
               C47704 * C1095 +
           ((C5049 + C5048) * C4785 +
            (C4787 * C318 - C4788 * C301 - C4787 * C319 + C4783 * C331 +
             C4789 * C1443 - C4790 * C1442 - C4789 * C1444 + C47992 * C1445) *
                C47961) *
               C47907 * C47704 * C47974) *
              C47968)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C4787 * C122 - C4788 * C115 - C4787 * C123 + C4783 * C136 +
            C4789 * C308 - C4790 * C296 - C4789 * C309 + C47992 * C326) *
               C4785 +
           (C4840 + C4841) * C47961) *
              C47907 * C47704 * C1162 -
          ((C5042 + C5043) * C47961 +
           (C4789 * C310 - C4790 * C297 - C4789 * C311 + C47992 * C327 +
            C4787 * C308 - C4788 * C296 - C4787 * C309 + C4783 * C326) *
               C4785) *
              C47907 * C47704 * C1163 +
          ((C4787 * C310 - C4788 * C297 - C4787 * C311 + C4783 * C327 +
            C4789 * C1178 - C4790 * C1170 - C4789 * C1179 + C47992 * C1188) *
               C4785 +
           (C5044 + C5045) * C47961) *
              C47907 * C47704 * C1164 -
          ((C4789 * C1182 - C4790 * C1172 - C4789 * C1183 + C47992 * C1190 +
            C4787 * C1176 - C4788 * C1169 - C4787 * C1177 + C4783 * C1187) *
               C47961 +
           (C4789 * C1180 - C4790 * C1171 - C4789 * C1181 + C47992 * C1189 +
            C4787 * C1178 - C4788 * C1170 - C4787 * C1179 + C4783 * C1188) *
               C4785) *
              C47907 * C47704 * C1165 +
          ((C4787 * C1180 - C4788 * C1171 - C4787 * C1181 + C4783 * C1189 +
            C4789 * C5991 - C4790 * C5989 - C4789 * C5992 + C47992 * C5995) *
               C4785 +
           (C4787 * C1182 - C4788 * C1172 - C4787 * C1183 + C4783 * C1190 +
            C4789 * C5993 - C4790 * C5990 - C4789 * C5994 + C47992 * C5996) *
               C47961) *
              C47907 * C47704 * C1166) *
         C47658) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4787 * C122 - C4788 * C115 - C4787 * C123 + C4783 * C136 +
             C4789 * C308 - C4790 * C296 - C4789 * C309 + C47992 * C326) *
                C4785 +
            (C4840 + C4841) * C47961) *
               C47907 * C1844 -
           ((C5244 + C5245) * C47961 +
            (C4789 * C948 - C4790 * C943 - C4789 * C949 + C47992 * C958 +
             C4787 * C503 - C4788 * C491 - C4787 * C504 + C4783 * C521) *
                C4785) *
               C47907 * C1845 +
           ((C4787 * C505 - C4788 * C492 - C4787 * C506 + C4783 * C522 +
             C4789 * C1315 - C4790 * C1304 - C4789 * C1316 + C47992 * C1331) *
                C4785 +
            (C5246 + C5247) * C47961) *
               C47907 * C47977) *
              C47686 * C48010 +
          (((C5245 + C5244) * C4785 + (C5248 + C5249) * C47961) * C47907 *
               C1845 -
           ((C4842 + C4843) * C47961 + (C4841 + C4840) * C4785) * C47907 *
               C1844 -
           ((C5250 + C5251) * C47961 + (C5247 + C5246) * C4785) * C47907 *
               C47977) *
              C47686 * C47997 +
          (((C4843 + C4842) * C4785 + (C4844 + C4845) * C47961) * C47907 *
               C1844 -
           ((C5538 + C5539) * C47961 + (C5249 + C5248) * C4785) * C47907 *
               C1845 +
           ((C5251 + C5250) * C4785 +
            (C4787 * C513 - C4788 * C496 - C4787 * C514 + C4783 * C526 +
             C4789 * C2195 - C4790 * C2194 - C4789 * C2196 + C47992 * C2197) *
                C47961) *
               C47907 * C47977) *
              C47686 * C47968)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4787 * C122 - C4788 * C115 - C4787 * C123 + C4783 * C136 +
             C4789 * C308 - C4790 * C296 - C4789 * C309 + C47992 * C326) *
                C4785 +
            (C4840 + C4841) * C47961) *
               C47907 * C1844 -
           ((C5244 + C5245) * C47961 +
            (C4789 * C948 - C4790 * C943 - C4789 * C949 + C47992 * C958 +
             C4787 * C503 - C4788 * C491 - C4787 * C504 + C4783 * C521) *
                C4785) *
               C47907 * C1845 +
           ((C4787 * C505 - C4788 * C492 - C4787 * C506 + C4783 * C522 +
             C4789 * C1315 - C4790 * C1304 - C4789 * C1316 + C47992 * C1331) *
                C4785 +
            (C5246 + C5247) * C47961) *
               C47907 * C47977) *
              C48013 +
          (((C4787 * C948 - C4788 * C943 - C4787 * C949 + C4783 * C958 +
             C4789 * C1321 - C4790 * C1307 - C4789 * C1322 + C47992 * C1334) *
                C4785 +
            (C5758 + C5759) * C47961) *
               C47907 * C1845 -
           ((C5042 + C5043) * C47961 +
            (C4789 * C310 - C4790 * C297 - C4789 * C311 + C47992 * C327 +
             C4787 * C308 - C4788 * C296 - C4787 * C309 + C4783 * C326) *
                C4785) *
               C47907 * C1844 -
           ((C4789 * C1325 - C4790 * C1309 - C4789 * C1326 + C47992 * C1336 +
             C4787 * C1313 - C4788 * C1303 - C4787 * C1314 + C4783 * C1330) *
                C47961 +
            (C4789 * C1323 - C4790 * C1308 - C4789 * C1324 + C47992 * C1335 +
             C4787 * C1315 - C4788 * C1304 - C4787 * C1316 + C4783 * C1331) *
                C4785) *
               C47907 * C47977) *
              C48001 +
          (((C4787 * C310 - C4788 * C297 - C4787 * C311 + C4783 * C327 +
             C4789 * C1178 - C4790 * C1170 - C4789 * C1179 + C47992 * C1188) *
                C4785 +
            (C5044 + C5045) * C47961) *
               C47907 * C1844 -
           ((C6502 + C6503) * C47961 +
            (C4789 * C1725 - C4790 * C1722 - C4789 * C1726 + C47992 * C1731 +
             C4787 * C1321 - C4788 * C1307 - C4787 * C1322 + C4783 * C1334) *
                C4785) *
               C47907 * C1845 +
           ((C4787 * C1323 - C4788 * C1308 - C4787 * C1324 + C4783 * C1335 +
             C4789 * C6145 - C4790 * C6143 - C4789 * C6146 + C47992 * C6149) *
                C4785 +
            (C4787 * C1325 - C4788 * C1309 - C4787 * C1326 + C4783 * C1336 +
             C4789 * C6147 - C4790 * C6144 - C4789 * C6148 + C47992 * C6150) *
                C47961) *
               C47907 * C47977) *
              C47974) *
         C47658) /
            (p * q * std::sqrt(p + q));
    d2ee[40] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C4787 * C122 - C4788 * C115 - C4787 * C123 + C4783 * C136 +
              C4789 * C308 - C4790 * C296 - C4789 * C309 + C47992 * C326) *
                 C4785 +
             (C4840 + C4841) * C47961) *
                C47907 * C3302 -
            ((C5244 + C5245) * C47961 +
             (C4789 * C948 - C4790 * C943 - C4789 * C949 + C47992 * C958 +
              C4787 * C503 - C4788 * C491 - C4787 * C504 + C4783 * C521) *
                 C4785) *
                C47907 * C47791) *
               C47942 +
           (((C4787 * C948 - C4788 * C943 - C4787 * C949 + C4783 * C958 +
              C4789 * C1321 - C4790 * C1307 - C4789 * C1322 + C47992 * C1334) *
                 C4785 +
             (C5758 + C5759) * C47961) *
                C47907 * C47791 -
            ((C5042 + C5043) * C47961 +
             (C4789 * C310 - C4790 * C297 - C4789 * C311 + C47992 * C327 +
              C4787 * C308 - C4788 * C296 - C4787 * C309 + C4783 * C326) *
                 C4785) *
                C47907 * C3302) *
               C47749) *
              C47663 +
          ((((C5245 + C5244) * C4785 + (C5248 + C5249) * C47961) * C47907 *
                C47791 -
            ((C4842 + C4843) * C47961 + (C4841 + C4840) * C4785) * C47907 *
                C3302) *
               C47942 +
           (((C5043 + C5042) * C4785 + (C5046 + C5047) * C47961) * C47907 *
                C3302 -
            ((C5760 + C5761) * C47961 + (C5759 + C5758) * C4785) * C47907 *
                C47791) *
               C47749) *
              C47672 +
          ((((C4843 + C4842) * C4785 + (C4844 + C4845) * C47961) * C47907 *
                C3302 -
            ((C5538 + C5539) * C47961 + (C5249 + C5248) * C4785) * C47907 *
                C47791) *
               C47942 +
           (((C5761 + C5760) * C4785 +
             (C4787 * C954 - C4788 * C946 - C4787 * C955 + C4783 * C961 +
              C4789 * C1607 - C4790 * C1606 - C4789 * C1608 + C47992 * C1609) *
                 C47961) *
                C47907 * C47791 -
            ((C5394 + C5395) * C47961 + (C5047 + C5046) * C4785) * C47907 *
                C3302) *
               C47749) *
              C2911)) /
        (p * q * std::sqrt(p + q));
    d2ee[41] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C4787 * C122 - C4788 * C115 - C4787 * C123 + C4783 * C136 +
              C4789 * C308 - C4790 * C296 - C4789 * C309 + C47992 * C326) *
                 C4785 +
             (C4840 + C4841) * C47961) *
                C47907 * C47787 -
            ((C5244 + C5245) * C47961 +
             (C4789 * C948 - C4790 * C943 - C4789 * C949 + C47992 * C958 +
              C4787 * C503 - C4788 * C491 - C4787 * C504 + C4783 * C521) *
                 C4785) *
                C47907 * C47794 +
            ((C4787 * C505 - C4788 * C492 - C4787 * C506 + C4783 * C522 +
              C4789 * C1315 - C4790 * C1304 - C4789 * C1316 + C47992 * C1331) *
                 C4785 +
             (C5246 + C5247) * C47961) *
                C47907 * C3810) *
               C47942 +
           (((C4787 * C948 - C4788 * C943 - C4787 * C949 + C4783 * C958 +
              C4789 * C1321 - C4790 * C1307 - C4789 * C1322 + C47992 * C1334) *
                 C4785 +
             (C5758 + C5759) * C47961) *
                C47907 * C47794 -
            ((C5042 + C5043) * C47961 +
             (C4789 * C310 - C4790 * C297 - C4789 * C311 + C47992 * C327 +
              C4787 * C308 - C4788 * C296 - C4787 * C309 + C4783 * C326) *
                 C4785) *
                C47907 * C47787 -
            ((C7230 + C7231) * C47961 +
             (C4789 * C1323 - C4790 * C1308 - C4789 * C1324 + C47992 * C1335 +
              C4787 * C1315 - C4788 * C1304 - C4787 * C1316 + C4783 * C1331) *
                 C4785) *
                C47907 * C3810) *
               C47749) *
              C2648 +
          ((((C5245 + C5244) * C4785 + (C5248 + C5249) * C47961) * C47907 *
                C47794 -
            ((C4842 + C4843) * C47961 + (C4841 + C4840) * C4785) * C47907 *
                C47787 -
            ((C5250 + C5251) * C47961 + (C5247 + C5246) * C4785) * C47907 *
                C3810) *
               C47942 +
           (((C5043 + C5042) * C4785 + (C5046 + C5047) * C47961) * C47907 *
                C47787 -
            ((C5760 + C5761) * C47961 + (C5759 + C5758) * C4785) * C47907 *
                C47794 +
            ((C7231 + C7230) * C4785 +
             (C4787 * C1311 - C4788 * C1302 - C4787 * C1312 + C4783 * C1329 +
              C4789 * C1327 - C4790 * C1310 - C4789 * C1328 + C47992 * C1337) *
                 C47961) *
                C47907 * C3810) *
               C47749) *
              C47669)) /
        (p * q * std::sqrt(p + q));
    d2ee[42] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C4787 * C122 - C4788 * C115 - C4787 * C123 + C4783 * C136 +
              C4789 * C308 - C4790 * C296 - C4789 * C309 + C47992 * C326) *
                 C4785 +
             (C4840 + C4841) * C47961) *
                C47907 * C3302 -
            ((C5244 + C5245) * C47961 +
             (C4789 * C948 - C4790 * C943 - C4789 * C949 + C47992 * C958 +
              C4787 * C503 - C4788 * C491 - C4787 * C504 + C4783 * C521) *
                 C4785) *
                C47907 * C47791) *
               C48013 +
           (((C4787 * C948 - C4788 * C943 - C4787 * C949 + C4783 * C958 +
              C4789 * C1321 - C4790 * C1307 - C4789 * C1322 + C47992 * C1334) *
                 C4785 +
             (C5758 + C5759) * C47961) *
                C47907 * C47791 -
            ((C5042 + C5043) * C47961 +
             (C4789 * C310 - C4790 * C297 - C4789 * C311 + C47992 * C327 +
              C4787 * C308 - C4788 * C296 - C4787 * C309 + C4783 * C326) *
                 C4785) *
                C47907 * C3302) *
               C48001 +
           (((C4787 * C310 - C4788 * C297 - C4787 * C311 + C4783 * C327 +
              C4789 * C1178 - C4790 * C1170 - C4789 * C1179 + C47992 * C1188) *
                 C4785 +
             (C5044 + C5045) * C47961) *
                C47907 * C3302 -
            ((C6502 + C6503) * C47961 +
             (C4789 * C1725 - C4790 * C1722 - C4789 * C1726 + C47992 * C1731 +
              C4787 * C1321 - C4788 * C1307 - C4787 * C1322 + C4783 * C1334) *
                 C4785) *
                C47907 * C47791) *
               C47974) *
              C2648 +
          ((((C5245 + C5244) * C4785 + (C5248 + C5249) * C47961) * C47907 *
                C47791 -
            ((C4842 + C4843) * C47961 + (C4841 + C4840) * C4785) * C47907 *
                C3302) *
               C48013 +
           (((C5043 + C5042) * C4785 + (C5046 + C5047) * C47961) * C47907 *
                C3302 -
            ((C5760 + C5761) * C47961 + (C5759 + C5758) * C4785) * C47907 *
                C47791) *
               C48001 +
           (((C6503 + C6502) * C4785 +
             (C4787 * C1317 - C4788 * C1305 - C4787 * C1318 + C4783 * C1332 +
              C4789 * C1729 - C4790 * C1724 - C4789 * C1730 + C47992 * C1733) *
                 C47961) *
                C47907 * C47791 -
            ((C5048 + C5049) * C47961 + (C5045 + C5044) * C4785) * C47907 *
                C3302) *
               C47974) *
              C47669)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4787 * C122 - C4788 * C115 - C4787 * C123 + C4783 * C136 +
             C4789 * C308 - C4790 * C296 - C4789 * C309 + C47992 * C326) *
                C4785 +
            (C4840 + C4841) * C47961) *
               C47907 * C3302 -
           ((C5244 + C5245) * C47961 +
            (C4789 * C948 - C4790 * C943 - C4789 * C949 + C47992 * C958 +
             C4787 * C503 - C4788 * C491 - C4787 * C504 + C4783 * C521) *
                C4785) *
               C47907 * C47791) *
              C47686 * C48019 +
          (((C5245 + C5244) * C4785 + (C5248 + C5249) * C47961) * C47907 *
               C47791 -
           ((C4842 + C4843) * C47961 + (C4841 + C4840) * C4785) * C47907 *
               C3302) *
              C47686 * C48012 +
          (((C4843 + C4842) * C4785 + (C4844 + C4845) * C47961) * C47907 *
               C3302 -
           ((C5538 + C5539) * C47961 + (C5249 + C5248) * C4785) * C47907 *
               C47791) *
              C47686 * C47999 +
          (((C5539 + C5538) * C4785 +
            (C4787 * C515 - C4788 * C497 - C4787 * C516 + C4783 * C527 +
             C4789 * C956 - C4790 * C947 - C4789 * C957 + C47992 * C962) *
                C47961) *
               C47907 * C47791 -
           ((C4846 + C4847) * C47961 + (C4845 + C4844) * C4785) * C47907 *
               C3302) *
              C47686 * C47978)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C4787 * C122 - C4788 * C115 - C4787 * C123 + C4783 * C136 +
             C4789 * C308 - C4790 * C296 - C4789 * C309 + C47992 * C326) *
                C4785 +
            (C4840 + C4841) * C47961) *
               C47907 * C48021 -
           ((C5244 + C5245) * C47961 +
            (C4789 * C948 - C4790 * C943 - C4789 * C949 + C47992 * C958 +
             C4787 * C503 - C4788 * C491 - C4787 * C504 + C4783 * C521) *
                C4785) *
               C47907 * C48018 +
           ((C4787 * C505 - C4788 * C492 - C4787 * C506 + C4783 * C522 +
             C4789 * C1315 - C4790 * C1304 - C4789 * C1316 + C47992 * C1331) *
                C4785 +
            (C5246 + C5247) * C47961) *
               C47907 * C48009 -
           ((C7374 + C7375) * C47961 +
            (C4789 * C2433 - C4790 * C2430 - C4789 * C2434 + C47992 * C2439 +
             C4787 * C2034 - C4788 * C2026 - C4787 * C2035 + C4783 * C2044) *
                C4785) *
               C47907 * C47990) *
              C47686 * C2648 +
          (((C5245 + C5244) * C4785 + (C5248 + C5249) * C47961) * C47907 *
               C48018 -
           ((C4842 + C4843) * C47961 + (C4841 + C4840) * C4785) * C47907 *
               C48021 -
           ((C5250 + C5251) * C47961 + (C5247 + C5246) * C4785) * C47907 *
               C48009 +
           ((C7375 + C7374) * C4785 +
            (C4787 * C2030 - C4788 * C2024 - C4787 * C2031 + C4783 * C2042 +
             C4789 * C2437 - C4790 * C2432 - C4789 * C2438 + C47992 * C2441) *
                C47961) *
               C47907 * C47990) *
              C47686 * C47669)) /
            (p * q * std::sqrt(p + q));
    d2ee[43] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C4787 * C122 - C4788 * C115 - C4787 * C123 + C4783 * C136 +
             C4789 * C308 - C4790 * C296 - C4789 * C309 + C47992 * C326) *
                C4785 +
            (C4840 + C4841) * C47961) *
               C47907 * C47787 -
           ((C5244 + C5245) * C47961 +
            (C4789 * C948 - C4790 * C943 - C4789 * C949 + C47992 * C958 +
             C4787 * C503 - C4788 * C491 - C4787 * C504 + C4783 * C521) *
                C4785) *
               C47907 * C47794 +
           ((C4787 * C505 - C4788 * C492 - C4787 * C506 + C4783 * C522 +
             C4789 * C1315 - C4790 * C1304 - C4789 * C1316 + C47992 * C1331) *
                C4785 +
            (C5246 + C5247) * C47961) *
               C47907 * C3810) *
              C47686 * C47663 +
          (((C5245 + C5244) * C4785 + (C5248 + C5249) * C47961) * C47907 *
               C47794 -
           ((C4842 + C4843) * C47961 + (C4841 + C4840) * C4785) * C47907 *
               C47787 -
           ((C5250 + C5251) * C47961 + (C5247 + C5246) * C4785) * C47907 *
               C3810) *
              C47686 * C47672 +
          (((C4843 + C4842) * C4785 + (C4844 + C4845) * C47961) * C47907 *
               C47787 -
           ((C5538 + C5539) * C47961 + (C5249 + C5248) * C4785) * C47907 *
               C47794 +
           ((C5251 + C5250) * C4785 +
            (C4787 * C513 - C4788 * C496 - C4787 * C514 + C4783 * C526 +
             C4789 * C2195 - C4790 * C2194 - C4789 * C2196 + C47992 * C2197) *
                C47961) *
               C47907 * C3810) *
              C47686 * C2911)) /
        (p * q * std::sqrt(p + q));
    d2ee[44] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C4787 * C122 - C4788 * C115 - C4787 * C123 + C4783 * C136 +
             C4789 * C308 - C4790 * C296 - C4789 * C309 + C47992 * C326) *
                C4785 +
            (C4840 + C4841) * C47961) *
               C47907 * C3302 -
           ((C5244 + C5245) * C47961 +
            (C4789 * C948 - C4790 * C943 - C4789 * C949 + C47992 * C958 +
             C4787 * C503 - C4788 * C491 - C4787 * C504 + C4783 * C521) *
                C4785) *
               C47907 * C47791) *
              C47686 * C48019 +
          (((C5245 + C5244) * C4785 + (C5248 + C5249) * C47961) * C47907 *
               C47791 -
           ((C4842 + C4843) * C47961 + (C4841 + C4840) * C4785) * C47907 *
               C3302) *
              C47686 * C48012 +
          (((C4843 + C4842) * C4785 + (C4844 + C4845) * C47961) * C47907 *
               C3302 -
           ((C5538 + C5539) * C47961 + (C5249 + C5248) * C4785) * C47907 *
               C47791) *
              C47686 * C47999 +
          (((C5539 + C5538) * C4785 +
            (C4787 * C515 - C4788 * C497 - C4787 * C516 + C4783 * C527 +
             C4789 * C956 - C4790 * C947 - C4789 * C957 + C47992 * C962) *
                C47961) *
               C47907 * C47791 -
           ((C4846 + C4847) * C47961 + (C4845 + C4844) * C4785) * C47907 *
               C3302) *
              C47686 * C47978)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C4787 * C122 - C4788 * C115 - C4787 * C123 + C4783 * C136 +
              C4789 * C308 - C4790 * C296 - C4789 * C309 + C47992 * C326) *
                 C4785 +
             (C4840 + C4841) * C47961) *
                C47907 * C3302 -
            ((C5244 + C5245) * C47961 +
             (C4789 * C948 - C4790 * C943 - C4789 * C949 + C47992 * C958 +
              C4787 * C503 - C4788 * C491 - C4787 * C504 + C4783 * C521) *
                 C4785) *
                C47907 * C47791) *
               C48013 +
           (((C4787 * C948 - C4788 * C943 - C4787 * C949 + C4783 * C958 +
              C4789 * C1321 - C4790 * C1307 - C4789 * C1322 + C47992 * C1334) *
                 C4785 +
             (C5758 + C5759) * C47961) *
                C47907 * C47791 -
            ((C5042 + C5043) * C47961 +
             (C4789 * C310 - C4790 * C297 - C4789 * C311 + C47992 * C327 +
              C4787 * C308 - C4788 * C296 - C4787 * C309 + C4783 * C326) *
                 C4785) *
                C47907 * C3302) *
               C48001 +
           (((C4787 * C310 - C4788 * C297 - C4787 * C311 + C4783 * C327 +
              C4789 * C1178 - C4790 * C1170 - C4789 * C1179 + C47992 * C1188) *
                 C4785 +
             (C5044 + C5045) * C47961) *
                C47907 * C3302 -
            ((C6502 + C6503) * C47961 +
             (C4789 * C1725 - C4790 * C1722 - C4789 * C1726 + C47992 * C1731 +
              C4787 * C1321 - C4788 * C1307 - C4787 * C1322 + C4783 * C1334) *
                 C4785) *
                C47907 * C47791) *
               C47974) *
              C2648 +
          ((((C5245 + C5244) * C4785 + (C5248 + C5249) * C47961) * C47907 *
                C47791 -
            ((C4842 + C4843) * C47961 + (C4841 + C4840) * C4785) * C47907 *
                C3302) *
               C48013 +
           (((C5043 + C5042) * C4785 + (C5046 + C5047) * C47961) * C47907 *
                C3302 -
            ((C5760 + C5761) * C47961 + (C5759 + C5758) * C4785) * C47907 *
                C47791) *
               C48001 +
           (((C6503 + C6502) * C4785 +
             (C4787 * C1317 - C4788 * C1305 - C4787 * C1318 + C4783 * C1332 +
              C4789 * C1729 - C4790 * C1724 - C4789 * C1730 + C47992 * C1733) *
                 C47961) *
                C47907 * C47791 -
            ((C5048 + C5049) * C47961 + (C5045 + C5044) * C4785) * C47907 *
                C3302) *
               C47974) *
              C47669)) /
            (p * q * std::sqrt(p + q));
    d2ee[45] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C4787 * C122 - C4788 * C115 - C4787 * C123 + C4783 * C136 +
             C4789 * C308 - C4790 * C296 - C4789 * C309 + C47992 * C326) *
                C4785 +
            (C4840 + C4841) * C47961) *
               C47907 * C47704 * C47942 -
           ((C5042 + C5043) * C47961 +
            (C4789 * C310 - C4790 * C297 - C4789 * C311 + C47992 * C327 +
             C4787 * C308 - C4788 * C296 - C4787 * C309 + C4783 * C326) *
                C4785) *
               C47907 * C47704 * C47749) *
              C671 +
          (((C5043 + C5042) * C4785 + (C5046 + C5047) * C47961) * C47907 *
               C47704 * C47749 -
           ((C4842 + C4843) * C47961 + (C4841 + C4840) * C4785) * C47907 *
               C47704 * C47942) *
              C672 +
          (((C4843 + C4842) * C4785 + (C4844 + C4845) * C47961) * C47907 *
               C47704 * C47942 -
           ((C5394 + C5395) * C47961 + (C5047 + C5046) * C4785) * C47907 *
               C47704 * C47749) *
              C673 +
          (((C5395 + C5394) * C4785 +
            (C4787 * C320 - C4788 * C302 - C4787 * C321 + C4783 * C332 +
             C4789 * C322 - C4790 * C303 - C4789 * C323 + C47992 * C333) *
                C47961) *
               C47907 * C47704 * C47749 -
           ((C4846 + C4847) * C47961 + (C4845 + C4844) * C4785) * C47907 *
               C47704 * C47942) *
              C47978)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C4787 * C122 - C4788 * C115 - C4787 * C123 + C4783 * C136 +
             C4789 * C308 - C4790 * C296 - C4789 * C309 + C47992 * C326) *
                C4785 +
            (C4840 + C4841) * C47961) *
               C47907 * C47704 * C1436 -
           ((C5042 + C5043) * C47961 +
            (C4789 * C310 - C4790 * C297 - C4789 * C311 + C47992 * C327 +
             C4787 * C308 - C4788 * C296 - C4787 * C309 + C4783 * C326) *
                C4785) *
               C47907 * C47704 * C1437 +
           ((C4787 * C310 - C4788 * C297 - C4787 * C311 + C4783 * C327 +
             C4789 * C1178 - C4790 * C1170 - C4789 * C1179 + C47992 * C1188) *
                C4785 +
            (C5044 + C5045) * C47961) *
               C47907 * C47704 * C1438 -
           ((C6294 + C6295) * C47961 +
            (C4789 * C1180 - C4790 * C1171 - C4789 * C1181 + C47992 * C1189 +
             C4787 * C1178 - C4788 * C1170 - C4787 * C1179 + C4783 * C1188) *
                C4785) *
               C47907 * C47704 * C47984) *
              C47928 +
          (((C5043 + C5042) * C4785 + (C5046 + C5047) * C47961) * C47907 *
               C47704 * C1437 -
           ((C4842 + C4843) * C47961 + (C4841 + C4840) * C4785) * C47907 *
               C47704 * C1436 -
           ((C5048 + C5049) * C47961 + (C5045 + C5044) * C4785) * C47907 *
               C47704 * C1438 +
           ((C6295 + C6294) * C4785 +
            (C4787 * C1174 - C4788 * C1168 - C4787 * C1175 + C4783 * C1186 +
             C4789 * C1184 - C4790 * C1173 - C4789 * C1185 + C47992 * C1191) *
                C47961) *
               C47907 * C47704 * C47984) *
              C47669)) /
            (p * q * std::sqrt(p + q));
    d2ee[46] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C4787 * C122 - C4788 * C115 - C4787 * C123 + C4783 * C136 +
              C4789 * C308 - C4790 * C296 - C4789 * C309 + C47992 * C326) *
                 C4785 +
             (C4840 + C4841) * C47961) *
                C47907 * C47943 -
            ((C5244 + C5245) * C47961 +
             (C4789 * C948 - C4790 * C943 - C4789 * C949 + C47992 * C958 +
              C4787 * C503 - C4788 * C491 - C4787 * C504 + C4783 * C521) *
                 C4785) *
                C47907 * C47791) *
               C47942 +
           (((C4787 * C948 - C4788 * C943 - C4787 * C949 + C4783 * C958 +
              C4789 * C1321 - C4790 * C1307 - C4789 * C1322 + C47992 * C1334) *
                 C4785 +
             (C5758 + C5759) * C47961) *
                C47907 * C47791 -
            ((C5042 + C5043) * C47961 +
             (C4789 * C310 - C4790 * C297 - C4789 * C311 + C47992 * C327 +
              C4787 * C308 - C4788 * C296 - C4787 * C309 + C4783 * C326) *
                 C4785) *
                C47907 * C47943) *
               C47749) *
              C291 +
          ((((C5245 + C5244) * C4785 + (C5248 + C5249) * C47961) * C47907 *
                C47791 -
            ((C4842 + C4843) * C47961 + (C4841 + C4840) * C4785) * C47907 *
                C47943) *
               C47942 +
           (((C5043 + C5042) * C4785 + (C5046 + C5047) * C47961) * C47907 *
                C47943 -
            ((C5760 + C5761) * C47961 + (C5759 + C5758) * C4785) * C47907 *
                C47791) *
               C47749) *
              C292 +
          ((((C4843 + C4842) * C4785 + (C4844 + C4845) * C47961) * C47907 *
                C47943 -
            ((C5538 + C5539) * C47961 + (C5249 + C5248) * C4785) * C47907 *
                C47791) *
               C47942 +
           (((C5761 + C5760) * C4785 +
             (C4787 * C954 - C4788 * C946 - C4787 * C955 + C4783 * C961 +
              C4789 * C1607 - C4790 * C1606 - C4789 * C1608 + C47992 * C1609) *
                 C47961) *
                C47907 * C47791 -
            ((C5394 + C5395) * C47961 + (C5047 + C5046) * C4785) * C47907 *
                C47943) *
               C47749) *
              C47968)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C4787 * C122 - C4788 * C115 - C4787 * C123 + C4783 * C136 +
             C4789 * C308 - C4790 * C296 - C4789 * C309 + C47992 * C326) *
                C4785 +
            (C4840 + C4841) * C47961) *
               C47907 * C47943 -
           ((C5244 + C5245) * C47961 +
            (C4789 * C948 - C4790 * C943 - C4789 * C949 + C47992 * C958 +
             C4787 * C503 - C4788 * C491 - C4787 * C504 + C4783 * C521) *
                C4785) *
               C47907 * C47791) *
              C1436 +
          (((C4787 * C948 - C4788 * C943 - C4787 * C949 + C4783 * C958 +
             C4789 * C1321 - C4790 * C1307 - C4789 * C1322 + C47992 * C1334) *
                C4785 +
            (C5758 + C5759) * C47961) *
               C47907 * C47791 -
           ((C5042 + C5043) * C47961 +
            (C4789 * C310 - C4790 * C297 - C4789 * C311 + C47992 * C327 +
             C4787 * C308 - C4788 * C296 - C4787 * C309 + C4783 * C326) *
                C4785) *
               C47907 * C47943) *
              C1437 +
          (((C4787 * C310 - C4788 * C297 - C4787 * C311 + C4783 * C327 +
             C4789 * C1178 - C4790 * C1170 - C4789 * C1179 + C47992 * C1188) *
                C4785 +
            (C5044 + C5045) * C47961) *
               C47907 * C47943 -
           ((C6502 + C6503) * C47961 +
            (C4789 * C1725 - C4790 * C1722 - C4789 * C1726 + C47992 * C1731 +
             C4787 * C1321 - C4788 * C1307 - C4787 * C1322 + C4783 * C1334) *
                C4785) *
               C47907 * C47791) *
              C1438 +
          (((C4787 * C1725 - C4788 * C1722 - C4787 * C1726 + C4783 * C1731 +
             C4789 * C6635 - C4790 * C6633 - C4789 * C6636 + C47992 * C6639) *
                C4785 +
            (C4787 * C1727 - C4788 * C1723 - C4787 * C1728 + C4783 * C1732 +
             C4789 * C6637 - C4790 * C6634 - C4789 * C6638 + C47992 * C6640) *
                C47961) *
               C47907 * C47791 -
           ((C6294 + C6295) * C47961 +
            (C4789 * C1180 - C4790 * C1171 - C4789 * C1181 + C47992 * C1189 +
             C4787 * C1178 - C4788 * C1170 - C4787 * C1179 + C4783 * C1188) *
                C4785) *
               C47907 * C47943) *
              C47984) *
         C47658) /
            (p * q * std::sqrt(p + q));
    d2ee[47] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C4787 * C122 - C4788 * C115 - C4787 * C123 + C4783 * C136 +
             C4789 * C308 - C4790 * C296 - C4789 * C309 + C47992 * C326) *
                C4785 +
            (C4840 + C4841) * C47961) *
               C47907 * C47704 * C48013 -
           ((C5042 + C5043) * C47961 +
            (C4789 * C310 - C4790 * C297 - C4789 * C311 + C47992 * C327 +
             C4787 * C308 - C4788 * C296 - C4787 * C309 + C4783 * C326) *
                C4785) *
               C47907 * C47704 * C48001 +
           ((C4787 * C310 - C4788 * C297 - C4787 * C311 + C4783 * C327 +
             C4789 * C1178 - C4790 * C1170 - C4789 * C1179 + C47992 * C1188) *
                C4785 +
            (C5044 + C5045) * C47961) *
               C47907 * C47704 * C47974) *
              C291 +
          (((C5043 + C5042) * C4785 + (C5046 + C5047) * C47961) * C47907 *
               C47704 * C48001 -
           ((C4842 + C4843) * C47961 + (C4841 + C4840) * C4785) * C47907 *
               C47704 * C48013 -
           ((C5048 + C5049) * C47961 + (C5045 + C5044) * C4785) * C47907 *
               C47704 * C47974) *
              C292 +
          (((C4843 + C4842) * C4785 + (C4844 + C4845) * C47961) * C47907 *
               C47704 * C48013 -
           ((C4789 * C318 - C4790 * C301 - C4789 * C319 + C47992 * C331 +
             C4787 * C316 - C4788 * C300 - C4787 * C317 + C4783 * C330) *
                C47961 +
            (C5047 + C5046) * C4785) *
               C47907 * C47704 * C48001 +
           ((C5049 + C5048) * C4785 +
            (C4787 * C318 - C4788 * C301 - C4787 * C319 + C4783 * C331 +
             C4789 * C1443 - C4790 * C1442 - C4789 * C1444 + C47992 * C1445) *
                C47961) *
               C47907 * C47704 * C47974) *
              C47968)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C4787 * C122 - C4788 * C115 - C4787 * C123 + C4783 * C136 +
            C4789 * C308 - C4790 * C296 - C4789 * C309 + C47992 * C326) *
               C4785 +
           (C4840 + C4841) * C47961) *
              C47907 * C47704 * C47686 * C108 -
          ((C4842 + C4843) * C47961 + (C4841 + C4840) * C4785) * C47907 *
              C47704 * C47686 * C109 +
          ((C4843 + C4842) * C4785 + (C4844 + C4845) * C47961) * C47907 *
              C47704 * C47686 * C110 -
          ((C4846 + C4847) * C47961 + (C4845 + C4844) * C4785) * C47907 *
              C47704 * C47686 * C111 +
          ((C4847 + C4846) * C4785 +
           (C4787 * C132 - C4788 * C120 - C4787 * C133 + C4783 * C141 +
            C4789 * C676 - C4790 * C675 - C4789 * C677 + C47992 * C678) *
               C47961) *
              C47907 * C47704 * C47686 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4787 * C122 - C4788 * C115 - C4787 * C123 + C4783 * C136 +
             C4789 * C308 - C4790 * C296 - C4789 * C309 + C47992 * C326) *
                C4785 +
            (C4840 + C4841) * C47961) *
               C47907 * C48014 -
           ((C5244 + C5245) * C47961 +
            (C4789 * C948 - C4790 * C943 - C4789 * C949 + C47992 * C958 +
             C4787 * C503 - C4788 * C491 - C4787 * C504 + C4783 * C521) *
                C4785) *
               C47907 * C48003 +
           ((C4787 * C505 - C4788 * C492 - C4787 * C506 + C4783 * C522 +
             C4789 * C1315 - C4790 * C1304 - C4789 * C1316 + C47992 * C1331) *
                C4785 +
            (C5246 + C5247) * C47961) *
               C47907 * C47977) *
              C47686 * C291 +
          (((C5245 + C5244) * C4785 + (C5248 + C5249) * C47961) * C47907 *
               C48003 -
           ((C4842 + C4843) * C47961 + (C4841 + C4840) * C4785) * C47907 *
               C48014 -
           ((C5250 + C5251) * C47961 + (C5247 + C5246) * C4785) * C47907 *
               C47977) *
              C47686 * C292 +
          (((C4843 + C4842) * C4785 + (C4844 + C4845) * C47961) * C47907 *
               C48014 -
           ((C4789 * C954 - C4790 * C946 - C4789 * C955 + C47992 * C961 +
             C4787 * C511 - C4788 * C495 - C4787 * C512 + C4783 * C525) *
                C47961 +
            (C5249 + C5248) * C4785) *
               C47907 * C48003 +
           ((C5251 + C5250) * C4785 +
            (C4787 * C513 - C4788 * C496 - C4787 * C514 + C4783 * C526 +
             C4789 * C2195 - C4790 * C2194 - C4789 * C2196 + C47992 * C2197) *
                C47961) *
               C47907 * C47977) *
              C47686 * C47968)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C4787 * C122 - C4788 * C115 - C4787 * C123 + C4783 * C136 +
             C4789 * C308 - C4790 * C296 - C4789 * C309 + C47992 * C326) *
                C4785 +
            (C4840 + C4841) * C47961) *
               C47907 * C47704 * C1094 -
           ((C5042 + C5043) * C47961 +
            (C4789 * C310 - C4790 * C297 - C4789 * C311 + C47992 * C327 +
             C4787 * C308 - C4788 * C296 - C4787 * C309 + C4783 * C326) *
                C4785) *
               C47907 * C47704 * C1095 +
           ((C4787 * C310 - C4788 * C297 - C4787 * C311 + C4783 * C327 +
             C4789 * C1178 - C4790 * C1170 - C4789 * C1179 + C47992 * C1188) *
                C4785 +
            (C5044 + C5045) * C47961) *
               C47907 * C47704 * C47974) *
              C48010 +
          (((C5043 + C5042) * C4785 + (C5046 + C5047) * C47961) * C47907 *
               C47704 * C1095 -
           ((C4842 + C4843) * C47961 + (C4841 + C4840) * C4785) * C47907 *
               C47704 * C1094 -
           ((C5048 + C5049) * C47961 + (C5045 + C5044) * C4785) * C47907 *
               C47704 * C47974) *
              C47997 +
          (((C4843 + C4842) * C4785 + (C4844 + C4845) * C47961) * C47907 *
               C47704 * C1094 -
           ((C5394 + C5395) * C47961 + (C5047 + C5046) * C4785) * C47907 *
               C47704 * C1095 +
           ((C5049 + C5048) * C4785 +
            (C4787 * C318 - C4788 * C301 - C4787 * C319 + C4783 * C331 +
             C4789 * C1443 - C4790 * C1442 - C4789 * C1444 + C47992 * C1445) *
                C47961) *
               C47907 * C47704 * C47974) *
              C47968)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C4787 * C122 - C4788 * C115 - C4787 * C123 + C4783 * C136 +
            C4789 * C308 - C4790 * C296 - C4789 * C309 + C47992 * C326) *
               C4785 +
           (C4840 + C4841) * C47961) *
              C47907 * C47704 * C1162 -
          ((C5042 + C5043) * C47961 +
           (C4789 * C310 - C4790 * C297 - C4789 * C311 + C47992 * C327 +
            C4787 * C308 - C4788 * C296 - C4787 * C309 + C4783 * C326) *
               C4785) *
              C47907 * C47704 * C1163 +
          ((C4787 * C310 - C4788 * C297 - C4787 * C311 + C4783 * C327 +
            C4789 * C1178 - C4790 * C1170 - C4789 * C1179 + C47992 * C1188) *
               C4785 +
           (C5044 + C5045) * C47961) *
              C47907 * C47704 * C1164 -
          ((C4789 * C1182 - C4790 * C1172 - C4789 * C1183 + C47992 * C1190 +
            C4787 * C1176 - C4788 * C1169 - C4787 * C1177 + C4783 * C1187) *
               C47961 +
           (C4789 * C1180 - C4790 * C1171 - C4789 * C1181 + C47992 * C1189 +
            C4787 * C1178 - C4788 * C1170 - C4787 * C1179 + C4783 * C1188) *
               C4785) *
              C47907 * C47704 * C1165 +
          ((C4787 * C1180 - C4788 * C1171 - C4787 * C1181 + C4783 * C1189 +
            C4789 * C5991 - C4790 * C5989 - C4789 * C5992 + C47992 * C5995) *
               C4785 +
           (C4787 * C1182 - C4788 * C1172 - C4787 * C1183 + C4783 * C1190 +
            C4789 * C5993 - C4790 * C5990 - C4789 * C5994 + C47992 * C5996) *
               C47961) *
              C47907 * C47704 * C1166) *
         C47658) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4787 * C122 - C4788 * C115 - C4787 * C123 + C4783 * C136 +
             C4789 * C308 - C4790 * C296 - C4789 * C309 + C47992 * C326) *
                C4785 +
            (C4840 + C4841) * C47961) *
               C47907 * C48014 -
           ((C5244 + C5245) * C47961 +
            (C4789 * C948 - C4790 * C943 - C4789 * C949 + C47992 * C958 +
             C4787 * C503 - C4788 * C491 - C4787 * C504 + C4783 * C521) *
                C4785) *
               C47907 * C48003 +
           ((C4787 * C505 - C4788 * C492 - C4787 * C506 + C4783 * C522 +
             C4789 * C1315 - C4790 * C1304 - C4789 * C1316 + C47992 * C1331) *
                C4785 +
            (C5246 + C5247) * C47961) *
               C47907 * C47977) *
              C1094 +
          (((C4787 * C948 - C4788 * C943 - C4787 * C949 + C4783 * C958 +
             C4789 * C1321 - C4790 * C1307 - C4789 * C1322 + C47992 * C1334) *
                C4785 +
            (C5758 + C5759) * C47961) *
               C47907 * C48003 -
           ((C5042 + C5043) * C47961 +
            (C4789 * C310 - C4790 * C297 - C4789 * C311 + C47992 * C327 +
             C4787 * C308 - C4788 * C296 - C4787 * C309 + C4783 * C326) *
                C4785) *
               C47907 * C48014 -
           ((C4789 * C1325 - C4790 * C1309 - C4789 * C1326 + C47992 * C1336 +
             C4787 * C1313 - C4788 * C1303 - C4787 * C1314 + C4783 * C1330) *
                C47961 +
            (C4789 * C1323 - C4790 * C1308 - C4789 * C1324 + C47992 * C1335 +
             C4787 * C1315 - C4788 * C1304 - C4787 * C1316 + C4783 * C1331) *
                C4785) *
               C47907 * C47977) *
              C1095 +
          (((C4787 * C310 - C4788 * C297 - C4787 * C311 + C4783 * C327 +
             C4789 * C1178 - C4790 * C1170 - C4789 * C1179 + C47992 * C1188) *
                C4785 +
            (C5044 + C5045) * C47961) *
               C47907 * C48014 -
           ((C4789 * C1727 - C4790 * C1723 - C4789 * C1728 + C47992 * C1732 +
             C4787 * C1319 - C4788 * C1306 - C4787 * C1320 + C4783 * C1333) *
                C47961 +
            (C4789 * C1725 - C4790 * C1722 - C4789 * C1726 + C47992 * C1731 +
             C4787 * C1321 - C4788 * C1307 - C4787 * C1322 + C4783 * C1334) *
                C4785) *
               C47907 * C48003 +
           ((C4787 * C1323 - C4788 * C1308 - C4787 * C1324 + C4783 * C1335 +
             C4789 * C6145 - C4790 * C6143 - C4789 * C6146 + C47992 * C6149) *
                C4785 +
            (C4787 * C1325 - C4788 * C1309 - C4787 * C1326 + C4783 * C1336 +
             C4789 * C6147 - C4790 * C6144 - C4789 * C6148 + C47992 * C6150) *
                C47961) *
               C47907 * C47977) *
              C47974) *
         C47658) /
            (p * q * std::sqrt(p + q));
    d2ee[48] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C4787 * C122 - C4788 * C115 - C4787 * C123 + C4783 * C136 +
             C4789 * C308 - C4790 * C296 - C4789 * C309 + C47992 * C326) *
                C4785 +
            (C4840 + C4841) * C47961) *
               C47907 * C47943 -
           ((C5244 + C5245) * C47961 +
            (C4789 * C948 - C4790 * C943 - C4789 * C949 + C47992 * C958 +
             C4787 * C503 - C4788 * C491 - C4787 * C504 + C4783 * C521) *
                C4785) *
               C47907 * C47791) *
              C47686 * C671 +
          (((C5245 + C5244) * C4785 + (C5248 + C5249) * C47961) * C47907 *
               C47791 -
           ((C4842 + C4843) * C47961 + (C4841 + C4840) * C4785) * C47907 *
               C47943) *
              C47686 * C672 +
          (((C4843 + C4842) * C4785 + (C4844 + C4845) * C47961) * C47907 *
               C47943 -
           ((C5538 + C5539) * C47961 + (C5249 + C5248) * C4785) * C47907 *
               C47791) *
              C47686 * C673 +
          (((C5539 + C5538) * C4785 +
            (C4787 * C515 - C4788 * C497 - C4787 * C516 + C4783 * C527 +
             C4789 * C956 - C4790 * C947 - C4789 * C957 + C47992 * C962) *
                C47961) *
               C47907 * C47791 -
           ((C4846 + C4847) * C47961 + (C4845 + C4844) * C4785) * C47907 *
               C47943) *
              C47686 * C47978)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C4787 * C122 - C4788 * C115 - C4787 * C123 + C4783 * C136 +
              C4789 * C308 - C4790 * C296 - C4789 * C309 + C47992 * C326) *
                 C4785 +
             (C4840 + C4841) * C47961) *
                C47907 * C47943 -
            ((C5244 + C5245) * C47961 +
             (C4789 * C948 - C4790 * C943 - C4789 * C949 + C47992 * C958 +
              C4787 * C503 - C4788 * C491 - C4787 * C504 + C4783 * C521) *
                 C4785) *
                C47907 * C47791) *
               C1094 +
           (((C4787 * C948 - C4788 * C943 - C4787 * C949 + C4783 * C958 +
              C4789 * C1321 - C4790 * C1307 - C4789 * C1322 + C47992 * C1334) *
                 C4785 +
             (C5758 + C5759) * C47961) *
                C47907 * C47791 -
            ((C5042 + C5043) * C47961 +
             (C4789 * C310 - C4790 * C297 - C4789 * C311 + C47992 * C327 +
              C4787 * C308 - C4788 * C296 - C4787 * C309 + C4783 * C326) *
                 C4785) *
                C47907 * C47943) *
               C1095 +
           (((C4787 * C310 - C4788 * C297 - C4787 * C311 + C4783 * C327 +
              C4789 * C1178 - C4790 * C1170 - C4789 * C1179 + C47992 * C1188) *
                 C4785 +
             (C5044 + C5045) * C47961) *
                C47907 * C47943 -
            ((C6502 + C6503) * C47961 +
             (C4789 * C1725 - C4790 * C1722 - C4789 * C1726 + C47992 * C1731 +
              C4787 * C1321 - C4788 * C1307 - C4787 * C1322 + C4783 * C1334) *
                 C4785) *
                C47907 * C47791) *
               C47974) *
              C47928 +
          ((((C5245 + C5244) * C4785 + (C5248 + C5249) * C47961) * C47907 *
                C47791 -
            ((C4842 + C4843) * C47961 + (C4841 + C4840) * C4785) * C47907 *
                C47943) *
               C1094 +
           (((C5043 + C5042) * C4785 + (C5046 + C5047) * C47961) * C47907 *
                C47943 -
            ((C5760 + C5761) * C47961 + (C5759 + C5758) * C4785) * C47907 *
                C47791) *
               C1095 +
           (((C6503 + C6502) * C4785 +
             (C4787 * C1317 - C4788 * C1305 - C4787 * C1318 + C4783 * C1332 +
              C4789 * C1729 - C4790 * C1724 - C4789 * C1730 + C47992 * C1733) *
                 C47961) *
                C47907 * C47791 -
            ((C5048 + C5049) * C47961 + (C5045 + C5044) * C4785) * C47907 *
                C47943) *
               C47974) *
              C47669)) /
            (p * q * std::sqrt(p + q));
    d2ee[49] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C4787 * C122 - C4788 * C115 - C4787 * C123 + C4783 * C136 +
            C4789 * C308 - C4790 * C296 - C4789 * C309 + C47992 * C326) *
               C4785 +
           (C4840 + C4841) * C47961) *
              C47907 * C47704 * C47686 * C108 -
          ((C4842 + C4843) * C47961 + (C4841 + C4840) * C4785) * C47907 *
              C47704 * C47686 * C109 +
          ((C4843 + C4842) * C4785 + (C4844 + C4845) * C47961) * C47907 *
              C47704 * C47686 * C110 -
          ((C4846 + C4847) * C47961 + (C4845 + C4844) * C4785) * C47907 *
              C47704 * C47686 * C111 +
          ((C4847 + C4846) * C4785 +
           (C4787 * C132 - C4788 * C120 - C4787 * C133 + C4783 * C141 +
            C4789 * C676 - C4790 * C675 - C4789 * C677 + C47992 * C678) *
               C47961) *
              C47907 * C47704 * C47686 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C4787 * C122 - C4788 * C115 - C4787 * C123 + C4783 * C136 +
             C4789 * C308 - C4790 * C296 - C4789 * C309 + C47992 * C326) *
                C4785 +
            (C4840 + C4841) * C47961) *
               C47907 * C47704 * C48013 -
           ((C5042 + C5043) * C47961 +
            (C4789 * C310 - C4790 * C297 - C4789 * C311 + C47992 * C327 +
             C4787 * C308 - C4788 * C296 - C4787 * C309 + C4783 * C326) *
                C4785) *
               C47907 * C47704 * C48001 +
           ((C4787 * C310 - C4788 * C297 - C4787 * C311 + C4783 * C327 +
             C4789 * C1178 - C4790 * C1170 - C4789 * C1179 + C47992 * C1188) *
                C4785 +
            (C5044 + C5045) * C47961) *
               C47907 * C47704 * C47974) *
              C291 +
          (((C5043 + C5042) * C4785 + (C5046 + C5047) * C47961) * C47907 *
               C47704 * C48001 -
           ((C4842 + C4843) * C47961 + (C4841 + C4840) * C4785) * C47907 *
               C47704 * C48013 -
           ((C5048 + C5049) * C47961 + (C5045 + C5044) * C4785) * C47907 *
               C47704 * C47974) *
              C292 +
          (((C4843 + C4842) * C4785 + (C4844 + C4845) * C47961) * C47907 *
               C47704 * C48013 -
           ((C4789 * C318 - C4790 * C301 - C4789 * C319 + C47992 * C331 +
             C4787 * C316 - C4788 * C300 - C4787 * C317 + C4783 * C330) *
                C47961 +
            (C5047 + C5046) * C4785) *
               C47907 * C47704 * C48001 +
           ((C5049 + C5048) * C4785 +
            (C4787 * C318 - C4788 * C301 - C4787 * C319 + C4783 * C331 +
             C4789 * C1443 - C4790 * C1442 - C4789 * C1444 + C47992 * C1445) *
                C47961) *
               C47907 * C47704 * C47974) *
              C47968)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C4787 * C122 - C4788 * C115 - C4787 * C123 + C4783 * C136 +
             C4789 * C308 - C4790 * C296 - C4789 * C309 + C47992 * C326) *
                C4785 +
            (C4840 + C4841) * C47961) *
               C47907 * C47704 * C1094 -
           ((C5042 + C5043) * C47961 +
            (C4789 * C310 - C4790 * C297 - C4789 * C311 + C47992 * C327 +
             C4787 * C308 - C4788 * C296 - C4787 * C309 + C4783 * C326) *
                C4785) *
               C47907 * C47704 * C1095 +
           ((C4787 * C310 - C4788 * C297 - C4787 * C311 + C4783 * C327 +
             C4789 * C1178 - C4790 * C1170 - C4789 * C1179 + C47992 * C1188) *
                C4785 +
            (C5044 + C5045) * C47961) *
               C47907 * C47704 * C47974) *
              C48010 +
          (((C5043 + C5042) * C4785 + (C5046 + C5047) * C47961) * C47907 *
               C47704 * C1095 -
           ((C4842 + C4843) * C47961 + (C4841 + C4840) * C4785) * C47907 *
               C47704 * C1094 -
           ((C5048 + C5049) * C47961 + (C5045 + C5044) * C4785) * C47907 *
               C47704 * C47974) *
              C47997 +
          (((C4843 + C4842) * C4785 + (C4844 + C4845) * C47961) * C47907 *
               C47704 * C1094 -
           ((C5394 + C5395) * C47961 + (C5047 + C5046) * C4785) * C47907 *
               C47704 * C1095 +
           ((C5049 + C5048) * C4785 +
            (C4787 * C318 - C4788 * C301 - C4787 * C319 + C4783 * C331 +
             C4789 * C1443 - C4790 * C1442 - C4789 * C1444 + C47992 * C1445) *
                C47961) *
               C47907 * C47704 * C47974) *
              C47968)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C4787 * C122 - C4788 * C115 - C4787 * C123 + C4783 * C136 +
            C4789 * C308 - C4790 * C296 - C4789 * C309 + C47992 * C326) *
               C4785 +
           (C4840 + C4841) * C47961) *
              C47907 * C47704 * C1162 -
          ((C5042 + C5043) * C47961 +
           (C4789 * C310 - C4790 * C297 - C4789 * C311 + C47992 * C327 +
            C4787 * C308 - C4788 * C296 - C4787 * C309 + C4783 * C326) *
               C4785) *
              C47907 * C47704 * C1163 +
          ((C4787 * C310 - C4788 * C297 - C4787 * C311 + C4783 * C327 +
            C4789 * C1178 - C4790 * C1170 - C4789 * C1179 + C47992 * C1188) *
               C4785 +
           (C5044 + C5045) * C47961) *
              C47907 * C47704 * C1164 -
          ((C4789 * C1182 - C4790 * C1172 - C4789 * C1183 + C47992 * C1190 +
            C4787 * C1176 - C4788 * C1169 - C4787 * C1177 + C4783 * C1187) *
               C47961 +
           (C4789 * C1180 - C4790 * C1171 - C4789 * C1181 + C47992 * C1189 +
            C4787 * C1178 - C4788 * C1170 - C4787 * C1179 + C4783 * C1188) *
               C4785) *
              C47907 * C47704 * C1165 +
          ((C4787 * C1180 - C4788 * C1171 - C4787 * C1181 + C4783 * C1189 +
            C4789 * C5991 - C4790 * C5989 - C4789 * C5992 + C47992 * C5995) *
               C4785 +
           (C4787 * C1182 - C4788 * C1172 - C4787 * C1183 + C4783 * C1190 +
            C4789 * C5993 - C4790 * C5990 - C4789 * C5994 + C47992 * C5996) *
               C47961) *
              C47907 * C47704 * C1166) *
         C47658) /
            (p * q * std::sqrt(p + q));
    d2ee[50] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C47890 * C136) * C4785 +
             C174 * C47961) *
                C10559 +
            (C10878 + C10858) * C47994) *
               C47704 * C47745 -
           ((C11340 + C11348) * C47994 +
            (C372 * C47961 +
             (C113 * C308 - C114 * C296 - C113 * C309 + C47890 * C326) *
                 C4785) *
                C10559) *
               C47704 * C47752 +
           (((C113 * C310 - C114 * C297 - C113 * C311 + C47890 * C327) * C4785 +
             C373 * C47961) *
                C10559 +
            (C11754 + C11732) * C47994) *
               C47704 * C2908) *
              C47663 +
          (((C372 * C4785 + C371 * C47961) * C10559 +
            (C11341 + C11342) * C47994) *
               C47704 * C47752 -
           ((C10865 + C10864) * C47994 +
            (C175 * C47961 + C174 * C4785) * C10559) *
               C47704 * C47745 -
           ((C12089 + C12088) * C47994 +
            (C374 * C47961 + C373 * C4785) * C10559) *
               C47704 * C2908) *
              C47672 +
          (((C175 * C4785 + C176 * C47961) * C10559 +
            (C10868 + C10869) * C47994) *
               C47704 * C47745 -
           ((C11344 + C11343) * C47994 +
            (C375 * C47961 + C371 * C4785) * C10559) *
               C47704 * C47752 +
           ((C374 * C4785 + C376 * C47961) * C10559 +
            (C1623 * C4785 +
             (C113 * C1607 - C114 * C1606 - C113 * C1608 + C47890 * C1609) *
                 C47961) *
                C47994) *
               C47704 * C2908) *
              C2911)) /
        (p * q * std::sqrt(p + q));
    d2ee[51] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C122 - C114 * C115 - C113 * C123 + C47890 * C136) *
                  C4785 +
              C174 * C47961) *
                 C10559 +
             (C10878 + C10858) * C47994) *
                C47943 -
            ((C10859 + C10879) * C47994 + (C10858 + C10878) * C10559) *
                C47791) *
               C47745 +
           (((C11348 + C11340) * C10559 + (C11753 + C11727) * C47994) * C47791 -
            ((C11340 + C11348) * C47994 +
             (C372 * C47961 +
              (C113 * C308 - C114 * C296 - C113 * C309 + C47890 * C326) *
                  C4785) *
                 C10559) *
                C47943) *
               C47752 +
           ((((C113 * C310 - C114 * C297 - C113 * C311 + C47890 * C327) *
                  C4785 +
              C373 * C47961) *
                 C10559 +
             (C11754 + C11732) * C47994) *
                C47943 -
            ((C11755 + C11756) * C47994 + (C11732 + C11754) * C10559) *
                C47791) *
               C2908) *
              C2648 +
          ((((C10864 + C10865) * C10559 + (C10866 + C10867) * C47994) * C47791 -
            ((C10865 + C10864) * C47994 +
             (C175 * C47961 + C174 * C4785) * C10559) *
                C47943) *
               C47745 +
           (((C372 * C4785 + C371 * C47961) * C10559 +
             (C11341 + C11342) * C47994) *
                C47943 -
            ((C12834 + C12835) * C47994 + (C11342 + C11341) * C10559) *
                C47791) *
               C47752 +
           (((C12088 + C12089) * C10559 +
             (C11751 * C4785 +
              (C113 * C1327 - C114 * C1310 - C113 * C1328 + C47890 * C1337) *
                  C47961) *
                 C47994) *
                C47791 -
            ((C12089 + C12088) * C47994 +
             (C374 * C47961 + C373 * C4785) * C10559) *
                C47943) *
               C2908) *
              C47669)) /
        (p * q * std::sqrt(p + q));
    d2ee[52] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C47890 * C136) * C4785 +
             C174 * C47961) *
                C10559 +
            (C10878 + C10858) * C47994) *
               C47704 * C48020 -
           ((C11340 + C11348) * C47994 +
            (C372 * C47961 +
             (C113 * C308 - C114 * C296 - C113 * C309 + C47890 * C326) *
                 C4785) *
                C10559) *
               C47704 * C48016 +
           (((C113 * C310 - C114 * C297 - C113 * C311 + C47890 * C327) * C4785 +
             C373 * C47961) *
                C10559 +
            (C11754 + C11732) * C47994) *
               C47704 * C48006 -
           ((C12224 + C12228) * C47994 +
            (C1460 * C47961 +
             (C113 * C1178 - C114 * C1170 - C113 * C1179 + C47890 * C1188) *
                 C4785) *
                C10559) *
               C47704 * C47984) *
              C2648 +
          (((C372 * C4785 + C371 * C47961) * C10559 +
            (C11341 + C11342) * C47994) *
               C47704 * C48016 -
           ((C10865 + C10864) * C47994 +
            (C175 * C47961 + C174 * C4785) * C10559) *
               C47704 * C48020 -
           ((C12089 + C12088) * C47994 +
            (C374 * C47961 + C373 * C4785) * C10559) *
               C47704 * C48006 +
           ((C1460 * C4785 + C1459 * C47961) * C10559 +
            (C11893 * C4785 +
             (C113 * C1729 - C114 * C1724 - C113 * C1730 + C47890 * C1733) *
                 C47961) *
                C47994) *
               C47704 * C47984) *
              C47669)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C47890 * C136) * C4785 +
             C174 * C47961) *
                C10559 +
            (C10878 + C10858) * C47994) *
               C47704 * C2540 -
           ((C11340 + C11348) * C47994 +
            (C372 * C47961 +
             (C113 * C308 - C114 * C296 - C113 * C309 + C47890 * C326) *
                 C4785) *
                C10559) *
               C47704 * C47749) *
              C48019 +
          (((C372 * C4785 + C371 * C47961) * C10559 +
            (C11341 + C11342) * C47994) *
               C47704 * C47749 -
           ((C10865 + C10864) * C47994 +
            (C175 * C47961 + C174 * C4785) * C10559) *
               C47704 * C2540) *
              C48012 +
          (((C175 * C4785 + C176 * C47961) * C10559 +
            (C10868 + C10869) * C47994) *
               C47704 * C2540 -
           ((C11344 + C11343) * C47994 +
            (C375 * C47961 + C371 * C4785) * C10559) *
               C47704 * C47749) *
              C47999 +
          (((C375 * C4785 + C686 * C47961) * C10559 +
            (C984 * C4785 +
             (C113 * C956 - C114 * C947 - C113 * C957 + C47890 * C962) *
                 C47961) *
                C47994) *
               C47704 * C47749 -
           ((C11141 + C11140) * C47994 +
            (C177 * C47961 + C176 * C4785) * C10559) *
               C47704 * C2540) *
              C47978)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C122 - C114 * C115 - C113 * C123 + C47890 * C136) *
                  C4785 +
              C174 * C47961) *
                 C10559 +
             (C10878 + C10858) * C47994) *
                C48014 -
            ((C10859 + C10879) * C47994 + (C10858 + C10878) * C10559) * C48003 +
            ((C10879 + C10859) * C10559 + (C12633 + C12615) * C47994) *
                C47977) *
               C2540 +
           (((C11348 + C11340) * C10559 + (C11753 + C11727) * C47994) * C48003 -
            ((C11340 + C11348) * C47994 +
             (C372 * C47961 +
              (C113 * C308 - C114 * C296 - C113 * C309 + C47890 * C326) *
                  C4785) *
                 C10559) *
                C48014 -
            ((C13101 + C13109) * C47994 + (C11727 + C11753) * C10559) *
                C47977) *
               C47749) *
              C2648 +
          ((((C10864 + C10865) * C10559 + (C10866 + C10867) * C47994) * C48003 -
            ((C10865 + C10864) * C47994 +
             (C175 * C47961 + C174 * C4785) * C10559) *
                C48014 -
            ((C12969 + C12970) * C47994 + (C10867 + C10866) * C10559) *
                C47977) *
               C2540 +
           (((C372 * C4785 + C371 * C47961) * C10559 +
             (C11341 + C11342) * C47994) *
                C48014 -
            ((C12834 + C12835) * C47994 + (C11342 + C11341) * C10559) * C48003 +
            ((C12835 + C12834) * C10559 +
             (C12838 * C4785 +
              (C113 * C2437 - C114 * C2432 - C113 * C2438 + C47890 * C2441) *
                  C47961) *
                 C47994) *
                C47977) *
               C47749) *
              C47669)) /
            (p * q * std::sqrt(p + q));
    d2ee[53] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C122 - C114 * C115 - C113 * C123 + C47890 * C136) *
                  C4785 +
              C174 * C47961) *
                 C10559 +
             (C10878 + C10858) * C47994) *
                C47943 -
            ((C10859 + C10879) * C47994 + (C10858 + C10878) * C10559) *
                C47791) *
               C2540 +
           (((C11348 + C11340) * C10559 + (C11753 + C11727) * C47994) * C47791 -
            ((C11340 + C11348) * C47994 +
             (C372 * C47961 +
              (C113 * C308 - C114 * C296 - C113 * C309 + C47890 * C326) *
                  C4785) *
                 C10559) *
                C47943) *
               C47749) *
              C47663 +
          ((((C10864 + C10865) * C10559 + (C10866 + C10867) * C47994) * C47791 -
            ((C10865 + C10864) * C47994 +
             (C175 * C47961 + C174 * C4785) * C10559) *
                C47943) *
               C2540 +
           (((C372 * C4785 + C371 * C47961) * C10559 +
             (C11341 + C11342) * C47994) *
                C47943 -
            ((C12834 + C12835) * C47994 + (C11342 + C11341) * C10559) *
                C47791) *
               C47749) *
              C47672 +
          ((((C175 * C4785 + C176 * C47961) * C10559 +
             (C10868 + C10869) * C47994) *
                C47943 -
            ((C10870 + C10871) * C47994 + (C10869 + C10868) * C10559) *
                C47791) *
               C2540 +
           (((C11343 + C11344) * C10559 +
             (C2211 * C4785 +
              (C113 * C2195 - C114 * C2194 - C113 * C2196 + C47890 * C2197) *
                  C47961) *
                 C47994) *
                C47791 -
            ((C11344 + C11343) * C47994 +
             (C375 * C47961 + C371 * C4785) * C10559) *
                C47943) *
               C47749) *
              C2911)) /
        (p * q * std::sqrt(p + q));
    d2ee[54] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C47890 * C136) * C4785 +
             C174 * C47961) *
                C10559 +
            (C10878 + C10858) * C47994) *
               C47704 * C2540 -
           ((C11340 + C11348) * C47994 +
            (C372 * C47961 +
             (C113 * C308 - C114 * C296 - C113 * C309 + C47890 * C326) *
                 C4785) *
                C10559) *
               C47704 * C47749) *
              C48019 +
          (((C372 * C4785 + C371 * C47961) * C10559 +
            (C11341 + C11342) * C47994) *
               C47704 * C47749 -
           ((C10865 + C10864) * C47994 +
            (C175 * C47961 + C174 * C4785) * C10559) *
               C47704 * C2540) *
              C48012 +
          (((C175 * C4785 + C176 * C47961) * C10559 +
            (C10868 + C10869) * C47994) *
               C47704 * C2540 -
           ((C11344 + C11343) * C47994 +
            (C375 * C47961 + C371 * C4785) * C10559) *
               C47704 * C47749) *
              C47999 +
          (((C375 * C4785 + C686 * C47961) * C10559 +
            (C984 * C4785 +
             (C113 * C956 - C114 * C947 - C113 * C957 + C47890 * C962) *
                 C47961) *
                C47994) *
               C47704 * C47749 -
           ((C11141 + C11140) * C47994 +
            (C177 * C47961 + C176 * C4785) * C10559) *
               C47704 * C2540) *
              C47978)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C47890 * C136) * C4785 +
             C174 * C47961) *
                C10559 +
            (C10878 + C10858) * C47994) *
               C47704 * C48020 -
           ((C11340 + C11348) * C47994 +
            (C372 * C47961 +
             (C113 * C308 - C114 * C296 - C113 * C309 + C47890 * C326) *
                 C4785) *
                C10559) *
               C47704 * C48016 +
           (((C113 * C310 - C114 * C297 - C113 * C311 + C47890 * C327) * C4785 +
             C373 * C47961) *
                C10559 +
            (C11754 + C11732) * C47994) *
               C47704 * C48006 -
           ((C12224 + C12228) * C47994 +
            (C1460 * C47961 +
             (C113 * C1178 - C114 * C1170 - C113 * C1179 + C47890 * C1188) *
                 C4785) *
                C10559) *
               C47704 * C47984) *
              C2648 +
          (((C372 * C4785 + C371 * C47961) * C10559 +
            (C11341 + C11342) * C47994) *
               C47704 * C48016 -
           ((C10865 + C10864) * C47994 +
            (C175 * C47961 + C174 * C4785) * C10559) *
               C47704 * C48020 -
           ((C12089 + C12088) * C47994 +
            (C374 * C47961 + C373 * C4785) * C10559) *
               C47704 * C48006 +
           ((C1460 * C4785 + C1459 * C47961) * C10559 +
            (C11893 * C4785 +
             (C113 * C1729 - C114 * C1724 - C113 * C1730 + C47890 * C1733) *
                 C47961) *
                C47994) *
               C47704 * C47984) *
              C47669)) /
            (p * q * std::sqrt(p + q));
    d2ee[55] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C122 - C114 * C115 - C113 * C123 + C47890 * C136) *
                  C4785 +
              C174 * C47961) *
                 C10559 +
             (C10878 + C10858) * C47994) *
                C3302 -
            ((C10859 + C10879) * C47994 + (C10858 + C10878) * C10559) *
                C47791) *
               C47745 +
           (((C11348 + C11340) * C10559 + (C11753 + C11727) * C47994) * C47791 -
            ((C11340 + C11348) * C47994 +
             (C372 * C47961 +
              (C113 * C308 - C114 * C296 - C113 * C309 + C47890 * C326) *
                  C4785) *
                 C10559) *
                C3302) *
               C47752 +
           ((((C113 * C310 - C114 * C297 - C113 * C311 + C47890 * C327) *
                  C4785 +
              C373 * C47961) *
                 C10559 +
             (C11754 + C11732) * C47994) *
                C3302 -
            ((C11755 + C11756) * C47994 + (C11732 + C11754) * C10559) *
                C47791) *
               C2908) *
              C47928 +
          ((((C10864 + C10865) * C10559 + (C10866 + C10867) * C47994) * C47791 -
            ((C10865 + C10864) * C47994 +
             (C175 * C47961 + C174 * C4785) * C10559) *
                C3302) *
               C47745 +
           (((C372 * C4785 + C371 * C47961) * C10559 +
             (C11341 + C11342) * C47994) *
                C3302 -
            ((C12834 + C12835) * C47994 + (C11342 + C11341) * C10559) *
                C47791) *
               C47752 +
           (((C12088 + C12089) * C10559 +
             (C11751 * C4785 +
              (C113 * C1327 - C114 * C1310 - C113 * C1328 + C47890 * C1337) *
                  C47961) *
                 C47994) *
                C47791 -
            ((C12089 + C12088) * C47994 +
             (C374 * C47961 + C373 * C4785) * C10559) *
                C3302) *
               C2908) *
              C47669)) /
        (p * q * std::sqrt(p + q));
    d2ee[56] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C47890 * C136) * C4785 +
             C174 * C47961) *
                C10559 +
            (C10878 + C10858) * C47994) *
               C47787 -
           ((C10859 + C10879) * C47994 + (C10858 + C10878) * C10559) * C47794 +
           ((C10879 + C10859) * C10559 + (C12633 + C12615) * C47994) * C3810) *
              C47745 +
          (((C11348 + C11340) * C10559 + (C11753 + C11727) * C47994) * C47794 -
           ((C11340 + C11348) * C47994 +
            (C372 * C47961 +
             (C113 * C308 - C114 * C296 - C113 * C309 + C47890 * C326) *
                 C4785) *
                C10559) *
               C47787 -
           ((C13101 + C13109) * C47994 + (C11727 + C11753) * C10559) * C3810) *
              C47752 +
          ((((C113 * C310 - C114 * C297 - C113 * C311 + C47890 * C327) * C4785 +
             C373 * C47961) *
                C10559 +
            (C11754 + C11732) * C47994) *
               C47787 -
           ((C11755 + C11756) * C47994 + (C11732 + C11754) * C10559) * C47794 +
           ((C11756 + C11755) * C10559 +
            ((C113 * C7507 - C114 * C7505 - C113 * C7508 + C47890 * C7511) *
                 C4785 +
             (C113 * C7509 - C114 * C7506 - C113 * C7510 + C47890 * C7512) *
                 C47961) *
                C47994) *
               C3810) *
              C2908) *
         C47658) /
        (p * q * std::sqrt(p + q));
    d2ee[57] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C47890 * C136) * C4785 +
             C174 * C47961) *
                C10559 +
            (C10878 + C10858) * C47994) *
               C3302 -
           ((C10859 + C10879) * C47994 + (C10858 + C10878) * C10559) * C47791) *
              C48020 +
          (((C11348 + C11340) * C10559 + (C11753 + C11727) * C47994) * C47791 -
           ((C11340 + C11348) * C47994 +
            (C372 * C47961 +
             (C113 * C308 - C114 * C296 - C113 * C309 + C47890 * C326) *
                 C4785) *
                C10559) *
               C3302) *
              C48016 +
          ((((C113 * C310 - C114 * C297 - C113 * C311 + C47890 * C327) * C4785 +
             C373 * C47961) *
                C10559 +
            (C11754 + C11732) * C47994) *
               C3302 -
           ((C11755 + C11756) * C47994 + (C11732 + C11754) * C10559) * C47791) *
              C48006 +
          (((C12228 + C12224) * C10559 +
            ((C113 * C6145 - C114 * C6143 - C113 * C6146 + C47890 * C6149) *
                 C4785 +
             (C113 * C6147 - C114 * C6144 - C113 * C6148 + C47890 * C6150) *
                 C47961) *
                C47994) *
               C47791 -
           ((C12224 + C12228) * C47994 +
            (C1460 * C47961 +
             (C113 * C1178 - C114 * C1170 - C113 * C1179 + C47890 * C1188) *
                 C4785) *
                C10559) *
               C3302) *
              C47984) *
         C47658) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C122 - C114 * C115 - C113 * C123 + C47890 * C136) *
                  C4785 +
              C174 * C47961) *
                 C10559 +
             (C10878 + C10858) * C47994) *
                C3302 -
            ((C10859 + C10879) * C47994 + (C10858 + C10878) * C10559) *
                C47791) *
               C2540 +
           (((C11348 + C11340) * C10559 + (C11753 + C11727) * C47994) * C47791 -
            ((C11340 + C11348) * C47994 +
             (C372 * C47961 +
              (C113 * C308 - C114 * C296 - C113 * C309 + C47890 * C326) *
                  C4785) *
                 C10559) *
                C3302) *
               C47749) *
              C48010 +
          ((((C10864 + C10865) * C10559 + (C10866 + C10867) * C47994) * C47791 -
            ((C10865 + C10864) * C47994 +
             (C175 * C47961 + C174 * C4785) * C10559) *
                C3302) *
               C2540 +
           (((C372 * C4785 + C371 * C47961) * C10559 +
             (C11341 + C11342) * C47994) *
                C3302 -
            ((C12834 + C12835) * C47994 + (C11342 + C11341) * C10559) *
                C47791) *
               C47749) *
              C47997 +
          ((((C175 * C4785 + C176 * C47961) * C10559 +
             (C10868 + C10869) * C47994) *
                C3302 -
            ((C10870 + C10871) * C47994 + (C10869 + C10868) * C10559) *
                C47791) *
               C2540 +
           (((C11343 + C11344) * C10559 +
             (C2211 * C4785 +
              (C113 * C2195 - C114 * C2194 - C113 * C2196 + C47890 * C2197) *
                  C47961) *
                 C47994) *
                C47791 -
            ((C11344 + C11343) * C47994 +
             (C375 * C47961 + C371 * C4785) * C10559) *
                C3302) *
               C47749) *
              C47968)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C47890 * C136) * C4785 +
             C174 * C47961) *
                C10559 +
            (C10878 + C10858) * C47994) *
               C48021 -
           ((C10859 + C10879) * C47994 + (C10858 + C10878) * C10559) * C48018 +
           ((C10879 + C10859) * C10559 + (C12633 + C12615) * C47994) * C48009 -
           ((C12634 + C12635) * C47994 + (C12615 + C12633) * C10559) * C47990) *
              C2540 +
          (((C11348 + C11340) * C10559 + (C11753 + C11727) * C47994) * C48018 -
           ((C11340 + C11348) * C47994 +
            (C372 * C47961 +
             (C113 * C308 - C114 * C296 - C113 * C309 + C47890 * C326) *
                 C4785) *
                C10559) *
               C48021 -
           ((C13101 + C13109) * C47994 + (C11727 + C11753) * C10559) * C48009 +
           ((C13109 + C13101) * C10559 +
            ((C113 * C7017 - C114 * C7015 - C113 * C7018 + C47890 * C7021) *
                 C4785 +
             (C113 * C7019 - C114 * C7016 - C113 * C7020 + C47890 * C7022) *
                 C47961) *
                C47994) *
               C47990) *
              C47749) *
         C47658) /
            (p * q * std::sqrt(p + q));
    d2ee[58] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C122 - C114 * C115 - C113 * C123 + C47890 * C136) *
                  C4785 +
              C174 * C47961) *
                 C10559 +
             (C10878 + C10858) * C47994) *
                C47787 -
            ((C10859 + C10879) * C47994 + (C10858 + C10878) * C10559) * C47794 +
            ((C10879 + C10859) * C10559 + (C12633 + C12615) * C47994) * C3810) *
               C2540 +
           (((C11348 + C11340) * C10559 + (C11753 + C11727) * C47994) * C47794 -
            ((C11340 + C11348) * C47994 +
             (C372 * C47961 +
              (C113 * C308 - C114 * C296 - C113 * C309 + C47890 * C326) *
                  C4785) *
                 C10559) *
                C47787 -
            ((C13101 + C13109) * C47994 + (C11727 + C11753) * C10559) * C3810) *
               C47749) *
              C47928 +
          ((((C10864 + C10865) * C10559 + (C10866 + C10867) * C47994) * C47794 -
            ((C10865 + C10864) * C47994 +
             (C175 * C47961 + C174 * C4785) * C10559) *
                C47787 -
            ((C12969 + C12970) * C47994 + (C10867 + C10866) * C10559) * C3810) *
               C2540 +
           (((C372 * C4785 + C371 * C47961) * C10559 +
             (C11341 + C11342) * C47994) *
                C47787 -
            ((C12834 + C12835) * C47994 + (C11342 + C11341) * C10559) * C47794 +
            ((C12835 + C12834) * C10559 +
             (C12838 * C4785 +
              (C113 * C2437 - C114 * C2432 - C113 * C2438 + C47890 * C2441) *
                  C47961) *
                 C47994) *
                C3810) *
               C47749) *
              C47669)) /
        (p * q * std::sqrt(p + q));
    d2ee[59] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C122 - C114 * C115 - C113 * C123 + C47890 * C136) *
                  C4785 +
              C174 * C47961) *
                 C10559 +
             (C10878 + C10858) * C47994) *
                C3302 -
            ((C10859 + C10879) * C47994 + (C10858 + C10878) * C10559) *
                C47791) *
               C2540 +
           (((C11348 + C11340) * C10559 + (C11753 + C11727) * C47994) * C47791 -
            ((C11340 + C11348) * C47994 +
             (C372 * C47961 +
              (C113 * C308 - C114 * C296 - C113 * C309 + C47890 * C326) *
                  C4785) *
                 C10559) *
                C3302) *
               C47749) *
              C48010 +
          ((((C10864 + C10865) * C10559 + (C10866 + C10867) * C47994) * C47791 -
            ((C10865 + C10864) * C47994 +
             (C175 * C47961 + C174 * C4785) * C10559) *
                C3302) *
               C2540 +
           (((C372 * C4785 + C371 * C47961) * C10559 +
             (C11341 + C11342) * C47994) *
                C3302 -
            ((C12834 + C12835) * C47994 + (C11342 + C11341) * C10559) *
                C47791) *
               C47749) *
              C47997 +
          ((((C175 * C4785 + C176 * C47961) * C10559 +
             (C10868 + C10869) * C47994) *
                C3302 -
            ((C10870 + C10871) * C47994 + (C10869 + C10868) * C10559) *
                C47791) *
               C2540 +
           (((C11343 + C11344) * C10559 +
             (C2211 * C4785 +
              (C113 * C2195 - C114 * C2194 - C113 * C2196 + C47890 * C2197) *
                  C47961) *
                 C47994) *
                C47791 -
            ((C11344 + C11343) * C47994 +
             (C375 * C47961 + C371 * C4785) * C10559) *
                C3302) *
               C47749) *
              C47968)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C47890 * C136) * C4785 +
             C174 * C47961) *
                C10559 +
            (C10878 + C10858) * C47994) *
               C3302 -
           ((C10859 + C10879) * C47994 + (C10858 + C10878) * C10559) * C47791) *
              C48020 +
          (((C11348 + C11340) * C10559 + (C11753 + C11727) * C47994) * C47791 -
           ((C11340 + C11348) * C47994 +
            (C372 * C47961 +
             (C113 * C308 - C114 * C296 - C113 * C309 + C47890 * C326) *
                 C4785) *
                C10559) *
               C3302) *
              C48016 +
          ((((C113 * C310 - C114 * C297 - C113 * C311 + C47890 * C327) * C4785 +
             C373 * C47961) *
                C10559 +
            (C11754 + C11732) * C47994) *
               C3302 -
           ((C11755 + C11756) * C47994 + (C11732 + C11754) * C10559) * C47791) *
              C48006 +
          (((C12228 + C12224) * C10559 +
            ((C113 * C6145 - C114 * C6143 - C113 * C6146 + C47890 * C6149) *
                 C4785 +
             (C113 * C6147 - C114 * C6144 - C113 * C6148 + C47890 * C6150) *
                 C47961) *
                C47994) *
               C47791 -
           ((C12224 + C12228) * C47994 +
            (C1460 * C47961 +
             (C113 * C1178 - C114 * C1170 - C113 * C1179 + C47890 * C1188) *
                 C4785) *
                C10559) *
               C3302) *
              C47984) *
         C47658) /
            (p * q * std::sqrt(p + q));
    d2ee[60] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C47890 * C136) * C4785 +
             C174 * C47961) *
                C10559 +
            (C10878 + C10858) * C47994) *
               C47704 * C1436 -
           ((C11340 + C11348) * C47994 +
            (C372 * C47961 +
             (C113 * C308 - C114 * C296 - C113 * C309 + C47890 * C326) *
                 C4785) *
                C10559) *
               C47704 * C1437 +
           (((C113 * C310 - C114 * C297 - C113 * C311 + C47890 * C327) * C4785 +
             C373 * C47961) *
                C10559 +
            (C11754 + C11732) * C47994) *
               C47704 * C1438 -
           ((C11893 * C47961 +
             (C113 * C1725 - C114 * C1722 - C113 * C1726 + C47890 * C1731) *
                 C4785) *
                C47994 +
            (C1460 * C47961 +
             (C113 * C1178 - C114 * C1170 - C113 * C1179 + C47890 * C1188) *
                 C4785) *
                C10559) *
               C47704 * C47984) *
              C47928 +
          (((C372 * C4785 + C371 * C47961) * C10559 +
            (C11341 + C11342) * C47994) *
               C47704 * C1437 -
           ((C10865 + C10864) * C47994 +
            (C175 * C47961 + C174 * C4785) * C10559) *
               C47704 * C1436 -
           ((C1623 * C47961 + C1624 * C4785) * C47994 +
            (C374 * C47961 + C373 * C4785) * C10559) *
               C47704 * C1438 +
           ((C1460 * C4785 + C1459 * C47961) * C10559 +
            (C11893 * C4785 +
             (C113 * C1729 - C114 * C1724 - C113 * C1730 + C47890 * C1733) *
                 C47961) *
                C47994) *
               C47704 * C47984) *
              C47669)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C47890 * C136) * C4785 +
             C174 * C47961) *
                C10559 +
            (C10878 + C10858) * C47994) *
               C47704 * C47942 -
           ((C982 * C47961 +
             (C113 * C948 - C114 * C943 - C113 * C949 + C47890 * C958) *
                 C4785) *
                C47994 +
            (C372 * C47961 +
             (C113 * C308 - C114 * C296 - C113 * C309 + C47890 * C326) *
                 C4785) *
                C10559) *
               C47704 * C47749) *
              C671 +
          (((C372 * C4785 + C371 * C47961) * C10559 +
            (C982 * C4785 + C983 * C47961) * C47994) *
               C47704 * C47749 -
           ((C10865 + C10864) * C47994 +
            (C175 * C47961 + C174 * C4785) * C10559) *
               C47704 * C47942) *
              C672 +
          (((C175 * C4785 + C176 * C47961) * C10559 +
            (C10868 + C10869) * C47994) *
               C47704 * C47942 -
           ((C984 * C47961 + C983 * C4785) * C47994 +
            (C375 * C47961 + C371 * C4785) * C10559) *
               C47704 * C47749) *
              C673 +
          (((C375 * C4785 + C686 * C47961) * C10559 +
            (C984 * C4785 +
             (C113 * C956 - C114 * C947 - C113 * C957 + C47890 * C962) *
                 C47961) *
                C47994) *
               C47704 * C47749 -
           ((C797 * C47961 + C570 * C4785) * C47994 +
            (C177 * C47961 + C176 * C4785) * C10559) *
               C47704 * C47942) *
              C47978)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C122 - C114 * C115 - C113 * C123 + C47890 * C136) *
                  C4785 +
              C174 * C47961) *
                 C10559 +
             (C10878 + C10858) * C47994) *
                C1844 -
            ((C10859 + C10879) * C47994 + (C10858 + C10878) * C10559) * C1845 +
            ((C10879 + C10859) * C10559 + (C12633 + C12615) * C47994) *
                C47977) *
               C47942 +
           (((C11348 + C11340) * C10559 + (C11753 + C11727) * C47994) * C1845 -
            ((C11340 + C11348) * C47994 +
             (C372 * C47961 +
              (C113 * C308 - C114 * C296 - C113 * C309 + C47890 * C326) *
                  C4785) *
                 C10559) *
                C1844 -
            ((C12838 * C47961 +
              (C113 * C2433 - C114 * C2430 - C113 * C2434 + C47890 * C2439) *
                  C4785) *
                 C47994 +
             (C11727 + C11753) * C10559) *
                C47977) *
               C47749) *
              C47928 +
          ((((C10864 + C10865) * C10559 + (C10866 + C10867) * C47994) * C1845 -
            ((C10865 + C10864) * C47994 +
             (C175 * C47961 + C174 * C4785) * C10559) *
                C1844 -
            ((C2331 * C47961 + C2332 * C4785) * C47994 +
             (C10867 + C10866) * C10559) *
                C47977) *
               C47942 +
           (((C372 * C4785 + C371 * C47961) * C10559 +
             (C11341 + C11342) * C47994) *
                C1844 -
            ((C12834 + C12835) * C47994 + (C11342 + C11341) * C10559) * C1845 +
            ((C12835 + C12834) * C10559 +
             (C12838 * C4785 +
              (C113 * C2437 - C114 * C2432 - C113 * C2438 + C47890 * C2441) *
                  C47961) *
                 C47994) *
                C47977) *
               C47749) *
              C47669)) /
            (p * q * std::sqrt(p + q));
    d2ee[61] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C47890 * C136) * C4785 +
             C174 * C47961) *
                C10559 +
            (C10878 + C10858) * C47994) *
               C47943 -
           ((C10859 + C10879) * C47994 + (C10858 + C10878) * C10559) * C47791) *
              C1436 +
          (((C11348 + C11340) * C10559 + (C11753 + C11727) * C47994) * C47791 -
           ((C11340 + C11348) * C47994 +
            (C372 * C47961 +
             (C113 * C308 - C114 * C296 - C113 * C309 + C47890 * C326) *
                 C4785) *
                C10559) *
               C47943) *
              C1437 +
          ((((C113 * C310 - C114 * C297 - C113 * C311 + C47890 * C327) * C4785 +
             C373 * C47961) *
                C10559 +
            (C11754 + C11732) * C47994) *
               C47943 -
           ((C11755 + C11756) * C47994 + (C11732 + C11754) * C10559) * C47791) *
              C1438 +
          (((C12228 + C12224) * C10559 +
            ((C113 * C6145 - C114 * C6143 - C113 * C6146 + C47890 * C6149) *
                 C4785 +
             (C113 * C6147 - C114 * C6144 - C113 * C6148 + C47890 * C6150) *
                 C47961) *
                C47994) *
               C47791 -
           ((C12224 + C12228) * C47994 +
            (C1460 * C47961 +
             (C113 * C1178 - C114 * C1170 - C113 * C1179 + C47890 * C1188) *
                 C4785) *
                C10559) *
               C47943) *
              C47984) *
         C47658) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C122 - C114 * C115 - C113 * C123 + C47890 * C136) *
                  C4785 +
              C174 * C47961) *
                 C10559 +
             (C10878 + C10858) * C47994) *
                C47943 -
            ((C10859 + C10879) * C47994 + (C10858 + C10878) * C10559) *
                C47791) *
               C47942 +
           (((C11348 + C11340) * C10559 +
             ((C113 * C1315 - C114 * C1304 - C113 * C1316 + C47890 * C1331) *
                  C4785 +
              C2212 * C47961) *
                 C47994) *
                C47791 -
            ((C11340 + C11348) * C47994 +
             (C372 * C47961 +
              (C113 * C308 - C114 * C296 - C113 * C309 + C47890 * C326) *
                  C4785) *
                 C10559) *
                C47943) *
               C47749) *
              C291 +
          ((((C10864 + C10865) * C10559 + (C10866 + C10867) * C47994) * C47791 -
            ((C10865 + C10864) * C47994 +
             (C175 * C47961 + C174 * C4785) * C10559) *
                C47943) *
               C47942 +
           (((C372 * C4785 + C371 * C47961) * C10559 +
             (C11341 + C11342) * C47994) *
                C47943 -
            ((C2211 * C47961 + C2212 * C4785) * C47994 +
             (C11342 + C11341) * C10559) *
                C47791) *
               C47749) *
              C292 +
          ((((C175 * C4785 + C176 * C47961) * C10559 +
             (C10868 + C10869) * C47994) *
                C47943 -
            ((C10870 + C10871) * C47994 + (C10869 + C10868) * C10559) *
                C47791) *
               C47942 +
           (((C11343 + C11344) * C10559 +
             (C2211 * C4785 +
              (C113 * C2195 - C114 * C2194 - C113 * C2196 + C47890 * C2197) *
                  C47961) *
                 C47994) *
                C47791 -
            ((C11344 + C11343) * C47994 +
             (C375 * C47961 + C371 * C4785) * C10559) *
                C47943) *
               C47749) *
              C47968)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C47890 * C136) * C4785 +
             C174 * C47961) *
                C10559 +
            (C10878 + C10858) * C47994) *
               C2310 -
           ((C10859 + C10879) * C47994 + (C10858 + C10878) * C10559) * C2311 +
           ((C10879 + C10859) * C10559 + (C12633 + C12615) * C47994) * C2312 -
           ((C12634 + C12635) * C47994 + (C12615 + C12633) * C10559) * C47990) *
              C47942 +
          (((C11348 + C11340) * C10559 + (C11753 + C11727) * C47994) * C2311 -
           ((C11340 + C11348) * C47994 +
            (C372 * C47961 +
             (C113 * C308 - C114 * C296 - C113 * C309 + C47890 * C326) *
                 C4785) *
                C10559) *
               C2310 -
           ((C13101 + C13109) * C47994 + (C11727 + C11753) * C10559) * C2312 +
           ((C13109 + C13101) * C10559 +
            ((C113 * C7017 - C114 * C7015 - C113 * C7018 + C47890 * C7021) *
                 C4785 +
             (C113 * C7019 - C114 * C7016 - C113 * C7020 + C47890 * C7022) *
                 C47961) *
                C47994) *
               C47990) *
              C47749) *
         C47658) /
            (p * q * std::sqrt(p + q));
    d2ee[62] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C113 * C122 - C114 * C115 - C113 * C123 + C47890 * C136) *
                    C4785 +
                C174 * C47961) *
                   C10559 +
               ((C113 * C503 - C114 * C491 - C113 * C504 + C47890 * C521) *
                    C4785 +
                C567 * C47961) *
                   C47994) *
                  C47704 * C47686 * C108 -
              ((C566 * C47961 + C567 * C4785) * C47994 +
               (C175 * C47961 + C174 * C4785) * C10559) *
                  C47704 * C47686 * C109 +
              ((C175 * C4785 + C176 * C47961) * C10559 +
               (C566 * C4785 + C570 * C47961) * C47994) *
                  C47704 * C47686 * C110 -
              ((C797 * C47961 + C570 * C4785) * C47994 +
               (C177 * C47961 + C176 * C4785) * C10559) *
                  C47704 * C47686 * C111 +
              ((C177 * C4785 + C178 * C47961) * C10559 +
               (C797 * C4785 +
                (C113 * C787 - C114 * C786 - C113 * C788 + C47890 * C789) *
                    C47961) *
                   C47994) *
                  C47704 * C47686 * C112) +
         0.5 * std::pow(Pi, 2.5) *
             (((((C113 * C122 - C114 * C115 - C113 * C123 + C47890 * C136) *
                     C4785 +
                 C174 * C47961) *
                    C10559 +
                ((C113 * C503 - C114 * C491 - C113 * C504 + C47890 * C521) *
                     C4785 +
                 C567 * C47961) *
                    C47994) *
                   C47704 * C48013 -
               ((C982 * C47961 +
                 (C113 * C948 - C114 * C943 - C113 * C949 + C47890 * C958) *
                     C4785) *
                    C47994 +
                (C372 * C47961 +
                 (C113 * C308 - C114 * C296 - C113 * C309 + C47890 * C326) *
                     C4785) *
                    C10559) *
                   C47704 * C48001 +
               (((C113 * C310 - C114 * C297 - C113 * C311 + C47890 * C327) *
                     C4785 +
                 C373 * C47961) *
                    C10559 +
                ((C113 * C1321 - C114 * C1307 - C113 * C1322 + C47890 * C1334) *
                     C4785 +
                 C1624 * C47961) *
                    C47994) *
                   C47704 * C47974) *
                  C291 +
              (((C372 * C4785 + C371 * C47961) * C10559 +
                (C982 * C4785 + C983 * C47961) * C47994) *
                   C47704 * C48001 -
               ((C566 * C47961 + C567 * C4785) * C47994 +
                (C175 * C47961 + C174 * C4785) * C10559) *
                   C47704 * C48013 -
               ((C1623 * C47961 + C1624 * C4785) * C47994 +
                (C374 * C47961 + C373 * C4785) * C10559) *
                   C47704 * C47974) *
                  C292 +
              (((C175 * C4785 + C176 * C47961) * C10559 +
                (C566 * C4785 + C570 * C47961) * C47994) *
                   C47704 * C48013 -
               ((C984 * C47961 + C983 * C4785) * C47994 +
                (C375 * C47961 + C371 * C4785) * C10559) *
                   C47704 * C48001 +
               ((C374 * C4785 + C376 * C47961) * C10559 +
                (C1623 * C4785 +
                 (C113 * C1607 - C114 * C1606 - C113 * C1608 + C47890 * C1609) *
                     C47961) *
                    C47994) *
                   C47704 * C47974) *
                  C47968)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C47890 * C136) * C4785 +
             C174 * C47961) *
                C10559 +
            (C10878 + C10858) * C47994) *
               C48014 -
           ((C10859 + C10879) * C47994 + (C10858 + C10878) * C10559) * C48003 +
           ((C10879 + C10859) * C10559 +
            ((C113 * C2034 - C114 * C2026 - C113 * C2035 + C47890 * C2044) *
                 C4785 +
             C2332 * C47961) *
                C47994) *
               C47977) *
              C47686 * C291 +
          (((C10864 + C10865) * C10559 + (C10866 + C10867) * C47994) * C48003 -
           ((C10865 + C10864) * C47994 +
            (C175 * C47961 + C174 * C4785) * C10559) *
               C48014 -
           ((C2331 * C47961 + C2332 * C4785) * C47994 +
            (C10867 + C10866) * C10559) *
               C47977) *
              C47686 * C292 +
          (((C175 * C4785 + C176 * C47961) * C10559 +
            (C10868 + C10869) * C47994) *
               C48014 -
           ((C10870 + C10871) * C47994 + (C10869 + C10868) * C10559) * C48003 +
           ((C10871 + C10870) * C10559 +
            (C2331 * C4785 +
             (C113 * C2315 - C114 * C2314 - C113 * C2316 + C47890 * C2317) *
                 C47961) *
                C47994) *
               C47977) *
              C47686 * C47968)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C47890 * C136) * C4785 +
             C174 * C47961) *
                C10559 +
            (C10878 + C10858) * C47994) *
               C47704 * C1094 -
           ((C11340 + C11348) * C47994 +
            (C372 * C47961 +
             (C113 * C308 - C114 * C296 - C113 * C309 + C47890 * C326) *
                 C4785) *
                C10559) *
               C47704 * C1095 +
           (((C113 * C310 - C114 * C297 - C113 * C311 + C47890 * C327) * C4785 +
             C373 * C47961) *
                C10559 +
            ((C113 * C1321 - C114 * C1307 - C113 * C1322 + C47890 * C1334) *
                 C4785 +
             C1624 * C47961) *
                C47994) *
               C47704 * C47974) *
              C48010 +
          (((C372 * C4785 + C371 * C47961) * C10559 +
            (C11341 + C11342) * C47994) *
               C47704 * C1095 -
           ((C10865 + C10864) * C47994 +
            (C175 * C47961 + C174 * C4785) * C10559) *
               C47704 * C1094 -
           ((C1623 * C47961 + C1624 * C4785) * C47994 +
            (C374 * C47961 + C373 * C4785) * C10559) *
               C47704 * C47974) *
              C47997 +
          (((C175 * C4785 + C176 * C47961) * C10559 +
            (C10868 + C10869) * C47994) *
               C47704 * C1094 -
           ((C11344 + C11343) * C47994 +
            (C375 * C47961 + C371 * C4785) * C10559) *
               C47704 * C1095 +
           ((C374 * C4785 + C376 * C47961) * C10559 +
            (C1623 * C4785 +
             (C113 * C1607 - C114 * C1606 - C113 * C1608 + C47890 * C1609) *
                 C47961) *
                C47994) *
               C47704 * C47974) *
              C47968)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C47890 * C136) * C4785 +
            C174 * C47961) *
               C10559 +
           (C10878 + C10858) * C47994) *
              C47704 * C1162 -
          ((C11340 + C11348) * C47994 +
           (C372 * C47961 +
            (C113 * C308 - C114 * C296 - C113 * C309 + C47890 * C326) * C4785) *
               C10559) *
              C47704 * C1163 +
          (((C113 * C310 - C114 * C297 - C113 * C311 + C47890 * C327) * C4785 +
            C373 * C47961) *
               C10559 +
           ((C113 * C1321 - C114 * C1307 - C113 * C1322 + C47890 * C1334) *
                C4785 +
            C1624 * C47961) *
               C47994) *
              C47704 * C1164 -
          (((C113 * C1727 - C114 * C1723 - C113 * C1728 + C47890 * C1732) *
                C47961 +
            (C113 * C1725 - C114 * C1722 - C113 * C1726 + C47890 * C1731) *
                C4785) *
               C47994 +
           (C1460 * C47961 +
            (C113 * C1178 - C114 * C1170 - C113 * C1179 + C47890 * C1188) *
                C4785) *
               C10559) *
              C47704 * C1165 +
          (((C113 * C1180 - C114 * C1171 - C113 * C1181 + C47890 * C1189) *
                C4785 +
            (C113 * C1182 - C114 * C1172 - C113 * C1183 + C47890 * C1190) *
                C47961) *
               C10559 +
           ((C113 * C6635 - C114 * C6633 - C113 * C6636 + C47890 * C6639) *
                C4785 +
            (C113 * C6637 - C114 * C6634 - C113 * C6638 + C47890 * C6640) *
                C47961) *
               C47994) *
              C47704 * C1166) *
         C47658) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C47890 * C136) * C4785 +
             C174 * C47961) *
                C10559 +
            (C10878 + C10858) * C47994) *
               C48014 -
           ((C10859 + C10879) * C47994 + (C10858 + C10878) * C10559) * C48003 +
           ((C10879 + C10859) * C10559 +
            ((C113 * C2034 - C114 * C2026 - C113 * C2035 + C47890 * C2044) *
                 C4785 +
             C2332 * C47961) *
                C47994) *
               C47977) *
              C1094 +
          (((C11348 + C11340) * C10559 + (C11753 + C11727) * C47994) * C48003 -
           ((C11340 + C11348) * C47994 +
            (C372 * C47961 +
             (C113 * C308 - C114 * C296 - C113 * C309 + C47890 * C326) *
                 C4785) *
                C10559) *
               C48014 -
           (((C113 * C2435 - C114 * C2431 - C113 * C2436 + C47890 * C2440) *
                 C47961 +
             (C113 * C2433 - C114 * C2430 - C113 * C2434 + C47890 * C2439) *
                 C4785) *
                C47994 +
            (C11727 + C11753) * C10559) *
               C47977) *
              C1095 +
          ((((C113 * C310 - C114 * C297 - C113 * C311 + C47890 * C327) * C4785 +
             C373 * C47961) *
                C10559 +
            (C11754 + C11732) * C47994) *
               C48014 -
           ((C11755 + C11756) * C47994 + (C11732 + C11754) * C10559) * C48003 +
           ((C11756 + C11755) * C10559 +
            ((C113 * C7507 - C114 * C7505 - C113 * C7508 + C47890 * C7511) *
                 C4785 +
             (C113 * C7509 - C114 * C7506 - C113 * C7510 + C47890 * C7512) *
                 C47961) *
                C47994) *
               C47977) *
              C47974) *
         C47658) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C47890 * C136) * C4785 +
             C174 * C47961) *
                C10559 +
            (C10878 + C10858) * C47994) *
               C1844 -
           ((C10859 + C10879) * C47994 + (C10858 + C10878) * C10559) * C1845 +
           ((C10879 + C10859) * C10559 +
            ((C113 * C2034 - C114 * C2026 - C113 * C2035 + C47890 * C2044) *
                 C4785 +
             C2332 * C47961) *
                C47994) *
               C47977) *
              C47686 * C48010 +
          (((C10864 + C10865) * C10559 + (C10866 + C10867) * C47994) * C1845 -
           ((C10865 + C10864) * C47994 +
            (C175 * C47961 + C174 * C4785) * C10559) *
               C1844 -
           ((C2331 * C47961 + C2332 * C4785) * C47994 +
            (C10867 + C10866) * C10559) *
               C47977) *
              C47686 * C47997 +
          (((C175 * C4785 + C176 * C47961) * C10559 +
            (C10868 + C10869) * C47994) *
               C1844 -
           ((C10870 + C10871) * C47994 + (C10869 + C10868) * C10559) * C1845 +
           ((C10871 + C10870) * C10559 +
            (C2331 * C4785 +
             (C113 * C2315 - C114 * C2314 - C113 * C2316 + C47890 * C2317) *
                 C47961) *
                C47994) *
               C47977) *
              C47686 * C47968)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C47890 * C136) * C4785 +
             C174 * C47961) *
                C10559 +
            (C10878 + C10858) * C47994) *
               C1844 -
           ((C10859 + C10879) * C47994 + (C10858 + C10878) * C10559) * C1845 +
           ((C10879 + C10859) * C10559 +
            ((C113 * C2034 - C114 * C2026 - C113 * C2035 + C47890 * C2044) *
                 C4785 +
             C2332 * C47961) *
                C47994) *
               C47977) *
              C48013 +
          (((C11348 + C11340) * C10559 + (C11753 + C11727) * C47994) * C1845 -
           ((C11340 + C11348) * C47994 +
            (C372 * C47961 +
             (C113 * C308 - C114 * C296 - C113 * C309 + C47890 * C326) *
                 C4785) *
                C10559) *
               C1844 -
           (((C113 * C2435 - C114 * C2431 - C113 * C2436 + C47890 * C2440) *
                 C47961 +
             (C113 * C2433 - C114 * C2430 - C113 * C2434 + C47890 * C2439) *
                 C4785) *
                C47994 +
            (C11727 + C11753) * C10559) *
               C47977) *
              C48001 +
          ((((C113 * C310 - C114 * C297 - C113 * C311 + C47890 * C327) * C4785 +
             C373 * C47961) *
                C10559 +
            (C11754 + C11732) * C47994) *
               C1844 -
           ((C11755 + C11756) * C47994 + (C11732 + C11754) * C10559) * C1845 +
           ((C11756 + C11755) * C10559 +
            ((C113 * C7507 - C114 * C7505 - C113 * C7508 + C47890 * C7511) *
                 C4785 +
             (C113 * C7509 - C114 * C7506 - C113 * C7510 + C47890 * C7512) *
                 C47961) *
                C47994) *
               C47977) *
              C47974) *
         C47658) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C47890 * C136) * C4785 +
            C174 * C47961) *
               C10559 +
           (C10878 + C10858) * C47994) *
              C2019 -
          ((C10859 + C10879) * C47994 + (C10858 + C10878) * C10559) * C2020 +
          ((C10879 + C10859) * C10559 + (C12633 + C12615) * C47994) * C2021 -
          ((C12634 + C12635) * C47994 + (C12615 + C12633) * C10559) * C2022 +
          ((C12635 + C12634) * C10559 +
           ((C113 * C12604 - C114 * C12602 - C113 * C12605 + C47890 * C12608) *
                C4785 +
            (C113 * C12606 - C114 * C12603 - C113 * C12607 + C47890 * C12609) *
                C47961) *
               C47994) *
              C2023) *
         C47686 * C47658) /
            (p * q * std::sqrt(p + q));
    d2ee[63] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C122 - C114 * C115 - C113 * C123 + C47890 * C136) *
                  C4785 +
              C174 * C47961) *
                 C10559 +
             (C10878 + C10858) * C47994) *
                C47943 -
            ((C10859 + C10879) * C47994 + (C10858 + C10878) * C10559) *
                C47791) *
               C1094 +
           (((C11348 + C11340) * C10559 + (C11753 + C11727) * C47994) * C47791 -
            ((C11340 + C11348) * C47994 +
             (C372 * C47961 +
              (C113 * C308 - C114 * C296 - C113 * C309 + C47890 * C326) *
                  C4785) *
                 C10559) *
                C47943) *
               C1095 +
           ((((C113 * C310 - C114 * C297 - C113 * C311 + C47890 * C327) *
                  C4785 +
              C373 * C47961) *
                 C10559 +
             (C11754 + C11732) * C47994) *
                C47943 -
            ((C11755 + C11756) * C47994 + (C11732 + C11754) * C10559) *
                C47791) *
               C47974) *
              C47928 +
          ((((C10864 + C10865) * C10559 + (C10866 + C10867) * C47994) * C47791 -
            ((C10865 + C10864) * C47994 +
             (C175 * C47961 + C174 * C4785) * C10559) *
                C47943) *
               C1094 +
           (((C372 * C4785 + C371 * C47961) * C10559 +
             (C11341 + C11342) * C47994) *
                C47943 -
            ((C2211 * C47961 + C2212 * C4785) * C47994 +
             (C11342 + C11341) * C10559) *
                C47791) *
               C1095 +
           (((C12088 + C12089) * C10559 +
             (C11751 * C4785 +
              (C113 * C1327 - C114 * C1310 - C113 * C1328 + C47890 * C1337) *
                  C47961) *
                 C47994) *
                C47791 -
            ((C12089 + C12088) * C47994 +
             (C374 * C47961 + C373 * C4785) * C10559) *
                C47943) *
               C47974) *
              C47669)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C47890 * C136) * C4785 +
             C174 * C47961) *
                C10559 +
            (C10878 + C10858) * C47994) *
               C47943 -
           ((C10859 + C10879) * C47994 + (C10858 + C10878) * C10559) * C47791) *
              C47686 * C671 +
          (((C10864 + C10865) * C10559 + (C10866 + C10867) * C47994) * C47791 -
           ((C10865 + C10864) * C47994 +
            (C175 * C47961 + C174 * C4785) * C10559) *
               C47943) *
              C47686 * C672 +
          (((C175 * C4785 + C176 * C47961) * C10559 +
            (C10868 + C10869) * C47994) *
               C47943 -
           ((C10870 + C10871) * C47994 + (C10869 + C10868) * C10559) * C47791) *
              C47686 * C673 +
          (((C11140 + C11141) * C10559 +
            (C571 * C4785 +
             (C113 * C517 - C114 * C498 - C113 * C518 + C47890 * C528) *
                 C47961) *
                C47994) *
               C47791 -
           ((C11141 + C11140) * C47994 +
            (C177 * C47961 + C176 * C4785) * C10559) *
               C47943) *
              C47686 * C47978)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C47890 * C136) * C4785 +
             C174 * C47961) *
                C10559 +
            (C10878 + C10858) * C47994) *
               C2310 -
           ((C10859 + C10879) * C47994 + (C10858 + C10878) * C10559) * C2311 +
           ((C10879 + C10859) * C10559 + (C12633 + C12615) * C47994) * C2312 -
           ((C12634 + C12635) * C47994 + (C12615 + C12633) * C10559) * C47990) *
              C47686 * C47928 +
          (((C10864 + C10865) * C10559 + (C10866 + C10867) * C47994) * C2311 -
           ((C10865 + C10864) * C47994 +
            (C175 * C47961 + C174 * C4785) * C10559) *
               C2310 -
           ((C12969 + C12970) * C47994 + (C10867 + C10866) * C10559) * C2312 +
           ((C12970 + C12969) * C10559 +
            (C12631 * C4785 +
             (C113 * C2040 - C114 * C2029 - C113 * C2041 + C47890 * C2047) *
                 C47961) *
                C47994) *
               C47990) *
              C47686 * C47669)) /
            (p * q * std::sqrt(p + q));
    d2ee[64] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C47890 * C136) * C4785 +
             C174 * C47961) *
                C10559 +
            ((C113 * C503 - C114 * C491 - C113 * C504 + C47890 * C521) * C4785 +
             C567 * C47961) *
                C47994) *
               C47704 * C48013 -
           ((C982 * C47961 +
             (C113 * C948 - C114 * C943 - C113 * C949 + C47890 * C958) *
                 C4785) *
                C47994 +
            (C372 * C47961 +
             (C113 * C308 - C114 * C296 - C113 * C309 + C47890 * C326) *
                 C4785) *
                C10559) *
               C47704 * C48001 +
           (((C113 * C310 - C114 * C297 - C113 * C311 + C47890 * C327) * C4785 +
             C373 * C47961) *
                C10559 +
            ((C113 * C1321 - C114 * C1307 - C113 * C1322 + C47890 * C1334) *
                 C4785 +
             C1624 * C47961) *
                C47994) *
               C47704 * C47974) *
              C291 +
          (((C372 * C4785 + C371 * C47961) * C10559 +
            (C982 * C4785 + C983 * C47961) * C47994) *
               C47704 * C48001 -
           ((C566 * C47961 + C567 * C4785) * C47994 +
            (C175 * C47961 + C174 * C4785) * C10559) *
               C47704 * C48013 -
           ((C1623 * C47961 + C1624 * C4785) * C47994 +
            (C374 * C47961 + C373 * C4785) * C10559) *
               C47704 * C47974) *
              C292 +
          (((C175 * C4785 + C176 * C47961) * C10559 +
            (C566 * C4785 + C570 * C47961) * C47994) *
               C47704 * C48013 -
           ((C984 * C47961 + C983 * C4785) * C47994 +
            (C375 * C47961 + C371 * C4785) * C10559) *
               C47704 * C48001 +
           ((C374 * C4785 + C376 * C47961) * C10559 +
            (C1623 * C4785 +
             (C113 * C1607 - C114 * C1606 - C113 * C1608 + C47890 * C1609) *
                 C47961) *
                C47994) *
               C47704 * C47974) *
              C47968)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C47890 * C136) * C4785 +
            C174 * C47961) *
               C10559 +
           ((C113 * C503 - C114 * C491 - C113 * C504 + C47890 * C521) * C4785 +
            C567 * C47961) *
               C47994) *
              C47704 * C47686 * C108 -
          ((C566 * C47961 + C567 * C4785) * C47994 +
           (C175 * C47961 + C174 * C4785) * C10559) *
              C47704 * C47686 * C109 +
          ((C175 * C4785 + C176 * C47961) * C10559 +
           (C566 * C4785 + C570 * C47961) * C47994) *
              C47704 * C47686 * C110 -
          ((C797 * C47961 + C570 * C4785) * C47994 +
           (C177 * C47961 + C176 * C4785) * C10559) *
              C47704 * C47686 * C111 +
          ((C177 * C4785 + C178 * C47961) * C10559 +
           (C797 * C4785 +
            (C113 * C787 - C114 * C786 - C113 * C788 + C47890 * C789) *
                C47961) *
               C47994) *
              C47704 * C47686 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C47890 * C136) * C4785 +
             C174 * C47961) *
                C10559 +
            (C10878 + C10858) * C47994) *
               C47704 * C1094 -
           ((C11340 + C11348) * C47994 +
            (C372 * C47961 +
             (C113 * C308 - C114 * C296 - C113 * C309 + C47890 * C326) *
                 C4785) *
                C10559) *
               C47704 * C1095 +
           (((C113 * C310 - C114 * C297 - C113 * C311 + C47890 * C327) * C4785 +
             C373 * C47961) *
                C10559 +
            ((C113 * C1321 - C114 * C1307 - C113 * C1322 + C47890 * C1334) *
                 C4785 +
             C1624 * C47961) *
                C47994) *
               C47704 * C47974) *
              C48010 +
          (((C372 * C4785 + C371 * C47961) * C10559 +
            (C11341 + C11342) * C47994) *
               C47704 * C1095 -
           ((C10865 + C10864) * C47994 +
            (C175 * C47961 + C174 * C4785) * C10559) *
               C47704 * C1094 -
           ((C1623 * C47961 + C1624 * C4785) * C47994 +
            (C374 * C47961 + C373 * C4785) * C10559) *
               C47704 * C47974) *
              C47997 +
          (((C175 * C4785 + C176 * C47961) * C10559 +
            (C10868 + C10869) * C47994) *
               C47704 * C1094 -
           ((C11344 + C11343) * C47994 +
            (C375 * C47961 + C371 * C4785) * C10559) *
               C47704 * C1095 +
           ((C374 * C4785 + C376 * C47961) * C10559 +
            (C1623 * C4785 +
             (C113 * C1607 - C114 * C1606 - C113 * C1608 + C47890 * C1609) *
                 C47961) *
                C47994) *
               C47704 * C47974) *
              C47968)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C47890 * C136) * C4785 +
            C174 * C47961) *
               C10559 +
           (C10878 + C10858) * C47994) *
              C47704 * C1162 -
          ((C11340 + C11348) * C47994 +
           (C372 * C47961 +
            (C113 * C308 - C114 * C296 - C113 * C309 + C47890 * C326) * C4785) *
               C10559) *
              C47704 * C1163 +
          (((C113 * C310 - C114 * C297 - C113 * C311 + C47890 * C327) * C4785 +
            C373 * C47961) *
               C10559 +
           ((C113 * C1321 - C114 * C1307 - C113 * C1322 + C47890 * C1334) *
                C4785 +
            C1624 * C47961) *
               C47994) *
              C47704 * C1164 -
          (((C113 * C1727 - C114 * C1723 - C113 * C1728 + C47890 * C1732) *
                C47961 +
            (C113 * C1725 - C114 * C1722 - C113 * C1726 + C47890 * C1731) *
                C4785) *
               C47994 +
           (C1460 * C47961 +
            (C113 * C1178 - C114 * C1170 - C113 * C1179 + C47890 * C1188) *
                C4785) *
               C10559) *
              C47704 * C1165 +
          (((C113 * C1180 - C114 * C1171 - C113 * C1181 + C47890 * C1189) *
                C4785 +
            (C113 * C1182 - C114 * C1172 - C113 * C1183 + C47890 * C1190) *
                C47961) *
               C10559 +
           ((C113 * C6635 - C114 * C6633 - C113 * C6636 + C47890 * C6639) *
                C4785 +
            (C113 * C6637 - C114 * C6634 - C113 * C6638 + C47890 * C6640) *
                C47961) *
               C47994) *
              C47704 * C1166) *
         C47658) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C47890 * C136) * C4785 +
             C174 * C47961) *
                C10559 +
            (C10878 + C10858) * C47994) *
               C1844 -
           ((C10859 + C10879) * C47994 + (C10858 + C10878) * C10559) * C1845 +
           ((C10879 + C10859) * C10559 +
            ((C113 * C2034 - C114 * C2026 - C113 * C2035 + C47890 * C2044) *
                 C4785 +
             C2332 * C47961) *
                C47994) *
               C47977) *
              C47686 * C48010 +
          (((C10864 + C10865) * C10559 + (C10866 + C10867) * C47994) * C1845 -
           ((C10865 + C10864) * C47994 +
            (C175 * C47961 + C174 * C4785) * C10559) *
               C1844 -
           ((C2331 * C47961 + C2332 * C4785) * C47994 +
            (C10867 + C10866) * C10559) *
               C47977) *
              C47686 * C47997 +
          (((C175 * C4785 + C176 * C47961) * C10559 +
            (C10868 + C10869) * C47994) *
               C1844 -
           ((C10870 + C10871) * C47994 + (C10869 + C10868) * C10559) * C1845 +
           ((C10871 + C10870) * C10559 +
            (C2331 * C4785 +
             (C113 * C2315 - C114 * C2314 - C113 * C2316 + C47890 * C2317) *
                 C47961) *
                C47994) *
               C47977) *
              C47686 * C47968)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C47890 * C136) * C4785 +
             C174 * C47961) *
                C10559 +
            (C10878 + C10858) * C47994) *
               C1844 -
           ((C10859 + C10879) * C47994 + (C10858 + C10878) * C10559) * C1845 +
           ((C10879 + C10859) * C10559 +
            ((C113 * C2034 - C114 * C2026 - C113 * C2035 + C47890 * C2044) *
                 C4785 +
             C2332 * C47961) *
                C47994) *
               C47977) *
              C48013 +
          (((C11348 + C11340) * C10559 + (C11753 + C11727) * C47994) * C1845 -
           ((C11340 + C11348) * C47994 +
            (C372 * C47961 +
             (C113 * C308 - C114 * C296 - C113 * C309 + C47890 * C326) *
                 C4785) *
                C10559) *
               C1844 -
           (((C113 * C2435 - C114 * C2431 - C113 * C2436 + C47890 * C2440) *
                 C47961 +
             (C113 * C2433 - C114 * C2430 - C113 * C2434 + C47890 * C2439) *
                 C4785) *
                C47994 +
            (C11727 + C11753) * C10559) *
               C47977) *
              C48001 +
          ((((C113 * C310 - C114 * C297 - C113 * C311 + C47890 * C327) * C4785 +
             C373 * C47961) *
                C10559 +
            (C11754 + C11732) * C47994) *
               C1844 -
           ((C11755 + C11756) * C47994 + (C11732 + C11754) * C10559) * C1845 +
           ((C11756 + C11755) * C10559 +
            ((C113 * C7507 - C114 * C7505 - C113 * C7508 + C47890 * C7511) *
                 C4785 +
             (C113 * C7509 - C114 * C7506 - C113 * C7510 + C47890 * C7512) *
                 C47961) *
                C47994) *
               C47977) *
              C47974) *
         C47658) /
            (p * q * std::sqrt(p + q));
    d2ee[65] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C122 - C114 * C115 - C113 * C123 + C47890 * C136) *
                  C4785 +
              C174 * C47961) *
                 C10559 +
             (C10878 + C10858) * C47994) *
                C3302 -
            ((C10859 + C10879) * C47994 + (C10858 + C10878) * C10559) *
                C47791) *
               C47942 +
           (((C11348 + C11340) * C10559 + (C11753 + C11727) * C47994) * C47791 -
            ((C11340 + C11348) * C47994 +
             (C372 * C47961 +
              (C113 * C308 - C114 * C296 - C113 * C309 + C47890 * C326) *
                  C4785) *
                 C10559) *
                C3302) *
               C47749) *
              C47663 +
          ((((C10864 + C10865) * C10559 + (C10866 + C10867) * C47994) * C47791 -
            ((C10865 + C10864) * C47994 +
             (C175 * C47961 + C174 * C4785) * C10559) *
                C3302) *
               C47942 +
           (((C372 * C4785 + C371 * C47961) * C10559 +
             (C11341 + C11342) * C47994) *
                C3302 -
            ((C12834 + C12835) * C47994 + (C11342 + C11341) * C10559) *
                C47791) *
               C47749) *
              C47672 +
          ((((C175 * C4785 + C176 * C47961) * C10559 +
             (C10868 + C10869) * C47994) *
                C3302 -
            ((C10870 + C10871) * C47994 + (C10869 + C10868) * C10559) *
                C47791) *
               C47942 +
           (((C11343 + C11344) * C10559 +
             (C2211 * C4785 +
              (C113 * C2195 - C114 * C2194 - C113 * C2196 + C47890 * C2197) *
                  C47961) *
                 C47994) *
                C47791 -
            ((C11344 + C11343) * C47994 +
             (C375 * C47961 + C371 * C4785) * C10559) *
                C3302) *
               C47749) *
              C2911)) /
        (p * q * std::sqrt(p + q));
    d2ee[66] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C122 - C114 * C115 - C113 * C123 + C47890 * C136) *
                  C4785 +
              C174 * C47961) *
                 C10559 +
             (C10878 + C10858) * C47994) *
                C47787 -
            ((C10859 + C10879) * C47994 + (C10858 + C10878) * C10559) * C47794 +
            ((C10879 + C10859) * C10559 + (C12633 + C12615) * C47994) * C3810) *
               C47942 +
           (((C11348 + C11340) * C10559 + (C11753 + C11727) * C47994) * C47794 -
            ((C11340 + C11348) * C47994 +
             (C372 * C47961 +
              (C113 * C308 - C114 * C296 - C113 * C309 + C47890 * C326) *
                  C4785) *
                 C10559) *
                C47787 -
            ((C13101 + C13109) * C47994 + (C11727 + C11753) * C10559) * C3810) *
               C47749) *
              C2648 +
          ((((C10864 + C10865) * C10559 + (C10866 + C10867) * C47994) * C47794 -
            ((C10865 + C10864) * C47994 +
             (C175 * C47961 + C174 * C4785) * C10559) *
                C47787 -
            ((C12969 + C12970) * C47994 + (C10867 + C10866) * C10559) * C3810) *
               C47942 +
           (((C372 * C4785 + C371 * C47961) * C10559 +
             (C11341 + C11342) * C47994) *
                C47787 -
            ((C12834 + C12835) * C47994 + (C11342 + C11341) * C10559) * C47794 +
            ((C12835 + C12834) * C10559 +
             (C12838 * C4785 +
              (C113 * C2437 - C114 * C2432 - C113 * C2438 + C47890 * C2441) *
                  C47961) *
                 C47994) *
                C3810) *
               C47749) *
              C47669)) /
        (p * q * std::sqrt(p + q));
    d2ee[67] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C122 - C114 * C115 - C113 * C123 + C47890 * C136) *
                  C4785 +
              C174 * C47961) *
                 C10559 +
             (C10878 + C10858) * C47994) *
                C3302 -
            ((C10859 + C10879) * C47994 + (C10858 + C10878) * C10559) *
                C47791) *
               C48013 +
           (((C11348 + C11340) * C10559 + (C11753 + C11727) * C47994) * C47791 -
            ((C11340 + C11348) * C47994 +
             (C372 * C47961 +
              (C113 * C308 - C114 * C296 - C113 * C309 + C47890 * C326) *
                  C4785) *
                 C10559) *
                C3302) *
               C48001 +
           ((((C113 * C310 - C114 * C297 - C113 * C311 + C47890 * C327) *
                  C4785 +
              C373 * C47961) *
                 C10559 +
             (C11754 + C11732) * C47994) *
                C3302 -
            ((C11755 + C11756) * C47994 + (C11732 + C11754) * C10559) *
                C47791) *
               C47974) *
              C2648 +
          ((((C10864 + C10865) * C10559 + (C10866 + C10867) * C47994) * C47791 -
            ((C10865 + C10864) * C47994 +
             (C175 * C47961 + C174 * C4785) * C10559) *
                C3302) *
               C48013 +
           (((C372 * C4785 + C371 * C47961) * C10559 +
             (C11341 + C11342) * C47994) *
                C3302 -
            ((C12834 + C12835) * C47994 + (C11342 + C11341) * C10559) *
                C47791) *
               C48001 +
           (((C12088 + C12089) * C10559 +
             (C11751 * C4785 +
              (C113 * C1327 - C114 * C1310 - C113 * C1328 + C47890 * C1337) *
                  C47961) *
                 C47994) *
                C47791 -
            ((C12089 + C12088) * C47994 +
             (C374 * C47961 + C373 * C4785) * C10559) *
                C3302) *
               C47974) *
              C47669)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C47890 * C136) * C4785 +
             C174 * C47961) *
                C10559 +
            (C10878 + C10858) * C47994) *
               C3302 -
           ((C10859 + C10879) * C47994 + (C10858 + C10878) * C10559) * C47791) *
              C47686 * C48019 +
          (((C10864 + C10865) * C10559 + (C10866 + C10867) * C47994) * C47791 -
           ((C10865 + C10864) * C47994 +
            (C175 * C47961 + C174 * C4785) * C10559) *
               C3302) *
              C47686 * C48012 +
          (((C175 * C4785 + C176 * C47961) * C10559 +
            (C10868 + C10869) * C47994) *
               C3302 -
           ((C10870 + C10871) * C47994 + (C10869 + C10868) * C10559) * C47791) *
              C47686 * C47999 +
          (((C11140 + C11141) * C10559 +
            (C571 * C4785 +
             (C113 * C517 - C114 * C498 - C113 * C518 + C47890 * C528) *
                 C47961) *
                C47994) *
               C47791 -
           ((C11141 + C11140) * C47994 +
            (C177 * C47961 + C176 * C4785) * C10559) *
               C3302) *
              C47686 * C47978)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C47890 * C136) * C4785 +
             C174 * C47961) *
                C10559 +
            (C10878 + C10858) * C47994) *
               C48021 -
           ((C10859 + C10879) * C47994 + (C10858 + C10878) * C10559) * C48018 +
           ((C10879 + C10859) * C10559 + (C12633 + C12615) * C47994) * C48009 -
           ((C12634 + C12635) * C47994 + (C12615 + C12633) * C10559) * C47990) *
              C47686 * C2648 +
          (((C10864 + C10865) * C10559 + (C10866 + C10867) * C47994) * C48018 -
           ((C10865 + C10864) * C47994 +
            (C175 * C47961 + C174 * C4785) * C10559) *
               C48021 -
           ((C12969 + C12970) * C47994 + (C10867 + C10866) * C10559) * C48009 +
           ((C12970 + C12969) * C10559 +
            (C12631 * C4785 +
             (C113 * C2040 - C114 * C2029 - C113 * C2041 + C47890 * C2047) *
                 C47961) *
                C47994) *
               C47990) *
              C47686 * C47669)) /
            (p * q * std::sqrt(p + q));
    d2ee[68] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C47890 * C136) * C4785 +
             C174 * C47961) *
                C10559 +
            (C10878 + C10858) * C47994) *
               C47787 -
           ((C10859 + C10879) * C47994 + (C10858 + C10878) * C10559) * C47794 +
           ((C10879 + C10859) * C10559 + (C12633 + C12615) * C47994) * C3810) *
              C47686 * C47663 +
          (((C10864 + C10865) * C10559 + (C10866 + C10867) * C47994) * C47794 -
           ((C10865 + C10864) * C47994 +
            (C175 * C47961 + C174 * C4785) * C10559) *
               C47787 -
           ((C12969 + C12970) * C47994 + (C10867 + C10866) * C10559) * C3810) *
              C47686 * C47672 +
          (((C175 * C4785 + C176 * C47961) * C10559 +
            (C10868 + C10869) * C47994) *
               C47787 -
           ((C10870 + C10871) * C47994 + (C10869 + C10868) * C10559) * C47794 +
           ((C10871 + C10870) * C10559 +
            (C2331 * C4785 +
             (C113 * C2315 - C114 * C2314 - C113 * C2316 + C47890 * C2317) *
                 C47961) *
                C47994) *
               C3810) *
              C47686 * C2911)) /
        (p * q * std::sqrt(p + q));
    d2ee[69] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C47890 * C136) * C4785 +
             C174 * C47961) *
                C10559 +
            (C10878 + C10858) * C47994) *
               C3302 -
           ((C10859 + C10879) * C47994 + (C10858 + C10878) * C10559) * C47791) *
              C47686 * C48019 +
          (((C10864 + C10865) * C10559 + (C10866 + C10867) * C47994) * C47791 -
           ((C10865 + C10864) * C47994 +
            (C175 * C47961 + C174 * C4785) * C10559) *
               C3302) *
              C47686 * C48012 +
          (((C175 * C4785 + C176 * C47961) * C10559 +
            (C10868 + C10869) * C47994) *
               C3302 -
           ((C10870 + C10871) * C47994 + (C10869 + C10868) * C10559) * C47791) *
              C47686 * C47999 +
          (((C11140 + C11141) * C10559 +
            (C571 * C4785 +
             (C113 * C517 - C114 * C498 - C113 * C518 + C47890 * C528) *
                 C47961) *
                C47994) *
               C47791 -
           ((C11141 + C11140) * C47994 +
            (C177 * C47961 + C176 * C4785) * C10559) *
               C3302) *
              C47686 * C47978)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C122 - C114 * C115 - C113 * C123 + C47890 * C136) *
                  C4785 +
              C174 * C47961) *
                 C10559 +
             (C10878 + C10858) * C47994) *
                C3302 -
            ((C10859 + C10879) * C47994 + (C10858 + C10878) * C10559) *
                C47791) *
               C48013 +
           (((C11348 + C11340) * C10559 + (C11753 + C11727) * C47994) * C47791 -
            ((C11340 + C11348) * C47994 +
             (C372 * C47961 +
              (C113 * C308 - C114 * C296 - C113 * C309 + C47890 * C326) *
                  C4785) *
                 C10559) *
                C3302) *
               C48001 +
           ((((C113 * C310 - C114 * C297 - C113 * C311 + C47890 * C327) *
                  C4785 +
              C373 * C47961) *
                 C10559 +
             (C11754 + C11732) * C47994) *
                C3302 -
            ((C11755 + C11756) * C47994 + (C11732 + C11754) * C10559) *
                C47791) *
               C47974) *
              C2648 +
          ((((C10864 + C10865) * C10559 + (C10866 + C10867) * C47994) * C47791 -
            ((C10865 + C10864) * C47994 +
             (C175 * C47961 + C174 * C4785) * C10559) *
                C3302) *
               C48013 +
           (((C372 * C4785 + C371 * C47961) * C10559 +
             (C11341 + C11342) * C47994) *
                C3302 -
            ((C12834 + C12835) * C47994 + (C11342 + C11341) * C10559) *
                C47791) *
               C48001 +
           (((C12088 + C12089) * C10559 +
             (C11751 * C4785 +
              (C113 * C1327 - C114 * C1310 - C113 * C1328 + C47890 * C1337) *
                  C47961) *
                 C47994) *
                C47791 -
            ((C12089 + C12088) * C47994 +
             (C374 * C47961 + C373 * C4785) * C10559) *
                C3302) *
               C47974) *
              C47669)) /
            (p * q * std::sqrt(p + q));
    d2ee[70] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C47890 * C136) * C4785 +
             C174 * C47961) *
                C10559 +
            (C10878 + C10858) * C47994) *
               C47704 * C47942 -
           ((C982 * C47961 +
             (C113 * C948 - C114 * C943 - C113 * C949 + C47890 * C958) *
                 C4785) *
                C47994 +
            (C372 * C47961 +
             (C113 * C308 - C114 * C296 - C113 * C309 + C47890 * C326) *
                 C4785) *
                C10559) *
               C47704 * C47749) *
              C671 +
          (((C372 * C4785 + C371 * C47961) * C10559 +
            (C982 * C4785 + C983 * C47961) * C47994) *
               C47704 * C47749 -
           ((C10865 + C10864) * C47994 +
            (C175 * C47961 + C174 * C4785) * C10559) *
               C47704 * C47942) *
              C672 +
          (((C175 * C4785 + C176 * C47961) * C10559 +
            (C10868 + C10869) * C47994) *
               C47704 * C47942 -
           ((C984 * C47961 + C983 * C4785) * C47994 +
            (C375 * C47961 + C371 * C4785) * C10559) *
               C47704 * C47749) *
              C673 +
          (((C375 * C4785 + C686 * C47961) * C10559 +
            (C984 * C4785 +
             (C113 * C956 - C114 * C947 - C113 * C957 + C47890 * C962) *
                 C47961) *
                C47994) *
               C47704 * C47749 -
           ((C797 * C47961 + C570 * C4785) * C47994 +
            (C177 * C47961 + C176 * C4785) * C10559) *
               C47704 * C47942) *
              C47978)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C47890 * C136) * C4785 +
             C174 * C47961) *
                C10559 +
            (C10878 + C10858) * C47994) *
               C47704 * C1436 -
           ((C11340 + C11348) * C47994 +
            (C372 * C47961 +
             (C113 * C308 - C114 * C296 - C113 * C309 + C47890 * C326) *
                 C4785) *
                C10559) *
               C47704 * C1437 +
           (((C113 * C310 - C114 * C297 - C113 * C311 + C47890 * C327) * C4785 +
             C373 * C47961) *
                C10559 +
            (C11754 + C11732) * C47994) *
               C47704 * C1438 -
           ((C11893 * C47961 +
             (C113 * C1725 - C114 * C1722 - C113 * C1726 + C47890 * C1731) *
                 C4785) *
                C47994 +
            (C1460 * C47961 +
             (C113 * C1178 - C114 * C1170 - C113 * C1179 + C47890 * C1188) *
                 C4785) *
                C10559) *
               C47704 * C47984) *
              C47928 +
          (((C372 * C4785 + C371 * C47961) * C10559 +
            (C11341 + C11342) * C47994) *
               C47704 * C1437 -
           ((C10865 + C10864) * C47994 +
            (C175 * C47961 + C174 * C4785) * C10559) *
               C47704 * C1436 -
           ((C1623 * C47961 + C1624 * C4785) * C47994 +
            (C374 * C47961 + C373 * C4785) * C10559) *
               C47704 * C1438 +
           ((C1460 * C4785 + C1459 * C47961) * C10559 +
            (C11893 * C4785 +
             (C113 * C1729 - C114 * C1724 - C113 * C1730 + C47890 * C1733) *
                 C47961) *
                C47994) *
               C47704 * C47984) *
              C47669)) /
            (p * q * std::sqrt(p + q));
    d2ee[71] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C122 - C114 * C115 - C113 * C123 + C47890 * C136) *
                  C4785 +
              C174 * C47961) *
                 C10559 +
             (C10878 + C10858) * C47994) *
                C47943 -
            ((C10859 + C10879) * C47994 + (C10858 + C10878) * C10559) *
                C47791) *
               C47942 +
           (((C11348 + C11340) * C10559 +
             ((C113 * C1315 - C114 * C1304 - C113 * C1316 + C47890 * C1331) *
                  C4785 +
              C2212 * C47961) *
                 C47994) *
                C47791 -
            ((C11340 + C11348) * C47994 +
             (C372 * C47961 +
              (C113 * C308 - C114 * C296 - C113 * C309 + C47890 * C326) *
                  C4785) *
                 C10559) *
                C47943) *
               C47749) *
              C291 +
          ((((C10864 + C10865) * C10559 + (C10866 + C10867) * C47994) * C47791 -
            ((C10865 + C10864) * C47994 +
             (C175 * C47961 + C174 * C4785) * C10559) *
                C47943) *
               C47942 +
           (((C372 * C4785 + C371 * C47961) * C10559 +
             (C11341 + C11342) * C47994) *
                C47943 -
            ((C2211 * C47961 + C2212 * C4785) * C47994 +
             (C11342 + C11341) * C10559) *
                C47791) *
               C47749) *
              C292 +
          ((((C175 * C4785 + C176 * C47961) * C10559 +
             (C10868 + C10869) * C47994) *
                C47943 -
            ((C10870 + C10871) * C47994 + (C10869 + C10868) * C10559) *
                C47791) *
               C47942 +
           (((C11343 + C11344) * C10559 +
             (C2211 * C4785 +
              (C113 * C2195 - C114 * C2194 - C113 * C2196 + C47890 * C2197) *
                  C47961) *
                 C47994) *
                C47791 -
            ((C11344 + C11343) * C47994 +
             (C375 * C47961 + C371 * C4785) * C10559) *
                C47943) *
               C47749) *
              C47968)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C47890 * C136) * C4785 +
             C174 * C47961) *
                C10559 +
            (C10878 + C10858) * C47994) *
               C47943 -
           ((C10859 + C10879) * C47994 + (C10858 + C10878) * C10559) * C47791) *
              C1436 +
          (((C11348 + C11340) * C10559 + (C11753 + C11727) * C47994) * C47791 -
           ((C11340 + C11348) * C47994 +
            (C372 * C47961 +
             (C113 * C308 - C114 * C296 - C113 * C309 + C47890 * C326) *
                 C4785) *
                C10559) *
               C47943) *
              C1437 +
          ((((C113 * C310 - C114 * C297 - C113 * C311 + C47890 * C327) * C4785 +
             C373 * C47961) *
                C10559 +
            (C11754 + C11732) * C47994) *
               C47943 -
           ((C11755 + C11756) * C47994 + (C11732 + C11754) * C10559) * C47791) *
              C1438 +
          (((C12228 + C12224) * C10559 +
            ((C113 * C6145 - C114 * C6143 - C113 * C6146 + C47890 * C6149) *
                 C4785 +
             (C113 * C6147 - C114 * C6144 - C113 * C6148 + C47890 * C6150) *
                 C47961) *
                C47994) *
               C47791 -
           ((C12224 + C12228) * C47994 +
            (C1460 * C47961 +
             (C113 * C1178 - C114 * C1170 - C113 * C1179 + C47890 * C1188) *
                 C4785) *
                C10559) *
               C47943) *
              C47984) *
         C47658) /
            (p * q * std::sqrt(p + q));
    d2ee[72] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C47890 * C136) * C4785 +
             C174 * C47961) *
                C10559 +
            ((C113 * C503 - C114 * C491 - C113 * C504 + C47890 * C521) * C4785 +
             C567 * C47961) *
                C47994) *
               C47704 * C48013 -
           ((C982 * C47961 +
             (C113 * C948 - C114 * C943 - C113 * C949 + C47890 * C958) *
                 C4785) *
                C47994 +
            (C372 * C47961 +
             (C113 * C308 - C114 * C296 - C113 * C309 + C47890 * C326) *
                 C4785) *
                C10559) *
               C47704 * C48001 +
           (((C113 * C310 - C114 * C297 - C113 * C311 + C47890 * C327) * C4785 +
             C373 * C47961) *
                C10559 +
            ((C113 * C1321 - C114 * C1307 - C113 * C1322 + C47890 * C1334) *
                 C4785 +
             C1624 * C47961) *
                C47994) *
               C47704 * C47974) *
              C291 +
          (((C372 * C4785 + C371 * C47961) * C10559 +
            (C982 * C4785 + C983 * C47961) * C47994) *
               C47704 * C48001 -
           ((C566 * C47961 + C567 * C4785) * C47994 +
            (C175 * C47961 + C174 * C4785) * C10559) *
               C47704 * C48013 -
           ((C1623 * C47961 + C1624 * C4785) * C47994 +
            (C374 * C47961 + C373 * C4785) * C10559) *
               C47704 * C47974) *
              C292 +
          (((C175 * C4785 + C176 * C47961) * C10559 +
            (C566 * C4785 + C570 * C47961) * C47994) *
               C47704 * C48013 -
           ((C984 * C47961 + C983 * C4785) * C47994 +
            (C375 * C47961 + C371 * C4785) * C10559) *
               C47704 * C48001 +
           ((C374 * C4785 + C376 * C47961) * C10559 +
            (C1623 * C4785 +
             (C113 * C1607 - C114 * C1606 - C113 * C1608 + C47890 * C1609) *
                 C47961) *
                C47994) *
               C47704 * C47974) *
              C47968)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C47890 * C136) * C4785 +
            C174 * C47961) *
               C10559 +
           ((C113 * C503 - C114 * C491 - C113 * C504 + C47890 * C521) * C4785 +
            C567 * C47961) *
               C47994) *
              C47704 * C47686 * C108 -
          ((C566 * C47961 + C567 * C4785) * C47994 +
           (C175 * C47961 + C174 * C4785) * C10559) *
              C47704 * C47686 * C109 +
          ((C175 * C4785 + C176 * C47961) * C10559 +
           (C566 * C4785 + C570 * C47961) * C47994) *
              C47704 * C47686 * C110 -
          ((C797 * C47961 + C570 * C4785) * C47994 +
           (C177 * C47961 + C176 * C4785) * C10559) *
              C47704 * C47686 * C111 +
          ((C177 * C4785 + C178 * C47961) * C10559 +
           (C797 * C4785 +
            (C113 * C787 - C114 * C786 - C113 * C788 + C47890 * C789) *
                C47961) *
               C47994) *
              C47704 * C47686 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C47890 * C136) * C4785 +
             C174 * C47961) *
                C10559 +
            (C10878 + C10858) * C47994) *
               C48014 -
           ((C10859 + C10879) * C47994 + (C10858 + C10878) * C10559) * C48003 +
           ((C10879 + C10859) * C10559 +
            ((C113 * C2034 - C114 * C2026 - C113 * C2035 + C47890 * C2044) *
                 C4785 +
             C2332 * C47961) *
                C47994) *
               C47977) *
              C47686 * C291 +
          (((C10864 + C10865) * C10559 + (C10866 + C10867) * C47994) * C48003 -
           ((C10865 + C10864) * C47994 +
            (C175 * C47961 + C174 * C4785) * C10559) *
               C48014 -
           ((C2331 * C47961 + C2332 * C4785) * C47994 +
            (C10867 + C10866) * C10559) *
               C47977) *
              C47686 * C292 +
          (((C175 * C4785 + C176 * C47961) * C10559 +
            (C10868 + C10869) * C47994) *
               C48014 -
           ((C10870 + C10871) * C47994 + (C10869 + C10868) * C10559) * C48003 +
           ((C10871 + C10870) * C10559 +
            (C2331 * C4785 +
             (C113 * C2315 - C114 * C2314 - C113 * C2316 + C47890 * C2317) *
                 C47961) *
                C47994) *
               C47977) *
              C47686 * C47968)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C47890 * C136) * C4785 +
             C174 * C47961) *
                C10559 +
            (C10878 + C10858) * C47994) *
               C47704 * C1094 -
           ((C11340 + C11348) * C47994 +
            (C372 * C47961 +
             (C113 * C308 - C114 * C296 - C113 * C309 + C47890 * C326) *
                 C4785) *
                C10559) *
               C47704 * C1095 +
           (((C113 * C310 - C114 * C297 - C113 * C311 + C47890 * C327) * C4785 +
             C373 * C47961) *
                C10559 +
            ((C113 * C1321 - C114 * C1307 - C113 * C1322 + C47890 * C1334) *
                 C4785 +
             C1624 * C47961) *
                C47994) *
               C47704 * C47974) *
              C48010 +
          (((C372 * C4785 + C371 * C47961) * C10559 +
            (C11341 + C11342) * C47994) *
               C47704 * C1095 -
           ((C10865 + C10864) * C47994 +
            (C175 * C47961 + C174 * C4785) * C10559) *
               C47704 * C1094 -
           ((C1623 * C47961 + C1624 * C4785) * C47994 +
            (C374 * C47961 + C373 * C4785) * C10559) *
               C47704 * C47974) *
              C47997 +
          (((C175 * C4785 + C176 * C47961) * C10559 +
            (C10868 + C10869) * C47994) *
               C47704 * C1094 -
           ((C11344 + C11343) * C47994 +
            (C375 * C47961 + C371 * C4785) * C10559) *
               C47704 * C1095 +
           ((C374 * C4785 + C376 * C47961) * C10559 +
            (C1623 * C4785 +
             (C113 * C1607 - C114 * C1606 - C113 * C1608 + C47890 * C1609) *
                 C47961) *
                C47994) *
               C47704 * C47974) *
              C47968)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C47890 * C136) * C4785 +
            C174 * C47961) *
               C10559 +
           (C10878 + C10858) * C47994) *
              C47704 * C1162 -
          ((C11340 + C11348) * C47994 +
           (C372 * C47961 +
            (C113 * C308 - C114 * C296 - C113 * C309 + C47890 * C326) * C4785) *
               C10559) *
              C47704 * C1163 +
          (((C113 * C310 - C114 * C297 - C113 * C311 + C47890 * C327) * C4785 +
            C373 * C47961) *
               C10559 +
           ((C113 * C1321 - C114 * C1307 - C113 * C1322 + C47890 * C1334) *
                C4785 +
            C1624 * C47961) *
               C47994) *
              C47704 * C1164 -
          (((C113 * C1727 - C114 * C1723 - C113 * C1728 + C47890 * C1732) *
                C47961 +
            (C113 * C1725 - C114 * C1722 - C113 * C1726 + C47890 * C1731) *
                C4785) *
               C47994 +
           (C1460 * C47961 +
            (C113 * C1178 - C114 * C1170 - C113 * C1179 + C47890 * C1188) *
                C4785) *
               C10559) *
              C47704 * C1165 +
          (((C113 * C1180 - C114 * C1171 - C113 * C1181 + C47890 * C1189) *
                C4785 +
            (C113 * C1182 - C114 * C1172 - C113 * C1183 + C47890 * C1190) *
                C47961) *
               C10559 +
           ((C113 * C6635 - C114 * C6633 - C113 * C6636 + C47890 * C6639) *
                C4785 +
            (C113 * C6637 - C114 * C6634 - C113 * C6638 + C47890 * C6640) *
                C47961) *
               C47994) *
              C47704 * C1166) *
         C47658) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C47890 * C136) * C4785 +
             C174 * C47961) *
                C10559 +
            (C10878 + C10858) * C47994) *
               C48014 -
           ((C10859 + C10879) * C47994 + (C10858 + C10878) * C10559) * C48003 +
           ((C10879 + C10859) * C10559 +
            ((C113 * C2034 - C114 * C2026 - C113 * C2035 + C47890 * C2044) *
                 C4785 +
             C2332 * C47961) *
                C47994) *
               C47977) *
              C1094 +
          (((C11348 + C11340) * C10559 + (C11753 + C11727) * C47994) * C48003 -
           ((C11340 + C11348) * C47994 +
            (C372 * C47961 +
             (C113 * C308 - C114 * C296 - C113 * C309 + C47890 * C326) *
                 C4785) *
                C10559) *
               C48014 -
           (((C113 * C2435 - C114 * C2431 - C113 * C2436 + C47890 * C2440) *
                 C47961 +
             (C113 * C2433 - C114 * C2430 - C113 * C2434 + C47890 * C2439) *
                 C4785) *
                C47994 +
            (C11727 + C11753) * C10559) *
               C47977) *
              C1095 +
          ((((C113 * C310 - C114 * C297 - C113 * C311 + C47890 * C327) * C4785 +
             C373 * C47961) *
                C10559 +
            (C11754 + C11732) * C47994) *
               C48014 -
           ((C11755 + C11756) * C47994 + (C11732 + C11754) * C10559) * C48003 +
           ((C11756 + C11755) * C10559 +
            ((C113 * C7507 - C114 * C7505 - C113 * C7508 + C47890 * C7511) *
                 C4785 +
             (C113 * C7509 - C114 * C7506 - C113 * C7510 + C47890 * C7512) *
                 C47961) *
                C47994) *
               C47977) *
              C47974) *
         C47658) /
            (p * q * std::sqrt(p + q));
    d2ee[73] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C47890 * C136) * C4785 +
             C174 * C47961) *
                C10559 +
            (C10878 + C10858) * C47994) *
               C47943 -
           ((C10859 + C10879) * C47994 + (C10858 + C10878) * C10559) * C47791) *
              C47686 * C671 +
          (((C10864 + C10865) * C10559 + (C10866 + C10867) * C47994) * C47791 -
           ((C10865 + C10864) * C47994 +
            (C175 * C47961 + C174 * C4785) * C10559) *
               C47943) *
              C47686 * C672 +
          (((C175 * C4785 + C176 * C47961) * C10559 +
            (C10868 + C10869) * C47994) *
               C47943 -
           ((C10870 + C10871) * C47994 + (C10869 + C10868) * C10559) * C47791) *
              C47686 * C673 +
          (((C11140 + C11141) * C10559 +
            (C571 * C4785 +
             (C113 * C517 - C114 * C498 - C113 * C518 + C47890 * C528) *
                 C47961) *
                C47994) *
               C47791 -
           ((C11141 + C11140) * C47994 +
            (C177 * C47961 + C176 * C4785) * C10559) *
               C47943) *
              C47686 * C47978)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C122 - C114 * C115 - C113 * C123 + C47890 * C136) *
                  C4785 +
              C174 * C47961) *
                 C10559 +
             (C10878 + C10858) * C47994) *
                C47943 -
            ((C10859 + C10879) * C47994 + (C10858 + C10878) * C10559) *
                C47791) *
               C1094 +
           (((C11348 + C11340) * C10559 + (C11753 + C11727) * C47994) * C47791 -
            ((C11340 + C11348) * C47994 +
             (C372 * C47961 +
              (C113 * C308 - C114 * C296 - C113 * C309 + C47890 * C326) *
                  C4785) *
                 C10559) *
                C47943) *
               C1095 +
           ((((C113 * C310 - C114 * C297 - C113 * C311 + C47890 * C327) *
                  C4785 +
              C373 * C47961) *
                 C10559 +
             (C11754 + C11732) * C47994) *
                C47943 -
            ((C11755 + C11756) * C47994 + (C11732 + C11754) * C10559) *
                C47791) *
               C47974) *
              C47928 +
          ((((C10864 + C10865) * C10559 + (C10866 + C10867) * C47994) * C47791 -
            ((C10865 + C10864) * C47994 +
             (C175 * C47961 + C174 * C4785) * C10559) *
                C47943) *
               C1094 +
           (((C372 * C4785 + C371 * C47961) * C10559 +
             (C11341 + C11342) * C47994) *
                C47943 -
            ((C2211 * C47961 + C2212 * C4785) * C47994 +
             (C11342 + C11341) * C10559) *
                C47791) *
               C1095 +
           (((C12088 + C12089) * C10559 +
             (C11751 * C4785 +
              (C113 * C1327 - C114 * C1310 - C113 * C1328 + C47890 * C1337) *
                  C47961) *
                 C47994) *
                C47791 -
            ((C12089 + C12088) * C47994 +
             (C374 * C47961 + C373 * C4785) * C10559) *
                C47943) *
               C47974) *
              C47669)) /
            (p * q * std::sqrt(p + q));
    d2ee[74] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C47890 * C136) * C4785 +
            C174 * C47961) *
               C10559 +
           ((C113 * C503 - C114 * C491 - C113 * C504 + C47890 * C521) * C4785 +
            C567 * C47961) *
               C47994) *
              C47704 * C47686 * C108 -
          ((C566 * C47961 + C567 * C4785) * C47994 +
           (C175 * C47961 + C174 * C4785) * C10559) *
              C47704 * C47686 * C109 +
          ((C175 * C4785 + C176 * C47961) * C10559 +
           (C566 * C4785 + C570 * C47961) * C47994) *
              C47704 * C47686 * C110 -
          ((C797 * C47961 + C570 * C4785) * C47994 +
           (C177 * C47961 + C176 * C4785) * C10559) *
              C47704 * C47686 * C111 +
          ((C177 * C4785 + C178 * C47961) * C10559 +
           (C797 * C4785 +
            (C113 * C787 - C114 * C786 - C113 * C788 + C47890 * C789) *
                C47961) *
               C47994) *
              C47704 * C47686 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C47890 * C136) * C4785 +
             C174 * C47961) *
                C10559 +
            ((C113 * C503 - C114 * C491 - C113 * C504 + C47890 * C521) * C4785 +
             C567 * C47961) *
                C47994) *
               C47704 * C48013 -
           ((C982 * C47961 +
             (C113 * C948 - C114 * C943 - C113 * C949 + C47890 * C958) *
                 C4785) *
                C47994 +
            (C372 * C47961 +
             (C113 * C308 - C114 * C296 - C113 * C309 + C47890 * C326) *
                 C4785) *
                C10559) *
               C47704 * C48001 +
           (((C113 * C310 - C114 * C297 - C113 * C311 + C47890 * C327) * C4785 +
             C373 * C47961) *
                C10559 +
            ((C113 * C1321 - C114 * C1307 - C113 * C1322 + C47890 * C1334) *
                 C4785 +
             C1624 * C47961) *
                C47994) *
               C47704 * C47974) *
              C291 +
          (((C372 * C4785 + C371 * C47961) * C10559 +
            (C982 * C4785 + C983 * C47961) * C47994) *
               C47704 * C48001 -
           ((C566 * C47961 + C567 * C4785) * C47994 +
            (C175 * C47961 + C174 * C4785) * C10559) *
               C47704 * C48013 -
           ((C1623 * C47961 + C1624 * C4785) * C47994 +
            (C374 * C47961 + C373 * C4785) * C10559) *
               C47704 * C47974) *
              C292 +
          (((C175 * C4785 + C176 * C47961) * C10559 +
            (C566 * C4785 + C570 * C47961) * C47994) *
               C47704 * C48013 -
           ((C984 * C47961 + C983 * C4785) * C47994 +
            (C375 * C47961 + C371 * C4785) * C10559) *
               C47704 * C48001 +
           ((C374 * C4785 + C376 * C47961) * C10559 +
            (C1623 * C4785 +
             (C113 * C1607 - C114 * C1606 - C113 * C1608 + C47890 * C1609) *
                 C47961) *
                C47994) *
               C47704 * C47974) *
              C47968)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C47890 * C136) * C4785 +
             C174 * C47961) *
                C10559 +
            (C10878 + C10858) * C47994) *
               C47704 * C1094 -
           ((C11340 + C11348) * C47994 +
            (C372 * C47961 +
             (C113 * C308 - C114 * C296 - C113 * C309 + C47890 * C326) *
                 C4785) *
                C10559) *
               C47704 * C1095 +
           (((C113 * C310 - C114 * C297 - C113 * C311 + C47890 * C327) * C4785 +
             C373 * C47961) *
                C10559 +
            ((C113 * C1321 - C114 * C1307 - C113 * C1322 + C47890 * C1334) *
                 C4785 +
             C1624 * C47961) *
                C47994) *
               C47704 * C47974) *
              C48010 +
          (((C372 * C4785 + C371 * C47961) * C10559 +
            (C11341 + C11342) * C47994) *
               C47704 * C1095 -
           ((C10865 + C10864) * C47994 +
            (C175 * C47961 + C174 * C4785) * C10559) *
               C47704 * C1094 -
           ((C1623 * C47961 + C1624 * C4785) * C47994 +
            (C374 * C47961 + C373 * C4785) * C10559) *
               C47704 * C47974) *
              C47997 +
          (((C175 * C4785 + C176 * C47961) * C10559 +
            (C10868 + C10869) * C47994) *
               C47704 * C1094 -
           ((C11344 + C11343) * C47994 +
            (C375 * C47961 + C371 * C4785) * C10559) *
               C47704 * C1095 +
           ((C374 * C4785 + C376 * C47961) * C10559 +
            (C1623 * C4785 +
             (C113 * C1607 - C114 * C1606 - C113 * C1608 + C47890 * C1609) *
                 C47961) *
                C47994) *
               C47704 * C47974) *
              C47968)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C47890 * C136) * C4785 +
            C174 * C47961) *
               C10559 +
           (C10878 + C10858) * C47994) *
              C47704 * C1162 -
          ((C11340 + C11348) * C47994 +
           (C372 * C47961 +
            (C113 * C308 - C114 * C296 - C113 * C309 + C47890 * C326) * C4785) *
               C10559) *
              C47704 * C1163 +
          (((C113 * C310 - C114 * C297 - C113 * C311 + C47890 * C327) * C4785 +
            C373 * C47961) *
               C10559 +
           ((C113 * C1321 - C114 * C1307 - C113 * C1322 + C47890 * C1334) *
                C4785 +
            C1624 * C47961) *
               C47994) *
              C47704 * C1164 -
          (((C113 * C1727 - C114 * C1723 - C113 * C1728 + C47890 * C1732) *
                C47961 +
            (C113 * C1725 - C114 * C1722 - C113 * C1726 + C47890 * C1731) *
                C4785) *
               C47994 +
           (C1460 * C47961 +
            (C113 * C1178 - C114 * C1170 - C113 * C1179 + C47890 * C1188) *
                C4785) *
               C10559) *
              C47704 * C1165 +
          (((C113 * C1180 - C114 * C1171 - C113 * C1181 + C47890 * C1189) *
                C4785 +
            (C113 * C1182 - C114 * C1172 - C113 * C1183 + C47890 * C1190) *
                C47961) *
               C10559 +
           ((C113 * C6635 - C114 * C6633 - C113 * C6636 + C47890 * C6639) *
                C4785 +
            (C113 * C6637 - C114 * C6634 - C113 * C6638 + C47890 * C6640) *
                C47961) *
               C47994) *
              C47704 * C1166) *
         C47658) /
            (p * q * std::sqrt(p + q));
    d2ee[75] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C16159 * C122 - C16160 * C115 - C16159 * C123 + C16155 * C136 +
             C16161 * C308 - C16162 * C296 - C16161 * C309 + C47992 * C326) *
                C16157 +
            (C16212 + C16213) * C47961) *
               C47907 * C47704 * C47745 -
           ((C16414 + C16415) * C47961 +
            (C16161 * C310 - C16162 * C297 - C16161 * C311 + C47992 * C327 +
             C16159 * C308 - C16160 * C296 - C16159 * C309 + C16155 * C326) *
                C16157) *
               C47907 * C47704 * C47752 +
           ((C16159 * C310 - C16160 * C297 - C16159 * C311 + C16155 * C327 +
             C16161 * C1178 - C16162 * C1170 - C16161 * C1179 +
             C47992 * C1188) *
                C16157 +
            (C16416 + C16417) * C47961) *
               C47907 * C47704 * C2908) *
              C47663 +
          (((C16415 + C16414) * C16157 + (C16418 + C16419) * C47961) * C47907 *
               C47704 * C47752 -
           ((C16214 + C16215) * C47961 + (C16213 + C16212) * C16157) * C47907 *
               C47704 * C47745 -
           ((C16420 + C16421) * C47961 + (C16417 + C16416) * C16157) * C47907 *
               C47704 * C2908) *
              C47672 +
          (((C16215 + C16214) * C16157 + (C16216 + C16217) * C47961) * C47907 *
               C47704 * C47745 -
           ((C16766 + C16767) * C47961 + (C16419 + C16418) * C16157) * C47907 *
               C47704 * C47752 +
           ((C16421 + C16420) * C16157 +
            (C16159 * C318 - C16160 * C301 - C16159 * C319 + C16155 * C331 +
             C16161 * C1443 - C16162 * C1442 - C16161 * C1444 +
             C47992 * C1445) *
                C47961) *
               C47907 * C47704 * C2908) *
              C2911)) /
        (p * q * std::sqrt(p + q));
    d2ee[76] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C16159 * C122 - C16160 * C115 - C16159 * C123 + C16155 * C136 +
              C16161 * C308 - C16162 * C296 - C16161 * C309 + C47992 * C326) *
                 C16157 +
             (C16212 + C16213) * C47961) *
                C47907 * C47943 -
            ((C16616 + C16617) * C47961 +
             (C16161 * C948 - C16162 * C943 - C16161 * C949 + C47992 * C958 +
              C16159 * C503 - C16160 * C491 - C16159 * C504 + C16155 * C521) *
                 C16157) *
                C47907 * C47791) *
               C47745 +
           (((C16159 * C948 - C16160 * C943 - C16159 * C949 + C16155 * C958 +
              C16161 * C1321 - C16162 * C1307 - C16161 * C1322 +
              C47992 * C1334) *
                 C16157 +
             (C17130 + C17131) * C47961) *
                C47907 * C47791 -
            ((C16414 + C16415) * C47961 +
             (C16161 * C310 - C16162 * C297 - C16161 * C311 + C47992 * C327 +
              C16159 * C308 - C16160 * C296 - C16159 * C309 + C16155 * C326) *
                 C16157) *
                C47907 * C47943) *
               C47752 +
           (((C16159 * C310 - C16160 * C297 - C16159 * C311 + C16155 * C327 +
              C16161 * C1178 - C16162 * C1170 - C16161 * C1179 +
              C47992 * C1188) *
                 C16157 +
             (C16416 + C16417) * C47961) *
                C47907 * C47943 -
            ((C17858 + C17859) * C47961 +
             (C16161 * C1725 - C16162 * C1722 - C16161 * C1726 +
              C47992 * C1731 + C16159 * C1321 - C16160 * C1307 -
              C16159 * C1322 + C16155 * C1334) *
                 C16157) *
                C47907 * C47791) *
               C2908) *
              C2648 +
          ((((C16617 + C16616) * C16157 + (C16620 + C16621) * C47961) * C47907 *
                C47791 -
            ((C16214 + C16215) * C47961 + (C16213 + C16212) * C16157) * C47907 *
                C47943) *
               C47745 +
           (((C16415 + C16414) * C16157 + (C16418 + C16419) * C47961) * C47907 *
                C47943 -
            ((C17132 + C17133) * C47961 + (C17131 + C17130) * C16157) * C47907 *
                C47791) *
               C47752 +
           (((C17859 + C17858) * C16157 +
             (C16159 * C1317 - C16160 * C1305 - C16159 * C1318 +
              C16155 * C1332 + C16161 * C1729 - C16162 * C1724 -
              C16161 * C1730 + C47992 * C1733) *
                 C47961) *
                C47907 * C47791 -
            ((C16420 + C16421) * C47961 + (C16417 + C16416) * C16157) * C47907 *
                C47943) *
               C2908) *
              C47669)) /
        (p * q * std::sqrt(p + q));
    d2ee[77] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C16159 * C122 - C16160 * C115 - C16159 * C123 + C16155 * C136 +
             C16161 * C308 - C16162 * C296 - C16161 * C309 + C47992 * C326) *
                C16157 +
            (C16212 + C16213) * C47961) *
               C47907 * C47704 * C48020 -
           ((C16414 + C16415) * C47961 +
            (C16161 * C310 - C16162 * C297 - C16161 * C311 + C47992 * C327 +
             C16159 * C308 - C16160 * C296 - C16159 * C309 + C16155 * C326) *
                C16157) *
               C47907 * C47704 * C48016 +
           ((C16159 * C310 - C16160 * C297 - C16159 * C311 + C16155 * C327 +
             C16161 * C1178 - C16162 * C1170 - C16161 * C1179 +
             C47992 * C1188) *
                C16157 +
            (C16416 + C16417) * C47961) *
               C47907 * C47704 * C48006 -
           ((C17650 + C17651) * C47961 +
            (C16161 * C1180 - C16162 * C1171 - C16161 * C1181 + C47992 * C1189 +
             C16159 * C1178 - C16160 * C1170 - C16159 * C1179 +
             C16155 * C1188) *
                C16157) *
               C47907 * C47704 * C47984) *
              C2648 +
          (((C16415 + C16414) * C16157 + (C16418 + C16419) * C47961) * C47907 *
               C47704 * C48016 -
           ((C16214 + C16215) * C47961 + (C16213 + C16212) * C16157) * C47907 *
               C47704 * C48020 -
           ((C16420 + C16421) * C47961 + (C16417 + C16416) * C16157) * C47907 *
               C47704 * C48006 +
           ((C17651 + C17650) * C16157 +
            (C16159 * C1174 - C16160 * C1168 - C16159 * C1175 + C16155 * C1186 +
             C16161 * C1184 - C16162 * C1173 - C16161 * C1185 +
             C47992 * C1191) *
                C47961) *
               C47907 * C47704 * C47984) *
              C47669)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C16159 * C122 - C16160 * C115 - C16159 * C123 + C16155 * C136 +
             C16161 * C308 - C16162 * C296 - C16161 * C309 + C47992 * C326) *
                C16157 +
            (C16212 + C16213) * C47961) *
               C47907 * C47704 * C2540 -
           ((C16414 + C16415) * C47961 +
            (C16161 * C310 - C16162 * C297 - C16161 * C311 + C47992 * C327 +
             C16159 * C308 - C16160 * C296 - C16159 * C309 + C16155 * C326) *
                C16157) *
               C47907 * C47704 * C47749) *
              C48019 +
          (((C16415 + C16414) * C16157 + (C16418 + C16419) * C47961) * C47907 *
               C47704 * C47749 -
           ((C16214 + C16215) * C47961 + (C16213 + C16212) * C16157) * C47907 *
               C47704 * C2540) *
              C48012 +
          (((C16215 + C16214) * C16157 + (C16216 + C16217) * C47961) * C47907 *
               C47704 * C2540 -
           ((C16766 + C16767) * C47961 + (C16419 + C16418) * C16157) * C47907 *
               C47704 * C47749) *
              C47999 +
          (((C16767 + C16766) * C16157 +
            (C16159 * C320 - C16160 * C302 - C16159 * C321 + C16155 * C332 +
             C16161 * C322 - C16162 * C303 - C16161 * C323 + C47992 * C333) *
                C47961) *
               C47907 * C47704 * C47749 -
           ((C16218 + C16219) * C47961 + (C16217 + C16216) * C16157) * C47907 *
               C47704 * C2540) *
              C47978)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C16159 * C122 - C16160 * C115 - C16159 * C123 + C16155 * C136 +
              C16161 * C308 - C16162 * C296 - C16161 * C309 + C47992 * C326) *
                 C16157 +
             (C16212 + C16213) * C47961) *
                C47907 * C48014 -
            ((C16616 + C16617) * C47961 +
             (C16161 * C948 - C16162 * C943 - C16161 * C949 + C47992 * C958 +
              C16159 * C503 - C16160 * C491 - C16159 * C504 + C16155 * C521) *
                 C16157) *
                C47907 * C48003 +
            ((C16159 * C505 - C16160 * C492 - C16159 * C506 + C16155 * C522 +
              C16161 * C1315 - C16162 * C1304 - C16161 * C1316 +
              C47992 * C1331) *
                 C16157 +
             (C16618 + C16619) * C47961) *
                C47907 * C47977) *
               C2540 +
           (((C16159 * C948 - C16160 * C943 - C16159 * C949 + C16155 * C958 +
              C16161 * C1321 - C16162 * C1307 - C16161 * C1322 +
              C47992 * C1334) *
                 C16157 +
             (C17130 + C17131) * C47961) *
                C47907 * C48003 -
            ((C16414 + C16415) * C47961 +
             (C16161 * C310 - C16162 * C297 - C16161 * C311 + C47992 * C327 +
              C16159 * C308 - C16160 * C296 - C16159 * C309 + C16155 * C326) *
                 C16157) *
                C47907 * C48014 -
            ((C18570 + C18571) * C47961 +
             (C16161 * C1323 - C16162 * C1308 - C16161 * C1324 +
              C47992 * C1335 + C16159 * C1315 - C16160 * C1304 -
              C16159 * C1316 + C16155 * C1331) *
                 C16157) *
                C47907 * C47977) *
               C47749) *
              C2648 +
          ((((C16617 + C16616) * C16157 + (C16620 + C16621) * C47961) * C47907 *
                C48003 -
            ((C16214 + C16215) * C47961 + (C16213 + C16212) * C16157) * C47907 *
                C48014 -
            ((C16622 + C16623) * C47961 + (C16619 + C16618) * C16157) * C47907 *
                C47977) *
               C2540 +
           (((C16415 + C16414) * C16157 + (C16418 + C16419) * C47961) * C47907 *
                C48014 -
            ((C17132 + C17133) * C47961 + (C17131 + C17130) * C16157) * C47907 *
                C48003 +
            ((C18571 + C18570) * C16157 +
             (C16159 * C1311 - C16160 * C1302 - C16159 * C1312 +
              C16155 * C1329 + C16161 * C1327 - C16162 * C1310 -
              C16161 * C1328 + C47992 * C1337) *
                 C47961) *
                C47907 * C47977) *
               C47749) *
              C47669)) /
            (p * q * std::sqrt(p + q));
    d2ee[78] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C16159 * C122 - C16160 * C115 - C16159 * C123 + C16155 * C136 +
              C16161 * C308 - C16162 * C296 - C16161 * C309 + C47992 * C326) *
                 C16157 +
             (C16212 + C16213) * C47961) *
                C47907 * C47943 -
            ((C16616 + C16617) * C47961 +
             (C16161 * C948 - C16162 * C943 - C16161 * C949 + C47992 * C958 +
              C16159 * C503 - C16160 * C491 - C16159 * C504 + C16155 * C521) *
                 C16157) *
                C47907 * C47791) *
               C2540 +
           (((C16159 * C948 - C16160 * C943 - C16159 * C949 + C16155 * C958 +
              C16161 * C1321 - C16162 * C1307 - C16161 * C1322 +
              C47992 * C1334) *
                 C16157 +
             (C17130 + C17131) * C47961) *
                C47907 * C47791 -
            ((C16414 + C16415) * C47961 +
             (C16161 * C310 - C16162 * C297 - C16161 * C311 + C47992 * C327 +
              C16159 * C308 - C16160 * C296 - C16159 * C309 + C16155 * C326) *
                 C16157) *
                C47907 * C47943) *
               C47749) *
              C47663 +
          ((((C16617 + C16616) * C16157 + (C16620 + C16621) * C47961) * C47907 *
                C47791 -
            ((C16214 + C16215) * C47961 + (C16213 + C16212) * C16157) * C47907 *
                C47943) *
               C2540 +
           (((C16415 + C16414) * C16157 + (C16418 + C16419) * C47961) * C47907 *
                C47943 -
            ((C17132 + C17133) * C47961 + (C17131 + C17130) * C16157) * C47907 *
                C47791) *
               C47749) *
              C47672 +
          ((((C16215 + C16214) * C16157 + (C16216 + C16217) * C47961) * C47907 *
                C47943 -
            ((C16910 + C16911) * C47961 + (C16621 + C16620) * C16157) * C47907 *
                C47791) *
               C2540 +
           (((C17133 + C17132) * C16157 +
             (C16159 * C954 - C16160 * C946 - C16159 * C955 + C16155 * C961 +
              C16161 * C1607 - C16162 * C1606 - C16161 * C1608 +
              C47992 * C1609) *
                 C47961) *
                C47907 * C47791 -
            ((C16766 + C16767) * C47961 + (C16419 + C16418) * C16157) * C47907 *
                C47943) *
               C47749) *
              C2911)) /
        (p * q * std::sqrt(p + q));
    d2ee[79] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C16159 * C122 - C16160 * C115 - C16159 * C123 + C16155 * C136 +
             C16161 * C308 - C16162 * C296 - C16161 * C309 + C47992 * C326) *
                C16157 +
            (C16212 + C16213) * C47961) *
               C47907 * C47704 * C2540 -
           ((C16414 + C16415) * C47961 +
            (C16161 * C310 - C16162 * C297 - C16161 * C311 + C47992 * C327 +
             C16159 * C308 - C16160 * C296 - C16159 * C309 + C16155 * C326) *
                C16157) *
               C47907 * C47704 * C47749) *
              C48019 +
          (((C16415 + C16414) * C16157 + (C16418 + C16419) * C47961) * C47907 *
               C47704 * C47749 -
           ((C16214 + C16215) * C47961 + (C16213 + C16212) * C16157) * C47907 *
               C47704 * C2540) *
              C48012 +
          (((C16215 + C16214) * C16157 + (C16216 + C16217) * C47961) * C47907 *
               C47704 * C2540 -
           ((C16766 + C16767) * C47961 + (C16419 + C16418) * C16157) * C47907 *
               C47704 * C47749) *
              C47999 +
          (((C16767 + C16766) * C16157 +
            (C16159 * C320 - C16160 * C302 - C16159 * C321 + C16155 * C332 +
             C16161 * C322 - C16162 * C303 - C16161 * C323 + C47992 * C333) *
                C47961) *
               C47907 * C47704 * C47749 -
           ((C16218 + C16219) * C47961 + (C16217 + C16216) * C16157) * C47907 *
               C47704 * C2540) *
              C47978)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C16159 * C122 - C16160 * C115 - C16159 * C123 + C16155 * C136 +
             C16161 * C308 - C16162 * C296 - C16161 * C309 + C47992 * C326) *
                C16157 +
            (C16212 + C16213) * C47961) *
               C47907 * C47704 * C48020 -
           ((C16414 + C16415) * C47961 +
            (C16161 * C310 - C16162 * C297 - C16161 * C311 + C47992 * C327 +
             C16159 * C308 - C16160 * C296 - C16159 * C309 + C16155 * C326) *
                C16157) *
               C47907 * C47704 * C48016 +
           ((C16159 * C310 - C16160 * C297 - C16159 * C311 + C16155 * C327 +
             C16161 * C1178 - C16162 * C1170 - C16161 * C1179 +
             C47992 * C1188) *
                C16157 +
            (C16416 + C16417) * C47961) *
               C47907 * C47704 * C48006 -
           ((C17650 + C17651) * C47961 +
            (C16161 * C1180 - C16162 * C1171 - C16161 * C1181 + C47992 * C1189 +
             C16159 * C1178 - C16160 * C1170 - C16159 * C1179 +
             C16155 * C1188) *
                C16157) *
               C47907 * C47704 * C47984) *
              C2648 +
          (((C16415 + C16414) * C16157 + (C16418 + C16419) * C47961) * C47907 *
               C47704 * C48016 -
           ((C16214 + C16215) * C47961 + (C16213 + C16212) * C16157) * C47907 *
               C47704 * C48020 -
           ((C16420 + C16421) * C47961 + (C16417 + C16416) * C16157) * C47907 *
               C47704 * C48006 +
           ((C17651 + C17650) * C16157 +
            (C16159 * C1174 - C16160 * C1168 - C16159 * C1175 + C16155 * C1186 +
             C16161 * C1184 - C16162 * C1173 - C16161 * C1185 +
             C47992 * C1191) *
                C47961) *
               C47907 * C47704 * C47984) *
              C47669)) /
            (p * q * std::sqrt(p + q));
    d2ee[80] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C16159 * C122 - C16160 * C115 - C16159 * C123 + C16155 * C136 +
              C16161 * C308 - C16162 * C296 - C16161 * C309 + C47992 * C326) *
                 C16157 +
             (C16212 + C16213) * C47961) *
                C47907 * C3302 -
            ((C16616 + C16617) * C47961 +
             (C16161 * C948 - C16162 * C943 - C16161 * C949 + C47992 * C958 +
              C16159 * C503 - C16160 * C491 - C16159 * C504 + C16155 * C521) *
                 C16157) *
                C47907 * C47791) *
               C47745 +
           (((C16159 * C948 - C16160 * C943 - C16159 * C949 + C16155 * C958 +
              C16161 * C1321 - C16162 * C1307 - C16161 * C1322 +
              C47992 * C1334) *
                 C16157 +
             (C17130 + C17131) * C47961) *
                C47907 * C47791 -
            ((C16414 + C16415) * C47961 +
             (C16161 * C310 - C16162 * C297 - C16161 * C311 + C47992 * C327 +
              C16159 * C308 - C16160 * C296 - C16159 * C309 + C16155 * C326) *
                 C16157) *
                C47907 * C3302) *
               C47752 +
           (((C16159 * C310 - C16160 * C297 - C16159 * C311 + C16155 * C327 +
              C16161 * C1178 - C16162 * C1170 - C16161 * C1179 +
              C47992 * C1188) *
                 C16157 +
             (C16416 + C16417) * C47961) *
                C47907 * C3302 -
            ((C17858 + C17859) * C47961 +
             (C16161 * C1725 - C16162 * C1722 - C16161 * C1726 +
              C47992 * C1731 + C16159 * C1321 - C16160 * C1307 -
              C16159 * C1322 + C16155 * C1334) *
                 C16157) *
                C47907 * C47791) *
               C2908) *
              C47928 +
          ((((C16617 + C16616) * C16157 + (C16620 + C16621) * C47961) * C47907 *
                C47791 -
            ((C16214 + C16215) * C47961 + (C16213 + C16212) * C16157) * C47907 *
                C3302) *
               C47745 +
           (((C16415 + C16414) * C16157 + (C16418 + C16419) * C47961) * C47907 *
                C3302 -
            ((C17132 + C17133) * C47961 + (C17131 + C17130) * C16157) * C47907 *
                C47791) *
               C47752 +
           (((C17859 + C17858) * C16157 +
             (C16159 * C1317 - C16160 * C1305 - C16159 * C1318 +
              C16155 * C1332 + C16161 * C1729 - C16162 * C1724 -
              C16161 * C1730 + C47992 * C1733) *
                 C47961) *
                C47907 * C47791 -
            ((C16420 + C16421) * C47961 + (C16417 + C16416) * C16157) * C47907 *
                C3302) *
               C2908) *
              C47669)) /
        (p * q * std::sqrt(p + q));
    d2ee[81] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C16159 * C122 - C16160 * C115 - C16159 * C123 + C16155 * C136 +
             C16161 * C308 - C16162 * C296 - C16161 * C309 + C47992 * C326) *
                C16157 +
            (C16212 + C16213) * C47961) *
               C47907 * C47787 -
           ((C16616 + C16617) * C47961 +
            (C16161 * C948 - C16162 * C943 - C16161 * C949 + C47992 * C958 +
             C16159 * C503 - C16160 * C491 - C16159 * C504 + C16155 * C521) *
                C16157) *
               C47907 * C47794 +
           ((C16159 * C505 - C16160 * C492 - C16159 * C506 + C16155 * C522 +
             C16161 * C1315 - C16162 * C1304 - C16161 * C1316 +
             C47992 * C1331) *
                C16157 +
            (C16618 + C16619) * C47961) *
               C47907 * C3810) *
              C47745 +
          (((C16159 * C948 - C16160 * C943 - C16159 * C949 + C16155 * C958 +
             C16161 * C1321 - C16162 * C1307 - C16161 * C1322 +
             C47992 * C1334) *
                C16157 +
            (C17130 + C17131) * C47961) *
               C47907 * C47794 -
           ((C16414 + C16415) * C47961 +
            (C16161 * C310 - C16162 * C297 - C16161 * C311 + C47992 * C327 +
             C16159 * C308 - C16160 * C296 - C16159 * C309 + C16155 * C326) *
                C16157) *
               C47907 * C47787 -
           ((C18570 + C18571) * C47961 +
            (C16161 * C1323 - C16162 * C1308 - C16161 * C1324 + C47992 * C1335 +
             C16159 * C1315 - C16160 * C1304 - C16159 * C1316 +
             C16155 * C1331) *
                C16157) *
               C47907 * C3810) *
              C47752 +
          (((C16159 * C310 - C16160 * C297 - C16159 * C311 + C16155 * C327 +
             C16161 * C1178 - C16162 * C1170 - C16161 * C1179 +
             C47992 * C1188) *
                C16157 +
            (C16416 + C16417) * C47961) *
               C47907 * C47787 -
           ((C17858 + C17859) * C47961 +
            (C16161 * C1725 - C16162 * C1722 - C16161 * C1726 + C47992 * C1731 +
             C16159 * C1321 - C16160 * C1307 - C16159 * C1322 +
             C16155 * C1334) *
                C16157) *
               C47907 * C47794 +
           ((C16159 * C1323 - C16160 * C1308 - C16159 * C1324 + C16155 * C1335 +
             C16161 * C6145 - C16162 * C6143 - C16161 * C6146 +
             C47992 * C6149) *
                C16157 +
            (C16159 * C1325 - C16160 * C1309 - C16159 * C1326 + C16155 * C1336 +
             C16161 * C6147 - C16162 * C6144 - C16161 * C6148 +
             C47992 * C6150) *
                C47961) *
               C47907 * C3810) *
              C2908) *
         C47658) /
        (p * q * std::sqrt(p + q));
    d2ee[82] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C16159 * C122 - C16160 * C115 - C16159 * C123 + C16155 * C136 +
             C16161 * C308 - C16162 * C296 - C16161 * C309 + C47992 * C326) *
                C16157 +
            (C16212 + C16213) * C47961) *
               C47907 * C3302 -
           ((C16616 + C16617) * C47961 +
            (C16161 * C948 - C16162 * C943 - C16161 * C949 + C47992 * C958 +
             C16159 * C503 - C16160 * C491 - C16159 * C504 + C16155 * C521) *
                C16157) *
               C47907 * C47791) *
              C48020 +
          (((C16159 * C948 - C16160 * C943 - C16159 * C949 + C16155 * C958 +
             C16161 * C1321 - C16162 * C1307 - C16161 * C1322 +
             C47992 * C1334) *
                C16157 +
            (C17130 + C17131) * C47961) *
               C47907 * C47791 -
           ((C16414 + C16415) * C47961 +
            (C16161 * C310 - C16162 * C297 - C16161 * C311 + C47992 * C327 +
             C16159 * C308 - C16160 * C296 - C16159 * C309 + C16155 * C326) *
                C16157) *
               C47907 * C3302) *
              C48016 +
          (((C16159 * C310 - C16160 * C297 - C16159 * C311 + C16155 * C327 +
             C16161 * C1178 - C16162 * C1170 - C16161 * C1179 +
             C47992 * C1188) *
                C16157 +
            (C16416 + C16417) * C47961) *
               C47907 * C3302 -
           ((C17858 + C17859) * C47961 +
            (C16161 * C1725 - C16162 * C1722 - C16161 * C1726 + C47992 * C1731 +
             C16159 * C1321 - C16160 * C1307 - C16159 * C1322 +
             C16155 * C1334) *
                C16157) *
               C47907 * C47791) *
              C48006 +
          (((C16159 * C1725 - C16160 * C1722 - C16159 * C1726 + C16155 * C1731 +
             C16161 * C6635 - C16162 * C6633 - C16161 * C6636 +
             C47992 * C6639) *
                C16157 +
            (C16159 * C1727 - C16160 * C1723 - C16159 * C1728 + C16155 * C1732 +
             C16161 * C6637 - C16162 * C6634 - C16161 * C6638 +
             C47992 * C6640) *
                C47961) *
               C47907 * C47791 -
           ((C17650 + C17651) * C47961 +
            (C16161 * C1180 - C16162 * C1171 - C16161 * C1181 + C47992 * C1189 +
             C16159 * C1178 - C16160 * C1170 - C16159 * C1179 +
             C16155 * C1188) *
                C16157) *
               C47907 * C3302) *
              C47984) *
         C47658) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C16159 * C122 - C16160 * C115 - C16159 * C123 + C16155 * C136 +
              C16161 * C308 - C16162 * C296 - C16161 * C309 + C47992 * C326) *
                 C16157 +
             (C16212 + C16213) * C47961) *
                C47907 * C3302 -
            ((C16616 + C16617) * C47961 +
             (C16161 * C948 - C16162 * C943 - C16161 * C949 + C47992 * C958 +
              C16159 * C503 - C16160 * C491 - C16159 * C504 + C16155 * C521) *
                 C16157) *
                C47907 * C47791) *
               C2540 +
           (((C16159 * C948 - C16160 * C943 - C16159 * C949 + C16155 * C958 +
              C16161 * C1321 - C16162 * C1307 - C16161 * C1322 +
              C47992 * C1334) *
                 C16157 +
             (C17130 + C17131) * C47961) *
                C47907 * C47791 -
            ((C16414 + C16415) * C47961 +
             (C16161 * C310 - C16162 * C297 - C16161 * C311 + C47992 * C327 +
              C16159 * C308 - C16160 * C296 - C16159 * C309 + C16155 * C326) *
                 C16157) *
                C47907 * C3302) *
               C47749) *
              C48010 +
          ((((C16617 + C16616) * C16157 + (C16620 + C16621) * C47961) * C47907 *
                C47791 -
            ((C16214 + C16215) * C47961 + (C16213 + C16212) * C16157) * C47907 *
                C3302) *
               C2540 +
           (((C16415 + C16414) * C16157 + (C16418 + C16419) * C47961) * C47907 *
                C3302 -
            ((C17132 + C17133) * C47961 + (C17131 + C17130) * C16157) * C47907 *
                C47791) *
               C47749) *
              C47997 +
          ((((C16215 + C16214) * C16157 + (C16216 + C16217) * C47961) * C47907 *
                C3302 -
            ((C16910 + C16911) * C47961 + (C16621 + C16620) * C16157) * C47907 *
                C47791) *
               C2540 +
           (((C17133 + C17132) * C16157 +
             (C16159 * C954 - C16160 * C946 - C16159 * C955 + C16155 * C961 +
              C16161 * C1607 - C16162 * C1606 - C16161 * C1608 +
              C47992 * C1609) *
                 C47961) *
                C47907 * C47791 -
            ((C16766 + C16767) * C47961 + (C16419 + C16418) * C16157) * C47907 *
                C3302) *
               C47749) *
              C47968)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C16159 * C122 - C16160 * C115 - C16159 * C123 + C16155 * C136 +
             C16161 * C308 - C16162 * C296 - C16161 * C309 + C47992 * C326) *
                C16157 +
            (C16212 + C16213) * C47961) *
               C47907 * C48021 -
           ((C16616 + C16617) * C47961 +
            (C16161 * C948 - C16162 * C943 - C16161 * C949 + C47992 * C958 +
             C16159 * C503 - C16160 * C491 - C16159 * C504 + C16155 * C521) *
                C16157) *
               C47907 * C48018 +
           ((C16159 * C505 - C16160 * C492 - C16159 * C506 + C16155 * C522 +
             C16161 * C1315 - C16162 * C1304 - C16161 * C1316 +
             C47992 * C1331) *
                C16157 +
            (C16618 + C16619) * C47961) *
               C47907 * C48009 -
           ((C18714 + C18715) * C47961 +
            (C16161 * C2433 - C16162 * C2430 - C16161 * C2434 + C47992 * C2439 +
             C16159 * C2034 - C16160 * C2026 - C16159 * C2035 +
             C16155 * C2044) *
                C16157) *
               C47907 * C47990) *
              C2540 +
          (((C16159 * C948 - C16160 * C943 - C16159 * C949 + C16155 * C958 +
             C16161 * C1321 - C16162 * C1307 - C16161 * C1322 +
             C47992 * C1334) *
                C16157 +
            (C17130 + C17131) * C47961) *
               C47907 * C48018 -
           ((C16414 + C16415) * C47961 +
            (C16161 * C310 - C16162 * C297 - C16161 * C311 + C47992 * C327 +
             C16159 * C308 - C16160 * C296 - C16159 * C309 + C16155 * C326) *
                C16157) *
               C47907 * C48021 -
           ((C18570 + C18571) * C47961 +
            (C16161 * C1323 - C16162 * C1308 - C16161 * C1324 + C47992 * C1335 +
             C16159 * C1315 - C16160 * C1304 - C16159 * C1316 +
             C16155 * C1331) *
                C16157) *
               C47907 * C48009 +
           ((C16159 * C2433 - C16160 * C2430 - C16159 * C2434 + C16155 * C2439 +
             C16161 * C7507 - C16162 * C7505 - C16161 * C7508 +
             C47992 * C7511) *
                C16157 +
            (C16159 * C2435 - C16160 * C2431 - C16159 * C2436 + C16155 * C2440 +
             C16161 * C7509 - C16162 * C7506 - C16161 * C7510 +
             C47992 * C7512) *
                C47961) *
               C47907 * C47990) *
              C47749) *
         C47658) /
            (p * q * std::sqrt(p + q));
    d2ee[83] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C16159 * C122 - C16160 * C115 - C16159 * C123 + C16155 * C136 +
              C16161 * C308 - C16162 * C296 - C16161 * C309 + C47992 * C326) *
                 C16157 +
             (C16212 + C16213) * C47961) *
                C47907 * C47787 -
            ((C16616 + C16617) * C47961 +
             (C16161 * C948 - C16162 * C943 - C16161 * C949 + C47992 * C958 +
              C16159 * C503 - C16160 * C491 - C16159 * C504 + C16155 * C521) *
                 C16157) *
                C47907 * C47794 +
            ((C16159 * C505 - C16160 * C492 - C16159 * C506 + C16155 * C522 +
              C16161 * C1315 - C16162 * C1304 - C16161 * C1316 +
              C47992 * C1331) *
                 C16157 +
             (C16618 + C16619) * C47961) *
                C47907 * C3810) *
               C2540 +
           (((C16159 * C948 - C16160 * C943 - C16159 * C949 + C16155 * C958 +
              C16161 * C1321 - C16162 * C1307 - C16161 * C1322 +
              C47992 * C1334) *
                 C16157 +
             (C17130 + C17131) * C47961) *
                C47907 * C47794 -
            ((C16414 + C16415) * C47961 +
             (C16161 * C310 - C16162 * C297 - C16161 * C311 + C47992 * C327 +
              C16159 * C308 - C16160 * C296 - C16159 * C309 + C16155 * C326) *
                 C16157) *
                C47907 * C47787 -
            ((C18570 + C18571) * C47961 +
             (C16161 * C1323 - C16162 * C1308 - C16161 * C1324 +
              C47992 * C1335 + C16159 * C1315 - C16160 * C1304 -
              C16159 * C1316 + C16155 * C1331) *
                 C16157) *
                C47907 * C3810) *
               C47749) *
              C47928 +
          ((((C16617 + C16616) * C16157 + (C16620 + C16621) * C47961) * C47907 *
                C47794 -
            ((C16214 + C16215) * C47961 + (C16213 + C16212) * C16157) * C47907 *
                C47787 -
            ((C16622 + C16623) * C47961 + (C16619 + C16618) * C16157) * C47907 *
                C3810) *
               C2540 +
           (((C16415 + C16414) * C16157 + (C16418 + C16419) * C47961) * C47907 *
                C47787 -
            ((C17132 + C17133) * C47961 + (C17131 + C17130) * C16157) * C47907 *
                C47794 +
            ((C18571 + C18570) * C16157 +
             (C16159 * C1311 - C16160 * C1302 - C16159 * C1312 +
              C16155 * C1329 + C16161 * C1327 - C16162 * C1310 -
              C16161 * C1328 + C47992 * C1337) *
                 C47961) *
                C47907 * C3810) *
               C47749) *
              C47669)) /
        (p * q * std::sqrt(p + q));
    d2ee[84] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C16159 * C122 - C16160 * C115 - C16159 * C123 + C16155 * C136 +
              C16161 * C308 - C16162 * C296 - C16161 * C309 + C47992 * C326) *
                 C16157 +
             (C16212 + C16213) * C47961) *
                C47907 * C3302 -
            ((C16616 + C16617) * C47961 +
             (C16161 * C948 - C16162 * C943 - C16161 * C949 + C47992 * C958 +
              C16159 * C503 - C16160 * C491 - C16159 * C504 + C16155 * C521) *
                 C16157) *
                C47907 * C47791) *
               C2540 +
           (((C16159 * C948 - C16160 * C943 - C16159 * C949 + C16155 * C958 +
              C16161 * C1321 - C16162 * C1307 - C16161 * C1322 +
              C47992 * C1334) *
                 C16157 +
             (C17130 + C17131) * C47961) *
                C47907 * C47791 -
            ((C16414 + C16415) * C47961 +
             (C16161 * C310 - C16162 * C297 - C16161 * C311 + C47992 * C327 +
              C16159 * C308 - C16160 * C296 - C16159 * C309 + C16155 * C326) *
                 C16157) *
                C47907 * C3302) *
               C47749) *
              C48010 +
          ((((C16617 + C16616) * C16157 + (C16620 + C16621) * C47961) * C47907 *
                C47791 -
            ((C16214 + C16215) * C47961 + (C16213 + C16212) * C16157) * C47907 *
                C3302) *
               C2540 +
           (((C16415 + C16414) * C16157 + (C16418 + C16419) * C47961) * C47907 *
                C3302 -
            ((C17132 + C17133) * C47961 + (C17131 + C17130) * C16157) * C47907 *
                C47791) *
               C47749) *
              C47997 +
          ((((C16215 + C16214) * C16157 + (C16216 + C16217) * C47961) * C47907 *
                C3302 -
            ((C16910 + C16911) * C47961 + (C16621 + C16620) * C16157) * C47907 *
                C47791) *
               C2540 +
           (((C17133 + C17132) * C16157 +
             (C16159 * C954 - C16160 * C946 - C16159 * C955 + C16155 * C961 +
              C16161 * C1607 - C16162 * C1606 - C16161 * C1608 +
              C47992 * C1609) *
                 C47961) *
                C47907 * C47791 -
            ((C16766 + C16767) * C47961 + (C16419 + C16418) * C16157) * C47907 *
                C3302) *
               C47749) *
              C47968)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C16159 * C122 - C16160 * C115 - C16159 * C123 + C16155 * C136 +
             C16161 * C308 - C16162 * C296 - C16161 * C309 + C47992 * C326) *
                C16157 +
            (C16212 + C16213) * C47961) *
               C47907 * C3302 -
           ((C16616 + C16617) * C47961 +
            (C16161 * C948 - C16162 * C943 - C16161 * C949 + C47992 * C958 +
             C16159 * C503 - C16160 * C491 - C16159 * C504 + C16155 * C521) *
                C16157) *
               C47907 * C47791) *
              C48020 +
          (((C16159 * C948 - C16160 * C943 - C16159 * C949 + C16155 * C958 +
             C16161 * C1321 - C16162 * C1307 - C16161 * C1322 +
             C47992 * C1334) *
                C16157 +
            (C17130 + C17131) * C47961) *
               C47907 * C47791 -
           ((C16414 + C16415) * C47961 +
            (C16161 * C310 - C16162 * C297 - C16161 * C311 + C47992 * C327 +
             C16159 * C308 - C16160 * C296 - C16159 * C309 + C16155 * C326) *
                C16157) *
               C47907 * C3302) *
              C48016 +
          (((C16159 * C310 - C16160 * C297 - C16159 * C311 + C16155 * C327 +
             C16161 * C1178 - C16162 * C1170 - C16161 * C1179 +
             C47992 * C1188) *
                C16157 +
            (C16416 + C16417) * C47961) *
               C47907 * C3302 -
           ((C17858 + C17859) * C47961 +
            (C16161 * C1725 - C16162 * C1722 - C16161 * C1726 + C47992 * C1731 +
             C16159 * C1321 - C16160 * C1307 - C16159 * C1322 +
             C16155 * C1334) *
                C16157) *
               C47907 * C47791) *
              C48006 +
          (((C16159 * C1725 - C16160 * C1722 - C16159 * C1726 + C16155 * C1731 +
             C16161 * C6635 - C16162 * C6633 - C16161 * C6636 +
             C47992 * C6639) *
                C16157 +
            (C16159 * C1727 - C16160 * C1723 - C16159 * C1728 + C16155 * C1732 +
             C16161 * C6637 - C16162 * C6634 - C16161 * C6638 +
             C47992 * C6640) *
                C47961) *
               C47907 * C47791 -
           ((C17650 + C17651) * C47961 +
            (C16161 * C1180 - C16162 * C1171 - C16161 * C1181 + C47992 * C1189 +
             C16159 * C1178 - C16160 * C1170 - C16159 * C1179 +
             C16155 * C1188) *
                C16157) *
               C47907 * C3302) *
              C47984) *
         C47658) /
            (p * q * std::sqrt(p + q));
    d2ee[85] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C16159 * C122 - C16160 * C115 - C16159 * C123 + C16155 * C136 +
             C16161 * C308 - C16162 * C296 - C16161 * C309 + C47992 * C326) *
                C16157 +
            (C16212 + C16213) * C47961) *
               C47907 * C47704 * C1436 -
           ((C16414 + C16415) * C47961 +
            (C16161 * C310 - C16162 * C297 - C16161 * C311 + C47992 * C327 +
             C16159 * C308 - C16160 * C296 - C16159 * C309 + C16155 * C326) *
                C16157) *
               C47907 * C47704 * C1437 +
           ((C16159 * C310 - C16160 * C297 - C16159 * C311 + C16155 * C327 +
             C16161 * C1178 - C16162 * C1170 - C16161 * C1179 +
             C47992 * C1188) *
                C16157 +
            (C16416 + C16417) * C47961) *
               C47907 * C47704 * C1438 -
           ((C17650 + C17651) * C47961 +
            (C16161 * C1180 - C16162 * C1171 - C16161 * C1181 + C47992 * C1189 +
             C16159 * C1178 - C16160 * C1170 - C16159 * C1179 +
             C16155 * C1188) *
                C16157) *
               C47907 * C47704 * C47984) *
              C47928 +
          (((C16415 + C16414) * C16157 + (C16418 + C16419) * C47961) * C47907 *
               C47704 * C1437 -
           ((C16214 + C16215) * C47961 + (C16213 + C16212) * C16157) * C47907 *
               C47704 * C1436 -
           ((C16420 + C16421) * C47961 + (C16417 + C16416) * C16157) * C47907 *
               C47704 * C1438 +
           ((C17651 + C17650) * C16157 +
            (C16159 * C1174 - C16160 * C1168 - C16159 * C1175 + C16155 * C1186 +
             C16161 * C1184 - C16162 * C1173 - C16161 * C1185 +
             C47992 * C1191) *
                C47961) *
               C47907 * C47704 * C47984) *
              C47669)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C16159 * C122 - C16160 * C115 - C16159 * C123 + C16155 * C136 +
             C16161 * C308 - C16162 * C296 - C16161 * C309 + C47992 * C326) *
                C16157 +
            (C16212 + C16213) * C47961) *
               C47907 * C47704 * C47942 -
           ((C16414 + C16415) * C47961 +
            (C16161 * C310 - C16162 * C297 - C16161 * C311 + C47992 * C327 +
             C16159 * C308 - C16160 * C296 - C16159 * C309 + C16155 * C326) *
                C16157) *
               C47907 * C47704 * C47749) *
              C671 +
          (((C16415 + C16414) * C16157 + (C16418 + C16419) * C47961) * C47907 *
               C47704 * C47749 -
           ((C16214 + C16215) * C47961 + (C16213 + C16212) * C16157) * C47907 *
               C47704 * C47942) *
              C672 +
          (((C16215 + C16214) * C16157 + (C16216 + C16217) * C47961) * C47907 *
               C47704 * C47942 -
           ((C16766 + C16767) * C47961 + (C16419 + C16418) * C16157) * C47907 *
               C47704 * C47749) *
              C673 +
          (((C16767 + C16766) * C16157 +
            (C16159 * C320 - C16160 * C302 - C16159 * C321 + C16155 * C332 +
             C16161 * C322 - C16162 * C303 - C16161 * C323 + C47992 * C333) *
                C47961) *
               C47907 * C47704 * C47749 -
           ((C16218 + C16219) * C47961 + (C16217 + C16216) * C16157) * C47907 *
               C47704 * C47942) *
              C47978)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C16159 * C122 - C16160 * C115 - C16159 * C123 + C16155 * C136 +
              C16161 * C308 - C16162 * C296 - C16161 * C309 + C47992 * C326) *
                 C16157 +
             (C16212 + C16213) * C47961) *
                C47907 * C1844 -
            ((C16616 + C16617) * C47961 +
             (C16161 * C948 - C16162 * C943 - C16161 * C949 + C47992 * C958 +
              C16159 * C503 - C16160 * C491 - C16159 * C504 + C16155 * C521) *
                 C16157) *
                C47907 * C1845 +
            ((C16159 * C505 - C16160 * C492 - C16159 * C506 + C16155 * C522 +
              C16161 * C1315 - C16162 * C1304 - C16161 * C1316 +
              C47992 * C1331) *
                 C16157 +
             (C16618 + C16619) * C47961) *
                C47907 * C47977) *
               C47942 +
           (((C16159 * C948 - C16160 * C943 - C16159 * C949 + C16155 * C958 +
              C16161 * C1321 - C16162 * C1307 - C16161 * C1322 +
              C47992 * C1334) *
                 C16157 +
             (C17130 + C17131) * C47961) *
                C47907 * C1845 -
            ((C16414 + C16415) * C47961 +
             (C16161 * C310 - C16162 * C297 - C16161 * C311 + C47992 * C327 +
              C16159 * C308 - C16160 * C296 - C16159 * C309 + C16155 * C326) *
                 C16157) *
                C47907 * C1844 -
            ((C18570 + C18571) * C47961 +
             (C16161 * C1323 - C16162 * C1308 - C16161 * C1324 +
              C47992 * C1335 + C16159 * C1315 - C16160 * C1304 -
              C16159 * C1316 + C16155 * C1331) *
                 C16157) *
                C47907 * C47977) *
               C47749) *
              C47928 +
          ((((C16617 + C16616) * C16157 + (C16620 + C16621) * C47961) * C47907 *
                C1845 -
            ((C16214 + C16215) * C47961 + (C16213 + C16212) * C16157) * C47907 *
                C1844 -
            ((C16622 + C16623) * C47961 + (C16619 + C16618) * C16157) * C47907 *
                C47977) *
               C47942 +
           (((C16415 + C16414) * C16157 + (C16418 + C16419) * C47961) * C47907 *
                C1844 -
            ((C17132 + C17133) * C47961 + (C17131 + C17130) * C16157) * C47907 *
                C1845 +
            ((C18571 + C18570) * C16157 +
             (C16159 * C1311 - C16160 * C1302 - C16159 * C1312 +
              C16155 * C1329 + C16161 * C1327 - C16162 * C1310 -
              C16161 * C1328 + C47992 * C1337) *
                 C47961) *
                C47907 * C47977) *
               C47749) *
              C47669)) /
            (p * q * std::sqrt(p + q));
    d2ee[86] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C16159 * C122 - C16160 * C115 - C16159 * C123 + C16155 * C136 +
             C16161 * C308 - C16162 * C296 - C16161 * C309 + C47992 * C326) *
                C16157 +
            (C16212 + C16213) * C47961) *
               C47907 * C47943 -
           ((C16616 + C16617) * C47961 +
            (C16161 * C948 - C16162 * C943 - C16161 * C949 + C47992 * C958 +
             C16159 * C503 - C16160 * C491 - C16159 * C504 + C16155 * C521) *
                C16157) *
               C47907 * C47791) *
              C1436 +
          (((C16159 * C948 - C16160 * C943 - C16159 * C949 + C16155 * C958 +
             C16161 * C1321 - C16162 * C1307 - C16161 * C1322 +
             C47992 * C1334) *
                C16157 +
            (C17130 + C17131) * C47961) *
               C47907 * C47791 -
           ((C16414 + C16415) * C47961 +
            (C16161 * C310 - C16162 * C297 - C16161 * C311 + C47992 * C327 +
             C16159 * C308 - C16160 * C296 - C16159 * C309 + C16155 * C326) *
                C16157) *
               C47907 * C47943) *
              C1437 +
          (((C16159 * C310 - C16160 * C297 - C16159 * C311 + C16155 * C327 +
             C16161 * C1178 - C16162 * C1170 - C16161 * C1179 +
             C47992 * C1188) *
                C16157 +
            (C16416 + C16417) * C47961) *
               C47907 * C47943 -
           ((C17858 + C17859) * C47961 +
            (C16161 * C1725 - C16162 * C1722 - C16161 * C1726 + C47992 * C1731 +
             C16159 * C1321 - C16160 * C1307 - C16159 * C1322 +
             C16155 * C1334) *
                C16157) *
               C47907 * C47791) *
              C1438 +
          (((C16159 * C1725 - C16160 * C1722 - C16159 * C1726 + C16155 * C1731 +
             C16161 * C6635 - C16162 * C6633 - C16161 * C6636 +
             C47992 * C6639) *
                C16157 +
            (C16159 * C1727 - C16160 * C1723 - C16159 * C1728 + C16155 * C1732 +
             C16161 * C6637 - C16162 * C6634 - C16161 * C6638 +
             C47992 * C6640) *
                C47961) *
               C47907 * C47791 -
           ((C17650 + C17651) * C47961 +
            (C16161 * C1180 - C16162 * C1171 - C16161 * C1181 + C47992 * C1189 +
             C16159 * C1178 - C16160 * C1170 - C16159 * C1179 +
             C16155 * C1188) *
                C16157) *
               C47907 * C47943) *
              C47984) *
         C47658) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C16159 * C122 - C16160 * C115 - C16159 * C123 + C16155 * C136 +
              C16161 * C308 - C16162 * C296 - C16161 * C309 + C47992 * C326) *
                 C16157 +
             (C16212 + C16213) * C47961) *
                C47907 * C47943 -
            ((C16616 + C16617) * C47961 +
             (C16161 * C948 - C16162 * C943 - C16161 * C949 + C47992 * C958 +
              C16159 * C503 - C16160 * C491 - C16159 * C504 + C16155 * C521) *
                 C16157) *
                C47907 * C47791) *
               C47942 +
           (((C16159 * C948 - C16160 * C943 - C16159 * C949 + C16155 * C958 +
              C16161 * C1321 - C16162 * C1307 - C16161 * C1322 +
              C47992 * C1334) *
                 C16157 +
             (C17130 + C17131) * C47961) *
                C47907 * C47791 -
            ((C16414 + C16415) * C47961 +
             (C16161 * C310 - C16162 * C297 - C16161 * C311 + C47992 * C327 +
              C16159 * C308 - C16160 * C296 - C16159 * C309 + C16155 * C326) *
                 C16157) *
                C47907 * C47943) *
               C47749) *
              C291 +
          ((((C16617 + C16616) * C16157 + (C16620 + C16621) * C47961) * C47907 *
                C47791 -
            ((C16214 + C16215) * C47961 + (C16213 + C16212) * C16157) * C47907 *
                C47943) *
               C47942 +
           (((C16415 + C16414) * C16157 + (C16418 + C16419) * C47961) * C47907 *
                C47943 -
            ((C17132 + C17133) * C47961 + (C17131 + C17130) * C16157) * C47907 *
                C47791) *
               C47749) *
              C292 +
          ((((C16215 + C16214) * C16157 + (C16216 + C16217) * C47961) * C47907 *
                C47943 -
            ((C16910 + C16911) * C47961 + (C16621 + C16620) * C16157) * C47907 *
                C47791) *
               C47942 +
           (((C17133 + C17132) * C16157 +
             (C16159 * C954 - C16160 * C946 - C16159 * C955 + C16155 * C961 +
              C16161 * C1607 - C16162 * C1606 - C16161 * C1608 +
              C47992 * C1609) *
                 C47961) *
                C47907 * C47791 -
            ((C16766 + C16767) * C47961 + (C16419 + C16418) * C16157) * C47907 *
                C47943) *
               C47749) *
              C47968)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C16159 * C122 - C16160 * C115 - C16159 * C123 + C16155 * C136 +
             C16161 * C308 - C16162 * C296 - C16161 * C309 + C47992 * C326) *
                C16157 +
            (C16212 + C16213) * C47961) *
               C47907 * C2310 -
           ((C16616 + C16617) * C47961 +
            (C16161 * C948 - C16162 * C943 - C16161 * C949 + C47992 * C958 +
             C16159 * C503 - C16160 * C491 - C16159 * C504 + C16155 * C521) *
                C16157) *
               C47907 * C2311 +
           ((C16159 * C505 - C16160 * C492 - C16159 * C506 + C16155 * C522 +
             C16161 * C1315 - C16162 * C1304 - C16161 * C1316 +
             C47992 * C1331) *
                C16157 +
            (C16618 + C16619) * C47961) *
               C47907 * C2312 -
           ((C18714 + C18715) * C47961 +
            (C16161 * C2433 - C16162 * C2430 - C16161 * C2434 + C47992 * C2439 +
             C16159 * C2034 - C16160 * C2026 - C16159 * C2035 +
             C16155 * C2044) *
                C16157) *
               C47907 * C47990) *
              C47942 +
          (((C16159 * C948 - C16160 * C943 - C16159 * C949 + C16155 * C958 +
             C16161 * C1321 - C16162 * C1307 - C16161 * C1322 +
             C47992 * C1334) *
                C16157 +
            (C17130 + C17131) * C47961) *
               C47907 * C2311 -
           ((C16414 + C16415) * C47961 +
            (C16161 * C310 - C16162 * C297 - C16161 * C311 + C47992 * C327 +
             C16159 * C308 - C16160 * C296 - C16159 * C309 + C16155 * C326) *
                C16157) *
               C47907 * C2310 -
           ((C18570 + C18571) * C47961 +
            (C16161 * C1323 - C16162 * C1308 - C16161 * C1324 + C47992 * C1335 +
             C16159 * C1315 - C16160 * C1304 - C16159 * C1316 +
             C16155 * C1331) *
                C16157) *
               C47907 * C2312 +
           ((C16159 * C2433 - C16160 * C2430 - C16159 * C2434 + C16155 * C2439 +
             C16161 * C7507 - C16162 * C7505 - C16161 * C7508 +
             C47992 * C7511) *
                C16157 +
            (C16159 * C2435 - C16160 * C2431 - C16159 * C2436 + C16155 * C2440 +
             C16161 * C7509 - C16162 * C7506 - C16161 * C7510 +
             C47992 * C7512) *
                C47961) *
               C47907 * C47990) *
              C47749) *
         C47658) /
            (p * q * std::sqrt(p + q));
    d2ee[87] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((C16159 * C122 - C16160 * C115 - C16159 * C123 + C16155 * C136 +
                C16161 * C308 - C16162 * C296 - C16161 * C309 + C47992 * C326) *
                   C16157 +
               (C16212 + C16213) * C47961) *
                  C47907 * C47704 * C47686 * C108 -
              ((C16214 + C16215) * C47961 + (C16213 + C16212) * C16157) *
                  C47907 * C47704 * C47686 * C109 +
              ((C16215 + C16214) * C16157 + (C16216 + C16217) * C47961) *
                  C47907 * C47704 * C47686 * C110 -
              ((C16218 + C16219) * C47961 + (C16217 + C16216) * C16157) *
                  C47907 * C47704 * C47686 * C111 +
              ((C16219 + C16218) * C16157 +
               (C16159 * C132 - C16160 * C120 - C16159 * C133 + C16155 * C141 +
                C16161 * C676 - C16162 * C675 - C16161 * C677 + C47992 * C678) *
                   C47961) *
                  C47907 * C47704 * C47686 * C112) +
         0.5 * std::pow(Pi, 2.5) *
             ((((C16159 * C122 - C16160 * C115 - C16159 * C123 + C16155 * C136 +
                 C16161 * C308 - C16162 * C296 - C16161 * C309 +
                 C47992 * C326) *
                    C16157 +
                (C16212 + C16213) * C47961) *
                   C47907 * C47704 * C48013 -
               ((C16414 + C16415) * C47961 +
                (C16161 * C310 - C16162 * C297 - C16161 * C311 + C47992 * C327 +
                 C16159 * C308 - C16160 * C296 - C16159 * C309 +
                 C16155 * C326) *
                    C16157) *
                   C47907 * C47704 * C48001 +
               ((C16159 * C310 - C16160 * C297 - C16159 * C311 + C16155 * C327 +
                 C16161 * C1178 - C16162 * C1170 - C16161 * C1179 +
                 C47992 * C1188) *
                    C16157 +
                (C16416 + C16417) * C47961) *
                   C47907 * C47704 * C47974) *
                  C291 +
              (((C16415 + C16414) * C16157 + (C16418 + C16419) * C47961) *
                   C47907 * C47704 * C48001 -
               ((C16214 + C16215) * C47961 + (C16213 + C16212) * C16157) *
                   C47907 * C47704 * C48013 -
               ((C16420 + C16421) * C47961 + (C16417 + C16416) * C16157) *
                   C47907 * C47704 * C47974) *
                  C292 +
              (((C16215 + C16214) * C16157 + (C16216 + C16217) * C47961) *
                   C47907 * C47704 * C48013 -
               ((C16161 * C318 - C16162 * C301 - C16161 * C319 + C47992 * C331 +
                 C16159 * C316 - C16160 * C300 - C16159 * C317 +
                 C16155 * C330) *
                    C47961 +
                (C16419 + C16418) * C16157) *
                   C47907 * C47704 * C48001 +
               ((C16421 + C16420) * C16157 +
                (C16159 * C318 - C16160 * C301 - C16159 * C319 + C16155 * C331 +
                 C16161 * C1443 - C16162 * C1442 - C16161 * C1444 +
                 C47992 * C1445) *
                    C47961) *
                   C47907 * C47704 * C47974) *
                  C47968)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C16159 * C122 - C16160 * C115 - C16159 * C123 + C16155 * C136 +
             C16161 * C308 - C16162 * C296 - C16161 * C309 + C47992 * C326) *
                C16157 +
            (C16212 + C16213) * C47961) *
               C47907 * C48014 -
           ((C16616 + C16617) * C47961 +
            (C16161 * C948 - C16162 * C943 - C16161 * C949 + C47992 * C958 +
             C16159 * C503 - C16160 * C491 - C16159 * C504 + C16155 * C521) *
                C16157) *
               C47907 * C48003 +
           ((C16159 * C505 - C16160 * C492 - C16159 * C506 + C16155 * C522 +
             C16161 * C1315 - C16162 * C1304 - C16161 * C1316 +
             C47992 * C1331) *
                C16157 +
            (C16618 + C16619) * C47961) *
               C47907 * C47977) *
              C47686 * C291 +
          (((C16617 + C16616) * C16157 + (C16620 + C16621) * C47961) * C47907 *
               C48003 -
           ((C16214 + C16215) * C47961 + (C16213 + C16212) * C16157) * C47907 *
               C48014 -
           ((C16622 + C16623) * C47961 + (C16619 + C16618) * C16157) * C47907 *
               C47977) *
              C47686 * C292 +
          (((C16215 + C16214) * C16157 + (C16216 + C16217) * C47961) * C47907 *
               C48014 -
           ((C16161 * C954 - C16162 * C946 - C16161 * C955 + C47992 * C961 +
             C16159 * C511 - C16160 * C495 - C16159 * C512 + C16155 * C525) *
                C47961 +
            (C16621 + C16620) * C16157) *
               C47907 * C48003 +
           ((C16623 + C16622) * C16157 +
            (C16159 * C513 - C16160 * C496 - C16159 * C514 + C16155 * C526 +
             C16161 * C2195 - C16162 * C2194 - C16161 * C2196 +
             C47992 * C2197) *
                C47961) *
               C47907 * C47977) *
              C47686 * C47968)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C16159 * C122 - C16160 * C115 - C16159 * C123 + C16155 * C136 +
             C16161 * C308 - C16162 * C296 - C16161 * C309 + C47992 * C326) *
                C16157 +
            (C16212 + C16213) * C47961) *
               C47907 * C47704 * C1094 -
           ((C16414 + C16415) * C47961 +
            (C16161 * C310 - C16162 * C297 - C16161 * C311 + C47992 * C327 +
             C16159 * C308 - C16160 * C296 - C16159 * C309 + C16155 * C326) *
                C16157) *
               C47907 * C47704 * C1095 +
           ((C16159 * C310 - C16160 * C297 - C16159 * C311 + C16155 * C327 +
             C16161 * C1178 - C16162 * C1170 - C16161 * C1179 +
             C47992 * C1188) *
                C16157 +
            (C16416 + C16417) * C47961) *
               C47907 * C47704 * C47974) *
              C48010 +
          (((C16415 + C16414) * C16157 + (C16418 + C16419) * C47961) * C47907 *
               C47704 * C1095 -
           ((C16214 + C16215) * C47961 + (C16213 + C16212) * C16157) * C47907 *
               C47704 * C1094 -
           ((C16420 + C16421) * C47961 + (C16417 + C16416) * C16157) * C47907 *
               C47704 * C47974) *
              C47997 +
          (((C16215 + C16214) * C16157 + (C16216 + C16217) * C47961) * C47907 *
               C47704 * C1094 -
           ((C16766 + C16767) * C47961 + (C16419 + C16418) * C16157) * C47907 *
               C47704 * C1095 +
           ((C16421 + C16420) * C16157 +
            (C16159 * C318 - C16160 * C301 - C16159 * C319 + C16155 * C331 +
             C16161 * C1443 - C16162 * C1442 - C16161 * C1444 +
             C47992 * C1445) *
                C47961) *
               C47907 * C47704 * C47974) *
              C47968)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C16159 * C122 - C16160 * C115 - C16159 * C123 + C16155 * C136 +
            C16161 * C308 - C16162 * C296 - C16161 * C309 + C47992 * C326) *
               C16157 +
           (C16212 + C16213) * C47961) *
              C47907 * C47704 * C1162 -
          ((C16414 + C16415) * C47961 +
           (C16161 * C310 - C16162 * C297 - C16161 * C311 + C47992 * C327 +
            C16159 * C308 - C16160 * C296 - C16159 * C309 + C16155 * C326) *
               C16157) *
              C47907 * C47704 * C1163 +
          ((C16159 * C310 - C16160 * C297 - C16159 * C311 + C16155 * C327 +
            C16161 * C1178 - C16162 * C1170 - C16161 * C1179 + C47992 * C1188) *
               C16157 +
           (C16416 + C16417) * C47961) *
              C47907 * C47704 * C1164 -
          ((C16161 * C1182 - C16162 * C1172 - C16161 * C1183 + C47992 * C1190 +
            C16159 * C1176 - C16160 * C1169 - C16159 * C1177 + C16155 * C1187) *
               C47961 +
           (C16161 * C1180 - C16162 * C1171 - C16161 * C1181 + C47992 * C1189 +
            C16159 * C1178 - C16160 * C1170 - C16159 * C1179 + C16155 * C1188) *
               C16157) *
              C47907 * C47704 * C1165 +
          ((C16159 * C1180 - C16160 * C1171 - C16159 * C1181 + C16155 * C1189 +
            C16161 * C5991 - C16162 * C5989 - C16161 * C5992 + C47992 * C5995) *
               C16157 +
           (C16159 * C1182 - C16160 * C1172 - C16159 * C1183 + C16155 * C1190 +
            C16161 * C5993 - C16162 * C5990 - C16161 * C5994 + C47992 * C5996) *
               C47961) *
              C47907 * C47704 * C1166) *
         C47658) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C16159 * C122 - C16160 * C115 - C16159 * C123 + C16155 * C136 +
             C16161 * C308 - C16162 * C296 - C16161 * C309 + C47992 * C326) *
                C16157 +
            (C16212 + C16213) * C47961) *
               C47907 * C48014 -
           ((C16616 + C16617) * C47961 +
            (C16161 * C948 - C16162 * C943 - C16161 * C949 + C47992 * C958 +
             C16159 * C503 - C16160 * C491 - C16159 * C504 + C16155 * C521) *
                C16157) *
               C47907 * C48003 +
           ((C16159 * C505 - C16160 * C492 - C16159 * C506 + C16155 * C522 +
             C16161 * C1315 - C16162 * C1304 - C16161 * C1316 +
             C47992 * C1331) *
                C16157 +
            (C16618 + C16619) * C47961) *
               C47907 * C47977) *
              C1094 +
          (((C16159 * C948 - C16160 * C943 - C16159 * C949 + C16155 * C958 +
             C16161 * C1321 - C16162 * C1307 - C16161 * C1322 +
             C47992 * C1334) *
                C16157 +
            (C17130 + C17131) * C47961) *
               C47907 * C48003 -
           ((C16414 + C16415) * C47961 +
            (C16161 * C310 - C16162 * C297 - C16161 * C311 + C47992 * C327 +
             C16159 * C308 - C16160 * C296 - C16159 * C309 + C16155 * C326) *
                C16157) *
               C47907 * C48014 -
           ((C16161 * C1325 - C16162 * C1309 - C16161 * C1326 + C47992 * C1336 +
             C16159 * C1313 - C16160 * C1303 - C16159 * C1314 +
             C16155 * C1330) *
                C47961 +
            (C16161 * C1323 - C16162 * C1308 - C16161 * C1324 + C47992 * C1335 +
             C16159 * C1315 - C16160 * C1304 - C16159 * C1316 +
             C16155 * C1331) *
                C16157) *
               C47907 * C47977) *
              C1095 +
          (((C16159 * C310 - C16160 * C297 - C16159 * C311 + C16155 * C327 +
             C16161 * C1178 - C16162 * C1170 - C16161 * C1179 +
             C47992 * C1188) *
                C16157 +
            (C16416 + C16417) * C47961) *
               C47907 * C48014 -
           ((C16161 * C1727 - C16162 * C1723 - C16161 * C1728 + C47992 * C1732 +
             C16159 * C1319 - C16160 * C1306 - C16159 * C1320 +
             C16155 * C1333) *
                C47961 +
            (C16161 * C1725 - C16162 * C1722 - C16161 * C1726 + C47992 * C1731 +
             C16159 * C1321 - C16160 * C1307 - C16159 * C1322 +
             C16155 * C1334) *
                C16157) *
               C47907 * C48003 +
           ((C16159 * C1323 - C16160 * C1308 - C16159 * C1324 + C16155 * C1335 +
             C16161 * C6145 - C16162 * C6143 - C16161 * C6146 +
             C47992 * C6149) *
                C16157 +
            (C16159 * C1325 - C16160 * C1309 - C16159 * C1326 + C16155 * C1336 +
             C16161 * C6147 - C16162 * C6144 - C16161 * C6148 +
             C47992 * C6150) *
                C47961) *
               C47907 * C47977) *
              C47974) *
         C47658) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C16159 * C122 - C16160 * C115 - C16159 * C123 + C16155 * C136 +
             C16161 * C308 - C16162 * C296 - C16161 * C309 + C47992 * C326) *
                C16157 +
            (C16212 + C16213) * C47961) *
               C47907 * C1844 -
           ((C16616 + C16617) * C47961 +
            (C16161 * C948 - C16162 * C943 - C16161 * C949 + C47992 * C958 +
             C16159 * C503 - C16160 * C491 - C16159 * C504 + C16155 * C521) *
                C16157) *
               C47907 * C1845 +
           ((C16159 * C505 - C16160 * C492 - C16159 * C506 + C16155 * C522 +
             C16161 * C1315 - C16162 * C1304 - C16161 * C1316 +
             C47992 * C1331) *
                C16157 +
            (C16618 + C16619) * C47961) *
               C47907 * C47977) *
              C47686 * C48010 +
          (((C16617 + C16616) * C16157 + (C16620 + C16621) * C47961) * C47907 *
               C1845 -
           ((C16214 + C16215) * C47961 + (C16213 + C16212) * C16157) * C47907 *
               C1844 -
           ((C16622 + C16623) * C47961 + (C16619 + C16618) * C16157) * C47907 *
               C47977) *
              C47686 * C47997 +
          (((C16215 + C16214) * C16157 + (C16216 + C16217) * C47961) * C47907 *
               C1844 -
           ((C16910 + C16911) * C47961 + (C16621 + C16620) * C16157) * C47907 *
               C1845 +
           ((C16623 + C16622) * C16157 +
            (C16159 * C513 - C16160 * C496 - C16159 * C514 + C16155 * C526 +
             C16161 * C2195 - C16162 * C2194 - C16161 * C2196 +
             C47992 * C2197) *
                C47961) *
               C47907 * C47977) *
              C47686 * C47968)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C16159 * C122 - C16160 * C115 - C16159 * C123 + C16155 * C136 +
             C16161 * C308 - C16162 * C296 - C16161 * C309 + C47992 * C326) *
                C16157 +
            (C16212 + C16213) * C47961) *
               C47907 * C1844 -
           ((C16616 + C16617) * C47961 +
            (C16161 * C948 - C16162 * C943 - C16161 * C949 + C47992 * C958 +
             C16159 * C503 - C16160 * C491 - C16159 * C504 + C16155 * C521) *
                C16157) *
               C47907 * C1845 +
           ((C16159 * C505 - C16160 * C492 - C16159 * C506 + C16155 * C522 +
             C16161 * C1315 - C16162 * C1304 - C16161 * C1316 +
             C47992 * C1331) *
                C16157 +
            (C16618 + C16619) * C47961) *
               C47907 * C47977) *
              C48013 +
          (((C16159 * C948 - C16160 * C943 - C16159 * C949 + C16155 * C958 +
             C16161 * C1321 - C16162 * C1307 - C16161 * C1322 +
             C47992 * C1334) *
                C16157 +
            (C17130 + C17131) * C47961) *
               C47907 * C1845 -
           ((C16414 + C16415) * C47961 +
            (C16161 * C310 - C16162 * C297 - C16161 * C311 + C47992 * C327 +
             C16159 * C308 - C16160 * C296 - C16159 * C309 + C16155 * C326) *
                C16157) *
               C47907 * C1844 -
           ((C16161 * C1325 - C16162 * C1309 - C16161 * C1326 + C47992 * C1336 +
             C16159 * C1313 - C16160 * C1303 - C16159 * C1314 +
             C16155 * C1330) *
                C47961 +
            (C16161 * C1323 - C16162 * C1308 - C16161 * C1324 + C47992 * C1335 +
             C16159 * C1315 - C16160 * C1304 - C16159 * C1316 +
             C16155 * C1331) *
                C16157) *
               C47907 * C47977) *
              C48001 +
          (((C16159 * C310 - C16160 * C297 - C16159 * C311 + C16155 * C327 +
             C16161 * C1178 - C16162 * C1170 - C16161 * C1179 +
             C47992 * C1188) *
                C16157 +
            (C16416 + C16417) * C47961) *
               C47907 * C1844 -
           ((C17858 + C17859) * C47961 +
            (C16161 * C1725 - C16162 * C1722 - C16161 * C1726 + C47992 * C1731 +
             C16159 * C1321 - C16160 * C1307 - C16159 * C1322 +
             C16155 * C1334) *
                C16157) *
               C47907 * C1845 +
           ((C16159 * C1323 - C16160 * C1308 - C16159 * C1324 + C16155 * C1335 +
             C16161 * C6145 - C16162 * C6143 - C16161 * C6146 +
             C47992 * C6149) *
                C16157 +
            (C16159 * C1325 - C16160 * C1309 - C16159 * C1326 + C16155 * C1336 +
             C16161 * C6147 - C16162 * C6144 - C16161 * C6148 +
             C47992 * C6150) *
                C47961) *
               C47907 * C47977) *
              C47974) *
         C47658) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C16159 * C122 - C16160 * C115 - C16159 * C123 + C16155 * C136 +
            C16161 * C308 - C16162 * C296 - C16161 * C309 + C47992 * C326) *
               C16157 +
           (C16212 + C16213) * C47961) *
              C47907 * C2019 -
          ((C16616 + C16617) * C47961 +
           (C16161 * C948 - C16162 * C943 - C16161 * C949 + C47992 * C958 +
            C16159 * C503 - C16160 * C491 - C16159 * C504 + C16155 * C521) *
               C16157) *
              C47907 * C2020 +
          ((C16159 * C505 - C16160 * C492 - C16159 * C506 + C16155 * C522 +
            C16161 * C1315 - C16162 * C1304 - C16161 * C1316 + C47992 * C1331) *
               C16157 +
           (C16618 + C16619) * C47961) *
              C47907 * C2021 -
          ((C16161 * C2435 - C16162 * C2431 - C16161 * C2436 + C47992 * C2440 +
            C16159 * C2032 - C16160 * C2025 - C16159 * C2033 + C16155 * C2043) *
               C47961 +
           (C16161 * C2433 - C16162 * C2430 - C16161 * C2434 + C47992 * C2439 +
            C16159 * C2034 - C16160 * C2026 - C16159 * C2035 + C16155 * C2044) *
               C16157) *
              C47907 * C2022 +
          ((C16159 * C2036 - C16160 * C2027 - C16159 * C2037 + C16155 * C2045 +
            C16161 * C7017 - C16162 * C7015 - C16161 * C7018 + C47992 * C7021) *
               C16157 +
           (C16159 * C2038 - C16160 * C2028 - C16159 * C2039 + C16155 * C2046 +
            C16161 * C7019 - C16162 * C7016 - C16161 * C7020 + C47992 * C7022) *
               C47961) *
              C47907 * C2023) *
         C47686 * C47658) /
            (p * q * std::sqrt(p + q));
    d2ee[88] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C16159 * C122 - C16160 * C115 - C16159 * C123 + C16155 * C136 +
              C16161 * C308 - C16162 * C296 - C16161 * C309 + C47992 * C326) *
                 C16157 +
             (C16212 + C16213) * C47961) *
                C47907 * C47943 -
            ((C16616 + C16617) * C47961 +
             (C16161 * C948 - C16162 * C943 - C16161 * C949 + C47992 * C958 +
              C16159 * C503 - C16160 * C491 - C16159 * C504 + C16155 * C521) *
                 C16157) *
                C47907 * C47791) *
               C1094 +
           (((C16159 * C948 - C16160 * C943 - C16159 * C949 + C16155 * C958 +
              C16161 * C1321 - C16162 * C1307 - C16161 * C1322 +
              C47992 * C1334) *
                 C16157 +
             (C17130 + C17131) * C47961) *
                C47907 * C47791 -
            ((C16414 + C16415) * C47961 +
             (C16161 * C310 - C16162 * C297 - C16161 * C311 + C47992 * C327 +
              C16159 * C308 - C16160 * C296 - C16159 * C309 + C16155 * C326) *
                 C16157) *
                C47907 * C47943) *
               C1095 +
           (((C16159 * C310 - C16160 * C297 - C16159 * C311 + C16155 * C327 +
              C16161 * C1178 - C16162 * C1170 - C16161 * C1179 +
              C47992 * C1188) *
                 C16157 +
             (C16416 + C16417) * C47961) *
                C47907 * C47943 -
            ((C17858 + C17859) * C47961 +
             (C16161 * C1725 - C16162 * C1722 - C16161 * C1726 +
              C47992 * C1731 + C16159 * C1321 - C16160 * C1307 -
              C16159 * C1322 + C16155 * C1334) *
                 C16157) *
                C47907 * C47791) *
               C47974) *
              C47928 +
          ((((C16617 + C16616) * C16157 + (C16620 + C16621) * C47961) * C47907 *
                C47791 -
            ((C16214 + C16215) * C47961 + (C16213 + C16212) * C16157) * C47907 *
                C47943) *
               C1094 +
           (((C16415 + C16414) * C16157 + (C16418 + C16419) * C47961) * C47907 *
                C47943 -
            ((C17132 + C17133) * C47961 + (C17131 + C17130) * C16157) * C47907 *
                C47791) *
               C1095 +
           (((C17859 + C17858) * C16157 +
             (C16159 * C1317 - C16160 * C1305 - C16159 * C1318 +
              C16155 * C1332 + C16161 * C1729 - C16162 * C1724 -
              C16161 * C1730 + C47992 * C1733) *
                 C47961) *
                C47907 * C47791 -
            ((C16420 + C16421) * C47961 + (C16417 + C16416) * C16157) * C47907 *
                C47943) *
               C47974) *
              C47669)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C16159 * C122 - C16160 * C115 - C16159 * C123 + C16155 * C136 +
             C16161 * C308 - C16162 * C296 - C16161 * C309 + C47992 * C326) *
                C16157 +
            (C16212 + C16213) * C47961) *
               C47907 * C47943 -
           ((C16616 + C16617) * C47961 +
            (C16161 * C948 - C16162 * C943 - C16161 * C949 + C47992 * C958 +
             C16159 * C503 - C16160 * C491 - C16159 * C504 + C16155 * C521) *
                C16157) *
               C47907 * C47791) *
              C47686 * C671 +
          (((C16617 + C16616) * C16157 + (C16620 + C16621) * C47961) * C47907 *
               C47791 -
           ((C16214 + C16215) * C47961 + (C16213 + C16212) * C16157) * C47907 *
               C47943) *
              C47686 * C672 +
          (((C16215 + C16214) * C16157 + (C16216 + C16217) * C47961) * C47907 *
               C47943 -
           ((C16910 + C16911) * C47961 + (C16621 + C16620) * C16157) * C47907 *
               C47791) *
              C47686 * C673 +
          (((C16911 + C16910) * C16157 +
            (C16159 * C515 - C16160 * C497 - C16159 * C516 + C16155 * C527 +
             C16161 * C956 - C16162 * C947 - C16161 * C957 + C47992 * C962) *
                C47961) *
               C47907 * C47791 -
           ((C16218 + C16219) * C47961 + (C16217 + C16216) * C16157) * C47907 *
               C47943) *
              C47686 * C47978)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C16159 * C122 - C16160 * C115 - C16159 * C123 + C16155 * C136 +
             C16161 * C308 - C16162 * C296 - C16161 * C309 + C47992 * C326) *
                C16157 +
            (C16212 + C16213) * C47961) *
               C47907 * C2310 -
           ((C16616 + C16617) * C47961 +
            (C16161 * C948 - C16162 * C943 - C16161 * C949 + C47992 * C958 +
             C16159 * C503 - C16160 * C491 - C16159 * C504 + C16155 * C521) *
                C16157) *
               C47907 * C2311 +
           ((C16159 * C505 - C16160 * C492 - C16159 * C506 + C16155 * C522 +
             C16161 * C1315 - C16162 * C1304 - C16161 * C1316 +
             C47992 * C1331) *
                C16157 +
            (C16618 + C16619) * C47961) *
               C47907 * C2312 -
           ((C18714 + C18715) * C47961 +
            (C16161 * C2433 - C16162 * C2430 - C16161 * C2434 + C47992 * C2439 +
             C16159 * C2034 - C16160 * C2026 - C16159 * C2035 +
             C16155 * C2044) *
                C16157) *
               C47907 * C47990) *
              C47686 * C47928 +
          (((C16617 + C16616) * C16157 + (C16620 + C16621) * C47961) * C47907 *
               C2311 -
           ((C16214 + C16215) * C47961 + (C16213 + C16212) * C16157) * C47907 *
               C2310 -
           ((C16622 + C16623) * C47961 + (C16619 + C16618) * C16157) * C47907 *
               C2312 +
           ((C18715 + C18714) * C16157 +
            (C16159 * C2030 - C16160 * C2024 - C16159 * C2031 + C16155 * C2042 +
             C16161 * C2437 - C16162 * C2432 - C16161 * C2438 +
             C47992 * C2441) *
                C47961) *
               C47907 * C47990) *
              C47686 * C47669)) /
            (p * q * std::sqrt(p + q));
    d2ee[89] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C16159 * C122 - C16160 * C115 - C16159 * C123 + C16155 * C136 +
             C16161 * C308 - C16162 * C296 - C16161 * C309 + C47992 * C326) *
                C16157 +
            (C16212 + C16213) * C47961) *
               C47907 * C47704 * C48013 -
           ((C16414 + C16415) * C47961 +
            (C16161 * C310 - C16162 * C297 - C16161 * C311 + C47992 * C327 +
             C16159 * C308 - C16160 * C296 - C16159 * C309 + C16155 * C326) *
                C16157) *
               C47907 * C47704 * C48001 +
           ((C16159 * C310 - C16160 * C297 - C16159 * C311 + C16155 * C327 +
             C16161 * C1178 - C16162 * C1170 - C16161 * C1179 +
             C47992 * C1188) *
                C16157 +
            (C16416 + C16417) * C47961) *
               C47907 * C47704 * C47974) *
              C291 +
          (((C16415 + C16414) * C16157 + (C16418 + C16419) * C47961) * C47907 *
               C47704 * C48001 -
           ((C16214 + C16215) * C47961 + (C16213 + C16212) * C16157) * C47907 *
               C47704 * C48013 -
           ((C16420 + C16421) * C47961 + (C16417 + C16416) * C16157) * C47907 *
               C47704 * C47974) *
              C292 +
          (((C16215 + C16214) * C16157 + (C16216 + C16217) * C47961) * C47907 *
               C47704 * C48013 -
           ((C16161 * C318 - C16162 * C301 - C16161 * C319 + C47992 * C331 +
             C16159 * C316 - C16160 * C300 - C16159 * C317 + C16155 * C330) *
                C47961 +
            (C16419 + C16418) * C16157) *
               C47907 * C47704 * C48001 +
           ((C16421 + C16420) * C16157 +
            (C16159 * C318 - C16160 * C301 - C16159 * C319 + C16155 * C331 +
             C16161 * C1443 - C16162 * C1442 - C16161 * C1444 +
             C47992 * C1445) *
                C47961) *
               C47907 * C47704 * C47974) *
              C47968)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C16159 * C122 - C16160 * C115 - C16159 * C123 + C16155 * C136 +
            C16161 * C308 - C16162 * C296 - C16161 * C309 + C47992 * C326) *
               C16157 +
           (C16212 + C16213) * C47961) *
              C47907 * C47704 * C47686 * C108 -
          ((C16214 + C16215) * C47961 + (C16213 + C16212) * C16157) * C47907 *
              C47704 * C47686 * C109 +
          ((C16215 + C16214) * C16157 + (C16216 + C16217) * C47961) * C47907 *
              C47704 * C47686 * C110 -
          ((C16218 + C16219) * C47961 + (C16217 + C16216) * C16157) * C47907 *
              C47704 * C47686 * C111 +
          ((C16219 + C16218) * C16157 +
           (C16159 * C132 - C16160 * C120 - C16159 * C133 + C16155 * C141 +
            C16161 * C676 - C16162 * C675 - C16161 * C677 + C47992 * C678) *
               C47961) *
              C47907 * C47704 * C47686 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C16159 * C122 - C16160 * C115 - C16159 * C123 + C16155 * C136 +
             C16161 * C308 - C16162 * C296 - C16161 * C309 + C47992 * C326) *
                C16157 +
            (C16212 + C16213) * C47961) *
               C47907 * C47704 * C1094 -
           ((C16414 + C16415) * C47961 +
            (C16161 * C310 - C16162 * C297 - C16161 * C311 + C47992 * C327 +
             C16159 * C308 - C16160 * C296 - C16159 * C309 + C16155 * C326) *
                C16157) *
               C47907 * C47704 * C1095 +
           ((C16159 * C310 - C16160 * C297 - C16159 * C311 + C16155 * C327 +
             C16161 * C1178 - C16162 * C1170 - C16161 * C1179 +
             C47992 * C1188) *
                C16157 +
            (C16416 + C16417) * C47961) *
               C47907 * C47704 * C47974) *
              C48010 +
          (((C16415 + C16414) * C16157 + (C16418 + C16419) * C47961) * C47907 *
               C47704 * C1095 -
           ((C16214 + C16215) * C47961 + (C16213 + C16212) * C16157) * C47907 *
               C47704 * C1094 -
           ((C16420 + C16421) * C47961 + (C16417 + C16416) * C16157) * C47907 *
               C47704 * C47974) *
              C47997 +
          (((C16215 + C16214) * C16157 + (C16216 + C16217) * C47961) * C47907 *
               C47704 * C1094 -
           ((C16766 + C16767) * C47961 + (C16419 + C16418) * C16157) * C47907 *
               C47704 * C1095 +
           ((C16421 + C16420) * C16157 +
            (C16159 * C318 - C16160 * C301 - C16159 * C319 + C16155 * C331 +
             C16161 * C1443 - C16162 * C1442 - C16161 * C1444 +
             C47992 * C1445) *
                C47961) *
               C47907 * C47704 * C47974) *
              C47968)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C16159 * C122 - C16160 * C115 - C16159 * C123 + C16155 * C136 +
            C16161 * C308 - C16162 * C296 - C16161 * C309 + C47992 * C326) *
               C16157 +
           (C16212 + C16213) * C47961) *
              C47907 * C47704 * C1162 -
          ((C16414 + C16415) * C47961 +
           (C16161 * C310 - C16162 * C297 - C16161 * C311 + C47992 * C327 +
            C16159 * C308 - C16160 * C296 - C16159 * C309 + C16155 * C326) *
               C16157) *
              C47907 * C47704 * C1163 +
          ((C16159 * C310 - C16160 * C297 - C16159 * C311 + C16155 * C327 +
            C16161 * C1178 - C16162 * C1170 - C16161 * C1179 + C47992 * C1188) *
               C16157 +
           (C16416 + C16417) * C47961) *
              C47907 * C47704 * C1164 -
          ((C16161 * C1182 - C16162 * C1172 - C16161 * C1183 + C47992 * C1190 +
            C16159 * C1176 - C16160 * C1169 - C16159 * C1177 + C16155 * C1187) *
               C47961 +
           (C16161 * C1180 - C16162 * C1171 - C16161 * C1181 + C47992 * C1189 +
            C16159 * C1178 - C16160 * C1170 - C16159 * C1179 + C16155 * C1188) *
               C16157) *
              C47907 * C47704 * C1165 +
          ((C16159 * C1180 - C16160 * C1171 - C16159 * C1181 + C16155 * C1189 +
            C16161 * C5991 - C16162 * C5989 - C16161 * C5992 + C47992 * C5995) *
               C16157 +
           (C16159 * C1182 - C16160 * C1172 - C16159 * C1183 + C16155 * C1190 +
            C16161 * C5993 - C16162 * C5990 - C16161 * C5994 + C47992 * C5996) *
               C47961) *
              C47907 * C47704 * C1166) *
         C47658) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C16159 * C122 - C16160 * C115 - C16159 * C123 + C16155 * C136 +
             C16161 * C308 - C16162 * C296 - C16161 * C309 + C47992 * C326) *
                C16157 +
            (C16212 + C16213) * C47961) *
               C47907 * C1844 -
           ((C16616 + C16617) * C47961 +
            (C16161 * C948 - C16162 * C943 - C16161 * C949 + C47992 * C958 +
             C16159 * C503 - C16160 * C491 - C16159 * C504 + C16155 * C521) *
                C16157) *
               C47907 * C1845 +
           ((C16159 * C505 - C16160 * C492 - C16159 * C506 + C16155 * C522 +
             C16161 * C1315 - C16162 * C1304 - C16161 * C1316 +
             C47992 * C1331) *
                C16157 +
            (C16618 + C16619) * C47961) *
               C47907 * C47977) *
              C47686 * C48010 +
          (((C16617 + C16616) * C16157 + (C16620 + C16621) * C47961) * C47907 *
               C1845 -
           ((C16214 + C16215) * C47961 + (C16213 + C16212) * C16157) * C47907 *
               C1844 -
           ((C16622 + C16623) * C47961 + (C16619 + C16618) * C16157) * C47907 *
               C47977) *
              C47686 * C47997 +
          (((C16215 + C16214) * C16157 + (C16216 + C16217) * C47961) * C47907 *
               C1844 -
           ((C16910 + C16911) * C47961 + (C16621 + C16620) * C16157) * C47907 *
               C1845 +
           ((C16623 + C16622) * C16157 +
            (C16159 * C513 - C16160 * C496 - C16159 * C514 + C16155 * C526 +
             C16161 * C2195 - C16162 * C2194 - C16161 * C2196 +
             C47992 * C2197) *
                C47961) *
               C47907 * C47977) *
              C47686 * C47968)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C16159 * C122 - C16160 * C115 - C16159 * C123 + C16155 * C136 +
             C16161 * C308 - C16162 * C296 - C16161 * C309 + C47992 * C326) *
                C16157 +
            (C16212 + C16213) * C47961) *
               C47907 * C1844 -
           ((C16616 + C16617) * C47961 +
            (C16161 * C948 - C16162 * C943 - C16161 * C949 + C47992 * C958 +
             C16159 * C503 - C16160 * C491 - C16159 * C504 + C16155 * C521) *
                C16157) *
               C47907 * C1845 +
           ((C16159 * C505 - C16160 * C492 - C16159 * C506 + C16155 * C522 +
             C16161 * C1315 - C16162 * C1304 - C16161 * C1316 +
             C47992 * C1331) *
                C16157 +
            (C16618 + C16619) * C47961) *
               C47907 * C47977) *
              C48013 +
          (((C16159 * C948 - C16160 * C943 - C16159 * C949 + C16155 * C958 +
             C16161 * C1321 - C16162 * C1307 - C16161 * C1322 +
             C47992 * C1334) *
                C16157 +
            (C17130 + C17131) * C47961) *
               C47907 * C1845 -
           ((C16414 + C16415) * C47961 +
            (C16161 * C310 - C16162 * C297 - C16161 * C311 + C47992 * C327 +
             C16159 * C308 - C16160 * C296 - C16159 * C309 + C16155 * C326) *
                C16157) *
               C47907 * C1844 -
           ((C16161 * C1325 - C16162 * C1309 - C16161 * C1326 + C47992 * C1336 +
             C16159 * C1313 - C16160 * C1303 - C16159 * C1314 +
             C16155 * C1330) *
                C47961 +
            (C16161 * C1323 - C16162 * C1308 - C16161 * C1324 + C47992 * C1335 +
             C16159 * C1315 - C16160 * C1304 - C16159 * C1316 +
             C16155 * C1331) *
                C16157) *
               C47907 * C47977) *
              C48001 +
          (((C16159 * C310 - C16160 * C297 - C16159 * C311 + C16155 * C327 +
             C16161 * C1178 - C16162 * C1170 - C16161 * C1179 +
             C47992 * C1188) *
                C16157 +
            (C16416 + C16417) * C47961) *
               C47907 * C1844 -
           ((C17858 + C17859) * C47961 +
            (C16161 * C1725 - C16162 * C1722 - C16161 * C1726 + C47992 * C1731 +
             C16159 * C1321 - C16160 * C1307 - C16159 * C1322 +
             C16155 * C1334) *
                C16157) *
               C47907 * C1845 +
           ((C16159 * C1323 - C16160 * C1308 - C16159 * C1324 + C16155 * C1335 +
             C16161 * C6145 - C16162 * C6143 - C16161 * C6146 +
             C47992 * C6149) *
                C16157 +
            (C16159 * C1325 - C16160 * C1309 - C16159 * C1326 + C16155 * C1336 +
             C16161 * C6147 - C16162 * C6144 - C16161 * C6148 +
             C47992 * C6150) *
                C47961) *
               C47907 * C47977) *
              C47974) *
         C47658) /
            (p * q * std::sqrt(p + q));
    d2ee[90] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C16159 * C122 - C16160 * C115 - C16159 * C123 + C16155 * C136 +
              C16161 * C308 - C16162 * C296 - C16161 * C309 + C47992 * C326) *
                 C16157 +
             (C16212 + C16213) * C47961) *
                C47907 * C3302 -
            ((C16616 + C16617) * C47961 +
             (C16161 * C948 - C16162 * C943 - C16161 * C949 + C47992 * C958 +
              C16159 * C503 - C16160 * C491 - C16159 * C504 + C16155 * C521) *
                 C16157) *
                C47907 * C47791) *
               C47942 +
           (((C16159 * C948 - C16160 * C943 - C16159 * C949 + C16155 * C958 +
              C16161 * C1321 - C16162 * C1307 - C16161 * C1322 +
              C47992 * C1334) *
                 C16157 +
             (C17130 + C17131) * C47961) *
                C47907 * C47791 -
            ((C16414 + C16415) * C47961 +
             (C16161 * C310 - C16162 * C297 - C16161 * C311 + C47992 * C327 +
              C16159 * C308 - C16160 * C296 - C16159 * C309 + C16155 * C326) *
                 C16157) *
                C47907 * C3302) *
               C47749) *
              C47663 +
          ((((C16617 + C16616) * C16157 + (C16620 + C16621) * C47961) * C47907 *
                C47791 -
            ((C16214 + C16215) * C47961 + (C16213 + C16212) * C16157) * C47907 *
                C3302) *
               C47942 +
           (((C16415 + C16414) * C16157 + (C16418 + C16419) * C47961) * C47907 *
                C3302 -
            ((C17132 + C17133) * C47961 + (C17131 + C17130) * C16157) * C47907 *
                C47791) *
               C47749) *
              C47672 +
          ((((C16215 + C16214) * C16157 + (C16216 + C16217) * C47961) * C47907 *
                C3302 -
            ((C16910 + C16911) * C47961 + (C16621 + C16620) * C16157) * C47907 *
                C47791) *
               C47942 +
           (((C17133 + C17132) * C16157 +
             (C16159 * C954 - C16160 * C946 - C16159 * C955 + C16155 * C961 +
              C16161 * C1607 - C16162 * C1606 - C16161 * C1608 +
              C47992 * C1609) *
                 C47961) *
                C47907 * C47791 -
            ((C16766 + C16767) * C47961 + (C16419 + C16418) * C16157) * C47907 *
                C3302) *
               C47749) *
              C2911)) /
        (p * q * std::sqrt(p + q));
    d2ee[91] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C16159 * C122 - C16160 * C115 - C16159 * C123 + C16155 * C136 +
              C16161 * C308 - C16162 * C296 - C16161 * C309 + C47992 * C326) *
                 C16157 +
             (C16212 + C16213) * C47961) *
                C47907 * C47787 -
            ((C16616 + C16617) * C47961 +
             (C16161 * C948 - C16162 * C943 - C16161 * C949 + C47992 * C958 +
              C16159 * C503 - C16160 * C491 - C16159 * C504 + C16155 * C521) *
                 C16157) *
                C47907 * C47794 +
            ((C16159 * C505 - C16160 * C492 - C16159 * C506 + C16155 * C522 +
              C16161 * C1315 - C16162 * C1304 - C16161 * C1316 +
              C47992 * C1331) *
                 C16157 +
             (C16618 + C16619) * C47961) *
                C47907 * C3810) *
               C47942 +
           (((C16159 * C948 - C16160 * C943 - C16159 * C949 + C16155 * C958 +
              C16161 * C1321 - C16162 * C1307 - C16161 * C1322 +
              C47992 * C1334) *
                 C16157 +
             (C17130 + C17131) * C47961) *
                C47907 * C47794 -
            ((C16414 + C16415) * C47961 +
             (C16161 * C310 - C16162 * C297 - C16161 * C311 + C47992 * C327 +
              C16159 * C308 - C16160 * C296 - C16159 * C309 + C16155 * C326) *
                 C16157) *
                C47907 * C47787 -
            ((C18570 + C18571) * C47961 +
             (C16161 * C1323 - C16162 * C1308 - C16161 * C1324 +
              C47992 * C1335 + C16159 * C1315 - C16160 * C1304 -
              C16159 * C1316 + C16155 * C1331) *
                 C16157) *
                C47907 * C3810) *
               C47749) *
              C2648 +
          ((((C16617 + C16616) * C16157 + (C16620 + C16621) * C47961) * C47907 *
                C47794 -
            ((C16214 + C16215) * C47961 + (C16213 + C16212) * C16157) * C47907 *
                C47787 -
            ((C16622 + C16623) * C47961 + (C16619 + C16618) * C16157) * C47907 *
                C3810) *
               C47942 +
           (((C16415 + C16414) * C16157 + (C16418 + C16419) * C47961) * C47907 *
                C47787 -
            ((C17132 + C17133) * C47961 + (C17131 + C17130) * C16157) * C47907 *
                C47794 +
            ((C18571 + C18570) * C16157 +
             (C16159 * C1311 - C16160 * C1302 - C16159 * C1312 +
              C16155 * C1329 + C16161 * C1327 - C16162 * C1310 -
              C16161 * C1328 + C47992 * C1337) *
                 C47961) *
                C47907 * C3810) *
               C47749) *
              C47669)) /
        (p * q * std::sqrt(p + q));
    d2ee[92] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C16159 * C122 - C16160 * C115 - C16159 * C123 + C16155 * C136 +
              C16161 * C308 - C16162 * C296 - C16161 * C309 + C47992 * C326) *
                 C16157 +
             (C16212 + C16213) * C47961) *
                C47907 * C3302 -
            ((C16616 + C16617) * C47961 +
             (C16161 * C948 - C16162 * C943 - C16161 * C949 + C47992 * C958 +
              C16159 * C503 - C16160 * C491 - C16159 * C504 + C16155 * C521) *
                 C16157) *
                C47907 * C47791) *
               C48013 +
           (((C16159 * C948 - C16160 * C943 - C16159 * C949 + C16155 * C958 +
              C16161 * C1321 - C16162 * C1307 - C16161 * C1322 +
              C47992 * C1334) *
                 C16157 +
             (C17130 + C17131) * C47961) *
                C47907 * C47791 -
            ((C16414 + C16415) * C47961 +
             (C16161 * C310 - C16162 * C297 - C16161 * C311 + C47992 * C327 +
              C16159 * C308 - C16160 * C296 - C16159 * C309 + C16155 * C326) *
                 C16157) *
                C47907 * C3302) *
               C48001 +
           (((C16159 * C310 - C16160 * C297 - C16159 * C311 + C16155 * C327 +
              C16161 * C1178 - C16162 * C1170 - C16161 * C1179 +
              C47992 * C1188) *
                 C16157 +
             (C16416 + C16417) * C47961) *
                C47907 * C3302 -
            ((C17858 + C17859) * C47961 +
             (C16161 * C1725 - C16162 * C1722 - C16161 * C1726 +
              C47992 * C1731 + C16159 * C1321 - C16160 * C1307 -
              C16159 * C1322 + C16155 * C1334) *
                 C16157) *
                C47907 * C47791) *
               C47974) *
              C2648 +
          ((((C16617 + C16616) * C16157 + (C16620 + C16621) * C47961) * C47907 *
                C47791 -
            ((C16214 + C16215) * C47961 + (C16213 + C16212) * C16157) * C47907 *
                C3302) *
               C48013 +
           (((C16415 + C16414) * C16157 + (C16418 + C16419) * C47961) * C47907 *
                C3302 -
            ((C17132 + C17133) * C47961 + (C17131 + C17130) * C16157) * C47907 *
                C47791) *
               C48001 +
           (((C17859 + C17858) * C16157 +
             (C16159 * C1317 - C16160 * C1305 - C16159 * C1318 +
              C16155 * C1332 + C16161 * C1729 - C16162 * C1724 -
              C16161 * C1730 + C47992 * C1733) *
                 C47961) *
                C47907 * C47791 -
            ((C16420 + C16421) * C47961 + (C16417 + C16416) * C16157) * C47907 *
                C3302) *
               C47974) *
              C47669)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C16159 * C122 - C16160 * C115 - C16159 * C123 + C16155 * C136 +
             C16161 * C308 - C16162 * C296 - C16161 * C309 + C47992 * C326) *
                C16157 +
            (C16212 + C16213) * C47961) *
               C47907 * C3302 -
           ((C16616 + C16617) * C47961 +
            (C16161 * C948 - C16162 * C943 - C16161 * C949 + C47992 * C958 +
             C16159 * C503 - C16160 * C491 - C16159 * C504 + C16155 * C521) *
                C16157) *
               C47907 * C47791) *
              C47686 * C48019 +
          (((C16617 + C16616) * C16157 + (C16620 + C16621) * C47961) * C47907 *
               C47791 -
           ((C16214 + C16215) * C47961 + (C16213 + C16212) * C16157) * C47907 *
               C3302) *
              C47686 * C48012 +
          (((C16215 + C16214) * C16157 + (C16216 + C16217) * C47961) * C47907 *
               C3302 -
           ((C16910 + C16911) * C47961 + (C16621 + C16620) * C16157) * C47907 *
               C47791) *
              C47686 * C47999 +
          (((C16911 + C16910) * C16157 +
            (C16159 * C515 - C16160 * C497 - C16159 * C516 + C16155 * C527 +
             C16161 * C956 - C16162 * C947 - C16161 * C957 + C47992 * C962) *
                C47961) *
               C47907 * C47791 -
           ((C16218 + C16219) * C47961 + (C16217 + C16216) * C16157) * C47907 *
               C3302) *
              C47686 * C47978)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C16159 * C122 - C16160 * C115 - C16159 * C123 + C16155 * C136 +
             C16161 * C308 - C16162 * C296 - C16161 * C309 + C47992 * C326) *
                C16157 +
            (C16212 + C16213) * C47961) *
               C47907 * C48021 -
           ((C16616 + C16617) * C47961 +
            (C16161 * C948 - C16162 * C943 - C16161 * C949 + C47992 * C958 +
             C16159 * C503 - C16160 * C491 - C16159 * C504 + C16155 * C521) *
                C16157) *
               C47907 * C48018 +
           ((C16159 * C505 - C16160 * C492 - C16159 * C506 + C16155 * C522 +
             C16161 * C1315 - C16162 * C1304 - C16161 * C1316 +
             C47992 * C1331) *
                C16157 +
            (C16618 + C16619) * C47961) *
               C47907 * C48009 -
           ((C18714 + C18715) * C47961 +
            (C16161 * C2433 - C16162 * C2430 - C16161 * C2434 + C47992 * C2439 +
             C16159 * C2034 - C16160 * C2026 - C16159 * C2035 +
             C16155 * C2044) *
                C16157) *
               C47907 * C47990) *
              C47686 * C2648 +
          (((C16617 + C16616) * C16157 + (C16620 + C16621) * C47961) * C47907 *
               C48018 -
           ((C16214 + C16215) * C47961 + (C16213 + C16212) * C16157) * C47907 *
               C48021 -
           ((C16622 + C16623) * C47961 + (C16619 + C16618) * C16157) * C47907 *
               C48009 +
           ((C18715 + C18714) * C16157 +
            (C16159 * C2030 - C16160 * C2024 - C16159 * C2031 + C16155 * C2042 +
             C16161 * C2437 - C16162 * C2432 - C16161 * C2438 +
             C47992 * C2441) *
                C47961) *
               C47907 * C47990) *
              C47686 * C47669)) /
            (p * q * std::sqrt(p + q));
    d2ee[93] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C16159 * C122 - C16160 * C115 - C16159 * C123 + C16155 * C136 +
             C16161 * C308 - C16162 * C296 - C16161 * C309 + C47992 * C326) *
                C16157 +
            (C16212 + C16213) * C47961) *
               C47907 * C47787 -
           ((C16616 + C16617) * C47961 +
            (C16161 * C948 - C16162 * C943 - C16161 * C949 + C47992 * C958 +
             C16159 * C503 - C16160 * C491 - C16159 * C504 + C16155 * C521) *
                C16157) *
               C47907 * C47794 +
           ((C16159 * C505 - C16160 * C492 - C16159 * C506 + C16155 * C522 +
             C16161 * C1315 - C16162 * C1304 - C16161 * C1316 +
             C47992 * C1331) *
                C16157 +
            (C16618 + C16619) * C47961) *
               C47907 * C3810) *
              C47686 * C47663 +
          (((C16617 + C16616) * C16157 + (C16620 + C16621) * C47961) * C47907 *
               C47794 -
           ((C16214 + C16215) * C47961 + (C16213 + C16212) * C16157) * C47907 *
               C47787 -
           ((C16622 + C16623) * C47961 + (C16619 + C16618) * C16157) * C47907 *
               C3810) *
              C47686 * C47672 +
          (((C16215 + C16214) * C16157 + (C16216 + C16217) * C47961) * C47907 *
               C47787 -
           ((C16910 + C16911) * C47961 + (C16621 + C16620) * C16157) * C47907 *
               C47794 +
           ((C16623 + C16622) * C16157 +
            (C16159 * C513 - C16160 * C496 - C16159 * C514 + C16155 * C526 +
             C16161 * C2195 - C16162 * C2194 - C16161 * C2196 +
             C47992 * C2197) *
                C47961) *
               C47907 * C3810) *
              C47686 * C2911)) /
        (p * q * std::sqrt(p + q));
    d2ee[94] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C16159 * C122 - C16160 * C115 - C16159 * C123 + C16155 * C136 +
             C16161 * C308 - C16162 * C296 - C16161 * C309 + C47992 * C326) *
                C16157 +
            (C16212 + C16213) * C47961) *
               C47907 * C3302 -
           ((C16616 + C16617) * C47961 +
            (C16161 * C948 - C16162 * C943 - C16161 * C949 + C47992 * C958 +
             C16159 * C503 - C16160 * C491 - C16159 * C504 + C16155 * C521) *
                C16157) *
               C47907 * C47791) *
              C47686 * C48019 +
          (((C16617 + C16616) * C16157 + (C16620 + C16621) * C47961) * C47907 *
               C47791 -
           ((C16214 + C16215) * C47961 + (C16213 + C16212) * C16157) * C47907 *
               C3302) *
              C47686 * C48012 +
          (((C16215 + C16214) * C16157 + (C16216 + C16217) * C47961) * C47907 *
               C3302 -
           ((C16910 + C16911) * C47961 + (C16621 + C16620) * C16157) * C47907 *
               C47791) *
              C47686 * C47999 +
          (((C16911 + C16910) * C16157 +
            (C16159 * C515 - C16160 * C497 - C16159 * C516 + C16155 * C527 +
             C16161 * C956 - C16162 * C947 - C16161 * C957 + C47992 * C962) *
                C47961) *
               C47907 * C47791 -
           ((C16218 + C16219) * C47961 + (C16217 + C16216) * C16157) * C47907 *
               C3302) *
              C47686 * C47978)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C16159 * C122 - C16160 * C115 - C16159 * C123 + C16155 * C136 +
              C16161 * C308 - C16162 * C296 - C16161 * C309 + C47992 * C326) *
                 C16157 +
             (C16212 + C16213) * C47961) *
                C47907 * C3302 -
            ((C16616 + C16617) * C47961 +
             (C16161 * C948 - C16162 * C943 - C16161 * C949 + C47992 * C958 +
              C16159 * C503 - C16160 * C491 - C16159 * C504 + C16155 * C521) *
                 C16157) *
                C47907 * C47791) *
               C48013 +
           (((C16159 * C948 - C16160 * C943 - C16159 * C949 + C16155 * C958 +
              C16161 * C1321 - C16162 * C1307 - C16161 * C1322 +
              C47992 * C1334) *
                 C16157 +
             (C17130 + C17131) * C47961) *
                C47907 * C47791 -
            ((C16414 + C16415) * C47961 +
             (C16161 * C310 - C16162 * C297 - C16161 * C311 + C47992 * C327 +
              C16159 * C308 - C16160 * C296 - C16159 * C309 + C16155 * C326) *
                 C16157) *
                C47907 * C3302) *
               C48001 +
           (((C16159 * C310 - C16160 * C297 - C16159 * C311 + C16155 * C327 +
              C16161 * C1178 - C16162 * C1170 - C16161 * C1179 +
              C47992 * C1188) *
                 C16157 +
             (C16416 + C16417) * C47961) *
                C47907 * C3302 -
            ((C17858 + C17859) * C47961 +
             (C16161 * C1725 - C16162 * C1722 - C16161 * C1726 +
              C47992 * C1731 + C16159 * C1321 - C16160 * C1307 -
              C16159 * C1322 + C16155 * C1334) *
                 C16157) *
                C47907 * C47791) *
               C47974) *
              C2648 +
          ((((C16617 + C16616) * C16157 + (C16620 + C16621) * C47961) * C47907 *
                C47791 -
            ((C16214 + C16215) * C47961 + (C16213 + C16212) * C16157) * C47907 *
                C3302) *
               C48013 +
           (((C16415 + C16414) * C16157 + (C16418 + C16419) * C47961) * C47907 *
                C3302 -
            ((C17132 + C17133) * C47961 + (C17131 + C17130) * C16157) * C47907 *
                C47791) *
               C48001 +
           (((C17859 + C17858) * C16157 +
             (C16159 * C1317 - C16160 * C1305 - C16159 * C1318 +
              C16155 * C1332 + C16161 * C1729 - C16162 * C1724 -
              C16161 * C1730 + C47992 * C1733) *
                 C47961) *
                C47907 * C47791 -
            ((C16420 + C16421) * C47961 + (C16417 + C16416) * C16157) * C47907 *
                C3302) *
               C47974) *
              C47669)) /
            (p * q * std::sqrt(p + q));
    d2ee[95] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C16159 * C122 - C16160 * C115 - C16159 * C123 + C16155 * C136 +
             C16161 * C308 - C16162 * C296 - C16161 * C309 + C47992 * C326) *
                C16157 +
            (C16212 + C16213) * C47961) *
               C47907 * C47704 * C47942 -
           ((C16414 + C16415) * C47961 +
            (C16161 * C310 - C16162 * C297 - C16161 * C311 + C47992 * C327 +
             C16159 * C308 - C16160 * C296 - C16159 * C309 + C16155 * C326) *
                C16157) *
               C47907 * C47704 * C47749) *
              C671 +
          (((C16415 + C16414) * C16157 + (C16418 + C16419) * C47961) * C47907 *
               C47704 * C47749 -
           ((C16214 + C16215) * C47961 + (C16213 + C16212) * C16157) * C47907 *
               C47704 * C47942) *
              C672 +
          (((C16215 + C16214) * C16157 + (C16216 + C16217) * C47961) * C47907 *
               C47704 * C47942 -
           ((C16766 + C16767) * C47961 + (C16419 + C16418) * C16157) * C47907 *
               C47704 * C47749) *
              C673 +
          (((C16767 + C16766) * C16157 +
            (C16159 * C320 - C16160 * C302 - C16159 * C321 + C16155 * C332 +
             C16161 * C322 - C16162 * C303 - C16161 * C323 + C47992 * C333) *
                C47961) *
               C47907 * C47704 * C47749 -
           ((C16218 + C16219) * C47961 + (C16217 + C16216) * C16157) * C47907 *
               C47704 * C47942) *
              C47978)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C16159 * C122 - C16160 * C115 - C16159 * C123 + C16155 * C136 +
             C16161 * C308 - C16162 * C296 - C16161 * C309 + C47992 * C326) *
                C16157 +
            (C16212 + C16213) * C47961) *
               C47907 * C47704 * C1436 -
           ((C16414 + C16415) * C47961 +
            (C16161 * C310 - C16162 * C297 - C16161 * C311 + C47992 * C327 +
             C16159 * C308 - C16160 * C296 - C16159 * C309 + C16155 * C326) *
                C16157) *
               C47907 * C47704 * C1437 +
           ((C16159 * C310 - C16160 * C297 - C16159 * C311 + C16155 * C327 +
             C16161 * C1178 - C16162 * C1170 - C16161 * C1179 +
             C47992 * C1188) *
                C16157 +
            (C16416 + C16417) * C47961) *
               C47907 * C47704 * C1438 -
           ((C17650 + C17651) * C47961 +
            (C16161 * C1180 - C16162 * C1171 - C16161 * C1181 + C47992 * C1189 +
             C16159 * C1178 - C16160 * C1170 - C16159 * C1179 +
             C16155 * C1188) *
                C16157) *
               C47907 * C47704 * C47984) *
              C47928 +
          (((C16415 + C16414) * C16157 + (C16418 + C16419) * C47961) * C47907 *
               C47704 * C1437 -
           ((C16214 + C16215) * C47961 + (C16213 + C16212) * C16157) * C47907 *
               C47704 * C1436 -
           ((C16420 + C16421) * C47961 + (C16417 + C16416) * C16157) * C47907 *
               C47704 * C1438 +
           ((C17651 + C17650) * C16157 +
            (C16159 * C1174 - C16160 * C1168 - C16159 * C1175 + C16155 * C1186 +
             C16161 * C1184 - C16162 * C1173 - C16161 * C1185 +
             C47992 * C1191) *
                C47961) *
               C47907 * C47704 * C47984) *
              C47669)) /
            (p * q * std::sqrt(p + q));
    d2ee[96] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C16159 * C122 - C16160 * C115 - C16159 * C123 + C16155 * C136 +
              C16161 * C308 - C16162 * C296 - C16161 * C309 + C47992 * C326) *
                 C16157 +
             (C16212 + C16213) * C47961) *
                C47907 * C47943 -
            ((C16616 + C16617) * C47961 +
             (C16161 * C948 - C16162 * C943 - C16161 * C949 + C47992 * C958 +
              C16159 * C503 - C16160 * C491 - C16159 * C504 + C16155 * C521) *
                 C16157) *
                C47907 * C47791) *
               C47942 +
           (((C16159 * C948 - C16160 * C943 - C16159 * C949 + C16155 * C958 +
              C16161 * C1321 - C16162 * C1307 - C16161 * C1322 +
              C47992 * C1334) *
                 C16157 +
             (C17130 + C17131) * C47961) *
                C47907 * C47791 -
            ((C16414 + C16415) * C47961 +
             (C16161 * C310 - C16162 * C297 - C16161 * C311 + C47992 * C327 +
              C16159 * C308 - C16160 * C296 - C16159 * C309 + C16155 * C326) *
                 C16157) *
                C47907 * C47943) *
               C47749) *
              C291 +
          ((((C16617 + C16616) * C16157 + (C16620 + C16621) * C47961) * C47907 *
                C47791 -
            ((C16214 + C16215) * C47961 + (C16213 + C16212) * C16157) * C47907 *
                C47943) *
               C47942 +
           (((C16415 + C16414) * C16157 + (C16418 + C16419) * C47961) * C47907 *
                C47943 -
            ((C17132 + C17133) * C47961 + (C17131 + C17130) * C16157) * C47907 *
                C47791) *
               C47749) *
              C292 +
          ((((C16215 + C16214) * C16157 + (C16216 + C16217) * C47961) * C47907 *
                C47943 -
            ((C16910 + C16911) * C47961 + (C16621 + C16620) * C16157) * C47907 *
                C47791) *
               C47942 +
           (((C17133 + C17132) * C16157 +
             (C16159 * C954 - C16160 * C946 - C16159 * C955 + C16155 * C961 +
              C16161 * C1607 - C16162 * C1606 - C16161 * C1608 +
              C47992 * C1609) *
                 C47961) *
                C47907 * C47791 -
            ((C16766 + C16767) * C47961 + (C16419 + C16418) * C16157) * C47907 *
                C47943) *
               C47749) *
              C47968)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C16159 * C122 - C16160 * C115 - C16159 * C123 + C16155 * C136 +
             C16161 * C308 - C16162 * C296 - C16161 * C309 + C47992 * C326) *
                C16157 +
            (C16212 + C16213) * C47961) *
               C47907 * C47943 -
           ((C16616 + C16617) * C47961 +
            (C16161 * C948 - C16162 * C943 - C16161 * C949 + C47992 * C958 +
             C16159 * C503 - C16160 * C491 - C16159 * C504 + C16155 * C521) *
                C16157) *
               C47907 * C47791) *
              C1436 +
          (((C16159 * C948 - C16160 * C943 - C16159 * C949 + C16155 * C958 +
             C16161 * C1321 - C16162 * C1307 - C16161 * C1322 +
             C47992 * C1334) *
                C16157 +
            (C17130 + C17131) * C47961) *
               C47907 * C47791 -
           ((C16414 + C16415) * C47961 +
            (C16161 * C310 - C16162 * C297 - C16161 * C311 + C47992 * C327 +
             C16159 * C308 - C16160 * C296 - C16159 * C309 + C16155 * C326) *
                C16157) *
               C47907 * C47943) *
              C1437 +
          (((C16159 * C310 - C16160 * C297 - C16159 * C311 + C16155 * C327 +
             C16161 * C1178 - C16162 * C1170 - C16161 * C1179 +
             C47992 * C1188) *
                C16157 +
            (C16416 + C16417) * C47961) *
               C47907 * C47943 -
           ((C17858 + C17859) * C47961 +
            (C16161 * C1725 - C16162 * C1722 - C16161 * C1726 + C47992 * C1731 +
             C16159 * C1321 - C16160 * C1307 - C16159 * C1322 +
             C16155 * C1334) *
                C16157) *
               C47907 * C47791) *
              C1438 +
          (((C16159 * C1725 - C16160 * C1722 - C16159 * C1726 + C16155 * C1731 +
             C16161 * C6635 - C16162 * C6633 - C16161 * C6636 +
             C47992 * C6639) *
                C16157 +
            (C16159 * C1727 - C16160 * C1723 - C16159 * C1728 + C16155 * C1732 +
             C16161 * C6637 - C16162 * C6634 - C16161 * C6638 +
             C47992 * C6640) *
                C47961) *
               C47907 * C47791 -
           ((C17650 + C17651) * C47961 +
            (C16161 * C1180 - C16162 * C1171 - C16161 * C1181 + C47992 * C1189 +
             C16159 * C1178 - C16160 * C1170 - C16159 * C1179 +
             C16155 * C1188) *
                C16157) *
               C47907 * C47943) *
              C47984) *
         C47658) /
            (p * q * std::sqrt(p + q));
    d2ee[97] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C16159 * C122 - C16160 * C115 - C16159 * C123 + C16155 * C136 +
             C16161 * C308 - C16162 * C296 - C16161 * C309 + C47992 * C326) *
                C16157 +
            (C16212 + C16213) * C47961) *
               C47907 * C47704 * C48013 -
           ((C16414 + C16415) * C47961 +
            (C16161 * C310 - C16162 * C297 - C16161 * C311 + C47992 * C327 +
             C16159 * C308 - C16160 * C296 - C16159 * C309 + C16155 * C326) *
                C16157) *
               C47907 * C47704 * C48001 +
           ((C16159 * C310 - C16160 * C297 - C16159 * C311 + C16155 * C327 +
             C16161 * C1178 - C16162 * C1170 - C16161 * C1179 +
             C47992 * C1188) *
                C16157 +
            (C16416 + C16417) * C47961) *
               C47907 * C47704 * C47974) *
              C291 +
          (((C16415 + C16414) * C16157 + (C16418 + C16419) * C47961) * C47907 *
               C47704 * C48001 -
           ((C16214 + C16215) * C47961 + (C16213 + C16212) * C16157) * C47907 *
               C47704 * C48013 -
           ((C16420 + C16421) * C47961 + (C16417 + C16416) * C16157) * C47907 *
               C47704 * C47974) *
              C292 +
          (((C16215 + C16214) * C16157 + (C16216 + C16217) * C47961) * C47907 *
               C47704 * C48013 -
           ((C16161 * C318 - C16162 * C301 - C16161 * C319 + C47992 * C331 +
             C16159 * C316 - C16160 * C300 - C16159 * C317 + C16155 * C330) *
                C47961 +
            (C16419 + C16418) * C16157) *
               C47907 * C47704 * C48001 +
           ((C16421 + C16420) * C16157 +
            (C16159 * C318 - C16160 * C301 - C16159 * C319 + C16155 * C331 +
             C16161 * C1443 - C16162 * C1442 - C16161 * C1444 +
             C47992 * C1445) *
                C47961) *
               C47907 * C47704 * C47974) *
              C47968)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C16159 * C122 - C16160 * C115 - C16159 * C123 + C16155 * C136 +
            C16161 * C308 - C16162 * C296 - C16161 * C309 + C47992 * C326) *
               C16157 +
           (C16212 + C16213) * C47961) *
              C47907 * C47704 * C47686 * C108 -
          ((C16214 + C16215) * C47961 + (C16213 + C16212) * C16157) * C47907 *
              C47704 * C47686 * C109 +
          ((C16215 + C16214) * C16157 + (C16216 + C16217) * C47961) * C47907 *
              C47704 * C47686 * C110 -
          ((C16218 + C16219) * C47961 + (C16217 + C16216) * C16157) * C47907 *
              C47704 * C47686 * C111 +
          ((C16219 + C16218) * C16157 +
           (C16159 * C132 - C16160 * C120 - C16159 * C133 + C16155 * C141 +
            C16161 * C676 - C16162 * C675 - C16161 * C677 + C47992 * C678) *
               C47961) *
              C47907 * C47704 * C47686 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C16159 * C122 - C16160 * C115 - C16159 * C123 + C16155 * C136 +
             C16161 * C308 - C16162 * C296 - C16161 * C309 + C47992 * C326) *
                C16157 +
            (C16212 + C16213) * C47961) *
               C47907 * C48014 -
           ((C16616 + C16617) * C47961 +
            (C16161 * C948 - C16162 * C943 - C16161 * C949 + C47992 * C958 +
             C16159 * C503 - C16160 * C491 - C16159 * C504 + C16155 * C521) *
                C16157) *
               C47907 * C48003 +
           ((C16159 * C505 - C16160 * C492 - C16159 * C506 + C16155 * C522 +
             C16161 * C1315 - C16162 * C1304 - C16161 * C1316 +
             C47992 * C1331) *
                C16157 +
            (C16618 + C16619) * C47961) *
               C47907 * C47977) *
              C47686 * C291 +
          (((C16617 + C16616) * C16157 + (C16620 + C16621) * C47961) * C47907 *
               C48003 -
           ((C16214 + C16215) * C47961 + (C16213 + C16212) * C16157) * C47907 *
               C48014 -
           ((C16622 + C16623) * C47961 + (C16619 + C16618) * C16157) * C47907 *
               C47977) *
              C47686 * C292 +
          (((C16215 + C16214) * C16157 + (C16216 + C16217) * C47961) * C47907 *
               C48014 -
           ((C16161 * C954 - C16162 * C946 - C16161 * C955 + C47992 * C961 +
             C16159 * C511 - C16160 * C495 - C16159 * C512 + C16155 * C525) *
                C47961 +
            (C16621 + C16620) * C16157) *
               C47907 * C48003 +
           ((C16623 + C16622) * C16157 +
            (C16159 * C513 - C16160 * C496 - C16159 * C514 + C16155 * C526 +
             C16161 * C2195 - C16162 * C2194 - C16161 * C2196 +
             C47992 * C2197) *
                C47961) *
               C47907 * C47977) *
              C47686 * C47968)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C16159 * C122 - C16160 * C115 - C16159 * C123 + C16155 * C136 +
             C16161 * C308 - C16162 * C296 - C16161 * C309 + C47992 * C326) *
                C16157 +
            (C16212 + C16213) * C47961) *
               C47907 * C47704 * C1094 -
           ((C16414 + C16415) * C47961 +
            (C16161 * C310 - C16162 * C297 - C16161 * C311 + C47992 * C327 +
             C16159 * C308 - C16160 * C296 - C16159 * C309 + C16155 * C326) *
                C16157) *
               C47907 * C47704 * C1095 +
           ((C16159 * C310 - C16160 * C297 - C16159 * C311 + C16155 * C327 +
             C16161 * C1178 - C16162 * C1170 - C16161 * C1179 +
             C47992 * C1188) *
                C16157 +
            (C16416 + C16417) * C47961) *
               C47907 * C47704 * C47974) *
              C48010 +
          (((C16415 + C16414) * C16157 + (C16418 + C16419) * C47961) * C47907 *
               C47704 * C1095 -
           ((C16214 + C16215) * C47961 + (C16213 + C16212) * C16157) * C47907 *
               C47704 * C1094 -
           ((C16420 + C16421) * C47961 + (C16417 + C16416) * C16157) * C47907 *
               C47704 * C47974) *
              C47997 +
          (((C16215 + C16214) * C16157 + (C16216 + C16217) * C47961) * C47907 *
               C47704 * C1094 -
           ((C16766 + C16767) * C47961 + (C16419 + C16418) * C16157) * C47907 *
               C47704 * C1095 +
           ((C16421 + C16420) * C16157 +
            (C16159 * C318 - C16160 * C301 - C16159 * C319 + C16155 * C331 +
             C16161 * C1443 - C16162 * C1442 - C16161 * C1444 +
             C47992 * C1445) *
                C47961) *
               C47907 * C47704 * C47974) *
              C47968)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C16159 * C122 - C16160 * C115 - C16159 * C123 + C16155 * C136 +
            C16161 * C308 - C16162 * C296 - C16161 * C309 + C47992 * C326) *
               C16157 +
           (C16212 + C16213) * C47961) *
              C47907 * C47704 * C1162 -
          ((C16414 + C16415) * C47961 +
           (C16161 * C310 - C16162 * C297 - C16161 * C311 + C47992 * C327 +
            C16159 * C308 - C16160 * C296 - C16159 * C309 + C16155 * C326) *
               C16157) *
              C47907 * C47704 * C1163 +
          ((C16159 * C310 - C16160 * C297 - C16159 * C311 + C16155 * C327 +
            C16161 * C1178 - C16162 * C1170 - C16161 * C1179 + C47992 * C1188) *
               C16157 +
           (C16416 + C16417) * C47961) *
              C47907 * C47704 * C1164 -
          ((C16161 * C1182 - C16162 * C1172 - C16161 * C1183 + C47992 * C1190 +
            C16159 * C1176 - C16160 * C1169 - C16159 * C1177 + C16155 * C1187) *
               C47961 +
           (C16161 * C1180 - C16162 * C1171 - C16161 * C1181 + C47992 * C1189 +
            C16159 * C1178 - C16160 * C1170 - C16159 * C1179 + C16155 * C1188) *
               C16157) *
              C47907 * C47704 * C1165 +
          ((C16159 * C1180 - C16160 * C1171 - C16159 * C1181 + C16155 * C1189 +
            C16161 * C5991 - C16162 * C5989 - C16161 * C5992 + C47992 * C5995) *
               C16157 +
           (C16159 * C1182 - C16160 * C1172 - C16159 * C1183 + C16155 * C1190 +
            C16161 * C5993 - C16162 * C5990 - C16161 * C5994 + C47992 * C5996) *
               C47961) *
              C47907 * C47704 * C1166) *
         C47658) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C16159 * C122 - C16160 * C115 - C16159 * C123 + C16155 * C136 +
             C16161 * C308 - C16162 * C296 - C16161 * C309 + C47992 * C326) *
                C16157 +
            (C16212 + C16213) * C47961) *
               C47907 * C48014 -
           ((C16616 + C16617) * C47961 +
            (C16161 * C948 - C16162 * C943 - C16161 * C949 + C47992 * C958 +
             C16159 * C503 - C16160 * C491 - C16159 * C504 + C16155 * C521) *
                C16157) *
               C47907 * C48003 +
           ((C16159 * C505 - C16160 * C492 - C16159 * C506 + C16155 * C522 +
             C16161 * C1315 - C16162 * C1304 - C16161 * C1316 +
             C47992 * C1331) *
                C16157 +
            (C16618 + C16619) * C47961) *
               C47907 * C47977) *
              C1094 +
          (((C16159 * C948 - C16160 * C943 - C16159 * C949 + C16155 * C958 +
             C16161 * C1321 - C16162 * C1307 - C16161 * C1322 +
             C47992 * C1334) *
                C16157 +
            (C17130 + C17131) * C47961) *
               C47907 * C48003 -
           ((C16414 + C16415) * C47961 +
            (C16161 * C310 - C16162 * C297 - C16161 * C311 + C47992 * C327 +
             C16159 * C308 - C16160 * C296 - C16159 * C309 + C16155 * C326) *
                C16157) *
               C47907 * C48014 -
           ((C16161 * C1325 - C16162 * C1309 - C16161 * C1326 + C47992 * C1336 +
             C16159 * C1313 - C16160 * C1303 - C16159 * C1314 +
             C16155 * C1330) *
                C47961 +
            (C16161 * C1323 - C16162 * C1308 - C16161 * C1324 + C47992 * C1335 +
             C16159 * C1315 - C16160 * C1304 - C16159 * C1316 +
             C16155 * C1331) *
                C16157) *
               C47907 * C47977) *
              C1095 +
          (((C16159 * C310 - C16160 * C297 - C16159 * C311 + C16155 * C327 +
             C16161 * C1178 - C16162 * C1170 - C16161 * C1179 +
             C47992 * C1188) *
                C16157 +
            (C16416 + C16417) * C47961) *
               C47907 * C48014 -
           ((C16161 * C1727 - C16162 * C1723 - C16161 * C1728 + C47992 * C1732 +
             C16159 * C1319 - C16160 * C1306 - C16159 * C1320 +
             C16155 * C1333) *
                C47961 +
            (C16161 * C1725 - C16162 * C1722 - C16161 * C1726 + C47992 * C1731 +
             C16159 * C1321 - C16160 * C1307 - C16159 * C1322 +
             C16155 * C1334) *
                C16157) *
               C47907 * C48003 +
           ((C16159 * C1323 - C16160 * C1308 - C16159 * C1324 + C16155 * C1335 +
             C16161 * C6145 - C16162 * C6143 - C16161 * C6146 +
             C47992 * C6149) *
                C16157 +
            (C16159 * C1325 - C16160 * C1309 - C16159 * C1326 + C16155 * C1336 +
             C16161 * C6147 - C16162 * C6144 - C16161 * C6148 +
             C47992 * C6150) *
                C47961) *
               C47907 * C47977) *
              C47974) *
         C47658) /
            (p * q * std::sqrt(p + q));
    d2ee[98] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C16159 * C122 - C16160 * C115 - C16159 * C123 + C16155 * C136 +
             C16161 * C308 - C16162 * C296 - C16161 * C309 + C47992 * C326) *
                C16157 +
            (C16212 + C16213) * C47961) *
               C47907 * C47943 -
           ((C16616 + C16617) * C47961 +
            (C16161 * C948 - C16162 * C943 - C16161 * C949 + C47992 * C958 +
             C16159 * C503 - C16160 * C491 - C16159 * C504 + C16155 * C521) *
                C16157) *
               C47907 * C47791) *
              C47686 * C671 +
          (((C16617 + C16616) * C16157 + (C16620 + C16621) * C47961) * C47907 *
               C47791 -
           ((C16214 + C16215) * C47961 + (C16213 + C16212) * C16157) * C47907 *
               C47943) *
              C47686 * C672 +
          (((C16215 + C16214) * C16157 + (C16216 + C16217) * C47961) * C47907 *
               C47943 -
           ((C16910 + C16911) * C47961 + (C16621 + C16620) * C16157) * C47907 *
               C47791) *
              C47686 * C673 +
          (((C16911 + C16910) * C16157 +
            (C16159 * C515 - C16160 * C497 - C16159 * C516 + C16155 * C527 +
             C16161 * C956 - C16162 * C947 - C16161 * C957 + C47992 * C962) *
                C47961) *
               C47907 * C47791 -
           ((C16218 + C16219) * C47961 + (C16217 + C16216) * C16157) * C47907 *
               C47943) *
              C47686 * C47978)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C16159 * C122 - C16160 * C115 - C16159 * C123 + C16155 * C136 +
              C16161 * C308 - C16162 * C296 - C16161 * C309 + C47992 * C326) *
                 C16157 +
             (C16212 + C16213) * C47961) *
                C47907 * C47943 -
            ((C16616 + C16617) * C47961 +
             (C16161 * C948 - C16162 * C943 - C16161 * C949 + C47992 * C958 +
              C16159 * C503 - C16160 * C491 - C16159 * C504 + C16155 * C521) *
                 C16157) *
                C47907 * C47791) *
               C1094 +
           (((C16159 * C948 - C16160 * C943 - C16159 * C949 + C16155 * C958 +
              C16161 * C1321 - C16162 * C1307 - C16161 * C1322 +
              C47992 * C1334) *
                 C16157 +
             (C17130 + C17131) * C47961) *
                C47907 * C47791 -
            ((C16414 + C16415) * C47961 +
             (C16161 * C310 - C16162 * C297 - C16161 * C311 + C47992 * C327 +
              C16159 * C308 - C16160 * C296 - C16159 * C309 + C16155 * C326) *
                 C16157) *
                C47907 * C47943) *
               C1095 +
           (((C16159 * C310 - C16160 * C297 - C16159 * C311 + C16155 * C327 +
              C16161 * C1178 - C16162 * C1170 - C16161 * C1179 +
              C47992 * C1188) *
                 C16157 +
             (C16416 + C16417) * C47961) *
                C47907 * C47943 -
            ((C17858 + C17859) * C47961 +
             (C16161 * C1725 - C16162 * C1722 - C16161 * C1726 +
              C47992 * C1731 + C16159 * C1321 - C16160 * C1307 -
              C16159 * C1322 + C16155 * C1334) *
                 C16157) *
                C47907 * C47791) *
               C47974) *
              C47928 +
          ((((C16617 + C16616) * C16157 + (C16620 + C16621) * C47961) * C47907 *
                C47791 -
            ((C16214 + C16215) * C47961 + (C16213 + C16212) * C16157) * C47907 *
                C47943) *
               C1094 +
           (((C16415 + C16414) * C16157 + (C16418 + C16419) * C47961) * C47907 *
                C47943 -
            ((C17132 + C17133) * C47961 + (C17131 + C17130) * C16157) * C47907 *
                C47791) *
               C1095 +
           (((C17859 + C17858) * C16157 +
             (C16159 * C1317 - C16160 * C1305 - C16159 * C1318 +
              C16155 * C1332 + C16161 * C1729 - C16162 * C1724 -
              C16161 * C1730 + C47992 * C1733) *
                 C47961) *
                C47907 * C47791 -
            ((C16420 + C16421) * C47961 + (C16417 + C16416) * C16157) * C47907 *
                C47943) *
               C47974) *
              C47669)) /
            (p * q * std::sqrt(p + q));
    d2ee[99] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C16159 * C122 - C16160 * C115 - C16159 * C123 + C16155 * C136 +
            C16161 * C308 - C16162 * C296 - C16161 * C309 + C47992 * C326) *
               C16157 +
           (C16212 + C16213) * C47961) *
              C47907 * C47704 * C47686 * C108 -
          ((C16214 + C16215) * C47961 + (C16213 + C16212) * C16157) * C47907 *
              C47704 * C47686 * C109 +
          ((C16215 + C16214) * C16157 + (C16216 + C16217) * C47961) * C47907 *
              C47704 * C47686 * C110 -
          ((C16218 + C16219) * C47961 + (C16217 + C16216) * C16157) * C47907 *
              C47704 * C47686 * C111 +
          ((C16219 + C16218) * C16157 +
           (C16159 * C132 - C16160 * C120 - C16159 * C133 + C16155 * C141 +
            C16161 * C676 - C16162 * C675 - C16161 * C677 + C47992 * C678) *
               C47961) *
              C47907 * C47704 * C47686 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C16159 * C122 - C16160 * C115 - C16159 * C123 + C16155 * C136 +
             C16161 * C308 - C16162 * C296 - C16161 * C309 + C47992 * C326) *
                C16157 +
            (C16212 + C16213) * C47961) *
               C47907 * C47704 * C48013 -
           ((C16414 + C16415) * C47961 +
            (C16161 * C310 - C16162 * C297 - C16161 * C311 + C47992 * C327 +
             C16159 * C308 - C16160 * C296 - C16159 * C309 + C16155 * C326) *
                C16157) *
               C47907 * C47704 * C48001 +
           ((C16159 * C310 - C16160 * C297 - C16159 * C311 + C16155 * C327 +
             C16161 * C1178 - C16162 * C1170 - C16161 * C1179 +
             C47992 * C1188) *
                C16157 +
            (C16416 + C16417) * C47961) *
               C47907 * C47704 * C47974) *
              C291 +
          (((C16415 + C16414) * C16157 + (C16418 + C16419) * C47961) * C47907 *
               C47704 * C48001 -
           ((C16214 + C16215) * C47961 + (C16213 + C16212) * C16157) * C47907 *
               C47704 * C48013 -
           ((C16420 + C16421) * C47961 + (C16417 + C16416) * C16157) * C47907 *
               C47704 * C47974) *
              C292 +
          (((C16215 + C16214) * C16157 + (C16216 + C16217) * C47961) * C47907 *
               C47704 * C48013 -
           ((C16161 * C318 - C16162 * C301 - C16161 * C319 + C47992 * C331 +
             C16159 * C316 - C16160 * C300 - C16159 * C317 + C16155 * C330) *
                C47961 +
            (C16419 + C16418) * C16157) *
               C47907 * C47704 * C48001 +
           ((C16421 + C16420) * C16157 +
            (C16159 * C318 - C16160 * C301 - C16159 * C319 + C16155 * C331 +
             C16161 * C1443 - C16162 * C1442 - C16161 * C1444 +
             C47992 * C1445) *
                C47961) *
               C47907 * C47704 * C47974) *
              C47968)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C16159 * C122 - C16160 * C115 - C16159 * C123 + C16155 * C136 +
             C16161 * C308 - C16162 * C296 - C16161 * C309 + C47992 * C326) *
                C16157 +
            (C16212 + C16213) * C47961) *
               C47907 * C47704 * C1094 -
           ((C16414 + C16415) * C47961 +
            (C16161 * C310 - C16162 * C297 - C16161 * C311 + C47992 * C327 +
             C16159 * C308 - C16160 * C296 - C16159 * C309 + C16155 * C326) *
                C16157) *
               C47907 * C47704 * C1095 +
           ((C16159 * C310 - C16160 * C297 - C16159 * C311 + C16155 * C327 +
             C16161 * C1178 - C16162 * C1170 - C16161 * C1179 +
             C47992 * C1188) *
                C16157 +
            (C16416 + C16417) * C47961) *
               C47907 * C47704 * C47974) *
              C48010 +
          (((C16415 + C16414) * C16157 + (C16418 + C16419) * C47961) * C47907 *
               C47704 * C1095 -
           ((C16214 + C16215) * C47961 + (C16213 + C16212) * C16157) * C47907 *
               C47704 * C1094 -
           ((C16420 + C16421) * C47961 + (C16417 + C16416) * C16157) * C47907 *
               C47704 * C47974) *
              C47997 +
          (((C16215 + C16214) * C16157 + (C16216 + C16217) * C47961) * C47907 *
               C47704 * C1094 -
           ((C16766 + C16767) * C47961 + (C16419 + C16418) * C16157) * C47907 *
               C47704 * C1095 +
           ((C16421 + C16420) * C16157 +
            (C16159 * C318 - C16160 * C301 - C16159 * C319 + C16155 * C331 +
             C16161 * C1443 - C16162 * C1442 - C16161 * C1444 +
             C47992 * C1445) *
                C47961) *
               C47907 * C47704 * C47974) *
              C47968)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C16159 * C122 - C16160 * C115 - C16159 * C123 + C16155 * C136 +
            C16161 * C308 - C16162 * C296 - C16161 * C309 + C47992 * C326) *
               C16157 +
           (C16212 + C16213) * C47961) *
              C47907 * C47704 * C1162 -
          ((C16414 + C16415) * C47961 +
           (C16161 * C310 - C16162 * C297 - C16161 * C311 + C47992 * C327 +
            C16159 * C308 - C16160 * C296 - C16159 * C309 + C16155 * C326) *
               C16157) *
              C47907 * C47704 * C1163 +
          ((C16159 * C310 - C16160 * C297 - C16159 * C311 + C16155 * C327 +
            C16161 * C1178 - C16162 * C1170 - C16161 * C1179 + C47992 * C1188) *
               C16157 +
           (C16416 + C16417) * C47961) *
              C47907 * C47704 * C1164 -
          ((C16161 * C1182 - C16162 * C1172 - C16161 * C1183 + C47992 * C1190 +
            C16159 * C1176 - C16160 * C1169 - C16159 * C1177 + C16155 * C1187) *
               C47961 +
           (C16161 * C1180 - C16162 * C1171 - C16161 * C1181 + C47992 * C1189 +
            C16159 * C1178 - C16160 * C1170 - C16159 * C1179 + C16155 * C1188) *
               C16157) *
              C47907 * C47704 * C1165 +
          ((C16159 * C1180 - C16160 * C1171 - C16159 * C1181 + C16155 * C1189 +
            C16161 * C5991 - C16162 * C5989 - C16161 * C5992 + C47992 * C5995) *
               C16157 +
           (C16159 * C1182 - C16160 * C1172 - C16159 * C1183 + C16155 * C1190 +
            C16161 * C5993 - C16162 * C5990 - C16161 * C5994 + C47992 * C5996) *
               C47961) *
              C47907 * C47704 * C1166) *
         C47658) /
            (p * q * std::sqrt(p + q));
    d2ee[100] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((C21875 * C122 - C21876 * C115 - C21875 * C123 + C21871 * C136 +
            C21877 * C308 - C21878 * C296 - C21877 * C309 + C21872 * C326 +
            C21879 * C310 - C21880 * C297 - C21879 * C311 + C21873 * C327) *
               C47633 * C47907 * C47704 * C47745 -
           (C21879 * C1178 - C21880 * C1170 - C21879 * C1179 + C21873 * C1188 +
            C21877 * C310 - C21878 * C297 - C21877 * C311 + C21872 * C327 +
            C21875 * C308 - C21876 * C296 - C21875 * C309 + C21871 * C326) *
               C47633 * C47907 * C47704 * C47752 +
           (C21875 * C310 - C21876 * C297 - C21875 * C311 + C21871 * C327 +
            C21877 * C1178 - C21878 * C1170 - C21877 * C1179 + C21872 * C1188 +
            C21879 * C1180 - C21880 * C1171 - C21879 * C1181 + C21873 * C1189) *
               C47633 * C47907 * C47704 * C2908) *
              C47663 +
          ((C21875 * C306 - C21876 * C295 - C21875 * C307 + C21871 * C325 +
            C21877 * C312 - C21878 * C298 - C21877 * C313 + C21872 * C328 +
            C21879 * C1176 - C21880 * C1169 - C21879 * C1177 + C21873 * C1187) *
               C47633 * C47907 * C47704 * C47752 -
           (C21879 * C312 - C21880 * C298 - C21879 * C313 + C21873 * C328 +
            C21877 * C306 - C21878 * C295 - C21877 * C307 + C21872 * C325 +
            C21875 * C124 - C21876 * C116 - C21875 * C125 + C21871 * C137) *
               C47633 * C47907 * C47704 * C47745 -
           (C21879 * C1182 - C21880 * C1172 - C21879 * C1183 + C21873 * C1190 +
            C21877 * C1176 - C21878 * C1169 - C21877 * C1177 + C21872 * C1187 +
            C21875 * C312 - C21876 * C298 - C21875 * C313 + C21871 * C328) *
               C47633 * C47907 * C47704 * C2908) *
              C47672 +
          ((C21875 * C126 - C21876 * C117 - C21875 * C127 + C21871 * C138 +
            C21877 * C304 - C21878 * C294 - C21877 * C305 + C21872 * C324 +
            C21879 * C314 - C21880 * C299 - C21879 * C315 + C21873 * C329) *
               C47633 * C47907 * C47704 * C47745 -
           (C21879 * C1174 - C21880 * C1168 - C21879 * C1175 + C21873 * C1186 +
            C21877 * C314 - C21878 * C299 - C21877 * C315 + C21872 * C329 +
            C21875 * C304 - C21876 * C294 - C21875 * C305 + C21871 * C324) *
               C47633 * C47907 * C47704 * C47752 +
           (C21875 * C314 - C21876 * C299 - C21875 * C315 + C21871 * C329 +
            C21877 * C1174 - C21878 * C1168 - C21877 * C1175 + C21872 * C1186 +
            C21879 * C1184 - C21880 * C1173 - C21879 * C1185 + C21873 * C1191) *
               C47633 * C47907 * C47704 * C2908) *
              C2911)) /
        (p * q * std::sqrt(p + q));
    d2ee[101] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C21875 * C122 - C21876 * C115 - C21875 * C123 + C21871 * C136 +
             C21877 * C308 - C21878 * C296 - C21877 * C309 + C21872 * C326 +
             C21879 * C310 - C21880 * C297 - C21879 * C311 + C21873 * C327) *
                C47633 * C47907 * C47943 -
            (C21879 * C1321 - C21880 * C1307 - C21879 * C1322 + C21873 * C1334 +
             C21877 * C948 - C21878 * C943 - C21877 * C949 + C21872 * C958 +
             C21875 * C503 - C21876 * C491 - C21875 * C504 + C21871 * C521) *
                C47633 * C47907 * C47791) *
               C47745 +
           ((C21875 * C948 - C21876 * C943 - C21875 * C949 + C21871 * C958 +
             C21877 * C1321 - C21878 * C1307 - C21877 * C1322 + C21872 * C1334 +
             C21879 * C1725 - C21880 * C1722 - C21879 * C1726 +
             C21873 * C1731) *
                C47633 * C47907 * C47791 -
            (C21879 * C1178 - C21880 * C1170 - C21879 * C1179 + C21873 * C1188 +
             C21877 * C310 - C21878 * C297 - C21877 * C311 + C21872 * C327 +
             C21875 * C308 - C21876 * C296 - C21875 * C309 + C21871 * C326) *
                C47633 * C47907 * C47943) *
               C47752 +
           ((C21875 * C310 - C21876 * C297 - C21875 * C311 + C21871 * C327 +
             C21877 * C1178 - C21878 * C1170 - C21877 * C1179 + C21872 * C1188 +
             C21879 * C1180 - C21880 * C1171 - C21879 * C1181 +
             C21873 * C1189) *
                C47633 * C47907 * C47943 -
            (C21879 * C6635 - C21880 * C6633 - C21879 * C6636 + C21873 * C6639 +
             C21877 * C1725 - C21878 * C1722 - C21877 * C1726 + C21872 * C1731 +
             C21875 * C1321 - C21876 * C1307 - C21875 * C1322 +
             C21871 * C1334) *
                C47633 * C47907 * C47791) *
               C2908) *
              C2648 +
          (((C21875 * C501 - C21876 * C490 - C21875 * C502 + C21871 * C520 +
             C21877 * C950 - C21878 * C944 - C21877 * C951 + C21872 * C959 +
             C21879 * C1319 - C21880 * C1306 - C21879 * C1320 +
             C21873 * C1333) *
                C47633 * C47907 * C47791 -
            (C21879 * C312 - C21880 * C298 - C21879 * C313 + C21873 * C328 +
             C21877 * C306 - C21878 * C295 - C21877 * C307 + C21872 * C325 +
             C21875 * C124 - C21876 * C116 - C21875 * C125 + C21871 * C137) *
                C47633 * C47907 * C47943) *
               C47745 +
           ((C21875 * C306 - C21876 * C295 - C21875 * C307 + C21871 * C325 +
             C21877 * C312 - C21878 * C298 - C21877 * C313 + C21872 * C328 +
             C21879 * C1176 - C21880 * C1169 - C21879 * C1177 +
             C21873 * C1187) *
                C47633 * C47907 * C47943 -
            (C21879 * C1727 - C21880 * C1723 - C21879 * C1728 + C21873 * C1732 +
             C21877 * C1319 - C21878 * C1306 - C21877 * C1320 + C21872 * C1333 +
             C21875 * C950 - C21876 * C944 - C21875 * C951 + C21871 * C959) *
                C47633 * C47907 * C47791) *
               C47752 +
           ((C21875 * C1319 - C21876 * C1306 - C21875 * C1320 + C21871 * C1333 +
             C21877 * C1727 - C21878 * C1723 - C21877 * C1728 + C21872 * C1732 +
             C21879 * C6637 - C21880 * C6634 - C21879 * C6638 +
             C21873 * C6640) *
                C47633 * C47907 * C47791 -
            (C21879 * C1182 - C21880 * C1172 - C21879 * C1183 + C21873 * C1190 +
             C21877 * C1176 - C21878 * C1169 - C21877 * C1177 + C21872 * C1187 +
             C21875 * C312 - C21876 * C298 - C21875 * C313 + C21871 * C328) *
                C47633 * C47907 * C47943) *
               C2908) *
              C47669)) /
        (p * q * std::sqrt(p + q));
    d2ee[102] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C21875 * C122 - C21876 * C115 - C21875 * C123 + C21871 * C136 +
            C21877 * C308 - C21878 * C296 - C21877 * C309 + C21872 * C326 +
            C21879 * C310 - C21880 * C297 - C21879 * C311 + C21873 * C327) *
               C47633 * C47907 * C47704 * C48020 -
           (C21879 * C1178 - C21880 * C1170 - C21879 * C1179 + C21873 * C1188 +
            C21877 * C310 - C21878 * C297 - C21877 * C311 + C21872 * C327 +
            C21875 * C308 - C21876 * C296 - C21875 * C309 + C21871 * C326) *
               C47633 * C47907 * C47704 * C48016 +
           (C21875 * C310 - C21876 * C297 - C21875 * C311 + C21871 * C327 +
            C21877 * C1178 - C21878 * C1170 - C21877 * C1179 + C21872 * C1188 +
            C21879 * C1180 - C21880 * C1171 - C21879 * C1181 + C21873 * C1189) *
               C47633 * C47907 * C47704 * C48006 -
           (C21879 * C5991 - C21880 * C5989 - C21879 * C5992 + C21873 * C5995 +
            C21877 * C1180 - C21878 * C1171 - C21877 * C1181 + C21872 * C1189 +
            C21875 * C1178 - C21876 * C1170 - C21875 * C1179 + C21871 * C1188) *
               C47633 * C47907 * C47704 * C47984) *
              C2648 +
          ((C21875 * C306 - C21876 * C295 - C21875 * C307 + C21871 * C325 +
            C21877 * C312 - C21878 * C298 - C21877 * C313 + C21872 * C328 +
            C21879 * C1176 - C21880 * C1169 - C21879 * C1177 + C21873 * C1187) *
               C47633 * C47907 * C47704 * C48016 -
           (C21879 * C312 - C21880 * C298 - C21879 * C313 + C21873 * C328 +
            C21877 * C306 - C21878 * C295 - C21877 * C307 + C21872 * C325 +
            C21875 * C124 - C21876 * C116 - C21875 * C125 + C21871 * C137) *
               C47633 * C47907 * C47704 * C48020 -
           (C21879 * C1182 - C21880 * C1172 - C21879 * C1183 + C21873 * C1190 +
            C21877 * C1176 - C21878 * C1169 - C21877 * C1177 + C21872 * C1187 +
            C21875 * C312 - C21876 * C298 - C21875 * C313 + C21871 * C328) *
               C47633 * C47907 * C47704 * C48006 +
           (C21875 * C1176 - C21876 * C1169 - C21875 * C1177 + C21871 * C1187 +
            C21877 * C1182 - C21878 * C1172 - C21877 * C1183 + C21872 * C1190 +
            C21879 * C5993 - C21880 * C5990 - C21879 * C5994 + C21873 * C5996) *
               C47633 * C47907 * C47704 * C47984) *
              C47669)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C21875 * C122 - C21876 * C115 - C21875 * C123 + C21871 * C136 +
            C21877 * C308 - C21878 * C296 - C21877 * C309 + C21872 * C326 +
            C21879 * C310 - C21880 * C297 - C21879 * C311 + C21873 * C327) *
               C47633 * C47907 * C47704 * C2540 -
           (C21879 * C1178 - C21880 * C1170 - C21879 * C1179 + C21873 * C1188 +
            C21877 * C310 - C21878 * C297 - C21877 * C311 + C21872 * C327 +
            C21875 * C308 - C21876 * C296 - C21875 * C309 + C21871 * C326) *
               C47633 * C47907 * C47704 * C47749) *
              C48019 +
          ((C21875 * C306 - C21876 * C295 - C21875 * C307 + C21871 * C325 +
            C21877 * C312 - C21878 * C298 - C21877 * C313 + C21872 * C328 +
            C21879 * C1176 - C21880 * C1169 - C21879 * C1177 + C21873 * C1187) *
               C47633 * C47907 * C47704 * C47749 -
           (C21879 * C312 - C21880 * C298 - C21879 * C313 + C21873 * C328 +
            C21877 * C306 - C21878 * C295 - C21877 * C307 + C21872 * C325 +
            C21875 * C124 - C21876 * C116 - C21875 * C125 + C21871 * C137) *
               C47633 * C47907 * C47704 * C2540) *
              C48012 +
          ((C21875 * C126 - C21876 * C117 - C21875 * C127 + C21871 * C138 +
            C21877 * C304 - C21878 * C294 - C21877 * C305 + C21872 * C324 +
            C21879 * C314 - C21880 * C299 - C21879 * C315 + C21873 * C329) *
               C47633 * C47907 * C47704 * C2540 -
           (C21879 * C1174 - C21880 * C1168 - C21879 * C1175 + C21873 * C1186 +
            C21877 * C314 - C21878 * C299 - C21877 * C315 + C21872 * C329 +
            C21875 * C304 - C21876 * C294 - C21875 * C305 + C21871 * C324) *
               C47633 * C47907 * C47704 * C47749) *
              C47999 +
          ((C21875 * C316 - C21876 * C300 - C21875 * C317 + C21871 * C330 +
            C21877 * C318 - C21878 * C301 - C21877 * C319 + C21872 * C331 +
            C21879 * C1443 - C21880 * C1442 - C21879 * C1444 + C21873 * C1445) *
               C47633 * C47907 * C47704 * C47749 -
           (C21879 * C318 - C21880 * C301 - C21879 * C319 + C21873 * C331 +
            C21877 * C316 - C21878 * C300 - C21877 * C317 + C21872 * C330 +
            C21875 * C128 - C21876 * C118 - C21875 * C129 + C21871 * C139) *
               C47633 * C47907 * C47704 * C2540) *
              C47978)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C21875 * C122 - C21876 * C115 - C21875 * C123 + C21871 * C136 +
             C21877 * C308 - C21878 * C296 - C21877 * C309 + C21872 * C326 +
             C21879 * C310 - C21880 * C297 - C21879 * C311 + C21873 * C327) *
                C47633 * C47907 * C48014 -
            (C21879 * C1321 - C21880 * C1307 - C21879 * C1322 + C21873 * C1334 +
             C21877 * C948 - C21878 * C943 - C21877 * C949 + C21872 * C958 +
             C21875 * C503 - C21876 * C491 - C21875 * C504 + C21871 * C521) *
                C47633 * C47907 * C48003 +
            (C21875 * C505 - C21876 * C492 - C21875 * C506 + C21871 * C522 +
             C21877 * C1315 - C21878 * C1304 - C21877 * C1316 + C21872 * C1331 +
             C21879 * C1323 - C21880 * C1308 - C21879 * C1324 +
             C21873 * C1335) *
                C47633 * C47907 * C47977) *
               C2540 +
           ((C21875 * C948 - C21876 * C943 - C21875 * C949 + C21871 * C958 +
             C21877 * C1321 - C21878 * C1307 - C21877 * C1322 + C21872 * C1334 +
             C21879 * C1725 - C21880 * C1722 - C21879 * C1726 +
             C21873 * C1731) *
                C47633 * C47907 * C48003 -
            (C21879 * C1178 - C21880 * C1170 - C21879 * C1179 + C21873 * C1188 +
             C21877 * C310 - C21878 * C297 - C21877 * C311 + C21872 * C327 +
             C21875 * C308 - C21876 * C296 - C21875 * C309 + C21871 * C326) *
                C47633 * C47907 * C48014 -
            (C21879 * C6145 - C21880 * C6143 - C21879 * C6146 + C21873 * C6149 +
             C21877 * C1323 - C21878 * C1308 - C21877 * C1324 + C21872 * C1335 +
             C21875 * C1315 - C21876 * C1304 - C21875 * C1316 +
             C21871 * C1331) *
                C47633 * C47907 * C47977) *
               C47749) *
              C2648 +
          (((C21875 * C501 - C21876 * C490 - C21875 * C502 + C21871 * C520 +
             C21877 * C950 - C21878 * C944 - C21877 * C951 + C21872 * C959 +
             C21879 * C1319 - C21880 * C1306 - C21879 * C1320 +
             C21873 * C1333) *
                C47633 * C47907 * C48003 -
            (C21879 * C312 - C21880 * C298 - C21879 * C313 + C21873 * C328 +
             C21877 * C306 - C21878 * C295 - C21877 * C307 + C21872 * C325 +
             C21875 * C124 - C21876 * C116 - C21875 * C125 + C21871 * C137) *
                C47633 * C47907 * C48014 -
            (C21879 * C1325 - C21880 * C1309 - C21879 * C1326 + C21873 * C1336 +
             C21877 * C1313 - C21878 * C1303 - C21877 * C1314 + C21872 * C1330 +
             C21875 * C507 - C21876 * C493 - C21875 * C508 + C21871 * C523) *
                C47633 * C47907 * C47977) *
               C2540 +
           ((C21875 * C306 - C21876 * C295 - C21875 * C307 + C21871 * C325 +
             C21877 * C312 - C21878 * C298 - C21877 * C313 + C21872 * C328 +
             C21879 * C1176 - C21880 * C1169 - C21879 * C1177 +
             C21873 * C1187) *
                C47633 * C47907 * C48014 -
            (C21879 * C1727 - C21880 * C1723 - C21879 * C1728 + C21873 * C1732 +
             C21877 * C1319 - C21878 * C1306 - C21877 * C1320 + C21872 * C1333 +
             C21875 * C950 - C21876 * C944 - C21875 * C951 + C21871 * C959) *
                C47633 * C47907 * C48003 +
            (C21875 * C1313 - C21876 * C1303 - C21875 * C1314 + C21871 * C1330 +
             C21877 * C1325 - C21878 * C1309 - C21877 * C1326 + C21872 * C1336 +
             C21879 * C6147 - C21880 * C6144 - C21879 * C6148 +
             C21873 * C6150) *
                C47633 * C47907 * C47977) *
               C47749) *
              C47669)) /
            (p * q * std::sqrt(p + q));
    d2ee[103] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C21875 * C122 - C21876 * C115 - C21875 * C123 + C21871 * C136 +
             C21877 * C308 - C21878 * C296 - C21877 * C309 + C21872 * C326 +
             C21879 * C310 - C21880 * C297 - C21879 * C311 + C21873 * C327) *
                C47633 * C47907 * C47943 -
            (C21879 * C1321 - C21880 * C1307 - C21879 * C1322 + C21873 * C1334 +
             C21877 * C948 - C21878 * C943 - C21877 * C949 + C21872 * C958 +
             C21875 * C503 - C21876 * C491 - C21875 * C504 + C21871 * C521) *
                C47633 * C47907 * C47791) *
               C2540 +
           ((C21875 * C948 - C21876 * C943 - C21875 * C949 + C21871 * C958 +
             C21877 * C1321 - C21878 * C1307 - C21877 * C1322 + C21872 * C1334 +
             C21879 * C1725 - C21880 * C1722 - C21879 * C1726 +
             C21873 * C1731) *
                C47633 * C47907 * C47791 -
            (C21879 * C1178 - C21880 * C1170 - C21879 * C1179 + C21873 * C1188 +
             C21877 * C310 - C21878 * C297 - C21877 * C311 + C21872 * C327 +
             C21875 * C308 - C21876 * C296 - C21875 * C309 + C21871 * C326) *
                C47633 * C47907 * C47943) *
               C47749) *
              C47663 +
          (((C21875 * C501 - C21876 * C490 - C21875 * C502 + C21871 * C520 +
             C21877 * C950 - C21878 * C944 - C21877 * C951 + C21872 * C959 +
             C21879 * C1319 - C21880 * C1306 - C21879 * C1320 +
             C21873 * C1333) *
                C47633 * C47907 * C47791 -
            (C21879 * C312 - C21880 * C298 - C21879 * C313 + C21873 * C328 +
             C21877 * C306 - C21878 * C295 - C21877 * C307 + C21872 * C325 +
             C21875 * C124 - C21876 * C116 - C21875 * C125 + C21871 * C137) *
                C47633 * C47907 * C47943) *
               C2540 +
           ((C21875 * C306 - C21876 * C295 - C21875 * C307 + C21871 * C325 +
             C21877 * C312 - C21878 * C298 - C21877 * C313 + C21872 * C328 +
             C21879 * C1176 - C21880 * C1169 - C21879 * C1177 +
             C21873 * C1187) *
                C47633 * C47907 * C47943 -
            (C21879 * C1727 - C21880 * C1723 - C21879 * C1728 + C21873 * C1732 +
             C21877 * C1319 - C21878 * C1306 - C21877 * C1320 + C21872 * C1333 +
             C21875 * C950 - C21876 * C944 - C21875 * C951 + C21871 * C959) *
                C47633 * C47907 * C47791) *
               C47749) *
              C47672 +
          (((C21875 * C126 - C21876 * C117 - C21875 * C127 + C21871 * C138 +
             C21877 * C304 - C21878 * C294 - C21877 * C305 + C21872 * C324 +
             C21879 * C314 - C21880 * C299 - C21879 * C315 + C21873 * C329) *
                C47633 * C47907 * C47943 -
            (C21879 * C1317 - C21880 * C1305 - C21879 * C1318 + C21873 * C1332 +
             C21877 * C952 - C21878 * C945 - C21877 * C953 + C21872 * C960 +
             C21875 * C499 - C21876 * C489 - C21875 * C500 + C21871 * C519) *
                C47633 * C47907 * C47791) *
               C2540 +
           ((C21875 * C952 - C21876 * C945 - C21875 * C953 + C21871 * C960 +
             C21877 * C1317 - C21878 * C1305 - C21877 * C1318 + C21872 * C1332 +
             C21879 * C1729 - C21880 * C1724 - C21879 * C1730 +
             C21873 * C1733) *
                C47633 * C47907 * C47791 -
            (C21879 * C1174 - C21880 * C1168 - C21879 * C1175 + C21873 * C1186 +
             C21877 * C314 - C21878 * C299 - C21877 * C315 + C21872 * C329 +
             C21875 * C304 - C21876 * C294 - C21875 * C305 + C21871 * C324) *
                C47633 * C47907 * C47943) *
               C47749) *
              C2911)) /
        (p * q * std::sqrt(p + q));
    d2ee[104] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C21875 * C122 - C21876 * C115 - C21875 * C123 + C21871 * C136 +
            C21877 * C308 - C21878 * C296 - C21877 * C309 + C21872 * C326 +
            C21879 * C310 - C21880 * C297 - C21879 * C311 + C21873 * C327) *
               C47633 * C47907 * C47704 * C2540 -
           (C21879 * C1178 - C21880 * C1170 - C21879 * C1179 + C21873 * C1188 +
            C21877 * C310 - C21878 * C297 - C21877 * C311 + C21872 * C327 +
            C21875 * C308 - C21876 * C296 - C21875 * C309 + C21871 * C326) *
               C47633 * C47907 * C47704 * C47749) *
              C48019 +
          ((C21875 * C306 - C21876 * C295 - C21875 * C307 + C21871 * C325 +
            C21877 * C312 - C21878 * C298 - C21877 * C313 + C21872 * C328 +
            C21879 * C1176 - C21880 * C1169 - C21879 * C1177 + C21873 * C1187) *
               C47633 * C47907 * C47704 * C47749 -
           (C21879 * C312 - C21880 * C298 - C21879 * C313 + C21873 * C328 +
            C21877 * C306 - C21878 * C295 - C21877 * C307 + C21872 * C325 +
            C21875 * C124 - C21876 * C116 - C21875 * C125 + C21871 * C137) *
               C47633 * C47907 * C47704 * C2540) *
              C48012 +
          ((C21875 * C126 - C21876 * C117 - C21875 * C127 + C21871 * C138 +
            C21877 * C304 - C21878 * C294 - C21877 * C305 + C21872 * C324 +
            C21879 * C314 - C21880 * C299 - C21879 * C315 + C21873 * C329) *
               C47633 * C47907 * C47704 * C2540 -
           (C21879 * C1174 - C21880 * C1168 - C21879 * C1175 + C21873 * C1186 +
            C21877 * C314 - C21878 * C299 - C21877 * C315 + C21872 * C329 +
            C21875 * C304 - C21876 * C294 - C21875 * C305 + C21871 * C324) *
               C47633 * C47907 * C47704 * C47749) *
              C47999 +
          ((C21875 * C316 - C21876 * C300 - C21875 * C317 + C21871 * C330 +
            C21877 * C318 - C21878 * C301 - C21877 * C319 + C21872 * C331 +
            C21879 * C1443 - C21880 * C1442 - C21879 * C1444 + C21873 * C1445) *
               C47633 * C47907 * C47704 * C47749 -
           (C21879 * C318 - C21880 * C301 - C21879 * C319 + C21873 * C331 +
            C21877 * C316 - C21878 * C300 - C21877 * C317 + C21872 * C330 +
            C21875 * C128 - C21876 * C118 - C21875 * C129 + C21871 * C139) *
               C47633 * C47907 * C47704 * C2540) *
              C47978)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C21875 * C122 - C21876 * C115 - C21875 * C123 + C21871 * C136 +
            C21877 * C308 - C21878 * C296 - C21877 * C309 + C21872 * C326 +
            C21879 * C310 - C21880 * C297 - C21879 * C311 + C21873 * C327) *
               C47633 * C47907 * C47704 * C48020 -
           (C21879 * C1178 - C21880 * C1170 - C21879 * C1179 + C21873 * C1188 +
            C21877 * C310 - C21878 * C297 - C21877 * C311 + C21872 * C327 +
            C21875 * C308 - C21876 * C296 - C21875 * C309 + C21871 * C326) *
               C47633 * C47907 * C47704 * C48016 +
           (C21875 * C310 - C21876 * C297 - C21875 * C311 + C21871 * C327 +
            C21877 * C1178 - C21878 * C1170 - C21877 * C1179 + C21872 * C1188 +
            C21879 * C1180 - C21880 * C1171 - C21879 * C1181 + C21873 * C1189) *
               C47633 * C47907 * C47704 * C48006 -
           (C21879 * C5991 - C21880 * C5989 - C21879 * C5992 + C21873 * C5995 +
            C21877 * C1180 - C21878 * C1171 - C21877 * C1181 + C21872 * C1189 +
            C21875 * C1178 - C21876 * C1170 - C21875 * C1179 + C21871 * C1188) *
               C47633 * C47907 * C47704 * C47984) *
              C2648 +
          ((C21875 * C306 - C21876 * C295 - C21875 * C307 + C21871 * C325 +
            C21877 * C312 - C21878 * C298 - C21877 * C313 + C21872 * C328 +
            C21879 * C1176 - C21880 * C1169 - C21879 * C1177 + C21873 * C1187) *
               C47633 * C47907 * C47704 * C48016 -
           (C21879 * C312 - C21880 * C298 - C21879 * C313 + C21873 * C328 +
            C21877 * C306 - C21878 * C295 - C21877 * C307 + C21872 * C325 +
            C21875 * C124 - C21876 * C116 - C21875 * C125 + C21871 * C137) *
               C47633 * C47907 * C47704 * C48020 -
           (C21879 * C1182 - C21880 * C1172 - C21879 * C1183 + C21873 * C1190 +
            C21877 * C1176 - C21878 * C1169 - C21877 * C1177 + C21872 * C1187 +
            C21875 * C312 - C21876 * C298 - C21875 * C313 + C21871 * C328) *
               C47633 * C47907 * C47704 * C48006 +
           (C21875 * C1176 - C21876 * C1169 - C21875 * C1177 + C21871 * C1187 +
            C21877 * C1182 - C21878 * C1172 - C21877 * C1183 + C21872 * C1190 +
            C21879 * C5993 - C21880 * C5990 - C21879 * C5994 + C21873 * C5996) *
               C47633 * C47907 * C47704 * C47984) *
              C47669)) /
            (p * q * std::sqrt(p + q));
    d2ee[105] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C21875 * C122 - C21876 * C115 - C21875 * C123 + C21871 * C136 +
             C21877 * C308 - C21878 * C296 - C21877 * C309 + C21872 * C326 +
             C21879 * C310 - C21880 * C297 - C21879 * C311 + C21873 * C327) *
                C47633 * C47907 * C3302 -
            (C21879 * C1321 - C21880 * C1307 - C21879 * C1322 + C21873 * C1334 +
             C21877 * C948 - C21878 * C943 - C21877 * C949 + C21872 * C958 +
             C21875 * C503 - C21876 * C491 - C21875 * C504 + C21871 * C521) *
                C47633 * C47907 * C47791) *
               C47745 +
           ((C21875 * C948 - C21876 * C943 - C21875 * C949 + C21871 * C958 +
             C21877 * C1321 - C21878 * C1307 - C21877 * C1322 + C21872 * C1334 +
             C21879 * C1725 - C21880 * C1722 - C21879 * C1726 +
             C21873 * C1731) *
                C47633 * C47907 * C47791 -
            (C21879 * C1178 - C21880 * C1170 - C21879 * C1179 + C21873 * C1188 +
             C21877 * C310 - C21878 * C297 - C21877 * C311 + C21872 * C327 +
             C21875 * C308 - C21876 * C296 - C21875 * C309 + C21871 * C326) *
                C47633 * C47907 * C3302) *
               C47752 +
           ((C21875 * C310 - C21876 * C297 - C21875 * C311 + C21871 * C327 +
             C21877 * C1178 - C21878 * C1170 - C21877 * C1179 + C21872 * C1188 +
             C21879 * C1180 - C21880 * C1171 - C21879 * C1181 +
             C21873 * C1189) *
                C47633 * C47907 * C3302 -
            (C21879 * C6635 - C21880 * C6633 - C21879 * C6636 + C21873 * C6639 +
             C21877 * C1725 - C21878 * C1722 - C21877 * C1726 + C21872 * C1731 +
             C21875 * C1321 - C21876 * C1307 - C21875 * C1322 +
             C21871 * C1334) *
                C47633 * C47907 * C47791) *
               C2908) *
              C47928 +
          (((C21875 * C501 - C21876 * C490 - C21875 * C502 + C21871 * C520 +
             C21877 * C950 - C21878 * C944 - C21877 * C951 + C21872 * C959 +
             C21879 * C1319 - C21880 * C1306 - C21879 * C1320 +
             C21873 * C1333) *
                C47633 * C47907 * C47791 -
            (C21879 * C312 - C21880 * C298 - C21879 * C313 + C21873 * C328 +
             C21877 * C306 - C21878 * C295 - C21877 * C307 + C21872 * C325 +
             C21875 * C124 - C21876 * C116 - C21875 * C125 + C21871 * C137) *
                C47633 * C47907 * C3302) *
               C47745 +
           ((C21875 * C306 - C21876 * C295 - C21875 * C307 + C21871 * C325 +
             C21877 * C312 - C21878 * C298 - C21877 * C313 + C21872 * C328 +
             C21879 * C1176 - C21880 * C1169 - C21879 * C1177 +
             C21873 * C1187) *
                C47633 * C47907 * C3302 -
            (C21879 * C1727 - C21880 * C1723 - C21879 * C1728 + C21873 * C1732 +
             C21877 * C1319 - C21878 * C1306 - C21877 * C1320 + C21872 * C1333 +
             C21875 * C950 - C21876 * C944 - C21875 * C951 + C21871 * C959) *
                C47633 * C47907 * C47791) *
               C47752 +
           ((C21875 * C1319 - C21876 * C1306 - C21875 * C1320 + C21871 * C1333 +
             C21877 * C1727 - C21878 * C1723 - C21877 * C1728 + C21872 * C1732 +
             C21879 * C6637 - C21880 * C6634 - C21879 * C6638 +
             C21873 * C6640) *
                C47633 * C47907 * C47791 -
            (C21879 * C1182 - C21880 * C1172 - C21879 * C1183 + C21873 * C1190 +
             C21877 * C1176 - C21878 * C1169 - C21877 * C1177 + C21872 * C1187 +
             C21875 * C312 - C21876 * C298 - C21875 * C313 + C21871 * C328) *
                C47633 * C47907 * C3302) *
               C2908) *
              C47669)) /
        (p * q * std::sqrt(p + q));
    d2ee[106] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((C21875 * C122 - C21876 * C115 - C21875 * C123 + C21871 * C136 +
            C21877 * C308 - C21878 * C296 - C21877 * C309 + C21872 * C326 +
            C21879 * C310 - C21880 * C297 - C21879 * C311 + C21873 * C327) *
               C47633 * C47907 * C47787 -
           (C21879 * C1321 - C21880 * C1307 - C21879 * C1322 + C21873 * C1334 +
            C21877 * C948 - C21878 * C943 - C21877 * C949 + C21872 * C958 +
            C21875 * C503 - C21876 * C491 - C21875 * C504 + C21871 * C521) *
               C47633 * C47907 * C47794 +
           (C21875 * C505 - C21876 * C492 - C21875 * C506 + C21871 * C522 +
            C21877 * C1315 - C21878 * C1304 - C21877 * C1316 + C21872 * C1331 +
            C21879 * C1323 - C21880 * C1308 - C21879 * C1324 + C21873 * C1335) *
               C47633 * C47907 * C3810) *
              C47745 +
          ((C21875 * C948 - C21876 * C943 - C21875 * C949 + C21871 * C958 +
            C21877 * C1321 - C21878 * C1307 - C21877 * C1322 + C21872 * C1334 +
            C21879 * C1725 - C21880 * C1722 - C21879 * C1726 + C21873 * C1731) *
               C47633 * C47907 * C47794 -
           (C21879 * C1178 - C21880 * C1170 - C21879 * C1179 + C21873 * C1188 +
            C21877 * C310 - C21878 * C297 - C21877 * C311 + C21872 * C327 +
            C21875 * C308 - C21876 * C296 - C21875 * C309 + C21871 * C326) *
               C47633 * C47907 * C47787 -
           (C21879 * C6145 - C21880 * C6143 - C21879 * C6146 + C21873 * C6149 +
            C21877 * C1323 - C21878 * C1308 - C21877 * C1324 + C21872 * C1335 +
            C21875 * C1315 - C21876 * C1304 - C21875 * C1316 + C21871 * C1331) *
               C47633 * C47907 * C3810) *
              C47752 +
          ((C21875 * C310 - C21876 * C297 - C21875 * C311 + C21871 * C327 +
            C21877 * C1178 - C21878 * C1170 - C21877 * C1179 + C21872 * C1188 +
            C21879 * C1180 - C21880 * C1171 - C21879 * C1181 + C21873 * C1189) *
               C47633 * C47907 * C47787 -
           (C21879 * C6635 - C21880 * C6633 - C21879 * C6636 + C21873 * C6639 +
            C21877 * C1725 - C21878 * C1722 - C21877 * C1726 + C21872 * C1731 +
            C21875 * C1321 - C21876 * C1307 - C21875 * C1322 + C21871 * C1334) *
               C47633 * C47907 * C47794 +
           (C21875 * C1323 - C21876 * C1308 - C21875 * C1324 + C21871 * C1335 +
            C21877 * C6145 - C21878 * C6143 - C21877 * C6146 + C21872 * C6149 +
            C21879 * C22730 - C21880 * C22729 - C21879 * C22731 +
            C21873 * C22732) *
               C47633 * C47907 * C3810) *
              C2908) *
         C47658) /
        (p * q * std::sqrt(p + q));
    d2ee[107] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C21875 * C122 - C21876 * C115 - C21875 * C123 + C21871 * C136 +
            C21877 * C308 - C21878 * C296 - C21877 * C309 + C21872 * C326 +
            C21879 * C310 - C21880 * C297 - C21879 * C311 + C21873 * C327) *
               C47633 * C47907 * C3302 -
           (C21879 * C1321 - C21880 * C1307 - C21879 * C1322 + C21873 * C1334 +
            C21877 * C948 - C21878 * C943 - C21877 * C949 + C21872 * C958 +
            C21875 * C503 - C21876 * C491 - C21875 * C504 + C21871 * C521) *
               C47633 * C47907 * C47791) *
              C48020 +
          ((C21875 * C948 - C21876 * C943 - C21875 * C949 + C21871 * C958 +
            C21877 * C1321 - C21878 * C1307 - C21877 * C1322 + C21872 * C1334 +
            C21879 * C1725 - C21880 * C1722 - C21879 * C1726 + C21873 * C1731) *
               C47633 * C47907 * C47791 -
           (C21879 * C1178 - C21880 * C1170 - C21879 * C1179 + C21873 * C1188 +
            C21877 * C310 - C21878 * C297 - C21877 * C311 + C21872 * C327 +
            C21875 * C308 - C21876 * C296 - C21875 * C309 + C21871 * C326) *
               C47633 * C47907 * C3302) *
              C48016 +
          ((C21875 * C310 - C21876 * C297 - C21875 * C311 + C21871 * C327 +
            C21877 * C1178 - C21878 * C1170 - C21877 * C1179 + C21872 * C1188 +
            C21879 * C1180 - C21880 * C1171 - C21879 * C1181 + C21873 * C1189) *
               C47633 * C47907 * C3302 -
           (C21879 * C6635 - C21880 * C6633 - C21879 * C6636 + C21873 * C6639 +
            C21877 * C1725 - C21878 * C1722 - C21877 * C1726 + C21872 * C1731 +
            C21875 * C1321 - C21876 * C1307 - C21875 * C1322 + C21871 * C1334) *
               C47633 * C47907 * C47791) *
              C48006 +
          ((C21875 * C1725 - C21876 * C1722 - C21875 * C1726 + C21871 * C1731 +
            C21877 * C6635 - C21878 * C6633 - C21877 * C6636 + C21872 * C6639 +
            C21879 * C23076 - C21880 * C23075 - C21879 * C23077 +
            C21873 * C23078) *
               C47633 * C47907 * C47791 -
           (C21879 * C5991 - C21880 * C5989 - C21879 * C5992 + C21873 * C5995 +
            C21877 * C1180 - C21878 * C1171 - C21877 * C1181 + C21872 * C1189 +
            C21875 * C1178 - C21876 * C1170 - C21875 * C1179 + C21871 * C1188) *
               C47633 * C47907 * C3302) *
              C47984) *
         C47658) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C21875 * C122 - C21876 * C115 - C21875 * C123 + C21871 * C136 +
             C21877 * C308 - C21878 * C296 - C21877 * C309 + C21872 * C326 +
             C21879 * C310 - C21880 * C297 - C21879 * C311 + C21873 * C327) *
                C47633 * C47907 * C3302 -
            (C21879 * C1321 - C21880 * C1307 - C21879 * C1322 + C21873 * C1334 +
             C21877 * C948 - C21878 * C943 - C21877 * C949 + C21872 * C958 +
             C21875 * C503 - C21876 * C491 - C21875 * C504 + C21871 * C521) *
                C47633 * C47907 * C47791) *
               C2540 +
           ((C21875 * C948 - C21876 * C943 - C21875 * C949 + C21871 * C958 +
             C21877 * C1321 - C21878 * C1307 - C21877 * C1322 + C21872 * C1334 +
             C21879 * C1725 - C21880 * C1722 - C21879 * C1726 +
             C21873 * C1731) *
                C47633 * C47907 * C47791 -
            (C21879 * C1178 - C21880 * C1170 - C21879 * C1179 + C21873 * C1188 +
             C21877 * C310 - C21878 * C297 - C21877 * C311 + C21872 * C327 +
             C21875 * C308 - C21876 * C296 - C21875 * C309 + C21871 * C326) *
                C47633 * C47907 * C3302) *
               C47749) *
              C48010 +
          (((C21875 * C501 - C21876 * C490 - C21875 * C502 + C21871 * C520 +
             C21877 * C950 - C21878 * C944 - C21877 * C951 + C21872 * C959 +
             C21879 * C1319 - C21880 * C1306 - C21879 * C1320 +
             C21873 * C1333) *
                C47633 * C47907 * C47791 -
            (C21879 * C312 - C21880 * C298 - C21879 * C313 + C21873 * C328 +
             C21877 * C306 - C21878 * C295 - C21877 * C307 + C21872 * C325 +
             C21875 * C124 - C21876 * C116 - C21875 * C125 + C21871 * C137) *
                C47633 * C47907 * C3302) *
               C2540 +
           ((C21875 * C306 - C21876 * C295 - C21875 * C307 + C21871 * C325 +
             C21877 * C312 - C21878 * C298 - C21877 * C313 + C21872 * C328 +
             C21879 * C1176 - C21880 * C1169 - C21879 * C1177 +
             C21873 * C1187) *
                C47633 * C47907 * C3302 -
            (C21879 * C1727 - C21880 * C1723 - C21879 * C1728 + C21873 * C1732 +
             C21877 * C1319 - C21878 * C1306 - C21877 * C1320 + C21872 * C1333 +
             C21875 * C950 - C21876 * C944 - C21875 * C951 + C21871 * C959) *
                C47633 * C47907 * C47791) *
               C47749) *
              C47997 +
          (((C21875 * C126 - C21876 * C117 - C21875 * C127 + C21871 * C138 +
             C21877 * C304 - C21878 * C294 - C21877 * C305 + C21872 * C324 +
             C21879 * C314 - C21880 * C299 - C21879 * C315 + C21873 * C329) *
                C47633 * C47907 * C3302 -
            (C21879 * C1317 - C21880 * C1305 - C21879 * C1318 + C21873 * C1332 +
             C21877 * C952 - C21878 * C945 - C21877 * C953 + C21872 * C960 +
             C21875 * C499 - C21876 * C489 - C21875 * C500 + C21871 * C519) *
                C47633 * C47907 * C47791) *
               C2540 +
           ((C21875 * C952 - C21876 * C945 - C21875 * C953 + C21871 * C960 +
             C21877 * C1317 - C21878 * C1305 - C21877 * C1318 + C21872 * C1332 +
             C21879 * C1729 - C21880 * C1724 - C21879 * C1730 +
             C21873 * C1733) *
                C47633 * C47907 * C47791 -
            (C21879 * C1174 - C21880 * C1168 - C21879 * C1175 + C21873 * C1186 +
             C21877 * C314 - C21878 * C299 - C21877 * C315 + C21872 * C329 +
             C21875 * C304 - C21876 * C294 - C21875 * C305 + C21871 * C324) *
                C47633 * C47907 * C3302) *
               C47749) *
              C47968)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C21875 * C122 - C21876 * C115 - C21875 * C123 + C21871 * C136 +
            C21877 * C308 - C21878 * C296 - C21877 * C309 + C21872 * C326 +
            C21879 * C310 - C21880 * C297 - C21879 * C311 + C21873 * C327) *
               C47633 * C47907 * C48021 -
           (C21879 * C1321 - C21880 * C1307 - C21879 * C1322 + C21873 * C1334 +
            C21877 * C948 - C21878 * C943 - C21877 * C949 + C21872 * C958 +
            C21875 * C503 - C21876 * C491 - C21875 * C504 + C21871 * C521) *
               C47633 * C47907 * C48018 +
           (C21875 * C505 - C21876 * C492 - C21875 * C506 + C21871 * C522 +
            C21877 * C1315 - C21878 * C1304 - C21877 * C1316 + C21872 * C1331 +
            C21879 * C1323 - C21880 * C1308 - C21879 * C1324 + C21873 * C1335) *
               C47633 * C47907 * C48009 -
           (C21879 * C7507 - C21880 * C7505 - C21879 * C7508 + C21873 * C7511 +
            C21877 * C2433 - C21878 * C2430 - C21877 * C2434 + C21872 * C2439 +
            C21875 * C2034 - C21876 * C2026 - C21875 * C2035 + C21871 * C2044) *
               C47633 * C47907 * C47990) *
              C2540 +
          ((C21875 * C948 - C21876 * C943 - C21875 * C949 + C21871 * C958 +
            C21877 * C1321 - C21878 * C1307 - C21877 * C1322 + C21872 * C1334 +
            C21879 * C1725 - C21880 * C1722 - C21879 * C1726 + C21873 * C1731) *
               C47633 * C47907 * C48018 -
           (C21879 * C1178 - C21880 * C1170 - C21879 * C1179 + C21873 * C1188 +
            C21877 * C310 - C21878 * C297 - C21877 * C311 + C21872 * C327 +
            C21875 * C308 - C21876 * C296 - C21875 * C309 + C21871 * C326) *
               C47633 * C47907 * C48021 -
           (C21879 * C6145 - C21880 * C6143 - C21879 * C6146 + C21873 * C6149 +
            C21877 * C1323 - C21878 * C1308 - C21877 * C1324 + C21872 * C1335 +
            C21875 * C1315 - C21876 * C1304 - C21875 * C1316 + C21871 * C1331) *
               C47633 * C47907 * C48009 +
           (C21875 * C2433 - C21876 * C2430 - C21875 * C2434 + C21871 * C2439 +
            C21877 * C7507 - C21878 * C7505 - C21877 * C7508 + C21872 * C7511 +
            C21879 * C23708 - C21880 * C23707 - C21879 * C23709 +
            C21873 * C23710) *
               C47633 * C47907 * C47990) *
              C47749) *
         C47658) /
            (p * q * std::sqrt(p + q));
    d2ee[108] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C21875 * C122 - C21876 * C115 - C21875 * C123 + C21871 * C136 +
             C21877 * C308 - C21878 * C296 - C21877 * C309 + C21872 * C326 +
             C21879 * C310 - C21880 * C297 - C21879 * C311 + C21873 * C327) *
                C47633 * C47907 * C47787 -
            (C21879 * C1321 - C21880 * C1307 - C21879 * C1322 + C21873 * C1334 +
             C21877 * C948 - C21878 * C943 - C21877 * C949 + C21872 * C958 +
             C21875 * C503 - C21876 * C491 - C21875 * C504 + C21871 * C521) *
                C47633 * C47907 * C47794 +
            (C21875 * C505 - C21876 * C492 - C21875 * C506 + C21871 * C522 +
             C21877 * C1315 - C21878 * C1304 - C21877 * C1316 + C21872 * C1331 +
             C21879 * C1323 - C21880 * C1308 - C21879 * C1324 +
             C21873 * C1335) *
                C47633 * C47907 * C3810) *
               C2540 +
           ((C21875 * C948 - C21876 * C943 - C21875 * C949 + C21871 * C958 +
             C21877 * C1321 - C21878 * C1307 - C21877 * C1322 + C21872 * C1334 +
             C21879 * C1725 - C21880 * C1722 - C21879 * C1726 +
             C21873 * C1731) *
                C47633 * C47907 * C47794 -
            (C21879 * C1178 - C21880 * C1170 - C21879 * C1179 + C21873 * C1188 +
             C21877 * C310 - C21878 * C297 - C21877 * C311 + C21872 * C327 +
             C21875 * C308 - C21876 * C296 - C21875 * C309 + C21871 * C326) *
                C47633 * C47907 * C47787 -
            (C21879 * C6145 - C21880 * C6143 - C21879 * C6146 + C21873 * C6149 +
             C21877 * C1323 - C21878 * C1308 - C21877 * C1324 + C21872 * C1335 +
             C21875 * C1315 - C21876 * C1304 - C21875 * C1316 +
             C21871 * C1331) *
                C47633 * C47907 * C3810) *
               C47749) *
              C47928 +
          (((C21875 * C501 - C21876 * C490 - C21875 * C502 + C21871 * C520 +
             C21877 * C950 - C21878 * C944 - C21877 * C951 + C21872 * C959 +
             C21879 * C1319 - C21880 * C1306 - C21879 * C1320 +
             C21873 * C1333) *
                C47633 * C47907 * C47794 -
            (C21879 * C312 - C21880 * C298 - C21879 * C313 + C21873 * C328 +
             C21877 * C306 - C21878 * C295 - C21877 * C307 + C21872 * C325 +
             C21875 * C124 - C21876 * C116 - C21875 * C125 + C21871 * C137) *
                C47633 * C47907 * C47787 -
            (C21879 * C1325 - C21880 * C1309 - C21879 * C1326 + C21873 * C1336 +
             C21877 * C1313 - C21878 * C1303 - C21877 * C1314 + C21872 * C1330 +
             C21875 * C507 - C21876 * C493 - C21875 * C508 + C21871 * C523) *
                C47633 * C47907 * C3810) *
               C2540 +
           ((C21875 * C306 - C21876 * C295 - C21875 * C307 + C21871 * C325 +
             C21877 * C312 - C21878 * C298 - C21877 * C313 + C21872 * C328 +
             C21879 * C1176 - C21880 * C1169 - C21879 * C1177 +
             C21873 * C1187) *
                C47633 * C47907 * C47787 -
            (C21879 * C1727 - C21880 * C1723 - C21879 * C1728 + C21873 * C1732 +
             C21877 * C1319 - C21878 * C1306 - C21877 * C1320 + C21872 * C1333 +
             C21875 * C950 - C21876 * C944 - C21875 * C951 + C21871 * C959) *
                C47633 * C47907 * C47794 +
            (C21875 * C1313 - C21876 * C1303 - C21875 * C1314 + C21871 * C1330 +
             C21877 * C1325 - C21878 * C1309 - C21877 * C1326 + C21872 * C1336 +
             C21879 * C6147 - C21880 * C6144 - C21879 * C6148 +
             C21873 * C6150) *
                C47633 * C47907 * C3810) *
               C47749) *
              C47669)) /
        (p * q * std::sqrt(p + q));
    d2ee[109] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C21875 * C122 - C21876 * C115 - C21875 * C123 + C21871 * C136 +
             C21877 * C308 - C21878 * C296 - C21877 * C309 + C21872 * C326 +
             C21879 * C310 - C21880 * C297 - C21879 * C311 + C21873 * C327) *
                C47633 * C47907 * C3302 -
            (C21879 * C1321 - C21880 * C1307 - C21879 * C1322 + C21873 * C1334 +
             C21877 * C948 - C21878 * C943 - C21877 * C949 + C21872 * C958 +
             C21875 * C503 - C21876 * C491 - C21875 * C504 + C21871 * C521) *
                C47633 * C47907 * C47791) *
               C2540 +
           ((C21875 * C948 - C21876 * C943 - C21875 * C949 + C21871 * C958 +
             C21877 * C1321 - C21878 * C1307 - C21877 * C1322 + C21872 * C1334 +
             C21879 * C1725 - C21880 * C1722 - C21879 * C1726 +
             C21873 * C1731) *
                C47633 * C47907 * C47791 -
            (C21879 * C1178 - C21880 * C1170 - C21879 * C1179 + C21873 * C1188 +
             C21877 * C310 - C21878 * C297 - C21877 * C311 + C21872 * C327 +
             C21875 * C308 - C21876 * C296 - C21875 * C309 + C21871 * C326) *
                C47633 * C47907 * C3302) *
               C47749) *
              C48010 +
          (((C21875 * C501 - C21876 * C490 - C21875 * C502 + C21871 * C520 +
             C21877 * C950 - C21878 * C944 - C21877 * C951 + C21872 * C959 +
             C21879 * C1319 - C21880 * C1306 - C21879 * C1320 +
             C21873 * C1333) *
                C47633 * C47907 * C47791 -
            (C21879 * C312 - C21880 * C298 - C21879 * C313 + C21873 * C328 +
             C21877 * C306 - C21878 * C295 - C21877 * C307 + C21872 * C325 +
             C21875 * C124 - C21876 * C116 - C21875 * C125 + C21871 * C137) *
                C47633 * C47907 * C3302) *
               C2540 +
           ((C21875 * C306 - C21876 * C295 - C21875 * C307 + C21871 * C325 +
             C21877 * C312 - C21878 * C298 - C21877 * C313 + C21872 * C328 +
             C21879 * C1176 - C21880 * C1169 - C21879 * C1177 +
             C21873 * C1187) *
                C47633 * C47907 * C3302 -
            (C21879 * C1727 - C21880 * C1723 - C21879 * C1728 + C21873 * C1732 +
             C21877 * C1319 - C21878 * C1306 - C21877 * C1320 + C21872 * C1333 +
             C21875 * C950 - C21876 * C944 - C21875 * C951 + C21871 * C959) *
                C47633 * C47907 * C47791) *
               C47749) *
              C47997 +
          (((C21875 * C126 - C21876 * C117 - C21875 * C127 + C21871 * C138 +
             C21877 * C304 - C21878 * C294 - C21877 * C305 + C21872 * C324 +
             C21879 * C314 - C21880 * C299 - C21879 * C315 + C21873 * C329) *
                C47633 * C47907 * C3302 -
            (C21879 * C1317 - C21880 * C1305 - C21879 * C1318 + C21873 * C1332 +
             C21877 * C952 - C21878 * C945 - C21877 * C953 + C21872 * C960 +
             C21875 * C499 - C21876 * C489 - C21875 * C500 + C21871 * C519) *
                C47633 * C47907 * C47791) *
               C2540 +
           ((C21875 * C952 - C21876 * C945 - C21875 * C953 + C21871 * C960 +
             C21877 * C1317 - C21878 * C1305 - C21877 * C1318 + C21872 * C1332 +
             C21879 * C1729 - C21880 * C1724 - C21879 * C1730 +
             C21873 * C1733) *
                C47633 * C47907 * C47791 -
            (C21879 * C1174 - C21880 * C1168 - C21879 * C1175 + C21873 * C1186 +
             C21877 * C314 - C21878 * C299 - C21877 * C315 + C21872 * C329 +
             C21875 * C304 - C21876 * C294 - C21875 * C305 + C21871 * C324) *
                C47633 * C47907 * C3302) *
               C47749) *
              C47968)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C21875 * C122 - C21876 * C115 - C21875 * C123 + C21871 * C136 +
            C21877 * C308 - C21878 * C296 - C21877 * C309 + C21872 * C326 +
            C21879 * C310 - C21880 * C297 - C21879 * C311 + C21873 * C327) *
               C47633 * C47907 * C3302 -
           (C21879 * C1321 - C21880 * C1307 - C21879 * C1322 + C21873 * C1334 +
            C21877 * C948 - C21878 * C943 - C21877 * C949 + C21872 * C958 +
            C21875 * C503 - C21876 * C491 - C21875 * C504 + C21871 * C521) *
               C47633 * C47907 * C47791) *
              C48020 +
          ((C21875 * C948 - C21876 * C943 - C21875 * C949 + C21871 * C958 +
            C21877 * C1321 - C21878 * C1307 - C21877 * C1322 + C21872 * C1334 +
            C21879 * C1725 - C21880 * C1722 - C21879 * C1726 + C21873 * C1731) *
               C47633 * C47907 * C47791 -
           (C21879 * C1178 - C21880 * C1170 - C21879 * C1179 + C21873 * C1188 +
            C21877 * C310 - C21878 * C297 - C21877 * C311 + C21872 * C327 +
            C21875 * C308 - C21876 * C296 - C21875 * C309 + C21871 * C326) *
               C47633 * C47907 * C3302) *
              C48016 +
          ((C21875 * C310 - C21876 * C297 - C21875 * C311 + C21871 * C327 +
            C21877 * C1178 - C21878 * C1170 - C21877 * C1179 + C21872 * C1188 +
            C21879 * C1180 - C21880 * C1171 - C21879 * C1181 + C21873 * C1189) *
               C47633 * C47907 * C3302 -
           (C21879 * C6635 - C21880 * C6633 - C21879 * C6636 + C21873 * C6639 +
            C21877 * C1725 - C21878 * C1722 - C21877 * C1726 + C21872 * C1731 +
            C21875 * C1321 - C21876 * C1307 - C21875 * C1322 + C21871 * C1334) *
               C47633 * C47907 * C47791) *
              C48006 +
          ((C21875 * C1725 - C21876 * C1722 - C21875 * C1726 + C21871 * C1731 +
            C21877 * C6635 - C21878 * C6633 - C21877 * C6636 + C21872 * C6639 +
            C21879 * C23076 - C21880 * C23075 - C21879 * C23077 +
            C21873 * C23078) *
               C47633 * C47907 * C47791 -
           (C21879 * C5991 - C21880 * C5989 - C21879 * C5992 + C21873 * C5995 +
            C21877 * C1180 - C21878 * C1171 - C21877 * C1181 + C21872 * C1189 +
            C21875 * C1178 - C21876 * C1170 - C21875 * C1179 + C21871 * C1188) *
               C47633 * C47907 * C3302) *
              C47984) *
         C47658) /
            (p * q * std::sqrt(p + q));
    d2ee[110] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C21875 * C122 - C21876 * C115 - C21875 * C123 + C21871 * C136 +
            C21877 * C308 - C21878 * C296 - C21877 * C309 + C21872 * C326 +
            C21879 * C310 - C21880 * C297 - C21879 * C311 + C21873 * C327) *
               C47633 * C47907 * C47704 * C1436 -
           (C21879 * C1178 - C21880 * C1170 - C21879 * C1179 + C21873 * C1188 +
            C21877 * C310 - C21878 * C297 - C21877 * C311 + C21872 * C327 +
            C21875 * C308 - C21876 * C296 - C21875 * C309 + C21871 * C326) *
               C47633 * C47907 * C47704 * C1437 +
           (C21875 * C310 - C21876 * C297 - C21875 * C311 + C21871 * C327 +
            C21877 * C1178 - C21878 * C1170 - C21877 * C1179 + C21872 * C1188 +
            C21879 * C1180 - C21880 * C1171 - C21879 * C1181 + C21873 * C1189) *
               C47633 * C47907 * C47704 * C1438 -
           (C21879 * C5991 - C21880 * C5989 - C21879 * C5992 + C21873 * C5995 +
            C21877 * C1180 - C21878 * C1171 - C21877 * C1181 + C21872 * C1189 +
            C21875 * C1178 - C21876 * C1170 - C21875 * C1179 + C21871 * C1188) *
               C47633 * C47907 * C47704 * C47984) *
              C47928 +
          ((C21875 * C306 - C21876 * C295 - C21875 * C307 + C21871 * C325 +
            C21877 * C312 - C21878 * C298 - C21877 * C313 + C21872 * C328 +
            C21879 * C1176 - C21880 * C1169 - C21879 * C1177 + C21873 * C1187) *
               C47633 * C47907 * C47704 * C1437 -
           (C21879 * C312 - C21880 * C298 - C21879 * C313 + C21873 * C328 +
            C21877 * C306 - C21878 * C295 - C21877 * C307 + C21872 * C325 +
            C21875 * C124 - C21876 * C116 - C21875 * C125 + C21871 * C137) *
               C47633 * C47907 * C47704 * C1436 -
           (C21879 * C1182 - C21880 * C1172 - C21879 * C1183 + C21873 * C1190 +
            C21877 * C1176 - C21878 * C1169 - C21877 * C1177 + C21872 * C1187 +
            C21875 * C312 - C21876 * C298 - C21875 * C313 + C21871 * C328) *
               C47633 * C47907 * C47704 * C1438 +
           (C21875 * C1176 - C21876 * C1169 - C21875 * C1177 + C21871 * C1187 +
            C21877 * C1182 - C21878 * C1172 - C21877 * C1183 + C21872 * C1190 +
            C21879 * C5993 - C21880 * C5990 - C21879 * C5994 + C21873 * C5996) *
               C47633 * C47907 * C47704 * C47984) *
              C47669)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C21875 * C122 - C21876 * C115 - C21875 * C123 + C21871 * C136 +
            C21877 * C308 - C21878 * C296 - C21877 * C309 + C21872 * C326 +
            C21879 * C310 - C21880 * C297 - C21879 * C311 + C21873 * C327) *
               C47633 * C47907 * C47704 * C47942 -
           (C21879 * C1178 - C21880 * C1170 - C21879 * C1179 + C21873 * C1188 +
            C21877 * C310 - C21878 * C297 - C21877 * C311 + C21872 * C327 +
            C21875 * C308 - C21876 * C296 - C21875 * C309 + C21871 * C326) *
               C47633 * C47907 * C47704 * C47749) *
              C671 +
          ((C21875 * C306 - C21876 * C295 - C21875 * C307 + C21871 * C325 +
            C21877 * C312 - C21878 * C298 - C21877 * C313 + C21872 * C328 +
            C21879 * C1176 - C21880 * C1169 - C21879 * C1177 + C21873 * C1187) *
               C47633 * C47907 * C47704 * C47749 -
           (C21879 * C312 - C21880 * C298 - C21879 * C313 + C21873 * C328 +
            C21877 * C306 - C21878 * C295 - C21877 * C307 + C21872 * C325 +
            C21875 * C124 - C21876 * C116 - C21875 * C125 + C21871 * C137) *
               C47633 * C47907 * C47704 * C47942) *
              C672 +
          ((C21875 * C126 - C21876 * C117 - C21875 * C127 + C21871 * C138 +
            C21877 * C304 - C21878 * C294 - C21877 * C305 + C21872 * C324 +
            C21879 * C314 - C21880 * C299 - C21879 * C315 + C21873 * C329) *
               C47633 * C47907 * C47704 * C47942 -
           (C21879 * C1174 - C21880 * C1168 - C21879 * C1175 + C21873 * C1186 +
            C21877 * C314 - C21878 * C299 - C21877 * C315 + C21872 * C329 +
            C21875 * C304 - C21876 * C294 - C21875 * C305 + C21871 * C324) *
               C47633 * C47907 * C47704 * C47749) *
              C673 +
          ((C21875 * C316 - C21876 * C300 - C21875 * C317 + C21871 * C330 +
            C21877 * C318 - C21878 * C301 - C21877 * C319 + C21872 * C331 +
            C21879 * C1443 - C21880 * C1442 - C21879 * C1444 + C21873 * C1445) *
               C47633 * C47907 * C47704 * C47749 -
           (C21879 * C318 - C21880 * C301 - C21879 * C319 + C21873 * C331 +
            C21877 * C316 - C21878 * C300 - C21877 * C317 + C21872 * C330 +
            C21875 * C128 - C21876 * C118 - C21875 * C129 + C21871 * C139) *
               C47633 * C47907 * C47704 * C47942) *
              C47978)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C21875 * C122 - C21876 * C115 - C21875 * C123 + C21871 * C136 +
             C21877 * C308 - C21878 * C296 - C21877 * C309 + C21872 * C326 +
             C21879 * C310 - C21880 * C297 - C21879 * C311 + C21873 * C327) *
                C47633 * C47907 * C1844 -
            (C21879 * C1321 - C21880 * C1307 - C21879 * C1322 + C21873 * C1334 +
             C21877 * C948 - C21878 * C943 - C21877 * C949 + C21872 * C958 +
             C21875 * C503 - C21876 * C491 - C21875 * C504 + C21871 * C521) *
                C47633 * C47907 * C1845 +
            (C21875 * C505 - C21876 * C492 - C21875 * C506 + C21871 * C522 +
             C21877 * C1315 - C21878 * C1304 - C21877 * C1316 + C21872 * C1331 +
             C21879 * C1323 - C21880 * C1308 - C21879 * C1324 +
             C21873 * C1335) *
                C47633 * C47907 * C47977) *
               C47942 +
           ((C21875 * C948 - C21876 * C943 - C21875 * C949 + C21871 * C958 +
             C21877 * C1321 - C21878 * C1307 - C21877 * C1322 + C21872 * C1334 +
             C21879 * C1725 - C21880 * C1722 - C21879 * C1726 +
             C21873 * C1731) *
                C47633 * C47907 * C1845 -
            (C21879 * C1178 - C21880 * C1170 - C21879 * C1179 + C21873 * C1188 +
             C21877 * C310 - C21878 * C297 - C21877 * C311 + C21872 * C327 +
             C21875 * C308 - C21876 * C296 - C21875 * C309 + C21871 * C326) *
                C47633 * C47907 * C1844 -
            (C21879 * C6145 - C21880 * C6143 - C21879 * C6146 + C21873 * C6149 +
             C21877 * C1323 - C21878 * C1308 - C21877 * C1324 + C21872 * C1335 +
             C21875 * C1315 - C21876 * C1304 - C21875 * C1316 +
             C21871 * C1331) *
                C47633 * C47907 * C47977) *
               C47749) *
              C47928 +
          (((C21875 * C501 - C21876 * C490 - C21875 * C502 + C21871 * C520 +
             C21877 * C950 - C21878 * C944 - C21877 * C951 + C21872 * C959 +
             C21879 * C1319 - C21880 * C1306 - C21879 * C1320 +
             C21873 * C1333) *
                C47633 * C47907 * C1845 -
            (C21879 * C312 - C21880 * C298 - C21879 * C313 + C21873 * C328 +
             C21877 * C306 - C21878 * C295 - C21877 * C307 + C21872 * C325 +
             C21875 * C124 - C21876 * C116 - C21875 * C125 + C21871 * C137) *
                C47633 * C47907 * C1844 -
            (C21879 * C1325 - C21880 * C1309 - C21879 * C1326 + C21873 * C1336 +
             C21877 * C1313 - C21878 * C1303 - C21877 * C1314 + C21872 * C1330 +
             C21875 * C507 - C21876 * C493 - C21875 * C508 + C21871 * C523) *
                C47633 * C47907 * C47977) *
               C47942 +
           ((C21875 * C306 - C21876 * C295 - C21875 * C307 + C21871 * C325 +
             C21877 * C312 - C21878 * C298 - C21877 * C313 + C21872 * C328 +
             C21879 * C1176 - C21880 * C1169 - C21879 * C1177 +
             C21873 * C1187) *
                C47633 * C47907 * C1844 -
            (C21879 * C1727 - C21880 * C1723 - C21879 * C1728 + C21873 * C1732 +
             C21877 * C1319 - C21878 * C1306 - C21877 * C1320 + C21872 * C1333 +
             C21875 * C950 - C21876 * C944 - C21875 * C951 + C21871 * C959) *
                C47633 * C47907 * C1845 +
            (C21875 * C1313 - C21876 * C1303 - C21875 * C1314 + C21871 * C1330 +
             C21877 * C1325 - C21878 * C1309 - C21877 * C1326 + C21872 * C1336 +
             C21879 * C6147 - C21880 * C6144 - C21879 * C6148 +
             C21873 * C6150) *
                C47633 * C47907 * C47977) *
               C47749) *
              C47669)) /
            (p * q * std::sqrt(p + q));
    d2ee[111] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C21875 * C122 - C21876 * C115 - C21875 * C123 + C21871 * C136 +
            C21877 * C308 - C21878 * C296 - C21877 * C309 + C21872 * C326 +
            C21879 * C310 - C21880 * C297 - C21879 * C311 + C21873 * C327) *
               C47633 * C47907 * C47943 -
           (C21879 * C1321 - C21880 * C1307 - C21879 * C1322 + C21873 * C1334 +
            C21877 * C948 - C21878 * C943 - C21877 * C949 + C21872 * C958 +
            C21875 * C503 - C21876 * C491 - C21875 * C504 + C21871 * C521) *
               C47633 * C47907 * C47791) *
              C1436 +
          ((C21875 * C948 - C21876 * C943 - C21875 * C949 + C21871 * C958 +
            C21877 * C1321 - C21878 * C1307 - C21877 * C1322 + C21872 * C1334 +
            C21879 * C1725 - C21880 * C1722 - C21879 * C1726 + C21873 * C1731) *
               C47633 * C47907 * C47791 -
           (C21879 * C1178 - C21880 * C1170 - C21879 * C1179 + C21873 * C1188 +
            C21877 * C310 - C21878 * C297 - C21877 * C311 + C21872 * C327 +
            C21875 * C308 - C21876 * C296 - C21875 * C309 + C21871 * C326) *
               C47633 * C47907 * C47943) *
              C1437 +
          ((C21875 * C310 - C21876 * C297 - C21875 * C311 + C21871 * C327 +
            C21877 * C1178 - C21878 * C1170 - C21877 * C1179 + C21872 * C1188 +
            C21879 * C1180 - C21880 * C1171 - C21879 * C1181 + C21873 * C1189) *
               C47633 * C47907 * C47943 -
           (C21879 * C6635 - C21880 * C6633 - C21879 * C6636 + C21873 * C6639 +
            C21877 * C1725 - C21878 * C1722 - C21877 * C1726 + C21872 * C1731 +
            C21875 * C1321 - C21876 * C1307 - C21875 * C1322 + C21871 * C1334) *
               C47633 * C47907 * C47791) *
              C1438 +
          ((C21875 * C1725 - C21876 * C1722 - C21875 * C1726 + C21871 * C1731 +
            C21877 * C6635 - C21878 * C6633 - C21877 * C6636 + C21872 * C6639 +
            C21879 * C23076 - C21880 * C23075 - C21879 * C23077 +
            C21873 * C23078) *
               C47633 * C47907 * C47791 -
           (C21879 * C5991 - C21880 * C5989 - C21879 * C5992 + C21873 * C5995 +
            C21877 * C1180 - C21878 * C1171 - C21877 * C1181 + C21872 * C1189 +
            C21875 * C1178 - C21876 * C1170 - C21875 * C1179 + C21871 * C1188) *
               C47633 * C47907 * C47943) *
              C47984) *
         C47658) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C21875 * C122 - C21876 * C115 - C21875 * C123 + C21871 * C136 +
             C21877 * C308 - C21878 * C296 - C21877 * C309 + C21872 * C326 +
             C21879 * C310 - C21880 * C297 - C21879 * C311 + C21873 * C327) *
                C47633 * C47907 * C47943 -
            (C21879 * C1321 - C21880 * C1307 - C21879 * C1322 + C21873 * C1334 +
             C21877 * C948 - C21878 * C943 - C21877 * C949 + C21872 * C958 +
             C21875 * C503 - C21876 * C491 - C21875 * C504 + C21871 * C521) *
                C47633 * C47907 * C47791) *
               C47942 +
           ((C21875 * C948 - C21876 * C943 - C21875 * C949 + C21871 * C958 +
             C21877 * C1321 - C21878 * C1307 - C21877 * C1322 + C21872 * C1334 +
             C21879 * C1725 - C21880 * C1722 - C21879 * C1726 +
             C21873 * C1731) *
                C47633 * C47907 * C47791 -
            (C21879 * C1178 - C21880 * C1170 - C21879 * C1179 + C21873 * C1188 +
             C21877 * C310 - C21878 * C297 - C21877 * C311 + C21872 * C327 +
             C21875 * C308 - C21876 * C296 - C21875 * C309 + C21871 * C326) *
                C47633 * C47907 * C47943) *
               C47749) *
              C291 +
          (((C21875 * C501 - C21876 * C490 - C21875 * C502 + C21871 * C520 +
             C21877 * C950 - C21878 * C944 - C21877 * C951 + C21872 * C959 +
             C21879 * C1319 - C21880 * C1306 - C21879 * C1320 +
             C21873 * C1333) *
                C47633 * C47907 * C47791 -
            (C21879 * C312 - C21880 * C298 - C21879 * C313 + C21873 * C328 +
             C21877 * C306 - C21878 * C295 - C21877 * C307 + C21872 * C325 +
             C21875 * C124 - C21876 * C116 - C21875 * C125 + C21871 * C137) *
                C47633 * C47907 * C47943) *
               C47942 +
           ((C21875 * C306 - C21876 * C295 - C21875 * C307 + C21871 * C325 +
             C21877 * C312 - C21878 * C298 - C21877 * C313 + C21872 * C328 +
             C21879 * C1176 - C21880 * C1169 - C21879 * C1177 +
             C21873 * C1187) *
                C47633 * C47907 * C47943 -
            (C21879 * C1727 - C21880 * C1723 - C21879 * C1728 + C21873 * C1732 +
             C21877 * C1319 - C21878 * C1306 - C21877 * C1320 + C21872 * C1333 +
             C21875 * C950 - C21876 * C944 - C21875 * C951 + C21871 * C959) *
                C47633 * C47907 * C47791) *
               C47749) *
              C292 +
          (((C21875 * C126 - C21876 * C117 - C21875 * C127 + C21871 * C138 +
             C21877 * C304 - C21878 * C294 - C21877 * C305 + C21872 * C324 +
             C21879 * C314 - C21880 * C299 - C21879 * C315 + C21873 * C329) *
                C47633 * C47907 * C47943 -
            (C21879 * C1317 - C21880 * C1305 - C21879 * C1318 + C21873 * C1332 +
             C21877 * C952 - C21878 * C945 - C21877 * C953 + C21872 * C960 +
             C21875 * C499 - C21876 * C489 - C21875 * C500 + C21871 * C519) *
                C47633 * C47907 * C47791) *
               C47942 +
           ((C21875 * C952 - C21876 * C945 - C21875 * C953 + C21871 * C960 +
             C21877 * C1317 - C21878 * C1305 - C21877 * C1318 + C21872 * C1332 +
             C21879 * C1729 - C21880 * C1724 - C21879 * C1730 +
             C21873 * C1733) *
                C47633 * C47907 * C47791 -
            (C21879 * C1174 - C21880 * C1168 - C21879 * C1175 + C21873 * C1186 +
             C21877 * C314 - C21878 * C299 - C21877 * C315 + C21872 * C329 +
             C21875 * C304 - C21876 * C294 - C21875 * C305 + C21871 * C324) *
                C47633 * C47907 * C47943) *
               C47749) *
              C47968)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C21875 * C122 - C21876 * C115 - C21875 * C123 + C21871 * C136 +
            C21877 * C308 - C21878 * C296 - C21877 * C309 + C21872 * C326 +
            C21879 * C310 - C21880 * C297 - C21879 * C311 + C21873 * C327) *
               C47633 * C47907 * C2310 -
           (C21879 * C1321 - C21880 * C1307 - C21879 * C1322 + C21873 * C1334 +
            C21877 * C948 - C21878 * C943 - C21877 * C949 + C21872 * C958 +
            C21875 * C503 - C21876 * C491 - C21875 * C504 + C21871 * C521) *
               C47633 * C47907 * C2311 +
           (C21875 * C505 - C21876 * C492 - C21875 * C506 + C21871 * C522 +
            C21877 * C1315 - C21878 * C1304 - C21877 * C1316 + C21872 * C1331 +
            C21879 * C1323 - C21880 * C1308 - C21879 * C1324 + C21873 * C1335) *
               C47633 * C47907 * C2312 -
           (C21879 * C7507 - C21880 * C7505 - C21879 * C7508 + C21873 * C7511 +
            C21877 * C2433 - C21878 * C2430 - C21877 * C2434 + C21872 * C2439 +
            C21875 * C2034 - C21876 * C2026 - C21875 * C2035 + C21871 * C2044) *
               C47633 * C47907 * C47990) *
              C47942 +
          ((C21875 * C948 - C21876 * C943 - C21875 * C949 + C21871 * C958 +
            C21877 * C1321 - C21878 * C1307 - C21877 * C1322 + C21872 * C1334 +
            C21879 * C1725 - C21880 * C1722 - C21879 * C1726 + C21873 * C1731) *
               C47633 * C47907 * C2311 -
           (C21879 * C1178 - C21880 * C1170 - C21879 * C1179 + C21873 * C1188 +
            C21877 * C310 - C21878 * C297 - C21877 * C311 + C21872 * C327 +
            C21875 * C308 - C21876 * C296 - C21875 * C309 + C21871 * C326) *
               C47633 * C47907 * C2310 -
           (C21879 * C6145 - C21880 * C6143 - C21879 * C6146 + C21873 * C6149 +
            C21877 * C1323 - C21878 * C1308 - C21877 * C1324 + C21872 * C1335 +
            C21875 * C1315 - C21876 * C1304 - C21875 * C1316 + C21871 * C1331) *
               C47633 * C47907 * C2312 +
           (C21875 * C2433 - C21876 * C2430 - C21875 * C2434 + C21871 * C2439 +
            C21877 * C7507 - C21878 * C7505 - C21877 * C7508 + C21872 * C7511 +
            C21879 * C23708 - C21880 * C23707 - C21879 * C23709 +
            C21873 * C23710) *
               C47633 * C47907 * C47990) *
              C47749) *
         C47658) /
            (p * q * std::sqrt(p + q));
    d2ee[112] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((C21875 * C122 - C21876 * C115 - C21875 * C123 + C21871 * C136 +
               C21877 * C308 - C21878 * C296 - C21877 * C309 + C21872 * C326 +
               C21879 * C310 - C21880 * C297 - C21879 * C311 + C21873 * C327) *
                  C47633 * C47907 * C47704 * C47686 * C108 -
              (C21879 * C312 - C21880 * C298 - C21879 * C313 + C21873 * C328 +
               C21877 * C306 - C21878 * C295 - C21877 * C307 + C21872 * C325 +
               C21875 * C124 - C21876 * C116 - C21875 * C125 + C21871 * C137) *
                  C47633 * C47907 * C47704 * C47686 * C109 +
              (C21875 * C126 - C21876 * C117 - C21875 * C127 + C21871 * C138 +
               C21877 * C304 - C21878 * C294 - C21877 * C305 + C21872 * C324 +
               C21879 * C314 - C21880 * C299 - C21879 * C315 + C21873 * C329) *
                  C47633 * C47907 * C47704 * C47686 * C110 -
              (C21879 * C318 - C21880 * C301 - C21879 * C319 + C21873 * C331 +
               C21877 * C316 - C21878 * C300 - C21877 * C317 + C21872 * C330 +
               C21875 * C128 - C21876 * C118 - C21875 * C129 + C21871 * C139) *
                  C47633 * C47907 * C47704 * C47686 * C111 +
              (C21875 * C130 - C21876 * C119 - C21875 * C131 + C21871 * C140 +
               C21877 * C320 - C21878 * C302 - C21877 * C321 + C21872 * C332 +
               C21879 * C322 - C21880 * C303 - C21879 * C323 + C21873 * C333) *
                  C47633 * C47907 * C47704 * C47686 * C112) +
         0.5 * std::pow(Pi, 2.5) *
             (((C21875 * C122 - C21876 * C115 - C21875 * C123 + C21871 * C136 +
                C21877 * C308 - C21878 * C296 - C21877 * C309 + C21872 * C326 +
                C21879 * C310 - C21880 * C297 - C21879 * C311 + C21873 * C327) *
                   C47633 * C47907 * C47704 * C48013 -
               (C21879 * C1178 - C21880 * C1170 - C21879 * C1179 +
                C21873 * C1188 + C21877 * C310 - C21878 * C297 - C21877 * C311 +
                C21872 * C327 + C21875 * C308 - C21876 * C296 - C21875 * C309 +
                C21871 * C326) *
                   C47633 * C47907 * C47704 * C48001 +
               (C21875 * C310 - C21876 * C297 - C21875 * C311 + C21871 * C327 +
                C21877 * C1178 - C21878 * C1170 - C21877 * C1179 +
                C21872 * C1188 + C21879 * C1180 - C21880 * C1171 -
                C21879 * C1181 + C21873 * C1189) *
                   C47633 * C47907 * C47704 * C47974) *
                  C291 +
              ((C21875 * C306 - C21876 * C295 - C21875 * C307 + C21871 * C325 +
                C21877 * C312 - C21878 * C298 - C21877 * C313 + C21872 * C328 +
                C21879 * C1176 - C21880 * C1169 - C21879 * C1177 +
                C21873 * C1187) *
                   C47633 * C47907 * C47704 * C48001 -
               (C21879 * C312 - C21880 * C298 - C21879 * C313 + C21873 * C328 +
                C21877 * C306 - C21878 * C295 - C21877 * C307 + C21872 * C325 +
                C21875 * C124 - C21876 * C116 - C21875 * C125 + C21871 * C137) *
                   C47633 * C47907 * C47704 * C48013 -
               (C21879 * C1182 - C21880 * C1172 - C21879 * C1183 +
                C21873 * C1190 + C21877 * C1176 - C21878 * C1169 -
                C21877 * C1177 + C21872 * C1187 + C21875 * C312 -
                C21876 * C298 - C21875 * C313 + C21871 * C328) *
                   C47633 * C47907 * C47704 * C47974) *
                  C292 +
              ((C21875 * C126 - C21876 * C117 - C21875 * C127 + C21871 * C138 +
                C21877 * C304 - C21878 * C294 - C21877 * C305 + C21872 * C324 +
                C21879 * C314 - C21880 * C299 - C21879 * C315 + C21873 * C329) *
                   C47633 * C47907 * C47704 * C48013 -
               (C21879 * C1174 - C21880 * C1168 - C21879 * C1175 +
                C21873 * C1186 + C21877 * C314 - C21878 * C299 - C21877 * C315 +
                C21872 * C329 + C21875 * C304 - C21876 * C294 - C21875 * C305 +
                C21871 * C324) *
                   C47633 * C47907 * C47704 * C48001 +
               (C21875 * C314 - C21876 * C299 - C21875 * C315 + C21871 * C329 +
                C21877 * C1174 - C21878 * C1168 - C21877 * C1175 +
                C21872 * C1186 + C21879 * C1184 - C21880 * C1173 -
                C21879 * C1185 + C21873 * C1191) *
                   C47633 * C47907 * C47704 * C47974) *
                  C47968)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C21875 * C122 - C21876 * C115 - C21875 * C123 + C21871 * C136 +
            C21877 * C308 - C21878 * C296 - C21877 * C309 + C21872 * C326 +
            C21879 * C310 - C21880 * C297 - C21879 * C311 + C21873 * C327) *
               C47633 * C47907 * C48014 -
           (C21879 * C1321 - C21880 * C1307 - C21879 * C1322 + C21873 * C1334 +
            C21877 * C948 - C21878 * C943 - C21877 * C949 + C21872 * C958 +
            C21875 * C503 - C21876 * C491 - C21875 * C504 + C21871 * C521) *
               C47633 * C47907 * C48003 +
           (C21875 * C505 - C21876 * C492 - C21875 * C506 + C21871 * C522 +
            C21877 * C1315 - C21878 * C1304 - C21877 * C1316 + C21872 * C1331 +
            C21879 * C1323 - C21880 * C1308 - C21879 * C1324 + C21873 * C1335) *
               C47633 * C47907 * C47977) *
              C47686 * C291 +
          ((C21875 * C501 - C21876 * C490 - C21875 * C502 + C21871 * C520 +
            C21877 * C950 - C21878 * C944 - C21877 * C951 + C21872 * C959 +
            C21879 * C1319 - C21880 * C1306 - C21879 * C1320 + C21873 * C1333) *
               C47633 * C47907 * C48003 -
           (C21879 * C312 - C21880 * C298 - C21879 * C313 + C21873 * C328 +
            C21877 * C306 - C21878 * C295 - C21877 * C307 + C21872 * C325 +
            C21875 * C124 - C21876 * C116 - C21875 * C125 + C21871 * C137) *
               C47633 * C47907 * C48014 -
           (C21879 * C1325 - C21880 * C1309 - C21879 * C1326 + C21873 * C1336 +
            C21877 * C1313 - C21878 * C1303 - C21877 * C1314 + C21872 * C1330 +
            C21875 * C507 - C21876 * C493 - C21875 * C508 + C21871 * C523) *
               C47633 * C47907 * C47977) *
              C47686 * C292 +
          ((C21875 * C126 - C21876 * C117 - C21875 * C127 + C21871 * C138 +
            C21877 * C304 - C21878 * C294 - C21877 * C305 + C21872 * C324 +
            C21879 * C314 - C21880 * C299 - C21879 * C315 + C21873 * C329) *
               C47633 * C47907 * C48014 -
           (C21879 * C1317 - C21880 * C1305 - C21879 * C1318 + C21873 * C1332 +
            C21877 * C952 - C21878 * C945 - C21877 * C953 + C21872 * C960 +
            C21875 * C499 - C21876 * C489 - C21875 * C500 + C21871 * C519) *
               C47633 * C47907 * C48003 +
           (C21875 * C509 - C21876 * C494 - C21875 * C510 + C21871 * C524 +
            C21877 * C1311 - C21878 * C1302 - C21877 * C1312 + C21872 * C1329 +
            C21879 * C1327 - C21880 * C1310 - C21879 * C1328 + C21873 * C1337) *
               C47633 * C47907 * C47977) *
              C47686 * C47968)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C21875 * C122 - C21876 * C115 - C21875 * C123 + C21871 * C136 +
            C21877 * C308 - C21878 * C296 - C21877 * C309 + C21872 * C326 +
            C21879 * C310 - C21880 * C297 - C21879 * C311 + C21873 * C327) *
               C47633 * C47907 * C47704 * C1094 -
           (C21879 * C1178 - C21880 * C1170 - C21879 * C1179 + C21873 * C1188 +
            C21877 * C310 - C21878 * C297 - C21877 * C311 + C21872 * C327 +
            C21875 * C308 - C21876 * C296 - C21875 * C309 + C21871 * C326) *
               C47633 * C47907 * C47704 * C1095 +
           (C21875 * C310 - C21876 * C297 - C21875 * C311 + C21871 * C327 +
            C21877 * C1178 - C21878 * C1170 - C21877 * C1179 + C21872 * C1188 +
            C21879 * C1180 - C21880 * C1171 - C21879 * C1181 + C21873 * C1189) *
               C47633 * C47907 * C47704 * C47974) *
              C48010 +
          ((C21875 * C306 - C21876 * C295 - C21875 * C307 + C21871 * C325 +
            C21877 * C312 - C21878 * C298 - C21877 * C313 + C21872 * C328 +
            C21879 * C1176 - C21880 * C1169 - C21879 * C1177 + C21873 * C1187) *
               C47633 * C47907 * C47704 * C1095 -
           (C21879 * C312 - C21880 * C298 - C21879 * C313 + C21873 * C328 +
            C21877 * C306 - C21878 * C295 - C21877 * C307 + C21872 * C325 +
            C21875 * C124 - C21876 * C116 - C21875 * C125 + C21871 * C137) *
               C47633 * C47907 * C47704 * C1094 -
           (C21879 * C1182 - C21880 * C1172 - C21879 * C1183 + C21873 * C1190 +
            C21877 * C1176 - C21878 * C1169 - C21877 * C1177 + C21872 * C1187 +
            C21875 * C312 - C21876 * C298 - C21875 * C313 + C21871 * C328) *
               C47633 * C47907 * C47704 * C47974) *
              C47997 +
          ((C21875 * C126 - C21876 * C117 - C21875 * C127 + C21871 * C138 +
            C21877 * C304 - C21878 * C294 - C21877 * C305 + C21872 * C324 +
            C21879 * C314 - C21880 * C299 - C21879 * C315 + C21873 * C329) *
               C47633 * C47907 * C47704 * C1094 -
           (C21879 * C1174 - C21880 * C1168 - C21879 * C1175 + C21873 * C1186 +
            C21877 * C314 - C21878 * C299 - C21877 * C315 + C21872 * C329 +
            C21875 * C304 - C21876 * C294 - C21875 * C305 + C21871 * C324) *
               C47633 * C47907 * C47704 * C1095 +
           (C21875 * C314 - C21876 * C299 - C21875 * C315 + C21871 * C329 +
            C21877 * C1174 - C21878 * C1168 - C21877 * C1175 + C21872 * C1186 +
            C21879 * C1184 - C21880 * C1173 - C21879 * C1185 + C21873 * C1191) *
               C47633 * C47907 * C47704 * C47974) *
              C47968)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((C21875 * C122 - C21876 * C115 - C21875 * C123 + C21871 * C136 +
           C21877 * C308 - C21878 * C296 - C21877 * C309 + C21872 * C326 +
           C21879 * C310 - C21880 * C297 - C21879 * C311 + C21873 * C327) *
              C47633 * C47907 * C47704 * C1162 -
          (C21879 * C1178 - C21880 * C1170 - C21879 * C1179 + C21873 * C1188 +
           C21877 * C310 - C21878 * C297 - C21877 * C311 + C21872 * C327 +
           C21875 * C308 - C21876 * C296 - C21875 * C309 + C21871 * C326) *
              C47633 * C47907 * C47704 * C1163 +
          (C21875 * C310 - C21876 * C297 - C21875 * C311 + C21871 * C327 +
           C21877 * C1178 - C21878 * C1170 - C21877 * C1179 + C21872 * C1188 +
           C21879 * C1180 - C21880 * C1171 - C21879 * C1181 + C21873 * C1189) *
              C47633 * C47907 * C47704 * C1164 -
          (C21879 * C5991 - C21880 * C5989 - C21879 * C5992 + C21873 * C5995 +
           C21877 * C1180 - C21878 * C1171 - C21877 * C1181 + C21872 * C1189 +
           C21875 * C1178 - C21876 * C1170 - C21875 * C1179 + C21871 * C1188) *
              C47633 * C47907 * C47704 * C1165 +
          (C21875 * C1180 - C21876 * C1171 - C21875 * C1181 + C21871 * C1189 +
           C21877 * C5991 - C21878 * C5989 - C21877 * C5992 + C21872 * C5995 +
           C21879 * C22616 - C21880 * C22615 - C21879 * C22617 +
           C21873 * C22618) *
              C47633 * C47907 * C47704 * C1166) *
         C47658) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C21875 * C122 - C21876 * C115 - C21875 * C123 + C21871 * C136 +
            C21877 * C308 - C21878 * C296 - C21877 * C309 + C21872 * C326 +
            C21879 * C310 - C21880 * C297 - C21879 * C311 + C21873 * C327) *
               C47633 * C47907 * C48014 -
           (C21879 * C1321 - C21880 * C1307 - C21879 * C1322 + C21873 * C1334 +
            C21877 * C948 - C21878 * C943 - C21877 * C949 + C21872 * C958 +
            C21875 * C503 - C21876 * C491 - C21875 * C504 + C21871 * C521) *
               C47633 * C47907 * C48003 +
           (C21875 * C505 - C21876 * C492 - C21875 * C506 + C21871 * C522 +
            C21877 * C1315 - C21878 * C1304 - C21877 * C1316 + C21872 * C1331 +
            C21879 * C1323 - C21880 * C1308 - C21879 * C1324 + C21873 * C1335) *
               C47633 * C47907 * C47977) *
              C1094 +
          ((C21875 * C948 - C21876 * C943 - C21875 * C949 + C21871 * C958 +
            C21877 * C1321 - C21878 * C1307 - C21877 * C1322 + C21872 * C1334 +
            C21879 * C1725 - C21880 * C1722 - C21879 * C1726 + C21873 * C1731) *
               C47633 * C47907 * C48003 -
           (C21879 * C1178 - C21880 * C1170 - C21879 * C1179 + C21873 * C1188 +
            C21877 * C310 - C21878 * C297 - C21877 * C311 + C21872 * C327 +
            C21875 * C308 - C21876 * C296 - C21875 * C309 + C21871 * C326) *
               C47633 * C47907 * C48014 -
           (C21879 * C6145 - C21880 * C6143 - C21879 * C6146 + C21873 * C6149 +
            C21877 * C1323 - C21878 * C1308 - C21877 * C1324 + C21872 * C1335 +
            C21875 * C1315 - C21876 * C1304 - C21875 * C1316 + C21871 * C1331) *
               C47633 * C47907 * C47977) *
              C1095 +
          ((C21875 * C310 - C21876 * C297 - C21875 * C311 + C21871 * C327 +
            C21877 * C1178 - C21878 * C1170 - C21877 * C1179 + C21872 * C1188 +
            C21879 * C1180 - C21880 * C1171 - C21879 * C1181 + C21873 * C1189) *
               C47633 * C47907 * C48014 -
           (C21879 * C6635 - C21880 * C6633 - C21879 * C6636 + C21873 * C6639 +
            C21877 * C1725 - C21878 * C1722 - C21877 * C1726 + C21872 * C1731 +
            C21875 * C1321 - C21876 * C1307 - C21875 * C1322 + C21871 * C1334) *
               C47633 * C47907 * C48003 +
           (C21875 * C1323 - C21876 * C1308 - C21875 * C1324 + C21871 * C1335 +
            C21877 * C6145 - C21878 * C6143 - C21877 * C6146 + C21872 * C6149 +
            C21879 * C22730 - C21880 * C22729 - C21879 * C22731 +
            C21873 * C22732) *
               C47633 * C47907 * C47977) *
              C47974) *
         C47658) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C21875 * C122 - C21876 * C115 - C21875 * C123 + C21871 * C136 +
            C21877 * C308 - C21878 * C296 - C21877 * C309 + C21872 * C326 +
            C21879 * C310 - C21880 * C297 - C21879 * C311 + C21873 * C327) *
               C47633 * C47907 * C1844 -
           (C21879 * C1321 - C21880 * C1307 - C21879 * C1322 + C21873 * C1334 +
            C21877 * C948 - C21878 * C943 - C21877 * C949 + C21872 * C958 +
            C21875 * C503 - C21876 * C491 - C21875 * C504 + C21871 * C521) *
               C47633 * C47907 * C1845 +
           (C21875 * C505 - C21876 * C492 - C21875 * C506 + C21871 * C522 +
            C21877 * C1315 - C21878 * C1304 - C21877 * C1316 + C21872 * C1331 +
            C21879 * C1323 - C21880 * C1308 - C21879 * C1324 + C21873 * C1335) *
               C47633 * C47907 * C47977) *
              C47686 * C48010 +
          ((C21875 * C501 - C21876 * C490 - C21875 * C502 + C21871 * C520 +
            C21877 * C950 - C21878 * C944 - C21877 * C951 + C21872 * C959 +
            C21879 * C1319 - C21880 * C1306 - C21879 * C1320 + C21873 * C1333) *
               C47633 * C47907 * C1845 -
           (C21879 * C312 - C21880 * C298 - C21879 * C313 + C21873 * C328 +
            C21877 * C306 - C21878 * C295 - C21877 * C307 + C21872 * C325 +
            C21875 * C124 - C21876 * C116 - C21875 * C125 + C21871 * C137) *
               C47633 * C47907 * C1844 -
           (C21879 * C1325 - C21880 * C1309 - C21879 * C1326 + C21873 * C1336 +
            C21877 * C1313 - C21878 * C1303 - C21877 * C1314 + C21872 * C1330 +
            C21875 * C507 - C21876 * C493 - C21875 * C508 + C21871 * C523) *
               C47633 * C47907 * C47977) *
              C47686 * C47997 +
          ((C21875 * C126 - C21876 * C117 - C21875 * C127 + C21871 * C138 +
            C21877 * C304 - C21878 * C294 - C21877 * C305 + C21872 * C324 +
            C21879 * C314 - C21880 * C299 - C21879 * C315 + C21873 * C329) *
               C47633 * C47907 * C1844 -
           (C21879 * C1317 - C21880 * C1305 - C21879 * C1318 + C21873 * C1332 +
            C21877 * C952 - C21878 * C945 - C21877 * C953 + C21872 * C960 +
            C21875 * C499 - C21876 * C489 - C21875 * C500 + C21871 * C519) *
               C47633 * C47907 * C1845 +
           (C21875 * C509 - C21876 * C494 - C21875 * C510 + C21871 * C524 +
            C21877 * C1311 - C21878 * C1302 - C21877 * C1312 + C21872 * C1329 +
            C21879 * C1327 - C21880 * C1310 - C21879 * C1328 + C21873 * C1337) *
               C47633 * C47907 * C47977) *
              C47686 * C47968)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C21875 * C122 - C21876 * C115 - C21875 * C123 + C21871 * C136 +
            C21877 * C308 - C21878 * C296 - C21877 * C309 + C21872 * C326 +
            C21879 * C310 - C21880 * C297 - C21879 * C311 + C21873 * C327) *
               C47633 * C47907 * C1844 -
           (C21879 * C1321 - C21880 * C1307 - C21879 * C1322 + C21873 * C1334 +
            C21877 * C948 - C21878 * C943 - C21877 * C949 + C21872 * C958 +
            C21875 * C503 - C21876 * C491 - C21875 * C504 + C21871 * C521) *
               C47633 * C47907 * C1845 +
           (C21875 * C505 - C21876 * C492 - C21875 * C506 + C21871 * C522 +
            C21877 * C1315 - C21878 * C1304 - C21877 * C1316 + C21872 * C1331 +
            C21879 * C1323 - C21880 * C1308 - C21879 * C1324 + C21873 * C1335) *
               C47633 * C47907 * C47977) *
              C48013 +
          ((C21875 * C948 - C21876 * C943 - C21875 * C949 + C21871 * C958 +
            C21877 * C1321 - C21878 * C1307 - C21877 * C1322 + C21872 * C1334 +
            C21879 * C1725 - C21880 * C1722 - C21879 * C1726 + C21873 * C1731) *
               C47633 * C47907 * C1845 -
           (C21879 * C1178 - C21880 * C1170 - C21879 * C1179 + C21873 * C1188 +
            C21877 * C310 - C21878 * C297 - C21877 * C311 + C21872 * C327 +
            C21875 * C308 - C21876 * C296 - C21875 * C309 + C21871 * C326) *
               C47633 * C47907 * C1844 -
           (C21879 * C6145 - C21880 * C6143 - C21879 * C6146 + C21873 * C6149 +
            C21877 * C1323 - C21878 * C1308 - C21877 * C1324 + C21872 * C1335 +
            C21875 * C1315 - C21876 * C1304 - C21875 * C1316 + C21871 * C1331) *
               C47633 * C47907 * C47977) *
              C48001 +
          ((C21875 * C310 - C21876 * C297 - C21875 * C311 + C21871 * C327 +
            C21877 * C1178 - C21878 * C1170 - C21877 * C1179 + C21872 * C1188 +
            C21879 * C1180 - C21880 * C1171 - C21879 * C1181 + C21873 * C1189) *
               C47633 * C47907 * C1844 -
           (C21879 * C6635 - C21880 * C6633 - C21879 * C6636 + C21873 * C6639 +
            C21877 * C1725 - C21878 * C1722 - C21877 * C1726 + C21872 * C1731 +
            C21875 * C1321 - C21876 * C1307 - C21875 * C1322 + C21871 * C1334) *
               C47633 * C47907 * C1845 +
           (C21875 * C1323 - C21876 * C1308 - C21875 * C1324 + C21871 * C1335 +
            C21877 * C6145 - C21878 * C6143 - C21877 * C6146 + C21872 * C6149 +
            C21879 * C22730 - C21880 * C22729 - C21879 * C22731 +
            C21873 * C22732) *
               C47633 * C47907 * C47977) *
              C47974) *
         C47658) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((C21875 * C122 - C21876 * C115 - C21875 * C123 + C21871 * C136 +
           C21877 * C308 - C21878 * C296 - C21877 * C309 + C21872 * C326 +
           C21879 * C310 - C21880 * C297 - C21879 * C311 + C21873 * C327) *
              C47633 * C47907 * C2019 -
          (C21879 * C1321 - C21880 * C1307 - C21879 * C1322 + C21873 * C1334 +
           C21877 * C948 - C21878 * C943 - C21877 * C949 + C21872 * C958 +
           C21875 * C503 - C21876 * C491 - C21875 * C504 + C21871 * C521) *
              C47633 * C47907 * C2020 +
          (C21875 * C505 - C21876 * C492 - C21875 * C506 + C21871 * C522 +
           C21877 * C1315 - C21878 * C1304 - C21877 * C1316 + C21872 * C1331 +
           C21879 * C1323 - C21880 * C1308 - C21879 * C1324 + C21873 * C1335) *
              C47633 * C47907 * C2021 -
          (C21879 * C7507 - C21880 * C7505 - C21879 * C7508 + C21873 * C7511 +
           C21877 * C2433 - C21878 * C2430 - C21877 * C2434 + C21872 * C2439 +
           C21875 * C2034 - C21876 * C2026 - C21875 * C2035 + C21871 * C2044) *
              C47633 * C47907 * C2022 +
          (C21875 * C2036 - C21876 * C2027 - C21875 * C2037 + C21871 * C2045 +
           C21877 * C7017 - C21878 * C7015 - C21877 * C7018 + C21872 * C7021 +
           C21879 * C23362 - C21880 * C23361 - C21879 * C23363 +
           C21873 * C23364) *
              C47633 * C47907 * C2023) *
         C47686 * C47658) /
            (p * q * std::sqrt(p + q));
    d2ee[113] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C21875 * C122 - C21876 * C115 - C21875 * C123 + C21871 * C136 +
             C21877 * C308 - C21878 * C296 - C21877 * C309 + C21872 * C326 +
             C21879 * C310 - C21880 * C297 - C21879 * C311 + C21873 * C327) *
                C47633 * C47907 * C47943 -
            (C21879 * C1321 - C21880 * C1307 - C21879 * C1322 + C21873 * C1334 +
             C21877 * C948 - C21878 * C943 - C21877 * C949 + C21872 * C958 +
             C21875 * C503 - C21876 * C491 - C21875 * C504 + C21871 * C521) *
                C47633 * C47907 * C47791) *
               C1094 +
           ((C21875 * C948 - C21876 * C943 - C21875 * C949 + C21871 * C958 +
             C21877 * C1321 - C21878 * C1307 - C21877 * C1322 + C21872 * C1334 +
             C21879 * C1725 - C21880 * C1722 - C21879 * C1726 +
             C21873 * C1731) *
                C47633 * C47907 * C47791 -
            (C21879 * C1178 - C21880 * C1170 - C21879 * C1179 + C21873 * C1188 +
             C21877 * C310 - C21878 * C297 - C21877 * C311 + C21872 * C327 +
             C21875 * C308 - C21876 * C296 - C21875 * C309 + C21871 * C326) *
                C47633 * C47907 * C47943) *
               C1095 +
           ((C21875 * C310 - C21876 * C297 - C21875 * C311 + C21871 * C327 +
             C21877 * C1178 - C21878 * C1170 - C21877 * C1179 + C21872 * C1188 +
             C21879 * C1180 - C21880 * C1171 - C21879 * C1181 +
             C21873 * C1189) *
                C47633 * C47907 * C47943 -
            (C21879 * C6635 - C21880 * C6633 - C21879 * C6636 + C21873 * C6639 +
             C21877 * C1725 - C21878 * C1722 - C21877 * C1726 + C21872 * C1731 +
             C21875 * C1321 - C21876 * C1307 - C21875 * C1322 +
             C21871 * C1334) *
                C47633 * C47907 * C47791) *
               C47974) *
              C47928 +
          (((C21875 * C501 - C21876 * C490 - C21875 * C502 + C21871 * C520 +
             C21877 * C950 - C21878 * C944 - C21877 * C951 + C21872 * C959 +
             C21879 * C1319 - C21880 * C1306 - C21879 * C1320 +
             C21873 * C1333) *
                C47633 * C47907 * C47791 -
            (C21879 * C312 - C21880 * C298 - C21879 * C313 + C21873 * C328 +
             C21877 * C306 - C21878 * C295 - C21877 * C307 + C21872 * C325 +
             C21875 * C124 - C21876 * C116 - C21875 * C125 + C21871 * C137) *
                C47633 * C47907 * C47943) *
               C1094 +
           ((C21875 * C306 - C21876 * C295 - C21875 * C307 + C21871 * C325 +
             C21877 * C312 - C21878 * C298 - C21877 * C313 + C21872 * C328 +
             C21879 * C1176 - C21880 * C1169 - C21879 * C1177 +
             C21873 * C1187) *
                C47633 * C47907 * C47943 -
            (C21879 * C1727 - C21880 * C1723 - C21879 * C1728 + C21873 * C1732 +
             C21877 * C1319 - C21878 * C1306 - C21877 * C1320 + C21872 * C1333 +
             C21875 * C950 - C21876 * C944 - C21875 * C951 + C21871 * C959) *
                C47633 * C47907 * C47791) *
               C1095 +
           ((C21875 * C1319 - C21876 * C1306 - C21875 * C1320 + C21871 * C1333 +
             C21877 * C1727 - C21878 * C1723 - C21877 * C1728 + C21872 * C1732 +
             C21879 * C6637 - C21880 * C6634 - C21879 * C6638 +
             C21873 * C6640) *
                C47633 * C47907 * C47791 -
            (C21879 * C1182 - C21880 * C1172 - C21879 * C1183 + C21873 * C1190 +
             C21877 * C1176 - C21878 * C1169 - C21877 * C1177 + C21872 * C1187 +
             C21875 * C312 - C21876 * C298 - C21875 * C313 + C21871 * C328) *
                C47633 * C47907 * C47943) *
               C47974) *
              C47669)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C21875 * C122 - C21876 * C115 - C21875 * C123 + C21871 * C136 +
            C21877 * C308 - C21878 * C296 - C21877 * C309 + C21872 * C326 +
            C21879 * C310 - C21880 * C297 - C21879 * C311 + C21873 * C327) *
               C47633 * C47907 * C47943 -
           (C21879 * C1321 - C21880 * C1307 - C21879 * C1322 + C21873 * C1334 +
            C21877 * C948 - C21878 * C943 - C21877 * C949 + C21872 * C958 +
            C21875 * C503 - C21876 * C491 - C21875 * C504 + C21871 * C521) *
               C47633 * C47907 * C47791) *
              C47686 * C671 +
          ((C21875 * C501 - C21876 * C490 - C21875 * C502 + C21871 * C520 +
            C21877 * C950 - C21878 * C944 - C21877 * C951 + C21872 * C959 +
            C21879 * C1319 - C21880 * C1306 - C21879 * C1320 + C21873 * C1333) *
               C47633 * C47907 * C47791 -
           (C21879 * C312 - C21880 * C298 - C21879 * C313 + C21873 * C328 +
            C21877 * C306 - C21878 * C295 - C21877 * C307 + C21872 * C325 +
            C21875 * C124 - C21876 * C116 - C21875 * C125 + C21871 * C137) *
               C47633 * C47907 * C47943) *
              C47686 * C672 +
          ((C21875 * C126 - C21876 * C117 - C21875 * C127 + C21871 * C138 +
            C21877 * C304 - C21878 * C294 - C21877 * C305 + C21872 * C324 +
            C21879 * C314 - C21880 * C299 - C21879 * C315 + C21873 * C329) *
               C47633 * C47907 * C47943 -
           (C21879 * C1317 - C21880 * C1305 - C21879 * C1318 + C21873 * C1332 +
            C21877 * C952 - C21878 * C945 - C21877 * C953 + C21872 * C960 +
            C21875 * C499 - C21876 * C489 - C21875 * C500 + C21871 * C519) *
               C47633 * C47907 * C47791) *
              C47686 * C673 +
          ((C21875 * C511 - C21876 * C495 - C21875 * C512 + C21871 * C525 +
            C21877 * C954 - C21878 * C946 - C21877 * C955 + C21872 * C961 +
            C21879 * C1607 - C21880 * C1606 - C21879 * C1608 + C21873 * C1609) *
               C47633 * C47907 * C47791 -
           (C21879 * C318 - C21880 * C301 - C21879 * C319 + C21873 * C331 +
            C21877 * C316 - C21878 * C300 - C21877 * C317 + C21872 * C330 +
            C21875 * C128 - C21876 * C118 - C21875 * C129 + C21871 * C139) *
               C47633 * C47907 * C47943) *
              C47686 * C47978)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C21875 * C122 - C21876 * C115 - C21875 * C123 + C21871 * C136 +
            C21877 * C308 - C21878 * C296 - C21877 * C309 + C21872 * C326 +
            C21879 * C310 - C21880 * C297 - C21879 * C311 + C21873 * C327) *
               C47633 * C47907 * C2310 -
           (C21879 * C1321 - C21880 * C1307 - C21879 * C1322 + C21873 * C1334 +
            C21877 * C948 - C21878 * C943 - C21877 * C949 + C21872 * C958 +
            C21875 * C503 - C21876 * C491 - C21875 * C504 + C21871 * C521) *
               C47633 * C47907 * C2311 +
           (C21875 * C505 - C21876 * C492 - C21875 * C506 + C21871 * C522 +
            C21877 * C1315 - C21878 * C1304 - C21877 * C1316 + C21872 * C1331 +
            C21879 * C1323 - C21880 * C1308 - C21879 * C1324 + C21873 * C1335) *
               C47633 * C47907 * C2312 -
           (C21879 * C7507 - C21880 * C7505 - C21879 * C7508 + C21873 * C7511 +
            C21877 * C2433 - C21878 * C2430 - C21877 * C2434 + C21872 * C2439 +
            C21875 * C2034 - C21876 * C2026 - C21875 * C2035 + C21871 * C2044) *
               C47633 * C47907 * C47990) *
              C47686 * C47928 +
          ((C21875 * C501 - C21876 * C490 - C21875 * C502 + C21871 * C520 +
            C21877 * C950 - C21878 * C944 - C21877 * C951 + C21872 * C959 +
            C21879 * C1319 - C21880 * C1306 - C21879 * C1320 + C21873 * C1333) *
               C47633 * C47907 * C2311 -
           (C21879 * C312 - C21880 * C298 - C21879 * C313 + C21873 * C328 +
            C21877 * C306 - C21878 * C295 - C21877 * C307 + C21872 * C325 +
            C21875 * C124 - C21876 * C116 - C21875 * C125 + C21871 * C137) *
               C47633 * C47907 * C2310 -
           (C21879 * C1325 - C21880 * C1309 - C21879 * C1326 + C21873 * C1336 +
            C21877 * C1313 - C21878 * C1303 - C21877 * C1314 + C21872 * C1330 +
            C21875 * C507 - C21876 * C493 - C21875 * C508 + C21871 * C523) *
               C47633 * C47907 * C2312 +
           (C21875 * C2032 - C21876 * C2025 - C21875 * C2033 + C21871 * C2043 +
            C21877 * C2435 - C21878 * C2431 - C21877 * C2436 + C21872 * C2440 +
            C21879 * C7509 - C21880 * C7506 - C21879 * C7510 + C21873 * C7512) *
               C47633 * C47907 * C47990) *
              C47686 * C47669)) /
            (p * q * std::sqrt(p + q));
    d2ee[114] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C21875 * C122 - C21876 * C115 - C21875 * C123 + C21871 * C136 +
            C21877 * C308 - C21878 * C296 - C21877 * C309 + C21872 * C326 +
            C21879 * C310 - C21880 * C297 - C21879 * C311 + C21873 * C327) *
               C47633 * C47907 * C47704 * C48013 -
           (C21879 * C1178 - C21880 * C1170 - C21879 * C1179 + C21873 * C1188 +
            C21877 * C310 - C21878 * C297 - C21877 * C311 + C21872 * C327 +
            C21875 * C308 - C21876 * C296 - C21875 * C309 + C21871 * C326) *
               C47633 * C47907 * C47704 * C48001 +
           (C21875 * C310 - C21876 * C297 - C21875 * C311 + C21871 * C327 +
            C21877 * C1178 - C21878 * C1170 - C21877 * C1179 + C21872 * C1188 +
            C21879 * C1180 - C21880 * C1171 - C21879 * C1181 + C21873 * C1189) *
               C47633 * C47907 * C47704 * C47974) *
              C291 +
          ((C21875 * C306 - C21876 * C295 - C21875 * C307 + C21871 * C325 +
            C21877 * C312 - C21878 * C298 - C21877 * C313 + C21872 * C328 +
            C21879 * C1176 - C21880 * C1169 - C21879 * C1177 + C21873 * C1187) *
               C47633 * C47907 * C47704 * C48001 -
           (C21879 * C312 - C21880 * C298 - C21879 * C313 + C21873 * C328 +
            C21877 * C306 - C21878 * C295 - C21877 * C307 + C21872 * C325 +
            C21875 * C124 - C21876 * C116 - C21875 * C125 + C21871 * C137) *
               C47633 * C47907 * C47704 * C48013 -
           (C21879 * C1182 - C21880 * C1172 - C21879 * C1183 + C21873 * C1190 +
            C21877 * C1176 - C21878 * C1169 - C21877 * C1177 + C21872 * C1187 +
            C21875 * C312 - C21876 * C298 - C21875 * C313 + C21871 * C328) *
               C47633 * C47907 * C47704 * C47974) *
              C292 +
          ((C21875 * C126 - C21876 * C117 - C21875 * C127 + C21871 * C138 +
            C21877 * C304 - C21878 * C294 - C21877 * C305 + C21872 * C324 +
            C21879 * C314 - C21880 * C299 - C21879 * C315 + C21873 * C329) *
               C47633 * C47907 * C47704 * C48013 -
           (C21879 * C1174 - C21880 * C1168 - C21879 * C1175 + C21873 * C1186 +
            C21877 * C314 - C21878 * C299 - C21877 * C315 + C21872 * C329 +
            C21875 * C304 - C21876 * C294 - C21875 * C305 + C21871 * C324) *
               C47633 * C47907 * C47704 * C48001 +
           (C21875 * C314 - C21876 * C299 - C21875 * C315 + C21871 * C329 +
            C21877 * C1174 - C21878 * C1168 - C21877 * C1175 + C21872 * C1186 +
            C21879 * C1184 - C21880 * C1173 - C21879 * C1185 + C21873 * C1191) *
               C47633 * C47907 * C47704 * C47974) *
              C47968)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((C21875 * C122 - C21876 * C115 - C21875 * C123 + C21871 * C136 +
           C21877 * C308 - C21878 * C296 - C21877 * C309 + C21872 * C326 +
           C21879 * C310 - C21880 * C297 - C21879 * C311 + C21873 * C327) *
              C47633 * C47907 * C47704 * C47686 * C108 -
          (C21879 * C312 - C21880 * C298 - C21879 * C313 + C21873 * C328 +
           C21877 * C306 - C21878 * C295 - C21877 * C307 + C21872 * C325 +
           C21875 * C124 - C21876 * C116 - C21875 * C125 + C21871 * C137) *
              C47633 * C47907 * C47704 * C47686 * C109 +
          (C21875 * C126 - C21876 * C117 - C21875 * C127 + C21871 * C138 +
           C21877 * C304 - C21878 * C294 - C21877 * C305 + C21872 * C324 +
           C21879 * C314 - C21880 * C299 - C21879 * C315 + C21873 * C329) *
              C47633 * C47907 * C47704 * C47686 * C110 -
          (C21879 * C318 - C21880 * C301 - C21879 * C319 + C21873 * C331 +
           C21877 * C316 - C21878 * C300 - C21877 * C317 + C21872 * C330 +
           C21875 * C128 - C21876 * C118 - C21875 * C129 + C21871 * C139) *
              C47633 * C47907 * C47704 * C47686 * C111 +
          (C21875 * C130 - C21876 * C119 - C21875 * C131 + C21871 * C140 +
           C21877 * C320 - C21878 * C302 - C21877 * C321 + C21872 * C332 +
           C21879 * C322 - C21880 * C303 - C21879 * C323 + C21873 * C333) *
              C47633 * C47907 * C47704 * C47686 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C21875 * C122 - C21876 * C115 - C21875 * C123 + C21871 * C136 +
            C21877 * C308 - C21878 * C296 - C21877 * C309 + C21872 * C326 +
            C21879 * C310 - C21880 * C297 - C21879 * C311 + C21873 * C327) *
               C47633 * C47907 * C47704 * C1094 -
           (C21879 * C1178 - C21880 * C1170 - C21879 * C1179 + C21873 * C1188 +
            C21877 * C310 - C21878 * C297 - C21877 * C311 + C21872 * C327 +
            C21875 * C308 - C21876 * C296 - C21875 * C309 + C21871 * C326) *
               C47633 * C47907 * C47704 * C1095 +
           (C21875 * C310 - C21876 * C297 - C21875 * C311 + C21871 * C327 +
            C21877 * C1178 - C21878 * C1170 - C21877 * C1179 + C21872 * C1188 +
            C21879 * C1180 - C21880 * C1171 - C21879 * C1181 + C21873 * C1189) *
               C47633 * C47907 * C47704 * C47974) *
              C48010 +
          ((C21875 * C306 - C21876 * C295 - C21875 * C307 + C21871 * C325 +
            C21877 * C312 - C21878 * C298 - C21877 * C313 + C21872 * C328 +
            C21879 * C1176 - C21880 * C1169 - C21879 * C1177 + C21873 * C1187) *
               C47633 * C47907 * C47704 * C1095 -
           (C21879 * C312 - C21880 * C298 - C21879 * C313 + C21873 * C328 +
            C21877 * C306 - C21878 * C295 - C21877 * C307 + C21872 * C325 +
            C21875 * C124 - C21876 * C116 - C21875 * C125 + C21871 * C137) *
               C47633 * C47907 * C47704 * C1094 -
           (C21879 * C1182 - C21880 * C1172 - C21879 * C1183 + C21873 * C1190 +
            C21877 * C1176 - C21878 * C1169 - C21877 * C1177 + C21872 * C1187 +
            C21875 * C312 - C21876 * C298 - C21875 * C313 + C21871 * C328) *
               C47633 * C47907 * C47704 * C47974) *
              C47997 +
          ((C21875 * C126 - C21876 * C117 - C21875 * C127 + C21871 * C138 +
            C21877 * C304 - C21878 * C294 - C21877 * C305 + C21872 * C324 +
            C21879 * C314 - C21880 * C299 - C21879 * C315 + C21873 * C329) *
               C47633 * C47907 * C47704 * C1094 -
           (C21879 * C1174 - C21880 * C1168 - C21879 * C1175 + C21873 * C1186 +
            C21877 * C314 - C21878 * C299 - C21877 * C315 + C21872 * C329 +
            C21875 * C304 - C21876 * C294 - C21875 * C305 + C21871 * C324) *
               C47633 * C47907 * C47704 * C1095 +
           (C21875 * C314 - C21876 * C299 - C21875 * C315 + C21871 * C329 +
            C21877 * C1174 - C21878 * C1168 - C21877 * C1175 + C21872 * C1186 +
            C21879 * C1184 - C21880 * C1173 - C21879 * C1185 + C21873 * C1191) *
               C47633 * C47907 * C47704 * C47974) *
              C47968)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((C21875 * C122 - C21876 * C115 - C21875 * C123 + C21871 * C136 +
           C21877 * C308 - C21878 * C296 - C21877 * C309 + C21872 * C326 +
           C21879 * C310 - C21880 * C297 - C21879 * C311 + C21873 * C327) *
              C47633 * C47907 * C47704 * C1162 -
          (C21879 * C1178 - C21880 * C1170 - C21879 * C1179 + C21873 * C1188 +
           C21877 * C310 - C21878 * C297 - C21877 * C311 + C21872 * C327 +
           C21875 * C308 - C21876 * C296 - C21875 * C309 + C21871 * C326) *
              C47633 * C47907 * C47704 * C1163 +
          (C21875 * C310 - C21876 * C297 - C21875 * C311 + C21871 * C327 +
           C21877 * C1178 - C21878 * C1170 - C21877 * C1179 + C21872 * C1188 +
           C21879 * C1180 - C21880 * C1171 - C21879 * C1181 + C21873 * C1189) *
              C47633 * C47907 * C47704 * C1164 -
          (C21879 * C5991 - C21880 * C5989 - C21879 * C5992 + C21873 * C5995 +
           C21877 * C1180 - C21878 * C1171 - C21877 * C1181 + C21872 * C1189 +
           C21875 * C1178 - C21876 * C1170 - C21875 * C1179 + C21871 * C1188) *
              C47633 * C47907 * C47704 * C1165 +
          (C21875 * C1180 - C21876 * C1171 - C21875 * C1181 + C21871 * C1189 +
           C21877 * C5991 - C21878 * C5989 - C21877 * C5992 + C21872 * C5995 +
           C21879 * C22616 - C21880 * C22615 - C21879 * C22617 +
           C21873 * C22618) *
              C47633 * C47907 * C47704 * C1166) *
         C47658) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C21875 * C122 - C21876 * C115 - C21875 * C123 + C21871 * C136 +
            C21877 * C308 - C21878 * C296 - C21877 * C309 + C21872 * C326 +
            C21879 * C310 - C21880 * C297 - C21879 * C311 + C21873 * C327) *
               C47633 * C47907 * C1844 -
           (C21879 * C1321 - C21880 * C1307 - C21879 * C1322 + C21873 * C1334 +
            C21877 * C948 - C21878 * C943 - C21877 * C949 + C21872 * C958 +
            C21875 * C503 - C21876 * C491 - C21875 * C504 + C21871 * C521) *
               C47633 * C47907 * C1845 +
           (C21875 * C505 - C21876 * C492 - C21875 * C506 + C21871 * C522 +
            C21877 * C1315 - C21878 * C1304 - C21877 * C1316 + C21872 * C1331 +
            C21879 * C1323 - C21880 * C1308 - C21879 * C1324 + C21873 * C1335) *
               C47633 * C47907 * C47977) *
              C47686 * C48010 +
          ((C21875 * C501 - C21876 * C490 - C21875 * C502 + C21871 * C520 +
            C21877 * C950 - C21878 * C944 - C21877 * C951 + C21872 * C959 +
            C21879 * C1319 - C21880 * C1306 - C21879 * C1320 + C21873 * C1333) *
               C47633 * C47907 * C1845 -
           (C21879 * C312 - C21880 * C298 - C21879 * C313 + C21873 * C328 +
            C21877 * C306 - C21878 * C295 - C21877 * C307 + C21872 * C325 +
            C21875 * C124 - C21876 * C116 - C21875 * C125 + C21871 * C137) *
               C47633 * C47907 * C1844 -
           (C21879 * C1325 - C21880 * C1309 - C21879 * C1326 + C21873 * C1336 +
            C21877 * C1313 - C21878 * C1303 - C21877 * C1314 + C21872 * C1330 +
            C21875 * C507 - C21876 * C493 - C21875 * C508 + C21871 * C523) *
               C47633 * C47907 * C47977) *
              C47686 * C47997 +
          ((C21875 * C126 - C21876 * C117 - C21875 * C127 + C21871 * C138 +
            C21877 * C304 - C21878 * C294 - C21877 * C305 + C21872 * C324 +
            C21879 * C314 - C21880 * C299 - C21879 * C315 + C21873 * C329) *
               C47633 * C47907 * C1844 -
           (C21879 * C1317 - C21880 * C1305 - C21879 * C1318 + C21873 * C1332 +
            C21877 * C952 - C21878 * C945 - C21877 * C953 + C21872 * C960 +
            C21875 * C499 - C21876 * C489 - C21875 * C500 + C21871 * C519) *
               C47633 * C47907 * C1845 +
           (C21875 * C509 - C21876 * C494 - C21875 * C510 + C21871 * C524 +
            C21877 * C1311 - C21878 * C1302 - C21877 * C1312 + C21872 * C1329 +
            C21879 * C1327 - C21880 * C1310 - C21879 * C1328 + C21873 * C1337) *
               C47633 * C47907 * C47977) *
              C47686 * C47968)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C21875 * C122 - C21876 * C115 - C21875 * C123 + C21871 * C136 +
            C21877 * C308 - C21878 * C296 - C21877 * C309 + C21872 * C326 +
            C21879 * C310 - C21880 * C297 - C21879 * C311 + C21873 * C327) *
               C47633 * C47907 * C1844 -
           (C21879 * C1321 - C21880 * C1307 - C21879 * C1322 + C21873 * C1334 +
            C21877 * C948 - C21878 * C943 - C21877 * C949 + C21872 * C958 +
            C21875 * C503 - C21876 * C491 - C21875 * C504 + C21871 * C521) *
               C47633 * C47907 * C1845 +
           (C21875 * C505 - C21876 * C492 - C21875 * C506 + C21871 * C522 +
            C21877 * C1315 - C21878 * C1304 - C21877 * C1316 + C21872 * C1331 +
            C21879 * C1323 - C21880 * C1308 - C21879 * C1324 + C21873 * C1335) *
               C47633 * C47907 * C47977) *
              C48013 +
          ((C21875 * C948 - C21876 * C943 - C21875 * C949 + C21871 * C958 +
            C21877 * C1321 - C21878 * C1307 - C21877 * C1322 + C21872 * C1334 +
            C21879 * C1725 - C21880 * C1722 - C21879 * C1726 + C21873 * C1731) *
               C47633 * C47907 * C1845 -
           (C21879 * C1178 - C21880 * C1170 - C21879 * C1179 + C21873 * C1188 +
            C21877 * C310 - C21878 * C297 - C21877 * C311 + C21872 * C327 +
            C21875 * C308 - C21876 * C296 - C21875 * C309 + C21871 * C326) *
               C47633 * C47907 * C1844 -
           (C21879 * C6145 - C21880 * C6143 - C21879 * C6146 + C21873 * C6149 +
            C21877 * C1323 - C21878 * C1308 - C21877 * C1324 + C21872 * C1335 +
            C21875 * C1315 - C21876 * C1304 - C21875 * C1316 + C21871 * C1331) *
               C47633 * C47907 * C47977) *
              C48001 +
          ((C21875 * C310 - C21876 * C297 - C21875 * C311 + C21871 * C327 +
            C21877 * C1178 - C21878 * C1170 - C21877 * C1179 + C21872 * C1188 +
            C21879 * C1180 - C21880 * C1171 - C21879 * C1181 + C21873 * C1189) *
               C47633 * C47907 * C1844 -
           (C21879 * C6635 - C21880 * C6633 - C21879 * C6636 + C21873 * C6639 +
            C21877 * C1725 - C21878 * C1722 - C21877 * C1726 + C21872 * C1731 +
            C21875 * C1321 - C21876 * C1307 - C21875 * C1322 + C21871 * C1334) *
               C47633 * C47907 * C1845 +
           (C21875 * C1323 - C21876 * C1308 - C21875 * C1324 + C21871 * C1335 +
            C21877 * C6145 - C21878 * C6143 - C21877 * C6146 + C21872 * C6149 +
            C21879 * C22730 - C21880 * C22729 - C21879 * C22731 +
            C21873 * C22732) *
               C47633 * C47907 * C47977) *
              C47974) *
         C47658) /
            (p * q * std::sqrt(p + q));
    d2ee[115] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C21875 * C122 - C21876 * C115 - C21875 * C123 + C21871 * C136 +
             C21877 * C308 - C21878 * C296 - C21877 * C309 + C21872 * C326 +
             C21879 * C310 - C21880 * C297 - C21879 * C311 + C21873 * C327) *
                C47633 * C47907 * C3302 -
            (C21879 * C1321 - C21880 * C1307 - C21879 * C1322 + C21873 * C1334 +
             C21877 * C948 - C21878 * C943 - C21877 * C949 + C21872 * C958 +
             C21875 * C503 - C21876 * C491 - C21875 * C504 + C21871 * C521) *
                C47633 * C47907 * C47791) *
               C47942 +
           ((C21875 * C948 - C21876 * C943 - C21875 * C949 + C21871 * C958 +
             C21877 * C1321 - C21878 * C1307 - C21877 * C1322 + C21872 * C1334 +
             C21879 * C1725 - C21880 * C1722 - C21879 * C1726 +
             C21873 * C1731) *
                C47633 * C47907 * C47791 -
            (C21879 * C1178 - C21880 * C1170 - C21879 * C1179 + C21873 * C1188 +
             C21877 * C310 - C21878 * C297 - C21877 * C311 + C21872 * C327 +
             C21875 * C308 - C21876 * C296 - C21875 * C309 + C21871 * C326) *
                C47633 * C47907 * C3302) *
               C47749) *
              C47663 +
          (((C21875 * C501 - C21876 * C490 - C21875 * C502 + C21871 * C520 +
             C21877 * C950 - C21878 * C944 - C21877 * C951 + C21872 * C959 +
             C21879 * C1319 - C21880 * C1306 - C21879 * C1320 +
             C21873 * C1333) *
                C47633 * C47907 * C47791 -
            (C21879 * C312 - C21880 * C298 - C21879 * C313 + C21873 * C328 +
             C21877 * C306 - C21878 * C295 - C21877 * C307 + C21872 * C325 +
             C21875 * C124 - C21876 * C116 - C21875 * C125 + C21871 * C137) *
                C47633 * C47907 * C3302) *
               C47942 +
           ((C21875 * C306 - C21876 * C295 - C21875 * C307 + C21871 * C325 +
             C21877 * C312 - C21878 * C298 - C21877 * C313 + C21872 * C328 +
             C21879 * C1176 - C21880 * C1169 - C21879 * C1177 +
             C21873 * C1187) *
                C47633 * C47907 * C3302 -
            (C21879 * C1727 - C21880 * C1723 - C21879 * C1728 + C21873 * C1732 +
             C21877 * C1319 - C21878 * C1306 - C21877 * C1320 + C21872 * C1333 +
             C21875 * C950 - C21876 * C944 - C21875 * C951 + C21871 * C959) *
                C47633 * C47907 * C47791) *
               C47749) *
              C47672 +
          (((C21875 * C126 - C21876 * C117 - C21875 * C127 + C21871 * C138 +
             C21877 * C304 - C21878 * C294 - C21877 * C305 + C21872 * C324 +
             C21879 * C314 - C21880 * C299 - C21879 * C315 + C21873 * C329) *
                C47633 * C47907 * C3302 -
            (C21879 * C1317 - C21880 * C1305 - C21879 * C1318 + C21873 * C1332 +
             C21877 * C952 - C21878 * C945 - C21877 * C953 + C21872 * C960 +
             C21875 * C499 - C21876 * C489 - C21875 * C500 + C21871 * C519) *
                C47633 * C47907 * C47791) *
               C47942 +
           ((C21875 * C952 - C21876 * C945 - C21875 * C953 + C21871 * C960 +
             C21877 * C1317 - C21878 * C1305 - C21877 * C1318 + C21872 * C1332 +
             C21879 * C1729 - C21880 * C1724 - C21879 * C1730 +
             C21873 * C1733) *
                C47633 * C47907 * C47791 -
            (C21879 * C1174 - C21880 * C1168 - C21879 * C1175 + C21873 * C1186 +
             C21877 * C314 - C21878 * C299 - C21877 * C315 + C21872 * C329 +
             C21875 * C304 - C21876 * C294 - C21875 * C305 + C21871 * C324) *
                C47633 * C47907 * C3302) *
               C47749) *
              C2911)) /
        (p * q * std::sqrt(p + q));
    d2ee[116] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C21875 * C122 - C21876 * C115 - C21875 * C123 + C21871 * C136 +
             C21877 * C308 - C21878 * C296 - C21877 * C309 + C21872 * C326 +
             C21879 * C310 - C21880 * C297 - C21879 * C311 + C21873 * C327) *
                C47633 * C47907 * C47787 -
            (C21879 * C1321 - C21880 * C1307 - C21879 * C1322 + C21873 * C1334 +
             C21877 * C948 - C21878 * C943 - C21877 * C949 + C21872 * C958 +
             C21875 * C503 - C21876 * C491 - C21875 * C504 + C21871 * C521) *
                C47633 * C47907 * C47794 +
            (C21875 * C505 - C21876 * C492 - C21875 * C506 + C21871 * C522 +
             C21877 * C1315 - C21878 * C1304 - C21877 * C1316 + C21872 * C1331 +
             C21879 * C1323 - C21880 * C1308 - C21879 * C1324 +
             C21873 * C1335) *
                C47633 * C47907 * C3810) *
               C47942 +
           ((C21875 * C948 - C21876 * C943 - C21875 * C949 + C21871 * C958 +
             C21877 * C1321 - C21878 * C1307 - C21877 * C1322 + C21872 * C1334 +
             C21879 * C1725 - C21880 * C1722 - C21879 * C1726 +
             C21873 * C1731) *
                C47633 * C47907 * C47794 -
            (C21879 * C1178 - C21880 * C1170 - C21879 * C1179 + C21873 * C1188 +
             C21877 * C310 - C21878 * C297 - C21877 * C311 + C21872 * C327 +
             C21875 * C308 - C21876 * C296 - C21875 * C309 + C21871 * C326) *
                C47633 * C47907 * C47787 -
            (C21879 * C6145 - C21880 * C6143 - C21879 * C6146 + C21873 * C6149 +
             C21877 * C1323 - C21878 * C1308 - C21877 * C1324 + C21872 * C1335 +
             C21875 * C1315 - C21876 * C1304 - C21875 * C1316 +
             C21871 * C1331) *
                C47633 * C47907 * C3810) *
               C47749) *
              C2648 +
          (((C21875 * C501 - C21876 * C490 - C21875 * C502 + C21871 * C520 +
             C21877 * C950 - C21878 * C944 - C21877 * C951 + C21872 * C959 +
             C21879 * C1319 - C21880 * C1306 - C21879 * C1320 +
             C21873 * C1333) *
                C47633 * C47907 * C47794 -
            (C21879 * C312 - C21880 * C298 - C21879 * C313 + C21873 * C328 +
             C21877 * C306 - C21878 * C295 - C21877 * C307 + C21872 * C325 +
             C21875 * C124 - C21876 * C116 - C21875 * C125 + C21871 * C137) *
                C47633 * C47907 * C47787 -
            (C21879 * C1325 - C21880 * C1309 - C21879 * C1326 + C21873 * C1336 +
             C21877 * C1313 - C21878 * C1303 - C21877 * C1314 + C21872 * C1330 +
             C21875 * C507 - C21876 * C493 - C21875 * C508 + C21871 * C523) *
                C47633 * C47907 * C3810) *
               C47942 +
           ((C21875 * C306 - C21876 * C295 - C21875 * C307 + C21871 * C325 +
             C21877 * C312 - C21878 * C298 - C21877 * C313 + C21872 * C328 +
             C21879 * C1176 - C21880 * C1169 - C21879 * C1177 +
             C21873 * C1187) *
                C47633 * C47907 * C47787 -
            (C21879 * C1727 - C21880 * C1723 - C21879 * C1728 + C21873 * C1732 +
             C21877 * C1319 - C21878 * C1306 - C21877 * C1320 + C21872 * C1333 +
             C21875 * C950 - C21876 * C944 - C21875 * C951 + C21871 * C959) *
                C47633 * C47907 * C47794 +
            (C21875 * C1313 - C21876 * C1303 - C21875 * C1314 + C21871 * C1330 +
             C21877 * C1325 - C21878 * C1309 - C21877 * C1326 + C21872 * C1336 +
             C21879 * C6147 - C21880 * C6144 - C21879 * C6148 +
             C21873 * C6150) *
                C47633 * C47907 * C3810) *
               C47749) *
              C47669)) /
        (p * q * std::sqrt(p + q));
    d2ee[117] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C21875 * C122 - C21876 * C115 - C21875 * C123 + C21871 * C136 +
             C21877 * C308 - C21878 * C296 - C21877 * C309 + C21872 * C326 +
             C21879 * C310 - C21880 * C297 - C21879 * C311 + C21873 * C327) *
                C47633 * C47907 * C3302 -
            (C21879 * C1321 - C21880 * C1307 - C21879 * C1322 + C21873 * C1334 +
             C21877 * C948 - C21878 * C943 - C21877 * C949 + C21872 * C958 +
             C21875 * C503 - C21876 * C491 - C21875 * C504 + C21871 * C521) *
                C47633 * C47907 * C47791) *
               C48013 +
           ((C21875 * C948 - C21876 * C943 - C21875 * C949 + C21871 * C958 +
             C21877 * C1321 - C21878 * C1307 - C21877 * C1322 + C21872 * C1334 +
             C21879 * C1725 - C21880 * C1722 - C21879 * C1726 +
             C21873 * C1731) *
                C47633 * C47907 * C47791 -
            (C21879 * C1178 - C21880 * C1170 - C21879 * C1179 + C21873 * C1188 +
             C21877 * C310 - C21878 * C297 - C21877 * C311 + C21872 * C327 +
             C21875 * C308 - C21876 * C296 - C21875 * C309 + C21871 * C326) *
                C47633 * C47907 * C3302) *
               C48001 +
           ((C21875 * C310 - C21876 * C297 - C21875 * C311 + C21871 * C327 +
             C21877 * C1178 - C21878 * C1170 - C21877 * C1179 + C21872 * C1188 +
             C21879 * C1180 - C21880 * C1171 - C21879 * C1181 +
             C21873 * C1189) *
                C47633 * C47907 * C3302 -
            (C21879 * C6635 - C21880 * C6633 - C21879 * C6636 + C21873 * C6639 +
             C21877 * C1725 - C21878 * C1722 - C21877 * C1726 + C21872 * C1731 +
             C21875 * C1321 - C21876 * C1307 - C21875 * C1322 +
             C21871 * C1334) *
                C47633 * C47907 * C47791) *
               C47974) *
              C2648 +
          (((C21875 * C501 - C21876 * C490 - C21875 * C502 + C21871 * C520 +
             C21877 * C950 - C21878 * C944 - C21877 * C951 + C21872 * C959 +
             C21879 * C1319 - C21880 * C1306 - C21879 * C1320 +
             C21873 * C1333) *
                C47633 * C47907 * C47791 -
            (C21879 * C312 - C21880 * C298 - C21879 * C313 + C21873 * C328 +
             C21877 * C306 - C21878 * C295 - C21877 * C307 + C21872 * C325 +
             C21875 * C124 - C21876 * C116 - C21875 * C125 + C21871 * C137) *
                C47633 * C47907 * C3302) *
               C48013 +
           ((C21875 * C306 - C21876 * C295 - C21875 * C307 + C21871 * C325 +
             C21877 * C312 - C21878 * C298 - C21877 * C313 + C21872 * C328 +
             C21879 * C1176 - C21880 * C1169 - C21879 * C1177 +
             C21873 * C1187) *
                C47633 * C47907 * C3302 -
            (C21879 * C1727 - C21880 * C1723 - C21879 * C1728 + C21873 * C1732 +
             C21877 * C1319 - C21878 * C1306 - C21877 * C1320 + C21872 * C1333 +
             C21875 * C950 - C21876 * C944 - C21875 * C951 + C21871 * C959) *
                C47633 * C47907 * C47791) *
               C48001 +
           ((C21875 * C1319 - C21876 * C1306 - C21875 * C1320 + C21871 * C1333 +
             C21877 * C1727 - C21878 * C1723 - C21877 * C1728 + C21872 * C1732 +
             C21879 * C6637 - C21880 * C6634 - C21879 * C6638 +
             C21873 * C6640) *
                C47633 * C47907 * C47791 -
            (C21879 * C1182 - C21880 * C1172 - C21879 * C1183 + C21873 * C1190 +
             C21877 * C1176 - C21878 * C1169 - C21877 * C1177 + C21872 * C1187 +
             C21875 * C312 - C21876 * C298 - C21875 * C313 + C21871 * C328) *
                C47633 * C47907 * C3302) *
               C47974) *
              C47669)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C21875 * C122 - C21876 * C115 - C21875 * C123 + C21871 * C136 +
            C21877 * C308 - C21878 * C296 - C21877 * C309 + C21872 * C326 +
            C21879 * C310 - C21880 * C297 - C21879 * C311 + C21873 * C327) *
               C47633 * C47907 * C3302 -
           (C21879 * C1321 - C21880 * C1307 - C21879 * C1322 + C21873 * C1334 +
            C21877 * C948 - C21878 * C943 - C21877 * C949 + C21872 * C958 +
            C21875 * C503 - C21876 * C491 - C21875 * C504 + C21871 * C521) *
               C47633 * C47907 * C47791) *
              C47686 * C48019 +
          ((C21875 * C501 - C21876 * C490 - C21875 * C502 + C21871 * C520 +
            C21877 * C950 - C21878 * C944 - C21877 * C951 + C21872 * C959 +
            C21879 * C1319 - C21880 * C1306 - C21879 * C1320 + C21873 * C1333) *
               C47633 * C47907 * C47791 -
           (C21879 * C312 - C21880 * C298 - C21879 * C313 + C21873 * C328 +
            C21877 * C306 - C21878 * C295 - C21877 * C307 + C21872 * C325 +
            C21875 * C124 - C21876 * C116 - C21875 * C125 + C21871 * C137) *
               C47633 * C47907 * C3302) *
              C47686 * C48012 +
          ((C21875 * C126 - C21876 * C117 - C21875 * C127 + C21871 * C138 +
            C21877 * C304 - C21878 * C294 - C21877 * C305 + C21872 * C324 +
            C21879 * C314 - C21880 * C299 - C21879 * C315 + C21873 * C329) *
               C47633 * C47907 * C3302 -
           (C21879 * C1317 - C21880 * C1305 - C21879 * C1318 + C21873 * C1332 +
            C21877 * C952 - C21878 * C945 - C21877 * C953 + C21872 * C960 +
            C21875 * C499 - C21876 * C489 - C21875 * C500 + C21871 * C519) *
               C47633 * C47907 * C47791) *
              C47686 * C47999 +
          ((C21875 * C511 - C21876 * C495 - C21875 * C512 + C21871 * C525 +
            C21877 * C954 - C21878 * C946 - C21877 * C955 + C21872 * C961 +
            C21879 * C1607 - C21880 * C1606 - C21879 * C1608 + C21873 * C1609) *
               C47633 * C47907 * C47791 -
           (C21879 * C318 - C21880 * C301 - C21879 * C319 + C21873 * C331 +
            C21877 * C316 - C21878 * C300 - C21877 * C317 + C21872 * C330 +
            C21875 * C128 - C21876 * C118 - C21875 * C129 + C21871 * C139) *
               C47633 * C47907 * C3302) *
              C47686 * C47978)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C21875 * C122 - C21876 * C115 - C21875 * C123 + C21871 * C136 +
            C21877 * C308 - C21878 * C296 - C21877 * C309 + C21872 * C326 +
            C21879 * C310 - C21880 * C297 - C21879 * C311 + C21873 * C327) *
               C47633 * C47907 * C48021 -
           (C21879 * C1321 - C21880 * C1307 - C21879 * C1322 + C21873 * C1334 +
            C21877 * C948 - C21878 * C943 - C21877 * C949 + C21872 * C958 +
            C21875 * C503 - C21876 * C491 - C21875 * C504 + C21871 * C521) *
               C47633 * C47907 * C48018 +
           (C21875 * C505 - C21876 * C492 - C21875 * C506 + C21871 * C522 +
            C21877 * C1315 - C21878 * C1304 - C21877 * C1316 + C21872 * C1331 +
            C21879 * C1323 - C21880 * C1308 - C21879 * C1324 + C21873 * C1335) *
               C47633 * C47907 * C48009 -
           (C21879 * C7507 - C21880 * C7505 - C21879 * C7508 + C21873 * C7511 +
            C21877 * C2433 - C21878 * C2430 - C21877 * C2434 + C21872 * C2439 +
            C21875 * C2034 - C21876 * C2026 - C21875 * C2035 + C21871 * C2044) *
               C47633 * C47907 * C47990) *
              C47686 * C2648 +
          ((C21875 * C501 - C21876 * C490 - C21875 * C502 + C21871 * C520 +
            C21877 * C950 - C21878 * C944 - C21877 * C951 + C21872 * C959 +
            C21879 * C1319 - C21880 * C1306 - C21879 * C1320 + C21873 * C1333) *
               C47633 * C47907 * C48018 -
           (C21879 * C312 - C21880 * C298 - C21879 * C313 + C21873 * C328 +
            C21877 * C306 - C21878 * C295 - C21877 * C307 + C21872 * C325 +
            C21875 * C124 - C21876 * C116 - C21875 * C125 + C21871 * C137) *
               C47633 * C47907 * C48021 -
           (C21879 * C1325 - C21880 * C1309 - C21879 * C1326 + C21873 * C1336 +
            C21877 * C1313 - C21878 * C1303 - C21877 * C1314 + C21872 * C1330 +
            C21875 * C507 - C21876 * C493 - C21875 * C508 + C21871 * C523) *
               C47633 * C47907 * C48009 +
           (C21875 * C2032 - C21876 * C2025 - C21875 * C2033 + C21871 * C2043 +
            C21877 * C2435 - C21878 * C2431 - C21877 * C2436 + C21872 * C2440 +
            C21879 * C7509 - C21880 * C7506 - C21879 * C7510 + C21873 * C7512) *
               C47633 * C47907 * C47990) *
              C47686 * C47669)) /
            (p * q * std::sqrt(p + q));
    d2ee[118] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((C21875 * C122 - C21876 * C115 - C21875 * C123 + C21871 * C136 +
            C21877 * C308 - C21878 * C296 - C21877 * C309 + C21872 * C326 +
            C21879 * C310 - C21880 * C297 - C21879 * C311 + C21873 * C327) *
               C47633 * C47907 * C47787 -
           (C21879 * C1321 - C21880 * C1307 - C21879 * C1322 + C21873 * C1334 +
            C21877 * C948 - C21878 * C943 - C21877 * C949 + C21872 * C958 +
            C21875 * C503 - C21876 * C491 - C21875 * C504 + C21871 * C521) *
               C47633 * C47907 * C47794 +
           (C21875 * C505 - C21876 * C492 - C21875 * C506 + C21871 * C522 +
            C21877 * C1315 - C21878 * C1304 - C21877 * C1316 + C21872 * C1331 +
            C21879 * C1323 - C21880 * C1308 - C21879 * C1324 + C21873 * C1335) *
               C47633 * C47907 * C3810) *
              C47686 * C47663 +
          ((C21875 * C501 - C21876 * C490 - C21875 * C502 + C21871 * C520 +
            C21877 * C950 - C21878 * C944 - C21877 * C951 + C21872 * C959 +
            C21879 * C1319 - C21880 * C1306 - C21879 * C1320 + C21873 * C1333) *
               C47633 * C47907 * C47794 -
           (C21879 * C312 - C21880 * C298 - C21879 * C313 + C21873 * C328 +
            C21877 * C306 - C21878 * C295 - C21877 * C307 + C21872 * C325 +
            C21875 * C124 - C21876 * C116 - C21875 * C125 + C21871 * C137) *
               C47633 * C47907 * C47787 -
           (C21879 * C1325 - C21880 * C1309 - C21879 * C1326 + C21873 * C1336 +
            C21877 * C1313 - C21878 * C1303 - C21877 * C1314 + C21872 * C1330 +
            C21875 * C507 - C21876 * C493 - C21875 * C508 + C21871 * C523) *
               C47633 * C47907 * C3810) *
              C47686 * C47672 +
          ((C21875 * C126 - C21876 * C117 - C21875 * C127 + C21871 * C138 +
            C21877 * C304 - C21878 * C294 - C21877 * C305 + C21872 * C324 +
            C21879 * C314 - C21880 * C299 - C21879 * C315 + C21873 * C329) *
               C47633 * C47907 * C47787 -
           (C21879 * C1317 - C21880 * C1305 - C21879 * C1318 + C21873 * C1332 +
            C21877 * C952 - C21878 * C945 - C21877 * C953 + C21872 * C960 +
            C21875 * C499 - C21876 * C489 - C21875 * C500 + C21871 * C519) *
               C47633 * C47907 * C47794 +
           (C21875 * C509 - C21876 * C494 - C21875 * C510 + C21871 * C524 +
            C21877 * C1311 - C21878 * C1302 - C21877 * C1312 + C21872 * C1329 +
            C21879 * C1327 - C21880 * C1310 - C21879 * C1328 + C21873 * C1337) *
               C47633 * C47907 * C3810) *
              C47686 * C2911)) /
        (p * q * std::sqrt(p + q));
    d2ee[119] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C21875 * C122 - C21876 * C115 - C21875 * C123 + C21871 * C136 +
            C21877 * C308 - C21878 * C296 - C21877 * C309 + C21872 * C326 +
            C21879 * C310 - C21880 * C297 - C21879 * C311 + C21873 * C327) *
               C47633 * C47907 * C3302 -
           (C21879 * C1321 - C21880 * C1307 - C21879 * C1322 + C21873 * C1334 +
            C21877 * C948 - C21878 * C943 - C21877 * C949 + C21872 * C958 +
            C21875 * C503 - C21876 * C491 - C21875 * C504 + C21871 * C521) *
               C47633 * C47907 * C47791) *
              C47686 * C48019 +
          ((C21875 * C501 - C21876 * C490 - C21875 * C502 + C21871 * C520 +
            C21877 * C950 - C21878 * C944 - C21877 * C951 + C21872 * C959 +
            C21879 * C1319 - C21880 * C1306 - C21879 * C1320 + C21873 * C1333) *
               C47633 * C47907 * C47791 -
           (C21879 * C312 - C21880 * C298 - C21879 * C313 + C21873 * C328 +
            C21877 * C306 - C21878 * C295 - C21877 * C307 + C21872 * C325 +
            C21875 * C124 - C21876 * C116 - C21875 * C125 + C21871 * C137) *
               C47633 * C47907 * C3302) *
              C47686 * C48012 +
          ((C21875 * C126 - C21876 * C117 - C21875 * C127 + C21871 * C138 +
            C21877 * C304 - C21878 * C294 - C21877 * C305 + C21872 * C324 +
            C21879 * C314 - C21880 * C299 - C21879 * C315 + C21873 * C329) *
               C47633 * C47907 * C3302 -
           (C21879 * C1317 - C21880 * C1305 - C21879 * C1318 + C21873 * C1332 +
            C21877 * C952 - C21878 * C945 - C21877 * C953 + C21872 * C960 +
            C21875 * C499 - C21876 * C489 - C21875 * C500 + C21871 * C519) *
               C47633 * C47907 * C47791) *
              C47686 * C47999 +
          ((C21875 * C511 - C21876 * C495 - C21875 * C512 + C21871 * C525 +
            C21877 * C954 - C21878 * C946 - C21877 * C955 + C21872 * C961 +
            C21879 * C1607 - C21880 * C1606 - C21879 * C1608 + C21873 * C1609) *
               C47633 * C47907 * C47791 -
           (C21879 * C318 - C21880 * C301 - C21879 * C319 + C21873 * C331 +
            C21877 * C316 - C21878 * C300 - C21877 * C317 + C21872 * C330 +
            C21875 * C128 - C21876 * C118 - C21875 * C129 + C21871 * C139) *
               C47633 * C47907 * C3302) *
              C47686 * C47978)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C21875 * C122 - C21876 * C115 - C21875 * C123 + C21871 * C136 +
             C21877 * C308 - C21878 * C296 - C21877 * C309 + C21872 * C326 +
             C21879 * C310 - C21880 * C297 - C21879 * C311 + C21873 * C327) *
                C47633 * C47907 * C3302 -
            (C21879 * C1321 - C21880 * C1307 - C21879 * C1322 + C21873 * C1334 +
             C21877 * C948 - C21878 * C943 - C21877 * C949 + C21872 * C958 +
             C21875 * C503 - C21876 * C491 - C21875 * C504 + C21871 * C521) *
                C47633 * C47907 * C47791) *
               C48013 +
           ((C21875 * C948 - C21876 * C943 - C21875 * C949 + C21871 * C958 +
             C21877 * C1321 - C21878 * C1307 - C21877 * C1322 + C21872 * C1334 +
             C21879 * C1725 - C21880 * C1722 - C21879 * C1726 +
             C21873 * C1731) *
                C47633 * C47907 * C47791 -
            (C21879 * C1178 - C21880 * C1170 - C21879 * C1179 + C21873 * C1188 +
             C21877 * C310 - C21878 * C297 - C21877 * C311 + C21872 * C327 +
             C21875 * C308 - C21876 * C296 - C21875 * C309 + C21871 * C326) *
                C47633 * C47907 * C3302) *
               C48001 +
           ((C21875 * C310 - C21876 * C297 - C21875 * C311 + C21871 * C327 +
             C21877 * C1178 - C21878 * C1170 - C21877 * C1179 + C21872 * C1188 +
             C21879 * C1180 - C21880 * C1171 - C21879 * C1181 +
             C21873 * C1189) *
                C47633 * C47907 * C3302 -
            (C21879 * C6635 - C21880 * C6633 - C21879 * C6636 + C21873 * C6639 +
             C21877 * C1725 - C21878 * C1722 - C21877 * C1726 + C21872 * C1731 +
             C21875 * C1321 - C21876 * C1307 - C21875 * C1322 +
             C21871 * C1334) *
                C47633 * C47907 * C47791) *
               C47974) *
              C2648 +
          (((C21875 * C501 - C21876 * C490 - C21875 * C502 + C21871 * C520 +
             C21877 * C950 - C21878 * C944 - C21877 * C951 + C21872 * C959 +
             C21879 * C1319 - C21880 * C1306 - C21879 * C1320 +
             C21873 * C1333) *
                C47633 * C47907 * C47791 -
            (C21879 * C312 - C21880 * C298 - C21879 * C313 + C21873 * C328 +
             C21877 * C306 - C21878 * C295 - C21877 * C307 + C21872 * C325 +
             C21875 * C124 - C21876 * C116 - C21875 * C125 + C21871 * C137) *
                C47633 * C47907 * C3302) *
               C48013 +
           ((C21875 * C306 - C21876 * C295 - C21875 * C307 + C21871 * C325 +
             C21877 * C312 - C21878 * C298 - C21877 * C313 + C21872 * C328 +
             C21879 * C1176 - C21880 * C1169 - C21879 * C1177 +
             C21873 * C1187) *
                C47633 * C47907 * C3302 -
            (C21879 * C1727 - C21880 * C1723 - C21879 * C1728 + C21873 * C1732 +
             C21877 * C1319 - C21878 * C1306 - C21877 * C1320 + C21872 * C1333 +
             C21875 * C950 - C21876 * C944 - C21875 * C951 + C21871 * C959) *
                C47633 * C47907 * C47791) *
               C48001 +
           ((C21875 * C1319 - C21876 * C1306 - C21875 * C1320 + C21871 * C1333 +
             C21877 * C1727 - C21878 * C1723 - C21877 * C1728 + C21872 * C1732 +
             C21879 * C6637 - C21880 * C6634 - C21879 * C6638 +
             C21873 * C6640) *
                C47633 * C47907 * C47791 -
            (C21879 * C1182 - C21880 * C1172 - C21879 * C1183 + C21873 * C1190 +
             C21877 * C1176 - C21878 * C1169 - C21877 * C1177 + C21872 * C1187 +
             C21875 * C312 - C21876 * C298 - C21875 * C313 + C21871 * C328) *
                C47633 * C47907 * C3302) *
               C47974) *
              C47669)) /
            (p * q * std::sqrt(p + q));
    d2ee[120] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C21875 * C122 - C21876 * C115 - C21875 * C123 + C21871 * C136 +
            C21877 * C308 - C21878 * C296 - C21877 * C309 + C21872 * C326 +
            C21879 * C310 - C21880 * C297 - C21879 * C311 + C21873 * C327) *
               C47633 * C47907 * C47704 * C47942 -
           (C21879 * C1178 - C21880 * C1170 - C21879 * C1179 + C21873 * C1188 +
            C21877 * C310 - C21878 * C297 - C21877 * C311 + C21872 * C327 +
            C21875 * C308 - C21876 * C296 - C21875 * C309 + C21871 * C326) *
               C47633 * C47907 * C47704 * C47749) *
              C671 +
          ((C21875 * C306 - C21876 * C295 - C21875 * C307 + C21871 * C325 +
            C21877 * C312 - C21878 * C298 - C21877 * C313 + C21872 * C328 +
            C21879 * C1176 - C21880 * C1169 - C21879 * C1177 + C21873 * C1187) *
               C47633 * C47907 * C47704 * C47749 -
           (C21879 * C312 - C21880 * C298 - C21879 * C313 + C21873 * C328 +
            C21877 * C306 - C21878 * C295 - C21877 * C307 + C21872 * C325 +
            C21875 * C124 - C21876 * C116 - C21875 * C125 + C21871 * C137) *
               C47633 * C47907 * C47704 * C47942) *
              C672 +
          ((C21875 * C126 - C21876 * C117 - C21875 * C127 + C21871 * C138 +
            C21877 * C304 - C21878 * C294 - C21877 * C305 + C21872 * C324 +
            C21879 * C314 - C21880 * C299 - C21879 * C315 + C21873 * C329) *
               C47633 * C47907 * C47704 * C47942 -
           (C21879 * C1174 - C21880 * C1168 - C21879 * C1175 + C21873 * C1186 +
            C21877 * C314 - C21878 * C299 - C21877 * C315 + C21872 * C329 +
            C21875 * C304 - C21876 * C294 - C21875 * C305 + C21871 * C324) *
               C47633 * C47907 * C47704 * C47749) *
              C673 +
          ((C21875 * C316 - C21876 * C300 - C21875 * C317 + C21871 * C330 +
            C21877 * C318 - C21878 * C301 - C21877 * C319 + C21872 * C331 +
            C21879 * C1443 - C21880 * C1442 - C21879 * C1444 + C21873 * C1445) *
               C47633 * C47907 * C47704 * C47749 -
           (C21879 * C318 - C21880 * C301 - C21879 * C319 + C21873 * C331 +
            C21877 * C316 - C21878 * C300 - C21877 * C317 + C21872 * C330 +
            C21875 * C128 - C21876 * C118 - C21875 * C129 + C21871 * C139) *
               C47633 * C47907 * C47704 * C47942) *
              C47978)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C21875 * C122 - C21876 * C115 - C21875 * C123 + C21871 * C136 +
            C21877 * C308 - C21878 * C296 - C21877 * C309 + C21872 * C326 +
            C21879 * C310 - C21880 * C297 - C21879 * C311 + C21873 * C327) *
               C47633 * C47907 * C47704 * C1436 -
           (C21879 * C1178 - C21880 * C1170 - C21879 * C1179 + C21873 * C1188 +
            C21877 * C310 - C21878 * C297 - C21877 * C311 + C21872 * C327 +
            C21875 * C308 - C21876 * C296 - C21875 * C309 + C21871 * C326) *
               C47633 * C47907 * C47704 * C1437 +
           (C21875 * C310 - C21876 * C297 - C21875 * C311 + C21871 * C327 +
            C21877 * C1178 - C21878 * C1170 - C21877 * C1179 + C21872 * C1188 +
            C21879 * C1180 - C21880 * C1171 - C21879 * C1181 + C21873 * C1189) *
               C47633 * C47907 * C47704 * C1438 -
           (C21879 * C5991 - C21880 * C5989 - C21879 * C5992 + C21873 * C5995 +
            C21877 * C1180 - C21878 * C1171 - C21877 * C1181 + C21872 * C1189 +
            C21875 * C1178 - C21876 * C1170 - C21875 * C1179 + C21871 * C1188) *
               C47633 * C47907 * C47704 * C47984) *
              C47928 +
          ((C21875 * C306 - C21876 * C295 - C21875 * C307 + C21871 * C325 +
            C21877 * C312 - C21878 * C298 - C21877 * C313 + C21872 * C328 +
            C21879 * C1176 - C21880 * C1169 - C21879 * C1177 + C21873 * C1187) *
               C47633 * C47907 * C47704 * C1437 -
           (C21879 * C312 - C21880 * C298 - C21879 * C313 + C21873 * C328 +
            C21877 * C306 - C21878 * C295 - C21877 * C307 + C21872 * C325 +
            C21875 * C124 - C21876 * C116 - C21875 * C125 + C21871 * C137) *
               C47633 * C47907 * C47704 * C1436 -
           (C21879 * C1182 - C21880 * C1172 - C21879 * C1183 + C21873 * C1190 +
            C21877 * C1176 - C21878 * C1169 - C21877 * C1177 + C21872 * C1187 +
            C21875 * C312 - C21876 * C298 - C21875 * C313 + C21871 * C328) *
               C47633 * C47907 * C47704 * C1438 +
           (C21875 * C1176 - C21876 * C1169 - C21875 * C1177 + C21871 * C1187 +
            C21877 * C1182 - C21878 * C1172 - C21877 * C1183 + C21872 * C1190 +
            C21879 * C5993 - C21880 * C5990 - C21879 * C5994 + C21873 * C5996) *
               C47633 * C47907 * C47704 * C47984) *
              C47669)) /
            (p * q * std::sqrt(p + q));
    d2ee[121] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C21875 * C122 - C21876 * C115 - C21875 * C123 + C21871 * C136 +
             C21877 * C308 - C21878 * C296 - C21877 * C309 + C21872 * C326 +
             C21879 * C310 - C21880 * C297 - C21879 * C311 + C21873 * C327) *
                C47633 * C47907 * C47943 -
            (C21879 * C1321 - C21880 * C1307 - C21879 * C1322 + C21873 * C1334 +
             C21877 * C948 - C21878 * C943 - C21877 * C949 + C21872 * C958 +
             C21875 * C503 - C21876 * C491 - C21875 * C504 + C21871 * C521) *
                C47633 * C47907 * C47791) *
               C47942 +
           ((C21875 * C948 - C21876 * C943 - C21875 * C949 + C21871 * C958 +
             C21877 * C1321 - C21878 * C1307 - C21877 * C1322 + C21872 * C1334 +
             C21879 * C1725 - C21880 * C1722 - C21879 * C1726 +
             C21873 * C1731) *
                C47633 * C47907 * C47791 -
            (C21879 * C1178 - C21880 * C1170 - C21879 * C1179 + C21873 * C1188 +
             C21877 * C310 - C21878 * C297 - C21877 * C311 + C21872 * C327 +
             C21875 * C308 - C21876 * C296 - C21875 * C309 + C21871 * C326) *
                C47633 * C47907 * C47943) *
               C47749) *
              C291 +
          (((C21875 * C501 - C21876 * C490 - C21875 * C502 + C21871 * C520 +
             C21877 * C950 - C21878 * C944 - C21877 * C951 + C21872 * C959 +
             C21879 * C1319 - C21880 * C1306 - C21879 * C1320 +
             C21873 * C1333) *
                C47633 * C47907 * C47791 -
            (C21879 * C312 - C21880 * C298 - C21879 * C313 + C21873 * C328 +
             C21877 * C306 - C21878 * C295 - C21877 * C307 + C21872 * C325 +
             C21875 * C124 - C21876 * C116 - C21875 * C125 + C21871 * C137) *
                C47633 * C47907 * C47943) *
               C47942 +
           ((C21875 * C306 - C21876 * C295 - C21875 * C307 + C21871 * C325 +
             C21877 * C312 - C21878 * C298 - C21877 * C313 + C21872 * C328 +
             C21879 * C1176 - C21880 * C1169 - C21879 * C1177 +
             C21873 * C1187) *
                C47633 * C47907 * C47943 -
            (C21879 * C1727 - C21880 * C1723 - C21879 * C1728 + C21873 * C1732 +
             C21877 * C1319 - C21878 * C1306 - C21877 * C1320 + C21872 * C1333 +
             C21875 * C950 - C21876 * C944 - C21875 * C951 + C21871 * C959) *
                C47633 * C47907 * C47791) *
               C47749) *
              C292 +
          (((C21875 * C126 - C21876 * C117 - C21875 * C127 + C21871 * C138 +
             C21877 * C304 - C21878 * C294 - C21877 * C305 + C21872 * C324 +
             C21879 * C314 - C21880 * C299 - C21879 * C315 + C21873 * C329) *
                C47633 * C47907 * C47943 -
            (C21879 * C1317 - C21880 * C1305 - C21879 * C1318 + C21873 * C1332 +
             C21877 * C952 - C21878 * C945 - C21877 * C953 + C21872 * C960 +
             C21875 * C499 - C21876 * C489 - C21875 * C500 + C21871 * C519) *
                C47633 * C47907 * C47791) *
               C47942 +
           ((C21875 * C952 - C21876 * C945 - C21875 * C953 + C21871 * C960 +
             C21877 * C1317 - C21878 * C1305 - C21877 * C1318 + C21872 * C1332 +
             C21879 * C1729 - C21880 * C1724 - C21879 * C1730 +
             C21873 * C1733) *
                C47633 * C47907 * C47791 -
            (C21879 * C1174 - C21880 * C1168 - C21879 * C1175 + C21873 * C1186 +
             C21877 * C314 - C21878 * C299 - C21877 * C315 + C21872 * C329 +
             C21875 * C304 - C21876 * C294 - C21875 * C305 + C21871 * C324) *
                C47633 * C47907 * C47943) *
               C47749) *
              C47968)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C21875 * C122 - C21876 * C115 - C21875 * C123 + C21871 * C136 +
            C21877 * C308 - C21878 * C296 - C21877 * C309 + C21872 * C326 +
            C21879 * C310 - C21880 * C297 - C21879 * C311 + C21873 * C327) *
               C47633 * C47907 * C47943 -
           (C21879 * C1321 - C21880 * C1307 - C21879 * C1322 + C21873 * C1334 +
            C21877 * C948 - C21878 * C943 - C21877 * C949 + C21872 * C958 +
            C21875 * C503 - C21876 * C491 - C21875 * C504 + C21871 * C521) *
               C47633 * C47907 * C47791) *
              C1436 +
          ((C21875 * C948 - C21876 * C943 - C21875 * C949 + C21871 * C958 +
            C21877 * C1321 - C21878 * C1307 - C21877 * C1322 + C21872 * C1334 +
            C21879 * C1725 - C21880 * C1722 - C21879 * C1726 + C21873 * C1731) *
               C47633 * C47907 * C47791 -
           (C21879 * C1178 - C21880 * C1170 - C21879 * C1179 + C21873 * C1188 +
            C21877 * C310 - C21878 * C297 - C21877 * C311 + C21872 * C327 +
            C21875 * C308 - C21876 * C296 - C21875 * C309 + C21871 * C326) *
               C47633 * C47907 * C47943) *
              C1437 +
          ((C21875 * C310 - C21876 * C297 - C21875 * C311 + C21871 * C327 +
            C21877 * C1178 - C21878 * C1170 - C21877 * C1179 + C21872 * C1188 +
            C21879 * C1180 - C21880 * C1171 - C21879 * C1181 + C21873 * C1189) *
               C47633 * C47907 * C47943 -
           (C21879 * C6635 - C21880 * C6633 - C21879 * C6636 + C21873 * C6639 +
            C21877 * C1725 - C21878 * C1722 - C21877 * C1726 + C21872 * C1731 +
            C21875 * C1321 - C21876 * C1307 - C21875 * C1322 + C21871 * C1334) *
               C47633 * C47907 * C47791) *
              C1438 +
          ((C21875 * C1725 - C21876 * C1722 - C21875 * C1726 + C21871 * C1731 +
            C21877 * C6635 - C21878 * C6633 - C21877 * C6636 + C21872 * C6639 +
            C21879 * C23076 - C21880 * C23075 - C21879 * C23077 +
            C21873 * C23078) *
               C47633 * C47907 * C47791 -
           (C21879 * C5991 - C21880 * C5989 - C21879 * C5992 + C21873 * C5995 +
            C21877 * C1180 - C21878 * C1171 - C21877 * C1181 + C21872 * C1189 +
            C21875 * C1178 - C21876 * C1170 - C21875 * C1179 + C21871 * C1188) *
               C47633 * C47907 * C47943) *
              C47984) *
         C47658) /
            (p * q * std::sqrt(p + q));
    d2ee[122] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C21875 * C122 - C21876 * C115 - C21875 * C123 + C21871 * C136 +
            C21877 * C308 - C21878 * C296 - C21877 * C309 + C21872 * C326 +
            C21879 * C310 - C21880 * C297 - C21879 * C311 + C21873 * C327) *
               C47633 * C47907 * C47704 * C48013 -
           (C21879 * C1178 - C21880 * C1170 - C21879 * C1179 + C21873 * C1188 +
            C21877 * C310 - C21878 * C297 - C21877 * C311 + C21872 * C327 +
            C21875 * C308 - C21876 * C296 - C21875 * C309 + C21871 * C326) *
               C47633 * C47907 * C47704 * C48001 +
           (C21875 * C310 - C21876 * C297 - C21875 * C311 + C21871 * C327 +
            C21877 * C1178 - C21878 * C1170 - C21877 * C1179 + C21872 * C1188 +
            C21879 * C1180 - C21880 * C1171 - C21879 * C1181 + C21873 * C1189) *
               C47633 * C47907 * C47704 * C47974) *
              C291 +
          ((C21875 * C306 - C21876 * C295 - C21875 * C307 + C21871 * C325 +
            C21877 * C312 - C21878 * C298 - C21877 * C313 + C21872 * C328 +
            C21879 * C1176 - C21880 * C1169 - C21879 * C1177 + C21873 * C1187) *
               C47633 * C47907 * C47704 * C48001 -
           (C21879 * C312 - C21880 * C298 - C21879 * C313 + C21873 * C328 +
            C21877 * C306 - C21878 * C295 - C21877 * C307 + C21872 * C325 +
            C21875 * C124 - C21876 * C116 - C21875 * C125 + C21871 * C137) *
               C47633 * C47907 * C47704 * C48013 -
           (C21879 * C1182 - C21880 * C1172 - C21879 * C1183 + C21873 * C1190 +
            C21877 * C1176 - C21878 * C1169 - C21877 * C1177 + C21872 * C1187 +
            C21875 * C312 - C21876 * C298 - C21875 * C313 + C21871 * C328) *
               C47633 * C47907 * C47704 * C47974) *
              C292 +
          ((C21875 * C126 - C21876 * C117 - C21875 * C127 + C21871 * C138 +
            C21877 * C304 - C21878 * C294 - C21877 * C305 + C21872 * C324 +
            C21879 * C314 - C21880 * C299 - C21879 * C315 + C21873 * C329) *
               C47633 * C47907 * C47704 * C48013 -
           (C21879 * C1174 - C21880 * C1168 - C21879 * C1175 + C21873 * C1186 +
            C21877 * C314 - C21878 * C299 - C21877 * C315 + C21872 * C329 +
            C21875 * C304 - C21876 * C294 - C21875 * C305 + C21871 * C324) *
               C47633 * C47907 * C47704 * C48001 +
           (C21875 * C314 - C21876 * C299 - C21875 * C315 + C21871 * C329 +
            C21877 * C1174 - C21878 * C1168 - C21877 * C1175 + C21872 * C1186 +
            C21879 * C1184 - C21880 * C1173 - C21879 * C1185 + C21873 * C1191) *
               C47633 * C47907 * C47704 * C47974) *
              C47968)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((C21875 * C122 - C21876 * C115 - C21875 * C123 + C21871 * C136 +
           C21877 * C308 - C21878 * C296 - C21877 * C309 + C21872 * C326 +
           C21879 * C310 - C21880 * C297 - C21879 * C311 + C21873 * C327) *
              C47633 * C47907 * C47704 * C47686 * C108 -
          (C21879 * C312 - C21880 * C298 - C21879 * C313 + C21873 * C328 +
           C21877 * C306 - C21878 * C295 - C21877 * C307 + C21872 * C325 +
           C21875 * C124 - C21876 * C116 - C21875 * C125 + C21871 * C137) *
              C47633 * C47907 * C47704 * C47686 * C109 +
          (C21875 * C126 - C21876 * C117 - C21875 * C127 + C21871 * C138 +
           C21877 * C304 - C21878 * C294 - C21877 * C305 + C21872 * C324 +
           C21879 * C314 - C21880 * C299 - C21879 * C315 + C21873 * C329) *
              C47633 * C47907 * C47704 * C47686 * C110 -
          (C21879 * C318 - C21880 * C301 - C21879 * C319 + C21873 * C331 +
           C21877 * C316 - C21878 * C300 - C21877 * C317 + C21872 * C330 +
           C21875 * C128 - C21876 * C118 - C21875 * C129 + C21871 * C139) *
              C47633 * C47907 * C47704 * C47686 * C111 +
          (C21875 * C130 - C21876 * C119 - C21875 * C131 + C21871 * C140 +
           C21877 * C320 - C21878 * C302 - C21877 * C321 + C21872 * C332 +
           C21879 * C322 - C21880 * C303 - C21879 * C323 + C21873 * C333) *
              C47633 * C47907 * C47704 * C47686 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C21875 * C122 - C21876 * C115 - C21875 * C123 + C21871 * C136 +
            C21877 * C308 - C21878 * C296 - C21877 * C309 + C21872 * C326 +
            C21879 * C310 - C21880 * C297 - C21879 * C311 + C21873 * C327) *
               C47633 * C47907 * C48014 -
           (C21879 * C1321 - C21880 * C1307 - C21879 * C1322 + C21873 * C1334 +
            C21877 * C948 - C21878 * C943 - C21877 * C949 + C21872 * C958 +
            C21875 * C503 - C21876 * C491 - C21875 * C504 + C21871 * C521) *
               C47633 * C47907 * C48003 +
           (C21875 * C505 - C21876 * C492 - C21875 * C506 + C21871 * C522 +
            C21877 * C1315 - C21878 * C1304 - C21877 * C1316 + C21872 * C1331 +
            C21879 * C1323 - C21880 * C1308 - C21879 * C1324 + C21873 * C1335) *
               C47633 * C47907 * C47977) *
              C47686 * C291 +
          ((C21875 * C501 - C21876 * C490 - C21875 * C502 + C21871 * C520 +
            C21877 * C950 - C21878 * C944 - C21877 * C951 + C21872 * C959 +
            C21879 * C1319 - C21880 * C1306 - C21879 * C1320 + C21873 * C1333) *
               C47633 * C47907 * C48003 -
           (C21879 * C312 - C21880 * C298 - C21879 * C313 + C21873 * C328 +
            C21877 * C306 - C21878 * C295 - C21877 * C307 + C21872 * C325 +
            C21875 * C124 - C21876 * C116 - C21875 * C125 + C21871 * C137) *
               C47633 * C47907 * C48014 -
           (C21879 * C1325 - C21880 * C1309 - C21879 * C1326 + C21873 * C1336 +
            C21877 * C1313 - C21878 * C1303 - C21877 * C1314 + C21872 * C1330 +
            C21875 * C507 - C21876 * C493 - C21875 * C508 + C21871 * C523) *
               C47633 * C47907 * C47977) *
              C47686 * C292 +
          ((C21875 * C126 - C21876 * C117 - C21875 * C127 + C21871 * C138 +
            C21877 * C304 - C21878 * C294 - C21877 * C305 + C21872 * C324 +
            C21879 * C314 - C21880 * C299 - C21879 * C315 + C21873 * C329) *
               C47633 * C47907 * C48014 -
           (C21879 * C1317 - C21880 * C1305 - C21879 * C1318 + C21873 * C1332 +
            C21877 * C952 - C21878 * C945 - C21877 * C953 + C21872 * C960 +
            C21875 * C499 - C21876 * C489 - C21875 * C500 + C21871 * C519) *
               C47633 * C47907 * C48003 +
           (C21875 * C509 - C21876 * C494 - C21875 * C510 + C21871 * C524 +
            C21877 * C1311 - C21878 * C1302 - C21877 * C1312 + C21872 * C1329 +
            C21879 * C1327 - C21880 * C1310 - C21879 * C1328 + C21873 * C1337) *
               C47633 * C47907 * C47977) *
              C47686 * C47968)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C21875 * C122 - C21876 * C115 - C21875 * C123 + C21871 * C136 +
            C21877 * C308 - C21878 * C296 - C21877 * C309 + C21872 * C326 +
            C21879 * C310 - C21880 * C297 - C21879 * C311 + C21873 * C327) *
               C47633 * C47907 * C47704 * C1094 -
           (C21879 * C1178 - C21880 * C1170 - C21879 * C1179 + C21873 * C1188 +
            C21877 * C310 - C21878 * C297 - C21877 * C311 + C21872 * C327 +
            C21875 * C308 - C21876 * C296 - C21875 * C309 + C21871 * C326) *
               C47633 * C47907 * C47704 * C1095 +
           (C21875 * C310 - C21876 * C297 - C21875 * C311 + C21871 * C327 +
            C21877 * C1178 - C21878 * C1170 - C21877 * C1179 + C21872 * C1188 +
            C21879 * C1180 - C21880 * C1171 - C21879 * C1181 + C21873 * C1189) *
               C47633 * C47907 * C47704 * C47974) *
              C48010 +
          ((C21875 * C306 - C21876 * C295 - C21875 * C307 + C21871 * C325 +
            C21877 * C312 - C21878 * C298 - C21877 * C313 + C21872 * C328 +
            C21879 * C1176 - C21880 * C1169 - C21879 * C1177 + C21873 * C1187) *
               C47633 * C47907 * C47704 * C1095 -
           (C21879 * C312 - C21880 * C298 - C21879 * C313 + C21873 * C328 +
            C21877 * C306 - C21878 * C295 - C21877 * C307 + C21872 * C325 +
            C21875 * C124 - C21876 * C116 - C21875 * C125 + C21871 * C137) *
               C47633 * C47907 * C47704 * C1094 -
           (C21879 * C1182 - C21880 * C1172 - C21879 * C1183 + C21873 * C1190 +
            C21877 * C1176 - C21878 * C1169 - C21877 * C1177 + C21872 * C1187 +
            C21875 * C312 - C21876 * C298 - C21875 * C313 + C21871 * C328) *
               C47633 * C47907 * C47704 * C47974) *
              C47997 +
          ((C21875 * C126 - C21876 * C117 - C21875 * C127 + C21871 * C138 +
            C21877 * C304 - C21878 * C294 - C21877 * C305 + C21872 * C324 +
            C21879 * C314 - C21880 * C299 - C21879 * C315 + C21873 * C329) *
               C47633 * C47907 * C47704 * C1094 -
           (C21879 * C1174 - C21880 * C1168 - C21879 * C1175 + C21873 * C1186 +
            C21877 * C314 - C21878 * C299 - C21877 * C315 + C21872 * C329 +
            C21875 * C304 - C21876 * C294 - C21875 * C305 + C21871 * C324) *
               C47633 * C47907 * C47704 * C1095 +
           (C21875 * C314 - C21876 * C299 - C21875 * C315 + C21871 * C329 +
            C21877 * C1174 - C21878 * C1168 - C21877 * C1175 + C21872 * C1186 +
            C21879 * C1184 - C21880 * C1173 - C21879 * C1185 + C21873 * C1191) *
               C47633 * C47907 * C47704 * C47974) *
              C47968)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((C21875 * C122 - C21876 * C115 - C21875 * C123 + C21871 * C136 +
           C21877 * C308 - C21878 * C296 - C21877 * C309 + C21872 * C326 +
           C21879 * C310 - C21880 * C297 - C21879 * C311 + C21873 * C327) *
              C47633 * C47907 * C47704 * C1162 -
          (C21879 * C1178 - C21880 * C1170 - C21879 * C1179 + C21873 * C1188 +
           C21877 * C310 - C21878 * C297 - C21877 * C311 + C21872 * C327 +
           C21875 * C308 - C21876 * C296 - C21875 * C309 + C21871 * C326) *
              C47633 * C47907 * C47704 * C1163 +
          (C21875 * C310 - C21876 * C297 - C21875 * C311 + C21871 * C327 +
           C21877 * C1178 - C21878 * C1170 - C21877 * C1179 + C21872 * C1188 +
           C21879 * C1180 - C21880 * C1171 - C21879 * C1181 + C21873 * C1189) *
              C47633 * C47907 * C47704 * C1164 -
          (C21879 * C5991 - C21880 * C5989 - C21879 * C5992 + C21873 * C5995 +
           C21877 * C1180 - C21878 * C1171 - C21877 * C1181 + C21872 * C1189 +
           C21875 * C1178 - C21876 * C1170 - C21875 * C1179 + C21871 * C1188) *
              C47633 * C47907 * C47704 * C1165 +
          (C21875 * C1180 - C21876 * C1171 - C21875 * C1181 + C21871 * C1189 +
           C21877 * C5991 - C21878 * C5989 - C21877 * C5992 + C21872 * C5995 +
           C21879 * C22616 - C21880 * C22615 - C21879 * C22617 +
           C21873 * C22618) *
              C47633 * C47907 * C47704 * C1166) *
         C47658) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C21875 * C122 - C21876 * C115 - C21875 * C123 + C21871 * C136 +
            C21877 * C308 - C21878 * C296 - C21877 * C309 + C21872 * C326 +
            C21879 * C310 - C21880 * C297 - C21879 * C311 + C21873 * C327) *
               C47633 * C47907 * C48014 -
           (C21879 * C1321 - C21880 * C1307 - C21879 * C1322 + C21873 * C1334 +
            C21877 * C948 - C21878 * C943 - C21877 * C949 + C21872 * C958 +
            C21875 * C503 - C21876 * C491 - C21875 * C504 + C21871 * C521) *
               C47633 * C47907 * C48003 +
           (C21875 * C505 - C21876 * C492 - C21875 * C506 + C21871 * C522 +
            C21877 * C1315 - C21878 * C1304 - C21877 * C1316 + C21872 * C1331 +
            C21879 * C1323 - C21880 * C1308 - C21879 * C1324 + C21873 * C1335) *
               C47633 * C47907 * C47977) *
              C1094 +
          ((C21875 * C948 - C21876 * C943 - C21875 * C949 + C21871 * C958 +
            C21877 * C1321 - C21878 * C1307 - C21877 * C1322 + C21872 * C1334 +
            C21879 * C1725 - C21880 * C1722 - C21879 * C1726 + C21873 * C1731) *
               C47633 * C47907 * C48003 -
           (C21879 * C1178 - C21880 * C1170 - C21879 * C1179 + C21873 * C1188 +
            C21877 * C310 - C21878 * C297 - C21877 * C311 + C21872 * C327 +
            C21875 * C308 - C21876 * C296 - C21875 * C309 + C21871 * C326) *
               C47633 * C47907 * C48014 -
           (C21879 * C6145 - C21880 * C6143 - C21879 * C6146 + C21873 * C6149 +
            C21877 * C1323 - C21878 * C1308 - C21877 * C1324 + C21872 * C1335 +
            C21875 * C1315 - C21876 * C1304 - C21875 * C1316 + C21871 * C1331) *
               C47633 * C47907 * C47977) *
              C1095 +
          ((C21875 * C310 - C21876 * C297 - C21875 * C311 + C21871 * C327 +
            C21877 * C1178 - C21878 * C1170 - C21877 * C1179 + C21872 * C1188 +
            C21879 * C1180 - C21880 * C1171 - C21879 * C1181 + C21873 * C1189) *
               C47633 * C47907 * C48014 -
           (C21879 * C6635 - C21880 * C6633 - C21879 * C6636 + C21873 * C6639 +
            C21877 * C1725 - C21878 * C1722 - C21877 * C1726 + C21872 * C1731 +
            C21875 * C1321 - C21876 * C1307 - C21875 * C1322 + C21871 * C1334) *
               C47633 * C47907 * C48003 +
           (C21875 * C1323 - C21876 * C1308 - C21875 * C1324 + C21871 * C1335 +
            C21877 * C6145 - C21878 * C6143 - C21877 * C6146 + C21872 * C6149 +
            C21879 * C22730 - C21880 * C22729 - C21879 * C22731 +
            C21873 * C22732) *
               C47633 * C47907 * C47977) *
              C47974) *
         C47658) /
            (p * q * std::sqrt(p + q));
    d2ee[123] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C21875 * C122 - C21876 * C115 - C21875 * C123 + C21871 * C136 +
            C21877 * C308 - C21878 * C296 - C21877 * C309 + C21872 * C326 +
            C21879 * C310 - C21880 * C297 - C21879 * C311 + C21873 * C327) *
               C47633 * C47907 * C47943 -
           (C21879 * C1321 - C21880 * C1307 - C21879 * C1322 + C21873 * C1334 +
            C21877 * C948 - C21878 * C943 - C21877 * C949 + C21872 * C958 +
            C21875 * C503 - C21876 * C491 - C21875 * C504 + C21871 * C521) *
               C47633 * C47907 * C47791) *
              C47686 * C671 +
          ((C21875 * C501 - C21876 * C490 - C21875 * C502 + C21871 * C520 +
            C21877 * C950 - C21878 * C944 - C21877 * C951 + C21872 * C959 +
            C21879 * C1319 - C21880 * C1306 - C21879 * C1320 + C21873 * C1333) *
               C47633 * C47907 * C47791 -
           (C21879 * C312 - C21880 * C298 - C21879 * C313 + C21873 * C328 +
            C21877 * C306 - C21878 * C295 - C21877 * C307 + C21872 * C325 +
            C21875 * C124 - C21876 * C116 - C21875 * C125 + C21871 * C137) *
               C47633 * C47907 * C47943) *
              C47686 * C672 +
          ((C21875 * C126 - C21876 * C117 - C21875 * C127 + C21871 * C138 +
            C21877 * C304 - C21878 * C294 - C21877 * C305 + C21872 * C324 +
            C21879 * C314 - C21880 * C299 - C21879 * C315 + C21873 * C329) *
               C47633 * C47907 * C47943 -
           (C21879 * C1317 - C21880 * C1305 - C21879 * C1318 + C21873 * C1332 +
            C21877 * C952 - C21878 * C945 - C21877 * C953 + C21872 * C960 +
            C21875 * C499 - C21876 * C489 - C21875 * C500 + C21871 * C519) *
               C47633 * C47907 * C47791) *
              C47686 * C673 +
          ((C21875 * C511 - C21876 * C495 - C21875 * C512 + C21871 * C525 +
            C21877 * C954 - C21878 * C946 - C21877 * C955 + C21872 * C961 +
            C21879 * C1607 - C21880 * C1606 - C21879 * C1608 + C21873 * C1609) *
               C47633 * C47907 * C47791 -
           (C21879 * C318 - C21880 * C301 - C21879 * C319 + C21873 * C331 +
            C21877 * C316 - C21878 * C300 - C21877 * C317 + C21872 * C330 +
            C21875 * C128 - C21876 * C118 - C21875 * C129 + C21871 * C139) *
               C47633 * C47907 * C47943) *
              C47686 * C47978)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C21875 * C122 - C21876 * C115 - C21875 * C123 + C21871 * C136 +
             C21877 * C308 - C21878 * C296 - C21877 * C309 + C21872 * C326 +
             C21879 * C310 - C21880 * C297 - C21879 * C311 + C21873 * C327) *
                C47633 * C47907 * C47943 -
            (C21879 * C1321 - C21880 * C1307 - C21879 * C1322 + C21873 * C1334 +
             C21877 * C948 - C21878 * C943 - C21877 * C949 + C21872 * C958 +
             C21875 * C503 - C21876 * C491 - C21875 * C504 + C21871 * C521) *
                C47633 * C47907 * C47791) *
               C1094 +
           ((C21875 * C948 - C21876 * C943 - C21875 * C949 + C21871 * C958 +
             C21877 * C1321 - C21878 * C1307 - C21877 * C1322 + C21872 * C1334 +
             C21879 * C1725 - C21880 * C1722 - C21879 * C1726 +
             C21873 * C1731) *
                C47633 * C47907 * C47791 -
            (C21879 * C1178 - C21880 * C1170 - C21879 * C1179 + C21873 * C1188 +
             C21877 * C310 - C21878 * C297 - C21877 * C311 + C21872 * C327 +
             C21875 * C308 - C21876 * C296 - C21875 * C309 + C21871 * C326) *
                C47633 * C47907 * C47943) *
               C1095 +
           ((C21875 * C310 - C21876 * C297 - C21875 * C311 + C21871 * C327 +
             C21877 * C1178 - C21878 * C1170 - C21877 * C1179 + C21872 * C1188 +
             C21879 * C1180 - C21880 * C1171 - C21879 * C1181 +
             C21873 * C1189) *
                C47633 * C47907 * C47943 -
            (C21879 * C6635 - C21880 * C6633 - C21879 * C6636 + C21873 * C6639 +
             C21877 * C1725 - C21878 * C1722 - C21877 * C1726 + C21872 * C1731 +
             C21875 * C1321 - C21876 * C1307 - C21875 * C1322 +
             C21871 * C1334) *
                C47633 * C47907 * C47791) *
               C47974) *
              C47928 +
          (((C21875 * C501 - C21876 * C490 - C21875 * C502 + C21871 * C520 +
             C21877 * C950 - C21878 * C944 - C21877 * C951 + C21872 * C959 +
             C21879 * C1319 - C21880 * C1306 - C21879 * C1320 +
             C21873 * C1333) *
                C47633 * C47907 * C47791 -
            (C21879 * C312 - C21880 * C298 - C21879 * C313 + C21873 * C328 +
             C21877 * C306 - C21878 * C295 - C21877 * C307 + C21872 * C325 +
             C21875 * C124 - C21876 * C116 - C21875 * C125 + C21871 * C137) *
                C47633 * C47907 * C47943) *
               C1094 +
           ((C21875 * C306 - C21876 * C295 - C21875 * C307 + C21871 * C325 +
             C21877 * C312 - C21878 * C298 - C21877 * C313 + C21872 * C328 +
             C21879 * C1176 - C21880 * C1169 - C21879 * C1177 +
             C21873 * C1187) *
                C47633 * C47907 * C47943 -
            (C21879 * C1727 - C21880 * C1723 - C21879 * C1728 + C21873 * C1732 +
             C21877 * C1319 - C21878 * C1306 - C21877 * C1320 + C21872 * C1333 +
             C21875 * C950 - C21876 * C944 - C21875 * C951 + C21871 * C959) *
                C47633 * C47907 * C47791) *
               C1095 +
           ((C21875 * C1319 - C21876 * C1306 - C21875 * C1320 + C21871 * C1333 +
             C21877 * C1727 - C21878 * C1723 - C21877 * C1728 + C21872 * C1732 +
             C21879 * C6637 - C21880 * C6634 - C21879 * C6638 +
             C21873 * C6640) *
                C47633 * C47907 * C47791 -
            (C21879 * C1182 - C21880 * C1172 - C21879 * C1183 + C21873 * C1190 +
             C21877 * C1176 - C21878 * C1169 - C21877 * C1177 + C21872 * C1187 +
             C21875 * C312 - C21876 * C298 - C21875 * C313 + C21871 * C328) *
                C47633 * C47907 * C47943) *
               C47974) *
              C47669)) /
            (p * q * std::sqrt(p + q));
    d2ee[124] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((C21875 * C122 - C21876 * C115 - C21875 * C123 + C21871 * C136 +
           C21877 * C308 - C21878 * C296 - C21877 * C309 + C21872 * C326 +
           C21879 * C310 - C21880 * C297 - C21879 * C311 + C21873 * C327) *
              C47633 * C47907 * C47704 * C47686 * C108 -
          (C21879 * C312 - C21880 * C298 - C21879 * C313 + C21873 * C328 +
           C21877 * C306 - C21878 * C295 - C21877 * C307 + C21872 * C325 +
           C21875 * C124 - C21876 * C116 - C21875 * C125 + C21871 * C137) *
              C47633 * C47907 * C47704 * C47686 * C109 +
          (C21875 * C126 - C21876 * C117 - C21875 * C127 + C21871 * C138 +
           C21877 * C304 - C21878 * C294 - C21877 * C305 + C21872 * C324 +
           C21879 * C314 - C21880 * C299 - C21879 * C315 + C21873 * C329) *
              C47633 * C47907 * C47704 * C47686 * C110 -
          (C21879 * C318 - C21880 * C301 - C21879 * C319 + C21873 * C331 +
           C21877 * C316 - C21878 * C300 - C21877 * C317 + C21872 * C330 +
           C21875 * C128 - C21876 * C118 - C21875 * C129 + C21871 * C139) *
              C47633 * C47907 * C47704 * C47686 * C111 +
          (C21875 * C130 - C21876 * C119 - C21875 * C131 + C21871 * C140 +
           C21877 * C320 - C21878 * C302 - C21877 * C321 + C21872 * C332 +
           C21879 * C322 - C21880 * C303 - C21879 * C323 + C21873 * C333) *
              C47633 * C47907 * C47704 * C47686 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C21875 * C122 - C21876 * C115 - C21875 * C123 + C21871 * C136 +
            C21877 * C308 - C21878 * C296 - C21877 * C309 + C21872 * C326 +
            C21879 * C310 - C21880 * C297 - C21879 * C311 + C21873 * C327) *
               C47633 * C47907 * C47704 * C48013 -
           (C21879 * C1178 - C21880 * C1170 - C21879 * C1179 + C21873 * C1188 +
            C21877 * C310 - C21878 * C297 - C21877 * C311 + C21872 * C327 +
            C21875 * C308 - C21876 * C296 - C21875 * C309 + C21871 * C326) *
               C47633 * C47907 * C47704 * C48001 +
           (C21875 * C310 - C21876 * C297 - C21875 * C311 + C21871 * C327 +
            C21877 * C1178 - C21878 * C1170 - C21877 * C1179 + C21872 * C1188 +
            C21879 * C1180 - C21880 * C1171 - C21879 * C1181 + C21873 * C1189) *
               C47633 * C47907 * C47704 * C47974) *
              C291 +
          ((C21875 * C306 - C21876 * C295 - C21875 * C307 + C21871 * C325 +
            C21877 * C312 - C21878 * C298 - C21877 * C313 + C21872 * C328 +
            C21879 * C1176 - C21880 * C1169 - C21879 * C1177 + C21873 * C1187) *
               C47633 * C47907 * C47704 * C48001 -
           (C21879 * C312 - C21880 * C298 - C21879 * C313 + C21873 * C328 +
            C21877 * C306 - C21878 * C295 - C21877 * C307 + C21872 * C325 +
            C21875 * C124 - C21876 * C116 - C21875 * C125 + C21871 * C137) *
               C47633 * C47907 * C47704 * C48013 -
           (C21879 * C1182 - C21880 * C1172 - C21879 * C1183 + C21873 * C1190 +
            C21877 * C1176 - C21878 * C1169 - C21877 * C1177 + C21872 * C1187 +
            C21875 * C312 - C21876 * C298 - C21875 * C313 + C21871 * C328) *
               C47633 * C47907 * C47704 * C47974) *
              C292 +
          ((C21875 * C126 - C21876 * C117 - C21875 * C127 + C21871 * C138 +
            C21877 * C304 - C21878 * C294 - C21877 * C305 + C21872 * C324 +
            C21879 * C314 - C21880 * C299 - C21879 * C315 + C21873 * C329) *
               C47633 * C47907 * C47704 * C48013 -
           (C21879 * C1174 - C21880 * C1168 - C21879 * C1175 + C21873 * C1186 +
            C21877 * C314 - C21878 * C299 - C21877 * C315 + C21872 * C329 +
            C21875 * C304 - C21876 * C294 - C21875 * C305 + C21871 * C324) *
               C47633 * C47907 * C47704 * C48001 +
           (C21875 * C314 - C21876 * C299 - C21875 * C315 + C21871 * C329 +
            C21877 * C1174 - C21878 * C1168 - C21877 * C1175 + C21872 * C1186 +
            C21879 * C1184 - C21880 * C1173 - C21879 * C1185 + C21873 * C1191) *
               C47633 * C47907 * C47704 * C47974) *
              C47968)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C21875 * C122 - C21876 * C115 - C21875 * C123 + C21871 * C136 +
            C21877 * C308 - C21878 * C296 - C21877 * C309 + C21872 * C326 +
            C21879 * C310 - C21880 * C297 - C21879 * C311 + C21873 * C327) *
               C47633 * C47907 * C47704 * C1094 -
           (C21879 * C1178 - C21880 * C1170 - C21879 * C1179 + C21873 * C1188 +
            C21877 * C310 - C21878 * C297 - C21877 * C311 + C21872 * C327 +
            C21875 * C308 - C21876 * C296 - C21875 * C309 + C21871 * C326) *
               C47633 * C47907 * C47704 * C1095 +
           (C21875 * C310 - C21876 * C297 - C21875 * C311 + C21871 * C327 +
            C21877 * C1178 - C21878 * C1170 - C21877 * C1179 + C21872 * C1188 +
            C21879 * C1180 - C21880 * C1171 - C21879 * C1181 + C21873 * C1189) *
               C47633 * C47907 * C47704 * C47974) *
              C48010 +
          ((C21875 * C306 - C21876 * C295 - C21875 * C307 + C21871 * C325 +
            C21877 * C312 - C21878 * C298 - C21877 * C313 + C21872 * C328 +
            C21879 * C1176 - C21880 * C1169 - C21879 * C1177 + C21873 * C1187) *
               C47633 * C47907 * C47704 * C1095 -
           (C21879 * C312 - C21880 * C298 - C21879 * C313 + C21873 * C328 +
            C21877 * C306 - C21878 * C295 - C21877 * C307 + C21872 * C325 +
            C21875 * C124 - C21876 * C116 - C21875 * C125 + C21871 * C137) *
               C47633 * C47907 * C47704 * C1094 -
           (C21879 * C1182 - C21880 * C1172 - C21879 * C1183 + C21873 * C1190 +
            C21877 * C1176 - C21878 * C1169 - C21877 * C1177 + C21872 * C1187 +
            C21875 * C312 - C21876 * C298 - C21875 * C313 + C21871 * C328) *
               C47633 * C47907 * C47704 * C47974) *
              C47997 +
          ((C21875 * C126 - C21876 * C117 - C21875 * C127 + C21871 * C138 +
            C21877 * C304 - C21878 * C294 - C21877 * C305 + C21872 * C324 +
            C21879 * C314 - C21880 * C299 - C21879 * C315 + C21873 * C329) *
               C47633 * C47907 * C47704 * C1094 -
           (C21879 * C1174 - C21880 * C1168 - C21879 * C1175 + C21873 * C1186 +
            C21877 * C314 - C21878 * C299 - C21877 * C315 + C21872 * C329 +
            C21875 * C304 - C21876 * C294 - C21875 * C305 + C21871 * C324) *
               C47633 * C47907 * C47704 * C1095 +
           (C21875 * C314 - C21876 * C299 - C21875 * C315 + C21871 * C329 +
            C21877 * C1174 - C21878 * C1168 - C21877 * C1175 + C21872 * C1186 +
            C21879 * C1184 - C21880 * C1173 - C21879 * C1185 + C21873 * C1191) *
               C47633 * C47907 * C47704 * C47974) *
              C47968)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((C21875 * C122 - C21876 * C115 - C21875 * C123 + C21871 * C136 +
           C21877 * C308 - C21878 * C296 - C21877 * C309 + C21872 * C326 +
           C21879 * C310 - C21880 * C297 - C21879 * C311 + C21873 * C327) *
              C47633 * C47907 * C47704 * C1162 -
          (C21879 * C1178 - C21880 * C1170 - C21879 * C1179 + C21873 * C1188 +
           C21877 * C310 - C21878 * C297 - C21877 * C311 + C21872 * C327 +
           C21875 * C308 - C21876 * C296 - C21875 * C309 + C21871 * C326) *
              C47633 * C47907 * C47704 * C1163 +
          (C21875 * C310 - C21876 * C297 - C21875 * C311 + C21871 * C327 +
           C21877 * C1178 - C21878 * C1170 - C21877 * C1179 + C21872 * C1188 +
           C21879 * C1180 - C21880 * C1171 - C21879 * C1181 + C21873 * C1189) *
              C47633 * C47907 * C47704 * C1164 -
          (C21879 * C5991 - C21880 * C5989 - C21879 * C5992 + C21873 * C5995 +
           C21877 * C1180 - C21878 * C1171 - C21877 * C1181 + C21872 * C1189 +
           C21875 * C1178 - C21876 * C1170 - C21875 * C1179 + C21871 * C1188) *
              C47633 * C47907 * C47704 * C1165 +
          (C21875 * C1180 - C21876 * C1171 - C21875 * C1181 + C21871 * C1189 +
           C21877 * C5991 - C21878 * C5989 - C21877 * C5992 + C21872 * C5995 +
           C21879 * C22616 - C21880 * C22615 - C21879 * C22617 +
           C21873 * C22618) *
              C47633 * C47907 * C47704 * C1166) *
         C47658) /
            (p * q * std::sqrt(p + q));
    d2ee[125] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C16159 * C122 - C16160 * C115 - C16159 * C123 + C16155 * C136 +
             C16161 * C308 - C16162 * C296 - C16161 * C309 + C47992 * C326) *
                C47633 * C10559 +
            (C26342 + C26343) * C47633 * C47994) *
               C47704 * C47745 -
           ((C26813 + C26812) * C47633 * C47994 +
            (C16161 * C310 - C16162 * C297 - C16161 * C311 + C47992 * C327 +
             C16159 * C308 - C16160 * C296 - C16159 * C309 + C16155 * C326) *
                C47633 * C10559) *
               C47704 * C47752 +
           ((C16159 * C310 - C16160 * C297 - C16159 * C311 + C16155 * C327 +
             C16161 * C1178 - C16162 * C1170 - C16161 * C1179 +
             C47992 * C1188) *
                C47633 * C10559 +
            (C27226 + C27227) * C47633 * C47994) *
               C47704 * C2908) *
              C47663 +
          (((C16415 + C16414) * C47633 * C10559 +
            (C17130 + C17131) * C47633 * C47994) *
               C47704 * C47752 -
           ((C16616 + C16617) * C47633 * C47994 +
            (C16213 + C16212) * C47633 * C10559) *
               C47704 * C47745 -
           ((C17858 + C17859) * C47633 * C47994 +
            (C16417 + C16416) * C47633 * C10559) *
               C47704 * C2908) *
              C47672 +
          (((C16215 + C16214) * C47633 * C10559 +
            (C16620 + C16621) * C47633 * C47994) *
               C47704 * C47745 -
           ((C17132 + C17133) * C47633 * C47994 +
            (C16419 + C16418) * C47633 * C10559) *
               C47704 * C47752 +
           ((C16421 + C16420) * C47633 * C10559 +
            (C16159 * C1317 - C16160 * C1305 - C16159 * C1318 + C16155 * C1332 +
             C16161 * C1729 - C16162 * C1724 - C16161 * C1730 +
             C47992 * C1733) *
                C47633 * C47994) *
               C47704 * C2908) *
              C2911)) /
        (p * q * std::sqrt(p + q));
    d2ee[126] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C16159 * C122 - C16160 * C115 - C16159 * C123 + C16155 * C136 +
              C16161 * C308 - C16162 * C296 - C16161 * C309 + C47992 * C326) *
                 C47633 * C10559 +
             (C26342 + C26343) * C47633 * C47994) *
                C47943 -
            ((C26344 + C26345) * C47633 * C47994 +
             (C26343 + C26342) * C47633 * C10559) *
                C47791) *
               C47745 +
           (((C26812 + C26813) * C47633 * C10559 +
             (C27224 + C27225) * C47633 * C47994) *
                C47791 -
            ((C26813 + C26812) * C47633 * C47994 +
             (C16161 * C310 - C16162 * C297 - C16161 * C311 + C47992 * C327 +
              C16159 * C308 - C16160 * C296 - C16159 * C309 + C16155 * C326) *
                 C47633 * C10559) *
                C47943) *
               C47752 +
           (((C16159 * C310 - C16160 * C297 - C16159 * C311 + C16155 * C327 +
              C16161 * C1178 - C16162 * C1170 - C16161 * C1179 +
              C47992 * C1188) *
                 C47633 * C10559 +
             (C27226 + C27227) * C47633 * C47994) *
                C47943 -
            ((C27228 + C27229) * C47633 * C47994 +
             (C27227 + C27226) * C47633 * C10559) *
                C47791) *
               C2908) *
              C2648 +
          ((((C16617 + C16616) * C47633 * C10559 +
             (C16618 + C16619) * C47633 * C47994) *
                C47791 -
            ((C16616 + C16617) * C47633 * C47994 +
             (C16213 + C16212) * C47633 * C10559) *
                C47943) *
               C47745 +
           (((C16415 + C16414) * C47633 * C10559 +
             (C17130 + C17131) * C47633 * C47994) *
                C47943 -
            ((C18570 + C18571) * C47633 * C47994 +
             (C17131 + C17130) * C47633 * C10559) *
                C47791) *
               C47752 +
           (((C17859 + C17858) * C47633 * C10559 +
             (C16159 * C1325 - C16160 * C1309 - C16159 * C1326 +
              C16155 * C1336 + C16161 * C6147 - C16162 * C6144 -
              C16161 * C6148 + C47992 * C6150) *
                 C47633 * C47994) *
                C47791 -
            ((C17858 + C17859) * C47633 * C47994 +
             (C16417 + C16416) * C47633 * C10559) *
                C47943) *
               C2908) *
              C47669)) /
        (p * q * std::sqrt(p + q));
    d2ee[127] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C16159 * C122 - C16160 * C115 - C16159 * C123 + C16155 * C136 +
             C16161 * C308 - C16162 * C296 - C16161 * C309 + C47992 * C326) *
                C47633 * C10559 +
            (C26342 + C26343) * C47633 * C47994) *
               C47704 * C48020 -
           ((C26813 + C26812) * C47633 * C47994 +
            (C16161 * C310 - C16162 * C297 - C16161 * C311 + C47992 * C327 +
             C16159 * C308 - C16160 * C296 - C16159 * C309 + C16155 * C326) *
                C47633 * C10559) *
               C47704 * C48016 +
           ((C16159 * C310 - C16160 * C297 - C16159 * C311 + C16155 * C327 +
             C16161 * C1178 - C16162 * C1170 - C16161 * C1179 +
             C47992 * C1188) *
                C47633 * C10559 +
            (C27226 + C27227) * C47633 * C47994) *
               C47704 * C48006 -
           ((C27697 + C27696) * C47633 * C47994 +
            (C16161 * C1180 - C16162 * C1171 - C16161 * C1181 + C47992 * C1189 +
             C16159 * C1178 - C16160 * C1170 - C16159 * C1179 +
             C16155 * C1188) *
                C47633 * C10559) *
               C47704 * C47984) *
              C2648 +
          (((C16415 + C16414) * C47633 * C10559 +
            (C17130 + C17131) * C47633 * C47994) *
               C47704 * C48016 -
           ((C16616 + C16617) * C47633 * C47994 +
            (C16213 + C16212) * C47633 * C10559) *
               C47704 * C48020 -
           ((C17858 + C17859) * C47633 * C47994 +
            (C16417 + C16416) * C47633 * C10559) *
               C47704 * C48006 +
           ((C17651 + C17650) * C47633 * C10559 +
            (C16159 * C1727 - C16160 * C1723 - C16159 * C1728 + C16155 * C1732 +
             C16161 * C6637 - C16162 * C6634 - C16161 * C6638 +
             C47992 * C6640) *
                C47633 * C47994) *
               C47704 * C47984) *
              C47669)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C16159 * C122 - C16160 * C115 - C16159 * C123 + C16155 * C136 +
             C16161 * C308 - C16162 * C296 - C16161 * C309 + C47992 * C326) *
                C47633 * C10559 +
            (C26342 + C26343) * C47633 * C47994) *
               C47704 * C2540 -
           ((C26813 + C26812) * C47633 * C47994 +
            (C16161 * C310 - C16162 * C297 - C16161 * C311 + C47992 * C327 +
             C16159 * C308 - C16160 * C296 - C16159 * C309 + C16155 * C326) *
                C47633 * C10559) *
               C47704 * C47749) *
              C48019 +
          (((C16415 + C16414) * C47633 * C10559 +
            (C17130 + C17131) * C47633 * C47994) *
               C47704 * C47749 -
           ((C16616 + C16617) * C47633 * C47994 +
            (C16213 + C16212) * C47633 * C10559) *
               C47704 * C2540) *
              C48012 +
          (((C16215 + C16214) * C47633 * C10559 +
            (C16620 + C16621) * C47633 * C47994) *
               C47704 * C2540 -
           ((C17132 + C17133) * C47633 * C47994 +
            (C16419 + C16418) * C47633 * C10559) *
               C47704 * C47749) *
              C47999 +
          (((C16767 + C16766) * C47633 * C10559 +
            (C16159 * C954 - C16160 * C946 - C16159 * C955 + C16155 * C961 +
             C16161 * C1607 - C16162 * C1606 - C16161 * C1608 +
             C47992 * C1609) *
                C47633 * C47994) *
               C47704 * C47749 -
           ((C16910 + C16911) * C47633 * C47994 +
            (C16217 + C16216) * C47633 * C10559) *
               C47704 * C2540) *
              C47978)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C16159 * C122 - C16160 * C115 - C16159 * C123 + C16155 * C136 +
              C16161 * C308 - C16162 * C296 - C16161 * C309 + C47992 * C326) *
                 C47633 * C10559 +
             (C26342 + C26343) * C47633 * C47994) *
                C48014 -
            ((C26344 + C26345) * C47633 * C47994 +
             (C26343 + C26342) * C47633 * C10559) *
                C48003 +
            ((C26345 + C26344) * C47633 * C10559 +
             (C28100 + C28101) * C47633 * C47994) *
                C47977) *
               C2540 +
           (((C26812 + C26813) * C47633 * C10559 +
             (C27224 + C27225) * C47633 * C47994) *
                C48003 -
            ((C26813 + C26812) * C47633 * C47994 +
             (C16161 * C310 - C16162 * C297 - C16161 * C311 + C47992 * C327 +
              C16159 * C308 - C16160 * C296 - C16159 * C309 + C16155 * C326) *
                 C47633 * C10559) *
                C48014 -
            ((C28570 + C28571) * C47633 * C47994 +
             (C27225 + C27224) * C47633 * C10559) *
                C47977) *
               C47749) *
              C2648 +
          ((((C16617 + C16616) * C47633 * C10559 +
             (C16618 + C16619) * C47633 * C47994) *
                C48003 -
            ((C16616 + C16617) * C47633 * C47994 +
             (C16213 + C16212) * C47633 * C10559) *
                C48014 -
            ((C18714 + C18715) * C47633 * C47994 +
             (C16619 + C16618) * C47633 * C10559) *
                C47977) *
               C2540 +
           (((C16415 + C16414) * C47633 * C10559 +
             (C17130 + C17131) * C47633 * C47994) *
                C48014 -
            ((C18570 + C18571) * C47633 * C47994 +
             (C17131 + C17130) * C47633 * C10559) *
                C48003 +
            ((C18571 + C18570) * C47633 * C10559 +
             (C16159 * C2435 - C16160 * C2431 - C16159 * C2436 +
              C16155 * C2440 + C16161 * C7509 - C16162 * C7506 -
              C16161 * C7510 + C47992 * C7512) *
                 C47633 * C47994) *
                C47977) *
               C47749) *
              C47669)) /
            (p * q * std::sqrt(p + q));
    d2ee[128] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C16159 * C122 - C16160 * C115 - C16159 * C123 + C16155 * C136 +
              C16161 * C308 - C16162 * C296 - C16161 * C309 + C47992 * C326) *
                 C47633 * C10559 +
             (C26342 + C26343) * C47633 * C47994) *
                C47943 -
            ((C26344 + C26345) * C47633 * C47994 +
             (C26343 + C26342) * C47633 * C10559) *
                C47791) *
               C2540 +
           (((C26812 + C26813) * C47633 * C10559 +
             (C27224 + C27225) * C47633 * C47994) *
                C47791 -
            ((C26813 + C26812) * C47633 * C47994 +
             (C16161 * C310 - C16162 * C297 - C16161 * C311 + C47992 * C327 +
              C16159 * C308 - C16160 * C296 - C16159 * C309 + C16155 * C326) *
                 C47633 * C10559) *
                C47943) *
               C47749) *
              C47663 +
          ((((C16617 + C16616) * C47633 * C10559 +
             (C16618 + C16619) * C47633 * C47994) *
                C47791 -
            ((C16616 + C16617) * C47633 * C47994 +
             (C16213 + C16212) * C47633 * C10559) *
                C47943) *
               C2540 +
           (((C16415 + C16414) * C47633 * C10559 +
             (C17130 + C17131) * C47633 * C47994) *
                C47943 -
            ((C18570 + C18571) * C47633 * C47994 +
             (C17131 + C17130) * C47633 * C10559) *
                C47791) *
               C47749) *
              C47672 +
          ((((C16215 + C16214) * C47633 * C10559 +
             (C16620 + C16621) * C47633 * C47994) *
                C47943 -
            ((C16622 + C16623) * C47633 * C47994 +
             (C16621 + C16620) * C47633 * C10559) *
                C47791) *
               C2540 +
           (((C17133 + C17132) * C47633 * C10559 +
             (C16159 * C1311 - C16160 * C1302 - C16159 * C1312 +
              C16155 * C1329 + C16161 * C1327 - C16162 * C1310 -
              C16161 * C1328 + C47992 * C1337) *
                 C47633 * C47994) *
                C47791 -
            ((C17132 + C17133) * C47633 * C47994 +
             (C16419 + C16418) * C47633 * C10559) *
                C47943) *
               C47749) *
              C2911)) /
        (p * q * std::sqrt(p + q));
    d2ee[129] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C16159 * C122 - C16160 * C115 - C16159 * C123 + C16155 * C136 +
             C16161 * C308 - C16162 * C296 - C16161 * C309 + C47992 * C326) *
                C47633 * C10559 +
            (C26342 + C26343) * C47633 * C47994) *
               C47704 * C2540 -
           ((C26813 + C26812) * C47633 * C47994 +
            (C16161 * C310 - C16162 * C297 - C16161 * C311 + C47992 * C327 +
             C16159 * C308 - C16160 * C296 - C16159 * C309 + C16155 * C326) *
                C47633 * C10559) *
               C47704 * C47749) *
              C48019 +
          (((C16415 + C16414) * C47633 * C10559 +
            (C17130 + C17131) * C47633 * C47994) *
               C47704 * C47749 -
           ((C16616 + C16617) * C47633 * C47994 +
            (C16213 + C16212) * C47633 * C10559) *
               C47704 * C2540) *
              C48012 +
          (((C16215 + C16214) * C47633 * C10559 +
            (C16620 + C16621) * C47633 * C47994) *
               C47704 * C2540 -
           ((C17132 + C17133) * C47633 * C47994 +
            (C16419 + C16418) * C47633 * C10559) *
               C47704 * C47749) *
              C47999 +
          (((C16767 + C16766) * C47633 * C10559 +
            (C16159 * C954 - C16160 * C946 - C16159 * C955 + C16155 * C961 +
             C16161 * C1607 - C16162 * C1606 - C16161 * C1608 +
             C47992 * C1609) *
                C47633 * C47994) *
               C47704 * C47749 -
           ((C16910 + C16911) * C47633 * C47994 +
            (C16217 + C16216) * C47633 * C10559) *
               C47704 * C2540) *
              C47978)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C16159 * C122 - C16160 * C115 - C16159 * C123 + C16155 * C136 +
             C16161 * C308 - C16162 * C296 - C16161 * C309 + C47992 * C326) *
                C47633 * C10559 +
            (C26342 + C26343) * C47633 * C47994) *
               C47704 * C48020 -
           ((C26813 + C26812) * C47633 * C47994 +
            (C16161 * C310 - C16162 * C297 - C16161 * C311 + C47992 * C327 +
             C16159 * C308 - C16160 * C296 - C16159 * C309 + C16155 * C326) *
                C47633 * C10559) *
               C47704 * C48016 +
           ((C16159 * C310 - C16160 * C297 - C16159 * C311 + C16155 * C327 +
             C16161 * C1178 - C16162 * C1170 - C16161 * C1179 +
             C47992 * C1188) *
                C47633 * C10559 +
            (C27226 + C27227) * C47633 * C47994) *
               C47704 * C48006 -
           ((C27697 + C27696) * C47633 * C47994 +
            (C16161 * C1180 - C16162 * C1171 - C16161 * C1181 + C47992 * C1189 +
             C16159 * C1178 - C16160 * C1170 - C16159 * C1179 +
             C16155 * C1188) *
                C47633 * C10559) *
               C47704 * C47984) *
              C2648 +
          (((C16415 + C16414) * C47633 * C10559 +
            (C17130 + C17131) * C47633 * C47994) *
               C47704 * C48016 -
           ((C16616 + C16617) * C47633 * C47994 +
            (C16213 + C16212) * C47633 * C10559) *
               C47704 * C48020 -
           ((C17858 + C17859) * C47633 * C47994 +
            (C16417 + C16416) * C47633 * C10559) *
               C47704 * C48006 +
           ((C17651 + C17650) * C47633 * C10559 +
            (C16159 * C1727 - C16160 * C1723 - C16159 * C1728 + C16155 * C1732 +
             C16161 * C6637 - C16162 * C6634 - C16161 * C6638 +
             C47992 * C6640) *
                C47633 * C47994) *
               C47704 * C47984) *
              C47669)) /
            (p * q * std::sqrt(p + q));
    d2ee[130] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C16159 * C122 - C16160 * C115 - C16159 * C123 + C16155 * C136 +
              C16161 * C308 - C16162 * C296 - C16161 * C309 + C47992 * C326) *
                 C47633 * C10559 +
             (C26342 + C26343) * C47633 * C47994) *
                C3302 -
            ((C26344 + C26345) * C47633 * C47994 +
             (C26343 + C26342) * C47633 * C10559) *
                C47791) *
               C47745 +
           (((C26812 + C26813) * C47633 * C10559 +
             (C27224 + C27225) * C47633 * C47994) *
                C47791 -
            ((C26813 + C26812) * C47633 * C47994 +
             (C16161 * C310 - C16162 * C297 - C16161 * C311 + C47992 * C327 +
              C16159 * C308 - C16160 * C296 - C16159 * C309 + C16155 * C326) *
                 C47633 * C10559) *
                C3302) *
               C47752 +
           (((C16159 * C310 - C16160 * C297 - C16159 * C311 + C16155 * C327 +
              C16161 * C1178 - C16162 * C1170 - C16161 * C1179 +
              C47992 * C1188) *
                 C47633 * C10559 +
             (C27226 + C27227) * C47633 * C47994) *
                C3302 -
            ((C27228 + C27229) * C47633 * C47994 +
             (C27227 + C27226) * C47633 * C10559) *
                C47791) *
               C2908) *
              C47928 +
          ((((C16617 + C16616) * C47633 * C10559 +
             (C16618 + C16619) * C47633 * C47994) *
                C47791 -
            ((C16616 + C16617) * C47633 * C47994 +
             (C16213 + C16212) * C47633 * C10559) *
                C3302) *
               C47745 +
           (((C16415 + C16414) * C47633 * C10559 +
             (C17130 + C17131) * C47633 * C47994) *
                C3302 -
            ((C18570 + C18571) * C47633 * C47994 +
             (C17131 + C17130) * C47633 * C10559) *
                C47791) *
               C47752 +
           (((C17859 + C17858) * C47633 * C10559 +
             (C16159 * C1325 - C16160 * C1309 - C16159 * C1326 +
              C16155 * C1336 + C16161 * C6147 - C16162 * C6144 -
              C16161 * C6148 + C47992 * C6150) *
                 C47633 * C47994) *
                C47791 -
            ((C17858 + C17859) * C47633 * C47994 +
             (C16417 + C16416) * C47633 * C10559) *
                C3302) *
               C2908) *
              C47669)) /
        (p * q * std::sqrt(p + q));
    d2ee[131] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C16159 * C122 - C16160 * C115 - C16159 * C123 + C16155 * C136 +
             C16161 * C308 - C16162 * C296 - C16161 * C309 + C47992 * C326) *
                C47633 * C10559 +
            (C26342 + C26343) * C47633 * C47994) *
               C47787 -
           ((C26344 + C26345) * C47633 * C47994 +
            (C26343 + C26342) * C47633 * C10559) *
               C47794 +
           ((C26345 + C26344) * C47633 * C10559 +
            (C28100 + C28101) * C47633 * C47994) *
               C3810) *
              C47745 +
          (((C26812 + C26813) * C47633 * C10559 +
            (C27224 + C27225) * C47633 * C47994) *
               C47794 -
           ((C26813 + C26812) * C47633 * C47994 +
            (C16161 * C310 - C16162 * C297 - C16161 * C311 + C47992 * C327 +
             C16159 * C308 - C16160 * C296 - C16159 * C309 + C16155 * C326) *
                C47633 * C10559) *
               C47787 -
           ((C28570 + C28571) * C47633 * C47994 +
            (C27225 + C27224) * C47633 * C10559) *
               C3810) *
              C47752 +
          (((C16159 * C310 - C16160 * C297 - C16159 * C311 + C16155 * C327 +
             C16161 * C1178 - C16162 * C1170 - C16161 * C1179 +
             C47992 * C1188) *
                C47633 * C10559 +
            (C27226 + C27227) * C47633 * C47994) *
               C47787 -
           ((C27228 + C27229) * C47633 * C47994 +
            (C27227 + C27226) * C47633 * C10559) *
               C47794 +
           ((C27229 + C27228) * C47633 * C10559 +
            (C16159 * C7507 - C16160 * C7505 - C16159 * C7508 + C16155 * C7511 +
             C16161 * C23708 - C16162 * C23707 - C16161 * C23709 +
             C47992 * C23710) *
                C47633 * C47994) *
               C3810) *
              C2908) *
         C47658) /
        (p * q * std::sqrt(p + q));
    d2ee[132] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C16159 * C122 - C16160 * C115 - C16159 * C123 + C16155 * C136 +
             C16161 * C308 - C16162 * C296 - C16161 * C309 + C47992 * C326) *
                C47633 * C10559 +
            (C26342 + C26343) * C47633 * C47994) *
               C3302 -
           ((C26344 + C26345) * C47633 * C47994 +
            (C26343 + C26342) * C47633 * C10559) *
               C47791) *
              C48020 +
          (((C26812 + C26813) * C47633 * C10559 +
            (C27224 + C27225) * C47633 * C47994) *
               C47791 -
           ((C26813 + C26812) * C47633 * C47994 +
            (C16161 * C310 - C16162 * C297 - C16161 * C311 + C47992 * C327 +
             C16159 * C308 - C16160 * C296 - C16159 * C309 + C16155 * C326) *
                C47633 * C10559) *
               C3302) *
              C48016 +
          (((C16159 * C310 - C16160 * C297 - C16159 * C311 + C16155 * C327 +
             C16161 * C1178 - C16162 * C1170 - C16161 * C1179 +
             C47992 * C1188) *
                C47633 * C10559 +
            (C27226 + C27227) * C47633 * C47994) *
               C3302 -
           ((C27228 + C27229) * C47633 * C47994 +
            (C27227 + C27226) * C47633 * C10559) *
               C47791) *
              C48006 +
          (((C27696 + C27697) * C47633 * C10559 +
            (C16159 * C6145 - C16160 * C6143 - C16159 * C6146 + C16155 * C6149 +
             C16161 * C22730 - C16162 * C22729 - C16161 * C22731 +
             C47992 * C22732) *
                C47633 * C47994) *
               C47791 -
           ((C27697 + C27696) * C47633 * C47994 +
            (C16161 * C1180 - C16162 * C1171 - C16161 * C1181 + C47992 * C1189 +
             C16159 * C1178 - C16160 * C1170 - C16159 * C1179 +
             C16155 * C1188) *
                C47633 * C10559) *
               C3302) *
              C47984) *
         C47658) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C16159 * C122 - C16160 * C115 - C16159 * C123 + C16155 * C136 +
              C16161 * C308 - C16162 * C296 - C16161 * C309 + C47992 * C326) *
                 C47633 * C10559 +
             (C26342 + C26343) * C47633 * C47994) *
                C3302 -
            ((C26344 + C26345) * C47633 * C47994 +
             (C26343 + C26342) * C47633 * C10559) *
                C47791) *
               C2540 +
           (((C26812 + C26813) * C47633 * C10559 +
             (C27224 + C27225) * C47633 * C47994) *
                C47791 -
            ((C26813 + C26812) * C47633 * C47994 +
             (C16161 * C310 - C16162 * C297 - C16161 * C311 + C47992 * C327 +
              C16159 * C308 - C16160 * C296 - C16159 * C309 + C16155 * C326) *
                 C47633 * C10559) *
                C3302) *
               C47749) *
              C48010 +
          ((((C16617 + C16616) * C47633 * C10559 +
             (C16618 + C16619) * C47633 * C47994) *
                C47791 -
            ((C16616 + C16617) * C47633 * C47994 +
             (C16213 + C16212) * C47633 * C10559) *
                C3302) *
               C2540 +
           (((C16415 + C16414) * C47633 * C10559 +
             (C17130 + C17131) * C47633 * C47994) *
                C3302 -
            ((C18570 + C18571) * C47633 * C47994 +
             (C17131 + C17130) * C47633 * C10559) *
                C47791) *
               C47749) *
              C47997 +
          ((((C16215 + C16214) * C47633 * C10559 +
             (C16620 + C16621) * C47633 * C47994) *
                C3302 -
            ((C16622 + C16623) * C47633 * C47994 +
             (C16621 + C16620) * C47633 * C10559) *
                C47791) *
               C2540 +
           (((C17133 + C17132) * C47633 * C10559 +
             (C16159 * C1311 - C16160 * C1302 - C16159 * C1312 +
              C16155 * C1329 + C16161 * C1327 - C16162 * C1310 -
              C16161 * C1328 + C47992 * C1337) *
                 C47633 * C47994) *
                C47791 -
            ((C17132 + C17133) * C47633 * C47994 +
             (C16419 + C16418) * C47633 * C10559) *
                C3302) *
               C47749) *
              C47968)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C16159 * C122 - C16160 * C115 - C16159 * C123 + C16155 * C136 +
             C16161 * C308 - C16162 * C296 - C16161 * C309 + C47992 * C326) *
                C47633 * C10559 +
            (C26342 + C26343) * C47633 * C47994) *
               C48021 -
           ((C26344 + C26345) * C47633 * C47994 +
            (C26343 + C26342) * C47633 * C10559) *
               C48018 +
           ((C26345 + C26344) * C47633 * C10559 +
            (C28100 + C28101) * C47633 * C47994) *
               C48009 -
           ((C28102 + C28103) * C47633 * C47994 +
            (C28101 + C28100) * C47633 * C10559) *
               C47990) *
              C2540 +
          (((C26812 + C26813) * C47633 * C10559 +
            (C27224 + C27225) * C47633 * C47994) *
               C48018 -
           ((C26813 + C26812) * C47633 * C47994 +
            (C16161 * C310 - C16162 * C297 - C16161 * C311 + C47992 * C327 +
             C16159 * C308 - C16160 * C296 - C16159 * C309 + C16155 * C326) *
                C47633 * C10559) *
               C48021 -
           ((C28570 + C28571) * C47633 * C47994 +
            (C27225 + C27224) * C47633 * C10559) *
               C48009 +
           ((C28571 + C28570) * C47633 * C10559 +
            (C16159 * C7017 - C16160 * C7015 - C16159 * C7018 + C16155 * C7021 +
             C16161 * C23362 - C16162 * C23361 - C16161 * C23363 +
             C47992 * C23364) *
                C47633 * C47994) *
               C47990) *
              C47749) *
         C47658) /
            (p * q * std::sqrt(p + q));
    d2ee[133] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C16159 * C122 - C16160 * C115 - C16159 * C123 + C16155 * C136 +
              C16161 * C308 - C16162 * C296 - C16161 * C309 + C47992 * C326) *
                 C47633 * C10559 +
             (C26342 + C26343) * C47633 * C47994) *
                C47787 -
            ((C26344 + C26345) * C47633 * C47994 +
             (C26343 + C26342) * C47633 * C10559) *
                C47794 +
            ((C26345 + C26344) * C47633 * C10559 +
             (C28100 + C28101) * C47633 * C47994) *
                C3810) *
               C2540 +
           (((C26812 + C26813) * C47633 * C10559 +
             (C27224 + C27225) * C47633 * C47994) *
                C47794 -
            ((C26813 + C26812) * C47633 * C47994 +
             (C16161 * C310 - C16162 * C297 - C16161 * C311 + C47992 * C327 +
              C16159 * C308 - C16160 * C296 - C16159 * C309 + C16155 * C326) *
                 C47633 * C10559) *
                C47787 -
            ((C28570 + C28571) * C47633 * C47994 +
             (C27225 + C27224) * C47633 * C10559) *
                C3810) *
               C47749) *
              C47928 +
          ((((C16617 + C16616) * C47633 * C10559 +
             (C16618 + C16619) * C47633 * C47994) *
                C47794 -
            ((C16616 + C16617) * C47633 * C47994 +
             (C16213 + C16212) * C47633 * C10559) *
                C47787 -
            ((C18714 + C18715) * C47633 * C47994 +
             (C16619 + C16618) * C47633 * C10559) *
                C3810) *
               C2540 +
           (((C16415 + C16414) * C47633 * C10559 +
             (C17130 + C17131) * C47633 * C47994) *
                C47787 -
            ((C18570 + C18571) * C47633 * C47994 +
             (C17131 + C17130) * C47633 * C10559) *
                C47794 +
            ((C18571 + C18570) * C47633 * C10559 +
             (C16159 * C2435 - C16160 * C2431 - C16159 * C2436 +
              C16155 * C2440 + C16161 * C7509 - C16162 * C7506 -
              C16161 * C7510 + C47992 * C7512) *
                 C47633 * C47994) *
                C3810) *
               C47749) *
              C47669)) /
        (p * q * std::sqrt(p + q));
    d2ee[134] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C16159 * C122 - C16160 * C115 - C16159 * C123 + C16155 * C136 +
              C16161 * C308 - C16162 * C296 - C16161 * C309 + C47992 * C326) *
                 C47633 * C10559 +
             (C26342 + C26343) * C47633 * C47994) *
                C3302 -
            ((C26344 + C26345) * C47633 * C47994 +
             (C26343 + C26342) * C47633 * C10559) *
                C47791) *
               C2540 +
           (((C26812 + C26813) * C47633 * C10559 +
             (C27224 + C27225) * C47633 * C47994) *
                C47791 -
            ((C26813 + C26812) * C47633 * C47994 +
             (C16161 * C310 - C16162 * C297 - C16161 * C311 + C47992 * C327 +
              C16159 * C308 - C16160 * C296 - C16159 * C309 + C16155 * C326) *
                 C47633 * C10559) *
                C3302) *
               C47749) *
              C48010 +
          ((((C16617 + C16616) * C47633 * C10559 +
             (C16618 + C16619) * C47633 * C47994) *
                C47791 -
            ((C16616 + C16617) * C47633 * C47994 +
             (C16213 + C16212) * C47633 * C10559) *
                C3302) *
               C2540 +
           (((C16415 + C16414) * C47633 * C10559 +
             (C17130 + C17131) * C47633 * C47994) *
                C3302 -
            ((C18570 + C18571) * C47633 * C47994 +
             (C17131 + C17130) * C47633 * C10559) *
                C47791) *
               C47749) *
              C47997 +
          ((((C16215 + C16214) * C47633 * C10559 +
             (C16620 + C16621) * C47633 * C47994) *
                C3302 -
            ((C16622 + C16623) * C47633 * C47994 +
             (C16621 + C16620) * C47633 * C10559) *
                C47791) *
               C2540 +
           (((C17133 + C17132) * C47633 * C10559 +
             (C16159 * C1311 - C16160 * C1302 - C16159 * C1312 +
              C16155 * C1329 + C16161 * C1327 - C16162 * C1310 -
              C16161 * C1328 + C47992 * C1337) *
                 C47633 * C47994) *
                C47791 -
            ((C17132 + C17133) * C47633 * C47994 +
             (C16419 + C16418) * C47633 * C10559) *
                C3302) *
               C47749) *
              C47968)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C16159 * C122 - C16160 * C115 - C16159 * C123 + C16155 * C136 +
             C16161 * C308 - C16162 * C296 - C16161 * C309 + C47992 * C326) *
                C47633 * C10559 +
            (C26342 + C26343) * C47633 * C47994) *
               C3302 -
           ((C26344 + C26345) * C47633 * C47994 +
            (C26343 + C26342) * C47633 * C10559) *
               C47791) *
              C48020 +
          (((C26812 + C26813) * C47633 * C10559 +
            (C27224 + C27225) * C47633 * C47994) *
               C47791 -
           ((C26813 + C26812) * C47633 * C47994 +
            (C16161 * C310 - C16162 * C297 - C16161 * C311 + C47992 * C327 +
             C16159 * C308 - C16160 * C296 - C16159 * C309 + C16155 * C326) *
                C47633 * C10559) *
               C3302) *
              C48016 +
          (((C16159 * C310 - C16160 * C297 - C16159 * C311 + C16155 * C327 +
             C16161 * C1178 - C16162 * C1170 - C16161 * C1179 +
             C47992 * C1188) *
                C47633 * C10559 +
            (C27226 + C27227) * C47633 * C47994) *
               C3302 -
           ((C27228 + C27229) * C47633 * C47994 +
            (C27227 + C27226) * C47633 * C10559) *
               C47791) *
              C48006 +
          (((C27696 + C27697) * C47633 * C10559 +
            (C16159 * C6145 - C16160 * C6143 - C16159 * C6146 + C16155 * C6149 +
             C16161 * C22730 - C16162 * C22729 - C16161 * C22731 +
             C47992 * C22732) *
                C47633 * C47994) *
               C47791 -
           ((C27697 + C27696) * C47633 * C47994 +
            (C16161 * C1180 - C16162 * C1171 - C16161 * C1181 + C47992 * C1189 +
             C16159 * C1178 - C16160 * C1170 - C16159 * C1179 +
             C16155 * C1188) *
                C47633 * C10559) *
               C3302) *
              C47984) *
         C47658) /
            (p * q * std::sqrt(p + q));
    d2ee[135] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C16159 * C122 - C16160 * C115 - C16159 * C123 + C16155 * C136 +
             C16161 * C308 - C16162 * C296 - C16161 * C309 + C47992 * C326) *
                C47633 * C10559 +
            (C26342 + C26343) * C47633 * C47994) *
               C47704 * C1436 -
           ((C26813 + C26812) * C47633 * C47994 +
            (C16161 * C310 - C16162 * C297 - C16161 * C311 + C47992 * C327 +
             C16159 * C308 - C16160 * C296 - C16159 * C309 + C16155 * C326) *
                C47633 * C10559) *
               C47704 * C1437 +
           ((C16159 * C310 - C16160 * C297 - C16159 * C311 + C16155 * C327 +
             C16161 * C1178 - C16162 * C1170 - C16161 * C1179 +
             C47992 * C1188) *
                C47633 * C10559 +
            (C27226 + C27227) * C47633 * C47994) *
               C47704 * C1438 -
           ((C16161 * C6635 - C16162 * C6633 - C16161 * C6636 + C47992 * C6639 +
             C16159 * C1725 - C16160 * C1722 - C16159 * C1726 +
             C16155 * C1731) *
                C47633 * C47994 +
            (C16161 * C1180 - C16162 * C1171 - C16161 * C1181 + C47992 * C1189 +
             C16159 * C1178 - C16160 * C1170 - C16159 * C1179 +
             C16155 * C1188) *
                C47633 * C10559) *
               C47704 * C47984) *
              C47928 +
          (((C16415 + C16414) * C47633 * C10559 +
            (C17130 + C17131) * C47633 * C47994) *
               C47704 * C1437 -
           ((C16616 + C16617) * C47633 * C47994 +
            (C16213 + C16212) * C47633 * C10559) *
               C47704 * C1436 -
           ((C17858 + C17859) * C47633 * C47994 +
            (C16417 + C16416) * C47633 * C10559) *
               C47704 * C1438 +
           ((C17651 + C17650) * C47633 * C10559 +
            (C16159 * C1727 - C16160 * C1723 - C16159 * C1728 + C16155 * C1732 +
             C16161 * C6637 - C16162 * C6634 - C16161 * C6638 +
             C47992 * C6640) *
                C47633 * C47994) *
               C47704 * C47984) *
              C47669)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C16159 * C122 - C16160 * C115 - C16159 * C123 + C16155 * C136 +
             C16161 * C308 - C16162 * C296 - C16161 * C309 + C47992 * C326) *
                C47633 * C10559 +
            (C26342 + C26343) * C47633 * C47994) *
               C47704 * C47942 -
           ((C16161 * C1321 - C16162 * C1307 - C16161 * C1322 + C47992 * C1334 +
             C16159 * C948 - C16160 * C943 - C16159 * C949 + C16155 * C958) *
                C47633 * C47994 +
            (C16161 * C310 - C16162 * C297 - C16161 * C311 + C47992 * C327 +
             C16159 * C308 - C16160 * C296 - C16159 * C309 + C16155 * C326) *
                C47633 * C10559) *
               C47704 * C47749) *
              C671 +
          (((C16415 + C16414) * C47633 * C10559 +
            (C17130 + C17131) * C47633 * C47994) *
               C47704 * C47749 -
           ((C16616 + C16617) * C47633 * C47994 +
            (C16213 + C16212) * C47633 * C10559) *
               C47704 * C47942) *
              C672 +
          (((C16215 + C16214) * C47633 * C10559 +
            (C16620 + C16621) * C47633 * C47994) *
               C47704 * C47942 -
           ((C17132 + C17133) * C47633 * C47994 +
            (C16419 + C16418) * C47633 * C10559) *
               C47704 * C47749) *
              C673 +
          (((C16767 + C16766) * C47633 * C10559 +
            (C16159 * C954 - C16160 * C946 - C16159 * C955 + C16155 * C961 +
             C16161 * C1607 - C16162 * C1606 - C16161 * C1608 +
             C47992 * C1609) *
                C47633 * C47994) *
               C47704 * C47749 -
           ((C16910 + C16911) * C47633 * C47994 +
            (C16217 + C16216) * C47633 * C10559) *
               C47704 * C47942) *
              C47978)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C16159 * C122 - C16160 * C115 - C16159 * C123 + C16155 * C136 +
              C16161 * C308 - C16162 * C296 - C16161 * C309 + C47992 * C326) *
                 C47633 * C10559 +
             (C26342 + C26343) * C47633 * C47994) *
                C1844 -
            ((C26344 + C26345) * C47633 * C47994 +
             (C26343 + C26342) * C47633 * C10559) *
                C1845 +
            ((C26345 + C26344) * C47633 * C10559 +
             (C28100 + C28101) * C47633 * C47994) *
                C47977) *
               C47942 +
           (((C26812 + C26813) * C47633 * C10559 +
             (C27224 + C27225) * C47633 * C47994) *
                C1845 -
            ((C26813 + C26812) * C47633 * C47994 +
             (C16161 * C310 - C16162 * C297 - C16161 * C311 + C47992 * C327 +
              C16159 * C308 - C16160 * C296 - C16159 * C309 + C16155 * C326) *
                 C47633 * C10559) *
                C1844 -
            ((C16161 * C7507 - C16162 * C7505 - C16161 * C7508 +
              C47992 * C7511 + C16159 * C2433 - C16160 * C2430 -
              C16159 * C2434 + C16155 * C2439) *
                 C47633 * C47994 +
             (C27225 + C27224) * C47633 * C10559) *
                C47977) *
               C47749) *
              C47928 +
          ((((C16617 + C16616) * C47633 * C10559 +
             (C16618 + C16619) * C47633 * C47994) *
                C1845 -
            ((C16616 + C16617) * C47633 * C47994 +
             (C16213 + C16212) * C47633 * C10559) *
                C1844 -
            ((C18714 + C18715) * C47633 * C47994 +
             (C16619 + C16618) * C47633 * C10559) *
                C47977) *
               C47942 +
           (((C16415 + C16414) * C47633 * C10559 +
             (C17130 + C17131) * C47633 * C47994) *
                C1844 -
            ((C18570 + C18571) * C47633 * C47994 +
             (C17131 + C17130) * C47633 * C10559) *
                C1845 +
            ((C18571 + C18570) * C47633 * C10559 +
             (C16159 * C2435 - C16160 * C2431 - C16159 * C2436 +
              C16155 * C2440 + C16161 * C7509 - C16162 * C7506 -
              C16161 * C7510 + C47992 * C7512) *
                 C47633 * C47994) *
                C47977) *
               C47749) *
              C47669)) /
            (p * q * std::sqrt(p + q));
    d2ee[136] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C16159 * C122 - C16160 * C115 - C16159 * C123 + C16155 * C136 +
             C16161 * C308 - C16162 * C296 - C16161 * C309 + C47992 * C326) *
                C47633 * C10559 +
            (C26342 + C26343) * C47633 * C47994) *
               C47943 -
           ((C26344 + C26345) * C47633 * C47994 +
            (C26343 + C26342) * C47633 * C10559) *
               C47791) *
              C1436 +
          (((C26812 + C26813) * C47633 * C10559 +
            (C27224 + C27225) * C47633 * C47994) *
               C47791 -
           ((C26813 + C26812) * C47633 * C47994 +
            (C16161 * C310 - C16162 * C297 - C16161 * C311 + C47992 * C327 +
             C16159 * C308 - C16160 * C296 - C16159 * C309 + C16155 * C326) *
                C47633 * C10559) *
               C47943) *
              C1437 +
          (((C16159 * C310 - C16160 * C297 - C16159 * C311 + C16155 * C327 +
             C16161 * C1178 - C16162 * C1170 - C16161 * C1179 +
             C47992 * C1188) *
                C47633 * C10559 +
            (C27226 + C27227) * C47633 * C47994) *
               C47943 -
           ((C27228 + C27229) * C47633 * C47994 +
            (C27227 + C27226) * C47633 * C10559) *
               C47791) *
              C1438 +
          (((C27696 + C27697) * C47633 * C10559 +
            (C16159 * C6145 - C16160 * C6143 - C16159 * C6146 + C16155 * C6149 +
             C16161 * C22730 - C16162 * C22729 - C16161 * C22731 +
             C47992 * C22732) *
                C47633 * C47994) *
               C47791 -
           ((C27697 + C27696) * C47633 * C47994 +
            (C16161 * C1180 - C16162 * C1171 - C16161 * C1181 + C47992 * C1189 +
             C16159 * C1178 - C16160 * C1170 - C16159 * C1179 +
             C16155 * C1188) *
                C47633 * C10559) *
               C47943) *
              C47984) *
         C47658) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C16159 * C122 - C16160 * C115 - C16159 * C123 + C16155 * C136 +
              C16161 * C308 - C16162 * C296 - C16161 * C309 + C47992 * C326) *
                 C47633 * C10559 +
             (C26342 + C26343) * C47633 * C47994) *
                C47943 -
            ((C26344 + C26345) * C47633 * C47994 +
             (C26343 + C26342) * C47633 * C10559) *
                C47791) *
               C47942 +
           (((C26812 + C26813) * C47633 * C10559 +
             (C16159 * C1315 - C16160 * C1304 - C16159 * C1316 +
              C16155 * C1331 + C16161 * C1323 - C16162 * C1308 -
              C16161 * C1324 + C47992 * C1335) *
                 C47633 * C47994) *
                C47791 -
            ((C26813 + C26812) * C47633 * C47994 +
             (C16161 * C310 - C16162 * C297 - C16161 * C311 + C47992 * C327 +
              C16159 * C308 - C16160 * C296 - C16159 * C309 + C16155 * C326) *
                 C47633 * C10559) *
                C47943) *
               C47749) *
              C291 +
          ((((C16617 + C16616) * C47633 * C10559 +
             (C16618 + C16619) * C47633 * C47994) *
                C47791 -
            ((C16616 + C16617) * C47633 * C47994 +
             (C16213 + C16212) * C47633 * C10559) *
                C47943) *
               C47942 +
           (((C16415 + C16414) * C47633 * C10559 +
             (C17130 + C17131) * C47633 * C47994) *
                C47943 -
            ((C18570 + C18571) * C47633 * C47994 +
             (C17131 + C17130) * C47633 * C10559) *
                C47791) *
               C47749) *
              C292 +
          ((((C16215 + C16214) * C47633 * C10559 +
             (C16620 + C16621) * C47633 * C47994) *
                C47943 -
            ((C16622 + C16623) * C47633 * C47994 +
             (C16621 + C16620) * C47633 * C10559) *
                C47791) *
               C47942 +
           (((C17133 + C17132) * C47633 * C10559 +
             (C16159 * C1311 - C16160 * C1302 - C16159 * C1312 +
              C16155 * C1329 + C16161 * C1327 - C16162 * C1310 -
              C16161 * C1328 + C47992 * C1337) *
                 C47633 * C47994) *
                C47791 -
            ((C17132 + C17133) * C47633 * C47994 +
             (C16419 + C16418) * C47633 * C10559) *
                C47943) *
               C47749) *
              C47968)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C16159 * C122 - C16160 * C115 - C16159 * C123 + C16155 * C136 +
             C16161 * C308 - C16162 * C296 - C16161 * C309 + C47992 * C326) *
                C47633 * C10559 +
            (C26342 + C26343) * C47633 * C47994) *
               C2310 -
           ((C26344 + C26345) * C47633 * C47994 +
            (C26343 + C26342) * C47633 * C10559) *
               C2311 +
           ((C26345 + C26344) * C47633 * C10559 +
            (C28100 + C28101) * C47633 * C47994) *
               C2312 -
           ((C28102 + C28103) * C47633 * C47994 +
            (C28101 + C28100) * C47633 * C10559) *
               C47990) *
              C47942 +
          (((C26812 + C26813) * C47633 * C10559 +
            (C27224 + C27225) * C47633 * C47994) *
               C2311 -
           ((C26813 + C26812) * C47633 * C47994 +
            (C16161 * C310 - C16162 * C297 - C16161 * C311 + C47992 * C327 +
             C16159 * C308 - C16160 * C296 - C16159 * C309 + C16155 * C326) *
                C47633 * C10559) *
               C2310 -
           ((C28570 + C28571) * C47633 * C47994 +
            (C27225 + C27224) * C47633 * C10559) *
               C2312 +
           ((C28571 + C28570) * C47633 * C10559 +
            (C16159 * C7017 - C16160 * C7015 - C16159 * C7018 + C16155 * C7021 +
             C16161 * C23362 - C16162 * C23361 - C16161 * C23363 +
             C47992 * C23364) *
                C47633 * C47994) *
               C47990) *
              C47749) *
         C47658) /
            (p * q * std::sqrt(p + q));
    d2ee[137] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((C16159 * C122 - C16160 * C115 - C16159 * C123 + C16155 * C136 +
                C16161 * C308 - C16162 * C296 - C16161 * C309 + C47992 * C326) *
                   C47633 * C10559 +
               (C16159 * C503 - C16160 * C491 - C16159 * C504 + C16155 * C521 +
                C16161 * C948 - C16162 * C943 - C16161 * C949 + C47992 * C958) *
                   C47633 * C47994) *
                  C47704 * C47686 * C108 -
              ((C16616 + C16617) * C47633 * C47994 +
               (C16213 + C16212) * C47633 * C10559) *
                  C47704 * C47686 * C109 +
              ((C16215 + C16214) * C47633 * C10559 +
               (C16620 + C16621) * C47633 * C47994) *
                  C47704 * C47686 * C110 -
              ((C16910 + C16911) * C47633 * C47994 +
               (C16217 + C16216) * C47633 * C10559) *
                  C47704 * C47686 * C111 +
              ((C16219 + C16218) * C47633 * C10559 +
               (C16159 * C515 - C16160 * C497 - C16159 * C516 + C16155 * C527 +
                C16161 * C956 - C16162 * C947 - C16161 * C957 + C47992 * C962) *
                   C47633 * C47994) *
                  C47704 * C47686 * C112) +
         0.5 * std::pow(Pi, 2.5) *
             ((((C16159 * C122 - C16160 * C115 - C16159 * C123 + C16155 * C136 +
                 C16161 * C308 - C16162 * C296 - C16161 * C309 +
                 C47992 * C326) *
                    C47633 * C10559 +
                (C16159 * C503 - C16160 * C491 - C16159 * C504 + C16155 * C521 +
                 C16161 * C948 - C16162 * C943 - C16161 * C949 +
                 C47992 * C958) *
                    C47633 * C47994) *
                   C47704 * C48013 -
               ((C16161 * C1321 - C16162 * C1307 - C16161 * C1322 +
                 C47992 * C1334 + C16159 * C948 - C16160 * C943 -
                 C16159 * C949 + C16155 * C958) *
                    C47633 * C47994 +
                (C16161 * C310 - C16162 * C297 - C16161 * C311 + C47992 * C327 +
                 C16159 * C308 - C16160 * C296 - C16159 * C309 +
                 C16155 * C326) *
                    C47633 * C10559) *
                   C47704 * C48001 +
               ((C16159 * C310 - C16160 * C297 - C16159 * C311 + C16155 * C327 +
                 C16161 * C1178 - C16162 * C1170 - C16161 * C1179 +
                 C47992 * C1188) *
                    C47633 * C10559 +
                (C16159 * C1321 - C16160 * C1307 - C16159 * C1322 +
                 C16155 * C1334 + C16161 * C1725 - C16162 * C1722 -
                 C16161 * C1726 + C47992 * C1731) *
                    C47633 * C47994) *
                   C47704 * C47974) *
                  C291 +
              (((C16415 + C16414) * C47633 * C10559 +
                (C17130 + C17131) * C47633 * C47994) *
                   C47704 * C48001 -
               ((C16616 + C16617) * C47633 * C47994 +
                (C16213 + C16212) * C47633 * C10559) *
                   C47704 * C48013 -
               ((C17858 + C17859) * C47633 * C47994 +
                (C16417 + C16416) * C47633 * C10559) *
                   C47704 * C47974) *
                  C292 +
              (((C16215 + C16214) * C47633 * C10559 +
                (C16620 + C16621) * C47633 * C47994) *
                   C47704 * C48013 -
               ((C17132 + C17133) * C47633 * C47994 +
                (C16419 + C16418) * C47633 * C10559) *
                   C47704 * C48001 +
               ((C16421 + C16420) * C47633 * C10559 +
                (C16159 * C1317 - C16160 * C1305 - C16159 * C1318 +
                 C16155 * C1332 + C16161 * C1729 - C16162 * C1724 -
                 C16161 * C1730 + C47992 * C1733) *
                    C47633 * C47994) *
                   C47704 * C47974) *
                  C47968)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C16159 * C122 - C16160 * C115 - C16159 * C123 + C16155 * C136 +
             C16161 * C308 - C16162 * C296 - C16161 * C309 + C47992 * C326) *
                C47633 * C10559 +
            (C26342 + C26343) * C47633 * C47994) *
               C48014 -
           ((C26344 + C26345) * C47633 * C47994 +
            (C26343 + C26342) * C47633 * C10559) *
               C48003 +
           ((C26345 + C26344) * C47633 * C10559 +
            (C16159 * C2034 - C16160 * C2026 - C16159 * C2035 + C16155 * C2044 +
             C16161 * C2433 - C16162 * C2430 - C16161 * C2434 +
             C47992 * C2439) *
                C47633 * C47994) *
               C47977) *
              C47686 * C291 +
          (((C16617 + C16616) * C47633 * C10559 +
            (C16618 + C16619) * C47633 * C47994) *
               C48003 -
           ((C16616 + C16617) * C47633 * C47994 +
            (C16213 + C16212) * C47633 * C10559) *
               C48014 -
           ((C18714 + C18715) * C47633 * C47994 +
            (C16619 + C16618) * C47633 * C10559) *
               C47977) *
              C47686 * C292 +
          (((C16215 + C16214) * C47633 * C10559 +
            (C16620 + C16621) * C47633 * C47994) *
               C48014 -
           ((C16622 + C16623) * C47633 * C47994 +
            (C16621 + C16620) * C47633 * C10559) *
               C48003 +
           ((C16623 + C16622) * C47633 * C10559 +
            (C16159 * C2030 - C16160 * C2024 - C16159 * C2031 + C16155 * C2042 +
             C16161 * C2437 - C16162 * C2432 - C16161 * C2438 +
             C47992 * C2441) *
                C47633 * C47994) *
               C47977) *
              C47686 * C47968)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C16159 * C122 - C16160 * C115 - C16159 * C123 + C16155 * C136 +
             C16161 * C308 - C16162 * C296 - C16161 * C309 + C47992 * C326) *
                C47633 * C10559 +
            (C26342 + C26343) * C47633 * C47994) *
               C47704 * C1094 -
           ((C26813 + C26812) * C47633 * C47994 +
            (C16161 * C310 - C16162 * C297 - C16161 * C311 + C47992 * C327 +
             C16159 * C308 - C16160 * C296 - C16159 * C309 + C16155 * C326) *
                C47633 * C10559) *
               C47704 * C1095 +
           ((C16159 * C310 - C16160 * C297 - C16159 * C311 + C16155 * C327 +
             C16161 * C1178 - C16162 * C1170 - C16161 * C1179 +
             C47992 * C1188) *
                C47633 * C10559 +
            (C16159 * C1321 - C16160 * C1307 - C16159 * C1322 + C16155 * C1334 +
             C16161 * C1725 - C16162 * C1722 - C16161 * C1726 +
             C47992 * C1731) *
                C47633 * C47994) *
               C47704 * C47974) *
              C48010 +
          (((C16415 + C16414) * C47633 * C10559 +
            (C17130 + C17131) * C47633 * C47994) *
               C47704 * C1095 -
           ((C16616 + C16617) * C47633 * C47994 +
            (C16213 + C16212) * C47633 * C10559) *
               C47704 * C1094 -
           ((C17858 + C17859) * C47633 * C47994 +
            (C16417 + C16416) * C47633 * C10559) *
               C47704 * C47974) *
              C47997 +
          (((C16215 + C16214) * C47633 * C10559 +
            (C16620 + C16621) * C47633 * C47994) *
               C47704 * C1094 -
           ((C17132 + C17133) * C47633 * C47994 +
            (C16419 + C16418) * C47633 * C10559) *
               C47704 * C1095 +
           ((C16421 + C16420) * C47633 * C10559 +
            (C16159 * C1317 - C16160 * C1305 - C16159 * C1318 + C16155 * C1332 +
             C16161 * C1729 - C16162 * C1724 - C16161 * C1730 +
             C47992 * C1733) *
                C47633 * C47994) *
               C47704 * C47974) *
              C47968)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C16159 * C122 - C16160 * C115 - C16159 * C123 + C16155 * C136 +
            C16161 * C308 - C16162 * C296 - C16161 * C309 + C47992 * C326) *
               C47633 * C10559 +
           (C26342 + C26343) * C47633 * C47994) *
              C47704 * C1162 -
          ((C26813 + C26812) * C47633 * C47994 +
           (C16161 * C310 - C16162 * C297 - C16161 * C311 + C47992 * C327 +
            C16159 * C308 - C16160 * C296 - C16159 * C309 + C16155 * C326) *
               C47633 * C10559) *
              C47704 * C1163 +
          ((C16159 * C310 - C16160 * C297 - C16159 * C311 + C16155 * C327 +
            C16161 * C1178 - C16162 * C1170 - C16161 * C1179 + C47992 * C1188) *
               C47633 * C10559 +
           (C16159 * C1321 - C16160 * C1307 - C16159 * C1322 + C16155 * C1334 +
            C16161 * C1725 - C16162 * C1722 - C16161 * C1726 + C47992 * C1731) *
               C47633 * C47994) *
              C47704 * C1164 -
          ((C16161 * C6635 - C16162 * C6633 - C16161 * C6636 + C47992 * C6639 +
            C16159 * C1725 - C16160 * C1722 - C16159 * C1726 + C16155 * C1731) *
               C47633 * C47994 +
           (C16161 * C1180 - C16162 * C1171 - C16161 * C1181 + C47992 * C1189 +
            C16159 * C1178 - C16160 * C1170 - C16159 * C1179 + C16155 * C1188) *
               C47633 * C10559) *
              C47704 * C1165 +
          ((C16159 * C1180 - C16160 * C1171 - C16159 * C1181 + C16155 * C1189 +
            C16161 * C5991 - C16162 * C5989 - C16161 * C5992 + C47992 * C5995) *
               C47633 * C10559 +
           (C16159 * C6635 - C16160 * C6633 - C16159 * C6636 + C16155 * C6639 +
            C16161 * C23076 - C16162 * C23075 - C16161 * C23077 +
            C47992 * C23078) *
               C47633 * C47994) *
              C47704 * C1166) *
         C47658) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C16159 * C122 - C16160 * C115 - C16159 * C123 + C16155 * C136 +
             C16161 * C308 - C16162 * C296 - C16161 * C309 + C47992 * C326) *
                C47633 * C10559 +
            (C26342 + C26343) * C47633 * C47994) *
               C48014 -
           ((C26344 + C26345) * C47633 * C47994 +
            (C26343 + C26342) * C47633 * C10559) *
               C48003 +
           ((C26345 + C26344) * C47633 * C10559 +
            (C16159 * C2034 - C16160 * C2026 - C16159 * C2035 + C16155 * C2044 +
             C16161 * C2433 - C16162 * C2430 - C16161 * C2434 +
             C47992 * C2439) *
                C47633 * C47994) *
               C47977) *
              C1094 +
          (((C26812 + C26813) * C47633 * C10559 +
            (C27224 + C27225) * C47633 * C47994) *
               C48003 -
           ((C26813 + C26812) * C47633 * C47994 +
            (C16161 * C310 - C16162 * C297 - C16161 * C311 + C47992 * C327 +
             C16159 * C308 - C16160 * C296 - C16159 * C309 + C16155 * C326) *
                C47633 * C10559) *
               C48014 -
           ((C16161 * C7507 - C16162 * C7505 - C16161 * C7508 + C47992 * C7511 +
             C16159 * C2433 - C16160 * C2430 - C16159 * C2434 +
             C16155 * C2439) *
                C47633 * C47994 +
            (C27225 + C27224) * C47633 * C10559) *
               C47977) *
              C1095 +
          (((C16159 * C310 - C16160 * C297 - C16159 * C311 + C16155 * C327 +
             C16161 * C1178 - C16162 * C1170 - C16161 * C1179 +
             C47992 * C1188) *
                C47633 * C10559 +
            (C27226 + C27227) * C47633 * C47994) *
               C48014 -
           ((C27228 + C27229) * C47633 * C47994 +
            (C27227 + C27226) * C47633 * C10559) *
               C48003 +
           ((C27229 + C27228) * C47633 * C10559 +
            (C16159 * C7507 - C16160 * C7505 - C16159 * C7508 + C16155 * C7511 +
             C16161 * C23708 - C16162 * C23707 - C16161 * C23709 +
             C47992 * C23710) *
                C47633 * C47994) *
               C47977) *
              C47974) *
         C47658) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C16159 * C122 - C16160 * C115 - C16159 * C123 + C16155 * C136 +
             C16161 * C308 - C16162 * C296 - C16161 * C309 + C47992 * C326) *
                C47633 * C10559 +
            (C26342 + C26343) * C47633 * C47994) *
               C1844 -
           ((C26344 + C26345) * C47633 * C47994 +
            (C26343 + C26342) * C47633 * C10559) *
               C1845 +
           ((C26345 + C26344) * C47633 * C10559 +
            (C16159 * C2034 - C16160 * C2026 - C16159 * C2035 + C16155 * C2044 +
             C16161 * C2433 - C16162 * C2430 - C16161 * C2434 +
             C47992 * C2439) *
                C47633 * C47994) *
               C47977) *
              C47686 * C48010 +
          (((C16617 + C16616) * C47633 * C10559 +
            (C16618 + C16619) * C47633 * C47994) *
               C1845 -
           ((C16616 + C16617) * C47633 * C47994 +
            (C16213 + C16212) * C47633 * C10559) *
               C1844 -
           ((C18714 + C18715) * C47633 * C47994 +
            (C16619 + C16618) * C47633 * C10559) *
               C47977) *
              C47686 * C47997 +
          (((C16215 + C16214) * C47633 * C10559 +
            (C16620 + C16621) * C47633 * C47994) *
               C1844 -
           ((C16622 + C16623) * C47633 * C47994 +
            (C16621 + C16620) * C47633 * C10559) *
               C1845 +
           ((C16623 + C16622) * C47633 * C10559 +
            (C16159 * C2030 - C16160 * C2024 - C16159 * C2031 + C16155 * C2042 +
             C16161 * C2437 - C16162 * C2432 - C16161 * C2438 +
             C47992 * C2441) *
                C47633 * C47994) *
               C47977) *
              C47686 * C47968)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C16159 * C122 - C16160 * C115 - C16159 * C123 + C16155 * C136 +
             C16161 * C308 - C16162 * C296 - C16161 * C309 + C47992 * C326) *
                C47633 * C10559 +
            (C26342 + C26343) * C47633 * C47994) *
               C1844 -
           ((C26344 + C26345) * C47633 * C47994 +
            (C26343 + C26342) * C47633 * C10559) *
               C1845 +
           ((C26345 + C26344) * C47633 * C10559 +
            (C16159 * C2034 - C16160 * C2026 - C16159 * C2035 + C16155 * C2044 +
             C16161 * C2433 - C16162 * C2430 - C16161 * C2434 +
             C47992 * C2439) *
                C47633 * C47994) *
               C47977) *
              C48013 +
          (((C26812 + C26813) * C47633 * C10559 +
            (C27224 + C27225) * C47633 * C47994) *
               C1845 -
           ((C26813 + C26812) * C47633 * C47994 +
            (C16161 * C310 - C16162 * C297 - C16161 * C311 + C47992 * C327 +
             C16159 * C308 - C16160 * C296 - C16159 * C309 + C16155 * C326) *
                C47633 * C10559) *
               C1844 -
           ((C16161 * C7507 - C16162 * C7505 - C16161 * C7508 + C47992 * C7511 +
             C16159 * C2433 - C16160 * C2430 - C16159 * C2434 +
             C16155 * C2439) *
                C47633 * C47994 +
            (C27225 + C27224) * C47633 * C10559) *
               C47977) *
              C48001 +
          (((C16159 * C310 - C16160 * C297 - C16159 * C311 + C16155 * C327 +
             C16161 * C1178 - C16162 * C1170 - C16161 * C1179 +
             C47992 * C1188) *
                C47633 * C10559 +
            (C27226 + C27227) * C47633 * C47994) *
               C1844 -
           ((C27228 + C27229) * C47633 * C47994 +
            (C27227 + C27226) * C47633 * C10559) *
               C1845 +
           ((C27229 + C27228) * C47633 * C10559 +
            (C16159 * C7507 - C16160 * C7505 - C16159 * C7508 + C16155 * C7511 +
             C16161 * C23708 - C16162 * C23707 - C16161 * C23709 +
             C47992 * C23710) *
                C47633 * C47994) *
               C47977) *
              C47974) *
         C47658) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C16159 * C122 - C16160 * C115 - C16159 * C123 + C16155 * C136 +
            C16161 * C308 - C16162 * C296 - C16161 * C309 + C47992 * C326) *
               C47633 * C10559 +
           (C26342 + C26343) * C47633 * C47994) *
              C2019 -
          ((C26344 + C26345) * C47633 * C47994 +
           (C26343 + C26342) * C47633 * C10559) *
              C2020 +
          ((C26345 + C26344) * C47633 * C10559 +
           (C28100 + C28101) * C47633 * C47994) *
              C2021 -
          ((C28102 + C28103) * C47633 * C47994 +
           (C28101 + C28100) * C47633 * C10559) *
              C2022 +
          ((C28103 + C28102) * C47633 * C10559 +
           (C16159 * C12604 - C16160 * C12602 - C16159 * C12605 +
            C16155 * C12608 + C16161 * C28072 - C16162 * C28071 -
            C16161 * C28073 + C47992 * C28074) *
               C47633 * C47994) *
              C2023) *
         C47686 * C47658) /
            (p * q * std::sqrt(p + q));
    d2ee[138] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C16159 * C122 - C16160 * C115 - C16159 * C123 + C16155 * C136 +
              C16161 * C308 - C16162 * C296 - C16161 * C309 + C47992 * C326) *
                 C47633 * C10559 +
             (C26342 + C26343) * C47633 * C47994) *
                C47943 -
            ((C26344 + C26345) * C47633 * C47994 +
             (C26343 + C26342) * C47633 * C10559) *
                C47791) *
               C1094 +
           (((C26812 + C26813) * C47633 * C10559 +
             (C27224 + C27225) * C47633 * C47994) *
                C47791 -
            ((C26813 + C26812) * C47633 * C47994 +
             (C16161 * C310 - C16162 * C297 - C16161 * C311 + C47992 * C327 +
              C16159 * C308 - C16160 * C296 - C16159 * C309 + C16155 * C326) *
                 C47633 * C10559) *
                C47943) *
               C1095 +
           (((C16159 * C310 - C16160 * C297 - C16159 * C311 + C16155 * C327 +
              C16161 * C1178 - C16162 * C1170 - C16161 * C1179 +
              C47992 * C1188) *
                 C47633 * C10559 +
             (C27226 + C27227) * C47633 * C47994) *
                C47943 -
            ((C27228 + C27229) * C47633 * C47994 +
             (C27227 + C27226) * C47633 * C10559) *
                C47791) *
               C47974) *
              C47928 +
          ((((C16617 + C16616) * C47633 * C10559 +
             (C16618 + C16619) * C47633 * C47994) *
                C47791 -
            ((C16616 + C16617) * C47633 * C47994 +
             (C16213 + C16212) * C47633 * C10559) *
                C47943) *
               C1094 +
           (((C16415 + C16414) * C47633 * C10559 +
             (C17130 + C17131) * C47633 * C47994) *
                C47943 -
            ((C18570 + C18571) * C47633 * C47994 +
             (C17131 + C17130) * C47633 * C10559) *
                C47791) *
               C1095 +
           (((C17859 + C17858) * C47633 * C10559 +
             (C16159 * C1325 - C16160 * C1309 - C16159 * C1326 +
              C16155 * C1336 + C16161 * C6147 - C16162 * C6144 -
              C16161 * C6148 + C47992 * C6150) *
                 C47633 * C47994) *
                C47791 -
            ((C17858 + C17859) * C47633 * C47994 +
             (C16417 + C16416) * C47633 * C10559) *
                C47943) *
               C47974) *
              C47669)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C16159 * C122 - C16160 * C115 - C16159 * C123 + C16155 * C136 +
             C16161 * C308 - C16162 * C296 - C16161 * C309 + C47992 * C326) *
                C47633 * C10559 +
            (C26342 + C26343) * C47633 * C47994) *
               C47943 -
           ((C26344 + C26345) * C47633 * C47994 +
            (C26343 + C26342) * C47633 * C10559) *
               C47791) *
              C47686 * C671 +
          (((C16617 + C16616) * C47633 * C10559 +
            (C16618 + C16619) * C47633 * C47994) *
               C47791 -
           ((C16616 + C16617) * C47633 * C47994 +
            (C16213 + C16212) * C47633 * C10559) *
               C47943) *
              C47686 * C672 +
          (((C16215 + C16214) * C47633 * C10559 +
            (C16620 + C16621) * C47633 * C47994) *
               C47943 -
           ((C16622 + C16623) * C47633 * C47994 +
            (C16621 + C16620) * C47633 * C10559) *
               C47791) *
              C47686 * C673 +
          (((C16911 + C16910) * C47633 * C10559 +
            (C16159 * C513 - C16160 * C496 - C16159 * C514 + C16155 * C526 +
             C16161 * C2195 - C16162 * C2194 - C16161 * C2196 +
             C47992 * C2197) *
                C47633 * C47994) *
               C47791 -
           ((C16910 + C16911) * C47633 * C47994 +
            (C16217 + C16216) * C47633 * C10559) *
               C47943) *
              C47686 * C47978)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C16159 * C122 - C16160 * C115 - C16159 * C123 + C16155 * C136 +
             C16161 * C308 - C16162 * C296 - C16161 * C309 + C47992 * C326) *
                C47633 * C10559 +
            (C26342 + C26343) * C47633 * C47994) *
               C2310 -
           ((C26344 + C26345) * C47633 * C47994 +
            (C26343 + C26342) * C47633 * C10559) *
               C2311 +
           ((C26345 + C26344) * C47633 * C10559 +
            (C28100 + C28101) * C47633 * C47994) *
               C2312 -
           ((C28102 + C28103) * C47633 * C47994 +
            (C28101 + C28100) * C47633 * C10559) *
               C47990) *
              C47686 * C47928 +
          (((C16617 + C16616) * C47633 * C10559 +
            (C16618 + C16619) * C47633 * C47994) *
               C2311 -
           ((C16616 + C16617) * C47633 * C47994 +
            (C16213 + C16212) * C47633 * C10559) *
               C2310 -
           ((C18714 + C18715) * C47633 * C47994 +
            (C16619 + C16618) * C47633 * C10559) *
               C2312 +
           ((C18715 + C18714) * C47633 * C10559 +
            (C16159 * C2038 - C16160 * C2028 - C16159 * C2039 + C16155 * C2046 +
             C16161 * C7019 - C16162 * C7016 - C16161 * C7020 +
             C47992 * C7022) *
                C47633 * C47994) *
               C47990) *
              C47686 * C47669)) /
            (p * q * std::sqrt(p + q));
    d2ee[139] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C16159 * C122 - C16160 * C115 - C16159 * C123 + C16155 * C136 +
             C16161 * C308 - C16162 * C296 - C16161 * C309 + C47992 * C326) *
                C47633 * C10559 +
            (C16159 * C503 - C16160 * C491 - C16159 * C504 + C16155 * C521 +
             C16161 * C948 - C16162 * C943 - C16161 * C949 + C47992 * C958) *
                C47633 * C47994) *
               C47704 * C48013 -
           ((C16161 * C1321 - C16162 * C1307 - C16161 * C1322 + C47992 * C1334 +
             C16159 * C948 - C16160 * C943 - C16159 * C949 + C16155 * C958) *
                C47633 * C47994 +
            (C16161 * C310 - C16162 * C297 - C16161 * C311 + C47992 * C327 +
             C16159 * C308 - C16160 * C296 - C16159 * C309 + C16155 * C326) *
                C47633 * C10559) *
               C47704 * C48001 +
           ((C16159 * C310 - C16160 * C297 - C16159 * C311 + C16155 * C327 +
             C16161 * C1178 - C16162 * C1170 - C16161 * C1179 +
             C47992 * C1188) *
                C47633 * C10559 +
            (C16159 * C1321 - C16160 * C1307 - C16159 * C1322 + C16155 * C1334 +
             C16161 * C1725 - C16162 * C1722 - C16161 * C1726 +
             C47992 * C1731) *
                C47633 * C47994) *
               C47704 * C47974) *
              C291 +
          (((C16415 + C16414) * C47633 * C10559 +
            (C17130 + C17131) * C47633 * C47994) *
               C47704 * C48001 -
           ((C16616 + C16617) * C47633 * C47994 +
            (C16213 + C16212) * C47633 * C10559) *
               C47704 * C48013 -
           ((C17858 + C17859) * C47633 * C47994 +
            (C16417 + C16416) * C47633 * C10559) *
               C47704 * C47974) *
              C292 +
          (((C16215 + C16214) * C47633 * C10559 +
            (C16620 + C16621) * C47633 * C47994) *
               C47704 * C48013 -
           ((C17132 + C17133) * C47633 * C47994 +
            (C16419 + C16418) * C47633 * C10559) *
               C47704 * C48001 +
           ((C16421 + C16420) * C47633 * C10559 +
            (C16159 * C1317 - C16160 * C1305 - C16159 * C1318 + C16155 * C1332 +
             C16161 * C1729 - C16162 * C1724 - C16161 * C1730 +
             C47992 * C1733) *
                C47633 * C47994) *
               C47704 * C47974) *
              C47968)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C16159 * C122 - C16160 * C115 - C16159 * C123 + C16155 * C136 +
            C16161 * C308 - C16162 * C296 - C16161 * C309 + C47992 * C326) *
               C47633 * C10559 +
           (C16159 * C503 - C16160 * C491 - C16159 * C504 + C16155 * C521 +
            C16161 * C948 - C16162 * C943 - C16161 * C949 + C47992 * C958) *
               C47633 * C47994) *
              C47704 * C47686 * C108 -
          ((C16616 + C16617) * C47633 * C47994 +
           (C16213 + C16212) * C47633 * C10559) *
              C47704 * C47686 * C109 +
          ((C16215 + C16214) * C47633 * C10559 +
           (C16620 + C16621) * C47633 * C47994) *
              C47704 * C47686 * C110 -
          ((C16910 + C16911) * C47633 * C47994 +
           (C16217 + C16216) * C47633 * C10559) *
              C47704 * C47686 * C111 +
          ((C16219 + C16218) * C47633 * C10559 +
           (C16159 * C515 - C16160 * C497 - C16159 * C516 + C16155 * C527 +
            C16161 * C956 - C16162 * C947 - C16161 * C957 + C47992 * C962) *
               C47633 * C47994) *
              C47704 * C47686 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C16159 * C122 - C16160 * C115 - C16159 * C123 + C16155 * C136 +
             C16161 * C308 - C16162 * C296 - C16161 * C309 + C47992 * C326) *
                C47633 * C10559 +
            (C26342 + C26343) * C47633 * C47994) *
               C47704 * C1094 -
           ((C26813 + C26812) * C47633 * C47994 +
            (C16161 * C310 - C16162 * C297 - C16161 * C311 + C47992 * C327 +
             C16159 * C308 - C16160 * C296 - C16159 * C309 + C16155 * C326) *
                C47633 * C10559) *
               C47704 * C1095 +
           ((C16159 * C310 - C16160 * C297 - C16159 * C311 + C16155 * C327 +
             C16161 * C1178 - C16162 * C1170 - C16161 * C1179 +
             C47992 * C1188) *
                C47633 * C10559 +
            (C16159 * C1321 - C16160 * C1307 - C16159 * C1322 + C16155 * C1334 +
             C16161 * C1725 - C16162 * C1722 - C16161 * C1726 +
             C47992 * C1731) *
                C47633 * C47994) *
               C47704 * C47974) *
              C48010 +
          (((C16415 + C16414) * C47633 * C10559 +
            (C17130 + C17131) * C47633 * C47994) *
               C47704 * C1095 -
           ((C16616 + C16617) * C47633 * C47994 +
            (C16213 + C16212) * C47633 * C10559) *
               C47704 * C1094 -
           ((C17858 + C17859) * C47633 * C47994 +
            (C16417 + C16416) * C47633 * C10559) *
               C47704 * C47974) *
              C47997 +
          (((C16215 + C16214) * C47633 * C10559 +
            (C16620 + C16621) * C47633 * C47994) *
               C47704 * C1094 -
           ((C17132 + C17133) * C47633 * C47994 +
            (C16419 + C16418) * C47633 * C10559) *
               C47704 * C1095 +
           ((C16421 + C16420) * C47633 * C10559 +
            (C16159 * C1317 - C16160 * C1305 - C16159 * C1318 + C16155 * C1332 +
             C16161 * C1729 - C16162 * C1724 - C16161 * C1730 +
             C47992 * C1733) *
                C47633 * C47994) *
               C47704 * C47974) *
              C47968)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C16159 * C122 - C16160 * C115 - C16159 * C123 + C16155 * C136 +
            C16161 * C308 - C16162 * C296 - C16161 * C309 + C47992 * C326) *
               C47633 * C10559 +
           (C26342 + C26343) * C47633 * C47994) *
              C47704 * C1162 -
          ((C26813 + C26812) * C47633 * C47994 +
           (C16161 * C310 - C16162 * C297 - C16161 * C311 + C47992 * C327 +
            C16159 * C308 - C16160 * C296 - C16159 * C309 + C16155 * C326) *
               C47633 * C10559) *
              C47704 * C1163 +
          ((C16159 * C310 - C16160 * C297 - C16159 * C311 + C16155 * C327 +
            C16161 * C1178 - C16162 * C1170 - C16161 * C1179 + C47992 * C1188) *
               C47633 * C10559 +
           (C16159 * C1321 - C16160 * C1307 - C16159 * C1322 + C16155 * C1334 +
            C16161 * C1725 - C16162 * C1722 - C16161 * C1726 + C47992 * C1731) *
               C47633 * C47994) *
              C47704 * C1164 -
          ((C16161 * C6635 - C16162 * C6633 - C16161 * C6636 + C47992 * C6639 +
            C16159 * C1725 - C16160 * C1722 - C16159 * C1726 + C16155 * C1731) *
               C47633 * C47994 +
           (C16161 * C1180 - C16162 * C1171 - C16161 * C1181 + C47992 * C1189 +
            C16159 * C1178 - C16160 * C1170 - C16159 * C1179 + C16155 * C1188) *
               C47633 * C10559) *
              C47704 * C1165 +
          ((C16159 * C1180 - C16160 * C1171 - C16159 * C1181 + C16155 * C1189 +
            C16161 * C5991 - C16162 * C5989 - C16161 * C5992 + C47992 * C5995) *
               C47633 * C10559 +
           (C16159 * C6635 - C16160 * C6633 - C16159 * C6636 + C16155 * C6639 +
            C16161 * C23076 - C16162 * C23075 - C16161 * C23077 +
            C47992 * C23078) *
               C47633 * C47994) *
              C47704 * C1166) *
         C47658) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C16159 * C122 - C16160 * C115 - C16159 * C123 + C16155 * C136 +
             C16161 * C308 - C16162 * C296 - C16161 * C309 + C47992 * C326) *
                C47633 * C10559 +
            (C26342 + C26343) * C47633 * C47994) *
               C1844 -
           ((C26344 + C26345) * C47633 * C47994 +
            (C26343 + C26342) * C47633 * C10559) *
               C1845 +
           ((C26345 + C26344) * C47633 * C10559 +
            (C16159 * C2034 - C16160 * C2026 - C16159 * C2035 + C16155 * C2044 +
             C16161 * C2433 - C16162 * C2430 - C16161 * C2434 +
             C47992 * C2439) *
                C47633 * C47994) *
               C47977) *
              C47686 * C48010 +
          (((C16617 + C16616) * C47633 * C10559 +
            (C16618 + C16619) * C47633 * C47994) *
               C1845 -
           ((C16616 + C16617) * C47633 * C47994 +
            (C16213 + C16212) * C47633 * C10559) *
               C1844 -
           ((C18714 + C18715) * C47633 * C47994 +
            (C16619 + C16618) * C47633 * C10559) *
               C47977) *
              C47686 * C47997 +
          (((C16215 + C16214) * C47633 * C10559 +
            (C16620 + C16621) * C47633 * C47994) *
               C1844 -
           ((C16622 + C16623) * C47633 * C47994 +
            (C16621 + C16620) * C47633 * C10559) *
               C1845 +
           ((C16623 + C16622) * C47633 * C10559 +
            (C16159 * C2030 - C16160 * C2024 - C16159 * C2031 + C16155 * C2042 +
             C16161 * C2437 - C16162 * C2432 - C16161 * C2438 +
             C47992 * C2441) *
                C47633 * C47994) *
               C47977) *
              C47686 * C47968)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C16159 * C122 - C16160 * C115 - C16159 * C123 + C16155 * C136 +
             C16161 * C308 - C16162 * C296 - C16161 * C309 + C47992 * C326) *
                C47633 * C10559 +
            (C26342 + C26343) * C47633 * C47994) *
               C1844 -
           ((C26344 + C26345) * C47633 * C47994 +
            (C26343 + C26342) * C47633 * C10559) *
               C1845 +
           ((C26345 + C26344) * C47633 * C10559 +
            (C16159 * C2034 - C16160 * C2026 - C16159 * C2035 + C16155 * C2044 +
             C16161 * C2433 - C16162 * C2430 - C16161 * C2434 +
             C47992 * C2439) *
                C47633 * C47994) *
               C47977) *
              C48013 +
          (((C26812 + C26813) * C47633 * C10559 +
            (C27224 + C27225) * C47633 * C47994) *
               C1845 -
           ((C26813 + C26812) * C47633 * C47994 +
            (C16161 * C310 - C16162 * C297 - C16161 * C311 + C47992 * C327 +
             C16159 * C308 - C16160 * C296 - C16159 * C309 + C16155 * C326) *
                C47633 * C10559) *
               C1844 -
           ((C16161 * C7507 - C16162 * C7505 - C16161 * C7508 + C47992 * C7511 +
             C16159 * C2433 - C16160 * C2430 - C16159 * C2434 +
             C16155 * C2439) *
                C47633 * C47994 +
            (C27225 + C27224) * C47633 * C10559) *
               C47977) *
              C48001 +
          (((C16159 * C310 - C16160 * C297 - C16159 * C311 + C16155 * C327 +
             C16161 * C1178 - C16162 * C1170 - C16161 * C1179 +
             C47992 * C1188) *
                C47633 * C10559 +
            (C27226 + C27227) * C47633 * C47994) *
               C1844 -
           ((C27228 + C27229) * C47633 * C47994 +
            (C27227 + C27226) * C47633 * C10559) *
               C1845 +
           ((C27229 + C27228) * C47633 * C10559 +
            (C16159 * C7507 - C16160 * C7505 - C16159 * C7508 + C16155 * C7511 +
             C16161 * C23708 - C16162 * C23707 - C16161 * C23709 +
             C47992 * C23710) *
                C47633 * C47994) *
               C47977) *
              C47974) *
         C47658) /
            (p * q * std::sqrt(p + q));
    d2ee[140] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C16159 * C122 - C16160 * C115 - C16159 * C123 + C16155 * C136 +
              C16161 * C308 - C16162 * C296 - C16161 * C309 + C47992 * C326) *
                 C47633 * C10559 +
             (C26342 + C26343) * C47633 * C47994) *
                C3302 -
            ((C26344 + C26345) * C47633 * C47994 +
             (C26343 + C26342) * C47633 * C10559) *
                C47791) *
               C47942 +
           (((C26812 + C26813) * C47633 * C10559 +
             (C27224 + C27225) * C47633 * C47994) *
                C47791 -
            ((C26813 + C26812) * C47633 * C47994 +
             (C16161 * C310 - C16162 * C297 - C16161 * C311 + C47992 * C327 +
              C16159 * C308 - C16160 * C296 - C16159 * C309 + C16155 * C326) *
                 C47633 * C10559) *
                C3302) *
               C47749) *
              C47663 +
          ((((C16617 + C16616) * C47633 * C10559 +
             (C16618 + C16619) * C47633 * C47994) *
                C47791 -
            ((C16616 + C16617) * C47633 * C47994 +
             (C16213 + C16212) * C47633 * C10559) *
                C3302) *
               C47942 +
           (((C16415 + C16414) * C47633 * C10559 +
             (C17130 + C17131) * C47633 * C47994) *
                C3302 -
            ((C18570 + C18571) * C47633 * C47994 +
             (C17131 + C17130) * C47633 * C10559) *
                C47791) *
               C47749) *
              C47672 +
          ((((C16215 + C16214) * C47633 * C10559 +
             (C16620 + C16621) * C47633 * C47994) *
                C3302 -
            ((C16622 + C16623) * C47633 * C47994 +
             (C16621 + C16620) * C47633 * C10559) *
                C47791) *
               C47942 +
           (((C17133 + C17132) * C47633 * C10559 +
             (C16159 * C1311 - C16160 * C1302 - C16159 * C1312 +
              C16155 * C1329 + C16161 * C1327 - C16162 * C1310 -
              C16161 * C1328 + C47992 * C1337) *
                 C47633 * C47994) *
                C47791 -
            ((C17132 + C17133) * C47633 * C47994 +
             (C16419 + C16418) * C47633 * C10559) *
                C3302) *
               C47749) *
              C2911)) /
        (p * q * std::sqrt(p + q));
    d2ee[141] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C16159 * C122 - C16160 * C115 - C16159 * C123 + C16155 * C136 +
              C16161 * C308 - C16162 * C296 - C16161 * C309 + C47992 * C326) *
                 C47633 * C10559 +
             (C26342 + C26343) * C47633 * C47994) *
                C47787 -
            ((C26344 + C26345) * C47633 * C47994 +
             (C26343 + C26342) * C47633 * C10559) *
                C47794 +
            ((C26345 + C26344) * C47633 * C10559 +
             (C28100 + C28101) * C47633 * C47994) *
                C3810) *
               C47942 +
           (((C26812 + C26813) * C47633 * C10559 +
             (C27224 + C27225) * C47633 * C47994) *
                C47794 -
            ((C26813 + C26812) * C47633 * C47994 +
             (C16161 * C310 - C16162 * C297 - C16161 * C311 + C47992 * C327 +
              C16159 * C308 - C16160 * C296 - C16159 * C309 + C16155 * C326) *
                 C47633 * C10559) *
                C47787 -
            ((C28570 + C28571) * C47633 * C47994 +
             (C27225 + C27224) * C47633 * C10559) *
                C3810) *
               C47749) *
              C2648 +
          ((((C16617 + C16616) * C47633 * C10559 +
             (C16618 + C16619) * C47633 * C47994) *
                C47794 -
            ((C16616 + C16617) * C47633 * C47994 +
             (C16213 + C16212) * C47633 * C10559) *
                C47787 -
            ((C18714 + C18715) * C47633 * C47994 +
             (C16619 + C16618) * C47633 * C10559) *
                C3810) *
               C47942 +
           (((C16415 + C16414) * C47633 * C10559 +
             (C17130 + C17131) * C47633 * C47994) *
                C47787 -
            ((C18570 + C18571) * C47633 * C47994 +
             (C17131 + C17130) * C47633 * C10559) *
                C47794 +
            ((C18571 + C18570) * C47633 * C10559 +
             (C16159 * C2435 - C16160 * C2431 - C16159 * C2436 +
              C16155 * C2440 + C16161 * C7509 - C16162 * C7506 -
              C16161 * C7510 + C47992 * C7512) *
                 C47633 * C47994) *
                C3810) *
               C47749) *
              C47669)) /
        (p * q * std::sqrt(p + q));
    d2ee[142] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C16159 * C122 - C16160 * C115 - C16159 * C123 + C16155 * C136 +
              C16161 * C308 - C16162 * C296 - C16161 * C309 + C47992 * C326) *
                 C47633 * C10559 +
             (C26342 + C26343) * C47633 * C47994) *
                C3302 -
            ((C26344 + C26345) * C47633 * C47994 +
             (C26343 + C26342) * C47633 * C10559) *
                C47791) *
               C48013 +
           (((C26812 + C26813) * C47633 * C10559 +
             (C27224 + C27225) * C47633 * C47994) *
                C47791 -
            ((C26813 + C26812) * C47633 * C47994 +
             (C16161 * C310 - C16162 * C297 - C16161 * C311 + C47992 * C327 +
              C16159 * C308 - C16160 * C296 - C16159 * C309 + C16155 * C326) *
                 C47633 * C10559) *
                C3302) *
               C48001 +
           (((C16159 * C310 - C16160 * C297 - C16159 * C311 + C16155 * C327 +
              C16161 * C1178 - C16162 * C1170 - C16161 * C1179 +
              C47992 * C1188) *
                 C47633 * C10559 +
             (C27226 + C27227) * C47633 * C47994) *
                C3302 -
            ((C27228 + C27229) * C47633 * C47994 +
             (C27227 + C27226) * C47633 * C10559) *
                C47791) *
               C47974) *
              C2648 +
          ((((C16617 + C16616) * C47633 * C10559 +
             (C16618 + C16619) * C47633 * C47994) *
                C47791 -
            ((C16616 + C16617) * C47633 * C47994 +
             (C16213 + C16212) * C47633 * C10559) *
                C3302) *
               C48013 +
           (((C16415 + C16414) * C47633 * C10559 +
             (C17130 + C17131) * C47633 * C47994) *
                C3302 -
            ((C18570 + C18571) * C47633 * C47994 +
             (C17131 + C17130) * C47633 * C10559) *
                C47791) *
               C48001 +
           (((C17859 + C17858) * C47633 * C10559 +
             (C16159 * C1325 - C16160 * C1309 - C16159 * C1326 +
              C16155 * C1336 + C16161 * C6147 - C16162 * C6144 -
              C16161 * C6148 + C47992 * C6150) *
                 C47633 * C47994) *
                C47791 -
            ((C17858 + C17859) * C47633 * C47994 +
             (C16417 + C16416) * C47633 * C10559) *
                C3302) *
               C47974) *
              C47669)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C16159 * C122 - C16160 * C115 - C16159 * C123 + C16155 * C136 +
             C16161 * C308 - C16162 * C296 - C16161 * C309 + C47992 * C326) *
                C47633 * C10559 +
            (C26342 + C26343) * C47633 * C47994) *
               C3302 -
           ((C26344 + C26345) * C47633 * C47994 +
            (C26343 + C26342) * C47633 * C10559) *
               C47791) *
              C47686 * C48019 +
          (((C16617 + C16616) * C47633 * C10559 +
            (C16618 + C16619) * C47633 * C47994) *
               C47791 -
           ((C16616 + C16617) * C47633 * C47994 +
            (C16213 + C16212) * C47633 * C10559) *
               C3302) *
              C47686 * C48012 +
          (((C16215 + C16214) * C47633 * C10559 +
            (C16620 + C16621) * C47633 * C47994) *
               C3302 -
           ((C16622 + C16623) * C47633 * C47994 +
            (C16621 + C16620) * C47633 * C10559) *
               C47791) *
              C47686 * C47999 +
          (((C16911 + C16910) * C47633 * C10559 +
            (C16159 * C513 - C16160 * C496 - C16159 * C514 + C16155 * C526 +
             C16161 * C2195 - C16162 * C2194 - C16161 * C2196 +
             C47992 * C2197) *
                C47633 * C47994) *
               C47791 -
           ((C16910 + C16911) * C47633 * C47994 +
            (C16217 + C16216) * C47633 * C10559) *
               C3302) *
              C47686 * C47978)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C16159 * C122 - C16160 * C115 - C16159 * C123 + C16155 * C136 +
             C16161 * C308 - C16162 * C296 - C16161 * C309 + C47992 * C326) *
                C47633 * C10559 +
            (C26342 + C26343) * C47633 * C47994) *
               C48021 -
           ((C26344 + C26345) * C47633 * C47994 +
            (C26343 + C26342) * C47633 * C10559) *
               C48018 +
           ((C26345 + C26344) * C47633 * C10559 +
            (C28100 + C28101) * C47633 * C47994) *
               C48009 -
           ((C28102 + C28103) * C47633 * C47994 +
            (C28101 + C28100) * C47633 * C10559) *
               C47990) *
              C47686 * C2648 +
          (((C16617 + C16616) * C47633 * C10559 +
            (C16618 + C16619) * C47633 * C47994) *
               C48018 -
           ((C16616 + C16617) * C47633 * C47994 +
            (C16213 + C16212) * C47633 * C10559) *
               C48021 -
           ((C18714 + C18715) * C47633 * C47994 +
            (C16619 + C16618) * C47633 * C10559) *
               C48009 +
           ((C18715 + C18714) * C47633 * C10559 +
            (C16159 * C2038 - C16160 * C2028 - C16159 * C2039 + C16155 * C2046 +
             C16161 * C7019 - C16162 * C7016 - C16161 * C7020 +
             C47992 * C7022) *
                C47633 * C47994) *
               C47990) *
              C47686 * C47669)) /
            (p * q * std::sqrt(p + q));
    d2ee[143] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C16159 * C122 - C16160 * C115 - C16159 * C123 + C16155 * C136 +
             C16161 * C308 - C16162 * C296 - C16161 * C309 + C47992 * C326) *
                C47633 * C10559 +
            (C26342 + C26343) * C47633 * C47994) *
               C47787 -
           ((C26344 + C26345) * C47633 * C47994 +
            (C26343 + C26342) * C47633 * C10559) *
               C47794 +
           ((C26345 + C26344) * C47633 * C10559 +
            (C28100 + C28101) * C47633 * C47994) *
               C3810) *
              C47686 * C47663 +
          (((C16617 + C16616) * C47633 * C10559 +
            (C16618 + C16619) * C47633 * C47994) *
               C47794 -
           ((C16616 + C16617) * C47633 * C47994 +
            (C16213 + C16212) * C47633 * C10559) *
               C47787 -
           ((C18714 + C18715) * C47633 * C47994 +
            (C16619 + C16618) * C47633 * C10559) *
               C3810) *
              C47686 * C47672 +
          (((C16215 + C16214) * C47633 * C10559 +
            (C16620 + C16621) * C47633 * C47994) *
               C47787 -
           ((C16622 + C16623) * C47633 * C47994 +
            (C16621 + C16620) * C47633 * C10559) *
               C47794 +
           ((C16623 + C16622) * C47633 * C10559 +
            (C16159 * C2030 - C16160 * C2024 - C16159 * C2031 + C16155 * C2042 +
             C16161 * C2437 - C16162 * C2432 - C16161 * C2438 +
             C47992 * C2441) *
                C47633 * C47994) *
               C3810) *
              C47686 * C2911)) /
        (p * q * std::sqrt(p + q));
    d2ee[144] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C16159 * C122 - C16160 * C115 - C16159 * C123 + C16155 * C136 +
             C16161 * C308 - C16162 * C296 - C16161 * C309 + C47992 * C326) *
                C47633 * C10559 +
            (C26342 + C26343) * C47633 * C47994) *
               C3302 -
           ((C26344 + C26345) * C47633 * C47994 +
            (C26343 + C26342) * C47633 * C10559) *
               C47791) *
              C47686 * C48019 +
          (((C16617 + C16616) * C47633 * C10559 +
            (C16618 + C16619) * C47633 * C47994) *
               C47791 -
           ((C16616 + C16617) * C47633 * C47994 +
            (C16213 + C16212) * C47633 * C10559) *
               C3302) *
              C47686 * C48012 +
          (((C16215 + C16214) * C47633 * C10559 +
            (C16620 + C16621) * C47633 * C47994) *
               C3302 -
           ((C16622 + C16623) * C47633 * C47994 +
            (C16621 + C16620) * C47633 * C10559) *
               C47791) *
              C47686 * C47999 +
          (((C16911 + C16910) * C47633 * C10559 +
            (C16159 * C513 - C16160 * C496 - C16159 * C514 + C16155 * C526 +
             C16161 * C2195 - C16162 * C2194 - C16161 * C2196 +
             C47992 * C2197) *
                C47633 * C47994) *
               C47791 -
           ((C16910 + C16911) * C47633 * C47994 +
            (C16217 + C16216) * C47633 * C10559) *
               C3302) *
              C47686 * C47978)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C16159 * C122 - C16160 * C115 - C16159 * C123 + C16155 * C136 +
              C16161 * C308 - C16162 * C296 - C16161 * C309 + C47992 * C326) *
                 C47633 * C10559 +
             (C26342 + C26343) * C47633 * C47994) *
                C3302 -
            ((C26344 + C26345) * C47633 * C47994 +
             (C26343 + C26342) * C47633 * C10559) *
                C47791) *
               C48013 +
           (((C26812 + C26813) * C47633 * C10559 +
             (C27224 + C27225) * C47633 * C47994) *
                C47791 -
            ((C26813 + C26812) * C47633 * C47994 +
             (C16161 * C310 - C16162 * C297 - C16161 * C311 + C47992 * C327 +
              C16159 * C308 - C16160 * C296 - C16159 * C309 + C16155 * C326) *
                 C47633 * C10559) *
                C3302) *
               C48001 +
           (((C16159 * C310 - C16160 * C297 - C16159 * C311 + C16155 * C327 +
              C16161 * C1178 - C16162 * C1170 - C16161 * C1179 +
              C47992 * C1188) *
                 C47633 * C10559 +
             (C27226 + C27227) * C47633 * C47994) *
                C3302 -
            ((C27228 + C27229) * C47633 * C47994 +
             (C27227 + C27226) * C47633 * C10559) *
                C47791) *
               C47974) *
              C2648 +
          ((((C16617 + C16616) * C47633 * C10559 +
             (C16618 + C16619) * C47633 * C47994) *
                C47791 -
            ((C16616 + C16617) * C47633 * C47994 +
             (C16213 + C16212) * C47633 * C10559) *
                C3302) *
               C48013 +
           (((C16415 + C16414) * C47633 * C10559 +
             (C17130 + C17131) * C47633 * C47994) *
                C3302 -
            ((C18570 + C18571) * C47633 * C47994 +
             (C17131 + C17130) * C47633 * C10559) *
                C47791) *
               C48001 +
           (((C17859 + C17858) * C47633 * C10559 +
             (C16159 * C1325 - C16160 * C1309 - C16159 * C1326 +
              C16155 * C1336 + C16161 * C6147 - C16162 * C6144 -
              C16161 * C6148 + C47992 * C6150) *
                 C47633 * C47994) *
                C47791 -
            ((C17858 + C17859) * C47633 * C47994 +
             (C16417 + C16416) * C47633 * C10559) *
                C3302) *
               C47974) *
              C47669)) /
            (p * q * std::sqrt(p + q));
    d2ee[145] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C16159 * C122 - C16160 * C115 - C16159 * C123 + C16155 * C136 +
             C16161 * C308 - C16162 * C296 - C16161 * C309 + C47992 * C326) *
                C47633 * C10559 +
            (C26342 + C26343) * C47633 * C47994) *
               C47704 * C47942 -
           ((C16161 * C1321 - C16162 * C1307 - C16161 * C1322 + C47992 * C1334 +
             C16159 * C948 - C16160 * C943 - C16159 * C949 + C16155 * C958) *
                C47633 * C47994 +
            (C16161 * C310 - C16162 * C297 - C16161 * C311 + C47992 * C327 +
             C16159 * C308 - C16160 * C296 - C16159 * C309 + C16155 * C326) *
                C47633 * C10559) *
               C47704 * C47749) *
              C671 +
          (((C16415 + C16414) * C47633 * C10559 +
            (C17130 + C17131) * C47633 * C47994) *
               C47704 * C47749 -
           ((C16616 + C16617) * C47633 * C47994 +
            (C16213 + C16212) * C47633 * C10559) *
               C47704 * C47942) *
              C672 +
          (((C16215 + C16214) * C47633 * C10559 +
            (C16620 + C16621) * C47633 * C47994) *
               C47704 * C47942 -
           ((C17132 + C17133) * C47633 * C47994 +
            (C16419 + C16418) * C47633 * C10559) *
               C47704 * C47749) *
              C673 +
          (((C16767 + C16766) * C47633 * C10559 +
            (C16159 * C954 - C16160 * C946 - C16159 * C955 + C16155 * C961 +
             C16161 * C1607 - C16162 * C1606 - C16161 * C1608 +
             C47992 * C1609) *
                C47633 * C47994) *
               C47704 * C47749 -
           ((C16910 + C16911) * C47633 * C47994 +
            (C16217 + C16216) * C47633 * C10559) *
               C47704 * C47942) *
              C47978)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C16159 * C122 - C16160 * C115 - C16159 * C123 + C16155 * C136 +
             C16161 * C308 - C16162 * C296 - C16161 * C309 + C47992 * C326) *
                C47633 * C10559 +
            (C26342 + C26343) * C47633 * C47994) *
               C47704 * C1436 -
           ((C26813 + C26812) * C47633 * C47994 +
            (C16161 * C310 - C16162 * C297 - C16161 * C311 + C47992 * C327 +
             C16159 * C308 - C16160 * C296 - C16159 * C309 + C16155 * C326) *
                C47633 * C10559) *
               C47704 * C1437 +
           ((C16159 * C310 - C16160 * C297 - C16159 * C311 + C16155 * C327 +
             C16161 * C1178 - C16162 * C1170 - C16161 * C1179 +
             C47992 * C1188) *
                C47633 * C10559 +
            (C27226 + C27227) * C47633 * C47994) *
               C47704 * C1438 -
           ((C16161 * C6635 - C16162 * C6633 - C16161 * C6636 + C47992 * C6639 +
             C16159 * C1725 - C16160 * C1722 - C16159 * C1726 +
             C16155 * C1731) *
                C47633 * C47994 +
            (C16161 * C1180 - C16162 * C1171 - C16161 * C1181 + C47992 * C1189 +
             C16159 * C1178 - C16160 * C1170 - C16159 * C1179 +
             C16155 * C1188) *
                C47633 * C10559) *
               C47704 * C47984) *
              C47928 +
          (((C16415 + C16414) * C47633 * C10559 +
            (C17130 + C17131) * C47633 * C47994) *
               C47704 * C1437 -
           ((C16616 + C16617) * C47633 * C47994 +
            (C16213 + C16212) * C47633 * C10559) *
               C47704 * C1436 -
           ((C17858 + C17859) * C47633 * C47994 +
            (C16417 + C16416) * C47633 * C10559) *
               C47704 * C1438 +
           ((C17651 + C17650) * C47633 * C10559 +
            (C16159 * C1727 - C16160 * C1723 - C16159 * C1728 + C16155 * C1732 +
             C16161 * C6637 - C16162 * C6634 - C16161 * C6638 +
             C47992 * C6640) *
                C47633 * C47994) *
               C47704 * C47984) *
              C47669)) /
            (p * q * std::sqrt(p + q));
    d2ee[146] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C16159 * C122 - C16160 * C115 - C16159 * C123 + C16155 * C136 +
              C16161 * C308 - C16162 * C296 - C16161 * C309 + C47992 * C326) *
                 C47633 * C10559 +
             (C26342 + C26343) * C47633 * C47994) *
                C47943 -
            ((C26344 + C26345) * C47633 * C47994 +
             (C26343 + C26342) * C47633 * C10559) *
                C47791) *
               C47942 +
           (((C26812 + C26813) * C47633 * C10559 +
             (C16159 * C1315 - C16160 * C1304 - C16159 * C1316 +
              C16155 * C1331 + C16161 * C1323 - C16162 * C1308 -
              C16161 * C1324 + C47992 * C1335) *
                 C47633 * C47994) *
                C47791 -
            ((C26813 + C26812) * C47633 * C47994 +
             (C16161 * C310 - C16162 * C297 - C16161 * C311 + C47992 * C327 +
              C16159 * C308 - C16160 * C296 - C16159 * C309 + C16155 * C326) *
                 C47633 * C10559) *
                C47943) *
               C47749) *
              C291 +
          ((((C16617 + C16616) * C47633 * C10559 +
             (C16618 + C16619) * C47633 * C47994) *
                C47791 -
            ((C16616 + C16617) * C47633 * C47994 +
             (C16213 + C16212) * C47633 * C10559) *
                C47943) *
               C47942 +
           (((C16415 + C16414) * C47633 * C10559 +
             (C17130 + C17131) * C47633 * C47994) *
                C47943 -
            ((C18570 + C18571) * C47633 * C47994 +
             (C17131 + C17130) * C47633 * C10559) *
                C47791) *
               C47749) *
              C292 +
          ((((C16215 + C16214) * C47633 * C10559 +
             (C16620 + C16621) * C47633 * C47994) *
                C47943 -
            ((C16622 + C16623) * C47633 * C47994 +
             (C16621 + C16620) * C47633 * C10559) *
                C47791) *
               C47942 +
           (((C17133 + C17132) * C47633 * C10559 +
             (C16159 * C1311 - C16160 * C1302 - C16159 * C1312 +
              C16155 * C1329 + C16161 * C1327 - C16162 * C1310 -
              C16161 * C1328 + C47992 * C1337) *
                 C47633 * C47994) *
                C47791 -
            ((C17132 + C17133) * C47633 * C47994 +
             (C16419 + C16418) * C47633 * C10559) *
                C47943) *
               C47749) *
              C47968)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C16159 * C122 - C16160 * C115 - C16159 * C123 + C16155 * C136 +
             C16161 * C308 - C16162 * C296 - C16161 * C309 + C47992 * C326) *
                C47633 * C10559 +
            (C26342 + C26343) * C47633 * C47994) *
               C47943 -
           ((C26344 + C26345) * C47633 * C47994 +
            (C26343 + C26342) * C47633 * C10559) *
               C47791) *
              C1436 +
          (((C26812 + C26813) * C47633 * C10559 +
            (C27224 + C27225) * C47633 * C47994) *
               C47791 -
           ((C26813 + C26812) * C47633 * C47994 +
            (C16161 * C310 - C16162 * C297 - C16161 * C311 + C47992 * C327 +
             C16159 * C308 - C16160 * C296 - C16159 * C309 + C16155 * C326) *
                C47633 * C10559) *
               C47943) *
              C1437 +
          (((C16159 * C310 - C16160 * C297 - C16159 * C311 + C16155 * C327 +
             C16161 * C1178 - C16162 * C1170 - C16161 * C1179 +
             C47992 * C1188) *
                C47633 * C10559 +
            (C27226 + C27227) * C47633 * C47994) *
               C47943 -
           ((C27228 + C27229) * C47633 * C47994 +
            (C27227 + C27226) * C47633 * C10559) *
               C47791) *
              C1438 +
          (((C27696 + C27697) * C47633 * C10559 +
            (C16159 * C6145 - C16160 * C6143 - C16159 * C6146 + C16155 * C6149 +
             C16161 * C22730 - C16162 * C22729 - C16161 * C22731 +
             C47992 * C22732) *
                C47633 * C47994) *
               C47791 -
           ((C27697 + C27696) * C47633 * C47994 +
            (C16161 * C1180 - C16162 * C1171 - C16161 * C1181 + C47992 * C1189 +
             C16159 * C1178 - C16160 * C1170 - C16159 * C1179 +
             C16155 * C1188) *
                C47633 * C10559) *
               C47943) *
              C47984) *
         C47658) /
            (p * q * std::sqrt(p + q));
    d2ee[147] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C16159 * C122 - C16160 * C115 - C16159 * C123 + C16155 * C136 +
             C16161 * C308 - C16162 * C296 - C16161 * C309 + C47992 * C326) *
                C47633 * C10559 +
            (C16159 * C503 - C16160 * C491 - C16159 * C504 + C16155 * C521 +
             C16161 * C948 - C16162 * C943 - C16161 * C949 + C47992 * C958) *
                C47633 * C47994) *
               C47704 * C48013 -
           ((C16161 * C1321 - C16162 * C1307 - C16161 * C1322 + C47992 * C1334 +
             C16159 * C948 - C16160 * C943 - C16159 * C949 + C16155 * C958) *
                C47633 * C47994 +
            (C16161 * C310 - C16162 * C297 - C16161 * C311 + C47992 * C327 +
             C16159 * C308 - C16160 * C296 - C16159 * C309 + C16155 * C326) *
                C47633 * C10559) *
               C47704 * C48001 +
           ((C16159 * C310 - C16160 * C297 - C16159 * C311 + C16155 * C327 +
             C16161 * C1178 - C16162 * C1170 - C16161 * C1179 +
             C47992 * C1188) *
                C47633 * C10559 +
            (C16159 * C1321 - C16160 * C1307 - C16159 * C1322 + C16155 * C1334 +
             C16161 * C1725 - C16162 * C1722 - C16161 * C1726 +
             C47992 * C1731) *
                C47633 * C47994) *
               C47704 * C47974) *
              C291 +
          (((C16415 + C16414) * C47633 * C10559 +
            (C17130 + C17131) * C47633 * C47994) *
               C47704 * C48001 -
           ((C16616 + C16617) * C47633 * C47994 +
            (C16213 + C16212) * C47633 * C10559) *
               C47704 * C48013 -
           ((C17858 + C17859) * C47633 * C47994 +
            (C16417 + C16416) * C47633 * C10559) *
               C47704 * C47974) *
              C292 +
          (((C16215 + C16214) * C47633 * C10559 +
            (C16620 + C16621) * C47633 * C47994) *
               C47704 * C48013 -
           ((C17132 + C17133) * C47633 * C47994 +
            (C16419 + C16418) * C47633 * C10559) *
               C47704 * C48001 +
           ((C16421 + C16420) * C47633 * C10559 +
            (C16159 * C1317 - C16160 * C1305 - C16159 * C1318 + C16155 * C1332 +
             C16161 * C1729 - C16162 * C1724 - C16161 * C1730 +
             C47992 * C1733) *
                C47633 * C47994) *
               C47704 * C47974) *
              C47968)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C16159 * C122 - C16160 * C115 - C16159 * C123 + C16155 * C136 +
            C16161 * C308 - C16162 * C296 - C16161 * C309 + C47992 * C326) *
               C47633 * C10559 +
           (C16159 * C503 - C16160 * C491 - C16159 * C504 + C16155 * C521 +
            C16161 * C948 - C16162 * C943 - C16161 * C949 + C47992 * C958) *
               C47633 * C47994) *
              C47704 * C47686 * C108 -
          ((C16616 + C16617) * C47633 * C47994 +
           (C16213 + C16212) * C47633 * C10559) *
              C47704 * C47686 * C109 +
          ((C16215 + C16214) * C47633 * C10559 +
           (C16620 + C16621) * C47633 * C47994) *
              C47704 * C47686 * C110 -
          ((C16910 + C16911) * C47633 * C47994 +
           (C16217 + C16216) * C47633 * C10559) *
              C47704 * C47686 * C111 +
          ((C16219 + C16218) * C47633 * C10559 +
           (C16159 * C515 - C16160 * C497 - C16159 * C516 + C16155 * C527 +
            C16161 * C956 - C16162 * C947 - C16161 * C957 + C47992 * C962) *
               C47633 * C47994) *
              C47704 * C47686 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C16159 * C122 - C16160 * C115 - C16159 * C123 + C16155 * C136 +
             C16161 * C308 - C16162 * C296 - C16161 * C309 + C47992 * C326) *
                C47633 * C10559 +
            (C26342 + C26343) * C47633 * C47994) *
               C48014 -
           ((C26344 + C26345) * C47633 * C47994 +
            (C26343 + C26342) * C47633 * C10559) *
               C48003 +
           ((C26345 + C26344) * C47633 * C10559 +
            (C16159 * C2034 - C16160 * C2026 - C16159 * C2035 + C16155 * C2044 +
             C16161 * C2433 - C16162 * C2430 - C16161 * C2434 +
             C47992 * C2439) *
                C47633 * C47994) *
               C47977) *
              C47686 * C291 +
          (((C16617 + C16616) * C47633 * C10559 +
            (C16618 + C16619) * C47633 * C47994) *
               C48003 -
           ((C16616 + C16617) * C47633 * C47994 +
            (C16213 + C16212) * C47633 * C10559) *
               C48014 -
           ((C18714 + C18715) * C47633 * C47994 +
            (C16619 + C16618) * C47633 * C10559) *
               C47977) *
              C47686 * C292 +
          (((C16215 + C16214) * C47633 * C10559 +
            (C16620 + C16621) * C47633 * C47994) *
               C48014 -
           ((C16622 + C16623) * C47633 * C47994 +
            (C16621 + C16620) * C47633 * C10559) *
               C48003 +
           ((C16623 + C16622) * C47633 * C10559 +
            (C16159 * C2030 - C16160 * C2024 - C16159 * C2031 + C16155 * C2042 +
             C16161 * C2437 - C16162 * C2432 - C16161 * C2438 +
             C47992 * C2441) *
                C47633 * C47994) *
               C47977) *
              C47686 * C47968)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C16159 * C122 - C16160 * C115 - C16159 * C123 + C16155 * C136 +
             C16161 * C308 - C16162 * C296 - C16161 * C309 + C47992 * C326) *
                C47633 * C10559 +
            (C26342 + C26343) * C47633 * C47994) *
               C47704 * C1094 -
           ((C26813 + C26812) * C47633 * C47994 +
            (C16161 * C310 - C16162 * C297 - C16161 * C311 + C47992 * C327 +
             C16159 * C308 - C16160 * C296 - C16159 * C309 + C16155 * C326) *
                C47633 * C10559) *
               C47704 * C1095 +
           ((C16159 * C310 - C16160 * C297 - C16159 * C311 + C16155 * C327 +
             C16161 * C1178 - C16162 * C1170 - C16161 * C1179 +
             C47992 * C1188) *
                C47633 * C10559 +
            (C16159 * C1321 - C16160 * C1307 - C16159 * C1322 + C16155 * C1334 +
             C16161 * C1725 - C16162 * C1722 - C16161 * C1726 +
             C47992 * C1731) *
                C47633 * C47994) *
               C47704 * C47974) *
              C48010 +
          (((C16415 + C16414) * C47633 * C10559 +
            (C17130 + C17131) * C47633 * C47994) *
               C47704 * C1095 -
           ((C16616 + C16617) * C47633 * C47994 +
            (C16213 + C16212) * C47633 * C10559) *
               C47704 * C1094 -
           ((C17858 + C17859) * C47633 * C47994 +
            (C16417 + C16416) * C47633 * C10559) *
               C47704 * C47974) *
              C47997 +
          (((C16215 + C16214) * C47633 * C10559 +
            (C16620 + C16621) * C47633 * C47994) *
               C47704 * C1094 -
           ((C17132 + C17133) * C47633 * C47994 +
            (C16419 + C16418) * C47633 * C10559) *
               C47704 * C1095 +
           ((C16421 + C16420) * C47633 * C10559 +
            (C16159 * C1317 - C16160 * C1305 - C16159 * C1318 + C16155 * C1332 +
             C16161 * C1729 - C16162 * C1724 - C16161 * C1730 +
             C47992 * C1733) *
                C47633 * C47994) *
               C47704 * C47974) *
              C47968)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C16159 * C122 - C16160 * C115 - C16159 * C123 + C16155 * C136 +
            C16161 * C308 - C16162 * C296 - C16161 * C309 + C47992 * C326) *
               C47633 * C10559 +
           (C26342 + C26343) * C47633 * C47994) *
              C47704 * C1162 -
          ((C26813 + C26812) * C47633 * C47994 +
           (C16161 * C310 - C16162 * C297 - C16161 * C311 + C47992 * C327 +
            C16159 * C308 - C16160 * C296 - C16159 * C309 + C16155 * C326) *
               C47633 * C10559) *
              C47704 * C1163 +
          ((C16159 * C310 - C16160 * C297 - C16159 * C311 + C16155 * C327 +
            C16161 * C1178 - C16162 * C1170 - C16161 * C1179 + C47992 * C1188) *
               C47633 * C10559 +
           (C16159 * C1321 - C16160 * C1307 - C16159 * C1322 + C16155 * C1334 +
            C16161 * C1725 - C16162 * C1722 - C16161 * C1726 + C47992 * C1731) *
               C47633 * C47994) *
              C47704 * C1164 -
          ((C16161 * C6635 - C16162 * C6633 - C16161 * C6636 + C47992 * C6639 +
            C16159 * C1725 - C16160 * C1722 - C16159 * C1726 + C16155 * C1731) *
               C47633 * C47994 +
           (C16161 * C1180 - C16162 * C1171 - C16161 * C1181 + C47992 * C1189 +
            C16159 * C1178 - C16160 * C1170 - C16159 * C1179 + C16155 * C1188) *
               C47633 * C10559) *
              C47704 * C1165 +
          ((C16159 * C1180 - C16160 * C1171 - C16159 * C1181 + C16155 * C1189 +
            C16161 * C5991 - C16162 * C5989 - C16161 * C5992 + C47992 * C5995) *
               C47633 * C10559 +
           (C16159 * C6635 - C16160 * C6633 - C16159 * C6636 + C16155 * C6639 +
            C16161 * C23076 - C16162 * C23075 - C16161 * C23077 +
            C47992 * C23078) *
               C47633 * C47994) *
              C47704 * C1166) *
         C47658) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C16159 * C122 - C16160 * C115 - C16159 * C123 + C16155 * C136 +
             C16161 * C308 - C16162 * C296 - C16161 * C309 + C47992 * C326) *
                C47633 * C10559 +
            (C26342 + C26343) * C47633 * C47994) *
               C48014 -
           ((C26344 + C26345) * C47633 * C47994 +
            (C26343 + C26342) * C47633 * C10559) *
               C48003 +
           ((C26345 + C26344) * C47633 * C10559 +
            (C16159 * C2034 - C16160 * C2026 - C16159 * C2035 + C16155 * C2044 +
             C16161 * C2433 - C16162 * C2430 - C16161 * C2434 +
             C47992 * C2439) *
                C47633 * C47994) *
               C47977) *
              C1094 +
          (((C26812 + C26813) * C47633 * C10559 +
            (C27224 + C27225) * C47633 * C47994) *
               C48003 -
           ((C26813 + C26812) * C47633 * C47994 +
            (C16161 * C310 - C16162 * C297 - C16161 * C311 + C47992 * C327 +
             C16159 * C308 - C16160 * C296 - C16159 * C309 + C16155 * C326) *
                C47633 * C10559) *
               C48014 -
           ((C16161 * C7507 - C16162 * C7505 - C16161 * C7508 + C47992 * C7511 +
             C16159 * C2433 - C16160 * C2430 - C16159 * C2434 +
             C16155 * C2439) *
                C47633 * C47994 +
            (C27225 + C27224) * C47633 * C10559) *
               C47977) *
              C1095 +
          (((C16159 * C310 - C16160 * C297 - C16159 * C311 + C16155 * C327 +
             C16161 * C1178 - C16162 * C1170 - C16161 * C1179 +
             C47992 * C1188) *
                C47633 * C10559 +
            (C27226 + C27227) * C47633 * C47994) *
               C48014 -
           ((C27228 + C27229) * C47633 * C47994 +
            (C27227 + C27226) * C47633 * C10559) *
               C48003 +
           ((C27229 + C27228) * C47633 * C10559 +
            (C16159 * C7507 - C16160 * C7505 - C16159 * C7508 + C16155 * C7511 +
             C16161 * C23708 - C16162 * C23707 - C16161 * C23709 +
             C47992 * C23710) *
                C47633 * C47994) *
               C47977) *
              C47974) *
         C47658) /
            (p * q * std::sqrt(p + q));
    d2ee[148] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C16159 * C122 - C16160 * C115 - C16159 * C123 + C16155 * C136 +
             C16161 * C308 - C16162 * C296 - C16161 * C309 + C47992 * C326) *
                C47633 * C10559 +
            (C26342 + C26343) * C47633 * C47994) *
               C47943 -
           ((C26344 + C26345) * C47633 * C47994 +
            (C26343 + C26342) * C47633 * C10559) *
               C47791) *
              C47686 * C671 +
          (((C16617 + C16616) * C47633 * C10559 +
            (C16618 + C16619) * C47633 * C47994) *
               C47791 -
           ((C16616 + C16617) * C47633 * C47994 +
            (C16213 + C16212) * C47633 * C10559) *
               C47943) *
              C47686 * C672 +
          (((C16215 + C16214) * C47633 * C10559 +
            (C16620 + C16621) * C47633 * C47994) *
               C47943 -
           ((C16622 + C16623) * C47633 * C47994 +
            (C16621 + C16620) * C47633 * C10559) *
               C47791) *
              C47686 * C673 +
          (((C16911 + C16910) * C47633 * C10559 +
            (C16159 * C513 - C16160 * C496 - C16159 * C514 + C16155 * C526 +
             C16161 * C2195 - C16162 * C2194 - C16161 * C2196 +
             C47992 * C2197) *
                C47633 * C47994) *
               C47791 -
           ((C16910 + C16911) * C47633 * C47994 +
            (C16217 + C16216) * C47633 * C10559) *
               C47943) *
              C47686 * C47978)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C16159 * C122 - C16160 * C115 - C16159 * C123 + C16155 * C136 +
              C16161 * C308 - C16162 * C296 - C16161 * C309 + C47992 * C326) *
                 C47633 * C10559 +
             (C26342 + C26343) * C47633 * C47994) *
                C47943 -
            ((C26344 + C26345) * C47633 * C47994 +
             (C26343 + C26342) * C47633 * C10559) *
                C47791) *
               C1094 +
           (((C26812 + C26813) * C47633 * C10559 +
             (C27224 + C27225) * C47633 * C47994) *
                C47791 -
            ((C26813 + C26812) * C47633 * C47994 +
             (C16161 * C310 - C16162 * C297 - C16161 * C311 + C47992 * C327 +
              C16159 * C308 - C16160 * C296 - C16159 * C309 + C16155 * C326) *
                 C47633 * C10559) *
                C47943) *
               C1095 +
           (((C16159 * C310 - C16160 * C297 - C16159 * C311 + C16155 * C327 +
              C16161 * C1178 - C16162 * C1170 - C16161 * C1179 +
              C47992 * C1188) *
                 C47633 * C10559 +
             (C27226 + C27227) * C47633 * C47994) *
                C47943 -
            ((C27228 + C27229) * C47633 * C47994 +
             (C27227 + C27226) * C47633 * C10559) *
                C47791) *
               C47974) *
              C47928 +
          ((((C16617 + C16616) * C47633 * C10559 +
             (C16618 + C16619) * C47633 * C47994) *
                C47791 -
            ((C16616 + C16617) * C47633 * C47994 +
             (C16213 + C16212) * C47633 * C10559) *
                C47943) *
               C1094 +
           (((C16415 + C16414) * C47633 * C10559 +
             (C17130 + C17131) * C47633 * C47994) *
                C47943 -
            ((C18570 + C18571) * C47633 * C47994 +
             (C17131 + C17130) * C47633 * C10559) *
                C47791) *
               C1095 +
           (((C17859 + C17858) * C47633 * C10559 +
             (C16159 * C1325 - C16160 * C1309 - C16159 * C1326 +
              C16155 * C1336 + C16161 * C6147 - C16162 * C6144 -
              C16161 * C6148 + C47992 * C6150) *
                 C47633 * C47994) *
                C47791 -
            ((C17858 + C17859) * C47633 * C47994 +
             (C16417 + C16416) * C47633 * C10559) *
                C47943) *
               C47974) *
              C47669)) /
            (p * q * std::sqrt(p + q));
    d2ee[149] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C16159 * C122 - C16160 * C115 - C16159 * C123 + C16155 * C136 +
            C16161 * C308 - C16162 * C296 - C16161 * C309 + C47992 * C326) *
               C47633 * C10559 +
           (C16159 * C503 - C16160 * C491 - C16159 * C504 + C16155 * C521 +
            C16161 * C948 - C16162 * C943 - C16161 * C949 + C47992 * C958) *
               C47633 * C47994) *
              C47704 * C47686 * C108 -
          ((C16616 + C16617) * C47633 * C47994 +
           (C16213 + C16212) * C47633 * C10559) *
              C47704 * C47686 * C109 +
          ((C16215 + C16214) * C47633 * C10559 +
           (C16620 + C16621) * C47633 * C47994) *
              C47704 * C47686 * C110 -
          ((C16910 + C16911) * C47633 * C47994 +
           (C16217 + C16216) * C47633 * C10559) *
              C47704 * C47686 * C111 +
          ((C16219 + C16218) * C47633 * C10559 +
           (C16159 * C515 - C16160 * C497 - C16159 * C516 + C16155 * C527 +
            C16161 * C956 - C16162 * C947 - C16161 * C957 + C47992 * C962) *
               C47633 * C47994) *
              C47704 * C47686 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C16159 * C122 - C16160 * C115 - C16159 * C123 + C16155 * C136 +
             C16161 * C308 - C16162 * C296 - C16161 * C309 + C47992 * C326) *
                C47633 * C10559 +
            (C16159 * C503 - C16160 * C491 - C16159 * C504 + C16155 * C521 +
             C16161 * C948 - C16162 * C943 - C16161 * C949 + C47992 * C958) *
                C47633 * C47994) *
               C47704 * C48013 -
           ((C16161 * C1321 - C16162 * C1307 - C16161 * C1322 + C47992 * C1334 +
             C16159 * C948 - C16160 * C943 - C16159 * C949 + C16155 * C958) *
                C47633 * C47994 +
            (C16161 * C310 - C16162 * C297 - C16161 * C311 + C47992 * C327 +
             C16159 * C308 - C16160 * C296 - C16159 * C309 + C16155 * C326) *
                C47633 * C10559) *
               C47704 * C48001 +
           ((C16159 * C310 - C16160 * C297 - C16159 * C311 + C16155 * C327 +
             C16161 * C1178 - C16162 * C1170 - C16161 * C1179 +
             C47992 * C1188) *
                C47633 * C10559 +
            (C16159 * C1321 - C16160 * C1307 - C16159 * C1322 + C16155 * C1334 +
             C16161 * C1725 - C16162 * C1722 - C16161 * C1726 +
             C47992 * C1731) *
                C47633 * C47994) *
               C47704 * C47974) *
              C291 +
          (((C16415 + C16414) * C47633 * C10559 +
            (C17130 + C17131) * C47633 * C47994) *
               C47704 * C48001 -
           ((C16616 + C16617) * C47633 * C47994 +
            (C16213 + C16212) * C47633 * C10559) *
               C47704 * C48013 -
           ((C17858 + C17859) * C47633 * C47994 +
            (C16417 + C16416) * C47633 * C10559) *
               C47704 * C47974) *
              C292 +
          (((C16215 + C16214) * C47633 * C10559 +
            (C16620 + C16621) * C47633 * C47994) *
               C47704 * C48013 -
           ((C17132 + C17133) * C47633 * C47994 +
            (C16419 + C16418) * C47633 * C10559) *
               C47704 * C48001 +
           ((C16421 + C16420) * C47633 * C10559 +
            (C16159 * C1317 - C16160 * C1305 - C16159 * C1318 + C16155 * C1332 +
             C16161 * C1729 - C16162 * C1724 - C16161 * C1730 +
             C47992 * C1733) *
                C47633 * C47994) *
               C47704 * C47974) *
              C47968)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C16159 * C122 - C16160 * C115 - C16159 * C123 + C16155 * C136 +
             C16161 * C308 - C16162 * C296 - C16161 * C309 + C47992 * C326) *
                C47633 * C10559 +
            (C26342 + C26343) * C47633 * C47994) *
               C47704 * C1094 -
           ((C26813 + C26812) * C47633 * C47994 +
            (C16161 * C310 - C16162 * C297 - C16161 * C311 + C47992 * C327 +
             C16159 * C308 - C16160 * C296 - C16159 * C309 + C16155 * C326) *
                C47633 * C10559) *
               C47704 * C1095 +
           ((C16159 * C310 - C16160 * C297 - C16159 * C311 + C16155 * C327 +
             C16161 * C1178 - C16162 * C1170 - C16161 * C1179 +
             C47992 * C1188) *
                C47633 * C10559 +
            (C16159 * C1321 - C16160 * C1307 - C16159 * C1322 + C16155 * C1334 +
             C16161 * C1725 - C16162 * C1722 - C16161 * C1726 +
             C47992 * C1731) *
                C47633 * C47994) *
               C47704 * C47974) *
              C48010 +
          (((C16415 + C16414) * C47633 * C10559 +
            (C17130 + C17131) * C47633 * C47994) *
               C47704 * C1095 -
           ((C16616 + C16617) * C47633 * C47994 +
            (C16213 + C16212) * C47633 * C10559) *
               C47704 * C1094 -
           ((C17858 + C17859) * C47633 * C47994 +
            (C16417 + C16416) * C47633 * C10559) *
               C47704 * C47974) *
              C47997 +
          (((C16215 + C16214) * C47633 * C10559 +
            (C16620 + C16621) * C47633 * C47994) *
               C47704 * C1094 -
           ((C17132 + C17133) * C47633 * C47994 +
            (C16419 + C16418) * C47633 * C10559) *
               C47704 * C1095 +
           ((C16421 + C16420) * C47633 * C10559 +
            (C16159 * C1317 - C16160 * C1305 - C16159 * C1318 + C16155 * C1332 +
             C16161 * C1729 - C16162 * C1724 - C16161 * C1730 +
             C47992 * C1733) *
                C47633 * C47994) *
               C47704 * C47974) *
              C47968)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C16159 * C122 - C16160 * C115 - C16159 * C123 + C16155 * C136 +
            C16161 * C308 - C16162 * C296 - C16161 * C309 + C47992 * C326) *
               C47633 * C10559 +
           (C26342 + C26343) * C47633 * C47994) *
              C47704 * C1162 -
          ((C26813 + C26812) * C47633 * C47994 +
           (C16161 * C310 - C16162 * C297 - C16161 * C311 + C47992 * C327 +
            C16159 * C308 - C16160 * C296 - C16159 * C309 + C16155 * C326) *
               C47633 * C10559) *
              C47704 * C1163 +
          ((C16159 * C310 - C16160 * C297 - C16159 * C311 + C16155 * C327 +
            C16161 * C1178 - C16162 * C1170 - C16161 * C1179 + C47992 * C1188) *
               C47633 * C10559 +
           (C16159 * C1321 - C16160 * C1307 - C16159 * C1322 + C16155 * C1334 +
            C16161 * C1725 - C16162 * C1722 - C16161 * C1726 + C47992 * C1731) *
               C47633 * C47994) *
              C47704 * C1164 -
          ((C16161 * C6635 - C16162 * C6633 - C16161 * C6636 + C47992 * C6639 +
            C16159 * C1725 - C16160 * C1722 - C16159 * C1726 + C16155 * C1731) *
               C47633 * C47994 +
           (C16161 * C1180 - C16162 * C1171 - C16161 * C1181 + C47992 * C1189 +
            C16159 * C1178 - C16160 * C1170 - C16159 * C1179 + C16155 * C1188) *
               C47633 * C10559) *
              C47704 * C1165 +
          ((C16159 * C1180 - C16160 * C1171 - C16159 * C1181 + C16155 * C1189 +
            C16161 * C5991 - C16162 * C5989 - C16161 * C5992 + C47992 * C5995) *
               C47633 * C10559 +
           (C16159 * C6635 - C16160 * C6633 - C16159 * C6636 + C16155 * C6639 +
            C16161 * C23076 - C16162 * C23075 - C16161 * C23077 +
            C47992 * C23078) *
               C47633 * C47994) *
              C47704 * C1166) *
         C47658) /
            (p * q * std::sqrt(p + q));
    d2ee[150] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C47890 * C136) *
                 C16157 +
             C174 * C47961) *
                C31617 +
            (C31912 + C31913) * C47994) *
               C47704 * C47745 -
           ((C32381 + C32380) * C47994 +
            (C372 * C47961 +
             (C113 * C308 - C114 * C296 - C113 * C309 + C47890 * C326) *
                 C16157) *
                C31617) *
               C47704 * C47752 +
           (((C113 * C310 - C114 * C297 - C113 * C311 + C47890 * C327) *
                 C16157 +
             C373 * C47961) *
                C31617 +
            (C32762 + C32763) * C47994) *
               C47704 * C2908) *
              C47663 +
          (((C372 * C16157 + C371 * C47961) * C31617 +
            (C32382 + C32383) * C47994) *
               C47704 * C47752 -
           ((C31917 + C31916) * C47994 +
            (C175 * C47961 + C174 * C16157) * C31617) *
               C47704 * C47745 -
           ((C33091 + C33090) * C47994 +
            (C374 * C47961 + C373 * C16157) * C31617) *
               C47704 * C2908) *
              C47672 +
          (((C175 * C16157 + C176 * C47961) * C31617 +
            (C31920 + C31921) * C47994) *
               C47704 * C47745 -
           ((C32385 + C32384) * C47994 +
            (C375 * C47961 + C371 * C16157) * C31617) *
               C47704 * C47752 +
           ((C374 * C16157 + C376 * C47961) * C31617 +
            (C1623 * C16157 +
             (C113 * C1607 - C114 * C1606 - C113 * C1608 + C47890 * C1609) *
                 C47961) *
                C47994) *
               C47704 * C2908) *
              C2911)) /
        (p * q * std::sqrt(p + q));
    d2ee[151] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C122 - C114 * C115 - C113 * C123 + C47890 * C136) *
                  C16157 +
              C174 * C47961) *
                 C31617 +
             (C31912 + C31913) * C47994) *
                C47943 -
            ((C31914 + C31915) * C47994 + (C31913 + C31912) * C31617) *
                C47791) *
               C47745 +
           (((C32380 + C32381) * C31617 + (C32760 + C32761) * C47994) * C47791 -
            ((C32381 + C32380) * C47994 +
             (C372 * C47961 +
              (C113 * C308 - C114 * C296 - C113 * C309 + C47890 * C326) *
                  C16157) *
                 C31617) *
                C47943) *
               C47752 +
           ((((C113 * C310 - C114 * C297 - C113 * C311 + C47890 * C327) *
                  C16157 +
              C373 * C47961) *
                 C31617 +
             (C32762 + C32763) * C47994) *
                C47943 -
            ((C32764 + C32765) * C47994 + (C32763 + C32762) * C31617) *
                C47791) *
               C2908) *
              C2648 +
          ((((C31916 + C31917) * C31617 + (C31918 + C31919) * C47994) * C47791 -
            ((C31917 + C31916) * C47994 +
             (C175 * C47961 + C174 * C16157) * C31617) *
                C47943) *
               C47745 +
           (((C372 * C16157 + C371 * C47961) * C31617 +
             (C32382 + C32383) * C47994) *
                C47943 -
            ((C33796 + C33797) * C47994 + (C32383 + C32382) * C31617) *
                C47791) *
               C47752 +
           (((C33090 + C33091) * C31617 +
             (C11751 * C16157 +
              (C113 * C1327 - C114 * C1310 - C113 * C1328 + C47890 * C1337) *
                  C47961) *
                 C47994) *
                C47791 -
            ((C33091 + C33090) * C47994 +
             (C374 * C47961 + C373 * C16157) * C31617) *
                C47943) *
               C2908) *
              C47669)) /
        (p * q * std::sqrt(p + q));
    d2ee[152] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C47890 * C136) *
                 C16157 +
             C174 * C47961) *
                C31617 +
            (C31912 + C31913) * C47994) *
               C47704 * C48020 -
           ((C32381 + C32380) * C47994 +
            (C372 * C47961 +
             (C113 * C308 - C114 * C296 - C113 * C309 + C47890 * C326) *
                 C16157) *
                C31617) *
               C47704 * C48016 +
           (((C113 * C310 - C114 * C297 - C113 * C311 + C47890 * C327) *
                 C16157 +
             C373 * C47961) *
                C31617 +
            (C32762 + C32763) * C47994) *
               C47704 * C48006 -
           ((C33223 + C33222) * C47994 +
            (C1460 * C47961 +
             (C113 * C1178 - C114 * C1170 - C113 * C1179 + C47890 * C1188) *
                 C16157) *
                C31617) *
               C47704 * C47984) *
              C2648 +
          (((C372 * C16157 + C371 * C47961) * C31617 +
            (C32382 + C32383) * C47994) *
               C47704 * C48016 -
           ((C31917 + C31916) * C47994 +
            (C175 * C47961 + C174 * C16157) * C31617) *
               C47704 * C48020 -
           ((C33091 + C33090) * C47994 +
            (C374 * C47961 + C373 * C16157) * C31617) *
               C47704 * C48006 +
           ((C1460 * C16157 + C1459 * C47961) * C31617 +
            (C11893 * C16157 +
             (C113 * C1729 - C114 * C1724 - C113 * C1730 + C47890 * C1733) *
                 C47961) *
                C47994) *
               C47704 * C47984) *
              C47669)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C47890 * C136) *
                 C16157 +
             C174 * C47961) *
                C31617 +
            (C31912 + C31913) * C47994) *
               C47704 * C2540 -
           ((C32381 + C32380) * C47994 +
            (C372 * C47961 +
             (C113 * C308 - C114 * C296 - C113 * C309 + C47890 * C326) *
                 C16157) *
                C31617) *
               C47704 * C47749) *
              C48019 +
          (((C372 * C16157 + C371 * C47961) * C31617 +
            (C32382 + C32383) * C47994) *
               C47704 * C47749 -
           ((C31917 + C31916) * C47994 +
            (C175 * C47961 + C174 * C16157) * C31617) *
               C47704 * C2540) *
              C48012 +
          (((C175 * C16157 + C176 * C47961) * C31617 +
            (C31920 + C31921) * C47994) *
               C47704 * C2540 -
           ((C32385 + C32384) * C47994 +
            (C375 * C47961 + C371 * C16157) * C31617) *
               C47704 * C47749) *
              C47999 +
          (((C375 * C16157 + C686 * C47961) * C31617 +
            (C984 * C16157 +
             (C113 * C956 - C114 * C947 - C113 * C957 + C47890 * C962) *
                 C47961) *
                C47994) *
               C47704 * C47749 -
           ((C32185 + C32184) * C47994 +
            (C177 * C47961 + C176 * C16157) * C31617) *
               C47704 * C2540) *
              C47978)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C122 - C114 * C115 - C113 * C123 + C47890 * C136) *
                  C16157 +
              C174 * C47961) *
                 C31617 +
             (C31912 + C31913) * C47994) *
                C48014 -
            ((C31914 + C31915) * C47994 + (C31913 + C31912) * C31617) * C48003 +
            ((C31915 + C31914) * C31617 + (C33598 + C33599) * C47994) *
                C47977) *
               C2540 +
           (((C32380 + C32381) * C31617 + (C32760 + C32761) * C47994) * C48003 -
            ((C32381 + C32380) * C47994 +
             (C372 * C47961 +
              (C113 * C308 - C114 * C296 - C113 * C309 + C47890 * C326) *
                  C16157) *
                 C31617) *
                C48014 -
            ((C34060 + C34061) * C47994 + (C32761 + C32760) * C31617) *
                C47977) *
               C47749) *
              C2648 +
          ((((C31916 + C31917) * C31617 + (C31918 + C31919) * C47994) * C48003 -
            ((C31917 + C31916) * C47994 +
             (C175 * C47961 + C174 * C16157) * C31617) *
                C48014 -
            ((C33928 + C33929) * C47994 + (C31919 + C31918) * C31617) *
                C47977) *
               C2540 +
           (((C372 * C16157 + C371 * C47961) * C31617 +
             (C32382 + C32383) * C47994) *
                C48014 -
            ((C33796 + C33797) * C47994 + (C32383 + C32382) * C31617) * C48003 +
            ((C33797 + C33796) * C31617 +
             (C12838 * C16157 +
              (C113 * C2437 - C114 * C2432 - C113 * C2438 + C47890 * C2441) *
                  C47961) *
                 C47994) *
                C47977) *
               C47749) *
              C47669)) /
            (p * q * std::sqrt(p + q));
    d2ee[153] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C122 - C114 * C115 - C113 * C123 + C47890 * C136) *
                  C16157 +
              C174 * C47961) *
                 C31617 +
             (C31912 + C31913) * C47994) *
                C47943 -
            ((C31914 + C31915) * C47994 + (C31913 + C31912) * C31617) *
                C47791) *
               C2540 +
           (((C32380 + C32381) * C31617 + (C32760 + C32761) * C47994) * C47791 -
            ((C32381 + C32380) * C47994 +
             (C372 * C47961 +
              (C113 * C308 - C114 * C296 - C113 * C309 + C47890 * C326) *
                  C16157) *
                 C31617) *
                C47943) *
               C47749) *
              C47663 +
          ((((C31916 + C31917) * C31617 + (C31918 + C31919) * C47994) * C47791 -
            ((C31917 + C31916) * C47994 +
             (C175 * C47961 + C174 * C16157) * C31617) *
                C47943) *
               C2540 +
           (((C372 * C16157 + C371 * C47961) * C31617 +
             (C32382 + C32383) * C47994) *
                C47943 -
            ((C33796 + C33797) * C47994 + (C32383 + C32382) * C31617) *
                C47791) *
               C47749) *
              C47672 +
          ((((C175 * C16157 + C176 * C47961) * C31617 +
             (C31920 + C31921) * C47994) *
                C47943 -
            ((C31922 + C31923) * C47994 + (C31921 + C31920) * C31617) *
                C47791) *
               C2540 +
           (((C32384 + C32385) * C31617 +
             (C2211 * C16157 +
              (C113 * C2195 - C114 * C2194 - C113 * C2196 + C47890 * C2197) *
                  C47961) *
                 C47994) *
                C47791 -
            ((C32385 + C32384) * C47994 +
             (C375 * C47961 + C371 * C16157) * C31617) *
                C47943) *
               C47749) *
              C2911)) /
        (p * q * std::sqrt(p + q));
    d2ee[154] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C47890 * C136) *
                 C16157 +
             C174 * C47961) *
                C31617 +
            (C31912 + C31913) * C47994) *
               C47704 * C2540 -
           ((C32381 + C32380) * C47994 +
            (C372 * C47961 +
             (C113 * C308 - C114 * C296 - C113 * C309 + C47890 * C326) *
                 C16157) *
                C31617) *
               C47704 * C47749) *
              C48019 +
          (((C372 * C16157 + C371 * C47961) * C31617 +
            (C32382 + C32383) * C47994) *
               C47704 * C47749 -
           ((C31917 + C31916) * C47994 +
            (C175 * C47961 + C174 * C16157) * C31617) *
               C47704 * C2540) *
              C48012 +
          (((C175 * C16157 + C176 * C47961) * C31617 +
            (C31920 + C31921) * C47994) *
               C47704 * C2540 -
           ((C32385 + C32384) * C47994 +
            (C375 * C47961 + C371 * C16157) * C31617) *
               C47704 * C47749) *
              C47999 +
          (((C375 * C16157 + C686 * C47961) * C31617 +
            (C984 * C16157 +
             (C113 * C956 - C114 * C947 - C113 * C957 + C47890 * C962) *
                 C47961) *
                C47994) *
               C47704 * C47749 -
           ((C32185 + C32184) * C47994 +
            (C177 * C47961 + C176 * C16157) * C31617) *
               C47704 * C2540) *
              C47978)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C47890 * C136) *
                 C16157 +
             C174 * C47961) *
                C31617 +
            (C31912 + C31913) * C47994) *
               C47704 * C48020 -
           ((C32381 + C32380) * C47994 +
            (C372 * C47961 +
             (C113 * C308 - C114 * C296 - C113 * C309 + C47890 * C326) *
                 C16157) *
                C31617) *
               C47704 * C48016 +
           (((C113 * C310 - C114 * C297 - C113 * C311 + C47890 * C327) *
                 C16157 +
             C373 * C47961) *
                C31617 +
            (C32762 + C32763) * C47994) *
               C47704 * C48006 -
           ((C33223 + C33222) * C47994 +
            (C1460 * C47961 +
             (C113 * C1178 - C114 * C1170 - C113 * C1179 + C47890 * C1188) *
                 C16157) *
                C31617) *
               C47704 * C47984) *
              C2648 +
          (((C372 * C16157 + C371 * C47961) * C31617 +
            (C32382 + C32383) * C47994) *
               C47704 * C48016 -
           ((C31917 + C31916) * C47994 +
            (C175 * C47961 + C174 * C16157) * C31617) *
               C47704 * C48020 -
           ((C33091 + C33090) * C47994 +
            (C374 * C47961 + C373 * C16157) * C31617) *
               C47704 * C48006 +
           ((C1460 * C16157 + C1459 * C47961) * C31617 +
            (C11893 * C16157 +
             (C113 * C1729 - C114 * C1724 - C113 * C1730 + C47890 * C1733) *
                 C47961) *
                C47994) *
               C47704 * C47984) *
              C47669)) /
            (p * q * std::sqrt(p + q));
    d2ee[155] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C122 - C114 * C115 - C113 * C123 + C47890 * C136) *
                  C16157 +
              C174 * C47961) *
                 C31617 +
             (C31912 + C31913) * C47994) *
                C3302 -
            ((C31914 + C31915) * C47994 + (C31913 + C31912) * C31617) *
                C47791) *
               C47745 +
           (((C32380 + C32381) * C31617 + (C32760 + C32761) * C47994) * C47791 -
            ((C32381 + C32380) * C47994 +
             (C372 * C47961 +
              (C113 * C308 - C114 * C296 - C113 * C309 + C47890 * C326) *
                  C16157) *
                 C31617) *
                C3302) *
               C47752 +
           ((((C113 * C310 - C114 * C297 - C113 * C311 + C47890 * C327) *
                  C16157 +
              C373 * C47961) *
                 C31617 +
             (C32762 + C32763) * C47994) *
                C3302 -
            ((C32764 + C32765) * C47994 + (C32763 + C32762) * C31617) *
                C47791) *
               C2908) *
              C47928 +
          ((((C31916 + C31917) * C31617 + (C31918 + C31919) * C47994) * C47791 -
            ((C31917 + C31916) * C47994 +
             (C175 * C47961 + C174 * C16157) * C31617) *
                C3302) *
               C47745 +
           (((C372 * C16157 + C371 * C47961) * C31617 +
             (C32382 + C32383) * C47994) *
                C3302 -
            ((C33796 + C33797) * C47994 + (C32383 + C32382) * C31617) *
                C47791) *
               C47752 +
           (((C33090 + C33091) * C31617 +
             (C11751 * C16157 +
              (C113 * C1327 - C114 * C1310 - C113 * C1328 + C47890 * C1337) *
                  C47961) *
                 C47994) *
                C47791 -
            ((C33091 + C33090) * C47994 +
             (C374 * C47961 + C373 * C16157) * C31617) *
                C3302) *
               C2908) *
              C47669)) /
        (p * q * std::sqrt(p + q));
    d2ee[156] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C47890 * C136) *
                 C16157 +
             C174 * C47961) *
                C31617 +
            (C31912 + C31913) * C47994) *
               C47787 -
           ((C31914 + C31915) * C47994 + (C31913 + C31912) * C31617) * C47794 +
           ((C31915 + C31914) * C31617 + (C33598 + C33599) * C47994) * C3810) *
              C47745 +
          (((C32380 + C32381) * C31617 + (C32760 + C32761) * C47994) * C47794 -
           ((C32381 + C32380) * C47994 +
            (C372 * C47961 +
             (C113 * C308 - C114 * C296 - C113 * C309 + C47890 * C326) *
                 C16157) *
                C31617) *
               C47787 -
           ((C34060 + C34061) * C47994 + (C32761 + C32760) * C31617) * C3810) *
              C47752 +
          ((((C113 * C310 - C114 * C297 - C113 * C311 + C47890 * C327) *
                 C16157 +
             C373 * C47961) *
                C31617 +
            (C32762 + C32763) * C47994) *
               C47787 -
           ((C32764 + C32765) * C47994 + (C32763 + C32762) * C31617) * C47794 +
           ((C32765 + C32764) * C31617 +
            ((C113 * C7507 - C114 * C7505 - C113 * C7508 + C47890 * C7511) *
                 C16157 +
             (C113 * C7509 - C114 * C7506 - C113 * C7510 + C47890 * C7512) *
                 C47961) *
                C47994) *
               C3810) *
              C2908) *
         C47658) /
        (p * q * std::sqrt(p + q));
    d2ee[157] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C47890 * C136) *
                 C16157 +
             C174 * C47961) *
                C31617 +
            (C31912 + C31913) * C47994) *
               C3302 -
           ((C31914 + C31915) * C47994 + (C31913 + C31912) * C31617) * C47791) *
              C48020 +
          (((C32380 + C32381) * C31617 + (C32760 + C32761) * C47994) * C47791 -
           ((C32381 + C32380) * C47994 +
            (C372 * C47961 +
             (C113 * C308 - C114 * C296 - C113 * C309 + C47890 * C326) *
                 C16157) *
                C31617) *
               C3302) *
              C48016 +
          ((((C113 * C310 - C114 * C297 - C113 * C311 + C47890 * C327) *
                 C16157 +
             C373 * C47961) *
                C31617 +
            (C32762 + C32763) * C47994) *
               C3302 -
           ((C32764 + C32765) * C47994 + (C32763 + C32762) * C31617) * C47791) *
              C48006 +
          (((C33222 + C33223) * C31617 +
            ((C113 * C6145 - C114 * C6143 - C113 * C6146 + C47890 * C6149) *
                 C16157 +
             (C113 * C6147 - C114 * C6144 - C113 * C6148 + C47890 * C6150) *
                 C47961) *
                C47994) *
               C47791 -
           ((C33223 + C33222) * C47994 +
            (C1460 * C47961 +
             (C113 * C1178 - C114 * C1170 - C113 * C1179 + C47890 * C1188) *
                 C16157) *
                C31617) *
               C3302) *
              C47984) *
         C47658) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C122 - C114 * C115 - C113 * C123 + C47890 * C136) *
                  C16157 +
              C174 * C47961) *
                 C31617 +
             (C31912 + C31913) * C47994) *
                C3302 -
            ((C31914 + C31915) * C47994 + (C31913 + C31912) * C31617) *
                C47791) *
               C2540 +
           (((C32380 + C32381) * C31617 + (C32760 + C32761) * C47994) * C47791 -
            ((C32381 + C32380) * C47994 +
             (C372 * C47961 +
              (C113 * C308 - C114 * C296 - C113 * C309 + C47890 * C326) *
                  C16157) *
                 C31617) *
                C3302) *
               C47749) *
              C48010 +
          ((((C31916 + C31917) * C31617 + (C31918 + C31919) * C47994) * C47791 -
            ((C31917 + C31916) * C47994 +
             (C175 * C47961 + C174 * C16157) * C31617) *
                C3302) *
               C2540 +
           (((C372 * C16157 + C371 * C47961) * C31617 +
             (C32382 + C32383) * C47994) *
                C3302 -
            ((C33796 + C33797) * C47994 + (C32383 + C32382) * C31617) *
                C47791) *
               C47749) *
              C47997 +
          ((((C175 * C16157 + C176 * C47961) * C31617 +
             (C31920 + C31921) * C47994) *
                C3302 -
            ((C31922 + C31923) * C47994 + (C31921 + C31920) * C31617) *
                C47791) *
               C2540 +
           (((C32384 + C32385) * C31617 +
             (C2211 * C16157 +
              (C113 * C2195 - C114 * C2194 - C113 * C2196 + C47890 * C2197) *
                  C47961) *
                 C47994) *
                C47791 -
            ((C32385 + C32384) * C47994 +
             (C375 * C47961 + C371 * C16157) * C31617) *
                C3302) *
               C47749) *
              C47968)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C47890 * C136) *
                 C16157 +
             C174 * C47961) *
                C31617 +
            (C31912 + C31913) * C47994) *
               C48021 -
           ((C31914 + C31915) * C47994 + (C31913 + C31912) * C31617) * C48018 +
           ((C31915 + C31914) * C31617 + (C33598 + C33599) * C47994) * C48009 -
           ((C33600 + C33601) * C47994 + (C33599 + C33598) * C31617) * C47990) *
              C2540 +
          (((C32380 + C32381) * C31617 + (C32760 + C32761) * C47994) * C48018 -
           ((C32381 + C32380) * C47994 +
            (C372 * C47961 +
             (C113 * C308 - C114 * C296 - C113 * C309 + C47890 * C326) *
                 C16157) *
                C31617) *
               C48021 -
           ((C34060 + C34061) * C47994 + (C32761 + C32760) * C31617) * C48009 +
           ((C34061 + C34060) * C31617 +
            ((C113 * C7017 - C114 * C7015 - C113 * C7018 + C47890 * C7021) *
                 C16157 +
             (C113 * C7019 - C114 * C7016 - C113 * C7020 + C47890 * C7022) *
                 C47961) *
                C47994) *
               C47990) *
              C47749) *
         C47658) /
            (p * q * std::sqrt(p + q));
    d2ee[158] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C122 - C114 * C115 - C113 * C123 + C47890 * C136) *
                  C16157 +
              C174 * C47961) *
                 C31617 +
             (C31912 + C31913) * C47994) *
                C47787 -
            ((C31914 + C31915) * C47994 + (C31913 + C31912) * C31617) * C47794 +
            ((C31915 + C31914) * C31617 + (C33598 + C33599) * C47994) * C3810) *
               C2540 +
           (((C32380 + C32381) * C31617 + (C32760 + C32761) * C47994) * C47794 -
            ((C32381 + C32380) * C47994 +
             (C372 * C47961 +
              (C113 * C308 - C114 * C296 - C113 * C309 + C47890 * C326) *
                  C16157) *
                 C31617) *
                C47787 -
            ((C34060 + C34061) * C47994 + (C32761 + C32760) * C31617) * C3810) *
               C47749) *
              C47928 +
          ((((C31916 + C31917) * C31617 + (C31918 + C31919) * C47994) * C47794 -
            ((C31917 + C31916) * C47994 +
             (C175 * C47961 + C174 * C16157) * C31617) *
                C47787 -
            ((C33928 + C33929) * C47994 + (C31919 + C31918) * C31617) * C3810) *
               C2540 +
           (((C372 * C16157 + C371 * C47961) * C31617 +
             (C32382 + C32383) * C47994) *
                C47787 -
            ((C33796 + C33797) * C47994 + (C32383 + C32382) * C31617) * C47794 +
            ((C33797 + C33796) * C31617 +
             (C12838 * C16157 +
              (C113 * C2437 - C114 * C2432 - C113 * C2438 + C47890 * C2441) *
                  C47961) *
                 C47994) *
                C3810) *
               C47749) *
              C47669)) /
        (p * q * std::sqrt(p + q));
    d2ee[159] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C122 - C114 * C115 - C113 * C123 + C47890 * C136) *
                  C16157 +
              C174 * C47961) *
                 C31617 +
             (C31912 + C31913) * C47994) *
                C3302 -
            ((C31914 + C31915) * C47994 + (C31913 + C31912) * C31617) *
                C47791) *
               C2540 +
           (((C32380 + C32381) * C31617 + (C32760 + C32761) * C47994) * C47791 -
            ((C32381 + C32380) * C47994 +
             (C372 * C47961 +
              (C113 * C308 - C114 * C296 - C113 * C309 + C47890 * C326) *
                  C16157) *
                 C31617) *
                C3302) *
               C47749) *
              C48010 +
          ((((C31916 + C31917) * C31617 + (C31918 + C31919) * C47994) * C47791 -
            ((C31917 + C31916) * C47994 +
             (C175 * C47961 + C174 * C16157) * C31617) *
                C3302) *
               C2540 +
           (((C372 * C16157 + C371 * C47961) * C31617 +
             (C32382 + C32383) * C47994) *
                C3302 -
            ((C33796 + C33797) * C47994 + (C32383 + C32382) * C31617) *
                C47791) *
               C47749) *
              C47997 +
          ((((C175 * C16157 + C176 * C47961) * C31617 +
             (C31920 + C31921) * C47994) *
                C3302 -
            ((C31922 + C31923) * C47994 + (C31921 + C31920) * C31617) *
                C47791) *
               C2540 +
           (((C32384 + C32385) * C31617 +
             (C2211 * C16157 +
              (C113 * C2195 - C114 * C2194 - C113 * C2196 + C47890 * C2197) *
                  C47961) *
                 C47994) *
                C47791 -
            ((C32385 + C32384) * C47994 +
             (C375 * C47961 + C371 * C16157) * C31617) *
                C3302) *
               C47749) *
              C47968)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C47890 * C136) *
                 C16157 +
             C174 * C47961) *
                C31617 +
            (C31912 + C31913) * C47994) *
               C3302 -
           ((C31914 + C31915) * C47994 + (C31913 + C31912) * C31617) * C47791) *
              C48020 +
          (((C32380 + C32381) * C31617 + (C32760 + C32761) * C47994) * C47791 -
           ((C32381 + C32380) * C47994 +
            (C372 * C47961 +
             (C113 * C308 - C114 * C296 - C113 * C309 + C47890 * C326) *
                 C16157) *
                C31617) *
               C3302) *
              C48016 +
          ((((C113 * C310 - C114 * C297 - C113 * C311 + C47890 * C327) *
                 C16157 +
             C373 * C47961) *
                C31617 +
            (C32762 + C32763) * C47994) *
               C3302 -
           ((C32764 + C32765) * C47994 + (C32763 + C32762) * C31617) * C47791) *
              C48006 +
          (((C33222 + C33223) * C31617 +
            ((C113 * C6145 - C114 * C6143 - C113 * C6146 + C47890 * C6149) *
                 C16157 +
             (C113 * C6147 - C114 * C6144 - C113 * C6148 + C47890 * C6150) *
                 C47961) *
                C47994) *
               C47791 -
           ((C33223 + C33222) * C47994 +
            (C1460 * C47961 +
             (C113 * C1178 - C114 * C1170 - C113 * C1179 + C47890 * C1188) *
                 C16157) *
                C31617) *
               C3302) *
              C47984) *
         C47658) /
            (p * q * std::sqrt(p + q));
    d2ee[160] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C47890 * C136) *
                 C16157 +
             C174 * C47961) *
                C31617 +
            (C31912 + C31913) * C47994) *
               C47704 * C1436 -
           ((C32381 + C32380) * C47994 +
            (C372 * C47961 +
             (C113 * C308 - C114 * C296 - C113 * C309 + C47890 * C326) *
                 C16157) *
                C31617) *
               C47704 * C1437 +
           (((C113 * C310 - C114 * C297 - C113 * C311 + C47890 * C327) *
                 C16157 +
             C373 * C47961) *
                C31617 +
            (C32762 + C32763) * C47994) *
               C47704 * C1438 -
           ((C11893 * C47961 + C12227 * C16157) * C47994 +
            (C1460 * C47961 +
             (C113 * C1178 - C114 * C1170 - C113 * C1179 + C47890 * C1188) *
                 C16157) *
                C31617) *
               C47704 * C47984) *
              C47928 +
          (((C372 * C16157 + C371 * C47961) * C31617 +
            (C32382 + C32383) * C47994) *
               C47704 * C1437 -
           ((C31917 + C31916) * C47994 +
            (C175 * C47961 + C174 * C16157) * C31617) *
               C47704 * C1436 -
           ((C1623 * C47961 + C1624 * C16157) * C47994 +
            (C374 * C47961 + C373 * C16157) * C31617) *
               C47704 * C1438 +
           ((C1460 * C16157 + C1459 * C47961) * C31617 +
            (C11893 * C16157 +
             (C113 * C1729 - C114 * C1724 - C113 * C1730 + C47890 * C1733) *
                 C47961) *
                C47994) *
               C47704 * C47984) *
              C47669)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C47890 * C136) *
                 C16157 +
             C174 * C47961) *
                C31617 +
            (C31912 + C31913) * C47994) *
               C47704 * C47942 -
           ((C982 * C47961 + C11347 * C16157) * C47994 +
            (C372 * C47961 +
             (C113 * C308 - C114 * C296 - C113 * C309 + C47890 * C326) *
                 C16157) *
                C31617) *
               C47704 * C47749) *
              C671 +
          (((C372 * C16157 + C371 * C47961) * C31617 +
            (C982 * C16157 + C983 * C47961) * C47994) *
               C47704 * C47749 -
           ((C31917 + C31916) * C47994 +
            (C175 * C47961 + C174 * C16157) * C31617) *
               C47704 * C47942) *
              C672 +
          (((C175 * C16157 + C176 * C47961) * C31617 +
            (C31920 + C31921) * C47994) *
               C47704 * C47942 -
           ((C984 * C47961 + C983 * C16157) * C47994 +
            (C375 * C47961 + C371 * C16157) * C31617) *
               C47704 * C47749) *
              C673 +
          (((C375 * C16157 + C686 * C47961) * C31617 +
            (C984 * C16157 +
             (C113 * C956 - C114 * C947 - C113 * C957 + C47890 * C962) *
                 C47961) *
                C47994) *
               C47704 * C47749 -
           ((C797 * C47961 + C570 * C16157) * C47994 +
            (C177 * C47961 + C176 * C16157) * C31617) *
               C47704 * C47942) *
              C47978)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C122 - C114 * C115 - C113 * C123 + C47890 * C136) *
                  C16157 +
              C174 * C47961) *
                 C31617 +
             (C31912 + C31913) * C47994) *
                C1844 -
            ((C31914 + C31915) * C47994 + (C31913 + C31912) * C31617) * C1845 +
            ((C31915 + C31914) * C31617 + (C33598 + C33599) * C47994) *
                C47977) *
               C47942 +
           (((C32380 + C32381) * C31617 + (C32760 + C32761) * C47994) * C1845 -
            ((C32381 + C32380) * C47994 +
             (C372 * C47961 +
              (C113 * C308 - C114 * C296 - C113 * C309 + C47890 * C326) *
                  C16157) *
                 C31617) *
                C1844 -
            ((C12838 * C47961 + C13108 * C16157) * C47994 +
             (C32761 + C32760) * C31617) *
                C47977) *
               C47749) *
              C47928 +
          ((((C31916 + C31917) * C31617 + (C31918 + C31919) * C47994) * C1845 -
            ((C31917 + C31916) * C47994 +
             (C175 * C47961 + C174 * C16157) * C31617) *
                C1844 -
            ((C2331 * C47961 + C2332 * C16157) * C47994 +
             (C31919 + C31918) * C31617) *
                C47977) *
               C47942 +
           (((C372 * C16157 + C371 * C47961) * C31617 +
             (C32382 + C32383) * C47994) *
                C1844 -
            ((C33796 + C33797) * C47994 + (C32383 + C32382) * C31617) * C1845 +
            ((C33797 + C33796) * C31617 +
             (C12838 * C16157 +
              (C113 * C2437 - C114 * C2432 - C113 * C2438 + C47890 * C2441) *
                  C47961) *
                 C47994) *
                C47977) *
               C47749) *
              C47669)) /
            (p * q * std::sqrt(p + q));
    d2ee[161] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C47890 * C136) *
                 C16157 +
             C174 * C47961) *
                C31617 +
            (C31912 + C31913) * C47994) *
               C47943 -
           ((C31914 + C31915) * C47994 + (C31913 + C31912) * C31617) * C47791) *
              C1436 +
          (((C32380 + C32381) * C31617 + (C32760 + C32761) * C47994) * C47791 -
           ((C32381 + C32380) * C47994 +
            (C372 * C47961 +
             (C113 * C308 - C114 * C296 - C113 * C309 + C47890 * C326) *
                 C16157) *
                C31617) *
               C47943) *
              C1437 +
          ((((C113 * C310 - C114 * C297 - C113 * C311 + C47890 * C327) *
                 C16157 +
             C373 * C47961) *
                C31617 +
            (C32762 + C32763) * C47994) *
               C47943 -
           ((C32764 + C32765) * C47994 + (C32763 + C32762) * C31617) * C47791) *
              C1438 +
          (((C33222 + C33223) * C31617 +
            ((C113 * C6145 - C114 * C6143 - C113 * C6146 + C47890 * C6149) *
                 C16157 +
             (C113 * C6147 - C114 * C6144 - C113 * C6148 + C47890 * C6150) *
                 C47961) *
                C47994) *
               C47791 -
           ((C33223 + C33222) * C47994 +
            (C1460 * C47961 +
             (C113 * C1178 - C114 * C1170 - C113 * C1179 + C47890 * C1188) *
                 C16157) *
                C31617) *
               C47943) *
              C47984) *
         C47658) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C122 - C114 * C115 - C113 * C123 + C47890 * C136) *
                  C16157 +
              C174 * C47961) *
                 C31617 +
             (C31912 + C31913) * C47994) *
                C47943 -
            ((C31914 + C31915) * C47994 + (C31913 + C31912) * C31617) *
                C47791) *
               C47942 +
           (((C32380 + C32381) * C31617 +
             (C11749 * C16157 + C2212 * C47961) * C47994) *
                C47791 -
            ((C32381 + C32380) * C47994 +
             (C372 * C47961 +
              (C113 * C308 - C114 * C296 - C113 * C309 + C47890 * C326) *
                  C16157) *
                 C31617) *
                C47943) *
               C47749) *
              C291 +
          ((((C31916 + C31917) * C31617 + (C31918 + C31919) * C47994) * C47791 -
            ((C31917 + C31916) * C47994 +
             (C175 * C47961 + C174 * C16157) * C31617) *
                C47943) *
               C47942 +
           (((C372 * C16157 + C371 * C47961) * C31617 +
             (C32382 + C32383) * C47994) *
                C47943 -
            ((C2211 * C47961 + C2212 * C16157) * C47994 +
             (C32383 + C32382) * C31617) *
                C47791) *
               C47749) *
              C292 +
          ((((C175 * C16157 + C176 * C47961) * C31617 +
             (C31920 + C31921) * C47994) *
                C47943 -
            ((C31922 + C31923) * C47994 + (C31921 + C31920) * C31617) *
                C47791) *
               C47942 +
           (((C32384 + C32385) * C31617 +
             (C2211 * C16157 +
              (C113 * C2195 - C114 * C2194 - C113 * C2196 + C47890 * C2197) *
                  C47961) *
                 C47994) *
                C47791 -
            ((C32385 + C32384) * C47994 +
             (C375 * C47961 + C371 * C16157) * C31617) *
                C47943) *
               C47749) *
              C47968)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C47890 * C136) *
                 C16157 +
             C174 * C47961) *
                C31617 +
            (C31912 + C31913) * C47994) *
               C2310 -
           ((C31914 + C31915) * C47994 + (C31913 + C31912) * C31617) * C2311 +
           ((C31915 + C31914) * C31617 + (C33598 + C33599) * C47994) * C2312 -
           ((C33600 + C33601) * C47994 + (C33599 + C33598) * C31617) * C47990) *
              C47942 +
          (((C32380 + C32381) * C31617 + (C32760 + C32761) * C47994) * C2311 -
           ((C32381 + C32380) * C47994 +
            (C372 * C47961 +
             (C113 * C308 - C114 * C296 - C113 * C309 + C47890 * C326) *
                 C16157) *
                C31617) *
               C2310 -
           ((C34060 + C34061) * C47994 + (C32761 + C32760) * C31617) * C2312 +
           ((C34061 + C34060) * C31617 +
            ((C113 * C7017 - C114 * C7015 - C113 * C7018 + C47890 * C7021) *
                 C16157 +
             (C113 * C7019 - C114 * C7016 - C113 * C7020 + C47890 * C7022) *
                 C47961) *
                C47994) *
               C47990) *
              C47749) *
         C47658) /
            (p * q * std::sqrt(p + q));
    d2ee[162] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C113 * C122 - C114 * C115 - C113 * C123 + C47890 * C136) *
                    C16157 +
                C174 * C47961) *
                   C31617 +
               (C10876 * C16157 + C567 * C47961) * C47994) *
                  C47704 * C47686 * C108 -
              ((C566 * C47961 + C567 * C16157) * C47994 +
               (C175 * C47961 + C174 * C16157) * C31617) *
                  C47704 * C47686 * C109 +
              ((C175 * C16157 + C176 * C47961) * C31617 +
               (C566 * C16157 + C570 * C47961) * C47994) *
                  C47704 * C47686 * C110 -
              ((C797 * C47961 + C570 * C16157) * C47994 +
               (C177 * C47961 + C176 * C16157) * C31617) *
                  C47704 * C47686 * C111 +
              ((C177 * C16157 + C178 * C47961) * C31617 +
               (C797 * C16157 +
                (C113 * C787 - C114 * C786 - C113 * C788 + C47890 * C789) *
                    C47961) *
                   C47994) *
                  C47704 * C47686 * C112) +
         0.5 * std::pow(Pi, 2.5) *
             (((((C113 * C122 - C114 * C115 - C113 * C123 + C47890 * C136) *
                     C16157 +
                 C174 * C47961) *
                    C31617 +
                (C10876 * C16157 + C567 * C47961) * C47994) *
                   C47704 * C48013 -
               ((C982 * C47961 + C11347 * C16157) * C47994 +
                (C372 * C47961 +
                 (C113 * C308 - C114 * C296 - C113 * C309 + C47890 * C326) *
                     C16157) *
                    C31617) *
                   C47704 * C48001 +
               (((C113 * C310 - C114 * C297 - C113 * C311 + C47890 * C327) *
                     C16157 +
                 C373 * C47961) *
                    C31617 +
                (C11750 * C16157 + C1624 * C47961) * C47994) *
                   C47704 * C47974) *
                  C291 +
              (((C372 * C16157 + C371 * C47961) * C31617 +
                (C982 * C16157 + C983 * C47961) * C47994) *
                   C47704 * C48001 -
               ((C566 * C47961 + C567 * C16157) * C47994 +
                (C175 * C47961 + C174 * C16157) * C31617) *
                   C47704 * C48013 -
               ((C1623 * C47961 + C1624 * C16157) * C47994 +
                (C374 * C47961 + C373 * C16157) * C31617) *
                   C47704 * C47974) *
                  C292 +
              (((C175 * C16157 + C176 * C47961) * C31617 +
                (C566 * C16157 + C570 * C47961) * C47994) *
                   C47704 * C48013 -
               ((C984 * C47961 + C983 * C16157) * C47994 +
                (C375 * C47961 + C371 * C16157) * C31617) *
                   C47704 * C48001 +
               ((C374 * C16157 + C376 * C47961) * C31617 +
                (C1623 * C16157 +
                 (C113 * C1607 - C114 * C1606 - C113 * C1608 + C47890 * C1609) *
                     C47961) *
                    C47994) *
                   C47704 * C47974) *
                  C47968)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C47890 * C136) *
                 C16157 +
             C174 * C47961) *
                C31617 +
            (C31912 + C31913) * C47994) *
               C48014 -
           ((C31914 + C31915) * C47994 + (C31913 + C31912) * C31617) * C48003 +
           ((C31915 + C31914) * C31617 +
            (C12630 * C16157 + C2332 * C47961) * C47994) *
               C47977) *
              C47686 * C291 +
          (((C31916 + C31917) * C31617 + (C31918 + C31919) * C47994) * C48003 -
           ((C31917 + C31916) * C47994 +
            (C175 * C47961 + C174 * C16157) * C31617) *
               C48014 -
           ((C2331 * C47961 + C2332 * C16157) * C47994 +
            (C31919 + C31918) * C31617) *
               C47977) *
              C47686 * C292 +
          (((C175 * C16157 + C176 * C47961) * C31617 +
            (C31920 + C31921) * C47994) *
               C48014 -
           ((C31922 + C31923) * C47994 + (C31921 + C31920) * C31617) * C48003 +
           ((C31923 + C31922) * C31617 +
            (C2331 * C16157 +
             (C113 * C2315 - C114 * C2314 - C113 * C2316 + C47890 * C2317) *
                 C47961) *
                C47994) *
               C47977) *
              C47686 * C47968)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C47890 * C136) *
                 C16157 +
             C174 * C47961) *
                C31617 +
            (C31912 + C31913) * C47994) *
               C47704 * C1094 -
           ((C32381 + C32380) * C47994 +
            (C372 * C47961 +
             (C113 * C308 - C114 * C296 - C113 * C309 + C47890 * C326) *
                 C16157) *
                C31617) *
               C47704 * C1095 +
           (((C113 * C310 - C114 * C297 - C113 * C311 + C47890 * C327) *
                 C16157 +
             C373 * C47961) *
                C31617 +
            (C11750 * C16157 + C1624 * C47961) * C47994) *
               C47704 * C47974) *
              C48010 +
          (((C372 * C16157 + C371 * C47961) * C31617 +
            (C32382 + C32383) * C47994) *
               C47704 * C1095 -
           ((C31917 + C31916) * C47994 +
            (C175 * C47961 + C174 * C16157) * C31617) *
               C47704 * C1094 -
           ((C1623 * C47961 + C1624 * C16157) * C47994 +
            (C374 * C47961 + C373 * C16157) * C31617) *
               C47704 * C47974) *
              C47997 +
          (((C175 * C16157 + C176 * C47961) * C31617 +
            (C31920 + C31921) * C47994) *
               C47704 * C1094 -
           ((C32385 + C32384) * C47994 +
            (C375 * C47961 + C371 * C16157) * C31617) *
               C47704 * C1095 +
           ((C374 * C16157 + C376 * C47961) * C31617 +
            (C1623 * C16157 +
             (C113 * C1607 - C114 * C1606 - C113 * C1608 + C47890 * C1609) *
                 C47961) *
                C47994) *
               C47704 * C47974) *
              C47968)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C47890 * C136) * C16157 +
            C174 * C47961) *
               C31617 +
           (C31912 + C31913) * C47994) *
              C47704 * C1162 -
          ((C32381 + C32380) * C47994 +
           (C372 * C47961 +
            (C113 * C308 - C114 * C296 - C113 * C309 + C47890 * C326) *
                C16157) *
               C31617) *
              C47704 * C1163 +
          (((C113 * C310 - C114 * C297 - C113 * C311 + C47890 * C327) * C16157 +
            C373 * C47961) *
               C31617 +
           (C11750 * C16157 + C1624 * C47961) * C47994) *
              C47704 * C1164 -
          ((C11893 * C47961 + C12227 * C16157) * C47994 +
           (C1460 * C47961 +
            (C113 * C1178 - C114 * C1170 - C113 * C1179 + C47890 * C1188) *
                C16157) *
               C31617) *
              C47704 * C1165 +
          (((C113 * C1180 - C114 * C1171 - C113 * C1181 + C47890 * C1189) *
                C16157 +
            (C113 * C1182 - C114 * C1172 - C113 * C1183 + C47890 * C1190) *
                C47961) *
               C31617 +
           ((C113 * C6635 - C114 * C6633 - C113 * C6636 + C47890 * C6639) *
                C16157 +
            (C113 * C6637 - C114 * C6634 - C113 * C6638 + C47890 * C6640) *
                C47961) *
               C47994) *
              C47704 * C1166) *
         C47658) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C47890 * C136) *
                 C16157 +
             C174 * C47961) *
                C31617 +
            (C31912 + C31913) * C47994) *
               C48014 -
           ((C31914 + C31915) * C47994 + (C31913 + C31912) * C31617) * C48003 +
           ((C31915 + C31914) * C31617 +
            (C12630 * C16157 + C2332 * C47961) * C47994) *
               C47977) *
              C1094 +
          (((C32380 + C32381) * C31617 + (C32760 + C32761) * C47994) * C48003 -
           ((C32381 + C32380) * C47994 +
            (C372 * C47961 +
             (C113 * C308 - C114 * C296 - C113 * C309 + C47890 * C326) *
                 C16157) *
                C31617) *
               C48014 -
           ((C12838 * C47961 + C13108 * C16157) * C47994 +
            (C32761 + C32760) * C31617) *
               C47977) *
              C1095 +
          ((((C113 * C310 - C114 * C297 - C113 * C311 + C47890 * C327) *
                 C16157 +
             C373 * C47961) *
                C31617 +
            (C32762 + C32763) * C47994) *
               C48014 -
           ((C32764 + C32765) * C47994 + (C32763 + C32762) * C31617) * C48003 +
           ((C32765 + C32764) * C31617 +
            ((C113 * C7507 - C114 * C7505 - C113 * C7508 + C47890 * C7511) *
                 C16157 +
             (C113 * C7509 - C114 * C7506 - C113 * C7510 + C47890 * C7512) *
                 C47961) *
                C47994) *
               C47977) *
              C47974) *
         C47658) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C47890 * C136) *
                 C16157 +
             C174 * C47961) *
                C31617 +
            (C31912 + C31913) * C47994) *
               C1844 -
           ((C31914 + C31915) * C47994 + (C31913 + C31912) * C31617) * C1845 +
           ((C31915 + C31914) * C31617 +
            (C12630 * C16157 + C2332 * C47961) * C47994) *
               C47977) *
              C47686 * C48010 +
          (((C31916 + C31917) * C31617 + (C31918 + C31919) * C47994) * C1845 -
           ((C31917 + C31916) * C47994 +
            (C175 * C47961 + C174 * C16157) * C31617) *
               C1844 -
           ((C2331 * C47961 + C2332 * C16157) * C47994 +
            (C31919 + C31918) * C31617) *
               C47977) *
              C47686 * C47997 +
          (((C175 * C16157 + C176 * C47961) * C31617 +
            (C31920 + C31921) * C47994) *
               C1844 -
           ((C31922 + C31923) * C47994 + (C31921 + C31920) * C31617) * C1845 +
           ((C31923 + C31922) * C31617 +
            (C2331 * C16157 +
             (C113 * C2315 - C114 * C2314 - C113 * C2316 + C47890 * C2317) *
                 C47961) *
                C47994) *
               C47977) *
              C47686 * C47968)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C47890 * C136) *
                 C16157 +
             C174 * C47961) *
                C31617 +
            (C31912 + C31913) * C47994) *
               C1844 -
           ((C31914 + C31915) * C47994 + (C31913 + C31912) * C31617) * C1845 +
           ((C31915 + C31914) * C31617 +
            (C12630 * C16157 + C2332 * C47961) * C47994) *
               C47977) *
              C48013 +
          (((C32380 + C32381) * C31617 + (C32760 + C32761) * C47994) * C1845 -
           ((C32381 + C32380) * C47994 +
            (C372 * C47961 +
             (C113 * C308 - C114 * C296 - C113 * C309 + C47890 * C326) *
                 C16157) *
                C31617) *
               C1844 -
           ((C12838 * C47961 + C13108 * C16157) * C47994 +
            (C32761 + C32760) * C31617) *
               C47977) *
              C48001 +
          ((((C113 * C310 - C114 * C297 - C113 * C311 + C47890 * C327) *
                 C16157 +
             C373 * C47961) *
                C31617 +
            (C32762 + C32763) * C47994) *
               C1844 -
           ((C32764 + C32765) * C47994 + (C32763 + C32762) * C31617) * C1845 +
           ((C32765 + C32764) * C31617 +
            ((C113 * C7507 - C114 * C7505 - C113 * C7508 + C47890 * C7511) *
                 C16157 +
             (C113 * C7509 - C114 * C7506 - C113 * C7510 + C47890 * C7512) *
                 C47961) *
                C47994) *
               C47977) *
              C47974) *
         C47658) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C47890 * C136) * C16157 +
            C174 * C47961) *
               C31617 +
           (C31912 + C31913) * C47994) *
              C2019 -
          ((C31914 + C31915) * C47994 + (C31913 + C31912) * C31617) * C2020 +
          ((C31915 + C31914) * C31617 + (C33598 + C33599) * C47994) * C2021 -
          ((C33600 + C33601) * C47994 + (C33599 + C33598) * C31617) * C2022 +
          ((C33601 + C33600) * C31617 +
           ((C113 * C12604 - C114 * C12602 - C113 * C12605 + C47890 * C12608) *
                C16157 +
            (C113 * C12606 - C114 * C12603 - C113 * C12607 + C47890 * C12609) *
                C47961) *
               C47994) *
              C2023) *
         C47686 * C47658) /
            (p * q * std::sqrt(p + q));
    d2ee[163] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C122 - C114 * C115 - C113 * C123 + C47890 * C136) *
                  C16157 +
              C174 * C47961) *
                 C31617 +
             (C31912 + C31913) * C47994) *
                C47943 -
            ((C31914 + C31915) * C47994 + (C31913 + C31912) * C31617) *
                C47791) *
               C1094 +
           (((C32380 + C32381) * C31617 + (C32760 + C32761) * C47994) * C47791 -
            ((C32381 + C32380) * C47994 +
             (C372 * C47961 +
              (C113 * C308 - C114 * C296 - C113 * C309 + C47890 * C326) *
                  C16157) *
                 C31617) *
                C47943) *
               C1095 +
           ((((C113 * C310 - C114 * C297 - C113 * C311 + C47890 * C327) *
                  C16157 +
              C373 * C47961) *
                 C31617 +
             (C32762 + C32763) * C47994) *
                C47943 -
            ((C32764 + C32765) * C47994 + (C32763 + C32762) * C31617) *
                C47791) *
               C47974) *
              C47928 +
          ((((C31916 + C31917) * C31617 + (C31918 + C31919) * C47994) * C47791 -
            ((C31917 + C31916) * C47994 +
             (C175 * C47961 + C174 * C16157) * C31617) *
                C47943) *
               C1094 +
           (((C372 * C16157 + C371 * C47961) * C31617 +
             (C32382 + C32383) * C47994) *
                C47943 -
            ((C2211 * C47961 + C2212 * C16157) * C47994 +
             (C32383 + C32382) * C31617) *
                C47791) *
               C1095 +
           (((C33090 + C33091) * C31617 +
             (C11751 * C16157 +
              (C113 * C1327 - C114 * C1310 - C113 * C1328 + C47890 * C1337) *
                  C47961) *
                 C47994) *
                C47791 -
            ((C33091 + C33090) * C47994 +
             (C374 * C47961 + C373 * C16157) * C31617) *
                C47943) *
               C47974) *
              C47669)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C47890 * C136) *
                 C16157 +
             C174 * C47961) *
                C31617 +
            (C31912 + C31913) * C47994) *
               C47943 -
           ((C31914 + C31915) * C47994 + (C31913 + C31912) * C31617) * C47791) *
              C47686 * C671 +
          (((C31916 + C31917) * C31617 + (C31918 + C31919) * C47994) * C47791 -
           ((C31917 + C31916) * C47994 +
            (C175 * C47961 + C174 * C16157) * C31617) *
               C47943) *
              C47686 * C672 +
          (((C175 * C16157 + C176 * C47961) * C31617 +
            (C31920 + C31921) * C47994) *
               C47943 -
           ((C31922 + C31923) * C47994 + (C31921 + C31920) * C31617) * C47791) *
              C47686 * C673 +
          (((C32184 + C32185) * C31617 +
            (C571 * C16157 +
             (C113 * C517 - C114 * C498 - C113 * C518 + C47890 * C528) *
                 C47961) *
                C47994) *
               C47791 -
           ((C32185 + C32184) * C47994 +
            (C177 * C47961 + C176 * C16157) * C31617) *
               C47943) *
              C47686 * C47978)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C47890 * C136) *
                 C16157 +
             C174 * C47961) *
                C31617 +
            (C31912 + C31913) * C47994) *
               C2310 -
           ((C31914 + C31915) * C47994 + (C31913 + C31912) * C31617) * C2311 +
           ((C31915 + C31914) * C31617 + (C33598 + C33599) * C47994) * C2312 -
           ((C33600 + C33601) * C47994 + (C33599 + C33598) * C31617) * C47990) *
              C47686 * C47928 +
          (((C31916 + C31917) * C31617 + (C31918 + C31919) * C47994) * C2311 -
           ((C31917 + C31916) * C47994 +
            (C175 * C47961 + C174 * C16157) * C31617) *
               C2310 -
           ((C33928 + C33929) * C47994 + (C31919 + C31918) * C31617) * C2312 +
           ((C33929 + C33928) * C31617 +
            (C12631 * C16157 +
             (C113 * C2040 - C114 * C2029 - C113 * C2041 + C47890 * C2047) *
                 C47961) *
                C47994) *
               C47990) *
              C47686 * C47669)) /
            (p * q * std::sqrt(p + q));
    d2ee[164] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C47890 * C136) *
                 C16157 +
             C174 * C47961) *
                C31617 +
            (C10876 * C16157 + C567 * C47961) * C47994) *
               C47704 * C48013 -
           ((C982 * C47961 + C11347 * C16157) * C47994 +
            (C372 * C47961 +
             (C113 * C308 - C114 * C296 - C113 * C309 + C47890 * C326) *
                 C16157) *
                C31617) *
               C47704 * C48001 +
           (((C113 * C310 - C114 * C297 - C113 * C311 + C47890 * C327) *
                 C16157 +
             C373 * C47961) *
                C31617 +
            (C11750 * C16157 + C1624 * C47961) * C47994) *
               C47704 * C47974) *
              C291 +
          (((C372 * C16157 + C371 * C47961) * C31617 +
            (C982 * C16157 + C983 * C47961) * C47994) *
               C47704 * C48001 -
           ((C566 * C47961 + C567 * C16157) * C47994 +
            (C175 * C47961 + C174 * C16157) * C31617) *
               C47704 * C48013 -
           ((C1623 * C47961 + C1624 * C16157) * C47994 +
            (C374 * C47961 + C373 * C16157) * C31617) *
               C47704 * C47974) *
              C292 +
          (((C175 * C16157 + C176 * C47961) * C31617 +
            (C566 * C16157 + C570 * C47961) * C47994) *
               C47704 * C48013 -
           ((C984 * C47961 + C983 * C16157) * C47994 +
            (C375 * C47961 + C371 * C16157) * C31617) *
               C47704 * C48001 +
           ((C374 * C16157 + C376 * C47961) * C31617 +
            (C1623 * C16157 +
             (C113 * C1607 - C114 * C1606 - C113 * C1608 + C47890 * C1609) *
                 C47961) *
                C47994) *
               C47704 * C47974) *
              C47968)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C47890 * C136) * C16157 +
            C174 * C47961) *
               C31617 +
           (C10876 * C16157 + C567 * C47961) * C47994) *
              C47704 * C47686 * C108 -
          ((C566 * C47961 + C567 * C16157) * C47994 +
           (C175 * C47961 + C174 * C16157) * C31617) *
              C47704 * C47686 * C109 +
          ((C175 * C16157 + C176 * C47961) * C31617 +
           (C566 * C16157 + C570 * C47961) * C47994) *
              C47704 * C47686 * C110 -
          ((C797 * C47961 + C570 * C16157) * C47994 +
           (C177 * C47961 + C176 * C16157) * C31617) *
              C47704 * C47686 * C111 +
          ((C177 * C16157 + C178 * C47961) * C31617 +
           (C797 * C16157 +
            (C113 * C787 - C114 * C786 - C113 * C788 + C47890 * C789) *
                C47961) *
               C47994) *
              C47704 * C47686 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C47890 * C136) *
                 C16157 +
             C174 * C47961) *
                C31617 +
            (C31912 + C31913) * C47994) *
               C47704 * C1094 -
           ((C32381 + C32380) * C47994 +
            (C372 * C47961 +
             (C113 * C308 - C114 * C296 - C113 * C309 + C47890 * C326) *
                 C16157) *
                C31617) *
               C47704 * C1095 +
           (((C113 * C310 - C114 * C297 - C113 * C311 + C47890 * C327) *
                 C16157 +
             C373 * C47961) *
                C31617 +
            (C11750 * C16157 + C1624 * C47961) * C47994) *
               C47704 * C47974) *
              C48010 +
          (((C372 * C16157 + C371 * C47961) * C31617 +
            (C32382 + C32383) * C47994) *
               C47704 * C1095 -
           ((C31917 + C31916) * C47994 +
            (C175 * C47961 + C174 * C16157) * C31617) *
               C47704 * C1094 -
           ((C1623 * C47961 + C1624 * C16157) * C47994 +
            (C374 * C47961 + C373 * C16157) * C31617) *
               C47704 * C47974) *
              C47997 +
          (((C175 * C16157 + C176 * C47961) * C31617 +
            (C31920 + C31921) * C47994) *
               C47704 * C1094 -
           ((C32385 + C32384) * C47994 +
            (C375 * C47961 + C371 * C16157) * C31617) *
               C47704 * C1095 +
           ((C374 * C16157 + C376 * C47961) * C31617 +
            (C1623 * C16157 +
             (C113 * C1607 - C114 * C1606 - C113 * C1608 + C47890 * C1609) *
                 C47961) *
                C47994) *
               C47704 * C47974) *
              C47968)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C47890 * C136) * C16157 +
            C174 * C47961) *
               C31617 +
           (C31912 + C31913) * C47994) *
              C47704 * C1162 -
          ((C32381 + C32380) * C47994 +
           (C372 * C47961 +
            (C113 * C308 - C114 * C296 - C113 * C309 + C47890 * C326) *
                C16157) *
               C31617) *
              C47704 * C1163 +
          (((C113 * C310 - C114 * C297 - C113 * C311 + C47890 * C327) * C16157 +
            C373 * C47961) *
               C31617 +
           (C11750 * C16157 + C1624 * C47961) * C47994) *
              C47704 * C1164 -
          ((C11893 * C47961 + C12227 * C16157) * C47994 +
           (C1460 * C47961 +
            (C113 * C1178 - C114 * C1170 - C113 * C1179 + C47890 * C1188) *
                C16157) *
               C31617) *
              C47704 * C1165 +
          (((C113 * C1180 - C114 * C1171 - C113 * C1181 + C47890 * C1189) *
                C16157 +
            (C113 * C1182 - C114 * C1172 - C113 * C1183 + C47890 * C1190) *
                C47961) *
               C31617 +
           ((C113 * C6635 - C114 * C6633 - C113 * C6636 + C47890 * C6639) *
                C16157 +
            (C113 * C6637 - C114 * C6634 - C113 * C6638 + C47890 * C6640) *
                C47961) *
               C47994) *
              C47704 * C1166) *
         C47658) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C47890 * C136) *
                 C16157 +
             C174 * C47961) *
                C31617 +
            (C31912 + C31913) * C47994) *
               C1844 -
           ((C31914 + C31915) * C47994 + (C31913 + C31912) * C31617) * C1845 +
           ((C31915 + C31914) * C31617 +
            (C12630 * C16157 + C2332 * C47961) * C47994) *
               C47977) *
              C47686 * C48010 +
          (((C31916 + C31917) * C31617 + (C31918 + C31919) * C47994) * C1845 -
           ((C31917 + C31916) * C47994 +
            (C175 * C47961 + C174 * C16157) * C31617) *
               C1844 -
           ((C2331 * C47961 + C2332 * C16157) * C47994 +
            (C31919 + C31918) * C31617) *
               C47977) *
              C47686 * C47997 +
          (((C175 * C16157 + C176 * C47961) * C31617 +
            (C31920 + C31921) * C47994) *
               C1844 -
           ((C31922 + C31923) * C47994 + (C31921 + C31920) * C31617) * C1845 +
           ((C31923 + C31922) * C31617 +
            (C2331 * C16157 +
             (C113 * C2315 - C114 * C2314 - C113 * C2316 + C47890 * C2317) *
                 C47961) *
                C47994) *
               C47977) *
              C47686 * C47968)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C47890 * C136) *
                 C16157 +
             C174 * C47961) *
                C31617 +
            (C31912 + C31913) * C47994) *
               C1844 -
           ((C31914 + C31915) * C47994 + (C31913 + C31912) * C31617) * C1845 +
           ((C31915 + C31914) * C31617 +
            (C12630 * C16157 + C2332 * C47961) * C47994) *
               C47977) *
              C48013 +
          (((C32380 + C32381) * C31617 + (C32760 + C32761) * C47994) * C1845 -
           ((C32381 + C32380) * C47994 +
            (C372 * C47961 +
             (C113 * C308 - C114 * C296 - C113 * C309 + C47890 * C326) *
                 C16157) *
                C31617) *
               C1844 -
           ((C12838 * C47961 + C13108 * C16157) * C47994 +
            (C32761 + C32760) * C31617) *
               C47977) *
              C48001 +
          ((((C113 * C310 - C114 * C297 - C113 * C311 + C47890 * C327) *
                 C16157 +
             C373 * C47961) *
                C31617 +
            (C32762 + C32763) * C47994) *
               C1844 -
           ((C32764 + C32765) * C47994 + (C32763 + C32762) * C31617) * C1845 +
           ((C32765 + C32764) * C31617 +
            ((C113 * C7507 - C114 * C7505 - C113 * C7508 + C47890 * C7511) *
                 C16157 +
             (C113 * C7509 - C114 * C7506 - C113 * C7510 + C47890 * C7512) *
                 C47961) *
                C47994) *
               C47977) *
              C47974) *
         C47658) /
            (p * q * std::sqrt(p + q));
    d2ee[165] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C122 - C114 * C115 - C113 * C123 + C47890 * C136) *
                  C16157 +
              C174 * C47961) *
                 C31617 +
             (C31912 + C31913) * C47994) *
                C3302 -
            ((C31914 + C31915) * C47994 + (C31913 + C31912) * C31617) *
                C47791) *
               C47942 +
           (((C32380 + C32381) * C31617 + (C32760 + C32761) * C47994) * C47791 -
            ((C32381 + C32380) * C47994 +
             (C372 * C47961 +
              (C113 * C308 - C114 * C296 - C113 * C309 + C47890 * C326) *
                  C16157) *
                 C31617) *
                C3302) *
               C47749) *
              C47663 +
          ((((C31916 + C31917) * C31617 + (C31918 + C31919) * C47994) * C47791 -
            ((C31917 + C31916) * C47994 +
             (C175 * C47961 + C174 * C16157) * C31617) *
                C3302) *
               C47942 +
           (((C372 * C16157 + C371 * C47961) * C31617 +
             (C32382 + C32383) * C47994) *
                C3302 -
            ((C33796 + C33797) * C47994 + (C32383 + C32382) * C31617) *
                C47791) *
               C47749) *
              C47672 +
          ((((C175 * C16157 + C176 * C47961) * C31617 +
             (C31920 + C31921) * C47994) *
                C3302 -
            ((C31922 + C31923) * C47994 + (C31921 + C31920) * C31617) *
                C47791) *
               C47942 +
           (((C32384 + C32385) * C31617 +
             (C2211 * C16157 +
              (C113 * C2195 - C114 * C2194 - C113 * C2196 + C47890 * C2197) *
                  C47961) *
                 C47994) *
                C47791 -
            ((C32385 + C32384) * C47994 +
             (C375 * C47961 + C371 * C16157) * C31617) *
                C3302) *
               C47749) *
              C2911)) /
        (p * q * std::sqrt(p + q));
    d2ee[166] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C122 - C114 * C115 - C113 * C123 + C47890 * C136) *
                  C16157 +
              C174 * C47961) *
                 C31617 +
             (C31912 + C31913) * C47994) *
                C47787 -
            ((C31914 + C31915) * C47994 + (C31913 + C31912) * C31617) * C47794 +
            ((C31915 + C31914) * C31617 + (C33598 + C33599) * C47994) * C3810) *
               C47942 +
           (((C32380 + C32381) * C31617 + (C32760 + C32761) * C47994) * C47794 -
            ((C32381 + C32380) * C47994 +
             (C372 * C47961 +
              (C113 * C308 - C114 * C296 - C113 * C309 + C47890 * C326) *
                  C16157) *
                 C31617) *
                C47787 -
            ((C34060 + C34061) * C47994 + (C32761 + C32760) * C31617) * C3810) *
               C47749) *
              C2648 +
          ((((C31916 + C31917) * C31617 + (C31918 + C31919) * C47994) * C47794 -
            ((C31917 + C31916) * C47994 +
             (C175 * C47961 + C174 * C16157) * C31617) *
                C47787 -
            ((C33928 + C33929) * C47994 + (C31919 + C31918) * C31617) * C3810) *
               C47942 +
           (((C372 * C16157 + C371 * C47961) * C31617 +
             (C32382 + C32383) * C47994) *
                C47787 -
            ((C33796 + C33797) * C47994 + (C32383 + C32382) * C31617) * C47794 +
            ((C33797 + C33796) * C31617 +
             (C12838 * C16157 +
              (C113 * C2437 - C114 * C2432 - C113 * C2438 + C47890 * C2441) *
                  C47961) *
                 C47994) *
                C3810) *
               C47749) *
              C47669)) /
        (p * q * std::sqrt(p + q));
    d2ee[167] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C122 - C114 * C115 - C113 * C123 + C47890 * C136) *
                  C16157 +
              C174 * C47961) *
                 C31617 +
             (C31912 + C31913) * C47994) *
                C3302 -
            ((C31914 + C31915) * C47994 + (C31913 + C31912) * C31617) *
                C47791) *
               C48013 +
           (((C32380 + C32381) * C31617 + (C32760 + C32761) * C47994) * C47791 -
            ((C32381 + C32380) * C47994 +
             (C372 * C47961 +
              (C113 * C308 - C114 * C296 - C113 * C309 + C47890 * C326) *
                  C16157) *
                 C31617) *
                C3302) *
               C48001 +
           ((((C113 * C310 - C114 * C297 - C113 * C311 + C47890 * C327) *
                  C16157 +
              C373 * C47961) *
                 C31617 +
             (C32762 + C32763) * C47994) *
                C3302 -
            ((C32764 + C32765) * C47994 + (C32763 + C32762) * C31617) *
                C47791) *
               C47974) *
              C2648 +
          ((((C31916 + C31917) * C31617 + (C31918 + C31919) * C47994) * C47791 -
            ((C31917 + C31916) * C47994 +
             (C175 * C47961 + C174 * C16157) * C31617) *
                C3302) *
               C48013 +
           (((C372 * C16157 + C371 * C47961) * C31617 +
             (C32382 + C32383) * C47994) *
                C3302 -
            ((C33796 + C33797) * C47994 + (C32383 + C32382) * C31617) *
                C47791) *
               C48001 +
           (((C33090 + C33091) * C31617 +
             (C11751 * C16157 +
              (C113 * C1327 - C114 * C1310 - C113 * C1328 + C47890 * C1337) *
                  C47961) *
                 C47994) *
                C47791 -
            ((C33091 + C33090) * C47994 +
             (C374 * C47961 + C373 * C16157) * C31617) *
                C3302) *
               C47974) *
              C47669)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C47890 * C136) *
                 C16157 +
             C174 * C47961) *
                C31617 +
            (C31912 + C31913) * C47994) *
               C3302 -
           ((C31914 + C31915) * C47994 + (C31913 + C31912) * C31617) * C47791) *
              C47686 * C48019 +
          (((C31916 + C31917) * C31617 + (C31918 + C31919) * C47994) * C47791 -
           ((C31917 + C31916) * C47994 +
            (C175 * C47961 + C174 * C16157) * C31617) *
               C3302) *
              C47686 * C48012 +
          (((C175 * C16157 + C176 * C47961) * C31617 +
            (C31920 + C31921) * C47994) *
               C3302 -
           ((C31922 + C31923) * C47994 + (C31921 + C31920) * C31617) * C47791) *
              C47686 * C47999 +
          (((C32184 + C32185) * C31617 +
            (C571 * C16157 +
             (C113 * C517 - C114 * C498 - C113 * C518 + C47890 * C528) *
                 C47961) *
                C47994) *
               C47791 -
           ((C32185 + C32184) * C47994 +
            (C177 * C47961 + C176 * C16157) * C31617) *
               C3302) *
              C47686 * C47978)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C47890 * C136) *
                 C16157 +
             C174 * C47961) *
                C31617 +
            (C31912 + C31913) * C47994) *
               C48021 -
           ((C31914 + C31915) * C47994 + (C31913 + C31912) * C31617) * C48018 +
           ((C31915 + C31914) * C31617 + (C33598 + C33599) * C47994) * C48009 -
           ((C33600 + C33601) * C47994 + (C33599 + C33598) * C31617) * C47990) *
              C47686 * C2648 +
          (((C31916 + C31917) * C31617 + (C31918 + C31919) * C47994) * C48018 -
           ((C31917 + C31916) * C47994 +
            (C175 * C47961 + C174 * C16157) * C31617) *
               C48021 -
           ((C33928 + C33929) * C47994 + (C31919 + C31918) * C31617) * C48009 +
           ((C33929 + C33928) * C31617 +
            (C12631 * C16157 +
             (C113 * C2040 - C114 * C2029 - C113 * C2041 + C47890 * C2047) *
                 C47961) *
                C47994) *
               C47990) *
              C47686 * C47669)) /
            (p * q * std::sqrt(p + q));
    d2ee[168] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C47890 * C136) *
                 C16157 +
             C174 * C47961) *
                C31617 +
            (C31912 + C31913) * C47994) *
               C47787 -
           ((C31914 + C31915) * C47994 + (C31913 + C31912) * C31617) * C47794 +
           ((C31915 + C31914) * C31617 + (C33598 + C33599) * C47994) * C3810) *
              C47686 * C47663 +
          (((C31916 + C31917) * C31617 + (C31918 + C31919) * C47994) * C47794 -
           ((C31917 + C31916) * C47994 +
            (C175 * C47961 + C174 * C16157) * C31617) *
               C47787 -
           ((C33928 + C33929) * C47994 + (C31919 + C31918) * C31617) * C3810) *
              C47686 * C47672 +
          (((C175 * C16157 + C176 * C47961) * C31617 +
            (C31920 + C31921) * C47994) *
               C47787 -
           ((C31922 + C31923) * C47994 + (C31921 + C31920) * C31617) * C47794 +
           ((C31923 + C31922) * C31617 +
            (C2331 * C16157 +
             (C113 * C2315 - C114 * C2314 - C113 * C2316 + C47890 * C2317) *
                 C47961) *
                C47994) *
               C3810) *
              C47686 * C2911)) /
        (p * q * std::sqrt(p + q));
    d2ee[169] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C47890 * C136) *
                 C16157 +
             C174 * C47961) *
                C31617 +
            (C31912 + C31913) * C47994) *
               C3302 -
           ((C31914 + C31915) * C47994 + (C31913 + C31912) * C31617) * C47791) *
              C47686 * C48019 +
          (((C31916 + C31917) * C31617 + (C31918 + C31919) * C47994) * C47791 -
           ((C31917 + C31916) * C47994 +
            (C175 * C47961 + C174 * C16157) * C31617) *
               C3302) *
              C47686 * C48012 +
          (((C175 * C16157 + C176 * C47961) * C31617 +
            (C31920 + C31921) * C47994) *
               C3302 -
           ((C31922 + C31923) * C47994 + (C31921 + C31920) * C31617) * C47791) *
              C47686 * C47999 +
          (((C32184 + C32185) * C31617 +
            (C571 * C16157 +
             (C113 * C517 - C114 * C498 - C113 * C518 + C47890 * C528) *
                 C47961) *
                C47994) *
               C47791 -
           ((C32185 + C32184) * C47994 +
            (C177 * C47961 + C176 * C16157) * C31617) *
               C3302) *
              C47686 * C47978)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C122 - C114 * C115 - C113 * C123 + C47890 * C136) *
                  C16157 +
              C174 * C47961) *
                 C31617 +
             (C31912 + C31913) * C47994) *
                C3302 -
            ((C31914 + C31915) * C47994 + (C31913 + C31912) * C31617) *
                C47791) *
               C48013 +
           (((C32380 + C32381) * C31617 + (C32760 + C32761) * C47994) * C47791 -
            ((C32381 + C32380) * C47994 +
             (C372 * C47961 +
              (C113 * C308 - C114 * C296 - C113 * C309 + C47890 * C326) *
                  C16157) *
                 C31617) *
                C3302) *
               C48001 +
           ((((C113 * C310 - C114 * C297 - C113 * C311 + C47890 * C327) *
                  C16157 +
              C373 * C47961) *
                 C31617 +
             (C32762 + C32763) * C47994) *
                C3302 -
            ((C32764 + C32765) * C47994 + (C32763 + C32762) * C31617) *
                C47791) *
               C47974) *
              C2648 +
          ((((C31916 + C31917) * C31617 + (C31918 + C31919) * C47994) * C47791 -
            ((C31917 + C31916) * C47994 +
             (C175 * C47961 + C174 * C16157) * C31617) *
                C3302) *
               C48013 +
           (((C372 * C16157 + C371 * C47961) * C31617 +
             (C32382 + C32383) * C47994) *
                C3302 -
            ((C33796 + C33797) * C47994 + (C32383 + C32382) * C31617) *
                C47791) *
               C48001 +
           (((C33090 + C33091) * C31617 +
             (C11751 * C16157 +
              (C113 * C1327 - C114 * C1310 - C113 * C1328 + C47890 * C1337) *
                  C47961) *
                 C47994) *
                C47791 -
            ((C33091 + C33090) * C47994 +
             (C374 * C47961 + C373 * C16157) * C31617) *
                C3302) *
               C47974) *
              C47669)) /
            (p * q * std::sqrt(p + q));
    d2ee[170] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C47890 * C136) *
                 C16157 +
             C174 * C47961) *
                C31617 +
            (C31912 + C31913) * C47994) *
               C47704 * C47942 -
           ((C982 * C47961 + C11347 * C16157) * C47994 +
            (C372 * C47961 +
             (C113 * C308 - C114 * C296 - C113 * C309 + C47890 * C326) *
                 C16157) *
                C31617) *
               C47704 * C47749) *
              C671 +
          (((C372 * C16157 + C371 * C47961) * C31617 +
            (C982 * C16157 + C983 * C47961) * C47994) *
               C47704 * C47749 -
           ((C31917 + C31916) * C47994 +
            (C175 * C47961 + C174 * C16157) * C31617) *
               C47704 * C47942) *
              C672 +
          (((C175 * C16157 + C176 * C47961) * C31617 +
            (C31920 + C31921) * C47994) *
               C47704 * C47942 -
           ((C984 * C47961 + C983 * C16157) * C47994 +
            (C375 * C47961 + C371 * C16157) * C31617) *
               C47704 * C47749) *
              C673 +
          (((C375 * C16157 + C686 * C47961) * C31617 +
            (C984 * C16157 +
             (C113 * C956 - C114 * C947 - C113 * C957 + C47890 * C962) *
                 C47961) *
                C47994) *
               C47704 * C47749 -
           ((C797 * C47961 + C570 * C16157) * C47994 +
            (C177 * C47961 + C176 * C16157) * C31617) *
               C47704 * C47942) *
              C47978)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C47890 * C136) *
                 C16157 +
             C174 * C47961) *
                C31617 +
            (C31912 + C31913) * C47994) *
               C47704 * C1436 -
           ((C32381 + C32380) * C47994 +
            (C372 * C47961 +
             (C113 * C308 - C114 * C296 - C113 * C309 + C47890 * C326) *
                 C16157) *
                C31617) *
               C47704 * C1437 +
           (((C113 * C310 - C114 * C297 - C113 * C311 + C47890 * C327) *
                 C16157 +
             C373 * C47961) *
                C31617 +
            (C32762 + C32763) * C47994) *
               C47704 * C1438 -
           ((C11893 * C47961 + C12227 * C16157) * C47994 +
            (C1460 * C47961 +
             (C113 * C1178 - C114 * C1170 - C113 * C1179 + C47890 * C1188) *
                 C16157) *
                C31617) *
               C47704 * C47984) *
              C47928 +
          (((C372 * C16157 + C371 * C47961) * C31617 +
            (C32382 + C32383) * C47994) *
               C47704 * C1437 -
           ((C31917 + C31916) * C47994 +
            (C175 * C47961 + C174 * C16157) * C31617) *
               C47704 * C1436 -
           ((C1623 * C47961 + C1624 * C16157) * C47994 +
            (C374 * C47961 + C373 * C16157) * C31617) *
               C47704 * C1438 +
           ((C1460 * C16157 + C1459 * C47961) * C31617 +
            (C11893 * C16157 +
             (C113 * C1729 - C114 * C1724 - C113 * C1730 + C47890 * C1733) *
                 C47961) *
                C47994) *
               C47704 * C47984) *
              C47669)) /
            (p * q * std::sqrt(p + q));
    d2ee[171] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C122 - C114 * C115 - C113 * C123 + C47890 * C136) *
                  C16157 +
              C174 * C47961) *
                 C31617 +
             (C31912 + C31913) * C47994) *
                C47943 -
            ((C31914 + C31915) * C47994 + (C31913 + C31912) * C31617) *
                C47791) *
               C47942 +
           (((C32380 + C32381) * C31617 +
             (C11749 * C16157 + C2212 * C47961) * C47994) *
                C47791 -
            ((C32381 + C32380) * C47994 +
             (C372 * C47961 +
              (C113 * C308 - C114 * C296 - C113 * C309 + C47890 * C326) *
                  C16157) *
                 C31617) *
                C47943) *
               C47749) *
              C291 +
          ((((C31916 + C31917) * C31617 + (C31918 + C31919) * C47994) * C47791 -
            ((C31917 + C31916) * C47994 +
             (C175 * C47961 + C174 * C16157) * C31617) *
                C47943) *
               C47942 +
           (((C372 * C16157 + C371 * C47961) * C31617 +
             (C32382 + C32383) * C47994) *
                C47943 -
            ((C2211 * C47961 + C2212 * C16157) * C47994 +
             (C32383 + C32382) * C31617) *
                C47791) *
               C47749) *
              C292 +
          ((((C175 * C16157 + C176 * C47961) * C31617 +
             (C31920 + C31921) * C47994) *
                C47943 -
            ((C31922 + C31923) * C47994 + (C31921 + C31920) * C31617) *
                C47791) *
               C47942 +
           (((C32384 + C32385) * C31617 +
             (C2211 * C16157 +
              (C113 * C2195 - C114 * C2194 - C113 * C2196 + C47890 * C2197) *
                  C47961) *
                 C47994) *
                C47791 -
            ((C32385 + C32384) * C47994 +
             (C375 * C47961 + C371 * C16157) * C31617) *
                C47943) *
               C47749) *
              C47968)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C47890 * C136) *
                 C16157 +
             C174 * C47961) *
                C31617 +
            (C31912 + C31913) * C47994) *
               C47943 -
           ((C31914 + C31915) * C47994 + (C31913 + C31912) * C31617) * C47791) *
              C1436 +
          (((C32380 + C32381) * C31617 + (C32760 + C32761) * C47994) * C47791 -
           ((C32381 + C32380) * C47994 +
            (C372 * C47961 +
             (C113 * C308 - C114 * C296 - C113 * C309 + C47890 * C326) *
                 C16157) *
                C31617) *
               C47943) *
              C1437 +
          ((((C113 * C310 - C114 * C297 - C113 * C311 + C47890 * C327) *
                 C16157 +
             C373 * C47961) *
                C31617 +
            (C32762 + C32763) * C47994) *
               C47943 -
           ((C32764 + C32765) * C47994 + (C32763 + C32762) * C31617) * C47791) *
              C1438 +
          (((C33222 + C33223) * C31617 +
            ((C113 * C6145 - C114 * C6143 - C113 * C6146 + C47890 * C6149) *
                 C16157 +
             (C113 * C6147 - C114 * C6144 - C113 * C6148 + C47890 * C6150) *
                 C47961) *
                C47994) *
               C47791 -
           ((C33223 + C33222) * C47994 +
            (C1460 * C47961 +
             (C113 * C1178 - C114 * C1170 - C113 * C1179 + C47890 * C1188) *
                 C16157) *
                C31617) *
               C47943) *
              C47984) *
         C47658) /
            (p * q * std::sqrt(p + q));
    d2ee[172] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C47890 * C136) *
                 C16157 +
             C174 * C47961) *
                C31617 +
            (C10876 * C16157 + C567 * C47961) * C47994) *
               C47704 * C48013 -
           ((C982 * C47961 + C11347 * C16157) * C47994 +
            (C372 * C47961 +
             (C113 * C308 - C114 * C296 - C113 * C309 + C47890 * C326) *
                 C16157) *
                C31617) *
               C47704 * C48001 +
           (((C113 * C310 - C114 * C297 - C113 * C311 + C47890 * C327) *
                 C16157 +
             C373 * C47961) *
                C31617 +
            (C11750 * C16157 + C1624 * C47961) * C47994) *
               C47704 * C47974) *
              C291 +
          (((C372 * C16157 + C371 * C47961) * C31617 +
            (C982 * C16157 + C983 * C47961) * C47994) *
               C47704 * C48001 -
           ((C566 * C47961 + C567 * C16157) * C47994 +
            (C175 * C47961 + C174 * C16157) * C31617) *
               C47704 * C48013 -
           ((C1623 * C47961 + C1624 * C16157) * C47994 +
            (C374 * C47961 + C373 * C16157) * C31617) *
               C47704 * C47974) *
              C292 +
          (((C175 * C16157 + C176 * C47961) * C31617 +
            (C566 * C16157 + C570 * C47961) * C47994) *
               C47704 * C48013 -
           ((C984 * C47961 + C983 * C16157) * C47994 +
            (C375 * C47961 + C371 * C16157) * C31617) *
               C47704 * C48001 +
           ((C374 * C16157 + C376 * C47961) * C31617 +
            (C1623 * C16157 +
             (C113 * C1607 - C114 * C1606 - C113 * C1608 + C47890 * C1609) *
                 C47961) *
                C47994) *
               C47704 * C47974) *
              C47968)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C47890 * C136) * C16157 +
            C174 * C47961) *
               C31617 +
           (C10876 * C16157 + C567 * C47961) * C47994) *
              C47704 * C47686 * C108 -
          ((C566 * C47961 + C567 * C16157) * C47994 +
           (C175 * C47961 + C174 * C16157) * C31617) *
              C47704 * C47686 * C109 +
          ((C175 * C16157 + C176 * C47961) * C31617 +
           (C566 * C16157 + C570 * C47961) * C47994) *
              C47704 * C47686 * C110 -
          ((C797 * C47961 + C570 * C16157) * C47994 +
           (C177 * C47961 + C176 * C16157) * C31617) *
              C47704 * C47686 * C111 +
          ((C177 * C16157 + C178 * C47961) * C31617 +
           (C797 * C16157 +
            (C113 * C787 - C114 * C786 - C113 * C788 + C47890 * C789) *
                C47961) *
               C47994) *
              C47704 * C47686 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C47890 * C136) *
                 C16157 +
             C174 * C47961) *
                C31617 +
            (C31912 + C31913) * C47994) *
               C48014 -
           ((C31914 + C31915) * C47994 + (C31913 + C31912) * C31617) * C48003 +
           ((C31915 + C31914) * C31617 +
            (C12630 * C16157 + C2332 * C47961) * C47994) *
               C47977) *
              C47686 * C291 +
          (((C31916 + C31917) * C31617 + (C31918 + C31919) * C47994) * C48003 -
           ((C31917 + C31916) * C47994 +
            (C175 * C47961 + C174 * C16157) * C31617) *
               C48014 -
           ((C2331 * C47961 + C2332 * C16157) * C47994 +
            (C31919 + C31918) * C31617) *
               C47977) *
              C47686 * C292 +
          (((C175 * C16157 + C176 * C47961) * C31617 +
            (C31920 + C31921) * C47994) *
               C48014 -
           ((C31922 + C31923) * C47994 + (C31921 + C31920) * C31617) * C48003 +
           ((C31923 + C31922) * C31617 +
            (C2331 * C16157 +
             (C113 * C2315 - C114 * C2314 - C113 * C2316 + C47890 * C2317) *
                 C47961) *
                C47994) *
               C47977) *
              C47686 * C47968)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C47890 * C136) *
                 C16157 +
             C174 * C47961) *
                C31617 +
            (C31912 + C31913) * C47994) *
               C47704 * C1094 -
           ((C32381 + C32380) * C47994 +
            (C372 * C47961 +
             (C113 * C308 - C114 * C296 - C113 * C309 + C47890 * C326) *
                 C16157) *
                C31617) *
               C47704 * C1095 +
           (((C113 * C310 - C114 * C297 - C113 * C311 + C47890 * C327) *
                 C16157 +
             C373 * C47961) *
                C31617 +
            (C11750 * C16157 + C1624 * C47961) * C47994) *
               C47704 * C47974) *
              C48010 +
          (((C372 * C16157 + C371 * C47961) * C31617 +
            (C32382 + C32383) * C47994) *
               C47704 * C1095 -
           ((C31917 + C31916) * C47994 +
            (C175 * C47961 + C174 * C16157) * C31617) *
               C47704 * C1094 -
           ((C1623 * C47961 + C1624 * C16157) * C47994 +
            (C374 * C47961 + C373 * C16157) * C31617) *
               C47704 * C47974) *
              C47997 +
          (((C175 * C16157 + C176 * C47961) * C31617 +
            (C31920 + C31921) * C47994) *
               C47704 * C1094 -
           ((C32385 + C32384) * C47994 +
            (C375 * C47961 + C371 * C16157) * C31617) *
               C47704 * C1095 +
           ((C374 * C16157 + C376 * C47961) * C31617 +
            (C1623 * C16157 +
             (C113 * C1607 - C114 * C1606 - C113 * C1608 + C47890 * C1609) *
                 C47961) *
                C47994) *
               C47704 * C47974) *
              C47968)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C47890 * C136) * C16157 +
            C174 * C47961) *
               C31617 +
           (C31912 + C31913) * C47994) *
              C47704 * C1162 -
          ((C32381 + C32380) * C47994 +
           (C372 * C47961 +
            (C113 * C308 - C114 * C296 - C113 * C309 + C47890 * C326) *
                C16157) *
               C31617) *
              C47704 * C1163 +
          (((C113 * C310 - C114 * C297 - C113 * C311 + C47890 * C327) * C16157 +
            C373 * C47961) *
               C31617 +
           (C11750 * C16157 + C1624 * C47961) * C47994) *
              C47704 * C1164 -
          ((C11893 * C47961 + C12227 * C16157) * C47994 +
           (C1460 * C47961 +
            (C113 * C1178 - C114 * C1170 - C113 * C1179 + C47890 * C1188) *
                C16157) *
               C31617) *
              C47704 * C1165 +
          (((C113 * C1180 - C114 * C1171 - C113 * C1181 + C47890 * C1189) *
                C16157 +
            (C113 * C1182 - C114 * C1172 - C113 * C1183 + C47890 * C1190) *
                C47961) *
               C31617 +
           ((C113 * C6635 - C114 * C6633 - C113 * C6636 + C47890 * C6639) *
                C16157 +
            (C113 * C6637 - C114 * C6634 - C113 * C6638 + C47890 * C6640) *
                C47961) *
               C47994) *
              C47704 * C1166) *
         C47658) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C47890 * C136) *
                 C16157 +
             C174 * C47961) *
                C31617 +
            (C31912 + C31913) * C47994) *
               C48014 -
           ((C31914 + C31915) * C47994 + (C31913 + C31912) * C31617) * C48003 +
           ((C31915 + C31914) * C31617 +
            (C12630 * C16157 + C2332 * C47961) * C47994) *
               C47977) *
              C1094 +
          (((C32380 + C32381) * C31617 + (C32760 + C32761) * C47994) * C48003 -
           ((C32381 + C32380) * C47994 +
            (C372 * C47961 +
             (C113 * C308 - C114 * C296 - C113 * C309 + C47890 * C326) *
                 C16157) *
                C31617) *
               C48014 -
           ((C12838 * C47961 + C13108 * C16157) * C47994 +
            (C32761 + C32760) * C31617) *
               C47977) *
              C1095 +
          ((((C113 * C310 - C114 * C297 - C113 * C311 + C47890 * C327) *
                 C16157 +
             C373 * C47961) *
                C31617 +
            (C32762 + C32763) * C47994) *
               C48014 -
           ((C32764 + C32765) * C47994 + (C32763 + C32762) * C31617) * C48003 +
           ((C32765 + C32764) * C31617 +
            ((C113 * C7507 - C114 * C7505 - C113 * C7508 + C47890 * C7511) *
                 C16157 +
             (C113 * C7509 - C114 * C7506 - C113 * C7510 + C47890 * C7512) *
                 C47961) *
                C47994) *
               C47977) *
              C47974) *
         C47658) /
            (p * q * std::sqrt(p + q));
    d2ee[173] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C47890 * C136) *
                 C16157 +
             C174 * C47961) *
                C31617 +
            (C31912 + C31913) * C47994) *
               C47943 -
           ((C31914 + C31915) * C47994 + (C31913 + C31912) * C31617) * C47791) *
              C47686 * C671 +
          (((C31916 + C31917) * C31617 + (C31918 + C31919) * C47994) * C47791 -
           ((C31917 + C31916) * C47994 +
            (C175 * C47961 + C174 * C16157) * C31617) *
               C47943) *
              C47686 * C672 +
          (((C175 * C16157 + C176 * C47961) * C31617 +
            (C31920 + C31921) * C47994) *
               C47943 -
           ((C31922 + C31923) * C47994 + (C31921 + C31920) * C31617) * C47791) *
              C47686 * C673 +
          (((C32184 + C32185) * C31617 +
            (C571 * C16157 +
             (C113 * C517 - C114 * C498 - C113 * C518 + C47890 * C528) *
                 C47961) *
                C47994) *
               C47791 -
           ((C32185 + C32184) * C47994 +
            (C177 * C47961 + C176 * C16157) * C31617) *
               C47943) *
              C47686 * C47978)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C122 - C114 * C115 - C113 * C123 + C47890 * C136) *
                  C16157 +
              C174 * C47961) *
                 C31617 +
             (C31912 + C31913) * C47994) *
                C47943 -
            ((C31914 + C31915) * C47994 + (C31913 + C31912) * C31617) *
                C47791) *
               C1094 +
           (((C32380 + C32381) * C31617 + (C32760 + C32761) * C47994) * C47791 -
            ((C32381 + C32380) * C47994 +
             (C372 * C47961 +
              (C113 * C308 - C114 * C296 - C113 * C309 + C47890 * C326) *
                  C16157) *
                 C31617) *
                C47943) *
               C1095 +
           ((((C113 * C310 - C114 * C297 - C113 * C311 + C47890 * C327) *
                  C16157 +
              C373 * C47961) *
                 C31617 +
             (C32762 + C32763) * C47994) *
                C47943 -
            ((C32764 + C32765) * C47994 + (C32763 + C32762) * C31617) *
                C47791) *
               C47974) *
              C47928 +
          ((((C31916 + C31917) * C31617 + (C31918 + C31919) * C47994) * C47791 -
            ((C31917 + C31916) * C47994 +
             (C175 * C47961 + C174 * C16157) * C31617) *
                C47943) *
               C1094 +
           (((C372 * C16157 + C371 * C47961) * C31617 +
             (C32382 + C32383) * C47994) *
                C47943 -
            ((C2211 * C47961 + C2212 * C16157) * C47994 +
             (C32383 + C32382) * C31617) *
                C47791) *
               C1095 +
           (((C33090 + C33091) * C31617 +
             (C11751 * C16157 +
              (C113 * C1327 - C114 * C1310 - C113 * C1328 + C47890 * C1337) *
                  C47961) *
                 C47994) *
                C47791 -
            ((C33091 + C33090) * C47994 +
             (C374 * C47961 + C373 * C16157) * C31617) *
                C47943) *
               C47974) *
              C47669)) /
            (p * q * std::sqrt(p + q));
    d2ee[174] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C47890 * C136) * C16157 +
            C174 * C47961) *
               C31617 +
           (C10876 * C16157 + C567 * C47961) * C47994) *
              C47704 * C47686 * C108 -
          ((C566 * C47961 + C567 * C16157) * C47994 +
           (C175 * C47961 + C174 * C16157) * C31617) *
              C47704 * C47686 * C109 +
          ((C175 * C16157 + C176 * C47961) * C31617 +
           (C566 * C16157 + C570 * C47961) * C47994) *
              C47704 * C47686 * C110 -
          ((C797 * C47961 + C570 * C16157) * C47994 +
           (C177 * C47961 + C176 * C16157) * C31617) *
              C47704 * C47686 * C111 +
          ((C177 * C16157 + C178 * C47961) * C31617 +
           (C797 * C16157 +
            (C113 * C787 - C114 * C786 - C113 * C788 + C47890 * C789) *
                C47961) *
               C47994) *
              C47704 * C47686 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C47890 * C136) *
                 C16157 +
             C174 * C47961) *
                C31617 +
            (C10876 * C16157 + C567 * C47961) * C47994) *
               C47704 * C48013 -
           ((C982 * C47961 + C11347 * C16157) * C47994 +
            (C372 * C47961 +
             (C113 * C308 - C114 * C296 - C113 * C309 + C47890 * C326) *
                 C16157) *
                C31617) *
               C47704 * C48001 +
           (((C113 * C310 - C114 * C297 - C113 * C311 + C47890 * C327) *
                 C16157 +
             C373 * C47961) *
                C31617 +
            (C11750 * C16157 + C1624 * C47961) * C47994) *
               C47704 * C47974) *
              C291 +
          (((C372 * C16157 + C371 * C47961) * C31617 +
            (C982 * C16157 + C983 * C47961) * C47994) *
               C47704 * C48001 -
           ((C566 * C47961 + C567 * C16157) * C47994 +
            (C175 * C47961 + C174 * C16157) * C31617) *
               C47704 * C48013 -
           ((C1623 * C47961 + C1624 * C16157) * C47994 +
            (C374 * C47961 + C373 * C16157) * C31617) *
               C47704 * C47974) *
              C292 +
          (((C175 * C16157 + C176 * C47961) * C31617 +
            (C566 * C16157 + C570 * C47961) * C47994) *
               C47704 * C48013 -
           ((C984 * C47961 + C983 * C16157) * C47994 +
            (C375 * C47961 + C371 * C16157) * C31617) *
               C47704 * C48001 +
           ((C374 * C16157 + C376 * C47961) * C31617 +
            (C1623 * C16157 +
             (C113 * C1607 - C114 * C1606 - C113 * C1608 + C47890 * C1609) *
                 C47961) *
                C47994) *
               C47704 * C47974) *
              C47968)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C47890 * C136) *
                 C16157 +
             C174 * C47961) *
                C31617 +
            (C31912 + C31913) * C47994) *
               C47704 * C1094 -
           ((C32381 + C32380) * C47994 +
            (C372 * C47961 +
             (C113 * C308 - C114 * C296 - C113 * C309 + C47890 * C326) *
                 C16157) *
                C31617) *
               C47704 * C1095 +
           (((C113 * C310 - C114 * C297 - C113 * C311 + C47890 * C327) *
                 C16157 +
             C373 * C47961) *
                C31617 +
            (C11750 * C16157 + C1624 * C47961) * C47994) *
               C47704 * C47974) *
              C48010 +
          (((C372 * C16157 + C371 * C47961) * C31617 +
            (C32382 + C32383) * C47994) *
               C47704 * C1095 -
           ((C31917 + C31916) * C47994 +
            (C175 * C47961 + C174 * C16157) * C31617) *
               C47704 * C1094 -
           ((C1623 * C47961 + C1624 * C16157) * C47994 +
            (C374 * C47961 + C373 * C16157) * C31617) *
               C47704 * C47974) *
              C47997 +
          (((C175 * C16157 + C176 * C47961) * C31617 +
            (C31920 + C31921) * C47994) *
               C47704 * C1094 -
           ((C32385 + C32384) * C47994 +
            (C375 * C47961 + C371 * C16157) * C31617) *
               C47704 * C1095 +
           ((C374 * C16157 + C376 * C47961) * C31617 +
            (C1623 * C16157 +
             (C113 * C1607 - C114 * C1606 - C113 * C1608 + C47890 * C1609) *
                 C47961) *
                C47994) *
               C47704 * C47974) *
              C47968)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C47890 * C136) * C16157 +
            C174 * C47961) *
               C31617 +
           (C31912 + C31913) * C47994) *
              C47704 * C1162 -
          ((C32381 + C32380) * C47994 +
           (C372 * C47961 +
            (C113 * C308 - C114 * C296 - C113 * C309 + C47890 * C326) *
                C16157) *
               C31617) *
              C47704 * C1163 +
          (((C113 * C310 - C114 * C297 - C113 * C311 + C47890 * C327) * C16157 +
            C373 * C47961) *
               C31617 +
           (C11750 * C16157 + C1624 * C47961) * C47994) *
              C47704 * C1164 -
          ((C11893 * C47961 + C12227 * C16157) * C47994 +
           (C1460 * C47961 +
            (C113 * C1178 - C114 * C1170 - C113 * C1179 + C47890 * C1188) *
                C16157) *
               C31617) *
              C47704 * C1165 +
          (((C113 * C1180 - C114 * C1171 - C113 * C1181 + C47890 * C1189) *
                C16157 +
            (C113 * C1182 - C114 * C1172 - C113 * C1183 + C47890 * C1190) *
                C47961) *
               C31617 +
           ((C113 * C6635 - C114 * C6633 - C113 * C6636 + C47890 * C6639) *
                C16157 +
            (C113 * C6637 - C114 * C6634 - C113 * C6638 + C47890 * C6640) *
                C47961) *
               C47994) *
              C47704 * C1166) *
         C47658) /
            (p * q * std::sqrt(p + q));
    d2ee[175] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C4787 * C122 - C4788 * C115 - C4787 * C123 + C4783 * C136 +
             C4789 * C308 - C4790 * C296 - C4789 * C309 + C47992 * C326) *
                C47633 * C31617 +
            (C37424 + C37425) * C47633 * C47994) *
               C47704 * C47745 -
           ((C37895 + C37894) * C47633 * C47994 +
            (C4789 * C310 - C4790 * C297 - C4789 * C311 + C47992 * C327 +
             C4787 * C308 - C4788 * C296 - C4787 * C309 + C4783 * C326) *
                C47633 * C31617) *
               C47704 * C47752 +
           ((C4787 * C310 - C4788 * C297 - C4787 * C311 + C4783 * C327 +
             C4789 * C1178 - C4790 * C1170 - C4789 * C1179 + C47992 * C1188) *
                C47633 * C31617 +
            (C38308 + C38309) * C47633 * C47994) *
               C47704 * C2908) *
              C47663 +
          (((C5043 + C5042) * C47633 * C31617 +
            (C5758 + C5759) * C47633 * C47994) *
               C47704 * C47752 -
           ((C5244 + C5245) * C47633 * C47994 +
            (C4841 + C4840) * C47633 * C31617) *
               C47704 * C47745 -
           ((C6502 + C6503) * C47633 * C47994 +
            (C5045 + C5044) * C47633 * C31617) *
               C47704 * C2908) *
              C47672 +
          (((C4843 + C4842) * C47633 * C31617 +
            (C5248 + C5249) * C47633 * C47994) *
               C47704 * C47745 -
           ((C5760 + C5761) * C47633 * C47994 +
            (C5047 + C5046) * C47633 * C31617) *
               C47704 * C47752 +
           ((C5049 + C5048) * C47633 * C31617 +
            (C4787 * C1317 - C4788 * C1305 - C4787 * C1318 + C4783 * C1332 +
             C4789 * C1729 - C4790 * C1724 - C4789 * C1730 + C47992 * C1733) *
                C47633 * C47994) *
               C47704 * C2908) *
              C2911)) /
        (p * q * std::sqrt(p + q));
    d2ee[176] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C4787 * C122 - C4788 * C115 - C4787 * C123 + C4783 * C136 +
              C4789 * C308 - C4790 * C296 - C4789 * C309 + C47992 * C326) *
                 C47633 * C31617 +
             (C37424 + C37425) * C47633 * C47994) *
                C47943 -
            ((C37426 + C37427) * C47633 * C47994 +
             (C37425 + C37424) * C47633 * C31617) *
                C47791) *
               C47745 +
           (((C37894 + C37895) * C47633 * C31617 +
             (C38306 + C38307) * C47633 * C47994) *
                C47791 -
            ((C37895 + C37894) * C47633 * C47994 +
             (C4789 * C310 - C4790 * C297 - C4789 * C311 + C47992 * C327 +
              C4787 * C308 - C4788 * C296 - C4787 * C309 + C4783 * C326) *
                 C47633 * C31617) *
                C47943) *
               C47752 +
           (((C4787 * C310 - C4788 * C297 - C4787 * C311 + C4783 * C327 +
              C4789 * C1178 - C4790 * C1170 - C4789 * C1179 + C47992 * C1188) *
                 C47633 * C31617 +
             (C38308 + C38309) * C47633 * C47994) *
                C47943 -
            ((C38310 + C38311) * C47633 * C47994 +
             (C38309 + C38308) * C47633 * C31617) *
                C47791) *
               C2908) *
              C2648 +
          ((((C5245 + C5244) * C47633 * C31617 +
             (C5246 + C5247) * C47633 * C47994) *
                C47791 -
            ((C5244 + C5245) * C47633 * C47994 +
             (C4841 + C4840) * C47633 * C31617) *
                C47943) *
               C47745 +
           (((C5043 + C5042) * C47633 * C31617 +
             (C5758 + C5759) * C47633 * C47994) *
                C47943 -
            ((C7230 + C7231) * C47633 * C47994 +
             (C5759 + C5758) * C47633 * C31617) *
                C47791) *
               C47752 +
           (((C6503 + C6502) * C47633 * C31617 +
             (C4787 * C1325 - C4788 * C1309 - C4787 * C1326 + C4783 * C1336 +
              C4789 * C6147 - C4790 * C6144 - C4789 * C6148 + C47992 * C6150) *
                 C47633 * C47994) *
                C47791 -
            ((C6502 + C6503) * C47633 * C47994 +
             (C5045 + C5044) * C47633 * C31617) *
                C47943) *
               C2908) *
              C47669)) /
        (p * q * std::sqrt(p + q));
    d2ee[177] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4787 * C122 - C4788 * C115 - C4787 * C123 + C4783 * C136 +
             C4789 * C308 - C4790 * C296 - C4789 * C309 + C47992 * C326) *
                C47633 * C31617 +
            (C37424 + C37425) * C47633 * C47994) *
               C47704 * C48020 -
           ((C37895 + C37894) * C47633 * C47994 +
            (C4789 * C310 - C4790 * C297 - C4789 * C311 + C47992 * C327 +
             C4787 * C308 - C4788 * C296 - C4787 * C309 + C4783 * C326) *
                C47633 * C31617) *
               C47704 * C48016 +
           ((C4787 * C310 - C4788 * C297 - C4787 * C311 + C4783 * C327 +
             C4789 * C1178 - C4790 * C1170 - C4789 * C1179 + C47992 * C1188) *
                C47633 * C31617 +
            (C38308 + C38309) * C47633 * C47994) *
               C47704 * C48006 -
           ((C38779 + C38778) * C47633 * C47994 +
            (C4789 * C1180 - C4790 * C1171 - C4789 * C1181 + C47992 * C1189 +
             C4787 * C1178 - C4788 * C1170 - C4787 * C1179 + C4783 * C1188) *
                C47633 * C31617) *
               C47704 * C47984) *
              C2648 +
          (((C5043 + C5042) * C47633 * C31617 +
            (C5758 + C5759) * C47633 * C47994) *
               C47704 * C48016 -
           ((C5244 + C5245) * C47633 * C47994 +
            (C4841 + C4840) * C47633 * C31617) *
               C47704 * C48020 -
           ((C6502 + C6503) * C47633 * C47994 +
            (C5045 + C5044) * C47633 * C31617) *
               C47704 * C48006 +
           ((C6295 + C6294) * C47633 * C31617 +
            (C4787 * C1727 - C4788 * C1723 - C4787 * C1728 + C4783 * C1732 +
             C4789 * C6637 - C4790 * C6634 - C4789 * C6638 + C47992 * C6640) *
                C47633 * C47994) *
               C47704 * C47984) *
              C47669)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4787 * C122 - C4788 * C115 - C4787 * C123 + C4783 * C136 +
             C4789 * C308 - C4790 * C296 - C4789 * C309 + C47992 * C326) *
                C47633 * C31617 +
            (C37424 + C37425) * C47633 * C47994) *
               C47704 * C2540 -
           ((C37895 + C37894) * C47633 * C47994 +
            (C4789 * C310 - C4790 * C297 - C4789 * C311 + C47992 * C327 +
             C4787 * C308 - C4788 * C296 - C4787 * C309 + C4783 * C326) *
                C47633 * C31617) *
               C47704 * C47749) *
              C48019 +
          (((C5043 + C5042) * C47633 * C31617 +
            (C5758 + C5759) * C47633 * C47994) *
               C47704 * C47749 -
           ((C5244 + C5245) * C47633 * C47994 +
            (C4841 + C4840) * C47633 * C31617) *
               C47704 * C2540) *
              C48012 +
          (((C4843 + C4842) * C47633 * C31617 +
            (C5248 + C5249) * C47633 * C47994) *
               C47704 * C2540 -
           ((C5760 + C5761) * C47633 * C47994 +
            (C5047 + C5046) * C47633 * C31617) *
               C47704 * C47749) *
              C47999 +
          (((C5395 + C5394) * C47633 * C31617 +
            (C4787 * C954 - C4788 * C946 - C4787 * C955 + C4783 * C961 +
             C4789 * C1607 - C4790 * C1606 - C4789 * C1608 + C47992 * C1609) *
                C47633 * C47994) *
               C47704 * C47749 -
           ((C5538 + C5539) * C47633 * C47994 +
            (C4845 + C4844) * C47633 * C31617) *
               C47704 * C2540) *
              C47978)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C4787 * C122 - C4788 * C115 - C4787 * C123 + C4783 * C136 +
              C4789 * C308 - C4790 * C296 - C4789 * C309 + C47992 * C326) *
                 C47633 * C31617 +
             (C37424 + C37425) * C47633 * C47994) *
                C48014 -
            ((C37426 + C37427) * C47633 * C47994 +
             (C37425 + C37424) * C47633 * C31617) *
                C48003 +
            ((C37427 + C37426) * C47633 * C31617 +
             (C39178 + C39179) * C47633 * C47994) *
                C47977) *
               C2540 +
           (((C37894 + C37895) * C47633 * C31617 +
             (C38306 + C38307) * C47633 * C47994) *
                C48003 -
            ((C37895 + C37894) * C47633 * C47994 +
             (C4789 * C310 - C4790 * C297 - C4789 * C311 + C47992 * C327 +
              C4787 * C308 - C4788 * C296 - C4787 * C309 + C4783 * C326) *
                 C47633 * C31617) *
                C48014 -
            ((C39648 + C39649) * C47633 * C47994 +
             (C38307 + C38306) * C47633 * C31617) *
                C47977) *
               C47749) *
              C2648 +
          ((((C5245 + C5244) * C47633 * C31617 +
             (C5246 + C5247) * C47633 * C47994) *
                C48003 -
            ((C5244 + C5245) * C47633 * C47994 +
             (C4841 + C4840) * C47633 * C31617) *
                C48014 -
            ((C7374 + C7375) * C47633 * C47994 +
             (C5247 + C5246) * C47633 * C31617) *
                C47977) *
               C2540 +
           (((C5043 + C5042) * C47633 * C31617 +
             (C5758 + C5759) * C47633 * C47994) *
                C48014 -
            ((C7230 + C7231) * C47633 * C47994 +
             (C5759 + C5758) * C47633 * C31617) *
                C48003 +
            ((C7231 + C7230) * C47633 * C31617 +
             (C4787 * C2435 - C4788 * C2431 - C4787 * C2436 + C4783 * C2440 +
              C4789 * C7509 - C4790 * C7506 - C4789 * C7510 + C47992 * C7512) *
                 C47633 * C47994) *
                C47977) *
               C47749) *
              C47669)) /
            (p * q * std::sqrt(p + q));
    d2ee[178] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C4787 * C122 - C4788 * C115 - C4787 * C123 + C4783 * C136 +
              C4789 * C308 - C4790 * C296 - C4789 * C309 + C47992 * C326) *
                 C47633 * C31617 +
             (C37424 + C37425) * C47633 * C47994) *
                C47943 -
            ((C37426 + C37427) * C47633 * C47994 +
             (C37425 + C37424) * C47633 * C31617) *
                C47791) *
               C2540 +
           (((C37894 + C37895) * C47633 * C31617 +
             (C38306 + C38307) * C47633 * C47994) *
                C47791 -
            ((C37895 + C37894) * C47633 * C47994 +
             (C4789 * C310 - C4790 * C297 - C4789 * C311 + C47992 * C327 +
              C4787 * C308 - C4788 * C296 - C4787 * C309 + C4783 * C326) *
                 C47633 * C31617) *
                C47943) *
               C47749) *
              C47663 +
          ((((C5245 + C5244) * C47633 * C31617 +
             (C5246 + C5247) * C47633 * C47994) *
                C47791 -
            ((C5244 + C5245) * C47633 * C47994 +
             (C4841 + C4840) * C47633 * C31617) *
                C47943) *
               C2540 +
           (((C5043 + C5042) * C47633 * C31617 +
             (C5758 + C5759) * C47633 * C47994) *
                C47943 -
            ((C7230 + C7231) * C47633 * C47994 +
             (C5759 + C5758) * C47633 * C31617) *
                C47791) *
               C47749) *
              C47672 +
          ((((C4843 + C4842) * C47633 * C31617 +
             (C5248 + C5249) * C47633 * C47994) *
                C47943 -
            ((C5250 + C5251) * C47633 * C47994 +
             (C5249 + C5248) * C47633 * C31617) *
                C47791) *
               C2540 +
           (((C5761 + C5760) * C47633 * C31617 +
             (C4787 * C1311 - C4788 * C1302 - C4787 * C1312 + C4783 * C1329 +
              C4789 * C1327 - C4790 * C1310 - C4789 * C1328 + C47992 * C1337) *
                 C47633 * C47994) *
                C47791 -
            ((C5760 + C5761) * C47633 * C47994 +
             (C5047 + C5046) * C47633 * C31617) *
                C47943) *
               C47749) *
              C2911)) /
        (p * q * std::sqrt(p + q));
    d2ee[179] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C4787 * C122 - C4788 * C115 - C4787 * C123 + C4783 * C136 +
             C4789 * C308 - C4790 * C296 - C4789 * C309 + C47992 * C326) *
                C47633 * C31617 +
            (C37424 + C37425) * C47633 * C47994) *
               C47704 * C2540 -
           ((C37895 + C37894) * C47633 * C47994 +
            (C4789 * C310 - C4790 * C297 - C4789 * C311 + C47992 * C327 +
             C4787 * C308 - C4788 * C296 - C4787 * C309 + C4783 * C326) *
                C47633 * C31617) *
               C47704 * C47749) *
              C48019 +
          (((C5043 + C5042) * C47633 * C31617 +
            (C5758 + C5759) * C47633 * C47994) *
               C47704 * C47749 -
           ((C5244 + C5245) * C47633 * C47994 +
            (C4841 + C4840) * C47633 * C31617) *
               C47704 * C2540) *
              C48012 +
          (((C4843 + C4842) * C47633 * C31617 +
            (C5248 + C5249) * C47633 * C47994) *
               C47704 * C2540 -
           ((C5760 + C5761) * C47633 * C47994 +
            (C5047 + C5046) * C47633 * C31617) *
               C47704 * C47749) *
              C47999 +
          (((C5395 + C5394) * C47633 * C31617 +
            (C4787 * C954 - C4788 * C946 - C4787 * C955 + C4783 * C961 +
             C4789 * C1607 - C4790 * C1606 - C4789 * C1608 + C47992 * C1609) *
                C47633 * C47994) *
               C47704 * C47749 -
           ((C5538 + C5539) * C47633 * C47994 +
            (C4845 + C4844) * C47633 * C31617) *
               C47704 * C2540) *
              C47978)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C4787 * C122 - C4788 * C115 - C4787 * C123 + C4783 * C136 +
             C4789 * C308 - C4790 * C296 - C4789 * C309 + C47992 * C326) *
                C47633 * C31617 +
            (C37424 + C37425) * C47633 * C47994) *
               C47704 * C48020 -
           ((C37895 + C37894) * C47633 * C47994 +
            (C4789 * C310 - C4790 * C297 - C4789 * C311 + C47992 * C327 +
             C4787 * C308 - C4788 * C296 - C4787 * C309 + C4783 * C326) *
                C47633 * C31617) *
               C47704 * C48016 +
           ((C4787 * C310 - C4788 * C297 - C4787 * C311 + C4783 * C327 +
             C4789 * C1178 - C4790 * C1170 - C4789 * C1179 + C47992 * C1188) *
                C47633 * C31617 +
            (C38308 + C38309) * C47633 * C47994) *
               C47704 * C48006 -
           ((C38779 + C38778) * C47633 * C47994 +
            (C4789 * C1180 - C4790 * C1171 - C4789 * C1181 + C47992 * C1189 +
             C4787 * C1178 - C4788 * C1170 - C4787 * C1179 + C4783 * C1188) *
                C47633 * C31617) *
               C47704 * C47984) *
              C2648 +
          (((C5043 + C5042) * C47633 * C31617 +
            (C5758 + C5759) * C47633 * C47994) *
               C47704 * C48016 -
           ((C5244 + C5245) * C47633 * C47994 +
            (C4841 + C4840) * C47633 * C31617) *
               C47704 * C48020 -
           ((C6502 + C6503) * C47633 * C47994 +
            (C5045 + C5044) * C47633 * C31617) *
               C47704 * C48006 +
           ((C6295 + C6294) * C47633 * C31617 +
            (C4787 * C1727 - C4788 * C1723 - C4787 * C1728 + C4783 * C1732 +
             C4789 * C6637 - C4790 * C6634 - C4789 * C6638 + C47992 * C6640) *
                C47633 * C47994) *
               C47704 * C47984) *
              C47669)) /
            (p * q * std::sqrt(p + q));
    d2ee[180] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C4787 * C122 - C4788 * C115 - C4787 * C123 + C4783 * C136 +
              C4789 * C308 - C4790 * C296 - C4789 * C309 + C47992 * C326) *
                 C47633 * C31617 +
             (C37424 + C37425) * C47633 * C47994) *
                C3302 -
            ((C37426 + C37427) * C47633 * C47994 +
             (C37425 + C37424) * C47633 * C31617) *
                C47791) *
               C47745 +
           (((C37894 + C37895) * C47633 * C31617 +
             (C38306 + C38307) * C47633 * C47994) *
                C47791 -
            ((C37895 + C37894) * C47633 * C47994 +
             (C4789 * C310 - C4790 * C297 - C4789 * C311 + C47992 * C327 +
              C4787 * C308 - C4788 * C296 - C4787 * C309 + C4783 * C326) *
                 C47633 * C31617) *
                C3302) *
               C47752 +
           (((C4787 * C310 - C4788 * C297 - C4787 * C311 + C4783 * C327 +
              C4789 * C1178 - C4790 * C1170 - C4789 * C1179 + C47992 * C1188) *
                 C47633 * C31617 +
             (C38308 + C38309) * C47633 * C47994) *
                C3302 -
            ((C38310 + C38311) * C47633 * C47994 +
             (C38309 + C38308) * C47633 * C31617) *
                C47791) *
               C2908) *
              C47928 +
          ((((C5245 + C5244) * C47633 * C31617 +
             (C5246 + C5247) * C47633 * C47994) *
                C47791 -
            ((C5244 + C5245) * C47633 * C47994 +
             (C4841 + C4840) * C47633 * C31617) *
                C3302) *
               C47745 +
           (((C5043 + C5042) * C47633 * C31617 +
             (C5758 + C5759) * C47633 * C47994) *
                C3302 -
            ((C7230 + C7231) * C47633 * C47994 +
             (C5759 + C5758) * C47633 * C31617) *
                C47791) *
               C47752 +
           (((C6503 + C6502) * C47633 * C31617 +
             (C4787 * C1325 - C4788 * C1309 - C4787 * C1326 + C4783 * C1336 +
              C4789 * C6147 - C4790 * C6144 - C4789 * C6148 + C47992 * C6150) *
                 C47633 * C47994) *
                C47791 -
            ((C6502 + C6503) * C47633 * C47994 +
             (C5045 + C5044) * C47633 * C31617) *
                C3302) *
               C2908) *
              C47669)) /
        (p * q * std::sqrt(p + q));
    d2ee[181] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C4787 * C122 - C4788 * C115 - C4787 * C123 + C4783 * C136 +
             C4789 * C308 - C4790 * C296 - C4789 * C309 + C47992 * C326) *
                C47633 * C31617 +
            (C37424 + C37425) * C47633 * C47994) *
               C47787 -
           ((C37426 + C37427) * C47633 * C47994 +
            (C37425 + C37424) * C47633 * C31617) *
               C47794 +
           ((C37427 + C37426) * C47633 * C31617 +
            (C39178 + C39179) * C47633 * C47994) *
               C3810) *
              C47745 +
          (((C37894 + C37895) * C47633 * C31617 +
            (C38306 + C38307) * C47633 * C47994) *
               C47794 -
           ((C37895 + C37894) * C47633 * C47994 +
            (C4789 * C310 - C4790 * C297 - C4789 * C311 + C47992 * C327 +
             C4787 * C308 - C4788 * C296 - C4787 * C309 + C4783 * C326) *
                C47633 * C31617) *
               C47787 -
           ((C39648 + C39649) * C47633 * C47994 +
            (C38307 + C38306) * C47633 * C31617) *
               C3810) *
              C47752 +
          (((C4787 * C310 - C4788 * C297 - C4787 * C311 + C4783 * C327 +
             C4789 * C1178 - C4790 * C1170 - C4789 * C1179 + C47992 * C1188) *
                C47633 * C31617 +
            (C38308 + C38309) * C47633 * C47994) *
               C47787 -
           ((C38310 + C38311) * C47633 * C47994 +
            (C38309 + C38308) * C47633 * C31617) *
               C47794 +
           ((C38311 + C38310) * C47633 * C31617 +
            (C4787 * C7507 - C4788 * C7505 - C4787 * C7508 + C4783 * C7511 +
             C4789 * C23708 - C4790 * C23707 - C4789 * C23709 +
             C47992 * C23710) *
                C47633 * C47994) *
               C3810) *
              C2908) *
         C47658) /
        (p * q * std::sqrt(p + q));
    d2ee[182] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4787 * C122 - C4788 * C115 - C4787 * C123 + C4783 * C136 +
             C4789 * C308 - C4790 * C296 - C4789 * C309 + C47992 * C326) *
                C47633 * C31617 +
            (C37424 + C37425) * C47633 * C47994) *
               C3302 -
           ((C37426 + C37427) * C47633 * C47994 +
            (C37425 + C37424) * C47633 * C31617) *
               C47791) *
              C48020 +
          (((C37894 + C37895) * C47633 * C31617 +
            (C38306 + C38307) * C47633 * C47994) *
               C47791 -
           ((C37895 + C37894) * C47633 * C47994 +
            (C4789 * C310 - C4790 * C297 - C4789 * C311 + C47992 * C327 +
             C4787 * C308 - C4788 * C296 - C4787 * C309 + C4783 * C326) *
                C47633 * C31617) *
               C3302) *
              C48016 +
          (((C4787 * C310 - C4788 * C297 - C4787 * C311 + C4783 * C327 +
             C4789 * C1178 - C4790 * C1170 - C4789 * C1179 + C47992 * C1188) *
                C47633 * C31617 +
            (C38308 + C38309) * C47633 * C47994) *
               C3302 -
           ((C38310 + C38311) * C47633 * C47994 +
            (C38309 + C38308) * C47633 * C31617) *
               C47791) *
              C48006 +
          (((C38778 + C38779) * C47633 * C31617 +
            (C4787 * C6145 - C4788 * C6143 - C4787 * C6146 + C4783 * C6149 +
             C4789 * C22730 - C4790 * C22729 - C4789 * C22731 +
             C47992 * C22732) *
                C47633 * C47994) *
               C47791 -
           ((C38779 + C38778) * C47633 * C47994 +
            (C4789 * C1180 - C4790 * C1171 - C4789 * C1181 + C47992 * C1189 +
             C4787 * C1178 - C4788 * C1170 - C4787 * C1179 + C4783 * C1188) *
                C47633 * C31617) *
               C3302) *
              C47984) *
         C47658) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C4787 * C122 - C4788 * C115 - C4787 * C123 + C4783 * C136 +
              C4789 * C308 - C4790 * C296 - C4789 * C309 + C47992 * C326) *
                 C47633 * C31617 +
             (C37424 + C37425) * C47633 * C47994) *
                C3302 -
            ((C37426 + C37427) * C47633 * C47994 +
             (C37425 + C37424) * C47633 * C31617) *
                C47791) *
               C2540 +
           (((C37894 + C37895) * C47633 * C31617 +
             (C38306 + C38307) * C47633 * C47994) *
                C47791 -
            ((C37895 + C37894) * C47633 * C47994 +
             (C4789 * C310 - C4790 * C297 - C4789 * C311 + C47992 * C327 +
              C4787 * C308 - C4788 * C296 - C4787 * C309 + C4783 * C326) *
                 C47633 * C31617) *
                C3302) *
               C47749) *
              C48010 +
          ((((C5245 + C5244) * C47633 * C31617 +
             (C5246 + C5247) * C47633 * C47994) *
                C47791 -
            ((C5244 + C5245) * C47633 * C47994 +
             (C4841 + C4840) * C47633 * C31617) *
                C3302) *
               C2540 +
           (((C5043 + C5042) * C47633 * C31617 +
             (C5758 + C5759) * C47633 * C47994) *
                C3302 -
            ((C7230 + C7231) * C47633 * C47994 +
             (C5759 + C5758) * C47633 * C31617) *
                C47791) *
               C47749) *
              C47997 +
          ((((C4843 + C4842) * C47633 * C31617 +
             (C5248 + C5249) * C47633 * C47994) *
                C3302 -
            ((C5250 + C5251) * C47633 * C47994 +
             (C5249 + C5248) * C47633 * C31617) *
                C47791) *
               C2540 +
           (((C5761 + C5760) * C47633 * C31617 +
             (C4787 * C1311 - C4788 * C1302 - C4787 * C1312 + C4783 * C1329 +
              C4789 * C1327 - C4790 * C1310 - C4789 * C1328 + C47992 * C1337) *
                 C47633 * C47994) *
                C47791 -
            ((C5760 + C5761) * C47633 * C47994 +
             (C5047 + C5046) * C47633 * C31617) *
                C3302) *
               C47749) *
              C47968)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C4787 * C122 - C4788 * C115 - C4787 * C123 + C4783 * C136 +
             C4789 * C308 - C4790 * C296 - C4789 * C309 + C47992 * C326) *
                C47633 * C31617 +
            (C37424 + C37425) * C47633 * C47994) *
               C48021 -
           ((C37426 + C37427) * C47633 * C47994 +
            (C37425 + C37424) * C47633 * C31617) *
               C48018 +
           ((C37427 + C37426) * C47633 * C31617 +
            (C39178 + C39179) * C47633 * C47994) *
               C48009 -
           ((C39180 + C39181) * C47633 * C47994 +
            (C39179 + C39178) * C47633 * C31617) *
               C47990) *
              C2540 +
          (((C37894 + C37895) * C47633 * C31617 +
            (C38306 + C38307) * C47633 * C47994) *
               C48018 -
           ((C37895 + C37894) * C47633 * C47994 +
            (C4789 * C310 - C4790 * C297 - C4789 * C311 + C47992 * C327 +
             C4787 * C308 - C4788 * C296 - C4787 * C309 + C4783 * C326) *
                C47633 * C31617) *
               C48021 -
           ((C39648 + C39649) * C47633 * C47994 +
            (C38307 + C38306) * C47633 * C31617) *
               C48009 +
           ((C39649 + C39648) * C47633 * C31617 +
            (C4787 * C7017 - C4788 * C7015 - C4787 * C7018 + C4783 * C7021 +
             C4789 * C23362 - C4790 * C23361 - C4789 * C23363 +
             C47992 * C23364) *
                C47633 * C47994) *
               C47990) *
              C47749) *
         C47658) /
            (p * q * std::sqrt(p + q));
    d2ee[183] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C4787 * C122 - C4788 * C115 - C4787 * C123 + C4783 * C136 +
              C4789 * C308 - C4790 * C296 - C4789 * C309 + C47992 * C326) *
                 C47633 * C31617 +
             (C37424 + C37425) * C47633 * C47994) *
                C47787 -
            ((C37426 + C37427) * C47633 * C47994 +
             (C37425 + C37424) * C47633 * C31617) *
                C47794 +
            ((C37427 + C37426) * C47633 * C31617 +
             (C39178 + C39179) * C47633 * C47994) *
                C3810) *
               C2540 +
           (((C37894 + C37895) * C47633 * C31617 +
             (C38306 + C38307) * C47633 * C47994) *
                C47794 -
            ((C37895 + C37894) * C47633 * C47994 +
             (C4789 * C310 - C4790 * C297 - C4789 * C311 + C47992 * C327 +
              C4787 * C308 - C4788 * C296 - C4787 * C309 + C4783 * C326) *
                 C47633 * C31617) *
                C47787 -
            ((C39648 + C39649) * C47633 * C47994 +
             (C38307 + C38306) * C47633 * C31617) *
                C3810) *
               C47749) *
              C47928 +
          ((((C5245 + C5244) * C47633 * C31617 +
             (C5246 + C5247) * C47633 * C47994) *
                C47794 -
            ((C5244 + C5245) * C47633 * C47994 +
             (C4841 + C4840) * C47633 * C31617) *
                C47787 -
            ((C7374 + C7375) * C47633 * C47994 +
             (C5247 + C5246) * C47633 * C31617) *
                C3810) *
               C2540 +
           (((C5043 + C5042) * C47633 * C31617 +
             (C5758 + C5759) * C47633 * C47994) *
                C47787 -
            ((C7230 + C7231) * C47633 * C47994 +
             (C5759 + C5758) * C47633 * C31617) *
                C47794 +
            ((C7231 + C7230) * C47633 * C31617 +
             (C4787 * C2435 - C4788 * C2431 - C4787 * C2436 + C4783 * C2440 +
              C4789 * C7509 - C4790 * C7506 - C4789 * C7510 + C47992 * C7512) *
                 C47633 * C47994) *
                C3810) *
               C47749) *
              C47669)) /
        (p * q * std::sqrt(p + q));
    d2ee[184] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C4787 * C122 - C4788 * C115 - C4787 * C123 + C4783 * C136 +
              C4789 * C308 - C4790 * C296 - C4789 * C309 + C47992 * C326) *
                 C47633 * C31617 +
             (C37424 + C37425) * C47633 * C47994) *
                C3302 -
            ((C37426 + C37427) * C47633 * C47994 +
             (C37425 + C37424) * C47633 * C31617) *
                C47791) *
               C2540 +
           (((C37894 + C37895) * C47633 * C31617 +
             (C38306 + C38307) * C47633 * C47994) *
                C47791 -
            ((C37895 + C37894) * C47633 * C47994 +
             (C4789 * C310 - C4790 * C297 - C4789 * C311 + C47992 * C327 +
              C4787 * C308 - C4788 * C296 - C4787 * C309 + C4783 * C326) *
                 C47633 * C31617) *
                C3302) *
               C47749) *
              C48010 +
          ((((C5245 + C5244) * C47633 * C31617 +
             (C5246 + C5247) * C47633 * C47994) *
                C47791 -
            ((C5244 + C5245) * C47633 * C47994 +
             (C4841 + C4840) * C47633 * C31617) *
                C3302) *
               C2540 +
           (((C5043 + C5042) * C47633 * C31617 +
             (C5758 + C5759) * C47633 * C47994) *
                C3302 -
            ((C7230 + C7231) * C47633 * C47994 +
             (C5759 + C5758) * C47633 * C31617) *
                C47791) *
               C47749) *
              C47997 +
          ((((C4843 + C4842) * C47633 * C31617 +
             (C5248 + C5249) * C47633 * C47994) *
                C3302 -
            ((C5250 + C5251) * C47633 * C47994 +
             (C5249 + C5248) * C47633 * C31617) *
                C47791) *
               C2540 +
           (((C5761 + C5760) * C47633 * C31617 +
             (C4787 * C1311 - C4788 * C1302 - C4787 * C1312 + C4783 * C1329 +
              C4789 * C1327 - C4790 * C1310 - C4789 * C1328 + C47992 * C1337) *
                 C47633 * C47994) *
                C47791 -
            ((C5760 + C5761) * C47633 * C47994 +
             (C5047 + C5046) * C47633 * C31617) *
                C3302) *
               C47749) *
              C47968)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C4787 * C122 - C4788 * C115 - C4787 * C123 + C4783 * C136 +
             C4789 * C308 - C4790 * C296 - C4789 * C309 + C47992 * C326) *
                C47633 * C31617 +
            (C37424 + C37425) * C47633 * C47994) *
               C3302 -
           ((C37426 + C37427) * C47633 * C47994 +
            (C37425 + C37424) * C47633 * C31617) *
               C47791) *
              C48020 +
          (((C37894 + C37895) * C47633 * C31617 +
            (C38306 + C38307) * C47633 * C47994) *
               C47791 -
           ((C37895 + C37894) * C47633 * C47994 +
            (C4789 * C310 - C4790 * C297 - C4789 * C311 + C47992 * C327 +
             C4787 * C308 - C4788 * C296 - C4787 * C309 + C4783 * C326) *
                C47633 * C31617) *
               C3302) *
              C48016 +
          (((C4787 * C310 - C4788 * C297 - C4787 * C311 + C4783 * C327 +
             C4789 * C1178 - C4790 * C1170 - C4789 * C1179 + C47992 * C1188) *
                C47633 * C31617 +
            (C38308 + C38309) * C47633 * C47994) *
               C3302 -
           ((C38310 + C38311) * C47633 * C47994 +
            (C38309 + C38308) * C47633 * C31617) *
               C47791) *
              C48006 +
          (((C38778 + C38779) * C47633 * C31617 +
            (C4787 * C6145 - C4788 * C6143 - C4787 * C6146 + C4783 * C6149 +
             C4789 * C22730 - C4790 * C22729 - C4789 * C22731 +
             C47992 * C22732) *
                C47633 * C47994) *
               C47791 -
           ((C38779 + C38778) * C47633 * C47994 +
            (C4789 * C1180 - C4790 * C1171 - C4789 * C1181 + C47992 * C1189 +
             C4787 * C1178 - C4788 * C1170 - C4787 * C1179 + C4783 * C1188) *
                C47633 * C31617) *
               C3302) *
              C47984) *
         C47658) /
            (p * q * std::sqrt(p + q));
    d2ee[185] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4787 * C122 - C4788 * C115 - C4787 * C123 + C4783 * C136 +
             C4789 * C308 - C4790 * C296 - C4789 * C309 + C47992 * C326) *
                C47633 * C31617 +
            (C37424 + C37425) * C47633 * C47994) *
               C47704 * C1436 -
           ((C37895 + C37894) * C47633 * C47994 +
            (C4789 * C310 - C4790 * C297 - C4789 * C311 + C47992 * C327 +
             C4787 * C308 - C4788 * C296 - C4787 * C309 + C4783 * C326) *
                C47633 * C31617) *
               C47704 * C1437 +
           ((C4787 * C310 - C4788 * C297 - C4787 * C311 + C4783 * C327 +
             C4789 * C1178 - C4790 * C1170 - C4789 * C1179 + C47992 * C1188) *
                C47633 * C31617 +
            (C38308 + C38309) * C47633 * C47994) *
               C47704 * C1438 -
           ((C4789 * C6635 - C4790 * C6633 - C4789 * C6636 + C47992 * C6639 +
             C4787 * C1725 - C4788 * C1722 - C4787 * C1726 + C4783 * C1731) *
                C47633 * C47994 +
            (C4789 * C1180 - C4790 * C1171 - C4789 * C1181 + C47992 * C1189 +
             C4787 * C1178 - C4788 * C1170 - C4787 * C1179 + C4783 * C1188) *
                C47633 * C31617) *
               C47704 * C47984) *
              C47928 +
          (((C5043 + C5042) * C47633 * C31617 +
            (C5758 + C5759) * C47633 * C47994) *
               C47704 * C1437 -
           ((C5244 + C5245) * C47633 * C47994 +
            (C4841 + C4840) * C47633 * C31617) *
               C47704 * C1436 -
           ((C6502 + C6503) * C47633 * C47994 +
            (C5045 + C5044) * C47633 * C31617) *
               C47704 * C1438 +
           ((C6295 + C6294) * C47633 * C31617 +
            (C4787 * C1727 - C4788 * C1723 - C4787 * C1728 + C4783 * C1732 +
             C4789 * C6637 - C4790 * C6634 - C4789 * C6638 + C47992 * C6640) *
                C47633 * C47994) *
               C47704 * C47984) *
              C47669)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4787 * C122 - C4788 * C115 - C4787 * C123 + C4783 * C136 +
             C4789 * C308 - C4790 * C296 - C4789 * C309 + C47992 * C326) *
                C47633 * C31617 +
            (C37424 + C37425) * C47633 * C47994) *
               C47704 * C47942 -
           ((C4789 * C1321 - C4790 * C1307 - C4789 * C1322 + C47992 * C1334 +
             C4787 * C948 - C4788 * C943 - C4787 * C949 + C4783 * C958) *
                C47633 * C47994 +
            (C4789 * C310 - C4790 * C297 - C4789 * C311 + C47992 * C327 +
             C4787 * C308 - C4788 * C296 - C4787 * C309 + C4783 * C326) *
                C47633 * C31617) *
               C47704 * C47749) *
              C671 +
          (((C5043 + C5042) * C47633 * C31617 +
            (C5758 + C5759) * C47633 * C47994) *
               C47704 * C47749 -
           ((C5244 + C5245) * C47633 * C47994 +
            (C4841 + C4840) * C47633 * C31617) *
               C47704 * C47942) *
              C672 +
          (((C4843 + C4842) * C47633 * C31617 +
            (C5248 + C5249) * C47633 * C47994) *
               C47704 * C47942 -
           ((C5760 + C5761) * C47633 * C47994 +
            (C5047 + C5046) * C47633 * C31617) *
               C47704 * C47749) *
              C673 +
          (((C5395 + C5394) * C47633 * C31617 +
            (C4787 * C954 - C4788 * C946 - C4787 * C955 + C4783 * C961 +
             C4789 * C1607 - C4790 * C1606 - C4789 * C1608 + C47992 * C1609) *
                C47633 * C47994) *
               C47704 * C47749 -
           ((C5538 + C5539) * C47633 * C47994 +
            (C4845 + C4844) * C47633 * C31617) *
               C47704 * C47942) *
              C47978)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C4787 * C122 - C4788 * C115 - C4787 * C123 + C4783 * C136 +
              C4789 * C308 - C4790 * C296 - C4789 * C309 + C47992 * C326) *
                 C47633 * C31617 +
             (C37424 + C37425) * C47633 * C47994) *
                C1844 -
            ((C37426 + C37427) * C47633 * C47994 +
             (C37425 + C37424) * C47633 * C31617) *
                C1845 +
            ((C37427 + C37426) * C47633 * C31617 +
             (C39178 + C39179) * C47633 * C47994) *
                C47977) *
               C47942 +
           (((C37894 + C37895) * C47633 * C31617 +
             (C38306 + C38307) * C47633 * C47994) *
                C1845 -
            ((C37895 + C37894) * C47633 * C47994 +
             (C4789 * C310 - C4790 * C297 - C4789 * C311 + C47992 * C327 +
              C4787 * C308 - C4788 * C296 - C4787 * C309 + C4783 * C326) *
                 C47633 * C31617) *
                C1844 -
            ((C4789 * C7507 - C4790 * C7505 - C4789 * C7508 + C47992 * C7511 +
              C4787 * C2433 - C4788 * C2430 - C4787 * C2434 + C4783 * C2439) *
                 C47633 * C47994 +
             (C38307 + C38306) * C47633 * C31617) *
                C47977) *
               C47749) *
              C47928 +
          ((((C5245 + C5244) * C47633 * C31617 +
             (C5246 + C5247) * C47633 * C47994) *
                C1845 -
            ((C5244 + C5245) * C47633 * C47994 +
             (C4841 + C4840) * C47633 * C31617) *
                C1844 -
            ((C7374 + C7375) * C47633 * C47994 +
             (C5247 + C5246) * C47633 * C31617) *
                C47977) *
               C47942 +
           (((C5043 + C5042) * C47633 * C31617 +
             (C5758 + C5759) * C47633 * C47994) *
                C1844 -
            ((C7230 + C7231) * C47633 * C47994 +
             (C5759 + C5758) * C47633 * C31617) *
                C1845 +
            ((C7231 + C7230) * C47633 * C31617 +
             (C4787 * C2435 - C4788 * C2431 - C4787 * C2436 + C4783 * C2440 +
              C4789 * C7509 - C4790 * C7506 - C4789 * C7510 + C47992 * C7512) *
                 C47633 * C47994) *
                C47977) *
               C47749) *
              C47669)) /
            (p * q * std::sqrt(p + q));
    d2ee[186] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4787 * C122 - C4788 * C115 - C4787 * C123 + C4783 * C136 +
             C4789 * C308 - C4790 * C296 - C4789 * C309 + C47992 * C326) *
                C47633 * C31617 +
            (C37424 + C37425) * C47633 * C47994) *
               C47943 -
           ((C37426 + C37427) * C47633 * C47994 +
            (C37425 + C37424) * C47633 * C31617) *
               C47791) *
              C1436 +
          (((C37894 + C37895) * C47633 * C31617 +
            (C38306 + C38307) * C47633 * C47994) *
               C47791 -
           ((C37895 + C37894) * C47633 * C47994 +
            (C4789 * C310 - C4790 * C297 - C4789 * C311 + C47992 * C327 +
             C4787 * C308 - C4788 * C296 - C4787 * C309 + C4783 * C326) *
                C47633 * C31617) *
               C47943) *
              C1437 +
          (((C4787 * C310 - C4788 * C297 - C4787 * C311 + C4783 * C327 +
             C4789 * C1178 - C4790 * C1170 - C4789 * C1179 + C47992 * C1188) *
                C47633 * C31617 +
            (C38308 + C38309) * C47633 * C47994) *
               C47943 -
           ((C38310 + C38311) * C47633 * C47994 +
            (C38309 + C38308) * C47633 * C31617) *
               C47791) *
              C1438 +
          (((C38778 + C38779) * C47633 * C31617 +
            (C4787 * C6145 - C4788 * C6143 - C4787 * C6146 + C4783 * C6149 +
             C4789 * C22730 - C4790 * C22729 - C4789 * C22731 +
             C47992 * C22732) *
                C47633 * C47994) *
               C47791 -
           ((C38779 + C38778) * C47633 * C47994 +
            (C4789 * C1180 - C4790 * C1171 - C4789 * C1181 + C47992 * C1189 +
             C4787 * C1178 - C4788 * C1170 - C4787 * C1179 + C4783 * C1188) *
                C47633 * C31617) *
               C47943) *
              C47984) *
         C47658) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C4787 * C122 - C4788 * C115 - C4787 * C123 + C4783 * C136 +
              C4789 * C308 - C4790 * C296 - C4789 * C309 + C47992 * C326) *
                 C47633 * C31617 +
             (C37424 + C37425) * C47633 * C47994) *
                C47943 -
            ((C37426 + C37427) * C47633 * C47994 +
             (C37425 + C37424) * C47633 * C31617) *
                C47791) *
               C47942 +
           (((C37894 + C37895) * C47633 * C31617 +
             (C4787 * C1315 - C4788 * C1304 - C4787 * C1316 + C4783 * C1331 +
              C4789 * C1323 - C4790 * C1308 - C4789 * C1324 + C47992 * C1335) *
                 C47633 * C47994) *
                C47791 -
            ((C37895 + C37894) * C47633 * C47994 +
             (C4789 * C310 - C4790 * C297 - C4789 * C311 + C47992 * C327 +
              C4787 * C308 - C4788 * C296 - C4787 * C309 + C4783 * C326) *
                 C47633 * C31617) *
                C47943) *
               C47749) *
              C291 +
          ((((C5245 + C5244) * C47633 * C31617 +
             (C5246 + C5247) * C47633 * C47994) *
                C47791 -
            ((C5244 + C5245) * C47633 * C47994 +
             (C4841 + C4840) * C47633 * C31617) *
                C47943) *
               C47942 +
           (((C5043 + C5042) * C47633 * C31617 +
             (C5758 + C5759) * C47633 * C47994) *
                C47943 -
            ((C7230 + C7231) * C47633 * C47994 +
             (C5759 + C5758) * C47633 * C31617) *
                C47791) *
               C47749) *
              C292 +
          ((((C4843 + C4842) * C47633 * C31617 +
             (C5248 + C5249) * C47633 * C47994) *
                C47943 -
            ((C5250 + C5251) * C47633 * C47994 +
             (C5249 + C5248) * C47633 * C31617) *
                C47791) *
               C47942 +
           (((C5761 + C5760) * C47633 * C31617 +
             (C4787 * C1311 - C4788 * C1302 - C4787 * C1312 + C4783 * C1329 +
              C4789 * C1327 - C4790 * C1310 - C4789 * C1328 + C47992 * C1337) *
                 C47633 * C47994) *
                C47791 -
            ((C5760 + C5761) * C47633 * C47994 +
             (C5047 + C5046) * C47633 * C31617) *
                C47943) *
               C47749) *
              C47968)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C4787 * C122 - C4788 * C115 - C4787 * C123 + C4783 * C136 +
             C4789 * C308 - C4790 * C296 - C4789 * C309 + C47992 * C326) *
                C47633 * C31617 +
            (C37424 + C37425) * C47633 * C47994) *
               C2310 -
           ((C37426 + C37427) * C47633 * C47994 +
            (C37425 + C37424) * C47633 * C31617) *
               C2311 +
           ((C37427 + C37426) * C47633 * C31617 +
            (C39178 + C39179) * C47633 * C47994) *
               C2312 -
           ((C39180 + C39181) * C47633 * C47994 +
            (C39179 + C39178) * C47633 * C31617) *
               C47990) *
              C47942 +
          (((C37894 + C37895) * C47633 * C31617 +
            (C38306 + C38307) * C47633 * C47994) *
               C2311 -
           ((C37895 + C37894) * C47633 * C47994 +
            (C4789 * C310 - C4790 * C297 - C4789 * C311 + C47992 * C327 +
             C4787 * C308 - C4788 * C296 - C4787 * C309 + C4783 * C326) *
                C47633 * C31617) *
               C2310 -
           ((C39648 + C39649) * C47633 * C47994 +
            (C38307 + C38306) * C47633 * C31617) *
               C2312 +
           ((C39649 + C39648) * C47633 * C31617 +
            (C4787 * C7017 - C4788 * C7015 - C4787 * C7018 + C4783 * C7021 +
             C4789 * C23362 - C4790 * C23361 - C4789 * C23363 +
             C47992 * C23364) *
                C47633 * C47994) *
               C47990) *
              C47749) *
         C47658) /
            (p * q * std::sqrt(p + q));
    d2ee[187] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((C4787 * C122 - C4788 * C115 - C4787 * C123 + C4783 * C136 +
                C4789 * C308 - C4790 * C296 - C4789 * C309 + C47992 * C326) *
                   C47633 * C31617 +
               (C4787 * C503 - C4788 * C491 - C4787 * C504 + C4783 * C521 +
                C4789 * C948 - C4790 * C943 - C4789 * C949 + C47992 * C958) *
                   C47633 * C47994) *
                  C47704 * C47686 * C108 -
              ((C5244 + C5245) * C47633 * C47994 +
               (C4841 + C4840) * C47633 * C31617) *
                  C47704 * C47686 * C109 +
              ((C4843 + C4842) * C47633 * C31617 +
               (C5248 + C5249) * C47633 * C47994) *
                  C47704 * C47686 * C110 -
              ((C5538 + C5539) * C47633 * C47994 +
               (C4845 + C4844) * C47633 * C31617) *
                  C47704 * C47686 * C111 +
              ((C4847 + C4846) * C47633 * C31617 +
               (C4787 * C515 - C4788 * C497 - C4787 * C516 + C4783 * C527 +
                C4789 * C956 - C4790 * C947 - C4789 * C957 + C47992 * C962) *
                   C47633 * C47994) *
                  C47704 * C47686 * C112) +
         0.5 * std::pow(Pi, 2.5) *
             ((((C4787 * C122 - C4788 * C115 - C4787 * C123 + C4783 * C136 +
                 C4789 * C308 - C4790 * C296 - C4789 * C309 + C47992 * C326) *
                    C47633 * C31617 +
                (C4787 * C503 - C4788 * C491 - C4787 * C504 + C4783 * C521 +
                 C4789 * C948 - C4790 * C943 - C4789 * C949 + C47992 * C958) *
                    C47633 * C47994) *
                   C47704 * C48013 -
               ((C4789 * C1321 - C4790 * C1307 - C4789 * C1322 +
                 C47992 * C1334 + C4787 * C948 - C4788 * C943 - C4787 * C949 +
                 C4783 * C958) *
                    C47633 * C47994 +
                (C4789 * C310 - C4790 * C297 - C4789 * C311 + C47992 * C327 +
                 C4787 * C308 - C4788 * C296 - C4787 * C309 + C4783 * C326) *
                    C47633 * C31617) *
                   C47704 * C48001 +
               ((C4787 * C310 - C4788 * C297 - C4787 * C311 + C4783 * C327 +
                 C4789 * C1178 - C4790 * C1170 - C4789 * C1179 +
                 C47992 * C1188) *
                    C47633 * C31617 +
                (C4787 * C1321 - C4788 * C1307 - C4787 * C1322 + C4783 * C1334 +
                 C4789 * C1725 - C4790 * C1722 - C4789 * C1726 +
                 C47992 * C1731) *
                    C47633 * C47994) *
                   C47704 * C47974) *
                  C291 +
              (((C5043 + C5042) * C47633 * C31617 +
                (C5758 + C5759) * C47633 * C47994) *
                   C47704 * C48001 -
               ((C5244 + C5245) * C47633 * C47994 +
                (C4841 + C4840) * C47633 * C31617) *
                   C47704 * C48013 -
               ((C6502 + C6503) * C47633 * C47994 +
                (C5045 + C5044) * C47633 * C31617) *
                   C47704 * C47974) *
                  C292 +
              (((C4843 + C4842) * C47633 * C31617 +
                (C5248 + C5249) * C47633 * C47994) *
                   C47704 * C48013 -
               ((C5760 + C5761) * C47633 * C47994 +
                (C5047 + C5046) * C47633 * C31617) *
                   C47704 * C48001 +
               ((C5049 + C5048) * C47633 * C31617 +
                (C4787 * C1317 - C4788 * C1305 - C4787 * C1318 + C4783 * C1332 +
                 C4789 * C1729 - C4790 * C1724 - C4789 * C1730 +
                 C47992 * C1733) *
                    C47633 * C47994) *
                   C47704 * C47974) *
                  C47968)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C4787 * C122 - C4788 * C115 - C4787 * C123 + C4783 * C136 +
             C4789 * C308 - C4790 * C296 - C4789 * C309 + C47992 * C326) *
                C47633 * C31617 +
            (C37424 + C37425) * C47633 * C47994) *
               C48014 -
           ((C37426 + C37427) * C47633 * C47994 +
            (C37425 + C37424) * C47633 * C31617) *
               C48003 +
           ((C37427 + C37426) * C47633 * C31617 +
            (C4787 * C2034 - C4788 * C2026 - C4787 * C2035 + C4783 * C2044 +
             C4789 * C2433 - C4790 * C2430 - C4789 * C2434 + C47992 * C2439) *
                C47633 * C47994) *
               C47977) *
              C47686 * C291 +
          (((C5245 + C5244) * C47633 * C31617 +
            (C5246 + C5247) * C47633 * C47994) *
               C48003 -
           ((C5244 + C5245) * C47633 * C47994 +
            (C4841 + C4840) * C47633 * C31617) *
               C48014 -
           ((C7374 + C7375) * C47633 * C47994 +
            (C5247 + C5246) * C47633 * C31617) *
               C47977) *
              C47686 * C292 +
          (((C4843 + C4842) * C47633 * C31617 +
            (C5248 + C5249) * C47633 * C47994) *
               C48014 -
           ((C5250 + C5251) * C47633 * C47994 +
            (C5249 + C5248) * C47633 * C31617) *
               C48003 +
           ((C5251 + C5250) * C47633 * C31617 +
            (C4787 * C2030 - C4788 * C2024 - C4787 * C2031 + C4783 * C2042 +
             C4789 * C2437 - C4790 * C2432 - C4789 * C2438 + C47992 * C2441) *
                C47633 * C47994) *
               C47977) *
              C47686 * C47968)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C4787 * C122 - C4788 * C115 - C4787 * C123 + C4783 * C136 +
             C4789 * C308 - C4790 * C296 - C4789 * C309 + C47992 * C326) *
                C47633 * C31617 +
            (C37424 + C37425) * C47633 * C47994) *
               C47704 * C1094 -
           ((C37895 + C37894) * C47633 * C47994 +
            (C4789 * C310 - C4790 * C297 - C4789 * C311 + C47992 * C327 +
             C4787 * C308 - C4788 * C296 - C4787 * C309 + C4783 * C326) *
                C47633 * C31617) *
               C47704 * C1095 +
           ((C4787 * C310 - C4788 * C297 - C4787 * C311 + C4783 * C327 +
             C4789 * C1178 - C4790 * C1170 - C4789 * C1179 + C47992 * C1188) *
                C47633 * C31617 +
            (C4787 * C1321 - C4788 * C1307 - C4787 * C1322 + C4783 * C1334 +
             C4789 * C1725 - C4790 * C1722 - C4789 * C1726 + C47992 * C1731) *
                C47633 * C47994) *
               C47704 * C47974) *
              C48010 +
          (((C5043 + C5042) * C47633 * C31617 +
            (C5758 + C5759) * C47633 * C47994) *
               C47704 * C1095 -
           ((C5244 + C5245) * C47633 * C47994 +
            (C4841 + C4840) * C47633 * C31617) *
               C47704 * C1094 -
           ((C6502 + C6503) * C47633 * C47994 +
            (C5045 + C5044) * C47633 * C31617) *
               C47704 * C47974) *
              C47997 +
          (((C4843 + C4842) * C47633 * C31617 +
            (C5248 + C5249) * C47633 * C47994) *
               C47704 * C1094 -
           ((C5760 + C5761) * C47633 * C47994 +
            (C5047 + C5046) * C47633 * C31617) *
               C47704 * C1095 +
           ((C5049 + C5048) * C47633 * C31617 +
            (C4787 * C1317 - C4788 * C1305 - C4787 * C1318 + C4783 * C1332 +
             C4789 * C1729 - C4790 * C1724 - C4789 * C1730 + C47992 * C1733) *
                C47633 * C47994) *
               C47704 * C47974) *
              C47968)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C4787 * C122 - C4788 * C115 - C4787 * C123 + C4783 * C136 +
            C4789 * C308 - C4790 * C296 - C4789 * C309 + C47992 * C326) *
               C47633 * C31617 +
           (C37424 + C37425) * C47633 * C47994) *
              C47704 * C1162 -
          ((C37895 + C37894) * C47633 * C47994 +
           (C4789 * C310 - C4790 * C297 - C4789 * C311 + C47992 * C327 +
            C4787 * C308 - C4788 * C296 - C4787 * C309 + C4783 * C326) *
               C47633 * C31617) *
              C47704 * C1163 +
          ((C4787 * C310 - C4788 * C297 - C4787 * C311 + C4783 * C327 +
            C4789 * C1178 - C4790 * C1170 - C4789 * C1179 + C47992 * C1188) *
               C47633 * C31617 +
           (C4787 * C1321 - C4788 * C1307 - C4787 * C1322 + C4783 * C1334 +
            C4789 * C1725 - C4790 * C1722 - C4789 * C1726 + C47992 * C1731) *
               C47633 * C47994) *
              C47704 * C1164 -
          ((C4789 * C6635 - C4790 * C6633 - C4789 * C6636 + C47992 * C6639 +
            C4787 * C1725 - C4788 * C1722 - C4787 * C1726 + C4783 * C1731) *
               C47633 * C47994 +
           (C4789 * C1180 - C4790 * C1171 - C4789 * C1181 + C47992 * C1189 +
            C4787 * C1178 - C4788 * C1170 - C4787 * C1179 + C4783 * C1188) *
               C47633 * C31617) *
              C47704 * C1165 +
          ((C4787 * C1180 - C4788 * C1171 - C4787 * C1181 + C4783 * C1189 +
            C4789 * C5991 - C4790 * C5989 - C4789 * C5992 + C47992 * C5995) *
               C47633 * C31617 +
           (C4787 * C6635 - C4788 * C6633 - C4787 * C6636 + C4783 * C6639 +
            C4789 * C23076 - C4790 * C23075 - C4789 * C23077 +
            C47992 * C23078) *
               C47633 * C47994) *
              C47704 * C1166) *
         C47658) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C4787 * C122 - C4788 * C115 - C4787 * C123 + C4783 * C136 +
             C4789 * C308 - C4790 * C296 - C4789 * C309 + C47992 * C326) *
                C47633 * C31617 +
            (C37424 + C37425) * C47633 * C47994) *
               C48014 -
           ((C37426 + C37427) * C47633 * C47994 +
            (C37425 + C37424) * C47633 * C31617) *
               C48003 +
           ((C37427 + C37426) * C47633 * C31617 +
            (C4787 * C2034 - C4788 * C2026 - C4787 * C2035 + C4783 * C2044 +
             C4789 * C2433 - C4790 * C2430 - C4789 * C2434 + C47992 * C2439) *
                C47633 * C47994) *
               C47977) *
              C1094 +
          (((C37894 + C37895) * C47633 * C31617 +
            (C38306 + C38307) * C47633 * C47994) *
               C48003 -
           ((C37895 + C37894) * C47633 * C47994 +
            (C4789 * C310 - C4790 * C297 - C4789 * C311 + C47992 * C327 +
             C4787 * C308 - C4788 * C296 - C4787 * C309 + C4783 * C326) *
                C47633 * C31617) *
               C48014 -
           ((C4789 * C7507 - C4790 * C7505 - C4789 * C7508 + C47992 * C7511 +
             C4787 * C2433 - C4788 * C2430 - C4787 * C2434 + C4783 * C2439) *
                C47633 * C47994 +
            (C38307 + C38306) * C47633 * C31617) *
               C47977) *
              C1095 +
          (((C4787 * C310 - C4788 * C297 - C4787 * C311 + C4783 * C327 +
             C4789 * C1178 - C4790 * C1170 - C4789 * C1179 + C47992 * C1188) *
                C47633 * C31617 +
            (C38308 + C38309) * C47633 * C47994) *
               C48014 -
           ((C38310 + C38311) * C47633 * C47994 +
            (C38309 + C38308) * C47633 * C31617) *
               C48003 +
           ((C38311 + C38310) * C47633 * C31617 +
            (C4787 * C7507 - C4788 * C7505 - C4787 * C7508 + C4783 * C7511 +
             C4789 * C23708 - C4790 * C23707 - C4789 * C23709 +
             C47992 * C23710) *
                C47633 * C47994) *
               C47977) *
              C47974) *
         C47658) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C4787 * C122 - C4788 * C115 - C4787 * C123 + C4783 * C136 +
             C4789 * C308 - C4790 * C296 - C4789 * C309 + C47992 * C326) *
                C47633 * C31617 +
            (C37424 + C37425) * C47633 * C47994) *
               C1844 -
           ((C37426 + C37427) * C47633 * C47994 +
            (C37425 + C37424) * C47633 * C31617) *
               C1845 +
           ((C37427 + C37426) * C47633 * C31617 +
            (C4787 * C2034 - C4788 * C2026 - C4787 * C2035 + C4783 * C2044 +
             C4789 * C2433 - C4790 * C2430 - C4789 * C2434 + C47992 * C2439) *
                C47633 * C47994) *
               C47977) *
              C47686 * C48010 +
          (((C5245 + C5244) * C47633 * C31617 +
            (C5246 + C5247) * C47633 * C47994) *
               C1845 -
           ((C5244 + C5245) * C47633 * C47994 +
            (C4841 + C4840) * C47633 * C31617) *
               C1844 -
           ((C7374 + C7375) * C47633 * C47994 +
            (C5247 + C5246) * C47633 * C31617) *
               C47977) *
              C47686 * C47997 +
          (((C4843 + C4842) * C47633 * C31617 +
            (C5248 + C5249) * C47633 * C47994) *
               C1844 -
           ((C5250 + C5251) * C47633 * C47994 +
            (C5249 + C5248) * C47633 * C31617) *
               C1845 +
           ((C5251 + C5250) * C47633 * C31617 +
            (C4787 * C2030 - C4788 * C2024 - C4787 * C2031 + C4783 * C2042 +
             C4789 * C2437 - C4790 * C2432 - C4789 * C2438 + C47992 * C2441) *
                C47633 * C47994) *
               C47977) *
              C47686 * C47968)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C4787 * C122 - C4788 * C115 - C4787 * C123 + C4783 * C136 +
             C4789 * C308 - C4790 * C296 - C4789 * C309 + C47992 * C326) *
                C47633 * C31617 +
            (C37424 + C37425) * C47633 * C47994) *
               C1844 -
           ((C37426 + C37427) * C47633 * C47994 +
            (C37425 + C37424) * C47633 * C31617) *
               C1845 +
           ((C37427 + C37426) * C47633 * C31617 +
            (C4787 * C2034 - C4788 * C2026 - C4787 * C2035 + C4783 * C2044 +
             C4789 * C2433 - C4790 * C2430 - C4789 * C2434 + C47992 * C2439) *
                C47633 * C47994) *
               C47977) *
              C48013 +
          (((C37894 + C37895) * C47633 * C31617 +
            (C38306 + C38307) * C47633 * C47994) *
               C1845 -
           ((C37895 + C37894) * C47633 * C47994 +
            (C4789 * C310 - C4790 * C297 - C4789 * C311 + C47992 * C327 +
             C4787 * C308 - C4788 * C296 - C4787 * C309 + C4783 * C326) *
                C47633 * C31617) *
               C1844 -
           ((C4789 * C7507 - C4790 * C7505 - C4789 * C7508 + C47992 * C7511 +
             C4787 * C2433 - C4788 * C2430 - C4787 * C2434 + C4783 * C2439) *
                C47633 * C47994 +
            (C38307 + C38306) * C47633 * C31617) *
               C47977) *
              C48001 +
          (((C4787 * C310 - C4788 * C297 - C4787 * C311 + C4783 * C327 +
             C4789 * C1178 - C4790 * C1170 - C4789 * C1179 + C47992 * C1188) *
                C47633 * C31617 +
            (C38308 + C38309) * C47633 * C47994) *
               C1844 -
           ((C38310 + C38311) * C47633 * C47994 +
            (C38309 + C38308) * C47633 * C31617) *
               C1845 +
           ((C38311 + C38310) * C47633 * C31617 +
            (C4787 * C7507 - C4788 * C7505 - C4787 * C7508 + C4783 * C7511 +
             C4789 * C23708 - C4790 * C23707 - C4789 * C23709 +
             C47992 * C23710) *
                C47633 * C47994) *
               C47977) *
              C47974) *
         C47658) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C4787 * C122 - C4788 * C115 - C4787 * C123 + C4783 * C136 +
            C4789 * C308 - C4790 * C296 - C4789 * C309 + C47992 * C326) *
               C47633 * C31617 +
           (C37424 + C37425) * C47633 * C47994) *
              C2019 -
          ((C37426 + C37427) * C47633 * C47994 +
           (C37425 + C37424) * C47633 * C31617) *
              C2020 +
          ((C37427 + C37426) * C47633 * C31617 +
           (C39178 + C39179) * C47633 * C47994) *
              C2021 -
          ((C39180 + C39181) * C47633 * C47994 +
           (C39179 + C39178) * C47633 * C31617) *
              C2022 +
          ((C39181 + C39180) * C47633 * C31617 +
           (C4787 * C12604 - C4788 * C12602 - C4787 * C12605 + C4783 * C12608 +
            C4789 * C28072 - C4790 * C28071 - C4789 * C28073 +
            C47992 * C28074) *
               C47633 * C47994) *
              C2023) *
         C47686 * C47658) /
            (p * q * std::sqrt(p + q));
    d2ee[188] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C4787 * C122 - C4788 * C115 - C4787 * C123 + C4783 * C136 +
              C4789 * C308 - C4790 * C296 - C4789 * C309 + C47992 * C326) *
                 C47633 * C31617 +
             (C37424 + C37425) * C47633 * C47994) *
                C47943 -
            ((C37426 + C37427) * C47633 * C47994 +
             (C37425 + C37424) * C47633 * C31617) *
                C47791) *
               C1094 +
           (((C37894 + C37895) * C47633 * C31617 +
             (C38306 + C38307) * C47633 * C47994) *
                C47791 -
            ((C37895 + C37894) * C47633 * C47994 +
             (C4789 * C310 - C4790 * C297 - C4789 * C311 + C47992 * C327 +
              C4787 * C308 - C4788 * C296 - C4787 * C309 + C4783 * C326) *
                 C47633 * C31617) *
                C47943) *
               C1095 +
           (((C4787 * C310 - C4788 * C297 - C4787 * C311 + C4783 * C327 +
              C4789 * C1178 - C4790 * C1170 - C4789 * C1179 + C47992 * C1188) *
                 C47633 * C31617 +
             (C38308 + C38309) * C47633 * C47994) *
                C47943 -
            ((C38310 + C38311) * C47633 * C47994 +
             (C38309 + C38308) * C47633 * C31617) *
                C47791) *
               C47974) *
              C47928 +
          ((((C5245 + C5244) * C47633 * C31617 +
             (C5246 + C5247) * C47633 * C47994) *
                C47791 -
            ((C5244 + C5245) * C47633 * C47994 +
             (C4841 + C4840) * C47633 * C31617) *
                C47943) *
               C1094 +
           (((C5043 + C5042) * C47633 * C31617 +
             (C5758 + C5759) * C47633 * C47994) *
                C47943 -
            ((C7230 + C7231) * C47633 * C47994 +
             (C5759 + C5758) * C47633 * C31617) *
                C47791) *
               C1095 +
           (((C6503 + C6502) * C47633 * C31617 +
             (C4787 * C1325 - C4788 * C1309 - C4787 * C1326 + C4783 * C1336 +
              C4789 * C6147 - C4790 * C6144 - C4789 * C6148 + C47992 * C6150) *
                 C47633 * C47994) *
                C47791 -
            ((C6502 + C6503) * C47633 * C47994 +
             (C5045 + C5044) * C47633 * C31617) *
                C47943) *
               C47974) *
              C47669)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4787 * C122 - C4788 * C115 - C4787 * C123 + C4783 * C136 +
             C4789 * C308 - C4790 * C296 - C4789 * C309 + C47992 * C326) *
                C47633 * C31617 +
            (C37424 + C37425) * C47633 * C47994) *
               C47943 -
           ((C37426 + C37427) * C47633 * C47994 +
            (C37425 + C37424) * C47633 * C31617) *
               C47791) *
              C47686 * C671 +
          (((C5245 + C5244) * C47633 * C31617 +
            (C5246 + C5247) * C47633 * C47994) *
               C47791 -
           ((C5244 + C5245) * C47633 * C47994 +
            (C4841 + C4840) * C47633 * C31617) *
               C47943) *
              C47686 * C672 +
          (((C4843 + C4842) * C47633 * C31617 +
            (C5248 + C5249) * C47633 * C47994) *
               C47943 -
           ((C5250 + C5251) * C47633 * C47994 +
            (C5249 + C5248) * C47633 * C31617) *
               C47791) *
              C47686 * C673 +
          (((C5539 + C5538) * C47633 * C31617 +
            (C4787 * C513 - C4788 * C496 - C4787 * C514 + C4783 * C526 +
             C4789 * C2195 - C4790 * C2194 - C4789 * C2196 + C47992 * C2197) *
                C47633 * C47994) *
               C47791 -
           ((C5538 + C5539) * C47633 * C47994 +
            (C4845 + C4844) * C47633 * C31617) *
               C47943) *
              C47686 * C47978)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C4787 * C122 - C4788 * C115 - C4787 * C123 + C4783 * C136 +
             C4789 * C308 - C4790 * C296 - C4789 * C309 + C47992 * C326) *
                C47633 * C31617 +
            (C37424 + C37425) * C47633 * C47994) *
               C2310 -
           ((C37426 + C37427) * C47633 * C47994 +
            (C37425 + C37424) * C47633 * C31617) *
               C2311 +
           ((C37427 + C37426) * C47633 * C31617 +
            (C39178 + C39179) * C47633 * C47994) *
               C2312 -
           ((C39180 + C39181) * C47633 * C47994 +
            (C39179 + C39178) * C47633 * C31617) *
               C47990) *
              C47686 * C47928 +
          (((C5245 + C5244) * C47633 * C31617 +
            (C5246 + C5247) * C47633 * C47994) *
               C2311 -
           ((C5244 + C5245) * C47633 * C47994 +
            (C4841 + C4840) * C47633 * C31617) *
               C2310 -
           ((C7374 + C7375) * C47633 * C47994 +
            (C5247 + C5246) * C47633 * C31617) *
               C2312 +
           ((C7375 + C7374) * C47633 * C31617 +
            (C4787 * C2038 - C4788 * C2028 - C4787 * C2039 + C4783 * C2046 +
             C4789 * C7019 - C4790 * C7016 - C4789 * C7020 + C47992 * C7022) *
                C47633 * C47994) *
               C47990) *
              C47686 * C47669)) /
            (p * q * std::sqrt(p + q));
    d2ee[189] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C4787 * C122 - C4788 * C115 - C4787 * C123 + C4783 * C136 +
             C4789 * C308 - C4790 * C296 - C4789 * C309 + C47992 * C326) *
                C47633 * C31617 +
            (C4787 * C503 - C4788 * C491 - C4787 * C504 + C4783 * C521 +
             C4789 * C948 - C4790 * C943 - C4789 * C949 + C47992 * C958) *
                C47633 * C47994) *
               C47704 * C48013 -
           ((C4789 * C1321 - C4790 * C1307 - C4789 * C1322 + C47992 * C1334 +
             C4787 * C948 - C4788 * C943 - C4787 * C949 + C4783 * C958) *
                C47633 * C47994 +
            (C4789 * C310 - C4790 * C297 - C4789 * C311 + C47992 * C327 +
             C4787 * C308 - C4788 * C296 - C4787 * C309 + C4783 * C326) *
                C47633 * C31617) *
               C47704 * C48001 +
           ((C4787 * C310 - C4788 * C297 - C4787 * C311 + C4783 * C327 +
             C4789 * C1178 - C4790 * C1170 - C4789 * C1179 + C47992 * C1188) *
                C47633 * C31617 +
            (C4787 * C1321 - C4788 * C1307 - C4787 * C1322 + C4783 * C1334 +
             C4789 * C1725 - C4790 * C1722 - C4789 * C1726 + C47992 * C1731) *
                C47633 * C47994) *
               C47704 * C47974) *
              C291 +
          (((C5043 + C5042) * C47633 * C31617 +
            (C5758 + C5759) * C47633 * C47994) *
               C47704 * C48001 -
           ((C5244 + C5245) * C47633 * C47994 +
            (C4841 + C4840) * C47633 * C31617) *
               C47704 * C48013 -
           ((C6502 + C6503) * C47633 * C47994 +
            (C5045 + C5044) * C47633 * C31617) *
               C47704 * C47974) *
              C292 +
          (((C4843 + C4842) * C47633 * C31617 +
            (C5248 + C5249) * C47633 * C47994) *
               C47704 * C48013 -
           ((C5760 + C5761) * C47633 * C47994 +
            (C5047 + C5046) * C47633 * C31617) *
               C47704 * C48001 +
           ((C5049 + C5048) * C47633 * C31617 +
            (C4787 * C1317 - C4788 * C1305 - C4787 * C1318 + C4783 * C1332 +
             C4789 * C1729 - C4790 * C1724 - C4789 * C1730 + C47992 * C1733) *
                C47633 * C47994) *
               C47704 * C47974) *
              C47968)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C4787 * C122 - C4788 * C115 - C4787 * C123 + C4783 * C136 +
            C4789 * C308 - C4790 * C296 - C4789 * C309 + C47992 * C326) *
               C47633 * C31617 +
           (C4787 * C503 - C4788 * C491 - C4787 * C504 + C4783 * C521 +
            C4789 * C948 - C4790 * C943 - C4789 * C949 + C47992 * C958) *
               C47633 * C47994) *
              C47704 * C47686 * C108 -
          ((C5244 + C5245) * C47633 * C47994 +
           (C4841 + C4840) * C47633 * C31617) *
              C47704 * C47686 * C109 +
          ((C4843 + C4842) * C47633 * C31617 +
           (C5248 + C5249) * C47633 * C47994) *
              C47704 * C47686 * C110 -
          ((C5538 + C5539) * C47633 * C47994 +
           (C4845 + C4844) * C47633 * C31617) *
              C47704 * C47686 * C111 +
          ((C4847 + C4846) * C47633 * C31617 +
           (C4787 * C515 - C4788 * C497 - C4787 * C516 + C4783 * C527 +
            C4789 * C956 - C4790 * C947 - C4789 * C957 + C47992 * C962) *
               C47633 * C47994) *
              C47704 * C47686 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C4787 * C122 - C4788 * C115 - C4787 * C123 + C4783 * C136 +
             C4789 * C308 - C4790 * C296 - C4789 * C309 + C47992 * C326) *
                C47633 * C31617 +
            (C37424 + C37425) * C47633 * C47994) *
               C47704 * C1094 -
           ((C37895 + C37894) * C47633 * C47994 +
            (C4789 * C310 - C4790 * C297 - C4789 * C311 + C47992 * C327 +
             C4787 * C308 - C4788 * C296 - C4787 * C309 + C4783 * C326) *
                C47633 * C31617) *
               C47704 * C1095 +
           ((C4787 * C310 - C4788 * C297 - C4787 * C311 + C4783 * C327 +
             C4789 * C1178 - C4790 * C1170 - C4789 * C1179 + C47992 * C1188) *
                C47633 * C31617 +
            (C4787 * C1321 - C4788 * C1307 - C4787 * C1322 + C4783 * C1334 +
             C4789 * C1725 - C4790 * C1722 - C4789 * C1726 + C47992 * C1731) *
                C47633 * C47994) *
               C47704 * C47974) *
              C48010 +
          (((C5043 + C5042) * C47633 * C31617 +
            (C5758 + C5759) * C47633 * C47994) *
               C47704 * C1095 -
           ((C5244 + C5245) * C47633 * C47994 +
            (C4841 + C4840) * C47633 * C31617) *
               C47704 * C1094 -
           ((C6502 + C6503) * C47633 * C47994 +
            (C5045 + C5044) * C47633 * C31617) *
               C47704 * C47974) *
              C47997 +
          (((C4843 + C4842) * C47633 * C31617 +
            (C5248 + C5249) * C47633 * C47994) *
               C47704 * C1094 -
           ((C5760 + C5761) * C47633 * C47994 +
            (C5047 + C5046) * C47633 * C31617) *
               C47704 * C1095 +
           ((C5049 + C5048) * C47633 * C31617 +
            (C4787 * C1317 - C4788 * C1305 - C4787 * C1318 + C4783 * C1332 +
             C4789 * C1729 - C4790 * C1724 - C4789 * C1730 + C47992 * C1733) *
                C47633 * C47994) *
               C47704 * C47974) *
              C47968)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C4787 * C122 - C4788 * C115 - C4787 * C123 + C4783 * C136 +
            C4789 * C308 - C4790 * C296 - C4789 * C309 + C47992 * C326) *
               C47633 * C31617 +
           (C37424 + C37425) * C47633 * C47994) *
              C47704 * C1162 -
          ((C37895 + C37894) * C47633 * C47994 +
           (C4789 * C310 - C4790 * C297 - C4789 * C311 + C47992 * C327 +
            C4787 * C308 - C4788 * C296 - C4787 * C309 + C4783 * C326) *
               C47633 * C31617) *
              C47704 * C1163 +
          ((C4787 * C310 - C4788 * C297 - C4787 * C311 + C4783 * C327 +
            C4789 * C1178 - C4790 * C1170 - C4789 * C1179 + C47992 * C1188) *
               C47633 * C31617 +
           (C4787 * C1321 - C4788 * C1307 - C4787 * C1322 + C4783 * C1334 +
            C4789 * C1725 - C4790 * C1722 - C4789 * C1726 + C47992 * C1731) *
               C47633 * C47994) *
              C47704 * C1164 -
          ((C4789 * C6635 - C4790 * C6633 - C4789 * C6636 + C47992 * C6639 +
            C4787 * C1725 - C4788 * C1722 - C4787 * C1726 + C4783 * C1731) *
               C47633 * C47994 +
           (C4789 * C1180 - C4790 * C1171 - C4789 * C1181 + C47992 * C1189 +
            C4787 * C1178 - C4788 * C1170 - C4787 * C1179 + C4783 * C1188) *
               C47633 * C31617) *
              C47704 * C1165 +
          ((C4787 * C1180 - C4788 * C1171 - C4787 * C1181 + C4783 * C1189 +
            C4789 * C5991 - C4790 * C5989 - C4789 * C5992 + C47992 * C5995) *
               C47633 * C31617 +
           (C4787 * C6635 - C4788 * C6633 - C4787 * C6636 + C4783 * C6639 +
            C4789 * C23076 - C4790 * C23075 - C4789 * C23077 +
            C47992 * C23078) *
               C47633 * C47994) *
              C47704 * C1166) *
         C47658) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4787 * C122 - C4788 * C115 - C4787 * C123 + C4783 * C136 +
             C4789 * C308 - C4790 * C296 - C4789 * C309 + C47992 * C326) *
                C47633 * C31617 +
            (C37424 + C37425) * C47633 * C47994) *
               C1844 -
           ((C37426 + C37427) * C47633 * C47994 +
            (C37425 + C37424) * C47633 * C31617) *
               C1845 +
           ((C37427 + C37426) * C47633 * C31617 +
            (C4787 * C2034 - C4788 * C2026 - C4787 * C2035 + C4783 * C2044 +
             C4789 * C2433 - C4790 * C2430 - C4789 * C2434 + C47992 * C2439) *
                C47633 * C47994) *
               C47977) *
              C47686 * C48010 +
          (((C5245 + C5244) * C47633 * C31617 +
            (C5246 + C5247) * C47633 * C47994) *
               C1845 -
           ((C5244 + C5245) * C47633 * C47994 +
            (C4841 + C4840) * C47633 * C31617) *
               C1844 -
           ((C7374 + C7375) * C47633 * C47994 +
            (C5247 + C5246) * C47633 * C31617) *
               C47977) *
              C47686 * C47997 +
          (((C4843 + C4842) * C47633 * C31617 +
            (C5248 + C5249) * C47633 * C47994) *
               C1844 -
           ((C5250 + C5251) * C47633 * C47994 +
            (C5249 + C5248) * C47633 * C31617) *
               C1845 +
           ((C5251 + C5250) * C47633 * C31617 +
            (C4787 * C2030 - C4788 * C2024 - C4787 * C2031 + C4783 * C2042 +
             C4789 * C2437 - C4790 * C2432 - C4789 * C2438 + C47992 * C2441) *
                C47633 * C47994) *
               C47977) *
              C47686 * C47968)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4787 * C122 - C4788 * C115 - C4787 * C123 + C4783 * C136 +
             C4789 * C308 - C4790 * C296 - C4789 * C309 + C47992 * C326) *
                C47633 * C31617 +
            (C37424 + C37425) * C47633 * C47994) *
               C1844 -
           ((C37426 + C37427) * C47633 * C47994 +
            (C37425 + C37424) * C47633 * C31617) *
               C1845 +
           ((C37427 + C37426) * C47633 * C31617 +
            (C4787 * C2034 - C4788 * C2026 - C4787 * C2035 + C4783 * C2044 +
             C4789 * C2433 - C4790 * C2430 - C4789 * C2434 + C47992 * C2439) *
                C47633 * C47994) *
               C47977) *
              C48013 +
          (((C37894 + C37895) * C47633 * C31617 +
            (C38306 + C38307) * C47633 * C47994) *
               C1845 -
           ((C37895 + C37894) * C47633 * C47994 +
            (C4789 * C310 - C4790 * C297 - C4789 * C311 + C47992 * C327 +
             C4787 * C308 - C4788 * C296 - C4787 * C309 + C4783 * C326) *
                C47633 * C31617) *
               C1844 -
           ((C4789 * C7507 - C4790 * C7505 - C4789 * C7508 + C47992 * C7511 +
             C4787 * C2433 - C4788 * C2430 - C4787 * C2434 + C4783 * C2439) *
                C47633 * C47994 +
            (C38307 + C38306) * C47633 * C31617) *
               C47977) *
              C48001 +
          (((C4787 * C310 - C4788 * C297 - C4787 * C311 + C4783 * C327 +
             C4789 * C1178 - C4790 * C1170 - C4789 * C1179 + C47992 * C1188) *
                C47633 * C31617 +
            (C38308 + C38309) * C47633 * C47994) *
               C1844 -
           ((C38310 + C38311) * C47633 * C47994 +
            (C38309 + C38308) * C47633 * C31617) *
               C1845 +
           ((C38311 + C38310) * C47633 * C31617 +
            (C4787 * C7507 - C4788 * C7505 - C4787 * C7508 + C4783 * C7511 +
             C4789 * C23708 - C4790 * C23707 - C4789 * C23709 +
             C47992 * C23710) *
                C47633 * C47994) *
               C47977) *
              C47974) *
         C47658) /
            (p * q * std::sqrt(p + q));
    d2ee[190] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C4787 * C122 - C4788 * C115 - C4787 * C123 + C4783 * C136 +
              C4789 * C308 - C4790 * C296 - C4789 * C309 + C47992 * C326) *
                 C47633 * C31617 +
             (C37424 + C37425) * C47633 * C47994) *
                C3302 -
            ((C37426 + C37427) * C47633 * C47994 +
             (C37425 + C37424) * C47633 * C31617) *
                C47791) *
               C47942 +
           (((C37894 + C37895) * C47633 * C31617 +
             (C38306 + C38307) * C47633 * C47994) *
                C47791 -
            ((C37895 + C37894) * C47633 * C47994 +
             (C4789 * C310 - C4790 * C297 - C4789 * C311 + C47992 * C327 +
              C4787 * C308 - C4788 * C296 - C4787 * C309 + C4783 * C326) *
                 C47633 * C31617) *
                C3302) *
               C47749) *
              C47663 +
          ((((C5245 + C5244) * C47633 * C31617 +
             (C5246 + C5247) * C47633 * C47994) *
                C47791 -
            ((C5244 + C5245) * C47633 * C47994 +
             (C4841 + C4840) * C47633 * C31617) *
                C3302) *
               C47942 +
           (((C5043 + C5042) * C47633 * C31617 +
             (C5758 + C5759) * C47633 * C47994) *
                C3302 -
            ((C7230 + C7231) * C47633 * C47994 +
             (C5759 + C5758) * C47633 * C31617) *
                C47791) *
               C47749) *
              C47672 +
          ((((C4843 + C4842) * C47633 * C31617 +
             (C5248 + C5249) * C47633 * C47994) *
                C3302 -
            ((C5250 + C5251) * C47633 * C47994 +
             (C5249 + C5248) * C47633 * C31617) *
                C47791) *
               C47942 +
           (((C5761 + C5760) * C47633 * C31617 +
             (C4787 * C1311 - C4788 * C1302 - C4787 * C1312 + C4783 * C1329 +
              C4789 * C1327 - C4790 * C1310 - C4789 * C1328 + C47992 * C1337) *
                 C47633 * C47994) *
                C47791 -
            ((C5760 + C5761) * C47633 * C47994 +
             (C5047 + C5046) * C47633 * C31617) *
                C3302) *
               C47749) *
              C2911)) /
        (p * q * std::sqrt(p + q));
    d2ee[191] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C4787 * C122 - C4788 * C115 - C4787 * C123 + C4783 * C136 +
              C4789 * C308 - C4790 * C296 - C4789 * C309 + C47992 * C326) *
                 C47633 * C31617 +
             (C37424 + C37425) * C47633 * C47994) *
                C47787 -
            ((C37426 + C37427) * C47633 * C47994 +
             (C37425 + C37424) * C47633 * C31617) *
                C47794 +
            ((C37427 + C37426) * C47633 * C31617 +
             (C39178 + C39179) * C47633 * C47994) *
                C3810) *
               C47942 +
           (((C37894 + C37895) * C47633 * C31617 +
             (C38306 + C38307) * C47633 * C47994) *
                C47794 -
            ((C37895 + C37894) * C47633 * C47994 +
             (C4789 * C310 - C4790 * C297 - C4789 * C311 + C47992 * C327 +
              C4787 * C308 - C4788 * C296 - C4787 * C309 + C4783 * C326) *
                 C47633 * C31617) *
                C47787 -
            ((C39648 + C39649) * C47633 * C47994 +
             (C38307 + C38306) * C47633 * C31617) *
                C3810) *
               C47749) *
              C2648 +
          ((((C5245 + C5244) * C47633 * C31617 +
             (C5246 + C5247) * C47633 * C47994) *
                C47794 -
            ((C5244 + C5245) * C47633 * C47994 +
             (C4841 + C4840) * C47633 * C31617) *
                C47787 -
            ((C7374 + C7375) * C47633 * C47994 +
             (C5247 + C5246) * C47633 * C31617) *
                C3810) *
               C47942 +
           (((C5043 + C5042) * C47633 * C31617 +
             (C5758 + C5759) * C47633 * C47994) *
                C47787 -
            ((C7230 + C7231) * C47633 * C47994 +
             (C5759 + C5758) * C47633 * C31617) *
                C47794 +
            ((C7231 + C7230) * C47633 * C31617 +
             (C4787 * C2435 - C4788 * C2431 - C4787 * C2436 + C4783 * C2440 +
              C4789 * C7509 - C4790 * C7506 - C4789 * C7510 + C47992 * C7512) *
                 C47633 * C47994) *
                C3810) *
               C47749) *
              C47669)) /
        (p * q * std::sqrt(p + q));
    d2ee[192] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C4787 * C122 - C4788 * C115 - C4787 * C123 + C4783 * C136 +
              C4789 * C308 - C4790 * C296 - C4789 * C309 + C47992 * C326) *
                 C47633 * C31617 +
             (C37424 + C37425) * C47633 * C47994) *
                C3302 -
            ((C37426 + C37427) * C47633 * C47994 +
             (C37425 + C37424) * C47633 * C31617) *
                C47791) *
               C48013 +
           (((C37894 + C37895) * C47633 * C31617 +
             (C38306 + C38307) * C47633 * C47994) *
                C47791 -
            ((C37895 + C37894) * C47633 * C47994 +
             (C4789 * C310 - C4790 * C297 - C4789 * C311 + C47992 * C327 +
              C4787 * C308 - C4788 * C296 - C4787 * C309 + C4783 * C326) *
                 C47633 * C31617) *
                C3302) *
               C48001 +
           (((C4787 * C310 - C4788 * C297 - C4787 * C311 + C4783 * C327 +
              C4789 * C1178 - C4790 * C1170 - C4789 * C1179 + C47992 * C1188) *
                 C47633 * C31617 +
             (C38308 + C38309) * C47633 * C47994) *
                C3302 -
            ((C38310 + C38311) * C47633 * C47994 +
             (C38309 + C38308) * C47633 * C31617) *
                C47791) *
               C47974) *
              C2648 +
          ((((C5245 + C5244) * C47633 * C31617 +
             (C5246 + C5247) * C47633 * C47994) *
                C47791 -
            ((C5244 + C5245) * C47633 * C47994 +
             (C4841 + C4840) * C47633 * C31617) *
                C3302) *
               C48013 +
           (((C5043 + C5042) * C47633 * C31617 +
             (C5758 + C5759) * C47633 * C47994) *
                C3302 -
            ((C7230 + C7231) * C47633 * C47994 +
             (C5759 + C5758) * C47633 * C31617) *
                C47791) *
               C48001 +
           (((C6503 + C6502) * C47633 * C31617 +
             (C4787 * C1325 - C4788 * C1309 - C4787 * C1326 + C4783 * C1336 +
              C4789 * C6147 - C4790 * C6144 - C4789 * C6148 + C47992 * C6150) *
                 C47633 * C47994) *
                C47791 -
            ((C6502 + C6503) * C47633 * C47994 +
             (C5045 + C5044) * C47633 * C31617) *
                C3302) *
               C47974) *
              C47669)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4787 * C122 - C4788 * C115 - C4787 * C123 + C4783 * C136 +
             C4789 * C308 - C4790 * C296 - C4789 * C309 + C47992 * C326) *
                C47633 * C31617 +
            (C37424 + C37425) * C47633 * C47994) *
               C3302 -
           ((C37426 + C37427) * C47633 * C47994 +
            (C37425 + C37424) * C47633 * C31617) *
               C47791) *
              C47686 * C48019 +
          (((C5245 + C5244) * C47633 * C31617 +
            (C5246 + C5247) * C47633 * C47994) *
               C47791 -
           ((C5244 + C5245) * C47633 * C47994 +
            (C4841 + C4840) * C47633 * C31617) *
               C3302) *
              C47686 * C48012 +
          (((C4843 + C4842) * C47633 * C31617 +
            (C5248 + C5249) * C47633 * C47994) *
               C3302 -
           ((C5250 + C5251) * C47633 * C47994 +
            (C5249 + C5248) * C47633 * C31617) *
               C47791) *
              C47686 * C47999 +
          (((C5539 + C5538) * C47633 * C31617 +
            (C4787 * C513 - C4788 * C496 - C4787 * C514 + C4783 * C526 +
             C4789 * C2195 - C4790 * C2194 - C4789 * C2196 + C47992 * C2197) *
                C47633 * C47994) *
               C47791 -
           ((C5538 + C5539) * C47633 * C47994 +
            (C4845 + C4844) * C47633 * C31617) *
               C3302) *
              C47686 * C47978)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C4787 * C122 - C4788 * C115 - C4787 * C123 + C4783 * C136 +
             C4789 * C308 - C4790 * C296 - C4789 * C309 + C47992 * C326) *
                C47633 * C31617 +
            (C37424 + C37425) * C47633 * C47994) *
               C48021 -
           ((C37426 + C37427) * C47633 * C47994 +
            (C37425 + C37424) * C47633 * C31617) *
               C48018 +
           ((C37427 + C37426) * C47633 * C31617 +
            (C39178 + C39179) * C47633 * C47994) *
               C48009 -
           ((C39180 + C39181) * C47633 * C47994 +
            (C39179 + C39178) * C47633 * C31617) *
               C47990) *
              C47686 * C2648 +
          (((C5245 + C5244) * C47633 * C31617 +
            (C5246 + C5247) * C47633 * C47994) *
               C48018 -
           ((C5244 + C5245) * C47633 * C47994 +
            (C4841 + C4840) * C47633 * C31617) *
               C48021 -
           ((C7374 + C7375) * C47633 * C47994 +
            (C5247 + C5246) * C47633 * C31617) *
               C48009 +
           ((C7375 + C7374) * C47633 * C31617 +
            (C4787 * C2038 - C4788 * C2028 - C4787 * C2039 + C4783 * C2046 +
             C4789 * C7019 - C4790 * C7016 - C4789 * C7020 + C47992 * C7022) *
                C47633 * C47994) *
               C47990) *
              C47686 * C47669)) /
            (p * q * std::sqrt(p + q));
    d2ee[193] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C4787 * C122 - C4788 * C115 - C4787 * C123 + C4783 * C136 +
             C4789 * C308 - C4790 * C296 - C4789 * C309 + C47992 * C326) *
                C47633 * C31617 +
            (C37424 + C37425) * C47633 * C47994) *
               C47787 -
           ((C37426 + C37427) * C47633 * C47994 +
            (C37425 + C37424) * C47633 * C31617) *
               C47794 +
           ((C37427 + C37426) * C47633 * C31617 +
            (C39178 + C39179) * C47633 * C47994) *
               C3810) *
              C47686 * C47663 +
          (((C5245 + C5244) * C47633 * C31617 +
            (C5246 + C5247) * C47633 * C47994) *
               C47794 -
           ((C5244 + C5245) * C47633 * C47994 +
            (C4841 + C4840) * C47633 * C31617) *
               C47787 -
           ((C7374 + C7375) * C47633 * C47994 +
            (C5247 + C5246) * C47633 * C31617) *
               C3810) *
              C47686 * C47672 +
          (((C4843 + C4842) * C47633 * C31617 +
            (C5248 + C5249) * C47633 * C47994) *
               C47787 -
           ((C5250 + C5251) * C47633 * C47994 +
            (C5249 + C5248) * C47633 * C31617) *
               C47794 +
           ((C5251 + C5250) * C47633 * C31617 +
            (C4787 * C2030 - C4788 * C2024 - C4787 * C2031 + C4783 * C2042 +
             C4789 * C2437 - C4790 * C2432 - C4789 * C2438 + C47992 * C2441) *
                C47633 * C47994) *
               C3810) *
              C47686 * C2911)) /
        (p * q * std::sqrt(p + q));
    d2ee[194] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C4787 * C122 - C4788 * C115 - C4787 * C123 + C4783 * C136 +
             C4789 * C308 - C4790 * C296 - C4789 * C309 + C47992 * C326) *
                C47633 * C31617 +
            (C37424 + C37425) * C47633 * C47994) *
               C3302 -
           ((C37426 + C37427) * C47633 * C47994 +
            (C37425 + C37424) * C47633 * C31617) *
               C47791) *
              C47686 * C48019 +
          (((C5245 + C5244) * C47633 * C31617 +
            (C5246 + C5247) * C47633 * C47994) *
               C47791 -
           ((C5244 + C5245) * C47633 * C47994 +
            (C4841 + C4840) * C47633 * C31617) *
               C3302) *
              C47686 * C48012 +
          (((C4843 + C4842) * C47633 * C31617 +
            (C5248 + C5249) * C47633 * C47994) *
               C3302 -
           ((C5250 + C5251) * C47633 * C47994 +
            (C5249 + C5248) * C47633 * C31617) *
               C47791) *
              C47686 * C47999 +
          (((C5539 + C5538) * C47633 * C31617 +
            (C4787 * C513 - C4788 * C496 - C4787 * C514 + C4783 * C526 +
             C4789 * C2195 - C4790 * C2194 - C4789 * C2196 + C47992 * C2197) *
                C47633 * C47994) *
               C47791 -
           ((C5538 + C5539) * C47633 * C47994 +
            (C4845 + C4844) * C47633 * C31617) *
               C3302) *
              C47686 * C47978)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C4787 * C122 - C4788 * C115 - C4787 * C123 + C4783 * C136 +
              C4789 * C308 - C4790 * C296 - C4789 * C309 + C47992 * C326) *
                 C47633 * C31617 +
             (C37424 + C37425) * C47633 * C47994) *
                C3302 -
            ((C37426 + C37427) * C47633 * C47994 +
             (C37425 + C37424) * C47633 * C31617) *
                C47791) *
               C48013 +
           (((C37894 + C37895) * C47633 * C31617 +
             (C38306 + C38307) * C47633 * C47994) *
                C47791 -
            ((C37895 + C37894) * C47633 * C47994 +
             (C4789 * C310 - C4790 * C297 - C4789 * C311 + C47992 * C327 +
              C4787 * C308 - C4788 * C296 - C4787 * C309 + C4783 * C326) *
                 C47633 * C31617) *
                C3302) *
               C48001 +
           (((C4787 * C310 - C4788 * C297 - C4787 * C311 + C4783 * C327 +
              C4789 * C1178 - C4790 * C1170 - C4789 * C1179 + C47992 * C1188) *
                 C47633 * C31617 +
             (C38308 + C38309) * C47633 * C47994) *
                C3302 -
            ((C38310 + C38311) * C47633 * C47994 +
             (C38309 + C38308) * C47633 * C31617) *
                C47791) *
               C47974) *
              C2648 +
          ((((C5245 + C5244) * C47633 * C31617 +
             (C5246 + C5247) * C47633 * C47994) *
                C47791 -
            ((C5244 + C5245) * C47633 * C47994 +
             (C4841 + C4840) * C47633 * C31617) *
                C3302) *
               C48013 +
           (((C5043 + C5042) * C47633 * C31617 +
             (C5758 + C5759) * C47633 * C47994) *
                C3302 -
            ((C7230 + C7231) * C47633 * C47994 +
             (C5759 + C5758) * C47633 * C31617) *
                C47791) *
               C48001 +
           (((C6503 + C6502) * C47633 * C31617 +
             (C4787 * C1325 - C4788 * C1309 - C4787 * C1326 + C4783 * C1336 +
              C4789 * C6147 - C4790 * C6144 - C4789 * C6148 + C47992 * C6150) *
                 C47633 * C47994) *
                C47791 -
            ((C6502 + C6503) * C47633 * C47994 +
             (C5045 + C5044) * C47633 * C31617) *
                C3302) *
               C47974) *
              C47669)) /
            (p * q * std::sqrt(p + q));
    d2ee[195] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C4787 * C122 - C4788 * C115 - C4787 * C123 + C4783 * C136 +
             C4789 * C308 - C4790 * C296 - C4789 * C309 + C47992 * C326) *
                C47633 * C31617 +
            (C37424 + C37425) * C47633 * C47994) *
               C47704 * C47942 -
           ((C4789 * C1321 - C4790 * C1307 - C4789 * C1322 + C47992 * C1334 +
             C4787 * C948 - C4788 * C943 - C4787 * C949 + C4783 * C958) *
                C47633 * C47994 +
            (C4789 * C310 - C4790 * C297 - C4789 * C311 + C47992 * C327 +
             C4787 * C308 - C4788 * C296 - C4787 * C309 + C4783 * C326) *
                C47633 * C31617) *
               C47704 * C47749) *
              C671 +
          (((C5043 + C5042) * C47633 * C31617 +
            (C5758 + C5759) * C47633 * C47994) *
               C47704 * C47749 -
           ((C5244 + C5245) * C47633 * C47994 +
            (C4841 + C4840) * C47633 * C31617) *
               C47704 * C47942) *
              C672 +
          (((C4843 + C4842) * C47633 * C31617 +
            (C5248 + C5249) * C47633 * C47994) *
               C47704 * C47942 -
           ((C5760 + C5761) * C47633 * C47994 +
            (C5047 + C5046) * C47633 * C31617) *
               C47704 * C47749) *
              C673 +
          (((C5395 + C5394) * C47633 * C31617 +
            (C4787 * C954 - C4788 * C946 - C4787 * C955 + C4783 * C961 +
             C4789 * C1607 - C4790 * C1606 - C4789 * C1608 + C47992 * C1609) *
                C47633 * C47994) *
               C47704 * C47749 -
           ((C5538 + C5539) * C47633 * C47994 +
            (C4845 + C4844) * C47633 * C31617) *
               C47704 * C47942) *
              C47978)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C4787 * C122 - C4788 * C115 - C4787 * C123 + C4783 * C136 +
             C4789 * C308 - C4790 * C296 - C4789 * C309 + C47992 * C326) *
                C47633 * C31617 +
            (C37424 + C37425) * C47633 * C47994) *
               C47704 * C1436 -
           ((C37895 + C37894) * C47633 * C47994 +
            (C4789 * C310 - C4790 * C297 - C4789 * C311 + C47992 * C327 +
             C4787 * C308 - C4788 * C296 - C4787 * C309 + C4783 * C326) *
                C47633 * C31617) *
               C47704 * C1437 +
           ((C4787 * C310 - C4788 * C297 - C4787 * C311 + C4783 * C327 +
             C4789 * C1178 - C4790 * C1170 - C4789 * C1179 + C47992 * C1188) *
                C47633 * C31617 +
            (C38308 + C38309) * C47633 * C47994) *
               C47704 * C1438 -
           ((C4789 * C6635 - C4790 * C6633 - C4789 * C6636 + C47992 * C6639 +
             C4787 * C1725 - C4788 * C1722 - C4787 * C1726 + C4783 * C1731) *
                C47633 * C47994 +
            (C4789 * C1180 - C4790 * C1171 - C4789 * C1181 + C47992 * C1189 +
             C4787 * C1178 - C4788 * C1170 - C4787 * C1179 + C4783 * C1188) *
                C47633 * C31617) *
               C47704 * C47984) *
              C47928 +
          (((C5043 + C5042) * C47633 * C31617 +
            (C5758 + C5759) * C47633 * C47994) *
               C47704 * C1437 -
           ((C5244 + C5245) * C47633 * C47994 +
            (C4841 + C4840) * C47633 * C31617) *
               C47704 * C1436 -
           ((C6502 + C6503) * C47633 * C47994 +
            (C5045 + C5044) * C47633 * C31617) *
               C47704 * C1438 +
           ((C6295 + C6294) * C47633 * C31617 +
            (C4787 * C1727 - C4788 * C1723 - C4787 * C1728 + C4783 * C1732 +
             C4789 * C6637 - C4790 * C6634 - C4789 * C6638 + C47992 * C6640) *
                C47633 * C47994) *
               C47704 * C47984) *
              C47669)) /
            (p * q * std::sqrt(p + q));
    d2ee[196] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C4787 * C122 - C4788 * C115 - C4787 * C123 + C4783 * C136 +
              C4789 * C308 - C4790 * C296 - C4789 * C309 + C47992 * C326) *
                 C47633 * C31617 +
             (C37424 + C37425) * C47633 * C47994) *
                C47943 -
            ((C37426 + C37427) * C47633 * C47994 +
             (C37425 + C37424) * C47633 * C31617) *
                C47791) *
               C47942 +
           (((C37894 + C37895) * C47633 * C31617 +
             (C4787 * C1315 - C4788 * C1304 - C4787 * C1316 + C4783 * C1331 +
              C4789 * C1323 - C4790 * C1308 - C4789 * C1324 + C47992 * C1335) *
                 C47633 * C47994) *
                C47791 -
            ((C37895 + C37894) * C47633 * C47994 +
             (C4789 * C310 - C4790 * C297 - C4789 * C311 + C47992 * C327 +
              C4787 * C308 - C4788 * C296 - C4787 * C309 + C4783 * C326) *
                 C47633 * C31617) *
                C47943) *
               C47749) *
              C291 +
          ((((C5245 + C5244) * C47633 * C31617 +
             (C5246 + C5247) * C47633 * C47994) *
                C47791 -
            ((C5244 + C5245) * C47633 * C47994 +
             (C4841 + C4840) * C47633 * C31617) *
                C47943) *
               C47942 +
           (((C5043 + C5042) * C47633 * C31617 +
             (C5758 + C5759) * C47633 * C47994) *
                C47943 -
            ((C7230 + C7231) * C47633 * C47994 +
             (C5759 + C5758) * C47633 * C31617) *
                C47791) *
               C47749) *
              C292 +
          ((((C4843 + C4842) * C47633 * C31617 +
             (C5248 + C5249) * C47633 * C47994) *
                C47943 -
            ((C5250 + C5251) * C47633 * C47994 +
             (C5249 + C5248) * C47633 * C31617) *
                C47791) *
               C47942 +
           (((C5761 + C5760) * C47633 * C31617 +
             (C4787 * C1311 - C4788 * C1302 - C4787 * C1312 + C4783 * C1329 +
              C4789 * C1327 - C4790 * C1310 - C4789 * C1328 + C47992 * C1337) *
                 C47633 * C47994) *
                C47791 -
            ((C5760 + C5761) * C47633 * C47994 +
             (C5047 + C5046) * C47633 * C31617) *
                C47943) *
               C47749) *
              C47968)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C4787 * C122 - C4788 * C115 - C4787 * C123 + C4783 * C136 +
             C4789 * C308 - C4790 * C296 - C4789 * C309 + C47992 * C326) *
                C47633 * C31617 +
            (C37424 + C37425) * C47633 * C47994) *
               C47943 -
           ((C37426 + C37427) * C47633 * C47994 +
            (C37425 + C37424) * C47633 * C31617) *
               C47791) *
              C1436 +
          (((C37894 + C37895) * C47633 * C31617 +
            (C38306 + C38307) * C47633 * C47994) *
               C47791 -
           ((C37895 + C37894) * C47633 * C47994 +
            (C4789 * C310 - C4790 * C297 - C4789 * C311 + C47992 * C327 +
             C4787 * C308 - C4788 * C296 - C4787 * C309 + C4783 * C326) *
                C47633 * C31617) *
               C47943) *
              C1437 +
          (((C4787 * C310 - C4788 * C297 - C4787 * C311 + C4783 * C327 +
             C4789 * C1178 - C4790 * C1170 - C4789 * C1179 + C47992 * C1188) *
                C47633 * C31617 +
            (C38308 + C38309) * C47633 * C47994) *
               C47943 -
           ((C38310 + C38311) * C47633 * C47994 +
            (C38309 + C38308) * C47633 * C31617) *
               C47791) *
              C1438 +
          (((C38778 + C38779) * C47633 * C31617 +
            (C4787 * C6145 - C4788 * C6143 - C4787 * C6146 + C4783 * C6149 +
             C4789 * C22730 - C4790 * C22729 - C4789 * C22731 +
             C47992 * C22732) *
                C47633 * C47994) *
               C47791 -
           ((C38779 + C38778) * C47633 * C47994 +
            (C4789 * C1180 - C4790 * C1171 - C4789 * C1181 + C47992 * C1189 +
             C4787 * C1178 - C4788 * C1170 - C4787 * C1179 + C4783 * C1188) *
                C47633 * C31617) *
               C47943) *
              C47984) *
         C47658) /
            (p * q * std::sqrt(p + q));
    d2ee[197] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C4787 * C122 - C4788 * C115 - C4787 * C123 + C4783 * C136 +
             C4789 * C308 - C4790 * C296 - C4789 * C309 + C47992 * C326) *
                C47633 * C31617 +
            (C4787 * C503 - C4788 * C491 - C4787 * C504 + C4783 * C521 +
             C4789 * C948 - C4790 * C943 - C4789 * C949 + C47992 * C958) *
                C47633 * C47994) *
               C47704 * C48013 -
           ((C4789 * C1321 - C4790 * C1307 - C4789 * C1322 + C47992 * C1334 +
             C4787 * C948 - C4788 * C943 - C4787 * C949 + C4783 * C958) *
                C47633 * C47994 +
            (C4789 * C310 - C4790 * C297 - C4789 * C311 + C47992 * C327 +
             C4787 * C308 - C4788 * C296 - C4787 * C309 + C4783 * C326) *
                C47633 * C31617) *
               C47704 * C48001 +
           ((C4787 * C310 - C4788 * C297 - C4787 * C311 + C4783 * C327 +
             C4789 * C1178 - C4790 * C1170 - C4789 * C1179 + C47992 * C1188) *
                C47633 * C31617 +
            (C4787 * C1321 - C4788 * C1307 - C4787 * C1322 + C4783 * C1334 +
             C4789 * C1725 - C4790 * C1722 - C4789 * C1726 + C47992 * C1731) *
                C47633 * C47994) *
               C47704 * C47974) *
              C291 +
          (((C5043 + C5042) * C47633 * C31617 +
            (C5758 + C5759) * C47633 * C47994) *
               C47704 * C48001 -
           ((C5244 + C5245) * C47633 * C47994 +
            (C4841 + C4840) * C47633 * C31617) *
               C47704 * C48013 -
           ((C6502 + C6503) * C47633 * C47994 +
            (C5045 + C5044) * C47633 * C31617) *
               C47704 * C47974) *
              C292 +
          (((C4843 + C4842) * C47633 * C31617 +
            (C5248 + C5249) * C47633 * C47994) *
               C47704 * C48013 -
           ((C5760 + C5761) * C47633 * C47994 +
            (C5047 + C5046) * C47633 * C31617) *
               C47704 * C48001 +
           ((C5049 + C5048) * C47633 * C31617 +
            (C4787 * C1317 - C4788 * C1305 - C4787 * C1318 + C4783 * C1332 +
             C4789 * C1729 - C4790 * C1724 - C4789 * C1730 + C47992 * C1733) *
                C47633 * C47994) *
               C47704 * C47974) *
              C47968)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C4787 * C122 - C4788 * C115 - C4787 * C123 + C4783 * C136 +
            C4789 * C308 - C4790 * C296 - C4789 * C309 + C47992 * C326) *
               C47633 * C31617 +
           (C4787 * C503 - C4788 * C491 - C4787 * C504 + C4783 * C521 +
            C4789 * C948 - C4790 * C943 - C4789 * C949 + C47992 * C958) *
               C47633 * C47994) *
              C47704 * C47686 * C108 -
          ((C5244 + C5245) * C47633 * C47994 +
           (C4841 + C4840) * C47633 * C31617) *
              C47704 * C47686 * C109 +
          ((C4843 + C4842) * C47633 * C31617 +
           (C5248 + C5249) * C47633 * C47994) *
              C47704 * C47686 * C110 -
          ((C5538 + C5539) * C47633 * C47994 +
           (C4845 + C4844) * C47633 * C31617) *
              C47704 * C47686 * C111 +
          ((C4847 + C4846) * C47633 * C31617 +
           (C4787 * C515 - C4788 * C497 - C4787 * C516 + C4783 * C527 +
            C4789 * C956 - C4790 * C947 - C4789 * C957 + C47992 * C962) *
               C47633 * C47994) *
              C47704 * C47686 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4787 * C122 - C4788 * C115 - C4787 * C123 + C4783 * C136 +
             C4789 * C308 - C4790 * C296 - C4789 * C309 + C47992 * C326) *
                C47633 * C31617 +
            (C37424 + C37425) * C47633 * C47994) *
               C48014 -
           ((C37426 + C37427) * C47633 * C47994 +
            (C37425 + C37424) * C47633 * C31617) *
               C48003 +
           ((C37427 + C37426) * C47633 * C31617 +
            (C4787 * C2034 - C4788 * C2026 - C4787 * C2035 + C4783 * C2044 +
             C4789 * C2433 - C4790 * C2430 - C4789 * C2434 + C47992 * C2439) *
                C47633 * C47994) *
               C47977) *
              C47686 * C291 +
          (((C5245 + C5244) * C47633 * C31617 +
            (C5246 + C5247) * C47633 * C47994) *
               C48003 -
           ((C5244 + C5245) * C47633 * C47994 +
            (C4841 + C4840) * C47633 * C31617) *
               C48014 -
           ((C7374 + C7375) * C47633 * C47994 +
            (C5247 + C5246) * C47633 * C31617) *
               C47977) *
              C47686 * C292 +
          (((C4843 + C4842) * C47633 * C31617 +
            (C5248 + C5249) * C47633 * C47994) *
               C48014 -
           ((C5250 + C5251) * C47633 * C47994 +
            (C5249 + C5248) * C47633 * C31617) *
               C48003 +
           ((C5251 + C5250) * C47633 * C31617 +
            (C4787 * C2030 - C4788 * C2024 - C4787 * C2031 + C4783 * C2042 +
             C4789 * C2437 - C4790 * C2432 - C4789 * C2438 + C47992 * C2441) *
                C47633 * C47994) *
               C47977) *
              C47686 * C47968)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C4787 * C122 - C4788 * C115 - C4787 * C123 + C4783 * C136 +
             C4789 * C308 - C4790 * C296 - C4789 * C309 + C47992 * C326) *
                C47633 * C31617 +
            (C37424 + C37425) * C47633 * C47994) *
               C47704 * C1094 -
           ((C37895 + C37894) * C47633 * C47994 +
            (C4789 * C310 - C4790 * C297 - C4789 * C311 + C47992 * C327 +
             C4787 * C308 - C4788 * C296 - C4787 * C309 + C4783 * C326) *
                C47633 * C31617) *
               C47704 * C1095 +
           ((C4787 * C310 - C4788 * C297 - C4787 * C311 + C4783 * C327 +
             C4789 * C1178 - C4790 * C1170 - C4789 * C1179 + C47992 * C1188) *
                C47633 * C31617 +
            (C4787 * C1321 - C4788 * C1307 - C4787 * C1322 + C4783 * C1334 +
             C4789 * C1725 - C4790 * C1722 - C4789 * C1726 + C47992 * C1731) *
                C47633 * C47994) *
               C47704 * C47974) *
              C48010 +
          (((C5043 + C5042) * C47633 * C31617 +
            (C5758 + C5759) * C47633 * C47994) *
               C47704 * C1095 -
           ((C5244 + C5245) * C47633 * C47994 +
            (C4841 + C4840) * C47633 * C31617) *
               C47704 * C1094 -
           ((C6502 + C6503) * C47633 * C47994 +
            (C5045 + C5044) * C47633 * C31617) *
               C47704 * C47974) *
              C47997 +
          (((C4843 + C4842) * C47633 * C31617 +
            (C5248 + C5249) * C47633 * C47994) *
               C47704 * C1094 -
           ((C5760 + C5761) * C47633 * C47994 +
            (C5047 + C5046) * C47633 * C31617) *
               C47704 * C1095 +
           ((C5049 + C5048) * C47633 * C31617 +
            (C4787 * C1317 - C4788 * C1305 - C4787 * C1318 + C4783 * C1332 +
             C4789 * C1729 - C4790 * C1724 - C4789 * C1730 + C47992 * C1733) *
                C47633 * C47994) *
               C47704 * C47974) *
              C47968)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C4787 * C122 - C4788 * C115 - C4787 * C123 + C4783 * C136 +
            C4789 * C308 - C4790 * C296 - C4789 * C309 + C47992 * C326) *
               C47633 * C31617 +
           (C37424 + C37425) * C47633 * C47994) *
              C47704 * C1162 -
          ((C37895 + C37894) * C47633 * C47994 +
           (C4789 * C310 - C4790 * C297 - C4789 * C311 + C47992 * C327 +
            C4787 * C308 - C4788 * C296 - C4787 * C309 + C4783 * C326) *
               C47633 * C31617) *
              C47704 * C1163 +
          ((C4787 * C310 - C4788 * C297 - C4787 * C311 + C4783 * C327 +
            C4789 * C1178 - C4790 * C1170 - C4789 * C1179 + C47992 * C1188) *
               C47633 * C31617 +
           (C4787 * C1321 - C4788 * C1307 - C4787 * C1322 + C4783 * C1334 +
            C4789 * C1725 - C4790 * C1722 - C4789 * C1726 + C47992 * C1731) *
               C47633 * C47994) *
              C47704 * C1164 -
          ((C4789 * C6635 - C4790 * C6633 - C4789 * C6636 + C47992 * C6639 +
            C4787 * C1725 - C4788 * C1722 - C4787 * C1726 + C4783 * C1731) *
               C47633 * C47994 +
           (C4789 * C1180 - C4790 * C1171 - C4789 * C1181 + C47992 * C1189 +
            C4787 * C1178 - C4788 * C1170 - C4787 * C1179 + C4783 * C1188) *
               C47633 * C31617) *
              C47704 * C1165 +
          ((C4787 * C1180 - C4788 * C1171 - C4787 * C1181 + C4783 * C1189 +
            C4789 * C5991 - C4790 * C5989 - C4789 * C5992 + C47992 * C5995) *
               C47633 * C31617 +
           (C4787 * C6635 - C4788 * C6633 - C4787 * C6636 + C4783 * C6639 +
            C4789 * C23076 - C4790 * C23075 - C4789 * C23077 +
            C47992 * C23078) *
               C47633 * C47994) *
              C47704 * C1166) *
         C47658) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4787 * C122 - C4788 * C115 - C4787 * C123 + C4783 * C136 +
             C4789 * C308 - C4790 * C296 - C4789 * C309 + C47992 * C326) *
                C47633 * C31617 +
            (C37424 + C37425) * C47633 * C47994) *
               C48014 -
           ((C37426 + C37427) * C47633 * C47994 +
            (C37425 + C37424) * C47633 * C31617) *
               C48003 +
           ((C37427 + C37426) * C47633 * C31617 +
            (C4787 * C2034 - C4788 * C2026 - C4787 * C2035 + C4783 * C2044 +
             C4789 * C2433 - C4790 * C2430 - C4789 * C2434 + C47992 * C2439) *
                C47633 * C47994) *
               C47977) *
              C1094 +
          (((C37894 + C37895) * C47633 * C31617 +
            (C38306 + C38307) * C47633 * C47994) *
               C48003 -
           ((C37895 + C37894) * C47633 * C47994 +
            (C4789 * C310 - C4790 * C297 - C4789 * C311 + C47992 * C327 +
             C4787 * C308 - C4788 * C296 - C4787 * C309 + C4783 * C326) *
                C47633 * C31617) *
               C48014 -
           ((C4789 * C7507 - C4790 * C7505 - C4789 * C7508 + C47992 * C7511 +
             C4787 * C2433 - C4788 * C2430 - C4787 * C2434 + C4783 * C2439) *
                C47633 * C47994 +
            (C38307 + C38306) * C47633 * C31617) *
               C47977) *
              C1095 +
          (((C4787 * C310 - C4788 * C297 - C4787 * C311 + C4783 * C327 +
             C4789 * C1178 - C4790 * C1170 - C4789 * C1179 + C47992 * C1188) *
                C47633 * C31617 +
            (C38308 + C38309) * C47633 * C47994) *
               C48014 -
           ((C38310 + C38311) * C47633 * C47994 +
            (C38309 + C38308) * C47633 * C31617) *
               C48003 +
           ((C38311 + C38310) * C47633 * C31617 +
            (C4787 * C7507 - C4788 * C7505 - C4787 * C7508 + C4783 * C7511 +
             C4789 * C23708 - C4790 * C23707 - C4789 * C23709 +
             C47992 * C23710) *
                C47633 * C47994) *
               C47977) *
              C47974) *
         C47658) /
            (p * q * std::sqrt(p + q));
    d2ee[198] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C4787 * C122 - C4788 * C115 - C4787 * C123 + C4783 * C136 +
             C4789 * C308 - C4790 * C296 - C4789 * C309 + C47992 * C326) *
                C47633 * C31617 +
            (C37424 + C37425) * C47633 * C47994) *
               C47943 -
           ((C37426 + C37427) * C47633 * C47994 +
            (C37425 + C37424) * C47633 * C31617) *
               C47791) *
              C47686 * C671 +
          (((C5245 + C5244) * C47633 * C31617 +
            (C5246 + C5247) * C47633 * C47994) *
               C47791 -
           ((C5244 + C5245) * C47633 * C47994 +
            (C4841 + C4840) * C47633 * C31617) *
               C47943) *
              C47686 * C672 +
          (((C4843 + C4842) * C47633 * C31617 +
            (C5248 + C5249) * C47633 * C47994) *
               C47943 -
           ((C5250 + C5251) * C47633 * C47994 +
            (C5249 + C5248) * C47633 * C31617) *
               C47791) *
              C47686 * C673 +
          (((C5539 + C5538) * C47633 * C31617 +
            (C4787 * C513 - C4788 * C496 - C4787 * C514 + C4783 * C526 +
             C4789 * C2195 - C4790 * C2194 - C4789 * C2196 + C47992 * C2197) *
                C47633 * C47994) *
               C47791 -
           ((C5538 + C5539) * C47633 * C47994 +
            (C4845 + C4844) * C47633 * C31617) *
               C47943) *
              C47686 * C47978)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C4787 * C122 - C4788 * C115 - C4787 * C123 + C4783 * C136 +
              C4789 * C308 - C4790 * C296 - C4789 * C309 + C47992 * C326) *
                 C47633 * C31617 +
             (C37424 + C37425) * C47633 * C47994) *
                C47943 -
            ((C37426 + C37427) * C47633 * C47994 +
             (C37425 + C37424) * C47633 * C31617) *
                C47791) *
               C1094 +
           (((C37894 + C37895) * C47633 * C31617 +
             (C38306 + C38307) * C47633 * C47994) *
                C47791 -
            ((C37895 + C37894) * C47633 * C47994 +
             (C4789 * C310 - C4790 * C297 - C4789 * C311 + C47992 * C327 +
              C4787 * C308 - C4788 * C296 - C4787 * C309 + C4783 * C326) *
                 C47633 * C31617) *
                C47943) *
               C1095 +
           (((C4787 * C310 - C4788 * C297 - C4787 * C311 + C4783 * C327 +
              C4789 * C1178 - C4790 * C1170 - C4789 * C1179 + C47992 * C1188) *
                 C47633 * C31617 +
             (C38308 + C38309) * C47633 * C47994) *
                C47943 -
            ((C38310 + C38311) * C47633 * C47994 +
             (C38309 + C38308) * C47633 * C31617) *
                C47791) *
               C47974) *
              C47928 +
          ((((C5245 + C5244) * C47633 * C31617 +
             (C5246 + C5247) * C47633 * C47994) *
                C47791 -
            ((C5244 + C5245) * C47633 * C47994 +
             (C4841 + C4840) * C47633 * C31617) *
                C47943) *
               C1094 +
           (((C5043 + C5042) * C47633 * C31617 +
             (C5758 + C5759) * C47633 * C47994) *
                C47943 -
            ((C7230 + C7231) * C47633 * C47994 +
             (C5759 + C5758) * C47633 * C31617) *
                C47791) *
               C1095 +
           (((C6503 + C6502) * C47633 * C31617 +
             (C4787 * C1325 - C4788 * C1309 - C4787 * C1326 + C4783 * C1336 +
              C4789 * C6147 - C4790 * C6144 - C4789 * C6148 + C47992 * C6150) *
                 C47633 * C47994) *
                C47791 -
            ((C6502 + C6503) * C47633 * C47994 +
             (C5045 + C5044) * C47633 * C31617) *
                C47943) *
               C47974) *
              C47669)) /
            (p * q * std::sqrt(p + q));
    d2ee[199] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C4787 * C122 - C4788 * C115 - C4787 * C123 + C4783 * C136 +
            C4789 * C308 - C4790 * C296 - C4789 * C309 + C47992 * C326) *
               C47633 * C31617 +
           (C4787 * C503 - C4788 * C491 - C4787 * C504 + C4783 * C521 +
            C4789 * C948 - C4790 * C943 - C4789 * C949 + C47992 * C958) *
               C47633 * C47994) *
              C47704 * C47686 * C108 -
          ((C5244 + C5245) * C47633 * C47994 +
           (C4841 + C4840) * C47633 * C31617) *
              C47704 * C47686 * C109 +
          ((C4843 + C4842) * C47633 * C31617 +
           (C5248 + C5249) * C47633 * C47994) *
              C47704 * C47686 * C110 -
          ((C5538 + C5539) * C47633 * C47994 +
           (C4845 + C4844) * C47633 * C31617) *
              C47704 * C47686 * C111 +
          ((C4847 + C4846) * C47633 * C31617 +
           (C4787 * C515 - C4788 * C497 - C4787 * C516 + C4783 * C527 +
            C4789 * C956 - C4790 * C947 - C4789 * C957 + C47992 * C962) *
               C47633 * C47994) *
              C47704 * C47686 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C4787 * C122 - C4788 * C115 - C4787 * C123 + C4783 * C136 +
             C4789 * C308 - C4790 * C296 - C4789 * C309 + C47992 * C326) *
                C47633 * C31617 +
            (C4787 * C503 - C4788 * C491 - C4787 * C504 + C4783 * C521 +
             C4789 * C948 - C4790 * C943 - C4789 * C949 + C47992 * C958) *
                C47633 * C47994) *
               C47704 * C48013 -
           ((C4789 * C1321 - C4790 * C1307 - C4789 * C1322 + C47992 * C1334 +
             C4787 * C948 - C4788 * C943 - C4787 * C949 + C4783 * C958) *
                C47633 * C47994 +
            (C4789 * C310 - C4790 * C297 - C4789 * C311 + C47992 * C327 +
             C4787 * C308 - C4788 * C296 - C4787 * C309 + C4783 * C326) *
                C47633 * C31617) *
               C47704 * C48001 +
           ((C4787 * C310 - C4788 * C297 - C4787 * C311 + C4783 * C327 +
             C4789 * C1178 - C4790 * C1170 - C4789 * C1179 + C47992 * C1188) *
                C47633 * C31617 +
            (C4787 * C1321 - C4788 * C1307 - C4787 * C1322 + C4783 * C1334 +
             C4789 * C1725 - C4790 * C1722 - C4789 * C1726 + C47992 * C1731) *
                C47633 * C47994) *
               C47704 * C47974) *
              C291 +
          (((C5043 + C5042) * C47633 * C31617 +
            (C5758 + C5759) * C47633 * C47994) *
               C47704 * C48001 -
           ((C5244 + C5245) * C47633 * C47994 +
            (C4841 + C4840) * C47633 * C31617) *
               C47704 * C48013 -
           ((C6502 + C6503) * C47633 * C47994 +
            (C5045 + C5044) * C47633 * C31617) *
               C47704 * C47974) *
              C292 +
          (((C4843 + C4842) * C47633 * C31617 +
            (C5248 + C5249) * C47633 * C47994) *
               C47704 * C48013 -
           ((C5760 + C5761) * C47633 * C47994 +
            (C5047 + C5046) * C47633 * C31617) *
               C47704 * C48001 +
           ((C5049 + C5048) * C47633 * C31617 +
            (C4787 * C1317 - C4788 * C1305 - C4787 * C1318 + C4783 * C1332 +
             C4789 * C1729 - C4790 * C1724 - C4789 * C1730 + C47992 * C1733) *
                C47633 * C47994) *
               C47704 * C47974) *
              C47968)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C4787 * C122 - C4788 * C115 - C4787 * C123 + C4783 * C136 +
             C4789 * C308 - C4790 * C296 - C4789 * C309 + C47992 * C326) *
                C47633 * C31617 +
            (C37424 + C37425) * C47633 * C47994) *
               C47704 * C1094 -
           ((C37895 + C37894) * C47633 * C47994 +
            (C4789 * C310 - C4790 * C297 - C4789 * C311 + C47992 * C327 +
             C4787 * C308 - C4788 * C296 - C4787 * C309 + C4783 * C326) *
                C47633 * C31617) *
               C47704 * C1095 +
           ((C4787 * C310 - C4788 * C297 - C4787 * C311 + C4783 * C327 +
             C4789 * C1178 - C4790 * C1170 - C4789 * C1179 + C47992 * C1188) *
                C47633 * C31617 +
            (C4787 * C1321 - C4788 * C1307 - C4787 * C1322 + C4783 * C1334 +
             C4789 * C1725 - C4790 * C1722 - C4789 * C1726 + C47992 * C1731) *
                C47633 * C47994) *
               C47704 * C47974) *
              C48010 +
          (((C5043 + C5042) * C47633 * C31617 +
            (C5758 + C5759) * C47633 * C47994) *
               C47704 * C1095 -
           ((C5244 + C5245) * C47633 * C47994 +
            (C4841 + C4840) * C47633 * C31617) *
               C47704 * C1094 -
           ((C6502 + C6503) * C47633 * C47994 +
            (C5045 + C5044) * C47633 * C31617) *
               C47704 * C47974) *
              C47997 +
          (((C4843 + C4842) * C47633 * C31617 +
            (C5248 + C5249) * C47633 * C47994) *
               C47704 * C1094 -
           ((C5760 + C5761) * C47633 * C47994 +
            (C5047 + C5046) * C47633 * C31617) *
               C47704 * C1095 +
           ((C5049 + C5048) * C47633 * C31617 +
            (C4787 * C1317 - C4788 * C1305 - C4787 * C1318 + C4783 * C1332 +
             C4789 * C1729 - C4790 * C1724 - C4789 * C1730 + C47992 * C1733) *
                C47633 * C47994) *
               C47704 * C47974) *
              C47968)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C4787 * C122 - C4788 * C115 - C4787 * C123 + C4783 * C136 +
            C4789 * C308 - C4790 * C296 - C4789 * C309 + C47992 * C326) *
               C47633 * C31617 +
           (C37424 + C37425) * C47633 * C47994) *
              C47704 * C1162 -
          ((C37895 + C37894) * C47633 * C47994 +
           (C4789 * C310 - C4790 * C297 - C4789 * C311 + C47992 * C327 +
            C4787 * C308 - C4788 * C296 - C4787 * C309 + C4783 * C326) *
               C47633 * C31617) *
              C47704 * C1163 +
          ((C4787 * C310 - C4788 * C297 - C4787 * C311 + C4783 * C327 +
            C4789 * C1178 - C4790 * C1170 - C4789 * C1179 + C47992 * C1188) *
               C47633 * C31617 +
           (C4787 * C1321 - C4788 * C1307 - C4787 * C1322 + C4783 * C1334 +
            C4789 * C1725 - C4790 * C1722 - C4789 * C1726 + C47992 * C1731) *
               C47633 * C47994) *
              C47704 * C1164 -
          ((C4789 * C6635 - C4790 * C6633 - C4789 * C6636 + C47992 * C6639 +
            C4787 * C1725 - C4788 * C1722 - C4787 * C1726 + C4783 * C1731) *
               C47633 * C47994 +
           (C4789 * C1180 - C4790 * C1171 - C4789 * C1181 + C47992 * C1189 +
            C4787 * C1178 - C4788 * C1170 - C4787 * C1179 + C4783 * C1188) *
               C47633 * C31617) *
              C47704 * C1165 +
          ((C4787 * C1180 - C4788 * C1171 - C4787 * C1181 + C4783 * C1189 +
            C4789 * C5991 - C4790 * C5989 - C4789 * C5992 + C47992 * C5995) *
               C47633 * C31617 +
           (C4787 * C6635 - C4788 * C6633 - C4787 * C6636 + C4783 * C6639 +
            C4789 * C23076 - C4790 * C23075 - C4789 * C23077 +
            C47992 * C23078) *
               C47633 * C47994) *
              C47704 * C1166) *
         C47658) /
            (p * q * std::sqrt(p + q));
    d2ee[200] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C47890 * C136) * C47633 *
                C42675 +
            C42899 * C42676 + C42900 * C42677) *
               C47704 * C47745 -
           (C43253 * C42677 + C43252 * C42676 +
            (C113 * C308 - C114 * C296 - C113 * C309 + C47890 * C326) * C47633 *
                C42675) *
               C47704 * C47752 +
           ((C113 * C310 - C114 * C297 - C113 * C311 + C47890 * C327) * C47633 *
                C42675 +
            C43541 * C42676 + C43542 * C42677) *
               C47704 * C2908) *
              C47663 +
          ((C372 * C47633 * C42675 + C43254 * C42676 + C43255 * C42677) *
               C47704 * C47752 -
           (C42903 * C42677 + C42902 * C42676 + C174 * C47633 * C42675) *
               C47704 * C47745 -
           (C43796 * C42677 + C43795 * C42676 + C373 * C47633 * C42675) *
               C47704 * C2908) *
              C47672 +
          ((C175 * C47633 * C42675 + C42905 * C42676 + C42906 * C42677) *
               C47704 * C47745 -
           (C43257 * C42677 + C43256 * C42676 + C371 * C47633 * C42675) *
               C47704 * C47752 +
           (C374 * C47633 * C42675 + C1623 * C47633 * C42676 +
            (C113 * C1327 - C114 * C1310 - C113 * C1328 + C47890 * C1337) *
                C47633 * C42677) *
               C47704 * C2908) *
              C2911)) /
        (p * q * std::sqrt(p + q));
    d2ee[201] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C47890 * C136) *
                 C47633 * C42675 +
             C42899 * C42676 + C42900 * C42677) *
                C47943 -
            (C42901 * C42677 + C42900 * C42676 + C42899 * C42675) * C47791) *
               C47745 +
           ((C43252 * C42675 + C43253 * C42676 + C43540 * C42677) * C47791 -
            (C43253 * C42677 + C43252 * C42676 +
             (C113 * C308 - C114 * C296 - C113 * C309 + C47890 * C326) *
                 C47633 * C42675) *
                C47943) *
               C47752 +
           (((C113 * C310 - C114 * C297 - C113 * C311 + C47890 * C327) *
                 C47633 * C42675 +
             C43541 * C42676 + C43542 * C42677) *
                C47943 -
            (C43550 * C42677 + C43542 * C42676 + C43541 * C42675) * C47791) *
               C2908) *
              C2648 +
          (((C42902 * C42675 + C42903 * C42676 + C42904 * C42677) * C47791 -
            (C42903 * C42677 + C42902 * C42676 + C174 * C47633 * C42675) *
                C47943) *
               C47745 +
           ((C372 * C47633 * C42675 + C43254 * C42676 + C43255 * C42677) *
                C47943 -
            (C44345 * C42677 + C43255 * C42676 + C43254 * C42675) * C47791) *
               C47752 +
           ((C43795 * C42675 + C43796 * C42676 +
             (C113 * C7509 - C114 * C7506 - C113 * C7510 + C47890 * C7512) *
                 C47633 * C42677) *
                C47791 -
            (C43796 * C42677 + C43795 * C42676 + C373 * C47633 * C42675) *
                C47943) *
               C2908) *
              C47669)) /
        (p * q * std::sqrt(p + q));
    d2ee[202] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C47890 * C136) * C47633 *
                C42675 +
            C42899 * C42676 + C42900 * C42677) *
               C47704 * C48020 -
           (C43253 * C42677 + C43252 * C42676 +
            (C113 * C308 - C114 * C296 - C113 * C309 + C47890 * C326) * C47633 *
                C42675) *
               C47704 * C48016 +
           ((C113 * C310 - C114 * C297 - C113 * C311 + C47890 * C327) * C47633 *
                C42675 +
            C43541 * C42676 + C43542 * C42677) *
               C47704 * C48006 -
           (C43903 * C42677 + C43895 * C42676 +
            (C113 * C1178 - C114 * C1170 - C113 * C1179 + C47890 * C1188) *
                C47633 * C42675) *
               C47704 * C47984) *
              C2648 +
          ((C372 * C47633 * C42675 + C43254 * C42676 + C43255 * C42677) *
               C47704 * C48016 -
           (C42903 * C42677 + C42902 * C42676 + C174 * C47633 * C42675) *
               C47704 * C48020 -
           (C43796 * C42677 + C43795 * C42676 + C373 * C47633 * C42675) *
               C47704 * C48006 +
           (C1460 * C47633 * C42675 + C11893 * C47633 * C42676 +
            (C113 * C6147 - C114 * C6144 - C113 * C6148 + C47890 * C6150) *
                C47633 * C42677) *
               C47704 * C47984) *
              C47669)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C47890 * C136) * C47633 *
                C42675 +
            C42899 * C42676 + C42900 * C42677) *
               C47704 * C2540 -
           (C43253 * C42677 + C43252 * C42676 +
            (C113 * C308 - C114 * C296 - C113 * C309 + C47890 * C326) * C47633 *
                C42675) *
               C47704 * C47749) *
              C48019 +
          ((C372 * C47633 * C42675 + C43254 * C42676 + C43255 * C42677) *
               C47704 * C47749 -
           (C42903 * C42677 + C42902 * C42676 + C174 * C47633 * C42675) *
               C47704 * C2540) *
              C48012 +
          ((C175 * C47633 * C42675 + C42905 * C42676 + C42906 * C42677) *
               C47704 * C2540 -
           (C43257 * C42677 + C43256 * C42676 + C371 * C47633 * C42675) *
               C47704 * C47749) *
              C47999 +
          ((C375 * C47633 * C42675 + C984 * C47633 * C42676 +
            (C113 * C2195 - C114 * C2194 - C113 * C2196 + C47890 * C2197) *
                C47633 * C42677) *
               C47704 * C47749 -
           (C43105 * C42677 + C43104 * C42676 + C176 * C47633 * C42675) *
               C47704 * C2540) *
              C47978)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C47890 * C136) *
                 C47633 * C42675 +
             C42899 * C42676 + C42900 * C42677) *
                C48014 -
            (C42901 * C42677 + C42900 * C42676 + C42899 * C42675) * C48003 +
            (C42900 * C42675 + C42901 * C42676 + C44190 * C42677) * C47977) *
               C2540 +
           ((C43252 * C42675 + C43253 * C42676 + C43540 * C42677) * C48003 -
            (C43253 * C42677 + C43252 * C42676 +
             (C113 * C308 - C114 * C296 - C113 * C309 + C47890 * C326) *
                 C47633 * C42675) *
                C48014 -
            (C44550 * C42677 + C43540 * C42676 + C43253 * C42675) * C47977) *
               C47749) *
              C2648 +
          (((C42902 * C42675 + C42903 * C42676 + C42904 * C42677) * C48003 -
            (C42903 * C42677 + C42902 * C42676 + C174 * C47633 * C42675) *
                C48014 -
            (C44444 * C42677 + C42904 * C42676 + C42903 * C42675) * C47977) *
               C2540 +
           ((C372 * C47633 * C42675 + C43254 * C42676 + C43255 * C42677) *
                C48014 -
            (C44345 * C42677 + C43255 * C42676 + C43254 * C42675) * C48003 +
            (C43255 * C42675 + C44345 * C42676 +
             (C113 * C7019 - C114 * C7016 - C113 * C7020 + C47890 * C7022) *
                 C47633 * C42677) *
                C47977) *
               C47749) *
              C47669)) /
            (p * q * std::sqrt(p + q));
    d2ee[203] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C47890 * C136) *
                 C47633 * C42675 +
             C42899 * C42676 + C42900 * C42677) *
                C47943 -
            (C42901 * C42677 + C42900 * C42676 + C42899 * C42675) * C47791) *
               C2540 +
           ((C43252 * C42675 + C43253 * C42676 + C43540 * C42677) * C47791 -
            (C43253 * C42677 + C43252 * C42676 +
             (C113 * C308 - C114 * C296 - C113 * C309 + C47890 * C326) *
                 C47633 * C42675) *
                C47943) *
               C47749) *
              C47663 +
          (((C42902 * C42675 + C42903 * C42676 + C42904 * C42677) * C47791 -
            (C42903 * C42677 + C42902 * C42676 + C174 * C47633 * C42675) *
                C47943) *
               C2540 +
           ((C372 * C47633 * C42675 + C43254 * C42676 + C43255 * C42677) *
                C47943 -
            (C44345 * C42677 + C43255 * C42676 + C43254 * C42675) * C47791) *
               C47749) *
              C47672 +
          (((C175 * C47633 * C42675 + C42905 * C42676 + C42906 * C42677) *
                C47943 -
            (C42907 * C42677 + C42906 * C42676 + C42905 * C42675) * C47791) *
               C2540 +
           ((C43256 * C42675 + C43257 * C42676 +
             (C113 * C2437 - C114 * C2432 - C113 * C2438 + C47890 * C2441) *
                 C47633 * C42677) *
                C47791 -
            (C43257 * C42677 + C43256 * C42676 + C371 * C47633 * C42675) *
                C47943) *
               C47749) *
              C2911)) /
        (p * q * std::sqrt(p + q));
    d2ee[204] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C47890 * C136) * C47633 *
                C42675 +
            C42899 * C42676 + C42900 * C42677) *
               C47704 * C2540 -
           (C43253 * C42677 + C43252 * C42676 +
            (C113 * C308 - C114 * C296 - C113 * C309 + C47890 * C326) * C47633 *
                C42675) *
               C47704 * C47749) *
              C48019 +
          ((C372 * C47633 * C42675 + C43254 * C42676 + C43255 * C42677) *
               C47704 * C47749 -
           (C42903 * C42677 + C42902 * C42676 + C174 * C47633 * C42675) *
               C47704 * C2540) *
              C48012 +
          ((C175 * C47633 * C42675 + C42905 * C42676 + C42906 * C42677) *
               C47704 * C2540 -
           (C43257 * C42677 + C43256 * C42676 + C371 * C47633 * C42675) *
               C47704 * C47749) *
              C47999 +
          ((C375 * C47633 * C42675 + C984 * C47633 * C42676 +
            (C113 * C2195 - C114 * C2194 - C113 * C2196 + C47890 * C2197) *
                C47633 * C42677) *
               C47704 * C47749 -
           (C43105 * C42677 + C43104 * C42676 + C176 * C47633 * C42675) *
               C47704 * C2540) *
              C47978)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C47890 * C136) * C47633 *
                C42675 +
            C42899 * C42676 + C42900 * C42677) *
               C47704 * C48020 -
           (C43253 * C42677 + C43252 * C42676 +
            (C113 * C308 - C114 * C296 - C113 * C309 + C47890 * C326) * C47633 *
                C42675) *
               C47704 * C48016 +
           ((C113 * C310 - C114 * C297 - C113 * C311 + C47890 * C327) * C47633 *
                C42675 +
            C43541 * C42676 + C43542 * C42677) *
               C47704 * C48006 -
           (C43903 * C42677 + C43895 * C42676 +
            (C113 * C1178 - C114 * C1170 - C113 * C1179 + C47890 * C1188) *
                C47633 * C42675) *
               C47704 * C47984) *
              C2648 +
          ((C372 * C47633 * C42675 + C43254 * C42676 + C43255 * C42677) *
               C47704 * C48016 -
           (C42903 * C42677 + C42902 * C42676 + C174 * C47633 * C42675) *
               C47704 * C48020 -
           (C43796 * C42677 + C43795 * C42676 + C373 * C47633 * C42675) *
               C47704 * C48006 +
           (C1460 * C47633 * C42675 + C11893 * C47633 * C42676 +
            (C113 * C6147 - C114 * C6144 - C113 * C6148 + C47890 * C6150) *
                C47633 * C42677) *
               C47704 * C47984) *
              C47669)) /
            (p * q * std::sqrt(p + q));
    d2ee[205] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C47890 * C136) *
                 C47633 * C42675 +
             C42899 * C42676 + C42900 * C42677) *
                C3302 -
            (C42901 * C42677 + C42900 * C42676 + C42899 * C42675) * C47791) *
               C47745 +
           ((C43252 * C42675 + C43253 * C42676 + C43540 * C42677) * C47791 -
            (C43253 * C42677 + C43252 * C42676 +
             (C113 * C308 - C114 * C296 - C113 * C309 + C47890 * C326) *
                 C47633 * C42675) *
                C3302) *
               C47752 +
           (((C113 * C310 - C114 * C297 - C113 * C311 + C47890 * C327) *
                 C47633 * C42675 +
             C43541 * C42676 + C43542 * C42677) *
                C3302 -
            (C43550 * C42677 + C43542 * C42676 + C43541 * C42675) * C47791) *
               C2908) *
              C47928 +
          (((C42902 * C42675 + C42903 * C42676 + C42904 * C42677) * C47791 -
            (C42903 * C42677 + C42902 * C42676 + C174 * C47633 * C42675) *
                C3302) *
               C47745 +
           ((C372 * C47633 * C42675 + C43254 * C42676 + C43255 * C42677) *
                C3302 -
            (C44345 * C42677 + C43255 * C42676 + C43254 * C42675) * C47791) *
               C47752 +
           ((C43795 * C42675 + C43796 * C42676 +
             (C113 * C7509 - C114 * C7506 - C113 * C7510 + C47890 * C7512) *
                 C47633 * C42677) *
                C47791 -
            (C43796 * C42677 + C43795 * C42676 + C373 * C47633 * C42675) *
                C3302) *
               C2908) *
              C47669)) /
        (p * q * std::sqrt(p + q));
    d2ee[206] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C47890 * C136) * C47633 *
                C42675 +
            C42899 * C42676 + C42900 * C42677) *
               C47787 -
           (C42901 * C42677 + C42900 * C42676 + C42899 * C42675) * C47794 +
           (C42900 * C42675 + C42901 * C42676 + C44190 * C42677) * C3810) *
              C47745 +
          ((C43252 * C42675 + C43253 * C42676 + C43540 * C42677) * C47794 -
           (C43253 * C42677 + C43252 * C42676 +
            (C113 * C308 - C114 * C296 - C113 * C309 + C47890 * C326) * C47633 *
                C42675) *
               C47787 -
           (C44550 * C42677 + C43540 * C42676 + C43253 * C42675) * C3810) *
              C47752 +
          (((C113 * C310 - C114 * C297 - C113 * C311 + C47890 * C327) * C47633 *
                C42675 +
            C43541 * C42676 + C43542 * C42677) *
               C47787 -
           (C43550 * C42677 + C43542 * C42676 + C43541 * C42675) * C47794 +
           (C43542 * C42675 + C43550 * C42676 +
            (C113 * C23362 - C114 * C23361 - C113 * C23363 + C47890 * C23364) *
                C47633 * C42677) *
               C3810) *
              C2908) *
         C47658) /
        (p * q * std::sqrt(p + q));
    d2ee[207] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C47890 * C136) * C47633 *
                C42675 +
            C42899 * C42676 + C42900 * C42677) *
               C3302 -
           (C42901 * C42677 + C42900 * C42676 + C42899 * C42675) * C47791) *
              C48020 +
          ((C43252 * C42675 + C43253 * C42676 + C43540 * C42677) * C47791 -
           (C43253 * C42677 + C43252 * C42676 +
            (C113 * C308 - C114 * C296 - C113 * C309 + C47890 * C326) * C47633 *
                C42675) *
               C3302) *
              C48016 +
          (((C113 * C310 - C114 * C297 - C113 * C311 + C47890 * C327) * C47633 *
                C42675 +
            C43541 * C42676 + C43542 * C42677) *
               C3302 -
           (C43550 * C42677 + C43542 * C42676 + C43541 * C42675) * C47791) *
              C48006 +
          ((C43895 * C42675 + C43903 * C42676 +
            (C113 * C23708 - C114 * C23707 - C113 * C23709 + C47890 * C23710) *
                C47633 * C42677) *
               C47791 -
           (C43903 * C42677 + C43895 * C42676 +
            (C113 * C1178 - C114 * C1170 - C113 * C1179 + C47890 * C1188) *
                C47633 * C42675) *
               C3302) *
              C47984) *
         C47658) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C47890 * C136) *
                 C47633 * C42675 +
             C42899 * C42676 + C42900 * C42677) *
                C3302 -
            (C42901 * C42677 + C42900 * C42676 + C42899 * C42675) * C47791) *
               C2540 +
           ((C43252 * C42675 + C43253 * C42676 + C43540 * C42677) * C47791 -
            (C43253 * C42677 + C43252 * C42676 +
             (C113 * C308 - C114 * C296 - C113 * C309 + C47890 * C326) *
                 C47633 * C42675) *
                C3302) *
               C47749) *
              C48010 +
          (((C42902 * C42675 + C42903 * C42676 + C42904 * C42677) * C47791 -
            (C42903 * C42677 + C42902 * C42676 + C174 * C47633 * C42675) *
                C3302) *
               C2540 +
           ((C372 * C47633 * C42675 + C43254 * C42676 + C43255 * C42677) *
                C3302 -
            (C44345 * C42677 + C43255 * C42676 + C43254 * C42675) * C47791) *
               C47749) *
              C47997 +
          (((C175 * C47633 * C42675 + C42905 * C42676 + C42906 * C42677) *
                C3302 -
            (C42907 * C42677 + C42906 * C42676 + C42905 * C42675) * C47791) *
               C2540 +
           ((C43256 * C42675 + C43257 * C42676 +
             (C113 * C2437 - C114 * C2432 - C113 * C2438 + C47890 * C2441) *
                 C47633 * C42677) *
                C47791 -
            (C43257 * C42677 + C43256 * C42676 + C371 * C47633 * C42675) *
                C3302) *
               C47749) *
              C47968)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C47890 * C136) * C47633 *
                C42675 +
            C42899 * C42676 + C42900 * C42677) *
               C48021 -
           (C42901 * C42677 + C42900 * C42676 + C42899 * C42675) * C48018 +
           (C42900 * C42675 + C42901 * C42676 + C44190 * C42677) * C48009 -
           (C44198 * C42677 + C44190 * C42676 + C42901 * C42675) * C47990) *
              C2540 +
          ((C43252 * C42675 + C43253 * C42676 + C43540 * C42677) * C48018 -
           (C43253 * C42677 + C43252 * C42676 +
            (C113 * C308 - C114 * C296 - C113 * C309 + C47890 * C326) * C47633 *
                C42675) *
               C48021 -
           (C44550 * C42677 + C43540 * C42676 + C43253 * C42675) * C48009 +
           (C43540 * C42675 + C44550 * C42676 +
            (C113 * C28072 - C114 * C28071 - C113 * C28073 + C47890 * C28074) *
                C47633 * C42677) *
               C47990) *
              C47749) *
         C47658) /
            (p * q * std::sqrt(p + q));
    d2ee[208] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C47890 * C136) *
                 C47633 * C42675 +
             C42899 * C42676 + C42900 * C42677) *
                C47787 -
            (C42901 * C42677 + C42900 * C42676 + C42899 * C42675) * C47794 +
            (C42900 * C42675 + C42901 * C42676 + C44190 * C42677) * C3810) *
               C2540 +
           ((C43252 * C42675 + C43253 * C42676 + C43540 * C42677) * C47794 -
            (C43253 * C42677 + C43252 * C42676 +
             (C113 * C308 - C114 * C296 - C113 * C309 + C47890 * C326) *
                 C47633 * C42675) *
                C47787 -
            (C44550 * C42677 + C43540 * C42676 + C43253 * C42675) * C3810) *
               C47749) *
              C47928 +
          (((C42902 * C42675 + C42903 * C42676 + C42904 * C42677) * C47794 -
            (C42903 * C42677 + C42902 * C42676 + C174 * C47633 * C42675) *
                C47787 -
            (C44444 * C42677 + C42904 * C42676 + C42903 * C42675) * C3810) *
               C2540 +
           ((C372 * C47633 * C42675 + C43254 * C42676 + C43255 * C42677) *
                C47787 -
            (C44345 * C42677 + C43255 * C42676 + C43254 * C42675) * C47794 +
            (C43255 * C42675 + C44345 * C42676 +
             (C113 * C7019 - C114 * C7016 - C113 * C7020 + C47890 * C7022) *
                 C47633 * C42677) *
                C3810) *
               C47749) *
              C47669)) /
        (p * q * std::sqrt(p + q));
    d2ee[209] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C47890 * C136) *
                 C47633 * C42675 +
             C42899 * C42676 + C42900 * C42677) *
                C3302 -
            (C42901 * C42677 + C42900 * C42676 + C42899 * C42675) * C47791) *
               C2540 +
           ((C43252 * C42675 + C43253 * C42676 + C43540 * C42677) * C47791 -
            (C43253 * C42677 + C43252 * C42676 +
             (C113 * C308 - C114 * C296 - C113 * C309 + C47890 * C326) *
                 C47633 * C42675) *
                C3302) *
               C47749) *
              C48010 +
          (((C42902 * C42675 + C42903 * C42676 + C42904 * C42677) * C47791 -
            (C42903 * C42677 + C42902 * C42676 + C174 * C47633 * C42675) *
                C3302) *
               C2540 +
           ((C372 * C47633 * C42675 + C43254 * C42676 + C43255 * C42677) *
                C3302 -
            (C44345 * C42677 + C43255 * C42676 + C43254 * C42675) * C47791) *
               C47749) *
              C47997 +
          (((C175 * C47633 * C42675 + C42905 * C42676 + C42906 * C42677) *
                C3302 -
            (C42907 * C42677 + C42906 * C42676 + C42905 * C42675) * C47791) *
               C2540 +
           ((C43256 * C42675 + C43257 * C42676 +
             (C113 * C2437 - C114 * C2432 - C113 * C2438 + C47890 * C2441) *
                 C47633 * C42677) *
                C47791 -
            (C43257 * C42677 + C43256 * C42676 + C371 * C47633 * C42675) *
                C3302) *
               C47749) *
              C47968)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C47890 * C136) * C47633 *
                C42675 +
            C42899 * C42676 + C42900 * C42677) *
               C3302 -
           (C42901 * C42677 + C42900 * C42676 + C42899 * C42675) * C47791) *
              C48020 +
          ((C43252 * C42675 + C43253 * C42676 + C43540 * C42677) * C47791 -
           (C43253 * C42677 + C43252 * C42676 +
            (C113 * C308 - C114 * C296 - C113 * C309 + C47890 * C326) * C47633 *
                C42675) *
               C3302) *
              C48016 +
          (((C113 * C310 - C114 * C297 - C113 * C311 + C47890 * C327) * C47633 *
                C42675 +
            C43541 * C42676 + C43542 * C42677) *
               C3302 -
           (C43550 * C42677 + C43542 * C42676 + C43541 * C42675) * C47791) *
              C48006 +
          ((C43895 * C42675 + C43903 * C42676 +
            (C113 * C23708 - C114 * C23707 - C113 * C23709 + C47890 * C23710) *
                C47633 * C42677) *
               C47791 -
           (C43903 * C42677 + C43895 * C42676 +
            (C113 * C1178 - C114 * C1170 - C113 * C1179 + C47890 * C1188) *
                C47633 * C42675) *
               C3302) *
              C47984) *
         C47658) /
            (p * q * std::sqrt(p + q));
    d2ee[210] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C47890 * C136) * C47633 *
                C42675 +
            C42899 * C42676 + C42900 * C42677) *
               C47704 * C1436 -
           (C43253 * C42677 + C43252 * C42676 +
            (C113 * C308 - C114 * C296 - C113 * C309 + C47890 * C326) * C47633 *
                C42675) *
               C47704 * C1437 +
           ((C113 * C310 - C114 * C297 - C113 * C311 + C47890 * C327) * C47633 *
                C42675 +
            C43541 * C42676 + C43542 * C42677) *
               C47704 * C1438 -
           ((C113 * C6145 - C114 * C6143 - C113 * C6146 + C47890 * C6149) *
                C47633 * C42677 +
            C12227 * C47633 * C42676 +
            (C113 * C1178 - C114 * C1170 - C113 * C1179 + C47890 * C1188) *
                C47633 * C42675) *
               C47704 * C47984) *
              C47928 +
          ((C372 * C47633 * C42675 + C43254 * C42676 + C43255 * C42677) *
               C47704 * C1437 -
           (C42903 * C42677 + C42902 * C42676 + C174 * C47633 * C42675) *
               C47704 * C1436 -
           (C11751 * C47633 * C42677 + C1624 * C47633 * C42676 +
            C373 * C47633 * C42675) *
               C47704 * C1438 +
           (C1460 * C47633 * C42675 + C11893 * C47633 * C42676 +
            (C113 * C6147 - C114 * C6144 - C113 * C6148 + C47890 * C6150) *
                C47633 * C42677) *
               C47704 * C47984) *
              C47669)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C47890 * C136) * C47633 *
                C42675 +
            C42899 * C42676 + C42900 * C42677) *
               C47704 * C47942 -
           (C11749 * C47633 * C42677 + C11347 * C47633 * C42676 +
            (C113 * C308 - C114 * C296 - C113 * C309 + C47890 * C326) * C47633 *
                C42675) *
               C47704 * C47749) *
              C671 +
          ((C372 * C47633 * C42675 + C982 * C47633 * C42676 +
            C2212 * C47633 * C42677) *
               C47704 * C47749 -
           (C42903 * C42677 + C42902 * C42676 + C174 * C47633 * C42675) *
               C47704 * C47942) *
              C672 +
          ((C175 * C47633 * C42675 + C42905 * C42676 + C42906 * C42677) *
               C47704 * C47942 -
           (C2211 * C47633 * C42677 + C983 * C47633 * C42676 +
            C371 * C47633 * C42675) *
               C47704 * C47749) *
              C673 +
          ((C375 * C47633 * C42675 + C984 * C47633 * C42676 +
            (C113 * C2195 - C114 * C2194 - C113 * C2196 + C47890 * C2197) *
                C47633 * C42677) *
               C47704 * C47749 -
           (C571 * C47633 * C42677 + C570 * C47633 * C42676 +
            C176 * C47633 * C42675) *
               C47704 * C47942) *
              C47978)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C47890 * C136) *
                 C47633 * C42675 +
             C42899 * C42676 + C42900 * C42677) *
                C1844 -
            (C42901 * C42677 + C42900 * C42676 + C42899 * C42675) * C1845 +
            (C42900 * C42675 + C42901 * C42676 + C44190 * C42677) * C47977) *
               C47942 +
           ((C43252 * C42675 + C43253 * C42676 + C43540 * C42677) * C1845 -
            (C43253 * C42677 + C43252 * C42676 +
             (C113 * C308 - C114 * C296 - C113 * C309 + C47890 * C326) *
                 C47633 * C42675) *
                C1844 -
            ((C113 * C7017 - C114 * C7015 - C113 * C7018 + C47890 * C7021) *
                 C47633 * C42677 +
             C43540 * C42676 + C43253 * C42675) *
                C47977) *
               C47749) *
              C47928 +
          (((C42902 * C42675 + C42903 * C42676 + C42904 * C42677) * C1845 -
            (C42903 * C42677 + C42902 * C42676 + C174 * C47633 * C42675) *
                C1844 -
            (C12631 * C47633 * C42677 + C42904 * C42676 + C42903 * C42675) *
                C47977) *
               C47942 +
           ((C372 * C47633 * C42675 + C43254 * C42676 + C43255 * C42677) *
                C1844 -
            (C44345 * C42677 + C43255 * C42676 + C43254 * C42675) * C1845 +
            (C43255 * C42675 + C44345 * C42676 +
             (C113 * C7019 - C114 * C7016 - C113 * C7020 + C47890 * C7022) *
                 C47633 * C42677) *
                C47977) *
               C47749) *
              C47669)) /
            (p * q * std::sqrt(p + q));
    d2ee[211] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C47890 * C136) * C47633 *
                C42675 +
            C42899 * C42676 + C42900 * C42677) *
               C47943 -
           (C42901 * C42677 + C42900 * C42676 + C42899 * C42675) * C47791) *
              C1436 +
          ((C43252 * C42675 + C43253 * C42676 + C43540 * C42677) * C47791 -
           (C43253 * C42677 + C43252 * C42676 +
            (C113 * C308 - C114 * C296 - C113 * C309 + C47890 * C326) * C47633 *
                C42675) *
               C47943) *
              C1437 +
          (((C113 * C310 - C114 * C297 - C113 * C311 + C47890 * C327) * C47633 *
                C42675 +
            C43541 * C42676 + C43542 * C42677) *
               C47943 -
           (C43550 * C42677 + C43542 * C42676 + C43541 * C42675) * C47791) *
              C1438 +
          ((C43895 * C42675 + C43903 * C42676 +
            (C113 * C23708 - C114 * C23707 - C113 * C23709 + C47890 * C23710) *
                C47633 * C42677) *
               C47791 -
           (C43903 * C42677 + C43895 * C42676 +
            (C113 * C1178 - C114 * C1170 - C113 * C1179 + C47890 * C1188) *
                C47633 * C42675) *
               C47943) *
              C47984) *
         C47658) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C47890 * C136) *
                 C47633 * C42675 +
             C42899 * C42676 + C42900 * C42677) *
                C47943 -
            (C42901 * C42677 + C42900 * C42676 + C42899 * C42675) * C47791) *
               C47942 +
           ((C43252 * C42675 + C43253 * C42676 + C13108 * C47633 * C42677) *
                C47791 -
            (C43253 * C42677 + C43252 * C42676 +
             (C113 * C308 - C114 * C296 - C113 * C309 + C47890 * C326) *
                 C47633 * C42675) *
                C47943) *
               C47749) *
              C291 +
          (((C42902 * C42675 + C42903 * C42676 + C42904 * C42677) * C47791 -
            (C42903 * C42677 + C42902 * C42676 + C174 * C47633 * C42675) *
                C47943) *
               C47942 +
           ((C372 * C47633 * C42675 + C43254 * C42676 + C43255 * C42677) *
                C47943 -
            (C12838 * C47633 * C42677 + C43255 * C42676 + C43254 * C42675) *
                C47791) *
               C47749) *
              C292 +
          (((C175 * C47633 * C42675 + C42905 * C42676 + C42906 * C42677) *
                C47943 -
            (C42907 * C42677 + C42906 * C42676 + C42905 * C42675) * C47791) *
               C47942 +
           ((C43256 * C42675 + C43257 * C42676 +
             (C113 * C2437 - C114 * C2432 - C113 * C2438 + C47890 * C2441) *
                 C47633 * C42677) *
                C47791 -
            (C43257 * C42677 + C43256 * C42676 + C371 * C47633 * C42675) *
                C47943) *
               C47749) *
              C47968)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C47890 * C136) * C47633 *
                C42675 +
            C42899 * C42676 + C42900 * C42677) *
               C2310 -
           (C42901 * C42677 + C42900 * C42676 + C42899 * C42675) * C2311 +
           (C42900 * C42675 + C42901 * C42676 + C44190 * C42677) * C2312 -
           (C44198 * C42677 + C44190 * C42676 + C42901 * C42675) * C47990) *
              C47942 +
          ((C43252 * C42675 + C43253 * C42676 + C43540 * C42677) * C2311 -
           (C43253 * C42677 + C43252 * C42676 +
            (C113 * C308 - C114 * C296 - C113 * C309 + C47890 * C326) * C47633 *
                C42675) *
               C2310 -
           (C44550 * C42677 + C43540 * C42676 + C43253 * C42675) * C2312 +
           (C43540 * C42675 + C44550 * C42676 +
            (C113 * C28072 - C114 * C28071 - C113 * C28073 + C47890 * C28074) *
                C47633 * C42677) *
               C47990) *
              C47749) *
         C47658) /
            (p * q * std::sqrt(p + q));
    d2ee[212] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((C113 * C122 - C114 * C115 - C113 * C123 + C47890 * C136) *
                   C47633 * C42675 +
               C10876 * C47633 * C42676 + C10877 * C47633 * C42677) *
                  C47704 * C47686 * C108 -
              (C568 * C47633 * C42677 + C567 * C47633 * C42676 +
               C174 * C47633 * C42675) *
                  C47704 * C47686 * C109 +
              (C175 * C47633 * C42675 + C566 * C47633 * C42676 +
               C569 * C47633 * C42677) *
                  C47704 * C47686 * C110 -
              (C571 * C47633 * C42677 + C570 * C47633 * C42676 +
               C176 * C47633 * C42675) *
                  C47704 * C47686 * C111 +
              (C177 * C47633 * C42675 + C797 * C47633 * C42676 +
               (C113 * C517 - C114 * C498 - C113 * C518 + C47890 * C528) *
                   C47633 * C42677) *
                  C47704 * C47686 * C112) +
         0.5 * std::pow(Pi, 2.5) *
             ((((C113 * C122 - C114 * C115 - C113 * C123 + C47890 * C136) *
                    C47633 * C42675 +
                C10876 * C47633 * C42676 + C10877 * C47633 * C42677) *
                   C47704 * C48013 -
               (C11749 * C47633 * C42677 + C11347 * C47633 * C42676 +
                (C113 * C308 - C114 * C296 - C113 * C309 + C47890 * C326) *
                    C47633 * C42675) *
                   C47704 * C48001 +
               ((C113 * C310 - C114 * C297 - C113 * C311 + C47890 * C327) *
                    C47633 * C42675 +
                C11750 * C47633 * C42676 + C11752 * C47633 * C42677) *
                   C47704 * C47974) *
                  C291 +
              ((C372 * C47633 * C42675 + C982 * C47633 * C42676 +
                C2212 * C47633 * C42677) *
                   C47704 * C48001 -
               (C568 * C47633 * C42677 + C567 * C47633 * C42676 +
                C174 * C47633 * C42675) *
                   C47704 * C48013 -
               (C11751 * C47633 * C42677 + C1624 * C47633 * C42676 +
                C373 * C47633 * C42675) *
                   C47704 * C47974) *
                  C292 +
              ((C175 * C47633 * C42675 + C566 * C47633 * C42676 +
                C569 * C47633 * C42677) *
                   C47704 * C48013 -
               (C2211 * C47633 * C42677 + C983 * C47633 * C42676 +
                C371 * C47633 * C42675) *
                   C47704 * C48001 +
               (C374 * C47633 * C42675 + C1623 * C47633 * C42676 +
                (C113 * C1327 - C114 * C1310 - C113 * C1328 + C47890 * C1337) *
                    C47633 * C42677) *
                   C47704 * C47974) *
                  C47968)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C47890 * C136) * C47633 *
                C42675 +
            C42899 * C42676 + C42900 * C42677) *
               C48014 -
           (C42901 * C42677 + C42900 * C42676 + C42899 * C42675) * C48003 +
           (C42900 * C42675 + C42901 * C42676 + C12632 * C47633 * C42677) *
               C47977) *
              C47686 * C291 +
          ((C42902 * C42675 + C42903 * C42676 + C42904 * C42677) * C48003 -
           (C42903 * C42677 + C42902 * C42676 + C174 * C47633 * C42675) *
               C48014 -
           (C12631 * C47633 * C42677 + C42904 * C42676 + C42903 * C42675) *
               C47977) *
              C47686 * C292 +
          ((C175 * C47633 * C42675 + C42905 * C42676 + C42906 * C42677) *
               C48014 -
           (C42907 * C42677 + C42906 * C42676 + C42905 * C42675) * C48003 +
           (C42906 * C42675 + C42907 * C42676 +
            (C113 * C2040 - C114 * C2029 - C113 * C2041 + C47890 * C2047) *
                C47633 * C42677) *
               C47977) *
              C47686 * C47968)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C47890 * C136) * C47633 *
                C42675 +
            C42899 * C42676 + C42900 * C42677) *
               C47704 * C1094 -
           (C43253 * C42677 + C43252 * C42676 +
            (C113 * C308 - C114 * C296 - C113 * C309 + C47890 * C326) * C47633 *
                C42675) *
               C47704 * C1095 +
           ((C113 * C310 - C114 * C297 - C113 * C311 + C47890 * C327) * C47633 *
                C42675 +
            C11750 * C47633 * C42676 + C11752 * C47633 * C42677) *
               C47704 * C47974) *
              C48010 +
          ((C372 * C47633 * C42675 + C43254 * C42676 + C43255 * C42677) *
               C47704 * C1095 -
           (C42903 * C42677 + C42902 * C42676 + C174 * C47633 * C42675) *
               C47704 * C1094 -
           (C11751 * C47633 * C42677 + C1624 * C47633 * C42676 +
            C373 * C47633 * C42675) *
               C47704 * C47974) *
              C47997 +
          ((C175 * C47633 * C42675 + C42905 * C42676 + C42906 * C42677) *
               C47704 * C1094 -
           (C43257 * C42677 + C43256 * C42676 + C371 * C47633 * C42675) *
               C47704 * C1095 +
           (C374 * C47633 * C42675 + C1623 * C47633 * C42676 +
            (C113 * C1327 - C114 * C1310 - C113 * C1328 + C47890 * C1337) *
                C47633 * C42677) *
               C47704 * C47974) *
              C47968)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C113 * C122 - C114 * C115 - C113 * C123 + C47890 * C136) * C47633 *
               C42675 +
           C42899 * C42676 + C42900 * C42677) *
              C47704 * C1162 -
          (C43253 * C42677 + C43252 * C42676 +
           (C113 * C308 - C114 * C296 - C113 * C309 + C47890 * C326) * C47633 *
               C42675) *
              C47704 * C1163 +
          ((C113 * C310 - C114 * C297 - C113 * C311 + C47890 * C327) * C47633 *
               C42675 +
           C11750 * C47633 * C42676 + C11752 * C47633 * C42677) *
              C47704 * C1164 -
          ((C113 * C6145 - C114 * C6143 - C113 * C6146 + C47890 * C6149) *
               C47633 * C42677 +
           C12227 * C47633 * C42676 +
           (C113 * C1178 - C114 * C1170 - C113 * C1179 + C47890 * C1188) *
               C47633 * C42675) *
              C47704 * C1165 +
          ((C113 * C1180 - C114 * C1171 - C113 * C1181 + C47890 * C1189) *
               C47633 * C42675 +
           (C113 * C6635 - C114 * C6633 - C113 * C6636 + C47890 * C6639) *
               C47633 * C42676 +
           (C113 * C22730 - C114 * C22729 - C113 * C22731 + C47890 * C22732) *
               C47633 * C42677) *
              C47704 * C1166) *
         C47658) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C47890 * C136) * C47633 *
                C42675 +
            C42899 * C42676 + C42900 * C42677) *
               C48014 -
           (C42901 * C42677 + C42900 * C42676 + C42899 * C42675) * C48003 +
           (C42900 * C42675 + C42901 * C42676 + C12632 * C47633 * C42677) *
               C47977) *
              C1094 +
          ((C43252 * C42675 + C43253 * C42676 + C43540 * C42677) * C48003 -
           (C43253 * C42677 + C43252 * C42676 +
            (C113 * C308 - C114 * C296 - C113 * C309 + C47890 * C326) * C47633 *
                C42675) *
               C48014 -
           ((C113 * C7017 - C114 * C7015 - C113 * C7018 + C47890 * C7021) *
                C47633 * C42677 +
            C43540 * C42676 + C43253 * C42675) *
               C47977) *
              C1095 +
          (((C113 * C310 - C114 * C297 - C113 * C311 + C47890 * C327) * C47633 *
                C42675 +
            C43541 * C42676 + C43542 * C42677) *
               C48014 -
           (C43550 * C42677 + C43542 * C42676 + C43541 * C42675) * C48003 +
           (C43542 * C42675 + C43550 * C42676 +
            (C113 * C23362 - C114 * C23361 - C113 * C23363 + C47890 * C23364) *
                C47633 * C42677) *
               C47977) *
              C47974) *
         C47658) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C47890 * C136) * C47633 *
                C42675 +
            C42899 * C42676 + C42900 * C42677) *
               C1844 -
           (C42901 * C42677 + C42900 * C42676 + C42899 * C42675) * C1845 +
           (C42900 * C42675 + C42901 * C42676 + C12632 * C47633 * C42677) *
               C47977) *
              C47686 * C48010 +
          ((C42902 * C42675 + C42903 * C42676 + C42904 * C42677) * C1845 -
           (C42903 * C42677 + C42902 * C42676 + C174 * C47633 * C42675) *
               C1844 -
           (C12631 * C47633 * C42677 + C42904 * C42676 + C42903 * C42675) *
               C47977) *
              C47686 * C47997 +
          ((C175 * C47633 * C42675 + C42905 * C42676 + C42906 * C42677) *
               C1844 -
           (C42907 * C42677 + C42906 * C42676 + C42905 * C42675) * C1845 +
           (C42906 * C42675 + C42907 * C42676 +
            (C113 * C2040 - C114 * C2029 - C113 * C2041 + C47890 * C2047) *
                C47633 * C42677) *
               C47977) *
              C47686 * C47968)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C47890 * C136) * C47633 *
                C42675 +
            C42899 * C42676 + C42900 * C42677) *
               C1844 -
           (C42901 * C42677 + C42900 * C42676 + C42899 * C42675) * C1845 +
           (C42900 * C42675 + C42901 * C42676 + C12632 * C47633 * C42677) *
               C47977) *
              C48013 +
          ((C43252 * C42675 + C43253 * C42676 + C43540 * C42677) * C1845 -
           (C43253 * C42677 + C43252 * C42676 +
            (C113 * C308 - C114 * C296 - C113 * C309 + C47890 * C326) * C47633 *
                C42675) *
               C1844 -
           ((C113 * C7017 - C114 * C7015 - C113 * C7018 + C47890 * C7021) *
                C47633 * C42677 +
            C43540 * C42676 + C43253 * C42675) *
               C47977) *
              C48001 +
          (((C113 * C310 - C114 * C297 - C113 * C311 + C47890 * C327) * C47633 *
                C42675 +
            C43541 * C42676 + C43542 * C42677) *
               C1844 -
           (C43550 * C42677 + C43542 * C42676 + C43541 * C42675) * C1845 +
           (C43542 * C42675 + C43550 * C42676 +
            (C113 * C23362 - C114 * C23361 - C113 * C23363 + C47890 * C23364) *
                C47633 * C42677) *
               C47977) *
              C47974) *
         C47658) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C113 * C122 - C114 * C115 - C113 * C123 + C47890 * C136) * C47633 *
               C42675 +
           C42899 * C42676 + C42900 * C42677) *
              C2019 -
          (C42901 * C42677 + C42900 * C42676 + C42899 * C42675) * C2020 +
          (C42900 * C42675 + C42901 * C42676 + C44190 * C42677) * C2021 -
          (C44198 * C42677 + C44190 * C42676 + C42901 * C42675) * C2022 +
          (C44190 * C42675 + C44198 * C42676 +
           (C113 * C44186 - C114 * C44185 - C113 * C44187 + C47890 * C44188) *
               C47633 * C42677) *
              C2023) *
         C47686 * C47658) /
            (p * q * std::sqrt(p + q));
    d2ee[213] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C47890 * C136) *
                 C47633 * C42675 +
             C42899 * C42676 + C42900 * C42677) *
                C47943 -
            (C42901 * C42677 + C42900 * C42676 + C42899 * C42675) * C47791) *
               C1094 +
           ((C43252 * C42675 + C43253 * C42676 + C43540 * C42677) * C47791 -
            (C43253 * C42677 + C43252 * C42676 +
             (C113 * C308 - C114 * C296 - C113 * C309 + C47890 * C326) *
                 C47633 * C42675) *
                C47943) *
               C1095 +
           (((C113 * C310 - C114 * C297 - C113 * C311 + C47890 * C327) *
                 C47633 * C42675 +
             C43541 * C42676 + C43542 * C42677) *
                C47943 -
            (C43550 * C42677 + C43542 * C42676 + C43541 * C42675) * C47791) *
               C47974) *
              C47928 +
          (((C42902 * C42675 + C42903 * C42676 + C42904 * C42677) * C47791 -
            (C42903 * C42677 + C42902 * C42676 + C174 * C47633 * C42675) *
                C47943) *
               C1094 +
           ((C372 * C47633 * C42675 + C43254 * C42676 + C43255 * C42677) *
                C47943 -
            (C12838 * C47633 * C42677 + C43255 * C42676 + C43254 * C42675) *
                C47791) *
               C1095 +
           ((C43795 * C42675 + C43796 * C42676 +
             (C113 * C7509 - C114 * C7506 - C113 * C7510 + C47890 * C7512) *
                 C47633 * C42677) *
                C47791 -
            (C43796 * C42677 + C43795 * C42676 + C373 * C47633 * C42675) *
                C47943) *
               C47974) *
              C47669)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C47890 * C136) * C47633 *
                C42675 +
            C42899 * C42676 + C42900 * C42677) *
               C47943 -
           (C42901 * C42677 + C42900 * C42676 + C42899 * C42675) * C47791) *
              C47686 * C671 +
          ((C42902 * C42675 + C42903 * C42676 + C42904 * C42677) * C47791 -
           (C42903 * C42677 + C42902 * C42676 + C174 * C47633 * C42675) *
               C47943) *
              C47686 * C672 +
          ((C175 * C47633 * C42675 + C42905 * C42676 + C42906 * C42677) *
               C47943 -
           (C42907 * C42677 + C42906 * C42676 + C42905 * C42675) * C47791) *
              C47686 * C673 +
          ((C43104 * C42675 + C43105 * C42676 +
            (C113 * C2315 - C114 * C2314 - C113 * C2316 + C47890 * C2317) *
                C47633 * C42677) *
               C47791 -
           (C43105 * C42677 + C43104 * C42676 + C176 * C47633 * C42675) *
               C47943) *
              C47686 * C47978)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C47890 * C136) * C47633 *
                C42675 +
            C42899 * C42676 + C42900 * C42677) *
               C2310 -
           (C42901 * C42677 + C42900 * C42676 + C42899 * C42675) * C2311 +
           (C42900 * C42675 + C42901 * C42676 + C44190 * C42677) * C2312 -
           (C44198 * C42677 + C44190 * C42676 + C42901 * C42675) * C47990) *
              C47686 * C47928 +
          ((C42902 * C42675 + C42903 * C42676 + C42904 * C42677) * C2311 -
           (C42903 * C42677 + C42902 * C42676 + C174 * C47633 * C42675) *
               C2310 -
           (C44444 * C42677 + C42904 * C42676 + C42903 * C42675) * C2312 +
           (C42904 * C42675 + C44444 * C42676 +
            (C113 * C12606 - C114 * C12603 - C113 * C12607 + C47890 * C12609) *
                C47633 * C42677) *
               C47990) *
              C47686 * C47669)) /
            (p * q * std::sqrt(p + q));
    d2ee[214] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C47890 * C136) * C47633 *
                C42675 +
            C10876 * C47633 * C42676 + C10877 * C47633 * C42677) *
               C47704 * C48013 -
           (C11749 * C47633 * C42677 + C11347 * C47633 * C42676 +
            (C113 * C308 - C114 * C296 - C113 * C309 + C47890 * C326) * C47633 *
                C42675) *
               C47704 * C48001 +
           ((C113 * C310 - C114 * C297 - C113 * C311 + C47890 * C327) * C47633 *
                C42675 +
            C11750 * C47633 * C42676 + C11752 * C47633 * C42677) *
               C47704 * C47974) *
              C291 +
          ((C372 * C47633 * C42675 + C982 * C47633 * C42676 +
            C2212 * C47633 * C42677) *
               C47704 * C48001 -
           (C568 * C47633 * C42677 + C567 * C47633 * C42676 +
            C174 * C47633 * C42675) *
               C47704 * C48013 -
           (C11751 * C47633 * C42677 + C1624 * C47633 * C42676 +
            C373 * C47633 * C42675) *
               C47704 * C47974) *
              C292 +
          ((C175 * C47633 * C42675 + C566 * C47633 * C42676 +
            C569 * C47633 * C42677) *
               C47704 * C48013 -
           (C2211 * C47633 * C42677 + C983 * C47633 * C42676 +
            C371 * C47633 * C42675) *
               C47704 * C48001 +
           (C374 * C47633 * C42675 + C1623 * C47633 * C42676 +
            (C113 * C1327 - C114 * C1310 - C113 * C1328 + C47890 * C1337) *
                C47633 * C42677) *
               C47704 * C47974) *
              C47968)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C122 - C114 * C115 - C113 * C123 + C47890 * C136) * C47633 *
               C42675 +
           C10876 * C47633 * C42676 + C10877 * C47633 * C42677) *
              C47704 * C47686 * C108 -
          (C568 * C47633 * C42677 + C567 * C47633 * C42676 +
           C174 * C47633 * C42675) *
              C47704 * C47686 * C109 +
          (C175 * C47633 * C42675 + C566 * C47633 * C42676 +
           C569 * C47633 * C42677) *
              C47704 * C47686 * C110 -
          (C571 * C47633 * C42677 + C570 * C47633 * C42676 +
           C176 * C47633 * C42675) *
              C47704 * C47686 * C111 +
          (C177 * C47633 * C42675 + C797 * C47633 * C42676 +
           (C113 * C517 - C114 * C498 - C113 * C518 + C47890 * C528) * C47633 *
               C42677) *
              C47704 * C47686 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C47890 * C136) * C47633 *
                C42675 +
            C42899 * C42676 + C42900 * C42677) *
               C47704 * C1094 -
           (C43253 * C42677 + C43252 * C42676 +
            (C113 * C308 - C114 * C296 - C113 * C309 + C47890 * C326) * C47633 *
                C42675) *
               C47704 * C1095 +
           ((C113 * C310 - C114 * C297 - C113 * C311 + C47890 * C327) * C47633 *
                C42675 +
            C11750 * C47633 * C42676 + C11752 * C47633 * C42677) *
               C47704 * C47974) *
              C48010 +
          ((C372 * C47633 * C42675 + C43254 * C42676 + C43255 * C42677) *
               C47704 * C1095 -
           (C42903 * C42677 + C42902 * C42676 + C174 * C47633 * C42675) *
               C47704 * C1094 -
           (C11751 * C47633 * C42677 + C1624 * C47633 * C42676 +
            C373 * C47633 * C42675) *
               C47704 * C47974) *
              C47997 +
          ((C175 * C47633 * C42675 + C42905 * C42676 + C42906 * C42677) *
               C47704 * C1094 -
           (C43257 * C42677 + C43256 * C42676 + C371 * C47633 * C42675) *
               C47704 * C1095 +
           (C374 * C47633 * C42675 + C1623 * C47633 * C42676 +
            (C113 * C1327 - C114 * C1310 - C113 * C1328 + C47890 * C1337) *
                C47633 * C42677) *
               C47704 * C47974) *
              C47968)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C122 - C114 * C115 - C113 * C123 + C47890 * C136) * C47633 *
               C42675 +
           C42899 * C42676 + C42900 * C42677) *
              C47704 * C1162 -
          (C43253 * C42677 + C43252 * C42676 +
           (C113 * C308 - C114 * C296 - C113 * C309 + C47890 * C326) * C47633 *
               C42675) *
              C47704 * C1163 +
          ((C113 * C310 - C114 * C297 - C113 * C311 + C47890 * C327) * C47633 *
               C42675 +
           C11750 * C47633 * C42676 + C11752 * C47633 * C42677) *
              C47704 * C1164 -
          ((C113 * C6145 - C114 * C6143 - C113 * C6146 + C47890 * C6149) *
               C47633 * C42677 +
           C12227 * C47633 * C42676 +
           (C113 * C1178 - C114 * C1170 - C113 * C1179 + C47890 * C1188) *
               C47633 * C42675) *
              C47704 * C1165 +
          ((C113 * C1180 - C114 * C1171 - C113 * C1181 + C47890 * C1189) *
               C47633 * C42675 +
           (C113 * C6635 - C114 * C6633 - C113 * C6636 + C47890 * C6639) *
               C47633 * C42676 +
           (C113 * C22730 - C114 * C22729 - C113 * C22731 + C47890 * C22732) *
               C47633 * C42677) *
              C47704 * C1166) *
         C47658) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C47890 * C136) * C47633 *
                C42675 +
            C42899 * C42676 + C42900 * C42677) *
               C1844 -
           (C42901 * C42677 + C42900 * C42676 + C42899 * C42675) * C1845 +
           (C42900 * C42675 + C42901 * C42676 + C12632 * C47633 * C42677) *
               C47977) *
              C47686 * C48010 +
          ((C42902 * C42675 + C42903 * C42676 + C42904 * C42677) * C1845 -
           (C42903 * C42677 + C42902 * C42676 + C174 * C47633 * C42675) *
               C1844 -
           (C12631 * C47633 * C42677 + C42904 * C42676 + C42903 * C42675) *
               C47977) *
              C47686 * C47997 +
          ((C175 * C47633 * C42675 + C42905 * C42676 + C42906 * C42677) *
               C1844 -
           (C42907 * C42677 + C42906 * C42676 + C42905 * C42675) * C1845 +
           (C42906 * C42675 + C42907 * C42676 +
            (C113 * C2040 - C114 * C2029 - C113 * C2041 + C47890 * C2047) *
                C47633 * C42677) *
               C47977) *
              C47686 * C47968)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C47890 * C136) * C47633 *
                C42675 +
            C42899 * C42676 + C42900 * C42677) *
               C1844 -
           (C42901 * C42677 + C42900 * C42676 + C42899 * C42675) * C1845 +
           (C42900 * C42675 + C42901 * C42676 + C12632 * C47633 * C42677) *
               C47977) *
              C48013 +
          ((C43252 * C42675 + C43253 * C42676 + C43540 * C42677) * C1845 -
           (C43253 * C42677 + C43252 * C42676 +
            (C113 * C308 - C114 * C296 - C113 * C309 + C47890 * C326) * C47633 *
                C42675) *
               C1844 -
           ((C113 * C7017 - C114 * C7015 - C113 * C7018 + C47890 * C7021) *
                C47633 * C42677 +
            C43540 * C42676 + C43253 * C42675) *
               C47977) *
              C48001 +
          (((C113 * C310 - C114 * C297 - C113 * C311 + C47890 * C327) * C47633 *
                C42675 +
            C43541 * C42676 + C43542 * C42677) *
               C1844 -
           (C43550 * C42677 + C43542 * C42676 + C43541 * C42675) * C1845 +
           (C43542 * C42675 + C43550 * C42676 +
            (C113 * C23362 - C114 * C23361 - C113 * C23363 + C47890 * C23364) *
                C47633 * C42677) *
               C47977) *
              C47974) *
         C47658) /
            (p * q * std::sqrt(p + q));
    d2ee[215] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C47890 * C136) *
                 C47633 * C42675 +
             C42899 * C42676 + C42900 * C42677) *
                C3302 -
            (C42901 * C42677 + C42900 * C42676 + C42899 * C42675) * C47791) *
               C47942 +
           ((C43252 * C42675 + C43253 * C42676 + C43540 * C42677) * C47791 -
            (C43253 * C42677 + C43252 * C42676 +
             (C113 * C308 - C114 * C296 - C113 * C309 + C47890 * C326) *
                 C47633 * C42675) *
                C3302) *
               C47749) *
              C47663 +
          (((C42902 * C42675 + C42903 * C42676 + C42904 * C42677) * C47791 -
            (C42903 * C42677 + C42902 * C42676 + C174 * C47633 * C42675) *
                C3302) *
               C47942 +
           ((C372 * C47633 * C42675 + C43254 * C42676 + C43255 * C42677) *
                C3302 -
            (C44345 * C42677 + C43255 * C42676 + C43254 * C42675) * C47791) *
               C47749) *
              C47672 +
          (((C175 * C47633 * C42675 + C42905 * C42676 + C42906 * C42677) *
                C3302 -
            (C42907 * C42677 + C42906 * C42676 + C42905 * C42675) * C47791) *
               C47942 +
           ((C43256 * C42675 + C43257 * C42676 +
             (C113 * C2437 - C114 * C2432 - C113 * C2438 + C47890 * C2441) *
                 C47633 * C42677) *
                C47791 -
            (C43257 * C42677 + C43256 * C42676 + C371 * C47633 * C42675) *
                C3302) *
               C47749) *
              C2911)) /
        (p * q * std::sqrt(p + q));
    d2ee[216] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C47890 * C136) *
                 C47633 * C42675 +
             C42899 * C42676 + C42900 * C42677) *
                C47787 -
            (C42901 * C42677 + C42900 * C42676 + C42899 * C42675) * C47794 +
            (C42900 * C42675 + C42901 * C42676 + C44190 * C42677) * C3810) *
               C47942 +
           ((C43252 * C42675 + C43253 * C42676 + C43540 * C42677) * C47794 -
            (C43253 * C42677 + C43252 * C42676 +
             (C113 * C308 - C114 * C296 - C113 * C309 + C47890 * C326) *
                 C47633 * C42675) *
                C47787 -
            (C44550 * C42677 + C43540 * C42676 + C43253 * C42675) * C3810) *
               C47749) *
              C2648 +
          (((C42902 * C42675 + C42903 * C42676 + C42904 * C42677) * C47794 -
            (C42903 * C42677 + C42902 * C42676 + C174 * C47633 * C42675) *
                C47787 -
            (C44444 * C42677 + C42904 * C42676 + C42903 * C42675) * C3810) *
               C47942 +
           ((C372 * C47633 * C42675 + C43254 * C42676 + C43255 * C42677) *
                C47787 -
            (C44345 * C42677 + C43255 * C42676 + C43254 * C42675) * C47794 +
            (C43255 * C42675 + C44345 * C42676 +
             (C113 * C7019 - C114 * C7016 - C113 * C7020 + C47890 * C7022) *
                 C47633 * C42677) *
                C3810) *
               C47749) *
              C47669)) /
        (p * q * std::sqrt(p + q));
    d2ee[217] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C47890 * C136) *
                 C47633 * C42675 +
             C42899 * C42676 + C42900 * C42677) *
                C3302 -
            (C42901 * C42677 + C42900 * C42676 + C42899 * C42675) * C47791) *
               C48013 +
           ((C43252 * C42675 + C43253 * C42676 + C43540 * C42677) * C47791 -
            (C43253 * C42677 + C43252 * C42676 +
             (C113 * C308 - C114 * C296 - C113 * C309 + C47890 * C326) *
                 C47633 * C42675) *
                C3302) *
               C48001 +
           (((C113 * C310 - C114 * C297 - C113 * C311 + C47890 * C327) *
                 C47633 * C42675 +
             C43541 * C42676 + C43542 * C42677) *
                C3302 -
            (C43550 * C42677 + C43542 * C42676 + C43541 * C42675) * C47791) *
               C47974) *
              C2648 +
          (((C42902 * C42675 + C42903 * C42676 + C42904 * C42677) * C47791 -
            (C42903 * C42677 + C42902 * C42676 + C174 * C47633 * C42675) *
                C3302) *
               C48013 +
           ((C372 * C47633 * C42675 + C43254 * C42676 + C43255 * C42677) *
                C3302 -
            (C44345 * C42677 + C43255 * C42676 + C43254 * C42675) * C47791) *
               C48001 +
           ((C43795 * C42675 + C43796 * C42676 +
             (C113 * C7509 - C114 * C7506 - C113 * C7510 + C47890 * C7512) *
                 C47633 * C42677) *
                C47791 -
            (C43796 * C42677 + C43795 * C42676 + C373 * C47633 * C42675) *
                C3302) *
               C47974) *
              C47669)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C47890 * C136) * C47633 *
                C42675 +
            C42899 * C42676 + C42900 * C42677) *
               C3302 -
           (C42901 * C42677 + C42900 * C42676 + C42899 * C42675) * C47791) *
              C47686 * C48019 +
          ((C42902 * C42675 + C42903 * C42676 + C42904 * C42677) * C47791 -
           (C42903 * C42677 + C42902 * C42676 + C174 * C47633 * C42675) *
               C3302) *
              C47686 * C48012 +
          ((C175 * C47633 * C42675 + C42905 * C42676 + C42906 * C42677) *
               C3302 -
           (C42907 * C42677 + C42906 * C42676 + C42905 * C42675) * C47791) *
              C47686 * C47999 +
          ((C43104 * C42675 + C43105 * C42676 +
            (C113 * C2315 - C114 * C2314 - C113 * C2316 + C47890 * C2317) *
                C47633 * C42677) *
               C47791 -
           (C43105 * C42677 + C43104 * C42676 + C176 * C47633 * C42675) *
               C3302) *
              C47686 * C47978)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C47890 * C136) * C47633 *
                C42675 +
            C42899 * C42676 + C42900 * C42677) *
               C48021 -
           (C42901 * C42677 + C42900 * C42676 + C42899 * C42675) * C48018 +
           (C42900 * C42675 + C42901 * C42676 + C44190 * C42677) * C48009 -
           (C44198 * C42677 + C44190 * C42676 + C42901 * C42675) * C47990) *
              C47686 * C2648 +
          ((C42902 * C42675 + C42903 * C42676 + C42904 * C42677) * C48018 -
           (C42903 * C42677 + C42902 * C42676 + C174 * C47633 * C42675) *
               C48021 -
           (C44444 * C42677 + C42904 * C42676 + C42903 * C42675) * C48009 +
           (C42904 * C42675 + C44444 * C42676 +
            (C113 * C12606 - C114 * C12603 - C113 * C12607 + C47890 * C12609) *
                C47633 * C42677) *
               C47990) *
              C47686 * C47669)) /
            (p * q * std::sqrt(p + q));
    d2ee[218] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C47890 * C136) * C47633 *
                C42675 +
            C42899 * C42676 + C42900 * C42677) *
               C47787 -
           (C42901 * C42677 + C42900 * C42676 + C42899 * C42675) * C47794 +
           (C42900 * C42675 + C42901 * C42676 + C44190 * C42677) * C3810) *
              C47686 * C47663 +
          ((C42902 * C42675 + C42903 * C42676 + C42904 * C42677) * C47794 -
           (C42903 * C42677 + C42902 * C42676 + C174 * C47633 * C42675) *
               C47787 -
           (C44444 * C42677 + C42904 * C42676 + C42903 * C42675) * C3810) *
              C47686 * C47672 +
          ((C175 * C47633 * C42675 + C42905 * C42676 + C42906 * C42677) *
               C47787 -
           (C42907 * C42677 + C42906 * C42676 + C42905 * C42675) * C47794 +
           (C42906 * C42675 + C42907 * C42676 +
            (C113 * C2040 - C114 * C2029 - C113 * C2041 + C47890 * C2047) *
                C47633 * C42677) *
               C3810) *
              C47686 * C2911)) /
        (p * q * std::sqrt(p + q));
    d2ee[219] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C47890 * C136) * C47633 *
                C42675 +
            C42899 * C42676 + C42900 * C42677) *
               C3302 -
           (C42901 * C42677 + C42900 * C42676 + C42899 * C42675) * C47791) *
              C47686 * C48019 +
          ((C42902 * C42675 + C42903 * C42676 + C42904 * C42677) * C47791 -
           (C42903 * C42677 + C42902 * C42676 + C174 * C47633 * C42675) *
               C3302) *
              C47686 * C48012 +
          ((C175 * C47633 * C42675 + C42905 * C42676 + C42906 * C42677) *
               C3302 -
           (C42907 * C42677 + C42906 * C42676 + C42905 * C42675) * C47791) *
              C47686 * C47999 +
          ((C43104 * C42675 + C43105 * C42676 +
            (C113 * C2315 - C114 * C2314 - C113 * C2316 + C47890 * C2317) *
                C47633 * C42677) *
               C47791 -
           (C43105 * C42677 + C43104 * C42676 + C176 * C47633 * C42675) *
               C3302) *
              C47686 * C47978)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C47890 * C136) *
                 C47633 * C42675 +
             C42899 * C42676 + C42900 * C42677) *
                C3302 -
            (C42901 * C42677 + C42900 * C42676 + C42899 * C42675) * C47791) *
               C48013 +
           ((C43252 * C42675 + C43253 * C42676 + C43540 * C42677) * C47791 -
            (C43253 * C42677 + C43252 * C42676 +
             (C113 * C308 - C114 * C296 - C113 * C309 + C47890 * C326) *
                 C47633 * C42675) *
                C3302) *
               C48001 +
           (((C113 * C310 - C114 * C297 - C113 * C311 + C47890 * C327) *
                 C47633 * C42675 +
             C43541 * C42676 + C43542 * C42677) *
                C3302 -
            (C43550 * C42677 + C43542 * C42676 + C43541 * C42675) * C47791) *
               C47974) *
              C2648 +
          (((C42902 * C42675 + C42903 * C42676 + C42904 * C42677) * C47791 -
            (C42903 * C42677 + C42902 * C42676 + C174 * C47633 * C42675) *
                C3302) *
               C48013 +
           ((C372 * C47633 * C42675 + C43254 * C42676 + C43255 * C42677) *
                C3302 -
            (C44345 * C42677 + C43255 * C42676 + C43254 * C42675) * C47791) *
               C48001 +
           ((C43795 * C42675 + C43796 * C42676 +
             (C113 * C7509 - C114 * C7506 - C113 * C7510 + C47890 * C7512) *
                 C47633 * C42677) *
                C47791 -
            (C43796 * C42677 + C43795 * C42676 + C373 * C47633 * C42675) *
                C3302) *
               C47974) *
              C47669)) /
            (p * q * std::sqrt(p + q));
    d2ee[220] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C47890 * C136) * C47633 *
                C42675 +
            C42899 * C42676 + C42900 * C42677) *
               C47704 * C47942 -
           (C11749 * C47633 * C42677 + C11347 * C47633 * C42676 +
            (C113 * C308 - C114 * C296 - C113 * C309 + C47890 * C326) * C47633 *
                C42675) *
               C47704 * C47749) *
              C671 +
          ((C372 * C47633 * C42675 + C982 * C47633 * C42676 +
            C2212 * C47633 * C42677) *
               C47704 * C47749 -
           (C42903 * C42677 + C42902 * C42676 + C174 * C47633 * C42675) *
               C47704 * C47942) *
              C672 +
          ((C175 * C47633 * C42675 + C42905 * C42676 + C42906 * C42677) *
               C47704 * C47942 -
           (C2211 * C47633 * C42677 + C983 * C47633 * C42676 +
            C371 * C47633 * C42675) *
               C47704 * C47749) *
              C673 +
          ((C375 * C47633 * C42675 + C984 * C47633 * C42676 +
            (C113 * C2195 - C114 * C2194 - C113 * C2196 + C47890 * C2197) *
                C47633 * C42677) *
               C47704 * C47749 -
           (C571 * C47633 * C42677 + C570 * C47633 * C42676 +
            C176 * C47633 * C42675) *
               C47704 * C47942) *
              C47978)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C47890 * C136) * C47633 *
                C42675 +
            C42899 * C42676 + C42900 * C42677) *
               C47704 * C1436 -
           (C43253 * C42677 + C43252 * C42676 +
            (C113 * C308 - C114 * C296 - C113 * C309 + C47890 * C326) * C47633 *
                C42675) *
               C47704 * C1437 +
           ((C113 * C310 - C114 * C297 - C113 * C311 + C47890 * C327) * C47633 *
                C42675 +
            C43541 * C42676 + C43542 * C42677) *
               C47704 * C1438 -
           ((C113 * C6145 - C114 * C6143 - C113 * C6146 + C47890 * C6149) *
                C47633 * C42677 +
            C12227 * C47633 * C42676 +
            (C113 * C1178 - C114 * C1170 - C113 * C1179 + C47890 * C1188) *
                C47633 * C42675) *
               C47704 * C47984) *
              C47928 +
          ((C372 * C47633 * C42675 + C43254 * C42676 + C43255 * C42677) *
               C47704 * C1437 -
           (C42903 * C42677 + C42902 * C42676 + C174 * C47633 * C42675) *
               C47704 * C1436 -
           (C11751 * C47633 * C42677 + C1624 * C47633 * C42676 +
            C373 * C47633 * C42675) *
               C47704 * C1438 +
           (C1460 * C47633 * C42675 + C11893 * C47633 * C42676 +
            (C113 * C6147 - C114 * C6144 - C113 * C6148 + C47890 * C6150) *
                C47633 * C42677) *
               C47704 * C47984) *
              C47669)) /
            (p * q * std::sqrt(p + q));
    d2ee[221] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C47890 * C136) *
                 C47633 * C42675 +
             C42899 * C42676 + C42900 * C42677) *
                C47943 -
            (C42901 * C42677 + C42900 * C42676 + C42899 * C42675) * C47791) *
               C47942 +
           ((C43252 * C42675 + C43253 * C42676 + C13108 * C47633 * C42677) *
                C47791 -
            (C43253 * C42677 + C43252 * C42676 +
             (C113 * C308 - C114 * C296 - C113 * C309 + C47890 * C326) *
                 C47633 * C42675) *
                C47943) *
               C47749) *
              C291 +
          (((C42902 * C42675 + C42903 * C42676 + C42904 * C42677) * C47791 -
            (C42903 * C42677 + C42902 * C42676 + C174 * C47633 * C42675) *
                C47943) *
               C47942 +
           ((C372 * C47633 * C42675 + C43254 * C42676 + C43255 * C42677) *
                C47943 -
            (C12838 * C47633 * C42677 + C43255 * C42676 + C43254 * C42675) *
                C47791) *
               C47749) *
              C292 +
          (((C175 * C47633 * C42675 + C42905 * C42676 + C42906 * C42677) *
                C47943 -
            (C42907 * C42677 + C42906 * C42676 + C42905 * C42675) * C47791) *
               C47942 +
           ((C43256 * C42675 + C43257 * C42676 +
             (C113 * C2437 - C114 * C2432 - C113 * C2438 + C47890 * C2441) *
                 C47633 * C42677) *
                C47791 -
            (C43257 * C42677 + C43256 * C42676 + C371 * C47633 * C42675) *
                C47943) *
               C47749) *
              C47968)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C47890 * C136) * C47633 *
                C42675 +
            C42899 * C42676 + C42900 * C42677) *
               C47943 -
           (C42901 * C42677 + C42900 * C42676 + C42899 * C42675) * C47791) *
              C1436 +
          ((C43252 * C42675 + C43253 * C42676 + C43540 * C42677) * C47791 -
           (C43253 * C42677 + C43252 * C42676 +
            (C113 * C308 - C114 * C296 - C113 * C309 + C47890 * C326) * C47633 *
                C42675) *
               C47943) *
              C1437 +
          (((C113 * C310 - C114 * C297 - C113 * C311 + C47890 * C327) * C47633 *
                C42675 +
            C43541 * C42676 + C43542 * C42677) *
               C47943 -
           (C43550 * C42677 + C43542 * C42676 + C43541 * C42675) * C47791) *
              C1438 +
          ((C43895 * C42675 + C43903 * C42676 +
            (C113 * C23708 - C114 * C23707 - C113 * C23709 + C47890 * C23710) *
                C47633 * C42677) *
               C47791 -
           (C43903 * C42677 + C43895 * C42676 +
            (C113 * C1178 - C114 * C1170 - C113 * C1179 + C47890 * C1188) *
                C47633 * C42675) *
               C47943) *
              C47984) *
         C47658) /
            (p * q * std::sqrt(p + q));
    d2ee[222] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C47890 * C136) * C47633 *
                C42675 +
            C10876 * C47633 * C42676 + C10877 * C47633 * C42677) *
               C47704 * C48013 -
           (C11749 * C47633 * C42677 + C11347 * C47633 * C42676 +
            (C113 * C308 - C114 * C296 - C113 * C309 + C47890 * C326) * C47633 *
                C42675) *
               C47704 * C48001 +
           ((C113 * C310 - C114 * C297 - C113 * C311 + C47890 * C327) * C47633 *
                C42675 +
            C11750 * C47633 * C42676 + C11752 * C47633 * C42677) *
               C47704 * C47974) *
              C291 +
          ((C372 * C47633 * C42675 + C982 * C47633 * C42676 +
            C2212 * C47633 * C42677) *
               C47704 * C48001 -
           (C568 * C47633 * C42677 + C567 * C47633 * C42676 +
            C174 * C47633 * C42675) *
               C47704 * C48013 -
           (C11751 * C47633 * C42677 + C1624 * C47633 * C42676 +
            C373 * C47633 * C42675) *
               C47704 * C47974) *
              C292 +
          ((C175 * C47633 * C42675 + C566 * C47633 * C42676 +
            C569 * C47633 * C42677) *
               C47704 * C48013 -
           (C2211 * C47633 * C42677 + C983 * C47633 * C42676 +
            C371 * C47633 * C42675) *
               C47704 * C48001 +
           (C374 * C47633 * C42675 + C1623 * C47633 * C42676 +
            (C113 * C1327 - C114 * C1310 - C113 * C1328 + C47890 * C1337) *
                C47633 * C42677) *
               C47704 * C47974) *
              C47968)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C122 - C114 * C115 - C113 * C123 + C47890 * C136) * C47633 *
               C42675 +
           C10876 * C47633 * C42676 + C10877 * C47633 * C42677) *
              C47704 * C47686 * C108 -
          (C568 * C47633 * C42677 + C567 * C47633 * C42676 +
           C174 * C47633 * C42675) *
              C47704 * C47686 * C109 +
          (C175 * C47633 * C42675 + C566 * C47633 * C42676 +
           C569 * C47633 * C42677) *
              C47704 * C47686 * C110 -
          (C571 * C47633 * C42677 + C570 * C47633 * C42676 +
           C176 * C47633 * C42675) *
              C47704 * C47686 * C111 +
          (C177 * C47633 * C42675 + C797 * C47633 * C42676 +
           (C113 * C517 - C114 * C498 - C113 * C518 + C47890 * C528) * C47633 *
               C42677) *
              C47704 * C47686 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C47890 * C136) * C47633 *
                C42675 +
            C42899 * C42676 + C42900 * C42677) *
               C48014 -
           (C42901 * C42677 + C42900 * C42676 + C42899 * C42675) * C48003 +
           (C42900 * C42675 + C42901 * C42676 + C12632 * C47633 * C42677) *
               C47977) *
              C47686 * C291 +
          ((C42902 * C42675 + C42903 * C42676 + C42904 * C42677) * C48003 -
           (C42903 * C42677 + C42902 * C42676 + C174 * C47633 * C42675) *
               C48014 -
           (C12631 * C47633 * C42677 + C42904 * C42676 + C42903 * C42675) *
               C47977) *
              C47686 * C292 +
          ((C175 * C47633 * C42675 + C42905 * C42676 + C42906 * C42677) *
               C48014 -
           (C42907 * C42677 + C42906 * C42676 + C42905 * C42675) * C48003 +
           (C42906 * C42675 + C42907 * C42676 +
            (C113 * C2040 - C114 * C2029 - C113 * C2041 + C47890 * C2047) *
                C47633 * C42677) *
               C47977) *
              C47686 * C47968)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C47890 * C136) * C47633 *
                C42675 +
            C42899 * C42676 + C42900 * C42677) *
               C47704 * C1094 -
           (C43253 * C42677 + C43252 * C42676 +
            (C113 * C308 - C114 * C296 - C113 * C309 + C47890 * C326) * C47633 *
                C42675) *
               C47704 * C1095 +
           ((C113 * C310 - C114 * C297 - C113 * C311 + C47890 * C327) * C47633 *
                C42675 +
            C11750 * C47633 * C42676 + C11752 * C47633 * C42677) *
               C47704 * C47974) *
              C48010 +
          ((C372 * C47633 * C42675 + C43254 * C42676 + C43255 * C42677) *
               C47704 * C1095 -
           (C42903 * C42677 + C42902 * C42676 + C174 * C47633 * C42675) *
               C47704 * C1094 -
           (C11751 * C47633 * C42677 + C1624 * C47633 * C42676 +
            C373 * C47633 * C42675) *
               C47704 * C47974) *
              C47997 +
          ((C175 * C47633 * C42675 + C42905 * C42676 + C42906 * C42677) *
               C47704 * C1094 -
           (C43257 * C42677 + C43256 * C42676 + C371 * C47633 * C42675) *
               C47704 * C1095 +
           (C374 * C47633 * C42675 + C1623 * C47633 * C42676 +
            (C113 * C1327 - C114 * C1310 - C113 * C1328 + C47890 * C1337) *
                C47633 * C42677) *
               C47704 * C47974) *
              C47968)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C122 - C114 * C115 - C113 * C123 + C47890 * C136) * C47633 *
               C42675 +
           C42899 * C42676 + C42900 * C42677) *
              C47704 * C1162 -
          (C43253 * C42677 + C43252 * C42676 +
           (C113 * C308 - C114 * C296 - C113 * C309 + C47890 * C326) * C47633 *
               C42675) *
              C47704 * C1163 +
          ((C113 * C310 - C114 * C297 - C113 * C311 + C47890 * C327) * C47633 *
               C42675 +
           C11750 * C47633 * C42676 + C11752 * C47633 * C42677) *
              C47704 * C1164 -
          ((C113 * C6145 - C114 * C6143 - C113 * C6146 + C47890 * C6149) *
               C47633 * C42677 +
           C12227 * C47633 * C42676 +
           (C113 * C1178 - C114 * C1170 - C113 * C1179 + C47890 * C1188) *
               C47633 * C42675) *
              C47704 * C1165 +
          ((C113 * C1180 - C114 * C1171 - C113 * C1181 + C47890 * C1189) *
               C47633 * C42675 +
           (C113 * C6635 - C114 * C6633 - C113 * C6636 + C47890 * C6639) *
               C47633 * C42676 +
           (C113 * C22730 - C114 * C22729 - C113 * C22731 + C47890 * C22732) *
               C47633 * C42677) *
              C47704 * C1166) *
         C47658) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C47890 * C136) * C47633 *
                C42675 +
            C42899 * C42676 + C42900 * C42677) *
               C48014 -
           (C42901 * C42677 + C42900 * C42676 + C42899 * C42675) * C48003 +
           (C42900 * C42675 + C42901 * C42676 + C12632 * C47633 * C42677) *
               C47977) *
              C1094 +
          ((C43252 * C42675 + C43253 * C42676 + C43540 * C42677) * C48003 -
           (C43253 * C42677 + C43252 * C42676 +
            (C113 * C308 - C114 * C296 - C113 * C309 + C47890 * C326) * C47633 *
                C42675) *
               C48014 -
           ((C113 * C7017 - C114 * C7015 - C113 * C7018 + C47890 * C7021) *
                C47633 * C42677 +
            C43540 * C42676 + C43253 * C42675) *
               C47977) *
              C1095 +
          (((C113 * C310 - C114 * C297 - C113 * C311 + C47890 * C327) * C47633 *
                C42675 +
            C43541 * C42676 + C43542 * C42677) *
               C48014 -
           (C43550 * C42677 + C43542 * C42676 + C43541 * C42675) * C48003 +
           (C43542 * C42675 + C43550 * C42676 +
            (C113 * C23362 - C114 * C23361 - C113 * C23363 + C47890 * C23364) *
                C47633 * C42677) *
               C47977) *
              C47974) *
         C47658) /
            (p * q * std::sqrt(p + q));
    d2ee[223] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C47890 * C136) * C47633 *
                C42675 +
            C42899 * C42676 + C42900 * C42677) *
               C47943 -
           (C42901 * C42677 + C42900 * C42676 + C42899 * C42675) * C47791) *
              C47686 * C671 +
          ((C42902 * C42675 + C42903 * C42676 + C42904 * C42677) * C47791 -
           (C42903 * C42677 + C42902 * C42676 + C174 * C47633 * C42675) *
               C47943) *
              C47686 * C672 +
          ((C175 * C47633 * C42675 + C42905 * C42676 + C42906 * C42677) *
               C47943 -
           (C42907 * C42677 + C42906 * C42676 + C42905 * C42675) * C47791) *
              C47686 * C673 +
          ((C43104 * C42675 + C43105 * C42676 +
            (C113 * C2315 - C114 * C2314 - C113 * C2316 + C47890 * C2317) *
                C47633 * C42677) *
               C47791 -
           (C43105 * C42677 + C43104 * C42676 + C176 * C47633 * C42675) *
               C47943) *
              C47686 * C47978)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C47890 * C136) *
                 C47633 * C42675 +
             C42899 * C42676 + C42900 * C42677) *
                C47943 -
            (C42901 * C42677 + C42900 * C42676 + C42899 * C42675) * C47791) *
               C1094 +
           ((C43252 * C42675 + C43253 * C42676 + C43540 * C42677) * C47791 -
            (C43253 * C42677 + C43252 * C42676 +
             (C113 * C308 - C114 * C296 - C113 * C309 + C47890 * C326) *
                 C47633 * C42675) *
                C47943) *
               C1095 +
           (((C113 * C310 - C114 * C297 - C113 * C311 + C47890 * C327) *
                 C47633 * C42675 +
             C43541 * C42676 + C43542 * C42677) *
                C47943 -
            (C43550 * C42677 + C43542 * C42676 + C43541 * C42675) * C47791) *
               C47974) *
              C47928 +
          (((C42902 * C42675 + C42903 * C42676 + C42904 * C42677) * C47791 -
            (C42903 * C42677 + C42902 * C42676 + C174 * C47633 * C42675) *
                C47943) *
               C1094 +
           ((C372 * C47633 * C42675 + C43254 * C42676 + C43255 * C42677) *
                C47943 -
            (C12838 * C47633 * C42677 + C43255 * C42676 + C43254 * C42675) *
                C47791) *
               C1095 +
           ((C43795 * C42675 + C43796 * C42676 +
             (C113 * C7509 - C114 * C7506 - C113 * C7510 + C47890 * C7512) *
                 C47633 * C42677) *
                C47791 -
            (C43796 * C42677 + C43795 * C42676 + C373 * C47633 * C42675) *
                C47943) *
               C47974) *
              C47669)) /
            (p * q * std::sqrt(p + q));
    d2ee[224] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C122 - C114 * C115 - C113 * C123 + C47890 * C136) * C47633 *
               C42675 +
           C10876 * C47633 * C42676 + C10877 * C47633 * C42677) *
              C47704 * C47686 * C108 -
          (C568 * C47633 * C42677 + C567 * C47633 * C42676 +
           C174 * C47633 * C42675) *
              C47704 * C47686 * C109 +
          (C175 * C47633 * C42675 + C566 * C47633 * C42676 +
           C569 * C47633 * C42677) *
              C47704 * C47686 * C110 -
          (C571 * C47633 * C42677 + C570 * C47633 * C42676 +
           C176 * C47633 * C42675) *
              C47704 * C47686 * C111 +
          (C177 * C47633 * C42675 + C797 * C47633 * C42676 +
           (C113 * C517 - C114 * C498 - C113 * C518 + C47890 * C528) * C47633 *
               C42677) *
              C47704 * C47686 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C47890 * C136) * C47633 *
                C42675 +
            C10876 * C47633 * C42676 + C10877 * C47633 * C42677) *
               C47704 * C48013 -
           (C11749 * C47633 * C42677 + C11347 * C47633 * C42676 +
            (C113 * C308 - C114 * C296 - C113 * C309 + C47890 * C326) * C47633 *
                C42675) *
               C47704 * C48001 +
           ((C113 * C310 - C114 * C297 - C113 * C311 + C47890 * C327) * C47633 *
                C42675 +
            C11750 * C47633 * C42676 + C11752 * C47633 * C42677) *
               C47704 * C47974) *
              C291 +
          ((C372 * C47633 * C42675 + C982 * C47633 * C42676 +
            C2212 * C47633 * C42677) *
               C47704 * C48001 -
           (C568 * C47633 * C42677 + C567 * C47633 * C42676 +
            C174 * C47633 * C42675) *
               C47704 * C48013 -
           (C11751 * C47633 * C42677 + C1624 * C47633 * C42676 +
            C373 * C47633 * C42675) *
               C47704 * C47974) *
              C292 +
          ((C175 * C47633 * C42675 + C566 * C47633 * C42676 +
            C569 * C47633 * C42677) *
               C47704 * C48013 -
           (C2211 * C47633 * C42677 + C983 * C47633 * C42676 +
            C371 * C47633 * C42675) *
               C47704 * C48001 +
           (C374 * C47633 * C42675 + C1623 * C47633 * C42676 +
            (C113 * C1327 - C114 * C1310 - C113 * C1328 + C47890 * C1337) *
                C47633 * C42677) *
               C47704 * C47974) *
              C47968)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C47890 * C136) * C47633 *
                C42675 +
            C42899 * C42676 + C42900 * C42677) *
               C47704 * C1094 -
           (C43253 * C42677 + C43252 * C42676 +
            (C113 * C308 - C114 * C296 - C113 * C309 + C47890 * C326) * C47633 *
                C42675) *
               C47704 * C1095 +
           ((C113 * C310 - C114 * C297 - C113 * C311 + C47890 * C327) * C47633 *
                C42675 +
            C11750 * C47633 * C42676 + C11752 * C47633 * C42677) *
               C47704 * C47974) *
              C48010 +
          ((C372 * C47633 * C42675 + C43254 * C42676 + C43255 * C42677) *
               C47704 * C1095 -
           (C42903 * C42677 + C42902 * C42676 + C174 * C47633 * C42675) *
               C47704 * C1094 -
           (C11751 * C47633 * C42677 + C1624 * C47633 * C42676 +
            C373 * C47633 * C42675) *
               C47704 * C47974) *
              C47997 +
          ((C175 * C47633 * C42675 + C42905 * C42676 + C42906 * C42677) *
               C47704 * C1094 -
           (C43257 * C42677 + C43256 * C42676 + C371 * C47633 * C42675) *
               C47704 * C1095 +
           (C374 * C47633 * C42675 + C1623 * C47633 * C42676 +
            (C113 * C1327 - C114 * C1310 - C113 * C1328 + C47890 * C1337) *
                C47633 * C42677) *
               C47704 * C47974) *
              C47968)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C122 - C114 * C115 - C113 * C123 + C47890 * C136) * C47633 *
               C42675 +
           C42899 * C42676 + C42900 * C42677) *
              C47704 * C1162 -
          (C43253 * C42677 + C43252 * C42676 +
           (C113 * C308 - C114 * C296 - C113 * C309 + C47890 * C326) * C47633 *
               C42675) *
              C47704 * C1163 +
          ((C113 * C310 - C114 * C297 - C113 * C311 + C47890 * C327) * C47633 *
               C42675 +
           C11750 * C47633 * C42676 + C11752 * C47633 * C42677) *
              C47704 * C1164 -
          ((C113 * C6145 - C114 * C6143 - C113 * C6146 + C47890 * C6149) *
               C47633 * C42677 +
           C12227 * C47633 * C42676 +
           (C113 * C1178 - C114 * C1170 - C113 * C1179 + C47890 * C1188) *
               C47633 * C42675) *
              C47704 * C1165 +
          ((C113 * C1180 - C114 * C1171 - C113 * C1181 + C47890 * C1189) *
               C47633 * C42675 +
           (C113 * C6635 - C114 * C6633 - C113 * C6636 + C47890 * C6639) *
               C47633 * C42676 +
           (C113 * C22730 - C114 * C22729 - C113 * C22731 + C47890 * C22732) *
               C47633 * C42677) *
              C47704 * C1166) *
         C47658) /
            (p * q * std::sqrt(p + q));
}
