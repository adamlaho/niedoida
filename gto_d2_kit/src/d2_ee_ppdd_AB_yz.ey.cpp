/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

#include "gto_d2_kit/d2_ee_ppdd_AB_yz.hpp"
#include <cmath>
/*

*/
#pragma GCC optimize("O0")
namespace {
    const double Pi = M_PI;
}
#pragma GCC optimize("O0")

void second_derivative_ee_1122_12_23(const double ae,
                                     const double xA,
                                     const double yA,
                                     const double zA,
                                     const double be,
                                     const double xB,
                                     const double yB,
                                     const double zB,
                                     const double ce,
                                     const double xC,
                                     const double yC,
                                     const double zC,
                                     const double de,
                                     const double xD,
                                     const double yD,
                                     const double zD,
                                     const double* const bs,
                                     double* const d2ee)
{
    const double p = ae + be;
    const double q = ce + de;
    const double xP = (ae * xA + be * xB) / p;
    const double yP = (ae * yA + be * yB) / p;
    const double zP = (ae * zA + be * zB) / p;
    const double xQ = (ce * xC + de * xD) / q;
    const double yQ = (ce * yC + de * yD) / q;
    const double zQ = (ce * zC + de * zD) / q;
    const double C46271 = ae + be;
    const double C46270 = yA - yB;
    const double C46278 = zA - zB;
    const double C46292 = ae * be;
    const double C46290 = 0 * be;
    const double C46309 = 0 * be;
    const double C46323 = zP - zQ;
    const double C46322 = yP - yQ;
    const double C46321 = p + q;
    const double C46320 = p * q;
    const double C46332 = bs[4];
    const double C46330 = xP - xQ;
    const double C46337 = bs[5];
    const double C46344 = bs[6];
    const double C46352 = bs[7];
    const double C46366 = bs[3];
    const double C46732 = bs[2];
    const double C115 = bs[0];
    const double C47100 = xA - xB;
    const double C47119 = ce + de;
    const double C47118 = ce * de;
    const double C47117 = xC - xD;
    const double C47151 = yC - yD;
    const double C47169 = zC - zD;
    const double C46291 = std::pow(C46271, 2);
    const double C47110 = 2 * C46271;
    const double C47355 = std::pow(C46270, 2);
    const double C47437 = C46270 * be;
    const double C47435 = C46270 * ae;
    const double C47372 = std::pow(C46278, 2);
    const double C47438 = C46278 * be;
    const double C47436 = C46278 * ae;
    const double C46294 = C46292 * C46270;
    const double C46310 = C46292 * C46278;
    const double C46363 = C46323 * be;
    const double C46517 = std::pow(C46323, 2);
    const double C46325 = C46322 * C46323;
    const double C46404 = C46322 * ae;
    const double C46457 = std::pow(C46322, 2);
    const double C46324 = 2 * C46320;
    const double C46338 = std::pow(C46330, 2);
    const double C47101 = std::pow(C47100, 2);
    const double C47403 = C47100 * be;
    const double C47402 = C47100 * ae;
    const double C47123 = 2 * C47119;
    const double C47122 = std::pow(C47119, 2);
    const double C47124 = C47117 * de;
    const double C47121 = C47117 * ce;
    const double C47120 = std::pow(C47117, 2);
    const double C47152 = std::pow(C47151, 2);
    const double C47211 = C47151 * de;
    const double C47209 = C47151 * ce;
    const double C47170 = std::pow(C47169, 2);
    const double C47253 = C47169 * de;
    const double C47251 = C47169 * ce;
    const double C46293 = 2 * C46291;
    const double C136 = (std::pow((2 * p * q) / (p + q), 2) * bs[2] *
                         (yP - yQ) * (zP - zQ) * ae * be) /
                        C46291;
    const double C137 = ((xP - xQ) * std::pow(-(2 * p * q) / (p + q), 3) *
                         bs[3] * (yP - yQ) * (zP - zQ) * ae * be) /
                        C46291;
    const double C47404 = std::pow(C47110, -1);
    const double C47356 = C47355 * C46292;
    const double C47373 = C47372 * C46292;
    const double C46367 = C46366 * C46363;
    const double C46370 = C46332 * C46363;
    const double C46374 = C46337 * C46363;
    const double C46381 = C46344 * C46363;
    const double C46392 = C46352 * C46363;
    const double C46327 = C46325 * ae;
    const double C46406 = C46366 * C46404;
    const double C46409 = C46332 * C46404;
    const double C46413 = C46337 * C46404;
    const double C46420 = C46344 * C46404;
    const double C46431 = C46352 * C46404;
    const double C46326 = C46324 / C46321;
    const double C122 = (-(bs[1] * C46363 * C46324) / C46321) / C46271;
    const double C123 = (-(bs[1] * C46404 * C46324) / C46321) / C46271;
    const double C116 = -(C46330 * bs[1] * C46324) / C46321;
    const double C294 = -(C46322 * bs[1] * C46324) / C46321;
    const double C481 = -(C46323 * bs[1] * C46324) / C46321;
    const double C47102 = C47101 * C46292;
    const double C47136 = std::pow(C47123, -1);
    const double C47412 = std::pow(C47123, -2);
    const double C47137 = 2 * C47122;
    const double C47416 = C47122 * C47123;
    const double C47415 = 4 * C47122;
    const double C47405 = std::pow(C47121, 2);
    const double C47125 = C47120 * C47118;
    const double C47153 = C47152 * C47118;
    const double C47417 = std::pow(C47209, 2);
    const double C47171 = C47170 * C47118;
    const double C47419 = std::pow(C47251, 2);
    const double C47357 = C47356 / C46271;
    const double C47374 = C47373 / C46271;
    const double C46328 = C46327 * be;
    const double C46331 = std::pow(C46326, 4);
    const double C46336 = -C46326;
    const double C46343 = std::pow(C46326, 6);
    const double C46731 = std::pow(C46326, 2);
    const double C124 =
        (C46330 * std::pow(C46326, 2) * bs[2] * C46363) / C46271;
    const double C125 =
        (C46330 * std::pow(C46326, 2) * bs[2] * C46404) / C46271;
    const double C304 =
        (C46322 * std::pow(C46326, 2) * bs[2] * C46363) / C46271;
    const double C305 =
        (C46322 * std::pow(C46326, 2) * bs[2] * C46404) / C46271 -
        (ae * bs[1] * C46324) / (C46321 * C46271);
    const double C47103 = C47102 / C46271;
    const double C47450 = 4 * C47416;
    const double C47449 = C47119 * C47415;
    const double C47126 = C47125 / C47119;
    const double C47154 = C47153 / C47119;
    const double C47172 = C47171 / C47119;
    const double C47358 = -C47357;
    const double C47375 = -C47374;
    const double C46333 = C46332 * C46328;
    const double C46340 = C46337 * C46328;
    const double C46345 = C46344 * C46328;
    const double C46354 = C46352 * C46328;
    const double C138 =
        (std::pow(-C46326, 3) * bs[3] * C46328 +
         std::pow(C46326, 4) * bs[4] * C46328 * std::pow(xP - xQ, 2)) /
        C46291;
    const double C46371 = C46331 * C46370;
    const double C46410 = C46331 * C46409;
    const double C46446 = C46332 * C46331;
    const double C46339 = std::pow(C46336, 5);
    const double C46351 = std::pow(C46336, 7);
    const double C46365 = std::pow(C46336, 3);
    const double C324 = (ae * std::pow(C46326, 2) * bs[2] * C46323 * be +
                         C46322 * std::pow(C46336, 3) * bs[3] * C46328) /
                        C46291;
    const double C46383 = C46343 * C46381;
    const double C46422 = C46343 * C46420;
    const double C46491 = C46344 * C46343;
    const double C46733 = C46732 * C46731;
    const double C491 = (C46323 * C46731 * C46732 * C46363) / C46271 -
                        (be * bs[1] * C46324) / (C46321 * C46271);
    const double C492 = (C46323 * C46731 * C46732 * C46404) / C46271;
    const double C47104 = -C47103;
    const double C47127 = -C47126;
    const double C47155 = -C47154;
    const double C47173 = -C47172;
    const double C47359 = std::exp(C47358);
    const double C47376 = std::exp(C47375);
    const double C46334 = C46331 * C46333;
    const double C46346 = C46343 * C46345;
    const double C46372 = C46330 * C46371;
    const double C46455 = ae * C46371;
    const double C46454 = C46322 * C46371;
    const double C46854 = C46323 * C46371;
    const double C46411 = C46330 * C46410;
    const double C46501 = be * C46410;
    const double C46516 = C46323 * C46410;
    const double C46797 = C46322 * C46410;
    const double C46478 = C46330 * C46446;
    const double C46486 = C46322 * C46446;
    const double C46591 = C46446 * be;
    const double C46604 = C46323 * C46446;
    const double C46739 = C46446 * C46338;
    const double C46800 = C46446 * C46457;
    const double C46857 = C46446 * C46517;
    const double C46891 = C46446 * ae;
    const double C46341 = C46339 * C46340;
    const double C46375 = C46339 * C46374;
    const double C46414 = C46339 * C46413;
    const double C46448 = C46337 * C46339;
    const double C46355 = C46351 * C46354;
    const double C46394 = C46351 * C46392;
    const double C46433 = C46351 * C46431;
    const double C46368 = C46365 * C46367;
    const double C46407 = C46365 * C46406;
    const double C46476 = C46366 * C46365;
    const double C511 = (be * std::pow(C46326, 2) * bs[2] * C46322 * ae +
                         C46323 * C46365 * C46366 * C46328) /
                        C46291;
    const double C46384 = C46383 * C46338;
    const double C46391 = C46330 * C46383;
    const double C46537 = C46383 * C46457;
    const double C46629 = ae * C46383;
    const double C46628 = C46322 * C46383;
    const double C46648 = C46323 * C46383;
    const double C46423 = C46422 * C46338;
    const double C46430 = C46330 * C46422;
    const double C46606 = C46422 * C46517;
    const double C46652 = be * C46422;
    const double C46651 = C46323 * C46422;
    const double C46961 = C46322 * C46422;
    const double C46492 = C46491 * C46338;
    const double C46579 = C46330 * C46491;
    const double C46656 = C46322 * C46491;
    const double C46655 = C46491 * C46457;
    const double C46687 = C46491 * C46517;
    const double C117 = C46733 * C46338 - (bs[1] * C46324) / C46321;
    const double C295 = C46322 * C46330 * C46733;
    const double C297 = C46733 * C46457 - (bs[1] * C46324) / C46321;
    const double C482 = C46323 * C46330 * C46733;
    const double C484 = C46733 * C46517 - (bs[1] * C46324) / C46321;
    const double C931 = C46323 * C46322 * C46733;
    const double C47105 = std::exp(C47104);
    const double C47128 = std::exp(C47127);
    const double C47156 = std::exp(C47155);
    const double C47174 = std::exp(C47173);
    const double C46295 = C46294 * C47359;
    const double C114 = -(2 * ae * be * (yA - yB) * C47359) / (ae + be);
    const double C4747 =
        ((C47359 - (C46270 * 2 * ae * be * C46270 * C47359) / C46271) * ae) /
            C46271 -
        (0 * be) / (2 * std::pow(C46271, 2));
    const double C4748 =
        (0 * ae) / C46271 - (ae * be * C46270 * C47359) / std::pow(C46271, 2);
    const double C15949 =
        (-(0 * be) / C46271) / (2 * C46271) -
        ((C47359 - (C46270 * 2 * ae * be * C46270 * C47359) / C46271) * be) /
            C46271;
    const double C15950 =
        (-(2 * ae * be * C46270 * C47359) / C46271) / (2 * C46271) -
        (0 * be) / C46271;
    const double C47471 = C47404 * C47359;
    const double C47470 = C47359 * C47435;
    const double C15945 = -(C47359 * C47437) / C46271;
    const double C150 = C47376 * C138;
    const double C146 = C47376 * C137;
    const double C144 = C47376 * C124;
    const double C4898 = C47376 * C324;
    const double C4896 = C47376 * C304;
    const double C46311 = C46310 * C47376;
    const double C113 = -(2 * ae * be * (zA - zB) * C47376) / (ae + be);
    const double C10327 =
        ((C47376 - (C46278 * 2 * ae * be * C46278 * C47376) / C46271) * ae) /
            C46271 -
        (0 * be) / (2 * std::pow(C46271, 2));
    const double C10328 =
        (0 * ae) / C46271 - (ae * be * C46278 * C47376) / std::pow(C46271, 2);
    const double C31092 =
        (-(0 * be) / C46271) / (2 * C46271) -
        ((C47376 - (C46278 * 2 * C46292 * C46278 * C47376) / C46271) * be) /
            C46271;
    const double C31093 =
        (-(2 * C46292 * C46278 * C47376) / C46271) / (2 * C46271) -
        (0 * be) / C46271;
    const double C47473 = C47404 * C47376;
    const double C47472 = C47376 * C47436;
    const double C31090 = -(C47376 * C47438) / C46271;
    const double C139 = (2 * C46330 * C46334 +
                         C46330 * (C46334 + std::pow(-C46326, 5) * bs[5] *
                                                C46328 * std::pow(C46330, 2))) /
                        C46291;
    const double C325 =
        (ae * C46330 * std::pow(C46336, 3) * bs[3] * C46323 * be +
         C46322 * C46330 * C46334) /
        C46291;
    const double C512 = (be * C46330 * C46365 * C46366 * C46322 * ae +
                         C46323 * C46330 * C46334) /
                        C46291;
    const double C46347 = C46346 * C46338;
    const double C46350 = C46330 * C46346;
    const double C46536 = C46322 * C46346;
    const double C46566 = C46323 * C46346;
    const double C46745 = 2 * C46478;
    const double C46807 = C46322 * C46478;
    const double C46806 = C46478 * ae;
    const double C46864 = C46323 * C46478;
    const double C46863 = C46478 * be;
    const double C46893 = 2 * C46486;
    const double C46892 = C46486 * ae;
    const double C46923 = C46323 * C46486;
    const double C46922 = C46486 * be;
    const double C46943 = 2 * C46604;
    const double C46942 = C46604 * be;
    const double C46451 = C46330 * C46341;
    const double C46456 = C46322 * C46341;
    const double C46502 = C46323 * C46341;
    const double C140 =
        (3 * (C46334 + C46341 * C46338) +
         C46330 * (2 * C46330 * C46341 +
                   C46330 * (C46341 +
                             std::pow(C46326, 6) * bs[6] * C46328 * C46338))) /
        C46291;
    const double C326 = (ae * (std::pow(C46336, 3) * bs[3] * C46363 +
                               C46331 * C46332 * C46363 * C46338) +
                         C46322 * (C46334 + C46341 * C46338)) /
                        C46291;
    const double C328 = (C46330 * C46334 + ae * C46322 * C46372 +
                         C46322 * (ae * C46372 + C46322 * C46330 * C46341)) /
                        C46291;
    const double C513 =
        (be * (C46365 * C46366 * C46404 + C46331 * C46332 * C46404 * C46338) +
         C46323 * (C46334 + C46341 * C46338)) /
        C46291;
    const double C515 = (C46330 * C46334 + be * C46323 * C46411 +
                         C46323 * (be * C46411 + C46323 * C46330 * C46341)) /
                        C46291;
    const double C947 =
        (ae * (C46323 * C46372 + C46330 * C46366 * C46365 * be) +
         C46322 * (be * C46411 + C46323 * C46330 * C46341)) /
        C46291;
    const double C46376 = C46375 * C46338;
    const double C46380 = C46330 * C46375;
    const double C46459 = C46375 * C46457;
    const double C46535 = ae * C46375;
    const double C46534 = C46322 * C46375;
    const double C46590 = C46323 * C46375;
    const double C46415 = C46414 * C46338;
    const double C46419 = C46330 * C46414;
    const double C46518 = C46414 * C46517;
    const double C46565 = be * C46414;
    const double C46564 = C46323 * C46414;
    const double C1319 =
        (C46334 + be * C46323 * C46410 +
         C46323 * (be * C46410 + C46323 * C46341) +
         ae * (C46454 + C46323 * (C46323 * C46322 * C46375 + C46486 * be) +
               C46323 * C46486 * be) +
         C46322 * (ae * (C46371 + C46323 * (C46323 * C46375 + C46446 * be) +
                         C46323 * C46446 * be) +
                   C46322 * (C46341 + be * C46323 * C46414 +
                             C46323 * (be * C46414 + C46323 * C46346)))) /
        C46291;
    const double C46890 = C46322 * C46414;
    const double C46480 = C46448 * C46338;
    const double C46488 = C46330 * C46448;
    const double C46568 = C46322 * C46448;
    const double C46567 = C46448 * C46457;
    const double C46605 = C46448 * C46517;
    const double C46650 = C46323 * C46448;
    const double C46649 = C46448 * be;
    const double C46962 = C46448 * ae;
    const double C46356 = C46355 * C46338;
    const double C46550 = C46330 * C46355;
    const double C46630 = C46322 * C46355;
    const double C46653 = C46323 * C46355;
    const double C46395 = C46394 * C46338;
    const double C46551 = C46330 * C46394;
    const double C46632 = C46394 * C46457;
    const double C46434 = C46433 * C46338;
    const double C46580 = C46330 * C46433;
    const double C46688 = C46433 * C46517;
    const double C327 = (C46365 * C46366 * C46328 + ae * C46322 * C46368 +
                         C46322 * (ae * C46368 + C46322 * C46334)) /
                        C46291;
    const double C1170 = (2 * (ae * C46368 + C46322 * C46334) +
                          ae * (C46368 + C46371 * std::pow(C46322, 2)) +
                          C46322 * (C46334 + ae * C46322 * C46371 +
                                    C46322 * (ae * C46371 + C46322 * C46341))) /
                         C46291;
    const double C126 =
        (std::pow(C46326, 2) * bs[2] * C46363 + C46368 * C46338) / C46271;
    const double C128 =
        (2 * C46330 * C46368 + C46330 * (C46368 + C46371 * C46338)) / C46271;
    const double C306 = (C46322 * C46330 * C46368) / C46271;
    const double C308 = (C46322 * (C46368 + C46371 * C46338)) / C46271;
    const double C310 =
        (std::pow(C46326, 2) * bs[2] * C46363 + C46368 * C46457) / C46271;
    const double C312 = (C46330 * C46368 + C46372 * C46457) / C46271;
    const double C493 =
        (C46323 * C46330 * C46368 + C46330 * C46733 * be) / C46271;
    const double C497 =
        (C46731 * C46732 * C46363 + C46323 * (C46323 * C46368 + C46733 * be) +
         C46323 * C46733 * be) /
        C46271;
    const double C936 =
        (C46323 * C46322 * C46368 + C46322 * C46733 * be) / C46271;
    const double C1158 =
        (2 * C46322 * C46368 + C46322 * (C46368 + C46371 * C46457)) / C46271;
    const double C514 = (C46365 * C46366 * C46328 + be * C46323 * C46407 +
                         C46323 * (be * C46407 + C46323 * C46334)) /
                        C46291;
    const double C946 =
        (ae * (C46323 * C46368 + bs[2] * std::pow(C46326, 2) * be) +
         C46322 * (be * C46407 + C46323 * C46334)) /
        C46291;
    const double C127 =
        (std::pow(C46326, 2) * bs[2] * C46404 + C46407 * C46338) / C46271;
    const double C129 =
        (2 * C46330 * C46407 + C46330 * (C46407 + C46410 * C46338)) / C46271;
    const double C307 =
        (C46322 * C46330 * C46407 + C46330 * bs[2] * std::pow(C46326, 2) * ae) /
        C46271;
    const double C311 =
        (C46731 * C46732 * C46404 + C46322 * (C46322 * C46407 + C46733 * ae) +
         C46322 * C46733 * ae) /
        C46271;
    const double C494 = (C46323 * C46330 * C46407) / C46271;
    const double C496 = (C46323 * (C46407 + C46410 * C46338)) / C46271;
    const double C498 = (C46731 * C46732 * C46404 + C46407 * C46517) / C46271;
    const double C500 = (C46330 * C46407 + C46411 * C46517) / C46271;
    const double C937 = (C46323 * (C46322 * C46407 + C46733 * ae)) / C46271;
    const double C2003 =
        (2 * C46323 * C46407 + C46323 * (C46407 + C46410 * C46517)) / C46271;
    const double C1313 =
        (ae * (C46368 + C46323 * (C46323 * C46371 + C46476 * be) +
               C46323 * C46476 * be) +
         C46322 * (C46334 + be * C46323 * C46410 +
                   C46323 * (be * C46410 + C46323 * C46341))) /
        C46291;
    const double C1316 = (be * C46407 + C46323 * C46334 +
                          ae * (C46323 * C46454 + C46322 * C46476 * be) +
                          C46322 * (ae * (C46323 * C46371 + C46476 * be) +
                                    C46322 * (be * C46410 + C46323 * C46341))) /
                         C46291;
    const double C46736 = C46330 * C46476;
    const double C46740 = C46476 + C46739;
    const double C46799 = C46322 * C46476;
    const double C46798 = C46476 * ae;
    const double C46802 = C46476 + C46800;
    const double C46856 = C46323 * C46476;
    const double C46855 = C46476 * be;
    const double C46859 = C46476 + C46857;
    const double C309 = (C46322 * (C46407 + C46410 * C46338) +
                         (bs[2] * std::pow(C46326, 2) + C46476 * C46338) * ae) /
                        C46271;
    const double C495 = (C46323 * (C46368 + C46371 * C46338) +
                         (C46733 + C46476 * C46338) * be) /
                        C46271;
    const double C1159 =
        (2 * (C46322 * C46407 + C46733 * ae) +
         C46322 * (C46407 + C46322 * (C46322 * C46410 + C46476 * ae) +
                   C46322 * C46476 * ae) +
         (C46733 + C46476 * C46457) * ae) /
        C46271;
    const double C1301 = (C46323 * (C46368 + C46371 * C46457) +
                          (C46733 + C46476 * C46457) * be) /
                         C46271;
    const double C2002 =
        (2 * (C46323 * C46368 + C46733 * be) +
         C46323 * (C46368 + C46323 * (C46323 * C46371 + C46476 * be) +
                   C46323 * C46476 * be) +
         (C46733 + C46476 * C46517) * be) /
        C46271;
    const double C118 =
        2 * C46330 * C46733 + C46330 * (C46733 + C46476 * C46338);
    const double C296 = C46322 * (C46733 + C46476 * C46338);
    const double C483 = C46323 * (C46733 + C46476 * C46338);
    const double C1152 =
        2 * C46322 * C46733 + C46322 * (C46733 + C46476 * C46457);
    const double C1289 = C46323 * (C46733 + C46476 * C46457);
    const double C1996 =
        2 * C46323 * C46733 + C46323 * (C46733 + C46476 * C46517);
    const double C46385 = C46375 + C46384;
    const double C46393 = 2 * C46391;
    const double C46465 = C46391 * C46457;
    const double C46549 = ae * C46391;
    const double C46548 = C46322 * C46391;
    const double C46597 = C46323 * C46391;
    const double C46541 = C46375 + C46537;
    const double C46636 = 2 * C46628;
    const double C46634 = ae * C46628;
    const double C46674 = C46323 * C46628;
    const double C46424 = C46414 + C46423;
    const double C46432 = 2 * C46430;
    const double C46522 = C46430 * C46517;
    const double C46577 = be * C46430;
    const double C46576 = C46323 * C46430;
    const double C46902 = C46322 * C46430;
    const double C46608 = C46414 + C46606;
    const double C46659 = be * C46651;
    const double C46701 = 2 * C46651;
    const double C46493 = C46448 + C46492;
    const double C46584 = C46322 * C46579;
    const double C46583 = C46579 * C46457;
    const double C46611 = C46579 * C46517;
    const double C46686 = C46656 * C46517;
    const double C46661 = C46448 + C46655;
    const double C46690 = C46448 + C46687;
    const double C47440 = C47404 * C47105;
    const double C47439 = C47105 * C47402;
    const double C4745 = -(C47105 * C47403) / C46271;
    const double C47130 = C47128 * C47121;
    const double C47129 = C47128 / C47123;
    const double C47139 = C47136 * C47128;
    const double C47408 = C47128 * C47124;
    const double C47447 = C47412 * C47128;
    const double C47441 = C47128 * C47405;
    const double C47210 = C47156 / C47123;
    const double C47212 = C47156 * C47209;
    const double C47219 = C47136 * C47156;
    const double C47423 = C47156 * C47211;
    const double C47453 = C47412 * C47156;
    const double C47451 = C47156 * C47417;
    const double C47252 = C47174 / C47123;
    const double C47254 = C47174 * C47251;
    const double C47261 = C47136 * C47174;
    const double C47429 = C47174 * C47253;
    const double C47456 = C47412 * C47174;
    const double C47454 = C47174 * C47419;
    const double C21385 = ((0 * ae) / C46271 - C46295 / C46291) / (2 * C46271) -
                          (0 * be) / C46271;
    const double C21384 =
        (((C47359 - (C46270 * 2 * C46295) / C46271) * ae) / C46271 -
         C46290 / C46293) /
            (2 * C46271) -
        ((C46270 * ((0 * ae) / C46271 - C46295 / C46291) + C47471) * be) /
            C46271;
    const double C21381 = C47471 / C47110;
    const double C4743 = C47470 / C46271;
    const double C21379 = C47359 / C47110 - (C47470 * C47437) / C46291;
    const double C21380 = C47470 / C46293 - (C47471 * C47437) / C46271;
    const double C42215 = ((0 * ae) / C46271 - C46311 / C46291) / (2 * C46271) -
                          (0 * be) / C46271;
    const double C149 = C113 * C117;
    const double C147 = C113 * C125;
    const double C145 = C113 * C116;
    const double C335 = C113 * C295;
    const double C522 = C113 * C482;
    const double C4902 = C113 * C297;
    const double C4899 = C113 * C305;
    const double C4897 = C113 * C294;
    const double C5518 = C113 * C931;
    const double C10338 = C10327 * C117;
    const double C10335 = C10327 * C125;
    const double C10331 = C10327 * C116;
    const double C10508 = C10327 * C295;
    const double C10686 = C10327 * C482;
    const double C25713 = C10327 * C297;
    const double C25710 = C10327 * C305;
    const double C25706 = C10327 * C294;
    const double C26321 = C10327 * C931;
    const double C10333 = C10328 * C482;
    const double C25708 = C10328 * C931;
    const double C31103 = C31092 * C117;
    const double C31100 = C31092 * C125;
    const double C31096 = C31092 * C116;
    const double C31273 = C31092 * C295;
    const double C31451 = C31092 * C482;
    const double C36857 = C31092 * C297;
    const double C36854 = C31092 * C305;
    const double C36850 = C31092 * C294;
    const double C37465 = C31092 * C931;
    const double C31098 = C31093 * C482;
    const double C36852 = C31093 * C931;
    const double C42214 =
        (((C47376 - (C46278 * 2 * C46311) / C46271) * ae) / C46271 -
         C46309 / C46293) /
            (2 * C46271) -
        ((C46278 * ((0 * ae) / C46271 - C46311 / C46291) + C47473) * be) /
            C46271;
    const double C42212 = C47473 / C47110;
    const double C10325 = C47472 / C46271;
    const double C42210 = C47376 / C47110 - (C47472 * C47438) / C46291;
    const double C42211 = C47472 / C46293 - (C47473 * C47438) / C46271;
    const double C31108 = C31090 * C138;
    const double C31099 = C31090 * C137;
    const double C31095 = C31090 * C124;
    const double C36853 = C31090 * C324;
    const double C36849 = C31090 * C304;
    const double C155 = C47376 * C139;
    const double C31115 = C31090 * C139;
    const double C338 = C47376 * C325;
    const double C31278 = C31090 * C325;
    const double C525 = C47376 * C512;
    const double C10336 = C47473 * C512;
    const double C31101 = C47473 * C512;
    const double C31456 = C31090 * C512;
    const double C46348 = C46341 + C46347;
    const double C46353 = 2 * C46350;
    const double C46464 = C46322 * C46350;
    const double C46506 = C46323 * C46350;
    const double C46458 = C46455 + C46456;
    const double C46503 = C46501 + C46502;
    const double C158 = C47376 * C140;
    const double C31124 = C31090 * C140;
    const double C342 = C47376 * C326;
    const double C31293 = C31090 * C326;
    const double C345 = C47376 * C328;
    const double C31285 = C31090 * C328;
    const double C529 = C47376 * C513;
    const double C10345 = C47473 * C513;
    const double C31110 = C47473 * C513;
    const double C31471 = C31090 * C513;
    const double C532 = C47376 * C515;
    const double C10693 = C47473 * C515;
    const double C31463 = C31090 * C515;
    const double C31458 = C47473 * C515;
    const double C954 = C47376 * C947;
    const double C10515 = C47473 * C947;
    const double C31280 = C47473 * C947;
    const double C31957 = C31090 * C947;
    const double C46377 = C46371 + C46376;
    const double C46382 = 2 * C46380;
    const double C46463 = ae * C46380;
    const double C46462 = C46322 * C46380;
    const double C1171 = (2 * (ae * C46372 + C46322 * C46451) +
                          ae * (C46372 + C46380 * std::pow(C46322, 2)) +
                          C46322 * (C46451 + ae * C46322 * C46380 +
                                    C46322 * (ae * C46380 + C46322 * C46350))) /
                         C46291;
    const double C46862 = C46323 * C46380;
    const double C1160 =
        (2 * C46322 * C46372 + C46322 * (C46372 + C46380 * C46457)) / C46271;
    const double C46460 = C46371 + C46459;
    const double C46539 = C46535 + C46536;
    const double C46540 = 2 * C46534;
    const double C46538 = ae * C46534;
    const double C46921 = C46323 * C46534;
    const double C46593 = C46590 + C46591;
    const double C46416 = C46410 + C46415;
    const double C46421 = 2 * C46419;
    const double C46505 = be * C46419;
    const double C46521 = C46323 * C46419;
    const double C1314 =
        (ae * (C46372 + C46323 * (C46323 * C46380 + C46478 * be) +
               C46323 * C46478 * be) +
         C46322 * (C46451 + be * C46323 * C46419 +
                   C46323 * (be * C46419 + C46323 * C46350))) /
        C46291;
    const double C46805 = C46322 * C46419;
    const double C2005 =
        (2 * C46323 * C46411 + C46323 * (C46411 + C46419 * C46517)) / C46271;
    const double C46519 = C46410 + C46518;
    const double C46570 = C46565 + C46566;
    const double C46569 = be * C46564;
    const double C46618 = 2 * C46564;
    const double C5941 = C47376 * C1319;
    const double C26733 = C47473 * C1319;
    const double C37884 = C31090 * C1319;
    const double C37877 = C47473 * C1319;
    const double C46895 = C46890 + C46891;
    const double C46481 = C46446 + C46480;
    const double C46489 = C46322 * C46488;
    const double C46497 = 2 * C46488;
    const double C46598 = C46488 * be;
    const double C46610 = C46323 * C46488;
    const double C46808 = C46488 * C46457;
    const double C46865 = C46488 * C46517;
    const double C46903 = C46488 * ae;
    const double C46654 = 2 * C46568;
    const double C46675 = C46568 * be;
    const double C46685 = C46323 * C46568;
    const double C46924 = C46568 * C46517;
    const double C46963 = C46568 * ae;
    const double C46571 = C46446 + C46567;
    const double C46607 = C46446 + C46605;
    const double C46658 = C46650 * be;
    const double C46699 = 2 * C46650;
    const double C46657 = C46648 + C46649;
    const double C46967 = C46961 + C46962;
    const double C46357 = C46346 + C46356;
    const double C46553 = C46322 * C46550;
    const double C46578 = C46323 * C46550;
    const double C46635 = C46629 + C46630;
    const double C46660 = C46652 + C46653;
    const double C46396 = C46383 + C46395;
    const double C46555 = C46551 * C46457;
    const double C46637 = C46383 + C46632;
    const double C46435 = C46422 + C46434;
    const double C46612 = C46580 * C46517;
    const double C46691 = C46422 + C46688;
    const double C4905 = C47376 * C327;
    const double C36862 = C31090 * C327;
    const double C5766 = C47376 * C1170;
    const double C37705 = C31090 * C1170;
    const double C148 = C47376 * C126;
    const double C31104 = C31090 * C126;
    const double C153 = C47376 * C128;
    const double C31111 = C31090 * C128;
    const double C336 = C47376 * C306;
    const double C31274 = C31090 * C306;
    const double C340 = C47376 * C308;
    const double C31289 = C31090 * C308;
    const double C4903 = C47376 * C310;
    const double C36858 = C31090 * C310;
    const double C343 = C47376 * C312;
    const double C31281 = C31090 * C312;
    const double C523 = C47376 * C493;
    const double C10332 = C47473 * C493;
    const double C31097 = C47473 * C493;
    const double C31452 = C31090 * C493;
    const double C5519 = C47376 * C936;
    const double C25707 = C47473 * C936;
    const double C36851 = C47473 * C936;
    const double C37466 = C31090 * C936;
    const double C5764 = C47376 * C1158;
    const double C37701 = C31090 * C1158;
    const double C5521 = C47376 * C946;
    const double C25711 = C47473 * C946;
    const double C36855 = C47473 * C946;
    const double C37470 = C31090 * C946;
    const double C151 = C113 * C127;
    const double C10342 = C10327 * C127;
    const double C31107 = C31092 * C127;
    const double C154 = C113 * C129;
    const double C10351 = C10327 * C129;
    const double C31116 = C31092 * C129;
    const double C337 = C113 * C307;
    const double C10512 = C10327 * C307;
    const double C31277 = C31092 * C307;
    const double C4904 = C113 * C311;
    const double C25717 = C10327 * C311;
    const double C36861 = C31092 * C311;
    const double C524 = C113 * C494;
    const double C10337 = C10328 * C494;
    const double C10690 = C10327 * C494;
    const double C31102 = C31093 * C494;
    const double C31455 = C31092 * C494;
    const double C528 = C113 * C496;
    const double C10344 = C10328 * C496;
    const double C10707 = C10327 * C496;
    const double C31109 = C31093 * C496;
    const double C31472 = C31092 * C496;
    const double C533 = C113 * C500;
    const double C10699 = C10327 * C500;
    const double C10692 = C10328 * C500;
    const double C31464 = C31092 * C500;
    const double C31457 = C31093 * C500;
    const double C5520 = C113 * C937;
    const double C25712 = C10328 * C937;
    const double C26325 = C10327 * C937;
    const double C36856 = C31093 * C937;
    const double C37469 = C31092 * C937;
    const double C5932 = C47376 * C1313;
    const double C26328 = C47473 * C1313;
    const double C37472 = C47473 * C1313;
    const double C37867 = C31090 * C1313;
    const double C5936 = C47376 * C1316;
    const double C25720 = C47473 * C1316;
    const double C36864 = C47473 * C1316;
    const double C37875 = C31090 * C1316;
    const double C313 =
        (C46330 * C46407 + C46322 * (C46322 * C46411 + C46736 * ae) +
         C46322 * C46736 * ae) /
        C46271;
    const double C499 =
        (C46330 * C46368 + C46323 * (C46323 * C46372 + C46736 * be) +
         C46323 * C46736 * be) /
        C46271;
    const double C938 =
        (C46323 * C46322 * C46372 + C46322 * C46736 * be) / C46271;
    const double C939 = (C46323 * (C46322 * C46411 + C46736 * ae)) / C46271;
    const double C1161 =
        (2 * (C46322 * C46411 + C46736 * ae) +
         C46322 * (C46411 + C46322 * (C46322 * C46419 + C46478 * ae) +
                   C46322 * C46478 * ae) +
         (C46736 + C46478 * C46457) * ae) /
        C46271;
    const double C1303 = (C46323 * (C46372 + C46380 * C46457) +
                          (C46736 + C46478 * C46457) * be) /
                         C46271;
    const double C2004 =
        (2 * (C46323 * C46372 + C46736 * be) +
         C46323 * (C46372 + C46323 * (C46323 * C46380 + C46478 * be) +
                   C46323 * C46478 * be) +
         (C46736 + C46478 * C46517) * be) /
        C46271;
    const double C298 = C46330 * C46733 + C46736 * C46457;
    const double C485 = C46330 * C46733 + C46736 * C46517;
    const double C932 = C46323 * C46322 * C46736;
    const double C1153 =
        2 * C46322 * C46736 + C46322 * (C46736 + C46478 * C46457);
    const double C1287 = C46322 * C46736 + C46807 * C46517;
    const double C1290 = C46323 * (C46736 + C46478 * C46457);
    const double C1997 =
        2 * C46323 * C46736 + C46323 * (C46736 + C46478 * C46517);
    const double C119 = 3 * (C46733 + C46476 * C46338) +
                        C46330 * (2 * C46736 + C46330 * C46740);
    const double C299 = C46733 + C46476 * C46338 + C46740 * C46457;
    const double C300 = C46322 * (2 * C46736 + C46330 * C46740);
    const double C486 = C46733 + C46476 * C46338 + C46740 * C46517;
    const double C487 = C46323 * (2 * C46736 + C46330 * C46740);
    const double C933 = C46323 * C46322 * C46740;
    const double C1295 =
        (C46322 * C46368 + C46323 * (C46323 * C46454 + C46799 * be) +
         C46323 * C46799 * be) /
        C46271;
    const double C2393 =
        (2 * (C46323 * C46454 + C46799 * be) +
         C46323 * (C46454 + C46323 * (C46323 * C46534 + C46486 * be) +
                   C46323 * C46486 * be) +
         (C46799 + C46486 * C46517) * be) /
        C46271;
    const double C1286 = C46322 * C46733 + C46799 * C46517;
    const double C2390 =
        2 * C46323 * C46799 + C46323 * (C46799 + C46486 * C46517);
    const double C46801 = C46797 + C46798;
    const double C1155 = 3 * (C46733 + C46476 * C46457) +
                         C46322 * (2 * C46799 + C46322 * C46802);
    const double C1292 = C46733 + C46476 * C46457 + C46802 * C46517;
    const double C1694 = C46323 * (2 * C46799 + C46322 * C46802);
    const double C46858 = C46854 + C46855;
    const double C1999 = 3 * (C46733 + C46476 * C46517) +
                         C46323 * (2 * C46856 + C46323 * C46859);
    const double C341 = C113 * C309;
    const double C10529 = C10327 * C309;
    const double C31294 = C31092 * C309;
    const double C527 = C47376 * C495;
    const double C10341 = C47473 * C495;
    const double C31106 = C47473 * C495;
    const double C31467 = C31090 * C495;
    const double C5767 = C113 * C1159;
    const double C26562 = C10327 * C1159;
    const double C37706 = C31092 * C1159;
    const double C5934 = C47376 * C1301;
    const double C25716 = C47473 * C1301;
    const double C36860 = C47473 * C1301;
    const double C37871 = C31090 * C1301;
    const double C152 = C113 * C118;
    const double C10347 = C10327 * C118;
    const double C31112 = C31092 * C118;
    const double C339 = C113 * C296;
    const double C10525 = C10327 * C296;
    const double C31290 = C31092 * C296;
    const double C526 = C113 * C483;
    const double C10340 = C10328 * C483;
    const double C10703 = C10327 * C483;
    const double C31105 = C31093 * C483;
    const double C31468 = C31092 * C483;
    const double C5765 = C113 * C1152;
    const double C26558 = C10327 * C1152;
    const double C37702 = C31092 * C1152;
    const double C5935 = C113 * C1289;
    const double C25715 = C10328 * C1289;
    const double C26728 = C10327 * C1289;
    const double C36859 = C31093 * C1289;
    const double C37872 = C31092 * C1289;
    const double C46386 = C46330 * C46385;
    const double C46390 = 3 * C46385;
    const double C46470 = ae * C46385;
    const double C46469 = C46322 * C46385;
    const double C46870 = C46323 * C46385;
    const double C46467 = C46380 + C46465;
    const double C46554 = 2 * C46548;
    const double C46552 = ae * C46548;
    const double C46929 = C46323 * C46548;
    const double C46544 = C46322 * C46541;
    const double C46631 = 3 * C46541;
    const double C46627 = ae * C46541;
    const double C46980 = C46323 * C46541;
    const double C46638 = C46346 + C46634;
    const double C46425 = C46330 * C46424;
    const double C46429 = 3 * C46424;
    const double C46509 = be * C46424;
    const double C46525 = C46323 * C46424;
    const double C46813 = C46322 * C46424;
    const double C46523 = C46419 + C46522;
    const double C46581 = be * C46576;
    const double C46622 = 2 * C46576;
    const double C46619 = C46323 * C46608;
    const double C46694 = be * C46608;
    const double C46706 = 3 * C46608;
    const double C46663 = C46346 + C46659;
    const double C46494 = C46322 * C46493;
    const double C46498 = C46330 * C46493;
    const double C46816 = C46493 * C46457;
    const double C46873 = C46493 * C46517;
    const double C46932 = C46584 * C46517;
    const double C46587 = C46488 + C46583;
    const double C46613 = C46488 + C46611;
    const double C46689 = C46568 + C46686;
    const double C46665 = C46322 * C46661;
    const double C46983 = C46661 * C46517;
    const double C46700 = C46323 * C46690;
    const double C105 = C47440 / C47110;
    const double C103 = C47105 / C47110 - (C47439 * C47403) / C46291;
    const double C104 = C47439 / C46293 - (C47440 * C47403) / C46271;
    const double C15947 = C47439 / C46271;
    const double C47131 = C47130 * C47124;
    const double C47138 = C47130 / C47137;
    const double C47409 = C47136 * C47130;
    const double C47407 = C47130 / C47119;
    const double C291 = (C47128 * std::pow(C47124, 2)) / C47122 + C47129;
    const double C47140 = C47139 * C47124;
    const double C47413 = C47121 * C47139;
    const double C47411 = 2 * C47139;
    const double C47457 = C47139 / C47415;
    const double C112 = C47139 / C47450;
    const double C2871 = C47139 / C47123;
    const double C47443 = C47408 / C47119;
    const double C292 = (-2 * C47136 * C47408) / C47119;
    const double C47474 = C47441 / C47122;
    const double C1078 = (C47156 * std::pow(C47211, 2)) / C47122 + C47210;
    const double C47213 = C47212 * C47211;
    const double C47218 = C47212 / C47137;
    const double C47421 = C47212 / C47119;
    const double C47418 = C47136 * C47212;
    const double C47220 = C47219 * C47211;
    const double C47427 = C47209 * C47219;
    const double C47426 = 2 * C47219;
    const double C47463 = C47219 / C47415;
    const double C1150 = C47219 / C47450;
    const double C2868 = C47219 / C47123;
    const double C47459 = C47423 / C47119;
    const double C1079 = (-2 * C47136 * C47423) / C47119;
    const double C47479 = C47451 / C47122;
    const double C1816 = (C47174 * std::pow(C47253, 2)) / C47122 + C47252;
    const double C47255 = C47254 * C47253;
    const double C47260 = C47254 / C47137;
    const double C47422 = C47254 / C47119;
    const double C47420 = C47136 * C47254;
    const double C47262 = C47261 * C47253;
    const double C47433 = C47251 * C47261;
    const double C47432 = 2 * C47261;
    const double C47469 = C47261 / C47415;
    const double C1995 = C47261 / C47450;
    const double C3770 = C47261 / C47123;
    const double C47465 = C47429 / C47119;
    const double C1817 = (-2 * C47136 * C47429) / C47119;
    const double C47481 = C47454 / C47122;
    const double C21383 =
        (((0 - (C46270 * C46290) / C46271) * ae) / C46271 - (0 * be) / C46293) /
            (2 * C46271) -
        ((C46270 * (((C47359 - (C46270 * 2 * C46295) / C46271) * ae) / C46271 -
                    C46290 / C46293) +
          C4743) *
         be) /
            C46271 +
        (0 * ae) / C46271 - C46295 / C46291;
    const double C10359 = C10325 * C140;
    const double C10350 = C10325 * C139;
    const double C10346 = C10325 * C128;
    const double C10343 = C10325 * C138;
    const double C10339 = C10325 * C126;
    const double C10334 = C10325 * C137;
    const double C10330 = C10325 * C124;
    const double C10528 = C10325 * C326;
    const double C10524 = C10325 * C308;
    const double C10520 = C10325 * C328;
    const double C10516 = C10325 * C312;
    const double C10513 = C10325 * C325;
    const double C10509 = C10325 * C306;
    const double C10706 = C10325 * C513;
    const double C10702 = C10325 * C495;
    const double C10698 = C10325 * C515;
    const double C10691 = C10325 * C512;
    const double C10687 = C10325 * C493;
    const double C11192 = C10325 * C947;
    const double C25718 = C10325 * C327;
    const double C25714 = C10325 * C310;
    const double C25709 = C10325 * C324;
    const double C25705 = C10325 * C304;
    const double C26326 = C10325 * C946;
    const double C26322 = C10325 * C936;
    const double C26561 = C10325 * C1170;
    const double C26557 = C10325 * C1158;
    const double C26740 = C10325 * C1319;
    const double C26731 = C10325 * C1316;
    const double C26727 = C10325 * C1301;
    const double C26723 = C10325 * C1313;
    const double C42213 =
        (((0 - (C46278 * C46309) / C46271) * ae) / C46271 - (0 * be) / C46293) /
            (2 * C46271) -
        ((C46278 * (((C47376 - (C46278 * 2 * C46311) / C46271) * ae) / C46271 -
                    C46309 / C46293) +
          C10325) *
         be) /
            C46271 +
        (0 * ae) / C46271 - C46311 / C46291;
    const double C141 =
        (4 * (2 * C46330 * C46341 + C46330 * C46348) +
         C46330 * (3 * C46348 +
                   C46330 * (2 * C46330 * C46346 +
                             C46330 * (C46346 + std::pow(C46336, 7) * bs[7] *
                                                    C46328 * C46338)))) /
        C46291;
    const double C2014 =
        (2 * (be * C46407 + C46323 * C46334) +
         be * (C46407 + C46410 * std::pow(C46323, 2)) +
         C46323 * (C46334 + be * C46323 * C46410 + C46323 * C46503)) /
        C46291;
    const double C329 = (C46334 + C46341 * C46338 + ae * C46322 * C46377 +
                         C46322 * (ae * C46377 + C46322 * C46348)) /
                        C46291;
    const double C330 = (ae * (2 * C46372 + C46330 * C46377) +
                         C46322 * (2 * C46330 * C46341 + C46330 * C46348)) /
                        C46291;
    const double C130 = (3 * (C46368 + C46371 * C46338) +
                         C46330 * (2 * C46372 + C46330 * C46377)) /
                        C46271;
    const double C314 = (C46368 + C46371 * C46338 + C46377 * C46457) / C46271;
    const double C316 = (C46322 * (2 * C46372 + C46330 * C46377)) / C46271;
    const double C501 =
        (C46368 + C46371 * C46338 + C46323 * (C46323 * C46377 + C46740 * be) +
         C46323 * C46740 * be) /
        C46271;
    const double C503 = (C46323 * (2 * C46372 + C46330 * C46377) +
                         (2 * C46736 + C46330 * C46740) * be) /
                        C46271;
    const double C940 =
        (C46323 * C46322 * C46377 + C46322 * C46740 * be) / C46271;
    const double C1162 =
        (2 * C46322 * C46377 + C46322 * (C46377 + C46385 * C46457)) / C46271;
    const double C46466 = C46463 + C46464;
    const double C1317 = (be * C46411 + C46323 * C46451 +
                          ae * (C46323 * C46462 + C46322 * C46478 * be) +
                          C46322 * (ae * (C46323 * C46380 + C46478 * be) +
                                    C46322 * (be * C46419 + C46323 * C46350))) /
                         C46291;
    const double C1297 =
        (C46322 * C46372 + C46323 * (C46323 * C46462 + C46807 * be) +
         C46323 * C46807 * be) /
        C46271;
    const double C1434 = C47376 * C1171;
    const double C11713 = C10325 * C1171;
    const double C32478 = C31090 * C1171;
    const double C46866 = C46862 + C46863;
    const double C1432 = C47376 * C1160;
    const double C11709 = C10325 * C1160;
    const double C32474 = C31090 * C1160;
    const double C1173 =
        (3 * (C46334 + ae * C46454 + C46322 * C46458) +
         ae * (2 * C46454 + C46322 * C46460) +
         C46322 * (2 * C46458 + ae * C46460 +
                   C46322 * (C46341 + ae * C46322 * C46375 +
                             C46322 * (ae * C46375 + C46322 * C46346)))) /
        C46291;
    const double C1703 =
        (2 * (ae * (C46323 * C46371 + C46476 * be) + C46322 * C46503) +
         ae * (C46323 * C46460 + (C46476 + C46446 * C46457) * be) +
         C46322 * (C46503 + ae * (C46323 * C46322 * C46375 + C46486 * be) +
                   C46322 * (ae * (C46323 * C46375 + C46446 * be) +
                             C46322 * (be * C46414 + C46323 * C46346)))) /
        C46291;
    const double C1164 = (3 * (C46368 + C46371 * C46457) +
                          C46322 * (2 * C46454 + C46322 * C46460)) /
                         C46271;
    const double C1307 =
        (C46368 + C46371 * C46457 + C46323 * (C46323 * C46460 + C46802 * be) +
         C46323 * C46802 * be) /
        C46271;
    const double C1697 = (C46323 * (2 * C46454 + C46322 * C46460) +
                          (2 * C46799 + C46322 * C46802) * be) /
                         C46271;
    const double C46543 = C46322 * C46539;
    const double C46626 = 2 * C46539;
    const double C46542 = C46341 + C46538;
    const double C46925 = C46921 + C46922;
    const double C46594 = ae * C46593;
    const double C46941 = C46323 * C46593;
    const double C47001 = 2 * C46593;
    const double C516 = (C46334 + C46341 * C46338 + be * C46323 * C46416 +
                         C46323 * (be * C46416 + C46323 * C46348)) /
                        C46291;
    const double C517 = (be * (2 * C46411 + C46330 * C46416) +
                         C46323 * (2 * C46330 * C46341 + C46330 * C46348)) /
                        C46291;
    const double C948 =
        (ae * (C46323 * C46377 +
               (C46366 * C46365 + C46332 * C46331 * C46338) * be) +
         C46322 * (be * C46416 + C46323 * C46348)) /
        C46291;
    const double C131 = (3 * (C46407 + C46410 * C46338) +
                         C46330 * (2 * C46411 + C46330 * C46416)) /
                        C46271;
    const double C315 =
        (C46407 + C46410 * C46338 + C46322 * (C46322 * C46416 + C46740 * ae) +
         C46322 * C46740 * ae) /
        C46271;
    const double C317 = (C46322 * (2 * C46411 + C46330 * C46416) +
                         (2 * C46736 + C46330 * C46740) * ae) /
                        C46271;
    const double C502 = (C46407 + C46410 * C46338 + C46416 * C46517) / C46271;
    const double C504 = (C46323 * (2 * C46411 + C46330 * C46416)) / C46271;
    const double C941 = (C46323 * (C46322 * C46416 + C46740 * ae)) / C46271;
    const double C2007 =
        (2 * C46323 * C46416 + C46323 * (C46416 + C46424 * C46517)) / C46271;
    const double C46507 = C46505 + C46506;
    const double C2174 = C47376 * C1314;
    const double C11194 = C47473 * C1314;
    const double C12629 = C10325 * C1314;
    const double C31959 = C47473 * C1314;
    const double C33386 = C31090 * C1314;
    const double C46809 = C46805 + C46806;
    const double C2287 = C113 * C2005;
    const double C10701 = C10328 * C2005;
    const double C12766 = C10327 * C2005;
    const double C31466 = C31093 * C2005;
    const double C33523 = C31092 * C2005;
    const double C2017 =
        (3 * (C46334 + be * C46516 + C46323 * C46503) +
         be * (2 * C46516 + C46323 * C46519) +
         C46323 * (2 * C46503 + be * C46519 +
                   C46323 * (C46341 + be * C46323 * C46414 +
                             C46323 * (be * C46414 + C46323 * C46346)))) /
        C46291;
    const double C2399 =
        (ae * (2 * (C46323 * C46371 + C46476 * be) +
               C46323 * (C46371 + C46323 * (C46323 * C46375 + C46446 * be) +
                         C46323 * C46446 * be) +
               (C46476 + C46446 * C46517) * be) +
         C46322 * (2 * C46503 + be * C46519 +
                   C46323 * (C46341 + be * C46323 * C46414 +
                             C46323 * (be * C46414 + C46323 * C46346)))) /
        C46291;
    const double C2009 = (3 * (C46407 + C46410 * C46517) +
                          C46323 * (2 * C46516 + C46323 * C46519)) /
                         C46271;
    const double C46573 = C46323 * C46570;
    const double C46592 = C46322 * C46570;
    const double C46693 = 2 * C46570;
    const double C46572 = C46341 + C46569;
    const double C46897 = C46322 * C46895;
    const double C46960 = 2 * C46895;
    const double C46746 = C46330 * C46481;
    const double C46752 = 3 * C46481;
    const double C46815 = C46322 * C46481;
    const double C46814 = C46481 * ae;
    const double C46872 = C46323 * C46481;
    const double C46871 = C46481 * be;
    const double C1163 =
        (2 * (C46322 * C46416 + C46740 * ae) +
         C46322 * (C46416 + C46322 * (C46322 * C46424 + C46481 * ae) +
                   C46322 * C46481 * ae) +
         (C46740 + C46481 * C46457) * ae) /
        C46271;
    const double C1305 = (C46323 * (C46377 + C46385 * C46457) +
                          (C46740 + C46481 * C46457) * be) /
                         C46271;
    const double C2006 =
        (2 * (C46323 * C46377 + C46740 * be) +
         C46323 * (C46377 + C46323 * (C46323 * C46385 + C46481 * be) +
                   C46323 * C46481 * be) +
         (C46740 + C46481 * C46517) * be) /
        C46271;
    const double C1154 =
        2 * C46322 * C46740 + C46322 * (C46740 + C46481 * C46457);
    const double C1291 = C46323 * (C46740 + C46481 * C46457);
    const double C1998 =
        2 * C46323 * C46740 + C46323 * (C46740 + C46481 * C46517);
    const double C1320 =
        (C46451 + be * C46323 * C46419 +
         C46323 * (be * C46419 + C46323 * C46350) +
         ae * (C46462 + C46323 * (C46323 * C46322 * C46391 + C46489 * be) +
               C46323 * C46489 * be) +
         C46322 *
             (ae * (C46380 + C46323 * (C46323 * C46391 + C46488 * be) +
                    C46323 * C46488 * be) +
              C46322 * (C46350 + be * C46323 * C46430 +
                        C46323 * (be * C46430 + C46323 * C46330 * C46355)))) /
        C46291;
    const double C46905 = 2 * C46489;
    const double C46904 = C46489 * ae;
    const double C46931 = C46323 * C46489;
    const double C46930 = C46489 * be;
    const double C2395 =
        (2 * (C46323 * C46462 + C46807 * be) +
         C46323 * (C46462 + C46323 * (C46323 * C46548 + C46489 * be) +
                   C46323 * C46489 * be) +
         (C46807 + C46489 * C46517) * be) /
        C46271;
    const double C2391 =
        2 * C46323 * C46807 + C46323 * (C46807 + C46489 * C46517);
    const double C46600 = C46597 + C46598;
    const double C46952 = 2 * C46610;
    const double C46951 = C46610 * be;
    const double C46810 = C46478 + C46808;
    const double C46867 = C46478 + C46865;
    const double C46907 = C46902 + C46903;
    const double C46678 = C46674 + C46675;
    const double C46992 = 2 * C46685;
    const double C46991 = C46685 * be;
    const double C46926 = C46486 + C46924;
    const double C46894 = C46322 * C46571;
    const double C46965 = 3 * C46571;
    const double C46964 = C46571 * ae;
    const double C46982 = C46323 * C46571;
    const double C46981 = C46571 * be;
    const double C7269 =
        (2 * (C46323 * C46460 + C46802 * be) +
         C46323 * (C46460 + C46323 * (C46323 * C46541 + C46571 * be) +
                   C46323 * C46571 * be) +
         (C46802 + C46571 * C46517) * be) /
        C46271;
    const double C7267 =
        2 * C46323 * C46802 + C46323 * (C46802 + C46571 * C46517);
    const double C46944 = C46323 * C46607;
    const double C47004 = 3 * C46607;
    const double C47003 = C46607 * be;
    const double C46662 = C46323 * C46657;
    const double C46676 = ae * C46657;
    const double C46969 = C46322 * C46967;
    const double C46998 = C46967 * C46517;
    const double C46358 = C46330 * C46357;
    const double C46471 = C46322 * C46357;
    const double C46510 = C46323 * C46357;
    const double C1172 = (2 * (ae * C46377 + C46322 * C46348) +
                          ae * (C46377 + C46385 * std::pow(C46322, 2)) +
                          C46322 * (C46348 + ae * C46322 * C46385 +
                                    C46322 * (ae * C46385 + C46322 * C46357))) /
                         C46291;
    const double C1315 =
        (ae * (C46377 + C46323 * (C46323 * C46385 + C46481 * be) +
               C46323 * C46481 * be) +
         C46322 * (C46348 + be * C46323 * C46424 +
                   C46323 * (be * C46424 + C46323 * C46357))) /
        C46291;
    const double C46557 = C46549 + C46553;
    const double C46582 = C46577 + C46578;
    const double C46639 = C46322 * C46635;
    const double C46664 = C46323 * C46660;
    const double C46677 = C46322 * C46660;
    const double C46397 = C46330 * C46396;
    const double C46472 = C46396 * C46457;
    const double C46558 = C46391 + C46555;
    const double C46640 = C46322 * C46637;
    const double C46436 = C46330 * C46435;
    const double C46526 = C46435 * C46517;
    const double C46614 = C46430 + C46612;
    const double C46702 = C46323 * C46691;
    const double C164 = C148 - C149;
    const double C4906 = C335 - C336;
    const double C4900 = C336 - C335;
    const double C21497 = C4903 - C4902;
    const double C165 = C150 - C151;
    const double C167 = C154 - C155;
    const double C4907 = C337 - C338;
    const double C4901 = C338 - C337;
    const double C21498 = C4905 - C4904;
    const double C547 = C528 - C529;
    const double C346 = C113 * C313;
    const double C10521 = C10327 * C313;
    const double C31286 = C31092 * C313;
    const double C530 = C47376 * C499;
    const double C10694 = C10325 * C499;
    const double C10689 = C47473 * C499;
    const double C31459 = C31090 * C499;
    const double C31454 = C47473 * C499;
    const double C952 = C47376 * C938;
    const double C10511 = C47473 * C938;
    const double C11188 = C10325 * C938;
    const double C31276 = C47473 * C938;
    const double C31953 = C31090 * C938;
    const double C955 = C113 * C939;
    const double C10514 = C10328 * C939;
    const double C11193 = C10327 * C939;
    const double C31279 = C31093 * C939;
    const double C31958 = C31092 * C939;
    const double C1433 = C113 * C1161;
    const double C11712 = C10327 * C1161;
    const double C32477 = C31092 * C1161;
    const double C1590 = C47376 * C1303;
    const double C10518 = C47473 * C1303;
    const double C11911 = C10325 * C1303;
    const double C31283 = C47473 * C1303;
    const double C32676 = C31090 * C1303;
    const double C2286 = C47376 * C2004;
    const double C10696 = C47473 * C2004;
    const double C12763 = C10325 * C2004;
    const double C31461 = C47473 * C2004;
    const double C33520 = C31090 * C2004;
    const double C344 = C113 * C298;
    const double C10517 = C10327 * C298;
    const double C31282 = C31092 * C298;
    const double C531 = C113 * C485;
    const double C10695 = C10327 * C485;
    const double C10688 = C10328 * C485;
    const double C31460 = C31092 * C485;
    const double C31453 = C31093 * C485;
    const double C953 = C113 * C932;
    const double C10510 = C10328 * C932;
    const double C11189 = C10327 * C932;
    const double C31275 = C31093 * C932;
    const double C31954 = C31092 * C932;
    const double C1431 = C113 * C1153;
    const double C11708 = C10327 * C1153;
    const double C32473 = C31092 * C1153;
    const double C2171 = C113 * C1287;
    const double C11191 = C10328 * C1287;
    const double C12624 = C10327 * C1287;
    const double C31956 = C31093 * C1287;
    const double C33381 = C31092 * C1287;
    const double C1589 = C113 * C1290;
    const double C10519 = C10328 * C1290;
    const double C11910 = C10327 * C1290;
    const double C31284 = C31093 * C1290;
    const double C32675 = C31092 * C1290;
    const double C2285 = C113 * C1997;
    const double C10697 = C10328 * C1997;
    const double C12762 = C10327 * C1997;
    const double C31462 = C31093 * C1997;
    const double C33519 = C31092 * C1997;
    const double C157 = C113 * C119;
    const double C10354 = C10327 * C119;
    const double C31119 = C31092 * C119;
    const double C348 = C113 * C299;
    const double C10532 = C10327 * C299;
    const double C31297 = C31092 * C299;
    const double C352 = C113 * C300;
    const double C10848 = C10327 * C300;
    const double C31613 = C31092 * C300;
    const double C535 = C113 * C486;
    const double C10710 = C10327 * C486;
    const double C10705 = C10328 * C486;
    const double C31475 = C31092 * C486;
    const double C31470 = C31093 * C486;
    const double C539 = C113 * C487;
    const double C10349 = C10328 * C487;
    const double C10986 = C10327 * C487;
    const double C31114 = C31093 * C487;
    const double C31751 = C31092 * C487;
    const double C957 = C113 * C933;
    const double C10527 = C10328 * C933;
    const double C11196 = C10327 * C933;
    const double C31292 = C31093 * C933;
    const double C31961 = C31092 * C933;
    const double C5930 = C47376 * C1295;
    const double C26324 = C47473 * C1295;
    const double C26719 = C10325 * C1295;
    const double C37468 = C47473 * C1295;
    const double C37863 = C31090 * C1295;
    const double C7277 = C47376 * C2393;
    const double C26721 = C47473 * C2393;
    const double C28038 = C10325 * C2393;
    const double C37865 = C47473 * C2393;
    const double C39178 = C31090 * C2393;
    const double C5931 = C113 * C1286;
    const double C26323 = C10328 * C1286;
    const double C26720 = C10327 * C1286;
    const double C37467 = C31093 * C1286;
    const double C37864 = C31092 * C1286;
    const double C7276 = C113 * C2390;
    const double C26722 = C10328 * C2390;
    const double C28037 = C10327 * C2390;
    const double C37866 = C31093 * C2390;
    const double C39177 = C31092 * C2390;
    const double C1165 =
        (3 * (C46407 + C46322 * C46801 + C46799 * ae) +
         C46322 * (2 * C46801 +
                   C46322 * (C46410 + C46322 * (C46322 * C46414 + C46446 * ae) +
                             C46486 * ae) +
                   C46802 * ae) +
         (2 * C46799 + C46322 * C46802) * ae) /
        C46271;
    const double C1296 =
        (C46322 * C46407 + C46733 * ae + C46801 * C46517) / C46271;
    const double C1302 =
        (C46323 * (C46407 + C46322 * C46801 + C46799 * ae)) / C46271;
    const double C1308 =
        (C46407 + C46322 * C46801 + C46799 * ae +
         (C46410 + C46322 * (C46322 * C46414 + C46446 * ae) + C46486 * ae) *
             C46517) /
        C46271;
    const double C1698 =
        (C46323 * (2 * C46801 +
                   C46322 * (C46410 + C46322 * (C46322 * C46414 + C46446 * ae) +
                             C46486 * ae) +
                   C46802 * ae)) /
        C46271;
    const double C2394 =
        (2 * C46323 * C46801 +
         C46323 * (C46801 + (C46322 * C46414 + C46446 * ae) * C46517)) /
        C46271;
    const double C6800 =
        (3 * (C46801 + C46895 * C46517) +
         C46323 *
             (2 * C46323 * C46895 +
              C46323 * (C46895 + (C46322 * C46422 + C46448 * ae) * C46517))) /
        C46271;
    const double C5768 = C113 * C1155;
    const double C26565 = C10327 * C1155;
    const double C37709 = C31092 * C1155;
    const double C5938 = C113 * C1292;
    const double C26735 = C10327 * C1292;
    const double C26730 = C10328 * C1292;
    const double C37879 = C31092 * C1292;
    const double C37874 = C31093 * C1292;
    const double C6420 = C113 * C1694;
    const double C26560 = C10328 * C1694;
    const double C27197 = C10327 * C1694;
    const double C37704 = C31093 * C1694;
    const double C38341 = C31092 * C1694;
    const double C2008 =
        (3 * (C46368 + C46323 * C46858 + C46856 * be) +
         C46323 *
             (2 * C46858 + C46323 * (C46371 + C46323 * C46593 + C46604 * be) +
              C46859 * be) +
         (2 * C46856 + C46323 * C46859) * be) /
        C46271;
    const double C360 = C341 - C342;
    const double C4913 = C342 - C341;
    const double C22128 = C5767 - C5766;
    const double C166 = C152 - C153;
    const double C359 = C339 - C340;
    const double C4912 = C340 - C339;
    const double C546 = C526 - C527;
    const double C22127 = C5765 - C5764;
    const double C22249 = C5935 - C5934;
    const double C46387 = C46382 + C46386;
    const double C1318 = (be * C46416 + C46323 * C46348 +
                          ae * (C46323 * C46469 + C46322 * C46481 * be) +
                          C46322 * (ae * (C46323 * C46385 + C46481 * be) +
                                    C46322 * (be * C46424 + C46323 * C46357))) /
                         C46291;
    const double C1166 = (3 * (C46372 + C46380 * C46457) +
                          C46322 * (2 * C46462 + C46322 * C46467)) /
                         C46271;
    const double C46556 = C46350 + C46552;
    const double C46546 = C46540 + C46544;
    const double C46426 = C46421 + C46425;
    const double C2011 = (3 * (C46411 + C46419 * C46517) +
                          C46323 * (2 * C46521 + C46323 * C46523)) /
                         C46271;
    const double C46585 = C46350 + C46581;
    const double C46620 = C46618 + C46619;
    const double C1321 =
        (C46348 + be * C46323 * C46424 +
         C46323 * (be * C46424 + C46323 * C46357) +
         ae * (C46469 + C46323 * (C46323 * C46322 * C46396 + C46494 * be) +
               C46323 * C46494 * be) +
         C46322 * (ae * (C46385 + C46323 * (C46323 * C46396 + C46493 * be) +
                         C46323 * C46493 * be) +
                   C46322 * (C46357 + be * C46323 * C46435 +
                             C46323 * (be * C46435 +
                                       C46323 * (C46355 + std::pow(C46326, 8) *
                                                              bs[8] * C46328 *
                                                              C46338))))) /
        C46291;
    const double C46499 = C46497 + C46498;
    const double C46818 = C46481 + C46816;
    const double C46875 = C46481 + C46873;
    const double C46934 = C46489 + C46932;
    const double C46906 = C46322 * C46587;
    const double C46953 = C46323 * C46613;
    const double C46993 = C46323 * C46689;
    const double C46668 = C46654 + C46665;
    const double C46985 = C46571 + C46983;
    const double C46703 = C46699 + C46700;
    const double C47132 = C47131 / C47122;
    const double C47444 = 2 * C47409;
    const double C47141 = C47140 / C47119;
    const double C47448 = C47413 / C47137;
    const double C47475 = C47407 - C47443;
    const double C2608 = -C47443;
    const double C47489 = C47474 + C47129;
    const double C47214 = C47213 / C47122;
    const double C47452 = 2 * C47418;
    const double C47221 = C47220 / C47119;
    const double C47462 = C47427 / C47137;
    const double C47483 = C47421 - C47459;
    const double C2500 = -C47459;
    const double C47492 = C47479 + C47210;
    const double C47256 = C47255 / C47122;
    const double C47455 = 2 * C47420;
    const double C47263 = C47262 / C47119;
    const double C47468 = C47433 / C47137;
    const double C47486 = C47422 - C47465;
    const double C3262 = -C47465;
    const double C47493 = C47481 + C47252;
    const double C163 = C47376 * C141;
    const double C349 = C47376 * C329;
    const double C10537 = C10325 * C329;
    const double C31302 = C31090 * C329;
    const double C353 = C47376 * C330;
    const double C10853 = C10325 * C330;
    const double C31618 = C31090 * C330;
    const double C156 = C47376 * C130;
    const double C10355 = C10325 * C130;
    const double C31120 = C31090 * C130;
    const double C347 = C47376 * C314;
    const double C10533 = C10325 * C314;
    const double C31298 = C31090 * C314;
    const double C351 = C47376 * C316;
    const double C10849 = C10325 * C316;
    const double C31614 = C31090 * C316;
    const double C534 = C47376 * C501;
    const double C10711 = C10325 * C501;
    const double C10704 = C47473 * C501;
    const double C31476 = C31090 * C501;
    const double C31469 = C47473 * C501;
    const double C538 = C47376 * C503;
    const double C10348 = C47473 * C503;
    const double C10987 = C10325 * C503;
    const double C31113 = C47473 * C503;
    const double C31752 = C31090 * C503;
    const double C956 = C47376 * C940;
    const double C10526 = C47473 * C940;
    const double C11197 = C10325 * C940;
    const double C31291 = C47473 * C940;
    const double C31962 = C31090 * C940;
    const double C1436 = C47376 * C1162;
    const double C1174 =
        (3 * (C46451 + ae * C46462 + C46322 * C46466) +
         ae * (2 * C46462 + C46322 * C46467) +
         C46322 *
             (2 * C46466 + ae * C46467 +
              C46322 * (C46350 + ae * C46322 * C46391 +
                        C46322 * (ae * C46391 + C46322 * C46330 * C46355)))) /
        C46291;
    const double C1592 = C47376 * C1317;
    const double C10522 = C47473 * C1317;
    const double C11915 = C10325 * C1317;
    const double C31287 = C47473 * C1317;
    const double C32680 = C31090 * C1317;
    const double C2172 = C47376 * C1297;
    const double C11190 = C47473 * C1297;
    const double C12625 = C10325 * C1297;
    const double C31955 = C47473 * C1297;
    const double C33382 = C31090 * C1297;
    const double C5771 = C47376 * C1173;
    const double C26570 = C10325 * C1173;
    const double C37714 = C31090 * C1173;
    const double C6423 = C47376 * C1703;
    const double C26563 = C47473 * C1703;
    const double C27202 = C10325 * C1703;
    const double C37707 = C47473 * C1703;
    const double C38346 = C31090 * C1703;
    const double C5769 = C47376 * C1164;
    const double C26566 = C10325 * C1164;
    const double C37710 = C31090 * C1164;
    const double C5939 = C47376 * C1307;
    const double C26736 = C10325 * C1307;
    const double C26729 = C47473 * C1307;
    const double C37880 = C31090 * C1307;
    const double C37873 = C47473 * C1307;
    const double C6421 = C47376 * C1697;
    const double C26559 = C47473 * C1697;
    const double C27198 = C10325 * C1697;
    const double C37703 = C47473 * C1697;
    const double C38342 = C31090 * C1697;
    const double C46633 = C46626 + C46627;
    const double C46545 = C46542 + C46543;
    const double C46945 = C46371 + C46941;
    const double C536 = C47376 * C516;
    const double C10715 = C10325 * C516;
    const double C10708 = C47473 * C516;
    const double C31480 = C31090 * C516;
    const double C31473 = C47473 * C516;
    const double C540 = C47376 * C517;
    const double C10352 = C47473 * C517;
    const double C10991 = C10325 * C517;
    const double C31117 = C47473 * C517;
    const double C31756 = C31090 * C517;
    const double C958 = C47376 * C948;
    const double C10530 = C47473 * C948;
    const double C11201 = C10325 * C948;
    const double C31295 = C47473 * C948;
    const double C31966 = C31090 * C948;
    const double C159 = C113 * C131;
    const double C10358 = C10327 * C131;
    const double C31123 = C31092 * C131;
    const double C350 = C113 * C315;
    const double C10536 = C10327 * C315;
    const double C31301 = C31092 * C315;
    const double C354 = C113 * C317;
    const double C10852 = C10327 * C317;
    const double C31617 = C31092 * C317;
    const double C537 = C113 * C502;
    const double C10714 = C10327 * C502;
    const double C10709 = C10328 * C502;
    const double C31479 = C31092 * C502;
    const double C31474 = C31093 * C502;
    const double C541 = C113 * C504;
    const double C10353 = C10328 * C504;
    const double C10990 = C10327 * C504;
    const double C31118 = C31093 * C504;
    const double C31755 = C31092 * C504;
    const double C959 = C113 * C941;
    const double C10531 = C10328 * C941;
    const double C11200 = C10327 * C941;
    const double C31296 = C31093 * C941;
    const double C31965 = C31092 * C941;
    const double C2291 = C113 * C2007;
    const double C10716 = C10328 * C2007;
    const double C31481 = C31093 * C2007;
    const double C1704 =
        (2 * (ae * (C46323 * C46380 + C46478 * be) + C46322 * C46507) +
         ae * (C46323 * C46467 + (C46478 + C46488 * C46457) * be) +
         C46322 *
             (C46507 + ae * (C46323 * C46322 * C46391 + C46489 * be) +
              C46322 * (ae * (C46323 * C46391 + C46488 * be) +
                        C46322 * (be * C46430 + C46323 * C46330 * C46355)))) /
        C46291;
    const double C2015 =
        (2 * (be * C46411 + C46323 * C46451) +
         be * (C46411 + C46419 * std::pow(C46323, 2)) +
         C46323 * (C46451 + be * C46323 * C46419 + C46323 * C46507)) /
        C46291;
    const double C2018 =
        (3 * (C46451 + be * C46521 + C46323 * C46507) +
         be * (2 * C46521 + C46323 * C46523) +
         C46323 *
             (2 * C46507 + be * C46523 +
              C46323 * (C46350 + be * C46323 * C46430 +
                        C46323 * (be * C46430 + C46323 * C46330 * C46355)))) /
        C46291;
    const double C2400 =
        (ae * (2 * (C46323 * C46380 + C46478 * be) +
               C46323 * (C46380 + C46323 * (C46323 * C46391 + C46488 * be) +
                         C46323 * C46488 * be) +
               (C46478 + C46488 * C46517) * be) +
         C46322 *
             (2 * C46507 + be * C46523 +
              C46323 * (C46350 + be * C46323 * C46430 +
                        C46323 * (be * C46430 + C46323 * C46330 * C46355)))) /
        C46291;
    const double C1298 =
        (C46322 * C46411 + C46736 * ae + C46809 * C46517) / C46271;
    const double C1304 =
        (C46323 * (C46411 + C46322 * C46809 + C46807 * ae)) / C46271;
    const double C1310 =
        (C46411 + C46322 * C46809 + C46807 * ae +
         (C46419 + C46322 * (C46322 * C46430 + C46488 * ae) + C46489 * ae) *
             C46517) /
        C46271;
    const double C2396 =
        (2 * C46323 * C46809 +
         C46323 * (C46809 + (C46322 * C46430 + C46488 * ae) * C46517)) /
        C46271;
    const double C7279 = C47376 * C2399;
    const double C26725 = C47473 * C2399;
    const double C28042 = C10325 * C2399;
    const double C37869 = C47473 * C2399;
    const double C39182 = C31090 * C2399;
    const double C46595 = C46594 + C46592;
    const double C46696 = C46693 + C46694;
    const double C46574 = C46572 + C46573;
    const double C46898 = C46410 + C46897;
    const double C46747 = C46745 + C46746;
    const double C1299 =
        (C46322 * C46377 + C46323 * (C46323 * C46469 + C46815 * be) +
         C46323 * C46815 * be) /
        C46271;
    const double C2397 =
        (2 * (C46323 * C46469 + C46815 * be) +
         C46323 * (C46469 + C46323 * (C46323 * C46322 * C46396 + C46494 * be) +
                   C46323 * C46494 * be) +
         (C46815 + C46494 * C46517) * be) /
        C46271;
    const double C1288 = C46322 * C46740 + C46815 * C46517;
    const double C2392 =
        2 * C46323 * C46815 + C46323 * (C46815 + C46494 * C46517);
    const double C46817 = C46813 + C46814;
    const double C46874 = C46870 + C46871;
    const double C1437 = C113 * C1163;
    const double C1594 = C47376 * C1305;
    const double C10535 = C47473 * C1305;
    const double C31300 = C47473 * C1305;
    const double C2290 = C47376 * C2006;
    const double C10713 = C47473 * C2006;
    const double C31478 = C47473 * C2006;
    const double C1435 = C113 * C1154;
    const double C1593 = C113 * C1291;
    const double C10534 = C10328 * C1291;
    const double C31299 = C31093 * C1291;
    const double C2289 = C113 * C1998;
    const double C10712 = C10328 * C1998;
    const double C31477 = C31093 * C1998;
    const double C5945 = C47376 * C1320;
    const double C11917 = C47473 * C1320;
    const double C32682 = C47473 * C1320;
    const double C46933 = C46929 + C46930;
    const double C7135 = C47376 * C2395;
    const double C12627 = C47473 * C2395;
    const double C33384 = C47473 * C2395;
    const double C7134 = C113 * C2391;
    const double C12626 = C10328 * C2391;
    const double C33383 = C31093 * C2391;
    const double C46601 = ae * C46600;
    const double C46950 = C46323 * C46600;
    const double C1167 =
        (3 * (C46411 + C46322 * C46809 + C46807 * ae) +
         C46322 * (2 * C46809 +
                   C46322 * (C46419 + C46322 * (C46322 * C46430 + C46488 * ae) +
                             C46489 * ae) +
                   C46810 * ae) +
         (2 * C46807 + C46322 * C46810) * ae) /
        C46271;
    const double C1309 =
        (C46372 + C46380 * C46457 + C46323 * (C46323 * C46467 + C46810 * be) +
         C46323 * C46810 * be) /
        C46271;
    const double C1699 = (C46323 * (2 * C46462 + C46322 * C46467) +
                          (2 * C46807 + C46322 * C46810) * be) /
                         C46271;
    const double C1700 =
        (C46323 * (2 * C46809 +
                   C46322 * (C46419 + C46322 * (C46322 * C46430 + C46488 * ae) +
                             C46489 * ae) +
                   C46810 * ae)) /
        C46271;
    const double C1156 = 3 * (C46736 + C46478 * C46457) +
                         C46322 * (2 * C46807 + C46322 * C46810);
    const double C1293 = C46736 + C46478 * C46457 + C46810 * C46517;
    const double C1695 = C46323 * (2 * C46807 + C46322 * C46810);
    const double C7268 =
        2 * C46323 * C46810 + C46323 * (C46810 + C46587 * C46517);
    const double C2010 =
        (3 * (C46372 + C46323 * C46866 + C46864 * be) +
         C46323 *
             (2 * C46866 + C46323 * (C46380 + C46323 * C46600 + C46610 * be) +
              C46867 * be) +
         (2 * C46864 + C46323 * C46867) * be) /
        C46271;
    const double C2000 = 3 * (C46736 + C46478 * C46517) +
                         C46323 * (2 * C46864 + C46323 * C46867);
    const double C46909 = C46322 * C46907;
    const double C6802 =
        (3 * (C46809 + C46907 * C46517) +
         C46323 *
             (2 * C46323 * C46907 +
              C46323 * (C46907 + (C46322 * C46580 + C46579 * ae) * C46517))) /
        C46271;
    const double C46680 = ae * C46678;
    const double C46990 = C46323 * C46678;
    const double C6799 =
        (3 * (C46454 + C46323 * C46925 + C46923 * be) +
         C46323 *
             (2 * C46925 + C46323 * (C46534 + C46323 * C46678 + C46685 * be) +
              C46926 * be) +
         (2 * C46923 + C46323 * C46926) * be) /
        C46271;
    const double C6797 = 3 * (C46799 + C46486 * C46517) +
                         C46323 * (2 * C46923 + C46323 * C46926);
    const double C46896 = C46893 + C46894;
    const double C46984 = C46980 + C46981;
    const double C23242 = C47376 * C7269;
    const double C26738 = C47473 * C7269;
    const double C37882 = C47473 * C7269;
    const double C23241 = C113 * C7267;
    const double C26737 = C10328 * C7267;
    const double C37881 = C31093 * C7267;
    const double C46946 = C46943 + C46944;
    const double C46666 = C46375 + C46662;
    const double C46970 = C46414 + C46969;
    const double C46999 = C46895 + C46998;
    const double C46359 = C46353 + C46358;
    const double C46473 = C46470 + C46471;
    const double C46511 = C46509 + C46510;
    const double C1438 = C47376 * C1172;
    const double C2178 = C47376 * C1315;
    const double C11203 = C47473 * C1315;
    const double C31968 = C47473 * C1315;
    const double C46559 = C46322 * C46557;
    const double C46586 = C46323 * C46582;
    const double C46599 = C46322 * C46582;
    const double C46641 = C46638 + C46639;
    const double C46667 = C46663 + C46664;
    const double C46679 = C46676 + C46677;
    const double C46398 = C46393 + C46397;
    const double C46474 = C46385 + C46472;
    const double C46560 = C46322 * C46558;
    const double C7271 =
        (2 * (C46323 * C46467 + C46810 * be) +
         C46323 * (C46467 + C46323 * (C46323 * C46558 + C46587 * be) +
                   C46323 * C46587 * be) +
         (C46810 + C46587 * C46517) * be) /
        C46271;
    const double C46642 = C46636 + C46640;
    const double C46437 = C46432 + C46436;
    const double C46527 = C46424 + C46526;
    const double C46623 = C46323 * C46614;
    const double C46704 = C46701 + C46702;
    const double C170 = C164 * C114;
    const double C171 = C165 * C47359;
    const double C173 = C167 * C47359;
    const double C551 = C547 * C47359;
    const double C4911 = C345 - C346;
    const double C4909 = C346 - C345;
    const double C5525 = C954 - C955;
    const double C5523 = C955 - C954;
    const double C6079 = C1433 - C1434;
    const double C6077 = C1434 - C1433;
    const double C4910 = C343 - C344;
    const double C4908 = C344 - C343;
    const double C5524 = C952 - C953;
    const double C5522 = C953 - C952;
    const double C6078 = C1431 - C1432;
    const double C6076 = C1432 - C1431;
    const double C6276 = C1589 - C1590;
    const double C6274 = C1590 - C1589;
    const double C5770 = C113 * C1165;
    const double C26569 = C10327 * C1165;
    const double C37713 = C31092 * C1165;
    const double C5933 = C113 * C1296;
    const double C26327 = C10328 * C1296;
    const double C26724 = C10327 * C1296;
    const double C37471 = C31093 * C1296;
    const double C37868 = C31092 * C1296;
    const double C5937 = C113 * C1302;
    const double C25719 = C10328 * C1302;
    const double C26732 = C10327 * C1302;
    const double C36863 = C31093 * C1302;
    const double C37876 = C31092 * C1302;
    const double C5940 = C113 * C1308;
    const double C26739 = C10327 * C1308;
    const double C26734 = C10328 * C1308;
    const double C37883 = C31092 * C1308;
    const double C37878 = C31093 * C1308;
    const double C6422 = C113 * C1698;
    const double C26564 = C10328 * C1698;
    const double C27201 = C10327 * C1698;
    const double C37708 = C31093 * C1698;
    const double C38345 = C31092 * C1698;
    const double C7278 = C113 * C2394;
    const double C26726 = C10328 * C2394;
    const double C28041 = C10327 * C2394;
    const double C37870 = C31093 * C2394;
    const double C39181 = C31092 * C2394;
    const double C28043 = C10328 * C6800;
    const double C39183 = C31093 * C6800;
    const double C364 = C360 * C47359;
    const double C172 = C166 * C114;
    const double C363 = C359 * C114;
    const double C550 = C546 * C114;
    const double C132 = (4 * (2 * C46372 + C46330 * C46377) +
                         C46330 * (3 * C46377 + C46330 * C46387)) /
                        C46271;
    const double C318 =
        (2 * C46372 + C46330 * C46377 + C46387 * C46457) / C46271;
    const double C320 = (C46322 * (3 * C46377 + C46330 * C46387)) / C46271;
    const double C1596 = C47376 * C1318;
    const double C10539 = C47473 * C1318;
    const double C31304 = C47473 * C1318;
    const double C5773 = C47376 * C1166;
    const double C5757 = (4 * (2 * C46454 + C46322 * C46460) +
                          C46322 * (3 * C46460 + C46322 * C46546)) /
                         C46271;
    const double C133 = (4 * (2 * C46411 + C46330 * C46416) +
                         C46330 * (3 * C46416 + C46330 * C46426)) /
                        C46271;
    const double C506 =
        (2 * C46411 + C46330 * C46416 + C46426 * C46517) / C46271;
    const double C508 = (C46323 * (3 * C46416 + C46330 * C46426)) / C46271;
    const double C12768 = C10328 * C2011;
    const double C33525 = C31093 * C2011;
    const double C12424 = (4 * (2 * C46516 + C46323 * C46519) +
                           C46323 * (3 * C46519 + C46323 * C46620)) /
                          C46271;
    const double C46753 = C46330 * C46499;
    const double C46878 = C46322 * C46499;
    const double C1157 = 3 * (C46740 + C46481 * C46457) +
                         C46322 * (2 * C46815 + C46322 * C46818);
    const double C1294 = C46740 + C46481 * C46457 + C46818 * C46517;
    const double C1696 = C46323 * (2 * C46815 + C46322 * C46818);
    const double C2001 = 3 * (C46740 + C46481 * C46517) +
                         C46323 * (2 * C46872 + C46323 * C46875);
    const double C6798 = 3 * (C46807 + C46489 * C46517) +
                         C46323 * (2 * C46931 + C46323 * C46934);
    const double C46908 = C46905 + C46906;
    const double C46955 = C46952 + C46953;
    const double C46995 = C46992 + C46993;
    const double C46966 = C46322 * C46668;
    const double C22890 = 3 * (C46802 + C46571 * C46517) +
                          C46323 * (2 * C46982 + C46323 * C46985);
    const double C47005 = C46323 * C46703;
    const double C47133 = C47129 - C47132;
    const double C47476 = C47444 / C47119;
    const double C47142 = C47138 - C47141;
    const double C47490 = C47475 / C47123;
    const double C47215 = C47210 - C47214;
    const double C47480 = C47452 / C47119;
    const double C47222 = C47218 - C47221;
    const double C47494 = C47483 / C47123;
    const double C47257 = C47252 - C47256;
    const double C47482 = C47455 / C47119;
    const double C47264 = C47260 - C47263;
    const double C47496 = C47486 / C47123;
    const double C168 = C156 - C157;
    const double C361 = C347 - C348;
    const double C4914 = C348 - C347;
    const double C664 = C351 - C352;
    const double C5192 = C352 - C351;
    const double C548 = C534 - C535;
    const double C777 = C538 - C539;
    const double C964 = C956 - C957;
    const double C5526 = C957 - C956;
    const double C5775 = C47376 * C1174;
    const double C7002 = C2171 - C2172;
    const double C7000 = C2172 - C2171;
    const double C22129 = C5769 - C5768;
    const double C22251 = C5939 - C5938;
    const double C22603 = C6421 - C6420;
    const double C5761 =
        (4 * (2 * C46458 + ae * C46460 + C46322 * C46545) +
         ae * (3 * C46460 + C46322 * C46546) +
         C46322 *
             (3 * C46545 + ae * C46546 +
              C46322 * (2 * C46539 + ae * C46541 +
                        C46322 * (C46346 + ae * C46322 * C46383 +
                                  C46322 * (ae * C46383 + C46322 * C46355))))) /
        C46291;
    const double C46947 = C46945 + C46942;
    const double C169 = C158 - C159;
    const double C362 = C349 - C350;
    const double C4915 = C350 - C349;
    const double C665 = C353 - C354;
    const double C5193 = C354 - C353;
    const double C549 = C536 - C537;
    const double C778 = C540 - C541;
    const double C965 = C958 - C959;
    const double C5527 = C959 - C958;
    const double C6281 = C47376 * C1704;
    const double C11715 = C47473 * C1704;
    const double C32480 = C47473 * C1704;
    const double C2288 = C47376 * C2015;
    const double C10700 = C47473 * C2015;
    const double C12767 = C10325 * C2015;
    const double C31465 = C47473 * C2015;
    const double C33524 = C31090 * C2015;
    const double C12769 = C47473 * C2018;
    const double C33526 = C47473 * C2018;
    const double C7137 = C47376 * C2400;
    const double C12631 = C47473 * C2400;
    const double C33388 = C47473 * C2400;
    const double C2173 = C113 * C1298;
    const double C11195 = C10328 * C1298;
    const double C12628 = C10327 * C1298;
    const double C31960 = C31093 * C1298;
    const double C33385 = C31092 * C1298;
    const double C1591 = C113 * C1304;
    const double C10523 = C10328 * C1304;
    const double C11914 = C10327 * C1304;
    const double C31288 = C31093 * C1304;
    const double C32679 = C31092 * C1304;
    const double C5944 = C113 * C1310;
    const double C11916 = C10328 * C1310;
    const double C32681 = C31093 * C1310;
    const double C7136 = C113 * C2396;
    const double C12630 = C10328 * C2396;
    const double C33387 = C31093 * C2396;
    const double C6417 =
        (3 * (C46503 + ae * (C46323 * C46534 + C46486 * be) + C46322 * C46595) +
         ae * (C46323 * C46546 + (2 * C46486 + C46322 * C46571) * be) +
         C46322 *
             (2 * C46595 + ae * (C46323 * C46541 + C46571 * be) +
              C46322 * (C46570 + ae * (C46323 * C46322 * C46383 + C46568 * be) +
                        C46322 * (ae * (C46323 * C46383 + C46448 * be) +
                                  C46322 * (be * C46422 + C46323 * C46355))))) /
        C46291;
    const double C5927 =
        (2 * (ae * (C46371 + C46323 * (C46323 * C46375 + C46446 * be) +
                    C46323 * C46446 * be) +
              C46322 * C46574) +
         ae * (C46460 + C46323 * (C46323 * C46541 + C46571 * be) +
               C46323 * C46571 * be) +
         C46322 *
             (C46574 +
              ae * (C46534 + C46323 * (C46323 * C46322 * C46383 + C46568 * be) +
                    C46323 * C46568 * be) +
              C46322 *
                  (ae * (C46375 + C46323 * (C46323 * C46383 + C46448 * be) +
                         C46323 * C46448 * be) +
                   C46322 * (C46346 + be * C46323 * C46422 +
                             C46323 * (be * C46422 + C46323 * C46355))))) /
        C46291;
    const double C6803 =
        (ae * (3 * (C46371 + C46323 * C46593 + C46604 * be) +
               C46323 * (2 * C46593 +
                         C46323 * (C46375 +
                                   C46323 * (C46323 * C46383 + C46448 * be) +
                                   C46323 * C46448 * be) +
                         C46607 * be) +
               (2 * C46604 + C46323 * C46607) * be) +
         C46322 *
             (3 * C46574 + be * (2 * C46564 + C46323 * C46608) +
              C46323 * (2 * C46570 + be * C46608 +
                        C46323 * (C46346 + be * C46323 * C46422 +
                                  C46323 * (be * C46422 + C46323 * C46355))))) /
        C46291;
    const double C7273 =
        (2 * C46503 + be * C46519 + C46323 * C46574 +
         ae * (2 * (C46323 * C46534 + C46486 * be) +
               C46323 *
                   (C46534 + C46323 * (C46323 * C46322 * C46383 + C46568 * be) +
                    C46323 * C46568 * be) +
               (C46486 + C46568 * C46517) * be) +
         C46322 *
             (ae *
                  (2 * C46593 +
                   C46323 * (C46375 + C46323 * (C46323 * C46383 + C46448 * be) +
                             C46323 * C46448 * be) +
                   C46607 * be) +
              C46322 * (2 * C46570 + be * C46608 +
                        C46323 * (C46346 + be * C46323 * C46422 +
                                  C46323 * (be * C46422 + C46323 * C46355))))) /
        C46291;
    const double C12427 =
        (4 * (2 * C46503 + be * C46519 + C46323 * C46574) +
         be * (3 * C46519 + C46323 * C46620) +
         C46323 *
             (3 * C46574 + be * C46620 +
              C46323 * (2 * C46570 + be * C46608 +
                        C46323 * (C46346 + be * C46323 * C46422 +
                                  C46323 * (be * C46422 + C46323 * C46355))))) /
        C46291;
    const double C46899 = C46898 + C46892;
    const double C319 =
        (2 * C46411 + C46330 * C46416 +
         C46322 * (C46322 * C46426 + C46747 * ae) + C46322 * C46747 * ae) /
        C46271;
    const double C321 = (C46322 * (3 * C46416 + C46330 * C46426) +
                         (3 * C46740 + C46330 * C46747) * ae) /
                        C46271;
    const double C505 =
        (2 * C46372 + C46330 * C46377 +
         C46323 * (C46323 * C46387 + C46747 * be) + C46323 * C46747 * be) /
        C46271;
    const double C507 = (C46323 * (3 * C46377 + C46330 * C46387) +
                         (3 * C46740 + C46330 * C46747) * be) /
                        C46271;
    const double C942 =
        (C46323 * C46322 * C46387 + C46322 * C46747 * be) / C46271;
    const double C943 = (C46323 * (C46322 * C46426 + C46747 * ae)) / C46271;
    const double C120 = 4 * (2 * C46736 + C46330 * C46740) +
                        C46330 * (3 * C46740 + C46330 * C46747);
    const double C301 = 2 * C46736 + C46330 * C46740 + C46747 * C46457;
    const double C302 = C46322 * (3 * C46740 + C46330 * C46747);
    const double C488 = 2 * C46736 + C46330 * C46740 + C46747 * C46517;
    const double C489 = C46323 * (3 * C46740 + C46330 * C46747);
    const double C934 = C46323 * C46322 * C46747;
    const double C1426 =
        2 * C46322 * C46747 + C46322 * (C46747 + C46499 * C46457);
    const double C1584 = C46323 * (C46747 + C46499 * C46457);
    const double C2280 =
        2 * C46323 * C46747 + C46323 * (C46747 + C46499 * C46517);
    const double C2176 = C47376 * C1299;
    const double C11199 = C47473 * C1299;
    const double C31964 = C47473 * C1299;
    const double C2175 = C113 * C1288;
    const double C11198 = C10328 * C1288;
    const double C31963 = C31093 * C1288;
    const double C1169 =
        (3 * (C46416 + C46322 * C46817 + C46815 * ae) +
         C46322 * (2 * C46817 +
                   C46322 * (C46424 + C46322 * (C46322 * C46435 + C46493 * ae) +
                             C46494 * ae) +
                   C46818 * ae) +
         (2 * C46815 + C46322 * C46818) * ae) /
        C46271;
    const double C1300 =
        (C46322 * C46416 + C46740 * ae + C46817 * C46517) / C46271;
    const double C1306 =
        (C46323 * (C46416 + C46322 * C46817 + C46815 * ae)) / C46271;
    const double C1312 =
        (C46416 + C46322 * C46817 + C46815 * ae +
         (C46424 + C46322 * (C46322 * C46435 + C46493 * ae) + C46494 * ae) *
             C46517) /
        C46271;
    const double C1702 =
        (C46323 * (2 * C46817 +
                   C46322 * (C46424 + C46322 * (C46322 * C46435 + C46493 * ae) +
                             C46494 * ae) +
                   C46818 * ae)) /
        C46271;
    const double C2398 =
        (2 * C46323 * C46817 +
         C46323 * (C46817 + (C46322 * C46435 + C46493 * ae) * C46517)) /
        C46271;
    const double C2012 =
        (3 * (C46377 + C46323 * C46874 + C46872 * be) +
         C46323 * (2 * C46874 +
                   C46323 * (C46385 + C46323 * (C46323 * C46396 + C46493 * be) +
                             C46323 * C46493 * be) +
                   C46875 * be) +
         (2 * C46872 + C46323 * C46875) * be) /
        C46271;
    const double C6801 =
        (3 * (C46462 + C46323 * C46933 + C46931 * be) +
         C46323 * (2 * C46933 +
                   C46323 * (C46548 +
                             C46323 * (C46323 * C46322 * C46551 + C46584 * be) +
                             C46323 * C46584 * be) +
                   C46934 * be) +
         (2 * C46931 + C46323 * C46934) * be) /
        C46271;
    const double C46954 = C46380 + C46950;
    const double C5774 = C113 * C1167;
    const double C5943 = C47376 * C1309;
    const double C11913 = C47473 * C1309;
    const double C32678 = C47473 * C1309;
    const double C6279 = C47376 * C1699;
    const double C11711 = C47473 * C1699;
    const double C32476 = C47473 * C1699;
    const double C6280 = C113 * C1700;
    const double C11714 = C10328 * C1700;
    const double C32479 = C31093 * C1700;
    const double C5772 = C113 * C1156;
    const double C5942 = C113 * C1293;
    const double C11912 = C10328 * C1293;
    const double C32677 = C31093 * C1293;
    const double C6278 = C113 * C1695;
    const double C11710 = C10328 * C1695;
    const double C32475 = C31093 * C1695;
    const double C12765 = C47473 * C2010;
    const double C33522 = C47473 * C2010;
    const double C12764 = C10328 * C2000;
    const double C33521 = C31093 * C2000;
    const double C46910 = C46419 + C46909;
    const double C46682 = C46570 + C46680;
    const double C46994 = C46534 + C46990;
    const double C28040 = C47473 * C6799;
    const double C39180 = C47473 * C6799;
    const double C28039 = C10328 * C6797;
    const double C39179 = C31093 * C6797;
    const double C5923 =
        (2 * C46454 + C46322 * C46460 +
         C46323 * (C46323 * C46546 + C46896 * be) + C46323 * C46896 * be) /
        C46271;
    const double C6413 = (C46323 * (3 * C46460 + C46322 * C46546) +
                          (3 * C46802 + C46322 * C46896) * be) /
                         C46271;
    const double C5755 = 4 * (2 * C46799 + C46322 * C46802) +
                         C46322 * (3 * C46802 + C46322 * C46896);
    const double C5921 = 2 * C46799 + C46322 * C46802 + C46896 * C46517;
    const double C6411 = C46323 * (3 * C46802 + C46322 * C46896);
    const double C23236 =
        2 * C46323 * C46896 + C46323 * (C46896 + C46668 * C46517);
    const double C22891 =
        (3 * (C46460 + C46323 * C46984 + C46982 * be) +
         C46323 * (2 * C46984 +
                   C46323 * (C46541 + C46323 * (C46323 * C46637 + C46661 * be) +
                             C46323 * C46661 * be) +
                   C46985 * be) +
         (2 * C46982 + C46323 * C46985) * be) /
        C46271;
    const double C12421 = 4 * (2 * C46856 + C46323 * C46859) +
                          C46323 * (3 * C46859 + C46323 * C46946);
    const double C46669 = C46666 + C46658;
    const double C46971 = C46970 + C46963;
    const double C27580 =
        (4 * (2 * C46323 * C46895 + C46323 * C46999) +
         C46323 * (3 * C46999 + C46323 * (2 * C46323 * C46967 +
                                          C46323 * (C46967 + (C46322 * C46433 +
                                                              C46491 * ae) *
                                                                 C46517)))) /
        C46271;
    const double C142 =
        (5 * (3 * C46348 + C46330 * C46359) +
         C46330 * (4 * C46359 +
                   C46330 * (3 * C46357 +
                             C46330 * (2 * C46330 * C46355 +
                                       C46330 * (C46355 + std::pow(C46326, 8) *
                                                              bs[8] * C46328 *
                                                              C46338))))) /
        C46291;
    const double C331 =
        (2 * C46330 * C46341 + C46330 * C46348 + ae * C46322 * C46387 +
         C46322 * (ae * C46387 + C46322 * C46359)) /
        C46291;
    const double C332 = (ae * (3 * C46377 + C46330 * C46387) +
                         C46322 * (3 * C46348 + C46330 * C46359)) /
                        C46291;
    const double C518 =
        (2 * C46330 * C46341 + C46330 * C46348 + be * C46323 * C46426 +
         C46323 * (be * C46426 + C46323 * C46359)) /
        C46291;
    const double C519 = (be * (3 * C46416 + C46330 * C46426) +
                         C46323 * (3 * C46348 + C46330 * C46359)) /
                        C46291;
    const double C949 = (ae * (C46323 * C46387 +
                               (2 * C46330 * C46446 +
                                C46330 * (C46446 + C46337 * C46339 * C46338)) *
                                   be) +
                         C46322 * (be * C46426 + C46323 * C46359)) /
                        C46291;
    const double C2016 =
        (2 * (be * C46416 + C46323 * C46348) +
         be * (C46416 + C46424 * std::pow(C46323, 2)) +
         C46323 * (C46348 + be * C46323 * C46424 + C46323 * C46511)) /
        C46291;
    const double C46561 = C46556 + C46559;
    const double C46588 = C46585 + C46586;
    const double C46602 = C46601 + C46599;
    const double C46643 = C46322 * C46641;
    const double C46670 = C46322 * C46667;
    const double C46695 = C46323 * C46667;
    const double C46681 = C46322 * C46679;
    const double C46399 = C46330 * C46398;
    const double C1429 =
        (2 * (ae * C46387 + C46322 * C46359) + ae * (C46387 + C46398 * C46457) +
         C46322 * (C46359 + ae * C46322 * C46398 +
                   C46322 * (ae * C46398 +
                             C46322 * (2 * C46330 * C46355 +
                                       C46330 * (C46355 + std::pow(C46326, 8) *
                                                              bs[8] * C46328 *
                                                              C46338))))) /
        C46291;
    const double C1427 =
        (2 * C46322 * C46387 + C46322 * (C46387 + C46398 * C46457)) / C46271;
    const double C1585 = (C46323 * (C46387 + C46398 * C46457) +
                          (C46747 + C46499 * C46457) * be) /
                         C46271;
    const double C2281 =
        (2 * (C46323 * C46387 + C46747 * be) +
         C46323 * (C46387 + C46323 * (C46323 * C46398 + C46499 * be) +
                   C46323 * C46499 * be) +
         (C46747 + C46499 * C46517) * be) /
        C46271;
    const double C1175 =
        (3 * (C46348 + ae * C46469 + C46322 * C46473) +
         ae * (2 * C46469 + C46322 * C46474) +
         C46322 * (2 * C46473 + ae * C46474 +
                   C46322 * (C46357 + ae * C46322 * C46396 +
                             C46322 * (ae * C46396 +
                                       C46322 * (C46355 + std::pow(C46326, 8) *
                                                              bs[8] * C46328 *
                                                              C46338))))) /
        C46291;
    const double C1705 =
        (2 * (ae * (C46323 * C46385 + C46481 * be) + C46322 * C46511) +
         ae * (C46323 * C46474 + (C46481 + C46493 * C46457) * be) +
         C46322 * (C46511 + ae * (C46323 * C46322 * C46396 + C46494 * be) +
                   C46322 * (ae * (C46323 * C46396 + C46493 * be) +
                             C46322 * (be * C46435 +
                                       C46323 * (C46355 + std::pow(C46326, 8) *
                                                              bs[8] * C46328 *
                                                              C46338))))) /
        C46291;
    const double C1168 = (3 * (C46377 + C46385 * C46457) +
                          C46322 * (2 * C46469 + C46322 * C46474)) /
                         C46271;
    const double C1311 =
        (C46377 + C46385 * C46457 + C46323 * (C46323 * C46474 + C46818 * be) +
         C46323 * C46818 * be) /
        C46271;
    const double C1701 = (C46323 * (2 * C46469 + C46322 * C46474) +
                          (2 * C46815 + C46322 * C46818) * be) /
                         C46271;
    const double C46562 = C46554 + C46560;
    const double C46644 = C46322 * C46642;
    const double C23237 =
        (2 * (C46323 * C46546 + C46896 * be) +
         C46323 * (C46546 + C46323 * (C46323 * C46642 + C46668 * be) +
                   C46323 * C46668 * be) +
         (C46896 + C46668 * C46517) * be) /
        C46271;
    const double C46438 = C46330 * C46437;
    const double C1587 =
        (be * C46426 + C46323 * C46359 +
         ae * (C46323 * C46322 * C46398 + C46322 * C46499 * be) +
         C46322 * (ae * (C46323 * C46398 + C46499 * be) +
                   C46322 * (be * C46437 +
                             C46323 * (2 * C46330 * C46355 +
                                       C46330 * (C46355 + std::pow(C46326, 8) *
                                                              bs[8] * C46328 *
                                                              C46338))))) /
        C46291;
    const double C2169 =
        (ae * (C46387 + C46323 * (C46323 * C46398 + C46499 * be) +
               C46323 * C46499 * be) +
         C46322 * (C46359 + be * C46323 * C46437 +
                   C46323 * (be * C46437 +
                             C46323 * (2 * C46330 * C46355 +
                                       C46330 * (C46355 + std::pow(C46326, 8) *
                                                              bs[8] * C46328 *
                                                              C46338))))) /
        C46291;
    const double C2283 =
        (2 * (be * C46426 + C46323 * C46359) + be * (C46426 + C46437 * C46517) +
         C46323 * (C46359 + be * C46323 * C46437 +
                   C46323 * (be * C46437 +
                             C46323 * (2 * C46330 * C46355 +
                                       C46330 * (C46355 + std::pow(C46326, 8) *
                                                              bs[8] * C46328 *
                                                              C46338))))) /
        C46291;
    const double C1428 =
        (2 * (C46322 * C46426 + C46747 * ae) +
         C46322 * (C46426 + C46322 * (C46322 * C46437 + C46499 * ae) +
                   C46322 * C46499 * ae) +
         (C46747 + C46499 * C46457) * ae) /
        C46271;
    const double C1586 =
        (C46323 * (C46426 + C46322 * (C46322 * C46437 + C46499 * ae) +
                   C46322 * C46499 * ae)) /
        C46271;
    const double C2168 = (C46322 * C46426 + C46747 * ae +
                          (C46322 * C46437 + C46499 * ae) * C46517) /
                         C46271;
    const double C2282 =
        (2 * C46323 * C46426 + C46323 * (C46426 + C46437 * C46517)) / C46271;
    const double C2019 =
        (3 * (C46348 + be * C46525 + C46323 * C46511) +
         be * (2 * C46525 + C46323 * C46527) +
         C46323 * (2 * C46511 + be * C46527 +
                   C46323 * (C46357 + be * C46323 * C46435 +
                             C46323 * (be * C46435 +
                                       C46323 * (C46355 + std::pow(C46326, 8) *
                                                              bs[8] * C46328 *
                                                              C46338))))) /
        C46291;
    const double C2401 =
        (ae * (2 * (C46323 * C46385 + C46481 * be) +
               C46323 * (C46385 + C46323 * (C46323 * C46396 + C46493 * be) +
                         C46323 * C46493 * be) +
               (C46481 + C46493 * C46517) * be) +
         C46322 * (2 * C46511 + be * C46527 +
                   C46323 * (C46357 + be * C46323 * C46435 +
                             C46323 * (be * C46435 +
                                       C46323 * (C46355 + std::pow(C46326, 8) *
                                                              bs[8] * C46328 *
                                                              C46338))))) /
        C46291;
    const double C2013 = (3 * (C46416 + C46424 * C46517) +
                          C46323 * (2 * C46525 + C46323 * C46527)) /
                         C46271;
    const double C46624 = C46622 + C46623;
    const double C46707 = C46323 * C46704;
    const double C176 = C170 + C171;
    const double C22130 = C5771 - C5770;
    const double C22250 = C5937 - C5936;
    const double C22252 = C5941 - C5940;
    const double C22604 = C6423 - C6422;
    const double C177 = C172 + C173;
    const double C367 = C363 + C364;
    const double C554 = C550 + C551;
    const double C161 = C47376 * C132;
    const double C356 = C47376 * C318;
    const double C667 = C47376 * C320;
    const double C22132 = C47376 * C5757;
    const double C162 = C113 * C133;
    const double C544 = C113 * C506;
    const double C10992 = C10328 * C506;
    const double C31757 = C31093 * C506;
    const double C781 = C113 * C508;
    const double C10360 = C10328 * C508;
    const double C31125 = C31093 * C508;
    const double C46754 = C46752 + C46753;
    const double C2167 =
        (C46322 * C46387 + C46323 * (C46323 * C46322 * C46398 + C46878 * be) +
         C46323 * C46878 * be) /
        C46271;
    const double C2166 = C46322 * C46747 + C46878 * C46517;
    const double C5756 = 4 * (2 * C46807 + C46322 * C46810) +
                         C46322 * (3 * C46810 + C46322 * C46908);
    const double C5922 = 2 * C46807 + C46322 * C46810 + C46908 * C46517;
    const double C6412 = C46323 * (3 * C46810 + C46322 * C46908);
    const double C12422 = 4 * (2 * C46864 + C46323 * C46867) +
                          C46323 * (3 * C46867 + C46323 * C46955);
    const double C27578 = 4 * (2 * C46923 + C46323 * C46926) +
                          C46323 * (3 * C46926 + C46323 * C46995);
    const double C46968 = C46965 + C46966;
    const double C47007 = C47004 + C47005;
    const double C47406 = C47133 * C47121;
    const double C47446 = C47411 + C47133;
    const double C47414 = C47142 / C47123;
    const double C47410 = C47142 * C47121;
    const double C655 = C47490 - (C47133 * C47124) / C47119;
    const double C47424 = C47215 * C47209;
    const double C47461 = C47426 + C47215;
    const double C47428 = C47222 / C47123;
    const double C47425 = C47222 * C47209;
    const double C1420 = C47494 - (C47215 * C47211) / C47119;
    const double C47430 = C47257 * C47251;
    const double C47467 = C47432 + C47257;
    const double C47434 = C47264 / C47123;
    const double C47431 = C47264 * C47251;
    const double C2276 = C47496 - (C47257 * C47253) / C47119;
    const double C174 = C168 * C114;
    const double C365 = C361 * C114;
    const double C670 = C664 * C114;
    const double C552 = C548 * C114;
    const double C783 = C777 * C114;
    const double C966 = C964 * C114;
    const double C22134 = C47376 * C5761;
    const double C175 = C169 * C47359;
    const double C366 = C362 * C47359;
    const double C671 = C665 * C47359;
    const double C553 = C549 * C47359;
    const double C784 = C778 * C47359;
    const double C967 = C965 * C47359;
    const double C7003 = C2173 - C2174;
    const double C7001 = C2174 - C2173;
    const double C6277 = C1591 - C1592;
    const double C6275 = C1592 - C1591;
    const double C22608 = C47376 * C6417;
    const double C26572 = C47473 * C6417;
    const double C37716 = C47473 * C6417;
    const double C22256 = C47376 * C5927;
    const double C27204 = C47473 * C5927;
    const double C38348 = C47473 * C5927;
    const double C28044 = C47473 * C6803;
    const double C39184 = C47473 * C6803;
    const double C23244 = C47376 * C7273;
    const double C26742 = C47473 * C7273;
    const double C37886 = C47473 * C7273;
    const double C5758 =
        (4 * (2 * C46801 + C46322 * C46899 + C46802 * ae) +
         C46322 *
             (3 * C46899 +
              C46322 *
                  (2 * C46895 +
                   C46322 * (C46414 + C46322 * (C46322 * C46422 + C46448 * ae) +
                             C46568 * ae) +
                   C46571 * ae) +
              C46896 * ae) +
         (3 * C46802 + C46322 * C46896) * ae) /
        C46271;
    const double C5924 =
        (2 * C46801 + C46322 * C46899 + C46802 * ae +
         (2 * C46895 +
          C46322 * (C46414 + C46322 * (C46322 * C46422 + C46448 * ae) +
                    C46568 * ae) +
          C46571 * ae) *
             C46517) /
        C46271;
    const double C6414 =
        (C46323 *
         (3 * C46899 +
          C46322 *
              (2 * C46895 +
               C46322 * (C46414 + C46322 * (C46322 * C46422 + C46448 * ae) +
                         C46568 * ae) +
               C46571 * ae) +
          C46896 * ae)) /
        C46271;
    const double C7270 =
        (2 * C46323 * C46899 +
         C46323 * (C46899 + (C46414 + C46322 * (C46322 * C46422 + C46448 * ae) +
                             C46568 * ae) *
                                C46517)) /
        C46271;
    const double C357 = C113 * C319;
    const double C668 = C113 * C321;
    const double C543 = C47376 * C505;
    const double C10989 = C47473 * C505;
    const double C31754 = C47473 * C505;
    const double C780 = C47376 * C507;
    const double C10357 = C47473 * C507;
    const double C31122 = C47473 * C507;
    const double C961 = C47376 * C942;
    const double C10851 = C47473 * C942;
    const double C31616 = C47473 * C942;
    const double C962 = C113 * C943;
    const double C10854 = C10328 * C943;
    const double C31619 = C31093 * C943;
    const double C160 = C113 * C120;
    const double C355 = C113 * C301;
    const double C666 = C113 * C302;
    const double C542 = C113 * C488;
    const double C10988 = C10328 * C488;
    const double C31753 = C31093 * C488;
    const double C779 = C113 * C489;
    const double C10356 = C10328 * C489;
    const double C31121 = C31093 * C489;
    const double C960 = C113 * C934;
    const double C10850 = C10328 * C934;
    const double C31615 = C31093 * C934;
    const double C2177 = C113 * C1300;
    const double C11202 = C10328 * C1300;
    const double C31967 = C31093 * C1300;
    const double C1595 = C113 * C1306;
    const double C10538 = C10328 * C1306;
    const double C31303 = C31093 * C1306;
    const double C46956 = C46954 + C46951;
    const double C46911 = C46910 + C46904;
    const double C46996 = C46994 + C46991;
    const double C22254 = C47376 * C5923;
    const double C27200 = C47473 * C5923;
    const double C38344 = C47473 * C5923;
    const double C22606 = C47376 * C6413;
    const double C26568 = C47473 * C6413;
    const double C37712 = C47473 * C6413;
    const double C22131 = C113 * C5755;
    const double C22253 = C113 * C5921;
    const double C27199 = C10328 * C5921;
    const double C38343 = C31093 * C5921;
    const double C22605 = C113 * C6411;
    const double C26567 = C10328 * C6411;
    const double C37711 = C31093 * C6411;
    const double C46671 = ae * C46669;
    const double C22893 =
        (3 * C46574 + be * C46620 +
         C46323 * (2 * C46570 + be * C46608 + C46323 * C46667) +
         ae * (3 * (C46534 + C46323 * C46678 + C46685 * be) +
               C46323 * (2 * C46678 +
                         C46323 * (C46628 +
                                   C46323 * (C46323 * C46322 * C46394 +
                                             C46656 * be) +
                                   C46323 * C46656 * be) +
                         C46689 * be) +
               (2 * C46685 + C46323 * C46689) * be) +
         C46322 *
             (ae * (3 * C46669 +
                    C46323 *
                        (2 * C46657 +
                         C46323 * (C46383 +
                                   C46323 * (C46323 * C46394 + C46491 * be) +
                                   C46323 * C46491 * be) +
                         C46690 * be) +
                    (2 * C46650 + C46323 * C46690) * be) +
              C46322 *
                  (3 * C46667 + be * (2 * C46651 + C46323 * C46691) +
                   C46323 * (2 * C46660 + be * C46691 +
                             C46323 * (C46355 + be * C46323 * C46433 +
                                       C46323 * (be * C46433 +
                                                 C46323 * std::pow(C46326, 8) *
                                                     bs[8] * C46328)))))) /
        C46291;
    const double C47002 = C46323 * C46669;
    const double C12423 =
        (4 * (2 * C46858 + C46323 * C46947 + C46859 * be) +
         C46323 * (3 * C46947 +
                   C46323 * (2 * C46593 + C46323 * C46669 + C46607 * be) +
                   C46946 * be) +
         (3 * C46859 + C46323 * C46946) * be) /
        C46271;
    const double C46972 = C46322 * C46971;
    const double C22892 =
        (3 * (C46899 + C46971 * C46517) +
         C46323 *
             (2 * C46323 * C46971 +
              C46323 *
                  (C46971 + (C46422 + C46322 * (C46322 * C46433 + C46491 * ae) +
                             C46656 * ae) *
                                C46517))) /
        C46271;
    const double C358 = C47376 * C331;
    const double C669 = C47376 * C332;
    const double C545 = C47376 * C518;
    const double C10993 = C47473 * C518;
    const double C31758 = C47473 * C518;
    const double C782 = C47376 * C519;
    const double C10361 = C47473 * C519;
    const double C31126 = C47473 * C519;
    const double C963 = C47376 * C949;
    const double C10855 = C47473 * C949;
    const double C31620 = C47473 * C949;
    const double C2292 = C47376 * C2016;
    const double C10717 = C47473 * C2016;
    const double C31482 = C47473 * C2016;
    const double C5928 =
        (2 * (ae * (C46380 + C46323 * (C46323 * C46391 + C46488 * be) +
                    C46323 * C46488 * be) +
              C46322 * C46588) +
         ae * (C46467 + C46323 * (C46323 * C46558 + C46587 * be) +
               C46323 * C46587 * be) +
         C46322 *
             (C46588 +
              ae * (C46548 + C46323 * (C46323 * C46322 * C46551 + C46584 * be) +
                    C46323 * C46584 * be) +
              C46322 *
                  (ae * (C46391 + C46323 * (C46323 * C46551 + C46579 * be) +
                         C46323 * C46579 * be) +
                   C46322 * (C46550 + be * C46323 * C46580 +
                             C46323 * (be * C46580 + C46323 * C46330 *
                                                         std::pow(C46326, 8) *
                                                         bs[8] * C46328))))) /
        C46291;
    const double C6804 =
        (ae * (3 * (C46380 + C46323 * C46600 + C46610 * be) +
               C46323 * (2 * C46600 +
                         C46323 * (C46391 +
                                   C46323 * (C46323 * C46551 + C46579 * be) +
                                   C46323 * C46579 * be) +
                         C46613 * be) +
               (2 * C46610 + C46323 * C46613) * be) +
         C46322 * (3 * C46588 + be * (2 * C46576 + C46323 * C46614) +
                   C46323 * (2 * C46582 + be * C46614 +
                             C46323 * (C46550 + be * C46323 * C46580 +
                                       C46323 * (be * C46580 +
                                                 C46323 * C46330 *
                                                     std::pow(C46326, 8) *
                                                     bs[8] * C46328))))) /
        C46291;
    const double C7274 =
        (2 * C46507 + be * C46523 + C46323 * C46588 +
         ae * (2 * (C46323 * C46548 + C46489 * be) +
               C46323 *
                   (C46548 + C46323 * (C46323 * C46322 * C46551 + C46584 * be) +
                    C46323 * C46584 * be) +
               (C46489 + C46584 * C46517) * be) +
         C46322 *
             (ae *
                  (2 * C46600 +
                   C46323 * (C46391 + C46323 * (C46323 * C46551 + C46579 * be) +
                             C46323 * C46579 * be) +
                   C46613 * be) +
              C46322 *
                  (2 * C46582 + be * C46614 +
                   C46323 * (C46550 + be * C46323 * C46580 +
                             C46323 * (be * C46580 + C46323 * C46330 *
                                                         std::pow(C46326, 8) *
                                                         bs[8] * C46328))))) /
        C46291;
    const double C46645 = C46633 + C46643;
    const double C46697 = C46696 + C46695;
    const double C46683 = C46682 + C46681;
    const double C46400 = C46390 + C46399;
    const double C5762 =
        (4 * (2 * C46466 + ae * C46467 + C46322 * C46561) +
         ae * (3 * C46467 + C46322 * C46562) +
         C46322 * (3 * C46561 + ae * C46562 +
                   C46322 * (2 * C46557 + ae * C46558 +
                             C46322 * (C46550 + ae * C46322 * C46551 +
                                       C46322 * (ae * C46551 +
                                                 C46322 * C46330 *
                                                     std::pow(C46326, 8) *
                                                     bs[8] * C46328))))) /
        C46291;
    const double C6418 =
        (3 * (C46507 + ae * (C46323 * C46548 + C46489 * be) + C46322 * C46602) +
         ae * (C46323 * C46562 + (2 * C46489 + C46322 * C46587) * be) +
         C46322 *
             (2 * C46602 + ae * (C46323 * C46558 + C46587 * be) +
              C46322 *
                  (C46582 + ae * (C46323 * C46322 * C46551 + C46584 * be) +
                   C46322 * (ae * (C46323 * C46551 + C46579 * be) +
                             C46322 * (be * C46580 + C46323 * C46330 *
                                                         std::pow(C46326, 8) *
                                                         bs[8] * C46328))))) /
        C46291;
    const double C5759 = (4 * (2 * C46462 + C46322 * C46467) +
                          C46322 * (3 * C46467 + C46322 * C46562)) /
                         C46271;
    const double C5925 =
        (2 * C46462 + C46322 * C46467 +
         C46323 * (C46323 * C46562 + C46908 * be) + C46323 * C46908 * be) /
        C46271;
    const double C6415 = (C46323 * (3 * C46467 + C46322 * C46562) +
                          (3 * C46810 + C46322 * C46908) * be) /
                         C46271;
    const double C46646 = C46631 + C46644;
    const double C46439 = C46429 + C46438;
    const double C12428 =
        (4 * (2 * C46507 + be * C46523 + C46323 * C46588) +
         be * (3 * C46523 + C46323 * C46624) +
         C46323 * (3 * C46588 + be * C46624 +
                   C46323 * (2 * C46582 + be * C46614 +
                             C46323 * (C46550 + be * C46323 * C46580 +
                                       C46323 * (be * C46580 +
                                                 C46323 * C46330 *
                                                     std::pow(C46326, 8) *
                                                     bs[8] * C46328))))) /
        C46291;
    const double C12426 = (4 * (2 * C46521 + C46323 * C46523) +
                           C46323 * (3 * C46523 + C46323 * C46624)) /
                          C46271;
    const double C46708 = C46706 + C46707;
    const double C121 = 5 * (3 * C46740 + C46330 * C46747) +
                        C46330 * (4 * C46747 + C46330 * C46754);
    const double C303 = 3 * C46740 + C46330 * C46747 + C46754 * C46457;
    const double C490 = 3 * C46740 + C46330 * C46747 + C46754 * C46517;
    const double C659 = C46322 * (4 * C46747 + C46330 * C46754);
    const double C772 = C46323 * (4 * C46747 + C46330 * C46754);
    const double C935 = C46323 * C46322 * C46754;
    const double C22122 = 5 * (3 * C46802 + C46322 * C46896) +
                          C46322 * (4 * C46896 + C46322 * C46968);
    const double C22244 = 3 * C46802 + C46322 * C46896 + C46968 * C46517;
    const double C22598 = C46323 * (4 * C46896 + C46322 * C46968);
    const double C43684 = 5 * (3 * C46859 + C46323 * C46946) +
                          C46323 * (4 * C46946 + C46323 * C47007);
    const double C47442 = C47406 / C47119;
    const double C47477 = C47446 / C47123;
    const double C47478 = C47448 + C47414;
    const double C657 = C47414 - C47140 / C47137;
    const double C47445 = C47410 / C47119;
    const double C47458 = C47424 / C47119;
    const double C47484 = C47461 / C47123;
    const double C47485 = C47462 + C47428;
    const double C1422 = C47428 - C47220 / C47137;
    const double C47460 = C47425 / C47119;
    const double C47464 = C47430 / C47119;
    const double C47487 = C47467 / C47123;
    const double C47488 = C47468 + C47434;
    const double C2278 = C47434 - C47262 / C47137;
    const double C47466 = C47431 / C47119;
    const double C178 = C174 + C175;
    const double C368 = C365 + C366;
    const double C672 = C670 + C671;
    const double C555 = C552 + C553;
    const double C785 = C783 + C784;
    const double C968 = C966 + C967;
    const double C22133 = C113 * C5758;
    const double C22255 = C113 * C5924;
    const double C27203 = C10328 * C5924;
    const double C38347 = C31093 * C5924;
    const double C22607 = C113 * C6414;
    const double C26571 = C10328 * C6414;
    const double C37715 = C31093 * C6414;
    const double C23243 = C113 * C7270;
    const double C26741 = C10328 * C7270;
    const double C37885 = C31093 * C7270;
    const double C12425 =
        (4 * (2 * C46866 + C46323 * C46956 + C46867 * be) +
         C46323 *
             (3 * C46956 +
              C46323 *
                  (2 * C46600 +
                   C46323 * (C46391 + C46323 * (C46323 * C46551 + C46579 * be) +
                             C46323 * C46579 * be) +
                   C46613 * be) +
              C46955 * be) +
         (3 * C46867 + C46323 * C46955) * be) /
        C46271;
    const double C5760 =
        (4 * (2 * C46809 + C46322 * C46911 + C46810 * ae) +
         C46322 *
             (3 * C46911 +
              C46322 *
                  (2 * C46907 +
                   C46322 * (C46430 + C46322 * (C46322 * C46580 + C46579 * ae) +
                             C46584 * ae) +
                   C46587 * ae) +
              C46908 * ae) +
         (3 * C46810 + C46322 * C46908) * ae) /
        C46271;
    const double C5926 =
        (2 * C46809 + C46322 * C46911 + C46810 * ae +
         (2 * C46907 +
          C46322 * (C46430 + C46322 * (C46322 * C46580 + C46579 * ae) +
                    C46584 * ae) +
          C46587 * ae) *
             C46517) /
        C46271;
    const double C6416 =
        (C46323 *
         (3 * C46911 +
          C46322 *
              (2 * C46907 +
               C46322 * (C46430 + C46322 * (C46322 * C46580 + C46579 * ae) +
                         C46584 * ae) +
               C46587 * ae) +
          C46908 * ae)) /
        C46271;
    const double C7272 =
        (2 * C46323 * C46911 +
         C46323 * (C46911 + (C46430 + C46322 * (C46322 * C46580 + C46579 * ae) +
                             C46584 * ae) *
                                C46517)) /
        C46271;
    const double C27579 =
        (4 * (2 * C46925 + C46323 * C46996 + C46926 * be) +
         C46323 * (3 * C46996 +
                   C46323 * (2 * C46678 +
                             C46323 * (C46628 +
                                       C46323 * (C46323 * C46322 * C46394 +
                                                 C46656 * be) +
                                       C46323 * C46656 * be) +
                             C46689 * be) +
                   C46995 * be) +
         (3 * C46926 + C46323 * C46995) * be) /
        C46271;
    const double C46672 = C46671 + C46670;
    const double C47006 = C47001 + C47002;
    const double C46973 = C46960 + C46972;
    const double C23239 =
        (2 * (ae * (2 * C46593 + C46323 * C46669 + C46607 * be) +
              C46322 * C46697) +
         ae * (2 * (C46323 * C46541 + C46571 * be) +
               C46323 * (C46541 + C46323 * (C46323 * C46637 + C46661 * be) +
                         C46323 * C46661 * be) +
               (C46571 + C46661 * C46517) * be) +
         C46322 *
             (C46697 +
              ae *
                  (2 * C46678 +
                   C46323 * (C46628 +
                             C46323 * (C46323 * C46322 * C46394 + C46656 * be) +
                             C46323 * C46656 * be) +
                   C46689 * be) +
              C46322 *
                  (ae * (2 * C46657 +
                         C46323 * (C46383 +
                                   C46323 * (C46323 * C46394 + C46491 * be) +
                                   C46323 * C46491 * be) +
                         C46690 * be) +
                   C46322 * (2 * C46660 + be * C46691 +
                             C46323 * (C46355 + be * C46323 * C46433 +
                                       C46323 * (be * C46433 +
                                                 C46323 * std::pow(C46326, 8) *
                                                     bs[8] * C46328)))))) /
        C46291;
    const double C27581 =
        (ae * (4 * (2 * C46593 + C46323 * C46669 + C46607 * be) +
               C46323 * (3 * C46669 +
                         C46323 * (2 * C46657 +
                                   C46323 * (C46383 +
                                             C46323 * (C46323 * C46394 +
                                                       C46491 * be) +
                                             C46323 * C46491 * be) +
                                   C46690 * be) +
                         C46703 * be) +
               (3 * C46607 + C46323 * C46703) * be) +
         C46322 *
             (4 * C46697 + be * (3 * C46608 + C46323 * C46704) +
              C46323 *
                  (3 * C46667 + be * C46704 +
                   C46323 * (2 * C46660 + be * C46691 +
                             C46323 * (C46355 + be * C46323 * C46433 +
                                       C46323 * (be * C46433 +
                                                 C46323 * std::pow(C46326, 8) *
                                                     bs[8] * C46328)))))) /
        C46291;
    const double C333 =
        (3 * C46348 + C46330 * C46359 + ae * C46322 * C46400 +
         C46322 * (ae * C46400 +
                   C46322 * (3 * C46357 +
                             C46330 * (2 * C46330 * C46355 +
                                       C46330 * (C46355 + std::pow(C46326, 8) *
                                                              bs[8] * C46328 *
                                                              C46338))))) /
        C46291;
    const double C662 =
        (ae * (4 * C46387 + C46330 * C46400) +
         C46322 * (4 * C46359 +
                   C46330 * (3 * C46357 +
                             C46330 * (2 * C46330 * C46355 +
                                       C46330 * (C46355 + std::pow(C46326, 8) *
                                                              bs[8] * C46328 *
                                                              C46338))))) /
        C46291;
    const double C134 = (5 * (3 * C46377 + C46330 * C46387) +
                         C46330 * (4 * C46387 + C46330 * C46400)) /
                        C46271;
    const double C322 =
        (3 * C46377 + C46330 * C46387 + C46400 * C46457) / C46271;
    const double C509 =
        (3 * C46377 + C46330 * C46387 +
         C46323 * (C46323 * C46400 + C46754 * be) + C46323 * C46754 * be) /
        C46271;
    const double C660 = (C46322 * (4 * C46387 + C46330 * C46400)) / C46271;
    const double C773 = (C46323 * (4 * C46387 + C46330 * C46400) +
                         (4 * C46747 + C46330 * C46754) * be) /
                        C46271;
    const double C944 =
        (C46323 * C46322 * C46400 + C46322 * C46754 * be) / C46271;
    const double C22125 =
        (5 * (3 * C46545 + ae * C46546 + C46322 * C46645) +
         ae * (4 * C46546 + C46322 * C46646) +
         C46322 *
             (4 * C46645 + ae * C46646 +
              C46322 *
                  (3 * C46641 + ae * C46642 +
                   C46322 * (2 * C46635 + ae * C46637 +
                             C46322 * (C46355 + ae * C46322 * C46394 +
                                       C46322 * (ae * C46394 +
                                                 C46322 * std::pow(C46326, 8) *
                                                     bs[8] * C46328)))))) /
        C46291;
    const double C22601 =
        (4 * (2 * C46595 + ae * (C46323 * C46541 + C46571 * be) +
              C46322 * C46683) +
         ae * (C46323 * C46646 + (3 * C46571 + C46322 * C46668) * be) +
         C46322 *
             (3 * C46683 + ae * (C46323 * C46642 + C46668 * be) +
              C46322 *
                  (2 * C46679 + ae * (C46323 * C46637 + C46661 * be) +
                   C46322 *
                       (C46660 + ae * (C46323 * C46322 * C46394 + C46656 * be) +
                        C46322 * (ae * (C46323 * C46394 + C46491 * be) +
                                  C46322 * (be * C46433 +
                                            C46323 * std::pow(C46326, 8) *
                                                bs[8] * C46328)))))) /
        C46291;
    const double C22123 = (5 * (3 * C46460 + C46322 * C46546) +
                           C46322 * (4 * C46546 + C46322 * C46646)) /
                          C46271;
    const double C22245 =
        (3 * C46460 + C46322 * C46546 +
         C46323 * (C46323 * C46646 + C46968 * be) + C46323 * C46968 * be) /
        C46271;
    const double C22599 = (C46323 * (4 * C46546 + C46322 * C46646) +
                           (4 * C46896 + C46322 * C46968) * be) /
                          C46271;
    const double C520 =
        (3 * C46348 + C46330 * C46359 + be * C46323 * C46439 +
         C46323 * (be * C46439 +
                   C46323 * (3 * C46357 +
                             C46330 * (2 * C46330 * C46355 +
                                       C46330 * (C46355 + std::pow(C46326, 8) *
                                                              bs[8] * C46328 *
                                                              C46338))))) /
        C46291;
    const double C775 =
        (be * (4 * C46426 + C46330 * C46439) +
         C46323 * (4 * C46359 +
                   C46330 * (3 * C46357 +
                             C46330 * (2 * C46330 * C46355 +
                                       C46330 * (C46355 + std::pow(C46326, 8) *
                                                              bs[8] * C46328 *
                                                              C46338))))) /
        C46291;
    const double C950 =
        (ae * (C46323 * C46400 +
               (3 * (C46446 + C46448 * C46338) +
                C46330 * (2 * C46330 * C46448 +
                          C46330 * (C46448 + C46344 * C46343 * C46338))) *
                   be) +
         C46322 * (be * C46439 +
                   C46323 * (3 * C46357 +
                             C46330 * (2 * C46330 * C46355 +
                                       C46330 * (C46355 + std::pow(C46326, 8) *
                                                              bs[8] * C46328 *
                                                              C46338))))) /
        C46291;
    const double C135 = (5 * (3 * C46416 + C46330 * C46426) +
                         C46330 * (4 * C46426 + C46330 * C46439)) /
                        C46271;
    const double C323 =
        (3 * C46416 + C46330 * C46426 +
         C46322 * (C46322 * C46439 + C46754 * ae) + C46322 * C46754 * ae) /
        C46271;
    const double C510 =
        (3 * C46416 + C46330 * C46426 + C46439 * C46517) / C46271;
    const double C661 = (C46322 * (4 * C46426 + C46330 * C46439) +
                         (4 * C46747 + C46330 * C46754) * ae) /
                        C46271;
    const double C774 = (C46323 * (4 * C46426 + C46330 * C46439)) / C46271;
    const double C945 = (C46323 * (C46322 * C46439 + C46754 * ae)) / C46271;
    const double C43687 =
        (5 * (3 * C46574 + be * C46620 + C46323 * C46697) +
         be * (4 * C46620 + C46323 * C46708) +
         C46323 *
             (4 * C46697 + be * C46708 +
              C46323 *
                  (3 * C46667 + be * C46704 +
                   C46323 * (2 * C46660 + be * C46691 +
                             C46323 * (C46355 + be * C46323 * C46433 +
                                       C46323 * (be * C46433 +
                                                 C46323 * std::pow(C46326, 8) *
                                                     bs[8] * C46328)))))) /
        C46291;
    const double C43686 = (5 * (3 * C46519 + C46323 * C46620) +
                           C46323 * (4 * C46620 + C46323 * C46708)) /
                          C46271;
    const double C47498 = C47442 + C47490;
    const double C656 = C47477 - (C47142 * C47124) / C47119;
    const double C111 = C47478 / C47123 - C47140 / C47449;
    const double C47491 = C47445 + C47477;
    const double C47499 = C47458 + C47494;
    const double C1421 = C47484 - (C47222 * C47211) / C47119;
    const double C1149 = C47485 / C47123 - C47220 / C47449;
    const double C47495 = C47460 + C47484;
    const double C47500 = C47464 + C47496;
    const double C2277 = C47487 - (C47264 * C47253) / C47119;
    const double C1994 = C47488 / C47123 - C47262 / C47449;
    const double C47497 = C47466 + C47487;
    const double C22247 =
        (3 * (C46574 +
              ae * (C46534 + C46323 * (C46323 * C46628 + C46568 * be) +
                    C46323 * C46568 * be) +
              C46322 * C46672) +
         ae * (C46546 + C46323 * (C46323 * C46642 + C46668 * be) +
               C46323 * C46668 * be) +
         C46322 *
             (2 * C46672 +
              ae * (C46541 + C46323 * (C46323 * C46637 + C46661 * be) +
                    C46323 * C46661 * be) +
              C46322 *
                  (C46667 +
                   ae * (C46628 +
                         C46323 * (C46323 * C46322 * C46394 + C46656 * be) +
                         C46323 * C46656 * be) +
                   C46322 * (ae * (C46383 +
                                   C46323 * (C46323 * C46394 + C46491 * be) +
                                   C46323 * C46491 * be) +
                             C46322 * (C46355 + be * C46323 * C46433 +
                                       C46323 * (be * C46433 +
                                                 C46323 * std::pow(C46326, 8) *
                                                     bs[8] * C46328)))))) /
        C46291;
    const double C47008 = C47006 + C47003;
    const double C46974 = C46973 + C46964;
    const double C108 =
        (C47489 + 2 * C47133) / C47123 - (C47498 * C47124) / C47119;
    const double C109 =
        (C47476 + 2 * C47142 + C47498) / C47123 - (C47491 * C47124) / C47119;
    const double C110 = (C47447 + C47139 / C47119 + C47491) / C47123 -
                        (C47478 * C47124) / C47119;
    const double C1146 =
        (C47492 + 2 * C47215) / C47123 - (C47499 * C47211) / C47119;
    const double C1147 =
        (C47480 + 2 * C47222 + C47499) / C47123 - (C47495 * C47211) / C47119;
    const double C1148 = (C47453 + C47219 / C47119 + C47495) / C47123 -
                         (C47485 * C47211) / C47119;
    const double C1991 =
        (C47493 + 2 * C47257) / C47123 - (C47500 * C47253) / C47119;
    const double C1992 =
        (C47482 + 2 * C47264 + C47500) / C47123 - (C47497 * C47253) / C47119;
    const double C1993 = (C47456 + C47261 / C47119 + C47497) / C47123 -
                         (C47488 * C47253) / C47119;
    const double C43685 =
        (5 * (3 * C46947 + C46323 * C47008 + C46946 * be) +
         C46323 * (4 * C47008 +
                   C46323 * (3 * C46669 +
                             C46323 * (2 * C46657 +
                                       C46323 * (C46383 +
                                                 C46323 * (C46323 * C46394 +
                                                           C46491 * be) +
                                                 C46323 * C46491 * be) +
                                       C46690 * be) +
                             C46703 * be) +
                   C47007 * be) +
         (4 * C46946 + C46323 * C47007) * be) /
        C46271;
    const double C22124 =
        (5 * (3 * C46899 + C46322 * C46974 + C46896 * ae) +
         C46322 * (4 * C46974 +
                   C46322 * (3 * C46971 +
                             C46322 * (2 * C46967 +
                                       C46322 * (C46422 +
                                                 C46322 * (C46322 * C46433 +
                                                           C46491 * ae) +
                                                 C46656 * ae) +
                                       C46661 * ae) +
                             C46668 * ae) +
                   C46968 * ae) +
         (4 * C46896 + C46322 * C46968) * ae) /
        C46271;
    const double C22246 =
        (3 * C46899 + C46322 * C46974 + C46896 * ae +
         (3 * C46971 +
          C46322 *
              (2 * C46967 +
               C46322 * (C46422 + C46322 * (C46322 * C46433 + C46491 * ae) +
                         C46656 * ae) +
               C46661 * ae) +
          C46668 * ae) *
             C46517) /
        C46271;
    const double C22600 =
        (C46323 *
         (4 * C46974 +
          C46322 *
              (3 * C46971 +
               C46322 * (2 * C46967 +
                         C46322 * (C46422 +
                                   C46322 * (C46322 * C46433 + C46491 * ae) +
                                   C46656 * ae) +
                         C46661 * ae) +
               C46668 * ae) +
          C46968 * ae)) /
        C46271;
    const double C23238 =
        (2 * C46323 * C46974 +
         C46323 *
             (C46974 +
              (2 * C46967 +
               C46322 * (C46422 + C46322 * (C46322 * C46433 + C46491 * ae) +
                         C46656 * ae) +
               C46661 * ae) *
                  C46517)) /
        C46271;
    d2ee[0] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                (((((C47376 * C122 - C113 * C115) * C114 +
                    (C47376 * C136 - C113 * C123) * C47359) *
                       C103 +
                   ((C144 - C145) * C114 + (C146 - C147) * C47359) * C104 +
                   C176 * C105) *
                      C47174 * C47215 +
                  (((C113 * C294 - C47376 * C304) * C114 +
                    (C113 * C305 - C47376 * C324) * C47359) *
                       C103 +
                   ((C335 - C336) * C114 + (C337 - C338) * C47359) * C104 +
                   C367 * C105) *
                      C47174 * C47222 +
                  (((C47376 * C310 - C113 * C297) * C114 +
                    (C47376 * C327 - C113 * C311) * C47359) *
                       C103 +
                   ((C343 - C344) * C114 + (C345 - C346) * C47359) * C104 +
                   C368 * C105) *
                      C47174 * C2868) *
                     C47133 +
                 ((((C145 - C144) * C114 + (C147 - C146) * C47359) * C103 +
                   ((C149 - C148) * C114 + (C151 - C150) * C47359) * C104 +
                   C177 * C105) *
                      C47174 * C47215 +
                  (((C336 - C335) * C114 + (C338 - C337) * C47359) * C103 +
                   ((C340 - C339) * C114 + (C342 - C341) * C47359) * C104 +
                   C672 * C105) *
                      C47174 * C47222 +
                  (((C344 - C343) * C114 + (C346 - C345) * C47359) * C103 +
                   ((C348 - C347) * C114 + (C350 - C349) * C47359) * C104 +
                   ((C355 - C356) * C114 + (C357 - C358) * C47359) * C105) *
                      C47174 * C2868) *
                     C47142 +
                 ((C176 * C103 +
                   ((C153 - C152) * C114 + (C155 - C154) * C47359) * C104 +
                   C178 * C105) *
                      C47174 * C47215 +
                  (C367 * C103 +
                   ((C352 - C351) * C114 + (C354 - C353) * C47359) * C104 +
                   ((C666 - C667) * C114 + (C668 - C669) * C47359) * C105) *
                      C47174 * C47222 +
                  (C368 * C103 +
                   ((C356 - C355) * C114 + (C358 - C357) * C47359) * C104 +
                   ((C47376 * C322 - C113 * C303) * C114 +
                    (C47376 * C333 - C113 * C323) * C47359) *
                       C105) *
                      C47174 * C2868) *
                     C2871)) /
               (p * q * std::sqrt(p + q));
    d2ee[1] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C47376 * C122 - C113 * C115) * C114 +
              (C47376 * C136 - C113 * C123) * C47359) *
                 C103 +
             ((C144 - C145) * C114 + (C146 - C147) * C47359) * C104 +
             C176 * C105) *
                C47422 +
            (((C113 * C481 - C47376 * C491) * C114 +
              (C113 * C492 - C47376 * C511) * C47359) *
                 C103 +
             ((C522 - C523) * C114 + (C524 - C525) * C47359) * C104 +
             C554 * C105) *
                C47261) *
               C47215 +
           ((((C113 * C294 - C47376 * C304) * C114 +
              (C113 * C305 - C47376 * C324) * C47359) *
                 C103 +
             ((C335 - C336) * C114 + (C337 - C338) * C47359) * C104 +
             C367 * C105) *
                C47422 +
            (((C47376 * C936 - C113 * C931) * C114 +
              (C47376 * C946 - C113 * C937) * C47359) *
                 C103 +
             ((C952 - C953) * C114 + (C954 - C955) * C47359) * C104 +
             C968 * C105) *
                C47261) *
               C47222 +
           ((((C47376 * C310 - C113 * C297) * C114 +
              (C47376 * C327 - C113 * C311) * C47359) *
                 C103 +
             ((C343 - C344) * C114 + (C345 - C346) * C47359) * C104 +
             C368 * C105) *
                C47422 +
            (((C113 * C1289 - C47376 * C1301) * C114 +
              (C113 * C1302 - C47376 * C1316) * C47359) *
                 C103 +
             ((C1589 - C1590) * C114 + (C1591 - C1592) * C47359) * C104 +
             ((C1593 - C1594) * C114 + (C1595 - C1596) * C47359) * C105) *
                C47261) *
               C2868) *
              C2608 +
          (((((C145 - C144) * C114 + (C147 - C146) * C47359) * C103 +
             ((C149 - C148) * C114 + (C151 - C150) * C47359) * C104 +
             C177 * C105) *
                C47422 +
            (((C523 - C522) * C114 + (C525 - C524) * C47359) * C103 +
             ((C527 - C526) * C114 + (C529 - C528) * C47359) * C104 +
             C785 * C105) *
                C47261) *
               C47215 +
           ((((C336 - C335) * C114 + (C338 - C337) * C47359) * C103 +
             ((C340 - C339) * C114 + (C342 - C341) * C47359) * C104 +
             C672 * C105) *
                C47422 +
            (((C953 - C952) * C114 + (C955 - C954) * C47359) * C103 +
             ((C957 - C956) * C114 + (C959 - C958) * C47359) * C104 +
             ((C960 - C961) * C114 + (C962 - C963) * C47359) * C105) *
                C47261) *
               C47222 +
           ((((C344 - C343) * C114 + (C346 - C345) * C47359) * C103 +
             ((C348 - C347) * C114 + (C350 - C349) * C47359) * C104 +
             ((C355 - C356) * C114 + (C357 - C358) * C47359) * C105) *
                C47422 +
            (((C1590 - C1589) * C114 + (C1592 - C1591) * C47359) * C103 +
             ((C1594 - C1593) * C114 + (C1596 - C1595) * C47359) * C104 +
             ((C47376 * C1585 - C113 * C1584) * C114 +
              (C47376 * C1587 - C113 * C1586) * C47359) *
                 C105) *
                C47261) *
               C2868) *
              C47139)) /
        (p * q * std::sqrt(p + q));
    d2ee[2] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C47376 * C122 - C113 * C115) * C114 +
             (C47376 * C136 - C113 * C123) * C47359) *
                C103 +
            ((C144 - C145) * C114 + (C146 - C147) * C47359) * C104 +
            C176 * C105) *
               C47174 * C47499 +
           (((C113 * C294 - C47376 * C304) * C114 +
             (C113 * C305 - C47376 * C324) * C47359) *
                C103 +
            ((C335 - C336) * C114 + (C337 - C338) * C47359) * C104 +
            C367 * C105) *
               C47174 * C47495 +
           (((C47376 * C310 - C113 * C297) * C114 +
             (C47376 * C327 - C113 * C311) * C47359) *
                C103 +
            ((C343 - C344) * C114 + (C345 - C346) * C47359) * C104 +
            C368 * C105) *
               C47174 * C47485 +
           (((C113 * C1152 - C47376 * C1158) * C114 +
             (C113 * C1159 - C47376 * C1170) * C47359) *
                C103 +
            ((C1431 - C1432) * C114 + (C1433 - C1434) * C47359) * C104 +
            ((C1435 - C1436) * C114 + (C1437 - C1438) * C47359) * C105) *
               C47174 * C47463) *
              C2608 +
          ((((C145 - C144) * C114 + (C147 - C146) * C47359) * C103 +
            ((C149 - C148) * C114 + (C151 - C150) * C47359) * C104 +
            C177 * C105) *
               C47174 * C47499 +
           (((C336 - C335) * C114 + (C338 - C337) * C47359) * C103 +
            ((C340 - C339) * C114 + (C342 - C341) * C47359) * C104 +
            C672 * C105) *
               C47174 * C47495 +
           (((C344 - C343) * C114 + (C346 - C345) * C47359) * C103 +
            ((C348 - C347) * C114 + (C350 - C349) * C47359) * C104 +
            ((C355 - C356) * C114 + (C357 - C358) * C47359) * C105) *
               C47174 * C47485 +
           (((C1432 - C1431) * C114 + (C1434 - C1433) * C47359) * C103 +
            ((C1436 - C1435) * C114 + (C1438 - C1437) * C47359) * C104 +
            ((C47376 * C1427 - C113 * C1426) * C114 +
             (C47376 * C1429 - C113 * C1428) * C47359) *
                C105) *
               C47174 * C47463) *
              C47139)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C47376 * C122 - C113 * C115) * C114 +
             (C47376 * C136 - C113 * C123) * C47359) *
                C103 +
            ((C144 - C145) * C114 + (C146 - C147) * C47359) * C104 +
            C176 * C105) *
               C47174 * C2500 +
           (((C113 * C294 - C47376 * C304) * C114 +
             (C113 * C305 - C47376 * C324) * C47359) *
                C103 +
            ((C335 - C336) * C114 + (C337 - C338) * C47359) * C104 +
            C367 * C105) *
               C47174 * C47219) *
              C47498 +
          ((((C145 - C144) * C114 + (C147 - C146) * C47359) * C103 +
            ((C149 - C148) * C114 + (C151 - C150) * C47359) * C104 +
            C177 * C105) *
               C47174 * C2500 +
           (((C336 - C335) * C114 + (C338 - C337) * C47359) * C103 +
            ((C340 - C339) * C114 + (C342 - C341) * C47359) * C104 +
            C672 * C105) *
               C47174 * C47219) *
              C47491 +
          ((C176 * C103 +
            ((C153 - C152) * C114 + (C155 - C154) * C47359) * C104 +
            C178 * C105) *
               C47174 * C2500 +
           (C367 * C103 +
            ((C352 - C351) * C114 + (C354 - C353) * C47359) * C104 +
            ((C666 - C667) * C114 + (C668 - C669) * C47359) * C105) *
               C47174 * C47219) *
              C47478 +
          ((C177 * C103 +
            ((C157 - C156) * C114 + (C159 - C158) * C47359) * C104 +
            ((C160 - C161) * C114 + (C162 - C163) * C47359) * C105) *
               C47174 * C2500 +
           (C672 * C103 +
            ((C667 - C666) * C114 + (C669 - C668) * C47359) * C104 +
            ((C47376 * C660 - C113 * C659) * C114 +
             (C47376 * C662 - C113 * C661) * C47359) *
                C105) *
               C47174 * C47219) *
              C47457)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C47376 * C122 - C113 * C115) * C114 +
              (C47376 * C136 - C113 * C123) * C47359) *
                 C103 +
             ((C144 - C145) * C114 + (C146 - C147) * C47359) * C104 +
             C176 * C105) *
                C47493 +
            (((C113 * C481 - C47376 * C491) * C114 +
              (C113 * C492 - C47376 * C511) * C47359) *
                 C103 +
             ((C522 - C523) * C114 + (C524 - C525) * C47359) * C104 +
             C554 * C105) *
                C47482 +
            (((C47376 * C497 - C113 * C484) * C114 +
              (C47376 * C514 - C113 * C498) * C47359) *
                 C103 +
             ((C530 - C531) * C114 + (C532 - C533) * C47359) * C104 +
             C555 * C105) *
                C47456) *
               C2500 +
           ((((C113 * C294 - C47376 * C304) * C114 +
              (C113 * C305 - C47376 * C324) * C47359) *
                 C103 +
             ((C335 - C336) * C114 + (C337 - C338) * C47359) * C104 +
             C367 * C105) *
                C47493 +
            (((C47376 * C936 - C113 * C931) * C114 +
              (C47376 * C946 - C113 * C937) * C47359) *
                 C103 +
             ((C952 - C953) * C114 + (C954 - C955) * C47359) * C104 +
             C968 * C105) *
                C47482 +
            (((C113 * C1286 - C47376 * C1295) * C114 +
              (C113 * C1296 - C47376 * C1313) * C47359) *
                 C103 +
             ((C2171 - C2172) * C114 + (C2173 - C2174) * C47359) * C104 +
             ((C2175 - C2176) * C114 + (C2177 - C2178) * C47359) * C105) *
                C47456) *
               C47219) *
              C2608 +
          (((((C145 - C144) * C114 + (C147 - C146) * C47359) * C103 +
             ((C149 - C148) * C114 + (C151 - C150) * C47359) * C104 +
             C177 * C105) *
                C47493 +
            (((C523 - C522) * C114 + (C525 - C524) * C47359) * C103 +
             ((C527 - C526) * C114 + (C529 - C528) * C47359) * C104 +
             C785 * C105) *
                C47482 +
            (((C531 - C530) * C114 + (C533 - C532) * C47359) * C103 +
             ((C535 - C534) * C114 + (C537 - C536) * C47359) * C104 +
             ((C542 - C543) * C114 + (C544 - C545) * C47359) * C105) *
                C47456) *
               C2500 +
           ((((C336 - C335) * C114 + (C338 - C337) * C47359) * C103 +
             ((C340 - C339) * C114 + (C342 - C341) * C47359) * C104 +
             C672 * C105) *
                C47493 +
            (((C953 - C952) * C114 + (C955 - C954) * C47359) * C103 +
             ((C957 - C956) * C114 + (C959 - C958) * C47359) * C104 +
             ((C960 - C961) * C114 + (C962 - C963) * C47359) * C105) *
                C47482 +
            (((C2172 - C2171) * C114 + (C2174 - C2173) * C47359) * C103 +
             ((C2176 - C2175) * C114 + (C2178 - C2177) * C47359) * C104 +
             ((C47376 * C2167 - C113 * C2166) * C114 +
              (C47376 * C2169 - C113 * C2168) * C47359) *
                 C105) *
                C47456) *
               C47219) *
              C47139)) /
            (p * q * std::sqrt(p + q));
    d2ee[3] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                ((((((C47376 * C122 - C113 * C115) * C114 +
                     (C47376 * C136 - C113 * C123) * C47359) *
                        C103 +
                    ((C144 - C145) * C114 + (C146 - C147) * C47359) * C104 +
                    C176 * C105) *
                       C47422 +
                   (((C113 * C481 - C47376 * C491) * C114 +
                     (C113 * C492 - C47376 * C511) * C47359) *
                        C103 +
                    ((C522 - C523) * C114 + (C524 - C525) * C47359) * C104 +
                    C554 * C105) *
                       C47261) *
                      C2500 +
                  ((((C113 * C294 - C47376 * C304) * C114 +
                     (C113 * C305 - C47376 * C324) * C47359) *
                        C103 +
                    ((C335 - C336) * C114 + (C337 - C338) * C47359) * C104 +
                    C367 * C105) *
                       C47422 +
                   (((C47376 * C936 - C113 * C931) * C114 +
                     (C47376 * C946 - C113 * C937) * C47359) *
                        C103 +
                    ((C952 - C953) * C114 + (C954 - C955) * C47359) * C104 +
                    C968 * C105) *
                       C47261) *
                      C47219) *
                     C47133 +
                 (((((C145 - C144) * C114 + (C147 - C146) * C47359) * C103 +
                    ((C149 - C148) * C114 + (C151 - C150) * C47359) * C104 +
                    C177 * C105) *
                       C47422 +
                   (((C523 - C522) * C114 + (C525 - C524) * C47359) * C103 +
                    ((C527 - C526) * C114 + (C529 - C528) * C47359) * C104 +
                    C785 * C105) *
                       C47261) *
                      C2500 +
                  ((((C336 - C335) * C114 + (C338 - C337) * C47359) * C103 +
                    ((C340 - C339) * C114 + (C342 - C341) * C47359) * C104 +
                    C672 * C105) *
                       C47422 +
                   (((C953 - C952) * C114 + (C955 - C954) * C47359) * C103 +
                    ((C957 - C956) * C114 + (C959 - C958) * C47359) * C104 +
                    ((C960 - C961) * C114 + (C962 - C963) * C47359) * C105) *
                       C47261) *
                      C47219) *
                     C47142 +
                 (((C176 * C103 +
                    ((C153 - C152) * C114 + (C155 - C154) * C47359) * C104 +
                    C178 * C105) *
                       C47422 +
                   (C554 * C103 +
                    ((C539 - C538) * C114 + (C541 - C540) * C47359) * C104 +
                    ((C779 - C780) * C114 + (C781 - C782) * C47359) * C105) *
                       C47261) *
                      C2500 +
                  ((C367 * C103 +
                    ((C352 - C351) * C114 + (C354 - C353) * C47359) * C104 +
                    ((C666 - C667) * C114 + (C668 - C669) * C47359) * C105) *
                       C47422 +
                   (C968 * C103 +
                    ((C961 - C960) * C114 + (C963 - C962) * C47359) * C104 +
                    ((C47376 * C944 - C113 * C935) * C114 +
                     (C47376 * C950 - C113 * C945) * C47359) *
                        C105) *
                       C47261) *
                      C47219) *
                     C2871)) /
               (p * q * std::sqrt(p + q));
    d2ee[4] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                (((((C47376 * C122 - C113 * C115) * C114 +
                    (C47376 * C136 - C113 * C123) * C47359) *
                       C103 +
                   ((C144 - C145) * C114 + (C146 - C147) * C47359) * C104 +
                   C176 * C105) *
                      C47174 * C2500 +
                  (((C113 * C294 - C47376 * C304) * C114 +
                    (C113 * C305 - C47376 * C324) * C47359) *
                       C103 +
                   ((C335 - C336) * C114 + (C337 - C338) * C47359) * C104 +
                   C367 * C105) *
                      C47174 * C47219) *
                     C47498 +
                 ((((C145 - C144) * C114 + (C147 - C146) * C47359) * C103 +
                   ((C149 - C148) * C114 + (C151 - C150) * C47359) * C104 +
                   C177 * C105) *
                      C47174 * C2500 +
                  (((C336 - C335) * C114 + (C338 - C337) * C47359) * C103 +
                   ((C340 - C339) * C114 + (C342 - C341) * C47359) * C104 +
                   C672 * C105) *
                      C47174 * C47219) *
                     C47491 +
                 ((C176 * C103 +
                   ((C153 - C152) * C114 + (C155 - C154) * C47359) * C104 +
                   C178 * C105) *
                      C47174 * C2500 +
                  (C367 * C103 +
                   ((C352 - C351) * C114 + (C354 - C353) * C47359) * C104 +
                   ((C666 - C667) * C114 + (C668 - C669) * C47359) * C105) *
                      C47174 * C47219) *
                     C47478 +
                 ((C177 * C103 +
                   ((C157 - C156) * C114 + (C159 - C158) * C47359) * C104 +
                   ((C160 - C161) * C114 + (C162 - C163) * C47359) * C105) *
                      C47174 * C2500 +
                  (C672 * C103 +
                   ((C667 - C666) * C114 + (C669 - C668) * C47359) * C104 +
                   ((C47376 * C660 - C113 * C659) * C114 +
                    (C47376 * C662 - C113 * C661) * C47359) *
                       C105) *
                      C47174 * C47219) *
                     C47457)) /
                   (p * q * std::sqrt(p + q)) -
               (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                (((((C47376 * C122 - C113 * C115) * C114 +
                    (C47376 * C136 - C113 * C123) * C47359) *
                       C103 +
                   ((C144 - C145) * C114 + (C146 - C147) * C47359) * C104 +
                   C176 * C105) *
                      C47174 * C47499 +
                  (((C113 * C294 - C47376 * C304) * C114 +
                    (C113 * C305 - C47376 * C324) * C47359) *
                       C103 +
                   ((C335 - C336) * C114 + (C337 - C338) * C47359) * C104 +
                   C367 * C105) *
                      C47174 * C47495 +
                  (((C47376 * C310 - C113 * C297) * C114 +
                    (C47376 * C327 - C113 * C311) * C47359) *
                       C103 +
                   ((C343 - C344) * C114 + (C345 - C346) * C47359) * C104 +
                   C368 * C105) *
                      C47174 * C47485 +
                  (((C113 * C1152 - C47376 * C1158) * C114 +
                    (C113 * C1159 - C47376 * C1170) * C47359) *
                       C103 +
                   ((C1431 - C1432) * C114 + (C1433 - C1434) * C47359) * C104 +
                   ((C1435 - C1436) * C114 + (C1437 - C1438) * C47359) * C105) *
                      C47174 * C47463) *
                     C2608 +
                 ((((C145 - C144) * C114 + (C147 - C146) * C47359) * C103 +
                   ((C149 - C148) * C114 + (C151 - C150) * C47359) * C104 +
                   C177 * C105) *
                      C47174 * C47499 +
                  (((C336 - C335) * C114 + (C338 - C337) * C47359) * C103 +
                   ((C340 - C339) * C114 + (C342 - C341) * C47359) * C104 +
                   C672 * C105) *
                      C47174 * C47495 +
                  (((C344 - C343) * C114 + (C346 - C345) * C47359) * C103 +
                   ((C348 - C347) * C114 + (C350 - C349) * C47359) * C104 +
                   ((C355 - C356) * C114 + (C357 - C358) * C47359) * C105) *
                      C47174 * C47485 +
                  (((C1432 - C1431) * C114 + (C1434 - C1433) * C47359) * C103 +
                   ((C1436 - C1435) * C114 + (C1438 - C1437) * C47359) * C104 +
                   ((C47376 * C1427 - C113 * C1426) * C114 +
                    (C47376 * C1429 - C113 * C1428) * C47359) *
                       C105) *
                      C47174 * C47463) *
                     C47139)) /
                   (p * q * std::sqrt(p + q));
    d2ee[5] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C47376 * C122 - C113 * C115) * C114 +
              (C47376 * C136 - C113 * C123) * C47359) *
                 C103 +
             ((C144 - C145) * C114 + (C146 - C147) * C47359) * C104 +
             C176 * C105) *
                C3262 +
            (((C113 * C481 - C47376 * C491) * C114 +
              (C113 * C492 - C47376 * C511) * C47359) *
                 C103 +
             ((C522 - C523) * C114 + (C524 - C525) * C47359) * C104 +
             C554 * C105) *
                C47261) *
               C47215 +
           ((((C113 * C294 - C47376 * C304) * C114 +
              (C113 * C305 - C47376 * C324) * C47359) *
                 C103 +
             ((C335 - C336) * C114 + (C337 - C338) * C47359) * C104 +
             C367 * C105) *
                C3262 +
            (((C47376 * C936 - C113 * C931) * C114 +
              (C47376 * C946 - C113 * C937) * C47359) *
                 C103 +
             ((C952 - C953) * C114 + (C954 - C955) * C47359) * C104 +
             C968 * C105) *
                C47261) *
               C47222 +
           ((((C47376 * C310 - C113 * C297) * C114 +
              (C47376 * C327 - C113 * C311) * C47359) *
                 C103 +
             ((C343 - C344) * C114 + (C345 - C346) * C47359) * C104 +
             C368 * C105) *
                C3262 +
            (((C113 * C1289 - C47376 * C1301) * C114 +
              (C113 * C1302 - C47376 * C1316) * C47359) *
                 C103 +
             ((C1589 - C1590) * C114 + (C1591 - C1592) * C47359) * C104 +
             ((C1593 - C1594) * C114 + (C1595 - C1596) * C47359) * C105) *
                C47261) *
               C2868) *
              C47407 +
          (((((C145 - C144) * C114 + (C147 - C146) * C47359) * C103 +
             ((C149 - C148) * C114 + (C151 - C150) * C47359) * C104 +
             C177 * C105) *
                C3262 +
            (((C523 - C522) * C114 + (C525 - C524) * C47359) * C103 +
             ((C527 - C526) * C114 + (C529 - C528) * C47359) * C104 +
             C785 * C105) *
                C47261) *
               C47215 +
           ((((C336 - C335) * C114 + (C338 - C337) * C47359) * C103 +
             ((C340 - C339) * C114 + (C342 - C341) * C47359) * C104 +
             C672 * C105) *
                C3262 +
            (((C953 - C952) * C114 + (C955 - C954) * C47359) * C103 +
             ((C957 - C956) * C114 + (C959 - C958) * C47359) * C104 +
             ((C960 - C961) * C114 + (C962 - C963) * C47359) * C105) *
                C47261) *
               C47222 +
           ((((C344 - C343) * C114 + (C346 - C345) * C47359) * C103 +
             ((C348 - C347) * C114 + (C350 - C349) * C47359) * C104 +
             ((C355 - C356) * C114 + (C357 - C358) * C47359) * C105) *
                C3262 +
            (((C1590 - C1589) * C114 + (C1592 - C1591) * C47359) * C103 +
             ((C1594 - C1593) * C114 + (C1596 - C1595) * C47359) * C104 +
             ((C47376 * C1585 - C113 * C1584) * C114 +
              (C47376 * C1587 - C113 * C1586) * C47359) *
                 C105) *
                C47261) *
               C2868) *
              C47139)) /
        (p * q * std::sqrt(p + q));
    d2ee[6] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                (((((C47376 * C122 - C113 * C115) * C114 +
                    (C47376 * C136 - C113 * C123) * C47359) *
                       C103 +
                   ((C144 - C145) * C114 + (C146 - C147) * C47359) * C104 +
                   C176 * C105) *
                      C47257 +
                  (((C113 * C481 - C47376 * C491) * C114 +
                    (C113 * C492 - C47376 * C511) * C47359) *
                       C103 +
                   ((C522 - C523) * C114 + (C524 - C525) * C47359) * C104 +
                   C554 * C105) *
                      C47264 +
                  (((C47376 * C497 - C113 * C484) * C114 +
                    (C47376 * C514 - C113 * C498) * C47359) *
                       C103 +
                   ((C530 - C531) * C114 + (C532 - C533) * C47359) * C104 +
                   C555 * C105) *
                      C3770) *
                     C47215 +
                 ((((C113 * C294 - C47376 * C304) * C114 +
                    (C113 * C305 - C47376 * C324) * C47359) *
                       C103 +
                   ((C335 - C336) * C114 + (C337 - C338) * C47359) * C104 +
                   C367 * C105) *
                      C47257 +
                  (((C47376 * C936 - C113 * C931) * C114 +
                    (C47376 * C946 - C113 * C937) * C47359) *
                       C103 +
                   ((C952 - C953) * C114 + (C954 - C955) * C47359) * C104 +
                   C968 * C105) *
                      C47264 +
                  (((C113 * C1286 - C47376 * C1295) * C114 +
                    (C113 * C1296 - C47376 * C1313) * C47359) *
                       C103 +
                   ((C2171 - C2172) * C114 + (C2173 - C2174) * C47359) * C104 +
                   ((C2175 - C2176) * C114 + (C2177 - C2178) * C47359) * C105) *
                      C3770) *
                     C47222 +
                 ((((C47376 * C310 - C113 * C297) * C114 +
                    (C47376 * C327 - C113 * C311) * C47359) *
                       C103 +
                   ((C343 - C344) * C114 + (C345 - C346) * C47359) * C104 +
                   C368 * C105) *
                      C47257 +
                  (((C113 * C1289 - C47376 * C1301) * C114 +
                    (C113 * C1302 - C47376 * C1316) * C47359) *
                       C103 +
                   ((C1589 - C1590) * C114 + (C1591 - C1592) * C47359) * C104 +
                   ((C1593 - C1594) * C114 + (C1595 - C1596) * C47359) * C105) *
                      C47264 +
                  (((C47376 * C1307 - C113 * C1292) * C114 +
                    (C47376 * C1319 - C113 * C1308) * C47359) *
                       C103 +
                   ((C47376 * C1309 - C113 * C1293) * C114 +
                    (C47376 * C1320 - C113 * C1310) * C47359) *
                       C104 +
                   ((C47376 * C1311 - C113 * C1294) * C114 +
                    (C47376 * C1321 - C113 * C1312) * C47359) *
                       C105) *
                      C3770) *
                     C2868) *
                C47128) /
               (p * q * std::sqrt(p + q));
    d2ee[7] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                (((((C47376 * C122 - C113 * C115) * C114 +
                    (C47376 * C136 - C113 * C123) * C47359) *
                       C103 +
                   ((C144 - C145) * C114 + (C146 - C147) * C47359) * C104 +
                   C176 * C105) *
                      C3262 +
                  (((C113 * C481 - C47376 * C491) * C114 +
                    (C113 * C492 - C47376 * C511) * C47359) *
                       C103 +
                   ((C522 - C523) * C114 + (C524 - C525) * C47359) * C104 +
                   C554 * C105) *
                      C47261) *
                     C47499 +
                 ((((C113 * C294 - C47376 * C304) * C114 +
                    (C113 * C305 - C47376 * C324) * C47359) *
                       C103 +
                   ((C335 - C336) * C114 + (C337 - C338) * C47359) * C104 +
                   C367 * C105) *
                      C3262 +
                  (((C47376 * C936 - C113 * C931) * C114 +
                    (C47376 * C946 - C113 * C937) * C47359) *
                       C103 +
                   ((C952 - C953) * C114 + (C954 - C955) * C47359) * C104 +
                   C968 * C105) *
                      C47261) *
                     C47495 +
                 ((((C47376 * C310 - C113 * C297) * C114 +
                    (C47376 * C327 - C113 * C311) * C47359) *
                       C103 +
                   ((C343 - C344) * C114 + (C345 - C346) * C47359) * C104 +
                   C368 * C105) *
                      C3262 +
                  (((C113 * C1289 - C47376 * C1301) * C114 +
                    (C113 * C1302 - C47376 * C1316) * C47359) *
                       C103 +
                   ((C1589 - C1590) * C114 + (C1591 - C1592) * C47359) * C104 +
                   ((C1593 - C1594) * C114 + (C1595 - C1596) * C47359) * C105) *
                      C47261) *
                     C47485 +
                 ((((C113 * C1152 - C47376 * C1158) * C114 +
                    (C113 * C1159 - C47376 * C1170) * C47359) *
                       C103 +
                   ((C1431 - C1432) * C114 + (C1433 - C1434) * C47359) * C104 +
                   ((C1435 - C1436) * C114 + (C1437 - C1438) * C47359) * C105) *
                      C3262 +
                  (((C47376 * C1697 - C113 * C1694) * C114 +
                    (C47376 * C1703 - C113 * C1698) * C47359) *
                       C103 +
                   ((C47376 * C1699 - C113 * C1695) * C114 +
                    (C47376 * C1704 - C113 * C1700) * C47359) *
                       C104 +
                   ((C47376 * C1701 - C113 * C1696) * C114 +
                    (C47376 * C1705 - C113 * C1702) * C47359) *
                       C105) *
                      C47261) *
                     C47463) *
                C47128) /
                   (p * q * std::sqrt(p + q)) -
               (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                ((((((C47376 * C122 - C113 * C115) * C114 +
                     (C47376 * C136 - C113 * C123) * C47359) *
                        C103 +
                    ((C144 - C145) * C114 + (C146 - C147) * C47359) * C104 +
                    C176 * C105) *
                       C3262 +
                   (((C113 * C481 - C47376 * C491) * C114 +
                     (C113 * C492 - C47376 * C511) * C47359) *
                        C103 +
                    ((C522 - C523) * C114 + (C524 - C525) * C47359) * C104 +
                    C554 * C105) *
                       C47261) *
                      C2500 +
                  ((((C113 * C294 - C47376 * C304) * C114 +
                     (C113 * C305 - C47376 * C324) * C47359) *
                        C103 +
                    ((C335 - C336) * C114 + (C337 - C338) * C47359) * C104 +
                    C367 * C105) *
                       C3262 +
                   (((C47376 * C936 - C113 * C931) * C114 +
                     (C47376 * C946 - C113 * C937) * C47359) *
                        C103 +
                    ((C952 - C953) * C114 + (C954 - C955) * C47359) * C104 +
                    C968 * C105) *
                       C47261) *
                      C47219) *
                     C47489 +
                 (((((C145 - C144) * C114 + (C147 - C146) * C47359) * C103 +
                    ((C149 - C148) * C114 + (C151 - C150) * C47359) * C104 +
                    C177 * C105) *
                       C3262 +
                   (((C523 - C522) * C114 + (C525 - C524) * C47359) * C103 +
                    ((C527 - C526) * C114 + (C529 - C528) * C47359) * C104 +
                    C785 * C105) *
                       C47261) *
                      C2500 +
                  ((((C336 - C335) * C114 + (C338 - C337) * C47359) * C103 +
                    ((C340 - C339) * C114 + (C342 - C341) * C47359) * C104 +
                    C672 * C105) *
                       C3262 +
                   (((C953 - C952) * C114 + (C955 - C954) * C47359) * C103 +
                    ((C957 - C956) * C114 + (C959 - C958) * C47359) * C104 +
                    ((C960 - C961) * C114 + (C962 - C963) * C47359) * C105) *
                       C47261) *
                      C47219) *
                     C47476 +
                 (((C176 * C103 +
                    ((C153 - C152) * C114 + (C155 - C154) * C47359) * C104 +
                    C178 * C105) *
                       C3262 +
                   (C554 * C103 +
                    ((C539 - C538) * C114 + (C541 - C540) * C47359) * C104 +
                    ((C779 - C780) * C114 + (C781 - C782) * C47359) * C105) *
                       C47261) *
                      C2500 +
                  ((C367 * C103 +
                    ((C352 - C351) * C114 + (C354 - C353) * C47359) * C104 +
                    ((C666 - C667) * C114 + (C668 - C669) * C47359) * C105) *
                       C3262 +
                   (C968 * C103 +
                    ((C961 - C960) * C114 + (C963 - C962) * C47359) * C104 +
                    ((C47376 * C944 - C113 * C935) * C114 +
                     (C47376 * C950 - C113 * C945) * C47359) *
                        C105) *
                       C47261) *
                      C47219) *
                     C47447)) /
                   (p * q * std::sqrt(p + q)) +
               (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                (((((C47376 * C122 - C113 * C115) * C114 +
                    (C47376 * C136 - C113 * C123) * C47359) *
                       C103 +
                   ((C144 - C145) * C114 + (C146 - C147) * C47359) * C104 +
                   C176 * C105) *
                      C47500 +
                  (((C113 * C481 - C47376 * C491) * C114 +
                    (C113 * C492 - C47376 * C511) * C47359) *
                       C103 +
                   ((C522 - C523) * C114 + (C524 - C525) * C47359) * C104 +
                   C554 * C105) *
                      C47497 +
                  (((C47376 * C497 - C113 * C484) * C114 +
                    (C47376 * C514 - C113 * C498) * C47359) *
                       C103 +
                   ((C530 - C531) * C114 + (C532 - C533) * C47359) * C104 +
                   C555 * C105) *
                      C47488 +
                  (((C113 * C1996 - C47376 * C2002) * C114 +
                    (C113 * C2003 - C47376 * C2014) * C47359) *
                       C103 +
                   ((C2285 - C2286) * C114 + (C2287 - C2288) * C47359) * C104 +
                   ((C2289 - C2290) * C114 + (C2291 - C2292) * C47359) * C105) *
                      C47469) *
                     C2500 +
                 ((((C113 * C294 - C47376 * C304) * C114 +
                    (C113 * C305 - C47376 * C324) * C47359) *
                       C103 +
                   ((C335 - C336) * C114 + (C337 - C338) * C47359) * C104 +
                   C367 * C105) *
                      C47500 +
                  (((C47376 * C936 - C113 * C931) * C114 +
                    (C47376 * C946 - C113 * C937) * C47359) *
                       C103 +
                   ((C952 - C953) * C114 + (C954 - C955) * C47359) * C104 +
                   C968 * C105) *
                      C47497 +
                  (((C113 * C1286 - C47376 * C1295) * C114 +
                    (C113 * C1296 - C47376 * C1313) * C47359) *
                       C103 +
                   ((C2171 - C2172) * C114 + (C2173 - C2174) * C47359) * C104 +
                   ((C2175 - C2176) * C114 + (C2177 - C2178) * C47359) * C105) *
                      C47488 +
                  (((C47376 * C2393 - C113 * C2390) * C114 +
                    (C47376 * C2399 - C113 * C2394) * C47359) *
                       C103 +
                   ((C47376 * C2395 - C113 * C2391) * C114 +
                    (C47376 * C2400 - C113 * C2396) * C47359) *
                       C104 +
                   ((C47376 * C2397 - C113 * C2392) * C114 +
                    (C47376 * C2401 - C113 * C2398) * C47359) *
                       C105) *
                      C47469) *
                     C47219) *
                C47128) /
                   (p * q * std::sqrt(p + q));
    d2ee[8] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C47376 * C122 - C113 * C115) * C114 +
              (C47376 * C136 - C113 * C123) * C47359) *
                 C103 +
             ((C144 - C145) * C114 + (C146 - C147) * C47359) * C104 +
             C176 * C105) *
                C47257 +
            (((C113 * C481 - C47376 * C491) * C114 +
              (C113 * C492 - C47376 * C511) * C47359) *
                 C103 +
             ((C522 - C523) * C114 + (C524 - C525) * C47359) * C104 +
             C554 * C105) *
                C47264 +
            (((C47376 * C497 - C113 * C484) * C114 +
              (C47376 * C514 - C113 * C498) * C47359) *
                 C103 +
             ((C530 - C531) * C114 + (C532 - C533) * C47359) * C104 +
             C555 * C105) *
                C3770) *
               C2500 +
           ((((C113 * C294 - C47376 * C304) * C114 +
              (C113 * C305 - C47376 * C324) * C47359) *
                 C103 +
             ((C335 - C336) * C114 + (C337 - C338) * C47359) * C104 +
             C367 * C105) *
                C47257 +
            (((C47376 * C936 - C113 * C931) * C114 +
              (C47376 * C946 - C113 * C937) * C47359) *
                 C103 +
             ((C952 - C953) * C114 + (C954 - C955) * C47359) * C104 +
             C968 * C105) *
                C47264 +
            (((C113 * C1286 - C47376 * C1295) * C114 +
              (C113 * C1296 - C47376 * C1313) * C47359) *
                 C103 +
             ((C2171 - C2172) * C114 + (C2173 - C2174) * C47359) * C104 +
             ((C2175 - C2176) * C114 + (C2177 - C2178) * C47359) * C105) *
                C3770) *
               C47219) *
              C47407 +
          (((((C145 - C144) * C114 + (C147 - C146) * C47359) * C103 +
             ((C149 - C148) * C114 + (C151 - C150) * C47359) * C104 +
             C177 * C105) *
                C47257 +
            (((C523 - C522) * C114 + (C525 - C524) * C47359) * C103 +
             ((C527 - C526) * C114 + (C529 - C528) * C47359) * C104 +
             C785 * C105) *
                C47264 +
            (((C531 - C530) * C114 + (C533 - C532) * C47359) * C103 +
             ((C535 - C534) * C114 + (C537 - C536) * C47359) * C104 +
             ((C542 - C543) * C114 + (C544 - C545) * C47359) * C105) *
                C3770) *
               C2500 +
           ((((C336 - C335) * C114 + (C338 - C337) * C47359) * C103 +
             ((C340 - C339) * C114 + (C342 - C341) * C47359) * C104 +
             C672 * C105) *
                C47257 +
            (((C953 - C952) * C114 + (C955 - C954) * C47359) * C103 +
             ((C957 - C956) * C114 + (C959 - C958) * C47359) * C104 +
             ((C960 - C961) * C114 + (C962 - C963) * C47359) * C105) *
                C47264 +
            (((C2172 - C2171) * C114 + (C2174 - C2173) * C47359) * C103 +
             ((C2176 - C2175) * C114 + (C2178 - C2177) * C47359) * C104 +
             ((C47376 * C2167 - C113 * C2166) * C114 +
              (C47376 * C2169 - C113 * C2168) * C47359) *
                 C105) *
                C3770) *
               C47219) *
              C47139)) /
        (p * q * std::sqrt(p + q));
    d2ee[9] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                ((((((C47376 * C122 - C113 * C115) * C114 +
                     (C47376 * C136 - C113 * C123) * C47359) *
                        C103 +
                    ((C144 - C145) * C114 + (C146 - C147) * C47359) * C104 +
                    C176 * C105) *
                       C3262 +
                   (((C113 * C481 - C47376 * C491) * C114 +
                     (C113 * C492 - C47376 * C511) * C47359) *
                        C103 +
                    ((C522 - C523) * C114 + (C524 - C525) * C47359) * C104 +
                    C554 * C105) *
                       C47261) *
                      C2500 +
                  ((((C113 * C294 - C47376 * C304) * C114 +
                     (C113 * C305 - C47376 * C324) * C47359) *
                        C103 +
                    ((C335 - C336) * C114 + (C337 - C338) * C47359) * C104 +
                    C367 * C105) *
                       C3262 +
                   (((C47376 * C936 - C113 * C931) * C114 +
                     (C47376 * C946 - C113 * C937) * C47359) *
                        C103 +
                    ((C952 - C953) * C114 + (C954 - C955) * C47359) * C104 +
                    C968 * C105) *
                       C47261) *
                      C47219) *
                     C47489 +
                 (((((C145 - C144) * C114 + (C147 - C146) * C47359) * C103 +
                    ((C149 - C148) * C114 + (C151 - C150) * C47359) * C104 +
                    C177 * C105) *
                       C3262 +
                   (((C523 - C522) * C114 + (C525 - C524) * C47359) * C103 +
                    ((C527 - C526) * C114 + (C529 - C528) * C47359) * C104 +
                    C785 * C105) *
                       C47261) *
                      C2500 +
                  ((((C336 - C335) * C114 + (C338 - C337) * C47359) * C103 +
                    ((C340 - C339) * C114 + (C342 - C341) * C47359) * C104 +
                    C672 * C105) *
                       C3262 +
                   (((C953 - C952) * C114 + (C955 - C954) * C47359) * C103 +
                    ((C957 - C956) * C114 + (C959 - C958) * C47359) * C104 +
                    ((C960 - C961) * C114 + (C962 - C963) * C47359) * C105) *
                       C47261) *
                      C47219) *
                     C47476 +
                 (((C176 * C103 +
                    ((C153 - C152) * C114 + (C155 - C154) * C47359) * C104 +
                    C178 * C105) *
                       C3262 +
                   (C554 * C103 +
                    ((C539 - C538) * C114 + (C541 - C540) * C47359) * C104 +
                    ((C779 - C780) * C114 + (C781 - C782) * C47359) * C105) *
                       C47261) *
                      C2500 +
                  ((C367 * C103 +
                    ((C352 - C351) * C114 + (C354 - C353) * C47359) * C104 +
                    ((C666 - C667) * C114 + (C668 - C669) * C47359) * C105) *
                       C3262 +
                   (C968 * C103 +
                    ((C961 - C960) * C114 + (C963 - C962) * C47359) * C104 +
                    ((C47376 * C944 - C113 * C935) * C114 +
                     (C47376 * C950 - C113 * C945) * C47359) *
                        C105) *
                       C47261) *
                      C47219) *
                     C47447)) /
                   (p * q * std::sqrt(p + q)) -
               (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                (((((C47376 * C122 - C113 * C115) * C114 +
                    (C47376 * C136 - C113 * C123) * C47359) *
                       C103 +
                   ((C144 - C145) * C114 + (C146 - C147) * C47359) * C104 +
                   C176 * C105) *
                      C3262 +
                  (((C113 * C481 - C47376 * C491) * C114 +
                    (C113 * C492 - C47376 * C511) * C47359) *
                       C103 +
                   ((C522 - C523) * C114 + (C524 - C525) * C47359) * C104 +
                   C554 * C105) *
                      C47261) *
                     C47499 +
                 ((((C113 * C294 - C47376 * C304) * C114 +
                    (C113 * C305 - C47376 * C324) * C47359) *
                       C103 +
                   ((C335 - C336) * C114 + (C337 - C338) * C47359) * C104 +
                   C367 * C105) *
                      C3262 +
                  (((C47376 * C936 - C113 * C931) * C114 +
                    (C47376 * C946 - C113 * C937) * C47359) *
                       C103 +
                   ((C952 - C953) * C114 + (C954 - C955) * C47359) * C104 +
                   C968 * C105) *
                      C47261) *
                     C47495 +
                 ((((C47376 * C310 - C113 * C297) * C114 +
                    (C47376 * C327 - C113 * C311) * C47359) *
                       C103 +
                   ((C343 - C344) * C114 + (C345 - C346) * C47359) * C104 +
                   C368 * C105) *
                      C3262 +
                  (((C113 * C1289 - C47376 * C1301) * C114 +
                    (C113 * C1302 - C47376 * C1316) * C47359) *
                       C103 +
                   ((C1589 - C1590) * C114 + (C1591 - C1592) * C47359) * C104 +
                   ((C1593 - C1594) * C114 + (C1595 - C1596) * C47359) * C105) *
                      C47261) *
                     C47485 +
                 ((((C113 * C1152 - C47376 * C1158) * C114 +
                    (C113 * C1159 - C47376 * C1170) * C47359) *
                       C103 +
                   ((C1431 - C1432) * C114 + (C1433 - C1434) * C47359) * C104 +
                   ((C1435 - C1436) * C114 + (C1437 - C1438) * C47359) * C105) *
                      C3262 +
                  (((C47376 * C1697 - C113 * C1694) * C114 +
                    (C47376 * C1703 - C113 * C1698) * C47359) *
                       C103 +
                   ((C47376 * C1699 - C113 * C1695) * C114 +
                    (C47376 * C1704 - C113 * C1700) * C47359) *
                       C104 +
                   ((C47376 * C1701 - C113 * C1696) * C114 +
                    (C47376 * C1705 - C113 * C1702) * C47359) *
                       C105) *
                      C47261) *
                     C47463) *
                C47128) /
                   (p * q * std::sqrt(p + q));
    d2ee[10] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C47376 * C122 - C113 * C115) * C114 +
             (C47376 * C136 - C113 * C123) * C47359) *
                C103 +
            ((C144 - C145) * C114 + (C146 - C147) * C47359) * C104 +
            C176 * C105) *
               C47174 * C1420 +
           (((C113 * C294 - C47376 * C304) * C114 +
             (C113 * C305 - C47376 * C324) * C47359) *
                C103 +
            ((C335 - C336) * C114 + (C337 - C338) * C47359) * C104 +
            C367 * C105) *
               C47174 * C1421 +
           (((C47376 * C310 - C113 * C297) * C114 +
             (C47376 * C327 - C113 * C311) * C47359) *
                C103 +
            ((C343 - C344) * C114 + (C345 - C346) * C47359) * C104 +
            C368 * C105) *
               C47174 * C1422 +
           (((C113 * C1152 - C47376 * C1158) * C114 +
             (C113 * C1159 - C47376 * C1170) * C47359) *
                C103 +
            ((C1431 - C1432) * C114 + (C1433 - C1434) * C47359) * C104 +
            ((C1435 - C1436) * C114 + (C1437 - C1438) * C47359) * C105) *
               C47174 * C47463) *
              C47407 +
          ((((C145 - C144) * C114 + (C147 - C146) * C47359) * C103 +
            ((C149 - C148) * C114 + (C151 - C150) * C47359) * C104 +
            C177 * C105) *
               C47174 * C1420 +
           (((C336 - C335) * C114 + (C338 - C337) * C47359) * C103 +
            ((C340 - C339) * C114 + (C342 - C341) * C47359) * C104 +
            C672 * C105) *
               C47174 * C1421 +
           (((C344 - C343) * C114 + (C346 - C345) * C47359) * C103 +
            ((C348 - C347) * C114 + (C350 - C349) * C47359) * C104 +
            ((C355 - C356) * C114 + (C357 - C358) * C47359) * C105) *
               C47174 * C1422 +
           (((C1432 - C1431) * C114 + (C1434 - C1433) * C47359) * C103 +
            ((C1436 - C1435) * C114 + (C1438 - C1437) * C47359) * C104 +
            ((C47376 * C1427 - C113 * C1426) * C114 +
             (C47376 * C1429 - C113 * C1428) * C47359) *
                C105) *
               C47174 * C47463) *
              C47139)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C47376 * C122 - C113 * C115) * C114 +
             (C47376 * C136 - C113 * C123) * C47359) *
                C103 +
            ((C144 - C145) * C114 + (C146 - C147) * C47359) * C104 +
            C176 * C105) *
               C47174 * C47421 +
           (((C113 * C294 - C47376 * C304) * C114 +
             (C113 * C305 - C47376 * C324) * C47359) *
                C103 +
            ((C335 - C336) * C114 + (C337 - C338) * C47359) * C104 +
            C367 * C105) *
               C47174 * C47219) *
              C655 +
          ((((C145 - C144) * C114 + (C147 - C146) * C47359) * C103 +
            ((C149 - C148) * C114 + (C151 - C150) * C47359) * C104 +
            C177 * C105) *
               C47174 * C47421 +
           (((C336 - C335) * C114 + (C338 - C337) * C47359) * C103 +
            ((C340 - C339) * C114 + (C342 - C341) * C47359) * C104 +
            C672 * C105) *
               C47174 * C47219) *
              C656 +
          ((C176 * C103 +
            ((C153 - C152) * C114 + (C155 - C154) * C47359) * C104 +
            C178 * C105) *
               C47174 * C47421 +
           (C367 * C103 +
            ((C352 - C351) * C114 + (C354 - C353) * C47359) * C104 +
            ((C666 - C667) * C114 + (C668 - C669) * C47359) * C105) *
               C47174 * C47219) *
              C657 +
          ((C177 * C103 +
            ((C157 - C156) * C114 + (C159 - C158) * C47359) * C104 +
            ((C160 - C161) * C114 + (C162 - C163) * C47359) * C105) *
               C47174 * C47421 +
           (C672 * C103 +
            ((C667 - C666) * C114 + (C669 - C668) * C47359) * C104 +
            ((C47376 * C660 - C113 * C659) * C114 +
             (C47376 * C662 - C113 * C661) * C47359) *
                C105) *
               C47174 * C47219) *
              C47457)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C47376 * C122 - C113 * C115) * C114 +
              (C47376 * C136 - C113 * C123) * C47359) *
                 C103 +
             ((C144 - C145) * C114 + (C146 - C147) * C47359) * C104 +
             C176 * C105) *
                C1816 +
            (((C113 * C481 - C47376 * C491) * C114 +
              (C113 * C492 - C47376 * C511) * C47359) *
                 C103 +
             ((C522 - C523) * C114 + (C524 - C525) * C47359) * C104 +
             C554 * C105) *
                C1817 +
            (((C47376 * C497 - C113 * C484) * C114 +
              (C47376 * C514 - C113 * C498) * C47359) *
                 C103 +
             ((C530 - C531) * C114 + (C532 - C533) * C47359) * C104 +
             C555 * C105) *
                C47456) *
               C47421 +
           ((((C113 * C294 - C47376 * C304) * C114 +
              (C113 * C305 - C47376 * C324) * C47359) *
                 C103 +
             ((C335 - C336) * C114 + (C337 - C338) * C47359) * C104 +
             C367 * C105) *
                C1816 +
            (((C47376 * C936 - C113 * C931) * C114 +
              (C47376 * C946 - C113 * C937) * C47359) *
                 C103 +
             ((C952 - C953) * C114 + (C954 - C955) * C47359) * C104 +
             C968 * C105) *
                C1817 +
            (((C113 * C1286 - C47376 * C1295) * C114 +
              (C113 * C1296 - C47376 * C1313) * C47359) *
                 C103 +
             ((C2171 - C2172) * C114 + (C2173 - C2174) * C47359) * C104 +
             ((C2175 - C2176) * C114 + (C2177 - C2178) * C47359) * C105) *
                C47456) *
               C47219) *
              C47407 +
          (((((C145 - C144) * C114 + (C147 - C146) * C47359) * C103 +
             ((C149 - C148) * C114 + (C151 - C150) * C47359) * C104 +
             C177 * C105) *
                C1816 +
            (((C523 - C522) * C114 + (C525 - C524) * C47359) * C103 +
             ((C527 - C526) * C114 + (C529 - C528) * C47359) * C104 +
             C785 * C105) *
                C1817 +
            (((C531 - C530) * C114 + (C533 - C532) * C47359) * C103 +
             ((C535 - C534) * C114 + (C537 - C536) * C47359) * C104 +
             ((C542 - C543) * C114 + (C544 - C545) * C47359) * C105) *
                C47456) *
               C47421 +
           ((((C336 - C335) * C114 + (C338 - C337) * C47359) * C103 +
             ((C340 - C339) * C114 + (C342 - C341) * C47359) * C104 +
             C672 * C105) *
                C1816 +
            (((C953 - C952) * C114 + (C955 - C954) * C47359) * C103 +
             ((C957 - C956) * C114 + (C959 - C958) * C47359) * C104 +
             ((C960 - C961) * C114 + (C962 - C963) * C47359) * C105) *
                C1817 +
            (((C2172 - C2171) * C114 + (C2174 - C2173) * C47359) * C103 +
             ((C2176 - C2175) * C114 + (C2178 - C2177) * C47359) * C104 +
             ((C47376 * C2167 - C113 * C2166) * C114 +
              (C47376 * C2169 - C113 * C2168) * C47359) *
                 C105) *
                C47456) *
               C47219) *
              C47139)) /
            (p * q * std::sqrt(p + q));
    d2ee[11] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C47376 * C122 - C113 * C115) * C114 +
             (C47376 * C136 - C113 * C123) * C47359) *
                C103 +
            ((C144 - C145) * C114 + (C146 - C147) * C47359) * C104 +
            C176 * C105) *
               C47422 +
           (((C113 * C481 - C47376 * C491) * C114 +
             (C113 * C492 - C47376 * C511) * C47359) *
                C103 +
            ((C522 - C523) * C114 + (C524 - C525) * C47359) * C104 +
            C554 * C105) *
               C47261) *
              C1420 +
          ((((C113 * C294 - C47376 * C304) * C114 +
             (C113 * C305 - C47376 * C324) * C47359) *
                C103 +
            ((C335 - C336) * C114 + (C337 - C338) * C47359) * C104 +
            C367 * C105) *
               C47422 +
           (((C47376 * C936 - C113 * C931) * C114 +
             (C47376 * C946 - C113 * C937) * C47359) *
                C103 +
            ((C952 - C953) * C114 + (C954 - C955) * C47359) * C104 +
            C968 * C105) *
               C47261) *
              C1421 +
          ((((C47376 * C310 - C113 * C297) * C114 +
             (C47376 * C327 - C113 * C311) * C47359) *
                C103 +
            ((C343 - C344) * C114 + (C345 - C346) * C47359) * C104 +
            C368 * C105) *
               C47422 +
           (((C113 * C1289 - C47376 * C1301) * C114 +
             (C113 * C1302 - C47376 * C1316) * C47359) *
                C103 +
            ((C1589 - C1590) * C114 + (C1591 - C1592) * C47359) * C104 +
            ((C1593 - C1594) * C114 + (C1595 - C1596) * C47359) * C105) *
               C47261) *
              C1422 +
          ((((C113 * C1152 - C47376 * C1158) * C114 +
             (C113 * C1159 - C47376 * C1170) * C47359) *
                C103 +
            ((C1431 - C1432) * C114 + (C1433 - C1434) * C47359) * C104 +
            ((C1435 - C1436) * C114 + (C1437 - C1438) * C47359) * C105) *
               C47422 +
           (((C47376 * C1697 - C113 * C1694) * C114 +
             (C47376 * C1703 - C113 * C1698) * C47359) *
                C103 +
            ((C47376 * C1699 - C113 * C1695) * C114 +
             (C47376 * C1704 - C113 * C1700) * C47359) *
                C104 +
            ((C47376 * C1701 - C113 * C1696) * C114 +
             (C47376 * C1705 - C113 * C1702) * C47359) *
                C105) *
               C47261) *
              C47463) *
         C47128) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C47376 * C122 - C113 * C115) * C114 +
              (C47376 * C136 - C113 * C123) * C47359) *
                 C103 +
             ((C144 - C145) * C114 + (C146 - C147) * C47359) * C104 +
             C176 * C105) *
                C47422 +
            (((C113 * C481 - C47376 * C491) * C114 +
              (C113 * C492 - C47376 * C511) * C47359) *
                 C103 +
             ((C522 - C523) * C114 + (C524 - C525) * C47359) * C104 +
             C554 * C105) *
                C47261) *
               C47421 +
           ((((C113 * C294 - C47376 * C304) * C114 +
              (C113 * C305 - C47376 * C324) * C47359) *
                 C103 +
             ((C335 - C336) * C114 + (C337 - C338) * C47359) * C104 +
             C367 * C105) *
                C47422 +
            (((C47376 * C936 - C113 * C931) * C114 +
              (C47376 * C946 - C113 * C937) * C47359) *
                 C103 +
             ((C952 - C953) * C114 + (C954 - C955) * C47359) * C104 +
             C968 * C105) *
                C47261) *
               C47219) *
              C291 +
          (((((C145 - C144) * C114 + (C147 - C146) * C47359) * C103 +
             ((C149 - C148) * C114 + (C151 - C150) * C47359) * C104 +
             C177 * C105) *
                C47422 +
            (((C523 - C522) * C114 + (C525 - C524) * C47359) * C103 +
             ((C527 - C526) * C114 + (C529 - C528) * C47359) * C104 +
             C785 * C105) *
                C47261) *
               C47421 +
           ((((C336 - C335) * C114 + (C338 - C337) * C47359) * C103 +
             ((C340 - C339) * C114 + (C342 - C341) * C47359) * C104 +
             C672 * C105) *
                C47422 +
            (((C953 - C952) * C114 + (C955 - C954) * C47359) * C103 +
             ((C957 - C956) * C114 + (C959 - C958) * C47359) * C104 +
             ((C960 - C961) * C114 + (C962 - C963) * C47359) * C105) *
                C47261) *
               C47219) *
              C292 +
          (((C176 * C103 +
             ((C153 - C152) * C114 + (C155 - C154) * C47359) * C104 +
             C178 * C105) *
                C47422 +
            (C554 * C103 +
             ((C539 - C538) * C114 + (C541 - C540) * C47359) * C104 +
             ((C779 - C780) * C114 + (C781 - C782) * C47359) * C105) *
                C47261) *
               C47421 +
           ((C367 * C103 +
             ((C352 - C351) * C114 + (C354 - C353) * C47359) * C104 +
             ((C666 - C667) * C114 + (C668 - C669) * C47359) * C105) *
                C47422 +
            (C968 * C103 +
             ((C961 - C960) * C114 + (C963 - C962) * C47359) * C104 +
             ((C47376 * C944 - C113 * C935) * C114 +
              (C47376 * C950 - C113 * C945) * C47359) *
                 C105) *
                C47261) *
               C47219) *
              C47447)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C47376 * C122 - C113 * C115) * C114 +
             (C47376 * C136 - C113 * C123) * C47359) *
                C103 +
            ((C144 - C145) * C114 + (C146 - C147) * C47359) * C104 +
            C176 * C105) *
               C2276 +
           (((C113 * C481 - C47376 * C491) * C114 +
             (C113 * C492 - C47376 * C511) * C47359) *
                C103 +
            ((C522 - C523) * C114 + (C524 - C525) * C47359) * C104 +
            C554 * C105) *
               C2277 +
           (((C47376 * C497 - C113 * C484) * C114 +
             (C47376 * C514 - C113 * C498) * C47359) *
                C103 +
            ((C530 - C531) * C114 + (C532 - C533) * C47359) * C104 +
            C555 * C105) *
               C2278 +
           (((C113 * C1996 - C47376 * C2002) * C114 +
             (C113 * C2003 - C47376 * C2014) * C47359) *
                C103 +
            ((C2285 - C2286) * C114 + (C2287 - C2288) * C47359) * C104 +
            ((C2289 - C2290) * C114 + (C2291 - C2292) * C47359) * C105) *
               C47469) *
              C47421 +
          ((((C113 * C294 - C47376 * C304) * C114 +
             (C113 * C305 - C47376 * C324) * C47359) *
                C103 +
            ((C335 - C336) * C114 + (C337 - C338) * C47359) * C104 +
            C367 * C105) *
               C2276 +
           (((C47376 * C936 - C113 * C931) * C114 +
             (C47376 * C946 - C113 * C937) * C47359) *
                C103 +
            ((C952 - C953) * C114 + (C954 - C955) * C47359) * C104 +
            C968 * C105) *
               C2277 +
           (((C113 * C1286 - C47376 * C1295) * C114 +
             (C113 * C1296 - C47376 * C1313) * C47359) *
                C103 +
            ((C2171 - C2172) * C114 + (C2173 - C2174) * C47359) * C104 +
            ((C2175 - C2176) * C114 + (C2177 - C2178) * C47359) * C105) *
               C2278 +
           (((C47376 * C2393 - C113 * C2390) * C114 +
             (C47376 * C2399 - C113 * C2394) * C47359) *
                C103 +
            ((C47376 * C2395 - C113 * C2391) * C114 +
             (C47376 * C2400 - C113 * C2396) * C47359) *
                C104 +
            ((C47376 * C2397 - C113 * C2392) * C114 +
             (C47376 * C2401 - C113 * C2398) * C47359) *
                C105) *
               C47469) *
              C47219) *
         C47128) /
            (p * q * std::sqrt(p + q));
    d2ee[12] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C47376 * C122 - C113 * C115) * C114 +
                (C47376 * C136 - C113 * C123) * C47359) *
                   C103 +
               ((C144 - C145) * C114 + (C146 - C147) * C47359) * C104 +
               C176 * C105) *
                  C47174 * C47156 * C108 +
              (((C145 - C144) * C114 + (C147 - C146) * C47359) * C103 +
               ((C149 - C148) * C114 + (C151 - C150) * C47359) * C104 +
               C177 * C105) *
                  C47174 * C47156 * C109 +
              (C176 * C103 +
               ((C153 - C152) * C114 + (C155 - C154) * C47359) * C104 +
               C178 * C105) *
                  C47174 * C47156 * C110 +
              (C177 * C103 +
               ((C157 - C156) * C114 + (C159 - C158) * C47359) * C104 +
               ((C160 - C161) * C114 + (C162 - C163) * C47359) * C105) *
                  C47174 * C47156 * C111 +
              (C178 * C103 +
               ((C161 - C160) * C114 + (C163 - C162) * C47359) * C104 +
               ((C47376 * C134 - C113 * C121) * C114 +
                (C47376 * C142 - C113 * C135) * C47359) *
                   C105) *
                  C47174 * C47156 * C112) +
         0.5 * std::pow(Pi, 2.5) *
             (((((C47376 * C122 - C113 * C115) * C114 +
                 (C47376 * C136 - C113 * C123) * C47359) *
                    C103 +
                ((C144 - C145) * C114 + (C146 - C147) * C47359) * C104 +
                C176 * C105) *
                   C47174 * C47492 +
               (((C113 * C294 - C47376 * C304) * C114 +
                 (C113 * C305 - C47376 * C324) * C47359) *
                    C103 +
                ((C335 - C336) * C114 + (C337 - C338) * C47359) * C104 +
                C367 * C105) *
                   C47174 * C47480 +
               (((C47376 * C310 - C113 * C297) * C114 +
                 (C47376 * C327 - C113 * C311) * C47359) *
                    C103 +
                ((C343 - C344) * C114 + (C345 - C346) * C47359) * C104 +
                C368 * C105) *
                   C47174 * C47453) *
                  C291 +
              ((((C145 - C144) * C114 + (C147 - C146) * C47359) * C103 +
                ((C149 - C148) * C114 + (C151 - C150) * C47359) * C104 +
                C177 * C105) *
                   C47174 * C47492 +
               (((C336 - C335) * C114 + (C338 - C337) * C47359) * C103 +
                ((C340 - C339) * C114 + (C342 - C341) * C47359) * C104 +
                ((C351 - C352) * C114 + (C353 - C354) * C47359) * C105) *
                   C47174 * C47480 +
               (((C344 - C343) * C114 + (C346 - C345) * C47359) * C103 +
                ((C348 - C347) * C114 + (C350 - C349) * C47359) * C104 +
                ((C355 - C356) * C114 + (C357 - C358) * C47359) * C105) *
                   C47174 * C47453) *
                  C292 +
              ((C176 * C103 +
                ((C153 - C152) * C114 + (C155 - C154) * C47359) * C104 +
                C178 * C105) *
                   C47174 * C47492 +
               (C367 * C103 +
                ((C352 - C351) * C114 + (C354 - C353) * C47359) * C104 +
                ((C113 * C302 - C47376 * C320) * C114 +
                 (C113 * C321 - C47376 * C332) * C47359) *
                    C105) *
                   C47174 * C47480 +
               (C368 * C103 +
                ((C356 - C355) * C114 + (C358 - C357) * C47359) * C104 +
                ((C47376 * C322 - C113 * C303) * C114 +
                 (C47376 * C333 - C113 * C323) * C47359) *
                    C105) *
                   C47174 * C47453) *
                  C47447)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C47376 * C122 - C113 * C115) * C114 +
             (C47376 * C136 - C113 * C123) * C47359) *
                C103 +
            ((C144 - C145) * C114 + (C146 - C147) * C47359) * C104 +
            C176 * C105) *
               C47493 +
           (((C113 * C481 - C47376 * C491) * C114 +
             (C113 * C492 - C47376 * C511) * C47359) *
                C103 +
            ((C522 - C523) * C114 + (C524 - C525) * C47359) * C104 +
            C554 * C105) *
               C47482 +
           (((C47376 * C497 - C113 * C484) * C114 +
             (C47376 * C514 - C113 * C498) * C47359) *
                C103 +
            ((C530 - C531) * C114 + (C532 - C533) * C47359) * C104 +
            C555 * C105) *
               C47456) *
              C47156 * C291 +
          ((((C145 - C144) * C114 + (C147 - C146) * C47359) * C103 +
            ((C149 - C148) * C114 + (C151 - C150) * C47359) * C104 +
            C177 * C105) *
               C47493 +
           (((C523 - C522) * C114 + (C525 - C524) * C47359) * C103 +
            ((C527 - C526) * C114 + (C529 - C528) * C47359) * C104 +
            ((C538 - C539) * C114 + (C540 - C541) * C47359) * C105) *
               C47482 +
           (((C531 - C530) * C114 + (C533 - C532) * C47359) * C103 +
            ((C535 - C534) * C114 + (C537 - C536) * C47359) * C104 +
            ((C542 - C543) * C114 + (C544 - C545) * C47359) * C105) *
               C47456) *
              C47156 * C292 +
          ((C176 * C103 +
            ((C153 - C152) * C114 + (C155 - C154) * C47359) * C104 +
            C178 * C105) *
               C47493 +
           (C554 * C103 +
            ((C539 - C538) * C114 + (C541 - C540) * C47359) * C104 +
            ((C113 * C489 - C47376 * C507) * C114 +
             (C113 * C508 - C47376 * C519) * C47359) *
                C105) *
               C47482 +
           (C555 * C103 +
            ((C543 - C542) * C114 + (C545 - C544) * C47359) * C104 +
            ((C47376 * C509 - C113 * C490) * C114 +
             (C47376 * C520 - C113 * C510) * C47359) *
                C105) *
               C47456) *
              C47156 * C47447)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C47376 * C122 - C113 * C115) * C114 +
             (C47376 * C136 - C113 * C123) * C47359) *
                C103 +
            ((C144 - C145) * C114 + (C146 - C147) * C47359) * C104 +
            C176 * C105) *
               C47174 * C1078 +
           (((C113 * C294 - C47376 * C304) * C114 +
             (C113 * C305 - C47376 * C324) * C47359) *
                C103 +
            ((C335 - C336) * C114 + (C337 - C338) * C47359) * C104 +
            C367 * C105) *
               C47174 * C1079 +
           (((C47376 * C310 - C113 * C297) * C114 +
             (C47376 * C327 - C113 * C311) * C47359) *
                C103 +
            ((C343 - C344) * C114 + (C345 - C346) * C47359) * C104 +
            C368 * C105) *
               C47174 * C47453) *
              C47489 +
          ((((C145 - C144) * C114 + (C147 - C146) * C47359) * C103 +
            ((C149 - C148) * C114 + (C151 - C150) * C47359) * C104 +
            C177 * C105) *
               C47174 * C1078 +
           (((C336 - C335) * C114 + (C338 - C337) * C47359) * C103 +
            ((C340 - C339) * C114 + (C342 - C341) * C47359) * C104 +
            C672 * C105) *
               C47174 * C1079 +
           (((C344 - C343) * C114 + (C346 - C345) * C47359) * C103 +
            ((C348 - C347) * C114 + (C350 - C349) * C47359) * C104 +
            ((C355 - C356) * C114 + (C357 - C358) * C47359) * C105) *
               C47174 * C47453) *
              C47476 +
          ((C176 * C103 +
            ((C153 - C152) * C114 + (C155 - C154) * C47359) * C104 +
            C178 * C105) *
               C47174 * C1078 +
           (C367 * C103 +
            ((C352 - C351) * C114 + (C354 - C353) * C47359) * C104 +
            ((C666 - C667) * C114 + (C668 - C669) * C47359) * C105) *
               C47174 * C1079 +
           (C368 * C103 +
            ((C356 - C355) * C114 + (C358 - C357) * C47359) * C104 +
            ((C47376 * C322 - C113 * C303) * C114 +
             (C47376 * C333 - C113 * C323) * C47359) *
                C105) *
               C47174 * C47453) *
              C47447)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C47376 * C122 - C113 * C115) * C114 +
            (C47376 * C136 - C113 * C123) * C47359) *
               C103 +
           ((C144 - C145) * C114 + (C146 - C147) * C47359) * C104 +
           C176 * C105) *
              C47174 * C1146 +
          (((C113 * C294 - C47376 * C304) * C114 +
            (C113 * C305 - C47376 * C324) * C47359) *
               C103 +
           ((C335 - C336) * C114 + (C337 - C338) * C47359) * C104 +
           C367 * C105) *
              C47174 * C1147 +
          (((C47376 * C310 - C113 * C297) * C114 +
            (C47376 * C327 - C113 * C311) * C47359) *
               C103 +
           ((C343 - C344) * C114 + (C345 - C346) * C47359) * C104 +
           C368 * C105) *
              C47174 * C1148 +
          (((C113 * C1152 - C47376 * C1158) * C114 +
            (C113 * C1159 - C47376 * C1170) * C47359) *
               C103 +
           ((C113 * C1153 - C47376 * C1160) * C114 +
            (C113 * C1161 - C47376 * C1171) * C47359) *
               C104 +
           ((C113 * C1154 - C47376 * C1162) * C114 +
            (C113 * C1163 - C47376 * C1172) * C47359) *
               C105) *
              C47174 * C1149 +
          (((C47376 * C1164 - C113 * C1155) * C114 +
            (C47376 * C1173 - C113 * C1165) * C47359) *
               C103 +
           ((C47376 * C1166 - C113 * C1156) * C114 +
            (C47376 * C1174 - C113 * C1167) * C47359) *
               C104 +
           ((C47376 * C1168 - C113 * C1157) * C114 +
            (C47376 * C1175 - C113 * C1169) * C47359) *
               C105) *
              C47174 * C1150) *
         C47128) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C47376 * C122 - C113 * C115) * C114 +
             (C47376 * C136 - C113 * C123) * C47359) *
                C103 +
            ((C144 - C145) * C114 + (C146 - C147) * C47359) * C104 +
            C176 * C105) *
               C47493 +
           (((C113 * C481 - C47376 * C491) * C114 +
             (C113 * C492 - C47376 * C511) * C47359) *
                C103 +
            ((C522 - C523) * C114 + (C524 - C525) * C47359) * C104 +
            C554 * C105) *
               C47482 +
           (((C47376 * C497 - C113 * C484) * C114 +
             (C47376 * C514 - C113 * C498) * C47359) *
                C103 +
            ((C530 - C531) * C114 + (C532 - C533) * C47359) * C104 +
            C555 * C105) *
               C47456) *
              C1078 +
          ((((C113 * C294 - C47376 * C304) * C114 +
             (C113 * C305 - C47376 * C324) * C47359) *
                C103 +
            ((C335 - C336) * C114 + (C337 - C338) * C47359) * C104 +
            C367 * C105) *
               C47493 +
           (((C47376 * C936 - C113 * C931) * C114 +
             (C47376 * C946 - C113 * C937) * C47359) *
                C103 +
            ((C952 - C953) * C114 + (C954 - C955) * C47359) * C104 +
            C968 * C105) *
               C47482 +
           (((C113 * C1286 - C47376 * C1295) * C114 +
             (C113 * C1296 - C47376 * C1313) * C47359) *
                C103 +
            ((C113 * C1287 - C47376 * C1297) * C114 +
             (C113 * C1298 - C47376 * C1314) * C47359) *
                C104 +
            ((C113 * C1288 - C47376 * C1299) * C114 +
             (C113 * C1300 - C47376 * C1315) * C47359) *
                C105) *
               C47456) *
              C1079 +
          ((((C47376 * C310 - C113 * C297) * C114 +
             (C47376 * C327 - C113 * C311) * C47359) *
                C103 +
            ((C343 - C344) * C114 + (C345 - C346) * C47359) * C104 +
            C368 * C105) *
               C47493 +
           (((C113 * C1289 - C47376 * C1301) * C114 +
             (C113 * C1302 - C47376 * C1316) * C47359) *
                C103 +
            ((C113 * C1290 - C47376 * C1303) * C114 +
             (C113 * C1304 - C47376 * C1317) * C47359) *
                C104 +
            ((C113 * C1291 - C47376 * C1305) * C114 +
             (C113 * C1306 - C47376 * C1318) * C47359) *
                C105) *
               C47482 +
           (((C47376 * C1307 - C113 * C1292) * C114 +
             (C47376 * C1319 - C113 * C1308) * C47359) *
                C103 +
            ((C47376 * C1309 - C113 * C1293) * C114 +
             (C47376 * C1320 - C113 * C1310) * C47359) *
                C104 +
            ((C47376 * C1311 - C113 * C1294) * C114 +
             (C47376 * C1321 - C113 * C1312) * C47359) *
                C105) *
               C47456) *
              C47453) *
         C47128) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C47376 * C122 - C113 * C115) * C114 +
             (C47376 * C136 - C113 * C123) * C47359) *
                C103 +
            ((C144 - C145) * C114 + (C146 - C147) * C47359) * C104 +
            C176 * C105) *
               C1816 +
           (((C113 * C481 - C47376 * C491) * C114 +
             (C113 * C492 - C47376 * C511) * C47359) *
                C103 +
            ((C522 - C523) * C114 + (C524 - C525) * C47359) * C104 +
            C554 * C105) *
               C1817 +
           (((C47376 * C497 - C113 * C484) * C114 +
             (C47376 * C514 - C113 * C498) * C47359) *
                C103 +
            ((C530 - C531) * C114 + (C532 - C533) * C47359) * C104 +
            C555 * C105) *
               C47456) *
              C47156 * C47489 +
          ((((C145 - C144) * C114 + (C147 - C146) * C47359) * C103 +
            ((C149 - C148) * C114 + (C151 - C150) * C47359) * C104 +
            C177 * C105) *
               C1816 +
           (((C523 - C522) * C114 + (C525 - C524) * C47359) * C103 +
            ((C527 - C526) * C114 + (C529 - C528) * C47359) * C104 +
            C785 * C105) *
               C1817 +
           (((C531 - C530) * C114 + (C533 - C532) * C47359) * C103 +
            ((C535 - C534) * C114 + (C537 - C536) * C47359) * C104 +
            ((C542 - C543) * C114 + (C544 - C545) * C47359) * C105) *
               C47456) *
              C47156 * C47476 +
          ((C176 * C103 +
            ((C153 - C152) * C114 + (C155 - C154) * C47359) * C104 +
            C178 * C105) *
               C1816 +
           (C554 * C103 +
            ((C539 - C538) * C114 + (C541 - C540) * C47359) * C104 +
            ((C779 - C780) * C114 + (C781 - C782) * C47359) * C105) *
               C1817 +
           (C555 * C103 +
            ((C543 - C542) * C114 + (C545 - C544) * C47359) * C104 +
            ((C47376 * C509 - C113 * C490) * C114 +
             (C47376 * C520 - C113 * C510) * C47359) *
                C105) *
               C47456) *
              C47156 * C47447)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C47376 * C122 - C113 * C115) * C114 +
             (C47376 * C136 - C113 * C123) * C47359) *
                C103 +
            ((C144 - C145) * C114 + (C146 - C147) * C47359) * C104 +
            C176 * C105) *
               C1816 +
           (((C113 * C481 - C47376 * C491) * C114 +
             (C113 * C492 - C47376 * C511) * C47359) *
                C103 +
            ((C522 - C523) * C114 + (C524 - C525) * C47359) * C104 +
            C554 * C105) *
               C1817 +
           (((C47376 * C497 - C113 * C484) * C114 +
             (C47376 * C514 - C113 * C498) * C47359) *
                C103 +
            ((C530 - C531) * C114 + (C532 - C533) * C47359) * C104 +
            C555 * C105) *
               C47456) *
              C47492 +
          ((((C113 * C294 - C47376 * C304) * C114 +
             (C113 * C305 - C47376 * C324) * C47359) *
                C103 +
            ((C335 - C336) * C114 + (C337 - C338) * C47359) * C104 +
            C367 * C105) *
               C1816 +
           (((C47376 * C936 - C113 * C931) * C114 +
             (C47376 * C946 - C113 * C937) * C47359) *
                C103 +
            ((C952 - C953) * C114 + (C954 - C955) * C47359) * C104 +
            C968 * C105) *
               C1817 +
           (((C113 * C1286 - C47376 * C1295) * C114 +
             (C113 * C1296 - C47376 * C1313) * C47359) *
                C103 +
            ((C113 * C1287 - C47376 * C1297) * C114 +
             (C113 * C1298 - C47376 * C1314) * C47359) *
                C104 +
            ((C113 * C1288 - C47376 * C1299) * C114 +
             (C113 * C1300 - C47376 * C1315) * C47359) *
                C105) *
               C47456) *
              C47480 +
          ((((C47376 * C310 - C113 * C297) * C114 +
             (C47376 * C327 - C113 * C311) * C47359) *
                C103 +
            ((C343 - C344) * C114 + (C345 - C346) * C47359) * C104 +
            C368 * C105) *
               C1816 +
           (((C113 * C1289 - C47376 * C1301) * C114 +
             (C113 * C1302 - C47376 * C1316) * C47359) *
                C103 +
            ((C1589 - C1590) * C114 + (C1591 - C1592) * C47359) * C104 +
            ((C1593 - C1594) * C114 + (C1595 - C1596) * C47359) * C105) *
               C1817 +
           (((C47376 * C1307 - C113 * C1292) * C114 +
             (C47376 * C1319 - C113 * C1308) * C47359) *
                C103 +
            ((C47376 * C1309 - C113 * C1293) * C114 +
             (C47376 * C1320 - C113 * C1310) * C47359) *
                C104 +
            ((C47376 * C1311 - C113 * C1294) * C114 +
             (C47376 * C1321 - C113 * C1312) * C47359) *
                C105) *
               C47456) *
              C47453) *
         C47128) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C47376 * C122 - C113 * C115) * C114 +
            (C47376 * C136 - C113 * C123) * C47359) *
               C103 +
           ((C144 - C145) * C114 + (C146 - C147) * C47359) * C104 +
           C176 * C105) *
              C1991 +
          (((C113 * C481 - C47376 * C491) * C114 +
            (C113 * C492 - C47376 * C511) * C47359) *
               C103 +
           ((C522 - C523) * C114 + (C524 - C525) * C47359) * C104 +
           C554 * C105) *
              C1992 +
          (((C47376 * C497 - C113 * C484) * C114 +
            (C47376 * C514 - C113 * C498) * C47359) *
               C103 +
           ((C530 - C531) * C114 + (C532 - C533) * C47359) * C104 +
           C555 * C105) *
              C1993 +
          (((C113 * C1996 - C47376 * C2002) * C114 +
            (C113 * C2003 - C47376 * C2014) * C47359) *
               C103 +
           ((C113 * C1997 - C47376 * C2004) * C114 +
            (C113 * C2005 - C47376 * C2015) * C47359) *
               C104 +
           ((C113 * C1998 - C47376 * C2006) * C114 +
            (C113 * C2007 - C47376 * C2016) * C47359) *
               C105) *
              C1994 +
          (((C47376 * C2008 - C113 * C1999) * C114 +
            (C47376 * C2017 - C113 * C2009) * C47359) *
               C103 +
           ((C47376 * C2010 - C113 * C2000) * C114 +
            (C47376 * C2018 - C113 * C2011) * C47359) *
               C104 +
           ((C47376 * C2012 - C113 * C2001) * C114 +
            (C47376 * C2019 - C113 * C2013) * C47359) *
               C105) *
              C1995) *
         C47156 * C47128) /
            (p * q * std::sqrt(p + q));
    d2ee[13] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C47376 * C122 - C113 * C115) * C114 +
              (C47376 * C136 - C113 * C123) * C47359) *
                 C103 +
             ((C144 - C145) * C114 + (C146 - C147) * C47359) * C104 +
             C176 * C105) *
                C47422 +
            (((C113 * C481 - C47376 * C491) * C114 +
              (C113 * C492 - C47376 * C511) * C47359) *
                 C103 +
             ((C522 - C523) * C114 + (C524 - C525) * C47359) * C104 +
             C554 * C105) *
                C47261) *
               C1078 +
           ((((C113 * C294 - C47376 * C304) * C114 +
              (C113 * C305 - C47376 * C324) * C47359) *
                 C103 +
             ((C335 - C336) * C114 + (C337 - C338) * C47359) * C104 +
             C367 * C105) *
                C47422 +
            (((C47376 * C936 - C113 * C931) * C114 +
              (C47376 * C946 - C113 * C937) * C47359) *
                 C103 +
             ((C952 - C953) * C114 + (C954 - C955) * C47359) * C104 +
             C968 * C105) *
                C47261) *
               C1079 +
           ((((C47376 * C310 - C113 * C297) * C114 +
              (C47376 * C327 - C113 * C311) * C47359) *
                 C103 +
             ((C343 - C344) * C114 + (C345 - C346) * C47359) * C104 +
             C368 * C105) *
                C47422 +
            (((C113 * C1289 - C47376 * C1301) * C114 +
              (C113 * C1302 - C47376 * C1316) * C47359) *
                 C103 +
             ((C1589 - C1590) * C114 + (C1591 - C1592) * C47359) * C104 +
             ((C1593 - C1594) * C114 + (C1595 - C1596) * C47359) * C105) *
                C47261) *
               C47453) *
              C47407 +
          (((((C145 - C144) * C114 + (C147 - C146) * C47359) * C103 +
             ((C149 - C148) * C114 + (C151 - C150) * C47359) * C104 +
             C177 * C105) *
                C47422 +
            (((C523 - C522) * C114 + (C525 - C524) * C47359) * C103 +
             ((C527 - C526) * C114 + (C529 - C528) * C47359) * C104 +
             C785 * C105) *
                C47261) *
               C1078 +
           ((((C336 - C335) * C114 + (C338 - C337) * C47359) * C103 +
             ((C340 - C339) * C114 + (C342 - C341) * C47359) * C104 +
             C672 * C105) *
                C47422 +
            (((C953 - C952) * C114 + (C955 - C954) * C47359) * C103 +
             ((C957 - C956) * C114 + (C959 - C958) * C47359) * C104 +
             ((C960 - C961) * C114 + (C962 - C963) * C47359) * C105) *
                C47261) *
               C1079 +
           ((((C344 - C343) * C114 + (C346 - C345) * C47359) * C103 +
             ((C348 - C347) * C114 + (C350 - C349) * C47359) * C104 +
             ((C355 - C356) * C114 + (C357 - C358) * C47359) * C105) *
                C47422 +
            (((C1590 - C1589) * C114 + (C1592 - C1591) * C47359) * C103 +
             ((C1594 - C1593) * C114 + (C1596 - C1595) * C47359) * C104 +
             ((C47376 * C1585 - C113 * C1584) * C114 +
              (C47376 * C1587 - C113 * C1586) * C47359) *
                 C105) *
                C47261) *
               C47453) *
              C47139)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C47376 * C122 - C113 * C115) * C114 +
             (C47376 * C136 - C113 * C123) * C47359) *
                C103 +
            ((C144 - C145) * C114 + (C146 - C147) * C47359) * C104 +
            C176 * C105) *
               C47422 +
           (((C113 * C481 - C47376 * C491) * C114 +
             (C113 * C492 - C47376 * C511) * C47359) *
                C103 +
            ((C522 - C523) * C114 + (C524 - C525) * C47359) * C104 +
            C554 * C105) *
               C47261) *
              C47156 * C655 +
          ((((C145 - C144) * C114 + (C147 - C146) * C47359) * C103 +
            ((C149 - C148) * C114 + (C151 - C150) * C47359) * C104 +
            C177 * C105) *
               C47422 +
           (((C523 - C522) * C114 + (C525 - C524) * C47359) * C103 +
            ((C527 - C526) * C114 + (C529 - C528) * C47359) * C104 +
            C785 * C105) *
               C47261) *
              C47156 * C656 +
          ((C176 * C103 +
            ((C153 - C152) * C114 + (C155 - C154) * C47359) * C104 +
            C178 * C105) *
               C47422 +
           (C554 * C103 +
            ((C539 - C538) * C114 + (C541 - C540) * C47359) * C104 +
            ((C779 - C780) * C114 + (C781 - C782) * C47359) * C105) *
               C47261) *
              C47156 * C657 +
          ((C177 * C103 +
            ((C157 - C156) * C114 + (C159 - C158) * C47359) * C104 +
            ((C160 - C161) * C114 + (C162 - C163) * C47359) * C105) *
               C47422 +
           (C785 * C103 +
            ((C780 - C779) * C114 + (C782 - C781) * C47359) * C104 +
            ((C47376 * C773 - C113 * C772) * C114 +
             (C47376 * C775 - C113 * C774) * C47359) *
                C105) *
               C47261) *
              C47156 * C47457)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C47376 * C122 - C113 * C115) * C114 +
             (C47376 * C136 - C113 * C123) * C47359) *
                C103 +
            ((C144 - C145) * C114 + (C146 - C147) * C47359) * C104 +
            C176 * C105) *
               C2276 +
           (((C113 * C481 - C47376 * C491) * C114 +
             (C113 * C492 - C47376 * C511) * C47359) *
                C103 +
            ((C522 - C523) * C114 + (C524 - C525) * C47359) * C104 +
            C554 * C105) *
               C2277 +
           (((C47376 * C497 - C113 * C484) * C114 +
             (C47376 * C514 - C113 * C498) * C47359) *
                C103 +
            ((C530 - C531) * C114 + (C532 - C533) * C47359) * C104 +
            C555 * C105) *
               C2278 +
           (((C113 * C1996 - C47376 * C2002) * C114 +
             (C113 * C2003 - C47376 * C2014) * C47359) *
                C103 +
            ((C2285 - C2286) * C114 + (C2287 - C2288) * C47359) * C104 +
            ((C2289 - C2290) * C114 + (C2291 - C2292) * C47359) * C105) *
               C47469) *
              C47156 * C47407 +
          ((((C145 - C144) * C114 + (C147 - C146) * C47359) * C103 +
            ((C149 - C148) * C114 + (C151 - C150) * C47359) * C104 +
            C177 * C105) *
               C2276 +
           (((C523 - C522) * C114 + (C525 - C524) * C47359) * C103 +
            ((C527 - C526) * C114 + (C529 - C528) * C47359) * C104 +
            C785 * C105) *
               C2277 +
           (((C531 - C530) * C114 + (C533 - C532) * C47359) * C103 +
            ((C535 - C534) * C114 + (C537 - C536) * C47359) * C104 +
            ((C542 - C543) * C114 + (C544 - C545) * C47359) * C105) *
               C2278 +
           (((C2286 - C2285) * C114 + (C2288 - C2287) * C47359) * C103 +
            ((C2290 - C2289) * C114 + (C2292 - C2291) * C47359) * C104 +
            ((C47376 * C2281 - C113 * C2280) * C114 +
             (C47376 * C2283 - C113 * C2282) * C47359) *
                C105) *
               C47469) *
              C47156 * C47139)) /
            (p * q * std::sqrt(p + q));
    d2ee[14] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C47376 * C122 - C113 * C115) * C114 +
             (C47376 * C136 - C113 * C123) * C47359) *
                C103 +
            ((C144 - C145) * C114 + (C146 - C147) * C47359) * C104 +
            C176 * C105) *
               C47174 * C47492 +
           (((C113 * C294 - C47376 * C304) * C114 +
             (C113 * C305 - C47376 * C324) * C47359) *
                C103 +
            ((C335 - C336) * C114 + (C337 - C338) * C47359) * C104 +
            C367 * C105) *
               C47174 * C47480 +
           (((C47376 * C310 - C113 * C297) * C114 +
             (C47376 * C327 - C113 * C311) * C47359) *
                C103 +
            ((C343 - C344) * C114 + (C345 - C346) * C47359) * C104 +
            C368 * C105) *
               C47174 * C47453) *
              C291 +
          ((((C145 - C144) * C114 + (C147 - C146) * C47359) * C103 +
            ((C149 - C148) * C114 + (C151 - C150) * C47359) * C104 +
            C177 * C105) *
               C47174 * C47492 +
           (((C336 - C335) * C114 + (C338 - C337) * C47359) * C103 +
            ((C340 - C339) * C114 + (C342 - C341) * C47359) * C104 +
            ((C351 - C352) * C114 + (C353 - C354) * C47359) * C105) *
               C47174 * C47480 +
           (((C344 - C343) * C114 + (C346 - C345) * C47359) * C103 +
            ((C348 - C347) * C114 + (C350 - C349) * C47359) * C104 +
            ((C355 - C356) * C114 + (C357 - C358) * C47359) * C105) *
               C47174 * C47453) *
              C292 +
          ((C176 * C103 +
            ((C153 - C152) * C114 + (C155 - C154) * C47359) * C104 +
            C178 * C105) *
               C47174 * C47492 +
           (C367 * C103 +
            ((C352 - C351) * C114 + (C354 - C353) * C47359) * C104 +
            ((C113 * C302 - C47376 * C320) * C114 +
             (C113 * C321 - C47376 * C332) * C47359) *
                C105) *
               C47174 * C47480 +
           (C368 * C103 +
            ((C356 - C355) * C114 + (C358 - C357) * C47359) * C104 +
            ((C47376 * C322 - C113 * C303) * C114 +
             (C47376 * C333 - C113 * C323) * C47359) *
                C105) *
               C47174 * C47453) *
              C47447)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C47376 * C122 - C113 * C115) * C114 +
            (C47376 * C136 - C113 * C123) * C47359) *
               C103 +
           ((C144 - C145) * C114 + (C146 - C147) * C47359) * C104 +
           C176 * C105) *
              C47174 * C47156 * C108 +
          (((C145 - C144) * C114 + (C147 - C146) * C47359) * C103 +
           ((C149 - C148) * C114 + (C151 - C150) * C47359) * C104 +
           C177 * C105) *
              C47174 * C47156 * C109 +
          (C176 * C103 +
           ((C153 - C152) * C114 + (C155 - C154) * C47359) * C104 +
           C178 * C105) *
              C47174 * C47156 * C110 +
          (C177 * C103 +
           ((C157 - C156) * C114 + (C159 - C158) * C47359) * C104 +
           ((C160 - C161) * C114 + (C162 - C163) * C47359) * C105) *
              C47174 * C47156 * C111 +
          (C178 * C103 +
           ((C161 - C160) * C114 + (C163 - C162) * C47359) * C104 +
           ((C47376 * C134 - C113 * C121) * C114 +
            (C47376 * C142 - C113 * C135) * C47359) *
               C105) *
              C47174 * C47156 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C47376 * C122 - C113 * C115) * C114 +
             (C47376 * C136 - C113 * C123) * C47359) *
                C103 +
            ((C144 - C145) * C114 + (C146 - C147) * C47359) * C104 +
            C176 * C105) *
               C47174 * C1078 +
           (((C113 * C294 - C47376 * C304) * C114 +
             (C113 * C305 - C47376 * C324) * C47359) *
                C103 +
            ((C335 - C336) * C114 + (C337 - C338) * C47359) * C104 +
            C367 * C105) *
               C47174 * C1079 +
           (((C47376 * C310 - C113 * C297) * C114 +
             (C47376 * C327 - C113 * C311) * C47359) *
                C103 +
            ((C343 - C344) * C114 + (C345 - C346) * C47359) * C104 +
            C368 * C105) *
               C47174 * C47453) *
              C47489 +
          ((((C145 - C144) * C114 + (C147 - C146) * C47359) * C103 +
            ((C149 - C148) * C114 + (C151 - C150) * C47359) * C104 +
            C177 * C105) *
               C47174 * C1078 +
           (((C336 - C335) * C114 + (C338 - C337) * C47359) * C103 +
            ((C340 - C339) * C114 + (C342 - C341) * C47359) * C104 +
            C672 * C105) *
               C47174 * C1079 +
           (((C344 - C343) * C114 + (C346 - C345) * C47359) * C103 +
            ((C348 - C347) * C114 + (C350 - C349) * C47359) * C104 +
            ((C355 - C356) * C114 + (C357 - C358) * C47359) * C105) *
               C47174 * C47453) *
              C47476 +
          ((C176 * C103 +
            ((C153 - C152) * C114 + (C155 - C154) * C47359) * C104 +
            C178 * C105) *
               C47174 * C1078 +
           (C367 * C103 +
            ((C352 - C351) * C114 + (C354 - C353) * C47359) * C104 +
            ((C666 - C667) * C114 + (C668 - C669) * C47359) * C105) *
               C47174 * C1079 +
           (C368 * C103 +
            ((C356 - C355) * C114 + (C358 - C357) * C47359) * C104 +
            ((C47376 * C322 - C113 * C303) * C114 +
             (C47376 * C333 - C113 * C323) * C47359) *
                C105) *
               C47174 * C47453) *
              C47447)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C47376 * C122 - C113 * C115) * C114 +
            (C47376 * C136 - C113 * C123) * C47359) *
               C103 +
           ((C144 - C145) * C114 + (C146 - C147) * C47359) * C104 +
           C176 * C105) *
              C47174 * C1146 +
          (((C113 * C294 - C47376 * C304) * C114 +
            (C113 * C305 - C47376 * C324) * C47359) *
               C103 +
           ((C335 - C336) * C114 + (C337 - C338) * C47359) * C104 +
           C367 * C105) *
              C47174 * C1147 +
          (((C47376 * C310 - C113 * C297) * C114 +
            (C47376 * C327 - C113 * C311) * C47359) *
               C103 +
           ((C343 - C344) * C114 + (C345 - C346) * C47359) * C104 +
           C368 * C105) *
              C47174 * C1148 +
          (((C113 * C1152 - C47376 * C1158) * C114 +
            (C113 * C1159 - C47376 * C1170) * C47359) *
               C103 +
           ((C113 * C1153 - C47376 * C1160) * C114 +
            (C113 * C1161 - C47376 * C1171) * C47359) *
               C104 +
           ((C113 * C1154 - C47376 * C1162) * C114 +
            (C113 * C1163 - C47376 * C1172) * C47359) *
               C105) *
              C47174 * C1149 +
          (((C47376 * C1164 - C113 * C1155) * C114 +
            (C47376 * C1173 - C113 * C1165) * C47359) *
               C103 +
           ((C47376 * C1166 - C113 * C1156) * C114 +
            (C47376 * C1174 - C113 * C1167) * C47359) *
               C104 +
           ((C47376 * C1168 - C113 * C1157) * C114 +
            (C47376 * C1175 - C113 * C1169) * C47359) *
               C105) *
              C47174 * C1150) *
         C47128) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C47376 * C122 - C113 * C115) * C114 +
             (C47376 * C136 - C113 * C123) * C47359) *
                C103 +
            ((C144 - C145) * C114 + (C146 - C147) * C47359) * C104 +
            C176 * C105) *
               C1816 +
           (((C113 * C481 - C47376 * C491) * C114 +
             (C113 * C492 - C47376 * C511) * C47359) *
                C103 +
            ((C522 - C523) * C114 + (C524 - C525) * C47359) * C104 +
            C554 * C105) *
               C1817 +
           (((C47376 * C497 - C113 * C484) * C114 +
             (C47376 * C514 - C113 * C498) * C47359) *
                C103 +
            ((C530 - C531) * C114 + (C532 - C533) * C47359) * C104 +
            C555 * C105) *
               C47456) *
              C47156 * C47489 +
          ((((C145 - C144) * C114 + (C147 - C146) * C47359) * C103 +
            ((C149 - C148) * C114 + (C151 - C150) * C47359) * C104 +
            C177 * C105) *
               C1816 +
           (((C523 - C522) * C114 + (C525 - C524) * C47359) * C103 +
            ((C527 - C526) * C114 + (C529 - C528) * C47359) * C104 +
            C785 * C105) *
               C1817 +
           (((C531 - C530) * C114 + (C533 - C532) * C47359) * C103 +
            ((C535 - C534) * C114 + (C537 - C536) * C47359) * C104 +
            ((C542 - C543) * C114 + (C544 - C545) * C47359) * C105) *
               C47456) *
              C47156 * C47476 +
          ((C176 * C103 +
            ((C153 - C152) * C114 + (C155 - C154) * C47359) * C104 +
            C178 * C105) *
               C1816 +
           (C554 * C103 +
            ((C539 - C538) * C114 + (C541 - C540) * C47359) * C104 +
            ((C779 - C780) * C114 + (C781 - C782) * C47359) * C105) *
               C1817 +
           (C555 * C103 +
            ((C543 - C542) * C114 + (C545 - C544) * C47359) * C104 +
            ((C47376 * C509 - C113 * C490) * C114 +
             (C47376 * C520 - C113 * C510) * C47359) *
                C105) *
               C47456) *
              C47156 * C47447)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C47376 * C122 - C113 * C115) * C114 +
             (C47376 * C136 - C113 * C123) * C47359) *
                C103 +
            ((C144 - C145) * C114 + (C146 - C147) * C47359) * C104 +
            C176 * C105) *
               C1816 +
           (((C113 * C481 - C47376 * C491) * C114 +
             (C113 * C492 - C47376 * C511) * C47359) *
                C103 +
            ((C522 - C523) * C114 + (C524 - C525) * C47359) * C104 +
            C554 * C105) *
               C1817 +
           (((C47376 * C497 - C113 * C484) * C114 +
             (C47376 * C514 - C113 * C498) * C47359) *
                C103 +
            ((C530 - C531) * C114 + (C532 - C533) * C47359) * C104 +
            C555 * C105) *
               C47456) *
              C47492 +
          ((((C113 * C294 - C47376 * C304) * C114 +
             (C113 * C305 - C47376 * C324) * C47359) *
                C103 +
            ((C335 - C336) * C114 + (C337 - C338) * C47359) * C104 +
            C367 * C105) *
               C1816 +
           (((C47376 * C936 - C113 * C931) * C114 +
             (C47376 * C946 - C113 * C937) * C47359) *
                C103 +
            ((C952 - C953) * C114 + (C954 - C955) * C47359) * C104 +
            C968 * C105) *
               C1817 +
           (((C113 * C1286 - C47376 * C1295) * C114 +
             (C113 * C1296 - C47376 * C1313) * C47359) *
                C103 +
            ((C113 * C1287 - C47376 * C1297) * C114 +
             (C113 * C1298 - C47376 * C1314) * C47359) *
                C104 +
            ((C113 * C1288 - C47376 * C1299) * C114 +
             (C113 * C1300 - C47376 * C1315) * C47359) *
                C105) *
               C47456) *
              C47480 +
          ((((C47376 * C310 - C113 * C297) * C114 +
             (C47376 * C327 - C113 * C311) * C47359) *
                C103 +
            ((C343 - C344) * C114 + (C345 - C346) * C47359) * C104 +
            C368 * C105) *
               C1816 +
           (((C113 * C1289 - C47376 * C1301) * C114 +
             (C113 * C1302 - C47376 * C1316) * C47359) *
                C103 +
            ((C1589 - C1590) * C114 + (C1591 - C1592) * C47359) * C104 +
            ((C1593 - C1594) * C114 + (C1595 - C1596) * C47359) * C105) *
               C1817 +
           (((C47376 * C1307 - C113 * C1292) * C114 +
             (C47376 * C1319 - C113 * C1308) * C47359) *
                C103 +
            ((C47376 * C1309 - C113 * C1293) * C114 +
             (C47376 * C1320 - C113 * C1310) * C47359) *
                C104 +
            ((C47376 * C1311 - C113 * C1294) * C114 +
             (C47376 * C1321 - C113 * C1312) * C47359) *
                C105) *
               C47456) *
              C47453) *
         C47128) /
            (p * q * std::sqrt(p + q));
    d2ee[15] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 ((((((C47376 * C122 - C113 * C115) * C114 +
                      (C47376 * C136 - C113 * C123) * C47359) *
                         C103 +
                     ((C144 - C145) * C114 + (C146 - C147) * C47359) * C104 +
                     C176 * C105) *
                        C3262 +
                    (((C113 * C481 - C47376 * C491) * C114 +
                      (C113 * C492 - C47376 * C511) * C47359) *
                         C103 +
                     ((C522 - C523) * C114 + (C524 - C525) * C47359) * C104 +
                     C554 * C105) *
                        C47261) *
                       C47421 +
                   ((((C113 * C294 - C47376 * C304) * C114 +
                      (C113 * C305 - C47376 * C324) * C47359) *
                         C103 +
                     ((C335 - C336) * C114 + (C337 - C338) * C47359) * C104 +
                     C367 * C105) *
                        C3262 +
                    (((C47376 * C936 - C113 * C931) * C114 +
                      (C47376 * C946 - C113 * C937) * C47359) *
                         C103 +
                     ((C952 - C953) * C114 + (C954 - C955) * C47359) * C104 +
                     C968 * C105) *
                        C47261) *
                       C47219) *
                      C47133 +
                  (((((C145 - C144) * C114 + (C147 - C146) * C47359) * C103 +
                     ((C149 - C148) * C114 + (C151 - C150) * C47359) * C104 +
                     C177 * C105) *
                        C3262 +
                    (((C523 - C522) * C114 + (C525 - C524) * C47359) * C103 +
                     ((C527 - C526) * C114 + (C529 - C528) * C47359) * C104 +
                     C785 * C105) *
                        C47261) *
                       C47421 +
                   ((((C336 - C335) * C114 + (C338 - C337) * C47359) * C103 +
                     ((C340 - C339) * C114 + (C342 - C341) * C47359) * C104 +
                     C672 * C105) *
                        C3262 +
                    (((C953 - C952) * C114 + (C955 - C954) * C47359) * C103 +
                     ((C957 - C956) * C114 + (C959 - C958) * C47359) * C104 +
                     ((C960 - C961) * C114 + (C962 - C963) * C47359) * C105) *
                        C47261) *
                       C47219) *
                      C47142 +
                  (((C176 * C103 +
                     ((C153 - C152) * C114 + (C155 - C154) * C47359) * C104 +
                     C178 * C105) *
                        C3262 +
                    (C554 * C103 +
                     ((C539 - C538) * C114 + (C541 - C540) * C47359) * C104 +
                     ((C779 - C780) * C114 + (C781 - C782) * C47359) * C105) *
                        C47261) *
                       C47421 +
                   ((C367 * C103 +
                     ((C352 - C351) * C114 + (C354 - C353) * C47359) * C104 +
                     ((C666 - C667) * C114 + (C668 - C669) * C47359) * C105) *
                        C3262 +
                    (C968 * C103 +
                     ((C961 - C960) * C114 + (C963 - C962) * C47359) * C104 +
                     ((C47376 * C944 - C113 * C935) * C114 +
                      (C47376 * C950 - C113 * C945) * C47359) *
                         C105) *
                        C47261) *
                       C47219) *
                      C2871)) /
                (p * q * std::sqrt(p + q));
    d2ee[16] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C47376 * C122 - C113 * C115) * C114 +
              (C47376 * C136 - C113 * C123) * C47359) *
                 C103 +
             ((C144 - C145) * C114 + (C146 - C147) * C47359) * C104 +
             C176 * C105) *
                C47257 +
            (((C113 * C481 - C47376 * C491) * C114 +
              (C113 * C492 - C47376 * C511) * C47359) *
                 C103 +
             ((C522 - C523) * C114 + (C524 - C525) * C47359) * C104 +
             C554 * C105) *
                C47264 +
            (((C47376 * C497 - C113 * C484) * C114 +
              (C47376 * C514 - C113 * C498) * C47359) *
                 C103 +
             ((C530 - C531) * C114 + (C532 - C533) * C47359) * C104 +
             C555 * C105) *
                C3770) *
               C47421 +
           ((((C113 * C294 - C47376 * C304) * C114 +
              (C113 * C305 - C47376 * C324) * C47359) *
                 C103 +
             ((C335 - C336) * C114 + (C337 - C338) * C47359) * C104 +
             C367 * C105) *
                C47257 +
            (((C47376 * C936 - C113 * C931) * C114 +
              (C47376 * C946 - C113 * C937) * C47359) *
                 C103 +
             ((C952 - C953) * C114 + (C954 - C955) * C47359) * C104 +
             C968 * C105) *
                C47264 +
            (((C113 * C1286 - C47376 * C1295) * C114 +
              (C113 * C1296 - C47376 * C1313) * C47359) *
                 C103 +
             ((C2171 - C2172) * C114 + (C2173 - C2174) * C47359) * C104 +
             ((C2175 - C2176) * C114 + (C2177 - C2178) * C47359) * C105) *
                C3770) *
               C47219) *
              C2608 +
          (((((C145 - C144) * C114 + (C147 - C146) * C47359) * C103 +
             ((C149 - C148) * C114 + (C151 - C150) * C47359) * C104 +
             C177 * C105) *
                C47257 +
            (((C523 - C522) * C114 + (C525 - C524) * C47359) * C103 +
             ((C527 - C526) * C114 + (C529 - C528) * C47359) * C104 +
             C785 * C105) *
                C47264 +
            (((C531 - C530) * C114 + (C533 - C532) * C47359) * C103 +
             ((C535 - C534) * C114 + (C537 - C536) * C47359) * C104 +
             ((C542 - C543) * C114 + (C544 - C545) * C47359) * C105) *
                C3770) *
               C47421 +
           ((((C336 - C335) * C114 + (C338 - C337) * C47359) * C103 +
             ((C340 - C339) * C114 + (C342 - C341) * C47359) * C104 +
             C672 * C105) *
                C47257 +
            (((C953 - C952) * C114 + (C955 - C954) * C47359) * C103 +
             ((C957 - C956) * C114 + (C959 - C958) * C47359) * C104 +
             ((C960 - C961) * C114 + (C962 - C963) * C47359) * C105) *
                C47264 +
            (((C2172 - C2171) * C114 + (C2174 - C2173) * C47359) * C103 +
             ((C2176 - C2175) * C114 + (C2178 - C2177) * C47359) * C104 +
             ((C47376 * C2167 - C113 * C2166) * C114 +
              (C47376 * C2169 - C113 * C2168) * C47359) *
                 C105) *
                C3770) *
               C47219) *
              C47139)) /
        (p * q * std::sqrt(p + q));
    d2ee[17] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C47376 * C122 - C113 * C115) * C114 +
              (C47376 * C136 - C113 * C123) * C47359) *
                 C103 +
             ((C144 - C145) * C114 + (C146 - C147) * C47359) * C104 +
             C176 * C105) *
                C3262 +
            (((C113 * C481 - C47376 * C491) * C114 +
              (C113 * C492 - C47376 * C511) * C47359) *
                 C103 +
             ((C522 - C523) * C114 + (C524 - C525) * C47359) * C104 +
             C554 * C105) *
                C47261) *
               C47492 +
           ((((C113 * C294 - C47376 * C304) * C114 +
              (C113 * C305 - C47376 * C324) * C47359) *
                 C103 +
             ((C335 - C336) * C114 + (C337 - C338) * C47359) * C104 +
             C367 * C105) *
                C3262 +
            (((C47376 * C936 - C113 * C931) * C114 +
              (C47376 * C946 - C113 * C937) * C47359) *
                 C103 +
             ((C952 - C953) * C114 + (C954 - C955) * C47359) * C104 +
             C968 * C105) *
                C47261) *
               C47480 +
           ((((C47376 * C310 - C113 * C297) * C114 +
              (C47376 * C327 - C113 * C311) * C47359) *
                 C103 +
             ((C343 - C344) * C114 + (C345 - C346) * C47359) * C104 +
             C368 * C105) *
                C3262 +
            (((C113 * C1289 - C47376 * C1301) * C114 +
              (C113 * C1302 - C47376 * C1316) * C47359) *
                 C103 +
             ((C1589 - C1590) * C114 + (C1591 - C1592) * C47359) * C104 +
             ((C1593 - C1594) * C114 + (C1595 - C1596) * C47359) * C105) *
                C47261) *
               C47453) *
              C2608 +
          (((((C145 - C144) * C114 + (C147 - C146) * C47359) * C103 +
             ((C149 - C148) * C114 + (C151 - C150) * C47359) * C104 +
             C177 * C105) *
                C3262 +
            (((C523 - C522) * C114 + (C525 - C524) * C47359) * C103 +
             ((C527 - C526) * C114 + (C529 - C528) * C47359) * C104 +
             C785 * C105) *
                C47261) *
               C47492 +
           ((((C336 - C335) * C114 + (C338 - C337) * C47359) * C103 +
             ((C340 - C339) * C114 + (C342 - C341) * C47359) * C104 +
             C672 * C105) *
                C3262 +
            (((C953 - C952) * C114 + (C955 - C954) * C47359) * C103 +
             ((C957 - C956) * C114 + (C959 - C958) * C47359) * C104 +
             ((C960 - C961) * C114 + (C962 - C963) * C47359) * C105) *
                C47261) *
               C47480 +
           ((((C344 - C343) * C114 + (C346 - C345) * C47359) * C103 +
             ((C348 - C347) * C114 + (C350 - C349) * C47359) * C104 +
             ((C355 - C356) * C114 + (C357 - C358) * C47359) * C105) *
                C3262 +
            (((C1590 - C1589) * C114 + (C1592 - C1591) * C47359) * C103 +
             ((C1594 - C1593) * C114 + (C1596 - C1595) * C47359) * C104 +
             ((C47376 * C1585 - C113 * C1584) * C114 +
              (C47376 * C1587 - C113 * C1586) * C47359) *
                 C105) *
                C47261) *
               C47453) *
              C47139)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C47376 * C122 - C113 * C115) * C114 +
             (C47376 * C136 - C113 * C123) * C47359) *
                C103 +
            ((C144 - C145) * C114 + (C146 - C147) * C47359) * C104 +
            C176 * C105) *
               C3262 +
           (((C113 * C481 - C47376 * C491) * C114 +
             (C113 * C492 - C47376 * C511) * C47359) *
                C103 +
            ((C522 - C523) * C114 + (C524 - C525) * C47359) * C104 +
            C554 * C105) *
               C47261) *
              C47156 * C47498 +
          ((((C145 - C144) * C114 + (C147 - C146) * C47359) * C103 +
            ((C149 - C148) * C114 + (C151 - C150) * C47359) * C104 +
            C177 * C105) *
               C3262 +
           (((C523 - C522) * C114 + (C525 - C524) * C47359) * C103 +
            ((C527 - C526) * C114 + (C529 - C528) * C47359) * C104 +
            C785 * C105) *
               C47261) *
              C47156 * C47491 +
          ((C176 * C103 +
            ((C153 - C152) * C114 + (C155 - C154) * C47359) * C104 +
            C178 * C105) *
               C3262 +
           (C554 * C103 +
            ((C539 - C538) * C114 + (C541 - C540) * C47359) * C104 +
            ((C779 - C780) * C114 + (C781 - C782) * C47359) * C105) *
               C47261) *
              C47156 * C47478 +
          ((C177 * C103 +
            ((C157 - C156) * C114 + (C159 - C158) * C47359) * C104 +
            ((C160 - C161) * C114 + (C162 - C163) * C47359) * C105) *
               C3262 +
           (C785 * C103 +
            ((C780 - C779) * C114 + (C782 - C781) * C47359) * C104 +
            ((C47376 * C773 - C113 * C772) * C114 +
             (C47376 * C775 - C113 * C774) * C47359) *
                C105) *
               C47261) *
              C47156 * C47457)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C47376 * C122 - C113 * C115) * C114 +
             (C47376 * C136 - C113 * C123) * C47359) *
                C103 +
            ((C144 - C145) * C114 + (C146 - C147) * C47359) * C104 +
            C176 * C105) *
               C47500 +
           (((C113 * C481 - C47376 * C491) * C114 +
             (C113 * C492 - C47376 * C511) * C47359) *
                C103 +
            ((C522 - C523) * C114 + (C524 - C525) * C47359) * C104 +
            C554 * C105) *
               C47497 +
           (((C47376 * C497 - C113 * C484) * C114 +
             (C47376 * C514 - C113 * C498) * C47359) *
                C103 +
            ((C530 - C531) * C114 + (C532 - C533) * C47359) * C104 +
            C555 * C105) *
               C47488 +
           (((C113 * C1996 - C47376 * C2002) * C114 +
             (C113 * C2003 - C47376 * C2014) * C47359) *
                C103 +
            ((C2285 - C2286) * C114 + (C2287 - C2288) * C47359) * C104 +
            ((C2289 - C2290) * C114 + (C2291 - C2292) * C47359) * C105) *
               C47469) *
              C47156 * C2608 +
          ((((C145 - C144) * C114 + (C147 - C146) * C47359) * C103 +
            ((C149 - C148) * C114 + (C151 - C150) * C47359) * C104 +
            C177 * C105) *
               C47500 +
           (((C523 - C522) * C114 + (C525 - C524) * C47359) * C103 +
            ((C527 - C526) * C114 + (C529 - C528) * C47359) * C104 +
            C785 * C105) *
               C47497 +
           (((C531 - C530) * C114 + (C533 - C532) * C47359) * C103 +
            ((C535 - C534) * C114 + (C537 - C536) * C47359) * C104 +
            ((C542 - C543) * C114 + (C544 - C545) * C47359) * C105) *
               C47488 +
           (((C2286 - C2285) * C114 + (C2288 - C2287) * C47359) * C103 +
            ((C2290 - C2289) * C114 + (C2292 - C2291) * C47359) * C104 +
            ((C47376 * C2281 - C113 * C2280) * C114 +
             (C47376 * C2283 - C113 * C2282) * C47359) *
                C105) *
               C47469) *
              C47156 * C47139)) /
            (p * q * std::sqrt(p + q));
    d2ee[18] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 (((((C47376 * C122 - C113 * C115) * C114 +
                     (C47376 * C136 - C113 * C123) * C47359) *
                        C103 +
                    ((C144 - C145) * C114 + (C146 - C147) * C47359) * C104 +
                    C176 * C105) *
                       C47257 +
                   (((C113 * C481 - C47376 * C491) * C114 +
                     (C113 * C492 - C47376 * C511) * C47359) *
                        C103 +
                    ((C522 - C523) * C114 + (C524 - C525) * C47359) * C104 +
                    C554 * C105) *
                       C47264 +
                   (((C47376 * C497 - C113 * C484) * C114 +
                     (C47376 * C514 - C113 * C498) * C47359) *
                        C103 +
                    ((C530 - C531) * C114 + (C532 - C533) * C47359) * C104 +
                    C555 * C105) *
                       C3770) *
                      C47156 * C47133 +
                  ((((C145 - C144) * C114 + (C147 - C146) * C47359) * C103 +
                    ((C149 - C148) * C114 + (C151 - C150) * C47359) * C104 +
                    C177 * C105) *
                       C47257 +
                   (((C523 - C522) * C114 + (C525 - C524) * C47359) * C103 +
                    ((C527 - C526) * C114 + (C529 - C528) * C47359) * C104 +
                    C785 * C105) *
                       C47264 +
                   (((C531 - C530) * C114 + (C533 - C532) * C47359) * C103 +
                    ((C535 - C534) * C114 + (C537 - C536) * C47359) * C104 +
                    ((C542 - C543) * C114 + (C544 - C545) * C47359) * C105) *
                       C3770) *
                      C47156 * C47142 +
                  ((C176 * C103 +
                    ((C153 - C152) * C114 + (C155 - C154) * C47359) * C104 +
                    C178 * C105) *
                       C47257 +
                   (C554 * C103 +
                    ((C539 - C538) * C114 + (C541 - C540) * C47359) * C104 +
                    ((C779 - C780) * C114 + (C781 - C782) * C47359) * C105) *
                       C47264 +
                   (C555 * C103 +
                    ((C543 - C542) * C114 + (C545 - C544) * C47359) * C104 +
                    ((C47376 * C509 - C113 * C490) * C114 +
                     (C47376 * C520 - C113 * C510) * C47359) *
                        C105) *
                       C3770) *
                      C47156 * C2871)) /
                (p * q * std::sqrt(p + q));
    d2ee[19] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C47376 * C122 - C113 * C115) * C114 +
             (C47376 * C136 - C113 * C123) * C47359) *
                C103 +
            ((C144 - C145) * C114 + (C146 - C147) * C47359) * C104 +
            C176 * C105) *
               C3262 +
           (((C113 * C481 - C47376 * C491) * C114 +
             (C113 * C492 - C47376 * C511) * C47359) *
                C103 +
            ((C522 - C523) * C114 + (C524 - C525) * C47359) * C104 +
            C554 * C105) *
               C47261) *
              C47156 * C47498 +
          ((((C145 - C144) * C114 + (C147 - C146) * C47359) * C103 +
            ((C149 - C148) * C114 + (C151 - C150) * C47359) * C104 +
            C177 * C105) *
               C3262 +
           (((C523 - C522) * C114 + (C525 - C524) * C47359) * C103 +
            ((C527 - C526) * C114 + (C529 - C528) * C47359) * C104 +
            C785 * C105) *
               C47261) *
              C47156 * C47491 +
          ((C176 * C103 +
            ((C153 - C152) * C114 + (C155 - C154) * C47359) * C104 +
            C178 * C105) *
               C3262 +
           (C554 * C103 +
            ((C539 - C538) * C114 + (C541 - C540) * C47359) * C104 +
            ((C779 - C780) * C114 + (C781 - C782) * C47359) * C105) *
               C47261) *
              C47156 * C47478 +
          ((C177 * C103 +
            ((C157 - C156) * C114 + (C159 - C158) * C47359) * C104 +
            ((C160 - C161) * C114 + (C162 - C163) * C47359) * C105) *
               C3262 +
           (C785 * C103 +
            ((C780 - C779) * C114 + (C782 - C781) * C47359) * C104 +
            ((C47376 * C773 - C113 * C772) * C114 +
             (C47376 * C775 - C113 * C774) * C47359) *
                C105) *
               C47261) *
              C47156 * C47457)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C47376 * C122 - C113 * C115) * C114 +
              (C47376 * C136 - C113 * C123) * C47359) *
                 C103 +
             ((C144 - C145) * C114 + (C146 - C147) * C47359) * C104 +
             C176 * C105) *
                C3262 +
            (((C113 * C481 - C47376 * C491) * C114 +
              (C113 * C492 - C47376 * C511) * C47359) *
                 C103 +
             ((C522 - C523) * C114 + (C524 - C525) * C47359) * C104 +
             C554 * C105) *
                C47261) *
               C47492 +
           ((((C113 * C294 - C47376 * C304) * C114 +
              (C113 * C305 - C47376 * C324) * C47359) *
                 C103 +
             ((C335 - C336) * C114 + (C337 - C338) * C47359) * C104 +
             C367 * C105) *
                C3262 +
            (((C47376 * C936 - C113 * C931) * C114 +
              (C47376 * C946 - C113 * C937) * C47359) *
                 C103 +
             ((C952 - C953) * C114 + (C954 - C955) * C47359) * C104 +
             C968 * C105) *
                C47261) *
               C47480 +
           ((((C47376 * C310 - C113 * C297) * C114 +
              (C47376 * C327 - C113 * C311) * C47359) *
                 C103 +
             ((C343 - C344) * C114 + (C345 - C346) * C47359) * C104 +
             C368 * C105) *
                C3262 +
            (((C113 * C1289 - C47376 * C1301) * C114 +
              (C113 * C1302 - C47376 * C1316) * C47359) *
                 C103 +
             ((C1589 - C1590) * C114 + (C1591 - C1592) * C47359) * C104 +
             ((C1593 - C1594) * C114 + (C1595 - C1596) * C47359) * C105) *
                C47261) *
               C47453) *
              C2608 +
          (((((C145 - C144) * C114 + (C147 - C146) * C47359) * C103 +
             ((C149 - C148) * C114 + (C151 - C150) * C47359) * C104 +
             C177 * C105) *
                C3262 +
            (((C523 - C522) * C114 + (C525 - C524) * C47359) * C103 +
             ((C527 - C526) * C114 + (C529 - C528) * C47359) * C104 +
             C785 * C105) *
                C47261) *
               C47492 +
           ((((C336 - C335) * C114 + (C338 - C337) * C47359) * C103 +
             ((C340 - C339) * C114 + (C342 - C341) * C47359) * C104 +
             C672 * C105) *
                C3262 +
            (((C953 - C952) * C114 + (C955 - C954) * C47359) * C103 +
             ((C957 - C956) * C114 + (C959 - C958) * C47359) * C104 +
             ((C960 - C961) * C114 + (C962 - C963) * C47359) * C105) *
                C47261) *
               C47480 +
           ((((C344 - C343) * C114 + (C346 - C345) * C47359) * C103 +
             ((C348 - C347) * C114 + (C350 - C349) * C47359) * C104 +
             ((C355 - C356) * C114 + (C357 - C358) * C47359) * C105) *
                C3262 +
            (((C1590 - C1589) * C114 + (C1592 - C1591) * C47359) * C103 +
             ((C1594 - C1593) * C114 + (C1596 - C1595) * C47359) * C104 +
             ((C47376 * C1585 - C113 * C1584) * C114 +
              (C47376 * C1587 - C113 * C1586) * C47359) *
                 C105) *
                C47261) *
               C47453) *
              C47139)) /
            (p * q * std::sqrt(p + q));
    d2ee[20] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C47376 * C122 - C113 * C115) * C114 +
             (C47376 * C136 - C113 * C123) * C47359) *
                C103 +
            ((C144 - C145) * C114 + (C146 - C147) * C47359) * C104 +
            C176 * C105) *
               C47174 * C47421 +
           (((C113 * C294 - C47376 * C304) * C114 +
             (C113 * C305 - C47376 * C324) * C47359) *
                C103 +
            ((C335 - C336) * C114 + (C337 - C338) * C47359) * C104 +
            C367 * C105) *
               C47174 * C47219) *
              C655 +
          ((((C145 - C144) * C114 + (C147 - C146) * C47359) * C103 +
            ((C149 - C148) * C114 + (C151 - C150) * C47359) * C104 +
            C177 * C105) *
               C47174 * C47421 +
           (((C336 - C335) * C114 + (C338 - C337) * C47359) * C103 +
            ((C340 - C339) * C114 + (C342 - C341) * C47359) * C104 +
            C672 * C105) *
               C47174 * C47219) *
              C656 +
          ((C176 * C103 +
            ((C153 - C152) * C114 + (C155 - C154) * C47359) * C104 +
            C178 * C105) *
               C47174 * C47421 +
           (C367 * C103 +
            ((C352 - C351) * C114 + (C354 - C353) * C47359) * C104 +
            ((C666 - C667) * C114 + (C668 - C669) * C47359) * C105) *
               C47174 * C47219) *
              C657 +
          ((C177 * C103 +
            ((C157 - C156) * C114 + (C159 - C158) * C47359) * C104 +
            ((C160 - C161) * C114 + (C162 - C163) * C47359) * C105) *
               C47174 * C47421 +
           (C672 * C103 +
            ((C667 - C666) * C114 + (C669 - C668) * C47359) * C104 +
            ((C47376 * C660 - C113 * C659) * C114 +
             (C47376 * C662 - C113 * C661) * C47359) *
                C105) *
               C47174 * C47219) *
              C47457)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C47376 * C122 - C113 * C115) * C114 +
             (C47376 * C136 - C113 * C123) * C47359) *
                C103 +
            ((C144 - C145) * C114 + (C146 - C147) * C47359) * C104 +
            C176 * C105) *
               C47174 * C1420 +
           (((C113 * C294 - C47376 * C304) * C114 +
             (C113 * C305 - C47376 * C324) * C47359) *
                C103 +
            ((C335 - C336) * C114 + (C337 - C338) * C47359) * C104 +
            C367 * C105) *
               C47174 * C1421 +
           (((C47376 * C310 - C113 * C297) * C114 +
             (C47376 * C327 - C113 * C311) * C47359) *
                C103 +
            ((C343 - C344) * C114 + (C345 - C346) * C47359) * C104 +
            C368 * C105) *
               C47174 * C1422 +
           (((C113 * C1152 - C47376 * C1158) * C114 +
             (C113 * C1159 - C47376 * C1170) * C47359) *
                C103 +
            ((C1431 - C1432) * C114 + (C1433 - C1434) * C47359) * C104 +
            ((C1435 - C1436) * C114 + (C1437 - C1438) * C47359) * C105) *
               C47174 * C47463) *
              C47407 +
          ((((C145 - C144) * C114 + (C147 - C146) * C47359) * C103 +
            ((C149 - C148) * C114 + (C151 - C150) * C47359) * C104 +
            C177 * C105) *
               C47174 * C1420 +
           (((C336 - C335) * C114 + (C338 - C337) * C47359) * C103 +
            ((C340 - C339) * C114 + (C342 - C341) * C47359) * C104 +
            C672 * C105) *
               C47174 * C1421 +
           (((C344 - C343) * C114 + (C346 - C345) * C47359) * C103 +
            ((C348 - C347) * C114 + (C350 - C349) * C47359) * C104 +
            ((C355 - C356) * C114 + (C357 - C358) * C47359) * C105) *
               C47174 * C1422 +
           (((C1432 - C1431) * C114 + (C1434 - C1433) * C47359) * C103 +
            ((C1436 - C1435) * C114 + (C1438 - C1437) * C47359) * C104 +
            ((C47376 * C1427 - C113 * C1426) * C114 +
             (C47376 * C1429 - C113 * C1428) * C47359) *
                C105) *
               C47174 * C47463) *
              C47139)) /
            (p * q * std::sqrt(p + q));
    d2ee[21] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C47376 * C122 - C113 * C115) * C114 +
              (C47376 * C136 - C113 * C123) * C47359) *
                 C103 +
             ((C144 - C145) * C114 + (C146 - C147) * C47359) * C104 +
             C176 * C105) *
                C47422 +
            (((C113 * C481 - C47376 * C491) * C114 +
              (C113 * C492 - C47376 * C511) * C47359) *
                 C103 +
             ((C522 - C523) * C114 + (C524 - C525) * C47359) * C104 +
             C554 * C105) *
                C47261) *
               C47421 +
           ((((C113 * C294 - C47376 * C304) * C114 +
              (C113 * C305 - C47376 * C324) * C47359) *
                 C103 +
             ((C335 - C336) * C114 + (C337 - C338) * C47359) * C104 +
             C367 * C105) *
                C47422 +
            (((C47376 * C936 - C113 * C931) * C114 +
              (C47376 * C946 - C113 * C937) * C47359) *
                 C103 +
             ((C952 - C953) * C114 + (C954 - C955) * C47359) * C104 +
             C968 * C105) *
                C47261) *
               C47219) *
              C291 +
          (((((C145 - C144) * C114 + (C147 - C146) * C47359) * C103 +
             ((C149 - C148) * C114 + (C151 - C150) * C47359) * C104 +
             C177 * C105) *
                C47422 +
            (((C523 - C522) * C114 + (C525 - C524) * C47359) * C103 +
             ((C527 - C526) * C114 + (C529 - C528) * C47359) * C104 +
             C785 * C105) *
                C47261) *
               C47421 +
           ((((C336 - C335) * C114 + (C338 - C337) * C47359) * C103 +
             ((C340 - C339) * C114 + (C342 - C341) * C47359) * C104 +
             C672 * C105) *
                C47422 +
            (((C953 - C952) * C114 + (C955 - C954) * C47359) * C103 +
             ((C957 - C956) * C114 + (C959 - C958) * C47359) * C104 +
             ((C960 - C961) * C114 + (C962 - C963) * C47359) * C105) *
                C47261) *
               C47219) *
              C292 +
          (((C176 * C103 +
             ((C153 - C152) * C114 + (C155 - C154) * C47359) * C104 +
             C178 * C105) *
                C47422 +
            (C554 * C103 +
             ((C539 - C538) * C114 + (C541 - C540) * C47359) * C104 +
             ((C779 - C780) * C114 + (C781 - C782) * C47359) * C105) *
                C47261) *
               C47421 +
           ((C367 * C103 +
             ((C352 - C351) * C114 + (C354 - C353) * C47359) * C104 +
             ((C666 - C667) * C114 + (C668 - C669) * C47359) * C105) *
                C47422 +
            (C968 * C103 +
             ((C961 - C960) * C114 + (C963 - C962) * C47359) * C104 +
             ((C47376 * C944 - C113 * C935) * C114 +
              (C47376 * C950 - C113 * C945) * C47359) *
                 C105) *
                C47261) *
               C47219) *
              C47447)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C47376 * C122 - C113 * C115) * C114 +
             (C47376 * C136 - C113 * C123) * C47359) *
                C103 +
            ((C144 - C145) * C114 + (C146 - C147) * C47359) * C104 +
            C176 * C105) *
               C47422 +
           (((C113 * C481 - C47376 * C491) * C114 +
             (C113 * C492 - C47376 * C511) * C47359) *
                C103 +
            ((C522 - C523) * C114 + (C524 - C525) * C47359) * C104 +
            C554 * C105) *
               C47261) *
              C1420 +
          ((((C113 * C294 - C47376 * C304) * C114 +
             (C113 * C305 - C47376 * C324) * C47359) *
                C103 +
            ((C335 - C336) * C114 + (C337 - C338) * C47359) * C104 +
            C367 * C105) *
               C47422 +
           (((C47376 * C936 - C113 * C931) * C114 +
             (C47376 * C946 - C113 * C937) * C47359) *
                C103 +
            ((C952 - C953) * C114 + (C954 - C955) * C47359) * C104 +
            C968 * C105) *
               C47261) *
              C1421 +
          ((((C47376 * C310 - C113 * C297) * C114 +
             (C47376 * C327 - C113 * C311) * C47359) *
                C103 +
            ((C343 - C344) * C114 + (C345 - C346) * C47359) * C104 +
            C368 * C105) *
               C47422 +
           (((C113 * C1289 - C47376 * C1301) * C114 +
             (C113 * C1302 - C47376 * C1316) * C47359) *
                C103 +
            ((C1589 - C1590) * C114 + (C1591 - C1592) * C47359) * C104 +
            ((C1593 - C1594) * C114 + (C1595 - C1596) * C47359) * C105) *
               C47261) *
              C1422 +
          ((((C113 * C1152 - C47376 * C1158) * C114 +
             (C113 * C1159 - C47376 * C1170) * C47359) *
                C103 +
            ((C1431 - C1432) * C114 + (C1433 - C1434) * C47359) * C104 +
            ((C1435 - C1436) * C114 + (C1437 - C1438) * C47359) * C105) *
               C47422 +
           (((C47376 * C1697 - C113 * C1694) * C114 +
             (C47376 * C1703 - C113 * C1698) * C47359) *
                C103 +
            ((C47376 * C1699 - C113 * C1695) * C114 +
             (C47376 * C1704 - C113 * C1700) * C47359) *
                C104 +
            ((C47376 * C1701 - C113 * C1696) * C114 +
             (C47376 * C1705 - C113 * C1702) * C47359) *
                C105) *
               C47261) *
              C47463) *
         C47128) /
            (p * q * std::sqrt(p + q));
    d2ee[22] += (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                 (((((C47376 * C122 - C113 * C115) * C114 +
                     (C47376 * C136 - C113 * C123) * C47359) *
                        C103 +
                    ((C144 - C145) * C114 + (C146 - C147) * C47359) * C104 +
                    C176 * C105) *
                       C47174 * C47492 +
                   (((C113 * C294 - C47376 * C304) * C114 +
                     (C113 * C305 - C47376 * C324) * C47359) *
                        C103 +
                    ((C335 - C336) * C114 + (C337 - C338) * C47359) * C104 +
                    C367 * C105) *
                       C47174 * C47480 +
                   (((C47376 * C310 - C113 * C297) * C114 +
                     (C47376 * C327 - C113 * C311) * C47359) *
                        C103 +
                    ((C343 - C344) * C114 + (C345 - C346) * C47359) * C104 +
                    C368 * C105) *
                       C47174 * C47453) *
                      C291 +
                  ((((C145 - C144) * C114 + (C147 - C146) * C47359) * C103 +
                    ((C149 - C148) * C114 + (C151 - C150) * C47359) * C104 +
                    C177 * C105) *
                       C47174 * C47492 +
                   (((C336 - C335) * C114 + (C338 - C337) * C47359) * C103 +
                    ((C340 - C339) * C114 + (C342 - C341) * C47359) * C104 +
                    ((C351 - C352) * C114 + (C353 - C354) * C47359) * C105) *
                       C47174 * C47480 +
                   (((C344 - C343) * C114 + (C346 - C345) * C47359) * C103 +
                    ((C348 - C347) * C114 + (C350 - C349) * C47359) * C104 +
                    ((C355 - C356) * C114 + (C357 - C358) * C47359) * C105) *
                       C47174 * C47453) *
                      C292 +
                  ((C176 * C103 +
                    ((C153 - C152) * C114 + (C155 - C154) * C47359) * C104 +
                    C178 * C105) *
                       C47174 * C47492 +
                   (C367 * C103 +
                    ((C352 - C351) * C114 + (C354 - C353) * C47359) * C104 +
                    ((C113 * C302 - C47376 * C320) * C114 +
                     (C113 * C321 - C47376 * C332) * C47359) *
                        C105) *
                       C47174 * C47480 +
                   (C368 * C103 +
                    ((C356 - C355) * C114 + (C358 - C357) * C47359) * C104 +
                    ((C47376 * C322 - C113 * C303) * C114 +
                     (C47376 * C333 - C113 * C323) * C47359) *
                        C105) *
                       C47174 * C47453) *
                      C47447)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                 ((((C47376 * C122 - C113 * C115) * C114 +
                    (C47376 * C136 - C113 * C123) * C47359) *
                       C103 +
                   ((C144 - C145) * C114 + (C146 - C147) * C47359) * C104 +
                   C176 * C105) *
                      C47174 * C47156 * C108 +
                  (((C145 - C144) * C114 + (C147 - C146) * C47359) * C103 +
                   ((C149 - C148) * C114 + (C151 - C150) * C47359) * C104 +
                   C177 * C105) *
                      C47174 * C47156 * C109 +
                  (C176 * C103 +
                   ((C153 - C152) * C114 + (C155 - C154) * C47359) * C104 +
                   C178 * C105) *
                      C47174 * C47156 * C110 +
                  (C177 * C103 +
                   ((C157 - C156) * C114 + (C159 - C158) * C47359) * C104 +
                   ((C160 - C161) * C114 + (C162 - C163) * C47359) * C105) *
                      C47174 * C47156 * C111 +
                  (C178 * C103 +
                   ((C161 - C160) * C114 + (C163 - C162) * C47359) * C104 +
                   ((C47376 * C134 - C113 * C121) * C114 +
                    (C47376 * C142 - C113 * C135) * C47359) *
                       C105) *
                      C47174 * C47156 * C112)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 (((((C47376 * C122 - C113 * C115) * C114 +
                     (C47376 * C136 - C113 * C123) * C47359) *
                        C103 +
                    ((C144 - C145) * C114 + (C146 - C147) * C47359) * C104 +
                    C176 * C105) *
                       C47493 +
                   (((C113 * C481 - C47376 * C491) * C114 +
                     (C113 * C492 - C47376 * C511) * C47359) *
                        C103 +
                    ((C522 - C523) * C114 + (C524 - C525) * C47359) * C104 +
                    C554 * C105) *
                       C47482 +
                   (((C47376 * C497 - C113 * C484) * C114 +
                     (C47376 * C514 - C113 * C498) * C47359) *
                        C103 +
                    ((C530 - C531) * C114 + (C532 - C533) * C47359) * C104 +
                    C555 * C105) *
                       C47456) *
                      C47156 * C291 +
                  ((((C145 - C144) * C114 + (C147 - C146) * C47359) * C103 +
                    ((C149 - C148) * C114 + (C151 - C150) * C47359) * C104 +
                    C177 * C105) *
                       C47493 +
                   (((C523 - C522) * C114 + (C525 - C524) * C47359) * C103 +
                    ((C527 - C526) * C114 + (C529 - C528) * C47359) * C104 +
                    ((C538 - C539) * C114 + (C540 - C541) * C47359) * C105) *
                       C47482 +
                   (((C531 - C530) * C114 + (C533 - C532) * C47359) * C103 +
                    ((C535 - C534) * C114 + (C537 - C536) * C47359) * C104 +
                    ((C542 - C543) * C114 + (C544 - C545) * C47359) * C105) *
                       C47456) *
                      C47156 * C292 +
                  ((C176 * C103 +
                    ((C153 - C152) * C114 + (C155 - C154) * C47359) * C104 +
                    C178 * C105) *
                       C47493 +
                   (C554 * C103 +
                    ((C539 - C538) * C114 + (C541 - C540) * C47359) * C104 +
                    ((C113 * C489 - C47376 * C507) * C114 +
                     (C113 * C508 - C47376 * C519) * C47359) *
                        C105) *
                       C47482 +
                   (C555 * C103 +
                    ((C543 - C542) * C114 + (C545 - C544) * C47359) * C104 +
                    ((C47376 * C509 - C113 * C490) * C114 +
                     (C47376 * C520 - C113 * C510) * C47359) *
                        C105) *
                       C47456) *
                      C47156 * C47447)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                 (((((C47376 * C122 - C113 * C115) * C114 +
                     (C47376 * C136 - C113 * C123) * C47359) *
                        C103 +
                    ((C144 - C145) * C114 + (C146 - C147) * C47359) * C104 +
                    C176 * C105) *
                       C47174 * C1078 +
                   (((C113 * C294 - C47376 * C304) * C114 +
                     (C113 * C305 - C47376 * C324) * C47359) *
                        C103 +
                    ((C335 - C336) * C114 + (C337 - C338) * C47359) * C104 +
                    C367 * C105) *
                       C47174 * C1079 +
                   (((C47376 * C310 - C113 * C297) * C114 +
                     (C47376 * C327 - C113 * C311) * C47359) *
                        C103 +
                    ((C343 - C344) * C114 + (C345 - C346) * C47359) * C104 +
                    C368 * C105) *
                       C47174 * C47453) *
                      C47489 +
                  ((((C145 - C144) * C114 + (C147 - C146) * C47359) * C103 +
                    ((C149 - C148) * C114 + (C151 - C150) * C47359) * C104 +
                    C177 * C105) *
                       C47174 * C1078 +
                   (((C336 - C335) * C114 + (C338 - C337) * C47359) * C103 +
                    ((C340 - C339) * C114 + (C342 - C341) * C47359) * C104 +
                    C672 * C105) *
                       C47174 * C1079 +
                   (((C344 - C343) * C114 + (C346 - C345) * C47359) * C103 +
                    ((C348 - C347) * C114 + (C350 - C349) * C47359) * C104 +
                    ((C355 - C356) * C114 + (C357 - C358) * C47359) * C105) *
                       C47174 * C47453) *
                      C47476 +
                  ((C176 * C103 +
                    ((C153 - C152) * C114 + (C155 - C154) * C47359) * C104 +
                    C178 * C105) *
                       C47174 * C1078 +
                   (C367 * C103 +
                    ((C352 - C351) * C114 + (C354 - C353) * C47359) * C104 +
                    ((C666 - C667) * C114 + (C668 - C669) * C47359) * C105) *
                       C47174 * C1079 +
                   (C368 * C103 +
                    ((C356 - C355) * C114 + (C358 - C357) * C47359) * C104 +
                    ((C47376 * C322 - C113 * C303) * C114 +
                     (C47376 * C333 - C113 * C323) * C47359) *
                        C105) *
                       C47174 * C47453) *
                      C47447)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                 ((((C47376 * C122 - C113 * C115) * C114 +
                    (C47376 * C136 - C113 * C123) * C47359) *
                       C103 +
                   ((C144 - C145) * C114 + (C146 - C147) * C47359) * C104 +
                   C176 * C105) *
                      C47174 * C1146 +
                  (((C113 * C294 - C47376 * C304) * C114 +
                    (C113 * C305 - C47376 * C324) * C47359) *
                       C103 +
                   ((C335 - C336) * C114 + (C337 - C338) * C47359) * C104 +
                   C367 * C105) *
                      C47174 * C1147 +
                  (((C47376 * C310 - C113 * C297) * C114 +
                    (C47376 * C327 - C113 * C311) * C47359) *
                       C103 +
                   ((C343 - C344) * C114 + (C345 - C346) * C47359) * C104 +
                   C368 * C105) *
                      C47174 * C1148 +
                  (((C113 * C1152 - C47376 * C1158) * C114 +
                    (C113 * C1159 - C47376 * C1170) * C47359) *
                       C103 +
                   ((C113 * C1153 - C47376 * C1160) * C114 +
                    (C113 * C1161 - C47376 * C1171) * C47359) *
                       C104 +
                   ((C113 * C1154 - C47376 * C1162) * C114 +
                    (C113 * C1163 - C47376 * C1172) * C47359) *
                       C105) *
                      C47174 * C1149 +
                  (((C47376 * C1164 - C113 * C1155) * C114 +
                    (C47376 * C1173 - C113 * C1165) * C47359) *
                       C103 +
                   ((C47376 * C1166 - C113 * C1156) * C114 +
                    (C47376 * C1174 - C113 * C1167) * C47359) *
                       C104 +
                   ((C47376 * C1168 - C113 * C1157) * C114 +
                    (C47376 * C1175 - C113 * C1169) * C47359) *
                       C105) *
                      C47174 * C1150) *
                 C47128) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 (((((C47376 * C122 - C113 * C115) * C114 +
                     (C47376 * C136 - C113 * C123) * C47359) *
                        C103 +
                    ((C144 - C145) * C114 + (C146 - C147) * C47359) * C104 +
                    C176 * C105) *
                       C47493 +
                   (((C113 * C481 - C47376 * C491) * C114 +
                     (C113 * C492 - C47376 * C511) * C47359) *
                        C103 +
                    ((C522 - C523) * C114 + (C524 - C525) * C47359) * C104 +
                    C554 * C105) *
                       C47482 +
                   (((C47376 * C497 - C113 * C484) * C114 +
                     (C47376 * C514 - C113 * C498) * C47359) *
                        C103 +
                    ((C530 - C531) * C114 + (C532 - C533) * C47359) * C104 +
                    C555 * C105) *
                       C47456) *
                      C1078 +
                  ((((C113 * C294 - C47376 * C304) * C114 +
                     (C113 * C305 - C47376 * C324) * C47359) *
                        C103 +
                    ((C335 - C336) * C114 + (C337 - C338) * C47359) * C104 +
                    C367 * C105) *
                       C47493 +
                   (((C47376 * C936 - C113 * C931) * C114 +
                     (C47376 * C946 - C113 * C937) * C47359) *
                        C103 +
                    ((C952 - C953) * C114 + (C954 - C955) * C47359) * C104 +
                    C968 * C105) *
                       C47482 +
                   (((C113 * C1286 - C47376 * C1295) * C114 +
                     (C113 * C1296 - C47376 * C1313) * C47359) *
                        C103 +
                    ((C113 * C1287 - C47376 * C1297) * C114 +
                     (C113 * C1298 - C47376 * C1314) * C47359) *
                        C104 +
                    ((C113 * C1288 - C47376 * C1299) * C114 +
                     (C113 * C1300 - C47376 * C1315) * C47359) *
                        C105) *
                       C47456) *
                      C1079 +
                  ((((C47376 * C310 - C113 * C297) * C114 +
                     (C47376 * C327 - C113 * C311) * C47359) *
                        C103 +
                    ((C343 - C344) * C114 + (C345 - C346) * C47359) * C104 +
                    C368 * C105) *
                       C47493 +
                   (((C113 * C1289 - C47376 * C1301) * C114 +
                     (C113 * C1302 - C47376 * C1316) * C47359) *
                        C103 +
                    ((C113 * C1290 - C47376 * C1303) * C114 +
                     (C113 * C1304 - C47376 * C1317) * C47359) *
                        C104 +
                    ((C113 * C1291 - C47376 * C1305) * C114 +
                     (C113 * C1306 - C47376 * C1318) * C47359) *
                        C105) *
                       C47482 +
                   (((C47376 * C1307 - C113 * C1292) * C114 +
                     (C47376 * C1319 - C113 * C1308) * C47359) *
                        C103 +
                    ((C47376 * C1309 - C113 * C1293) * C114 +
                     (C47376 * C1320 - C113 * C1310) * C47359) *
                        C104 +
                    ((C47376 * C1311 - C113 * C1294) * C114 +
                     (C47376 * C1321 - C113 * C1312) * C47359) *
                        C105) *
                       C47456) *
                      C47453) *
                 C47128) /
                    (p * q * std::sqrt(p + q));
    d2ee[23] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C47376 * C122 - C113 * C115) * C114 +
             (C47376 * C136 - C113 * C123) * C47359) *
                C103 +
            ((C144 - C145) * C114 + (C146 - C147) * C47359) * C104 +
            C176 * C105) *
               C47422 +
           (((C113 * C481 - C47376 * C491) * C114 +
             (C113 * C492 - C47376 * C511) * C47359) *
                C103 +
            ((C522 - C523) * C114 + (C524 - C525) * C47359) * C104 +
            C554 * C105) *
               C47261) *
              C47156 * C655 +
          ((((C145 - C144) * C114 + (C147 - C146) * C47359) * C103 +
            ((C149 - C148) * C114 + (C151 - C150) * C47359) * C104 +
            C177 * C105) *
               C47422 +
           (((C523 - C522) * C114 + (C525 - C524) * C47359) * C103 +
            ((C527 - C526) * C114 + (C529 - C528) * C47359) * C104 +
            C785 * C105) *
               C47261) *
              C47156 * C656 +
          ((C176 * C103 +
            ((C153 - C152) * C114 + (C155 - C154) * C47359) * C104 +
            C178 * C105) *
               C47422 +
           (C554 * C103 +
            ((C539 - C538) * C114 + (C541 - C540) * C47359) * C104 +
            ((C779 - C780) * C114 + (C781 - C782) * C47359) * C105) *
               C47261) *
              C47156 * C657 +
          ((C177 * C103 +
            ((C157 - C156) * C114 + (C159 - C158) * C47359) * C104 +
            ((C160 - C161) * C114 + (C162 - C163) * C47359) * C105) *
               C47422 +
           (C785 * C103 +
            ((C780 - C779) * C114 + (C782 - C781) * C47359) * C104 +
            ((C47376 * C773 - C113 * C772) * C114 +
             (C47376 * C775 - C113 * C774) * C47359) *
                C105) *
               C47261) *
              C47156 * C47457)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C47376 * C122 - C113 * C115) * C114 +
              (C47376 * C136 - C113 * C123) * C47359) *
                 C103 +
             ((C144 - C145) * C114 + (C146 - C147) * C47359) * C104 +
             C176 * C105) *
                C47422 +
            (((C113 * C481 - C47376 * C491) * C114 +
              (C113 * C492 - C47376 * C511) * C47359) *
                 C103 +
             ((C522 - C523) * C114 + (C524 - C525) * C47359) * C104 +
             C554 * C105) *
                C47261) *
               C1078 +
           ((((C113 * C294 - C47376 * C304) * C114 +
              (C113 * C305 - C47376 * C324) * C47359) *
                 C103 +
             ((C335 - C336) * C114 + (C337 - C338) * C47359) * C104 +
             C367 * C105) *
                C47422 +
            (((C47376 * C936 - C113 * C931) * C114 +
              (C47376 * C946 - C113 * C937) * C47359) *
                 C103 +
             ((C952 - C953) * C114 + (C954 - C955) * C47359) * C104 +
             C968 * C105) *
                C47261) *
               C1079 +
           ((((C47376 * C310 - C113 * C297) * C114 +
              (C47376 * C327 - C113 * C311) * C47359) *
                 C103 +
             ((C343 - C344) * C114 + (C345 - C346) * C47359) * C104 +
             C368 * C105) *
                C47422 +
            (((C113 * C1289 - C47376 * C1301) * C114 +
              (C113 * C1302 - C47376 * C1316) * C47359) *
                 C103 +
             ((C1589 - C1590) * C114 + (C1591 - C1592) * C47359) * C104 +
             ((C1593 - C1594) * C114 + (C1595 - C1596) * C47359) * C105) *
                C47261) *
               C47453) *
              C47407 +
          (((((C145 - C144) * C114 + (C147 - C146) * C47359) * C103 +
             ((C149 - C148) * C114 + (C151 - C150) * C47359) * C104 +
             C177 * C105) *
                C47422 +
            (((C523 - C522) * C114 + (C525 - C524) * C47359) * C103 +
             ((C527 - C526) * C114 + (C529 - C528) * C47359) * C104 +
             C785 * C105) *
                C47261) *
               C1078 +
           ((((C336 - C335) * C114 + (C338 - C337) * C47359) * C103 +
             ((C340 - C339) * C114 + (C342 - C341) * C47359) * C104 +
             C672 * C105) *
                C47422 +
            (((C953 - C952) * C114 + (C955 - C954) * C47359) * C103 +
             ((C957 - C956) * C114 + (C959 - C958) * C47359) * C104 +
             ((C960 - C961) * C114 + (C962 - C963) * C47359) * C105) *
                C47261) *
               C1079 +
           ((((C344 - C343) * C114 + (C346 - C345) * C47359) * C103 +
             ((C348 - C347) * C114 + (C350 - C349) * C47359) * C104 +
             ((C355 - C356) * C114 + (C357 - C358) * C47359) * C105) *
                C47422 +
            (((C1590 - C1589) * C114 + (C1592 - C1591) * C47359) * C103 +
             ((C1594 - C1593) * C114 + (C1596 - C1595) * C47359) * C104 +
             ((C47376 * C1585 - C113 * C1584) * C114 +
              (C47376 * C1587 - C113 * C1586) * C47359) *
                 C105) *
                C47261) *
               C47453) *
              C47139)) /
            (p * q * std::sqrt(p + q));
    d2ee[24] += (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                 ((((C47376 * C122 - C113 * C115) * C114 +
                    (C47376 * C136 - C113 * C123) * C47359) *
                       C103 +
                   ((C144 - C145) * C114 + (C146 - C147) * C47359) * C104 +
                   C176 * C105) *
                      C47174 * C47156 * C108 +
                  (((C145 - C144) * C114 + (C147 - C146) * C47359) * C103 +
                   ((C149 - C148) * C114 + (C151 - C150) * C47359) * C104 +
                   C177 * C105) *
                      C47174 * C47156 * C109 +
                  (C176 * C103 +
                   ((C153 - C152) * C114 + (C155 - C154) * C47359) * C104 +
                   C178 * C105) *
                      C47174 * C47156 * C110 +
                  (C177 * C103 +
                   ((C157 - C156) * C114 + (C159 - C158) * C47359) * C104 +
                   ((C160 - C161) * C114 + (C162 - C163) * C47359) * C105) *
                      C47174 * C47156 * C111 +
                  (C178 * C103 +
                   ((C161 - C160) * C114 + (C163 - C162) * C47359) * C104 +
                   ((C47376 * C134 - C113 * C121) * C114 +
                    (C47376 * C142 - C113 * C135) * C47359) *
                       C105) *
                      C47174 * C47156 * C112)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                 (((((C47376 * C122 - C113 * C115) * C114 +
                     (C47376 * C136 - C113 * C123) * C47359) *
                        C103 +
                    ((C144 - C145) * C114 + (C146 - C147) * C47359) * C104 +
                    C176 * C105) *
                       C47174 * C47492 +
                   (((C113 * C294 - C47376 * C304) * C114 +
                     (C113 * C305 - C47376 * C324) * C47359) *
                        C103 +
                    ((C335 - C336) * C114 + (C337 - C338) * C47359) * C104 +
                    C367 * C105) *
                       C47174 * C47480 +
                   (((C47376 * C310 - C113 * C297) * C114 +
                     (C47376 * C327 - C113 * C311) * C47359) *
                        C103 +
                    ((C343 - C344) * C114 + (C345 - C346) * C47359) * C104 +
                    C368 * C105) *
                       C47174 * C47453) *
                      C291 +
                  ((((C145 - C144) * C114 + (C147 - C146) * C47359) * C103 +
                    ((C149 - C148) * C114 + (C151 - C150) * C47359) * C104 +
                    C177 * C105) *
                       C47174 * C47492 +
                   (((C336 - C335) * C114 + (C338 - C337) * C47359) * C103 +
                    ((C340 - C339) * C114 + (C342 - C341) * C47359) * C104 +
                    ((C351 - C352) * C114 + (C353 - C354) * C47359) * C105) *
                       C47174 * C47480 +
                   (((C344 - C343) * C114 + (C346 - C345) * C47359) * C103 +
                    ((C348 - C347) * C114 + (C350 - C349) * C47359) * C104 +
                    ((C355 - C356) * C114 + (C357 - C358) * C47359) * C105) *
                       C47174 * C47453) *
                      C292 +
                  ((C176 * C103 +
                    ((C153 - C152) * C114 + (C155 - C154) * C47359) * C104 +
                    C178 * C105) *
                       C47174 * C47492 +
                   (C367 * C103 +
                    ((C352 - C351) * C114 + (C354 - C353) * C47359) * C104 +
                    ((C113 * C302 - C47376 * C320) * C114 +
                     (C113 * C321 - C47376 * C332) * C47359) *
                        C105) *
                       C47174 * C47480 +
                   (C368 * C103 +
                    ((C356 - C355) * C114 + (C358 - C357) * C47359) * C104 +
                    ((C47376 * C322 - C113 * C303) * C114 +
                     (C47376 * C333 - C113 * C323) * C47359) *
                        C105) *
                       C47174 * C47453) *
                      C47447)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                 (((((C47376 * C122 - C113 * C115) * C114 +
                     (C47376 * C136 - C113 * C123) * C47359) *
                        C103 +
                    ((C144 - C145) * C114 + (C146 - C147) * C47359) * C104 +
                    C176 * C105) *
                       C47174 * C1078 +
                   (((C113 * C294 - C47376 * C304) * C114 +
                     (C113 * C305 - C47376 * C324) * C47359) *
                        C103 +
                    ((C335 - C336) * C114 + (C337 - C338) * C47359) * C104 +
                    C367 * C105) *
                       C47174 * C1079 +
                   (((C47376 * C310 - C113 * C297) * C114 +
                     (C47376 * C327 - C113 * C311) * C47359) *
                        C103 +
                    ((C343 - C344) * C114 + (C345 - C346) * C47359) * C104 +
                    C368 * C105) *
                       C47174 * C47453) *
                      C47489 +
                  ((((C145 - C144) * C114 + (C147 - C146) * C47359) * C103 +
                    ((C149 - C148) * C114 + (C151 - C150) * C47359) * C104 +
                    C177 * C105) *
                       C47174 * C1078 +
                   (((C336 - C335) * C114 + (C338 - C337) * C47359) * C103 +
                    ((C340 - C339) * C114 + (C342 - C341) * C47359) * C104 +
                    C672 * C105) *
                       C47174 * C1079 +
                   (((C344 - C343) * C114 + (C346 - C345) * C47359) * C103 +
                    ((C348 - C347) * C114 + (C350 - C349) * C47359) * C104 +
                    ((C355 - C356) * C114 + (C357 - C358) * C47359) * C105) *
                       C47174 * C47453) *
                      C47476 +
                  ((C176 * C103 +
                    ((C153 - C152) * C114 + (C155 - C154) * C47359) * C104 +
                    C178 * C105) *
                       C47174 * C1078 +
                   (C367 * C103 +
                    ((C352 - C351) * C114 + (C354 - C353) * C47359) * C104 +
                    ((C666 - C667) * C114 + (C668 - C669) * C47359) * C105) *
                       C47174 * C1079 +
                   (C368 * C103 +
                    ((C356 - C355) * C114 + (C358 - C357) * C47359) * C104 +
                    ((C47376 * C322 - C113 * C303) * C114 +
                     (C47376 * C333 - C113 * C323) * C47359) *
                        C105) *
                       C47174 * C47453) *
                      C47447)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                 ((((C47376 * C122 - C113 * C115) * C114 +
                    (C47376 * C136 - C113 * C123) * C47359) *
                       C103 +
                   ((C144 - C145) * C114 + (C146 - C147) * C47359) * C104 +
                   C176 * C105) *
                      C47174 * C1146 +
                  (((C113 * C294 - C47376 * C304) * C114 +
                    (C113 * C305 - C47376 * C324) * C47359) *
                       C103 +
                   ((C335 - C336) * C114 + (C337 - C338) * C47359) * C104 +
                   C367 * C105) *
                      C47174 * C1147 +
                  (((C47376 * C310 - C113 * C297) * C114 +
                    (C47376 * C327 - C113 * C311) * C47359) *
                       C103 +
                   ((C343 - C344) * C114 + (C345 - C346) * C47359) * C104 +
                   C368 * C105) *
                      C47174 * C1148 +
                  (((C113 * C1152 - C47376 * C1158) * C114 +
                    (C113 * C1159 - C47376 * C1170) * C47359) *
                       C103 +
                   ((C113 * C1153 - C47376 * C1160) * C114 +
                    (C113 * C1161 - C47376 * C1171) * C47359) *
                       C104 +
                   ((C113 * C1154 - C47376 * C1162) * C114 +
                    (C113 * C1163 - C47376 * C1172) * C47359) *
                       C105) *
                      C47174 * C1149 +
                  (((C47376 * C1164 - C113 * C1155) * C114 +
                    (C47376 * C1173 - C113 * C1165) * C47359) *
                       C103 +
                   ((C47376 * C1166 - C113 * C1156) * C114 +
                    (C47376 * C1174 - C113 * C1167) * C47359) *
                       C104 +
                   ((C47376 * C1168 - C113 * C1157) * C114 +
                    (C47376 * C1175 - C113 * C1169) * C47359) *
                       C105) *
                      C47174 * C1150) *
                 C47128) /
                    (p * q * std::sqrt(p + q));
    d2ee[25] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C47376 * C122 - C113 * C115) * C4747 +
             (C47376 * C136 - C113 * C123) * C4743 + (C4896 - C4897) * C4748 +
             (C4898 - C4899) * C47471) *
                C4745 +
            ((C144 - C145) * C4747 + (C146 - C147) * C4743 + C4900 * C4748 +
             C4901 * C47471) *
                C47440) *
               C47174 * C47215 +
           (((C4897 - C4896) * C4747 + (C4899 - C4898) * C4743 +
             (C4902 - C4903) * C4748 + (C4904 - C4905) * C47471) *
                C4745 +
            (C4906 * C4747 + C4907 * C4743 + C4908 * C4748 + C4909 * C47471) *
                C47440) *
               C47174 * C47222 +
           (((C4903 - C4902) * C4747 + (C4905 - C4904) * C4743 +
             (C5764 - C5765) * C4748 + (C5766 - C5767) * C47471) *
                C4745 +
            (C4910 * C4747 + C4911 * C4743 + C6076 * C4748 + C6077 * C47471) *
                C47440) *
               C47174 * C2868) *
              C47133 +
          ((((C145 - C144) * C4747 + (C147 - C146) * C4743 + C4906 * C4748 +
             C4907 * C47471) *
                C4745 +
            ((C149 - C148) * C4747 + (C151 - C150) * C4743 + C359 * C4748 +
             C360 * C47471) *
                C47440) *
               C47174 * C47215 +
           ((C4900 * C4747 + C4901 * C4743 + C4910 * C4748 + C4911 * C47471) *
                C4745 +
            (C4912 * C4747 + C4913 * C4743 + C361 * C4748 + C362 * C47471) *
                C47440) *
               C47174 * C47222 +
           ((C4908 * C4747 + C4909 * C4743 + C6078 * C4748 + C6079 * C47471) *
                C4745 +
            (C4914 * C4747 + C4915 * C4743 + (C1435 - C1436) * C4748 +
             (C1437 - C1438) * C47471) *
                C47440) *
               C47174 * C2868) *
              C47142 +
          (((C164 * C4747 + C165 * C4743 + C4912 * C4748 + C4913 * C47471) *
                C4745 +
            ((C153 - C152) * C4747 + (C155 - C154) * C4743 + C664 * C4748 +
             C665 * C47471) *
                C47440) *
               C47174 * C47215 +
           ((C359 * C4747 + C360 * C4743 + C4914 * C4748 + C4915 * C47471) *
                C4745 +
            (C5192 * C4747 + C5193 * C4743 + (C355 - C356) * C4748 +
             (C357 - C358) * C47471) *
                C47440) *
               C47174 * C47222 +
           ((C361 * C4747 + C362 * C4743 + (C1436 - C1435) * C4748 +
             (C1438 - C1437) * C47471) *
                C4745 +
            ((C356 - C355) * C4747 + (C358 - C357) * C4743 +
             (C47376 * C1427 - C113 * C1426) * C4748 +
             (C47376 * C1429 - C113 * C1428) * C47471) *
                C47440) *
               C47174 * C2868) *
              C2871)) /
        (p * q * std::sqrt(p + q));
    d2ee[26] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C47376 * C122 - C113 * C115) * C4747 +
              (C47376 * C136 - C113 * C123) * C4743 + (C4896 - C4897) * C4748 +
              (C4898 - C4899) * C47471) *
                 C4745 +
             ((C144 - C145) * C4747 + (C146 - C147) * C4743 + C4900 * C4748 +
              C4901 * C47471) *
                 C47440) *
                C47422 +
            (((C113 * C481 - C47376 * C491) * C4747 +
              (C113 * C492 - C47376 * C511) * C4743 + (C5518 - C5519) * C4748 +
              (C5520 - C5521) * C47471) *
                 C4745 +
             ((C522 - C523) * C4747 + (C524 - C525) * C4743 + C5522 * C4748 +
              C5523 * C47471) *
                 C47440) *
                C47261) *
               C47215 +
           ((((C4897 - C4896) * C4747 + (C4899 - C4898) * C4743 +
              (C4902 - C4903) * C4748 + (C4904 - C4905) * C47471) *
                 C4745 +
             (C4906 * C4747 + C4907 * C4743 + C4908 * C4748 + C4909 * C47471) *
                 C47440) *
                C47422 +
            (((C5519 - C5518) * C4747 + (C5521 - C5520) * C4743 +
              (C5934 - C5935) * C4748 + (C5936 - C5937) * C47471) *
                 C4745 +
             (C5524 * C4747 + C5525 * C4743 + C6274 * C4748 + C6275 * C47471) *
                 C47440) *
                C47261) *
               C47222 +
           ((((C4903 - C4902) * C4747 + (C4905 - C4904) * C4743 +
              (C5764 - C5765) * C4748 + (C5766 - C5767) * C47471) *
                 C4745 +
             (C4910 * C4747 + C4911 * C4743 + C6076 * C4748 + C6077 * C47471) *
                 C47440) *
                C47422 +
            (((C5935 - C5934) * C4747 + (C5937 - C5936) * C4743 +
              (C6420 - C6421) * C4748 + (C6422 - C6423) * C47471) *
                 C4745 +
             (C6276 * C4747 + C6277 * C4743 + (C6278 - C6279) * C4748 +
              (C6280 - C6281) * C47471) *
                 C47440) *
                C47261) *
               C2868) *
              C2608 +
          (((((C145 - C144) * C4747 + (C147 - C146) * C4743 + C4906 * C4748 +
              C4907 * C47471) *
                 C4745 +
             ((C149 - C148) * C4747 + (C151 - C150) * C4743 + C359 * C4748 +
              C360 * C47471) *
                 C47440) *
                C47422 +
            (((C523 - C522) * C4747 + (C525 - C524) * C4743 + C5524 * C4748 +
              C5525 * C47471) *
                 C4745 +
             ((C527 - C526) * C4747 + (C529 - C528) * C4743 + C964 * C4748 +
              C965 * C47471) *
                 C47440) *
                C47261) *
               C47215 +
           (((C4900 * C4747 + C4901 * C4743 + C4910 * C4748 + C4911 * C47471) *
                 C4745 +
             (C4912 * C4747 + C4913 * C4743 + C361 * C4748 + C362 * C47471) *
                 C47440) *
                C47422 +
            ((C5522 * C4747 + C5523 * C4743 + C6276 * C4748 + C6277 * C47471) *
                 C4745 +
             (C5526 * C4747 + C5527 * C4743 + (C1593 - C1594) * C4748 +
              (C1595 - C1596) * C47471) *
                 C47440) *
                C47261) *
               C47222 +
           (((C4908 * C4747 + C4909 * C4743 + C6078 * C4748 + C6079 * C47471) *
                 C4745 +
             (C4914 * C4747 + C4915 * C4743 + (C1435 - C1436) * C4748 +
              (C1437 - C1438) * C47471) *
                 C47440) *
                C47422 +
            ((C6274 * C4747 + C6275 * C4743 + (C6279 - C6278) * C4748 +
              (C6281 - C6280) * C47471) *
                 C4745 +
             ((C1594 - C1593) * C4747 + (C1596 - C1595) * C4743 +
              (C47376 * C1701 - C113 * C1696) * C4748 +
              (C47376 * C1705 - C113 * C1702) * C47471) *
                 C47440) *
                C47261) *
               C2868) *
              C47139)) /
        (p * q * std::sqrt(p + q));
    d2ee[27] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C47376 * C122 - C113 * C115) * C4747 +
             (C47376 * C136 - C113 * C123) * C4743 + (C4896 - C4897) * C4748 +
             (C4898 - C4899) * C47471) *
                C4745 +
            ((C144 - C145) * C4747 + (C146 - C147) * C4743 + C4900 * C4748 +
             C4901 * C47471) *
                C47440) *
               C47174 * C47499 +
           (((C4897 - C4896) * C4747 + (C4899 - C4898) * C4743 +
             (C4902 - C4903) * C4748 + (C4904 - C4905) * C47471) *
                C4745 +
            (C4906 * C4747 + C4907 * C4743 + C4908 * C4748 + C4909 * C47471) *
                C47440) *
               C47174 * C47495 +
           (((C4903 - C4902) * C4747 + (C4905 - C4904) * C4743 +
             (C5764 - C5765) * C4748 + (C5766 - C5767) * C47471) *
                C4745 +
            (C4910 * C4747 + C4911 * C4743 + C6076 * C4748 + C6077 * C47471) *
                C47440) *
               C47174 * C47485 +
           (((C5765 - C5764) * C4747 + (C5767 - C5766) * C4743 +
             (C5768 - C5769) * C4748 + (C5770 - C5771) * C47471) *
                C4745 +
            (C6078 * C4747 + C6079 * C4743 + (C5772 - C5773) * C4748 +
             (C5774 - C5775) * C47471) *
                C47440) *
               C47174 * C47463) *
              C2608 +
          ((((C145 - C144) * C4747 + (C147 - C146) * C4743 + C4906 * C4748 +
             C4907 * C47471) *
                C4745 +
            ((C149 - C148) * C4747 + (C151 - C150) * C4743 + C359 * C4748 +
             C360 * C47471) *
                C47440) *
               C47174 * C47499 +
           ((C4900 * C4747 + C4901 * C4743 + C4910 * C4748 + C4911 * C47471) *
                C4745 +
            (C4912 * C4747 + C4913 * C4743 + C361 * C4748 + C362 * C47471) *
                C47440) *
               C47174 * C47495 +
           ((C4908 * C4747 + C4909 * C4743 + C6078 * C4748 + C6079 * C47471) *
                C4745 +
            (C4914 * C4747 + C4915 * C4743 + (C1435 - C1436) * C4748 +
             (C1437 - C1438) * C47471) *
                C47440) *
               C47174 * C47485 +
           ((C6076 * C4747 + C6077 * C4743 + (C5773 - C5772) * C4748 +
             (C5775 - C5774) * C47471) *
                C4745 +
            ((C1436 - C1435) * C4747 + (C1438 - C1437) * C4743 +
             (C47376 * C1168 - C113 * C1157) * C4748 +
             (C47376 * C1175 - C113 * C1169) * C47471) *
                C47440) *
               C47174 * C47463) *
              C47139)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C47376 * C122 - C113 * C115) * C4747 +
             (C47376 * C136 - C113 * C123) * C4743 + (C4896 - C4897) * C4748 +
             (C4898 - C4899) * C47471) *
                C4745 +
            ((C144 - C145) * C4747 + (C146 - C147) * C4743 + C4900 * C4748 +
             C4901 * C47471) *
                C47440) *
               C47174 * C2500 +
           (((C4897 - C4896) * C4747 + (C4899 - C4898) * C4743 +
             (C4902 - C4903) * C4748 + (C4904 - C4905) * C47471) *
                C4745 +
            (C4906 * C4747 + C4907 * C4743 + C4908 * C4748 + C4909 * C47471) *
                C47440) *
               C47174 * C47219) *
              C47498 +
          ((((C145 - C144) * C4747 + (C147 - C146) * C4743 + C4906 * C4748 +
             C4907 * C47471) *
                C4745 +
            ((C149 - C148) * C4747 + (C151 - C150) * C4743 + C359 * C4748 +
             C360 * C47471) *
                C47440) *
               C47174 * C2500 +
           ((C4900 * C4747 + C4901 * C4743 + C4910 * C4748 + C4911 * C47471) *
                C4745 +
            (C4912 * C4747 + C4913 * C4743 + C361 * C4748 + C362 * C47471) *
                C47440) *
               C47174 * C47219) *
              C47491 +
          (((C164 * C4747 + C165 * C4743 + C4912 * C4748 + C4913 * C47471) *
                C4745 +
            ((C153 - C152) * C4747 + (C155 - C154) * C4743 + C664 * C4748 +
             C665 * C47471) *
                C47440) *
               C47174 * C2500 +
           ((C359 * C4747 + C360 * C4743 + C4914 * C4748 + C4915 * C47471) *
                C4745 +
            (C5192 * C4747 + C5193 * C4743 + (C355 - C356) * C4748 +
             (C357 - C358) * C47471) *
                C47440) *
               C47174 * C47219) *
              C47478 +
          (((C166 * C4747 + C167 * C4743 + C5192 * C4748 + C5193 * C47471) *
                C4745 +
            ((C157 - C156) * C4747 + (C159 - C158) * C4743 +
             (C666 - C667) * C4748 + (C668 - C669) * C47471) *
                C47440) *
               C47174 * C2500 +
           ((C664 * C4747 + C665 * C4743 + (C356 - C355) * C4748 +
             (C358 - C357) * C47471) *
                C4745 +
            ((C667 - C666) * C4747 + (C669 - C668) * C4743 +
             (C47376 * C322 - C113 * C303) * C4748 +
             (C47376 * C333 - C113 * C323) * C47471) *
                C47440) *
               C47174 * C47219) *
              C47457)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C47376 * C122 - C113 * C115) * C4747 +
              (C47376 * C136 - C113 * C123) * C4743 + (C4896 - C4897) * C4748 +
              (C4898 - C4899) * C47471) *
                 C4745 +
             ((C144 - C145) * C4747 + (C146 - C147) * C4743 + C4900 * C4748 +
              C4901 * C47471) *
                 C47440) *
                C47493 +
            (((C113 * C481 - C47376 * C491) * C4747 +
              (C113 * C492 - C47376 * C511) * C4743 + (C5518 - C5519) * C4748 +
              (C5520 - C5521) * C47471) *
                 C4745 +
             ((C522 - C523) * C4747 + (C524 - C525) * C4743 + C5522 * C4748 +
              C5523 * C47471) *
                 C47440) *
                C47482 +
            (((C47376 * C497 - C113 * C484) * C4747 +
              (C47376 * C514 - C113 * C498) * C4743 + (C5930 - C5931) * C4748 +
              (C5932 - C5933) * C47471) *
                 C4745 +
             ((C530 - C531) * C4747 + (C532 - C533) * C4743 + C7000 * C4748 +
              C7001 * C47471) *
                 C47440) *
                C47456) *
               C2500 +
           ((((C4897 - C4896) * C4747 + (C4899 - C4898) * C4743 +
              (C4902 - C4903) * C4748 + (C4904 - C4905) * C47471) *
                 C4745 +
             (C4906 * C4747 + C4907 * C4743 + C4908 * C4748 + C4909 * C47471) *
                 C47440) *
                C47493 +
            (((C5519 - C5518) * C4747 + (C5521 - C5520) * C4743 +
              (C5934 - C5935) * C4748 + (C5936 - C5937) * C47471) *
                 C4745 +
             (C5524 * C4747 + C5525 * C4743 + C6274 * C4748 + C6275 * C47471) *
                 C47440) *
                C47482 +
            (((C5931 - C5930) * C4747 + (C5933 - C5932) * C4743 +
              (C5938 - C5939) * C4748 + (C5940 - C5941) * C47471) *
                 C4745 +
             (C7002 * C4747 + C7003 * C4743 + (C5942 - C5943) * C4748 +
              (C5944 - C5945) * C47471) *
                 C47440) *
                C47456) *
               C47219) *
              C2608 +
          (((((C145 - C144) * C4747 + (C147 - C146) * C4743 + C4906 * C4748 +
              C4907 * C47471) *
                 C4745 +
             ((C149 - C148) * C4747 + (C151 - C150) * C4743 + C359 * C4748 +
              C360 * C47471) *
                 C47440) *
                C47493 +
            (((C523 - C522) * C4747 + (C525 - C524) * C4743 + C5524 * C4748 +
              C5525 * C47471) *
                 C4745 +
             ((C527 - C526) * C4747 + (C529 - C528) * C4743 + C964 * C4748 +
              C965 * C47471) *
                 C47440) *
                C47482 +
            (((C531 - C530) * C4747 + (C533 - C532) * C4743 + C7002 * C4748 +
              C7003 * C47471) *
                 C4745 +
             ((C535 - C534) * C4747 + (C537 - C536) * C4743 +
              (C2175 - C2176) * C4748 + (C2177 - C2178) * C47471) *
                 C47440) *
                C47456) *
               C2500 +
           (((C4900 * C4747 + C4901 * C4743 + C4910 * C4748 + C4911 * C47471) *
                 C4745 +
             (C4912 * C4747 + C4913 * C4743 + C361 * C4748 + C362 * C47471) *
                 C47440) *
                C47493 +
            ((C5522 * C4747 + C5523 * C4743 + C6276 * C4748 + C6277 * C47471) *
                 C4745 +
             (C5526 * C4747 + C5527 * C4743 + (C1593 - C1594) * C4748 +
              (C1595 - C1596) * C47471) *
                 C47440) *
                C47482 +
            ((C7000 * C4747 + C7001 * C4743 + (C5943 - C5942) * C4748 +
              (C5945 - C5944) * C47471) *
                 C4745 +
             ((C2176 - C2175) * C4747 + (C2178 - C2177) * C4743 +
              (C47376 * C1311 - C113 * C1294) * C4748 +
              (C47376 * C1321 - C113 * C1312) * C47471) *
                 C47440) *
                C47456) *
               C47219) *
              C47139)) /
            (p * q * std::sqrt(p + q));
    d2ee[28] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C47376 * C122 - C113 * C115) * C4747 +
              (C47376 * C136 - C113 * C123) * C4743 + (C4896 - C4897) * C4748 +
              (C4898 - C4899) * C47471) *
                 C4745 +
             ((C144 - C145) * C4747 + (C146 - C147) * C4743 + C4900 * C4748 +
              C4901 * C47471) *
                 C47440) *
                C47422 +
            (((C113 * C481 - C47376 * C491) * C4747 +
              (C113 * C492 - C47376 * C511) * C4743 + (C5518 - C5519) * C4748 +
              (C5520 - C5521) * C47471) *
                 C4745 +
             ((C522 - C523) * C4747 + (C524 - C525) * C4743 + C5522 * C4748 +
              C5523 * C47471) *
                 C47440) *
                C47261) *
               C2500 +
           ((((C4897 - C4896) * C4747 + (C4899 - C4898) * C4743 +
              (C4902 - C4903) * C4748 + (C4904 - C4905) * C47471) *
                 C4745 +
             (C4906 * C4747 + C4907 * C4743 + C4908 * C4748 + C4909 * C47471) *
                 C47440) *
                C47422 +
            (((C5519 - C5518) * C4747 + (C5521 - C5520) * C4743 +
              (C5934 - C5935) * C4748 + (C5936 - C5937) * C47471) *
                 C4745 +
             (C5524 * C4747 + C5525 * C4743 + C6274 * C4748 + C6275 * C47471) *
                 C47440) *
                C47261) *
               C47219) *
              C47133 +
          (((((C145 - C144) * C4747 + (C147 - C146) * C4743 + C4906 * C4748 +
              C4907 * C47471) *
                 C4745 +
             ((C149 - C148) * C4747 + (C151 - C150) * C4743 + C359 * C4748 +
              C360 * C47471) *
                 C47440) *
                C47422 +
            (((C523 - C522) * C4747 + (C525 - C524) * C4743 + C5524 * C4748 +
              C5525 * C47471) *
                 C4745 +
             ((C527 - C526) * C4747 + (C529 - C528) * C4743 + C964 * C4748 +
              C965 * C47471) *
                 C47440) *
                C47261) *
               C2500 +
           (((C4900 * C4747 + C4901 * C4743 + C4910 * C4748 + C4911 * C47471) *
                 C4745 +
             (C4912 * C4747 + C4913 * C4743 + C361 * C4748 + C362 * C47471) *
                 C47440) *
                C47422 +
            ((C5522 * C4747 + C5523 * C4743 + C6276 * C4748 + C6277 * C47471) *
                 C4745 +
             (C5526 * C4747 + C5527 * C4743 + (C1593 - C1594) * C4748 +
              (C1595 - C1596) * C47471) *
                 C47440) *
                C47261) *
               C47219) *
              C47142 +
          ((((C164 * C4747 + C165 * C4743 + C4912 * C4748 + C4913 * C47471) *
                 C4745 +
             ((C153 - C152) * C4747 + (C155 - C154) * C4743 + C664 * C4748 +
              C665 * C47471) *
                 C47440) *
                C47422 +
            ((C546 * C4747 + C547 * C4743 + C5526 * C4748 + C5527 * C47471) *
                 C4745 +
             ((C539 - C538) * C4747 + (C541 - C540) * C4743 +
              (C960 - C961) * C4748 + (C962 - C963) * C47471) *
                 C47440) *
                C47261) *
               C2500 +
           (((C359 * C4747 + C360 * C4743 + C4914 * C4748 + C4915 * C47471) *
                 C4745 +
             (C5192 * C4747 + C5193 * C4743 + (C355 - C356) * C4748 +
              (C357 - C358) * C47471) *
                 C47440) *
                C47422 +
            ((C964 * C4747 + C965 * C4743 + (C1594 - C1593) * C4748 +
              (C1596 - C1595) * C47471) *
                 C4745 +
             ((C961 - C960) * C4747 + (C963 - C962) * C4743 +
              (C47376 * C1585 - C113 * C1584) * C4748 +
              (C47376 * C1587 - C113 * C1586) * C47471) *
                 C47440) *
                C47261) *
               C47219) *
              C2871)) /
        (p * q * std::sqrt(p + q));
    d2ee[29] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C47376 * C122 - C113 * C115) * C4747 +
             (C47376 * C136 - C113 * C123) * C4743 + (C4896 - C4897) * C4748 +
             (C4898 - C4899) * C47471) *
                C4745 +
            ((C144 - C145) * C4747 + (C146 - C147) * C4743 + C4900 * C4748 +
             C4901 * C47471) *
                C47440) *
               C47174 * C2500 +
           (((C4897 - C4896) * C4747 + (C4899 - C4898) * C4743 +
             (C4902 - C4903) * C4748 + (C4904 - C4905) * C47471) *
                C4745 +
            (C4906 * C4747 + C4907 * C4743 + C4908 * C4748 + C4909 * C47471) *
                C47440) *
               C47174 * C47219) *
              C47498 +
          ((((C145 - C144) * C4747 + (C147 - C146) * C4743 + C4906 * C4748 +
             C4907 * C47471) *
                C4745 +
            ((C149 - C148) * C4747 + (C151 - C150) * C4743 + C359 * C4748 +
             C360 * C47471) *
                C47440) *
               C47174 * C2500 +
           ((C4900 * C4747 + C4901 * C4743 + C4910 * C4748 + C4911 * C47471) *
                C4745 +
            (C4912 * C4747 + C4913 * C4743 + C361 * C4748 + C362 * C47471) *
                C47440) *
               C47174 * C47219) *
              C47491 +
          (((C164 * C4747 + C165 * C4743 + C4912 * C4748 + C4913 * C47471) *
                C4745 +
            ((C153 - C152) * C4747 + (C155 - C154) * C4743 + C664 * C4748 +
             C665 * C47471) *
                C47440) *
               C47174 * C2500 +
           ((C359 * C4747 + C360 * C4743 + C4914 * C4748 + C4915 * C47471) *
                C4745 +
            (C5192 * C4747 + C5193 * C4743 + (C355 - C356) * C4748 +
             (C357 - C358) * C47471) *
                C47440) *
               C47174 * C47219) *
              C47478 +
          (((C166 * C4747 + C167 * C4743 + C5192 * C4748 + C5193 * C47471) *
                C4745 +
            ((C157 - C156) * C4747 + (C159 - C158) * C4743 +
             (C666 - C667) * C4748 + (C668 - C669) * C47471) *
                C47440) *
               C47174 * C2500 +
           ((C664 * C4747 + C665 * C4743 + (C356 - C355) * C4748 +
             (C358 - C357) * C47471) *
                C4745 +
            ((C667 - C666) * C4747 + (C669 - C668) * C4743 +
             (C47376 * C322 - C113 * C303) * C4748 +
             (C47376 * C333 - C113 * C323) * C47471) *
                C47440) *
               C47174 * C47219) *
              C47457)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C47376 * C122 - C113 * C115) * C4747 +
             (C47376 * C136 - C113 * C123) * C4743 + (C4896 - C4897) * C4748 +
             (C4898 - C4899) * C47471) *
                C4745 +
            ((C144 - C145) * C4747 + (C146 - C147) * C4743 + C4900 * C4748 +
             C4901 * C47471) *
                C47440) *
               C47174 * C47499 +
           (((C4897 - C4896) * C4747 + (C4899 - C4898) * C4743 +
             (C4902 - C4903) * C4748 + (C4904 - C4905) * C47471) *
                C4745 +
            (C4906 * C4747 + C4907 * C4743 + C4908 * C4748 + C4909 * C47471) *
                C47440) *
               C47174 * C47495 +
           (((C4903 - C4902) * C4747 + (C4905 - C4904) * C4743 +
             (C5764 - C5765) * C4748 + (C5766 - C5767) * C47471) *
                C4745 +
            (C4910 * C4747 + C4911 * C4743 + C6076 * C4748 + C6077 * C47471) *
                C47440) *
               C47174 * C47485 +
           (((C5765 - C5764) * C4747 + (C5767 - C5766) * C4743 +
             (C5768 - C5769) * C4748 + (C5770 - C5771) * C47471) *
                C4745 +
            (C6078 * C4747 + C6079 * C4743 + (C5772 - C5773) * C4748 +
             (C5774 - C5775) * C47471) *
                C47440) *
               C47174 * C47463) *
              C2608 +
          ((((C145 - C144) * C4747 + (C147 - C146) * C4743 + C4906 * C4748 +
             C4907 * C47471) *
                C4745 +
            ((C149 - C148) * C4747 + (C151 - C150) * C4743 + C359 * C4748 +
             C360 * C47471) *
                C47440) *
               C47174 * C47499 +
           ((C4900 * C4747 + C4901 * C4743 + C4910 * C4748 + C4911 * C47471) *
                C4745 +
            (C4912 * C4747 + C4913 * C4743 + C361 * C4748 + C362 * C47471) *
                C47440) *
               C47174 * C47495 +
           ((C4908 * C4747 + C4909 * C4743 + C6078 * C4748 + C6079 * C47471) *
                C4745 +
            (C4914 * C4747 + C4915 * C4743 + (C1435 - C1436) * C4748 +
             (C1437 - C1438) * C47471) *
                C47440) *
               C47174 * C47485 +
           ((C6076 * C4747 + C6077 * C4743 + (C5773 - C5772) * C4748 +
             (C5775 - C5774) * C47471) *
                C4745 +
            ((C1436 - C1435) * C4747 + (C1438 - C1437) * C4743 +
             (C47376 * C1168 - C113 * C1157) * C4748 +
             (C47376 * C1175 - C113 * C1169) * C47471) *
                C47440) *
               C47174 * C47463) *
              C47139)) /
            (p * q * std::sqrt(p + q));
    d2ee[30] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C47376 * C122 - C113 * C115) * C4747 +
              (C47376 * C136 - C113 * C123) * C4743 + (C4896 - C4897) * C4748 +
              (C4898 - C4899) * C47471) *
                 C4745 +
             ((C144 - C145) * C4747 + (C146 - C147) * C4743 + C4900 * C4748 +
              C4901 * C47471) *
                 C47440) *
                C3262 +
            (((C113 * C481 - C47376 * C491) * C4747 +
              (C113 * C492 - C47376 * C511) * C4743 + (C5518 - C5519) * C4748 +
              (C5520 - C5521) * C47471) *
                 C4745 +
             ((C522 - C523) * C4747 + (C524 - C525) * C4743 + C5522 * C4748 +
              C5523 * C47471) *
                 C47440) *
                C47261) *
               C47215 +
           ((((C4897 - C4896) * C4747 + (C4899 - C4898) * C4743 +
              (C4902 - C4903) * C4748 + (C4904 - C4905) * C47471) *
                 C4745 +
             (C4906 * C4747 + C4907 * C4743 + C4908 * C4748 + C4909 * C47471) *
                 C47440) *
                C3262 +
            (((C5519 - C5518) * C4747 + (C5521 - C5520) * C4743 +
              (C5934 - C5935) * C4748 + (C5936 - C5937) * C47471) *
                 C4745 +
             (C5524 * C4747 + C5525 * C4743 + C6274 * C4748 + C6275 * C47471) *
                 C47440) *
                C47261) *
               C47222 +
           ((((C4903 - C4902) * C4747 + (C4905 - C4904) * C4743 +
              (C5764 - C5765) * C4748 + (C5766 - C5767) * C47471) *
                 C4745 +
             (C4910 * C4747 + C4911 * C4743 + C6076 * C4748 + C6077 * C47471) *
                 C47440) *
                C3262 +
            (((C5935 - C5934) * C4747 + (C5937 - C5936) * C4743 +
              (C6420 - C6421) * C4748 + (C6422 - C6423) * C47471) *
                 C4745 +
             (C6276 * C4747 + C6277 * C4743 + (C6278 - C6279) * C4748 +
              (C6280 - C6281) * C47471) *
                 C47440) *
                C47261) *
               C2868) *
              C47407 +
          (((((C145 - C144) * C4747 + (C147 - C146) * C4743 + C4906 * C4748 +
              C4907 * C47471) *
                 C4745 +
             ((C149 - C148) * C4747 + (C151 - C150) * C4743 + C359 * C4748 +
              C360 * C47471) *
                 C47440) *
                C3262 +
            (((C523 - C522) * C4747 + (C525 - C524) * C4743 + C5524 * C4748 +
              C5525 * C47471) *
                 C4745 +
             ((C527 - C526) * C4747 + (C529 - C528) * C4743 + C964 * C4748 +
              C965 * C47471) *
                 C47440) *
                C47261) *
               C47215 +
           (((C4900 * C4747 + C4901 * C4743 + C4910 * C4748 + C4911 * C47471) *
                 C4745 +
             (C4912 * C4747 + C4913 * C4743 + C361 * C4748 + C362 * C47471) *
                 C47440) *
                C3262 +
            ((C5522 * C4747 + C5523 * C4743 + C6276 * C4748 + C6277 * C47471) *
                 C4745 +
             (C5526 * C4747 + C5527 * C4743 + (C1593 - C1594) * C4748 +
              (C1595 - C1596) * C47471) *
                 C47440) *
                C47261) *
               C47222 +
           (((C4908 * C4747 + C4909 * C4743 + C6078 * C4748 + C6079 * C47471) *
                 C4745 +
             (C4914 * C4747 + C4915 * C4743 + (C1435 - C1436) * C4748 +
              (C1437 - C1438) * C47471) *
                 C47440) *
                C3262 +
            ((C6274 * C4747 + C6275 * C4743 + (C6279 - C6278) * C4748 +
              (C6281 - C6280) * C47471) *
                 C4745 +
             ((C1594 - C1593) * C4747 + (C1596 - C1595) * C4743 +
              (C47376 * C1701 - C113 * C1696) * C4748 +
              (C47376 * C1705 - C113 * C1702) * C47471) *
                 C47440) *
                C47261) *
               C2868) *
              C47139)) /
        (p * q * std::sqrt(p + q));
    d2ee[31] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C47376 * C122 - C113 * C115) * C4747 +
             (C47376 * C136 - C113 * C123) * C4743 + (C4896 - C4897) * C4748 +
             (C4898 - C4899) * C47471) *
                C4745 +
            ((C144 - C145) * C4747 + (C146 - C147) * C4743 + C4900 * C4748 +
             C4901 * C47471) *
                C47440) *
               C47257 +
           (((C113 * C481 - C47376 * C491) * C4747 +
             (C113 * C492 - C47376 * C511) * C4743 + (C5518 - C5519) * C4748 +
             (C5520 - C5521) * C47471) *
                C4745 +
            ((C522 - C523) * C4747 + (C524 - C525) * C4743 + C5522 * C4748 +
             C5523 * C47471) *
                C47440) *
               C47264 +
           (((C47376 * C497 - C113 * C484) * C4747 +
             (C47376 * C514 - C113 * C498) * C4743 + (C5930 - C5931) * C4748 +
             (C5932 - C5933) * C47471) *
                C4745 +
            ((C530 - C531) * C4747 + (C532 - C533) * C4743 + C7000 * C4748 +
             C7001 * C47471) *
                C47440) *
               C3770) *
              C47215 +
          ((((C4897 - C4896) * C4747 + (C4899 - C4898) * C4743 +
             (C4902 - C4903) * C4748 + (C4904 - C4905) * C47471) *
                C4745 +
            (C4906 * C4747 + C4907 * C4743 + C4908 * C4748 + C4909 * C47471) *
                C47440) *
               C47257 +
           (((C5519 - C5518) * C4747 + (C5521 - C5520) * C4743 +
             (C5934 - C5935) * C4748 + (C5936 - C5937) * C47471) *
                C4745 +
            (C5524 * C4747 + C5525 * C4743 + C6274 * C4748 + C6275 * C47471) *
                C47440) *
               C47264 +
           (((C5931 - C5930) * C4747 + (C5933 - C5932) * C4743 +
             (C5938 - C5939) * C4748 + (C5940 - C5941) * C47471) *
                C4745 +
            (C7002 * C4747 + C7003 * C4743 + (C5942 - C5943) * C4748 +
             (C5944 - C5945) * C47471) *
                C47440) *
               C3770) *
              C47222 +
          ((((C4903 - C4902) * C4747 + (C4905 - C4904) * C4743 +
             (C5764 - C5765) * C4748 + (C5766 - C5767) * C47471) *
                C4745 +
            (C4910 * C4747 + C4911 * C4743 + C6076 * C4748 + C6077 * C47471) *
                C47440) *
               C47257 +
           (((C5935 - C5934) * C4747 + (C5937 - C5936) * C4743 +
             (C6420 - C6421) * C4748 + (C6422 - C6423) * C47471) *
                C4745 +
            (C6276 * C4747 + C6277 * C4743 + (C6278 - C6279) * C4748 +
             (C6280 - C6281) * C47471) *
                C47440) *
               C47264 +
           (((C5939 - C5938) * C4747 + (C5941 - C5940) * C4743 +
             (C47376 * C5923 - C113 * C5921) * C4748 +
             (C47376 * C5927 - C113 * C5924) * C47471) *
                C4745 +
            ((C5943 - C5942) * C4747 + (C5945 - C5944) * C4743 +
             (C47376 * C5925 - C113 * C5922) * C4748 +
             (C47376 * C5928 - C113 * C5926) * C47471) *
                C47440) *
               C3770) *
              C2868) *
         C47128) /
        (p * q * std::sqrt(p + q));
    d2ee[32] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C47376 * C122 - C113 * C115) * C4747 +
             (C47376 * C136 - C113 * C123) * C4743 + (C4896 - C4897) * C4748 +
             (C4898 - C4899) * C47471) *
                C4745 +
            ((C144 - C145) * C4747 + (C146 - C147) * C4743 + C4900 * C4748 +
             C4901 * C47471) *
                C47440) *
               C3262 +
           (((C113 * C481 - C47376 * C491) * C4747 +
             (C113 * C492 - C47376 * C511) * C4743 + (C5518 - C5519) * C4748 +
             (C5520 - C5521) * C47471) *
                C4745 +
            ((C522 - C523) * C4747 + (C524 - C525) * C4743 + C5522 * C4748 +
             C5523 * C47471) *
                C47440) *
               C47261) *
              C47499 +
          ((((C4897 - C4896) * C4747 + (C4899 - C4898) * C4743 +
             (C4902 - C4903) * C4748 + (C4904 - C4905) * C47471) *
                C4745 +
            (C4906 * C4747 + C4907 * C4743 + C4908 * C4748 + C4909 * C47471) *
                C47440) *
               C3262 +
           (((C5519 - C5518) * C4747 + (C5521 - C5520) * C4743 +
             (C5934 - C5935) * C4748 + (C5936 - C5937) * C47471) *
                C4745 +
            (C5524 * C4747 + C5525 * C4743 + C6274 * C4748 + C6275 * C47471) *
                C47440) *
               C47261) *
              C47495 +
          ((((C4903 - C4902) * C4747 + (C4905 - C4904) * C4743 +
             (C5764 - C5765) * C4748 + (C5766 - C5767) * C47471) *
                C4745 +
            (C4910 * C4747 + C4911 * C4743 + C6076 * C4748 + C6077 * C47471) *
                C47440) *
               C3262 +
           (((C5935 - C5934) * C4747 + (C5937 - C5936) * C4743 +
             (C6420 - C6421) * C4748 + (C6422 - C6423) * C47471) *
                C4745 +
            (C6276 * C4747 + C6277 * C4743 + (C6278 - C6279) * C4748 +
             (C6280 - C6281) * C47471) *
                C47440) *
               C47261) *
              C47485 +
          ((((C5765 - C5764) * C4747 + (C5767 - C5766) * C4743 +
             (C5768 - C5769) * C4748 + (C5770 - C5771) * C47471) *
                C4745 +
            (C6078 * C4747 + C6079 * C4743 + (C5772 - C5773) * C4748 +
             (C5774 - C5775) * C47471) *
                C47440) *
               C3262 +
           (((C6421 - C6420) * C4747 + (C6423 - C6422) * C4743 +
             (C47376 * C6413 - C113 * C6411) * C4748 +
             (C47376 * C6417 - C113 * C6414) * C47471) *
                C4745 +
            ((C6279 - C6278) * C4747 + (C6281 - C6280) * C4743 +
             (C47376 * C6415 - C113 * C6412) * C4748 +
             (C47376 * C6418 - C113 * C6416) * C47471) *
                C47440) *
               C47261) *
              C47463) *
         C47128) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C47376 * C122 - C113 * C115) * C4747 +
              (C47376 * C136 - C113 * C123) * C4743 + (C4896 - C4897) * C4748 +
              (C4898 - C4899) * C47471) *
                 C4745 +
             ((C144 - C145) * C4747 + (C146 - C147) * C4743 + C4900 * C4748 +
              C4901 * C47471) *
                 C47440) *
                C3262 +
            (((C113 * C481 - C47376 * C491) * C4747 +
              (C113 * C492 - C47376 * C511) * C4743 + (C5518 - C5519) * C4748 +
              (C5520 - C5521) * C47471) *
                 C4745 +
             ((C522 - C523) * C4747 + (C524 - C525) * C4743 + C5522 * C4748 +
              C5523 * C47471) *
                 C47440) *
                C47261) *
               C2500 +
           ((((C4897 - C4896) * C4747 + (C4899 - C4898) * C4743 +
              (C4902 - C4903) * C4748 + (C4904 - C4905) * C47471) *
                 C4745 +
             (C4906 * C4747 + C4907 * C4743 + C4908 * C4748 + C4909 * C47471) *
                 C47440) *
                C3262 +
            (((C5519 - C5518) * C4747 + (C5521 - C5520) * C4743 +
              (C5934 - C5935) * C4748 + (C5936 - C5937) * C47471) *
                 C4745 +
             (C5524 * C4747 + C5525 * C4743 + C6274 * C4748 + C6275 * C47471) *
                 C47440) *
                C47261) *
               C47219) *
              C47489 +
          (((((C145 - C144) * C4747 + (C147 - C146) * C4743 + C4906 * C4748 +
              C4907 * C47471) *
                 C4745 +
             ((C149 - C148) * C4747 + (C151 - C150) * C4743 + C359 * C4748 +
              C360 * C47471) *
                 C47440) *
                C3262 +
            (((C523 - C522) * C4747 + (C525 - C524) * C4743 + C5524 * C4748 +
              C5525 * C47471) *
                 C4745 +
             ((C527 - C526) * C4747 + (C529 - C528) * C4743 + C964 * C4748 +
              C965 * C47471) *
                 C47440) *
                C47261) *
               C2500 +
           (((C4900 * C4747 + C4901 * C4743 + C4910 * C4748 + C4911 * C47471) *
                 C4745 +
             (C4912 * C4747 + C4913 * C4743 + C361 * C4748 + C362 * C47471) *
                 C47440) *
                C3262 +
            ((C5522 * C4747 + C5523 * C4743 + C6276 * C4748 + C6277 * C47471) *
                 C4745 +
             (C5526 * C4747 + C5527 * C4743 + (C1593 - C1594) * C4748 +
              (C1595 - C1596) * C47471) *
                 C47440) *
                C47261) *
               C47219) *
              C47476 +
          ((((C164 * C4747 + C165 * C4743 + C4912 * C4748 + C4913 * C47471) *
                 C4745 +
             ((C153 - C152) * C4747 + (C155 - C154) * C4743 + C664 * C4748 +
              C665 * C47471) *
                 C47440) *
                C3262 +
            ((C546 * C4747 + C547 * C4743 + C5526 * C4748 + C5527 * C47471) *
                 C4745 +
             ((C539 - C538) * C4747 + (C541 - C540) * C4743 +
              (C960 - C961) * C4748 + (C962 - C963) * C47471) *
                 C47440) *
                C47261) *
               C2500 +
           (((C359 * C4747 + C360 * C4743 + C4914 * C4748 + C4915 * C47471) *
                 C4745 +
             (C5192 * C4747 + C5193 * C4743 + (C355 - C356) * C4748 +
              (C357 - C358) * C47471) *
                 C47440) *
                C3262 +
            ((C964 * C4747 + C965 * C4743 + (C1594 - C1593) * C4748 +
              (C1596 - C1595) * C47471) *
                 C4745 +
             ((C961 - C960) * C4747 + (C963 - C962) * C4743 +
              (C47376 * C1585 - C113 * C1584) * C4748 +
              (C47376 * C1587 - C113 * C1586) * C47471) *
                 C47440) *
                C47261) *
               C47219) *
              C47447)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C47376 * C122 - C113 * C115) * C4747 +
             (C47376 * C136 - C113 * C123) * C4743 + (C4896 - C4897) * C4748 +
             (C4898 - C4899) * C47471) *
                C4745 +
            ((C144 - C145) * C4747 + (C146 - C147) * C4743 + C4900 * C4748 +
             C4901 * C47471) *
                C47440) *
               C47500 +
           (((C113 * C481 - C47376 * C491) * C4747 +
             (C113 * C492 - C47376 * C511) * C4743 + (C5518 - C5519) * C4748 +
             (C5520 - C5521) * C47471) *
                C4745 +
            ((C522 - C523) * C4747 + (C524 - C525) * C4743 + C5522 * C4748 +
             C5523 * C47471) *
                C47440) *
               C47497 +
           (((C47376 * C497 - C113 * C484) * C4747 +
             (C47376 * C514 - C113 * C498) * C4743 + (C5930 - C5931) * C4748 +
             (C5932 - C5933) * C47471) *
                C4745 +
            ((C530 - C531) * C4747 + (C532 - C533) * C4743 + C7000 * C4748 +
             C7001 * C47471) *
                C47440) *
               C47488 +
           (((C113 * C1996 - C47376 * C2002) * C4747 +
             (C113 * C2003 - C47376 * C2014) * C4743 + (C7276 - C7277) * C4748 +
             (C7278 - C7279) * C47471) *
                C4745 +
            ((C2285 - C2286) * C4747 + (C2287 - C2288) * C4743 +
             (C7134 - C7135) * C4748 + (C7136 - C7137) * C47471) *
                C47440) *
               C47469) *
              C2500 +
          ((((C4897 - C4896) * C4747 + (C4899 - C4898) * C4743 +
             (C4902 - C4903) * C4748 + (C4904 - C4905) * C47471) *
                C4745 +
            (C4906 * C4747 + C4907 * C4743 + C4908 * C4748 + C4909 * C47471) *
                C47440) *
               C47500 +
           (((C5519 - C5518) * C4747 + (C5521 - C5520) * C4743 +
             (C5934 - C5935) * C4748 + (C5936 - C5937) * C47471) *
                C4745 +
            (C5524 * C4747 + C5525 * C4743 + C6274 * C4748 + C6275 * C47471) *
                C47440) *
               C47497 +
           (((C5931 - C5930) * C4747 + (C5933 - C5932) * C4743 +
             (C5938 - C5939) * C4748 + (C5940 - C5941) * C47471) *
                C4745 +
            (C7002 * C4747 + C7003 * C4743 + (C5942 - C5943) * C4748 +
             (C5944 - C5945) * C47471) *
                C47440) *
               C47488 +
           (((C7277 - C7276) * C4747 + (C7279 - C7278) * C4743 +
             (C47376 * C7269 - C113 * C7267) * C4748 +
             (C47376 * C7273 - C113 * C7270) * C47471) *
                C4745 +
            ((C7135 - C7134) * C4747 + (C7137 - C7136) * C4743 +
             (C47376 * C7271 - C113 * C7268) * C4748 +
             (C47376 * C7274 - C113 * C7272) * C47471) *
                C47440) *
               C47469) *
              C47219) *
         C47128) /
            (p * q * std::sqrt(p + q));
    d2ee[33] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C47376 * C122 - C113 * C115) * C4747 +
              (C47376 * C136 - C113 * C123) * C4743 + (C4896 - C4897) * C4748 +
              (C4898 - C4899) * C47471) *
                 C4745 +
             ((C144 - C145) * C4747 + (C146 - C147) * C4743 + C4900 * C4748 +
              C4901 * C47471) *
                 C47440) *
                C47257 +
            (((C113 * C481 - C47376 * C491) * C4747 +
              (C113 * C492 - C47376 * C511) * C4743 + (C5518 - C5519) * C4748 +
              (C5520 - C5521) * C47471) *
                 C4745 +
             ((C522 - C523) * C4747 + (C524 - C525) * C4743 + C5522 * C4748 +
              C5523 * C47471) *
                 C47440) *
                C47264 +
            (((C47376 * C497 - C113 * C484) * C4747 +
              (C47376 * C514 - C113 * C498) * C4743 + (C5930 - C5931) * C4748 +
              (C5932 - C5933) * C47471) *
                 C4745 +
             ((C530 - C531) * C4747 + (C532 - C533) * C4743 + C7000 * C4748 +
              C7001 * C47471) *
                 C47440) *
                C3770) *
               C2500 +
           ((((C4897 - C4896) * C4747 + (C4899 - C4898) * C4743 +
              (C4902 - C4903) * C4748 + (C4904 - C4905) * C47471) *
                 C4745 +
             (C4906 * C4747 + C4907 * C4743 + C4908 * C4748 + C4909 * C47471) *
                 C47440) *
                C47257 +
            (((C5519 - C5518) * C4747 + (C5521 - C5520) * C4743 +
              (C5934 - C5935) * C4748 + (C5936 - C5937) * C47471) *
                 C4745 +
             (C5524 * C4747 + C5525 * C4743 + C6274 * C4748 + C6275 * C47471) *
                 C47440) *
                C47264 +
            (((C5931 - C5930) * C4747 + (C5933 - C5932) * C4743 +
              (C5938 - C5939) * C4748 + (C5940 - C5941) * C47471) *
                 C4745 +
             (C7002 * C4747 + C7003 * C4743 + (C5942 - C5943) * C4748 +
              (C5944 - C5945) * C47471) *
                 C47440) *
                C3770) *
               C47219) *
              C47407 +
          (((((C145 - C144) * C4747 + (C147 - C146) * C4743 + C4906 * C4748 +
              C4907 * C47471) *
                 C4745 +
             ((C149 - C148) * C4747 + (C151 - C150) * C4743 + C359 * C4748 +
              C360 * C47471) *
                 C47440) *
                C47257 +
            (((C523 - C522) * C4747 + (C525 - C524) * C4743 + C5524 * C4748 +
              C5525 * C47471) *
                 C4745 +
             ((C527 - C526) * C4747 + (C529 - C528) * C4743 + C964 * C4748 +
              C965 * C47471) *
                 C47440) *
                C47264 +
            (((C531 - C530) * C4747 + (C533 - C532) * C4743 + C7002 * C4748 +
              C7003 * C47471) *
                 C4745 +
             ((C535 - C534) * C4747 + (C537 - C536) * C4743 +
              (C2175 - C2176) * C4748 + (C2177 - C2178) * C47471) *
                 C47440) *
                C3770) *
               C2500 +
           (((C4900 * C4747 + C4901 * C4743 + C4910 * C4748 + C4911 * C47471) *
                 C4745 +
             (C4912 * C4747 + C4913 * C4743 + C361 * C4748 + C362 * C47471) *
                 C47440) *
                C47257 +
            ((C5522 * C4747 + C5523 * C4743 + C6276 * C4748 + C6277 * C47471) *
                 C4745 +
             (C5526 * C4747 + C5527 * C4743 + (C1593 - C1594) * C4748 +
              (C1595 - C1596) * C47471) *
                 C47440) *
                C47264 +
            ((C7000 * C4747 + C7001 * C4743 + (C5943 - C5942) * C4748 +
              (C5945 - C5944) * C47471) *
                 C4745 +
             ((C2176 - C2175) * C4747 + (C2178 - C2177) * C4743 +
              (C47376 * C1311 - C113 * C1294) * C4748 +
              (C47376 * C1321 - C113 * C1312) * C47471) *
                 C47440) *
                C3770) *
               C47219) *
              C47139)) /
        (p * q * std::sqrt(p + q));
    d2ee[34] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C47376 * C122 - C113 * C115) * C4747 +
              (C47376 * C136 - C113 * C123) * C4743 + (C4896 - C4897) * C4748 +
              (C4898 - C4899) * C47471) *
                 C4745 +
             ((C144 - C145) * C4747 + (C146 - C147) * C4743 + C4900 * C4748 +
              C4901 * C47471) *
                 C47440) *
                C3262 +
            (((C113 * C481 - C47376 * C491) * C4747 +
              (C113 * C492 - C47376 * C511) * C4743 + (C5518 - C5519) * C4748 +
              (C5520 - C5521) * C47471) *
                 C4745 +
             ((C522 - C523) * C4747 + (C524 - C525) * C4743 + C5522 * C4748 +
              C5523 * C47471) *
                 C47440) *
                C47261) *
               C2500 +
           ((((C4897 - C4896) * C4747 + (C4899 - C4898) * C4743 +
              (C4902 - C4903) * C4748 + (C4904 - C4905) * C47471) *
                 C4745 +
             (C4906 * C4747 + C4907 * C4743 + C4908 * C4748 + C4909 * C47471) *
                 C47440) *
                C3262 +
            (((C5519 - C5518) * C4747 + (C5521 - C5520) * C4743 +
              (C5934 - C5935) * C4748 + (C5936 - C5937) * C47471) *
                 C4745 +
             (C5524 * C4747 + C5525 * C4743 + C6274 * C4748 + C6275 * C47471) *
                 C47440) *
                C47261) *
               C47219) *
              C47489 +
          (((((C145 - C144) * C4747 + (C147 - C146) * C4743 + C4906 * C4748 +
              C4907 * C47471) *
                 C4745 +
             ((C149 - C148) * C4747 + (C151 - C150) * C4743 + C359 * C4748 +
              C360 * C47471) *
                 C47440) *
                C3262 +
            (((C523 - C522) * C4747 + (C525 - C524) * C4743 + C5524 * C4748 +
              C5525 * C47471) *
                 C4745 +
             ((C527 - C526) * C4747 + (C529 - C528) * C4743 + C964 * C4748 +
              C965 * C47471) *
                 C47440) *
                C47261) *
               C2500 +
           (((C4900 * C4747 + C4901 * C4743 + C4910 * C4748 + C4911 * C47471) *
                 C4745 +
             (C4912 * C4747 + C4913 * C4743 + C361 * C4748 + C362 * C47471) *
                 C47440) *
                C3262 +
            ((C5522 * C4747 + C5523 * C4743 + C6276 * C4748 + C6277 * C47471) *
                 C4745 +
             (C5526 * C4747 + C5527 * C4743 + (C1593 - C1594) * C4748 +
              (C1595 - C1596) * C47471) *
                 C47440) *
                C47261) *
               C47219) *
              C47476 +
          ((((C164 * C4747 + C165 * C4743 + C4912 * C4748 + C4913 * C47471) *
                 C4745 +
             ((C153 - C152) * C4747 + (C155 - C154) * C4743 + C664 * C4748 +
              C665 * C47471) *
                 C47440) *
                C3262 +
            ((C546 * C4747 + C547 * C4743 + C5526 * C4748 + C5527 * C47471) *
                 C4745 +
             ((C539 - C538) * C4747 + (C541 - C540) * C4743 +
              (C960 - C961) * C4748 + (C962 - C963) * C47471) *
                 C47440) *
                C47261) *
               C2500 +
           (((C359 * C4747 + C360 * C4743 + C4914 * C4748 + C4915 * C47471) *
                 C4745 +
             (C5192 * C4747 + C5193 * C4743 + (C355 - C356) * C4748 +
              (C357 - C358) * C47471) *
                 C47440) *
                C3262 +
            ((C964 * C4747 + C965 * C4743 + (C1594 - C1593) * C4748 +
              (C1596 - C1595) * C47471) *
                 C4745 +
             ((C961 - C960) * C4747 + (C963 - C962) * C4743 +
              (C47376 * C1585 - C113 * C1584) * C4748 +
              (C47376 * C1587 - C113 * C1586) * C47471) *
                 C47440) *
                C47261) *
               C47219) *
              C47447)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C47376 * C122 - C113 * C115) * C4747 +
             (C47376 * C136 - C113 * C123) * C4743 + (C4896 - C4897) * C4748 +
             (C4898 - C4899) * C47471) *
                C4745 +
            ((C144 - C145) * C4747 + (C146 - C147) * C4743 + C4900 * C4748 +
             C4901 * C47471) *
                C47440) *
               C3262 +
           (((C113 * C481 - C47376 * C491) * C4747 +
             (C113 * C492 - C47376 * C511) * C4743 + (C5518 - C5519) * C4748 +
             (C5520 - C5521) * C47471) *
                C4745 +
            ((C522 - C523) * C4747 + (C524 - C525) * C4743 + C5522 * C4748 +
             C5523 * C47471) *
                C47440) *
               C47261) *
              C47499 +
          ((((C4897 - C4896) * C4747 + (C4899 - C4898) * C4743 +
             (C4902 - C4903) * C4748 + (C4904 - C4905) * C47471) *
                C4745 +
            (C4906 * C4747 + C4907 * C4743 + C4908 * C4748 + C4909 * C47471) *
                C47440) *
               C3262 +
           (((C5519 - C5518) * C4747 + (C5521 - C5520) * C4743 +
             (C5934 - C5935) * C4748 + (C5936 - C5937) * C47471) *
                C4745 +
            (C5524 * C4747 + C5525 * C4743 + C6274 * C4748 + C6275 * C47471) *
                C47440) *
               C47261) *
              C47495 +
          ((((C4903 - C4902) * C4747 + (C4905 - C4904) * C4743 +
             (C5764 - C5765) * C4748 + (C5766 - C5767) * C47471) *
                C4745 +
            (C4910 * C4747 + C4911 * C4743 + C6076 * C4748 + C6077 * C47471) *
                C47440) *
               C3262 +
           (((C5935 - C5934) * C4747 + (C5937 - C5936) * C4743 +
             (C6420 - C6421) * C4748 + (C6422 - C6423) * C47471) *
                C4745 +
            (C6276 * C4747 + C6277 * C4743 + (C6278 - C6279) * C4748 +
             (C6280 - C6281) * C47471) *
                C47440) *
               C47261) *
              C47485 +
          ((((C5765 - C5764) * C4747 + (C5767 - C5766) * C4743 +
             (C5768 - C5769) * C4748 + (C5770 - C5771) * C47471) *
                C4745 +
            (C6078 * C4747 + C6079 * C4743 + (C5772 - C5773) * C4748 +
             (C5774 - C5775) * C47471) *
                C47440) *
               C3262 +
           (((C6421 - C6420) * C4747 + (C6423 - C6422) * C4743 +
             (C47376 * C6413 - C113 * C6411) * C4748 +
             (C47376 * C6417 - C113 * C6414) * C47471) *
                C4745 +
            ((C6279 - C6278) * C4747 + (C6281 - C6280) * C4743 +
             (C47376 * C6415 - C113 * C6412) * C4748 +
             (C47376 * C6418 - C113 * C6416) * C47471) *
                C47440) *
               C47261) *
              C47463) *
         C47128) /
            (p * q * std::sqrt(p + q));
    d2ee[35] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C47376 * C122 - C113 * C115) * C4747 +
             (C47376 * C136 - C113 * C123) * C4743 + (C4896 - C4897) * C4748 +
             (C4898 - C4899) * C47471) *
                C4745 +
            ((C144 - C145) * C4747 + (C146 - C147) * C4743 + C4900 * C4748 +
             C4901 * C47471) *
                C47440) *
               C47174 * C1420 +
           (((C4897 - C4896) * C4747 + (C4899 - C4898) * C4743 +
             (C4902 - C4903) * C4748 + (C4904 - C4905) * C47471) *
                C4745 +
            (C4906 * C4747 + C4907 * C4743 + C4908 * C4748 + C4909 * C47471) *
                C47440) *
               C47174 * C1421 +
           (((C4903 - C4902) * C4747 + (C4905 - C4904) * C4743 +
             (C5764 - C5765) * C4748 + (C5766 - C5767) * C47471) *
                C4745 +
            (C4910 * C4747 + C4911 * C4743 + C6076 * C4748 + C6077 * C47471) *
                C47440) *
               C47174 * C1422 +
           (((C5765 - C5764) * C4747 + (C5767 - C5766) * C4743 +
             (C5768 - C5769) * C4748 + (C5770 - C5771) * C47471) *
                C4745 +
            (C6078 * C4747 + C6079 * C4743 + (C5772 - C5773) * C4748 +
             (C5774 - C5775) * C47471) *
                C47440) *
               C47174 * C47463) *
              C47407 +
          ((((C145 - C144) * C4747 + (C147 - C146) * C4743 + C4906 * C4748 +
             C4907 * C47471) *
                C4745 +
            ((C149 - C148) * C4747 + (C151 - C150) * C4743 + C359 * C4748 +
             C360 * C47471) *
                C47440) *
               C47174 * C1420 +
           ((C4900 * C4747 + C4901 * C4743 + C4910 * C4748 + C4911 * C47471) *
                C4745 +
            (C4912 * C4747 + C4913 * C4743 + C361 * C4748 + C362 * C47471) *
                C47440) *
               C47174 * C1421 +
           ((C4908 * C4747 + C4909 * C4743 + C6078 * C4748 + C6079 * C47471) *
                C4745 +
            (C4914 * C4747 + C4915 * C4743 + (C1435 - C1436) * C4748 +
             (C1437 - C1438) * C47471) *
                C47440) *
               C47174 * C1422 +
           ((C6076 * C4747 + C6077 * C4743 + (C5773 - C5772) * C4748 +
             (C5775 - C5774) * C47471) *
                C4745 +
            ((C1436 - C1435) * C4747 + (C1438 - C1437) * C4743 +
             (C47376 * C1168 - C113 * C1157) * C4748 +
             (C47376 * C1175 - C113 * C1169) * C47471) *
                C47440) *
               C47174 * C47463) *
              C47139)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C47376 * C122 - C113 * C115) * C4747 +
             (C47376 * C136 - C113 * C123) * C4743 + (C4896 - C4897) * C4748 +
             (C4898 - C4899) * C47471) *
                C4745 +
            ((C144 - C145) * C4747 + (C146 - C147) * C4743 + C4900 * C4748 +
             C4901 * C47471) *
                C47440) *
               C47174 * C47421 +
           (((C4897 - C4896) * C4747 + (C4899 - C4898) * C4743 +
             (C4902 - C4903) * C4748 + (C4904 - C4905) * C47471) *
                C4745 +
            (C4906 * C4747 + C4907 * C4743 + C4908 * C4748 + C4909 * C47471) *
                C47440) *
               C47174 * C47219) *
              C655 +
          ((((C145 - C144) * C4747 + (C147 - C146) * C4743 + C4906 * C4748 +
             C4907 * C47471) *
                C4745 +
            ((C149 - C148) * C4747 + (C151 - C150) * C4743 + C359 * C4748 +
             C360 * C47471) *
                C47440) *
               C47174 * C47421 +
           ((C4900 * C4747 + C4901 * C4743 + C4910 * C4748 + C4911 * C47471) *
                C4745 +
            (C4912 * C4747 + C4913 * C4743 + C361 * C4748 + C362 * C47471) *
                C47440) *
               C47174 * C47219) *
              C656 +
          (((C164 * C4747 + C165 * C4743 + C4912 * C4748 + C4913 * C47471) *
                C4745 +
            ((C153 - C152) * C4747 + (C155 - C154) * C4743 + C664 * C4748 +
             C665 * C47471) *
                C47440) *
               C47174 * C47421 +
           ((C359 * C4747 + C360 * C4743 + C4914 * C4748 + C4915 * C47471) *
                C4745 +
            (C5192 * C4747 + C5193 * C4743 + (C355 - C356) * C4748 +
             (C357 - C358) * C47471) *
                C47440) *
               C47174 * C47219) *
              C657 +
          (((C166 * C4747 + C167 * C4743 + C5192 * C4748 + C5193 * C47471) *
                C4745 +
            ((C157 - C156) * C4747 + (C159 - C158) * C4743 +
             (C666 - C667) * C4748 + (C668 - C669) * C47471) *
                C47440) *
               C47174 * C47421 +
           ((C664 * C4747 + C665 * C4743 + (C356 - C355) * C4748 +
             (C358 - C357) * C47471) *
                C4745 +
            ((C667 - C666) * C4747 + (C669 - C668) * C4743 +
             (C47376 * C322 - C113 * C303) * C4748 +
             (C47376 * C333 - C113 * C323) * C47471) *
                C47440) *
               C47174 * C47219) *
              C47457)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C47376 * C122 - C113 * C115) * C4747 +
              (C47376 * C136 - C113 * C123) * C4743 + (C4896 - C4897) * C4748 +
              (C4898 - C4899) * C47471) *
                 C4745 +
             ((C144 - C145) * C4747 + (C146 - C147) * C4743 + C4900 * C4748 +
              C4901 * C47471) *
                 C47440) *
                C1816 +
            (((C113 * C481 - C47376 * C491) * C4747 +
              (C113 * C492 - C47376 * C511) * C4743 + (C5518 - C5519) * C4748 +
              (C5520 - C5521) * C47471) *
                 C4745 +
             ((C522 - C523) * C4747 + (C524 - C525) * C4743 + C5522 * C4748 +
              C5523 * C47471) *
                 C47440) *
                C1817 +
            (((C47376 * C497 - C113 * C484) * C4747 +
              (C47376 * C514 - C113 * C498) * C4743 + (C5930 - C5931) * C4748 +
              (C5932 - C5933) * C47471) *
                 C4745 +
             ((C530 - C531) * C4747 + (C532 - C533) * C4743 + C7000 * C4748 +
              C7001 * C47471) *
                 C47440) *
                C47456) *
               C47421 +
           ((((C4897 - C4896) * C4747 + (C4899 - C4898) * C4743 +
              (C4902 - C4903) * C4748 + (C4904 - C4905) * C47471) *
                 C4745 +
             (C4906 * C4747 + C4907 * C4743 + C4908 * C4748 + C4909 * C47471) *
                 C47440) *
                C1816 +
            (((C5519 - C5518) * C4747 + (C5521 - C5520) * C4743 +
              (C5934 - C5935) * C4748 + (C5936 - C5937) * C47471) *
                 C4745 +
             (C5524 * C4747 + C5525 * C4743 + C6274 * C4748 + C6275 * C47471) *
                 C47440) *
                C1817 +
            (((C5931 - C5930) * C4747 + (C5933 - C5932) * C4743 +
              (C5938 - C5939) * C4748 + (C5940 - C5941) * C47471) *
                 C4745 +
             (C7002 * C4747 + C7003 * C4743 + (C5942 - C5943) * C4748 +
              (C5944 - C5945) * C47471) *
                 C47440) *
                C47456) *
               C47219) *
              C47407 +
          (((((C145 - C144) * C4747 + (C147 - C146) * C4743 + C4906 * C4748 +
              C4907 * C47471) *
                 C4745 +
             ((C149 - C148) * C4747 + (C151 - C150) * C4743 + C359 * C4748 +
              C360 * C47471) *
                 C47440) *
                C1816 +
            (((C523 - C522) * C4747 + (C525 - C524) * C4743 + C5524 * C4748 +
              C5525 * C47471) *
                 C4745 +
             ((C527 - C526) * C4747 + (C529 - C528) * C4743 + C964 * C4748 +
              C965 * C47471) *
                 C47440) *
                C1817 +
            (((C531 - C530) * C4747 + (C533 - C532) * C4743 + C7002 * C4748 +
              C7003 * C47471) *
                 C4745 +
             ((C535 - C534) * C4747 + (C537 - C536) * C4743 +
              (C2175 - C2176) * C4748 + (C2177 - C2178) * C47471) *
                 C47440) *
                C47456) *
               C47421 +
           (((C4900 * C4747 + C4901 * C4743 + C4910 * C4748 + C4911 * C47471) *
                 C4745 +
             (C4912 * C4747 + C4913 * C4743 + C361 * C4748 + C362 * C47471) *
                 C47440) *
                C1816 +
            ((C5522 * C4747 + C5523 * C4743 + C6276 * C4748 + C6277 * C47471) *
                 C4745 +
             (C5526 * C4747 + C5527 * C4743 + (C1593 - C1594) * C4748 +
              (C1595 - C1596) * C47471) *
                 C47440) *
                C1817 +
            ((C7000 * C4747 + C7001 * C4743 + (C5943 - C5942) * C4748 +
              (C5945 - C5944) * C47471) *
                 C4745 +
             ((C2176 - C2175) * C4747 + (C2178 - C2177) * C4743 +
              (C47376 * C1311 - C113 * C1294) * C4748 +
              (C47376 * C1321 - C113 * C1312) * C47471) *
                 C47440) *
                C47456) *
               C47219) *
              C47139)) /
            (p * q * std::sqrt(p + q));
    d2ee[36] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C47376 * C122 - C113 * C115) * C4747 +
             (C47376 * C136 - C113 * C123) * C4743 + (C4896 - C4897) * C4748 +
             (C4898 - C4899) * C47471) *
                C4745 +
            ((C144 - C145) * C4747 + (C146 - C147) * C4743 + C4900 * C4748 +
             C4901 * C47471) *
                C47440) *
               C47422 +
           (((C113 * C481 - C47376 * C491) * C4747 +
             (C113 * C492 - C47376 * C511) * C4743 + (C5518 - C5519) * C4748 +
             (C5520 - C5521) * C47471) *
                C4745 +
            ((C522 - C523) * C4747 + (C524 - C525) * C4743 + C5522 * C4748 +
             C5523 * C47471) *
                C47440) *
               C47261) *
              C1420 +
          ((((C4897 - C4896) * C4747 + (C4899 - C4898) * C4743 +
             (C4902 - C4903) * C4748 + (C4904 - C4905) * C47471) *
                C4745 +
            (C4906 * C4747 + C4907 * C4743 + C4908 * C4748 + C4909 * C47471) *
                C47440) *
               C47422 +
           (((C5519 - C5518) * C4747 + (C5521 - C5520) * C4743 +
             (C5934 - C5935) * C4748 + (C5936 - C5937) * C47471) *
                C4745 +
            (C5524 * C4747 + C5525 * C4743 + C6274 * C4748 + C6275 * C47471) *
                C47440) *
               C47261) *
              C1421 +
          ((((C4903 - C4902) * C4747 + (C4905 - C4904) * C4743 +
             (C5764 - C5765) * C4748 + (C5766 - C5767) * C47471) *
                C4745 +
            (C4910 * C4747 + C4911 * C4743 + C6076 * C4748 + C6077 * C47471) *
                C47440) *
               C47422 +
           (((C5935 - C5934) * C4747 + (C5937 - C5936) * C4743 +
             (C6420 - C6421) * C4748 + (C6422 - C6423) * C47471) *
                C4745 +
            (C6276 * C4747 + C6277 * C4743 + (C6278 - C6279) * C4748 +
             (C6280 - C6281) * C47471) *
                C47440) *
               C47261) *
              C1422 +
          ((((C5765 - C5764) * C4747 + (C5767 - C5766) * C4743 +
             (C5768 - C5769) * C4748 + (C5770 - C5771) * C47471) *
                C4745 +
            (C6078 * C4747 + C6079 * C4743 + (C5772 - C5773) * C4748 +
             (C5774 - C5775) * C47471) *
                C47440) *
               C47422 +
           (((C6421 - C6420) * C4747 + (C6423 - C6422) * C4743 +
             (C47376 * C6413 - C113 * C6411) * C4748 +
             (C47376 * C6417 - C113 * C6414) * C47471) *
                C4745 +
            ((C6279 - C6278) * C4747 + (C6281 - C6280) * C4743 +
             (C47376 * C6415 - C113 * C6412) * C4748 +
             (C47376 * C6418 - C113 * C6416) * C47471) *
                C47440) *
               C47261) *
              C47463) *
         C47128) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C47376 * C122 - C113 * C115) * C4747 +
              (C47376 * C136 - C113 * C123) * C4743 + (C4896 - C4897) * C4748 +
              (C4898 - C4899) * C47471) *
                 C4745 +
             ((C144 - C145) * C4747 + (C146 - C147) * C4743 + C4900 * C4748 +
              C4901 * C47471) *
                 C47440) *
                C47422 +
            (((C113 * C481 - C47376 * C491) * C4747 +
              (C113 * C492 - C47376 * C511) * C4743 + (C5518 - C5519) * C4748 +
              (C5520 - C5521) * C47471) *
                 C4745 +
             ((C522 - C523) * C4747 + (C524 - C525) * C4743 + C5522 * C4748 +
              C5523 * C47471) *
                 C47440) *
                C47261) *
               C47421 +
           ((((C4897 - C4896) * C4747 + (C4899 - C4898) * C4743 +
              (C4902 - C4903) * C4748 + (C4904 - C4905) * C47471) *
                 C4745 +
             (C4906 * C4747 + C4907 * C4743 + C4908 * C4748 + C4909 * C47471) *
                 C47440) *
                C47422 +
            (((C5519 - C5518) * C4747 + (C5521 - C5520) * C4743 +
              (C47376 * C1301 - C113 * C1289) * C4748 +
              (C47376 * C1316 - C113 * C1302) * C47471) *
                 C4745 +
             (C5524 * C4747 + C5525 * C4743 + (C1590 - C1589) * C4748 +
              (C1592 - C1591) * C47471) *
                 C47440) *
                C47261) *
               C47219) *
              C291 +
          (((((C145 - C144) * C4747 + (C147 - C146) * C4743 + C4906 * C4748 +
              C4907 * C47471) *
                 C4745 +
             ((C149 - C148) * C4747 + (C151 - C150) * C4743 + C359 * C4748 +
              C360 * C47471) *
                 C47440) *
                C47422 +
            (((C523 - C522) * C4747 + (C525 - C524) * C4743 + C5524 * C4748 +
              C5525 * C47471) *
                 C4745 +
             ((C527 - C526) * C4747 + (C529 - C528) * C4743 + C964 * C4748 +
              C965 * C47471) *
                 C47440) *
                C47261) *
               C47421 +
           (((C4900 * C4747 + C4901 * C4743 + C4910 * C4748 + C4911 * C47471) *
                 C4745 +
             (C4912 * C4747 + C4913 * C4743 + C361 * C4748 + C362 * C47471) *
                 C47440) *
                C47422 +
            ((C5522 * C4747 + C5523 * C4743 + (C1589 - C1590) * C4748 +
              (C1591 - C1592) * C47471) *
                 C4745 +
             (C5526 * C4747 + C5527 * C4743 + (C1593 - C1594) * C4748 +
              (C1595 - C1596) * C47471) *
                 C47440) *
                C47261) *
               C47219) *
              C292 +
          ((((C164 * C4747 + C165 * C4743 + C4912 * C4748 + C4913 * C47471) *
                 C4745 +
             ((C153 - C152) * C4747 + (C155 - C154) * C4743 + C664 * C4748 +
              C665 * C47471) *
                 C47440) *
                C47422 +
            ((C546 * C4747 + C547 * C4743 + C5526 * C4748 + C5527 * C47471) *
                 C4745 +
             ((C539 - C538) * C4747 + (C541 - C540) * C4743 +
              (C960 - C961) * C4748 + (C962 - C963) * C47471) *
                 C47440) *
                C47261) *
               C47421 +
           (((C359 * C4747 + C360 * C4743 + C4914 * C4748 + C4915 * C47471) *
                 C4745 +
             (C5192 * C4747 + C5193 * C4743 + (C355 - C356) * C4748 +
              (C357 - C358) * C47471) *
                 C47440) *
                C47422 +
            ((C964 * C4747 + C965 * C4743 + (C1594 - C1593) * C4748 +
              (C1596 - C1595) * C47471) *
                 C4745 +
             ((C961 - C960) * C4747 + (C963 - C962) * C4743 +
              (C47376 * C1585 - C113 * C1584) * C4748 +
              (C47376 * C1587 - C113 * C1586) * C47471) *
                 C47440) *
                C47261) *
               C47219) *
              C47447)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C47376 * C122 - C113 * C115) * C4747 +
             (C47376 * C136 - C113 * C123) * C4743 + (C4896 - C4897) * C4748 +
             (C4898 - C4899) * C47471) *
                C4745 +
            ((C144 - C145) * C4747 + (C146 - C147) * C4743 + C4900 * C4748 +
             C4901 * C47471) *
                C47440) *
               C2276 +
           (((C113 * C481 - C47376 * C491) * C4747 +
             (C113 * C492 - C47376 * C511) * C4743 + (C5518 - C5519) * C4748 +
             (C5520 - C5521) * C47471) *
                C4745 +
            ((C522 - C523) * C4747 + (C524 - C525) * C4743 + C5522 * C4748 +
             C5523 * C47471) *
                C47440) *
               C2277 +
           (((C47376 * C497 - C113 * C484) * C4747 +
             (C47376 * C514 - C113 * C498) * C4743 + (C5930 - C5931) * C4748 +
             (C5932 - C5933) * C47471) *
                C4745 +
            ((C530 - C531) * C4747 + (C532 - C533) * C4743 + C7000 * C4748 +
             C7001 * C47471) *
                C47440) *
               C2278 +
           (((C113 * C1996 - C47376 * C2002) * C4747 +
             (C113 * C2003 - C47376 * C2014) * C4743 + (C7276 - C7277) * C4748 +
             (C7278 - C7279) * C47471) *
                C4745 +
            ((C2285 - C2286) * C4747 + (C2287 - C2288) * C4743 +
             (C7134 - C7135) * C4748 + (C7136 - C7137) * C47471) *
                C47440) *
               C47469) *
              C47421 +
          ((((C4897 - C4896) * C4747 + (C4899 - C4898) * C4743 +
             (C4902 - C4903) * C4748 + (C4904 - C4905) * C47471) *
                C4745 +
            (C4906 * C4747 + C4907 * C4743 + C4908 * C4748 + C4909 * C47471) *
                C47440) *
               C2276 +
           (((C5519 - C5518) * C4747 + (C5521 - C5520) * C4743 +
             (C5934 - C5935) * C4748 + (C5936 - C5937) * C47471) *
                C4745 +
            (C5524 * C4747 + C5525 * C4743 + C6274 * C4748 + C6275 * C47471) *
                C47440) *
               C2277 +
           (((C5931 - C5930) * C4747 + (C5933 - C5932) * C4743 +
             (C5938 - C5939) * C4748 + (C5940 - C5941) * C47471) *
                C4745 +
            (C7002 * C4747 + C7003 * C4743 + (C5942 - C5943) * C4748 +
             (C5944 - C5945) * C47471) *
                C47440) *
               C2278 +
           (((C7277 - C7276) * C4747 + (C7279 - C7278) * C4743 +
             (C47376 * C7269 - C113 * C7267) * C4748 +
             (C47376 * C7273 - C113 * C7270) * C47471) *
                C4745 +
            ((C7135 - C7134) * C4747 + (C7137 - C7136) * C4743 +
             (C47376 * C7271 - C113 * C7268) * C4748 +
             (C47376 * C7274 - C113 * C7272) * C47471) *
                C47440) *
               C47469) *
              C47219) *
         C47128) /
            (p * q * std::sqrt(p + q));
    d2ee[37] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C47376 * C122 - C113 * C115) * C4747 +
                (C47376 * C136 - C113 * C123) * C4743 +
                (C47376 * C304 - C113 * C294) * C4748 +
                (C47376 * C324 - C113 * C305) * C47471) *
                   C4745 +
               ((C144 - C145) * C4747 + (C146 - C147) * C4743 +
                (C336 - C335) * C4748 + (C338 - C337) * C47471) *
                   C47440) *
                  C47174 * C47156 * C108 +
              (((C145 - C144) * C4747 + (C147 - C146) * C4743 +
                (C335 - C336) * C4748 + (C337 - C338) * C47471) *
                   C4745 +
               ((C149 - C148) * C4747 + (C151 - C150) * C4743 + C359 * C4748 +
                C360 * C47471) *
                   C47440) *
                  C47174 * C47156 * C109 +
              ((C164 * C4747 + C165 * C4743 + (C340 - C339) * C4748 +
                (C342 - C341) * C47471) *
                   C4745 +
               ((C153 - C152) * C4747 + (C155 - C154) * C4743 + C664 * C4748 +
                C665 * C47471) *
                   C47440) *
                  C47174 * C47156 * C110 +
              ((C166 * C4747 + C167 * C4743 + (C352 - C351) * C4748 +
                (C354 - C353) * C47471) *
                   C4745 +
               ((C157 - C156) * C4747 + (C159 - C158) * C4743 +
                (C666 - C667) * C4748 + (C668 - C669) * C47471) *
                   C47440) *
                  C47174 * C47156 * C111 +
              ((C168 * C4747 + C169 * C4743 + (C667 - C666) * C4748 +
                (C669 - C668) * C47471) *
                   C4745 +
               ((C161 - C160) * C4747 + (C163 - C162) * C4743 +
                (C47376 * C660 - C113 * C659) * C4748 +
                (C47376 * C662 - C113 * C661) * C47471) *
                   C47440) *
                  C47174 * C47156 * C112) +
         0.5 * std::pow(Pi, 2.5) *
             (((((C47376 * C122 - C113 * C115) * C4747 +
                 (C47376 * C136 - C113 * C123) * C4743 +
                 (C4896 - C4897) * C4748 + (C4898 - C4899) * C47471) *
                    C4745 +
                ((C144 - C145) * C4747 + (C146 - C147) * C4743 + C4900 * C4748 +
                 C4901 * C47471) *
                    C47440) *
                   C47174 * C47492 +
               (((C4897 - C4896) * C4747 + (C4899 - C4898) * C4743 +
                 (C4902 - C4903) * C4748 + (C4904 - C4905) * C47471) *
                    C4745 +
                (C4906 * C4747 + C4907 * C4743 + C4908 * C4748 +
                 C4909 * C47471) *
                    C47440) *
                   C47174 * C47480 +
               (((C4903 - C4902) * C4747 + (C4905 - C4904) * C4743 +
                 (C47376 * C1158 - C113 * C1152) * C4748 +
                 (C47376 * C1170 - C113 * C1159) * C47471) *
                    C4745 +
                (C4910 * C4747 + C4911 * C4743 + (C1432 - C1431) * C4748 +
                 (C1434 - C1433) * C47471) *
                    C47440) *
                   C47174 * C47453) *
                  C291 +
              ((((C145 - C144) * C4747 + (C147 - C146) * C4743 + C4906 * C4748 +
                 C4907 * C47471) *
                    C4745 +
                ((C149 - C148) * C4747 + (C151 - C150) * C4743 + C359 * C4748 +
                 C360 * C47471) *
                    C47440) *
                   C47174 * C47492 +
               ((C4900 * C4747 + C4901 * C4743 + C4910 * C4748 +
                 C4911 * C47471) *
                    C4745 +
                (C4912 * C4747 + C4913 * C4743 + C361 * C4748 + C362 * C47471) *
                    C47440) *
                   C47174 * C47480 +
               ((C4908 * C4747 + C4909 * C4743 + (C1431 - C1432) * C4748 +
                 (C1433 - C1434) * C47471) *
                    C4745 +
                (C4914 * C4747 + C4915 * C4743 + (C1435 - C1436) * C4748 +
                 (C1437 - C1438) * C47471) *
                    C47440) *
                   C47174 * C47453) *
                  C292 +
              (((C164 * C4747 + C165 * C4743 + C4912 * C4748 + C4913 * C47471) *
                    C4745 +
                ((C153 - C152) * C4747 + (C155 - C154) * C4743 + C664 * C4748 +
                 C665 * C47471) *
                    C47440) *
                   C47174 * C47492 +
               ((C359 * C4747 + C360 * C4743 + C4914 * C4748 + C4915 * C47471) *
                    C4745 +
                ((C352 - C351) * C4747 + (C354 - C353) * C4743 +
                 (C355 - C356) * C4748 + (C357 - C358) * C47471) *
                    C47440) *
                   C47174 * C47480 +
               ((C361 * C4747 + C362 * C4743 + (C1436 - C1435) * C4748 +
                 (C1438 - C1437) * C47471) *
                    C4745 +
                ((C356 - C355) * C4747 + (C358 - C357) * C4743 +
                 (C47376 * C1427 - C113 * C1426) * C4748 +
                 (C47376 * C1429 - C113 * C1428) * C47471) *
                    C47440) *
                   C47174 * C47453) *
                  C47447)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C47376 * C122 - C113 * C115) * C4747 +
             (C47376 * C136 - C113 * C123) * C4743 + (C4896 - C4897) * C4748 +
             (C4898 - C4899) * C47471) *
                C4745 +
            ((C144 - C145) * C4747 + (C146 - C147) * C4743 + C4900 * C4748 +
             C4901 * C47471) *
                C47440) *
               C47493 +
           (((C113 * C481 - C47376 * C491) * C4747 +
             (C113 * C492 - C47376 * C511) * C4743 +
             (C113 * C931 - C47376 * C936) * C4748 +
             (C113 * C937 - C47376 * C946) * C47471) *
                C4745 +
            ((C522 - C523) * C4747 + (C524 - C525) * C4743 +
             (C953 - C952) * C4748 + (C955 - C954) * C47471) *
                C47440) *
               C47482 +
           (((C47376 * C497 - C113 * C484) * C4747 +
             (C47376 * C514 - C113 * C498) * C4743 +
             (C47376 * C1295 - C113 * C1286) * C4748 +
             (C47376 * C1313 - C113 * C1296) * C47471) *
                C4745 +
            ((C530 - C531) * C4747 + (C532 - C533) * C4743 +
             (C2172 - C2171) * C4748 + (C2174 - C2173) * C47471) *
                C47440) *
               C47456) *
              C47156 * C291 +
          ((((C145 - C144) * C4747 + (C147 - C146) * C4743 + C4906 * C4748 +
             C4907 * C47471) *
                C4745 +
            ((C149 - C148) * C4747 + (C151 - C150) * C4743 + C359 * C4748 +
             C360 * C47471) *
                C47440) *
               C47493 +
           (((C523 - C522) * C4747 + (C525 - C524) * C4743 +
             (C952 - C953) * C4748 + (C954 - C955) * C47471) *
                C4745 +
            ((C527 - C526) * C4747 + (C529 - C528) * C4743 + C964 * C4748 +
             C965 * C47471) *
                C47440) *
               C47482 +
           (((C531 - C530) * C4747 + (C533 - C532) * C4743 +
             (C2171 - C2172) * C4748 + (C2173 - C2174) * C47471) *
                C4745 +
            ((C535 - C534) * C4747 + (C537 - C536) * C4743 +
             (C2175 - C2176) * C4748 + (C2177 - C2178) * C47471) *
                C47440) *
               C47456) *
              C47156 * C292 +
          (((C164 * C4747 + C165 * C4743 + C4912 * C4748 + C4913 * C47471) *
                C4745 +
            ((C153 - C152) * C4747 + (C155 - C154) * C4743 + C664 * C4748 +
             C665 * C47471) *
                C47440) *
               C47493 +
           ((C546 * C4747 + C547 * C4743 + (C957 - C956) * C4748 +
             (C959 - C958) * C47471) *
                C4745 +
            ((C539 - C538) * C4747 + (C541 - C540) * C4743 +
             (C960 - C961) * C4748 + (C962 - C963) * C47471) *
                C47440) *
               C47482 +
           ((C548 * C4747 + C549 * C4743 + (C2176 - C2175) * C4748 +
             (C2178 - C2177) * C47471) *
                C4745 +
            ((C543 - C542) * C4747 + (C545 - C544) * C4743 +
             (C47376 * C2167 - C113 * C2166) * C4748 +
             (C47376 * C2169 - C113 * C2168) * C47471) *
                C47440) *
               C47456) *
              C47156 * C47447)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C47376 * C122 - C113 * C115) * C4747 +
             (C47376 * C136 - C113 * C123) * C4743 + (C4896 - C4897) * C4748 +
             (C4898 - C4899) * C47471) *
                C4745 +
            ((C144 - C145) * C4747 + (C146 - C147) * C4743 + C4900 * C4748 +
             C4901 * C47471) *
                C47440) *
               C47174 * C1078 +
           (((C4897 - C4896) * C4747 + (C4899 - C4898) * C4743 +
             (C4902 - C4903) * C4748 + (C4904 - C4905) * C47471) *
                C4745 +
            (C4906 * C4747 + C4907 * C4743 + C4908 * C4748 + C4909 * C47471) *
                C47440) *
               C47174 * C1079 +
           (((C4903 - C4902) * C4747 + (C4905 - C4904) * C4743 +
             (C47376 * C1158 - C113 * C1152) * C4748 +
             (C47376 * C1170 - C113 * C1159) * C47471) *
                C4745 +
            (C4910 * C4747 + C4911 * C4743 + (C1432 - C1431) * C4748 +
             (C1434 - C1433) * C47471) *
                C47440) *
               C47174 * C47453) *
              C47489 +
          ((((C145 - C144) * C4747 + (C147 - C146) * C4743 + C4906 * C4748 +
             C4907 * C47471) *
                C4745 +
            ((C149 - C148) * C4747 + (C151 - C150) * C4743 + C359 * C4748 +
             C360 * C47471) *
                C47440) *
               C47174 * C1078 +
           ((C4900 * C4747 + C4901 * C4743 + C4910 * C4748 + C4911 * C47471) *
                C4745 +
            (C4912 * C4747 + C4913 * C4743 + C361 * C4748 + C362 * C47471) *
                C47440) *
               C47174 * C1079 +
           ((C4908 * C4747 + C4909 * C4743 + (C1431 - C1432) * C4748 +
             (C1433 - C1434) * C47471) *
                C4745 +
            (C4914 * C4747 + C4915 * C4743 + (C1435 - C1436) * C4748 +
             (C1437 - C1438) * C47471) *
                C47440) *
               C47174 * C47453) *
              C47476 +
          (((C164 * C4747 + C165 * C4743 + C4912 * C4748 + C4913 * C47471) *
                C4745 +
            ((C153 - C152) * C4747 + (C155 - C154) * C4743 + C664 * C4748 +
             C665 * C47471) *
                C47440) *
               C47174 * C1078 +
           ((C359 * C4747 + C360 * C4743 + C4914 * C4748 + C4915 * C47471) *
                C4745 +
            (C5192 * C4747 + C5193 * C4743 + (C355 - C356) * C4748 +
             (C357 - C358) * C47471) *
                C47440) *
               C47174 * C1079 +
           ((C361 * C4747 + C362 * C4743 + (C1436 - C1435) * C4748 +
             (C1438 - C1437) * C47471) *
                C4745 +
            ((C356 - C355) * C4747 + (C358 - C357) * C4743 +
             (C47376 * C1427 - C113 * C1426) * C4748 +
             (C47376 * C1429 - C113 * C1428) * C47471) *
                C47440) *
               C47174 * C47453) *
              C47447)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C47376 * C122 - C113 * C115) * C4747 +
            (C47376 * C136 - C113 * C123) * C4743 + (C4896 - C4897) * C4748 +
            (C4898 - C4899) * C47471) *
               C4745 +
           ((C144 - C145) * C4747 + (C146 - C147) * C4743 + C4900 * C4748 +
            C4901 * C47471) *
               C47440) *
              C47174 * C1146 +
          (((C4897 - C4896) * C4747 + (C4899 - C4898) * C4743 +
            (C4902 - C4903) * C4748 + (C4904 - C4905) * C47471) *
               C4745 +
           (C4906 * C4747 + C4907 * C4743 + C4908 * C4748 + C4909 * C47471) *
               C47440) *
              C47174 * C1147 +
          (((C4903 - C4902) * C4747 + (C4905 - C4904) * C4743 +
            (C5764 - C5765) * C4748 + (C5766 - C5767) * C47471) *
               C4745 +
           (C4910 * C4747 + C4911 * C4743 + (C1432 - C1431) * C4748 +
            (C1434 - C1433) * C47471) *
               C47440) *
              C47174 * C1148 +
          (((C5765 - C5764) * C4747 + (C5767 - C5766) * C4743 +
            (C5768 - C5769) * C4748 + (C5770 - C5771) * C47471) *
               C4745 +
           ((C1431 - C1432) * C4747 + (C1433 - C1434) * C4743 +
            (C5772 - C5773) * C4748 + (C5774 - C5775) * C47471) *
               C47440) *
              C47174 * C1149 +
          (((C5769 - C5768) * C4747 + (C5771 - C5770) * C4743 +
            (C47376 * C5757 - C113 * C5755) * C4748 +
            (C47376 * C5761 - C113 * C5758) * C47471) *
               C4745 +
           ((C5773 - C5772) * C4747 + (C5775 - C5774) * C4743 +
            (C47376 * C5759 - C113 * C5756) * C4748 +
            (C47376 * C5762 - C113 * C5760) * C47471) *
               C47440) *
              C47174 * C1150) *
         C47128) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C47376 * C122 - C113 * C115) * C4747 +
             (C47376 * C136 - C113 * C123) * C4743 + (C4896 - C4897) * C4748 +
             (C4898 - C4899) * C47471) *
                C4745 +
            ((C144 - C145) * C4747 + (C146 - C147) * C4743 + C4900 * C4748 +
             C4901 * C47471) *
                C47440) *
               C47493 +
           (((C113 * C481 - C47376 * C491) * C4747 +
             (C113 * C492 - C47376 * C511) * C4743 + (C5518 - C5519) * C4748 +
             (C5520 - C5521) * C47471) *
                C4745 +
            ((C522 - C523) * C4747 + (C524 - C525) * C4743 + C5522 * C4748 +
             C5523 * C47471) *
                C47440) *
               C47482 +
           (((C47376 * C497 - C113 * C484) * C4747 +
             (C47376 * C514 - C113 * C498) * C4743 + (C5930 - C5931) * C4748 +
             (C5932 - C5933) * C47471) *
                C4745 +
            ((C530 - C531) * C4747 + (C532 - C533) * C4743 +
             (C2172 - C2171) * C4748 + (C2174 - C2173) * C47471) *
                C47440) *
               C47456) *
              C1078 +
          ((((C4897 - C4896) * C4747 + (C4899 - C4898) * C4743 +
             (C4902 - C4903) * C4748 + (C4904 - C4905) * C47471) *
                C4745 +
            (C4906 * C4747 + C4907 * C4743 + C4908 * C4748 + C4909 * C47471) *
                C47440) *
               C47493 +
           (((C5519 - C5518) * C4747 + (C5521 - C5520) * C4743 +
             (C5934 - C5935) * C4748 + (C5936 - C5937) * C47471) *
                C4745 +
            (C5524 * C4747 + C5525 * C4743 + (C1590 - C1589) * C4748 +
             (C1592 - C1591) * C47471) *
                C47440) *
               C47482 +
           (((C5931 - C5930) * C4747 + (C5933 - C5932) * C4743 +
             (C5938 - C5939) * C4748 + (C5940 - C5941) * C47471) *
                C4745 +
            ((C2171 - C2172) * C4747 + (C2173 - C2174) * C4743 +
             (C5942 - C5943) * C4748 + (C5944 - C5945) * C47471) *
                C47440) *
               C47456) *
              C1079 +
          ((((C4903 - C4902) * C4747 + (C4905 - C4904) * C4743 +
             (C5764 - C5765) * C4748 + (C5766 - C5767) * C47471) *
                C4745 +
            (C4910 * C4747 + C4911 * C4743 + (C1432 - C1431) * C4748 +
             (C1434 - C1433) * C47471) *
                C47440) *
               C47493 +
           (((C5935 - C5934) * C4747 + (C5937 - C5936) * C4743 +
             (C113 * C1694 - C47376 * C1697) * C4748 +
             (C113 * C1698 - C47376 * C1703) * C47471) *
                C4745 +
            ((C1589 - C1590) * C4747 + (C1591 - C1592) * C4743 +
             (C113 * C1695 - C47376 * C1699) * C4748 +
             (C113 * C1700 - C47376 * C1704) * C47471) *
                C47440) *
               C47482 +
           (((C5939 - C5938) * C4747 + (C5941 - C5940) * C4743 +
             (C47376 * C5923 - C113 * C5921) * C4748 +
             (C47376 * C5927 - C113 * C5924) * C47471) *
                C4745 +
            ((C5943 - C5942) * C4747 + (C5945 - C5944) * C4743 +
             (C47376 * C5925 - C113 * C5922) * C4748 +
             (C47376 * C5928 - C113 * C5926) * C47471) *
                C47440) *
               C47456) *
              C47453) *
         C47128) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C47376 * C122 - C113 * C115) * C4747 +
             (C47376 * C136 - C113 * C123) * C4743 + (C4896 - C4897) * C4748 +
             (C4898 - C4899) * C47471) *
                C4745 +
            ((C144 - C145) * C4747 + (C146 - C147) * C4743 + C4900 * C4748 +
             C4901 * C47471) *
                C47440) *
               C1816 +
           (((C113 * C481 - C47376 * C491) * C4747 +
             (C113 * C492 - C47376 * C511) * C4743 + (C5518 - C5519) * C4748 +
             (C5520 - C5521) * C47471) *
                C4745 +
            ((C522 - C523) * C4747 + (C524 - C525) * C4743 + C5522 * C4748 +
             C5523 * C47471) *
                C47440) *
               C1817 +
           (((C47376 * C497 - C113 * C484) * C4747 +
             (C47376 * C514 - C113 * C498) * C4743 + (C5930 - C5931) * C4748 +
             (C5932 - C5933) * C47471) *
                C4745 +
            ((C530 - C531) * C4747 + (C532 - C533) * C4743 +
             (C2172 - C2171) * C4748 + (C2174 - C2173) * C47471) *
                C47440) *
               C47456) *
              C47156 * C47489 +
          ((((C145 - C144) * C4747 + (C147 - C146) * C4743 + C4906 * C4748 +
             C4907 * C47471) *
                C4745 +
            ((C149 - C148) * C4747 + (C151 - C150) * C4743 + C359 * C4748 +
             C360 * C47471) *
                C47440) *
               C1816 +
           (((C523 - C522) * C4747 + (C525 - C524) * C4743 + C5524 * C4748 +
             C5525 * C47471) *
                C4745 +
            ((C527 - C526) * C4747 + (C529 - C528) * C4743 + C964 * C4748 +
             C965 * C47471) *
                C47440) *
               C1817 +
           (((C531 - C530) * C4747 + (C533 - C532) * C4743 +
             (C2171 - C2172) * C4748 + (C2173 - C2174) * C47471) *
                C4745 +
            ((C535 - C534) * C4747 + (C537 - C536) * C4743 +
             (C2175 - C2176) * C4748 + (C2177 - C2178) * C47471) *
                C47440) *
               C47456) *
              C47156 * C47476 +
          (((C164 * C4747 + C165 * C4743 + C4912 * C4748 + C4913 * C47471) *
                C4745 +
            ((C153 - C152) * C4747 + (C155 - C154) * C4743 + C664 * C4748 +
             C665 * C47471) *
                C47440) *
               C1816 +
           ((C546 * C4747 + C547 * C4743 + C5526 * C4748 + C5527 * C47471) *
                C4745 +
            ((C539 - C538) * C4747 + (C541 - C540) * C4743 +
             (C960 - C961) * C4748 + (C962 - C963) * C47471) *
                C47440) *
               C1817 +
           ((C548 * C4747 + C549 * C4743 + (C2176 - C2175) * C4748 +
             (C2178 - C2177) * C47471) *
                C4745 +
            ((C543 - C542) * C4747 + (C545 - C544) * C4743 +
             (C47376 * C2167 - C113 * C2166) * C4748 +
             (C47376 * C2169 - C113 * C2168) * C47471) *
                C47440) *
               C47456) *
              C47156 * C47447)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C47376 * C122 - C113 * C115) * C4747 +
             (C47376 * C136 - C113 * C123) * C4743 + (C4896 - C4897) * C4748 +
             (C4898 - C4899) * C47471) *
                C4745 +
            ((C144 - C145) * C4747 + (C146 - C147) * C4743 + C4900 * C4748 +
             C4901 * C47471) *
                C47440) *
               C1816 +
           (((C113 * C481 - C47376 * C491) * C4747 +
             (C113 * C492 - C47376 * C511) * C4743 + (C5518 - C5519) * C4748 +
             (C5520 - C5521) * C47471) *
                C4745 +
            ((C522 - C523) * C4747 + (C524 - C525) * C4743 + C5522 * C4748 +
             C5523 * C47471) *
                C47440) *
               C1817 +
           (((C47376 * C497 - C113 * C484) * C4747 +
             (C47376 * C514 - C113 * C498) * C4743 + (C5930 - C5931) * C4748 +
             (C5932 - C5933) * C47471) *
                C4745 +
            ((C530 - C531) * C4747 + (C532 - C533) * C4743 +
             (C2172 - C2171) * C4748 + (C2174 - C2173) * C47471) *
                C47440) *
               C47456) *
              C47492 +
          ((((C4897 - C4896) * C4747 + (C4899 - C4898) * C4743 +
             (C4902 - C4903) * C4748 + (C4904 - C4905) * C47471) *
                C4745 +
            (C4906 * C4747 + C4907 * C4743 + C4908 * C4748 + C4909 * C47471) *
                C47440) *
               C1816 +
           (((C5519 - C5518) * C4747 + (C5521 - C5520) * C4743 +
             (C5934 - C5935) * C4748 + (C5936 - C5937) * C47471) *
                C4745 +
            (C5524 * C4747 + C5525 * C4743 + C6274 * C4748 + C6275 * C47471) *
                C47440) *
               C1817 +
           (((C5931 - C5930) * C4747 + (C5933 - C5932) * C4743 +
             (C5938 - C5939) * C4748 + (C5940 - C5941) * C47471) *
                C4745 +
            ((C2171 - C2172) * C4747 + (C2173 - C2174) * C4743 +
             (C5942 - C5943) * C4748 + (C5944 - C5945) * C47471) *
                C47440) *
               C47456) *
              C47480 +
          ((((C4903 - C4902) * C4747 + (C4905 - C4904) * C4743 +
             (C5764 - C5765) * C4748 + (C5766 - C5767) * C47471) *
                C4745 +
            (C4910 * C4747 + C4911 * C4743 + C6076 * C4748 + C6077 * C47471) *
                C47440) *
               C1816 +
           (((C5935 - C5934) * C4747 + (C5937 - C5936) * C4743 +
             (C6420 - C6421) * C4748 + (C6422 - C6423) * C47471) *
                C4745 +
            (C6276 * C4747 + C6277 * C4743 + (C6278 - C6279) * C4748 +
             (C6280 - C6281) * C47471) *
                C47440) *
               C1817 +
           (((C5939 - C5938) * C4747 + (C5941 - C5940) * C4743 +
             (C47376 * C5923 - C113 * C5921) * C4748 +
             (C47376 * C5927 - C113 * C5924) * C47471) *
                C4745 +
            ((C5943 - C5942) * C4747 + (C5945 - C5944) * C4743 +
             (C47376 * C5925 - C113 * C5922) * C4748 +
             (C47376 * C5928 - C113 * C5926) * C47471) *
                C47440) *
               C47456) *
              C47453) *
         C47128) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C47376 * C122 - C113 * C115) * C4747 +
            (C47376 * C136 - C113 * C123) * C4743 + (C4896 - C4897) * C4748 +
            (C4898 - C4899) * C47471) *
               C4745 +
           ((C144 - C145) * C4747 + (C146 - C147) * C4743 + C4900 * C4748 +
            C4901 * C47471) *
               C47440) *
              C1991 +
          (((C113 * C481 - C47376 * C491) * C4747 +
            (C113 * C492 - C47376 * C511) * C4743 + (C5518 - C5519) * C4748 +
            (C5520 - C5521) * C47471) *
               C4745 +
           ((C522 - C523) * C4747 + (C524 - C525) * C4743 + C5522 * C4748 +
            C5523 * C47471) *
               C47440) *
              C1992 +
          (((C47376 * C497 - C113 * C484) * C4747 +
            (C47376 * C514 - C113 * C498) * C4743 + (C5930 - C5931) * C4748 +
            (C5932 - C5933) * C47471) *
               C4745 +
           ((C530 - C531) * C4747 + (C532 - C533) * C4743 +
            (C2172 - C2171) * C4748 + (C2174 - C2173) * C47471) *
               C47440) *
              C1993 +
          (((C113 * C1996 - C47376 * C2002) * C4747 +
            (C113 * C2003 - C47376 * C2014) * C4743 +
            (C113 * C2390 - C47376 * C2393) * C4748 +
            (C113 * C2394 - C47376 * C2399) * C47471) *
               C4745 +
           ((C2285 - C2286) * C4747 + (C2287 - C2288) * C4743 +
            (C113 * C2391 - C47376 * C2395) * C4748 +
            (C113 * C2396 - C47376 * C2400) * C47471) *
               C47440) *
              C1994 +
          (((C47376 * C2008 - C113 * C1999) * C4747 +
            (C47376 * C2017 - C113 * C2009) * C4743 +
            (C47376 * C6799 - C113 * C6797) * C4748 +
            (C47376 * C6803 - C113 * C6800) * C47471) *
               C4745 +
           ((C47376 * C2010 - C113 * C2000) * C4747 +
            (C47376 * C2018 - C113 * C2011) * C4743 +
            (C47376 * C6801 - C113 * C6798) * C4748 +
            (C47376 * C6804 - C113 * C6802) * C47471) *
               C47440) *
              C1995) *
         C47156 * C47128) /
            (p * q * std::sqrt(p + q));
    d2ee[38] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C47376 * C122 - C113 * C115) * C4747 +
              (C47376 * C136 - C113 * C123) * C4743 + (C4896 - C4897) * C4748 +
              (C4898 - C4899) * C47471) *
                 C4745 +
             ((C144 - C145) * C4747 + (C146 - C147) * C4743 + C4900 * C4748 +
              C4901 * C47471) *
                 C47440) *
                C47422 +
            (((C113 * C481 - C47376 * C491) * C4747 +
              (C113 * C492 - C47376 * C511) * C4743 + (C5518 - C5519) * C4748 +
              (C5520 - C5521) * C47471) *
                 C4745 +
             ((C522 - C523) * C4747 + (C524 - C525) * C4743 + C5522 * C4748 +
              C5523 * C47471) *
                 C47440) *
                C47261) *
               C1078 +
           ((((C4897 - C4896) * C4747 + (C4899 - C4898) * C4743 +
              (C4902 - C4903) * C4748 + (C4904 - C4905) * C47471) *
                 C4745 +
             (C4906 * C4747 + C4907 * C4743 + C4908 * C4748 + C4909 * C47471) *
                 C47440) *
                C47422 +
            (((C5519 - C5518) * C4747 + (C5521 - C5520) * C4743 +
              (C5934 - C5935) * C4748 + (C5936 - C5937) * C47471) *
                 C4745 +
             (C5524 * C4747 + C5525 * C4743 + C6274 * C4748 + C6275 * C47471) *
                 C47440) *
                C47261) *
               C1079 +
           ((((C4903 - C4902) * C4747 + (C4905 - C4904) * C4743 +
              (C5764 - C5765) * C4748 + (C5766 - C5767) * C47471) *
                 C4745 +
             (C4910 * C4747 + C4911 * C4743 + C6076 * C4748 + C6077 * C47471) *
                 C47440) *
                C47422 +
            (((C5935 - C5934) * C4747 + (C5937 - C5936) * C4743 +
              (C113 * C1694 - C47376 * C1697) * C4748 +
              (C113 * C1698 - C47376 * C1703) * C47471) *
                 C4745 +
             (C6276 * C4747 + C6277 * C4743 + (C6278 - C6279) * C4748 +
              (C6280 - C6281) * C47471) *
                 C47440) *
                C47261) *
               C47453) *
              C47407 +
          (((((C145 - C144) * C4747 + (C147 - C146) * C4743 + C4906 * C4748 +
              C4907 * C47471) *
                 C4745 +
             ((C149 - C148) * C4747 + (C151 - C150) * C4743 + C359 * C4748 +
              C360 * C47471) *
                 C47440) *
                C47422 +
            (((C523 - C522) * C4747 + (C525 - C524) * C4743 + C5524 * C4748 +
              C5525 * C47471) *
                 C4745 +
             ((C527 - C526) * C4747 + (C529 - C528) * C4743 + C964 * C4748 +
              C965 * C47471) *
                 C47440) *
                C47261) *
               C1078 +
           (((C4900 * C4747 + C4901 * C4743 + C4910 * C4748 + C4911 * C47471) *
                 C4745 +
             (C4912 * C4747 + C4913 * C4743 + C361 * C4748 + C362 * C47471) *
                 C47440) *
                C47422 +
            ((C5522 * C4747 + C5523 * C4743 + C6276 * C4748 + C6277 * C47471) *
                 C4745 +
             (C5526 * C4747 + C5527 * C4743 + (C1593 - C1594) * C4748 +
              (C1595 - C1596) * C47471) *
                 C47440) *
                C47261) *
               C1079 +
           (((C4908 * C4747 + C4909 * C4743 + C6078 * C4748 + C6079 * C47471) *
                 C4745 +
             (C4914 * C4747 + C4915 * C4743 + (C1435 - C1436) * C4748 +
              (C1437 - C1438) * C47471) *
                 C47440) *
                C47422 +
            ((C6274 * C4747 + C6275 * C4743 + (C6279 - C6278) * C4748 +
              (C6281 - C6280) * C47471) *
                 C4745 +
             ((C1594 - C1593) * C4747 + (C1596 - C1595) * C4743 +
              (C47376 * C1701 - C113 * C1696) * C4748 +
              (C47376 * C1705 - C113 * C1702) * C47471) *
                 C47440) *
                C47261) *
               C47453) *
              C47139)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C47376 * C122 - C113 * C115) * C4747 +
             (C47376 * C136 - C113 * C123) * C4743 + (C4896 - C4897) * C4748 +
             (C4898 - C4899) * C47471) *
                C4745 +
            ((C144 - C145) * C4747 + (C146 - C147) * C4743 + C4900 * C4748 +
             C4901 * C47471) *
                C47440) *
               C47422 +
           (((C113 * C481 - C47376 * C491) * C4747 +
             (C113 * C492 - C47376 * C511) * C4743 +
             (C113 * C931 - C47376 * C936) * C4748 +
             (C113 * C937 - C47376 * C946) * C47471) *
                C4745 +
            ((C522 - C523) * C4747 + (C524 - C525) * C4743 +
             (C953 - C952) * C4748 + (C955 - C954) * C47471) *
                C47440) *
               C47261) *
              C47156 * C655 +
          ((((C145 - C144) * C4747 + (C147 - C146) * C4743 + C4906 * C4748 +
             C4907 * C47471) *
                C4745 +
            ((C149 - C148) * C4747 + (C151 - C150) * C4743 + C359 * C4748 +
             C360 * C47471) *
                C47440) *
               C47422 +
           (((C523 - C522) * C4747 + (C525 - C524) * C4743 +
             (C952 - C953) * C4748 + (C954 - C955) * C47471) *
                C4745 +
            ((C527 - C526) * C4747 + (C529 - C528) * C4743 + C964 * C4748 +
             C965 * C47471) *
                C47440) *
               C47261) *
              C47156 * C656 +
          (((C164 * C4747 + C165 * C4743 + C4912 * C4748 + C4913 * C47471) *
                C4745 +
            ((C153 - C152) * C4747 + (C155 - C154) * C4743 + C664 * C4748 +
             C665 * C47471) *
                C47440) *
               C47422 +
           ((C546 * C4747 + C547 * C4743 + (C957 - C956) * C4748 +
             (C959 - C958) * C47471) *
                C4745 +
            ((C539 - C538) * C4747 + (C541 - C540) * C4743 +
             (C960 - C961) * C4748 + (C962 - C963) * C47471) *
                C47440) *
               C47261) *
              C47156 * C657 +
          (((C166 * C4747 + C167 * C4743 + C5192 * C4748 + C5193 * C47471) *
                C4745 +
            ((C157 - C156) * C4747 + (C159 - C158) * C4743 +
             (C666 - C667) * C4748 + (C668 - C669) * C47471) *
                C47440) *
               C47422 +
           ((C777 * C4747 + C778 * C4743 + (C961 - C960) * C4748 +
             (C963 - C962) * C47471) *
                C4745 +
            ((C780 - C779) * C4747 + (C782 - C781) * C4743 +
             (C47376 * C944 - C113 * C935) * C4748 +
             (C47376 * C950 - C113 * C945) * C47471) *
                C47440) *
               C47261) *
              C47156 * C47457)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C47376 * C122 - C113 * C115) * C4747 +
             (C47376 * C136 - C113 * C123) * C4743 + (C4896 - C4897) * C4748 +
             (C4898 - C4899) * C47471) *
                C4745 +
            ((C144 - C145) * C4747 + (C146 - C147) * C4743 + C4900 * C4748 +
             C4901 * C47471) *
                C47440) *
               C2276 +
           (((C113 * C481 - C47376 * C491) * C4747 +
             (C113 * C492 - C47376 * C511) * C4743 + (C5518 - C5519) * C4748 +
             (C5520 - C5521) * C47471) *
                C4745 +
            ((C522 - C523) * C4747 + (C524 - C525) * C4743 + C5522 * C4748 +
             C5523 * C47471) *
                C47440) *
               C2277 +
           (((C47376 * C497 - C113 * C484) * C4747 +
             (C47376 * C514 - C113 * C498) * C4743 + (C5930 - C5931) * C4748 +
             (C5932 - C5933) * C47471) *
                C4745 +
            ((C530 - C531) * C4747 + (C532 - C533) * C4743 + C7000 * C4748 +
             C7001 * C47471) *
                C47440) *
               C2278 +
           (((C113 * C1996 - C47376 * C2002) * C4747 +
             (C113 * C2003 - C47376 * C2014) * C4743 +
             (C113 * C2390 - C47376 * C2393) * C4748 +
             (C113 * C2394 - C47376 * C2399) * C47471) *
                C4745 +
            ((C2285 - C2286) * C4747 + (C2287 - C2288) * C4743 +
             (C7134 - C7135) * C4748 + (C7136 - C7137) * C47471) *
                C47440) *
               C47469) *
              C47156 * C47407 +
          ((((C145 - C144) * C4747 + (C147 - C146) * C4743 + C4906 * C4748 +
             C4907 * C47471) *
                C4745 +
            ((C149 - C148) * C4747 + (C151 - C150) * C4743 + C359 * C4748 +
             C360 * C47471) *
                C47440) *
               C2276 +
           (((C523 - C522) * C4747 + (C525 - C524) * C4743 + C5524 * C4748 +
             C5525 * C47471) *
                C4745 +
            ((C527 - C526) * C4747 + (C529 - C528) * C4743 + C964 * C4748 +
             C965 * C47471) *
                C47440) *
               C2277 +
           (((C531 - C530) * C4747 + (C533 - C532) * C4743 + C7002 * C4748 +
             C7003 * C47471) *
                C4745 +
            ((C535 - C534) * C4747 + (C537 - C536) * C4743 +
             (C2175 - C2176) * C4748 + (C2177 - C2178) * C47471) *
                C47440) *
               C2278 +
           (((C2286 - C2285) * C4747 + (C2288 - C2287) * C4743 +
             (C7135 - C7134) * C4748 + (C7137 - C7136) * C47471) *
                C4745 +
            ((C2290 - C2289) * C4747 + (C2292 - C2291) * C4743 +
             (C47376 * C2397 - C113 * C2392) * C4748 +
             (C47376 * C2401 - C113 * C2398) * C47471) *
                C47440) *
               C47469) *
              C47156 * C47139)) /
            (p * q * std::sqrt(p + q));
    d2ee[39] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C47376 * C122 - C113 * C115) * C4747 +
             (C47376 * C136 - C113 * C123) * C4743 + (C4896 - C4897) * C4748 +
             (C4898 - C4899) * C47471) *
                C4745 +
            ((C144 - C145) * C4747 + (C146 - C147) * C4743 + C4900 * C4748 +
             C4901 * C47471) *
                C47440) *
               C47174 * C47492 +
           (((C4897 - C4896) * C4747 + (C4899 - C4898) * C4743 +
             (C4902 - C4903) * C4748 + (C4904 - C4905) * C47471) *
                C4745 +
            (C4906 * C4747 + C4907 * C4743 + C4908 * C4748 + C4909 * C47471) *
                C47440) *
               C47174 * C47480 +
           (((C4903 - C4902) * C4747 + (C4905 - C4904) * C4743 +
             (C47376 * C1158 - C113 * C1152) * C4748 +
             (C47376 * C1170 - C113 * C1159) * C47471) *
                C4745 +
            (C4910 * C4747 + C4911 * C4743 + (C1432 - C1431) * C4748 +
             (C1434 - C1433) * C47471) *
                C47440) *
               C47174 * C47453) *
              C291 +
          ((((C145 - C144) * C4747 + (C147 - C146) * C4743 + C4906 * C4748 +
             C4907 * C47471) *
                C4745 +
            ((C149 - C148) * C4747 + (C151 - C150) * C4743 + C359 * C4748 +
             C360 * C47471) *
                C47440) *
               C47174 * C47492 +
           ((C4900 * C4747 + C4901 * C4743 + C4910 * C4748 + C4911 * C47471) *
                C4745 +
            (C4912 * C4747 + C4913 * C4743 + C361 * C4748 + C362 * C47471) *
                C47440) *
               C47174 * C47480 +
           ((C4908 * C4747 + C4909 * C4743 + (C1431 - C1432) * C4748 +
             (C1433 - C1434) * C47471) *
                C4745 +
            (C4914 * C4747 + C4915 * C4743 + (C1435 - C1436) * C4748 +
             (C1437 - C1438) * C47471) *
                C47440) *
               C47174 * C47453) *
              C292 +
          (((C164 * C4747 + C165 * C4743 + C4912 * C4748 + C4913 * C47471) *
                C4745 +
            ((C153 - C152) * C4747 + (C155 - C154) * C4743 + C664 * C4748 +
             C665 * C47471) *
                C47440) *
               C47174 * C47492 +
           ((C359 * C4747 + C360 * C4743 + C4914 * C4748 + C4915 * C47471) *
                C4745 +
            ((C352 - C351) * C4747 + (C354 - C353) * C4743 +
             (C355 - C356) * C4748 + (C357 - C358) * C47471) *
                C47440) *
               C47174 * C47480 +
           ((C361 * C4747 + C362 * C4743 + (C1436 - C1435) * C4748 +
             (C1438 - C1437) * C47471) *
                C4745 +
            ((C356 - C355) * C4747 + (C358 - C357) * C4743 +
             (C47376 * C1427 - C113 * C1426) * C4748 +
             (C47376 * C1429 - C113 * C1428) * C47471) *
                C47440) *
               C47174 * C47453) *
              C47447)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C47376 * C122 - C113 * C115) * C4747 +
            (C47376 * C136 - C113 * C123) * C4743 +
            (C47376 * C304 - C113 * C294) * C4748 +
            (C47376 * C324 - C113 * C305) * C47471) *
               C4745 +
           ((C144 - C145) * C4747 + (C146 - C147) * C4743 +
            (C336 - C335) * C4748 + (C338 - C337) * C47471) *
               C47440) *
              C47174 * C47156 * C108 +
          (((C145 - C144) * C4747 + (C147 - C146) * C4743 +
            (C335 - C336) * C4748 + (C337 - C338) * C47471) *
               C4745 +
           ((C149 - C148) * C4747 + (C151 - C150) * C4743 + C359 * C4748 +
            C360 * C47471) *
               C47440) *
              C47174 * C47156 * C109 +
          ((C164 * C4747 + C165 * C4743 + (C340 - C339) * C4748 +
            (C342 - C341) * C47471) *
               C4745 +
           ((C153 - C152) * C4747 + (C155 - C154) * C4743 + C664 * C4748 +
            C665 * C47471) *
               C47440) *
              C47174 * C47156 * C110 +
          ((C166 * C4747 + C167 * C4743 + (C352 - C351) * C4748 +
            (C354 - C353) * C47471) *
               C4745 +
           ((C157 - C156) * C4747 + (C159 - C158) * C4743 +
            (C666 - C667) * C4748 + (C668 - C669) * C47471) *
               C47440) *
              C47174 * C47156 * C111 +
          ((C168 * C4747 + C169 * C4743 + (C667 - C666) * C4748 +
            (C669 - C668) * C47471) *
               C4745 +
           ((C161 - C160) * C4747 + (C163 - C162) * C4743 +
            (C47376 * C660 - C113 * C659) * C4748 +
            (C47376 * C662 - C113 * C661) * C47471) *
               C47440) *
              C47174 * C47156 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C47376 * C122 - C113 * C115) * C4747 +
             (C47376 * C136 - C113 * C123) * C4743 + (C4896 - C4897) * C4748 +
             (C4898 - C4899) * C47471) *
                C4745 +
            ((C144 - C145) * C4747 + (C146 - C147) * C4743 + C4900 * C4748 +
             C4901 * C47471) *
                C47440) *
               C47174 * C1078 +
           (((C4897 - C4896) * C4747 + (C4899 - C4898) * C4743 +
             (C4902 - C4903) * C4748 + (C4904 - C4905) * C47471) *
                C4745 +
            (C4906 * C4747 + C4907 * C4743 + C4908 * C4748 + C4909 * C47471) *
                C47440) *
               C47174 * C1079 +
           (((C4903 - C4902) * C4747 + (C4905 - C4904) * C4743 +
             (C47376 * C1158 - C113 * C1152) * C4748 +
             (C47376 * C1170 - C113 * C1159) * C47471) *
                C4745 +
            (C4910 * C4747 + C4911 * C4743 + (C1432 - C1431) * C4748 +
             (C1434 - C1433) * C47471) *
                C47440) *
               C47174 * C47453) *
              C47489 +
          ((((C145 - C144) * C4747 + (C147 - C146) * C4743 + C4906 * C4748 +
             C4907 * C47471) *
                C4745 +
            ((C149 - C148) * C4747 + (C151 - C150) * C4743 + C359 * C4748 +
             C360 * C47471) *
                C47440) *
               C47174 * C1078 +
           ((C4900 * C4747 + C4901 * C4743 + C4910 * C4748 + C4911 * C47471) *
                C4745 +
            (C4912 * C4747 + C4913 * C4743 + C361 * C4748 + C362 * C47471) *
                C47440) *
               C47174 * C1079 +
           ((C4908 * C4747 + C4909 * C4743 + (C1431 - C1432) * C4748 +
             (C1433 - C1434) * C47471) *
                C4745 +
            (C4914 * C4747 + C4915 * C4743 + (C1435 - C1436) * C4748 +
             (C1437 - C1438) * C47471) *
                C47440) *
               C47174 * C47453) *
              C47476 +
          (((C164 * C4747 + C165 * C4743 + C4912 * C4748 + C4913 * C47471) *
                C4745 +
            ((C153 - C152) * C4747 + (C155 - C154) * C4743 + C664 * C4748 +
             C665 * C47471) *
                C47440) *
               C47174 * C1078 +
           ((C359 * C4747 + C360 * C4743 + C4914 * C4748 + C4915 * C47471) *
                C4745 +
            (C5192 * C4747 + C5193 * C4743 + (C355 - C356) * C4748 +
             (C357 - C358) * C47471) *
                C47440) *
               C47174 * C1079 +
           ((C361 * C4747 + C362 * C4743 + (C1436 - C1435) * C4748 +
             (C1438 - C1437) * C47471) *
                C4745 +
            ((C356 - C355) * C4747 + (C358 - C357) * C4743 +
             (C47376 * C1427 - C113 * C1426) * C4748 +
             (C47376 * C1429 - C113 * C1428) * C47471) *
                C47440) *
               C47174 * C47453) *
              C47447)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C47376 * C122 - C113 * C115) * C4747 +
            (C47376 * C136 - C113 * C123) * C4743 + (C4896 - C4897) * C4748 +
            (C4898 - C4899) * C47471) *
               C4745 +
           ((C144 - C145) * C4747 + (C146 - C147) * C4743 + C4900 * C4748 +
            C4901 * C47471) *
               C47440) *
              C47174 * C1146 +
          (((C4897 - C4896) * C4747 + (C4899 - C4898) * C4743 +
            (C4902 - C4903) * C4748 + (C4904 - C4905) * C47471) *
               C4745 +
           (C4906 * C4747 + C4907 * C4743 + C4908 * C4748 + C4909 * C47471) *
               C47440) *
              C47174 * C1147 +
          (((C4903 - C4902) * C4747 + (C4905 - C4904) * C4743 +
            (C5764 - C5765) * C4748 + (C5766 - C5767) * C47471) *
               C4745 +
           (C4910 * C4747 + C4911 * C4743 + (C1432 - C1431) * C4748 +
            (C1434 - C1433) * C47471) *
               C47440) *
              C47174 * C1148 +
          (((C5765 - C5764) * C4747 + (C5767 - C5766) * C4743 +
            (C5768 - C5769) * C4748 + (C5770 - C5771) * C47471) *
               C4745 +
           ((C1431 - C1432) * C4747 + (C1433 - C1434) * C4743 +
            (C5772 - C5773) * C4748 + (C5774 - C5775) * C47471) *
               C47440) *
              C47174 * C1149 +
          (((C5769 - C5768) * C4747 + (C5771 - C5770) * C4743 +
            (C47376 * C5757 - C113 * C5755) * C4748 +
            (C47376 * C5761 - C113 * C5758) * C47471) *
               C4745 +
           ((C5773 - C5772) * C4747 + (C5775 - C5774) * C4743 +
            (C47376 * C5759 - C113 * C5756) * C4748 +
            (C47376 * C5762 - C113 * C5760) * C47471) *
               C47440) *
              C47174 * C1150) *
         C47128) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C47376 * C122 - C113 * C115) * C4747 +
             (C47376 * C136 - C113 * C123) * C4743 + (C4896 - C4897) * C4748 +
             (C4898 - C4899) * C47471) *
                C4745 +
            ((C144 - C145) * C4747 + (C146 - C147) * C4743 + C4900 * C4748 +
             C4901 * C47471) *
                C47440) *
               C1816 +
           (((C113 * C481 - C47376 * C491) * C4747 +
             (C113 * C492 - C47376 * C511) * C4743 + (C5518 - C5519) * C4748 +
             (C5520 - C5521) * C47471) *
                C4745 +
            ((C522 - C523) * C4747 + (C524 - C525) * C4743 + C5522 * C4748 +
             C5523 * C47471) *
                C47440) *
               C1817 +
           (((C47376 * C497 - C113 * C484) * C4747 +
             (C47376 * C514 - C113 * C498) * C4743 + (C5930 - C5931) * C4748 +
             (C5932 - C5933) * C47471) *
                C4745 +
            ((C530 - C531) * C4747 + (C532 - C533) * C4743 +
             (C2172 - C2171) * C4748 + (C2174 - C2173) * C47471) *
                C47440) *
               C47456) *
              C47156 * C47489 +
          ((((C145 - C144) * C4747 + (C147 - C146) * C4743 + C4906 * C4748 +
             C4907 * C47471) *
                C4745 +
            ((C149 - C148) * C4747 + (C151 - C150) * C4743 + C359 * C4748 +
             C360 * C47471) *
                C47440) *
               C1816 +
           (((C523 - C522) * C4747 + (C525 - C524) * C4743 + C5524 * C4748 +
             C5525 * C47471) *
                C4745 +
            ((C527 - C526) * C4747 + (C529 - C528) * C4743 + C964 * C4748 +
             C965 * C47471) *
                C47440) *
               C1817 +
           (((C531 - C530) * C4747 + (C533 - C532) * C4743 +
             (C2171 - C2172) * C4748 + (C2173 - C2174) * C47471) *
                C4745 +
            ((C535 - C534) * C4747 + (C537 - C536) * C4743 +
             (C2175 - C2176) * C4748 + (C2177 - C2178) * C47471) *
                C47440) *
               C47456) *
              C47156 * C47476 +
          (((C164 * C4747 + C165 * C4743 + C4912 * C4748 + C4913 * C47471) *
                C4745 +
            ((C153 - C152) * C4747 + (C155 - C154) * C4743 + C664 * C4748 +
             C665 * C47471) *
                C47440) *
               C1816 +
           ((C546 * C4747 + C547 * C4743 + C5526 * C4748 + C5527 * C47471) *
                C4745 +
            ((C539 - C538) * C4747 + (C541 - C540) * C4743 +
             (C960 - C961) * C4748 + (C962 - C963) * C47471) *
                C47440) *
               C1817 +
           ((C548 * C4747 + C549 * C4743 + (C2176 - C2175) * C4748 +
             (C2178 - C2177) * C47471) *
                C4745 +
            ((C543 - C542) * C4747 + (C545 - C544) * C4743 +
             (C47376 * C2167 - C113 * C2166) * C4748 +
             (C47376 * C2169 - C113 * C2168) * C47471) *
                C47440) *
               C47456) *
              C47156 * C47447)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C47376 * C122 - C113 * C115) * C4747 +
             (C47376 * C136 - C113 * C123) * C4743 + (C4896 - C4897) * C4748 +
             (C4898 - C4899) * C47471) *
                C4745 +
            ((C144 - C145) * C4747 + (C146 - C147) * C4743 + C4900 * C4748 +
             C4901 * C47471) *
                C47440) *
               C1816 +
           (((C113 * C481 - C47376 * C491) * C4747 +
             (C113 * C492 - C47376 * C511) * C4743 + (C5518 - C5519) * C4748 +
             (C5520 - C5521) * C47471) *
                C4745 +
            ((C522 - C523) * C4747 + (C524 - C525) * C4743 + C5522 * C4748 +
             C5523 * C47471) *
                C47440) *
               C1817 +
           (((C47376 * C497 - C113 * C484) * C4747 +
             (C47376 * C514 - C113 * C498) * C4743 + (C5930 - C5931) * C4748 +
             (C5932 - C5933) * C47471) *
                C4745 +
            ((C530 - C531) * C4747 + (C532 - C533) * C4743 +
             (C2172 - C2171) * C4748 + (C2174 - C2173) * C47471) *
                C47440) *
               C47456) *
              C47492 +
          ((((C4897 - C4896) * C4747 + (C4899 - C4898) * C4743 +
             (C4902 - C4903) * C4748 + (C4904 - C4905) * C47471) *
                C4745 +
            (C4906 * C4747 + C4907 * C4743 + C4908 * C4748 + C4909 * C47471) *
                C47440) *
               C1816 +
           (((C5519 - C5518) * C4747 + (C5521 - C5520) * C4743 +
             (C5934 - C5935) * C4748 + (C5936 - C5937) * C47471) *
                C4745 +
            (C5524 * C4747 + C5525 * C4743 + C6274 * C4748 + C6275 * C47471) *
                C47440) *
               C1817 +
           (((C5931 - C5930) * C4747 + (C5933 - C5932) * C4743 +
             (C5938 - C5939) * C4748 + (C5940 - C5941) * C47471) *
                C4745 +
            ((C2171 - C2172) * C4747 + (C2173 - C2174) * C4743 +
             (C5942 - C5943) * C4748 + (C5944 - C5945) * C47471) *
                C47440) *
               C47456) *
              C47480 +
          ((((C4903 - C4902) * C4747 + (C4905 - C4904) * C4743 +
             (C5764 - C5765) * C4748 + (C5766 - C5767) * C47471) *
                C4745 +
            (C4910 * C4747 + C4911 * C4743 + C6076 * C4748 + C6077 * C47471) *
                C47440) *
               C1816 +
           (((C5935 - C5934) * C4747 + (C5937 - C5936) * C4743 +
             (C6420 - C6421) * C4748 + (C6422 - C6423) * C47471) *
                C4745 +
            (C6276 * C4747 + C6277 * C4743 + (C6278 - C6279) * C4748 +
             (C6280 - C6281) * C47471) *
                C47440) *
               C1817 +
           (((C5939 - C5938) * C4747 + (C5941 - C5940) * C4743 +
             (C47376 * C5923 - C113 * C5921) * C4748 +
             (C47376 * C5927 - C113 * C5924) * C47471) *
                C4745 +
            ((C5943 - C5942) * C4747 + (C5945 - C5944) * C4743 +
             (C47376 * C5925 - C113 * C5922) * C4748 +
             (C47376 * C5928 - C113 * C5926) * C47471) *
                C47440) *
               C47456) *
              C47453) *
         C47128) /
            (p * q * std::sqrt(p + q));
    d2ee[40] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C47376 * C122 - C113 * C115) * C4747 +
              (C47376 * C136 - C113 * C123) * C4743 + (C4896 - C4897) * C4748 +
              (C4898 - C4899) * C47471) *
                 C4745 +
             ((C144 - C145) * C4747 + (C146 - C147) * C4743 + C4900 * C4748 +
              C4901 * C47471) *
                 C47440) *
                C3262 +
            (((C113 * C481 - C47376 * C491) * C4747 +
              (C113 * C492 - C47376 * C511) * C4743 + (C5518 - C5519) * C4748 +
              (C5520 - C5521) * C47471) *
                 C4745 +
             ((C522 - C523) * C4747 + (C524 - C525) * C4743 + C5522 * C4748 +
              C5523 * C47471) *
                 C47440) *
                C47261) *
               C47421 +
           ((((C4897 - C4896) * C4747 + (C4899 - C4898) * C4743 +
              (C4902 - C4903) * C4748 + (C4904 - C4905) * C47471) *
                 C4745 +
             (C4906 * C4747 + C4907 * C4743 + C4908 * C4748 + C4909 * C47471) *
                 C47440) *
                C3262 +
            (((C5519 - C5518) * C4747 + (C5521 - C5520) * C4743 +
              (C5934 - C5935) * C4748 + (C5936 - C5937) * C47471) *
                 C4745 +
             (C5524 * C4747 + C5525 * C4743 + C6274 * C4748 + C6275 * C47471) *
                 C47440) *
                C47261) *
               C47219) *
              C47133 +
          (((((C145 - C144) * C4747 + (C147 - C146) * C4743 + C4906 * C4748 +
              C4907 * C47471) *
                 C4745 +
             ((C149 - C148) * C4747 + (C151 - C150) * C4743 + C359 * C4748 +
              C360 * C47471) *
                 C47440) *
                C3262 +
            (((C523 - C522) * C4747 + (C525 - C524) * C4743 + C5524 * C4748 +
              C5525 * C47471) *
                 C4745 +
             ((C527 - C526) * C4747 + (C529 - C528) * C4743 + C964 * C4748 +
              C965 * C47471) *
                 C47440) *
                C47261) *
               C47421 +
           (((C4900 * C4747 + C4901 * C4743 + C4910 * C4748 + C4911 * C47471) *
                 C4745 +
             (C4912 * C4747 + C4913 * C4743 + C361 * C4748 + C362 * C47471) *
                 C47440) *
                C3262 +
            ((C5522 * C4747 + C5523 * C4743 + C6276 * C4748 + C6277 * C47471) *
                 C4745 +
             (C5526 * C4747 + C5527 * C4743 + (C1593 - C1594) * C4748 +
              (C1595 - C1596) * C47471) *
                 C47440) *
                C47261) *
               C47219) *
              C47142 +
          ((((C164 * C4747 + C165 * C4743 + C4912 * C4748 + C4913 * C47471) *
                 C4745 +
             ((C153 - C152) * C4747 + (C155 - C154) * C4743 + C664 * C4748 +
              C665 * C47471) *
                 C47440) *
                C3262 +
            ((C546 * C4747 + C547 * C4743 + C5526 * C4748 + C5527 * C47471) *
                 C4745 +
             ((C539 - C538) * C4747 + (C541 - C540) * C4743 +
              (C960 - C961) * C4748 + (C962 - C963) * C47471) *
                 C47440) *
                C47261) *
               C47421 +
           (((C359 * C4747 + C360 * C4743 + C4914 * C4748 + C4915 * C47471) *
                 C4745 +
             (C5192 * C4747 + C5193 * C4743 + (C355 - C356) * C4748 +
              (C357 - C358) * C47471) *
                 C47440) *
                C3262 +
            ((C964 * C4747 + C965 * C4743 + (C1594 - C1593) * C4748 +
              (C1596 - C1595) * C47471) *
                 C4745 +
             ((C961 - C960) * C4747 + (C963 - C962) * C4743 +
              (C47376 * C1585 - C113 * C1584) * C4748 +
              (C47376 * C1587 - C113 * C1586) * C47471) *
                 C47440) *
                C47261) *
               C47219) *
              C2871)) /
        (p * q * std::sqrt(p + q));
    d2ee[41] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C47376 * C122 - C113 * C115) * C4747 +
              (C47376 * C136 - C113 * C123) * C4743 + (C4896 - C4897) * C4748 +
              (C4898 - C4899) * C47471) *
                 C4745 +
             ((C144 - C145) * C4747 + (C146 - C147) * C4743 + C4900 * C4748 +
              C4901 * C47471) *
                 C47440) *
                C47257 +
            (((C113 * C481 - C47376 * C491) * C4747 +
              (C113 * C492 - C47376 * C511) * C4743 + (C5518 - C5519) * C4748 +
              (C5520 - C5521) * C47471) *
                 C4745 +
             ((C522 - C523) * C4747 + (C524 - C525) * C4743 + C5522 * C4748 +
              C5523 * C47471) *
                 C47440) *
                C47264 +
            (((C47376 * C497 - C113 * C484) * C4747 +
              (C47376 * C514 - C113 * C498) * C4743 + (C5930 - C5931) * C4748 +
              (C5932 - C5933) * C47471) *
                 C4745 +
             ((C530 - C531) * C4747 + (C532 - C533) * C4743 + C7000 * C4748 +
              C7001 * C47471) *
                 C47440) *
                C3770) *
               C47421 +
           ((((C4897 - C4896) * C4747 + (C4899 - C4898) * C4743 +
              (C4902 - C4903) * C4748 + (C4904 - C4905) * C47471) *
                 C4745 +
             (C4906 * C4747 + C4907 * C4743 + C4908 * C4748 + C4909 * C47471) *
                 C47440) *
                C47257 +
            (((C5519 - C5518) * C4747 + (C5521 - C5520) * C4743 +
              (C5934 - C5935) * C4748 + (C5936 - C5937) * C47471) *
                 C4745 +
             (C5524 * C4747 + C5525 * C4743 + C6274 * C4748 + C6275 * C47471) *
                 C47440) *
                C47264 +
            (((C5931 - C5930) * C4747 + (C5933 - C5932) * C4743 +
              (C5938 - C5939) * C4748 + (C5940 - C5941) * C47471) *
                 C4745 +
             (C7002 * C4747 + C7003 * C4743 + (C5942 - C5943) * C4748 +
              (C5944 - C5945) * C47471) *
                 C47440) *
                C3770) *
               C47219) *
              C2608 +
          (((((C145 - C144) * C4747 + (C147 - C146) * C4743 + C4906 * C4748 +
              C4907 * C47471) *
                 C4745 +
             ((C149 - C148) * C4747 + (C151 - C150) * C4743 + C359 * C4748 +
              C360 * C47471) *
                 C47440) *
                C47257 +
            (((C523 - C522) * C4747 + (C525 - C524) * C4743 + C5524 * C4748 +
              C5525 * C47471) *
                 C4745 +
             ((C527 - C526) * C4747 + (C529 - C528) * C4743 + C964 * C4748 +
              C965 * C47471) *
                 C47440) *
                C47264 +
            (((C531 - C530) * C4747 + (C533 - C532) * C4743 + C7002 * C4748 +
              C7003 * C47471) *
                 C4745 +
             ((C535 - C534) * C4747 + (C537 - C536) * C4743 +
              (C2175 - C2176) * C4748 + (C2177 - C2178) * C47471) *
                 C47440) *
                C3770) *
               C47421 +
           (((C4900 * C4747 + C4901 * C4743 + C4910 * C4748 + C4911 * C47471) *
                 C4745 +
             (C4912 * C4747 + C4913 * C4743 + C361 * C4748 + C362 * C47471) *
                 C47440) *
                C47257 +
            ((C5522 * C4747 + C5523 * C4743 + C6276 * C4748 + C6277 * C47471) *
                 C4745 +
             (C5526 * C4747 + C5527 * C4743 + (C1593 - C1594) * C4748 +
              (C1595 - C1596) * C47471) *
                 C47440) *
                C47264 +
            ((C7000 * C4747 + C7001 * C4743 + (C5943 - C5942) * C4748 +
              (C5945 - C5944) * C47471) *
                 C4745 +
             ((C2176 - C2175) * C4747 + (C2178 - C2177) * C4743 +
              (C47376 * C1311 - C113 * C1294) * C4748 +
              (C47376 * C1321 - C113 * C1312) * C47471) *
                 C47440) *
                C3770) *
               C47219) *
              C47139)) /
        (p * q * std::sqrt(p + q));
    d2ee[42] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C47376 * C122 - C113 * C115) * C4747 +
              (C47376 * C136 - C113 * C123) * C4743 + (C4896 - C4897) * C4748 +
              (C4898 - C4899) * C47471) *
                 C4745 +
             ((C144 - C145) * C4747 + (C146 - C147) * C4743 + C4900 * C4748 +
              C4901 * C47471) *
                 C47440) *
                C3262 +
            (((C113 * C481 - C47376 * C491) * C4747 +
              (C113 * C492 - C47376 * C511) * C4743 + (C5518 - C5519) * C4748 +
              (C5520 - C5521) * C47471) *
                 C4745 +
             ((C522 - C523) * C4747 + (C524 - C525) * C4743 + C5522 * C4748 +
              C5523 * C47471) *
                 C47440) *
                C47261) *
               C47492 +
           ((((C4897 - C4896) * C4747 + (C4899 - C4898) * C4743 +
              (C4902 - C4903) * C4748 + (C4904 - C4905) * C47471) *
                 C4745 +
             (C4906 * C4747 + C4907 * C4743 + C4908 * C4748 + C4909 * C47471) *
                 C47440) *
                C3262 +
            (((C5519 - C5518) * C4747 + (C5521 - C5520) * C4743 +
              (C5934 - C5935) * C4748 + (C5936 - C5937) * C47471) *
                 C4745 +
             (C5524 * C4747 + C5525 * C4743 + C6274 * C4748 + C6275 * C47471) *
                 C47440) *
                C47261) *
               C47480 +
           ((((C4903 - C4902) * C4747 + (C4905 - C4904) * C4743 +
              (C5764 - C5765) * C4748 + (C5766 - C5767) * C47471) *
                 C4745 +
             (C4910 * C4747 + C4911 * C4743 + C6076 * C4748 + C6077 * C47471) *
                 C47440) *
                C3262 +
            (((C5935 - C5934) * C4747 + (C5937 - C5936) * C4743 +
              (C6420 - C6421) * C4748 + (C6422 - C6423) * C47471) *
                 C4745 +
             (C6276 * C4747 + C6277 * C4743 + (C6278 - C6279) * C4748 +
              (C6280 - C6281) * C47471) *
                 C47440) *
                C47261) *
               C47453) *
              C2608 +
          (((((C145 - C144) * C4747 + (C147 - C146) * C4743 + C4906 * C4748 +
              C4907 * C47471) *
                 C4745 +
             ((C149 - C148) * C4747 + (C151 - C150) * C4743 + C359 * C4748 +
              C360 * C47471) *
                 C47440) *
                C3262 +
            (((C523 - C522) * C4747 + (C525 - C524) * C4743 + C5524 * C4748 +
              C5525 * C47471) *
                 C4745 +
             ((C527 - C526) * C4747 + (C529 - C528) * C4743 + C964 * C4748 +
              C965 * C47471) *
                 C47440) *
                C47261) *
               C47492 +
           (((C4900 * C4747 + C4901 * C4743 + C4910 * C4748 + C4911 * C47471) *
                 C4745 +
             (C4912 * C4747 + C4913 * C4743 + C361 * C4748 + C362 * C47471) *
                 C47440) *
                C3262 +
            ((C5522 * C4747 + C5523 * C4743 + C6276 * C4748 + C6277 * C47471) *
                 C4745 +
             (C5526 * C4747 + C5527 * C4743 + (C1593 - C1594) * C4748 +
              (C1595 - C1596) * C47471) *
                 C47440) *
                C47261) *
               C47480 +
           (((C4908 * C4747 + C4909 * C4743 + C6078 * C4748 + C6079 * C47471) *
                 C4745 +
             (C4914 * C4747 + C4915 * C4743 + (C1435 - C1436) * C4748 +
              (C1437 - C1438) * C47471) *
                 C47440) *
                C3262 +
            ((C6274 * C4747 + C6275 * C4743 + (C6279 - C6278) * C4748 +
              (C6281 - C6280) * C47471) *
                 C4745 +
             ((C1594 - C1593) * C4747 + (C1596 - C1595) * C4743 +
              (C47376 * C1701 - C113 * C1696) * C4748 +
              (C47376 * C1705 - C113 * C1702) * C47471) *
                 C47440) *
                C47261) *
               C47453) *
              C47139)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C47376 * C122 - C113 * C115) * C4747 +
             (C47376 * C136 - C113 * C123) * C4743 + (C4896 - C4897) * C4748 +
             (C4898 - C4899) * C47471) *
                C4745 +
            ((C144 - C145) * C4747 + (C146 - C147) * C4743 + C4900 * C4748 +
             C4901 * C47471) *
                C47440) *
               C3262 +
           (((C113 * C481 - C47376 * C491) * C4747 +
             (C113 * C492 - C47376 * C511) * C4743 + (C5518 - C5519) * C4748 +
             (C5520 - C5521) * C47471) *
                C4745 +
            ((C522 - C523) * C4747 + (C524 - C525) * C4743 + C5522 * C4748 +
             C5523 * C47471) *
                C47440) *
               C47261) *
              C47156 * C47498 +
          ((((C145 - C144) * C4747 + (C147 - C146) * C4743 + C4906 * C4748 +
             C4907 * C47471) *
                C4745 +
            ((C149 - C148) * C4747 + (C151 - C150) * C4743 + C359 * C4748 +
             C360 * C47471) *
                C47440) *
               C3262 +
           (((C523 - C522) * C4747 + (C525 - C524) * C4743 + C5524 * C4748 +
             C5525 * C47471) *
                C4745 +
            ((C527 - C526) * C4747 + (C529 - C528) * C4743 + C964 * C4748 +
             C965 * C47471) *
                C47440) *
               C47261) *
              C47156 * C47491 +
          (((C164 * C4747 + C165 * C4743 + C4912 * C4748 + C4913 * C47471) *
                C4745 +
            ((C153 - C152) * C4747 + (C155 - C154) * C4743 + C664 * C4748 +
             C665 * C47471) *
                C47440) *
               C3262 +
           ((C546 * C4747 + C547 * C4743 + C5526 * C4748 + C5527 * C47471) *
                C4745 +
            ((C539 - C538) * C4747 + (C541 - C540) * C4743 +
             (C960 - C961) * C4748 + (C962 - C963) * C47471) *
                C47440) *
               C47261) *
              C47156 * C47478 +
          (((C166 * C4747 + C167 * C4743 + C5192 * C4748 + C5193 * C47471) *
                C4745 +
            ((C157 - C156) * C4747 + (C159 - C158) * C4743 +
             (C666 - C667) * C4748 + (C668 - C669) * C47471) *
                C47440) *
               C3262 +
           ((C777 * C4747 + C778 * C4743 + (C961 - C960) * C4748 +
             (C963 - C962) * C47471) *
                C4745 +
            ((C780 - C779) * C4747 + (C782 - C781) * C4743 +
             (C47376 * C944 - C113 * C935) * C4748 +
             (C47376 * C950 - C113 * C945) * C47471) *
                C47440) *
               C47261) *
              C47156 * C47457)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C47376 * C122 - C113 * C115) * C4747 +
             (C47376 * C136 - C113 * C123) * C4743 + (C4896 - C4897) * C4748 +
             (C4898 - C4899) * C47471) *
                C4745 +
            ((C144 - C145) * C4747 + (C146 - C147) * C4743 + C4900 * C4748 +
             C4901 * C47471) *
                C47440) *
               C47500 +
           (((C113 * C481 - C47376 * C491) * C4747 +
             (C113 * C492 - C47376 * C511) * C4743 + (C5518 - C5519) * C4748 +
             (C5520 - C5521) * C47471) *
                C4745 +
            ((C522 - C523) * C4747 + (C524 - C525) * C4743 + C5522 * C4748 +
             C5523 * C47471) *
                C47440) *
               C47497 +
           (((C47376 * C497 - C113 * C484) * C4747 +
             (C47376 * C514 - C113 * C498) * C4743 + (C5930 - C5931) * C4748 +
             (C5932 - C5933) * C47471) *
                C4745 +
            ((C530 - C531) * C4747 + (C532 - C533) * C4743 + C7000 * C4748 +
             C7001 * C47471) *
                C47440) *
               C47488 +
           (((C113 * C1996 - C47376 * C2002) * C4747 +
             (C113 * C2003 - C47376 * C2014) * C4743 + (C7276 - C7277) * C4748 +
             (C7278 - C7279) * C47471) *
                C4745 +
            ((C2285 - C2286) * C4747 + (C2287 - C2288) * C4743 +
             (C7134 - C7135) * C4748 + (C7136 - C7137) * C47471) *
                C47440) *
               C47469) *
              C47156 * C2608 +
          ((((C145 - C144) * C4747 + (C147 - C146) * C4743 + C4906 * C4748 +
             C4907 * C47471) *
                C4745 +
            ((C149 - C148) * C4747 + (C151 - C150) * C4743 + C359 * C4748 +
             C360 * C47471) *
                C47440) *
               C47500 +
           (((C523 - C522) * C4747 + (C525 - C524) * C4743 + C5524 * C4748 +
             C5525 * C47471) *
                C4745 +
            ((C527 - C526) * C4747 + (C529 - C528) * C4743 + C964 * C4748 +
             C965 * C47471) *
                C47440) *
               C47497 +
           (((C531 - C530) * C4747 + (C533 - C532) * C4743 + C7002 * C4748 +
             C7003 * C47471) *
                C4745 +
            ((C535 - C534) * C4747 + (C537 - C536) * C4743 +
             (C2175 - C2176) * C4748 + (C2177 - C2178) * C47471) *
                C47440) *
               C47488 +
           (((C2286 - C2285) * C4747 + (C2288 - C2287) * C4743 +
             (C7135 - C7134) * C4748 + (C7137 - C7136) * C47471) *
                C4745 +
            ((C2290 - C2289) * C4747 + (C2292 - C2291) * C4743 +
             (C47376 * C2397 - C113 * C2392) * C4748 +
             (C47376 * C2401 - C113 * C2398) * C47471) *
                C47440) *
               C47469) *
              C47156 * C47139)) /
            (p * q * std::sqrt(p + q));
    d2ee[43] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C47376 * C122 - C113 * C115) * C4747 +
             (C47376 * C136 - C113 * C123) * C4743 + (C4896 - C4897) * C4748 +
             (C4898 - C4899) * C47471) *
                C4745 +
            ((C144 - C145) * C4747 + (C146 - C147) * C4743 + C4900 * C4748 +
             C4901 * C47471) *
                C47440) *
               C47257 +
           (((C113 * C481 - C47376 * C491) * C4747 +
             (C113 * C492 - C47376 * C511) * C4743 + (C5518 - C5519) * C4748 +
             (C5520 - C5521) * C47471) *
                C4745 +
            ((C522 - C523) * C4747 + (C524 - C525) * C4743 + C5522 * C4748 +
             C5523 * C47471) *
                C47440) *
               C47264 +
           (((C47376 * C497 - C113 * C484) * C4747 +
             (C47376 * C514 - C113 * C498) * C4743 + (C5930 - C5931) * C4748 +
             (C5932 - C5933) * C47471) *
                C4745 +
            ((C530 - C531) * C4747 + (C532 - C533) * C4743 + C7000 * C4748 +
             C7001 * C47471) *
                C47440) *
               C3770) *
              C47156 * C47133 +
          ((((C145 - C144) * C4747 + (C147 - C146) * C4743 + C4906 * C4748 +
             C4907 * C47471) *
                C4745 +
            ((C149 - C148) * C4747 + (C151 - C150) * C4743 + C359 * C4748 +
             C360 * C47471) *
                C47440) *
               C47257 +
           (((C523 - C522) * C4747 + (C525 - C524) * C4743 + C5524 * C4748 +
             C5525 * C47471) *
                C4745 +
            ((C527 - C526) * C4747 + (C529 - C528) * C4743 + C964 * C4748 +
             C965 * C47471) *
                C47440) *
               C47264 +
           (((C531 - C530) * C4747 + (C533 - C532) * C4743 + C7002 * C4748 +
             C7003 * C47471) *
                C4745 +
            ((C535 - C534) * C4747 + (C537 - C536) * C4743 +
             (C2175 - C2176) * C4748 + (C2177 - C2178) * C47471) *
                C47440) *
               C3770) *
              C47156 * C47142 +
          (((C164 * C4747 + C165 * C4743 + C4912 * C4748 + C4913 * C47471) *
                C4745 +
            ((C153 - C152) * C4747 + (C155 - C154) * C4743 + C664 * C4748 +
             C665 * C47471) *
                C47440) *
               C47257 +
           ((C546 * C4747 + C547 * C4743 + C5526 * C4748 + C5527 * C47471) *
                C4745 +
            ((C539 - C538) * C4747 + (C541 - C540) * C4743 +
             (C960 - C961) * C4748 + (C962 - C963) * C47471) *
                C47440) *
               C47264 +
           ((C548 * C4747 + C549 * C4743 + (C2176 - C2175) * C4748 +
             (C2178 - C2177) * C47471) *
                C4745 +
            ((C543 - C542) * C4747 + (C545 - C544) * C4743 +
             (C47376 * C2167 - C113 * C2166) * C4748 +
             (C47376 * C2169 - C113 * C2168) * C47471) *
                C47440) *
               C3770) *
              C47156 * C2871)) /
        (p * q * std::sqrt(p + q));
    d2ee[44] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C47376 * C122 - C113 * C115) * C4747 +
             (C47376 * C136 - C113 * C123) * C4743 + (C4896 - C4897) * C4748 +
             (C4898 - C4899) * C47471) *
                C4745 +
            ((C144 - C145) * C4747 + (C146 - C147) * C4743 + C4900 * C4748 +
             C4901 * C47471) *
                C47440) *
               C3262 +
           (((C113 * C481 - C47376 * C491) * C4747 +
             (C113 * C492 - C47376 * C511) * C4743 + (C5518 - C5519) * C4748 +
             (C5520 - C5521) * C47471) *
                C4745 +
            ((C522 - C523) * C4747 + (C524 - C525) * C4743 + C5522 * C4748 +
             C5523 * C47471) *
                C47440) *
               C47261) *
              C47156 * C47498 +
          ((((C145 - C144) * C4747 + (C147 - C146) * C4743 + C4906 * C4748 +
             C4907 * C47471) *
                C4745 +
            ((C149 - C148) * C4747 + (C151 - C150) * C4743 + C359 * C4748 +
             C360 * C47471) *
                C47440) *
               C3262 +
           (((C523 - C522) * C4747 + (C525 - C524) * C4743 + C5524 * C4748 +
             C5525 * C47471) *
                C4745 +
            ((C527 - C526) * C4747 + (C529 - C528) * C4743 + C964 * C4748 +
             C965 * C47471) *
                C47440) *
               C47261) *
              C47156 * C47491 +
          (((C164 * C4747 + C165 * C4743 + C4912 * C4748 + C4913 * C47471) *
                C4745 +
            ((C153 - C152) * C4747 + (C155 - C154) * C4743 + C664 * C4748 +
             C665 * C47471) *
                C47440) *
               C3262 +
           ((C546 * C4747 + C547 * C4743 + C5526 * C4748 + C5527 * C47471) *
                C4745 +
            ((C539 - C538) * C4747 + (C541 - C540) * C4743 +
             (C960 - C961) * C4748 + (C962 - C963) * C47471) *
                C47440) *
               C47261) *
              C47156 * C47478 +
          (((C166 * C4747 + C167 * C4743 + C5192 * C4748 + C5193 * C47471) *
                C4745 +
            ((C157 - C156) * C4747 + (C159 - C158) * C4743 +
             (C666 - C667) * C4748 + (C668 - C669) * C47471) *
                C47440) *
               C3262 +
           ((C777 * C4747 + C778 * C4743 + (C961 - C960) * C4748 +
             (C963 - C962) * C47471) *
                C4745 +
            ((C780 - C779) * C4747 + (C782 - C781) * C4743 +
             (C47376 * C944 - C113 * C935) * C4748 +
             (C47376 * C950 - C113 * C945) * C47471) *
                C47440) *
               C47261) *
              C47156 * C47457)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C47376 * C122 - C113 * C115) * C4747 +
              (C47376 * C136 - C113 * C123) * C4743 + (C4896 - C4897) * C4748 +
              (C4898 - C4899) * C47471) *
                 C4745 +
             ((C144 - C145) * C4747 + (C146 - C147) * C4743 + C4900 * C4748 +
              C4901 * C47471) *
                 C47440) *
                C3262 +
            (((C113 * C481 - C47376 * C491) * C4747 +
              (C113 * C492 - C47376 * C511) * C4743 + (C5518 - C5519) * C4748 +
              (C5520 - C5521) * C47471) *
                 C4745 +
             ((C522 - C523) * C4747 + (C524 - C525) * C4743 + C5522 * C4748 +
              C5523 * C47471) *
                 C47440) *
                C47261) *
               C47492 +
           ((((C4897 - C4896) * C4747 + (C4899 - C4898) * C4743 +
              (C4902 - C4903) * C4748 + (C4904 - C4905) * C47471) *
                 C4745 +
             (C4906 * C4747 + C4907 * C4743 + C4908 * C4748 + C4909 * C47471) *
                 C47440) *
                C3262 +
            (((C5519 - C5518) * C4747 + (C5521 - C5520) * C4743 +
              (C5934 - C5935) * C4748 + (C5936 - C5937) * C47471) *
                 C4745 +
             (C5524 * C4747 + C5525 * C4743 + C6274 * C4748 + C6275 * C47471) *
                 C47440) *
                C47261) *
               C47480 +
           ((((C4903 - C4902) * C4747 + (C4905 - C4904) * C4743 +
              (C5764 - C5765) * C4748 + (C5766 - C5767) * C47471) *
                 C4745 +
             (C4910 * C4747 + C4911 * C4743 + C6076 * C4748 + C6077 * C47471) *
                 C47440) *
                C3262 +
            (((C5935 - C5934) * C4747 + (C5937 - C5936) * C4743 +
              (C6420 - C6421) * C4748 + (C6422 - C6423) * C47471) *
                 C4745 +
             (C6276 * C4747 + C6277 * C4743 + (C6278 - C6279) * C4748 +
              (C6280 - C6281) * C47471) *
                 C47440) *
                C47261) *
               C47453) *
              C2608 +
          (((((C145 - C144) * C4747 + (C147 - C146) * C4743 + C4906 * C4748 +
              C4907 * C47471) *
                 C4745 +
             ((C149 - C148) * C4747 + (C151 - C150) * C4743 + C359 * C4748 +
              C360 * C47471) *
                 C47440) *
                C3262 +
            (((C523 - C522) * C4747 + (C525 - C524) * C4743 + C5524 * C4748 +
              C5525 * C47471) *
                 C4745 +
             ((C527 - C526) * C4747 + (C529 - C528) * C4743 + C964 * C4748 +
              C965 * C47471) *
                 C47440) *
                C47261) *
               C47492 +
           (((C4900 * C4747 + C4901 * C4743 + C4910 * C4748 + C4911 * C47471) *
                 C4745 +
             (C4912 * C4747 + C4913 * C4743 + C361 * C4748 + C362 * C47471) *
                 C47440) *
                C3262 +
            ((C5522 * C4747 + C5523 * C4743 + C6276 * C4748 + C6277 * C47471) *
                 C4745 +
             (C5526 * C4747 + C5527 * C4743 + (C1593 - C1594) * C4748 +
              (C1595 - C1596) * C47471) *
                 C47440) *
                C47261) *
               C47480 +
           (((C4908 * C4747 + C4909 * C4743 + C6078 * C4748 + C6079 * C47471) *
                 C4745 +
             (C4914 * C4747 + C4915 * C4743 + (C1435 - C1436) * C4748 +
              (C1437 - C1438) * C47471) *
                 C47440) *
                C3262 +
            ((C6274 * C4747 + C6275 * C4743 + (C6279 - C6278) * C4748 +
              (C6281 - C6280) * C47471) *
                 C4745 +
             ((C1594 - C1593) * C4747 + (C1596 - C1595) * C4743 +
              (C47376 * C1701 - C113 * C1696) * C4748 +
              (C47376 * C1705 - C113 * C1702) * C47471) *
                 C47440) *
                C47261) *
               C47453) *
              C47139)) /
            (p * q * std::sqrt(p + q));
    d2ee[45] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C47376 * C122 - C113 * C115) * C4747 +
             (C47376 * C136 - C113 * C123) * C4743 + (C4896 - C4897) * C4748 +
             (C4898 - C4899) * C47471) *
                C4745 +
            ((C144 - C145) * C4747 + (C146 - C147) * C4743 + C4900 * C4748 +
             C4901 * C47471) *
                C47440) *
               C47174 * C47421 +
           (((C4897 - C4896) * C4747 + (C4899 - C4898) * C4743 +
             (C4902 - C4903) * C4748 + (C4904 - C4905) * C47471) *
                C4745 +
            (C4906 * C4747 + C4907 * C4743 + C4908 * C4748 + C4909 * C47471) *
                C47440) *
               C47174 * C47219) *
              C655 +
          ((((C145 - C144) * C4747 + (C147 - C146) * C4743 + C4906 * C4748 +
             C4907 * C47471) *
                C4745 +
            ((C149 - C148) * C4747 + (C151 - C150) * C4743 + C359 * C4748 +
             C360 * C47471) *
                C47440) *
               C47174 * C47421 +
           ((C4900 * C4747 + C4901 * C4743 + C4910 * C4748 + C4911 * C47471) *
                C4745 +
            (C4912 * C4747 + C4913 * C4743 + C361 * C4748 + C362 * C47471) *
                C47440) *
               C47174 * C47219) *
              C656 +
          (((C164 * C4747 + C165 * C4743 + C4912 * C4748 + C4913 * C47471) *
                C4745 +
            ((C153 - C152) * C4747 + (C155 - C154) * C4743 + C664 * C4748 +
             C665 * C47471) *
                C47440) *
               C47174 * C47421 +
           ((C359 * C4747 + C360 * C4743 + C4914 * C4748 + C4915 * C47471) *
                C4745 +
            (C5192 * C4747 + C5193 * C4743 + (C355 - C356) * C4748 +
             (C357 - C358) * C47471) *
                C47440) *
               C47174 * C47219) *
              C657 +
          (((C166 * C4747 + C167 * C4743 + C5192 * C4748 + C5193 * C47471) *
                C4745 +
            ((C157 - C156) * C4747 + (C159 - C158) * C4743 +
             (C666 - C667) * C4748 + (C668 - C669) * C47471) *
                C47440) *
               C47174 * C47421 +
           ((C664 * C4747 + C665 * C4743 + (C356 - C355) * C4748 +
             (C358 - C357) * C47471) *
                C4745 +
            ((C667 - C666) * C4747 + (C669 - C668) * C4743 +
             (C47376 * C322 - C113 * C303) * C4748 +
             (C47376 * C333 - C113 * C323) * C47471) *
                C47440) *
               C47174 * C47219) *
              C47457)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C47376 * C122 - C113 * C115) * C4747 +
             (C47376 * C136 - C113 * C123) * C4743 + (C4896 - C4897) * C4748 +
             (C4898 - C4899) * C47471) *
                C4745 +
            ((C144 - C145) * C4747 + (C146 - C147) * C4743 + C4900 * C4748 +
             C4901 * C47471) *
                C47440) *
               C47174 * C1420 +
           (((C4897 - C4896) * C4747 + (C4899 - C4898) * C4743 +
             (C4902 - C4903) * C4748 + (C4904 - C4905) * C47471) *
                C4745 +
            (C4906 * C4747 + C4907 * C4743 + C4908 * C4748 + C4909 * C47471) *
                C47440) *
               C47174 * C1421 +
           (((C4903 - C4902) * C4747 + (C4905 - C4904) * C4743 +
             (C5764 - C5765) * C4748 + (C5766 - C5767) * C47471) *
                C4745 +
            (C4910 * C4747 + C4911 * C4743 + C6076 * C4748 + C6077 * C47471) *
                C47440) *
               C47174 * C1422 +
           (((C5765 - C5764) * C4747 + (C5767 - C5766) * C4743 +
             (C5768 - C5769) * C4748 + (C5770 - C5771) * C47471) *
                C4745 +
            (C6078 * C4747 + C6079 * C4743 + (C5772 - C5773) * C4748 +
             (C5774 - C5775) * C47471) *
                C47440) *
               C47174 * C47463) *
              C47407 +
          ((((C145 - C144) * C4747 + (C147 - C146) * C4743 + C4906 * C4748 +
             C4907 * C47471) *
                C4745 +
            ((C149 - C148) * C4747 + (C151 - C150) * C4743 + C359 * C4748 +
             C360 * C47471) *
                C47440) *
               C47174 * C1420 +
           ((C4900 * C4747 + C4901 * C4743 + C4910 * C4748 + C4911 * C47471) *
                C4745 +
            (C4912 * C4747 + C4913 * C4743 + C361 * C4748 + C362 * C47471) *
                C47440) *
               C47174 * C1421 +
           ((C4908 * C4747 + C4909 * C4743 + C6078 * C4748 + C6079 * C47471) *
                C4745 +
            (C4914 * C4747 + C4915 * C4743 + (C1435 - C1436) * C4748 +
             (C1437 - C1438) * C47471) *
                C47440) *
               C47174 * C1422 +
           ((C6076 * C4747 + C6077 * C4743 + (C5773 - C5772) * C4748 +
             (C5775 - C5774) * C47471) *
                C4745 +
            ((C1436 - C1435) * C4747 + (C1438 - C1437) * C4743 +
             (C47376 * C1168 - C113 * C1157) * C4748 +
             (C47376 * C1175 - C113 * C1169) * C47471) *
                C47440) *
               C47174 * C47463) *
              C47139)) /
            (p * q * std::sqrt(p + q));
    d2ee[46] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C47376 * C122 - C113 * C115) * C4747 +
              (C47376 * C136 - C113 * C123) * C4743 + (C4896 - C4897) * C4748 +
              (C4898 - C4899) * C47471) *
                 C4745 +
             ((C144 - C145) * C4747 + (C146 - C147) * C4743 + C4900 * C4748 +
              C4901 * C47471) *
                 C47440) *
                C47422 +
            (((C113 * C481 - C47376 * C491) * C4747 +
              (C113 * C492 - C47376 * C511) * C4743 + (C5518 - C5519) * C4748 +
              (C5520 - C5521) * C47471) *
                 C4745 +
             ((C522 - C523) * C4747 + (C524 - C525) * C4743 + C5522 * C4748 +
              C5523 * C47471) *
                 C47440) *
                C47261) *
               C47421 +
           ((((C4897 - C4896) * C4747 + (C4899 - C4898) * C4743 +
              (C4902 - C4903) * C4748 + (C4904 - C4905) * C47471) *
                 C4745 +
             (C4906 * C4747 + C4907 * C4743 + C4908 * C4748 + C4909 * C47471) *
                 C47440) *
                C47422 +
            (((C5519 - C5518) * C4747 + (C5521 - C5520) * C4743 +
              (C47376 * C1301 - C113 * C1289) * C4748 +
              (C47376 * C1316 - C113 * C1302) * C47471) *
                 C4745 +
             (C5524 * C4747 + C5525 * C4743 + (C1590 - C1589) * C4748 +
              (C1592 - C1591) * C47471) *
                 C47440) *
                C47261) *
               C47219) *
              C291 +
          (((((C145 - C144) * C4747 + (C147 - C146) * C4743 + C4906 * C4748 +
              C4907 * C47471) *
                 C4745 +
             ((C149 - C148) * C4747 + (C151 - C150) * C4743 + C359 * C4748 +
              C360 * C47471) *
                 C47440) *
                C47422 +
            (((C523 - C522) * C4747 + (C525 - C524) * C4743 + C5524 * C4748 +
              C5525 * C47471) *
                 C4745 +
             ((C527 - C526) * C4747 + (C529 - C528) * C4743 + C964 * C4748 +
              C965 * C47471) *
                 C47440) *
                C47261) *
               C47421 +
           (((C4900 * C4747 + C4901 * C4743 + C4910 * C4748 + C4911 * C47471) *
                 C4745 +
             (C4912 * C4747 + C4913 * C4743 + C361 * C4748 + C362 * C47471) *
                 C47440) *
                C47422 +
            ((C5522 * C4747 + C5523 * C4743 + (C1589 - C1590) * C4748 +
              (C1591 - C1592) * C47471) *
                 C4745 +
             (C5526 * C4747 + C5527 * C4743 + (C1593 - C1594) * C4748 +
              (C1595 - C1596) * C47471) *
                 C47440) *
                C47261) *
               C47219) *
              C292 +
          ((((C164 * C4747 + C165 * C4743 + C4912 * C4748 + C4913 * C47471) *
                 C4745 +
             ((C153 - C152) * C4747 + (C155 - C154) * C4743 + C664 * C4748 +
              C665 * C47471) *
                 C47440) *
                C47422 +
            ((C546 * C4747 + C547 * C4743 + C5526 * C4748 + C5527 * C47471) *
                 C4745 +
             ((C539 - C538) * C4747 + (C541 - C540) * C4743 +
              (C960 - C961) * C4748 + (C962 - C963) * C47471) *
                 C47440) *
                C47261) *
               C47421 +
           (((C359 * C4747 + C360 * C4743 + C4914 * C4748 + C4915 * C47471) *
                 C4745 +
             (C5192 * C4747 + C5193 * C4743 + (C355 - C356) * C4748 +
              (C357 - C358) * C47471) *
                 C47440) *
                C47422 +
            ((C964 * C4747 + C965 * C4743 + (C1594 - C1593) * C4748 +
              (C1596 - C1595) * C47471) *
                 C4745 +
             ((C961 - C960) * C4747 + (C963 - C962) * C4743 +
              (C47376 * C1585 - C113 * C1584) * C4748 +
              (C47376 * C1587 - C113 * C1586) * C47471) *
                 C47440) *
                C47261) *
               C47219) *
              C47447)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C47376 * C122 - C113 * C115) * C4747 +
             (C47376 * C136 - C113 * C123) * C4743 + (C4896 - C4897) * C4748 +
             (C4898 - C4899) * C47471) *
                C4745 +
            ((C144 - C145) * C4747 + (C146 - C147) * C4743 + C4900 * C4748 +
             C4901 * C47471) *
                C47440) *
               C47422 +
           (((C113 * C481 - C47376 * C491) * C4747 +
             (C113 * C492 - C47376 * C511) * C4743 + (C5518 - C5519) * C4748 +
             (C5520 - C5521) * C47471) *
                C4745 +
            ((C522 - C523) * C4747 + (C524 - C525) * C4743 + C5522 * C4748 +
             C5523 * C47471) *
                C47440) *
               C47261) *
              C1420 +
          ((((C4897 - C4896) * C4747 + (C4899 - C4898) * C4743 +
             (C4902 - C4903) * C4748 + (C4904 - C4905) * C47471) *
                C4745 +
            (C4906 * C4747 + C4907 * C4743 + C4908 * C4748 + C4909 * C47471) *
                C47440) *
               C47422 +
           (((C5519 - C5518) * C4747 + (C5521 - C5520) * C4743 +
             (C5934 - C5935) * C4748 + (C5936 - C5937) * C47471) *
                C4745 +
            (C5524 * C4747 + C5525 * C4743 + C6274 * C4748 + C6275 * C47471) *
                C47440) *
               C47261) *
              C1421 +
          ((((C4903 - C4902) * C4747 + (C4905 - C4904) * C4743 +
             (C5764 - C5765) * C4748 + (C5766 - C5767) * C47471) *
                C4745 +
            (C4910 * C4747 + C4911 * C4743 + C6076 * C4748 + C6077 * C47471) *
                C47440) *
               C47422 +
           (((C5935 - C5934) * C4747 + (C5937 - C5936) * C4743 +
             (C6420 - C6421) * C4748 + (C6422 - C6423) * C47471) *
                C4745 +
            (C6276 * C4747 + C6277 * C4743 + (C6278 - C6279) * C4748 +
             (C6280 - C6281) * C47471) *
                C47440) *
               C47261) *
              C1422 +
          ((((C5765 - C5764) * C4747 + (C5767 - C5766) * C4743 +
             (C5768 - C5769) * C4748 + (C5770 - C5771) * C47471) *
                C4745 +
            (C6078 * C4747 + C6079 * C4743 + (C5772 - C5773) * C4748 +
             (C5774 - C5775) * C47471) *
                C47440) *
               C47422 +
           (((C6421 - C6420) * C4747 + (C6423 - C6422) * C4743 +
             (C47376 * C6413 - C113 * C6411) * C4748 +
             (C47376 * C6417 - C113 * C6414) * C47471) *
                C4745 +
            ((C6279 - C6278) * C4747 + (C6281 - C6280) * C4743 +
             (C47376 * C6415 - C113 * C6412) * C4748 +
             (C47376 * C6418 - C113 * C6416) * C47471) *
                C47440) *
               C47261) *
              C47463) *
         C47128) /
            (p * q * std::sqrt(p + q));
    d2ee[47] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C47376 * C122 - C113 * C115) * C4747 +
             (C47376 * C136 - C113 * C123) * C4743 + (C4896 - C4897) * C4748 +
             (C4898 - C4899) * C47471) *
                C4745 +
            ((C144 - C145) * C4747 + (C146 - C147) * C4743 + C4900 * C4748 +
             C4901 * C47471) *
                C47440) *
               C47174 * C47492 +
           (((C4897 - C4896) * C4747 + (C4899 - C4898) * C4743 +
             (C4902 - C4903) * C4748 + (C4904 - C4905) * C47471) *
                C4745 +
            (C4906 * C4747 + C4907 * C4743 + C4908 * C4748 + C4909 * C47471) *
                C47440) *
               C47174 * C47480 +
           (((C4903 - C4902) * C4747 + (C4905 - C4904) * C4743 +
             (C47376 * C1158 - C113 * C1152) * C4748 +
             (C47376 * C1170 - C113 * C1159) * C47471) *
                C4745 +
            (C4910 * C4747 + C4911 * C4743 + (C1432 - C1431) * C4748 +
             (C1434 - C1433) * C47471) *
                C47440) *
               C47174 * C47453) *
              C291 +
          ((((C145 - C144) * C4747 + (C147 - C146) * C4743 + C4906 * C4748 +
             C4907 * C47471) *
                C4745 +
            ((C149 - C148) * C4747 + (C151 - C150) * C4743 + C359 * C4748 +
             C360 * C47471) *
                C47440) *
               C47174 * C47492 +
           ((C4900 * C4747 + C4901 * C4743 + C4910 * C4748 + C4911 * C47471) *
                C4745 +
            (C4912 * C4747 + C4913 * C4743 + C361 * C4748 + C362 * C47471) *
                C47440) *
               C47174 * C47480 +
           ((C4908 * C4747 + C4909 * C4743 + (C1431 - C1432) * C4748 +
             (C1433 - C1434) * C47471) *
                C4745 +
            (C4914 * C4747 + C4915 * C4743 + (C1435 - C1436) * C4748 +
             (C1437 - C1438) * C47471) *
                C47440) *
               C47174 * C47453) *
              C292 +
          (((C164 * C4747 + C165 * C4743 + C4912 * C4748 + C4913 * C47471) *
                C4745 +
            ((C153 - C152) * C4747 + (C155 - C154) * C4743 + C664 * C4748 +
             C665 * C47471) *
                C47440) *
               C47174 * C47492 +
           ((C359 * C4747 + C360 * C4743 + C4914 * C4748 + C4915 * C47471) *
                C4745 +
            ((C352 - C351) * C4747 + (C354 - C353) * C4743 +
             (C355 - C356) * C4748 + (C357 - C358) * C47471) *
                C47440) *
               C47174 * C47480 +
           ((C361 * C4747 + C362 * C4743 + (C1436 - C1435) * C4748 +
             (C1438 - C1437) * C47471) *
                C4745 +
            ((C356 - C355) * C4747 + (C358 - C357) * C4743 +
             (C47376 * C1427 - C113 * C1426) * C4748 +
             (C47376 * C1429 - C113 * C1428) * C47471) *
                C47440) *
               C47174 * C47453) *
              C47447)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C47376 * C122 - C113 * C115) * C4747 +
            (C47376 * C136 - C113 * C123) * C4743 +
            (C47376 * C304 - C113 * C294) * C4748 +
            (C47376 * C324 - C113 * C305) * C47471) *
               C4745 +
           ((C144 - C145) * C4747 + (C146 - C147) * C4743 +
            (C336 - C335) * C4748 + (C338 - C337) * C47471) *
               C47440) *
              C47174 * C47156 * C108 +
          (((C145 - C144) * C4747 + (C147 - C146) * C4743 +
            (C335 - C336) * C4748 + (C337 - C338) * C47471) *
               C4745 +
           ((C149 - C148) * C4747 + (C151 - C150) * C4743 + C359 * C4748 +
            C360 * C47471) *
               C47440) *
              C47174 * C47156 * C109 +
          ((C164 * C4747 + C165 * C4743 + (C340 - C339) * C4748 +
            (C342 - C341) * C47471) *
               C4745 +
           ((C153 - C152) * C4747 + (C155 - C154) * C4743 + C664 * C4748 +
            C665 * C47471) *
               C47440) *
              C47174 * C47156 * C110 +
          ((C166 * C4747 + C167 * C4743 + (C352 - C351) * C4748 +
            (C354 - C353) * C47471) *
               C4745 +
           ((C157 - C156) * C4747 + (C159 - C158) * C4743 +
            (C666 - C667) * C4748 + (C668 - C669) * C47471) *
               C47440) *
              C47174 * C47156 * C111 +
          ((C168 * C4747 + C169 * C4743 + (C667 - C666) * C4748 +
            (C669 - C668) * C47471) *
               C4745 +
           ((C161 - C160) * C4747 + (C163 - C162) * C4743 +
            (C47376 * C660 - C113 * C659) * C4748 +
            (C47376 * C662 - C113 * C661) * C47471) *
               C47440) *
              C47174 * C47156 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C47376 * C122 - C113 * C115) * C4747 +
             (C47376 * C136 - C113 * C123) * C4743 + (C4896 - C4897) * C4748 +
             (C4898 - C4899) * C47471) *
                C4745 +
            ((C144 - C145) * C4747 + (C146 - C147) * C4743 + C4900 * C4748 +
             C4901 * C47471) *
                C47440) *
               C47493 +
           (((C113 * C481 - C47376 * C491) * C4747 +
             (C113 * C492 - C47376 * C511) * C4743 +
             (C113 * C931 - C47376 * C936) * C4748 +
             (C113 * C937 - C47376 * C946) * C47471) *
                C4745 +
            ((C522 - C523) * C4747 + (C524 - C525) * C4743 +
             (C953 - C952) * C4748 + (C955 - C954) * C47471) *
                C47440) *
               C47482 +
           (((C47376 * C497 - C113 * C484) * C4747 +
             (C47376 * C514 - C113 * C498) * C4743 +
             (C47376 * C1295 - C113 * C1286) * C4748 +
             (C47376 * C1313 - C113 * C1296) * C47471) *
                C4745 +
            ((C530 - C531) * C4747 + (C532 - C533) * C4743 +
             (C2172 - C2171) * C4748 + (C2174 - C2173) * C47471) *
                C47440) *
               C47456) *
              C47156 * C291 +
          ((((C145 - C144) * C4747 + (C147 - C146) * C4743 + C4906 * C4748 +
             C4907 * C47471) *
                C4745 +
            ((C149 - C148) * C4747 + (C151 - C150) * C4743 + C359 * C4748 +
             C360 * C47471) *
                C47440) *
               C47493 +
           (((C523 - C522) * C4747 + (C525 - C524) * C4743 +
             (C952 - C953) * C4748 + (C954 - C955) * C47471) *
                C4745 +
            ((C527 - C526) * C4747 + (C529 - C528) * C4743 + C964 * C4748 +
             C965 * C47471) *
                C47440) *
               C47482 +
           (((C531 - C530) * C4747 + (C533 - C532) * C4743 +
             (C2171 - C2172) * C4748 + (C2173 - C2174) * C47471) *
                C4745 +
            ((C535 - C534) * C4747 + (C537 - C536) * C4743 +
             (C2175 - C2176) * C4748 + (C2177 - C2178) * C47471) *
                C47440) *
               C47456) *
              C47156 * C292 +
          (((C164 * C4747 + C165 * C4743 + C4912 * C4748 + C4913 * C47471) *
                C4745 +
            ((C153 - C152) * C4747 + (C155 - C154) * C4743 + C664 * C4748 +
             C665 * C47471) *
                C47440) *
               C47493 +
           ((C546 * C4747 + C547 * C4743 + (C957 - C956) * C4748 +
             (C959 - C958) * C47471) *
                C4745 +
            ((C539 - C538) * C4747 + (C541 - C540) * C4743 +
             (C960 - C961) * C4748 + (C962 - C963) * C47471) *
                C47440) *
               C47482 +
           ((C548 * C4747 + C549 * C4743 + (C2176 - C2175) * C4748 +
             (C2178 - C2177) * C47471) *
                C4745 +
            ((C543 - C542) * C4747 + (C545 - C544) * C4743 +
             (C47376 * C2167 - C113 * C2166) * C4748 +
             (C47376 * C2169 - C113 * C2168) * C47471) *
                C47440) *
               C47456) *
              C47156 * C47447)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C47376 * C122 - C113 * C115) * C4747 +
             (C47376 * C136 - C113 * C123) * C4743 + (C4896 - C4897) * C4748 +
             (C4898 - C4899) * C47471) *
                C4745 +
            ((C144 - C145) * C4747 + (C146 - C147) * C4743 + C4900 * C4748 +
             C4901 * C47471) *
                C47440) *
               C47174 * C1078 +
           (((C4897 - C4896) * C4747 + (C4899 - C4898) * C4743 +
             (C4902 - C4903) * C4748 + (C4904 - C4905) * C47471) *
                C4745 +
            (C4906 * C4747 + C4907 * C4743 + C4908 * C4748 + C4909 * C47471) *
                C47440) *
               C47174 * C1079 +
           (((C4903 - C4902) * C4747 + (C4905 - C4904) * C4743 +
             (C47376 * C1158 - C113 * C1152) * C4748 +
             (C47376 * C1170 - C113 * C1159) * C47471) *
                C4745 +
            (C4910 * C4747 + C4911 * C4743 + (C1432 - C1431) * C4748 +
             (C1434 - C1433) * C47471) *
                C47440) *
               C47174 * C47453) *
              C47489 +
          ((((C145 - C144) * C4747 + (C147 - C146) * C4743 + C4906 * C4748 +
             C4907 * C47471) *
                C4745 +
            ((C149 - C148) * C4747 + (C151 - C150) * C4743 + C359 * C4748 +
             C360 * C47471) *
                C47440) *
               C47174 * C1078 +
           ((C4900 * C4747 + C4901 * C4743 + C4910 * C4748 + C4911 * C47471) *
                C4745 +
            (C4912 * C4747 + C4913 * C4743 + C361 * C4748 + C362 * C47471) *
                C47440) *
               C47174 * C1079 +
           ((C4908 * C4747 + C4909 * C4743 + (C1431 - C1432) * C4748 +
             (C1433 - C1434) * C47471) *
                C4745 +
            (C4914 * C4747 + C4915 * C4743 + (C1435 - C1436) * C4748 +
             (C1437 - C1438) * C47471) *
                C47440) *
               C47174 * C47453) *
              C47476 +
          (((C164 * C4747 + C165 * C4743 + C4912 * C4748 + C4913 * C47471) *
                C4745 +
            ((C153 - C152) * C4747 + (C155 - C154) * C4743 + C664 * C4748 +
             C665 * C47471) *
                C47440) *
               C47174 * C1078 +
           ((C359 * C4747 + C360 * C4743 + C4914 * C4748 + C4915 * C47471) *
                C4745 +
            (C5192 * C4747 + C5193 * C4743 + (C355 - C356) * C4748 +
             (C357 - C358) * C47471) *
                C47440) *
               C47174 * C1079 +
           ((C361 * C4747 + C362 * C4743 + (C1436 - C1435) * C4748 +
             (C1438 - C1437) * C47471) *
                C4745 +
            ((C356 - C355) * C4747 + (C358 - C357) * C4743 +
             (C47376 * C1427 - C113 * C1426) * C4748 +
             (C47376 * C1429 - C113 * C1428) * C47471) *
                C47440) *
               C47174 * C47453) *
              C47447)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C47376 * C122 - C113 * C115) * C4747 +
            (C47376 * C136 - C113 * C123) * C4743 + (C4896 - C4897) * C4748 +
            (C4898 - C4899) * C47471) *
               C4745 +
           ((C144 - C145) * C4747 + (C146 - C147) * C4743 + C4900 * C4748 +
            C4901 * C47471) *
               C47440) *
              C47174 * C1146 +
          (((C4897 - C4896) * C4747 + (C4899 - C4898) * C4743 +
            (C4902 - C4903) * C4748 + (C4904 - C4905) * C47471) *
               C4745 +
           (C4906 * C4747 + C4907 * C4743 + C4908 * C4748 + C4909 * C47471) *
               C47440) *
              C47174 * C1147 +
          (((C4903 - C4902) * C4747 + (C4905 - C4904) * C4743 +
            (C5764 - C5765) * C4748 + (C5766 - C5767) * C47471) *
               C4745 +
           (C4910 * C4747 + C4911 * C4743 + (C1432 - C1431) * C4748 +
            (C1434 - C1433) * C47471) *
               C47440) *
              C47174 * C1148 +
          (((C5765 - C5764) * C4747 + (C5767 - C5766) * C4743 +
            (C5768 - C5769) * C4748 + (C5770 - C5771) * C47471) *
               C4745 +
           ((C1431 - C1432) * C4747 + (C1433 - C1434) * C4743 +
            (C5772 - C5773) * C4748 + (C5774 - C5775) * C47471) *
               C47440) *
              C47174 * C1149 +
          (((C5769 - C5768) * C4747 + (C5771 - C5770) * C4743 +
            (C47376 * C5757 - C113 * C5755) * C4748 +
            (C47376 * C5761 - C113 * C5758) * C47471) *
               C4745 +
           ((C5773 - C5772) * C4747 + (C5775 - C5774) * C4743 +
            (C47376 * C5759 - C113 * C5756) * C4748 +
            (C47376 * C5762 - C113 * C5760) * C47471) *
               C47440) *
              C47174 * C1150) *
         C47128) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C47376 * C122 - C113 * C115) * C4747 +
             (C47376 * C136 - C113 * C123) * C4743 + (C4896 - C4897) * C4748 +
             (C4898 - C4899) * C47471) *
                C4745 +
            ((C144 - C145) * C4747 + (C146 - C147) * C4743 + C4900 * C4748 +
             C4901 * C47471) *
                C47440) *
               C47493 +
           (((C113 * C481 - C47376 * C491) * C4747 +
             (C113 * C492 - C47376 * C511) * C4743 + (C5518 - C5519) * C4748 +
             (C5520 - C5521) * C47471) *
                C4745 +
            ((C522 - C523) * C4747 + (C524 - C525) * C4743 + C5522 * C4748 +
             C5523 * C47471) *
                C47440) *
               C47482 +
           (((C47376 * C497 - C113 * C484) * C4747 +
             (C47376 * C514 - C113 * C498) * C4743 + (C5930 - C5931) * C4748 +
             (C5932 - C5933) * C47471) *
                C4745 +
            ((C530 - C531) * C4747 + (C532 - C533) * C4743 +
             (C2172 - C2171) * C4748 + (C2174 - C2173) * C47471) *
                C47440) *
               C47456) *
              C1078 +
          ((((C4897 - C4896) * C4747 + (C4899 - C4898) * C4743 +
             (C4902 - C4903) * C4748 + (C4904 - C4905) * C47471) *
                C4745 +
            (C4906 * C4747 + C4907 * C4743 + C4908 * C4748 + C4909 * C47471) *
                C47440) *
               C47493 +
           (((C5519 - C5518) * C4747 + (C5521 - C5520) * C4743 +
             (C5934 - C5935) * C4748 + (C5936 - C5937) * C47471) *
                C4745 +
            (C5524 * C4747 + C5525 * C4743 + (C1590 - C1589) * C4748 +
             (C1592 - C1591) * C47471) *
                C47440) *
               C47482 +
           (((C5931 - C5930) * C4747 + (C5933 - C5932) * C4743 +
             (C5938 - C5939) * C4748 + (C5940 - C5941) * C47471) *
                C4745 +
            ((C2171 - C2172) * C4747 + (C2173 - C2174) * C4743 +
             (C5942 - C5943) * C4748 + (C5944 - C5945) * C47471) *
                C47440) *
               C47456) *
              C1079 +
          ((((C4903 - C4902) * C4747 + (C4905 - C4904) * C4743 +
             (C5764 - C5765) * C4748 + (C5766 - C5767) * C47471) *
                C4745 +
            (C4910 * C4747 + C4911 * C4743 + (C1432 - C1431) * C4748 +
             (C1434 - C1433) * C47471) *
                C47440) *
               C47493 +
           (((C5935 - C5934) * C4747 + (C5937 - C5936) * C4743 +
             (C113 * C1694 - C47376 * C1697) * C4748 +
             (C113 * C1698 - C47376 * C1703) * C47471) *
                C4745 +
            ((C1589 - C1590) * C4747 + (C1591 - C1592) * C4743 +
             (C113 * C1695 - C47376 * C1699) * C4748 +
             (C113 * C1700 - C47376 * C1704) * C47471) *
                C47440) *
               C47482 +
           (((C5939 - C5938) * C4747 + (C5941 - C5940) * C4743 +
             (C47376 * C5923 - C113 * C5921) * C4748 +
             (C47376 * C5927 - C113 * C5924) * C47471) *
                C4745 +
            ((C5943 - C5942) * C4747 + (C5945 - C5944) * C4743 +
             (C47376 * C5925 - C113 * C5922) * C4748 +
             (C47376 * C5928 - C113 * C5926) * C47471) *
                C47440) *
               C47456) *
              C47453) *
         C47128) /
            (p * q * std::sqrt(p + q));
    d2ee[48] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C47376 * C122 - C113 * C115) * C4747 +
             (C47376 * C136 - C113 * C123) * C4743 + (C4896 - C4897) * C4748 +
             (C4898 - C4899) * C47471) *
                C4745 +
            ((C144 - C145) * C4747 + (C146 - C147) * C4743 + C4900 * C4748 +
             C4901 * C47471) *
                C47440) *
               C47422 +
           (((C113 * C481 - C47376 * C491) * C4747 +
             (C113 * C492 - C47376 * C511) * C4743 +
             (C113 * C931 - C47376 * C936) * C4748 +
             (C113 * C937 - C47376 * C946) * C47471) *
                C4745 +
            ((C522 - C523) * C4747 + (C524 - C525) * C4743 +
             (C953 - C952) * C4748 + (C955 - C954) * C47471) *
                C47440) *
               C47261) *
              C47156 * C655 +
          ((((C145 - C144) * C4747 + (C147 - C146) * C4743 + C4906 * C4748 +
             C4907 * C47471) *
                C4745 +
            ((C149 - C148) * C4747 + (C151 - C150) * C4743 + C359 * C4748 +
             C360 * C47471) *
                C47440) *
               C47422 +
           (((C523 - C522) * C4747 + (C525 - C524) * C4743 +
             (C952 - C953) * C4748 + (C954 - C955) * C47471) *
                C4745 +
            ((C527 - C526) * C4747 + (C529 - C528) * C4743 + C964 * C4748 +
             C965 * C47471) *
                C47440) *
               C47261) *
              C47156 * C656 +
          (((C164 * C4747 + C165 * C4743 + C4912 * C4748 + C4913 * C47471) *
                C4745 +
            ((C153 - C152) * C4747 + (C155 - C154) * C4743 + C664 * C4748 +
             C665 * C47471) *
                C47440) *
               C47422 +
           ((C546 * C4747 + C547 * C4743 + (C957 - C956) * C4748 +
             (C959 - C958) * C47471) *
                C4745 +
            ((C539 - C538) * C4747 + (C541 - C540) * C4743 +
             (C960 - C961) * C4748 + (C962 - C963) * C47471) *
                C47440) *
               C47261) *
              C47156 * C657 +
          (((C166 * C4747 + C167 * C4743 + C5192 * C4748 + C5193 * C47471) *
                C4745 +
            ((C157 - C156) * C4747 + (C159 - C158) * C4743 +
             (C666 - C667) * C4748 + (C668 - C669) * C47471) *
                C47440) *
               C47422 +
           ((C777 * C4747 + C778 * C4743 + (C961 - C960) * C4748 +
             (C963 - C962) * C47471) *
                C4745 +
            ((C780 - C779) * C4747 + (C782 - C781) * C4743 +
             (C47376 * C944 - C113 * C935) * C4748 +
             (C47376 * C950 - C113 * C945) * C47471) *
                C47440) *
               C47261) *
              C47156 * C47457)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C47376 * C122 - C113 * C115) * C4747 +
              (C47376 * C136 - C113 * C123) * C4743 + (C4896 - C4897) * C4748 +
              (C4898 - C4899) * C47471) *
                 C4745 +
             ((C144 - C145) * C4747 + (C146 - C147) * C4743 + C4900 * C4748 +
              C4901 * C47471) *
                 C47440) *
                C47422 +
            (((C113 * C481 - C47376 * C491) * C4747 +
              (C113 * C492 - C47376 * C511) * C4743 + (C5518 - C5519) * C4748 +
              (C5520 - C5521) * C47471) *
                 C4745 +
             ((C522 - C523) * C4747 + (C524 - C525) * C4743 + C5522 * C4748 +
              C5523 * C47471) *
                 C47440) *
                C47261) *
               C1078 +
           ((((C4897 - C4896) * C4747 + (C4899 - C4898) * C4743 +
              (C4902 - C4903) * C4748 + (C4904 - C4905) * C47471) *
                 C4745 +
             (C4906 * C4747 + C4907 * C4743 + C4908 * C4748 + C4909 * C47471) *
                 C47440) *
                C47422 +
            (((C5519 - C5518) * C4747 + (C5521 - C5520) * C4743 +
              (C5934 - C5935) * C4748 + (C5936 - C5937) * C47471) *
                 C4745 +
             (C5524 * C4747 + C5525 * C4743 + C6274 * C4748 + C6275 * C47471) *
                 C47440) *
                C47261) *
               C1079 +
           ((((C4903 - C4902) * C4747 + (C4905 - C4904) * C4743 +
              (C5764 - C5765) * C4748 + (C5766 - C5767) * C47471) *
                 C4745 +
             (C4910 * C4747 + C4911 * C4743 + C6076 * C4748 + C6077 * C47471) *
                 C47440) *
                C47422 +
            (((C5935 - C5934) * C4747 + (C5937 - C5936) * C4743 +
              (C113 * C1694 - C47376 * C1697) * C4748 +
              (C113 * C1698 - C47376 * C1703) * C47471) *
                 C4745 +
             (C6276 * C4747 + C6277 * C4743 + (C6278 - C6279) * C4748 +
              (C6280 - C6281) * C47471) *
                 C47440) *
                C47261) *
               C47453) *
              C47407 +
          (((((C145 - C144) * C4747 + (C147 - C146) * C4743 + C4906 * C4748 +
              C4907 * C47471) *
                 C4745 +
             ((C149 - C148) * C4747 + (C151 - C150) * C4743 + C359 * C4748 +
              C360 * C47471) *
                 C47440) *
                C47422 +
            (((C523 - C522) * C4747 + (C525 - C524) * C4743 + C5524 * C4748 +
              C5525 * C47471) *
                 C4745 +
             ((C527 - C526) * C4747 + (C529 - C528) * C4743 + C964 * C4748 +
              C965 * C47471) *
                 C47440) *
                C47261) *
               C1078 +
           (((C4900 * C4747 + C4901 * C4743 + C4910 * C4748 + C4911 * C47471) *
                 C4745 +
             (C4912 * C4747 + C4913 * C4743 + C361 * C4748 + C362 * C47471) *
                 C47440) *
                C47422 +
            ((C5522 * C4747 + C5523 * C4743 + C6276 * C4748 + C6277 * C47471) *
                 C4745 +
             (C5526 * C4747 + C5527 * C4743 + (C1593 - C1594) * C4748 +
              (C1595 - C1596) * C47471) *
                 C47440) *
                C47261) *
               C1079 +
           (((C4908 * C4747 + C4909 * C4743 + C6078 * C4748 + C6079 * C47471) *
                 C4745 +
             (C4914 * C4747 + C4915 * C4743 + (C1435 - C1436) * C4748 +
              (C1437 - C1438) * C47471) *
                 C47440) *
                C47422 +
            ((C6274 * C4747 + C6275 * C4743 + (C6279 - C6278) * C4748 +
              (C6281 - C6280) * C47471) *
                 C4745 +
             ((C1594 - C1593) * C4747 + (C1596 - C1595) * C4743 +
              (C47376 * C1701 - C113 * C1696) * C4748 +
              (C47376 * C1705 - C113 * C1702) * C47471) *
                 C47440) *
                C47261) *
               C47453) *
              C47139)) /
            (p * q * std::sqrt(p + q));
    d2ee[49] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C47376 * C122 - C113 * C115) * C4747 +
            (C47376 * C136 - C113 * C123) * C4743 +
            (C47376 * C304 - C113 * C294) * C4748 +
            (C47376 * C324 - C113 * C305) * C47471) *
               C4745 +
           ((C144 - C145) * C4747 + (C146 - C147) * C4743 +
            (C336 - C335) * C4748 + (C338 - C337) * C47471) *
               C47440) *
              C47174 * C47156 * C108 +
          (((C145 - C144) * C4747 + (C147 - C146) * C4743 +
            (C335 - C336) * C4748 + (C337 - C338) * C47471) *
               C4745 +
           ((C149 - C148) * C4747 + (C151 - C150) * C4743 + C359 * C4748 +
            C360 * C47471) *
               C47440) *
              C47174 * C47156 * C109 +
          ((C164 * C4747 + C165 * C4743 + (C340 - C339) * C4748 +
            (C342 - C341) * C47471) *
               C4745 +
           ((C153 - C152) * C4747 + (C155 - C154) * C4743 + C664 * C4748 +
            C665 * C47471) *
               C47440) *
              C47174 * C47156 * C110 +
          ((C166 * C4747 + C167 * C4743 + (C352 - C351) * C4748 +
            (C354 - C353) * C47471) *
               C4745 +
           ((C157 - C156) * C4747 + (C159 - C158) * C4743 +
            (C666 - C667) * C4748 + (C668 - C669) * C47471) *
               C47440) *
              C47174 * C47156 * C111 +
          ((C168 * C4747 + C169 * C4743 + (C667 - C666) * C4748 +
            (C669 - C668) * C47471) *
               C4745 +
           ((C161 - C160) * C4747 + (C163 - C162) * C4743 +
            (C47376 * C660 - C113 * C659) * C4748 +
            (C47376 * C662 - C113 * C661) * C47471) *
               C47440) *
              C47174 * C47156 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C47376 * C122 - C113 * C115) * C4747 +
             (C47376 * C136 - C113 * C123) * C4743 + (C4896 - C4897) * C4748 +
             (C4898 - C4899) * C47471) *
                C4745 +
            ((C144 - C145) * C4747 + (C146 - C147) * C4743 + C4900 * C4748 +
             C4901 * C47471) *
                C47440) *
               C47174 * C47492 +
           (((C4897 - C4896) * C4747 + (C4899 - C4898) * C4743 +
             (C4902 - C4903) * C4748 + (C4904 - C4905) * C47471) *
                C4745 +
            (C4906 * C4747 + C4907 * C4743 + C4908 * C4748 + C4909 * C47471) *
                C47440) *
               C47174 * C47480 +
           (((C4903 - C4902) * C4747 + (C4905 - C4904) * C4743 +
             (C47376 * C1158 - C113 * C1152) * C4748 +
             (C47376 * C1170 - C113 * C1159) * C47471) *
                C4745 +
            (C4910 * C4747 + C4911 * C4743 + (C1432 - C1431) * C4748 +
             (C1434 - C1433) * C47471) *
                C47440) *
               C47174 * C47453) *
              C291 +
          ((((C145 - C144) * C4747 + (C147 - C146) * C4743 + C4906 * C4748 +
             C4907 * C47471) *
                C4745 +
            ((C149 - C148) * C4747 + (C151 - C150) * C4743 + C359 * C4748 +
             C360 * C47471) *
                C47440) *
               C47174 * C47492 +
           ((C4900 * C4747 + C4901 * C4743 + C4910 * C4748 + C4911 * C47471) *
                C4745 +
            (C4912 * C4747 + C4913 * C4743 + C361 * C4748 + C362 * C47471) *
                C47440) *
               C47174 * C47480 +
           ((C4908 * C4747 + C4909 * C4743 + (C1431 - C1432) * C4748 +
             (C1433 - C1434) * C47471) *
                C4745 +
            (C4914 * C4747 + C4915 * C4743 + (C1435 - C1436) * C4748 +
             (C1437 - C1438) * C47471) *
                C47440) *
               C47174 * C47453) *
              C292 +
          (((C164 * C4747 + C165 * C4743 + C4912 * C4748 + C4913 * C47471) *
                C4745 +
            ((C153 - C152) * C4747 + (C155 - C154) * C4743 + C664 * C4748 +
             C665 * C47471) *
                C47440) *
               C47174 * C47492 +
           ((C359 * C4747 + C360 * C4743 + C4914 * C4748 + C4915 * C47471) *
                C4745 +
            ((C352 - C351) * C4747 + (C354 - C353) * C4743 +
             (C355 - C356) * C4748 + (C357 - C358) * C47471) *
                C47440) *
               C47174 * C47480 +
           ((C361 * C4747 + C362 * C4743 + (C1436 - C1435) * C4748 +
             (C1438 - C1437) * C47471) *
                C4745 +
            ((C356 - C355) * C4747 + (C358 - C357) * C4743 +
             (C47376 * C1427 - C113 * C1426) * C4748 +
             (C47376 * C1429 - C113 * C1428) * C47471) *
                C47440) *
               C47174 * C47453) *
              C47447)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C47376 * C122 - C113 * C115) * C4747 +
             (C47376 * C136 - C113 * C123) * C4743 + (C4896 - C4897) * C4748 +
             (C4898 - C4899) * C47471) *
                C4745 +
            ((C144 - C145) * C4747 + (C146 - C147) * C4743 + C4900 * C4748 +
             C4901 * C47471) *
                C47440) *
               C47174 * C1078 +
           (((C4897 - C4896) * C4747 + (C4899 - C4898) * C4743 +
             (C4902 - C4903) * C4748 + (C4904 - C4905) * C47471) *
                C4745 +
            (C4906 * C4747 + C4907 * C4743 + C4908 * C4748 + C4909 * C47471) *
                C47440) *
               C47174 * C1079 +
           (((C4903 - C4902) * C4747 + (C4905 - C4904) * C4743 +
             (C47376 * C1158 - C113 * C1152) * C4748 +
             (C47376 * C1170 - C113 * C1159) * C47471) *
                C4745 +
            (C4910 * C4747 + C4911 * C4743 + (C1432 - C1431) * C4748 +
             (C1434 - C1433) * C47471) *
                C47440) *
               C47174 * C47453) *
              C47489 +
          ((((C145 - C144) * C4747 + (C147 - C146) * C4743 + C4906 * C4748 +
             C4907 * C47471) *
                C4745 +
            ((C149 - C148) * C4747 + (C151 - C150) * C4743 + C359 * C4748 +
             C360 * C47471) *
                C47440) *
               C47174 * C1078 +
           ((C4900 * C4747 + C4901 * C4743 + C4910 * C4748 + C4911 * C47471) *
                C4745 +
            (C4912 * C4747 + C4913 * C4743 + C361 * C4748 + C362 * C47471) *
                C47440) *
               C47174 * C1079 +
           ((C4908 * C4747 + C4909 * C4743 + (C1431 - C1432) * C4748 +
             (C1433 - C1434) * C47471) *
                C4745 +
            (C4914 * C4747 + C4915 * C4743 + (C1435 - C1436) * C4748 +
             (C1437 - C1438) * C47471) *
                C47440) *
               C47174 * C47453) *
              C47476 +
          (((C164 * C4747 + C165 * C4743 + C4912 * C4748 + C4913 * C47471) *
                C4745 +
            ((C153 - C152) * C4747 + (C155 - C154) * C4743 + C664 * C4748 +
             C665 * C47471) *
                C47440) *
               C47174 * C1078 +
           ((C359 * C4747 + C360 * C4743 + C4914 * C4748 + C4915 * C47471) *
                C4745 +
            (C5192 * C4747 + C5193 * C4743 + (C355 - C356) * C4748 +
             (C357 - C358) * C47471) *
                C47440) *
               C47174 * C1079 +
           ((C361 * C4747 + C362 * C4743 + (C1436 - C1435) * C4748 +
             (C1438 - C1437) * C47471) *
                C4745 +
            ((C356 - C355) * C4747 + (C358 - C357) * C4743 +
             (C47376 * C1427 - C113 * C1426) * C4748 +
             (C47376 * C1429 - C113 * C1428) * C47471) *
                C47440) *
               C47174 * C47453) *
              C47447)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C47376 * C122 - C113 * C115) * C4747 +
            (C47376 * C136 - C113 * C123) * C4743 + (C4896 - C4897) * C4748 +
            (C4898 - C4899) * C47471) *
               C4745 +
           ((C144 - C145) * C4747 + (C146 - C147) * C4743 + C4900 * C4748 +
            C4901 * C47471) *
               C47440) *
              C47174 * C1146 +
          (((C4897 - C4896) * C4747 + (C4899 - C4898) * C4743 +
            (C4902 - C4903) * C4748 + (C4904 - C4905) * C47471) *
               C4745 +
           (C4906 * C4747 + C4907 * C4743 + C4908 * C4748 + C4909 * C47471) *
               C47440) *
              C47174 * C1147 +
          (((C4903 - C4902) * C4747 + (C4905 - C4904) * C4743 +
            (C5764 - C5765) * C4748 + (C5766 - C5767) * C47471) *
               C4745 +
           (C4910 * C4747 + C4911 * C4743 + (C1432 - C1431) * C4748 +
            (C1434 - C1433) * C47471) *
               C47440) *
              C47174 * C1148 +
          (((C5765 - C5764) * C4747 + (C5767 - C5766) * C4743 +
            (C5768 - C5769) * C4748 + (C5770 - C5771) * C47471) *
               C4745 +
           ((C1431 - C1432) * C4747 + (C1433 - C1434) * C4743 +
            (C5772 - C5773) * C4748 + (C5774 - C5775) * C47471) *
               C47440) *
              C47174 * C1149 +
          (((C5769 - C5768) * C4747 + (C5771 - C5770) * C4743 +
            (C47376 * C5757 - C113 * C5755) * C4748 +
            (C47376 * C5761 - C113 * C5758) * C47471) *
               C4745 +
           ((C5773 - C5772) * C4747 + (C5775 - C5774) * C4743 +
            (C47376 * C5759 - C113 * C5756) * C4748 +
            (C47376 * C5762 - C113 * C5760) * C47471) *
               C47440) *
              C47174 * C1150) *
         C47128) /
            (p * q * std::sqrt(p + q));
    d2ee[50] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C10325 * C122 - C10327 * C115 + C47473 * C491 - C10328 * C481) *
                 C114 +
             (C10325 * C136 - C10327 * C123 + C47473 * C511 - C10328 * C492) *
                 C47359) *
                C4745 +
            ((C10330 - C10331 + C10332 - C10333) * C114 +
             (C10334 - C10335 + C10336 - C10337) * C47359) *
                C47440) *
               C47174 * C47215 +
           (((C10327 * C294 - C10325 * C304 + C10328 * C931 - C47473 * C936) *
                 C114 +
             (C10327 * C305 - C10325 * C324 + C10328 * C937 - C47473 * C946) *
                 C47359) *
                C4745 +
            ((C10508 - C10509 + C10510 - C10511) * C114 +
             (C10512 - C10513 + C10514 - C10515) * C47359) *
                C47440) *
               C47174 * C47222 +
           (((C10325 * C310 - C10327 * C297 + C47473 * C1301 - C10328 * C1289) *
                 C114 +
             (C10325 * C327 - C10327 * C311 + C47473 * C1316 - C10328 * C1302) *
                 C47359) *
                C4745 +
            ((C10516 - C10517 + C10518 - C10519) * C114 +
             (C10520 - C10521 + C10522 - C10523) * C47359) *
                C47440) *
               C47174 * C2868) *
              C47133 +
          ((((C10331 - C10330 + C10333 - C10332) * C114 +
             (C10335 - C10334 + C10337 - C10336) * C47359) *
                C4745 +
            ((C10338 - C10339 + C10340 - C10341) * C114 +
             (C10342 - C10343 + C10344 - C10345) * C47359) *
                C47440) *
               C47174 * C47215 +
           (((C10509 - C10508 + C10511 - C10510) * C114 +
             (C10513 - C10512 + C10515 - C10514) * C47359) *
                C4745 +
            ((C10524 - C10525 + C10526 - C10527) * C114 +
             (C10528 - C10529 + C10530 - C10531) * C47359) *
                C47440) *
               C47174 * C47222 +
           (((C10517 - C10516 + C10519 - C10518) * C114 +
             (C10521 - C10520 + C10523 - C10522) * C47359) *
                C4745 +
            ((C10532 - C10533 + C10534 - C10535) * C114 +
             (C10536 - C10537 + C10538 - C10539) * C47359) *
                C47440) *
               C47174 * C2868) *
              C47142 +
          ((((C10339 - C10338 + C10341 - C10340) * C114 +
             (C10343 - C10342 + C10345 - C10344) * C47359) *
                C4745 +
            ((C10346 - C10347 + C10348 - C10349) * C114 +
             (C10350 - C10351 + C10352 - C10353) * C47359) *
                C47440) *
               C47174 * C47215 +
           (((C10525 - C10524 + C10527 - C10526) * C114 +
             (C10529 - C10528 + C10531 - C10530) * C47359) *
                C4745 +
            ((C10848 - C10849 + C10850 - C10851) * C114 +
             (C10852 - C10853 + C10854 - C10855) * C47359) *
                C47440) *
               C47174 * C47222 +
           (((C10533 - C10532 + C10535 - C10534) * C114 +
             (C10537 - C10536 + C10539 - C10538) * C47359) *
                C4745 +
            ((C10325 * C318 - C10327 * C301 + C47473 * C1585 - C10328 * C1584) *
                 C114 +
             (C10325 * C331 - C10327 * C319 + C47473 * C1587 - C10328 * C1586) *
                 C47359) *
                C47440) *
               C47174 * C2868) *
              C2871)) /
        (p * q * std::sqrt(p + q));
    d2ee[51] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C10325 * C122 - C10327 * C115 + C47473 * C491 - C10328 * C481) *
                  C114 +
              (C10325 * C136 - C10327 * C123 + C47473 * C511 - C10328 * C492) *
                  C47359) *
                 C4745 +
             ((C10330 - C10331 + C10332 - C10333) * C114 +
              (C10334 - C10335 + C10336 - C10337) * C47359) *
                 C47440) *
                C47422 +
            (((C10327 * C481 - C10325 * C491 + C10328 * C484 - C47473 * C497) *
                  C114 +
              (C10327 * C492 - C10325 * C511 + C10328 * C498 - C47473 * C514) *
                  C47359) *
                 C4745 +
             ((C10686 - C10687 + C10688 - C10689) * C114 +
              (C10690 - C10691 + C10692 - C10693) * C47359) *
                 C47440) *
                C47261) *
               C47215 +
           ((((C10327 * C294 - C10325 * C304 + C10328 * C931 - C47473 * C936) *
                  C114 +
              (C10327 * C305 - C10325 * C324 + C10328 * C937 - C47473 * C946) *
                  C47359) *
                 C4745 +
             ((C10508 - C10509 + C10510 - C10511) * C114 +
              (C10512 - C10513 + C10514 - C10515) * C47359) *
                 C47440) *
                C47422 +
            (((C10325 * C936 - C10327 * C931 + C47473 * C1295 -
               C10328 * C1286) *
                  C114 +
              (C10325 * C946 - C10327 * C937 + C47473 * C1313 -
               C10328 * C1296) *
                  C47359) *
                 C4745 +
             ((C11188 - C11189 + C11190 - C11191) * C114 +
              (C11192 - C11193 + C11194 - C11195) * C47359) *
                 C47440) *
                C47261) *
               C47222 +
           ((((C10325 * C310 - C10327 * C297 + C47473 * C1301 -
               C10328 * C1289) *
                  C114 +
              (C10325 * C327 - C10327 * C311 + C47473 * C1316 -
               C10328 * C1302) *
                  C47359) *
                 C4745 +
             ((C10516 - C10517 + C10518 - C10519) * C114 +
              (C10520 - C10521 + C10522 - C10523) * C47359) *
                 C47440) *
                C47422 +
            (((C10327 * C1289 - C10325 * C1301 + C10328 * C1292 -
               C47473 * C1307) *
                  C114 +
              (C10327 * C1302 - C10325 * C1316 + C10328 * C1308 -
               C47473 * C1319) *
                  C47359) *
                 C4745 +
             ((C11910 - C11911 + C11912 - C11913) * C114 +
              (C11914 - C11915 + C11916 - C11917) * C47359) *
                 C47440) *
                C47261) *
               C2868) *
              C2608 +
          (((((C10331 - C10330 + C10333 - C10332) * C114 +
              (C10335 - C10334 + C10337 - C10336) * C47359) *
                 C4745 +
             ((C10338 - C10339 + C10340 - C10341) * C114 +
              (C10342 - C10343 + C10344 - C10345) * C47359) *
                 C47440) *
                C47422 +
            (((C10687 - C10686 + C10689 - C10688) * C114 +
              (C10691 - C10690 + C10693 - C10692) * C47359) *
                 C4745 +
             ((C10702 - C10703 + C10704 - C10705) * C114 +
              (C10706 - C10707 + C10708 - C10709) * C47359) *
                 C47440) *
                C47261) *
               C47215 +
           ((((C10509 - C10508 + C10511 - C10510) * C114 +
              (C10513 - C10512 + C10515 - C10514) * C47359) *
                 C4745 +
             ((C10524 - C10525 + C10526 - C10527) * C114 +
              (C10528 - C10529 + C10530 - C10531) * C47359) *
                 C47440) *
                C47422 +
            (((C11189 - C11188 + C11191 - C11190) * C114 +
              (C11193 - C11192 + C11195 - C11194) * C47359) *
                 C4745 +
             ((C11196 - C11197 + C11198 - C11199) * C114 +
              (C11200 - C11201 + C11202 - C11203) * C47359) *
                 C47440) *
                C47261) *
               C47222 +
           ((((C10517 - C10516 + C10519 - C10518) * C114 +
              (C10521 - C10520 + C10523 - C10522) * C47359) *
                 C4745 +
             ((C10532 - C10533 + C10534 - C10535) * C114 +
              (C10536 - C10537 + C10538 - C10539) * C47359) *
                 C47440) *
                C47422 +
            (((C11911 - C11910 + C11913 - C11912) * C114 +
              (C11915 - C11914 + C11917 - C11916) * C47359) *
                 C4745 +
             ((C10325 * C1305 - C10327 * C1291 + C47473 * C1311 -
               C10328 * C1294) *
                  C114 +
              (C10325 * C1318 - C10327 * C1306 + C47473 * C1321 -
               C10328 * C1312) *
                  C47359) *
                 C47440) *
                C47261) *
               C2868) *
              C47139)) /
        (p * q * std::sqrt(p + q));
    d2ee[52] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C10325 * C122 - C10327 * C115 + C47473 * C491 - C10328 * C481) *
                 C114 +
             (C10325 * C136 - C10327 * C123 + C47473 * C511 - C10328 * C492) *
                 C47359) *
                C4745 +
            ((C10330 - C10331 + C10332 - C10333) * C114 +
             (C10334 - C10335 + C10336 - C10337) * C47359) *
                C47440) *
               C47174 * C47499 +
           (((C10327 * C294 - C10325 * C304 + C10328 * C931 - C47473 * C936) *
                 C114 +
             (C10327 * C305 - C10325 * C324 + C10328 * C937 - C47473 * C946) *
                 C47359) *
                C4745 +
            ((C10508 - C10509 + C10510 - C10511) * C114 +
             (C10512 - C10513 + C10514 - C10515) * C47359) *
                C47440) *
               C47174 * C47495 +
           (((C10325 * C310 - C10327 * C297 + C47473 * C1301 - C10328 * C1289) *
                 C114 +
             (C10325 * C327 - C10327 * C311 + C47473 * C1316 - C10328 * C1302) *
                 C47359) *
                C4745 +
            ((C10516 - C10517 + C10518 - C10519) * C114 +
             (C10520 - C10521 + C10522 - C10523) * C47359) *
                C47440) *
               C47174 * C47485 +
           (((C10327 * C1152 - C10325 * C1158 + C10328 * C1694 -
              C47473 * C1697) *
                 C114 +
             (C10327 * C1159 - C10325 * C1170 + C10328 * C1698 -
              C47473 * C1703) *
                 C47359) *
                C4745 +
            ((C11708 - C11709 + C11710 - C11711) * C114 +
             (C11712 - C11713 + C11714 - C11715) * C47359) *
                C47440) *
               C47174 * C47463) *
              C2608 +
          ((((C10331 - C10330 + C10333 - C10332) * C114 +
             (C10335 - C10334 + C10337 - C10336) * C47359) *
                C4745 +
            ((C10338 - C10339 + C10340 - C10341) * C114 +
             (C10342 - C10343 + C10344 - C10345) * C47359) *
                C47440) *
               C47174 * C47499 +
           (((C10509 - C10508 + C10511 - C10510) * C114 +
             (C10513 - C10512 + C10515 - C10514) * C47359) *
                C4745 +
            ((C10524 - C10525 + C10526 - C10527) * C114 +
             (C10528 - C10529 + C10530 - C10531) * C47359) *
                C47440) *
               C47174 * C47495 +
           (((C10517 - C10516 + C10519 - C10518) * C114 +
             (C10521 - C10520 + C10523 - C10522) * C47359) *
                C4745 +
            ((C10532 - C10533 + C10534 - C10535) * C114 +
             (C10536 - C10537 + C10538 - C10539) * C47359) *
                C47440) *
               C47174 * C47485 +
           (((C11709 - C11708 + C11711 - C11710) * C114 +
             (C11713 - C11712 + C11715 - C11714) * C47359) *
                C4745 +
            ((C10325 * C1162 - C10327 * C1154 + C47473 * C1701 -
              C10328 * C1696) *
                 C114 +
             (C10325 * C1172 - C10327 * C1163 + C47473 * C1705 -
              C10328 * C1702) *
                 C47359) *
                C47440) *
               C47174 * C47463) *
              C47139)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C10325 * C122 - C10327 * C115 + C47473 * C491 - C10328 * C481) *
                 C114 +
             (C10325 * C136 - C10327 * C123 + C47473 * C511 - C10328 * C492) *
                 C47359) *
                C4745 +
            ((C10330 - C10331 + C10332 - C10333) * C114 +
             (C10334 - C10335 + C10336 - C10337) * C47359) *
                C47440) *
               C47174 * C2500 +
           (((C10327 * C294 - C10325 * C304 + C10328 * C931 - C47473 * C936) *
                 C114 +
             (C10327 * C305 - C10325 * C324 + C10328 * C937 - C47473 * C946) *
                 C47359) *
                C4745 +
            ((C10508 - C10509 + C10510 - C10511) * C114 +
             (C10512 - C10513 + C10514 - C10515) * C47359) *
                C47440) *
               C47174 * C47219) *
              C47498 +
          ((((C10331 - C10330 + C10333 - C10332) * C114 +
             (C10335 - C10334 + C10337 - C10336) * C47359) *
                C4745 +
            ((C10338 - C10339 + C10340 - C10341) * C114 +
             (C10342 - C10343 + C10344 - C10345) * C47359) *
                C47440) *
               C47174 * C2500 +
           (((C10509 - C10508 + C10511 - C10510) * C114 +
             (C10513 - C10512 + C10515 - C10514) * C47359) *
                C4745 +
            ((C10524 - C10525 + C10526 - C10527) * C114 +
             (C10528 - C10529 + C10530 - C10531) * C47359) *
                C47440) *
               C47174 * C47219) *
              C47491 +
          ((((C10339 - C10338 + C10341 - C10340) * C114 +
             (C10343 - C10342 + C10345 - C10344) * C47359) *
                C4745 +
            ((C10346 - C10347 + C10348 - C10349) * C114 +
             (C10350 - C10351 + C10352 - C10353) * C47359) *
                C47440) *
               C47174 * C2500 +
           (((C10525 - C10524 + C10527 - C10526) * C114 +
             (C10529 - C10528 + C10531 - C10530) * C47359) *
                C4745 +
            ((C10848 - C10849 + C10850 - C10851) * C114 +
             (C10852 - C10853 + C10854 - C10855) * C47359) *
                C47440) *
               C47174 * C47219) *
              C47478 +
          ((((C10347 - C10346 + C10349 - C10348) * C114 +
             (C10351 - C10350 + C10353 - C10352) * C47359) *
                C4745 +
            ((C10354 - C10355 + C10356 - C10357) * C114 +
             (C10358 - C10359 + C10360 - C10361) * C47359) *
                C47440) *
               C47174 * C2500 +
           (((C10849 - C10848 + C10851 - C10850) * C114 +
             (C10853 - C10852 + C10855 - C10854) * C47359) *
                C4745 +
            ((C10325 * C320 - C10327 * C302 + C47473 * C944 - C10328 * C935) *
                 C114 +
             (C10325 * C332 - C10327 * C321 + C47473 * C950 - C10328 * C945) *
                 C47359) *
                C47440) *
               C47174 * C47219) *
              C47457)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C10325 * C122 - C10327 * C115 + C47473 * C491 - C10328 * C481) *
                  C114 +
              (C10325 * C136 - C10327 * C123 + C47473 * C511 - C10328 * C492) *
                  C47359) *
                 C4745 +
             ((C10330 - C10331 + C10332 - C10333) * C114 +
              (C10334 - C10335 + C10336 - C10337) * C47359) *
                 C47440) *
                C47493 +
            (((C10327 * C481 - C10325 * C491 + C10328 * C484 - C47473 * C497) *
                  C114 +
              (C10327 * C492 - C10325 * C511 + C10328 * C498 - C47473 * C514) *
                  C47359) *
                 C4745 +
             ((C10686 - C10687 + C10688 - C10689) * C114 +
              (C10690 - C10691 + C10692 - C10693) * C47359) *
                 C47440) *
                C47482 +
            (((C10325 * C497 - C10327 * C484 + C47473 * C2002 -
               C10328 * C1996) *
                  C114 +
              (C10325 * C514 - C10327 * C498 + C47473 * C2014 -
               C10328 * C2003) *
                  C47359) *
                 C4745 +
             ((C10694 - C10695 + C10696 - C10697) * C114 +
              (C10698 - C10699 + C10700 - C10701) * C47359) *
                 C47440) *
                C47456) *
               C2500 +
           ((((C10327 * C294 - C10325 * C304 + C10328 * C931 - C47473 * C936) *
                  C114 +
              (C10327 * C305 - C10325 * C324 + C10328 * C937 - C47473 * C946) *
                  C47359) *
                 C4745 +
             ((C10508 - C10509 + C10510 - C10511) * C114 +
              (C10512 - C10513 + C10514 - C10515) * C47359) *
                 C47440) *
                C47493 +
            (((C10325 * C936 - C10327 * C931 + C47473 * C1295 -
               C10328 * C1286) *
                  C114 +
              (C10325 * C946 - C10327 * C937 + C47473 * C1313 -
               C10328 * C1296) *
                  C47359) *
                 C4745 +
             ((C11188 - C11189 + C11190 - C11191) * C114 +
              (C11192 - C11193 + C11194 - C11195) * C47359) *
                 C47440) *
                C47482 +
            (((C10327 * C1286 - C10325 * C1295 + C10328 * C2390 -
               C47473 * C2393) *
                  C114 +
              (C10327 * C1296 - C10325 * C1313 + C10328 * C2394 -
               C47473 * C2399) *
                  C47359) *
                 C4745 +
             ((C12624 - C12625 + C12626 - C12627) * C114 +
              (C12628 - C12629 + C12630 - C12631) * C47359) *
                 C47440) *
                C47456) *
               C47219) *
              C2608 +
          (((((C10331 - C10330 + C10333 - C10332) * C114 +
              (C10335 - C10334 + C10337 - C10336) * C47359) *
                 C4745 +
             ((C10338 - C10339 + C10340 - C10341) * C114 +
              (C10342 - C10343 + C10344 - C10345) * C47359) *
                 C47440) *
                C47493 +
            (((C10687 - C10686 + C10689 - C10688) * C114 +
              (C10691 - C10690 + C10693 - C10692) * C47359) *
                 C4745 +
             ((C10702 - C10703 + C10704 - C10705) * C114 +
              (C10706 - C10707 + C10708 - C10709) * C47359) *
                 C47440) *
                C47482 +
            (((C10695 - C10694 + C10697 - C10696) * C114 +
              (C10699 - C10698 + C10701 - C10700) * C47359) *
                 C4745 +
             ((C10710 - C10711 + C10712 - C10713) * C114 +
              (C10714 - C10715 + C10716 - C10717) * C47359) *
                 C47440) *
                C47456) *
               C2500 +
           ((((C10509 - C10508 + C10511 - C10510) * C114 +
              (C10513 - C10512 + C10515 - C10514) * C47359) *
                 C4745 +
             ((C10524 - C10525 + C10526 - C10527) * C114 +
              (C10528 - C10529 + C10530 - C10531) * C47359) *
                 C47440) *
                C47493 +
            (((C11189 - C11188 + C11191 - C11190) * C114 +
              (C11193 - C11192 + C11195 - C11194) * C47359) *
                 C4745 +
             ((C11196 - C11197 + C11198 - C11199) * C114 +
              (C11200 - C11201 + C11202 - C11203) * C47359) *
                 C47440) *
                C47482 +
            (((C12625 - C12624 + C12627 - C12626) * C114 +
              (C12629 - C12628 + C12631 - C12630) * C47359) *
                 C4745 +
             ((C10325 * C1299 - C10327 * C1288 + C47473 * C2397 -
               C10328 * C2392) *
                  C114 +
              (C10325 * C1315 - C10327 * C1300 + C47473 * C2401 -
               C10328 * C2398) *
                  C47359) *
                 C47440) *
                C47456) *
               C47219) *
              C47139)) /
            (p * q * std::sqrt(p + q));
    d2ee[53] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C10325 * C122 - C10327 * C115 + C47473 * C491 - C10328 * C481) *
                  C114 +
              (C10325 * C136 - C10327 * C123 + C47473 * C511 - C10328 * C492) *
                  C47359) *
                 C4745 +
             ((C10330 - C10331 + C10332 - C10333) * C114 +
              (C10334 - C10335 + C10336 - C10337) * C47359) *
                 C47440) *
                C47422 +
            (((C10327 * C481 - C10325 * C491 + C10328 * C484 - C47473 * C497) *
                  C114 +
              (C10327 * C492 - C10325 * C511 + C10328 * C498 - C47473 * C514) *
                  C47359) *
                 C4745 +
             ((C10686 - C10687 + C10688 - C10689) * C114 +
              (C10690 - C10691 + C10692 - C10693) * C47359) *
                 C47440) *
                C47261) *
               C2500 +
           ((((C10327 * C294 - C10325 * C304 + C10328 * C931 - C47473 * C936) *
                  C114 +
              (C10327 * C305 - C10325 * C324 + C10328 * C937 - C47473 * C946) *
                  C47359) *
                 C4745 +
             ((C10508 - C10509 + C10510 - C10511) * C114 +
              (C10512 - C10513 + C10514 - C10515) * C47359) *
                 C47440) *
                C47422 +
            (((C10325 * C936 - C10327 * C931 + C47473 * C1295 -
               C10328 * C1286) *
                  C114 +
              (C10325 * C946 - C10327 * C937 + C47473 * C1313 -
               C10328 * C1296) *
                  C47359) *
                 C4745 +
             ((C11188 - C11189 + C11190 - C11191) * C114 +
              (C11192 - C11193 + C11194 - C11195) * C47359) *
                 C47440) *
                C47261) *
               C47219) *
              C47133 +
          (((((C10331 - C10330 + C10333 - C10332) * C114 +
              (C10335 - C10334 + C10337 - C10336) * C47359) *
                 C4745 +
             ((C10338 - C10339 + C10340 - C10341) * C114 +
              (C10342 - C10343 + C10344 - C10345) * C47359) *
                 C47440) *
                C47422 +
            (((C10687 - C10686 + C10689 - C10688) * C114 +
              (C10691 - C10690 + C10693 - C10692) * C47359) *
                 C4745 +
             ((C10702 - C10703 + C10704 - C10705) * C114 +
              (C10706 - C10707 + C10708 - C10709) * C47359) *
                 C47440) *
                C47261) *
               C2500 +
           ((((C10509 - C10508 + C10511 - C10510) * C114 +
              (C10513 - C10512 + C10515 - C10514) * C47359) *
                 C4745 +
             ((C10524 - C10525 + C10526 - C10527) * C114 +
              (C10528 - C10529 + C10530 - C10531) * C47359) *
                 C47440) *
                C47422 +
            (((C11189 - C11188 + C11191 - C11190) * C114 +
              (C11193 - C11192 + C11195 - C11194) * C47359) *
                 C4745 +
             ((C11196 - C11197 + C11198 - C11199) * C114 +
              (C11200 - C11201 + C11202 - C11203) * C47359) *
                 C47440) *
                C47261) *
               C47219) *
              C47142 +
          (((((C10339 - C10338 + C10341 - C10340) * C114 +
              (C10343 - C10342 + C10345 - C10344) * C47359) *
                 C4745 +
             ((C10346 - C10347 + C10348 - C10349) * C114 +
              (C10350 - C10351 + C10352 - C10353) * C47359) *
                 C47440) *
                C47422 +
            (((C10703 - C10702 + C10705 - C10704) * C114 +
              (C10707 - C10706 + C10709 - C10708) * C47359) *
                 C4745 +
             ((C10986 - C10987 + C10988 - C10989) * C114 +
              (C10990 - C10991 + C10992 - C10993) * C47359) *
                 C47440) *
                C47261) *
               C2500 +
           ((((C10525 - C10524 + C10527 - C10526) * C114 +
              (C10529 - C10528 + C10531 - C10530) * C47359) *
                 C4745 +
             ((C10848 - C10849 + C10850 - C10851) * C114 +
              (C10852 - C10853 + C10854 - C10855) * C47359) *
                 C47440) *
                C47422 +
            (((C11197 - C11196 + C11199 - C11198) * C114 +
              (C11201 - C11200 + C11203 - C11202) * C47359) *
                 C4745 +
             ((C10325 * C942 - C10327 * C934 + C47473 * C2167 -
               C10328 * C2166) *
                  C114 +
              (C10325 * C949 - C10327 * C943 + C47473 * C2169 -
               C10328 * C2168) *
                  C47359) *
                 C47440) *
                C47261) *
               C47219) *
              C2871)) /
        (p * q * std::sqrt(p + q));
    d2ee[54] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C10325 * C122 - C10327 * C115 + C47473 * C491 - C10328 * C481) *
                 C114 +
             (C10325 * C136 - C10327 * C123 + C47473 * C511 - C10328 * C492) *
                 C47359) *
                C4745 +
            ((C10330 - C10331 + C10332 - C10333) * C114 +
             (C10334 - C10335 + C10336 - C10337) * C47359) *
                C47440) *
               C47174 * C2500 +
           (((C10327 * C294 - C10325 * C304 + C10328 * C931 - C47473 * C936) *
                 C114 +
             (C10327 * C305 - C10325 * C324 + C10328 * C937 - C47473 * C946) *
                 C47359) *
                C4745 +
            ((C10508 - C10509 + C10510 - C10511) * C114 +
             (C10512 - C10513 + C10514 - C10515) * C47359) *
                C47440) *
               C47174 * C47219) *
              C47498 +
          ((((C10331 - C10330 + C10333 - C10332) * C114 +
             (C10335 - C10334 + C10337 - C10336) * C47359) *
                C4745 +
            ((C10338 - C10339 + C10340 - C10341) * C114 +
             (C10342 - C10343 + C10344 - C10345) * C47359) *
                C47440) *
               C47174 * C2500 +
           (((C10509 - C10508 + C10511 - C10510) * C114 +
             (C10513 - C10512 + C10515 - C10514) * C47359) *
                C4745 +
            ((C10524 - C10525 + C10526 - C10527) * C114 +
             (C10528 - C10529 + C10530 - C10531) * C47359) *
                C47440) *
               C47174 * C47219) *
              C47491 +
          ((((C10339 - C10338 + C10341 - C10340) * C114 +
             (C10343 - C10342 + C10345 - C10344) * C47359) *
                C4745 +
            ((C10346 - C10347 + C10348 - C10349) * C114 +
             (C10350 - C10351 + C10352 - C10353) * C47359) *
                C47440) *
               C47174 * C2500 +
           (((C10525 - C10524 + C10527 - C10526) * C114 +
             (C10529 - C10528 + C10531 - C10530) * C47359) *
                C4745 +
            ((C10848 - C10849 + C10850 - C10851) * C114 +
             (C10852 - C10853 + C10854 - C10855) * C47359) *
                C47440) *
               C47174 * C47219) *
              C47478 +
          ((((C10347 - C10346 + C10349 - C10348) * C114 +
             (C10351 - C10350 + C10353 - C10352) * C47359) *
                C4745 +
            ((C10354 - C10355 + C10356 - C10357) * C114 +
             (C10358 - C10359 + C10360 - C10361) * C47359) *
                C47440) *
               C47174 * C2500 +
           (((C10849 - C10848 + C10851 - C10850) * C114 +
             (C10853 - C10852 + C10855 - C10854) * C47359) *
                C4745 +
            ((C10325 * C320 - C10327 * C302 + C47473 * C944 - C10328 * C935) *
                 C114 +
             (C10325 * C332 - C10327 * C321 + C47473 * C950 - C10328 * C945) *
                 C47359) *
                C47440) *
               C47174 * C47219) *
              C47457)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C10325 * C122 - C10327 * C115 + C47473 * C491 - C10328 * C481) *
                 C114 +
             (C10325 * C136 - C10327 * C123 + C47473 * C511 - C10328 * C492) *
                 C47359) *
                C4745 +
            ((C10330 - C10331 + C10332 - C10333) * C114 +
             (C10334 - C10335 + C10336 - C10337) * C47359) *
                C47440) *
               C47174 * C47499 +
           (((C10327 * C294 - C10325 * C304 + C10328 * C931 - C47473 * C936) *
                 C114 +
             (C10327 * C305 - C10325 * C324 + C10328 * C937 - C47473 * C946) *
                 C47359) *
                C4745 +
            ((C10508 - C10509 + C10510 - C10511) * C114 +
             (C10512 - C10513 + C10514 - C10515) * C47359) *
                C47440) *
               C47174 * C47495 +
           (((C10325 * C310 - C10327 * C297 + C47473 * C1301 - C10328 * C1289) *
                 C114 +
             (C10325 * C327 - C10327 * C311 + C47473 * C1316 - C10328 * C1302) *
                 C47359) *
                C4745 +
            ((C10516 - C10517 + C10518 - C10519) * C114 +
             (C10520 - C10521 + C10522 - C10523) * C47359) *
                C47440) *
               C47174 * C47485 +
           (((C10327 * C1152 - C10325 * C1158 + C10328 * C1694 -
              C47473 * C1697) *
                 C114 +
             (C10327 * C1159 - C10325 * C1170 + C10328 * C1698 -
              C47473 * C1703) *
                 C47359) *
                C4745 +
            ((C11708 - C11709 + C11710 - C11711) * C114 +
             (C11712 - C11713 + C11714 - C11715) * C47359) *
                C47440) *
               C47174 * C47463) *
              C2608 +
          ((((C10331 - C10330 + C10333 - C10332) * C114 +
             (C10335 - C10334 + C10337 - C10336) * C47359) *
                C4745 +
            ((C10338 - C10339 + C10340 - C10341) * C114 +
             (C10342 - C10343 + C10344 - C10345) * C47359) *
                C47440) *
               C47174 * C47499 +
           (((C10509 - C10508 + C10511 - C10510) * C114 +
             (C10513 - C10512 + C10515 - C10514) * C47359) *
                C4745 +
            ((C10524 - C10525 + C10526 - C10527) * C114 +
             (C10528 - C10529 + C10530 - C10531) * C47359) *
                C47440) *
               C47174 * C47495 +
           (((C10517 - C10516 + C10519 - C10518) * C114 +
             (C10521 - C10520 + C10523 - C10522) * C47359) *
                C4745 +
            ((C10532 - C10533 + C10534 - C10535) * C114 +
             (C10536 - C10537 + C10538 - C10539) * C47359) *
                C47440) *
               C47174 * C47485 +
           (((C11709 - C11708 + C11711 - C11710) * C114 +
             (C11713 - C11712 + C11715 - C11714) * C47359) *
                C4745 +
            ((C10325 * C1162 - C10327 * C1154 + C47473 * C1701 -
              C10328 * C1696) *
                 C114 +
             (C10325 * C1172 - C10327 * C1163 + C47473 * C1705 -
              C10328 * C1702) *
                 C47359) *
                C47440) *
               C47174 * C47463) *
              C47139)) /
            (p * q * std::sqrt(p + q));
    d2ee[55] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C10325 * C122 - C10327 * C115 + C47473 * C491 - C10328 * C481) *
                  C114 +
              (C10325 * C136 - C10327 * C123 + C47473 * C511 - C10328 * C492) *
                  C47359) *
                 C4745 +
             ((C10330 - C10331 + C10332 - C10333) * C114 +
              (C10334 - C10335 + C10336 - C10337) * C47359) *
                 C47440) *
                C3262 +
            (((C10327 * C481 - C10325 * C491 + C10328 * C484 - C47473 * C497) *
                  C114 +
              (C10327 * C492 - C10325 * C511 + C10328 * C498 - C47473 * C514) *
                  C47359) *
                 C4745 +
             ((C10686 - C10687 + C10688 - C10689) * C114 +
              (C10690 - C10691 + C10692 - C10693) * C47359) *
                 C47440) *
                C47261) *
               C47215 +
           ((((C10327 * C294 - C10325 * C304 + C10328 * C931 - C47473 * C936) *
                  C114 +
              (C10327 * C305 - C10325 * C324 + C10328 * C937 - C47473 * C946) *
                  C47359) *
                 C4745 +
             ((C10508 - C10509 + C10510 - C10511) * C114 +
              (C10512 - C10513 + C10514 - C10515) * C47359) *
                 C47440) *
                C3262 +
            (((C10325 * C936 - C10327 * C931 + C47473 * C1295 -
               C10328 * C1286) *
                  C114 +
              (C10325 * C946 - C10327 * C937 + C47473 * C1313 -
               C10328 * C1296) *
                  C47359) *
                 C4745 +
             ((C11188 - C11189 + C11190 - C11191) * C114 +
              (C11192 - C11193 + C11194 - C11195) * C47359) *
                 C47440) *
                C47261) *
               C47222 +
           ((((C10325 * C310 - C10327 * C297 + C47473 * C1301 -
               C10328 * C1289) *
                  C114 +
              (C10325 * C327 - C10327 * C311 + C47473 * C1316 -
               C10328 * C1302) *
                  C47359) *
                 C4745 +
             ((C10516 - C10517 + C10518 - C10519) * C114 +
              (C10520 - C10521 + C10522 - C10523) * C47359) *
                 C47440) *
                C3262 +
            (((C10327 * C1289 - C10325 * C1301 + C10328 * C1292 -
               C47473 * C1307) *
                  C114 +
              (C10327 * C1302 - C10325 * C1316 + C10328 * C1308 -
               C47473 * C1319) *
                  C47359) *
                 C4745 +
             ((C11910 - C11911 + C11912 - C11913) * C114 +
              (C11914 - C11915 + C11916 - C11917) * C47359) *
                 C47440) *
                C47261) *
               C2868) *
              C47407 +
          (((((C10331 - C10330 + C10333 - C10332) * C114 +
              (C10335 - C10334 + C10337 - C10336) * C47359) *
                 C4745 +
             ((C10338 - C10339 + C10340 - C10341) * C114 +
              (C10342 - C10343 + C10344 - C10345) * C47359) *
                 C47440) *
                C3262 +
            (((C10687 - C10686 + C10689 - C10688) * C114 +
              (C10691 - C10690 + C10693 - C10692) * C47359) *
                 C4745 +
             ((C10702 - C10703 + C10704 - C10705) * C114 +
              (C10706 - C10707 + C10708 - C10709) * C47359) *
                 C47440) *
                C47261) *
               C47215 +
           ((((C10509 - C10508 + C10511 - C10510) * C114 +
              (C10513 - C10512 + C10515 - C10514) * C47359) *
                 C4745 +
             ((C10524 - C10525 + C10526 - C10527) * C114 +
              (C10528 - C10529 + C10530 - C10531) * C47359) *
                 C47440) *
                C3262 +
            (((C11189 - C11188 + C11191 - C11190) * C114 +
              (C11193 - C11192 + C11195 - C11194) * C47359) *
                 C4745 +
             ((C11196 - C11197 + C11198 - C11199) * C114 +
              (C11200 - C11201 + C11202 - C11203) * C47359) *
                 C47440) *
                C47261) *
               C47222 +
           ((((C10517 - C10516 + C10519 - C10518) * C114 +
              (C10521 - C10520 + C10523 - C10522) * C47359) *
                 C4745 +
             ((C10532 - C10533 + C10534 - C10535) * C114 +
              (C10536 - C10537 + C10538 - C10539) * C47359) *
                 C47440) *
                C3262 +
            (((C11911 - C11910 + C11913 - C11912) * C114 +
              (C11915 - C11914 + C11917 - C11916) * C47359) *
                 C4745 +
             ((C10325 * C1305 - C10327 * C1291 + C47473 * C1311 -
               C10328 * C1294) *
                  C114 +
              (C10325 * C1318 - C10327 * C1306 + C47473 * C1321 -
               C10328 * C1312) *
                  C47359) *
                 C47440) *
                C47261) *
               C2868) *
              C47139)) /
        (p * q * std::sqrt(p + q));
    d2ee[56] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C10325 * C122 - C10327 * C115 + C47473 * C491 - C10328 * C481) *
                 C114 +
             (C10325 * C136 - C10327 * C123 + C47473 * C511 - C10328 * C492) *
                 C47359) *
                C4745 +
            ((C10330 - C10331 + C10332 - C10333) * C114 +
             (C10334 - C10335 + C10336 - C10337) * C47359) *
                C47440) *
               C47257 +
           (((C10327 * C481 - C10325 * C491 + C10328 * C484 - C47473 * C497) *
                 C114 +
             (C10327 * C492 - C10325 * C511 + C10328 * C498 - C47473 * C514) *
                 C47359) *
                C4745 +
            ((C10686 - C10687 + C10688 - C10689) * C114 +
             (C10690 - C10691 + C10692 - C10693) * C47359) *
                C47440) *
               C47264 +
           (((C10325 * C497 - C10327 * C484 + C47473 * C2002 - C10328 * C1996) *
                 C114 +
             (C10325 * C514 - C10327 * C498 + C47473 * C2014 - C10328 * C2003) *
                 C47359) *
                C4745 +
            ((C10694 - C10695 + C10696 - C10697) * C114 +
             (C10698 - C10699 + C10700 - C10701) * C47359) *
                C47440) *
               C3770) *
              C47215 +
          ((((C10327 * C294 - C10325 * C304 + C10328 * C931 - C47473 * C936) *
                 C114 +
             (C10327 * C305 - C10325 * C324 + C10328 * C937 - C47473 * C946) *
                 C47359) *
                C4745 +
            ((C10508 - C10509 + C10510 - C10511) * C114 +
             (C10512 - C10513 + C10514 - C10515) * C47359) *
                C47440) *
               C47257 +
           (((C10325 * C936 - C10327 * C931 + C47473 * C1295 - C10328 * C1286) *
                 C114 +
             (C10325 * C946 - C10327 * C937 + C47473 * C1313 - C10328 * C1296) *
                 C47359) *
                C4745 +
            ((C11188 - C11189 + C11190 - C11191) * C114 +
             (C11192 - C11193 + C11194 - C11195) * C47359) *
                C47440) *
               C47264 +
           (((C10327 * C1286 - C10325 * C1295 + C10328 * C2390 -
              C47473 * C2393) *
                 C114 +
             (C10327 * C1296 - C10325 * C1313 + C10328 * C2394 -
              C47473 * C2399) *
                 C47359) *
                C4745 +
            ((C12624 - C12625 + C12626 - C12627) * C114 +
             (C12628 - C12629 + C12630 - C12631) * C47359) *
                C47440) *
               C3770) *
              C47222 +
          ((((C10325 * C310 - C10327 * C297 + C47473 * C1301 - C10328 * C1289) *
                 C114 +
             (C10325 * C327 - C10327 * C311 + C47473 * C1316 - C10328 * C1302) *
                 C47359) *
                C4745 +
            ((C10516 - C10517 + C10518 - C10519) * C114 +
             (C10520 - C10521 + C10522 - C10523) * C47359) *
                C47440) *
               C47257 +
           (((C10327 * C1289 - C10325 * C1301 + C10328 * C1292 -
              C47473 * C1307) *
                 C114 +
             (C10327 * C1302 - C10325 * C1316 + C10328 * C1308 -
              C47473 * C1319) *
                 C47359) *
                C4745 +
            ((C11910 - C11911 + C11912 - C11913) * C114 +
             (C11914 - C11915 + C11916 - C11917) * C47359) *
                C47440) *
               C47264 +
           (((C10325 * C1307 - C10327 * C1292 + C47473 * C7269 -
              C10328 * C7267) *
                 C114 +
             (C10325 * C1319 - C10327 * C1308 + C47473 * C7273 -
              C10328 * C7270) *
                 C47359) *
                C4745 +
            ((C10325 * C1309 - C10327 * C1293 + C47473 * C7271 -
              C10328 * C7268) *
                 C114 +
             (C10325 * C1320 - C10327 * C1310 + C47473 * C7274 -
              C10328 * C7272) *
                 C47359) *
                C47440) *
               C3770) *
              C2868) *
         C47128) /
        (p * q * std::sqrt(p + q));
    d2ee[57] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C10325 * C122 - C10327 * C115 + C47473 * C491 - C10328 * C481) *
                 C114 +
             (C10325 * C136 - C10327 * C123 + C47473 * C511 - C10328 * C492) *
                 C47359) *
                C4745 +
            ((C10330 - C10331 + C10332 - C10333) * C114 +
             (C10334 - C10335 + C10336 - C10337) * C47359) *
                C47440) *
               C3262 +
           (((C10327 * C481 - C10325 * C491 + C10328 * C484 - C47473 * C497) *
                 C114 +
             (C10327 * C492 - C10325 * C511 + C10328 * C498 - C47473 * C514) *
                 C47359) *
                C4745 +
            ((C10686 - C10687 + C10688 - C10689) * C114 +
             (C10690 - C10691 + C10692 - C10693) * C47359) *
                C47440) *
               C47261) *
              C47499 +
          ((((C10327 * C294 - C10325 * C304 + C10328 * C931 - C47473 * C936) *
                 C114 +
             (C10327 * C305 - C10325 * C324 + C10328 * C937 - C47473 * C946) *
                 C47359) *
                C4745 +
            ((C10508 - C10509 + C10510 - C10511) * C114 +
             (C10512 - C10513 + C10514 - C10515) * C47359) *
                C47440) *
               C3262 +
           (((C10325 * C936 - C10327 * C931 + C47473 * C1295 - C10328 * C1286) *
                 C114 +
             (C10325 * C946 - C10327 * C937 + C47473 * C1313 - C10328 * C1296) *
                 C47359) *
                C4745 +
            ((C11188 - C11189 + C11190 - C11191) * C114 +
             (C11192 - C11193 + C11194 - C11195) * C47359) *
                C47440) *
               C47261) *
              C47495 +
          ((((C10325 * C310 - C10327 * C297 + C47473 * C1301 - C10328 * C1289) *
                 C114 +
             (C10325 * C327 - C10327 * C311 + C47473 * C1316 - C10328 * C1302) *
                 C47359) *
                C4745 +
            ((C10516 - C10517 + C10518 - C10519) * C114 +
             (C10520 - C10521 + C10522 - C10523) * C47359) *
                C47440) *
               C3262 +
           (((C10327 * C1289 - C10325 * C1301 + C10328 * C1292 -
              C47473 * C1307) *
                 C114 +
             (C10327 * C1302 - C10325 * C1316 + C10328 * C1308 -
              C47473 * C1319) *
                 C47359) *
                C4745 +
            ((C11910 - C11911 + C11912 - C11913) * C114 +
             (C11914 - C11915 + C11916 - C11917) * C47359) *
                C47440) *
               C47261) *
              C47485 +
          ((((C10327 * C1152 - C10325 * C1158 + C10328 * C1694 -
              C47473 * C1697) *
                 C114 +
             (C10327 * C1159 - C10325 * C1170 + C10328 * C1698 -
              C47473 * C1703) *
                 C47359) *
                C4745 +
            ((C11708 - C11709 + C11710 - C11711) * C114 +
             (C11712 - C11713 + C11714 - C11715) * C47359) *
                C47440) *
               C3262 +
           (((C10325 * C1697 - C10327 * C1694 + C47473 * C5923 -
              C10328 * C5921) *
                 C114 +
             (C10325 * C1703 - C10327 * C1698 + C47473 * C5927 -
              C10328 * C5924) *
                 C47359) *
                C4745 +
            ((C10325 * C1699 - C10327 * C1695 + C47473 * C5925 -
              C10328 * C5922) *
                 C114 +
             (C10325 * C1704 - C10327 * C1700 + C47473 * C5928 -
              C10328 * C5926) *
                 C47359) *
                C47440) *
               C47261) *
              C47463) *
         C47128) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C10325 * C122 - C10327 * C115 + C47473 * C491 - C10328 * C481) *
                  C114 +
              (C10325 * C136 - C10327 * C123 + C47473 * C511 - C10328 * C492) *
                  C47359) *
                 C4745 +
             ((C10330 - C10331 + C10332 - C10333) * C114 +
              (C10334 - C10335 + C10336 - C10337) * C47359) *
                 C47440) *
                C3262 +
            (((C10327 * C481 - C10325 * C491 + C10328 * C484 - C47473 * C497) *
                  C114 +
              (C10327 * C492 - C10325 * C511 + C10328 * C498 - C47473 * C514) *
                  C47359) *
                 C4745 +
             ((C10686 - C10687 + C10688 - C10689) * C114 +
              (C10690 - C10691 + C10692 - C10693) * C47359) *
                 C47440) *
                C47261) *
               C2500 +
           ((((C10327 * C294 - C10325 * C304 + C10328 * C931 - C47473 * C936) *
                  C114 +
              (C10327 * C305 - C10325 * C324 + C10328 * C937 - C47473 * C946) *
                  C47359) *
                 C4745 +
             ((C10508 - C10509 + C10510 - C10511) * C114 +
              (C10512 - C10513 + C10514 - C10515) * C47359) *
                 C47440) *
                C3262 +
            (((C10325 * C936 - C10327 * C931 + C47473 * C1295 -
               C10328 * C1286) *
                  C114 +
              (C10325 * C946 - C10327 * C937 + C47473 * C1313 -
               C10328 * C1296) *
                  C47359) *
                 C4745 +
             ((C11188 - C11189 + C11190 - C11191) * C114 +
              (C11192 - C11193 + C11194 - C11195) * C47359) *
                 C47440) *
                C47261) *
               C47219) *
              C47489 +
          (((((C10331 - C10330 + C10333 - C10332) * C114 +
              (C10335 - C10334 + C10337 - C10336) * C47359) *
                 C4745 +
             ((C10338 - C10339 + C10340 - C10341) * C114 +
              (C10342 - C10343 + C10344 - C10345) * C47359) *
                 C47440) *
                C3262 +
            (((C10687 - C10686 + C10689 - C10688) * C114 +
              (C10691 - C10690 + C10693 - C10692) * C47359) *
                 C4745 +
             ((C10702 - C10703 + C10704 - C10705) * C114 +
              (C10706 - C10707 + C10708 - C10709) * C47359) *
                 C47440) *
                C47261) *
               C2500 +
           ((((C10509 - C10508 + C10511 - C10510) * C114 +
              (C10513 - C10512 + C10515 - C10514) * C47359) *
                 C4745 +
             ((C10524 - C10525 + C10526 - C10527) * C114 +
              (C10528 - C10529 + C10530 - C10531) * C47359) *
                 C47440) *
                C3262 +
            (((C11189 - C11188 + C11191 - C11190) * C114 +
              (C11193 - C11192 + C11195 - C11194) * C47359) *
                 C4745 +
             ((C11196 - C11197 + C11198 - C11199) * C114 +
              (C11200 - C11201 + C11202 - C11203) * C47359) *
                 C47440) *
                C47261) *
               C47219) *
              C47476 +
          (((((C10339 - C10338 + C10341 - C10340) * C114 +
              (C10343 - C10342 + C10345 - C10344) * C47359) *
                 C4745 +
             ((C10346 - C10347 + C10348 - C10349) * C114 +
              (C10350 - C10351 + C10352 - C10353) * C47359) *
                 C47440) *
                C3262 +
            (((C10703 - C10702 + C10705 - C10704) * C114 +
              (C10707 - C10706 + C10709 - C10708) * C47359) *
                 C4745 +
             ((C10986 - C10987 + C10988 - C10989) * C114 +
              (C10990 - C10991 + C10992 - C10993) * C47359) *
                 C47440) *
                C47261) *
               C2500 +
           ((((C10525 - C10524 + C10527 - C10526) * C114 +
              (C10529 - C10528 + C10531 - C10530) * C47359) *
                 C4745 +
             ((C10848 - C10849 + C10850 - C10851) * C114 +
              (C10852 - C10853 + C10854 - C10855) * C47359) *
                 C47440) *
                C3262 +
            (((C11197 - C11196 + C11199 - C11198) * C114 +
              (C11201 - C11200 + C11203 - C11202) * C47359) *
                 C4745 +
             ((C10325 * C942 - C10327 * C934 + C47473 * C2167 -
               C10328 * C2166) *
                  C114 +
              (C10325 * C949 - C10327 * C943 + C47473 * C2169 -
               C10328 * C2168) *
                  C47359) *
                 C47440) *
                C47261) *
               C47219) *
              C47447)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C10325 * C122 - C10327 * C115 + C47473 * C491 - C10328 * C481) *
                 C114 +
             (C10325 * C136 - C10327 * C123 + C47473 * C511 - C10328 * C492) *
                 C47359) *
                C4745 +
            ((C10330 - C10331 + C10332 - C10333) * C114 +
             (C10334 - C10335 + C10336 - C10337) * C47359) *
                C47440) *
               C47500 +
           (((C10327 * C481 - C10325 * C491 + C10328 * C484 - C47473 * C497) *
                 C114 +
             (C10327 * C492 - C10325 * C511 + C10328 * C498 - C47473 * C514) *
                 C47359) *
                C4745 +
            ((C10686 - C10687 + C10688 - C10689) * C114 +
             (C10690 - C10691 + C10692 - C10693) * C47359) *
                C47440) *
               C47497 +
           (((C10325 * C497 - C10327 * C484 + C47473 * C2002 - C10328 * C1996) *
                 C114 +
             (C10325 * C514 - C10327 * C498 + C47473 * C2014 - C10328 * C2003) *
                 C47359) *
                C4745 +
            ((C10694 - C10695 + C10696 - C10697) * C114 +
             (C10698 - C10699 + C10700 - C10701) * C47359) *
                C47440) *
               C47488 +
           (((C10327 * C1996 - C10325 * C2002 + C10328 * C1999 -
              C47473 * C2008) *
                 C114 +
             (C10327 * C2003 - C10325 * C2014 + C10328 * C2009 -
              C47473 * C2017) *
                 C47359) *
                C4745 +
            ((C12762 - C12763 + C12764 - C12765) * C114 +
             (C12766 - C12767 + C12768 - C12769) * C47359) *
                C47440) *
               C47469) *
              C2500 +
          ((((C10327 * C294 - C10325 * C304 + C10328 * C931 - C47473 * C936) *
                 C114 +
             (C10327 * C305 - C10325 * C324 + C10328 * C937 - C47473 * C946) *
                 C47359) *
                C4745 +
            ((C10508 - C10509 + C10510 - C10511) * C114 +
             (C10512 - C10513 + C10514 - C10515) * C47359) *
                C47440) *
               C47500 +
           (((C10325 * C936 - C10327 * C931 + C47473 * C1295 - C10328 * C1286) *
                 C114 +
             (C10325 * C946 - C10327 * C937 + C47473 * C1313 - C10328 * C1296) *
                 C47359) *
                C4745 +
            ((C11188 - C11189 + C11190 - C11191) * C114 +
             (C11192 - C11193 + C11194 - C11195) * C47359) *
                C47440) *
               C47497 +
           (((C10327 * C1286 - C10325 * C1295 + C10328 * C2390 -
              C47473 * C2393) *
                 C114 +
             (C10327 * C1296 - C10325 * C1313 + C10328 * C2394 -
              C47473 * C2399) *
                 C47359) *
                C4745 +
            ((C12624 - C12625 + C12626 - C12627) * C114 +
             (C12628 - C12629 + C12630 - C12631) * C47359) *
                C47440) *
               C47488 +
           (((C10325 * C2393 - C10327 * C2390 + C47473 * C6799 -
              C10328 * C6797) *
                 C114 +
             (C10325 * C2399 - C10327 * C2394 + C47473 * C6803 -
              C10328 * C6800) *
                 C47359) *
                C4745 +
            ((C10325 * C2395 - C10327 * C2391 + C47473 * C6801 -
              C10328 * C6798) *
                 C114 +
             (C10325 * C2400 - C10327 * C2396 + C47473 * C6804 -
              C10328 * C6802) *
                 C47359) *
                C47440) *
               C47469) *
              C47219) *
         C47128) /
            (p * q * std::sqrt(p + q));
    d2ee[58] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C10325 * C122 - C10327 * C115 + C47473 * C491 - C10328 * C481) *
                  C114 +
              (C10325 * C136 - C10327 * C123 + C47473 * C511 - C10328 * C492) *
                  C47359) *
                 C4745 +
             ((C10330 - C10331 + C10332 - C10333) * C114 +
              (C10334 - C10335 + C10336 - C10337) * C47359) *
                 C47440) *
                C47257 +
            (((C10327 * C481 - C10325 * C491 + C10328 * C484 - C47473 * C497) *
                  C114 +
              (C10327 * C492 - C10325 * C511 + C10328 * C498 - C47473 * C514) *
                  C47359) *
                 C4745 +
             ((C10686 - C10687 + C10688 - C10689) * C114 +
              (C10690 - C10691 + C10692 - C10693) * C47359) *
                 C47440) *
                C47264 +
            (((C10325 * C497 - C10327 * C484 + C47473 * C2002 -
               C10328 * C1996) *
                  C114 +
              (C10325 * C514 - C10327 * C498 + C47473 * C2014 -
               C10328 * C2003) *
                  C47359) *
                 C4745 +
             ((C10694 - C10695 + C10696 - C10697) * C114 +
              (C10698 - C10699 + C10700 - C10701) * C47359) *
                 C47440) *
                C3770) *
               C2500 +
           ((((C10327 * C294 - C10325 * C304 + C10328 * C931 - C47473 * C936) *
                  C114 +
              (C10327 * C305 - C10325 * C324 + C10328 * C937 - C47473 * C946) *
                  C47359) *
                 C4745 +
             ((C10508 - C10509 + C10510 - C10511) * C114 +
              (C10512 - C10513 + C10514 - C10515) * C47359) *
                 C47440) *
                C47257 +
            (((C10325 * C936 - C10327 * C931 + C47473 * C1295 -
               C10328 * C1286) *
                  C114 +
              (C10325 * C946 - C10327 * C937 + C47473 * C1313 -
               C10328 * C1296) *
                  C47359) *
                 C4745 +
             ((C11188 - C11189 + C11190 - C11191) * C114 +
              (C11192 - C11193 + C11194 - C11195) * C47359) *
                 C47440) *
                C47264 +
            (((C10327 * C1286 - C10325 * C1295 + C10328 * C2390 -
               C47473 * C2393) *
                  C114 +
              (C10327 * C1296 - C10325 * C1313 + C10328 * C2394 -
               C47473 * C2399) *
                  C47359) *
                 C4745 +
             ((C12624 - C12625 + C12626 - C12627) * C114 +
              (C12628 - C12629 + C12630 - C12631) * C47359) *
                 C47440) *
                C3770) *
               C47219) *
              C47407 +
          (((((C10331 - C10330 + C10333 - C10332) * C114 +
              (C10335 - C10334 + C10337 - C10336) * C47359) *
                 C4745 +
             ((C10338 - C10339 + C10340 - C10341) * C114 +
              (C10342 - C10343 + C10344 - C10345) * C47359) *
                 C47440) *
                C47257 +
            (((C10687 - C10686 + C10689 - C10688) * C114 +
              (C10691 - C10690 + C10693 - C10692) * C47359) *
                 C4745 +
             ((C10702 - C10703 + C10704 - C10705) * C114 +
              (C10706 - C10707 + C10708 - C10709) * C47359) *
                 C47440) *
                C47264 +
            (((C10695 - C10694 + C10697 - C10696) * C114 +
              (C10699 - C10698 + C10701 - C10700) * C47359) *
                 C4745 +
             ((C10710 - C10711 + C10712 - C10713) * C114 +
              (C10714 - C10715 + C10716 - C10717) * C47359) *
                 C47440) *
                C3770) *
               C2500 +
           ((((C10509 - C10508 + C10511 - C10510) * C114 +
              (C10513 - C10512 + C10515 - C10514) * C47359) *
                 C4745 +
             ((C10524 - C10525 + C10526 - C10527) * C114 +
              (C10528 - C10529 + C10530 - C10531) * C47359) *
                 C47440) *
                C47257 +
            (((C11189 - C11188 + C11191 - C11190) * C114 +
              (C11193 - C11192 + C11195 - C11194) * C47359) *
                 C4745 +
             ((C11196 - C11197 + C11198 - C11199) * C114 +
              (C11200 - C11201 + C11202 - C11203) * C47359) *
                 C47440) *
                C47264 +
            (((C12625 - C12624 + C12627 - C12626) * C114 +
              (C12629 - C12628 + C12631 - C12630) * C47359) *
                 C4745 +
             ((C10325 * C1299 - C10327 * C1288 + C47473 * C2397 -
               C10328 * C2392) *
                  C114 +
              (C10325 * C1315 - C10327 * C1300 + C47473 * C2401 -
               C10328 * C2398) *
                  C47359) *
                 C47440) *
                C3770) *
               C47219) *
              C47139)) /
        (p * q * std::sqrt(p + q));
    d2ee[59] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C10325 * C122 - C10327 * C115 + C47473 * C491 - C10328 * C481) *
                  C114 +
              (C10325 * C136 - C10327 * C123 + C47473 * C511 - C10328 * C492) *
                  C47359) *
                 C4745 +
             ((C10330 - C10331 + C10332 - C10333) * C114 +
              (C10334 - C10335 + C10336 - C10337) * C47359) *
                 C47440) *
                C3262 +
            (((C10327 * C481 - C10325 * C491 + C10328 * C484 - C47473 * C497) *
                  C114 +
              (C10327 * C492 - C10325 * C511 + C10328 * C498 - C47473 * C514) *
                  C47359) *
                 C4745 +
             ((C10686 - C10687 + C10688 - C10689) * C114 +
              (C10690 - C10691 + C10692 - C10693) * C47359) *
                 C47440) *
                C47261) *
               C2500 +
           ((((C10327 * C294 - C10325 * C304 + C10328 * C931 - C47473 * C936) *
                  C114 +
              (C10327 * C305 - C10325 * C324 + C10328 * C937 - C47473 * C946) *
                  C47359) *
                 C4745 +
             ((C10508 - C10509 + C10510 - C10511) * C114 +
              (C10512 - C10513 + C10514 - C10515) * C47359) *
                 C47440) *
                C3262 +
            (((C10325 * C936 - C10327 * C931 + C47473 * C1295 -
               C10328 * C1286) *
                  C114 +
              (C10325 * C946 - C10327 * C937 + C47473 * C1313 -
               C10328 * C1296) *
                  C47359) *
                 C4745 +
             ((C11188 - C11189 + C11190 - C11191) * C114 +
              (C11192 - C11193 + C11194 - C11195) * C47359) *
                 C47440) *
                C47261) *
               C47219) *
              C47489 +
          (((((C10331 - C10330 + C10333 - C10332) * C114 +
              (C10335 - C10334 + C10337 - C10336) * C47359) *
                 C4745 +
             ((C10338 - C10339 + C10340 - C10341) * C114 +
              (C10342 - C10343 + C10344 - C10345) * C47359) *
                 C47440) *
                C3262 +
            (((C10687 - C10686 + C10689 - C10688) * C114 +
              (C10691 - C10690 + C10693 - C10692) * C47359) *
                 C4745 +
             ((C10702 - C10703 + C10704 - C10705) * C114 +
              (C10706 - C10707 + C10708 - C10709) * C47359) *
                 C47440) *
                C47261) *
               C2500 +
           ((((C10509 - C10508 + C10511 - C10510) * C114 +
              (C10513 - C10512 + C10515 - C10514) * C47359) *
                 C4745 +
             ((C10524 - C10525 + C10526 - C10527) * C114 +
              (C10528 - C10529 + C10530 - C10531) * C47359) *
                 C47440) *
                C3262 +
            (((C11189 - C11188 + C11191 - C11190) * C114 +
              (C11193 - C11192 + C11195 - C11194) * C47359) *
                 C4745 +
             ((C11196 - C11197 + C11198 - C11199) * C114 +
              (C11200 - C11201 + C11202 - C11203) * C47359) *
                 C47440) *
                C47261) *
               C47219) *
              C47476 +
          (((((C10339 - C10338 + C10341 - C10340) * C114 +
              (C10343 - C10342 + C10345 - C10344) * C47359) *
                 C4745 +
             ((C10346 - C10347 + C10348 - C10349) * C114 +
              (C10350 - C10351 + C10352 - C10353) * C47359) *
                 C47440) *
                C3262 +
            (((C10703 - C10702 + C10705 - C10704) * C114 +
              (C10707 - C10706 + C10709 - C10708) * C47359) *
                 C4745 +
             ((C10986 - C10987 + C10988 - C10989) * C114 +
              (C10990 - C10991 + C10992 - C10993) * C47359) *
                 C47440) *
                C47261) *
               C2500 +
           ((((C10525 - C10524 + C10527 - C10526) * C114 +
              (C10529 - C10528 + C10531 - C10530) * C47359) *
                 C4745 +
             ((C10848 - C10849 + C10850 - C10851) * C114 +
              (C10852 - C10853 + C10854 - C10855) * C47359) *
                 C47440) *
                C3262 +
            (((C11197 - C11196 + C11199 - C11198) * C114 +
              (C11201 - C11200 + C11203 - C11202) * C47359) *
                 C4745 +
             ((C10325 * C942 - C10327 * C934 + C47473 * C2167 -
               C10328 * C2166) *
                  C114 +
              (C10325 * C949 - C10327 * C943 + C47473 * C2169 -
               C10328 * C2168) *
                  C47359) *
                 C47440) *
                C47261) *
               C47219) *
              C47447)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C10325 * C122 - C10327 * C115 + C47473 * C491 - C10328 * C481) *
                 C114 +
             (C10325 * C136 - C10327 * C123 + C47473 * C511 - C10328 * C492) *
                 C47359) *
                C4745 +
            ((C10330 - C10331 + C10332 - C10333) * C114 +
             (C10334 - C10335 + C10336 - C10337) * C47359) *
                C47440) *
               C3262 +
           (((C10327 * C481 - C10325 * C491 + C10328 * C484 - C47473 * C497) *
                 C114 +
             (C10327 * C492 - C10325 * C511 + C10328 * C498 - C47473 * C514) *
                 C47359) *
                C4745 +
            ((C10686 - C10687 + C10688 - C10689) * C114 +
             (C10690 - C10691 + C10692 - C10693) * C47359) *
                C47440) *
               C47261) *
              C47499 +
          ((((C10327 * C294 - C10325 * C304 + C10328 * C931 - C47473 * C936) *
                 C114 +
             (C10327 * C305 - C10325 * C324 + C10328 * C937 - C47473 * C946) *
                 C47359) *
                C4745 +
            ((C10508 - C10509 + C10510 - C10511) * C114 +
             (C10512 - C10513 + C10514 - C10515) * C47359) *
                C47440) *
               C3262 +
           (((C10325 * C936 - C10327 * C931 + C47473 * C1295 - C10328 * C1286) *
                 C114 +
             (C10325 * C946 - C10327 * C937 + C47473 * C1313 - C10328 * C1296) *
                 C47359) *
                C4745 +
            ((C11188 - C11189 + C11190 - C11191) * C114 +
             (C11192 - C11193 + C11194 - C11195) * C47359) *
                C47440) *
               C47261) *
              C47495 +
          ((((C10325 * C310 - C10327 * C297 + C47473 * C1301 - C10328 * C1289) *
                 C114 +
             (C10325 * C327 - C10327 * C311 + C47473 * C1316 - C10328 * C1302) *
                 C47359) *
                C4745 +
            ((C10516 - C10517 + C10518 - C10519) * C114 +
             (C10520 - C10521 + C10522 - C10523) * C47359) *
                C47440) *
               C3262 +
           (((C10327 * C1289 - C10325 * C1301 + C10328 * C1292 -
              C47473 * C1307) *
                 C114 +
             (C10327 * C1302 - C10325 * C1316 + C10328 * C1308 -
              C47473 * C1319) *
                 C47359) *
                C4745 +
            ((C11910 - C11911 + C11912 - C11913) * C114 +
             (C11914 - C11915 + C11916 - C11917) * C47359) *
                C47440) *
               C47261) *
              C47485 +
          ((((C10327 * C1152 - C10325 * C1158 + C10328 * C1694 -
              C47473 * C1697) *
                 C114 +
             (C10327 * C1159 - C10325 * C1170 + C10328 * C1698 -
              C47473 * C1703) *
                 C47359) *
                C4745 +
            ((C11708 - C11709 + C11710 - C11711) * C114 +
             (C11712 - C11713 + C11714 - C11715) * C47359) *
                C47440) *
               C3262 +
           (((C10325 * C1697 - C10327 * C1694 + C47473 * C5923 -
              C10328 * C5921) *
                 C114 +
             (C10325 * C1703 - C10327 * C1698 + C47473 * C5927 -
              C10328 * C5924) *
                 C47359) *
                C4745 +
            ((C10325 * C1699 - C10327 * C1695 + C47473 * C5925 -
              C10328 * C5922) *
                 C114 +
             (C10325 * C1704 - C10327 * C1700 + C47473 * C5928 -
              C10328 * C5926) *
                 C47359) *
                C47440) *
               C47261) *
              C47463) *
         C47128) /
            (p * q * std::sqrt(p + q));
    d2ee[60] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C10325 * C122 - C10327 * C115 + C47473 * C491 - C10328 * C481) *
                 C114 +
             (C10325 * C136 - C10327 * C123 + C47473 * C511 - C10328 * C492) *
                 C47359) *
                C4745 +
            ((C10330 - C10331 + C10332 - C10333) * C114 +
             (C10334 - C10335 + C10336 - C10337) * C47359) *
                C47440) *
               C47174 * C1420 +
           (((C10327 * C294 - C10325 * C304 + C10328 * C931 - C47473 * C936) *
                 C114 +
             (C10327 * C305 - C10325 * C324 + C10328 * C937 - C47473 * C946) *
                 C47359) *
                C4745 +
            ((C10508 - C10509 + C10510 - C10511) * C114 +
             (C10512 - C10513 + C10514 - C10515) * C47359) *
                C47440) *
               C47174 * C1421 +
           (((C10325 * C310 - C10327 * C297 + C47473 * C1301 - C10328 * C1289) *
                 C114 +
             (C10325 * C327 - C10327 * C311 + C47473 * C1316 - C10328 * C1302) *
                 C47359) *
                C4745 +
            ((C10516 - C10517 + C10518 - C10519) * C114 +
             (C10520 - C10521 + C10522 - C10523) * C47359) *
                C47440) *
               C47174 * C1422 +
           (((C10327 * C1152 - C10325 * C1158 + C10328 * C1694 -
              C47473 * C1697) *
                 C114 +
             (C10327 * C1159 - C10325 * C1170 + C10328 * C1698 -
              C47473 * C1703) *
                 C47359) *
                C4745 +
            ((C11708 - C11709 + C11710 - C11711) * C114 +
             (C11712 - C11713 + C11714 - C11715) * C47359) *
                C47440) *
               C47174 * C47463) *
              C47407 +
          ((((C10331 - C10330 + C10333 - C10332) * C114 +
             (C10335 - C10334 + C10337 - C10336) * C47359) *
                C4745 +
            ((C10338 - C10339 + C10340 - C10341) * C114 +
             (C10342 - C10343 + C10344 - C10345) * C47359) *
                C47440) *
               C47174 * C1420 +
           (((C10509 - C10508 + C10511 - C10510) * C114 +
             (C10513 - C10512 + C10515 - C10514) * C47359) *
                C4745 +
            ((C10524 - C10525 + C10526 - C10527) * C114 +
             (C10528 - C10529 + C10530 - C10531) * C47359) *
                C47440) *
               C47174 * C1421 +
           (((C10517 - C10516 + C10519 - C10518) * C114 +
             (C10521 - C10520 + C10523 - C10522) * C47359) *
                C4745 +
            ((C10532 - C10533 + C10534 - C10535) * C114 +
             (C10536 - C10537 + C10538 - C10539) * C47359) *
                C47440) *
               C47174 * C1422 +
           (((C11709 - C11708 + C11711 - C11710) * C114 +
             (C11713 - C11712 + C11715 - C11714) * C47359) *
                C4745 +
            ((C10325 * C1162 - C10327 * C1154 + C47473 * C1701 -
              C10328 * C1696) *
                 C114 +
             (C10325 * C1172 - C10327 * C1163 + C47473 * C1705 -
              C10328 * C1702) *
                 C47359) *
                C47440) *
               C47174 * C47463) *
              C47139)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C10325 * C122 - C10327 * C115 + C47473 * C491 - C10328 * C481) *
                 C114 +
             (C10325 * C136 - C10327 * C123 + C47473 * C511 - C10328 * C492) *
                 C47359) *
                C4745 +
            ((C10330 - C10331 + C10332 - C10333) * C114 +
             (C10334 - C10335 + C10336 - C10337) * C47359) *
                C47440) *
               C47174 * C47421 +
           (((C10327 * C294 - C10325 * C304 + C10328 * C931 - C47473 * C936) *
                 C114 +
             (C10327 * C305 - C10325 * C324 + C10328 * C937 - C47473 * C946) *
                 C47359) *
                C4745 +
            ((C10508 - C10509 + C10510 - C10511) * C114 +
             (C10512 - C10513 + C10514 - C10515) * C47359) *
                C47440) *
               C47174 * C47219) *
              C655 +
          ((((C10331 - C10330 + C10333 - C10332) * C114 +
             (C10335 - C10334 + C10337 - C10336) * C47359) *
                C4745 +
            ((C10338 - C10339 + C10340 - C10341) * C114 +
             (C10342 - C10343 + C10344 - C10345) * C47359) *
                C47440) *
               C47174 * C47421 +
           (((C10509 - C10508 + C10511 - C10510) * C114 +
             (C10513 - C10512 + C10515 - C10514) * C47359) *
                C4745 +
            ((C10524 - C10525 + C10526 - C10527) * C114 +
             (C10528 - C10529 + C10530 - C10531) * C47359) *
                C47440) *
               C47174 * C47219) *
              C656 +
          ((((C10339 - C10338 + C10341 - C10340) * C114 +
             (C10343 - C10342 + C10345 - C10344) * C47359) *
                C4745 +
            ((C10346 - C10347 + C10348 - C10349) * C114 +
             (C10350 - C10351 + C10352 - C10353) * C47359) *
                C47440) *
               C47174 * C47421 +
           (((C10525 - C10524 + C10527 - C10526) * C114 +
             (C10529 - C10528 + C10531 - C10530) * C47359) *
                C4745 +
            ((C10848 - C10849 + C10850 - C10851) * C114 +
             (C10852 - C10853 + C10854 - C10855) * C47359) *
                C47440) *
               C47174 * C47219) *
              C657 +
          ((((C10347 - C10346 + C10349 - C10348) * C114 +
             (C10351 - C10350 + C10353 - C10352) * C47359) *
                C4745 +
            ((C10354 - C10355 + C10356 - C10357) * C114 +
             (C10358 - C10359 + C10360 - C10361) * C47359) *
                C47440) *
               C47174 * C47421 +
           (((C10849 - C10848 + C10851 - C10850) * C114 +
             (C10853 - C10852 + C10855 - C10854) * C47359) *
                C4745 +
            ((C10325 * C320 - C10327 * C302 + C47473 * C944 - C10328 * C935) *
                 C114 +
             (C10325 * C332 - C10327 * C321 + C47473 * C950 - C10328 * C945) *
                 C47359) *
                C47440) *
               C47174 * C47219) *
              C47457)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C10325 * C122 - C10327 * C115 + C47473 * C491 - C10328 * C481) *
                  C114 +
              (C10325 * C136 - C10327 * C123 + C47473 * C511 - C10328 * C492) *
                  C47359) *
                 C4745 +
             ((C10330 - C10331 + C10332 - C10333) * C114 +
              (C10334 - C10335 + C10336 - C10337) * C47359) *
                 C47440) *
                C1816 +
            (((C10327 * C481 - C10325 * C491 + C10328 * C484 - C47473 * C497) *
                  C114 +
              (C10327 * C492 - C10325 * C511 + C10328 * C498 - C47473 * C514) *
                  C47359) *
                 C4745 +
             ((C10686 - C10687 + C10688 - C10689) * C114 +
              (C10690 - C10691 + C10692 - C10693) * C47359) *
                 C47440) *
                C1817 +
            (((C10325 * C497 - C10327 * C484 + C47473 * C2002 -
               C10328 * C1996) *
                  C114 +
              (C10325 * C514 - C10327 * C498 + C47473 * C2014 -
               C10328 * C2003) *
                  C47359) *
                 C4745 +
             ((C10694 - C10695 + C10696 - C10697) * C114 +
              (C10698 - C10699 + C10700 - C10701) * C47359) *
                 C47440) *
                C47456) *
               C47421 +
           ((((C10327 * C294 - C10325 * C304 + C10328 * C931 - C47473 * C936) *
                  C114 +
              (C10327 * C305 - C10325 * C324 + C10328 * C937 - C47473 * C946) *
                  C47359) *
                 C4745 +
             ((C10508 - C10509 + C10510 - C10511) * C114 +
              (C10512 - C10513 + C10514 - C10515) * C47359) *
                 C47440) *
                C1816 +
            (((C10325 * C936 - C10327 * C931 + C47473 * C1295 -
               C10328 * C1286) *
                  C114 +
              (C10325 * C946 - C10327 * C937 + C47473 * C1313 -
               C10328 * C1296) *
                  C47359) *
                 C4745 +
             ((C11188 - C11189 + C11190 - C11191) * C114 +
              (C11192 - C11193 + C11194 - C11195) * C47359) *
                 C47440) *
                C1817 +
            (((C10327 * C1286 - C10325 * C1295 + C10328 * C2390 -
               C47473 * C2393) *
                  C114 +
              (C10327 * C1296 - C10325 * C1313 + C10328 * C2394 -
               C47473 * C2399) *
                  C47359) *
                 C4745 +
             ((C12624 - C12625 + C12626 - C12627) * C114 +
              (C12628 - C12629 + C12630 - C12631) * C47359) *
                 C47440) *
                C47456) *
               C47219) *
              C47407 +
          (((((C10331 - C10330 + C10333 - C10332) * C114 +
              (C10335 - C10334 + C10337 - C10336) * C47359) *
                 C4745 +
             ((C10338 - C10339 + C10340 - C10341) * C114 +
              (C10342 - C10343 + C10344 - C10345) * C47359) *
                 C47440) *
                C1816 +
            (((C10687 - C10686 + C10689 - C10688) * C114 +
              (C10691 - C10690 + C10693 - C10692) * C47359) *
                 C4745 +
             ((C10702 - C10703 + C10704 - C10705) * C114 +
              (C10706 - C10707 + C10708 - C10709) * C47359) *
                 C47440) *
                C1817 +
            (((C10695 - C10694 + C10697 - C10696) * C114 +
              (C10699 - C10698 + C10701 - C10700) * C47359) *
                 C4745 +
             ((C10710 - C10711 + C10712 - C10713) * C114 +
              (C10714 - C10715 + C10716 - C10717) * C47359) *
                 C47440) *
                C47456) *
               C47421 +
           ((((C10509 - C10508 + C10511 - C10510) * C114 +
              (C10513 - C10512 + C10515 - C10514) * C47359) *
                 C4745 +
             ((C10524 - C10525 + C10526 - C10527) * C114 +
              (C10528 - C10529 + C10530 - C10531) * C47359) *
                 C47440) *
                C1816 +
            (((C11189 - C11188 + C11191 - C11190) * C114 +
              (C11193 - C11192 + C11195 - C11194) * C47359) *
                 C4745 +
             ((C11196 - C11197 + C11198 - C11199) * C114 +
              (C11200 - C11201 + C11202 - C11203) * C47359) *
                 C47440) *
                C1817 +
            (((C12625 - C12624 + C12627 - C12626) * C114 +
              (C12629 - C12628 + C12631 - C12630) * C47359) *
                 C4745 +
             ((C10325 * C1299 - C10327 * C1288 + C47473 * C2397 -
               C10328 * C2392) *
                  C114 +
              (C10325 * C1315 - C10327 * C1300 + C47473 * C2401 -
               C10328 * C2398) *
                  C47359) *
                 C47440) *
                C47456) *
               C47219) *
              C47139)) /
            (p * q * std::sqrt(p + q));
    d2ee[61] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C10325 * C122 - C10327 * C115 + C47473 * C491 - C10328 * C481) *
                 C114 +
             (C10325 * C136 - C10327 * C123 + C47473 * C511 - C10328 * C492) *
                 C47359) *
                C4745 +
            ((C10330 - C10331 + C10332 - C10333) * C114 +
             (C10334 - C10335 + C10336 - C10337) * C47359) *
                C47440) *
               C47422 +
           (((C10327 * C481 - C10325 * C491 + C10328 * C484 - C47473 * C497) *
                 C114 +
             (C10327 * C492 - C10325 * C511 + C10328 * C498 - C47473 * C514) *
                 C47359) *
                C4745 +
            ((C10686 - C10687 + C10688 - C10689) * C114 +
             (C10690 - C10691 + C10692 - C10693) * C47359) *
                C47440) *
               C47261) *
              C1420 +
          ((((C10327 * C294 - C10325 * C304 + C10328 * C931 - C47473 * C936) *
                 C114 +
             (C10327 * C305 - C10325 * C324 + C10328 * C937 - C47473 * C946) *
                 C47359) *
                C4745 +
            ((C10508 - C10509 + C10510 - C10511) * C114 +
             (C10512 - C10513 + C10514 - C10515) * C47359) *
                C47440) *
               C47422 +
           (((C10325 * C936 - C10327 * C931 + C47473 * C1295 - C10328 * C1286) *
                 C114 +
             (C10325 * C946 - C10327 * C937 + C47473 * C1313 - C10328 * C1296) *
                 C47359) *
                C4745 +
            ((C11188 - C11189 + C11190 - C11191) * C114 +
             (C11192 - C11193 + C11194 - C11195) * C47359) *
                C47440) *
               C47261) *
              C1421 +
          ((((C10325 * C310 - C10327 * C297 + C47473 * C1301 - C10328 * C1289) *
                 C114 +
             (C10325 * C327 - C10327 * C311 + C47473 * C1316 - C10328 * C1302) *
                 C47359) *
                C4745 +
            ((C10516 - C10517 + C10518 - C10519) * C114 +
             (C10520 - C10521 + C10522 - C10523) * C47359) *
                C47440) *
               C47422 +
           (((C10327 * C1289 - C10325 * C1301 + C10328 * C1292 -
              C47473 * C1307) *
                 C114 +
             (C10327 * C1302 - C10325 * C1316 + C10328 * C1308 -
              C47473 * C1319) *
                 C47359) *
                C4745 +
            ((C11910 - C11911 + C11912 - C11913) * C114 +
             (C11914 - C11915 + C11916 - C11917) * C47359) *
                C47440) *
               C47261) *
              C1422 +
          ((((C10327 * C1152 - C10325 * C1158 + C10328 * C1694 -
              C47473 * C1697) *
                 C114 +
             (C10327 * C1159 - C10325 * C1170 + C10328 * C1698 -
              C47473 * C1703) *
                 C47359) *
                C4745 +
            ((C11708 - C11709 + C11710 - C11711) * C114 +
             (C11712 - C11713 + C11714 - C11715) * C47359) *
                C47440) *
               C47422 +
           (((C10325 * C1697 - C10327 * C1694 + C47473 * C5923 -
              C10328 * C5921) *
                 C114 +
             (C10325 * C1703 - C10327 * C1698 + C47473 * C5927 -
              C10328 * C5924) *
                 C47359) *
                C4745 +
            ((C10325 * C1699 - C10327 * C1695 + C47473 * C5925 -
              C10328 * C5922) *
                 C114 +
             (C10325 * C1704 - C10327 * C1700 + C47473 * C5928 -
              C10328 * C5926) *
                 C47359) *
                C47440) *
               C47261) *
              C47463) *
         C47128) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C10325 * C122 - C10327 * C115 + C47473 * C491 - C10328 * C481) *
                  C114 +
              (C10325 * C136 - C10327 * C123 + C47473 * C511 - C10328 * C492) *
                  C47359) *
                 C4745 +
             ((C10330 - C10331 + C10332 - C10333) * C114 +
              (C10334 - C10335 + C10336 - C10337) * C47359) *
                 C47440) *
                C47422 +
            (((C10327 * C481 - C10325 * C491 + C10328 * C484 - C47473 * C497) *
                  C114 +
              (C10327 * C492 - C10325 * C511 + C10328 * C498 - C47473 * C514) *
                  C47359) *
                 C4745 +
             ((C10686 - C10687 + C10688 - C10689) * C114 +
              (C10690 - C10691 + C10692 - C10693) * C47359) *
                 C47440) *
                C47261) *
               C47421 +
           ((((C10327 * C294 - C10325 * C304 + C10328 * C931 - C47473 * C936) *
                  C114 +
              (C10327 * C305 - C10325 * C324 + C10328 * C937 - C47473 * C946) *
                  C47359) *
                 C4745 +
             ((C10508 - C10509 + C10510 - C10511) * C114 +
              (C10512 - C10513 + C10514 - C10515) * C47359) *
                 C47440) *
                C47422 +
            (((C10325 * C936 - C10327 * C931 + C47473 * C1295 -
               C10328 * C1286) *
                  C114 +
              (C10325 * C946 - C10327 * C937 + C47473 * C1313 -
               C10328 * C1296) *
                  C47359) *
                 C4745 +
             ((C11188 - C11189 + C11190 - C11191) * C114 +
              (C11192 - C11193 + C11194 - C11195) * C47359) *
                 C47440) *
                C47261) *
               C47219) *
              C291 +
          (((((C10331 - C10330 + C10333 - C10332) * C114 +
              (C10335 - C10334 + C10337 - C10336) * C47359) *
                 C4745 +
             ((C10338 - C10339 + C10340 - C10341) * C114 +
              (C10342 - C10343 + C10344 - C10345) * C47359) *
                 C47440) *
                C47422 +
            (((C10687 - C10686 + C10689 - C10688) * C114 +
              (C10691 - C10690 + C10693 - C10692) * C47359) *
                 C4745 +
             ((C10702 - C10703 + C10704 - C10705) * C114 +
              (C10706 - C10707 + C10708 - C10709) * C47359) *
                 C47440) *
                C47261) *
               C47421 +
           ((((C10509 - C10508 + C10511 - C10510) * C114 +
              (C10513 - C10512 + C10515 - C10514) * C47359) *
                 C4745 +
             ((C10524 - C10525 + C10526 - C10527) * C114 +
              (C10528 - C10529 + C10530 - C10531) * C47359) *
                 C47440) *
                C47422 +
            (((C11189 - C11188 + C11191 - C11190) * C114 +
              (C11193 - C11192 + C11195 - C11194) * C47359) *
                 C4745 +
             ((C11196 - C11197 + C11198 - C11199) * C114 +
              (C11200 - C11201 + C11202 - C11203) * C47359) *
                 C47440) *
                C47261) *
               C47219) *
              C292 +
          (((((C10339 - C10338 + C10341 - C10340) * C114 +
              (C10343 - C10342 + C10345 - C10344) * C47359) *
                 C4745 +
             ((C10346 - C10347 + C10348 - C10349) * C114 +
              (C10350 - C10351 + C10352 - C10353) * C47359) *
                 C47440) *
                C47422 +
            (((C10703 - C10702 + C10705 - C10704) * C114 +
              (C10707 - C10706 + C10709 - C10708) * C47359) *
                 C4745 +
             ((C10986 - C10987 + C10988 - C10989) * C114 +
              (C10990 - C10991 + C10992 - C10993) * C47359) *
                 C47440) *
                C47261) *
               C47421 +
           ((((C10525 - C10524 + C10527 - C10526) * C114 +
              (C10529 - C10528 + C10531 - C10530) * C47359) *
                 C4745 +
             ((C10848 - C10849 + C10850 - C10851) * C114 +
              (C10852 - C10853 + C10854 - C10855) * C47359) *
                 C47440) *
                C47422 +
            (((C11197 - C11196 + C11199 - C11198) * C114 +
              (C11201 - C11200 + C11203 - C11202) * C47359) *
                 C4745 +
             ((C10325 * C942 - C10327 * C934 + C47473 * C2167 -
               C10328 * C2166) *
                  C114 +
              (C10325 * C949 - C10327 * C943 + C47473 * C2169 -
               C10328 * C2168) *
                  C47359) *
                 C47440) *
                C47261) *
               C47219) *
              C47447)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C10325 * C122 - C10327 * C115 + C47473 * C491 - C10328 * C481) *
                 C114 +
             (C10325 * C136 - C10327 * C123 + C47473 * C511 - C10328 * C492) *
                 C47359) *
                C4745 +
            ((C10330 - C10331 + C10332 - C10333) * C114 +
             (C10334 - C10335 + C10336 - C10337) * C47359) *
                C47440) *
               C2276 +
           (((C10327 * C481 - C10325 * C491 + C10328 * C484 - C47473 * C497) *
                 C114 +
             (C10327 * C492 - C10325 * C511 + C10328 * C498 - C47473 * C514) *
                 C47359) *
                C4745 +
            ((C10686 - C10687 + C10688 - C10689) * C114 +
             (C10690 - C10691 + C10692 - C10693) * C47359) *
                C47440) *
               C2277 +
           (((C10325 * C497 - C10327 * C484 + C47473 * C2002 - C10328 * C1996) *
                 C114 +
             (C10325 * C514 - C10327 * C498 + C47473 * C2014 - C10328 * C2003) *
                 C47359) *
                C4745 +
            ((C10694 - C10695 + C10696 - C10697) * C114 +
             (C10698 - C10699 + C10700 - C10701) * C47359) *
                C47440) *
               C2278 +
           (((C10327 * C1996 - C10325 * C2002 + C10328 * C1999 -
              C47473 * C2008) *
                 C114 +
             (C10327 * C2003 - C10325 * C2014 + C10328 * C2009 -
              C47473 * C2017) *
                 C47359) *
                C4745 +
            ((C12762 - C12763 + C12764 - C12765) * C114 +
             (C12766 - C12767 + C12768 - C12769) * C47359) *
                C47440) *
               C47469) *
              C47421 +
          ((((C10327 * C294 - C10325 * C304 + C10328 * C931 - C47473 * C936) *
                 C114 +
             (C10327 * C305 - C10325 * C324 + C10328 * C937 - C47473 * C946) *
                 C47359) *
                C4745 +
            ((C10508 - C10509 + C10510 - C10511) * C114 +
             (C10512 - C10513 + C10514 - C10515) * C47359) *
                C47440) *
               C2276 +
           (((C10325 * C936 - C10327 * C931 + C47473 * C1295 - C10328 * C1286) *
                 C114 +
             (C10325 * C946 - C10327 * C937 + C47473 * C1313 - C10328 * C1296) *
                 C47359) *
                C4745 +
            ((C11188 - C11189 + C11190 - C11191) * C114 +
             (C11192 - C11193 + C11194 - C11195) * C47359) *
                C47440) *
               C2277 +
           (((C10327 * C1286 - C10325 * C1295 + C10328 * C2390 -
              C47473 * C2393) *
                 C114 +
             (C10327 * C1296 - C10325 * C1313 + C10328 * C2394 -
              C47473 * C2399) *
                 C47359) *
                C4745 +
            ((C12624 - C12625 + C12626 - C12627) * C114 +
             (C12628 - C12629 + C12630 - C12631) * C47359) *
                C47440) *
               C2278 +
           (((C10325 * C2393 - C10327 * C2390 + C47473 * C6799 -
              C10328 * C6797) *
                 C114 +
             (C10325 * C2399 - C10327 * C2394 + C47473 * C6803 -
              C10328 * C6800) *
                 C47359) *
                C4745 +
            ((C10325 * C2395 - C10327 * C2391 + C47473 * C6801 -
              C10328 * C6798) *
                 C114 +
             (C10325 * C2400 - C10327 * C2396 + C47473 * C6804 -
              C10328 * C6802) *
                 C47359) *
                C47440) *
               C47469) *
              C47219) *
         C47128) /
            (p * q * std::sqrt(p + q));
    d2ee[62] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C10325 * C122 - C10327 * C115 + C47473 * C491 -
                 C10328 * C481) *
                    C114 +
                (C10325 * C136 - C10327 * C123 + C47473 * C511 -
                 C10328 * C492) *
                    C47359) *
                   C4745 +
               ((C10330 - C10331 + C10332 - C10333) * C114 +
                (C10334 - C10335 + C10336 - C10337) * C47359) *
                   C47440) *
                  C47174 * C47156 * C108 +
              (((C10331 - C10330 + C10333 - C10332) * C114 +
                (C10335 - C10334 + C10337 - C10336) * C47359) *
                   C4745 +
               ((C10338 - C10339 + C10340 - C10341) * C114 +
                (C10342 - C10343 + C10344 - C10345) * C47359) *
                   C47440) *
                  C47174 * C47156 * C109 +
              (((C10339 - C10338 + C10341 - C10340) * C114 +
                (C10343 - C10342 + C10345 - C10344) * C47359) *
                   C4745 +
               ((C10346 - C10347 + C10348 - C10349) * C114 +
                (C10350 - C10351 + C10352 - C10353) * C47359) *
                   C47440) *
                  C47174 * C47156 * C110 +
              (((C10347 - C10346 + C10349 - C10348) * C114 +
                (C10351 - C10350 + C10353 - C10352) * C47359) *
                   C4745 +
               ((C10354 - C10355 + C10356 - C10357) * C114 +
                (C10358 - C10359 + C10360 - C10361) * C47359) *
                   C47440) *
                  C47174 * C47156 * C111 +
              (((C10355 - C10354 + C10357 - C10356) * C114 +
                (C10359 - C10358 + C10361 - C10360) * C47359) *
                   C4745 +
               ((C10325 * C132 - C10327 * C120 + C47473 * C773 -
                 C10328 * C772) *
                    C114 +
                (C10325 * C141 - C10327 * C133 + C47473 * C775 -
                 C10328 * C774) *
                    C47359) *
                   C47440) *
                  C47174 * C47156 * C112) +
         0.5 * std::pow(Pi, 2.5) *
             (((((C10325 * C122 - C10327 * C115 + C47473 * C491 -
                  C10328 * C481) *
                     C114 +
                 (C10325 * C136 - C10327 * C123 + C47473 * C511 -
                  C10328 * C492) *
                     C47359) *
                    C4745 +
                ((C10330 - C10331 + C10332 - C10333) * C114 +
                 (C10334 - C10335 + C10336 - C10337) * C47359) *
                    C47440) *
                   C47174 * C47492 +
               (((C10327 * C294 - C10325 * C304 + C10328 * C931 -
                  C47473 * C936) *
                     C114 +
                 (C10327 * C305 - C10325 * C324 + C10328 * C937 -
                  C47473 * C946) *
                     C47359) *
                    C4745 +
                ((C10508 - C10509 + C10510 - C10511) * C114 +
                 (C10512 - C10513 + C10514 - C10515) * C47359) *
                    C47440) *
                   C47174 * C47480 +
               (((C10325 * C310 - C10327 * C297 + C47473 * C1301 -
                  C10328 * C1289) *
                     C114 +
                 (C10325 * C327 - C10327 * C311 + C47473 * C1316 -
                  C10328 * C1302) *
                     C47359) *
                    C4745 +
                ((C10516 - C10517 + C10518 - C10519) * C114 +
                 (C10520 - C10521 + C10522 - C10523) * C47359) *
                    C47440) *
                   C47174 * C47453) *
                  C291 +
              ((((C10331 - C10330 + C10333 - C10332) * C114 +
                 (C10335 - C10334 + C10337 - C10336) * C47359) *
                    C4745 +
                ((C10338 - C10339 + C10340 - C10341) * C114 +
                 (C10342 - C10343 + C10344 - C10345) * C47359) *
                    C47440) *
                   C47174 * C47492 +
               (((C10509 - C10508 + C10511 - C10510) * C114 +
                 (C10513 - C10512 + C10515 - C10514) * C47359) *
                    C4745 +
                ((C10524 - C10525 + C10526 - C10527) * C114 +
                 (C10528 - C10529 + C10530 - C10531) * C47359) *
                    C47440) *
                   C47174 * C47480 +
               (((C10517 - C10516 + C10519 - C10518) * C114 +
                 (C10521 - C10520 + C10523 - C10522) * C47359) *
                    C4745 +
                ((C10532 - C10533 + C10534 - C10535) * C114 +
                 (C10536 - C10537 + C10538 - C10539) * C47359) *
                    C47440) *
                   C47174 * C47453) *
                  C292 +
              ((((C10339 - C10338 + C10341 - C10340) * C114 +
                 (C10343 - C10342 + C10345 - C10344) * C47359) *
                    C4745 +
                ((C10346 - C10347 + C10348 - C10349) * C114 +
                 (C10350 - C10351 + C10352 - C10353) * C47359) *
                    C47440) *
                   C47174 * C47492 +
               (((C10525 - C10524 + C10527 - C10526) * C114 +
                 (C10529 - C10528 + C10531 - C10530) * C47359) *
                    C4745 +
                ((C10327 * C300 - C10325 * C316 + C10328 * C934 -
                  C47473 * C942) *
                     C114 +
                 (C10327 * C317 - C10325 * C330 + C10328 * C943 -
                  C47473 * C949) *
                     C47359) *
                    C47440) *
                   C47174 * C47480 +
               (((C10533 - C10532 + C10535 - C10534) * C114 +
                 (C10537 - C10536 + C10539 - C10538) * C47359) *
                    C4745 +
                ((C10325 * C318 - C10327 * C301 + C47473 * C1585 -
                  C10328 * C1584) *
                     C114 +
                 (C10325 * C331 - C10327 * C319 + C47473 * C1587 -
                  C10328 * C1586) *
                     C47359) *
                    C47440) *
                   C47174 * C47453) *
                  C47447)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C10325 * C122 - C10327 * C115 + C47473 * C491 - C10328 * C481) *
                 C114 +
             (C10325 * C136 - C10327 * C123 + C47473 * C511 - C10328 * C492) *
                 C47359) *
                C4745 +
            ((C10330 - C10331 + C10332 - C10333) * C114 +
             (C10334 - C10335 + C10336 - C10337) * C47359) *
                C47440) *
               C47493 +
           (((C10327 * C481 - C10325 * C491 + C10328 * C484 - C47473 * C497) *
                 C114 +
             (C10327 * C492 - C10325 * C511 + C10328 * C498 - C47473 * C514) *
                 C47359) *
                C4745 +
            ((C10686 - C10687 + C10688 - C10689) * C114 +
             (C10690 - C10691 + C10692 - C10693) * C47359) *
                C47440) *
               C47482 +
           (((C10325 * C497 - C10327 * C484 + C47473 * C2002 - C10328 * C1996) *
                 C114 +
             (C10325 * C514 - C10327 * C498 + C47473 * C2014 - C10328 * C2003) *
                 C47359) *
                C4745 +
            ((C10694 - C10695 + C10696 - C10697) * C114 +
             (C10698 - C10699 + C10700 - C10701) * C47359) *
                C47440) *
               C47456) *
              C47156 * C291 +
          ((((C10331 - C10330 + C10333 - C10332) * C114 +
             (C10335 - C10334 + C10337 - C10336) * C47359) *
                C4745 +
            ((C10338 - C10339 + C10340 - C10341) * C114 +
             (C10342 - C10343 + C10344 - C10345) * C47359) *
                C47440) *
               C47493 +
           (((C10687 - C10686 + C10689 - C10688) * C114 +
             (C10691 - C10690 + C10693 - C10692) * C47359) *
                C4745 +
            ((C10702 - C10703 + C10704 - C10705) * C114 +
             (C10706 - C10707 + C10708 - C10709) * C47359) *
                C47440) *
               C47482 +
           (((C10695 - C10694 + C10697 - C10696) * C114 +
             (C10699 - C10698 + C10701 - C10700) * C47359) *
                C4745 +
            ((C10710 - C10711 + C10712 - C10713) * C114 +
             (C10714 - C10715 + C10716 - C10717) * C47359) *
                C47440) *
               C47456) *
              C47156 * C292 +
          ((((C10339 - C10338 + C10341 - C10340) * C114 +
             (C10343 - C10342 + C10345 - C10344) * C47359) *
                C4745 +
            ((C10346 - C10347 + C10348 - C10349) * C114 +
             (C10350 - C10351 + C10352 - C10353) * C47359) *
                C47440) *
               C47493 +
           (((C10703 - C10702 + C10705 - C10704) * C114 +
             (C10707 - C10706 + C10709 - C10708) * C47359) *
                C4745 +
            ((C10327 * C487 - C10325 * C503 + C10328 * C488 - C47473 * C505) *
                 C114 +
             (C10327 * C504 - C10325 * C517 + C10328 * C506 - C47473 * C518) *
                 C47359) *
                C47440) *
               C47482 +
           (((C10711 - C10710 + C10713 - C10712) * C114 +
             (C10715 - C10714 + C10717 - C10716) * C47359) *
                C4745 +
            ((C10325 * C505 - C10327 * C488 + C47473 * C2281 - C10328 * C2280) *
                 C114 +
             (C10325 * C518 - C10327 * C506 + C47473 * C2283 - C10328 * C2282) *
                 C47359) *
                C47440) *
               C47456) *
              C47156 * C47447)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C10325 * C122 - C10327 * C115 + C47473 * C491 - C10328 * C481) *
                 C114 +
             (C10325 * C136 - C10327 * C123 + C47473 * C511 - C10328 * C492) *
                 C47359) *
                C4745 +
            ((C10330 - C10331 + C10332 - C10333) * C114 +
             (C10334 - C10335 + C10336 - C10337) * C47359) *
                C47440) *
               C47174 * C1078 +
           (((C10327 * C294 - C10325 * C304 + C10328 * C931 - C47473 * C936) *
                 C114 +
             (C10327 * C305 - C10325 * C324 + C10328 * C937 - C47473 * C946) *
                 C47359) *
                C4745 +
            ((C10508 - C10509 + C10510 - C10511) * C114 +
             (C10512 - C10513 + C10514 - C10515) * C47359) *
                C47440) *
               C47174 * C1079 +
           (((C10325 * C310 - C10327 * C297 + C47473 * C1301 - C10328 * C1289) *
                 C114 +
             (C10325 * C327 - C10327 * C311 + C47473 * C1316 - C10328 * C1302) *
                 C47359) *
                C4745 +
            ((C10516 - C10517 + C10518 - C10519) * C114 +
             (C10520 - C10521 + C10522 - C10523) * C47359) *
                C47440) *
               C47174 * C47453) *
              C47489 +
          ((((C10331 - C10330 + C10333 - C10332) * C114 +
             (C10335 - C10334 + C10337 - C10336) * C47359) *
                C4745 +
            ((C10338 - C10339 + C10340 - C10341) * C114 +
             (C10342 - C10343 + C10344 - C10345) * C47359) *
                C47440) *
               C47174 * C1078 +
           (((C10509 - C10508 + C10511 - C10510) * C114 +
             (C10513 - C10512 + C10515 - C10514) * C47359) *
                C4745 +
            ((C10524 - C10525 + C10526 - C10527) * C114 +
             (C10528 - C10529 + C10530 - C10531) * C47359) *
                C47440) *
               C47174 * C1079 +
           (((C10517 - C10516 + C10519 - C10518) * C114 +
             (C10521 - C10520 + C10523 - C10522) * C47359) *
                C4745 +
            ((C10532 - C10533 + C10534 - C10535) * C114 +
             (C10536 - C10537 + C10538 - C10539) * C47359) *
                C47440) *
               C47174 * C47453) *
              C47476 +
          ((((C10339 - C10338 + C10341 - C10340) * C114 +
             (C10343 - C10342 + C10345 - C10344) * C47359) *
                C4745 +
            ((C10346 - C10347 + C10348 - C10349) * C114 +
             (C10350 - C10351 + C10352 - C10353) * C47359) *
                C47440) *
               C47174 * C1078 +
           (((C10525 - C10524 + C10527 - C10526) * C114 +
             (C10529 - C10528 + C10531 - C10530) * C47359) *
                C4745 +
            ((C10848 - C10849 + C10850 - C10851) * C114 +
             (C10852 - C10853 + C10854 - C10855) * C47359) *
                C47440) *
               C47174 * C1079 +
           (((C10533 - C10532 + C10535 - C10534) * C114 +
             (C10537 - C10536 + C10539 - C10538) * C47359) *
                C4745 +
            ((C10325 * C318 - C10327 * C301 + C47473 * C1585 - C10328 * C1584) *
                 C114 +
             (C10325 * C331 - C10327 * C319 + C47473 * C1587 - C10328 * C1586) *
                 C47359) *
                C47440) *
               C47174 * C47453) *
              C47447)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C10325 * C122 - C10327 * C115 + C47473 * C491 - C10328 * C481) *
                C114 +
            (C10325 * C136 - C10327 * C123 + C47473 * C511 - C10328 * C492) *
                C47359) *
               C4745 +
           ((C10330 - C10331 + C10332 - C10333) * C114 +
            (C10334 - C10335 + C10336 - C10337) * C47359) *
               C47440) *
              C47174 * C1146 +
          (((C10327 * C294 - C10325 * C304 + C10328 * C931 - C47473 * C936) *
                C114 +
            (C10327 * C305 - C10325 * C324 + C10328 * C937 - C47473 * C946) *
                C47359) *
               C4745 +
           ((C10508 - C10509 + C10510 - C10511) * C114 +
            (C10512 - C10513 + C10514 - C10515) * C47359) *
               C47440) *
              C47174 * C1147 +
          (((C10325 * C310 - C10327 * C297 + C47473 * C1301 - C10328 * C1289) *
                C114 +
            (C10325 * C327 - C10327 * C311 + C47473 * C1316 - C10328 * C1302) *
                C47359) *
               C4745 +
           ((C10516 - C10517 + C10518 - C10519) * C114 +
            (C10520 - C10521 + C10522 - C10523) * C47359) *
               C47440) *
              C47174 * C1148 +
          (((C10327 * C1152 - C10325 * C1158 + C10328 * C1694 -
             C47473 * C1697) *
                C114 +
            (C10327 * C1159 - C10325 * C1170 + C10328 * C1698 -
             C47473 * C1703) *
                C47359) *
               C4745 +
           ((C10327 * C1153 - C10325 * C1160 + C10328 * C1695 -
             C47473 * C1699) *
                C114 +
            (C10327 * C1161 - C10325 * C1171 + C10328 * C1700 -
             C47473 * C1704) *
                C47359) *
               C47440) *
              C47174 * C1149 +
          (((C10325 * C1164 - C10327 * C1155 + C47473 * C6413 -
             C10328 * C6411) *
                C114 +
            (C10325 * C1173 - C10327 * C1165 + C47473 * C6417 -
             C10328 * C6414) *
                C47359) *
               C4745 +
           ((C10325 * C1166 - C10327 * C1156 + C47473 * C6415 -
             C10328 * C6412) *
                C114 +
            (C10325 * C1174 - C10327 * C1167 + C47473 * C6418 -
             C10328 * C6416) *
                C47359) *
               C47440) *
              C47174 * C1150) *
         C47128) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C10325 * C122 - C10327 * C115 + C47473 * C491 - C10328 * C481) *
                 C114 +
             (C10325 * C136 - C10327 * C123 + C47473 * C511 - C10328 * C492) *
                 C47359) *
                C4745 +
            ((C10330 - C10331 + C10332 - C10333) * C114 +
             (C10334 - C10335 + C10336 - C10337) * C47359) *
                C47440) *
               C47493 +
           (((C10327 * C481 - C10325 * C491 + C10328 * C484 - C47473 * C497) *
                 C114 +
             (C10327 * C492 - C10325 * C511 + C10328 * C498 - C47473 * C514) *
                 C47359) *
                C4745 +
            ((C10686 - C10687 + C10688 - C10689) * C114 +
             (C10690 - C10691 + C10692 - C10693) * C47359) *
                C47440) *
               C47482 +
           (((C10325 * C497 - C10327 * C484 + C47473 * C2002 - C10328 * C1996) *
                 C114 +
             (C10325 * C514 - C10327 * C498 + C47473 * C2014 - C10328 * C2003) *
                 C47359) *
                C4745 +
            ((C10694 - C10695 + C10696 - C10697) * C114 +
             (C10698 - C10699 + C10700 - C10701) * C47359) *
                C47440) *
               C47456) *
              C1078 +
          ((((C10327 * C294 - C10325 * C304 + C10328 * C931 - C47473 * C936) *
                 C114 +
             (C10327 * C305 - C10325 * C324 + C10328 * C937 - C47473 * C946) *
                 C47359) *
                C4745 +
            ((C10508 - C10509 + C10510 - C10511) * C114 +
             (C10512 - C10513 + C10514 - C10515) * C47359) *
                C47440) *
               C47493 +
           (((C10325 * C936 - C10327 * C931 + C47473 * C1295 - C10328 * C1286) *
                 C114 +
             (C10325 * C946 - C10327 * C937 + C47473 * C1313 - C10328 * C1296) *
                 C47359) *
                C4745 +
            ((C11188 - C11189 + C11190 - C11191) * C114 +
             (C11192 - C11193 + C11194 - C11195) * C47359) *
                C47440) *
               C47482 +
           (((C10327 * C1286 - C10325 * C1295 + C10328 * C2390 -
              C47473 * C2393) *
                 C114 +
             (C10327 * C1296 - C10325 * C1313 + C10328 * C2394 -
              C47473 * C2399) *
                 C47359) *
                C4745 +
            ((C10327 * C1287 - C10325 * C1297 + C10328 * C2391 -
              C47473 * C2395) *
                 C114 +
             (C10327 * C1298 - C10325 * C1314 + C10328 * C2396 -
              C47473 * C2400) *
                 C47359) *
                C47440) *
               C47456) *
              C1079 +
          ((((C10325 * C310 - C10327 * C297 + C47473 * C1301 - C10328 * C1289) *
                 C114 +
             (C10325 * C327 - C10327 * C311 + C47473 * C1316 - C10328 * C1302) *
                 C47359) *
                C4745 +
            ((C10516 - C10517 + C10518 - C10519) * C114 +
             (C10520 - C10521 + C10522 - C10523) * C47359) *
                C47440) *
               C47493 +
           (((C10327 * C1289 - C10325 * C1301 + C10328 * C1292 -
              C47473 * C1307) *
                 C114 +
             (C10327 * C1302 - C10325 * C1316 + C10328 * C1308 -
              C47473 * C1319) *
                 C47359) *
                C4745 +
            ((C10327 * C1290 - C10325 * C1303 + C10328 * C1293 -
              C47473 * C1309) *
                 C114 +
             (C10327 * C1304 - C10325 * C1317 + C10328 * C1310 -
              C47473 * C1320) *
                 C47359) *
                C47440) *
               C47482 +
           (((C10325 * C1307 - C10327 * C1292 + C47473 * C7269 -
              C10328 * C7267) *
                 C114 +
             (C10325 * C1319 - C10327 * C1308 + C47473 * C7273 -
              C10328 * C7270) *
                 C47359) *
                C4745 +
            ((C10325 * C1309 - C10327 * C1293 + C47473 * C7271 -
              C10328 * C7268) *
                 C114 +
             (C10325 * C1320 - C10327 * C1310 + C47473 * C7274 -
              C10328 * C7272) *
                 C47359) *
                C47440) *
               C47456) *
              C47453) *
         C47128) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C10325 * C122 - C10327 * C115 + C47473 * C491 - C10328 * C481) *
                 C114 +
             (C10325 * C136 - C10327 * C123 + C47473 * C511 - C10328 * C492) *
                 C47359) *
                C4745 +
            ((C10330 - C10331 + C10332 - C10333) * C114 +
             (C10334 - C10335 + C10336 - C10337) * C47359) *
                C47440) *
               C1816 +
           (((C10327 * C481 - C10325 * C491 + C10328 * C484 - C47473 * C497) *
                 C114 +
             (C10327 * C492 - C10325 * C511 + C10328 * C498 - C47473 * C514) *
                 C47359) *
                C4745 +
            ((C10686 - C10687 + C10688 - C10689) * C114 +
             (C10690 - C10691 + C10692 - C10693) * C47359) *
                C47440) *
               C1817 +
           (((C10325 * C497 - C10327 * C484 + C47473 * C2002 - C10328 * C1996) *
                 C114 +
             (C10325 * C514 - C10327 * C498 + C47473 * C2014 - C10328 * C2003) *
                 C47359) *
                C4745 +
            ((C10694 - C10695 + C10696 - C10697) * C114 +
             (C10698 - C10699 + C10700 - C10701) * C47359) *
                C47440) *
               C47456) *
              C47156 * C47489 +
          ((((C10331 - C10330 + C10333 - C10332) * C114 +
             (C10335 - C10334 + C10337 - C10336) * C47359) *
                C4745 +
            ((C10338 - C10339 + C10340 - C10341) * C114 +
             (C10342 - C10343 + C10344 - C10345) * C47359) *
                C47440) *
               C1816 +
           (((C10687 - C10686 + C10689 - C10688) * C114 +
             (C10691 - C10690 + C10693 - C10692) * C47359) *
                C4745 +
            ((C10702 - C10703 + C10704 - C10705) * C114 +
             (C10706 - C10707 + C10708 - C10709) * C47359) *
                C47440) *
               C1817 +
           (((C10695 - C10694 + C10697 - C10696) * C114 +
             (C10699 - C10698 + C10701 - C10700) * C47359) *
                C4745 +
            ((C10710 - C10711 + C10712 - C10713) * C114 +
             (C10714 - C10715 + C10716 - C10717) * C47359) *
                C47440) *
               C47456) *
              C47156 * C47476 +
          ((((C10339 - C10338 + C10341 - C10340) * C114 +
             (C10343 - C10342 + C10345 - C10344) * C47359) *
                C4745 +
            ((C10346 - C10347 + C10348 - C10349) * C114 +
             (C10350 - C10351 + C10352 - C10353) * C47359) *
                C47440) *
               C1816 +
           (((C10703 - C10702 + C10705 - C10704) * C114 +
             (C10707 - C10706 + C10709 - C10708) * C47359) *
                C4745 +
            ((C10986 - C10987 + C10988 - C10989) * C114 +
             (C10990 - C10991 + C10992 - C10993) * C47359) *
                C47440) *
               C1817 +
           (((C10711 - C10710 + C10713 - C10712) * C114 +
             (C10715 - C10714 + C10717 - C10716) * C47359) *
                C4745 +
            ((C10325 * C505 - C10327 * C488 + C47473 * C2281 - C10328 * C2280) *
                 C114 +
             (C10325 * C518 - C10327 * C506 + C47473 * C2283 - C10328 * C2282) *
                 C47359) *
                C47440) *
               C47456) *
              C47156 * C47447)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C10325 * C122 - C10327 * C115 + C47473 * C491 - C10328 * C481) *
                 C114 +
             (C10325 * C136 - C10327 * C123 + C47473 * C511 - C10328 * C492) *
                 C47359) *
                C4745 +
            ((C10330 - C10331 + C10332 - C10333) * C114 +
             (C10334 - C10335 + C10336 - C10337) * C47359) *
                C47440) *
               C1816 +
           (((C10327 * C481 - C10325 * C491 + C10328 * C484 - C47473 * C497) *
                 C114 +
             (C10327 * C492 - C10325 * C511 + C10328 * C498 - C47473 * C514) *
                 C47359) *
                C4745 +
            ((C10686 - C10687 + C10688 - C10689) * C114 +
             (C10690 - C10691 + C10692 - C10693) * C47359) *
                C47440) *
               C1817 +
           (((C10325 * C497 - C10327 * C484 + C47473 * C2002 - C10328 * C1996) *
                 C114 +
             (C10325 * C514 - C10327 * C498 + C47473 * C2014 - C10328 * C2003) *
                 C47359) *
                C4745 +
            ((C10694 - C10695 + C10696 - C10697) * C114 +
             (C10698 - C10699 + C10700 - C10701) * C47359) *
                C47440) *
               C47456) *
              C47492 +
          ((((C10327 * C294 - C10325 * C304 + C10328 * C931 - C47473 * C936) *
                 C114 +
             (C10327 * C305 - C10325 * C324 + C10328 * C937 - C47473 * C946) *
                 C47359) *
                C4745 +
            ((C10508 - C10509 + C10510 - C10511) * C114 +
             (C10512 - C10513 + C10514 - C10515) * C47359) *
                C47440) *
               C1816 +
           (((C10325 * C936 - C10327 * C931 + C47473 * C1295 - C10328 * C1286) *
                 C114 +
             (C10325 * C946 - C10327 * C937 + C47473 * C1313 - C10328 * C1296) *
                 C47359) *
                C4745 +
            ((C11188 - C11189 + C11190 - C11191) * C114 +
             (C11192 - C11193 + C11194 - C11195) * C47359) *
                C47440) *
               C1817 +
           (((C10327 * C1286 - C10325 * C1295 + C10328 * C2390 -
              C47473 * C2393) *
                 C114 +
             (C10327 * C1296 - C10325 * C1313 + C10328 * C2394 -
              C47473 * C2399) *
                 C47359) *
                C4745 +
            ((C10327 * C1287 - C10325 * C1297 + C10328 * C2391 -
              C47473 * C2395) *
                 C114 +
             (C10327 * C1298 - C10325 * C1314 + C10328 * C2396 -
              C47473 * C2400) *
                 C47359) *
                C47440) *
               C47456) *
              C47480 +
          ((((C10325 * C310 - C10327 * C297 + C47473 * C1301 - C10328 * C1289) *
                 C114 +
             (C10325 * C327 - C10327 * C311 + C47473 * C1316 - C10328 * C1302) *
                 C47359) *
                C4745 +
            ((C10516 - C10517 + C10518 - C10519) * C114 +
             (C10520 - C10521 + C10522 - C10523) * C47359) *
                C47440) *
               C1816 +
           (((C10327 * C1289 - C10325 * C1301 + C10328 * C1292 -
              C47473 * C1307) *
                 C114 +
             (C10327 * C1302 - C10325 * C1316 + C10328 * C1308 -
              C47473 * C1319) *
                 C47359) *
                C4745 +
            ((C11910 - C11911 + C11912 - C11913) * C114 +
             (C11914 - C11915 + C11916 - C11917) * C47359) *
                C47440) *
               C1817 +
           (((C10325 * C1307 - C10327 * C1292 + C47473 * C7269 -
              C10328 * C7267) *
                 C114 +
             (C10325 * C1319 - C10327 * C1308 + C47473 * C7273 -
              C10328 * C7270) *
                 C47359) *
                C4745 +
            ((C10325 * C1309 - C10327 * C1293 + C47473 * C7271 -
              C10328 * C7268) *
                 C114 +
             (C10325 * C1320 - C10327 * C1310 + C47473 * C7274 -
              C10328 * C7272) *
                 C47359) *
                C47440) *
               C47456) *
              C47453) *
         C47128) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C10325 * C122 - C10327 * C115 + C47473 * C491 - C10328 * C481) *
                C114 +
            (C10325 * C136 - C10327 * C123 + C47473 * C511 - C10328 * C492) *
                C47359) *
               C4745 +
           ((C10330 - C10331 + C10332 - C10333) * C114 +
            (C10334 - C10335 + C10336 - C10337) * C47359) *
               C47440) *
              C1991 +
          (((C10327 * C481 - C10325 * C491 + C10328 * C484 - C47473 * C497) *
                C114 +
            (C10327 * C492 - C10325 * C511 + C10328 * C498 - C47473 * C514) *
                C47359) *
               C4745 +
           ((C10686 - C10687 + C10688 - C10689) * C114 +
            (C10690 - C10691 + C10692 - C10693) * C47359) *
               C47440) *
              C1992 +
          (((C10325 * C497 - C10327 * C484 + C47473 * C2002 - C10328 * C1996) *
                C114 +
            (C10325 * C514 - C10327 * C498 + C47473 * C2014 - C10328 * C2003) *
                C47359) *
               C4745 +
           ((C10694 - C10695 + C10696 - C10697) * C114 +
            (C10698 - C10699 + C10700 - C10701) * C47359) *
               C47440) *
              C1993 +
          (((C10327 * C1996 - C10325 * C2002 + C10328 * C1999 -
             C47473 * C2008) *
                C114 +
            (C10327 * C2003 - C10325 * C2014 + C10328 * C2009 -
             C47473 * C2017) *
                C47359) *
               C4745 +
           ((C10327 * C1997 - C10325 * C2004 + C10328 * C2000 -
             C47473 * C2010) *
                C114 +
            (C10327 * C2005 - C10325 * C2015 + C10328 * C2011 -
             C47473 * C2018) *
                C47359) *
               C47440) *
              C1994 +
          (((C10325 * C2008 - C10327 * C1999 + C47473 * C12423 -
             C10328 * C12421) *
                C114 +
            (C10325 * C2017 - C10327 * C2009 + C47473 * C12427 -
             C10328 * C12424) *
                C47359) *
               C4745 +
           ((C10325 * C2010 - C10327 * C2000 + C47473 * C12425 -
             C10328 * C12422) *
                C114 +
            (C10325 * C2018 - C10327 * C2011 + C47473 * C12428 -
             C10328 * C12426) *
                C47359) *
               C47440) *
              C1995) *
         C47156 * C47128) /
            (p * q * std::sqrt(p + q));
    d2ee[63] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C10325 * C122 - C10327 * C115 + C47473 * C491 - C10328 * C481) *
                  C114 +
              (C10325 * C136 - C10327 * C123 + C47473 * C511 - C10328 * C492) *
                  C47359) *
                 C4745 +
             ((C10330 - C10331 + C10332 - C10333) * C114 +
              (C10334 - C10335 + C10336 - C10337) * C47359) *
                 C47440) *
                C47422 +
            (((C10327 * C481 - C10325 * C491 + C10328 * C484 - C47473 * C497) *
                  C114 +
              (C10327 * C492 - C10325 * C511 + C10328 * C498 - C47473 * C514) *
                  C47359) *
                 C4745 +
             ((C10686 - C10687 + C10688 - C10689) * C114 +
              (C10690 - C10691 + C10692 - C10693) * C47359) *
                 C47440) *
                C47261) *
               C1078 +
           ((((C10327 * C294 - C10325 * C304 + C10328 * C931 - C47473 * C936) *
                  C114 +
              (C10327 * C305 - C10325 * C324 + C10328 * C937 - C47473 * C946) *
                  C47359) *
                 C4745 +
             ((C10508 - C10509 + C10510 - C10511) * C114 +
              (C10512 - C10513 + C10514 - C10515) * C47359) *
                 C47440) *
                C47422 +
            (((C10325 * C936 - C10327 * C931 + C47473 * C1295 -
               C10328 * C1286) *
                  C114 +
              (C10325 * C946 - C10327 * C937 + C47473 * C1313 -
               C10328 * C1296) *
                  C47359) *
                 C4745 +
             ((C11188 - C11189 + C11190 - C11191) * C114 +
              (C11192 - C11193 + C11194 - C11195) * C47359) *
                 C47440) *
                C47261) *
               C1079 +
           ((((C10325 * C310 - C10327 * C297 + C47473 * C1301 -
               C10328 * C1289) *
                  C114 +
              (C10325 * C327 - C10327 * C311 + C47473 * C1316 -
               C10328 * C1302) *
                  C47359) *
                 C4745 +
             ((C10516 - C10517 + C10518 - C10519) * C114 +
              (C10520 - C10521 + C10522 - C10523) * C47359) *
                 C47440) *
                C47422 +
            (((C10327 * C1289 - C10325 * C1301 + C10328 * C1292 -
               C47473 * C1307) *
                  C114 +
              (C10327 * C1302 - C10325 * C1316 + C10328 * C1308 -
               C47473 * C1319) *
                  C47359) *
                 C4745 +
             ((C11910 - C11911 + C11912 - C11913) * C114 +
              (C11914 - C11915 + C11916 - C11917) * C47359) *
                 C47440) *
                C47261) *
               C47453) *
              C47407 +
          (((((C10331 - C10330 + C10333 - C10332) * C114 +
              (C10335 - C10334 + C10337 - C10336) * C47359) *
                 C4745 +
             ((C10338 - C10339 + C10340 - C10341) * C114 +
              (C10342 - C10343 + C10344 - C10345) * C47359) *
                 C47440) *
                C47422 +
            (((C10687 - C10686 + C10689 - C10688) * C114 +
              (C10691 - C10690 + C10693 - C10692) * C47359) *
                 C4745 +
             ((C10702 - C10703 + C10704 - C10705) * C114 +
              (C10706 - C10707 + C10708 - C10709) * C47359) *
                 C47440) *
                C47261) *
               C1078 +
           ((((C10509 - C10508 + C10511 - C10510) * C114 +
              (C10513 - C10512 + C10515 - C10514) * C47359) *
                 C4745 +
             ((C10524 - C10525 + C10526 - C10527) * C114 +
              (C10528 - C10529 + C10530 - C10531) * C47359) *
                 C47440) *
                C47422 +
            (((C11189 - C11188 + C11191 - C11190) * C114 +
              (C11193 - C11192 + C11195 - C11194) * C47359) *
                 C4745 +
             ((C11196 - C11197 + C11198 - C11199) * C114 +
              (C11200 - C11201 + C11202 - C11203) * C47359) *
                 C47440) *
                C47261) *
               C1079 +
           ((((C10517 - C10516 + C10519 - C10518) * C114 +
              (C10521 - C10520 + C10523 - C10522) * C47359) *
                 C4745 +
             ((C10532 - C10533 + C10534 - C10535) * C114 +
              (C10536 - C10537 + C10538 - C10539) * C47359) *
                 C47440) *
                C47422 +
            (((C11911 - C11910 + C11913 - C11912) * C114 +
              (C11915 - C11914 + C11917 - C11916) * C47359) *
                 C4745 +
             ((C10325 * C1305 - C10327 * C1291 + C47473 * C1311 -
               C10328 * C1294) *
                  C114 +
              (C10325 * C1318 - C10327 * C1306 + C47473 * C1321 -
               C10328 * C1312) *
                  C47359) *
                 C47440) *
                C47261) *
               C47453) *
              C47139)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C10325 * C122 - C10327 * C115 + C47473 * C491 - C10328 * C481) *
                 C114 +
             (C10325 * C136 - C10327 * C123 + C47473 * C511 - C10328 * C492) *
                 C47359) *
                C4745 +
            ((C10330 - C10331 + C10332 - C10333) * C114 +
             (C10334 - C10335 + C10336 - C10337) * C47359) *
                C47440) *
               C47422 +
           (((C10327 * C481 - C10325 * C491 + C10328 * C484 - C47473 * C497) *
                 C114 +
             (C10327 * C492 - C10325 * C511 + C10328 * C498 - C47473 * C514) *
                 C47359) *
                C4745 +
            ((C10686 - C10687 + C10688 - C10689) * C114 +
             (C10690 - C10691 + C10692 - C10693) * C47359) *
                C47440) *
               C47261) *
              C47156 * C655 +
          ((((C10331 - C10330 + C10333 - C10332) * C114 +
             (C10335 - C10334 + C10337 - C10336) * C47359) *
                C4745 +
            ((C10338 - C10339 + C10340 - C10341) * C114 +
             (C10342 - C10343 + C10344 - C10345) * C47359) *
                C47440) *
               C47422 +
           (((C10687 - C10686 + C10689 - C10688) * C114 +
             (C10691 - C10690 + C10693 - C10692) * C47359) *
                C4745 +
            ((C10702 - C10703 + C10704 - C10705) * C114 +
             (C10706 - C10707 + C10708 - C10709) * C47359) *
                C47440) *
               C47261) *
              C47156 * C656 +
          ((((C10339 - C10338 + C10341 - C10340) * C114 +
             (C10343 - C10342 + C10345 - C10344) * C47359) *
                C4745 +
            ((C10346 - C10347 + C10348 - C10349) * C114 +
             (C10350 - C10351 + C10352 - C10353) * C47359) *
                C47440) *
               C47422 +
           (((C10703 - C10702 + C10705 - C10704) * C114 +
             (C10707 - C10706 + C10709 - C10708) * C47359) *
                C4745 +
            ((C10986 - C10987 + C10988 - C10989) * C114 +
             (C10990 - C10991 + C10992 - C10993) * C47359) *
                C47440) *
               C47261) *
              C47156 * C657 +
          ((((C10347 - C10346 + C10349 - C10348) * C114 +
             (C10351 - C10350 + C10353 - C10352) * C47359) *
                C4745 +
            ((C10354 - C10355 + C10356 - C10357) * C114 +
             (C10358 - C10359 + C10360 - C10361) * C47359) *
                C47440) *
               C47422 +
           (((C10987 - C10986 + C10989 - C10988) * C114 +
             (C10991 - C10990 + C10993 - C10992) * C47359) *
                C4745 +
            ((C10325 * C507 - C10327 * C489 + C47473 * C509 - C10328 * C490) *
                 C114 +
             (C10325 * C519 - C10327 * C508 + C47473 * C520 - C10328 * C510) *
                 C47359) *
                C47440) *
               C47261) *
              C47156 * C47457)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C10325 * C122 - C10327 * C115 + C47473 * C491 - C10328 * C481) *
                 C114 +
             (C10325 * C136 - C10327 * C123 + C47473 * C511 - C10328 * C492) *
                 C47359) *
                C4745 +
            ((C10330 - C10331 + C10332 - C10333) * C114 +
             (C10334 - C10335 + C10336 - C10337) * C47359) *
                C47440) *
               C2276 +
           (((C10327 * C481 - C10325 * C491 + C10328 * C484 - C47473 * C497) *
                 C114 +
             (C10327 * C492 - C10325 * C511 + C10328 * C498 - C47473 * C514) *
                 C47359) *
                C4745 +
            ((C10686 - C10687 + C10688 - C10689) * C114 +
             (C10690 - C10691 + C10692 - C10693) * C47359) *
                C47440) *
               C2277 +
           (((C10325 * C497 - C10327 * C484 + C47473 * C2002 - C10328 * C1996) *
                 C114 +
             (C10325 * C514 - C10327 * C498 + C47473 * C2014 - C10328 * C2003) *
                 C47359) *
                C4745 +
            ((C10694 - C10695 + C10696 - C10697) * C114 +
             (C10698 - C10699 + C10700 - C10701) * C47359) *
                C47440) *
               C2278 +
           (((C10327 * C1996 - C10325 * C2002 + C10328 * C1999 -
              C47473 * C2008) *
                 C114 +
             (C10327 * C2003 - C10325 * C2014 + C10328 * C2009 -
              C47473 * C2017) *
                 C47359) *
                C4745 +
            ((C12762 - C12763 + C12764 - C12765) * C114 +
             (C12766 - C12767 + C12768 - C12769) * C47359) *
                C47440) *
               C47469) *
              C47156 * C47407 +
          ((((C10331 - C10330 + C10333 - C10332) * C114 +
             (C10335 - C10334 + C10337 - C10336) * C47359) *
                C4745 +
            ((C10338 - C10339 + C10340 - C10341) * C114 +
             (C10342 - C10343 + C10344 - C10345) * C47359) *
                C47440) *
               C2276 +
           (((C10687 - C10686 + C10689 - C10688) * C114 +
             (C10691 - C10690 + C10693 - C10692) * C47359) *
                C4745 +
            ((C10702 - C10703 + C10704 - C10705) * C114 +
             (C10706 - C10707 + C10708 - C10709) * C47359) *
                C47440) *
               C2277 +
           (((C10695 - C10694 + C10697 - C10696) * C114 +
             (C10699 - C10698 + C10701 - C10700) * C47359) *
                C4745 +
            ((C10710 - C10711 + C10712 - C10713) * C114 +
             (C10714 - C10715 + C10716 - C10717) * C47359) *
                C47440) *
               C2278 +
           (((C12763 - C12762 + C12765 - C12764) * C114 +
             (C12767 - C12766 + C12769 - C12768) * C47359) *
                C4745 +
            ((C10325 * C2006 - C10327 * C1998 + C47473 * C2012 -
              C10328 * C2001) *
                 C114 +
             (C10325 * C2016 - C10327 * C2007 + C47473 * C2019 -
              C10328 * C2013) *
                 C47359) *
                C47440) *
               C47469) *
              C47156 * C47139)) /
            (p * q * std::sqrt(p + q));
    d2ee[64] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C10325 * C122 - C10327 * C115 + C47473 * C491 - C10328 * C481) *
                 C114 +
             (C10325 * C136 - C10327 * C123 + C47473 * C511 - C10328 * C492) *
                 C47359) *
                C4745 +
            ((C10330 - C10331 + C10332 - C10333) * C114 +
             (C10334 - C10335 + C10336 - C10337) * C47359) *
                C47440) *
               C47174 * C47492 +
           (((C10327 * C294 - C10325 * C304 + C10328 * C931 - C47473 * C936) *
                 C114 +
             (C10327 * C305 - C10325 * C324 + C10328 * C937 - C47473 * C946) *
                 C47359) *
                C4745 +
            ((C10508 - C10509 + C10510 - C10511) * C114 +
             (C10512 - C10513 + C10514 - C10515) * C47359) *
                C47440) *
               C47174 * C47480 +
           (((C10325 * C310 - C10327 * C297 + C47473 * C1301 - C10328 * C1289) *
                 C114 +
             (C10325 * C327 - C10327 * C311 + C47473 * C1316 - C10328 * C1302) *
                 C47359) *
                C4745 +
            ((C10516 - C10517 + C10518 - C10519) * C114 +
             (C10520 - C10521 + C10522 - C10523) * C47359) *
                C47440) *
               C47174 * C47453) *
              C291 +
          ((((C10331 - C10330 + C10333 - C10332) * C114 +
             (C10335 - C10334 + C10337 - C10336) * C47359) *
                C4745 +
            ((C10338 - C10339 + C10340 - C10341) * C114 +
             (C10342 - C10343 + C10344 - C10345) * C47359) *
                C47440) *
               C47174 * C47492 +
           (((C10509 - C10508 + C10511 - C10510) * C114 +
             (C10513 - C10512 + C10515 - C10514) * C47359) *
                C4745 +
            ((C10524 - C10525 + C10526 - C10527) * C114 +
             (C10528 - C10529 + C10530 - C10531) * C47359) *
                C47440) *
               C47174 * C47480 +
           (((C10517 - C10516 + C10519 - C10518) * C114 +
             (C10521 - C10520 + C10523 - C10522) * C47359) *
                C4745 +
            ((C10532 - C10533 + C10534 - C10535) * C114 +
             (C10536 - C10537 + C10538 - C10539) * C47359) *
                C47440) *
               C47174 * C47453) *
              C292 +
          ((((C10339 - C10338 + C10341 - C10340) * C114 +
             (C10343 - C10342 + C10345 - C10344) * C47359) *
                C4745 +
            ((C10346 - C10347 + C10348 - C10349) * C114 +
             (C10350 - C10351 + C10352 - C10353) * C47359) *
                C47440) *
               C47174 * C47492 +
           (((C10525 - C10524 + C10527 - C10526) * C114 +
             (C10529 - C10528 + C10531 - C10530) * C47359) *
                C4745 +
            ((C10327 * C300 - C10325 * C316 + C10328 * C934 - C47473 * C942) *
                 C114 +
             (C10327 * C317 - C10325 * C330 + C10328 * C943 - C47473 * C949) *
                 C47359) *
                C47440) *
               C47174 * C47480 +
           (((C10533 - C10532 + C10535 - C10534) * C114 +
             (C10537 - C10536 + C10539 - C10538) * C47359) *
                C4745 +
            ((C10325 * C318 - C10327 * C301 + C47473 * C1585 - C10328 * C1584) *
                 C114 +
             (C10325 * C331 - C10327 * C319 + C47473 * C1587 - C10328 * C1586) *
                 C47359) *
                C47440) *
               C47174 * C47453) *
              C47447)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C10325 * C122 - C10327 * C115 + C47473 * C491 - C10328 * C481) *
                C114 +
            (C10325 * C136 - C10327 * C123 + C47473 * C511 - C10328 * C492) *
                C47359) *
               C4745 +
           ((C10330 - C10331 + C10332 - C10333) * C114 +
            (C10334 - C10335 + C10336 - C10337) * C47359) *
               C47440) *
              C47174 * C47156 * C108 +
          (((C10331 - C10330 + C10333 - C10332) * C114 +
            (C10335 - C10334 + C10337 - C10336) * C47359) *
               C4745 +
           ((C10338 - C10339 + C10340 - C10341) * C114 +
            (C10342 - C10343 + C10344 - C10345) * C47359) *
               C47440) *
              C47174 * C47156 * C109 +
          (((C10339 - C10338 + C10341 - C10340) * C114 +
            (C10343 - C10342 + C10345 - C10344) * C47359) *
               C4745 +
           ((C10346 - C10347 + C10348 - C10349) * C114 +
            (C10350 - C10351 + C10352 - C10353) * C47359) *
               C47440) *
              C47174 * C47156 * C110 +
          (((C10347 - C10346 + C10349 - C10348) * C114 +
            (C10351 - C10350 + C10353 - C10352) * C47359) *
               C4745 +
           ((C10354 - C10355 + C10356 - C10357) * C114 +
            (C10358 - C10359 + C10360 - C10361) * C47359) *
               C47440) *
              C47174 * C47156 * C111 +
          (((C10355 - C10354 + C10357 - C10356) * C114 +
            (C10359 - C10358 + C10361 - C10360) * C47359) *
               C4745 +
           ((C10325 * C132 - C10327 * C120 + C47473 * C773 - C10328 * C772) *
                C114 +
            (C10325 * C141 - C10327 * C133 + C47473 * C775 - C10328 * C774) *
                C47359) *
               C47440) *
              C47174 * C47156 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C10325 * C122 - C10327 * C115 + C47473 * C491 - C10328 * C481) *
                 C114 +
             (C10325 * C136 - C10327 * C123 + C47473 * C511 - C10328 * C492) *
                 C47359) *
                C4745 +
            ((C10330 - C10331 + C10332 - C10333) * C114 +
             (C10334 - C10335 + C10336 - C10337) * C47359) *
                C47440) *
               C47174 * C1078 +
           (((C10327 * C294 - C10325 * C304 + C10328 * C931 - C47473 * C936) *
                 C114 +
             (C10327 * C305 - C10325 * C324 + C10328 * C937 - C47473 * C946) *
                 C47359) *
                C4745 +
            ((C10508 - C10509 + C10510 - C10511) * C114 +
             (C10512 - C10513 + C10514 - C10515) * C47359) *
                C47440) *
               C47174 * C1079 +
           (((C10325 * C310 - C10327 * C297 + C47473 * C1301 - C10328 * C1289) *
                 C114 +
             (C10325 * C327 - C10327 * C311 + C47473 * C1316 - C10328 * C1302) *
                 C47359) *
                C4745 +
            ((C10516 - C10517 + C10518 - C10519) * C114 +
             (C10520 - C10521 + C10522 - C10523) * C47359) *
                C47440) *
               C47174 * C47453) *
              C47489 +
          ((((C10331 - C10330 + C10333 - C10332) * C114 +
             (C10335 - C10334 + C10337 - C10336) * C47359) *
                C4745 +
            ((C10338 - C10339 + C10340 - C10341) * C114 +
             (C10342 - C10343 + C10344 - C10345) * C47359) *
                C47440) *
               C47174 * C1078 +
           (((C10509 - C10508 + C10511 - C10510) * C114 +
             (C10513 - C10512 + C10515 - C10514) * C47359) *
                C4745 +
            ((C10524 - C10525 + C10526 - C10527) * C114 +
             (C10528 - C10529 + C10530 - C10531) * C47359) *
                C47440) *
               C47174 * C1079 +
           (((C10517 - C10516 + C10519 - C10518) * C114 +
             (C10521 - C10520 + C10523 - C10522) * C47359) *
                C4745 +
            ((C10532 - C10533 + C10534 - C10535) * C114 +
             (C10536 - C10537 + C10538 - C10539) * C47359) *
                C47440) *
               C47174 * C47453) *
              C47476 +
          ((((C10339 - C10338 + C10341 - C10340) * C114 +
             (C10343 - C10342 + C10345 - C10344) * C47359) *
                C4745 +
            ((C10346 - C10347 + C10348 - C10349) * C114 +
             (C10350 - C10351 + C10352 - C10353) * C47359) *
                C47440) *
               C47174 * C1078 +
           (((C10525 - C10524 + C10527 - C10526) * C114 +
             (C10529 - C10528 + C10531 - C10530) * C47359) *
                C4745 +
            ((C10848 - C10849 + C10850 - C10851) * C114 +
             (C10852 - C10853 + C10854 - C10855) * C47359) *
                C47440) *
               C47174 * C1079 +
           (((C10533 - C10532 + C10535 - C10534) * C114 +
             (C10537 - C10536 + C10539 - C10538) * C47359) *
                C4745 +
            ((C10325 * C318 - C10327 * C301 + C47473 * C1585 - C10328 * C1584) *
                 C114 +
             (C10325 * C331 - C10327 * C319 + C47473 * C1587 - C10328 * C1586) *
                 C47359) *
                C47440) *
               C47174 * C47453) *
              C47447)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C10325 * C122 - C10327 * C115 + C47473 * C491 - C10328 * C481) *
                C114 +
            (C10325 * C136 - C10327 * C123 + C47473 * C511 - C10328 * C492) *
                C47359) *
               C4745 +
           ((C10330 - C10331 + C10332 - C10333) * C114 +
            (C10334 - C10335 + C10336 - C10337) * C47359) *
               C47440) *
              C47174 * C1146 +
          (((C10327 * C294 - C10325 * C304 + C10328 * C931 - C47473 * C936) *
                C114 +
            (C10327 * C305 - C10325 * C324 + C10328 * C937 - C47473 * C946) *
                C47359) *
               C4745 +
           ((C10508 - C10509 + C10510 - C10511) * C114 +
            (C10512 - C10513 + C10514 - C10515) * C47359) *
               C47440) *
              C47174 * C1147 +
          (((C10325 * C310 - C10327 * C297 + C47473 * C1301 - C10328 * C1289) *
                C114 +
            (C10325 * C327 - C10327 * C311 + C47473 * C1316 - C10328 * C1302) *
                C47359) *
               C4745 +
           ((C10516 - C10517 + C10518 - C10519) * C114 +
            (C10520 - C10521 + C10522 - C10523) * C47359) *
               C47440) *
              C47174 * C1148 +
          (((C10327 * C1152 - C10325 * C1158 + C10328 * C1694 -
             C47473 * C1697) *
                C114 +
            (C10327 * C1159 - C10325 * C1170 + C10328 * C1698 -
             C47473 * C1703) *
                C47359) *
               C4745 +
           ((C10327 * C1153 - C10325 * C1160 + C10328 * C1695 -
             C47473 * C1699) *
                C114 +
            (C10327 * C1161 - C10325 * C1171 + C10328 * C1700 -
             C47473 * C1704) *
                C47359) *
               C47440) *
              C47174 * C1149 +
          (((C10325 * C1164 - C10327 * C1155 + C47473 * C6413 -
             C10328 * C6411) *
                C114 +
            (C10325 * C1173 - C10327 * C1165 + C47473 * C6417 -
             C10328 * C6414) *
                C47359) *
               C4745 +
           ((C10325 * C1166 - C10327 * C1156 + C47473 * C6415 -
             C10328 * C6412) *
                C114 +
            (C10325 * C1174 - C10327 * C1167 + C47473 * C6418 -
             C10328 * C6416) *
                C47359) *
               C47440) *
              C47174 * C1150) *
         C47128) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C10325 * C122 - C10327 * C115 + C47473 * C491 - C10328 * C481) *
                 C114 +
             (C10325 * C136 - C10327 * C123 + C47473 * C511 - C10328 * C492) *
                 C47359) *
                C4745 +
            ((C10330 - C10331 + C10332 - C10333) * C114 +
             (C10334 - C10335 + C10336 - C10337) * C47359) *
                C47440) *
               C1816 +
           (((C10327 * C481 - C10325 * C491 + C10328 * C484 - C47473 * C497) *
                 C114 +
             (C10327 * C492 - C10325 * C511 + C10328 * C498 - C47473 * C514) *
                 C47359) *
                C4745 +
            ((C10686 - C10687 + C10688 - C10689) * C114 +
             (C10690 - C10691 + C10692 - C10693) * C47359) *
                C47440) *
               C1817 +
           (((C10325 * C497 - C10327 * C484 + C47473 * C2002 - C10328 * C1996) *
                 C114 +
             (C10325 * C514 - C10327 * C498 + C47473 * C2014 - C10328 * C2003) *
                 C47359) *
                C4745 +
            ((C10694 - C10695 + C10696 - C10697) * C114 +
             (C10698 - C10699 + C10700 - C10701) * C47359) *
                C47440) *
               C47456) *
              C47156 * C47489 +
          ((((C10331 - C10330 + C10333 - C10332) * C114 +
             (C10335 - C10334 + C10337 - C10336) * C47359) *
                C4745 +
            ((C10338 - C10339 + C10340 - C10341) * C114 +
             (C10342 - C10343 + C10344 - C10345) * C47359) *
                C47440) *
               C1816 +
           (((C10687 - C10686 + C10689 - C10688) * C114 +
             (C10691 - C10690 + C10693 - C10692) * C47359) *
                C4745 +
            ((C10702 - C10703 + C10704 - C10705) * C114 +
             (C10706 - C10707 + C10708 - C10709) * C47359) *
                C47440) *
               C1817 +
           (((C10695 - C10694 + C10697 - C10696) * C114 +
             (C10699 - C10698 + C10701 - C10700) * C47359) *
                C4745 +
            ((C10710 - C10711 + C10712 - C10713) * C114 +
             (C10714 - C10715 + C10716 - C10717) * C47359) *
                C47440) *
               C47456) *
              C47156 * C47476 +
          ((((C10339 - C10338 + C10341 - C10340) * C114 +
             (C10343 - C10342 + C10345 - C10344) * C47359) *
                C4745 +
            ((C10346 - C10347 + C10348 - C10349) * C114 +
             (C10350 - C10351 + C10352 - C10353) * C47359) *
                C47440) *
               C1816 +
           (((C10703 - C10702 + C10705 - C10704) * C114 +
             (C10707 - C10706 + C10709 - C10708) * C47359) *
                C4745 +
            ((C10986 - C10987 + C10988 - C10989) * C114 +
             (C10990 - C10991 + C10992 - C10993) * C47359) *
                C47440) *
               C1817 +
           (((C10711 - C10710 + C10713 - C10712) * C114 +
             (C10715 - C10714 + C10717 - C10716) * C47359) *
                C4745 +
            ((C10325 * C505 - C10327 * C488 + C47473 * C2281 - C10328 * C2280) *
                 C114 +
             (C10325 * C518 - C10327 * C506 + C47473 * C2283 - C10328 * C2282) *
                 C47359) *
                C47440) *
               C47456) *
              C47156 * C47447)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C10325 * C122 - C10327 * C115 + C47473 * C491 - C10328 * C481) *
                 C114 +
             (C10325 * C136 - C10327 * C123 + C47473 * C511 - C10328 * C492) *
                 C47359) *
                C4745 +
            ((C10330 - C10331 + C10332 - C10333) * C114 +
             (C10334 - C10335 + C10336 - C10337) * C47359) *
                C47440) *
               C1816 +
           (((C10327 * C481 - C10325 * C491 + C10328 * C484 - C47473 * C497) *
                 C114 +
             (C10327 * C492 - C10325 * C511 + C10328 * C498 - C47473 * C514) *
                 C47359) *
                C4745 +
            ((C10686 - C10687 + C10688 - C10689) * C114 +
             (C10690 - C10691 + C10692 - C10693) * C47359) *
                C47440) *
               C1817 +
           (((C10325 * C497 - C10327 * C484 + C47473 * C2002 - C10328 * C1996) *
                 C114 +
             (C10325 * C514 - C10327 * C498 + C47473 * C2014 - C10328 * C2003) *
                 C47359) *
                C4745 +
            ((C10694 - C10695 + C10696 - C10697) * C114 +
             (C10698 - C10699 + C10700 - C10701) * C47359) *
                C47440) *
               C47456) *
              C47492 +
          ((((C10327 * C294 - C10325 * C304 + C10328 * C931 - C47473 * C936) *
                 C114 +
             (C10327 * C305 - C10325 * C324 + C10328 * C937 - C47473 * C946) *
                 C47359) *
                C4745 +
            ((C10508 - C10509 + C10510 - C10511) * C114 +
             (C10512 - C10513 + C10514 - C10515) * C47359) *
                C47440) *
               C1816 +
           (((C10325 * C936 - C10327 * C931 + C47473 * C1295 - C10328 * C1286) *
                 C114 +
             (C10325 * C946 - C10327 * C937 + C47473 * C1313 - C10328 * C1296) *
                 C47359) *
                C4745 +
            ((C11188 - C11189 + C11190 - C11191) * C114 +
             (C11192 - C11193 + C11194 - C11195) * C47359) *
                C47440) *
               C1817 +
           (((C10327 * C1286 - C10325 * C1295 + C10328 * C2390 -
              C47473 * C2393) *
                 C114 +
             (C10327 * C1296 - C10325 * C1313 + C10328 * C2394 -
              C47473 * C2399) *
                 C47359) *
                C4745 +
            ((C10327 * C1287 - C10325 * C1297 + C10328 * C2391 -
              C47473 * C2395) *
                 C114 +
             (C10327 * C1298 - C10325 * C1314 + C10328 * C2396 -
              C47473 * C2400) *
                 C47359) *
                C47440) *
               C47456) *
              C47480 +
          ((((C10325 * C310 - C10327 * C297 + C47473 * C1301 - C10328 * C1289) *
                 C114 +
             (C10325 * C327 - C10327 * C311 + C47473 * C1316 - C10328 * C1302) *
                 C47359) *
                C4745 +
            ((C10516 - C10517 + C10518 - C10519) * C114 +
             (C10520 - C10521 + C10522 - C10523) * C47359) *
                C47440) *
               C1816 +
           (((C10327 * C1289 - C10325 * C1301 + C10328 * C1292 -
              C47473 * C1307) *
                 C114 +
             (C10327 * C1302 - C10325 * C1316 + C10328 * C1308 -
              C47473 * C1319) *
                 C47359) *
                C4745 +
            ((C11910 - C11911 + C11912 - C11913) * C114 +
             (C11914 - C11915 + C11916 - C11917) * C47359) *
                C47440) *
               C1817 +
           (((C10325 * C1307 - C10327 * C1292 + C47473 * C7269 -
              C10328 * C7267) *
                 C114 +
             (C10325 * C1319 - C10327 * C1308 + C47473 * C7273 -
              C10328 * C7270) *
                 C47359) *
                C4745 +
            ((C10325 * C1309 - C10327 * C1293 + C47473 * C7271 -
              C10328 * C7268) *
                 C114 +
             (C10325 * C1320 - C10327 * C1310 + C47473 * C7274 -
              C10328 * C7272) *
                 C47359) *
                C47440) *
               C47456) *
              C47453) *
         C47128) /
            (p * q * std::sqrt(p + q));
    d2ee[65] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C10325 * C122 - C10327 * C115 + C47473 * C491 - C10328 * C481) *
                  C114 +
              (C10325 * C136 - C10327 * C123 + C47473 * C511 - C10328 * C492) *
                  C47359) *
                 C4745 +
             ((C10330 - C10331 + C10332 - C10333) * C114 +
              (C10334 - C10335 + C10336 - C10337) * C47359) *
                 C47440) *
                C3262 +
            (((C10327 * C481 - C10325 * C491 + C10328 * C484 - C47473 * C497) *
                  C114 +
              (C10327 * C492 - C10325 * C511 + C10328 * C498 - C47473 * C514) *
                  C47359) *
                 C4745 +
             ((C10686 - C10687 + C10688 - C10689) * C114 +
              (C10690 - C10691 + C10692 - C10693) * C47359) *
                 C47440) *
                C47261) *
               C47421 +
           ((((C10327 * C294 - C10325 * C304 + C10328 * C931 - C47473 * C936) *
                  C114 +
              (C10327 * C305 - C10325 * C324 + C10328 * C937 - C47473 * C946) *
                  C47359) *
                 C4745 +
             ((C10508 - C10509 + C10510 - C10511) * C114 +
              (C10512 - C10513 + C10514 - C10515) * C47359) *
                 C47440) *
                C3262 +
            (((C10325 * C936 - C10327 * C931 + C47473 * C1295 -
               C10328 * C1286) *
                  C114 +
              (C10325 * C946 - C10327 * C937 + C47473 * C1313 -
               C10328 * C1296) *
                  C47359) *
                 C4745 +
             ((C11188 - C11189 + C11190 - C11191) * C114 +
              (C11192 - C11193 + C11194 - C11195) * C47359) *
                 C47440) *
                C47261) *
               C47219) *
              C47133 +
          (((((C10331 - C10330 + C10333 - C10332) * C114 +
              (C10335 - C10334 + C10337 - C10336) * C47359) *
                 C4745 +
             ((C10338 - C10339 + C10340 - C10341) * C114 +
              (C10342 - C10343 + C10344 - C10345) * C47359) *
                 C47440) *
                C3262 +
            (((C10687 - C10686 + C10689 - C10688) * C114 +
              (C10691 - C10690 + C10693 - C10692) * C47359) *
                 C4745 +
             ((C10702 - C10703 + C10704 - C10705) * C114 +
              (C10706 - C10707 + C10708 - C10709) * C47359) *
                 C47440) *
                C47261) *
               C47421 +
           ((((C10509 - C10508 + C10511 - C10510) * C114 +
              (C10513 - C10512 + C10515 - C10514) * C47359) *
                 C4745 +
             ((C10524 - C10525 + C10526 - C10527) * C114 +
              (C10528 - C10529 + C10530 - C10531) * C47359) *
                 C47440) *
                C3262 +
            (((C11189 - C11188 + C11191 - C11190) * C114 +
              (C11193 - C11192 + C11195 - C11194) * C47359) *
                 C4745 +
             ((C11196 - C11197 + C11198 - C11199) * C114 +
              (C11200 - C11201 + C11202 - C11203) * C47359) *
                 C47440) *
                C47261) *
               C47219) *
              C47142 +
          (((((C10339 - C10338 + C10341 - C10340) * C114 +
              (C10343 - C10342 + C10345 - C10344) * C47359) *
                 C4745 +
             ((C10346 - C10347 + C10348 - C10349) * C114 +
              (C10350 - C10351 + C10352 - C10353) * C47359) *
                 C47440) *
                C3262 +
            (((C10703 - C10702 + C10705 - C10704) * C114 +
              (C10707 - C10706 + C10709 - C10708) * C47359) *
                 C4745 +
             ((C10986 - C10987 + C10988 - C10989) * C114 +
              (C10990 - C10991 + C10992 - C10993) * C47359) *
                 C47440) *
                C47261) *
               C47421 +
           ((((C10525 - C10524 + C10527 - C10526) * C114 +
              (C10529 - C10528 + C10531 - C10530) * C47359) *
                 C4745 +
             ((C10848 - C10849 + C10850 - C10851) * C114 +
              (C10852 - C10853 + C10854 - C10855) * C47359) *
                 C47440) *
                C3262 +
            (((C11197 - C11196 + C11199 - C11198) * C114 +
              (C11201 - C11200 + C11203 - C11202) * C47359) *
                 C4745 +
             ((C10325 * C942 - C10327 * C934 + C47473 * C2167 -
               C10328 * C2166) *
                  C114 +
              (C10325 * C949 - C10327 * C943 + C47473 * C2169 -
               C10328 * C2168) *
                  C47359) *
                 C47440) *
                C47261) *
               C47219) *
              C2871)) /
        (p * q * std::sqrt(p + q));
    d2ee[66] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C10325 * C122 - C10327 * C115 + C47473 * C491 - C10328 * C481) *
                  C114 +
              (C10325 * C136 - C10327 * C123 + C47473 * C511 - C10328 * C492) *
                  C47359) *
                 C4745 +
             ((C10330 - C10331 + C10332 - C10333) * C114 +
              (C10334 - C10335 + C10336 - C10337) * C47359) *
                 C47440) *
                C47257 +
            (((C10327 * C481 - C10325 * C491 + C10328 * C484 - C47473 * C497) *
                  C114 +
              (C10327 * C492 - C10325 * C511 + C10328 * C498 - C47473 * C514) *
                  C47359) *
                 C4745 +
             ((C10686 - C10687 + C10688 - C10689) * C114 +
              (C10690 - C10691 + C10692 - C10693) * C47359) *
                 C47440) *
                C47264 +
            (((C10325 * C497 - C10327 * C484 + C47473 * C2002 -
               C10328 * C1996) *
                  C114 +
              (C10325 * C514 - C10327 * C498 + C47473 * C2014 -
               C10328 * C2003) *
                  C47359) *
                 C4745 +
             ((C10694 - C10695 + C10696 - C10697) * C114 +
              (C10698 - C10699 + C10700 - C10701) * C47359) *
                 C47440) *
                C3770) *
               C47421 +
           ((((C10327 * C294 - C10325 * C304 + C10328 * C931 - C47473 * C936) *
                  C114 +
              (C10327 * C305 - C10325 * C324 + C10328 * C937 - C47473 * C946) *
                  C47359) *
                 C4745 +
             ((C10508 - C10509 + C10510 - C10511) * C114 +
              (C10512 - C10513 + C10514 - C10515) * C47359) *
                 C47440) *
                C47257 +
            (((C10325 * C936 - C10327 * C931 + C47473 * C1295 -
               C10328 * C1286) *
                  C114 +
              (C10325 * C946 - C10327 * C937 + C47473 * C1313 -
               C10328 * C1296) *
                  C47359) *
                 C4745 +
             ((C11188 - C11189 + C11190 - C11191) * C114 +
              (C11192 - C11193 + C11194 - C11195) * C47359) *
                 C47440) *
                C47264 +
            (((C10327 * C1286 - C10325 * C1295 + C10328 * C2390 -
               C47473 * C2393) *
                  C114 +
              (C10327 * C1296 - C10325 * C1313 + C10328 * C2394 -
               C47473 * C2399) *
                  C47359) *
                 C4745 +
             ((C12624 - C12625 + C12626 - C12627) * C114 +
              (C12628 - C12629 + C12630 - C12631) * C47359) *
                 C47440) *
                C3770) *
               C47219) *
              C2608 +
          (((((C10331 - C10330 + C10333 - C10332) * C114 +
              (C10335 - C10334 + C10337 - C10336) * C47359) *
                 C4745 +
             ((C10338 - C10339 + C10340 - C10341) * C114 +
              (C10342 - C10343 + C10344 - C10345) * C47359) *
                 C47440) *
                C47257 +
            (((C10687 - C10686 + C10689 - C10688) * C114 +
              (C10691 - C10690 + C10693 - C10692) * C47359) *
                 C4745 +
             ((C10702 - C10703 + C10704 - C10705) * C114 +
              (C10706 - C10707 + C10708 - C10709) * C47359) *
                 C47440) *
                C47264 +
            (((C10695 - C10694 + C10697 - C10696) * C114 +
              (C10699 - C10698 + C10701 - C10700) * C47359) *
                 C4745 +
             ((C10710 - C10711 + C10712 - C10713) * C114 +
              (C10714 - C10715 + C10716 - C10717) * C47359) *
                 C47440) *
                C3770) *
               C47421 +
           ((((C10509 - C10508 + C10511 - C10510) * C114 +
              (C10513 - C10512 + C10515 - C10514) * C47359) *
                 C4745 +
             ((C10524 - C10525 + C10526 - C10527) * C114 +
              (C10528 - C10529 + C10530 - C10531) * C47359) *
                 C47440) *
                C47257 +
            (((C11189 - C11188 + C11191 - C11190) * C114 +
              (C11193 - C11192 + C11195 - C11194) * C47359) *
                 C4745 +
             ((C11196 - C11197 + C11198 - C11199) * C114 +
              (C11200 - C11201 + C11202 - C11203) * C47359) *
                 C47440) *
                C47264 +
            (((C12625 - C12624 + C12627 - C12626) * C114 +
              (C12629 - C12628 + C12631 - C12630) * C47359) *
                 C4745 +
             ((C10325 * C1299 - C10327 * C1288 + C47473 * C2397 -
               C10328 * C2392) *
                  C114 +
              (C10325 * C1315 - C10327 * C1300 + C47473 * C2401 -
               C10328 * C2398) *
                  C47359) *
                 C47440) *
                C3770) *
               C47219) *
              C47139)) /
        (p * q * std::sqrt(p + q));
    d2ee[67] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C10325 * C122 - C10327 * C115 + C47473 * C491 - C10328 * C481) *
                  C114 +
              (C10325 * C136 - C10327 * C123 + C47473 * C511 - C10328 * C492) *
                  C47359) *
                 C4745 +
             ((C10330 - C10331 + C10332 - C10333) * C114 +
              (C10334 - C10335 + C10336 - C10337) * C47359) *
                 C47440) *
                C3262 +
            (((C10327 * C481 - C10325 * C491 + C10328 * C484 - C47473 * C497) *
                  C114 +
              (C10327 * C492 - C10325 * C511 + C10328 * C498 - C47473 * C514) *
                  C47359) *
                 C4745 +
             ((C10686 - C10687 + C10688 - C10689) * C114 +
              (C10690 - C10691 + C10692 - C10693) * C47359) *
                 C47440) *
                C47261) *
               C47492 +
           ((((C10327 * C294 - C10325 * C304 + C10328 * C931 - C47473 * C936) *
                  C114 +
              (C10327 * C305 - C10325 * C324 + C10328 * C937 - C47473 * C946) *
                  C47359) *
                 C4745 +
             ((C10508 - C10509 + C10510 - C10511) * C114 +
              (C10512 - C10513 + C10514 - C10515) * C47359) *
                 C47440) *
                C3262 +
            (((C10325 * C936 - C10327 * C931 + C47473 * C1295 -
               C10328 * C1286) *
                  C114 +
              (C10325 * C946 - C10327 * C937 + C47473 * C1313 -
               C10328 * C1296) *
                  C47359) *
                 C4745 +
             ((C11188 - C11189 + C11190 - C11191) * C114 +
              (C11192 - C11193 + C11194 - C11195) * C47359) *
                 C47440) *
                C47261) *
               C47480 +
           ((((C10325 * C310 - C10327 * C297 + C47473 * C1301 -
               C10328 * C1289) *
                  C114 +
              (C10325 * C327 - C10327 * C311 + C47473 * C1316 -
               C10328 * C1302) *
                  C47359) *
                 C4745 +
             ((C10516 - C10517 + C10518 - C10519) * C114 +
              (C10520 - C10521 + C10522 - C10523) * C47359) *
                 C47440) *
                C3262 +
            (((C10327 * C1289 - C10325 * C1301 + C10328 * C1292 -
               C47473 * C1307) *
                  C114 +
              (C10327 * C1302 - C10325 * C1316 + C10328 * C1308 -
               C47473 * C1319) *
                  C47359) *
                 C4745 +
             ((C11910 - C11911 + C11912 - C11913) * C114 +
              (C11914 - C11915 + C11916 - C11917) * C47359) *
                 C47440) *
                C47261) *
               C47453) *
              C2608 +
          (((((C10331 - C10330 + C10333 - C10332) * C114 +
              (C10335 - C10334 + C10337 - C10336) * C47359) *
                 C4745 +
             ((C10338 - C10339 + C10340 - C10341) * C114 +
              (C10342 - C10343 + C10344 - C10345) * C47359) *
                 C47440) *
                C3262 +
            (((C10687 - C10686 + C10689 - C10688) * C114 +
              (C10691 - C10690 + C10693 - C10692) * C47359) *
                 C4745 +
             ((C10702 - C10703 + C10704 - C10705) * C114 +
              (C10706 - C10707 + C10708 - C10709) * C47359) *
                 C47440) *
                C47261) *
               C47492 +
           ((((C10509 - C10508 + C10511 - C10510) * C114 +
              (C10513 - C10512 + C10515 - C10514) * C47359) *
                 C4745 +
             ((C10524 - C10525 + C10526 - C10527) * C114 +
              (C10528 - C10529 + C10530 - C10531) * C47359) *
                 C47440) *
                C3262 +
            (((C11189 - C11188 + C11191 - C11190) * C114 +
              (C11193 - C11192 + C11195 - C11194) * C47359) *
                 C4745 +
             ((C11196 - C11197 + C11198 - C11199) * C114 +
              (C11200 - C11201 + C11202 - C11203) * C47359) *
                 C47440) *
                C47261) *
               C47480 +
           ((((C10517 - C10516 + C10519 - C10518) * C114 +
              (C10521 - C10520 + C10523 - C10522) * C47359) *
                 C4745 +
             ((C10532 - C10533 + C10534 - C10535) * C114 +
              (C10536 - C10537 + C10538 - C10539) * C47359) *
                 C47440) *
                C3262 +
            (((C11911 - C11910 + C11913 - C11912) * C114 +
              (C11915 - C11914 + C11917 - C11916) * C47359) *
                 C4745 +
             ((C10325 * C1305 - C10327 * C1291 + C47473 * C1311 -
               C10328 * C1294) *
                  C114 +
              (C10325 * C1318 - C10327 * C1306 + C47473 * C1321 -
               C10328 * C1312) *
                  C47359) *
                 C47440) *
                C47261) *
               C47453) *
              C47139)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C10325 * C122 - C10327 * C115 + C47473 * C491 - C10328 * C481) *
                 C114 +
             (C10325 * C136 - C10327 * C123 + C47473 * C511 - C10328 * C492) *
                 C47359) *
                C4745 +
            ((C10330 - C10331 + C10332 - C10333) * C114 +
             (C10334 - C10335 + C10336 - C10337) * C47359) *
                C47440) *
               C3262 +
           (((C10327 * C481 - C10325 * C491 + C10328 * C484 - C47473 * C497) *
                 C114 +
             (C10327 * C492 - C10325 * C511 + C10328 * C498 - C47473 * C514) *
                 C47359) *
                C4745 +
            ((C10686 - C10687 + C10688 - C10689) * C114 +
             (C10690 - C10691 + C10692 - C10693) * C47359) *
                C47440) *
               C47261) *
              C47156 * C47498 +
          ((((C10331 - C10330 + C10333 - C10332) * C114 +
             (C10335 - C10334 + C10337 - C10336) * C47359) *
                C4745 +
            ((C10338 - C10339 + C10340 - C10341) * C114 +
             (C10342 - C10343 + C10344 - C10345) * C47359) *
                C47440) *
               C3262 +
           (((C10687 - C10686 + C10689 - C10688) * C114 +
             (C10691 - C10690 + C10693 - C10692) * C47359) *
                C4745 +
            ((C10702 - C10703 + C10704 - C10705) * C114 +
             (C10706 - C10707 + C10708 - C10709) * C47359) *
                C47440) *
               C47261) *
              C47156 * C47491 +
          ((((C10339 - C10338 + C10341 - C10340) * C114 +
             (C10343 - C10342 + C10345 - C10344) * C47359) *
                C4745 +
            ((C10346 - C10347 + C10348 - C10349) * C114 +
             (C10350 - C10351 + C10352 - C10353) * C47359) *
                C47440) *
               C3262 +
           (((C10703 - C10702 + C10705 - C10704) * C114 +
             (C10707 - C10706 + C10709 - C10708) * C47359) *
                C4745 +
            ((C10986 - C10987 + C10988 - C10989) * C114 +
             (C10990 - C10991 + C10992 - C10993) * C47359) *
                C47440) *
               C47261) *
              C47156 * C47478 +
          ((((C10347 - C10346 + C10349 - C10348) * C114 +
             (C10351 - C10350 + C10353 - C10352) * C47359) *
                C4745 +
            ((C10354 - C10355 + C10356 - C10357) * C114 +
             (C10358 - C10359 + C10360 - C10361) * C47359) *
                C47440) *
               C3262 +
           (((C10987 - C10986 + C10989 - C10988) * C114 +
             (C10991 - C10990 + C10993 - C10992) * C47359) *
                C4745 +
            ((C10325 * C507 - C10327 * C489 + C47473 * C509 - C10328 * C490) *
                 C114 +
             (C10325 * C519 - C10327 * C508 + C47473 * C520 - C10328 * C510) *
                 C47359) *
                C47440) *
               C47261) *
              C47156 * C47457)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C10325 * C122 - C10327 * C115 + C47473 * C491 - C10328 * C481) *
                 C114 +
             (C10325 * C136 - C10327 * C123 + C47473 * C511 - C10328 * C492) *
                 C47359) *
                C4745 +
            ((C10330 - C10331 + C10332 - C10333) * C114 +
             (C10334 - C10335 + C10336 - C10337) * C47359) *
                C47440) *
               C47500 +
           (((C10327 * C481 - C10325 * C491 + C10328 * C484 - C47473 * C497) *
                 C114 +
             (C10327 * C492 - C10325 * C511 + C10328 * C498 - C47473 * C514) *
                 C47359) *
                C4745 +
            ((C10686 - C10687 + C10688 - C10689) * C114 +
             (C10690 - C10691 + C10692 - C10693) * C47359) *
                C47440) *
               C47497 +
           (((C10325 * C497 - C10327 * C484 + C47473 * C2002 - C10328 * C1996) *
                 C114 +
             (C10325 * C514 - C10327 * C498 + C47473 * C2014 - C10328 * C2003) *
                 C47359) *
                C4745 +
            ((C10694 - C10695 + C10696 - C10697) * C114 +
             (C10698 - C10699 + C10700 - C10701) * C47359) *
                C47440) *
               C47488 +
           (((C10327 * C1996 - C10325 * C2002 + C10328 * C1999 -
              C47473 * C2008) *
                 C114 +
             (C10327 * C2003 - C10325 * C2014 + C10328 * C2009 -
              C47473 * C2017) *
                 C47359) *
                C4745 +
            ((C12762 - C12763 + C12764 - C12765) * C114 +
             (C12766 - C12767 + C12768 - C12769) * C47359) *
                C47440) *
               C47469) *
              C47156 * C2608 +
          ((((C10331 - C10330 + C10333 - C10332) * C114 +
             (C10335 - C10334 + C10337 - C10336) * C47359) *
                C4745 +
            ((C10338 - C10339 + C10340 - C10341) * C114 +
             (C10342 - C10343 + C10344 - C10345) * C47359) *
                C47440) *
               C47500 +
           (((C10687 - C10686 + C10689 - C10688) * C114 +
             (C10691 - C10690 + C10693 - C10692) * C47359) *
                C4745 +
            ((C10702 - C10703 + C10704 - C10705) * C114 +
             (C10706 - C10707 + C10708 - C10709) * C47359) *
                C47440) *
               C47497 +
           (((C10695 - C10694 + C10697 - C10696) * C114 +
             (C10699 - C10698 + C10701 - C10700) * C47359) *
                C4745 +
            ((C10710 - C10711 + C10712 - C10713) * C114 +
             (C10714 - C10715 + C10716 - C10717) * C47359) *
                C47440) *
               C47488 +
           (((C12763 - C12762 + C12765 - C12764) * C114 +
             (C12767 - C12766 + C12769 - C12768) * C47359) *
                C4745 +
            ((C10325 * C2006 - C10327 * C1998 + C47473 * C2012 -
              C10328 * C2001) *
                 C114 +
             (C10325 * C2016 - C10327 * C2007 + C47473 * C2019 -
              C10328 * C2013) *
                 C47359) *
                C47440) *
               C47469) *
              C47156 * C47139)) /
            (p * q * std::sqrt(p + q));
    d2ee[68] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C10325 * C122 - C10327 * C115 + C47473 * C491 - C10328 * C481) *
                 C114 +
             (C10325 * C136 - C10327 * C123 + C47473 * C511 - C10328 * C492) *
                 C47359) *
                C4745 +
            ((C10330 - C10331 + C10332 - C10333) * C114 +
             (C10334 - C10335 + C10336 - C10337) * C47359) *
                C47440) *
               C47257 +
           (((C10327 * C481 - C10325 * C491 + C10328 * C484 - C47473 * C497) *
                 C114 +
             (C10327 * C492 - C10325 * C511 + C10328 * C498 - C47473 * C514) *
                 C47359) *
                C4745 +
            ((C10686 - C10687 + C10688 - C10689) * C114 +
             (C10690 - C10691 + C10692 - C10693) * C47359) *
                C47440) *
               C47264 +
           (((C10325 * C497 - C10327 * C484 + C47473 * C2002 - C10328 * C1996) *
                 C114 +
             (C10325 * C514 - C10327 * C498 + C47473 * C2014 - C10328 * C2003) *
                 C47359) *
                C4745 +
            ((C10694 - C10695 + C10696 - C10697) * C114 +
             (C10698 - C10699 + C10700 - C10701) * C47359) *
                C47440) *
               C3770) *
              C47156 * C47133 +
          ((((C10331 - C10330 + C10333 - C10332) * C114 +
             (C10335 - C10334 + C10337 - C10336) * C47359) *
                C4745 +
            ((C10338 - C10339 + C10340 - C10341) * C114 +
             (C10342 - C10343 + C10344 - C10345) * C47359) *
                C47440) *
               C47257 +
           (((C10687 - C10686 + C10689 - C10688) * C114 +
             (C10691 - C10690 + C10693 - C10692) * C47359) *
                C4745 +
            ((C10702 - C10703 + C10704 - C10705) * C114 +
             (C10706 - C10707 + C10708 - C10709) * C47359) *
                C47440) *
               C47264 +
           (((C10695 - C10694 + C10697 - C10696) * C114 +
             (C10699 - C10698 + C10701 - C10700) * C47359) *
                C4745 +
            ((C10710 - C10711 + C10712 - C10713) * C114 +
             (C10714 - C10715 + C10716 - C10717) * C47359) *
                C47440) *
               C3770) *
              C47156 * C47142 +
          ((((C10339 - C10338 + C10341 - C10340) * C114 +
             (C10343 - C10342 + C10345 - C10344) * C47359) *
                C4745 +
            ((C10346 - C10347 + C10348 - C10349) * C114 +
             (C10350 - C10351 + C10352 - C10353) * C47359) *
                C47440) *
               C47257 +
           (((C10703 - C10702 + C10705 - C10704) * C114 +
             (C10707 - C10706 + C10709 - C10708) * C47359) *
                C4745 +
            ((C10986 - C10987 + C10988 - C10989) * C114 +
             (C10990 - C10991 + C10992 - C10993) * C47359) *
                C47440) *
               C47264 +
           (((C10711 - C10710 + C10713 - C10712) * C114 +
             (C10715 - C10714 + C10717 - C10716) * C47359) *
                C4745 +
            ((C10325 * C505 - C10327 * C488 + C47473 * C2281 - C10328 * C2280) *
                 C114 +
             (C10325 * C518 - C10327 * C506 + C47473 * C2283 - C10328 * C2282) *
                 C47359) *
                C47440) *
               C3770) *
              C47156 * C2871)) /
        (p * q * std::sqrt(p + q));
    d2ee[69] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C10325 * C122 - C10327 * C115 + C47473 * C491 - C10328 * C481) *
                 C114 +
             (C10325 * C136 - C10327 * C123 + C47473 * C511 - C10328 * C492) *
                 C47359) *
                C4745 +
            ((C10330 - C10331 + C10332 - C10333) * C114 +
             (C10334 - C10335 + C10336 - C10337) * C47359) *
                C47440) *
               C3262 +
           (((C10327 * C481 - C10325 * C491 + C10328 * C484 - C47473 * C497) *
                 C114 +
             (C10327 * C492 - C10325 * C511 + C10328 * C498 - C47473 * C514) *
                 C47359) *
                C4745 +
            ((C10686 - C10687 + C10688 - C10689) * C114 +
             (C10690 - C10691 + C10692 - C10693) * C47359) *
                C47440) *
               C47261) *
              C47156 * C47498 +
          ((((C10331 - C10330 + C10333 - C10332) * C114 +
             (C10335 - C10334 + C10337 - C10336) * C47359) *
                C4745 +
            ((C10338 - C10339 + C10340 - C10341) * C114 +
             (C10342 - C10343 + C10344 - C10345) * C47359) *
                C47440) *
               C3262 +
           (((C10687 - C10686 + C10689 - C10688) * C114 +
             (C10691 - C10690 + C10693 - C10692) * C47359) *
                C4745 +
            ((C10702 - C10703 + C10704 - C10705) * C114 +
             (C10706 - C10707 + C10708 - C10709) * C47359) *
                C47440) *
               C47261) *
              C47156 * C47491 +
          ((((C10339 - C10338 + C10341 - C10340) * C114 +
             (C10343 - C10342 + C10345 - C10344) * C47359) *
                C4745 +
            ((C10346 - C10347 + C10348 - C10349) * C114 +
             (C10350 - C10351 + C10352 - C10353) * C47359) *
                C47440) *
               C3262 +
           (((C10703 - C10702 + C10705 - C10704) * C114 +
             (C10707 - C10706 + C10709 - C10708) * C47359) *
                C4745 +
            ((C10986 - C10987 + C10988 - C10989) * C114 +
             (C10990 - C10991 + C10992 - C10993) * C47359) *
                C47440) *
               C47261) *
              C47156 * C47478 +
          ((((C10347 - C10346 + C10349 - C10348) * C114 +
             (C10351 - C10350 + C10353 - C10352) * C47359) *
                C4745 +
            ((C10354 - C10355 + C10356 - C10357) * C114 +
             (C10358 - C10359 + C10360 - C10361) * C47359) *
                C47440) *
               C3262 +
           (((C10987 - C10986 + C10989 - C10988) * C114 +
             (C10991 - C10990 + C10993 - C10992) * C47359) *
                C4745 +
            ((C10325 * C507 - C10327 * C489 + C47473 * C509 - C10328 * C490) *
                 C114 +
             (C10325 * C519 - C10327 * C508 + C47473 * C520 - C10328 * C510) *
                 C47359) *
                C47440) *
               C47261) *
              C47156 * C47457)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C10325 * C122 - C10327 * C115 + C47473 * C491 - C10328 * C481) *
                  C114 +
              (C10325 * C136 - C10327 * C123 + C47473 * C511 - C10328 * C492) *
                  C47359) *
                 C4745 +
             ((C10330 - C10331 + C10332 - C10333) * C114 +
              (C10334 - C10335 + C10336 - C10337) * C47359) *
                 C47440) *
                C3262 +
            (((C10327 * C481 - C10325 * C491 + C10328 * C484 - C47473 * C497) *
                  C114 +
              (C10327 * C492 - C10325 * C511 + C10328 * C498 - C47473 * C514) *
                  C47359) *
                 C4745 +
             ((C10686 - C10687 + C10688 - C10689) * C114 +
              (C10690 - C10691 + C10692 - C10693) * C47359) *
                 C47440) *
                C47261) *
               C47492 +
           ((((C10327 * C294 - C10325 * C304 + C10328 * C931 - C47473 * C936) *
                  C114 +
              (C10327 * C305 - C10325 * C324 + C10328 * C937 - C47473 * C946) *
                  C47359) *
                 C4745 +
             ((C10508 - C10509 + C10510 - C10511) * C114 +
              (C10512 - C10513 + C10514 - C10515) * C47359) *
                 C47440) *
                C3262 +
            (((C10325 * C936 - C10327 * C931 + C47473 * C1295 -
               C10328 * C1286) *
                  C114 +
              (C10325 * C946 - C10327 * C937 + C47473 * C1313 -
               C10328 * C1296) *
                  C47359) *
                 C4745 +
             ((C11188 - C11189 + C11190 - C11191) * C114 +
              (C11192 - C11193 + C11194 - C11195) * C47359) *
                 C47440) *
                C47261) *
               C47480 +
           ((((C10325 * C310 - C10327 * C297 + C47473 * C1301 -
               C10328 * C1289) *
                  C114 +
              (C10325 * C327 - C10327 * C311 + C47473 * C1316 -
               C10328 * C1302) *
                  C47359) *
                 C4745 +
             ((C10516 - C10517 + C10518 - C10519) * C114 +
              (C10520 - C10521 + C10522 - C10523) * C47359) *
                 C47440) *
                C3262 +
            (((C10327 * C1289 - C10325 * C1301 + C10328 * C1292 -
               C47473 * C1307) *
                  C114 +
              (C10327 * C1302 - C10325 * C1316 + C10328 * C1308 -
               C47473 * C1319) *
                  C47359) *
                 C4745 +
             ((C11910 - C11911 + C11912 - C11913) * C114 +
              (C11914 - C11915 + C11916 - C11917) * C47359) *
                 C47440) *
                C47261) *
               C47453) *
              C2608 +
          (((((C10331 - C10330 + C10333 - C10332) * C114 +
              (C10335 - C10334 + C10337 - C10336) * C47359) *
                 C4745 +
             ((C10338 - C10339 + C10340 - C10341) * C114 +
              (C10342 - C10343 + C10344 - C10345) * C47359) *
                 C47440) *
                C3262 +
            (((C10687 - C10686 + C10689 - C10688) * C114 +
              (C10691 - C10690 + C10693 - C10692) * C47359) *
                 C4745 +
             ((C10702 - C10703 + C10704 - C10705) * C114 +
              (C10706 - C10707 + C10708 - C10709) * C47359) *
                 C47440) *
                C47261) *
               C47492 +
           ((((C10509 - C10508 + C10511 - C10510) * C114 +
              (C10513 - C10512 + C10515 - C10514) * C47359) *
                 C4745 +
             ((C10524 - C10525 + C10526 - C10527) * C114 +
              (C10528 - C10529 + C10530 - C10531) * C47359) *
                 C47440) *
                C3262 +
            (((C11189 - C11188 + C11191 - C11190) * C114 +
              (C11193 - C11192 + C11195 - C11194) * C47359) *
                 C4745 +
             ((C11196 - C11197 + C11198 - C11199) * C114 +
              (C11200 - C11201 + C11202 - C11203) * C47359) *
                 C47440) *
                C47261) *
               C47480 +
           ((((C10517 - C10516 + C10519 - C10518) * C114 +
              (C10521 - C10520 + C10523 - C10522) * C47359) *
                 C4745 +
             ((C10532 - C10533 + C10534 - C10535) * C114 +
              (C10536 - C10537 + C10538 - C10539) * C47359) *
                 C47440) *
                C3262 +
            (((C11911 - C11910 + C11913 - C11912) * C114 +
              (C11915 - C11914 + C11917 - C11916) * C47359) *
                 C4745 +
             ((C10325 * C1305 - C10327 * C1291 + C47473 * C1311 -
               C10328 * C1294) *
                  C114 +
              (C10325 * C1318 - C10327 * C1306 + C47473 * C1321 -
               C10328 * C1312) *
                  C47359) *
                 C47440) *
                C47261) *
               C47453) *
              C47139)) /
            (p * q * std::sqrt(p + q));
    d2ee[70] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C10325 * C122 - C10327 * C115 + C47473 * C491 - C10328 * C481) *
                 C114 +
             (C10325 * C136 - C10327 * C123 + C47473 * C511 - C10328 * C492) *
                 C47359) *
                C4745 +
            ((C10330 - C10331 + C10332 - C10333) * C114 +
             (C10334 - C10335 + C10336 - C10337) * C47359) *
                C47440) *
               C47174 * C47421 +
           (((C10327 * C294 - C10325 * C304 + C10328 * C931 - C47473 * C936) *
                 C114 +
             (C10327 * C305 - C10325 * C324 + C10328 * C937 - C47473 * C946) *
                 C47359) *
                C4745 +
            ((C10508 - C10509 + C10510 - C10511) * C114 +
             (C10512 - C10513 + C10514 - C10515) * C47359) *
                C47440) *
               C47174 * C47219) *
              C655 +
          ((((C10331 - C10330 + C10333 - C10332) * C114 +
             (C10335 - C10334 + C10337 - C10336) * C47359) *
                C4745 +
            ((C10338 - C10339 + C10340 - C10341) * C114 +
             (C10342 - C10343 + C10344 - C10345) * C47359) *
                C47440) *
               C47174 * C47421 +
           (((C10509 - C10508 + C10511 - C10510) * C114 +
             (C10513 - C10512 + C10515 - C10514) * C47359) *
                C4745 +
            ((C10524 - C10525 + C10526 - C10527) * C114 +
             (C10528 - C10529 + C10530 - C10531) * C47359) *
                C47440) *
               C47174 * C47219) *
              C656 +
          ((((C10339 - C10338 + C10341 - C10340) * C114 +
             (C10343 - C10342 + C10345 - C10344) * C47359) *
                C4745 +
            ((C10346 - C10347 + C10348 - C10349) * C114 +
             (C10350 - C10351 + C10352 - C10353) * C47359) *
                C47440) *
               C47174 * C47421 +
           (((C10525 - C10524 + C10527 - C10526) * C114 +
             (C10529 - C10528 + C10531 - C10530) * C47359) *
                C4745 +
            ((C10848 - C10849 + C10850 - C10851) * C114 +
             (C10852 - C10853 + C10854 - C10855) * C47359) *
                C47440) *
               C47174 * C47219) *
              C657 +
          ((((C10347 - C10346 + C10349 - C10348) * C114 +
             (C10351 - C10350 + C10353 - C10352) * C47359) *
                C4745 +
            ((C10354 - C10355 + C10356 - C10357) * C114 +
             (C10358 - C10359 + C10360 - C10361) * C47359) *
                C47440) *
               C47174 * C47421 +
           (((C10849 - C10848 + C10851 - C10850) * C114 +
             (C10853 - C10852 + C10855 - C10854) * C47359) *
                C4745 +
            ((C10325 * C320 - C10327 * C302 + C47473 * C944 - C10328 * C935) *
                 C114 +
             (C10325 * C332 - C10327 * C321 + C47473 * C950 - C10328 * C945) *
                 C47359) *
                C47440) *
               C47174 * C47219) *
              C47457)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C10325 * C122 - C10327 * C115 + C47473 * C491 - C10328 * C481) *
                 C114 +
             (C10325 * C136 - C10327 * C123 + C47473 * C511 - C10328 * C492) *
                 C47359) *
                C4745 +
            ((C10330 - C10331 + C10332 - C10333) * C114 +
             (C10334 - C10335 + C10336 - C10337) * C47359) *
                C47440) *
               C47174 * C1420 +
           (((C10327 * C294 - C10325 * C304 + C10328 * C931 - C47473 * C936) *
                 C114 +
             (C10327 * C305 - C10325 * C324 + C10328 * C937 - C47473 * C946) *
                 C47359) *
                C4745 +
            ((C10508 - C10509 + C10510 - C10511) * C114 +
             (C10512 - C10513 + C10514 - C10515) * C47359) *
                C47440) *
               C47174 * C1421 +
           (((C10325 * C310 - C10327 * C297 + C47473 * C1301 - C10328 * C1289) *
                 C114 +
             (C10325 * C327 - C10327 * C311 + C47473 * C1316 - C10328 * C1302) *
                 C47359) *
                C4745 +
            ((C10516 - C10517 + C10518 - C10519) * C114 +
             (C10520 - C10521 + C10522 - C10523) * C47359) *
                C47440) *
               C47174 * C1422 +
           (((C10327 * C1152 - C10325 * C1158 + C10328 * C1694 -
              C47473 * C1697) *
                 C114 +
             (C10327 * C1159 - C10325 * C1170 + C10328 * C1698 -
              C47473 * C1703) *
                 C47359) *
                C4745 +
            ((C11708 - C11709 + C11710 - C11711) * C114 +
             (C11712 - C11713 + C11714 - C11715) * C47359) *
                C47440) *
               C47174 * C47463) *
              C47407 +
          ((((C10331 - C10330 + C10333 - C10332) * C114 +
             (C10335 - C10334 + C10337 - C10336) * C47359) *
                C4745 +
            ((C10338 - C10339 + C10340 - C10341) * C114 +
             (C10342 - C10343 + C10344 - C10345) * C47359) *
                C47440) *
               C47174 * C1420 +
           (((C10509 - C10508 + C10511 - C10510) * C114 +
             (C10513 - C10512 + C10515 - C10514) * C47359) *
                C4745 +
            ((C10524 - C10525 + C10526 - C10527) * C114 +
             (C10528 - C10529 + C10530 - C10531) * C47359) *
                C47440) *
               C47174 * C1421 +
           (((C10517 - C10516 + C10519 - C10518) * C114 +
             (C10521 - C10520 + C10523 - C10522) * C47359) *
                C4745 +
            ((C10532 - C10533 + C10534 - C10535) * C114 +
             (C10536 - C10537 + C10538 - C10539) * C47359) *
                C47440) *
               C47174 * C1422 +
           (((C11709 - C11708 + C11711 - C11710) * C114 +
             (C11713 - C11712 + C11715 - C11714) * C47359) *
                C4745 +
            ((C10325 * C1162 - C10327 * C1154 + C47473 * C1701 -
              C10328 * C1696) *
                 C114 +
             (C10325 * C1172 - C10327 * C1163 + C47473 * C1705 -
              C10328 * C1702) *
                 C47359) *
                C47440) *
               C47174 * C47463) *
              C47139)) /
            (p * q * std::sqrt(p + q));
    d2ee[71] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C10325 * C122 - C10327 * C115 + C47473 * C491 - C10328 * C481) *
                  C114 +
              (C10325 * C136 - C10327 * C123 + C47473 * C511 - C10328 * C492) *
                  C47359) *
                 C4745 +
             ((C10330 - C10331 + C10332 - C10333) * C114 +
              (C10334 - C10335 + C10336 - C10337) * C47359) *
                 C47440) *
                C47422 +
            (((C10327 * C481 - C10325 * C491 + C10328 * C484 - C47473 * C497) *
                  C114 +
              (C10327 * C492 - C10325 * C511 + C10328 * C498 - C47473 * C514) *
                  C47359) *
                 C4745 +
             ((C10686 - C10687 + C10688 - C10689) * C114 +
              (C10690 - C10691 + C10692 - C10693) * C47359) *
                 C47440) *
                C47261) *
               C47421 +
           ((((C10327 * C294 - C10325 * C304 + C10328 * C931 - C47473 * C936) *
                  C114 +
              (C10327 * C305 - C10325 * C324 + C10328 * C937 - C47473 * C946) *
                  C47359) *
                 C4745 +
             ((C10508 - C10509 + C10510 - C10511) * C114 +
              (C10512 - C10513 + C10514 - C10515) * C47359) *
                 C47440) *
                C47422 +
            (((C10325 * C936 - C10327 * C931 + C47473 * C1295 -
               C10328 * C1286) *
                  C114 +
              (C10325 * C946 - C10327 * C937 + C47473 * C1313 -
               C10328 * C1296) *
                  C47359) *
                 C4745 +
             ((C11188 - C11189 + C11190 - C11191) * C114 +
              (C11192 - C11193 + C11194 - C11195) * C47359) *
                 C47440) *
                C47261) *
               C47219) *
              C291 +
          (((((C10331 - C10330 + C10333 - C10332) * C114 +
              (C10335 - C10334 + C10337 - C10336) * C47359) *
                 C4745 +
             ((C10338 - C10339 + C10340 - C10341) * C114 +
              (C10342 - C10343 + C10344 - C10345) * C47359) *
                 C47440) *
                C47422 +
            (((C10687 - C10686 + C10689 - C10688) * C114 +
              (C10691 - C10690 + C10693 - C10692) * C47359) *
                 C4745 +
             ((C10702 - C10703 + C10704 - C10705) * C114 +
              (C10706 - C10707 + C10708 - C10709) * C47359) *
                 C47440) *
                C47261) *
               C47421 +
           ((((C10509 - C10508 + C10511 - C10510) * C114 +
              (C10513 - C10512 + C10515 - C10514) * C47359) *
                 C4745 +
             ((C10524 - C10525 + C10526 - C10527) * C114 +
              (C10528 - C10529 + C10530 - C10531) * C47359) *
                 C47440) *
                C47422 +
            (((C11189 - C11188 + C11191 - C11190) * C114 +
              (C11193 - C11192 + C11195 - C11194) * C47359) *
                 C4745 +
             ((C11196 - C11197 + C11198 - C11199) * C114 +
              (C11200 - C11201 + C11202 - C11203) * C47359) *
                 C47440) *
                C47261) *
               C47219) *
              C292 +
          (((((C10339 - C10338 + C10341 - C10340) * C114 +
              (C10343 - C10342 + C10345 - C10344) * C47359) *
                 C4745 +
             ((C10346 - C10347 + C10348 - C10349) * C114 +
              (C10350 - C10351 + C10352 - C10353) * C47359) *
                 C47440) *
                C47422 +
            (((C10703 - C10702 + C10705 - C10704) * C114 +
              (C10707 - C10706 + C10709 - C10708) * C47359) *
                 C4745 +
             ((C10986 - C10987 + C10988 - C10989) * C114 +
              (C10990 - C10991 + C10992 - C10993) * C47359) *
                 C47440) *
                C47261) *
               C47421 +
           ((((C10525 - C10524 + C10527 - C10526) * C114 +
              (C10529 - C10528 + C10531 - C10530) * C47359) *
                 C4745 +
             ((C10848 - C10849 + C10850 - C10851) * C114 +
              (C10852 - C10853 + C10854 - C10855) * C47359) *
                 C47440) *
                C47422 +
            (((C11197 - C11196 + C11199 - C11198) * C114 +
              (C11201 - C11200 + C11203 - C11202) * C47359) *
                 C4745 +
             ((C10325 * C942 - C10327 * C934 + C47473 * C2167 -
               C10328 * C2166) *
                  C114 +
              (C10325 * C949 - C10327 * C943 + C47473 * C2169 -
               C10328 * C2168) *
                  C47359) *
                 C47440) *
                C47261) *
               C47219) *
              C47447)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C10325 * C122 - C10327 * C115 + C47473 * C491 - C10328 * C481) *
                 C114 +
             (C10325 * C136 - C10327 * C123 + C47473 * C511 - C10328 * C492) *
                 C47359) *
                C4745 +
            ((C10330 - C10331 + C10332 - C10333) * C114 +
             (C10334 - C10335 + C10336 - C10337) * C47359) *
                C47440) *
               C47422 +
           (((C10327 * C481 - C10325 * C491 + C10328 * C484 - C47473 * C497) *
                 C114 +
             (C10327 * C492 - C10325 * C511 + C10328 * C498 - C47473 * C514) *
                 C47359) *
                C4745 +
            ((C10686 - C10687 + C10688 - C10689) * C114 +
             (C10690 - C10691 + C10692 - C10693) * C47359) *
                C47440) *
               C47261) *
              C1420 +
          ((((C10327 * C294 - C10325 * C304 + C10328 * C931 - C47473 * C936) *
                 C114 +
             (C10327 * C305 - C10325 * C324 + C10328 * C937 - C47473 * C946) *
                 C47359) *
                C4745 +
            ((C10508 - C10509 + C10510 - C10511) * C114 +
             (C10512 - C10513 + C10514 - C10515) * C47359) *
                C47440) *
               C47422 +
           (((C10325 * C936 - C10327 * C931 + C47473 * C1295 - C10328 * C1286) *
                 C114 +
             (C10325 * C946 - C10327 * C937 + C47473 * C1313 - C10328 * C1296) *
                 C47359) *
                C4745 +
            ((C11188 - C11189 + C11190 - C11191) * C114 +
             (C11192 - C11193 + C11194 - C11195) * C47359) *
                C47440) *
               C47261) *
              C1421 +
          ((((C10325 * C310 - C10327 * C297 + C47473 * C1301 - C10328 * C1289) *
                 C114 +
             (C10325 * C327 - C10327 * C311 + C47473 * C1316 - C10328 * C1302) *
                 C47359) *
                C4745 +
            ((C10516 - C10517 + C10518 - C10519) * C114 +
             (C10520 - C10521 + C10522 - C10523) * C47359) *
                C47440) *
               C47422 +
           (((C10327 * C1289 - C10325 * C1301 + C10328 * C1292 -
              C47473 * C1307) *
                 C114 +
             (C10327 * C1302 - C10325 * C1316 + C10328 * C1308 -
              C47473 * C1319) *
                 C47359) *
                C4745 +
            ((C11910 - C11911 + C11912 - C11913) * C114 +
             (C11914 - C11915 + C11916 - C11917) * C47359) *
                C47440) *
               C47261) *
              C1422 +
          ((((C10327 * C1152 - C10325 * C1158 + C10328 * C1694 -
              C47473 * C1697) *
                 C114 +
             (C10327 * C1159 - C10325 * C1170 + C10328 * C1698 -
              C47473 * C1703) *
                 C47359) *
                C4745 +
            ((C11708 - C11709 + C11710 - C11711) * C114 +
             (C11712 - C11713 + C11714 - C11715) * C47359) *
                C47440) *
               C47422 +
           (((C10325 * C1697 - C10327 * C1694 + C47473 * C5923 -
              C10328 * C5921) *
                 C114 +
             (C10325 * C1703 - C10327 * C1698 + C47473 * C5927 -
              C10328 * C5924) *
                 C47359) *
                C4745 +
            ((C10325 * C1699 - C10327 * C1695 + C47473 * C5925 -
              C10328 * C5922) *
                 C114 +
             (C10325 * C1704 - C10327 * C1700 + C47473 * C5928 -
              C10328 * C5926) *
                 C47359) *
                C47440) *
               C47261) *
              C47463) *
         C47128) /
            (p * q * std::sqrt(p + q));
    d2ee[72] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C10325 * C122 - C10327 * C115 + C47473 * C491 - C10328 * C481) *
                 C114 +
             (C10325 * C136 - C10327 * C123 + C47473 * C511 - C10328 * C492) *
                 C47359) *
                C4745 +
            ((C10330 - C10331 + C10332 - C10333) * C114 +
             (C10334 - C10335 + C10336 - C10337) * C47359) *
                C47440) *
               C47174 * C47492 +
           (((C10327 * C294 - C10325 * C304 + C10328 * C931 - C47473 * C936) *
                 C114 +
             (C10327 * C305 - C10325 * C324 + C10328 * C937 - C47473 * C946) *
                 C47359) *
                C4745 +
            ((C10508 - C10509 + C10510 - C10511) * C114 +
             (C10512 - C10513 + C10514 - C10515) * C47359) *
                C47440) *
               C47174 * C47480 +
           (((C10325 * C310 - C10327 * C297 + C47473 * C1301 - C10328 * C1289) *
                 C114 +
             (C10325 * C327 - C10327 * C311 + C47473 * C1316 - C10328 * C1302) *
                 C47359) *
                C4745 +
            ((C10516 - C10517 + C10518 - C10519) * C114 +
             (C10520 - C10521 + C10522 - C10523) * C47359) *
                C47440) *
               C47174 * C47453) *
              C291 +
          ((((C10331 - C10330 + C10333 - C10332) * C114 +
             (C10335 - C10334 + C10337 - C10336) * C47359) *
                C4745 +
            ((C10338 - C10339 + C10340 - C10341) * C114 +
             (C10342 - C10343 + C10344 - C10345) * C47359) *
                C47440) *
               C47174 * C47492 +
           (((C10509 - C10508 + C10511 - C10510) * C114 +
             (C10513 - C10512 + C10515 - C10514) * C47359) *
                C4745 +
            ((C10524 - C10525 + C10526 - C10527) * C114 +
             (C10528 - C10529 + C10530 - C10531) * C47359) *
                C47440) *
               C47174 * C47480 +
           (((C10517 - C10516 + C10519 - C10518) * C114 +
             (C10521 - C10520 + C10523 - C10522) * C47359) *
                C4745 +
            ((C10532 - C10533 + C10534 - C10535) * C114 +
             (C10536 - C10537 + C10538 - C10539) * C47359) *
                C47440) *
               C47174 * C47453) *
              C292 +
          ((((C10339 - C10338 + C10341 - C10340) * C114 +
             (C10343 - C10342 + C10345 - C10344) * C47359) *
                C4745 +
            ((C10346 - C10347 + C10348 - C10349) * C114 +
             (C10350 - C10351 + C10352 - C10353) * C47359) *
                C47440) *
               C47174 * C47492 +
           (((C10525 - C10524 + C10527 - C10526) * C114 +
             (C10529 - C10528 + C10531 - C10530) * C47359) *
                C4745 +
            ((C10327 * C300 - C10325 * C316 + C10328 * C934 - C47473 * C942) *
                 C114 +
             (C10327 * C317 - C10325 * C330 + C10328 * C943 - C47473 * C949) *
                 C47359) *
                C47440) *
               C47174 * C47480 +
           (((C10533 - C10532 + C10535 - C10534) * C114 +
             (C10537 - C10536 + C10539 - C10538) * C47359) *
                C4745 +
            ((C10325 * C318 - C10327 * C301 + C47473 * C1585 - C10328 * C1584) *
                 C114 +
             (C10325 * C331 - C10327 * C319 + C47473 * C1587 - C10328 * C1586) *
                 C47359) *
                C47440) *
               C47174 * C47453) *
              C47447)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C10325 * C122 - C10327 * C115 + C47473 * C491 - C10328 * C481) *
                C114 +
            (C10325 * C136 - C10327 * C123 + C47473 * C511 - C10328 * C492) *
                C47359) *
               C4745 +
           ((C10330 - C10331 + C10332 - C10333) * C114 +
            (C10334 - C10335 + C10336 - C10337) * C47359) *
               C47440) *
              C47174 * C47156 * C108 +
          (((C10331 - C10330 + C10333 - C10332) * C114 +
            (C10335 - C10334 + C10337 - C10336) * C47359) *
               C4745 +
           ((C10338 - C10339 + C10340 - C10341) * C114 +
            (C10342 - C10343 + C10344 - C10345) * C47359) *
               C47440) *
              C47174 * C47156 * C109 +
          (((C10339 - C10338 + C10341 - C10340) * C114 +
            (C10343 - C10342 + C10345 - C10344) * C47359) *
               C4745 +
           ((C10346 - C10347 + C10348 - C10349) * C114 +
            (C10350 - C10351 + C10352 - C10353) * C47359) *
               C47440) *
              C47174 * C47156 * C110 +
          (((C10347 - C10346 + C10349 - C10348) * C114 +
            (C10351 - C10350 + C10353 - C10352) * C47359) *
               C4745 +
           ((C10354 - C10355 + C10356 - C10357) * C114 +
            (C10358 - C10359 + C10360 - C10361) * C47359) *
               C47440) *
              C47174 * C47156 * C111 +
          (((C10355 - C10354 + C10357 - C10356) * C114 +
            (C10359 - C10358 + C10361 - C10360) * C47359) *
               C4745 +
           ((C10325 * C132 - C10327 * C120 + C47473 * C773 - C10328 * C772) *
                C114 +
            (C10325 * C141 - C10327 * C133 + C47473 * C775 - C10328 * C774) *
                C47359) *
               C47440) *
              C47174 * C47156 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C10325 * C122 - C10327 * C115 + C47473 * C491 - C10328 * C481) *
                 C114 +
             (C10325 * C136 - C10327 * C123 + C47473 * C511 - C10328 * C492) *
                 C47359) *
                C4745 +
            ((C10330 - C10331 + C10332 - C10333) * C114 +
             (C10334 - C10335 + C10336 - C10337) * C47359) *
                C47440) *
               C47493 +
           (((C10327 * C481 - C10325 * C491 + C10328 * C484 - C47473 * C497) *
                 C114 +
             (C10327 * C492 - C10325 * C511 + C10328 * C498 - C47473 * C514) *
                 C47359) *
                C4745 +
            ((C10686 - C10687 + C10688 - C10689) * C114 +
             (C10690 - C10691 + C10692 - C10693) * C47359) *
                C47440) *
               C47482 +
           (((C10325 * C497 - C10327 * C484 + C47473 * C2002 - C10328 * C1996) *
                 C114 +
             (C10325 * C514 - C10327 * C498 + C47473 * C2014 - C10328 * C2003) *
                 C47359) *
                C4745 +
            ((C10694 - C10695 + C10696 - C10697) * C114 +
             (C10698 - C10699 + C10700 - C10701) * C47359) *
                C47440) *
               C47456) *
              C47156 * C291 +
          ((((C10331 - C10330 + C10333 - C10332) * C114 +
             (C10335 - C10334 + C10337 - C10336) * C47359) *
                C4745 +
            ((C10338 - C10339 + C10340 - C10341) * C114 +
             (C10342 - C10343 + C10344 - C10345) * C47359) *
                C47440) *
               C47493 +
           (((C10687 - C10686 + C10689 - C10688) * C114 +
             (C10691 - C10690 + C10693 - C10692) * C47359) *
                C4745 +
            ((C10702 - C10703 + C10704 - C10705) * C114 +
             (C10706 - C10707 + C10708 - C10709) * C47359) *
                C47440) *
               C47482 +
           (((C10695 - C10694 + C10697 - C10696) * C114 +
             (C10699 - C10698 + C10701 - C10700) * C47359) *
                C4745 +
            ((C10710 - C10711 + C10712 - C10713) * C114 +
             (C10714 - C10715 + C10716 - C10717) * C47359) *
                C47440) *
               C47456) *
              C47156 * C292 +
          ((((C10339 - C10338 + C10341 - C10340) * C114 +
             (C10343 - C10342 + C10345 - C10344) * C47359) *
                C4745 +
            ((C10346 - C10347 + C10348 - C10349) * C114 +
             (C10350 - C10351 + C10352 - C10353) * C47359) *
                C47440) *
               C47493 +
           (((C10703 - C10702 + C10705 - C10704) * C114 +
             (C10707 - C10706 + C10709 - C10708) * C47359) *
                C4745 +
            ((C10327 * C487 - C10325 * C503 + C10328 * C488 - C47473 * C505) *
                 C114 +
             (C10327 * C504 - C10325 * C517 + C10328 * C506 - C47473 * C518) *
                 C47359) *
                C47440) *
               C47482 +
           (((C10711 - C10710 + C10713 - C10712) * C114 +
             (C10715 - C10714 + C10717 - C10716) * C47359) *
                C4745 +
            ((C10325 * C505 - C10327 * C488 + C47473 * C2281 - C10328 * C2280) *
                 C114 +
             (C10325 * C518 - C10327 * C506 + C47473 * C2283 - C10328 * C2282) *
                 C47359) *
                C47440) *
               C47456) *
              C47156 * C47447)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C10325 * C122 - C10327 * C115 + C47473 * C491 - C10328 * C481) *
                 C114 +
             (C10325 * C136 - C10327 * C123 + C47473 * C511 - C10328 * C492) *
                 C47359) *
                C4745 +
            ((C10330 - C10331 + C10332 - C10333) * C114 +
             (C10334 - C10335 + C10336 - C10337) * C47359) *
                C47440) *
               C47174 * C1078 +
           (((C10327 * C294 - C10325 * C304 + C10328 * C931 - C47473 * C936) *
                 C114 +
             (C10327 * C305 - C10325 * C324 + C10328 * C937 - C47473 * C946) *
                 C47359) *
                C4745 +
            ((C10508 - C10509 + C10510 - C10511) * C114 +
             (C10512 - C10513 + C10514 - C10515) * C47359) *
                C47440) *
               C47174 * C1079 +
           (((C10325 * C310 - C10327 * C297 + C47473 * C1301 - C10328 * C1289) *
                 C114 +
             (C10325 * C327 - C10327 * C311 + C47473 * C1316 - C10328 * C1302) *
                 C47359) *
                C4745 +
            ((C10516 - C10517 + C10518 - C10519) * C114 +
             (C10520 - C10521 + C10522 - C10523) * C47359) *
                C47440) *
               C47174 * C47453) *
              C47489 +
          ((((C10331 - C10330 + C10333 - C10332) * C114 +
             (C10335 - C10334 + C10337 - C10336) * C47359) *
                C4745 +
            ((C10338 - C10339 + C10340 - C10341) * C114 +
             (C10342 - C10343 + C10344 - C10345) * C47359) *
                C47440) *
               C47174 * C1078 +
           (((C10509 - C10508 + C10511 - C10510) * C114 +
             (C10513 - C10512 + C10515 - C10514) * C47359) *
                C4745 +
            ((C10524 - C10525 + C10526 - C10527) * C114 +
             (C10528 - C10529 + C10530 - C10531) * C47359) *
                C47440) *
               C47174 * C1079 +
           (((C10517 - C10516 + C10519 - C10518) * C114 +
             (C10521 - C10520 + C10523 - C10522) * C47359) *
                C4745 +
            ((C10532 - C10533 + C10534 - C10535) * C114 +
             (C10536 - C10537 + C10538 - C10539) * C47359) *
                C47440) *
               C47174 * C47453) *
              C47476 +
          ((((C10339 - C10338 + C10341 - C10340) * C114 +
             (C10343 - C10342 + C10345 - C10344) * C47359) *
                C4745 +
            ((C10346 - C10347 + C10348 - C10349) * C114 +
             (C10350 - C10351 + C10352 - C10353) * C47359) *
                C47440) *
               C47174 * C1078 +
           (((C10525 - C10524 + C10527 - C10526) * C114 +
             (C10529 - C10528 + C10531 - C10530) * C47359) *
                C4745 +
            ((C10848 - C10849 + C10850 - C10851) * C114 +
             (C10852 - C10853 + C10854 - C10855) * C47359) *
                C47440) *
               C47174 * C1079 +
           (((C10533 - C10532 + C10535 - C10534) * C114 +
             (C10537 - C10536 + C10539 - C10538) * C47359) *
                C4745 +
            ((C10325 * C318 - C10327 * C301 + C47473 * C1585 - C10328 * C1584) *
                 C114 +
             (C10325 * C331 - C10327 * C319 + C47473 * C1587 - C10328 * C1586) *
                 C47359) *
                C47440) *
               C47174 * C47453) *
              C47447)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C10325 * C122 - C10327 * C115 + C47473 * C491 - C10328 * C481) *
                C114 +
            (C10325 * C136 - C10327 * C123 + C47473 * C511 - C10328 * C492) *
                C47359) *
               C4745 +
           ((C10330 - C10331 + C10332 - C10333) * C114 +
            (C10334 - C10335 + C10336 - C10337) * C47359) *
               C47440) *
              C47174 * C1146 +
          (((C10327 * C294 - C10325 * C304 + C10328 * C931 - C47473 * C936) *
                C114 +
            (C10327 * C305 - C10325 * C324 + C10328 * C937 - C47473 * C946) *
                C47359) *
               C4745 +
           ((C10508 - C10509 + C10510 - C10511) * C114 +
            (C10512 - C10513 + C10514 - C10515) * C47359) *
               C47440) *
              C47174 * C1147 +
          (((C10325 * C310 - C10327 * C297 + C47473 * C1301 - C10328 * C1289) *
                C114 +
            (C10325 * C327 - C10327 * C311 + C47473 * C1316 - C10328 * C1302) *
                C47359) *
               C4745 +
           ((C10516 - C10517 + C10518 - C10519) * C114 +
            (C10520 - C10521 + C10522 - C10523) * C47359) *
               C47440) *
              C47174 * C1148 +
          (((C10327 * C1152 - C10325 * C1158 + C10328 * C1694 -
             C47473 * C1697) *
                C114 +
            (C10327 * C1159 - C10325 * C1170 + C10328 * C1698 -
             C47473 * C1703) *
                C47359) *
               C4745 +
           ((C10327 * C1153 - C10325 * C1160 + C10328 * C1695 -
             C47473 * C1699) *
                C114 +
            (C10327 * C1161 - C10325 * C1171 + C10328 * C1700 -
             C47473 * C1704) *
                C47359) *
               C47440) *
              C47174 * C1149 +
          (((C10325 * C1164 - C10327 * C1155 + C47473 * C6413 -
             C10328 * C6411) *
                C114 +
            (C10325 * C1173 - C10327 * C1165 + C47473 * C6417 -
             C10328 * C6414) *
                C47359) *
               C4745 +
           ((C10325 * C1166 - C10327 * C1156 + C47473 * C6415 -
             C10328 * C6412) *
                C114 +
            (C10325 * C1174 - C10327 * C1167 + C47473 * C6418 -
             C10328 * C6416) *
                C47359) *
               C47440) *
              C47174 * C1150) *
         C47128) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C10325 * C122 - C10327 * C115 + C47473 * C491 - C10328 * C481) *
                 C114 +
             (C10325 * C136 - C10327 * C123 + C47473 * C511 - C10328 * C492) *
                 C47359) *
                C4745 +
            ((C10330 - C10331 + C10332 - C10333) * C114 +
             (C10334 - C10335 + C10336 - C10337) * C47359) *
                C47440) *
               C47493 +
           (((C10327 * C481 - C10325 * C491 + C10328 * C484 - C47473 * C497) *
                 C114 +
             (C10327 * C492 - C10325 * C511 + C10328 * C498 - C47473 * C514) *
                 C47359) *
                C4745 +
            ((C10686 - C10687 + C10688 - C10689) * C114 +
             (C10690 - C10691 + C10692 - C10693) * C47359) *
                C47440) *
               C47482 +
           (((C10325 * C497 - C10327 * C484 + C47473 * C2002 - C10328 * C1996) *
                 C114 +
             (C10325 * C514 - C10327 * C498 + C47473 * C2014 - C10328 * C2003) *
                 C47359) *
                C4745 +
            ((C10694 - C10695 + C10696 - C10697) * C114 +
             (C10698 - C10699 + C10700 - C10701) * C47359) *
                C47440) *
               C47456) *
              C1078 +
          ((((C10327 * C294 - C10325 * C304 + C10328 * C931 - C47473 * C936) *
                 C114 +
             (C10327 * C305 - C10325 * C324 + C10328 * C937 - C47473 * C946) *
                 C47359) *
                C4745 +
            ((C10508 - C10509 + C10510 - C10511) * C114 +
             (C10512 - C10513 + C10514 - C10515) * C47359) *
                C47440) *
               C47493 +
           (((C10325 * C936 - C10327 * C931 + C47473 * C1295 - C10328 * C1286) *
                 C114 +
             (C10325 * C946 - C10327 * C937 + C47473 * C1313 - C10328 * C1296) *
                 C47359) *
                C4745 +
            ((C11188 - C11189 + C11190 - C11191) * C114 +
             (C11192 - C11193 + C11194 - C11195) * C47359) *
                C47440) *
               C47482 +
           (((C10327 * C1286 - C10325 * C1295 + C10328 * C2390 -
              C47473 * C2393) *
                 C114 +
             (C10327 * C1296 - C10325 * C1313 + C10328 * C2394 -
              C47473 * C2399) *
                 C47359) *
                C4745 +
            ((C10327 * C1287 - C10325 * C1297 + C10328 * C2391 -
              C47473 * C2395) *
                 C114 +
             (C10327 * C1298 - C10325 * C1314 + C10328 * C2396 -
              C47473 * C2400) *
                 C47359) *
                C47440) *
               C47456) *
              C1079 +
          ((((C10325 * C310 - C10327 * C297 + C47473 * C1301 - C10328 * C1289) *
                 C114 +
             (C10325 * C327 - C10327 * C311 + C47473 * C1316 - C10328 * C1302) *
                 C47359) *
                C4745 +
            ((C10516 - C10517 + C10518 - C10519) * C114 +
             (C10520 - C10521 + C10522 - C10523) * C47359) *
                C47440) *
               C47493 +
           (((C10327 * C1289 - C10325 * C1301 + C10328 * C1292 -
              C47473 * C1307) *
                 C114 +
             (C10327 * C1302 - C10325 * C1316 + C10328 * C1308 -
              C47473 * C1319) *
                 C47359) *
                C4745 +
            ((C10327 * C1290 - C10325 * C1303 + C10328 * C1293 -
              C47473 * C1309) *
                 C114 +
             (C10327 * C1304 - C10325 * C1317 + C10328 * C1310 -
              C47473 * C1320) *
                 C47359) *
                C47440) *
               C47482 +
           (((C10325 * C1307 - C10327 * C1292 + C47473 * C7269 -
              C10328 * C7267) *
                 C114 +
             (C10325 * C1319 - C10327 * C1308 + C47473 * C7273 -
              C10328 * C7270) *
                 C47359) *
                C4745 +
            ((C10325 * C1309 - C10327 * C1293 + C47473 * C7271 -
              C10328 * C7268) *
                 C114 +
             (C10325 * C1320 - C10327 * C1310 + C47473 * C7274 -
              C10328 * C7272) *
                 C47359) *
                C47440) *
               C47456) *
              C47453) *
         C47128) /
            (p * q * std::sqrt(p + q));
    d2ee[73] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C10325 * C122 - C10327 * C115 + C47473 * C491 - C10328 * C481) *
                 C114 +
             (C10325 * C136 - C10327 * C123 + C47473 * C511 - C10328 * C492) *
                 C47359) *
                C4745 +
            ((C10330 - C10331 + C10332 - C10333) * C114 +
             (C10334 - C10335 + C10336 - C10337) * C47359) *
                C47440) *
               C47422 +
           (((C10327 * C481 - C10325 * C491 + C10328 * C484 - C47473 * C497) *
                 C114 +
             (C10327 * C492 - C10325 * C511 + C10328 * C498 - C47473 * C514) *
                 C47359) *
                C4745 +
            ((C10686 - C10687 + C10688 - C10689) * C114 +
             (C10690 - C10691 + C10692 - C10693) * C47359) *
                C47440) *
               C47261) *
              C47156 * C655 +
          ((((C10331 - C10330 + C10333 - C10332) * C114 +
             (C10335 - C10334 + C10337 - C10336) * C47359) *
                C4745 +
            ((C10338 - C10339 + C10340 - C10341) * C114 +
             (C10342 - C10343 + C10344 - C10345) * C47359) *
                C47440) *
               C47422 +
           (((C10687 - C10686 + C10689 - C10688) * C114 +
             (C10691 - C10690 + C10693 - C10692) * C47359) *
                C4745 +
            ((C10702 - C10703 + C10704 - C10705) * C114 +
             (C10706 - C10707 + C10708 - C10709) * C47359) *
                C47440) *
               C47261) *
              C47156 * C656 +
          ((((C10339 - C10338 + C10341 - C10340) * C114 +
             (C10343 - C10342 + C10345 - C10344) * C47359) *
                C4745 +
            ((C10346 - C10347 + C10348 - C10349) * C114 +
             (C10350 - C10351 + C10352 - C10353) * C47359) *
                C47440) *
               C47422 +
           (((C10703 - C10702 + C10705 - C10704) * C114 +
             (C10707 - C10706 + C10709 - C10708) * C47359) *
                C4745 +
            ((C10986 - C10987 + C10988 - C10989) * C114 +
             (C10990 - C10991 + C10992 - C10993) * C47359) *
                C47440) *
               C47261) *
              C47156 * C657 +
          ((((C10347 - C10346 + C10349 - C10348) * C114 +
             (C10351 - C10350 + C10353 - C10352) * C47359) *
                C4745 +
            ((C10354 - C10355 + C10356 - C10357) * C114 +
             (C10358 - C10359 + C10360 - C10361) * C47359) *
                C47440) *
               C47422 +
           (((C10987 - C10986 + C10989 - C10988) * C114 +
             (C10991 - C10990 + C10993 - C10992) * C47359) *
                C4745 +
            ((C10325 * C507 - C10327 * C489 + C47473 * C509 - C10328 * C490) *
                 C114 +
             (C10325 * C519 - C10327 * C508 + C47473 * C520 - C10328 * C510) *
                 C47359) *
                C47440) *
               C47261) *
              C47156 * C47457)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C10325 * C122 - C10327 * C115 + C47473 * C491 - C10328 * C481) *
                  C114 +
              (C10325 * C136 - C10327 * C123 + C47473 * C511 - C10328 * C492) *
                  C47359) *
                 C4745 +
             ((C10330 - C10331 + C10332 - C10333) * C114 +
              (C10334 - C10335 + C10336 - C10337) * C47359) *
                 C47440) *
                C47422 +
            (((C10327 * C481 - C10325 * C491 + C10328 * C484 - C47473 * C497) *
                  C114 +
              (C10327 * C492 - C10325 * C511 + C10328 * C498 - C47473 * C514) *
                  C47359) *
                 C4745 +
             ((C10686 - C10687 + C10688 - C10689) * C114 +
              (C10690 - C10691 + C10692 - C10693) * C47359) *
                 C47440) *
                C47261) *
               C1078 +
           ((((C10327 * C294 - C10325 * C304 + C10328 * C931 - C47473 * C936) *
                  C114 +
              (C10327 * C305 - C10325 * C324 + C10328 * C937 - C47473 * C946) *
                  C47359) *
                 C4745 +
             ((C10508 - C10509 + C10510 - C10511) * C114 +
              (C10512 - C10513 + C10514 - C10515) * C47359) *
                 C47440) *
                C47422 +
            (((C10325 * C936 - C10327 * C931 + C47473 * C1295 -
               C10328 * C1286) *
                  C114 +
              (C10325 * C946 - C10327 * C937 + C47473 * C1313 -
               C10328 * C1296) *
                  C47359) *
                 C4745 +
             ((C11188 - C11189 + C11190 - C11191) * C114 +
              (C11192 - C11193 + C11194 - C11195) * C47359) *
                 C47440) *
                C47261) *
               C1079 +
           ((((C10325 * C310 - C10327 * C297 + C47473 * C1301 -
               C10328 * C1289) *
                  C114 +
              (C10325 * C327 - C10327 * C311 + C47473 * C1316 -
               C10328 * C1302) *
                  C47359) *
                 C4745 +
             ((C10516 - C10517 + C10518 - C10519) * C114 +
              (C10520 - C10521 + C10522 - C10523) * C47359) *
                 C47440) *
                C47422 +
            (((C10327 * C1289 - C10325 * C1301 + C10328 * C1292 -
               C47473 * C1307) *
                  C114 +
              (C10327 * C1302 - C10325 * C1316 + C10328 * C1308 -
               C47473 * C1319) *
                  C47359) *
                 C4745 +
             ((C11910 - C11911 + C11912 - C11913) * C114 +
              (C11914 - C11915 + C11916 - C11917) * C47359) *
                 C47440) *
                C47261) *
               C47453) *
              C47407 +
          (((((C10331 - C10330 + C10333 - C10332) * C114 +
              (C10335 - C10334 + C10337 - C10336) * C47359) *
                 C4745 +
             ((C10338 - C10339 + C10340 - C10341) * C114 +
              (C10342 - C10343 + C10344 - C10345) * C47359) *
                 C47440) *
                C47422 +
            (((C10687 - C10686 + C10689 - C10688) * C114 +
              (C10691 - C10690 + C10693 - C10692) * C47359) *
                 C4745 +
             ((C10702 - C10703 + C10704 - C10705) * C114 +
              (C10706 - C10707 + C10708 - C10709) * C47359) *
                 C47440) *
                C47261) *
               C1078 +
           ((((C10509 - C10508 + C10511 - C10510) * C114 +
              (C10513 - C10512 + C10515 - C10514) * C47359) *
                 C4745 +
             ((C10524 - C10525 + C10526 - C10527) * C114 +
              (C10528 - C10529 + C10530 - C10531) * C47359) *
                 C47440) *
                C47422 +
            (((C11189 - C11188 + C11191 - C11190) * C114 +
              (C11193 - C11192 + C11195 - C11194) * C47359) *
                 C4745 +
             ((C11196 - C11197 + C11198 - C11199) * C114 +
              (C11200 - C11201 + C11202 - C11203) * C47359) *
                 C47440) *
                C47261) *
               C1079 +
           ((((C10517 - C10516 + C10519 - C10518) * C114 +
              (C10521 - C10520 + C10523 - C10522) * C47359) *
                 C4745 +
             ((C10532 - C10533 + C10534 - C10535) * C114 +
              (C10536 - C10537 + C10538 - C10539) * C47359) *
                 C47440) *
                C47422 +
            (((C11911 - C11910 + C11913 - C11912) * C114 +
              (C11915 - C11914 + C11917 - C11916) * C47359) *
                 C4745 +
             ((C10325 * C1305 - C10327 * C1291 + C47473 * C1311 -
               C10328 * C1294) *
                  C114 +
              (C10325 * C1318 - C10327 * C1306 + C47473 * C1321 -
               C10328 * C1312) *
                  C47359) *
                 C47440) *
                C47261) *
               C47453) *
              C47139)) /
            (p * q * std::sqrt(p + q));
    d2ee[74] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C10325 * C122 - C10327 * C115 + C47473 * C491 - C10328 * C481) *
                C114 +
            (C10325 * C136 - C10327 * C123 + C47473 * C511 - C10328 * C492) *
                C47359) *
               C4745 +
           ((C10330 - C10331 + C10332 - C10333) * C114 +
            (C10334 - C10335 + C10336 - C10337) * C47359) *
               C47440) *
              C47174 * C47156 * C108 +
          (((C10331 - C10330 + C10333 - C10332) * C114 +
            (C10335 - C10334 + C10337 - C10336) * C47359) *
               C4745 +
           ((C10338 - C10339 + C10340 - C10341) * C114 +
            (C10342 - C10343 + C10344 - C10345) * C47359) *
               C47440) *
              C47174 * C47156 * C109 +
          (((C10339 - C10338 + C10341 - C10340) * C114 +
            (C10343 - C10342 + C10345 - C10344) * C47359) *
               C4745 +
           ((C10346 - C10347 + C10348 - C10349) * C114 +
            (C10350 - C10351 + C10352 - C10353) * C47359) *
               C47440) *
              C47174 * C47156 * C110 +
          (((C10347 - C10346 + C10349 - C10348) * C114 +
            (C10351 - C10350 + C10353 - C10352) * C47359) *
               C4745 +
           ((C10354 - C10355 + C10356 - C10357) * C114 +
            (C10358 - C10359 + C10360 - C10361) * C47359) *
               C47440) *
              C47174 * C47156 * C111 +
          (((C10355 - C10354 + C10357 - C10356) * C114 +
            (C10359 - C10358 + C10361 - C10360) * C47359) *
               C4745 +
           ((C10325 * C132 - C10327 * C120 + C47473 * C773 - C10328 * C772) *
                C114 +
            (C10325 * C141 - C10327 * C133 + C47473 * C775 - C10328 * C774) *
                C47359) *
               C47440) *
              C47174 * C47156 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C10325 * C122 - C10327 * C115 + C47473 * C491 - C10328 * C481) *
                 C114 +
             (C10325 * C136 - C10327 * C123 + C47473 * C511 - C10328 * C492) *
                 C47359) *
                C4745 +
            ((C10330 - C10331 + C10332 - C10333) * C114 +
             (C10334 - C10335 + C10336 - C10337) * C47359) *
                C47440) *
               C47174 * C47492 +
           (((C10327 * C294 - C10325 * C304 + C10328 * C931 - C47473 * C936) *
                 C114 +
             (C10327 * C305 - C10325 * C324 + C10328 * C937 - C47473 * C946) *
                 C47359) *
                C4745 +
            ((C10508 - C10509 + C10510 - C10511) * C114 +
             (C10512 - C10513 + C10514 - C10515) * C47359) *
                C47440) *
               C47174 * C47480 +
           (((C10325 * C310 - C10327 * C297 + C47473 * C1301 - C10328 * C1289) *
                 C114 +
             (C10325 * C327 - C10327 * C311 + C47473 * C1316 - C10328 * C1302) *
                 C47359) *
                C4745 +
            ((C10516 - C10517 + C10518 - C10519) * C114 +
             (C10520 - C10521 + C10522 - C10523) * C47359) *
                C47440) *
               C47174 * C47453) *
              C291 +
          ((((C10331 - C10330 + C10333 - C10332) * C114 +
             (C10335 - C10334 + C10337 - C10336) * C47359) *
                C4745 +
            ((C10338 - C10339 + C10340 - C10341) * C114 +
             (C10342 - C10343 + C10344 - C10345) * C47359) *
                C47440) *
               C47174 * C47492 +
           (((C10509 - C10508 + C10511 - C10510) * C114 +
             (C10513 - C10512 + C10515 - C10514) * C47359) *
                C4745 +
            ((C10524 - C10525 + C10526 - C10527) * C114 +
             (C10528 - C10529 + C10530 - C10531) * C47359) *
                C47440) *
               C47174 * C47480 +
           (((C10517 - C10516 + C10519 - C10518) * C114 +
             (C10521 - C10520 + C10523 - C10522) * C47359) *
                C4745 +
            ((C10532 - C10533 + C10534 - C10535) * C114 +
             (C10536 - C10537 + C10538 - C10539) * C47359) *
                C47440) *
               C47174 * C47453) *
              C292 +
          ((((C10339 - C10338 + C10341 - C10340) * C114 +
             (C10343 - C10342 + C10345 - C10344) * C47359) *
                C4745 +
            ((C10346 - C10347 + C10348 - C10349) * C114 +
             (C10350 - C10351 + C10352 - C10353) * C47359) *
                C47440) *
               C47174 * C47492 +
           (((C10525 - C10524 + C10527 - C10526) * C114 +
             (C10529 - C10528 + C10531 - C10530) * C47359) *
                C4745 +
            ((C10327 * C300 - C10325 * C316 + C10328 * C934 - C47473 * C942) *
                 C114 +
             (C10327 * C317 - C10325 * C330 + C10328 * C943 - C47473 * C949) *
                 C47359) *
                C47440) *
               C47174 * C47480 +
           (((C10533 - C10532 + C10535 - C10534) * C114 +
             (C10537 - C10536 + C10539 - C10538) * C47359) *
                C4745 +
            ((C10325 * C318 - C10327 * C301 + C47473 * C1585 - C10328 * C1584) *
                 C114 +
             (C10325 * C331 - C10327 * C319 + C47473 * C1587 - C10328 * C1586) *
                 C47359) *
                C47440) *
               C47174 * C47453) *
              C47447)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C10325 * C122 - C10327 * C115 + C47473 * C491 - C10328 * C481) *
                 C114 +
             (C10325 * C136 - C10327 * C123 + C47473 * C511 - C10328 * C492) *
                 C47359) *
                C4745 +
            ((C10330 - C10331 + C10332 - C10333) * C114 +
             (C10334 - C10335 + C10336 - C10337) * C47359) *
                C47440) *
               C47174 * C1078 +
           (((C10327 * C294 - C10325 * C304 + C10328 * C931 - C47473 * C936) *
                 C114 +
             (C10327 * C305 - C10325 * C324 + C10328 * C937 - C47473 * C946) *
                 C47359) *
                C4745 +
            ((C10508 - C10509 + C10510 - C10511) * C114 +
             (C10512 - C10513 + C10514 - C10515) * C47359) *
                C47440) *
               C47174 * C1079 +
           (((C10325 * C310 - C10327 * C297 + C47473 * C1301 - C10328 * C1289) *
                 C114 +
             (C10325 * C327 - C10327 * C311 + C47473 * C1316 - C10328 * C1302) *
                 C47359) *
                C4745 +
            ((C10516 - C10517 + C10518 - C10519) * C114 +
             (C10520 - C10521 + C10522 - C10523) * C47359) *
                C47440) *
               C47174 * C47453) *
              C47489 +
          ((((C10331 - C10330 + C10333 - C10332) * C114 +
             (C10335 - C10334 + C10337 - C10336) * C47359) *
                C4745 +
            ((C10338 - C10339 + C10340 - C10341) * C114 +
             (C10342 - C10343 + C10344 - C10345) * C47359) *
                C47440) *
               C47174 * C1078 +
           (((C10509 - C10508 + C10511 - C10510) * C114 +
             (C10513 - C10512 + C10515 - C10514) * C47359) *
                C4745 +
            ((C10524 - C10525 + C10526 - C10527) * C114 +
             (C10528 - C10529 + C10530 - C10531) * C47359) *
                C47440) *
               C47174 * C1079 +
           (((C10517 - C10516 + C10519 - C10518) * C114 +
             (C10521 - C10520 + C10523 - C10522) * C47359) *
                C4745 +
            ((C10532 - C10533 + C10534 - C10535) * C114 +
             (C10536 - C10537 + C10538 - C10539) * C47359) *
                C47440) *
               C47174 * C47453) *
              C47476 +
          ((((C10339 - C10338 + C10341 - C10340) * C114 +
             (C10343 - C10342 + C10345 - C10344) * C47359) *
                C4745 +
            ((C10346 - C10347 + C10348 - C10349) * C114 +
             (C10350 - C10351 + C10352 - C10353) * C47359) *
                C47440) *
               C47174 * C1078 +
           (((C10525 - C10524 + C10527 - C10526) * C114 +
             (C10529 - C10528 + C10531 - C10530) * C47359) *
                C4745 +
            ((C10848 - C10849 + C10850 - C10851) * C114 +
             (C10852 - C10853 + C10854 - C10855) * C47359) *
                C47440) *
               C47174 * C1079 +
           (((C10533 - C10532 + C10535 - C10534) * C114 +
             (C10537 - C10536 + C10539 - C10538) * C47359) *
                C4745 +
            ((C10325 * C318 - C10327 * C301 + C47473 * C1585 - C10328 * C1584) *
                 C114 +
             (C10325 * C331 - C10327 * C319 + C47473 * C1587 - C10328 * C1586) *
                 C47359) *
                C47440) *
               C47174 * C47453) *
              C47447)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C10325 * C122 - C10327 * C115 + C47473 * C491 - C10328 * C481) *
                C114 +
            (C10325 * C136 - C10327 * C123 + C47473 * C511 - C10328 * C492) *
                C47359) *
               C4745 +
           ((C10330 - C10331 + C10332 - C10333) * C114 +
            (C10334 - C10335 + C10336 - C10337) * C47359) *
               C47440) *
              C47174 * C1146 +
          (((C10327 * C294 - C10325 * C304 + C10328 * C931 - C47473 * C936) *
                C114 +
            (C10327 * C305 - C10325 * C324 + C10328 * C937 - C47473 * C946) *
                C47359) *
               C4745 +
           ((C10508 - C10509 + C10510 - C10511) * C114 +
            (C10512 - C10513 + C10514 - C10515) * C47359) *
               C47440) *
              C47174 * C1147 +
          (((C10325 * C310 - C10327 * C297 + C47473 * C1301 - C10328 * C1289) *
                C114 +
            (C10325 * C327 - C10327 * C311 + C47473 * C1316 - C10328 * C1302) *
                C47359) *
               C4745 +
           ((C10516 - C10517 + C10518 - C10519) * C114 +
            (C10520 - C10521 + C10522 - C10523) * C47359) *
               C47440) *
              C47174 * C1148 +
          (((C10327 * C1152 - C10325 * C1158 + C10328 * C1694 -
             C47473 * C1697) *
                C114 +
            (C10327 * C1159 - C10325 * C1170 + C10328 * C1698 -
             C47473 * C1703) *
                C47359) *
               C4745 +
           ((C10327 * C1153 - C10325 * C1160 + C10328 * C1695 -
             C47473 * C1699) *
                C114 +
            (C10327 * C1161 - C10325 * C1171 + C10328 * C1700 -
             C47473 * C1704) *
                C47359) *
               C47440) *
              C47174 * C1149 +
          (((C10325 * C1164 - C10327 * C1155 + C47473 * C6413 -
             C10328 * C6411) *
                C114 +
            (C10325 * C1173 - C10327 * C1165 + C47473 * C6417 -
             C10328 * C6414) *
                C47359) *
               C4745 +
           ((C10325 * C1166 - C10327 * C1156 + C47473 * C6415 -
             C10328 * C6412) *
                C114 +
            (C10325 * C1174 - C10327 * C1167 + C47473 * C6418 -
             C10328 * C6416) *
                C47359) *
               C47440) *
              C47174 * C1150) *
         C47128) /
            (p * q * std::sqrt(p + q));
    d2ee[75] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C47376 * C122 - C113 * C115) * C15949 +
             (C47376 * C136 - C113 * C123) * C15945 + (C4896 - C4897) * C15950 +
             (C4898 - C4899) * C47471) *
                C15947 +
            ((C144 - C145) * C15949 + (C146 - C147) * C15945 + C4900 * C15950 +
             C4901 * C47471) *
                C47440) *
               C47174 * C47215 +
           (((C4897 - C4896) * C15949 + (C4899 - C4898) * C15945 +
             (C4902 - C4903) * C15950 + (C4904 - C4905) * C47471) *
                C15947 +
            (C4906 * C15949 + C4907 * C15945 + C4908 * C15950 +
             C4909 * C47471) *
                C47440) *
               C47174 * C47222 +
           (((C4903 - C4902) * C15949 + (C4905 - C4904) * C15945 +
             (C5764 - C5765) * C15950 + (C5766 - C5767) * C47471) *
                C15947 +
            (C4910 * C15949 + C4911 * C15945 + C6076 * C15950 +
             C6077 * C47471) *
                C47440) *
               C47174 * C2868) *
              C47133 +
          ((((C145 - C144) * C15949 + (C147 - C146) * C15945 + C4906 * C15950 +
             C4907 * C47471) *
                C15947 +
            ((C149 - C148) * C15949 + (C151 - C150) * C15945 + C359 * C15950 +
             C360 * C47471) *
                C47440) *
               C47174 * C47215 +
           ((C4900 * C15949 + C4901 * C15945 + C4910 * C15950 +
             C4911 * C47471) *
                C15947 +
            (C4912 * C15949 + C4913 * C15945 + C361 * C15950 + C362 * C47471) *
                C47440) *
               C47174 * C47222 +
           ((C4908 * C15949 + C4909 * C15945 + C6078 * C15950 +
             C6079 * C47471) *
                C15947 +
            (C4914 * C15949 + C4915 * C15945 + (C1435 - C1436) * C15950 +
             (C1437 - C1438) * C47471) *
                C47440) *
               C47174 * C2868) *
              C47142 +
          (((C164 * C15949 + C165 * C15945 + C4912 * C15950 + C4913 * C47471) *
                C15947 +
            ((C153 - C152) * C15949 + (C155 - C154) * C15945 + C664 * C15950 +
             C665 * C47471) *
                C47440) *
               C47174 * C47215 +
           ((C359 * C15949 + C360 * C15945 + C4914 * C15950 + C4915 * C47471) *
                C15947 +
            (C5192 * C15949 + C5193 * C15945 + (C355 - C356) * C15950 +
             (C357 - C358) * C47471) *
                C47440) *
               C47174 * C47222 +
           ((C361 * C15949 + C362 * C15945 + (C1436 - C1435) * C15950 +
             (C1438 - C1437) * C47471) *
                C15947 +
            ((C356 - C355) * C15949 + (C358 - C357) * C15945 +
             (C47376 * C1427 - C113 * C1426) * C15950 +
             (C47376 * C1429 - C113 * C1428) * C47471) *
                C47440) *
               C47174 * C2868) *
              C2871)) /
        (p * q * std::sqrt(p + q));
    d2ee[76] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C47376 * C122 - C113 * C115) * C15949 +
              (C47376 * C136 - C113 * C123) * C15945 +
              (C4896 - C4897) * C15950 + (C4898 - C4899) * C47471) *
                 C15947 +
             ((C144 - C145) * C15949 + (C146 - C147) * C15945 + C4900 * C15950 +
              C4901 * C47471) *
                 C47440) *
                C47422 +
            (((C113 * C481 - C47376 * C491) * C15949 +
              (C113 * C492 - C47376 * C511) * C15945 +
              (C5518 - C5519) * C15950 + (C5520 - C5521) * C47471) *
                 C15947 +
             ((C522 - C523) * C15949 + (C524 - C525) * C15945 + C5522 * C15950 +
              C5523 * C47471) *
                 C47440) *
                C47261) *
               C47215 +
           ((((C4897 - C4896) * C15949 + (C4899 - C4898) * C15945 +
              (C4902 - C4903) * C15950 + (C4904 - C4905) * C47471) *
                 C15947 +
             (C4906 * C15949 + C4907 * C15945 + C4908 * C15950 +
              C4909 * C47471) *
                 C47440) *
                C47422 +
            (((C5519 - C5518) * C15949 + (C5521 - C5520) * C15945 +
              (C5934 - C5935) * C15950 + (C5936 - C5937) * C47471) *
                 C15947 +
             (C5524 * C15949 + C5525 * C15945 + C6274 * C15950 +
              C6275 * C47471) *
                 C47440) *
                C47261) *
               C47222 +
           ((((C4903 - C4902) * C15949 + (C4905 - C4904) * C15945 +
              (C5764 - C5765) * C15950 + (C5766 - C5767) * C47471) *
                 C15947 +
             (C4910 * C15949 + C4911 * C15945 + C6076 * C15950 +
              C6077 * C47471) *
                 C47440) *
                C47422 +
            (((C5935 - C5934) * C15949 + (C5937 - C5936) * C15945 +
              (C6420 - C6421) * C15950 + (C6422 - C6423) * C47471) *
                 C15947 +
             (C6276 * C15949 + C6277 * C15945 + (C6278 - C6279) * C15950 +
              (C6280 - C6281) * C47471) *
                 C47440) *
                C47261) *
               C2868) *
              C2608 +
          (((((C145 - C144) * C15949 + (C147 - C146) * C15945 + C4906 * C15950 +
              C4907 * C47471) *
                 C15947 +
             ((C149 - C148) * C15949 + (C151 - C150) * C15945 + C359 * C15950 +
              C360 * C47471) *
                 C47440) *
                C47422 +
            (((C523 - C522) * C15949 + (C525 - C524) * C15945 + C5524 * C15950 +
              C5525 * C47471) *
                 C15947 +
             ((C527 - C526) * C15949 + (C529 - C528) * C15945 + C964 * C15950 +
              C965 * C47471) *
                 C47440) *
                C47261) *
               C47215 +
           (((C4900 * C15949 + C4901 * C15945 + C4910 * C15950 +
              C4911 * C47471) *
                 C15947 +
             (C4912 * C15949 + C4913 * C15945 + C361 * C15950 + C362 * C47471) *
                 C47440) *
                C47422 +
            ((C5522 * C15949 + C5523 * C15945 + C6276 * C15950 +
              C6277 * C47471) *
                 C15947 +
             (C5526 * C15949 + C5527 * C15945 + (C1593 - C1594) * C15950 +
              (C1595 - C1596) * C47471) *
                 C47440) *
                C47261) *
               C47222 +
           (((C4908 * C15949 + C4909 * C15945 + C6078 * C15950 +
              C6079 * C47471) *
                 C15947 +
             (C4914 * C15949 + C4915 * C15945 + (C1435 - C1436) * C15950 +
              (C1437 - C1438) * C47471) *
                 C47440) *
                C47422 +
            ((C6274 * C15949 + C6275 * C15945 + (C6279 - C6278) * C15950 +
              (C6281 - C6280) * C47471) *
                 C15947 +
             ((C1594 - C1593) * C15949 + (C1596 - C1595) * C15945 +
              (C47376 * C1701 - C113 * C1696) * C15950 +
              (C47376 * C1705 - C113 * C1702) * C47471) *
                 C47440) *
                C47261) *
               C2868) *
              C47139)) /
        (p * q * std::sqrt(p + q));
    d2ee[77] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C47376 * C122 - C113 * C115) * C15949 +
             (C47376 * C136 - C113 * C123) * C15945 + (C4896 - C4897) * C15950 +
             (C4898 - C4899) * C47471) *
                C15947 +
            ((C144 - C145) * C15949 + (C146 - C147) * C15945 + C4900 * C15950 +
             C4901 * C47471) *
                C47440) *
               C47174 * C47499 +
           (((C4897 - C4896) * C15949 + (C4899 - C4898) * C15945 +
             (C4902 - C4903) * C15950 + (C4904 - C4905) * C47471) *
                C15947 +
            (C4906 * C15949 + C4907 * C15945 + C4908 * C15950 +
             C4909 * C47471) *
                C47440) *
               C47174 * C47495 +
           (((C4903 - C4902) * C15949 + (C4905 - C4904) * C15945 +
             (C5764 - C5765) * C15950 + (C5766 - C5767) * C47471) *
                C15947 +
            (C4910 * C15949 + C4911 * C15945 + C6076 * C15950 +
             C6077 * C47471) *
                C47440) *
               C47174 * C47485 +
           (((C5765 - C5764) * C15949 + (C5767 - C5766) * C15945 +
             (C5768 - C5769) * C15950 + (C5770 - C5771) * C47471) *
                C15947 +
            (C6078 * C15949 + C6079 * C15945 + (C5772 - C5773) * C15950 +
             (C5774 - C5775) * C47471) *
                C47440) *
               C47174 * C47463) *
              C2608 +
          ((((C145 - C144) * C15949 + (C147 - C146) * C15945 + C4906 * C15950 +
             C4907 * C47471) *
                C15947 +
            ((C149 - C148) * C15949 + (C151 - C150) * C15945 + C359 * C15950 +
             C360 * C47471) *
                C47440) *
               C47174 * C47499 +
           ((C4900 * C15949 + C4901 * C15945 + C4910 * C15950 +
             C4911 * C47471) *
                C15947 +
            (C4912 * C15949 + C4913 * C15945 + C361 * C15950 + C362 * C47471) *
                C47440) *
               C47174 * C47495 +
           ((C4908 * C15949 + C4909 * C15945 + C6078 * C15950 +
             C6079 * C47471) *
                C15947 +
            (C4914 * C15949 + C4915 * C15945 + (C1435 - C1436) * C15950 +
             (C1437 - C1438) * C47471) *
                C47440) *
               C47174 * C47485 +
           ((C6076 * C15949 + C6077 * C15945 + (C5773 - C5772) * C15950 +
             (C5775 - C5774) * C47471) *
                C15947 +
            ((C1436 - C1435) * C15949 + (C1438 - C1437) * C15945 +
             (C47376 * C1168 - C113 * C1157) * C15950 +
             (C47376 * C1175 - C113 * C1169) * C47471) *
                C47440) *
               C47174 * C47463) *
              C47139)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C47376 * C122 - C113 * C115) * C15949 +
             (C47376 * C136 - C113 * C123) * C15945 + (C4896 - C4897) * C15950 +
             (C4898 - C4899) * C47471) *
                C15947 +
            ((C144 - C145) * C15949 + (C146 - C147) * C15945 + C4900 * C15950 +
             C4901 * C47471) *
                C47440) *
               C47174 * C2500 +
           (((C4897 - C4896) * C15949 + (C4899 - C4898) * C15945 +
             (C4902 - C4903) * C15950 + (C4904 - C4905) * C47471) *
                C15947 +
            (C4906 * C15949 + C4907 * C15945 + C4908 * C15950 +
             C4909 * C47471) *
                C47440) *
               C47174 * C47219) *
              C47498 +
          ((((C145 - C144) * C15949 + (C147 - C146) * C15945 + C4906 * C15950 +
             C4907 * C47471) *
                C15947 +
            ((C149 - C148) * C15949 + (C151 - C150) * C15945 + C359 * C15950 +
             C360 * C47471) *
                C47440) *
               C47174 * C2500 +
           ((C4900 * C15949 + C4901 * C15945 + C4910 * C15950 +
             C4911 * C47471) *
                C15947 +
            (C4912 * C15949 + C4913 * C15945 + C361 * C15950 + C362 * C47471) *
                C47440) *
               C47174 * C47219) *
              C47491 +
          (((C164 * C15949 + C165 * C15945 + C4912 * C15950 + C4913 * C47471) *
                C15947 +
            ((C153 - C152) * C15949 + (C155 - C154) * C15945 + C664 * C15950 +
             C665 * C47471) *
                C47440) *
               C47174 * C2500 +
           ((C359 * C15949 + C360 * C15945 + C4914 * C15950 + C4915 * C47471) *
                C15947 +
            (C5192 * C15949 + C5193 * C15945 + (C355 - C356) * C15950 +
             (C357 - C358) * C47471) *
                C47440) *
               C47174 * C47219) *
              C47478 +
          (((C166 * C15949 + C167 * C15945 + C5192 * C15950 + C5193 * C47471) *
                C15947 +
            ((C157 - C156) * C15949 + (C159 - C158) * C15945 +
             (C666 - C667) * C15950 + (C668 - C669) * C47471) *
                C47440) *
               C47174 * C2500 +
           ((C664 * C15949 + C665 * C15945 + (C356 - C355) * C15950 +
             (C358 - C357) * C47471) *
                C15947 +
            ((C667 - C666) * C15949 + (C669 - C668) * C15945 +
             (C47376 * C322 - C113 * C303) * C15950 +
             (C47376 * C333 - C113 * C323) * C47471) *
                C47440) *
               C47174 * C47219) *
              C47457)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C47376 * C122 - C113 * C115) * C15949 +
              (C47376 * C136 - C113 * C123) * C15945 +
              (C4896 - C4897) * C15950 + (C4898 - C4899) * C47471) *
                 C15947 +
             ((C144 - C145) * C15949 + (C146 - C147) * C15945 + C4900 * C15950 +
              C4901 * C47471) *
                 C47440) *
                C47493 +
            (((C113 * C481 - C47376 * C491) * C15949 +
              (C113 * C492 - C47376 * C511) * C15945 +
              (C5518 - C5519) * C15950 + (C5520 - C5521) * C47471) *
                 C15947 +
             ((C522 - C523) * C15949 + (C524 - C525) * C15945 + C5522 * C15950 +
              C5523 * C47471) *
                 C47440) *
                C47482 +
            (((C47376 * C497 - C113 * C484) * C15949 +
              (C47376 * C514 - C113 * C498) * C15945 +
              (C5930 - C5931) * C15950 + (C5932 - C5933) * C47471) *
                 C15947 +
             ((C530 - C531) * C15949 + (C532 - C533) * C15945 + C7000 * C15950 +
              C7001 * C47471) *
                 C47440) *
                C47456) *
               C2500 +
           ((((C4897 - C4896) * C15949 + (C4899 - C4898) * C15945 +
              (C4902 - C4903) * C15950 + (C4904 - C4905) * C47471) *
                 C15947 +
             (C4906 * C15949 + C4907 * C15945 + C4908 * C15950 +
              C4909 * C47471) *
                 C47440) *
                C47493 +
            (((C5519 - C5518) * C15949 + (C5521 - C5520) * C15945 +
              (C5934 - C5935) * C15950 + (C5936 - C5937) * C47471) *
                 C15947 +
             (C5524 * C15949 + C5525 * C15945 + C6274 * C15950 +
              C6275 * C47471) *
                 C47440) *
                C47482 +
            (((C5931 - C5930) * C15949 + (C5933 - C5932) * C15945 +
              (C5938 - C5939) * C15950 + (C5940 - C5941) * C47471) *
                 C15947 +
             (C7002 * C15949 + C7003 * C15945 + (C5942 - C5943) * C15950 +
              (C5944 - C5945) * C47471) *
                 C47440) *
                C47456) *
               C47219) *
              C2608 +
          (((((C145 - C144) * C15949 + (C147 - C146) * C15945 + C4906 * C15950 +
              C4907 * C47471) *
                 C15947 +
             ((C149 - C148) * C15949 + (C151 - C150) * C15945 + C359 * C15950 +
              C360 * C47471) *
                 C47440) *
                C47493 +
            (((C523 - C522) * C15949 + (C525 - C524) * C15945 + C5524 * C15950 +
              C5525 * C47471) *
                 C15947 +
             ((C527 - C526) * C15949 + (C529 - C528) * C15945 + C964 * C15950 +
              C965 * C47471) *
                 C47440) *
                C47482 +
            (((C531 - C530) * C15949 + (C533 - C532) * C15945 + C7002 * C15950 +
              C7003 * C47471) *
                 C15947 +
             ((C535 - C534) * C15949 + (C537 - C536) * C15945 +
              (C2175 - C2176) * C15950 + (C2177 - C2178) * C47471) *
                 C47440) *
                C47456) *
               C2500 +
           (((C4900 * C15949 + C4901 * C15945 + C4910 * C15950 +
              C4911 * C47471) *
                 C15947 +
             (C4912 * C15949 + C4913 * C15945 + C361 * C15950 + C362 * C47471) *
                 C47440) *
                C47493 +
            ((C5522 * C15949 + C5523 * C15945 + C6276 * C15950 +
              C6277 * C47471) *
                 C15947 +
             (C5526 * C15949 + C5527 * C15945 + (C1593 - C1594) * C15950 +
              (C1595 - C1596) * C47471) *
                 C47440) *
                C47482 +
            ((C7000 * C15949 + C7001 * C15945 + (C5943 - C5942) * C15950 +
              (C5945 - C5944) * C47471) *
                 C15947 +
             ((C2176 - C2175) * C15949 + (C2178 - C2177) * C15945 +
              (C47376 * C1311 - C113 * C1294) * C15950 +
              (C47376 * C1321 - C113 * C1312) * C47471) *
                 C47440) *
                C47456) *
               C47219) *
              C47139)) /
            (p * q * std::sqrt(p + q));
    d2ee[78] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C47376 * C122 - C113 * C115) * C15949 +
              (C47376 * C136 - C113 * C123) * C15945 +
              (C4896 - C4897) * C15950 + (C4898 - C4899) * C47471) *
                 C15947 +
             ((C144 - C145) * C15949 + (C146 - C147) * C15945 + C4900 * C15950 +
              C4901 * C47471) *
                 C47440) *
                C47422 +
            (((C113 * C481 - C47376 * C491) * C15949 +
              (C113 * C492 - C47376 * C511) * C15945 +
              (C5518 - C5519) * C15950 + (C5520 - C5521) * C47471) *
                 C15947 +
             ((C522 - C523) * C15949 + (C524 - C525) * C15945 + C5522 * C15950 +
              C5523 * C47471) *
                 C47440) *
                C47261) *
               C2500 +
           ((((C4897 - C4896) * C15949 + (C4899 - C4898) * C15945 +
              (C4902 - C4903) * C15950 + (C4904 - C4905) * C47471) *
                 C15947 +
             (C4906 * C15949 + C4907 * C15945 + C4908 * C15950 +
              C4909 * C47471) *
                 C47440) *
                C47422 +
            (((C5519 - C5518) * C15949 + (C5521 - C5520) * C15945 +
              (C5934 - C5935) * C15950 + (C5936 - C5937) * C47471) *
                 C15947 +
             (C5524 * C15949 + C5525 * C15945 + C6274 * C15950 +
              C6275 * C47471) *
                 C47440) *
                C47261) *
               C47219) *
              C47133 +
          (((((C145 - C144) * C15949 + (C147 - C146) * C15945 + C4906 * C15950 +
              C4907 * C47471) *
                 C15947 +
             ((C149 - C148) * C15949 + (C151 - C150) * C15945 + C359 * C15950 +
              C360 * C47471) *
                 C47440) *
                C47422 +
            (((C523 - C522) * C15949 + (C525 - C524) * C15945 + C5524 * C15950 +
              C5525 * C47471) *
                 C15947 +
             ((C527 - C526) * C15949 + (C529 - C528) * C15945 + C964 * C15950 +
              C965 * C47471) *
                 C47440) *
                C47261) *
               C2500 +
           (((C4900 * C15949 + C4901 * C15945 + C4910 * C15950 +
              C4911 * C47471) *
                 C15947 +
             (C4912 * C15949 + C4913 * C15945 + C361 * C15950 + C362 * C47471) *
                 C47440) *
                C47422 +
            ((C5522 * C15949 + C5523 * C15945 + C6276 * C15950 +
              C6277 * C47471) *
                 C15947 +
             (C5526 * C15949 + C5527 * C15945 + (C1593 - C1594) * C15950 +
              (C1595 - C1596) * C47471) *
                 C47440) *
                C47261) *
               C47219) *
              C47142 +
          ((((C164 * C15949 + C165 * C15945 + C4912 * C15950 + C4913 * C47471) *
                 C15947 +
             ((C153 - C152) * C15949 + (C155 - C154) * C15945 + C664 * C15950 +
              C665 * C47471) *
                 C47440) *
                C47422 +
            ((C546 * C15949 + C547 * C15945 + C5526 * C15950 + C5527 * C47471) *
                 C15947 +
             ((C539 - C538) * C15949 + (C541 - C540) * C15945 +
              (C960 - C961) * C15950 + (C962 - C963) * C47471) *
                 C47440) *
                C47261) *
               C2500 +
           (((C359 * C15949 + C360 * C15945 + C4914 * C15950 + C4915 * C47471) *
                 C15947 +
             (C5192 * C15949 + C5193 * C15945 + (C355 - C356) * C15950 +
              (C357 - C358) * C47471) *
                 C47440) *
                C47422 +
            ((C964 * C15949 + C965 * C15945 + (C1594 - C1593) * C15950 +
              (C1596 - C1595) * C47471) *
                 C15947 +
             ((C961 - C960) * C15949 + (C963 - C962) * C15945 +
              (C47376 * C1585 - C113 * C1584) * C15950 +
              (C47376 * C1587 - C113 * C1586) * C47471) *
                 C47440) *
                C47261) *
               C47219) *
              C2871)) /
        (p * q * std::sqrt(p + q));
    d2ee[79] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C47376 * C122 - C113 * C115) * C15949 +
             (C47376 * C136 - C113 * C123) * C15945 + (C4896 - C4897) * C15950 +
             (C4898 - C4899) * C47471) *
                C15947 +
            ((C144 - C145) * C15949 + (C146 - C147) * C15945 + C4900 * C15950 +
             C4901 * C47471) *
                C47440) *
               C47174 * C2500 +
           (((C4897 - C4896) * C15949 + (C4899 - C4898) * C15945 +
             (C4902 - C4903) * C15950 + (C4904 - C4905) * C47471) *
                C15947 +
            (C4906 * C15949 + C4907 * C15945 + C4908 * C15950 +
             C4909 * C47471) *
                C47440) *
               C47174 * C47219) *
              C47498 +
          ((((C145 - C144) * C15949 + (C147 - C146) * C15945 + C4906 * C15950 +
             C4907 * C47471) *
                C15947 +
            ((C149 - C148) * C15949 + (C151 - C150) * C15945 + C359 * C15950 +
             C360 * C47471) *
                C47440) *
               C47174 * C2500 +
           ((C4900 * C15949 + C4901 * C15945 + C4910 * C15950 +
             C4911 * C47471) *
                C15947 +
            (C4912 * C15949 + C4913 * C15945 + C361 * C15950 + C362 * C47471) *
                C47440) *
               C47174 * C47219) *
              C47491 +
          (((C164 * C15949 + C165 * C15945 + C4912 * C15950 + C4913 * C47471) *
                C15947 +
            ((C153 - C152) * C15949 + (C155 - C154) * C15945 + C664 * C15950 +
             C665 * C47471) *
                C47440) *
               C47174 * C2500 +
           ((C359 * C15949 + C360 * C15945 + C4914 * C15950 + C4915 * C47471) *
                C15947 +
            (C5192 * C15949 + C5193 * C15945 + (C355 - C356) * C15950 +
             (C357 - C358) * C47471) *
                C47440) *
               C47174 * C47219) *
              C47478 +
          (((C166 * C15949 + C167 * C15945 + C5192 * C15950 + C5193 * C47471) *
                C15947 +
            ((C157 - C156) * C15949 + (C159 - C158) * C15945 +
             (C666 - C667) * C15950 + (C668 - C669) * C47471) *
                C47440) *
               C47174 * C2500 +
           ((C664 * C15949 + C665 * C15945 + (C356 - C355) * C15950 +
             (C358 - C357) * C47471) *
                C15947 +
            ((C667 - C666) * C15949 + (C669 - C668) * C15945 +
             (C47376 * C322 - C113 * C303) * C15950 +
             (C47376 * C333 - C113 * C323) * C47471) *
                C47440) *
               C47174 * C47219) *
              C47457)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C47376 * C122 - C113 * C115) * C15949 +
             (C47376 * C136 - C113 * C123) * C15945 + (C4896 - C4897) * C15950 +
             (C4898 - C4899) * C47471) *
                C15947 +
            ((C144 - C145) * C15949 + (C146 - C147) * C15945 + C4900 * C15950 +
             C4901 * C47471) *
                C47440) *
               C47174 * C47499 +
           (((C4897 - C4896) * C15949 + (C4899 - C4898) * C15945 +
             (C4902 - C4903) * C15950 + (C4904 - C4905) * C47471) *
                C15947 +
            (C4906 * C15949 + C4907 * C15945 + C4908 * C15950 +
             C4909 * C47471) *
                C47440) *
               C47174 * C47495 +
           (((C4903 - C4902) * C15949 + (C4905 - C4904) * C15945 +
             (C5764 - C5765) * C15950 + (C5766 - C5767) * C47471) *
                C15947 +
            (C4910 * C15949 + C4911 * C15945 + C6076 * C15950 +
             C6077 * C47471) *
                C47440) *
               C47174 * C47485 +
           (((C5765 - C5764) * C15949 + (C5767 - C5766) * C15945 +
             (C5768 - C5769) * C15950 + (C5770 - C5771) * C47471) *
                C15947 +
            (C6078 * C15949 + C6079 * C15945 + (C5772 - C5773) * C15950 +
             (C5774 - C5775) * C47471) *
                C47440) *
               C47174 * C47463) *
              C2608 +
          ((((C145 - C144) * C15949 + (C147 - C146) * C15945 + C4906 * C15950 +
             C4907 * C47471) *
                C15947 +
            ((C149 - C148) * C15949 + (C151 - C150) * C15945 + C359 * C15950 +
             C360 * C47471) *
                C47440) *
               C47174 * C47499 +
           ((C4900 * C15949 + C4901 * C15945 + C4910 * C15950 +
             C4911 * C47471) *
                C15947 +
            (C4912 * C15949 + C4913 * C15945 + C361 * C15950 + C362 * C47471) *
                C47440) *
               C47174 * C47495 +
           ((C4908 * C15949 + C4909 * C15945 + C6078 * C15950 +
             C6079 * C47471) *
                C15947 +
            (C4914 * C15949 + C4915 * C15945 + (C1435 - C1436) * C15950 +
             (C1437 - C1438) * C47471) *
                C47440) *
               C47174 * C47485 +
           ((C6076 * C15949 + C6077 * C15945 + (C5773 - C5772) * C15950 +
             (C5775 - C5774) * C47471) *
                C15947 +
            ((C1436 - C1435) * C15949 + (C1438 - C1437) * C15945 +
             (C47376 * C1168 - C113 * C1157) * C15950 +
             (C47376 * C1175 - C113 * C1169) * C47471) *
                C47440) *
               C47174 * C47463) *
              C47139)) /
            (p * q * std::sqrt(p + q));
    d2ee[80] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C47376 * C122 - C113 * C115) * C15949 +
              (C47376 * C136 - C113 * C123) * C15945 +
              (C4896 - C4897) * C15950 + (C4898 - C4899) * C47471) *
                 C15947 +
             ((C144 - C145) * C15949 + (C146 - C147) * C15945 + C4900 * C15950 +
              C4901 * C47471) *
                 C47440) *
                C3262 +
            (((C113 * C481 - C47376 * C491) * C15949 +
              (C113 * C492 - C47376 * C511) * C15945 +
              (C5518 - C5519) * C15950 + (C5520 - C5521) * C47471) *
                 C15947 +
             ((C522 - C523) * C15949 + (C524 - C525) * C15945 + C5522 * C15950 +
              C5523 * C47471) *
                 C47440) *
                C47261) *
               C47215 +
           ((((C4897 - C4896) * C15949 + (C4899 - C4898) * C15945 +
              (C4902 - C4903) * C15950 + (C4904 - C4905) * C47471) *
                 C15947 +
             (C4906 * C15949 + C4907 * C15945 + C4908 * C15950 +
              C4909 * C47471) *
                 C47440) *
                C3262 +
            (((C5519 - C5518) * C15949 + (C5521 - C5520) * C15945 +
              (C5934 - C5935) * C15950 + (C5936 - C5937) * C47471) *
                 C15947 +
             (C5524 * C15949 + C5525 * C15945 + C6274 * C15950 +
              C6275 * C47471) *
                 C47440) *
                C47261) *
               C47222 +
           ((((C4903 - C4902) * C15949 + (C4905 - C4904) * C15945 +
              (C5764 - C5765) * C15950 + (C5766 - C5767) * C47471) *
                 C15947 +
             (C4910 * C15949 + C4911 * C15945 + C6076 * C15950 +
              C6077 * C47471) *
                 C47440) *
                C3262 +
            (((C5935 - C5934) * C15949 + (C5937 - C5936) * C15945 +
              (C6420 - C6421) * C15950 + (C6422 - C6423) * C47471) *
                 C15947 +
             (C6276 * C15949 + C6277 * C15945 + (C6278 - C6279) * C15950 +
              (C6280 - C6281) * C47471) *
                 C47440) *
                C47261) *
               C2868) *
              C47407 +
          (((((C145 - C144) * C15949 + (C147 - C146) * C15945 + C4906 * C15950 +
              C4907 * C47471) *
                 C15947 +
             ((C149 - C148) * C15949 + (C151 - C150) * C15945 + C359 * C15950 +
              C360 * C47471) *
                 C47440) *
                C3262 +
            (((C523 - C522) * C15949 + (C525 - C524) * C15945 + C5524 * C15950 +
              C5525 * C47471) *
                 C15947 +
             ((C527 - C526) * C15949 + (C529 - C528) * C15945 + C964 * C15950 +
              C965 * C47471) *
                 C47440) *
                C47261) *
               C47215 +
           (((C4900 * C15949 + C4901 * C15945 + C4910 * C15950 +
              C4911 * C47471) *
                 C15947 +
             (C4912 * C15949 + C4913 * C15945 + C361 * C15950 + C362 * C47471) *
                 C47440) *
                C3262 +
            ((C5522 * C15949 + C5523 * C15945 + C6276 * C15950 +
              C6277 * C47471) *
                 C15947 +
             (C5526 * C15949 + C5527 * C15945 + (C1593 - C1594) * C15950 +
              (C1595 - C1596) * C47471) *
                 C47440) *
                C47261) *
               C47222 +
           (((C4908 * C15949 + C4909 * C15945 + C6078 * C15950 +
              C6079 * C47471) *
                 C15947 +
             (C4914 * C15949 + C4915 * C15945 + (C1435 - C1436) * C15950 +
              (C1437 - C1438) * C47471) *
                 C47440) *
                C3262 +
            ((C6274 * C15949 + C6275 * C15945 + (C6279 - C6278) * C15950 +
              (C6281 - C6280) * C47471) *
                 C15947 +
             ((C1594 - C1593) * C15949 + (C1596 - C1595) * C15945 +
              (C47376 * C1701 - C113 * C1696) * C15950 +
              (C47376 * C1705 - C113 * C1702) * C47471) *
                 C47440) *
                C47261) *
               C2868) *
              C47139)) /
        (p * q * std::sqrt(p + q));
    d2ee[81] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 (((((C47376 * C122 - C113 * C115) * C15949 +
                     (C47376 * C136 - C113 * C123) * C15945 +
                     (C4896 - C4897) * C15950 + (C4898 - C4899) * C47471) *
                        C15947 +
                    ((C144 - C145) * C15949 + (C146 - C147) * C15945 +
                     C4900 * C15950 + C4901 * C47471) *
                        C47440) *
                       C47257 +
                   (((C113 * C481 - C47376 * C491) * C15949 +
                     (C113 * C492 - C47376 * C511) * C15945 +
                     (C5518 - C5519) * C15950 + (C5520 - C5521) * C47471) *
                        C15947 +
                    ((C522 - C523) * C15949 + (C524 - C525) * C15945 +
                     C5522 * C15950 + C5523 * C47471) *
                        C47440) *
                       C47264 +
                   (((C47376 * C497 - C113 * C484) * C15949 +
                     (C47376 * C514 - C113 * C498) * C15945 +
                     (C5930 - C5931) * C15950 + (C5932 - C5933) * C47471) *
                        C15947 +
                    ((C530 - C531) * C15949 + (C532 - C533) * C15945 +
                     C7000 * C15950 + C7001 * C47471) *
                        C47440) *
                       C3770) *
                      C47215 +
                  ((((C4897 - C4896) * C15949 + (C4899 - C4898) * C15945 +
                     (C4902 - C4903) * C15950 + (C4904 - C4905) * C47471) *
                        C15947 +
                    (C4906 * C15949 + C4907 * C15945 + C4908 * C15950 +
                     C4909 * C47471) *
                        C47440) *
                       C47257 +
                   (((C5519 - C5518) * C15949 + (C5521 - C5520) * C15945 +
                     (C5934 - C5935) * C15950 + (C5936 - C5937) * C47471) *
                        C15947 +
                    (C5524 * C15949 + C5525 * C15945 + C6274 * C15950 +
                     C6275 * C47471) *
                        C47440) *
                       C47264 +
                   (((C5931 - C5930) * C15949 + (C5933 - C5932) * C15945 +
                     (C5938 - C5939) * C15950 + (C5940 - C5941) * C47471) *
                        C15947 +
                    (C7002 * C15949 + C7003 * C15945 +
                     (C5942 - C5943) * C15950 + (C5944 - C5945) * C47471) *
                        C47440) *
                       C3770) *
                      C47222 +
                  ((((C4903 - C4902) * C15949 + (C4905 - C4904) * C15945 +
                     (C5764 - C5765) * C15950 + (C5766 - C5767) * C47471) *
                        C15947 +
                    (C4910 * C15949 + C4911 * C15945 + C6076 * C15950 +
                     C6077 * C47471) *
                        C47440) *
                       C47257 +
                   (((C5935 - C5934) * C15949 + (C5937 - C5936) * C15945 +
                     (C6420 - C6421) * C15950 + (C6422 - C6423) * C47471) *
                        C15947 +
                    (C6276 * C15949 + C6277 * C15945 +
                     (C6278 - C6279) * C15950 + (C6280 - C6281) * C47471) *
                        C47440) *
                       C47264 +
                   (((C5939 - C5938) * C15949 + (C5941 - C5940) * C15945 +
                     (C47376 * C5923 - C113 * C5921) * C15950 +
                     (C47376 * C5927 - C113 * C5924) * C47471) *
                        C15947 +
                    ((C5943 - C5942) * C15949 + (C5945 - C5944) * C15945 +
                     (C47376 * C5925 - C113 * C5922) * C15950 +
                     (C47376 * C5928 - C113 * C5926) * C47471) *
                        C47440) *
                       C3770) *
                      C2868) *
                 C47128) /
                (p * q * std::sqrt(p + q));
    d2ee[82] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C47376 * C122 - C113 * C115) * C15949 +
             (C47376 * C136 - C113 * C123) * C15945 + (C4896 - C4897) * C15950 +
             (C4898 - C4899) * C47471) *
                C15947 +
            ((C144 - C145) * C15949 + (C146 - C147) * C15945 + C4900 * C15950 +
             C4901 * C47471) *
                C47440) *
               C3262 +
           (((C113 * C481 - C47376 * C491) * C15949 +
             (C113 * C492 - C47376 * C511) * C15945 + (C5518 - C5519) * C15950 +
             (C5520 - C5521) * C47471) *
                C15947 +
            ((C522 - C523) * C15949 + (C524 - C525) * C15945 + C5522 * C15950 +
             C5523 * C47471) *
                C47440) *
               C47261) *
              C47499 +
          ((((C4897 - C4896) * C15949 + (C4899 - C4898) * C15945 +
             (C4902 - C4903) * C15950 + (C4904 - C4905) * C47471) *
                C15947 +
            (C4906 * C15949 + C4907 * C15945 + C4908 * C15950 +
             C4909 * C47471) *
                C47440) *
               C3262 +
           (((C5519 - C5518) * C15949 + (C5521 - C5520) * C15945 +
             (C5934 - C5935) * C15950 + (C5936 - C5937) * C47471) *
                C15947 +
            (C5524 * C15949 + C5525 * C15945 + C6274 * C15950 +
             C6275 * C47471) *
                C47440) *
               C47261) *
              C47495 +
          ((((C4903 - C4902) * C15949 + (C4905 - C4904) * C15945 +
             (C5764 - C5765) * C15950 + (C5766 - C5767) * C47471) *
                C15947 +
            (C4910 * C15949 + C4911 * C15945 + C6076 * C15950 +
             C6077 * C47471) *
                C47440) *
               C3262 +
           (((C5935 - C5934) * C15949 + (C5937 - C5936) * C15945 +
             (C6420 - C6421) * C15950 + (C6422 - C6423) * C47471) *
                C15947 +
            (C6276 * C15949 + C6277 * C15945 + (C6278 - C6279) * C15950 +
             (C6280 - C6281) * C47471) *
                C47440) *
               C47261) *
              C47485 +
          ((((C5765 - C5764) * C15949 + (C5767 - C5766) * C15945 +
             (C5768 - C5769) * C15950 + (C5770 - C5771) * C47471) *
                C15947 +
            (C6078 * C15949 + C6079 * C15945 + (C5772 - C5773) * C15950 +
             (C5774 - C5775) * C47471) *
                C47440) *
               C3262 +
           (((C6421 - C6420) * C15949 + (C6423 - C6422) * C15945 +
             (C47376 * C6413 - C113 * C6411) * C15950 +
             (C47376 * C6417 - C113 * C6414) * C47471) *
                C15947 +
            ((C6279 - C6278) * C15949 + (C6281 - C6280) * C15945 +
             (C47376 * C6415 - C113 * C6412) * C15950 +
             (C47376 * C6418 - C113 * C6416) * C47471) *
                C47440) *
               C47261) *
              C47463) *
         C47128) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C47376 * C122 - C113 * C115) * C15949 +
              (C47376 * C136 - C113 * C123) * C15945 +
              (C4896 - C4897) * C15950 + (C4898 - C4899) * C47471) *
                 C15947 +
             ((C144 - C145) * C15949 + (C146 - C147) * C15945 + C4900 * C15950 +
              C4901 * C47471) *
                 C47440) *
                C3262 +
            (((C113 * C481 - C47376 * C491) * C15949 +
              (C113 * C492 - C47376 * C511) * C15945 +
              (C5518 - C5519) * C15950 + (C5520 - C5521) * C47471) *
                 C15947 +
             ((C522 - C523) * C15949 + (C524 - C525) * C15945 + C5522 * C15950 +
              C5523 * C47471) *
                 C47440) *
                C47261) *
               C2500 +
           ((((C4897 - C4896) * C15949 + (C4899 - C4898) * C15945 +
              (C4902 - C4903) * C15950 + (C4904 - C4905) * C47471) *
                 C15947 +
             (C4906 * C15949 + C4907 * C15945 + C4908 * C15950 +
              C4909 * C47471) *
                 C47440) *
                C3262 +
            (((C5519 - C5518) * C15949 + (C5521 - C5520) * C15945 +
              (C5934 - C5935) * C15950 + (C5936 - C5937) * C47471) *
                 C15947 +
             (C5524 * C15949 + C5525 * C15945 + C6274 * C15950 +
              C6275 * C47471) *
                 C47440) *
                C47261) *
               C47219) *
              C47489 +
          (((((C145 - C144) * C15949 + (C147 - C146) * C15945 + C4906 * C15950 +
              C4907 * C47471) *
                 C15947 +
             ((C149 - C148) * C15949 + (C151 - C150) * C15945 + C359 * C15950 +
              C360 * C47471) *
                 C47440) *
                C3262 +
            (((C523 - C522) * C15949 + (C525 - C524) * C15945 + C5524 * C15950 +
              C5525 * C47471) *
                 C15947 +
             ((C527 - C526) * C15949 + (C529 - C528) * C15945 + C964 * C15950 +
              C965 * C47471) *
                 C47440) *
                C47261) *
               C2500 +
           (((C4900 * C15949 + C4901 * C15945 + C4910 * C15950 +
              C4911 * C47471) *
                 C15947 +
             (C4912 * C15949 + C4913 * C15945 + C361 * C15950 + C362 * C47471) *
                 C47440) *
                C3262 +
            ((C5522 * C15949 + C5523 * C15945 + C6276 * C15950 +
              C6277 * C47471) *
                 C15947 +
             (C5526 * C15949 + C5527 * C15945 + (C1593 - C1594) * C15950 +
              (C1595 - C1596) * C47471) *
                 C47440) *
                C47261) *
               C47219) *
              C47476 +
          ((((C164 * C15949 + C165 * C15945 + C4912 * C15950 + C4913 * C47471) *
                 C15947 +
             ((C153 - C152) * C15949 + (C155 - C154) * C15945 + C664 * C15950 +
              C665 * C47471) *
                 C47440) *
                C3262 +
            ((C546 * C15949 + C547 * C15945 + C5526 * C15950 + C5527 * C47471) *
                 C15947 +
             ((C539 - C538) * C15949 + (C541 - C540) * C15945 +
              (C960 - C961) * C15950 + (C962 - C963) * C47471) *
                 C47440) *
                C47261) *
               C2500 +
           (((C359 * C15949 + C360 * C15945 + C4914 * C15950 + C4915 * C47471) *
                 C15947 +
             (C5192 * C15949 + C5193 * C15945 + (C355 - C356) * C15950 +
              (C357 - C358) * C47471) *
                 C47440) *
                C3262 +
            ((C964 * C15949 + C965 * C15945 + (C1594 - C1593) * C15950 +
              (C1596 - C1595) * C47471) *
                 C15947 +
             ((C961 - C960) * C15949 + (C963 - C962) * C15945 +
              (C47376 * C1585 - C113 * C1584) * C15950 +
              (C47376 * C1587 - C113 * C1586) * C47471) *
                 C47440) *
                C47261) *
               C47219) *
              C47447)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C47376 * C122 - C113 * C115) * C15949 +
             (C47376 * C136 - C113 * C123) * C15945 + (C4896 - C4897) * C15950 +
             (C4898 - C4899) * C47471) *
                C15947 +
            ((C144 - C145) * C15949 + (C146 - C147) * C15945 + C4900 * C15950 +
             C4901 * C47471) *
                C47440) *
               C47500 +
           (((C113 * C481 - C47376 * C491) * C15949 +
             (C113 * C492 - C47376 * C511) * C15945 + (C5518 - C5519) * C15950 +
             (C5520 - C5521) * C47471) *
                C15947 +
            ((C522 - C523) * C15949 + (C524 - C525) * C15945 + C5522 * C15950 +
             C5523 * C47471) *
                C47440) *
               C47497 +
           (((C47376 * C497 - C113 * C484) * C15949 +
             (C47376 * C514 - C113 * C498) * C15945 + (C5930 - C5931) * C15950 +
             (C5932 - C5933) * C47471) *
                C15947 +
            ((C530 - C531) * C15949 + (C532 - C533) * C15945 + C7000 * C15950 +
             C7001 * C47471) *
                C47440) *
               C47488 +
           (((C113 * C1996 - C47376 * C2002) * C15949 +
             (C113 * C2003 - C47376 * C2014) * C15945 +
             (C7276 - C7277) * C15950 + (C7278 - C7279) * C47471) *
                C15947 +
            ((C2285 - C2286) * C15949 + (C2287 - C2288) * C15945 +
             (C7134 - C7135) * C15950 + (C7136 - C7137) * C47471) *
                C47440) *
               C47469) *
              C2500 +
          ((((C4897 - C4896) * C15949 + (C4899 - C4898) * C15945 +
             (C4902 - C4903) * C15950 + (C4904 - C4905) * C47471) *
                C15947 +
            (C4906 * C15949 + C4907 * C15945 + C4908 * C15950 +
             C4909 * C47471) *
                C47440) *
               C47500 +
           (((C5519 - C5518) * C15949 + (C5521 - C5520) * C15945 +
             (C5934 - C5935) * C15950 + (C5936 - C5937) * C47471) *
                C15947 +
            (C5524 * C15949 + C5525 * C15945 + C6274 * C15950 +
             C6275 * C47471) *
                C47440) *
               C47497 +
           (((C5931 - C5930) * C15949 + (C5933 - C5932) * C15945 +
             (C5938 - C5939) * C15950 + (C5940 - C5941) * C47471) *
                C15947 +
            (C7002 * C15949 + C7003 * C15945 + (C5942 - C5943) * C15950 +
             (C5944 - C5945) * C47471) *
                C47440) *
               C47488 +
           (((C7277 - C7276) * C15949 + (C7279 - C7278) * C15945 +
             (C47376 * C7269 - C113 * C7267) * C15950 +
             (C47376 * C7273 - C113 * C7270) * C47471) *
                C15947 +
            ((C7135 - C7134) * C15949 + (C7137 - C7136) * C15945 +
             (C47376 * C7271 - C113 * C7268) * C15950 +
             (C47376 * C7274 - C113 * C7272) * C47471) *
                C47440) *
               C47469) *
              C47219) *
         C47128) /
            (p * q * std::sqrt(p + q));
    d2ee[83] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C47376 * C122 - C113 * C115) * C15949 +
              (C47376 * C136 - C113 * C123) * C15945 +
              (C4896 - C4897) * C15950 + (C4898 - C4899) * C47471) *
                 C15947 +
             ((C144 - C145) * C15949 + (C146 - C147) * C15945 + C4900 * C15950 +
              C4901 * C47471) *
                 C47440) *
                C47257 +
            (((C113 * C481 - C47376 * C491) * C15949 +
              (C113 * C492 - C47376 * C511) * C15945 +
              (C5518 - C5519) * C15950 + (C5520 - C5521) * C47471) *
                 C15947 +
             ((C522 - C523) * C15949 + (C524 - C525) * C15945 + C5522 * C15950 +
              C5523 * C47471) *
                 C47440) *
                C47264 +
            (((C47376 * C497 - C113 * C484) * C15949 +
              (C47376 * C514 - C113 * C498) * C15945 +
              (C5930 - C5931) * C15950 + (C5932 - C5933) * C47471) *
                 C15947 +
             ((C530 - C531) * C15949 + (C532 - C533) * C15945 + C7000 * C15950 +
              C7001 * C47471) *
                 C47440) *
                C3770) *
               C2500 +
           ((((C4897 - C4896) * C15949 + (C4899 - C4898) * C15945 +
              (C4902 - C4903) * C15950 + (C4904 - C4905) * C47471) *
                 C15947 +
             (C4906 * C15949 + C4907 * C15945 + C4908 * C15950 +
              C4909 * C47471) *
                 C47440) *
                C47257 +
            (((C5519 - C5518) * C15949 + (C5521 - C5520) * C15945 +
              (C5934 - C5935) * C15950 + (C5936 - C5937) * C47471) *
                 C15947 +
             (C5524 * C15949 + C5525 * C15945 + C6274 * C15950 +
              C6275 * C47471) *
                 C47440) *
                C47264 +
            (((C5931 - C5930) * C15949 + (C5933 - C5932) * C15945 +
              (C5938 - C5939) * C15950 + (C5940 - C5941) * C47471) *
                 C15947 +
             (C7002 * C15949 + C7003 * C15945 + (C5942 - C5943) * C15950 +
              (C5944 - C5945) * C47471) *
                 C47440) *
                C3770) *
               C47219) *
              C47407 +
          (((((C145 - C144) * C15949 + (C147 - C146) * C15945 + C4906 * C15950 +
              C4907 * C47471) *
                 C15947 +
             ((C149 - C148) * C15949 + (C151 - C150) * C15945 + C359 * C15950 +
              C360 * C47471) *
                 C47440) *
                C47257 +
            (((C523 - C522) * C15949 + (C525 - C524) * C15945 + C5524 * C15950 +
              C5525 * C47471) *
                 C15947 +
             ((C527 - C526) * C15949 + (C529 - C528) * C15945 + C964 * C15950 +
              C965 * C47471) *
                 C47440) *
                C47264 +
            (((C531 - C530) * C15949 + (C533 - C532) * C15945 + C7002 * C15950 +
              C7003 * C47471) *
                 C15947 +
             ((C535 - C534) * C15949 + (C537 - C536) * C15945 +
              (C2175 - C2176) * C15950 + (C2177 - C2178) * C47471) *
                 C47440) *
                C3770) *
               C2500 +
           (((C4900 * C15949 + C4901 * C15945 + C4910 * C15950 +
              C4911 * C47471) *
                 C15947 +
             (C4912 * C15949 + C4913 * C15945 + C361 * C15950 + C362 * C47471) *
                 C47440) *
                C47257 +
            ((C5522 * C15949 + C5523 * C15945 + C6276 * C15950 +
              C6277 * C47471) *
                 C15947 +
             (C5526 * C15949 + C5527 * C15945 + (C1593 - C1594) * C15950 +
              (C1595 - C1596) * C47471) *
                 C47440) *
                C47264 +
            ((C7000 * C15949 + C7001 * C15945 + (C5943 - C5942) * C15950 +
              (C5945 - C5944) * C47471) *
                 C15947 +
             ((C2176 - C2175) * C15949 + (C2178 - C2177) * C15945 +
              (C47376 * C1311 - C113 * C1294) * C15950 +
              (C47376 * C1321 - C113 * C1312) * C47471) *
                 C47440) *
                C3770) *
               C47219) *
              C47139)) /
        (p * q * std::sqrt(p + q));
    d2ee[84] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C47376 * C122 - C113 * C115) * C15949 +
              (C47376 * C136 - C113 * C123) * C15945 +
              (C4896 - C4897) * C15950 + (C4898 - C4899) * C47471) *
                 C15947 +
             ((C144 - C145) * C15949 + (C146 - C147) * C15945 + C4900 * C15950 +
              C4901 * C47471) *
                 C47440) *
                C3262 +
            (((C113 * C481 - C47376 * C491) * C15949 +
              (C113 * C492 - C47376 * C511) * C15945 +
              (C5518 - C5519) * C15950 + (C5520 - C5521) * C47471) *
                 C15947 +
             ((C522 - C523) * C15949 + (C524 - C525) * C15945 + C5522 * C15950 +
              C5523 * C47471) *
                 C47440) *
                C47261) *
               C2500 +
           ((((C4897 - C4896) * C15949 + (C4899 - C4898) * C15945 +
              (C4902 - C4903) * C15950 + (C4904 - C4905) * C47471) *
                 C15947 +
             (C4906 * C15949 + C4907 * C15945 + C4908 * C15950 +
              C4909 * C47471) *
                 C47440) *
                C3262 +
            (((C5519 - C5518) * C15949 + (C5521 - C5520) * C15945 +
              (C5934 - C5935) * C15950 + (C5936 - C5937) * C47471) *
                 C15947 +
             (C5524 * C15949 + C5525 * C15945 + C6274 * C15950 +
              C6275 * C47471) *
                 C47440) *
                C47261) *
               C47219) *
              C47489 +
          (((((C145 - C144) * C15949 + (C147 - C146) * C15945 + C4906 * C15950 +
              C4907 * C47471) *
                 C15947 +
             ((C149 - C148) * C15949 + (C151 - C150) * C15945 + C359 * C15950 +
              C360 * C47471) *
                 C47440) *
                C3262 +
            (((C523 - C522) * C15949 + (C525 - C524) * C15945 + C5524 * C15950 +
              C5525 * C47471) *
                 C15947 +
             ((C527 - C526) * C15949 + (C529 - C528) * C15945 + C964 * C15950 +
              C965 * C47471) *
                 C47440) *
                C47261) *
               C2500 +
           (((C4900 * C15949 + C4901 * C15945 + C4910 * C15950 +
              C4911 * C47471) *
                 C15947 +
             (C4912 * C15949 + C4913 * C15945 + C361 * C15950 + C362 * C47471) *
                 C47440) *
                C3262 +
            ((C5522 * C15949 + C5523 * C15945 + C6276 * C15950 +
              C6277 * C47471) *
                 C15947 +
             (C5526 * C15949 + C5527 * C15945 + (C1593 - C1594) * C15950 +
              (C1595 - C1596) * C47471) *
                 C47440) *
                C47261) *
               C47219) *
              C47476 +
          ((((C164 * C15949 + C165 * C15945 + C4912 * C15950 + C4913 * C47471) *
                 C15947 +
             ((C153 - C152) * C15949 + (C155 - C154) * C15945 + C664 * C15950 +
              C665 * C47471) *
                 C47440) *
                C3262 +
            ((C546 * C15949 + C547 * C15945 + C5526 * C15950 + C5527 * C47471) *
                 C15947 +
             ((C539 - C538) * C15949 + (C541 - C540) * C15945 +
              (C960 - C961) * C15950 + (C962 - C963) * C47471) *
                 C47440) *
                C47261) *
               C2500 +
           (((C359 * C15949 + C360 * C15945 + C4914 * C15950 + C4915 * C47471) *
                 C15947 +
             (C5192 * C15949 + C5193 * C15945 + (C355 - C356) * C15950 +
              (C357 - C358) * C47471) *
                 C47440) *
                C3262 +
            ((C964 * C15949 + C965 * C15945 + (C1594 - C1593) * C15950 +
              (C1596 - C1595) * C47471) *
                 C15947 +
             ((C961 - C960) * C15949 + (C963 - C962) * C15945 +
              (C47376 * C1585 - C113 * C1584) * C15950 +
              (C47376 * C1587 - C113 * C1586) * C47471) *
                 C47440) *
                C47261) *
               C47219) *
              C47447)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C47376 * C122 - C113 * C115) * C15949 +
             (C47376 * C136 - C113 * C123) * C15945 + (C4896 - C4897) * C15950 +
             (C4898 - C4899) * C47471) *
                C15947 +
            ((C144 - C145) * C15949 + (C146 - C147) * C15945 + C4900 * C15950 +
             C4901 * C47471) *
                C47440) *
               C3262 +
           (((C113 * C481 - C47376 * C491) * C15949 +
             (C113 * C492 - C47376 * C511) * C15945 + (C5518 - C5519) * C15950 +
             (C5520 - C5521) * C47471) *
                C15947 +
            ((C522 - C523) * C15949 + (C524 - C525) * C15945 + C5522 * C15950 +
             C5523 * C47471) *
                C47440) *
               C47261) *
              C47499 +
          ((((C4897 - C4896) * C15949 + (C4899 - C4898) * C15945 +
             (C4902 - C4903) * C15950 + (C4904 - C4905) * C47471) *
                C15947 +
            (C4906 * C15949 + C4907 * C15945 + C4908 * C15950 +
             C4909 * C47471) *
                C47440) *
               C3262 +
           (((C5519 - C5518) * C15949 + (C5521 - C5520) * C15945 +
             (C5934 - C5935) * C15950 + (C5936 - C5937) * C47471) *
                C15947 +
            (C5524 * C15949 + C5525 * C15945 + C6274 * C15950 +
             C6275 * C47471) *
                C47440) *
               C47261) *
              C47495 +
          ((((C4903 - C4902) * C15949 + (C4905 - C4904) * C15945 +
             (C5764 - C5765) * C15950 + (C5766 - C5767) * C47471) *
                C15947 +
            (C4910 * C15949 + C4911 * C15945 + C6076 * C15950 +
             C6077 * C47471) *
                C47440) *
               C3262 +
           (((C5935 - C5934) * C15949 + (C5937 - C5936) * C15945 +
             (C6420 - C6421) * C15950 + (C6422 - C6423) * C47471) *
                C15947 +
            (C6276 * C15949 + C6277 * C15945 + (C6278 - C6279) * C15950 +
             (C6280 - C6281) * C47471) *
                C47440) *
               C47261) *
              C47485 +
          ((((C5765 - C5764) * C15949 + (C5767 - C5766) * C15945 +
             (C5768 - C5769) * C15950 + (C5770 - C5771) * C47471) *
                C15947 +
            (C6078 * C15949 + C6079 * C15945 + (C5772 - C5773) * C15950 +
             (C5774 - C5775) * C47471) *
                C47440) *
               C3262 +
           (((C6421 - C6420) * C15949 + (C6423 - C6422) * C15945 +
             (C47376 * C6413 - C113 * C6411) * C15950 +
             (C47376 * C6417 - C113 * C6414) * C47471) *
                C15947 +
            ((C6279 - C6278) * C15949 + (C6281 - C6280) * C15945 +
             (C47376 * C6415 - C113 * C6412) * C15950 +
             (C47376 * C6418 - C113 * C6416) * C47471) *
                C47440) *
               C47261) *
              C47463) *
         C47128) /
            (p * q * std::sqrt(p + q));
    d2ee[85] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C47376 * C122 - C113 * C115) * C15949 +
             (C47376 * C136 - C113 * C123) * C15945 + (C4896 - C4897) * C15950 +
             (C4898 - C4899) * C47471) *
                C15947 +
            ((C144 - C145) * C15949 + (C146 - C147) * C15945 + C4900 * C15950 +
             C4901 * C47471) *
                C47440) *
               C47174 * C1420 +
           (((C4897 - C4896) * C15949 + (C4899 - C4898) * C15945 +
             (C4902 - C4903) * C15950 + (C4904 - C4905) * C47471) *
                C15947 +
            (C4906 * C15949 + C4907 * C15945 + C4908 * C15950 +
             C4909 * C47471) *
                C47440) *
               C47174 * C1421 +
           (((C4903 - C4902) * C15949 + (C4905 - C4904) * C15945 +
             (C5764 - C5765) * C15950 + (C5766 - C5767) * C47471) *
                C15947 +
            (C4910 * C15949 + C4911 * C15945 + C6076 * C15950 +
             C6077 * C47471) *
                C47440) *
               C47174 * C1422 +
           (((C5765 - C5764) * C15949 + (C5767 - C5766) * C15945 +
             (C5768 - C5769) * C15950 + (C5770 - C5771) * C47471) *
                C15947 +
            (C6078 * C15949 + C6079 * C15945 + (C5772 - C5773) * C15950 +
             (C5774 - C5775) * C47471) *
                C47440) *
               C47174 * C47463) *
              C47407 +
          ((((C145 - C144) * C15949 + (C147 - C146) * C15945 + C4906 * C15950 +
             C4907 * C47471) *
                C15947 +
            ((C149 - C148) * C15949 + (C151 - C150) * C15945 + C359 * C15950 +
             C360 * C47471) *
                C47440) *
               C47174 * C1420 +
           ((C4900 * C15949 + C4901 * C15945 + C4910 * C15950 +
             C4911 * C47471) *
                C15947 +
            (C4912 * C15949 + C4913 * C15945 + C361 * C15950 + C362 * C47471) *
                C47440) *
               C47174 * C1421 +
           ((C4908 * C15949 + C4909 * C15945 + C6078 * C15950 +
             C6079 * C47471) *
                C15947 +
            (C4914 * C15949 + C4915 * C15945 + (C1435 - C1436) * C15950 +
             (C1437 - C1438) * C47471) *
                C47440) *
               C47174 * C1422 +
           ((C6076 * C15949 + C6077 * C15945 + (C5773 - C5772) * C15950 +
             (C5775 - C5774) * C47471) *
                C15947 +
            ((C1436 - C1435) * C15949 + (C1438 - C1437) * C15945 +
             (C47376 * C1168 - C113 * C1157) * C15950 +
             (C47376 * C1175 - C113 * C1169) * C47471) *
                C47440) *
               C47174 * C47463) *
              C47139)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C47376 * C122 - C113 * C115) * C15949 +
             (C47376 * C136 - C113 * C123) * C15945 + (C4896 - C4897) * C15950 +
             (C4898 - C4899) * C47471) *
                C15947 +
            ((C144 - C145) * C15949 + (C146 - C147) * C15945 + C4900 * C15950 +
             C4901 * C47471) *
                C47440) *
               C47174 * C47421 +
           (((C4897 - C4896) * C15949 + (C4899 - C4898) * C15945 +
             (C4902 - C4903) * C15950 + (C4904 - C4905) * C47471) *
                C15947 +
            (C4906 * C15949 + C4907 * C15945 + C4908 * C15950 +
             C4909 * C47471) *
                C47440) *
               C47174 * C47219) *
              C655 +
          ((((C145 - C144) * C15949 + (C147 - C146) * C15945 + C4906 * C15950 +
             C4907 * C47471) *
                C15947 +
            ((C149 - C148) * C15949 + (C151 - C150) * C15945 + C359 * C15950 +
             C360 * C47471) *
                C47440) *
               C47174 * C47421 +
           ((C4900 * C15949 + C4901 * C15945 + C4910 * C15950 +
             C4911 * C47471) *
                C15947 +
            (C4912 * C15949 + C4913 * C15945 + C361 * C15950 + C362 * C47471) *
                C47440) *
               C47174 * C47219) *
              C656 +
          (((C164 * C15949 + C165 * C15945 + C4912 * C15950 + C4913 * C47471) *
                C15947 +
            ((C153 - C152) * C15949 + (C155 - C154) * C15945 + C664 * C15950 +
             C665 * C47471) *
                C47440) *
               C47174 * C47421 +
           ((C359 * C15949 + C360 * C15945 + C4914 * C15950 + C4915 * C47471) *
                C15947 +
            (C5192 * C15949 + C5193 * C15945 + (C355 - C356) * C15950 +
             (C357 - C358) * C47471) *
                C47440) *
               C47174 * C47219) *
              C657 +
          (((C166 * C15949 + C167 * C15945 + C5192 * C15950 + C5193 * C47471) *
                C15947 +
            ((C157 - C156) * C15949 + (C159 - C158) * C15945 +
             (C666 - C667) * C15950 + (C668 - C669) * C47471) *
                C47440) *
               C47174 * C47421 +
           ((C664 * C15949 + C665 * C15945 + (C356 - C355) * C15950 +
             (C358 - C357) * C47471) *
                C15947 +
            ((C667 - C666) * C15949 + (C669 - C668) * C15945 +
             (C47376 * C322 - C113 * C303) * C15950 +
             (C47376 * C333 - C113 * C323) * C47471) *
                C47440) *
               C47174 * C47219) *
              C47457)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C47376 * C122 - C113 * C115) * C15949 +
              (C47376 * C136 - C113 * C123) * C15945 +
              (C4896 - C4897) * C15950 + (C4898 - C4899) * C47471) *
                 C15947 +
             ((C144 - C145) * C15949 + (C146 - C147) * C15945 + C4900 * C15950 +
              C4901 * C47471) *
                 C47440) *
                C1816 +
            (((C113 * C481 - C47376 * C491) * C15949 +
              (C113 * C492 - C47376 * C511) * C15945 +
              (C5518 - C5519) * C15950 + (C5520 - C5521) * C47471) *
                 C15947 +
             ((C522 - C523) * C15949 + (C524 - C525) * C15945 + C5522 * C15950 +
              C5523 * C47471) *
                 C47440) *
                C1817 +
            (((C47376 * C497 - C113 * C484) * C15949 +
              (C47376 * C514 - C113 * C498) * C15945 +
              (C5930 - C5931) * C15950 + (C5932 - C5933) * C47471) *
                 C15947 +
             ((C530 - C531) * C15949 + (C532 - C533) * C15945 + C7000 * C15950 +
              C7001 * C47471) *
                 C47440) *
                C47456) *
               C47421 +
           ((((C4897 - C4896) * C15949 + (C4899 - C4898) * C15945 +
              (C4902 - C4903) * C15950 + (C4904 - C4905) * C47471) *
                 C15947 +
             (C4906 * C15949 + C4907 * C15945 + C4908 * C15950 +
              C4909 * C47471) *
                 C47440) *
                C1816 +
            (((C5519 - C5518) * C15949 + (C5521 - C5520) * C15945 +
              (C5934 - C5935) * C15950 + (C5936 - C5937) * C47471) *
                 C15947 +
             (C5524 * C15949 + C5525 * C15945 + C6274 * C15950 +
              C6275 * C47471) *
                 C47440) *
                C1817 +
            (((C5931 - C5930) * C15949 + (C5933 - C5932) * C15945 +
              (C5938 - C5939) * C15950 + (C5940 - C5941) * C47471) *
                 C15947 +
             (C7002 * C15949 + C7003 * C15945 + (C5942 - C5943) * C15950 +
              (C5944 - C5945) * C47471) *
                 C47440) *
                C47456) *
               C47219) *
              C47407 +
          (((((C145 - C144) * C15949 + (C147 - C146) * C15945 + C4906 * C15950 +
              C4907 * C47471) *
                 C15947 +
             ((C149 - C148) * C15949 + (C151 - C150) * C15945 + C359 * C15950 +
              C360 * C47471) *
                 C47440) *
                C1816 +
            (((C523 - C522) * C15949 + (C525 - C524) * C15945 + C5524 * C15950 +
              C5525 * C47471) *
                 C15947 +
             ((C527 - C526) * C15949 + (C529 - C528) * C15945 + C964 * C15950 +
              C965 * C47471) *
                 C47440) *
                C1817 +
            (((C531 - C530) * C15949 + (C533 - C532) * C15945 + C7002 * C15950 +
              C7003 * C47471) *
                 C15947 +
             ((C535 - C534) * C15949 + (C537 - C536) * C15945 +
              (C2175 - C2176) * C15950 + (C2177 - C2178) * C47471) *
                 C47440) *
                C47456) *
               C47421 +
           (((C4900 * C15949 + C4901 * C15945 + C4910 * C15950 +
              C4911 * C47471) *
                 C15947 +
             (C4912 * C15949 + C4913 * C15945 + C361 * C15950 + C362 * C47471) *
                 C47440) *
                C1816 +
            ((C5522 * C15949 + C5523 * C15945 + C6276 * C15950 +
              C6277 * C47471) *
                 C15947 +
             (C5526 * C15949 + C5527 * C15945 + (C1593 - C1594) * C15950 +
              (C1595 - C1596) * C47471) *
                 C47440) *
                C1817 +
            ((C7000 * C15949 + C7001 * C15945 + (C5943 - C5942) * C15950 +
              (C5945 - C5944) * C47471) *
                 C15947 +
             ((C2176 - C2175) * C15949 + (C2178 - C2177) * C15945 +
              (C47376 * C1311 - C113 * C1294) * C15950 +
              (C47376 * C1321 - C113 * C1312) * C47471) *
                 C47440) *
                C47456) *
               C47219) *
              C47139)) /
            (p * q * std::sqrt(p + q));
    d2ee[86] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C47376 * C122 - C113 * C115) * C15949 +
             (C47376 * C136 - C113 * C123) * C15945 + (C4896 - C4897) * C15950 +
             (C4898 - C4899) * C47471) *
                C15947 +
            ((C144 - C145) * C15949 + (C146 - C147) * C15945 + C4900 * C15950 +
             C4901 * C47471) *
                C47440) *
               C47422 +
           (((C113 * C481 - C47376 * C491) * C15949 +
             (C113 * C492 - C47376 * C511) * C15945 + (C5518 - C5519) * C15950 +
             (C5520 - C5521) * C47471) *
                C15947 +
            ((C522 - C523) * C15949 + (C524 - C525) * C15945 + C5522 * C15950 +
             C5523 * C47471) *
                C47440) *
               C47261) *
              C1420 +
          ((((C4897 - C4896) * C15949 + (C4899 - C4898) * C15945 +
             (C4902 - C4903) * C15950 + (C4904 - C4905) * C47471) *
                C15947 +
            (C4906 * C15949 + C4907 * C15945 + C4908 * C15950 +
             C4909 * C47471) *
                C47440) *
               C47422 +
           (((C5519 - C5518) * C15949 + (C5521 - C5520) * C15945 +
             (C5934 - C5935) * C15950 + (C5936 - C5937) * C47471) *
                C15947 +
            (C5524 * C15949 + C5525 * C15945 + C6274 * C15950 +
             C6275 * C47471) *
                C47440) *
               C47261) *
              C1421 +
          ((((C4903 - C4902) * C15949 + (C4905 - C4904) * C15945 +
             (C5764 - C5765) * C15950 + (C5766 - C5767) * C47471) *
                C15947 +
            (C4910 * C15949 + C4911 * C15945 + C6076 * C15950 +
             C6077 * C47471) *
                C47440) *
               C47422 +
           (((C5935 - C5934) * C15949 + (C5937 - C5936) * C15945 +
             (C6420 - C6421) * C15950 + (C6422 - C6423) * C47471) *
                C15947 +
            (C6276 * C15949 + C6277 * C15945 + (C6278 - C6279) * C15950 +
             (C6280 - C6281) * C47471) *
                C47440) *
               C47261) *
              C1422 +
          ((((C5765 - C5764) * C15949 + (C5767 - C5766) * C15945 +
             (C5768 - C5769) * C15950 + (C5770 - C5771) * C47471) *
                C15947 +
            (C6078 * C15949 + C6079 * C15945 + (C5772 - C5773) * C15950 +
             (C5774 - C5775) * C47471) *
                C47440) *
               C47422 +
           (((C6421 - C6420) * C15949 + (C6423 - C6422) * C15945 +
             (C47376 * C6413 - C113 * C6411) * C15950 +
             (C47376 * C6417 - C113 * C6414) * C47471) *
                C15947 +
            ((C6279 - C6278) * C15949 + (C6281 - C6280) * C15945 +
             (C47376 * C6415 - C113 * C6412) * C15950 +
             (C47376 * C6418 - C113 * C6416) * C47471) *
                C47440) *
               C47261) *
              C47463) *
         C47128) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C47376 * C122 - C113 * C115) * C15949 +
              (C47376 * C136 - C113 * C123) * C15945 +
              (C4896 - C4897) * C15950 + (C4898 - C4899) * C47471) *
                 C15947 +
             ((C144 - C145) * C15949 + (C146 - C147) * C15945 + C4900 * C15950 +
              C4901 * C47471) *
                 C47440) *
                C47422 +
            (((C113 * C481 - C47376 * C491) * C15949 +
              (C113 * C492 - C47376 * C511) * C15945 +
              (C5518 - C5519) * C15950 + (C5520 - C5521) * C47471) *
                 C15947 +
             ((C522 - C523) * C15949 + (C524 - C525) * C15945 + C5522 * C15950 +
              C5523 * C47471) *
                 C47440) *
                C47261) *
               C47421 +
           ((((C4897 - C4896) * C15949 + (C4899 - C4898) * C15945 +
              (C4902 - C4903) * C15950 + (C4904 - C4905) * C47471) *
                 C15947 +
             (C4906 * C15949 + C4907 * C15945 + C4908 * C15950 +
              C4909 * C47471) *
                 C47440) *
                C47422 +
            (((C5519 - C5518) * C15949 + (C5521 - C5520) * C15945 +
              (C5934 - C5935) * C15950 + (C5936 - C5937) * C47471) *
                 C15947 +
             (C5524 * C15949 + C5525 * C15945 + C6274 * C15950 +
              C6275 * C47471) *
                 C47440) *
                C47261) *
               C47219) *
              C291 +
          (((((C145 - C144) * C15949 + (C147 - C146) * C15945 + C4906 * C15950 +
              C4907 * C47471) *
                 C15947 +
             ((C149 - C148) * C15949 + (C151 - C150) * C15945 + C359 * C15950 +
              C360 * C47471) *
                 C47440) *
                C47422 +
            (((C523 - C522) * C15949 + (C525 - C524) * C15945 + C5524 * C15950 +
              C5525 * C47471) *
                 C15947 +
             ((C527 - C526) * C15949 + (C529 - C528) * C15945 + C964 * C15950 +
              C965 * C47471) *
                 C47440) *
                C47261) *
               C47421 +
           (((C4900 * C15949 + C4901 * C15945 + C4910 * C15950 +
              C4911 * C47471) *
                 C15947 +
             (C4912 * C15949 + C4913 * C15945 + C361 * C15950 + C362 * C47471) *
                 C47440) *
                C47422 +
            ((C5522 * C15949 + C5523 * C15945 + C6276 * C15950 +
              C6277 * C47471) *
                 C15947 +
             (C5526 * C15949 + C5527 * C15945 + (C1593 - C1594) * C15950 +
              (C1595 - C1596) * C47471) *
                 C47440) *
                C47261) *
               C47219) *
              C292 +
          ((((C164 * C15949 + C165 * C15945 + C4912 * C15950 + C4913 * C47471) *
                 C15947 +
             ((C153 - C152) * C15949 + (C155 - C154) * C15945 + C664 * C15950 +
              C665 * C47471) *
                 C47440) *
                C47422 +
            ((C546 * C15949 + C547 * C15945 + C5526 * C15950 + C5527 * C47471) *
                 C15947 +
             ((C539 - C538) * C15949 + (C541 - C540) * C15945 +
              (C960 - C961) * C15950 + (C962 - C963) * C47471) *
                 C47440) *
                C47261) *
               C47421 +
           (((C359 * C15949 + C360 * C15945 + C4914 * C15950 + C4915 * C47471) *
                 C15947 +
             (C5192 * C15949 + C5193 * C15945 + (C355 - C356) * C15950 +
              (C357 - C358) * C47471) *
                 C47440) *
                C47422 +
            ((C964 * C15949 + C965 * C15945 + (C1594 - C1593) * C15950 +
              (C1596 - C1595) * C47471) *
                 C15947 +
             ((C961 - C960) * C15949 + (C963 - C962) * C15945 +
              (C47376 * C1585 - C113 * C1584) * C15950 +
              (C47376 * C1587 - C113 * C1586) * C47471) *
                 C47440) *
                C47261) *
               C47219) *
              C47447)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C47376 * C122 - C113 * C115) * C15949 +
             (C47376 * C136 - C113 * C123) * C15945 + (C4896 - C4897) * C15950 +
             (C4898 - C4899) * C47471) *
                C15947 +
            ((C144 - C145) * C15949 + (C146 - C147) * C15945 + C4900 * C15950 +
             C4901 * C47471) *
                C47440) *
               C2276 +
           (((C113 * C481 - C47376 * C491) * C15949 +
             (C113 * C492 - C47376 * C511) * C15945 + (C5518 - C5519) * C15950 +
             (C5520 - C5521) * C47471) *
                C15947 +
            ((C522 - C523) * C15949 + (C524 - C525) * C15945 + C5522 * C15950 +
             C5523 * C47471) *
                C47440) *
               C2277 +
           (((C47376 * C497 - C113 * C484) * C15949 +
             (C47376 * C514 - C113 * C498) * C15945 + (C5930 - C5931) * C15950 +
             (C5932 - C5933) * C47471) *
                C15947 +
            ((C530 - C531) * C15949 + (C532 - C533) * C15945 + C7000 * C15950 +
             C7001 * C47471) *
                C47440) *
               C2278 +
           (((C113 * C1996 - C47376 * C2002) * C15949 +
             (C113 * C2003 - C47376 * C2014) * C15945 +
             (C7276 - C7277) * C15950 + (C7278 - C7279) * C47471) *
                C15947 +
            ((C2285 - C2286) * C15949 + (C2287 - C2288) * C15945 +
             (C7134 - C7135) * C15950 + (C7136 - C7137) * C47471) *
                C47440) *
               C47469) *
              C47421 +
          ((((C4897 - C4896) * C15949 + (C4899 - C4898) * C15945 +
             (C4902 - C4903) * C15950 + (C4904 - C4905) * C47471) *
                C15947 +
            (C4906 * C15949 + C4907 * C15945 + C4908 * C15950 +
             C4909 * C47471) *
                C47440) *
               C2276 +
           (((C5519 - C5518) * C15949 + (C5521 - C5520) * C15945 +
             (C5934 - C5935) * C15950 + (C5936 - C5937) * C47471) *
                C15947 +
            (C5524 * C15949 + C5525 * C15945 + C6274 * C15950 +
             C6275 * C47471) *
                C47440) *
               C2277 +
           (((C5931 - C5930) * C15949 + (C5933 - C5932) * C15945 +
             (C5938 - C5939) * C15950 + (C5940 - C5941) * C47471) *
                C15947 +
            (C7002 * C15949 + C7003 * C15945 + (C5942 - C5943) * C15950 +
             (C5944 - C5945) * C47471) *
                C47440) *
               C2278 +
           (((C7277 - C7276) * C15949 + (C7279 - C7278) * C15945 +
             (C47376 * C7269 - C113 * C7267) * C15950 +
             (C47376 * C7273 - C113 * C7270) * C47471) *
                C15947 +
            ((C7135 - C7134) * C15949 + (C7137 - C7136) * C15945 +
             (C47376 * C7271 - C113 * C7268) * C15950 +
             (C47376 * C7274 - C113 * C7272) * C47471) *
                C47440) *
               C47469) *
              C47219) *
         C47128) /
            (p * q * std::sqrt(p + q));
    d2ee[87] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C47376 * C122 - C113 * C115) * C15949 +
                (C47376 * C136 - C113 * C123) * C15945 +
                (C4896 - C4897) * C15950 + (C4898 - C4899) * C47471) *
                   C15947 +
               ((C144 - C145) * C15949 + (C146 - C147) * C15945 +
                C4900 * C15950 + C4901 * C47471) *
                   C47440) *
                  C47174 * C47156 * C108 +
              (((C145 - C144) * C15949 + (C147 - C146) * C15945 +
                C4906 * C15950 + C4907 * C47471) *
                   C15947 +
               ((C149 - C148) * C15949 + (C151 - C150) * C15945 +
                C359 * C15950 + C360 * C47471) *
                   C47440) *
                  C47174 * C47156 * C109 +
              ((C164 * C15949 + C165 * C15945 + C4912 * C15950 +
                C4913 * C47471) *
                   C15947 +
               ((C153 - C152) * C15949 + (C155 - C154) * C15945 +
                C664 * C15950 + C665 * C47471) *
                   C47440) *
                  C47174 * C47156 * C110 +
              ((C166 * C15949 + C167 * C15945 + C5192 * C15950 +
                C5193 * C47471) *
                   C15947 +
               ((C157 - C156) * C15949 + (C159 - C158) * C15945 +
                (C666 - C667) * C15950 + (C668 - C669) * C47471) *
                   C47440) *
                  C47174 * C47156 * C111 +
              ((C168 * C15949 + C169 * C15945 + (C667 - C666) * C15950 +
                (C669 - C668) * C47471) *
                   C15947 +
               ((C161 - C160) * C15949 + (C163 - C162) * C15945 +
                (C47376 * C660 - C113 * C659) * C15950 +
                (C47376 * C662 - C113 * C661) * C47471) *
                   C47440) *
                  C47174 * C47156 * C112) +
         0.5 * std::pow(Pi, 2.5) *
             (((((C47376 * C122 - C113 * C115) * C15949 +
                 (C47376 * C136 - C113 * C123) * C15945 +
                 (C4896 - C4897) * C15950 + (C4898 - C4899) * C47471) *
                    C15947 +
                ((C144 - C145) * C15949 + (C146 - C147) * C15945 +
                 C4900 * C15950 + C4901 * C47471) *
                    C47440) *
                   C47174 * C47492 +
               (((C4897 - C4896) * C15949 + (C4899 - C4898) * C15945 +
                 (C4902 - C4903) * C15950 + (C4904 - C4905) * C47471) *
                    C15947 +
                (C4906 * C15949 + C4907 * C15945 + C4908 * C15950 +
                 C4909 * C47471) *
                    C47440) *
                   C47174 * C47480 +
               (((C4903 - C4902) * C15949 + (C4905 - C4904) * C15945 +
                 (C5764 - C5765) * C15950 + (C5766 - C5767) * C47471) *
                    C15947 +
                (C4910 * C15949 + C4911 * C15945 + C6076 * C15950 +
                 C6077 * C47471) *
                    C47440) *
                   C47174 * C47453) *
                  C291 +
              ((((C145 - C144) * C15949 + (C147 - C146) * C15945 +
                 C4906 * C15950 + C4907 * C47471) *
                    C15947 +
                ((C149 - C148) * C15949 + (C151 - C150) * C15945 +
                 C359 * C15950 + C360 * C47471) *
                    C47440) *
                   C47174 * C47492 +
               ((C4900 * C15949 + C4901 * C15945 + C4910 * C15950 +
                 C4911 * C47471) *
                    C15947 +
                (C4912 * C15949 + C4913 * C15945 + C361 * C15950 +
                 C362 * C47471) *
                    C47440) *
                   C47174 * C47480 +
               ((C4908 * C15949 + C4909 * C15945 + C6078 * C15950 +
                 C6079 * C47471) *
                    C15947 +
                (C4914 * C15949 + C4915 * C15945 + (C1435 - C1436) * C15950 +
                 (C1437 - C1438) * C47471) *
                    C47440) *
                   C47174 * C47453) *
                  C292 +
              (((C164 * C15949 + C165 * C15945 + C4912 * C15950 +
                 C4913 * C47471) *
                    C15947 +
                ((C153 - C152) * C15949 + (C155 - C154) * C15945 +
                 C664 * C15950 + C665 * C47471) *
                    C47440) *
                   C47174 * C47492 +
               ((C359 * C15949 + C360 * C15945 + C4914 * C15950 +
                 C4915 * C47471) *
                    C15947 +
                (C5192 * C15949 + C5193 * C15945 + (C355 - C356) * C15950 +
                 (C357 - C358) * C47471) *
                    C47440) *
                   C47174 * C47480 +
               ((C361 * C15949 + C362 * C15945 + (C1436 - C1435) * C15950 +
                 (C1438 - C1437) * C47471) *
                    C15947 +
                ((C356 - C355) * C15949 + (C358 - C357) * C15945 +
                 (C47376 * C1427 - C113 * C1426) * C15950 +
                 (C47376 * C1429 - C113 * C1428) * C47471) *
                    C47440) *
                   C47174 * C47453) *
                  C47447)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C47376 * C122 - C113 * C115) * C15949 +
             (C47376 * C136 - C113 * C123) * C15945 + (C4896 - C4897) * C15950 +
             (C4898 - C4899) * C47471) *
                C15947 +
            ((C144 - C145) * C15949 + (C146 - C147) * C15945 + C4900 * C15950 +
             C4901 * C47471) *
                C47440) *
               C47493 +
           (((C113 * C481 - C47376 * C491) * C15949 +
             (C113 * C492 - C47376 * C511) * C15945 + (C5518 - C5519) * C15950 +
             (C5520 - C5521) * C47471) *
                C15947 +
            ((C522 - C523) * C15949 + (C524 - C525) * C15945 + C5522 * C15950 +
             C5523 * C47471) *
                C47440) *
               C47482 +
           (((C47376 * C497 - C113 * C484) * C15949 +
             (C47376 * C514 - C113 * C498) * C15945 + (C5930 - C5931) * C15950 +
             (C5932 - C5933) * C47471) *
                C15947 +
            ((C530 - C531) * C15949 + (C532 - C533) * C15945 + C7000 * C15950 +
             C7001 * C47471) *
                C47440) *
               C47456) *
              C47156 * C291 +
          ((((C145 - C144) * C15949 + (C147 - C146) * C15945 + C4906 * C15950 +
             C4907 * C47471) *
                C15947 +
            ((C149 - C148) * C15949 + (C151 - C150) * C15945 + C359 * C15950 +
             C360 * C47471) *
                C47440) *
               C47493 +
           (((C523 - C522) * C15949 + (C525 - C524) * C15945 + C5524 * C15950 +
             C5525 * C47471) *
                C15947 +
            ((C527 - C526) * C15949 + (C529 - C528) * C15945 + C964 * C15950 +
             C965 * C47471) *
                C47440) *
               C47482 +
           (((C531 - C530) * C15949 + (C533 - C532) * C15945 + C7002 * C15950 +
             C7003 * C47471) *
                C15947 +
            ((C535 - C534) * C15949 + (C537 - C536) * C15945 +
             (C2175 - C2176) * C15950 + (C2177 - C2178) * C47471) *
                C47440) *
               C47456) *
              C47156 * C292 +
          (((C164 * C15949 + C165 * C15945 + C4912 * C15950 + C4913 * C47471) *
                C15947 +
            ((C153 - C152) * C15949 + (C155 - C154) * C15945 + C664 * C15950 +
             C665 * C47471) *
                C47440) *
               C47493 +
           ((C546 * C15949 + C547 * C15945 + C5526 * C15950 + C5527 * C47471) *
                C15947 +
            ((C539 - C538) * C15949 + (C541 - C540) * C15945 +
             (C960 - C961) * C15950 + (C962 - C963) * C47471) *
                C47440) *
               C47482 +
           ((C548 * C15949 + C549 * C15945 + (C2176 - C2175) * C15950 +
             (C2178 - C2177) * C47471) *
                C15947 +
            ((C543 - C542) * C15949 + (C545 - C544) * C15945 +
             (C47376 * C2167 - C113 * C2166) * C15950 +
             (C47376 * C2169 - C113 * C2168) * C47471) *
                C47440) *
               C47456) *
              C47156 * C47447)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C47376 * C122 - C113 * C115) * C15949 +
             (C47376 * C136 - C113 * C123) * C15945 + (C4896 - C4897) * C15950 +
             (C4898 - C4899) * C47471) *
                C15947 +
            ((C144 - C145) * C15949 + (C146 - C147) * C15945 + C4900 * C15950 +
             C4901 * C47471) *
                C47440) *
               C47174 * C1078 +
           (((C4897 - C4896) * C15949 + (C4899 - C4898) * C15945 +
             (C4902 - C4903) * C15950 + (C4904 - C4905) * C47471) *
                C15947 +
            (C4906 * C15949 + C4907 * C15945 + C4908 * C15950 +
             C4909 * C47471) *
                C47440) *
               C47174 * C1079 +
           (((C4903 - C4902) * C15949 + (C4905 - C4904) * C15945 +
             (C5764 - C5765) * C15950 + (C5766 - C5767) * C47471) *
                C15947 +
            (C4910 * C15949 + C4911 * C15945 + C6076 * C15950 +
             C6077 * C47471) *
                C47440) *
               C47174 * C47453) *
              C47489 +
          ((((C145 - C144) * C15949 + (C147 - C146) * C15945 + C4906 * C15950 +
             C4907 * C47471) *
                C15947 +
            ((C149 - C148) * C15949 + (C151 - C150) * C15945 + C359 * C15950 +
             C360 * C47471) *
                C47440) *
               C47174 * C1078 +
           ((C4900 * C15949 + C4901 * C15945 + C4910 * C15950 +
             C4911 * C47471) *
                C15947 +
            (C4912 * C15949 + C4913 * C15945 + C361 * C15950 + C362 * C47471) *
                C47440) *
               C47174 * C1079 +
           ((C4908 * C15949 + C4909 * C15945 + C6078 * C15950 +
             C6079 * C47471) *
                C15947 +
            (C4914 * C15949 + C4915 * C15945 + (C1435 - C1436) * C15950 +
             (C1437 - C1438) * C47471) *
                C47440) *
               C47174 * C47453) *
              C47476 +
          (((C164 * C15949 + C165 * C15945 + C4912 * C15950 + C4913 * C47471) *
                C15947 +
            ((C153 - C152) * C15949 + (C155 - C154) * C15945 + C664 * C15950 +
             C665 * C47471) *
                C47440) *
               C47174 * C1078 +
           ((C359 * C15949 + C360 * C15945 + C4914 * C15950 + C4915 * C47471) *
                C15947 +
            (C5192 * C15949 + C5193 * C15945 + (C355 - C356) * C15950 +
             (C357 - C358) * C47471) *
                C47440) *
               C47174 * C1079 +
           ((C361 * C15949 + C362 * C15945 + (C1436 - C1435) * C15950 +
             (C1438 - C1437) * C47471) *
                C15947 +
            ((C356 - C355) * C15949 + (C358 - C357) * C15945 +
             (C47376 * C1427 - C113 * C1426) * C15950 +
             (C47376 * C1429 - C113 * C1428) * C47471) *
                C47440) *
               C47174 * C47453) *
              C47447)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C47376 * C122 - C113 * C115) * C15949 +
            (C47376 * C136 - C113 * C123) * C15945 + (C4896 - C4897) * C15950 +
            (C4898 - C4899) * C47471) *
               C15947 +
           ((C144 - C145) * C15949 + (C146 - C147) * C15945 + C4900 * C15950 +
            C4901 * C47471) *
               C47440) *
              C47174 * C1146 +
          (((C4897 - C4896) * C15949 + (C4899 - C4898) * C15945 +
            (C4902 - C4903) * C15950 + (C4904 - C4905) * C47471) *
               C15947 +
           (C4906 * C15949 + C4907 * C15945 + C4908 * C15950 + C4909 * C47471) *
               C47440) *
              C47174 * C1147 +
          (((C4903 - C4902) * C15949 + (C4905 - C4904) * C15945 +
            (C5764 - C5765) * C15950 + (C5766 - C5767) * C47471) *
               C15947 +
           (C4910 * C15949 + C4911 * C15945 + C6076 * C15950 + C6077 * C47471) *
               C47440) *
              C47174 * C1148 +
          (((C5765 - C5764) * C15949 + (C5767 - C5766) * C15945 +
            (C5768 - C5769) * C15950 + (C5770 - C5771) * C47471) *
               C15947 +
           (C6078 * C15949 + C6079 * C15945 + (C5772 - C5773) * C15950 +
            (C5774 - C5775) * C47471) *
               C47440) *
              C47174 * C1149 +
          (((C5769 - C5768) * C15949 + (C5771 - C5770) * C15945 +
            (C47376 * C5757 - C113 * C5755) * C15950 +
            (C47376 * C5761 - C113 * C5758) * C47471) *
               C15947 +
           ((C5773 - C5772) * C15949 + (C5775 - C5774) * C15945 +
            (C47376 * C5759 - C113 * C5756) * C15950 +
            (C47376 * C5762 - C113 * C5760) * C47471) *
               C47440) *
              C47174 * C1150) *
         C47128) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C47376 * C122 - C113 * C115) * C15949 +
             (C47376 * C136 - C113 * C123) * C15945 + (C4896 - C4897) * C15950 +
             (C4898 - C4899) * C47471) *
                C15947 +
            ((C144 - C145) * C15949 + (C146 - C147) * C15945 + C4900 * C15950 +
             C4901 * C47471) *
                C47440) *
               C47493 +
           (((C113 * C481 - C47376 * C491) * C15949 +
             (C113 * C492 - C47376 * C511) * C15945 + (C5518 - C5519) * C15950 +
             (C5520 - C5521) * C47471) *
                C15947 +
            ((C522 - C523) * C15949 + (C524 - C525) * C15945 + C5522 * C15950 +
             C5523 * C47471) *
                C47440) *
               C47482 +
           (((C47376 * C497 - C113 * C484) * C15949 +
             (C47376 * C514 - C113 * C498) * C15945 + (C5930 - C5931) * C15950 +
             (C5932 - C5933) * C47471) *
                C15947 +
            ((C530 - C531) * C15949 + (C532 - C533) * C15945 + C7000 * C15950 +
             C7001 * C47471) *
                C47440) *
               C47456) *
              C1078 +
          ((((C4897 - C4896) * C15949 + (C4899 - C4898) * C15945 +
             (C4902 - C4903) * C15950 + (C4904 - C4905) * C47471) *
                C15947 +
            (C4906 * C15949 + C4907 * C15945 + C4908 * C15950 +
             C4909 * C47471) *
                C47440) *
               C47493 +
           (((C5519 - C5518) * C15949 + (C5521 - C5520) * C15945 +
             (C5934 - C5935) * C15950 + (C5936 - C5937) * C47471) *
                C15947 +
            (C5524 * C15949 + C5525 * C15945 + C6274 * C15950 +
             C6275 * C47471) *
                C47440) *
               C47482 +
           (((C5931 - C5930) * C15949 + (C5933 - C5932) * C15945 +
             (C5938 - C5939) * C15950 + (C5940 - C5941) * C47471) *
                C15947 +
            (C7002 * C15949 + C7003 * C15945 + (C5942 - C5943) * C15950 +
             (C5944 - C5945) * C47471) *
                C47440) *
               C47456) *
              C1079 +
          ((((C4903 - C4902) * C15949 + (C4905 - C4904) * C15945 +
             (C5764 - C5765) * C15950 + (C5766 - C5767) * C47471) *
                C15947 +
            (C4910 * C15949 + C4911 * C15945 + C6076 * C15950 +
             C6077 * C47471) *
                C47440) *
               C47493 +
           (((C5935 - C5934) * C15949 + (C5937 - C5936) * C15945 +
             (C6420 - C6421) * C15950 + (C6422 - C6423) * C47471) *
                C15947 +
            (C6276 * C15949 + C6277 * C15945 + (C6278 - C6279) * C15950 +
             (C6280 - C6281) * C47471) *
                C47440) *
               C47482 +
           (((C5939 - C5938) * C15949 + (C5941 - C5940) * C15945 +
             (C47376 * C5923 - C113 * C5921) * C15950 +
             (C47376 * C5927 - C113 * C5924) * C47471) *
                C15947 +
            ((C5943 - C5942) * C15949 + (C5945 - C5944) * C15945 +
             (C47376 * C5925 - C113 * C5922) * C15950 +
             (C47376 * C5928 - C113 * C5926) * C47471) *
                C47440) *
               C47456) *
              C47453) *
         C47128) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C47376 * C122 - C113 * C115) * C15949 +
             (C47376 * C136 - C113 * C123) * C15945 + (C4896 - C4897) * C15950 +
             (C4898 - C4899) * C47471) *
                C15947 +
            ((C144 - C145) * C15949 + (C146 - C147) * C15945 + C4900 * C15950 +
             C4901 * C47471) *
                C47440) *
               C1816 +
           (((C113 * C481 - C47376 * C491) * C15949 +
             (C113 * C492 - C47376 * C511) * C15945 + (C5518 - C5519) * C15950 +
             (C5520 - C5521) * C47471) *
                C15947 +
            ((C522 - C523) * C15949 + (C524 - C525) * C15945 + C5522 * C15950 +
             C5523 * C47471) *
                C47440) *
               C1817 +
           (((C47376 * C497 - C113 * C484) * C15949 +
             (C47376 * C514 - C113 * C498) * C15945 + (C5930 - C5931) * C15950 +
             (C5932 - C5933) * C47471) *
                C15947 +
            ((C530 - C531) * C15949 + (C532 - C533) * C15945 + C7000 * C15950 +
             C7001 * C47471) *
                C47440) *
               C47456) *
              C47156 * C47489 +
          ((((C145 - C144) * C15949 + (C147 - C146) * C15945 + C4906 * C15950 +
             C4907 * C47471) *
                C15947 +
            ((C149 - C148) * C15949 + (C151 - C150) * C15945 + C359 * C15950 +
             C360 * C47471) *
                C47440) *
               C1816 +
           (((C523 - C522) * C15949 + (C525 - C524) * C15945 + C5524 * C15950 +
             C5525 * C47471) *
                C15947 +
            ((C527 - C526) * C15949 + (C529 - C528) * C15945 + C964 * C15950 +
             C965 * C47471) *
                C47440) *
               C1817 +
           (((C531 - C530) * C15949 + (C533 - C532) * C15945 + C7002 * C15950 +
             C7003 * C47471) *
                C15947 +
            ((C535 - C534) * C15949 + (C537 - C536) * C15945 +
             (C2175 - C2176) * C15950 + (C2177 - C2178) * C47471) *
                C47440) *
               C47456) *
              C47156 * C47476 +
          (((C164 * C15949 + C165 * C15945 + C4912 * C15950 + C4913 * C47471) *
                C15947 +
            ((C153 - C152) * C15949 + (C155 - C154) * C15945 + C664 * C15950 +
             C665 * C47471) *
                C47440) *
               C1816 +
           ((C546 * C15949 + C547 * C15945 + C5526 * C15950 + C5527 * C47471) *
                C15947 +
            ((C539 - C538) * C15949 + (C541 - C540) * C15945 +
             (C960 - C961) * C15950 + (C962 - C963) * C47471) *
                C47440) *
               C1817 +
           ((C548 * C15949 + C549 * C15945 + (C2176 - C2175) * C15950 +
             (C2178 - C2177) * C47471) *
                C15947 +
            ((C543 - C542) * C15949 + (C545 - C544) * C15945 +
             (C47376 * C2167 - C113 * C2166) * C15950 +
             (C47376 * C2169 - C113 * C2168) * C47471) *
                C47440) *
               C47456) *
              C47156 * C47447)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C47376 * C122 - C113 * C115) * C15949 +
             (C47376 * C136 - C113 * C123) * C15945 + (C4896 - C4897) * C15950 +
             (C4898 - C4899) * C47471) *
                C15947 +
            ((C144 - C145) * C15949 + (C146 - C147) * C15945 + C4900 * C15950 +
             C4901 * C47471) *
                C47440) *
               C1816 +
           (((C113 * C481 - C47376 * C491) * C15949 +
             (C113 * C492 - C47376 * C511) * C15945 + (C5518 - C5519) * C15950 +
             (C5520 - C5521) * C47471) *
                C15947 +
            ((C522 - C523) * C15949 + (C524 - C525) * C15945 + C5522 * C15950 +
             C5523 * C47471) *
                C47440) *
               C1817 +
           (((C47376 * C497 - C113 * C484) * C15949 +
             (C47376 * C514 - C113 * C498) * C15945 + (C5930 - C5931) * C15950 +
             (C5932 - C5933) * C47471) *
                C15947 +
            ((C530 - C531) * C15949 + (C532 - C533) * C15945 + C7000 * C15950 +
             C7001 * C47471) *
                C47440) *
               C47456) *
              C47492 +
          ((((C4897 - C4896) * C15949 + (C4899 - C4898) * C15945 +
             (C4902 - C4903) * C15950 + (C4904 - C4905) * C47471) *
                C15947 +
            (C4906 * C15949 + C4907 * C15945 + C4908 * C15950 +
             C4909 * C47471) *
                C47440) *
               C1816 +
           (((C5519 - C5518) * C15949 + (C5521 - C5520) * C15945 +
             (C5934 - C5935) * C15950 + (C5936 - C5937) * C47471) *
                C15947 +
            (C5524 * C15949 + C5525 * C15945 + C6274 * C15950 +
             C6275 * C47471) *
                C47440) *
               C1817 +
           (((C5931 - C5930) * C15949 + (C5933 - C5932) * C15945 +
             (C5938 - C5939) * C15950 + (C5940 - C5941) * C47471) *
                C15947 +
            (C7002 * C15949 + C7003 * C15945 + (C5942 - C5943) * C15950 +
             (C5944 - C5945) * C47471) *
                C47440) *
               C47456) *
              C47480 +
          ((((C4903 - C4902) * C15949 + (C4905 - C4904) * C15945 +
             (C5764 - C5765) * C15950 + (C5766 - C5767) * C47471) *
                C15947 +
            (C4910 * C15949 + C4911 * C15945 + C6076 * C15950 +
             C6077 * C47471) *
                C47440) *
               C1816 +
           (((C5935 - C5934) * C15949 + (C5937 - C5936) * C15945 +
             (C6420 - C6421) * C15950 + (C6422 - C6423) * C47471) *
                C15947 +
            (C6276 * C15949 + C6277 * C15945 + (C6278 - C6279) * C15950 +
             (C6280 - C6281) * C47471) *
                C47440) *
               C1817 +
           (((C5939 - C5938) * C15949 + (C5941 - C5940) * C15945 +
             (C47376 * C5923 - C113 * C5921) * C15950 +
             (C47376 * C5927 - C113 * C5924) * C47471) *
                C15947 +
            ((C5943 - C5942) * C15949 + (C5945 - C5944) * C15945 +
             (C47376 * C5925 - C113 * C5922) * C15950 +
             (C47376 * C5928 - C113 * C5926) * C47471) *
                C47440) *
               C47456) *
              C47453) *
         C47128) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C47376 * C122 - C113 * C115) * C15949 +
            (C47376 * C136 - C113 * C123) * C15945 + (C4896 - C4897) * C15950 +
            (C4898 - C4899) * C47471) *
               C15947 +
           ((C144 - C145) * C15949 + (C146 - C147) * C15945 + C4900 * C15950 +
            C4901 * C47471) *
               C47440) *
              C1991 +
          (((C113 * C481 - C47376 * C491) * C15949 +
            (C113 * C492 - C47376 * C511) * C15945 + (C5518 - C5519) * C15950 +
            (C5520 - C5521) * C47471) *
               C15947 +
           ((C522 - C523) * C15949 + (C524 - C525) * C15945 + C5522 * C15950 +
            C5523 * C47471) *
               C47440) *
              C1992 +
          (((C47376 * C497 - C113 * C484) * C15949 +
            (C47376 * C514 - C113 * C498) * C15945 + (C5930 - C5931) * C15950 +
            (C5932 - C5933) * C47471) *
               C15947 +
           ((C530 - C531) * C15949 + (C532 - C533) * C15945 + C7000 * C15950 +
            C7001 * C47471) *
               C47440) *
              C1993 +
          (((C113 * C1996 - C47376 * C2002) * C15949 +
            (C113 * C2003 - C47376 * C2014) * C15945 +
            (C7276 - C7277) * C15950 + (C7278 - C7279) * C47471) *
               C15947 +
           ((C2285 - C2286) * C15949 + (C2287 - C2288) * C15945 +
            (C7134 - C7135) * C15950 + (C7136 - C7137) * C47471) *
               C47440) *
              C1994 +
          (((C47376 * C2008 - C113 * C1999) * C15949 +
            (C47376 * C2017 - C113 * C2009) * C15945 +
            (C47376 * C6799 - C113 * C6797) * C15950 +
            (C47376 * C6803 - C113 * C6800) * C47471) *
               C15947 +
           ((C47376 * C2010 - C113 * C2000) * C15949 +
            (C47376 * C2018 - C113 * C2011) * C15945 +
            (C47376 * C6801 - C113 * C6798) * C15950 +
            (C47376 * C6804 - C113 * C6802) * C47471) *
               C47440) *
              C1995) *
         C47156 * C47128) /
            (p * q * std::sqrt(p + q));
    d2ee[88] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C47376 * C122 - C113 * C115) * C15949 +
              (C47376 * C136 - C113 * C123) * C15945 +
              (C4896 - C4897) * C15950 + (C4898 - C4899) * C47471) *
                 C15947 +
             ((C144 - C145) * C15949 + (C146 - C147) * C15945 + C4900 * C15950 +
              C4901 * C47471) *
                 C47440) *
                C47422 +
            (((C113 * C481 - C47376 * C491) * C15949 +
              (C113 * C492 - C47376 * C511) * C15945 +
              (C5518 - C5519) * C15950 + (C5520 - C5521) * C47471) *
                 C15947 +
             ((C522 - C523) * C15949 + (C524 - C525) * C15945 + C5522 * C15950 +
              C5523 * C47471) *
                 C47440) *
                C47261) *
               C1078 +
           ((((C4897 - C4896) * C15949 + (C4899 - C4898) * C15945 +
              (C4902 - C4903) * C15950 + (C4904 - C4905) * C47471) *
                 C15947 +
             (C4906 * C15949 + C4907 * C15945 + C4908 * C15950 +
              C4909 * C47471) *
                 C47440) *
                C47422 +
            (((C5519 - C5518) * C15949 + (C5521 - C5520) * C15945 +
              (C5934 - C5935) * C15950 + (C5936 - C5937) * C47471) *
                 C15947 +
             (C5524 * C15949 + C5525 * C15945 + C6274 * C15950 +
              C6275 * C47471) *
                 C47440) *
                C47261) *
               C1079 +
           ((((C4903 - C4902) * C15949 + (C4905 - C4904) * C15945 +
              (C5764 - C5765) * C15950 + (C5766 - C5767) * C47471) *
                 C15947 +
             (C4910 * C15949 + C4911 * C15945 + C6076 * C15950 +
              C6077 * C47471) *
                 C47440) *
                C47422 +
            (((C5935 - C5934) * C15949 + (C5937 - C5936) * C15945 +
              (C6420 - C6421) * C15950 + (C6422 - C6423) * C47471) *
                 C15947 +
             (C6276 * C15949 + C6277 * C15945 + (C6278 - C6279) * C15950 +
              (C6280 - C6281) * C47471) *
                 C47440) *
                C47261) *
               C47453) *
              C47407 +
          (((((C145 - C144) * C15949 + (C147 - C146) * C15945 + C4906 * C15950 +
              C4907 * C47471) *
                 C15947 +
             ((C149 - C148) * C15949 + (C151 - C150) * C15945 + C359 * C15950 +
              C360 * C47471) *
                 C47440) *
                C47422 +
            (((C523 - C522) * C15949 + (C525 - C524) * C15945 + C5524 * C15950 +
              C5525 * C47471) *
                 C15947 +
             ((C527 - C526) * C15949 + (C529 - C528) * C15945 + C964 * C15950 +
              C965 * C47471) *
                 C47440) *
                C47261) *
               C1078 +
           (((C4900 * C15949 + C4901 * C15945 + C4910 * C15950 +
              C4911 * C47471) *
                 C15947 +
             (C4912 * C15949 + C4913 * C15945 + C361 * C15950 + C362 * C47471) *
                 C47440) *
                C47422 +
            ((C5522 * C15949 + C5523 * C15945 + C6276 * C15950 +
              C6277 * C47471) *
                 C15947 +
             (C5526 * C15949 + C5527 * C15945 + (C1593 - C1594) * C15950 +
              (C1595 - C1596) * C47471) *
                 C47440) *
                C47261) *
               C1079 +
           (((C4908 * C15949 + C4909 * C15945 + C6078 * C15950 +
              C6079 * C47471) *
                 C15947 +
             (C4914 * C15949 + C4915 * C15945 + (C1435 - C1436) * C15950 +
              (C1437 - C1438) * C47471) *
                 C47440) *
                C47422 +
            ((C6274 * C15949 + C6275 * C15945 + (C6279 - C6278) * C15950 +
              (C6281 - C6280) * C47471) *
                 C15947 +
             ((C1594 - C1593) * C15949 + (C1596 - C1595) * C15945 +
              (C47376 * C1701 - C113 * C1696) * C15950 +
              (C47376 * C1705 - C113 * C1702) * C47471) *
                 C47440) *
                C47261) *
               C47453) *
              C47139)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C47376 * C122 - C113 * C115) * C15949 +
             (C47376 * C136 - C113 * C123) * C15945 + (C4896 - C4897) * C15950 +
             (C4898 - C4899) * C47471) *
                C15947 +
            ((C144 - C145) * C15949 + (C146 - C147) * C15945 + C4900 * C15950 +
             C4901 * C47471) *
                C47440) *
               C47422 +
           (((C113 * C481 - C47376 * C491) * C15949 +
             (C113 * C492 - C47376 * C511) * C15945 + (C5518 - C5519) * C15950 +
             (C5520 - C5521) * C47471) *
                C15947 +
            ((C522 - C523) * C15949 + (C524 - C525) * C15945 + C5522 * C15950 +
             C5523 * C47471) *
                C47440) *
               C47261) *
              C47156 * C655 +
          ((((C145 - C144) * C15949 + (C147 - C146) * C15945 + C4906 * C15950 +
             C4907 * C47471) *
                C15947 +
            ((C149 - C148) * C15949 + (C151 - C150) * C15945 + C359 * C15950 +
             C360 * C47471) *
                C47440) *
               C47422 +
           (((C523 - C522) * C15949 + (C525 - C524) * C15945 + C5524 * C15950 +
             C5525 * C47471) *
                C15947 +
            ((C527 - C526) * C15949 + (C529 - C528) * C15945 + C964 * C15950 +
             C965 * C47471) *
                C47440) *
               C47261) *
              C47156 * C656 +
          (((C164 * C15949 + C165 * C15945 + C4912 * C15950 + C4913 * C47471) *
                C15947 +
            ((C153 - C152) * C15949 + (C155 - C154) * C15945 + C664 * C15950 +
             C665 * C47471) *
                C47440) *
               C47422 +
           ((C546 * C15949 + C547 * C15945 + C5526 * C15950 + C5527 * C47471) *
                C15947 +
            ((C539 - C538) * C15949 + (C541 - C540) * C15945 +
             (C960 - C961) * C15950 + (C962 - C963) * C47471) *
                C47440) *
               C47261) *
              C47156 * C657 +
          (((C166 * C15949 + C167 * C15945 + C5192 * C15950 + C5193 * C47471) *
                C15947 +
            ((C157 - C156) * C15949 + (C159 - C158) * C15945 +
             (C666 - C667) * C15950 + (C668 - C669) * C47471) *
                C47440) *
               C47422 +
           ((C777 * C15949 + C778 * C15945 + (C961 - C960) * C15950 +
             (C963 - C962) * C47471) *
                C15947 +
            ((C780 - C779) * C15949 + (C782 - C781) * C15945 +
             (C47376 * C944 - C113 * C935) * C15950 +
             (C47376 * C950 - C113 * C945) * C47471) *
                C47440) *
               C47261) *
              C47156 * C47457)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C47376 * C122 - C113 * C115) * C15949 +
             (C47376 * C136 - C113 * C123) * C15945 + (C4896 - C4897) * C15950 +
             (C4898 - C4899) * C47471) *
                C15947 +
            ((C144 - C145) * C15949 + (C146 - C147) * C15945 + C4900 * C15950 +
             C4901 * C47471) *
                C47440) *
               C2276 +
           (((C113 * C481 - C47376 * C491) * C15949 +
             (C113 * C492 - C47376 * C511) * C15945 + (C5518 - C5519) * C15950 +
             (C5520 - C5521) * C47471) *
                C15947 +
            ((C522 - C523) * C15949 + (C524 - C525) * C15945 + C5522 * C15950 +
             C5523 * C47471) *
                C47440) *
               C2277 +
           (((C47376 * C497 - C113 * C484) * C15949 +
             (C47376 * C514 - C113 * C498) * C15945 + (C5930 - C5931) * C15950 +
             (C5932 - C5933) * C47471) *
                C15947 +
            ((C530 - C531) * C15949 + (C532 - C533) * C15945 + C7000 * C15950 +
             C7001 * C47471) *
                C47440) *
               C2278 +
           (((C113 * C1996 - C47376 * C2002) * C15949 +
             (C113 * C2003 - C47376 * C2014) * C15945 +
             (C7276 - C7277) * C15950 + (C7278 - C7279) * C47471) *
                C15947 +
            ((C2285 - C2286) * C15949 + (C2287 - C2288) * C15945 +
             (C7134 - C7135) * C15950 + (C7136 - C7137) * C47471) *
                C47440) *
               C47469) *
              C47156 * C47407 +
          ((((C145 - C144) * C15949 + (C147 - C146) * C15945 + C4906 * C15950 +
             C4907 * C47471) *
                C15947 +
            ((C149 - C148) * C15949 + (C151 - C150) * C15945 + C359 * C15950 +
             C360 * C47471) *
                C47440) *
               C2276 +
           (((C523 - C522) * C15949 + (C525 - C524) * C15945 + C5524 * C15950 +
             C5525 * C47471) *
                C15947 +
            ((C527 - C526) * C15949 + (C529 - C528) * C15945 + C964 * C15950 +
             C965 * C47471) *
                C47440) *
               C2277 +
           (((C531 - C530) * C15949 + (C533 - C532) * C15945 + C7002 * C15950 +
             C7003 * C47471) *
                C15947 +
            ((C535 - C534) * C15949 + (C537 - C536) * C15945 +
             (C2175 - C2176) * C15950 + (C2177 - C2178) * C47471) *
                C47440) *
               C2278 +
           (((C2286 - C2285) * C15949 + (C2288 - C2287) * C15945 +
             (C7135 - C7134) * C15950 + (C7137 - C7136) * C47471) *
                C15947 +
            ((C2290 - C2289) * C15949 + (C2292 - C2291) * C15945 +
             (C47376 * C2397 - C113 * C2392) * C15950 +
             (C47376 * C2401 - C113 * C2398) * C47471) *
                C47440) *
               C47469) *
              C47156 * C47139)) /
            (p * q * std::sqrt(p + q));
    d2ee[89] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C47376 * C122 - C113 * C115) * C15949 +
             (C47376 * C136 - C113 * C123) * C15945 + (C4896 - C4897) * C15950 +
             (C4898 - C4899) * C47471) *
                C15947 +
            ((C144 - C145) * C15949 + (C146 - C147) * C15945 + C4900 * C15950 +
             C4901 * C47471) *
                C47440) *
               C47174 * C47492 +
           (((C4897 - C4896) * C15949 + (C4899 - C4898) * C15945 +
             (C4902 - C4903) * C15950 + (C4904 - C4905) * C47471) *
                C15947 +
            (C4906 * C15949 + C4907 * C15945 + C4908 * C15950 +
             C4909 * C47471) *
                C47440) *
               C47174 * C47480 +
           (((C4903 - C4902) * C15949 + (C4905 - C4904) * C15945 +
             (C5764 - C5765) * C15950 + (C5766 - C5767) * C47471) *
                C15947 +
            (C4910 * C15949 + C4911 * C15945 + C6076 * C15950 +
             C6077 * C47471) *
                C47440) *
               C47174 * C47453) *
              C291 +
          ((((C145 - C144) * C15949 + (C147 - C146) * C15945 + C4906 * C15950 +
             C4907 * C47471) *
                C15947 +
            ((C149 - C148) * C15949 + (C151 - C150) * C15945 + C359 * C15950 +
             C360 * C47471) *
                C47440) *
               C47174 * C47492 +
           ((C4900 * C15949 + C4901 * C15945 + C4910 * C15950 +
             C4911 * C47471) *
                C15947 +
            (C4912 * C15949 + C4913 * C15945 + C361 * C15950 + C362 * C47471) *
                C47440) *
               C47174 * C47480 +
           ((C4908 * C15949 + C4909 * C15945 + C6078 * C15950 +
             C6079 * C47471) *
                C15947 +
            (C4914 * C15949 + C4915 * C15945 + (C1435 - C1436) * C15950 +
             (C1437 - C1438) * C47471) *
                C47440) *
               C47174 * C47453) *
              C292 +
          (((C164 * C15949 + C165 * C15945 + C4912 * C15950 + C4913 * C47471) *
                C15947 +
            ((C153 - C152) * C15949 + (C155 - C154) * C15945 + C664 * C15950 +
             C665 * C47471) *
                C47440) *
               C47174 * C47492 +
           ((C359 * C15949 + C360 * C15945 + C4914 * C15950 + C4915 * C47471) *
                C15947 +
            (C5192 * C15949 + C5193 * C15945 + (C355 - C356) * C15950 +
             (C357 - C358) * C47471) *
                C47440) *
               C47174 * C47480 +
           ((C361 * C15949 + C362 * C15945 + (C1436 - C1435) * C15950 +
             (C1438 - C1437) * C47471) *
                C15947 +
            ((C356 - C355) * C15949 + (C358 - C357) * C15945 +
             (C47376 * C1427 - C113 * C1426) * C15950 +
             (C47376 * C1429 - C113 * C1428) * C47471) *
                C47440) *
               C47174 * C47453) *
              C47447)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C47376 * C122 - C113 * C115) * C15949 +
            (C47376 * C136 - C113 * C123) * C15945 + (C4896 - C4897) * C15950 +
            (C4898 - C4899) * C47471) *
               C15947 +
           ((C144 - C145) * C15949 + (C146 - C147) * C15945 + C4900 * C15950 +
            C4901 * C47471) *
               C47440) *
              C47174 * C47156 * C108 +
          (((C145 - C144) * C15949 + (C147 - C146) * C15945 + C4906 * C15950 +
            C4907 * C47471) *
               C15947 +
           ((C149 - C148) * C15949 + (C151 - C150) * C15945 + C359 * C15950 +
            C360 * C47471) *
               C47440) *
              C47174 * C47156 * C109 +
          ((C164 * C15949 + C165 * C15945 + C4912 * C15950 + C4913 * C47471) *
               C15947 +
           ((C153 - C152) * C15949 + (C155 - C154) * C15945 + C664 * C15950 +
            C665 * C47471) *
               C47440) *
              C47174 * C47156 * C110 +
          ((C166 * C15949 + C167 * C15945 + C5192 * C15950 + C5193 * C47471) *
               C15947 +
           ((C157 - C156) * C15949 + (C159 - C158) * C15945 +
            (C666 - C667) * C15950 + (C668 - C669) * C47471) *
               C47440) *
              C47174 * C47156 * C111 +
          ((C168 * C15949 + C169 * C15945 + (C667 - C666) * C15950 +
            (C669 - C668) * C47471) *
               C15947 +
           ((C161 - C160) * C15949 + (C163 - C162) * C15945 +
            (C47376 * C660 - C113 * C659) * C15950 +
            (C47376 * C662 - C113 * C661) * C47471) *
               C47440) *
              C47174 * C47156 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C47376 * C122 - C113 * C115) * C15949 +
             (C47376 * C136 - C113 * C123) * C15945 + (C4896 - C4897) * C15950 +
             (C4898 - C4899) * C47471) *
                C15947 +
            ((C144 - C145) * C15949 + (C146 - C147) * C15945 + C4900 * C15950 +
             C4901 * C47471) *
                C47440) *
               C47174 * C1078 +
           (((C4897 - C4896) * C15949 + (C4899 - C4898) * C15945 +
             (C4902 - C4903) * C15950 + (C4904 - C4905) * C47471) *
                C15947 +
            (C4906 * C15949 + C4907 * C15945 + C4908 * C15950 +
             C4909 * C47471) *
                C47440) *
               C47174 * C1079 +
           (((C4903 - C4902) * C15949 + (C4905 - C4904) * C15945 +
             (C5764 - C5765) * C15950 + (C5766 - C5767) * C47471) *
                C15947 +
            (C4910 * C15949 + C4911 * C15945 + C6076 * C15950 +
             C6077 * C47471) *
                C47440) *
               C47174 * C47453) *
              C47489 +
          ((((C145 - C144) * C15949 + (C147 - C146) * C15945 + C4906 * C15950 +
             C4907 * C47471) *
                C15947 +
            ((C149 - C148) * C15949 + (C151 - C150) * C15945 + C359 * C15950 +
             C360 * C47471) *
                C47440) *
               C47174 * C1078 +
           ((C4900 * C15949 + C4901 * C15945 + C4910 * C15950 +
             C4911 * C47471) *
                C15947 +
            (C4912 * C15949 + C4913 * C15945 + C361 * C15950 + C362 * C47471) *
                C47440) *
               C47174 * C1079 +
           ((C4908 * C15949 + C4909 * C15945 + C6078 * C15950 +
             C6079 * C47471) *
                C15947 +
            (C4914 * C15949 + C4915 * C15945 + (C1435 - C1436) * C15950 +
             (C1437 - C1438) * C47471) *
                C47440) *
               C47174 * C47453) *
              C47476 +
          (((C164 * C15949 + C165 * C15945 + C4912 * C15950 + C4913 * C47471) *
                C15947 +
            ((C153 - C152) * C15949 + (C155 - C154) * C15945 + C664 * C15950 +
             C665 * C47471) *
                C47440) *
               C47174 * C1078 +
           ((C359 * C15949 + C360 * C15945 + C4914 * C15950 + C4915 * C47471) *
                C15947 +
            (C5192 * C15949 + C5193 * C15945 + (C355 - C356) * C15950 +
             (C357 - C358) * C47471) *
                C47440) *
               C47174 * C1079 +
           ((C361 * C15949 + C362 * C15945 + (C1436 - C1435) * C15950 +
             (C1438 - C1437) * C47471) *
                C15947 +
            ((C356 - C355) * C15949 + (C358 - C357) * C15945 +
             (C47376 * C1427 - C113 * C1426) * C15950 +
             (C47376 * C1429 - C113 * C1428) * C47471) *
                C47440) *
               C47174 * C47453) *
              C47447)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C47376 * C122 - C113 * C115) * C15949 +
            (C47376 * C136 - C113 * C123) * C15945 + (C4896 - C4897) * C15950 +
            (C4898 - C4899) * C47471) *
               C15947 +
           ((C144 - C145) * C15949 + (C146 - C147) * C15945 + C4900 * C15950 +
            C4901 * C47471) *
               C47440) *
              C47174 * C1146 +
          (((C4897 - C4896) * C15949 + (C4899 - C4898) * C15945 +
            (C4902 - C4903) * C15950 + (C4904 - C4905) * C47471) *
               C15947 +
           (C4906 * C15949 + C4907 * C15945 + C4908 * C15950 + C4909 * C47471) *
               C47440) *
              C47174 * C1147 +
          (((C4903 - C4902) * C15949 + (C4905 - C4904) * C15945 +
            (C5764 - C5765) * C15950 + (C5766 - C5767) * C47471) *
               C15947 +
           (C4910 * C15949 + C4911 * C15945 + C6076 * C15950 + C6077 * C47471) *
               C47440) *
              C47174 * C1148 +
          (((C5765 - C5764) * C15949 + (C5767 - C5766) * C15945 +
            (C5768 - C5769) * C15950 + (C5770 - C5771) * C47471) *
               C15947 +
           (C6078 * C15949 + C6079 * C15945 + (C5772 - C5773) * C15950 +
            (C5774 - C5775) * C47471) *
               C47440) *
              C47174 * C1149 +
          (((C5769 - C5768) * C15949 + (C5771 - C5770) * C15945 +
            (C47376 * C5757 - C113 * C5755) * C15950 +
            (C47376 * C5761 - C113 * C5758) * C47471) *
               C15947 +
           ((C5773 - C5772) * C15949 + (C5775 - C5774) * C15945 +
            (C47376 * C5759 - C113 * C5756) * C15950 +
            (C47376 * C5762 - C113 * C5760) * C47471) *
               C47440) *
              C47174 * C1150) *
         C47128) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C47376 * C122 - C113 * C115) * C15949 +
             (C47376 * C136 - C113 * C123) * C15945 + (C4896 - C4897) * C15950 +
             (C4898 - C4899) * C47471) *
                C15947 +
            ((C144 - C145) * C15949 + (C146 - C147) * C15945 + C4900 * C15950 +
             C4901 * C47471) *
                C47440) *
               C1816 +
           (((C113 * C481 - C47376 * C491) * C15949 +
             (C113 * C492 - C47376 * C511) * C15945 + (C5518 - C5519) * C15950 +
             (C5520 - C5521) * C47471) *
                C15947 +
            ((C522 - C523) * C15949 + (C524 - C525) * C15945 + C5522 * C15950 +
             C5523 * C47471) *
                C47440) *
               C1817 +
           (((C47376 * C497 - C113 * C484) * C15949 +
             (C47376 * C514 - C113 * C498) * C15945 + (C5930 - C5931) * C15950 +
             (C5932 - C5933) * C47471) *
                C15947 +
            ((C530 - C531) * C15949 + (C532 - C533) * C15945 + C7000 * C15950 +
             C7001 * C47471) *
                C47440) *
               C47456) *
              C47156 * C47489 +
          ((((C145 - C144) * C15949 + (C147 - C146) * C15945 + C4906 * C15950 +
             C4907 * C47471) *
                C15947 +
            ((C149 - C148) * C15949 + (C151 - C150) * C15945 + C359 * C15950 +
             C360 * C47471) *
                C47440) *
               C1816 +
           (((C523 - C522) * C15949 + (C525 - C524) * C15945 + C5524 * C15950 +
             C5525 * C47471) *
                C15947 +
            ((C527 - C526) * C15949 + (C529 - C528) * C15945 + C964 * C15950 +
             C965 * C47471) *
                C47440) *
               C1817 +
           (((C531 - C530) * C15949 + (C533 - C532) * C15945 + C7002 * C15950 +
             C7003 * C47471) *
                C15947 +
            ((C535 - C534) * C15949 + (C537 - C536) * C15945 +
             (C2175 - C2176) * C15950 + (C2177 - C2178) * C47471) *
                C47440) *
               C47456) *
              C47156 * C47476 +
          (((C164 * C15949 + C165 * C15945 + C4912 * C15950 + C4913 * C47471) *
                C15947 +
            ((C153 - C152) * C15949 + (C155 - C154) * C15945 + C664 * C15950 +
             C665 * C47471) *
                C47440) *
               C1816 +
           ((C546 * C15949 + C547 * C15945 + C5526 * C15950 + C5527 * C47471) *
                C15947 +
            ((C539 - C538) * C15949 + (C541 - C540) * C15945 +
             (C960 - C961) * C15950 + (C962 - C963) * C47471) *
                C47440) *
               C1817 +
           ((C548 * C15949 + C549 * C15945 + (C2176 - C2175) * C15950 +
             (C2178 - C2177) * C47471) *
                C15947 +
            ((C543 - C542) * C15949 + (C545 - C544) * C15945 +
             (C47376 * C2167 - C113 * C2166) * C15950 +
             (C47376 * C2169 - C113 * C2168) * C47471) *
                C47440) *
               C47456) *
              C47156 * C47447)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C47376 * C122 - C113 * C115) * C15949 +
             (C47376 * C136 - C113 * C123) * C15945 + (C4896 - C4897) * C15950 +
             (C4898 - C4899) * C47471) *
                C15947 +
            ((C144 - C145) * C15949 + (C146 - C147) * C15945 + C4900 * C15950 +
             C4901 * C47471) *
                C47440) *
               C1816 +
           (((C113 * C481 - C47376 * C491) * C15949 +
             (C113 * C492 - C47376 * C511) * C15945 + (C5518 - C5519) * C15950 +
             (C5520 - C5521) * C47471) *
                C15947 +
            ((C522 - C523) * C15949 + (C524 - C525) * C15945 + C5522 * C15950 +
             C5523 * C47471) *
                C47440) *
               C1817 +
           (((C47376 * C497 - C113 * C484) * C15949 +
             (C47376 * C514 - C113 * C498) * C15945 + (C5930 - C5931) * C15950 +
             (C5932 - C5933) * C47471) *
                C15947 +
            ((C530 - C531) * C15949 + (C532 - C533) * C15945 + C7000 * C15950 +
             C7001 * C47471) *
                C47440) *
               C47456) *
              C47492 +
          ((((C4897 - C4896) * C15949 + (C4899 - C4898) * C15945 +
             (C4902 - C4903) * C15950 + (C4904 - C4905) * C47471) *
                C15947 +
            (C4906 * C15949 + C4907 * C15945 + C4908 * C15950 +
             C4909 * C47471) *
                C47440) *
               C1816 +
           (((C5519 - C5518) * C15949 + (C5521 - C5520) * C15945 +
             (C5934 - C5935) * C15950 + (C5936 - C5937) * C47471) *
                C15947 +
            (C5524 * C15949 + C5525 * C15945 + C6274 * C15950 +
             C6275 * C47471) *
                C47440) *
               C1817 +
           (((C5931 - C5930) * C15949 + (C5933 - C5932) * C15945 +
             (C5938 - C5939) * C15950 + (C5940 - C5941) * C47471) *
                C15947 +
            (C7002 * C15949 + C7003 * C15945 + (C5942 - C5943) * C15950 +
             (C5944 - C5945) * C47471) *
                C47440) *
               C47456) *
              C47480 +
          ((((C4903 - C4902) * C15949 + (C4905 - C4904) * C15945 +
             (C5764 - C5765) * C15950 + (C5766 - C5767) * C47471) *
                C15947 +
            (C4910 * C15949 + C4911 * C15945 + C6076 * C15950 +
             C6077 * C47471) *
                C47440) *
               C1816 +
           (((C5935 - C5934) * C15949 + (C5937 - C5936) * C15945 +
             (C6420 - C6421) * C15950 + (C6422 - C6423) * C47471) *
                C15947 +
            (C6276 * C15949 + C6277 * C15945 + (C6278 - C6279) * C15950 +
             (C6280 - C6281) * C47471) *
                C47440) *
               C1817 +
           (((C5939 - C5938) * C15949 + (C5941 - C5940) * C15945 +
             (C47376 * C5923 - C113 * C5921) * C15950 +
             (C47376 * C5927 - C113 * C5924) * C47471) *
                C15947 +
            ((C5943 - C5942) * C15949 + (C5945 - C5944) * C15945 +
             (C47376 * C5925 - C113 * C5922) * C15950 +
             (C47376 * C5928 - C113 * C5926) * C47471) *
                C47440) *
               C47456) *
              C47453) *
         C47128) /
            (p * q * std::sqrt(p + q));
    d2ee[90] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C47376 * C122 - C113 * C115) * C15949 +
              (C47376 * C136 - C113 * C123) * C15945 +
              (C4896 - C4897) * C15950 + (C4898 - C4899) * C47471) *
                 C15947 +
             ((C144 - C145) * C15949 + (C146 - C147) * C15945 + C4900 * C15950 +
              C4901 * C47471) *
                 C47440) *
                C3262 +
            (((C113 * C481 - C47376 * C491) * C15949 +
              (C113 * C492 - C47376 * C511) * C15945 +
              (C5518 - C5519) * C15950 + (C5520 - C5521) * C47471) *
                 C15947 +
             ((C522 - C523) * C15949 + (C524 - C525) * C15945 + C5522 * C15950 +
              C5523 * C47471) *
                 C47440) *
                C47261) *
               C47421 +
           ((((C4897 - C4896) * C15949 + (C4899 - C4898) * C15945 +
              (C4902 - C4903) * C15950 + (C4904 - C4905) * C47471) *
                 C15947 +
             (C4906 * C15949 + C4907 * C15945 + C4908 * C15950 +
              C4909 * C47471) *
                 C47440) *
                C3262 +
            (((C5519 - C5518) * C15949 + (C5521 - C5520) * C15945 +
              (C5934 - C5935) * C15950 + (C5936 - C5937) * C47471) *
                 C15947 +
             (C5524 * C15949 + C5525 * C15945 + C6274 * C15950 +
              C6275 * C47471) *
                 C47440) *
                C47261) *
               C47219) *
              C47133 +
          (((((C145 - C144) * C15949 + (C147 - C146) * C15945 + C4906 * C15950 +
              C4907 * C47471) *
                 C15947 +
             ((C149 - C148) * C15949 + (C151 - C150) * C15945 + C359 * C15950 +
              C360 * C47471) *
                 C47440) *
                C3262 +
            (((C523 - C522) * C15949 + (C525 - C524) * C15945 + C5524 * C15950 +
              C5525 * C47471) *
                 C15947 +
             ((C527 - C526) * C15949 + (C529 - C528) * C15945 + C964 * C15950 +
              C965 * C47471) *
                 C47440) *
                C47261) *
               C47421 +
           (((C4900 * C15949 + C4901 * C15945 + C4910 * C15950 +
              C4911 * C47471) *
                 C15947 +
             (C4912 * C15949 + C4913 * C15945 + C361 * C15950 + C362 * C47471) *
                 C47440) *
                C3262 +
            ((C5522 * C15949 + C5523 * C15945 + C6276 * C15950 +
              C6277 * C47471) *
                 C15947 +
             (C5526 * C15949 + C5527 * C15945 + (C1593 - C1594) * C15950 +
              (C1595 - C1596) * C47471) *
                 C47440) *
                C47261) *
               C47219) *
              C47142 +
          ((((C164 * C15949 + C165 * C15945 + C4912 * C15950 + C4913 * C47471) *
                 C15947 +
             ((C153 - C152) * C15949 + (C155 - C154) * C15945 + C664 * C15950 +
              C665 * C47471) *
                 C47440) *
                C3262 +
            ((C546 * C15949 + C547 * C15945 + C5526 * C15950 + C5527 * C47471) *
                 C15947 +
             ((C539 - C538) * C15949 + (C541 - C540) * C15945 +
              (C960 - C961) * C15950 + (C962 - C963) * C47471) *
                 C47440) *
                C47261) *
               C47421 +
           (((C359 * C15949 + C360 * C15945 + C4914 * C15950 + C4915 * C47471) *
                 C15947 +
             (C5192 * C15949 + C5193 * C15945 + (C355 - C356) * C15950 +
              (C357 - C358) * C47471) *
                 C47440) *
                C3262 +
            ((C964 * C15949 + C965 * C15945 + (C1594 - C1593) * C15950 +
              (C1596 - C1595) * C47471) *
                 C15947 +
             ((C961 - C960) * C15949 + (C963 - C962) * C15945 +
              (C47376 * C1585 - C113 * C1584) * C15950 +
              (C47376 * C1587 - C113 * C1586) * C47471) *
                 C47440) *
                C47261) *
               C47219) *
              C2871)) /
        (p * q * std::sqrt(p + q));
    d2ee[91] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C47376 * C122 - C113 * C115) * C15949 +
              (C47376 * C136 - C113 * C123) * C15945 +
              (C4896 - C4897) * C15950 + (C4898 - C4899) * C47471) *
                 C15947 +
             ((C144 - C145) * C15949 + (C146 - C147) * C15945 + C4900 * C15950 +
              C4901 * C47471) *
                 C47440) *
                C47257 +
            (((C113 * C481 - C47376 * C491) * C15949 +
              (C113 * C492 - C47376 * C511) * C15945 +
              (C5518 - C5519) * C15950 + (C5520 - C5521) * C47471) *
                 C15947 +
             ((C522 - C523) * C15949 + (C524 - C525) * C15945 + C5522 * C15950 +
              C5523 * C47471) *
                 C47440) *
                C47264 +
            (((C47376 * C497 - C113 * C484) * C15949 +
              (C47376 * C514 - C113 * C498) * C15945 +
              (C5930 - C5931) * C15950 + (C5932 - C5933) * C47471) *
                 C15947 +
             ((C530 - C531) * C15949 + (C532 - C533) * C15945 + C7000 * C15950 +
              C7001 * C47471) *
                 C47440) *
                C3770) *
               C47421 +
           ((((C4897 - C4896) * C15949 + (C4899 - C4898) * C15945 +
              (C4902 - C4903) * C15950 + (C4904 - C4905) * C47471) *
                 C15947 +
             (C4906 * C15949 + C4907 * C15945 + C4908 * C15950 +
              C4909 * C47471) *
                 C47440) *
                C47257 +
            (((C5519 - C5518) * C15949 + (C5521 - C5520) * C15945 +
              (C5934 - C5935) * C15950 + (C5936 - C5937) * C47471) *
                 C15947 +
             (C5524 * C15949 + C5525 * C15945 + C6274 * C15950 +
              C6275 * C47471) *
                 C47440) *
                C47264 +
            (((C5931 - C5930) * C15949 + (C5933 - C5932) * C15945 +
              (C5938 - C5939) * C15950 + (C5940 - C5941) * C47471) *
                 C15947 +
             (C7002 * C15949 + C7003 * C15945 + (C5942 - C5943) * C15950 +
              (C5944 - C5945) * C47471) *
                 C47440) *
                C3770) *
               C47219) *
              C2608 +
          (((((C145 - C144) * C15949 + (C147 - C146) * C15945 + C4906 * C15950 +
              C4907 * C47471) *
                 C15947 +
             ((C149 - C148) * C15949 + (C151 - C150) * C15945 + C359 * C15950 +
              C360 * C47471) *
                 C47440) *
                C47257 +
            (((C523 - C522) * C15949 + (C525 - C524) * C15945 + C5524 * C15950 +
              C5525 * C47471) *
                 C15947 +
             ((C527 - C526) * C15949 + (C529 - C528) * C15945 + C964 * C15950 +
              C965 * C47471) *
                 C47440) *
                C47264 +
            (((C531 - C530) * C15949 + (C533 - C532) * C15945 + C7002 * C15950 +
              C7003 * C47471) *
                 C15947 +
             ((C535 - C534) * C15949 + (C537 - C536) * C15945 +
              (C2175 - C2176) * C15950 + (C2177 - C2178) * C47471) *
                 C47440) *
                C3770) *
               C47421 +
           (((C4900 * C15949 + C4901 * C15945 + C4910 * C15950 +
              C4911 * C47471) *
                 C15947 +
             (C4912 * C15949 + C4913 * C15945 + C361 * C15950 + C362 * C47471) *
                 C47440) *
                C47257 +
            ((C5522 * C15949 + C5523 * C15945 + C6276 * C15950 +
              C6277 * C47471) *
                 C15947 +
             (C5526 * C15949 + C5527 * C15945 + (C1593 - C1594) * C15950 +
              (C1595 - C1596) * C47471) *
                 C47440) *
                C47264 +
            ((C7000 * C15949 + C7001 * C15945 + (C5943 - C5942) * C15950 +
              (C5945 - C5944) * C47471) *
                 C15947 +
             ((C2176 - C2175) * C15949 + (C2178 - C2177) * C15945 +
              (C47376 * C1311 - C113 * C1294) * C15950 +
              (C47376 * C1321 - C113 * C1312) * C47471) *
                 C47440) *
                C3770) *
               C47219) *
              C47139)) /
        (p * q * std::sqrt(p + q));
    d2ee[92] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C47376 * C122 - C113 * C115) * C15949 +
              (C47376 * C136 - C113 * C123) * C15945 +
              (C4896 - C4897) * C15950 + (C4898 - C4899) * C47471) *
                 C15947 +
             ((C144 - C145) * C15949 + (C146 - C147) * C15945 + C4900 * C15950 +
              C4901 * C47471) *
                 C47440) *
                C3262 +
            (((C113 * C481 - C47376 * C491) * C15949 +
              (C113 * C492 - C47376 * C511) * C15945 +
              (C5518 - C5519) * C15950 + (C5520 - C5521) * C47471) *
                 C15947 +
             ((C522 - C523) * C15949 + (C524 - C525) * C15945 + C5522 * C15950 +
              C5523 * C47471) *
                 C47440) *
                C47261) *
               C47492 +
           ((((C4897 - C4896) * C15949 + (C4899 - C4898) * C15945 +
              (C4902 - C4903) * C15950 + (C4904 - C4905) * C47471) *
                 C15947 +
             (C4906 * C15949 + C4907 * C15945 + C4908 * C15950 +
              C4909 * C47471) *
                 C47440) *
                C3262 +
            (((C5519 - C5518) * C15949 + (C5521 - C5520) * C15945 +
              (C5934 - C5935) * C15950 + (C5936 - C5937) * C47471) *
                 C15947 +
             (C5524 * C15949 + C5525 * C15945 + C6274 * C15950 +
              C6275 * C47471) *
                 C47440) *
                C47261) *
               C47480 +
           ((((C4903 - C4902) * C15949 + (C4905 - C4904) * C15945 +
              (C5764 - C5765) * C15950 + (C5766 - C5767) * C47471) *
                 C15947 +
             (C4910 * C15949 + C4911 * C15945 + C6076 * C15950 +
              C6077 * C47471) *
                 C47440) *
                C3262 +
            (((C5935 - C5934) * C15949 + (C5937 - C5936) * C15945 +
              (C6420 - C6421) * C15950 + (C6422 - C6423) * C47471) *
                 C15947 +
             (C6276 * C15949 + C6277 * C15945 + (C6278 - C6279) * C15950 +
              (C6280 - C6281) * C47471) *
                 C47440) *
                C47261) *
               C47453) *
              C2608 +
          (((((C145 - C144) * C15949 + (C147 - C146) * C15945 + C4906 * C15950 +
              C4907 * C47471) *
                 C15947 +
             ((C149 - C148) * C15949 + (C151 - C150) * C15945 + C359 * C15950 +
              C360 * C47471) *
                 C47440) *
                C3262 +
            (((C523 - C522) * C15949 + (C525 - C524) * C15945 + C5524 * C15950 +
              C5525 * C47471) *
                 C15947 +
             ((C527 - C526) * C15949 + (C529 - C528) * C15945 + C964 * C15950 +
              C965 * C47471) *
                 C47440) *
                C47261) *
               C47492 +
           (((C4900 * C15949 + C4901 * C15945 + C4910 * C15950 +
              C4911 * C47471) *
                 C15947 +
             (C4912 * C15949 + C4913 * C15945 + C361 * C15950 + C362 * C47471) *
                 C47440) *
                C3262 +
            ((C5522 * C15949 + C5523 * C15945 + C6276 * C15950 +
              C6277 * C47471) *
                 C15947 +
             (C5526 * C15949 + C5527 * C15945 + (C1593 - C1594) * C15950 +
              (C1595 - C1596) * C47471) *
                 C47440) *
                C47261) *
               C47480 +
           (((C4908 * C15949 + C4909 * C15945 + C6078 * C15950 +
              C6079 * C47471) *
                 C15947 +
             (C4914 * C15949 + C4915 * C15945 + (C1435 - C1436) * C15950 +
              (C1437 - C1438) * C47471) *
                 C47440) *
                C3262 +
            ((C6274 * C15949 + C6275 * C15945 + (C6279 - C6278) * C15950 +
              (C6281 - C6280) * C47471) *
                 C15947 +
             ((C1594 - C1593) * C15949 + (C1596 - C1595) * C15945 +
              (C47376 * C1701 - C113 * C1696) * C15950 +
              (C47376 * C1705 - C113 * C1702) * C47471) *
                 C47440) *
                C47261) *
               C47453) *
              C47139)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C47376 * C122 - C113 * C115) * C15949 +
             (C47376 * C136 - C113 * C123) * C15945 + (C4896 - C4897) * C15950 +
             (C4898 - C4899) * C47471) *
                C15947 +
            ((C144 - C145) * C15949 + (C146 - C147) * C15945 + C4900 * C15950 +
             C4901 * C47471) *
                C47440) *
               C3262 +
           (((C113 * C481 - C47376 * C491) * C15949 +
             (C113 * C492 - C47376 * C511) * C15945 + (C5518 - C5519) * C15950 +
             (C5520 - C5521) * C47471) *
                C15947 +
            ((C522 - C523) * C15949 + (C524 - C525) * C15945 + C5522 * C15950 +
             C5523 * C47471) *
                C47440) *
               C47261) *
              C47156 * C47498 +
          ((((C145 - C144) * C15949 + (C147 - C146) * C15945 + C4906 * C15950 +
             C4907 * C47471) *
                C15947 +
            ((C149 - C148) * C15949 + (C151 - C150) * C15945 + C359 * C15950 +
             C360 * C47471) *
                C47440) *
               C3262 +
           (((C523 - C522) * C15949 + (C525 - C524) * C15945 + C5524 * C15950 +
             C5525 * C47471) *
                C15947 +
            ((C527 - C526) * C15949 + (C529 - C528) * C15945 + C964 * C15950 +
             C965 * C47471) *
                C47440) *
               C47261) *
              C47156 * C47491 +
          (((C164 * C15949 + C165 * C15945 + C4912 * C15950 + C4913 * C47471) *
                C15947 +
            ((C153 - C152) * C15949 + (C155 - C154) * C15945 + C664 * C15950 +
             C665 * C47471) *
                C47440) *
               C3262 +
           ((C546 * C15949 + C547 * C15945 + C5526 * C15950 + C5527 * C47471) *
                C15947 +
            ((C539 - C538) * C15949 + (C541 - C540) * C15945 +
             (C960 - C961) * C15950 + (C962 - C963) * C47471) *
                C47440) *
               C47261) *
              C47156 * C47478 +
          (((C166 * C15949 + C167 * C15945 + C5192 * C15950 + C5193 * C47471) *
                C15947 +
            ((C157 - C156) * C15949 + (C159 - C158) * C15945 +
             (C666 - C667) * C15950 + (C668 - C669) * C47471) *
                C47440) *
               C3262 +
           ((C777 * C15949 + C778 * C15945 + (C961 - C960) * C15950 +
             (C963 - C962) * C47471) *
                C15947 +
            ((C780 - C779) * C15949 + (C782 - C781) * C15945 +
             (C47376 * C944 - C113 * C935) * C15950 +
             (C47376 * C950 - C113 * C945) * C47471) *
                C47440) *
               C47261) *
              C47156 * C47457)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C47376 * C122 - C113 * C115) * C15949 +
             (C47376 * C136 - C113 * C123) * C15945 + (C4896 - C4897) * C15950 +
             (C4898 - C4899) * C47471) *
                C15947 +
            ((C144 - C145) * C15949 + (C146 - C147) * C15945 + C4900 * C15950 +
             C4901 * C47471) *
                C47440) *
               C47500 +
           (((C113 * C481 - C47376 * C491) * C15949 +
             (C113 * C492 - C47376 * C511) * C15945 + (C5518 - C5519) * C15950 +
             (C5520 - C5521) * C47471) *
                C15947 +
            ((C522 - C523) * C15949 + (C524 - C525) * C15945 + C5522 * C15950 +
             C5523 * C47471) *
                C47440) *
               C47497 +
           (((C47376 * C497 - C113 * C484) * C15949 +
             (C47376 * C514 - C113 * C498) * C15945 + (C5930 - C5931) * C15950 +
             (C5932 - C5933) * C47471) *
                C15947 +
            ((C530 - C531) * C15949 + (C532 - C533) * C15945 + C7000 * C15950 +
             C7001 * C47471) *
                C47440) *
               C47488 +
           (((C113 * C1996 - C47376 * C2002) * C15949 +
             (C113 * C2003 - C47376 * C2014) * C15945 +
             (C7276 - C7277) * C15950 + (C7278 - C7279) * C47471) *
                C15947 +
            ((C2285 - C2286) * C15949 + (C2287 - C2288) * C15945 +
             (C7134 - C7135) * C15950 + (C7136 - C7137) * C47471) *
                C47440) *
               C47469) *
              C47156 * C2608 +
          ((((C145 - C144) * C15949 + (C147 - C146) * C15945 + C4906 * C15950 +
             C4907 * C47471) *
                C15947 +
            ((C149 - C148) * C15949 + (C151 - C150) * C15945 + C359 * C15950 +
             C360 * C47471) *
                C47440) *
               C47500 +
           (((C523 - C522) * C15949 + (C525 - C524) * C15945 + C5524 * C15950 +
             C5525 * C47471) *
                C15947 +
            ((C527 - C526) * C15949 + (C529 - C528) * C15945 + C964 * C15950 +
             C965 * C47471) *
                C47440) *
               C47497 +
           (((C531 - C530) * C15949 + (C533 - C532) * C15945 + C7002 * C15950 +
             C7003 * C47471) *
                C15947 +
            ((C535 - C534) * C15949 + (C537 - C536) * C15945 +
             (C2175 - C2176) * C15950 + (C2177 - C2178) * C47471) *
                C47440) *
               C47488 +
           (((C2286 - C2285) * C15949 + (C2288 - C2287) * C15945 +
             (C7135 - C7134) * C15950 + (C7137 - C7136) * C47471) *
                C15947 +
            ((C2290 - C2289) * C15949 + (C2292 - C2291) * C15945 +
             (C47376 * C2397 - C113 * C2392) * C15950 +
             (C47376 * C2401 - C113 * C2398) * C47471) *
                C47440) *
               C47469) *
              C47156 * C47139)) /
            (p * q * std::sqrt(p + q));
    d2ee[93] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C47376 * C122 - C113 * C115) * C15949 +
             (C47376 * C136 - C113 * C123) * C15945 + (C4896 - C4897) * C15950 +
             (C4898 - C4899) * C47471) *
                C15947 +
            ((C144 - C145) * C15949 + (C146 - C147) * C15945 + C4900 * C15950 +
             C4901 * C47471) *
                C47440) *
               C47257 +
           (((C113 * C481 - C47376 * C491) * C15949 +
             (C113 * C492 - C47376 * C511) * C15945 + (C5518 - C5519) * C15950 +
             (C5520 - C5521) * C47471) *
                C15947 +
            ((C522 - C523) * C15949 + (C524 - C525) * C15945 + C5522 * C15950 +
             C5523 * C47471) *
                C47440) *
               C47264 +
           (((C47376 * C497 - C113 * C484) * C15949 +
             (C47376 * C514 - C113 * C498) * C15945 + (C5930 - C5931) * C15950 +
             (C5932 - C5933) * C47471) *
                C15947 +
            ((C530 - C531) * C15949 + (C532 - C533) * C15945 + C7000 * C15950 +
             C7001 * C47471) *
                C47440) *
               C3770) *
              C47156 * C47133 +
          ((((C145 - C144) * C15949 + (C147 - C146) * C15945 + C4906 * C15950 +
             C4907 * C47471) *
                C15947 +
            ((C149 - C148) * C15949 + (C151 - C150) * C15945 + C359 * C15950 +
             C360 * C47471) *
                C47440) *
               C47257 +
           (((C523 - C522) * C15949 + (C525 - C524) * C15945 + C5524 * C15950 +
             C5525 * C47471) *
                C15947 +
            ((C527 - C526) * C15949 + (C529 - C528) * C15945 + C964 * C15950 +
             C965 * C47471) *
                C47440) *
               C47264 +
           (((C531 - C530) * C15949 + (C533 - C532) * C15945 + C7002 * C15950 +
             C7003 * C47471) *
                C15947 +
            ((C535 - C534) * C15949 + (C537 - C536) * C15945 +
             (C2175 - C2176) * C15950 + (C2177 - C2178) * C47471) *
                C47440) *
               C3770) *
              C47156 * C47142 +
          (((C164 * C15949 + C165 * C15945 + C4912 * C15950 + C4913 * C47471) *
                C15947 +
            ((C153 - C152) * C15949 + (C155 - C154) * C15945 + C664 * C15950 +
             C665 * C47471) *
                C47440) *
               C47257 +
           ((C546 * C15949 + C547 * C15945 + C5526 * C15950 + C5527 * C47471) *
                C15947 +
            ((C539 - C538) * C15949 + (C541 - C540) * C15945 +
             (C960 - C961) * C15950 + (C962 - C963) * C47471) *
                C47440) *
               C47264 +
           ((C548 * C15949 + C549 * C15945 + (C2176 - C2175) * C15950 +
             (C2178 - C2177) * C47471) *
                C15947 +
            ((C543 - C542) * C15949 + (C545 - C544) * C15945 +
             (C47376 * C2167 - C113 * C2166) * C15950 +
             (C47376 * C2169 - C113 * C2168) * C47471) *
                C47440) *
               C3770) *
              C47156 * C2871)) /
        (p * q * std::sqrt(p + q));
    d2ee[94] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C47376 * C122 - C113 * C115) * C15949 +
             (C47376 * C136 - C113 * C123) * C15945 + (C4896 - C4897) * C15950 +
             (C4898 - C4899) * C47471) *
                C15947 +
            ((C144 - C145) * C15949 + (C146 - C147) * C15945 + C4900 * C15950 +
             C4901 * C47471) *
                C47440) *
               C3262 +
           (((C113 * C481 - C47376 * C491) * C15949 +
             (C113 * C492 - C47376 * C511) * C15945 + (C5518 - C5519) * C15950 +
             (C5520 - C5521) * C47471) *
                C15947 +
            ((C522 - C523) * C15949 + (C524 - C525) * C15945 + C5522 * C15950 +
             C5523 * C47471) *
                C47440) *
               C47261) *
              C47156 * C47498 +
          ((((C145 - C144) * C15949 + (C147 - C146) * C15945 + C4906 * C15950 +
             C4907 * C47471) *
                C15947 +
            ((C149 - C148) * C15949 + (C151 - C150) * C15945 + C359 * C15950 +
             C360 * C47471) *
                C47440) *
               C3262 +
           (((C523 - C522) * C15949 + (C525 - C524) * C15945 + C5524 * C15950 +
             C5525 * C47471) *
                C15947 +
            ((C527 - C526) * C15949 + (C529 - C528) * C15945 + C964 * C15950 +
             C965 * C47471) *
                C47440) *
               C47261) *
              C47156 * C47491 +
          (((C164 * C15949 + C165 * C15945 + C4912 * C15950 + C4913 * C47471) *
                C15947 +
            ((C153 - C152) * C15949 + (C155 - C154) * C15945 + C664 * C15950 +
             C665 * C47471) *
                C47440) *
               C3262 +
           ((C546 * C15949 + C547 * C15945 + C5526 * C15950 + C5527 * C47471) *
                C15947 +
            ((C539 - C538) * C15949 + (C541 - C540) * C15945 +
             (C960 - C961) * C15950 + (C962 - C963) * C47471) *
                C47440) *
               C47261) *
              C47156 * C47478 +
          (((C166 * C15949 + C167 * C15945 + C5192 * C15950 + C5193 * C47471) *
                C15947 +
            ((C157 - C156) * C15949 + (C159 - C158) * C15945 +
             (C666 - C667) * C15950 + (C668 - C669) * C47471) *
                C47440) *
               C3262 +
           ((C777 * C15949 + C778 * C15945 + (C961 - C960) * C15950 +
             (C963 - C962) * C47471) *
                C15947 +
            ((C780 - C779) * C15949 + (C782 - C781) * C15945 +
             (C47376 * C944 - C113 * C935) * C15950 +
             (C47376 * C950 - C113 * C945) * C47471) *
                C47440) *
               C47261) *
              C47156 * C47457)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C47376 * C122 - C113 * C115) * C15949 +
              (C47376 * C136 - C113 * C123) * C15945 +
              (C4896 - C4897) * C15950 + (C4898 - C4899) * C47471) *
                 C15947 +
             ((C144 - C145) * C15949 + (C146 - C147) * C15945 + C4900 * C15950 +
              C4901 * C47471) *
                 C47440) *
                C3262 +
            (((C113 * C481 - C47376 * C491) * C15949 +
              (C113 * C492 - C47376 * C511) * C15945 +
              (C5518 - C5519) * C15950 + (C5520 - C5521) * C47471) *
                 C15947 +
             ((C522 - C523) * C15949 + (C524 - C525) * C15945 + C5522 * C15950 +
              C5523 * C47471) *
                 C47440) *
                C47261) *
               C47492 +
           ((((C4897 - C4896) * C15949 + (C4899 - C4898) * C15945 +
              (C4902 - C4903) * C15950 + (C4904 - C4905) * C47471) *
                 C15947 +
             (C4906 * C15949 + C4907 * C15945 + C4908 * C15950 +
              C4909 * C47471) *
                 C47440) *
                C3262 +
            (((C5519 - C5518) * C15949 + (C5521 - C5520) * C15945 +
              (C5934 - C5935) * C15950 + (C5936 - C5937) * C47471) *
                 C15947 +
             (C5524 * C15949 + C5525 * C15945 + C6274 * C15950 +
              C6275 * C47471) *
                 C47440) *
                C47261) *
               C47480 +
           ((((C4903 - C4902) * C15949 + (C4905 - C4904) * C15945 +
              (C5764 - C5765) * C15950 + (C5766 - C5767) * C47471) *
                 C15947 +
             (C4910 * C15949 + C4911 * C15945 + C6076 * C15950 +
              C6077 * C47471) *
                 C47440) *
                C3262 +
            (((C5935 - C5934) * C15949 + (C5937 - C5936) * C15945 +
              (C6420 - C6421) * C15950 + (C6422 - C6423) * C47471) *
                 C15947 +
             (C6276 * C15949 + C6277 * C15945 + (C6278 - C6279) * C15950 +
              (C6280 - C6281) * C47471) *
                 C47440) *
                C47261) *
               C47453) *
              C2608 +
          (((((C145 - C144) * C15949 + (C147 - C146) * C15945 + C4906 * C15950 +
              C4907 * C47471) *
                 C15947 +
             ((C149 - C148) * C15949 + (C151 - C150) * C15945 + C359 * C15950 +
              C360 * C47471) *
                 C47440) *
                C3262 +
            (((C523 - C522) * C15949 + (C525 - C524) * C15945 + C5524 * C15950 +
              C5525 * C47471) *
                 C15947 +
             ((C527 - C526) * C15949 + (C529 - C528) * C15945 + C964 * C15950 +
              C965 * C47471) *
                 C47440) *
                C47261) *
               C47492 +
           (((C4900 * C15949 + C4901 * C15945 + C4910 * C15950 +
              C4911 * C47471) *
                 C15947 +
             (C4912 * C15949 + C4913 * C15945 + C361 * C15950 + C362 * C47471) *
                 C47440) *
                C3262 +
            ((C5522 * C15949 + C5523 * C15945 + C6276 * C15950 +
              C6277 * C47471) *
                 C15947 +
             (C5526 * C15949 + C5527 * C15945 + (C1593 - C1594) * C15950 +
              (C1595 - C1596) * C47471) *
                 C47440) *
                C47261) *
               C47480 +
           (((C4908 * C15949 + C4909 * C15945 + C6078 * C15950 +
              C6079 * C47471) *
                 C15947 +
             (C4914 * C15949 + C4915 * C15945 + (C1435 - C1436) * C15950 +
              (C1437 - C1438) * C47471) *
                 C47440) *
                C3262 +
            ((C6274 * C15949 + C6275 * C15945 + (C6279 - C6278) * C15950 +
              (C6281 - C6280) * C47471) *
                 C15947 +
             ((C1594 - C1593) * C15949 + (C1596 - C1595) * C15945 +
              (C47376 * C1701 - C113 * C1696) * C15950 +
              (C47376 * C1705 - C113 * C1702) * C47471) *
                 C47440) *
                C47261) *
               C47453) *
              C47139)) /
            (p * q * std::sqrt(p + q));
    d2ee[95] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C47376 * C122 - C113 * C115) * C15949 +
             (C47376 * C136 - C113 * C123) * C15945 + (C4896 - C4897) * C15950 +
             (C4898 - C4899) * C47471) *
                C15947 +
            ((C144 - C145) * C15949 + (C146 - C147) * C15945 + C4900 * C15950 +
             C4901 * C47471) *
                C47440) *
               C47174 * C47421 +
           (((C4897 - C4896) * C15949 + (C4899 - C4898) * C15945 +
             (C4902 - C4903) * C15950 + (C4904 - C4905) * C47471) *
                C15947 +
            (C4906 * C15949 + C4907 * C15945 + C4908 * C15950 +
             C4909 * C47471) *
                C47440) *
               C47174 * C47219) *
              C655 +
          ((((C145 - C144) * C15949 + (C147 - C146) * C15945 + C4906 * C15950 +
             C4907 * C47471) *
                C15947 +
            ((C149 - C148) * C15949 + (C151 - C150) * C15945 + C359 * C15950 +
             C360 * C47471) *
                C47440) *
               C47174 * C47421 +
           ((C4900 * C15949 + C4901 * C15945 + C4910 * C15950 +
             C4911 * C47471) *
                C15947 +
            (C4912 * C15949 + C4913 * C15945 + C361 * C15950 + C362 * C47471) *
                C47440) *
               C47174 * C47219) *
              C656 +
          (((C164 * C15949 + C165 * C15945 + C4912 * C15950 + C4913 * C47471) *
                C15947 +
            ((C153 - C152) * C15949 + (C155 - C154) * C15945 + C664 * C15950 +
             C665 * C47471) *
                C47440) *
               C47174 * C47421 +
           ((C359 * C15949 + C360 * C15945 + C4914 * C15950 + C4915 * C47471) *
                C15947 +
            (C5192 * C15949 + C5193 * C15945 + (C355 - C356) * C15950 +
             (C357 - C358) * C47471) *
                C47440) *
               C47174 * C47219) *
              C657 +
          (((C166 * C15949 + C167 * C15945 + C5192 * C15950 + C5193 * C47471) *
                C15947 +
            ((C157 - C156) * C15949 + (C159 - C158) * C15945 +
             (C666 - C667) * C15950 + (C668 - C669) * C47471) *
                C47440) *
               C47174 * C47421 +
           ((C664 * C15949 + C665 * C15945 + (C356 - C355) * C15950 +
             (C358 - C357) * C47471) *
                C15947 +
            ((C667 - C666) * C15949 + (C669 - C668) * C15945 +
             (C47376 * C322 - C113 * C303) * C15950 +
             (C47376 * C333 - C113 * C323) * C47471) *
                C47440) *
               C47174 * C47219) *
              C47457)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C47376 * C122 - C113 * C115) * C15949 +
             (C47376 * C136 - C113 * C123) * C15945 + (C4896 - C4897) * C15950 +
             (C4898 - C4899) * C47471) *
                C15947 +
            ((C144 - C145) * C15949 + (C146 - C147) * C15945 + C4900 * C15950 +
             C4901 * C47471) *
                C47440) *
               C47174 * C1420 +
           (((C4897 - C4896) * C15949 + (C4899 - C4898) * C15945 +
             (C4902 - C4903) * C15950 + (C4904 - C4905) * C47471) *
                C15947 +
            (C4906 * C15949 + C4907 * C15945 + C4908 * C15950 +
             C4909 * C47471) *
                C47440) *
               C47174 * C1421 +
           (((C4903 - C4902) * C15949 + (C4905 - C4904) * C15945 +
             (C5764 - C5765) * C15950 + (C5766 - C5767) * C47471) *
                C15947 +
            (C4910 * C15949 + C4911 * C15945 + C6076 * C15950 +
             C6077 * C47471) *
                C47440) *
               C47174 * C1422 +
           (((C5765 - C5764) * C15949 + (C5767 - C5766) * C15945 +
             (C5768 - C5769) * C15950 + (C5770 - C5771) * C47471) *
                C15947 +
            (C6078 * C15949 + C6079 * C15945 + (C5772 - C5773) * C15950 +
             (C5774 - C5775) * C47471) *
                C47440) *
               C47174 * C47463) *
              C47407 +
          ((((C145 - C144) * C15949 + (C147 - C146) * C15945 + C4906 * C15950 +
             C4907 * C47471) *
                C15947 +
            ((C149 - C148) * C15949 + (C151 - C150) * C15945 + C359 * C15950 +
             C360 * C47471) *
                C47440) *
               C47174 * C1420 +
           ((C4900 * C15949 + C4901 * C15945 + C4910 * C15950 +
             C4911 * C47471) *
                C15947 +
            (C4912 * C15949 + C4913 * C15945 + C361 * C15950 + C362 * C47471) *
                C47440) *
               C47174 * C1421 +
           ((C4908 * C15949 + C4909 * C15945 + C6078 * C15950 +
             C6079 * C47471) *
                C15947 +
            (C4914 * C15949 + C4915 * C15945 + (C1435 - C1436) * C15950 +
             (C1437 - C1438) * C47471) *
                C47440) *
               C47174 * C1422 +
           ((C6076 * C15949 + C6077 * C15945 + (C5773 - C5772) * C15950 +
             (C5775 - C5774) * C47471) *
                C15947 +
            ((C1436 - C1435) * C15949 + (C1438 - C1437) * C15945 +
             (C47376 * C1168 - C113 * C1157) * C15950 +
             (C47376 * C1175 - C113 * C1169) * C47471) *
                C47440) *
               C47174 * C47463) *
              C47139)) /
            (p * q * std::sqrt(p + q));
    d2ee[96] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C47376 * C122 - C113 * C115) * C15949 +
              (C47376 * C136 - C113 * C123) * C15945 +
              (C4896 - C4897) * C15950 + (C4898 - C4899) * C47471) *
                 C15947 +
             ((C144 - C145) * C15949 + (C146 - C147) * C15945 + C4900 * C15950 +
              C4901 * C47471) *
                 C47440) *
                C47422 +
            (((C113 * C481 - C47376 * C491) * C15949 +
              (C113 * C492 - C47376 * C511) * C15945 +
              (C5518 - C5519) * C15950 + (C5520 - C5521) * C47471) *
                 C15947 +
             ((C522 - C523) * C15949 + (C524 - C525) * C15945 + C5522 * C15950 +
              C5523 * C47471) *
                 C47440) *
                C47261) *
               C47421 +
           ((((C4897 - C4896) * C15949 + (C4899 - C4898) * C15945 +
              (C4902 - C4903) * C15950 + (C4904 - C4905) * C47471) *
                 C15947 +
             (C4906 * C15949 + C4907 * C15945 + C4908 * C15950 +
              C4909 * C47471) *
                 C47440) *
                C47422 +
            (((C5519 - C5518) * C15949 + (C5521 - C5520) * C15945 +
              (C5934 - C5935) * C15950 + (C5936 - C5937) * C47471) *
                 C15947 +
             (C5524 * C15949 + C5525 * C15945 + C6274 * C15950 +
              C6275 * C47471) *
                 C47440) *
                C47261) *
               C47219) *
              C291 +
          (((((C145 - C144) * C15949 + (C147 - C146) * C15945 + C4906 * C15950 +
              C4907 * C47471) *
                 C15947 +
             ((C149 - C148) * C15949 + (C151 - C150) * C15945 + C359 * C15950 +
              C360 * C47471) *
                 C47440) *
                C47422 +
            (((C523 - C522) * C15949 + (C525 - C524) * C15945 + C5524 * C15950 +
              C5525 * C47471) *
                 C15947 +
             ((C527 - C526) * C15949 + (C529 - C528) * C15945 + C964 * C15950 +
              C965 * C47471) *
                 C47440) *
                C47261) *
               C47421 +
           (((C4900 * C15949 + C4901 * C15945 + C4910 * C15950 +
              C4911 * C47471) *
                 C15947 +
             (C4912 * C15949 + C4913 * C15945 + C361 * C15950 + C362 * C47471) *
                 C47440) *
                C47422 +
            ((C5522 * C15949 + C5523 * C15945 + C6276 * C15950 +
              C6277 * C47471) *
                 C15947 +
             (C5526 * C15949 + C5527 * C15945 + (C1593 - C1594) * C15950 +
              (C1595 - C1596) * C47471) *
                 C47440) *
                C47261) *
               C47219) *
              C292 +
          ((((C164 * C15949 + C165 * C15945 + C4912 * C15950 + C4913 * C47471) *
                 C15947 +
             ((C153 - C152) * C15949 + (C155 - C154) * C15945 + C664 * C15950 +
              C665 * C47471) *
                 C47440) *
                C47422 +
            ((C546 * C15949 + C547 * C15945 + C5526 * C15950 + C5527 * C47471) *
                 C15947 +
             ((C539 - C538) * C15949 + (C541 - C540) * C15945 +
              (C960 - C961) * C15950 + (C962 - C963) * C47471) *
                 C47440) *
                C47261) *
               C47421 +
           (((C359 * C15949 + C360 * C15945 + C4914 * C15950 + C4915 * C47471) *
                 C15947 +
             (C5192 * C15949 + C5193 * C15945 + (C355 - C356) * C15950 +
              (C357 - C358) * C47471) *
                 C47440) *
                C47422 +
            ((C964 * C15949 + C965 * C15945 + (C1594 - C1593) * C15950 +
              (C1596 - C1595) * C47471) *
                 C15947 +
             ((C961 - C960) * C15949 + (C963 - C962) * C15945 +
              (C47376 * C1585 - C113 * C1584) * C15950 +
              (C47376 * C1587 - C113 * C1586) * C47471) *
                 C47440) *
                C47261) *
               C47219) *
              C47447)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C47376 * C122 - C113 * C115) * C15949 +
             (C47376 * C136 - C113 * C123) * C15945 + (C4896 - C4897) * C15950 +
             (C4898 - C4899) * C47471) *
                C15947 +
            ((C144 - C145) * C15949 + (C146 - C147) * C15945 + C4900 * C15950 +
             C4901 * C47471) *
                C47440) *
               C47422 +
           (((C113 * C481 - C47376 * C491) * C15949 +
             (C113 * C492 - C47376 * C511) * C15945 + (C5518 - C5519) * C15950 +
             (C5520 - C5521) * C47471) *
                C15947 +
            ((C522 - C523) * C15949 + (C524 - C525) * C15945 + C5522 * C15950 +
             C5523 * C47471) *
                C47440) *
               C47261) *
              C1420 +
          ((((C4897 - C4896) * C15949 + (C4899 - C4898) * C15945 +
             (C4902 - C4903) * C15950 + (C4904 - C4905) * C47471) *
                C15947 +
            (C4906 * C15949 + C4907 * C15945 + C4908 * C15950 +
             C4909 * C47471) *
                C47440) *
               C47422 +
           (((C5519 - C5518) * C15949 + (C5521 - C5520) * C15945 +
             (C5934 - C5935) * C15950 + (C5936 - C5937) * C47471) *
                C15947 +
            (C5524 * C15949 + C5525 * C15945 + C6274 * C15950 +
             C6275 * C47471) *
                C47440) *
               C47261) *
              C1421 +
          ((((C4903 - C4902) * C15949 + (C4905 - C4904) * C15945 +
             (C5764 - C5765) * C15950 + (C5766 - C5767) * C47471) *
                C15947 +
            (C4910 * C15949 + C4911 * C15945 + C6076 * C15950 +
             C6077 * C47471) *
                C47440) *
               C47422 +
           (((C5935 - C5934) * C15949 + (C5937 - C5936) * C15945 +
             (C6420 - C6421) * C15950 + (C6422 - C6423) * C47471) *
                C15947 +
            (C6276 * C15949 + C6277 * C15945 + (C6278 - C6279) * C15950 +
             (C6280 - C6281) * C47471) *
                C47440) *
               C47261) *
              C1422 +
          ((((C5765 - C5764) * C15949 + (C5767 - C5766) * C15945 +
             (C5768 - C5769) * C15950 + (C5770 - C5771) * C47471) *
                C15947 +
            (C6078 * C15949 + C6079 * C15945 + (C5772 - C5773) * C15950 +
             (C5774 - C5775) * C47471) *
                C47440) *
               C47422 +
           (((C6421 - C6420) * C15949 + (C6423 - C6422) * C15945 +
             (C47376 * C6413 - C113 * C6411) * C15950 +
             (C47376 * C6417 - C113 * C6414) * C47471) *
                C15947 +
            ((C6279 - C6278) * C15949 + (C6281 - C6280) * C15945 +
             (C47376 * C6415 - C113 * C6412) * C15950 +
             (C47376 * C6418 - C113 * C6416) * C47471) *
                C47440) *
               C47261) *
              C47463) *
         C47128) /
            (p * q * std::sqrt(p + q));
    d2ee[97] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C47376 * C122 - C113 * C115) * C15949 +
             (C47376 * C136 - C113 * C123) * C15945 + (C4896 - C4897) * C15950 +
             (C4898 - C4899) * C47471) *
                C15947 +
            ((C144 - C145) * C15949 + (C146 - C147) * C15945 + C4900 * C15950 +
             C4901 * C47471) *
                C47440) *
               C47174 * C47492 +
           (((C4897 - C4896) * C15949 + (C4899 - C4898) * C15945 +
             (C4902 - C4903) * C15950 + (C4904 - C4905) * C47471) *
                C15947 +
            (C4906 * C15949 + C4907 * C15945 + C4908 * C15950 +
             C4909 * C47471) *
                C47440) *
               C47174 * C47480 +
           (((C4903 - C4902) * C15949 + (C4905 - C4904) * C15945 +
             (C5764 - C5765) * C15950 + (C5766 - C5767) * C47471) *
                C15947 +
            (C4910 * C15949 + C4911 * C15945 + C6076 * C15950 +
             C6077 * C47471) *
                C47440) *
               C47174 * C47453) *
              C291 +
          ((((C145 - C144) * C15949 + (C147 - C146) * C15945 + C4906 * C15950 +
             C4907 * C47471) *
                C15947 +
            ((C149 - C148) * C15949 + (C151 - C150) * C15945 + C359 * C15950 +
             C360 * C47471) *
                C47440) *
               C47174 * C47492 +
           ((C4900 * C15949 + C4901 * C15945 + C4910 * C15950 +
             C4911 * C47471) *
                C15947 +
            (C4912 * C15949 + C4913 * C15945 + C361 * C15950 + C362 * C47471) *
                C47440) *
               C47174 * C47480 +
           ((C4908 * C15949 + C4909 * C15945 + C6078 * C15950 +
             C6079 * C47471) *
                C15947 +
            (C4914 * C15949 + C4915 * C15945 + (C1435 - C1436) * C15950 +
             (C1437 - C1438) * C47471) *
                C47440) *
               C47174 * C47453) *
              C292 +
          (((C164 * C15949 + C165 * C15945 + C4912 * C15950 + C4913 * C47471) *
                C15947 +
            ((C153 - C152) * C15949 + (C155 - C154) * C15945 + C664 * C15950 +
             C665 * C47471) *
                C47440) *
               C47174 * C47492 +
           ((C359 * C15949 + C360 * C15945 + C4914 * C15950 + C4915 * C47471) *
                C15947 +
            (C5192 * C15949 + C5193 * C15945 + (C355 - C356) * C15950 +
             (C357 - C358) * C47471) *
                C47440) *
               C47174 * C47480 +
           ((C361 * C15949 + C362 * C15945 + (C1436 - C1435) * C15950 +
             (C1438 - C1437) * C47471) *
                C15947 +
            ((C356 - C355) * C15949 + (C358 - C357) * C15945 +
             (C47376 * C1427 - C113 * C1426) * C15950 +
             (C47376 * C1429 - C113 * C1428) * C47471) *
                C47440) *
               C47174 * C47453) *
              C47447)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C47376 * C122 - C113 * C115) * C15949 +
            (C47376 * C136 - C113 * C123) * C15945 + (C4896 - C4897) * C15950 +
            (C4898 - C4899) * C47471) *
               C15947 +
           ((C144 - C145) * C15949 + (C146 - C147) * C15945 + C4900 * C15950 +
            C4901 * C47471) *
               C47440) *
              C47174 * C47156 * C108 +
          (((C145 - C144) * C15949 + (C147 - C146) * C15945 + C4906 * C15950 +
            C4907 * C47471) *
               C15947 +
           ((C149 - C148) * C15949 + (C151 - C150) * C15945 + C359 * C15950 +
            C360 * C47471) *
               C47440) *
              C47174 * C47156 * C109 +
          ((C164 * C15949 + C165 * C15945 + C4912 * C15950 + C4913 * C47471) *
               C15947 +
           ((C153 - C152) * C15949 + (C155 - C154) * C15945 + C664 * C15950 +
            C665 * C47471) *
               C47440) *
              C47174 * C47156 * C110 +
          ((C166 * C15949 + C167 * C15945 + C5192 * C15950 + C5193 * C47471) *
               C15947 +
           ((C157 - C156) * C15949 + (C159 - C158) * C15945 +
            (C666 - C667) * C15950 + (C668 - C669) * C47471) *
               C47440) *
              C47174 * C47156 * C111 +
          ((C168 * C15949 + C169 * C15945 + (C667 - C666) * C15950 +
            (C669 - C668) * C47471) *
               C15947 +
           ((C161 - C160) * C15949 + (C163 - C162) * C15945 +
            (C47376 * C660 - C113 * C659) * C15950 +
            (C47376 * C662 - C113 * C661) * C47471) *
               C47440) *
              C47174 * C47156 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C47376 * C122 - C113 * C115) * C15949 +
             (C47376 * C136 - C113 * C123) * C15945 + (C4896 - C4897) * C15950 +
             (C4898 - C4899) * C47471) *
                C15947 +
            ((C144 - C145) * C15949 + (C146 - C147) * C15945 + C4900 * C15950 +
             C4901 * C47471) *
                C47440) *
               C47493 +
           (((C113 * C481 - C47376 * C491) * C15949 +
             (C113 * C492 - C47376 * C511) * C15945 + (C5518 - C5519) * C15950 +
             (C5520 - C5521) * C47471) *
                C15947 +
            ((C522 - C523) * C15949 + (C524 - C525) * C15945 + C5522 * C15950 +
             C5523 * C47471) *
                C47440) *
               C47482 +
           (((C47376 * C497 - C113 * C484) * C15949 +
             (C47376 * C514 - C113 * C498) * C15945 + (C5930 - C5931) * C15950 +
             (C5932 - C5933) * C47471) *
                C15947 +
            ((C530 - C531) * C15949 + (C532 - C533) * C15945 + C7000 * C15950 +
             C7001 * C47471) *
                C47440) *
               C47456) *
              C47156 * C291 +
          ((((C145 - C144) * C15949 + (C147 - C146) * C15945 + C4906 * C15950 +
             C4907 * C47471) *
                C15947 +
            ((C149 - C148) * C15949 + (C151 - C150) * C15945 + C359 * C15950 +
             C360 * C47471) *
                C47440) *
               C47493 +
           (((C523 - C522) * C15949 + (C525 - C524) * C15945 + C5524 * C15950 +
             C5525 * C47471) *
                C15947 +
            ((C527 - C526) * C15949 + (C529 - C528) * C15945 + C964 * C15950 +
             C965 * C47471) *
                C47440) *
               C47482 +
           (((C531 - C530) * C15949 + (C533 - C532) * C15945 + C7002 * C15950 +
             C7003 * C47471) *
                C15947 +
            ((C535 - C534) * C15949 + (C537 - C536) * C15945 +
             (C2175 - C2176) * C15950 + (C2177 - C2178) * C47471) *
                C47440) *
               C47456) *
              C47156 * C292 +
          (((C164 * C15949 + C165 * C15945 + C4912 * C15950 + C4913 * C47471) *
                C15947 +
            ((C153 - C152) * C15949 + (C155 - C154) * C15945 + C664 * C15950 +
             C665 * C47471) *
                C47440) *
               C47493 +
           ((C546 * C15949 + C547 * C15945 + C5526 * C15950 + C5527 * C47471) *
                C15947 +
            ((C539 - C538) * C15949 + (C541 - C540) * C15945 +
             (C960 - C961) * C15950 + (C962 - C963) * C47471) *
                C47440) *
               C47482 +
           ((C548 * C15949 + C549 * C15945 + (C2176 - C2175) * C15950 +
             (C2178 - C2177) * C47471) *
                C15947 +
            ((C543 - C542) * C15949 + (C545 - C544) * C15945 +
             (C47376 * C2167 - C113 * C2166) * C15950 +
             (C47376 * C2169 - C113 * C2168) * C47471) *
                C47440) *
               C47456) *
              C47156 * C47447)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C47376 * C122 - C113 * C115) * C15949 +
             (C47376 * C136 - C113 * C123) * C15945 + (C4896 - C4897) * C15950 +
             (C4898 - C4899) * C47471) *
                C15947 +
            ((C144 - C145) * C15949 + (C146 - C147) * C15945 + C4900 * C15950 +
             C4901 * C47471) *
                C47440) *
               C47174 * C1078 +
           (((C4897 - C4896) * C15949 + (C4899 - C4898) * C15945 +
             (C4902 - C4903) * C15950 + (C4904 - C4905) * C47471) *
                C15947 +
            (C4906 * C15949 + C4907 * C15945 + C4908 * C15950 +
             C4909 * C47471) *
                C47440) *
               C47174 * C1079 +
           (((C4903 - C4902) * C15949 + (C4905 - C4904) * C15945 +
             (C5764 - C5765) * C15950 + (C5766 - C5767) * C47471) *
                C15947 +
            (C4910 * C15949 + C4911 * C15945 + C6076 * C15950 +
             C6077 * C47471) *
                C47440) *
               C47174 * C47453) *
              C47489 +
          ((((C145 - C144) * C15949 + (C147 - C146) * C15945 + C4906 * C15950 +
             C4907 * C47471) *
                C15947 +
            ((C149 - C148) * C15949 + (C151 - C150) * C15945 + C359 * C15950 +
             C360 * C47471) *
                C47440) *
               C47174 * C1078 +
           ((C4900 * C15949 + C4901 * C15945 + C4910 * C15950 +
             C4911 * C47471) *
                C15947 +
            (C4912 * C15949 + C4913 * C15945 + C361 * C15950 + C362 * C47471) *
                C47440) *
               C47174 * C1079 +
           ((C4908 * C15949 + C4909 * C15945 + C6078 * C15950 +
             C6079 * C47471) *
                C15947 +
            (C4914 * C15949 + C4915 * C15945 + (C1435 - C1436) * C15950 +
             (C1437 - C1438) * C47471) *
                C47440) *
               C47174 * C47453) *
              C47476 +
          (((C164 * C15949 + C165 * C15945 + C4912 * C15950 + C4913 * C47471) *
                C15947 +
            ((C153 - C152) * C15949 + (C155 - C154) * C15945 + C664 * C15950 +
             C665 * C47471) *
                C47440) *
               C47174 * C1078 +
           ((C359 * C15949 + C360 * C15945 + C4914 * C15950 + C4915 * C47471) *
                C15947 +
            (C5192 * C15949 + C5193 * C15945 + (C355 - C356) * C15950 +
             (C357 - C358) * C47471) *
                C47440) *
               C47174 * C1079 +
           ((C361 * C15949 + C362 * C15945 + (C1436 - C1435) * C15950 +
             (C1438 - C1437) * C47471) *
                C15947 +
            ((C356 - C355) * C15949 + (C358 - C357) * C15945 +
             (C47376 * C1427 - C113 * C1426) * C15950 +
             (C47376 * C1429 - C113 * C1428) * C47471) *
                C47440) *
               C47174 * C47453) *
              C47447)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C47376 * C122 - C113 * C115) * C15949 +
            (C47376 * C136 - C113 * C123) * C15945 + (C4896 - C4897) * C15950 +
            (C4898 - C4899) * C47471) *
               C15947 +
           ((C144 - C145) * C15949 + (C146 - C147) * C15945 + C4900 * C15950 +
            C4901 * C47471) *
               C47440) *
              C47174 * C1146 +
          (((C4897 - C4896) * C15949 + (C4899 - C4898) * C15945 +
            (C4902 - C4903) * C15950 + (C4904 - C4905) * C47471) *
               C15947 +
           (C4906 * C15949 + C4907 * C15945 + C4908 * C15950 + C4909 * C47471) *
               C47440) *
              C47174 * C1147 +
          (((C4903 - C4902) * C15949 + (C4905 - C4904) * C15945 +
            (C5764 - C5765) * C15950 + (C5766 - C5767) * C47471) *
               C15947 +
           (C4910 * C15949 + C4911 * C15945 + C6076 * C15950 + C6077 * C47471) *
               C47440) *
              C47174 * C1148 +
          (((C5765 - C5764) * C15949 + (C5767 - C5766) * C15945 +
            (C5768 - C5769) * C15950 + (C5770 - C5771) * C47471) *
               C15947 +
           (C6078 * C15949 + C6079 * C15945 + (C5772 - C5773) * C15950 +
            (C5774 - C5775) * C47471) *
               C47440) *
              C47174 * C1149 +
          (((C5769 - C5768) * C15949 + (C5771 - C5770) * C15945 +
            (C47376 * C5757 - C113 * C5755) * C15950 +
            (C47376 * C5761 - C113 * C5758) * C47471) *
               C15947 +
           ((C5773 - C5772) * C15949 + (C5775 - C5774) * C15945 +
            (C47376 * C5759 - C113 * C5756) * C15950 +
            (C47376 * C5762 - C113 * C5760) * C47471) *
               C47440) *
              C47174 * C1150) *
         C47128) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C47376 * C122 - C113 * C115) * C15949 +
             (C47376 * C136 - C113 * C123) * C15945 + (C4896 - C4897) * C15950 +
             (C4898 - C4899) * C47471) *
                C15947 +
            ((C144 - C145) * C15949 + (C146 - C147) * C15945 + C4900 * C15950 +
             C4901 * C47471) *
                C47440) *
               C47493 +
           (((C113 * C481 - C47376 * C491) * C15949 +
             (C113 * C492 - C47376 * C511) * C15945 + (C5518 - C5519) * C15950 +
             (C5520 - C5521) * C47471) *
                C15947 +
            ((C522 - C523) * C15949 + (C524 - C525) * C15945 + C5522 * C15950 +
             C5523 * C47471) *
                C47440) *
               C47482 +
           (((C47376 * C497 - C113 * C484) * C15949 +
             (C47376 * C514 - C113 * C498) * C15945 + (C5930 - C5931) * C15950 +
             (C5932 - C5933) * C47471) *
                C15947 +
            ((C530 - C531) * C15949 + (C532 - C533) * C15945 + C7000 * C15950 +
             C7001 * C47471) *
                C47440) *
               C47456) *
              C1078 +
          ((((C4897 - C4896) * C15949 + (C4899 - C4898) * C15945 +
             (C4902 - C4903) * C15950 + (C4904 - C4905) * C47471) *
                C15947 +
            (C4906 * C15949 + C4907 * C15945 + C4908 * C15950 +
             C4909 * C47471) *
                C47440) *
               C47493 +
           (((C5519 - C5518) * C15949 + (C5521 - C5520) * C15945 +
             (C5934 - C5935) * C15950 + (C5936 - C5937) * C47471) *
                C15947 +
            (C5524 * C15949 + C5525 * C15945 + C6274 * C15950 +
             C6275 * C47471) *
                C47440) *
               C47482 +
           (((C5931 - C5930) * C15949 + (C5933 - C5932) * C15945 +
             (C5938 - C5939) * C15950 + (C5940 - C5941) * C47471) *
                C15947 +
            (C7002 * C15949 + C7003 * C15945 + (C5942 - C5943) * C15950 +
             (C5944 - C5945) * C47471) *
                C47440) *
               C47456) *
              C1079 +
          ((((C4903 - C4902) * C15949 + (C4905 - C4904) * C15945 +
             (C5764 - C5765) * C15950 + (C5766 - C5767) * C47471) *
                C15947 +
            (C4910 * C15949 + C4911 * C15945 + C6076 * C15950 +
             C6077 * C47471) *
                C47440) *
               C47493 +
           (((C5935 - C5934) * C15949 + (C5937 - C5936) * C15945 +
             (C6420 - C6421) * C15950 + (C6422 - C6423) * C47471) *
                C15947 +
            (C6276 * C15949 + C6277 * C15945 + (C6278 - C6279) * C15950 +
             (C6280 - C6281) * C47471) *
                C47440) *
               C47482 +
           (((C5939 - C5938) * C15949 + (C5941 - C5940) * C15945 +
             (C47376 * C5923 - C113 * C5921) * C15950 +
             (C47376 * C5927 - C113 * C5924) * C47471) *
                C15947 +
            ((C5943 - C5942) * C15949 + (C5945 - C5944) * C15945 +
             (C47376 * C5925 - C113 * C5922) * C15950 +
             (C47376 * C5928 - C113 * C5926) * C47471) *
                C47440) *
               C47456) *
              C47453) *
         C47128) /
            (p * q * std::sqrt(p + q));
    d2ee[98] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C47376 * C122 - C113 * C115) * C15949 +
             (C47376 * C136 - C113 * C123) * C15945 + (C4896 - C4897) * C15950 +
             (C4898 - C4899) * C47471) *
                C15947 +
            ((C144 - C145) * C15949 + (C146 - C147) * C15945 + C4900 * C15950 +
             C4901 * C47471) *
                C47440) *
               C47422 +
           (((C113 * C481 - C47376 * C491) * C15949 +
             (C113 * C492 - C47376 * C511) * C15945 + (C5518 - C5519) * C15950 +
             (C5520 - C5521) * C47471) *
                C15947 +
            ((C522 - C523) * C15949 + (C524 - C525) * C15945 + C5522 * C15950 +
             C5523 * C47471) *
                C47440) *
               C47261) *
              C47156 * C655 +
          ((((C145 - C144) * C15949 + (C147 - C146) * C15945 + C4906 * C15950 +
             C4907 * C47471) *
                C15947 +
            ((C149 - C148) * C15949 + (C151 - C150) * C15945 + C359 * C15950 +
             C360 * C47471) *
                C47440) *
               C47422 +
           (((C523 - C522) * C15949 + (C525 - C524) * C15945 + C5524 * C15950 +
             C5525 * C47471) *
                C15947 +
            ((C527 - C526) * C15949 + (C529 - C528) * C15945 + C964 * C15950 +
             C965 * C47471) *
                C47440) *
               C47261) *
              C47156 * C656 +
          (((C164 * C15949 + C165 * C15945 + C4912 * C15950 + C4913 * C47471) *
                C15947 +
            ((C153 - C152) * C15949 + (C155 - C154) * C15945 + C664 * C15950 +
             C665 * C47471) *
                C47440) *
               C47422 +
           ((C546 * C15949 + C547 * C15945 + C5526 * C15950 + C5527 * C47471) *
                C15947 +
            ((C539 - C538) * C15949 + (C541 - C540) * C15945 +
             (C960 - C961) * C15950 + (C962 - C963) * C47471) *
                C47440) *
               C47261) *
              C47156 * C657 +
          (((C166 * C15949 + C167 * C15945 + C5192 * C15950 + C5193 * C47471) *
                C15947 +
            ((C157 - C156) * C15949 + (C159 - C158) * C15945 +
             (C666 - C667) * C15950 + (C668 - C669) * C47471) *
                C47440) *
               C47422 +
           ((C777 * C15949 + C778 * C15945 + (C961 - C960) * C15950 +
             (C963 - C962) * C47471) *
                C15947 +
            ((C780 - C779) * C15949 + (C782 - C781) * C15945 +
             (C47376 * C944 - C113 * C935) * C15950 +
             (C47376 * C950 - C113 * C945) * C47471) *
                C47440) *
               C47261) *
              C47156 * C47457)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C47376 * C122 - C113 * C115) * C15949 +
              (C47376 * C136 - C113 * C123) * C15945 +
              (C4896 - C4897) * C15950 + (C4898 - C4899) * C47471) *
                 C15947 +
             ((C144 - C145) * C15949 + (C146 - C147) * C15945 + C4900 * C15950 +
              C4901 * C47471) *
                 C47440) *
                C47422 +
            (((C113 * C481 - C47376 * C491) * C15949 +
              (C113 * C492 - C47376 * C511) * C15945 +
              (C5518 - C5519) * C15950 + (C5520 - C5521) * C47471) *
                 C15947 +
             ((C522 - C523) * C15949 + (C524 - C525) * C15945 + C5522 * C15950 +
              C5523 * C47471) *
                 C47440) *
                C47261) *
               C1078 +
           ((((C4897 - C4896) * C15949 + (C4899 - C4898) * C15945 +
              (C4902 - C4903) * C15950 + (C4904 - C4905) * C47471) *
                 C15947 +
             (C4906 * C15949 + C4907 * C15945 + C4908 * C15950 +
              C4909 * C47471) *
                 C47440) *
                C47422 +
            (((C5519 - C5518) * C15949 + (C5521 - C5520) * C15945 +
              (C5934 - C5935) * C15950 + (C5936 - C5937) * C47471) *
                 C15947 +
             (C5524 * C15949 + C5525 * C15945 + C6274 * C15950 +
              C6275 * C47471) *
                 C47440) *
                C47261) *
               C1079 +
           ((((C4903 - C4902) * C15949 + (C4905 - C4904) * C15945 +
              (C5764 - C5765) * C15950 + (C5766 - C5767) * C47471) *
                 C15947 +
             (C4910 * C15949 + C4911 * C15945 + C6076 * C15950 +
              C6077 * C47471) *
                 C47440) *
                C47422 +
            (((C5935 - C5934) * C15949 + (C5937 - C5936) * C15945 +
              (C6420 - C6421) * C15950 + (C6422 - C6423) * C47471) *
                 C15947 +
             (C6276 * C15949 + C6277 * C15945 + (C6278 - C6279) * C15950 +
              (C6280 - C6281) * C47471) *
                 C47440) *
                C47261) *
               C47453) *
              C47407 +
          (((((C145 - C144) * C15949 + (C147 - C146) * C15945 + C4906 * C15950 +
              C4907 * C47471) *
                 C15947 +
             ((C149 - C148) * C15949 + (C151 - C150) * C15945 + C359 * C15950 +
              C360 * C47471) *
                 C47440) *
                C47422 +
            (((C523 - C522) * C15949 + (C525 - C524) * C15945 + C5524 * C15950 +
              C5525 * C47471) *
                 C15947 +
             ((C527 - C526) * C15949 + (C529 - C528) * C15945 + C964 * C15950 +
              C965 * C47471) *
                 C47440) *
                C47261) *
               C1078 +
           (((C4900 * C15949 + C4901 * C15945 + C4910 * C15950 +
              C4911 * C47471) *
                 C15947 +
             (C4912 * C15949 + C4913 * C15945 + C361 * C15950 + C362 * C47471) *
                 C47440) *
                C47422 +
            ((C5522 * C15949 + C5523 * C15945 + C6276 * C15950 +
              C6277 * C47471) *
                 C15947 +
             (C5526 * C15949 + C5527 * C15945 + (C1593 - C1594) * C15950 +
              (C1595 - C1596) * C47471) *
                 C47440) *
                C47261) *
               C1079 +
           (((C4908 * C15949 + C4909 * C15945 + C6078 * C15950 +
              C6079 * C47471) *
                 C15947 +
             (C4914 * C15949 + C4915 * C15945 + (C1435 - C1436) * C15950 +
              (C1437 - C1438) * C47471) *
                 C47440) *
                C47422 +
            ((C6274 * C15949 + C6275 * C15945 + (C6279 - C6278) * C15950 +
              (C6281 - C6280) * C47471) *
                 C15947 +
             ((C1594 - C1593) * C15949 + (C1596 - C1595) * C15945 +
              (C47376 * C1701 - C113 * C1696) * C15950 +
              (C47376 * C1705 - C113 * C1702) * C47471) *
                 C47440) *
                C47261) *
               C47453) *
              C47139)) /
            (p * q * std::sqrt(p + q));
    d2ee[99] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C47376 * C122 - C113 * C115) * C15949 +
            (C47376 * C136 - C113 * C123) * C15945 + (C4896 - C4897) * C15950 +
            (C4898 - C4899) * C47471) *
               C15947 +
           ((C144 - C145) * C15949 + (C146 - C147) * C15945 + C4900 * C15950 +
            C4901 * C47471) *
               C47440) *
              C47174 * C47156 * C108 +
          (((C145 - C144) * C15949 + (C147 - C146) * C15945 + C4906 * C15950 +
            C4907 * C47471) *
               C15947 +
           ((C149 - C148) * C15949 + (C151 - C150) * C15945 + C359 * C15950 +
            C360 * C47471) *
               C47440) *
              C47174 * C47156 * C109 +
          ((C164 * C15949 + C165 * C15945 + C4912 * C15950 + C4913 * C47471) *
               C15947 +
           ((C153 - C152) * C15949 + (C155 - C154) * C15945 + C664 * C15950 +
            C665 * C47471) *
               C47440) *
              C47174 * C47156 * C110 +
          ((C166 * C15949 + C167 * C15945 + C5192 * C15950 + C5193 * C47471) *
               C15947 +
           ((C157 - C156) * C15949 + (C159 - C158) * C15945 +
            (C666 - C667) * C15950 + (C668 - C669) * C47471) *
               C47440) *
              C47174 * C47156 * C111 +
          ((C168 * C15949 + C169 * C15945 + (C667 - C666) * C15950 +
            (C669 - C668) * C47471) *
               C15947 +
           ((C161 - C160) * C15949 + (C163 - C162) * C15945 +
            (C47376 * C660 - C113 * C659) * C15950 +
            (C47376 * C662 - C113 * C661) * C47471) *
               C47440) *
              C47174 * C47156 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C47376 * C122 - C113 * C115) * C15949 +
             (C47376 * C136 - C113 * C123) * C15945 + (C4896 - C4897) * C15950 +
             (C4898 - C4899) * C47471) *
                C15947 +
            ((C144 - C145) * C15949 + (C146 - C147) * C15945 + C4900 * C15950 +
             C4901 * C47471) *
                C47440) *
               C47174 * C47492 +
           (((C4897 - C4896) * C15949 + (C4899 - C4898) * C15945 +
             (C4902 - C4903) * C15950 + (C4904 - C4905) * C47471) *
                C15947 +
            (C4906 * C15949 + C4907 * C15945 + C4908 * C15950 +
             C4909 * C47471) *
                C47440) *
               C47174 * C47480 +
           (((C4903 - C4902) * C15949 + (C4905 - C4904) * C15945 +
             (C5764 - C5765) * C15950 + (C5766 - C5767) * C47471) *
                C15947 +
            (C4910 * C15949 + C4911 * C15945 + C6076 * C15950 +
             C6077 * C47471) *
                C47440) *
               C47174 * C47453) *
              C291 +
          ((((C145 - C144) * C15949 + (C147 - C146) * C15945 + C4906 * C15950 +
             C4907 * C47471) *
                C15947 +
            ((C149 - C148) * C15949 + (C151 - C150) * C15945 + C359 * C15950 +
             C360 * C47471) *
                C47440) *
               C47174 * C47492 +
           ((C4900 * C15949 + C4901 * C15945 + C4910 * C15950 +
             C4911 * C47471) *
                C15947 +
            (C4912 * C15949 + C4913 * C15945 + C361 * C15950 + C362 * C47471) *
                C47440) *
               C47174 * C47480 +
           ((C4908 * C15949 + C4909 * C15945 + C6078 * C15950 +
             C6079 * C47471) *
                C15947 +
            (C4914 * C15949 + C4915 * C15945 + (C1435 - C1436) * C15950 +
             (C1437 - C1438) * C47471) *
                C47440) *
               C47174 * C47453) *
              C292 +
          (((C164 * C15949 + C165 * C15945 + C4912 * C15950 + C4913 * C47471) *
                C15947 +
            ((C153 - C152) * C15949 + (C155 - C154) * C15945 + C664 * C15950 +
             C665 * C47471) *
                C47440) *
               C47174 * C47492 +
           ((C359 * C15949 + C360 * C15945 + C4914 * C15950 + C4915 * C47471) *
                C15947 +
            (C5192 * C15949 + C5193 * C15945 + (C355 - C356) * C15950 +
             (C357 - C358) * C47471) *
                C47440) *
               C47174 * C47480 +
           ((C361 * C15949 + C362 * C15945 + (C1436 - C1435) * C15950 +
             (C1438 - C1437) * C47471) *
                C15947 +
            ((C356 - C355) * C15949 + (C358 - C357) * C15945 +
             (C47376 * C1427 - C113 * C1426) * C15950 +
             (C47376 * C1429 - C113 * C1428) * C47471) *
                C47440) *
               C47174 * C47453) *
              C47447)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C47376 * C122 - C113 * C115) * C15949 +
             (C47376 * C136 - C113 * C123) * C15945 + (C4896 - C4897) * C15950 +
             (C4898 - C4899) * C47471) *
                C15947 +
            ((C144 - C145) * C15949 + (C146 - C147) * C15945 + C4900 * C15950 +
             C4901 * C47471) *
                C47440) *
               C47174 * C1078 +
           (((C4897 - C4896) * C15949 + (C4899 - C4898) * C15945 +
             (C4902 - C4903) * C15950 + (C4904 - C4905) * C47471) *
                C15947 +
            (C4906 * C15949 + C4907 * C15945 + C4908 * C15950 +
             C4909 * C47471) *
                C47440) *
               C47174 * C1079 +
           (((C4903 - C4902) * C15949 + (C4905 - C4904) * C15945 +
             (C5764 - C5765) * C15950 + (C5766 - C5767) * C47471) *
                C15947 +
            (C4910 * C15949 + C4911 * C15945 + C6076 * C15950 +
             C6077 * C47471) *
                C47440) *
               C47174 * C47453) *
              C47489 +
          ((((C145 - C144) * C15949 + (C147 - C146) * C15945 + C4906 * C15950 +
             C4907 * C47471) *
                C15947 +
            ((C149 - C148) * C15949 + (C151 - C150) * C15945 + C359 * C15950 +
             C360 * C47471) *
                C47440) *
               C47174 * C1078 +
           ((C4900 * C15949 + C4901 * C15945 + C4910 * C15950 +
             C4911 * C47471) *
                C15947 +
            (C4912 * C15949 + C4913 * C15945 + C361 * C15950 + C362 * C47471) *
                C47440) *
               C47174 * C1079 +
           ((C4908 * C15949 + C4909 * C15945 + C6078 * C15950 +
             C6079 * C47471) *
                C15947 +
            (C4914 * C15949 + C4915 * C15945 + (C1435 - C1436) * C15950 +
             (C1437 - C1438) * C47471) *
                C47440) *
               C47174 * C47453) *
              C47476 +
          (((C164 * C15949 + C165 * C15945 + C4912 * C15950 + C4913 * C47471) *
                C15947 +
            ((C153 - C152) * C15949 + (C155 - C154) * C15945 + C664 * C15950 +
             C665 * C47471) *
                C47440) *
               C47174 * C1078 +
           ((C359 * C15949 + C360 * C15945 + C4914 * C15950 + C4915 * C47471) *
                C15947 +
            (C5192 * C15949 + C5193 * C15945 + (C355 - C356) * C15950 +
             (C357 - C358) * C47471) *
                C47440) *
               C47174 * C1079 +
           ((C361 * C15949 + C362 * C15945 + (C1436 - C1435) * C15950 +
             (C1438 - C1437) * C47471) *
                C15947 +
            ((C356 - C355) * C15949 + (C358 - C357) * C15945 +
             (C47376 * C1427 - C113 * C1426) * C15950 +
             (C47376 * C1429 - C113 * C1428) * C47471) *
                C47440) *
               C47174 * C47453) *
              C47447)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C47376 * C122 - C113 * C115) * C15949 +
            (C47376 * C136 - C113 * C123) * C15945 + (C4896 - C4897) * C15950 +
            (C4898 - C4899) * C47471) *
               C15947 +
           ((C144 - C145) * C15949 + (C146 - C147) * C15945 + C4900 * C15950 +
            C4901 * C47471) *
               C47440) *
              C47174 * C1146 +
          (((C4897 - C4896) * C15949 + (C4899 - C4898) * C15945 +
            (C4902 - C4903) * C15950 + (C4904 - C4905) * C47471) *
               C15947 +
           (C4906 * C15949 + C4907 * C15945 + C4908 * C15950 + C4909 * C47471) *
               C47440) *
              C47174 * C1147 +
          (((C4903 - C4902) * C15949 + (C4905 - C4904) * C15945 +
            (C5764 - C5765) * C15950 + (C5766 - C5767) * C47471) *
               C15947 +
           (C4910 * C15949 + C4911 * C15945 + C6076 * C15950 + C6077 * C47471) *
               C47440) *
              C47174 * C1148 +
          (((C5765 - C5764) * C15949 + (C5767 - C5766) * C15945 +
            (C5768 - C5769) * C15950 + (C5770 - C5771) * C47471) *
               C15947 +
           (C6078 * C15949 + C6079 * C15945 + (C5772 - C5773) * C15950 +
            (C5774 - C5775) * C47471) *
               C47440) *
              C47174 * C1149 +
          (((C5769 - C5768) * C15949 + (C5771 - C5770) * C15945 +
            (C47376 * C5757 - C113 * C5755) * C15950 +
            (C47376 * C5761 - C113 * C5758) * C47471) *
               C15947 +
           ((C5773 - C5772) * C15949 + (C5775 - C5774) * C15945 +
            (C47376 * C5759 - C113 * C5756) * C15950 +
            (C47376 * C5762 - C113 * C5760) * C47471) *
               C47440) *
              C47174 * C1150) *
         C47128) /
            (p * q * std::sqrt(p + q));
    d2ee[100] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C47376 * C122 - C113 * C115) * C21383 +
            (C47376 * C136 - C113 * C123) * C21379 + (C4896 - C4897) * C21384 +
            (C4898 - C4899) * C21380 + C21497 * C21385 + C21498 * C21381) *
               C47105 * C47174 * C47215 +
           ((C4897 - C4896) * C21383 + (C4899 - C4898) * C21379 +
            (C4902 - C4903) * C21384 + (C4904 - C4905) * C21380 +
            C22127 * C21385 + C22128 * C21381) *
               C47105 * C47174 * C47222 +
           (C21497 * C21383 + C21498 * C21379 + (C5764 - C5765) * C21384 +
            (C5766 - C5767) * C21380 + C22129 * C21385 + C22130 * C21381) *
               C47105 * C47174 * C2868) *
              C47133 +
          (((C145 - C144) * C21383 + (C147 - C146) * C21379 + C4906 * C21384 +
            C4907 * C21380 + C4908 * C21385 + C4909 * C21381) *
               C47105 * C47174 * C47215 +
           (C4900 * C21383 + C4901 * C21379 + C4910 * C21384 + C4911 * C21380 +
            C6076 * C21385 + C6077 * C21381) *
               C47105 * C47174 * C47222 +
           (C4908 * C21383 + C4909 * C21379 + C6078 * C21384 + C6079 * C21380 +
            (C5772 - C5773) * C21385 + (C5774 - C5775) * C21381) *
               C47105 * C47174 * C2868) *
              C47142 +
          ((C164 * C21383 + C165 * C21379 + C4912 * C21384 + C4913 * C21380 +
            C361 * C21385 + C362 * C21381) *
               C47105 * C47174 * C47215 +
           (C359 * C21383 + C360 * C21379 + C4914 * C21384 + C4915 * C21380 +
            (C1435 - C1436) * C21385 + (C1437 - C1438) * C21381) *
               C47105 * C47174 * C47222 +
           (C361 * C21383 + C362 * C21379 + (C1436 - C1435) * C21384 +
            (C1438 - C1437) * C21380 +
            (C47376 * C1168 - C113 * C1157) * C21385 +
            (C47376 * C1175 - C113 * C1169) * C21381) *
               C47105 * C47174 * C2868) *
              C2871)) /
        (p * q * std::sqrt(p + q));
    d2ee[101] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C47376 * C122 - C113 * C115) * C21383 +
             (C47376 * C136 - C113 * C123) * C21379 + (C4896 - C4897) * C21384 +
             (C4898 - C4899) * C21380 + C21497 * C21385 + C21498 * C21381) *
                C47105 * C47422 +
            ((C113 * C481 - C47376 * C491) * C21383 +
             (C113 * C492 - C47376 * C511) * C21379 + (C5518 - C5519) * C21384 +
             (C5520 - C5521) * C21380 + C22249 * C21385 + C22250 * C21381) *
                C47105 * C47261) *
               C47215 +
           (((C4897 - C4896) * C21383 + (C4899 - C4898) * C21379 +
             (C4902 - C4903) * C21384 + (C4904 - C4905) * C21380 +
             C22127 * C21385 + C22128 * C21381) *
                C47105 * C47422 +
            ((C5519 - C5518) * C21383 + (C5521 - C5520) * C21379 +
             (C5934 - C5935) * C21384 + (C5936 - C5937) * C21380 +
             C22603 * C21385 + C22604 * C21381) *
                C47105 * C47261) *
               C47222 +
           ((C21497 * C21383 + C21498 * C21379 + (C5764 - C5765) * C21384 +
             (C5766 - C5767) * C21380 + C22129 * C21385 + C22130 * C21381) *
                C47105 * C47422 +
            (C22249 * C21383 + C22250 * C21379 + (C6420 - C6421) * C21384 +
             (C6422 - C6423) * C21380 + (C22605 - C22606) * C21385 +
             (C22607 - C22608) * C21381) *
                C47105 * C47261) *
               C2868) *
              C2608 +
          ((((C145 - C144) * C21383 + (C147 - C146) * C21379 + C4906 * C21384 +
             C4907 * C21380 + C4908 * C21385 + C4909 * C21381) *
                C47105 * C47422 +
            ((C523 - C522) * C21383 + (C525 - C524) * C21379 + C5524 * C21384 +
             C5525 * C21380 + C6274 * C21385 + C6275 * C21381) *
                C47105 * C47261) *
               C47215 +
           ((C4900 * C21383 + C4901 * C21379 + C4910 * C21384 + C4911 * C21380 +
             C6076 * C21385 + C6077 * C21381) *
                C47105 * C47422 +
            (C5522 * C21383 + C5523 * C21379 + C6276 * C21384 + C6277 * C21380 +
             (C6278 - C6279) * C21385 + (C6280 - C6281) * C21381) *
                C47105 * C47261) *
               C47222 +
           ((C4908 * C21383 + C4909 * C21379 + C6078 * C21384 + C6079 * C21380 +
             (C5772 - C5773) * C21385 + (C5774 - C5775) * C21381) *
                C47105 * C47422 +
            (C6274 * C21383 + C6275 * C21379 + (C6279 - C6278) * C21384 +
             (C6281 - C6280) * C21380 +
             (C47376 * C6415 - C113 * C6412) * C21385 +
             (C47376 * C6418 - C113 * C6416) * C21381) *
                C47105 * C47261) *
               C2868) *
              C47139)) /
        (p * q * std::sqrt(p + q));
    d2ee[102] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C47376 * C122 - C113 * C115) * C21383 +
            (C47376 * C136 - C113 * C123) * C21379 + (C4896 - C4897) * C21384 +
            (C4898 - C4899) * C21380 + C21497 * C21385 + C21498 * C21381) *
               C47105 * C47174 * C47499 +
           ((C4897 - C4896) * C21383 + (C4899 - C4898) * C21379 +
            (C4902 - C4903) * C21384 + (C4904 - C4905) * C21380 +
            C22127 * C21385 + C22128 * C21381) *
               C47105 * C47174 * C47495 +
           (C21497 * C21383 + C21498 * C21379 + (C5764 - C5765) * C21384 +
            (C5766 - C5767) * C21380 + C22129 * C21385 + C22130 * C21381) *
               C47105 * C47174 * C47485 +
           (C22127 * C21383 + C22128 * C21379 + (C5768 - C5769) * C21384 +
            (C5770 - C5771) * C21380 + (C22131 - C22132) * C21385 +
            (C22133 - C22134) * C21381) *
               C47105 * C47174 * C47463) *
              C2608 +
          (((C145 - C144) * C21383 + (C147 - C146) * C21379 + C4906 * C21384 +
            C4907 * C21380 + C4908 * C21385 + C4909 * C21381) *
               C47105 * C47174 * C47499 +
           (C4900 * C21383 + C4901 * C21379 + C4910 * C21384 + C4911 * C21380 +
            C6076 * C21385 + C6077 * C21381) *
               C47105 * C47174 * C47495 +
           (C4908 * C21383 + C4909 * C21379 + C6078 * C21384 + C6079 * C21380 +
            (C5772 - C5773) * C21385 + (C5774 - C5775) * C21381) *
               C47105 * C47174 * C47485 +
           (C6076 * C21383 + C6077 * C21379 + (C5773 - C5772) * C21384 +
            (C5775 - C5774) * C21380 +
            (C47376 * C5759 - C113 * C5756) * C21385 +
            (C47376 * C5762 - C113 * C5760) * C21381) *
               C47105 * C47174 * C47463) *
              C47139)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C47376 * C122 - C113 * C115) * C21383 +
            (C47376 * C136 - C113 * C123) * C21379 + (C4896 - C4897) * C21384 +
            (C4898 - C4899) * C21380 + C21497 * C21385 + C21498 * C21381) *
               C47105 * C47174 * C2500 +
           ((C4897 - C4896) * C21383 + (C4899 - C4898) * C21379 +
            (C4902 - C4903) * C21384 + (C4904 - C4905) * C21380 +
            C22127 * C21385 + C22128 * C21381) *
               C47105 * C47174 * C47219) *
              C47498 +
          (((C145 - C144) * C21383 + (C147 - C146) * C21379 + C4906 * C21384 +
            C4907 * C21380 + C4908 * C21385 + C4909 * C21381) *
               C47105 * C47174 * C2500 +
           (C4900 * C21383 + C4901 * C21379 + C4910 * C21384 + C4911 * C21380 +
            C6076 * C21385 + C6077 * C21381) *
               C47105 * C47174 * C47219) *
              C47491 +
          ((C164 * C21383 + C165 * C21379 + C4912 * C21384 + C4913 * C21380 +
            C361 * C21385 + C362 * C21381) *
               C47105 * C47174 * C2500 +
           (C359 * C21383 + C360 * C21379 + C4914 * C21384 + C4915 * C21380 +
            (C1435 - C1436) * C21385 + (C1437 - C1438) * C21381) *
               C47105 * C47174 * C47219) *
              C47478 +
          ((C166 * C21383 + C167 * C21379 + C5192 * C21384 + C5193 * C21380 +
            (C355 - C356) * C21385 + (C357 - C358) * C21381) *
               C47105 * C47174 * C2500 +
           (C664 * C21383 + C665 * C21379 + (C356 - C355) * C21384 +
            (C358 - C357) * C21380 + (C47376 * C1427 - C113 * C1426) * C21385 +
            (C47376 * C1429 - C113 * C1428) * C21381) *
               C47105 * C47174 * C47219) *
              C47457)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C47376 * C122 - C113 * C115) * C21383 +
             (C47376 * C136 - C113 * C123) * C21379 + (C4896 - C4897) * C21384 +
             (C4898 - C4899) * C21380 + C21497 * C21385 + C21498 * C21381) *
                C47105 * C47493 +
            ((C113 * C481 - C47376 * C491) * C21383 +
             (C113 * C492 - C47376 * C511) * C21379 + (C5518 - C5519) * C21384 +
             (C5520 - C5521) * C21380 + C22249 * C21385 + C22250 * C21381) *
                C47105 * C47482 +
            ((C47376 * C497 - C113 * C484) * C21383 +
             (C47376 * C514 - C113 * C498) * C21379 + (C5930 - C5931) * C21384 +
             (C5932 - C5933) * C21380 + C22251 * C21385 + C22252 * C21381) *
                C47105 * C47456) *
               C2500 +
           (((C4897 - C4896) * C21383 + (C4899 - C4898) * C21379 +
             (C4902 - C4903) * C21384 + (C4904 - C4905) * C21380 +
             C22127 * C21385 + C22128 * C21381) *
                C47105 * C47493 +
            ((C5519 - C5518) * C21383 + (C5521 - C5520) * C21379 +
             (C5934 - C5935) * C21384 + (C5936 - C5937) * C21380 +
             C22603 * C21385 + C22604 * C21381) *
                C47105 * C47482 +
            ((C5931 - C5930) * C21383 + (C5933 - C5932) * C21379 +
             (C5938 - C5939) * C21384 + (C5940 - C5941) * C21380 +
             (C22253 - C22254) * C21385 + (C22255 - C22256) * C21381) *
                C47105 * C47456) *
               C47219) *
              C2608 +
          ((((C145 - C144) * C21383 + (C147 - C146) * C21379 + C4906 * C21384 +
             C4907 * C21380 + C4908 * C21385 + C4909 * C21381) *
                C47105 * C47493 +
            ((C523 - C522) * C21383 + (C525 - C524) * C21379 + C5524 * C21384 +
             C5525 * C21380 + C6274 * C21385 + C6275 * C21381) *
                C47105 * C47482 +
            ((C531 - C530) * C21383 + (C533 - C532) * C21379 + C7002 * C21384 +
             C7003 * C21380 + (C5942 - C5943) * C21385 +
             (C5944 - C5945) * C21381) *
                C47105 * C47456) *
               C2500 +
           ((C4900 * C21383 + C4901 * C21379 + C4910 * C21384 + C4911 * C21380 +
             C6076 * C21385 + C6077 * C21381) *
                C47105 * C47493 +
            (C5522 * C21383 + C5523 * C21379 + C6276 * C21384 + C6277 * C21380 +
             (C6278 - C6279) * C21385 + (C6280 - C6281) * C21381) *
                C47105 * C47482 +
            (C7000 * C21383 + C7001 * C21379 + (C5943 - C5942) * C21384 +
             (C5945 - C5944) * C21380 +
             (C47376 * C5925 - C113 * C5922) * C21385 +
             (C47376 * C5928 - C113 * C5926) * C21381) *
                C47105 * C47456) *
               C47219) *
              C47139)) /
            (p * q * std::sqrt(p + q));
    d2ee[103] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C47376 * C122 - C113 * C115) * C21383 +
             (C47376 * C136 - C113 * C123) * C21379 + (C4896 - C4897) * C21384 +
             (C4898 - C4899) * C21380 + C21497 * C21385 + C21498 * C21381) *
                C47105 * C47422 +
            ((C113 * C481 - C47376 * C491) * C21383 +
             (C113 * C492 - C47376 * C511) * C21379 + (C5518 - C5519) * C21384 +
             (C5520 - C5521) * C21380 + C22249 * C21385 + C22250 * C21381) *
                C47105 * C47261) *
               C2500 +
           (((C4897 - C4896) * C21383 + (C4899 - C4898) * C21379 +
             (C4902 - C4903) * C21384 + (C4904 - C4905) * C21380 +
             C22127 * C21385 + C22128 * C21381) *
                C47105 * C47422 +
            ((C5519 - C5518) * C21383 + (C5521 - C5520) * C21379 +
             (C5934 - C5935) * C21384 + (C5936 - C5937) * C21380 +
             C22603 * C21385 + C22604 * C21381) *
                C47105 * C47261) *
               C47219) *
              C47133 +
          ((((C145 - C144) * C21383 + (C147 - C146) * C21379 + C4906 * C21384 +
             C4907 * C21380 + C4908 * C21385 + C4909 * C21381) *
                C47105 * C47422 +
            ((C523 - C522) * C21383 + (C525 - C524) * C21379 + C5524 * C21384 +
             C5525 * C21380 + C6274 * C21385 + C6275 * C21381) *
                C47105 * C47261) *
               C2500 +
           ((C4900 * C21383 + C4901 * C21379 + C4910 * C21384 + C4911 * C21380 +
             C6076 * C21385 + C6077 * C21381) *
                C47105 * C47422 +
            (C5522 * C21383 + C5523 * C21379 + C6276 * C21384 + C6277 * C21380 +
             (C6278 - C6279) * C21385 + (C6280 - C6281) * C21381) *
                C47105 * C47261) *
               C47219) *
              C47142 +
          (((C164 * C21383 + C165 * C21379 + C4912 * C21384 + C4913 * C21380 +
             C361 * C21385 + C362 * C21381) *
                C47105 * C47422 +
            (C546 * C21383 + C547 * C21379 + C5526 * C21384 + C5527 * C21380 +
             (C1593 - C1594) * C21385 + (C1595 - C1596) * C21381) *
                C47105 * C47261) *
               C2500 +
           ((C359 * C21383 + C360 * C21379 + C4914 * C21384 + C4915 * C21380 +
             (C1435 - C1436) * C21385 + (C1437 - C1438) * C21381) *
                C47105 * C47422 +
            (C964 * C21383 + C965 * C21379 + (C1594 - C1593) * C21384 +
             (C1596 - C1595) * C21380 +
             (C47376 * C1701 - C113 * C1696) * C21385 +
             (C47376 * C1705 - C113 * C1702) * C21381) *
                C47105 * C47261) *
               C47219) *
              C2871)) /
        (p * q * std::sqrt(p + q));
    d2ee[104] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C47376 * C122 - C113 * C115) * C21383 +
            (C47376 * C136 - C113 * C123) * C21379 + (C4896 - C4897) * C21384 +
            (C4898 - C4899) * C21380 + C21497 * C21385 + C21498 * C21381) *
               C47105 * C47174 * C2500 +
           ((C4897 - C4896) * C21383 + (C4899 - C4898) * C21379 +
            (C4902 - C4903) * C21384 + (C4904 - C4905) * C21380 +
            C22127 * C21385 + C22128 * C21381) *
               C47105 * C47174 * C47219) *
              C47498 +
          (((C145 - C144) * C21383 + (C147 - C146) * C21379 + C4906 * C21384 +
            C4907 * C21380 + C4908 * C21385 + C4909 * C21381) *
               C47105 * C47174 * C2500 +
           (C4900 * C21383 + C4901 * C21379 + C4910 * C21384 + C4911 * C21380 +
            C6076 * C21385 + C6077 * C21381) *
               C47105 * C47174 * C47219) *
              C47491 +
          ((C164 * C21383 + C165 * C21379 + C4912 * C21384 + C4913 * C21380 +
            C361 * C21385 + C362 * C21381) *
               C47105 * C47174 * C2500 +
           (C359 * C21383 + C360 * C21379 + C4914 * C21384 + C4915 * C21380 +
            (C1435 - C1436) * C21385 + (C1437 - C1438) * C21381) *
               C47105 * C47174 * C47219) *
              C47478 +
          ((C166 * C21383 + C167 * C21379 + C5192 * C21384 + C5193 * C21380 +
            (C355 - C356) * C21385 + (C357 - C358) * C21381) *
               C47105 * C47174 * C2500 +
           (C664 * C21383 + C665 * C21379 + (C356 - C355) * C21384 +
            (C358 - C357) * C21380 + (C47376 * C1427 - C113 * C1426) * C21385 +
            (C47376 * C1429 - C113 * C1428) * C21381) *
               C47105 * C47174 * C47219) *
              C47457)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C47376 * C122 - C113 * C115) * C21383 +
            (C47376 * C136 - C113 * C123) * C21379 + (C4896 - C4897) * C21384 +
            (C4898 - C4899) * C21380 + C21497 * C21385 + C21498 * C21381) *
               C47105 * C47174 * C47499 +
           ((C4897 - C4896) * C21383 + (C4899 - C4898) * C21379 +
            (C4902 - C4903) * C21384 + (C4904 - C4905) * C21380 +
            C22127 * C21385 + C22128 * C21381) *
               C47105 * C47174 * C47495 +
           (C21497 * C21383 + C21498 * C21379 + (C5764 - C5765) * C21384 +
            (C5766 - C5767) * C21380 + C22129 * C21385 + C22130 * C21381) *
               C47105 * C47174 * C47485 +
           (C22127 * C21383 + C22128 * C21379 + (C5768 - C5769) * C21384 +
            (C5770 - C5771) * C21380 + (C22131 - C22132) * C21385 +
            (C22133 - C22134) * C21381) *
               C47105 * C47174 * C47463) *
              C2608 +
          (((C145 - C144) * C21383 + (C147 - C146) * C21379 + C4906 * C21384 +
            C4907 * C21380 + C4908 * C21385 + C4909 * C21381) *
               C47105 * C47174 * C47499 +
           (C4900 * C21383 + C4901 * C21379 + C4910 * C21384 + C4911 * C21380 +
            C6076 * C21385 + C6077 * C21381) *
               C47105 * C47174 * C47495 +
           (C4908 * C21383 + C4909 * C21379 + C6078 * C21384 + C6079 * C21380 +
            (C5772 - C5773) * C21385 + (C5774 - C5775) * C21381) *
               C47105 * C47174 * C47485 +
           (C6076 * C21383 + C6077 * C21379 + (C5773 - C5772) * C21384 +
            (C5775 - C5774) * C21380 +
            (C47376 * C5759 - C113 * C5756) * C21385 +
            (C47376 * C5762 - C113 * C5760) * C21381) *
               C47105 * C47174 * C47463) *
              C47139)) /
            (p * q * std::sqrt(p + q));
    d2ee[105] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C47376 * C122 - C113 * C115) * C21383 +
             (C47376 * C136 - C113 * C123) * C21379 + (C4896 - C4897) * C21384 +
             (C4898 - C4899) * C21380 + C21497 * C21385 + C21498 * C21381) *
                C47105 * C3262 +
            ((C113 * C481 - C47376 * C491) * C21383 +
             (C113 * C492 - C47376 * C511) * C21379 + (C5518 - C5519) * C21384 +
             (C5520 - C5521) * C21380 + C22249 * C21385 + C22250 * C21381) *
                C47105 * C47261) *
               C47215 +
           (((C4897 - C4896) * C21383 + (C4899 - C4898) * C21379 +
             (C4902 - C4903) * C21384 + (C4904 - C4905) * C21380 +
             C22127 * C21385 + C22128 * C21381) *
                C47105 * C3262 +
            ((C5519 - C5518) * C21383 + (C5521 - C5520) * C21379 +
             (C5934 - C5935) * C21384 + (C5936 - C5937) * C21380 +
             C22603 * C21385 + C22604 * C21381) *
                C47105 * C47261) *
               C47222 +
           ((C21497 * C21383 + C21498 * C21379 + (C5764 - C5765) * C21384 +
             (C5766 - C5767) * C21380 + C22129 * C21385 + C22130 * C21381) *
                C47105 * C3262 +
            (C22249 * C21383 + C22250 * C21379 + (C6420 - C6421) * C21384 +
             (C6422 - C6423) * C21380 + (C22605 - C22606) * C21385 +
             (C22607 - C22608) * C21381) *
                C47105 * C47261) *
               C2868) *
              C47407 +
          ((((C145 - C144) * C21383 + (C147 - C146) * C21379 + C4906 * C21384 +
             C4907 * C21380 + C4908 * C21385 + C4909 * C21381) *
                C47105 * C3262 +
            ((C523 - C522) * C21383 + (C525 - C524) * C21379 + C5524 * C21384 +
             C5525 * C21380 + C6274 * C21385 + C6275 * C21381) *
                C47105 * C47261) *
               C47215 +
           ((C4900 * C21383 + C4901 * C21379 + C4910 * C21384 + C4911 * C21380 +
             C6076 * C21385 + C6077 * C21381) *
                C47105 * C3262 +
            (C5522 * C21383 + C5523 * C21379 + C6276 * C21384 + C6277 * C21380 +
             (C6278 - C6279) * C21385 + (C6280 - C6281) * C21381) *
                C47105 * C47261) *
               C47222 +
           ((C4908 * C21383 + C4909 * C21379 + C6078 * C21384 + C6079 * C21380 +
             (C5772 - C5773) * C21385 + (C5774 - C5775) * C21381) *
                C47105 * C3262 +
            (C6274 * C21383 + C6275 * C21379 + (C6279 - C6278) * C21384 +
             (C6281 - C6280) * C21380 +
             (C47376 * C6415 - C113 * C6412) * C21385 +
             (C47376 * C6418 - C113 * C6416) * C21381) *
                C47105 * C47261) *
               C2868) *
              C47139)) /
        (p * q * std::sqrt(p + q));
    d2ee[106] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C47376 * C122 - C113 * C115) * C21383 +
            (C47376 * C136 - C113 * C123) * C21379 + (C4896 - C4897) * C21384 +
            (C4898 - C4899) * C21380 + C21497 * C21385 + C21498 * C21381) *
               C47105 * C47257 +
           ((C113 * C481 - C47376 * C491) * C21383 +
            (C113 * C492 - C47376 * C511) * C21379 + (C5518 - C5519) * C21384 +
            (C5520 - C5521) * C21380 + C22249 * C21385 + C22250 * C21381) *
               C47105 * C47264 +
           ((C47376 * C497 - C113 * C484) * C21383 +
            (C47376 * C514 - C113 * C498) * C21379 + (C5930 - C5931) * C21384 +
            (C5932 - C5933) * C21380 + C22251 * C21385 + C22252 * C21381) *
               C47105 * C3770) *
              C47215 +
          (((C4897 - C4896) * C21383 + (C4899 - C4898) * C21379 +
            (C4902 - C4903) * C21384 + (C4904 - C4905) * C21380 +
            C22127 * C21385 + C22128 * C21381) *
               C47105 * C47257 +
           ((C5519 - C5518) * C21383 + (C5521 - C5520) * C21379 +
            (C5934 - C5935) * C21384 + (C5936 - C5937) * C21380 +
            C22603 * C21385 + C22604 * C21381) *
               C47105 * C47264 +
           ((C5931 - C5930) * C21383 + (C5933 - C5932) * C21379 +
            (C5938 - C5939) * C21384 + (C5940 - C5941) * C21380 +
            (C22253 - C22254) * C21385 + (C22255 - C22256) * C21381) *
               C47105 * C3770) *
              C47222 +
          ((C21497 * C21383 + C21498 * C21379 + (C5764 - C5765) * C21384 +
            (C5766 - C5767) * C21380 + C22129 * C21385 + C22130 * C21381) *
               C47105 * C47257 +
           (C22249 * C21383 + C22250 * C21379 + (C6420 - C6421) * C21384 +
            (C6422 - C6423) * C21380 + (C22605 - C22606) * C21385 +
            (C22607 - C22608) * C21381) *
               C47105 * C47264 +
           (C22251 * C21383 + C22252 * C21379 + (C22254 - C22253) * C21384 +
            (C22256 - C22255) * C21380 +
            (C47376 * C22245 - C113 * C22244) * C21385 +
            (C47376 * C22247 - C113 * C22246) * C21381) *
               C47105 * C3770) *
              C2868) *
         C47128) /
        (p * q * std::sqrt(p + q));
    d2ee[107] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C47376 * C122 - C113 * C115) * C21383 +
            (C47376 * C136 - C113 * C123) * C21379 + (C4896 - C4897) * C21384 +
            (C4898 - C4899) * C21380 + C21497 * C21385 + C21498 * C21381) *
               C47105 * C3262 +
           ((C113 * C481 - C47376 * C491) * C21383 +
            (C113 * C492 - C47376 * C511) * C21379 + (C5518 - C5519) * C21384 +
            (C5520 - C5521) * C21380 + C22249 * C21385 + C22250 * C21381) *
               C47105 * C47261) *
              C47499 +
          (((C4897 - C4896) * C21383 + (C4899 - C4898) * C21379 +
            (C4902 - C4903) * C21384 + (C4904 - C4905) * C21380 +
            C22127 * C21385 + C22128 * C21381) *
               C47105 * C3262 +
           ((C5519 - C5518) * C21383 + (C5521 - C5520) * C21379 +
            (C5934 - C5935) * C21384 + (C5936 - C5937) * C21380 +
            C22603 * C21385 + C22604 * C21381) *
               C47105 * C47261) *
              C47495 +
          ((C21497 * C21383 + C21498 * C21379 + (C5764 - C5765) * C21384 +
            (C5766 - C5767) * C21380 + C22129 * C21385 + C22130 * C21381) *
               C47105 * C3262 +
           (C22249 * C21383 + C22250 * C21379 + (C6420 - C6421) * C21384 +
            (C6422 - C6423) * C21380 + (C22605 - C22606) * C21385 +
            (C22607 - C22608) * C21381) *
               C47105 * C47261) *
              C47485 +
          ((C22127 * C21383 + C22128 * C21379 + (C5768 - C5769) * C21384 +
            (C5770 - C5771) * C21380 + (C22131 - C22132) * C21385 +
            (C22133 - C22134) * C21381) *
               C47105 * C3262 +
           (C22603 * C21383 + C22604 * C21379 + (C22606 - C22605) * C21384 +
            (C22608 - C22607) * C21380 +
            (C47376 * C22599 - C113 * C22598) * C21385 +
            (C47376 * C22601 - C113 * C22600) * C21381) *
               C47105 * C47261) *
              C47463) *
         C47128) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C47376 * C122 - C113 * C115) * C21383 +
             (C47376 * C136 - C113 * C123) * C21379 + (C4896 - C4897) * C21384 +
             (C4898 - C4899) * C21380 + C21497 * C21385 + C21498 * C21381) *
                C47105 * C3262 +
            ((C113 * C481 - C47376 * C491) * C21383 +
             (C113 * C492 - C47376 * C511) * C21379 + (C5518 - C5519) * C21384 +
             (C5520 - C5521) * C21380 + C22249 * C21385 + C22250 * C21381) *
                C47105 * C47261) *
               C2500 +
           (((C4897 - C4896) * C21383 + (C4899 - C4898) * C21379 +
             (C4902 - C4903) * C21384 + (C4904 - C4905) * C21380 +
             C22127 * C21385 + C22128 * C21381) *
                C47105 * C3262 +
            ((C5519 - C5518) * C21383 + (C5521 - C5520) * C21379 +
             (C5934 - C5935) * C21384 + (C5936 - C5937) * C21380 +
             C22603 * C21385 + C22604 * C21381) *
                C47105 * C47261) *
               C47219) *
              C47489 +
          ((((C145 - C144) * C21383 + (C147 - C146) * C21379 + C4906 * C21384 +
             C4907 * C21380 + C4908 * C21385 + C4909 * C21381) *
                C47105 * C3262 +
            ((C523 - C522) * C21383 + (C525 - C524) * C21379 + C5524 * C21384 +
             C5525 * C21380 + C6274 * C21385 + C6275 * C21381) *
                C47105 * C47261) *
               C2500 +
           ((C4900 * C21383 + C4901 * C21379 + C4910 * C21384 + C4911 * C21380 +
             C6076 * C21385 + C6077 * C21381) *
                C47105 * C3262 +
            (C5522 * C21383 + C5523 * C21379 + C6276 * C21384 + C6277 * C21380 +
             (C6278 - C6279) * C21385 + (C6280 - C6281) * C21381) *
                C47105 * C47261) *
               C47219) *
              C47476 +
          (((C164 * C21383 + C165 * C21379 + C4912 * C21384 + C4913 * C21380 +
             C361 * C21385 + C362 * C21381) *
                C47105 * C3262 +
            (C546 * C21383 + C547 * C21379 + C5526 * C21384 + C5527 * C21380 +
             (C1593 - C1594) * C21385 + (C1595 - C1596) * C21381) *
                C47105 * C47261) *
               C2500 +
           ((C359 * C21383 + C360 * C21379 + C4914 * C21384 + C4915 * C21380 +
             (C1435 - C1436) * C21385 + (C1437 - C1438) * C21381) *
                C47105 * C3262 +
            (C964 * C21383 + C965 * C21379 + (C1594 - C1593) * C21384 +
             (C1596 - C1595) * C21380 +
             (C47376 * C1701 - C113 * C1696) * C21385 +
             (C47376 * C1705 - C113 * C1702) * C21381) *
                C47105 * C47261) *
               C47219) *
              C47447)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C47376 * C122 - C113 * C115) * C21383 +
            (C47376 * C136 - C113 * C123) * C21379 + (C4896 - C4897) * C21384 +
            (C4898 - C4899) * C21380 + C21497 * C21385 + C21498 * C21381) *
               C47105 * C47500 +
           ((C113 * C481 - C47376 * C491) * C21383 +
            (C113 * C492 - C47376 * C511) * C21379 + (C5518 - C5519) * C21384 +
            (C5520 - C5521) * C21380 + C22249 * C21385 + C22250 * C21381) *
               C47105 * C47497 +
           ((C47376 * C497 - C113 * C484) * C21383 +
            (C47376 * C514 - C113 * C498) * C21379 + (C5930 - C5931) * C21384 +
            (C5932 - C5933) * C21380 + C22251 * C21385 + C22252 * C21381) *
               C47105 * C47488 +
           ((C113 * C1996 - C47376 * C2002) * C21383 +
            (C113 * C2003 - C47376 * C2014) * C21379 +
            (C7276 - C7277) * C21384 + (C7278 - C7279) * C21380 +
            (C23241 - C23242) * C21385 + (C23243 - C23244) * C21381) *
               C47105 * C47469) *
              C2500 +
          (((C4897 - C4896) * C21383 + (C4899 - C4898) * C21379 +
            (C4902 - C4903) * C21384 + (C4904 - C4905) * C21380 +
            C22127 * C21385 + C22128 * C21381) *
               C47105 * C47500 +
           ((C5519 - C5518) * C21383 + (C5521 - C5520) * C21379 +
            (C5934 - C5935) * C21384 + (C5936 - C5937) * C21380 +
            C22603 * C21385 + C22604 * C21381) *
               C47105 * C47497 +
           ((C5931 - C5930) * C21383 + (C5933 - C5932) * C21379 +
            (C5938 - C5939) * C21384 + (C5940 - C5941) * C21380 +
            (C22253 - C22254) * C21385 + (C22255 - C22256) * C21381) *
               C47105 * C47488 +
           ((C7277 - C7276) * C21383 + (C7279 - C7278) * C21379 +
            (C23242 - C23241) * C21384 + (C23244 - C23243) * C21380 +
            (C47376 * C23237 - C113 * C23236) * C21385 +
            (C47376 * C23239 - C113 * C23238) * C21381) *
               C47105 * C47469) *
              C47219) *
         C47128) /
            (p * q * std::sqrt(p + q));
    d2ee[108] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C47376 * C122 - C113 * C115) * C21383 +
             (C47376 * C136 - C113 * C123) * C21379 + (C4896 - C4897) * C21384 +
             (C4898 - C4899) * C21380 + C21497 * C21385 + C21498 * C21381) *
                C47105 * C47257 +
            ((C113 * C481 - C47376 * C491) * C21383 +
             (C113 * C492 - C47376 * C511) * C21379 + (C5518 - C5519) * C21384 +
             (C5520 - C5521) * C21380 + C22249 * C21385 + C22250 * C21381) *
                C47105 * C47264 +
            ((C47376 * C497 - C113 * C484) * C21383 +
             (C47376 * C514 - C113 * C498) * C21379 + (C5930 - C5931) * C21384 +
             (C5932 - C5933) * C21380 + C22251 * C21385 + C22252 * C21381) *
                C47105 * C3770) *
               C2500 +
           (((C4897 - C4896) * C21383 + (C4899 - C4898) * C21379 +
             (C4902 - C4903) * C21384 + (C4904 - C4905) * C21380 +
             C22127 * C21385 + C22128 * C21381) *
                C47105 * C47257 +
            ((C5519 - C5518) * C21383 + (C5521 - C5520) * C21379 +
             (C5934 - C5935) * C21384 + (C5936 - C5937) * C21380 +
             C22603 * C21385 + C22604 * C21381) *
                C47105 * C47264 +
            ((C5931 - C5930) * C21383 + (C5933 - C5932) * C21379 +
             (C5938 - C5939) * C21384 + (C5940 - C5941) * C21380 +
             (C22253 - C22254) * C21385 + (C22255 - C22256) * C21381) *
                C47105 * C3770) *
               C47219) *
              C47407 +
          ((((C145 - C144) * C21383 + (C147 - C146) * C21379 + C4906 * C21384 +
             C4907 * C21380 + C4908 * C21385 + C4909 * C21381) *
                C47105 * C47257 +
            ((C523 - C522) * C21383 + (C525 - C524) * C21379 + C5524 * C21384 +
             C5525 * C21380 + C6274 * C21385 + C6275 * C21381) *
                C47105 * C47264 +
            ((C531 - C530) * C21383 + (C533 - C532) * C21379 + C7002 * C21384 +
             C7003 * C21380 + (C5942 - C5943) * C21385 +
             (C5944 - C5945) * C21381) *
                C47105 * C3770) *
               C2500 +
           ((C4900 * C21383 + C4901 * C21379 + C4910 * C21384 + C4911 * C21380 +
             C6076 * C21385 + C6077 * C21381) *
                C47105 * C47257 +
            (C5522 * C21383 + C5523 * C21379 + C6276 * C21384 + C6277 * C21380 +
             (C6278 - C6279) * C21385 + (C6280 - C6281) * C21381) *
                C47105 * C47264 +
            (C7000 * C21383 + C7001 * C21379 + (C5943 - C5942) * C21384 +
             (C5945 - C5944) * C21380 +
             (C47376 * C5925 - C113 * C5922) * C21385 +
             (C47376 * C5928 - C113 * C5926) * C21381) *
                C47105 * C3770) *
               C47219) *
              C47139)) /
        (p * q * std::sqrt(p + q));
    d2ee[109] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C47376 * C122 - C113 * C115) * C21383 +
             (C47376 * C136 - C113 * C123) * C21379 + (C4896 - C4897) * C21384 +
             (C4898 - C4899) * C21380 + C21497 * C21385 + C21498 * C21381) *
                C47105 * C3262 +
            ((C113 * C481 - C47376 * C491) * C21383 +
             (C113 * C492 - C47376 * C511) * C21379 + (C5518 - C5519) * C21384 +
             (C5520 - C5521) * C21380 + C22249 * C21385 + C22250 * C21381) *
                C47105 * C47261) *
               C2500 +
           (((C4897 - C4896) * C21383 + (C4899 - C4898) * C21379 +
             (C4902 - C4903) * C21384 + (C4904 - C4905) * C21380 +
             C22127 * C21385 + C22128 * C21381) *
                C47105 * C3262 +
            ((C5519 - C5518) * C21383 + (C5521 - C5520) * C21379 +
             (C5934 - C5935) * C21384 + (C5936 - C5937) * C21380 +
             C22603 * C21385 + C22604 * C21381) *
                C47105 * C47261) *
               C47219) *
              C47489 +
          ((((C145 - C144) * C21383 + (C147 - C146) * C21379 + C4906 * C21384 +
             C4907 * C21380 + C4908 * C21385 + C4909 * C21381) *
                C47105 * C3262 +
            ((C523 - C522) * C21383 + (C525 - C524) * C21379 + C5524 * C21384 +
             C5525 * C21380 + C6274 * C21385 + C6275 * C21381) *
                C47105 * C47261) *
               C2500 +
           ((C4900 * C21383 + C4901 * C21379 + C4910 * C21384 + C4911 * C21380 +
             C6076 * C21385 + C6077 * C21381) *
                C47105 * C3262 +
            (C5522 * C21383 + C5523 * C21379 + C6276 * C21384 + C6277 * C21380 +
             (C6278 - C6279) * C21385 + (C6280 - C6281) * C21381) *
                C47105 * C47261) *
               C47219) *
              C47476 +
          (((C164 * C21383 + C165 * C21379 + C4912 * C21384 + C4913 * C21380 +
             C361 * C21385 + C362 * C21381) *
                C47105 * C3262 +
            (C546 * C21383 + C547 * C21379 + C5526 * C21384 + C5527 * C21380 +
             (C1593 - C1594) * C21385 + (C1595 - C1596) * C21381) *
                C47105 * C47261) *
               C2500 +
           ((C359 * C21383 + C360 * C21379 + C4914 * C21384 + C4915 * C21380 +
             (C1435 - C1436) * C21385 + (C1437 - C1438) * C21381) *
                C47105 * C3262 +
            (C964 * C21383 + C965 * C21379 + (C1594 - C1593) * C21384 +
             (C1596 - C1595) * C21380 +
             (C47376 * C1701 - C113 * C1696) * C21385 +
             (C47376 * C1705 - C113 * C1702) * C21381) *
                C47105 * C47261) *
               C47219) *
              C47447)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C47376 * C122 - C113 * C115) * C21383 +
            (C47376 * C136 - C113 * C123) * C21379 + (C4896 - C4897) * C21384 +
            (C4898 - C4899) * C21380 + C21497 * C21385 + C21498 * C21381) *
               C47105 * C3262 +
           ((C113 * C481 - C47376 * C491) * C21383 +
            (C113 * C492 - C47376 * C511) * C21379 + (C5518 - C5519) * C21384 +
            (C5520 - C5521) * C21380 + C22249 * C21385 + C22250 * C21381) *
               C47105 * C47261) *
              C47499 +
          (((C4897 - C4896) * C21383 + (C4899 - C4898) * C21379 +
            (C4902 - C4903) * C21384 + (C4904 - C4905) * C21380 +
            C22127 * C21385 + C22128 * C21381) *
               C47105 * C3262 +
           ((C5519 - C5518) * C21383 + (C5521 - C5520) * C21379 +
            (C5934 - C5935) * C21384 + (C5936 - C5937) * C21380 +
            C22603 * C21385 + C22604 * C21381) *
               C47105 * C47261) *
              C47495 +
          ((C21497 * C21383 + C21498 * C21379 + (C5764 - C5765) * C21384 +
            (C5766 - C5767) * C21380 + C22129 * C21385 + C22130 * C21381) *
               C47105 * C3262 +
           (C22249 * C21383 + C22250 * C21379 + (C6420 - C6421) * C21384 +
            (C6422 - C6423) * C21380 + (C22605 - C22606) * C21385 +
            (C22607 - C22608) * C21381) *
               C47105 * C47261) *
              C47485 +
          ((C22127 * C21383 + C22128 * C21379 + (C5768 - C5769) * C21384 +
            (C5770 - C5771) * C21380 + (C22131 - C22132) * C21385 +
            (C22133 - C22134) * C21381) *
               C47105 * C3262 +
           (C22603 * C21383 + C22604 * C21379 + (C22606 - C22605) * C21384 +
            (C22608 - C22607) * C21380 +
            (C47376 * C22599 - C113 * C22598) * C21385 +
            (C47376 * C22601 - C113 * C22600) * C21381) *
               C47105 * C47261) *
              C47463) *
         C47128) /
            (p * q * std::sqrt(p + q));
    d2ee[110] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C47376 * C122 - C113 * C115) * C21383 +
            (C47376 * C136 - C113 * C123) * C21379 + (C4896 - C4897) * C21384 +
            (C4898 - C4899) * C21380 + C21497 * C21385 + C21498 * C21381) *
               C47105 * C47174 * C1420 +
           ((C4897 - C4896) * C21383 + (C4899 - C4898) * C21379 +
            (C4902 - C4903) * C21384 + (C4904 - C4905) * C21380 +
            C22127 * C21385 + C22128 * C21381) *
               C47105 * C47174 * C1421 +
           (C21497 * C21383 + C21498 * C21379 + (C5764 - C5765) * C21384 +
            (C5766 - C5767) * C21380 + C22129 * C21385 + C22130 * C21381) *
               C47105 * C47174 * C1422 +
           (C22127 * C21383 + C22128 * C21379 + (C5768 - C5769) * C21384 +
            (C5770 - C5771) * C21380 + (C22131 - C22132) * C21385 +
            (C22133 - C22134) * C21381) *
               C47105 * C47174 * C47463) *
              C47407 +
          (((C145 - C144) * C21383 + (C147 - C146) * C21379 + C4906 * C21384 +
            C4907 * C21380 + C4908 * C21385 + C4909 * C21381) *
               C47105 * C47174 * C1420 +
           (C4900 * C21383 + C4901 * C21379 + C4910 * C21384 + C4911 * C21380 +
            C6076 * C21385 + C6077 * C21381) *
               C47105 * C47174 * C1421 +
           (C4908 * C21383 + C4909 * C21379 + C6078 * C21384 + C6079 * C21380 +
            (C5772 - C5773) * C21385 + (C5774 - C5775) * C21381) *
               C47105 * C47174 * C1422 +
           (C6076 * C21383 + C6077 * C21379 + (C5773 - C5772) * C21384 +
            (C5775 - C5774) * C21380 +
            (C47376 * C5759 - C113 * C5756) * C21385 +
            (C47376 * C5762 - C113 * C5760) * C21381) *
               C47105 * C47174 * C47463) *
              C47139)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C47376 * C122 - C113 * C115) * C21383 +
            (C47376 * C136 - C113 * C123) * C21379 + (C4896 - C4897) * C21384 +
            (C4898 - C4899) * C21380 + C21497 * C21385 + C21498 * C21381) *
               C47105 * C47174 * C47421 +
           ((C4897 - C4896) * C21383 + (C4899 - C4898) * C21379 +
            (C4902 - C4903) * C21384 + (C4904 - C4905) * C21380 +
            (C5765 - C5764) * C21385 + (C5767 - C5766) * C21381) *
               C47105 * C47174 * C47219) *
              C655 +
          (((C145 - C144) * C21383 + (C147 - C146) * C21379 + C4906 * C21384 +
            C4907 * C21380 + C4908 * C21385 + C4909 * C21381) *
               C47105 * C47174 * C47421 +
           (C4900 * C21383 + C4901 * C21379 + C4910 * C21384 + C4911 * C21380 +
            C6076 * C21385 + C6077 * C21381) *
               C47105 * C47174 * C47219) *
              C656 +
          ((C164 * C21383 + C165 * C21379 + C4912 * C21384 + C4913 * C21380 +
            C361 * C21385 + C362 * C21381) *
               C47105 * C47174 * C47421 +
           (C359 * C21383 + C360 * C21379 + C4914 * C21384 + C4915 * C21380 +
            (C1435 - C1436) * C21385 + (C1437 - C1438) * C21381) *
               C47105 * C47174 * C47219) *
              C657 +
          ((C166 * C21383 + C167 * C21379 + C5192 * C21384 + C5193 * C21380 +
            (C355 - C356) * C21385 + (C357 - C358) * C21381) *
               C47105 * C47174 * C47421 +
           (C664 * C21383 + C665 * C21379 + (C356 - C355) * C21384 +
            (C358 - C357) * C21380 + (C47376 * C1427 - C113 * C1426) * C21385 +
            (C47376 * C1429 - C113 * C1428) * C21381) *
               C47105 * C47174 * C47219) *
              C47457)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C47376 * C122 - C113 * C115) * C21383 +
             (C47376 * C136 - C113 * C123) * C21379 + (C4896 - C4897) * C21384 +
             (C4898 - C4899) * C21380 + C21497 * C21385 + C21498 * C21381) *
                C47105 * C1816 +
            ((C113 * C481 - C47376 * C491) * C21383 +
             (C113 * C492 - C47376 * C511) * C21379 + (C5518 - C5519) * C21384 +
             (C5520 - C5521) * C21380 + C22249 * C21385 + C22250 * C21381) *
                C47105 * C1817 +
            ((C47376 * C497 - C113 * C484) * C21383 +
             (C47376 * C514 - C113 * C498) * C21379 + (C5930 - C5931) * C21384 +
             (C5932 - C5933) * C21380 + C22251 * C21385 + C22252 * C21381) *
                C47105 * C47456) *
               C47421 +
           (((C4897 - C4896) * C21383 + (C4899 - C4898) * C21379 +
             (C4902 - C4903) * C21384 + (C4904 - C4905) * C21380 +
             C22127 * C21385 + C22128 * C21381) *
                C47105 * C1816 +
            ((C5519 - C5518) * C21383 + (C5521 - C5520) * C21379 +
             (C5934 - C5935) * C21384 + (C5936 - C5937) * C21380 +
             C22603 * C21385 + C22604 * C21381) *
                C47105 * C1817 +
            ((C5931 - C5930) * C21383 + (C5933 - C5932) * C21379 +
             (C5938 - C5939) * C21384 + (C5940 - C5941) * C21380 +
             (C22253 - C22254) * C21385 + (C22255 - C22256) * C21381) *
                C47105 * C47456) *
               C47219) *
              C47407 +
          ((((C145 - C144) * C21383 + (C147 - C146) * C21379 + C4906 * C21384 +
             C4907 * C21380 + C4908 * C21385 + C4909 * C21381) *
                C47105 * C1816 +
            ((C523 - C522) * C21383 + (C525 - C524) * C21379 + C5524 * C21384 +
             C5525 * C21380 + C6274 * C21385 + C6275 * C21381) *
                C47105 * C1817 +
            ((C531 - C530) * C21383 + (C533 - C532) * C21379 + C7002 * C21384 +
             C7003 * C21380 + (C5942 - C5943) * C21385 +
             (C5944 - C5945) * C21381) *
                C47105 * C47456) *
               C47421 +
           ((C4900 * C21383 + C4901 * C21379 + C4910 * C21384 + C4911 * C21380 +
             C6076 * C21385 + C6077 * C21381) *
                C47105 * C1816 +
            (C5522 * C21383 + C5523 * C21379 + C6276 * C21384 + C6277 * C21380 +
             (C6278 - C6279) * C21385 + (C6280 - C6281) * C21381) *
                C47105 * C1817 +
            (C7000 * C21383 + C7001 * C21379 + (C5943 - C5942) * C21384 +
             (C5945 - C5944) * C21380 +
             (C47376 * C5925 - C113 * C5922) * C21385 +
             (C47376 * C5928 - C113 * C5926) * C21381) *
                C47105 * C47456) *
               C47219) *
              C47139)) /
            (p * q * std::sqrt(p + q));
    d2ee[111] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C47376 * C122 - C113 * C115) * C21383 +
            (C47376 * C136 - C113 * C123) * C21379 + (C4896 - C4897) * C21384 +
            (C4898 - C4899) * C21380 + C21497 * C21385 + C21498 * C21381) *
               C47105 * C47422 +
           ((C113 * C481 - C47376 * C491) * C21383 +
            (C113 * C492 - C47376 * C511) * C21379 + (C5518 - C5519) * C21384 +
            (C5520 - C5521) * C21380 + C22249 * C21385 + C22250 * C21381) *
               C47105 * C47261) *
              C1420 +
          (((C4897 - C4896) * C21383 + (C4899 - C4898) * C21379 +
            (C4902 - C4903) * C21384 + (C4904 - C4905) * C21380 +
            C22127 * C21385 + C22128 * C21381) *
               C47105 * C47422 +
           ((C5519 - C5518) * C21383 + (C5521 - C5520) * C21379 +
            (C5934 - C5935) * C21384 + (C5936 - C5937) * C21380 +
            C22603 * C21385 + C22604 * C21381) *
               C47105 * C47261) *
              C1421 +
          ((C21497 * C21383 + C21498 * C21379 + (C5764 - C5765) * C21384 +
            (C5766 - C5767) * C21380 + C22129 * C21385 + C22130 * C21381) *
               C47105 * C47422 +
           (C22249 * C21383 + C22250 * C21379 + (C6420 - C6421) * C21384 +
            (C6422 - C6423) * C21380 + (C22605 - C22606) * C21385 +
            (C22607 - C22608) * C21381) *
               C47105 * C47261) *
              C1422 +
          ((C22127 * C21383 + C22128 * C21379 + (C5768 - C5769) * C21384 +
            (C5770 - C5771) * C21380 + (C22131 - C22132) * C21385 +
            (C22133 - C22134) * C21381) *
               C47105 * C47422 +
           (C22603 * C21383 + C22604 * C21379 + (C22606 - C22605) * C21384 +
            (C22608 - C22607) * C21380 +
            (C47376 * C22599 - C113 * C22598) * C21385 +
            (C47376 * C22601 - C113 * C22600) * C21381) *
               C47105 * C47261) *
              C47463) *
         C47128) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C47376 * C122 - C113 * C115) * C21383 +
             (C47376 * C136 - C113 * C123) * C21379 + (C4896 - C4897) * C21384 +
             (C4898 - C4899) * C21380 + C21497 * C21385 + C21498 * C21381) *
                C47105 * C47422 +
            ((C113 * C481 - C47376 * C491) * C21383 +
             (C113 * C492 - C47376 * C511) * C21379 + (C5518 - C5519) * C21384 +
             (C5520 - C5521) * C21380 + (C5935 - C5934) * C21385 +
             (C5937 - C5936) * C21381) *
                C47105 * C47261) *
               C47421 +
           (((C4897 - C4896) * C21383 + (C4899 - C4898) * C21379 +
             (C4902 - C4903) * C21384 + (C4904 - C4905) * C21380 +
             (C5765 - C5764) * C21385 + (C5767 - C5766) * C21381) *
                C47105 * C47422 +
            ((C5519 - C5518) * C21383 + (C5521 - C5520) * C21379 +
             (C5934 - C5935) * C21384 + (C5936 - C5937) * C21380 +
             (C6421 - C6420) * C21385 + (C6423 - C6422) * C21381) *
                C47105 * C47261) *
               C47219) *
              C291 +
          ((((C145 - C144) * C21383 + (C147 - C146) * C21379 + C4906 * C21384 +
             C4907 * C21380 + C4908 * C21385 + C4909 * C21381) *
                C47105 * C47422 +
            ((C523 - C522) * C21383 + (C525 - C524) * C21379 + C5524 * C21384 +
             C5525 * C21380 + C6274 * C21385 + C6275 * C21381) *
                C47105 * C47261) *
               C47421 +
           ((C4900 * C21383 + C4901 * C21379 + C4910 * C21384 + C4911 * C21380 +
             C6076 * C21385 + C6077 * C21381) *
                C47105 * C47422 +
            (C5522 * C21383 + C5523 * C21379 + C6276 * C21384 + C6277 * C21380 +
             (C6278 - C6279) * C21385 + (C6280 - C6281) * C21381) *
                C47105 * C47261) *
               C47219) *
              C292 +
          (((C164 * C21383 + C165 * C21379 + C4912 * C21384 + C4913 * C21380 +
             C361 * C21385 + C362 * C21381) *
                C47105 * C47422 +
            (C546 * C21383 + C547 * C21379 + C5526 * C21384 + C5527 * C21380 +
             (C1593 - C1594) * C21385 + (C1595 - C1596) * C21381) *
                C47105 * C47261) *
               C47421 +
           ((C359 * C21383 + C360 * C21379 + C4914 * C21384 + C4915 * C21380 +
             (C1435 - C1436) * C21385 + (C1437 - C1438) * C21381) *
                C47105 * C47422 +
            (C964 * C21383 + C965 * C21379 + (C1594 - C1593) * C21384 +
             (C1596 - C1595) * C21380 +
             (C47376 * C1701 - C113 * C1696) * C21385 +
             (C47376 * C1705 - C113 * C1702) * C21381) *
                C47105 * C47261) *
               C47219) *
              C47447)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C47376 * C122 - C113 * C115) * C21383 +
            (C47376 * C136 - C113 * C123) * C21379 + (C4896 - C4897) * C21384 +
            (C4898 - C4899) * C21380 + C21497 * C21385 + C21498 * C21381) *
               C47105 * C2276 +
           ((C113 * C481 - C47376 * C491) * C21383 +
            (C113 * C492 - C47376 * C511) * C21379 + (C5518 - C5519) * C21384 +
            (C5520 - C5521) * C21380 + C22249 * C21385 + C22250 * C21381) *
               C47105 * C2277 +
           ((C47376 * C497 - C113 * C484) * C21383 +
            (C47376 * C514 - C113 * C498) * C21379 + (C5930 - C5931) * C21384 +
            (C5932 - C5933) * C21380 + C22251 * C21385 + C22252 * C21381) *
               C47105 * C2278 +
           ((C113 * C1996 - C47376 * C2002) * C21383 +
            (C113 * C2003 - C47376 * C2014) * C21379 +
            (C7276 - C7277) * C21384 + (C7278 - C7279) * C21380 +
            (C23241 - C23242) * C21385 + (C23243 - C23244) * C21381) *
               C47105 * C47469) *
              C47421 +
          (((C4897 - C4896) * C21383 + (C4899 - C4898) * C21379 +
            (C4902 - C4903) * C21384 + (C4904 - C4905) * C21380 +
            C22127 * C21385 + C22128 * C21381) *
               C47105 * C2276 +
           ((C5519 - C5518) * C21383 + (C5521 - C5520) * C21379 +
            (C5934 - C5935) * C21384 + (C5936 - C5937) * C21380 +
            C22603 * C21385 + C22604 * C21381) *
               C47105 * C2277 +
           ((C5931 - C5930) * C21383 + (C5933 - C5932) * C21379 +
            (C5938 - C5939) * C21384 + (C5940 - C5941) * C21380 +
            (C22253 - C22254) * C21385 + (C22255 - C22256) * C21381) *
               C47105 * C2278 +
           ((C7277 - C7276) * C21383 + (C7279 - C7278) * C21379 +
            (C23242 - C23241) * C21384 + (C23244 - C23243) * C21380 +
            (C47376 * C23237 - C113 * C23236) * C21385 +
            (C47376 * C23239 - C113 * C23238) * C21381) *
               C47105 * C47469) *
              C47219) *
         C47128) /
            (p * q * std::sqrt(p + q));
    d2ee[112] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((C47376 * C122 - C113 * C115) * C21383 +
               (C47376 * C136 - C113 * C123) * C21379 +
               (C4896 - C4897) * C21384 + (C4898 - C4899) * C21380 +
               (C4903 - C4902) * C21385 + (C4905 - C4904) * C21381) *
                  C47105 * C47174 * C47156 * C108 +
              ((C145 - C144) * C21383 + (C147 - C146) * C21379 +
               C4906 * C21384 + C4907 * C21380 + C4908 * C21385 +
               C4909 * C21381) *
                  C47105 * C47174 * C47156 * C109 +
              (C164 * C21383 + C165 * C21379 + C4912 * C21384 + C4913 * C21380 +
               C361 * C21385 + C362 * C21381) *
                  C47105 * C47174 * C47156 * C110 +
              (C166 * C21383 + C167 * C21379 + C5192 * C21384 + C5193 * C21380 +
               (C355 - C356) * C21385 + (C357 - C358) * C21381) *
                  C47105 * C47174 * C47156 * C111 +
              (C168 * C21383 + C169 * C21379 + (C667 - C666) * C21384 +
               (C669 - C668) * C21380 + (C47376 * C322 - C113 * C303) * C21385 +
               (C47376 * C333 - C113 * C323) * C21381) *
                  C47105 * C47174 * C47156 * C112) +
         0.5 * std::pow(Pi, 2.5) *
             ((((C47376 * C122 - C113 * C115) * C21383 +
                (C47376 * C136 - C113 * C123) * C21379 +
                (C4896 - C4897) * C21384 + (C4898 - C4899) * C21380 +
                C21497 * C21385 + C21498 * C21381) *
                   C47105 * C47174 * C47492 +
               ((C4897 - C4896) * C21383 + (C4899 - C4898) * C21379 +
                (C4902 - C4903) * C21384 + (C4904 - C4905) * C21380 +
                (C5765 - C5764) * C21385 + (C5767 - C5766) * C21381) *
                   C47105 * C47174 * C47480 +
               (C21497 * C21383 + C21498 * C21379 + (C5764 - C5765) * C21384 +
                (C5766 - C5767) * C21380 + (C5769 - C5768) * C21385 +
                (C5771 - C5770) * C21381) *
                   C47105 * C47174 * C47453) *
                  C291 +
              (((C145 - C144) * C21383 + (C147 - C146) * C21379 +
                C4906 * C21384 + C4907 * C21380 + C4908 * C21385 +
                C4909 * C21381) *
                   C47105 * C47174 * C47492 +
               (C4900 * C21383 + C4901 * C21379 + C4910 * C21384 +
                C4911 * C21380 + C6076 * C21385 + C6077 * C21381) *
                   C47105 * C47174 * C47480 +
               (C4908 * C21383 + C4909 * C21379 + C6078 * C21384 +
                C6079 * C21380 + (C5772 - C5773) * C21385 +
                (C5774 - C5775) * C21381) *
                   C47105 * C47174 * C47453) *
                  C292 +
              ((C164 * C21383 + C165 * C21379 + C4912 * C21384 +
                C4913 * C21380 + C361 * C21385 + C362 * C21381) *
                   C47105 * C47174 * C47492 +
               (C359 * C21383 + C360 * C21379 + C4914 * C21384 +
                C4915 * C21380 + (C1435 - C1436) * C21385 +
                (C1437 - C1438) * C21381) *
                   C47105 * C47174 * C47480 +
               (C361 * C21383 + C362 * C21379 + (C1436 - C1435) * C21384 +
                (C1438 - C1437) * C21380 +
                (C47376 * C1168 - C113 * C1157) * C21385 +
                (C47376 * C1175 - C113 * C1169) * C21381) *
                   C47105 * C47174 * C47453) *
                  C47447)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C47376 * C122 - C113 * C115) * C21383 +
            (C47376 * C136 - C113 * C123) * C21379 + (C4896 - C4897) * C21384 +
            (C4898 - C4899) * C21380 + C21497 * C21385 + C21498 * C21381) *
               C47105 * C47493 +
           ((C113 * C481 - C47376 * C491) * C21383 +
            (C113 * C492 - C47376 * C511) * C21379 + (C5518 - C5519) * C21384 +
            (C5520 - C5521) * C21380 + (C5935 - C5934) * C21385 +
            (C5937 - C5936) * C21381) *
               C47105 * C47482 +
           ((C47376 * C497 - C113 * C484) * C21383 +
            (C47376 * C514 - C113 * C498) * C21379 + (C5930 - C5931) * C21384 +
            (C5932 - C5933) * C21380 + (C5939 - C5938) * C21385 +
            (C5941 - C5940) * C21381) *
               C47105 * C47456) *
              C47156 * C291 +
          (((C145 - C144) * C21383 + (C147 - C146) * C21379 + C4906 * C21384 +
            C4907 * C21380 + C4908 * C21385 + C4909 * C21381) *
               C47105 * C47493 +
           ((C523 - C522) * C21383 + (C525 - C524) * C21379 + C5524 * C21384 +
            C5525 * C21380 + C6274 * C21385 + C6275 * C21381) *
               C47105 * C47482 +
           ((C531 - C530) * C21383 + (C533 - C532) * C21379 + C7002 * C21384 +
            C7003 * C21380 + (C5942 - C5943) * C21385 +
            (C5944 - C5945) * C21381) *
               C47105 * C47456) *
              C47156 * C292 +
          ((C164 * C21383 + C165 * C21379 + C4912 * C21384 + C4913 * C21380 +
            C361 * C21385 + C362 * C21381) *
               C47105 * C47493 +
           (C546 * C21383 + C547 * C21379 + C5526 * C21384 + C5527 * C21380 +
            (C1593 - C1594) * C21385 + (C1595 - C1596) * C21381) *
               C47105 * C47482 +
           (C548 * C21383 + C549 * C21379 + (C2176 - C2175) * C21384 +
            (C2178 - C2177) * C21380 +
            (C47376 * C1311 - C113 * C1294) * C21385 +
            (C47376 * C1321 - C113 * C1312) * C21381) *
               C47105 * C47456) *
              C47156 * C47447)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C47376 * C122 - C113 * C115) * C21383 +
            (C47376 * C136 - C113 * C123) * C21379 + (C4896 - C4897) * C21384 +
            (C4898 - C4899) * C21380 + C21497 * C21385 + C21498 * C21381) *
               C47105 * C47174 * C1078 +
           ((C4897 - C4896) * C21383 + (C4899 - C4898) * C21379 +
            (C4902 - C4903) * C21384 + (C4904 - C4905) * C21380 +
            (C5765 - C5764) * C21385 + (C5767 - C5766) * C21381) *
               C47105 * C47174 * C1079 +
           (C21497 * C21383 + C21498 * C21379 + (C5764 - C5765) * C21384 +
            (C5766 - C5767) * C21380 + (C5769 - C5768) * C21385 +
            (C5771 - C5770) * C21381) *
               C47105 * C47174 * C47453) *
              C47489 +
          (((C145 - C144) * C21383 + (C147 - C146) * C21379 + C4906 * C21384 +
            C4907 * C21380 + C4908 * C21385 + C4909 * C21381) *
               C47105 * C47174 * C1078 +
           (C4900 * C21383 + C4901 * C21379 + C4910 * C21384 + C4911 * C21380 +
            C6076 * C21385 + C6077 * C21381) *
               C47105 * C47174 * C1079 +
           (C4908 * C21383 + C4909 * C21379 + C6078 * C21384 + C6079 * C21380 +
            (C5772 - C5773) * C21385 + (C5774 - C5775) * C21381) *
               C47105 * C47174 * C47453) *
              C47476 +
          ((C164 * C21383 + C165 * C21379 + C4912 * C21384 + C4913 * C21380 +
            C361 * C21385 + C362 * C21381) *
               C47105 * C47174 * C1078 +
           (C359 * C21383 + C360 * C21379 + C4914 * C21384 + C4915 * C21380 +
            (C1435 - C1436) * C21385 + (C1437 - C1438) * C21381) *
               C47105 * C47174 * C1079 +
           (C361 * C21383 + C362 * C21379 + (C1436 - C1435) * C21384 +
            (C1438 - C1437) * C21380 +
            (C47376 * C1168 - C113 * C1157) * C21385 +
            (C47376 * C1175 - C113 * C1169) * C21381) *
               C47105 * C47174 * C47453) *
              C47447)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C47376 * C122 - C113 * C115) * C21383 +
           (C47376 * C136 - C113 * C123) * C21379 + (C4896 - C4897) * C21384 +
           (C4898 - C4899) * C21380 + C21497 * C21385 + C21498 * C21381) *
              C47105 * C47174 * C1146 +
          ((C4897 - C4896) * C21383 + (C4899 - C4898) * C21379 +
           (C4902 - C4903) * C21384 + (C4904 - C4905) * C21380 +
           C22127 * C21385 + C22128 * C21381) *
              C47105 * C47174 * C1147 +
          (C21497 * C21383 + C21498 * C21379 + (C5764 - C5765) * C21384 +
           (C5766 - C5767) * C21380 + C22129 * C21385 + C22130 * C21381) *
              C47105 * C47174 * C1148 +
          (C22127 * C21383 + C22128 * C21379 + (C5768 - C5769) * C21384 +
           (C5770 - C5771) * C21380 + (C22131 - C22132) * C21385 +
           (C22133 - C22134) * C21381) *
              C47105 * C47174 * C1149 +
          (C22129 * C21383 + C22130 * C21379 + (C22132 - C22131) * C21384 +
           (C22134 - C22133) * C21380 +
           (C47376 * C22123 - C113 * C22122) * C21385 +
           (C47376 * C22125 - C113 * C22124) * C21381) *
              C47105 * C47174 * C1150) *
         C47128) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C47376 * C122 - C113 * C115) * C21383 +
            (C47376 * C136 - C113 * C123) * C21379 + (C4896 - C4897) * C21384 +
            (C4898 - C4899) * C21380 + C21497 * C21385 + C21498 * C21381) *
               C47105 * C47493 +
           ((C113 * C481 - C47376 * C491) * C21383 +
            (C113 * C492 - C47376 * C511) * C21379 + (C5518 - C5519) * C21384 +
            (C5520 - C5521) * C21380 + C22249 * C21385 + C22250 * C21381) *
               C47105 * C47482 +
           ((C47376 * C497 - C113 * C484) * C21383 +
            (C47376 * C514 - C113 * C498) * C21379 + (C5930 - C5931) * C21384 +
            (C5932 - C5933) * C21380 + C22251 * C21385 + C22252 * C21381) *
               C47105 * C47456) *
              C1078 +
          (((C4897 - C4896) * C21383 + (C4899 - C4898) * C21379 +
            (C4902 - C4903) * C21384 + (C4904 - C4905) * C21380 +
            C22127 * C21385 + C22128 * C21381) *
               C47105 * C47493 +
           ((C5519 - C5518) * C21383 + (C5521 - C5520) * C21379 +
            (C5934 - C5935) * C21384 + (C5936 - C5937) * C21380 +
            (C6421 - C6420) * C21385 + (C6423 - C6422) * C21381) *
               C47105 * C47482 +
           ((C5931 - C5930) * C21383 + (C5933 - C5932) * C21379 +
            (C5938 - C5939) * C21384 + (C5940 - C5941) * C21380 +
            (C22253 - C22254) * C21385 + (C22255 - C22256) * C21381) *
               C47105 * C47456) *
              C1079 +
          ((C21497 * C21383 + C21498 * C21379 + (C5764 - C5765) * C21384 +
            (C5766 - C5767) * C21380 + C22129 * C21385 + C22130 * C21381) *
               C47105 * C47493 +
           (C22249 * C21383 + C22250 * C21379 + (C6420 - C6421) * C21384 +
            (C6422 - C6423) * C21380 +
            (C113 * C6411 - C47376 * C6413) * C21385 +
            (C113 * C6414 - C47376 * C6417) * C21381) *
               C47105 * C47482 +
           (C22251 * C21383 + C22252 * C21379 + (C22254 - C22253) * C21384 +
            (C22256 - C22255) * C21380 +
            (C47376 * C22245 - C113 * C22244) * C21385 +
            (C47376 * C22247 - C113 * C22246) * C21381) *
               C47105 * C47456) *
              C47453) *
         C47128) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C47376 * C122 - C113 * C115) * C21383 +
            (C47376 * C136 - C113 * C123) * C21379 + (C4896 - C4897) * C21384 +
            (C4898 - C4899) * C21380 + C21497 * C21385 + C21498 * C21381) *
               C47105 * C1816 +
           ((C113 * C481 - C47376 * C491) * C21383 +
            (C113 * C492 - C47376 * C511) * C21379 + (C5518 - C5519) * C21384 +
            (C5520 - C5521) * C21380 + C22249 * C21385 + C22250 * C21381) *
               C47105 * C1817 +
           ((C47376 * C497 - C113 * C484) * C21383 +
            (C47376 * C514 - C113 * C498) * C21379 + (C5930 - C5931) * C21384 +
            (C5932 - C5933) * C21380 + C22251 * C21385 + C22252 * C21381) *
               C47105 * C47456) *
              C47156 * C47489 +
          (((C145 - C144) * C21383 + (C147 - C146) * C21379 + C4906 * C21384 +
            C4907 * C21380 + C4908 * C21385 + C4909 * C21381) *
               C47105 * C1816 +
           ((C523 - C522) * C21383 + (C525 - C524) * C21379 + C5524 * C21384 +
            C5525 * C21380 + C6274 * C21385 + C6275 * C21381) *
               C47105 * C1817 +
           ((C531 - C530) * C21383 + (C533 - C532) * C21379 + C7002 * C21384 +
            C7003 * C21380 + (C5942 - C5943) * C21385 +
            (C5944 - C5945) * C21381) *
               C47105 * C47456) *
              C47156 * C47476 +
          ((C164 * C21383 + C165 * C21379 + C4912 * C21384 + C4913 * C21380 +
            C361 * C21385 + C362 * C21381) *
               C47105 * C1816 +
           (C546 * C21383 + C547 * C21379 + C5526 * C21384 + C5527 * C21380 +
            (C1593 - C1594) * C21385 + (C1595 - C1596) * C21381) *
               C47105 * C1817 +
           (C548 * C21383 + C549 * C21379 + (C2176 - C2175) * C21384 +
            (C2178 - C2177) * C21380 +
            (C47376 * C1311 - C113 * C1294) * C21385 +
            (C47376 * C1321 - C113 * C1312) * C21381) *
               C47105 * C47456) *
              C47156 * C47447)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C47376 * C122 - C113 * C115) * C21383 +
            (C47376 * C136 - C113 * C123) * C21379 + (C4896 - C4897) * C21384 +
            (C4898 - C4899) * C21380 + C21497 * C21385 + C21498 * C21381) *
               C47105 * C1816 +
           ((C113 * C481 - C47376 * C491) * C21383 +
            (C113 * C492 - C47376 * C511) * C21379 + (C5518 - C5519) * C21384 +
            (C5520 - C5521) * C21380 + C22249 * C21385 + C22250 * C21381) *
               C47105 * C1817 +
           ((C47376 * C497 - C113 * C484) * C21383 +
            (C47376 * C514 - C113 * C498) * C21379 + (C5930 - C5931) * C21384 +
            (C5932 - C5933) * C21380 + C22251 * C21385 + C22252 * C21381) *
               C47105 * C47456) *
              C47492 +
          (((C4897 - C4896) * C21383 + (C4899 - C4898) * C21379 +
            (C4902 - C4903) * C21384 + (C4904 - C4905) * C21380 +
            C22127 * C21385 + C22128 * C21381) *
               C47105 * C1816 +
           ((C5519 - C5518) * C21383 + (C5521 - C5520) * C21379 +
            (C5934 - C5935) * C21384 + (C5936 - C5937) * C21380 +
            C22603 * C21385 + C22604 * C21381) *
               C47105 * C1817 +
           ((C5931 - C5930) * C21383 + (C5933 - C5932) * C21379 +
            (C5938 - C5939) * C21384 + (C5940 - C5941) * C21380 +
            (C22253 - C22254) * C21385 + (C22255 - C22256) * C21381) *
               C47105 * C47456) *
              C47480 +
          ((C21497 * C21383 + C21498 * C21379 + (C5764 - C5765) * C21384 +
            (C5766 - C5767) * C21380 + C22129 * C21385 + C22130 * C21381) *
               C47105 * C1816 +
           (C22249 * C21383 + C22250 * C21379 + (C6420 - C6421) * C21384 +
            (C6422 - C6423) * C21380 + (C22605 - C22606) * C21385 +
            (C22607 - C22608) * C21381) *
               C47105 * C1817 +
           (C22251 * C21383 + C22252 * C21379 + (C22254 - C22253) * C21384 +
            (C22256 - C22255) * C21380 +
            (C47376 * C22245 - C113 * C22244) * C21385 +
            (C47376 * C22247 - C113 * C22246) * C21381) *
               C47105 * C47456) *
              C47453) *
         C47128) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C47376 * C122 - C113 * C115) * C21383 +
           (C47376 * C136 - C113 * C123) * C21379 + (C4896 - C4897) * C21384 +
           (C4898 - C4899) * C21380 + C21497 * C21385 + C21498 * C21381) *
              C47105 * C1991 +
          ((C113 * C481 - C47376 * C491) * C21383 +
           (C113 * C492 - C47376 * C511) * C21379 + (C5518 - C5519) * C21384 +
           (C5520 - C5521) * C21380 + C22249 * C21385 + C22250 * C21381) *
              C47105 * C1992 +
          ((C47376 * C497 - C113 * C484) * C21383 +
           (C47376 * C514 - C113 * C498) * C21379 + (C5930 - C5931) * C21384 +
           (C5932 - C5933) * C21380 + C22251 * C21385 + C22252 * C21381) *
              C47105 * C1993 +
          ((C113 * C1996 - C47376 * C2002) * C21383 +
           (C113 * C2003 - C47376 * C2014) * C21379 + (C7276 - C7277) * C21384 +
           (C7278 - C7279) * C21380 + (C113 * C7267 - C47376 * C7269) * C21385 +
           (C113 * C7270 - C47376 * C7273) * C21381) *
              C47105 * C1994 +
          ((C47376 * C2008 - C113 * C1999) * C21383 +
           (C47376 * C2017 - C113 * C2009) * C21379 +
           (C47376 * C6799 - C113 * C6797) * C21384 +
           (C47376 * C6803 - C113 * C6800) * C21380 +
           (C47376 * C22891 - C113 * C22890) * C21385 +
           (C47376 * C22893 - C113 * C22892) * C21381) *
              C47105 * C1995) *
         C47156 * C47128) /
            (p * q * std::sqrt(p + q));
    d2ee[113] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C47376 * C122 - C113 * C115) * C21383 +
             (C47376 * C136 - C113 * C123) * C21379 + (C4896 - C4897) * C21384 +
             (C4898 - C4899) * C21380 + C21497 * C21385 + C21498 * C21381) *
                C47105 * C47422 +
            ((C113 * C481 - C47376 * C491) * C21383 +
             (C113 * C492 - C47376 * C511) * C21379 + (C5518 - C5519) * C21384 +
             (C5520 - C5521) * C21380 + C22249 * C21385 + C22250 * C21381) *
                C47105 * C47261) *
               C1078 +
           (((C4897 - C4896) * C21383 + (C4899 - C4898) * C21379 +
             (C4902 - C4903) * C21384 + (C4904 - C4905) * C21380 +
             C22127 * C21385 + C22128 * C21381) *
                C47105 * C47422 +
            ((C5519 - C5518) * C21383 + (C5521 - C5520) * C21379 +
             (C5934 - C5935) * C21384 + (C5936 - C5937) * C21380 +
             (C6421 - C6420) * C21385 + (C6423 - C6422) * C21381) *
                C47105 * C47261) *
               C1079 +
           ((C21497 * C21383 + C21498 * C21379 + (C5764 - C5765) * C21384 +
             (C5766 - C5767) * C21380 + C22129 * C21385 + C22130 * C21381) *
                C47105 * C47422 +
            (C22249 * C21383 + C22250 * C21379 + (C6420 - C6421) * C21384 +
             (C6422 - C6423) * C21380 +
             (C113 * C6411 - C47376 * C6413) * C21385 +
             (C113 * C6414 - C47376 * C6417) * C21381) *
                C47105 * C47261) *
               C47453) *
              C47407 +
          ((((C145 - C144) * C21383 + (C147 - C146) * C21379 + C4906 * C21384 +
             C4907 * C21380 + C4908 * C21385 + C4909 * C21381) *
                C47105 * C47422 +
            ((C523 - C522) * C21383 + (C525 - C524) * C21379 + C5524 * C21384 +
             C5525 * C21380 + C6274 * C21385 + C6275 * C21381) *
                C47105 * C47261) *
               C1078 +
           ((C4900 * C21383 + C4901 * C21379 + C4910 * C21384 + C4911 * C21380 +
             C6076 * C21385 + C6077 * C21381) *
                C47105 * C47422 +
            (C5522 * C21383 + C5523 * C21379 + C6276 * C21384 + C6277 * C21380 +
             (C6278 - C6279) * C21385 + (C6280 - C6281) * C21381) *
                C47105 * C47261) *
               C1079 +
           ((C4908 * C21383 + C4909 * C21379 + C6078 * C21384 + C6079 * C21380 +
             (C5772 - C5773) * C21385 + (C5774 - C5775) * C21381) *
                C47105 * C47422 +
            (C6274 * C21383 + C6275 * C21379 + (C6279 - C6278) * C21384 +
             (C6281 - C6280) * C21380 +
             (C47376 * C6415 - C113 * C6412) * C21385 +
             (C47376 * C6418 - C113 * C6416) * C21381) *
                C47105 * C47261) *
               C47453) *
              C47139)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C47376 * C122 - C113 * C115) * C21383 +
            (C47376 * C136 - C113 * C123) * C21379 + (C4896 - C4897) * C21384 +
            (C4898 - C4899) * C21380 + C21497 * C21385 + C21498 * C21381) *
               C47105 * C47422 +
           ((C113 * C481 - C47376 * C491) * C21383 +
            (C113 * C492 - C47376 * C511) * C21379 + (C5518 - C5519) * C21384 +
            (C5520 - C5521) * C21380 + (C5935 - C5934) * C21385 +
            (C5937 - C5936) * C21381) *
               C47105 * C47261) *
              C47156 * C655 +
          (((C145 - C144) * C21383 + (C147 - C146) * C21379 + C4906 * C21384 +
            C4907 * C21380 + C4908 * C21385 + C4909 * C21381) *
               C47105 * C47422 +
           ((C523 - C522) * C21383 + (C525 - C524) * C21379 + C5524 * C21384 +
            C5525 * C21380 + C6274 * C21385 + C6275 * C21381) *
               C47105 * C47261) *
              C47156 * C656 +
          ((C164 * C21383 + C165 * C21379 + C4912 * C21384 + C4913 * C21380 +
            C361 * C21385 + C362 * C21381) *
               C47105 * C47422 +
           (C546 * C21383 + C547 * C21379 + C5526 * C21384 + C5527 * C21380 +
            (C1593 - C1594) * C21385 + (C1595 - C1596) * C21381) *
               C47105 * C47261) *
              C47156 * C657 +
          ((C166 * C21383 + C167 * C21379 + C5192 * C21384 + C5193 * C21380 +
            (C355 - C356) * C21385 + (C357 - C358) * C21381) *
               C47105 * C47422 +
           (C777 * C21383 + C778 * C21379 + (C961 - C960) * C21384 +
            (C963 - C962) * C21380 + (C47376 * C1585 - C113 * C1584) * C21385 +
            (C47376 * C1587 - C113 * C1586) * C21381) *
               C47105 * C47261) *
              C47156 * C47457)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C47376 * C122 - C113 * C115) * C21383 +
            (C47376 * C136 - C113 * C123) * C21379 + (C4896 - C4897) * C21384 +
            (C4898 - C4899) * C21380 + C21497 * C21385 + C21498 * C21381) *
               C47105 * C2276 +
           ((C113 * C481 - C47376 * C491) * C21383 +
            (C113 * C492 - C47376 * C511) * C21379 + (C5518 - C5519) * C21384 +
            (C5520 - C5521) * C21380 + C22249 * C21385 + C22250 * C21381) *
               C47105 * C2277 +
           ((C47376 * C497 - C113 * C484) * C21383 +
            (C47376 * C514 - C113 * C498) * C21379 + (C5930 - C5931) * C21384 +
            (C5932 - C5933) * C21380 + C22251 * C21385 + C22252 * C21381) *
               C47105 * C2278 +
           ((C113 * C1996 - C47376 * C2002) * C21383 +
            (C113 * C2003 - C47376 * C2014) * C21379 +
            (C7276 - C7277) * C21384 + (C7278 - C7279) * C21380 +
            (C113 * C7267 - C47376 * C7269) * C21385 +
            (C113 * C7270 - C47376 * C7273) * C21381) *
               C47105 * C47469) *
              C47156 * C47407 +
          (((C145 - C144) * C21383 + (C147 - C146) * C21379 + C4906 * C21384 +
            C4907 * C21380 + C4908 * C21385 + C4909 * C21381) *
               C47105 * C2276 +
           ((C523 - C522) * C21383 + (C525 - C524) * C21379 + C5524 * C21384 +
            C5525 * C21380 + C6274 * C21385 + C6275 * C21381) *
               C47105 * C2277 +
           ((C531 - C530) * C21383 + (C533 - C532) * C21379 + C7002 * C21384 +
            C7003 * C21380 + (C5942 - C5943) * C21385 +
            (C5944 - C5945) * C21381) *
               C47105 * C2278 +
           ((C2286 - C2285) * C21383 + (C2288 - C2287) * C21379 +
            (C7135 - C7134) * C21384 + (C7137 - C7136) * C21380 +
            (C47376 * C7271 - C113 * C7268) * C21385 +
            (C47376 * C7274 - C113 * C7272) * C21381) *
               C47105 * C47469) *
              C47156 * C47139)) /
            (p * q * std::sqrt(p + q));
    d2ee[114] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C47376 * C122 - C113 * C115) * C21383 +
            (C47376 * C136 - C113 * C123) * C21379 + (C4896 - C4897) * C21384 +
            (C4898 - C4899) * C21380 + C21497 * C21385 + C21498 * C21381) *
               C47105 * C47174 * C47492 +
           ((C4897 - C4896) * C21383 + (C4899 - C4898) * C21379 +
            (C4902 - C4903) * C21384 + (C4904 - C4905) * C21380 +
            (C5765 - C5764) * C21385 + (C5767 - C5766) * C21381) *
               C47105 * C47174 * C47480 +
           (C21497 * C21383 + C21498 * C21379 + (C5764 - C5765) * C21384 +
            (C5766 - C5767) * C21380 + (C5769 - C5768) * C21385 +
            (C5771 - C5770) * C21381) *
               C47105 * C47174 * C47453) *
              C291 +
          (((C145 - C144) * C21383 + (C147 - C146) * C21379 + C4906 * C21384 +
            C4907 * C21380 + C4908 * C21385 + C4909 * C21381) *
               C47105 * C47174 * C47492 +
           (C4900 * C21383 + C4901 * C21379 + C4910 * C21384 + C4911 * C21380 +
            C6076 * C21385 + C6077 * C21381) *
               C47105 * C47174 * C47480 +
           (C4908 * C21383 + C4909 * C21379 + C6078 * C21384 + C6079 * C21380 +
            (C5772 - C5773) * C21385 + (C5774 - C5775) * C21381) *
               C47105 * C47174 * C47453) *
              C292 +
          ((C164 * C21383 + C165 * C21379 + C4912 * C21384 + C4913 * C21380 +
            C361 * C21385 + C362 * C21381) *
               C47105 * C47174 * C47492 +
           (C359 * C21383 + C360 * C21379 + C4914 * C21384 + C4915 * C21380 +
            (C1435 - C1436) * C21385 + (C1437 - C1438) * C21381) *
               C47105 * C47174 * C47480 +
           (C361 * C21383 + C362 * C21379 + (C1436 - C1435) * C21384 +
            (C1438 - C1437) * C21380 +
            (C47376 * C1168 - C113 * C1157) * C21385 +
            (C47376 * C1175 - C113 * C1169) * C21381) *
               C47105 * C47174 * C47453) *
              C47447)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C47376 * C122 - C113 * C115) * C21383 +
           (C47376 * C136 - C113 * C123) * C21379 + (C4896 - C4897) * C21384 +
           (C4898 - C4899) * C21380 + (C4903 - C4902) * C21385 +
           (C4905 - C4904) * C21381) *
              C47105 * C47174 * C47156 * C108 +
          ((C145 - C144) * C21383 + (C147 - C146) * C21379 + C4906 * C21384 +
           C4907 * C21380 + C4908 * C21385 + C4909 * C21381) *
              C47105 * C47174 * C47156 * C109 +
          (C164 * C21383 + C165 * C21379 + C4912 * C21384 + C4913 * C21380 +
           C361 * C21385 + C362 * C21381) *
              C47105 * C47174 * C47156 * C110 +
          (C166 * C21383 + C167 * C21379 + C5192 * C21384 + C5193 * C21380 +
           (C355 - C356) * C21385 + (C357 - C358) * C21381) *
              C47105 * C47174 * C47156 * C111 +
          (C168 * C21383 + C169 * C21379 + (C667 - C666) * C21384 +
           (C669 - C668) * C21380 + (C47376 * C322 - C113 * C303) * C21385 +
           (C47376 * C333 - C113 * C323) * C21381) *
              C47105 * C47174 * C47156 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C47376 * C122 - C113 * C115) * C21383 +
            (C47376 * C136 - C113 * C123) * C21379 + (C4896 - C4897) * C21384 +
            (C4898 - C4899) * C21380 + C21497 * C21385 + C21498 * C21381) *
               C47105 * C47174 * C1078 +
           ((C4897 - C4896) * C21383 + (C4899 - C4898) * C21379 +
            (C4902 - C4903) * C21384 + (C4904 - C4905) * C21380 +
            (C5765 - C5764) * C21385 + (C5767 - C5766) * C21381) *
               C47105 * C47174 * C1079 +
           (C21497 * C21383 + C21498 * C21379 + (C5764 - C5765) * C21384 +
            (C5766 - C5767) * C21380 + (C5769 - C5768) * C21385 +
            (C5771 - C5770) * C21381) *
               C47105 * C47174 * C47453) *
              C47489 +
          (((C145 - C144) * C21383 + (C147 - C146) * C21379 + C4906 * C21384 +
            C4907 * C21380 + C4908 * C21385 + C4909 * C21381) *
               C47105 * C47174 * C1078 +
           (C4900 * C21383 + C4901 * C21379 + C4910 * C21384 + C4911 * C21380 +
            C6076 * C21385 + C6077 * C21381) *
               C47105 * C47174 * C1079 +
           (C4908 * C21383 + C4909 * C21379 + C6078 * C21384 + C6079 * C21380 +
            (C5772 - C5773) * C21385 + (C5774 - C5775) * C21381) *
               C47105 * C47174 * C47453) *
              C47476 +
          ((C164 * C21383 + C165 * C21379 + C4912 * C21384 + C4913 * C21380 +
            C361 * C21385 + C362 * C21381) *
               C47105 * C47174 * C1078 +
           (C359 * C21383 + C360 * C21379 + C4914 * C21384 + C4915 * C21380 +
            (C1435 - C1436) * C21385 + (C1437 - C1438) * C21381) *
               C47105 * C47174 * C1079 +
           (C361 * C21383 + C362 * C21379 + (C1436 - C1435) * C21384 +
            (C1438 - C1437) * C21380 +
            (C47376 * C1168 - C113 * C1157) * C21385 +
            (C47376 * C1175 - C113 * C1169) * C21381) *
               C47105 * C47174 * C47453) *
              C47447)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C47376 * C122 - C113 * C115) * C21383 +
           (C47376 * C136 - C113 * C123) * C21379 + (C4896 - C4897) * C21384 +
           (C4898 - C4899) * C21380 + C21497 * C21385 + C21498 * C21381) *
              C47105 * C47174 * C1146 +
          ((C4897 - C4896) * C21383 + (C4899 - C4898) * C21379 +
           (C4902 - C4903) * C21384 + (C4904 - C4905) * C21380 +
           C22127 * C21385 + C22128 * C21381) *
              C47105 * C47174 * C1147 +
          (C21497 * C21383 + C21498 * C21379 + (C5764 - C5765) * C21384 +
           (C5766 - C5767) * C21380 + C22129 * C21385 + C22130 * C21381) *
              C47105 * C47174 * C1148 +
          (C22127 * C21383 + C22128 * C21379 + (C5768 - C5769) * C21384 +
           (C5770 - C5771) * C21380 + (C22131 - C22132) * C21385 +
           (C22133 - C22134) * C21381) *
              C47105 * C47174 * C1149 +
          (C22129 * C21383 + C22130 * C21379 + (C22132 - C22131) * C21384 +
           (C22134 - C22133) * C21380 +
           (C47376 * C22123 - C113 * C22122) * C21385 +
           (C47376 * C22125 - C113 * C22124) * C21381) *
              C47105 * C47174 * C1150) *
         C47128) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C47376 * C122 - C113 * C115) * C21383 +
            (C47376 * C136 - C113 * C123) * C21379 + (C4896 - C4897) * C21384 +
            (C4898 - C4899) * C21380 + C21497 * C21385 + C21498 * C21381) *
               C47105 * C1816 +
           ((C113 * C481 - C47376 * C491) * C21383 +
            (C113 * C492 - C47376 * C511) * C21379 + (C5518 - C5519) * C21384 +
            (C5520 - C5521) * C21380 + C22249 * C21385 + C22250 * C21381) *
               C47105 * C1817 +
           ((C47376 * C497 - C113 * C484) * C21383 +
            (C47376 * C514 - C113 * C498) * C21379 + (C5930 - C5931) * C21384 +
            (C5932 - C5933) * C21380 + C22251 * C21385 + C22252 * C21381) *
               C47105 * C47456) *
              C47156 * C47489 +
          (((C145 - C144) * C21383 + (C147 - C146) * C21379 + C4906 * C21384 +
            C4907 * C21380 + C4908 * C21385 + C4909 * C21381) *
               C47105 * C1816 +
           ((C523 - C522) * C21383 + (C525 - C524) * C21379 + C5524 * C21384 +
            C5525 * C21380 + C6274 * C21385 + C6275 * C21381) *
               C47105 * C1817 +
           ((C531 - C530) * C21383 + (C533 - C532) * C21379 + C7002 * C21384 +
            C7003 * C21380 + (C5942 - C5943) * C21385 +
            (C5944 - C5945) * C21381) *
               C47105 * C47456) *
              C47156 * C47476 +
          ((C164 * C21383 + C165 * C21379 + C4912 * C21384 + C4913 * C21380 +
            C361 * C21385 + C362 * C21381) *
               C47105 * C1816 +
           (C546 * C21383 + C547 * C21379 + C5526 * C21384 + C5527 * C21380 +
            (C1593 - C1594) * C21385 + (C1595 - C1596) * C21381) *
               C47105 * C1817 +
           (C548 * C21383 + C549 * C21379 + (C2176 - C2175) * C21384 +
            (C2178 - C2177) * C21380 +
            (C47376 * C1311 - C113 * C1294) * C21385 +
            (C47376 * C1321 - C113 * C1312) * C21381) *
               C47105 * C47456) *
              C47156 * C47447)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C47376 * C122 - C113 * C115) * C21383 +
            (C47376 * C136 - C113 * C123) * C21379 + (C4896 - C4897) * C21384 +
            (C4898 - C4899) * C21380 + C21497 * C21385 + C21498 * C21381) *
               C47105 * C1816 +
           ((C113 * C481 - C47376 * C491) * C21383 +
            (C113 * C492 - C47376 * C511) * C21379 + (C5518 - C5519) * C21384 +
            (C5520 - C5521) * C21380 + C22249 * C21385 + C22250 * C21381) *
               C47105 * C1817 +
           ((C47376 * C497 - C113 * C484) * C21383 +
            (C47376 * C514 - C113 * C498) * C21379 + (C5930 - C5931) * C21384 +
            (C5932 - C5933) * C21380 + C22251 * C21385 + C22252 * C21381) *
               C47105 * C47456) *
              C47492 +
          (((C4897 - C4896) * C21383 + (C4899 - C4898) * C21379 +
            (C4902 - C4903) * C21384 + (C4904 - C4905) * C21380 +
            C22127 * C21385 + C22128 * C21381) *
               C47105 * C1816 +
           ((C5519 - C5518) * C21383 + (C5521 - C5520) * C21379 +
            (C5934 - C5935) * C21384 + (C5936 - C5937) * C21380 +
            C22603 * C21385 + C22604 * C21381) *
               C47105 * C1817 +
           ((C5931 - C5930) * C21383 + (C5933 - C5932) * C21379 +
            (C5938 - C5939) * C21384 + (C5940 - C5941) * C21380 +
            (C22253 - C22254) * C21385 + (C22255 - C22256) * C21381) *
               C47105 * C47456) *
              C47480 +
          ((C21497 * C21383 + C21498 * C21379 + (C5764 - C5765) * C21384 +
            (C5766 - C5767) * C21380 + C22129 * C21385 + C22130 * C21381) *
               C47105 * C1816 +
           (C22249 * C21383 + C22250 * C21379 + (C6420 - C6421) * C21384 +
            (C6422 - C6423) * C21380 + (C22605 - C22606) * C21385 +
            (C22607 - C22608) * C21381) *
               C47105 * C1817 +
           (C22251 * C21383 + C22252 * C21379 + (C22254 - C22253) * C21384 +
            (C22256 - C22255) * C21380 +
            (C47376 * C22245 - C113 * C22244) * C21385 +
            (C47376 * C22247 - C113 * C22246) * C21381) *
               C47105 * C47456) *
              C47453) *
         C47128) /
            (p * q * std::sqrt(p + q));
    d2ee[115] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C47376 * C122 - C113 * C115) * C21383 +
             (C47376 * C136 - C113 * C123) * C21379 + (C4896 - C4897) * C21384 +
             (C4898 - C4899) * C21380 + C21497 * C21385 + C21498 * C21381) *
                C47105 * C3262 +
            ((C113 * C481 - C47376 * C491) * C21383 +
             (C113 * C492 - C47376 * C511) * C21379 + (C5518 - C5519) * C21384 +
             (C5520 - C5521) * C21380 + C22249 * C21385 + C22250 * C21381) *
                C47105 * C47261) *
               C47421 +
           (((C4897 - C4896) * C21383 + (C4899 - C4898) * C21379 +
             (C4902 - C4903) * C21384 + (C4904 - C4905) * C21380 +
             C22127 * C21385 + C22128 * C21381) *
                C47105 * C3262 +
            ((C5519 - C5518) * C21383 + (C5521 - C5520) * C21379 +
             (C5934 - C5935) * C21384 + (C5936 - C5937) * C21380 +
             C22603 * C21385 + C22604 * C21381) *
                C47105 * C47261) *
               C47219) *
              C47133 +
          ((((C145 - C144) * C21383 + (C147 - C146) * C21379 + C4906 * C21384 +
             C4907 * C21380 + C4908 * C21385 + C4909 * C21381) *
                C47105 * C3262 +
            ((C523 - C522) * C21383 + (C525 - C524) * C21379 + C5524 * C21384 +
             C5525 * C21380 + C6274 * C21385 + C6275 * C21381) *
                C47105 * C47261) *
               C47421 +
           ((C4900 * C21383 + C4901 * C21379 + C4910 * C21384 + C4911 * C21380 +
             C6076 * C21385 + C6077 * C21381) *
                C47105 * C3262 +
            (C5522 * C21383 + C5523 * C21379 + C6276 * C21384 + C6277 * C21380 +
             (C6278 - C6279) * C21385 + (C6280 - C6281) * C21381) *
                C47105 * C47261) *
               C47219) *
              C47142 +
          (((C164 * C21383 + C165 * C21379 + C4912 * C21384 + C4913 * C21380 +
             C361 * C21385 + C362 * C21381) *
                C47105 * C3262 +
            (C546 * C21383 + C547 * C21379 + C5526 * C21384 + C5527 * C21380 +
             (C1593 - C1594) * C21385 + (C1595 - C1596) * C21381) *
                C47105 * C47261) *
               C47421 +
           ((C359 * C21383 + C360 * C21379 + C4914 * C21384 + C4915 * C21380 +
             (C1435 - C1436) * C21385 + (C1437 - C1438) * C21381) *
                C47105 * C3262 +
            (C964 * C21383 + C965 * C21379 + (C1594 - C1593) * C21384 +
             (C1596 - C1595) * C21380 +
             (C47376 * C1701 - C113 * C1696) * C21385 +
             (C47376 * C1705 - C113 * C1702) * C21381) *
                C47105 * C47261) *
               C47219) *
              C2871)) /
        (p * q * std::sqrt(p + q));
    d2ee[116] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C47376 * C122 - C113 * C115) * C21383 +
             (C47376 * C136 - C113 * C123) * C21379 + (C4896 - C4897) * C21384 +
             (C4898 - C4899) * C21380 + C21497 * C21385 + C21498 * C21381) *
                C47105 * C47257 +
            ((C113 * C481 - C47376 * C491) * C21383 +
             (C113 * C492 - C47376 * C511) * C21379 + (C5518 - C5519) * C21384 +
             (C5520 - C5521) * C21380 + C22249 * C21385 + C22250 * C21381) *
                C47105 * C47264 +
            ((C47376 * C497 - C113 * C484) * C21383 +
             (C47376 * C514 - C113 * C498) * C21379 + (C5930 - C5931) * C21384 +
             (C5932 - C5933) * C21380 + C22251 * C21385 + C22252 * C21381) *
                C47105 * C3770) *
               C47421 +
           (((C4897 - C4896) * C21383 + (C4899 - C4898) * C21379 +
             (C4902 - C4903) * C21384 + (C4904 - C4905) * C21380 +
             C22127 * C21385 + C22128 * C21381) *
                C47105 * C47257 +
            ((C5519 - C5518) * C21383 + (C5521 - C5520) * C21379 +
             (C5934 - C5935) * C21384 + (C5936 - C5937) * C21380 +
             C22603 * C21385 + C22604 * C21381) *
                C47105 * C47264 +
            ((C5931 - C5930) * C21383 + (C5933 - C5932) * C21379 +
             (C5938 - C5939) * C21384 + (C5940 - C5941) * C21380 +
             (C22253 - C22254) * C21385 + (C22255 - C22256) * C21381) *
                C47105 * C3770) *
               C47219) *
              C2608 +
          ((((C145 - C144) * C21383 + (C147 - C146) * C21379 + C4906 * C21384 +
             C4907 * C21380 + C4908 * C21385 + C4909 * C21381) *
                C47105 * C47257 +
            ((C523 - C522) * C21383 + (C525 - C524) * C21379 + C5524 * C21384 +
             C5525 * C21380 + C6274 * C21385 + C6275 * C21381) *
                C47105 * C47264 +
            ((C531 - C530) * C21383 + (C533 - C532) * C21379 + C7002 * C21384 +
             C7003 * C21380 + (C5942 - C5943) * C21385 +
             (C5944 - C5945) * C21381) *
                C47105 * C3770) *
               C47421 +
           ((C4900 * C21383 + C4901 * C21379 + C4910 * C21384 + C4911 * C21380 +
             C6076 * C21385 + C6077 * C21381) *
                C47105 * C47257 +
            (C5522 * C21383 + C5523 * C21379 + C6276 * C21384 + C6277 * C21380 +
             (C6278 - C6279) * C21385 + (C6280 - C6281) * C21381) *
                C47105 * C47264 +
            (C7000 * C21383 + C7001 * C21379 + (C5943 - C5942) * C21384 +
             (C5945 - C5944) * C21380 +
             (C47376 * C5925 - C113 * C5922) * C21385 +
             (C47376 * C5928 - C113 * C5926) * C21381) *
                C47105 * C3770) *
               C47219) *
              C47139)) /
        (p * q * std::sqrt(p + q));
    d2ee[117] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C47376 * C122 - C113 * C115) * C21383 +
             (C47376 * C136 - C113 * C123) * C21379 + (C4896 - C4897) * C21384 +
             (C4898 - C4899) * C21380 + C21497 * C21385 + C21498 * C21381) *
                C47105 * C3262 +
            ((C113 * C481 - C47376 * C491) * C21383 +
             (C113 * C492 - C47376 * C511) * C21379 + (C5518 - C5519) * C21384 +
             (C5520 - C5521) * C21380 + C22249 * C21385 + C22250 * C21381) *
                C47105 * C47261) *
               C47492 +
           (((C4897 - C4896) * C21383 + (C4899 - C4898) * C21379 +
             (C4902 - C4903) * C21384 + (C4904 - C4905) * C21380 +
             C22127 * C21385 + C22128 * C21381) *
                C47105 * C3262 +
            ((C5519 - C5518) * C21383 + (C5521 - C5520) * C21379 +
             (C5934 - C5935) * C21384 + (C5936 - C5937) * C21380 +
             C22603 * C21385 + C22604 * C21381) *
                C47105 * C47261) *
               C47480 +
           ((C21497 * C21383 + C21498 * C21379 + (C5764 - C5765) * C21384 +
             (C5766 - C5767) * C21380 + C22129 * C21385 + C22130 * C21381) *
                C47105 * C3262 +
            (C22249 * C21383 + C22250 * C21379 + (C6420 - C6421) * C21384 +
             (C6422 - C6423) * C21380 + (C22605 - C22606) * C21385 +
             (C22607 - C22608) * C21381) *
                C47105 * C47261) *
               C47453) *
              C2608 +
          ((((C145 - C144) * C21383 + (C147 - C146) * C21379 + C4906 * C21384 +
             C4907 * C21380 + C4908 * C21385 + C4909 * C21381) *
                C47105 * C3262 +
            ((C523 - C522) * C21383 + (C525 - C524) * C21379 + C5524 * C21384 +
             C5525 * C21380 + C6274 * C21385 + C6275 * C21381) *
                C47105 * C47261) *
               C47492 +
           ((C4900 * C21383 + C4901 * C21379 + C4910 * C21384 + C4911 * C21380 +
             C6076 * C21385 + C6077 * C21381) *
                C47105 * C3262 +
            (C5522 * C21383 + C5523 * C21379 + C6276 * C21384 + C6277 * C21380 +
             (C6278 - C6279) * C21385 + (C6280 - C6281) * C21381) *
                C47105 * C47261) *
               C47480 +
           ((C4908 * C21383 + C4909 * C21379 + C6078 * C21384 + C6079 * C21380 +
             (C5772 - C5773) * C21385 + (C5774 - C5775) * C21381) *
                C47105 * C3262 +
            (C6274 * C21383 + C6275 * C21379 + (C6279 - C6278) * C21384 +
             (C6281 - C6280) * C21380 +
             (C47376 * C6415 - C113 * C6412) * C21385 +
             (C47376 * C6418 - C113 * C6416) * C21381) *
                C47105 * C47261) *
               C47453) *
              C47139)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C47376 * C122 - C113 * C115) * C21383 +
            (C47376 * C136 - C113 * C123) * C21379 + (C4896 - C4897) * C21384 +
            (C4898 - C4899) * C21380 + C21497 * C21385 + C21498 * C21381) *
               C47105 * C3262 +
           ((C113 * C481 - C47376 * C491) * C21383 +
            (C113 * C492 - C47376 * C511) * C21379 + (C5518 - C5519) * C21384 +
            (C5520 - C5521) * C21380 + C22249 * C21385 + C22250 * C21381) *
               C47105 * C47261) *
              C47156 * C47498 +
          (((C145 - C144) * C21383 + (C147 - C146) * C21379 + C4906 * C21384 +
            C4907 * C21380 + C4908 * C21385 + C4909 * C21381) *
               C47105 * C3262 +
           ((C523 - C522) * C21383 + (C525 - C524) * C21379 + C5524 * C21384 +
            C5525 * C21380 + C6274 * C21385 + C6275 * C21381) *
               C47105 * C47261) *
              C47156 * C47491 +
          ((C164 * C21383 + C165 * C21379 + C4912 * C21384 + C4913 * C21380 +
            C361 * C21385 + C362 * C21381) *
               C47105 * C3262 +
           (C546 * C21383 + C547 * C21379 + C5526 * C21384 + C5527 * C21380 +
            (C1593 - C1594) * C21385 + (C1595 - C1596) * C21381) *
               C47105 * C47261) *
              C47156 * C47478 +
          ((C166 * C21383 + C167 * C21379 + C5192 * C21384 + C5193 * C21380 +
            (C355 - C356) * C21385 + (C357 - C358) * C21381) *
               C47105 * C3262 +
           (C777 * C21383 + C778 * C21379 + (C961 - C960) * C21384 +
            (C963 - C962) * C21380 + (C47376 * C1585 - C113 * C1584) * C21385 +
            (C47376 * C1587 - C113 * C1586) * C21381) *
               C47105 * C47261) *
              C47156 * C47457)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C47376 * C122 - C113 * C115) * C21383 +
            (C47376 * C136 - C113 * C123) * C21379 + (C4896 - C4897) * C21384 +
            (C4898 - C4899) * C21380 + C21497 * C21385 + C21498 * C21381) *
               C47105 * C47500 +
           ((C113 * C481 - C47376 * C491) * C21383 +
            (C113 * C492 - C47376 * C511) * C21379 + (C5518 - C5519) * C21384 +
            (C5520 - C5521) * C21380 + C22249 * C21385 + C22250 * C21381) *
               C47105 * C47497 +
           ((C47376 * C497 - C113 * C484) * C21383 +
            (C47376 * C514 - C113 * C498) * C21379 + (C5930 - C5931) * C21384 +
            (C5932 - C5933) * C21380 + C22251 * C21385 + C22252 * C21381) *
               C47105 * C47488 +
           ((C113 * C1996 - C47376 * C2002) * C21383 +
            (C113 * C2003 - C47376 * C2014) * C21379 +
            (C7276 - C7277) * C21384 + (C7278 - C7279) * C21380 +
            (C23241 - C23242) * C21385 + (C23243 - C23244) * C21381) *
               C47105 * C47469) *
              C47156 * C2608 +
          (((C145 - C144) * C21383 + (C147 - C146) * C21379 + C4906 * C21384 +
            C4907 * C21380 + C4908 * C21385 + C4909 * C21381) *
               C47105 * C47500 +
           ((C523 - C522) * C21383 + (C525 - C524) * C21379 + C5524 * C21384 +
            C5525 * C21380 + C6274 * C21385 + C6275 * C21381) *
               C47105 * C47497 +
           ((C531 - C530) * C21383 + (C533 - C532) * C21379 + C7002 * C21384 +
            C7003 * C21380 + (C5942 - C5943) * C21385 +
            (C5944 - C5945) * C21381) *
               C47105 * C47488 +
           ((C2286 - C2285) * C21383 + (C2288 - C2287) * C21379 +
            (C7135 - C7134) * C21384 + (C7137 - C7136) * C21380 +
            (C47376 * C7271 - C113 * C7268) * C21385 +
            (C47376 * C7274 - C113 * C7272) * C21381) *
               C47105 * C47469) *
              C47156 * C47139)) /
            (p * q * std::sqrt(p + q));
    d2ee[118] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C47376 * C122 - C113 * C115) * C21383 +
            (C47376 * C136 - C113 * C123) * C21379 + (C4896 - C4897) * C21384 +
            (C4898 - C4899) * C21380 + C21497 * C21385 + C21498 * C21381) *
               C47105 * C47257 +
           ((C113 * C481 - C47376 * C491) * C21383 +
            (C113 * C492 - C47376 * C511) * C21379 + (C5518 - C5519) * C21384 +
            (C5520 - C5521) * C21380 + C22249 * C21385 + C22250 * C21381) *
               C47105 * C47264 +
           ((C47376 * C497 - C113 * C484) * C21383 +
            (C47376 * C514 - C113 * C498) * C21379 + (C5930 - C5931) * C21384 +
            (C5932 - C5933) * C21380 + C22251 * C21385 + C22252 * C21381) *
               C47105 * C3770) *
              C47156 * C47133 +
          (((C145 - C144) * C21383 + (C147 - C146) * C21379 + C4906 * C21384 +
            C4907 * C21380 + C4908 * C21385 + C4909 * C21381) *
               C47105 * C47257 +
           ((C523 - C522) * C21383 + (C525 - C524) * C21379 + C5524 * C21384 +
            C5525 * C21380 + C6274 * C21385 + C6275 * C21381) *
               C47105 * C47264 +
           ((C531 - C530) * C21383 + (C533 - C532) * C21379 + C7002 * C21384 +
            C7003 * C21380 + (C5942 - C5943) * C21385 +
            (C5944 - C5945) * C21381) *
               C47105 * C3770) *
              C47156 * C47142 +
          ((C164 * C21383 + C165 * C21379 + C4912 * C21384 + C4913 * C21380 +
            C361 * C21385 + C362 * C21381) *
               C47105 * C47257 +
           (C546 * C21383 + C547 * C21379 + C5526 * C21384 + C5527 * C21380 +
            (C1593 - C1594) * C21385 + (C1595 - C1596) * C21381) *
               C47105 * C47264 +
           (C548 * C21383 + C549 * C21379 + (C2176 - C2175) * C21384 +
            (C2178 - C2177) * C21380 +
            (C47376 * C1311 - C113 * C1294) * C21385 +
            (C47376 * C1321 - C113 * C1312) * C21381) *
               C47105 * C3770) *
              C47156 * C2871)) /
        (p * q * std::sqrt(p + q));
    d2ee[119] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C47376 * C122 - C113 * C115) * C21383 +
            (C47376 * C136 - C113 * C123) * C21379 + (C4896 - C4897) * C21384 +
            (C4898 - C4899) * C21380 + C21497 * C21385 + C21498 * C21381) *
               C47105 * C3262 +
           ((C113 * C481 - C47376 * C491) * C21383 +
            (C113 * C492 - C47376 * C511) * C21379 + (C5518 - C5519) * C21384 +
            (C5520 - C5521) * C21380 + C22249 * C21385 + C22250 * C21381) *
               C47105 * C47261) *
              C47156 * C47498 +
          (((C145 - C144) * C21383 + (C147 - C146) * C21379 + C4906 * C21384 +
            C4907 * C21380 + C4908 * C21385 + C4909 * C21381) *
               C47105 * C3262 +
           ((C523 - C522) * C21383 + (C525 - C524) * C21379 + C5524 * C21384 +
            C5525 * C21380 + C6274 * C21385 + C6275 * C21381) *
               C47105 * C47261) *
              C47156 * C47491 +
          ((C164 * C21383 + C165 * C21379 + C4912 * C21384 + C4913 * C21380 +
            C361 * C21385 + C362 * C21381) *
               C47105 * C3262 +
           (C546 * C21383 + C547 * C21379 + C5526 * C21384 + C5527 * C21380 +
            (C1593 - C1594) * C21385 + (C1595 - C1596) * C21381) *
               C47105 * C47261) *
              C47156 * C47478 +
          ((C166 * C21383 + C167 * C21379 + C5192 * C21384 + C5193 * C21380 +
            (C355 - C356) * C21385 + (C357 - C358) * C21381) *
               C47105 * C3262 +
           (C777 * C21383 + C778 * C21379 + (C961 - C960) * C21384 +
            (C963 - C962) * C21380 + (C47376 * C1585 - C113 * C1584) * C21385 +
            (C47376 * C1587 - C113 * C1586) * C21381) *
               C47105 * C47261) *
              C47156 * C47457)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C47376 * C122 - C113 * C115) * C21383 +
             (C47376 * C136 - C113 * C123) * C21379 + (C4896 - C4897) * C21384 +
             (C4898 - C4899) * C21380 + C21497 * C21385 + C21498 * C21381) *
                C47105 * C3262 +
            ((C113 * C481 - C47376 * C491) * C21383 +
             (C113 * C492 - C47376 * C511) * C21379 + (C5518 - C5519) * C21384 +
             (C5520 - C5521) * C21380 + C22249 * C21385 + C22250 * C21381) *
                C47105 * C47261) *
               C47492 +
           (((C4897 - C4896) * C21383 + (C4899 - C4898) * C21379 +
             (C4902 - C4903) * C21384 + (C4904 - C4905) * C21380 +
             C22127 * C21385 + C22128 * C21381) *
                C47105 * C3262 +
            ((C5519 - C5518) * C21383 + (C5521 - C5520) * C21379 +
             (C5934 - C5935) * C21384 + (C5936 - C5937) * C21380 +
             C22603 * C21385 + C22604 * C21381) *
                C47105 * C47261) *
               C47480 +
           ((C21497 * C21383 + C21498 * C21379 + (C5764 - C5765) * C21384 +
             (C5766 - C5767) * C21380 + C22129 * C21385 + C22130 * C21381) *
                C47105 * C3262 +
            (C22249 * C21383 + C22250 * C21379 + (C6420 - C6421) * C21384 +
             (C6422 - C6423) * C21380 + (C22605 - C22606) * C21385 +
             (C22607 - C22608) * C21381) *
                C47105 * C47261) *
               C47453) *
              C2608 +
          ((((C145 - C144) * C21383 + (C147 - C146) * C21379 + C4906 * C21384 +
             C4907 * C21380 + C4908 * C21385 + C4909 * C21381) *
                C47105 * C3262 +
            ((C523 - C522) * C21383 + (C525 - C524) * C21379 + C5524 * C21384 +
             C5525 * C21380 + C6274 * C21385 + C6275 * C21381) *
                C47105 * C47261) *
               C47492 +
           ((C4900 * C21383 + C4901 * C21379 + C4910 * C21384 + C4911 * C21380 +
             C6076 * C21385 + C6077 * C21381) *
                C47105 * C3262 +
            (C5522 * C21383 + C5523 * C21379 + C6276 * C21384 + C6277 * C21380 +
             (C6278 - C6279) * C21385 + (C6280 - C6281) * C21381) *
                C47105 * C47261) *
               C47480 +
           ((C4908 * C21383 + C4909 * C21379 + C6078 * C21384 + C6079 * C21380 +
             (C5772 - C5773) * C21385 + (C5774 - C5775) * C21381) *
                C47105 * C3262 +
            (C6274 * C21383 + C6275 * C21379 + (C6279 - C6278) * C21384 +
             (C6281 - C6280) * C21380 +
             (C47376 * C6415 - C113 * C6412) * C21385 +
             (C47376 * C6418 - C113 * C6416) * C21381) *
                C47105 * C47261) *
               C47453) *
              C47139)) /
            (p * q * std::sqrt(p + q));
    d2ee[120] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C47376 * C122 - C113 * C115) * C21383 +
            (C47376 * C136 - C113 * C123) * C21379 + (C4896 - C4897) * C21384 +
            (C4898 - C4899) * C21380 + C21497 * C21385 + C21498 * C21381) *
               C47105 * C47174 * C47421 +
           ((C4897 - C4896) * C21383 + (C4899 - C4898) * C21379 +
            (C4902 - C4903) * C21384 + (C4904 - C4905) * C21380 +
            (C5765 - C5764) * C21385 + (C5767 - C5766) * C21381) *
               C47105 * C47174 * C47219) *
              C655 +
          (((C145 - C144) * C21383 + (C147 - C146) * C21379 + C4906 * C21384 +
            C4907 * C21380 + C4908 * C21385 + C4909 * C21381) *
               C47105 * C47174 * C47421 +
           (C4900 * C21383 + C4901 * C21379 + C4910 * C21384 + C4911 * C21380 +
            C6076 * C21385 + C6077 * C21381) *
               C47105 * C47174 * C47219) *
              C656 +
          ((C164 * C21383 + C165 * C21379 + C4912 * C21384 + C4913 * C21380 +
            C361 * C21385 + C362 * C21381) *
               C47105 * C47174 * C47421 +
           (C359 * C21383 + C360 * C21379 + C4914 * C21384 + C4915 * C21380 +
            (C1435 - C1436) * C21385 + (C1437 - C1438) * C21381) *
               C47105 * C47174 * C47219) *
              C657 +
          ((C166 * C21383 + C167 * C21379 + C5192 * C21384 + C5193 * C21380 +
            (C355 - C356) * C21385 + (C357 - C358) * C21381) *
               C47105 * C47174 * C47421 +
           (C664 * C21383 + C665 * C21379 + (C356 - C355) * C21384 +
            (C358 - C357) * C21380 + (C47376 * C1427 - C113 * C1426) * C21385 +
            (C47376 * C1429 - C113 * C1428) * C21381) *
               C47105 * C47174 * C47219) *
              C47457)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C47376 * C122 - C113 * C115) * C21383 +
            (C47376 * C136 - C113 * C123) * C21379 + (C4896 - C4897) * C21384 +
            (C4898 - C4899) * C21380 + C21497 * C21385 + C21498 * C21381) *
               C47105 * C47174 * C1420 +
           ((C4897 - C4896) * C21383 + (C4899 - C4898) * C21379 +
            (C4902 - C4903) * C21384 + (C4904 - C4905) * C21380 +
            C22127 * C21385 + C22128 * C21381) *
               C47105 * C47174 * C1421 +
           (C21497 * C21383 + C21498 * C21379 + (C5764 - C5765) * C21384 +
            (C5766 - C5767) * C21380 + C22129 * C21385 + C22130 * C21381) *
               C47105 * C47174 * C1422 +
           (C22127 * C21383 + C22128 * C21379 + (C5768 - C5769) * C21384 +
            (C5770 - C5771) * C21380 + (C22131 - C22132) * C21385 +
            (C22133 - C22134) * C21381) *
               C47105 * C47174 * C47463) *
              C47407 +
          (((C145 - C144) * C21383 + (C147 - C146) * C21379 + C4906 * C21384 +
            C4907 * C21380 + C4908 * C21385 + C4909 * C21381) *
               C47105 * C47174 * C1420 +
           (C4900 * C21383 + C4901 * C21379 + C4910 * C21384 + C4911 * C21380 +
            C6076 * C21385 + C6077 * C21381) *
               C47105 * C47174 * C1421 +
           (C4908 * C21383 + C4909 * C21379 + C6078 * C21384 + C6079 * C21380 +
            (C5772 - C5773) * C21385 + (C5774 - C5775) * C21381) *
               C47105 * C47174 * C1422 +
           (C6076 * C21383 + C6077 * C21379 + (C5773 - C5772) * C21384 +
            (C5775 - C5774) * C21380 +
            (C47376 * C5759 - C113 * C5756) * C21385 +
            (C47376 * C5762 - C113 * C5760) * C21381) *
               C47105 * C47174 * C47463) *
              C47139)) /
            (p * q * std::sqrt(p + q));
    d2ee[121] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C47376 * C122 - C113 * C115) * C21383 +
             (C47376 * C136 - C113 * C123) * C21379 + (C4896 - C4897) * C21384 +
             (C4898 - C4899) * C21380 + C21497 * C21385 + C21498 * C21381) *
                C47105 * C47422 +
            ((C113 * C481 - C47376 * C491) * C21383 +
             (C113 * C492 - C47376 * C511) * C21379 + (C5518 - C5519) * C21384 +
             (C5520 - C5521) * C21380 + (C5935 - C5934) * C21385 +
             (C5937 - C5936) * C21381) *
                C47105 * C47261) *
               C47421 +
           (((C4897 - C4896) * C21383 + (C4899 - C4898) * C21379 +
             (C4902 - C4903) * C21384 + (C4904 - C4905) * C21380 +
             (C5765 - C5764) * C21385 + (C5767 - C5766) * C21381) *
                C47105 * C47422 +
            ((C5519 - C5518) * C21383 + (C5521 - C5520) * C21379 +
             (C5934 - C5935) * C21384 + (C5936 - C5937) * C21380 +
             (C6421 - C6420) * C21385 + (C6423 - C6422) * C21381) *
                C47105 * C47261) *
               C47219) *
              C291 +
          ((((C145 - C144) * C21383 + (C147 - C146) * C21379 + C4906 * C21384 +
             C4907 * C21380 + C4908 * C21385 + C4909 * C21381) *
                C47105 * C47422 +
            ((C523 - C522) * C21383 + (C525 - C524) * C21379 + C5524 * C21384 +
             C5525 * C21380 + C6274 * C21385 + C6275 * C21381) *
                C47105 * C47261) *
               C47421 +
           ((C4900 * C21383 + C4901 * C21379 + C4910 * C21384 + C4911 * C21380 +
             C6076 * C21385 + C6077 * C21381) *
                C47105 * C47422 +
            (C5522 * C21383 + C5523 * C21379 + C6276 * C21384 + C6277 * C21380 +
             (C6278 - C6279) * C21385 + (C6280 - C6281) * C21381) *
                C47105 * C47261) *
               C47219) *
              C292 +
          (((C164 * C21383 + C165 * C21379 + C4912 * C21384 + C4913 * C21380 +
             C361 * C21385 + C362 * C21381) *
                C47105 * C47422 +
            (C546 * C21383 + C547 * C21379 + C5526 * C21384 + C5527 * C21380 +
             (C1593 - C1594) * C21385 + (C1595 - C1596) * C21381) *
                C47105 * C47261) *
               C47421 +
           ((C359 * C21383 + C360 * C21379 + C4914 * C21384 + C4915 * C21380 +
             (C1435 - C1436) * C21385 + (C1437 - C1438) * C21381) *
                C47105 * C47422 +
            (C964 * C21383 + C965 * C21379 + (C1594 - C1593) * C21384 +
             (C1596 - C1595) * C21380 +
             (C47376 * C1701 - C113 * C1696) * C21385 +
             (C47376 * C1705 - C113 * C1702) * C21381) *
                C47105 * C47261) *
               C47219) *
              C47447)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C47376 * C122 - C113 * C115) * C21383 +
            (C47376 * C136 - C113 * C123) * C21379 + (C4896 - C4897) * C21384 +
            (C4898 - C4899) * C21380 + C21497 * C21385 + C21498 * C21381) *
               C47105 * C47422 +
           ((C113 * C481 - C47376 * C491) * C21383 +
            (C113 * C492 - C47376 * C511) * C21379 + (C5518 - C5519) * C21384 +
            (C5520 - C5521) * C21380 + C22249 * C21385 + C22250 * C21381) *
               C47105 * C47261) *
              C1420 +
          (((C4897 - C4896) * C21383 + (C4899 - C4898) * C21379 +
            (C4902 - C4903) * C21384 + (C4904 - C4905) * C21380 +
            C22127 * C21385 + C22128 * C21381) *
               C47105 * C47422 +
           ((C5519 - C5518) * C21383 + (C5521 - C5520) * C21379 +
            (C5934 - C5935) * C21384 + (C5936 - C5937) * C21380 +
            C22603 * C21385 + C22604 * C21381) *
               C47105 * C47261) *
              C1421 +
          ((C21497 * C21383 + C21498 * C21379 + (C5764 - C5765) * C21384 +
            (C5766 - C5767) * C21380 + C22129 * C21385 + C22130 * C21381) *
               C47105 * C47422 +
           (C22249 * C21383 + C22250 * C21379 + (C6420 - C6421) * C21384 +
            (C6422 - C6423) * C21380 + (C22605 - C22606) * C21385 +
            (C22607 - C22608) * C21381) *
               C47105 * C47261) *
              C1422 +
          ((C22127 * C21383 + C22128 * C21379 + (C5768 - C5769) * C21384 +
            (C5770 - C5771) * C21380 + (C22131 - C22132) * C21385 +
            (C22133 - C22134) * C21381) *
               C47105 * C47422 +
           (C22603 * C21383 + C22604 * C21379 + (C22606 - C22605) * C21384 +
            (C22608 - C22607) * C21380 +
            (C47376 * C22599 - C113 * C22598) * C21385 +
            (C47376 * C22601 - C113 * C22600) * C21381) *
               C47105 * C47261) *
              C47463) *
         C47128) /
            (p * q * std::sqrt(p + q));
    d2ee[122] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C47376 * C122 - C113 * C115) * C21383 +
            (C47376 * C136 - C113 * C123) * C21379 + (C4896 - C4897) * C21384 +
            (C4898 - C4899) * C21380 + C21497 * C21385 + C21498 * C21381) *
               C47105 * C47174 * C47492 +
           ((C4897 - C4896) * C21383 + (C4899 - C4898) * C21379 +
            (C4902 - C4903) * C21384 + (C4904 - C4905) * C21380 +
            (C5765 - C5764) * C21385 + (C5767 - C5766) * C21381) *
               C47105 * C47174 * C47480 +
           (C21497 * C21383 + C21498 * C21379 + (C5764 - C5765) * C21384 +
            (C5766 - C5767) * C21380 + (C5769 - C5768) * C21385 +
            (C5771 - C5770) * C21381) *
               C47105 * C47174 * C47453) *
              C291 +
          (((C145 - C144) * C21383 + (C147 - C146) * C21379 + C4906 * C21384 +
            C4907 * C21380 + C4908 * C21385 + C4909 * C21381) *
               C47105 * C47174 * C47492 +
           (C4900 * C21383 + C4901 * C21379 + C4910 * C21384 + C4911 * C21380 +
            C6076 * C21385 + C6077 * C21381) *
               C47105 * C47174 * C47480 +
           (C4908 * C21383 + C4909 * C21379 + C6078 * C21384 + C6079 * C21380 +
            (C5772 - C5773) * C21385 + (C5774 - C5775) * C21381) *
               C47105 * C47174 * C47453) *
              C292 +
          ((C164 * C21383 + C165 * C21379 + C4912 * C21384 + C4913 * C21380 +
            C361 * C21385 + C362 * C21381) *
               C47105 * C47174 * C47492 +
           (C359 * C21383 + C360 * C21379 + C4914 * C21384 + C4915 * C21380 +
            (C1435 - C1436) * C21385 + (C1437 - C1438) * C21381) *
               C47105 * C47174 * C47480 +
           (C361 * C21383 + C362 * C21379 + (C1436 - C1435) * C21384 +
            (C1438 - C1437) * C21380 +
            (C47376 * C1168 - C113 * C1157) * C21385 +
            (C47376 * C1175 - C113 * C1169) * C21381) *
               C47105 * C47174 * C47453) *
              C47447)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C47376 * C122 - C113 * C115) * C21383 +
           (C47376 * C136 - C113 * C123) * C21379 + (C4896 - C4897) * C21384 +
           (C4898 - C4899) * C21380 + (C4903 - C4902) * C21385 +
           (C4905 - C4904) * C21381) *
              C47105 * C47174 * C47156 * C108 +
          ((C145 - C144) * C21383 + (C147 - C146) * C21379 + C4906 * C21384 +
           C4907 * C21380 + C4908 * C21385 + C4909 * C21381) *
              C47105 * C47174 * C47156 * C109 +
          (C164 * C21383 + C165 * C21379 + C4912 * C21384 + C4913 * C21380 +
           C361 * C21385 + C362 * C21381) *
              C47105 * C47174 * C47156 * C110 +
          (C166 * C21383 + C167 * C21379 + C5192 * C21384 + C5193 * C21380 +
           (C355 - C356) * C21385 + (C357 - C358) * C21381) *
              C47105 * C47174 * C47156 * C111 +
          (C168 * C21383 + C169 * C21379 + (C667 - C666) * C21384 +
           (C669 - C668) * C21380 + (C47376 * C322 - C113 * C303) * C21385 +
           (C47376 * C333 - C113 * C323) * C21381) *
              C47105 * C47174 * C47156 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C47376 * C122 - C113 * C115) * C21383 +
            (C47376 * C136 - C113 * C123) * C21379 + (C4896 - C4897) * C21384 +
            (C4898 - C4899) * C21380 + C21497 * C21385 + C21498 * C21381) *
               C47105 * C47493 +
           ((C113 * C481 - C47376 * C491) * C21383 +
            (C113 * C492 - C47376 * C511) * C21379 + (C5518 - C5519) * C21384 +
            (C5520 - C5521) * C21380 + (C5935 - C5934) * C21385 +
            (C5937 - C5936) * C21381) *
               C47105 * C47482 +
           ((C47376 * C497 - C113 * C484) * C21383 +
            (C47376 * C514 - C113 * C498) * C21379 + (C5930 - C5931) * C21384 +
            (C5932 - C5933) * C21380 + (C5939 - C5938) * C21385 +
            (C5941 - C5940) * C21381) *
               C47105 * C47456) *
              C47156 * C291 +
          (((C145 - C144) * C21383 + (C147 - C146) * C21379 + C4906 * C21384 +
            C4907 * C21380 + C4908 * C21385 + C4909 * C21381) *
               C47105 * C47493 +
           ((C523 - C522) * C21383 + (C525 - C524) * C21379 + C5524 * C21384 +
            C5525 * C21380 + C6274 * C21385 + C6275 * C21381) *
               C47105 * C47482 +
           ((C531 - C530) * C21383 + (C533 - C532) * C21379 + C7002 * C21384 +
            C7003 * C21380 + (C5942 - C5943) * C21385 +
            (C5944 - C5945) * C21381) *
               C47105 * C47456) *
              C47156 * C292 +
          ((C164 * C21383 + C165 * C21379 + C4912 * C21384 + C4913 * C21380 +
            C361 * C21385 + C362 * C21381) *
               C47105 * C47493 +
           (C546 * C21383 + C547 * C21379 + C5526 * C21384 + C5527 * C21380 +
            (C1593 - C1594) * C21385 + (C1595 - C1596) * C21381) *
               C47105 * C47482 +
           (C548 * C21383 + C549 * C21379 + (C2176 - C2175) * C21384 +
            (C2178 - C2177) * C21380 +
            (C47376 * C1311 - C113 * C1294) * C21385 +
            (C47376 * C1321 - C113 * C1312) * C21381) *
               C47105 * C47456) *
              C47156 * C47447)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C47376 * C122 - C113 * C115) * C21383 +
            (C47376 * C136 - C113 * C123) * C21379 + (C4896 - C4897) * C21384 +
            (C4898 - C4899) * C21380 + C21497 * C21385 + C21498 * C21381) *
               C47105 * C47174 * C1078 +
           ((C4897 - C4896) * C21383 + (C4899 - C4898) * C21379 +
            (C4902 - C4903) * C21384 + (C4904 - C4905) * C21380 +
            (C5765 - C5764) * C21385 + (C5767 - C5766) * C21381) *
               C47105 * C47174 * C1079 +
           (C21497 * C21383 + C21498 * C21379 + (C5764 - C5765) * C21384 +
            (C5766 - C5767) * C21380 + (C5769 - C5768) * C21385 +
            (C5771 - C5770) * C21381) *
               C47105 * C47174 * C47453) *
              C47489 +
          (((C145 - C144) * C21383 + (C147 - C146) * C21379 + C4906 * C21384 +
            C4907 * C21380 + C4908 * C21385 + C4909 * C21381) *
               C47105 * C47174 * C1078 +
           (C4900 * C21383 + C4901 * C21379 + C4910 * C21384 + C4911 * C21380 +
            C6076 * C21385 + C6077 * C21381) *
               C47105 * C47174 * C1079 +
           (C4908 * C21383 + C4909 * C21379 + C6078 * C21384 + C6079 * C21380 +
            (C5772 - C5773) * C21385 + (C5774 - C5775) * C21381) *
               C47105 * C47174 * C47453) *
              C47476 +
          ((C164 * C21383 + C165 * C21379 + C4912 * C21384 + C4913 * C21380 +
            C361 * C21385 + C362 * C21381) *
               C47105 * C47174 * C1078 +
           (C359 * C21383 + C360 * C21379 + C4914 * C21384 + C4915 * C21380 +
            (C1435 - C1436) * C21385 + (C1437 - C1438) * C21381) *
               C47105 * C47174 * C1079 +
           (C361 * C21383 + C362 * C21379 + (C1436 - C1435) * C21384 +
            (C1438 - C1437) * C21380 +
            (C47376 * C1168 - C113 * C1157) * C21385 +
            (C47376 * C1175 - C113 * C1169) * C21381) *
               C47105 * C47174 * C47453) *
              C47447)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C47376 * C122 - C113 * C115) * C21383 +
           (C47376 * C136 - C113 * C123) * C21379 + (C4896 - C4897) * C21384 +
           (C4898 - C4899) * C21380 + C21497 * C21385 + C21498 * C21381) *
              C47105 * C47174 * C1146 +
          ((C4897 - C4896) * C21383 + (C4899 - C4898) * C21379 +
           (C4902 - C4903) * C21384 + (C4904 - C4905) * C21380 +
           C22127 * C21385 + C22128 * C21381) *
              C47105 * C47174 * C1147 +
          (C21497 * C21383 + C21498 * C21379 + (C5764 - C5765) * C21384 +
           (C5766 - C5767) * C21380 + C22129 * C21385 + C22130 * C21381) *
              C47105 * C47174 * C1148 +
          (C22127 * C21383 + C22128 * C21379 + (C5768 - C5769) * C21384 +
           (C5770 - C5771) * C21380 + (C22131 - C22132) * C21385 +
           (C22133 - C22134) * C21381) *
              C47105 * C47174 * C1149 +
          (C22129 * C21383 + C22130 * C21379 + (C22132 - C22131) * C21384 +
           (C22134 - C22133) * C21380 +
           (C47376 * C22123 - C113 * C22122) * C21385 +
           (C47376 * C22125 - C113 * C22124) * C21381) *
              C47105 * C47174 * C1150) *
         C47128) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C47376 * C122 - C113 * C115) * C21383 +
            (C47376 * C136 - C113 * C123) * C21379 + (C4896 - C4897) * C21384 +
            (C4898 - C4899) * C21380 + C21497 * C21385 + C21498 * C21381) *
               C47105 * C47493 +
           ((C113 * C481 - C47376 * C491) * C21383 +
            (C113 * C492 - C47376 * C511) * C21379 + (C5518 - C5519) * C21384 +
            (C5520 - C5521) * C21380 + C22249 * C21385 + C22250 * C21381) *
               C47105 * C47482 +
           ((C47376 * C497 - C113 * C484) * C21383 +
            (C47376 * C514 - C113 * C498) * C21379 + (C5930 - C5931) * C21384 +
            (C5932 - C5933) * C21380 + C22251 * C21385 + C22252 * C21381) *
               C47105 * C47456) *
              C1078 +
          (((C4897 - C4896) * C21383 + (C4899 - C4898) * C21379 +
            (C4902 - C4903) * C21384 + (C4904 - C4905) * C21380 +
            C22127 * C21385 + C22128 * C21381) *
               C47105 * C47493 +
           ((C5519 - C5518) * C21383 + (C5521 - C5520) * C21379 +
            (C5934 - C5935) * C21384 + (C5936 - C5937) * C21380 +
            (C6421 - C6420) * C21385 + (C6423 - C6422) * C21381) *
               C47105 * C47482 +
           ((C5931 - C5930) * C21383 + (C5933 - C5932) * C21379 +
            (C5938 - C5939) * C21384 + (C5940 - C5941) * C21380 +
            (C22253 - C22254) * C21385 + (C22255 - C22256) * C21381) *
               C47105 * C47456) *
              C1079 +
          ((C21497 * C21383 + C21498 * C21379 + (C5764 - C5765) * C21384 +
            (C5766 - C5767) * C21380 + C22129 * C21385 + C22130 * C21381) *
               C47105 * C47493 +
           (C22249 * C21383 + C22250 * C21379 + (C6420 - C6421) * C21384 +
            (C6422 - C6423) * C21380 +
            (C113 * C6411 - C47376 * C6413) * C21385 +
            (C113 * C6414 - C47376 * C6417) * C21381) *
               C47105 * C47482 +
           (C22251 * C21383 + C22252 * C21379 + (C22254 - C22253) * C21384 +
            (C22256 - C22255) * C21380 +
            (C47376 * C22245 - C113 * C22244) * C21385 +
            (C47376 * C22247 - C113 * C22246) * C21381) *
               C47105 * C47456) *
              C47453) *
         C47128) /
            (p * q * std::sqrt(p + q));
    d2ee[123] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C47376 * C122 - C113 * C115) * C21383 +
            (C47376 * C136 - C113 * C123) * C21379 + (C4896 - C4897) * C21384 +
            (C4898 - C4899) * C21380 + C21497 * C21385 + C21498 * C21381) *
               C47105 * C47422 +
           ((C113 * C481 - C47376 * C491) * C21383 +
            (C113 * C492 - C47376 * C511) * C21379 + (C5518 - C5519) * C21384 +
            (C5520 - C5521) * C21380 + (C5935 - C5934) * C21385 +
            (C5937 - C5936) * C21381) *
               C47105 * C47261) *
              C47156 * C655 +
          (((C145 - C144) * C21383 + (C147 - C146) * C21379 + C4906 * C21384 +
            C4907 * C21380 + C4908 * C21385 + C4909 * C21381) *
               C47105 * C47422 +
           ((C523 - C522) * C21383 + (C525 - C524) * C21379 + C5524 * C21384 +
            C5525 * C21380 + C6274 * C21385 + C6275 * C21381) *
               C47105 * C47261) *
              C47156 * C656 +
          ((C164 * C21383 + C165 * C21379 + C4912 * C21384 + C4913 * C21380 +
            C361 * C21385 + C362 * C21381) *
               C47105 * C47422 +
           (C546 * C21383 + C547 * C21379 + C5526 * C21384 + C5527 * C21380 +
            (C1593 - C1594) * C21385 + (C1595 - C1596) * C21381) *
               C47105 * C47261) *
              C47156 * C657 +
          ((C166 * C21383 + C167 * C21379 + C5192 * C21384 + C5193 * C21380 +
            (C355 - C356) * C21385 + (C357 - C358) * C21381) *
               C47105 * C47422 +
           (C777 * C21383 + C778 * C21379 + (C961 - C960) * C21384 +
            (C963 - C962) * C21380 + (C47376 * C1585 - C113 * C1584) * C21385 +
            (C47376 * C1587 - C113 * C1586) * C21381) *
               C47105 * C47261) *
              C47156 * C47457)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C47376 * C122 - C113 * C115) * C21383 +
             (C47376 * C136 - C113 * C123) * C21379 + (C4896 - C4897) * C21384 +
             (C4898 - C4899) * C21380 + C21497 * C21385 + C21498 * C21381) *
                C47105 * C47422 +
            ((C113 * C481 - C47376 * C491) * C21383 +
             (C113 * C492 - C47376 * C511) * C21379 + (C5518 - C5519) * C21384 +
             (C5520 - C5521) * C21380 + C22249 * C21385 + C22250 * C21381) *
                C47105 * C47261) *
               C1078 +
           (((C4897 - C4896) * C21383 + (C4899 - C4898) * C21379 +
             (C4902 - C4903) * C21384 + (C4904 - C4905) * C21380 +
             C22127 * C21385 + C22128 * C21381) *
                C47105 * C47422 +
            ((C5519 - C5518) * C21383 + (C5521 - C5520) * C21379 +
             (C5934 - C5935) * C21384 + (C5936 - C5937) * C21380 +
             (C6421 - C6420) * C21385 + (C6423 - C6422) * C21381) *
                C47105 * C47261) *
               C1079 +
           ((C21497 * C21383 + C21498 * C21379 + (C5764 - C5765) * C21384 +
             (C5766 - C5767) * C21380 + C22129 * C21385 + C22130 * C21381) *
                C47105 * C47422 +
            (C22249 * C21383 + C22250 * C21379 + (C6420 - C6421) * C21384 +
             (C6422 - C6423) * C21380 +
             (C113 * C6411 - C47376 * C6413) * C21385 +
             (C113 * C6414 - C47376 * C6417) * C21381) *
                C47105 * C47261) *
               C47453) *
              C47407 +
          ((((C145 - C144) * C21383 + (C147 - C146) * C21379 + C4906 * C21384 +
             C4907 * C21380 + C4908 * C21385 + C4909 * C21381) *
                C47105 * C47422 +
            ((C523 - C522) * C21383 + (C525 - C524) * C21379 + C5524 * C21384 +
             C5525 * C21380 + C6274 * C21385 + C6275 * C21381) *
                C47105 * C47261) *
               C1078 +
           ((C4900 * C21383 + C4901 * C21379 + C4910 * C21384 + C4911 * C21380 +
             C6076 * C21385 + C6077 * C21381) *
                C47105 * C47422 +
            (C5522 * C21383 + C5523 * C21379 + C6276 * C21384 + C6277 * C21380 +
             (C6278 - C6279) * C21385 + (C6280 - C6281) * C21381) *
                C47105 * C47261) *
               C1079 +
           ((C4908 * C21383 + C4909 * C21379 + C6078 * C21384 + C6079 * C21380 +
             (C5772 - C5773) * C21385 + (C5774 - C5775) * C21381) *
                C47105 * C47422 +
            (C6274 * C21383 + C6275 * C21379 + (C6279 - C6278) * C21384 +
             (C6281 - C6280) * C21380 +
             (C47376 * C6415 - C113 * C6412) * C21385 +
             (C47376 * C6418 - C113 * C6416) * C21381) *
                C47105 * C47261) *
               C47453) *
              C47139)) /
            (p * q * std::sqrt(p + q));
    d2ee[124] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C47376 * C122 - C113 * C115) * C21383 +
           (C47376 * C136 - C113 * C123) * C21379 + (C4896 - C4897) * C21384 +
           (C4898 - C4899) * C21380 + (C4903 - C4902) * C21385 +
           (C4905 - C4904) * C21381) *
              C47105 * C47174 * C47156 * C108 +
          ((C145 - C144) * C21383 + (C147 - C146) * C21379 + C4906 * C21384 +
           C4907 * C21380 + C4908 * C21385 + C4909 * C21381) *
              C47105 * C47174 * C47156 * C109 +
          (C164 * C21383 + C165 * C21379 + C4912 * C21384 + C4913 * C21380 +
           C361 * C21385 + C362 * C21381) *
              C47105 * C47174 * C47156 * C110 +
          (C166 * C21383 + C167 * C21379 + C5192 * C21384 + C5193 * C21380 +
           (C355 - C356) * C21385 + (C357 - C358) * C21381) *
              C47105 * C47174 * C47156 * C111 +
          (C168 * C21383 + C169 * C21379 + (C667 - C666) * C21384 +
           (C669 - C668) * C21380 + (C47376 * C322 - C113 * C303) * C21385 +
           (C47376 * C333 - C113 * C323) * C21381) *
              C47105 * C47174 * C47156 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C47376 * C122 - C113 * C115) * C21383 +
            (C47376 * C136 - C113 * C123) * C21379 + (C4896 - C4897) * C21384 +
            (C4898 - C4899) * C21380 + C21497 * C21385 + C21498 * C21381) *
               C47105 * C47174 * C47492 +
           ((C4897 - C4896) * C21383 + (C4899 - C4898) * C21379 +
            (C4902 - C4903) * C21384 + (C4904 - C4905) * C21380 +
            (C5765 - C5764) * C21385 + (C5767 - C5766) * C21381) *
               C47105 * C47174 * C47480 +
           (C21497 * C21383 + C21498 * C21379 + (C5764 - C5765) * C21384 +
            (C5766 - C5767) * C21380 + (C5769 - C5768) * C21385 +
            (C5771 - C5770) * C21381) *
               C47105 * C47174 * C47453) *
              C291 +
          (((C145 - C144) * C21383 + (C147 - C146) * C21379 + C4906 * C21384 +
            C4907 * C21380 + C4908 * C21385 + C4909 * C21381) *
               C47105 * C47174 * C47492 +
           (C4900 * C21383 + C4901 * C21379 + C4910 * C21384 + C4911 * C21380 +
            C6076 * C21385 + C6077 * C21381) *
               C47105 * C47174 * C47480 +
           (C4908 * C21383 + C4909 * C21379 + C6078 * C21384 + C6079 * C21380 +
            (C5772 - C5773) * C21385 + (C5774 - C5775) * C21381) *
               C47105 * C47174 * C47453) *
              C292 +
          ((C164 * C21383 + C165 * C21379 + C4912 * C21384 + C4913 * C21380 +
            C361 * C21385 + C362 * C21381) *
               C47105 * C47174 * C47492 +
           (C359 * C21383 + C360 * C21379 + C4914 * C21384 + C4915 * C21380 +
            (C1435 - C1436) * C21385 + (C1437 - C1438) * C21381) *
               C47105 * C47174 * C47480 +
           (C361 * C21383 + C362 * C21379 + (C1436 - C1435) * C21384 +
            (C1438 - C1437) * C21380 +
            (C47376 * C1168 - C113 * C1157) * C21385 +
            (C47376 * C1175 - C113 * C1169) * C21381) *
               C47105 * C47174 * C47453) *
              C47447)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C47376 * C122 - C113 * C115) * C21383 +
            (C47376 * C136 - C113 * C123) * C21379 + (C4896 - C4897) * C21384 +
            (C4898 - C4899) * C21380 + C21497 * C21385 + C21498 * C21381) *
               C47105 * C47174 * C1078 +
           ((C4897 - C4896) * C21383 + (C4899 - C4898) * C21379 +
            (C4902 - C4903) * C21384 + (C4904 - C4905) * C21380 +
            (C5765 - C5764) * C21385 + (C5767 - C5766) * C21381) *
               C47105 * C47174 * C1079 +
           (C21497 * C21383 + C21498 * C21379 + (C5764 - C5765) * C21384 +
            (C5766 - C5767) * C21380 + (C5769 - C5768) * C21385 +
            (C5771 - C5770) * C21381) *
               C47105 * C47174 * C47453) *
              C47489 +
          (((C145 - C144) * C21383 + (C147 - C146) * C21379 + C4906 * C21384 +
            C4907 * C21380 + C4908 * C21385 + C4909 * C21381) *
               C47105 * C47174 * C1078 +
           (C4900 * C21383 + C4901 * C21379 + C4910 * C21384 + C4911 * C21380 +
            C6076 * C21385 + C6077 * C21381) *
               C47105 * C47174 * C1079 +
           (C4908 * C21383 + C4909 * C21379 + C6078 * C21384 + C6079 * C21380 +
            (C5772 - C5773) * C21385 + (C5774 - C5775) * C21381) *
               C47105 * C47174 * C47453) *
              C47476 +
          ((C164 * C21383 + C165 * C21379 + C4912 * C21384 + C4913 * C21380 +
            C361 * C21385 + C362 * C21381) *
               C47105 * C47174 * C1078 +
           (C359 * C21383 + C360 * C21379 + C4914 * C21384 + C4915 * C21380 +
            (C1435 - C1436) * C21385 + (C1437 - C1438) * C21381) *
               C47105 * C47174 * C1079 +
           (C361 * C21383 + C362 * C21379 + (C1436 - C1435) * C21384 +
            (C1438 - C1437) * C21380 +
            (C47376 * C1168 - C113 * C1157) * C21385 +
            (C47376 * C1175 - C113 * C1169) * C21381) *
               C47105 * C47174 * C47453) *
              C47447)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C47376 * C122 - C113 * C115) * C21383 +
           (C47376 * C136 - C113 * C123) * C21379 + (C4896 - C4897) * C21384 +
           (C4898 - C4899) * C21380 + C21497 * C21385 + C21498 * C21381) *
              C47105 * C47174 * C1146 +
          ((C4897 - C4896) * C21383 + (C4899 - C4898) * C21379 +
           (C4902 - C4903) * C21384 + (C4904 - C4905) * C21380 +
           C22127 * C21385 + C22128 * C21381) *
              C47105 * C47174 * C1147 +
          (C21497 * C21383 + C21498 * C21379 + (C5764 - C5765) * C21384 +
           (C5766 - C5767) * C21380 + C22129 * C21385 + C22130 * C21381) *
              C47105 * C47174 * C1148 +
          (C22127 * C21383 + C22128 * C21379 + (C5768 - C5769) * C21384 +
           (C5770 - C5771) * C21380 + (C22131 - C22132) * C21385 +
           (C22133 - C22134) * C21381) *
              C47105 * C47174 * C1149 +
          (C22129 * C21383 + C22130 * C21379 + (C22132 - C22131) * C21384 +
           (C22134 - C22133) * C21380 +
           (C47376 * C22123 - C113 * C22122) * C21385 +
           (C47376 * C22125 - C113 * C22124) * C21381) *
              C47105 * C47174 * C1150) *
         C47128) /
            (p * q * std::sqrt(p + q));
    d2ee[125] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C10325 * C122 - C10327 * C115 + C47473 * C491 - C10328 * C481) *
                C15949 +
            (C10325 * C136 - C10327 * C123 + C47473 * C511 - C10328 * C492) *
                C15945 +
            (C25705 - C25706 + C25707 - C25708) * C15950 +
            (C25709 - C25710 + C25711 - C25712) * C47471) *
               C47105 * C47174 * C47215 +
           ((C25706 - C25705 + C25708 - C25707) * C15949 +
            (C25710 - C25709 + C25712 - C25711) * C15945 +
            (C25713 - C25714 + C25715 - C25716) * C15950 +
            (C25717 - C25718 + C25719 - C25720) * C47471) *
               C47105 * C47174 * C47222 +
           ((C25714 - C25713 + C25716 - C25715) * C15949 +
            (C25718 - C25717 + C25720 - C25719) * C15945 +
            (C26557 - C26558 + C26559 - C26560) * C15950 +
            (C26561 - C26562 + C26563 - C26564) * C47471) *
               C47105 * C47174 * C2868) *
              C47133 +
          (((C10331 - C10330 + C10333 - C10332) * C15949 +
            (C10335 - C10334 + C10337 - C10336) * C15945 +
            (C10508 - C10509 + C10510 - C10511) * C15950 +
            (C10512 - C10513 + C10514 - C10515) * C47471) *
               C47105 * C47174 * C47215 +
           ((C10509 - C10508 + C10511 - C10510) * C15949 +
            (C10513 - C10512 + C10515 - C10514) * C15945 +
            (C10516 - C10517 + C10518 - C10519) * C15950 +
            (C10520 - C10521 + C10522 - C10523) * C47471) *
               C47105 * C47174 * C47222 +
           ((C10517 - C10516 + C10519 - C10518) * C15949 +
            (C10521 - C10520 + C10523 - C10522) * C15945 +
            (C11708 - C11709 + C11710 - C11711) * C15950 +
            (C11712 - C11713 + C11714 - C11715) * C47471) *
               C47105 * C47174 * C2868) *
              C47142 +
          (((C10339 - C10338 + C10341 - C10340) * C15949 +
            (C10343 - C10342 + C10345 - C10344) * C15945 +
            (C10524 - C10525 + C10526 - C10527) * C15950 +
            (C10528 - C10529 + C10530 - C10531) * C47471) *
               C47105 * C47174 * C47215 +
           ((C10525 - C10524 + C10527 - C10526) * C15949 +
            (C10529 - C10528 + C10531 - C10530) * C15945 +
            (C10532 - C10533 + C10534 - C10535) * C15950 +
            (C10536 - C10537 + C10538 - C10539) * C47471) *
               C47105 * C47174 * C47222 +
           ((C10533 - C10532 + C10535 - C10534) * C15949 +
            (C10537 - C10536 + C10539 - C10538) * C15945 +
            (C10325 * C1162 - C10327 * C1154 + C47473 * C1701 -
             C10328 * C1696) *
                C15950 +
            (C10325 * C1172 - C10327 * C1163 + C47473 * C1705 -
             C10328 * C1702) *
                C47471) *
               C47105 * C47174 * C2868) *
              C2871)) /
        (p * q * std::sqrt(p + q));
    d2ee[126] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C10325 * C122 - C10327 * C115 + C47473 * C491 - C10328 * C481) *
                 C15949 +
             (C10325 * C136 - C10327 * C123 + C47473 * C511 - C10328 * C492) *
                 C15945 +
             (C25705 - C25706 + C25707 - C25708) * C15950 +
             (C25709 - C25710 + C25711 - C25712) * C47471) *
                C47105 * C47422 +
            ((C10327 * C481 - C10325 * C491 + C10328 * C484 - C47473 * C497) *
                 C15949 +
             (C10327 * C492 - C10325 * C511 + C10328 * C498 - C47473 * C514) *
                 C15945 +
             (C26321 - C26322 + C26323 - C26324) * C15950 +
             (C26325 - C26326 + C26327 - C26328) * C47471) *
                C47105 * C47261) *
               C47215 +
           (((C25706 - C25705 + C25708 - C25707) * C15949 +
             (C25710 - C25709 + C25712 - C25711) * C15945 +
             (C25713 - C25714 + C25715 - C25716) * C15950 +
             (C25717 - C25718 + C25719 - C25720) * C47471) *
                C47105 * C47422 +
            ((C26322 - C26321 + C26324 - C26323) * C15949 +
             (C26326 - C26325 + C26328 - C26327) * C15945 +
             (C26727 - C26728 + C26729 - C26730) * C15950 +
             (C26731 - C26732 + C26733 - C26734) * C47471) *
                C47105 * C47261) *
               C47222 +
           (((C25714 - C25713 + C25716 - C25715) * C15949 +
             (C25718 - C25717 + C25720 - C25719) * C15945 +
             (C26557 - C26558 + C26559 - C26560) * C15950 +
             (C26561 - C26562 + C26563 - C26564) * C47471) *
                C47105 * C47422 +
            ((C26728 - C26727 + C26730 - C26729) * C15949 +
             (C26732 - C26731 + C26734 - C26733) * C15945 +
             (C27197 - C27198 + C27199 - C27200) * C15950 +
             (C27201 - C27202 + C27203 - C27204) * C47471) *
                C47105 * C47261) *
               C2868) *
              C2608 +
          ((((C10331 - C10330 + C10333 - C10332) * C15949 +
             (C10335 - C10334 + C10337 - C10336) * C15945 +
             (C10508 - C10509 + C10510 - C10511) * C15950 +
             (C10512 - C10513 + C10514 - C10515) * C47471) *
                C47105 * C47422 +
            ((C10687 - C10686 + C10689 - C10688) * C15949 +
             (C10691 - C10690 + C10693 - C10692) * C15945 +
             (C11188 - C11189 + C11190 - C11191) * C15950 +
             (C11192 - C11193 + C11194 - C11195) * C47471) *
                C47105 * C47261) *
               C47215 +
           (((C10509 - C10508 + C10511 - C10510) * C15949 +
             (C10513 - C10512 + C10515 - C10514) * C15945 +
             (C10516 - C10517 + C10518 - C10519) * C15950 +
             (C10520 - C10521 + C10522 - C10523) * C47471) *
                C47105 * C47422 +
            ((C11189 - C11188 + C11191 - C11190) * C15949 +
             (C11193 - C11192 + C11195 - C11194) * C15945 +
             (C11910 - C11911 + C11912 - C11913) * C15950 +
             (C11914 - C11915 + C11916 - C11917) * C47471) *
                C47105 * C47261) *
               C47222 +
           (((C10517 - C10516 + C10519 - C10518) * C15949 +
             (C10521 - C10520 + C10523 - C10522) * C15945 +
             (C11708 - C11709 + C11710 - C11711) * C15950 +
             (C11712 - C11713 + C11714 - C11715) * C47471) *
                C47105 * C47422 +
            ((C11911 - C11910 + C11913 - C11912) * C15949 +
             (C11915 - C11914 + C11917 - C11916) * C15945 +
             (C10325 * C1699 - C10327 * C1695 + C47473 * C5925 -
              C10328 * C5922) *
                 C15950 +
             (C10325 * C1704 - C10327 * C1700 + C47473 * C5928 -
              C10328 * C5926) *
                 C47471) *
                C47105 * C47261) *
               C2868) *
              C47139)) /
        (p * q * std::sqrt(p + q));
    d2ee[127] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C10325 * C122 - C10327 * C115 + C47473 * C491 - C10328 * C481) *
                C15949 +
            (C10325 * C136 - C10327 * C123 + C47473 * C511 - C10328 * C492) *
                C15945 +
            (C25705 - C25706 + C25707 - C25708) * C15950 +
            (C25709 - C25710 + C25711 - C25712) * C47471) *
               C47105 * C47174 * C47499 +
           ((C25706 - C25705 + C25708 - C25707) * C15949 +
            (C25710 - C25709 + C25712 - C25711) * C15945 +
            (C25713 - C25714 + C25715 - C25716) * C15950 +
            (C25717 - C25718 + C25719 - C25720) * C47471) *
               C47105 * C47174 * C47495 +
           ((C25714 - C25713 + C25716 - C25715) * C15949 +
            (C25718 - C25717 + C25720 - C25719) * C15945 +
            (C26557 - C26558 + C26559 - C26560) * C15950 +
            (C26561 - C26562 + C26563 - C26564) * C47471) *
               C47105 * C47174 * C47485 +
           ((C26558 - C26557 + C26560 - C26559) * C15949 +
            (C26562 - C26561 + C26564 - C26563) * C15945 +
            (C26565 - C26566 + C26567 - C26568) * C15950 +
            (C26569 - C26570 + C26571 - C26572) * C47471) *
               C47105 * C47174 * C47463) *
              C2608 +
          (((C10331 - C10330 + C10333 - C10332) * C15949 +
            (C10335 - C10334 + C10337 - C10336) * C15945 +
            (C10508 - C10509 + C10510 - C10511) * C15950 +
            (C10512 - C10513 + C10514 - C10515) * C47471) *
               C47105 * C47174 * C47499 +
           ((C10509 - C10508 + C10511 - C10510) * C15949 +
            (C10513 - C10512 + C10515 - C10514) * C15945 +
            (C10516 - C10517 + C10518 - C10519) * C15950 +
            (C10520 - C10521 + C10522 - C10523) * C47471) *
               C47105 * C47174 * C47495 +
           ((C10517 - C10516 + C10519 - C10518) * C15949 +
            (C10521 - C10520 + C10523 - C10522) * C15945 +
            (C11708 - C11709 + C11710 - C11711) * C15950 +
            (C11712 - C11713 + C11714 - C11715) * C47471) *
               C47105 * C47174 * C47485 +
           ((C11709 - C11708 + C11711 - C11710) * C15949 +
            (C11713 - C11712 + C11715 - C11714) * C15945 +
            (C10325 * C1166 - C10327 * C1156 + C47473 * C6415 -
             C10328 * C6412) *
                C15950 +
            (C10325 * C1174 - C10327 * C1167 + C47473 * C6418 -
             C10328 * C6416) *
                C47471) *
               C47105 * C47174 * C47463) *
              C47139)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C10325 * C122 - C10327 * C115 + C47473 * C491 - C10328 * C481) *
                C15949 +
            (C10325 * C136 - C10327 * C123 + C47473 * C511 - C10328 * C492) *
                C15945 +
            (C25705 - C25706 + C25707 - C25708) * C15950 +
            (C25709 - C25710 + C25711 - C25712) * C47471) *
               C47105 * C47174 * C2500 +
           ((C25706 - C25705 + C25708 - C25707) * C15949 +
            (C25710 - C25709 + C25712 - C25711) * C15945 +
            (C25713 - C25714 + C25715 - C25716) * C15950 +
            (C25717 - C25718 + C25719 - C25720) * C47471) *
               C47105 * C47174 * C47219) *
              C47498 +
          (((C10331 - C10330 + C10333 - C10332) * C15949 +
            (C10335 - C10334 + C10337 - C10336) * C15945 +
            (C10508 - C10509 + C10510 - C10511) * C15950 +
            (C10512 - C10513 + C10514 - C10515) * C47471) *
               C47105 * C47174 * C2500 +
           ((C10509 - C10508 + C10511 - C10510) * C15949 +
            (C10513 - C10512 + C10515 - C10514) * C15945 +
            (C10516 - C10517 + C10518 - C10519) * C15950 +
            (C10520 - C10521 + C10522 - C10523) * C47471) *
               C47105 * C47174 * C47219) *
              C47491 +
          (((C10339 - C10338 + C10341 - C10340) * C15949 +
            (C10343 - C10342 + C10345 - C10344) * C15945 +
            (C10524 - C10525 + C10526 - C10527) * C15950 +
            (C10528 - C10529 + C10530 - C10531) * C47471) *
               C47105 * C47174 * C2500 +
           ((C10525 - C10524 + C10527 - C10526) * C15949 +
            (C10529 - C10528 + C10531 - C10530) * C15945 +
            (C10532 - C10533 + C10534 - C10535) * C15950 +
            (C10536 - C10537 + C10538 - C10539) * C47471) *
               C47105 * C47174 * C47219) *
              C47478 +
          (((C10347 - C10346 + C10349 - C10348) * C15949 +
            (C10351 - C10350 + C10353 - C10352) * C15945 +
            (C10848 - C10849 + C10850 - C10851) * C15950 +
            (C10852 - C10853 + C10854 - C10855) * C47471) *
               C47105 * C47174 * C2500 +
           ((C10849 - C10848 + C10851 - C10850) * C15949 +
            (C10853 - C10852 + C10855 - C10854) * C15945 +
            (C10325 * C318 - C10327 * C301 + C47473 * C1585 - C10328 * C1584) *
                C15950 +
            (C10325 * C331 - C10327 * C319 + C47473 * C1587 - C10328 * C1586) *
                C47471) *
               C47105 * C47174 * C47219) *
              C47457)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C10325 * C122 - C10327 * C115 + C47473 * C491 - C10328 * C481) *
                 C15949 +
             (C10325 * C136 - C10327 * C123 + C47473 * C511 - C10328 * C492) *
                 C15945 +
             (C25705 - C25706 + C25707 - C25708) * C15950 +
             (C25709 - C25710 + C25711 - C25712) * C47471) *
                C47105 * C47493 +
            ((C10327 * C481 - C10325 * C491 + C10328 * C484 - C47473 * C497) *
                 C15949 +
             (C10327 * C492 - C10325 * C511 + C10328 * C498 - C47473 * C514) *
                 C15945 +
             (C26321 - C26322 + C26323 - C26324) * C15950 +
             (C26325 - C26326 + C26327 - C26328) * C47471) *
                C47105 * C47482 +
            ((C10325 * C497 - C10327 * C484 + C47473 * C2002 - C10328 * C1996) *
                 C15949 +
             (C10325 * C514 - C10327 * C498 + C47473 * C2014 - C10328 * C2003) *
                 C15945 +
             (C26719 - C26720 + C26721 - C26722) * C15950 +
             (C26723 - C26724 + C26725 - C26726) * C47471) *
                C47105 * C47456) *
               C2500 +
           (((C25706 - C25705 + C25708 - C25707) * C15949 +
             (C25710 - C25709 + C25712 - C25711) * C15945 +
             (C25713 - C25714 + C25715 - C25716) * C15950 +
             (C25717 - C25718 + C25719 - C25720) * C47471) *
                C47105 * C47493 +
            ((C26322 - C26321 + C26324 - C26323) * C15949 +
             (C26326 - C26325 + C26328 - C26327) * C15945 +
             (C26727 - C26728 + C26729 - C26730) * C15950 +
             (C26731 - C26732 + C26733 - C26734) * C47471) *
                C47105 * C47482 +
            ((C26720 - C26719 + C26722 - C26721) * C15949 +
             (C26724 - C26723 + C26726 - C26725) * C15945 +
             (C26735 - C26736 + C26737 - C26738) * C15950 +
             (C26739 - C26740 + C26741 - C26742) * C47471) *
                C47105 * C47456) *
               C47219) *
              C2608 +
          ((((C10331 - C10330 + C10333 - C10332) * C15949 +
             (C10335 - C10334 + C10337 - C10336) * C15945 +
             (C10508 - C10509 + C10510 - C10511) * C15950 +
             (C10512 - C10513 + C10514 - C10515) * C47471) *
                C47105 * C47493 +
            ((C10687 - C10686 + C10689 - C10688) * C15949 +
             (C10691 - C10690 + C10693 - C10692) * C15945 +
             (C11188 - C11189 + C11190 - C11191) * C15950 +
             (C11192 - C11193 + C11194 - C11195) * C47471) *
                C47105 * C47482 +
            ((C10695 - C10694 + C10697 - C10696) * C15949 +
             (C10699 - C10698 + C10701 - C10700) * C15945 +
             (C12624 - C12625 + C12626 - C12627) * C15950 +
             (C12628 - C12629 + C12630 - C12631) * C47471) *
                C47105 * C47456) *
               C2500 +
           (((C10509 - C10508 + C10511 - C10510) * C15949 +
             (C10513 - C10512 + C10515 - C10514) * C15945 +
             (C10516 - C10517 + C10518 - C10519) * C15950 +
             (C10520 - C10521 + C10522 - C10523) * C47471) *
                C47105 * C47493 +
            ((C11189 - C11188 + C11191 - C11190) * C15949 +
             (C11193 - C11192 + C11195 - C11194) * C15945 +
             (C11910 - C11911 + C11912 - C11913) * C15950 +
             (C11914 - C11915 + C11916 - C11917) * C47471) *
                C47105 * C47482 +
            ((C12625 - C12624 + C12627 - C12626) * C15949 +
             (C12629 - C12628 + C12631 - C12630) * C15945 +
             (C10325 * C1309 - C10327 * C1293 + C47473 * C7271 -
              C10328 * C7268) *
                 C15950 +
             (C10325 * C1320 - C10327 * C1310 + C47473 * C7274 -
              C10328 * C7272) *
                 C47471) *
                C47105 * C47456) *
               C47219) *
              C47139)) /
            (p * q * std::sqrt(p + q));
    d2ee[128] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C10325 * C122 - C10327 * C115 + C47473 * C491 - C10328 * C481) *
                 C15949 +
             (C10325 * C136 - C10327 * C123 + C47473 * C511 - C10328 * C492) *
                 C15945 +
             (C25705 - C25706 + C25707 - C25708) * C15950 +
             (C25709 - C25710 + C25711 - C25712) * C47471) *
                C47105 * C47422 +
            ((C10327 * C481 - C10325 * C491 + C10328 * C484 - C47473 * C497) *
                 C15949 +
             (C10327 * C492 - C10325 * C511 + C10328 * C498 - C47473 * C514) *
                 C15945 +
             (C26321 - C26322 + C26323 - C26324) * C15950 +
             (C26325 - C26326 + C26327 - C26328) * C47471) *
                C47105 * C47261) *
               C2500 +
           (((C25706 - C25705 + C25708 - C25707) * C15949 +
             (C25710 - C25709 + C25712 - C25711) * C15945 +
             (C25713 - C25714 + C25715 - C25716) * C15950 +
             (C25717 - C25718 + C25719 - C25720) * C47471) *
                C47105 * C47422 +
            ((C26322 - C26321 + C26324 - C26323) * C15949 +
             (C26326 - C26325 + C26328 - C26327) * C15945 +
             (C26727 - C26728 + C26729 - C26730) * C15950 +
             (C26731 - C26732 + C26733 - C26734) * C47471) *
                C47105 * C47261) *
               C47219) *
              C47133 +
          ((((C10331 - C10330 + C10333 - C10332) * C15949 +
             (C10335 - C10334 + C10337 - C10336) * C15945 +
             (C10508 - C10509 + C10510 - C10511) * C15950 +
             (C10512 - C10513 + C10514 - C10515) * C47471) *
                C47105 * C47422 +
            ((C10687 - C10686 + C10689 - C10688) * C15949 +
             (C10691 - C10690 + C10693 - C10692) * C15945 +
             (C11188 - C11189 + C11190 - C11191) * C15950 +
             (C11192 - C11193 + C11194 - C11195) * C47471) *
                C47105 * C47261) *
               C2500 +
           (((C10509 - C10508 + C10511 - C10510) * C15949 +
             (C10513 - C10512 + C10515 - C10514) * C15945 +
             (C10516 - C10517 + C10518 - C10519) * C15950 +
             (C10520 - C10521 + C10522 - C10523) * C47471) *
                C47105 * C47422 +
            ((C11189 - C11188 + C11191 - C11190) * C15949 +
             (C11193 - C11192 + C11195 - C11194) * C15945 +
             (C11910 - C11911 + C11912 - C11913) * C15950 +
             (C11914 - C11915 + C11916 - C11917) * C47471) *
                C47105 * C47261) *
               C47219) *
              C47142 +
          ((((C10339 - C10338 + C10341 - C10340) * C15949 +
             (C10343 - C10342 + C10345 - C10344) * C15945 +
             (C10524 - C10525 + C10526 - C10527) * C15950 +
             (C10528 - C10529 + C10530 - C10531) * C47471) *
                C47105 * C47422 +
            ((C10703 - C10702 + C10705 - C10704) * C15949 +
             (C10707 - C10706 + C10709 - C10708) * C15945 +
             (C11196 - C11197 + C11198 - C11199) * C15950 +
             (C11200 - C11201 + C11202 - C11203) * C47471) *
                C47105 * C47261) *
               C2500 +
           (((C10525 - C10524 + C10527 - C10526) * C15949 +
             (C10529 - C10528 + C10531 - C10530) * C15945 +
             (C10532 - C10533 + C10534 - C10535) * C15950 +
             (C10536 - C10537 + C10538 - C10539) * C47471) *
                C47105 * C47422 +
            ((C11197 - C11196 + C11199 - C11198) * C15949 +
             (C11201 - C11200 + C11203 - C11202) * C15945 +
             (C10325 * C1305 - C10327 * C1291 + C47473 * C1311 -
              C10328 * C1294) *
                 C15950 +
             (C10325 * C1318 - C10327 * C1306 + C47473 * C1321 -
              C10328 * C1312) *
                 C47471) *
                C47105 * C47261) *
               C47219) *
              C2871)) /
        (p * q * std::sqrt(p + q));
    d2ee[129] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C10325 * C122 - C10327 * C115 + C47473 * C491 - C10328 * C481) *
                C15949 +
            (C10325 * C136 - C10327 * C123 + C47473 * C511 - C10328 * C492) *
                C15945 +
            (C25705 - C25706 + C25707 - C25708) * C15950 +
            (C25709 - C25710 + C25711 - C25712) * C47471) *
               C47105 * C47174 * C2500 +
           ((C25706 - C25705 + C25708 - C25707) * C15949 +
            (C25710 - C25709 + C25712 - C25711) * C15945 +
            (C25713 - C25714 + C25715 - C25716) * C15950 +
            (C25717 - C25718 + C25719 - C25720) * C47471) *
               C47105 * C47174 * C47219) *
              C47498 +
          (((C10331 - C10330 + C10333 - C10332) * C15949 +
            (C10335 - C10334 + C10337 - C10336) * C15945 +
            (C10508 - C10509 + C10510 - C10511) * C15950 +
            (C10512 - C10513 + C10514 - C10515) * C47471) *
               C47105 * C47174 * C2500 +
           ((C10509 - C10508 + C10511 - C10510) * C15949 +
            (C10513 - C10512 + C10515 - C10514) * C15945 +
            (C10516 - C10517 + C10518 - C10519) * C15950 +
            (C10520 - C10521 + C10522 - C10523) * C47471) *
               C47105 * C47174 * C47219) *
              C47491 +
          (((C10339 - C10338 + C10341 - C10340) * C15949 +
            (C10343 - C10342 + C10345 - C10344) * C15945 +
            (C10524 - C10525 + C10526 - C10527) * C15950 +
            (C10528 - C10529 + C10530 - C10531) * C47471) *
               C47105 * C47174 * C2500 +
           ((C10525 - C10524 + C10527 - C10526) * C15949 +
            (C10529 - C10528 + C10531 - C10530) * C15945 +
            (C10532 - C10533 + C10534 - C10535) * C15950 +
            (C10536 - C10537 + C10538 - C10539) * C47471) *
               C47105 * C47174 * C47219) *
              C47478 +
          (((C10347 - C10346 + C10349 - C10348) * C15949 +
            (C10351 - C10350 + C10353 - C10352) * C15945 +
            (C10848 - C10849 + C10850 - C10851) * C15950 +
            (C10852 - C10853 + C10854 - C10855) * C47471) *
               C47105 * C47174 * C2500 +
           ((C10849 - C10848 + C10851 - C10850) * C15949 +
            (C10853 - C10852 + C10855 - C10854) * C15945 +
            (C10325 * C318 - C10327 * C301 + C47473 * C1585 - C10328 * C1584) *
                C15950 +
            (C10325 * C331 - C10327 * C319 + C47473 * C1587 - C10328 * C1586) *
                C47471) *
               C47105 * C47174 * C47219) *
              C47457)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C10325 * C122 - C10327 * C115 + C47473 * C491 - C10328 * C481) *
                C15949 +
            (C10325 * C136 - C10327 * C123 + C47473 * C511 - C10328 * C492) *
                C15945 +
            (C25705 - C25706 + C25707 - C25708) * C15950 +
            (C25709 - C25710 + C25711 - C25712) * C47471) *
               C47105 * C47174 * C47499 +
           ((C25706 - C25705 + C25708 - C25707) * C15949 +
            (C25710 - C25709 + C25712 - C25711) * C15945 +
            (C25713 - C25714 + C25715 - C25716) * C15950 +
            (C25717 - C25718 + C25719 - C25720) * C47471) *
               C47105 * C47174 * C47495 +
           ((C25714 - C25713 + C25716 - C25715) * C15949 +
            (C25718 - C25717 + C25720 - C25719) * C15945 +
            (C26557 - C26558 + C26559 - C26560) * C15950 +
            (C26561 - C26562 + C26563 - C26564) * C47471) *
               C47105 * C47174 * C47485 +
           ((C26558 - C26557 + C26560 - C26559) * C15949 +
            (C26562 - C26561 + C26564 - C26563) * C15945 +
            (C26565 - C26566 + C26567 - C26568) * C15950 +
            (C26569 - C26570 + C26571 - C26572) * C47471) *
               C47105 * C47174 * C47463) *
              C2608 +
          (((C10331 - C10330 + C10333 - C10332) * C15949 +
            (C10335 - C10334 + C10337 - C10336) * C15945 +
            (C10508 - C10509 + C10510 - C10511) * C15950 +
            (C10512 - C10513 + C10514 - C10515) * C47471) *
               C47105 * C47174 * C47499 +
           ((C10509 - C10508 + C10511 - C10510) * C15949 +
            (C10513 - C10512 + C10515 - C10514) * C15945 +
            (C10516 - C10517 + C10518 - C10519) * C15950 +
            (C10520 - C10521 + C10522 - C10523) * C47471) *
               C47105 * C47174 * C47495 +
           ((C10517 - C10516 + C10519 - C10518) * C15949 +
            (C10521 - C10520 + C10523 - C10522) * C15945 +
            (C11708 - C11709 + C11710 - C11711) * C15950 +
            (C11712 - C11713 + C11714 - C11715) * C47471) *
               C47105 * C47174 * C47485 +
           ((C11709 - C11708 + C11711 - C11710) * C15949 +
            (C11713 - C11712 + C11715 - C11714) * C15945 +
            (C10325 * C1166 - C10327 * C1156 + C47473 * C6415 -
             C10328 * C6412) *
                C15950 +
            (C10325 * C1174 - C10327 * C1167 + C47473 * C6418 -
             C10328 * C6416) *
                C47471) *
               C47105 * C47174 * C47463) *
              C47139)) /
            (p * q * std::sqrt(p + q));
    d2ee[130] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C10325 * C122 - C10327 * C115 + C47473 * C491 - C10328 * C481) *
                 C15949 +
             (C10325 * C136 - C10327 * C123 + C47473 * C511 - C10328 * C492) *
                 C15945 +
             (C25705 - C25706 + C25707 - C25708) * C15950 +
             (C25709 - C25710 + C25711 - C25712) * C47471) *
                C47105 * C3262 +
            ((C10327 * C481 - C10325 * C491 + C10328 * C484 - C47473 * C497) *
                 C15949 +
             (C10327 * C492 - C10325 * C511 + C10328 * C498 - C47473 * C514) *
                 C15945 +
             (C26321 - C26322 + C26323 - C26324) * C15950 +
             (C26325 - C26326 + C26327 - C26328) * C47471) *
                C47105 * C47261) *
               C47215 +
           (((C25706 - C25705 + C25708 - C25707) * C15949 +
             (C25710 - C25709 + C25712 - C25711) * C15945 +
             (C25713 - C25714 + C25715 - C25716) * C15950 +
             (C25717 - C25718 + C25719 - C25720) * C47471) *
                C47105 * C3262 +
            ((C26322 - C26321 + C26324 - C26323) * C15949 +
             (C26326 - C26325 + C26328 - C26327) * C15945 +
             (C26727 - C26728 + C26729 - C26730) * C15950 +
             (C26731 - C26732 + C26733 - C26734) * C47471) *
                C47105 * C47261) *
               C47222 +
           (((C25714 - C25713 + C25716 - C25715) * C15949 +
             (C25718 - C25717 + C25720 - C25719) * C15945 +
             (C26557 - C26558 + C26559 - C26560) * C15950 +
             (C26561 - C26562 + C26563 - C26564) * C47471) *
                C47105 * C3262 +
            ((C26728 - C26727 + C26730 - C26729) * C15949 +
             (C26732 - C26731 + C26734 - C26733) * C15945 +
             (C27197 - C27198 + C27199 - C27200) * C15950 +
             (C27201 - C27202 + C27203 - C27204) * C47471) *
                C47105 * C47261) *
               C2868) *
              C47407 +
          ((((C10331 - C10330 + C10333 - C10332) * C15949 +
             (C10335 - C10334 + C10337 - C10336) * C15945 +
             (C10508 - C10509 + C10510 - C10511) * C15950 +
             (C10512 - C10513 + C10514 - C10515) * C47471) *
                C47105 * C3262 +
            ((C10687 - C10686 + C10689 - C10688) * C15949 +
             (C10691 - C10690 + C10693 - C10692) * C15945 +
             (C11188 - C11189 + C11190 - C11191) * C15950 +
             (C11192 - C11193 + C11194 - C11195) * C47471) *
                C47105 * C47261) *
               C47215 +
           (((C10509 - C10508 + C10511 - C10510) * C15949 +
             (C10513 - C10512 + C10515 - C10514) * C15945 +
             (C10516 - C10517 + C10518 - C10519) * C15950 +
             (C10520 - C10521 + C10522 - C10523) * C47471) *
                C47105 * C3262 +
            ((C11189 - C11188 + C11191 - C11190) * C15949 +
             (C11193 - C11192 + C11195 - C11194) * C15945 +
             (C11910 - C11911 + C11912 - C11913) * C15950 +
             (C11914 - C11915 + C11916 - C11917) * C47471) *
                C47105 * C47261) *
               C47222 +
           (((C10517 - C10516 + C10519 - C10518) * C15949 +
             (C10521 - C10520 + C10523 - C10522) * C15945 +
             (C11708 - C11709 + C11710 - C11711) * C15950 +
             (C11712 - C11713 + C11714 - C11715) * C47471) *
                C47105 * C3262 +
            ((C11911 - C11910 + C11913 - C11912) * C15949 +
             (C11915 - C11914 + C11917 - C11916) * C15945 +
             (C10325 * C1699 - C10327 * C1695 + C47473 * C5925 -
              C10328 * C5922) *
                 C15950 +
             (C10325 * C1704 - C10327 * C1700 + C47473 * C5928 -
              C10328 * C5926) *
                 C47471) *
                C47105 * C47261) *
               C2868) *
              C47139)) /
        (p * q * std::sqrt(p + q));
    d2ee[131] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C10325 * C122 - C10327 * C115 + C47473 * C491 - C10328 * C481) *
                C15949 +
            (C10325 * C136 - C10327 * C123 + C47473 * C511 - C10328 * C492) *
                C15945 +
            (C25705 - C25706 + C25707 - C25708) * C15950 +
            (C25709 - C25710 + C25711 - C25712) * C47471) *
               C47105 * C47257 +
           ((C10327 * C481 - C10325 * C491 + C10328 * C484 - C47473 * C497) *
                C15949 +
            (C10327 * C492 - C10325 * C511 + C10328 * C498 - C47473 * C514) *
                C15945 +
            (C26321 - C26322 + C26323 - C26324) * C15950 +
            (C26325 - C26326 + C26327 - C26328) * C47471) *
               C47105 * C47264 +
           ((C10325 * C497 - C10327 * C484 + C47473 * C2002 - C10328 * C1996) *
                C15949 +
            (C10325 * C514 - C10327 * C498 + C47473 * C2014 - C10328 * C2003) *
                C15945 +
            (C26719 - C26720 + C26721 - C26722) * C15950 +
            (C26723 - C26724 + C26725 - C26726) * C47471) *
               C47105 * C3770) *
              C47215 +
          (((C25706 - C25705 + C25708 - C25707) * C15949 +
            (C25710 - C25709 + C25712 - C25711) * C15945 +
            (C25713 - C25714 + C25715 - C25716) * C15950 +
            (C25717 - C25718 + C25719 - C25720) * C47471) *
               C47105 * C47257 +
           ((C26322 - C26321 + C26324 - C26323) * C15949 +
            (C26326 - C26325 + C26328 - C26327) * C15945 +
            (C26727 - C26728 + C26729 - C26730) * C15950 +
            (C26731 - C26732 + C26733 - C26734) * C47471) *
               C47105 * C47264 +
           ((C26720 - C26719 + C26722 - C26721) * C15949 +
            (C26724 - C26723 + C26726 - C26725) * C15945 +
            (C26735 - C26736 + C26737 - C26738) * C15950 +
            (C26739 - C26740 + C26741 - C26742) * C47471) *
               C47105 * C3770) *
              C47222 +
          (((C25714 - C25713 + C25716 - C25715) * C15949 +
            (C25718 - C25717 + C25720 - C25719) * C15945 +
            (C26557 - C26558 + C26559 - C26560) * C15950 +
            (C26561 - C26562 + C26563 - C26564) * C47471) *
               C47105 * C47257 +
           ((C26728 - C26727 + C26730 - C26729) * C15949 +
            (C26732 - C26731 + C26734 - C26733) * C15945 +
            (C27197 - C27198 + C27199 - C27200) * C15950 +
            (C27201 - C27202 + C27203 - C27204) * C47471) *
               C47105 * C47264 +
           ((C26736 - C26735 + C26738 - C26737) * C15949 +
            (C26740 - C26739 + C26742 - C26741) * C15945 +
            (C10325 * C5923 - C10327 * C5921 + C47473 * C23237 -
             C10328 * C23236) *
                C15950 +
            (C10325 * C5927 - C10327 * C5924 + C47473 * C23239 -
             C10328 * C23238) *
                C47471) *
               C47105 * C3770) *
              C2868) *
         C47128) /
        (p * q * std::sqrt(p + q));
    d2ee[132] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C10325 * C122 - C10327 * C115 + C47473 * C491 - C10328 * C481) *
                C15949 +
            (C10325 * C136 - C10327 * C123 + C47473 * C511 - C10328 * C492) *
                C15945 +
            (C25705 - C25706 + C25707 - C25708) * C15950 +
            (C25709 - C25710 + C25711 - C25712) * C47471) *
               C47105 * C3262 +
           ((C10327 * C481 - C10325 * C491 + C10328 * C484 - C47473 * C497) *
                C15949 +
            (C10327 * C492 - C10325 * C511 + C10328 * C498 - C47473 * C514) *
                C15945 +
            (C26321 - C26322 + C26323 - C26324) * C15950 +
            (C26325 - C26326 + C26327 - C26328) * C47471) *
               C47105 * C47261) *
              C47499 +
          (((C25706 - C25705 + C25708 - C25707) * C15949 +
            (C25710 - C25709 + C25712 - C25711) * C15945 +
            (C25713 - C25714 + C25715 - C25716) * C15950 +
            (C25717 - C25718 + C25719 - C25720) * C47471) *
               C47105 * C3262 +
           ((C26322 - C26321 + C26324 - C26323) * C15949 +
            (C26326 - C26325 + C26328 - C26327) * C15945 +
            (C26727 - C26728 + C26729 - C26730) * C15950 +
            (C26731 - C26732 + C26733 - C26734) * C47471) *
               C47105 * C47261) *
              C47495 +
          (((C25714 - C25713 + C25716 - C25715) * C15949 +
            (C25718 - C25717 + C25720 - C25719) * C15945 +
            (C26557 - C26558 + C26559 - C26560) * C15950 +
            (C26561 - C26562 + C26563 - C26564) * C47471) *
               C47105 * C3262 +
           ((C26728 - C26727 + C26730 - C26729) * C15949 +
            (C26732 - C26731 + C26734 - C26733) * C15945 +
            (C27197 - C27198 + C27199 - C27200) * C15950 +
            (C27201 - C27202 + C27203 - C27204) * C47471) *
               C47105 * C47261) *
              C47485 +
          (((C26558 - C26557 + C26560 - C26559) * C15949 +
            (C26562 - C26561 + C26564 - C26563) * C15945 +
            (C26565 - C26566 + C26567 - C26568) * C15950 +
            (C26569 - C26570 + C26571 - C26572) * C47471) *
               C47105 * C3262 +
           ((C27198 - C27197 + C27200 - C27199) * C15949 +
            (C27202 - C27201 + C27204 - C27203) * C15945 +
            (C10325 * C6413 - C10327 * C6411 + C47473 * C22245 -
             C10328 * C22244) *
                C15950 +
            (C10325 * C6417 - C10327 * C6414 + C47473 * C22247 -
             C10328 * C22246) *
                C47471) *
               C47105 * C47261) *
              C47463) *
         C47128) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C10325 * C122 - C10327 * C115 + C47473 * C491 - C10328 * C481) *
                 C15949 +
             (C10325 * C136 - C10327 * C123 + C47473 * C511 - C10328 * C492) *
                 C15945 +
             (C25705 - C25706 + C25707 - C25708) * C15950 +
             (C25709 - C25710 + C25711 - C25712) * C47471) *
                C47105 * C3262 +
            ((C10327 * C481 - C10325 * C491 + C10328 * C484 - C47473 * C497) *
                 C15949 +
             (C10327 * C492 - C10325 * C511 + C10328 * C498 - C47473 * C514) *
                 C15945 +
             (C26321 - C26322 + C26323 - C26324) * C15950 +
             (C26325 - C26326 + C26327 - C26328) * C47471) *
                C47105 * C47261) *
               C2500 +
           (((C25706 - C25705 + C25708 - C25707) * C15949 +
             (C25710 - C25709 + C25712 - C25711) * C15945 +
             (C25713 - C25714 + C25715 - C25716) * C15950 +
             (C25717 - C25718 + C25719 - C25720) * C47471) *
                C47105 * C3262 +
            ((C26322 - C26321 + C26324 - C26323) * C15949 +
             (C26326 - C26325 + C26328 - C26327) * C15945 +
             (C26727 - C26728 + C26729 - C26730) * C15950 +
             (C26731 - C26732 + C26733 - C26734) * C47471) *
                C47105 * C47261) *
               C47219) *
              C47489 +
          ((((C10331 - C10330 + C10333 - C10332) * C15949 +
             (C10335 - C10334 + C10337 - C10336) * C15945 +
             (C10508 - C10509 + C10510 - C10511) * C15950 +
             (C10512 - C10513 + C10514 - C10515) * C47471) *
                C47105 * C3262 +
            ((C10687 - C10686 + C10689 - C10688) * C15949 +
             (C10691 - C10690 + C10693 - C10692) * C15945 +
             (C11188 - C11189 + C11190 - C11191) * C15950 +
             (C11192 - C11193 + C11194 - C11195) * C47471) *
                C47105 * C47261) *
               C2500 +
           (((C10509 - C10508 + C10511 - C10510) * C15949 +
             (C10513 - C10512 + C10515 - C10514) * C15945 +
             (C10516 - C10517 + C10518 - C10519) * C15950 +
             (C10520 - C10521 + C10522 - C10523) * C47471) *
                C47105 * C3262 +
            ((C11189 - C11188 + C11191 - C11190) * C15949 +
             (C11193 - C11192 + C11195 - C11194) * C15945 +
             (C11910 - C11911 + C11912 - C11913) * C15950 +
             (C11914 - C11915 + C11916 - C11917) * C47471) *
                C47105 * C47261) *
               C47219) *
              C47476 +
          ((((C10339 - C10338 + C10341 - C10340) * C15949 +
             (C10343 - C10342 + C10345 - C10344) * C15945 +
             (C10524 - C10525 + C10526 - C10527) * C15950 +
             (C10528 - C10529 + C10530 - C10531) * C47471) *
                C47105 * C3262 +
            ((C10703 - C10702 + C10705 - C10704) * C15949 +
             (C10707 - C10706 + C10709 - C10708) * C15945 +
             (C11196 - C11197 + C11198 - C11199) * C15950 +
             (C11200 - C11201 + C11202 - C11203) * C47471) *
                C47105 * C47261) *
               C2500 +
           (((C10525 - C10524 + C10527 - C10526) * C15949 +
             (C10529 - C10528 + C10531 - C10530) * C15945 +
             (C10532 - C10533 + C10534 - C10535) * C15950 +
             (C10536 - C10537 + C10538 - C10539) * C47471) *
                C47105 * C3262 +
            ((C11197 - C11196 + C11199 - C11198) * C15949 +
             (C11201 - C11200 + C11203 - C11202) * C15945 +
             (C10325 * C1305 - C10327 * C1291 + C47473 * C1311 -
              C10328 * C1294) *
                 C15950 +
             (C10325 * C1318 - C10327 * C1306 + C47473 * C1321 -
              C10328 * C1312) *
                 C47471) *
                C47105 * C47261) *
               C47219) *
              C47447)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C10325 * C122 - C10327 * C115 + C47473 * C491 - C10328 * C481) *
                C15949 +
            (C10325 * C136 - C10327 * C123 + C47473 * C511 - C10328 * C492) *
                C15945 +
            (C25705 - C25706 + C25707 - C25708) * C15950 +
            (C25709 - C25710 + C25711 - C25712) * C47471) *
               C47105 * C47500 +
           ((C10327 * C481 - C10325 * C491 + C10328 * C484 - C47473 * C497) *
                C15949 +
            (C10327 * C492 - C10325 * C511 + C10328 * C498 - C47473 * C514) *
                C15945 +
            (C26321 - C26322 + C26323 - C26324) * C15950 +
            (C26325 - C26326 + C26327 - C26328) * C47471) *
               C47105 * C47497 +
           ((C10325 * C497 - C10327 * C484 + C47473 * C2002 - C10328 * C1996) *
                C15949 +
            (C10325 * C514 - C10327 * C498 + C47473 * C2014 - C10328 * C2003) *
                C15945 +
            (C26719 - C26720 + C26721 - C26722) * C15950 +
            (C26723 - C26724 + C26725 - C26726) * C47471) *
               C47105 * C47488 +
           ((C10327 * C1996 - C10325 * C2002 + C10328 * C1999 -
             C47473 * C2008) *
                C15949 +
            (C10327 * C2003 - C10325 * C2014 + C10328 * C2009 -
             C47473 * C2017) *
                C15945 +
            (C28037 - C28038 + C28039 - C28040) * C15950 +
            (C28041 - C28042 + C28043 - C28044) * C47471) *
               C47105 * C47469) *
              C2500 +
          (((C25706 - C25705 + C25708 - C25707) * C15949 +
            (C25710 - C25709 + C25712 - C25711) * C15945 +
            (C25713 - C25714 + C25715 - C25716) * C15950 +
            (C25717 - C25718 + C25719 - C25720) * C47471) *
               C47105 * C47500 +
           ((C26322 - C26321 + C26324 - C26323) * C15949 +
            (C26326 - C26325 + C26328 - C26327) * C15945 +
            (C26727 - C26728 + C26729 - C26730) * C15950 +
            (C26731 - C26732 + C26733 - C26734) * C47471) *
               C47105 * C47497 +
           ((C26720 - C26719 + C26722 - C26721) * C15949 +
            (C26724 - C26723 + C26726 - C26725) * C15945 +
            (C26735 - C26736 + C26737 - C26738) * C15950 +
            (C26739 - C26740 + C26741 - C26742) * C47471) *
               C47105 * C47488 +
           ((C28038 - C28037 + C28040 - C28039) * C15949 +
            (C28042 - C28041 + C28044 - C28043) * C15945 +
            (C10325 * C7269 - C10327 * C7267 + C47473 * C22891 -
             C10328 * C22890) *
                C15950 +
            (C10325 * C7273 - C10327 * C7270 + C47473 * C22893 -
             C10328 * C22892) *
                C47471) *
               C47105 * C47469) *
              C47219) *
         C47128) /
            (p * q * std::sqrt(p + q));
    d2ee[133] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C10325 * C122 - C10327 * C115 + C47473 * C491 - C10328 * C481) *
                 C15949 +
             (C10325 * C136 - C10327 * C123 + C47473 * C511 - C10328 * C492) *
                 C15945 +
             (C25705 - C25706 + C25707 - C25708) * C15950 +
             (C25709 - C25710 + C25711 - C25712) * C47471) *
                C47105 * C47257 +
            ((C10327 * C481 - C10325 * C491 + C10328 * C484 - C47473 * C497) *
                 C15949 +
             (C10327 * C492 - C10325 * C511 + C10328 * C498 - C47473 * C514) *
                 C15945 +
             (C26321 - C26322 + C26323 - C26324) * C15950 +
             (C26325 - C26326 + C26327 - C26328) * C47471) *
                C47105 * C47264 +
            ((C10325 * C497 - C10327 * C484 + C47473 * C2002 - C10328 * C1996) *
                 C15949 +
             (C10325 * C514 - C10327 * C498 + C47473 * C2014 - C10328 * C2003) *
                 C15945 +
             (C26719 - C26720 + C26721 - C26722) * C15950 +
             (C26723 - C26724 + C26725 - C26726) * C47471) *
                C47105 * C3770) *
               C2500 +
           (((C25706 - C25705 + C25708 - C25707) * C15949 +
             (C25710 - C25709 + C25712 - C25711) * C15945 +
             (C25713 - C25714 + C25715 - C25716) * C15950 +
             (C25717 - C25718 + C25719 - C25720) * C47471) *
                C47105 * C47257 +
            ((C26322 - C26321 + C26324 - C26323) * C15949 +
             (C26326 - C26325 + C26328 - C26327) * C15945 +
             (C26727 - C26728 + C26729 - C26730) * C15950 +
             (C26731 - C26732 + C26733 - C26734) * C47471) *
                C47105 * C47264 +
            ((C26720 - C26719 + C26722 - C26721) * C15949 +
             (C26724 - C26723 + C26726 - C26725) * C15945 +
             (C26735 - C26736 + C26737 - C26738) * C15950 +
             (C26739 - C26740 + C26741 - C26742) * C47471) *
                C47105 * C3770) *
               C47219) *
              C47407 +
          ((((C10331 - C10330 + C10333 - C10332) * C15949 +
             (C10335 - C10334 + C10337 - C10336) * C15945 +
             (C10508 - C10509 + C10510 - C10511) * C15950 +
             (C10512 - C10513 + C10514 - C10515) * C47471) *
                C47105 * C47257 +
            ((C10687 - C10686 + C10689 - C10688) * C15949 +
             (C10691 - C10690 + C10693 - C10692) * C15945 +
             (C11188 - C11189 + C11190 - C11191) * C15950 +
             (C11192 - C11193 + C11194 - C11195) * C47471) *
                C47105 * C47264 +
            ((C10695 - C10694 + C10697 - C10696) * C15949 +
             (C10699 - C10698 + C10701 - C10700) * C15945 +
             (C12624 - C12625 + C12626 - C12627) * C15950 +
             (C12628 - C12629 + C12630 - C12631) * C47471) *
                C47105 * C3770) *
               C2500 +
           (((C10509 - C10508 + C10511 - C10510) * C15949 +
             (C10513 - C10512 + C10515 - C10514) * C15945 +
             (C10516 - C10517 + C10518 - C10519) * C15950 +
             (C10520 - C10521 + C10522 - C10523) * C47471) *
                C47105 * C47257 +
            ((C11189 - C11188 + C11191 - C11190) * C15949 +
             (C11193 - C11192 + C11195 - C11194) * C15945 +
             (C11910 - C11911 + C11912 - C11913) * C15950 +
             (C11914 - C11915 + C11916 - C11917) * C47471) *
                C47105 * C47264 +
            ((C12625 - C12624 + C12627 - C12626) * C15949 +
             (C12629 - C12628 + C12631 - C12630) * C15945 +
             (C10325 * C1309 - C10327 * C1293 + C47473 * C7271 -
              C10328 * C7268) *
                 C15950 +
             (C10325 * C1320 - C10327 * C1310 + C47473 * C7274 -
              C10328 * C7272) *
                 C47471) *
                C47105 * C3770) *
               C47219) *
              C47139)) /
        (p * q * std::sqrt(p + q));
    d2ee[134] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C10325 * C122 - C10327 * C115 + C47473 * C491 - C10328 * C481) *
                 C15949 +
             (C10325 * C136 - C10327 * C123 + C47473 * C511 - C10328 * C492) *
                 C15945 +
             (C25705 - C25706 + C25707 - C25708) * C15950 +
             (C25709 - C25710 + C25711 - C25712) * C47471) *
                C47105 * C3262 +
            ((C10327 * C481 - C10325 * C491 + C10328 * C484 - C47473 * C497) *
                 C15949 +
             (C10327 * C492 - C10325 * C511 + C10328 * C498 - C47473 * C514) *
                 C15945 +
             (C26321 - C26322 + C26323 - C26324) * C15950 +
             (C26325 - C26326 + C26327 - C26328) * C47471) *
                C47105 * C47261) *
               C2500 +
           (((C25706 - C25705 + C25708 - C25707) * C15949 +
             (C25710 - C25709 + C25712 - C25711) * C15945 +
             (C25713 - C25714 + C25715 - C25716) * C15950 +
             (C25717 - C25718 + C25719 - C25720) * C47471) *
                C47105 * C3262 +
            ((C26322 - C26321 + C26324 - C26323) * C15949 +
             (C26326 - C26325 + C26328 - C26327) * C15945 +
             (C26727 - C26728 + C26729 - C26730) * C15950 +
             (C26731 - C26732 + C26733 - C26734) * C47471) *
                C47105 * C47261) *
               C47219) *
              C47489 +
          ((((C10331 - C10330 + C10333 - C10332) * C15949 +
             (C10335 - C10334 + C10337 - C10336) * C15945 +
             (C10508 - C10509 + C10510 - C10511) * C15950 +
             (C10512 - C10513 + C10514 - C10515) * C47471) *
                C47105 * C3262 +
            ((C10687 - C10686 + C10689 - C10688) * C15949 +
             (C10691 - C10690 + C10693 - C10692) * C15945 +
             (C11188 - C11189 + C11190 - C11191) * C15950 +
             (C11192 - C11193 + C11194 - C11195) * C47471) *
                C47105 * C47261) *
               C2500 +
           (((C10509 - C10508 + C10511 - C10510) * C15949 +
             (C10513 - C10512 + C10515 - C10514) * C15945 +
             (C10516 - C10517 + C10518 - C10519) * C15950 +
             (C10520 - C10521 + C10522 - C10523) * C47471) *
                C47105 * C3262 +
            ((C11189 - C11188 + C11191 - C11190) * C15949 +
             (C11193 - C11192 + C11195 - C11194) * C15945 +
             (C11910 - C11911 + C11912 - C11913) * C15950 +
             (C11914 - C11915 + C11916 - C11917) * C47471) *
                C47105 * C47261) *
               C47219) *
              C47476 +
          ((((C10339 - C10338 + C10341 - C10340) * C15949 +
             (C10343 - C10342 + C10345 - C10344) * C15945 +
             (C10524 - C10525 + C10526 - C10527) * C15950 +
             (C10528 - C10529 + C10530 - C10531) * C47471) *
                C47105 * C3262 +
            ((C10703 - C10702 + C10705 - C10704) * C15949 +
             (C10707 - C10706 + C10709 - C10708) * C15945 +
             (C11196 - C11197 + C11198 - C11199) * C15950 +
             (C11200 - C11201 + C11202 - C11203) * C47471) *
                C47105 * C47261) *
               C2500 +
           (((C10525 - C10524 + C10527 - C10526) * C15949 +
             (C10529 - C10528 + C10531 - C10530) * C15945 +
             (C10532 - C10533 + C10534 - C10535) * C15950 +
             (C10536 - C10537 + C10538 - C10539) * C47471) *
                C47105 * C3262 +
            ((C11197 - C11196 + C11199 - C11198) * C15949 +
             (C11201 - C11200 + C11203 - C11202) * C15945 +
             (C10325 * C1305 - C10327 * C1291 + C47473 * C1311 -
              C10328 * C1294) *
                 C15950 +
             (C10325 * C1318 - C10327 * C1306 + C47473 * C1321 -
              C10328 * C1312) *
                 C47471) *
                C47105 * C47261) *
               C47219) *
              C47447)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C10325 * C122 - C10327 * C115 + C47473 * C491 - C10328 * C481) *
                C15949 +
            (C10325 * C136 - C10327 * C123 + C47473 * C511 - C10328 * C492) *
                C15945 +
            (C25705 - C25706 + C25707 - C25708) * C15950 +
            (C25709 - C25710 + C25711 - C25712) * C47471) *
               C47105 * C3262 +
           ((C10327 * C481 - C10325 * C491 + C10328 * C484 - C47473 * C497) *
                C15949 +
            (C10327 * C492 - C10325 * C511 + C10328 * C498 - C47473 * C514) *
                C15945 +
            (C26321 - C26322 + C26323 - C26324) * C15950 +
            (C26325 - C26326 + C26327 - C26328) * C47471) *
               C47105 * C47261) *
              C47499 +
          (((C25706 - C25705 + C25708 - C25707) * C15949 +
            (C25710 - C25709 + C25712 - C25711) * C15945 +
            (C25713 - C25714 + C25715 - C25716) * C15950 +
            (C25717 - C25718 + C25719 - C25720) * C47471) *
               C47105 * C3262 +
           ((C26322 - C26321 + C26324 - C26323) * C15949 +
            (C26326 - C26325 + C26328 - C26327) * C15945 +
            (C26727 - C26728 + C26729 - C26730) * C15950 +
            (C26731 - C26732 + C26733 - C26734) * C47471) *
               C47105 * C47261) *
              C47495 +
          (((C25714 - C25713 + C25716 - C25715) * C15949 +
            (C25718 - C25717 + C25720 - C25719) * C15945 +
            (C26557 - C26558 + C26559 - C26560) * C15950 +
            (C26561 - C26562 + C26563 - C26564) * C47471) *
               C47105 * C3262 +
           ((C26728 - C26727 + C26730 - C26729) * C15949 +
            (C26732 - C26731 + C26734 - C26733) * C15945 +
            (C27197 - C27198 + C27199 - C27200) * C15950 +
            (C27201 - C27202 + C27203 - C27204) * C47471) *
               C47105 * C47261) *
              C47485 +
          (((C26558 - C26557 + C26560 - C26559) * C15949 +
            (C26562 - C26561 + C26564 - C26563) * C15945 +
            (C26565 - C26566 + C26567 - C26568) * C15950 +
            (C26569 - C26570 + C26571 - C26572) * C47471) *
               C47105 * C3262 +
           ((C27198 - C27197 + C27200 - C27199) * C15949 +
            (C27202 - C27201 + C27204 - C27203) * C15945 +
            (C10325 * C6413 - C10327 * C6411 + C47473 * C22245 -
             C10328 * C22244) *
                C15950 +
            (C10325 * C6417 - C10327 * C6414 + C47473 * C22247 -
             C10328 * C22246) *
                C47471) *
               C47105 * C47261) *
              C47463) *
         C47128) /
            (p * q * std::sqrt(p + q));
    d2ee[135] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C10325 * C122 - C10327 * C115 + C47473 * C491 - C10328 * C481) *
                C15949 +
            (C10325 * C136 - C10327 * C123 + C47473 * C511 - C10328 * C492) *
                C15945 +
            (C25705 - C25706 + C25707 - C25708) * C15950 +
            (C25709 - C25710 + C25711 - C25712) * C47471) *
               C47105 * C47174 * C1420 +
           ((C25706 - C25705 + C25708 - C25707) * C15949 +
            (C25710 - C25709 + C25712 - C25711) * C15945 +
            (C25713 - C25714 + C25715 - C25716) * C15950 +
            (C25717 - C25718 + C25719 - C25720) * C47471) *
               C47105 * C47174 * C1421 +
           ((C25714 - C25713 + C25716 - C25715) * C15949 +
            (C25718 - C25717 + C25720 - C25719) * C15945 +
            (C26557 - C26558 + C26559 - C26560) * C15950 +
            (C26561 - C26562 + C26563 - C26564) * C47471) *
               C47105 * C47174 * C1422 +
           ((C26558 - C26557 + C26560 - C26559) * C15949 +
            (C26562 - C26561 + C26564 - C26563) * C15945 +
            (C26565 - C26566 + C26567 - C26568) * C15950 +
            (C26569 - C26570 + C26571 - C26572) * C47471) *
               C47105 * C47174 * C47463) *
              C47407 +
          (((C10331 - C10330 + C10333 - C10332) * C15949 +
            (C10335 - C10334 + C10337 - C10336) * C15945 +
            (C10508 - C10509 + C10510 - C10511) * C15950 +
            (C10512 - C10513 + C10514 - C10515) * C47471) *
               C47105 * C47174 * C1420 +
           ((C10509 - C10508 + C10511 - C10510) * C15949 +
            (C10513 - C10512 + C10515 - C10514) * C15945 +
            (C10516 - C10517 + C10518 - C10519) * C15950 +
            (C10520 - C10521 + C10522 - C10523) * C47471) *
               C47105 * C47174 * C1421 +
           ((C10517 - C10516 + C10519 - C10518) * C15949 +
            (C10521 - C10520 + C10523 - C10522) * C15945 +
            (C11708 - C11709 + C11710 - C11711) * C15950 +
            (C11712 - C11713 + C11714 - C11715) * C47471) *
               C47105 * C47174 * C1422 +
           ((C11709 - C11708 + C11711 - C11710) * C15949 +
            (C11713 - C11712 + C11715 - C11714) * C15945 +
            (C10325 * C1166 - C10327 * C1156 + C47473 * C6415 -
             C10328 * C6412) *
                C15950 +
            (C10325 * C1174 - C10327 * C1167 + C47473 * C6418 -
             C10328 * C6416) *
                C47471) *
               C47105 * C47174 * C47463) *
              C47139)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C10325 * C122 - C10327 * C115 + C47473 * C491 - C10328 * C481) *
                C15949 +
            (C10325 * C136 - C10327 * C123 + C47473 * C511 - C10328 * C492) *
                C15945 +
            (C25705 - C25706 + C25707 - C25708) * C15950 +
            (C25709 - C25710 + C25711 - C25712) * C47471) *
               C47105 * C47174 * C47421 +
           ((C25706 - C25705 + C25708 - C25707) * C15949 +
            (C25710 - C25709 + C25712 - C25711) * C15945 +
            (C25713 - C25714 + C25715 - C25716) * C15950 +
            (C25717 - C25718 + C25719 - C25720) * C47471) *
               C47105 * C47174 * C47219) *
              C655 +
          (((C10331 - C10330 + C10333 - C10332) * C15949 +
            (C10335 - C10334 + C10337 - C10336) * C15945 +
            (C10508 - C10509 + C10510 - C10511) * C15950 +
            (C10512 - C10513 + C10514 - C10515) * C47471) *
               C47105 * C47174 * C47421 +
           ((C10509 - C10508 + C10511 - C10510) * C15949 +
            (C10513 - C10512 + C10515 - C10514) * C15945 +
            (C10516 - C10517 + C10518 - C10519) * C15950 +
            (C10520 - C10521 + C10522 - C10523) * C47471) *
               C47105 * C47174 * C47219) *
              C656 +
          (((C10339 - C10338 + C10341 - C10340) * C15949 +
            (C10343 - C10342 + C10345 - C10344) * C15945 +
            (C10524 - C10525 + C10526 - C10527) * C15950 +
            (C10528 - C10529 + C10530 - C10531) * C47471) *
               C47105 * C47174 * C47421 +
           ((C10525 - C10524 + C10527 - C10526) * C15949 +
            (C10529 - C10528 + C10531 - C10530) * C15945 +
            (C10532 - C10533 + C10534 - C10535) * C15950 +
            (C10536 - C10537 + C10538 - C10539) * C47471) *
               C47105 * C47174 * C47219) *
              C657 +
          (((C10347 - C10346 + C10349 - C10348) * C15949 +
            (C10351 - C10350 + C10353 - C10352) * C15945 +
            (C10848 - C10849 + C10850 - C10851) * C15950 +
            (C10852 - C10853 + C10854 - C10855) * C47471) *
               C47105 * C47174 * C47421 +
           ((C10849 - C10848 + C10851 - C10850) * C15949 +
            (C10853 - C10852 + C10855 - C10854) * C15945 +
            (C10325 * C318 - C10327 * C301 + C47473 * C1585 - C10328 * C1584) *
                C15950 +
            (C10325 * C331 - C10327 * C319 + C47473 * C1587 - C10328 * C1586) *
                C47471) *
               C47105 * C47174 * C47219) *
              C47457)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C10325 * C122 - C10327 * C115 + C47473 * C491 - C10328 * C481) *
                 C15949 +
             (C10325 * C136 - C10327 * C123 + C47473 * C511 - C10328 * C492) *
                 C15945 +
             (C25705 - C25706 + C25707 - C25708) * C15950 +
             (C25709 - C25710 + C25711 - C25712) * C47471) *
                C47105 * C1816 +
            ((C10327 * C481 - C10325 * C491 + C10328 * C484 - C47473 * C497) *
                 C15949 +
             (C10327 * C492 - C10325 * C511 + C10328 * C498 - C47473 * C514) *
                 C15945 +
             (C26321 - C26322 + C26323 - C26324) * C15950 +
             (C26325 - C26326 + C26327 - C26328) * C47471) *
                C47105 * C1817 +
            ((C10325 * C497 - C10327 * C484 + C47473 * C2002 - C10328 * C1996) *
                 C15949 +
             (C10325 * C514 - C10327 * C498 + C47473 * C2014 - C10328 * C2003) *
                 C15945 +
             (C26719 - C26720 + C26721 - C26722) * C15950 +
             (C26723 - C26724 + C26725 - C26726) * C47471) *
                C47105 * C47456) *
               C47421 +
           (((C25706 - C25705 + C25708 - C25707) * C15949 +
             (C25710 - C25709 + C25712 - C25711) * C15945 +
             (C25713 - C25714 + C25715 - C25716) * C15950 +
             (C25717 - C25718 + C25719 - C25720) * C47471) *
                C47105 * C1816 +
            ((C26322 - C26321 + C26324 - C26323) * C15949 +
             (C26326 - C26325 + C26328 - C26327) * C15945 +
             (C26727 - C26728 + C26729 - C26730) * C15950 +
             (C26731 - C26732 + C26733 - C26734) * C47471) *
                C47105 * C1817 +
            ((C26720 - C26719 + C26722 - C26721) * C15949 +
             (C26724 - C26723 + C26726 - C26725) * C15945 +
             (C26735 - C26736 + C26737 - C26738) * C15950 +
             (C26739 - C26740 + C26741 - C26742) * C47471) *
                C47105 * C47456) *
               C47219) *
              C47407 +
          ((((C10331 - C10330 + C10333 - C10332) * C15949 +
             (C10335 - C10334 + C10337 - C10336) * C15945 +
             (C10508 - C10509 + C10510 - C10511) * C15950 +
             (C10512 - C10513 + C10514 - C10515) * C47471) *
                C47105 * C1816 +
            ((C10687 - C10686 + C10689 - C10688) * C15949 +
             (C10691 - C10690 + C10693 - C10692) * C15945 +
             (C11188 - C11189 + C11190 - C11191) * C15950 +
             (C11192 - C11193 + C11194 - C11195) * C47471) *
                C47105 * C1817 +
            ((C10695 - C10694 + C10697 - C10696) * C15949 +
             (C10699 - C10698 + C10701 - C10700) * C15945 +
             (C12624 - C12625 + C12626 - C12627) * C15950 +
             (C12628 - C12629 + C12630 - C12631) * C47471) *
                C47105 * C47456) *
               C47421 +
           (((C10509 - C10508 + C10511 - C10510) * C15949 +
             (C10513 - C10512 + C10515 - C10514) * C15945 +
             (C10516 - C10517 + C10518 - C10519) * C15950 +
             (C10520 - C10521 + C10522 - C10523) * C47471) *
                C47105 * C1816 +
            ((C11189 - C11188 + C11191 - C11190) * C15949 +
             (C11193 - C11192 + C11195 - C11194) * C15945 +
             (C11910 - C11911 + C11912 - C11913) * C15950 +
             (C11914 - C11915 + C11916 - C11917) * C47471) *
                C47105 * C1817 +
            ((C12625 - C12624 + C12627 - C12626) * C15949 +
             (C12629 - C12628 + C12631 - C12630) * C15945 +
             (C10325 * C1309 - C10327 * C1293 + C47473 * C7271 -
              C10328 * C7268) *
                 C15950 +
             (C10325 * C1320 - C10327 * C1310 + C47473 * C7274 -
              C10328 * C7272) *
                 C47471) *
                C47105 * C47456) *
               C47219) *
              C47139)) /
            (p * q * std::sqrt(p + q));
    d2ee[136] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C10325 * C122 - C10327 * C115 + C47473 * C491 - C10328 * C481) *
                C15949 +
            (C10325 * C136 - C10327 * C123 + C47473 * C511 - C10328 * C492) *
                C15945 +
            (C25705 - C25706 + C25707 - C25708) * C15950 +
            (C25709 - C25710 + C25711 - C25712) * C47471) *
               C47105 * C47422 +
           ((C10327 * C481 - C10325 * C491 + C10328 * C484 - C47473 * C497) *
                C15949 +
            (C10327 * C492 - C10325 * C511 + C10328 * C498 - C47473 * C514) *
                C15945 +
            (C26321 - C26322 + C26323 - C26324) * C15950 +
            (C26325 - C26326 + C26327 - C26328) * C47471) *
               C47105 * C47261) *
              C1420 +
          (((C25706 - C25705 + C25708 - C25707) * C15949 +
            (C25710 - C25709 + C25712 - C25711) * C15945 +
            (C25713 - C25714 + C25715 - C25716) * C15950 +
            (C25717 - C25718 + C25719 - C25720) * C47471) *
               C47105 * C47422 +
           ((C26322 - C26321 + C26324 - C26323) * C15949 +
            (C26326 - C26325 + C26328 - C26327) * C15945 +
            (C26727 - C26728 + C26729 - C26730) * C15950 +
            (C26731 - C26732 + C26733 - C26734) * C47471) *
               C47105 * C47261) *
              C1421 +
          (((C25714 - C25713 + C25716 - C25715) * C15949 +
            (C25718 - C25717 + C25720 - C25719) * C15945 +
            (C26557 - C26558 + C26559 - C26560) * C15950 +
            (C26561 - C26562 + C26563 - C26564) * C47471) *
               C47105 * C47422 +
           ((C26728 - C26727 + C26730 - C26729) * C15949 +
            (C26732 - C26731 + C26734 - C26733) * C15945 +
            (C27197 - C27198 + C27199 - C27200) * C15950 +
            (C27201 - C27202 + C27203 - C27204) * C47471) *
               C47105 * C47261) *
              C1422 +
          (((C26558 - C26557 + C26560 - C26559) * C15949 +
            (C26562 - C26561 + C26564 - C26563) * C15945 +
            (C26565 - C26566 + C26567 - C26568) * C15950 +
            (C26569 - C26570 + C26571 - C26572) * C47471) *
               C47105 * C47422 +
           ((C27198 - C27197 + C27200 - C27199) * C15949 +
            (C27202 - C27201 + C27204 - C27203) * C15945 +
            (C10325 * C6413 - C10327 * C6411 + C47473 * C22245 -
             C10328 * C22244) *
                C15950 +
            (C10325 * C6417 - C10327 * C6414 + C47473 * C22247 -
             C10328 * C22246) *
                C47471) *
               C47105 * C47261) *
              C47463) *
         C47128) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C10325 * C122 - C10327 * C115 + C47473 * C491 - C10328 * C481) *
                 C15949 +
             (C10325 * C136 - C10327 * C123 + C47473 * C511 - C10328 * C492) *
                 C15945 +
             (C25705 - C25706 + C25707 - C25708) * C15950 +
             (C25709 - C25710 + C25711 - C25712) * C47471) *
                C47105 * C47422 +
            ((C10327 * C481 - C10325 * C491 + C10328 * C484 - C47473 * C497) *
                 C15949 +
             (C10327 * C492 - C10325 * C511 + C10328 * C498 - C47473 * C514) *
                 C15945 +
             (C26321 - C26322 + C26323 - C26324) * C15950 +
             (C26325 - C26326 + C26327 - C26328) * C47471) *
                C47105 * C47261) *
               C47421 +
           (((C25706 - C25705 + C25708 - C25707) * C15949 +
             (C25710 - C25709 + C25712 - C25711) * C15945 +
             (C25713 - C25714 + C25715 - C25716) * C15950 +
             (C25717 - C25718 + C25719 - C25720) * C47471) *
                C47105 * C47422 +
            ((C26322 - C26321 + C26324 - C26323) * C15949 +
             (C26326 - C26325 + C26328 - C26327) * C15945 +
             (C10325 * C1301 - C10327 * C1289 + C47473 * C1307 -
              C10328 * C1292) *
                 C15950 +
             (C10325 * C1316 - C10327 * C1302 + C47473 * C1319 -
              C10328 * C1308) *
                 C47471) *
                C47105 * C47261) *
               C47219) *
              C291 +
          ((((C10331 - C10330 + C10333 - C10332) * C15949 +
             (C10335 - C10334 + C10337 - C10336) * C15945 +
             (C10508 - C10509 + C10510 - C10511) * C15950 +
             (C10512 - C10513 + C10514 - C10515) * C47471) *
                C47105 * C47422 +
            ((C10687 - C10686 + C10689 - C10688) * C15949 +
             (C10691 - C10690 + C10693 - C10692) * C15945 +
             (C11188 - C11189 + C11190 - C11191) * C15950 +
             (C11192 - C11193 + C11194 - C11195) * C47471) *
                C47105 * C47261) *
               C47421 +
           (((C10509 - C10508 + C10511 - C10510) * C15949 +
             (C10513 - C10512 + C10515 - C10514) * C15945 +
             (C10516 - C10517 + C10518 - C10519) * C15950 +
             (C10520 - C10521 + C10522 - C10523) * C47471) *
                C47105 * C47422 +
            ((C11189 - C11188 + C11191 - C11190) * C15949 +
             (C11193 - C11192 + C11195 - C11194) * C15945 +
             (C11910 - C11911 + C11912 - C11913) * C15950 +
             (C11914 - C11915 + C11916 - C11917) * C47471) *
                C47105 * C47261) *
               C47219) *
              C292 +
          ((((C10339 - C10338 + C10341 - C10340) * C15949 +
             (C10343 - C10342 + C10345 - C10344) * C15945 +
             (C10524 - C10525 + C10526 - C10527) * C15950 +
             (C10528 - C10529 + C10530 - C10531) * C47471) *
                C47105 * C47422 +
            ((C10703 - C10702 + C10705 - C10704) * C15949 +
             (C10707 - C10706 + C10709 - C10708) * C15945 +
             (C11196 - C11197 + C11198 - C11199) * C15950 +
             (C11200 - C11201 + C11202 - C11203) * C47471) *
                C47105 * C47261) *
               C47421 +
           (((C10525 - C10524 + C10527 - C10526) * C15949 +
             (C10529 - C10528 + C10531 - C10530) * C15945 +
             (C10532 - C10533 + C10534 - C10535) * C15950 +
             (C10536 - C10537 + C10538 - C10539) * C47471) *
                C47105 * C47422 +
            ((C11197 - C11196 + C11199 - C11198) * C15949 +
             (C11201 - C11200 + C11203 - C11202) * C15945 +
             (C10325 * C1305 - C10327 * C1291 + C47473 * C1311 -
              C10328 * C1294) *
                 C15950 +
             (C10325 * C1318 - C10327 * C1306 + C47473 * C1321 -
              C10328 * C1312) *
                 C47471) *
                C47105 * C47261) *
               C47219) *
              C47447)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C10325 * C122 - C10327 * C115 + C47473 * C491 - C10328 * C481) *
                C15949 +
            (C10325 * C136 - C10327 * C123 + C47473 * C511 - C10328 * C492) *
                C15945 +
            (C25705 - C25706 + C25707 - C25708) * C15950 +
            (C25709 - C25710 + C25711 - C25712) * C47471) *
               C47105 * C2276 +
           ((C10327 * C481 - C10325 * C491 + C10328 * C484 - C47473 * C497) *
                C15949 +
            (C10327 * C492 - C10325 * C511 + C10328 * C498 - C47473 * C514) *
                C15945 +
            (C26321 - C26322 + C26323 - C26324) * C15950 +
            (C26325 - C26326 + C26327 - C26328) * C47471) *
               C47105 * C2277 +
           ((C10325 * C497 - C10327 * C484 + C47473 * C2002 - C10328 * C1996) *
                C15949 +
            (C10325 * C514 - C10327 * C498 + C47473 * C2014 - C10328 * C2003) *
                C15945 +
            (C26719 - C26720 + C26721 - C26722) * C15950 +
            (C26723 - C26724 + C26725 - C26726) * C47471) *
               C47105 * C2278 +
           ((C10327 * C1996 - C10325 * C2002 + C10328 * C1999 -
             C47473 * C2008) *
                C15949 +
            (C10327 * C2003 - C10325 * C2014 + C10328 * C2009 -
             C47473 * C2017) *
                C15945 +
            (C28037 - C28038 + C28039 - C28040) * C15950 +
            (C28041 - C28042 + C28043 - C28044) * C47471) *
               C47105 * C47469) *
              C47421 +
          (((C25706 - C25705 + C25708 - C25707) * C15949 +
            (C25710 - C25709 + C25712 - C25711) * C15945 +
            (C25713 - C25714 + C25715 - C25716) * C15950 +
            (C25717 - C25718 + C25719 - C25720) * C47471) *
               C47105 * C2276 +
           ((C26322 - C26321 + C26324 - C26323) * C15949 +
            (C26326 - C26325 + C26328 - C26327) * C15945 +
            (C26727 - C26728 + C26729 - C26730) * C15950 +
            (C26731 - C26732 + C26733 - C26734) * C47471) *
               C47105 * C2277 +
           ((C26720 - C26719 + C26722 - C26721) * C15949 +
            (C26724 - C26723 + C26726 - C26725) * C15945 +
            (C26735 - C26736 + C26737 - C26738) * C15950 +
            (C26739 - C26740 + C26741 - C26742) * C47471) *
               C47105 * C2278 +
           ((C28038 - C28037 + C28040 - C28039) * C15949 +
            (C28042 - C28041 + C28044 - C28043) * C15945 +
            (C10325 * C7269 - C10327 * C7267 + C47473 * C22891 -
             C10328 * C22890) *
                C15950 +
            (C10325 * C7273 - C10327 * C7270 + C47473 * C22893 -
             C10328 * C22892) *
                C47471) *
               C47105 * C47469) *
              C47219) *
         C47128) /
            (p * q * std::sqrt(p + q));
    d2ee[137] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((C10325 * C122 - C10327 * C115 + C47473 * C491 - C10328 * C481) *
                   C15949 +
               (C10325 * C136 - C10327 * C123 + C47473 * C511 - C10328 * C492) *
                   C15945 +
               (C10325 * C304 - C10327 * C294 + C47473 * C936 - C10328 * C931) *
                   C15950 +
               (C10325 * C324 - C10327 * C305 + C47473 * C946 - C10328 * C937) *
                   C47471) *
                  C47105 * C47174 * C47156 * C108 +
              ((C10331 - C10330 + C10333 - C10332) * C15949 +
               (C10335 - C10334 + C10337 - C10336) * C15945 +
               (C10508 - C10509 + C10510 - C10511) * C15950 +
               (C10512 - C10513 + C10514 - C10515) * C47471) *
                  C47105 * C47174 * C47156 * C109 +
              ((C10339 - C10338 + C10341 - C10340) * C15949 +
               (C10343 - C10342 + C10345 - C10344) * C15945 +
               (C10524 - C10525 + C10526 - C10527) * C15950 +
               (C10528 - C10529 + C10530 - C10531) * C47471) *
                  C47105 * C47174 * C47156 * C110 +
              ((C10347 - C10346 + C10349 - C10348) * C15949 +
               (C10351 - C10350 + C10353 - C10352) * C15945 +
               (C10848 - C10849 + C10850 - C10851) * C15950 +
               (C10852 - C10853 + C10854 - C10855) * C47471) *
                  C47105 * C47174 * C47156 * C111 +
              ((C10355 - C10354 + C10357 - C10356) * C15949 +
               (C10359 - C10358 + C10361 - C10360) * C15945 +
               (C10325 * C320 - C10327 * C302 + C47473 * C944 - C10328 * C935) *
                   C15950 +
               (C10325 * C332 - C10327 * C321 + C47473 * C950 - C10328 * C945) *
                   C47471) *
                  C47105 * C47174 * C47156 * C112) +
         0.5 * std::pow(Pi, 2.5) *
             ((((C10325 * C122 - C10327 * C115 + C47473 * C491 -
                 C10328 * C481) *
                    C15949 +
                (C10325 * C136 - C10327 * C123 + C47473 * C511 -
                 C10328 * C492) *
                    C15945 +
                (C25705 - C25706 + C25707 - C25708) * C15950 +
                (C25709 - C25710 + C25711 - C25712) * C47471) *
                   C47105 * C47174 * C47492 +
               ((C25706 - C25705 + C25708 - C25707) * C15949 +
                (C25710 - C25709 + C25712 - C25711) * C15945 +
                (C25713 - C25714 + C25715 - C25716) * C15950 +
                (C25717 - C25718 + C25719 - C25720) * C47471) *
                   C47105 * C47174 * C47480 +
               ((C25714 - C25713 + C25716 - C25715) * C15949 +
                (C25718 - C25717 + C25720 - C25719) * C15945 +
                (C10325 * C1158 - C10327 * C1152 + C47473 * C1697 -
                 C10328 * C1694) *
                    C15950 +
                (C10325 * C1170 - C10327 * C1159 + C47473 * C1703 -
                 C10328 * C1698) *
                    C47471) *
                   C47105 * C47174 * C47453) *
                  C291 +
              (((C10331 - C10330 + C10333 - C10332) * C15949 +
                (C10335 - C10334 + C10337 - C10336) * C15945 +
                (C10508 - C10509 + C10510 - C10511) * C15950 +
                (C10512 - C10513 + C10514 - C10515) * C47471) *
                   C47105 * C47174 * C47492 +
               ((C10509 - C10508 + C10511 - C10510) * C15949 +
                (C10513 - C10512 + C10515 - C10514) * C15945 +
                (C10516 - C10517 + C10518 - C10519) * C15950 +
                (C10520 - C10521 + C10522 - C10523) * C47471) *
                   C47105 * C47174 * C47480 +
               ((C10517 - C10516 + C10519 - C10518) * C15949 +
                (C10521 - C10520 + C10523 - C10522) * C15945 +
                (C11708 - C11709 + C11710 - C11711) * C15950 +
                (C11712 - C11713 + C11714 - C11715) * C47471) *
                   C47105 * C47174 * C47453) *
                  C292 +
              (((C10339 - C10338 + C10341 - C10340) * C15949 +
                (C10343 - C10342 + C10345 - C10344) * C15945 +
                (C10524 - C10525 + C10526 - C10527) * C15950 +
                (C10528 - C10529 + C10530 - C10531) * C47471) *
                   C47105 * C47174 * C47492 +
               ((C10525 - C10524 + C10527 - C10526) * C15949 +
                (C10529 - C10528 + C10531 - C10530) * C15945 +
                (C10532 - C10533 + C10534 - C10535) * C15950 +
                (C10536 - C10537 + C10538 - C10539) * C47471) *
                   C47105 * C47174 * C47480 +
               ((C10533 - C10532 + C10535 - C10534) * C15949 +
                (C10537 - C10536 + C10539 - C10538) * C15945 +
                (C10325 * C1162 - C10327 * C1154 + C47473 * C1701 -
                 C10328 * C1696) *
                    C15950 +
                (C10325 * C1172 - C10327 * C1163 + C47473 * C1705 -
                 C10328 * C1702) *
                    C47471) *
                   C47105 * C47174 * C47453) *
                  C47447)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C10325 * C122 - C10327 * C115 + C47473 * C491 - C10328 * C481) *
                C15949 +
            (C10325 * C136 - C10327 * C123 + C47473 * C511 - C10328 * C492) *
                C15945 +
            (C25705 - C25706 + C25707 - C25708) * C15950 +
            (C25709 - C25710 + C25711 - C25712) * C47471) *
               C47105 * C47493 +
           ((C10327 * C481 - C10325 * C491 + C10328 * C484 - C47473 * C497) *
                C15949 +
            (C10327 * C492 - C10325 * C511 + C10328 * C498 - C47473 * C514) *
                C15945 +
            (C10327 * C931 - C10325 * C936 + C10328 * C1286 - C47473 * C1295) *
                C15950 +
            (C10327 * C937 - C10325 * C946 + C10328 * C1296 - C47473 * C1313) *
                C47471) *
               C47105 * C47482 +
           ((C10325 * C497 - C10327 * C484 + C47473 * C2002 - C10328 * C1996) *
                C15949 +
            (C10325 * C514 - C10327 * C498 + C47473 * C2014 - C10328 * C2003) *
                C15945 +
            (C10325 * C1295 - C10327 * C1286 + C47473 * C2393 -
             C10328 * C2390) *
                C15950 +
            (C10325 * C1313 - C10327 * C1296 + C47473 * C2399 -
             C10328 * C2394) *
                C47471) *
               C47105 * C47456) *
              C47156 * C291 +
          (((C10331 - C10330 + C10333 - C10332) * C15949 +
            (C10335 - C10334 + C10337 - C10336) * C15945 +
            (C10508 - C10509 + C10510 - C10511) * C15950 +
            (C10512 - C10513 + C10514 - C10515) * C47471) *
               C47105 * C47493 +
           ((C10687 - C10686 + C10689 - C10688) * C15949 +
            (C10691 - C10690 + C10693 - C10692) * C15945 +
            (C11188 - C11189 + C11190 - C11191) * C15950 +
            (C11192 - C11193 + C11194 - C11195) * C47471) *
               C47105 * C47482 +
           ((C10695 - C10694 + C10697 - C10696) * C15949 +
            (C10699 - C10698 + C10701 - C10700) * C15945 +
            (C12624 - C12625 + C12626 - C12627) * C15950 +
            (C12628 - C12629 + C12630 - C12631) * C47471) *
               C47105 * C47456) *
              C47156 * C292 +
          (((C10339 - C10338 + C10341 - C10340) * C15949 +
            (C10343 - C10342 + C10345 - C10344) * C15945 +
            (C10524 - C10525 + C10526 - C10527) * C15950 +
            (C10528 - C10529 + C10530 - C10531) * C47471) *
               C47105 * C47493 +
           ((C10703 - C10702 + C10705 - C10704) * C15949 +
            (C10707 - C10706 + C10709 - C10708) * C15945 +
            (C11196 - C11197 + C11198 - C11199) * C15950 +
            (C11200 - C11201 + C11202 - C11203) * C47471) *
               C47105 * C47482 +
           ((C10711 - C10710 + C10713 - C10712) * C15949 +
            (C10715 - C10714 + C10717 - C10716) * C15945 +
            (C10325 * C1299 - C10327 * C1288 + C47473 * C2397 -
             C10328 * C2392) *
                C15950 +
            (C10325 * C1315 - C10327 * C1300 + C47473 * C2401 -
             C10328 * C2398) *
                C47471) *
               C47105 * C47456) *
              C47156 * C47447)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C10325 * C122 - C10327 * C115 + C47473 * C491 - C10328 * C481) *
                C15949 +
            (C10325 * C136 - C10327 * C123 + C47473 * C511 - C10328 * C492) *
                C15945 +
            (C25705 - C25706 + C25707 - C25708) * C15950 +
            (C25709 - C25710 + C25711 - C25712) * C47471) *
               C47105 * C47174 * C1078 +
           ((C25706 - C25705 + C25708 - C25707) * C15949 +
            (C25710 - C25709 + C25712 - C25711) * C15945 +
            (C25713 - C25714 + C25715 - C25716) * C15950 +
            (C25717 - C25718 + C25719 - C25720) * C47471) *
               C47105 * C47174 * C1079 +
           ((C25714 - C25713 + C25716 - C25715) * C15949 +
            (C25718 - C25717 + C25720 - C25719) * C15945 +
            (C10325 * C1158 - C10327 * C1152 + C47473 * C1697 -
             C10328 * C1694) *
                C15950 +
            (C10325 * C1170 - C10327 * C1159 + C47473 * C1703 -
             C10328 * C1698) *
                C47471) *
               C47105 * C47174 * C47453) *
              C47489 +
          (((C10331 - C10330 + C10333 - C10332) * C15949 +
            (C10335 - C10334 + C10337 - C10336) * C15945 +
            (C10508 - C10509 + C10510 - C10511) * C15950 +
            (C10512 - C10513 + C10514 - C10515) * C47471) *
               C47105 * C47174 * C1078 +
           ((C10509 - C10508 + C10511 - C10510) * C15949 +
            (C10513 - C10512 + C10515 - C10514) * C15945 +
            (C10516 - C10517 + C10518 - C10519) * C15950 +
            (C10520 - C10521 + C10522 - C10523) * C47471) *
               C47105 * C47174 * C1079 +
           ((C10517 - C10516 + C10519 - C10518) * C15949 +
            (C10521 - C10520 + C10523 - C10522) * C15945 +
            (C11708 - C11709 + C11710 - C11711) * C15950 +
            (C11712 - C11713 + C11714 - C11715) * C47471) *
               C47105 * C47174 * C47453) *
              C47476 +
          (((C10339 - C10338 + C10341 - C10340) * C15949 +
            (C10343 - C10342 + C10345 - C10344) * C15945 +
            (C10524 - C10525 + C10526 - C10527) * C15950 +
            (C10528 - C10529 + C10530 - C10531) * C47471) *
               C47105 * C47174 * C1078 +
           ((C10525 - C10524 + C10527 - C10526) * C15949 +
            (C10529 - C10528 + C10531 - C10530) * C15945 +
            (C10532 - C10533 + C10534 - C10535) * C15950 +
            (C10536 - C10537 + C10538 - C10539) * C47471) *
               C47105 * C47174 * C1079 +
           ((C10533 - C10532 + C10535 - C10534) * C15949 +
            (C10537 - C10536 + C10539 - C10538) * C15945 +
            (C10325 * C1162 - C10327 * C1154 + C47473 * C1701 -
             C10328 * C1696) *
                C15950 +
            (C10325 * C1172 - C10327 * C1163 + C47473 * C1705 -
             C10328 * C1702) *
                C47471) *
               C47105 * C47174 * C47453) *
              C47447)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C10325 * C122 - C10327 * C115 + C47473 * C491 - C10328 * C481) *
               C15949 +
           (C10325 * C136 - C10327 * C123 + C47473 * C511 - C10328 * C492) *
               C15945 +
           (C25705 - C25706 + C25707 - C25708) * C15950 +
           (C25709 - C25710 + C25711 - C25712) * C47471) *
              C47105 * C47174 * C1146 +
          ((C25706 - C25705 + C25708 - C25707) * C15949 +
           (C25710 - C25709 + C25712 - C25711) * C15945 +
           (C25713 - C25714 + C25715 - C25716) * C15950 +
           (C25717 - C25718 + C25719 - C25720) * C47471) *
              C47105 * C47174 * C1147 +
          ((C25714 - C25713 + C25716 - C25715) * C15949 +
           (C25718 - C25717 + C25720 - C25719) * C15945 +
           (C26557 - C26558 + C26559 - C26560) * C15950 +
           (C26561 - C26562 + C26563 - C26564) * C47471) *
              C47105 * C47174 * C1148 +
          ((C26558 - C26557 + C26560 - C26559) * C15949 +
           (C26562 - C26561 + C26564 - C26563) * C15945 +
           (C26565 - C26566 + C26567 - C26568) * C15950 +
           (C26569 - C26570 + C26571 - C26572) * C47471) *
              C47105 * C47174 * C1149 +
          ((C26566 - C26565 + C26568 - C26567) * C15949 +
           (C26570 - C26569 + C26572 - C26571) * C15945 +
           (C10325 * C5757 - C10327 * C5755 + C47473 * C22599 -
            C10328 * C22598) *
               C15950 +
           (C10325 * C5761 - C10327 * C5758 + C47473 * C22601 -
            C10328 * C22600) *
               C47471) *
              C47105 * C47174 * C1150) *
         C47128) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C10325 * C122 - C10327 * C115 + C47473 * C491 - C10328 * C481) *
                C15949 +
            (C10325 * C136 - C10327 * C123 + C47473 * C511 - C10328 * C492) *
                C15945 +
            (C25705 - C25706 + C25707 - C25708) * C15950 +
            (C25709 - C25710 + C25711 - C25712) * C47471) *
               C47105 * C47493 +
           ((C10327 * C481 - C10325 * C491 + C10328 * C484 - C47473 * C497) *
                C15949 +
            (C10327 * C492 - C10325 * C511 + C10328 * C498 - C47473 * C514) *
                C15945 +
            (C26321 - C26322 + C26323 - C26324) * C15950 +
            (C26325 - C26326 + C26327 - C26328) * C47471) *
               C47105 * C47482 +
           ((C10325 * C497 - C10327 * C484 + C47473 * C2002 - C10328 * C1996) *
                C15949 +
            (C10325 * C514 - C10327 * C498 + C47473 * C2014 - C10328 * C2003) *
                C15945 +
            (C26719 - C26720 + C26721 - C26722) * C15950 +
            (C26723 - C26724 + C26725 - C26726) * C47471) *
               C47105 * C47456) *
              C1078 +
          (((C25706 - C25705 + C25708 - C25707) * C15949 +
            (C25710 - C25709 + C25712 - C25711) * C15945 +
            (C25713 - C25714 + C25715 - C25716) * C15950 +
            (C25717 - C25718 + C25719 - C25720) * C47471) *
               C47105 * C47493 +
           ((C26322 - C26321 + C26324 - C26323) * C15949 +
            (C26326 - C26325 + C26328 - C26327) * C15945 +
            (C26727 - C26728 + C26729 - C26730) * C15950 +
            (C26731 - C26732 + C26733 - C26734) * C47471) *
               C47105 * C47482 +
           ((C26720 - C26719 + C26722 - C26721) * C15949 +
            (C26724 - C26723 + C26726 - C26725) * C15945 +
            (C26735 - C26736 + C26737 - C26738) * C15950 +
            (C26739 - C26740 + C26741 - C26742) * C47471) *
               C47105 * C47456) *
              C1079 +
          (((C25714 - C25713 + C25716 - C25715) * C15949 +
            (C25718 - C25717 + C25720 - C25719) * C15945 +
            (C26557 - C26558 + C26559 - C26560) * C15950 +
            (C26561 - C26562 + C26563 - C26564) * C47471) *
               C47105 * C47493 +
           ((C26728 - C26727 + C26730 - C26729) * C15949 +
            (C26732 - C26731 + C26734 - C26733) * C15945 +
            (C10327 * C1694 - C10325 * C1697 + C10328 * C5921 -
             C47473 * C5923) *
                C15950 +
            (C10327 * C1698 - C10325 * C1703 + C10328 * C5924 -
             C47473 * C5927) *
                C47471) *
               C47105 * C47482 +
           ((C26736 - C26735 + C26738 - C26737) * C15949 +
            (C26740 - C26739 + C26742 - C26741) * C15945 +
            (C10325 * C5923 - C10327 * C5921 + C47473 * C23237 -
             C10328 * C23236) *
                C15950 +
            (C10325 * C5927 - C10327 * C5924 + C47473 * C23239 -
             C10328 * C23238) *
                C47471) *
               C47105 * C47456) *
              C47453) *
         C47128) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C10325 * C122 - C10327 * C115 + C47473 * C491 - C10328 * C481) *
                C15949 +
            (C10325 * C136 - C10327 * C123 + C47473 * C511 - C10328 * C492) *
                C15945 +
            (C25705 - C25706 + C25707 - C25708) * C15950 +
            (C25709 - C25710 + C25711 - C25712) * C47471) *
               C47105 * C1816 +
           ((C10327 * C481 - C10325 * C491 + C10328 * C484 - C47473 * C497) *
                C15949 +
            (C10327 * C492 - C10325 * C511 + C10328 * C498 - C47473 * C514) *
                C15945 +
            (C26321 - C26322 + C26323 - C26324) * C15950 +
            (C26325 - C26326 + C26327 - C26328) * C47471) *
               C47105 * C1817 +
           ((C10325 * C497 - C10327 * C484 + C47473 * C2002 - C10328 * C1996) *
                C15949 +
            (C10325 * C514 - C10327 * C498 + C47473 * C2014 - C10328 * C2003) *
                C15945 +
            (C26719 - C26720 + C26721 - C26722) * C15950 +
            (C26723 - C26724 + C26725 - C26726) * C47471) *
               C47105 * C47456) *
              C47156 * C47489 +
          (((C10331 - C10330 + C10333 - C10332) * C15949 +
            (C10335 - C10334 + C10337 - C10336) * C15945 +
            (C10508 - C10509 + C10510 - C10511) * C15950 +
            (C10512 - C10513 + C10514 - C10515) * C47471) *
               C47105 * C1816 +
           ((C10687 - C10686 + C10689 - C10688) * C15949 +
            (C10691 - C10690 + C10693 - C10692) * C15945 +
            (C11188 - C11189 + C11190 - C11191) * C15950 +
            (C11192 - C11193 + C11194 - C11195) * C47471) *
               C47105 * C1817 +
           ((C10695 - C10694 + C10697 - C10696) * C15949 +
            (C10699 - C10698 + C10701 - C10700) * C15945 +
            (C12624 - C12625 + C12626 - C12627) * C15950 +
            (C12628 - C12629 + C12630 - C12631) * C47471) *
               C47105 * C47456) *
              C47156 * C47476 +
          (((C10339 - C10338 + C10341 - C10340) * C15949 +
            (C10343 - C10342 + C10345 - C10344) * C15945 +
            (C10524 - C10525 + C10526 - C10527) * C15950 +
            (C10528 - C10529 + C10530 - C10531) * C47471) *
               C47105 * C1816 +
           ((C10703 - C10702 + C10705 - C10704) * C15949 +
            (C10707 - C10706 + C10709 - C10708) * C15945 +
            (C11196 - C11197 + C11198 - C11199) * C15950 +
            (C11200 - C11201 + C11202 - C11203) * C47471) *
               C47105 * C1817 +
           ((C10711 - C10710 + C10713 - C10712) * C15949 +
            (C10715 - C10714 + C10717 - C10716) * C15945 +
            (C10325 * C1299 - C10327 * C1288 + C47473 * C2397 -
             C10328 * C2392) *
                C15950 +
            (C10325 * C1315 - C10327 * C1300 + C47473 * C2401 -
             C10328 * C2398) *
                C47471) *
               C47105 * C47456) *
              C47156 * C47447)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C10325 * C122 - C10327 * C115 + C47473 * C491 - C10328 * C481) *
                C15949 +
            (C10325 * C136 - C10327 * C123 + C47473 * C511 - C10328 * C492) *
                C15945 +
            (C25705 - C25706 + C25707 - C25708) * C15950 +
            (C25709 - C25710 + C25711 - C25712) * C47471) *
               C47105 * C1816 +
           ((C10327 * C481 - C10325 * C491 + C10328 * C484 - C47473 * C497) *
                C15949 +
            (C10327 * C492 - C10325 * C511 + C10328 * C498 - C47473 * C514) *
                C15945 +
            (C26321 - C26322 + C26323 - C26324) * C15950 +
            (C26325 - C26326 + C26327 - C26328) * C47471) *
               C47105 * C1817 +
           ((C10325 * C497 - C10327 * C484 + C47473 * C2002 - C10328 * C1996) *
                C15949 +
            (C10325 * C514 - C10327 * C498 + C47473 * C2014 - C10328 * C2003) *
                C15945 +
            (C26719 - C26720 + C26721 - C26722) * C15950 +
            (C26723 - C26724 + C26725 - C26726) * C47471) *
               C47105 * C47456) *
              C47492 +
          (((C25706 - C25705 + C25708 - C25707) * C15949 +
            (C25710 - C25709 + C25712 - C25711) * C15945 +
            (C25713 - C25714 + C25715 - C25716) * C15950 +
            (C25717 - C25718 + C25719 - C25720) * C47471) *
               C47105 * C1816 +
           ((C26322 - C26321 + C26324 - C26323) * C15949 +
            (C26326 - C26325 + C26328 - C26327) * C15945 +
            (C26727 - C26728 + C26729 - C26730) * C15950 +
            (C26731 - C26732 + C26733 - C26734) * C47471) *
               C47105 * C1817 +
           ((C26720 - C26719 + C26722 - C26721) * C15949 +
            (C26724 - C26723 + C26726 - C26725) * C15945 +
            (C26735 - C26736 + C26737 - C26738) * C15950 +
            (C26739 - C26740 + C26741 - C26742) * C47471) *
               C47105 * C47456) *
              C47480 +
          (((C25714 - C25713 + C25716 - C25715) * C15949 +
            (C25718 - C25717 + C25720 - C25719) * C15945 +
            (C26557 - C26558 + C26559 - C26560) * C15950 +
            (C26561 - C26562 + C26563 - C26564) * C47471) *
               C47105 * C1816 +
           ((C26728 - C26727 + C26730 - C26729) * C15949 +
            (C26732 - C26731 + C26734 - C26733) * C15945 +
            (C27197 - C27198 + C27199 - C27200) * C15950 +
            (C27201 - C27202 + C27203 - C27204) * C47471) *
               C47105 * C1817 +
           ((C26736 - C26735 + C26738 - C26737) * C15949 +
            (C26740 - C26739 + C26742 - C26741) * C15945 +
            (C10325 * C5923 - C10327 * C5921 + C47473 * C23237 -
             C10328 * C23236) *
                C15950 +
            (C10325 * C5927 - C10327 * C5924 + C47473 * C23239 -
             C10328 * C23238) *
                C47471) *
               C47105 * C47456) *
              C47453) *
         C47128) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C10325 * C122 - C10327 * C115 + C47473 * C491 - C10328 * C481) *
               C15949 +
           (C10325 * C136 - C10327 * C123 + C47473 * C511 - C10328 * C492) *
               C15945 +
           (C25705 - C25706 + C25707 - C25708) * C15950 +
           (C25709 - C25710 + C25711 - C25712) * C47471) *
              C47105 * C1991 +
          ((C10327 * C481 - C10325 * C491 + C10328 * C484 - C47473 * C497) *
               C15949 +
           (C10327 * C492 - C10325 * C511 + C10328 * C498 - C47473 * C514) *
               C15945 +
           (C26321 - C26322 + C26323 - C26324) * C15950 +
           (C26325 - C26326 + C26327 - C26328) * C47471) *
              C47105 * C1992 +
          ((C10325 * C497 - C10327 * C484 + C47473 * C2002 - C10328 * C1996) *
               C15949 +
           (C10325 * C514 - C10327 * C498 + C47473 * C2014 - C10328 * C2003) *
               C15945 +
           (C26719 - C26720 + C26721 - C26722) * C15950 +
           (C26723 - C26724 + C26725 - C26726) * C47471) *
              C47105 * C1993 +
          ((C10327 * C1996 - C10325 * C2002 + C10328 * C1999 - C47473 * C2008) *
               C15949 +
           (C10327 * C2003 - C10325 * C2014 + C10328 * C2009 - C47473 * C2017) *
               C15945 +
           (C10327 * C2390 - C10325 * C2393 + C10328 * C6797 - C47473 * C6799) *
               C15950 +
           (C10327 * C2394 - C10325 * C2399 + C10328 * C6800 - C47473 * C6803) *
               C47471) *
              C47105 * C1994 +
          ((C10325 * C2008 - C10327 * C1999 + C47473 * C12423 -
            C10328 * C12421) *
               C15949 +
           (C10325 * C2017 - C10327 * C2009 + C47473 * C12427 -
            C10328 * C12424) *
               C15945 +
           (C10325 * C6799 - C10327 * C6797 + C47473 * C27579 -
            C10328 * C27578) *
               C15950 +
           (C10325 * C6803 - C10327 * C6800 + C47473 * C27581 -
            C10328 * C27580) *
               C47471) *
              C47105 * C1995) *
         C47156 * C47128) /
            (p * q * std::sqrt(p + q));
    d2ee[138] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C10325 * C122 - C10327 * C115 + C47473 * C491 - C10328 * C481) *
                 C15949 +
             (C10325 * C136 - C10327 * C123 + C47473 * C511 - C10328 * C492) *
                 C15945 +
             (C25705 - C25706 + C25707 - C25708) * C15950 +
             (C25709 - C25710 + C25711 - C25712) * C47471) *
                C47105 * C47422 +
            ((C10327 * C481 - C10325 * C491 + C10328 * C484 - C47473 * C497) *
                 C15949 +
             (C10327 * C492 - C10325 * C511 + C10328 * C498 - C47473 * C514) *
                 C15945 +
             (C26321 - C26322 + C26323 - C26324) * C15950 +
             (C26325 - C26326 + C26327 - C26328) * C47471) *
                C47105 * C47261) *
               C1078 +
           (((C25706 - C25705 + C25708 - C25707) * C15949 +
             (C25710 - C25709 + C25712 - C25711) * C15945 +
             (C25713 - C25714 + C25715 - C25716) * C15950 +
             (C25717 - C25718 + C25719 - C25720) * C47471) *
                C47105 * C47422 +
            ((C26322 - C26321 + C26324 - C26323) * C15949 +
             (C26326 - C26325 + C26328 - C26327) * C15945 +
             (C26727 - C26728 + C26729 - C26730) * C15950 +
             (C26731 - C26732 + C26733 - C26734) * C47471) *
                C47105 * C47261) *
               C1079 +
           (((C25714 - C25713 + C25716 - C25715) * C15949 +
             (C25718 - C25717 + C25720 - C25719) * C15945 +
             (C26557 - C26558 + C26559 - C26560) * C15950 +
             (C26561 - C26562 + C26563 - C26564) * C47471) *
                C47105 * C47422 +
            ((C26728 - C26727 + C26730 - C26729) * C15949 +
             (C26732 - C26731 + C26734 - C26733) * C15945 +
             (C10327 * C1694 - C10325 * C1697 + C10328 * C5921 -
              C47473 * C5923) *
                 C15950 +
             (C10327 * C1698 - C10325 * C1703 + C10328 * C5924 -
              C47473 * C5927) *
                 C47471) *
                C47105 * C47261) *
               C47453) *
              C47407 +
          ((((C10331 - C10330 + C10333 - C10332) * C15949 +
             (C10335 - C10334 + C10337 - C10336) * C15945 +
             (C10508 - C10509 + C10510 - C10511) * C15950 +
             (C10512 - C10513 + C10514 - C10515) * C47471) *
                C47105 * C47422 +
            ((C10687 - C10686 + C10689 - C10688) * C15949 +
             (C10691 - C10690 + C10693 - C10692) * C15945 +
             (C11188 - C11189 + C11190 - C11191) * C15950 +
             (C11192 - C11193 + C11194 - C11195) * C47471) *
                C47105 * C47261) *
               C1078 +
           (((C10509 - C10508 + C10511 - C10510) * C15949 +
             (C10513 - C10512 + C10515 - C10514) * C15945 +
             (C10516 - C10517 + C10518 - C10519) * C15950 +
             (C10520 - C10521 + C10522 - C10523) * C47471) *
                C47105 * C47422 +
            ((C11189 - C11188 + C11191 - C11190) * C15949 +
             (C11193 - C11192 + C11195 - C11194) * C15945 +
             (C11910 - C11911 + C11912 - C11913) * C15950 +
             (C11914 - C11915 + C11916 - C11917) * C47471) *
                C47105 * C47261) *
               C1079 +
           (((C10517 - C10516 + C10519 - C10518) * C15949 +
             (C10521 - C10520 + C10523 - C10522) * C15945 +
             (C11708 - C11709 + C11710 - C11711) * C15950 +
             (C11712 - C11713 + C11714 - C11715) * C47471) *
                C47105 * C47422 +
            ((C11911 - C11910 + C11913 - C11912) * C15949 +
             (C11915 - C11914 + C11917 - C11916) * C15945 +
             (C10325 * C1699 - C10327 * C1695 + C47473 * C5925 -
              C10328 * C5922) *
                 C15950 +
             (C10325 * C1704 - C10327 * C1700 + C47473 * C5928 -
              C10328 * C5926) *
                 C47471) *
                C47105 * C47261) *
               C47453) *
              C47139)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C10325 * C122 - C10327 * C115 + C47473 * C491 - C10328 * C481) *
                C15949 +
            (C10325 * C136 - C10327 * C123 + C47473 * C511 - C10328 * C492) *
                C15945 +
            (C25705 - C25706 + C25707 - C25708) * C15950 +
            (C25709 - C25710 + C25711 - C25712) * C47471) *
               C47105 * C47422 +
           ((C10327 * C481 - C10325 * C491 + C10328 * C484 - C47473 * C497) *
                C15949 +
            (C10327 * C492 - C10325 * C511 + C10328 * C498 - C47473 * C514) *
                C15945 +
            (C10327 * C931 - C10325 * C936 + C10328 * C1286 - C47473 * C1295) *
                C15950 +
            (C10327 * C937 - C10325 * C946 + C10328 * C1296 - C47473 * C1313) *
                C47471) *
               C47105 * C47261) *
              C47156 * C655 +
          (((C10331 - C10330 + C10333 - C10332) * C15949 +
            (C10335 - C10334 + C10337 - C10336) * C15945 +
            (C10508 - C10509 + C10510 - C10511) * C15950 +
            (C10512 - C10513 + C10514 - C10515) * C47471) *
               C47105 * C47422 +
           ((C10687 - C10686 + C10689 - C10688) * C15949 +
            (C10691 - C10690 + C10693 - C10692) * C15945 +
            (C11188 - C11189 + C11190 - C11191) * C15950 +
            (C11192 - C11193 + C11194 - C11195) * C47471) *
               C47105 * C47261) *
              C47156 * C656 +
          (((C10339 - C10338 + C10341 - C10340) * C15949 +
            (C10343 - C10342 + C10345 - C10344) * C15945 +
            (C10524 - C10525 + C10526 - C10527) * C15950 +
            (C10528 - C10529 + C10530 - C10531) * C47471) *
               C47105 * C47422 +
           ((C10703 - C10702 + C10705 - C10704) * C15949 +
            (C10707 - C10706 + C10709 - C10708) * C15945 +
            (C11196 - C11197 + C11198 - C11199) * C15950 +
            (C11200 - C11201 + C11202 - C11203) * C47471) *
               C47105 * C47261) *
              C47156 * C657 +
          (((C10347 - C10346 + C10349 - C10348) * C15949 +
            (C10351 - C10350 + C10353 - C10352) * C15945 +
            (C10848 - C10849 + C10850 - C10851) * C15950 +
            (C10852 - C10853 + C10854 - C10855) * C47471) *
               C47105 * C47422 +
           ((C10987 - C10986 + C10989 - C10988) * C15949 +
            (C10991 - C10990 + C10993 - C10992) * C15945 +
            (C10325 * C942 - C10327 * C934 + C47473 * C2167 - C10328 * C2166) *
                C15950 +
            (C10325 * C949 - C10327 * C943 + C47473 * C2169 - C10328 * C2168) *
                C47471) *
               C47105 * C47261) *
              C47156 * C47457)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C10325 * C122 - C10327 * C115 + C47473 * C491 - C10328 * C481) *
                C15949 +
            (C10325 * C136 - C10327 * C123 + C47473 * C511 - C10328 * C492) *
                C15945 +
            (C25705 - C25706 + C25707 - C25708) * C15950 +
            (C25709 - C25710 + C25711 - C25712) * C47471) *
               C47105 * C2276 +
           ((C10327 * C481 - C10325 * C491 + C10328 * C484 - C47473 * C497) *
                C15949 +
            (C10327 * C492 - C10325 * C511 + C10328 * C498 - C47473 * C514) *
                C15945 +
            (C26321 - C26322 + C26323 - C26324) * C15950 +
            (C26325 - C26326 + C26327 - C26328) * C47471) *
               C47105 * C2277 +
           ((C10325 * C497 - C10327 * C484 + C47473 * C2002 - C10328 * C1996) *
                C15949 +
            (C10325 * C514 - C10327 * C498 + C47473 * C2014 - C10328 * C2003) *
                C15945 +
            (C26719 - C26720 + C26721 - C26722) * C15950 +
            (C26723 - C26724 + C26725 - C26726) * C47471) *
               C47105 * C2278 +
           ((C10327 * C1996 - C10325 * C2002 + C10328 * C1999 -
             C47473 * C2008) *
                C15949 +
            (C10327 * C2003 - C10325 * C2014 + C10328 * C2009 -
             C47473 * C2017) *
                C15945 +
            (C10327 * C2390 - C10325 * C2393 + C10328 * C6797 -
             C47473 * C6799) *
                C15950 +
            (C10327 * C2394 - C10325 * C2399 + C10328 * C6800 -
             C47473 * C6803) *
                C47471) *
               C47105 * C47469) *
              C47156 * C47407 +
          (((C10331 - C10330 + C10333 - C10332) * C15949 +
            (C10335 - C10334 + C10337 - C10336) * C15945 +
            (C10508 - C10509 + C10510 - C10511) * C15950 +
            (C10512 - C10513 + C10514 - C10515) * C47471) *
               C47105 * C2276 +
           ((C10687 - C10686 + C10689 - C10688) * C15949 +
            (C10691 - C10690 + C10693 - C10692) * C15945 +
            (C11188 - C11189 + C11190 - C11191) * C15950 +
            (C11192 - C11193 + C11194 - C11195) * C47471) *
               C47105 * C2277 +
           ((C10695 - C10694 + C10697 - C10696) * C15949 +
            (C10699 - C10698 + C10701 - C10700) * C15945 +
            (C12624 - C12625 + C12626 - C12627) * C15950 +
            (C12628 - C12629 + C12630 - C12631) * C47471) *
               C47105 * C2278 +
           ((C12763 - C12762 + C12765 - C12764) * C15949 +
            (C12767 - C12766 + C12769 - C12768) * C15945 +
            (C10325 * C2395 - C10327 * C2391 + C47473 * C6801 -
             C10328 * C6798) *
                C15950 +
            (C10325 * C2400 - C10327 * C2396 + C47473 * C6804 -
             C10328 * C6802) *
                C47471) *
               C47105 * C47469) *
              C47156 * C47139)) /
            (p * q * std::sqrt(p + q));
    d2ee[139] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C10325 * C122 - C10327 * C115 + C47473 * C491 - C10328 * C481) *
                C15949 +
            (C10325 * C136 - C10327 * C123 + C47473 * C511 - C10328 * C492) *
                C15945 +
            (C25705 - C25706 + C25707 - C25708) * C15950 +
            (C25709 - C25710 + C25711 - C25712) * C47471) *
               C47105 * C47174 * C47492 +
           ((C25706 - C25705 + C25708 - C25707) * C15949 +
            (C25710 - C25709 + C25712 - C25711) * C15945 +
            (C25713 - C25714 + C25715 - C25716) * C15950 +
            (C25717 - C25718 + C25719 - C25720) * C47471) *
               C47105 * C47174 * C47480 +
           ((C25714 - C25713 + C25716 - C25715) * C15949 +
            (C25718 - C25717 + C25720 - C25719) * C15945 +
            (C10325 * C1158 - C10327 * C1152 + C47473 * C1697 -
             C10328 * C1694) *
                C15950 +
            (C10325 * C1170 - C10327 * C1159 + C47473 * C1703 -
             C10328 * C1698) *
                C47471) *
               C47105 * C47174 * C47453) *
              C291 +
          (((C10331 - C10330 + C10333 - C10332) * C15949 +
            (C10335 - C10334 + C10337 - C10336) * C15945 +
            (C10508 - C10509 + C10510 - C10511) * C15950 +
            (C10512 - C10513 + C10514 - C10515) * C47471) *
               C47105 * C47174 * C47492 +
           ((C10509 - C10508 + C10511 - C10510) * C15949 +
            (C10513 - C10512 + C10515 - C10514) * C15945 +
            (C10516 - C10517 + C10518 - C10519) * C15950 +
            (C10520 - C10521 + C10522 - C10523) * C47471) *
               C47105 * C47174 * C47480 +
           ((C10517 - C10516 + C10519 - C10518) * C15949 +
            (C10521 - C10520 + C10523 - C10522) * C15945 +
            (C11708 - C11709 + C11710 - C11711) * C15950 +
            (C11712 - C11713 + C11714 - C11715) * C47471) *
               C47105 * C47174 * C47453) *
              C292 +
          (((C10339 - C10338 + C10341 - C10340) * C15949 +
            (C10343 - C10342 + C10345 - C10344) * C15945 +
            (C10524 - C10525 + C10526 - C10527) * C15950 +
            (C10528 - C10529 + C10530 - C10531) * C47471) *
               C47105 * C47174 * C47492 +
           ((C10525 - C10524 + C10527 - C10526) * C15949 +
            (C10529 - C10528 + C10531 - C10530) * C15945 +
            (C10532 - C10533 + C10534 - C10535) * C15950 +
            (C10536 - C10537 + C10538 - C10539) * C47471) *
               C47105 * C47174 * C47480 +
           ((C10533 - C10532 + C10535 - C10534) * C15949 +
            (C10537 - C10536 + C10539 - C10538) * C15945 +
            (C10325 * C1162 - C10327 * C1154 + C47473 * C1701 -
             C10328 * C1696) *
                C15950 +
            (C10325 * C1172 - C10327 * C1163 + C47473 * C1705 -
             C10328 * C1702) *
                C47471) *
               C47105 * C47174 * C47453) *
              C47447)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C10325 * C122 - C10327 * C115 + C47473 * C491 - C10328 * C481) *
               C15949 +
           (C10325 * C136 - C10327 * C123 + C47473 * C511 - C10328 * C492) *
               C15945 +
           (C10325 * C304 - C10327 * C294 + C47473 * C936 - C10328 * C931) *
               C15950 +
           (C10325 * C324 - C10327 * C305 + C47473 * C946 - C10328 * C937) *
               C47471) *
              C47105 * C47174 * C47156 * C108 +
          ((C10331 - C10330 + C10333 - C10332) * C15949 +
           (C10335 - C10334 + C10337 - C10336) * C15945 +
           (C10508 - C10509 + C10510 - C10511) * C15950 +
           (C10512 - C10513 + C10514 - C10515) * C47471) *
              C47105 * C47174 * C47156 * C109 +
          ((C10339 - C10338 + C10341 - C10340) * C15949 +
           (C10343 - C10342 + C10345 - C10344) * C15945 +
           (C10524 - C10525 + C10526 - C10527) * C15950 +
           (C10528 - C10529 + C10530 - C10531) * C47471) *
              C47105 * C47174 * C47156 * C110 +
          ((C10347 - C10346 + C10349 - C10348) * C15949 +
           (C10351 - C10350 + C10353 - C10352) * C15945 +
           (C10848 - C10849 + C10850 - C10851) * C15950 +
           (C10852 - C10853 + C10854 - C10855) * C47471) *
              C47105 * C47174 * C47156 * C111 +
          ((C10355 - C10354 + C10357 - C10356) * C15949 +
           (C10359 - C10358 + C10361 - C10360) * C15945 +
           (C10325 * C320 - C10327 * C302 + C47473 * C944 - C10328 * C935) *
               C15950 +
           (C10325 * C332 - C10327 * C321 + C47473 * C950 - C10328 * C945) *
               C47471) *
              C47105 * C47174 * C47156 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C10325 * C122 - C10327 * C115 + C47473 * C491 - C10328 * C481) *
                C15949 +
            (C10325 * C136 - C10327 * C123 + C47473 * C511 - C10328 * C492) *
                C15945 +
            (C25705 - C25706 + C25707 - C25708) * C15950 +
            (C25709 - C25710 + C25711 - C25712) * C47471) *
               C47105 * C47174 * C1078 +
           ((C25706 - C25705 + C25708 - C25707) * C15949 +
            (C25710 - C25709 + C25712 - C25711) * C15945 +
            (C25713 - C25714 + C25715 - C25716) * C15950 +
            (C25717 - C25718 + C25719 - C25720) * C47471) *
               C47105 * C47174 * C1079 +
           ((C25714 - C25713 + C25716 - C25715) * C15949 +
            (C25718 - C25717 + C25720 - C25719) * C15945 +
            (C10325 * C1158 - C10327 * C1152 + C47473 * C1697 -
             C10328 * C1694) *
                C15950 +
            (C10325 * C1170 - C10327 * C1159 + C47473 * C1703 -
             C10328 * C1698) *
                C47471) *
               C47105 * C47174 * C47453) *
              C47489 +
          (((C10331 - C10330 + C10333 - C10332) * C15949 +
            (C10335 - C10334 + C10337 - C10336) * C15945 +
            (C10508 - C10509 + C10510 - C10511) * C15950 +
            (C10512 - C10513 + C10514 - C10515) * C47471) *
               C47105 * C47174 * C1078 +
           ((C10509 - C10508 + C10511 - C10510) * C15949 +
            (C10513 - C10512 + C10515 - C10514) * C15945 +
            (C10516 - C10517 + C10518 - C10519) * C15950 +
            (C10520 - C10521 + C10522 - C10523) * C47471) *
               C47105 * C47174 * C1079 +
           ((C10517 - C10516 + C10519 - C10518) * C15949 +
            (C10521 - C10520 + C10523 - C10522) * C15945 +
            (C11708 - C11709 + C11710 - C11711) * C15950 +
            (C11712 - C11713 + C11714 - C11715) * C47471) *
               C47105 * C47174 * C47453) *
              C47476 +
          (((C10339 - C10338 + C10341 - C10340) * C15949 +
            (C10343 - C10342 + C10345 - C10344) * C15945 +
            (C10524 - C10525 + C10526 - C10527) * C15950 +
            (C10528 - C10529 + C10530 - C10531) * C47471) *
               C47105 * C47174 * C1078 +
           ((C10525 - C10524 + C10527 - C10526) * C15949 +
            (C10529 - C10528 + C10531 - C10530) * C15945 +
            (C10532 - C10533 + C10534 - C10535) * C15950 +
            (C10536 - C10537 + C10538 - C10539) * C47471) *
               C47105 * C47174 * C1079 +
           ((C10533 - C10532 + C10535 - C10534) * C15949 +
            (C10537 - C10536 + C10539 - C10538) * C15945 +
            (C10325 * C1162 - C10327 * C1154 + C47473 * C1701 -
             C10328 * C1696) *
                C15950 +
            (C10325 * C1172 - C10327 * C1163 + C47473 * C1705 -
             C10328 * C1702) *
                C47471) *
               C47105 * C47174 * C47453) *
              C47447)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C10325 * C122 - C10327 * C115 + C47473 * C491 - C10328 * C481) *
               C15949 +
           (C10325 * C136 - C10327 * C123 + C47473 * C511 - C10328 * C492) *
               C15945 +
           (C25705 - C25706 + C25707 - C25708) * C15950 +
           (C25709 - C25710 + C25711 - C25712) * C47471) *
              C47105 * C47174 * C1146 +
          ((C25706 - C25705 + C25708 - C25707) * C15949 +
           (C25710 - C25709 + C25712 - C25711) * C15945 +
           (C25713 - C25714 + C25715 - C25716) * C15950 +
           (C25717 - C25718 + C25719 - C25720) * C47471) *
              C47105 * C47174 * C1147 +
          ((C25714 - C25713 + C25716 - C25715) * C15949 +
           (C25718 - C25717 + C25720 - C25719) * C15945 +
           (C26557 - C26558 + C26559 - C26560) * C15950 +
           (C26561 - C26562 + C26563 - C26564) * C47471) *
              C47105 * C47174 * C1148 +
          ((C26558 - C26557 + C26560 - C26559) * C15949 +
           (C26562 - C26561 + C26564 - C26563) * C15945 +
           (C26565 - C26566 + C26567 - C26568) * C15950 +
           (C26569 - C26570 + C26571 - C26572) * C47471) *
              C47105 * C47174 * C1149 +
          ((C26566 - C26565 + C26568 - C26567) * C15949 +
           (C26570 - C26569 + C26572 - C26571) * C15945 +
           (C10325 * C5757 - C10327 * C5755 + C47473 * C22599 -
            C10328 * C22598) *
               C15950 +
           (C10325 * C5761 - C10327 * C5758 + C47473 * C22601 -
            C10328 * C22600) *
               C47471) *
              C47105 * C47174 * C1150) *
         C47128) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C10325 * C122 - C10327 * C115 + C47473 * C491 - C10328 * C481) *
                C15949 +
            (C10325 * C136 - C10327 * C123 + C47473 * C511 - C10328 * C492) *
                C15945 +
            (C25705 - C25706 + C25707 - C25708) * C15950 +
            (C25709 - C25710 + C25711 - C25712) * C47471) *
               C47105 * C1816 +
           ((C10327 * C481 - C10325 * C491 + C10328 * C484 - C47473 * C497) *
                C15949 +
            (C10327 * C492 - C10325 * C511 + C10328 * C498 - C47473 * C514) *
                C15945 +
            (C26321 - C26322 + C26323 - C26324) * C15950 +
            (C26325 - C26326 + C26327 - C26328) * C47471) *
               C47105 * C1817 +
           ((C10325 * C497 - C10327 * C484 + C47473 * C2002 - C10328 * C1996) *
                C15949 +
            (C10325 * C514 - C10327 * C498 + C47473 * C2014 - C10328 * C2003) *
                C15945 +
            (C26719 - C26720 + C26721 - C26722) * C15950 +
            (C26723 - C26724 + C26725 - C26726) * C47471) *
               C47105 * C47456) *
              C47156 * C47489 +
          (((C10331 - C10330 + C10333 - C10332) * C15949 +
            (C10335 - C10334 + C10337 - C10336) * C15945 +
            (C10508 - C10509 + C10510 - C10511) * C15950 +
            (C10512 - C10513 + C10514 - C10515) * C47471) *
               C47105 * C1816 +
           ((C10687 - C10686 + C10689 - C10688) * C15949 +
            (C10691 - C10690 + C10693 - C10692) * C15945 +
            (C11188 - C11189 + C11190 - C11191) * C15950 +
            (C11192 - C11193 + C11194 - C11195) * C47471) *
               C47105 * C1817 +
           ((C10695 - C10694 + C10697 - C10696) * C15949 +
            (C10699 - C10698 + C10701 - C10700) * C15945 +
            (C12624 - C12625 + C12626 - C12627) * C15950 +
            (C12628 - C12629 + C12630 - C12631) * C47471) *
               C47105 * C47456) *
              C47156 * C47476 +
          (((C10339 - C10338 + C10341 - C10340) * C15949 +
            (C10343 - C10342 + C10345 - C10344) * C15945 +
            (C10524 - C10525 + C10526 - C10527) * C15950 +
            (C10528 - C10529 + C10530 - C10531) * C47471) *
               C47105 * C1816 +
           ((C10703 - C10702 + C10705 - C10704) * C15949 +
            (C10707 - C10706 + C10709 - C10708) * C15945 +
            (C11196 - C11197 + C11198 - C11199) * C15950 +
            (C11200 - C11201 + C11202 - C11203) * C47471) *
               C47105 * C1817 +
           ((C10711 - C10710 + C10713 - C10712) * C15949 +
            (C10715 - C10714 + C10717 - C10716) * C15945 +
            (C10325 * C1299 - C10327 * C1288 + C47473 * C2397 -
             C10328 * C2392) *
                C15950 +
            (C10325 * C1315 - C10327 * C1300 + C47473 * C2401 -
             C10328 * C2398) *
                C47471) *
               C47105 * C47456) *
              C47156 * C47447)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C10325 * C122 - C10327 * C115 + C47473 * C491 - C10328 * C481) *
                C15949 +
            (C10325 * C136 - C10327 * C123 + C47473 * C511 - C10328 * C492) *
                C15945 +
            (C25705 - C25706 + C25707 - C25708) * C15950 +
            (C25709 - C25710 + C25711 - C25712) * C47471) *
               C47105 * C1816 +
           ((C10327 * C481 - C10325 * C491 + C10328 * C484 - C47473 * C497) *
                C15949 +
            (C10327 * C492 - C10325 * C511 + C10328 * C498 - C47473 * C514) *
                C15945 +
            (C26321 - C26322 + C26323 - C26324) * C15950 +
            (C26325 - C26326 + C26327 - C26328) * C47471) *
               C47105 * C1817 +
           ((C10325 * C497 - C10327 * C484 + C47473 * C2002 - C10328 * C1996) *
                C15949 +
            (C10325 * C514 - C10327 * C498 + C47473 * C2014 - C10328 * C2003) *
                C15945 +
            (C26719 - C26720 + C26721 - C26722) * C15950 +
            (C26723 - C26724 + C26725 - C26726) * C47471) *
               C47105 * C47456) *
              C47492 +
          (((C25706 - C25705 + C25708 - C25707) * C15949 +
            (C25710 - C25709 + C25712 - C25711) * C15945 +
            (C25713 - C25714 + C25715 - C25716) * C15950 +
            (C25717 - C25718 + C25719 - C25720) * C47471) *
               C47105 * C1816 +
           ((C26322 - C26321 + C26324 - C26323) * C15949 +
            (C26326 - C26325 + C26328 - C26327) * C15945 +
            (C26727 - C26728 + C26729 - C26730) * C15950 +
            (C26731 - C26732 + C26733 - C26734) * C47471) *
               C47105 * C1817 +
           ((C26720 - C26719 + C26722 - C26721) * C15949 +
            (C26724 - C26723 + C26726 - C26725) * C15945 +
            (C26735 - C26736 + C26737 - C26738) * C15950 +
            (C26739 - C26740 + C26741 - C26742) * C47471) *
               C47105 * C47456) *
              C47480 +
          (((C25714 - C25713 + C25716 - C25715) * C15949 +
            (C25718 - C25717 + C25720 - C25719) * C15945 +
            (C26557 - C26558 + C26559 - C26560) * C15950 +
            (C26561 - C26562 + C26563 - C26564) * C47471) *
               C47105 * C1816 +
           ((C26728 - C26727 + C26730 - C26729) * C15949 +
            (C26732 - C26731 + C26734 - C26733) * C15945 +
            (C27197 - C27198 + C27199 - C27200) * C15950 +
            (C27201 - C27202 + C27203 - C27204) * C47471) *
               C47105 * C1817 +
           ((C26736 - C26735 + C26738 - C26737) * C15949 +
            (C26740 - C26739 + C26742 - C26741) * C15945 +
            (C10325 * C5923 - C10327 * C5921 + C47473 * C23237 -
             C10328 * C23236) *
                C15950 +
            (C10325 * C5927 - C10327 * C5924 + C47473 * C23239 -
             C10328 * C23238) *
                C47471) *
               C47105 * C47456) *
              C47453) *
         C47128) /
            (p * q * std::sqrt(p + q));
    d2ee[140] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C10325 * C122 - C10327 * C115 + C47473 * C491 - C10328 * C481) *
                 C15949 +
             (C10325 * C136 - C10327 * C123 + C47473 * C511 - C10328 * C492) *
                 C15945 +
             (C25705 - C25706 + C25707 - C25708) * C15950 +
             (C25709 - C25710 + C25711 - C25712) * C47471) *
                C47105 * C3262 +
            ((C10327 * C481 - C10325 * C491 + C10328 * C484 - C47473 * C497) *
                 C15949 +
             (C10327 * C492 - C10325 * C511 + C10328 * C498 - C47473 * C514) *
                 C15945 +
             (C26321 - C26322 + C26323 - C26324) * C15950 +
             (C26325 - C26326 + C26327 - C26328) * C47471) *
                C47105 * C47261) *
               C47421 +
           (((C25706 - C25705 + C25708 - C25707) * C15949 +
             (C25710 - C25709 + C25712 - C25711) * C15945 +
             (C25713 - C25714 + C25715 - C25716) * C15950 +
             (C25717 - C25718 + C25719 - C25720) * C47471) *
                C47105 * C3262 +
            ((C26322 - C26321 + C26324 - C26323) * C15949 +
             (C26326 - C26325 + C26328 - C26327) * C15945 +
             (C26727 - C26728 + C26729 - C26730) * C15950 +
             (C26731 - C26732 + C26733 - C26734) * C47471) *
                C47105 * C47261) *
               C47219) *
              C47133 +
          ((((C10331 - C10330 + C10333 - C10332) * C15949 +
             (C10335 - C10334 + C10337 - C10336) * C15945 +
             (C10508 - C10509 + C10510 - C10511) * C15950 +
             (C10512 - C10513 + C10514 - C10515) * C47471) *
                C47105 * C3262 +
            ((C10687 - C10686 + C10689 - C10688) * C15949 +
             (C10691 - C10690 + C10693 - C10692) * C15945 +
             (C11188 - C11189 + C11190 - C11191) * C15950 +
             (C11192 - C11193 + C11194 - C11195) * C47471) *
                C47105 * C47261) *
               C47421 +
           (((C10509 - C10508 + C10511 - C10510) * C15949 +
             (C10513 - C10512 + C10515 - C10514) * C15945 +
             (C10516 - C10517 + C10518 - C10519) * C15950 +
             (C10520 - C10521 + C10522 - C10523) * C47471) *
                C47105 * C3262 +
            ((C11189 - C11188 + C11191 - C11190) * C15949 +
             (C11193 - C11192 + C11195 - C11194) * C15945 +
             (C11910 - C11911 + C11912 - C11913) * C15950 +
             (C11914 - C11915 + C11916 - C11917) * C47471) *
                C47105 * C47261) *
               C47219) *
              C47142 +
          ((((C10339 - C10338 + C10341 - C10340) * C15949 +
             (C10343 - C10342 + C10345 - C10344) * C15945 +
             (C10524 - C10525 + C10526 - C10527) * C15950 +
             (C10528 - C10529 + C10530 - C10531) * C47471) *
                C47105 * C3262 +
            ((C10703 - C10702 + C10705 - C10704) * C15949 +
             (C10707 - C10706 + C10709 - C10708) * C15945 +
             (C11196 - C11197 + C11198 - C11199) * C15950 +
             (C11200 - C11201 + C11202 - C11203) * C47471) *
                C47105 * C47261) *
               C47421 +
           (((C10525 - C10524 + C10527 - C10526) * C15949 +
             (C10529 - C10528 + C10531 - C10530) * C15945 +
             (C10532 - C10533 + C10534 - C10535) * C15950 +
             (C10536 - C10537 + C10538 - C10539) * C47471) *
                C47105 * C3262 +
            ((C11197 - C11196 + C11199 - C11198) * C15949 +
             (C11201 - C11200 + C11203 - C11202) * C15945 +
             (C10325 * C1305 - C10327 * C1291 + C47473 * C1311 -
              C10328 * C1294) *
                 C15950 +
             (C10325 * C1318 - C10327 * C1306 + C47473 * C1321 -
              C10328 * C1312) *
                 C47471) *
                C47105 * C47261) *
               C47219) *
              C2871)) /
        (p * q * std::sqrt(p + q));
    d2ee[141] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C10325 * C122 - C10327 * C115 + C47473 * C491 - C10328 * C481) *
                 C15949 +
             (C10325 * C136 - C10327 * C123 + C47473 * C511 - C10328 * C492) *
                 C15945 +
             (C25705 - C25706 + C25707 - C25708) * C15950 +
             (C25709 - C25710 + C25711 - C25712) * C47471) *
                C47105 * C47257 +
            ((C10327 * C481 - C10325 * C491 + C10328 * C484 - C47473 * C497) *
                 C15949 +
             (C10327 * C492 - C10325 * C511 + C10328 * C498 - C47473 * C514) *
                 C15945 +
             (C26321 - C26322 + C26323 - C26324) * C15950 +
             (C26325 - C26326 + C26327 - C26328) * C47471) *
                C47105 * C47264 +
            ((C10325 * C497 - C10327 * C484 + C47473 * C2002 - C10328 * C1996) *
                 C15949 +
             (C10325 * C514 - C10327 * C498 + C47473 * C2014 - C10328 * C2003) *
                 C15945 +
             (C26719 - C26720 + C26721 - C26722) * C15950 +
             (C26723 - C26724 + C26725 - C26726) * C47471) *
                C47105 * C3770) *
               C47421 +
           (((C25706 - C25705 + C25708 - C25707) * C15949 +
             (C25710 - C25709 + C25712 - C25711) * C15945 +
             (C25713 - C25714 + C25715 - C25716) * C15950 +
             (C25717 - C25718 + C25719 - C25720) * C47471) *
                C47105 * C47257 +
            ((C26322 - C26321 + C26324 - C26323) * C15949 +
             (C26326 - C26325 + C26328 - C26327) * C15945 +
             (C26727 - C26728 + C26729 - C26730) * C15950 +
             (C26731 - C26732 + C26733 - C26734) * C47471) *
                C47105 * C47264 +
            ((C26720 - C26719 + C26722 - C26721) * C15949 +
             (C26724 - C26723 + C26726 - C26725) * C15945 +
             (C26735 - C26736 + C26737 - C26738) * C15950 +
             (C26739 - C26740 + C26741 - C26742) * C47471) *
                C47105 * C3770) *
               C47219) *
              C2608 +
          ((((C10331 - C10330 + C10333 - C10332) * C15949 +
             (C10335 - C10334 + C10337 - C10336) * C15945 +
             (C10508 - C10509 + C10510 - C10511) * C15950 +
             (C10512 - C10513 + C10514 - C10515) * C47471) *
                C47105 * C47257 +
            ((C10687 - C10686 + C10689 - C10688) * C15949 +
             (C10691 - C10690 + C10693 - C10692) * C15945 +
             (C11188 - C11189 + C11190 - C11191) * C15950 +
             (C11192 - C11193 + C11194 - C11195) * C47471) *
                C47105 * C47264 +
            ((C10695 - C10694 + C10697 - C10696) * C15949 +
             (C10699 - C10698 + C10701 - C10700) * C15945 +
             (C12624 - C12625 + C12626 - C12627) * C15950 +
             (C12628 - C12629 + C12630 - C12631) * C47471) *
                C47105 * C3770) *
               C47421 +
           (((C10509 - C10508 + C10511 - C10510) * C15949 +
             (C10513 - C10512 + C10515 - C10514) * C15945 +
             (C10516 - C10517 + C10518 - C10519) * C15950 +
             (C10520 - C10521 + C10522 - C10523) * C47471) *
                C47105 * C47257 +
            ((C11189 - C11188 + C11191 - C11190) * C15949 +
             (C11193 - C11192 + C11195 - C11194) * C15945 +
             (C11910 - C11911 + C11912 - C11913) * C15950 +
             (C11914 - C11915 + C11916 - C11917) * C47471) *
                C47105 * C47264 +
            ((C12625 - C12624 + C12627 - C12626) * C15949 +
             (C12629 - C12628 + C12631 - C12630) * C15945 +
             (C10325 * C1309 - C10327 * C1293 + C47473 * C7271 -
              C10328 * C7268) *
                 C15950 +
             (C10325 * C1320 - C10327 * C1310 + C47473 * C7274 -
              C10328 * C7272) *
                 C47471) *
                C47105 * C3770) *
               C47219) *
              C47139)) /
        (p * q * std::sqrt(p + q));
    d2ee[142] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C10325 * C122 - C10327 * C115 + C47473 * C491 - C10328 * C481) *
                 C15949 +
             (C10325 * C136 - C10327 * C123 + C47473 * C511 - C10328 * C492) *
                 C15945 +
             (C25705 - C25706 + C25707 - C25708) * C15950 +
             (C25709 - C25710 + C25711 - C25712) * C47471) *
                C47105 * C3262 +
            ((C10327 * C481 - C10325 * C491 + C10328 * C484 - C47473 * C497) *
                 C15949 +
             (C10327 * C492 - C10325 * C511 + C10328 * C498 - C47473 * C514) *
                 C15945 +
             (C26321 - C26322 + C26323 - C26324) * C15950 +
             (C26325 - C26326 + C26327 - C26328) * C47471) *
                C47105 * C47261) *
               C47492 +
           (((C25706 - C25705 + C25708 - C25707) * C15949 +
             (C25710 - C25709 + C25712 - C25711) * C15945 +
             (C25713 - C25714 + C25715 - C25716) * C15950 +
             (C25717 - C25718 + C25719 - C25720) * C47471) *
                C47105 * C3262 +
            ((C26322 - C26321 + C26324 - C26323) * C15949 +
             (C26326 - C26325 + C26328 - C26327) * C15945 +
             (C26727 - C26728 + C26729 - C26730) * C15950 +
             (C26731 - C26732 + C26733 - C26734) * C47471) *
                C47105 * C47261) *
               C47480 +
           (((C25714 - C25713 + C25716 - C25715) * C15949 +
             (C25718 - C25717 + C25720 - C25719) * C15945 +
             (C26557 - C26558 + C26559 - C26560) * C15950 +
             (C26561 - C26562 + C26563 - C26564) * C47471) *
                C47105 * C3262 +
            ((C26728 - C26727 + C26730 - C26729) * C15949 +
             (C26732 - C26731 + C26734 - C26733) * C15945 +
             (C27197 - C27198 + C27199 - C27200) * C15950 +
             (C27201 - C27202 + C27203 - C27204) * C47471) *
                C47105 * C47261) *
               C47453) *
              C2608 +
          ((((C10331 - C10330 + C10333 - C10332) * C15949 +
             (C10335 - C10334 + C10337 - C10336) * C15945 +
             (C10508 - C10509 + C10510 - C10511) * C15950 +
             (C10512 - C10513 + C10514 - C10515) * C47471) *
                C47105 * C3262 +
            ((C10687 - C10686 + C10689 - C10688) * C15949 +
             (C10691 - C10690 + C10693 - C10692) * C15945 +
             (C11188 - C11189 + C11190 - C11191) * C15950 +
             (C11192 - C11193 + C11194 - C11195) * C47471) *
                C47105 * C47261) *
               C47492 +
           (((C10509 - C10508 + C10511 - C10510) * C15949 +
             (C10513 - C10512 + C10515 - C10514) * C15945 +
             (C10516 - C10517 + C10518 - C10519) * C15950 +
             (C10520 - C10521 + C10522 - C10523) * C47471) *
                C47105 * C3262 +
            ((C11189 - C11188 + C11191 - C11190) * C15949 +
             (C11193 - C11192 + C11195 - C11194) * C15945 +
             (C11910 - C11911 + C11912 - C11913) * C15950 +
             (C11914 - C11915 + C11916 - C11917) * C47471) *
                C47105 * C47261) *
               C47480 +
           (((C10517 - C10516 + C10519 - C10518) * C15949 +
             (C10521 - C10520 + C10523 - C10522) * C15945 +
             (C11708 - C11709 + C11710 - C11711) * C15950 +
             (C11712 - C11713 + C11714 - C11715) * C47471) *
                C47105 * C3262 +
            ((C11911 - C11910 + C11913 - C11912) * C15949 +
             (C11915 - C11914 + C11917 - C11916) * C15945 +
             (C10325 * C1699 - C10327 * C1695 + C47473 * C5925 -
              C10328 * C5922) *
                 C15950 +
             (C10325 * C1704 - C10327 * C1700 + C47473 * C5928 -
              C10328 * C5926) *
                 C47471) *
                C47105 * C47261) *
               C47453) *
              C47139)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C10325 * C122 - C10327 * C115 + C47473 * C491 - C10328 * C481) *
                C15949 +
            (C10325 * C136 - C10327 * C123 + C47473 * C511 - C10328 * C492) *
                C15945 +
            (C25705 - C25706 + C25707 - C25708) * C15950 +
            (C25709 - C25710 + C25711 - C25712) * C47471) *
               C47105 * C3262 +
           ((C10327 * C481 - C10325 * C491 + C10328 * C484 - C47473 * C497) *
                C15949 +
            (C10327 * C492 - C10325 * C511 + C10328 * C498 - C47473 * C514) *
                C15945 +
            (C26321 - C26322 + C26323 - C26324) * C15950 +
            (C26325 - C26326 + C26327 - C26328) * C47471) *
               C47105 * C47261) *
              C47156 * C47498 +
          (((C10331 - C10330 + C10333 - C10332) * C15949 +
            (C10335 - C10334 + C10337 - C10336) * C15945 +
            (C10508 - C10509 + C10510 - C10511) * C15950 +
            (C10512 - C10513 + C10514 - C10515) * C47471) *
               C47105 * C3262 +
           ((C10687 - C10686 + C10689 - C10688) * C15949 +
            (C10691 - C10690 + C10693 - C10692) * C15945 +
            (C11188 - C11189 + C11190 - C11191) * C15950 +
            (C11192 - C11193 + C11194 - C11195) * C47471) *
               C47105 * C47261) *
              C47156 * C47491 +
          (((C10339 - C10338 + C10341 - C10340) * C15949 +
            (C10343 - C10342 + C10345 - C10344) * C15945 +
            (C10524 - C10525 + C10526 - C10527) * C15950 +
            (C10528 - C10529 + C10530 - C10531) * C47471) *
               C47105 * C3262 +
           ((C10703 - C10702 + C10705 - C10704) * C15949 +
            (C10707 - C10706 + C10709 - C10708) * C15945 +
            (C11196 - C11197 + C11198 - C11199) * C15950 +
            (C11200 - C11201 + C11202 - C11203) * C47471) *
               C47105 * C47261) *
              C47156 * C47478 +
          (((C10347 - C10346 + C10349 - C10348) * C15949 +
            (C10351 - C10350 + C10353 - C10352) * C15945 +
            (C10848 - C10849 + C10850 - C10851) * C15950 +
            (C10852 - C10853 + C10854 - C10855) * C47471) *
               C47105 * C3262 +
           ((C10987 - C10986 + C10989 - C10988) * C15949 +
            (C10991 - C10990 + C10993 - C10992) * C15945 +
            (C10325 * C942 - C10327 * C934 + C47473 * C2167 - C10328 * C2166) *
                C15950 +
            (C10325 * C949 - C10327 * C943 + C47473 * C2169 - C10328 * C2168) *
                C47471) *
               C47105 * C47261) *
              C47156 * C47457)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C10325 * C122 - C10327 * C115 + C47473 * C491 - C10328 * C481) *
                C15949 +
            (C10325 * C136 - C10327 * C123 + C47473 * C511 - C10328 * C492) *
                C15945 +
            (C25705 - C25706 + C25707 - C25708) * C15950 +
            (C25709 - C25710 + C25711 - C25712) * C47471) *
               C47105 * C47500 +
           ((C10327 * C481 - C10325 * C491 + C10328 * C484 - C47473 * C497) *
                C15949 +
            (C10327 * C492 - C10325 * C511 + C10328 * C498 - C47473 * C514) *
                C15945 +
            (C26321 - C26322 + C26323 - C26324) * C15950 +
            (C26325 - C26326 + C26327 - C26328) * C47471) *
               C47105 * C47497 +
           ((C10325 * C497 - C10327 * C484 + C47473 * C2002 - C10328 * C1996) *
                C15949 +
            (C10325 * C514 - C10327 * C498 + C47473 * C2014 - C10328 * C2003) *
                C15945 +
            (C26719 - C26720 + C26721 - C26722) * C15950 +
            (C26723 - C26724 + C26725 - C26726) * C47471) *
               C47105 * C47488 +
           ((C10327 * C1996 - C10325 * C2002 + C10328 * C1999 -
             C47473 * C2008) *
                C15949 +
            (C10327 * C2003 - C10325 * C2014 + C10328 * C2009 -
             C47473 * C2017) *
                C15945 +
            (C28037 - C28038 + C28039 - C28040) * C15950 +
            (C28041 - C28042 + C28043 - C28044) * C47471) *
               C47105 * C47469) *
              C47156 * C2608 +
          (((C10331 - C10330 + C10333 - C10332) * C15949 +
            (C10335 - C10334 + C10337 - C10336) * C15945 +
            (C10508 - C10509 + C10510 - C10511) * C15950 +
            (C10512 - C10513 + C10514 - C10515) * C47471) *
               C47105 * C47500 +
           ((C10687 - C10686 + C10689 - C10688) * C15949 +
            (C10691 - C10690 + C10693 - C10692) * C15945 +
            (C11188 - C11189 + C11190 - C11191) * C15950 +
            (C11192 - C11193 + C11194 - C11195) * C47471) *
               C47105 * C47497 +
           ((C10695 - C10694 + C10697 - C10696) * C15949 +
            (C10699 - C10698 + C10701 - C10700) * C15945 +
            (C12624 - C12625 + C12626 - C12627) * C15950 +
            (C12628 - C12629 + C12630 - C12631) * C47471) *
               C47105 * C47488 +
           ((C12763 - C12762 + C12765 - C12764) * C15949 +
            (C12767 - C12766 + C12769 - C12768) * C15945 +
            (C10325 * C2395 - C10327 * C2391 + C47473 * C6801 -
             C10328 * C6798) *
                C15950 +
            (C10325 * C2400 - C10327 * C2396 + C47473 * C6804 -
             C10328 * C6802) *
                C47471) *
               C47105 * C47469) *
              C47156 * C47139)) /
            (p * q * std::sqrt(p + q));
    d2ee[143] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C10325 * C122 - C10327 * C115 + C47473 * C491 - C10328 * C481) *
                C15949 +
            (C10325 * C136 - C10327 * C123 + C47473 * C511 - C10328 * C492) *
                C15945 +
            (C25705 - C25706 + C25707 - C25708) * C15950 +
            (C25709 - C25710 + C25711 - C25712) * C47471) *
               C47105 * C47257 +
           ((C10327 * C481 - C10325 * C491 + C10328 * C484 - C47473 * C497) *
                C15949 +
            (C10327 * C492 - C10325 * C511 + C10328 * C498 - C47473 * C514) *
                C15945 +
            (C26321 - C26322 + C26323 - C26324) * C15950 +
            (C26325 - C26326 + C26327 - C26328) * C47471) *
               C47105 * C47264 +
           ((C10325 * C497 - C10327 * C484 + C47473 * C2002 - C10328 * C1996) *
                C15949 +
            (C10325 * C514 - C10327 * C498 + C47473 * C2014 - C10328 * C2003) *
                C15945 +
            (C26719 - C26720 + C26721 - C26722) * C15950 +
            (C26723 - C26724 + C26725 - C26726) * C47471) *
               C47105 * C3770) *
              C47156 * C47133 +
          (((C10331 - C10330 + C10333 - C10332) * C15949 +
            (C10335 - C10334 + C10337 - C10336) * C15945 +
            (C10508 - C10509 + C10510 - C10511) * C15950 +
            (C10512 - C10513 + C10514 - C10515) * C47471) *
               C47105 * C47257 +
           ((C10687 - C10686 + C10689 - C10688) * C15949 +
            (C10691 - C10690 + C10693 - C10692) * C15945 +
            (C11188 - C11189 + C11190 - C11191) * C15950 +
            (C11192 - C11193 + C11194 - C11195) * C47471) *
               C47105 * C47264 +
           ((C10695 - C10694 + C10697 - C10696) * C15949 +
            (C10699 - C10698 + C10701 - C10700) * C15945 +
            (C12624 - C12625 + C12626 - C12627) * C15950 +
            (C12628 - C12629 + C12630 - C12631) * C47471) *
               C47105 * C3770) *
              C47156 * C47142 +
          (((C10339 - C10338 + C10341 - C10340) * C15949 +
            (C10343 - C10342 + C10345 - C10344) * C15945 +
            (C10524 - C10525 + C10526 - C10527) * C15950 +
            (C10528 - C10529 + C10530 - C10531) * C47471) *
               C47105 * C47257 +
           ((C10703 - C10702 + C10705 - C10704) * C15949 +
            (C10707 - C10706 + C10709 - C10708) * C15945 +
            (C11196 - C11197 + C11198 - C11199) * C15950 +
            (C11200 - C11201 + C11202 - C11203) * C47471) *
               C47105 * C47264 +
           ((C10711 - C10710 + C10713 - C10712) * C15949 +
            (C10715 - C10714 + C10717 - C10716) * C15945 +
            (C10325 * C1299 - C10327 * C1288 + C47473 * C2397 -
             C10328 * C2392) *
                C15950 +
            (C10325 * C1315 - C10327 * C1300 + C47473 * C2401 -
             C10328 * C2398) *
                C47471) *
               C47105 * C3770) *
              C47156 * C2871)) /
        (p * q * std::sqrt(p + q));
    d2ee[144] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C10325 * C122 - C10327 * C115 + C47473 * C491 - C10328 * C481) *
                C15949 +
            (C10325 * C136 - C10327 * C123 + C47473 * C511 - C10328 * C492) *
                C15945 +
            (C25705 - C25706 + C25707 - C25708) * C15950 +
            (C25709 - C25710 + C25711 - C25712) * C47471) *
               C47105 * C3262 +
           ((C10327 * C481 - C10325 * C491 + C10328 * C484 - C47473 * C497) *
                C15949 +
            (C10327 * C492 - C10325 * C511 + C10328 * C498 - C47473 * C514) *
                C15945 +
            (C26321 - C26322 + C26323 - C26324) * C15950 +
            (C26325 - C26326 + C26327 - C26328) * C47471) *
               C47105 * C47261) *
              C47156 * C47498 +
          (((C10331 - C10330 + C10333 - C10332) * C15949 +
            (C10335 - C10334 + C10337 - C10336) * C15945 +
            (C10508 - C10509 + C10510 - C10511) * C15950 +
            (C10512 - C10513 + C10514 - C10515) * C47471) *
               C47105 * C3262 +
           ((C10687 - C10686 + C10689 - C10688) * C15949 +
            (C10691 - C10690 + C10693 - C10692) * C15945 +
            (C11188 - C11189 + C11190 - C11191) * C15950 +
            (C11192 - C11193 + C11194 - C11195) * C47471) *
               C47105 * C47261) *
              C47156 * C47491 +
          (((C10339 - C10338 + C10341 - C10340) * C15949 +
            (C10343 - C10342 + C10345 - C10344) * C15945 +
            (C10524 - C10525 + C10526 - C10527) * C15950 +
            (C10528 - C10529 + C10530 - C10531) * C47471) *
               C47105 * C3262 +
           ((C10703 - C10702 + C10705 - C10704) * C15949 +
            (C10707 - C10706 + C10709 - C10708) * C15945 +
            (C11196 - C11197 + C11198 - C11199) * C15950 +
            (C11200 - C11201 + C11202 - C11203) * C47471) *
               C47105 * C47261) *
              C47156 * C47478 +
          (((C10347 - C10346 + C10349 - C10348) * C15949 +
            (C10351 - C10350 + C10353 - C10352) * C15945 +
            (C10848 - C10849 + C10850 - C10851) * C15950 +
            (C10852 - C10853 + C10854 - C10855) * C47471) *
               C47105 * C3262 +
           ((C10987 - C10986 + C10989 - C10988) * C15949 +
            (C10991 - C10990 + C10993 - C10992) * C15945 +
            (C10325 * C942 - C10327 * C934 + C47473 * C2167 - C10328 * C2166) *
                C15950 +
            (C10325 * C949 - C10327 * C943 + C47473 * C2169 - C10328 * C2168) *
                C47471) *
               C47105 * C47261) *
              C47156 * C47457)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C10325 * C122 - C10327 * C115 + C47473 * C491 - C10328 * C481) *
                 C15949 +
             (C10325 * C136 - C10327 * C123 + C47473 * C511 - C10328 * C492) *
                 C15945 +
             (C25705 - C25706 + C25707 - C25708) * C15950 +
             (C25709 - C25710 + C25711 - C25712) * C47471) *
                C47105 * C3262 +
            ((C10327 * C481 - C10325 * C491 + C10328 * C484 - C47473 * C497) *
                 C15949 +
             (C10327 * C492 - C10325 * C511 + C10328 * C498 - C47473 * C514) *
                 C15945 +
             (C26321 - C26322 + C26323 - C26324) * C15950 +
             (C26325 - C26326 + C26327 - C26328) * C47471) *
                C47105 * C47261) *
               C47492 +
           (((C25706 - C25705 + C25708 - C25707) * C15949 +
             (C25710 - C25709 + C25712 - C25711) * C15945 +
             (C25713 - C25714 + C25715 - C25716) * C15950 +
             (C25717 - C25718 + C25719 - C25720) * C47471) *
                C47105 * C3262 +
            ((C26322 - C26321 + C26324 - C26323) * C15949 +
             (C26326 - C26325 + C26328 - C26327) * C15945 +
             (C26727 - C26728 + C26729 - C26730) * C15950 +
             (C26731 - C26732 + C26733 - C26734) * C47471) *
                C47105 * C47261) *
               C47480 +
           (((C25714 - C25713 + C25716 - C25715) * C15949 +
             (C25718 - C25717 + C25720 - C25719) * C15945 +
             (C26557 - C26558 + C26559 - C26560) * C15950 +
             (C26561 - C26562 + C26563 - C26564) * C47471) *
                C47105 * C3262 +
            ((C26728 - C26727 + C26730 - C26729) * C15949 +
             (C26732 - C26731 + C26734 - C26733) * C15945 +
             (C27197 - C27198 + C27199 - C27200) * C15950 +
             (C27201 - C27202 + C27203 - C27204) * C47471) *
                C47105 * C47261) *
               C47453) *
              C2608 +
          ((((C10331 - C10330 + C10333 - C10332) * C15949 +
             (C10335 - C10334 + C10337 - C10336) * C15945 +
             (C10508 - C10509 + C10510 - C10511) * C15950 +
             (C10512 - C10513 + C10514 - C10515) * C47471) *
                C47105 * C3262 +
            ((C10687 - C10686 + C10689 - C10688) * C15949 +
             (C10691 - C10690 + C10693 - C10692) * C15945 +
             (C11188 - C11189 + C11190 - C11191) * C15950 +
             (C11192 - C11193 + C11194 - C11195) * C47471) *
                C47105 * C47261) *
               C47492 +
           (((C10509 - C10508 + C10511 - C10510) * C15949 +
             (C10513 - C10512 + C10515 - C10514) * C15945 +
             (C10516 - C10517 + C10518 - C10519) * C15950 +
             (C10520 - C10521 + C10522 - C10523) * C47471) *
                C47105 * C3262 +
            ((C11189 - C11188 + C11191 - C11190) * C15949 +
             (C11193 - C11192 + C11195 - C11194) * C15945 +
             (C11910 - C11911 + C11912 - C11913) * C15950 +
             (C11914 - C11915 + C11916 - C11917) * C47471) *
                C47105 * C47261) *
               C47480 +
           (((C10517 - C10516 + C10519 - C10518) * C15949 +
             (C10521 - C10520 + C10523 - C10522) * C15945 +
             (C11708 - C11709 + C11710 - C11711) * C15950 +
             (C11712 - C11713 + C11714 - C11715) * C47471) *
                C47105 * C3262 +
            ((C11911 - C11910 + C11913 - C11912) * C15949 +
             (C11915 - C11914 + C11917 - C11916) * C15945 +
             (C10325 * C1699 - C10327 * C1695 + C47473 * C5925 -
              C10328 * C5922) *
                 C15950 +
             (C10325 * C1704 - C10327 * C1700 + C47473 * C5928 -
              C10328 * C5926) *
                 C47471) *
                C47105 * C47261) *
               C47453) *
              C47139)) /
            (p * q * std::sqrt(p + q));
    d2ee[145] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C10325 * C122 - C10327 * C115 + C47473 * C491 - C10328 * C481) *
                C15949 +
            (C10325 * C136 - C10327 * C123 + C47473 * C511 - C10328 * C492) *
                C15945 +
            (C25705 - C25706 + C25707 - C25708) * C15950 +
            (C25709 - C25710 + C25711 - C25712) * C47471) *
               C47105 * C47174 * C47421 +
           ((C25706 - C25705 + C25708 - C25707) * C15949 +
            (C25710 - C25709 + C25712 - C25711) * C15945 +
            (C25713 - C25714 + C25715 - C25716) * C15950 +
            (C25717 - C25718 + C25719 - C25720) * C47471) *
               C47105 * C47174 * C47219) *
              C655 +
          (((C10331 - C10330 + C10333 - C10332) * C15949 +
            (C10335 - C10334 + C10337 - C10336) * C15945 +
            (C10508 - C10509 + C10510 - C10511) * C15950 +
            (C10512 - C10513 + C10514 - C10515) * C47471) *
               C47105 * C47174 * C47421 +
           ((C10509 - C10508 + C10511 - C10510) * C15949 +
            (C10513 - C10512 + C10515 - C10514) * C15945 +
            (C10516 - C10517 + C10518 - C10519) * C15950 +
            (C10520 - C10521 + C10522 - C10523) * C47471) *
               C47105 * C47174 * C47219) *
              C656 +
          (((C10339 - C10338 + C10341 - C10340) * C15949 +
            (C10343 - C10342 + C10345 - C10344) * C15945 +
            (C10524 - C10525 + C10526 - C10527) * C15950 +
            (C10528 - C10529 + C10530 - C10531) * C47471) *
               C47105 * C47174 * C47421 +
           ((C10525 - C10524 + C10527 - C10526) * C15949 +
            (C10529 - C10528 + C10531 - C10530) * C15945 +
            (C10532 - C10533 + C10534 - C10535) * C15950 +
            (C10536 - C10537 + C10538 - C10539) * C47471) *
               C47105 * C47174 * C47219) *
              C657 +
          (((C10347 - C10346 + C10349 - C10348) * C15949 +
            (C10351 - C10350 + C10353 - C10352) * C15945 +
            (C10848 - C10849 + C10850 - C10851) * C15950 +
            (C10852 - C10853 + C10854 - C10855) * C47471) *
               C47105 * C47174 * C47421 +
           ((C10849 - C10848 + C10851 - C10850) * C15949 +
            (C10853 - C10852 + C10855 - C10854) * C15945 +
            (C10325 * C318 - C10327 * C301 + C47473 * C1585 - C10328 * C1584) *
                C15950 +
            (C10325 * C331 - C10327 * C319 + C47473 * C1587 - C10328 * C1586) *
                C47471) *
               C47105 * C47174 * C47219) *
              C47457)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C10325 * C122 - C10327 * C115 + C47473 * C491 - C10328 * C481) *
                C15949 +
            (C10325 * C136 - C10327 * C123 + C47473 * C511 - C10328 * C492) *
                C15945 +
            (C25705 - C25706 + C25707 - C25708) * C15950 +
            (C25709 - C25710 + C25711 - C25712) * C47471) *
               C47105 * C47174 * C1420 +
           ((C25706 - C25705 + C25708 - C25707) * C15949 +
            (C25710 - C25709 + C25712 - C25711) * C15945 +
            (C25713 - C25714 + C25715 - C25716) * C15950 +
            (C25717 - C25718 + C25719 - C25720) * C47471) *
               C47105 * C47174 * C1421 +
           ((C25714 - C25713 + C25716 - C25715) * C15949 +
            (C25718 - C25717 + C25720 - C25719) * C15945 +
            (C26557 - C26558 + C26559 - C26560) * C15950 +
            (C26561 - C26562 + C26563 - C26564) * C47471) *
               C47105 * C47174 * C1422 +
           ((C26558 - C26557 + C26560 - C26559) * C15949 +
            (C26562 - C26561 + C26564 - C26563) * C15945 +
            (C26565 - C26566 + C26567 - C26568) * C15950 +
            (C26569 - C26570 + C26571 - C26572) * C47471) *
               C47105 * C47174 * C47463) *
              C47407 +
          (((C10331 - C10330 + C10333 - C10332) * C15949 +
            (C10335 - C10334 + C10337 - C10336) * C15945 +
            (C10508 - C10509 + C10510 - C10511) * C15950 +
            (C10512 - C10513 + C10514 - C10515) * C47471) *
               C47105 * C47174 * C1420 +
           ((C10509 - C10508 + C10511 - C10510) * C15949 +
            (C10513 - C10512 + C10515 - C10514) * C15945 +
            (C10516 - C10517 + C10518 - C10519) * C15950 +
            (C10520 - C10521 + C10522 - C10523) * C47471) *
               C47105 * C47174 * C1421 +
           ((C10517 - C10516 + C10519 - C10518) * C15949 +
            (C10521 - C10520 + C10523 - C10522) * C15945 +
            (C11708 - C11709 + C11710 - C11711) * C15950 +
            (C11712 - C11713 + C11714 - C11715) * C47471) *
               C47105 * C47174 * C1422 +
           ((C11709 - C11708 + C11711 - C11710) * C15949 +
            (C11713 - C11712 + C11715 - C11714) * C15945 +
            (C10325 * C1166 - C10327 * C1156 + C47473 * C6415 -
             C10328 * C6412) *
                C15950 +
            (C10325 * C1174 - C10327 * C1167 + C47473 * C6418 -
             C10328 * C6416) *
                C47471) *
               C47105 * C47174 * C47463) *
              C47139)) /
            (p * q * std::sqrt(p + q));
    d2ee[146] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C10325 * C122 - C10327 * C115 + C47473 * C491 - C10328 * C481) *
                 C15949 +
             (C10325 * C136 - C10327 * C123 + C47473 * C511 - C10328 * C492) *
                 C15945 +
             (C25705 - C25706 + C25707 - C25708) * C15950 +
             (C25709 - C25710 + C25711 - C25712) * C47471) *
                C47105 * C47422 +
            ((C10327 * C481 - C10325 * C491 + C10328 * C484 - C47473 * C497) *
                 C15949 +
             (C10327 * C492 - C10325 * C511 + C10328 * C498 - C47473 * C514) *
                 C15945 +
             (C26321 - C26322 + C26323 - C26324) * C15950 +
             (C26325 - C26326 + C26327 - C26328) * C47471) *
                C47105 * C47261) *
               C47421 +
           (((C25706 - C25705 + C25708 - C25707) * C15949 +
             (C25710 - C25709 + C25712 - C25711) * C15945 +
             (C25713 - C25714 + C25715 - C25716) * C15950 +
             (C25717 - C25718 + C25719 - C25720) * C47471) *
                C47105 * C47422 +
            ((C26322 - C26321 + C26324 - C26323) * C15949 +
             (C26326 - C26325 + C26328 - C26327) * C15945 +
             (C10325 * C1301 - C10327 * C1289 + C47473 * C1307 -
              C10328 * C1292) *
                 C15950 +
             (C10325 * C1316 - C10327 * C1302 + C47473 * C1319 -
              C10328 * C1308) *
                 C47471) *
                C47105 * C47261) *
               C47219) *
              C291 +
          ((((C10331 - C10330 + C10333 - C10332) * C15949 +
             (C10335 - C10334 + C10337 - C10336) * C15945 +
             (C10508 - C10509 + C10510 - C10511) * C15950 +
             (C10512 - C10513 + C10514 - C10515) * C47471) *
                C47105 * C47422 +
            ((C10687 - C10686 + C10689 - C10688) * C15949 +
             (C10691 - C10690 + C10693 - C10692) * C15945 +
             (C11188 - C11189 + C11190 - C11191) * C15950 +
             (C11192 - C11193 + C11194 - C11195) * C47471) *
                C47105 * C47261) *
               C47421 +
           (((C10509 - C10508 + C10511 - C10510) * C15949 +
             (C10513 - C10512 + C10515 - C10514) * C15945 +
             (C10516 - C10517 + C10518 - C10519) * C15950 +
             (C10520 - C10521 + C10522 - C10523) * C47471) *
                C47105 * C47422 +
            ((C11189 - C11188 + C11191 - C11190) * C15949 +
             (C11193 - C11192 + C11195 - C11194) * C15945 +
             (C11910 - C11911 + C11912 - C11913) * C15950 +
             (C11914 - C11915 + C11916 - C11917) * C47471) *
                C47105 * C47261) *
               C47219) *
              C292 +
          ((((C10339 - C10338 + C10341 - C10340) * C15949 +
             (C10343 - C10342 + C10345 - C10344) * C15945 +
             (C10524 - C10525 + C10526 - C10527) * C15950 +
             (C10528 - C10529 + C10530 - C10531) * C47471) *
                C47105 * C47422 +
            ((C10703 - C10702 + C10705 - C10704) * C15949 +
             (C10707 - C10706 + C10709 - C10708) * C15945 +
             (C11196 - C11197 + C11198 - C11199) * C15950 +
             (C11200 - C11201 + C11202 - C11203) * C47471) *
                C47105 * C47261) *
               C47421 +
           (((C10525 - C10524 + C10527 - C10526) * C15949 +
             (C10529 - C10528 + C10531 - C10530) * C15945 +
             (C10532 - C10533 + C10534 - C10535) * C15950 +
             (C10536 - C10537 + C10538 - C10539) * C47471) *
                C47105 * C47422 +
            ((C11197 - C11196 + C11199 - C11198) * C15949 +
             (C11201 - C11200 + C11203 - C11202) * C15945 +
             (C10325 * C1305 - C10327 * C1291 + C47473 * C1311 -
              C10328 * C1294) *
                 C15950 +
             (C10325 * C1318 - C10327 * C1306 + C47473 * C1321 -
              C10328 * C1312) *
                 C47471) *
                C47105 * C47261) *
               C47219) *
              C47447)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C10325 * C122 - C10327 * C115 + C47473 * C491 - C10328 * C481) *
                C15949 +
            (C10325 * C136 - C10327 * C123 + C47473 * C511 - C10328 * C492) *
                C15945 +
            (C25705 - C25706 + C25707 - C25708) * C15950 +
            (C25709 - C25710 + C25711 - C25712) * C47471) *
               C47105 * C47422 +
           ((C10327 * C481 - C10325 * C491 + C10328 * C484 - C47473 * C497) *
                C15949 +
            (C10327 * C492 - C10325 * C511 + C10328 * C498 - C47473 * C514) *
                C15945 +
            (C26321 - C26322 + C26323 - C26324) * C15950 +
            (C26325 - C26326 + C26327 - C26328) * C47471) *
               C47105 * C47261) *
              C1420 +
          (((C25706 - C25705 + C25708 - C25707) * C15949 +
            (C25710 - C25709 + C25712 - C25711) * C15945 +
            (C25713 - C25714 + C25715 - C25716) * C15950 +
            (C25717 - C25718 + C25719 - C25720) * C47471) *
               C47105 * C47422 +
           ((C26322 - C26321 + C26324 - C26323) * C15949 +
            (C26326 - C26325 + C26328 - C26327) * C15945 +
            (C26727 - C26728 + C26729 - C26730) * C15950 +
            (C26731 - C26732 + C26733 - C26734) * C47471) *
               C47105 * C47261) *
              C1421 +
          (((C25714 - C25713 + C25716 - C25715) * C15949 +
            (C25718 - C25717 + C25720 - C25719) * C15945 +
            (C26557 - C26558 + C26559 - C26560) * C15950 +
            (C26561 - C26562 + C26563 - C26564) * C47471) *
               C47105 * C47422 +
           ((C26728 - C26727 + C26730 - C26729) * C15949 +
            (C26732 - C26731 + C26734 - C26733) * C15945 +
            (C27197 - C27198 + C27199 - C27200) * C15950 +
            (C27201 - C27202 + C27203 - C27204) * C47471) *
               C47105 * C47261) *
              C1422 +
          (((C26558 - C26557 + C26560 - C26559) * C15949 +
            (C26562 - C26561 + C26564 - C26563) * C15945 +
            (C26565 - C26566 + C26567 - C26568) * C15950 +
            (C26569 - C26570 + C26571 - C26572) * C47471) *
               C47105 * C47422 +
           ((C27198 - C27197 + C27200 - C27199) * C15949 +
            (C27202 - C27201 + C27204 - C27203) * C15945 +
            (C10325 * C6413 - C10327 * C6411 + C47473 * C22245 -
             C10328 * C22244) *
                C15950 +
            (C10325 * C6417 - C10327 * C6414 + C47473 * C22247 -
             C10328 * C22246) *
                C47471) *
               C47105 * C47261) *
              C47463) *
         C47128) /
            (p * q * std::sqrt(p + q));
    d2ee[147] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C10325 * C122 - C10327 * C115 + C47473 * C491 - C10328 * C481) *
                C15949 +
            (C10325 * C136 - C10327 * C123 + C47473 * C511 - C10328 * C492) *
                C15945 +
            (C25705 - C25706 + C25707 - C25708) * C15950 +
            (C25709 - C25710 + C25711 - C25712) * C47471) *
               C47105 * C47174 * C47492 +
           ((C25706 - C25705 + C25708 - C25707) * C15949 +
            (C25710 - C25709 + C25712 - C25711) * C15945 +
            (C25713 - C25714 + C25715 - C25716) * C15950 +
            (C25717 - C25718 + C25719 - C25720) * C47471) *
               C47105 * C47174 * C47480 +
           ((C25714 - C25713 + C25716 - C25715) * C15949 +
            (C25718 - C25717 + C25720 - C25719) * C15945 +
            (C10325 * C1158 - C10327 * C1152 + C47473 * C1697 -
             C10328 * C1694) *
                C15950 +
            (C10325 * C1170 - C10327 * C1159 + C47473 * C1703 -
             C10328 * C1698) *
                C47471) *
               C47105 * C47174 * C47453) *
              C291 +
          (((C10331 - C10330 + C10333 - C10332) * C15949 +
            (C10335 - C10334 + C10337 - C10336) * C15945 +
            (C10508 - C10509 + C10510 - C10511) * C15950 +
            (C10512 - C10513 + C10514 - C10515) * C47471) *
               C47105 * C47174 * C47492 +
           ((C10509 - C10508 + C10511 - C10510) * C15949 +
            (C10513 - C10512 + C10515 - C10514) * C15945 +
            (C10516 - C10517 + C10518 - C10519) * C15950 +
            (C10520 - C10521 + C10522 - C10523) * C47471) *
               C47105 * C47174 * C47480 +
           ((C10517 - C10516 + C10519 - C10518) * C15949 +
            (C10521 - C10520 + C10523 - C10522) * C15945 +
            (C11708 - C11709 + C11710 - C11711) * C15950 +
            (C11712 - C11713 + C11714 - C11715) * C47471) *
               C47105 * C47174 * C47453) *
              C292 +
          (((C10339 - C10338 + C10341 - C10340) * C15949 +
            (C10343 - C10342 + C10345 - C10344) * C15945 +
            (C10524 - C10525 + C10526 - C10527) * C15950 +
            (C10528 - C10529 + C10530 - C10531) * C47471) *
               C47105 * C47174 * C47492 +
           ((C10525 - C10524 + C10527 - C10526) * C15949 +
            (C10529 - C10528 + C10531 - C10530) * C15945 +
            (C10532 - C10533 + C10534 - C10535) * C15950 +
            (C10536 - C10537 + C10538 - C10539) * C47471) *
               C47105 * C47174 * C47480 +
           ((C10533 - C10532 + C10535 - C10534) * C15949 +
            (C10537 - C10536 + C10539 - C10538) * C15945 +
            (C10325 * C1162 - C10327 * C1154 + C47473 * C1701 -
             C10328 * C1696) *
                C15950 +
            (C10325 * C1172 - C10327 * C1163 + C47473 * C1705 -
             C10328 * C1702) *
                C47471) *
               C47105 * C47174 * C47453) *
              C47447)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C10325 * C122 - C10327 * C115 + C47473 * C491 - C10328 * C481) *
               C15949 +
           (C10325 * C136 - C10327 * C123 + C47473 * C511 - C10328 * C492) *
               C15945 +
           (C10325 * C304 - C10327 * C294 + C47473 * C936 - C10328 * C931) *
               C15950 +
           (C10325 * C324 - C10327 * C305 + C47473 * C946 - C10328 * C937) *
               C47471) *
              C47105 * C47174 * C47156 * C108 +
          ((C10331 - C10330 + C10333 - C10332) * C15949 +
           (C10335 - C10334 + C10337 - C10336) * C15945 +
           (C10508 - C10509 + C10510 - C10511) * C15950 +
           (C10512 - C10513 + C10514 - C10515) * C47471) *
              C47105 * C47174 * C47156 * C109 +
          ((C10339 - C10338 + C10341 - C10340) * C15949 +
           (C10343 - C10342 + C10345 - C10344) * C15945 +
           (C10524 - C10525 + C10526 - C10527) * C15950 +
           (C10528 - C10529 + C10530 - C10531) * C47471) *
              C47105 * C47174 * C47156 * C110 +
          ((C10347 - C10346 + C10349 - C10348) * C15949 +
           (C10351 - C10350 + C10353 - C10352) * C15945 +
           (C10848 - C10849 + C10850 - C10851) * C15950 +
           (C10852 - C10853 + C10854 - C10855) * C47471) *
              C47105 * C47174 * C47156 * C111 +
          ((C10355 - C10354 + C10357 - C10356) * C15949 +
           (C10359 - C10358 + C10361 - C10360) * C15945 +
           (C10325 * C320 - C10327 * C302 + C47473 * C944 - C10328 * C935) *
               C15950 +
           (C10325 * C332 - C10327 * C321 + C47473 * C950 - C10328 * C945) *
               C47471) *
              C47105 * C47174 * C47156 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C10325 * C122 - C10327 * C115 + C47473 * C491 - C10328 * C481) *
                C15949 +
            (C10325 * C136 - C10327 * C123 + C47473 * C511 - C10328 * C492) *
                C15945 +
            (C25705 - C25706 + C25707 - C25708) * C15950 +
            (C25709 - C25710 + C25711 - C25712) * C47471) *
               C47105 * C47493 +
           ((C10327 * C481 - C10325 * C491 + C10328 * C484 - C47473 * C497) *
                C15949 +
            (C10327 * C492 - C10325 * C511 + C10328 * C498 - C47473 * C514) *
                C15945 +
            (C10327 * C931 - C10325 * C936 + C10328 * C1286 - C47473 * C1295) *
                C15950 +
            (C10327 * C937 - C10325 * C946 + C10328 * C1296 - C47473 * C1313) *
                C47471) *
               C47105 * C47482 +
           ((C10325 * C497 - C10327 * C484 + C47473 * C2002 - C10328 * C1996) *
                C15949 +
            (C10325 * C514 - C10327 * C498 + C47473 * C2014 - C10328 * C2003) *
                C15945 +
            (C10325 * C1295 - C10327 * C1286 + C47473 * C2393 -
             C10328 * C2390) *
                C15950 +
            (C10325 * C1313 - C10327 * C1296 + C47473 * C2399 -
             C10328 * C2394) *
                C47471) *
               C47105 * C47456) *
              C47156 * C291 +
          (((C10331 - C10330 + C10333 - C10332) * C15949 +
            (C10335 - C10334 + C10337 - C10336) * C15945 +
            (C10508 - C10509 + C10510 - C10511) * C15950 +
            (C10512 - C10513 + C10514 - C10515) * C47471) *
               C47105 * C47493 +
           ((C10687 - C10686 + C10689 - C10688) * C15949 +
            (C10691 - C10690 + C10693 - C10692) * C15945 +
            (C11188 - C11189 + C11190 - C11191) * C15950 +
            (C11192 - C11193 + C11194 - C11195) * C47471) *
               C47105 * C47482 +
           ((C10695 - C10694 + C10697 - C10696) * C15949 +
            (C10699 - C10698 + C10701 - C10700) * C15945 +
            (C12624 - C12625 + C12626 - C12627) * C15950 +
            (C12628 - C12629 + C12630 - C12631) * C47471) *
               C47105 * C47456) *
              C47156 * C292 +
          (((C10339 - C10338 + C10341 - C10340) * C15949 +
            (C10343 - C10342 + C10345 - C10344) * C15945 +
            (C10524 - C10525 + C10526 - C10527) * C15950 +
            (C10528 - C10529 + C10530 - C10531) * C47471) *
               C47105 * C47493 +
           ((C10703 - C10702 + C10705 - C10704) * C15949 +
            (C10707 - C10706 + C10709 - C10708) * C15945 +
            (C11196 - C11197 + C11198 - C11199) * C15950 +
            (C11200 - C11201 + C11202 - C11203) * C47471) *
               C47105 * C47482 +
           ((C10711 - C10710 + C10713 - C10712) * C15949 +
            (C10715 - C10714 + C10717 - C10716) * C15945 +
            (C10325 * C1299 - C10327 * C1288 + C47473 * C2397 -
             C10328 * C2392) *
                C15950 +
            (C10325 * C1315 - C10327 * C1300 + C47473 * C2401 -
             C10328 * C2398) *
                C47471) *
               C47105 * C47456) *
              C47156 * C47447)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C10325 * C122 - C10327 * C115 + C47473 * C491 - C10328 * C481) *
                C15949 +
            (C10325 * C136 - C10327 * C123 + C47473 * C511 - C10328 * C492) *
                C15945 +
            (C25705 - C25706 + C25707 - C25708) * C15950 +
            (C25709 - C25710 + C25711 - C25712) * C47471) *
               C47105 * C47174 * C1078 +
           ((C25706 - C25705 + C25708 - C25707) * C15949 +
            (C25710 - C25709 + C25712 - C25711) * C15945 +
            (C25713 - C25714 + C25715 - C25716) * C15950 +
            (C25717 - C25718 + C25719 - C25720) * C47471) *
               C47105 * C47174 * C1079 +
           ((C25714 - C25713 + C25716 - C25715) * C15949 +
            (C25718 - C25717 + C25720 - C25719) * C15945 +
            (C10325 * C1158 - C10327 * C1152 + C47473 * C1697 -
             C10328 * C1694) *
                C15950 +
            (C10325 * C1170 - C10327 * C1159 + C47473 * C1703 -
             C10328 * C1698) *
                C47471) *
               C47105 * C47174 * C47453) *
              C47489 +
          (((C10331 - C10330 + C10333 - C10332) * C15949 +
            (C10335 - C10334 + C10337 - C10336) * C15945 +
            (C10508 - C10509 + C10510 - C10511) * C15950 +
            (C10512 - C10513 + C10514 - C10515) * C47471) *
               C47105 * C47174 * C1078 +
           ((C10509 - C10508 + C10511 - C10510) * C15949 +
            (C10513 - C10512 + C10515 - C10514) * C15945 +
            (C10516 - C10517 + C10518 - C10519) * C15950 +
            (C10520 - C10521 + C10522 - C10523) * C47471) *
               C47105 * C47174 * C1079 +
           ((C10517 - C10516 + C10519 - C10518) * C15949 +
            (C10521 - C10520 + C10523 - C10522) * C15945 +
            (C11708 - C11709 + C11710 - C11711) * C15950 +
            (C11712 - C11713 + C11714 - C11715) * C47471) *
               C47105 * C47174 * C47453) *
              C47476 +
          (((C10339 - C10338 + C10341 - C10340) * C15949 +
            (C10343 - C10342 + C10345 - C10344) * C15945 +
            (C10524 - C10525 + C10526 - C10527) * C15950 +
            (C10528 - C10529 + C10530 - C10531) * C47471) *
               C47105 * C47174 * C1078 +
           ((C10525 - C10524 + C10527 - C10526) * C15949 +
            (C10529 - C10528 + C10531 - C10530) * C15945 +
            (C10532 - C10533 + C10534 - C10535) * C15950 +
            (C10536 - C10537 + C10538 - C10539) * C47471) *
               C47105 * C47174 * C1079 +
           ((C10533 - C10532 + C10535 - C10534) * C15949 +
            (C10537 - C10536 + C10539 - C10538) * C15945 +
            (C10325 * C1162 - C10327 * C1154 + C47473 * C1701 -
             C10328 * C1696) *
                C15950 +
            (C10325 * C1172 - C10327 * C1163 + C47473 * C1705 -
             C10328 * C1702) *
                C47471) *
               C47105 * C47174 * C47453) *
              C47447)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C10325 * C122 - C10327 * C115 + C47473 * C491 - C10328 * C481) *
               C15949 +
           (C10325 * C136 - C10327 * C123 + C47473 * C511 - C10328 * C492) *
               C15945 +
           (C25705 - C25706 + C25707 - C25708) * C15950 +
           (C25709 - C25710 + C25711 - C25712) * C47471) *
              C47105 * C47174 * C1146 +
          ((C25706 - C25705 + C25708 - C25707) * C15949 +
           (C25710 - C25709 + C25712 - C25711) * C15945 +
           (C25713 - C25714 + C25715 - C25716) * C15950 +
           (C25717 - C25718 + C25719 - C25720) * C47471) *
              C47105 * C47174 * C1147 +
          ((C25714 - C25713 + C25716 - C25715) * C15949 +
           (C25718 - C25717 + C25720 - C25719) * C15945 +
           (C26557 - C26558 + C26559 - C26560) * C15950 +
           (C26561 - C26562 + C26563 - C26564) * C47471) *
              C47105 * C47174 * C1148 +
          ((C26558 - C26557 + C26560 - C26559) * C15949 +
           (C26562 - C26561 + C26564 - C26563) * C15945 +
           (C26565 - C26566 + C26567 - C26568) * C15950 +
           (C26569 - C26570 + C26571 - C26572) * C47471) *
              C47105 * C47174 * C1149 +
          ((C26566 - C26565 + C26568 - C26567) * C15949 +
           (C26570 - C26569 + C26572 - C26571) * C15945 +
           (C10325 * C5757 - C10327 * C5755 + C47473 * C22599 -
            C10328 * C22598) *
               C15950 +
           (C10325 * C5761 - C10327 * C5758 + C47473 * C22601 -
            C10328 * C22600) *
               C47471) *
              C47105 * C47174 * C1150) *
         C47128) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C10325 * C122 - C10327 * C115 + C47473 * C491 - C10328 * C481) *
                C15949 +
            (C10325 * C136 - C10327 * C123 + C47473 * C511 - C10328 * C492) *
                C15945 +
            (C25705 - C25706 + C25707 - C25708) * C15950 +
            (C25709 - C25710 + C25711 - C25712) * C47471) *
               C47105 * C47493 +
           ((C10327 * C481 - C10325 * C491 + C10328 * C484 - C47473 * C497) *
                C15949 +
            (C10327 * C492 - C10325 * C511 + C10328 * C498 - C47473 * C514) *
                C15945 +
            (C26321 - C26322 + C26323 - C26324) * C15950 +
            (C26325 - C26326 + C26327 - C26328) * C47471) *
               C47105 * C47482 +
           ((C10325 * C497 - C10327 * C484 + C47473 * C2002 - C10328 * C1996) *
                C15949 +
            (C10325 * C514 - C10327 * C498 + C47473 * C2014 - C10328 * C2003) *
                C15945 +
            (C26719 - C26720 + C26721 - C26722) * C15950 +
            (C26723 - C26724 + C26725 - C26726) * C47471) *
               C47105 * C47456) *
              C1078 +
          (((C25706 - C25705 + C25708 - C25707) * C15949 +
            (C25710 - C25709 + C25712 - C25711) * C15945 +
            (C25713 - C25714 + C25715 - C25716) * C15950 +
            (C25717 - C25718 + C25719 - C25720) * C47471) *
               C47105 * C47493 +
           ((C26322 - C26321 + C26324 - C26323) * C15949 +
            (C26326 - C26325 + C26328 - C26327) * C15945 +
            (C26727 - C26728 + C26729 - C26730) * C15950 +
            (C26731 - C26732 + C26733 - C26734) * C47471) *
               C47105 * C47482 +
           ((C26720 - C26719 + C26722 - C26721) * C15949 +
            (C26724 - C26723 + C26726 - C26725) * C15945 +
            (C26735 - C26736 + C26737 - C26738) * C15950 +
            (C26739 - C26740 + C26741 - C26742) * C47471) *
               C47105 * C47456) *
              C1079 +
          (((C25714 - C25713 + C25716 - C25715) * C15949 +
            (C25718 - C25717 + C25720 - C25719) * C15945 +
            (C26557 - C26558 + C26559 - C26560) * C15950 +
            (C26561 - C26562 + C26563 - C26564) * C47471) *
               C47105 * C47493 +
           ((C26728 - C26727 + C26730 - C26729) * C15949 +
            (C26732 - C26731 + C26734 - C26733) * C15945 +
            (C10327 * C1694 - C10325 * C1697 + C10328 * C5921 -
             C47473 * C5923) *
                C15950 +
            (C10327 * C1698 - C10325 * C1703 + C10328 * C5924 -
             C47473 * C5927) *
                C47471) *
               C47105 * C47482 +
           ((C26736 - C26735 + C26738 - C26737) * C15949 +
            (C26740 - C26739 + C26742 - C26741) * C15945 +
            (C10325 * C5923 - C10327 * C5921 + C47473 * C23237 -
             C10328 * C23236) *
                C15950 +
            (C10325 * C5927 - C10327 * C5924 + C47473 * C23239 -
             C10328 * C23238) *
                C47471) *
               C47105 * C47456) *
              C47453) *
         C47128) /
            (p * q * std::sqrt(p + q));
    d2ee[148] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C10325 * C122 - C10327 * C115 + C47473 * C491 - C10328 * C481) *
                C15949 +
            (C10325 * C136 - C10327 * C123 + C47473 * C511 - C10328 * C492) *
                C15945 +
            (C25705 - C25706 + C25707 - C25708) * C15950 +
            (C25709 - C25710 + C25711 - C25712) * C47471) *
               C47105 * C47422 +
           ((C10327 * C481 - C10325 * C491 + C10328 * C484 - C47473 * C497) *
                C15949 +
            (C10327 * C492 - C10325 * C511 + C10328 * C498 - C47473 * C514) *
                C15945 +
            (C10327 * C931 - C10325 * C936 + C10328 * C1286 - C47473 * C1295) *
                C15950 +
            (C10327 * C937 - C10325 * C946 + C10328 * C1296 - C47473 * C1313) *
                C47471) *
               C47105 * C47261) *
              C47156 * C655 +
          (((C10331 - C10330 + C10333 - C10332) * C15949 +
            (C10335 - C10334 + C10337 - C10336) * C15945 +
            (C10508 - C10509 + C10510 - C10511) * C15950 +
            (C10512 - C10513 + C10514 - C10515) * C47471) *
               C47105 * C47422 +
           ((C10687 - C10686 + C10689 - C10688) * C15949 +
            (C10691 - C10690 + C10693 - C10692) * C15945 +
            (C11188 - C11189 + C11190 - C11191) * C15950 +
            (C11192 - C11193 + C11194 - C11195) * C47471) *
               C47105 * C47261) *
              C47156 * C656 +
          (((C10339 - C10338 + C10341 - C10340) * C15949 +
            (C10343 - C10342 + C10345 - C10344) * C15945 +
            (C10524 - C10525 + C10526 - C10527) * C15950 +
            (C10528 - C10529 + C10530 - C10531) * C47471) *
               C47105 * C47422 +
           ((C10703 - C10702 + C10705 - C10704) * C15949 +
            (C10707 - C10706 + C10709 - C10708) * C15945 +
            (C11196 - C11197 + C11198 - C11199) * C15950 +
            (C11200 - C11201 + C11202 - C11203) * C47471) *
               C47105 * C47261) *
              C47156 * C657 +
          (((C10347 - C10346 + C10349 - C10348) * C15949 +
            (C10351 - C10350 + C10353 - C10352) * C15945 +
            (C10848 - C10849 + C10850 - C10851) * C15950 +
            (C10852 - C10853 + C10854 - C10855) * C47471) *
               C47105 * C47422 +
           ((C10987 - C10986 + C10989 - C10988) * C15949 +
            (C10991 - C10990 + C10993 - C10992) * C15945 +
            (C10325 * C942 - C10327 * C934 + C47473 * C2167 - C10328 * C2166) *
                C15950 +
            (C10325 * C949 - C10327 * C943 + C47473 * C2169 - C10328 * C2168) *
                C47471) *
               C47105 * C47261) *
              C47156 * C47457)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C10325 * C122 - C10327 * C115 + C47473 * C491 - C10328 * C481) *
                 C15949 +
             (C10325 * C136 - C10327 * C123 + C47473 * C511 - C10328 * C492) *
                 C15945 +
             (C25705 - C25706 + C25707 - C25708) * C15950 +
             (C25709 - C25710 + C25711 - C25712) * C47471) *
                C47105 * C47422 +
            ((C10327 * C481 - C10325 * C491 + C10328 * C484 - C47473 * C497) *
                 C15949 +
             (C10327 * C492 - C10325 * C511 + C10328 * C498 - C47473 * C514) *
                 C15945 +
             (C26321 - C26322 + C26323 - C26324) * C15950 +
             (C26325 - C26326 + C26327 - C26328) * C47471) *
                C47105 * C47261) *
               C1078 +
           (((C25706 - C25705 + C25708 - C25707) * C15949 +
             (C25710 - C25709 + C25712 - C25711) * C15945 +
             (C25713 - C25714 + C25715 - C25716) * C15950 +
             (C25717 - C25718 + C25719 - C25720) * C47471) *
                C47105 * C47422 +
            ((C26322 - C26321 + C26324 - C26323) * C15949 +
             (C26326 - C26325 + C26328 - C26327) * C15945 +
             (C26727 - C26728 + C26729 - C26730) * C15950 +
             (C26731 - C26732 + C26733 - C26734) * C47471) *
                C47105 * C47261) *
               C1079 +
           (((C25714 - C25713 + C25716 - C25715) * C15949 +
             (C25718 - C25717 + C25720 - C25719) * C15945 +
             (C26557 - C26558 + C26559 - C26560) * C15950 +
             (C26561 - C26562 + C26563 - C26564) * C47471) *
                C47105 * C47422 +
            ((C26728 - C26727 + C26730 - C26729) * C15949 +
             (C26732 - C26731 + C26734 - C26733) * C15945 +
             (C10327 * C1694 - C10325 * C1697 + C10328 * C5921 -
              C47473 * C5923) *
                 C15950 +
             (C10327 * C1698 - C10325 * C1703 + C10328 * C5924 -
              C47473 * C5927) *
                 C47471) *
                C47105 * C47261) *
               C47453) *
              C47407 +
          ((((C10331 - C10330 + C10333 - C10332) * C15949 +
             (C10335 - C10334 + C10337 - C10336) * C15945 +
             (C10508 - C10509 + C10510 - C10511) * C15950 +
             (C10512 - C10513 + C10514 - C10515) * C47471) *
                C47105 * C47422 +
            ((C10687 - C10686 + C10689 - C10688) * C15949 +
             (C10691 - C10690 + C10693 - C10692) * C15945 +
             (C11188 - C11189 + C11190 - C11191) * C15950 +
             (C11192 - C11193 + C11194 - C11195) * C47471) *
                C47105 * C47261) *
               C1078 +
           (((C10509 - C10508 + C10511 - C10510) * C15949 +
             (C10513 - C10512 + C10515 - C10514) * C15945 +
             (C10516 - C10517 + C10518 - C10519) * C15950 +
             (C10520 - C10521 + C10522 - C10523) * C47471) *
                C47105 * C47422 +
            ((C11189 - C11188 + C11191 - C11190) * C15949 +
             (C11193 - C11192 + C11195 - C11194) * C15945 +
             (C11910 - C11911 + C11912 - C11913) * C15950 +
             (C11914 - C11915 + C11916 - C11917) * C47471) *
                C47105 * C47261) *
               C1079 +
           (((C10517 - C10516 + C10519 - C10518) * C15949 +
             (C10521 - C10520 + C10523 - C10522) * C15945 +
             (C11708 - C11709 + C11710 - C11711) * C15950 +
             (C11712 - C11713 + C11714 - C11715) * C47471) *
                C47105 * C47422 +
            ((C11911 - C11910 + C11913 - C11912) * C15949 +
             (C11915 - C11914 + C11917 - C11916) * C15945 +
             (C10325 * C1699 - C10327 * C1695 + C47473 * C5925 -
              C10328 * C5922) *
                 C15950 +
             (C10325 * C1704 - C10327 * C1700 + C47473 * C5928 -
              C10328 * C5926) *
                 C47471) *
                C47105 * C47261) *
               C47453) *
              C47139)) /
            (p * q * std::sqrt(p + q));
    d2ee[149] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C10325 * C122 - C10327 * C115 + C47473 * C491 - C10328 * C481) *
               C15949 +
           (C10325 * C136 - C10327 * C123 + C47473 * C511 - C10328 * C492) *
               C15945 +
           (C10325 * C304 - C10327 * C294 + C47473 * C936 - C10328 * C931) *
               C15950 +
           (C10325 * C324 - C10327 * C305 + C47473 * C946 - C10328 * C937) *
               C47471) *
              C47105 * C47174 * C47156 * C108 +
          ((C10331 - C10330 + C10333 - C10332) * C15949 +
           (C10335 - C10334 + C10337 - C10336) * C15945 +
           (C10508 - C10509 + C10510 - C10511) * C15950 +
           (C10512 - C10513 + C10514 - C10515) * C47471) *
              C47105 * C47174 * C47156 * C109 +
          ((C10339 - C10338 + C10341 - C10340) * C15949 +
           (C10343 - C10342 + C10345 - C10344) * C15945 +
           (C10524 - C10525 + C10526 - C10527) * C15950 +
           (C10528 - C10529 + C10530 - C10531) * C47471) *
              C47105 * C47174 * C47156 * C110 +
          ((C10347 - C10346 + C10349 - C10348) * C15949 +
           (C10351 - C10350 + C10353 - C10352) * C15945 +
           (C10848 - C10849 + C10850 - C10851) * C15950 +
           (C10852 - C10853 + C10854 - C10855) * C47471) *
              C47105 * C47174 * C47156 * C111 +
          ((C10355 - C10354 + C10357 - C10356) * C15949 +
           (C10359 - C10358 + C10361 - C10360) * C15945 +
           (C10325 * C320 - C10327 * C302 + C47473 * C944 - C10328 * C935) *
               C15950 +
           (C10325 * C332 - C10327 * C321 + C47473 * C950 - C10328 * C945) *
               C47471) *
              C47105 * C47174 * C47156 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C10325 * C122 - C10327 * C115 + C47473 * C491 - C10328 * C481) *
                C15949 +
            (C10325 * C136 - C10327 * C123 + C47473 * C511 - C10328 * C492) *
                C15945 +
            (C25705 - C25706 + C25707 - C25708) * C15950 +
            (C25709 - C25710 + C25711 - C25712) * C47471) *
               C47105 * C47174 * C47492 +
           ((C25706 - C25705 + C25708 - C25707) * C15949 +
            (C25710 - C25709 + C25712 - C25711) * C15945 +
            (C25713 - C25714 + C25715 - C25716) * C15950 +
            (C25717 - C25718 + C25719 - C25720) * C47471) *
               C47105 * C47174 * C47480 +
           ((C25714 - C25713 + C25716 - C25715) * C15949 +
            (C25718 - C25717 + C25720 - C25719) * C15945 +
            (C10325 * C1158 - C10327 * C1152 + C47473 * C1697 -
             C10328 * C1694) *
                C15950 +
            (C10325 * C1170 - C10327 * C1159 + C47473 * C1703 -
             C10328 * C1698) *
                C47471) *
               C47105 * C47174 * C47453) *
              C291 +
          (((C10331 - C10330 + C10333 - C10332) * C15949 +
            (C10335 - C10334 + C10337 - C10336) * C15945 +
            (C10508 - C10509 + C10510 - C10511) * C15950 +
            (C10512 - C10513 + C10514 - C10515) * C47471) *
               C47105 * C47174 * C47492 +
           ((C10509 - C10508 + C10511 - C10510) * C15949 +
            (C10513 - C10512 + C10515 - C10514) * C15945 +
            (C10516 - C10517 + C10518 - C10519) * C15950 +
            (C10520 - C10521 + C10522 - C10523) * C47471) *
               C47105 * C47174 * C47480 +
           ((C10517 - C10516 + C10519 - C10518) * C15949 +
            (C10521 - C10520 + C10523 - C10522) * C15945 +
            (C11708 - C11709 + C11710 - C11711) * C15950 +
            (C11712 - C11713 + C11714 - C11715) * C47471) *
               C47105 * C47174 * C47453) *
              C292 +
          (((C10339 - C10338 + C10341 - C10340) * C15949 +
            (C10343 - C10342 + C10345 - C10344) * C15945 +
            (C10524 - C10525 + C10526 - C10527) * C15950 +
            (C10528 - C10529 + C10530 - C10531) * C47471) *
               C47105 * C47174 * C47492 +
           ((C10525 - C10524 + C10527 - C10526) * C15949 +
            (C10529 - C10528 + C10531 - C10530) * C15945 +
            (C10532 - C10533 + C10534 - C10535) * C15950 +
            (C10536 - C10537 + C10538 - C10539) * C47471) *
               C47105 * C47174 * C47480 +
           ((C10533 - C10532 + C10535 - C10534) * C15949 +
            (C10537 - C10536 + C10539 - C10538) * C15945 +
            (C10325 * C1162 - C10327 * C1154 + C47473 * C1701 -
             C10328 * C1696) *
                C15950 +
            (C10325 * C1172 - C10327 * C1163 + C47473 * C1705 -
             C10328 * C1702) *
                C47471) *
               C47105 * C47174 * C47453) *
              C47447)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C10325 * C122 - C10327 * C115 + C47473 * C491 - C10328 * C481) *
                C15949 +
            (C10325 * C136 - C10327 * C123 + C47473 * C511 - C10328 * C492) *
                C15945 +
            (C25705 - C25706 + C25707 - C25708) * C15950 +
            (C25709 - C25710 + C25711 - C25712) * C47471) *
               C47105 * C47174 * C1078 +
           ((C25706 - C25705 + C25708 - C25707) * C15949 +
            (C25710 - C25709 + C25712 - C25711) * C15945 +
            (C25713 - C25714 + C25715 - C25716) * C15950 +
            (C25717 - C25718 + C25719 - C25720) * C47471) *
               C47105 * C47174 * C1079 +
           ((C25714 - C25713 + C25716 - C25715) * C15949 +
            (C25718 - C25717 + C25720 - C25719) * C15945 +
            (C10325 * C1158 - C10327 * C1152 + C47473 * C1697 -
             C10328 * C1694) *
                C15950 +
            (C10325 * C1170 - C10327 * C1159 + C47473 * C1703 -
             C10328 * C1698) *
                C47471) *
               C47105 * C47174 * C47453) *
              C47489 +
          (((C10331 - C10330 + C10333 - C10332) * C15949 +
            (C10335 - C10334 + C10337 - C10336) * C15945 +
            (C10508 - C10509 + C10510 - C10511) * C15950 +
            (C10512 - C10513 + C10514 - C10515) * C47471) *
               C47105 * C47174 * C1078 +
           ((C10509 - C10508 + C10511 - C10510) * C15949 +
            (C10513 - C10512 + C10515 - C10514) * C15945 +
            (C10516 - C10517 + C10518 - C10519) * C15950 +
            (C10520 - C10521 + C10522 - C10523) * C47471) *
               C47105 * C47174 * C1079 +
           ((C10517 - C10516 + C10519 - C10518) * C15949 +
            (C10521 - C10520 + C10523 - C10522) * C15945 +
            (C11708 - C11709 + C11710 - C11711) * C15950 +
            (C11712 - C11713 + C11714 - C11715) * C47471) *
               C47105 * C47174 * C47453) *
              C47476 +
          (((C10339 - C10338 + C10341 - C10340) * C15949 +
            (C10343 - C10342 + C10345 - C10344) * C15945 +
            (C10524 - C10525 + C10526 - C10527) * C15950 +
            (C10528 - C10529 + C10530 - C10531) * C47471) *
               C47105 * C47174 * C1078 +
           ((C10525 - C10524 + C10527 - C10526) * C15949 +
            (C10529 - C10528 + C10531 - C10530) * C15945 +
            (C10532 - C10533 + C10534 - C10535) * C15950 +
            (C10536 - C10537 + C10538 - C10539) * C47471) *
               C47105 * C47174 * C1079 +
           ((C10533 - C10532 + C10535 - C10534) * C15949 +
            (C10537 - C10536 + C10539 - C10538) * C15945 +
            (C10325 * C1162 - C10327 * C1154 + C47473 * C1701 -
             C10328 * C1696) *
                C15950 +
            (C10325 * C1172 - C10327 * C1163 + C47473 * C1705 -
             C10328 * C1702) *
                C47471) *
               C47105 * C47174 * C47453) *
              C47447)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C10325 * C122 - C10327 * C115 + C47473 * C491 - C10328 * C481) *
               C15949 +
           (C10325 * C136 - C10327 * C123 + C47473 * C511 - C10328 * C492) *
               C15945 +
           (C25705 - C25706 + C25707 - C25708) * C15950 +
           (C25709 - C25710 + C25711 - C25712) * C47471) *
              C47105 * C47174 * C1146 +
          ((C25706 - C25705 + C25708 - C25707) * C15949 +
           (C25710 - C25709 + C25712 - C25711) * C15945 +
           (C25713 - C25714 + C25715 - C25716) * C15950 +
           (C25717 - C25718 + C25719 - C25720) * C47471) *
              C47105 * C47174 * C1147 +
          ((C25714 - C25713 + C25716 - C25715) * C15949 +
           (C25718 - C25717 + C25720 - C25719) * C15945 +
           (C26557 - C26558 + C26559 - C26560) * C15950 +
           (C26561 - C26562 + C26563 - C26564) * C47471) *
              C47105 * C47174 * C1148 +
          ((C26558 - C26557 + C26560 - C26559) * C15949 +
           (C26562 - C26561 + C26564 - C26563) * C15945 +
           (C26565 - C26566 + C26567 - C26568) * C15950 +
           (C26569 - C26570 + C26571 - C26572) * C47471) *
              C47105 * C47174 * C1149 +
          ((C26566 - C26565 + C26568 - C26567) * C15949 +
           (C26570 - C26569 + C26572 - C26571) * C15945 +
           (C10325 * C5757 - C10327 * C5755 + C47473 * C22599 -
            C10328 * C22598) *
               C15950 +
           (C10325 * C5761 - C10327 * C5758 + C47473 * C22601 -
            C10328 * C22600) *
               C47471) *
              C47105 * C47174 * C1150) *
         C47128) /
            (p * q * std::sqrt(p + q));
    d2ee[150] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C31090 * C122 - C31092 * C115 + C47473 * C491 - C31093 * C481) *
                 C114 +
             (C31090 * C136 - C31092 * C123 + C47473 * C511 - C31093 * C492) *
                 C47359) *
                C15947 +
            ((C31095 - C31096 + C31097 - C31098) * C114 +
             (C31099 - C31100 + C31101 - C31102) * C47359) *
                C47440) *
               C47174 * C47215 +
           (((C31092 * C294 - C31090 * C304 + C31093 * C931 - C47473 * C936) *
                 C114 +
             (C31092 * C305 - C31090 * C324 + C31093 * C937 - C47473 * C946) *
                 C47359) *
                C15947 +
            ((C31273 - C31274 + C31275 - C31276) * C114 +
             (C31277 - C31278 + C31279 - C31280) * C47359) *
                C47440) *
               C47174 * C47222 +
           (((C31090 * C310 - C31092 * C297 + C47473 * C1301 - C31093 * C1289) *
                 C114 +
             (C31090 * C327 - C31092 * C311 + C47473 * C1316 - C31093 * C1302) *
                 C47359) *
                C15947 +
            ((C31281 - C31282 + C31283 - C31284) * C114 +
             (C31285 - C31286 + C31287 - C31288) * C47359) *
                C47440) *
               C47174 * C2868) *
              C47133 +
          ((((C31096 - C31095 + C31098 - C31097) * C114 +
             (C31100 - C31099 + C31102 - C31101) * C47359) *
                C15947 +
            ((C31103 - C31104 + C31105 - C31106) * C114 +
             (C31107 - C31108 + C31109 - C31110) * C47359) *
                C47440) *
               C47174 * C47215 +
           (((C31274 - C31273 + C31276 - C31275) * C114 +
             (C31278 - C31277 + C31280 - C31279) * C47359) *
                C15947 +
            ((C31289 - C31290 + C31291 - C31292) * C114 +
             (C31293 - C31294 + C31295 - C31296) * C47359) *
                C47440) *
               C47174 * C47222 +
           (((C31282 - C31281 + C31284 - C31283) * C114 +
             (C31286 - C31285 + C31288 - C31287) * C47359) *
                C15947 +
            ((C31297 - C31298 + C31299 - C31300) * C114 +
             (C31301 - C31302 + C31303 - C31304) * C47359) *
                C47440) *
               C47174 * C2868) *
              C47142 +
          ((((C31104 - C31103 + C31106 - C31105) * C114 +
             (C31108 - C31107 + C31110 - C31109) * C47359) *
                C15947 +
            ((C31111 - C31112 + C31113 - C31114) * C114 +
             (C31115 - C31116 + C31117 - C31118) * C47359) *
                C47440) *
               C47174 * C47215 +
           (((C31290 - C31289 + C31292 - C31291) * C114 +
             (C31294 - C31293 + C31296 - C31295) * C47359) *
                C15947 +
            ((C31613 - C31614 + C31615 - C31616) * C114 +
             (C31617 - C31618 + C31619 - C31620) * C47359) *
                C47440) *
               C47174 * C47222 +
           (((C31298 - C31297 + C31300 - C31299) * C114 +
             (C31302 - C31301 + C31304 - C31303) * C47359) *
                C15947 +
            ((C31090 * C318 - C31092 * C301 + C47473 * C1585 - C31093 * C1584) *
                 C114 +
             (C31090 * C331 - C31092 * C319 + C47473 * C1587 - C31093 * C1586) *
                 C47359) *
                C47440) *
               C47174 * C2868) *
              C2871)) /
        (p * q * std::sqrt(p + q));
    d2ee[151] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C31090 * C122 - C31092 * C115 + C47473 * C491 - C31093 * C481) *
                  C114 +
              (C31090 * C136 - C31092 * C123 + C47473 * C511 - C31093 * C492) *
                  C47359) *
                 C15947 +
             ((C31095 - C31096 + C31097 - C31098) * C114 +
              (C31099 - C31100 + C31101 - C31102) * C47359) *
                 C47440) *
                C47422 +
            (((C31092 * C481 - C31090 * C491 + C31093 * C484 - C47473 * C497) *
                  C114 +
              (C31092 * C492 - C31090 * C511 + C31093 * C498 - C47473 * C514) *
                  C47359) *
                 C15947 +
             ((C31451 - C31452 + C31453 - C31454) * C114 +
              (C31455 - C31456 + C31457 - C31458) * C47359) *
                 C47440) *
                C47261) *
               C47215 +
           ((((C31092 * C294 - C31090 * C304 + C31093 * C931 - C47473 * C936) *
                  C114 +
              (C31092 * C305 - C31090 * C324 + C31093 * C937 - C47473 * C946) *
                  C47359) *
                 C15947 +
             ((C31273 - C31274 + C31275 - C31276) * C114 +
              (C31277 - C31278 + C31279 - C31280) * C47359) *
                 C47440) *
                C47422 +
            (((C31090 * C936 - C31092 * C931 + C47473 * C1295 -
               C31093 * C1286) *
                  C114 +
              (C31090 * C946 - C31092 * C937 + C47473 * C1313 -
               C31093 * C1296) *
                  C47359) *
                 C15947 +
             ((C31953 - C31954 + C31955 - C31956) * C114 +
              (C31957 - C31958 + C31959 - C31960) * C47359) *
                 C47440) *
                C47261) *
               C47222 +
           ((((C31090 * C310 - C31092 * C297 + C47473 * C1301 -
               C31093 * C1289) *
                  C114 +
              (C31090 * C327 - C31092 * C311 + C47473 * C1316 -
               C31093 * C1302) *
                  C47359) *
                 C15947 +
             ((C31281 - C31282 + C31283 - C31284) * C114 +
              (C31285 - C31286 + C31287 - C31288) * C47359) *
                 C47440) *
                C47422 +
            (((C31092 * C1289 - C31090 * C1301 + C31093 * C1292 -
               C47473 * C1307) *
                  C114 +
              (C31092 * C1302 - C31090 * C1316 + C31093 * C1308 -
               C47473 * C1319) *
                  C47359) *
                 C15947 +
             ((C32675 - C32676 + C32677 - C32678) * C114 +
              (C32679 - C32680 + C32681 - C32682) * C47359) *
                 C47440) *
                C47261) *
               C2868) *
              C2608 +
          (((((C31096 - C31095 + C31098 - C31097) * C114 +
              (C31100 - C31099 + C31102 - C31101) * C47359) *
                 C15947 +
             ((C31103 - C31104 + C31105 - C31106) * C114 +
              (C31107 - C31108 + C31109 - C31110) * C47359) *
                 C47440) *
                C47422 +
            (((C31452 - C31451 + C31454 - C31453) * C114 +
              (C31456 - C31455 + C31458 - C31457) * C47359) *
                 C15947 +
             ((C31467 - C31468 + C31469 - C31470) * C114 +
              (C31471 - C31472 + C31473 - C31474) * C47359) *
                 C47440) *
                C47261) *
               C47215 +
           ((((C31274 - C31273 + C31276 - C31275) * C114 +
              (C31278 - C31277 + C31280 - C31279) * C47359) *
                 C15947 +
             ((C31289 - C31290 + C31291 - C31292) * C114 +
              (C31293 - C31294 + C31295 - C31296) * C47359) *
                 C47440) *
                C47422 +
            (((C31954 - C31953 + C31956 - C31955) * C114 +
              (C31958 - C31957 + C31960 - C31959) * C47359) *
                 C15947 +
             ((C31961 - C31962 + C31963 - C31964) * C114 +
              (C31965 - C31966 + C31967 - C31968) * C47359) *
                 C47440) *
                C47261) *
               C47222 +
           ((((C31282 - C31281 + C31284 - C31283) * C114 +
              (C31286 - C31285 + C31288 - C31287) * C47359) *
                 C15947 +
             ((C31297 - C31298 + C31299 - C31300) * C114 +
              (C31301 - C31302 + C31303 - C31304) * C47359) *
                 C47440) *
                C47422 +
            (((C32676 - C32675 + C32678 - C32677) * C114 +
              (C32680 - C32679 + C32682 - C32681) * C47359) *
                 C15947 +
             ((C31090 * C1305 - C31092 * C1291 + C47473 * C1311 -
               C31093 * C1294) *
                  C114 +
              (C31090 * C1318 - C31092 * C1306 + C47473 * C1321 -
               C31093 * C1312) *
                  C47359) *
                 C47440) *
                C47261) *
               C2868) *
              C47139)) /
        (p * q * std::sqrt(p + q));
    d2ee[152] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C31090 * C122 - C31092 * C115 + C47473 * C491 - C31093 * C481) *
                 C114 +
             (C31090 * C136 - C31092 * C123 + C47473 * C511 - C31093 * C492) *
                 C47359) *
                C15947 +
            ((C31095 - C31096 + C31097 - C31098) * C114 +
             (C31099 - C31100 + C31101 - C31102) * C47359) *
                C47440) *
               C47174 * C47499 +
           (((C31092 * C294 - C31090 * C304 + C31093 * C931 - C47473 * C936) *
                 C114 +
             (C31092 * C305 - C31090 * C324 + C31093 * C937 - C47473 * C946) *
                 C47359) *
                C15947 +
            ((C31273 - C31274 + C31275 - C31276) * C114 +
             (C31277 - C31278 + C31279 - C31280) * C47359) *
                C47440) *
               C47174 * C47495 +
           (((C31090 * C310 - C31092 * C297 + C47473 * C1301 - C31093 * C1289) *
                 C114 +
             (C31090 * C327 - C31092 * C311 + C47473 * C1316 - C31093 * C1302) *
                 C47359) *
                C15947 +
            ((C31281 - C31282 + C31283 - C31284) * C114 +
             (C31285 - C31286 + C31287 - C31288) * C47359) *
                C47440) *
               C47174 * C47485 +
           (((C31092 * C1152 - C31090 * C1158 + C31093 * C1694 -
              C47473 * C1697) *
                 C114 +
             (C31092 * C1159 - C31090 * C1170 + C31093 * C1698 -
              C47473 * C1703) *
                 C47359) *
                C15947 +
            ((C32473 - C32474 + C32475 - C32476) * C114 +
             (C32477 - C32478 + C32479 - C32480) * C47359) *
                C47440) *
               C47174 * C47463) *
              C2608 +
          ((((C31096 - C31095 + C31098 - C31097) * C114 +
             (C31100 - C31099 + C31102 - C31101) * C47359) *
                C15947 +
            ((C31103 - C31104 + C31105 - C31106) * C114 +
             (C31107 - C31108 + C31109 - C31110) * C47359) *
                C47440) *
               C47174 * C47499 +
           (((C31274 - C31273 + C31276 - C31275) * C114 +
             (C31278 - C31277 + C31280 - C31279) * C47359) *
                C15947 +
            ((C31289 - C31290 + C31291 - C31292) * C114 +
             (C31293 - C31294 + C31295 - C31296) * C47359) *
                C47440) *
               C47174 * C47495 +
           (((C31282 - C31281 + C31284 - C31283) * C114 +
             (C31286 - C31285 + C31288 - C31287) * C47359) *
                C15947 +
            ((C31297 - C31298 + C31299 - C31300) * C114 +
             (C31301 - C31302 + C31303 - C31304) * C47359) *
                C47440) *
               C47174 * C47485 +
           (((C32474 - C32473 + C32476 - C32475) * C114 +
             (C32478 - C32477 + C32480 - C32479) * C47359) *
                C15947 +
            ((C31090 * C1162 - C31092 * C1154 + C47473 * C1701 -
              C31093 * C1696) *
                 C114 +
             (C31090 * C1172 - C31092 * C1163 + C47473 * C1705 -
              C31093 * C1702) *
                 C47359) *
                C47440) *
               C47174 * C47463) *
              C47139)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C31090 * C122 - C31092 * C115 + C47473 * C491 - C31093 * C481) *
                 C114 +
             (C31090 * C136 - C31092 * C123 + C47473 * C511 - C31093 * C492) *
                 C47359) *
                C15947 +
            ((C31095 - C31096 + C31097 - C31098) * C114 +
             (C31099 - C31100 + C31101 - C31102) * C47359) *
                C47440) *
               C47174 * C2500 +
           (((C31092 * C294 - C31090 * C304 + C31093 * C931 - C47473 * C936) *
                 C114 +
             (C31092 * C305 - C31090 * C324 + C31093 * C937 - C47473 * C946) *
                 C47359) *
                C15947 +
            ((C31273 - C31274 + C31275 - C31276) * C114 +
             (C31277 - C31278 + C31279 - C31280) * C47359) *
                C47440) *
               C47174 * C47219) *
              C47498 +
          ((((C31096 - C31095 + C31098 - C31097) * C114 +
             (C31100 - C31099 + C31102 - C31101) * C47359) *
                C15947 +
            ((C31103 - C31104 + C31105 - C31106) * C114 +
             (C31107 - C31108 + C31109 - C31110) * C47359) *
                C47440) *
               C47174 * C2500 +
           (((C31274 - C31273 + C31276 - C31275) * C114 +
             (C31278 - C31277 + C31280 - C31279) * C47359) *
                C15947 +
            ((C31289 - C31290 + C31291 - C31292) * C114 +
             (C31293 - C31294 + C31295 - C31296) * C47359) *
                C47440) *
               C47174 * C47219) *
              C47491 +
          ((((C31104 - C31103 + C31106 - C31105) * C114 +
             (C31108 - C31107 + C31110 - C31109) * C47359) *
                C15947 +
            ((C31111 - C31112 + C31113 - C31114) * C114 +
             (C31115 - C31116 + C31117 - C31118) * C47359) *
                C47440) *
               C47174 * C2500 +
           (((C31290 - C31289 + C31292 - C31291) * C114 +
             (C31294 - C31293 + C31296 - C31295) * C47359) *
                C15947 +
            ((C31613 - C31614 + C31615 - C31616) * C114 +
             (C31617 - C31618 + C31619 - C31620) * C47359) *
                C47440) *
               C47174 * C47219) *
              C47478 +
          ((((C31112 - C31111 + C31114 - C31113) * C114 +
             (C31116 - C31115 + C31118 - C31117) * C47359) *
                C15947 +
            ((C31119 - C31120 + C31121 - C31122) * C114 +
             (C31123 - C31124 + C31125 - C31126) * C47359) *
                C47440) *
               C47174 * C2500 +
           (((C31614 - C31613 + C31616 - C31615) * C114 +
             (C31618 - C31617 + C31620 - C31619) * C47359) *
                C15947 +
            ((C31090 * C320 - C31092 * C302 + C47473 * C944 - C31093 * C935) *
                 C114 +
             (C31090 * C332 - C31092 * C321 + C47473 * C950 - C31093 * C945) *
                 C47359) *
                C47440) *
               C47174 * C47219) *
              C47457)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C31090 * C122 - C31092 * C115 + C47473 * C491 - C31093 * C481) *
                  C114 +
              (C31090 * C136 - C31092 * C123 + C47473 * C511 - C31093 * C492) *
                  C47359) *
                 C15947 +
             ((C31095 - C31096 + C31097 - C31098) * C114 +
              (C31099 - C31100 + C31101 - C31102) * C47359) *
                 C47440) *
                C47493 +
            (((C31092 * C481 - C31090 * C491 + C31093 * C484 - C47473 * C497) *
                  C114 +
              (C31092 * C492 - C31090 * C511 + C31093 * C498 - C47473 * C514) *
                  C47359) *
                 C15947 +
             ((C31451 - C31452 + C31453 - C31454) * C114 +
              (C31455 - C31456 + C31457 - C31458) * C47359) *
                 C47440) *
                C47482 +
            (((C31090 * C497 - C31092 * C484 + C47473 * C2002 -
               C31093 * C1996) *
                  C114 +
              (C31090 * C514 - C31092 * C498 + C47473 * C2014 -
               C31093 * C2003) *
                  C47359) *
                 C15947 +
             ((C31459 - C31460 + C31461 - C31462) * C114 +
              (C31463 - C31464 + C31465 - C31466) * C47359) *
                 C47440) *
                C47456) *
               C2500 +
           ((((C31092 * C294 - C31090 * C304 + C31093 * C931 - C47473 * C936) *
                  C114 +
              (C31092 * C305 - C31090 * C324 + C31093 * C937 - C47473 * C946) *
                  C47359) *
                 C15947 +
             ((C31273 - C31274 + C31275 - C31276) * C114 +
              (C31277 - C31278 + C31279 - C31280) * C47359) *
                 C47440) *
                C47493 +
            (((C31090 * C936 - C31092 * C931 + C47473 * C1295 -
               C31093 * C1286) *
                  C114 +
              (C31090 * C946 - C31092 * C937 + C47473 * C1313 -
               C31093 * C1296) *
                  C47359) *
                 C15947 +
             ((C31953 - C31954 + C31955 - C31956) * C114 +
              (C31957 - C31958 + C31959 - C31960) * C47359) *
                 C47440) *
                C47482 +
            (((C31092 * C1286 - C31090 * C1295 + C31093 * C2390 -
               C47473 * C2393) *
                  C114 +
              (C31092 * C1296 - C31090 * C1313 + C31093 * C2394 -
               C47473 * C2399) *
                  C47359) *
                 C15947 +
             ((C33381 - C33382 + C33383 - C33384) * C114 +
              (C33385 - C33386 + C33387 - C33388) * C47359) *
                 C47440) *
                C47456) *
               C47219) *
              C2608 +
          (((((C31096 - C31095 + C31098 - C31097) * C114 +
              (C31100 - C31099 + C31102 - C31101) * C47359) *
                 C15947 +
             ((C31103 - C31104 + C31105 - C31106) * C114 +
              (C31107 - C31108 + C31109 - C31110) * C47359) *
                 C47440) *
                C47493 +
            (((C31452 - C31451 + C31454 - C31453) * C114 +
              (C31456 - C31455 + C31458 - C31457) * C47359) *
                 C15947 +
             ((C31467 - C31468 + C31469 - C31470) * C114 +
              (C31471 - C31472 + C31473 - C31474) * C47359) *
                 C47440) *
                C47482 +
            (((C31460 - C31459 + C31462 - C31461) * C114 +
              (C31464 - C31463 + C31466 - C31465) * C47359) *
                 C15947 +
             ((C31475 - C31476 + C31477 - C31478) * C114 +
              (C31479 - C31480 + C31481 - C31482) * C47359) *
                 C47440) *
                C47456) *
               C2500 +
           ((((C31274 - C31273 + C31276 - C31275) * C114 +
              (C31278 - C31277 + C31280 - C31279) * C47359) *
                 C15947 +
             ((C31289 - C31290 + C31291 - C31292) * C114 +
              (C31293 - C31294 + C31295 - C31296) * C47359) *
                 C47440) *
                C47493 +
            (((C31954 - C31953 + C31956 - C31955) * C114 +
              (C31958 - C31957 + C31960 - C31959) * C47359) *
                 C15947 +
             ((C31961 - C31962 + C31963 - C31964) * C114 +
              (C31965 - C31966 + C31967 - C31968) * C47359) *
                 C47440) *
                C47482 +
            (((C33382 - C33381 + C33384 - C33383) * C114 +
              (C33386 - C33385 + C33388 - C33387) * C47359) *
                 C15947 +
             ((C31090 * C1299 - C31092 * C1288 + C47473 * C2397 -
               C31093 * C2392) *
                  C114 +
              (C31090 * C1315 - C31092 * C1300 + C47473 * C2401 -
               C31093 * C2398) *
                  C47359) *
                 C47440) *
                C47456) *
               C47219) *
              C47139)) /
            (p * q * std::sqrt(p + q));
    d2ee[153] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C31090 * C122 - C31092 * C115 + C47473 * C491 - C31093 * C481) *
                  C114 +
              (C31090 * C136 - C31092 * C123 + C47473 * C511 - C31093 * C492) *
                  C47359) *
                 C15947 +
             ((C31095 - C31096 + C31097 - C31098) * C114 +
              (C31099 - C31100 + C31101 - C31102) * C47359) *
                 C47440) *
                C47422 +
            (((C31092 * C481 - C31090 * C491 + C31093 * C484 - C47473 * C497) *
                  C114 +
              (C31092 * C492 - C31090 * C511 + C31093 * C498 - C47473 * C514) *
                  C47359) *
                 C15947 +
             ((C31451 - C31452 + C31453 - C31454) * C114 +
              (C31455 - C31456 + C31457 - C31458) * C47359) *
                 C47440) *
                C47261) *
               C2500 +
           ((((C31092 * C294 - C31090 * C304 + C31093 * C931 - C47473 * C936) *
                  C114 +
              (C31092 * C305 - C31090 * C324 + C31093 * C937 - C47473 * C946) *
                  C47359) *
                 C15947 +
             ((C31273 - C31274 + C31275 - C31276) * C114 +
              (C31277 - C31278 + C31279 - C31280) * C47359) *
                 C47440) *
                C47422 +
            (((C31090 * C936 - C31092 * C931 + C47473 * C1295 -
               C31093 * C1286) *
                  C114 +
              (C31090 * C946 - C31092 * C937 + C47473 * C1313 -
               C31093 * C1296) *
                  C47359) *
                 C15947 +
             ((C31953 - C31954 + C31955 - C31956) * C114 +
              (C31957 - C31958 + C31959 - C31960) * C47359) *
                 C47440) *
                C47261) *
               C47219) *
              C47133 +
          (((((C31096 - C31095 + C31098 - C31097) * C114 +
              (C31100 - C31099 + C31102 - C31101) * C47359) *
                 C15947 +
             ((C31103 - C31104 + C31105 - C31106) * C114 +
              (C31107 - C31108 + C31109 - C31110) * C47359) *
                 C47440) *
                C47422 +
            (((C31452 - C31451 + C31454 - C31453) * C114 +
              (C31456 - C31455 + C31458 - C31457) * C47359) *
                 C15947 +
             ((C31467 - C31468 + C31469 - C31470) * C114 +
              (C31471 - C31472 + C31473 - C31474) * C47359) *
                 C47440) *
                C47261) *
               C2500 +
           ((((C31274 - C31273 + C31276 - C31275) * C114 +
              (C31278 - C31277 + C31280 - C31279) * C47359) *
                 C15947 +
             ((C31289 - C31290 + C31291 - C31292) * C114 +
              (C31293 - C31294 + C31295 - C31296) * C47359) *
                 C47440) *
                C47422 +
            (((C31954 - C31953 + C31956 - C31955) * C114 +
              (C31958 - C31957 + C31960 - C31959) * C47359) *
                 C15947 +
             ((C31961 - C31962 + C31963 - C31964) * C114 +
              (C31965 - C31966 + C31967 - C31968) * C47359) *
                 C47440) *
                C47261) *
               C47219) *
              C47142 +
          (((((C31104 - C31103 + C31106 - C31105) * C114 +
              (C31108 - C31107 + C31110 - C31109) * C47359) *
                 C15947 +
             ((C31111 - C31112 + C31113 - C31114) * C114 +
              (C31115 - C31116 + C31117 - C31118) * C47359) *
                 C47440) *
                C47422 +
            (((C31468 - C31467 + C31470 - C31469) * C114 +
              (C31472 - C31471 + C31474 - C31473) * C47359) *
                 C15947 +
             ((C31751 - C31752 + C31753 - C31754) * C114 +
              (C31755 - C31756 + C31757 - C31758) * C47359) *
                 C47440) *
                C47261) *
               C2500 +
           ((((C31290 - C31289 + C31292 - C31291) * C114 +
              (C31294 - C31293 + C31296 - C31295) * C47359) *
                 C15947 +
             ((C31613 - C31614 + C31615 - C31616) * C114 +
              (C31617 - C31618 + C31619 - C31620) * C47359) *
                 C47440) *
                C47422 +
            (((C31962 - C31961 + C31964 - C31963) * C114 +
              (C31966 - C31965 + C31968 - C31967) * C47359) *
                 C15947 +
             ((C31090 * C942 - C31092 * C934 + C47473 * C2167 -
               C31093 * C2166) *
                  C114 +
              (C31090 * C949 - C31092 * C943 + C47473 * C2169 -
               C31093 * C2168) *
                  C47359) *
                 C47440) *
                C47261) *
               C47219) *
              C2871)) /
        (p * q * std::sqrt(p + q));
    d2ee[154] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C31090 * C122 - C31092 * C115 + C47473 * C491 - C31093 * C481) *
                 C114 +
             (C31090 * C136 - C31092 * C123 + C47473 * C511 - C31093 * C492) *
                 C47359) *
                C15947 +
            ((C31095 - C31096 + C31097 - C31098) * C114 +
             (C31099 - C31100 + C31101 - C31102) * C47359) *
                C47440) *
               C47174 * C2500 +
           (((C31092 * C294 - C31090 * C304 + C31093 * C931 - C47473 * C936) *
                 C114 +
             (C31092 * C305 - C31090 * C324 + C31093 * C937 - C47473 * C946) *
                 C47359) *
                C15947 +
            ((C31273 - C31274 + C31275 - C31276) * C114 +
             (C31277 - C31278 + C31279 - C31280) * C47359) *
                C47440) *
               C47174 * C47219) *
              C47498 +
          ((((C31096 - C31095 + C31098 - C31097) * C114 +
             (C31100 - C31099 + C31102 - C31101) * C47359) *
                C15947 +
            ((C31103 - C31104 + C31105 - C31106) * C114 +
             (C31107 - C31108 + C31109 - C31110) * C47359) *
                C47440) *
               C47174 * C2500 +
           (((C31274 - C31273 + C31276 - C31275) * C114 +
             (C31278 - C31277 + C31280 - C31279) * C47359) *
                C15947 +
            ((C31289 - C31290 + C31291 - C31292) * C114 +
             (C31293 - C31294 + C31295 - C31296) * C47359) *
                C47440) *
               C47174 * C47219) *
              C47491 +
          ((((C31104 - C31103 + C31106 - C31105) * C114 +
             (C31108 - C31107 + C31110 - C31109) * C47359) *
                C15947 +
            ((C31111 - C31112 + C31113 - C31114) * C114 +
             (C31115 - C31116 + C31117 - C31118) * C47359) *
                C47440) *
               C47174 * C2500 +
           (((C31290 - C31289 + C31292 - C31291) * C114 +
             (C31294 - C31293 + C31296 - C31295) * C47359) *
                C15947 +
            ((C31613 - C31614 + C31615 - C31616) * C114 +
             (C31617 - C31618 + C31619 - C31620) * C47359) *
                C47440) *
               C47174 * C47219) *
              C47478 +
          ((((C31112 - C31111 + C31114 - C31113) * C114 +
             (C31116 - C31115 + C31118 - C31117) * C47359) *
                C15947 +
            ((C31119 - C31120 + C31121 - C31122) * C114 +
             (C31123 - C31124 + C31125 - C31126) * C47359) *
                C47440) *
               C47174 * C2500 +
           (((C31614 - C31613 + C31616 - C31615) * C114 +
             (C31618 - C31617 + C31620 - C31619) * C47359) *
                C15947 +
            ((C31090 * C320 - C31092 * C302 + C47473 * C944 - C31093 * C935) *
                 C114 +
             (C31090 * C332 - C31092 * C321 + C47473 * C950 - C31093 * C945) *
                 C47359) *
                C47440) *
               C47174 * C47219) *
              C47457)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C31090 * C122 - C31092 * C115 + C47473 * C491 - C31093 * C481) *
                 C114 +
             (C31090 * C136 - C31092 * C123 + C47473 * C511 - C31093 * C492) *
                 C47359) *
                C15947 +
            ((C31095 - C31096 + C31097 - C31098) * C114 +
             (C31099 - C31100 + C31101 - C31102) * C47359) *
                C47440) *
               C47174 * C47499 +
           (((C31092 * C294 - C31090 * C304 + C31093 * C931 - C47473 * C936) *
                 C114 +
             (C31092 * C305 - C31090 * C324 + C31093 * C937 - C47473 * C946) *
                 C47359) *
                C15947 +
            ((C31273 - C31274 + C31275 - C31276) * C114 +
             (C31277 - C31278 + C31279 - C31280) * C47359) *
                C47440) *
               C47174 * C47495 +
           (((C31090 * C310 - C31092 * C297 + C47473 * C1301 - C31093 * C1289) *
                 C114 +
             (C31090 * C327 - C31092 * C311 + C47473 * C1316 - C31093 * C1302) *
                 C47359) *
                C15947 +
            ((C31281 - C31282 + C31283 - C31284) * C114 +
             (C31285 - C31286 + C31287 - C31288) * C47359) *
                C47440) *
               C47174 * C47485 +
           (((C31092 * C1152 - C31090 * C1158 + C31093 * C1694 -
              C47473 * C1697) *
                 C114 +
             (C31092 * C1159 - C31090 * C1170 + C31093 * C1698 -
              C47473 * C1703) *
                 C47359) *
                C15947 +
            ((C32473 - C32474 + C32475 - C32476) * C114 +
             (C32477 - C32478 + C32479 - C32480) * C47359) *
                C47440) *
               C47174 * C47463) *
              C2608 +
          ((((C31096 - C31095 + C31098 - C31097) * C114 +
             (C31100 - C31099 + C31102 - C31101) * C47359) *
                C15947 +
            ((C31103 - C31104 + C31105 - C31106) * C114 +
             (C31107 - C31108 + C31109 - C31110) * C47359) *
                C47440) *
               C47174 * C47499 +
           (((C31274 - C31273 + C31276 - C31275) * C114 +
             (C31278 - C31277 + C31280 - C31279) * C47359) *
                C15947 +
            ((C31289 - C31290 + C31291 - C31292) * C114 +
             (C31293 - C31294 + C31295 - C31296) * C47359) *
                C47440) *
               C47174 * C47495 +
           (((C31282 - C31281 + C31284 - C31283) * C114 +
             (C31286 - C31285 + C31288 - C31287) * C47359) *
                C15947 +
            ((C31297 - C31298 + C31299 - C31300) * C114 +
             (C31301 - C31302 + C31303 - C31304) * C47359) *
                C47440) *
               C47174 * C47485 +
           (((C32474 - C32473 + C32476 - C32475) * C114 +
             (C32478 - C32477 + C32480 - C32479) * C47359) *
                C15947 +
            ((C31090 * C1162 - C31092 * C1154 + C47473 * C1701 -
              C31093 * C1696) *
                 C114 +
             (C31090 * C1172 - C31092 * C1163 + C47473 * C1705 -
              C31093 * C1702) *
                 C47359) *
                C47440) *
               C47174 * C47463) *
              C47139)) /
            (p * q * std::sqrt(p + q));
    d2ee[155] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C31090 * C122 - C31092 * C115 + C47473 * C491 - C31093 * C481) *
                  C114 +
              (C31090 * C136 - C31092 * C123 + C47473 * C511 - C31093 * C492) *
                  C47359) *
                 C15947 +
             ((C31095 - C31096 + C31097 - C31098) * C114 +
              (C31099 - C31100 + C31101 - C31102) * C47359) *
                 C47440) *
                C3262 +
            (((C31092 * C481 - C31090 * C491 + C31093 * C484 - C47473 * C497) *
                  C114 +
              (C31092 * C492 - C31090 * C511 + C31093 * C498 - C47473 * C514) *
                  C47359) *
                 C15947 +
             ((C31451 - C31452 + C31453 - C31454) * C114 +
              (C31455 - C31456 + C31457 - C31458) * C47359) *
                 C47440) *
                C47261) *
               C47215 +
           ((((C31092 * C294 - C31090 * C304 + C31093 * C931 - C47473 * C936) *
                  C114 +
              (C31092 * C305 - C31090 * C324 + C31093 * C937 - C47473 * C946) *
                  C47359) *
                 C15947 +
             ((C31273 - C31274 + C31275 - C31276) * C114 +
              (C31277 - C31278 + C31279 - C31280) * C47359) *
                 C47440) *
                C3262 +
            (((C31090 * C936 - C31092 * C931 + C47473 * C1295 -
               C31093 * C1286) *
                  C114 +
              (C31090 * C946 - C31092 * C937 + C47473 * C1313 -
               C31093 * C1296) *
                  C47359) *
                 C15947 +
             ((C31953 - C31954 + C31955 - C31956) * C114 +
              (C31957 - C31958 + C31959 - C31960) * C47359) *
                 C47440) *
                C47261) *
               C47222 +
           ((((C31090 * C310 - C31092 * C297 + C47473 * C1301 -
               C31093 * C1289) *
                  C114 +
              (C31090 * C327 - C31092 * C311 + C47473 * C1316 -
               C31093 * C1302) *
                  C47359) *
                 C15947 +
             ((C31281 - C31282 + C31283 - C31284) * C114 +
              (C31285 - C31286 + C31287 - C31288) * C47359) *
                 C47440) *
                C3262 +
            (((C31092 * C1289 - C31090 * C1301 + C31093 * C1292 -
               C47473 * C1307) *
                  C114 +
              (C31092 * C1302 - C31090 * C1316 + C31093 * C1308 -
               C47473 * C1319) *
                  C47359) *
                 C15947 +
             ((C32675 - C32676 + C32677 - C32678) * C114 +
              (C32679 - C32680 + C32681 - C32682) * C47359) *
                 C47440) *
                C47261) *
               C2868) *
              C47407 +
          (((((C31096 - C31095 + C31098 - C31097) * C114 +
              (C31100 - C31099 + C31102 - C31101) * C47359) *
                 C15947 +
             ((C31103 - C31104 + C31105 - C31106) * C114 +
              (C31107 - C31108 + C31109 - C31110) * C47359) *
                 C47440) *
                C3262 +
            (((C31452 - C31451 + C31454 - C31453) * C114 +
              (C31456 - C31455 + C31458 - C31457) * C47359) *
                 C15947 +
             ((C31467 - C31468 + C31469 - C31470) * C114 +
              (C31471 - C31472 + C31473 - C31474) * C47359) *
                 C47440) *
                C47261) *
               C47215 +
           ((((C31274 - C31273 + C31276 - C31275) * C114 +
              (C31278 - C31277 + C31280 - C31279) * C47359) *
                 C15947 +
             ((C31289 - C31290 + C31291 - C31292) * C114 +
              (C31293 - C31294 + C31295 - C31296) * C47359) *
                 C47440) *
                C3262 +
            (((C31954 - C31953 + C31956 - C31955) * C114 +
              (C31958 - C31957 + C31960 - C31959) * C47359) *
                 C15947 +
             ((C31961 - C31962 + C31963 - C31964) * C114 +
              (C31965 - C31966 + C31967 - C31968) * C47359) *
                 C47440) *
                C47261) *
               C47222 +
           ((((C31282 - C31281 + C31284 - C31283) * C114 +
              (C31286 - C31285 + C31288 - C31287) * C47359) *
                 C15947 +
             ((C31297 - C31298 + C31299 - C31300) * C114 +
              (C31301 - C31302 + C31303 - C31304) * C47359) *
                 C47440) *
                C3262 +
            (((C32676 - C32675 + C32678 - C32677) * C114 +
              (C32680 - C32679 + C32682 - C32681) * C47359) *
                 C15947 +
             ((C31090 * C1305 - C31092 * C1291 + C47473 * C1311 -
               C31093 * C1294) *
                  C114 +
              (C31090 * C1318 - C31092 * C1306 + C47473 * C1321 -
               C31093 * C1312) *
                  C47359) *
                 C47440) *
                C47261) *
               C2868) *
              C47139)) /
        (p * q * std::sqrt(p + q));
    d2ee[156] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C31090 * C122 - C31092 * C115 + C47473 * C491 - C31093 * C481) *
                 C114 +
             (C31090 * C136 - C31092 * C123 + C47473 * C511 - C31093 * C492) *
                 C47359) *
                C15947 +
            ((C31095 - C31096 + C31097 - C31098) * C114 +
             (C31099 - C31100 + C31101 - C31102) * C47359) *
                C47440) *
               C47257 +
           (((C31092 * C481 - C31090 * C491 + C31093 * C484 - C47473 * C497) *
                 C114 +
             (C31092 * C492 - C31090 * C511 + C31093 * C498 - C47473 * C514) *
                 C47359) *
                C15947 +
            ((C31451 - C31452 + C31453 - C31454) * C114 +
             (C31455 - C31456 + C31457 - C31458) * C47359) *
                C47440) *
               C47264 +
           (((C31090 * C497 - C31092 * C484 + C47473 * C2002 - C31093 * C1996) *
                 C114 +
             (C31090 * C514 - C31092 * C498 + C47473 * C2014 - C31093 * C2003) *
                 C47359) *
                C15947 +
            ((C31459 - C31460 + C31461 - C31462) * C114 +
             (C31463 - C31464 + C31465 - C31466) * C47359) *
                C47440) *
               C3770) *
              C47215 +
          ((((C31092 * C294 - C31090 * C304 + C31093 * C931 - C47473 * C936) *
                 C114 +
             (C31092 * C305 - C31090 * C324 + C31093 * C937 - C47473 * C946) *
                 C47359) *
                C15947 +
            ((C31273 - C31274 + C31275 - C31276) * C114 +
             (C31277 - C31278 + C31279 - C31280) * C47359) *
                C47440) *
               C47257 +
           (((C31090 * C936 - C31092 * C931 + C47473 * C1295 - C31093 * C1286) *
                 C114 +
             (C31090 * C946 - C31092 * C937 + C47473 * C1313 - C31093 * C1296) *
                 C47359) *
                C15947 +
            ((C31953 - C31954 + C31955 - C31956) * C114 +
             (C31957 - C31958 + C31959 - C31960) * C47359) *
                C47440) *
               C47264 +
           (((C31092 * C1286 - C31090 * C1295 + C31093 * C2390 -
              C47473 * C2393) *
                 C114 +
             (C31092 * C1296 - C31090 * C1313 + C31093 * C2394 -
              C47473 * C2399) *
                 C47359) *
                C15947 +
            ((C33381 - C33382 + C33383 - C33384) * C114 +
             (C33385 - C33386 + C33387 - C33388) * C47359) *
                C47440) *
               C3770) *
              C47222 +
          ((((C31090 * C310 - C31092 * C297 + C47473 * C1301 - C31093 * C1289) *
                 C114 +
             (C31090 * C327 - C31092 * C311 + C47473 * C1316 - C31093 * C1302) *
                 C47359) *
                C15947 +
            ((C31281 - C31282 + C31283 - C31284) * C114 +
             (C31285 - C31286 + C31287 - C31288) * C47359) *
                C47440) *
               C47257 +
           (((C31092 * C1289 - C31090 * C1301 + C31093 * C1292 -
              C47473 * C1307) *
                 C114 +
             (C31092 * C1302 - C31090 * C1316 + C31093 * C1308 -
              C47473 * C1319) *
                 C47359) *
                C15947 +
            ((C32675 - C32676 + C32677 - C32678) * C114 +
             (C32679 - C32680 + C32681 - C32682) * C47359) *
                C47440) *
               C47264 +
           (((C31090 * C1307 - C31092 * C1292 + C47473 * C7269 -
              C31093 * C7267) *
                 C114 +
             (C31090 * C1319 - C31092 * C1308 + C47473 * C7273 -
              C31093 * C7270) *
                 C47359) *
                C15947 +
            ((C31090 * C1309 - C31092 * C1293 + C47473 * C7271 -
              C31093 * C7268) *
                 C114 +
             (C31090 * C1320 - C31092 * C1310 + C47473 * C7274 -
              C31093 * C7272) *
                 C47359) *
                C47440) *
               C3770) *
              C2868) *
         C47128) /
        (p * q * std::sqrt(p + q));
    d2ee[157] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C31090 * C122 - C31092 * C115 + C47473 * C491 - C31093 * C481) *
                 C114 +
             (C31090 * C136 - C31092 * C123 + C47473 * C511 - C31093 * C492) *
                 C47359) *
                C15947 +
            ((C31095 - C31096 + C31097 - C31098) * C114 +
             (C31099 - C31100 + C31101 - C31102) * C47359) *
                C47440) *
               C3262 +
           (((C31092 * C481 - C31090 * C491 + C31093 * C484 - C47473 * C497) *
                 C114 +
             (C31092 * C492 - C31090 * C511 + C31093 * C498 - C47473 * C514) *
                 C47359) *
                C15947 +
            ((C31451 - C31452 + C31453 - C31454) * C114 +
             (C31455 - C31456 + C31457 - C31458) * C47359) *
                C47440) *
               C47261) *
              C47499 +
          ((((C31092 * C294 - C31090 * C304 + C31093 * C931 - C47473 * C936) *
                 C114 +
             (C31092 * C305 - C31090 * C324 + C31093 * C937 - C47473 * C946) *
                 C47359) *
                C15947 +
            ((C31273 - C31274 + C31275 - C31276) * C114 +
             (C31277 - C31278 + C31279 - C31280) * C47359) *
                C47440) *
               C3262 +
           (((C31090 * C936 - C31092 * C931 + C47473 * C1295 - C31093 * C1286) *
                 C114 +
             (C31090 * C946 - C31092 * C937 + C47473 * C1313 - C31093 * C1296) *
                 C47359) *
                C15947 +
            ((C31953 - C31954 + C31955 - C31956) * C114 +
             (C31957 - C31958 + C31959 - C31960) * C47359) *
                C47440) *
               C47261) *
              C47495 +
          ((((C31090 * C310 - C31092 * C297 + C47473 * C1301 - C31093 * C1289) *
                 C114 +
             (C31090 * C327 - C31092 * C311 + C47473 * C1316 - C31093 * C1302) *
                 C47359) *
                C15947 +
            ((C31281 - C31282 + C31283 - C31284) * C114 +
             (C31285 - C31286 + C31287 - C31288) * C47359) *
                C47440) *
               C3262 +
           (((C31092 * C1289 - C31090 * C1301 + C31093 * C1292 -
              C47473 * C1307) *
                 C114 +
             (C31092 * C1302 - C31090 * C1316 + C31093 * C1308 -
              C47473 * C1319) *
                 C47359) *
                C15947 +
            ((C32675 - C32676 + C32677 - C32678) * C114 +
             (C32679 - C32680 + C32681 - C32682) * C47359) *
                C47440) *
               C47261) *
              C47485 +
          ((((C31092 * C1152 - C31090 * C1158 + C31093 * C1694 -
              C47473 * C1697) *
                 C114 +
             (C31092 * C1159 - C31090 * C1170 + C31093 * C1698 -
              C47473 * C1703) *
                 C47359) *
                C15947 +
            ((C32473 - C32474 + C32475 - C32476) * C114 +
             (C32477 - C32478 + C32479 - C32480) * C47359) *
                C47440) *
               C3262 +
           (((C31090 * C1697 - C31092 * C1694 + C47473 * C5923 -
              C31093 * C5921) *
                 C114 +
             (C31090 * C1703 - C31092 * C1698 + C47473 * C5927 -
              C31093 * C5924) *
                 C47359) *
                C15947 +
            ((C31090 * C1699 - C31092 * C1695 + C47473 * C5925 -
              C31093 * C5922) *
                 C114 +
             (C31090 * C1704 - C31092 * C1700 + C47473 * C5928 -
              C31093 * C5926) *
                 C47359) *
                C47440) *
               C47261) *
              C47463) *
         C47128) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C31090 * C122 - C31092 * C115 + C47473 * C491 - C31093 * C481) *
                  C114 +
              (C31090 * C136 - C31092 * C123 + C47473 * C511 - C31093 * C492) *
                  C47359) *
                 C15947 +
             ((C31095 - C31096 + C31097 - C31098) * C114 +
              (C31099 - C31100 + C31101 - C31102) * C47359) *
                 C47440) *
                C3262 +
            (((C31092 * C481 - C31090 * C491 + C31093 * C484 - C47473 * C497) *
                  C114 +
              (C31092 * C492 - C31090 * C511 + C31093 * C498 - C47473 * C514) *
                  C47359) *
                 C15947 +
             ((C31451 - C31452 + C31453 - C31454) * C114 +
              (C31455 - C31456 + C31457 - C31458) * C47359) *
                 C47440) *
                C47261) *
               C2500 +
           ((((C31092 * C294 - C31090 * C304 + C31093 * C931 - C47473 * C936) *
                  C114 +
              (C31092 * C305 - C31090 * C324 + C31093 * C937 - C47473 * C946) *
                  C47359) *
                 C15947 +
             ((C31273 - C31274 + C31275 - C31276) * C114 +
              (C31277 - C31278 + C31279 - C31280) * C47359) *
                 C47440) *
                C3262 +
            (((C31090 * C936 - C31092 * C931 + C47473 * C1295 -
               C31093 * C1286) *
                  C114 +
              (C31090 * C946 - C31092 * C937 + C47473 * C1313 -
               C31093 * C1296) *
                  C47359) *
                 C15947 +
             ((C31953 - C31954 + C31955 - C31956) * C114 +
              (C31957 - C31958 + C31959 - C31960) * C47359) *
                 C47440) *
                C47261) *
               C47219) *
              C47489 +
          (((((C31096 - C31095 + C31098 - C31097) * C114 +
              (C31100 - C31099 + C31102 - C31101) * C47359) *
                 C15947 +
             ((C31103 - C31104 + C31105 - C31106) * C114 +
              (C31107 - C31108 + C31109 - C31110) * C47359) *
                 C47440) *
                C3262 +
            (((C31452 - C31451 + C31454 - C31453) * C114 +
              (C31456 - C31455 + C31458 - C31457) * C47359) *
                 C15947 +
             ((C31467 - C31468 + C31469 - C31470) * C114 +
              (C31471 - C31472 + C31473 - C31474) * C47359) *
                 C47440) *
                C47261) *
               C2500 +
           ((((C31274 - C31273 + C31276 - C31275) * C114 +
              (C31278 - C31277 + C31280 - C31279) * C47359) *
                 C15947 +
             ((C31289 - C31290 + C31291 - C31292) * C114 +
              (C31293 - C31294 + C31295 - C31296) * C47359) *
                 C47440) *
                C3262 +
            (((C31954 - C31953 + C31956 - C31955) * C114 +
              (C31958 - C31957 + C31960 - C31959) * C47359) *
                 C15947 +
             ((C31961 - C31962 + C31963 - C31964) * C114 +
              (C31965 - C31966 + C31967 - C31968) * C47359) *
                 C47440) *
                C47261) *
               C47219) *
              C47476 +
          (((((C31104 - C31103 + C31106 - C31105) * C114 +
              (C31108 - C31107 + C31110 - C31109) * C47359) *
                 C15947 +
             ((C31111 - C31112 + C31113 - C31114) * C114 +
              (C31115 - C31116 + C31117 - C31118) * C47359) *
                 C47440) *
                C3262 +
            (((C31468 - C31467 + C31470 - C31469) * C114 +
              (C31472 - C31471 + C31474 - C31473) * C47359) *
                 C15947 +
             ((C31751 - C31752 + C31753 - C31754) * C114 +
              (C31755 - C31756 + C31757 - C31758) * C47359) *
                 C47440) *
                C47261) *
               C2500 +
           ((((C31290 - C31289 + C31292 - C31291) * C114 +
              (C31294 - C31293 + C31296 - C31295) * C47359) *
                 C15947 +
             ((C31613 - C31614 + C31615 - C31616) * C114 +
              (C31617 - C31618 + C31619 - C31620) * C47359) *
                 C47440) *
                C3262 +
            (((C31962 - C31961 + C31964 - C31963) * C114 +
              (C31966 - C31965 + C31968 - C31967) * C47359) *
                 C15947 +
             ((C31090 * C942 - C31092 * C934 + C47473 * C2167 -
               C31093 * C2166) *
                  C114 +
              (C31090 * C949 - C31092 * C943 + C47473 * C2169 -
               C31093 * C2168) *
                  C47359) *
                 C47440) *
                C47261) *
               C47219) *
              C47447)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C31090 * C122 - C31092 * C115 + C47473 * C491 - C31093 * C481) *
                 C114 +
             (C31090 * C136 - C31092 * C123 + C47473 * C511 - C31093 * C492) *
                 C47359) *
                C15947 +
            ((C31095 - C31096 + C31097 - C31098) * C114 +
             (C31099 - C31100 + C31101 - C31102) * C47359) *
                C47440) *
               C47500 +
           (((C31092 * C481 - C31090 * C491 + C31093 * C484 - C47473 * C497) *
                 C114 +
             (C31092 * C492 - C31090 * C511 + C31093 * C498 - C47473 * C514) *
                 C47359) *
                C15947 +
            ((C31451 - C31452 + C31453 - C31454) * C114 +
             (C31455 - C31456 + C31457 - C31458) * C47359) *
                C47440) *
               C47497 +
           (((C31090 * C497 - C31092 * C484 + C47473 * C2002 - C31093 * C1996) *
                 C114 +
             (C31090 * C514 - C31092 * C498 + C47473 * C2014 - C31093 * C2003) *
                 C47359) *
                C15947 +
            ((C31459 - C31460 + C31461 - C31462) * C114 +
             (C31463 - C31464 + C31465 - C31466) * C47359) *
                C47440) *
               C47488 +
           (((C31092 * C1996 - C31090 * C2002 + C31093 * C1999 -
              C47473 * C2008) *
                 C114 +
             (C31092 * C2003 - C31090 * C2014 + C31093 * C2009 -
              C47473 * C2017) *
                 C47359) *
                C15947 +
            ((C33519 - C33520 + C33521 - C33522) * C114 +
             (C33523 - C33524 + C33525 - C33526) * C47359) *
                C47440) *
               C47469) *
              C2500 +
          ((((C31092 * C294 - C31090 * C304 + C31093 * C931 - C47473 * C936) *
                 C114 +
             (C31092 * C305 - C31090 * C324 + C31093 * C937 - C47473 * C946) *
                 C47359) *
                C15947 +
            ((C31273 - C31274 + C31275 - C31276) * C114 +
             (C31277 - C31278 + C31279 - C31280) * C47359) *
                C47440) *
               C47500 +
           (((C31090 * C936 - C31092 * C931 + C47473 * C1295 - C31093 * C1286) *
                 C114 +
             (C31090 * C946 - C31092 * C937 + C47473 * C1313 - C31093 * C1296) *
                 C47359) *
                C15947 +
            ((C31953 - C31954 + C31955 - C31956) * C114 +
             (C31957 - C31958 + C31959 - C31960) * C47359) *
                C47440) *
               C47497 +
           (((C31092 * C1286 - C31090 * C1295 + C31093 * C2390 -
              C47473 * C2393) *
                 C114 +
             (C31092 * C1296 - C31090 * C1313 + C31093 * C2394 -
              C47473 * C2399) *
                 C47359) *
                C15947 +
            ((C33381 - C33382 + C33383 - C33384) * C114 +
             (C33385 - C33386 + C33387 - C33388) * C47359) *
                C47440) *
               C47488 +
           (((C31090 * C2393 - C31092 * C2390 + C47473 * C6799 -
              C31093 * C6797) *
                 C114 +
             (C31090 * C2399 - C31092 * C2394 + C47473 * C6803 -
              C31093 * C6800) *
                 C47359) *
                C15947 +
            ((C31090 * C2395 - C31092 * C2391 + C47473 * C6801 -
              C31093 * C6798) *
                 C114 +
             (C31090 * C2400 - C31092 * C2396 + C47473 * C6804 -
              C31093 * C6802) *
                 C47359) *
                C47440) *
               C47469) *
              C47219) *
         C47128) /
            (p * q * std::sqrt(p + q));
    d2ee[158] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C31090 * C122 - C31092 * C115 + C47473 * C491 - C31093 * C481) *
                  C114 +
              (C31090 * C136 - C31092 * C123 + C47473 * C511 - C31093 * C492) *
                  C47359) *
                 C15947 +
             ((C31095 - C31096 + C31097 - C31098) * C114 +
              (C31099 - C31100 + C31101 - C31102) * C47359) *
                 C47440) *
                C47257 +
            (((C31092 * C481 - C31090 * C491 + C31093 * C484 - C47473 * C497) *
                  C114 +
              (C31092 * C492 - C31090 * C511 + C31093 * C498 - C47473 * C514) *
                  C47359) *
                 C15947 +
             ((C31451 - C31452 + C31453 - C31454) * C114 +
              (C31455 - C31456 + C31457 - C31458) * C47359) *
                 C47440) *
                C47264 +
            (((C31090 * C497 - C31092 * C484 + C47473 * C2002 -
               C31093 * C1996) *
                  C114 +
              (C31090 * C514 - C31092 * C498 + C47473 * C2014 -
               C31093 * C2003) *
                  C47359) *
                 C15947 +
             ((C31459 - C31460 + C31461 - C31462) * C114 +
              (C31463 - C31464 + C31465 - C31466) * C47359) *
                 C47440) *
                C3770) *
               C2500 +
           ((((C31092 * C294 - C31090 * C304 + C31093 * C931 - C47473 * C936) *
                  C114 +
              (C31092 * C305 - C31090 * C324 + C31093 * C937 - C47473 * C946) *
                  C47359) *
                 C15947 +
             ((C31273 - C31274 + C31275 - C31276) * C114 +
              (C31277 - C31278 + C31279 - C31280) * C47359) *
                 C47440) *
                C47257 +
            (((C31090 * C936 - C31092 * C931 + C47473 * C1295 -
               C31093 * C1286) *
                  C114 +
              (C31090 * C946 - C31092 * C937 + C47473 * C1313 -
               C31093 * C1296) *
                  C47359) *
                 C15947 +
             ((C31953 - C31954 + C31955 - C31956) * C114 +
              (C31957 - C31958 + C31959 - C31960) * C47359) *
                 C47440) *
                C47264 +
            (((C31092 * C1286 - C31090 * C1295 + C31093 * C2390 -
               C47473 * C2393) *
                  C114 +
              (C31092 * C1296 - C31090 * C1313 + C31093 * C2394 -
               C47473 * C2399) *
                  C47359) *
                 C15947 +
             ((C33381 - C33382 + C33383 - C33384) * C114 +
              (C33385 - C33386 + C33387 - C33388) * C47359) *
                 C47440) *
                C3770) *
               C47219) *
              C47407 +
          (((((C31096 - C31095 + C31098 - C31097) * C114 +
              (C31100 - C31099 + C31102 - C31101) * C47359) *
                 C15947 +
             ((C31103 - C31104 + C31105 - C31106) * C114 +
              (C31107 - C31108 + C31109 - C31110) * C47359) *
                 C47440) *
                C47257 +
            (((C31452 - C31451 + C31454 - C31453) * C114 +
              (C31456 - C31455 + C31458 - C31457) * C47359) *
                 C15947 +
             ((C31467 - C31468 + C31469 - C31470) * C114 +
              (C31471 - C31472 + C31473 - C31474) * C47359) *
                 C47440) *
                C47264 +
            (((C31460 - C31459 + C31462 - C31461) * C114 +
              (C31464 - C31463 + C31466 - C31465) * C47359) *
                 C15947 +
             ((C31475 - C31476 + C31477 - C31478) * C114 +
              (C31479 - C31480 + C31481 - C31482) * C47359) *
                 C47440) *
                C3770) *
               C2500 +
           ((((C31274 - C31273 + C31276 - C31275) * C114 +
              (C31278 - C31277 + C31280 - C31279) * C47359) *
                 C15947 +
             ((C31289 - C31290 + C31291 - C31292) * C114 +
              (C31293 - C31294 + C31295 - C31296) * C47359) *
                 C47440) *
                C47257 +
            (((C31954 - C31953 + C31956 - C31955) * C114 +
              (C31958 - C31957 + C31960 - C31959) * C47359) *
                 C15947 +
             ((C31961 - C31962 + C31963 - C31964) * C114 +
              (C31965 - C31966 + C31967 - C31968) * C47359) *
                 C47440) *
                C47264 +
            (((C33382 - C33381 + C33384 - C33383) * C114 +
              (C33386 - C33385 + C33388 - C33387) * C47359) *
                 C15947 +
             ((C31090 * C1299 - C31092 * C1288 + C47473 * C2397 -
               C31093 * C2392) *
                  C114 +
              (C31090 * C1315 - C31092 * C1300 + C47473 * C2401 -
               C31093 * C2398) *
                  C47359) *
                 C47440) *
                C3770) *
               C47219) *
              C47139)) /
        (p * q * std::sqrt(p + q));
    d2ee[159] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C31090 * C122 - C31092 * C115 + C47473 * C491 - C31093 * C481) *
                  C114 +
              (C31090 * C136 - C31092 * C123 + C47473 * C511 - C31093 * C492) *
                  C47359) *
                 C15947 +
             ((C31095 - C31096 + C31097 - C31098) * C114 +
              (C31099 - C31100 + C31101 - C31102) * C47359) *
                 C47440) *
                C3262 +
            (((C31092 * C481 - C31090 * C491 + C31093 * C484 - C47473 * C497) *
                  C114 +
              (C31092 * C492 - C31090 * C511 + C31093 * C498 - C47473 * C514) *
                  C47359) *
                 C15947 +
             ((C31451 - C31452 + C31453 - C31454) * C114 +
              (C31455 - C31456 + C31457 - C31458) * C47359) *
                 C47440) *
                C47261) *
               C2500 +
           ((((C31092 * C294 - C31090 * C304 + C31093 * C931 - C47473 * C936) *
                  C114 +
              (C31092 * C305 - C31090 * C324 + C31093 * C937 - C47473 * C946) *
                  C47359) *
                 C15947 +
             ((C31273 - C31274 + C31275 - C31276) * C114 +
              (C31277 - C31278 + C31279 - C31280) * C47359) *
                 C47440) *
                C3262 +
            (((C31090 * C936 - C31092 * C931 + C47473 * C1295 -
               C31093 * C1286) *
                  C114 +
              (C31090 * C946 - C31092 * C937 + C47473 * C1313 -
               C31093 * C1296) *
                  C47359) *
                 C15947 +
             ((C31953 - C31954 + C31955 - C31956) * C114 +
              (C31957 - C31958 + C31959 - C31960) * C47359) *
                 C47440) *
                C47261) *
               C47219) *
              C47489 +
          (((((C31096 - C31095 + C31098 - C31097) * C114 +
              (C31100 - C31099 + C31102 - C31101) * C47359) *
                 C15947 +
             ((C31103 - C31104 + C31105 - C31106) * C114 +
              (C31107 - C31108 + C31109 - C31110) * C47359) *
                 C47440) *
                C3262 +
            (((C31452 - C31451 + C31454 - C31453) * C114 +
              (C31456 - C31455 + C31458 - C31457) * C47359) *
                 C15947 +
             ((C31467 - C31468 + C31469 - C31470) * C114 +
              (C31471 - C31472 + C31473 - C31474) * C47359) *
                 C47440) *
                C47261) *
               C2500 +
           ((((C31274 - C31273 + C31276 - C31275) * C114 +
              (C31278 - C31277 + C31280 - C31279) * C47359) *
                 C15947 +
             ((C31289 - C31290 + C31291 - C31292) * C114 +
              (C31293 - C31294 + C31295 - C31296) * C47359) *
                 C47440) *
                C3262 +
            (((C31954 - C31953 + C31956 - C31955) * C114 +
              (C31958 - C31957 + C31960 - C31959) * C47359) *
                 C15947 +
             ((C31961 - C31962 + C31963 - C31964) * C114 +
              (C31965 - C31966 + C31967 - C31968) * C47359) *
                 C47440) *
                C47261) *
               C47219) *
              C47476 +
          (((((C31104 - C31103 + C31106 - C31105) * C114 +
              (C31108 - C31107 + C31110 - C31109) * C47359) *
                 C15947 +
             ((C31111 - C31112 + C31113 - C31114) * C114 +
              (C31115 - C31116 + C31117 - C31118) * C47359) *
                 C47440) *
                C3262 +
            (((C31468 - C31467 + C31470 - C31469) * C114 +
              (C31472 - C31471 + C31474 - C31473) * C47359) *
                 C15947 +
             ((C31751 - C31752 + C31753 - C31754) * C114 +
              (C31755 - C31756 + C31757 - C31758) * C47359) *
                 C47440) *
                C47261) *
               C2500 +
           ((((C31290 - C31289 + C31292 - C31291) * C114 +
              (C31294 - C31293 + C31296 - C31295) * C47359) *
                 C15947 +
             ((C31613 - C31614 + C31615 - C31616) * C114 +
              (C31617 - C31618 + C31619 - C31620) * C47359) *
                 C47440) *
                C3262 +
            (((C31962 - C31961 + C31964 - C31963) * C114 +
              (C31966 - C31965 + C31968 - C31967) * C47359) *
                 C15947 +
             ((C31090 * C942 - C31092 * C934 + C47473 * C2167 -
               C31093 * C2166) *
                  C114 +
              (C31090 * C949 - C31092 * C943 + C47473 * C2169 -
               C31093 * C2168) *
                  C47359) *
                 C47440) *
                C47261) *
               C47219) *
              C47447)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C31090 * C122 - C31092 * C115 + C47473 * C491 - C31093 * C481) *
                 C114 +
             (C31090 * C136 - C31092 * C123 + C47473 * C511 - C31093 * C492) *
                 C47359) *
                C15947 +
            ((C31095 - C31096 + C31097 - C31098) * C114 +
             (C31099 - C31100 + C31101 - C31102) * C47359) *
                C47440) *
               C3262 +
           (((C31092 * C481 - C31090 * C491 + C31093 * C484 - C47473 * C497) *
                 C114 +
             (C31092 * C492 - C31090 * C511 + C31093 * C498 - C47473 * C514) *
                 C47359) *
                C15947 +
            ((C31451 - C31452 + C31453 - C31454) * C114 +
             (C31455 - C31456 + C31457 - C31458) * C47359) *
                C47440) *
               C47261) *
              C47499 +
          ((((C31092 * C294 - C31090 * C304 + C31093 * C931 - C47473 * C936) *
                 C114 +
             (C31092 * C305 - C31090 * C324 + C31093 * C937 - C47473 * C946) *
                 C47359) *
                C15947 +
            ((C31273 - C31274 + C31275 - C31276) * C114 +
             (C31277 - C31278 + C31279 - C31280) * C47359) *
                C47440) *
               C3262 +
           (((C31090 * C936 - C31092 * C931 + C47473 * C1295 - C31093 * C1286) *
                 C114 +
             (C31090 * C946 - C31092 * C937 + C47473 * C1313 - C31093 * C1296) *
                 C47359) *
                C15947 +
            ((C31953 - C31954 + C31955 - C31956) * C114 +
             (C31957 - C31958 + C31959 - C31960) * C47359) *
                C47440) *
               C47261) *
              C47495 +
          ((((C31090 * C310 - C31092 * C297 + C47473 * C1301 - C31093 * C1289) *
                 C114 +
             (C31090 * C327 - C31092 * C311 + C47473 * C1316 - C31093 * C1302) *
                 C47359) *
                C15947 +
            ((C31281 - C31282 + C31283 - C31284) * C114 +
             (C31285 - C31286 + C31287 - C31288) * C47359) *
                C47440) *
               C3262 +
           (((C31092 * C1289 - C31090 * C1301 + C31093 * C1292 -
              C47473 * C1307) *
                 C114 +
             (C31092 * C1302 - C31090 * C1316 + C31093 * C1308 -
              C47473 * C1319) *
                 C47359) *
                C15947 +
            ((C32675 - C32676 + C32677 - C32678) * C114 +
             (C32679 - C32680 + C32681 - C32682) * C47359) *
                C47440) *
               C47261) *
              C47485 +
          ((((C31092 * C1152 - C31090 * C1158 + C31093 * C1694 -
              C47473 * C1697) *
                 C114 +
             (C31092 * C1159 - C31090 * C1170 + C31093 * C1698 -
              C47473 * C1703) *
                 C47359) *
                C15947 +
            ((C32473 - C32474 + C32475 - C32476) * C114 +
             (C32477 - C32478 + C32479 - C32480) * C47359) *
                C47440) *
               C3262 +
           (((C31090 * C1697 - C31092 * C1694 + C47473 * C5923 -
              C31093 * C5921) *
                 C114 +
             (C31090 * C1703 - C31092 * C1698 + C47473 * C5927 -
              C31093 * C5924) *
                 C47359) *
                C15947 +
            ((C31090 * C1699 - C31092 * C1695 + C47473 * C5925 -
              C31093 * C5922) *
                 C114 +
             (C31090 * C1704 - C31092 * C1700 + C47473 * C5928 -
              C31093 * C5926) *
                 C47359) *
                C47440) *
               C47261) *
              C47463) *
         C47128) /
            (p * q * std::sqrt(p + q));
    d2ee[160] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C31090 * C122 - C31092 * C115 + C47473 * C491 - C31093 * C481) *
                 C114 +
             (C31090 * C136 - C31092 * C123 + C47473 * C511 - C31093 * C492) *
                 C47359) *
                C15947 +
            ((C31095 - C31096 + C31097 - C31098) * C114 +
             (C31099 - C31100 + C31101 - C31102) * C47359) *
                C47440) *
               C47174 * C1420 +
           (((C31092 * C294 - C31090 * C304 + C31093 * C931 - C47473 * C936) *
                 C114 +
             (C31092 * C305 - C31090 * C324 + C31093 * C937 - C47473 * C946) *
                 C47359) *
                C15947 +
            ((C31273 - C31274 + C31275 - C31276) * C114 +
             (C31277 - C31278 + C31279 - C31280) * C47359) *
                C47440) *
               C47174 * C1421 +
           (((C31090 * C310 - C31092 * C297 + C47473 * C1301 - C31093 * C1289) *
                 C114 +
             (C31090 * C327 - C31092 * C311 + C47473 * C1316 - C31093 * C1302) *
                 C47359) *
                C15947 +
            ((C31281 - C31282 + C31283 - C31284) * C114 +
             (C31285 - C31286 + C31287 - C31288) * C47359) *
                C47440) *
               C47174 * C1422 +
           (((C31092 * C1152 - C31090 * C1158 + C31093 * C1694 -
              C47473 * C1697) *
                 C114 +
             (C31092 * C1159 - C31090 * C1170 + C31093 * C1698 -
              C47473 * C1703) *
                 C47359) *
                C15947 +
            ((C32473 - C32474 + C32475 - C32476) * C114 +
             (C32477 - C32478 + C32479 - C32480) * C47359) *
                C47440) *
               C47174 * C47463) *
              C47407 +
          ((((C31096 - C31095 + C31098 - C31097) * C114 +
             (C31100 - C31099 + C31102 - C31101) * C47359) *
                C15947 +
            ((C31103 - C31104 + C31105 - C31106) * C114 +
             (C31107 - C31108 + C31109 - C31110) * C47359) *
                C47440) *
               C47174 * C1420 +
           (((C31274 - C31273 + C31276 - C31275) * C114 +
             (C31278 - C31277 + C31280 - C31279) * C47359) *
                C15947 +
            ((C31289 - C31290 + C31291 - C31292) * C114 +
             (C31293 - C31294 + C31295 - C31296) * C47359) *
                C47440) *
               C47174 * C1421 +
           (((C31282 - C31281 + C31284 - C31283) * C114 +
             (C31286 - C31285 + C31288 - C31287) * C47359) *
                C15947 +
            ((C31297 - C31298 + C31299 - C31300) * C114 +
             (C31301 - C31302 + C31303 - C31304) * C47359) *
                C47440) *
               C47174 * C1422 +
           (((C32474 - C32473 + C32476 - C32475) * C114 +
             (C32478 - C32477 + C32480 - C32479) * C47359) *
                C15947 +
            ((C31090 * C1162 - C31092 * C1154 + C47473 * C1701 -
              C31093 * C1696) *
                 C114 +
             (C31090 * C1172 - C31092 * C1163 + C47473 * C1705 -
              C31093 * C1702) *
                 C47359) *
                C47440) *
               C47174 * C47463) *
              C47139)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C31090 * C122 - C31092 * C115 + C47473 * C491 - C31093 * C481) *
                 C114 +
             (C31090 * C136 - C31092 * C123 + C47473 * C511 - C31093 * C492) *
                 C47359) *
                C15947 +
            ((C31095 - C31096 + C31097 - C31098) * C114 +
             (C31099 - C31100 + C31101 - C31102) * C47359) *
                C47440) *
               C47174 * C47421 +
           (((C31092 * C294 - C31090 * C304 + C31093 * C931 - C47473 * C936) *
                 C114 +
             (C31092 * C305 - C31090 * C324 + C31093 * C937 - C47473 * C946) *
                 C47359) *
                C15947 +
            ((C31273 - C31274 + C31275 - C31276) * C114 +
             (C31277 - C31278 + C31279 - C31280) * C47359) *
                C47440) *
               C47174 * C47219) *
              C655 +
          ((((C31096 - C31095 + C31098 - C31097) * C114 +
             (C31100 - C31099 + C31102 - C31101) * C47359) *
                C15947 +
            ((C31103 - C31104 + C31105 - C31106) * C114 +
             (C31107 - C31108 + C31109 - C31110) * C47359) *
                C47440) *
               C47174 * C47421 +
           (((C31274 - C31273 + C31276 - C31275) * C114 +
             (C31278 - C31277 + C31280 - C31279) * C47359) *
                C15947 +
            ((C31289 - C31290 + C31291 - C31292) * C114 +
             (C31293 - C31294 + C31295 - C31296) * C47359) *
                C47440) *
               C47174 * C47219) *
              C656 +
          ((((C31104 - C31103 + C31106 - C31105) * C114 +
             (C31108 - C31107 + C31110 - C31109) * C47359) *
                C15947 +
            ((C31111 - C31112 + C31113 - C31114) * C114 +
             (C31115 - C31116 + C31117 - C31118) * C47359) *
                C47440) *
               C47174 * C47421 +
           (((C31290 - C31289 + C31292 - C31291) * C114 +
             (C31294 - C31293 + C31296 - C31295) * C47359) *
                C15947 +
            ((C31613 - C31614 + C31615 - C31616) * C114 +
             (C31617 - C31618 + C31619 - C31620) * C47359) *
                C47440) *
               C47174 * C47219) *
              C657 +
          ((((C31112 - C31111 + C31114 - C31113) * C114 +
             (C31116 - C31115 + C31118 - C31117) * C47359) *
                C15947 +
            ((C31119 - C31120 + C31121 - C31122) * C114 +
             (C31123 - C31124 + C31125 - C31126) * C47359) *
                C47440) *
               C47174 * C47421 +
           (((C31614 - C31613 + C31616 - C31615) * C114 +
             (C31618 - C31617 + C31620 - C31619) * C47359) *
                C15947 +
            ((C31090 * C320 - C31092 * C302 + C47473 * C944 - C31093 * C935) *
                 C114 +
             (C31090 * C332 - C31092 * C321 + C47473 * C950 - C31093 * C945) *
                 C47359) *
                C47440) *
               C47174 * C47219) *
              C47457)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C31090 * C122 - C31092 * C115 + C47473 * C491 - C31093 * C481) *
                  C114 +
              (C31090 * C136 - C31092 * C123 + C47473 * C511 - C31093 * C492) *
                  C47359) *
                 C15947 +
             ((C31095 - C31096 + C31097 - C31098) * C114 +
              (C31099 - C31100 + C31101 - C31102) * C47359) *
                 C47440) *
                C1816 +
            (((C31092 * C481 - C31090 * C491 + C31093 * C484 - C47473 * C497) *
                  C114 +
              (C31092 * C492 - C31090 * C511 + C31093 * C498 - C47473 * C514) *
                  C47359) *
                 C15947 +
             ((C31451 - C31452 + C31453 - C31454) * C114 +
              (C31455 - C31456 + C31457 - C31458) * C47359) *
                 C47440) *
                C1817 +
            (((C31090 * C497 - C31092 * C484 + C47473 * C2002 -
               C31093 * C1996) *
                  C114 +
              (C31090 * C514 - C31092 * C498 + C47473 * C2014 -
               C31093 * C2003) *
                  C47359) *
                 C15947 +
             ((C31459 - C31460 + C31461 - C31462) * C114 +
              (C31463 - C31464 + C31465 - C31466) * C47359) *
                 C47440) *
                C47456) *
               C47421 +
           ((((C31092 * C294 - C31090 * C304 + C31093 * C931 - C47473 * C936) *
                  C114 +
              (C31092 * C305 - C31090 * C324 + C31093 * C937 - C47473 * C946) *
                  C47359) *
                 C15947 +
             ((C31273 - C31274 + C31275 - C31276) * C114 +
              (C31277 - C31278 + C31279 - C31280) * C47359) *
                 C47440) *
                C1816 +
            (((C31090 * C936 - C31092 * C931 + C47473 * C1295 -
               C31093 * C1286) *
                  C114 +
              (C31090 * C946 - C31092 * C937 + C47473 * C1313 -
               C31093 * C1296) *
                  C47359) *
                 C15947 +
             ((C31953 - C31954 + C31955 - C31956) * C114 +
              (C31957 - C31958 + C31959 - C31960) * C47359) *
                 C47440) *
                C1817 +
            (((C31092 * C1286 - C31090 * C1295 + C31093 * C2390 -
               C47473 * C2393) *
                  C114 +
              (C31092 * C1296 - C31090 * C1313 + C31093 * C2394 -
               C47473 * C2399) *
                  C47359) *
                 C15947 +
             ((C33381 - C33382 + C33383 - C33384) * C114 +
              (C33385 - C33386 + C33387 - C33388) * C47359) *
                 C47440) *
                C47456) *
               C47219) *
              C47407 +
          (((((C31096 - C31095 + C31098 - C31097) * C114 +
              (C31100 - C31099 + C31102 - C31101) * C47359) *
                 C15947 +
             ((C31103 - C31104 + C31105 - C31106) * C114 +
              (C31107 - C31108 + C31109 - C31110) * C47359) *
                 C47440) *
                C1816 +
            (((C31452 - C31451 + C31454 - C31453) * C114 +
              (C31456 - C31455 + C31458 - C31457) * C47359) *
                 C15947 +
             ((C31467 - C31468 + C31469 - C31470) * C114 +
              (C31471 - C31472 + C31473 - C31474) * C47359) *
                 C47440) *
                C1817 +
            (((C31460 - C31459 + C31462 - C31461) * C114 +
              (C31464 - C31463 + C31466 - C31465) * C47359) *
                 C15947 +
             ((C31475 - C31476 + C31477 - C31478) * C114 +
              (C31479 - C31480 + C31481 - C31482) * C47359) *
                 C47440) *
                C47456) *
               C47421 +
           ((((C31274 - C31273 + C31276 - C31275) * C114 +
              (C31278 - C31277 + C31280 - C31279) * C47359) *
                 C15947 +
             ((C31289 - C31290 + C31291 - C31292) * C114 +
              (C31293 - C31294 + C31295 - C31296) * C47359) *
                 C47440) *
                C1816 +
            (((C31954 - C31953 + C31956 - C31955) * C114 +
              (C31958 - C31957 + C31960 - C31959) * C47359) *
                 C15947 +
             ((C31961 - C31962 + C31963 - C31964) * C114 +
              (C31965 - C31966 + C31967 - C31968) * C47359) *
                 C47440) *
                C1817 +
            (((C33382 - C33381 + C33384 - C33383) * C114 +
              (C33386 - C33385 + C33388 - C33387) * C47359) *
                 C15947 +
             ((C31090 * C1299 - C31092 * C1288 + C47473 * C2397 -
               C31093 * C2392) *
                  C114 +
              (C31090 * C1315 - C31092 * C1300 + C47473 * C2401 -
               C31093 * C2398) *
                  C47359) *
                 C47440) *
                C47456) *
               C47219) *
              C47139)) /
            (p * q * std::sqrt(p + q));
    d2ee[161] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C31090 * C122 - C31092 * C115 + C47473 * C491 - C31093 * C481) *
                 C114 +
             (C31090 * C136 - C31092 * C123 + C47473 * C511 - C31093 * C492) *
                 C47359) *
                C15947 +
            ((C31095 - C31096 + C31097 - C31098) * C114 +
             (C31099 - C31100 + C31101 - C31102) * C47359) *
                C47440) *
               C47422 +
           (((C31092 * C481 - C31090 * C491 + C31093 * C484 - C47473 * C497) *
                 C114 +
             (C31092 * C492 - C31090 * C511 + C31093 * C498 - C47473 * C514) *
                 C47359) *
                C15947 +
            ((C31451 - C31452 + C31453 - C31454) * C114 +
             (C31455 - C31456 + C31457 - C31458) * C47359) *
                C47440) *
               C47261) *
              C1420 +
          ((((C31092 * C294 - C31090 * C304 + C31093 * C931 - C47473 * C936) *
                 C114 +
             (C31092 * C305 - C31090 * C324 + C31093 * C937 - C47473 * C946) *
                 C47359) *
                C15947 +
            ((C31273 - C31274 + C31275 - C31276) * C114 +
             (C31277 - C31278 + C31279 - C31280) * C47359) *
                C47440) *
               C47422 +
           (((C31090 * C936 - C31092 * C931 + C47473 * C1295 - C31093 * C1286) *
                 C114 +
             (C31090 * C946 - C31092 * C937 + C47473 * C1313 - C31093 * C1296) *
                 C47359) *
                C15947 +
            ((C31953 - C31954 + C31955 - C31956) * C114 +
             (C31957 - C31958 + C31959 - C31960) * C47359) *
                C47440) *
               C47261) *
              C1421 +
          ((((C31090 * C310 - C31092 * C297 + C47473 * C1301 - C31093 * C1289) *
                 C114 +
             (C31090 * C327 - C31092 * C311 + C47473 * C1316 - C31093 * C1302) *
                 C47359) *
                C15947 +
            ((C31281 - C31282 + C31283 - C31284) * C114 +
             (C31285 - C31286 + C31287 - C31288) * C47359) *
                C47440) *
               C47422 +
           (((C31092 * C1289 - C31090 * C1301 + C31093 * C1292 -
              C47473 * C1307) *
                 C114 +
             (C31092 * C1302 - C31090 * C1316 + C31093 * C1308 -
              C47473 * C1319) *
                 C47359) *
                C15947 +
            ((C32675 - C32676 + C32677 - C32678) * C114 +
             (C32679 - C32680 + C32681 - C32682) * C47359) *
                C47440) *
               C47261) *
              C1422 +
          ((((C31092 * C1152 - C31090 * C1158 + C31093 * C1694 -
              C47473 * C1697) *
                 C114 +
             (C31092 * C1159 - C31090 * C1170 + C31093 * C1698 -
              C47473 * C1703) *
                 C47359) *
                C15947 +
            ((C32473 - C32474 + C32475 - C32476) * C114 +
             (C32477 - C32478 + C32479 - C32480) * C47359) *
                C47440) *
               C47422 +
           (((C31090 * C1697 - C31092 * C1694 + C47473 * C5923 -
              C31093 * C5921) *
                 C114 +
             (C31090 * C1703 - C31092 * C1698 + C47473 * C5927 -
              C31093 * C5924) *
                 C47359) *
                C15947 +
            ((C31090 * C1699 - C31092 * C1695 + C47473 * C5925 -
              C31093 * C5922) *
                 C114 +
             (C31090 * C1704 - C31092 * C1700 + C47473 * C5928 -
              C31093 * C5926) *
                 C47359) *
                C47440) *
               C47261) *
              C47463) *
         C47128) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C31090 * C122 - C31092 * C115 + C47473 * C491 - C31093 * C481) *
                  C114 +
              (C31090 * C136 - C31092 * C123 + C47473 * C511 - C31093 * C492) *
                  C47359) *
                 C15947 +
             ((C31095 - C31096 + C31097 - C31098) * C114 +
              (C31099 - C31100 + C31101 - C31102) * C47359) *
                 C47440) *
                C47422 +
            (((C31092 * C481 - C31090 * C491 + C31093 * C484 - C47473 * C497) *
                  C114 +
              (C31092 * C492 - C31090 * C511 + C31093 * C498 - C47473 * C514) *
                  C47359) *
                 C15947 +
             ((C31451 - C31452 + C31453 - C31454) * C114 +
              (C31455 - C31456 + C31457 - C31458) * C47359) *
                 C47440) *
                C47261) *
               C47421 +
           ((((C31092 * C294 - C31090 * C304 + C31093 * C931 - C47473 * C936) *
                  C114 +
              (C31092 * C305 - C31090 * C324 + C31093 * C937 - C47473 * C946) *
                  C47359) *
                 C15947 +
             ((C31273 - C31274 + C31275 - C31276) * C114 +
              (C31277 - C31278 + C31279 - C31280) * C47359) *
                 C47440) *
                C47422 +
            (((C31090 * C936 - C31092 * C931 + C47473 * C1295 -
               C31093 * C1286) *
                  C114 +
              (C31090 * C946 - C31092 * C937 + C47473 * C1313 -
               C31093 * C1296) *
                  C47359) *
                 C15947 +
             ((C31953 - C31954 + C31955 - C31956) * C114 +
              (C31957 - C31958 + C31959 - C31960) * C47359) *
                 C47440) *
                C47261) *
               C47219) *
              C291 +
          (((((C31096 - C31095 + C31098 - C31097) * C114 +
              (C31100 - C31099 + C31102 - C31101) * C47359) *
                 C15947 +
             ((C31103 - C31104 + C31105 - C31106) * C114 +
              (C31107 - C31108 + C31109 - C31110) * C47359) *
                 C47440) *
                C47422 +
            (((C31452 - C31451 + C31454 - C31453) * C114 +
              (C31456 - C31455 + C31458 - C31457) * C47359) *
                 C15947 +
             ((C31467 - C31468 + C31469 - C31470) * C114 +
              (C31471 - C31472 + C31473 - C31474) * C47359) *
                 C47440) *
                C47261) *
               C47421 +
           ((((C31274 - C31273 + C31276 - C31275) * C114 +
              (C31278 - C31277 + C31280 - C31279) * C47359) *
                 C15947 +
             ((C31289 - C31290 + C31291 - C31292) * C114 +
              (C31293 - C31294 + C31295 - C31296) * C47359) *
                 C47440) *
                C47422 +
            (((C31954 - C31953 + C31956 - C31955) * C114 +
              (C31958 - C31957 + C31960 - C31959) * C47359) *
                 C15947 +
             ((C31961 - C31962 + C31963 - C31964) * C114 +
              (C31965 - C31966 + C31967 - C31968) * C47359) *
                 C47440) *
                C47261) *
               C47219) *
              C292 +
          (((((C31104 - C31103 + C31106 - C31105) * C114 +
              (C31108 - C31107 + C31110 - C31109) * C47359) *
                 C15947 +
             ((C31111 - C31112 + C31113 - C31114) * C114 +
              (C31115 - C31116 + C31117 - C31118) * C47359) *
                 C47440) *
                C47422 +
            (((C31468 - C31467 + C31470 - C31469) * C114 +
              (C31472 - C31471 + C31474 - C31473) * C47359) *
                 C15947 +
             ((C31751 - C31752 + C31753 - C31754) * C114 +
              (C31755 - C31756 + C31757 - C31758) * C47359) *
                 C47440) *
                C47261) *
               C47421 +
           ((((C31290 - C31289 + C31292 - C31291) * C114 +
              (C31294 - C31293 + C31296 - C31295) * C47359) *
                 C15947 +
             ((C31613 - C31614 + C31615 - C31616) * C114 +
              (C31617 - C31618 + C31619 - C31620) * C47359) *
                 C47440) *
                C47422 +
            (((C31962 - C31961 + C31964 - C31963) * C114 +
              (C31966 - C31965 + C31968 - C31967) * C47359) *
                 C15947 +
             ((C31090 * C942 - C31092 * C934 + C47473 * C2167 -
               C31093 * C2166) *
                  C114 +
              (C31090 * C949 - C31092 * C943 + C47473 * C2169 -
               C31093 * C2168) *
                  C47359) *
                 C47440) *
                C47261) *
               C47219) *
              C47447)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C31090 * C122 - C31092 * C115 + C47473 * C491 - C31093 * C481) *
                 C114 +
             (C31090 * C136 - C31092 * C123 + C47473 * C511 - C31093 * C492) *
                 C47359) *
                C15947 +
            ((C31095 - C31096 + C31097 - C31098) * C114 +
             (C31099 - C31100 + C31101 - C31102) * C47359) *
                C47440) *
               C2276 +
           (((C31092 * C481 - C31090 * C491 + C31093 * C484 - C47473 * C497) *
                 C114 +
             (C31092 * C492 - C31090 * C511 + C31093 * C498 - C47473 * C514) *
                 C47359) *
                C15947 +
            ((C31451 - C31452 + C31453 - C31454) * C114 +
             (C31455 - C31456 + C31457 - C31458) * C47359) *
                C47440) *
               C2277 +
           (((C31090 * C497 - C31092 * C484 + C47473 * C2002 - C31093 * C1996) *
                 C114 +
             (C31090 * C514 - C31092 * C498 + C47473 * C2014 - C31093 * C2003) *
                 C47359) *
                C15947 +
            ((C31459 - C31460 + C31461 - C31462) * C114 +
             (C31463 - C31464 + C31465 - C31466) * C47359) *
                C47440) *
               C2278 +
           (((C31092 * C1996 - C31090 * C2002 + C31093 * C1999 -
              C47473 * C2008) *
                 C114 +
             (C31092 * C2003 - C31090 * C2014 + C31093 * C2009 -
              C47473 * C2017) *
                 C47359) *
                C15947 +
            ((C33519 - C33520 + C33521 - C33522) * C114 +
             (C33523 - C33524 + C33525 - C33526) * C47359) *
                C47440) *
               C47469) *
              C47421 +
          ((((C31092 * C294 - C31090 * C304 + C31093 * C931 - C47473 * C936) *
                 C114 +
             (C31092 * C305 - C31090 * C324 + C31093 * C937 - C47473 * C946) *
                 C47359) *
                C15947 +
            ((C31273 - C31274 + C31275 - C31276) * C114 +
             (C31277 - C31278 + C31279 - C31280) * C47359) *
                C47440) *
               C2276 +
           (((C31090 * C936 - C31092 * C931 + C47473 * C1295 - C31093 * C1286) *
                 C114 +
             (C31090 * C946 - C31092 * C937 + C47473 * C1313 - C31093 * C1296) *
                 C47359) *
                C15947 +
            ((C31953 - C31954 + C31955 - C31956) * C114 +
             (C31957 - C31958 + C31959 - C31960) * C47359) *
                C47440) *
               C2277 +
           (((C31092 * C1286 - C31090 * C1295 + C31093 * C2390 -
              C47473 * C2393) *
                 C114 +
             (C31092 * C1296 - C31090 * C1313 + C31093 * C2394 -
              C47473 * C2399) *
                 C47359) *
                C15947 +
            ((C33381 - C33382 + C33383 - C33384) * C114 +
             (C33385 - C33386 + C33387 - C33388) * C47359) *
                C47440) *
               C2278 +
           (((C31090 * C2393 - C31092 * C2390 + C47473 * C6799 -
              C31093 * C6797) *
                 C114 +
             (C31090 * C2399 - C31092 * C2394 + C47473 * C6803 -
              C31093 * C6800) *
                 C47359) *
                C15947 +
            ((C31090 * C2395 - C31092 * C2391 + C47473 * C6801 -
              C31093 * C6798) *
                 C114 +
             (C31090 * C2400 - C31092 * C2396 + C47473 * C6804 -
              C31093 * C6802) *
                 C47359) *
                C47440) *
               C47469) *
              C47219) *
         C47128) /
            (p * q * std::sqrt(p + q));
    d2ee[162] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C31090 * C122 - C31092 * C115 + C47473 * C491 -
                 C31093 * C481) *
                    C114 +
                (C31090 * C136 - C31092 * C123 + C47473 * C511 -
                 C31093 * C492) *
                    C47359) *
                   C15947 +
               ((C31095 - C31096 + C31097 - C31098) * C114 +
                (C31099 - C31100 + C31101 - C31102) * C47359) *
                   C47440) *
                  C47174 * C47156 * C108 +
              (((C31096 - C31095 + C31098 - C31097) * C114 +
                (C31100 - C31099 + C31102 - C31101) * C47359) *
                   C15947 +
               ((C31103 - C31104 + C31105 - C31106) * C114 +
                (C31107 - C31108 + C31109 - C31110) * C47359) *
                   C47440) *
                  C47174 * C47156 * C109 +
              (((C31104 - C31103 + C31106 - C31105) * C114 +
                (C31108 - C31107 + C31110 - C31109) * C47359) *
                   C15947 +
               ((C31111 - C31112 + C31113 - C31114) * C114 +
                (C31115 - C31116 + C31117 - C31118) * C47359) *
                   C47440) *
                  C47174 * C47156 * C110 +
              (((C31112 - C31111 + C31114 - C31113) * C114 +
                (C31116 - C31115 + C31118 - C31117) * C47359) *
                   C15947 +
               ((C31119 - C31120 + C31121 - C31122) * C114 +
                (C31123 - C31124 + C31125 - C31126) * C47359) *
                   C47440) *
                  C47174 * C47156 * C111 +
              (((C31120 - C31119 + C31122 - C31121) * C114 +
                (C31124 - C31123 + C31126 - C31125) * C47359) *
                   C15947 +
               ((C31090 * C132 - C31092 * C120 + C47473 * C773 -
                 C31093 * C772) *
                    C114 +
                (C31090 * C141 - C31092 * C133 + C47473 * C775 -
                 C31093 * C774) *
                    C47359) *
                   C47440) *
                  C47174 * C47156 * C112) +
         0.5 * std::pow(Pi, 2.5) *
             (((((C31090 * C122 - C31092 * C115 + C47473 * C491 -
                  C31093 * C481) *
                     C114 +
                 (C31090 * C136 - C31092 * C123 + C47473 * C511 -
                  C31093 * C492) *
                     C47359) *
                    C15947 +
                ((C31095 - C31096 + C31097 - C31098) * C114 +
                 (C31099 - C31100 + C31101 - C31102) * C47359) *
                    C47440) *
                   C47174 * C47492 +
               (((C31092 * C294 - C31090 * C304 + C31093 * C931 -
                  C47473 * C936) *
                     C114 +
                 (C31092 * C305 - C31090 * C324 + C31093 * C937 -
                  C47473 * C946) *
                     C47359) *
                    C15947 +
                ((C31273 - C31274 + C31275 - C31276) * C114 +
                 (C31277 - C31278 + C31279 - C31280) * C47359) *
                    C47440) *
                   C47174 * C47480 +
               (((C31090 * C310 - C31092 * C297 + C47473 * C1301 -
                  C31093 * C1289) *
                     C114 +
                 (C31090 * C327 - C31092 * C311 + C47473 * C1316 -
                  C31093 * C1302) *
                     C47359) *
                    C15947 +
                ((C31281 - C31282 + C31283 - C31284) * C114 +
                 (C31285 - C31286 + C31287 - C31288) * C47359) *
                    C47440) *
                   C47174 * C47453) *
                  C291 +
              ((((C31096 - C31095 + C31098 - C31097) * C114 +
                 (C31100 - C31099 + C31102 - C31101) * C47359) *
                    C15947 +
                ((C31103 - C31104 + C31105 - C31106) * C114 +
                 (C31107 - C31108 + C31109 - C31110) * C47359) *
                    C47440) *
                   C47174 * C47492 +
               (((C31274 - C31273 + C31276 - C31275) * C114 +
                 (C31278 - C31277 + C31280 - C31279) * C47359) *
                    C15947 +
                ((C31289 - C31290 + C31291 - C31292) * C114 +
                 (C31293 - C31294 + C31295 - C31296) * C47359) *
                    C47440) *
                   C47174 * C47480 +
               (((C31282 - C31281 + C31284 - C31283) * C114 +
                 (C31286 - C31285 + C31288 - C31287) * C47359) *
                    C15947 +
                ((C31297 - C31298 + C31299 - C31300) * C114 +
                 (C31301 - C31302 + C31303 - C31304) * C47359) *
                    C47440) *
                   C47174 * C47453) *
                  C292 +
              ((((C31104 - C31103 + C31106 - C31105) * C114 +
                 (C31108 - C31107 + C31110 - C31109) * C47359) *
                    C15947 +
                ((C31111 - C31112 + C31113 - C31114) * C114 +
                 (C31115 - C31116 + C31117 - C31118) * C47359) *
                    C47440) *
                   C47174 * C47492 +
               (((C31290 - C31289 + C31292 - C31291) * C114 +
                 (C31294 - C31293 + C31296 - C31295) * C47359) *
                    C15947 +
                ((C31092 * C300 - C31090 * C316 + C31093 * C934 -
                  C47473 * C942) *
                     C114 +
                 (C31092 * C317 - C31090 * C330 + C31093 * C943 -
                  C47473 * C949) *
                     C47359) *
                    C47440) *
                   C47174 * C47480 +
               (((C31298 - C31297 + C31300 - C31299) * C114 +
                 (C31302 - C31301 + C31304 - C31303) * C47359) *
                    C15947 +
                ((C31090 * C318 - C31092 * C301 + C47473 * C1585 -
                  C31093 * C1584) *
                     C114 +
                 (C31090 * C331 - C31092 * C319 + C47473 * C1587 -
                  C31093 * C1586) *
                     C47359) *
                    C47440) *
                   C47174 * C47453) *
                  C47447)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C31090 * C122 - C31092 * C115 + C47473 * C491 - C31093 * C481) *
                 C114 +
             (C31090 * C136 - C31092 * C123 + C47473 * C511 - C31093 * C492) *
                 C47359) *
                C15947 +
            ((C31095 - C31096 + C31097 - C31098) * C114 +
             (C31099 - C31100 + C31101 - C31102) * C47359) *
                C47440) *
               C47493 +
           (((C31092 * C481 - C31090 * C491 + C31093 * C484 - C47473 * C497) *
                 C114 +
             (C31092 * C492 - C31090 * C511 + C31093 * C498 - C47473 * C514) *
                 C47359) *
                C15947 +
            ((C31451 - C31452 + C31453 - C31454) * C114 +
             (C31455 - C31456 + C31457 - C31458) * C47359) *
                C47440) *
               C47482 +
           (((C31090 * C497 - C31092 * C484 + C47473 * C2002 - C31093 * C1996) *
                 C114 +
             (C31090 * C514 - C31092 * C498 + C47473 * C2014 - C31093 * C2003) *
                 C47359) *
                C15947 +
            ((C31459 - C31460 + C31461 - C31462) * C114 +
             (C31463 - C31464 + C31465 - C31466) * C47359) *
                C47440) *
               C47456) *
              C47156 * C291 +
          ((((C31096 - C31095 + C31098 - C31097) * C114 +
             (C31100 - C31099 + C31102 - C31101) * C47359) *
                C15947 +
            ((C31103 - C31104 + C31105 - C31106) * C114 +
             (C31107 - C31108 + C31109 - C31110) * C47359) *
                C47440) *
               C47493 +
           (((C31452 - C31451 + C31454 - C31453) * C114 +
             (C31456 - C31455 + C31458 - C31457) * C47359) *
                C15947 +
            ((C31467 - C31468 + C31469 - C31470) * C114 +
             (C31471 - C31472 + C31473 - C31474) * C47359) *
                C47440) *
               C47482 +
           (((C31460 - C31459 + C31462 - C31461) * C114 +
             (C31464 - C31463 + C31466 - C31465) * C47359) *
                C15947 +
            ((C31475 - C31476 + C31477 - C31478) * C114 +
             (C31479 - C31480 + C31481 - C31482) * C47359) *
                C47440) *
               C47456) *
              C47156 * C292 +
          ((((C31104 - C31103 + C31106 - C31105) * C114 +
             (C31108 - C31107 + C31110 - C31109) * C47359) *
                C15947 +
            ((C31111 - C31112 + C31113 - C31114) * C114 +
             (C31115 - C31116 + C31117 - C31118) * C47359) *
                C47440) *
               C47493 +
           (((C31468 - C31467 + C31470 - C31469) * C114 +
             (C31472 - C31471 + C31474 - C31473) * C47359) *
                C15947 +
            ((C31092 * C487 - C31090 * C503 + C31093 * C488 - C47473 * C505) *
                 C114 +
             (C31092 * C504 - C31090 * C517 + C31093 * C506 - C47473 * C518) *
                 C47359) *
                C47440) *
               C47482 +
           (((C31476 - C31475 + C31478 - C31477) * C114 +
             (C31480 - C31479 + C31482 - C31481) * C47359) *
                C15947 +
            ((C31090 * C505 - C31092 * C488 + C47473 * C2281 - C31093 * C2280) *
                 C114 +
             (C31090 * C518 - C31092 * C506 + C47473 * C2283 - C31093 * C2282) *
                 C47359) *
                C47440) *
               C47456) *
              C47156 * C47447)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C31090 * C122 - C31092 * C115 + C47473 * C491 - C31093 * C481) *
                 C114 +
             (C31090 * C136 - C31092 * C123 + C47473 * C511 - C31093 * C492) *
                 C47359) *
                C15947 +
            ((C31095 - C31096 + C31097 - C31098) * C114 +
             (C31099 - C31100 + C31101 - C31102) * C47359) *
                C47440) *
               C47174 * C1078 +
           (((C31092 * C294 - C31090 * C304 + C31093 * C931 - C47473 * C936) *
                 C114 +
             (C31092 * C305 - C31090 * C324 + C31093 * C937 - C47473 * C946) *
                 C47359) *
                C15947 +
            ((C31273 - C31274 + C31275 - C31276) * C114 +
             (C31277 - C31278 + C31279 - C31280) * C47359) *
                C47440) *
               C47174 * C1079 +
           (((C31090 * C310 - C31092 * C297 + C47473 * C1301 - C31093 * C1289) *
                 C114 +
             (C31090 * C327 - C31092 * C311 + C47473 * C1316 - C31093 * C1302) *
                 C47359) *
                C15947 +
            ((C31281 - C31282 + C31283 - C31284) * C114 +
             (C31285 - C31286 + C31287 - C31288) * C47359) *
                C47440) *
               C47174 * C47453) *
              C47489 +
          ((((C31096 - C31095 + C31098 - C31097) * C114 +
             (C31100 - C31099 + C31102 - C31101) * C47359) *
                C15947 +
            ((C31103 - C31104 + C31105 - C31106) * C114 +
             (C31107 - C31108 + C31109 - C31110) * C47359) *
                C47440) *
               C47174 * C1078 +
           (((C31274 - C31273 + C31276 - C31275) * C114 +
             (C31278 - C31277 + C31280 - C31279) * C47359) *
                C15947 +
            ((C31289 - C31290 + C31291 - C31292) * C114 +
             (C31293 - C31294 + C31295 - C31296) * C47359) *
                C47440) *
               C47174 * C1079 +
           (((C31282 - C31281 + C31284 - C31283) * C114 +
             (C31286 - C31285 + C31288 - C31287) * C47359) *
                C15947 +
            ((C31297 - C31298 + C31299 - C31300) * C114 +
             (C31301 - C31302 + C31303 - C31304) * C47359) *
                C47440) *
               C47174 * C47453) *
              C47476 +
          ((((C31104 - C31103 + C31106 - C31105) * C114 +
             (C31108 - C31107 + C31110 - C31109) * C47359) *
                C15947 +
            ((C31111 - C31112 + C31113 - C31114) * C114 +
             (C31115 - C31116 + C31117 - C31118) * C47359) *
                C47440) *
               C47174 * C1078 +
           (((C31290 - C31289 + C31292 - C31291) * C114 +
             (C31294 - C31293 + C31296 - C31295) * C47359) *
                C15947 +
            ((C31613 - C31614 + C31615 - C31616) * C114 +
             (C31617 - C31618 + C31619 - C31620) * C47359) *
                C47440) *
               C47174 * C1079 +
           (((C31298 - C31297 + C31300 - C31299) * C114 +
             (C31302 - C31301 + C31304 - C31303) * C47359) *
                C15947 +
            ((C31090 * C318 - C31092 * C301 + C47473 * C1585 - C31093 * C1584) *
                 C114 +
             (C31090 * C331 - C31092 * C319 + C47473 * C1587 - C31093 * C1586) *
                 C47359) *
                C47440) *
               C47174 * C47453) *
              C47447)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C31090 * C122 - C31092 * C115 + C47473 * C491 - C31093 * C481) *
                C114 +
            (C31090 * C136 - C31092 * C123 + C47473 * C511 - C31093 * C492) *
                C47359) *
               C15947 +
           ((C31095 - C31096 + C31097 - C31098) * C114 +
            (C31099 - C31100 + C31101 - C31102) * C47359) *
               C47440) *
              C47174 * C1146 +
          (((C31092 * C294 - C31090 * C304 + C31093 * C931 - C47473 * C936) *
                C114 +
            (C31092 * C305 - C31090 * C324 + C31093 * C937 - C47473 * C946) *
                C47359) *
               C15947 +
           ((C31273 - C31274 + C31275 - C31276) * C114 +
            (C31277 - C31278 + C31279 - C31280) * C47359) *
               C47440) *
              C47174 * C1147 +
          (((C31090 * C310 - C31092 * C297 + C47473 * C1301 - C31093 * C1289) *
                C114 +
            (C31090 * C327 - C31092 * C311 + C47473 * C1316 - C31093 * C1302) *
                C47359) *
               C15947 +
           ((C31281 - C31282 + C31283 - C31284) * C114 +
            (C31285 - C31286 + C31287 - C31288) * C47359) *
               C47440) *
              C47174 * C1148 +
          (((C31092 * C1152 - C31090 * C1158 + C31093 * C1694 -
             C47473 * C1697) *
                C114 +
            (C31092 * C1159 - C31090 * C1170 + C31093 * C1698 -
             C47473 * C1703) *
                C47359) *
               C15947 +
           ((C31092 * C1153 - C31090 * C1160 + C31093 * C1695 -
             C47473 * C1699) *
                C114 +
            (C31092 * C1161 - C31090 * C1171 + C31093 * C1700 -
             C47473 * C1704) *
                C47359) *
               C47440) *
              C47174 * C1149 +
          (((C31090 * C1164 - C31092 * C1155 + C47473 * C6413 -
             C31093 * C6411) *
                C114 +
            (C31090 * C1173 - C31092 * C1165 + C47473 * C6417 -
             C31093 * C6414) *
                C47359) *
               C15947 +
           ((C31090 * C1166 - C31092 * C1156 + C47473 * C6415 -
             C31093 * C6412) *
                C114 +
            (C31090 * C1174 - C31092 * C1167 + C47473 * C6418 -
             C31093 * C6416) *
                C47359) *
               C47440) *
              C47174 * C1150) *
         C47128) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C31090 * C122 - C31092 * C115 + C47473 * C491 - C31093 * C481) *
                 C114 +
             (C31090 * C136 - C31092 * C123 + C47473 * C511 - C31093 * C492) *
                 C47359) *
                C15947 +
            ((C31095 - C31096 + C31097 - C31098) * C114 +
             (C31099 - C31100 + C31101 - C31102) * C47359) *
                C47440) *
               C47493 +
           (((C31092 * C481 - C31090 * C491 + C31093 * C484 - C47473 * C497) *
                 C114 +
             (C31092 * C492 - C31090 * C511 + C31093 * C498 - C47473 * C514) *
                 C47359) *
                C15947 +
            ((C31451 - C31452 + C31453 - C31454) * C114 +
             (C31455 - C31456 + C31457 - C31458) * C47359) *
                C47440) *
               C47482 +
           (((C31090 * C497 - C31092 * C484 + C47473 * C2002 - C31093 * C1996) *
                 C114 +
             (C31090 * C514 - C31092 * C498 + C47473 * C2014 - C31093 * C2003) *
                 C47359) *
                C15947 +
            ((C31459 - C31460 + C31461 - C31462) * C114 +
             (C31463 - C31464 + C31465 - C31466) * C47359) *
                C47440) *
               C47456) *
              C1078 +
          ((((C31092 * C294 - C31090 * C304 + C31093 * C931 - C47473 * C936) *
                 C114 +
             (C31092 * C305 - C31090 * C324 + C31093 * C937 - C47473 * C946) *
                 C47359) *
                C15947 +
            ((C31273 - C31274 + C31275 - C31276) * C114 +
             (C31277 - C31278 + C31279 - C31280) * C47359) *
                C47440) *
               C47493 +
           (((C31090 * C936 - C31092 * C931 + C47473 * C1295 - C31093 * C1286) *
                 C114 +
             (C31090 * C946 - C31092 * C937 + C47473 * C1313 - C31093 * C1296) *
                 C47359) *
                C15947 +
            ((C31953 - C31954 + C31955 - C31956) * C114 +
             (C31957 - C31958 + C31959 - C31960) * C47359) *
                C47440) *
               C47482 +
           (((C31092 * C1286 - C31090 * C1295 + C31093 * C2390 -
              C47473 * C2393) *
                 C114 +
             (C31092 * C1296 - C31090 * C1313 + C31093 * C2394 -
              C47473 * C2399) *
                 C47359) *
                C15947 +
            ((C31092 * C1287 - C31090 * C1297 + C31093 * C2391 -
              C47473 * C2395) *
                 C114 +
             (C31092 * C1298 - C31090 * C1314 + C31093 * C2396 -
              C47473 * C2400) *
                 C47359) *
                C47440) *
               C47456) *
              C1079 +
          ((((C31090 * C310 - C31092 * C297 + C47473 * C1301 - C31093 * C1289) *
                 C114 +
             (C31090 * C327 - C31092 * C311 + C47473 * C1316 - C31093 * C1302) *
                 C47359) *
                C15947 +
            ((C31281 - C31282 + C31283 - C31284) * C114 +
             (C31285 - C31286 + C31287 - C31288) * C47359) *
                C47440) *
               C47493 +
           (((C31092 * C1289 - C31090 * C1301 + C31093 * C1292 -
              C47473 * C1307) *
                 C114 +
             (C31092 * C1302 - C31090 * C1316 + C31093 * C1308 -
              C47473 * C1319) *
                 C47359) *
                C15947 +
            ((C31092 * C1290 - C31090 * C1303 + C31093 * C1293 -
              C47473 * C1309) *
                 C114 +
             (C31092 * C1304 - C31090 * C1317 + C31093 * C1310 -
              C47473 * C1320) *
                 C47359) *
                C47440) *
               C47482 +
           (((C31090 * C1307 - C31092 * C1292 + C47473 * C7269 -
              C31093 * C7267) *
                 C114 +
             (C31090 * C1319 - C31092 * C1308 + C47473 * C7273 -
              C31093 * C7270) *
                 C47359) *
                C15947 +
            ((C31090 * C1309 - C31092 * C1293 + C47473 * C7271 -
              C31093 * C7268) *
                 C114 +
             (C31090 * C1320 - C31092 * C1310 + C47473 * C7274 -
              C31093 * C7272) *
                 C47359) *
                C47440) *
               C47456) *
              C47453) *
         C47128) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C31090 * C122 - C31092 * C115 + C47473 * C491 - C31093 * C481) *
                 C114 +
             (C31090 * C136 - C31092 * C123 + C47473 * C511 - C31093 * C492) *
                 C47359) *
                C15947 +
            ((C31095 - C31096 + C31097 - C31098) * C114 +
             (C31099 - C31100 + C31101 - C31102) * C47359) *
                C47440) *
               C1816 +
           (((C31092 * C481 - C31090 * C491 + C31093 * C484 - C47473 * C497) *
                 C114 +
             (C31092 * C492 - C31090 * C511 + C31093 * C498 - C47473 * C514) *
                 C47359) *
                C15947 +
            ((C31451 - C31452 + C31453 - C31454) * C114 +
             (C31455 - C31456 + C31457 - C31458) * C47359) *
                C47440) *
               C1817 +
           (((C31090 * C497 - C31092 * C484 + C47473 * C2002 - C31093 * C1996) *
                 C114 +
             (C31090 * C514 - C31092 * C498 + C47473 * C2014 - C31093 * C2003) *
                 C47359) *
                C15947 +
            ((C31459 - C31460 + C31461 - C31462) * C114 +
             (C31463 - C31464 + C31465 - C31466) * C47359) *
                C47440) *
               C47456) *
              C47156 * C47489 +
          ((((C31096 - C31095 + C31098 - C31097) * C114 +
             (C31100 - C31099 + C31102 - C31101) * C47359) *
                C15947 +
            ((C31103 - C31104 + C31105 - C31106) * C114 +
             (C31107 - C31108 + C31109 - C31110) * C47359) *
                C47440) *
               C1816 +
           (((C31452 - C31451 + C31454 - C31453) * C114 +
             (C31456 - C31455 + C31458 - C31457) * C47359) *
                C15947 +
            ((C31467 - C31468 + C31469 - C31470) * C114 +
             (C31471 - C31472 + C31473 - C31474) * C47359) *
                C47440) *
               C1817 +
           (((C31460 - C31459 + C31462 - C31461) * C114 +
             (C31464 - C31463 + C31466 - C31465) * C47359) *
                C15947 +
            ((C31475 - C31476 + C31477 - C31478) * C114 +
             (C31479 - C31480 + C31481 - C31482) * C47359) *
                C47440) *
               C47456) *
              C47156 * C47476 +
          ((((C31104 - C31103 + C31106 - C31105) * C114 +
             (C31108 - C31107 + C31110 - C31109) * C47359) *
                C15947 +
            ((C31111 - C31112 + C31113 - C31114) * C114 +
             (C31115 - C31116 + C31117 - C31118) * C47359) *
                C47440) *
               C1816 +
           (((C31468 - C31467 + C31470 - C31469) * C114 +
             (C31472 - C31471 + C31474 - C31473) * C47359) *
                C15947 +
            ((C31751 - C31752 + C31753 - C31754) * C114 +
             (C31755 - C31756 + C31757 - C31758) * C47359) *
                C47440) *
               C1817 +
           (((C31476 - C31475 + C31478 - C31477) * C114 +
             (C31480 - C31479 + C31482 - C31481) * C47359) *
                C15947 +
            ((C31090 * C505 - C31092 * C488 + C47473 * C2281 - C31093 * C2280) *
                 C114 +
             (C31090 * C518 - C31092 * C506 + C47473 * C2283 - C31093 * C2282) *
                 C47359) *
                C47440) *
               C47456) *
              C47156 * C47447)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C31090 * C122 - C31092 * C115 + C47473 * C491 - C31093 * C481) *
                 C114 +
             (C31090 * C136 - C31092 * C123 + C47473 * C511 - C31093 * C492) *
                 C47359) *
                C15947 +
            ((C31095 - C31096 + C31097 - C31098) * C114 +
             (C31099 - C31100 + C31101 - C31102) * C47359) *
                C47440) *
               C1816 +
           (((C31092 * C481 - C31090 * C491 + C31093 * C484 - C47473 * C497) *
                 C114 +
             (C31092 * C492 - C31090 * C511 + C31093 * C498 - C47473 * C514) *
                 C47359) *
                C15947 +
            ((C31451 - C31452 + C31453 - C31454) * C114 +
             (C31455 - C31456 + C31457 - C31458) * C47359) *
                C47440) *
               C1817 +
           (((C31090 * C497 - C31092 * C484 + C47473 * C2002 - C31093 * C1996) *
                 C114 +
             (C31090 * C514 - C31092 * C498 + C47473 * C2014 - C31093 * C2003) *
                 C47359) *
                C15947 +
            ((C31459 - C31460 + C31461 - C31462) * C114 +
             (C31463 - C31464 + C31465 - C31466) * C47359) *
                C47440) *
               C47456) *
              C47492 +
          ((((C31092 * C294 - C31090 * C304 + C31093 * C931 - C47473 * C936) *
                 C114 +
             (C31092 * C305 - C31090 * C324 + C31093 * C937 - C47473 * C946) *
                 C47359) *
                C15947 +
            ((C31273 - C31274 + C31275 - C31276) * C114 +
             (C31277 - C31278 + C31279 - C31280) * C47359) *
                C47440) *
               C1816 +
           (((C31090 * C936 - C31092 * C931 + C47473 * C1295 - C31093 * C1286) *
                 C114 +
             (C31090 * C946 - C31092 * C937 + C47473 * C1313 - C31093 * C1296) *
                 C47359) *
                C15947 +
            ((C31953 - C31954 + C31955 - C31956) * C114 +
             (C31957 - C31958 + C31959 - C31960) * C47359) *
                C47440) *
               C1817 +
           (((C31092 * C1286 - C31090 * C1295 + C31093 * C2390 -
              C47473 * C2393) *
                 C114 +
             (C31092 * C1296 - C31090 * C1313 + C31093 * C2394 -
              C47473 * C2399) *
                 C47359) *
                C15947 +
            ((C31092 * C1287 - C31090 * C1297 + C31093 * C2391 -
              C47473 * C2395) *
                 C114 +
             (C31092 * C1298 - C31090 * C1314 + C31093 * C2396 -
              C47473 * C2400) *
                 C47359) *
                C47440) *
               C47456) *
              C47480 +
          ((((C31090 * C310 - C31092 * C297 + C47473 * C1301 - C31093 * C1289) *
                 C114 +
             (C31090 * C327 - C31092 * C311 + C47473 * C1316 - C31093 * C1302) *
                 C47359) *
                C15947 +
            ((C31281 - C31282 + C31283 - C31284) * C114 +
             (C31285 - C31286 + C31287 - C31288) * C47359) *
                C47440) *
               C1816 +
           (((C31092 * C1289 - C31090 * C1301 + C31093 * C1292 -
              C47473 * C1307) *
                 C114 +
             (C31092 * C1302 - C31090 * C1316 + C31093 * C1308 -
              C47473 * C1319) *
                 C47359) *
                C15947 +
            ((C32675 - C32676 + C32677 - C32678) * C114 +
             (C32679 - C32680 + C32681 - C32682) * C47359) *
                C47440) *
               C1817 +
           (((C31090 * C1307 - C31092 * C1292 + C47473 * C7269 -
              C31093 * C7267) *
                 C114 +
             (C31090 * C1319 - C31092 * C1308 + C47473 * C7273 -
              C31093 * C7270) *
                 C47359) *
                C15947 +
            ((C31090 * C1309 - C31092 * C1293 + C47473 * C7271 -
              C31093 * C7268) *
                 C114 +
             (C31090 * C1320 - C31092 * C1310 + C47473 * C7274 -
              C31093 * C7272) *
                 C47359) *
                C47440) *
               C47456) *
              C47453) *
         C47128) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C31090 * C122 - C31092 * C115 + C47473 * C491 - C31093 * C481) *
                C114 +
            (C31090 * C136 - C31092 * C123 + C47473 * C511 - C31093 * C492) *
                C47359) *
               C15947 +
           ((C31095 - C31096 + C31097 - C31098) * C114 +
            (C31099 - C31100 + C31101 - C31102) * C47359) *
               C47440) *
              C1991 +
          (((C31092 * C481 - C31090 * C491 + C31093 * C484 - C47473 * C497) *
                C114 +
            (C31092 * C492 - C31090 * C511 + C31093 * C498 - C47473 * C514) *
                C47359) *
               C15947 +
           ((C31451 - C31452 + C31453 - C31454) * C114 +
            (C31455 - C31456 + C31457 - C31458) * C47359) *
               C47440) *
              C1992 +
          (((C31090 * C497 - C31092 * C484 + C47473 * C2002 - C31093 * C1996) *
                C114 +
            (C31090 * C514 - C31092 * C498 + C47473 * C2014 - C31093 * C2003) *
                C47359) *
               C15947 +
           ((C31459 - C31460 + C31461 - C31462) * C114 +
            (C31463 - C31464 + C31465 - C31466) * C47359) *
               C47440) *
              C1993 +
          (((C31092 * C1996 - C31090 * C2002 + C31093 * C1999 -
             C47473 * C2008) *
                C114 +
            (C31092 * C2003 - C31090 * C2014 + C31093 * C2009 -
             C47473 * C2017) *
                C47359) *
               C15947 +
           ((C31092 * C1997 - C31090 * C2004 + C31093 * C2000 -
             C47473 * C2010) *
                C114 +
            (C31092 * C2005 - C31090 * C2015 + C31093 * C2011 -
             C47473 * C2018) *
                C47359) *
               C47440) *
              C1994 +
          (((C31090 * C2008 - C31092 * C1999 + C47473 * C12423 -
             C31093 * C12421) *
                C114 +
            (C31090 * C2017 - C31092 * C2009 + C47473 * C12427 -
             C31093 * C12424) *
                C47359) *
               C15947 +
           ((C31090 * C2010 - C31092 * C2000 + C47473 * C12425 -
             C31093 * C12422) *
                C114 +
            (C31090 * C2018 - C31092 * C2011 + C47473 * C12428 -
             C31093 * C12426) *
                C47359) *
               C47440) *
              C1995) *
         C47156 * C47128) /
            (p * q * std::sqrt(p + q));
    d2ee[163] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C31090 * C122 - C31092 * C115 + C47473 * C491 - C31093 * C481) *
                  C114 +
              (C31090 * C136 - C31092 * C123 + C47473 * C511 - C31093 * C492) *
                  C47359) *
                 C15947 +
             ((C31095 - C31096 + C31097 - C31098) * C114 +
              (C31099 - C31100 + C31101 - C31102) * C47359) *
                 C47440) *
                C47422 +
            (((C31092 * C481 - C31090 * C491 + C31093 * C484 - C47473 * C497) *
                  C114 +
              (C31092 * C492 - C31090 * C511 + C31093 * C498 - C47473 * C514) *
                  C47359) *
                 C15947 +
             ((C31451 - C31452 + C31453 - C31454) * C114 +
              (C31455 - C31456 + C31457 - C31458) * C47359) *
                 C47440) *
                C47261) *
               C1078 +
           ((((C31092 * C294 - C31090 * C304 + C31093 * C931 - C47473 * C936) *
                  C114 +
              (C31092 * C305 - C31090 * C324 + C31093 * C937 - C47473 * C946) *
                  C47359) *
                 C15947 +
             ((C31273 - C31274 + C31275 - C31276) * C114 +
              (C31277 - C31278 + C31279 - C31280) * C47359) *
                 C47440) *
                C47422 +
            (((C31090 * C936 - C31092 * C931 + C47473 * C1295 -
               C31093 * C1286) *
                  C114 +
              (C31090 * C946 - C31092 * C937 + C47473 * C1313 -
               C31093 * C1296) *
                  C47359) *
                 C15947 +
             ((C31953 - C31954 + C31955 - C31956) * C114 +
              (C31957 - C31958 + C31959 - C31960) * C47359) *
                 C47440) *
                C47261) *
               C1079 +
           ((((C31090 * C310 - C31092 * C297 + C47473 * C1301 -
               C31093 * C1289) *
                  C114 +
              (C31090 * C327 - C31092 * C311 + C47473 * C1316 -
               C31093 * C1302) *
                  C47359) *
                 C15947 +
             ((C31281 - C31282 + C31283 - C31284) * C114 +
              (C31285 - C31286 + C31287 - C31288) * C47359) *
                 C47440) *
                C47422 +
            (((C31092 * C1289 - C31090 * C1301 + C31093 * C1292 -
               C47473 * C1307) *
                  C114 +
              (C31092 * C1302 - C31090 * C1316 + C31093 * C1308 -
               C47473 * C1319) *
                  C47359) *
                 C15947 +
             ((C32675 - C32676 + C32677 - C32678) * C114 +
              (C32679 - C32680 + C32681 - C32682) * C47359) *
                 C47440) *
                C47261) *
               C47453) *
              C47407 +
          (((((C31096 - C31095 + C31098 - C31097) * C114 +
              (C31100 - C31099 + C31102 - C31101) * C47359) *
                 C15947 +
             ((C31103 - C31104 + C31105 - C31106) * C114 +
              (C31107 - C31108 + C31109 - C31110) * C47359) *
                 C47440) *
                C47422 +
            (((C31452 - C31451 + C31454 - C31453) * C114 +
              (C31456 - C31455 + C31458 - C31457) * C47359) *
                 C15947 +
             ((C31467 - C31468 + C31469 - C31470) * C114 +
              (C31471 - C31472 + C31473 - C31474) * C47359) *
                 C47440) *
                C47261) *
               C1078 +
           ((((C31274 - C31273 + C31276 - C31275) * C114 +
              (C31278 - C31277 + C31280 - C31279) * C47359) *
                 C15947 +
             ((C31289 - C31290 + C31291 - C31292) * C114 +
              (C31293 - C31294 + C31295 - C31296) * C47359) *
                 C47440) *
                C47422 +
            (((C31954 - C31953 + C31956 - C31955) * C114 +
              (C31958 - C31957 + C31960 - C31959) * C47359) *
                 C15947 +
             ((C31961 - C31962 + C31963 - C31964) * C114 +
              (C31965 - C31966 + C31967 - C31968) * C47359) *
                 C47440) *
                C47261) *
               C1079 +
           ((((C31282 - C31281 + C31284 - C31283) * C114 +
              (C31286 - C31285 + C31288 - C31287) * C47359) *
                 C15947 +
             ((C31297 - C31298 + C31299 - C31300) * C114 +
              (C31301 - C31302 + C31303 - C31304) * C47359) *
                 C47440) *
                C47422 +
            (((C32676 - C32675 + C32678 - C32677) * C114 +
              (C32680 - C32679 + C32682 - C32681) * C47359) *
                 C15947 +
             ((C31090 * C1305 - C31092 * C1291 + C47473 * C1311 -
               C31093 * C1294) *
                  C114 +
              (C31090 * C1318 - C31092 * C1306 + C47473 * C1321 -
               C31093 * C1312) *
                  C47359) *
                 C47440) *
                C47261) *
               C47453) *
              C47139)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C31090 * C122 - C31092 * C115 + C47473 * C491 - C31093 * C481) *
                 C114 +
             (C31090 * C136 - C31092 * C123 + C47473 * C511 - C31093 * C492) *
                 C47359) *
                C15947 +
            ((C31095 - C31096 + C31097 - C31098) * C114 +
             (C31099 - C31100 + C31101 - C31102) * C47359) *
                C47440) *
               C47422 +
           (((C31092 * C481 - C31090 * C491 + C31093 * C484 - C47473 * C497) *
                 C114 +
             (C31092 * C492 - C31090 * C511 + C31093 * C498 - C47473 * C514) *
                 C47359) *
                C15947 +
            ((C31451 - C31452 + C31453 - C31454) * C114 +
             (C31455 - C31456 + C31457 - C31458) * C47359) *
                C47440) *
               C47261) *
              C47156 * C655 +
          ((((C31096 - C31095 + C31098 - C31097) * C114 +
             (C31100 - C31099 + C31102 - C31101) * C47359) *
                C15947 +
            ((C31103 - C31104 + C31105 - C31106) * C114 +
             (C31107 - C31108 + C31109 - C31110) * C47359) *
                C47440) *
               C47422 +
           (((C31452 - C31451 + C31454 - C31453) * C114 +
             (C31456 - C31455 + C31458 - C31457) * C47359) *
                C15947 +
            ((C31467 - C31468 + C31469 - C31470) * C114 +
             (C31471 - C31472 + C31473 - C31474) * C47359) *
                C47440) *
               C47261) *
              C47156 * C656 +
          ((((C31104 - C31103 + C31106 - C31105) * C114 +
             (C31108 - C31107 + C31110 - C31109) * C47359) *
                C15947 +
            ((C31111 - C31112 + C31113 - C31114) * C114 +
             (C31115 - C31116 + C31117 - C31118) * C47359) *
                C47440) *
               C47422 +
           (((C31468 - C31467 + C31470 - C31469) * C114 +
             (C31472 - C31471 + C31474 - C31473) * C47359) *
                C15947 +
            ((C31751 - C31752 + C31753 - C31754) * C114 +
             (C31755 - C31756 + C31757 - C31758) * C47359) *
                C47440) *
               C47261) *
              C47156 * C657 +
          ((((C31112 - C31111 + C31114 - C31113) * C114 +
             (C31116 - C31115 + C31118 - C31117) * C47359) *
                C15947 +
            ((C31119 - C31120 + C31121 - C31122) * C114 +
             (C31123 - C31124 + C31125 - C31126) * C47359) *
                C47440) *
               C47422 +
           (((C31752 - C31751 + C31754 - C31753) * C114 +
             (C31756 - C31755 + C31758 - C31757) * C47359) *
                C15947 +
            ((C31090 * C507 - C31092 * C489 + C47473 * C509 - C31093 * C490) *
                 C114 +
             (C31090 * C519 - C31092 * C508 + C47473 * C520 - C31093 * C510) *
                 C47359) *
                C47440) *
               C47261) *
              C47156 * C47457)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C31090 * C122 - C31092 * C115 + C47473 * C491 - C31093 * C481) *
                 C114 +
             (C31090 * C136 - C31092 * C123 + C47473 * C511 - C31093 * C492) *
                 C47359) *
                C15947 +
            ((C31095 - C31096 + C31097 - C31098) * C114 +
             (C31099 - C31100 + C31101 - C31102) * C47359) *
                C47440) *
               C2276 +
           (((C31092 * C481 - C31090 * C491 + C31093 * C484 - C47473 * C497) *
                 C114 +
             (C31092 * C492 - C31090 * C511 + C31093 * C498 - C47473 * C514) *
                 C47359) *
                C15947 +
            ((C31451 - C31452 + C31453 - C31454) * C114 +
             (C31455 - C31456 + C31457 - C31458) * C47359) *
                C47440) *
               C2277 +
           (((C31090 * C497 - C31092 * C484 + C47473 * C2002 - C31093 * C1996) *
                 C114 +
             (C31090 * C514 - C31092 * C498 + C47473 * C2014 - C31093 * C2003) *
                 C47359) *
                C15947 +
            ((C31459 - C31460 + C31461 - C31462) * C114 +
             (C31463 - C31464 + C31465 - C31466) * C47359) *
                C47440) *
               C2278 +
           (((C31092 * C1996 - C31090 * C2002 + C31093 * C1999 -
              C47473 * C2008) *
                 C114 +
             (C31092 * C2003 - C31090 * C2014 + C31093 * C2009 -
              C47473 * C2017) *
                 C47359) *
                C15947 +
            ((C33519 - C33520 + C33521 - C33522) * C114 +
             (C33523 - C33524 + C33525 - C33526) * C47359) *
                C47440) *
               C47469) *
              C47156 * C47407 +
          ((((C31096 - C31095 + C31098 - C31097) * C114 +
             (C31100 - C31099 + C31102 - C31101) * C47359) *
                C15947 +
            ((C31103 - C31104 + C31105 - C31106) * C114 +
             (C31107 - C31108 + C31109 - C31110) * C47359) *
                C47440) *
               C2276 +
           (((C31452 - C31451 + C31454 - C31453) * C114 +
             (C31456 - C31455 + C31458 - C31457) * C47359) *
                C15947 +
            ((C31467 - C31468 + C31469 - C31470) * C114 +
             (C31471 - C31472 + C31473 - C31474) * C47359) *
                C47440) *
               C2277 +
           (((C31460 - C31459 + C31462 - C31461) * C114 +
             (C31464 - C31463 + C31466 - C31465) * C47359) *
                C15947 +
            ((C31475 - C31476 + C31477 - C31478) * C114 +
             (C31479 - C31480 + C31481 - C31482) * C47359) *
                C47440) *
               C2278 +
           (((C33520 - C33519 + C33522 - C33521) * C114 +
             (C33524 - C33523 + C33526 - C33525) * C47359) *
                C15947 +
            ((C31090 * C2006 - C31092 * C1998 + C47473 * C2012 -
              C31093 * C2001) *
                 C114 +
             (C31090 * C2016 - C31092 * C2007 + C47473 * C2019 -
              C31093 * C2013) *
                 C47359) *
                C47440) *
               C47469) *
              C47156 * C47139)) /
            (p * q * std::sqrt(p + q));
    d2ee[164] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C31090 * C122 - C31092 * C115 + C47473 * C491 - C31093 * C481) *
                 C114 +
             (C31090 * C136 - C31092 * C123 + C47473 * C511 - C31093 * C492) *
                 C47359) *
                C15947 +
            ((C31095 - C31096 + C31097 - C31098) * C114 +
             (C31099 - C31100 + C31101 - C31102) * C47359) *
                C47440) *
               C47174 * C47492 +
           (((C31092 * C294 - C31090 * C304 + C31093 * C931 - C47473 * C936) *
                 C114 +
             (C31092 * C305 - C31090 * C324 + C31093 * C937 - C47473 * C946) *
                 C47359) *
                C15947 +
            ((C31273 - C31274 + C31275 - C31276) * C114 +
             (C31277 - C31278 + C31279 - C31280) * C47359) *
                C47440) *
               C47174 * C47480 +
           (((C31090 * C310 - C31092 * C297 + C47473 * C1301 - C31093 * C1289) *
                 C114 +
             (C31090 * C327 - C31092 * C311 + C47473 * C1316 - C31093 * C1302) *
                 C47359) *
                C15947 +
            ((C31281 - C31282 + C31283 - C31284) * C114 +
             (C31285 - C31286 + C31287 - C31288) * C47359) *
                C47440) *
               C47174 * C47453) *
              C291 +
          ((((C31096 - C31095 + C31098 - C31097) * C114 +
             (C31100 - C31099 + C31102 - C31101) * C47359) *
                C15947 +
            ((C31103 - C31104 + C31105 - C31106) * C114 +
             (C31107 - C31108 + C31109 - C31110) * C47359) *
                C47440) *
               C47174 * C47492 +
           (((C31274 - C31273 + C31276 - C31275) * C114 +
             (C31278 - C31277 + C31280 - C31279) * C47359) *
                C15947 +
            ((C31289 - C31290 + C31291 - C31292) * C114 +
             (C31293 - C31294 + C31295 - C31296) * C47359) *
                C47440) *
               C47174 * C47480 +
           (((C31282 - C31281 + C31284 - C31283) * C114 +
             (C31286 - C31285 + C31288 - C31287) * C47359) *
                C15947 +
            ((C31297 - C31298 + C31299 - C31300) * C114 +
             (C31301 - C31302 + C31303 - C31304) * C47359) *
                C47440) *
               C47174 * C47453) *
              C292 +
          ((((C31104 - C31103 + C31106 - C31105) * C114 +
             (C31108 - C31107 + C31110 - C31109) * C47359) *
                C15947 +
            ((C31111 - C31112 + C31113 - C31114) * C114 +
             (C31115 - C31116 + C31117 - C31118) * C47359) *
                C47440) *
               C47174 * C47492 +
           (((C31290 - C31289 + C31292 - C31291) * C114 +
             (C31294 - C31293 + C31296 - C31295) * C47359) *
                C15947 +
            ((C31092 * C300 - C31090 * C316 + C31093 * C934 - C47473 * C942) *
                 C114 +
             (C31092 * C317 - C31090 * C330 + C31093 * C943 - C47473 * C949) *
                 C47359) *
                C47440) *
               C47174 * C47480 +
           (((C31298 - C31297 + C31300 - C31299) * C114 +
             (C31302 - C31301 + C31304 - C31303) * C47359) *
                C15947 +
            ((C31090 * C318 - C31092 * C301 + C47473 * C1585 - C31093 * C1584) *
                 C114 +
             (C31090 * C331 - C31092 * C319 + C47473 * C1587 - C31093 * C1586) *
                 C47359) *
                C47440) *
               C47174 * C47453) *
              C47447)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C31090 * C122 - C31092 * C115 + C47473 * C491 - C31093 * C481) *
                C114 +
            (C31090 * C136 - C31092 * C123 + C47473 * C511 - C31093 * C492) *
                C47359) *
               C15947 +
           ((C31095 - C31096 + C31097 - C31098) * C114 +
            (C31099 - C31100 + C31101 - C31102) * C47359) *
               C47440) *
              C47174 * C47156 * C108 +
          (((C31096 - C31095 + C31098 - C31097) * C114 +
            (C31100 - C31099 + C31102 - C31101) * C47359) *
               C15947 +
           ((C31103 - C31104 + C31105 - C31106) * C114 +
            (C31107 - C31108 + C31109 - C31110) * C47359) *
               C47440) *
              C47174 * C47156 * C109 +
          (((C31104 - C31103 + C31106 - C31105) * C114 +
            (C31108 - C31107 + C31110 - C31109) * C47359) *
               C15947 +
           ((C31111 - C31112 + C31113 - C31114) * C114 +
            (C31115 - C31116 + C31117 - C31118) * C47359) *
               C47440) *
              C47174 * C47156 * C110 +
          (((C31112 - C31111 + C31114 - C31113) * C114 +
            (C31116 - C31115 + C31118 - C31117) * C47359) *
               C15947 +
           ((C31119 - C31120 + C31121 - C31122) * C114 +
            (C31123 - C31124 + C31125 - C31126) * C47359) *
               C47440) *
              C47174 * C47156 * C111 +
          (((C31120 - C31119 + C31122 - C31121) * C114 +
            (C31124 - C31123 + C31126 - C31125) * C47359) *
               C15947 +
           ((C31090 * C132 - C31092 * C120 + C47473 * C773 - C31093 * C772) *
                C114 +
            (C31090 * C141 - C31092 * C133 + C47473 * C775 - C31093 * C774) *
                C47359) *
               C47440) *
              C47174 * C47156 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C31090 * C122 - C31092 * C115 + C47473 * C491 - C31093 * C481) *
                 C114 +
             (C31090 * C136 - C31092 * C123 + C47473 * C511 - C31093 * C492) *
                 C47359) *
                C15947 +
            ((C31095 - C31096 + C31097 - C31098) * C114 +
             (C31099 - C31100 + C31101 - C31102) * C47359) *
                C47440) *
               C47174 * C1078 +
           (((C31092 * C294 - C31090 * C304 + C31093 * C931 - C47473 * C936) *
                 C114 +
             (C31092 * C305 - C31090 * C324 + C31093 * C937 - C47473 * C946) *
                 C47359) *
                C15947 +
            ((C31273 - C31274 + C31275 - C31276) * C114 +
             (C31277 - C31278 + C31279 - C31280) * C47359) *
                C47440) *
               C47174 * C1079 +
           (((C31090 * C310 - C31092 * C297 + C47473 * C1301 - C31093 * C1289) *
                 C114 +
             (C31090 * C327 - C31092 * C311 + C47473 * C1316 - C31093 * C1302) *
                 C47359) *
                C15947 +
            ((C31281 - C31282 + C31283 - C31284) * C114 +
             (C31285 - C31286 + C31287 - C31288) * C47359) *
                C47440) *
               C47174 * C47453) *
              C47489 +
          ((((C31096 - C31095 + C31098 - C31097) * C114 +
             (C31100 - C31099 + C31102 - C31101) * C47359) *
                C15947 +
            ((C31103 - C31104 + C31105 - C31106) * C114 +
             (C31107 - C31108 + C31109 - C31110) * C47359) *
                C47440) *
               C47174 * C1078 +
           (((C31274 - C31273 + C31276 - C31275) * C114 +
             (C31278 - C31277 + C31280 - C31279) * C47359) *
                C15947 +
            ((C31289 - C31290 + C31291 - C31292) * C114 +
             (C31293 - C31294 + C31295 - C31296) * C47359) *
                C47440) *
               C47174 * C1079 +
           (((C31282 - C31281 + C31284 - C31283) * C114 +
             (C31286 - C31285 + C31288 - C31287) * C47359) *
                C15947 +
            ((C31297 - C31298 + C31299 - C31300) * C114 +
             (C31301 - C31302 + C31303 - C31304) * C47359) *
                C47440) *
               C47174 * C47453) *
              C47476 +
          ((((C31104 - C31103 + C31106 - C31105) * C114 +
             (C31108 - C31107 + C31110 - C31109) * C47359) *
                C15947 +
            ((C31111 - C31112 + C31113 - C31114) * C114 +
             (C31115 - C31116 + C31117 - C31118) * C47359) *
                C47440) *
               C47174 * C1078 +
           (((C31290 - C31289 + C31292 - C31291) * C114 +
             (C31294 - C31293 + C31296 - C31295) * C47359) *
                C15947 +
            ((C31613 - C31614 + C31615 - C31616) * C114 +
             (C31617 - C31618 + C31619 - C31620) * C47359) *
                C47440) *
               C47174 * C1079 +
           (((C31298 - C31297 + C31300 - C31299) * C114 +
             (C31302 - C31301 + C31304 - C31303) * C47359) *
                C15947 +
            ((C31090 * C318 - C31092 * C301 + C47473 * C1585 - C31093 * C1584) *
                 C114 +
             (C31090 * C331 - C31092 * C319 + C47473 * C1587 - C31093 * C1586) *
                 C47359) *
                C47440) *
               C47174 * C47453) *
              C47447)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C31090 * C122 - C31092 * C115 + C47473 * C491 - C31093 * C481) *
                C114 +
            (C31090 * C136 - C31092 * C123 + C47473 * C511 - C31093 * C492) *
                C47359) *
               C15947 +
           ((C31095 - C31096 + C31097 - C31098) * C114 +
            (C31099 - C31100 + C31101 - C31102) * C47359) *
               C47440) *
              C47174 * C1146 +
          (((C31092 * C294 - C31090 * C304 + C31093 * C931 - C47473 * C936) *
                C114 +
            (C31092 * C305 - C31090 * C324 + C31093 * C937 - C47473 * C946) *
                C47359) *
               C15947 +
           ((C31273 - C31274 + C31275 - C31276) * C114 +
            (C31277 - C31278 + C31279 - C31280) * C47359) *
               C47440) *
              C47174 * C1147 +
          (((C31090 * C310 - C31092 * C297 + C47473 * C1301 - C31093 * C1289) *
                C114 +
            (C31090 * C327 - C31092 * C311 + C47473 * C1316 - C31093 * C1302) *
                C47359) *
               C15947 +
           ((C31281 - C31282 + C31283 - C31284) * C114 +
            (C31285 - C31286 + C31287 - C31288) * C47359) *
               C47440) *
              C47174 * C1148 +
          (((C31092 * C1152 - C31090 * C1158 + C31093 * C1694 -
             C47473 * C1697) *
                C114 +
            (C31092 * C1159 - C31090 * C1170 + C31093 * C1698 -
             C47473 * C1703) *
                C47359) *
               C15947 +
           ((C31092 * C1153 - C31090 * C1160 + C31093 * C1695 -
             C47473 * C1699) *
                C114 +
            (C31092 * C1161 - C31090 * C1171 + C31093 * C1700 -
             C47473 * C1704) *
                C47359) *
               C47440) *
              C47174 * C1149 +
          (((C31090 * C1164 - C31092 * C1155 + C47473 * C6413 -
             C31093 * C6411) *
                C114 +
            (C31090 * C1173 - C31092 * C1165 + C47473 * C6417 -
             C31093 * C6414) *
                C47359) *
               C15947 +
           ((C31090 * C1166 - C31092 * C1156 + C47473 * C6415 -
             C31093 * C6412) *
                C114 +
            (C31090 * C1174 - C31092 * C1167 + C47473 * C6418 -
             C31093 * C6416) *
                C47359) *
               C47440) *
              C47174 * C1150) *
         C47128) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C31090 * C122 - C31092 * C115 + C47473 * C491 - C31093 * C481) *
                 C114 +
             (C31090 * C136 - C31092 * C123 + C47473 * C511 - C31093 * C492) *
                 C47359) *
                C15947 +
            ((C31095 - C31096 + C31097 - C31098) * C114 +
             (C31099 - C31100 + C31101 - C31102) * C47359) *
                C47440) *
               C1816 +
           (((C31092 * C481 - C31090 * C491 + C31093 * C484 - C47473 * C497) *
                 C114 +
             (C31092 * C492 - C31090 * C511 + C31093 * C498 - C47473 * C514) *
                 C47359) *
                C15947 +
            ((C31451 - C31452 + C31453 - C31454) * C114 +
             (C31455 - C31456 + C31457 - C31458) * C47359) *
                C47440) *
               C1817 +
           (((C31090 * C497 - C31092 * C484 + C47473 * C2002 - C31093 * C1996) *
                 C114 +
             (C31090 * C514 - C31092 * C498 + C47473 * C2014 - C31093 * C2003) *
                 C47359) *
                C15947 +
            ((C31459 - C31460 + C31461 - C31462) * C114 +
             (C31463 - C31464 + C31465 - C31466) * C47359) *
                C47440) *
               C47456) *
              C47156 * C47489 +
          ((((C31096 - C31095 + C31098 - C31097) * C114 +
             (C31100 - C31099 + C31102 - C31101) * C47359) *
                C15947 +
            ((C31103 - C31104 + C31105 - C31106) * C114 +
             (C31107 - C31108 + C31109 - C31110) * C47359) *
                C47440) *
               C1816 +
           (((C31452 - C31451 + C31454 - C31453) * C114 +
             (C31456 - C31455 + C31458 - C31457) * C47359) *
                C15947 +
            ((C31467 - C31468 + C31469 - C31470) * C114 +
             (C31471 - C31472 + C31473 - C31474) * C47359) *
                C47440) *
               C1817 +
           (((C31460 - C31459 + C31462 - C31461) * C114 +
             (C31464 - C31463 + C31466 - C31465) * C47359) *
                C15947 +
            ((C31475 - C31476 + C31477 - C31478) * C114 +
             (C31479 - C31480 + C31481 - C31482) * C47359) *
                C47440) *
               C47456) *
              C47156 * C47476 +
          ((((C31104 - C31103 + C31106 - C31105) * C114 +
             (C31108 - C31107 + C31110 - C31109) * C47359) *
                C15947 +
            ((C31111 - C31112 + C31113 - C31114) * C114 +
             (C31115 - C31116 + C31117 - C31118) * C47359) *
                C47440) *
               C1816 +
           (((C31468 - C31467 + C31470 - C31469) * C114 +
             (C31472 - C31471 + C31474 - C31473) * C47359) *
                C15947 +
            ((C31751 - C31752 + C31753 - C31754) * C114 +
             (C31755 - C31756 + C31757 - C31758) * C47359) *
                C47440) *
               C1817 +
           (((C31476 - C31475 + C31478 - C31477) * C114 +
             (C31480 - C31479 + C31482 - C31481) * C47359) *
                C15947 +
            ((C31090 * C505 - C31092 * C488 + C47473 * C2281 - C31093 * C2280) *
                 C114 +
             (C31090 * C518 - C31092 * C506 + C47473 * C2283 - C31093 * C2282) *
                 C47359) *
                C47440) *
               C47456) *
              C47156 * C47447)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C31090 * C122 - C31092 * C115 + C47473 * C491 - C31093 * C481) *
                 C114 +
             (C31090 * C136 - C31092 * C123 + C47473 * C511 - C31093 * C492) *
                 C47359) *
                C15947 +
            ((C31095 - C31096 + C31097 - C31098) * C114 +
             (C31099 - C31100 + C31101 - C31102) * C47359) *
                C47440) *
               C1816 +
           (((C31092 * C481 - C31090 * C491 + C31093 * C484 - C47473 * C497) *
                 C114 +
             (C31092 * C492 - C31090 * C511 + C31093 * C498 - C47473 * C514) *
                 C47359) *
                C15947 +
            ((C31451 - C31452 + C31453 - C31454) * C114 +
             (C31455 - C31456 + C31457 - C31458) * C47359) *
                C47440) *
               C1817 +
           (((C31090 * C497 - C31092 * C484 + C47473 * C2002 - C31093 * C1996) *
                 C114 +
             (C31090 * C514 - C31092 * C498 + C47473 * C2014 - C31093 * C2003) *
                 C47359) *
                C15947 +
            ((C31459 - C31460 + C31461 - C31462) * C114 +
             (C31463 - C31464 + C31465 - C31466) * C47359) *
                C47440) *
               C47456) *
              C47492 +
          ((((C31092 * C294 - C31090 * C304 + C31093 * C931 - C47473 * C936) *
                 C114 +
             (C31092 * C305 - C31090 * C324 + C31093 * C937 - C47473 * C946) *
                 C47359) *
                C15947 +
            ((C31273 - C31274 + C31275 - C31276) * C114 +
             (C31277 - C31278 + C31279 - C31280) * C47359) *
                C47440) *
               C1816 +
           (((C31090 * C936 - C31092 * C931 + C47473 * C1295 - C31093 * C1286) *
                 C114 +
             (C31090 * C946 - C31092 * C937 + C47473 * C1313 - C31093 * C1296) *
                 C47359) *
                C15947 +
            ((C31953 - C31954 + C31955 - C31956) * C114 +
             (C31957 - C31958 + C31959 - C31960) * C47359) *
                C47440) *
               C1817 +
           (((C31092 * C1286 - C31090 * C1295 + C31093 * C2390 -
              C47473 * C2393) *
                 C114 +
             (C31092 * C1296 - C31090 * C1313 + C31093 * C2394 -
              C47473 * C2399) *
                 C47359) *
                C15947 +
            ((C31092 * C1287 - C31090 * C1297 + C31093 * C2391 -
              C47473 * C2395) *
                 C114 +
             (C31092 * C1298 - C31090 * C1314 + C31093 * C2396 -
              C47473 * C2400) *
                 C47359) *
                C47440) *
               C47456) *
              C47480 +
          ((((C31090 * C310 - C31092 * C297 + C47473 * C1301 - C31093 * C1289) *
                 C114 +
             (C31090 * C327 - C31092 * C311 + C47473 * C1316 - C31093 * C1302) *
                 C47359) *
                C15947 +
            ((C31281 - C31282 + C31283 - C31284) * C114 +
             (C31285 - C31286 + C31287 - C31288) * C47359) *
                C47440) *
               C1816 +
           (((C31092 * C1289 - C31090 * C1301 + C31093 * C1292 -
              C47473 * C1307) *
                 C114 +
             (C31092 * C1302 - C31090 * C1316 + C31093 * C1308 -
              C47473 * C1319) *
                 C47359) *
                C15947 +
            ((C32675 - C32676 + C32677 - C32678) * C114 +
             (C32679 - C32680 + C32681 - C32682) * C47359) *
                C47440) *
               C1817 +
           (((C31090 * C1307 - C31092 * C1292 + C47473 * C7269 -
              C31093 * C7267) *
                 C114 +
             (C31090 * C1319 - C31092 * C1308 + C47473 * C7273 -
              C31093 * C7270) *
                 C47359) *
                C15947 +
            ((C31090 * C1309 - C31092 * C1293 + C47473 * C7271 -
              C31093 * C7268) *
                 C114 +
             (C31090 * C1320 - C31092 * C1310 + C47473 * C7274 -
              C31093 * C7272) *
                 C47359) *
                C47440) *
               C47456) *
              C47453) *
         C47128) /
            (p * q * std::sqrt(p + q));
    d2ee[165] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C31090 * C122 - C31092 * C115 + C47473 * C491 - C31093 * C481) *
                  C114 +
              (C31090 * C136 - C31092 * C123 + C47473 * C511 - C31093 * C492) *
                  C47359) *
                 C15947 +
             ((C31095 - C31096 + C31097 - C31098) * C114 +
              (C31099 - C31100 + C31101 - C31102) * C47359) *
                 C47440) *
                C3262 +
            (((C31092 * C481 - C31090 * C491 + C31093 * C484 - C47473 * C497) *
                  C114 +
              (C31092 * C492 - C31090 * C511 + C31093 * C498 - C47473 * C514) *
                  C47359) *
                 C15947 +
             ((C31451 - C31452 + C31453 - C31454) * C114 +
              (C31455 - C31456 + C31457 - C31458) * C47359) *
                 C47440) *
                C47261) *
               C47421 +
           ((((C31092 * C294 - C31090 * C304 + C31093 * C931 - C47473 * C936) *
                  C114 +
              (C31092 * C305 - C31090 * C324 + C31093 * C937 - C47473 * C946) *
                  C47359) *
                 C15947 +
             ((C31273 - C31274 + C31275 - C31276) * C114 +
              (C31277 - C31278 + C31279 - C31280) * C47359) *
                 C47440) *
                C3262 +
            (((C31090 * C936 - C31092 * C931 + C47473 * C1295 -
               C31093 * C1286) *
                  C114 +
              (C31090 * C946 - C31092 * C937 + C47473 * C1313 -
               C31093 * C1296) *
                  C47359) *
                 C15947 +
             ((C31953 - C31954 + C31955 - C31956) * C114 +
              (C31957 - C31958 + C31959 - C31960) * C47359) *
                 C47440) *
                C47261) *
               C47219) *
              C47133 +
          (((((C31096 - C31095 + C31098 - C31097) * C114 +
              (C31100 - C31099 + C31102 - C31101) * C47359) *
                 C15947 +
             ((C31103 - C31104 + C31105 - C31106) * C114 +
              (C31107 - C31108 + C31109 - C31110) * C47359) *
                 C47440) *
                C3262 +
            (((C31452 - C31451 + C31454 - C31453) * C114 +
              (C31456 - C31455 + C31458 - C31457) * C47359) *
                 C15947 +
             ((C31467 - C31468 + C31469 - C31470) * C114 +
              (C31471 - C31472 + C31473 - C31474) * C47359) *
                 C47440) *
                C47261) *
               C47421 +
           ((((C31274 - C31273 + C31276 - C31275) * C114 +
              (C31278 - C31277 + C31280 - C31279) * C47359) *
                 C15947 +
             ((C31289 - C31290 + C31291 - C31292) * C114 +
              (C31293 - C31294 + C31295 - C31296) * C47359) *
                 C47440) *
                C3262 +
            (((C31954 - C31953 + C31956 - C31955) * C114 +
              (C31958 - C31957 + C31960 - C31959) * C47359) *
                 C15947 +
             ((C31961 - C31962 + C31963 - C31964) * C114 +
              (C31965 - C31966 + C31967 - C31968) * C47359) *
                 C47440) *
                C47261) *
               C47219) *
              C47142 +
          (((((C31104 - C31103 + C31106 - C31105) * C114 +
              (C31108 - C31107 + C31110 - C31109) * C47359) *
                 C15947 +
             ((C31111 - C31112 + C31113 - C31114) * C114 +
              (C31115 - C31116 + C31117 - C31118) * C47359) *
                 C47440) *
                C3262 +
            (((C31468 - C31467 + C31470 - C31469) * C114 +
              (C31472 - C31471 + C31474 - C31473) * C47359) *
                 C15947 +
             ((C31751 - C31752 + C31753 - C31754) * C114 +
              (C31755 - C31756 + C31757 - C31758) * C47359) *
                 C47440) *
                C47261) *
               C47421 +
           ((((C31290 - C31289 + C31292 - C31291) * C114 +
              (C31294 - C31293 + C31296 - C31295) * C47359) *
                 C15947 +
             ((C31613 - C31614 + C31615 - C31616) * C114 +
              (C31617 - C31618 + C31619 - C31620) * C47359) *
                 C47440) *
                C3262 +
            (((C31962 - C31961 + C31964 - C31963) * C114 +
              (C31966 - C31965 + C31968 - C31967) * C47359) *
                 C15947 +
             ((C31090 * C942 - C31092 * C934 + C47473 * C2167 -
               C31093 * C2166) *
                  C114 +
              (C31090 * C949 - C31092 * C943 + C47473 * C2169 -
               C31093 * C2168) *
                  C47359) *
                 C47440) *
                C47261) *
               C47219) *
              C2871)) /
        (p * q * std::sqrt(p + q));
    d2ee[166] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C31090 * C122 - C31092 * C115 + C47473 * C491 - C31093 * C481) *
                  C114 +
              (C31090 * C136 - C31092 * C123 + C47473 * C511 - C31093 * C492) *
                  C47359) *
                 C15947 +
             ((C31095 - C31096 + C31097 - C31098) * C114 +
              (C31099 - C31100 + C31101 - C31102) * C47359) *
                 C47440) *
                C47257 +
            (((C31092 * C481 - C31090 * C491 + C31093 * C484 - C47473 * C497) *
                  C114 +
              (C31092 * C492 - C31090 * C511 + C31093 * C498 - C47473 * C514) *
                  C47359) *
                 C15947 +
             ((C31451 - C31452 + C31453 - C31454) * C114 +
              (C31455 - C31456 + C31457 - C31458) * C47359) *
                 C47440) *
                C47264 +
            (((C31090 * C497 - C31092 * C484 + C47473 * C2002 -
               C31093 * C1996) *
                  C114 +
              (C31090 * C514 - C31092 * C498 + C47473 * C2014 -
               C31093 * C2003) *
                  C47359) *
                 C15947 +
             ((C31459 - C31460 + C31461 - C31462) * C114 +
              (C31463 - C31464 + C31465 - C31466) * C47359) *
                 C47440) *
                C3770) *
               C47421 +
           ((((C31092 * C294 - C31090 * C304 + C31093 * C931 - C47473 * C936) *
                  C114 +
              (C31092 * C305 - C31090 * C324 + C31093 * C937 - C47473 * C946) *
                  C47359) *
                 C15947 +
             ((C31273 - C31274 + C31275 - C31276) * C114 +
              (C31277 - C31278 + C31279 - C31280) * C47359) *
                 C47440) *
                C47257 +
            (((C31090 * C936 - C31092 * C931 + C47473 * C1295 -
               C31093 * C1286) *
                  C114 +
              (C31090 * C946 - C31092 * C937 + C47473 * C1313 -
               C31093 * C1296) *
                  C47359) *
                 C15947 +
             ((C31953 - C31954 + C31955 - C31956) * C114 +
              (C31957 - C31958 + C31959 - C31960) * C47359) *
                 C47440) *
                C47264 +
            (((C31092 * C1286 - C31090 * C1295 + C31093 * C2390 -
               C47473 * C2393) *
                  C114 +
              (C31092 * C1296 - C31090 * C1313 + C31093 * C2394 -
               C47473 * C2399) *
                  C47359) *
                 C15947 +
             ((C33381 - C33382 + C33383 - C33384) * C114 +
              (C33385 - C33386 + C33387 - C33388) * C47359) *
                 C47440) *
                C3770) *
               C47219) *
              C2608 +
          (((((C31096 - C31095 + C31098 - C31097) * C114 +
              (C31100 - C31099 + C31102 - C31101) * C47359) *
                 C15947 +
             ((C31103 - C31104 + C31105 - C31106) * C114 +
              (C31107 - C31108 + C31109 - C31110) * C47359) *
                 C47440) *
                C47257 +
            (((C31452 - C31451 + C31454 - C31453) * C114 +
              (C31456 - C31455 + C31458 - C31457) * C47359) *
                 C15947 +
             ((C31467 - C31468 + C31469 - C31470) * C114 +
              (C31471 - C31472 + C31473 - C31474) * C47359) *
                 C47440) *
                C47264 +
            (((C31460 - C31459 + C31462 - C31461) * C114 +
              (C31464 - C31463 + C31466 - C31465) * C47359) *
                 C15947 +
             ((C31475 - C31476 + C31477 - C31478) * C114 +
              (C31479 - C31480 + C31481 - C31482) * C47359) *
                 C47440) *
                C3770) *
               C47421 +
           ((((C31274 - C31273 + C31276 - C31275) * C114 +
              (C31278 - C31277 + C31280 - C31279) * C47359) *
                 C15947 +
             ((C31289 - C31290 + C31291 - C31292) * C114 +
              (C31293 - C31294 + C31295 - C31296) * C47359) *
                 C47440) *
                C47257 +
            (((C31954 - C31953 + C31956 - C31955) * C114 +
              (C31958 - C31957 + C31960 - C31959) * C47359) *
                 C15947 +
             ((C31961 - C31962 + C31963 - C31964) * C114 +
              (C31965 - C31966 + C31967 - C31968) * C47359) *
                 C47440) *
                C47264 +
            (((C33382 - C33381 + C33384 - C33383) * C114 +
              (C33386 - C33385 + C33388 - C33387) * C47359) *
                 C15947 +
             ((C31090 * C1299 - C31092 * C1288 + C47473 * C2397 -
               C31093 * C2392) *
                  C114 +
              (C31090 * C1315 - C31092 * C1300 + C47473 * C2401 -
               C31093 * C2398) *
                  C47359) *
                 C47440) *
                C3770) *
               C47219) *
              C47139)) /
        (p * q * std::sqrt(p + q));
    d2ee[167] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C31090 * C122 - C31092 * C115 + C47473 * C491 - C31093 * C481) *
                  C114 +
              (C31090 * C136 - C31092 * C123 + C47473 * C511 - C31093 * C492) *
                  C47359) *
                 C15947 +
             ((C31095 - C31096 + C31097 - C31098) * C114 +
              (C31099 - C31100 + C31101 - C31102) * C47359) *
                 C47440) *
                C3262 +
            (((C31092 * C481 - C31090 * C491 + C31093 * C484 - C47473 * C497) *
                  C114 +
              (C31092 * C492 - C31090 * C511 + C31093 * C498 - C47473 * C514) *
                  C47359) *
                 C15947 +
             ((C31451 - C31452 + C31453 - C31454) * C114 +
              (C31455 - C31456 + C31457 - C31458) * C47359) *
                 C47440) *
                C47261) *
               C47492 +
           ((((C31092 * C294 - C31090 * C304 + C31093 * C931 - C47473 * C936) *
                  C114 +
              (C31092 * C305 - C31090 * C324 + C31093 * C937 - C47473 * C946) *
                  C47359) *
                 C15947 +
             ((C31273 - C31274 + C31275 - C31276) * C114 +
              (C31277 - C31278 + C31279 - C31280) * C47359) *
                 C47440) *
                C3262 +
            (((C31090 * C936 - C31092 * C931 + C47473 * C1295 -
               C31093 * C1286) *
                  C114 +
              (C31090 * C946 - C31092 * C937 + C47473 * C1313 -
               C31093 * C1296) *
                  C47359) *
                 C15947 +
             ((C31953 - C31954 + C31955 - C31956) * C114 +
              (C31957 - C31958 + C31959 - C31960) * C47359) *
                 C47440) *
                C47261) *
               C47480 +
           ((((C31090 * C310 - C31092 * C297 + C47473 * C1301 -
               C31093 * C1289) *
                  C114 +
              (C31090 * C327 - C31092 * C311 + C47473 * C1316 -
               C31093 * C1302) *
                  C47359) *
                 C15947 +
             ((C31281 - C31282 + C31283 - C31284) * C114 +
              (C31285 - C31286 + C31287 - C31288) * C47359) *
                 C47440) *
                C3262 +
            (((C31092 * C1289 - C31090 * C1301 + C31093 * C1292 -
               C47473 * C1307) *
                  C114 +
              (C31092 * C1302 - C31090 * C1316 + C31093 * C1308 -
               C47473 * C1319) *
                  C47359) *
                 C15947 +
             ((C32675 - C32676 + C32677 - C32678) * C114 +
              (C32679 - C32680 + C32681 - C32682) * C47359) *
                 C47440) *
                C47261) *
               C47453) *
              C2608 +
          (((((C31096 - C31095 + C31098 - C31097) * C114 +
              (C31100 - C31099 + C31102 - C31101) * C47359) *
                 C15947 +
             ((C31103 - C31104 + C31105 - C31106) * C114 +
              (C31107 - C31108 + C31109 - C31110) * C47359) *
                 C47440) *
                C3262 +
            (((C31452 - C31451 + C31454 - C31453) * C114 +
              (C31456 - C31455 + C31458 - C31457) * C47359) *
                 C15947 +
             ((C31467 - C31468 + C31469 - C31470) * C114 +
              (C31471 - C31472 + C31473 - C31474) * C47359) *
                 C47440) *
                C47261) *
               C47492 +
           ((((C31274 - C31273 + C31276 - C31275) * C114 +
              (C31278 - C31277 + C31280 - C31279) * C47359) *
                 C15947 +
             ((C31289 - C31290 + C31291 - C31292) * C114 +
              (C31293 - C31294 + C31295 - C31296) * C47359) *
                 C47440) *
                C3262 +
            (((C31954 - C31953 + C31956 - C31955) * C114 +
              (C31958 - C31957 + C31960 - C31959) * C47359) *
                 C15947 +
             ((C31961 - C31962 + C31963 - C31964) * C114 +
              (C31965 - C31966 + C31967 - C31968) * C47359) *
                 C47440) *
                C47261) *
               C47480 +
           ((((C31282 - C31281 + C31284 - C31283) * C114 +
              (C31286 - C31285 + C31288 - C31287) * C47359) *
                 C15947 +
             ((C31297 - C31298 + C31299 - C31300) * C114 +
              (C31301 - C31302 + C31303 - C31304) * C47359) *
                 C47440) *
                C3262 +
            (((C32676 - C32675 + C32678 - C32677) * C114 +
              (C32680 - C32679 + C32682 - C32681) * C47359) *
                 C15947 +
             ((C31090 * C1305 - C31092 * C1291 + C47473 * C1311 -
               C31093 * C1294) *
                  C114 +
              (C31090 * C1318 - C31092 * C1306 + C47473 * C1321 -
               C31093 * C1312) *
                  C47359) *
                 C47440) *
                C47261) *
               C47453) *
              C47139)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C31090 * C122 - C31092 * C115 + C47473 * C491 - C31093 * C481) *
                 C114 +
             (C31090 * C136 - C31092 * C123 + C47473 * C511 - C31093 * C492) *
                 C47359) *
                C15947 +
            ((C31095 - C31096 + C31097 - C31098) * C114 +
             (C31099 - C31100 + C31101 - C31102) * C47359) *
                C47440) *
               C3262 +
           (((C31092 * C481 - C31090 * C491 + C31093 * C484 - C47473 * C497) *
                 C114 +
             (C31092 * C492 - C31090 * C511 + C31093 * C498 - C47473 * C514) *
                 C47359) *
                C15947 +
            ((C31451 - C31452 + C31453 - C31454) * C114 +
             (C31455 - C31456 + C31457 - C31458) * C47359) *
                C47440) *
               C47261) *
              C47156 * C47498 +
          ((((C31096 - C31095 + C31098 - C31097) * C114 +
             (C31100 - C31099 + C31102 - C31101) * C47359) *
                C15947 +
            ((C31103 - C31104 + C31105 - C31106) * C114 +
             (C31107 - C31108 + C31109 - C31110) * C47359) *
                C47440) *
               C3262 +
           (((C31452 - C31451 + C31454 - C31453) * C114 +
             (C31456 - C31455 + C31458 - C31457) * C47359) *
                C15947 +
            ((C31467 - C31468 + C31469 - C31470) * C114 +
             (C31471 - C31472 + C31473 - C31474) * C47359) *
                C47440) *
               C47261) *
              C47156 * C47491 +
          ((((C31104 - C31103 + C31106 - C31105) * C114 +
             (C31108 - C31107 + C31110 - C31109) * C47359) *
                C15947 +
            ((C31111 - C31112 + C31113 - C31114) * C114 +
             (C31115 - C31116 + C31117 - C31118) * C47359) *
                C47440) *
               C3262 +
           (((C31468 - C31467 + C31470 - C31469) * C114 +
             (C31472 - C31471 + C31474 - C31473) * C47359) *
                C15947 +
            ((C31751 - C31752 + C31753 - C31754) * C114 +
             (C31755 - C31756 + C31757 - C31758) * C47359) *
                C47440) *
               C47261) *
              C47156 * C47478 +
          ((((C31112 - C31111 + C31114 - C31113) * C114 +
             (C31116 - C31115 + C31118 - C31117) * C47359) *
                C15947 +
            ((C31119 - C31120 + C31121 - C31122) * C114 +
             (C31123 - C31124 + C31125 - C31126) * C47359) *
                C47440) *
               C3262 +
           (((C31752 - C31751 + C31754 - C31753) * C114 +
             (C31756 - C31755 + C31758 - C31757) * C47359) *
                C15947 +
            ((C31090 * C507 - C31092 * C489 + C47473 * C509 - C31093 * C490) *
                 C114 +
             (C31090 * C519 - C31092 * C508 + C47473 * C520 - C31093 * C510) *
                 C47359) *
                C47440) *
               C47261) *
              C47156 * C47457)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C31090 * C122 - C31092 * C115 + C47473 * C491 - C31093 * C481) *
                 C114 +
             (C31090 * C136 - C31092 * C123 + C47473 * C511 - C31093 * C492) *
                 C47359) *
                C15947 +
            ((C31095 - C31096 + C31097 - C31098) * C114 +
             (C31099 - C31100 + C31101 - C31102) * C47359) *
                C47440) *
               C47500 +
           (((C31092 * C481 - C31090 * C491 + C31093 * C484 - C47473 * C497) *
                 C114 +
             (C31092 * C492 - C31090 * C511 + C31093 * C498 - C47473 * C514) *
                 C47359) *
                C15947 +
            ((C31451 - C31452 + C31453 - C31454) * C114 +
             (C31455 - C31456 + C31457 - C31458) * C47359) *
                C47440) *
               C47497 +
           (((C31090 * C497 - C31092 * C484 + C47473 * C2002 - C31093 * C1996) *
                 C114 +
             (C31090 * C514 - C31092 * C498 + C47473 * C2014 - C31093 * C2003) *
                 C47359) *
                C15947 +
            ((C31459 - C31460 + C31461 - C31462) * C114 +
             (C31463 - C31464 + C31465 - C31466) * C47359) *
                C47440) *
               C47488 +
           (((C31092 * C1996 - C31090 * C2002 + C31093 * C1999 -
              C47473 * C2008) *
                 C114 +
             (C31092 * C2003 - C31090 * C2014 + C31093 * C2009 -
              C47473 * C2017) *
                 C47359) *
                C15947 +
            ((C33519 - C33520 + C33521 - C33522) * C114 +
             (C33523 - C33524 + C33525 - C33526) * C47359) *
                C47440) *
               C47469) *
              C47156 * C2608 +
          ((((C31096 - C31095 + C31098 - C31097) * C114 +
             (C31100 - C31099 + C31102 - C31101) * C47359) *
                C15947 +
            ((C31103 - C31104 + C31105 - C31106) * C114 +
             (C31107 - C31108 + C31109 - C31110) * C47359) *
                C47440) *
               C47500 +
           (((C31452 - C31451 + C31454 - C31453) * C114 +
             (C31456 - C31455 + C31458 - C31457) * C47359) *
                C15947 +
            ((C31467 - C31468 + C31469 - C31470) * C114 +
             (C31471 - C31472 + C31473 - C31474) * C47359) *
                C47440) *
               C47497 +
           (((C31460 - C31459 + C31462 - C31461) * C114 +
             (C31464 - C31463 + C31466 - C31465) * C47359) *
                C15947 +
            ((C31475 - C31476 + C31477 - C31478) * C114 +
             (C31479 - C31480 + C31481 - C31482) * C47359) *
                C47440) *
               C47488 +
           (((C33520 - C33519 + C33522 - C33521) * C114 +
             (C33524 - C33523 + C33526 - C33525) * C47359) *
                C15947 +
            ((C31090 * C2006 - C31092 * C1998 + C47473 * C2012 -
              C31093 * C2001) *
                 C114 +
             (C31090 * C2016 - C31092 * C2007 + C47473 * C2019 -
              C31093 * C2013) *
                 C47359) *
                C47440) *
               C47469) *
              C47156 * C47139)) /
            (p * q * std::sqrt(p + q));
    d2ee[168] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C31090 * C122 - C31092 * C115 + C47473 * C491 - C31093 * C481) *
                 C114 +
             (C31090 * C136 - C31092 * C123 + C47473 * C511 - C31093 * C492) *
                 C47359) *
                C15947 +
            ((C31095 - C31096 + C31097 - C31098) * C114 +
             (C31099 - C31100 + C31101 - C31102) * C47359) *
                C47440) *
               C47257 +
           (((C31092 * C481 - C31090 * C491 + C31093 * C484 - C47473 * C497) *
                 C114 +
             (C31092 * C492 - C31090 * C511 + C31093 * C498 - C47473 * C514) *
                 C47359) *
                C15947 +
            ((C31451 - C31452 + C31453 - C31454) * C114 +
             (C31455 - C31456 + C31457 - C31458) * C47359) *
                C47440) *
               C47264 +
           (((C31090 * C497 - C31092 * C484 + C47473 * C2002 - C31093 * C1996) *
                 C114 +
             (C31090 * C514 - C31092 * C498 + C47473 * C2014 - C31093 * C2003) *
                 C47359) *
                C15947 +
            ((C31459 - C31460 + C31461 - C31462) * C114 +
             (C31463 - C31464 + C31465 - C31466) * C47359) *
                C47440) *
               C3770) *
              C47156 * C47133 +
          ((((C31096 - C31095 + C31098 - C31097) * C114 +
             (C31100 - C31099 + C31102 - C31101) * C47359) *
                C15947 +
            ((C31103 - C31104 + C31105 - C31106) * C114 +
             (C31107 - C31108 + C31109 - C31110) * C47359) *
                C47440) *
               C47257 +
           (((C31452 - C31451 + C31454 - C31453) * C114 +
             (C31456 - C31455 + C31458 - C31457) * C47359) *
                C15947 +
            ((C31467 - C31468 + C31469 - C31470) * C114 +
             (C31471 - C31472 + C31473 - C31474) * C47359) *
                C47440) *
               C47264 +
           (((C31460 - C31459 + C31462 - C31461) * C114 +
             (C31464 - C31463 + C31466 - C31465) * C47359) *
                C15947 +
            ((C31475 - C31476 + C31477 - C31478) * C114 +
             (C31479 - C31480 + C31481 - C31482) * C47359) *
                C47440) *
               C3770) *
              C47156 * C47142 +
          ((((C31104 - C31103 + C31106 - C31105) * C114 +
             (C31108 - C31107 + C31110 - C31109) * C47359) *
                C15947 +
            ((C31111 - C31112 + C31113 - C31114) * C114 +
             (C31115 - C31116 + C31117 - C31118) * C47359) *
                C47440) *
               C47257 +
           (((C31468 - C31467 + C31470 - C31469) * C114 +
             (C31472 - C31471 + C31474 - C31473) * C47359) *
                C15947 +
            ((C31751 - C31752 + C31753 - C31754) * C114 +
             (C31755 - C31756 + C31757 - C31758) * C47359) *
                C47440) *
               C47264 +
           (((C31476 - C31475 + C31478 - C31477) * C114 +
             (C31480 - C31479 + C31482 - C31481) * C47359) *
                C15947 +
            ((C31090 * C505 - C31092 * C488 + C47473 * C2281 - C31093 * C2280) *
                 C114 +
             (C31090 * C518 - C31092 * C506 + C47473 * C2283 - C31093 * C2282) *
                 C47359) *
                C47440) *
               C3770) *
              C47156 * C2871)) /
        (p * q * std::sqrt(p + q));
    d2ee[169] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C31090 * C122 - C31092 * C115 + C47473 * C491 - C31093 * C481) *
                 C114 +
             (C31090 * C136 - C31092 * C123 + C47473 * C511 - C31093 * C492) *
                 C47359) *
                C15947 +
            ((C31095 - C31096 + C31097 - C31098) * C114 +
             (C31099 - C31100 + C31101 - C31102) * C47359) *
                C47440) *
               C3262 +
           (((C31092 * C481 - C31090 * C491 + C31093 * C484 - C47473 * C497) *
                 C114 +
             (C31092 * C492 - C31090 * C511 + C31093 * C498 - C47473 * C514) *
                 C47359) *
                C15947 +
            ((C31451 - C31452 + C31453 - C31454) * C114 +
             (C31455 - C31456 + C31457 - C31458) * C47359) *
                C47440) *
               C47261) *
              C47156 * C47498 +
          ((((C31096 - C31095 + C31098 - C31097) * C114 +
             (C31100 - C31099 + C31102 - C31101) * C47359) *
                C15947 +
            ((C31103 - C31104 + C31105 - C31106) * C114 +
             (C31107 - C31108 + C31109 - C31110) * C47359) *
                C47440) *
               C3262 +
           (((C31452 - C31451 + C31454 - C31453) * C114 +
             (C31456 - C31455 + C31458 - C31457) * C47359) *
                C15947 +
            ((C31467 - C31468 + C31469 - C31470) * C114 +
             (C31471 - C31472 + C31473 - C31474) * C47359) *
                C47440) *
               C47261) *
              C47156 * C47491 +
          ((((C31104 - C31103 + C31106 - C31105) * C114 +
             (C31108 - C31107 + C31110 - C31109) * C47359) *
                C15947 +
            ((C31111 - C31112 + C31113 - C31114) * C114 +
             (C31115 - C31116 + C31117 - C31118) * C47359) *
                C47440) *
               C3262 +
           (((C31468 - C31467 + C31470 - C31469) * C114 +
             (C31472 - C31471 + C31474 - C31473) * C47359) *
                C15947 +
            ((C31751 - C31752 + C31753 - C31754) * C114 +
             (C31755 - C31756 + C31757 - C31758) * C47359) *
                C47440) *
               C47261) *
              C47156 * C47478 +
          ((((C31112 - C31111 + C31114 - C31113) * C114 +
             (C31116 - C31115 + C31118 - C31117) * C47359) *
                C15947 +
            ((C31119 - C31120 + C31121 - C31122) * C114 +
             (C31123 - C31124 + C31125 - C31126) * C47359) *
                C47440) *
               C3262 +
           (((C31752 - C31751 + C31754 - C31753) * C114 +
             (C31756 - C31755 + C31758 - C31757) * C47359) *
                C15947 +
            ((C31090 * C507 - C31092 * C489 + C47473 * C509 - C31093 * C490) *
                 C114 +
             (C31090 * C519 - C31092 * C508 + C47473 * C520 - C31093 * C510) *
                 C47359) *
                C47440) *
               C47261) *
              C47156 * C47457)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C31090 * C122 - C31092 * C115 + C47473 * C491 - C31093 * C481) *
                  C114 +
              (C31090 * C136 - C31092 * C123 + C47473 * C511 - C31093 * C492) *
                  C47359) *
                 C15947 +
             ((C31095 - C31096 + C31097 - C31098) * C114 +
              (C31099 - C31100 + C31101 - C31102) * C47359) *
                 C47440) *
                C3262 +
            (((C31092 * C481 - C31090 * C491 + C31093 * C484 - C47473 * C497) *
                  C114 +
              (C31092 * C492 - C31090 * C511 + C31093 * C498 - C47473 * C514) *
                  C47359) *
                 C15947 +
             ((C31451 - C31452 + C31453 - C31454) * C114 +
              (C31455 - C31456 + C31457 - C31458) * C47359) *
                 C47440) *
                C47261) *
               C47492 +
           ((((C31092 * C294 - C31090 * C304 + C31093 * C931 - C47473 * C936) *
                  C114 +
              (C31092 * C305 - C31090 * C324 + C31093 * C937 - C47473 * C946) *
                  C47359) *
                 C15947 +
             ((C31273 - C31274 + C31275 - C31276) * C114 +
              (C31277 - C31278 + C31279 - C31280) * C47359) *
                 C47440) *
                C3262 +
            (((C31090 * C936 - C31092 * C931 + C47473 * C1295 -
               C31093 * C1286) *
                  C114 +
              (C31090 * C946 - C31092 * C937 + C47473 * C1313 -
               C31093 * C1296) *
                  C47359) *
                 C15947 +
             ((C31953 - C31954 + C31955 - C31956) * C114 +
              (C31957 - C31958 + C31959 - C31960) * C47359) *
                 C47440) *
                C47261) *
               C47480 +
           ((((C31090 * C310 - C31092 * C297 + C47473 * C1301 -
               C31093 * C1289) *
                  C114 +
              (C31090 * C327 - C31092 * C311 + C47473 * C1316 -
               C31093 * C1302) *
                  C47359) *
                 C15947 +
             ((C31281 - C31282 + C31283 - C31284) * C114 +
              (C31285 - C31286 + C31287 - C31288) * C47359) *
                 C47440) *
                C3262 +
            (((C31092 * C1289 - C31090 * C1301 + C31093 * C1292 -
               C47473 * C1307) *
                  C114 +
              (C31092 * C1302 - C31090 * C1316 + C31093 * C1308 -
               C47473 * C1319) *
                  C47359) *
                 C15947 +
             ((C32675 - C32676 + C32677 - C32678) * C114 +
              (C32679 - C32680 + C32681 - C32682) * C47359) *
                 C47440) *
                C47261) *
               C47453) *
              C2608 +
          (((((C31096 - C31095 + C31098 - C31097) * C114 +
              (C31100 - C31099 + C31102 - C31101) * C47359) *
                 C15947 +
             ((C31103 - C31104 + C31105 - C31106) * C114 +
              (C31107 - C31108 + C31109 - C31110) * C47359) *
                 C47440) *
                C3262 +
            (((C31452 - C31451 + C31454 - C31453) * C114 +
              (C31456 - C31455 + C31458 - C31457) * C47359) *
                 C15947 +
             ((C31467 - C31468 + C31469 - C31470) * C114 +
              (C31471 - C31472 + C31473 - C31474) * C47359) *
                 C47440) *
                C47261) *
               C47492 +
           ((((C31274 - C31273 + C31276 - C31275) * C114 +
              (C31278 - C31277 + C31280 - C31279) * C47359) *
                 C15947 +
             ((C31289 - C31290 + C31291 - C31292) * C114 +
              (C31293 - C31294 + C31295 - C31296) * C47359) *
                 C47440) *
                C3262 +
            (((C31954 - C31953 + C31956 - C31955) * C114 +
              (C31958 - C31957 + C31960 - C31959) * C47359) *
                 C15947 +
             ((C31961 - C31962 + C31963 - C31964) * C114 +
              (C31965 - C31966 + C31967 - C31968) * C47359) *
                 C47440) *
                C47261) *
               C47480 +
           ((((C31282 - C31281 + C31284 - C31283) * C114 +
              (C31286 - C31285 + C31288 - C31287) * C47359) *
                 C15947 +
             ((C31297 - C31298 + C31299 - C31300) * C114 +
              (C31301 - C31302 + C31303 - C31304) * C47359) *
                 C47440) *
                C3262 +
            (((C32676 - C32675 + C32678 - C32677) * C114 +
              (C32680 - C32679 + C32682 - C32681) * C47359) *
                 C15947 +
             ((C31090 * C1305 - C31092 * C1291 + C47473 * C1311 -
               C31093 * C1294) *
                  C114 +
              (C31090 * C1318 - C31092 * C1306 + C47473 * C1321 -
               C31093 * C1312) *
                  C47359) *
                 C47440) *
                C47261) *
               C47453) *
              C47139)) /
            (p * q * std::sqrt(p + q));
    d2ee[170] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C31090 * C122 - C31092 * C115 + C47473 * C491 - C31093 * C481) *
                 C114 +
             (C31090 * C136 - C31092 * C123 + C47473 * C511 - C31093 * C492) *
                 C47359) *
                C15947 +
            ((C31095 - C31096 + C31097 - C31098) * C114 +
             (C31099 - C31100 + C31101 - C31102) * C47359) *
                C47440) *
               C47174 * C47421 +
           (((C31092 * C294 - C31090 * C304 + C31093 * C931 - C47473 * C936) *
                 C114 +
             (C31092 * C305 - C31090 * C324 + C31093 * C937 - C47473 * C946) *
                 C47359) *
                C15947 +
            ((C31273 - C31274 + C31275 - C31276) * C114 +
             (C31277 - C31278 + C31279 - C31280) * C47359) *
                C47440) *
               C47174 * C47219) *
              C655 +
          ((((C31096 - C31095 + C31098 - C31097) * C114 +
             (C31100 - C31099 + C31102 - C31101) * C47359) *
                C15947 +
            ((C31103 - C31104 + C31105 - C31106) * C114 +
             (C31107 - C31108 + C31109 - C31110) * C47359) *
                C47440) *
               C47174 * C47421 +
           (((C31274 - C31273 + C31276 - C31275) * C114 +
             (C31278 - C31277 + C31280 - C31279) * C47359) *
                C15947 +
            ((C31289 - C31290 + C31291 - C31292) * C114 +
             (C31293 - C31294 + C31295 - C31296) * C47359) *
                C47440) *
               C47174 * C47219) *
              C656 +
          ((((C31104 - C31103 + C31106 - C31105) * C114 +
             (C31108 - C31107 + C31110 - C31109) * C47359) *
                C15947 +
            ((C31111 - C31112 + C31113 - C31114) * C114 +
             (C31115 - C31116 + C31117 - C31118) * C47359) *
                C47440) *
               C47174 * C47421 +
           (((C31290 - C31289 + C31292 - C31291) * C114 +
             (C31294 - C31293 + C31296 - C31295) * C47359) *
                C15947 +
            ((C31613 - C31614 + C31615 - C31616) * C114 +
             (C31617 - C31618 + C31619 - C31620) * C47359) *
                C47440) *
               C47174 * C47219) *
              C657 +
          ((((C31112 - C31111 + C31114 - C31113) * C114 +
             (C31116 - C31115 + C31118 - C31117) * C47359) *
                C15947 +
            ((C31119 - C31120 + C31121 - C31122) * C114 +
             (C31123 - C31124 + C31125 - C31126) * C47359) *
                C47440) *
               C47174 * C47421 +
           (((C31614 - C31613 + C31616 - C31615) * C114 +
             (C31618 - C31617 + C31620 - C31619) * C47359) *
                C15947 +
            ((C31090 * C320 - C31092 * C302 + C47473 * C944 - C31093 * C935) *
                 C114 +
             (C31090 * C332 - C31092 * C321 + C47473 * C950 - C31093 * C945) *
                 C47359) *
                C47440) *
               C47174 * C47219) *
              C47457)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C31090 * C122 - C31092 * C115 + C47473 * C491 - C31093 * C481) *
                 C114 +
             (C31090 * C136 - C31092 * C123 + C47473 * C511 - C31093 * C492) *
                 C47359) *
                C15947 +
            ((C31095 - C31096 + C31097 - C31098) * C114 +
             (C31099 - C31100 + C31101 - C31102) * C47359) *
                C47440) *
               C47174 * C1420 +
           (((C31092 * C294 - C31090 * C304 + C31093 * C931 - C47473 * C936) *
                 C114 +
             (C31092 * C305 - C31090 * C324 + C31093 * C937 - C47473 * C946) *
                 C47359) *
                C15947 +
            ((C31273 - C31274 + C31275 - C31276) * C114 +
             (C31277 - C31278 + C31279 - C31280) * C47359) *
                C47440) *
               C47174 * C1421 +
           (((C31090 * C310 - C31092 * C297 + C47473 * C1301 - C31093 * C1289) *
                 C114 +
             (C31090 * C327 - C31092 * C311 + C47473 * C1316 - C31093 * C1302) *
                 C47359) *
                C15947 +
            ((C31281 - C31282 + C31283 - C31284) * C114 +
             (C31285 - C31286 + C31287 - C31288) * C47359) *
                C47440) *
               C47174 * C1422 +
           (((C31092 * C1152 - C31090 * C1158 + C31093 * C1694 -
              C47473 * C1697) *
                 C114 +
             (C31092 * C1159 - C31090 * C1170 + C31093 * C1698 -
              C47473 * C1703) *
                 C47359) *
                C15947 +
            ((C32473 - C32474 + C32475 - C32476) * C114 +
             (C32477 - C32478 + C32479 - C32480) * C47359) *
                C47440) *
               C47174 * C47463) *
              C47407 +
          ((((C31096 - C31095 + C31098 - C31097) * C114 +
             (C31100 - C31099 + C31102 - C31101) * C47359) *
                C15947 +
            ((C31103 - C31104 + C31105 - C31106) * C114 +
             (C31107 - C31108 + C31109 - C31110) * C47359) *
                C47440) *
               C47174 * C1420 +
           (((C31274 - C31273 + C31276 - C31275) * C114 +
             (C31278 - C31277 + C31280 - C31279) * C47359) *
                C15947 +
            ((C31289 - C31290 + C31291 - C31292) * C114 +
             (C31293 - C31294 + C31295 - C31296) * C47359) *
                C47440) *
               C47174 * C1421 +
           (((C31282 - C31281 + C31284 - C31283) * C114 +
             (C31286 - C31285 + C31288 - C31287) * C47359) *
                C15947 +
            ((C31297 - C31298 + C31299 - C31300) * C114 +
             (C31301 - C31302 + C31303 - C31304) * C47359) *
                C47440) *
               C47174 * C1422 +
           (((C32474 - C32473 + C32476 - C32475) * C114 +
             (C32478 - C32477 + C32480 - C32479) * C47359) *
                C15947 +
            ((C31090 * C1162 - C31092 * C1154 + C47473 * C1701 -
              C31093 * C1696) *
                 C114 +
             (C31090 * C1172 - C31092 * C1163 + C47473 * C1705 -
              C31093 * C1702) *
                 C47359) *
                C47440) *
               C47174 * C47463) *
              C47139)) /
            (p * q * std::sqrt(p + q));
    d2ee[171] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C31090 * C122 - C31092 * C115 + C47473 * C491 - C31093 * C481) *
                  C114 +
              (C31090 * C136 - C31092 * C123 + C47473 * C511 - C31093 * C492) *
                  C47359) *
                 C15947 +
             ((C31095 - C31096 + C31097 - C31098) * C114 +
              (C31099 - C31100 + C31101 - C31102) * C47359) *
                 C47440) *
                C47422 +
            (((C31092 * C481 - C31090 * C491 + C31093 * C484 - C47473 * C497) *
                  C114 +
              (C31092 * C492 - C31090 * C511 + C31093 * C498 - C47473 * C514) *
                  C47359) *
                 C15947 +
             ((C31451 - C31452 + C31453 - C31454) * C114 +
              (C31455 - C31456 + C31457 - C31458) * C47359) *
                 C47440) *
                C47261) *
               C47421 +
           ((((C31092 * C294 - C31090 * C304 + C31093 * C931 - C47473 * C936) *
                  C114 +
              (C31092 * C305 - C31090 * C324 + C31093 * C937 - C47473 * C946) *
                  C47359) *
                 C15947 +
             ((C31273 - C31274 + C31275 - C31276) * C114 +
              (C31277 - C31278 + C31279 - C31280) * C47359) *
                 C47440) *
                C47422 +
            (((C31090 * C936 - C31092 * C931 + C47473 * C1295 -
               C31093 * C1286) *
                  C114 +
              (C31090 * C946 - C31092 * C937 + C47473 * C1313 -
               C31093 * C1296) *
                  C47359) *
                 C15947 +
             ((C31953 - C31954 + C31955 - C31956) * C114 +
              (C31957 - C31958 + C31959 - C31960) * C47359) *
                 C47440) *
                C47261) *
               C47219) *
              C291 +
          (((((C31096 - C31095 + C31098 - C31097) * C114 +
              (C31100 - C31099 + C31102 - C31101) * C47359) *
                 C15947 +
             ((C31103 - C31104 + C31105 - C31106) * C114 +
              (C31107 - C31108 + C31109 - C31110) * C47359) *
                 C47440) *
                C47422 +
            (((C31452 - C31451 + C31454 - C31453) * C114 +
              (C31456 - C31455 + C31458 - C31457) * C47359) *
                 C15947 +
             ((C31467 - C31468 + C31469 - C31470) * C114 +
              (C31471 - C31472 + C31473 - C31474) * C47359) *
                 C47440) *
                C47261) *
               C47421 +
           ((((C31274 - C31273 + C31276 - C31275) * C114 +
              (C31278 - C31277 + C31280 - C31279) * C47359) *
                 C15947 +
             ((C31289 - C31290 + C31291 - C31292) * C114 +
              (C31293 - C31294 + C31295 - C31296) * C47359) *
                 C47440) *
                C47422 +
            (((C31954 - C31953 + C31956 - C31955) * C114 +
              (C31958 - C31957 + C31960 - C31959) * C47359) *
                 C15947 +
             ((C31961 - C31962 + C31963 - C31964) * C114 +
              (C31965 - C31966 + C31967 - C31968) * C47359) *
                 C47440) *
                C47261) *
               C47219) *
              C292 +
          (((((C31104 - C31103 + C31106 - C31105) * C114 +
              (C31108 - C31107 + C31110 - C31109) * C47359) *
                 C15947 +
             ((C31111 - C31112 + C31113 - C31114) * C114 +
              (C31115 - C31116 + C31117 - C31118) * C47359) *
                 C47440) *
                C47422 +
            (((C31468 - C31467 + C31470 - C31469) * C114 +
              (C31472 - C31471 + C31474 - C31473) * C47359) *
                 C15947 +
             ((C31751 - C31752 + C31753 - C31754) * C114 +
              (C31755 - C31756 + C31757 - C31758) * C47359) *
                 C47440) *
                C47261) *
               C47421 +
           ((((C31290 - C31289 + C31292 - C31291) * C114 +
              (C31294 - C31293 + C31296 - C31295) * C47359) *
                 C15947 +
             ((C31613 - C31614 + C31615 - C31616) * C114 +
              (C31617 - C31618 + C31619 - C31620) * C47359) *
                 C47440) *
                C47422 +
            (((C31962 - C31961 + C31964 - C31963) * C114 +
              (C31966 - C31965 + C31968 - C31967) * C47359) *
                 C15947 +
             ((C31090 * C942 - C31092 * C934 + C47473 * C2167 -
               C31093 * C2166) *
                  C114 +
              (C31090 * C949 - C31092 * C943 + C47473 * C2169 -
               C31093 * C2168) *
                  C47359) *
                 C47440) *
                C47261) *
               C47219) *
              C47447)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C31090 * C122 - C31092 * C115 + C47473 * C491 - C31093 * C481) *
                 C114 +
             (C31090 * C136 - C31092 * C123 + C47473 * C511 - C31093 * C492) *
                 C47359) *
                C15947 +
            ((C31095 - C31096 + C31097 - C31098) * C114 +
             (C31099 - C31100 + C31101 - C31102) * C47359) *
                C47440) *
               C47422 +
           (((C31092 * C481 - C31090 * C491 + C31093 * C484 - C47473 * C497) *
                 C114 +
             (C31092 * C492 - C31090 * C511 + C31093 * C498 - C47473 * C514) *
                 C47359) *
                C15947 +
            ((C31451 - C31452 + C31453 - C31454) * C114 +
             (C31455 - C31456 + C31457 - C31458) * C47359) *
                C47440) *
               C47261) *
              C1420 +
          ((((C31092 * C294 - C31090 * C304 + C31093 * C931 - C47473 * C936) *
                 C114 +
             (C31092 * C305 - C31090 * C324 + C31093 * C937 - C47473 * C946) *
                 C47359) *
                C15947 +
            ((C31273 - C31274 + C31275 - C31276) * C114 +
             (C31277 - C31278 + C31279 - C31280) * C47359) *
                C47440) *
               C47422 +
           (((C31090 * C936 - C31092 * C931 + C47473 * C1295 - C31093 * C1286) *
                 C114 +
             (C31090 * C946 - C31092 * C937 + C47473 * C1313 - C31093 * C1296) *
                 C47359) *
                C15947 +
            ((C31953 - C31954 + C31955 - C31956) * C114 +
             (C31957 - C31958 + C31959 - C31960) * C47359) *
                C47440) *
               C47261) *
              C1421 +
          ((((C31090 * C310 - C31092 * C297 + C47473 * C1301 - C31093 * C1289) *
                 C114 +
             (C31090 * C327 - C31092 * C311 + C47473 * C1316 - C31093 * C1302) *
                 C47359) *
                C15947 +
            ((C31281 - C31282 + C31283 - C31284) * C114 +
             (C31285 - C31286 + C31287 - C31288) * C47359) *
                C47440) *
               C47422 +
           (((C31092 * C1289 - C31090 * C1301 + C31093 * C1292 -
              C47473 * C1307) *
                 C114 +
             (C31092 * C1302 - C31090 * C1316 + C31093 * C1308 -
              C47473 * C1319) *
                 C47359) *
                C15947 +
            ((C32675 - C32676 + C32677 - C32678) * C114 +
             (C32679 - C32680 + C32681 - C32682) * C47359) *
                C47440) *
               C47261) *
              C1422 +
          ((((C31092 * C1152 - C31090 * C1158 + C31093 * C1694 -
              C47473 * C1697) *
                 C114 +
             (C31092 * C1159 - C31090 * C1170 + C31093 * C1698 -
              C47473 * C1703) *
                 C47359) *
                C15947 +
            ((C32473 - C32474 + C32475 - C32476) * C114 +
             (C32477 - C32478 + C32479 - C32480) * C47359) *
                C47440) *
               C47422 +
           (((C31090 * C1697 - C31092 * C1694 + C47473 * C5923 -
              C31093 * C5921) *
                 C114 +
             (C31090 * C1703 - C31092 * C1698 + C47473 * C5927 -
              C31093 * C5924) *
                 C47359) *
                C15947 +
            ((C31090 * C1699 - C31092 * C1695 + C47473 * C5925 -
              C31093 * C5922) *
                 C114 +
             (C31090 * C1704 - C31092 * C1700 + C47473 * C5928 -
              C31093 * C5926) *
                 C47359) *
                C47440) *
               C47261) *
              C47463) *
         C47128) /
            (p * q * std::sqrt(p + q));
    d2ee[172] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C31090 * C122 - C31092 * C115 + C47473 * C491 - C31093 * C481) *
                 C114 +
             (C31090 * C136 - C31092 * C123 + C47473 * C511 - C31093 * C492) *
                 C47359) *
                C15947 +
            ((C31095 - C31096 + C31097 - C31098) * C114 +
             (C31099 - C31100 + C31101 - C31102) * C47359) *
                C47440) *
               C47174 * C47492 +
           (((C31092 * C294 - C31090 * C304 + C31093 * C931 - C47473 * C936) *
                 C114 +
             (C31092 * C305 - C31090 * C324 + C31093 * C937 - C47473 * C946) *
                 C47359) *
                C15947 +
            ((C31273 - C31274 + C31275 - C31276) * C114 +
             (C31277 - C31278 + C31279 - C31280) * C47359) *
                C47440) *
               C47174 * C47480 +
           (((C31090 * C310 - C31092 * C297 + C47473 * C1301 - C31093 * C1289) *
                 C114 +
             (C31090 * C327 - C31092 * C311 + C47473 * C1316 - C31093 * C1302) *
                 C47359) *
                C15947 +
            ((C31281 - C31282 + C31283 - C31284) * C114 +
             (C31285 - C31286 + C31287 - C31288) * C47359) *
                C47440) *
               C47174 * C47453) *
              C291 +
          ((((C31096 - C31095 + C31098 - C31097) * C114 +
             (C31100 - C31099 + C31102 - C31101) * C47359) *
                C15947 +
            ((C31103 - C31104 + C31105 - C31106) * C114 +
             (C31107 - C31108 + C31109 - C31110) * C47359) *
                C47440) *
               C47174 * C47492 +
           (((C31274 - C31273 + C31276 - C31275) * C114 +
             (C31278 - C31277 + C31280 - C31279) * C47359) *
                C15947 +
            ((C31289 - C31290 + C31291 - C31292) * C114 +
             (C31293 - C31294 + C31295 - C31296) * C47359) *
                C47440) *
               C47174 * C47480 +
           (((C31282 - C31281 + C31284 - C31283) * C114 +
             (C31286 - C31285 + C31288 - C31287) * C47359) *
                C15947 +
            ((C31297 - C31298 + C31299 - C31300) * C114 +
             (C31301 - C31302 + C31303 - C31304) * C47359) *
                C47440) *
               C47174 * C47453) *
              C292 +
          ((((C31104 - C31103 + C31106 - C31105) * C114 +
             (C31108 - C31107 + C31110 - C31109) * C47359) *
                C15947 +
            ((C31111 - C31112 + C31113 - C31114) * C114 +
             (C31115 - C31116 + C31117 - C31118) * C47359) *
                C47440) *
               C47174 * C47492 +
           (((C31290 - C31289 + C31292 - C31291) * C114 +
             (C31294 - C31293 + C31296 - C31295) * C47359) *
                C15947 +
            ((C31092 * C300 - C31090 * C316 + C31093 * C934 - C47473 * C942) *
                 C114 +
             (C31092 * C317 - C31090 * C330 + C31093 * C943 - C47473 * C949) *
                 C47359) *
                C47440) *
               C47174 * C47480 +
           (((C31298 - C31297 + C31300 - C31299) * C114 +
             (C31302 - C31301 + C31304 - C31303) * C47359) *
                C15947 +
            ((C31090 * C318 - C31092 * C301 + C47473 * C1585 - C31093 * C1584) *
                 C114 +
             (C31090 * C331 - C31092 * C319 + C47473 * C1587 - C31093 * C1586) *
                 C47359) *
                C47440) *
               C47174 * C47453) *
              C47447)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C31090 * C122 - C31092 * C115 + C47473 * C491 - C31093 * C481) *
                C114 +
            (C31090 * C136 - C31092 * C123 + C47473 * C511 - C31093 * C492) *
                C47359) *
               C15947 +
           ((C31095 - C31096 + C31097 - C31098) * C114 +
            (C31099 - C31100 + C31101 - C31102) * C47359) *
               C47440) *
              C47174 * C47156 * C108 +
          (((C31096 - C31095 + C31098 - C31097) * C114 +
            (C31100 - C31099 + C31102 - C31101) * C47359) *
               C15947 +
           ((C31103 - C31104 + C31105 - C31106) * C114 +
            (C31107 - C31108 + C31109 - C31110) * C47359) *
               C47440) *
              C47174 * C47156 * C109 +
          (((C31104 - C31103 + C31106 - C31105) * C114 +
            (C31108 - C31107 + C31110 - C31109) * C47359) *
               C15947 +
           ((C31111 - C31112 + C31113 - C31114) * C114 +
            (C31115 - C31116 + C31117 - C31118) * C47359) *
               C47440) *
              C47174 * C47156 * C110 +
          (((C31112 - C31111 + C31114 - C31113) * C114 +
            (C31116 - C31115 + C31118 - C31117) * C47359) *
               C15947 +
           ((C31119 - C31120 + C31121 - C31122) * C114 +
            (C31123 - C31124 + C31125 - C31126) * C47359) *
               C47440) *
              C47174 * C47156 * C111 +
          (((C31120 - C31119 + C31122 - C31121) * C114 +
            (C31124 - C31123 + C31126 - C31125) * C47359) *
               C15947 +
           ((C31090 * C132 - C31092 * C120 + C47473 * C773 - C31093 * C772) *
                C114 +
            (C31090 * C141 - C31092 * C133 + C47473 * C775 - C31093 * C774) *
                C47359) *
               C47440) *
              C47174 * C47156 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C31090 * C122 - C31092 * C115 + C47473 * C491 - C31093 * C481) *
                 C114 +
             (C31090 * C136 - C31092 * C123 + C47473 * C511 - C31093 * C492) *
                 C47359) *
                C15947 +
            ((C31095 - C31096 + C31097 - C31098) * C114 +
             (C31099 - C31100 + C31101 - C31102) * C47359) *
                C47440) *
               C47493 +
           (((C31092 * C481 - C31090 * C491 + C31093 * C484 - C47473 * C497) *
                 C114 +
             (C31092 * C492 - C31090 * C511 + C31093 * C498 - C47473 * C514) *
                 C47359) *
                C15947 +
            ((C31451 - C31452 + C31453 - C31454) * C114 +
             (C31455 - C31456 + C31457 - C31458) * C47359) *
                C47440) *
               C47482 +
           (((C31090 * C497 - C31092 * C484 + C47473 * C2002 - C31093 * C1996) *
                 C114 +
             (C31090 * C514 - C31092 * C498 + C47473 * C2014 - C31093 * C2003) *
                 C47359) *
                C15947 +
            ((C31459 - C31460 + C31461 - C31462) * C114 +
             (C31463 - C31464 + C31465 - C31466) * C47359) *
                C47440) *
               C47456) *
              C47156 * C291 +
          ((((C31096 - C31095 + C31098 - C31097) * C114 +
             (C31100 - C31099 + C31102 - C31101) * C47359) *
                C15947 +
            ((C31103 - C31104 + C31105 - C31106) * C114 +
             (C31107 - C31108 + C31109 - C31110) * C47359) *
                C47440) *
               C47493 +
           (((C31452 - C31451 + C31454 - C31453) * C114 +
             (C31456 - C31455 + C31458 - C31457) * C47359) *
                C15947 +
            ((C31467 - C31468 + C31469 - C31470) * C114 +
             (C31471 - C31472 + C31473 - C31474) * C47359) *
                C47440) *
               C47482 +
           (((C31460 - C31459 + C31462 - C31461) * C114 +
             (C31464 - C31463 + C31466 - C31465) * C47359) *
                C15947 +
            ((C31475 - C31476 + C31477 - C31478) * C114 +
             (C31479 - C31480 + C31481 - C31482) * C47359) *
                C47440) *
               C47456) *
              C47156 * C292 +
          ((((C31104 - C31103 + C31106 - C31105) * C114 +
             (C31108 - C31107 + C31110 - C31109) * C47359) *
                C15947 +
            ((C31111 - C31112 + C31113 - C31114) * C114 +
             (C31115 - C31116 + C31117 - C31118) * C47359) *
                C47440) *
               C47493 +
           (((C31468 - C31467 + C31470 - C31469) * C114 +
             (C31472 - C31471 + C31474 - C31473) * C47359) *
                C15947 +
            ((C31092 * C487 - C31090 * C503 + C31093 * C488 - C47473 * C505) *
                 C114 +
             (C31092 * C504 - C31090 * C517 + C31093 * C506 - C47473 * C518) *
                 C47359) *
                C47440) *
               C47482 +
           (((C31476 - C31475 + C31478 - C31477) * C114 +
             (C31480 - C31479 + C31482 - C31481) * C47359) *
                C15947 +
            ((C31090 * C505 - C31092 * C488 + C47473 * C2281 - C31093 * C2280) *
                 C114 +
             (C31090 * C518 - C31092 * C506 + C47473 * C2283 - C31093 * C2282) *
                 C47359) *
                C47440) *
               C47456) *
              C47156 * C47447)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C31090 * C122 - C31092 * C115 + C47473 * C491 - C31093 * C481) *
                 C114 +
             (C31090 * C136 - C31092 * C123 + C47473 * C511 - C31093 * C492) *
                 C47359) *
                C15947 +
            ((C31095 - C31096 + C31097 - C31098) * C114 +
             (C31099 - C31100 + C31101 - C31102) * C47359) *
                C47440) *
               C47174 * C1078 +
           (((C31092 * C294 - C31090 * C304 + C31093 * C931 - C47473 * C936) *
                 C114 +
             (C31092 * C305 - C31090 * C324 + C31093 * C937 - C47473 * C946) *
                 C47359) *
                C15947 +
            ((C31273 - C31274 + C31275 - C31276) * C114 +
             (C31277 - C31278 + C31279 - C31280) * C47359) *
                C47440) *
               C47174 * C1079 +
           (((C31090 * C310 - C31092 * C297 + C47473 * C1301 - C31093 * C1289) *
                 C114 +
             (C31090 * C327 - C31092 * C311 + C47473 * C1316 - C31093 * C1302) *
                 C47359) *
                C15947 +
            ((C31281 - C31282 + C31283 - C31284) * C114 +
             (C31285 - C31286 + C31287 - C31288) * C47359) *
                C47440) *
               C47174 * C47453) *
              C47489 +
          ((((C31096 - C31095 + C31098 - C31097) * C114 +
             (C31100 - C31099 + C31102 - C31101) * C47359) *
                C15947 +
            ((C31103 - C31104 + C31105 - C31106) * C114 +
             (C31107 - C31108 + C31109 - C31110) * C47359) *
                C47440) *
               C47174 * C1078 +
           (((C31274 - C31273 + C31276 - C31275) * C114 +
             (C31278 - C31277 + C31280 - C31279) * C47359) *
                C15947 +
            ((C31289 - C31290 + C31291 - C31292) * C114 +
             (C31293 - C31294 + C31295 - C31296) * C47359) *
                C47440) *
               C47174 * C1079 +
           (((C31282 - C31281 + C31284 - C31283) * C114 +
             (C31286 - C31285 + C31288 - C31287) * C47359) *
                C15947 +
            ((C31297 - C31298 + C31299 - C31300) * C114 +
             (C31301 - C31302 + C31303 - C31304) * C47359) *
                C47440) *
               C47174 * C47453) *
              C47476 +
          ((((C31104 - C31103 + C31106 - C31105) * C114 +
             (C31108 - C31107 + C31110 - C31109) * C47359) *
                C15947 +
            ((C31111 - C31112 + C31113 - C31114) * C114 +
             (C31115 - C31116 + C31117 - C31118) * C47359) *
                C47440) *
               C47174 * C1078 +
           (((C31290 - C31289 + C31292 - C31291) * C114 +
             (C31294 - C31293 + C31296 - C31295) * C47359) *
                C15947 +
            ((C31613 - C31614 + C31615 - C31616) * C114 +
             (C31617 - C31618 + C31619 - C31620) * C47359) *
                C47440) *
               C47174 * C1079 +
           (((C31298 - C31297 + C31300 - C31299) * C114 +
             (C31302 - C31301 + C31304 - C31303) * C47359) *
                C15947 +
            ((C31090 * C318 - C31092 * C301 + C47473 * C1585 - C31093 * C1584) *
                 C114 +
             (C31090 * C331 - C31092 * C319 + C47473 * C1587 - C31093 * C1586) *
                 C47359) *
                C47440) *
               C47174 * C47453) *
              C47447)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C31090 * C122 - C31092 * C115 + C47473 * C491 - C31093 * C481) *
                C114 +
            (C31090 * C136 - C31092 * C123 + C47473 * C511 - C31093 * C492) *
                C47359) *
               C15947 +
           ((C31095 - C31096 + C31097 - C31098) * C114 +
            (C31099 - C31100 + C31101 - C31102) * C47359) *
               C47440) *
              C47174 * C1146 +
          (((C31092 * C294 - C31090 * C304 + C31093 * C931 - C47473 * C936) *
                C114 +
            (C31092 * C305 - C31090 * C324 + C31093 * C937 - C47473 * C946) *
                C47359) *
               C15947 +
           ((C31273 - C31274 + C31275 - C31276) * C114 +
            (C31277 - C31278 + C31279 - C31280) * C47359) *
               C47440) *
              C47174 * C1147 +
          (((C31090 * C310 - C31092 * C297 + C47473 * C1301 - C31093 * C1289) *
                C114 +
            (C31090 * C327 - C31092 * C311 + C47473 * C1316 - C31093 * C1302) *
                C47359) *
               C15947 +
           ((C31281 - C31282 + C31283 - C31284) * C114 +
            (C31285 - C31286 + C31287 - C31288) * C47359) *
               C47440) *
              C47174 * C1148 +
          (((C31092 * C1152 - C31090 * C1158 + C31093 * C1694 -
             C47473 * C1697) *
                C114 +
            (C31092 * C1159 - C31090 * C1170 + C31093 * C1698 -
             C47473 * C1703) *
                C47359) *
               C15947 +
           ((C31092 * C1153 - C31090 * C1160 + C31093 * C1695 -
             C47473 * C1699) *
                C114 +
            (C31092 * C1161 - C31090 * C1171 + C31093 * C1700 -
             C47473 * C1704) *
                C47359) *
               C47440) *
              C47174 * C1149 +
          (((C31090 * C1164 - C31092 * C1155 + C47473 * C6413 -
             C31093 * C6411) *
                C114 +
            (C31090 * C1173 - C31092 * C1165 + C47473 * C6417 -
             C31093 * C6414) *
                C47359) *
               C15947 +
           ((C31090 * C1166 - C31092 * C1156 + C47473 * C6415 -
             C31093 * C6412) *
                C114 +
            (C31090 * C1174 - C31092 * C1167 + C47473 * C6418 -
             C31093 * C6416) *
                C47359) *
               C47440) *
              C47174 * C1150) *
         C47128) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C31090 * C122 - C31092 * C115 + C47473 * C491 - C31093 * C481) *
                 C114 +
             (C31090 * C136 - C31092 * C123 + C47473 * C511 - C31093 * C492) *
                 C47359) *
                C15947 +
            ((C31095 - C31096 + C31097 - C31098) * C114 +
             (C31099 - C31100 + C31101 - C31102) * C47359) *
                C47440) *
               C47493 +
           (((C31092 * C481 - C31090 * C491 + C31093 * C484 - C47473 * C497) *
                 C114 +
             (C31092 * C492 - C31090 * C511 + C31093 * C498 - C47473 * C514) *
                 C47359) *
                C15947 +
            ((C31451 - C31452 + C31453 - C31454) * C114 +
             (C31455 - C31456 + C31457 - C31458) * C47359) *
                C47440) *
               C47482 +
           (((C31090 * C497 - C31092 * C484 + C47473 * C2002 - C31093 * C1996) *
                 C114 +
             (C31090 * C514 - C31092 * C498 + C47473 * C2014 - C31093 * C2003) *
                 C47359) *
                C15947 +
            ((C31459 - C31460 + C31461 - C31462) * C114 +
             (C31463 - C31464 + C31465 - C31466) * C47359) *
                C47440) *
               C47456) *
              C1078 +
          ((((C31092 * C294 - C31090 * C304 + C31093 * C931 - C47473 * C936) *
                 C114 +
             (C31092 * C305 - C31090 * C324 + C31093 * C937 - C47473 * C946) *
                 C47359) *
                C15947 +
            ((C31273 - C31274 + C31275 - C31276) * C114 +
             (C31277 - C31278 + C31279 - C31280) * C47359) *
                C47440) *
               C47493 +
           (((C31090 * C936 - C31092 * C931 + C47473 * C1295 - C31093 * C1286) *
                 C114 +
             (C31090 * C946 - C31092 * C937 + C47473 * C1313 - C31093 * C1296) *
                 C47359) *
                C15947 +
            ((C31953 - C31954 + C31955 - C31956) * C114 +
             (C31957 - C31958 + C31959 - C31960) * C47359) *
                C47440) *
               C47482 +
           (((C31092 * C1286 - C31090 * C1295 + C31093 * C2390 -
              C47473 * C2393) *
                 C114 +
             (C31092 * C1296 - C31090 * C1313 + C31093 * C2394 -
              C47473 * C2399) *
                 C47359) *
                C15947 +
            ((C31092 * C1287 - C31090 * C1297 + C31093 * C2391 -
              C47473 * C2395) *
                 C114 +
             (C31092 * C1298 - C31090 * C1314 + C31093 * C2396 -
              C47473 * C2400) *
                 C47359) *
                C47440) *
               C47456) *
              C1079 +
          ((((C31090 * C310 - C31092 * C297 + C47473 * C1301 - C31093 * C1289) *
                 C114 +
             (C31090 * C327 - C31092 * C311 + C47473 * C1316 - C31093 * C1302) *
                 C47359) *
                C15947 +
            ((C31281 - C31282 + C31283 - C31284) * C114 +
             (C31285 - C31286 + C31287 - C31288) * C47359) *
                C47440) *
               C47493 +
           (((C31092 * C1289 - C31090 * C1301 + C31093 * C1292 -
              C47473 * C1307) *
                 C114 +
             (C31092 * C1302 - C31090 * C1316 + C31093 * C1308 -
              C47473 * C1319) *
                 C47359) *
                C15947 +
            ((C31092 * C1290 - C31090 * C1303 + C31093 * C1293 -
              C47473 * C1309) *
                 C114 +
             (C31092 * C1304 - C31090 * C1317 + C31093 * C1310 -
              C47473 * C1320) *
                 C47359) *
                C47440) *
               C47482 +
           (((C31090 * C1307 - C31092 * C1292 + C47473 * C7269 -
              C31093 * C7267) *
                 C114 +
             (C31090 * C1319 - C31092 * C1308 + C47473 * C7273 -
              C31093 * C7270) *
                 C47359) *
                C15947 +
            ((C31090 * C1309 - C31092 * C1293 + C47473 * C7271 -
              C31093 * C7268) *
                 C114 +
             (C31090 * C1320 - C31092 * C1310 + C47473 * C7274 -
              C31093 * C7272) *
                 C47359) *
                C47440) *
               C47456) *
              C47453) *
         C47128) /
            (p * q * std::sqrt(p + q));
    d2ee[173] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C31090 * C122 - C31092 * C115 + C47473 * C491 - C31093 * C481) *
                 C114 +
             (C31090 * C136 - C31092 * C123 + C47473 * C511 - C31093 * C492) *
                 C47359) *
                C15947 +
            ((C31095 - C31096 + C31097 - C31098) * C114 +
             (C31099 - C31100 + C31101 - C31102) * C47359) *
                C47440) *
               C47422 +
           (((C31092 * C481 - C31090 * C491 + C31093 * C484 - C47473 * C497) *
                 C114 +
             (C31092 * C492 - C31090 * C511 + C31093 * C498 - C47473 * C514) *
                 C47359) *
                C15947 +
            ((C31451 - C31452 + C31453 - C31454) * C114 +
             (C31455 - C31456 + C31457 - C31458) * C47359) *
                C47440) *
               C47261) *
              C47156 * C655 +
          ((((C31096 - C31095 + C31098 - C31097) * C114 +
             (C31100 - C31099 + C31102 - C31101) * C47359) *
                C15947 +
            ((C31103 - C31104 + C31105 - C31106) * C114 +
             (C31107 - C31108 + C31109 - C31110) * C47359) *
                C47440) *
               C47422 +
           (((C31452 - C31451 + C31454 - C31453) * C114 +
             (C31456 - C31455 + C31458 - C31457) * C47359) *
                C15947 +
            ((C31467 - C31468 + C31469 - C31470) * C114 +
             (C31471 - C31472 + C31473 - C31474) * C47359) *
                C47440) *
               C47261) *
              C47156 * C656 +
          ((((C31104 - C31103 + C31106 - C31105) * C114 +
             (C31108 - C31107 + C31110 - C31109) * C47359) *
                C15947 +
            ((C31111 - C31112 + C31113 - C31114) * C114 +
             (C31115 - C31116 + C31117 - C31118) * C47359) *
                C47440) *
               C47422 +
           (((C31468 - C31467 + C31470 - C31469) * C114 +
             (C31472 - C31471 + C31474 - C31473) * C47359) *
                C15947 +
            ((C31751 - C31752 + C31753 - C31754) * C114 +
             (C31755 - C31756 + C31757 - C31758) * C47359) *
                C47440) *
               C47261) *
              C47156 * C657 +
          ((((C31112 - C31111 + C31114 - C31113) * C114 +
             (C31116 - C31115 + C31118 - C31117) * C47359) *
                C15947 +
            ((C31119 - C31120 + C31121 - C31122) * C114 +
             (C31123 - C31124 + C31125 - C31126) * C47359) *
                C47440) *
               C47422 +
           (((C31752 - C31751 + C31754 - C31753) * C114 +
             (C31756 - C31755 + C31758 - C31757) * C47359) *
                C15947 +
            ((C31090 * C507 - C31092 * C489 + C47473 * C509 - C31093 * C490) *
                 C114 +
             (C31090 * C519 - C31092 * C508 + C47473 * C520 - C31093 * C510) *
                 C47359) *
                C47440) *
               C47261) *
              C47156 * C47457)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C31090 * C122 - C31092 * C115 + C47473 * C491 - C31093 * C481) *
                  C114 +
              (C31090 * C136 - C31092 * C123 + C47473 * C511 - C31093 * C492) *
                  C47359) *
                 C15947 +
             ((C31095 - C31096 + C31097 - C31098) * C114 +
              (C31099 - C31100 + C31101 - C31102) * C47359) *
                 C47440) *
                C47422 +
            (((C31092 * C481 - C31090 * C491 + C31093 * C484 - C47473 * C497) *
                  C114 +
              (C31092 * C492 - C31090 * C511 + C31093 * C498 - C47473 * C514) *
                  C47359) *
                 C15947 +
             ((C31451 - C31452 + C31453 - C31454) * C114 +
              (C31455 - C31456 + C31457 - C31458) * C47359) *
                 C47440) *
                C47261) *
               C1078 +
           ((((C31092 * C294 - C31090 * C304 + C31093 * C931 - C47473 * C936) *
                  C114 +
              (C31092 * C305 - C31090 * C324 + C31093 * C937 - C47473 * C946) *
                  C47359) *
                 C15947 +
             ((C31273 - C31274 + C31275 - C31276) * C114 +
              (C31277 - C31278 + C31279 - C31280) * C47359) *
                 C47440) *
                C47422 +
            (((C31090 * C936 - C31092 * C931 + C47473 * C1295 -
               C31093 * C1286) *
                  C114 +
              (C31090 * C946 - C31092 * C937 + C47473 * C1313 -
               C31093 * C1296) *
                  C47359) *
                 C15947 +
             ((C31953 - C31954 + C31955 - C31956) * C114 +
              (C31957 - C31958 + C31959 - C31960) * C47359) *
                 C47440) *
                C47261) *
               C1079 +
           ((((C31090 * C310 - C31092 * C297 + C47473 * C1301 -
               C31093 * C1289) *
                  C114 +
              (C31090 * C327 - C31092 * C311 + C47473 * C1316 -
               C31093 * C1302) *
                  C47359) *
                 C15947 +
             ((C31281 - C31282 + C31283 - C31284) * C114 +
              (C31285 - C31286 + C31287 - C31288) * C47359) *
                 C47440) *
                C47422 +
            (((C31092 * C1289 - C31090 * C1301 + C31093 * C1292 -
               C47473 * C1307) *
                  C114 +
              (C31092 * C1302 - C31090 * C1316 + C31093 * C1308 -
               C47473 * C1319) *
                  C47359) *
                 C15947 +
             ((C32675 - C32676 + C32677 - C32678) * C114 +
              (C32679 - C32680 + C32681 - C32682) * C47359) *
                 C47440) *
                C47261) *
               C47453) *
              C47407 +
          (((((C31096 - C31095 + C31098 - C31097) * C114 +
              (C31100 - C31099 + C31102 - C31101) * C47359) *
                 C15947 +
             ((C31103 - C31104 + C31105 - C31106) * C114 +
              (C31107 - C31108 + C31109 - C31110) * C47359) *
                 C47440) *
                C47422 +
            (((C31452 - C31451 + C31454 - C31453) * C114 +
              (C31456 - C31455 + C31458 - C31457) * C47359) *
                 C15947 +
             ((C31467 - C31468 + C31469 - C31470) * C114 +
              (C31471 - C31472 + C31473 - C31474) * C47359) *
                 C47440) *
                C47261) *
               C1078 +
           ((((C31274 - C31273 + C31276 - C31275) * C114 +
              (C31278 - C31277 + C31280 - C31279) * C47359) *
                 C15947 +
             ((C31289 - C31290 + C31291 - C31292) * C114 +
              (C31293 - C31294 + C31295 - C31296) * C47359) *
                 C47440) *
                C47422 +
            (((C31954 - C31953 + C31956 - C31955) * C114 +
              (C31958 - C31957 + C31960 - C31959) * C47359) *
                 C15947 +
             ((C31961 - C31962 + C31963 - C31964) * C114 +
              (C31965 - C31966 + C31967 - C31968) * C47359) *
                 C47440) *
                C47261) *
               C1079 +
           ((((C31282 - C31281 + C31284 - C31283) * C114 +
              (C31286 - C31285 + C31288 - C31287) * C47359) *
                 C15947 +
             ((C31297 - C31298 + C31299 - C31300) * C114 +
              (C31301 - C31302 + C31303 - C31304) * C47359) *
                 C47440) *
                C47422 +
            (((C32676 - C32675 + C32678 - C32677) * C114 +
              (C32680 - C32679 + C32682 - C32681) * C47359) *
                 C15947 +
             ((C31090 * C1305 - C31092 * C1291 + C47473 * C1311 -
               C31093 * C1294) *
                  C114 +
              (C31090 * C1318 - C31092 * C1306 + C47473 * C1321 -
               C31093 * C1312) *
                  C47359) *
                 C47440) *
                C47261) *
               C47453) *
              C47139)) /
            (p * q * std::sqrt(p + q));
    d2ee[174] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C31090 * C122 - C31092 * C115 + C47473 * C491 - C31093 * C481) *
                C114 +
            (C31090 * C136 - C31092 * C123 + C47473 * C511 - C31093 * C492) *
                C47359) *
               C15947 +
           ((C31095 - C31096 + C31097 - C31098) * C114 +
            (C31099 - C31100 + C31101 - C31102) * C47359) *
               C47440) *
              C47174 * C47156 * C108 +
          (((C31096 - C31095 + C31098 - C31097) * C114 +
            (C31100 - C31099 + C31102 - C31101) * C47359) *
               C15947 +
           ((C31103 - C31104 + C31105 - C31106) * C114 +
            (C31107 - C31108 + C31109 - C31110) * C47359) *
               C47440) *
              C47174 * C47156 * C109 +
          (((C31104 - C31103 + C31106 - C31105) * C114 +
            (C31108 - C31107 + C31110 - C31109) * C47359) *
               C15947 +
           ((C31111 - C31112 + C31113 - C31114) * C114 +
            (C31115 - C31116 + C31117 - C31118) * C47359) *
               C47440) *
              C47174 * C47156 * C110 +
          (((C31112 - C31111 + C31114 - C31113) * C114 +
            (C31116 - C31115 + C31118 - C31117) * C47359) *
               C15947 +
           ((C31119 - C31120 + C31121 - C31122) * C114 +
            (C31123 - C31124 + C31125 - C31126) * C47359) *
               C47440) *
              C47174 * C47156 * C111 +
          (((C31120 - C31119 + C31122 - C31121) * C114 +
            (C31124 - C31123 + C31126 - C31125) * C47359) *
               C15947 +
           ((C31090 * C132 - C31092 * C120 + C47473 * C773 - C31093 * C772) *
                C114 +
            (C31090 * C141 - C31092 * C133 + C47473 * C775 - C31093 * C774) *
                C47359) *
               C47440) *
              C47174 * C47156 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C31090 * C122 - C31092 * C115 + C47473 * C491 - C31093 * C481) *
                 C114 +
             (C31090 * C136 - C31092 * C123 + C47473 * C511 - C31093 * C492) *
                 C47359) *
                C15947 +
            ((C31095 - C31096 + C31097 - C31098) * C114 +
             (C31099 - C31100 + C31101 - C31102) * C47359) *
                C47440) *
               C47174 * C47492 +
           (((C31092 * C294 - C31090 * C304 + C31093 * C931 - C47473 * C936) *
                 C114 +
             (C31092 * C305 - C31090 * C324 + C31093 * C937 - C47473 * C946) *
                 C47359) *
                C15947 +
            ((C31273 - C31274 + C31275 - C31276) * C114 +
             (C31277 - C31278 + C31279 - C31280) * C47359) *
                C47440) *
               C47174 * C47480 +
           (((C31090 * C310 - C31092 * C297 + C47473 * C1301 - C31093 * C1289) *
                 C114 +
             (C31090 * C327 - C31092 * C311 + C47473 * C1316 - C31093 * C1302) *
                 C47359) *
                C15947 +
            ((C31281 - C31282 + C31283 - C31284) * C114 +
             (C31285 - C31286 + C31287 - C31288) * C47359) *
                C47440) *
               C47174 * C47453) *
              C291 +
          ((((C31096 - C31095 + C31098 - C31097) * C114 +
             (C31100 - C31099 + C31102 - C31101) * C47359) *
                C15947 +
            ((C31103 - C31104 + C31105 - C31106) * C114 +
             (C31107 - C31108 + C31109 - C31110) * C47359) *
                C47440) *
               C47174 * C47492 +
           (((C31274 - C31273 + C31276 - C31275) * C114 +
             (C31278 - C31277 + C31280 - C31279) * C47359) *
                C15947 +
            ((C31289 - C31290 + C31291 - C31292) * C114 +
             (C31293 - C31294 + C31295 - C31296) * C47359) *
                C47440) *
               C47174 * C47480 +
           (((C31282 - C31281 + C31284 - C31283) * C114 +
             (C31286 - C31285 + C31288 - C31287) * C47359) *
                C15947 +
            ((C31297 - C31298 + C31299 - C31300) * C114 +
             (C31301 - C31302 + C31303 - C31304) * C47359) *
                C47440) *
               C47174 * C47453) *
              C292 +
          ((((C31104 - C31103 + C31106 - C31105) * C114 +
             (C31108 - C31107 + C31110 - C31109) * C47359) *
                C15947 +
            ((C31111 - C31112 + C31113 - C31114) * C114 +
             (C31115 - C31116 + C31117 - C31118) * C47359) *
                C47440) *
               C47174 * C47492 +
           (((C31290 - C31289 + C31292 - C31291) * C114 +
             (C31294 - C31293 + C31296 - C31295) * C47359) *
                C15947 +
            ((C31092 * C300 - C31090 * C316 + C31093 * C934 - C47473 * C942) *
                 C114 +
             (C31092 * C317 - C31090 * C330 + C31093 * C943 - C47473 * C949) *
                 C47359) *
                C47440) *
               C47174 * C47480 +
           (((C31298 - C31297 + C31300 - C31299) * C114 +
             (C31302 - C31301 + C31304 - C31303) * C47359) *
                C15947 +
            ((C31090 * C318 - C31092 * C301 + C47473 * C1585 - C31093 * C1584) *
                 C114 +
             (C31090 * C331 - C31092 * C319 + C47473 * C1587 - C31093 * C1586) *
                 C47359) *
                C47440) *
               C47174 * C47453) *
              C47447)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C31090 * C122 - C31092 * C115 + C47473 * C491 - C31093 * C481) *
                 C114 +
             (C31090 * C136 - C31092 * C123 + C47473 * C511 - C31093 * C492) *
                 C47359) *
                C15947 +
            ((C31095 - C31096 + C31097 - C31098) * C114 +
             (C31099 - C31100 + C31101 - C31102) * C47359) *
                C47440) *
               C47174 * C1078 +
           (((C31092 * C294 - C31090 * C304 + C31093 * C931 - C47473 * C936) *
                 C114 +
             (C31092 * C305 - C31090 * C324 + C31093 * C937 - C47473 * C946) *
                 C47359) *
                C15947 +
            ((C31273 - C31274 + C31275 - C31276) * C114 +
             (C31277 - C31278 + C31279 - C31280) * C47359) *
                C47440) *
               C47174 * C1079 +
           (((C31090 * C310 - C31092 * C297 + C47473 * C1301 - C31093 * C1289) *
                 C114 +
             (C31090 * C327 - C31092 * C311 + C47473 * C1316 - C31093 * C1302) *
                 C47359) *
                C15947 +
            ((C31281 - C31282 + C31283 - C31284) * C114 +
             (C31285 - C31286 + C31287 - C31288) * C47359) *
                C47440) *
               C47174 * C47453) *
              C47489 +
          ((((C31096 - C31095 + C31098 - C31097) * C114 +
             (C31100 - C31099 + C31102 - C31101) * C47359) *
                C15947 +
            ((C31103 - C31104 + C31105 - C31106) * C114 +
             (C31107 - C31108 + C31109 - C31110) * C47359) *
                C47440) *
               C47174 * C1078 +
           (((C31274 - C31273 + C31276 - C31275) * C114 +
             (C31278 - C31277 + C31280 - C31279) * C47359) *
                C15947 +
            ((C31289 - C31290 + C31291 - C31292) * C114 +
             (C31293 - C31294 + C31295 - C31296) * C47359) *
                C47440) *
               C47174 * C1079 +
           (((C31282 - C31281 + C31284 - C31283) * C114 +
             (C31286 - C31285 + C31288 - C31287) * C47359) *
                C15947 +
            ((C31297 - C31298 + C31299 - C31300) * C114 +
             (C31301 - C31302 + C31303 - C31304) * C47359) *
                C47440) *
               C47174 * C47453) *
              C47476 +
          ((((C31104 - C31103 + C31106 - C31105) * C114 +
             (C31108 - C31107 + C31110 - C31109) * C47359) *
                C15947 +
            ((C31111 - C31112 + C31113 - C31114) * C114 +
             (C31115 - C31116 + C31117 - C31118) * C47359) *
                C47440) *
               C47174 * C1078 +
           (((C31290 - C31289 + C31292 - C31291) * C114 +
             (C31294 - C31293 + C31296 - C31295) * C47359) *
                C15947 +
            ((C31613 - C31614 + C31615 - C31616) * C114 +
             (C31617 - C31618 + C31619 - C31620) * C47359) *
                C47440) *
               C47174 * C1079 +
           (((C31298 - C31297 + C31300 - C31299) * C114 +
             (C31302 - C31301 + C31304 - C31303) * C47359) *
                C15947 +
            ((C31090 * C318 - C31092 * C301 + C47473 * C1585 - C31093 * C1584) *
                 C114 +
             (C31090 * C331 - C31092 * C319 + C47473 * C1587 - C31093 * C1586) *
                 C47359) *
                C47440) *
               C47174 * C47453) *
              C47447)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C31090 * C122 - C31092 * C115 + C47473 * C491 - C31093 * C481) *
                C114 +
            (C31090 * C136 - C31092 * C123 + C47473 * C511 - C31093 * C492) *
                C47359) *
               C15947 +
           ((C31095 - C31096 + C31097 - C31098) * C114 +
            (C31099 - C31100 + C31101 - C31102) * C47359) *
               C47440) *
              C47174 * C1146 +
          (((C31092 * C294 - C31090 * C304 + C31093 * C931 - C47473 * C936) *
                C114 +
            (C31092 * C305 - C31090 * C324 + C31093 * C937 - C47473 * C946) *
                C47359) *
               C15947 +
           ((C31273 - C31274 + C31275 - C31276) * C114 +
            (C31277 - C31278 + C31279 - C31280) * C47359) *
               C47440) *
              C47174 * C1147 +
          (((C31090 * C310 - C31092 * C297 + C47473 * C1301 - C31093 * C1289) *
                C114 +
            (C31090 * C327 - C31092 * C311 + C47473 * C1316 - C31093 * C1302) *
                C47359) *
               C15947 +
           ((C31281 - C31282 + C31283 - C31284) * C114 +
            (C31285 - C31286 + C31287 - C31288) * C47359) *
               C47440) *
              C47174 * C1148 +
          (((C31092 * C1152 - C31090 * C1158 + C31093 * C1694 -
             C47473 * C1697) *
                C114 +
            (C31092 * C1159 - C31090 * C1170 + C31093 * C1698 -
             C47473 * C1703) *
                C47359) *
               C15947 +
           ((C31092 * C1153 - C31090 * C1160 + C31093 * C1695 -
             C47473 * C1699) *
                C114 +
            (C31092 * C1161 - C31090 * C1171 + C31093 * C1700 -
             C47473 * C1704) *
                C47359) *
               C47440) *
              C47174 * C1149 +
          (((C31090 * C1164 - C31092 * C1155 + C47473 * C6413 -
             C31093 * C6411) *
                C114 +
            (C31090 * C1173 - C31092 * C1165 + C47473 * C6417 -
             C31093 * C6414) *
                C47359) *
               C15947 +
           ((C31090 * C1166 - C31092 * C1156 + C47473 * C6415 -
             C31093 * C6412) *
                C114 +
            (C31090 * C1174 - C31092 * C1167 + C47473 * C6418 -
             C31093 * C6416) *
                C47359) *
               C47440) *
              C47174 * C1150) *
         C47128) /
            (p * q * std::sqrt(p + q));
    d2ee[175] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C31090 * C122 - C31092 * C115 + C47473 * C491 - C31093 * C481) *
                C4747 +
            (C31090 * C136 - C31092 * C123 + C47473 * C511 - C31093 * C492) *
                C4743 +
            (C36849 - C36850 + C36851 - C36852) * C4748 +
            (C36853 - C36854 + C36855 - C36856) * C47471) *
               C47105 * C47174 * C47215 +
           ((C36850 - C36849 + C36852 - C36851) * C4747 +
            (C36854 - C36853 + C36856 - C36855) * C4743 +
            (C36857 - C36858 + C36859 - C36860) * C4748 +
            (C36861 - C36862 + C36863 - C36864) * C47471) *
               C47105 * C47174 * C47222 +
           ((C36858 - C36857 + C36860 - C36859) * C4747 +
            (C36862 - C36861 + C36864 - C36863) * C4743 +
            (C37701 - C37702 + C37703 - C37704) * C4748 +
            (C37705 - C37706 + C37707 - C37708) * C47471) *
               C47105 * C47174 * C2868) *
              C47133 +
          (((C31096 - C31095 + C31098 - C31097) * C4747 +
            (C31100 - C31099 + C31102 - C31101) * C4743 +
            (C31273 - C31274 + C31275 - C31276) * C4748 +
            (C31277 - C31278 + C31279 - C31280) * C47471) *
               C47105 * C47174 * C47215 +
           ((C31274 - C31273 + C31276 - C31275) * C4747 +
            (C31278 - C31277 + C31280 - C31279) * C4743 +
            (C31281 - C31282 + C31283 - C31284) * C4748 +
            (C31285 - C31286 + C31287 - C31288) * C47471) *
               C47105 * C47174 * C47222 +
           ((C31282 - C31281 + C31284 - C31283) * C4747 +
            (C31286 - C31285 + C31288 - C31287) * C4743 +
            (C32473 - C32474 + C32475 - C32476) * C4748 +
            (C32477 - C32478 + C32479 - C32480) * C47471) *
               C47105 * C47174 * C2868) *
              C47142 +
          (((C31104 - C31103 + C31106 - C31105) * C4747 +
            (C31108 - C31107 + C31110 - C31109) * C4743 +
            (C31289 - C31290 + C31291 - C31292) * C4748 +
            (C31293 - C31294 + C31295 - C31296) * C47471) *
               C47105 * C47174 * C47215 +
           ((C31290 - C31289 + C31292 - C31291) * C4747 +
            (C31294 - C31293 + C31296 - C31295) * C4743 +
            (C31297 - C31298 + C31299 - C31300) * C4748 +
            (C31301 - C31302 + C31303 - C31304) * C47471) *
               C47105 * C47174 * C47222 +
           ((C31298 - C31297 + C31300 - C31299) * C4747 +
            (C31302 - C31301 + C31304 - C31303) * C4743 +
            (C31090 * C1162 - C31092 * C1154 + C47473 * C1701 -
             C31093 * C1696) *
                C4748 +
            (C31090 * C1172 - C31092 * C1163 + C47473 * C1705 -
             C31093 * C1702) *
                C47471) *
               C47105 * C47174 * C2868) *
              C2871)) /
        (p * q * std::sqrt(p + q));
    d2ee[176] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C31090 * C122 - C31092 * C115 + C47473 * C491 - C31093 * C481) *
                 C4747 +
             (C31090 * C136 - C31092 * C123 + C47473 * C511 - C31093 * C492) *
                 C4743 +
             (C36849 - C36850 + C36851 - C36852) * C4748 +
             (C36853 - C36854 + C36855 - C36856) * C47471) *
                C47105 * C47422 +
            ((C31092 * C481 - C31090 * C491 + C31093 * C484 - C47473 * C497) *
                 C4747 +
             (C31092 * C492 - C31090 * C511 + C31093 * C498 - C47473 * C514) *
                 C4743 +
             (C37465 - C37466 + C37467 - C37468) * C4748 +
             (C37469 - C37470 + C37471 - C37472) * C47471) *
                C47105 * C47261) *
               C47215 +
           (((C36850 - C36849 + C36852 - C36851) * C4747 +
             (C36854 - C36853 + C36856 - C36855) * C4743 +
             (C36857 - C36858 + C36859 - C36860) * C4748 +
             (C36861 - C36862 + C36863 - C36864) * C47471) *
                C47105 * C47422 +
            ((C37466 - C37465 + C37468 - C37467) * C4747 +
             (C37470 - C37469 + C37472 - C37471) * C4743 +
             (C37871 - C37872 + C37873 - C37874) * C4748 +
             (C37875 - C37876 + C37877 - C37878) * C47471) *
                C47105 * C47261) *
               C47222 +
           (((C36858 - C36857 + C36860 - C36859) * C4747 +
             (C36862 - C36861 + C36864 - C36863) * C4743 +
             (C37701 - C37702 + C37703 - C37704) * C4748 +
             (C37705 - C37706 + C37707 - C37708) * C47471) *
                C47105 * C47422 +
            ((C37872 - C37871 + C37874 - C37873) * C4747 +
             (C37876 - C37875 + C37878 - C37877) * C4743 +
             (C38341 - C38342 + C38343 - C38344) * C4748 +
             (C38345 - C38346 + C38347 - C38348) * C47471) *
                C47105 * C47261) *
               C2868) *
              C2608 +
          ((((C31096 - C31095 + C31098 - C31097) * C4747 +
             (C31100 - C31099 + C31102 - C31101) * C4743 +
             (C31273 - C31274 + C31275 - C31276) * C4748 +
             (C31277 - C31278 + C31279 - C31280) * C47471) *
                C47105 * C47422 +
            ((C31452 - C31451 + C31454 - C31453) * C4747 +
             (C31456 - C31455 + C31458 - C31457) * C4743 +
             (C31953 - C31954 + C31955 - C31956) * C4748 +
             (C31957 - C31958 + C31959 - C31960) * C47471) *
                C47105 * C47261) *
               C47215 +
           (((C31274 - C31273 + C31276 - C31275) * C4747 +
             (C31278 - C31277 + C31280 - C31279) * C4743 +
             (C31281 - C31282 + C31283 - C31284) * C4748 +
             (C31285 - C31286 + C31287 - C31288) * C47471) *
                C47105 * C47422 +
            ((C31954 - C31953 + C31956 - C31955) * C4747 +
             (C31958 - C31957 + C31960 - C31959) * C4743 +
             (C32675 - C32676 + C32677 - C32678) * C4748 +
             (C32679 - C32680 + C32681 - C32682) * C47471) *
                C47105 * C47261) *
               C47222 +
           (((C31282 - C31281 + C31284 - C31283) * C4747 +
             (C31286 - C31285 + C31288 - C31287) * C4743 +
             (C32473 - C32474 + C32475 - C32476) * C4748 +
             (C32477 - C32478 + C32479 - C32480) * C47471) *
                C47105 * C47422 +
            ((C32676 - C32675 + C32678 - C32677) * C4747 +
             (C32680 - C32679 + C32682 - C32681) * C4743 +
             (C31090 * C1699 - C31092 * C1695 + C47473 * C5925 -
              C31093 * C5922) *
                 C4748 +
             (C31090 * C1704 - C31092 * C1700 + C47473 * C5928 -
              C31093 * C5926) *
                 C47471) *
                C47105 * C47261) *
               C2868) *
              C47139)) /
        (p * q * std::sqrt(p + q));
    d2ee[177] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C31090 * C122 - C31092 * C115 + C47473 * C491 - C31093 * C481) *
                C4747 +
            (C31090 * C136 - C31092 * C123 + C47473 * C511 - C31093 * C492) *
                C4743 +
            (C36849 - C36850 + C36851 - C36852) * C4748 +
            (C36853 - C36854 + C36855 - C36856) * C47471) *
               C47105 * C47174 * C47499 +
           ((C36850 - C36849 + C36852 - C36851) * C4747 +
            (C36854 - C36853 + C36856 - C36855) * C4743 +
            (C36857 - C36858 + C36859 - C36860) * C4748 +
            (C36861 - C36862 + C36863 - C36864) * C47471) *
               C47105 * C47174 * C47495 +
           ((C36858 - C36857 + C36860 - C36859) * C4747 +
            (C36862 - C36861 + C36864 - C36863) * C4743 +
            (C37701 - C37702 + C37703 - C37704) * C4748 +
            (C37705 - C37706 + C37707 - C37708) * C47471) *
               C47105 * C47174 * C47485 +
           ((C37702 - C37701 + C37704 - C37703) * C4747 +
            (C37706 - C37705 + C37708 - C37707) * C4743 +
            (C37709 - C37710 + C37711 - C37712) * C4748 +
            (C37713 - C37714 + C37715 - C37716) * C47471) *
               C47105 * C47174 * C47463) *
              C2608 +
          (((C31096 - C31095 + C31098 - C31097) * C4747 +
            (C31100 - C31099 + C31102 - C31101) * C4743 +
            (C31273 - C31274 + C31275 - C31276) * C4748 +
            (C31277 - C31278 + C31279 - C31280) * C47471) *
               C47105 * C47174 * C47499 +
           ((C31274 - C31273 + C31276 - C31275) * C4747 +
            (C31278 - C31277 + C31280 - C31279) * C4743 +
            (C31281 - C31282 + C31283 - C31284) * C4748 +
            (C31285 - C31286 + C31287 - C31288) * C47471) *
               C47105 * C47174 * C47495 +
           ((C31282 - C31281 + C31284 - C31283) * C4747 +
            (C31286 - C31285 + C31288 - C31287) * C4743 +
            (C32473 - C32474 + C32475 - C32476) * C4748 +
            (C32477 - C32478 + C32479 - C32480) * C47471) *
               C47105 * C47174 * C47485 +
           ((C32474 - C32473 + C32476 - C32475) * C4747 +
            (C32478 - C32477 + C32480 - C32479) * C4743 +
            (C31090 * C1166 - C31092 * C1156 + C47473 * C6415 -
             C31093 * C6412) *
                C4748 +
            (C31090 * C1174 - C31092 * C1167 + C47473 * C6418 -
             C31093 * C6416) *
                C47471) *
               C47105 * C47174 * C47463) *
              C47139)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C31090 * C122 - C31092 * C115 + C47473 * C491 - C31093 * C481) *
                C4747 +
            (C31090 * C136 - C31092 * C123 + C47473 * C511 - C31093 * C492) *
                C4743 +
            (C36849 - C36850 + C36851 - C36852) * C4748 +
            (C36853 - C36854 + C36855 - C36856) * C47471) *
               C47105 * C47174 * C2500 +
           ((C36850 - C36849 + C36852 - C36851) * C4747 +
            (C36854 - C36853 + C36856 - C36855) * C4743 +
            (C36857 - C36858 + C36859 - C36860) * C4748 +
            (C36861 - C36862 + C36863 - C36864) * C47471) *
               C47105 * C47174 * C47219) *
              C47498 +
          (((C31096 - C31095 + C31098 - C31097) * C4747 +
            (C31100 - C31099 + C31102 - C31101) * C4743 +
            (C31273 - C31274 + C31275 - C31276) * C4748 +
            (C31277 - C31278 + C31279 - C31280) * C47471) *
               C47105 * C47174 * C2500 +
           ((C31274 - C31273 + C31276 - C31275) * C4747 +
            (C31278 - C31277 + C31280 - C31279) * C4743 +
            (C31281 - C31282 + C31283 - C31284) * C4748 +
            (C31285 - C31286 + C31287 - C31288) * C47471) *
               C47105 * C47174 * C47219) *
              C47491 +
          (((C31104 - C31103 + C31106 - C31105) * C4747 +
            (C31108 - C31107 + C31110 - C31109) * C4743 +
            (C31289 - C31290 + C31291 - C31292) * C4748 +
            (C31293 - C31294 + C31295 - C31296) * C47471) *
               C47105 * C47174 * C2500 +
           ((C31290 - C31289 + C31292 - C31291) * C4747 +
            (C31294 - C31293 + C31296 - C31295) * C4743 +
            (C31297 - C31298 + C31299 - C31300) * C4748 +
            (C31301 - C31302 + C31303 - C31304) * C47471) *
               C47105 * C47174 * C47219) *
              C47478 +
          (((C31112 - C31111 + C31114 - C31113) * C4747 +
            (C31116 - C31115 + C31118 - C31117) * C4743 +
            (C31613 - C31614 + C31615 - C31616) * C4748 +
            (C31617 - C31618 + C31619 - C31620) * C47471) *
               C47105 * C47174 * C2500 +
           ((C31614 - C31613 + C31616 - C31615) * C4747 +
            (C31618 - C31617 + C31620 - C31619) * C4743 +
            (C31090 * C318 - C31092 * C301 + C47473 * C1585 - C31093 * C1584) *
                C4748 +
            (C31090 * C331 - C31092 * C319 + C47473 * C1587 - C31093 * C1586) *
                C47471) *
               C47105 * C47174 * C47219) *
              C47457)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C31090 * C122 - C31092 * C115 + C47473 * C491 - C31093 * C481) *
                 C4747 +
             (C31090 * C136 - C31092 * C123 + C47473 * C511 - C31093 * C492) *
                 C4743 +
             (C36849 - C36850 + C36851 - C36852) * C4748 +
             (C36853 - C36854 + C36855 - C36856) * C47471) *
                C47105 * C47493 +
            ((C31092 * C481 - C31090 * C491 + C31093 * C484 - C47473 * C497) *
                 C4747 +
             (C31092 * C492 - C31090 * C511 + C31093 * C498 - C47473 * C514) *
                 C4743 +
             (C37465 - C37466 + C37467 - C37468) * C4748 +
             (C37469 - C37470 + C37471 - C37472) * C47471) *
                C47105 * C47482 +
            ((C31090 * C497 - C31092 * C484 + C47473 * C2002 - C31093 * C1996) *
                 C4747 +
             (C31090 * C514 - C31092 * C498 + C47473 * C2014 - C31093 * C2003) *
                 C4743 +
             (C37863 - C37864 + C37865 - C37866) * C4748 +
             (C37867 - C37868 + C37869 - C37870) * C47471) *
                C47105 * C47456) *
               C2500 +
           (((C36850 - C36849 + C36852 - C36851) * C4747 +
             (C36854 - C36853 + C36856 - C36855) * C4743 +
             (C36857 - C36858 + C36859 - C36860) * C4748 +
             (C36861 - C36862 + C36863 - C36864) * C47471) *
                C47105 * C47493 +
            ((C37466 - C37465 + C37468 - C37467) * C4747 +
             (C37470 - C37469 + C37472 - C37471) * C4743 +
             (C37871 - C37872 + C37873 - C37874) * C4748 +
             (C37875 - C37876 + C37877 - C37878) * C47471) *
                C47105 * C47482 +
            ((C37864 - C37863 + C37866 - C37865) * C4747 +
             (C37868 - C37867 + C37870 - C37869) * C4743 +
             (C37879 - C37880 + C37881 - C37882) * C4748 +
             (C37883 - C37884 + C37885 - C37886) * C47471) *
                C47105 * C47456) *
               C47219) *
              C2608 +
          ((((C31096 - C31095 + C31098 - C31097) * C4747 +
             (C31100 - C31099 + C31102 - C31101) * C4743 +
             (C31273 - C31274 + C31275 - C31276) * C4748 +
             (C31277 - C31278 + C31279 - C31280) * C47471) *
                C47105 * C47493 +
            ((C31452 - C31451 + C31454 - C31453) * C4747 +
             (C31456 - C31455 + C31458 - C31457) * C4743 +
             (C31953 - C31954 + C31955 - C31956) * C4748 +
             (C31957 - C31958 + C31959 - C31960) * C47471) *
                C47105 * C47482 +
            ((C31460 - C31459 + C31462 - C31461) * C4747 +
             (C31464 - C31463 + C31466 - C31465) * C4743 +
             (C33381 - C33382 + C33383 - C33384) * C4748 +
             (C33385 - C33386 + C33387 - C33388) * C47471) *
                C47105 * C47456) *
               C2500 +
           (((C31274 - C31273 + C31276 - C31275) * C4747 +
             (C31278 - C31277 + C31280 - C31279) * C4743 +
             (C31281 - C31282 + C31283 - C31284) * C4748 +
             (C31285 - C31286 + C31287 - C31288) * C47471) *
                C47105 * C47493 +
            ((C31954 - C31953 + C31956 - C31955) * C4747 +
             (C31958 - C31957 + C31960 - C31959) * C4743 +
             (C32675 - C32676 + C32677 - C32678) * C4748 +
             (C32679 - C32680 + C32681 - C32682) * C47471) *
                C47105 * C47482 +
            ((C33382 - C33381 + C33384 - C33383) * C4747 +
             (C33386 - C33385 + C33388 - C33387) * C4743 +
             (C31090 * C1309 - C31092 * C1293 + C47473 * C7271 -
              C31093 * C7268) *
                 C4748 +
             (C31090 * C1320 - C31092 * C1310 + C47473 * C7274 -
              C31093 * C7272) *
                 C47471) *
                C47105 * C47456) *
               C47219) *
              C47139)) /
            (p * q * std::sqrt(p + q));
    d2ee[178] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C31090 * C122 - C31092 * C115 + C47473 * C491 - C31093 * C481) *
                 C4747 +
             (C31090 * C136 - C31092 * C123 + C47473 * C511 - C31093 * C492) *
                 C4743 +
             (C36849 - C36850 + C36851 - C36852) * C4748 +
             (C36853 - C36854 + C36855 - C36856) * C47471) *
                C47105 * C47422 +
            ((C31092 * C481 - C31090 * C491 + C31093 * C484 - C47473 * C497) *
                 C4747 +
             (C31092 * C492 - C31090 * C511 + C31093 * C498 - C47473 * C514) *
                 C4743 +
             (C37465 - C37466 + C37467 - C37468) * C4748 +
             (C37469 - C37470 + C37471 - C37472) * C47471) *
                C47105 * C47261) *
               C2500 +
           (((C36850 - C36849 + C36852 - C36851) * C4747 +
             (C36854 - C36853 + C36856 - C36855) * C4743 +
             (C36857 - C36858 + C36859 - C36860) * C4748 +
             (C36861 - C36862 + C36863 - C36864) * C47471) *
                C47105 * C47422 +
            ((C37466 - C37465 + C37468 - C37467) * C4747 +
             (C37470 - C37469 + C37472 - C37471) * C4743 +
             (C37871 - C37872 + C37873 - C37874) * C4748 +
             (C37875 - C37876 + C37877 - C37878) * C47471) *
                C47105 * C47261) *
               C47219) *
              C47133 +
          ((((C31096 - C31095 + C31098 - C31097) * C4747 +
             (C31100 - C31099 + C31102 - C31101) * C4743 +
             (C31273 - C31274 + C31275 - C31276) * C4748 +
             (C31277 - C31278 + C31279 - C31280) * C47471) *
                C47105 * C47422 +
            ((C31452 - C31451 + C31454 - C31453) * C4747 +
             (C31456 - C31455 + C31458 - C31457) * C4743 +
             (C31953 - C31954 + C31955 - C31956) * C4748 +
             (C31957 - C31958 + C31959 - C31960) * C47471) *
                C47105 * C47261) *
               C2500 +
           (((C31274 - C31273 + C31276 - C31275) * C4747 +
             (C31278 - C31277 + C31280 - C31279) * C4743 +
             (C31281 - C31282 + C31283 - C31284) * C4748 +
             (C31285 - C31286 + C31287 - C31288) * C47471) *
                C47105 * C47422 +
            ((C31954 - C31953 + C31956 - C31955) * C4747 +
             (C31958 - C31957 + C31960 - C31959) * C4743 +
             (C32675 - C32676 + C32677 - C32678) * C4748 +
             (C32679 - C32680 + C32681 - C32682) * C47471) *
                C47105 * C47261) *
               C47219) *
              C47142 +
          ((((C31104 - C31103 + C31106 - C31105) * C4747 +
             (C31108 - C31107 + C31110 - C31109) * C4743 +
             (C31289 - C31290 + C31291 - C31292) * C4748 +
             (C31293 - C31294 + C31295 - C31296) * C47471) *
                C47105 * C47422 +
            ((C31468 - C31467 + C31470 - C31469) * C4747 +
             (C31472 - C31471 + C31474 - C31473) * C4743 +
             (C31961 - C31962 + C31963 - C31964) * C4748 +
             (C31965 - C31966 + C31967 - C31968) * C47471) *
                C47105 * C47261) *
               C2500 +
           (((C31290 - C31289 + C31292 - C31291) * C4747 +
             (C31294 - C31293 + C31296 - C31295) * C4743 +
             (C31297 - C31298 + C31299 - C31300) * C4748 +
             (C31301 - C31302 + C31303 - C31304) * C47471) *
                C47105 * C47422 +
            ((C31962 - C31961 + C31964 - C31963) * C4747 +
             (C31966 - C31965 + C31968 - C31967) * C4743 +
             (C31090 * C1305 - C31092 * C1291 + C47473 * C1311 -
              C31093 * C1294) *
                 C4748 +
             (C31090 * C1318 - C31092 * C1306 + C47473 * C1321 -
              C31093 * C1312) *
                 C47471) *
                C47105 * C47261) *
               C47219) *
              C2871)) /
        (p * q * std::sqrt(p + q));
    d2ee[179] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C31090 * C122 - C31092 * C115 + C47473 * C491 - C31093 * C481) *
                C4747 +
            (C31090 * C136 - C31092 * C123 + C47473 * C511 - C31093 * C492) *
                C4743 +
            (C36849 - C36850 + C36851 - C36852) * C4748 +
            (C36853 - C36854 + C36855 - C36856) * C47471) *
               C47105 * C47174 * C2500 +
           ((C36850 - C36849 + C36852 - C36851) * C4747 +
            (C36854 - C36853 + C36856 - C36855) * C4743 +
            (C36857 - C36858 + C36859 - C36860) * C4748 +
            (C36861 - C36862 + C36863 - C36864) * C47471) *
               C47105 * C47174 * C47219) *
              C47498 +
          (((C31096 - C31095 + C31098 - C31097) * C4747 +
            (C31100 - C31099 + C31102 - C31101) * C4743 +
            (C31273 - C31274 + C31275 - C31276) * C4748 +
            (C31277 - C31278 + C31279 - C31280) * C47471) *
               C47105 * C47174 * C2500 +
           ((C31274 - C31273 + C31276 - C31275) * C4747 +
            (C31278 - C31277 + C31280 - C31279) * C4743 +
            (C31281 - C31282 + C31283 - C31284) * C4748 +
            (C31285 - C31286 + C31287 - C31288) * C47471) *
               C47105 * C47174 * C47219) *
              C47491 +
          (((C31104 - C31103 + C31106 - C31105) * C4747 +
            (C31108 - C31107 + C31110 - C31109) * C4743 +
            (C31289 - C31290 + C31291 - C31292) * C4748 +
            (C31293 - C31294 + C31295 - C31296) * C47471) *
               C47105 * C47174 * C2500 +
           ((C31290 - C31289 + C31292 - C31291) * C4747 +
            (C31294 - C31293 + C31296 - C31295) * C4743 +
            (C31297 - C31298 + C31299 - C31300) * C4748 +
            (C31301 - C31302 + C31303 - C31304) * C47471) *
               C47105 * C47174 * C47219) *
              C47478 +
          (((C31112 - C31111 + C31114 - C31113) * C4747 +
            (C31116 - C31115 + C31118 - C31117) * C4743 +
            (C31613 - C31614 + C31615 - C31616) * C4748 +
            (C31617 - C31618 + C31619 - C31620) * C47471) *
               C47105 * C47174 * C2500 +
           ((C31614 - C31613 + C31616 - C31615) * C4747 +
            (C31618 - C31617 + C31620 - C31619) * C4743 +
            (C31090 * C318 - C31092 * C301 + C47473 * C1585 - C31093 * C1584) *
                C4748 +
            (C31090 * C331 - C31092 * C319 + C47473 * C1587 - C31093 * C1586) *
                C47471) *
               C47105 * C47174 * C47219) *
              C47457)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C31090 * C122 - C31092 * C115 + C47473 * C491 - C31093 * C481) *
                C4747 +
            (C31090 * C136 - C31092 * C123 + C47473 * C511 - C31093 * C492) *
                C4743 +
            (C36849 - C36850 + C36851 - C36852) * C4748 +
            (C36853 - C36854 + C36855 - C36856) * C47471) *
               C47105 * C47174 * C47499 +
           ((C36850 - C36849 + C36852 - C36851) * C4747 +
            (C36854 - C36853 + C36856 - C36855) * C4743 +
            (C36857 - C36858 + C36859 - C36860) * C4748 +
            (C36861 - C36862 + C36863 - C36864) * C47471) *
               C47105 * C47174 * C47495 +
           ((C36858 - C36857 + C36860 - C36859) * C4747 +
            (C36862 - C36861 + C36864 - C36863) * C4743 +
            (C37701 - C37702 + C37703 - C37704) * C4748 +
            (C37705 - C37706 + C37707 - C37708) * C47471) *
               C47105 * C47174 * C47485 +
           ((C37702 - C37701 + C37704 - C37703) * C4747 +
            (C37706 - C37705 + C37708 - C37707) * C4743 +
            (C37709 - C37710 + C37711 - C37712) * C4748 +
            (C37713 - C37714 + C37715 - C37716) * C47471) *
               C47105 * C47174 * C47463) *
              C2608 +
          (((C31096 - C31095 + C31098 - C31097) * C4747 +
            (C31100 - C31099 + C31102 - C31101) * C4743 +
            (C31273 - C31274 + C31275 - C31276) * C4748 +
            (C31277 - C31278 + C31279 - C31280) * C47471) *
               C47105 * C47174 * C47499 +
           ((C31274 - C31273 + C31276 - C31275) * C4747 +
            (C31278 - C31277 + C31280 - C31279) * C4743 +
            (C31281 - C31282 + C31283 - C31284) * C4748 +
            (C31285 - C31286 + C31287 - C31288) * C47471) *
               C47105 * C47174 * C47495 +
           ((C31282 - C31281 + C31284 - C31283) * C4747 +
            (C31286 - C31285 + C31288 - C31287) * C4743 +
            (C32473 - C32474 + C32475 - C32476) * C4748 +
            (C32477 - C32478 + C32479 - C32480) * C47471) *
               C47105 * C47174 * C47485 +
           ((C32474 - C32473 + C32476 - C32475) * C4747 +
            (C32478 - C32477 + C32480 - C32479) * C4743 +
            (C31090 * C1166 - C31092 * C1156 + C47473 * C6415 -
             C31093 * C6412) *
                C4748 +
            (C31090 * C1174 - C31092 * C1167 + C47473 * C6418 -
             C31093 * C6416) *
                C47471) *
               C47105 * C47174 * C47463) *
              C47139)) /
            (p * q * std::sqrt(p + q));
    d2ee[180] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C31090 * C122 - C31092 * C115 + C47473 * C491 - C31093 * C481) *
                 C4747 +
             (C31090 * C136 - C31092 * C123 + C47473 * C511 - C31093 * C492) *
                 C4743 +
             (C36849 - C36850 + C36851 - C36852) * C4748 +
             (C36853 - C36854 + C36855 - C36856) * C47471) *
                C47105 * C3262 +
            ((C31092 * C481 - C31090 * C491 + C31093 * C484 - C47473 * C497) *
                 C4747 +
             (C31092 * C492 - C31090 * C511 + C31093 * C498 - C47473 * C514) *
                 C4743 +
             (C37465 - C37466 + C37467 - C37468) * C4748 +
             (C37469 - C37470 + C37471 - C37472) * C47471) *
                C47105 * C47261) *
               C47215 +
           (((C36850 - C36849 + C36852 - C36851) * C4747 +
             (C36854 - C36853 + C36856 - C36855) * C4743 +
             (C36857 - C36858 + C36859 - C36860) * C4748 +
             (C36861 - C36862 + C36863 - C36864) * C47471) *
                C47105 * C3262 +
            ((C37466 - C37465 + C37468 - C37467) * C4747 +
             (C37470 - C37469 + C37472 - C37471) * C4743 +
             (C37871 - C37872 + C37873 - C37874) * C4748 +
             (C37875 - C37876 + C37877 - C37878) * C47471) *
                C47105 * C47261) *
               C47222 +
           (((C36858 - C36857 + C36860 - C36859) * C4747 +
             (C36862 - C36861 + C36864 - C36863) * C4743 +
             (C37701 - C37702 + C37703 - C37704) * C4748 +
             (C37705 - C37706 + C37707 - C37708) * C47471) *
                C47105 * C3262 +
            ((C37872 - C37871 + C37874 - C37873) * C4747 +
             (C37876 - C37875 + C37878 - C37877) * C4743 +
             (C38341 - C38342 + C38343 - C38344) * C4748 +
             (C38345 - C38346 + C38347 - C38348) * C47471) *
                C47105 * C47261) *
               C2868) *
              C47407 +
          ((((C31096 - C31095 + C31098 - C31097) * C4747 +
             (C31100 - C31099 + C31102 - C31101) * C4743 +
             (C31273 - C31274 + C31275 - C31276) * C4748 +
             (C31277 - C31278 + C31279 - C31280) * C47471) *
                C47105 * C3262 +
            ((C31452 - C31451 + C31454 - C31453) * C4747 +
             (C31456 - C31455 + C31458 - C31457) * C4743 +
             (C31953 - C31954 + C31955 - C31956) * C4748 +
             (C31957 - C31958 + C31959 - C31960) * C47471) *
                C47105 * C47261) *
               C47215 +
           (((C31274 - C31273 + C31276 - C31275) * C4747 +
             (C31278 - C31277 + C31280 - C31279) * C4743 +
             (C31281 - C31282 + C31283 - C31284) * C4748 +
             (C31285 - C31286 + C31287 - C31288) * C47471) *
                C47105 * C3262 +
            ((C31954 - C31953 + C31956 - C31955) * C4747 +
             (C31958 - C31957 + C31960 - C31959) * C4743 +
             (C32675 - C32676 + C32677 - C32678) * C4748 +
             (C32679 - C32680 + C32681 - C32682) * C47471) *
                C47105 * C47261) *
               C47222 +
           (((C31282 - C31281 + C31284 - C31283) * C4747 +
             (C31286 - C31285 + C31288 - C31287) * C4743 +
             (C32473 - C32474 + C32475 - C32476) * C4748 +
             (C32477 - C32478 + C32479 - C32480) * C47471) *
                C47105 * C3262 +
            ((C32676 - C32675 + C32678 - C32677) * C4747 +
             (C32680 - C32679 + C32682 - C32681) * C4743 +
             (C31090 * C1699 - C31092 * C1695 + C47473 * C5925 -
              C31093 * C5922) *
                 C4748 +
             (C31090 * C1704 - C31092 * C1700 + C47473 * C5928 -
              C31093 * C5926) *
                 C47471) *
                C47105 * C47261) *
               C2868) *
              C47139)) /
        (p * q * std::sqrt(p + q));
    d2ee[181] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C31090 * C122 - C31092 * C115 + C47473 * C491 - C31093 * C481) *
                C4747 +
            (C31090 * C136 - C31092 * C123 + C47473 * C511 - C31093 * C492) *
                C4743 +
            (C36849 - C36850 + C36851 - C36852) * C4748 +
            (C36853 - C36854 + C36855 - C36856) * C47471) *
               C47105 * C47257 +
           ((C31092 * C481 - C31090 * C491 + C31093 * C484 - C47473 * C497) *
                C4747 +
            (C31092 * C492 - C31090 * C511 + C31093 * C498 - C47473 * C514) *
                C4743 +
            (C37465 - C37466 + C37467 - C37468) * C4748 +
            (C37469 - C37470 + C37471 - C37472) * C47471) *
               C47105 * C47264 +
           ((C31090 * C497 - C31092 * C484 + C47473 * C2002 - C31093 * C1996) *
                C4747 +
            (C31090 * C514 - C31092 * C498 + C47473 * C2014 - C31093 * C2003) *
                C4743 +
            (C37863 - C37864 + C37865 - C37866) * C4748 +
            (C37867 - C37868 + C37869 - C37870) * C47471) *
               C47105 * C3770) *
              C47215 +
          (((C36850 - C36849 + C36852 - C36851) * C4747 +
            (C36854 - C36853 + C36856 - C36855) * C4743 +
            (C36857 - C36858 + C36859 - C36860) * C4748 +
            (C36861 - C36862 + C36863 - C36864) * C47471) *
               C47105 * C47257 +
           ((C37466 - C37465 + C37468 - C37467) * C4747 +
            (C37470 - C37469 + C37472 - C37471) * C4743 +
            (C37871 - C37872 + C37873 - C37874) * C4748 +
            (C37875 - C37876 + C37877 - C37878) * C47471) *
               C47105 * C47264 +
           ((C37864 - C37863 + C37866 - C37865) * C4747 +
            (C37868 - C37867 + C37870 - C37869) * C4743 +
            (C37879 - C37880 + C37881 - C37882) * C4748 +
            (C37883 - C37884 + C37885 - C37886) * C47471) *
               C47105 * C3770) *
              C47222 +
          (((C36858 - C36857 + C36860 - C36859) * C4747 +
            (C36862 - C36861 + C36864 - C36863) * C4743 +
            (C37701 - C37702 + C37703 - C37704) * C4748 +
            (C37705 - C37706 + C37707 - C37708) * C47471) *
               C47105 * C47257 +
           ((C37872 - C37871 + C37874 - C37873) * C4747 +
            (C37876 - C37875 + C37878 - C37877) * C4743 +
            (C38341 - C38342 + C38343 - C38344) * C4748 +
            (C38345 - C38346 + C38347 - C38348) * C47471) *
               C47105 * C47264 +
           ((C37880 - C37879 + C37882 - C37881) * C4747 +
            (C37884 - C37883 + C37886 - C37885) * C4743 +
            (C31090 * C5923 - C31092 * C5921 + C47473 * C23237 -
             C31093 * C23236) *
                C4748 +
            (C31090 * C5927 - C31092 * C5924 + C47473 * C23239 -
             C31093 * C23238) *
                C47471) *
               C47105 * C3770) *
              C2868) *
         C47128) /
        (p * q * std::sqrt(p + q));
    d2ee[182] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C31090 * C122 - C31092 * C115 + C47473 * C491 - C31093 * C481) *
                C4747 +
            (C31090 * C136 - C31092 * C123 + C47473 * C511 - C31093 * C492) *
                C4743 +
            (C36849 - C36850 + C36851 - C36852) * C4748 +
            (C36853 - C36854 + C36855 - C36856) * C47471) *
               C47105 * C3262 +
           ((C31092 * C481 - C31090 * C491 + C31093 * C484 - C47473 * C497) *
                C4747 +
            (C31092 * C492 - C31090 * C511 + C31093 * C498 - C47473 * C514) *
                C4743 +
            (C37465 - C37466 + C37467 - C37468) * C4748 +
            (C37469 - C37470 + C37471 - C37472) * C47471) *
               C47105 * C47261) *
              C47499 +
          (((C36850 - C36849 + C36852 - C36851) * C4747 +
            (C36854 - C36853 + C36856 - C36855) * C4743 +
            (C36857 - C36858 + C36859 - C36860) * C4748 +
            (C36861 - C36862 + C36863 - C36864) * C47471) *
               C47105 * C3262 +
           ((C37466 - C37465 + C37468 - C37467) * C4747 +
            (C37470 - C37469 + C37472 - C37471) * C4743 +
            (C37871 - C37872 + C37873 - C37874) * C4748 +
            (C37875 - C37876 + C37877 - C37878) * C47471) *
               C47105 * C47261) *
              C47495 +
          (((C36858 - C36857 + C36860 - C36859) * C4747 +
            (C36862 - C36861 + C36864 - C36863) * C4743 +
            (C37701 - C37702 + C37703 - C37704) * C4748 +
            (C37705 - C37706 + C37707 - C37708) * C47471) *
               C47105 * C3262 +
           ((C37872 - C37871 + C37874 - C37873) * C4747 +
            (C37876 - C37875 + C37878 - C37877) * C4743 +
            (C38341 - C38342 + C38343 - C38344) * C4748 +
            (C38345 - C38346 + C38347 - C38348) * C47471) *
               C47105 * C47261) *
              C47485 +
          (((C37702 - C37701 + C37704 - C37703) * C4747 +
            (C37706 - C37705 + C37708 - C37707) * C4743 +
            (C37709 - C37710 + C37711 - C37712) * C4748 +
            (C37713 - C37714 + C37715 - C37716) * C47471) *
               C47105 * C3262 +
           ((C38342 - C38341 + C38344 - C38343) * C4747 +
            (C38346 - C38345 + C38348 - C38347) * C4743 +
            (C31090 * C6413 - C31092 * C6411 + C47473 * C22245 -
             C31093 * C22244) *
                C4748 +
            (C31090 * C6417 - C31092 * C6414 + C47473 * C22247 -
             C31093 * C22246) *
                C47471) *
               C47105 * C47261) *
              C47463) *
         C47128) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C31090 * C122 - C31092 * C115 + C47473 * C491 - C31093 * C481) *
                 C4747 +
             (C31090 * C136 - C31092 * C123 + C47473 * C511 - C31093 * C492) *
                 C4743 +
             (C36849 - C36850 + C36851 - C36852) * C4748 +
             (C36853 - C36854 + C36855 - C36856) * C47471) *
                C47105 * C3262 +
            ((C31092 * C481 - C31090 * C491 + C31093 * C484 - C47473 * C497) *
                 C4747 +
             (C31092 * C492 - C31090 * C511 + C31093 * C498 - C47473 * C514) *
                 C4743 +
             (C37465 - C37466 + C37467 - C37468) * C4748 +
             (C37469 - C37470 + C37471 - C37472) * C47471) *
                C47105 * C47261) *
               C2500 +
           (((C36850 - C36849 + C36852 - C36851) * C4747 +
             (C36854 - C36853 + C36856 - C36855) * C4743 +
             (C36857 - C36858 + C36859 - C36860) * C4748 +
             (C36861 - C36862 + C36863 - C36864) * C47471) *
                C47105 * C3262 +
            ((C37466 - C37465 + C37468 - C37467) * C4747 +
             (C37470 - C37469 + C37472 - C37471) * C4743 +
             (C37871 - C37872 + C37873 - C37874) * C4748 +
             (C37875 - C37876 + C37877 - C37878) * C47471) *
                C47105 * C47261) *
               C47219) *
              C47489 +
          ((((C31096 - C31095 + C31098 - C31097) * C4747 +
             (C31100 - C31099 + C31102 - C31101) * C4743 +
             (C31273 - C31274 + C31275 - C31276) * C4748 +
             (C31277 - C31278 + C31279 - C31280) * C47471) *
                C47105 * C3262 +
            ((C31452 - C31451 + C31454 - C31453) * C4747 +
             (C31456 - C31455 + C31458 - C31457) * C4743 +
             (C31953 - C31954 + C31955 - C31956) * C4748 +
             (C31957 - C31958 + C31959 - C31960) * C47471) *
                C47105 * C47261) *
               C2500 +
           (((C31274 - C31273 + C31276 - C31275) * C4747 +
             (C31278 - C31277 + C31280 - C31279) * C4743 +
             (C31281 - C31282 + C31283 - C31284) * C4748 +
             (C31285 - C31286 + C31287 - C31288) * C47471) *
                C47105 * C3262 +
            ((C31954 - C31953 + C31956 - C31955) * C4747 +
             (C31958 - C31957 + C31960 - C31959) * C4743 +
             (C32675 - C32676 + C32677 - C32678) * C4748 +
             (C32679 - C32680 + C32681 - C32682) * C47471) *
                C47105 * C47261) *
               C47219) *
              C47476 +
          ((((C31104 - C31103 + C31106 - C31105) * C4747 +
             (C31108 - C31107 + C31110 - C31109) * C4743 +
             (C31289 - C31290 + C31291 - C31292) * C4748 +
             (C31293 - C31294 + C31295 - C31296) * C47471) *
                C47105 * C3262 +
            ((C31468 - C31467 + C31470 - C31469) * C4747 +
             (C31472 - C31471 + C31474 - C31473) * C4743 +
             (C31961 - C31962 + C31963 - C31964) * C4748 +
             (C31965 - C31966 + C31967 - C31968) * C47471) *
                C47105 * C47261) *
               C2500 +
           (((C31290 - C31289 + C31292 - C31291) * C4747 +
             (C31294 - C31293 + C31296 - C31295) * C4743 +
             (C31297 - C31298 + C31299 - C31300) * C4748 +
             (C31301 - C31302 + C31303 - C31304) * C47471) *
                C47105 * C3262 +
            ((C31962 - C31961 + C31964 - C31963) * C4747 +
             (C31966 - C31965 + C31968 - C31967) * C4743 +
             (C31090 * C1305 - C31092 * C1291 + C47473 * C1311 -
              C31093 * C1294) *
                 C4748 +
             (C31090 * C1318 - C31092 * C1306 + C47473 * C1321 -
              C31093 * C1312) *
                 C47471) *
                C47105 * C47261) *
               C47219) *
              C47447)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C31090 * C122 - C31092 * C115 + C47473 * C491 - C31093 * C481) *
                C4747 +
            (C31090 * C136 - C31092 * C123 + C47473 * C511 - C31093 * C492) *
                C4743 +
            (C36849 - C36850 + C36851 - C36852) * C4748 +
            (C36853 - C36854 + C36855 - C36856) * C47471) *
               C47105 * C47500 +
           ((C31092 * C481 - C31090 * C491 + C31093 * C484 - C47473 * C497) *
                C4747 +
            (C31092 * C492 - C31090 * C511 + C31093 * C498 - C47473 * C514) *
                C4743 +
            (C37465 - C37466 + C37467 - C37468) * C4748 +
            (C37469 - C37470 + C37471 - C37472) * C47471) *
               C47105 * C47497 +
           ((C31090 * C497 - C31092 * C484 + C47473 * C2002 - C31093 * C1996) *
                C4747 +
            (C31090 * C514 - C31092 * C498 + C47473 * C2014 - C31093 * C2003) *
                C4743 +
            (C37863 - C37864 + C37865 - C37866) * C4748 +
            (C37867 - C37868 + C37869 - C37870) * C47471) *
               C47105 * C47488 +
           ((C31092 * C1996 - C31090 * C2002 + C31093 * C1999 -
             C47473 * C2008) *
                C4747 +
            (C31092 * C2003 - C31090 * C2014 + C31093 * C2009 -
             C47473 * C2017) *
                C4743 +
            (C39177 - C39178 + C39179 - C39180) * C4748 +
            (C39181 - C39182 + C39183 - C39184) * C47471) *
               C47105 * C47469) *
              C2500 +
          (((C36850 - C36849 + C36852 - C36851) * C4747 +
            (C36854 - C36853 + C36856 - C36855) * C4743 +
            (C36857 - C36858 + C36859 - C36860) * C4748 +
            (C36861 - C36862 + C36863 - C36864) * C47471) *
               C47105 * C47500 +
           ((C37466 - C37465 + C37468 - C37467) * C4747 +
            (C37470 - C37469 + C37472 - C37471) * C4743 +
            (C37871 - C37872 + C37873 - C37874) * C4748 +
            (C37875 - C37876 + C37877 - C37878) * C47471) *
               C47105 * C47497 +
           ((C37864 - C37863 + C37866 - C37865) * C4747 +
            (C37868 - C37867 + C37870 - C37869) * C4743 +
            (C37879 - C37880 + C37881 - C37882) * C4748 +
            (C37883 - C37884 + C37885 - C37886) * C47471) *
               C47105 * C47488 +
           ((C39178 - C39177 + C39180 - C39179) * C4747 +
            (C39182 - C39181 + C39184 - C39183) * C4743 +
            (C31090 * C7269 - C31092 * C7267 + C47473 * C22891 -
             C31093 * C22890) *
                C4748 +
            (C31090 * C7273 - C31092 * C7270 + C47473 * C22893 -
             C31093 * C22892) *
                C47471) *
               C47105 * C47469) *
              C47219) *
         C47128) /
            (p * q * std::sqrt(p + q));
    d2ee[183] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C31090 * C122 - C31092 * C115 + C47473 * C491 - C31093 * C481) *
                 C4747 +
             (C31090 * C136 - C31092 * C123 + C47473 * C511 - C31093 * C492) *
                 C4743 +
             (C36849 - C36850 + C36851 - C36852) * C4748 +
             (C36853 - C36854 + C36855 - C36856) * C47471) *
                C47105 * C47257 +
            ((C31092 * C481 - C31090 * C491 + C31093 * C484 - C47473 * C497) *
                 C4747 +
             (C31092 * C492 - C31090 * C511 + C31093 * C498 - C47473 * C514) *
                 C4743 +
             (C37465 - C37466 + C37467 - C37468) * C4748 +
             (C37469 - C37470 + C37471 - C37472) * C47471) *
                C47105 * C47264 +
            ((C31090 * C497 - C31092 * C484 + C47473 * C2002 - C31093 * C1996) *
                 C4747 +
             (C31090 * C514 - C31092 * C498 + C47473 * C2014 - C31093 * C2003) *
                 C4743 +
             (C37863 - C37864 + C37865 - C37866) * C4748 +
             (C37867 - C37868 + C37869 - C37870) * C47471) *
                C47105 * C3770) *
               C2500 +
           (((C36850 - C36849 + C36852 - C36851) * C4747 +
             (C36854 - C36853 + C36856 - C36855) * C4743 +
             (C36857 - C36858 + C36859 - C36860) * C4748 +
             (C36861 - C36862 + C36863 - C36864) * C47471) *
                C47105 * C47257 +
            ((C37466 - C37465 + C37468 - C37467) * C4747 +
             (C37470 - C37469 + C37472 - C37471) * C4743 +
             (C37871 - C37872 + C37873 - C37874) * C4748 +
             (C37875 - C37876 + C37877 - C37878) * C47471) *
                C47105 * C47264 +
            ((C37864 - C37863 + C37866 - C37865) * C4747 +
             (C37868 - C37867 + C37870 - C37869) * C4743 +
             (C37879 - C37880 + C37881 - C37882) * C4748 +
             (C37883 - C37884 + C37885 - C37886) * C47471) *
                C47105 * C3770) *
               C47219) *
              C47407 +
          ((((C31096 - C31095 + C31098 - C31097) * C4747 +
             (C31100 - C31099 + C31102 - C31101) * C4743 +
             (C31273 - C31274 + C31275 - C31276) * C4748 +
             (C31277 - C31278 + C31279 - C31280) * C47471) *
                C47105 * C47257 +
            ((C31452 - C31451 + C31454 - C31453) * C4747 +
             (C31456 - C31455 + C31458 - C31457) * C4743 +
             (C31953 - C31954 + C31955 - C31956) * C4748 +
             (C31957 - C31958 + C31959 - C31960) * C47471) *
                C47105 * C47264 +
            ((C31460 - C31459 + C31462 - C31461) * C4747 +
             (C31464 - C31463 + C31466 - C31465) * C4743 +
             (C33381 - C33382 + C33383 - C33384) * C4748 +
             (C33385 - C33386 + C33387 - C33388) * C47471) *
                C47105 * C3770) *
               C2500 +
           (((C31274 - C31273 + C31276 - C31275) * C4747 +
             (C31278 - C31277 + C31280 - C31279) * C4743 +
             (C31281 - C31282 + C31283 - C31284) * C4748 +
             (C31285 - C31286 + C31287 - C31288) * C47471) *
                C47105 * C47257 +
            ((C31954 - C31953 + C31956 - C31955) * C4747 +
             (C31958 - C31957 + C31960 - C31959) * C4743 +
             (C32675 - C32676 + C32677 - C32678) * C4748 +
             (C32679 - C32680 + C32681 - C32682) * C47471) *
                C47105 * C47264 +
            ((C33382 - C33381 + C33384 - C33383) * C4747 +
             (C33386 - C33385 + C33388 - C33387) * C4743 +
             (C31090 * C1309 - C31092 * C1293 + C47473 * C7271 -
              C31093 * C7268) *
                 C4748 +
             (C31090 * C1320 - C31092 * C1310 + C47473 * C7274 -
              C31093 * C7272) *
                 C47471) *
                C47105 * C3770) *
               C47219) *
              C47139)) /
        (p * q * std::sqrt(p + q));
    d2ee[184] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C31090 * C122 - C31092 * C115 + C47473 * C491 - C31093 * C481) *
                 C4747 +
             (C31090 * C136 - C31092 * C123 + C47473 * C511 - C31093 * C492) *
                 C4743 +
             (C36849 - C36850 + C36851 - C36852) * C4748 +
             (C36853 - C36854 + C36855 - C36856) * C47471) *
                C47105 * C3262 +
            ((C31092 * C481 - C31090 * C491 + C31093 * C484 - C47473 * C497) *
                 C4747 +
             (C31092 * C492 - C31090 * C511 + C31093 * C498 - C47473 * C514) *
                 C4743 +
             (C37465 - C37466 + C37467 - C37468) * C4748 +
             (C37469 - C37470 + C37471 - C37472) * C47471) *
                C47105 * C47261) *
               C2500 +
           (((C36850 - C36849 + C36852 - C36851) * C4747 +
             (C36854 - C36853 + C36856 - C36855) * C4743 +
             (C36857 - C36858 + C36859 - C36860) * C4748 +
             (C36861 - C36862 + C36863 - C36864) * C47471) *
                C47105 * C3262 +
            ((C37466 - C37465 + C37468 - C37467) * C4747 +
             (C37470 - C37469 + C37472 - C37471) * C4743 +
             (C37871 - C37872 + C37873 - C37874) * C4748 +
             (C37875 - C37876 + C37877 - C37878) * C47471) *
                C47105 * C47261) *
               C47219) *
              C47489 +
          ((((C31096 - C31095 + C31098 - C31097) * C4747 +
             (C31100 - C31099 + C31102 - C31101) * C4743 +
             (C31273 - C31274 + C31275 - C31276) * C4748 +
             (C31277 - C31278 + C31279 - C31280) * C47471) *
                C47105 * C3262 +
            ((C31452 - C31451 + C31454 - C31453) * C4747 +
             (C31456 - C31455 + C31458 - C31457) * C4743 +
             (C31953 - C31954 + C31955 - C31956) * C4748 +
             (C31957 - C31958 + C31959 - C31960) * C47471) *
                C47105 * C47261) *
               C2500 +
           (((C31274 - C31273 + C31276 - C31275) * C4747 +
             (C31278 - C31277 + C31280 - C31279) * C4743 +
             (C31281 - C31282 + C31283 - C31284) * C4748 +
             (C31285 - C31286 + C31287 - C31288) * C47471) *
                C47105 * C3262 +
            ((C31954 - C31953 + C31956 - C31955) * C4747 +
             (C31958 - C31957 + C31960 - C31959) * C4743 +
             (C32675 - C32676 + C32677 - C32678) * C4748 +
             (C32679 - C32680 + C32681 - C32682) * C47471) *
                C47105 * C47261) *
               C47219) *
              C47476 +
          ((((C31104 - C31103 + C31106 - C31105) * C4747 +
             (C31108 - C31107 + C31110 - C31109) * C4743 +
             (C31289 - C31290 + C31291 - C31292) * C4748 +
             (C31293 - C31294 + C31295 - C31296) * C47471) *
                C47105 * C3262 +
            ((C31468 - C31467 + C31470 - C31469) * C4747 +
             (C31472 - C31471 + C31474 - C31473) * C4743 +
             (C31961 - C31962 + C31963 - C31964) * C4748 +
             (C31965 - C31966 + C31967 - C31968) * C47471) *
                C47105 * C47261) *
               C2500 +
           (((C31290 - C31289 + C31292 - C31291) * C4747 +
             (C31294 - C31293 + C31296 - C31295) * C4743 +
             (C31297 - C31298 + C31299 - C31300) * C4748 +
             (C31301 - C31302 + C31303 - C31304) * C47471) *
                C47105 * C3262 +
            ((C31962 - C31961 + C31964 - C31963) * C4747 +
             (C31966 - C31965 + C31968 - C31967) * C4743 +
             (C31090 * C1305 - C31092 * C1291 + C47473 * C1311 -
              C31093 * C1294) *
                 C4748 +
             (C31090 * C1318 - C31092 * C1306 + C47473 * C1321 -
              C31093 * C1312) *
                 C47471) *
                C47105 * C47261) *
               C47219) *
              C47447)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C31090 * C122 - C31092 * C115 + C47473 * C491 - C31093 * C481) *
                C4747 +
            (C31090 * C136 - C31092 * C123 + C47473 * C511 - C31093 * C492) *
                C4743 +
            (C36849 - C36850 + C36851 - C36852) * C4748 +
            (C36853 - C36854 + C36855 - C36856) * C47471) *
               C47105 * C3262 +
           ((C31092 * C481 - C31090 * C491 + C31093 * C484 - C47473 * C497) *
                C4747 +
            (C31092 * C492 - C31090 * C511 + C31093 * C498 - C47473 * C514) *
                C4743 +
            (C37465 - C37466 + C37467 - C37468) * C4748 +
            (C37469 - C37470 + C37471 - C37472) * C47471) *
               C47105 * C47261) *
              C47499 +
          (((C36850 - C36849 + C36852 - C36851) * C4747 +
            (C36854 - C36853 + C36856 - C36855) * C4743 +
            (C36857 - C36858 + C36859 - C36860) * C4748 +
            (C36861 - C36862 + C36863 - C36864) * C47471) *
               C47105 * C3262 +
           ((C37466 - C37465 + C37468 - C37467) * C4747 +
            (C37470 - C37469 + C37472 - C37471) * C4743 +
            (C37871 - C37872 + C37873 - C37874) * C4748 +
            (C37875 - C37876 + C37877 - C37878) * C47471) *
               C47105 * C47261) *
              C47495 +
          (((C36858 - C36857 + C36860 - C36859) * C4747 +
            (C36862 - C36861 + C36864 - C36863) * C4743 +
            (C37701 - C37702 + C37703 - C37704) * C4748 +
            (C37705 - C37706 + C37707 - C37708) * C47471) *
               C47105 * C3262 +
           ((C37872 - C37871 + C37874 - C37873) * C4747 +
            (C37876 - C37875 + C37878 - C37877) * C4743 +
            (C38341 - C38342 + C38343 - C38344) * C4748 +
            (C38345 - C38346 + C38347 - C38348) * C47471) *
               C47105 * C47261) *
              C47485 +
          (((C37702 - C37701 + C37704 - C37703) * C4747 +
            (C37706 - C37705 + C37708 - C37707) * C4743 +
            (C37709 - C37710 + C37711 - C37712) * C4748 +
            (C37713 - C37714 + C37715 - C37716) * C47471) *
               C47105 * C3262 +
           ((C38342 - C38341 + C38344 - C38343) * C4747 +
            (C38346 - C38345 + C38348 - C38347) * C4743 +
            (C31090 * C6413 - C31092 * C6411 + C47473 * C22245 -
             C31093 * C22244) *
                C4748 +
            (C31090 * C6417 - C31092 * C6414 + C47473 * C22247 -
             C31093 * C22246) *
                C47471) *
               C47105 * C47261) *
              C47463) *
         C47128) /
            (p * q * std::sqrt(p + q));
    d2ee[185] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C31090 * C122 - C31092 * C115 + C47473 * C491 - C31093 * C481) *
                C4747 +
            (C31090 * C136 - C31092 * C123 + C47473 * C511 - C31093 * C492) *
                C4743 +
            (C36849 - C36850 + C36851 - C36852) * C4748 +
            (C36853 - C36854 + C36855 - C36856) * C47471) *
               C47105 * C47174 * C1420 +
           ((C36850 - C36849 + C36852 - C36851) * C4747 +
            (C36854 - C36853 + C36856 - C36855) * C4743 +
            (C36857 - C36858 + C36859 - C36860) * C4748 +
            (C36861 - C36862 + C36863 - C36864) * C47471) *
               C47105 * C47174 * C1421 +
           ((C36858 - C36857 + C36860 - C36859) * C4747 +
            (C36862 - C36861 + C36864 - C36863) * C4743 +
            (C37701 - C37702 + C37703 - C37704) * C4748 +
            (C37705 - C37706 + C37707 - C37708) * C47471) *
               C47105 * C47174 * C1422 +
           ((C37702 - C37701 + C37704 - C37703) * C4747 +
            (C37706 - C37705 + C37708 - C37707) * C4743 +
            (C37709 - C37710 + C37711 - C37712) * C4748 +
            (C37713 - C37714 + C37715 - C37716) * C47471) *
               C47105 * C47174 * C47463) *
              C47407 +
          (((C31096 - C31095 + C31098 - C31097) * C4747 +
            (C31100 - C31099 + C31102 - C31101) * C4743 +
            (C31273 - C31274 + C31275 - C31276) * C4748 +
            (C31277 - C31278 + C31279 - C31280) * C47471) *
               C47105 * C47174 * C1420 +
           ((C31274 - C31273 + C31276 - C31275) * C4747 +
            (C31278 - C31277 + C31280 - C31279) * C4743 +
            (C31281 - C31282 + C31283 - C31284) * C4748 +
            (C31285 - C31286 + C31287 - C31288) * C47471) *
               C47105 * C47174 * C1421 +
           ((C31282 - C31281 + C31284 - C31283) * C4747 +
            (C31286 - C31285 + C31288 - C31287) * C4743 +
            (C32473 - C32474 + C32475 - C32476) * C4748 +
            (C32477 - C32478 + C32479 - C32480) * C47471) *
               C47105 * C47174 * C1422 +
           ((C32474 - C32473 + C32476 - C32475) * C4747 +
            (C32478 - C32477 + C32480 - C32479) * C4743 +
            (C31090 * C1166 - C31092 * C1156 + C47473 * C6415 -
             C31093 * C6412) *
                C4748 +
            (C31090 * C1174 - C31092 * C1167 + C47473 * C6418 -
             C31093 * C6416) *
                C47471) *
               C47105 * C47174 * C47463) *
              C47139)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C31090 * C122 - C31092 * C115 + C47473 * C491 - C31093 * C481) *
                C4747 +
            (C31090 * C136 - C31092 * C123 + C47473 * C511 - C31093 * C492) *
                C4743 +
            (C36849 - C36850 + C36851 - C36852) * C4748 +
            (C36853 - C36854 + C36855 - C36856) * C47471) *
               C47105 * C47174 * C47421 +
           ((C36850 - C36849 + C36852 - C36851) * C4747 +
            (C36854 - C36853 + C36856 - C36855) * C4743 +
            (C36857 - C36858 + C36859 - C36860) * C4748 +
            (C36861 - C36862 + C36863 - C36864) * C47471) *
               C47105 * C47174 * C47219) *
              C655 +
          (((C31096 - C31095 + C31098 - C31097) * C4747 +
            (C31100 - C31099 + C31102 - C31101) * C4743 +
            (C31273 - C31274 + C31275 - C31276) * C4748 +
            (C31277 - C31278 + C31279 - C31280) * C47471) *
               C47105 * C47174 * C47421 +
           ((C31274 - C31273 + C31276 - C31275) * C4747 +
            (C31278 - C31277 + C31280 - C31279) * C4743 +
            (C31281 - C31282 + C31283 - C31284) * C4748 +
            (C31285 - C31286 + C31287 - C31288) * C47471) *
               C47105 * C47174 * C47219) *
              C656 +
          (((C31104 - C31103 + C31106 - C31105) * C4747 +
            (C31108 - C31107 + C31110 - C31109) * C4743 +
            (C31289 - C31290 + C31291 - C31292) * C4748 +
            (C31293 - C31294 + C31295 - C31296) * C47471) *
               C47105 * C47174 * C47421 +
           ((C31290 - C31289 + C31292 - C31291) * C4747 +
            (C31294 - C31293 + C31296 - C31295) * C4743 +
            (C31297 - C31298 + C31299 - C31300) * C4748 +
            (C31301 - C31302 + C31303 - C31304) * C47471) *
               C47105 * C47174 * C47219) *
              C657 +
          (((C31112 - C31111 + C31114 - C31113) * C4747 +
            (C31116 - C31115 + C31118 - C31117) * C4743 +
            (C31613 - C31614 + C31615 - C31616) * C4748 +
            (C31617 - C31618 + C31619 - C31620) * C47471) *
               C47105 * C47174 * C47421 +
           ((C31614 - C31613 + C31616 - C31615) * C4747 +
            (C31618 - C31617 + C31620 - C31619) * C4743 +
            (C31090 * C318 - C31092 * C301 + C47473 * C1585 - C31093 * C1584) *
                C4748 +
            (C31090 * C331 - C31092 * C319 + C47473 * C1587 - C31093 * C1586) *
                C47471) *
               C47105 * C47174 * C47219) *
              C47457)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C31090 * C122 - C31092 * C115 + C47473 * C491 - C31093 * C481) *
                 C4747 +
             (C31090 * C136 - C31092 * C123 + C47473 * C511 - C31093 * C492) *
                 C4743 +
             (C36849 - C36850 + C36851 - C36852) * C4748 +
             (C36853 - C36854 + C36855 - C36856) * C47471) *
                C47105 * C1816 +
            ((C31092 * C481 - C31090 * C491 + C31093 * C484 - C47473 * C497) *
                 C4747 +
             (C31092 * C492 - C31090 * C511 + C31093 * C498 - C47473 * C514) *
                 C4743 +
             (C37465 - C37466 + C37467 - C37468) * C4748 +
             (C37469 - C37470 + C37471 - C37472) * C47471) *
                C47105 * C1817 +
            ((C31090 * C497 - C31092 * C484 + C47473 * C2002 - C31093 * C1996) *
                 C4747 +
             (C31090 * C514 - C31092 * C498 + C47473 * C2014 - C31093 * C2003) *
                 C4743 +
             (C37863 - C37864 + C37865 - C37866) * C4748 +
             (C37867 - C37868 + C37869 - C37870) * C47471) *
                C47105 * C47456) *
               C47421 +
           (((C36850 - C36849 + C36852 - C36851) * C4747 +
             (C36854 - C36853 + C36856 - C36855) * C4743 +
             (C36857 - C36858 + C36859 - C36860) * C4748 +
             (C36861 - C36862 + C36863 - C36864) * C47471) *
                C47105 * C1816 +
            ((C37466 - C37465 + C37468 - C37467) * C4747 +
             (C37470 - C37469 + C37472 - C37471) * C4743 +
             (C37871 - C37872 + C37873 - C37874) * C4748 +
             (C37875 - C37876 + C37877 - C37878) * C47471) *
                C47105 * C1817 +
            ((C37864 - C37863 + C37866 - C37865) * C4747 +
             (C37868 - C37867 + C37870 - C37869) * C4743 +
             (C37879 - C37880 + C37881 - C37882) * C4748 +
             (C37883 - C37884 + C37885 - C37886) * C47471) *
                C47105 * C47456) *
               C47219) *
              C47407 +
          ((((C31096 - C31095 + C31098 - C31097) * C4747 +
             (C31100 - C31099 + C31102 - C31101) * C4743 +
             (C31273 - C31274 + C31275 - C31276) * C4748 +
             (C31277 - C31278 + C31279 - C31280) * C47471) *
                C47105 * C1816 +
            ((C31452 - C31451 + C31454 - C31453) * C4747 +
             (C31456 - C31455 + C31458 - C31457) * C4743 +
             (C31953 - C31954 + C31955 - C31956) * C4748 +
             (C31957 - C31958 + C31959 - C31960) * C47471) *
                C47105 * C1817 +
            ((C31460 - C31459 + C31462 - C31461) * C4747 +
             (C31464 - C31463 + C31466 - C31465) * C4743 +
             (C33381 - C33382 + C33383 - C33384) * C4748 +
             (C33385 - C33386 + C33387 - C33388) * C47471) *
                C47105 * C47456) *
               C47421 +
           (((C31274 - C31273 + C31276 - C31275) * C4747 +
             (C31278 - C31277 + C31280 - C31279) * C4743 +
             (C31281 - C31282 + C31283 - C31284) * C4748 +
             (C31285 - C31286 + C31287 - C31288) * C47471) *
                C47105 * C1816 +
            ((C31954 - C31953 + C31956 - C31955) * C4747 +
             (C31958 - C31957 + C31960 - C31959) * C4743 +
             (C32675 - C32676 + C32677 - C32678) * C4748 +
             (C32679 - C32680 + C32681 - C32682) * C47471) *
                C47105 * C1817 +
            ((C33382 - C33381 + C33384 - C33383) * C4747 +
             (C33386 - C33385 + C33388 - C33387) * C4743 +
             (C31090 * C1309 - C31092 * C1293 + C47473 * C7271 -
              C31093 * C7268) *
                 C4748 +
             (C31090 * C1320 - C31092 * C1310 + C47473 * C7274 -
              C31093 * C7272) *
                 C47471) *
                C47105 * C47456) *
               C47219) *
              C47139)) /
            (p * q * std::sqrt(p + q));
    d2ee[186] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C31090 * C122 - C31092 * C115 + C47473 * C491 - C31093 * C481) *
                C4747 +
            (C31090 * C136 - C31092 * C123 + C47473 * C511 - C31093 * C492) *
                C4743 +
            (C36849 - C36850 + C36851 - C36852) * C4748 +
            (C36853 - C36854 + C36855 - C36856) * C47471) *
               C47105 * C47422 +
           ((C31092 * C481 - C31090 * C491 + C31093 * C484 - C47473 * C497) *
                C4747 +
            (C31092 * C492 - C31090 * C511 + C31093 * C498 - C47473 * C514) *
                C4743 +
            (C37465 - C37466 + C37467 - C37468) * C4748 +
            (C37469 - C37470 + C37471 - C37472) * C47471) *
               C47105 * C47261) *
              C1420 +
          (((C36850 - C36849 + C36852 - C36851) * C4747 +
            (C36854 - C36853 + C36856 - C36855) * C4743 +
            (C36857 - C36858 + C36859 - C36860) * C4748 +
            (C36861 - C36862 + C36863 - C36864) * C47471) *
               C47105 * C47422 +
           ((C37466 - C37465 + C37468 - C37467) * C4747 +
            (C37470 - C37469 + C37472 - C37471) * C4743 +
            (C37871 - C37872 + C37873 - C37874) * C4748 +
            (C37875 - C37876 + C37877 - C37878) * C47471) *
               C47105 * C47261) *
              C1421 +
          (((C36858 - C36857 + C36860 - C36859) * C4747 +
            (C36862 - C36861 + C36864 - C36863) * C4743 +
            (C37701 - C37702 + C37703 - C37704) * C4748 +
            (C37705 - C37706 + C37707 - C37708) * C47471) *
               C47105 * C47422 +
           ((C37872 - C37871 + C37874 - C37873) * C4747 +
            (C37876 - C37875 + C37878 - C37877) * C4743 +
            (C38341 - C38342 + C38343 - C38344) * C4748 +
            (C38345 - C38346 + C38347 - C38348) * C47471) *
               C47105 * C47261) *
              C1422 +
          (((C37702 - C37701 + C37704 - C37703) * C4747 +
            (C37706 - C37705 + C37708 - C37707) * C4743 +
            (C37709 - C37710 + C37711 - C37712) * C4748 +
            (C37713 - C37714 + C37715 - C37716) * C47471) *
               C47105 * C47422 +
           ((C38342 - C38341 + C38344 - C38343) * C4747 +
            (C38346 - C38345 + C38348 - C38347) * C4743 +
            (C31090 * C6413 - C31092 * C6411 + C47473 * C22245 -
             C31093 * C22244) *
                C4748 +
            (C31090 * C6417 - C31092 * C6414 + C47473 * C22247 -
             C31093 * C22246) *
                C47471) *
               C47105 * C47261) *
              C47463) *
         C47128) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C31090 * C122 - C31092 * C115 + C47473 * C491 - C31093 * C481) *
                 C4747 +
             (C31090 * C136 - C31092 * C123 + C47473 * C511 - C31093 * C492) *
                 C4743 +
             (C36849 - C36850 + C36851 - C36852) * C4748 +
             (C36853 - C36854 + C36855 - C36856) * C47471) *
                C47105 * C47422 +
            ((C31092 * C481 - C31090 * C491 + C31093 * C484 - C47473 * C497) *
                 C4747 +
             (C31092 * C492 - C31090 * C511 + C31093 * C498 - C47473 * C514) *
                 C4743 +
             (C37465 - C37466 + C37467 - C37468) * C4748 +
             (C37469 - C37470 + C37471 - C37472) * C47471) *
                C47105 * C47261) *
               C47421 +
           (((C36850 - C36849 + C36852 - C36851) * C4747 +
             (C36854 - C36853 + C36856 - C36855) * C4743 +
             (C36857 - C36858 + C36859 - C36860) * C4748 +
             (C36861 - C36862 + C36863 - C36864) * C47471) *
                C47105 * C47422 +
            ((C37466 - C37465 + C37468 - C37467) * C4747 +
             (C37470 - C37469 + C37472 - C37471) * C4743 +
             (C31090 * C1301 - C31092 * C1289 + C47473 * C1307 -
              C31093 * C1292) *
                 C4748 +
             (C31090 * C1316 - C31092 * C1302 + C47473 * C1319 -
              C31093 * C1308) *
                 C47471) *
                C47105 * C47261) *
               C47219) *
              C291 +
          ((((C31096 - C31095 + C31098 - C31097) * C4747 +
             (C31100 - C31099 + C31102 - C31101) * C4743 +
             (C31273 - C31274 + C31275 - C31276) * C4748 +
             (C31277 - C31278 + C31279 - C31280) * C47471) *
                C47105 * C47422 +
            ((C31452 - C31451 + C31454 - C31453) * C4747 +
             (C31456 - C31455 + C31458 - C31457) * C4743 +
             (C31953 - C31954 + C31955 - C31956) * C4748 +
             (C31957 - C31958 + C31959 - C31960) * C47471) *
                C47105 * C47261) *
               C47421 +
           (((C31274 - C31273 + C31276 - C31275) * C4747 +
             (C31278 - C31277 + C31280 - C31279) * C4743 +
             (C31281 - C31282 + C31283 - C31284) * C4748 +
             (C31285 - C31286 + C31287 - C31288) * C47471) *
                C47105 * C47422 +
            ((C31954 - C31953 + C31956 - C31955) * C4747 +
             (C31958 - C31957 + C31960 - C31959) * C4743 +
             (C32675 - C32676 + C32677 - C32678) * C4748 +
             (C32679 - C32680 + C32681 - C32682) * C47471) *
                C47105 * C47261) *
               C47219) *
              C292 +
          ((((C31104 - C31103 + C31106 - C31105) * C4747 +
             (C31108 - C31107 + C31110 - C31109) * C4743 +
             (C31289 - C31290 + C31291 - C31292) * C4748 +
             (C31293 - C31294 + C31295 - C31296) * C47471) *
                C47105 * C47422 +
            ((C31468 - C31467 + C31470 - C31469) * C4747 +
             (C31472 - C31471 + C31474 - C31473) * C4743 +
             (C31961 - C31962 + C31963 - C31964) * C4748 +
             (C31965 - C31966 + C31967 - C31968) * C47471) *
                C47105 * C47261) *
               C47421 +
           (((C31290 - C31289 + C31292 - C31291) * C4747 +
             (C31294 - C31293 + C31296 - C31295) * C4743 +
             (C31297 - C31298 + C31299 - C31300) * C4748 +
             (C31301 - C31302 + C31303 - C31304) * C47471) *
                C47105 * C47422 +
            ((C31962 - C31961 + C31964 - C31963) * C4747 +
             (C31966 - C31965 + C31968 - C31967) * C4743 +
             (C31090 * C1305 - C31092 * C1291 + C47473 * C1311 -
              C31093 * C1294) *
                 C4748 +
             (C31090 * C1318 - C31092 * C1306 + C47473 * C1321 -
              C31093 * C1312) *
                 C47471) *
                C47105 * C47261) *
               C47219) *
              C47447)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C31090 * C122 - C31092 * C115 + C47473 * C491 - C31093 * C481) *
                C4747 +
            (C31090 * C136 - C31092 * C123 + C47473 * C511 - C31093 * C492) *
                C4743 +
            (C36849 - C36850 + C36851 - C36852) * C4748 +
            (C36853 - C36854 + C36855 - C36856) * C47471) *
               C47105 * C2276 +
           ((C31092 * C481 - C31090 * C491 + C31093 * C484 - C47473 * C497) *
                C4747 +
            (C31092 * C492 - C31090 * C511 + C31093 * C498 - C47473 * C514) *
                C4743 +
            (C37465 - C37466 + C37467 - C37468) * C4748 +
            (C37469 - C37470 + C37471 - C37472) * C47471) *
               C47105 * C2277 +
           ((C31090 * C497 - C31092 * C484 + C47473 * C2002 - C31093 * C1996) *
                C4747 +
            (C31090 * C514 - C31092 * C498 + C47473 * C2014 - C31093 * C2003) *
                C4743 +
            (C37863 - C37864 + C37865 - C37866) * C4748 +
            (C37867 - C37868 + C37869 - C37870) * C47471) *
               C47105 * C2278 +
           ((C31092 * C1996 - C31090 * C2002 + C31093 * C1999 -
             C47473 * C2008) *
                C4747 +
            (C31092 * C2003 - C31090 * C2014 + C31093 * C2009 -
             C47473 * C2017) *
                C4743 +
            (C39177 - C39178 + C39179 - C39180) * C4748 +
            (C39181 - C39182 + C39183 - C39184) * C47471) *
               C47105 * C47469) *
              C47421 +
          (((C36850 - C36849 + C36852 - C36851) * C4747 +
            (C36854 - C36853 + C36856 - C36855) * C4743 +
            (C36857 - C36858 + C36859 - C36860) * C4748 +
            (C36861 - C36862 + C36863 - C36864) * C47471) *
               C47105 * C2276 +
           ((C37466 - C37465 + C37468 - C37467) * C4747 +
            (C37470 - C37469 + C37472 - C37471) * C4743 +
            (C37871 - C37872 + C37873 - C37874) * C4748 +
            (C37875 - C37876 + C37877 - C37878) * C47471) *
               C47105 * C2277 +
           ((C37864 - C37863 + C37866 - C37865) * C4747 +
            (C37868 - C37867 + C37870 - C37869) * C4743 +
            (C37879 - C37880 + C37881 - C37882) * C4748 +
            (C37883 - C37884 + C37885 - C37886) * C47471) *
               C47105 * C2278 +
           ((C39178 - C39177 + C39180 - C39179) * C4747 +
            (C39182 - C39181 + C39184 - C39183) * C4743 +
            (C31090 * C7269 - C31092 * C7267 + C47473 * C22891 -
             C31093 * C22890) *
                C4748 +
            (C31090 * C7273 - C31092 * C7270 + C47473 * C22893 -
             C31093 * C22892) *
                C47471) *
               C47105 * C47469) *
              C47219) *
         C47128) /
            (p * q * std::sqrt(p + q));
    d2ee[187] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((C31090 * C122 - C31092 * C115 + C47473 * C491 - C31093 * C481) *
                   C4747 +
               (C31090 * C136 - C31092 * C123 + C47473 * C511 - C31093 * C492) *
                   C4743 +
               (C31090 * C304 - C31092 * C294 + C47473 * C936 - C31093 * C931) *
                   C4748 +
               (C31090 * C324 - C31092 * C305 + C47473 * C946 - C31093 * C937) *
                   C47471) *
                  C47105 * C47174 * C47156 * C108 +
              ((C31096 - C31095 + C31098 - C31097) * C4747 +
               (C31100 - C31099 + C31102 - C31101) * C4743 +
               (C31273 - C31274 + C31275 - C31276) * C4748 +
               (C31277 - C31278 + C31279 - C31280) * C47471) *
                  C47105 * C47174 * C47156 * C109 +
              ((C31104 - C31103 + C31106 - C31105) * C4747 +
               (C31108 - C31107 + C31110 - C31109) * C4743 +
               (C31289 - C31290 + C31291 - C31292) * C4748 +
               (C31293 - C31294 + C31295 - C31296) * C47471) *
                  C47105 * C47174 * C47156 * C110 +
              ((C31112 - C31111 + C31114 - C31113) * C4747 +
               (C31116 - C31115 + C31118 - C31117) * C4743 +
               (C31613 - C31614 + C31615 - C31616) * C4748 +
               (C31617 - C31618 + C31619 - C31620) * C47471) *
                  C47105 * C47174 * C47156 * C111 +
              ((C31120 - C31119 + C31122 - C31121) * C4747 +
               (C31124 - C31123 + C31126 - C31125) * C4743 +
               (C31090 * C320 - C31092 * C302 + C47473 * C944 - C31093 * C935) *
                   C4748 +
               (C31090 * C332 - C31092 * C321 + C47473 * C950 - C31093 * C945) *
                   C47471) *
                  C47105 * C47174 * C47156 * C112) +
         0.5 * std::pow(Pi, 2.5) *
             ((((C31090 * C122 - C31092 * C115 + C47473 * C491 -
                 C31093 * C481) *
                    C4747 +
                (C31090 * C136 - C31092 * C123 + C47473 * C511 -
                 C31093 * C492) *
                    C4743 +
                (C36849 - C36850 + C36851 - C36852) * C4748 +
                (C36853 - C36854 + C36855 - C36856) * C47471) *
                   C47105 * C47174 * C47492 +
               ((C36850 - C36849 + C36852 - C36851) * C4747 +
                (C36854 - C36853 + C36856 - C36855) * C4743 +
                (C36857 - C36858 + C36859 - C36860) * C4748 +
                (C36861 - C36862 + C36863 - C36864) * C47471) *
                   C47105 * C47174 * C47480 +
               ((C36858 - C36857 + C36860 - C36859) * C4747 +
                (C36862 - C36861 + C36864 - C36863) * C4743 +
                (C31090 * C1158 - C31092 * C1152 + C47473 * C1697 -
                 C31093 * C1694) *
                    C4748 +
                (C31090 * C1170 - C31092 * C1159 + C47473 * C1703 -
                 C31093 * C1698) *
                    C47471) *
                   C47105 * C47174 * C47453) *
                  C291 +
              (((C31096 - C31095 + C31098 - C31097) * C4747 +
                (C31100 - C31099 + C31102 - C31101) * C4743 +
                (C31273 - C31274 + C31275 - C31276) * C4748 +
                (C31277 - C31278 + C31279 - C31280) * C47471) *
                   C47105 * C47174 * C47492 +
               ((C31274 - C31273 + C31276 - C31275) * C4747 +
                (C31278 - C31277 + C31280 - C31279) * C4743 +
                (C31281 - C31282 + C31283 - C31284) * C4748 +
                (C31285 - C31286 + C31287 - C31288) * C47471) *
                   C47105 * C47174 * C47480 +
               ((C31282 - C31281 + C31284 - C31283) * C4747 +
                (C31286 - C31285 + C31288 - C31287) * C4743 +
                (C32473 - C32474 + C32475 - C32476) * C4748 +
                (C32477 - C32478 + C32479 - C32480) * C47471) *
                   C47105 * C47174 * C47453) *
                  C292 +
              (((C31104 - C31103 + C31106 - C31105) * C4747 +
                (C31108 - C31107 + C31110 - C31109) * C4743 +
                (C31289 - C31290 + C31291 - C31292) * C4748 +
                (C31293 - C31294 + C31295 - C31296) * C47471) *
                   C47105 * C47174 * C47492 +
               ((C31290 - C31289 + C31292 - C31291) * C4747 +
                (C31294 - C31293 + C31296 - C31295) * C4743 +
                (C31297 - C31298 + C31299 - C31300) * C4748 +
                (C31301 - C31302 + C31303 - C31304) * C47471) *
                   C47105 * C47174 * C47480 +
               ((C31298 - C31297 + C31300 - C31299) * C4747 +
                (C31302 - C31301 + C31304 - C31303) * C4743 +
                (C31090 * C1162 - C31092 * C1154 + C47473 * C1701 -
                 C31093 * C1696) *
                    C4748 +
                (C31090 * C1172 - C31092 * C1163 + C47473 * C1705 -
                 C31093 * C1702) *
                    C47471) *
                   C47105 * C47174 * C47453) *
                  C47447)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C31090 * C122 - C31092 * C115 + C47473 * C491 - C31093 * C481) *
                C4747 +
            (C31090 * C136 - C31092 * C123 + C47473 * C511 - C31093 * C492) *
                C4743 +
            (C36849 - C36850 + C36851 - C36852) * C4748 +
            (C36853 - C36854 + C36855 - C36856) * C47471) *
               C47105 * C47493 +
           ((C31092 * C481 - C31090 * C491 + C31093 * C484 - C47473 * C497) *
                C4747 +
            (C31092 * C492 - C31090 * C511 + C31093 * C498 - C47473 * C514) *
                C4743 +
            (C31092 * C931 - C31090 * C936 + C31093 * C1286 - C47473 * C1295) *
                C4748 +
            (C31092 * C937 - C31090 * C946 + C31093 * C1296 - C47473 * C1313) *
                C47471) *
               C47105 * C47482 +
           ((C31090 * C497 - C31092 * C484 + C47473 * C2002 - C31093 * C1996) *
                C4747 +
            (C31090 * C514 - C31092 * C498 + C47473 * C2014 - C31093 * C2003) *
                C4743 +
            (C31090 * C1295 - C31092 * C1286 + C47473 * C2393 -
             C31093 * C2390) *
                C4748 +
            (C31090 * C1313 - C31092 * C1296 + C47473 * C2399 -
             C31093 * C2394) *
                C47471) *
               C47105 * C47456) *
              C47156 * C291 +
          (((C31096 - C31095 + C31098 - C31097) * C4747 +
            (C31100 - C31099 + C31102 - C31101) * C4743 +
            (C31273 - C31274 + C31275 - C31276) * C4748 +
            (C31277 - C31278 + C31279 - C31280) * C47471) *
               C47105 * C47493 +
           ((C31452 - C31451 + C31454 - C31453) * C4747 +
            (C31456 - C31455 + C31458 - C31457) * C4743 +
            (C31953 - C31954 + C31955 - C31956) * C4748 +
            (C31957 - C31958 + C31959 - C31960) * C47471) *
               C47105 * C47482 +
           ((C31460 - C31459 + C31462 - C31461) * C4747 +
            (C31464 - C31463 + C31466 - C31465) * C4743 +
            (C33381 - C33382 + C33383 - C33384) * C4748 +
            (C33385 - C33386 + C33387 - C33388) * C47471) *
               C47105 * C47456) *
              C47156 * C292 +
          (((C31104 - C31103 + C31106 - C31105) * C4747 +
            (C31108 - C31107 + C31110 - C31109) * C4743 +
            (C31289 - C31290 + C31291 - C31292) * C4748 +
            (C31293 - C31294 + C31295 - C31296) * C47471) *
               C47105 * C47493 +
           ((C31468 - C31467 + C31470 - C31469) * C4747 +
            (C31472 - C31471 + C31474 - C31473) * C4743 +
            (C31961 - C31962 + C31963 - C31964) * C4748 +
            (C31965 - C31966 + C31967 - C31968) * C47471) *
               C47105 * C47482 +
           ((C31476 - C31475 + C31478 - C31477) * C4747 +
            (C31480 - C31479 + C31482 - C31481) * C4743 +
            (C31090 * C1299 - C31092 * C1288 + C47473 * C2397 -
             C31093 * C2392) *
                C4748 +
            (C31090 * C1315 - C31092 * C1300 + C47473 * C2401 -
             C31093 * C2398) *
                C47471) *
               C47105 * C47456) *
              C47156 * C47447)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C31090 * C122 - C31092 * C115 + C47473 * C491 - C31093 * C481) *
                C4747 +
            (C31090 * C136 - C31092 * C123 + C47473 * C511 - C31093 * C492) *
                C4743 +
            (C36849 - C36850 + C36851 - C36852) * C4748 +
            (C36853 - C36854 + C36855 - C36856) * C47471) *
               C47105 * C47174 * C1078 +
           ((C36850 - C36849 + C36852 - C36851) * C4747 +
            (C36854 - C36853 + C36856 - C36855) * C4743 +
            (C36857 - C36858 + C36859 - C36860) * C4748 +
            (C36861 - C36862 + C36863 - C36864) * C47471) *
               C47105 * C47174 * C1079 +
           ((C36858 - C36857 + C36860 - C36859) * C4747 +
            (C36862 - C36861 + C36864 - C36863) * C4743 +
            (C31090 * C1158 - C31092 * C1152 + C47473 * C1697 -
             C31093 * C1694) *
                C4748 +
            (C31090 * C1170 - C31092 * C1159 + C47473 * C1703 -
             C31093 * C1698) *
                C47471) *
               C47105 * C47174 * C47453) *
              C47489 +
          (((C31096 - C31095 + C31098 - C31097) * C4747 +
            (C31100 - C31099 + C31102 - C31101) * C4743 +
            (C31273 - C31274 + C31275 - C31276) * C4748 +
            (C31277 - C31278 + C31279 - C31280) * C47471) *
               C47105 * C47174 * C1078 +
           ((C31274 - C31273 + C31276 - C31275) * C4747 +
            (C31278 - C31277 + C31280 - C31279) * C4743 +
            (C31281 - C31282 + C31283 - C31284) * C4748 +
            (C31285 - C31286 + C31287 - C31288) * C47471) *
               C47105 * C47174 * C1079 +
           ((C31282 - C31281 + C31284 - C31283) * C4747 +
            (C31286 - C31285 + C31288 - C31287) * C4743 +
            (C32473 - C32474 + C32475 - C32476) * C4748 +
            (C32477 - C32478 + C32479 - C32480) * C47471) *
               C47105 * C47174 * C47453) *
              C47476 +
          (((C31104 - C31103 + C31106 - C31105) * C4747 +
            (C31108 - C31107 + C31110 - C31109) * C4743 +
            (C31289 - C31290 + C31291 - C31292) * C4748 +
            (C31293 - C31294 + C31295 - C31296) * C47471) *
               C47105 * C47174 * C1078 +
           ((C31290 - C31289 + C31292 - C31291) * C4747 +
            (C31294 - C31293 + C31296 - C31295) * C4743 +
            (C31297 - C31298 + C31299 - C31300) * C4748 +
            (C31301 - C31302 + C31303 - C31304) * C47471) *
               C47105 * C47174 * C1079 +
           ((C31298 - C31297 + C31300 - C31299) * C4747 +
            (C31302 - C31301 + C31304 - C31303) * C4743 +
            (C31090 * C1162 - C31092 * C1154 + C47473 * C1701 -
             C31093 * C1696) *
                C4748 +
            (C31090 * C1172 - C31092 * C1163 + C47473 * C1705 -
             C31093 * C1702) *
                C47471) *
               C47105 * C47174 * C47453) *
              C47447)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C31090 * C122 - C31092 * C115 + C47473 * C491 - C31093 * C481) *
               C4747 +
           (C31090 * C136 - C31092 * C123 + C47473 * C511 - C31093 * C492) *
               C4743 +
           (C36849 - C36850 + C36851 - C36852) * C4748 +
           (C36853 - C36854 + C36855 - C36856) * C47471) *
              C47105 * C47174 * C1146 +
          ((C36850 - C36849 + C36852 - C36851) * C4747 +
           (C36854 - C36853 + C36856 - C36855) * C4743 +
           (C36857 - C36858 + C36859 - C36860) * C4748 +
           (C36861 - C36862 + C36863 - C36864) * C47471) *
              C47105 * C47174 * C1147 +
          ((C36858 - C36857 + C36860 - C36859) * C4747 +
           (C36862 - C36861 + C36864 - C36863) * C4743 +
           (C37701 - C37702 + C37703 - C37704) * C4748 +
           (C37705 - C37706 + C37707 - C37708) * C47471) *
              C47105 * C47174 * C1148 +
          ((C37702 - C37701 + C37704 - C37703) * C4747 +
           (C37706 - C37705 + C37708 - C37707) * C4743 +
           (C37709 - C37710 + C37711 - C37712) * C4748 +
           (C37713 - C37714 + C37715 - C37716) * C47471) *
              C47105 * C47174 * C1149 +
          ((C37710 - C37709 + C37712 - C37711) * C4747 +
           (C37714 - C37713 + C37716 - C37715) * C4743 +
           (C31090 * C5757 - C31092 * C5755 + C47473 * C22599 -
            C31093 * C22598) *
               C4748 +
           (C31090 * C5761 - C31092 * C5758 + C47473 * C22601 -
            C31093 * C22600) *
               C47471) *
              C47105 * C47174 * C1150) *
         C47128) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C31090 * C122 - C31092 * C115 + C47473 * C491 - C31093 * C481) *
                C4747 +
            (C31090 * C136 - C31092 * C123 + C47473 * C511 - C31093 * C492) *
                C4743 +
            (C36849 - C36850 + C36851 - C36852) * C4748 +
            (C36853 - C36854 + C36855 - C36856) * C47471) *
               C47105 * C47493 +
           ((C31092 * C481 - C31090 * C491 + C31093 * C484 - C47473 * C497) *
                C4747 +
            (C31092 * C492 - C31090 * C511 + C31093 * C498 - C47473 * C514) *
                C4743 +
            (C37465 - C37466 + C37467 - C37468) * C4748 +
            (C37469 - C37470 + C37471 - C37472) * C47471) *
               C47105 * C47482 +
           ((C31090 * C497 - C31092 * C484 + C47473 * C2002 - C31093 * C1996) *
                C4747 +
            (C31090 * C514 - C31092 * C498 + C47473 * C2014 - C31093 * C2003) *
                C4743 +
            (C37863 - C37864 + C37865 - C37866) * C4748 +
            (C37867 - C37868 + C37869 - C37870) * C47471) *
               C47105 * C47456) *
              C1078 +
          (((C36850 - C36849 + C36852 - C36851) * C4747 +
            (C36854 - C36853 + C36856 - C36855) * C4743 +
            (C36857 - C36858 + C36859 - C36860) * C4748 +
            (C36861 - C36862 + C36863 - C36864) * C47471) *
               C47105 * C47493 +
           ((C37466 - C37465 + C37468 - C37467) * C4747 +
            (C37470 - C37469 + C37472 - C37471) * C4743 +
            (C37871 - C37872 + C37873 - C37874) * C4748 +
            (C37875 - C37876 + C37877 - C37878) * C47471) *
               C47105 * C47482 +
           ((C37864 - C37863 + C37866 - C37865) * C4747 +
            (C37868 - C37867 + C37870 - C37869) * C4743 +
            (C37879 - C37880 + C37881 - C37882) * C4748 +
            (C37883 - C37884 + C37885 - C37886) * C47471) *
               C47105 * C47456) *
              C1079 +
          (((C36858 - C36857 + C36860 - C36859) * C4747 +
            (C36862 - C36861 + C36864 - C36863) * C4743 +
            (C37701 - C37702 + C37703 - C37704) * C4748 +
            (C37705 - C37706 + C37707 - C37708) * C47471) *
               C47105 * C47493 +
           ((C37872 - C37871 + C37874 - C37873) * C4747 +
            (C37876 - C37875 + C37878 - C37877) * C4743 +
            (C31092 * C1694 - C31090 * C1697 + C31093 * C5921 -
             C47473 * C5923) *
                C4748 +
            (C31092 * C1698 - C31090 * C1703 + C31093 * C5924 -
             C47473 * C5927) *
                C47471) *
               C47105 * C47482 +
           ((C37880 - C37879 + C37882 - C37881) * C4747 +
            (C37884 - C37883 + C37886 - C37885) * C4743 +
            (C31090 * C5923 - C31092 * C5921 + C47473 * C23237 -
             C31093 * C23236) *
                C4748 +
            (C31090 * C5927 - C31092 * C5924 + C47473 * C23239 -
             C31093 * C23238) *
                C47471) *
               C47105 * C47456) *
              C47453) *
         C47128) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C31090 * C122 - C31092 * C115 + C47473 * C491 - C31093 * C481) *
                C4747 +
            (C31090 * C136 - C31092 * C123 + C47473 * C511 - C31093 * C492) *
                C4743 +
            (C36849 - C36850 + C36851 - C36852) * C4748 +
            (C36853 - C36854 + C36855 - C36856) * C47471) *
               C47105 * C1816 +
           ((C31092 * C481 - C31090 * C491 + C31093 * C484 - C47473 * C497) *
                C4747 +
            (C31092 * C492 - C31090 * C511 + C31093 * C498 - C47473 * C514) *
                C4743 +
            (C37465 - C37466 + C37467 - C37468) * C4748 +
            (C37469 - C37470 + C37471 - C37472) * C47471) *
               C47105 * C1817 +
           ((C31090 * C497 - C31092 * C484 + C47473 * C2002 - C31093 * C1996) *
                C4747 +
            (C31090 * C514 - C31092 * C498 + C47473 * C2014 - C31093 * C2003) *
                C4743 +
            (C37863 - C37864 + C37865 - C37866) * C4748 +
            (C37867 - C37868 + C37869 - C37870) * C47471) *
               C47105 * C47456) *
              C47156 * C47489 +
          (((C31096 - C31095 + C31098 - C31097) * C4747 +
            (C31100 - C31099 + C31102 - C31101) * C4743 +
            (C31273 - C31274 + C31275 - C31276) * C4748 +
            (C31277 - C31278 + C31279 - C31280) * C47471) *
               C47105 * C1816 +
           ((C31452 - C31451 + C31454 - C31453) * C4747 +
            (C31456 - C31455 + C31458 - C31457) * C4743 +
            (C31953 - C31954 + C31955 - C31956) * C4748 +
            (C31957 - C31958 + C31959 - C31960) * C47471) *
               C47105 * C1817 +
           ((C31460 - C31459 + C31462 - C31461) * C4747 +
            (C31464 - C31463 + C31466 - C31465) * C4743 +
            (C33381 - C33382 + C33383 - C33384) * C4748 +
            (C33385 - C33386 + C33387 - C33388) * C47471) *
               C47105 * C47456) *
              C47156 * C47476 +
          (((C31104 - C31103 + C31106 - C31105) * C4747 +
            (C31108 - C31107 + C31110 - C31109) * C4743 +
            (C31289 - C31290 + C31291 - C31292) * C4748 +
            (C31293 - C31294 + C31295 - C31296) * C47471) *
               C47105 * C1816 +
           ((C31468 - C31467 + C31470 - C31469) * C4747 +
            (C31472 - C31471 + C31474 - C31473) * C4743 +
            (C31961 - C31962 + C31963 - C31964) * C4748 +
            (C31965 - C31966 + C31967 - C31968) * C47471) *
               C47105 * C1817 +
           ((C31476 - C31475 + C31478 - C31477) * C4747 +
            (C31480 - C31479 + C31482 - C31481) * C4743 +
            (C31090 * C1299 - C31092 * C1288 + C47473 * C2397 -
             C31093 * C2392) *
                C4748 +
            (C31090 * C1315 - C31092 * C1300 + C47473 * C2401 -
             C31093 * C2398) *
                C47471) *
               C47105 * C47456) *
              C47156 * C47447)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C31090 * C122 - C31092 * C115 + C47473 * C491 - C31093 * C481) *
                C4747 +
            (C31090 * C136 - C31092 * C123 + C47473 * C511 - C31093 * C492) *
                C4743 +
            (C36849 - C36850 + C36851 - C36852) * C4748 +
            (C36853 - C36854 + C36855 - C36856) * C47471) *
               C47105 * C1816 +
           ((C31092 * C481 - C31090 * C491 + C31093 * C484 - C47473 * C497) *
                C4747 +
            (C31092 * C492 - C31090 * C511 + C31093 * C498 - C47473 * C514) *
                C4743 +
            (C37465 - C37466 + C37467 - C37468) * C4748 +
            (C37469 - C37470 + C37471 - C37472) * C47471) *
               C47105 * C1817 +
           ((C31090 * C497 - C31092 * C484 + C47473 * C2002 - C31093 * C1996) *
                C4747 +
            (C31090 * C514 - C31092 * C498 + C47473 * C2014 - C31093 * C2003) *
                C4743 +
            (C37863 - C37864 + C37865 - C37866) * C4748 +
            (C37867 - C37868 + C37869 - C37870) * C47471) *
               C47105 * C47456) *
              C47492 +
          (((C36850 - C36849 + C36852 - C36851) * C4747 +
            (C36854 - C36853 + C36856 - C36855) * C4743 +
            (C36857 - C36858 + C36859 - C36860) * C4748 +
            (C36861 - C36862 + C36863 - C36864) * C47471) *
               C47105 * C1816 +
           ((C37466 - C37465 + C37468 - C37467) * C4747 +
            (C37470 - C37469 + C37472 - C37471) * C4743 +
            (C37871 - C37872 + C37873 - C37874) * C4748 +
            (C37875 - C37876 + C37877 - C37878) * C47471) *
               C47105 * C1817 +
           ((C37864 - C37863 + C37866 - C37865) * C4747 +
            (C37868 - C37867 + C37870 - C37869) * C4743 +
            (C37879 - C37880 + C37881 - C37882) * C4748 +
            (C37883 - C37884 + C37885 - C37886) * C47471) *
               C47105 * C47456) *
              C47480 +
          (((C36858 - C36857 + C36860 - C36859) * C4747 +
            (C36862 - C36861 + C36864 - C36863) * C4743 +
            (C37701 - C37702 + C37703 - C37704) * C4748 +
            (C37705 - C37706 + C37707 - C37708) * C47471) *
               C47105 * C1816 +
           ((C37872 - C37871 + C37874 - C37873) * C4747 +
            (C37876 - C37875 + C37878 - C37877) * C4743 +
            (C38341 - C38342 + C38343 - C38344) * C4748 +
            (C38345 - C38346 + C38347 - C38348) * C47471) *
               C47105 * C1817 +
           ((C37880 - C37879 + C37882 - C37881) * C4747 +
            (C37884 - C37883 + C37886 - C37885) * C4743 +
            (C31090 * C5923 - C31092 * C5921 + C47473 * C23237 -
             C31093 * C23236) *
                C4748 +
            (C31090 * C5927 - C31092 * C5924 + C47473 * C23239 -
             C31093 * C23238) *
                C47471) *
               C47105 * C47456) *
              C47453) *
         C47128) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C31090 * C122 - C31092 * C115 + C47473 * C491 - C31093 * C481) *
               C4747 +
           (C31090 * C136 - C31092 * C123 + C47473 * C511 - C31093 * C492) *
               C4743 +
           (C36849 - C36850 + C36851 - C36852) * C4748 +
           (C36853 - C36854 + C36855 - C36856) * C47471) *
              C47105 * C1991 +
          ((C31092 * C481 - C31090 * C491 + C31093 * C484 - C47473 * C497) *
               C4747 +
           (C31092 * C492 - C31090 * C511 + C31093 * C498 - C47473 * C514) *
               C4743 +
           (C37465 - C37466 + C37467 - C37468) * C4748 +
           (C37469 - C37470 + C37471 - C37472) * C47471) *
              C47105 * C1992 +
          ((C31090 * C497 - C31092 * C484 + C47473 * C2002 - C31093 * C1996) *
               C4747 +
           (C31090 * C514 - C31092 * C498 + C47473 * C2014 - C31093 * C2003) *
               C4743 +
           (C37863 - C37864 + C37865 - C37866) * C4748 +
           (C37867 - C37868 + C37869 - C37870) * C47471) *
              C47105 * C1993 +
          ((C31092 * C1996 - C31090 * C2002 + C31093 * C1999 - C47473 * C2008) *
               C4747 +
           (C31092 * C2003 - C31090 * C2014 + C31093 * C2009 - C47473 * C2017) *
               C4743 +
           (C31092 * C2390 - C31090 * C2393 + C31093 * C6797 - C47473 * C6799) *
               C4748 +
           (C31092 * C2394 - C31090 * C2399 + C31093 * C6800 - C47473 * C6803) *
               C47471) *
              C47105 * C1994 +
          ((C31090 * C2008 - C31092 * C1999 + C47473 * C12423 -
            C31093 * C12421) *
               C4747 +
           (C31090 * C2017 - C31092 * C2009 + C47473 * C12427 -
            C31093 * C12424) *
               C4743 +
           (C31090 * C6799 - C31092 * C6797 + C47473 * C27579 -
            C31093 * C27578) *
               C4748 +
           (C31090 * C6803 - C31092 * C6800 + C47473 * C27581 -
            C31093 * C27580) *
               C47471) *
              C47105 * C1995) *
         C47156 * C47128) /
            (p * q * std::sqrt(p + q));
    d2ee[188] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C31090 * C122 - C31092 * C115 + C47473 * C491 - C31093 * C481) *
                 C4747 +
             (C31090 * C136 - C31092 * C123 + C47473 * C511 - C31093 * C492) *
                 C4743 +
             (C36849 - C36850 + C36851 - C36852) * C4748 +
             (C36853 - C36854 + C36855 - C36856) * C47471) *
                C47105 * C47422 +
            ((C31092 * C481 - C31090 * C491 + C31093 * C484 - C47473 * C497) *
                 C4747 +
             (C31092 * C492 - C31090 * C511 + C31093 * C498 - C47473 * C514) *
                 C4743 +
             (C37465 - C37466 + C37467 - C37468) * C4748 +
             (C37469 - C37470 + C37471 - C37472) * C47471) *
                C47105 * C47261) *
               C1078 +
           (((C36850 - C36849 + C36852 - C36851) * C4747 +
             (C36854 - C36853 + C36856 - C36855) * C4743 +
             (C36857 - C36858 + C36859 - C36860) * C4748 +
             (C36861 - C36862 + C36863 - C36864) * C47471) *
                C47105 * C47422 +
            ((C37466 - C37465 + C37468 - C37467) * C4747 +
             (C37470 - C37469 + C37472 - C37471) * C4743 +
             (C37871 - C37872 + C37873 - C37874) * C4748 +
             (C37875 - C37876 + C37877 - C37878) * C47471) *
                C47105 * C47261) *
               C1079 +
           (((C36858 - C36857 + C36860 - C36859) * C4747 +
             (C36862 - C36861 + C36864 - C36863) * C4743 +
             (C37701 - C37702 + C37703 - C37704) * C4748 +
             (C37705 - C37706 + C37707 - C37708) * C47471) *
                C47105 * C47422 +
            ((C37872 - C37871 + C37874 - C37873) * C4747 +
             (C37876 - C37875 + C37878 - C37877) * C4743 +
             (C31092 * C1694 - C31090 * C1697 + C31093 * C5921 -
              C47473 * C5923) *
                 C4748 +
             (C31092 * C1698 - C31090 * C1703 + C31093 * C5924 -
              C47473 * C5927) *
                 C47471) *
                C47105 * C47261) *
               C47453) *
              C47407 +
          ((((C31096 - C31095 + C31098 - C31097) * C4747 +
             (C31100 - C31099 + C31102 - C31101) * C4743 +
             (C31273 - C31274 + C31275 - C31276) * C4748 +
             (C31277 - C31278 + C31279 - C31280) * C47471) *
                C47105 * C47422 +
            ((C31452 - C31451 + C31454 - C31453) * C4747 +
             (C31456 - C31455 + C31458 - C31457) * C4743 +
             (C31953 - C31954 + C31955 - C31956) * C4748 +
             (C31957 - C31958 + C31959 - C31960) * C47471) *
                C47105 * C47261) *
               C1078 +
           (((C31274 - C31273 + C31276 - C31275) * C4747 +
             (C31278 - C31277 + C31280 - C31279) * C4743 +
             (C31281 - C31282 + C31283 - C31284) * C4748 +
             (C31285 - C31286 + C31287 - C31288) * C47471) *
                C47105 * C47422 +
            ((C31954 - C31953 + C31956 - C31955) * C4747 +
             (C31958 - C31957 + C31960 - C31959) * C4743 +
             (C32675 - C32676 + C32677 - C32678) * C4748 +
             (C32679 - C32680 + C32681 - C32682) * C47471) *
                C47105 * C47261) *
               C1079 +
           (((C31282 - C31281 + C31284 - C31283) * C4747 +
             (C31286 - C31285 + C31288 - C31287) * C4743 +
             (C32473 - C32474 + C32475 - C32476) * C4748 +
             (C32477 - C32478 + C32479 - C32480) * C47471) *
                C47105 * C47422 +
            ((C32676 - C32675 + C32678 - C32677) * C4747 +
             (C32680 - C32679 + C32682 - C32681) * C4743 +
             (C31090 * C1699 - C31092 * C1695 + C47473 * C5925 -
              C31093 * C5922) *
                 C4748 +
             (C31090 * C1704 - C31092 * C1700 + C47473 * C5928 -
              C31093 * C5926) *
                 C47471) *
                C47105 * C47261) *
               C47453) *
              C47139)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C31090 * C122 - C31092 * C115 + C47473 * C491 - C31093 * C481) *
                C4747 +
            (C31090 * C136 - C31092 * C123 + C47473 * C511 - C31093 * C492) *
                C4743 +
            (C36849 - C36850 + C36851 - C36852) * C4748 +
            (C36853 - C36854 + C36855 - C36856) * C47471) *
               C47105 * C47422 +
           ((C31092 * C481 - C31090 * C491 + C31093 * C484 - C47473 * C497) *
                C4747 +
            (C31092 * C492 - C31090 * C511 + C31093 * C498 - C47473 * C514) *
                C4743 +
            (C31092 * C931 - C31090 * C936 + C31093 * C1286 - C47473 * C1295) *
                C4748 +
            (C31092 * C937 - C31090 * C946 + C31093 * C1296 - C47473 * C1313) *
                C47471) *
               C47105 * C47261) *
              C47156 * C655 +
          (((C31096 - C31095 + C31098 - C31097) * C4747 +
            (C31100 - C31099 + C31102 - C31101) * C4743 +
            (C31273 - C31274 + C31275 - C31276) * C4748 +
            (C31277 - C31278 + C31279 - C31280) * C47471) *
               C47105 * C47422 +
           ((C31452 - C31451 + C31454 - C31453) * C4747 +
            (C31456 - C31455 + C31458 - C31457) * C4743 +
            (C31953 - C31954 + C31955 - C31956) * C4748 +
            (C31957 - C31958 + C31959 - C31960) * C47471) *
               C47105 * C47261) *
              C47156 * C656 +
          (((C31104 - C31103 + C31106 - C31105) * C4747 +
            (C31108 - C31107 + C31110 - C31109) * C4743 +
            (C31289 - C31290 + C31291 - C31292) * C4748 +
            (C31293 - C31294 + C31295 - C31296) * C47471) *
               C47105 * C47422 +
           ((C31468 - C31467 + C31470 - C31469) * C4747 +
            (C31472 - C31471 + C31474 - C31473) * C4743 +
            (C31961 - C31962 + C31963 - C31964) * C4748 +
            (C31965 - C31966 + C31967 - C31968) * C47471) *
               C47105 * C47261) *
              C47156 * C657 +
          (((C31112 - C31111 + C31114 - C31113) * C4747 +
            (C31116 - C31115 + C31118 - C31117) * C4743 +
            (C31613 - C31614 + C31615 - C31616) * C4748 +
            (C31617 - C31618 + C31619 - C31620) * C47471) *
               C47105 * C47422 +
           ((C31752 - C31751 + C31754 - C31753) * C4747 +
            (C31756 - C31755 + C31758 - C31757) * C4743 +
            (C31090 * C942 - C31092 * C934 + C47473 * C2167 - C31093 * C2166) *
                C4748 +
            (C31090 * C949 - C31092 * C943 + C47473 * C2169 - C31093 * C2168) *
                C47471) *
               C47105 * C47261) *
              C47156 * C47457)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C31090 * C122 - C31092 * C115 + C47473 * C491 - C31093 * C481) *
                C4747 +
            (C31090 * C136 - C31092 * C123 + C47473 * C511 - C31093 * C492) *
                C4743 +
            (C36849 - C36850 + C36851 - C36852) * C4748 +
            (C36853 - C36854 + C36855 - C36856) * C47471) *
               C47105 * C2276 +
           ((C31092 * C481 - C31090 * C491 + C31093 * C484 - C47473 * C497) *
                C4747 +
            (C31092 * C492 - C31090 * C511 + C31093 * C498 - C47473 * C514) *
                C4743 +
            (C37465 - C37466 + C37467 - C37468) * C4748 +
            (C37469 - C37470 + C37471 - C37472) * C47471) *
               C47105 * C2277 +
           ((C31090 * C497 - C31092 * C484 + C47473 * C2002 - C31093 * C1996) *
                C4747 +
            (C31090 * C514 - C31092 * C498 + C47473 * C2014 - C31093 * C2003) *
                C4743 +
            (C37863 - C37864 + C37865 - C37866) * C4748 +
            (C37867 - C37868 + C37869 - C37870) * C47471) *
               C47105 * C2278 +
           ((C31092 * C1996 - C31090 * C2002 + C31093 * C1999 -
             C47473 * C2008) *
                C4747 +
            (C31092 * C2003 - C31090 * C2014 + C31093 * C2009 -
             C47473 * C2017) *
                C4743 +
            (C31092 * C2390 - C31090 * C2393 + C31093 * C6797 -
             C47473 * C6799) *
                C4748 +
            (C31092 * C2394 - C31090 * C2399 + C31093 * C6800 -
             C47473 * C6803) *
                C47471) *
               C47105 * C47469) *
              C47156 * C47407 +
          (((C31096 - C31095 + C31098 - C31097) * C4747 +
            (C31100 - C31099 + C31102 - C31101) * C4743 +
            (C31273 - C31274 + C31275 - C31276) * C4748 +
            (C31277 - C31278 + C31279 - C31280) * C47471) *
               C47105 * C2276 +
           ((C31452 - C31451 + C31454 - C31453) * C4747 +
            (C31456 - C31455 + C31458 - C31457) * C4743 +
            (C31953 - C31954 + C31955 - C31956) * C4748 +
            (C31957 - C31958 + C31959 - C31960) * C47471) *
               C47105 * C2277 +
           ((C31460 - C31459 + C31462 - C31461) * C4747 +
            (C31464 - C31463 + C31466 - C31465) * C4743 +
            (C33381 - C33382 + C33383 - C33384) * C4748 +
            (C33385 - C33386 + C33387 - C33388) * C47471) *
               C47105 * C2278 +
           ((C33520 - C33519 + C33522 - C33521) * C4747 +
            (C33524 - C33523 + C33526 - C33525) * C4743 +
            (C31090 * C2395 - C31092 * C2391 + C47473 * C6801 -
             C31093 * C6798) *
                C4748 +
            (C31090 * C2400 - C31092 * C2396 + C47473 * C6804 -
             C31093 * C6802) *
                C47471) *
               C47105 * C47469) *
              C47156 * C47139)) /
            (p * q * std::sqrt(p + q));
    d2ee[189] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C31090 * C122 - C31092 * C115 + C47473 * C491 - C31093 * C481) *
                C4747 +
            (C31090 * C136 - C31092 * C123 + C47473 * C511 - C31093 * C492) *
                C4743 +
            (C36849 - C36850 + C36851 - C36852) * C4748 +
            (C36853 - C36854 + C36855 - C36856) * C47471) *
               C47105 * C47174 * C47492 +
           ((C36850 - C36849 + C36852 - C36851) * C4747 +
            (C36854 - C36853 + C36856 - C36855) * C4743 +
            (C36857 - C36858 + C36859 - C36860) * C4748 +
            (C36861 - C36862 + C36863 - C36864) * C47471) *
               C47105 * C47174 * C47480 +
           ((C36858 - C36857 + C36860 - C36859) * C4747 +
            (C36862 - C36861 + C36864 - C36863) * C4743 +
            (C31090 * C1158 - C31092 * C1152 + C47473 * C1697 -
             C31093 * C1694) *
                C4748 +
            (C31090 * C1170 - C31092 * C1159 + C47473 * C1703 -
             C31093 * C1698) *
                C47471) *
               C47105 * C47174 * C47453) *
              C291 +
          (((C31096 - C31095 + C31098 - C31097) * C4747 +
            (C31100 - C31099 + C31102 - C31101) * C4743 +
            (C31273 - C31274 + C31275 - C31276) * C4748 +
            (C31277 - C31278 + C31279 - C31280) * C47471) *
               C47105 * C47174 * C47492 +
           ((C31274 - C31273 + C31276 - C31275) * C4747 +
            (C31278 - C31277 + C31280 - C31279) * C4743 +
            (C31281 - C31282 + C31283 - C31284) * C4748 +
            (C31285 - C31286 + C31287 - C31288) * C47471) *
               C47105 * C47174 * C47480 +
           ((C31282 - C31281 + C31284 - C31283) * C4747 +
            (C31286 - C31285 + C31288 - C31287) * C4743 +
            (C32473 - C32474 + C32475 - C32476) * C4748 +
            (C32477 - C32478 + C32479 - C32480) * C47471) *
               C47105 * C47174 * C47453) *
              C292 +
          (((C31104 - C31103 + C31106 - C31105) * C4747 +
            (C31108 - C31107 + C31110 - C31109) * C4743 +
            (C31289 - C31290 + C31291 - C31292) * C4748 +
            (C31293 - C31294 + C31295 - C31296) * C47471) *
               C47105 * C47174 * C47492 +
           ((C31290 - C31289 + C31292 - C31291) * C4747 +
            (C31294 - C31293 + C31296 - C31295) * C4743 +
            (C31297 - C31298 + C31299 - C31300) * C4748 +
            (C31301 - C31302 + C31303 - C31304) * C47471) *
               C47105 * C47174 * C47480 +
           ((C31298 - C31297 + C31300 - C31299) * C4747 +
            (C31302 - C31301 + C31304 - C31303) * C4743 +
            (C31090 * C1162 - C31092 * C1154 + C47473 * C1701 -
             C31093 * C1696) *
                C4748 +
            (C31090 * C1172 - C31092 * C1163 + C47473 * C1705 -
             C31093 * C1702) *
                C47471) *
               C47105 * C47174 * C47453) *
              C47447)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C31090 * C122 - C31092 * C115 + C47473 * C491 - C31093 * C481) *
               C4747 +
           (C31090 * C136 - C31092 * C123 + C47473 * C511 - C31093 * C492) *
               C4743 +
           (C31090 * C304 - C31092 * C294 + C47473 * C936 - C31093 * C931) *
               C4748 +
           (C31090 * C324 - C31092 * C305 + C47473 * C946 - C31093 * C937) *
               C47471) *
              C47105 * C47174 * C47156 * C108 +
          ((C31096 - C31095 + C31098 - C31097) * C4747 +
           (C31100 - C31099 + C31102 - C31101) * C4743 +
           (C31273 - C31274 + C31275 - C31276) * C4748 +
           (C31277 - C31278 + C31279 - C31280) * C47471) *
              C47105 * C47174 * C47156 * C109 +
          ((C31104 - C31103 + C31106 - C31105) * C4747 +
           (C31108 - C31107 + C31110 - C31109) * C4743 +
           (C31289 - C31290 + C31291 - C31292) * C4748 +
           (C31293 - C31294 + C31295 - C31296) * C47471) *
              C47105 * C47174 * C47156 * C110 +
          ((C31112 - C31111 + C31114 - C31113) * C4747 +
           (C31116 - C31115 + C31118 - C31117) * C4743 +
           (C31613 - C31614 + C31615 - C31616) * C4748 +
           (C31617 - C31618 + C31619 - C31620) * C47471) *
              C47105 * C47174 * C47156 * C111 +
          ((C31120 - C31119 + C31122 - C31121) * C4747 +
           (C31124 - C31123 + C31126 - C31125) * C4743 +
           (C31090 * C320 - C31092 * C302 + C47473 * C944 - C31093 * C935) *
               C4748 +
           (C31090 * C332 - C31092 * C321 + C47473 * C950 - C31093 * C945) *
               C47471) *
              C47105 * C47174 * C47156 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C31090 * C122 - C31092 * C115 + C47473 * C491 - C31093 * C481) *
                C4747 +
            (C31090 * C136 - C31092 * C123 + C47473 * C511 - C31093 * C492) *
                C4743 +
            (C36849 - C36850 + C36851 - C36852) * C4748 +
            (C36853 - C36854 + C36855 - C36856) * C47471) *
               C47105 * C47174 * C1078 +
           ((C36850 - C36849 + C36852 - C36851) * C4747 +
            (C36854 - C36853 + C36856 - C36855) * C4743 +
            (C36857 - C36858 + C36859 - C36860) * C4748 +
            (C36861 - C36862 + C36863 - C36864) * C47471) *
               C47105 * C47174 * C1079 +
           ((C36858 - C36857 + C36860 - C36859) * C4747 +
            (C36862 - C36861 + C36864 - C36863) * C4743 +
            (C31090 * C1158 - C31092 * C1152 + C47473 * C1697 -
             C31093 * C1694) *
                C4748 +
            (C31090 * C1170 - C31092 * C1159 + C47473 * C1703 -
             C31093 * C1698) *
                C47471) *
               C47105 * C47174 * C47453) *
              C47489 +
          (((C31096 - C31095 + C31098 - C31097) * C4747 +
            (C31100 - C31099 + C31102 - C31101) * C4743 +
            (C31273 - C31274 + C31275 - C31276) * C4748 +
            (C31277 - C31278 + C31279 - C31280) * C47471) *
               C47105 * C47174 * C1078 +
           ((C31274 - C31273 + C31276 - C31275) * C4747 +
            (C31278 - C31277 + C31280 - C31279) * C4743 +
            (C31281 - C31282 + C31283 - C31284) * C4748 +
            (C31285 - C31286 + C31287 - C31288) * C47471) *
               C47105 * C47174 * C1079 +
           ((C31282 - C31281 + C31284 - C31283) * C4747 +
            (C31286 - C31285 + C31288 - C31287) * C4743 +
            (C32473 - C32474 + C32475 - C32476) * C4748 +
            (C32477 - C32478 + C32479 - C32480) * C47471) *
               C47105 * C47174 * C47453) *
              C47476 +
          (((C31104 - C31103 + C31106 - C31105) * C4747 +
            (C31108 - C31107 + C31110 - C31109) * C4743 +
            (C31289 - C31290 + C31291 - C31292) * C4748 +
            (C31293 - C31294 + C31295 - C31296) * C47471) *
               C47105 * C47174 * C1078 +
           ((C31290 - C31289 + C31292 - C31291) * C4747 +
            (C31294 - C31293 + C31296 - C31295) * C4743 +
            (C31297 - C31298 + C31299 - C31300) * C4748 +
            (C31301 - C31302 + C31303 - C31304) * C47471) *
               C47105 * C47174 * C1079 +
           ((C31298 - C31297 + C31300 - C31299) * C4747 +
            (C31302 - C31301 + C31304 - C31303) * C4743 +
            (C31090 * C1162 - C31092 * C1154 + C47473 * C1701 -
             C31093 * C1696) *
                C4748 +
            (C31090 * C1172 - C31092 * C1163 + C47473 * C1705 -
             C31093 * C1702) *
                C47471) *
               C47105 * C47174 * C47453) *
              C47447)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C31090 * C122 - C31092 * C115 + C47473 * C491 - C31093 * C481) *
               C4747 +
           (C31090 * C136 - C31092 * C123 + C47473 * C511 - C31093 * C492) *
               C4743 +
           (C36849 - C36850 + C36851 - C36852) * C4748 +
           (C36853 - C36854 + C36855 - C36856) * C47471) *
              C47105 * C47174 * C1146 +
          ((C36850 - C36849 + C36852 - C36851) * C4747 +
           (C36854 - C36853 + C36856 - C36855) * C4743 +
           (C36857 - C36858 + C36859 - C36860) * C4748 +
           (C36861 - C36862 + C36863 - C36864) * C47471) *
              C47105 * C47174 * C1147 +
          ((C36858 - C36857 + C36860 - C36859) * C4747 +
           (C36862 - C36861 + C36864 - C36863) * C4743 +
           (C37701 - C37702 + C37703 - C37704) * C4748 +
           (C37705 - C37706 + C37707 - C37708) * C47471) *
              C47105 * C47174 * C1148 +
          ((C37702 - C37701 + C37704 - C37703) * C4747 +
           (C37706 - C37705 + C37708 - C37707) * C4743 +
           (C37709 - C37710 + C37711 - C37712) * C4748 +
           (C37713 - C37714 + C37715 - C37716) * C47471) *
              C47105 * C47174 * C1149 +
          ((C37710 - C37709 + C37712 - C37711) * C4747 +
           (C37714 - C37713 + C37716 - C37715) * C4743 +
           (C31090 * C5757 - C31092 * C5755 + C47473 * C22599 -
            C31093 * C22598) *
               C4748 +
           (C31090 * C5761 - C31092 * C5758 + C47473 * C22601 -
            C31093 * C22600) *
               C47471) *
              C47105 * C47174 * C1150) *
         C47128) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C31090 * C122 - C31092 * C115 + C47473 * C491 - C31093 * C481) *
                C4747 +
            (C31090 * C136 - C31092 * C123 + C47473 * C511 - C31093 * C492) *
                C4743 +
            (C36849 - C36850 + C36851 - C36852) * C4748 +
            (C36853 - C36854 + C36855 - C36856) * C47471) *
               C47105 * C1816 +
           ((C31092 * C481 - C31090 * C491 + C31093 * C484 - C47473 * C497) *
                C4747 +
            (C31092 * C492 - C31090 * C511 + C31093 * C498 - C47473 * C514) *
                C4743 +
            (C37465 - C37466 + C37467 - C37468) * C4748 +
            (C37469 - C37470 + C37471 - C37472) * C47471) *
               C47105 * C1817 +
           ((C31090 * C497 - C31092 * C484 + C47473 * C2002 - C31093 * C1996) *
                C4747 +
            (C31090 * C514 - C31092 * C498 + C47473 * C2014 - C31093 * C2003) *
                C4743 +
            (C37863 - C37864 + C37865 - C37866) * C4748 +
            (C37867 - C37868 + C37869 - C37870) * C47471) *
               C47105 * C47456) *
              C47156 * C47489 +
          (((C31096 - C31095 + C31098 - C31097) * C4747 +
            (C31100 - C31099 + C31102 - C31101) * C4743 +
            (C31273 - C31274 + C31275 - C31276) * C4748 +
            (C31277 - C31278 + C31279 - C31280) * C47471) *
               C47105 * C1816 +
           ((C31452 - C31451 + C31454 - C31453) * C4747 +
            (C31456 - C31455 + C31458 - C31457) * C4743 +
            (C31953 - C31954 + C31955 - C31956) * C4748 +
            (C31957 - C31958 + C31959 - C31960) * C47471) *
               C47105 * C1817 +
           ((C31460 - C31459 + C31462 - C31461) * C4747 +
            (C31464 - C31463 + C31466 - C31465) * C4743 +
            (C33381 - C33382 + C33383 - C33384) * C4748 +
            (C33385 - C33386 + C33387 - C33388) * C47471) *
               C47105 * C47456) *
              C47156 * C47476 +
          (((C31104 - C31103 + C31106 - C31105) * C4747 +
            (C31108 - C31107 + C31110 - C31109) * C4743 +
            (C31289 - C31290 + C31291 - C31292) * C4748 +
            (C31293 - C31294 + C31295 - C31296) * C47471) *
               C47105 * C1816 +
           ((C31468 - C31467 + C31470 - C31469) * C4747 +
            (C31472 - C31471 + C31474 - C31473) * C4743 +
            (C31961 - C31962 + C31963 - C31964) * C4748 +
            (C31965 - C31966 + C31967 - C31968) * C47471) *
               C47105 * C1817 +
           ((C31476 - C31475 + C31478 - C31477) * C4747 +
            (C31480 - C31479 + C31482 - C31481) * C4743 +
            (C31090 * C1299 - C31092 * C1288 + C47473 * C2397 -
             C31093 * C2392) *
                C4748 +
            (C31090 * C1315 - C31092 * C1300 + C47473 * C2401 -
             C31093 * C2398) *
                C47471) *
               C47105 * C47456) *
              C47156 * C47447)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C31090 * C122 - C31092 * C115 + C47473 * C491 - C31093 * C481) *
                C4747 +
            (C31090 * C136 - C31092 * C123 + C47473 * C511 - C31093 * C492) *
                C4743 +
            (C36849 - C36850 + C36851 - C36852) * C4748 +
            (C36853 - C36854 + C36855 - C36856) * C47471) *
               C47105 * C1816 +
           ((C31092 * C481 - C31090 * C491 + C31093 * C484 - C47473 * C497) *
                C4747 +
            (C31092 * C492 - C31090 * C511 + C31093 * C498 - C47473 * C514) *
                C4743 +
            (C37465 - C37466 + C37467 - C37468) * C4748 +
            (C37469 - C37470 + C37471 - C37472) * C47471) *
               C47105 * C1817 +
           ((C31090 * C497 - C31092 * C484 + C47473 * C2002 - C31093 * C1996) *
                C4747 +
            (C31090 * C514 - C31092 * C498 + C47473 * C2014 - C31093 * C2003) *
                C4743 +
            (C37863 - C37864 + C37865 - C37866) * C4748 +
            (C37867 - C37868 + C37869 - C37870) * C47471) *
               C47105 * C47456) *
              C47492 +
          (((C36850 - C36849 + C36852 - C36851) * C4747 +
            (C36854 - C36853 + C36856 - C36855) * C4743 +
            (C36857 - C36858 + C36859 - C36860) * C4748 +
            (C36861 - C36862 + C36863 - C36864) * C47471) *
               C47105 * C1816 +
           ((C37466 - C37465 + C37468 - C37467) * C4747 +
            (C37470 - C37469 + C37472 - C37471) * C4743 +
            (C37871 - C37872 + C37873 - C37874) * C4748 +
            (C37875 - C37876 + C37877 - C37878) * C47471) *
               C47105 * C1817 +
           ((C37864 - C37863 + C37866 - C37865) * C4747 +
            (C37868 - C37867 + C37870 - C37869) * C4743 +
            (C37879 - C37880 + C37881 - C37882) * C4748 +
            (C37883 - C37884 + C37885 - C37886) * C47471) *
               C47105 * C47456) *
              C47480 +
          (((C36858 - C36857 + C36860 - C36859) * C4747 +
            (C36862 - C36861 + C36864 - C36863) * C4743 +
            (C37701 - C37702 + C37703 - C37704) * C4748 +
            (C37705 - C37706 + C37707 - C37708) * C47471) *
               C47105 * C1816 +
           ((C37872 - C37871 + C37874 - C37873) * C4747 +
            (C37876 - C37875 + C37878 - C37877) * C4743 +
            (C38341 - C38342 + C38343 - C38344) * C4748 +
            (C38345 - C38346 + C38347 - C38348) * C47471) *
               C47105 * C1817 +
           ((C37880 - C37879 + C37882 - C37881) * C4747 +
            (C37884 - C37883 + C37886 - C37885) * C4743 +
            (C31090 * C5923 - C31092 * C5921 + C47473 * C23237 -
             C31093 * C23236) *
                C4748 +
            (C31090 * C5927 - C31092 * C5924 + C47473 * C23239 -
             C31093 * C23238) *
                C47471) *
               C47105 * C47456) *
              C47453) *
         C47128) /
            (p * q * std::sqrt(p + q));
    d2ee[190] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C31090 * C122 - C31092 * C115 + C47473 * C491 - C31093 * C481) *
                 C4747 +
             (C31090 * C136 - C31092 * C123 + C47473 * C511 - C31093 * C492) *
                 C4743 +
             (C36849 - C36850 + C36851 - C36852) * C4748 +
             (C36853 - C36854 + C36855 - C36856) * C47471) *
                C47105 * C3262 +
            ((C31092 * C481 - C31090 * C491 + C31093 * C484 - C47473 * C497) *
                 C4747 +
             (C31092 * C492 - C31090 * C511 + C31093 * C498 - C47473 * C514) *
                 C4743 +
             (C37465 - C37466 + C37467 - C37468) * C4748 +
             (C37469 - C37470 + C37471 - C37472) * C47471) *
                C47105 * C47261) *
               C47421 +
           (((C36850 - C36849 + C36852 - C36851) * C4747 +
             (C36854 - C36853 + C36856 - C36855) * C4743 +
             (C36857 - C36858 + C36859 - C36860) * C4748 +
             (C36861 - C36862 + C36863 - C36864) * C47471) *
                C47105 * C3262 +
            ((C37466 - C37465 + C37468 - C37467) * C4747 +
             (C37470 - C37469 + C37472 - C37471) * C4743 +
             (C37871 - C37872 + C37873 - C37874) * C4748 +
             (C37875 - C37876 + C37877 - C37878) * C47471) *
                C47105 * C47261) *
               C47219) *
              C47133 +
          ((((C31096 - C31095 + C31098 - C31097) * C4747 +
             (C31100 - C31099 + C31102 - C31101) * C4743 +
             (C31273 - C31274 + C31275 - C31276) * C4748 +
             (C31277 - C31278 + C31279 - C31280) * C47471) *
                C47105 * C3262 +
            ((C31452 - C31451 + C31454 - C31453) * C4747 +
             (C31456 - C31455 + C31458 - C31457) * C4743 +
             (C31953 - C31954 + C31955 - C31956) * C4748 +
             (C31957 - C31958 + C31959 - C31960) * C47471) *
                C47105 * C47261) *
               C47421 +
           (((C31274 - C31273 + C31276 - C31275) * C4747 +
             (C31278 - C31277 + C31280 - C31279) * C4743 +
             (C31281 - C31282 + C31283 - C31284) * C4748 +
             (C31285 - C31286 + C31287 - C31288) * C47471) *
                C47105 * C3262 +
            ((C31954 - C31953 + C31956 - C31955) * C4747 +
             (C31958 - C31957 + C31960 - C31959) * C4743 +
             (C32675 - C32676 + C32677 - C32678) * C4748 +
             (C32679 - C32680 + C32681 - C32682) * C47471) *
                C47105 * C47261) *
               C47219) *
              C47142 +
          ((((C31104 - C31103 + C31106 - C31105) * C4747 +
             (C31108 - C31107 + C31110 - C31109) * C4743 +
             (C31289 - C31290 + C31291 - C31292) * C4748 +
             (C31293 - C31294 + C31295 - C31296) * C47471) *
                C47105 * C3262 +
            ((C31468 - C31467 + C31470 - C31469) * C4747 +
             (C31472 - C31471 + C31474 - C31473) * C4743 +
             (C31961 - C31962 + C31963 - C31964) * C4748 +
             (C31965 - C31966 + C31967 - C31968) * C47471) *
                C47105 * C47261) *
               C47421 +
           (((C31290 - C31289 + C31292 - C31291) * C4747 +
             (C31294 - C31293 + C31296 - C31295) * C4743 +
             (C31297 - C31298 + C31299 - C31300) * C4748 +
             (C31301 - C31302 + C31303 - C31304) * C47471) *
                C47105 * C3262 +
            ((C31962 - C31961 + C31964 - C31963) * C4747 +
             (C31966 - C31965 + C31968 - C31967) * C4743 +
             (C31090 * C1305 - C31092 * C1291 + C47473 * C1311 -
              C31093 * C1294) *
                 C4748 +
             (C31090 * C1318 - C31092 * C1306 + C47473 * C1321 -
              C31093 * C1312) *
                 C47471) *
                C47105 * C47261) *
               C47219) *
              C2871)) /
        (p * q * std::sqrt(p + q));
    d2ee[191] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C31090 * C122 - C31092 * C115 + C47473 * C491 - C31093 * C481) *
                 C4747 +
             (C31090 * C136 - C31092 * C123 + C47473 * C511 - C31093 * C492) *
                 C4743 +
             (C36849 - C36850 + C36851 - C36852) * C4748 +
             (C36853 - C36854 + C36855 - C36856) * C47471) *
                C47105 * C47257 +
            ((C31092 * C481 - C31090 * C491 + C31093 * C484 - C47473 * C497) *
                 C4747 +
             (C31092 * C492 - C31090 * C511 + C31093 * C498 - C47473 * C514) *
                 C4743 +
             (C37465 - C37466 + C37467 - C37468) * C4748 +
             (C37469 - C37470 + C37471 - C37472) * C47471) *
                C47105 * C47264 +
            ((C31090 * C497 - C31092 * C484 + C47473 * C2002 - C31093 * C1996) *
                 C4747 +
             (C31090 * C514 - C31092 * C498 + C47473 * C2014 - C31093 * C2003) *
                 C4743 +
             (C37863 - C37864 + C37865 - C37866) * C4748 +
             (C37867 - C37868 + C37869 - C37870) * C47471) *
                C47105 * C3770) *
               C47421 +
           (((C36850 - C36849 + C36852 - C36851) * C4747 +
             (C36854 - C36853 + C36856 - C36855) * C4743 +
             (C36857 - C36858 + C36859 - C36860) * C4748 +
             (C36861 - C36862 + C36863 - C36864) * C47471) *
                C47105 * C47257 +
            ((C37466 - C37465 + C37468 - C37467) * C4747 +
             (C37470 - C37469 + C37472 - C37471) * C4743 +
             (C37871 - C37872 + C37873 - C37874) * C4748 +
             (C37875 - C37876 + C37877 - C37878) * C47471) *
                C47105 * C47264 +
            ((C37864 - C37863 + C37866 - C37865) * C4747 +
             (C37868 - C37867 + C37870 - C37869) * C4743 +
             (C37879 - C37880 + C37881 - C37882) * C4748 +
             (C37883 - C37884 + C37885 - C37886) * C47471) *
                C47105 * C3770) *
               C47219) *
              C2608 +
          ((((C31096 - C31095 + C31098 - C31097) * C4747 +
             (C31100 - C31099 + C31102 - C31101) * C4743 +
             (C31273 - C31274 + C31275 - C31276) * C4748 +
             (C31277 - C31278 + C31279 - C31280) * C47471) *
                C47105 * C47257 +
            ((C31452 - C31451 + C31454 - C31453) * C4747 +
             (C31456 - C31455 + C31458 - C31457) * C4743 +
             (C31953 - C31954 + C31955 - C31956) * C4748 +
             (C31957 - C31958 + C31959 - C31960) * C47471) *
                C47105 * C47264 +
            ((C31460 - C31459 + C31462 - C31461) * C4747 +
             (C31464 - C31463 + C31466 - C31465) * C4743 +
             (C33381 - C33382 + C33383 - C33384) * C4748 +
             (C33385 - C33386 + C33387 - C33388) * C47471) *
                C47105 * C3770) *
               C47421 +
           (((C31274 - C31273 + C31276 - C31275) * C4747 +
             (C31278 - C31277 + C31280 - C31279) * C4743 +
             (C31281 - C31282 + C31283 - C31284) * C4748 +
             (C31285 - C31286 + C31287 - C31288) * C47471) *
                C47105 * C47257 +
            ((C31954 - C31953 + C31956 - C31955) * C4747 +
             (C31958 - C31957 + C31960 - C31959) * C4743 +
             (C32675 - C32676 + C32677 - C32678) * C4748 +
             (C32679 - C32680 + C32681 - C32682) * C47471) *
                C47105 * C47264 +
            ((C33382 - C33381 + C33384 - C33383) * C4747 +
             (C33386 - C33385 + C33388 - C33387) * C4743 +
             (C31090 * C1309 - C31092 * C1293 + C47473 * C7271 -
              C31093 * C7268) *
                 C4748 +
             (C31090 * C1320 - C31092 * C1310 + C47473 * C7274 -
              C31093 * C7272) *
                 C47471) *
                C47105 * C3770) *
               C47219) *
              C47139)) /
        (p * q * std::sqrt(p + q));
    d2ee[192] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C31090 * C122 - C31092 * C115 + C47473 * C491 - C31093 * C481) *
                 C4747 +
             (C31090 * C136 - C31092 * C123 + C47473 * C511 - C31093 * C492) *
                 C4743 +
             (C36849 - C36850 + C36851 - C36852) * C4748 +
             (C36853 - C36854 + C36855 - C36856) * C47471) *
                C47105 * C3262 +
            ((C31092 * C481 - C31090 * C491 + C31093 * C484 - C47473 * C497) *
                 C4747 +
             (C31092 * C492 - C31090 * C511 + C31093 * C498 - C47473 * C514) *
                 C4743 +
             (C37465 - C37466 + C37467 - C37468) * C4748 +
             (C37469 - C37470 + C37471 - C37472) * C47471) *
                C47105 * C47261) *
               C47492 +
           (((C36850 - C36849 + C36852 - C36851) * C4747 +
             (C36854 - C36853 + C36856 - C36855) * C4743 +
             (C36857 - C36858 + C36859 - C36860) * C4748 +
             (C36861 - C36862 + C36863 - C36864) * C47471) *
                C47105 * C3262 +
            ((C37466 - C37465 + C37468 - C37467) * C4747 +
             (C37470 - C37469 + C37472 - C37471) * C4743 +
             (C37871 - C37872 + C37873 - C37874) * C4748 +
             (C37875 - C37876 + C37877 - C37878) * C47471) *
                C47105 * C47261) *
               C47480 +
           (((C36858 - C36857 + C36860 - C36859) * C4747 +
             (C36862 - C36861 + C36864 - C36863) * C4743 +
             (C37701 - C37702 + C37703 - C37704) * C4748 +
             (C37705 - C37706 + C37707 - C37708) * C47471) *
                C47105 * C3262 +
            ((C37872 - C37871 + C37874 - C37873) * C4747 +
             (C37876 - C37875 + C37878 - C37877) * C4743 +
             (C38341 - C38342 + C38343 - C38344) * C4748 +
             (C38345 - C38346 + C38347 - C38348) * C47471) *
                C47105 * C47261) *
               C47453) *
              C2608 +
          ((((C31096 - C31095 + C31098 - C31097) * C4747 +
             (C31100 - C31099 + C31102 - C31101) * C4743 +
             (C31273 - C31274 + C31275 - C31276) * C4748 +
             (C31277 - C31278 + C31279 - C31280) * C47471) *
                C47105 * C3262 +
            ((C31452 - C31451 + C31454 - C31453) * C4747 +
             (C31456 - C31455 + C31458 - C31457) * C4743 +
             (C31953 - C31954 + C31955 - C31956) * C4748 +
             (C31957 - C31958 + C31959 - C31960) * C47471) *
                C47105 * C47261) *
               C47492 +
           (((C31274 - C31273 + C31276 - C31275) * C4747 +
             (C31278 - C31277 + C31280 - C31279) * C4743 +
             (C31281 - C31282 + C31283 - C31284) * C4748 +
             (C31285 - C31286 + C31287 - C31288) * C47471) *
                C47105 * C3262 +
            ((C31954 - C31953 + C31956 - C31955) * C4747 +
             (C31958 - C31957 + C31960 - C31959) * C4743 +
             (C32675 - C32676 + C32677 - C32678) * C4748 +
             (C32679 - C32680 + C32681 - C32682) * C47471) *
                C47105 * C47261) *
               C47480 +
           (((C31282 - C31281 + C31284 - C31283) * C4747 +
             (C31286 - C31285 + C31288 - C31287) * C4743 +
             (C32473 - C32474 + C32475 - C32476) * C4748 +
             (C32477 - C32478 + C32479 - C32480) * C47471) *
                C47105 * C3262 +
            ((C32676 - C32675 + C32678 - C32677) * C4747 +
             (C32680 - C32679 + C32682 - C32681) * C4743 +
             (C31090 * C1699 - C31092 * C1695 + C47473 * C5925 -
              C31093 * C5922) *
                 C4748 +
             (C31090 * C1704 - C31092 * C1700 + C47473 * C5928 -
              C31093 * C5926) *
                 C47471) *
                C47105 * C47261) *
               C47453) *
              C47139)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C31090 * C122 - C31092 * C115 + C47473 * C491 - C31093 * C481) *
                C4747 +
            (C31090 * C136 - C31092 * C123 + C47473 * C511 - C31093 * C492) *
                C4743 +
            (C36849 - C36850 + C36851 - C36852) * C4748 +
            (C36853 - C36854 + C36855 - C36856) * C47471) *
               C47105 * C3262 +
           ((C31092 * C481 - C31090 * C491 + C31093 * C484 - C47473 * C497) *
                C4747 +
            (C31092 * C492 - C31090 * C511 + C31093 * C498 - C47473 * C514) *
                C4743 +
            (C37465 - C37466 + C37467 - C37468) * C4748 +
            (C37469 - C37470 + C37471 - C37472) * C47471) *
               C47105 * C47261) *
              C47156 * C47498 +
          (((C31096 - C31095 + C31098 - C31097) * C4747 +
            (C31100 - C31099 + C31102 - C31101) * C4743 +
            (C31273 - C31274 + C31275 - C31276) * C4748 +
            (C31277 - C31278 + C31279 - C31280) * C47471) *
               C47105 * C3262 +
           ((C31452 - C31451 + C31454 - C31453) * C4747 +
            (C31456 - C31455 + C31458 - C31457) * C4743 +
            (C31953 - C31954 + C31955 - C31956) * C4748 +
            (C31957 - C31958 + C31959 - C31960) * C47471) *
               C47105 * C47261) *
              C47156 * C47491 +
          (((C31104 - C31103 + C31106 - C31105) * C4747 +
            (C31108 - C31107 + C31110 - C31109) * C4743 +
            (C31289 - C31290 + C31291 - C31292) * C4748 +
            (C31293 - C31294 + C31295 - C31296) * C47471) *
               C47105 * C3262 +
           ((C31468 - C31467 + C31470 - C31469) * C4747 +
            (C31472 - C31471 + C31474 - C31473) * C4743 +
            (C31961 - C31962 + C31963 - C31964) * C4748 +
            (C31965 - C31966 + C31967 - C31968) * C47471) *
               C47105 * C47261) *
              C47156 * C47478 +
          (((C31112 - C31111 + C31114 - C31113) * C4747 +
            (C31116 - C31115 + C31118 - C31117) * C4743 +
            (C31613 - C31614 + C31615 - C31616) * C4748 +
            (C31617 - C31618 + C31619 - C31620) * C47471) *
               C47105 * C3262 +
           ((C31752 - C31751 + C31754 - C31753) * C4747 +
            (C31756 - C31755 + C31758 - C31757) * C4743 +
            (C31090 * C942 - C31092 * C934 + C47473 * C2167 - C31093 * C2166) *
                C4748 +
            (C31090 * C949 - C31092 * C943 + C47473 * C2169 - C31093 * C2168) *
                C47471) *
               C47105 * C47261) *
              C47156 * C47457)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C31090 * C122 - C31092 * C115 + C47473 * C491 - C31093 * C481) *
                C4747 +
            (C31090 * C136 - C31092 * C123 + C47473 * C511 - C31093 * C492) *
                C4743 +
            (C36849 - C36850 + C36851 - C36852) * C4748 +
            (C36853 - C36854 + C36855 - C36856) * C47471) *
               C47105 * C47500 +
           ((C31092 * C481 - C31090 * C491 + C31093 * C484 - C47473 * C497) *
                C4747 +
            (C31092 * C492 - C31090 * C511 + C31093 * C498 - C47473 * C514) *
                C4743 +
            (C37465 - C37466 + C37467 - C37468) * C4748 +
            (C37469 - C37470 + C37471 - C37472) * C47471) *
               C47105 * C47497 +
           ((C31090 * C497 - C31092 * C484 + C47473 * C2002 - C31093 * C1996) *
                C4747 +
            (C31090 * C514 - C31092 * C498 + C47473 * C2014 - C31093 * C2003) *
                C4743 +
            (C37863 - C37864 + C37865 - C37866) * C4748 +
            (C37867 - C37868 + C37869 - C37870) * C47471) *
               C47105 * C47488 +
           ((C31092 * C1996 - C31090 * C2002 + C31093 * C1999 -
             C47473 * C2008) *
                C4747 +
            (C31092 * C2003 - C31090 * C2014 + C31093 * C2009 -
             C47473 * C2017) *
                C4743 +
            (C39177 - C39178 + C39179 - C39180) * C4748 +
            (C39181 - C39182 + C39183 - C39184) * C47471) *
               C47105 * C47469) *
              C47156 * C2608 +
          (((C31096 - C31095 + C31098 - C31097) * C4747 +
            (C31100 - C31099 + C31102 - C31101) * C4743 +
            (C31273 - C31274 + C31275 - C31276) * C4748 +
            (C31277 - C31278 + C31279 - C31280) * C47471) *
               C47105 * C47500 +
           ((C31452 - C31451 + C31454 - C31453) * C4747 +
            (C31456 - C31455 + C31458 - C31457) * C4743 +
            (C31953 - C31954 + C31955 - C31956) * C4748 +
            (C31957 - C31958 + C31959 - C31960) * C47471) *
               C47105 * C47497 +
           ((C31460 - C31459 + C31462 - C31461) * C4747 +
            (C31464 - C31463 + C31466 - C31465) * C4743 +
            (C33381 - C33382 + C33383 - C33384) * C4748 +
            (C33385 - C33386 + C33387 - C33388) * C47471) *
               C47105 * C47488 +
           ((C33520 - C33519 + C33522 - C33521) * C4747 +
            (C33524 - C33523 + C33526 - C33525) * C4743 +
            (C31090 * C2395 - C31092 * C2391 + C47473 * C6801 -
             C31093 * C6798) *
                C4748 +
            (C31090 * C2400 - C31092 * C2396 + C47473 * C6804 -
             C31093 * C6802) *
                C47471) *
               C47105 * C47469) *
              C47156 * C47139)) /
            (p * q * std::sqrt(p + q));
    d2ee[193] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C31090 * C122 - C31092 * C115 + C47473 * C491 - C31093 * C481) *
                C4747 +
            (C31090 * C136 - C31092 * C123 + C47473 * C511 - C31093 * C492) *
                C4743 +
            (C36849 - C36850 + C36851 - C36852) * C4748 +
            (C36853 - C36854 + C36855 - C36856) * C47471) *
               C47105 * C47257 +
           ((C31092 * C481 - C31090 * C491 + C31093 * C484 - C47473 * C497) *
                C4747 +
            (C31092 * C492 - C31090 * C511 + C31093 * C498 - C47473 * C514) *
                C4743 +
            (C37465 - C37466 + C37467 - C37468) * C4748 +
            (C37469 - C37470 + C37471 - C37472) * C47471) *
               C47105 * C47264 +
           ((C31090 * C497 - C31092 * C484 + C47473 * C2002 - C31093 * C1996) *
                C4747 +
            (C31090 * C514 - C31092 * C498 + C47473 * C2014 - C31093 * C2003) *
                C4743 +
            (C37863 - C37864 + C37865 - C37866) * C4748 +
            (C37867 - C37868 + C37869 - C37870) * C47471) *
               C47105 * C3770) *
              C47156 * C47133 +
          (((C31096 - C31095 + C31098 - C31097) * C4747 +
            (C31100 - C31099 + C31102 - C31101) * C4743 +
            (C31273 - C31274 + C31275 - C31276) * C4748 +
            (C31277 - C31278 + C31279 - C31280) * C47471) *
               C47105 * C47257 +
           ((C31452 - C31451 + C31454 - C31453) * C4747 +
            (C31456 - C31455 + C31458 - C31457) * C4743 +
            (C31953 - C31954 + C31955 - C31956) * C4748 +
            (C31957 - C31958 + C31959 - C31960) * C47471) *
               C47105 * C47264 +
           ((C31460 - C31459 + C31462 - C31461) * C4747 +
            (C31464 - C31463 + C31466 - C31465) * C4743 +
            (C33381 - C33382 + C33383 - C33384) * C4748 +
            (C33385 - C33386 + C33387 - C33388) * C47471) *
               C47105 * C3770) *
              C47156 * C47142 +
          (((C31104 - C31103 + C31106 - C31105) * C4747 +
            (C31108 - C31107 + C31110 - C31109) * C4743 +
            (C31289 - C31290 + C31291 - C31292) * C4748 +
            (C31293 - C31294 + C31295 - C31296) * C47471) *
               C47105 * C47257 +
           ((C31468 - C31467 + C31470 - C31469) * C4747 +
            (C31472 - C31471 + C31474 - C31473) * C4743 +
            (C31961 - C31962 + C31963 - C31964) * C4748 +
            (C31965 - C31966 + C31967 - C31968) * C47471) *
               C47105 * C47264 +
           ((C31476 - C31475 + C31478 - C31477) * C4747 +
            (C31480 - C31479 + C31482 - C31481) * C4743 +
            (C31090 * C1299 - C31092 * C1288 + C47473 * C2397 -
             C31093 * C2392) *
                C4748 +
            (C31090 * C1315 - C31092 * C1300 + C47473 * C2401 -
             C31093 * C2398) *
                C47471) *
               C47105 * C3770) *
              C47156 * C2871)) /
        (p * q * std::sqrt(p + q));
    d2ee[194] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C31090 * C122 - C31092 * C115 + C47473 * C491 - C31093 * C481) *
                C4747 +
            (C31090 * C136 - C31092 * C123 + C47473 * C511 - C31093 * C492) *
                C4743 +
            (C36849 - C36850 + C36851 - C36852) * C4748 +
            (C36853 - C36854 + C36855 - C36856) * C47471) *
               C47105 * C3262 +
           ((C31092 * C481 - C31090 * C491 + C31093 * C484 - C47473 * C497) *
                C4747 +
            (C31092 * C492 - C31090 * C511 + C31093 * C498 - C47473 * C514) *
                C4743 +
            (C37465 - C37466 + C37467 - C37468) * C4748 +
            (C37469 - C37470 + C37471 - C37472) * C47471) *
               C47105 * C47261) *
              C47156 * C47498 +
          (((C31096 - C31095 + C31098 - C31097) * C4747 +
            (C31100 - C31099 + C31102 - C31101) * C4743 +
            (C31273 - C31274 + C31275 - C31276) * C4748 +
            (C31277 - C31278 + C31279 - C31280) * C47471) *
               C47105 * C3262 +
           ((C31452 - C31451 + C31454 - C31453) * C4747 +
            (C31456 - C31455 + C31458 - C31457) * C4743 +
            (C31953 - C31954 + C31955 - C31956) * C4748 +
            (C31957 - C31958 + C31959 - C31960) * C47471) *
               C47105 * C47261) *
              C47156 * C47491 +
          (((C31104 - C31103 + C31106 - C31105) * C4747 +
            (C31108 - C31107 + C31110 - C31109) * C4743 +
            (C31289 - C31290 + C31291 - C31292) * C4748 +
            (C31293 - C31294 + C31295 - C31296) * C47471) *
               C47105 * C3262 +
           ((C31468 - C31467 + C31470 - C31469) * C4747 +
            (C31472 - C31471 + C31474 - C31473) * C4743 +
            (C31961 - C31962 + C31963 - C31964) * C4748 +
            (C31965 - C31966 + C31967 - C31968) * C47471) *
               C47105 * C47261) *
              C47156 * C47478 +
          (((C31112 - C31111 + C31114 - C31113) * C4747 +
            (C31116 - C31115 + C31118 - C31117) * C4743 +
            (C31613 - C31614 + C31615 - C31616) * C4748 +
            (C31617 - C31618 + C31619 - C31620) * C47471) *
               C47105 * C3262 +
           ((C31752 - C31751 + C31754 - C31753) * C4747 +
            (C31756 - C31755 + C31758 - C31757) * C4743 +
            (C31090 * C942 - C31092 * C934 + C47473 * C2167 - C31093 * C2166) *
                C4748 +
            (C31090 * C949 - C31092 * C943 + C47473 * C2169 - C31093 * C2168) *
                C47471) *
               C47105 * C47261) *
              C47156 * C47457)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C31090 * C122 - C31092 * C115 + C47473 * C491 - C31093 * C481) *
                 C4747 +
             (C31090 * C136 - C31092 * C123 + C47473 * C511 - C31093 * C492) *
                 C4743 +
             (C36849 - C36850 + C36851 - C36852) * C4748 +
             (C36853 - C36854 + C36855 - C36856) * C47471) *
                C47105 * C3262 +
            ((C31092 * C481 - C31090 * C491 + C31093 * C484 - C47473 * C497) *
                 C4747 +
             (C31092 * C492 - C31090 * C511 + C31093 * C498 - C47473 * C514) *
                 C4743 +
             (C37465 - C37466 + C37467 - C37468) * C4748 +
             (C37469 - C37470 + C37471 - C37472) * C47471) *
                C47105 * C47261) *
               C47492 +
           (((C36850 - C36849 + C36852 - C36851) * C4747 +
             (C36854 - C36853 + C36856 - C36855) * C4743 +
             (C36857 - C36858 + C36859 - C36860) * C4748 +
             (C36861 - C36862 + C36863 - C36864) * C47471) *
                C47105 * C3262 +
            ((C37466 - C37465 + C37468 - C37467) * C4747 +
             (C37470 - C37469 + C37472 - C37471) * C4743 +
             (C37871 - C37872 + C37873 - C37874) * C4748 +
             (C37875 - C37876 + C37877 - C37878) * C47471) *
                C47105 * C47261) *
               C47480 +
           (((C36858 - C36857 + C36860 - C36859) * C4747 +
             (C36862 - C36861 + C36864 - C36863) * C4743 +
             (C37701 - C37702 + C37703 - C37704) * C4748 +
             (C37705 - C37706 + C37707 - C37708) * C47471) *
                C47105 * C3262 +
            ((C37872 - C37871 + C37874 - C37873) * C4747 +
             (C37876 - C37875 + C37878 - C37877) * C4743 +
             (C38341 - C38342 + C38343 - C38344) * C4748 +
             (C38345 - C38346 + C38347 - C38348) * C47471) *
                C47105 * C47261) *
               C47453) *
              C2608 +
          ((((C31096 - C31095 + C31098 - C31097) * C4747 +
             (C31100 - C31099 + C31102 - C31101) * C4743 +
             (C31273 - C31274 + C31275 - C31276) * C4748 +
             (C31277 - C31278 + C31279 - C31280) * C47471) *
                C47105 * C3262 +
            ((C31452 - C31451 + C31454 - C31453) * C4747 +
             (C31456 - C31455 + C31458 - C31457) * C4743 +
             (C31953 - C31954 + C31955 - C31956) * C4748 +
             (C31957 - C31958 + C31959 - C31960) * C47471) *
                C47105 * C47261) *
               C47492 +
           (((C31274 - C31273 + C31276 - C31275) * C4747 +
             (C31278 - C31277 + C31280 - C31279) * C4743 +
             (C31281 - C31282 + C31283 - C31284) * C4748 +
             (C31285 - C31286 + C31287 - C31288) * C47471) *
                C47105 * C3262 +
            ((C31954 - C31953 + C31956 - C31955) * C4747 +
             (C31958 - C31957 + C31960 - C31959) * C4743 +
             (C32675 - C32676 + C32677 - C32678) * C4748 +
             (C32679 - C32680 + C32681 - C32682) * C47471) *
                C47105 * C47261) *
               C47480 +
           (((C31282 - C31281 + C31284 - C31283) * C4747 +
             (C31286 - C31285 + C31288 - C31287) * C4743 +
             (C32473 - C32474 + C32475 - C32476) * C4748 +
             (C32477 - C32478 + C32479 - C32480) * C47471) *
                C47105 * C3262 +
            ((C32676 - C32675 + C32678 - C32677) * C4747 +
             (C32680 - C32679 + C32682 - C32681) * C4743 +
             (C31090 * C1699 - C31092 * C1695 + C47473 * C5925 -
              C31093 * C5922) *
                 C4748 +
             (C31090 * C1704 - C31092 * C1700 + C47473 * C5928 -
              C31093 * C5926) *
                 C47471) *
                C47105 * C47261) *
               C47453) *
              C47139)) /
            (p * q * std::sqrt(p + q));
    d2ee[195] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C31090 * C122 - C31092 * C115 + C47473 * C491 - C31093 * C481) *
                C4747 +
            (C31090 * C136 - C31092 * C123 + C47473 * C511 - C31093 * C492) *
                C4743 +
            (C36849 - C36850 + C36851 - C36852) * C4748 +
            (C36853 - C36854 + C36855 - C36856) * C47471) *
               C47105 * C47174 * C47421 +
           ((C36850 - C36849 + C36852 - C36851) * C4747 +
            (C36854 - C36853 + C36856 - C36855) * C4743 +
            (C36857 - C36858 + C36859 - C36860) * C4748 +
            (C36861 - C36862 + C36863 - C36864) * C47471) *
               C47105 * C47174 * C47219) *
              C655 +
          (((C31096 - C31095 + C31098 - C31097) * C4747 +
            (C31100 - C31099 + C31102 - C31101) * C4743 +
            (C31273 - C31274 + C31275 - C31276) * C4748 +
            (C31277 - C31278 + C31279 - C31280) * C47471) *
               C47105 * C47174 * C47421 +
           ((C31274 - C31273 + C31276 - C31275) * C4747 +
            (C31278 - C31277 + C31280 - C31279) * C4743 +
            (C31281 - C31282 + C31283 - C31284) * C4748 +
            (C31285 - C31286 + C31287 - C31288) * C47471) *
               C47105 * C47174 * C47219) *
              C656 +
          (((C31104 - C31103 + C31106 - C31105) * C4747 +
            (C31108 - C31107 + C31110 - C31109) * C4743 +
            (C31289 - C31290 + C31291 - C31292) * C4748 +
            (C31293 - C31294 + C31295 - C31296) * C47471) *
               C47105 * C47174 * C47421 +
           ((C31290 - C31289 + C31292 - C31291) * C4747 +
            (C31294 - C31293 + C31296 - C31295) * C4743 +
            (C31297 - C31298 + C31299 - C31300) * C4748 +
            (C31301 - C31302 + C31303 - C31304) * C47471) *
               C47105 * C47174 * C47219) *
              C657 +
          (((C31112 - C31111 + C31114 - C31113) * C4747 +
            (C31116 - C31115 + C31118 - C31117) * C4743 +
            (C31613 - C31614 + C31615 - C31616) * C4748 +
            (C31617 - C31618 + C31619 - C31620) * C47471) *
               C47105 * C47174 * C47421 +
           ((C31614 - C31613 + C31616 - C31615) * C4747 +
            (C31618 - C31617 + C31620 - C31619) * C4743 +
            (C31090 * C318 - C31092 * C301 + C47473 * C1585 - C31093 * C1584) *
                C4748 +
            (C31090 * C331 - C31092 * C319 + C47473 * C1587 - C31093 * C1586) *
                C47471) *
               C47105 * C47174 * C47219) *
              C47457)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C31090 * C122 - C31092 * C115 + C47473 * C491 - C31093 * C481) *
                C4747 +
            (C31090 * C136 - C31092 * C123 + C47473 * C511 - C31093 * C492) *
                C4743 +
            (C36849 - C36850 + C36851 - C36852) * C4748 +
            (C36853 - C36854 + C36855 - C36856) * C47471) *
               C47105 * C47174 * C1420 +
           ((C36850 - C36849 + C36852 - C36851) * C4747 +
            (C36854 - C36853 + C36856 - C36855) * C4743 +
            (C36857 - C36858 + C36859 - C36860) * C4748 +
            (C36861 - C36862 + C36863 - C36864) * C47471) *
               C47105 * C47174 * C1421 +
           ((C36858 - C36857 + C36860 - C36859) * C4747 +
            (C36862 - C36861 + C36864 - C36863) * C4743 +
            (C37701 - C37702 + C37703 - C37704) * C4748 +
            (C37705 - C37706 + C37707 - C37708) * C47471) *
               C47105 * C47174 * C1422 +
           ((C37702 - C37701 + C37704 - C37703) * C4747 +
            (C37706 - C37705 + C37708 - C37707) * C4743 +
            (C37709 - C37710 + C37711 - C37712) * C4748 +
            (C37713 - C37714 + C37715 - C37716) * C47471) *
               C47105 * C47174 * C47463) *
              C47407 +
          (((C31096 - C31095 + C31098 - C31097) * C4747 +
            (C31100 - C31099 + C31102 - C31101) * C4743 +
            (C31273 - C31274 + C31275 - C31276) * C4748 +
            (C31277 - C31278 + C31279 - C31280) * C47471) *
               C47105 * C47174 * C1420 +
           ((C31274 - C31273 + C31276 - C31275) * C4747 +
            (C31278 - C31277 + C31280 - C31279) * C4743 +
            (C31281 - C31282 + C31283 - C31284) * C4748 +
            (C31285 - C31286 + C31287 - C31288) * C47471) *
               C47105 * C47174 * C1421 +
           ((C31282 - C31281 + C31284 - C31283) * C4747 +
            (C31286 - C31285 + C31288 - C31287) * C4743 +
            (C32473 - C32474 + C32475 - C32476) * C4748 +
            (C32477 - C32478 + C32479 - C32480) * C47471) *
               C47105 * C47174 * C1422 +
           ((C32474 - C32473 + C32476 - C32475) * C4747 +
            (C32478 - C32477 + C32480 - C32479) * C4743 +
            (C31090 * C1166 - C31092 * C1156 + C47473 * C6415 -
             C31093 * C6412) *
                C4748 +
            (C31090 * C1174 - C31092 * C1167 + C47473 * C6418 -
             C31093 * C6416) *
                C47471) *
               C47105 * C47174 * C47463) *
              C47139)) /
            (p * q * std::sqrt(p + q));
    d2ee[196] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C31090 * C122 - C31092 * C115 + C47473 * C491 - C31093 * C481) *
                 C4747 +
             (C31090 * C136 - C31092 * C123 + C47473 * C511 - C31093 * C492) *
                 C4743 +
             (C36849 - C36850 + C36851 - C36852) * C4748 +
             (C36853 - C36854 + C36855 - C36856) * C47471) *
                C47105 * C47422 +
            ((C31092 * C481 - C31090 * C491 + C31093 * C484 - C47473 * C497) *
                 C4747 +
             (C31092 * C492 - C31090 * C511 + C31093 * C498 - C47473 * C514) *
                 C4743 +
             (C37465 - C37466 + C37467 - C37468) * C4748 +
             (C37469 - C37470 + C37471 - C37472) * C47471) *
                C47105 * C47261) *
               C47421 +
           (((C36850 - C36849 + C36852 - C36851) * C4747 +
             (C36854 - C36853 + C36856 - C36855) * C4743 +
             (C36857 - C36858 + C36859 - C36860) * C4748 +
             (C36861 - C36862 + C36863 - C36864) * C47471) *
                C47105 * C47422 +
            ((C37466 - C37465 + C37468 - C37467) * C4747 +
             (C37470 - C37469 + C37472 - C37471) * C4743 +
             (C31090 * C1301 - C31092 * C1289 + C47473 * C1307 -
              C31093 * C1292) *
                 C4748 +
             (C31090 * C1316 - C31092 * C1302 + C47473 * C1319 -
              C31093 * C1308) *
                 C47471) *
                C47105 * C47261) *
               C47219) *
              C291 +
          ((((C31096 - C31095 + C31098 - C31097) * C4747 +
             (C31100 - C31099 + C31102 - C31101) * C4743 +
             (C31273 - C31274 + C31275 - C31276) * C4748 +
             (C31277 - C31278 + C31279 - C31280) * C47471) *
                C47105 * C47422 +
            ((C31452 - C31451 + C31454 - C31453) * C4747 +
             (C31456 - C31455 + C31458 - C31457) * C4743 +
             (C31953 - C31954 + C31955 - C31956) * C4748 +
             (C31957 - C31958 + C31959 - C31960) * C47471) *
                C47105 * C47261) *
               C47421 +
           (((C31274 - C31273 + C31276 - C31275) * C4747 +
             (C31278 - C31277 + C31280 - C31279) * C4743 +
             (C31281 - C31282 + C31283 - C31284) * C4748 +
             (C31285 - C31286 + C31287 - C31288) * C47471) *
                C47105 * C47422 +
            ((C31954 - C31953 + C31956 - C31955) * C4747 +
             (C31958 - C31957 + C31960 - C31959) * C4743 +
             (C32675 - C32676 + C32677 - C32678) * C4748 +
             (C32679 - C32680 + C32681 - C32682) * C47471) *
                C47105 * C47261) *
               C47219) *
              C292 +
          ((((C31104 - C31103 + C31106 - C31105) * C4747 +
             (C31108 - C31107 + C31110 - C31109) * C4743 +
             (C31289 - C31290 + C31291 - C31292) * C4748 +
             (C31293 - C31294 + C31295 - C31296) * C47471) *
                C47105 * C47422 +
            ((C31468 - C31467 + C31470 - C31469) * C4747 +
             (C31472 - C31471 + C31474 - C31473) * C4743 +
             (C31961 - C31962 + C31963 - C31964) * C4748 +
             (C31965 - C31966 + C31967 - C31968) * C47471) *
                C47105 * C47261) *
               C47421 +
           (((C31290 - C31289 + C31292 - C31291) * C4747 +
             (C31294 - C31293 + C31296 - C31295) * C4743 +
             (C31297 - C31298 + C31299 - C31300) * C4748 +
             (C31301 - C31302 + C31303 - C31304) * C47471) *
                C47105 * C47422 +
            ((C31962 - C31961 + C31964 - C31963) * C4747 +
             (C31966 - C31965 + C31968 - C31967) * C4743 +
             (C31090 * C1305 - C31092 * C1291 + C47473 * C1311 -
              C31093 * C1294) *
                 C4748 +
             (C31090 * C1318 - C31092 * C1306 + C47473 * C1321 -
              C31093 * C1312) *
                 C47471) *
                C47105 * C47261) *
               C47219) *
              C47447)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C31090 * C122 - C31092 * C115 + C47473 * C491 - C31093 * C481) *
                C4747 +
            (C31090 * C136 - C31092 * C123 + C47473 * C511 - C31093 * C492) *
                C4743 +
            (C36849 - C36850 + C36851 - C36852) * C4748 +
            (C36853 - C36854 + C36855 - C36856) * C47471) *
               C47105 * C47422 +
           ((C31092 * C481 - C31090 * C491 + C31093 * C484 - C47473 * C497) *
                C4747 +
            (C31092 * C492 - C31090 * C511 + C31093 * C498 - C47473 * C514) *
                C4743 +
            (C37465 - C37466 + C37467 - C37468) * C4748 +
            (C37469 - C37470 + C37471 - C37472) * C47471) *
               C47105 * C47261) *
              C1420 +
          (((C36850 - C36849 + C36852 - C36851) * C4747 +
            (C36854 - C36853 + C36856 - C36855) * C4743 +
            (C36857 - C36858 + C36859 - C36860) * C4748 +
            (C36861 - C36862 + C36863 - C36864) * C47471) *
               C47105 * C47422 +
           ((C37466 - C37465 + C37468 - C37467) * C4747 +
            (C37470 - C37469 + C37472 - C37471) * C4743 +
            (C37871 - C37872 + C37873 - C37874) * C4748 +
            (C37875 - C37876 + C37877 - C37878) * C47471) *
               C47105 * C47261) *
              C1421 +
          (((C36858 - C36857 + C36860 - C36859) * C4747 +
            (C36862 - C36861 + C36864 - C36863) * C4743 +
            (C37701 - C37702 + C37703 - C37704) * C4748 +
            (C37705 - C37706 + C37707 - C37708) * C47471) *
               C47105 * C47422 +
           ((C37872 - C37871 + C37874 - C37873) * C4747 +
            (C37876 - C37875 + C37878 - C37877) * C4743 +
            (C38341 - C38342 + C38343 - C38344) * C4748 +
            (C38345 - C38346 + C38347 - C38348) * C47471) *
               C47105 * C47261) *
              C1422 +
          (((C37702 - C37701 + C37704 - C37703) * C4747 +
            (C37706 - C37705 + C37708 - C37707) * C4743 +
            (C37709 - C37710 + C37711 - C37712) * C4748 +
            (C37713 - C37714 + C37715 - C37716) * C47471) *
               C47105 * C47422 +
           ((C38342 - C38341 + C38344 - C38343) * C4747 +
            (C38346 - C38345 + C38348 - C38347) * C4743 +
            (C31090 * C6413 - C31092 * C6411 + C47473 * C22245 -
             C31093 * C22244) *
                C4748 +
            (C31090 * C6417 - C31092 * C6414 + C47473 * C22247 -
             C31093 * C22246) *
                C47471) *
               C47105 * C47261) *
              C47463) *
         C47128) /
            (p * q * std::sqrt(p + q));
    d2ee[197] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C31090 * C122 - C31092 * C115 + C47473 * C491 - C31093 * C481) *
                C4747 +
            (C31090 * C136 - C31092 * C123 + C47473 * C511 - C31093 * C492) *
                C4743 +
            (C36849 - C36850 + C36851 - C36852) * C4748 +
            (C36853 - C36854 + C36855 - C36856) * C47471) *
               C47105 * C47174 * C47492 +
           ((C36850 - C36849 + C36852 - C36851) * C4747 +
            (C36854 - C36853 + C36856 - C36855) * C4743 +
            (C36857 - C36858 + C36859 - C36860) * C4748 +
            (C36861 - C36862 + C36863 - C36864) * C47471) *
               C47105 * C47174 * C47480 +
           ((C36858 - C36857 + C36860 - C36859) * C4747 +
            (C36862 - C36861 + C36864 - C36863) * C4743 +
            (C31090 * C1158 - C31092 * C1152 + C47473 * C1697 -
             C31093 * C1694) *
                C4748 +
            (C31090 * C1170 - C31092 * C1159 + C47473 * C1703 -
             C31093 * C1698) *
                C47471) *
               C47105 * C47174 * C47453) *
              C291 +
          (((C31096 - C31095 + C31098 - C31097) * C4747 +
            (C31100 - C31099 + C31102 - C31101) * C4743 +
            (C31273 - C31274 + C31275 - C31276) * C4748 +
            (C31277 - C31278 + C31279 - C31280) * C47471) *
               C47105 * C47174 * C47492 +
           ((C31274 - C31273 + C31276 - C31275) * C4747 +
            (C31278 - C31277 + C31280 - C31279) * C4743 +
            (C31281 - C31282 + C31283 - C31284) * C4748 +
            (C31285 - C31286 + C31287 - C31288) * C47471) *
               C47105 * C47174 * C47480 +
           ((C31282 - C31281 + C31284 - C31283) * C4747 +
            (C31286 - C31285 + C31288 - C31287) * C4743 +
            (C32473 - C32474 + C32475 - C32476) * C4748 +
            (C32477 - C32478 + C32479 - C32480) * C47471) *
               C47105 * C47174 * C47453) *
              C292 +
          (((C31104 - C31103 + C31106 - C31105) * C4747 +
            (C31108 - C31107 + C31110 - C31109) * C4743 +
            (C31289 - C31290 + C31291 - C31292) * C4748 +
            (C31293 - C31294 + C31295 - C31296) * C47471) *
               C47105 * C47174 * C47492 +
           ((C31290 - C31289 + C31292 - C31291) * C4747 +
            (C31294 - C31293 + C31296 - C31295) * C4743 +
            (C31297 - C31298 + C31299 - C31300) * C4748 +
            (C31301 - C31302 + C31303 - C31304) * C47471) *
               C47105 * C47174 * C47480 +
           ((C31298 - C31297 + C31300 - C31299) * C4747 +
            (C31302 - C31301 + C31304 - C31303) * C4743 +
            (C31090 * C1162 - C31092 * C1154 + C47473 * C1701 -
             C31093 * C1696) *
                C4748 +
            (C31090 * C1172 - C31092 * C1163 + C47473 * C1705 -
             C31093 * C1702) *
                C47471) *
               C47105 * C47174 * C47453) *
              C47447)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C31090 * C122 - C31092 * C115 + C47473 * C491 - C31093 * C481) *
               C4747 +
           (C31090 * C136 - C31092 * C123 + C47473 * C511 - C31093 * C492) *
               C4743 +
           (C31090 * C304 - C31092 * C294 + C47473 * C936 - C31093 * C931) *
               C4748 +
           (C31090 * C324 - C31092 * C305 + C47473 * C946 - C31093 * C937) *
               C47471) *
              C47105 * C47174 * C47156 * C108 +
          ((C31096 - C31095 + C31098 - C31097) * C4747 +
           (C31100 - C31099 + C31102 - C31101) * C4743 +
           (C31273 - C31274 + C31275 - C31276) * C4748 +
           (C31277 - C31278 + C31279 - C31280) * C47471) *
              C47105 * C47174 * C47156 * C109 +
          ((C31104 - C31103 + C31106 - C31105) * C4747 +
           (C31108 - C31107 + C31110 - C31109) * C4743 +
           (C31289 - C31290 + C31291 - C31292) * C4748 +
           (C31293 - C31294 + C31295 - C31296) * C47471) *
              C47105 * C47174 * C47156 * C110 +
          ((C31112 - C31111 + C31114 - C31113) * C4747 +
           (C31116 - C31115 + C31118 - C31117) * C4743 +
           (C31613 - C31614 + C31615 - C31616) * C4748 +
           (C31617 - C31618 + C31619 - C31620) * C47471) *
              C47105 * C47174 * C47156 * C111 +
          ((C31120 - C31119 + C31122 - C31121) * C4747 +
           (C31124 - C31123 + C31126 - C31125) * C4743 +
           (C31090 * C320 - C31092 * C302 + C47473 * C944 - C31093 * C935) *
               C4748 +
           (C31090 * C332 - C31092 * C321 + C47473 * C950 - C31093 * C945) *
               C47471) *
              C47105 * C47174 * C47156 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C31090 * C122 - C31092 * C115 + C47473 * C491 - C31093 * C481) *
                C4747 +
            (C31090 * C136 - C31092 * C123 + C47473 * C511 - C31093 * C492) *
                C4743 +
            (C36849 - C36850 + C36851 - C36852) * C4748 +
            (C36853 - C36854 + C36855 - C36856) * C47471) *
               C47105 * C47493 +
           ((C31092 * C481 - C31090 * C491 + C31093 * C484 - C47473 * C497) *
                C4747 +
            (C31092 * C492 - C31090 * C511 + C31093 * C498 - C47473 * C514) *
                C4743 +
            (C31092 * C931 - C31090 * C936 + C31093 * C1286 - C47473 * C1295) *
                C4748 +
            (C31092 * C937 - C31090 * C946 + C31093 * C1296 - C47473 * C1313) *
                C47471) *
               C47105 * C47482 +
           ((C31090 * C497 - C31092 * C484 + C47473 * C2002 - C31093 * C1996) *
                C4747 +
            (C31090 * C514 - C31092 * C498 + C47473 * C2014 - C31093 * C2003) *
                C4743 +
            (C31090 * C1295 - C31092 * C1286 + C47473 * C2393 -
             C31093 * C2390) *
                C4748 +
            (C31090 * C1313 - C31092 * C1296 + C47473 * C2399 -
             C31093 * C2394) *
                C47471) *
               C47105 * C47456) *
              C47156 * C291 +
          (((C31096 - C31095 + C31098 - C31097) * C4747 +
            (C31100 - C31099 + C31102 - C31101) * C4743 +
            (C31273 - C31274 + C31275 - C31276) * C4748 +
            (C31277 - C31278 + C31279 - C31280) * C47471) *
               C47105 * C47493 +
           ((C31452 - C31451 + C31454 - C31453) * C4747 +
            (C31456 - C31455 + C31458 - C31457) * C4743 +
            (C31953 - C31954 + C31955 - C31956) * C4748 +
            (C31957 - C31958 + C31959 - C31960) * C47471) *
               C47105 * C47482 +
           ((C31460 - C31459 + C31462 - C31461) * C4747 +
            (C31464 - C31463 + C31466 - C31465) * C4743 +
            (C33381 - C33382 + C33383 - C33384) * C4748 +
            (C33385 - C33386 + C33387 - C33388) * C47471) *
               C47105 * C47456) *
              C47156 * C292 +
          (((C31104 - C31103 + C31106 - C31105) * C4747 +
            (C31108 - C31107 + C31110 - C31109) * C4743 +
            (C31289 - C31290 + C31291 - C31292) * C4748 +
            (C31293 - C31294 + C31295 - C31296) * C47471) *
               C47105 * C47493 +
           ((C31468 - C31467 + C31470 - C31469) * C4747 +
            (C31472 - C31471 + C31474 - C31473) * C4743 +
            (C31961 - C31962 + C31963 - C31964) * C4748 +
            (C31965 - C31966 + C31967 - C31968) * C47471) *
               C47105 * C47482 +
           ((C31476 - C31475 + C31478 - C31477) * C4747 +
            (C31480 - C31479 + C31482 - C31481) * C4743 +
            (C31090 * C1299 - C31092 * C1288 + C47473 * C2397 -
             C31093 * C2392) *
                C4748 +
            (C31090 * C1315 - C31092 * C1300 + C47473 * C2401 -
             C31093 * C2398) *
                C47471) *
               C47105 * C47456) *
              C47156 * C47447)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C31090 * C122 - C31092 * C115 + C47473 * C491 - C31093 * C481) *
                C4747 +
            (C31090 * C136 - C31092 * C123 + C47473 * C511 - C31093 * C492) *
                C4743 +
            (C36849 - C36850 + C36851 - C36852) * C4748 +
            (C36853 - C36854 + C36855 - C36856) * C47471) *
               C47105 * C47174 * C1078 +
           ((C36850 - C36849 + C36852 - C36851) * C4747 +
            (C36854 - C36853 + C36856 - C36855) * C4743 +
            (C36857 - C36858 + C36859 - C36860) * C4748 +
            (C36861 - C36862 + C36863 - C36864) * C47471) *
               C47105 * C47174 * C1079 +
           ((C36858 - C36857 + C36860 - C36859) * C4747 +
            (C36862 - C36861 + C36864 - C36863) * C4743 +
            (C31090 * C1158 - C31092 * C1152 + C47473 * C1697 -
             C31093 * C1694) *
                C4748 +
            (C31090 * C1170 - C31092 * C1159 + C47473 * C1703 -
             C31093 * C1698) *
                C47471) *
               C47105 * C47174 * C47453) *
              C47489 +
          (((C31096 - C31095 + C31098 - C31097) * C4747 +
            (C31100 - C31099 + C31102 - C31101) * C4743 +
            (C31273 - C31274 + C31275 - C31276) * C4748 +
            (C31277 - C31278 + C31279 - C31280) * C47471) *
               C47105 * C47174 * C1078 +
           ((C31274 - C31273 + C31276 - C31275) * C4747 +
            (C31278 - C31277 + C31280 - C31279) * C4743 +
            (C31281 - C31282 + C31283 - C31284) * C4748 +
            (C31285 - C31286 + C31287 - C31288) * C47471) *
               C47105 * C47174 * C1079 +
           ((C31282 - C31281 + C31284 - C31283) * C4747 +
            (C31286 - C31285 + C31288 - C31287) * C4743 +
            (C32473 - C32474 + C32475 - C32476) * C4748 +
            (C32477 - C32478 + C32479 - C32480) * C47471) *
               C47105 * C47174 * C47453) *
              C47476 +
          (((C31104 - C31103 + C31106 - C31105) * C4747 +
            (C31108 - C31107 + C31110 - C31109) * C4743 +
            (C31289 - C31290 + C31291 - C31292) * C4748 +
            (C31293 - C31294 + C31295 - C31296) * C47471) *
               C47105 * C47174 * C1078 +
           ((C31290 - C31289 + C31292 - C31291) * C4747 +
            (C31294 - C31293 + C31296 - C31295) * C4743 +
            (C31297 - C31298 + C31299 - C31300) * C4748 +
            (C31301 - C31302 + C31303 - C31304) * C47471) *
               C47105 * C47174 * C1079 +
           ((C31298 - C31297 + C31300 - C31299) * C4747 +
            (C31302 - C31301 + C31304 - C31303) * C4743 +
            (C31090 * C1162 - C31092 * C1154 + C47473 * C1701 -
             C31093 * C1696) *
                C4748 +
            (C31090 * C1172 - C31092 * C1163 + C47473 * C1705 -
             C31093 * C1702) *
                C47471) *
               C47105 * C47174 * C47453) *
              C47447)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C31090 * C122 - C31092 * C115 + C47473 * C491 - C31093 * C481) *
               C4747 +
           (C31090 * C136 - C31092 * C123 + C47473 * C511 - C31093 * C492) *
               C4743 +
           (C36849 - C36850 + C36851 - C36852) * C4748 +
           (C36853 - C36854 + C36855 - C36856) * C47471) *
              C47105 * C47174 * C1146 +
          ((C36850 - C36849 + C36852 - C36851) * C4747 +
           (C36854 - C36853 + C36856 - C36855) * C4743 +
           (C36857 - C36858 + C36859 - C36860) * C4748 +
           (C36861 - C36862 + C36863 - C36864) * C47471) *
              C47105 * C47174 * C1147 +
          ((C36858 - C36857 + C36860 - C36859) * C4747 +
           (C36862 - C36861 + C36864 - C36863) * C4743 +
           (C37701 - C37702 + C37703 - C37704) * C4748 +
           (C37705 - C37706 + C37707 - C37708) * C47471) *
              C47105 * C47174 * C1148 +
          ((C37702 - C37701 + C37704 - C37703) * C4747 +
           (C37706 - C37705 + C37708 - C37707) * C4743 +
           (C37709 - C37710 + C37711 - C37712) * C4748 +
           (C37713 - C37714 + C37715 - C37716) * C47471) *
              C47105 * C47174 * C1149 +
          ((C37710 - C37709 + C37712 - C37711) * C4747 +
           (C37714 - C37713 + C37716 - C37715) * C4743 +
           (C31090 * C5757 - C31092 * C5755 + C47473 * C22599 -
            C31093 * C22598) *
               C4748 +
           (C31090 * C5761 - C31092 * C5758 + C47473 * C22601 -
            C31093 * C22600) *
               C47471) *
              C47105 * C47174 * C1150) *
         C47128) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C31090 * C122 - C31092 * C115 + C47473 * C491 - C31093 * C481) *
                C4747 +
            (C31090 * C136 - C31092 * C123 + C47473 * C511 - C31093 * C492) *
                C4743 +
            (C36849 - C36850 + C36851 - C36852) * C4748 +
            (C36853 - C36854 + C36855 - C36856) * C47471) *
               C47105 * C47493 +
           ((C31092 * C481 - C31090 * C491 + C31093 * C484 - C47473 * C497) *
                C4747 +
            (C31092 * C492 - C31090 * C511 + C31093 * C498 - C47473 * C514) *
                C4743 +
            (C37465 - C37466 + C37467 - C37468) * C4748 +
            (C37469 - C37470 + C37471 - C37472) * C47471) *
               C47105 * C47482 +
           ((C31090 * C497 - C31092 * C484 + C47473 * C2002 - C31093 * C1996) *
                C4747 +
            (C31090 * C514 - C31092 * C498 + C47473 * C2014 - C31093 * C2003) *
                C4743 +
            (C37863 - C37864 + C37865 - C37866) * C4748 +
            (C37867 - C37868 + C37869 - C37870) * C47471) *
               C47105 * C47456) *
              C1078 +
          (((C36850 - C36849 + C36852 - C36851) * C4747 +
            (C36854 - C36853 + C36856 - C36855) * C4743 +
            (C36857 - C36858 + C36859 - C36860) * C4748 +
            (C36861 - C36862 + C36863 - C36864) * C47471) *
               C47105 * C47493 +
           ((C37466 - C37465 + C37468 - C37467) * C4747 +
            (C37470 - C37469 + C37472 - C37471) * C4743 +
            (C37871 - C37872 + C37873 - C37874) * C4748 +
            (C37875 - C37876 + C37877 - C37878) * C47471) *
               C47105 * C47482 +
           ((C37864 - C37863 + C37866 - C37865) * C4747 +
            (C37868 - C37867 + C37870 - C37869) * C4743 +
            (C37879 - C37880 + C37881 - C37882) * C4748 +
            (C37883 - C37884 + C37885 - C37886) * C47471) *
               C47105 * C47456) *
              C1079 +
          (((C36858 - C36857 + C36860 - C36859) * C4747 +
            (C36862 - C36861 + C36864 - C36863) * C4743 +
            (C37701 - C37702 + C37703 - C37704) * C4748 +
            (C37705 - C37706 + C37707 - C37708) * C47471) *
               C47105 * C47493 +
           ((C37872 - C37871 + C37874 - C37873) * C4747 +
            (C37876 - C37875 + C37878 - C37877) * C4743 +
            (C31092 * C1694 - C31090 * C1697 + C31093 * C5921 -
             C47473 * C5923) *
                C4748 +
            (C31092 * C1698 - C31090 * C1703 + C31093 * C5924 -
             C47473 * C5927) *
                C47471) *
               C47105 * C47482 +
           ((C37880 - C37879 + C37882 - C37881) * C4747 +
            (C37884 - C37883 + C37886 - C37885) * C4743 +
            (C31090 * C5923 - C31092 * C5921 + C47473 * C23237 -
             C31093 * C23236) *
                C4748 +
            (C31090 * C5927 - C31092 * C5924 + C47473 * C23239 -
             C31093 * C23238) *
                C47471) *
               C47105 * C47456) *
              C47453) *
         C47128) /
            (p * q * std::sqrt(p + q));
    d2ee[198] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C31090 * C122 - C31092 * C115 + C47473 * C491 - C31093 * C481) *
                C4747 +
            (C31090 * C136 - C31092 * C123 + C47473 * C511 - C31093 * C492) *
                C4743 +
            (C36849 - C36850 + C36851 - C36852) * C4748 +
            (C36853 - C36854 + C36855 - C36856) * C47471) *
               C47105 * C47422 +
           ((C31092 * C481 - C31090 * C491 + C31093 * C484 - C47473 * C497) *
                C4747 +
            (C31092 * C492 - C31090 * C511 + C31093 * C498 - C47473 * C514) *
                C4743 +
            (C31092 * C931 - C31090 * C936 + C31093 * C1286 - C47473 * C1295) *
                C4748 +
            (C31092 * C937 - C31090 * C946 + C31093 * C1296 - C47473 * C1313) *
                C47471) *
               C47105 * C47261) *
              C47156 * C655 +
          (((C31096 - C31095 + C31098 - C31097) * C4747 +
            (C31100 - C31099 + C31102 - C31101) * C4743 +
            (C31273 - C31274 + C31275 - C31276) * C4748 +
            (C31277 - C31278 + C31279 - C31280) * C47471) *
               C47105 * C47422 +
           ((C31452 - C31451 + C31454 - C31453) * C4747 +
            (C31456 - C31455 + C31458 - C31457) * C4743 +
            (C31953 - C31954 + C31955 - C31956) * C4748 +
            (C31957 - C31958 + C31959 - C31960) * C47471) *
               C47105 * C47261) *
              C47156 * C656 +
          (((C31104 - C31103 + C31106 - C31105) * C4747 +
            (C31108 - C31107 + C31110 - C31109) * C4743 +
            (C31289 - C31290 + C31291 - C31292) * C4748 +
            (C31293 - C31294 + C31295 - C31296) * C47471) *
               C47105 * C47422 +
           ((C31468 - C31467 + C31470 - C31469) * C4747 +
            (C31472 - C31471 + C31474 - C31473) * C4743 +
            (C31961 - C31962 + C31963 - C31964) * C4748 +
            (C31965 - C31966 + C31967 - C31968) * C47471) *
               C47105 * C47261) *
              C47156 * C657 +
          (((C31112 - C31111 + C31114 - C31113) * C4747 +
            (C31116 - C31115 + C31118 - C31117) * C4743 +
            (C31613 - C31614 + C31615 - C31616) * C4748 +
            (C31617 - C31618 + C31619 - C31620) * C47471) *
               C47105 * C47422 +
           ((C31752 - C31751 + C31754 - C31753) * C4747 +
            (C31756 - C31755 + C31758 - C31757) * C4743 +
            (C31090 * C942 - C31092 * C934 + C47473 * C2167 - C31093 * C2166) *
                C4748 +
            (C31090 * C949 - C31092 * C943 + C47473 * C2169 - C31093 * C2168) *
                C47471) *
               C47105 * C47261) *
              C47156 * C47457)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C31090 * C122 - C31092 * C115 + C47473 * C491 - C31093 * C481) *
                 C4747 +
             (C31090 * C136 - C31092 * C123 + C47473 * C511 - C31093 * C492) *
                 C4743 +
             (C36849 - C36850 + C36851 - C36852) * C4748 +
             (C36853 - C36854 + C36855 - C36856) * C47471) *
                C47105 * C47422 +
            ((C31092 * C481 - C31090 * C491 + C31093 * C484 - C47473 * C497) *
                 C4747 +
             (C31092 * C492 - C31090 * C511 + C31093 * C498 - C47473 * C514) *
                 C4743 +
             (C37465 - C37466 + C37467 - C37468) * C4748 +
             (C37469 - C37470 + C37471 - C37472) * C47471) *
                C47105 * C47261) *
               C1078 +
           (((C36850 - C36849 + C36852 - C36851) * C4747 +
             (C36854 - C36853 + C36856 - C36855) * C4743 +
             (C36857 - C36858 + C36859 - C36860) * C4748 +
             (C36861 - C36862 + C36863 - C36864) * C47471) *
                C47105 * C47422 +
            ((C37466 - C37465 + C37468 - C37467) * C4747 +
             (C37470 - C37469 + C37472 - C37471) * C4743 +
             (C37871 - C37872 + C37873 - C37874) * C4748 +
             (C37875 - C37876 + C37877 - C37878) * C47471) *
                C47105 * C47261) *
               C1079 +
           (((C36858 - C36857 + C36860 - C36859) * C4747 +
             (C36862 - C36861 + C36864 - C36863) * C4743 +
             (C37701 - C37702 + C37703 - C37704) * C4748 +
             (C37705 - C37706 + C37707 - C37708) * C47471) *
                C47105 * C47422 +
            ((C37872 - C37871 + C37874 - C37873) * C4747 +
             (C37876 - C37875 + C37878 - C37877) * C4743 +
             (C31092 * C1694 - C31090 * C1697 + C31093 * C5921 -
              C47473 * C5923) *
                 C4748 +
             (C31092 * C1698 - C31090 * C1703 + C31093 * C5924 -
              C47473 * C5927) *
                 C47471) *
                C47105 * C47261) *
               C47453) *
              C47407 +
          ((((C31096 - C31095 + C31098 - C31097) * C4747 +
             (C31100 - C31099 + C31102 - C31101) * C4743 +
             (C31273 - C31274 + C31275 - C31276) * C4748 +
             (C31277 - C31278 + C31279 - C31280) * C47471) *
                C47105 * C47422 +
            ((C31452 - C31451 + C31454 - C31453) * C4747 +
             (C31456 - C31455 + C31458 - C31457) * C4743 +
             (C31953 - C31954 + C31955 - C31956) * C4748 +
             (C31957 - C31958 + C31959 - C31960) * C47471) *
                C47105 * C47261) *
               C1078 +
           (((C31274 - C31273 + C31276 - C31275) * C4747 +
             (C31278 - C31277 + C31280 - C31279) * C4743 +
             (C31281 - C31282 + C31283 - C31284) * C4748 +
             (C31285 - C31286 + C31287 - C31288) * C47471) *
                C47105 * C47422 +
            ((C31954 - C31953 + C31956 - C31955) * C4747 +
             (C31958 - C31957 + C31960 - C31959) * C4743 +
             (C32675 - C32676 + C32677 - C32678) * C4748 +
             (C32679 - C32680 + C32681 - C32682) * C47471) *
                C47105 * C47261) *
               C1079 +
           (((C31282 - C31281 + C31284 - C31283) * C4747 +
             (C31286 - C31285 + C31288 - C31287) * C4743 +
             (C32473 - C32474 + C32475 - C32476) * C4748 +
             (C32477 - C32478 + C32479 - C32480) * C47471) *
                C47105 * C47422 +
            ((C32676 - C32675 + C32678 - C32677) * C4747 +
             (C32680 - C32679 + C32682 - C32681) * C4743 +
             (C31090 * C1699 - C31092 * C1695 + C47473 * C5925 -
              C31093 * C5922) *
                 C4748 +
             (C31090 * C1704 - C31092 * C1700 + C47473 * C5928 -
              C31093 * C5926) *
                 C47471) *
                C47105 * C47261) *
               C47453) *
              C47139)) /
            (p * q * std::sqrt(p + q));
    d2ee[199] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C31090 * C122 - C31092 * C115 + C47473 * C491 - C31093 * C481) *
               C4747 +
           (C31090 * C136 - C31092 * C123 + C47473 * C511 - C31093 * C492) *
               C4743 +
           (C31090 * C304 - C31092 * C294 + C47473 * C936 - C31093 * C931) *
               C4748 +
           (C31090 * C324 - C31092 * C305 + C47473 * C946 - C31093 * C937) *
               C47471) *
              C47105 * C47174 * C47156 * C108 +
          ((C31096 - C31095 + C31098 - C31097) * C4747 +
           (C31100 - C31099 + C31102 - C31101) * C4743 +
           (C31273 - C31274 + C31275 - C31276) * C4748 +
           (C31277 - C31278 + C31279 - C31280) * C47471) *
              C47105 * C47174 * C47156 * C109 +
          ((C31104 - C31103 + C31106 - C31105) * C4747 +
           (C31108 - C31107 + C31110 - C31109) * C4743 +
           (C31289 - C31290 + C31291 - C31292) * C4748 +
           (C31293 - C31294 + C31295 - C31296) * C47471) *
              C47105 * C47174 * C47156 * C110 +
          ((C31112 - C31111 + C31114 - C31113) * C4747 +
           (C31116 - C31115 + C31118 - C31117) * C4743 +
           (C31613 - C31614 + C31615 - C31616) * C4748 +
           (C31617 - C31618 + C31619 - C31620) * C47471) *
              C47105 * C47174 * C47156 * C111 +
          ((C31120 - C31119 + C31122 - C31121) * C4747 +
           (C31124 - C31123 + C31126 - C31125) * C4743 +
           (C31090 * C320 - C31092 * C302 + C47473 * C944 - C31093 * C935) *
               C4748 +
           (C31090 * C332 - C31092 * C321 + C47473 * C950 - C31093 * C945) *
               C47471) *
              C47105 * C47174 * C47156 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C31090 * C122 - C31092 * C115 + C47473 * C491 - C31093 * C481) *
                C4747 +
            (C31090 * C136 - C31092 * C123 + C47473 * C511 - C31093 * C492) *
                C4743 +
            (C36849 - C36850 + C36851 - C36852) * C4748 +
            (C36853 - C36854 + C36855 - C36856) * C47471) *
               C47105 * C47174 * C47492 +
           ((C36850 - C36849 + C36852 - C36851) * C4747 +
            (C36854 - C36853 + C36856 - C36855) * C4743 +
            (C36857 - C36858 + C36859 - C36860) * C4748 +
            (C36861 - C36862 + C36863 - C36864) * C47471) *
               C47105 * C47174 * C47480 +
           ((C36858 - C36857 + C36860 - C36859) * C4747 +
            (C36862 - C36861 + C36864 - C36863) * C4743 +
            (C31090 * C1158 - C31092 * C1152 + C47473 * C1697 -
             C31093 * C1694) *
                C4748 +
            (C31090 * C1170 - C31092 * C1159 + C47473 * C1703 -
             C31093 * C1698) *
                C47471) *
               C47105 * C47174 * C47453) *
              C291 +
          (((C31096 - C31095 + C31098 - C31097) * C4747 +
            (C31100 - C31099 + C31102 - C31101) * C4743 +
            (C31273 - C31274 + C31275 - C31276) * C4748 +
            (C31277 - C31278 + C31279 - C31280) * C47471) *
               C47105 * C47174 * C47492 +
           ((C31274 - C31273 + C31276 - C31275) * C4747 +
            (C31278 - C31277 + C31280 - C31279) * C4743 +
            (C31281 - C31282 + C31283 - C31284) * C4748 +
            (C31285 - C31286 + C31287 - C31288) * C47471) *
               C47105 * C47174 * C47480 +
           ((C31282 - C31281 + C31284 - C31283) * C4747 +
            (C31286 - C31285 + C31288 - C31287) * C4743 +
            (C32473 - C32474 + C32475 - C32476) * C4748 +
            (C32477 - C32478 + C32479 - C32480) * C47471) *
               C47105 * C47174 * C47453) *
              C292 +
          (((C31104 - C31103 + C31106 - C31105) * C4747 +
            (C31108 - C31107 + C31110 - C31109) * C4743 +
            (C31289 - C31290 + C31291 - C31292) * C4748 +
            (C31293 - C31294 + C31295 - C31296) * C47471) *
               C47105 * C47174 * C47492 +
           ((C31290 - C31289 + C31292 - C31291) * C4747 +
            (C31294 - C31293 + C31296 - C31295) * C4743 +
            (C31297 - C31298 + C31299 - C31300) * C4748 +
            (C31301 - C31302 + C31303 - C31304) * C47471) *
               C47105 * C47174 * C47480 +
           ((C31298 - C31297 + C31300 - C31299) * C4747 +
            (C31302 - C31301 + C31304 - C31303) * C4743 +
            (C31090 * C1162 - C31092 * C1154 + C47473 * C1701 -
             C31093 * C1696) *
                C4748 +
            (C31090 * C1172 - C31092 * C1163 + C47473 * C1705 -
             C31093 * C1702) *
                C47471) *
               C47105 * C47174 * C47453) *
              C47447)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C31090 * C122 - C31092 * C115 + C47473 * C491 - C31093 * C481) *
                C4747 +
            (C31090 * C136 - C31092 * C123 + C47473 * C511 - C31093 * C492) *
                C4743 +
            (C36849 - C36850 + C36851 - C36852) * C4748 +
            (C36853 - C36854 + C36855 - C36856) * C47471) *
               C47105 * C47174 * C1078 +
           ((C36850 - C36849 + C36852 - C36851) * C4747 +
            (C36854 - C36853 + C36856 - C36855) * C4743 +
            (C36857 - C36858 + C36859 - C36860) * C4748 +
            (C36861 - C36862 + C36863 - C36864) * C47471) *
               C47105 * C47174 * C1079 +
           ((C36858 - C36857 + C36860 - C36859) * C4747 +
            (C36862 - C36861 + C36864 - C36863) * C4743 +
            (C31090 * C1158 - C31092 * C1152 + C47473 * C1697 -
             C31093 * C1694) *
                C4748 +
            (C31090 * C1170 - C31092 * C1159 + C47473 * C1703 -
             C31093 * C1698) *
                C47471) *
               C47105 * C47174 * C47453) *
              C47489 +
          (((C31096 - C31095 + C31098 - C31097) * C4747 +
            (C31100 - C31099 + C31102 - C31101) * C4743 +
            (C31273 - C31274 + C31275 - C31276) * C4748 +
            (C31277 - C31278 + C31279 - C31280) * C47471) *
               C47105 * C47174 * C1078 +
           ((C31274 - C31273 + C31276 - C31275) * C4747 +
            (C31278 - C31277 + C31280 - C31279) * C4743 +
            (C31281 - C31282 + C31283 - C31284) * C4748 +
            (C31285 - C31286 + C31287 - C31288) * C47471) *
               C47105 * C47174 * C1079 +
           ((C31282 - C31281 + C31284 - C31283) * C4747 +
            (C31286 - C31285 + C31288 - C31287) * C4743 +
            (C32473 - C32474 + C32475 - C32476) * C4748 +
            (C32477 - C32478 + C32479 - C32480) * C47471) *
               C47105 * C47174 * C47453) *
              C47476 +
          (((C31104 - C31103 + C31106 - C31105) * C4747 +
            (C31108 - C31107 + C31110 - C31109) * C4743 +
            (C31289 - C31290 + C31291 - C31292) * C4748 +
            (C31293 - C31294 + C31295 - C31296) * C47471) *
               C47105 * C47174 * C1078 +
           ((C31290 - C31289 + C31292 - C31291) * C4747 +
            (C31294 - C31293 + C31296 - C31295) * C4743 +
            (C31297 - C31298 + C31299 - C31300) * C4748 +
            (C31301 - C31302 + C31303 - C31304) * C47471) *
               C47105 * C47174 * C1079 +
           ((C31298 - C31297 + C31300 - C31299) * C4747 +
            (C31302 - C31301 + C31304 - C31303) * C4743 +
            (C31090 * C1162 - C31092 * C1154 + C47473 * C1701 -
             C31093 * C1696) *
                C4748 +
            (C31090 * C1172 - C31092 * C1163 + C47473 * C1705 -
             C31093 * C1702) *
                C47471) *
               C47105 * C47174 * C47453) *
              C47447)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C31090 * C122 - C31092 * C115 + C47473 * C491 - C31093 * C481) *
               C4747 +
           (C31090 * C136 - C31092 * C123 + C47473 * C511 - C31093 * C492) *
               C4743 +
           (C36849 - C36850 + C36851 - C36852) * C4748 +
           (C36853 - C36854 + C36855 - C36856) * C47471) *
              C47105 * C47174 * C1146 +
          ((C36850 - C36849 + C36852 - C36851) * C4747 +
           (C36854 - C36853 + C36856 - C36855) * C4743 +
           (C36857 - C36858 + C36859 - C36860) * C4748 +
           (C36861 - C36862 + C36863 - C36864) * C47471) *
              C47105 * C47174 * C1147 +
          ((C36858 - C36857 + C36860 - C36859) * C4747 +
           (C36862 - C36861 + C36864 - C36863) * C4743 +
           (C37701 - C37702 + C37703 - C37704) * C4748 +
           (C37705 - C37706 + C37707 - C37708) * C47471) *
              C47105 * C47174 * C1148 +
          ((C37702 - C37701 + C37704 - C37703) * C4747 +
           (C37706 - C37705 + C37708 - C37707) * C4743 +
           (C37709 - C37710 + C37711 - C37712) * C4748 +
           (C37713 - C37714 + C37715 - C37716) * C47471) *
              C47105 * C47174 * C1149 +
          ((C37710 - C37709 + C37712 - C37711) * C4747 +
           (C37714 - C37713 + C37716 - C37715) * C4743 +
           (C31090 * C5757 - C31092 * C5755 + C47473 * C22599 -
            C31093 * C22598) *
               C4748 +
           (C31090 * C5761 - C31092 * C5758 + C47473 * C22601 -
            C31093 * C22600) *
               C47471) *
              C47105 * C47174 * C1150) *
         C47128) /
            (p * q * std::sqrt(p + q));
    d2ee[200] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((C42210 * C122 - C42213 * C115 + C42211 * C491 -
                      C42214 * C481 + C42212 * C497 - C42215 * C484) *
                         C114 +
                     (C42210 * C136 - C42213 * C123 + C42211 * C511 -
                      C42214 * C492 + C42212 * C514 - C42215 * C498) *
                         C47359) *
                        C47105 * C47174 * C47215 +
                    ((C42213 * C294 - C42210 * C304 + C42214 * C931 -
                      C42211 * C936 + C42215 * C1286 - C42212 * C1295) *
                         C114 +
                     (C42213 * C305 - C42210 * C324 + C42214 * C937 -
                      C42211 * C946 + C42215 * C1296 - C42212 * C1313) *
                         C47359) *
                        C47105 * C47174 * C47222 +
                    ((C42210 * C310 - C42213 * C297 + C42211 * C1301 -
                      C42214 * C1289 + C42212 * C1307 - C42215 * C1292) *
                         C114 +
                     (C42210 * C327 - C42213 * C311 + C42211 * C1316 -
                      C42214 * C1302 + C42212 * C1319 - C42215 * C1308) *
                         C47359) *
                        C47105 * C47174 * C2868) *
                       C47133 +
                   (((C42213 * C116 - C42210 * C124 + C42214 * C482 -
                      C42211 * C493 + C42215 * C485 - C42212 * C499) *
                         C114 +
                     (C42213 * C125 - C42210 * C137 + C42214 * C494 -
                      C42211 * C512 + C42215 * C500 - C42212 * C515) *
                         C47359) *
                        C47105 * C47174 * C47215 +
                    ((C42210 * C306 - C42213 * C295 + C42211 * C938 -
                      C42214 * C932 + C42212 * C1297 - C42215 * C1287) *
                         C114 +
                     (C42210 * C325 - C42213 * C307 + C42211 * C947 -
                      C42214 * C939 + C42212 * C1314 - C42215 * C1298) *
                         C47359) *
                        C47105 * C47174 * C47222 +
                    ((C42213 * C298 - C42210 * C312 + C42214 * C1290 -
                      C42211 * C1303 + C42215 * C1293 - C42212 * C1309) *
                         C114 +
                     (C42213 * C313 - C42210 * C328 + C42214 * C1304 -
                      C42211 * C1317 + C42215 * C1310 - C42212 * C1320) *
                         C47359) *
                        C47105 * C47174 * C2868) *
                       C47142 +
                   (((C42210 * C126 - C42213 * C117 + C42211 * C495 -
                      C42214 * C483 + C42212 * C501 - C42215 * C486) *
                         C114 +
                     (C42210 * C138 - C42213 * C127 + C42211 * C513 -
                      C42214 * C496 + C42212 * C516 - C42215 * C502) *
                         C47359) *
                        C47105 * C47174 * C47215 +
                    ((C42213 * C296 - C42210 * C308 + C42214 * C933 -
                      C42211 * C940 + C42215 * C1288 - C42212 * C1299) *
                         C114 +
                     (C42213 * C309 - C42210 * C326 + C42214 * C941 -
                      C42211 * C948 + C42215 * C1300 - C42212 * C1315) *
                         C47359) *
                        C47105 * C47174 * C47222 +
                    ((C42210 * C314 - C42213 * C299 + C42211 * C1305 -
                      C42214 * C1291 + C42212 * C1311 - C42215 * C1294) *
                         C114 +
                     (C42210 * C329 - C42213 * C315 + C42211 * C1318 -
                      C42214 * C1306 + C42212 * C1321 - C42215 * C1312) *
                         C47359) *
                        C47105 * C47174 * C2868) *
                       C2871)) /
                 (p * q * std::sqrt(p + q));
    d2ee[201] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((((C42210 * C122 - C42213 * C115 + C42211 * C491 -
                       C42214 * C481 + C42212 * C497 - C42215 * C484) *
                          C114 +
                      (C42210 * C136 - C42213 * C123 + C42211 * C511 -
                       C42214 * C492 + C42212 * C514 - C42215 * C498) *
                          C47359) *
                         C47105 * C47422 +
                     ((C42213 * C481 - C42210 * C491 + C42214 * C484 -
                       C42211 * C497 + C42215 * C1996 - C42212 * C2002) *
                          C114 +
                      (C42213 * C492 - C42210 * C511 + C42214 * C498 -
                       C42211 * C514 + C42215 * C2003 - C42212 * C2014) *
                          C47359) *
                         C47105 * C47261) *
                        C47215 +
                    (((C42213 * C294 - C42210 * C304 + C42214 * C931 -
                       C42211 * C936 + C42215 * C1286 - C42212 * C1295) *
                          C114 +
                      (C42213 * C305 - C42210 * C324 + C42214 * C937 -
                       C42211 * C946 + C42215 * C1296 - C42212 * C1313) *
                          C47359) *
                         C47105 * C47422 +
                     ((C42210 * C936 - C42213 * C931 + C42211 * C1295 -
                       C42214 * C1286 + C42212 * C2393 - C42215 * C2390) *
                          C114 +
                      (C42210 * C946 - C42213 * C937 + C42211 * C1313 -
                       C42214 * C1296 + C42212 * C2399 - C42215 * C2394) *
                          C47359) *
                         C47105 * C47261) *
                        C47222 +
                    (((C42210 * C310 - C42213 * C297 + C42211 * C1301 -
                       C42214 * C1289 + C42212 * C1307 - C42215 * C1292) *
                          C114 +
                      (C42210 * C327 - C42213 * C311 + C42211 * C1316 -
                       C42214 * C1302 + C42212 * C1319 - C42215 * C1308) *
                          C47359) *
                         C47105 * C47422 +
                     ((C42213 * C1289 - C42210 * C1301 + C42214 * C1292 -
                       C42211 * C1307 + C42215 * C7267 - C42212 * C7269) *
                          C114 +
                      (C42213 * C1302 - C42210 * C1316 + C42214 * C1308 -
                       C42211 * C1319 + C42215 * C7270 - C42212 * C7273) *
                          C47359) *
                         C47105 * C47261) *
                        C2868) *
                       C2608 +
                   ((((C42213 * C116 - C42210 * C124 + C42214 * C482 -
                       C42211 * C493 + C42215 * C485 - C42212 * C499) *
                          C114 +
                      (C42213 * C125 - C42210 * C137 + C42214 * C494 -
                       C42211 * C512 + C42215 * C500 - C42212 * C515) *
                          C47359) *
                         C47105 * C47422 +
                     ((C42210 * C493 - C42213 * C482 + C42211 * C499 -
                       C42214 * C485 + C42212 * C2004 - C42215 * C1997) *
                          C114 +
                      (C42210 * C512 - C42213 * C494 + C42211 * C515 -
                       C42214 * C500 + C42212 * C2015 - C42215 * C2005) *
                          C47359) *
                         C47105 * C47261) *
                        C47215 +
                    (((C42210 * C306 - C42213 * C295 + C42211 * C938 -
                       C42214 * C932 + C42212 * C1297 - C42215 * C1287) *
                          C114 +
                      (C42210 * C325 - C42213 * C307 + C42211 * C947 -
                       C42214 * C939 + C42212 * C1314 - C42215 * C1298) *
                          C47359) *
                         C47105 * C47422 +
                     ((C42213 * C932 - C42210 * C938 + C42214 * C1287 -
                       C42211 * C1297 + C42215 * C2391 - C42212 * C2395) *
                          C114 +
                      (C42213 * C939 - C42210 * C947 + C42214 * C1298 -
                       C42211 * C1314 + C42215 * C2396 - C42212 * C2400) *
                          C47359) *
                         C47105 * C47261) *
                        C47222 +
                    (((C42213 * C298 - C42210 * C312 + C42214 * C1290 -
                       C42211 * C1303 + C42215 * C1293 - C42212 * C1309) *
                          C114 +
                      (C42213 * C313 - C42210 * C328 + C42214 * C1304 -
                       C42211 * C1317 + C42215 * C1310 - C42212 * C1320) *
                          C47359) *
                         C47105 * C47422 +
                     ((C42210 * C1303 - C42213 * C1290 + C42211 * C1309 -
                       C42214 * C1293 + C42212 * C7271 - C42215 * C7268) *
                          C114 +
                      (C42210 * C1317 - C42213 * C1304 + C42211 * C1320 -
                       C42214 * C1310 + C42212 * C7274 - C42215 * C7272) *
                          C47359) *
                         C47105 * C47261) *
                        C2868) *
                       C47139)) /
                 (p * q * std::sqrt(p + q));
    d2ee[202] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C42210 * C122 - C42213 * C115 + C42211 * C491 -
                      C42214 * C481 + C42212 * C497 - C42215 * C484) *
                         C114 +
                     (C42210 * C136 - C42213 * C123 + C42211 * C511 -
                      C42214 * C492 + C42212 * C514 - C42215 * C498) *
                         C47359) *
                        C47105 * C47174 * C47499 +
                    ((C42213 * C294 - C42210 * C304 + C42214 * C931 -
                      C42211 * C936 + C42215 * C1286 - C42212 * C1295) *
                         C114 +
                     (C42213 * C305 - C42210 * C324 + C42214 * C937 -
                      C42211 * C946 + C42215 * C1296 - C42212 * C1313) *
                         C47359) *
                        C47105 * C47174 * C47495 +
                    ((C42210 * C310 - C42213 * C297 + C42211 * C1301 -
                      C42214 * C1289 + C42212 * C1307 - C42215 * C1292) *
                         C114 +
                     (C42210 * C327 - C42213 * C311 + C42211 * C1316 -
                      C42214 * C1302 + C42212 * C1319 - C42215 * C1308) *
                         C47359) *
                        C47105 * C47174 * C47485 +
                    ((C42213 * C1152 - C42210 * C1158 + C42214 * C1694 -
                      C42211 * C1697 + C42215 * C5921 - C42212 * C5923) *
                         C114 +
                     (C42213 * C1159 - C42210 * C1170 + C42214 * C1698 -
                      C42211 * C1703 + C42215 * C5924 - C42212 * C5927) *
                         C47359) *
                        C47105 * C47174 * C47463) *
                       C2608 +
                   (((C42213 * C116 - C42210 * C124 + C42214 * C482 -
                      C42211 * C493 + C42215 * C485 - C42212 * C499) *
                         C114 +
                     (C42213 * C125 - C42210 * C137 + C42214 * C494 -
                      C42211 * C512 + C42215 * C500 - C42212 * C515) *
                         C47359) *
                        C47105 * C47174 * C47499 +
                    ((C42210 * C306 - C42213 * C295 + C42211 * C938 -
                      C42214 * C932 + C42212 * C1297 - C42215 * C1287) *
                         C114 +
                     (C42210 * C325 - C42213 * C307 + C42211 * C947 -
                      C42214 * C939 + C42212 * C1314 - C42215 * C1298) *
                         C47359) *
                        C47105 * C47174 * C47495 +
                    ((C42213 * C298 - C42210 * C312 + C42214 * C1290 -
                      C42211 * C1303 + C42215 * C1293 - C42212 * C1309) *
                         C114 +
                     (C42213 * C313 - C42210 * C328 + C42214 * C1304 -
                      C42211 * C1317 + C42215 * C1310 - C42212 * C1320) *
                         C47359) *
                        C47105 * C47174 * C47485 +
                    ((C42210 * C1160 - C42213 * C1153 + C42211 * C1699 -
                      C42214 * C1695 + C42212 * C5925 - C42215 * C5922) *
                         C114 +
                     (C42210 * C1171 - C42213 * C1161 + C42211 * C1704 -
                      C42214 * C1700 + C42212 * C5928 - C42215 * C5926) *
                         C47359) *
                        C47105 * C47174 * C47463) *
                       C47139)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C42210 * C122 - C42213 * C115 + C42211 * C491 -
                      C42214 * C481 + C42212 * C497 - C42215 * C484) *
                         C114 +
                     (C42210 * C136 - C42213 * C123 + C42211 * C511 -
                      C42214 * C492 + C42212 * C514 - C42215 * C498) *
                         C47359) *
                        C47105 * C47174 * C2500 +
                    ((C42213 * C294 - C42210 * C304 + C42214 * C931 -
                      C42211 * C936 + C42215 * C1286 - C42212 * C1295) *
                         C114 +
                     (C42213 * C305 - C42210 * C324 + C42214 * C937 -
                      C42211 * C946 + C42215 * C1296 - C42212 * C1313) *
                         C47359) *
                        C47105 * C47174 * C47219) *
                       C47498 +
                   (((C42213 * C116 - C42210 * C124 + C42214 * C482 -
                      C42211 * C493 + C42215 * C485 - C42212 * C499) *
                         C114 +
                     (C42213 * C125 - C42210 * C137 + C42214 * C494 -
                      C42211 * C512 + C42215 * C500 - C42212 * C515) *
                         C47359) *
                        C47105 * C47174 * C2500 +
                    ((C42210 * C306 - C42213 * C295 + C42211 * C938 -
                      C42214 * C932 + C42212 * C1297 - C42215 * C1287) *
                         C114 +
                     (C42210 * C325 - C42213 * C307 + C42211 * C947 -
                      C42214 * C939 + C42212 * C1314 - C42215 * C1298) *
                         C47359) *
                        C47105 * C47174 * C47219) *
                       C47491 +
                   (((C42210 * C126 - C42213 * C117 + C42211 * C495 -
                      C42214 * C483 + C42212 * C501 - C42215 * C486) *
                         C114 +
                     (C42210 * C138 - C42213 * C127 + C42211 * C513 -
                      C42214 * C496 + C42212 * C516 - C42215 * C502) *
                         C47359) *
                        C47105 * C47174 * C2500 +
                    ((C42213 * C296 - C42210 * C308 + C42214 * C933 -
                      C42211 * C940 + C42215 * C1288 - C42212 * C1299) *
                         C114 +
                     (C42213 * C309 - C42210 * C326 + C42214 * C941 -
                      C42211 * C948 + C42215 * C1300 - C42212 * C1315) *
                         C47359) *
                        C47105 * C47174 * C47219) *
                       C47478 +
                   (((C42213 * C118 - C42210 * C128 + C42214 * C487 -
                      C42211 * C503 + C42215 * C488 - C42212 * C505) *
                         C114 +
                     (C42213 * C129 - C42210 * C139 + C42214 * C504 -
                      C42211 * C517 + C42215 * C506 - C42212 * C518) *
                         C47359) *
                        C47105 * C47174 * C2500 +
                    ((C42210 * C316 - C42213 * C300 + C42211 * C942 -
                      C42214 * C934 + C42212 * C2167 - C42215 * C2166) *
                         C114 +
                     (C42210 * C330 - C42213 * C317 + C42211 * C949 -
                      C42214 * C943 + C42212 * C2169 - C42215 * C2168) *
                         C47359) *
                        C47105 * C47174 * C47219) *
                       C47457)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  (((((C42210 * C122 - C42213 * C115 + C42211 * C491 -
                       C42214 * C481 + C42212 * C497 - C42215 * C484) *
                          C114 +
                      (C42210 * C136 - C42213 * C123 + C42211 * C511 -
                       C42214 * C492 + C42212 * C514 - C42215 * C498) *
                          C47359) *
                         C47105 * C47493 +
                     ((C42213 * C481 - C42210 * C491 + C42214 * C484 -
                       C42211 * C497 + C42215 * C1996 - C42212 * C2002) *
                          C114 +
                      (C42213 * C492 - C42210 * C511 + C42214 * C498 -
                       C42211 * C514 + C42215 * C2003 - C42212 * C2014) *
                          C47359) *
                         C47105 * C47482 +
                     ((C42210 * C497 - C42213 * C484 + C42211 * C2002 -
                       C42214 * C1996 + C42212 * C2008 - C42215 * C1999) *
                          C114 +
                      (C42210 * C514 - C42213 * C498 + C42211 * C2014 -
                       C42214 * C2003 + C42212 * C2017 - C42215 * C2009) *
                          C47359) *
                         C47105 * C47456) *
                        C2500 +
                    (((C42213 * C294 - C42210 * C304 + C42214 * C931 -
                       C42211 * C936 + C42215 * C1286 - C42212 * C1295) *
                          C114 +
                      (C42213 * C305 - C42210 * C324 + C42214 * C937 -
                       C42211 * C946 + C42215 * C1296 - C42212 * C1313) *
                          C47359) *
                         C47105 * C47493 +
                     ((C42210 * C936 - C42213 * C931 + C42211 * C1295 -
                       C42214 * C1286 + C42212 * C2393 - C42215 * C2390) *
                          C114 +
                      (C42210 * C946 - C42213 * C937 + C42211 * C1313 -
                       C42214 * C1296 + C42212 * C2399 - C42215 * C2394) *
                          C47359) *
                         C47105 * C47482 +
                     ((C42213 * C1286 - C42210 * C1295 + C42214 * C2390 -
                       C42211 * C2393 + C42215 * C6797 - C42212 * C6799) *
                          C114 +
                      (C42213 * C1296 - C42210 * C1313 + C42214 * C2394 -
                       C42211 * C2399 + C42215 * C6800 - C42212 * C6803) *
                          C47359) *
                         C47105 * C47456) *
                        C47219) *
                       C2608 +
                   ((((C42213 * C116 - C42210 * C124 + C42214 * C482 -
                       C42211 * C493 + C42215 * C485 - C42212 * C499) *
                          C114 +
                      (C42213 * C125 - C42210 * C137 + C42214 * C494 -
                       C42211 * C512 + C42215 * C500 - C42212 * C515) *
                          C47359) *
                         C47105 * C47493 +
                     ((C42210 * C493 - C42213 * C482 + C42211 * C499 -
                       C42214 * C485 + C42212 * C2004 - C42215 * C1997) *
                          C114 +
                      (C42210 * C512 - C42213 * C494 + C42211 * C515 -
                       C42214 * C500 + C42212 * C2015 - C42215 * C2005) *
                          C47359) *
                         C47105 * C47482 +
                     ((C42213 * C485 - C42210 * C499 + C42214 * C1997 -
                       C42211 * C2004 + C42215 * C2000 - C42212 * C2010) *
                          C114 +
                      (C42213 * C500 - C42210 * C515 + C42214 * C2005 -
                       C42211 * C2015 + C42215 * C2011 - C42212 * C2018) *
                          C47359) *
                         C47105 * C47456) *
                        C2500 +
                    (((C42210 * C306 - C42213 * C295 + C42211 * C938 -
                       C42214 * C932 + C42212 * C1297 - C42215 * C1287) *
                          C114 +
                      (C42210 * C325 - C42213 * C307 + C42211 * C947 -
                       C42214 * C939 + C42212 * C1314 - C42215 * C1298) *
                          C47359) *
                         C47105 * C47493 +
                     ((C42213 * C932 - C42210 * C938 + C42214 * C1287 -
                       C42211 * C1297 + C42215 * C2391 - C42212 * C2395) *
                          C114 +
                      (C42213 * C939 - C42210 * C947 + C42214 * C1298 -
                       C42211 * C1314 + C42215 * C2396 - C42212 * C2400) *
                          C47359) *
                         C47105 * C47482 +
                     ((C42210 * C1297 - C42213 * C1287 + C42211 * C2395 -
                       C42214 * C2391 + C42212 * C6801 - C42215 * C6798) *
                          C114 +
                      (C42210 * C1314 - C42213 * C1298 + C42211 * C2400 -
                       C42214 * C2396 + C42212 * C6804 - C42215 * C6802) *
                          C47359) *
                         C47105 * C47456) *
                        C47219) *
                       C47139)) /
                     (p * q * std::sqrt(p + q));
    d2ee[203] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((((C42210 * C122 - C42213 * C115 + C42211 * C491 -
                       C42214 * C481 + C42212 * C497 - C42215 * C484) *
                          C114 +
                      (C42210 * C136 - C42213 * C123 + C42211 * C511 -
                       C42214 * C492 + C42212 * C514 - C42215 * C498) *
                          C47359) *
                         C47105 * C47422 +
                     ((C42213 * C481 - C42210 * C491 + C42214 * C484 -
                       C42211 * C497 + C42215 * C1996 - C42212 * C2002) *
                          C114 +
                      (C42213 * C492 - C42210 * C511 + C42214 * C498 -
                       C42211 * C514 + C42215 * C2003 - C42212 * C2014) *
                          C47359) *
                         C47105 * C47261) *
                        C2500 +
                    (((C42213 * C294 - C42210 * C304 + C42214 * C931 -
                       C42211 * C936 + C42215 * C1286 - C42212 * C1295) *
                          C114 +
                      (C42213 * C305 - C42210 * C324 + C42214 * C937 -
                       C42211 * C946 + C42215 * C1296 - C42212 * C1313) *
                          C47359) *
                         C47105 * C47422 +
                     ((C42210 * C936 - C42213 * C931 + C42211 * C1295 -
                       C42214 * C1286 + C42212 * C2393 - C42215 * C2390) *
                          C114 +
                      (C42210 * C946 - C42213 * C937 + C42211 * C1313 -
                       C42214 * C1296 + C42212 * C2399 - C42215 * C2394) *
                          C47359) *
                         C47105 * C47261) *
                        C47219) *
                       C47133 +
                   ((((C42213 * C116 - C42210 * C124 + C42214 * C482 -
                       C42211 * C493 + C42215 * C485 - C42212 * C499) *
                          C114 +
                      (C42213 * C125 - C42210 * C137 + C42214 * C494 -
                       C42211 * C512 + C42215 * C500 - C42212 * C515) *
                          C47359) *
                         C47105 * C47422 +
                     ((C42210 * C493 - C42213 * C482 + C42211 * C499 -
                       C42214 * C485 + C42212 * C2004 - C42215 * C1997) *
                          C114 +
                      (C42210 * C512 - C42213 * C494 + C42211 * C515 -
                       C42214 * C500 + C42212 * C2015 - C42215 * C2005) *
                          C47359) *
                         C47105 * C47261) *
                        C2500 +
                    (((C42210 * C306 - C42213 * C295 + C42211 * C938 -
                       C42214 * C932 + C42212 * C1297 - C42215 * C1287) *
                          C114 +
                      (C42210 * C325 - C42213 * C307 + C42211 * C947 -
                       C42214 * C939 + C42212 * C1314 - C42215 * C1298) *
                          C47359) *
                         C47105 * C47422 +
                     ((C42213 * C932 - C42210 * C938 + C42214 * C1287 -
                       C42211 * C1297 + C42215 * C2391 - C42212 * C2395) *
                          C114 +
                      (C42213 * C939 - C42210 * C947 + C42214 * C1298 -
                       C42211 * C1314 + C42215 * C2396 - C42212 * C2400) *
                          C47359) *
                         C47105 * C47261) *
                        C47219) *
                       C47142 +
                   ((((C42210 * C126 - C42213 * C117 + C42211 * C495 -
                       C42214 * C483 + C42212 * C501 - C42215 * C486) *
                          C114 +
                      (C42210 * C138 - C42213 * C127 + C42211 * C513 -
                       C42214 * C496 + C42212 * C516 - C42215 * C502) *
                          C47359) *
                         C47105 * C47422 +
                     ((C42213 * C483 - C42210 * C495 + C42214 * C486 -
                       C42211 * C501 + C42215 * C1998 - C42212 * C2006) *
                          C114 +
                      (C42213 * C496 - C42210 * C513 + C42214 * C502 -
                       C42211 * C516 + C42215 * C2007 - C42212 * C2016) *
                          C47359) *
                         C47105 * C47261) *
                        C2500 +
                    (((C42213 * C296 - C42210 * C308 + C42214 * C933 -
                       C42211 * C940 + C42215 * C1288 - C42212 * C1299) *
                          C114 +
                      (C42213 * C309 - C42210 * C326 + C42214 * C941 -
                       C42211 * C948 + C42215 * C1300 - C42212 * C1315) *
                          C47359) *
                         C47105 * C47422 +
                     ((C42210 * C940 - C42213 * C933 + C42211 * C1299 -
                       C42214 * C1288 + C42212 * C2397 - C42215 * C2392) *
                          C114 +
                      (C42210 * C948 - C42213 * C941 + C42211 * C1315 -
                       C42214 * C1300 + C42212 * C2401 - C42215 * C2398) *
                          C47359) *
                         C47105 * C47261) *
                        C47219) *
                       C2871)) /
                 (p * q * std::sqrt(p + q));
    d2ee[204] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((C42210 * C122 - C42213 * C115 + C42211 * C491 -
                      C42214 * C481 + C42212 * C497 - C42215 * C484) *
                         C114 +
                     (C42210 * C136 - C42213 * C123 + C42211 * C511 -
                      C42214 * C492 + C42212 * C514 - C42215 * C498) *
                         C47359) *
                        C47105 * C47174 * C2500 +
                    ((C42213 * C294 - C42210 * C304 + C42214 * C931 -
                      C42211 * C936 + C42215 * C1286 - C42212 * C1295) *
                         C114 +
                     (C42213 * C305 - C42210 * C324 + C42214 * C937 -
                      C42211 * C946 + C42215 * C1296 - C42212 * C1313) *
                         C47359) *
                        C47105 * C47174 * C47219) *
                       C47498 +
                   (((C42213 * C116 - C42210 * C124 + C42214 * C482 -
                      C42211 * C493 + C42215 * C485 - C42212 * C499) *
                         C114 +
                     (C42213 * C125 - C42210 * C137 + C42214 * C494 -
                      C42211 * C512 + C42215 * C500 - C42212 * C515) *
                         C47359) *
                        C47105 * C47174 * C2500 +
                    ((C42210 * C306 - C42213 * C295 + C42211 * C938 -
                      C42214 * C932 + C42212 * C1297 - C42215 * C1287) *
                         C114 +
                     (C42210 * C325 - C42213 * C307 + C42211 * C947 -
                      C42214 * C939 + C42212 * C1314 - C42215 * C1298) *
                         C47359) *
                        C47105 * C47174 * C47219) *
                       C47491 +
                   (((C42210 * C126 - C42213 * C117 + C42211 * C495 -
                      C42214 * C483 + C42212 * C501 - C42215 * C486) *
                         C114 +
                     (C42210 * C138 - C42213 * C127 + C42211 * C513 -
                      C42214 * C496 + C42212 * C516 - C42215 * C502) *
                         C47359) *
                        C47105 * C47174 * C2500 +
                    ((C42213 * C296 - C42210 * C308 + C42214 * C933 -
                      C42211 * C940 + C42215 * C1288 - C42212 * C1299) *
                         C114 +
                     (C42213 * C309 - C42210 * C326 + C42214 * C941 -
                      C42211 * C948 + C42215 * C1300 - C42212 * C1315) *
                         C47359) *
                        C47105 * C47174 * C47219) *
                       C47478 +
                   (((C42213 * C118 - C42210 * C128 + C42214 * C487 -
                      C42211 * C503 + C42215 * C488 - C42212 * C505) *
                         C114 +
                     (C42213 * C129 - C42210 * C139 + C42214 * C504 -
                      C42211 * C517 + C42215 * C506 - C42212 * C518) *
                         C47359) *
                        C47105 * C47174 * C2500 +
                    ((C42210 * C316 - C42213 * C300 + C42211 * C942 -
                      C42214 * C934 + C42212 * C2167 - C42215 * C2166) *
                         C114 +
                     (C42210 * C330 - C42213 * C317 + C42211 * C949 -
                      C42214 * C943 + C42212 * C2169 - C42215 * C2168) *
                         C47359) *
                        C47105 * C47174 * C47219) *
                       C47457)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((C42210 * C122 - C42213 * C115 + C42211 * C491 -
                      C42214 * C481 + C42212 * C497 - C42215 * C484) *
                         C114 +
                     (C42210 * C136 - C42213 * C123 + C42211 * C511 -
                      C42214 * C492 + C42212 * C514 - C42215 * C498) *
                         C47359) *
                        C47105 * C47174 * C47499 +
                    ((C42213 * C294 - C42210 * C304 + C42214 * C931 -
                      C42211 * C936 + C42215 * C1286 - C42212 * C1295) *
                         C114 +
                     (C42213 * C305 - C42210 * C324 + C42214 * C937 -
                      C42211 * C946 + C42215 * C1296 - C42212 * C1313) *
                         C47359) *
                        C47105 * C47174 * C47495 +
                    ((C42210 * C310 - C42213 * C297 + C42211 * C1301 -
                      C42214 * C1289 + C42212 * C1307 - C42215 * C1292) *
                         C114 +
                     (C42210 * C327 - C42213 * C311 + C42211 * C1316 -
                      C42214 * C1302 + C42212 * C1319 - C42215 * C1308) *
                         C47359) *
                        C47105 * C47174 * C47485 +
                    ((C42213 * C1152 - C42210 * C1158 + C42214 * C1694 -
                      C42211 * C1697 + C42215 * C5921 - C42212 * C5923) *
                         C114 +
                     (C42213 * C1159 - C42210 * C1170 + C42214 * C1698 -
                      C42211 * C1703 + C42215 * C5924 - C42212 * C5927) *
                         C47359) *
                        C47105 * C47174 * C47463) *
                       C2608 +
                   (((C42213 * C116 - C42210 * C124 + C42214 * C482 -
                      C42211 * C493 + C42215 * C485 - C42212 * C499) *
                         C114 +
                     (C42213 * C125 - C42210 * C137 + C42214 * C494 -
                      C42211 * C512 + C42215 * C500 - C42212 * C515) *
                         C47359) *
                        C47105 * C47174 * C47499 +
                    ((C42210 * C306 - C42213 * C295 + C42211 * C938 -
                      C42214 * C932 + C42212 * C1297 - C42215 * C1287) *
                         C114 +
                     (C42210 * C325 - C42213 * C307 + C42211 * C947 -
                      C42214 * C939 + C42212 * C1314 - C42215 * C1298) *
                         C47359) *
                        C47105 * C47174 * C47495 +
                    ((C42213 * C298 - C42210 * C312 + C42214 * C1290 -
                      C42211 * C1303 + C42215 * C1293 - C42212 * C1309) *
                         C114 +
                     (C42213 * C313 - C42210 * C328 + C42214 * C1304 -
                      C42211 * C1317 + C42215 * C1310 - C42212 * C1320) *
                         C47359) *
                        C47105 * C47174 * C47485 +
                    ((C42210 * C1160 - C42213 * C1153 + C42211 * C1699 -
                      C42214 * C1695 + C42212 * C5925 - C42215 * C5922) *
                         C114 +
                     (C42210 * C1171 - C42213 * C1161 + C42211 * C1704 -
                      C42214 * C1700 + C42212 * C5928 - C42215 * C5926) *
                         C47359) *
                        C47105 * C47174 * C47463) *
                       C47139)) /
                     (p * q * std::sqrt(p + q));
    d2ee[205] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((((C42210 * C122 - C42213 * C115 + C42211 * C491 -
                       C42214 * C481 + C42212 * C497 - C42215 * C484) *
                          C114 +
                      (C42210 * C136 - C42213 * C123 + C42211 * C511 -
                       C42214 * C492 + C42212 * C514 - C42215 * C498) *
                          C47359) *
                         C47105 * C3262 +
                     ((C42213 * C481 - C42210 * C491 + C42214 * C484 -
                       C42211 * C497 + C42215 * C1996 - C42212 * C2002) *
                          C114 +
                      (C42213 * C492 - C42210 * C511 + C42214 * C498 -
                       C42211 * C514 + C42215 * C2003 - C42212 * C2014) *
                          C47359) *
                         C47105 * C47261) *
                        C47215 +
                    (((C42213 * C294 - C42210 * C304 + C42214 * C931 -
                       C42211 * C936 + C42215 * C1286 - C42212 * C1295) *
                          C114 +
                      (C42213 * C305 - C42210 * C324 + C42214 * C937 -
                       C42211 * C946 + C42215 * C1296 - C42212 * C1313) *
                          C47359) *
                         C47105 * C3262 +
                     ((C42210 * C936 - C42213 * C931 + C42211 * C1295 -
                       C42214 * C1286 + C42212 * C2393 - C42215 * C2390) *
                          C114 +
                      (C42210 * C946 - C42213 * C937 + C42211 * C1313 -
                       C42214 * C1296 + C42212 * C2399 - C42215 * C2394) *
                          C47359) *
                         C47105 * C47261) *
                        C47222 +
                    (((C42210 * C310 - C42213 * C297 + C42211 * C1301 -
                       C42214 * C1289 + C42212 * C1307 - C42215 * C1292) *
                          C114 +
                      (C42210 * C327 - C42213 * C311 + C42211 * C1316 -
                       C42214 * C1302 + C42212 * C1319 - C42215 * C1308) *
                          C47359) *
                         C47105 * C3262 +
                     ((C42213 * C1289 - C42210 * C1301 + C42214 * C1292 -
                       C42211 * C1307 + C42215 * C7267 - C42212 * C7269) *
                          C114 +
                      (C42213 * C1302 - C42210 * C1316 + C42214 * C1308 -
                       C42211 * C1319 + C42215 * C7270 - C42212 * C7273) *
                          C47359) *
                         C47105 * C47261) *
                        C2868) *
                       C47407 +
                   ((((C42213 * C116 - C42210 * C124 + C42214 * C482 -
                       C42211 * C493 + C42215 * C485 - C42212 * C499) *
                          C114 +
                      (C42213 * C125 - C42210 * C137 + C42214 * C494 -
                       C42211 * C512 + C42215 * C500 - C42212 * C515) *
                          C47359) *
                         C47105 * C3262 +
                     ((C42210 * C493 - C42213 * C482 + C42211 * C499 -
                       C42214 * C485 + C42212 * C2004 - C42215 * C1997) *
                          C114 +
                      (C42210 * C512 - C42213 * C494 + C42211 * C515 -
                       C42214 * C500 + C42212 * C2015 - C42215 * C2005) *
                          C47359) *
                         C47105 * C47261) *
                        C47215 +
                    (((C42210 * C306 - C42213 * C295 + C42211 * C938 -
                       C42214 * C932 + C42212 * C1297 - C42215 * C1287) *
                          C114 +
                      (C42210 * C325 - C42213 * C307 + C42211 * C947 -
                       C42214 * C939 + C42212 * C1314 - C42215 * C1298) *
                          C47359) *
                         C47105 * C3262 +
                     ((C42213 * C932 - C42210 * C938 + C42214 * C1287 -
                       C42211 * C1297 + C42215 * C2391 - C42212 * C2395) *
                          C114 +
                      (C42213 * C939 - C42210 * C947 + C42214 * C1298 -
                       C42211 * C1314 + C42215 * C2396 - C42212 * C2400) *
                          C47359) *
                         C47105 * C47261) *
                        C47222 +
                    (((C42213 * C298 - C42210 * C312 + C42214 * C1290 -
                       C42211 * C1303 + C42215 * C1293 - C42212 * C1309) *
                          C114 +
                      (C42213 * C313 - C42210 * C328 + C42214 * C1304 -
                       C42211 * C1317 + C42215 * C1310 - C42212 * C1320) *
                          C47359) *
                         C47105 * C3262 +
                     ((C42210 * C1303 - C42213 * C1290 + C42211 * C1309 -
                       C42214 * C1293 + C42212 * C7271 - C42215 * C7268) *
                          C114 +
                      (C42210 * C1317 - C42213 * C1304 + C42211 * C1320 -
                       C42214 * C1310 + C42212 * C7274 - C42215 * C7272) *
                          C47359) *
                         C47105 * C47261) *
                        C2868) *
                       C47139)) /
                 (p * q * std::sqrt(p + q));
    d2ee[206] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((C42210 * C122 - C42213 * C115 + C42211 * C491 -
                      C42214 * C481 + C42212 * C497 - C42215 * C484) *
                         C114 +
                     (C42210 * C136 - C42213 * C123 + C42211 * C511 -
                      C42214 * C492 + C42212 * C514 - C42215 * C498) *
                         C47359) *
                        C47105 * C47257 +
                    ((C42213 * C481 - C42210 * C491 + C42214 * C484 -
                      C42211 * C497 + C42215 * C1996 - C42212 * C2002) *
                         C114 +
                     (C42213 * C492 - C42210 * C511 + C42214 * C498 -
                      C42211 * C514 + C42215 * C2003 - C42212 * C2014) *
                         C47359) *
                        C47105 * C47264 +
                    ((C42210 * C497 - C42213 * C484 + C42211 * C2002 -
                      C42214 * C1996 + C42212 * C2008 - C42215 * C1999) *
                         C114 +
                     (C42210 * C514 - C42213 * C498 + C42211 * C2014 -
                      C42214 * C2003 + C42212 * C2017 - C42215 * C2009) *
                         C47359) *
                        C47105 * C3770) *
                       C47215 +
                   (((C42213 * C294 - C42210 * C304 + C42214 * C931 -
                      C42211 * C936 + C42215 * C1286 - C42212 * C1295) *
                         C114 +
                     (C42213 * C305 - C42210 * C324 + C42214 * C937 -
                      C42211 * C946 + C42215 * C1296 - C42212 * C1313) *
                         C47359) *
                        C47105 * C47257 +
                    ((C42210 * C936 - C42213 * C931 + C42211 * C1295 -
                      C42214 * C1286 + C42212 * C2393 - C42215 * C2390) *
                         C114 +
                     (C42210 * C946 - C42213 * C937 + C42211 * C1313 -
                      C42214 * C1296 + C42212 * C2399 - C42215 * C2394) *
                         C47359) *
                        C47105 * C47264 +
                    ((C42213 * C1286 - C42210 * C1295 + C42214 * C2390 -
                      C42211 * C2393 + C42215 * C6797 - C42212 * C6799) *
                         C114 +
                     (C42213 * C1296 - C42210 * C1313 + C42214 * C2394 -
                      C42211 * C2399 + C42215 * C6800 - C42212 * C6803) *
                         C47359) *
                        C47105 * C3770) *
                       C47222 +
                   (((C42210 * C310 - C42213 * C297 + C42211 * C1301 -
                      C42214 * C1289 + C42212 * C1307 - C42215 * C1292) *
                         C114 +
                     (C42210 * C327 - C42213 * C311 + C42211 * C1316 -
                      C42214 * C1302 + C42212 * C1319 - C42215 * C1308) *
                         C47359) *
                        C47105 * C47257 +
                    ((C42213 * C1289 - C42210 * C1301 + C42214 * C1292 -
                      C42211 * C1307 + C42215 * C7267 - C42212 * C7269) *
                         C114 +
                     (C42213 * C1302 - C42210 * C1316 + C42214 * C1308 -
                      C42211 * C1319 + C42215 * C7270 - C42212 * C7273) *
                         C47359) *
                        C47105 * C47264 +
                    ((C42210 * C1307 - C42213 * C1292 + C42211 * C7269 -
                      C42214 * C7267 + C42212 * C22891 - C42215 * C22890) *
                         C114 +
                     (C42210 * C1319 - C42213 * C1308 + C42211 * C7273 -
                      C42214 * C7270 + C42212 * C22893 - C42215 * C22892) *
                         C47359) *
                        C47105 * C3770) *
                       C2868) *
                  C47128) /
                 (p * q * std::sqrt(p + q));
    d2ee[207] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C42210 * C122 - C42213 * C115 + C42211 * C491 -
                      C42214 * C481 + C42212 * C497 - C42215 * C484) *
                         C114 +
                     (C42210 * C136 - C42213 * C123 + C42211 * C511 -
                      C42214 * C492 + C42212 * C514 - C42215 * C498) *
                         C47359) *
                        C47105 * C3262 +
                    ((C42213 * C481 - C42210 * C491 + C42214 * C484 -
                      C42211 * C497 + C42215 * C1996 - C42212 * C2002) *
                         C114 +
                     (C42213 * C492 - C42210 * C511 + C42214 * C498 -
                      C42211 * C514 + C42215 * C2003 - C42212 * C2014) *
                         C47359) *
                        C47105 * C47261) *
                       C47499 +
                   (((C42213 * C294 - C42210 * C304 + C42214 * C931 -
                      C42211 * C936 + C42215 * C1286 - C42212 * C1295) *
                         C114 +
                     (C42213 * C305 - C42210 * C324 + C42214 * C937 -
                      C42211 * C946 + C42215 * C1296 - C42212 * C1313) *
                         C47359) *
                        C47105 * C3262 +
                    ((C42210 * C936 - C42213 * C931 + C42211 * C1295 -
                      C42214 * C1286 + C42212 * C2393 - C42215 * C2390) *
                         C114 +
                     (C42210 * C946 - C42213 * C937 + C42211 * C1313 -
                      C42214 * C1296 + C42212 * C2399 - C42215 * C2394) *
                         C47359) *
                        C47105 * C47261) *
                       C47495 +
                   (((C42210 * C310 - C42213 * C297 + C42211 * C1301 -
                      C42214 * C1289 + C42212 * C1307 - C42215 * C1292) *
                         C114 +
                     (C42210 * C327 - C42213 * C311 + C42211 * C1316 -
                      C42214 * C1302 + C42212 * C1319 - C42215 * C1308) *
                         C47359) *
                        C47105 * C3262 +
                    ((C42213 * C1289 - C42210 * C1301 + C42214 * C1292 -
                      C42211 * C1307 + C42215 * C7267 - C42212 * C7269) *
                         C114 +
                     (C42213 * C1302 - C42210 * C1316 + C42214 * C1308 -
                      C42211 * C1319 + C42215 * C7270 - C42212 * C7273) *
                         C47359) *
                        C47105 * C47261) *
                       C47485 +
                   (((C42213 * C1152 - C42210 * C1158 + C42214 * C1694 -
                      C42211 * C1697 + C42215 * C5921 - C42212 * C5923) *
                         C114 +
                     (C42213 * C1159 - C42210 * C1170 + C42214 * C1698 -
                      C42211 * C1703 + C42215 * C5924 - C42212 * C5927) *
                         C47359) *
                        C47105 * C3262 +
                    ((C42210 * C1697 - C42213 * C1694 + C42211 * C5923 -
                      C42214 * C5921 + C42212 * C23237 - C42215 * C23236) *
                         C114 +
                     (C42210 * C1703 - C42213 * C1698 + C42211 * C5927 -
                      C42214 * C5924 + C42212 * C23239 - C42215 * C23238) *
                         C47359) *
                        C47105 * C47261) *
                       C47463) *
                  C47128) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((((C42210 * C122 - C42213 * C115 + C42211 * C491 -
                       C42214 * C481 + C42212 * C497 - C42215 * C484) *
                          C114 +
                      (C42210 * C136 - C42213 * C123 + C42211 * C511 -
                       C42214 * C492 + C42212 * C514 - C42215 * C498) *
                          C47359) *
                         C47105 * C3262 +
                     ((C42213 * C481 - C42210 * C491 + C42214 * C484 -
                       C42211 * C497 + C42215 * C1996 - C42212 * C2002) *
                          C114 +
                      (C42213 * C492 - C42210 * C511 + C42214 * C498 -
                       C42211 * C514 + C42215 * C2003 - C42212 * C2014) *
                          C47359) *
                         C47105 * C47261) *
                        C2500 +
                    (((C42213 * C294 - C42210 * C304 + C42214 * C931 -
                       C42211 * C936 + C42215 * C1286 - C42212 * C1295) *
                          C114 +
                      (C42213 * C305 - C42210 * C324 + C42214 * C937 -
                       C42211 * C946 + C42215 * C1296 - C42212 * C1313) *
                          C47359) *
                         C47105 * C3262 +
                     ((C42210 * C936 - C42213 * C931 + C42211 * C1295 -
                       C42214 * C1286 + C42212 * C2393 - C42215 * C2390) *
                          C114 +
                      (C42210 * C946 - C42213 * C937 + C42211 * C1313 -
                       C42214 * C1296 + C42212 * C2399 - C42215 * C2394) *
                          C47359) *
                         C47105 * C47261) *
                        C47219) *
                       C47489 +
                   ((((C42213 * C116 - C42210 * C124 + C42214 * C482 -
                       C42211 * C493 + C42215 * C485 - C42212 * C499) *
                          C114 +
                      (C42213 * C125 - C42210 * C137 + C42214 * C494 -
                       C42211 * C512 + C42215 * C500 - C42212 * C515) *
                          C47359) *
                         C47105 * C3262 +
                     ((C42210 * C493 - C42213 * C482 + C42211 * C499 -
                       C42214 * C485 + C42212 * C2004 - C42215 * C1997) *
                          C114 +
                      (C42210 * C512 - C42213 * C494 + C42211 * C515 -
                       C42214 * C500 + C42212 * C2015 - C42215 * C2005) *
                          C47359) *
                         C47105 * C47261) *
                        C2500 +
                    (((C42210 * C306 - C42213 * C295 + C42211 * C938 -
                       C42214 * C932 + C42212 * C1297 - C42215 * C1287) *
                          C114 +
                      (C42210 * C325 - C42213 * C307 + C42211 * C947 -
                       C42214 * C939 + C42212 * C1314 - C42215 * C1298) *
                          C47359) *
                         C47105 * C3262 +
                     ((C42213 * C932 - C42210 * C938 + C42214 * C1287 -
                       C42211 * C1297 + C42215 * C2391 - C42212 * C2395) *
                          C114 +
                      (C42213 * C939 - C42210 * C947 + C42214 * C1298 -
                       C42211 * C1314 + C42215 * C2396 - C42212 * C2400) *
                          C47359) *
                         C47105 * C47261) *
                        C47219) *
                       C47476 +
                   ((((C42210 * C126 - C42213 * C117 + C42211 * C495 -
                       C42214 * C483 + C42212 * C501 - C42215 * C486) *
                          C114 +
                      (C42210 * C138 - C42213 * C127 + C42211 * C513 -
                       C42214 * C496 + C42212 * C516 - C42215 * C502) *
                          C47359) *
                         C47105 * C3262 +
                     ((C42213 * C483 - C42210 * C495 + C42214 * C486 -
                       C42211 * C501 + C42215 * C1998 - C42212 * C2006) *
                          C114 +
                      (C42213 * C496 - C42210 * C513 + C42214 * C502 -
                       C42211 * C516 + C42215 * C2007 - C42212 * C2016) *
                          C47359) *
                         C47105 * C47261) *
                        C2500 +
                    (((C42213 * C296 - C42210 * C308 + C42214 * C933 -
                       C42211 * C940 + C42215 * C1288 - C42212 * C1299) *
                          C114 +
                      (C42213 * C309 - C42210 * C326 + C42214 * C941 -
                       C42211 * C948 + C42215 * C1300 - C42212 * C1315) *
                          C47359) *
                         C47105 * C3262 +
                     ((C42210 * C940 - C42213 * C933 + C42211 * C1299 -
                       C42214 * C1288 + C42212 * C2397 - C42215 * C2392) *
                          C114 +
                      (C42210 * C948 - C42213 * C941 + C42211 * C1315 -
                       C42214 * C1300 + C42212 * C2401 - C42215 * C2398) *
                          C47359) *
                         C47105 * C47261) *
                        C47219) *
                       C47447)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  ((((C42210 * C122 - C42213 * C115 + C42211 * C491 -
                      C42214 * C481 + C42212 * C497 - C42215 * C484) *
                         C114 +
                     (C42210 * C136 - C42213 * C123 + C42211 * C511 -
                      C42214 * C492 + C42212 * C514 - C42215 * C498) *
                         C47359) *
                        C47105 * C47500 +
                    ((C42213 * C481 - C42210 * C491 + C42214 * C484 -
                      C42211 * C497 + C42215 * C1996 - C42212 * C2002) *
                         C114 +
                     (C42213 * C492 - C42210 * C511 + C42214 * C498 -
                      C42211 * C514 + C42215 * C2003 - C42212 * C2014) *
                         C47359) *
                        C47105 * C47497 +
                    ((C42210 * C497 - C42213 * C484 + C42211 * C2002 -
                      C42214 * C1996 + C42212 * C2008 - C42215 * C1999) *
                         C114 +
                     (C42210 * C514 - C42213 * C498 + C42211 * C2014 -
                      C42214 * C2003 + C42212 * C2017 - C42215 * C2009) *
                         C47359) *
                        C47105 * C47488 +
                    ((C42213 * C1996 - C42210 * C2002 + C42214 * C1999 -
                      C42211 * C2008 + C42215 * C12421 - C42212 * C12423) *
                         C114 +
                     (C42213 * C2003 - C42210 * C2014 + C42214 * C2009 -
                      C42211 * C2017 + C42215 * C12424 - C42212 * C12427) *
                         C47359) *
                        C47105 * C47469) *
                       C2500 +
                   (((C42213 * C294 - C42210 * C304 + C42214 * C931 -
                      C42211 * C936 + C42215 * C1286 - C42212 * C1295) *
                         C114 +
                     (C42213 * C305 - C42210 * C324 + C42214 * C937 -
                      C42211 * C946 + C42215 * C1296 - C42212 * C1313) *
                         C47359) *
                        C47105 * C47500 +
                    ((C42210 * C936 - C42213 * C931 + C42211 * C1295 -
                      C42214 * C1286 + C42212 * C2393 - C42215 * C2390) *
                         C114 +
                     (C42210 * C946 - C42213 * C937 + C42211 * C1313 -
                      C42214 * C1296 + C42212 * C2399 - C42215 * C2394) *
                         C47359) *
                        C47105 * C47497 +
                    ((C42213 * C1286 - C42210 * C1295 + C42214 * C2390 -
                      C42211 * C2393 + C42215 * C6797 - C42212 * C6799) *
                         C114 +
                     (C42213 * C1296 - C42210 * C1313 + C42214 * C2394 -
                      C42211 * C2399 + C42215 * C6800 - C42212 * C6803) *
                         C47359) *
                        C47105 * C47488 +
                    ((C42210 * C2393 - C42213 * C2390 + C42211 * C6799 -
                      C42214 * C6797 + C42212 * C27579 - C42215 * C27578) *
                         C114 +
                     (C42210 * C2399 - C42213 * C2394 + C42211 * C6803 -
                      C42214 * C6800 + C42212 * C27581 - C42215 * C27580) *
                         C47359) *
                        C47105 * C47469) *
                       C47219) *
                  C47128) /
                     (p * q * std::sqrt(p + q));
    d2ee[208] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((((C42210 * C122 - C42213 * C115 + C42211 * C491 -
                       C42214 * C481 + C42212 * C497 - C42215 * C484) *
                          C114 +
                      (C42210 * C136 - C42213 * C123 + C42211 * C511 -
                       C42214 * C492 + C42212 * C514 - C42215 * C498) *
                          C47359) *
                         C47105 * C47257 +
                     ((C42213 * C481 - C42210 * C491 + C42214 * C484 -
                       C42211 * C497 + C42215 * C1996 - C42212 * C2002) *
                          C114 +
                      (C42213 * C492 - C42210 * C511 + C42214 * C498 -
                       C42211 * C514 + C42215 * C2003 - C42212 * C2014) *
                          C47359) *
                         C47105 * C47264 +
                     ((C42210 * C497 - C42213 * C484 + C42211 * C2002 -
                       C42214 * C1996 + C42212 * C2008 - C42215 * C1999) *
                          C114 +
                      (C42210 * C514 - C42213 * C498 + C42211 * C2014 -
                       C42214 * C2003 + C42212 * C2017 - C42215 * C2009) *
                          C47359) *
                         C47105 * C3770) *
                        C2500 +
                    (((C42213 * C294 - C42210 * C304 + C42214 * C931 -
                       C42211 * C936 + C42215 * C1286 - C42212 * C1295) *
                          C114 +
                      (C42213 * C305 - C42210 * C324 + C42214 * C937 -
                       C42211 * C946 + C42215 * C1296 - C42212 * C1313) *
                          C47359) *
                         C47105 * C47257 +
                     ((C42210 * C936 - C42213 * C931 + C42211 * C1295 -
                       C42214 * C1286 + C42212 * C2393 - C42215 * C2390) *
                          C114 +
                      (C42210 * C946 - C42213 * C937 + C42211 * C1313 -
                       C42214 * C1296 + C42212 * C2399 - C42215 * C2394) *
                          C47359) *
                         C47105 * C47264 +
                     ((C42213 * C1286 - C42210 * C1295 + C42214 * C2390 -
                       C42211 * C2393 + C42215 * C6797 - C42212 * C6799) *
                          C114 +
                      (C42213 * C1296 - C42210 * C1313 + C42214 * C2394 -
                       C42211 * C2399 + C42215 * C6800 - C42212 * C6803) *
                          C47359) *
                         C47105 * C3770) *
                        C47219) *
                       C47407 +
                   ((((C42213 * C116 - C42210 * C124 + C42214 * C482 -
                       C42211 * C493 + C42215 * C485 - C42212 * C499) *
                          C114 +
                      (C42213 * C125 - C42210 * C137 + C42214 * C494 -
                       C42211 * C512 + C42215 * C500 - C42212 * C515) *
                          C47359) *
                         C47105 * C47257 +
                     ((C42210 * C493 - C42213 * C482 + C42211 * C499 -
                       C42214 * C485 + C42212 * C2004 - C42215 * C1997) *
                          C114 +
                      (C42210 * C512 - C42213 * C494 + C42211 * C515 -
                       C42214 * C500 + C42212 * C2015 - C42215 * C2005) *
                          C47359) *
                         C47105 * C47264 +
                     ((C42213 * C485 - C42210 * C499 + C42214 * C1997 -
                       C42211 * C2004 + C42215 * C2000 - C42212 * C2010) *
                          C114 +
                      (C42213 * C500 - C42210 * C515 + C42214 * C2005 -
                       C42211 * C2015 + C42215 * C2011 - C42212 * C2018) *
                          C47359) *
                         C47105 * C3770) *
                        C2500 +
                    (((C42210 * C306 - C42213 * C295 + C42211 * C938 -
                       C42214 * C932 + C42212 * C1297 - C42215 * C1287) *
                          C114 +
                      (C42210 * C325 - C42213 * C307 + C42211 * C947 -
                       C42214 * C939 + C42212 * C1314 - C42215 * C1298) *
                          C47359) *
                         C47105 * C47257 +
                     ((C42213 * C932 - C42210 * C938 + C42214 * C1287 -
                       C42211 * C1297 + C42215 * C2391 - C42212 * C2395) *
                          C114 +
                      (C42213 * C939 - C42210 * C947 + C42214 * C1298 -
                       C42211 * C1314 + C42215 * C2396 - C42212 * C2400) *
                          C47359) *
                         C47105 * C47264 +
                     ((C42210 * C1297 - C42213 * C1287 + C42211 * C2395 -
                       C42214 * C2391 + C42212 * C6801 - C42215 * C6798) *
                          C114 +
                      (C42210 * C1314 - C42213 * C1298 + C42211 * C2400 -
                       C42214 * C2396 + C42212 * C6804 - C42215 * C6802) *
                          C47359) *
                         C47105 * C3770) *
                        C47219) *
                       C47139)) /
                 (p * q * std::sqrt(p + q));
    d2ee[209] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((((C42210 * C122 - C42213 * C115 + C42211 * C491 -
                       C42214 * C481 + C42212 * C497 - C42215 * C484) *
                          C114 +
                      (C42210 * C136 - C42213 * C123 + C42211 * C511 -
                       C42214 * C492 + C42212 * C514 - C42215 * C498) *
                          C47359) *
                         C47105 * C3262 +
                     ((C42213 * C481 - C42210 * C491 + C42214 * C484 -
                       C42211 * C497 + C42215 * C1996 - C42212 * C2002) *
                          C114 +
                      (C42213 * C492 - C42210 * C511 + C42214 * C498 -
                       C42211 * C514 + C42215 * C2003 - C42212 * C2014) *
                          C47359) *
                         C47105 * C47261) *
                        C2500 +
                    (((C42213 * C294 - C42210 * C304 + C42214 * C931 -
                       C42211 * C936 + C42215 * C1286 - C42212 * C1295) *
                          C114 +
                      (C42213 * C305 - C42210 * C324 + C42214 * C937 -
                       C42211 * C946 + C42215 * C1296 - C42212 * C1313) *
                          C47359) *
                         C47105 * C3262 +
                     ((C42210 * C936 - C42213 * C931 + C42211 * C1295 -
                       C42214 * C1286 + C42212 * C2393 - C42215 * C2390) *
                          C114 +
                      (C42210 * C946 - C42213 * C937 + C42211 * C1313 -
                       C42214 * C1296 + C42212 * C2399 - C42215 * C2394) *
                          C47359) *
                         C47105 * C47261) *
                        C47219) *
                       C47489 +
                   ((((C42213 * C116 - C42210 * C124 + C42214 * C482 -
                       C42211 * C493 + C42215 * C485 - C42212 * C499) *
                          C114 +
                      (C42213 * C125 - C42210 * C137 + C42214 * C494 -
                       C42211 * C512 + C42215 * C500 - C42212 * C515) *
                          C47359) *
                         C47105 * C3262 +
                     ((C42210 * C493 - C42213 * C482 + C42211 * C499 -
                       C42214 * C485 + C42212 * C2004 - C42215 * C1997) *
                          C114 +
                      (C42210 * C512 - C42213 * C494 + C42211 * C515 -
                       C42214 * C500 + C42212 * C2015 - C42215 * C2005) *
                          C47359) *
                         C47105 * C47261) *
                        C2500 +
                    (((C42210 * C306 - C42213 * C295 + C42211 * C938 -
                       C42214 * C932 + C42212 * C1297 - C42215 * C1287) *
                          C114 +
                      (C42210 * C325 - C42213 * C307 + C42211 * C947 -
                       C42214 * C939 + C42212 * C1314 - C42215 * C1298) *
                          C47359) *
                         C47105 * C3262 +
                     ((C42213 * C932 - C42210 * C938 + C42214 * C1287 -
                       C42211 * C1297 + C42215 * C2391 - C42212 * C2395) *
                          C114 +
                      (C42213 * C939 - C42210 * C947 + C42214 * C1298 -
                       C42211 * C1314 + C42215 * C2396 - C42212 * C2400) *
                          C47359) *
                         C47105 * C47261) *
                        C47219) *
                       C47476 +
                   ((((C42210 * C126 - C42213 * C117 + C42211 * C495 -
                       C42214 * C483 + C42212 * C501 - C42215 * C486) *
                          C114 +
                      (C42210 * C138 - C42213 * C127 + C42211 * C513 -
                       C42214 * C496 + C42212 * C516 - C42215 * C502) *
                          C47359) *
                         C47105 * C3262 +
                     ((C42213 * C483 - C42210 * C495 + C42214 * C486 -
                       C42211 * C501 + C42215 * C1998 - C42212 * C2006) *
                          C114 +
                      (C42213 * C496 - C42210 * C513 + C42214 * C502 -
                       C42211 * C516 + C42215 * C2007 - C42212 * C2016) *
                          C47359) *
                         C47105 * C47261) *
                        C2500 +
                    (((C42213 * C296 - C42210 * C308 + C42214 * C933 -
                       C42211 * C940 + C42215 * C1288 - C42212 * C1299) *
                          C114 +
                      (C42213 * C309 - C42210 * C326 + C42214 * C941 -
                       C42211 * C948 + C42215 * C1300 - C42212 * C1315) *
                          C47359) *
                         C47105 * C3262 +
                     ((C42210 * C940 - C42213 * C933 + C42211 * C1299 -
                       C42214 * C1288 + C42212 * C2397 - C42215 * C2392) *
                          C114 +
                      (C42210 * C948 - C42213 * C941 + C42211 * C1315 -
                       C42214 * C1300 + C42212 * C2401 - C42215 * C2398) *
                          C47359) *
                         C47105 * C47261) *
                        C47219) *
                       C47447)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((C42210 * C122 - C42213 * C115 + C42211 * C491 -
                      C42214 * C481 + C42212 * C497 - C42215 * C484) *
                         C114 +
                     (C42210 * C136 - C42213 * C123 + C42211 * C511 -
                      C42214 * C492 + C42212 * C514 - C42215 * C498) *
                         C47359) *
                        C47105 * C3262 +
                    ((C42213 * C481 - C42210 * C491 + C42214 * C484 -
                      C42211 * C497 + C42215 * C1996 - C42212 * C2002) *
                         C114 +
                     (C42213 * C492 - C42210 * C511 + C42214 * C498 -
                      C42211 * C514 + C42215 * C2003 - C42212 * C2014) *
                         C47359) *
                        C47105 * C47261) *
                       C47499 +
                   (((C42213 * C294 - C42210 * C304 + C42214 * C931 -
                      C42211 * C936 + C42215 * C1286 - C42212 * C1295) *
                         C114 +
                     (C42213 * C305 - C42210 * C324 + C42214 * C937 -
                      C42211 * C946 + C42215 * C1296 - C42212 * C1313) *
                         C47359) *
                        C47105 * C3262 +
                    ((C42210 * C936 - C42213 * C931 + C42211 * C1295 -
                      C42214 * C1286 + C42212 * C2393 - C42215 * C2390) *
                         C114 +
                     (C42210 * C946 - C42213 * C937 + C42211 * C1313 -
                      C42214 * C1296 + C42212 * C2399 - C42215 * C2394) *
                         C47359) *
                        C47105 * C47261) *
                       C47495 +
                   (((C42210 * C310 - C42213 * C297 + C42211 * C1301 -
                      C42214 * C1289 + C42212 * C1307 - C42215 * C1292) *
                         C114 +
                     (C42210 * C327 - C42213 * C311 + C42211 * C1316 -
                      C42214 * C1302 + C42212 * C1319 - C42215 * C1308) *
                         C47359) *
                        C47105 * C3262 +
                    ((C42213 * C1289 - C42210 * C1301 + C42214 * C1292 -
                      C42211 * C1307 + C42215 * C7267 - C42212 * C7269) *
                         C114 +
                     (C42213 * C1302 - C42210 * C1316 + C42214 * C1308 -
                      C42211 * C1319 + C42215 * C7270 - C42212 * C7273) *
                         C47359) *
                        C47105 * C47261) *
                       C47485 +
                   (((C42213 * C1152 - C42210 * C1158 + C42214 * C1694 -
                      C42211 * C1697 + C42215 * C5921 - C42212 * C5923) *
                         C114 +
                     (C42213 * C1159 - C42210 * C1170 + C42214 * C1698 -
                      C42211 * C1703 + C42215 * C5924 - C42212 * C5927) *
                         C47359) *
                        C47105 * C3262 +
                    ((C42210 * C1697 - C42213 * C1694 + C42211 * C5923 -
                      C42214 * C5921 + C42212 * C23237 - C42215 * C23236) *
                         C114 +
                     (C42210 * C1703 - C42213 * C1698 + C42211 * C5927 -
                      C42214 * C5924 + C42212 * C23239 - C42215 * C23238) *
                         C47359) *
                        C47105 * C47261) *
                       C47463) *
                  C47128) /
                     (p * q * std::sqrt(p + q));
    d2ee[210] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C42210 * C122 - C42213 * C115 + C42211 * C491 -
                      C42214 * C481 + C42212 * C497 - C42215 * C484) *
                         C114 +
                     (C42210 * C136 - C42213 * C123 + C42211 * C511 -
                      C42214 * C492 + C42212 * C514 - C42215 * C498) *
                         C47359) *
                        C47105 * C47174 * C1420 +
                    ((C42213 * C294 - C42210 * C304 + C42214 * C931 -
                      C42211 * C936 + C42215 * C1286 - C42212 * C1295) *
                         C114 +
                     (C42213 * C305 - C42210 * C324 + C42214 * C937 -
                      C42211 * C946 + C42215 * C1296 - C42212 * C1313) *
                         C47359) *
                        C47105 * C47174 * C1421 +
                    ((C42210 * C310 - C42213 * C297 + C42211 * C1301 -
                      C42214 * C1289 + C42212 * C1307 - C42215 * C1292) *
                         C114 +
                     (C42210 * C327 - C42213 * C311 + C42211 * C1316 -
                      C42214 * C1302 + C42212 * C1319 - C42215 * C1308) *
                         C47359) *
                        C47105 * C47174 * C1422 +
                    ((C42213 * C1152 - C42210 * C1158 + C42214 * C1694 -
                      C42211 * C1697 + C42215 * C5921 - C42212 * C5923) *
                         C114 +
                     (C42213 * C1159 - C42210 * C1170 + C42214 * C1698 -
                      C42211 * C1703 + C42215 * C5924 - C42212 * C5927) *
                         C47359) *
                        C47105 * C47174 * C47463) *
                       C47407 +
                   (((C42213 * C116 - C42210 * C124 + C42214 * C482 -
                      C42211 * C493 + C42215 * C485 - C42212 * C499) *
                         C114 +
                     (C42213 * C125 - C42210 * C137 + C42214 * C494 -
                      C42211 * C512 + C42215 * C500 - C42212 * C515) *
                         C47359) *
                        C47105 * C47174 * C1420 +
                    ((C42210 * C306 - C42213 * C295 + C42211 * C938 -
                      C42214 * C932 + C42212 * C1297 - C42215 * C1287) *
                         C114 +
                     (C42210 * C325 - C42213 * C307 + C42211 * C947 -
                      C42214 * C939 + C42212 * C1314 - C42215 * C1298) *
                         C47359) *
                        C47105 * C47174 * C1421 +
                    ((C42213 * C298 - C42210 * C312 + C42214 * C1290 -
                      C42211 * C1303 + C42215 * C1293 - C42212 * C1309) *
                         C114 +
                     (C42213 * C313 - C42210 * C328 + C42214 * C1304 -
                      C42211 * C1317 + C42215 * C1310 - C42212 * C1320) *
                         C47359) *
                        C47105 * C47174 * C1422 +
                    ((C42210 * C1160 - C42213 * C1153 + C42211 * C1699 -
                      C42214 * C1695 + C42212 * C5925 - C42215 * C5922) *
                         C114 +
                     (C42210 * C1171 - C42213 * C1161 + C42211 * C1704 -
                      C42214 * C1700 + C42212 * C5928 - C42215 * C5926) *
                         C47359) *
                        C47105 * C47174 * C47463) *
                       C47139)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C42210 * C122 - C42213 * C115 + C42211 * C491 -
                      C42214 * C481 + C42212 * C497 - C42215 * C484) *
                         C114 +
                     (C42210 * C136 - C42213 * C123 + C42211 * C511 -
                      C42214 * C492 + C42212 * C514 - C42215 * C498) *
                         C47359) *
                        C47105 * C47174 * C47421 +
                    ((C42213 * C294 - C42210 * C304 + C42214 * C931 -
                      C42211 * C936 + C42215 * C1286 - C42212 * C1295) *
                         C114 +
                     (C42213 * C305 - C42210 * C324 + C42214 * C937 -
                      C42211 * C946 + C42215 * C1296 - C42212 * C1313) *
                         C47359) *
                        C47105 * C47174 * C47219) *
                       C655 +
                   (((C42213 * C116 - C42210 * C124 + C42214 * C482 -
                      C42211 * C493 + C42215 * C485 - C42212 * C499) *
                         C114 +
                     (C42213 * C125 - C42210 * C137 + C42214 * C494 -
                      C42211 * C512 + C42215 * C500 - C42212 * C515) *
                         C47359) *
                        C47105 * C47174 * C47421 +
                    ((C42210 * C306 - C42213 * C295 + C42211 * C938 -
                      C42214 * C932 + C42212 * C1297 - C42215 * C1287) *
                         C114 +
                     (C42210 * C325 - C42213 * C307 + C42211 * C947 -
                      C42214 * C939 + C42212 * C1314 - C42215 * C1298) *
                         C47359) *
                        C47105 * C47174 * C47219) *
                       C656 +
                   (((C42210 * C126 - C42213 * C117 + C42211 * C495 -
                      C42214 * C483 + C42212 * C501 - C42215 * C486) *
                         C114 +
                     (C42210 * C138 - C42213 * C127 + C42211 * C513 -
                      C42214 * C496 + C42212 * C516 - C42215 * C502) *
                         C47359) *
                        C47105 * C47174 * C47421 +
                    ((C42213 * C296 - C42210 * C308 + C42214 * C933 -
                      C42211 * C940 + C42215 * C1288 - C42212 * C1299) *
                         C114 +
                     (C42213 * C309 - C42210 * C326 + C42214 * C941 -
                      C42211 * C948 + C42215 * C1300 - C42212 * C1315) *
                         C47359) *
                        C47105 * C47174 * C47219) *
                       C657 +
                   (((C42213 * C118 - C42210 * C128 + C42214 * C487 -
                      C42211 * C503 + C42215 * C488 - C42212 * C505) *
                         C114 +
                     (C42213 * C129 - C42210 * C139 + C42214 * C504 -
                      C42211 * C517 + C42215 * C506 - C42212 * C518) *
                         C47359) *
                        C47105 * C47174 * C47421 +
                    ((C42210 * C316 - C42213 * C300 + C42211 * C942 -
                      C42214 * C934 + C42212 * C2167 - C42215 * C2166) *
                         C114 +
                     (C42210 * C330 - C42213 * C317 + C42211 * C949 -
                      C42214 * C943 + C42212 * C2169 - C42215 * C2168) *
                         C47359) *
                        C47105 * C47174 * C47219) *
                       C47457)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  (((((C42210 * C122 - C42213 * C115 + C42211 * C491 -
                       C42214 * C481 + C42212 * C497 - C42215 * C484) *
                          C114 +
                      (C42210 * C136 - C42213 * C123 + C42211 * C511 -
                       C42214 * C492 + C42212 * C514 - C42215 * C498) *
                          C47359) *
                         C47105 * C1816 +
                     ((C42213 * C481 - C42210 * C491 + C42214 * C484 -
                       C42211 * C497 + C42215 * C1996 - C42212 * C2002) *
                          C114 +
                      (C42213 * C492 - C42210 * C511 + C42214 * C498 -
                       C42211 * C514 + C42215 * C2003 - C42212 * C2014) *
                          C47359) *
                         C47105 * C1817 +
                     ((C42210 * C497 - C42213 * C484 + C42211 * C2002 -
                       C42214 * C1996 + C42212 * C2008 - C42215 * C1999) *
                          C114 +
                      (C42210 * C514 - C42213 * C498 + C42211 * C2014 -
                       C42214 * C2003 + C42212 * C2017 - C42215 * C2009) *
                          C47359) *
                         C47105 * C47456) *
                        C47421 +
                    (((C42213 * C294 - C42210 * C304 + C42214 * C931 -
                       C42211 * C936 + C42215 * C1286 - C42212 * C1295) *
                          C114 +
                      (C42213 * C305 - C42210 * C324 + C42214 * C937 -
                       C42211 * C946 + C42215 * C1296 - C42212 * C1313) *
                          C47359) *
                         C47105 * C1816 +
                     ((C42210 * C936 - C42213 * C931 + C42211 * C1295 -
                       C42214 * C1286 + C42212 * C2393 - C42215 * C2390) *
                          C114 +
                      (C42210 * C946 - C42213 * C937 + C42211 * C1313 -
                       C42214 * C1296 + C42212 * C2399 - C42215 * C2394) *
                          C47359) *
                         C47105 * C1817 +
                     ((C42213 * C1286 - C42210 * C1295 + C42214 * C2390 -
                       C42211 * C2393 + C42215 * C6797 - C42212 * C6799) *
                          C114 +
                      (C42213 * C1296 - C42210 * C1313 + C42214 * C2394 -
                       C42211 * C2399 + C42215 * C6800 - C42212 * C6803) *
                          C47359) *
                         C47105 * C47456) *
                        C47219) *
                       C47407 +
                   ((((C42213 * C116 - C42210 * C124 + C42214 * C482 -
                       C42211 * C493 + C42215 * C485 - C42212 * C499) *
                          C114 +
                      (C42213 * C125 - C42210 * C137 + C42214 * C494 -
                       C42211 * C512 + C42215 * C500 - C42212 * C515) *
                          C47359) *
                         C47105 * C1816 +
                     ((C42210 * C493 - C42213 * C482 + C42211 * C499 -
                       C42214 * C485 + C42212 * C2004 - C42215 * C1997) *
                          C114 +
                      (C42210 * C512 - C42213 * C494 + C42211 * C515 -
                       C42214 * C500 + C42212 * C2015 - C42215 * C2005) *
                          C47359) *
                         C47105 * C1817 +
                     ((C42213 * C485 - C42210 * C499 + C42214 * C1997 -
                       C42211 * C2004 + C42215 * C2000 - C42212 * C2010) *
                          C114 +
                      (C42213 * C500 - C42210 * C515 + C42214 * C2005 -
                       C42211 * C2015 + C42215 * C2011 - C42212 * C2018) *
                          C47359) *
                         C47105 * C47456) *
                        C47421 +
                    (((C42210 * C306 - C42213 * C295 + C42211 * C938 -
                       C42214 * C932 + C42212 * C1297 - C42215 * C1287) *
                          C114 +
                      (C42210 * C325 - C42213 * C307 + C42211 * C947 -
                       C42214 * C939 + C42212 * C1314 - C42215 * C1298) *
                          C47359) *
                         C47105 * C1816 +
                     ((C42213 * C932 - C42210 * C938 + C42214 * C1287 -
                       C42211 * C1297 + C42215 * C2391 - C42212 * C2395) *
                          C114 +
                      (C42213 * C939 - C42210 * C947 + C42214 * C1298 -
                       C42211 * C1314 + C42215 * C2396 - C42212 * C2400) *
                          C47359) *
                         C47105 * C1817 +
                     ((C42210 * C1297 - C42213 * C1287 + C42211 * C2395 -
                       C42214 * C2391 + C42212 * C6801 - C42215 * C6798) *
                          C114 +
                      (C42210 * C1314 - C42213 * C1298 + C42211 * C2400 -
                       C42214 * C2396 + C42212 * C6804 - C42215 * C6802) *
                          C47359) *
                         C47105 * C47456) *
                        C47219) *
                       C47139)) /
                     (p * q * std::sqrt(p + q));
    d2ee[211] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C42210 * C122 - C42213 * C115 + C42211 * C491 -
                      C42214 * C481 + C42212 * C497 - C42215 * C484) *
                         C114 +
                     (C42210 * C136 - C42213 * C123 + C42211 * C511 -
                      C42214 * C492 + C42212 * C514 - C42215 * C498) *
                         C47359) *
                        C47105 * C47422 +
                    ((C42213 * C481 - C42210 * C491 + C42214 * C484 -
                      C42211 * C497 + C42215 * C1996 - C42212 * C2002) *
                         C114 +
                     (C42213 * C492 - C42210 * C511 + C42214 * C498 -
                      C42211 * C514 + C42215 * C2003 - C42212 * C2014) *
                         C47359) *
                        C47105 * C47261) *
                       C1420 +
                   (((C42213 * C294 - C42210 * C304 + C42214 * C931 -
                      C42211 * C936 + C42215 * C1286 - C42212 * C1295) *
                         C114 +
                     (C42213 * C305 - C42210 * C324 + C42214 * C937 -
                      C42211 * C946 + C42215 * C1296 - C42212 * C1313) *
                         C47359) *
                        C47105 * C47422 +
                    ((C42210 * C936 - C42213 * C931 + C42211 * C1295 -
                      C42214 * C1286 + C42212 * C2393 - C42215 * C2390) *
                         C114 +
                     (C42210 * C946 - C42213 * C937 + C42211 * C1313 -
                      C42214 * C1296 + C42212 * C2399 - C42215 * C2394) *
                         C47359) *
                        C47105 * C47261) *
                       C1421 +
                   (((C42210 * C310 - C42213 * C297 + C42211 * C1301 -
                      C42214 * C1289 + C42212 * C1307 - C42215 * C1292) *
                         C114 +
                     (C42210 * C327 - C42213 * C311 + C42211 * C1316 -
                      C42214 * C1302 + C42212 * C1319 - C42215 * C1308) *
                         C47359) *
                        C47105 * C47422 +
                    ((C42213 * C1289 - C42210 * C1301 + C42214 * C1292 -
                      C42211 * C1307 + C42215 * C7267 - C42212 * C7269) *
                         C114 +
                     (C42213 * C1302 - C42210 * C1316 + C42214 * C1308 -
                      C42211 * C1319 + C42215 * C7270 - C42212 * C7273) *
                         C47359) *
                        C47105 * C47261) *
                       C1422 +
                   (((C42213 * C1152 - C42210 * C1158 + C42214 * C1694 -
                      C42211 * C1697 + C42215 * C5921 - C42212 * C5923) *
                         C114 +
                     (C42213 * C1159 - C42210 * C1170 + C42214 * C1698 -
                      C42211 * C1703 + C42215 * C5924 - C42212 * C5927) *
                         C47359) *
                        C47105 * C47422 +
                    ((C42210 * C1697 - C42213 * C1694 + C42211 * C5923 -
                      C42214 * C5921 + C42212 * C23237 - C42215 * C23236) *
                         C114 +
                     (C42210 * C1703 - C42213 * C1698 + C42211 * C5927 -
                      C42214 * C5924 + C42212 * C23239 - C42215 * C23238) *
                         C47359) *
                        C47105 * C47261) *
                       C47463) *
                  C47128) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((((C42210 * C122 - C42213 * C115 + C42211 * C491 -
                       C42214 * C481 + C42212 * C497 - C42215 * C484) *
                          C114 +
                      (C42210 * C136 - C42213 * C123 + C42211 * C511 -
                       C42214 * C492 + C42212 * C514 - C42215 * C498) *
                          C47359) *
                         C47105 * C47422 +
                     ((C42213 * C481 - C42210 * C491 + C42214 * C484 -
                       C42211 * C497 + C42215 * C1996 - C42212 * C2002) *
                          C114 +
                      (C42213 * C492 - C42210 * C511 + C42214 * C498 -
                       C42211 * C514 + C42215 * C2003 - C42212 * C2014) *
                          C47359) *
                         C47105 * C47261) *
                        C47421 +
                    (((C42213 * C294 - C42210 * C304 + C42214 * C931 -
                       C42211 * C936 + C42215 * C1286 - C42212 * C1295) *
                          C114 +
                      (C42213 * C305 - C42210 * C324 + C42214 * C937 -
                       C42211 * C946 + C42215 * C1296 - C42212 * C1313) *
                          C47359) *
                         C47105 * C47422 +
                     ((C42210 * C936 - C42213 * C931 + C42211 * C1295 -
                       C42214 * C1286 + C42212 * C2393 - C42215 * C2390) *
                          C114 +
                      (C42210 * C946 - C42213 * C937 + C42211 * C1313 -
                       C42214 * C1296 + C42212 * C2399 - C42215 * C2394) *
                          C47359) *
                         C47105 * C47261) *
                        C47219) *
                       C291 +
                   ((((C42213 * C116 - C42210 * C124 + C42214 * C482 -
                       C42211 * C493 + C42215 * C485 - C42212 * C499) *
                          C114 +
                      (C42213 * C125 - C42210 * C137 + C42214 * C494 -
                       C42211 * C512 + C42215 * C500 - C42212 * C515) *
                          C47359) *
                         C47105 * C47422 +
                     ((C42210 * C493 - C42213 * C482 + C42211 * C499 -
                       C42214 * C485 + C42212 * C2004 - C42215 * C1997) *
                          C114 +
                      (C42210 * C512 - C42213 * C494 + C42211 * C515 -
                       C42214 * C500 + C42212 * C2015 - C42215 * C2005) *
                          C47359) *
                         C47105 * C47261) *
                        C47421 +
                    (((C42210 * C306 - C42213 * C295 + C42211 * C938 -
                       C42214 * C932 + C42212 * C1297 - C42215 * C1287) *
                          C114 +
                      (C42210 * C325 - C42213 * C307 + C42211 * C947 -
                       C42214 * C939 + C42212 * C1314 - C42215 * C1298) *
                          C47359) *
                         C47105 * C47422 +
                     ((C42213 * C932 - C42210 * C938 + C42214 * C1287 -
                       C42211 * C1297 + C42215 * C2391 - C42212 * C2395) *
                          C114 +
                      (C42213 * C939 - C42210 * C947 + C42214 * C1298 -
                       C42211 * C1314 + C42215 * C2396 - C42212 * C2400) *
                          C47359) *
                         C47105 * C47261) *
                        C47219) *
                       C292 +
                   ((((C42210 * C126 - C42213 * C117 + C42211 * C495 -
                       C42214 * C483 + C42212 * C501 - C42215 * C486) *
                          C114 +
                      (C42210 * C138 - C42213 * C127 + C42211 * C513 -
                       C42214 * C496 + C42212 * C516 - C42215 * C502) *
                          C47359) *
                         C47105 * C47422 +
                     ((C42213 * C483 - C42210 * C495 + C42214 * C486 -
                       C42211 * C501 + C42215 * C1998 - C42212 * C2006) *
                          C114 +
                      (C42213 * C496 - C42210 * C513 + C42214 * C502 -
                       C42211 * C516 + C42215 * C2007 - C42212 * C2016) *
                          C47359) *
                         C47105 * C47261) *
                        C47421 +
                    (((C42213 * C296 - C42210 * C308 + C42214 * C933 -
                       C42211 * C940 + C42215 * C1288 - C42212 * C1299) *
                          C114 +
                      (C42213 * C309 - C42210 * C326 + C42214 * C941 -
                       C42211 * C948 + C42215 * C1300 - C42212 * C1315) *
                          C47359) *
                         C47105 * C47422 +
                     ((C42210 * C940 - C42213 * C933 + C42211 * C1299 -
                       C42214 * C1288 + C42212 * C2397 - C42215 * C2392) *
                          C114 +
                      (C42210 * C948 - C42213 * C941 + C42211 * C1315 -
                       C42214 * C1300 + C42212 * C2401 - C42215 * C2398) *
                          C47359) *
                         C47105 * C47261) *
                        C47219) *
                       C47447)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  ((((C42210 * C122 - C42213 * C115 + C42211 * C491 -
                      C42214 * C481 + C42212 * C497 - C42215 * C484) *
                         C114 +
                     (C42210 * C136 - C42213 * C123 + C42211 * C511 -
                      C42214 * C492 + C42212 * C514 - C42215 * C498) *
                         C47359) *
                        C47105 * C2276 +
                    ((C42213 * C481 - C42210 * C491 + C42214 * C484 -
                      C42211 * C497 + C42215 * C1996 - C42212 * C2002) *
                         C114 +
                     (C42213 * C492 - C42210 * C511 + C42214 * C498 -
                      C42211 * C514 + C42215 * C2003 - C42212 * C2014) *
                         C47359) *
                        C47105 * C2277 +
                    ((C42210 * C497 - C42213 * C484 + C42211 * C2002 -
                      C42214 * C1996 + C42212 * C2008 - C42215 * C1999) *
                         C114 +
                     (C42210 * C514 - C42213 * C498 + C42211 * C2014 -
                      C42214 * C2003 + C42212 * C2017 - C42215 * C2009) *
                         C47359) *
                        C47105 * C2278 +
                    ((C42213 * C1996 - C42210 * C2002 + C42214 * C1999 -
                      C42211 * C2008 + C42215 * C12421 - C42212 * C12423) *
                         C114 +
                     (C42213 * C2003 - C42210 * C2014 + C42214 * C2009 -
                      C42211 * C2017 + C42215 * C12424 - C42212 * C12427) *
                         C47359) *
                        C47105 * C47469) *
                       C47421 +
                   (((C42213 * C294 - C42210 * C304 + C42214 * C931 -
                      C42211 * C936 + C42215 * C1286 - C42212 * C1295) *
                         C114 +
                     (C42213 * C305 - C42210 * C324 + C42214 * C937 -
                      C42211 * C946 + C42215 * C1296 - C42212 * C1313) *
                         C47359) *
                        C47105 * C2276 +
                    ((C42210 * C936 - C42213 * C931 + C42211 * C1295 -
                      C42214 * C1286 + C42212 * C2393 - C42215 * C2390) *
                         C114 +
                     (C42210 * C946 - C42213 * C937 + C42211 * C1313 -
                      C42214 * C1296 + C42212 * C2399 - C42215 * C2394) *
                         C47359) *
                        C47105 * C2277 +
                    ((C42213 * C1286 - C42210 * C1295 + C42214 * C2390 -
                      C42211 * C2393 + C42215 * C6797 - C42212 * C6799) *
                         C114 +
                     (C42213 * C1296 - C42210 * C1313 + C42214 * C2394 -
                      C42211 * C2399 + C42215 * C6800 - C42212 * C6803) *
                         C47359) *
                        C47105 * C2278 +
                    ((C42210 * C2393 - C42213 * C2390 + C42211 * C6799 -
                      C42214 * C6797 + C42212 * C27579 - C42215 * C27578) *
                         C114 +
                     (C42210 * C2399 - C42213 * C2394 + C42211 * C6803 -
                      C42214 * C6800 + C42212 * C27581 - C42215 * C27580) *
                         C47359) *
                        C47105 * C47469) *
                       C47219) *
                  C47128) /
                     (p * q * std::sqrt(p + q));
    d2ee[212] += (0.5 * std::pow(Pi, 2.5) *
                      (((C42210 * C122 - C42213 * C115 + C42211 * C491 -
                         C42214 * C481 + C42212 * C497 - C42215 * C484) *
                            C114 +
                        (C42210 * C136 - C42213 * C123 + C42211 * C511 -
                         C42214 * C492 + C42212 * C514 - C42215 * C498) *
                            C47359) *
                           C47105 * C47174 * C47156 * C108 +
                       ((C42213 * C116 - C42210 * C124 + C42214 * C482 -
                         C42211 * C493 + C42215 * C485 - C42212 * C499) *
                            C114 +
                        (C42213 * C125 - C42210 * C137 + C42214 * C494 -
                         C42211 * C512 + C42215 * C500 - C42212 * C515) *
                            C47359) *
                           C47105 * C47174 * C47156 * C109 +
                       ((C42210 * C126 - C42213 * C117 + C42211 * C495 -
                         C42214 * C483 + C42212 * C501 - C42215 * C486) *
                            C114 +
                        (C42210 * C138 - C42213 * C127 + C42211 * C513 -
                         C42214 * C496 + C42212 * C516 - C42215 * C502) *
                            C47359) *
                           C47105 * C47174 * C47156 * C110 +
                       ((C42213 * C118 - C42210 * C128 + C42214 * C487 -
                         C42211 * C503 + C42215 * C488 - C42212 * C505) *
                            C114 +
                        (C42213 * C129 - C42210 * C139 + C42214 * C504 -
                         C42211 * C517 + C42215 * C506 - C42212 * C518) *
                            C47359) *
                           C47105 * C47174 * C47156 * C111 +
                       ((C42210 * C130 - C42213 * C119 + C42211 * C507 -
                         C42214 * C489 + C42212 * C509 - C42215 * C490) *
                            C114 +
                        (C42210 * C140 - C42213 * C131 + C42211 * C519 -
                         C42214 * C508 + C42212 * C520 - C42215 * C510) *
                            C47359) *
                           C47105 * C47174 * C47156 * C112) +
                  0.5 * std::pow(Pi, 2.5) *
                      ((((C42210 * C122 - C42213 * C115 + C42211 * C491 -
                          C42214 * C481 + C42212 * C497 - C42215 * C484) *
                             C114 +
                         (C42210 * C136 - C42213 * C123 + C42211 * C511 -
                          C42214 * C492 + C42212 * C514 - C42215 * C498) *
                             C47359) *
                            C47105 * C47174 * C47492 +
                        ((C42213 * C294 - C42210 * C304 + C42214 * C931 -
                          C42211 * C936 + C42215 * C1286 - C42212 * C1295) *
                             C114 +
                         (C42213 * C305 - C42210 * C324 + C42214 * C937 -
                          C42211 * C946 + C42215 * C1296 - C42212 * C1313) *
                             C47359) *
                            C47105 * C47174 * C47480 +
                        ((C42210 * C310 - C42213 * C297 + C42211 * C1301 -
                          C42214 * C1289 + C42212 * C1307 - C42215 * C1292) *
                             C114 +
                         (C42210 * C327 - C42213 * C311 + C42211 * C1316 -
                          C42214 * C1302 + C42212 * C1319 - C42215 * C1308) *
                             C47359) *
                            C47105 * C47174 * C47453) *
                           C291 +
                       (((C42213 * C116 - C42210 * C124 + C42214 * C482 -
                          C42211 * C493 + C42215 * C485 - C42212 * C499) *
                             C114 +
                         (C42213 * C125 - C42210 * C137 + C42214 * C494 -
                          C42211 * C512 + C42215 * C500 - C42212 * C515) *
                             C47359) *
                            C47105 * C47174 * C47492 +
                        ((C42210 * C306 - C42213 * C295 + C42211 * C938 -
                          C42214 * C932 + C42212 * C1297 - C42215 * C1287) *
                             C114 +
                         (C42210 * C325 - C42213 * C307 + C42211 * C947 -
                          C42214 * C939 + C42212 * C1314 - C42215 * C1298) *
                             C47359) *
                            C47105 * C47174 * C47480 +
                        ((C42213 * C298 - C42210 * C312 + C42214 * C1290 -
                          C42211 * C1303 + C42215 * C1293 - C42212 * C1309) *
                             C114 +
                         (C42213 * C313 - C42210 * C328 + C42214 * C1304 -
                          C42211 * C1317 + C42215 * C1310 - C42212 * C1320) *
                             C47359) *
                            C47105 * C47174 * C47453) *
                           C292 +
                       (((C42210 * C126 - C42213 * C117 + C42211 * C495 -
                          C42214 * C483 + C42212 * C501 - C42215 * C486) *
                             C114 +
                         (C42210 * C138 - C42213 * C127 + C42211 * C513 -
                          C42214 * C496 + C42212 * C516 - C42215 * C502) *
                             C47359) *
                            C47105 * C47174 * C47492 +
                        ((C42213 * C296 - C42210 * C308 + C42214 * C933 -
                          C42211 * C940 + C42215 * C1288 - C42212 * C1299) *
                             C114 +
                         (C42213 * C309 - C42210 * C326 + C42214 * C941 -
                          C42211 * C948 + C42215 * C1300 - C42212 * C1315) *
                             C47359) *
                            C47105 * C47174 * C47480 +
                        ((C42210 * C314 - C42213 * C299 + C42211 * C1305 -
                          C42214 * C1291 + C42212 * C1311 - C42215 * C1294) *
                             C114 +
                         (C42210 * C329 - C42213 * C315 + C42211 * C1318 -
                          C42214 * C1306 + C42212 * C1321 - C42215 * C1312) *
                             C47359) *
                            C47105 * C47174 * C47453) *
                           C47447)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::pow(Pi, 2.5) *
                  ((((C42210 * C122 - C42213 * C115 + C42211 * C491 -
                      C42214 * C481 + C42212 * C497 - C42215 * C484) *
                         C114 +
                     (C42210 * C136 - C42213 * C123 + C42211 * C511 -
                      C42214 * C492 + C42212 * C514 - C42215 * C498) *
                         C47359) *
                        C47105 * C47493 +
                    ((C42213 * C481 - C42210 * C491 + C42214 * C484 -
                      C42211 * C497 + C42215 * C1996 - C42212 * C2002) *
                         C114 +
                     (C42213 * C492 - C42210 * C511 + C42214 * C498 -
                      C42211 * C514 + C42215 * C2003 - C42212 * C2014) *
                         C47359) *
                        C47105 * C47482 +
                    ((C42210 * C497 - C42213 * C484 + C42211 * C2002 -
                      C42214 * C1996 + C42212 * C2008 - C42215 * C1999) *
                         C114 +
                     (C42210 * C514 - C42213 * C498 + C42211 * C2014 -
                      C42214 * C2003 + C42212 * C2017 - C42215 * C2009) *
                         C47359) *
                        C47105 * C47456) *
                       C47156 * C291 +
                   (((C42213 * C116 - C42210 * C124 + C42214 * C482 -
                      C42211 * C493 + C42215 * C485 - C42212 * C499) *
                         C114 +
                     (C42213 * C125 - C42210 * C137 + C42214 * C494 -
                      C42211 * C512 + C42215 * C500 - C42212 * C515) *
                         C47359) *
                        C47105 * C47493 +
                    ((C42210 * C493 - C42213 * C482 + C42211 * C499 -
                      C42214 * C485 + C42212 * C2004 - C42215 * C1997) *
                         C114 +
                     (C42210 * C512 - C42213 * C494 + C42211 * C515 -
                      C42214 * C500 + C42212 * C2015 - C42215 * C2005) *
                         C47359) *
                        C47105 * C47482 +
                    ((C42213 * C485 - C42210 * C499 + C42214 * C1997 -
                      C42211 * C2004 + C42215 * C2000 - C42212 * C2010) *
                         C114 +
                     (C42213 * C500 - C42210 * C515 + C42214 * C2005 -
                      C42211 * C2015 + C42215 * C2011 - C42212 * C2018) *
                         C47359) *
                        C47105 * C47456) *
                       C47156 * C292 +
                   (((C42210 * C126 - C42213 * C117 + C42211 * C495 -
                      C42214 * C483 + C42212 * C501 - C42215 * C486) *
                         C114 +
                     (C42210 * C138 - C42213 * C127 + C42211 * C513 -
                      C42214 * C496 + C42212 * C516 - C42215 * C502) *
                         C47359) *
                        C47105 * C47493 +
                    ((C42213 * C483 - C42210 * C495 + C42214 * C486 -
                      C42211 * C501 + C42215 * C1998 - C42212 * C2006) *
                         C114 +
                     (C42213 * C496 - C42210 * C513 + C42214 * C502 -
                      C42211 * C516 + C42215 * C2007 - C42212 * C2016) *
                         C47359) *
                        C47105 * C47482 +
                    ((C42210 * C501 - C42213 * C486 + C42211 * C2006 -
                      C42214 * C1998 + C42212 * C2012 - C42215 * C2001) *
                         C114 +
                     (C42210 * C516 - C42213 * C502 + C42211 * C2016 -
                      C42214 * C2007 + C42212 * C2019 - C42215 * C2013) *
                         C47359) *
                        C47105 * C47456) *
                       C47156 * C47447)) /
                     (p * q * std::sqrt(p + q)) +
                 (0.5 * std::pow(Pi, 2.5) *
                  ((((C42210 * C122 - C42213 * C115 + C42211 * C491 -
                      C42214 * C481 + C42212 * C497 - C42215 * C484) *
                         C114 +
                     (C42210 * C136 - C42213 * C123 + C42211 * C511 -
                      C42214 * C492 + C42212 * C514 - C42215 * C498) *
                         C47359) *
                        C47105 * C47174 * C1078 +
                    ((C42213 * C294 - C42210 * C304 + C42214 * C931 -
                      C42211 * C936 + C42215 * C1286 - C42212 * C1295) *
                         C114 +
                     (C42213 * C305 - C42210 * C324 + C42214 * C937 -
                      C42211 * C946 + C42215 * C1296 - C42212 * C1313) *
                         C47359) *
                        C47105 * C47174 * C1079 +
                    ((C42210 * C310 - C42213 * C297 + C42211 * C1301 -
                      C42214 * C1289 + C42212 * C1307 - C42215 * C1292) *
                         C114 +
                     (C42210 * C327 - C42213 * C311 + C42211 * C1316 -
                      C42214 * C1302 + C42212 * C1319 - C42215 * C1308) *
                         C47359) *
                        C47105 * C47174 * C47453) *
                       C47489 +
                   (((C42213 * C116 - C42210 * C124 + C42214 * C482 -
                      C42211 * C493 + C42215 * C485 - C42212 * C499) *
                         C114 +
                     (C42213 * C125 - C42210 * C137 + C42214 * C494 -
                      C42211 * C512 + C42215 * C500 - C42212 * C515) *
                         C47359) *
                        C47105 * C47174 * C1078 +
                    ((C42210 * C306 - C42213 * C295 + C42211 * C938 -
                      C42214 * C932 + C42212 * C1297 - C42215 * C1287) *
                         C114 +
                     (C42210 * C325 - C42213 * C307 + C42211 * C947 -
                      C42214 * C939 + C42212 * C1314 - C42215 * C1298) *
                         C47359) *
                        C47105 * C47174 * C1079 +
                    ((C42213 * C298 - C42210 * C312 + C42214 * C1290 -
                      C42211 * C1303 + C42215 * C1293 - C42212 * C1309) *
                         C114 +
                     (C42213 * C313 - C42210 * C328 + C42214 * C1304 -
                      C42211 * C1317 + C42215 * C1310 - C42212 * C1320) *
                         C47359) *
                        C47105 * C47174 * C47453) *
                       C47476 +
                   (((C42210 * C126 - C42213 * C117 + C42211 * C495 -
                      C42214 * C483 + C42212 * C501 - C42215 * C486) *
                         C114 +
                     (C42210 * C138 - C42213 * C127 + C42211 * C513 -
                      C42214 * C496 + C42212 * C516 - C42215 * C502) *
                         C47359) *
                        C47105 * C47174 * C1078 +
                    ((C42213 * C296 - C42210 * C308 + C42214 * C933 -
                      C42211 * C940 + C42215 * C1288 - C42212 * C1299) *
                         C114 +
                     (C42213 * C309 - C42210 * C326 + C42214 * C941 -
                      C42211 * C948 + C42215 * C1300 - C42212 * C1315) *
                         C47359) *
                        C47105 * C47174 * C1079 +
                    ((C42210 * C314 - C42213 * C299 + C42211 * C1305 -
                      C42214 * C1291 + C42212 * C1311 - C42215 * C1294) *
                         C114 +
                     (C42210 * C329 - C42213 * C315 + C42211 * C1318 -
                      C42214 * C1306 + C42212 * C1321 - C42215 * C1312) *
                         C47359) *
                        C47105 * C47174 * C47453) *
                       C47447)) /
                     (p * q * std::sqrt(p + q)) +
                 (0.5 * std::pow(Pi, 2.5) *
                  (((C42210 * C122 - C42213 * C115 + C42211 * C491 -
                     C42214 * C481 + C42212 * C497 - C42215 * C484) *
                        C114 +
                    (C42210 * C136 - C42213 * C123 + C42211 * C511 -
                     C42214 * C492 + C42212 * C514 - C42215 * C498) *
                        C47359) *
                       C47105 * C47174 * C1146 +
                   ((C42213 * C294 - C42210 * C304 + C42214 * C931 -
                     C42211 * C936 + C42215 * C1286 - C42212 * C1295) *
                        C114 +
                    (C42213 * C305 - C42210 * C324 + C42214 * C937 -
                     C42211 * C946 + C42215 * C1296 - C42212 * C1313) *
                        C47359) *
                       C47105 * C47174 * C1147 +
                   ((C42210 * C310 - C42213 * C297 + C42211 * C1301 -
                     C42214 * C1289 + C42212 * C1307 - C42215 * C1292) *
                        C114 +
                    (C42210 * C327 - C42213 * C311 + C42211 * C1316 -
                     C42214 * C1302 + C42212 * C1319 - C42215 * C1308) *
                        C47359) *
                       C47105 * C47174 * C1148 +
                   ((C42213 * C1152 - C42210 * C1158 + C42214 * C1694 -
                     C42211 * C1697 + C42215 * C5921 - C42212 * C5923) *
                        C114 +
                    (C42213 * C1159 - C42210 * C1170 + C42214 * C1698 -
                     C42211 * C1703 + C42215 * C5924 - C42212 * C5927) *
                        C47359) *
                       C47105 * C47174 * C1149 +
                   ((C42210 * C1164 - C42213 * C1155 + C42211 * C6413 -
                     C42214 * C6411 + C42212 * C22245 - C42215 * C22244) *
                        C114 +
                    (C42210 * C1173 - C42213 * C1165 + C42211 * C6417 -
                     C42214 * C6414 + C42212 * C22247 - C42215 * C22246) *
                        C47359) *
                       C47105 * C47174 * C1150) *
                  C47128) /
                     (p * q * std::sqrt(p + q)) -
                 (std::pow(Pi, 2.5) *
                  ((((C42210 * C122 - C42213 * C115 + C42211 * C491 -
                      C42214 * C481 + C42212 * C497 - C42215 * C484) *
                         C114 +
                     (C42210 * C136 - C42213 * C123 + C42211 * C511 -
                      C42214 * C492 + C42212 * C514 - C42215 * C498) *
                         C47359) *
                        C47105 * C47493 +
                    ((C42213 * C481 - C42210 * C491 + C42214 * C484 -
                      C42211 * C497 + C42215 * C1996 - C42212 * C2002) *
                         C114 +
                     (C42213 * C492 - C42210 * C511 + C42214 * C498 -
                      C42211 * C514 + C42215 * C2003 - C42212 * C2014) *
                         C47359) *
                        C47105 * C47482 +
                    ((C42210 * C497 - C42213 * C484 + C42211 * C2002 -
                      C42214 * C1996 + C42212 * C2008 - C42215 * C1999) *
                         C114 +
                     (C42210 * C514 - C42213 * C498 + C42211 * C2014 -
                      C42214 * C2003 + C42212 * C2017 - C42215 * C2009) *
                         C47359) *
                        C47105 * C47456) *
                       C1078 +
                   (((C42213 * C294 - C42210 * C304 + C42214 * C931 -
                      C42211 * C936 + C42215 * C1286 - C42212 * C1295) *
                         C114 +
                     (C42213 * C305 - C42210 * C324 + C42214 * C937 -
                      C42211 * C946 + C42215 * C1296 - C42212 * C1313) *
                         C47359) *
                        C47105 * C47493 +
                    ((C42210 * C936 - C42213 * C931 + C42211 * C1295 -
                      C42214 * C1286 + C42212 * C2393 - C42215 * C2390) *
                         C114 +
                     (C42210 * C946 - C42213 * C937 + C42211 * C1313 -
                      C42214 * C1296 + C42212 * C2399 - C42215 * C2394) *
                         C47359) *
                        C47105 * C47482 +
                    ((C42213 * C1286 - C42210 * C1295 + C42214 * C2390 -
                      C42211 * C2393 + C42215 * C6797 - C42212 * C6799) *
                         C114 +
                     (C42213 * C1296 - C42210 * C1313 + C42214 * C2394 -
                      C42211 * C2399 + C42215 * C6800 - C42212 * C6803) *
                         C47359) *
                        C47105 * C47456) *
                       C1079 +
                   (((C42210 * C310 - C42213 * C297 + C42211 * C1301 -
                      C42214 * C1289 + C42212 * C1307 - C42215 * C1292) *
                         C114 +
                     (C42210 * C327 - C42213 * C311 + C42211 * C1316 -
                      C42214 * C1302 + C42212 * C1319 - C42215 * C1308) *
                         C47359) *
                        C47105 * C47493 +
                    ((C42213 * C1289 - C42210 * C1301 + C42214 * C1292 -
                      C42211 * C1307 + C42215 * C7267 - C42212 * C7269) *
                         C114 +
                     (C42213 * C1302 - C42210 * C1316 + C42214 * C1308 -
                      C42211 * C1319 + C42215 * C7270 - C42212 * C7273) *
                         C47359) *
                        C47105 * C47482 +
                    ((C42210 * C1307 - C42213 * C1292 + C42211 * C7269 -
                      C42214 * C7267 + C42212 * C22891 - C42215 * C22890) *
                         C114 +
                     (C42210 * C1319 - C42213 * C1308 + C42211 * C7273 -
                      C42214 * C7270 + C42212 * C22893 - C42215 * C22892) *
                         C47359) *
                        C47105 * C47456) *
                       C47453) *
                  C47128) /
                     (p * q * std::sqrt(p + q)) -
                 (std::pow(Pi, 2.5) *
                  ((((C42210 * C122 - C42213 * C115 + C42211 * C491 -
                      C42214 * C481 + C42212 * C497 - C42215 * C484) *
                         C114 +
                     (C42210 * C136 - C42213 * C123 + C42211 * C511 -
                      C42214 * C492 + C42212 * C514 - C42215 * C498) *
                         C47359) *
                        C47105 * C1816 +
                    ((C42213 * C481 - C42210 * C491 + C42214 * C484 -
                      C42211 * C497 + C42215 * C1996 - C42212 * C2002) *
                         C114 +
                     (C42213 * C492 - C42210 * C511 + C42214 * C498 -
                      C42211 * C514 + C42215 * C2003 - C42212 * C2014) *
                         C47359) *
                        C47105 * C1817 +
                    ((C42210 * C497 - C42213 * C484 + C42211 * C2002 -
                      C42214 * C1996 + C42212 * C2008 - C42215 * C1999) *
                         C114 +
                     (C42210 * C514 - C42213 * C498 + C42211 * C2014 -
                      C42214 * C2003 + C42212 * C2017 - C42215 * C2009) *
                         C47359) *
                        C47105 * C47456) *
                       C47156 * C47489 +
                   (((C42213 * C116 - C42210 * C124 + C42214 * C482 -
                      C42211 * C493 + C42215 * C485 - C42212 * C499) *
                         C114 +
                     (C42213 * C125 - C42210 * C137 + C42214 * C494 -
                      C42211 * C512 + C42215 * C500 - C42212 * C515) *
                         C47359) *
                        C47105 * C1816 +
                    ((C42210 * C493 - C42213 * C482 + C42211 * C499 -
                      C42214 * C485 + C42212 * C2004 - C42215 * C1997) *
                         C114 +
                     (C42210 * C512 - C42213 * C494 + C42211 * C515 -
                      C42214 * C500 + C42212 * C2015 - C42215 * C2005) *
                         C47359) *
                        C47105 * C1817 +
                    ((C42213 * C485 - C42210 * C499 + C42214 * C1997 -
                      C42211 * C2004 + C42215 * C2000 - C42212 * C2010) *
                         C114 +
                     (C42213 * C500 - C42210 * C515 + C42214 * C2005 -
                      C42211 * C2015 + C42215 * C2011 - C42212 * C2018) *
                         C47359) *
                        C47105 * C47456) *
                       C47156 * C47476 +
                   (((C42210 * C126 - C42213 * C117 + C42211 * C495 -
                      C42214 * C483 + C42212 * C501 - C42215 * C486) *
                         C114 +
                     (C42210 * C138 - C42213 * C127 + C42211 * C513 -
                      C42214 * C496 + C42212 * C516 - C42215 * C502) *
                         C47359) *
                        C47105 * C1816 +
                    ((C42213 * C483 - C42210 * C495 + C42214 * C486 -
                      C42211 * C501 + C42215 * C1998 - C42212 * C2006) *
                         C114 +
                     (C42213 * C496 - C42210 * C513 + C42214 * C502 -
                      C42211 * C516 + C42215 * C2007 - C42212 * C2016) *
                         C47359) *
                        C47105 * C1817 +
                    ((C42210 * C501 - C42213 * C486 + C42211 * C2006 -
                      C42214 * C1998 + C42212 * C2012 - C42215 * C2001) *
                         C114 +
                     (C42210 * C516 - C42213 * C502 + C42211 * C2016 -
                      C42214 * C2007 + C42212 * C2019 - C42215 * C2013) *
                         C47359) *
                        C47105 * C47456) *
                       C47156 * C47447)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::pow(Pi, 2.5) *
                  ((((C42210 * C122 - C42213 * C115 + C42211 * C491 -
                      C42214 * C481 + C42212 * C497 - C42215 * C484) *
                         C114 +
                     (C42210 * C136 - C42213 * C123 + C42211 * C511 -
                      C42214 * C492 + C42212 * C514 - C42215 * C498) *
                         C47359) *
                        C47105 * C1816 +
                    ((C42213 * C481 - C42210 * C491 + C42214 * C484 -
                      C42211 * C497 + C42215 * C1996 - C42212 * C2002) *
                         C114 +
                     (C42213 * C492 - C42210 * C511 + C42214 * C498 -
                      C42211 * C514 + C42215 * C2003 - C42212 * C2014) *
                         C47359) *
                        C47105 * C1817 +
                    ((C42210 * C497 - C42213 * C484 + C42211 * C2002 -
                      C42214 * C1996 + C42212 * C2008 - C42215 * C1999) *
                         C114 +
                     (C42210 * C514 - C42213 * C498 + C42211 * C2014 -
                      C42214 * C2003 + C42212 * C2017 - C42215 * C2009) *
                         C47359) *
                        C47105 * C47456) *
                       C47492 +
                   (((C42213 * C294 - C42210 * C304 + C42214 * C931 -
                      C42211 * C936 + C42215 * C1286 - C42212 * C1295) *
                         C114 +
                     (C42213 * C305 - C42210 * C324 + C42214 * C937 -
                      C42211 * C946 + C42215 * C1296 - C42212 * C1313) *
                         C47359) *
                        C47105 * C1816 +
                    ((C42210 * C936 - C42213 * C931 + C42211 * C1295 -
                      C42214 * C1286 + C42212 * C2393 - C42215 * C2390) *
                         C114 +
                     (C42210 * C946 - C42213 * C937 + C42211 * C1313 -
                      C42214 * C1296 + C42212 * C2399 - C42215 * C2394) *
                         C47359) *
                        C47105 * C1817 +
                    ((C42213 * C1286 - C42210 * C1295 + C42214 * C2390 -
                      C42211 * C2393 + C42215 * C6797 - C42212 * C6799) *
                         C114 +
                     (C42213 * C1296 - C42210 * C1313 + C42214 * C2394 -
                      C42211 * C2399 + C42215 * C6800 - C42212 * C6803) *
                         C47359) *
                        C47105 * C47456) *
                       C47480 +
                   (((C42210 * C310 - C42213 * C297 + C42211 * C1301 -
                      C42214 * C1289 + C42212 * C1307 - C42215 * C1292) *
                         C114 +
                     (C42210 * C327 - C42213 * C311 + C42211 * C1316 -
                      C42214 * C1302 + C42212 * C1319 - C42215 * C1308) *
                         C47359) *
                        C47105 * C1816 +
                    ((C42213 * C1289 - C42210 * C1301 + C42214 * C1292 -
                      C42211 * C1307 + C42215 * C7267 - C42212 * C7269) *
                         C114 +
                     (C42213 * C1302 - C42210 * C1316 + C42214 * C1308 -
                      C42211 * C1319 + C42215 * C7270 - C42212 * C7273) *
                         C47359) *
                        C47105 * C1817 +
                    ((C42210 * C1307 - C42213 * C1292 + C42211 * C7269 -
                      C42214 * C7267 + C42212 * C22891 - C42215 * C22890) *
                         C114 +
                     (C42210 * C1319 - C42213 * C1308 + C42211 * C7273 -
                      C42214 * C7270 + C42212 * C22893 - C42215 * C22892) *
                         C47359) *
                        C47105 * C47456) *
                       C47453) *
                  C47128) /
                     (p * q * std::sqrt(p + q)) +
                 (2 * std::pow(Pi, 2.5) *
                  (((C42210 * C122 - C42213 * C115 + C42211 * C491 -
                     C42214 * C481 + C42212 * C497 - C42215 * C484) *
                        C114 +
                    (C42210 * C136 - C42213 * C123 + C42211 * C511 -
                     C42214 * C492 + C42212 * C514 - C42215 * C498) *
                        C47359) *
                       C47105 * C1991 +
                   ((C42213 * C481 - C42210 * C491 + C42214 * C484 -
                     C42211 * C497 + C42215 * C1996 - C42212 * C2002) *
                        C114 +
                    (C42213 * C492 - C42210 * C511 + C42214 * C498 -
                     C42211 * C514 + C42215 * C2003 - C42212 * C2014) *
                        C47359) *
                       C47105 * C1992 +
                   ((C42210 * C497 - C42213 * C484 + C42211 * C2002 -
                     C42214 * C1996 + C42212 * C2008 - C42215 * C1999) *
                        C114 +
                    (C42210 * C514 - C42213 * C498 + C42211 * C2014 -
                     C42214 * C2003 + C42212 * C2017 - C42215 * C2009) *
                        C47359) *
                       C47105 * C1993 +
                   ((C42213 * C1996 - C42210 * C2002 + C42214 * C1999 -
                     C42211 * C2008 + C42215 * C12421 - C42212 * C12423) *
                        C114 +
                    (C42213 * C2003 - C42210 * C2014 + C42214 * C2009 -
                     C42211 * C2017 + C42215 * C12424 - C42212 * C12427) *
                        C47359) *
                       C47105 * C1994 +
                   ((C42210 * C2008 - C42213 * C1999 + C42211 * C12423 -
                     C42214 * C12421 + C42212 * C43685 - C42215 * C43684) *
                        C114 +
                    (C42210 * C2017 - C42213 * C2009 + C42211 * C12427 -
                     C42214 * C12424 + C42212 * C43687 - C42215 * C43686) *
                        C47359) *
                       C47105 * C1995) *
                  C47156 * C47128) /
                     (p * q * std::sqrt(p + q));
    d2ee[213] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((((C42210 * C122 - C42213 * C115 + C42211 * C491 -
                       C42214 * C481 + C42212 * C497 - C42215 * C484) *
                          C114 +
                      (C42210 * C136 - C42213 * C123 + C42211 * C511 -
                       C42214 * C492 + C42212 * C514 - C42215 * C498) *
                          C47359) *
                         C47105 * C47422 +
                     ((C42213 * C481 - C42210 * C491 + C42214 * C484 -
                       C42211 * C497 + C42215 * C1996 - C42212 * C2002) *
                          C114 +
                      (C42213 * C492 - C42210 * C511 + C42214 * C498 -
                       C42211 * C514 + C42215 * C2003 - C42212 * C2014) *
                          C47359) *
                         C47105 * C47261) *
                        C1078 +
                    (((C42213 * C294 - C42210 * C304 + C42214 * C931 -
                       C42211 * C936 + C42215 * C1286 - C42212 * C1295) *
                          C114 +
                      (C42213 * C305 - C42210 * C324 + C42214 * C937 -
                       C42211 * C946 + C42215 * C1296 - C42212 * C1313) *
                          C47359) *
                         C47105 * C47422 +
                     ((C42210 * C936 - C42213 * C931 + C42211 * C1295 -
                       C42214 * C1286 + C42212 * C2393 - C42215 * C2390) *
                          C114 +
                      (C42210 * C946 - C42213 * C937 + C42211 * C1313 -
                       C42214 * C1296 + C42212 * C2399 - C42215 * C2394) *
                          C47359) *
                         C47105 * C47261) *
                        C1079 +
                    (((C42210 * C310 - C42213 * C297 + C42211 * C1301 -
                       C42214 * C1289 + C42212 * C1307 - C42215 * C1292) *
                          C114 +
                      (C42210 * C327 - C42213 * C311 + C42211 * C1316 -
                       C42214 * C1302 + C42212 * C1319 - C42215 * C1308) *
                          C47359) *
                         C47105 * C47422 +
                     ((C42213 * C1289 - C42210 * C1301 + C42214 * C1292 -
                       C42211 * C1307 + C42215 * C7267 - C42212 * C7269) *
                          C114 +
                      (C42213 * C1302 - C42210 * C1316 + C42214 * C1308 -
                       C42211 * C1319 + C42215 * C7270 - C42212 * C7273) *
                          C47359) *
                         C47105 * C47261) *
                        C47453) *
                       C47407 +
                   ((((C42213 * C116 - C42210 * C124 + C42214 * C482 -
                       C42211 * C493 + C42215 * C485 - C42212 * C499) *
                          C114 +
                      (C42213 * C125 - C42210 * C137 + C42214 * C494 -
                       C42211 * C512 + C42215 * C500 - C42212 * C515) *
                          C47359) *
                         C47105 * C47422 +
                     ((C42210 * C493 - C42213 * C482 + C42211 * C499 -
                       C42214 * C485 + C42212 * C2004 - C42215 * C1997) *
                          C114 +
                      (C42210 * C512 - C42213 * C494 + C42211 * C515 -
                       C42214 * C500 + C42212 * C2015 - C42215 * C2005) *
                          C47359) *
                         C47105 * C47261) *
                        C1078 +
                    (((C42210 * C306 - C42213 * C295 + C42211 * C938 -
                       C42214 * C932 + C42212 * C1297 - C42215 * C1287) *
                          C114 +
                      (C42210 * C325 - C42213 * C307 + C42211 * C947 -
                       C42214 * C939 + C42212 * C1314 - C42215 * C1298) *
                          C47359) *
                         C47105 * C47422 +
                     ((C42213 * C932 - C42210 * C938 + C42214 * C1287 -
                       C42211 * C1297 + C42215 * C2391 - C42212 * C2395) *
                          C114 +
                      (C42213 * C939 - C42210 * C947 + C42214 * C1298 -
                       C42211 * C1314 + C42215 * C2396 - C42212 * C2400) *
                          C47359) *
                         C47105 * C47261) *
                        C1079 +
                    (((C42213 * C298 - C42210 * C312 + C42214 * C1290 -
                       C42211 * C1303 + C42215 * C1293 - C42212 * C1309) *
                          C114 +
                      (C42213 * C313 - C42210 * C328 + C42214 * C1304 -
                       C42211 * C1317 + C42215 * C1310 - C42212 * C1320) *
                          C47359) *
                         C47105 * C47422 +
                     ((C42210 * C1303 - C42213 * C1290 + C42211 * C1309 -
                       C42214 * C1293 + C42212 * C7271 - C42215 * C7268) *
                          C114 +
                      (C42210 * C1317 - C42213 * C1304 + C42211 * C1320 -
                       C42214 * C1310 + C42212 * C7274 - C42215 * C7272) *
                          C47359) *
                         C47105 * C47261) *
                        C47453) *
                       C47139)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C42210 * C122 - C42213 * C115 + C42211 * C491 -
                      C42214 * C481 + C42212 * C497 - C42215 * C484) *
                         C114 +
                     (C42210 * C136 - C42213 * C123 + C42211 * C511 -
                      C42214 * C492 + C42212 * C514 - C42215 * C498) *
                         C47359) *
                        C47105 * C47422 +
                    ((C42213 * C481 - C42210 * C491 + C42214 * C484 -
                      C42211 * C497 + C42215 * C1996 - C42212 * C2002) *
                         C114 +
                     (C42213 * C492 - C42210 * C511 + C42214 * C498 -
                      C42211 * C514 + C42215 * C2003 - C42212 * C2014) *
                         C47359) *
                        C47105 * C47261) *
                       C47156 * C655 +
                   (((C42213 * C116 - C42210 * C124 + C42214 * C482 -
                      C42211 * C493 + C42215 * C485 - C42212 * C499) *
                         C114 +
                     (C42213 * C125 - C42210 * C137 + C42214 * C494 -
                      C42211 * C512 + C42215 * C500 - C42212 * C515) *
                         C47359) *
                        C47105 * C47422 +
                    ((C42210 * C493 - C42213 * C482 + C42211 * C499 -
                      C42214 * C485 + C42212 * C2004 - C42215 * C1997) *
                         C114 +
                     (C42210 * C512 - C42213 * C494 + C42211 * C515 -
                      C42214 * C500 + C42212 * C2015 - C42215 * C2005) *
                         C47359) *
                        C47105 * C47261) *
                       C47156 * C656 +
                   (((C42210 * C126 - C42213 * C117 + C42211 * C495 -
                      C42214 * C483 + C42212 * C501 - C42215 * C486) *
                         C114 +
                     (C42210 * C138 - C42213 * C127 + C42211 * C513 -
                      C42214 * C496 + C42212 * C516 - C42215 * C502) *
                         C47359) *
                        C47105 * C47422 +
                    ((C42213 * C483 - C42210 * C495 + C42214 * C486 -
                      C42211 * C501 + C42215 * C1998 - C42212 * C2006) *
                         C114 +
                     (C42213 * C496 - C42210 * C513 + C42214 * C502 -
                      C42211 * C516 + C42215 * C2007 - C42212 * C2016) *
                         C47359) *
                        C47105 * C47261) *
                       C47156 * C657 +
                   (((C42213 * C118 - C42210 * C128 + C42214 * C487 -
                      C42211 * C503 + C42215 * C488 - C42212 * C505) *
                         C114 +
                     (C42213 * C129 - C42210 * C139 + C42214 * C504 -
                      C42211 * C517 + C42215 * C506 - C42212 * C518) *
                         C47359) *
                        C47105 * C47422 +
                    ((C42210 * C503 - C42213 * C487 + C42211 * C505 -
                      C42214 * C488 + C42212 * C2281 - C42215 * C2280) *
                         C114 +
                     (C42210 * C517 - C42213 * C504 + C42211 * C518 -
                      C42214 * C506 + C42212 * C2283 - C42215 * C2282) *
                         C47359) *
                        C47105 * C47261) *
                       C47156 * C47457)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  ((((C42210 * C122 - C42213 * C115 + C42211 * C491 -
                      C42214 * C481 + C42212 * C497 - C42215 * C484) *
                         C114 +
                     (C42210 * C136 - C42213 * C123 + C42211 * C511 -
                      C42214 * C492 + C42212 * C514 - C42215 * C498) *
                         C47359) *
                        C47105 * C2276 +
                    ((C42213 * C481 - C42210 * C491 + C42214 * C484 -
                      C42211 * C497 + C42215 * C1996 - C42212 * C2002) *
                         C114 +
                     (C42213 * C492 - C42210 * C511 + C42214 * C498 -
                      C42211 * C514 + C42215 * C2003 - C42212 * C2014) *
                         C47359) *
                        C47105 * C2277 +
                    ((C42210 * C497 - C42213 * C484 + C42211 * C2002 -
                      C42214 * C1996 + C42212 * C2008 - C42215 * C1999) *
                         C114 +
                     (C42210 * C514 - C42213 * C498 + C42211 * C2014 -
                      C42214 * C2003 + C42212 * C2017 - C42215 * C2009) *
                         C47359) *
                        C47105 * C2278 +
                    ((C42213 * C1996 - C42210 * C2002 + C42214 * C1999 -
                      C42211 * C2008 + C42215 * C12421 - C42212 * C12423) *
                         C114 +
                     (C42213 * C2003 - C42210 * C2014 + C42214 * C2009 -
                      C42211 * C2017 + C42215 * C12424 - C42212 * C12427) *
                         C47359) *
                        C47105 * C47469) *
                       C47156 * C47407 +
                   (((C42213 * C116 - C42210 * C124 + C42214 * C482 -
                      C42211 * C493 + C42215 * C485 - C42212 * C499) *
                         C114 +
                     (C42213 * C125 - C42210 * C137 + C42214 * C494 -
                      C42211 * C512 + C42215 * C500 - C42212 * C515) *
                         C47359) *
                        C47105 * C2276 +
                    ((C42210 * C493 - C42213 * C482 + C42211 * C499 -
                      C42214 * C485 + C42212 * C2004 - C42215 * C1997) *
                         C114 +
                     (C42210 * C512 - C42213 * C494 + C42211 * C515 -
                      C42214 * C500 + C42212 * C2015 - C42215 * C2005) *
                         C47359) *
                        C47105 * C2277 +
                    ((C42213 * C485 - C42210 * C499 + C42214 * C1997 -
                      C42211 * C2004 + C42215 * C2000 - C42212 * C2010) *
                         C114 +
                     (C42213 * C500 - C42210 * C515 + C42214 * C2005 -
                      C42211 * C2015 + C42215 * C2011 - C42212 * C2018) *
                         C47359) *
                        C47105 * C2278 +
                    ((C42210 * C2004 - C42213 * C1997 + C42211 * C2010 -
                      C42214 * C2000 + C42212 * C12425 - C42215 * C12422) *
                         C114 +
                     (C42210 * C2015 - C42213 * C2005 + C42211 * C2018 -
                      C42214 * C2011 + C42212 * C12428 - C42215 * C12426) *
                         C47359) *
                        C47105 * C47469) *
                       C47156 * C47139)) /
                     (p * q * std::sqrt(p + q));
    d2ee[214] += (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  ((((C42210 * C122 - C42213 * C115 + C42211 * C491 -
                      C42214 * C481 + C42212 * C497 - C42215 * C484) *
                         C114 +
                     (C42210 * C136 - C42213 * C123 + C42211 * C511 -
                      C42214 * C492 + C42212 * C514 - C42215 * C498) *
                         C47359) *
                        C47105 * C47174 * C47492 +
                    ((C42213 * C294 - C42210 * C304 + C42214 * C931 -
                      C42211 * C936 + C42215 * C1286 - C42212 * C1295) *
                         C114 +
                     (C42213 * C305 - C42210 * C324 + C42214 * C937 -
                      C42211 * C946 + C42215 * C1296 - C42212 * C1313) *
                         C47359) *
                        C47105 * C47174 * C47480 +
                    ((C42210 * C310 - C42213 * C297 + C42211 * C1301 -
                      C42214 * C1289 + C42212 * C1307 - C42215 * C1292) *
                         C114 +
                     (C42210 * C327 - C42213 * C311 + C42211 * C1316 -
                      C42214 * C1302 + C42212 * C1319 - C42215 * C1308) *
                         C47359) *
                        C47105 * C47174 * C47453) *
                       C291 +
                   (((C42213 * C116 - C42210 * C124 + C42214 * C482 -
                      C42211 * C493 + C42215 * C485 - C42212 * C499) *
                         C114 +
                     (C42213 * C125 - C42210 * C137 + C42214 * C494 -
                      C42211 * C512 + C42215 * C500 - C42212 * C515) *
                         C47359) *
                        C47105 * C47174 * C47492 +
                    ((C42210 * C306 - C42213 * C295 + C42211 * C938 -
                      C42214 * C932 + C42212 * C1297 - C42215 * C1287) *
                         C114 +
                     (C42210 * C325 - C42213 * C307 + C42211 * C947 -
                      C42214 * C939 + C42212 * C1314 - C42215 * C1298) *
                         C47359) *
                        C47105 * C47174 * C47480 +
                    ((C42213 * C298 - C42210 * C312 + C42214 * C1290 -
                      C42211 * C1303 + C42215 * C1293 - C42212 * C1309) *
                         C114 +
                     (C42213 * C313 - C42210 * C328 + C42214 * C1304 -
                      C42211 * C1317 + C42215 * C1310 - C42212 * C1320) *
                         C47359) *
                        C47105 * C47174 * C47453) *
                       C292 +
                   (((C42210 * C126 - C42213 * C117 + C42211 * C495 -
                      C42214 * C483 + C42212 * C501 - C42215 * C486) *
                         C114 +
                     (C42210 * C138 - C42213 * C127 + C42211 * C513 -
                      C42214 * C496 + C42212 * C516 - C42215 * C502) *
                         C47359) *
                        C47105 * C47174 * C47492 +
                    ((C42213 * C296 - C42210 * C308 + C42214 * C933 -
                      C42211 * C940 + C42215 * C1288 - C42212 * C1299) *
                         C114 +
                     (C42213 * C309 - C42210 * C326 + C42214 * C941 -
                      C42211 * C948 + C42215 * C1300 - C42212 * C1315) *
                         C47359) *
                        C47105 * C47174 * C47480 +
                    ((C42210 * C314 - C42213 * C299 + C42211 * C1305 -
                      C42214 * C1291 + C42212 * C1311 - C42215 * C1294) *
                         C114 +
                     (C42210 * C329 - C42213 * C315 + C42211 * C1318 -
                      C42214 * C1306 + C42212 * C1321 - C42215 * C1312) *
                         C47359) *
                        C47105 * C47174 * C47453) *
                       C47447)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  (((C42210 * C122 - C42213 * C115 + C42211 * C491 -
                     C42214 * C481 + C42212 * C497 - C42215 * C484) *
                        C114 +
                    (C42210 * C136 - C42213 * C123 + C42211 * C511 -
                     C42214 * C492 + C42212 * C514 - C42215 * C498) *
                        C47359) *
                       C47105 * C47174 * C47156 * C108 +
                   ((C42213 * C116 - C42210 * C124 + C42214 * C482 -
                     C42211 * C493 + C42215 * C485 - C42212 * C499) *
                        C114 +
                    (C42213 * C125 - C42210 * C137 + C42214 * C494 -
                     C42211 * C512 + C42215 * C500 - C42212 * C515) *
                        C47359) *
                       C47105 * C47174 * C47156 * C109 +
                   ((C42210 * C126 - C42213 * C117 + C42211 * C495 -
                     C42214 * C483 + C42212 * C501 - C42215 * C486) *
                        C114 +
                    (C42210 * C138 - C42213 * C127 + C42211 * C513 -
                     C42214 * C496 + C42212 * C516 - C42215 * C502) *
                        C47359) *
                       C47105 * C47174 * C47156 * C110 +
                   ((C42213 * C118 - C42210 * C128 + C42214 * C487 -
                     C42211 * C503 + C42215 * C488 - C42212 * C505) *
                        C114 +
                    (C42213 * C129 - C42210 * C139 + C42214 * C504 -
                     C42211 * C517 + C42215 * C506 - C42212 * C518) *
                        C47359) *
                       C47105 * C47174 * C47156 * C111 +
                   ((C42210 * C130 - C42213 * C119 + C42211 * C507 -
                     C42214 * C489 + C42212 * C509 - C42215 * C490) *
                        C114 +
                    (C42210 * C140 - C42213 * C131 + C42211 * C519 -
                     C42214 * C508 + C42212 * C520 - C42215 * C510) *
                        C47359) *
                       C47105 * C47174 * C47156 * C112)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  ((((C42210 * C122 - C42213 * C115 + C42211 * C491 -
                      C42214 * C481 + C42212 * C497 - C42215 * C484) *
                         C114 +
                     (C42210 * C136 - C42213 * C123 + C42211 * C511 -
                      C42214 * C492 + C42212 * C514 - C42215 * C498) *
                         C47359) *
                        C47105 * C47174 * C1078 +
                    ((C42213 * C294 - C42210 * C304 + C42214 * C931 -
                      C42211 * C936 + C42215 * C1286 - C42212 * C1295) *
                         C114 +
                     (C42213 * C305 - C42210 * C324 + C42214 * C937 -
                      C42211 * C946 + C42215 * C1296 - C42212 * C1313) *
                         C47359) *
                        C47105 * C47174 * C1079 +
                    ((C42210 * C310 - C42213 * C297 + C42211 * C1301 -
                      C42214 * C1289 + C42212 * C1307 - C42215 * C1292) *
                         C114 +
                     (C42210 * C327 - C42213 * C311 + C42211 * C1316 -
                      C42214 * C1302 + C42212 * C1319 - C42215 * C1308) *
                         C47359) *
                        C47105 * C47174 * C47453) *
                       C47489 +
                   (((C42213 * C116 - C42210 * C124 + C42214 * C482 -
                      C42211 * C493 + C42215 * C485 - C42212 * C499) *
                         C114 +
                     (C42213 * C125 - C42210 * C137 + C42214 * C494 -
                      C42211 * C512 + C42215 * C500 - C42212 * C515) *
                         C47359) *
                        C47105 * C47174 * C1078 +
                    ((C42210 * C306 - C42213 * C295 + C42211 * C938 -
                      C42214 * C932 + C42212 * C1297 - C42215 * C1287) *
                         C114 +
                     (C42210 * C325 - C42213 * C307 + C42211 * C947 -
                      C42214 * C939 + C42212 * C1314 - C42215 * C1298) *
                         C47359) *
                        C47105 * C47174 * C1079 +
                    ((C42213 * C298 - C42210 * C312 + C42214 * C1290 -
                      C42211 * C1303 + C42215 * C1293 - C42212 * C1309) *
                         C114 +
                     (C42213 * C313 - C42210 * C328 + C42214 * C1304 -
                      C42211 * C1317 + C42215 * C1310 - C42212 * C1320) *
                         C47359) *
                        C47105 * C47174 * C47453) *
                       C47476 +
                   (((C42210 * C126 - C42213 * C117 + C42211 * C495 -
                      C42214 * C483 + C42212 * C501 - C42215 * C486) *
                         C114 +
                     (C42210 * C138 - C42213 * C127 + C42211 * C513 -
                      C42214 * C496 + C42212 * C516 - C42215 * C502) *
                         C47359) *
                        C47105 * C47174 * C1078 +
                    ((C42213 * C296 - C42210 * C308 + C42214 * C933 -
                      C42211 * C940 + C42215 * C1288 - C42212 * C1299) *
                         C114 +
                     (C42213 * C309 - C42210 * C326 + C42214 * C941 -
                      C42211 * C948 + C42215 * C1300 - C42212 * C1315) *
                         C47359) *
                        C47105 * C47174 * C1079 +
                    ((C42210 * C314 - C42213 * C299 + C42211 * C1305 -
                      C42214 * C1291 + C42212 * C1311 - C42215 * C1294) *
                         C114 +
                     (C42210 * C329 - C42213 * C315 + C42211 * C1318 -
                      C42214 * C1306 + C42212 * C1321 - C42215 * C1312) *
                         C47359) *
                        C47105 * C47174 * C47453) *
                       C47447)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  (((C42210 * C122 - C42213 * C115 + C42211 * C491 -
                     C42214 * C481 + C42212 * C497 - C42215 * C484) *
                        C114 +
                    (C42210 * C136 - C42213 * C123 + C42211 * C511 -
                     C42214 * C492 + C42212 * C514 - C42215 * C498) *
                        C47359) *
                       C47105 * C47174 * C1146 +
                   ((C42213 * C294 - C42210 * C304 + C42214 * C931 -
                     C42211 * C936 + C42215 * C1286 - C42212 * C1295) *
                        C114 +
                    (C42213 * C305 - C42210 * C324 + C42214 * C937 -
                     C42211 * C946 + C42215 * C1296 - C42212 * C1313) *
                        C47359) *
                       C47105 * C47174 * C1147 +
                   ((C42210 * C310 - C42213 * C297 + C42211 * C1301 -
                     C42214 * C1289 + C42212 * C1307 - C42215 * C1292) *
                        C114 +
                    (C42210 * C327 - C42213 * C311 + C42211 * C1316 -
                     C42214 * C1302 + C42212 * C1319 - C42215 * C1308) *
                        C47359) *
                       C47105 * C47174 * C1148 +
                   ((C42213 * C1152 - C42210 * C1158 + C42214 * C1694 -
                     C42211 * C1697 + C42215 * C5921 - C42212 * C5923) *
                        C114 +
                    (C42213 * C1159 - C42210 * C1170 + C42214 * C1698 -
                     C42211 * C1703 + C42215 * C5924 - C42212 * C5927) *
                        C47359) *
                       C47105 * C47174 * C1149 +
                   ((C42210 * C1164 - C42213 * C1155 + C42211 * C6413 -
                     C42214 * C6411 + C42212 * C22245 - C42215 * C22244) *
                        C114 +
                    (C42210 * C1173 - C42213 * C1165 + C42211 * C6417 -
                     C42214 * C6414 + C42212 * C22247 - C42215 * C22246) *
                        C47359) *
                       C47105 * C47174 * C1150) *
                  C47128) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C42210 * C122 - C42213 * C115 + C42211 * C491 -
                      C42214 * C481 + C42212 * C497 - C42215 * C484) *
                         C114 +
                     (C42210 * C136 - C42213 * C123 + C42211 * C511 -
                      C42214 * C492 + C42212 * C514 - C42215 * C498) *
                         C47359) *
                        C47105 * C1816 +
                    ((C42213 * C481 - C42210 * C491 + C42214 * C484 -
                      C42211 * C497 + C42215 * C1996 - C42212 * C2002) *
                         C114 +
                     (C42213 * C492 - C42210 * C511 + C42214 * C498 -
                      C42211 * C514 + C42215 * C2003 - C42212 * C2014) *
                         C47359) *
                        C47105 * C1817 +
                    ((C42210 * C497 - C42213 * C484 + C42211 * C2002 -
                      C42214 * C1996 + C42212 * C2008 - C42215 * C1999) *
                         C114 +
                     (C42210 * C514 - C42213 * C498 + C42211 * C2014 -
                      C42214 * C2003 + C42212 * C2017 - C42215 * C2009) *
                         C47359) *
                        C47105 * C47456) *
                       C47156 * C47489 +
                   (((C42213 * C116 - C42210 * C124 + C42214 * C482 -
                      C42211 * C493 + C42215 * C485 - C42212 * C499) *
                         C114 +
                     (C42213 * C125 - C42210 * C137 + C42214 * C494 -
                      C42211 * C512 + C42215 * C500 - C42212 * C515) *
                         C47359) *
                        C47105 * C1816 +
                    ((C42210 * C493 - C42213 * C482 + C42211 * C499 -
                      C42214 * C485 + C42212 * C2004 - C42215 * C1997) *
                         C114 +
                     (C42210 * C512 - C42213 * C494 + C42211 * C515 -
                      C42214 * C500 + C42212 * C2015 - C42215 * C2005) *
                         C47359) *
                        C47105 * C1817 +
                    ((C42213 * C485 - C42210 * C499 + C42214 * C1997 -
                      C42211 * C2004 + C42215 * C2000 - C42212 * C2010) *
                         C114 +
                     (C42213 * C500 - C42210 * C515 + C42214 * C2005 -
                      C42211 * C2015 + C42215 * C2011 - C42212 * C2018) *
                         C47359) *
                        C47105 * C47456) *
                       C47156 * C47476 +
                   (((C42210 * C126 - C42213 * C117 + C42211 * C495 -
                      C42214 * C483 + C42212 * C501 - C42215 * C486) *
                         C114 +
                     (C42210 * C138 - C42213 * C127 + C42211 * C513 -
                      C42214 * C496 + C42212 * C516 - C42215 * C502) *
                         C47359) *
                        C47105 * C1816 +
                    ((C42213 * C483 - C42210 * C495 + C42214 * C486 -
                      C42211 * C501 + C42215 * C1998 - C42212 * C2006) *
                         C114 +
                     (C42213 * C496 - C42210 * C513 + C42214 * C502 -
                      C42211 * C516 + C42215 * C2007 - C42212 * C2016) *
                         C47359) *
                        C47105 * C1817 +
                    ((C42210 * C501 - C42213 * C486 + C42211 * C2006 -
                      C42214 * C1998 + C42212 * C2012 - C42215 * C2001) *
                         C114 +
                     (C42210 * C516 - C42213 * C502 + C42211 * C2016 -
                      C42214 * C2007 + C42212 * C2019 - C42215 * C2013) *
                         C47359) *
                        C47105 * C47456) *
                       C47156 * C47447)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C42210 * C122 - C42213 * C115 + C42211 * C491 -
                      C42214 * C481 + C42212 * C497 - C42215 * C484) *
                         C114 +
                     (C42210 * C136 - C42213 * C123 + C42211 * C511 -
                      C42214 * C492 + C42212 * C514 - C42215 * C498) *
                         C47359) *
                        C47105 * C1816 +
                    ((C42213 * C481 - C42210 * C491 + C42214 * C484 -
                      C42211 * C497 + C42215 * C1996 - C42212 * C2002) *
                         C114 +
                     (C42213 * C492 - C42210 * C511 + C42214 * C498 -
                      C42211 * C514 + C42215 * C2003 - C42212 * C2014) *
                         C47359) *
                        C47105 * C1817 +
                    ((C42210 * C497 - C42213 * C484 + C42211 * C2002 -
                      C42214 * C1996 + C42212 * C2008 - C42215 * C1999) *
                         C114 +
                     (C42210 * C514 - C42213 * C498 + C42211 * C2014 -
                      C42214 * C2003 + C42212 * C2017 - C42215 * C2009) *
                         C47359) *
                        C47105 * C47456) *
                       C47492 +
                   (((C42213 * C294 - C42210 * C304 + C42214 * C931 -
                      C42211 * C936 + C42215 * C1286 - C42212 * C1295) *
                         C114 +
                     (C42213 * C305 - C42210 * C324 + C42214 * C937 -
                      C42211 * C946 + C42215 * C1296 - C42212 * C1313) *
                         C47359) *
                        C47105 * C1816 +
                    ((C42210 * C936 - C42213 * C931 + C42211 * C1295 -
                      C42214 * C1286 + C42212 * C2393 - C42215 * C2390) *
                         C114 +
                     (C42210 * C946 - C42213 * C937 + C42211 * C1313 -
                      C42214 * C1296 + C42212 * C2399 - C42215 * C2394) *
                         C47359) *
                        C47105 * C1817 +
                    ((C42213 * C1286 - C42210 * C1295 + C42214 * C2390 -
                      C42211 * C2393 + C42215 * C6797 - C42212 * C6799) *
                         C114 +
                     (C42213 * C1296 - C42210 * C1313 + C42214 * C2394 -
                      C42211 * C2399 + C42215 * C6800 - C42212 * C6803) *
                         C47359) *
                        C47105 * C47456) *
                       C47480 +
                   (((C42210 * C310 - C42213 * C297 + C42211 * C1301 -
                      C42214 * C1289 + C42212 * C1307 - C42215 * C1292) *
                         C114 +
                     (C42210 * C327 - C42213 * C311 + C42211 * C1316 -
                      C42214 * C1302 + C42212 * C1319 - C42215 * C1308) *
                         C47359) *
                        C47105 * C1816 +
                    ((C42213 * C1289 - C42210 * C1301 + C42214 * C1292 -
                      C42211 * C1307 + C42215 * C7267 - C42212 * C7269) *
                         C114 +
                     (C42213 * C1302 - C42210 * C1316 + C42214 * C1308 -
                      C42211 * C1319 + C42215 * C7270 - C42212 * C7273) *
                         C47359) *
                        C47105 * C1817 +
                    ((C42210 * C1307 - C42213 * C1292 + C42211 * C7269 -
                      C42214 * C7267 + C42212 * C22891 - C42215 * C22890) *
                         C114 +
                     (C42210 * C1319 - C42213 * C1308 + C42211 * C7273 -
                      C42214 * C7270 + C42212 * C22893 - C42215 * C22892) *
                         C47359) *
                        C47105 * C47456) *
                       C47453) *
                  C47128) /
                     (p * q * std::sqrt(p + q));
    d2ee[215] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((((C42210 * C122 - C42213 * C115 + C42211 * C491 -
                       C42214 * C481 + C42212 * C497 - C42215 * C484) *
                          C114 +
                      (C42210 * C136 - C42213 * C123 + C42211 * C511 -
                       C42214 * C492 + C42212 * C514 - C42215 * C498) *
                          C47359) *
                         C47105 * C3262 +
                     ((C42213 * C481 - C42210 * C491 + C42214 * C484 -
                       C42211 * C497 + C42215 * C1996 - C42212 * C2002) *
                          C114 +
                      (C42213 * C492 - C42210 * C511 + C42214 * C498 -
                       C42211 * C514 + C42215 * C2003 - C42212 * C2014) *
                          C47359) *
                         C47105 * C47261) *
                        C47421 +
                    (((C42213 * C294 - C42210 * C304 + C42214 * C931 -
                       C42211 * C936 + C42215 * C1286 - C42212 * C1295) *
                          C114 +
                      (C42213 * C305 - C42210 * C324 + C42214 * C937 -
                       C42211 * C946 + C42215 * C1296 - C42212 * C1313) *
                          C47359) *
                         C47105 * C3262 +
                     ((C42210 * C936 - C42213 * C931 + C42211 * C1295 -
                       C42214 * C1286 + C42212 * C2393 - C42215 * C2390) *
                          C114 +
                      (C42210 * C946 - C42213 * C937 + C42211 * C1313 -
                       C42214 * C1296 + C42212 * C2399 - C42215 * C2394) *
                          C47359) *
                         C47105 * C47261) *
                        C47219) *
                       C47133 +
                   ((((C42213 * C116 - C42210 * C124 + C42214 * C482 -
                       C42211 * C493 + C42215 * C485 - C42212 * C499) *
                          C114 +
                      (C42213 * C125 - C42210 * C137 + C42214 * C494 -
                       C42211 * C512 + C42215 * C500 - C42212 * C515) *
                          C47359) *
                         C47105 * C3262 +
                     ((C42210 * C493 - C42213 * C482 + C42211 * C499 -
                       C42214 * C485 + C42212 * C2004 - C42215 * C1997) *
                          C114 +
                      (C42210 * C512 - C42213 * C494 + C42211 * C515 -
                       C42214 * C500 + C42212 * C2015 - C42215 * C2005) *
                          C47359) *
                         C47105 * C47261) *
                        C47421 +
                    (((C42210 * C306 - C42213 * C295 + C42211 * C938 -
                       C42214 * C932 + C42212 * C1297 - C42215 * C1287) *
                          C114 +
                      (C42210 * C325 - C42213 * C307 + C42211 * C947 -
                       C42214 * C939 + C42212 * C1314 - C42215 * C1298) *
                          C47359) *
                         C47105 * C3262 +
                     ((C42213 * C932 - C42210 * C938 + C42214 * C1287 -
                       C42211 * C1297 + C42215 * C2391 - C42212 * C2395) *
                          C114 +
                      (C42213 * C939 - C42210 * C947 + C42214 * C1298 -
                       C42211 * C1314 + C42215 * C2396 - C42212 * C2400) *
                          C47359) *
                         C47105 * C47261) *
                        C47219) *
                       C47142 +
                   ((((C42210 * C126 - C42213 * C117 + C42211 * C495 -
                       C42214 * C483 + C42212 * C501 - C42215 * C486) *
                          C114 +
                      (C42210 * C138 - C42213 * C127 + C42211 * C513 -
                       C42214 * C496 + C42212 * C516 - C42215 * C502) *
                          C47359) *
                         C47105 * C3262 +
                     ((C42213 * C483 - C42210 * C495 + C42214 * C486 -
                       C42211 * C501 + C42215 * C1998 - C42212 * C2006) *
                          C114 +
                      (C42213 * C496 - C42210 * C513 + C42214 * C502 -
                       C42211 * C516 + C42215 * C2007 - C42212 * C2016) *
                          C47359) *
                         C47105 * C47261) *
                        C47421 +
                    (((C42213 * C296 - C42210 * C308 + C42214 * C933 -
                       C42211 * C940 + C42215 * C1288 - C42212 * C1299) *
                          C114 +
                      (C42213 * C309 - C42210 * C326 + C42214 * C941 -
                       C42211 * C948 + C42215 * C1300 - C42212 * C1315) *
                          C47359) *
                         C47105 * C3262 +
                     ((C42210 * C940 - C42213 * C933 + C42211 * C1299 -
                       C42214 * C1288 + C42212 * C2397 - C42215 * C2392) *
                          C114 +
                      (C42210 * C948 - C42213 * C941 + C42211 * C1315 -
                       C42214 * C1300 + C42212 * C2401 - C42215 * C2398) *
                          C47359) *
                         C47105 * C47261) *
                        C47219) *
                       C2871)) /
                 (p * q * std::sqrt(p + q));
    d2ee[216] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((((C42210 * C122 - C42213 * C115 + C42211 * C491 -
                       C42214 * C481 + C42212 * C497 - C42215 * C484) *
                          C114 +
                      (C42210 * C136 - C42213 * C123 + C42211 * C511 -
                       C42214 * C492 + C42212 * C514 - C42215 * C498) *
                          C47359) *
                         C47105 * C47257 +
                     ((C42213 * C481 - C42210 * C491 + C42214 * C484 -
                       C42211 * C497 + C42215 * C1996 - C42212 * C2002) *
                          C114 +
                      (C42213 * C492 - C42210 * C511 + C42214 * C498 -
                       C42211 * C514 + C42215 * C2003 - C42212 * C2014) *
                          C47359) *
                         C47105 * C47264 +
                     ((C42210 * C497 - C42213 * C484 + C42211 * C2002 -
                       C42214 * C1996 + C42212 * C2008 - C42215 * C1999) *
                          C114 +
                      (C42210 * C514 - C42213 * C498 + C42211 * C2014 -
                       C42214 * C2003 + C42212 * C2017 - C42215 * C2009) *
                          C47359) *
                         C47105 * C3770) *
                        C47421 +
                    (((C42213 * C294 - C42210 * C304 + C42214 * C931 -
                       C42211 * C936 + C42215 * C1286 - C42212 * C1295) *
                          C114 +
                      (C42213 * C305 - C42210 * C324 + C42214 * C937 -
                       C42211 * C946 + C42215 * C1296 - C42212 * C1313) *
                          C47359) *
                         C47105 * C47257 +
                     ((C42210 * C936 - C42213 * C931 + C42211 * C1295 -
                       C42214 * C1286 + C42212 * C2393 - C42215 * C2390) *
                          C114 +
                      (C42210 * C946 - C42213 * C937 + C42211 * C1313 -
                       C42214 * C1296 + C42212 * C2399 - C42215 * C2394) *
                          C47359) *
                         C47105 * C47264 +
                     ((C42213 * C1286 - C42210 * C1295 + C42214 * C2390 -
                       C42211 * C2393 + C42215 * C6797 - C42212 * C6799) *
                          C114 +
                      (C42213 * C1296 - C42210 * C1313 + C42214 * C2394 -
                       C42211 * C2399 + C42215 * C6800 - C42212 * C6803) *
                          C47359) *
                         C47105 * C3770) *
                        C47219) *
                       C2608 +
                   ((((C42213 * C116 - C42210 * C124 + C42214 * C482 -
                       C42211 * C493 + C42215 * C485 - C42212 * C499) *
                          C114 +
                      (C42213 * C125 - C42210 * C137 + C42214 * C494 -
                       C42211 * C512 + C42215 * C500 - C42212 * C515) *
                          C47359) *
                         C47105 * C47257 +
                     ((C42210 * C493 - C42213 * C482 + C42211 * C499 -
                       C42214 * C485 + C42212 * C2004 - C42215 * C1997) *
                          C114 +
                      (C42210 * C512 - C42213 * C494 + C42211 * C515 -
                       C42214 * C500 + C42212 * C2015 - C42215 * C2005) *
                          C47359) *
                         C47105 * C47264 +
                     ((C42213 * C485 - C42210 * C499 + C42214 * C1997 -
                       C42211 * C2004 + C42215 * C2000 - C42212 * C2010) *
                          C114 +
                      (C42213 * C500 - C42210 * C515 + C42214 * C2005 -
                       C42211 * C2015 + C42215 * C2011 - C42212 * C2018) *
                          C47359) *
                         C47105 * C3770) *
                        C47421 +
                    (((C42210 * C306 - C42213 * C295 + C42211 * C938 -
                       C42214 * C932 + C42212 * C1297 - C42215 * C1287) *
                          C114 +
                      (C42210 * C325 - C42213 * C307 + C42211 * C947 -
                       C42214 * C939 + C42212 * C1314 - C42215 * C1298) *
                          C47359) *
                         C47105 * C47257 +
                     ((C42213 * C932 - C42210 * C938 + C42214 * C1287 -
                       C42211 * C1297 + C42215 * C2391 - C42212 * C2395) *
                          C114 +
                      (C42213 * C939 - C42210 * C947 + C42214 * C1298 -
                       C42211 * C1314 + C42215 * C2396 - C42212 * C2400) *
                          C47359) *
                         C47105 * C47264 +
                     ((C42210 * C1297 - C42213 * C1287 + C42211 * C2395 -
                       C42214 * C2391 + C42212 * C6801 - C42215 * C6798) *
                          C114 +
                      (C42210 * C1314 - C42213 * C1298 + C42211 * C2400 -
                       C42214 * C2396 + C42212 * C6804 - C42215 * C6802) *
                          C47359) *
                         C47105 * C3770) *
                        C47219) *
                       C47139)) /
                 (p * q * std::sqrt(p + q));
    d2ee[217] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((((C42210 * C122 - C42213 * C115 + C42211 * C491 -
                       C42214 * C481 + C42212 * C497 - C42215 * C484) *
                          C114 +
                      (C42210 * C136 - C42213 * C123 + C42211 * C511 -
                       C42214 * C492 + C42212 * C514 - C42215 * C498) *
                          C47359) *
                         C47105 * C3262 +
                     ((C42213 * C481 - C42210 * C491 + C42214 * C484 -
                       C42211 * C497 + C42215 * C1996 - C42212 * C2002) *
                          C114 +
                      (C42213 * C492 - C42210 * C511 + C42214 * C498 -
                       C42211 * C514 + C42215 * C2003 - C42212 * C2014) *
                          C47359) *
                         C47105 * C47261) *
                        C47492 +
                    (((C42213 * C294 - C42210 * C304 + C42214 * C931 -
                       C42211 * C936 + C42215 * C1286 - C42212 * C1295) *
                          C114 +
                      (C42213 * C305 - C42210 * C324 + C42214 * C937 -
                       C42211 * C946 + C42215 * C1296 - C42212 * C1313) *
                          C47359) *
                         C47105 * C3262 +
                     ((C42210 * C936 - C42213 * C931 + C42211 * C1295 -
                       C42214 * C1286 + C42212 * C2393 - C42215 * C2390) *
                          C114 +
                      (C42210 * C946 - C42213 * C937 + C42211 * C1313 -
                       C42214 * C1296 + C42212 * C2399 - C42215 * C2394) *
                          C47359) *
                         C47105 * C47261) *
                        C47480 +
                    (((C42210 * C310 - C42213 * C297 + C42211 * C1301 -
                       C42214 * C1289 + C42212 * C1307 - C42215 * C1292) *
                          C114 +
                      (C42210 * C327 - C42213 * C311 + C42211 * C1316 -
                       C42214 * C1302 + C42212 * C1319 - C42215 * C1308) *
                          C47359) *
                         C47105 * C3262 +
                     ((C42213 * C1289 - C42210 * C1301 + C42214 * C1292 -
                       C42211 * C1307 + C42215 * C7267 - C42212 * C7269) *
                          C114 +
                      (C42213 * C1302 - C42210 * C1316 + C42214 * C1308 -
                       C42211 * C1319 + C42215 * C7270 - C42212 * C7273) *
                          C47359) *
                         C47105 * C47261) *
                        C47453) *
                       C2608 +
                   ((((C42213 * C116 - C42210 * C124 + C42214 * C482 -
                       C42211 * C493 + C42215 * C485 - C42212 * C499) *
                          C114 +
                      (C42213 * C125 - C42210 * C137 + C42214 * C494 -
                       C42211 * C512 + C42215 * C500 - C42212 * C515) *
                          C47359) *
                         C47105 * C3262 +
                     ((C42210 * C493 - C42213 * C482 + C42211 * C499 -
                       C42214 * C485 + C42212 * C2004 - C42215 * C1997) *
                          C114 +
                      (C42210 * C512 - C42213 * C494 + C42211 * C515 -
                       C42214 * C500 + C42212 * C2015 - C42215 * C2005) *
                          C47359) *
                         C47105 * C47261) *
                        C47492 +
                    (((C42210 * C306 - C42213 * C295 + C42211 * C938 -
                       C42214 * C932 + C42212 * C1297 - C42215 * C1287) *
                          C114 +
                      (C42210 * C325 - C42213 * C307 + C42211 * C947 -
                       C42214 * C939 + C42212 * C1314 - C42215 * C1298) *
                          C47359) *
                         C47105 * C3262 +
                     ((C42213 * C932 - C42210 * C938 + C42214 * C1287 -
                       C42211 * C1297 + C42215 * C2391 - C42212 * C2395) *
                          C114 +
                      (C42213 * C939 - C42210 * C947 + C42214 * C1298 -
                       C42211 * C1314 + C42215 * C2396 - C42212 * C2400) *
                          C47359) *
                         C47105 * C47261) *
                        C47480 +
                    (((C42213 * C298 - C42210 * C312 + C42214 * C1290 -
                       C42211 * C1303 + C42215 * C1293 - C42212 * C1309) *
                          C114 +
                      (C42213 * C313 - C42210 * C328 + C42214 * C1304 -
                       C42211 * C1317 + C42215 * C1310 - C42212 * C1320) *
                          C47359) *
                         C47105 * C3262 +
                     ((C42210 * C1303 - C42213 * C1290 + C42211 * C1309 -
                       C42214 * C1293 + C42212 * C7271 - C42215 * C7268) *
                          C114 +
                      (C42210 * C1317 - C42213 * C1304 + C42211 * C1320 -
                       C42214 * C1310 + C42212 * C7274 - C42215 * C7272) *
                          C47359) *
                         C47105 * C47261) *
                        C47453) *
                       C47139)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C42210 * C122 - C42213 * C115 + C42211 * C491 -
                      C42214 * C481 + C42212 * C497 - C42215 * C484) *
                         C114 +
                     (C42210 * C136 - C42213 * C123 + C42211 * C511 -
                      C42214 * C492 + C42212 * C514 - C42215 * C498) *
                         C47359) *
                        C47105 * C3262 +
                    ((C42213 * C481 - C42210 * C491 + C42214 * C484 -
                      C42211 * C497 + C42215 * C1996 - C42212 * C2002) *
                         C114 +
                     (C42213 * C492 - C42210 * C511 + C42214 * C498 -
                      C42211 * C514 + C42215 * C2003 - C42212 * C2014) *
                         C47359) *
                        C47105 * C47261) *
                       C47156 * C47498 +
                   (((C42213 * C116 - C42210 * C124 + C42214 * C482 -
                      C42211 * C493 + C42215 * C485 - C42212 * C499) *
                         C114 +
                     (C42213 * C125 - C42210 * C137 + C42214 * C494 -
                      C42211 * C512 + C42215 * C500 - C42212 * C515) *
                         C47359) *
                        C47105 * C3262 +
                    ((C42210 * C493 - C42213 * C482 + C42211 * C499 -
                      C42214 * C485 + C42212 * C2004 - C42215 * C1997) *
                         C114 +
                     (C42210 * C512 - C42213 * C494 + C42211 * C515 -
                      C42214 * C500 + C42212 * C2015 - C42215 * C2005) *
                         C47359) *
                        C47105 * C47261) *
                       C47156 * C47491 +
                   (((C42210 * C126 - C42213 * C117 + C42211 * C495 -
                      C42214 * C483 + C42212 * C501 - C42215 * C486) *
                         C114 +
                     (C42210 * C138 - C42213 * C127 + C42211 * C513 -
                      C42214 * C496 + C42212 * C516 - C42215 * C502) *
                         C47359) *
                        C47105 * C3262 +
                    ((C42213 * C483 - C42210 * C495 + C42214 * C486 -
                      C42211 * C501 + C42215 * C1998 - C42212 * C2006) *
                         C114 +
                     (C42213 * C496 - C42210 * C513 + C42214 * C502 -
                      C42211 * C516 + C42215 * C2007 - C42212 * C2016) *
                         C47359) *
                        C47105 * C47261) *
                       C47156 * C47478 +
                   (((C42213 * C118 - C42210 * C128 + C42214 * C487 -
                      C42211 * C503 + C42215 * C488 - C42212 * C505) *
                         C114 +
                     (C42213 * C129 - C42210 * C139 + C42214 * C504 -
                      C42211 * C517 + C42215 * C506 - C42212 * C518) *
                         C47359) *
                        C47105 * C3262 +
                    ((C42210 * C503 - C42213 * C487 + C42211 * C505 -
                      C42214 * C488 + C42212 * C2281 - C42215 * C2280) *
                         C114 +
                     (C42210 * C517 - C42213 * C504 + C42211 * C518 -
                      C42214 * C506 + C42212 * C2283 - C42215 * C2282) *
                         C47359) *
                        C47105 * C47261) *
                       C47156 * C47457)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  ((((C42210 * C122 - C42213 * C115 + C42211 * C491 -
                      C42214 * C481 + C42212 * C497 - C42215 * C484) *
                         C114 +
                     (C42210 * C136 - C42213 * C123 + C42211 * C511 -
                      C42214 * C492 + C42212 * C514 - C42215 * C498) *
                         C47359) *
                        C47105 * C47500 +
                    ((C42213 * C481 - C42210 * C491 + C42214 * C484 -
                      C42211 * C497 + C42215 * C1996 - C42212 * C2002) *
                         C114 +
                     (C42213 * C492 - C42210 * C511 + C42214 * C498 -
                      C42211 * C514 + C42215 * C2003 - C42212 * C2014) *
                         C47359) *
                        C47105 * C47497 +
                    ((C42210 * C497 - C42213 * C484 + C42211 * C2002 -
                      C42214 * C1996 + C42212 * C2008 - C42215 * C1999) *
                         C114 +
                     (C42210 * C514 - C42213 * C498 + C42211 * C2014 -
                      C42214 * C2003 + C42212 * C2017 - C42215 * C2009) *
                         C47359) *
                        C47105 * C47488 +
                    ((C42213 * C1996 - C42210 * C2002 + C42214 * C1999 -
                      C42211 * C2008 + C42215 * C12421 - C42212 * C12423) *
                         C114 +
                     (C42213 * C2003 - C42210 * C2014 + C42214 * C2009 -
                      C42211 * C2017 + C42215 * C12424 - C42212 * C12427) *
                         C47359) *
                        C47105 * C47469) *
                       C47156 * C2608 +
                   (((C42213 * C116 - C42210 * C124 + C42214 * C482 -
                      C42211 * C493 + C42215 * C485 - C42212 * C499) *
                         C114 +
                     (C42213 * C125 - C42210 * C137 + C42214 * C494 -
                      C42211 * C512 + C42215 * C500 - C42212 * C515) *
                         C47359) *
                        C47105 * C47500 +
                    ((C42210 * C493 - C42213 * C482 + C42211 * C499 -
                      C42214 * C485 + C42212 * C2004 - C42215 * C1997) *
                         C114 +
                     (C42210 * C512 - C42213 * C494 + C42211 * C515 -
                      C42214 * C500 + C42212 * C2015 - C42215 * C2005) *
                         C47359) *
                        C47105 * C47497 +
                    ((C42213 * C485 - C42210 * C499 + C42214 * C1997 -
                      C42211 * C2004 + C42215 * C2000 - C42212 * C2010) *
                         C114 +
                     (C42213 * C500 - C42210 * C515 + C42214 * C2005 -
                      C42211 * C2015 + C42215 * C2011 - C42212 * C2018) *
                         C47359) *
                        C47105 * C47488 +
                    ((C42210 * C2004 - C42213 * C1997 + C42211 * C2010 -
                      C42214 * C2000 + C42212 * C12425 - C42215 * C12422) *
                         C114 +
                     (C42210 * C2015 - C42213 * C2005 + C42211 * C2018 -
                      C42214 * C2011 + C42212 * C12428 - C42215 * C12426) *
                         C47359) *
                        C47105 * C47469) *
                       C47156 * C47139)) /
                     (p * q * std::sqrt(p + q));
    d2ee[218] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((C42210 * C122 - C42213 * C115 + C42211 * C491 -
                      C42214 * C481 + C42212 * C497 - C42215 * C484) *
                         C114 +
                     (C42210 * C136 - C42213 * C123 + C42211 * C511 -
                      C42214 * C492 + C42212 * C514 - C42215 * C498) *
                         C47359) *
                        C47105 * C47257 +
                    ((C42213 * C481 - C42210 * C491 + C42214 * C484 -
                      C42211 * C497 + C42215 * C1996 - C42212 * C2002) *
                         C114 +
                     (C42213 * C492 - C42210 * C511 + C42214 * C498 -
                      C42211 * C514 + C42215 * C2003 - C42212 * C2014) *
                         C47359) *
                        C47105 * C47264 +
                    ((C42210 * C497 - C42213 * C484 + C42211 * C2002 -
                      C42214 * C1996 + C42212 * C2008 - C42215 * C1999) *
                         C114 +
                     (C42210 * C514 - C42213 * C498 + C42211 * C2014 -
                      C42214 * C2003 + C42212 * C2017 - C42215 * C2009) *
                         C47359) *
                        C47105 * C3770) *
                       C47156 * C47133 +
                   (((C42213 * C116 - C42210 * C124 + C42214 * C482 -
                      C42211 * C493 + C42215 * C485 - C42212 * C499) *
                         C114 +
                     (C42213 * C125 - C42210 * C137 + C42214 * C494 -
                      C42211 * C512 + C42215 * C500 - C42212 * C515) *
                         C47359) *
                        C47105 * C47257 +
                    ((C42210 * C493 - C42213 * C482 + C42211 * C499 -
                      C42214 * C485 + C42212 * C2004 - C42215 * C1997) *
                         C114 +
                     (C42210 * C512 - C42213 * C494 + C42211 * C515 -
                      C42214 * C500 + C42212 * C2015 - C42215 * C2005) *
                         C47359) *
                        C47105 * C47264 +
                    ((C42213 * C485 - C42210 * C499 + C42214 * C1997 -
                      C42211 * C2004 + C42215 * C2000 - C42212 * C2010) *
                         C114 +
                     (C42213 * C500 - C42210 * C515 + C42214 * C2005 -
                      C42211 * C2015 + C42215 * C2011 - C42212 * C2018) *
                         C47359) *
                        C47105 * C3770) *
                       C47156 * C47142 +
                   (((C42210 * C126 - C42213 * C117 + C42211 * C495 -
                      C42214 * C483 + C42212 * C501 - C42215 * C486) *
                         C114 +
                     (C42210 * C138 - C42213 * C127 + C42211 * C513 -
                      C42214 * C496 + C42212 * C516 - C42215 * C502) *
                         C47359) *
                        C47105 * C47257 +
                    ((C42213 * C483 - C42210 * C495 + C42214 * C486 -
                      C42211 * C501 + C42215 * C1998 - C42212 * C2006) *
                         C114 +
                     (C42213 * C496 - C42210 * C513 + C42214 * C502 -
                      C42211 * C516 + C42215 * C2007 - C42212 * C2016) *
                         C47359) *
                        C47105 * C47264 +
                    ((C42210 * C501 - C42213 * C486 + C42211 * C2006 -
                      C42214 * C1998 + C42212 * C2012 - C42215 * C2001) *
                         C114 +
                     (C42210 * C516 - C42213 * C502 + C42211 * C2016 -
                      C42214 * C2007 + C42212 * C2019 - C42215 * C2013) *
                         C47359) *
                        C47105 * C3770) *
                       C47156 * C2871)) /
                 (p * q * std::sqrt(p + q));
    d2ee[219] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((C42210 * C122 - C42213 * C115 + C42211 * C491 -
                      C42214 * C481 + C42212 * C497 - C42215 * C484) *
                         C114 +
                     (C42210 * C136 - C42213 * C123 + C42211 * C511 -
                      C42214 * C492 + C42212 * C514 - C42215 * C498) *
                         C47359) *
                        C47105 * C3262 +
                    ((C42213 * C481 - C42210 * C491 + C42214 * C484 -
                      C42211 * C497 + C42215 * C1996 - C42212 * C2002) *
                         C114 +
                     (C42213 * C492 - C42210 * C511 + C42214 * C498 -
                      C42211 * C514 + C42215 * C2003 - C42212 * C2014) *
                         C47359) *
                        C47105 * C47261) *
                       C47156 * C47498 +
                   (((C42213 * C116 - C42210 * C124 + C42214 * C482 -
                      C42211 * C493 + C42215 * C485 - C42212 * C499) *
                         C114 +
                     (C42213 * C125 - C42210 * C137 + C42214 * C494 -
                      C42211 * C512 + C42215 * C500 - C42212 * C515) *
                         C47359) *
                        C47105 * C3262 +
                    ((C42210 * C493 - C42213 * C482 + C42211 * C499 -
                      C42214 * C485 + C42212 * C2004 - C42215 * C1997) *
                         C114 +
                     (C42210 * C512 - C42213 * C494 + C42211 * C515 -
                      C42214 * C500 + C42212 * C2015 - C42215 * C2005) *
                         C47359) *
                        C47105 * C47261) *
                       C47156 * C47491 +
                   (((C42210 * C126 - C42213 * C117 + C42211 * C495 -
                      C42214 * C483 + C42212 * C501 - C42215 * C486) *
                         C114 +
                     (C42210 * C138 - C42213 * C127 + C42211 * C513 -
                      C42214 * C496 + C42212 * C516 - C42215 * C502) *
                         C47359) *
                        C47105 * C3262 +
                    ((C42213 * C483 - C42210 * C495 + C42214 * C486 -
                      C42211 * C501 + C42215 * C1998 - C42212 * C2006) *
                         C114 +
                     (C42213 * C496 - C42210 * C513 + C42214 * C502 -
                      C42211 * C516 + C42215 * C2007 - C42212 * C2016) *
                         C47359) *
                        C47105 * C47261) *
                       C47156 * C47478 +
                   (((C42213 * C118 - C42210 * C128 + C42214 * C487 -
                      C42211 * C503 + C42215 * C488 - C42212 * C505) *
                         C114 +
                     (C42213 * C129 - C42210 * C139 + C42214 * C504 -
                      C42211 * C517 + C42215 * C506 - C42212 * C518) *
                         C47359) *
                        C47105 * C3262 +
                    ((C42210 * C503 - C42213 * C487 + C42211 * C505 -
                      C42214 * C488 + C42212 * C2281 - C42215 * C2280) *
                         C114 +
                     (C42210 * C517 - C42213 * C504 + C42211 * C518 -
                      C42214 * C506 + C42212 * C2283 - C42215 * C2282) *
                         C47359) *
                        C47105 * C47261) *
                       C47156 * C47457)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((((C42210 * C122 - C42213 * C115 + C42211 * C491 -
                       C42214 * C481 + C42212 * C497 - C42215 * C484) *
                          C114 +
                      (C42210 * C136 - C42213 * C123 + C42211 * C511 -
                       C42214 * C492 + C42212 * C514 - C42215 * C498) *
                          C47359) *
                         C47105 * C3262 +
                     ((C42213 * C481 - C42210 * C491 + C42214 * C484 -
                       C42211 * C497 + C42215 * C1996 - C42212 * C2002) *
                          C114 +
                      (C42213 * C492 - C42210 * C511 + C42214 * C498 -
                       C42211 * C514 + C42215 * C2003 - C42212 * C2014) *
                          C47359) *
                         C47105 * C47261) *
                        C47492 +
                    (((C42213 * C294 - C42210 * C304 + C42214 * C931 -
                       C42211 * C936 + C42215 * C1286 - C42212 * C1295) *
                          C114 +
                      (C42213 * C305 - C42210 * C324 + C42214 * C937 -
                       C42211 * C946 + C42215 * C1296 - C42212 * C1313) *
                          C47359) *
                         C47105 * C3262 +
                     ((C42210 * C936 - C42213 * C931 + C42211 * C1295 -
                       C42214 * C1286 + C42212 * C2393 - C42215 * C2390) *
                          C114 +
                      (C42210 * C946 - C42213 * C937 + C42211 * C1313 -
                       C42214 * C1296 + C42212 * C2399 - C42215 * C2394) *
                          C47359) *
                         C47105 * C47261) *
                        C47480 +
                    (((C42210 * C310 - C42213 * C297 + C42211 * C1301 -
                       C42214 * C1289 + C42212 * C1307 - C42215 * C1292) *
                          C114 +
                      (C42210 * C327 - C42213 * C311 + C42211 * C1316 -
                       C42214 * C1302 + C42212 * C1319 - C42215 * C1308) *
                          C47359) *
                         C47105 * C3262 +
                     ((C42213 * C1289 - C42210 * C1301 + C42214 * C1292 -
                       C42211 * C1307 + C42215 * C7267 - C42212 * C7269) *
                          C114 +
                      (C42213 * C1302 - C42210 * C1316 + C42214 * C1308 -
                       C42211 * C1319 + C42215 * C7270 - C42212 * C7273) *
                          C47359) *
                         C47105 * C47261) *
                        C47453) *
                       C2608 +
                   ((((C42213 * C116 - C42210 * C124 + C42214 * C482 -
                       C42211 * C493 + C42215 * C485 - C42212 * C499) *
                          C114 +
                      (C42213 * C125 - C42210 * C137 + C42214 * C494 -
                       C42211 * C512 + C42215 * C500 - C42212 * C515) *
                          C47359) *
                         C47105 * C3262 +
                     ((C42210 * C493 - C42213 * C482 + C42211 * C499 -
                       C42214 * C485 + C42212 * C2004 - C42215 * C1997) *
                          C114 +
                      (C42210 * C512 - C42213 * C494 + C42211 * C515 -
                       C42214 * C500 + C42212 * C2015 - C42215 * C2005) *
                          C47359) *
                         C47105 * C47261) *
                        C47492 +
                    (((C42210 * C306 - C42213 * C295 + C42211 * C938 -
                       C42214 * C932 + C42212 * C1297 - C42215 * C1287) *
                          C114 +
                      (C42210 * C325 - C42213 * C307 + C42211 * C947 -
                       C42214 * C939 + C42212 * C1314 - C42215 * C1298) *
                          C47359) *
                         C47105 * C3262 +
                     ((C42213 * C932 - C42210 * C938 + C42214 * C1287 -
                       C42211 * C1297 + C42215 * C2391 - C42212 * C2395) *
                          C114 +
                      (C42213 * C939 - C42210 * C947 + C42214 * C1298 -
                       C42211 * C1314 + C42215 * C2396 - C42212 * C2400) *
                          C47359) *
                         C47105 * C47261) *
                        C47480 +
                    (((C42213 * C298 - C42210 * C312 + C42214 * C1290 -
                       C42211 * C1303 + C42215 * C1293 - C42212 * C1309) *
                          C114 +
                      (C42213 * C313 - C42210 * C328 + C42214 * C1304 -
                       C42211 * C1317 + C42215 * C1310 - C42212 * C1320) *
                          C47359) *
                         C47105 * C3262 +
                     ((C42210 * C1303 - C42213 * C1290 + C42211 * C1309 -
                       C42214 * C1293 + C42212 * C7271 - C42215 * C7268) *
                          C114 +
                      (C42210 * C1317 - C42213 * C1304 + C42211 * C1320 -
                       C42214 * C1310 + C42212 * C7274 - C42215 * C7272) *
                          C47359) *
                         C47105 * C47261) *
                        C47453) *
                       C47139)) /
                     (p * q * std::sqrt(p + q));
    d2ee[220] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((C42210 * C122 - C42213 * C115 + C42211 * C491 -
                      C42214 * C481 + C42212 * C497 - C42215 * C484) *
                         C114 +
                     (C42210 * C136 - C42213 * C123 + C42211 * C511 -
                      C42214 * C492 + C42212 * C514 - C42215 * C498) *
                         C47359) *
                        C47105 * C47174 * C47421 +
                    ((C42213 * C294 - C42210 * C304 + C42214 * C931 -
                      C42211 * C936 + C42215 * C1286 - C42212 * C1295) *
                         C114 +
                     (C42213 * C305 - C42210 * C324 + C42214 * C937 -
                      C42211 * C946 + C42215 * C1296 - C42212 * C1313) *
                         C47359) *
                        C47105 * C47174 * C47219) *
                       C655 +
                   (((C42213 * C116 - C42210 * C124 + C42214 * C482 -
                      C42211 * C493 + C42215 * C485 - C42212 * C499) *
                         C114 +
                     (C42213 * C125 - C42210 * C137 + C42214 * C494 -
                      C42211 * C512 + C42215 * C500 - C42212 * C515) *
                         C47359) *
                        C47105 * C47174 * C47421 +
                    ((C42210 * C306 - C42213 * C295 + C42211 * C938 -
                      C42214 * C932 + C42212 * C1297 - C42215 * C1287) *
                         C114 +
                     (C42210 * C325 - C42213 * C307 + C42211 * C947 -
                      C42214 * C939 + C42212 * C1314 - C42215 * C1298) *
                         C47359) *
                        C47105 * C47174 * C47219) *
                       C656 +
                   (((C42210 * C126 - C42213 * C117 + C42211 * C495 -
                      C42214 * C483 + C42212 * C501 - C42215 * C486) *
                         C114 +
                     (C42210 * C138 - C42213 * C127 + C42211 * C513 -
                      C42214 * C496 + C42212 * C516 - C42215 * C502) *
                         C47359) *
                        C47105 * C47174 * C47421 +
                    ((C42213 * C296 - C42210 * C308 + C42214 * C933 -
                      C42211 * C940 + C42215 * C1288 - C42212 * C1299) *
                         C114 +
                     (C42213 * C309 - C42210 * C326 + C42214 * C941 -
                      C42211 * C948 + C42215 * C1300 - C42212 * C1315) *
                         C47359) *
                        C47105 * C47174 * C47219) *
                       C657 +
                   (((C42213 * C118 - C42210 * C128 + C42214 * C487 -
                      C42211 * C503 + C42215 * C488 - C42212 * C505) *
                         C114 +
                     (C42213 * C129 - C42210 * C139 + C42214 * C504 -
                      C42211 * C517 + C42215 * C506 - C42212 * C518) *
                         C47359) *
                        C47105 * C47174 * C47421 +
                    ((C42210 * C316 - C42213 * C300 + C42211 * C942 -
                      C42214 * C934 + C42212 * C2167 - C42215 * C2166) *
                         C114 +
                     (C42210 * C330 - C42213 * C317 + C42211 * C949 -
                      C42214 * C943 + C42212 * C2169 - C42215 * C2168) *
                         C47359) *
                        C47105 * C47174 * C47219) *
                       C47457)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((C42210 * C122 - C42213 * C115 + C42211 * C491 -
                      C42214 * C481 + C42212 * C497 - C42215 * C484) *
                         C114 +
                     (C42210 * C136 - C42213 * C123 + C42211 * C511 -
                      C42214 * C492 + C42212 * C514 - C42215 * C498) *
                         C47359) *
                        C47105 * C47174 * C1420 +
                    ((C42213 * C294 - C42210 * C304 + C42214 * C931 -
                      C42211 * C936 + C42215 * C1286 - C42212 * C1295) *
                         C114 +
                     (C42213 * C305 - C42210 * C324 + C42214 * C937 -
                      C42211 * C946 + C42215 * C1296 - C42212 * C1313) *
                         C47359) *
                        C47105 * C47174 * C1421 +
                    ((C42210 * C310 - C42213 * C297 + C42211 * C1301 -
                      C42214 * C1289 + C42212 * C1307 - C42215 * C1292) *
                         C114 +
                     (C42210 * C327 - C42213 * C311 + C42211 * C1316 -
                      C42214 * C1302 + C42212 * C1319 - C42215 * C1308) *
                         C47359) *
                        C47105 * C47174 * C1422 +
                    ((C42213 * C1152 - C42210 * C1158 + C42214 * C1694 -
                      C42211 * C1697 + C42215 * C5921 - C42212 * C5923) *
                         C114 +
                     (C42213 * C1159 - C42210 * C1170 + C42214 * C1698 -
                      C42211 * C1703 + C42215 * C5924 - C42212 * C5927) *
                         C47359) *
                        C47105 * C47174 * C47463) *
                       C47407 +
                   (((C42213 * C116 - C42210 * C124 + C42214 * C482 -
                      C42211 * C493 + C42215 * C485 - C42212 * C499) *
                         C114 +
                     (C42213 * C125 - C42210 * C137 + C42214 * C494 -
                      C42211 * C512 + C42215 * C500 - C42212 * C515) *
                         C47359) *
                        C47105 * C47174 * C1420 +
                    ((C42210 * C306 - C42213 * C295 + C42211 * C938 -
                      C42214 * C932 + C42212 * C1297 - C42215 * C1287) *
                         C114 +
                     (C42210 * C325 - C42213 * C307 + C42211 * C947 -
                      C42214 * C939 + C42212 * C1314 - C42215 * C1298) *
                         C47359) *
                        C47105 * C47174 * C1421 +
                    ((C42213 * C298 - C42210 * C312 + C42214 * C1290 -
                      C42211 * C1303 + C42215 * C1293 - C42212 * C1309) *
                         C114 +
                     (C42213 * C313 - C42210 * C328 + C42214 * C1304 -
                      C42211 * C1317 + C42215 * C1310 - C42212 * C1320) *
                         C47359) *
                        C47105 * C47174 * C1422 +
                    ((C42210 * C1160 - C42213 * C1153 + C42211 * C1699 -
                      C42214 * C1695 + C42212 * C5925 - C42215 * C5922) *
                         C114 +
                     (C42210 * C1171 - C42213 * C1161 + C42211 * C1704 -
                      C42214 * C1700 + C42212 * C5928 - C42215 * C5926) *
                         C47359) *
                        C47105 * C47174 * C47463) *
                       C47139)) /
                     (p * q * std::sqrt(p + q));
    d2ee[221] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((((C42210 * C122 - C42213 * C115 + C42211 * C491 -
                       C42214 * C481 + C42212 * C497 - C42215 * C484) *
                          C114 +
                      (C42210 * C136 - C42213 * C123 + C42211 * C511 -
                       C42214 * C492 + C42212 * C514 - C42215 * C498) *
                          C47359) *
                         C47105 * C47422 +
                     ((C42213 * C481 - C42210 * C491 + C42214 * C484 -
                       C42211 * C497 + C42215 * C1996 - C42212 * C2002) *
                          C114 +
                      (C42213 * C492 - C42210 * C511 + C42214 * C498 -
                       C42211 * C514 + C42215 * C2003 - C42212 * C2014) *
                          C47359) *
                         C47105 * C47261) *
                        C47421 +
                    (((C42213 * C294 - C42210 * C304 + C42214 * C931 -
                       C42211 * C936 + C42215 * C1286 - C42212 * C1295) *
                          C114 +
                      (C42213 * C305 - C42210 * C324 + C42214 * C937 -
                       C42211 * C946 + C42215 * C1296 - C42212 * C1313) *
                          C47359) *
                         C47105 * C47422 +
                     ((C42210 * C936 - C42213 * C931 + C42211 * C1295 -
                       C42214 * C1286 + C42212 * C2393 - C42215 * C2390) *
                          C114 +
                      (C42210 * C946 - C42213 * C937 + C42211 * C1313 -
                       C42214 * C1296 + C42212 * C2399 - C42215 * C2394) *
                          C47359) *
                         C47105 * C47261) *
                        C47219) *
                       C291 +
                   ((((C42213 * C116 - C42210 * C124 + C42214 * C482 -
                       C42211 * C493 + C42215 * C485 - C42212 * C499) *
                          C114 +
                      (C42213 * C125 - C42210 * C137 + C42214 * C494 -
                       C42211 * C512 + C42215 * C500 - C42212 * C515) *
                          C47359) *
                         C47105 * C47422 +
                     ((C42210 * C493 - C42213 * C482 + C42211 * C499 -
                       C42214 * C485 + C42212 * C2004 - C42215 * C1997) *
                          C114 +
                      (C42210 * C512 - C42213 * C494 + C42211 * C515 -
                       C42214 * C500 + C42212 * C2015 - C42215 * C2005) *
                          C47359) *
                         C47105 * C47261) *
                        C47421 +
                    (((C42210 * C306 - C42213 * C295 + C42211 * C938 -
                       C42214 * C932 + C42212 * C1297 - C42215 * C1287) *
                          C114 +
                      (C42210 * C325 - C42213 * C307 + C42211 * C947 -
                       C42214 * C939 + C42212 * C1314 - C42215 * C1298) *
                          C47359) *
                         C47105 * C47422 +
                     ((C42213 * C932 - C42210 * C938 + C42214 * C1287 -
                       C42211 * C1297 + C42215 * C2391 - C42212 * C2395) *
                          C114 +
                      (C42213 * C939 - C42210 * C947 + C42214 * C1298 -
                       C42211 * C1314 + C42215 * C2396 - C42212 * C2400) *
                          C47359) *
                         C47105 * C47261) *
                        C47219) *
                       C292 +
                   ((((C42210 * C126 - C42213 * C117 + C42211 * C495 -
                       C42214 * C483 + C42212 * C501 - C42215 * C486) *
                          C114 +
                      (C42210 * C138 - C42213 * C127 + C42211 * C513 -
                       C42214 * C496 + C42212 * C516 - C42215 * C502) *
                          C47359) *
                         C47105 * C47422 +
                     ((C42213 * C483 - C42210 * C495 + C42214 * C486 -
                       C42211 * C501 + C42215 * C1998 - C42212 * C2006) *
                          C114 +
                      (C42213 * C496 - C42210 * C513 + C42214 * C502 -
                       C42211 * C516 + C42215 * C2007 - C42212 * C2016) *
                          C47359) *
                         C47105 * C47261) *
                        C47421 +
                    (((C42213 * C296 - C42210 * C308 + C42214 * C933 -
                       C42211 * C940 + C42215 * C1288 - C42212 * C1299) *
                          C114 +
                      (C42213 * C309 - C42210 * C326 + C42214 * C941 -
                       C42211 * C948 + C42215 * C1300 - C42212 * C1315) *
                          C47359) *
                         C47105 * C47422 +
                     ((C42210 * C940 - C42213 * C933 + C42211 * C1299 -
                       C42214 * C1288 + C42212 * C2397 - C42215 * C2392) *
                          C114 +
                      (C42210 * C948 - C42213 * C941 + C42211 * C1315 -
                       C42214 * C1300 + C42212 * C2401 - C42215 * C2398) *
                          C47359) *
                         C47105 * C47261) *
                        C47219) *
                       C47447)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((C42210 * C122 - C42213 * C115 + C42211 * C491 -
                      C42214 * C481 + C42212 * C497 - C42215 * C484) *
                         C114 +
                     (C42210 * C136 - C42213 * C123 + C42211 * C511 -
                      C42214 * C492 + C42212 * C514 - C42215 * C498) *
                         C47359) *
                        C47105 * C47422 +
                    ((C42213 * C481 - C42210 * C491 + C42214 * C484 -
                      C42211 * C497 + C42215 * C1996 - C42212 * C2002) *
                         C114 +
                     (C42213 * C492 - C42210 * C511 + C42214 * C498 -
                      C42211 * C514 + C42215 * C2003 - C42212 * C2014) *
                         C47359) *
                        C47105 * C47261) *
                       C1420 +
                   (((C42213 * C294 - C42210 * C304 + C42214 * C931 -
                      C42211 * C936 + C42215 * C1286 - C42212 * C1295) *
                         C114 +
                     (C42213 * C305 - C42210 * C324 + C42214 * C937 -
                      C42211 * C946 + C42215 * C1296 - C42212 * C1313) *
                         C47359) *
                        C47105 * C47422 +
                    ((C42210 * C936 - C42213 * C931 + C42211 * C1295 -
                      C42214 * C1286 + C42212 * C2393 - C42215 * C2390) *
                         C114 +
                     (C42210 * C946 - C42213 * C937 + C42211 * C1313 -
                      C42214 * C1296 + C42212 * C2399 - C42215 * C2394) *
                         C47359) *
                        C47105 * C47261) *
                       C1421 +
                   (((C42210 * C310 - C42213 * C297 + C42211 * C1301 -
                      C42214 * C1289 + C42212 * C1307 - C42215 * C1292) *
                         C114 +
                     (C42210 * C327 - C42213 * C311 + C42211 * C1316 -
                      C42214 * C1302 + C42212 * C1319 - C42215 * C1308) *
                         C47359) *
                        C47105 * C47422 +
                    ((C42213 * C1289 - C42210 * C1301 + C42214 * C1292 -
                      C42211 * C1307 + C42215 * C7267 - C42212 * C7269) *
                         C114 +
                     (C42213 * C1302 - C42210 * C1316 + C42214 * C1308 -
                      C42211 * C1319 + C42215 * C7270 - C42212 * C7273) *
                         C47359) *
                        C47105 * C47261) *
                       C1422 +
                   (((C42213 * C1152 - C42210 * C1158 + C42214 * C1694 -
                      C42211 * C1697 + C42215 * C5921 - C42212 * C5923) *
                         C114 +
                     (C42213 * C1159 - C42210 * C1170 + C42214 * C1698 -
                      C42211 * C1703 + C42215 * C5924 - C42212 * C5927) *
                         C47359) *
                        C47105 * C47422 +
                    ((C42210 * C1697 - C42213 * C1694 + C42211 * C5923 -
                      C42214 * C5921 + C42212 * C23237 - C42215 * C23236) *
                         C114 +
                     (C42210 * C1703 - C42213 * C1698 + C42211 * C5927 -
                      C42214 * C5924 + C42212 * C23239 - C42215 * C23238) *
                         C47359) *
                        C47105 * C47261) *
                       C47463) *
                  C47128) /
                     (p * q * std::sqrt(p + q));
    d2ee[222] += (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  ((((C42210 * C122 - C42213 * C115 + C42211 * C491 -
                      C42214 * C481 + C42212 * C497 - C42215 * C484) *
                         C114 +
                     (C42210 * C136 - C42213 * C123 + C42211 * C511 -
                      C42214 * C492 + C42212 * C514 - C42215 * C498) *
                         C47359) *
                        C47105 * C47174 * C47492 +
                    ((C42213 * C294 - C42210 * C304 + C42214 * C931 -
                      C42211 * C936 + C42215 * C1286 - C42212 * C1295) *
                         C114 +
                     (C42213 * C305 - C42210 * C324 + C42214 * C937 -
                      C42211 * C946 + C42215 * C1296 - C42212 * C1313) *
                         C47359) *
                        C47105 * C47174 * C47480 +
                    ((C42210 * C310 - C42213 * C297 + C42211 * C1301 -
                      C42214 * C1289 + C42212 * C1307 - C42215 * C1292) *
                         C114 +
                     (C42210 * C327 - C42213 * C311 + C42211 * C1316 -
                      C42214 * C1302 + C42212 * C1319 - C42215 * C1308) *
                         C47359) *
                        C47105 * C47174 * C47453) *
                       C291 +
                   (((C42213 * C116 - C42210 * C124 + C42214 * C482 -
                      C42211 * C493 + C42215 * C485 - C42212 * C499) *
                         C114 +
                     (C42213 * C125 - C42210 * C137 + C42214 * C494 -
                      C42211 * C512 + C42215 * C500 - C42212 * C515) *
                         C47359) *
                        C47105 * C47174 * C47492 +
                    ((C42210 * C306 - C42213 * C295 + C42211 * C938 -
                      C42214 * C932 + C42212 * C1297 - C42215 * C1287) *
                         C114 +
                     (C42210 * C325 - C42213 * C307 + C42211 * C947 -
                      C42214 * C939 + C42212 * C1314 - C42215 * C1298) *
                         C47359) *
                        C47105 * C47174 * C47480 +
                    ((C42213 * C298 - C42210 * C312 + C42214 * C1290 -
                      C42211 * C1303 + C42215 * C1293 - C42212 * C1309) *
                         C114 +
                     (C42213 * C313 - C42210 * C328 + C42214 * C1304 -
                      C42211 * C1317 + C42215 * C1310 - C42212 * C1320) *
                         C47359) *
                        C47105 * C47174 * C47453) *
                       C292 +
                   (((C42210 * C126 - C42213 * C117 + C42211 * C495 -
                      C42214 * C483 + C42212 * C501 - C42215 * C486) *
                         C114 +
                     (C42210 * C138 - C42213 * C127 + C42211 * C513 -
                      C42214 * C496 + C42212 * C516 - C42215 * C502) *
                         C47359) *
                        C47105 * C47174 * C47492 +
                    ((C42213 * C296 - C42210 * C308 + C42214 * C933 -
                      C42211 * C940 + C42215 * C1288 - C42212 * C1299) *
                         C114 +
                     (C42213 * C309 - C42210 * C326 + C42214 * C941 -
                      C42211 * C948 + C42215 * C1300 - C42212 * C1315) *
                         C47359) *
                        C47105 * C47174 * C47480 +
                    ((C42210 * C314 - C42213 * C299 + C42211 * C1305 -
                      C42214 * C1291 + C42212 * C1311 - C42215 * C1294) *
                         C114 +
                     (C42210 * C329 - C42213 * C315 + C42211 * C1318 -
                      C42214 * C1306 + C42212 * C1321 - C42215 * C1312) *
                         C47359) *
                        C47105 * C47174 * C47453) *
                       C47447)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  (((C42210 * C122 - C42213 * C115 + C42211 * C491 -
                     C42214 * C481 + C42212 * C497 - C42215 * C484) *
                        C114 +
                    (C42210 * C136 - C42213 * C123 + C42211 * C511 -
                     C42214 * C492 + C42212 * C514 - C42215 * C498) *
                        C47359) *
                       C47105 * C47174 * C47156 * C108 +
                   ((C42213 * C116 - C42210 * C124 + C42214 * C482 -
                     C42211 * C493 + C42215 * C485 - C42212 * C499) *
                        C114 +
                    (C42213 * C125 - C42210 * C137 + C42214 * C494 -
                     C42211 * C512 + C42215 * C500 - C42212 * C515) *
                        C47359) *
                       C47105 * C47174 * C47156 * C109 +
                   ((C42210 * C126 - C42213 * C117 + C42211 * C495 -
                     C42214 * C483 + C42212 * C501 - C42215 * C486) *
                        C114 +
                    (C42210 * C138 - C42213 * C127 + C42211 * C513 -
                     C42214 * C496 + C42212 * C516 - C42215 * C502) *
                        C47359) *
                       C47105 * C47174 * C47156 * C110 +
                   ((C42213 * C118 - C42210 * C128 + C42214 * C487 -
                     C42211 * C503 + C42215 * C488 - C42212 * C505) *
                        C114 +
                    (C42213 * C129 - C42210 * C139 + C42214 * C504 -
                     C42211 * C517 + C42215 * C506 - C42212 * C518) *
                        C47359) *
                       C47105 * C47174 * C47156 * C111 +
                   ((C42210 * C130 - C42213 * C119 + C42211 * C507 -
                     C42214 * C489 + C42212 * C509 - C42215 * C490) *
                        C114 +
                    (C42210 * C140 - C42213 * C131 + C42211 * C519 -
                     C42214 * C508 + C42212 * C520 - C42215 * C510) *
                        C47359) *
                       C47105 * C47174 * C47156 * C112)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C42210 * C122 - C42213 * C115 + C42211 * C491 -
                      C42214 * C481 + C42212 * C497 - C42215 * C484) *
                         C114 +
                     (C42210 * C136 - C42213 * C123 + C42211 * C511 -
                      C42214 * C492 + C42212 * C514 - C42215 * C498) *
                         C47359) *
                        C47105 * C47493 +
                    ((C42213 * C481 - C42210 * C491 + C42214 * C484 -
                      C42211 * C497 + C42215 * C1996 - C42212 * C2002) *
                         C114 +
                     (C42213 * C492 - C42210 * C511 + C42214 * C498 -
                      C42211 * C514 + C42215 * C2003 - C42212 * C2014) *
                         C47359) *
                        C47105 * C47482 +
                    ((C42210 * C497 - C42213 * C484 + C42211 * C2002 -
                      C42214 * C1996 + C42212 * C2008 - C42215 * C1999) *
                         C114 +
                     (C42210 * C514 - C42213 * C498 + C42211 * C2014 -
                      C42214 * C2003 + C42212 * C2017 - C42215 * C2009) *
                         C47359) *
                        C47105 * C47456) *
                       C47156 * C291 +
                   (((C42213 * C116 - C42210 * C124 + C42214 * C482 -
                      C42211 * C493 + C42215 * C485 - C42212 * C499) *
                         C114 +
                     (C42213 * C125 - C42210 * C137 + C42214 * C494 -
                      C42211 * C512 + C42215 * C500 - C42212 * C515) *
                         C47359) *
                        C47105 * C47493 +
                    ((C42210 * C493 - C42213 * C482 + C42211 * C499 -
                      C42214 * C485 + C42212 * C2004 - C42215 * C1997) *
                         C114 +
                     (C42210 * C512 - C42213 * C494 + C42211 * C515 -
                      C42214 * C500 + C42212 * C2015 - C42215 * C2005) *
                         C47359) *
                        C47105 * C47482 +
                    ((C42213 * C485 - C42210 * C499 + C42214 * C1997 -
                      C42211 * C2004 + C42215 * C2000 - C42212 * C2010) *
                         C114 +
                     (C42213 * C500 - C42210 * C515 + C42214 * C2005 -
                      C42211 * C2015 + C42215 * C2011 - C42212 * C2018) *
                         C47359) *
                        C47105 * C47456) *
                       C47156 * C292 +
                   (((C42210 * C126 - C42213 * C117 + C42211 * C495 -
                      C42214 * C483 + C42212 * C501 - C42215 * C486) *
                         C114 +
                     (C42210 * C138 - C42213 * C127 + C42211 * C513 -
                      C42214 * C496 + C42212 * C516 - C42215 * C502) *
                         C47359) *
                        C47105 * C47493 +
                    ((C42213 * C483 - C42210 * C495 + C42214 * C486 -
                      C42211 * C501 + C42215 * C1998 - C42212 * C2006) *
                         C114 +
                     (C42213 * C496 - C42210 * C513 + C42214 * C502 -
                      C42211 * C516 + C42215 * C2007 - C42212 * C2016) *
                         C47359) *
                        C47105 * C47482 +
                    ((C42210 * C501 - C42213 * C486 + C42211 * C2006 -
                      C42214 * C1998 + C42212 * C2012 - C42215 * C2001) *
                         C114 +
                     (C42210 * C516 - C42213 * C502 + C42211 * C2016 -
                      C42214 * C2007 + C42212 * C2019 - C42215 * C2013) *
                         C47359) *
                        C47105 * C47456) *
                       C47156 * C47447)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  ((((C42210 * C122 - C42213 * C115 + C42211 * C491 -
                      C42214 * C481 + C42212 * C497 - C42215 * C484) *
                         C114 +
                     (C42210 * C136 - C42213 * C123 + C42211 * C511 -
                      C42214 * C492 + C42212 * C514 - C42215 * C498) *
                         C47359) *
                        C47105 * C47174 * C1078 +
                    ((C42213 * C294 - C42210 * C304 + C42214 * C931 -
                      C42211 * C936 + C42215 * C1286 - C42212 * C1295) *
                         C114 +
                     (C42213 * C305 - C42210 * C324 + C42214 * C937 -
                      C42211 * C946 + C42215 * C1296 - C42212 * C1313) *
                         C47359) *
                        C47105 * C47174 * C1079 +
                    ((C42210 * C310 - C42213 * C297 + C42211 * C1301 -
                      C42214 * C1289 + C42212 * C1307 - C42215 * C1292) *
                         C114 +
                     (C42210 * C327 - C42213 * C311 + C42211 * C1316 -
                      C42214 * C1302 + C42212 * C1319 - C42215 * C1308) *
                         C47359) *
                        C47105 * C47174 * C47453) *
                       C47489 +
                   (((C42213 * C116 - C42210 * C124 + C42214 * C482 -
                      C42211 * C493 + C42215 * C485 - C42212 * C499) *
                         C114 +
                     (C42213 * C125 - C42210 * C137 + C42214 * C494 -
                      C42211 * C512 + C42215 * C500 - C42212 * C515) *
                         C47359) *
                        C47105 * C47174 * C1078 +
                    ((C42210 * C306 - C42213 * C295 + C42211 * C938 -
                      C42214 * C932 + C42212 * C1297 - C42215 * C1287) *
                         C114 +
                     (C42210 * C325 - C42213 * C307 + C42211 * C947 -
                      C42214 * C939 + C42212 * C1314 - C42215 * C1298) *
                         C47359) *
                        C47105 * C47174 * C1079 +
                    ((C42213 * C298 - C42210 * C312 + C42214 * C1290 -
                      C42211 * C1303 + C42215 * C1293 - C42212 * C1309) *
                         C114 +
                     (C42213 * C313 - C42210 * C328 + C42214 * C1304 -
                      C42211 * C1317 + C42215 * C1310 - C42212 * C1320) *
                         C47359) *
                        C47105 * C47174 * C47453) *
                       C47476 +
                   (((C42210 * C126 - C42213 * C117 + C42211 * C495 -
                      C42214 * C483 + C42212 * C501 - C42215 * C486) *
                         C114 +
                     (C42210 * C138 - C42213 * C127 + C42211 * C513 -
                      C42214 * C496 + C42212 * C516 - C42215 * C502) *
                         C47359) *
                        C47105 * C47174 * C1078 +
                    ((C42213 * C296 - C42210 * C308 + C42214 * C933 -
                      C42211 * C940 + C42215 * C1288 - C42212 * C1299) *
                         C114 +
                     (C42213 * C309 - C42210 * C326 + C42214 * C941 -
                      C42211 * C948 + C42215 * C1300 - C42212 * C1315) *
                         C47359) *
                        C47105 * C47174 * C1079 +
                    ((C42210 * C314 - C42213 * C299 + C42211 * C1305 -
                      C42214 * C1291 + C42212 * C1311 - C42215 * C1294) *
                         C114 +
                     (C42210 * C329 - C42213 * C315 + C42211 * C1318 -
                      C42214 * C1306 + C42212 * C1321 - C42215 * C1312) *
                         C47359) *
                        C47105 * C47174 * C47453) *
                       C47447)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  (((C42210 * C122 - C42213 * C115 + C42211 * C491 -
                     C42214 * C481 + C42212 * C497 - C42215 * C484) *
                        C114 +
                    (C42210 * C136 - C42213 * C123 + C42211 * C511 -
                     C42214 * C492 + C42212 * C514 - C42215 * C498) *
                        C47359) *
                       C47105 * C47174 * C1146 +
                   ((C42213 * C294 - C42210 * C304 + C42214 * C931 -
                     C42211 * C936 + C42215 * C1286 - C42212 * C1295) *
                        C114 +
                    (C42213 * C305 - C42210 * C324 + C42214 * C937 -
                     C42211 * C946 + C42215 * C1296 - C42212 * C1313) *
                        C47359) *
                       C47105 * C47174 * C1147 +
                   ((C42210 * C310 - C42213 * C297 + C42211 * C1301 -
                     C42214 * C1289 + C42212 * C1307 - C42215 * C1292) *
                        C114 +
                    (C42210 * C327 - C42213 * C311 + C42211 * C1316 -
                     C42214 * C1302 + C42212 * C1319 - C42215 * C1308) *
                        C47359) *
                       C47105 * C47174 * C1148 +
                   ((C42213 * C1152 - C42210 * C1158 + C42214 * C1694 -
                     C42211 * C1697 + C42215 * C5921 - C42212 * C5923) *
                        C114 +
                    (C42213 * C1159 - C42210 * C1170 + C42214 * C1698 -
                     C42211 * C1703 + C42215 * C5924 - C42212 * C5927) *
                        C47359) *
                       C47105 * C47174 * C1149 +
                   ((C42210 * C1164 - C42213 * C1155 + C42211 * C6413 -
                     C42214 * C6411 + C42212 * C22245 - C42215 * C22244) *
                        C114 +
                    (C42210 * C1173 - C42213 * C1165 + C42211 * C6417 -
                     C42214 * C6414 + C42212 * C22247 - C42215 * C22246) *
                        C47359) *
                       C47105 * C47174 * C1150) *
                  C47128) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C42210 * C122 - C42213 * C115 + C42211 * C491 -
                      C42214 * C481 + C42212 * C497 - C42215 * C484) *
                         C114 +
                     (C42210 * C136 - C42213 * C123 + C42211 * C511 -
                      C42214 * C492 + C42212 * C514 - C42215 * C498) *
                         C47359) *
                        C47105 * C47493 +
                    ((C42213 * C481 - C42210 * C491 + C42214 * C484 -
                      C42211 * C497 + C42215 * C1996 - C42212 * C2002) *
                         C114 +
                     (C42213 * C492 - C42210 * C511 + C42214 * C498 -
                      C42211 * C514 + C42215 * C2003 - C42212 * C2014) *
                         C47359) *
                        C47105 * C47482 +
                    ((C42210 * C497 - C42213 * C484 + C42211 * C2002 -
                      C42214 * C1996 + C42212 * C2008 - C42215 * C1999) *
                         C114 +
                     (C42210 * C514 - C42213 * C498 + C42211 * C2014 -
                      C42214 * C2003 + C42212 * C2017 - C42215 * C2009) *
                         C47359) *
                        C47105 * C47456) *
                       C1078 +
                   (((C42213 * C294 - C42210 * C304 + C42214 * C931 -
                      C42211 * C936 + C42215 * C1286 - C42212 * C1295) *
                         C114 +
                     (C42213 * C305 - C42210 * C324 + C42214 * C937 -
                      C42211 * C946 + C42215 * C1296 - C42212 * C1313) *
                         C47359) *
                        C47105 * C47493 +
                    ((C42210 * C936 - C42213 * C931 + C42211 * C1295 -
                      C42214 * C1286 + C42212 * C2393 - C42215 * C2390) *
                         C114 +
                     (C42210 * C946 - C42213 * C937 + C42211 * C1313 -
                      C42214 * C1296 + C42212 * C2399 - C42215 * C2394) *
                         C47359) *
                        C47105 * C47482 +
                    ((C42213 * C1286 - C42210 * C1295 + C42214 * C2390 -
                      C42211 * C2393 + C42215 * C6797 - C42212 * C6799) *
                         C114 +
                     (C42213 * C1296 - C42210 * C1313 + C42214 * C2394 -
                      C42211 * C2399 + C42215 * C6800 - C42212 * C6803) *
                         C47359) *
                        C47105 * C47456) *
                       C1079 +
                   (((C42210 * C310 - C42213 * C297 + C42211 * C1301 -
                      C42214 * C1289 + C42212 * C1307 - C42215 * C1292) *
                         C114 +
                     (C42210 * C327 - C42213 * C311 + C42211 * C1316 -
                      C42214 * C1302 + C42212 * C1319 - C42215 * C1308) *
                         C47359) *
                        C47105 * C47493 +
                    ((C42213 * C1289 - C42210 * C1301 + C42214 * C1292 -
                      C42211 * C1307 + C42215 * C7267 - C42212 * C7269) *
                         C114 +
                     (C42213 * C1302 - C42210 * C1316 + C42214 * C1308 -
                      C42211 * C1319 + C42215 * C7270 - C42212 * C7273) *
                         C47359) *
                        C47105 * C47482 +
                    ((C42210 * C1307 - C42213 * C1292 + C42211 * C7269 -
                      C42214 * C7267 + C42212 * C22891 - C42215 * C22890) *
                         C114 +
                     (C42210 * C1319 - C42213 * C1308 + C42211 * C7273 -
                      C42214 * C7270 + C42212 * C22893 - C42215 * C22892) *
                         C47359) *
                        C47105 * C47456) *
                       C47453) *
                  C47128) /
                     (p * q * std::sqrt(p + q));
    d2ee[223] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((C42210 * C122 - C42213 * C115 + C42211 * C491 -
                      C42214 * C481 + C42212 * C497 - C42215 * C484) *
                         C114 +
                     (C42210 * C136 - C42213 * C123 + C42211 * C511 -
                      C42214 * C492 + C42212 * C514 - C42215 * C498) *
                         C47359) *
                        C47105 * C47422 +
                    ((C42213 * C481 - C42210 * C491 + C42214 * C484 -
                      C42211 * C497 + C42215 * C1996 - C42212 * C2002) *
                         C114 +
                     (C42213 * C492 - C42210 * C511 + C42214 * C498 -
                      C42211 * C514 + C42215 * C2003 - C42212 * C2014) *
                         C47359) *
                        C47105 * C47261) *
                       C47156 * C655 +
                   (((C42213 * C116 - C42210 * C124 + C42214 * C482 -
                      C42211 * C493 + C42215 * C485 - C42212 * C499) *
                         C114 +
                     (C42213 * C125 - C42210 * C137 + C42214 * C494 -
                      C42211 * C512 + C42215 * C500 - C42212 * C515) *
                         C47359) *
                        C47105 * C47422 +
                    ((C42210 * C493 - C42213 * C482 + C42211 * C499 -
                      C42214 * C485 + C42212 * C2004 - C42215 * C1997) *
                         C114 +
                     (C42210 * C512 - C42213 * C494 + C42211 * C515 -
                      C42214 * C500 + C42212 * C2015 - C42215 * C2005) *
                         C47359) *
                        C47105 * C47261) *
                       C47156 * C656 +
                   (((C42210 * C126 - C42213 * C117 + C42211 * C495 -
                      C42214 * C483 + C42212 * C501 - C42215 * C486) *
                         C114 +
                     (C42210 * C138 - C42213 * C127 + C42211 * C513 -
                      C42214 * C496 + C42212 * C516 - C42215 * C502) *
                         C47359) *
                        C47105 * C47422 +
                    ((C42213 * C483 - C42210 * C495 + C42214 * C486 -
                      C42211 * C501 + C42215 * C1998 - C42212 * C2006) *
                         C114 +
                     (C42213 * C496 - C42210 * C513 + C42214 * C502 -
                      C42211 * C516 + C42215 * C2007 - C42212 * C2016) *
                         C47359) *
                        C47105 * C47261) *
                       C47156 * C657 +
                   (((C42213 * C118 - C42210 * C128 + C42214 * C487 -
                      C42211 * C503 + C42215 * C488 - C42212 * C505) *
                         C114 +
                     (C42213 * C129 - C42210 * C139 + C42214 * C504 -
                      C42211 * C517 + C42215 * C506 - C42212 * C518) *
                         C47359) *
                        C47105 * C47422 +
                    ((C42210 * C503 - C42213 * C487 + C42211 * C505 -
                      C42214 * C488 + C42212 * C2281 - C42215 * C2280) *
                         C114 +
                     (C42210 * C517 - C42213 * C504 + C42211 * C518 -
                      C42214 * C506 + C42212 * C2283 - C42215 * C2282) *
                         C47359) *
                        C47105 * C47261) *
                       C47156 * C47457)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((((C42210 * C122 - C42213 * C115 + C42211 * C491 -
                       C42214 * C481 + C42212 * C497 - C42215 * C484) *
                          C114 +
                      (C42210 * C136 - C42213 * C123 + C42211 * C511 -
                       C42214 * C492 + C42212 * C514 - C42215 * C498) *
                          C47359) *
                         C47105 * C47422 +
                     ((C42213 * C481 - C42210 * C491 + C42214 * C484 -
                       C42211 * C497 + C42215 * C1996 - C42212 * C2002) *
                          C114 +
                      (C42213 * C492 - C42210 * C511 + C42214 * C498 -
                       C42211 * C514 + C42215 * C2003 - C42212 * C2014) *
                          C47359) *
                         C47105 * C47261) *
                        C1078 +
                    (((C42213 * C294 - C42210 * C304 + C42214 * C931 -
                       C42211 * C936 + C42215 * C1286 - C42212 * C1295) *
                          C114 +
                      (C42213 * C305 - C42210 * C324 + C42214 * C937 -
                       C42211 * C946 + C42215 * C1296 - C42212 * C1313) *
                          C47359) *
                         C47105 * C47422 +
                     ((C42210 * C936 - C42213 * C931 + C42211 * C1295 -
                       C42214 * C1286 + C42212 * C2393 - C42215 * C2390) *
                          C114 +
                      (C42210 * C946 - C42213 * C937 + C42211 * C1313 -
                       C42214 * C1296 + C42212 * C2399 - C42215 * C2394) *
                          C47359) *
                         C47105 * C47261) *
                        C1079 +
                    (((C42210 * C310 - C42213 * C297 + C42211 * C1301 -
                       C42214 * C1289 + C42212 * C1307 - C42215 * C1292) *
                          C114 +
                      (C42210 * C327 - C42213 * C311 + C42211 * C1316 -
                       C42214 * C1302 + C42212 * C1319 - C42215 * C1308) *
                          C47359) *
                         C47105 * C47422 +
                     ((C42213 * C1289 - C42210 * C1301 + C42214 * C1292 -
                       C42211 * C1307 + C42215 * C7267 - C42212 * C7269) *
                          C114 +
                      (C42213 * C1302 - C42210 * C1316 + C42214 * C1308 -
                       C42211 * C1319 + C42215 * C7270 - C42212 * C7273) *
                          C47359) *
                         C47105 * C47261) *
                        C47453) *
                       C47407 +
                   ((((C42213 * C116 - C42210 * C124 + C42214 * C482 -
                       C42211 * C493 + C42215 * C485 - C42212 * C499) *
                          C114 +
                      (C42213 * C125 - C42210 * C137 + C42214 * C494 -
                       C42211 * C512 + C42215 * C500 - C42212 * C515) *
                          C47359) *
                         C47105 * C47422 +
                     ((C42210 * C493 - C42213 * C482 + C42211 * C499 -
                       C42214 * C485 + C42212 * C2004 - C42215 * C1997) *
                          C114 +
                      (C42210 * C512 - C42213 * C494 + C42211 * C515 -
                       C42214 * C500 + C42212 * C2015 - C42215 * C2005) *
                          C47359) *
                         C47105 * C47261) *
                        C1078 +
                    (((C42210 * C306 - C42213 * C295 + C42211 * C938 -
                       C42214 * C932 + C42212 * C1297 - C42215 * C1287) *
                          C114 +
                      (C42210 * C325 - C42213 * C307 + C42211 * C947 -
                       C42214 * C939 + C42212 * C1314 - C42215 * C1298) *
                          C47359) *
                         C47105 * C47422 +
                     ((C42213 * C932 - C42210 * C938 + C42214 * C1287 -
                       C42211 * C1297 + C42215 * C2391 - C42212 * C2395) *
                          C114 +
                      (C42213 * C939 - C42210 * C947 + C42214 * C1298 -
                       C42211 * C1314 + C42215 * C2396 - C42212 * C2400) *
                          C47359) *
                         C47105 * C47261) *
                        C1079 +
                    (((C42213 * C298 - C42210 * C312 + C42214 * C1290 -
                       C42211 * C1303 + C42215 * C1293 - C42212 * C1309) *
                          C114 +
                      (C42213 * C313 - C42210 * C328 + C42214 * C1304 -
                       C42211 * C1317 + C42215 * C1310 - C42212 * C1320) *
                          C47359) *
                         C47105 * C47422 +
                     ((C42210 * C1303 - C42213 * C1290 + C42211 * C1309 -
                       C42214 * C1293 + C42212 * C7271 - C42215 * C7268) *
                          C114 +
                      (C42210 * C1317 - C42213 * C1304 + C42211 * C1320 -
                       C42214 * C1310 + C42212 * C7274 - C42215 * C7272) *
                          C47359) *
                         C47105 * C47261) *
                        C47453) *
                       C47139)) /
                     (p * q * std::sqrt(p + q));
    d2ee[224] += (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  (((C42210 * C122 - C42213 * C115 + C42211 * C491 -
                     C42214 * C481 + C42212 * C497 - C42215 * C484) *
                        C114 +
                    (C42210 * C136 - C42213 * C123 + C42211 * C511 -
                     C42214 * C492 + C42212 * C514 - C42215 * C498) *
                        C47359) *
                       C47105 * C47174 * C47156 * C108 +
                   ((C42213 * C116 - C42210 * C124 + C42214 * C482 -
                     C42211 * C493 + C42215 * C485 - C42212 * C499) *
                        C114 +
                    (C42213 * C125 - C42210 * C137 + C42214 * C494 -
                     C42211 * C512 + C42215 * C500 - C42212 * C515) *
                        C47359) *
                       C47105 * C47174 * C47156 * C109 +
                   ((C42210 * C126 - C42213 * C117 + C42211 * C495 -
                     C42214 * C483 + C42212 * C501 - C42215 * C486) *
                        C114 +
                    (C42210 * C138 - C42213 * C127 + C42211 * C513 -
                     C42214 * C496 + C42212 * C516 - C42215 * C502) *
                        C47359) *
                       C47105 * C47174 * C47156 * C110 +
                   ((C42213 * C118 - C42210 * C128 + C42214 * C487 -
                     C42211 * C503 + C42215 * C488 - C42212 * C505) *
                        C114 +
                    (C42213 * C129 - C42210 * C139 + C42214 * C504 -
                     C42211 * C517 + C42215 * C506 - C42212 * C518) *
                        C47359) *
                       C47105 * C47174 * C47156 * C111 +
                   ((C42210 * C130 - C42213 * C119 + C42211 * C507 -
                     C42214 * C489 + C42212 * C509 - C42215 * C490) *
                        C114 +
                    (C42210 * C140 - C42213 * C131 + C42211 * C519 -
                     C42214 * C508 + C42212 * C520 - C42215 * C510) *
                        C47359) *
                       C47105 * C47174 * C47156 * C112)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  ((((C42210 * C122 - C42213 * C115 + C42211 * C491 -
                      C42214 * C481 + C42212 * C497 - C42215 * C484) *
                         C114 +
                     (C42210 * C136 - C42213 * C123 + C42211 * C511 -
                      C42214 * C492 + C42212 * C514 - C42215 * C498) *
                         C47359) *
                        C47105 * C47174 * C47492 +
                    ((C42213 * C294 - C42210 * C304 + C42214 * C931 -
                      C42211 * C936 + C42215 * C1286 - C42212 * C1295) *
                         C114 +
                     (C42213 * C305 - C42210 * C324 + C42214 * C937 -
                      C42211 * C946 + C42215 * C1296 - C42212 * C1313) *
                         C47359) *
                        C47105 * C47174 * C47480 +
                    ((C42210 * C310 - C42213 * C297 + C42211 * C1301 -
                      C42214 * C1289 + C42212 * C1307 - C42215 * C1292) *
                         C114 +
                     (C42210 * C327 - C42213 * C311 + C42211 * C1316 -
                      C42214 * C1302 + C42212 * C1319 - C42215 * C1308) *
                         C47359) *
                        C47105 * C47174 * C47453) *
                       C291 +
                   (((C42213 * C116 - C42210 * C124 + C42214 * C482 -
                      C42211 * C493 + C42215 * C485 - C42212 * C499) *
                         C114 +
                     (C42213 * C125 - C42210 * C137 + C42214 * C494 -
                      C42211 * C512 + C42215 * C500 - C42212 * C515) *
                         C47359) *
                        C47105 * C47174 * C47492 +
                    ((C42210 * C306 - C42213 * C295 + C42211 * C938 -
                      C42214 * C932 + C42212 * C1297 - C42215 * C1287) *
                         C114 +
                     (C42210 * C325 - C42213 * C307 + C42211 * C947 -
                      C42214 * C939 + C42212 * C1314 - C42215 * C1298) *
                         C47359) *
                        C47105 * C47174 * C47480 +
                    ((C42213 * C298 - C42210 * C312 + C42214 * C1290 -
                      C42211 * C1303 + C42215 * C1293 - C42212 * C1309) *
                         C114 +
                     (C42213 * C313 - C42210 * C328 + C42214 * C1304 -
                      C42211 * C1317 + C42215 * C1310 - C42212 * C1320) *
                         C47359) *
                        C47105 * C47174 * C47453) *
                       C292 +
                   (((C42210 * C126 - C42213 * C117 + C42211 * C495 -
                      C42214 * C483 + C42212 * C501 - C42215 * C486) *
                         C114 +
                     (C42210 * C138 - C42213 * C127 + C42211 * C513 -
                      C42214 * C496 + C42212 * C516 - C42215 * C502) *
                         C47359) *
                        C47105 * C47174 * C47492 +
                    ((C42213 * C296 - C42210 * C308 + C42214 * C933 -
                      C42211 * C940 + C42215 * C1288 - C42212 * C1299) *
                         C114 +
                     (C42213 * C309 - C42210 * C326 + C42214 * C941 -
                      C42211 * C948 + C42215 * C1300 - C42212 * C1315) *
                         C47359) *
                        C47105 * C47174 * C47480 +
                    ((C42210 * C314 - C42213 * C299 + C42211 * C1305 -
                      C42214 * C1291 + C42212 * C1311 - C42215 * C1294) *
                         C114 +
                     (C42210 * C329 - C42213 * C315 + C42211 * C1318 -
                      C42214 * C1306 + C42212 * C1321 - C42215 * C1312) *
                         C47359) *
                        C47105 * C47174 * C47453) *
                       C47447)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  ((((C42210 * C122 - C42213 * C115 + C42211 * C491 -
                      C42214 * C481 + C42212 * C497 - C42215 * C484) *
                         C114 +
                     (C42210 * C136 - C42213 * C123 + C42211 * C511 -
                      C42214 * C492 + C42212 * C514 - C42215 * C498) *
                         C47359) *
                        C47105 * C47174 * C1078 +
                    ((C42213 * C294 - C42210 * C304 + C42214 * C931 -
                      C42211 * C936 + C42215 * C1286 - C42212 * C1295) *
                         C114 +
                     (C42213 * C305 - C42210 * C324 + C42214 * C937 -
                      C42211 * C946 + C42215 * C1296 - C42212 * C1313) *
                         C47359) *
                        C47105 * C47174 * C1079 +
                    ((C42210 * C310 - C42213 * C297 + C42211 * C1301 -
                      C42214 * C1289 + C42212 * C1307 - C42215 * C1292) *
                         C114 +
                     (C42210 * C327 - C42213 * C311 + C42211 * C1316 -
                      C42214 * C1302 + C42212 * C1319 - C42215 * C1308) *
                         C47359) *
                        C47105 * C47174 * C47453) *
                       C47489 +
                   (((C42213 * C116 - C42210 * C124 + C42214 * C482 -
                      C42211 * C493 + C42215 * C485 - C42212 * C499) *
                         C114 +
                     (C42213 * C125 - C42210 * C137 + C42214 * C494 -
                      C42211 * C512 + C42215 * C500 - C42212 * C515) *
                         C47359) *
                        C47105 * C47174 * C1078 +
                    ((C42210 * C306 - C42213 * C295 + C42211 * C938 -
                      C42214 * C932 + C42212 * C1297 - C42215 * C1287) *
                         C114 +
                     (C42210 * C325 - C42213 * C307 + C42211 * C947 -
                      C42214 * C939 + C42212 * C1314 - C42215 * C1298) *
                         C47359) *
                        C47105 * C47174 * C1079 +
                    ((C42213 * C298 - C42210 * C312 + C42214 * C1290 -
                      C42211 * C1303 + C42215 * C1293 - C42212 * C1309) *
                         C114 +
                     (C42213 * C313 - C42210 * C328 + C42214 * C1304 -
                      C42211 * C1317 + C42215 * C1310 - C42212 * C1320) *
                         C47359) *
                        C47105 * C47174 * C47453) *
                       C47476 +
                   (((C42210 * C126 - C42213 * C117 + C42211 * C495 -
                      C42214 * C483 + C42212 * C501 - C42215 * C486) *
                         C114 +
                     (C42210 * C138 - C42213 * C127 + C42211 * C513 -
                      C42214 * C496 + C42212 * C516 - C42215 * C502) *
                         C47359) *
                        C47105 * C47174 * C1078 +
                    ((C42213 * C296 - C42210 * C308 + C42214 * C933 -
                      C42211 * C940 + C42215 * C1288 - C42212 * C1299) *
                         C114 +
                     (C42213 * C309 - C42210 * C326 + C42214 * C941 -
                      C42211 * C948 + C42215 * C1300 - C42212 * C1315) *
                         C47359) *
                        C47105 * C47174 * C1079 +
                    ((C42210 * C314 - C42213 * C299 + C42211 * C1305 -
                      C42214 * C1291 + C42212 * C1311 - C42215 * C1294) *
                         C114 +
                     (C42210 * C329 - C42213 * C315 + C42211 * C1318 -
                      C42214 * C1306 + C42212 * C1321 - C42215 * C1312) *
                         C47359) *
                        C47105 * C47174 * C47453) *
                       C47447)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  (((C42210 * C122 - C42213 * C115 + C42211 * C491 -
                     C42214 * C481 + C42212 * C497 - C42215 * C484) *
                        C114 +
                    (C42210 * C136 - C42213 * C123 + C42211 * C511 -
                     C42214 * C492 + C42212 * C514 - C42215 * C498) *
                        C47359) *
                       C47105 * C47174 * C1146 +
                   ((C42213 * C294 - C42210 * C304 + C42214 * C931 -
                     C42211 * C936 + C42215 * C1286 - C42212 * C1295) *
                        C114 +
                    (C42213 * C305 - C42210 * C324 + C42214 * C937 -
                     C42211 * C946 + C42215 * C1296 - C42212 * C1313) *
                        C47359) *
                       C47105 * C47174 * C1147 +
                   ((C42210 * C310 - C42213 * C297 + C42211 * C1301 -
                     C42214 * C1289 + C42212 * C1307 - C42215 * C1292) *
                        C114 +
                    (C42210 * C327 - C42213 * C311 + C42211 * C1316 -
                     C42214 * C1302 + C42212 * C1319 - C42215 * C1308) *
                        C47359) *
                       C47105 * C47174 * C1148 +
                   ((C42213 * C1152 - C42210 * C1158 + C42214 * C1694 -
                     C42211 * C1697 + C42215 * C5921 - C42212 * C5923) *
                        C114 +
                    (C42213 * C1159 - C42210 * C1170 + C42214 * C1698 -
                     C42211 * C1703 + C42215 * C5924 - C42212 * C5927) *
                        C47359) *
                       C47105 * C47174 * C1149 +
                   ((C42210 * C1164 - C42213 * C1155 + C42211 * C6413 -
                     C42214 * C6411 + C42212 * C22245 - C42215 * C22244) *
                        C114 +
                    (C42210 * C1173 - C42213 * C1165 + C42211 * C6417 -
                     C42214 * C6414 + C42212 * C22247 - C42215 * C22246) *
                        C47359) *
                       C47105 * C47174 * C1150) *
                  C47128) /
                     (p * q * std::sqrt(p + q));
}
