/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

#include "gto_d2_kit/d2_ee_ppdd_AB_zx.hpp"
#include <cmath>
/*

*/
#pragma GCC optimize("O0")
namespace {
    const double Pi = M_PI;
}
#pragma GCC optimize("O0")

void second_derivative_ee_1122_12_31(const double ae,
                                     const double xA,
                                     const double yA,
                                     const double zA,
                                     const double be,
                                     const double xB,
                                     const double yB,
                                     const double zB,
                                     const double ce,
                                     const double xC,
                                     const double yC,
                                     const double zC,
                                     const double de,
                                     const double xD,
                                     const double yD,
                                     const double zD,
                                     const double* const bs,
                                     double* const d2ee)
{
    const double p = ae + be;
    const double q = ce + de;
    const double xP = (ae * xA + be * xB) / p;
    const double yP = (ae * yA + be * yB) / p;
    const double zP = (ae * zA + be * zB) / p;
    const double xQ = (ce * xC + de * xD) / q;
    const double yQ = (ce * yC + de * yD) / q;
    const double zQ = (ce * zC + de * zD) / q;
    const double C46272 = ae * be;
    const double C46271 = ae + be;
    const double C46270 = 0 * be;
    const double C46269 = xA - xB;
    const double C46291 = zA - zB;
    const double C46309 = 0 * be;
    const double C46322 = xP - xQ;
    const double C46321 = zP - zQ;
    const double C46320 = p + q;
    const double C46319 = p * q;
    const double C46327 = bs[3];
    const double C46337 = bs[4];
    const double C46346 = bs[5];
    const double C46360 = bs[6];
    const double C46382 = bs[7];
    const double C46491 = yP - yQ;
    const double C46697 = bs[2];
    const double C117 = bs[0];
    const double C47126 = ce + de;
    const double C47125 = ce * de;
    const double C47124 = xC - xD;
    const double C47158 = yC - yD;
    const double C47176 = zC - zD;
    const double C47346 = yA - yB;
    const double C46273 = std::pow(C46271, 2);
    const double C47113 = 2 * C46271;
    const double C46274 = C46272 * C46269;
    const double C47104 = std::pow(C46269, 2);
    const double C47411 = C46269 * be;
    const double C47410 = C46269 * ae;
    const double C46310 = C46272 * C46291;
    const double C47380 = std::pow(C46291, 2);
    const double C47446 = C46291 * be;
    const double C47444 = C46291 * ae;
    const double C46347 = std::pow(C46322, 2);
    const double C46417 = C46322 * be;
    const double C46329 = C46321 * ae;
    const double C46328 = C46321 * C46322;
    const double C46533 = std::pow(C46321, 2);
    const double C46323 = 2 * C46319;
    const double C46500 = std::pow(C46491, 2);
    const double C47130 = 2 * C47126;
    const double C47129 = std::pow(C47126, 2);
    const double C47131 = C47124 * de;
    const double C47128 = C47124 * ce;
    const double C47127 = std::pow(C47124, 2);
    const double C47159 = std::pow(C47158, 2);
    const double C47218 = C47158 * de;
    const double C47216 = C47158 * ce;
    const double C47177 = std::pow(C47176, 2);
    const double C47260 = C47176 * de;
    const double C47258 = C47176 * ce;
    const double C47365 = std::pow(C47346, 2);
    const double C47445 = C47346 * be;
    const double C47443 = C47346 * ae;
    const double C46275 = 2 * C46273;
    const double C138 = (std::pow((2 * p * q) / (p + q), 2) * bs[2] *
                         (zP - zQ) * (xP - xQ) * ae * be) /
                        C46273;
    const double C47412 = std::pow(C47113, -1);
    const double C47105 = C47104 * C46272;
    const double C47381 = C47380 * C46272;
    const double C46420 = C46327 * C46417;
    const double C46423 = C46337 * C46417;
    const double C46429 = C46346 * C46417;
    const double C46443 = C46360 * C46417;
    const double C46464 = C46382 * C46417;
    const double C46332 = C46327 * C46329;
    const double C46339 = C46337 * C46329;
    const double C46349 = C46346 * C46329;
    const double C46364 = C46360 * C46329;
    const double C46388 = C46382 * C46329;
    const double C46331 = C46328 * ae;
    const double C46324 = C46323 / C46320;
    const double C124 = (-(bs[1] * C46417 * C46323) / C46320) / C46271;
    const double C127 = (-(bs[1] * C46329 * C46323) / C46320) / C46271;
    const double C118 = -(C46322 * bs[1] * C46323) / C46320;
    const double C261 = -(C46491 * bs[1] * C46323) / C46320;
    const double C414 = -(C46321 * bs[1] * C46323) / C46320;
    const double C47143 = std::pow(C47130, -1);
    const double C47420 = std::pow(C47130, -2);
    const double C47144 = 2 * C47129;
    const double C47424 = C47129 * C47130;
    const double C47423 = 4 * C47129;
    const double C47413 = std::pow(C47128, 2);
    const double C47132 = C47127 * C47125;
    const double C47160 = C47159 * C47125;
    const double C47425 = std::pow(C47216, 2);
    const double C47178 = C47177 * C47125;
    const double C47427 = std::pow(C47258, 2);
    const double C47366 = C47365 * C46272;
    const double C47106 = C47105 / C46271;
    const double C47382 = C47381 / C46271;
    const double C46333 = C46331 * be;
    const double C46326 = -C46324;
    const double C46336 = std::pow(C46324, 4);
    const double C46359 = std::pow(C46324, 6);
    const double C139 =
        (be * std::pow(C46324, 2) * bs[2] * C46321 * ae +
         C46322 * std::pow(-C46324, 3) * bs[3] * C46321 * C46322 * ae * be) /
        C46273;
    const double C46696 = std::pow(C46324, 2);
    const double C125 =
        (C46322 * std::pow(C46324, 2) * bs[2] * C46417) / C46271 -
        (be * bs[1] * C46323) / (C46320 * C46271);
    const double C47458 = 4 * C47424;
    const double C47457 = C47126 * C47423;
    const double C47133 = C47132 / C47126;
    const double C47161 = C47160 / C47126;
    const double C47179 = C47178 / C47126;
    const double C47367 = C47366 / C46271;
    const double C47107 = -C47106;
    const double C47383 = -C47382;
    const double C46338 = C46337 * C46333;
    const double C46348 = C46346 * C46333;
    const double C46362 = C46360 * C46333;
    const double C46386 = C46382 * C46333;
    const double C46330 = std::pow(C46326, 3);
    const double C46345 = std::pow(C46326, 5);
    const double C46381 = std::pow(C46326, 7);
    const double C46341 = C46336 * C46339;
    const double C46425 = C46336 * C46423;
    const double C46430 = C46337 * C46336;
    const double C46367 = C46359 * C46364;
    const double C46445 = C46359 * C46443;
    const double C46465 = C46360 * C46359;
    const double C46698 = C46697 * C46696;
    const double C128 = (C46322 * C46696 * C46697 * C46329) / C46271;
    const double C271 = (C46491 * C46696 * C46697 * C46417) / C46271;
    const double C274 = (C46491 * C46696 * C46697 * C46329) / C46271;
    const double C424 = (C46321 * C46696 * C46697 * C46417) / C46271;
    const double C427 = (C46321 * C46696 * C46697 * C46329) / C46271 -
                        (ae * bs[1] * C46323) / (C46320 * C46271);
    const double C47134 = -C47133;
    const double C47162 = -C47161;
    const double C47180 = -C47179;
    const double C47368 = -C47367;
    const double C47108 = std::exp(C47107);
    const double C47384 = std::exp(C47383);
    const double C46340 = C46336 * C46338;
    const double C46366 = C46359 * C46362;
    const double C46334 = C46330 * C46332;
    const double C46418 = C46327 * C46330;
    const double C46421 = C46330 * C46420;
    const double C291 = ((yP - yQ) * C46330 * C46327 * C46333) / C46273;
    const double C444 = (ae * std::pow(C46324, 2) * bs[2] * C46322 * be +
                         C46321 * C46330 * C46327 * C46333) /
                        C46273;
    const double C46351 = C46345 * C46349;
    const double C46350 = C46345 * C46348;
    const double C46431 = C46345 * C46429;
    const double C46444 = C46346 * C46345;
    const double C46391 = C46381 * C46388;
    const double C46390 = C46381 * C46386;
    const double C46467 = C46381 * C46464;
    const double C46344 = be * C46341;
    const double C46343 = C46322 * C46341;
    const double C46832 = C46321 * C46341;
    const double C46861 = C46491 * C46341;
    const double C46426 = C46322 * C46425;
    const double C46504 = C46491 * C46425;
    const double C46531 = ae * C46425;
    const double C46530 = C46321 * C46425;
    const double C46433 = C46322 * C46430;
    const double C46432 = C46430 * be;
    const double C46706 = C46430 * C46347;
    const double C46804 = C46430 * C46500;
    const double C46835 = C46430 * C46533;
    const double C46862 = C46491 * C46430;
    const double C46924 = C46321 * C46430;
    const double C46923 = C46430 * ae;
    const double C46369 = C46367 * C46347;
    const double C46380 = be * C46367;
    const double C46379 = C46322 * C46367;
    const double C46952 = C46367 * C46500;
    const double C46980 = C46491 * C46367;
    const double C46998 = C46321 * C46367;
    const double C46449 = C46322 * C46445;
    const double C46571 = C46445 * C46500;
    const double C46587 = C46491 * C46445;
    const double C46607 = C46445 * C46533;
    const double C46675 = ae * C46445;
    const double C46674 = C46321 * C46445;
    const double C46470 = C46465 * C46347;
    const double C46469 = C46322 * C46465;
    const double C46468 = C46465 * be;
    const double C46960 = C46465 * C46500;
    const double C46983 = C46491 * C46465;
    const double C47002 = C46465 * C46533;
    const double C119 = C46698 * C46347 - (bs[1] * C46323) / C46320;
    const double C262 = C46491 * C46322 * C46698;
    const double C264 = C46698 * C46500 - (bs[1] * C46323) / C46320;
    const double C415 = C46321 * C46322 * C46698;
    const double C417 = C46698 * C46533 - (bs[1] * C46323) / C46320;
    const double C812 = C46321 * C46491 * C46698;
    const double C47135 = std::exp(C47134);
    const double C47163 = std::exp(C47162);
    const double C47181 = std::exp(C47180);
    const double C47369 = std::exp(C47368);
    const double C21479 = C47108 * C271;
    const double C25975 = C47108 * C424;
    const double C46276 = C46274 * C47108;
    const double C47448 = C47412 * C47108;
    const double C47447 = C47108 * C47410;
    const double C4575 = -(C47108 * C47411) / C46271;
    const double C46311 = C46310 * C47384;
    const double C116 = -(2 * C46272 * (zA - zB) * C47384) / C46271;
    const double C10231 =
        ((C47384 - (C46291 * 2 * C46272 * C46291 * C47384) / C46271) * ae) /
            C46271 -
        (0 * be) / C46275;
    const double C10232 =
        (0 * ae) / C46271 - (C46272 * C46291 * C47384) / C46273;
    const double C31224 =
        (-(0 * be) / C46271) / (2 * C46271) -
        ((C47384 - (C46291 * 2 * C46272 * C46291 * C47384) / C46271) * be) /
            C46271;
    const double C31225 =
        (-(2 * C46272 * C46291 * C47384) / C46271) / (2 * C46271) -
        (0 * be) / C46271;
    const double C47481 = C47412 * C47384;
    const double C47480 = C47384 * C47444;
    const double C31222 = -(C47384 * C47446) / C46271;
    const double C294 =
        (C46330 * C46327 * C46333 + C46340 * std::pow(yP - yQ, 2)) / C46273;
    const double C46368 = C46322 * C46366;
    const double C46564 = C46366 * C46500;
    const double C46586 = C46491 * C46366;
    const double C46606 = C46321 * C46366;
    const double C140 = (C46330 * C46327 * C46333 + be * C46322 * C46334 +
                         C46322 * (be * C46334 + C46322 * std::pow(C46324, 4) *
                                                     bs[4] * C46333)) /
                        C46273;
    const double C141 =
        (2 * (be * C46334 + C46322 * C46340) +
         be * (C46334 + C46341 * std::pow(C46322, 2)) +
         C46322 * (C46340 + be * C46322 * C46341 +
                   C46322 * (be * C46341 +
                             C46322 * std::pow(C46326, 5) * bs[5] * C46333))) /
        C46273;
    const double C292 = ((yP - yQ) * (be * C46334 + C46322 * C46340)) / C46273;
    const double C445 = (ae * (C46322 * C46330 * C46327 * C46322 * be +
                               bs[2] * std::pow(C46324, 2) * be) +
                         C46321 * (be * C46334 + C46322 * C46340)) /
                        C46273;
    const double C129 = (C46696 * C46697 * C46329 + C46334 * C46347) / C46271;
    const double C131 =
        (2 * C46322 * C46334 + C46322 * (C46334 + C46341 * C46347)) / C46271;
    const double C275 = (C46491 * C46322 * C46334) / C46271;
    const double C276 = (C46491 * (C46334 + C46341 * C46347)) / C46271;
    const double C280 = (C46696 * C46697 * C46329 + C46334 * C46500) / C46271;
    const double C428 =
        (C46321 * C46322 * C46334 + C46322 * C46698 * ae) / C46271;
    const double C433 =
        (C46696 * C46697 * C46329 + C46321 * (C46321 * C46334 + C46698 * ae) +
         C46321 * C46698 * ae) /
        C46271;
    const double C820 =
        (C46321 * C46491 * C46334 + C46491 * C46698 * ae) / C46271;
    const double C1025 =
        (2 * C46491 * C46334 + C46491 * (C46334 + C46341 * C46500)) / C46271;
    const double C46424 = C46418 * be;
    const double C46705 = C46322 * C46418;
    const double C46789 = C46491 * C46418;
    const double C46834 = C46321 * C46418;
    const double C46833 = C46418 * ae;
    const double C429 = (C46321 * (C46334 + C46341 * C46347) +
                         (C46698 + C46418 * C46347) * ae) /
                        C46271;
    const double C1168 = (C46321 * (C46334 + C46341 * C46500) +
                          (C46698 + C46418 * C46500) * ae) /
                         C46271;
    const double C1853 =
        (2 * (C46321 * C46334 + C46698 * ae) +
         C46321 * (C46334 + C46321 * (C46321 * C46341 + C46418 * ae) +
                   C46321 * C46418 * ae) +
         (C46698 + C46418 * C46533) * ae) /
        C46271;
    const double C120 =
        2 * C46322 * C46698 + C46322 * (C46698 + C46418 * C46347);
    const double C263 = C46491 * (C46698 + C46418 * C46347);
    const double C416 = C46321 * (C46698 + C46418 * C46347);
    const double C1016 =
        2 * C46491 * C46698 + C46491 * (C46698 + C46418 * C46500);
    const double C1153 = C46321 * (C46698 + C46418 * C46500);
    const double C1844 =
        2 * C46321 * C46698 + C46321 * (C46698 + C46418 * C46533);
    const double C447 = (C46330 * C46327 * C46333 + ae * C46321 * C46421 +
                         C46321 * (ae * C46421 + C46321 * C46340)) /
                        C46273;
    const double C827 =
        (ae * C46491 * C46421 + C46321 * C46491 * C46340) / C46273;
    const double C126 =
        (C46696 * C46697 * C46417 + C46322 * (C46322 * C46421 + C46698 * be) +
         C46322 * C46698 * be) /
        C46271;
    const double C272 = (C46491 * (C46322 * C46421 + C46698 * be)) / C46271;
    const double C277 = (C46696 * C46697 * C46417 + C46421 * C46500) / C46271;
    const double C425 = (C46321 * (C46322 * C46421 + C46698 * be)) / C46271;
    const double C430 = (C46696 * C46697 * C46417 + C46421 * C46533) / C46271;
    const double C817 = (C46321 * C46491 * C46421) / C46271;
    const double C1022 =
        (2 * C46491 * C46421 + C46491 * (C46421 + C46425 * C46500)) / C46271;
    const double C1165 = (C46321 * (C46421 + C46425 * C46500)) / C46271;
    const double C1850 =
        (2 * C46321 * C46421 + C46321 * (C46421 + C46425 * C46533)) / C46271;
    const double C21481 = C47108 * C291;
    const double C25977 = C47108 * C444;
    const double C46353 = C46351 * C46347;
    const double C46358 = be * C46351;
    const double C46357 = C46322 * C46351;
    const double C46872 = C46351 * C46500;
    const double C46898 = C46491 * C46351;
    const double C46922 = C46321 * C46351;
    const double C1031 =
        (3 * (C46334 + C46341 * C46500) +
         C46491 * (2 * C46491 * C46341 + C46491 * (C46341 + C46351 * C46500))) /
        C46271;
    const double C46352 = C46322 * C46350;
    const double C46532 = C46321 * C46350;
    const double C46555 = C46491 * C46350;
    const double C1034 = (2 * C46491 * C46340 +
                          C46491 * (C46340 + C46350 * std::pow(C46491, 2))) /
                         C46273;
    const double C1037 =
        (3 * (C46340 + C46350 * C46500) +
         C46491 * (2 * C46491 * C46350 + C46491 * (C46350 + C46366 * C46500))) /
        C46273;
    const double C1180 = (ae * (C46421 + C46425 * C46500) +
                          C46321 * (C46340 + C46350 * C46500)) /
                         C46273;
    const double C1862 = (2 * (ae * C46421 + C46321 * C46340) +
                          ae * (C46421 + C46425 * std::pow(C46321, 2)) +
                          C46321 * (C46340 + ae * C46321 * C46425 +
                                    C46321 * (ae * C46425 + C46321 * C46350))) /
                         C46273;
    const double C46434 = C46322 * C46431;
    const double C46513 = C46431 * C46500;
    const double C46535 = C46431 * C46533;
    const double C46556 = C46491 * C46431;
    const double C46605 = ae * C46431;
    const double C46604 = C46321 * C46431;
    const double C46448 = C46444 * C46347;
    const double C46447 = C46322 * C46444;
    const double C46446 = C46444 * be;
    const double C46881 = C46444 * C46500;
    const double C46901 = C46491 * C46444;
    const double C46925 = C46444 * C46533;
    const double C47000 = C46321 * C46444;
    const double C46999 = C46444 * ae;
    const double C46393 = C46391 * C46347;
    const double C46392 = C46322 * C46390;
    const double C46633 = C46390 * C46500;
    const double C46658 = C46491 * C46390;
    const double C46676 = C46321 * C46390;
    const double C46471 = C46322 * C46467;
    const double C46640 = C46467 * C46500;
    const double C46659 = C46491 * C46467;
    const double C46678 = C46467 * C46533;
    const double C281 = (C46322 * C46334 + C46343 * C46500) / C46271;
    const double C1177 = (C46491 * C46340 + ae * C46321 * C46504 +
                          C46321 * (ae * C46504 + C46321 * C46491 * C46350)) /
                         C46273;
    const double C1159 = (C46491 * C46421 + C46504 * C46533) / C46271;
    const double C46435 = C46433 * be;
    const double C46710 = 2 * C46433;
    const double C46791 = C46491 * C46433;
    const double C46841 = C46321 * C46433;
    const double C46840 = C46433 * ae;
    const double C46707 = C46418 + C46706;
    const double C46805 = C46418 + C46804;
    const double C46837 = C46418 + C46835;
    const double C46880 = 2 * C46862;
    const double C46900 = C46321 * C46862;
    const double C46899 = C46862 * ae;
    const double C46929 = 2 * C46924;
    const double C46927 = C46924 * ae;
    const double C46371 = C46351 + C46369;
    const double C46387 = 2 * C46379;
    const double C46385 = be * C46379;
    const double C46875 = C46379 * C46500;
    const double C46907 = C46491 * C46379;
    const double C46936 = C46321 * C46379;
    const double C46953 = C46351 + C46952;
    const double C46984 = C46321 * C46980;
    const double C46572 = C46431 + C46571;
    const double C46589 = C46587 * C46533;
    const double C46639 = 2 * C46587;
    const double C46657 = ae * C46587;
    const double C46656 = C46321 * C46587;
    const double C46611 = C46431 + C46607;
    const double C46682 = 2 * C46674;
    const double C46680 = ae * C46674;
    const double C46473 = C46444 + C46470;
    const double C46472 = C46469 * be;
    const double C46887 = C46469 * C46500;
    const double C46910 = C46491 * C46469;
    const double C46939 = C46469 * C46533;
    const double C46961 = C46444 + C46960;
    const double C46986 = C46983 * C46533;
    const double C47006 = C46444 + C47002;
    const double C47137 = C47135 * C47128;
    const double C47136 = C47135 / C47130;
    const double C47146 = C47143 * C47135;
    const double C47416 = C47135 * C47131;
    const double C47455 = C47420 * C47135;
    const double C47449 = C47135 * C47413;
    const double C47217 = C47163 / C47130;
    const double C47219 = C47163 * C47216;
    const double C47226 = C47143 * C47163;
    const double C47431 = C47163 * C47218;
    const double C47461 = C47420 * C47163;
    const double C47459 = C47163 * C47425;
    const double C47259 = C47181 / C47130;
    const double C47261 = C47181 * C47258;
    const double C47268 = C47143 * C47181;
    const double C47437 = C47181 * C47260;
    const double C47464 = C47420 * C47181;
    const double C47462 = C47181 * C47427;
    const double C47479 = C47412 * C47369;
    const double C47478 = C47369 * C47443;
    const double C15771 = -(C47369 * C47445) / C46271;
    const double C115 = ((0 * ae) / C46271 - C46276 / C46273) / (2 * C46271) -
                        (0 * be) / C46271;
    const double C4579 =
        (-C46270 / C46271) / (2 * C46271) -
        ((C47108 - (C46269 * 2 * C46276) / C46271) * be) / C46271;
    const double C4580 =
        (-(2 * C46276) / C46271) / (2 * C46271) - (0 * be) / C46271;
    const double C15773 =
        ((C47108 - (C46269 * 2 * C46276) / C46271) * ae) / C46271 -
        C46270 / C46275;
    const double C15774 = (0 * ae) / C46271 - C46276 / C46273;
    const double C21367 = -(2 * C46276) / C46271;
    const double C114 =
        (((C47108 - (C46269 * 2 * C46276) / C46271) * ae) / C46271 -
         C46270 / C46275) /
            (2 * C46271) -
        ((C46269 * ((0 * ae) / C46271 - C46276 / C46273) + C47448) * be) /
            C46271;
    const double C103 = C47448 / C47113;
    const double C101 = C47108 / C47113 - (C47447 * C47411) / C46273;
    const double C102 = C47447 / C46275 - (C47448 * C47411) / C46271;
    const double C15769 = C47447 / C46271;
    const double C4732 = C4575 * C291;
    const double C4728 = C4575 * C271;
    const double C10530 = C4575 * C444;
    const double C10526 = C4575 * C424;
    const double C42187 = ((0 * ae) / C46271 - C46311 / C46273) / (2 * C46271) -
                          (0 * be) / C46271;
    const double C42186 =
        (((C47384 - (C46291 * 2 * C46311) / C46271) * ae) / C46271 -
         C46309 / C46275) /
            (2 * C46271) -
        ((C46291 * ((0 * ae) / C46271 - C46311 / C46273) + C47481) * be) /
            C46271;
    const double C42184 = C47481 / C47113;
    const double C10229 = C47480 / C46271;
    const double C42182 = C47384 / C47113 - (C47480 * C47446) / C46273;
    const double C42183 = C47480 / C46275 - (C47481 * C47446) / C46271;
    const double C4741 = C4575 * C294;
    const double C21485 = C47108 * C294;
    const double C46565 = C46350 + C46564;
    const double C46588 = C46321 * C46586;
    const double C46632 = 2 * C46586;
    const double C4749 = C4575 * C292;
    const double C4734 = C47448 * C292;
    const double C15928 = C47448 * C292;
    const double C21494 = C47108 * C292;
    const double C10547 = C4575 * C445;
    const double C10532 = C47448 * C445;
    const double C25986 = C47108 * C445;
    const double C31525 = C47448 * C445;
    const double C46427 = C46426 + C46424;
    const double C434 =
        (C46322 * C46334 + C46321 * (C46321 * C46343 + C46705 * ae) +
         C46321 * C46705 * ae) /
        C46271;
    const double C821 =
        (C46321 * C46491 * C46343 + C46491 * C46705 * ae) / C46271;
    const double C265 = C46322 * C46698 + C46705 * C46500;
    const double C418 = C46322 * C46698 + C46705 * C46533;
    const double C813 = C46321 * C46491 * C46705;
    const double C1017 =
        2 * C46491 * C46705 + C46491 * (C46705 + C46433 * C46500);
    const double C1154 = C46321 * (C46705 + C46433 * C46500);
    const double C1845 =
        2 * C46321 * C46705 + C46321 * (C46705 + C46433 * C46533);
    const double C1162 =
        (C46491 * C46334 + C46321 * (C46321 * C46491 * C46341 + C46789 * ae) +
         C46321 * C46789 * ae) /
        C46271;
    const double C2228 =
        (2 * (C46321 * C46861 + C46789 * ae) +
         C46321 * (C46861 + C46321 * (C46321 * C46491 * C46351 + C46862 * ae) +
                   C46321 * C46862 * ae) +
         (C46789 + C46862 * C46533) * ae) /
        C46271;
    const double C1150 = C46491 * C46698 + C46789 * C46533;
    const double C2222 =
        2 * C46321 * C46789 + C46321 * (C46789 + C46862 * C46533);
    const double C46836 = C46832 + C46833;
    const double C10539 = C4575 * C447;
    const double C25982 = C47108 * C447;
    const double C5389 = C4575 * C827;
    const double C21993 = C47108 * C827;
    const double C4745 = C4575 * C272;
    const double C4730 = C47448 * C272;
    const double C15924 = C47448 * C272;
    const double C21492 = C47108 * C272;
    const double C4737 = C4575 * C277;
    const double C21483 = C47108 * C277;
    const double C10543 = C4575 * C425;
    const double C10528 = C47448 * C425;
    const double C25984 = C47108 * C425;
    const double C31521 = C47448 * C425;
    const double C10535 = C4575 * C430;
    const double C25980 = C47108 * C430;
    const double C5385 = C4575 * C817;
    const double C21991 = C47108 * C817;
    const double C5644 = C4575 * C1022;
    const double C21488 = C47108 * C1022;
    const double C5822 = C4575 * C1165;
    const double C21995 = C47108 * C1165;
    const double C12246 = C4575 * C1850;
    const double C27695 = C47108 * C1850;
    const double C46355 = C46341 + C46353;
    const double C46370 = C46358 + C46368;
    const double C46363 = 2 * C46357;
    const double C46361 = be * C46357;
    const double C46839 = C46321 * C46357;
    const double C46864 = C46491 * C46357;
    const double C1026 =
        (2 * C46491 * C46343 + C46491 * (C46343 + C46357 * C46500)) / C46271;
    const double C1032 =
        (3 * (C46343 + C46357 * C46500) +
         C46491 * (2 * C46491 * C46357 + C46491 * (C46357 + C46379 * C46500))) /
        C46271;
    const double C1169 = (C46321 * (C46343 + C46357 * C46500) +
                          (C46705 + C46433 * C46500) * ae) /
                         C46271;
    const double C1854 =
        (2 * (C46321 * C46343 + C46705 * ae) +
         C46321 * (C46343 + C46321 * (C46321 * C46357 + C46433 * ae) +
                   C46321 * C46433 * ae) +
         (C46705 + C46433 * C46533) * ae) /
        C46271;
    const double C46873 = C46341 + C46872;
    const double C46902 = C46321 * C46898;
    const double C46951 = 2 * C46898;
    const double C46926 = C46922 + C46923;
    const double C46354 = C46344 + C46352;
    const double C46534 = C46531 + C46532;
    const double C5648 = C4575 * C1034;
    const double C21490 = C47108 * C1034;
    const double C5657 = C4575 * C1037;
    const double C22194 = C47108 * C1037;
    const double C5826 = C4575 * C1180;
    const double C21997 = C47108 * C1180;
    const double C12250 = C4575 * C1862;
    const double C27697 = C47108 * C1862;
    const double C46436 = C46434 + C46432;
    const double C46514 = C46425 + C46513;
    const double C46536 = C46425 + C46535;
    const double C46570 = 2 * C46556;
    const double C46585 = ae * C46556;
    const double C46584 = C46321 * C46556;
    const double C2231 =
        (2 * (ae * C46504 + C46321 * C46555) + ae * (C46504 + C46556 * C46533) +
         C46321 * (C46555 + ae * C46321 * C46556 +
                   C46321 * (ae * C46556 + C46321 * C46491 * C46366))) /
        C46273;
    const double C2225 =
        (2 * C46321 * C46504 + C46321 * (C46504 + C46556 * C46533)) / C46271;
    const double C46609 = C46605 + C46606;
    const double C46610 = 2 * C46604;
    const double C46608 = ae * C46604;
    const double C46451 = C46430 + C46448;
    const double C46450 = C46447 * be;
    const double C46466 = 2 * C46447;
    const double C46807 = C46447 * C46500;
    const double C46842 = C46447 * C46533;
    const double C46865 = C46491 * C46447;
    const double C46938 = C46321 * C46447;
    const double C46937 = C46447 * ae;
    const double C46452 = C46449 + C46446;
    const double C46882 = C46430 + C46881;
    const double C46903 = C46901 * C46533;
    const double C46959 = 2 * C46901;
    const double C46982 = C46321 * C46901;
    const double C46981 = C46901 * ae;
    const double C46928 = C46430 + C46925;
    const double C47007 = 2 * C47000;
    const double C47005 = C47000 * ae;
    const double C47004 = C46998 + C46999;
    const double C46395 = C46367 + C46393;
    const double C46394 = C46380 + C46392;
    const double C46634 = C46366 + C46633;
    const double C46661 = C46321 * C46658;
    const double C46681 = C46675 + C46676;
    const double C46474 = C46471 + C46468;
    const double C46641 = C46445 + C46640;
    const double C46663 = C46659 * C46533;
    const double C46683 = C46445 + C46678;
    const double C5818 = C4575 * C1177;
    const double C22326 = C47108 * C1177;
    const double C5814 = C4575 * C1159;
    const double C22324 = C47108 * C1159;
    const double C1163 =
        (C46491 * C46343 + C46321 * (C46321 * C46491 * C46357 + C46791 * ae) +
         C46321 * C46791 * ae) /
        C46271;
    const double C1151 = C46491 * C46705 + C46791 * C46533;
    const double C121 = 3 * (C46698 + C46418 * C46347) +
                        C46322 * (2 * C46705 + C46322 * C46707);
    const double C266 = C46698 + C46418 * C46347 + C46707 * C46500;
    const double C267 = C46491 * (2 * C46705 + C46322 * C46707);
    const double C419 = C46698 + C46418 * C46347 + C46707 * C46533;
    const double C420 = C46321 * (2 * C46705 + C46322 * C46707);
    const double C814 = C46321 * C46491 * C46707;
    const double C1174 =
        (C46334 + C46341 * C46500 +
         C46321 * (C46321 * (C46341 + C46351 * C46500) + C46805 * ae) +
         C46321 * C46805 * ae) /
        C46271;
    const double C1548 =
        (C46321 * (2 * C46491 * C46341 + C46491 * (C46341 + C46351 * C46500)) +
         (2 * C46789 + C46491 * C46805) * ae) /
        C46271;
    const double C1019 = 3 * (C46698 + C46418 * C46500) +
                         C46491 * (2 * C46789 + C46491 * C46805);
    const double C1156 = C46698 + C46418 * C46500 + C46805 * C46533;
    const double C1542 = C46321 * (2 * C46789 + C46491 * C46805);
    const double C1847 = 3 * (C46698 + C46418 * C46533) +
                         C46321 * (2 * C46834 + C46321 * C46837);
    const double C46373 = C46322 * C46371;
    const double C46383 = 3 * C46371;
    const double C46378 = be * C46371;
    const double C46846 = C46321 * C46371;
    const double C46867 = C46491 * C46371;
    const double C46389 = C46366 + C46385;
    const double C46876 = C46357 + C46875;
    const double C46911 = C46321 * C46907;
    const double C46954 = C46491 * C46953;
    const double C46970 = C46321 * C46953;
    const double C46573 = C46491 * C46572;
    const double C46638 = 3 * C46572;
    const double C46649 = ae * C46572;
    const double C46648 = C46321 * C46572;
    const double C46591 = C46556 + C46589;
    const double C46662 = 2 * C46656;
    const double C46660 = ae * C46656;
    const double C46614 = C46321 * C46611;
    const double C46677 = 3 * C46611;
    const double C46673 = ae * C46611;
    const double C46684 = C46366 + C46680;
    const double C46476 = C46322 * C46473;
    const double C46475 = C46473 * be;
    const double C46810 = C46473 * C46500;
    const double C46849 = C46473 * C46533;
    const double C46868 = C46491 * C46473;
    const double C46888 = C46447 + C46887;
    const double C46912 = C46910 * C46533;
    const double C46942 = C46447 + C46939;
    const double C46962 = C46491 * C46961;
    const double C46973 = C46961 * C46533;
    const double C46989 = C46901 + C46986;
    const double C47009 = C46321 * C47006;
    const double C47138 = C47137 * C47131;
    const double C47145 = C47137 / C47144;
    const double C47417 = C47143 * C47137;
    const double C47415 = C47137 / C47126;
    const double C258 = (C47135 * std::pow(C47131, 2)) / C47129 + C47136;
    const double C47147 = C47146 * C47131;
    const double C47421 = C47128 * C47146;
    const double C47419 = 2 * C47146;
    const double C47465 = C47146 / C47423;
    const double C112 = C47146 / C47458;
    const double C2703 = C47146 / C47130;
    const double C47451 = C47416 / C47126;
    const double C259 = (-2 * C47143 * C47416) / C47126;
    const double C47482 = C47449 / C47129;
    const double C942 = (C47163 * std::pow(C47218, 2)) / C47129 + C47217;
    const double C47220 = C47219 * C47218;
    const double C47225 = C47219 / C47144;
    const double C47429 = C47219 / C47126;
    const double C47426 = C47143 * C47219;
    const double C47227 = C47226 * C47218;
    const double C47435 = C47216 * C47226;
    const double C47434 = 2 * C47226;
    const double C47471 = C47226 / C47423;
    const double C1014 = C47226 / C47458;
    const double C2700 = C47226 / C47130;
    const double C47467 = C47431 / C47126;
    const double C943 = (-2 * C47143 * C47431) / C47126;
    const double C47487 = C47459 / C47129;
    const double C1664 = (C47181 * std::pow(C47260, 2)) / C47129 + C47259;
    const double C47262 = C47261 * C47260;
    const double C47267 = C47261 / C47144;
    const double C47430 = C47261 / C47126;
    const double C47428 = C47143 * C47261;
    const double C47269 = C47268 * C47260;
    const double C47441 = C47258 * C47268;
    const double C47440 = 2 * C47268;
    const double C47477 = C47268 / C47423;
    const double C1843 = C47268 / C47458;
    const double C3602 = C47268 / C47130;
    const double C47473 = C47437 / C47126;
    const double C1665 = (-2 * C47143 * C47437) / C47126;
    const double C47489 = C47462 / C47129;
    const double C21366 = C47479 / C47113;
    const double C4577 = C47478 / C46271;
    const double C21364 = C47369 / C47113 - (C47478 * C47445) / C46273;
    const double C21365 = C47478 / C46275 - (C47479 * C47445) / C46271;
    const double C4765 = C4579 * C276;
    const double C4761 = C4579 * C263;
    const double C4757 = C4579 * C281;
    const double C4748 = C4579 * C275;
    const double C4744 = C4579 * C262;
    const double C4740 = C4579 * C280;
    const double C4736 = C4579 * C264;
    const double C4733 = C4579 * C274;
    const double C4729 = C4579 * C261;
    const double C5388 = C4579 * C820;
    const double C5384 = C4579 * C812;
    const double C5656 = C4579 * C1031;
    const double C5649 = C4579 * C1025;
    const double C5645 = C4579 * C1016;
    const double C5827 = C4579 * C1168;
    const double C5823 = C4579 * C1153;
    const double C10563 = C4579 * C429;
    const double C10559 = C4579 * C416;
    const double C10546 = C4579 * C428;
    const double C10542 = C4579 * C415;
    const double C10538 = C4579 * C433;
    const double C10534 = C4579 * C417;
    const double C10531 = C4579 * C427;
    const double C10527 = C4579 * C414;
    const double C12251 = C4579 * C1853;
    const double C12247 = C4579 * C1844;
    const double C4750 = C4580 * C276;
    const double C4746 = C4580 * C263;
    const double C4742 = C4580 * C281;
    const double C4735 = C4580 * C275;
    const double C4731 = C4580 * C262;
    const double C10548 = C4580 * C429;
    const double C10544 = C4580 * C416;
    const double C10533 = C4580 * C428;
    const double C10529 = C4580 * C415;
    const double C15959 = C15773 * C276;
    const double C15955 = C15773 * C263;
    const double C15951 = C15773 * C281;
    const double C15942 = C15773 * C275;
    const double C15938 = C15773 * C262;
    const double C15934 = C15773 * C280;
    const double C15930 = C15773 * C264;
    const double C15927 = C15773 * C274;
    const double C15923 = C15773 * C261;
    const double C16582 = C15773 * C820;
    const double C16578 = C15773 * C812;
    const double C16842 = C15773 * C1031;
    const double C16835 = C15773 * C1025;
    const double C16831 = C15773 * C1016;
    const double C17005 = C15773 * C1168;
    const double C17001 = C15773 * C1153;
    const double C31556 = C15773 * C429;
    const double C31552 = C15773 * C416;
    const double C31539 = C15773 * C428;
    const double C31535 = C15773 * C415;
    const double C31531 = C15773 * C433;
    const double C31527 = C15773 * C417;
    const double C31524 = C15773 * C427;
    const double C31520 = C15773 * C414;
    const double C33236 = C15773 * C1853;
    const double C33232 = C15773 * C1844;
    const double C15944 = C15774 * C276;
    const double C15940 = C15774 * C263;
    const double C15936 = C15774 * C281;
    const double C15929 = C15774 * C275;
    const double C15925 = C15774 * C262;
    const double C31541 = C15774 * C429;
    const double C31537 = C15774 * C416;
    const double C31526 = C15774 * C428;
    const double C31522 = C15774 * C415;
    const double C21506 = C21367 * C276;
    const double C21504 = C21367 * C263;
    const double C21497 = C21367 * C281;
    const double C21493 = C21367 * C275;
    const double C21491 = C21367 * C262;
    const double C21489 = C21367 * C1025;
    const double C21487 = C21367 * C1016;
    const double C21486 = C21367 * C280;
    const double C21484 = C21367 * C264;
    const double C21482 = C21367 * C274;
    const double C21480 = C21367 * C261;
    const double C21996 = C21367 * C1168;
    const double C21994 = C21367 * C1153;
    const double C21992 = C21367 * C820;
    const double C21990 = C21367 * C812;
    const double C22195 = C21367 * C1031;
    const double C25994 = C21367 * C429;
    const double C25992 = C21367 * C416;
    const double C25985 = C21367 * C428;
    const double C25983 = C21367 * C415;
    const double C25981 = C21367 * C433;
    const double C25979 = C21367 * C417;
    const double C25978 = C21367 * C427;
    const double C25976 = C21367 * C414;
    const double C27698 = C21367 * C1853;
    const double C27696 = C21367 * C1844;
    const double C15943 = C15769 * C292;
    const double C15939 = C15769 * C272;
    const double C15935 = C15769 * C294;
    const double C15931 = C15769 * C277;
    const double C15926 = C15769 * C291;
    const double C15922 = C15769 * C271;
    const double C16583 = C15769 * C827;
    const double C16579 = C15769 * C817;
    const double C16843 = C15769 * C1037;
    const double C16834 = C15769 * C1034;
    const double C16830 = C15769 * C1022;
    const double C17004 = C15769 * C1180;
    const double C17000 = C15769 * C1165;
    const double C16996 = C15769 * C1177;
    const double C16992 = C15769 * C1159;
    const double C31540 = C15769 * C445;
    const double C31536 = C15769 * C425;
    const double C31532 = C15769 * C447;
    const double C31528 = C15769 * C430;
    const double C31523 = C15769 * C444;
    const double C31519 = C15769 * C424;
    const double C33235 = C15769 * C1862;
    const double C33231 = C15769 * C1850;
    const double C113 =
        (((0 - (C46269 * C46270) / C46271) * ae) / C46271 - (0 * be) / C46275) /
            (2 * C46271) -
        ((C46269 * (((C47108 - (C46269 * 2 * C46276) / C46271) * ae) / C46271 -
                    C46270 / C46275) +
          C15769) *
         be) /
            C46271 +
        (0 * ae) / C46271 - C46276 / C46273;
    const double C42185 =
        (((0 - (C46291 * C46309) / C46271) * ae) / C46271 - (0 * be) / C46275) /
            (2 * C46271) -
        ((C46291 * (((C47384 - (C46291 * 2 * C46311) / C46271) * ae) / C46271 -
                    C46309 / C46275) +
          C10229) *
         be) /
            C46271 +
        (0 * ae) / C46271 - C46311 / C46273;
    const double C5641 =
        (4 * (2 * C46555 + C46491 * C46565) +
         C46491 *
             (3 * C46565 + C46491 * (2 * C46491 * C46366 +
                                     C46491 * (C46366 + C46390 * C46500)))) /
        C46273;
    const double C130 =
        (2 * (C46322 * C46421 + C46698 * be) +
         C46322 * (C46421 + C46322 * C46427 + C46322 * C46418 * be) +
         (C46698 + C46418 * C46347) * be) /
        C46271;
    const double C273 =
        (C46491 * (C46421 + C46322 * C46427 + C46705 * be)) / C46271;
    const double C278 =
        (C46322 * C46421 + C46698 * be + C46427 * C46500) / C46271;
    const double C426 =
        (C46321 * (C46421 + C46322 * C46427 + C46705 * be)) / C46271;
    const double C431 =
        (C46322 * C46421 + C46698 * be + C46427 * C46533) / C46271;
    const double C818 = (C46321 * C46491 * C46427) / C46271;
    const double C10555 = C4579 * C434;
    const double C10540 = C4580 * C434;
    const double C25990 = C21367 * C434;
    const double C31548 = C15773 * C434;
    const double C31533 = C15774 * C434;
    const double C5397 = C4579 * C821;
    const double C5390 = C4580 * C821;
    const double C16591 = C15773 * C821;
    const double C16584 = C15774 * C821;
    const double C22001 = C21367 * C821;
    const double C4753 = C4579 * C265;
    const double C4738 = C4580 * C265;
    const double C15947 = C15773 * C265;
    const double C15932 = C15774 * C265;
    const double C21495 = C21367 * C265;
    const double C10551 = C4579 * C418;
    const double C10536 = C4580 * C418;
    const double C25988 = C21367 * C418;
    const double C31544 = C15773 * C418;
    const double C31529 = C15774 * C418;
    const double C5393 = C4579 * C813;
    const double C5386 = C4580 * C813;
    const double C16587 = C15773 * C813;
    const double C16580 = C15774 * C813;
    const double C21999 = C21367 * C813;
    const double C5647 = C4580 * C1017;
    const double C5968 = C4579 * C1017;
    const double C16833 = C15774 * C1017;
    const double C17146 = C15773 * C1017;
    const double C21500 = C21367 * C1017;
    const double C5825 = C4580 * C1154;
    const double C6170 = C4579 * C1154;
    const double C17003 = C15774 * C1154;
    const double C17348 = C15773 * C1154;
    const double C22003 = C21367 * C1154;
    const double C12249 = C4580 * C1845;
    const double C12586 = C4579 * C1845;
    const double C28039 = C21367 * C1845;
    const double C33234 = C15774 * C1845;
    const double C33571 = C15773 * C1845;
    const double C5819 = C4579 * C1162;
    const double C16997 = C15773 * C1162;
    const double C22327 = C21367 * C1162;
    const double C7180 = C4579 * C2228;
    const double C18334 = C15773 * C2228;
    const double C23363 = C21367 * C2228;
    const double C5815 = C4579 * C1150;
    const double C16993 = C15773 * C1150;
    const double C22325 = C21367 * C1150;
    const double C7176 = C4579 * C2222;
    const double C18330 = C15773 * C2222;
    const double C23361 = C21367 * C2222;
    const double C1859 =
        (3 * (C46334 + C46321 * C46836 + C46834 * ae) +
         C46321 * (2 * C46836 +
                   C46321 * (C46341 + C46321 * (C46321 * C46351 + C46430 * ae) +
                             C46321 * C46430 * ae) +
                   C46837 * ae) +
         (2 * C46834 + C46321 * C46837) * ae) /
        C46271;
    const double C133 = (3 * (C46334 + C46341 * C46347) +
                         C46322 * (2 * C46343 + C46322 * C46355)) /
                        C46271;
    const double C282 = (C46334 + C46341 * C46347 + C46355 * C46500) / C46271;
    const double C284 = (C46491 * (2 * C46343 + C46322 * C46355)) / C46271;
    const double C435 =
        (C46334 + C46341 * C46347 + C46321 * (C46321 * C46355 + C46707 * ae) +
         C46321 * C46707 * ae) /
        C46271;
    const double C437 = (C46321 * (2 * C46343 + C46322 * C46355) +
                         (2 * C46705 + C46322 * C46707) * ae) /
                        C46271;
    const double C822 =
        (C46321 * C46491 * C46355 + C46491 * C46707 * ae) / C46271;
    const double C1027 =
        (2 * C46491 * C46355 + C46491 * (C46355 + C46371 * C46500)) / C46271;
    const double C46372 = C46322 * C46370;
    const double C46377 = 2 * C46370;
    const double C46540 = C46321 * C46370;
    const double C46558 = C46491 * C46370;
    const double C46365 = C46350 + C46361;
    const double C46843 = C46839 + C46840;
    const double C5651 = C4580 * C1026;
    const double C5972 = C4579 * C1026;
    const double C16837 = C15774 * C1026;
    const double C17150 = C15773 * C1026;
    const double C21502 = C21367 * C1026;
    const double C5658 = C4580 * C1032;
    const double C16844 = C15774 * C1032;
    const double C22450 = C21367 * C1032;
    const double C5829 = C4580 * C1169;
    const double C6174 = C4579 * C1169;
    const double C17007 = C15774 * C1169;
    const double C17352 = C15773 * C1169;
    const double C22005 = C21367 * C1169;
    const double C12253 = C4580 * C1854;
    const double C12590 = C4579 * C1854;
    const double C28041 = C21367 * C1854;
    const double C33238 = C15774 * C1854;
    const double C33575 = C15773 * C1854;
    const double C5639 =
        (4 * (2 * C46861 + C46491 * C46873) +
         C46491 *
             (3 * C46873 + C46491 * (2 * C46491 * C46351 +
                                     C46491 * (C46351 + C46367 * C46500)))) /
        C46271;
    const double C46904 = C46902 + C46899;
    const double C46930 = C46321 * C46926;
    const double C46997 = 2 * C46926;
    const double C142 =
        (3 * (C46340 + be * C46343 + C46322 * C46354) +
         be * (2 * C46343 + C46322 * C46355) +
         C46322 *
             (2 * C46354 + be * C46355 +
              C46322 * (C46350 + be * C46322 * C46351 +
                        C46322 * (be * C46351 + C46322 * std::pow(C46324, 6) *
                                                    bs[6] * C46333)))) /
        C46273;
    const double C293 =
        ((yP - yQ) * (C46340 + be * C46343 + C46322 * C46354)) / C46273;
    const double C295 =
        (be * C46334 + C46322 * C46340 + C46354 * std::pow(yP - yQ, 2)) /
        C46273;
    const double C446 =
        (ae * (C46330 * C46327 * C46417 +
               C46322 * (C46322 * C46336 * C46337 * C46417 + C46418 * be) +
               C46322 * C46418 * be) +
         C46321 * (C46340 + be * C46343 + C46322 * C46354)) /
        C46273;
    const double C448 = (be * C46334 + C46322 * C46340 + ae * C46321 * C46427 +
                         C46321 * (ae * C46427 + C46321 * C46354)) /
                        C46273;
    const double C828 =
        (ae * C46491 * C46427 + C46321 * C46491 * C46354) / C46273;
    const double C1035 = (2 * C46491 * C46354 +
                          C46491 * (C46354 + C46370 * std::pow(C46491, 2))) /
                         C46273;
    const double C46437 = C46322 * C46436;
    const double C46442 = 2 * C46436;
    const double C46506 = C46491 * C46436;
    const double C46539 = ae * C46436;
    const double C46538 = C46321 * C46436;
    const double C1181 = (ae * (C46427 + C46436 * C46500) +
                          C46321 * (C46354 + C46370 * C46500)) /
                         C46273;
    const double C1863 = (2 * (ae * C46427 + C46321 * C46354) +
                          ae * (C46427 + C46436 * std::pow(C46321, 2)) +
                          C46321 * (C46354 + ae * C46321 * C46436 +
                                    C46321 * (ae * C46436 + C46321 * C46370))) /
                         C46273;
    const double C1023 =
        (2 * C46491 * C46427 + C46491 * (C46427 + C46436 * C46500)) / C46271;
    const double C1166 = (C46321 * (C46427 + C46436 * C46500)) / C46271;
    const double C1851 =
        (2 * C46321 * C46427 + C46321 * (C46427 + C46436 * C46533)) / C46271;
    const double C1183 =
        (C46340 + C46350 * C46500 + ae * C46321 * C46514 +
         C46321 * (ae * C46514 + C46321 * (C46350 + C46366 * C46500))) /
        C46273;
    const double C1551 =
        (ae * (2 * C46504 + C46491 * C46514) +
         C46321 * (2 * C46491 * C46350 + C46491 * (C46350 + C46366 * C46500))) /
        C46273;
    const double C7173 =
        (2 * (ae * C46514 + C46321 * C46565) + ae * (C46514 + C46572 * C46533) +
         C46321 *
             (C46565 + ae * C46321 * C46572 +
              C46321 * (ae * C46572 + C46321 * (C46366 + C46390 * C46500)))) /
        C46273;
    const double C1028 = (3 * (C46421 + C46425 * C46500) +
                          C46491 * (2 * C46504 + C46491 * C46514)) /
                         C46271;
    const double C1171 = (C46421 + C46425 * C46500 + C46514 * C46533) / C46271;
    const double C1545 = (C46321 * (2 * C46504 + C46491 * C46514)) / C46271;
    const double C7169 =
        (2 * C46321 * C46514 + C46321 * (C46514 + C46572 * C46533)) / C46271;
    const double C1865 =
        (3 * (C46340 + ae * C46530 + C46321 * C46534) +
         ae * (2 * C46530 + C46321 * C46536) +
         C46321 * (2 * C46534 + ae * C46536 +
                   C46321 * (C46350 + ae * C46321 * C46431 +
                             C46321 * (ae * C46431 + C46321 * C46366)))) /
        C46273;
    const double C1856 = (3 * (C46421 + C46425 * C46533) +
                          C46321 * (2 * C46530 + C46321 * C46536)) /
                         C46271;
    const double C46590 = C46585 + C46588;
    const double C7181 = C4575 * C2231;
    const double C18335 = C15769 * C2231;
    const double C23364 = C47108 * C2231;
    const double C7177 = C4575 * C2225;
    const double C18331 = C15769 * C2225;
    const double C23362 = C47108 * C2225;
    const double C46613 = C46321 * C46609;
    const double C46672 = 2 * C46609;
    const double C46612 = C46350 + C46608;
    const double C46453 = C46451 * be;
    const double C46711 = C46322 * C46451;
    const double C46715 = 3 * C46451;
    const double C46793 = C46491 * C46451;
    const double C46848 = C46321 * C46451;
    const double C46847 = C46451 * ae;
    const double C1170 = (C46321 * (C46355 + C46371 * C46500) +
                          (C46707 + C46451 * C46500) * ae) /
                         C46271;
    const double C1855 =
        (2 * (C46321 * C46355 + C46707 * ae) +
         C46321 * (C46355 + C46321 * (C46321 * C46371 + C46451 * ae) +
                   C46321 * C46451 * ae) +
         (C46707 + C46451 * C46533) * ae) /
        C46271;
    const double C1018 =
        2 * C46491 * C46707 + C46491 * (C46707 + C46451 * C46500);
    const double C1155 = C46321 * (C46707 + C46451 * C46500);
    const double C1846 =
        2 * C46321 * C46707 + C46321 * (C46707 + C46451 * C46533);
    const double C46808 = C46433 + C46807;
    const double C46844 = C46433 + C46842;
    const double C46886 = 2 * C46865;
    const double C46909 = C46321 * C46865;
    const double C46908 = C46865 * ae;
    const double C2229 =
        (2 * (C46321 * C46864 + C46791 * ae) +
         C46321 * (C46864 + C46321 * (C46321 * C46491 * C46379 + C46865 * ae) +
                   C46321 * C46865 * ae) +
         (C46791 + C46865 * C46533) * ae) /
        C46271;
    const double C2223 =
        2 * C46321 * C46791 + C46321 * (C46791 + C46865 * C46533);
    const double C46943 = 2 * C46938;
    const double C46941 = C46938 * ae;
    const double C46940 = C46936 + C46937;
    const double C46454 = C46322 * C46452;
    const double C46463 = 2 * C46452;
    const double C46516 = C46452 * C46500;
    const double C46541 = C46452 * C46533;
    const double C46559 = C46491 * C46452;
    const double C46619 = ae * C46452;
    const double C46618 = C46321 * C46452;
    const double C46883 = C46491 * C46882;
    const double C46958 = 3 * C46882;
    const double C46972 = C46321 * C46882;
    const double C46971 = C46882 * ae;
    const double C7171 =
        (2 * (C46321 * C46873 + C46805 * ae) +
         C46321 *
             (C46873 +
              C46321 * (C46321 * (C46351 + C46367 * C46500) + C46882 * ae) +
              C46321 * C46882 * ae) +
         (C46805 + C46882 * C46533) * ae) /
        C46271;
    const double C7167 =
        2 * C46321 * C46805 + C46321 * (C46805 + C46882 * C46533);
    const double C46905 = C46862 + C46903;
    const double C46987 = 2 * C46982;
    const double C46985 = C46982 * ae;
    const double C46988 = C46984 + C46981;
    const double C46931 = C46321 * C46928;
    const double C47003 = 3 * C46928;
    const double C47001 = C46928 * ae;
    const double C47008 = C46321 * C47004;
    const double C46397 = C46322 * C46395;
    const double C1033 =
        (3 * (C46355 + C46371 * C46500) +
         C46491 * (2 * C46491 * C46371 + C46491 * (C46371 + C46395 * C46500))) /
        C46271;
    const double C46396 = C46322 * C46394;
    const double C46567 = C46394 * C46500;
    const double C46595 = C46491 * C46394;
    const double C46620 = C46321 * C46394;
    const double C1038 =
        (3 * (C46354 + C46370 * C46500) +
         C46491 * (2 * C46491 * C46370 + C46491 * (C46370 + C46394 * C46500))) /
        C46273;
    const double C46635 = C46491 * C46634;
    const double C46650 = C46321 * C46634;
    const double C46665 = C46657 + C46661;
    const double C46685 = C46321 * C46681;
    const double C46477 = C46322 * C46474;
    const double C46577 = C46474 * C46500;
    const double C46596 = C46491 * C46474;
    const double C46621 = C46474 * C46533;
    const double C46642 = C46491 * C46641;
    const double C46651 = C46641 * C46533;
    const double C46666 = C46587 + C46663;
    const double C46686 = C46321 * C46683;
    const double C5821 = C4580 * C1163;
    const double C6904 = C4579 * C1163;
    const double C16999 = C15774 * C1163;
    const double C18066 = C15773 * C1163;
    const double C23155 = C21367 * C1163;
    const double C5817 = C4580 * C1151;
    const double C6900 = C4579 * C1151;
    const double C16995 = C15774 * C1151;
    const double C18062 = C15773 * C1151;
    const double C23153 = C21367 * C1151;
    const double C4768 = C4579 * C266;
    const double C4755 = C4580 * C266;
    const double C15962 = C15773 * C266;
    const double C15949 = C15774 * C266;
    const double C21508 = C21367 * C266;
    const double C4763 = C4580 * C267;
    const double C5052 = C4579 * C267;
    const double C15957 = C15774 * C267;
    const double C16246 = C15773 * C267;
    const double C21738 = C21367 * C267;
    const double C10566 = C4579 * C419;
    const double C10553 = C4580 * C419;
    const double C25995 = C21367 * C419;
    const double C31559 = C15773 * C419;
    const double C31546 = C15774 * C419;
    const double C10561 = C4580 * C420;
    const double C10834 = C4579 * C420;
    const double C26267 = C21367 * C420;
    const double C31554 = C15774 * C420;
    const double C31827 = C15773 * C420;
    const double C5400 = C4579 * C814;
    const double C5395 = C4580 * C814;
    const double C16594 = C15773 * C814;
    const double C16589 = C15774 * C814;
    const double C22006 = C21367 * C814;
    const double C5834 = C4579 * C1174;
    const double C17012 = C15773 * C1174;
    const double C22331 = C21367 * C1174;
    const double C6320 = C4579 * C1548;
    const double C17490 = C15773 * C1548;
    const double C22335 = C21367 * C1548;
    const double C5652 = C4579 * C1019;
    const double C16838 = C15773 * C1019;
    const double C22193 = C21367 * C1019;
    const double C5830 = C4579 * C1156;
    const double C17008 = C15773 * C1156;
    const double C22329 = C21367 * C1156;
    const double C6316 = C4579 * C1542;
    const double C17486 = C15773 * C1542;
    const double C22333 = C21367 * C1542;
    const double C12254 = C4579 * C1847;
    const double C27699 = C21367 * C1847;
    const double C33239 = C15773 * C1847;
    const double C46375 = C46363 + C46373;
    const double C5640 =
        (4 * (2 * C46864 + C46491 * C46876) +
         C46491 * (3 * C46876 +
                   C46491 * (2 * C46491 * C46379 +
                             C46491 * (C46379 + C46322 * C46391 * C46500)))) /
        C46271;
    const double C46955 = C46951 + C46954;
    const double C46574 = C46570 + C46573;
    const double C6699 = (3 * (C46504 + C46556 * C46533) +
                          C46321 * (2 * C46584 + C46321 * C46591)) /
                         C46271;
    const double C46664 = C46586 + C46660;
    const double C46616 = C46610 + C46614;
    const double C46478 = C46466 + C46476;
    const double C46811 = C46451 + C46810;
    const double C46851 = C46451 + C46849;
    const double C46889 = C46491 * C46888;
    const double C46914 = C46865 + C46912;
    const double C46945 = C46321 * C46942;
    const double C46963 = C46959 + C46962;
    const double C46975 = C46882 + C46973;
    const double C46991 = C46321 * C46989;
    const double C47011 = C47007 + C47009;
    const double C47139 = C47138 / C47129;
    const double C47452 = 2 * C47417;
    const double C47148 = C47147 / C47126;
    const double C47456 = C47421 / C47144;
    const double C47483 = C47415 - C47451;
    const double C2440 = -C47451;
    const double C47497 = C47482 + C47136;
    const double C47221 = C47220 / C47129;
    const double C47460 = 2 * C47426;
    const double C47228 = C47227 / C47126;
    const double C47470 = C47435 / C47144;
    const double C47491 = C47429 - C47467;
    const double C2332 = -C47467;
    const double C47500 = C47487 + C47217;
    const double C47263 = C47262 / C47129;
    const double C47463 = 2 * C47428;
    const double C47270 = C47269 / C47126;
    const double C47476 = C47441 / C47144;
    const double C47494 = C47430 - C47473;
    const double C3094 = -C47473;
    const double C47501 = C47489 + C47259;
    const double C22191 = C21489 - C21490;
    const double C22190 = C21487 - C21488;
    const double C21516 = C21485 - C21486;
    const double C21515 = C21483 - C21484;
    const double C22323 = C21996 - C21997;
    const double C26856 = C21997 - C21996;
    const double C22322 = C21994 - C21995;
    const double C26855 = C21995 - C21994;
    const double C26468 = C21992 - C21993;
    const double C26466 = C21993 - C21992;
    const double C26467 = C21990 - C21991;
    const double C26465 = C21991 - C21990;
    const double C22203 = C22194 - C22195;
    const double C42410 = C25982 - C25981;
    const double C42409 = C25980 - C25979;
    const double C43676 = C27698 - C27697;
    const double C43675 = C27696 - C27695;
    const double C22199 = C47108 * C5641;
    const double C4760 = C4575 * C273;
    const double C4747 = C47448 * C273;
    const double C15954 = C15769 * C273;
    const double C15941 = C47448 * C273;
    const double C21503 = C47108 * C273;
    const double C4752 = C4575 * C278;
    const double C4739 = C47448 * C278;
    const double C15946 = C15769 * C278;
    const double C15933 = C47448 * C278;
    const double C21496 = C47108 * C278;
    const double C10558 = C4575 * C426;
    const double C10545 = C47448 * C426;
    const double C25991 = C47108 * C426;
    const double C31551 = C15769 * C426;
    const double C31538 = C47448 * C426;
    const double C10550 = C4575 * C431;
    const double C10537 = C47448 * C431;
    const double C25987 = C47108 * C431;
    const double C31543 = C15769 * C431;
    const double C31530 = C47448 * C431;
    const double C5392 = C4575 * C818;
    const double C5387 = C47448 * C818;
    const double C16586 = C15769 * C818;
    const double C16581 = C47448 * C818;
    const double C21998 = C47108 * C818;
    const double C26854 = C22326 - C22327;
    const double C26852 = C22327 - C22326;
    const double C26853 = C22324 - C22325;
    const double C26851 = C22325 - C22324;
    const double C12258 = C4579 * C1859;
    const double C27701 = C21367 * C1859;
    const double C33243 = C15773 * C1859;
    const double C4772 = C4579 * C282;
    const double C4759 = C4580 * C282;
    const double C15966 = C15773 * C282;
    const double C15953 = C15774 * C282;
    const double C21510 = C21367 * C282;
    const double C4767 = C4580 * C284;
    const double C5056 = C4579 * C284;
    const double C15961 = C15774 * C284;
    const double C16250 = C15773 * C284;
    const double C21740 = C21367 * C284;
    const double C10570 = C4579 * C435;
    const double C10557 = C4580 * C435;
    const double C25997 = C21367 * C435;
    const double C31563 = C15773 * C435;
    const double C31550 = C15774 * C435;
    const double C10565 = C4580 * C437;
    const double C10838 = C4579 * C437;
    const double C26269 = C21367 * C437;
    const double C31558 = C15774 * C437;
    const double C31831 = C15773 * C437;
    const double C5404 = C4579 * C822;
    const double C5399 = C4580 * C822;
    const double C16598 = C15773 * C822;
    const double C16593 = C15774 * C822;
    const double C22008 = C21367 * C822;
    const double C5974 = C4580 * C1027;
    const double C17152 = C15774 * C1027;
    const double C21513 = C21367 * C1027;
    const double C46384 = C46377 + C46378;
    const double C46374 = C46365 + C46372;
    const double C22198 = C21367 * C5639;
    const double C46932 = C46341 + C46930;
    const double C4764 = C4575 * C293;
    const double C4751 = C47448 * C293;
    const double C15958 = C15769 * C293;
    const double C15945 = C47448 * C293;
    const double C21505 = C47108 * C293;
    const double C4756 = C4575 * C295;
    const double C4743 = C47448 * C295;
    const double C15950 = C15769 * C295;
    const double C15937 = C47448 * C295;
    const double C21498 = C47108 * C295;
    const double C10562 = C4575 * C446;
    const double C10549 = C47448 * C446;
    const double C25993 = C47108 * C446;
    const double C31555 = C15769 * C446;
    const double C31542 = C47448 * C446;
    const double C10554 = C4575 * C448;
    const double C10541 = C47448 * C448;
    const double C25989 = C47108 * C448;
    const double C31547 = C15769 * C448;
    const double C31534 = C47448 * C448;
    const double C5396 = C4575 * C828;
    const double C5391 = C47448 * C828;
    const double C16590 = C15769 * C828;
    const double C16585 = C47448 * C828;
    const double C22000 = C47108 * C828;
    const double C5650 = C47448 * C1035;
    const double C5973 = C4575 * C1035;
    const double C16836 = C47448 * C1035;
    const double C17151 = C15769 * C1035;
    const double C21501 = C47108 * C1035;
    const double C46438 = C46425 + C46437;
    const double C1178 = (C46491 * C46354 + ae * C46321 * C46506 +
                          C46321 * (ae * C46506 + C46321 * C46491 * C46370)) /
                         C46273;
    const double C1160 = (C46491 * C46427 + C46506 * C46533) / C46271;
    const double C46542 = C46539 + C46540;
    const double C5828 = C47448 * C1181;
    const double C6175 = C4575 * C1181;
    const double C17006 = C47448 * C1181;
    const double C17353 = C15769 * C1181;
    const double C22004 = C47108 * C1181;
    const double C12252 = C47448 * C1863;
    const double C12591 = C4575 * C1863;
    const double C28042 = C47108 * C1863;
    const double C33237 = C47448 * C1863;
    const double C33576 = C15769 * C1863;
    const double C5646 = C47448 * C1023;
    const double C5969 = C4575 * C1023;
    const double C16832 = C47448 * C1023;
    const double C17147 = C15769 * C1023;
    const double C21499 = C47108 * C1023;
    const double C5824 = C47448 * C1166;
    const double C6171 = C4575 * C1166;
    const double C17002 = C47448 * C1166;
    const double C17349 = C15769 * C1166;
    const double C22002 = C47108 * C1166;
    const double C12248 = C47448 * C1851;
    const double C12587 = C4575 * C1851;
    const double C28040 = C47108 * C1851;
    const double C33233 = C47448 * C1851;
    const double C33572 = C15769 * C1851;
    const double C5835 = C4575 * C1183;
    const double C17013 = C15769 * C1183;
    const double C22330 = C47108 * C1183;
    const double C6321 = C4575 * C1551;
    const double C17491 = C15769 * C1551;
    const double C22334 = C47108 * C1551;
    const double C23368 = C47108 * C7173;
    const double C5653 = C4575 * C1028;
    const double C16839 = C15769 * C1028;
    const double C22192 = C47108 * C1028;
    const double C5831 = C4575 * C1171;
    const double C17009 = C15769 * C1171;
    const double C22328 = C47108 * C1171;
    const double C6317 = C4575 * C1545;
    const double C17487 = C15769 * C1545;
    const double C22332 = C47108 * C1545;
    const double C23366 = C47108 * C7169;
    const double C12259 = C4575 * C1865;
    const double C27702 = C47108 * C1865;
    const double C33244 = C15769 * C1865;
    const double C12255 = C4575 * C1856;
    const double C27700 = C47108 * C1856;
    const double C33240 = C15769 * C1856;
    const double C6703 =
        (3 * (C46555 + ae * C46584 + C46321 * C46590) +
         ae * (2 * C46584 + C46321 * C46591) +
         C46321 *
             (2 * C46590 + ae * C46591 +
              C46321 * (C46586 + ae * C46321 * C46587 +
                        C46321 * (ae * C46587 + C46321 * C46491 * C46390)))) /
        C46273;
    const double C28176 = C23363 - C23364;
    const double C28174 = C23364 - C23363;
    const double C28175 = C23361 - C23362;
    const double C28173 = C23362 - C23361;
    const double C46679 = C46672 + C46673;
    const double C46615 = C46612 + C46613;
    const double C46712 = C46710 + C46711;
    const double C1164 =
        (C46491 * C46355 + C46321 * (C46321 * C46491 * C46371 + C46793 * ae) +
         C46321 * C46793 * ae) /
        C46271;
    const double C2230 =
        (2 * (C46321 * C46867 + C46793 * ae) +
         C46321 * (C46867 + C46321 * (C46321 * C46491 * C46395 + C46868 * ae) +
                   C46321 * C46868 * ae) +
         (C46793 + C46868 * C46533) * ae) /
        C46271;
    const double C1152 = C46491 * C46707 + C46793 * C46533;
    const double C2224 =
        2 * C46321 * C46793 + C46321 * (C46793 + C46868 * C46533);
    const double C46850 = C46846 + C46847;
    const double C6176 = C4580 * C1170;
    const double C17354 = C15774 * C1170;
    const double C22012 = C21367 * C1170;
    const double C12592 = C4580 * C1855;
    const double C33577 = C15774 * C1855;
    const double C42417 = C21367 * C1855;
    const double C5970 = C4580 * C1018;
    const double C17148 = C15774 * C1018;
    const double C21511 = C21367 * C1018;
    const double C6172 = C4580 * C1155;
    const double C17350 = C15774 * C1155;
    const double C22010 = C21367 * C1155;
    const double C12588 = C4580 * C1846;
    const double C33573 = C15774 * C1846;
    const double C42415 = C21367 * C1846;
    const double C1175 =
        (C46343 + C46357 * C46500 +
         C46321 * (C46321 * (C46357 + C46379 * C46500) + C46808 * ae) +
         C46321 * C46808 * ae) /
        C46271;
    const double C1549 =
        (C46321 * (2 * C46491 * C46357 + C46491 * (C46357 + C46379 * C46500)) +
         (2 * C46791 + C46491 * C46808) * ae) /
        C46271;
    const double C7172 =
        (2 * (C46321 * C46876 + C46808 * ae) +
         C46321 * (C46876 +
                   C46321 * (C46321 * (C46379 + C46322 * C46391 * C46500) +
                             C46888 * ae) +
                   C46321 * C46888 * ae) +
         (C46808 + C46888 * C46533) * ae) /
        C46271;
    const double C1020 = 3 * (C46705 + C46433 * C46500) +
                         C46491 * (2 * C46791 + C46491 * C46808);
    const double C1157 = C46705 + C46433 * C46500 + C46808 * C46533;
    const double C1543 = C46321 * (2 * C46791 + C46491 * C46808);
    const double C7168 =
        2 * C46321 * C46808 + C46321 * (C46808 + C46888 * C46533);
    const double C1860 =
        (3 * (C46343 + C46321 * C46843 + C46841 * ae) +
         C46321 * (2 * C46843 +
                   C46321 * (C46357 + C46321 * (C46321 * C46379 + C46447 * ae) +
                             C46321 * C46447 * ae) +
                   C46844 * ae) +
         (2 * C46841 + C46321 * C46844) * ae) /
        C46271;
    const double C1848 = 3 * (C46705 + C46433 * C46533) +
                         C46321 * (2 * C46841 + C46321 * C46844);
    const double C46913 = C46911 + C46908;
    const double C7182 = C4580 * C2229;
    const double C18336 = C15774 * C2229;
    const double C27907 = C21367 * C2229;
    const double C7178 = C4580 * C2223;
    const double C18332 = C15774 * C2223;
    const double C27905 = C21367 * C2223;
    const double C46944 = C46321 * C46940;
    const double C46455 = C46431 + C46454;
    const double C46517 = C46436 + C46516;
    const double C46543 = C46436 + C46541;
    const double C46576 = 2 * C46559;
    const double C46594 = ae * C46559;
    const double C46593 = C46321 * C46559;
    const double C2232 =
        (2 * (ae * C46506 + C46321 * C46558) + ae * (C46506 + C46559 * C46533) +
         C46321 * (C46558 + ae * C46321 * C46559 +
                   C46321 * (ae * C46559 + C46321 * C46491 * C46394))) /
        C46273;
    const double C2226 =
        (2 * C46321 * C46506 + C46321 * (C46506 + C46559 * C46533)) / C46271;
    const double C46624 = 2 * C46618;
    const double C46622 = ae * C46618;
    const double C46884 = C46880 + C46883;
    const double C46974 = C46970 + C46971;
    const double C23367 = C21367 * C7171;
    const double C23365 = C21367 * C7167;
    const double C6701 =
        (3 * (C46861 + C46321 * C46904 + C46900 * ae) +
         C46321 * (2 * C46904 +
                   C46321 * (C46898 +
                             C46321 * (C46321 * C46491 * C46367 + C46901 * ae) +
                             C46321 * C46901 * ae) +
                   C46905 * ae) +
         (2 * C46900 + C46321 * C46905) * ae) /
        C46271;
    const double C6697 = 3 * (C46789 + C46862 * C46533) +
                         C46321 * (2 * C46900 + C46321 * C46905);
    const double C46990 = C46321 * C46988;
    const double C46933 = C46929 + C46931;
    const double C47010 = C46351 + C47008;
    const double C46399 = C46387 + C46397;
    const double C46398 = C46389 + C46396;
    const double C46568 = C46370 + C46567;
    const double C46597 = C46321 * C46595;
    const double C46623 = C46619 + C46620;
    const double C5659 = C47448 * C1038;
    const double C16845 = C47448 * C1038;
    const double C22451 = C47108 * C1038;
    const double C46636 = C46632 + C46635;
    const double C46652 = C46649 + C46650;
    const double C46667 = C46321 * C46665;
    const double C46687 = C46684 + C46685;
    const double C46479 = C46445 + C46477;
    const double C46578 = C46452 + C46577;
    const double C46598 = C46596 * C46533;
    const double C46625 = C46452 + C46621;
    const double C46643 = C46639 + C46642;
    const double C46653 = C46572 + C46651;
    const double C46668 = C46321 * C46666;
    const double C46688 = C46682 + C46686;
    const double C135 = (4 * (2 * C46343 + C46322 * C46355) +
                         C46322 * (3 * C46355 + C46322 * C46375)) /
                        C46271;
    const double C286 =
        (2 * C46343 + C46322 * C46355 + C46375 * C46500) / C46271;
    const double C288 = (C46491 * (3 * C46355 + C46322 * C46375)) / C46271;
    const double C22187 =
        (5 * (3 * C46873 + C46491 * C46955) +
         C46491 * (4 * C46955 +
                   C46491 * (3 * C46953 +
                             C46491 * (2 * C46491 * C46367 +
                                       C46491 * (C46367 + C46391 * C46500))))) /
        C46271;
    const double C5811 =
        (2 * C46555 + C46491 * C46565 + ae * C46321 * C46574 +
         C46321 *
             (ae * C46574 + C46321 * (2 * C46491 * C46366 +
                                      C46491 * (C46366 + C46390 * C46500)))) /
        C46273;
    const double C6313 =
        (ae * (3 * C46514 + C46491 * C46574) +
         C46321 *
             (3 * C46565 + C46491 * (2 * C46491 * C46366 +
                                     C46491 * (C46366 + C46390 * C46500)))) /
        C46273;
    const double C5637 = (4 * (2 * C46504 + C46491 * C46514) +
                          C46491 * (3 * C46514 + C46491 * C46574)) /
                         C46271;
    const double C5807 =
        (2 * C46504 + C46491 * C46514 + C46574 * C46533) / C46271;
    const double C6309 = (C46321 * (3 * C46514 + C46491 * C46574)) / C46271;
    const double C27704 = C47108 * C6699;
    const double C12239 = (4 * (2 * C46530 + C46321 * C46536) +
                           C46321 * (3 * C46536 + C46321 * C46616)) /
                          C46271;
    const double C46480 = C46478 * be;
    const double C46716 = C46322 * C46478;
    const double C46854 = C46491 * C46478;
    const double C1176 =
        (C46355 + C46371 * C46500 +
         C46321 * (C46321 * (C46371 + C46395 * C46500) + C46811 * ae) +
         C46321 * C46811 * ae) /
        C46271;
    const double C1550 =
        (C46321 * (2 * C46491 * C46371 + C46491 * (C46371 + C46395 * C46500)) +
         (2 * C46793 + C46491 * C46811) * ae) /
        C46271;
    const double C1021 = 3 * (C46707 + C46451 * C46500) +
                         C46491 * (2 * C46793 + C46491 * C46811);
    const double C1158 = C46707 + C46451 * C46500 + C46811 * C46533;
    const double C1544 = C46321 * (2 * C46793 + C46491 * C46811);
    const double C1849 = 3 * (C46707 + C46451 * C46533) +
                         C46321 * (2 * C46848 + C46321 * C46851);
    const double C46890 = C46886 + C46889;
    const double C6698 = 3 * (C46791 + C46865 * C46533) +
                         C46321 * (2 * C46909 + C46321 * C46914);
    const double C46947 = C46943 + C46945;
    const double C46964 = C46491 * C46963;
    const double C23002 = 3 * (C46805 + C46882 * C46533) +
                          C46321 * (2 * C46972 + C46321 * C46975);
    const double C46993 = C46987 + C46991;
    const double C47013 = C46321 * C47011;
    const double C47140 = C47136 - C47139;
    const double C47484 = C47452 / C47126;
    const double C47149 = C47145 - C47148;
    const double C47498 = C47483 / C47130;
    const double C47222 = C47217 - C47221;
    const double C47488 = C47460 / C47126;
    const double C47229 = C47225 - C47228;
    const double C47502 = C47491 / C47130;
    const double C47264 = C47259 - C47263;
    const double C47490 = C47463 / C47126;
    const double C47271 = C47267 - C47270;
    const double C47504 = C47494 / C47130;
    const double C22201 = C22191 * C47384;
    const double C22200 = C22190 * C116;
    const double C21522 = C21516 * C47384;
    const double C21521 = C21515 * C116;
    const double C22341 = C22323 * C47384;
    const double C22340 = C22322 * C116;
    const double C22206 = C22203 * C47384;
    const double C21517 = C21495 - C21496;
    const double C42411 = C25988 - C25987;
    const double C26471 = C21998 - C21999;
    const double C26469 = C21999 - C21998;
    const double C143 =
        (4 * (2 * C46354 + be * C46355 + C46322 * C46374) +
         be * (3 * C46355 + C46322 * C46375) +
         C46322 * (3 * C46374 + be * C46375 +
                   C46322 * (2 * C46370 + be * C46371 +
                             C46322 * (C46366 + be * C46322 * C46367 +
                                       C46322 * (be * C46367 +
                                                 C46322 * std::pow(C46326, 7) *
                                                     bs[7] * C46333))))) /
        C46273;
    const double C296 = (C46340 + be * C46343 + C46322 * C46354 +
                         C46374 * std::pow(yP - yQ, 2)) /
                        C46273;
    const double C297 =
        ((yP - yQ) * (2 * C46354 + be * C46355 + C46322 * C46374)) / C46273;
    const double C46934 = C46932 + C46927;
    const double C21518 = C21497 - C21498;
    const double C42412 = C25990 - C25989;
    const double C26472 = C22000 - C22001;
    const double C26470 = C22001 - C22000;
    const double C22447 = C21501 - C21502;
    const double C46439 = C46438 + C46435;
    const double C5820 = C47448 * C1178;
    const double C6905 = C4575 * C1178;
    const double C16998 = C47448 * C1178;
    const double C18067 = C15769 * C1178;
    const double C23156 = C47108 * C1178;
    const double C5816 = C47448 * C1160;
    const double C6901 = C4575 * C1160;
    const double C16994 = C47448 * C1160;
    const double C18063 = C15769 * C1160;
    const double C23154 = C47108 * C1160;
    const double C22602 = C22004 - C22005;
    const double C27184 = C22005 - C22004;
    const double C43928 = C28042 - C28041;
    const double C22446 = C21499 - C21500;
    const double C22601 = C22002 - C22003;
    const double C27183 = C22003 - C22002;
    const double C43927 = C28040 - C28039;
    const double C22343 = C22330 - C22331;
    const double C26858 = C22331 - C22330;
    const double C22713 = C22334 - C22335;
    const double C27316 = C22335 - C22334;
    const double C22202 = C22192 - C22193;
    const double C22342 = C22328 - C22329;
    const double C26857 = C22329 - C22328;
    const double C22712 = C22332 - C22333;
    const double C27315 = C22333 - C22332;
    const double C43678 = C27702 - C27701;
    const double C43677 = C27700 - C27699;
    const double C27706 = C47108 * C6703;
    const double C12243 =
        (4 * (2 * C46534 + ae * C46536 + C46321 * C46615) +
         ae * (3 * C46536 + C46321 * C46616) +
         C46321 *
             (3 * C46615 + ae * C46616 +
              C46321 * (2 * C46609 + ae * C46611 +
                        C46321 * (C46366 + ae * C46321 * C46445 +
                                  C46321 * (ae * C46445 + C46321 * C46390))))) /
        C46273;
    const double C439 =
        (2 * C46343 + C46322 * C46355 +
         C46321 * (C46321 * C46375 + C46712 * ae) + C46321 * C46712 * ae) /
        C46271;
    const double C441 = (C46321 * (3 * C46355 + C46322 * C46375) +
                         (3 * C46707 + C46322 * C46712) * ae) /
                        C46271;
    const double C824 =
        (C46321 * C46491 * C46375 + C46491 * C46712 * ae) / C46271;
    const double C122 = 4 * (2 * C46705 + C46322 * C46707) +
                        C46322 * (3 * C46707 + C46322 * C46712);
    const double C268 = 2 * C46705 + C46322 * C46707 + C46712 * C46500;
    const double C269 = C46491 * (3 * C46707 + C46322 * C46712);
    const double C421 = 2 * C46705 + C46322 * C46707 + C46712 * C46533;
    const double C422 = C46321 * (3 * C46707 + C46322 * C46712);
    const double C815 = C46321 * C46491 * C46712;
    const double C1290 =
        2 * C46491 * C46712 + C46491 * (C46712 + C46478 * C46500);
    const double C1440 = C46321 * (C46712 + C46478 * C46500);
    const double C2120 =
        2 * C46321 * C46712 + C46321 * (C46712 + C46478 * C46533);
    const double C6906 = C4580 * C1164;
    const double C18068 = C15774 * C1164;
    const double C26001 = C21367 * C1164;
    const double C6902 = C4580 * C1152;
    const double C18064 = C15774 * C1152;
    const double C25999 = C21367 * C1152;
    const double C1861 =
        (3 * (C46355 + C46321 * C46850 + C46848 * ae) +
         C46321 * (2 * C46850 +
                   C46321 * (C46371 + C46321 * (C46321 * C46395 + C46473 * ae) +
                             C46321 * C46473 * ae) +
                   C46851 * ae) +
         (2 * C46848 + C46321 * C46851) * ae) /
        C46271;
    const double C5836 = C4580 * C1175;
    const double C17014 = C15774 * C1175;
    const double C23159 = C21367 * C1175;
    const double C6322 = C4580 * C1549;
    const double C17492 = C15774 * C1549;
    const double C22605 = C21367 * C1549;
    const double C5654 = C4580 * C1020;
    const double C16840 = C15774 * C1020;
    const double C22448 = C21367 * C1020;
    const double C5832 = C4580 * C1157;
    const double C17010 = C15774 * C1157;
    const double C23157 = C21367 * C1157;
    const double C6318 = C4580 * C1543;
    const double C17488 = C15774 * C1543;
    const double C22603 = C21367 * C1543;
    const double C12260 = C4580 * C1860;
    const double C33245 = C15774 * C1860;
    const double C43931 = C21367 * C1860;
    const double C12256 = C4580 * C1848;
    const double C33241 = C15774 * C1848;
    const double C43929 = C21367 * C1848;
    const double C6702 =
        (3 * (C46864 + C46321 * C46913 + C46909 * ae) +
         C46321 * (2 * C46913 +
                   C46321 * (C46907 +
                             C46321 * (C46321 * C46491 * C46322 * C46391 +
                                       C46910 * ae) +
                             C46321 * C46910 * ae) +
                   C46914 * ae) +
         (2 * C46909 + C46321 * C46914) * ae) /
        C46271;
    const double C46946 = C46357 + C46944;
    const double C46456 = C46455 + C46450;
    const double C1184 =
        (C46354 + C46370 * C46500 + ae * C46321 * C46517 +
         C46321 * (ae * C46517 + C46321 * (C46370 + C46394 * C46500))) /
        C46273;
    const double C1552 =
        (ae * (2 * C46506 + C46491 * C46517) +
         C46321 * (2 * C46491 * C46370 + C46491 * (C46370 + C46394 * C46500))) /
        C46273;
    const double C1029 = (3 * (C46427 + C46436 * C46500) +
                          C46491 * (2 * C46506 + C46491 * C46517)) /
                         C46271;
    const double C1172 = (C46427 + C46436 * C46500 + C46517 * C46533) / C46271;
    const double C1546 = (C46321 * (2 * C46506 + C46491 * C46517)) / C46271;
    const double C1866 =
        (3 * (C46354 + ae * C46538 + C46321 * C46542) +
         ae * (2 * C46538 + C46321 * C46543) +
         C46321 * (2 * C46542 + ae * C46543 +
                   C46321 * (C46370 + ae * C46321 * C46452 +
                             C46321 * (ae * C46452 + C46321 * C46394)))) /
        C46273;
    const double C1857 = (3 * (C46427 + C46436 * C46533) +
                          C46321 * (2 * C46538 + C46321 * C46543)) /
                         C46271;
    const double C7183 = C47448 * C2232;
    const double C18337 = C47448 * C2232;
    const double C27908 = C47108 * C2232;
    const double C7179 = C47448 * C2226;
    const double C18333 = C47448 * C2226;
    const double C27906 = C47108 * C2226;
    const double C46626 = C46370 + C46622;
    const double C5809 =
        (2 * C46861 + C46491 * C46873 +
         C46321 * (C46321 * (2 * C46491 * C46351 +
                             C46491 * (C46351 + C46367 * C46500)) +
                   C46884 * ae) +
         C46321 * C46884 * ae) /
        C46271;
    const double C6311 =
        (C46321 *
             (3 * C46873 + C46491 * (2 * C46491 * C46351 +
                                     C46491 * (C46351 + C46367 * C46500))) +
         (3 * C46805 + C46491 * C46884) * ae) /
        C46271;
    const double C23358 =
        (2 * (C46321 * C46955 + C46884 * ae) +
         C46321 * (C46955 +
                   C46321 * (C46321 * (2 * C46491 * C46367 +
                                       C46491 * (C46367 + C46391 * C46500)) +
                             C46963 * ae) +
                   C46321 * C46963 * ae) +
         (C46884 + C46963 * C46533) * ae) /
        C46271;
    const double C5635 = 4 * (2 * C46789 + C46491 * C46805) +
                         C46491 * (3 * C46805 + C46491 * C46884);
    const double C5805 = 2 * C46789 + C46491 * C46805 + C46884 * C46533;
    const double C6307 = C46321 * (3 * C46805 + C46491 * C46884);
    const double C23356 =
        2 * C46321 * C46884 + C46321 * (C46884 + C46963 * C46533);
    const double C23004 =
        (3 * (C46873 + C46321 * C46974 + C46972 * ae) +
         C46321 * (2 * C46974 +
                   C46321 * (C46953 +
                             C46321 * (C46321 * (C46367 + C46391 * C46500) +
                                       C46961 * ae) +
                             C46321 * C46961 * ae) +
                   C46975 * ae) +
         (2 * C46972 + C46321 * C46975) * ae) /
        C46271;
    const double C27705 = C21367 * C6701;
    const double C27703 = C21367 * C6697;
    const double C46992 = C46898 + C46990;
    const double C12237 = 4 * (2 * C46834 + C46321 * C46837) +
                          C46321 * (3 * C46837 + C46321 * C46933);
    const double C47012 = C47010 + C47005;
    const double C46401 = C46322 * C46399;
    const double C1292 =
        (2 * C46491 * C46375 + C46491 * (C46375 + C46399 * C46500)) / C46271;
    const double C1442 = (C46321 * (C46375 + C46399 * C46500) +
                          (C46712 + C46478 * C46500) * ae) /
                         C46271;
    const double C2122 =
        (2 * (C46321 * C46375 + C46712 * ae) +
         C46321 * (C46375 + C46321 * (C46321 * C46399 + C46478 * ae) +
                   C46321 * C46478 * ae) +
         (C46712 + C46478 * C46533) * ae) /
        C46271;
    const double C46400 = C46322 * C46398;
    const double C46547 = C46321 * C46398;
    const double C46561 = C46491 * C46398;
    const double C1036 = (2 * C46491 * C46374 +
                          C46491 * (C46374 + C46398 * std::pow(C46491, 2))) /
                         C46273;
    const double C1039 =
        (3 * (C46374 + C46398 * C46500) +
         C46491 * (2 * C46491 * C46398 +
                   C46491 * (C46398 + (C46390 + be * C46322 * C46391 +
                                       C46322 * (be * C46391 +
                                                 C46322 * std::pow(C46324, 8) *
                                                     bs[8] * C46333)) *
                                          C46500))) /
        C46273;
    const double C5642 =
        (4 * (2 * C46558 + C46491 * C46568) +
         C46491 * (3 * C46568 +
                   C46491 * (2 * C46491 * C46394 +
                             C46491 * (C46394 + (be * C46391 +
                                                 C46322 * std::pow(C46324, 8) *
                                                     bs[8] * C46333) *
                                                    C46500)))) /
        C46273;
    const double C46599 = C46594 + C46597;
    const double C46627 = C46321 * C46623;
    const double C22188 =
        (5 * (3 * C46565 + C46491 * C46636) +
         C46491 * (4 * C46636 +
                   C46491 * (3 * C46634 +
                             C46491 * (2 * C46491 * C46390 +
                                       C46491 * (C46390 + std::pow(C46324, 8) *
                                                              bs[8] * C46333 *
                                                              C46500))))) /
        C46273;
    const double C46669 = C46664 + C46667;
    const double C46689 = C46321 * C46687;
    const double C46481 = C46479 + C46472;
    const double C46579 = C46491 * C46578;
    const double C7174 =
        (2 * (ae * C46517 + C46321 * C46568) + ae * (C46517 + C46578 * C46533) +
         C46321 * (C46568 + ae * C46321 * C46578 +
                   C46321 * (ae * C46578 +
                             C46321 * (C46394 + (be * C46391 +
                                                 C46322 * std::pow(C46324, 8) *
                                                     bs[8] * C46333) *
                                                    C46500)))) /
        C46273;
    const double C7170 =
        (2 * C46321 * C46517 + C46321 * (C46517 + C46578 * C46533)) / C46271;
    const double C46600 = C46559 + C46598;
    const double C46628 = C46321 * C46625;
    const double C46644 = C46491 * C46643;
    const double C23359 =
        (2 * (ae * C46574 + C46321 * C46636) + ae * (C46574 + C46643 * C46533) +
         C46321 * (C46636 + ae * C46321 * C46643 +
                   C46321 * (ae * C46643 +
                             C46321 * (2 * C46491 * C46390 +
                                       C46491 * (C46390 + std::pow(C46324, 8) *
                                                              bs[8] * C46333 *
                                                              C46500))))) /
        C46273;
    const double C23357 =
        (2 * C46321 * C46574 + C46321 * (C46574 + C46643 * C46533)) / C46271;
    const double C23005 =
        (3 * (C46565 + ae * C46648 + C46321 * C46652) +
         ae * (2 * C46648 + C46321 * C46653) +
         C46321 * (2 * C46652 + ae * C46653 +
                   C46321 * (C46634 + ae * C46321 * C46641 +
                             C46321 * (ae * C46641 +
                                       C46321 * (C46390 + std::pow(C46324, 8) *
                                                              bs[8] * C46333 *
                                                              C46500))))) /
        C46273;
    const double C23003 = (3 * (C46514 + C46572 * C46533) +
                           C46321 * (2 * C46648 + C46321 * C46653)) /
                          C46271;
    const double C46670 = C46662 + C46668;
    const double C46690 = C46321 * C46688;
    const double C4774 = C4580 * C286;
    const double C15968 = C15774 * C286;
    const double C21744 = C21367 * C286;
    const double C5058 = C4580 * C288;
    const double C16252 = C15774 * C288;
    const double C22339 = C47108 * C5811;
    const double C22717 = C47108 * C6313;
    const double C22197 = C47108 * C5637;
    const double C22337 = C47108 * C5807;
    const double C22715 = C47108 * C6309;
    const double C43680 = C47108 * C12239;
    const double C46717 = C46715 + C46716;
    const double C2016 =
        (C46491 * C46375 + C46321 * (C46321 * C46491 * C46399 + C46854 * ae) +
         C46321 * C46854 * ae) /
        C46271;
    const double C2014 = C46491 * C46712 + C46854 * C46533;
    const double C5810 =
        (2 * C46864 + C46491 * C46876 +
         C46321 * (C46321 * (2 * C46491 * C46379 +
                             C46491 * (C46379 + C46322 * C46391 * C46500)) +
                   C46890 * ae) +
         C46321 * C46890 * ae) /
        C46271;
    const double C6312 =
        (C46321 * (3 * C46876 +
                   C46491 * (2 * C46491 * C46379 +
                             C46491 * (C46379 + C46322 * C46391 * C46500))) +
         (3 * C46808 + C46491 * C46890) * ae) /
        C46271;
    const double C5636 = 4 * (2 * C46791 + C46491 * C46808) +
                         C46491 * (3 * C46808 + C46491 * C46890);
    const double C5806 = 2 * C46791 + C46491 * C46808 + C46890 * C46533;
    const double C6308 = C46321 * (3 * C46808 + C46491 * C46890);
    const double C12238 = 4 * (2 * C46841 + C46321 * C46844) +
                          C46321 * (3 * C46844 + C46321 * C46947);
    const double C46965 = C46958 + C46964;
    const double C27690 = 4 * (2 * C46900 + C46321 * C46905) +
                          C46321 * (3 * C46905 + C46321 * C46993);
    const double C47015 = C47003 + C47013;
    const double C47414 = C47140 * C47128;
    const double C47454 = C47419 + C47140;
    const double C47422 = C47149 / C47130;
    const double C47418 = C47149 * C47128;
    const double C554 = C47498 - (C47140 * C47131) / C47126;
    const double C47432 = C47222 * C47216;
    const double C47469 = C47434 + C47222;
    const double C47436 = C47229 / C47130;
    const double C47433 = C47229 * C47216;
    const double C1284 = C47502 - (C47222 * C47218) / C47126;
    const double C47438 = C47264 * C47258;
    const double C47475 = C47440 + C47264;
    const double C47442 = C47271 / C47130;
    const double C47439 = C47271 * C47258;
    const double C2116 = C47504 - (C47264 * C47260) / C47126;
    const double C22204 = C22200 + C22201;
    const double C21527 = C21521 + C21522;
    const double C22344 = C22340 + C22341;
    const double C21523 = C21517 * C116;
    const double C4773 = C4575 * C296;
    const double C4758 = C47448 * C296;
    const double C15967 = C15769 * C296;
    const double C15952 = C47448 * C296;
    const double C21509 = C47108 * C296;
    const double C4766 = C47448 * C297;
    const double C5057 = C4575 * C297;
    const double C15960 = C47448 * C297;
    const double C16251 = C15769 * C297;
    const double C21741 = C47108 * C297;
    const double C12241 =
        (4 * (2 * C46836 + C46321 * C46934 + C46837 * ae) +
         C46321 *
             (3 * C46934 +
              C46321 *
                  (2 * C46926 +
                   C46321 * (C46351 + C46321 * (C46321 * C46367 + C46444 * ae) +
                             C46321 * C46444 * ae) +
                   C46928 * ae) +
              C46933 * ae) +
         (3 * C46837 + C46321 * C46933) * ae) /
        C46271;
    const double C21524 = C21518 * C47384;
    const double C22453 = C22447 * C47384;
    const double C449 =
        (C46340 + be * C46343 + C46322 * C46354 + ae * C46321 * C46439 +
         C46321 * (ae * C46439 + C46321 * C46374)) /
        C46273;
    const double C450 =
        (ae * (2 * C46427 + C46322 * C46439 + (C46418 + C46430 * C46347) * be) +
         C46321 * (2 * C46354 + be * C46355 + C46322 * C46374)) /
        C46273;
    const double C829 =
        (ae * C46491 * C46439 + C46321 * C46491 * C46374) / C46273;
    const double C132 = (3 * (C46421 + C46322 * C46427 + C46705 * be) +
                         C46322 * (2 * C46427 + C46322 * C46439 + C46707 * be) +
                         (2 * C46705 + C46322 * C46707) * be) /
                        C46271;
    const double C279 =
        (C46421 + C46322 * C46427 + C46705 * be + C46439 * C46500) / C46271;
    const double C283 =
        (C46491 * (2 * C46427 + C46322 * C46439 + C46707 * be)) / C46271;
    const double C432 =
        (C46421 + C46322 * C46427 + C46705 * be + C46439 * C46533) / C46271;
    const double C436 =
        (C46321 * (2 * C46427 + C46322 * C46439 + C46707 * be)) / C46271;
    const double C819 = (C46321 * C46491 * C46439) / C46271;
    const double C27904 = C23155 - C23156;
    const double C27902 = C23156 - C23155;
    const double C27903 = C23153 - C23154;
    const double C27901 = C23154 - C23153;
    const double C22608 = C22602 * C47384;
    const double C22452 = C22446 * C116;
    const double C22607 = C22601 * C116;
    const double C22346 = C22343 * C47384;
    const double C22719 = C22713 * C47384;
    const double C22205 = C22202 * C116;
    const double C22345 = C22342 * C116;
    const double C22718 = C22712 * C116;
    const double C43682 = C47108 * C12243;
    const double C10572 = C4580 * C439;
    const double C31565 = C15774 * C439;
    const double C42617 = C21367 * C439;
    const double C10840 = C4580 * C441;
    const double C31833 = C15774 * C441;
    const double C5406 = C4580 * C824;
    const double C16600 = C15774 * C824;
    const double C26135 = C21367 * C824;
    const double C4770 = C4580 * C268;
    const double C15964 = C15774 * C268;
    const double C21742 = C21367 * C268;
    const double C5054 = C4580 * C269;
    const double C16248 = C15774 * C269;
    const double C10568 = C4580 * C421;
    const double C31561 = C15774 * C421;
    const double C42615 = C21367 * C421;
    const double C10836 = C4580 * C422;
    const double C31829 = C15774 * C422;
    const double C5402 = C4580 * C815;
    const double C16596 = C15774 * C815;
    const double C26133 = C21367 * C815;
    const double C46948 = C46946 + C46941;
    const double C46457 = C46322 * C46456;
    const double C46462 = 3 * C46456;
    const double C46508 = C46491 * C46456;
    const double C46546 = ae * C46456;
    const double C46545 = C46321 * C46456;
    const double C1182 = (ae * (C46439 + C46456 * C46500) +
                          C46321 * (C46374 + C46398 * C46500)) /
                         C46273;
    const double C1864 = (2 * (ae * C46439 + C46321 * C46374) +
                          ae * (C46439 + C46456 * std::pow(C46321, 2)) +
                          C46321 * (C46374 + ae * C46321 * C46456 +
                                    C46321 * (ae * C46456 + C46321 * C46398))) /
                         C46273;
    const double C1024 =
        (2 * C46491 * C46439 + C46491 * (C46439 + C46456 * C46500)) / C46271;
    const double C1167 = (C46321 * (C46439 + C46456 * C46500)) / C46271;
    const double C1852 =
        (2 * C46321 * C46439 + C46321 * (C46439 + C46456 * C46533)) / C46271;
    const double C5837 = C47448 * C1184;
    const double C17015 = C47448 * C1184;
    const double C23160 = C47108 * C1184;
    const double C6323 = C47448 * C1552;
    const double C17493 = C47448 * C1552;
    const double C22606 = C47108 * C1552;
    const double C5655 = C47448 * C1029;
    const double C16841 = C47448 * C1029;
    const double C22449 = C47108 * C1029;
    const double C5833 = C47448 * C1172;
    const double C17011 = C47448 * C1172;
    const double C23158 = C47108 * C1172;
    const double C6319 = C47448 * C1546;
    const double C17489 = C47448 * C1546;
    const double C22604 = C47108 * C1546;
    const double C12261 = C47448 * C1866;
    const double C33246 = C47448 * C1866;
    const double C43932 = C47108 * C1866;
    const double C12257 = C47448 * C1857;
    const double C33242 = C47448 * C1857;
    const double C43930 = C47108 * C1857;
    const double C22338 = C21367 * C5809;
    const double C22716 = C21367 * C6311;
    const double C22196 = C21367 * C5635;
    const double C22336 = C21367 * C5805;
    const double C22714 = C21367 * C6307;
    const double C46994 = C46992 + C46985;
    const double C43679 = C21367 * C12237;
    const double C47014 = C46321 * C47012;
    const double C46403 = C46383 + C46401;
    const double C46402 = C46384 + C46400;
    const double C5975 = C47448 * C1036;
    const double C17153 = C47448 * C1036;
    const double C21514 = C47108 * C1036;
    const double C46629 = C46626 + C46627;
    const double C46691 = C46679 + C46689;
    const double C46482 = C46322 * C46481;
    const double C46519 = C46481 * C46500;
    const double C46548 = C46481 * C46533;
    const double C46562 = C46491 * C46481;
    const double C46580 = C46576 + C46579;
    const double C6704 =
        (3 * (C46558 + ae * C46593 + C46321 * C46599) +
         ae * (2 * C46593 + C46321 * C46600) +
         C46321 * (2 * C46599 + ae * C46600 +
                   C46321 * (C46595 + ae * C46321 * C46596 +
                             C46321 * (ae * C46596 +
                                       C46321 * C46491 *
                                           (be * C46391 +
                                            C46322 * std::pow(C46324, 8) *
                                                bs[8] * C46333))))) /
        C46273;
    const double C6700 = (3 * (C46506 + C46559 * C46533) +
                          C46321 * (2 * C46593 + C46321 * C46600)) /
                         C46271;
    const double C46630 = C46624 + C46628;
    const double C46645 = C46638 + C46644;
    const double C27693 =
        (4 * (2 * C46590 + ae * C46591 + C46321 * C46669) +
         ae * (3 * C46591 + C46321 * C46670) +
         C46321 * (3 * C46669 + ae * C46670 +
                   C46321 * (2 * C46665 + ae * C46666 +
                             C46321 * (C46658 + ae * C46321 * C46659 +
                                       C46321 * (ae * C46659 +
                                                 C46321 * C46491 *
                                                     std::pow(C46324, 8) *
                                                     bs[8] * C46333))))) /
        C46273;
    const double C27691 = (4 * (2 * C46584 + C46321 * C46591) +
                           C46321 * (3 * C46591 + C46321 * C46670)) /
                          C46271;
    const double C46692 = C46677 + C46690;
    const double C123 = 5 * (3 * C46707 + C46322 * C46712) +
                        C46322 * (4 * C46712 + C46322 * C46717);
    const double C270 = 3 * C46707 + C46322 * C46712 + C46717 * C46500;
    const double C423 = 3 * C46707 + C46322 * C46712 + C46717 * C46533;
    const double C558 = C46491 * (4 * C46712 + C46322 * C46717);
    const double C662 = C46321 * (4 * C46712 + C46322 * C46717);
    const double C816 = C46321 * C46491 * C46717;
    const double C22319 =
        (3 * C46873 + C46491 * C46955 +
         C46321 * (C46321 * (3 * C46953 +
                             C46491 * (2 * C46491 * C46367 +
                                       C46491 * (C46367 + C46391 * C46500))) +
                   C46965 * ae) +
         C46321 * C46965 * ae) /
        C46271;
    const double C22709 =
        (C46321 * (4 * C46955 +
                   C46491 * (3 * C46953 +
                             C46491 * (2 * C46491 * C46367 +
                                       C46491 * (C46367 + C46391 * C46500)))) +
         (4 * C46884 + C46491 * C46965) * ae) /
        C46271;
    const double C22185 = 5 * (3 * C46805 + C46491 * C46884) +
                          C46491 * (4 * C46884 + C46491 * C46965);
    const double C22317 = 3 * C46805 + C46491 * C46884 + C46965 * C46533;
    const double C22707 = C46321 * (4 * C46884 + C46491 * C46965);
    const double C43670 = 5 * (3 * C46837 + C46321 * C46933) +
                          C46321 * (4 * C46933 + C46321 * C47015);
    const double C47450 = C47414 / C47126;
    const double C47485 = C47454 / C47130;
    const double C47486 = C47456 + C47422;
    const double C556 = C47422 - C47147 / C47144;
    const double C47453 = C47418 / C47126;
    const double C47466 = C47432 / C47126;
    const double C47492 = C47469 / C47130;
    const double C47493 = C47470 + C47436;
    const double C1286 = C47436 - C47227 / C47144;
    const double C47468 = C47433 / C47126;
    const double C47472 = C47438 / C47126;
    const double C47495 = C47475 / C47130;
    const double C47496 = C47476 + C47442;
    const double C2118 = C47442 - C47269 / C47144;
    const double C47474 = C47439 / C47126;
    const double C21520 = C21509 - C21510;
    const double C43681 = C21367 * C12241;
    const double C21528 = C21523 + C21524;
    const double C10571 = C4575 * C449;
    const double C10556 = C47448 * C449;
    const double C25998 = C47108 * C449;
    const double C31564 = C15769 * C449;
    const double C31549 = C47448 * C449;
    const double C10564 = C47448 * C450;
    const double C10839 = C4575 * C450;
    const double C26270 = C47108 * C450;
    const double C31557 = C47448 * C450;
    const double C31832 = C15769 * C450;
    const double C5405 = C4575 * C829;
    const double C5398 = C47448 * C829;
    const double C16599 = C15769 * C829;
    const double C16592 = C47448 * C829;
    const double C22009 = C47108 * C829;
    const double C4769 = C4575 * C279;
    const double C4754 = C47448 * C279;
    const double C15963 = C15769 * C279;
    const double C15948 = C47448 * C279;
    const double C21507 = C47108 * C279;
    const double C4762 = C47448 * C283;
    const double C5053 = C4575 * C283;
    const double C15956 = C47448 * C283;
    const double C16247 = C15769 * C283;
    const double C21739 = C47108 * C283;
    const double C10567 = C4575 * C432;
    const double C10552 = C47448 * C432;
    const double C25996 = C47108 * C432;
    const double C31560 = C15769 * C432;
    const double C31545 = C47448 * C432;
    const double C10560 = C47448 * C436;
    const double C10835 = C4575 * C436;
    const double C26268 = C47108 * C436;
    const double C31553 = C47448 * C436;
    const double C31828 = C15769 * C436;
    const double C5401 = C4575 * C819;
    const double C5394 = C47448 * C819;
    const double C16595 = C15769 * C819;
    const double C16588 = C47448 * C819;
    const double C22007 = C47108 * C819;
    const double C22454 = C22452 + C22453;
    const double C22609 = C22607 + C22608;
    const double C22207 = C22205 + C22206;
    const double C22347 = C22345 + C22346;
    const double C22720 = C22718 + C22719;
    const double C12242 =
        (4 * (2 * C46843 + C46321 * C46948 + C46844 * ae) +
         C46321 * (3 * C46948 +
                   C46321 * (2 * C46940 +
                             C46321 * (C46379 +
                                       C46321 * (C46321 * C46322 * C46391 +
                                                 C46469 * ae) +
                                       C46321 * C46469 * ae) +
                             C46942 * ae) +
                   C46947 * ae) +
         (3 * C46844 + C46321 * C46947) * ae) /
        C46271;
    const double C46458 = C46442 + C46457;
    const double C1179 = (C46491 * C46374 + ae * C46321 * C46508 +
                          C46321 * (ae * C46508 + C46321 * C46491 * C46398)) /
                         C46273;
    const double C1161 = (C46491 * C46439 + C46508 * C46533) / C46271;
    const double C46549 = C46546 + C46547;
    const double C6177 = C47448 * C1182;
    const double C17355 = C47448 * C1182;
    const double C22013 = C47108 * C1182;
    const double C12593 = C47448 * C1864;
    const double C33578 = C47448 * C1864;
    const double C42418 = C47108 * C1864;
    const double C5971 = C47448 * C1024;
    const double C17149 = C47448 * C1024;
    const double C21512 = C47108 * C1024;
    const double C6173 = C47448 * C1167;
    const double C17351 = C47448 * C1167;
    const double C22011 = C47108 * C1167;
    const double C12589 = C47448 * C1852;
    const double C33574 = C47448 * C1852;
    const double C42416 = C47108 * C1852;
    const double C27692 =
        (4 * (2 * C46904 + C46321 * C46994 + C46905 * ae) +
         C46321 * (3 * C46994 +
                   C46321 * (2 * C46988 +
                             C46321 * (C46980 +
                                       C46321 * (C46321 * C46491 * C46391 +
                                                 C46983 * ae) +
                                       C46321 * C46983 * ae) +
                             C46989 * ae) +
                   C46993 * ae) +
         (3 * C46905 + C46321 * C46993) * ae) /
        C46271;
    const double C47016 = C46997 + C47014;
    const double C137 = (5 * (3 * C46355 + C46322 * C46375) +
                         C46322 * (4 * C46375 + C46322 * C46403)) /
                        C46271;
    const double C290 =
        (3 * C46355 + C46322 * C46375 + C46403 * C46500) / C46271;
    const double C443 =
        (3 * C46355 + C46322 * C46375 +
         C46321 * (C46321 * C46403 + C46717 * ae) + C46321 * C46717 * ae) /
        C46271;
    const double C560 = (C46491 * (4 * C46375 + C46322 * C46403)) / C46271;
    const double C664 = (C46321 * (4 * C46375 + C46322 * C46403) +
                         (4 * C46712 + C46322 * C46717) * ae) /
                        C46271;
    const double C826 =
        (C46321 * C46491 * C46403 + C46491 * C46717 * ae) / C46271;
    const double C144 =
        (5 * (3 * C46374 + be * C46375 + C46322 * C46402) +
         be * (4 * C46375 + C46322 * C46403) +
         C46322 *
             (4 * C46402 + be * C46403 +
              C46322 *
                  (3 * C46398 + be * C46399 +
                   C46322 * (2 * C46394 + be * C46395 +
                             C46322 * (C46390 + be * C46322 * C46391 +
                                       C46322 * (be * C46391 +
                                                 C46322 * std::pow(C46324, 8) *
                                                     bs[8] * C46333)))))) /
        C46273;
    const double C298 = (2 * C46354 + be * C46355 + C46322 * C46374 +
                         C46402 * std::pow(yP - yQ, 2)) /
                        C46273;
    const double C299 =
        ((yP - yQ) * (3 * C46374 + be * C46375 + C46322 * C46402)) / C46273;
    const double C300 =
        (3 * C46374 + be * C46375 + C46322 * C46402 +
         (3 * C46398 + be * C46399 +
          C46322 *
              (2 * C46394 + be * C46395 +
               C46322 * (C46390 + be * C46322 * C46391 +
                         C46322 * (be * C46391 + C46322 * std::pow(C46324, 8) *
                                                     bs[8] * C46333)))) *
             std::pow(yP - yQ, 2)) /
        C46273;
    const double C561 =
        ((yP - yQ) *
         (4 * C46402 + be * C46403 +
          C46322 * (3 * C46398 + be * C46399 +
                    C46322 * (2 * C46394 + be * C46395 +
                              C46322 * (C46390 + be * C46322 * C46391 +
                                        C46322 * (be * C46391 +
                                                  C46322 * std::pow(C46324, 8) *
                                                      bs[8] * C46333)))))) /
        C46273;
    const double C1293 =
        (2 * C46491 * C46402 +
         C46491 * (C46402 + (2 * C46394 + be * C46395 +
                             C46322 * (C46390 + be * C46322 * C46391 +
                                       C46322 * (be * C46391 +
                                                 C46322 * std::pow(C46324, 8) *
                                                     bs[8] * C46333))) *
                                C46500)) /
        C46273;
    const double C46483 = C46463 + C46482;
    const double C46520 = C46456 + C46519;
    const double C46550 = C46456 + C46548;
    const double C2233 =
        (2 * (ae * C46508 + C46321 * C46561) + ae * (C46508 + C46562 * C46533) +
         C46321 * (C46561 + ae * C46321 * C46562 +
                   C46321 * (ae * C46562 +
                             C46321 * C46491 *
                                 (C46390 + be * C46322 * C46391 +
                                  C46322 * (be * C46391 +
                                            C46322 * std::pow(C46324, 8) *
                                                bs[8] * C46333))))) /
        C46273;
    const double C2227 =
        (2 * C46321 * C46508 + C46321 * (C46508 + C46562 * C46533)) / C46271;
    const double C5812 =
        (2 * C46558 + C46491 * C46568 + ae * C46321 * C46580 +
         C46321 * (ae * C46580 +
                   C46321 * (2 * C46491 * C46394 +
                             C46491 * (C46394 + (be * C46391 +
                                                 C46322 * std::pow(C46324, 8) *
                                                     bs[8] * C46333) *
                                                    C46500)))) /
        C46273;
    const double C6314 =
        (ae * (3 * C46517 + C46491 * C46580) +
         C46321 * (3 * C46568 +
                   C46491 * (2 * C46491 * C46394 +
                             C46491 * (C46394 + (be * C46391 +
                                                 C46322 * std::pow(C46324, 8) *
                                                     bs[8] * C46333) *
                                                    C46500)))) /
        C46273;
    const double C5638 = (4 * (2 * C46506 + C46491 * C46517) +
                          C46491 * (3 * C46517 + C46491 * C46580)) /
                         C46271;
    const double C5808 =
        (2 * C46506 + C46491 * C46517 + C46580 * C46533) / C46271;
    const double C6310 = (C46321 * (3 * C46517 + C46491 * C46580)) / C46271;
    const double C12244 =
        (4 * (2 * C46542 + ae * C46543 + C46321 * C46629) +
         ae * (3 * C46543 + C46321 * C46630) +
         C46321 *
             (3 * C46629 + ae * C46630 +
              C46321 *
                  (2 * C46623 + ae * C46625 +
                   C46321 * (C46394 + ae * C46321 * C46474 +
                             C46321 * (ae * C46474 +
                                       C46321 * (be * C46391 +
                                                 C46322 * std::pow(C46324, 8) *
                                                     bs[8] * C46333)))))) /
        C46273;
    const double C12240 = (4 * (2 * C46538 + C46321 * C46543) +
                           C46321 * (3 * C46543 + C46321 * C46630)) /
                          C46271;
    const double C22320 =
        (3 * C46565 + C46491 * C46636 + ae * C46321 * C46645 +
         C46321 * (ae * C46645 +
                   C46321 * (3 * C46634 +
                             C46491 * (2 * C46491 * C46390 +
                                       C46491 * (C46390 + std::pow(C46324, 8) *
                                                              bs[8] * C46333 *
                                                              C46500))))) /
        C46273;
    const double C22710 =
        (ae * (4 * C46574 + C46491 * C46645) +
         C46321 * (4 * C46636 +
                   C46491 * (3 * C46634 +
                             C46491 * (2 * C46491 * C46390 +
                                       C46491 * (C46390 + std::pow(C46324, 8) *
                                                              bs[8] * C46333 *
                                                              C46500))))) /
        C46273;
    const double C22186 = (5 * (3 * C46514 + C46491 * C46574) +
                           C46491 * (4 * C46574 + C46491 * C46645)) /
                          C46271;
    const double C22318 =
        (3 * C46514 + C46491 * C46574 + C46645 * C46533) / C46271;
    const double C22708 = (C46321 * (4 * C46574 + C46491 * C46645)) / C46271;
    const double C43673 =
        (5 * (3 * C46615 + ae * C46616 + C46321 * C46691) +
         ae * (4 * C46616 + C46321 * C46692) +
         C46321 *
             (4 * C46691 + ae * C46692 +
              C46321 *
                  (3 * C46687 + ae * C46688 +
                   C46321 * (2 * C46681 + ae * C46683 +
                             C46321 * (C46390 + ae * C46321 * C46467 +
                                       C46321 * (ae * C46467 +
                                                 C46321 * std::pow(C46324, 8) *
                                                     bs[8] * C46333)))))) /
        C46273;
    const double C43671 = (5 * (3 * C46536 + C46321 * C46616) +
                           C46321 * (4 * C46616 + C46321 * C46692)) /
                          C46271;
    const double C47506 = C47450 + C47498;
    const double C555 = C47485 - (C47149 * C47131) / C47126;
    const double C111 = C47486 / C47130 - C47147 / C47457;
    const double C47499 = C47453 + C47485;
    const double C47507 = C47466 + C47502;
    const double C1285 = C47492 - (C47229 * C47218) / C47126;
    const double C1013 = C47493 / C47130 - C47227 / C47457;
    const double C47503 = C47468 + C47492;
    const double C47508 = C47472 + C47504;
    const double C2117 = C47495 - (C47271 * C47260) / C47126;
    const double C1842 = C47496 / C47130 - C47269 / C47457;
    const double C47505 = C47474 + C47495;
    const double C21526 = C21520 * C47384;
    const double C42414 = C25998 - C25997;
    const double C26476 = C22008 - C22009;
    const double C26474 = C22009 - C22008;
    const double C21519 = C21507 - C21508;
    const double C42413 = C25996 - C25995;
    const double C26475 = C22006 - C22007;
    const double C26473 = C22007 - C22006;
    const double C46459 = C46458 + C46453;
    const double C6907 = C47448 * C1179;
    const double C18069 = C47448 * C1179;
    const double C26002 = C47108 * C1179;
    const double C6903 = C47448 * C1161;
    const double C18065 = C47448 * C1161;
    const double C26000 = C47108 * C1161;
    const double C47017 = C47016 + C47001;
    const double C4775 = C47448 * C298;
    const double C15969 = C47448 * C298;
    const double C21745 = C47108 * C298;
    const double C5059 = C47448 * C299;
    const double C16253 = C47448 * C299;
    const double C46484 = C46483 + C46475;
    const double C1185 =
        (C46374 + C46398 * C46500 + ae * C46321 * C46520 +
         C46321 * (ae * C46520 +
                   C46321 * (C46398 + (C46390 + be * C46322 * C46391 +
                                       C46322 * (be * C46391 +
                                                 C46322 * std::pow(C46324, 8) *
                                                     bs[8] * C46333)) *
                                          C46500))) /
        C46273;
    const double C1553 =
        (ae * (2 * C46508 + C46491 * C46520) +
         C46321 * (2 * C46491 * C46398 +
                   C46491 * (C46398 + (C46390 + be * C46322 * C46391 +
                                       C46322 * (be * C46391 +
                                                 C46322 * std::pow(C46324, 8) *
                                                     bs[8] * C46333)) *
                                          C46500))) /
        C46273;
    const double C1030 = (3 * (C46439 + C46456 * C46500) +
                          C46491 * (2 * C46508 + C46491 * C46520)) /
                         C46271;
    const double C1173 = (C46439 + C46456 * C46500 + C46520 * C46533) / C46271;
    const double C1547 = (C46321 * (2 * C46508 + C46491 * C46520)) / C46271;
    const double C1867 =
        (3 * (C46374 + ae * C46545 + C46321 * C46549) +
         ae * (2 * C46545 + C46321 * C46550) +
         C46321 *
             (2 * C46549 + ae * C46550 +
              C46321 *
                  (C46398 + ae * C46321 * C46481 +
                   C46321 * (ae * C46481 +
                             C46321 * (C46390 + be * C46322 * C46391 +
                                       C46322 * (be * C46391 +
                                                 C46322 * std::pow(C46324, 8) *
                                                     bs[8] * C46333)))))) /
        C46273;
    const double C1858 = (3 * (C46439 + C46456 * C46533) +
                          C46321 * (2 * C46545 + C46321 * C46550)) /
                         C46271;
    const double C108 =
        (C47497 + 2 * C47140) / C47130 - (C47506 * C47131) / C47126;
    const double C109 =
        (C47484 + 2 * C47149 + C47506) / C47130 - (C47499 * C47131) / C47126;
    const double C110 = (C47455 + C47146 / C47126 + C47499) / C47130 -
                        (C47486 * C47131) / C47126;
    const double C1010 =
        (C47500 + 2 * C47222) / C47130 - (C47507 * C47218) / C47126;
    const double C1011 =
        (C47488 + 2 * C47229 + C47507) / C47130 - (C47503 * C47218) / C47126;
    const double C1012 = (C47461 + C47226 / C47126 + C47503) / C47130 -
                         (C47493 * C47218) / C47126;
    const double C1839 =
        (C47501 + 2 * C47264) / C47130 - (C47508 * C47260) / C47126;
    const double C1840 =
        (C47490 + 2 * C47271 + C47508) / C47130 - (C47505 * C47260) / C47126;
    const double C1841 = (C47464 + C47268 / C47126 + C47505) / C47130 -
                         (C47496 * C47260) / C47126;
    const double C21525 = C21519 * C116;
    const double C451 =
        (2 * C46354 + be * C46355 + C46322 * C46374 + ae * C46321 * C46459 +
         C46321 * (ae * C46459 + C46321 * C46402)) /
        C46273;
    const double C452 =
        (ae * (3 * C46439 + C46322 * C46459 +
               (2 * C46433 + C46322 * C46451) * be) +
         C46321 * (3 * C46374 + be * C46375 + C46322 * C46402)) /
        C46273;
    const double C830 =
        (ae * C46491 * C46459 + C46321 * C46491 * C46402) / C46273;
    const double C134 = (4 * (2 * C46427 + C46322 * C46439 + C46707 * be) +
                         C46322 * (3 * C46439 + C46322 * C46459 + C46712 * be) +
                         (3 * C46707 + C46322 * C46712) * be) /
                        C46271;
    const double C285 =
        (2 * C46427 + C46322 * C46439 + C46707 * be + C46459 * C46500) / C46271;
    const double C287 =
        (C46491 * (3 * C46439 + C46322 * C46459 + C46712 * be)) / C46271;
    const double C438 =
        (2 * C46427 + C46322 * C46439 + C46707 * be + C46459 * C46533) / C46271;
    const double C440 =
        (C46321 * (3 * C46439 + C46322 * C46459 + C46712 * be)) / C46271;
    const double C823 = (C46321 * C46491 * C46459) / C46271;
    const double C43672 =
        (5 * (3 * C46934 + C46321 * C47017 + C46933 * ae) +
         C46321 * (4 * C47017 +
                   C46321 * (3 * C47012 +
                             C46321 * (2 * C47004 +
                                       C46321 * (C46367 +
                                                 C46321 * (C46321 * C46391 +
                                                           C46465 * ae) +
                                                 C46321 * C46465 * ae) +
                                       C47006 * ae) +
                             C47011 * ae) +
                   C47015 * ae) +
         (4 * C46933 + C46321 * C47015) * ae) /
        C46271;
    const double C46485 = C46322 * C46484;
    const double C46552 = C46491 * C46484;
    const double C1443 =
        (ae * (C46459 + C46484 * C46500) +
         C46321 * (C46402 + (2 * C46394 + be * C46395 +
                             C46322 * (C46390 + be * C46322 * C46391 +
                                       C46322 * (be * C46391 +
                                                 C46322 * std::pow(C46324, 8) *
                                                     bs[8] * C46333))) *
                                C46500)) /
        C46273;
    const double C2123 =
        (2 * (ae * C46459 + C46321 * C46402) + ae * (C46459 + C46484 * C46533) +
         C46321 *
             (C46402 + ae * C46321 * C46484 +
              C46321 *
                  (ae * C46484 +
                   C46321 * (2 * C46394 + be * C46395 +
                             C46322 * (C46390 + be * C46322 * C46391 +
                                       C46322 * (be * C46391 +
                                                 C46322 * std::pow(C46324, 8) *
                                                     bs[8] * C46333)))))) /
        C46273;
    const double C1291 =
        (2 * C46491 * C46459 + C46491 * (C46459 + C46484 * C46500)) / C46271;
    const double C1441 = (C46321 * (C46459 + C46484 * C46500)) / C46271;
    const double C2121 =
        (2 * C46321 * C46459 + C46321 * (C46459 + C46484 * C46533)) / C46271;
    const double C21529 = C21525 + C21526;
    const double C10573 = C47448 * C451;
    const double C31566 = C47448 * C451;
    const double C42618 = C47108 * C451;
    const double C10841 = C47448 * C452;
    const double C31834 = C47448 * C452;
    const double C5407 = C47448 * C830;
    const double C16601 = C47448 * C830;
    const double C26136 = C47108 * C830;
    const double C4771 = C47448 * C285;
    const double C15965 = C47448 * C285;
    const double C21743 = C47108 * C285;
    const double C5055 = C47448 * C287;
    const double C16249 = C47448 * C287;
    const double C10569 = C47448 * C438;
    const double C31562 = C47448 * C438;
    const double C42616 = C47108 * C438;
    const double C10837 = C47448 * C440;
    const double C31830 = C47448 * C440;
    const double C5403 = C47448 * C823;
    const double C16597 = C47448 * C823;
    const double C26134 = C47108 * C823;
    const double C46486 = C46462 + C46485;
    const double C2017 =
        (C46491 * C46402 + ae * C46321 * C46552 +
         C46321 * (ae * C46552 +
                   C46321 * C46491 *
                       (2 * C46394 + be * C46395 +
                        C46322 * (C46390 + be * C46322 * C46391 +
                                  C46322 * (be * C46391 +
                                            C46322 * std::pow(C46324, 8) *
                                                bs[8] * C46333))))) /
        C46273;
    const double C2015 = (C46491 * C46459 + C46552 * C46533) / C46271;
    const double C46487 = C46486 + C46480;
    const double C453 =
        (3 * C46374 + be * C46375 + C46322 * C46402 + ae * C46321 * C46487 +
         C46321 *
             (ae * C46487 +
              C46321 *
                  (3 * C46398 + be * C46399 +
                   C46322 * (2 * C46394 + be * C46395 +
                             C46322 * (C46390 + be * C46322 * C46391 +
                                       C46322 * (be * C46391 +
                                                 C46322 * std::pow(C46324, 8) *
                                                     bs[8] * C46333)))))) /
        C46273;
    const double C665 =
        (ae * (4 * C46459 + C46322 * C46487 +
               (3 * C46451 + C46322 * C46478) * be) +
         C46321 *
             (4 * C46402 + be * C46403 +
              C46322 *
                  (3 * C46398 + be * C46399 +
                   C46322 * (2 * C46394 + be * C46395 +
                             C46322 * (C46390 + be * C46322 * C46391 +
                                       C46322 * (be * C46391 +
                                                 C46322 * std::pow(C46324, 8) *
                                                     bs[8] * C46333)))))) /
        C46273;
    const double C831 =
        (ae * C46491 * C46487 +
         C46321 * C46491 *
             (3 * C46398 + be * C46399 +
              C46322 * (2 * C46394 + be * C46395 +
                        C46322 * (C46390 + be * C46322 * C46391 +
                                  C46322 * (be * C46391 +
                                            C46322 * std::pow(C46324, 8) *
                                                bs[8] * C46333))))) /
        C46273;
    const double C136 = (5 * (3 * C46439 + C46322 * C46459 + C46712 * be) +
                         C46322 * (4 * C46459 + C46322 * C46487 + C46717 * be) +
                         (4 * C46712 + C46322 * C46717) * be) /
                        C46271;
    const double C289 =
        (3 * C46439 + C46322 * C46459 + C46712 * be + C46487 * C46500) / C46271;
    const double C442 =
        (3 * C46439 + C46322 * C46459 + C46712 * be + C46487 * C46533) / C46271;
    const double C559 =
        (C46491 * (4 * C46459 + C46322 * C46487 + C46717 * be)) / C46271;
    const double C663 =
        (C46321 * (4 * C46459 + C46322 * C46487 + C46717 * be)) / C46271;
    const double C825 = (C46321 * C46491 * C46487) / C46271;
    d2ee[0] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                ((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
                    C103 * C126 - C115 * C119) *
                       C116 +
                   (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
                    C103 * C140 - C115 * C129) *
                       C47384) *
                      C47369 * C47181 * C47222 +
                  ((C113 * C261 - C101 * C271 + C114 * C262 - C102 * C272 +
                    C115 * C263 - C103 * C273) *
                       C116 +
                   (C113 * C274 - C101 * C291 + C114 * C275 - C102 * C292 +
                    C115 * C276 - C103 * C293) *
                       C47384) *
                      C47369 * C47181 * C47229 +
                  ((C101 * C277 - C113 * C264 + C102 * C278 - C114 * C265 +
                    C103 * C279 - C115 * C266) *
                       C116 +
                   (C101 * C294 - C113 * C280 + C102 * C295 - C114 * C281 +
                    C103 * C296 - C115 * C282) *
                       C47384) *
                      C47369 * C47181 * C2700) *
                     C47140 +
                 (((C113 * C118 - C101 * C125 + C114 * C119 - C102 * C126 +
                    C115 * C120 - C103 * C130) *
                       C116 +
                   (C113 * C128 - C101 * C139 + C114 * C129 - C102 * C140 +
                    C115 * C131 - C103 * C141) *
                       C47384) *
                      C47369 * C47181 * C47222 +
                  ((C101 * C272 - C113 * C262 + C102 * C273 - C114 * C263 +
                    C103 * C283 - C115 * C267) *
                       C116 +
                   (C101 * C292 - C113 * C275 + C102 * C293 - C114 * C276 +
                    C103 * C297 - C115 * C284) *
                       C47384) *
                      C47369 * C47181 * C47229 +
                  ((C113 * C265 - C101 * C278 + C114 * C266 - C102 * C279 +
                    C115 * C268 - C103 * C285) *
                       C116 +
                   (C113 * C281 - C101 * C295 + C114 * C282 - C102 * C296 +
                    C115 * C286 - C103 * C298) *
                       C47384) *
                      C47369 * C47181 * C2700) *
                     C47149 +
                 (((C101 * C126 - C113 * C119 + C102 * C130 - C114 * C120 +
                    C103 * C132 - C115 * C121) *
                       C116 +
                   (C101 * C140 - C113 * C129 + C102 * C141 - C114 * C131 +
                    C103 * C142 - C115 * C133) *
                       C47384) *
                      C47369 * C47181 * C47222 +
                  ((C113 * C263 - C101 * C273 + C114 * C267 - C102 * C283 +
                    C115 * C269 - C103 * C287) *
                       C116 +
                   (C113 * C276 - C101 * C293 + C114 * C284 - C102 * C297 +
                    C115 * C288 - C103 * C299) *
                       C47384) *
                      C47369 * C47181 * C47229 +
                  ((C101 * C279 - C113 * C266 + C102 * C285 - C114 * C268 +
                    C103 * C289 - C115 * C270) *
                       C116 +
                   (C101 * C296 - C113 * C282 + C102 * C298 - C114 * C286 +
                    C103 * C300 - C115 * C290) *
                       C47384) *
                      C47369 * C47181 * C2700) *
                     C2703)) /
               (p * q * std::sqrt(p + q));
    d2ee[1] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                (((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
                     C103 * C126 - C115 * C119) *
                        C116 +
                    (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
                     C103 * C140 - C115 * C129) *
                        C47384) *
                       C47369 * C47430 +
                   ((C113 * C414 - C101 * C424 + C114 * C415 - C102 * C425 +
                     C115 * C416 - C103 * C426) *
                        C116 +
                    (C113 * C427 - C101 * C444 + C114 * C428 - C102 * C445 +
                     C115 * C429 - C103 * C446) *
                        C47384) *
                       C47369 * C47268) *
                      C47222 +
                  (((C113 * C261 - C101 * C271 + C114 * C262 - C102 * C272 +
                     C115 * C263 - C103 * C273) *
                        C116 +
                    (C113 * C274 - C101 * C291 + C114 * C275 - C102 * C292 +
                     C115 * C276 - C103 * C293) *
                        C47384) *
                       C47369 * C47430 +
                   ((C101 * C817 - C113 * C812 + C102 * C818 - C114 * C813 +
                     C103 * C819 - C115 * C814) *
                        C116 +
                    (C101 * C827 - C113 * C820 + C102 * C828 - C114 * C821 +
                     C103 * C829 - C115 * C822) *
                        C47384) *
                       C47369 * C47268) *
                      C47229 +
                  (((C101 * C277 - C113 * C264 + C102 * C278 - C114 * C265 +
                     C103 * C279 - C115 * C266) *
                        C116 +
                    (C101 * C294 - C113 * C280 + C102 * C295 - C114 * C281 +
                     C103 * C296 - C115 * C282) *
                        C47384) *
                       C47369 * C47430 +
                   ((C113 * C1153 - C101 * C1165 + C114 * C1154 - C102 * C1166 +
                     C115 * C1155 - C103 * C1167) *
                        C116 +
                    (C113 * C1168 - C101 * C1180 + C114 * C1169 - C102 * C1181 +
                     C115 * C1170 - C103 * C1182) *
                        C47384) *
                       C47369 * C47268) *
                      C2700) *
                     C2440 +
                 ((((C113 * C118 - C101 * C125 + C114 * C119 - C102 * C126 +
                     C115 * C120 - C103 * C130) *
                        C116 +
                    (C113 * C128 - C101 * C139 + C114 * C129 - C102 * C140 +
                     C115 * C131 - C103 * C141) *
                        C47384) *
                       C47369 * C47430 +
                   ((C101 * C425 - C113 * C415 + C102 * C426 - C114 * C416 +
                     C103 * C436 - C115 * C420) *
                        C116 +
                    (C101 * C445 - C113 * C428 + C102 * C446 - C114 * C429 +
                     C103 * C450 - C115 * C437) *
                        C47384) *
                       C47369 * C47268) *
                      C47222 +
                  (((C101 * C272 - C113 * C262 + C102 * C273 - C114 * C263 +
                     C103 * C283 - C115 * C267) *
                        C116 +
                    (C101 * C292 - C113 * C275 + C102 * C293 - C114 * C276 +
                     C103 * C297 - C115 * C284) *
                        C47384) *
                       C47369 * C47430 +
                   ((C113 * C813 - C101 * C818 + C114 * C814 - C102 * C819 +
                     C115 * C815 - C103 * C823) *
                        C116 +
                    (C113 * C821 - C101 * C828 + C114 * C822 - C102 * C829 +
                     C115 * C824 - C103 * C830) *
                        C47384) *
                       C47369 * C47268) *
                      C47229 +
                  (((C113 * C265 - C101 * C278 + C114 * C266 - C102 * C279 +
                     C115 * C268 - C103 * C285) *
                        C116 +
                    (C113 * C281 - C101 * C295 + C114 * C282 - C102 * C296 +
                     C115 * C286 - C103 * C298) *
                        C47384) *
                       C47369 * C47430 +
                   ((C101 * C1166 - C113 * C1154 + C102 * C1167 - C114 * C1155 +
                     C103 * C1441 - C115 * C1440) *
                        C116 +
                    (C101 * C1181 - C113 * C1169 + C102 * C1182 - C114 * C1170 +
                     C103 * C1443 - C115 * C1442) *
                        C47384) *
                       C47369 * C47268) *
                      C2700) *
                     C47146)) /
               (p * q * std::sqrt(p + q));
    d2ee[2] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                ((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
                    C103 * C126 - C115 * C119) *
                       C116 +
                   (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
                    C103 * C140 - C115 * C129) *
                       C47384) *
                      C47369 * C47181 * C47507 +
                  ((C113 * C261 - C101 * C271 + C114 * C262 - C102 * C272 +
                    C115 * C263 - C103 * C273) *
                       C116 +
                   (C113 * C274 - C101 * C291 + C114 * C275 - C102 * C292 +
                    C115 * C276 - C103 * C293) *
                       C47384) *
                      C47369 * C47181 * C47503 +
                  ((C101 * C277 - C113 * C264 + C102 * C278 - C114 * C265 +
                    C103 * C279 - C115 * C266) *
                       C116 +
                   (C101 * C294 - C113 * C280 + C102 * C295 - C114 * C281 +
                    C103 * C296 - C115 * C282) *
                       C47384) *
                      C47369 * C47181 * C47493 +
                  ((C113 * C1016 - C101 * C1022 + C114 * C1017 - C102 * C1023 +
                    C115 * C1018 - C103 * C1024) *
                       C116 +
                   (C113 * C1025 - C101 * C1034 + C114 * C1026 - C102 * C1035 +
                    C115 * C1027 - C103 * C1036) *
                       C47384) *
                      C47369 * C47181 * C47471) *
                     C2440 +
                 (((C113 * C118 - C101 * C125 + C114 * C119 - C102 * C126 +
                    C115 * C120 - C103 * C130) *
                       C116 +
                   (C113 * C128 - C101 * C139 + C114 * C129 - C102 * C140 +
                    C115 * C131 - C103 * C141) *
                       C47384) *
                      C47369 * C47181 * C47507 +
                  ((C101 * C272 - C113 * C262 + C102 * C273 - C114 * C263 +
                    C103 * C283 - C115 * C267) *
                       C116 +
                   (C101 * C292 - C113 * C275 + C102 * C293 - C114 * C276 +
                    C103 * C297 - C115 * C284) *
                       C47384) *
                      C47369 * C47181 * C47503 +
                  ((C113 * C265 - C101 * C278 + C114 * C266 - C102 * C279 +
                    C115 * C268 - C103 * C285) *
                       C116 +
                   (C113 * C281 - C101 * C295 + C114 * C282 - C102 * C296 +
                    C115 * C286 - C103 * C298) *
                       C47384) *
                      C47369 * C47181 * C47493 +
                  ((C101 * C1023 - C113 * C1017 + C102 * C1024 - C114 * C1018 +
                    C103 * C1291 - C115 * C1290) *
                       C116 +
                   (C101 * C1035 - C113 * C1026 + C102 * C1036 - C114 * C1027 +
                    C103 * C1293 - C115 * C1292) *
                       C47384) *
                      C47369 * C47181 * C47471) *
                     C47146)) /
                   (p * q * std::sqrt(p + q)) -
               (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                ((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
                    C103 * C126 - C115 * C119) *
                       C116 +
                   (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
                    C103 * C140 - C115 * C129) *
                       C47384) *
                      C47369 * C47181 * C2332 +
                  ((C113 * C261 - C101 * C271 + C114 * C262 - C102 * C272 +
                    C115 * C263 - C103 * C273) *
                       C116 +
                   (C113 * C274 - C101 * C291 + C114 * C275 - C102 * C292 +
                    C115 * C276 - C103 * C293) *
                       C47384) *
                      C47369 * C47181 * C47226) *
                     C47506 +
                 (((C113 * C118 - C101 * C125 + C114 * C119 - C102 * C126 +
                    C115 * C120 - C103 * C130) *
                       C116 +
                   (C113 * C128 - C101 * C139 + C114 * C129 - C102 * C140 +
                    C115 * C131 - C103 * C141) *
                       C47384) *
                      C47369 * C47181 * C2332 +
                  ((C101 * C272 - C113 * C262 + C102 * C273 - C114 * C263 +
                    C103 * C283 - C115 * C267) *
                       C116 +
                   (C101 * C292 - C113 * C275 + C102 * C293 - C114 * C276 +
                    C103 * C297 - C115 * C284) *
                       C47384) *
                      C47369 * C47181 * C47226) *
                     C47499 +
                 (((C101 * C126 - C113 * C119 + C102 * C130 - C114 * C120 +
                    C103 * C132 - C115 * C121) *
                       C116 +
                   (C101 * C140 - C113 * C129 + C102 * C141 - C114 * C131 +
                    C103 * C142 - C115 * C133) *
                       C47384) *
                      C47369 * C47181 * C2332 +
                  ((C113 * C263 - C101 * C273 + C114 * C267 - C102 * C283 +
                    C115 * C269 - C103 * C287) *
                       C116 +
                   (C113 * C276 - C101 * C293 + C114 * C284 - C102 * C297 +
                    C115 * C288 - C103 * C299) *
                       C47384) *
                      C47369 * C47181 * C47226) *
                     C47486 +
                 (((C113 * C120 - C101 * C130 + C114 * C121 - C102 * C132 +
                    C115 * C122 - C103 * C134) *
                       C116 +
                   (C113 * C131 - C101 * C141 + C114 * C133 - C102 * C142 +
                    C115 * C135 - C103 * C143) *
                       C47384) *
                      C47369 * C47181 * C2332 +
                  ((C101 * C283 - C113 * C267 + C102 * C287 - C114 * C269 +
                    C103 * C559 - C115 * C558) *
                       C116 +
                   (C101 * C297 - C113 * C284 + C102 * C299 - C114 * C288 +
                    C103 * C561 - C115 * C560) *
                       C47384) *
                      C47369 * C47181 * C47226) *
                     C47465)) /
                   (p * q * std::sqrt(p + q)) +
               (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                (((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
                     C103 * C126 - C115 * C119) *
                        C116 +
                    (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
                     C103 * C140 - C115 * C129) *
                        C47384) *
                       C47369 * C47501 +
                   ((C113 * C414 - C101 * C424 + C114 * C415 - C102 * C425 +
                     C115 * C416 - C103 * C426) *
                        C116 +
                    (C113 * C427 - C101 * C444 + C114 * C428 - C102 * C445 +
                     C115 * C429 - C103 * C446) *
                        C47384) *
                       C47369 * C47490 +
                   ((C101 * C430 - C113 * C417 + C102 * C431 - C114 * C418 +
                     C103 * C432 - C115 * C419) *
                        C116 +
                    (C101 * C447 - C113 * C433 + C102 * C448 - C114 * C434 +
                     C103 * C449 - C115 * C435) *
                        C47384) *
                       C47369 * C47464) *
                      C2332 +
                  (((C113 * C261 - C101 * C271 + C114 * C262 - C102 * C272 +
                     C115 * C263 - C103 * C273) *
                        C116 +
                    (C113 * C274 - C101 * C291 + C114 * C275 - C102 * C292 +
                     C115 * C276 - C103 * C293) *
                        C47384) *
                       C47369 * C47501 +
                   ((C101 * C817 - C113 * C812 + C102 * C818 - C114 * C813 +
                     C103 * C819 - C115 * C814) *
                        C116 +
                    (C101 * C827 - C113 * C820 + C102 * C828 - C114 * C821 +
                     C103 * C829 - C115 * C822) *
                        C47384) *
                       C47369 * C47490 +
                   ((C113 * C1150 - C101 * C1159 + C114 * C1151 - C102 * C1160 +
                     C115 * C1152 - C103 * C1161) *
                        C116 +
                    (C113 * C1162 - C101 * C1177 + C114 * C1163 - C102 * C1178 +
                     C115 * C1164 - C103 * C1179) *
                        C47384) *
                       C47369 * C47464) *
                      C47226) *
                     C2440 +
                 ((((C113 * C118 - C101 * C125 + C114 * C119 - C102 * C126 +
                     C115 * C120 - C103 * C130) *
                        C116 +
                    (C113 * C128 - C101 * C139 + C114 * C129 - C102 * C140 +
                     C115 * C131 - C103 * C141) *
                        C47384) *
                       C47369 * C47501 +
                   ((C101 * C425 - C113 * C415 + C102 * C426 - C114 * C416 +
                     C103 * C436 - C115 * C420) *
                        C116 +
                    (C101 * C445 - C113 * C428 + C102 * C446 - C114 * C429 +
                     C103 * C450 - C115 * C437) *
                        C47384) *
                       C47369 * C47490 +
                   ((C113 * C418 - C101 * C431 + C114 * C419 - C102 * C432 +
                     C115 * C421 - C103 * C438) *
                        C116 +
                    (C113 * C434 - C101 * C448 + C114 * C435 - C102 * C449 +
                     C115 * C439 - C103 * C451) *
                        C47384) *
                       C47369 * C47464) *
                      C2332 +
                  (((C101 * C272 - C113 * C262 + C102 * C273 - C114 * C263 +
                     C103 * C283 - C115 * C267) *
                        C116 +
                    (C101 * C292 - C113 * C275 + C102 * C293 - C114 * C276 +
                     C103 * C297 - C115 * C284) *
                        C47384) *
                       C47369 * C47501 +
                   ((C113 * C813 - C101 * C818 + C114 * C814 - C102 * C819 +
                     C115 * C815 - C103 * C823) *
                        C116 +
                    (C113 * C821 - C101 * C828 + C114 * C822 - C102 * C829 +
                     C115 * C824 - C103 * C830) *
                        C47384) *
                       C47369 * C47490 +
                   ((C101 * C1160 - C113 * C1151 + C102 * C1161 - C114 * C1152 +
                     C103 * C2015 - C115 * C2014) *
                        C116 +
                    (C101 * C1178 - C113 * C1163 + C102 * C1179 - C114 * C1164 +
                     C103 * C2017 - C115 * C2016) *
                        C47384) *
                       C47369 * C47464) *
                      C47226) *
                     C47146)) /
                   (p * q * std::sqrt(p + q));
    d2ee[3] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                (((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
                     C103 * C126 - C115 * C119) *
                        C116 +
                    (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
                     C103 * C140 - C115 * C129) *
                        C47384) *
                       C47369 * C47430 +
                   ((C113 * C414 - C101 * C424 + C114 * C415 - C102 * C425 +
                     C115 * C416 - C103 * C426) *
                        C116 +
                    (C113 * C427 - C101 * C444 + C114 * C428 - C102 * C445 +
                     C115 * C429 - C103 * C446) *
                        C47384) *
                       C47369 * C47268) *
                      C2332 +
                  (((C113 * C261 - C101 * C271 + C114 * C262 - C102 * C272 +
                     C115 * C263 - C103 * C273) *
                        C116 +
                    (C113 * C274 - C101 * C291 + C114 * C275 - C102 * C292 +
                     C115 * C276 - C103 * C293) *
                        C47384) *
                       C47369 * C47430 +
                   ((C101 * C817 - C113 * C812 + C102 * C818 - C114 * C813 +
                     C103 * C819 - C115 * C814) *
                        C116 +
                    (C101 * C827 - C113 * C820 + C102 * C828 - C114 * C821 +
                     C103 * C829 - C115 * C822) *
                        C47384) *
                       C47369 * C47268) *
                      C47226) *
                     C47140 +
                 ((((C113 * C118 - C101 * C125 + C114 * C119 - C102 * C126 +
                     C115 * C120 - C103 * C130) *
                        C116 +
                    (C113 * C128 - C101 * C139 + C114 * C129 - C102 * C140 +
                     C115 * C131 - C103 * C141) *
                        C47384) *
                       C47369 * C47430 +
                   ((C101 * C425 - C113 * C415 + C102 * C426 - C114 * C416 +
                     C103 * C436 - C115 * C420) *
                        C116 +
                    (C101 * C445 - C113 * C428 + C102 * C446 - C114 * C429 +
                     C103 * C450 - C115 * C437) *
                        C47384) *
                       C47369 * C47268) *
                      C2332 +
                  (((C101 * C272 - C113 * C262 + C102 * C273 - C114 * C263 +
                     C103 * C283 - C115 * C267) *
                        C116 +
                    (C101 * C292 - C113 * C275 + C102 * C293 - C114 * C276 +
                     C103 * C297 - C115 * C284) *
                        C47384) *
                       C47369 * C47430 +
                   ((C113 * C813 - C101 * C818 + C114 * C814 - C102 * C819 +
                     C115 * C815 - C103 * C823) *
                        C116 +
                    (C113 * C821 - C101 * C828 + C114 * C822 - C102 * C829 +
                     C115 * C824 - C103 * C830) *
                        C47384) *
                       C47369 * C47268) *
                      C47226) *
                     C47149 +
                 ((((C101 * C126 - C113 * C119 + C102 * C130 - C114 * C120 +
                     C103 * C132 - C115 * C121) *
                        C116 +
                    (C101 * C140 - C113 * C129 + C102 * C141 - C114 * C131 +
                     C103 * C142 - C115 * C133) *
                        C47384) *
                       C47369 * C47430 +
                   ((C113 * C416 - C101 * C426 + C114 * C420 - C102 * C436 +
                     C115 * C422 - C103 * C440) *
                        C116 +
                    (C113 * C429 - C101 * C446 + C114 * C437 - C102 * C450 +
                     C115 * C441 - C103 * C452) *
                        C47384) *
                       C47369 * C47268) *
                      C2332 +
                  (((C113 * C263 - C101 * C273 + C114 * C267 - C102 * C283 +
                     C115 * C269 - C103 * C287) *
                        C116 +
                    (C113 * C276 - C101 * C293 + C114 * C284 - C102 * C297 +
                     C115 * C288 - C103 * C299) *
                        C47384) *
                       C47369 * C47430 +
                   ((C101 * C819 - C113 * C814 + C102 * C823 - C114 * C815 +
                     C103 * C825 - C115 * C816) *
                        C116 +
                    (C101 * C829 - C113 * C822 + C102 * C830 - C114 * C824 +
                     C103 * C831 - C115 * C826) *
                        C47384) *
                       C47369 * C47268) *
                      C47226) *
                     C2703)) /
               (p * q * std::sqrt(p + q));
    d2ee[4] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                ((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
                    C103 * C126 - C115 * C119) *
                       C116 +
                   (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
                    C103 * C140 - C115 * C129) *
                       C47384) *
                      C47369 * C47181 * C2332 +
                  ((C113 * C261 - C101 * C271 + C114 * C262 - C102 * C272 +
                    C115 * C263 - C103 * C273) *
                       C116 +
                   (C113 * C274 - C101 * C291 + C114 * C275 - C102 * C292 +
                    C115 * C276 - C103 * C293) *
                       C47384) *
                      C47369 * C47181 * C47226) *
                     C47506 +
                 (((C113 * C118 - C101 * C125 + C114 * C119 - C102 * C126 +
                    C115 * C120 - C103 * C130) *
                       C116 +
                   (C113 * C128 - C101 * C139 + C114 * C129 - C102 * C140 +
                    C115 * C131 - C103 * C141) *
                       C47384) *
                      C47369 * C47181 * C2332 +
                  ((C101 * C272 - C113 * C262 + C102 * C273 - C114 * C263 +
                    C103 * C283 - C115 * C267) *
                       C116 +
                   (C101 * C292 - C113 * C275 + C102 * C293 - C114 * C276 +
                    C103 * C297 - C115 * C284) *
                       C47384) *
                      C47369 * C47181 * C47226) *
                     C47499 +
                 (((C101 * C126 - C113 * C119 + C102 * C130 - C114 * C120 +
                    C103 * C132 - C115 * C121) *
                       C116 +
                   (C101 * C140 - C113 * C129 + C102 * C141 - C114 * C131 +
                    C103 * C142 - C115 * C133) *
                       C47384) *
                      C47369 * C47181 * C2332 +
                  ((C113 * C263 - C101 * C273 + C114 * C267 - C102 * C283 +
                    C115 * C269 - C103 * C287) *
                       C116 +
                   (C113 * C276 - C101 * C293 + C114 * C284 - C102 * C297 +
                    C115 * C288 - C103 * C299) *
                       C47384) *
                      C47369 * C47181 * C47226) *
                     C47486 +
                 (((C113 * C120 - C101 * C130 + C114 * C121 - C102 * C132 +
                    C115 * C122 - C103 * C134) *
                       C116 +
                   (C113 * C131 - C101 * C141 + C114 * C133 - C102 * C142 +
                    C115 * C135 - C103 * C143) *
                       C47384) *
                      C47369 * C47181 * C2332 +
                  ((C101 * C283 - C113 * C267 + C102 * C287 - C114 * C269 +
                    C103 * C559 - C115 * C558) *
                       C116 +
                   (C101 * C297 - C113 * C284 + C102 * C299 - C114 * C288 +
                    C103 * C561 - C115 * C560) *
                       C47384) *
                      C47369 * C47181 * C47226) *
                     C47465)) /
                   (p * q * std::sqrt(p + q)) -
               (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                ((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
                    C103 * C126 - C115 * C119) *
                       C116 +
                   (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
                    C103 * C140 - C115 * C129) *
                       C47384) *
                      C47369 * C47181 * C47507 +
                  ((C113 * C261 - C101 * C271 + C114 * C262 - C102 * C272 +
                    C115 * C263 - C103 * C273) *
                       C116 +
                   (C113 * C274 - C101 * C291 + C114 * C275 - C102 * C292 +
                    C115 * C276 - C103 * C293) *
                       C47384) *
                      C47369 * C47181 * C47503 +
                  ((C101 * C277 - C113 * C264 + C102 * C278 - C114 * C265 +
                    C103 * C279 - C115 * C266) *
                       C116 +
                   (C101 * C294 - C113 * C280 + C102 * C295 - C114 * C281 +
                    C103 * C296 - C115 * C282) *
                       C47384) *
                      C47369 * C47181 * C47493 +
                  ((C113 * C1016 - C101 * C1022 + C114 * C1017 - C102 * C1023 +
                    C115 * C1018 - C103 * C1024) *
                       C116 +
                   (C113 * C1025 - C101 * C1034 + C114 * C1026 - C102 * C1035 +
                    C115 * C1027 - C103 * C1036) *
                       C47384) *
                      C47369 * C47181 * C47471) *
                     C2440 +
                 (((C113 * C118 - C101 * C125 + C114 * C119 - C102 * C126 +
                    C115 * C120 - C103 * C130) *
                       C116 +
                   (C113 * C128 - C101 * C139 + C114 * C129 - C102 * C140 +
                    C115 * C131 - C103 * C141) *
                       C47384) *
                      C47369 * C47181 * C47507 +
                  ((C101 * C272 - C113 * C262 + C102 * C273 - C114 * C263 +
                    C103 * C283 - C115 * C267) *
                       C116 +
                   (C101 * C292 - C113 * C275 + C102 * C293 - C114 * C276 +
                    C103 * C297 - C115 * C284) *
                       C47384) *
                      C47369 * C47181 * C47503 +
                  ((C113 * C265 - C101 * C278 + C114 * C266 - C102 * C279 +
                    C115 * C268 - C103 * C285) *
                       C116 +
                   (C113 * C281 - C101 * C295 + C114 * C282 - C102 * C296 +
                    C115 * C286 - C103 * C298) *
                       C47384) *
                      C47369 * C47181 * C47493 +
                  ((C101 * C1023 - C113 * C1017 + C102 * C1024 - C114 * C1018 +
                    C103 * C1291 - C115 * C1290) *
                       C116 +
                   (C101 * C1035 - C113 * C1026 + C102 * C1036 - C114 * C1027 +
                    C103 * C1293 - C115 * C1292) *
                       C47384) *
                      C47369 * C47181 * C47471) *
                     C47146)) /
                   (p * q * std::sqrt(p + q));
    d2ee[5] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                (((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
                     C103 * C126 - C115 * C119) *
                        C116 +
                    (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
                     C103 * C140 - C115 * C129) *
                        C47384) *
                       C47369 * C3094 +
                   ((C113 * C414 - C101 * C424 + C114 * C415 - C102 * C425 +
                     C115 * C416 - C103 * C426) *
                        C116 +
                    (C113 * C427 - C101 * C444 + C114 * C428 - C102 * C445 +
                     C115 * C429 - C103 * C446) *
                        C47384) *
                       C47369 * C47268) *
                      C47222 +
                  (((C113 * C261 - C101 * C271 + C114 * C262 - C102 * C272 +
                     C115 * C263 - C103 * C273) *
                        C116 +
                    (C113 * C274 - C101 * C291 + C114 * C275 - C102 * C292 +
                     C115 * C276 - C103 * C293) *
                        C47384) *
                       C47369 * C3094 +
                   ((C101 * C817 - C113 * C812 + C102 * C818 - C114 * C813 +
                     C103 * C819 - C115 * C814) *
                        C116 +
                    (C101 * C827 - C113 * C820 + C102 * C828 - C114 * C821 +
                     C103 * C829 - C115 * C822) *
                        C47384) *
                       C47369 * C47268) *
                      C47229 +
                  (((C101 * C277 - C113 * C264 + C102 * C278 - C114 * C265 +
                     C103 * C279 - C115 * C266) *
                        C116 +
                    (C101 * C294 - C113 * C280 + C102 * C295 - C114 * C281 +
                     C103 * C296 - C115 * C282) *
                        C47384) *
                       C47369 * C3094 +
                   ((C113 * C1153 - C101 * C1165 + C114 * C1154 - C102 * C1166 +
                     C115 * C1155 - C103 * C1167) *
                        C116 +
                    (C113 * C1168 - C101 * C1180 + C114 * C1169 - C102 * C1181 +
                     C115 * C1170 - C103 * C1182) *
                        C47384) *
                       C47369 * C47268) *
                      C2700) *
                     C47415 +
                 ((((C113 * C118 - C101 * C125 + C114 * C119 - C102 * C126 +
                     C115 * C120 - C103 * C130) *
                        C116 +
                    (C113 * C128 - C101 * C139 + C114 * C129 - C102 * C140 +
                     C115 * C131 - C103 * C141) *
                        C47384) *
                       C47369 * C3094 +
                   ((C101 * C425 - C113 * C415 + C102 * C426 - C114 * C416 +
                     C103 * C436 - C115 * C420) *
                        C116 +
                    (C101 * C445 - C113 * C428 + C102 * C446 - C114 * C429 +
                     C103 * C450 - C115 * C437) *
                        C47384) *
                       C47369 * C47268) *
                      C47222 +
                  (((C101 * C272 - C113 * C262 + C102 * C273 - C114 * C263 +
                     C103 * C283 - C115 * C267) *
                        C116 +
                    (C101 * C292 - C113 * C275 + C102 * C293 - C114 * C276 +
                     C103 * C297 - C115 * C284) *
                        C47384) *
                       C47369 * C3094 +
                   ((C113 * C813 - C101 * C818 + C114 * C814 - C102 * C819 +
                     C115 * C815 - C103 * C823) *
                        C116 +
                    (C113 * C821 - C101 * C828 + C114 * C822 - C102 * C829 +
                     C115 * C824 - C103 * C830) *
                        C47384) *
                       C47369 * C47268) *
                      C47229 +
                  (((C113 * C265 - C101 * C278 + C114 * C266 - C102 * C279 +
                     C115 * C268 - C103 * C285) *
                        C116 +
                    (C113 * C281 - C101 * C295 + C114 * C282 - C102 * C296 +
                     C115 * C286 - C103 * C298) *
                        C47384) *
                       C47369 * C3094 +
                   ((C101 * C1166 - C113 * C1154 + C102 * C1167 - C114 * C1155 +
                     C103 * C1441 - C115 * C1440) *
                        C116 +
                    (C101 * C1181 - C113 * C1169 + C102 * C1182 - C114 * C1170 +
                     C103 * C1443 - C115 * C1442) *
                        C47384) *
                       C47369 * C47268) *
                      C2700) *
                     C47146)) /
               (p * q * std::sqrt(p + q));
    d2ee[6] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                ((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
                    C103 * C126 - C115 * C119) *
                       C116 +
                   (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
                    C103 * C140 - C115 * C129) *
                       C47384) *
                      C47369 * C47264 +
                  ((C113 * C414 - C101 * C424 + C114 * C415 - C102 * C425 +
                    C115 * C416 - C103 * C426) *
                       C116 +
                   (C113 * C427 - C101 * C444 + C114 * C428 - C102 * C445 +
                    C115 * C429 - C103 * C446) *
                       C47384) *
                      C47369 * C47271 +
                  ((C101 * C430 - C113 * C417 + C102 * C431 - C114 * C418 +
                    C103 * C432 - C115 * C419) *
                       C116 +
                   (C101 * C447 - C113 * C433 + C102 * C448 - C114 * C434 +
                    C103 * C449 - C115 * C435) *
                       C47384) *
                      C47369 * C3602) *
                     C47222 +
                 (((C113 * C261 - C101 * C271 + C114 * C262 - C102 * C272 +
                    C115 * C263 - C103 * C273) *
                       C116 +
                   (C113 * C274 - C101 * C291 + C114 * C275 - C102 * C292 +
                    C115 * C276 - C103 * C293) *
                       C47384) *
                      C47369 * C47264 +
                  ((C101 * C817 - C113 * C812 + C102 * C818 - C114 * C813 +
                    C103 * C819 - C115 * C814) *
                       C116 +
                   (C101 * C827 - C113 * C820 + C102 * C828 - C114 * C821 +
                    C103 * C829 - C115 * C822) *
                       C47384) *
                      C47369 * C47271 +
                  ((C113 * C1150 - C101 * C1159 + C114 * C1151 - C102 * C1160 +
                    C115 * C1152 - C103 * C1161) *
                       C116 +
                   (C113 * C1162 - C101 * C1177 + C114 * C1163 - C102 * C1178 +
                    C115 * C1164 - C103 * C1179) *
                       C47384) *
                      C47369 * C3602) *
                     C47229 +
                 (((C101 * C277 - C113 * C264 + C102 * C278 - C114 * C265 +
                    C103 * C279 - C115 * C266) *
                       C116 +
                   (C101 * C294 - C113 * C280 + C102 * C295 - C114 * C281 +
                    C103 * C296 - C115 * C282) *
                       C47384) *
                      C47369 * C47264 +
                  ((C113 * C1153 - C101 * C1165 + C114 * C1154 - C102 * C1166 +
                    C115 * C1155 - C103 * C1167) *
                       C116 +
                   (C113 * C1168 - C101 * C1180 + C114 * C1169 - C102 * C1181 +
                    C115 * C1170 - C103 * C1182) *
                       C47384) *
                      C47369 * C47271 +
                  ((C101 * C1171 - C113 * C1156 + C102 * C1172 - C114 * C1157 +
                    C103 * C1173 - C115 * C1158) *
                       C116 +
                   (C101 * C1183 - C113 * C1174 + C102 * C1184 - C114 * C1175 +
                    C103 * C1185 - C115 * C1176) *
                       C47384) *
                      C47369 * C3602) *
                     C2700) *
                C47135) /
               (p * q * std::sqrt(p + q));
    d2ee[7] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                ((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
                    C103 * C126 - C115 * C119) *
                       C116 +
                   (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
                    C103 * C140 - C115 * C129) *
                       C47384) *
                      C47369 * C3094 +
                  ((C113 * C414 - C101 * C424 + C114 * C415 - C102 * C425 +
                    C115 * C416 - C103 * C426) *
                       C116 +
                   (C113 * C427 - C101 * C444 + C114 * C428 - C102 * C445 +
                    C115 * C429 - C103 * C446) *
                       C47384) *
                      C47369 * C47268) *
                     C47507 +
                 (((C113 * C261 - C101 * C271 + C114 * C262 - C102 * C272 +
                    C115 * C263 - C103 * C273) *
                       C116 +
                   (C113 * C274 - C101 * C291 + C114 * C275 - C102 * C292 +
                    C115 * C276 - C103 * C293) *
                       C47384) *
                      C47369 * C3094 +
                  ((C101 * C817 - C113 * C812 + C102 * C818 - C114 * C813 +
                    C103 * C819 - C115 * C814) *
                       C116 +
                   (C101 * C827 - C113 * C820 + C102 * C828 - C114 * C821 +
                    C103 * C829 - C115 * C822) *
                       C47384) *
                      C47369 * C47268) *
                     C47503 +
                 (((C101 * C277 - C113 * C264 + C102 * C278 - C114 * C265 +
                    C103 * C279 - C115 * C266) *
                       C116 +
                   (C101 * C294 - C113 * C280 + C102 * C295 - C114 * C281 +
                    C103 * C296 - C115 * C282) *
                       C47384) *
                      C47369 * C3094 +
                  ((C113 * C1153 - C101 * C1165 + C114 * C1154 - C102 * C1166 +
                    C115 * C1155 - C103 * C1167) *
                       C116 +
                   (C113 * C1168 - C101 * C1180 + C114 * C1169 - C102 * C1181 +
                    C115 * C1170 - C103 * C1182) *
                       C47384) *
                      C47369 * C47268) *
                     C47493 +
                 (((C113 * C1016 - C101 * C1022 + C114 * C1017 - C102 * C1023 +
                    C115 * C1018 - C103 * C1024) *
                       C116 +
                   (C113 * C1025 - C101 * C1034 + C114 * C1026 - C102 * C1035 +
                    C115 * C1027 - C103 * C1036) *
                       C47384) *
                      C47369 * C3094 +
                  ((C101 * C1545 - C113 * C1542 + C102 * C1546 - C114 * C1543 +
                    C103 * C1547 - C115 * C1544) *
                       C116 +
                   (C101 * C1551 - C113 * C1548 + C102 * C1552 - C114 * C1549 +
                    C103 * C1553 - C115 * C1550) *
                       C47384) *
                      C47369 * C47268) *
                     C47471) *
                C47135) /
                   (p * q * std::sqrt(p + q)) -
               (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                (((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
                     C103 * C126 - C115 * C119) *
                        C116 +
                    (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
                     C103 * C140 - C115 * C129) *
                        C47384) *
                       C47369 * C3094 +
                   ((C113 * C414 - C101 * C424 + C114 * C415 - C102 * C425 +
                     C115 * C416 - C103 * C426) *
                        C116 +
                    (C113 * C427 - C101 * C444 + C114 * C428 - C102 * C445 +
                     C115 * C429 - C103 * C446) *
                        C47384) *
                       C47369 * C47268) *
                      C2332 +
                  (((C113 * C261 - C101 * C271 + C114 * C262 - C102 * C272 +
                     C115 * C263 - C103 * C273) *
                        C116 +
                    (C113 * C274 - C101 * C291 + C114 * C275 - C102 * C292 +
                     C115 * C276 - C103 * C293) *
                        C47384) *
                       C47369 * C3094 +
                   ((C101 * C817 - C113 * C812 + C102 * C818 - C114 * C813 +
                     C103 * C819 - C115 * C814) *
                        C116 +
                    (C101 * C827 - C113 * C820 + C102 * C828 - C114 * C821 +
                     C103 * C829 - C115 * C822) *
                        C47384) *
                       C47369 * C47268) *
                      C47226) *
                     C47497 +
                 ((((C113 * C118 - C101 * C125 + C114 * C119 - C102 * C126 +
                     C115 * C120 - C103 * C130) *
                        C116 +
                    (C113 * C128 - C101 * C139 + C114 * C129 - C102 * C140 +
                     C115 * C131 - C103 * C141) *
                        C47384) *
                       C47369 * C3094 +
                   ((C101 * C425 - C113 * C415 + C102 * C426 - C114 * C416 +
                     C103 * C436 - C115 * C420) *
                        C116 +
                    (C101 * C445 - C113 * C428 + C102 * C446 - C114 * C429 +
                     C103 * C450 - C115 * C437) *
                        C47384) *
                       C47369 * C47268) *
                      C2332 +
                  (((C101 * C272 - C113 * C262 + C102 * C273 - C114 * C263 +
                     C103 * C283 - C115 * C267) *
                        C116 +
                    (C101 * C292 - C113 * C275 + C102 * C293 - C114 * C276 +
                     C103 * C297 - C115 * C284) *
                        C47384) *
                       C47369 * C3094 +
                   ((C113 * C813 - C101 * C818 + C114 * C814 - C102 * C819 +
                     C115 * C815 - C103 * C823) *
                        C116 +
                    (C113 * C821 - C101 * C828 + C114 * C822 - C102 * C829 +
                     C115 * C824 - C103 * C830) *
                        C47384) *
                       C47369 * C47268) *
                      C47226) *
                     C47484 +
                 ((((C101 * C126 - C113 * C119 + C102 * C130 - C114 * C120 +
                     C103 * C132 - C115 * C121) *
                        C116 +
                    (C101 * C140 - C113 * C129 + C102 * C141 - C114 * C131 +
                     C103 * C142 - C115 * C133) *
                        C47384) *
                       C47369 * C3094 +
                   ((C113 * C416 - C101 * C426 + C114 * C420 - C102 * C436 +
                     C115 * C422 - C103 * C440) *
                        C116 +
                    (C113 * C429 - C101 * C446 + C114 * C437 - C102 * C450 +
                     C115 * C441 - C103 * C452) *
                        C47384) *
                       C47369 * C47268) *
                      C2332 +
                  (((C113 * C263 - C101 * C273 + C114 * C267 - C102 * C283 +
                     C115 * C269 - C103 * C287) *
                        C116 +
                    (C113 * C276 - C101 * C293 + C114 * C284 - C102 * C297 +
                     C115 * C288 - C103 * C299) *
                        C47384) *
                       C47369 * C3094 +
                   ((C101 * C819 - C113 * C814 + C102 * C823 - C114 * C815 +
                     C103 * C825 - C115 * C816) *
                        C116 +
                    (C101 * C829 - C113 * C822 + C102 * C830 - C114 * C824 +
                     C103 * C831 - C115 * C826) *
                        C47384) *
                       C47369 * C47268) *
                      C47226) *
                     C47455)) /
                   (p * q * std::sqrt(p + q)) +
               (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                ((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
                    C103 * C126 - C115 * C119) *
                       C116 +
                   (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
                    C103 * C140 - C115 * C129) *
                       C47384) *
                      C47369 * C47508 +
                  ((C113 * C414 - C101 * C424 + C114 * C415 - C102 * C425 +
                    C115 * C416 - C103 * C426) *
                       C116 +
                   (C113 * C427 - C101 * C444 + C114 * C428 - C102 * C445 +
                    C115 * C429 - C103 * C446) *
                       C47384) *
                      C47369 * C47505 +
                  ((C101 * C430 - C113 * C417 + C102 * C431 - C114 * C418 +
                    C103 * C432 - C115 * C419) *
                       C116 +
                   (C101 * C447 - C113 * C433 + C102 * C448 - C114 * C434 +
                    C103 * C449 - C115 * C435) *
                       C47384) *
                      C47369 * C47496 +
                  ((C113 * C1844 - C101 * C1850 + C114 * C1845 - C102 * C1851 +
                    C115 * C1846 - C103 * C1852) *
                       C116 +
                   (C113 * C1853 - C101 * C1862 + C114 * C1854 - C102 * C1863 +
                    C115 * C1855 - C103 * C1864) *
                       C47384) *
                      C47369 * C47477) *
                     C2332 +
                 (((C113 * C261 - C101 * C271 + C114 * C262 - C102 * C272 +
                    C115 * C263 - C103 * C273) *
                       C116 +
                   (C113 * C274 - C101 * C291 + C114 * C275 - C102 * C292 +
                    C115 * C276 - C103 * C293) *
                       C47384) *
                      C47369 * C47508 +
                  ((C101 * C817 - C113 * C812 + C102 * C818 - C114 * C813 +
                    C103 * C819 - C115 * C814) *
                       C116 +
                   (C101 * C827 - C113 * C820 + C102 * C828 - C114 * C821 +
                    C103 * C829 - C115 * C822) *
                       C47384) *
                      C47369 * C47505 +
                  ((C113 * C1150 - C101 * C1159 + C114 * C1151 - C102 * C1160 +
                    C115 * C1152 - C103 * C1161) *
                       C116 +
                   (C113 * C1162 - C101 * C1177 + C114 * C1163 - C102 * C1178 +
                    C115 * C1164 - C103 * C1179) *
                       C47384) *
                      C47369 * C47496 +
                  ((C101 * C2225 - C113 * C2222 + C102 * C2226 - C114 * C2223 +
                    C103 * C2227 - C115 * C2224) *
                       C116 +
                   (C101 * C2231 - C113 * C2228 + C102 * C2232 - C114 * C2229 +
                    C103 * C2233 - C115 * C2230) *
                       C47384) *
                      C47369 * C47477) *
                     C47226) *
                C47135) /
                   (p * q * std::sqrt(p + q));
    d2ee[8] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                (((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
                     C103 * C126 - C115 * C119) *
                        C116 +
                    (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
                     C103 * C140 - C115 * C129) *
                        C47384) *
                       C47369 * C47264 +
                   ((C113 * C414 - C101 * C424 + C114 * C415 - C102 * C425 +
                     C115 * C416 - C103 * C426) *
                        C116 +
                    (C113 * C427 - C101 * C444 + C114 * C428 - C102 * C445 +
                     C115 * C429 - C103 * C446) *
                        C47384) *
                       C47369 * C47271 +
                   ((C101 * C430 - C113 * C417 + C102 * C431 - C114 * C418 +
                     C103 * C432 - C115 * C419) *
                        C116 +
                    (C101 * C447 - C113 * C433 + C102 * C448 - C114 * C434 +
                     C103 * C449 - C115 * C435) *
                        C47384) *
                       C47369 * C3602) *
                      C2332 +
                  (((C113 * C261 - C101 * C271 + C114 * C262 - C102 * C272 +
                     C115 * C263 - C103 * C273) *
                        C116 +
                    (C113 * C274 - C101 * C291 + C114 * C275 - C102 * C292 +
                     C115 * C276 - C103 * C293) *
                        C47384) *
                       C47369 * C47264 +
                   ((C101 * C817 - C113 * C812 + C102 * C818 - C114 * C813 +
                     C103 * C819 - C115 * C814) *
                        C116 +
                    (C101 * C827 - C113 * C820 + C102 * C828 - C114 * C821 +
                     C103 * C829 - C115 * C822) *
                        C47384) *
                       C47369 * C47271 +
                   ((C113 * C1150 - C101 * C1159 + C114 * C1151 - C102 * C1160 +
                     C115 * C1152 - C103 * C1161) *
                        C116 +
                    (C113 * C1162 - C101 * C1177 + C114 * C1163 - C102 * C1178 +
                     C115 * C1164 - C103 * C1179) *
                        C47384) *
                       C47369 * C3602) *
                      C47226) *
                     C47415 +
                 ((((C113 * C118 - C101 * C125 + C114 * C119 - C102 * C126 +
                     C115 * C120 - C103 * C130) *
                        C116 +
                    (C113 * C128 - C101 * C139 + C114 * C129 - C102 * C140 +
                     C115 * C131 - C103 * C141) *
                        C47384) *
                       C47369 * C47264 +
                   ((C101 * C425 - C113 * C415 + C102 * C426 - C114 * C416 +
                     C103 * C436 - C115 * C420) *
                        C116 +
                    (C101 * C445 - C113 * C428 + C102 * C446 - C114 * C429 +
                     C103 * C450 - C115 * C437) *
                        C47384) *
                       C47369 * C47271 +
                   ((C113 * C418 - C101 * C431 + C114 * C419 - C102 * C432 +
                     C115 * C421 - C103 * C438) *
                        C116 +
                    (C113 * C434 - C101 * C448 + C114 * C435 - C102 * C449 +
                     C115 * C439 - C103 * C451) *
                        C47384) *
                       C47369 * C3602) *
                      C2332 +
                  (((C101 * C272 - C113 * C262 + C102 * C273 - C114 * C263 +
                     C103 * C283 - C115 * C267) *
                        C116 +
                    (C101 * C292 - C113 * C275 + C102 * C293 - C114 * C276 +
                     C103 * C297 - C115 * C284) *
                        C47384) *
                       C47369 * C47264 +
                   ((C113 * C813 - C101 * C818 + C114 * C814 - C102 * C819 +
                     C115 * C815 - C103 * C823) *
                        C116 +
                    (C113 * C821 - C101 * C828 + C114 * C822 - C102 * C829 +
                     C115 * C824 - C103 * C830) *
                        C47384) *
                       C47369 * C47271 +
                   ((C101 * C1160 - C113 * C1151 + C102 * C1161 - C114 * C1152 +
                     C103 * C2015 - C115 * C2014) *
                        C116 +
                    (C101 * C1178 - C113 * C1163 + C102 * C1179 - C114 * C1164 +
                     C103 * C2017 - C115 * C2016) *
                        C47384) *
                       C47369 * C3602) *
                      C47226) *
                     C47146)) /
               (p * q * std::sqrt(p + q));
    d2ee[9] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                (((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
                     C103 * C126 - C115 * C119) *
                        C116 +
                    (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
                     C103 * C140 - C115 * C129) *
                        C47384) *
                       C47369 * C3094 +
                   ((C113 * C414 - C101 * C424 + C114 * C415 - C102 * C425 +
                     C115 * C416 - C103 * C426) *
                        C116 +
                    (C113 * C427 - C101 * C444 + C114 * C428 - C102 * C445 +
                     C115 * C429 - C103 * C446) *
                        C47384) *
                       C47369 * C47268) *
                      C2332 +
                  (((C113 * C261 - C101 * C271 + C114 * C262 - C102 * C272 +
                     C115 * C263 - C103 * C273) *
                        C116 +
                    (C113 * C274 - C101 * C291 + C114 * C275 - C102 * C292 +
                     C115 * C276 - C103 * C293) *
                        C47384) *
                       C47369 * C3094 +
                   ((C101 * C817 - C113 * C812 + C102 * C818 - C114 * C813 +
                     C103 * C819 - C115 * C814) *
                        C116 +
                    (C101 * C827 - C113 * C820 + C102 * C828 - C114 * C821 +
                     C103 * C829 - C115 * C822) *
                        C47384) *
                       C47369 * C47268) *
                      C47226) *
                     C47497 +
                 ((((C113 * C118 - C101 * C125 + C114 * C119 - C102 * C126 +
                     C115 * C120 - C103 * C130) *
                        C116 +
                    (C113 * C128 - C101 * C139 + C114 * C129 - C102 * C140 +
                     C115 * C131 - C103 * C141) *
                        C47384) *
                       C47369 * C3094 +
                   ((C101 * C425 - C113 * C415 + C102 * C426 - C114 * C416 +
                     C103 * C436 - C115 * C420) *
                        C116 +
                    (C101 * C445 - C113 * C428 + C102 * C446 - C114 * C429 +
                     C103 * C450 - C115 * C437) *
                        C47384) *
                       C47369 * C47268) *
                      C2332 +
                  (((C101 * C272 - C113 * C262 + C102 * C273 - C114 * C263 +
                     C103 * C283 - C115 * C267) *
                        C116 +
                    (C101 * C292 - C113 * C275 + C102 * C293 - C114 * C276 +
                     C103 * C297 - C115 * C284) *
                        C47384) *
                       C47369 * C3094 +
                   ((C113 * C813 - C101 * C818 + C114 * C814 - C102 * C819 +
                     C115 * C815 - C103 * C823) *
                        C116 +
                    (C113 * C821 - C101 * C828 + C114 * C822 - C102 * C829 +
                     C115 * C824 - C103 * C830) *
                        C47384) *
                       C47369 * C47268) *
                      C47226) *
                     C47484 +
                 ((((C101 * C126 - C113 * C119 + C102 * C130 - C114 * C120 +
                     C103 * C132 - C115 * C121) *
                        C116 +
                    (C101 * C140 - C113 * C129 + C102 * C141 - C114 * C131 +
                     C103 * C142 - C115 * C133) *
                        C47384) *
                       C47369 * C3094 +
                   ((C113 * C416 - C101 * C426 + C114 * C420 - C102 * C436 +
                     C115 * C422 - C103 * C440) *
                        C116 +
                    (C113 * C429 - C101 * C446 + C114 * C437 - C102 * C450 +
                     C115 * C441 - C103 * C452) *
                        C47384) *
                       C47369 * C47268) *
                      C2332 +
                  (((C113 * C263 - C101 * C273 + C114 * C267 - C102 * C283 +
                     C115 * C269 - C103 * C287) *
                        C116 +
                    (C113 * C276 - C101 * C293 + C114 * C284 - C102 * C297 +
                     C115 * C288 - C103 * C299) *
                        C47384) *
                       C47369 * C3094 +
                   ((C101 * C819 - C113 * C814 + C102 * C823 - C114 * C815 +
                     C103 * C825 - C115 * C816) *
                        C116 +
                    (C101 * C829 - C113 * C822 + C102 * C830 - C114 * C824 +
                     C103 * C831 - C115 * C826) *
                        C47384) *
                       C47369 * C47268) *
                      C47226) *
                     C47455)) /
                   (p * q * std::sqrt(p + q)) -
               (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                ((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
                    C103 * C126 - C115 * C119) *
                       C116 +
                   (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
                    C103 * C140 - C115 * C129) *
                       C47384) *
                      C47369 * C3094 +
                  ((C113 * C414 - C101 * C424 + C114 * C415 - C102 * C425 +
                    C115 * C416 - C103 * C426) *
                       C116 +
                   (C113 * C427 - C101 * C444 + C114 * C428 - C102 * C445 +
                    C115 * C429 - C103 * C446) *
                       C47384) *
                      C47369 * C47268) *
                     C47507 +
                 (((C113 * C261 - C101 * C271 + C114 * C262 - C102 * C272 +
                    C115 * C263 - C103 * C273) *
                       C116 +
                   (C113 * C274 - C101 * C291 + C114 * C275 - C102 * C292 +
                    C115 * C276 - C103 * C293) *
                       C47384) *
                      C47369 * C3094 +
                  ((C101 * C817 - C113 * C812 + C102 * C818 - C114 * C813 +
                    C103 * C819 - C115 * C814) *
                       C116 +
                   (C101 * C827 - C113 * C820 + C102 * C828 - C114 * C821 +
                    C103 * C829 - C115 * C822) *
                       C47384) *
                      C47369 * C47268) *
                     C47503 +
                 (((C101 * C277 - C113 * C264 + C102 * C278 - C114 * C265 +
                    C103 * C279 - C115 * C266) *
                       C116 +
                   (C101 * C294 - C113 * C280 + C102 * C295 - C114 * C281 +
                    C103 * C296 - C115 * C282) *
                       C47384) *
                      C47369 * C3094 +
                  ((C113 * C1153 - C101 * C1165 + C114 * C1154 - C102 * C1166 +
                    C115 * C1155 - C103 * C1167) *
                       C116 +
                   (C113 * C1168 - C101 * C1180 + C114 * C1169 - C102 * C1181 +
                    C115 * C1170 - C103 * C1182) *
                       C47384) *
                      C47369 * C47268) *
                     C47493 +
                 (((C113 * C1016 - C101 * C1022 + C114 * C1017 - C102 * C1023 +
                    C115 * C1018 - C103 * C1024) *
                       C116 +
                   (C113 * C1025 - C101 * C1034 + C114 * C1026 - C102 * C1035 +
                    C115 * C1027 - C103 * C1036) *
                       C47384) *
                      C47369 * C3094 +
                  ((C101 * C1545 - C113 * C1542 + C102 * C1546 - C114 * C1543 +
                    C103 * C1547 - C115 * C1544) *
                       C116 +
                   (C101 * C1551 - C113 * C1548 + C102 * C1552 - C114 * C1549 +
                    C103 * C1553 - C115 * C1550) *
                       C47384) *
                      C47369 * C47268) *
                     C47471) *
                C47135) /
                   (p * q * std::sqrt(p + q));
    d2ee[10] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 ((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
                     C103 * C126 - C115 * C119) *
                        C116 +
                    (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
                     C103 * C140 - C115 * C129) *
                        C47384) *
                       C47369 * C47181 * C1284 +
                   ((C113 * C261 - C101 * C271 + C114 * C262 - C102 * C272 +
                     C115 * C263 - C103 * C273) *
                        C116 +
                    (C113 * C274 - C101 * C291 + C114 * C275 - C102 * C292 +
                     C115 * C276 - C103 * C293) *
                        C47384) *
                       C47369 * C47181 * C1285 +
                   ((C101 * C277 - C113 * C264 + C102 * C278 - C114 * C265 +
                     C103 * C279 - C115 * C266) *
                        C116 +
                    (C101 * C294 - C113 * C280 + C102 * C295 - C114 * C281 +
                     C103 * C296 - C115 * C282) *
                        C47384) *
                       C47369 * C47181 * C1286 +
                   ((C113 * C1016 - C101 * C1022 + C114 * C1017 - C102 * C1023 +
                     C115 * C1018 - C103 * C1024) *
                        C116 +
                    (C113 * C1025 - C101 * C1034 + C114 * C1026 - C102 * C1035 +
                     C115 * C1027 - C103 * C1036) *
                        C47384) *
                       C47369 * C47181 * C47471) *
                      C47415 +
                  (((C113 * C118 - C101 * C125 + C114 * C119 - C102 * C126 +
                     C115 * C120 - C103 * C130) *
                        C116 +
                    (C113 * C128 - C101 * C139 + C114 * C129 - C102 * C140 +
                     C115 * C131 - C103 * C141) *
                        C47384) *
                       C47369 * C47181 * C1284 +
                   ((C101 * C272 - C113 * C262 + C102 * C273 - C114 * C263 +
                     C103 * C283 - C115 * C267) *
                        C116 +
                    (C101 * C292 - C113 * C275 + C102 * C293 - C114 * C276 +
                     C103 * C297 - C115 * C284) *
                        C47384) *
                       C47369 * C47181 * C1285 +
                   ((C113 * C265 - C101 * C278 + C114 * C266 - C102 * C279 +
                     C115 * C268 - C103 * C285) *
                        C116 +
                    (C113 * C281 - C101 * C295 + C114 * C282 - C102 * C296 +
                     C115 * C286 - C103 * C298) *
                        C47384) *
                       C47369 * C47181 * C1286 +
                   ((C101 * C1023 - C113 * C1017 + C102 * C1024 - C114 * C1018 +
                     C103 * C1291 - C115 * C1290) *
                        C116 +
                    (C101 * C1035 - C113 * C1026 + C102 * C1036 - C114 * C1027 +
                     C103 * C1293 - C115 * C1292) *
                        C47384) *
                       C47369 * C47181 * C47471) *
                      C47146)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 ((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
                     C103 * C126 - C115 * C119) *
                        C116 +
                    (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
                     C103 * C140 - C115 * C129) *
                        C47384) *
                       C47369 * C47181 * C47429 +
                   ((C113 * C261 - C101 * C271 + C114 * C262 - C102 * C272 +
                     C115 * C263 - C103 * C273) *
                        C116 +
                    (C113 * C274 - C101 * C291 + C114 * C275 - C102 * C292 +
                     C115 * C276 - C103 * C293) *
                        C47384) *
                       C47369 * C47181 * C47226) *
                      C554 +
                  (((C113 * C118 - C101 * C125 + C114 * C119 - C102 * C126 +
                     C115 * C120 - C103 * C130) *
                        C116 +
                    (C113 * C128 - C101 * C139 + C114 * C129 - C102 * C140 +
                     C115 * C131 - C103 * C141) *
                        C47384) *
                       C47369 * C47181 * C47429 +
                   ((C101 * C272 - C113 * C262 + C102 * C273 - C114 * C263 +
                     C103 * C283 - C115 * C267) *
                        C116 +
                    (C101 * C292 - C113 * C275 + C102 * C293 - C114 * C276 +
                     C103 * C297 - C115 * C284) *
                        C47384) *
                       C47369 * C47181 * C47226) *
                      C555 +
                  (((C101 * C126 - C113 * C119 + C102 * C130 - C114 * C120 +
                     C103 * C132 - C115 * C121) *
                        C116 +
                    (C101 * C140 - C113 * C129 + C102 * C141 - C114 * C131 +
                     C103 * C142 - C115 * C133) *
                        C47384) *
                       C47369 * C47181 * C47429 +
                   ((C113 * C263 - C101 * C273 + C114 * C267 - C102 * C283 +
                     C115 * C269 - C103 * C287) *
                        C116 +
                    (C113 * C276 - C101 * C293 + C114 * C284 - C102 * C297 +
                     C115 * C288 - C103 * C299) *
                        C47384) *
                       C47369 * C47181 * C47226) *
                      C556 +
                  (((C113 * C120 - C101 * C130 + C114 * C121 - C102 * C132 +
                     C115 * C122 - C103 * C134) *
                        C116 +
                    (C113 * C131 - C101 * C141 + C114 * C133 - C102 * C142 +
                     C115 * C135 - C103 * C143) *
                        C47384) *
                       C47369 * C47181 * C47429 +
                   ((C101 * C283 - C113 * C267 + C102 * C287 - C114 * C269 +
                     C103 * C559 - C115 * C558) *
                        C116 +
                    (C101 * C297 - C113 * C284 + C102 * C299 - C114 * C288 +
                     C103 * C561 - C115 * C560) *
                        C47384) *
                       C47369 * C47181 * C47226) *
                      C47465)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                 (((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
                      C103 * C126 - C115 * C119) *
                         C116 +
                     (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
                      C103 * C140 - C115 * C129) *
                         C47384) *
                        C47369 * C1664 +
                    ((C113 * C414 - C101 * C424 + C114 * C415 - C102 * C425 +
                      C115 * C416 - C103 * C426) *
                         C116 +
                     (C113 * C427 - C101 * C444 + C114 * C428 - C102 * C445 +
                      C115 * C429 - C103 * C446) *
                         C47384) *
                        C47369 * C1665 +
                    ((C101 * C430 - C113 * C417 + C102 * C431 - C114 * C418 +
                      C103 * C432 - C115 * C419) *
                         C116 +
                     (C101 * C447 - C113 * C433 + C102 * C448 - C114 * C434 +
                      C103 * C449 - C115 * C435) *
                         C47384) *
                        C47369 * C47464) *
                       C47429 +
                   (((C113 * C261 - C101 * C271 + C114 * C262 - C102 * C272 +
                      C115 * C263 - C103 * C273) *
                         C116 +
                     (C113 * C274 - C101 * C291 + C114 * C275 - C102 * C292 +
                      C115 * C276 - C103 * C293) *
                         C47384) *
                        C47369 * C1664 +
                    ((C101 * C817 - C113 * C812 + C102 * C818 - C114 * C813 +
                      C103 * C819 - C115 * C814) *
                         C116 +
                     (C101 * C827 - C113 * C820 + C102 * C828 - C114 * C821 +
                      C103 * C829 - C115 * C822) *
                         C47384) *
                        C47369 * C1665 +
                    ((C113 * C1150 - C101 * C1159 + C114 * C1151 -
                      C102 * C1160 + C115 * C1152 - C103 * C1161) *
                         C116 +
                     (C113 * C1162 - C101 * C1177 + C114 * C1163 -
                      C102 * C1178 + C115 * C1164 - C103 * C1179) *
                         C47384) *
                        C47369 * C47464) *
                       C47226) *
                      C47415 +
                  ((((C113 * C118 - C101 * C125 + C114 * C119 - C102 * C126 +
                      C115 * C120 - C103 * C130) *
                         C116 +
                     (C113 * C128 - C101 * C139 + C114 * C129 - C102 * C140 +
                      C115 * C131 - C103 * C141) *
                         C47384) *
                        C47369 * C1664 +
                    ((C101 * C425 - C113 * C415 + C102 * C426 - C114 * C416 +
                      C103 * C436 - C115 * C420) *
                         C116 +
                     (C101 * C445 - C113 * C428 + C102 * C446 - C114 * C429 +
                      C103 * C450 - C115 * C437) *
                         C47384) *
                        C47369 * C1665 +
                    ((C113 * C418 - C101 * C431 + C114 * C419 - C102 * C432 +
                      C115 * C421 - C103 * C438) *
                         C116 +
                     (C113 * C434 - C101 * C448 + C114 * C435 - C102 * C449 +
                      C115 * C439 - C103 * C451) *
                         C47384) *
                        C47369 * C47464) *
                       C47429 +
                   (((C101 * C272 - C113 * C262 + C102 * C273 - C114 * C263 +
                      C103 * C283 - C115 * C267) *
                         C116 +
                     (C101 * C292 - C113 * C275 + C102 * C293 - C114 * C276 +
                      C103 * C297 - C115 * C284) *
                         C47384) *
                        C47369 * C1664 +
                    ((C113 * C813 - C101 * C818 + C114 * C814 - C102 * C819 +
                      C115 * C815 - C103 * C823) *
                         C116 +
                     (C113 * C821 - C101 * C828 + C114 * C822 - C102 * C829 +
                      C115 * C824 - C103 * C830) *
                         C47384) *
                        C47369 * C1665 +
                    ((C101 * C1160 - C113 * C1151 + C102 * C1161 -
                      C114 * C1152 + C103 * C2015 - C115 * C2014) *
                         C116 +
                     (C101 * C1178 - C113 * C1163 + C102 * C1179 -
                      C114 * C1164 + C103 * C2017 - C115 * C2016) *
                         C47384) *
                        C47369 * C47464) *
                       C47226) *
                      C47146)) /
                    (p * q * std::sqrt(p + q));
    d2ee[11] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 ((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
                     C103 * C126 - C115 * C119) *
                        C116 +
                    (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
                     C103 * C140 - C115 * C129) *
                        C47384) *
                       C47369 * C47430 +
                   ((C113 * C414 - C101 * C424 + C114 * C415 - C102 * C425 +
                     C115 * C416 - C103 * C426) *
                        C116 +
                    (C113 * C427 - C101 * C444 + C114 * C428 - C102 * C445 +
                     C115 * C429 - C103 * C446) *
                        C47384) *
                       C47369 * C47268) *
                      C1284 +
                  (((C113 * C261 - C101 * C271 + C114 * C262 - C102 * C272 +
                     C115 * C263 - C103 * C273) *
                        C116 +
                    (C113 * C274 - C101 * C291 + C114 * C275 - C102 * C292 +
                     C115 * C276 - C103 * C293) *
                        C47384) *
                       C47369 * C47430 +
                   ((C101 * C817 - C113 * C812 + C102 * C818 - C114 * C813 +
                     C103 * C819 - C115 * C814) *
                        C116 +
                    (C101 * C827 - C113 * C820 + C102 * C828 - C114 * C821 +
                     C103 * C829 - C115 * C822) *
                        C47384) *
                       C47369 * C47268) *
                      C1285 +
                  (((C101 * C277 - C113 * C264 + C102 * C278 - C114 * C265 +
                     C103 * C279 - C115 * C266) *
                        C116 +
                    (C101 * C294 - C113 * C280 + C102 * C295 - C114 * C281 +
                     C103 * C296 - C115 * C282) *
                        C47384) *
                       C47369 * C47430 +
                   ((C113 * C1153 - C101 * C1165 + C114 * C1154 - C102 * C1166 +
                     C115 * C1155 - C103 * C1167) *
                        C116 +
                    (C113 * C1168 - C101 * C1180 + C114 * C1169 - C102 * C1181 +
                     C115 * C1170 - C103 * C1182) *
                        C47384) *
                       C47369 * C47268) *
                      C1286 +
                  (((C113 * C1016 - C101 * C1022 + C114 * C1017 - C102 * C1023 +
                     C115 * C1018 - C103 * C1024) *
                        C116 +
                    (C113 * C1025 - C101 * C1034 + C114 * C1026 - C102 * C1035 +
                     C115 * C1027 - C103 * C1036) *
                        C47384) *
                       C47369 * C47430 +
                   ((C101 * C1545 - C113 * C1542 + C102 * C1546 - C114 * C1543 +
                     C103 * C1547 - C115 * C1544) *
                        C116 +
                    (C101 * C1551 - C113 * C1548 + C102 * C1552 - C114 * C1549 +
                     C103 * C1553 - C115 * C1550) *
                        C47384) *
                       C47369 * C47268) *
                      C47471) *
                 C47135) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 (((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
                      C103 * C126 - C115 * C119) *
                         C116 +
                     (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
                      C103 * C140 - C115 * C129) *
                         C47384) *
                        C47369 * C47430 +
                    ((C113 * C414 - C101 * C424 + C114 * C415 - C102 * C425 +
                      C115 * C416 - C103 * C426) *
                         C116 +
                     (C113 * C427 - C101 * C444 + C114 * C428 - C102 * C445 +
                      C115 * C429 - C103 * C446) *
                         C47384) *
                        C47369 * C47268) *
                       C47429 +
                   (((C113 * C261 - C101 * C271 + C114 * C262 - C102 * C272 +
                      C115 * C263 - C103 * C273) *
                         C116 +
                     (C113 * C274 - C101 * C291 + C114 * C275 - C102 * C292 +
                      C115 * C276 - C103 * C293) *
                         C47384) *
                        C47369 * C47430 +
                    ((C101 * C817 - C113 * C812 + C102 * C818 - C114 * C813 +
                      C103 * C819 - C115 * C814) *
                         C116 +
                     (C101 * C827 - C113 * C820 + C102 * C828 - C114 * C821 +
                      C103 * C829 - C115 * C822) *
                         C47384) *
                        C47369 * C47268) *
                       C47226) *
                      C258 +
                  ((((C113 * C118 - C101 * C125 + C114 * C119 - C102 * C126 +
                      C115 * C120 - C103 * C130) *
                         C116 +
                     (C113 * C128 - C101 * C139 + C114 * C129 - C102 * C140 +
                      C115 * C131 - C103 * C141) *
                         C47384) *
                        C47369 * C47430 +
                    ((C101 * C425 - C113 * C415 + C102 * C426 - C114 * C416 +
                      C103 * C436 - C115 * C420) *
                         C116 +
                     (C101 * C445 - C113 * C428 + C102 * C446 - C114 * C429 +
                      C103 * C450 - C115 * C437) *
                         C47384) *
                        C47369 * C47268) *
                       C47429 +
                   (((C101 * C272 - C113 * C262 + C102 * C273 - C114 * C263 +
                      C103 * C283 - C115 * C267) *
                         C116 +
                     (C101 * C292 - C113 * C275 + C102 * C293 - C114 * C276 +
                      C103 * C297 - C115 * C284) *
                         C47384) *
                        C47369 * C47430 +
                    ((C113 * C813 - C101 * C818 + C114 * C814 - C102 * C819 +
                      C115 * C815 - C103 * C823) *
                         C116 +
                     (C113 * C821 - C101 * C828 + C114 * C822 - C102 * C829 +
                      C115 * C824 - C103 * C830) *
                         C47384) *
                        C47369 * C47268) *
                       C47226) *
                      C259 +
                  ((((C101 * C126 - C113 * C119 + C102 * C130 - C114 * C120 +
                      C103 * C132 - C115 * C121) *
                         C116 +
                     (C101 * C140 - C113 * C129 + C102 * C141 - C114 * C131 +
                      C103 * C142 - C115 * C133) *
                         C47384) *
                        C47369 * C47430 +
                    ((C113 * C416 - C101 * C426 + C114 * C420 - C102 * C436 +
                      C115 * C422 - C103 * C440) *
                         C116 +
                     (C113 * C429 - C101 * C446 + C114 * C437 - C102 * C450 +
                      C115 * C441 - C103 * C452) *
                         C47384) *
                        C47369 * C47268) *
                       C47429 +
                   (((C113 * C263 - C101 * C273 + C114 * C267 - C102 * C283 +
                      C115 * C269 - C103 * C287) *
                         C116 +
                     (C113 * C276 - C101 * C293 + C114 * C284 - C102 * C297 +
                      C115 * C288 - C103 * C299) *
                         C47384) *
                        C47369 * C47430 +
                    ((C101 * C819 - C113 * C814 + C102 * C823 - C114 * C815 +
                      C103 * C825 - C115 * C816) *
                         C116 +
                     (C101 * C829 - C113 * C822 + C102 * C830 - C114 * C824 +
                      C103 * C831 - C115 * C826) *
                         C47384) *
                        C47369 * C47268) *
                       C47226) *
                      C47455)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                 ((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
                     C103 * C126 - C115 * C119) *
                        C116 +
                    (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
                     C103 * C140 - C115 * C129) *
                        C47384) *
                       C47369 * C2116 +
                   ((C113 * C414 - C101 * C424 + C114 * C415 - C102 * C425 +
                     C115 * C416 - C103 * C426) *
                        C116 +
                    (C113 * C427 - C101 * C444 + C114 * C428 - C102 * C445 +
                     C115 * C429 - C103 * C446) *
                        C47384) *
                       C47369 * C2117 +
                   ((C101 * C430 - C113 * C417 + C102 * C431 - C114 * C418 +
                     C103 * C432 - C115 * C419) *
                        C116 +
                    (C101 * C447 - C113 * C433 + C102 * C448 - C114 * C434 +
                     C103 * C449 - C115 * C435) *
                        C47384) *
                       C47369 * C2118 +
                   ((C113 * C1844 - C101 * C1850 + C114 * C1845 - C102 * C1851 +
                     C115 * C1846 - C103 * C1852) *
                        C116 +
                    (C113 * C1853 - C101 * C1862 + C114 * C1854 - C102 * C1863 +
                     C115 * C1855 - C103 * C1864) *
                        C47384) *
                       C47369 * C47477) *
                      C47429 +
                  (((C113 * C261 - C101 * C271 + C114 * C262 - C102 * C272 +
                     C115 * C263 - C103 * C273) *
                        C116 +
                    (C113 * C274 - C101 * C291 + C114 * C275 - C102 * C292 +
                     C115 * C276 - C103 * C293) *
                        C47384) *
                       C47369 * C2116 +
                   ((C101 * C817 - C113 * C812 + C102 * C818 - C114 * C813 +
                     C103 * C819 - C115 * C814) *
                        C116 +
                    (C101 * C827 - C113 * C820 + C102 * C828 - C114 * C821 +
                     C103 * C829 - C115 * C822) *
                        C47384) *
                       C47369 * C2117 +
                   ((C113 * C1150 - C101 * C1159 + C114 * C1151 - C102 * C1160 +
                     C115 * C1152 - C103 * C1161) *
                        C116 +
                    (C113 * C1162 - C101 * C1177 + C114 * C1163 - C102 * C1178 +
                     C115 * C1164 - C103 * C1179) *
                        C47384) *
                       C47369 * C2118 +
                   ((C101 * C2225 - C113 * C2222 + C102 * C2226 - C114 * C2223 +
                     C103 * C2227 - C115 * C2224) *
                        C116 +
                    (C101 * C2231 - C113 * C2228 + C102 * C2232 - C114 * C2229 +
                     C103 * C2233 - C115 * C2230) *
                        C47384) *
                       C47369 * C47477) *
                      C47226) *
                 C47135) /
                    (p * q * std::sqrt(p + q));
    d2ee[12] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
                C103 * C126 - C115 * C119) *
                   C116 +
               (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
                C103 * C140 - C115 * C129) *
                   C47384) *
                  C47369 * C47181 * C47163 * C108 +
              ((C113 * C118 - C101 * C125 + C114 * C119 - C102 * C126 +
                C115 * C120 - C103 * C130) *
                   C116 +
               (C113 * C128 - C101 * C139 + C114 * C129 - C102 * C140 +
                C115 * C131 - C103 * C141) *
                   C47384) *
                  C47369 * C47181 * C47163 * C109 +
              ((C101 * C126 - C113 * C119 + C102 * C130 - C114 * C120 +
                C103 * C132 - C115 * C121) *
                   C116 +
               (C101 * C140 - C113 * C129 + C102 * C141 - C114 * C131 +
                C103 * C142 - C115 * C133) *
                   C47384) *
                  C47369 * C47181 * C47163 * C110 +
              ((C113 * C120 - C101 * C130 + C114 * C121 - C102 * C132 +
                C115 * C122 - C103 * C134) *
                   C116 +
               (C113 * C131 - C101 * C141 + C114 * C133 - C102 * C142 +
                C115 * C135 - C103 * C143) *
                   C47384) *
                  C47369 * C47181 * C47163 * C111 +
              ((C101 * C132 - C113 * C121 + C102 * C134 - C114 * C122 +
                C103 * C136 - C115 * C123) *
                   C116 +
               (C101 * C142 - C113 * C133 + C102 * C143 - C114 * C135 +
                C103 * C144 - C115 * C137) *
                   C47384) *
                  C47369 * C47181 * C47163 * C112) +
         0.5 * std::pow(Pi, 2.5) *
             ((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
                 C103 * C126 - C115 * C119) *
                    C116 +
                (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
                 C103 * C140 - C115 * C129) *
                    C47384) *
                   C47369 * C47181 * C47500 +
               ((C113 * C261 - C101 * C271 + C114 * C262 - C102 * C272 +
                 C115 * C263 - C103 * C273) *
                    C116 +
                (C113 * C274 - C101 * C291 + C114 * C275 - C102 * C292 +
                 C115 * C276 - C103 * C293) *
                    C47384) *
                   C47369 * C47181 * C47488 +
               ((C101 * C277 - C113 * C264 + C102 * C278 - C114 * C265 +
                 C103 * C279 - C115 * C266) *
                    C116 +
                (C101 * C294 - C113 * C280 + C102 * C295 - C114 * C281 +
                 C103 * C296 - C115 * C282) *
                    C47384) *
                   C47369 * C47181 * C47461) *
                  C258 +
              (((C113 * C118 - C101 * C125 + C114 * C119 - C102 * C126 +
                 C115 * C120 - C103 * C130) *
                    C116 +
                (C113 * C128 - C101 * C139 + C114 * C129 - C102 * C140 +
                 C115 * C131 - C103 * C141) *
                    C47384) *
                   C47369 * C47181 * C47500 +
               ((C101 * C272 - C113 * C262 + C102 * C273 - C114 * C263 +
                 C103 * C283 - C115 * C267) *
                    C116 +
                (C101 * C292 - C113 * C275 + C102 * C293 - C114 * C276 +
                 C103 * C297 - C115 * C284) *
                    C47384) *
                   C47369 * C47181 * C47488 +
               ((C113 * C265 - C101 * C278 + C114 * C266 - C102 * C279 +
                 C115 * C268 - C103 * C285) *
                    C116 +
                (C113 * C281 - C101 * C295 + C114 * C282 - C102 * C296 +
                 C115 * C286 - C103 * C298) *
                    C47384) *
                   C47369 * C47181 * C47461) *
                  C259 +
              (((C101 * C126 - C113 * C119 + C102 * C130 - C114 * C120 +
                 C103 * C132 - C115 * C121) *
                    C116 +
                (C101 * C140 - C113 * C129 + C102 * C141 - C114 * C131 +
                 C103 * C142 - C115 * C133) *
                    C47384) *
                   C47369 * C47181 * C47500 +
               ((C113 * C263 - C101 * C273 + C114 * C267 - C102 * C283 +
                 C115 * C269 - C103 * C287) *
                    C116 +
                (C113 * C276 - C101 * C293 + C114 * C284 - C102 * C297 +
                 C115 * C288 - C103 * C299) *
                    C47384) *
                   C47369 * C47181 * C47488 +
               ((C101 * C279 - C113 * C266 + C102 * C285 - C114 * C268 +
                 C103 * C289 - C115 * C270) *
                    C116 +
                (C101 * C296 - C113 * C282 + C102 * C298 - C114 * C286 +
                 C103 * C300 - C115 * C290) *
                    C47384) *
                   C47369 * C47181 * C47461) *
                  C47455)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) * ((((C101 * C124 - C113 * C117 + C102 * C125 -
                                 C114 * C118 + C103 * C126 - C115 * C119) *
                                    C116 +
                                (C101 * C138 - C113 * C127 + C102 * C139 -
                                 C114 * C128 + C103 * C140 - C115 * C129) *
                                    C47384) *
                                   C47369 * C47501 +
                               ((C113 * C414 - C101 * C424 + C114 * C415 -
                                 C102 * C425 + C115 * C416 - C103 * C426) *
                                    C116 +
                                (C113 * C427 - C101 * C444 + C114 * C428 -
                                 C102 * C445 + C115 * C429 - C103 * C446) *
                                    C47384) *
                                   C47369 * C47490 +
                               ((C101 * C430 - C113 * C417 + C102 * C431 -
                                 C114 * C418 + C103 * C432 - C115 * C419) *
                                    C116 +
                                (C101 * C447 - C113 * C433 + C102 * C448 -
                                 C114 * C434 + C103 * C449 - C115 * C435) *
                                    C47384) *
                                   C47369 * C47464) *
                                  C47163 * C258 +
                              (((C113 * C118 - C101 * C125 + C114 * C119 -
                                 C102 * C126 + C115 * C120 - C103 * C130) *
                                    C116 +
                                (C113 * C128 - C101 * C139 + C114 * C129 -
                                 C102 * C140 + C115 * C131 - C103 * C141) *
                                    C47384) *
                                   C47369 * C47501 +
                               ((C101 * C425 - C113 * C415 + C102 * C426 -
                                 C114 * C416 + C103 * C436 - C115 * C420) *
                                    C116 +
                                (C101 * C445 - C113 * C428 + C102 * C446 -
                                 C114 * C429 + C103 * C450 - C115 * C437) *
                                    C47384) *
                                   C47369 * C47490 +
                               ((C113 * C418 - C101 * C431 + C114 * C419 -
                                 C102 * C432 + C115 * C421 - C103 * C438) *
                                    C116 +
                                (C113 * C434 - C101 * C448 + C114 * C435 -
                                 C102 * C449 + C115 * C439 - C103 * C451) *
                                    C47384) *
                                   C47369 * C47464) *
                                  C47163 * C259 +
                              (((C101 * C126 - C113 * C119 + C102 * C130 -
                                 C114 * C120 + C103 * C132 - C115 * C121) *
                                    C116 +
                                (C101 * C140 - C113 * C129 + C102 * C141 -
                                 C114 * C131 + C103 * C142 - C115 * C133) *
                                    C47384) *
                                   C47369 * C47501 +
                               ((C113 * C416 - C101 * C426 + C114 * C420 -
                                 C102 * C436 + C115 * C422 - C103 * C440) *
                                    C116 +
                                (C113 * C429 - C101 * C446 + C114 * C437 -
                                 C102 * C450 + C115 * C441 - C103 * C452) *
                                    C47384) *
                                   C47369 * C47490 +
                               ((C101 * C432 - C113 * C419 + C102 * C438 -
                                 C114 * C421 + C103 * C442 - C115 * C423) *
                                    C116 +
                                (C101 * C449 - C113 * C435 + C102 * C451 -
                                 C114 * C439 + C103 * C453 - C115 * C443) *
                                    C47384) *
                                   C47369 * C47464) *
                                  C47163 * C47455)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
             C103 * C126 - C115 * C119) *
                C116 +
            (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
             C103 * C140 - C115 * C129) *
                C47384) *
               C47369 * C47181 * C942 +
           ((C113 * C261 - C101 * C271 + C114 * C262 - C102 * C272 +
             C115 * C263 - C103 * C273) *
                C116 +
            (C113 * C274 - C101 * C291 + C114 * C275 - C102 * C292 +
             C115 * C276 - C103 * C293) *
                C47384) *
               C47369 * C47181 * C943 +
           ((C101 * C277 - C113 * C264 + C102 * C278 - C114 * C265 +
             C103 * C279 - C115 * C266) *
                C116 +
            (C101 * C294 - C113 * C280 + C102 * C295 - C114 * C281 +
             C103 * C296 - C115 * C282) *
                C47384) *
               C47369 * C47181 * C47461) *
              C47497 +
          (((C113 * C118 - C101 * C125 + C114 * C119 - C102 * C126 +
             C115 * C120 - C103 * C130) *
                C116 +
            (C113 * C128 - C101 * C139 + C114 * C129 - C102 * C140 +
             C115 * C131 - C103 * C141) *
                C47384) *
               C47369 * C47181 * C942 +
           ((C101 * C272 - C113 * C262 + C102 * C273 - C114 * C263 +
             C103 * C283 - C115 * C267) *
                C116 +
            (C101 * C292 - C113 * C275 + C102 * C293 - C114 * C276 +
             C103 * C297 - C115 * C284) *
                C47384) *
               C47369 * C47181 * C943 +
           ((C113 * C265 - C101 * C278 + C114 * C266 - C102 * C279 +
             C115 * C268 - C103 * C285) *
                C116 +
            (C113 * C281 - C101 * C295 + C114 * C282 - C102 * C296 +
             C115 * C286 - C103 * C298) *
                C47384) *
               C47369 * C47181 * C47461) *
              C47484 +
          (((C101 * C126 - C113 * C119 + C102 * C130 - C114 * C120 +
             C103 * C132 - C115 * C121) *
                C116 +
            (C101 * C140 - C113 * C129 + C102 * C141 - C114 * C131 +
             C103 * C142 - C115 * C133) *
                C47384) *
               C47369 * C47181 * C942 +
           ((C113 * C263 - C101 * C273 + C114 * C267 - C102 * C283 +
             C115 * C269 - C103 * C287) *
                C116 +
            (C113 * C276 - C101 * C293 + C114 * C284 - C102 * C297 +
             C115 * C288 - C103 * C299) *
                C47384) *
               C47369 * C47181 * C943 +
           ((C101 * C279 - C113 * C266 + C102 * C285 - C114 * C268 +
             C103 * C289 - C115 * C270) *
                C116 +
            (C101 * C296 - C113 * C282 + C102 * C298 - C114 * C286 +
             C103 * C300 - C115 * C290) *
                C47384) *
               C47369 * C47181 * C47461) *
              C47455)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
            C103 * C126 - C115 * C119) *
               C116 +
           (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
            C103 * C140 - C115 * C129) *
               C47384) *
              C47369 * C47181 * C1010 +
          ((C113 * C261 - C101 * C271 + C114 * C262 - C102 * C272 +
            C115 * C263 - C103 * C273) *
               C116 +
           (C113 * C274 - C101 * C291 + C114 * C275 - C102 * C292 +
            C115 * C276 - C103 * C293) *
               C47384) *
              C47369 * C47181 * C1011 +
          ((C101 * C277 - C113 * C264 + C102 * C278 - C114 * C265 +
            C103 * C279 - C115 * C266) *
               C116 +
           (C101 * C294 - C113 * C280 + C102 * C295 - C114 * C281 +
            C103 * C296 - C115 * C282) *
               C47384) *
              C47369 * C47181 * C1012 +
          ((C113 * C1016 - C101 * C1022 + C114 * C1017 - C102 * C1023 +
            C115 * C1018 - C103 * C1024) *
               C116 +
           (C113 * C1025 - C101 * C1034 + C114 * C1026 - C102 * C1035 +
            C115 * C1027 - C103 * C1036) *
               C47384) *
              C47369 * C47181 * C1013 +
          ((C101 * C1028 - C113 * C1019 + C102 * C1029 - C114 * C1020 +
            C103 * C1030 - C115 * C1021) *
               C116 +
           (C101 * C1037 - C113 * C1031 + C102 * C1038 - C114 * C1032 +
            C103 * C1039 - C115 * C1033) *
               C47384) *
              C47369 * C47181 * C1014) *
         C47135) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
             C103 * C126 - C115 * C119) *
                C116 +
            (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
             C103 * C140 - C115 * C129) *
                C47384) *
               C47369 * C47501 +
           ((C113 * C414 - C101 * C424 + C114 * C415 - C102 * C425 +
             C115 * C416 - C103 * C426) *
                C116 +
            (C113 * C427 - C101 * C444 + C114 * C428 - C102 * C445 +
             C115 * C429 - C103 * C446) *
                C47384) *
               C47369 * C47490 +
           ((C101 * C430 - C113 * C417 + C102 * C431 - C114 * C418 +
             C103 * C432 - C115 * C419) *
                C116 +
            (C101 * C447 - C113 * C433 + C102 * C448 - C114 * C434 +
             C103 * C449 - C115 * C435) *
                C47384) *
               C47369 * C47464) *
              C942 +
          (((C113 * C261 - C101 * C271 + C114 * C262 - C102 * C272 +
             C115 * C263 - C103 * C273) *
                C116 +
            (C113 * C274 - C101 * C291 + C114 * C275 - C102 * C292 +
             C115 * C276 - C103 * C293) *
                C47384) *
               C47369 * C47501 +
           ((C101 * C817 - C113 * C812 + C102 * C818 - C114 * C813 +
             C103 * C819 - C115 * C814) *
                C116 +
            (C101 * C827 - C113 * C820 + C102 * C828 - C114 * C821 +
             C103 * C829 - C115 * C822) *
                C47384) *
               C47369 * C47490 +
           ((C113 * C1150 - C101 * C1159 + C114 * C1151 - C102 * C1160 +
             C115 * C1152 - C103 * C1161) *
                C116 +
            (C113 * C1162 - C101 * C1177 + C114 * C1163 - C102 * C1178 +
             C115 * C1164 - C103 * C1179) *
                C47384) *
               C47369 * C47464) *
              C943 +
          (((C101 * C277 - C113 * C264 + C102 * C278 - C114 * C265 +
             C103 * C279 - C115 * C266) *
                C116 +
            (C101 * C294 - C113 * C280 + C102 * C295 - C114 * C281 +
             C103 * C296 - C115 * C282) *
                C47384) *
               C47369 * C47501 +
           ((C113 * C1153 - C101 * C1165 + C114 * C1154 - C102 * C1166 +
             C115 * C1155 - C103 * C1167) *
                C116 +
            (C113 * C1168 - C101 * C1180 + C114 * C1169 - C102 * C1181 +
             C115 * C1170 - C103 * C1182) *
                C47384) *
               C47369 * C47490 +
           ((C101 * C1171 - C113 * C1156 + C102 * C1172 - C114 * C1157 +
             C103 * C1173 - C115 * C1158) *
                C116 +
            (C101 * C1183 - C113 * C1174 + C102 * C1184 - C114 * C1175 +
             C103 * C1185 - C115 * C1176) *
                C47384) *
               C47369 * C47464) *
              C47461) *
         C47135) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) * ((((C101 * C124 - C113 * C117 + C102 * C125 -
                                 C114 * C118 + C103 * C126 - C115 * C119) *
                                    C116 +
                                (C101 * C138 - C113 * C127 + C102 * C139 -
                                 C114 * C128 + C103 * C140 - C115 * C129) *
                                    C47384) *
                                   C47369 * C1664 +
                               ((C113 * C414 - C101 * C424 + C114 * C415 -
                                 C102 * C425 + C115 * C416 - C103 * C426) *
                                    C116 +
                                (C113 * C427 - C101 * C444 + C114 * C428 -
                                 C102 * C445 + C115 * C429 - C103 * C446) *
                                    C47384) *
                                   C47369 * C1665 +
                               ((C101 * C430 - C113 * C417 + C102 * C431 -
                                 C114 * C418 + C103 * C432 - C115 * C419) *
                                    C116 +
                                (C101 * C447 - C113 * C433 + C102 * C448 -
                                 C114 * C434 + C103 * C449 - C115 * C435) *
                                    C47384) *
                                   C47369 * C47464) *
                                  C47163 * C47497 +
                              (((C113 * C118 - C101 * C125 + C114 * C119 -
                                 C102 * C126 + C115 * C120 - C103 * C130) *
                                    C116 +
                                (C113 * C128 - C101 * C139 + C114 * C129 -
                                 C102 * C140 + C115 * C131 - C103 * C141) *
                                    C47384) *
                                   C47369 * C1664 +
                               ((C101 * C425 - C113 * C415 + C102 * C426 -
                                 C114 * C416 + C103 * C436 - C115 * C420) *
                                    C116 +
                                (C101 * C445 - C113 * C428 + C102 * C446 -
                                 C114 * C429 + C103 * C450 - C115 * C437) *
                                    C47384) *
                                   C47369 * C1665 +
                               ((C113 * C418 - C101 * C431 + C114 * C419 -
                                 C102 * C432 + C115 * C421 - C103 * C438) *
                                    C116 +
                                (C113 * C434 - C101 * C448 + C114 * C435 -
                                 C102 * C449 + C115 * C439 - C103 * C451) *
                                    C47384) *
                                   C47369 * C47464) *
                                  C47163 * C47484 +
                              (((C101 * C126 - C113 * C119 + C102 * C130 -
                                 C114 * C120 + C103 * C132 - C115 * C121) *
                                    C116 +
                                (C101 * C140 - C113 * C129 + C102 * C141 -
                                 C114 * C131 + C103 * C142 - C115 * C133) *
                                    C47384) *
                                   C47369 * C1664 +
                               ((C113 * C416 - C101 * C426 + C114 * C420 -
                                 C102 * C436 + C115 * C422 - C103 * C440) *
                                    C116 +
                                (C113 * C429 - C101 * C446 + C114 * C437 -
                                 C102 * C450 + C115 * C441 - C103 * C452) *
                                    C47384) *
                                   C47369 * C1665 +
                               ((C101 * C432 - C113 * C419 + C102 * C438 -
                                 C114 * C421 + C103 * C442 - C115 * C423) *
                                    C116 +
                                (C101 * C449 - C113 * C435 + C102 * C451 -
                                 C114 * C439 + C103 * C453 - C115 * C443) *
                                    C47384) *
                                   C47369 * C47464) *
                                  C47163 * C47455)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
             C103 * C126 - C115 * C119) *
                C116 +
            (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
             C103 * C140 - C115 * C129) *
                C47384) *
               C47369 * C1664 +
           ((C113 * C414 - C101 * C424 + C114 * C415 - C102 * C425 +
             C115 * C416 - C103 * C426) *
                C116 +
            (C113 * C427 - C101 * C444 + C114 * C428 - C102 * C445 +
             C115 * C429 - C103 * C446) *
                C47384) *
               C47369 * C1665 +
           ((C101 * C430 - C113 * C417 + C102 * C431 - C114 * C418 +
             C103 * C432 - C115 * C419) *
                C116 +
            (C101 * C447 - C113 * C433 + C102 * C448 - C114 * C434 +
             C103 * C449 - C115 * C435) *
                C47384) *
               C47369 * C47464) *
              C47500 +
          (((C113 * C261 - C101 * C271 + C114 * C262 - C102 * C272 +
             C115 * C263 - C103 * C273) *
                C116 +
            (C113 * C274 - C101 * C291 + C114 * C275 - C102 * C292 +
             C115 * C276 - C103 * C293) *
                C47384) *
               C47369 * C1664 +
           ((C101 * C817 - C113 * C812 + C102 * C818 - C114 * C813 +
             C103 * C819 - C115 * C814) *
                C116 +
            (C101 * C827 - C113 * C820 + C102 * C828 - C114 * C821 +
             C103 * C829 - C115 * C822) *
                C47384) *
               C47369 * C1665 +
           ((C113 * C1150 - C101 * C1159 + C114 * C1151 - C102 * C1160 +
             C115 * C1152 - C103 * C1161) *
                C116 +
            (C113 * C1162 - C101 * C1177 + C114 * C1163 - C102 * C1178 +
             C115 * C1164 - C103 * C1179) *
                C47384) *
               C47369 * C47464) *
              C47488 +
          (((C101 * C277 - C113 * C264 + C102 * C278 - C114 * C265 +
             C103 * C279 - C115 * C266) *
                C116 +
            (C101 * C294 - C113 * C280 + C102 * C295 - C114 * C281 +
             C103 * C296 - C115 * C282) *
                C47384) *
               C47369 * C1664 +
           ((C113 * C1153 - C101 * C1165 + C114 * C1154 - C102 * C1166 +
             C115 * C1155 - C103 * C1167) *
                C116 +
            (C113 * C1168 - C101 * C1180 + C114 * C1169 - C102 * C1181 +
             C115 * C1170 - C103 * C1182) *
                C47384) *
               C47369 * C1665 +
           ((C101 * C1171 - C113 * C1156 + C102 * C1172 - C114 * C1157 +
             C103 * C1173 - C115 * C1158) *
                C116 +
            (C101 * C1183 - C113 * C1174 + C102 * C1184 - C114 * C1175 +
             C103 * C1185 - C115 * C1176) *
                C47384) *
               C47369 * C47464) *
              C47461) *
         C47135) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
            C103 * C126 - C115 * C119) *
               C116 +
           (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
            C103 * C140 - C115 * C129) *
               C47384) *
              C47369 * C1839 +
          ((C113 * C414 - C101 * C424 + C114 * C415 - C102 * C425 +
            C115 * C416 - C103 * C426) *
               C116 +
           (C113 * C427 - C101 * C444 + C114 * C428 - C102 * C445 +
            C115 * C429 - C103 * C446) *
               C47384) *
              C47369 * C1840 +
          ((C101 * C430 - C113 * C417 + C102 * C431 - C114 * C418 +
            C103 * C432 - C115 * C419) *
               C116 +
           (C101 * C447 - C113 * C433 + C102 * C448 - C114 * C434 +
            C103 * C449 - C115 * C435) *
               C47384) *
              C47369 * C1841 +
          ((C113 * C1844 - C101 * C1850 + C114 * C1845 - C102 * C1851 +
            C115 * C1846 - C103 * C1852) *
               C116 +
           (C113 * C1853 - C101 * C1862 + C114 * C1854 - C102 * C1863 +
            C115 * C1855 - C103 * C1864) *
               C47384) *
              C47369 * C1842 +
          ((C101 * C1856 - C113 * C1847 + C102 * C1857 - C114 * C1848 +
            C103 * C1858 - C115 * C1849) *
               C116 +
           (C101 * C1865 - C113 * C1859 + C102 * C1866 - C114 * C1860 +
            C103 * C1867 - C115 * C1861) *
               C47384) *
              C47369 * C1843) *
         C47163 * C47135) /
            (p * q * std::sqrt(p + q));
    d2ee[13] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 (((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
                      C103 * C126 - C115 * C119) *
                         C116 +
                     (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
                      C103 * C140 - C115 * C129) *
                         C47384) *
                        C47369 * C47430 +
                    ((C113 * C414 - C101 * C424 + C114 * C415 - C102 * C425 +
                      C115 * C416 - C103 * C426) *
                         C116 +
                     (C113 * C427 - C101 * C444 + C114 * C428 - C102 * C445 +
                      C115 * C429 - C103 * C446) *
                         C47384) *
                        C47369 * C47268) *
                       C942 +
                   (((C113 * C261 - C101 * C271 + C114 * C262 - C102 * C272 +
                      C115 * C263 - C103 * C273) *
                         C116 +
                     (C113 * C274 - C101 * C291 + C114 * C275 - C102 * C292 +
                      C115 * C276 - C103 * C293) *
                         C47384) *
                        C47369 * C47430 +
                    ((C101 * C817 - C113 * C812 + C102 * C818 - C114 * C813 +
                      C103 * C819 - C115 * C814) *
                         C116 +
                     (C101 * C827 - C113 * C820 + C102 * C828 - C114 * C821 +
                      C103 * C829 - C115 * C822) *
                         C47384) *
                        C47369 * C47268) *
                       C943 +
                   (((C101 * C277 - C113 * C264 + C102 * C278 - C114 * C265 +
                      C103 * C279 - C115 * C266) *
                         C116 +
                     (C101 * C294 - C113 * C280 + C102 * C295 - C114 * C281 +
                      C103 * C296 - C115 * C282) *
                         C47384) *
                        C47369 * C47430 +
                    ((C113 * C1153 - C101 * C1165 + C114 * C1154 -
                      C102 * C1166 + C115 * C1155 - C103 * C1167) *
                         C116 +
                     (C113 * C1168 - C101 * C1180 + C114 * C1169 -
                      C102 * C1181 + C115 * C1170 - C103 * C1182) *
                         C47384) *
                        C47369 * C47268) *
                       C47461) *
                      C47415 +
                  ((((C113 * C118 - C101 * C125 + C114 * C119 - C102 * C126 +
                      C115 * C120 - C103 * C130) *
                         C116 +
                     (C113 * C128 - C101 * C139 + C114 * C129 - C102 * C140 +
                      C115 * C131 - C103 * C141) *
                         C47384) *
                        C47369 * C47430 +
                    ((C101 * C425 - C113 * C415 + C102 * C426 - C114 * C416 +
                      C103 * C436 - C115 * C420) *
                         C116 +
                     (C101 * C445 - C113 * C428 + C102 * C446 - C114 * C429 +
                      C103 * C450 - C115 * C437) *
                         C47384) *
                        C47369 * C47268) *
                       C942 +
                   (((C101 * C272 - C113 * C262 + C102 * C273 - C114 * C263 +
                      C103 * C283 - C115 * C267) *
                         C116 +
                     (C101 * C292 - C113 * C275 + C102 * C293 - C114 * C276 +
                      C103 * C297 - C115 * C284) *
                         C47384) *
                        C47369 * C47430 +
                    ((C113 * C813 - C101 * C818 + C114 * C814 - C102 * C819 +
                      C115 * C815 - C103 * C823) *
                         C116 +
                     (C113 * C821 - C101 * C828 + C114 * C822 - C102 * C829 +
                      C115 * C824 - C103 * C830) *
                         C47384) *
                        C47369 * C47268) *
                       C943 +
                   (((C113 * C265 - C101 * C278 + C114 * C266 - C102 * C279 +
                      C115 * C268 - C103 * C285) *
                         C116 +
                     (C113 * C281 - C101 * C295 + C114 * C282 - C102 * C296 +
                      C115 * C286 - C103 * C298) *
                         C47384) *
                        C47369 * C47430 +
                    ((C101 * C1166 - C113 * C1154 + C102 * C1167 -
                      C114 * C1155 + C103 * C1441 - C115 * C1440) *
                         C116 +
                     (C101 * C1181 - C113 * C1169 + C102 * C1182 -
                      C114 * C1170 + C103 * C1443 - C115 * C1442) *
                         C47384) *
                        C47369 * C47268) *
                       C47461) *
                      C47146)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 ((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
                     C103 * C126 - C115 * C119) *
                        C116 +
                    (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
                     C103 * C140 - C115 * C129) *
                        C47384) *
                       C47369 * C47430 +
                   ((C113 * C414 - C101 * C424 + C114 * C415 - C102 * C425 +
                     C115 * C416 - C103 * C426) *
                        C116 +
                    (C113 * C427 - C101 * C444 + C114 * C428 - C102 * C445 +
                     C115 * C429 - C103 * C446) *
                        C47384) *
                       C47369 * C47268) *
                      C47163 * C554 +
                  (((C113 * C118 - C101 * C125 + C114 * C119 - C102 * C126 +
                     C115 * C120 - C103 * C130) *
                        C116 +
                    (C113 * C128 - C101 * C139 + C114 * C129 - C102 * C140 +
                     C115 * C131 - C103 * C141) *
                        C47384) *
                       C47369 * C47430 +
                   ((C101 * C425 - C113 * C415 + C102 * C426 - C114 * C416 +
                     C103 * C436 - C115 * C420) *
                        C116 +
                    (C101 * C445 - C113 * C428 + C102 * C446 - C114 * C429 +
                     C103 * C450 - C115 * C437) *
                        C47384) *
                       C47369 * C47268) *
                      C47163 * C555 +
                  (((C101 * C126 - C113 * C119 + C102 * C130 - C114 * C120 +
                     C103 * C132 - C115 * C121) *
                        C116 +
                    (C101 * C140 - C113 * C129 + C102 * C141 - C114 * C131 +
                     C103 * C142 - C115 * C133) *
                        C47384) *
                       C47369 * C47430 +
                   ((C113 * C416 - C101 * C426 + C114 * C420 - C102 * C436 +
                     C115 * C422 - C103 * C440) *
                        C116 +
                    (C113 * C429 - C101 * C446 + C114 * C437 - C102 * C450 +
                     C115 * C441 - C103 * C452) *
                        C47384) *
                       C47369 * C47268) *
                      C47163 * C556 +
                  (((C113 * C120 - C101 * C130 + C114 * C121 - C102 * C132 +
                     C115 * C122 - C103 * C134) *
                        C116 +
                    (C113 * C131 - C101 * C141 + C114 * C133 - C102 * C142 +
                     C115 * C135 - C103 * C143) *
                        C47384) *
                       C47369 * C47430 +
                   ((C101 * C436 - C113 * C420 + C102 * C440 - C114 * C422 +
                     C103 * C663 - C115 * C662) *
                        C116 +
                    (C101 * C450 - C113 * C437 + C102 * C452 - C114 * C441 +
                     C103 * C665 - C115 * C664) *
                        C47384) *
                       C47369 * C47268) *
                      C47163 * C47465)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                 ((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
                     C103 * C126 - C115 * C119) *
                        C116 +
                    (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
                     C103 * C140 - C115 * C129) *
                        C47384) *
                       C47369 * C2116 +
                   ((C113 * C414 - C101 * C424 + C114 * C415 - C102 * C425 +
                     C115 * C416 - C103 * C426) *
                        C116 +
                    (C113 * C427 - C101 * C444 + C114 * C428 - C102 * C445 +
                     C115 * C429 - C103 * C446) *
                        C47384) *
                       C47369 * C2117 +
                   ((C101 * C430 - C113 * C417 + C102 * C431 - C114 * C418 +
                     C103 * C432 - C115 * C419) *
                        C116 +
                    (C101 * C447 - C113 * C433 + C102 * C448 - C114 * C434 +
                     C103 * C449 - C115 * C435) *
                        C47384) *
                       C47369 * C2118 +
                   ((C113 * C1844 - C101 * C1850 + C114 * C1845 - C102 * C1851 +
                     C115 * C1846 - C103 * C1852) *
                        C116 +
                    (C113 * C1853 - C101 * C1862 + C114 * C1854 - C102 * C1863 +
                     C115 * C1855 - C103 * C1864) *
                        C47384) *
                       C47369 * C47477) *
                      C47163 * C47415 +
                  (((C113 * C118 - C101 * C125 + C114 * C119 - C102 * C126 +
                     C115 * C120 - C103 * C130) *
                        C116 +
                    (C113 * C128 - C101 * C139 + C114 * C129 - C102 * C140 +
                     C115 * C131 - C103 * C141) *
                        C47384) *
                       C47369 * C2116 +
                   ((C101 * C425 - C113 * C415 + C102 * C426 - C114 * C416 +
                     C103 * C436 - C115 * C420) *
                        C116 +
                    (C101 * C445 - C113 * C428 + C102 * C446 - C114 * C429 +
                     C103 * C450 - C115 * C437) *
                        C47384) *
                       C47369 * C2117 +
                   ((C113 * C418 - C101 * C431 + C114 * C419 - C102 * C432 +
                     C115 * C421 - C103 * C438) *
                        C116 +
                    (C113 * C434 - C101 * C448 + C114 * C435 - C102 * C449 +
                     C115 * C439 - C103 * C451) *
                        C47384) *
                       C47369 * C2118 +
                   ((C101 * C1851 - C113 * C1845 + C102 * C1852 - C114 * C1846 +
                     C103 * C2121 - C115 * C2120) *
                        C116 +
                    (C101 * C1863 - C113 * C1854 + C102 * C1864 - C114 * C1855 +
                     C103 * C2123 - C115 * C2122) *
                        C47384) *
                       C47369 * C47477) *
                      C47163 * C47146)) /
                    (p * q * std::sqrt(p + q));
    d2ee[14] += (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                 ((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
                     C103 * C126 - C115 * C119) *
                        C116 +
                    (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
                     C103 * C140 - C115 * C129) *
                        C47384) *
                       C47369 * C47181 * C47500 +
                   ((C113 * C261 - C101 * C271 + C114 * C262 - C102 * C272 +
                     C115 * C263 - C103 * C273) *
                        C116 +
                    (C113 * C274 - C101 * C291 + C114 * C275 - C102 * C292 +
                     C115 * C276 - C103 * C293) *
                        C47384) *
                       C47369 * C47181 * C47488 +
                   ((C101 * C277 - C113 * C264 + C102 * C278 - C114 * C265 +
                     C103 * C279 - C115 * C266) *
                        C116 +
                    (C101 * C294 - C113 * C280 + C102 * C295 - C114 * C281 +
                     C103 * C296 - C115 * C282) *
                        C47384) *
                       C47369 * C47181 * C47461) *
                      C258 +
                  (((C113 * C118 - C101 * C125 + C114 * C119 - C102 * C126 +
                     C115 * C120 - C103 * C130) *
                        C116 +
                    (C113 * C128 - C101 * C139 + C114 * C129 - C102 * C140 +
                     C115 * C131 - C103 * C141) *
                        C47384) *
                       C47369 * C47181 * C47500 +
                   ((C101 * C272 - C113 * C262 + C102 * C273 - C114 * C263 +
                     C103 * C283 - C115 * C267) *
                        C116 +
                    (C101 * C292 - C113 * C275 + C102 * C293 - C114 * C276 +
                     C103 * C297 - C115 * C284) *
                        C47384) *
                       C47369 * C47181 * C47488 +
                   ((C113 * C265 - C101 * C278 + C114 * C266 - C102 * C279 +
                     C115 * C268 - C103 * C285) *
                        C116 +
                    (C113 * C281 - C101 * C295 + C114 * C282 - C102 * C296 +
                     C115 * C286 - C103 * C298) *
                        C47384) *
                       C47369 * C47181 * C47461) *
                      C259 +
                  (((C101 * C126 - C113 * C119 + C102 * C130 - C114 * C120 +
                     C103 * C132 - C115 * C121) *
                        C116 +
                    (C101 * C140 - C113 * C129 + C102 * C141 - C114 * C131 +
                     C103 * C142 - C115 * C133) *
                        C47384) *
                       C47369 * C47181 * C47500 +
                   ((C113 * C263 - C101 * C273 + C114 * C267 - C102 * C283 +
                     C115 * C269 - C103 * C287) *
                        C116 +
                    (C113 * C276 - C101 * C293 + C114 * C284 - C102 * C297 +
                     C115 * C288 - C103 * C299) *
                        C47384) *
                       C47369 * C47181 * C47488 +
                   ((C101 * C279 - C113 * C266 + C102 * C285 - C114 * C268 +
                     C103 * C289 - C115 * C270) *
                        C116 +
                    (C101 * C296 - C113 * C282 + C102 * C298 - C114 * C286 +
                     C103 * C300 - C115 * C290) *
                        C47384) *
                       C47369 * C47181 * C47461) *
                      C47455)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                 (((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
                    C103 * C126 - C115 * C119) *
                       C116 +
                   (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
                    C103 * C140 - C115 * C129) *
                       C47384) *
                      C47369 * C47181 * C47163 * C108 +
                  ((C113 * C118 - C101 * C125 + C114 * C119 - C102 * C126 +
                    C115 * C120 - C103 * C130) *
                       C116 +
                   (C113 * C128 - C101 * C139 + C114 * C129 - C102 * C140 +
                    C115 * C131 - C103 * C141) *
                       C47384) *
                      C47369 * C47181 * C47163 * C109 +
                  ((C101 * C126 - C113 * C119 + C102 * C130 - C114 * C120 +
                    C103 * C132 - C115 * C121) *
                       C116 +
                   (C101 * C140 - C113 * C129 + C102 * C141 - C114 * C131 +
                    C103 * C142 - C115 * C133) *
                       C47384) *
                      C47369 * C47181 * C47163 * C110 +
                  ((C113 * C120 - C101 * C130 + C114 * C121 - C102 * C132 +
                    C115 * C122 - C103 * C134) *
                       C116 +
                   (C113 * C131 - C101 * C141 + C114 * C133 - C102 * C142 +
                    C115 * C135 - C103 * C143) *
                       C47384) *
                      C47369 * C47181 * C47163 * C111 +
                  ((C101 * C132 - C113 * C121 + C102 * C134 - C114 * C122 +
                    C103 * C136 - C115 * C123) *
                       C116 +
                   (C101 * C142 - C113 * C133 + C102 * C143 - C114 * C135 +
                    C103 * C144 - C115 * C137) *
                       C47384) *
                      C47369 * C47181 * C47163 * C112)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                 ((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
                     C103 * C126 - C115 * C119) *
                        C116 +
                    (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
                     C103 * C140 - C115 * C129) *
                        C47384) *
                       C47369 * C47181 * C942 +
                   ((C113 * C261 - C101 * C271 + C114 * C262 - C102 * C272 +
                     C115 * C263 - C103 * C273) *
                        C116 +
                    (C113 * C274 - C101 * C291 + C114 * C275 - C102 * C292 +
                     C115 * C276 - C103 * C293) *
                        C47384) *
                       C47369 * C47181 * C943 +
                   ((C101 * C277 - C113 * C264 + C102 * C278 - C114 * C265 +
                     C103 * C279 - C115 * C266) *
                        C116 +
                    (C101 * C294 - C113 * C280 + C102 * C295 - C114 * C281 +
                     C103 * C296 - C115 * C282) *
                        C47384) *
                       C47369 * C47181 * C47461) *
                      C47497 +
                  (((C113 * C118 - C101 * C125 + C114 * C119 - C102 * C126 +
                     C115 * C120 - C103 * C130) *
                        C116 +
                    (C113 * C128 - C101 * C139 + C114 * C129 - C102 * C140 +
                     C115 * C131 - C103 * C141) *
                        C47384) *
                       C47369 * C47181 * C942 +
                   ((C101 * C272 - C113 * C262 + C102 * C273 - C114 * C263 +
                     C103 * C283 - C115 * C267) *
                        C116 +
                    (C101 * C292 - C113 * C275 + C102 * C293 - C114 * C276 +
                     C103 * C297 - C115 * C284) *
                        C47384) *
                       C47369 * C47181 * C943 +
                   ((C113 * C265 - C101 * C278 + C114 * C266 - C102 * C279 +
                     C115 * C268 - C103 * C285) *
                        C116 +
                    (C113 * C281 - C101 * C295 + C114 * C282 - C102 * C296 +
                     C115 * C286 - C103 * C298) *
                        C47384) *
                       C47369 * C47181 * C47461) *
                      C47484 +
                  (((C101 * C126 - C113 * C119 + C102 * C130 - C114 * C120 +
                     C103 * C132 - C115 * C121) *
                        C116 +
                    (C101 * C140 - C113 * C129 + C102 * C141 - C114 * C131 +
                     C103 * C142 - C115 * C133) *
                        C47384) *
                       C47369 * C47181 * C942 +
                   ((C113 * C263 - C101 * C273 + C114 * C267 - C102 * C283 +
                     C115 * C269 - C103 * C287) *
                        C116 +
                    (C113 * C276 - C101 * C293 + C114 * C284 - C102 * C297 +
                     C115 * C288 - C103 * C299) *
                        C47384) *
                       C47369 * C47181 * C943 +
                   ((C101 * C279 - C113 * C266 + C102 * C285 - C114 * C268 +
                     C103 * C289 - C115 * C270) *
                        C116 +
                    (C101 * C296 - C113 * C282 + C102 * C298 - C114 * C286 +
                     C103 * C300 - C115 * C290) *
                        C47384) *
                       C47369 * C47181 * C47461) *
                      C47455)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                 (((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
                    C103 * C126 - C115 * C119) *
                       C116 +
                   (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
                    C103 * C140 - C115 * C129) *
                       C47384) *
                      C47369 * C47181 * C1010 +
                  ((C113 * C261 - C101 * C271 + C114 * C262 - C102 * C272 +
                    C115 * C263 - C103 * C273) *
                       C116 +
                   (C113 * C274 - C101 * C291 + C114 * C275 - C102 * C292 +
                    C115 * C276 - C103 * C293) *
                       C47384) *
                      C47369 * C47181 * C1011 +
                  ((C101 * C277 - C113 * C264 + C102 * C278 - C114 * C265 +
                    C103 * C279 - C115 * C266) *
                       C116 +
                   (C101 * C294 - C113 * C280 + C102 * C295 - C114 * C281 +
                    C103 * C296 - C115 * C282) *
                       C47384) *
                      C47369 * C47181 * C1012 +
                  ((C113 * C1016 - C101 * C1022 + C114 * C1017 - C102 * C1023 +
                    C115 * C1018 - C103 * C1024) *
                       C116 +
                   (C113 * C1025 - C101 * C1034 + C114 * C1026 - C102 * C1035 +
                    C115 * C1027 - C103 * C1036) *
                       C47384) *
                      C47369 * C47181 * C1013 +
                  ((C101 * C1028 - C113 * C1019 + C102 * C1029 - C114 * C1020 +
                    C103 * C1030 - C115 * C1021) *
                       C116 +
                   (C101 * C1037 - C113 * C1031 + C102 * C1038 - C114 * C1032 +
                    C103 * C1039 - C115 * C1033) *
                       C47384) *
                      C47369 * C47181 * C1014) *
                 C47135) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 ((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
                     C103 * C126 - C115 * C119) *
                        C116 +
                    (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
                     C103 * C140 - C115 * C129) *
                        C47384) *
                       C47369 * C1664 +
                   ((C113 * C414 - C101 * C424 + C114 * C415 - C102 * C425 +
                     C115 * C416 - C103 * C426) *
                        C116 +
                    (C113 * C427 - C101 * C444 + C114 * C428 - C102 * C445 +
                     C115 * C429 - C103 * C446) *
                        C47384) *
                       C47369 * C1665 +
                   ((C101 * C430 - C113 * C417 + C102 * C431 - C114 * C418 +
                     C103 * C432 - C115 * C419) *
                        C116 +
                    (C101 * C447 - C113 * C433 + C102 * C448 - C114 * C434 +
                     C103 * C449 - C115 * C435) *
                        C47384) *
                       C47369 * C47464) *
                      C47163 * C47497 +
                  (((C113 * C118 - C101 * C125 + C114 * C119 - C102 * C126 +
                     C115 * C120 - C103 * C130) *
                        C116 +
                    (C113 * C128 - C101 * C139 + C114 * C129 - C102 * C140 +
                     C115 * C131 - C103 * C141) *
                        C47384) *
                       C47369 * C1664 +
                   ((C101 * C425 - C113 * C415 + C102 * C426 - C114 * C416 +
                     C103 * C436 - C115 * C420) *
                        C116 +
                    (C101 * C445 - C113 * C428 + C102 * C446 - C114 * C429 +
                     C103 * C450 - C115 * C437) *
                        C47384) *
                       C47369 * C1665 +
                   ((C113 * C418 - C101 * C431 + C114 * C419 - C102 * C432 +
                     C115 * C421 - C103 * C438) *
                        C116 +
                    (C113 * C434 - C101 * C448 + C114 * C435 - C102 * C449 +
                     C115 * C439 - C103 * C451) *
                        C47384) *
                       C47369 * C47464) *
                      C47163 * C47484 +
                  (((C101 * C126 - C113 * C119 + C102 * C130 - C114 * C120 +
                     C103 * C132 - C115 * C121) *
                        C116 +
                    (C101 * C140 - C113 * C129 + C102 * C141 - C114 * C131 +
                     C103 * C142 - C115 * C133) *
                        C47384) *
                       C47369 * C1664 +
                   ((C113 * C416 - C101 * C426 + C114 * C420 - C102 * C436 +
                     C115 * C422 - C103 * C440) *
                        C116 +
                    (C113 * C429 - C101 * C446 + C114 * C437 - C102 * C450 +
                     C115 * C441 - C103 * C452) *
                        C47384) *
                       C47369 * C1665 +
                   ((C101 * C432 - C113 * C419 + C102 * C438 - C114 * C421 +
                     C103 * C442 - C115 * C423) *
                        C116 +
                    (C101 * C449 - C113 * C435 + C102 * C451 - C114 * C439 +
                     C103 * C453 - C115 * C443) *
                        C47384) *
                       C47369 * C47464) *
                      C47163 * C47455)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 ((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
                     C103 * C126 - C115 * C119) *
                        C116 +
                    (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
                     C103 * C140 - C115 * C129) *
                        C47384) *
                       C47369 * C1664 +
                   ((C113 * C414 - C101 * C424 + C114 * C415 - C102 * C425 +
                     C115 * C416 - C103 * C426) *
                        C116 +
                    (C113 * C427 - C101 * C444 + C114 * C428 - C102 * C445 +
                     C115 * C429 - C103 * C446) *
                        C47384) *
                       C47369 * C1665 +
                   ((C101 * C430 - C113 * C417 + C102 * C431 - C114 * C418 +
                     C103 * C432 - C115 * C419) *
                        C116 +
                    (C101 * C447 - C113 * C433 + C102 * C448 - C114 * C434 +
                     C103 * C449 - C115 * C435) *
                        C47384) *
                       C47369 * C47464) *
                      C47500 +
                  (((C113 * C261 - C101 * C271 + C114 * C262 - C102 * C272 +
                     C115 * C263 - C103 * C273) *
                        C116 +
                    (C113 * C274 - C101 * C291 + C114 * C275 - C102 * C292 +
                     C115 * C276 - C103 * C293) *
                        C47384) *
                       C47369 * C1664 +
                   ((C101 * C817 - C113 * C812 + C102 * C818 - C114 * C813 +
                     C103 * C819 - C115 * C814) *
                        C116 +
                    (C101 * C827 - C113 * C820 + C102 * C828 - C114 * C821 +
                     C103 * C829 - C115 * C822) *
                        C47384) *
                       C47369 * C1665 +
                   ((C113 * C1150 - C101 * C1159 + C114 * C1151 - C102 * C1160 +
                     C115 * C1152 - C103 * C1161) *
                        C116 +
                    (C113 * C1162 - C101 * C1177 + C114 * C1163 - C102 * C1178 +
                     C115 * C1164 - C103 * C1179) *
                        C47384) *
                       C47369 * C47464) *
                      C47488 +
                  (((C101 * C277 - C113 * C264 + C102 * C278 - C114 * C265 +
                     C103 * C279 - C115 * C266) *
                        C116 +
                    (C101 * C294 - C113 * C280 + C102 * C295 - C114 * C281 +
                     C103 * C296 - C115 * C282) *
                        C47384) *
                       C47369 * C1664 +
                   ((C113 * C1153 - C101 * C1165 + C114 * C1154 - C102 * C1166 +
                     C115 * C1155 - C103 * C1167) *
                        C116 +
                    (C113 * C1168 - C101 * C1180 + C114 * C1169 - C102 * C1181 +
                     C115 * C1170 - C103 * C1182) *
                        C47384) *
                       C47369 * C1665 +
                   ((C101 * C1171 - C113 * C1156 + C102 * C1172 - C114 * C1157 +
                     C103 * C1173 - C115 * C1158) *
                        C116 +
                    (C101 * C1183 - C113 * C1174 + C102 * C1184 - C114 * C1175 +
                     C103 * C1185 - C115 * C1176) *
                        C47384) *
                       C47369 * C47464) *
                      C47461) *
                 C47135) /
                    (p * q * std::sqrt(p + q));
    d2ee[15] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 (((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
                      C103 * C126 - C115 * C119) *
                         C116 +
                     (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
                      C103 * C140 - C115 * C129) *
                         C47384) *
                        C47369 * C3094 +
                    ((C113 * C414 - C101 * C424 + C114 * C415 - C102 * C425 +
                      C115 * C416 - C103 * C426) *
                         C116 +
                     (C113 * C427 - C101 * C444 + C114 * C428 - C102 * C445 +
                      C115 * C429 - C103 * C446) *
                         C47384) *
                        C47369 * C47268) *
                       C47429 +
                   (((C113 * C261 - C101 * C271 + C114 * C262 - C102 * C272 +
                      C115 * C263 - C103 * C273) *
                         C116 +
                     (C113 * C274 - C101 * C291 + C114 * C275 - C102 * C292 +
                      C115 * C276 - C103 * C293) *
                         C47384) *
                        C47369 * C3094 +
                    ((C101 * C817 - C113 * C812 + C102 * C818 - C114 * C813 +
                      C103 * C819 - C115 * C814) *
                         C116 +
                     (C101 * C827 - C113 * C820 + C102 * C828 - C114 * C821 +
                      C103 * C829 - C115 * C822) *
                         C47384) *
                        C47369 * C47268) *
                       C47226) *
                      C47140 +
                  ((((C113 * C118 - C101 * C125 + C114 * C119 - C102 * C126 +
                      C115 * C120 - C103 * C130) *
                         C116 +
                     (C113 * C128 - C101 * C139 + C114 * C129 - C102 * C140 +
                      C115 * C131 - C103 * C141) *
                         C47384) *
                        C47369 * C3094 +
                    ((C101 * C425 - C113 * C415 + C102 * C426 - C114 * C416 +
                      C103 * C436 - C115 * C420) *
                         C116 +
                     (C101 * C445 - C113 * C428 + C102 * C446 - C114 * C429 +
                      C103 * C450 - C115 * C437) *
                         C47384) *
                        C47369 * C47268) *
                       C47429 +
                   (((C101 * C272 - C113 * C262 + C102 * C273 - C114 * C263 +
                      C103 * C283 - C115 * C267) *
                         C116 +
                     (C101 * C292 - C113 * C275 + C102 * C293 - C114 * C276 +
                      C103 * C297 - C115 * C284) *
                         C47384) *
                        C47369 * C3094 +
                    ((C113 * C813 - C101 * C818 + C114 * C814 - C102 * C819 +
                      C115 * C815 - C103 * C823) *
                         C116 +
                     (C113 * C821 - C101 * C828 + C114 * C822 - C102 * C829 +
                      C115 * C824 - C103 * C830) *
                         C47384) *
                        C47369 * C47268) *
                       C47226) *
                      C47149 +
                  ((((C101 * C126 - C113 * C119 + C102 * C130 - C114 * C120 +
                      C103 * C132 - C115 * C121) *
                         C116 +
                     (C101 * C140 - C113 * C129 + C102 * C141 - C114 * C131 +
                      C103 * C142 - C115 * C133) *
                         C47384) *
                        C47369 * C3094 +
                    ((C113 * C416 - C101 * C426 + C114 * C420 - C102 * C436 +
                      C115 * C422 - C103 * C440) *
                         C116 +
                     (C113 * C429 - C101 * C446 + C114 * C437 - C102 * C450 +
                      C115 * C441 - C103 * C452) *
                         C47384) *
                        C47369 * C47268) *
                       C47429 +
                   (((C113 * C263 - C101 * C273 + C114 * C267 - C102 * C283 +
                      C115 * C269 - C103 * C287) *
                         C116 +
                     (C113 * C276 - C101 * C293 + C114 * C284 - C102 * C297 +
                      C115 * C288 - C103 * C299) *
                         C47384) *
                        C47369 * C3094 +
                    ((C101 * C819 - C113 * C814 + C102 * C823 - C114 * C815 +
                      C103 * C825 - C115 * C816) *
                         C116 +
                     (C101 * C829 - C113 * C822 + C102 * C830 - C114 * C824 +
                      C103 * C831 - C115 * C826) *
                         C47384) *
                        C47369 * C47268) *
                       C47226) *
                      C2703)) /
                (p * q * std::sqrt(p + q));
    d2ee[16] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 (((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
                      C103 * C126 - C115 * C119) *
                         C116 +
                     (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
                      C103 * C140 - C115 * C129) *
                         C47384) *
                        C47369 * C47264 +
                    ((C113 * C414 - C101 * C424 + C114 * C415 - C102 * C425 +
                      C115 * C416 - C103 * C426) *
                         C116 +
                     (C113 * C427 - C101 * C444 + C114 * C428 - C102 * C445 +
                      C115 * C429 - C103 * C446) *
                         C47384) *
                        C47369 * C47271 +
                    ((C101 * C430 - C113 * C417 + C102 * C431 - C114 * C418 +
                      C103 * C432 - C115 * C419) *
                         C116 +
                     (C101 * C447 - C113 * C433 + C102 * C448 - C114 * C434 +
                      C103 * C449 - C115 * C435) *
                         C47384) *
                        C47369 * C3602) *
                       C47429 +
                   (((C113 * C261 - C101 * C271 + C114 * C262 - C102 * C272 +
                      C115 * C263 - C103 * C273) *
                         C116 +
                     (C113 * C274 - C101 * C291 + C114 * C275 - C102 * C292 +
                      C115 * C276 - C103 * C293) *
                         C47384) *
                        C47369 * C47264 +
                    ((C101 * C817 - C113 * C812 + C102 * C818 - C114 * C813 +
                      C103 * C819 - C115 * C814) *
                         C116 +
                     (C101 * C827 - C113 * C820 + C102 * C828 - C114 * C821 +
                      C103 * C829 - C115 * C822) *
                         C47384) *
                        C47369 * C47271 +
                    ((C113 * C1150 - C101 * C1159 + C114 * C1151 -
                      C102 * C1160 + C115 * C1152 - C103 * C1161) *
                         C116 +
                     (C113 * C1162 - C101 * C1177 + C114 * C1163 -
                      C102 * C1178 + C115 * C1164 - C103 * C1179) *
                         C47384) *
                        C47369 * C3602) *
                       C47226) *
                      C2440 +
                  ((((C113 * C118 - C101 * C125 + C114 * C119 - C102 * C126 +
                      C115 * C120 - C103 * C130) *
                         C116 +
                     (C113 * C128 - C101 * C139 + C114 * C129 - C102 * C140 +
                      C115 * C131 - C103 * C141) *
                         C47384) *
                        C47369 * C47264 +
                    ((C101 * C425 - C113 * C415 + C102 * C426 - C114 * C416 +
                      C103 * C436 - C115 * C420) *
                         C116 +
                     (C101 * C445 - C113 * C428 + C102 * C446 - C114 * C429 +
                      C103 * C450 - C115 * C437) *
                         C47384) *
                        C47369 * C47271 +
                    ((C113 * C418 - C101 * C431 + C114 * C419 - C102 * C432 +
                      C115 * C421 - C103 * C438) *
                         C116 +
                     (C113 * C434 - C101 * C448 + C114 * C435 - C102 * C449 +
                      C115 * C439 - C103 * C451) *
                         C47384) *
                        C47369 * C3602) *
                       C47429 +
                   (((C101 * C272 - C113 * C262 + C102 * C273 - C114 * C263 +
                      C103 * C283 - C115 * C267) *
                         C116 +
                     (C101 * C292 - C113 * C275 + C102 * C293 - C114 * C276 +
                      C103 * C297 - C115 * C284) *
                         C47384) *
                        C47369 * C47264 +
                    ((C113 * C813 - C101 * C818 + C114 * C814 - C102 * C819 +
                      C115 * C815 - C103 * C823) *
                         C116 +
                     (C113 * C821 - C101 * C828 + C114 * C822 - C102 * C829 +
                      C115 * C824 - C103 * C830) *
                         C47384) *
                        C47369 * C47271 +
                    ((C101 * C1160 - C113 * C1151 + C102 * C1161 -
                      C114 * C1152 + C103 * C2015 - C115 * C2014) *
                         C116 +
                     (C101 * C1178 - C113 * C1163 + C102 * C1179 -
                      C114 * C1164 + C103 * C2017 - C115 * C2016) *
                         C47384) *
                        C47369 * C3602) *
                       C47226) *
                      C47146)) /
                (p * q * std::sqrt(p + q));
    d2ee[17] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 (((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
                      C103 * C126 - C115 * C119) *
                         C116 +
                     (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
                      C103 * C140 - C115 * C129) *
                         C47384) *
                        C47369 * C3094 +
                    ((C113 * C414 - C101 * C424 + C114 * C415 - C102 * C425 +
                      C115 * C416 - C103 * C426) *
                         C116 +
                     (C113 * C427 - C101 * C444 + C114 * C428 - C102 * C445 +
                      C115 * C429 - C103 * C446) *
                         C47384) *
                        C47369 * C47268) *
                       C47500 +
                   (((C113 * C261 - C101 * C271 + C114 * C262 - C102 * C272 +
                      C115 * C263 - C103 * C273) *
                         C116 +
                     (C113 * C274 - C101 * C291 + C114 * C275 - C102 * C292 +
                      C115 * C276 - C103 * C293) *
                         C47384) *
                        C47369 * C3094 +
                    ((C101 * C817 - C113 * C812 + C102 * C818 - C114 * C813 +
                      C103 * C819 - C115 * C814) *
                         C116 +
                     (C101 * C827 - C113 * C820 + C102 * C828 - C114 * C821 +
                      C103 * C829 - C115 * C822) *
                         C47384) *
                        C47369 * C47268) *
                       C47488 +
                   (((C101 * C277 - C113 * C264 + C102 * C278 - C114 * C265 +
                      C103 * C279 - C115 * C266) *
                         C116 +
                     (C101 * C294 - C113 * C280 + C102 * C295 - C114 * C281 +
                      C103 * C296 - C115 * C282) *
                         C47384) *
                        C47369 * C3094 +
                    ((C113 * C1153 - C101 * C1165 + C114 * C1154 -
                      C102 * C1166 + C115 * C1155 - C103 * C1167) *
                         C116 +
                     (C113 * C1168 - C101 * C1180 + C114 * C1169 -
                      C102 * C1181 + C115 * C1170 - C103 * C1182) *
                         C47384) *
                        C47369 * C47268) *
                       C47461) *
                      C2440 +
                  ((((C113 * C118 - C101 * C125 + C114 * C119 - C102 * C126 +
                      C115 * C120 - C103 * C130) *
                         C116 +
                     (C113 * C128 - C101 * C139 + C114 * C129 - C102 * C140 +
                      C115 * C131 - C103 * C141) *
                         C47384) *
                        C47369 * C3094 +
                    ((C101 * C425 - C113 * C415 + C102 * C426 - C114 * C416 +
                      C103 * C436 - C115 * C420) *
                         C116 +
                     (C101 * C445 - C113 * C428 + C102 * C446 - C114 * C429 +
                      C103 * C450 - C115 * C437) *
                         C47384) *
                        C47369 * C47268) *
                       C47500 +
                   (((C101 * C272 - C113 * C262 + C102 * C273 - C114 * C263 +
                      C103 * C283 - C115 * C267) *
                         C116 +
                     (C101 * C292 - C113 * C275 + C102 * C293 - C114 * C276 +
                      C103 * C297 - C115 * C284) *
                         C47384) *
                        C47369 * C3094 +
                    ((C113 * C813 - C101 * C818 + C114 * C814 - C102 * C819 +
                      C115 * C815 - C103 * C823) *
                         C116 +
                     (C113 * C821 - C101 * C828 + C114 * C822 - C102 * C829 +
                      C115 * C824 - C103 * C830) *
                         C47384) *
                        C47369 * C47268) *
                       C47488 +
                   (((C113 * C265 - C101 * C278 + C114 * C266 - C102 * C279 +
                      C115 * C268 - C103 * C285) *
                         C116 +
                     (C113 * C281 - C101 * C295 + C114 * C282 - C102 * C296 +
                      C115 * C286 - C103 * C298) *
                         C47384) *
                        C47369 * C3094 +
                    ((C101 * C1166 - C113 * C1154 + C102 * C1167 -
                      C114 * C1155 + C103 * C1441 - C115 * C1440) *
                         C116 +
                     (C101 * C1181 - C113 * C1169 + C102 * C1182 -
                      C114 * C1170 + C103 * C1443 - C115 * C1442) *
                         C47384) *
                        C47369 * C47268) *
                       C47461) *
                      C47146)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 ((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
                     C103 * C126 - C115 * C119) *
                        C116 +
                    (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
                     C103 * C140 - C115 * C129) *
                        C47384) *
                       C47369 * C3094 +
                   ((C113 * C414 - C101 * C424 + C114 * C415 - C102 * C425 +
                     C115 * C416 - C103 * C426) *
                        C116 +
                    (C113 * C427 - C101 * C444 + C114 * C428 - C102 * C445 +
                     C115 * C429 - C103 * C446) *
                        C47384) *
                       C47369 * C47268) *
                      C47163 * C47506 +
                  (((C113 * C118 - C101 * C125 + C114 * C119 - C102 * C126 +
                     C115 * C120 - C103 * C130) *
                        C116 +
                    (C113 * C128 - C101 * C139 + C114 * C129 - C102 * C140 +
                     C115 * C131 - C103 * C141) *
                        C47384) *
                       C47369 * C3094 +
                   ((C101 * C425 - C113 * C415 + C102 * C426 - C114 * C416 +
                     C103 * C436 - C115 * C420) *
                        C116 +
                    (C101 * C445 - C113 * C428 + C102 * C446 - C114 * C429 +
                     C103 * C450 - C115 * C437) *
                        C47384) *
                       C47369 * C47268) *
                      C47163 * C47499 +
                  (((C101 * C126 - C113 * C119 + C102 * C130 - C114 * C120 +
                     C103 * C132 - C115 * C121) *
                        C116 +
                    (C101 * C140 - C113 * C129 + C102 * C141 - C114 * C131 +
                     C103 * C142 - C115 * C133) *
                        C47384) *
                       C47369 * C3094 +
                   ((C113 * C416 - C101 * C426 + C114 * C420 - C102 * C436 +
                     C115 * C422 - C103 * C440) *
                        C116 +
                    (C113 * C429 - C101 * C446 + C114 * C437 - C102 * C450 +
                     C115 * C441 - C103 * C452) *
                        C47384) *
                       C47369 * C47268) *
                      C47163 * C47486 +
                  (((C113 * C120 - C101 * C130 + C114 * C121 - C102 * C132 +
                     C115 * C122 - C103 * C134) *
                        C116 +
                    (C113 * C131 - C101 * C141 + C114 * C133 - C102 * C142 +
                     C115 * C135 - C103 * C143) *
                        C47384) *
                       C47369 * C3094 +
                   ((C101 * C436 - C113 * C420 + C102 * C440 - C114 * C422 +
                     C103 * C663 - C115 * C662) *
                        C116 +
                    (C101 * C450 - C113 * C437 + C102 * C452 - C114 * C441 +
                     C103 * C665 - C115 * C664) *
                        C47384) *
                       C47369 * C47268) *
                      C47163 * C47465)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                 ((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
                     C103 * C126 - C115 * C119) *
                        C116 +
                    (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
                     C103 * C140 - C115 * C129) *
                        C47384) *
                       C47369 * C47508 +
                   ((C113 * C414 - C101 * C424 + C114 * C415 - C102 * C425 +
                     C115 * C416 - C103 * C426) *
                        C116 +
                    (C113 * C427 - C101 * C444 + C114 * C428 - C102 * C445 +
                     C115 * C429 - C103 * C446) *
                        C47384) *
                       C47369 * C47505 +
                   ((C101 * C430 - C113 * C417 + C102 * C431 - C114 * C418 +
                     C103 * C432 - C115 * C419) *
                        C116 +
                    (C101 * C447 - C113 * C433 + C102 * C448 - C114 * C434 +
                     C103 * C449 - C115 * C435) *
                        C47384) *
                       C47369 * C47496 +
                   ((C113 * C1844 - C101 * C1850 + C114 * C1845 - C102 * C1851 +
                     C115 * C1846 - C103 * C1852) *
                        C116 +
                    (C113 * C1853 - C101 * C1862 + C114 * C1854 - C102 * C1863 +
                     C115 * C1855 - C103 * C1864) *
                        C47384) *
                       C47369 * C47477) *
                      C47163 * C2440 +
                  (((C113 * C118 - C101 * C125 + C114 * C119 - C102 * C126 +
                     C115 * C120 - C103 * C130) *
                        C116 +
                    (C113 * C128 - C101 * C139 + C114 * C129 - C102 * C140 +
                     C115 * C131 - C103 * C141) *
                        C47384) *
                       C47369 * C47508 +
                   ((C101 * C425 - C113 * C415 + C102 * C426 - C114 * C416 +
                     C103 * C436 - C115 * C420) *
                        C116 +
                    (C101 * C445 - C113 * C428 + C102 * C446 - C114 * C429 +
                     C103 * C450 - C115 * C437) *
                        C47384) *
                       C47369 * C47505 +
                   ((C113 * C418 - C101 * C431 + C114 * C419 - C102 * C432 +
                     C115 * C421 - C103 * C438) *
                        C116 +
                    (C113 * C434 - C101 * C448 + C114 * C435 - C102 * C449 +
                     C115 * C439 - C103 * C451) *
                        C47384) *
                       C47369 * C47496 +
                   ((C101 * C1851 - C113 * C1845 + C102 * C1852 - C114 * C1846 +
                     C103 * C2121 - C115 * C2120) *
                        C116 +
                    (C101 * C1863 - C113 * C1854 + C102 * C1864 - C114 * C1855 +
                     C103 * C2123 - C115 * C2122) *
                        C47384) *
                       C47369 * C47477) *
                      C47163 * C47146)) /
                    (p * q * std::sqrt(p + q));
    d2ee[18] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 ((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
                     C103 * C126 - C115 * C119) *
                        C116 +
                    (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
                     C103 * C140 - C115 * C129) *
                        C47384) *
                       C47369 * C47264 +
                   ((C113 * C414 - C101 * C424 + C114 * C415 - C102 * C425 +
                     C115 * C416 - C103 * C426) *
                        C116 +
                    (C113 * C427 - C101 * C444 + C114 * C428 - C102 * C445 +
                     C115 * C429 - C103 * C446) *
                        C47384) *
                       C47369 * C47271 +
                   ((C101 * C430 - C113 * C417 + C102 * C431 - C114 * C418 +
                     C103 * C432 - C115 * C419) *
                        C116 +
                    (C101 * C447 - C113 * C433 + C102 * C448 - C114 * C434 +
                     C103 * C449 - C115 * C435) *
                        C47384) *
                       C47369 * C3602) *
                      C47163 * C47140 +
                  (((C113 * C118 - C101 * C125 + C114 * C119 - C102 * C126 +
                     C115 * C120 - C103 * C130) *
                        C116 +
                    (C113 * C128 - C101 * C139 + C114 * C129 - C102 * C140 +
                     C115 * C131 - C103 * C141) *
                        C47384) *
                       C47369 * C47264 +
                   ((C101 * C425 - C113 * C415 + C102 * C426 - C114 * C416 +
                     C103 * C436 - C115 * C420) *
                        C116 +
                    (C101 * C445 - C113 * C428 + C102 * C446 - C114 * C429 +
                     C103 * C450 - C115 * C437) *
                        C47384) *
                       C47369 * C47271 +
                   ((C113 * C418 - C101 * C431 + C114 * C419 - C102 * C432 +
                     C115 * C421 - C103 * C438) *
                        C116 +
                    (C113 * C434 - C101 * C448 + C114 * C435 - C102 * C449 +
                     C115 * C439 - C103 * C451) *
                        C47384) *
                       C47369 * C3602) *
                      C47163 * C47149 +
                  (((C101 * C126 - C113 * C119 + C102 * C130 - C114 * C120 +
                     C103 * C132 - C115 * C121) *
                        C116 +
                    (C101 * C140 - C113 * C129 + C102 * C141 - C114 * C131 +
                     C103 * C142 - C115 * C133) *
                        C47384) *
                       C47369 * C47264 +
                   ((C113 * C416 - C101 * C426 + C114 * C420 - C102 * C436 +
                     C115 * C422 - C103 * C440) *
                        C116 +
                    (C113 * C429 - C101 * C446 + C114 * C437 - C102 * C450 +
                     C115 * C441 - C103 * C452) *
                        C47384) *
                       C47369 * C47271 +
                   ((C101 * C432 - C113 * C419 + C102 * C438 - C114 * C421 +
                     C103 * C442 - C115 * C423) *
                        C116 +
                    (C101 * C449 - C113 * C435 + C102 * C451 - C114 * C439 +
                     C103 * C453 - C115 * C443) *
                        C47384) *
                       C47369 * C3602) *
                      C47163 * C2703)) /
                (p * q * std::sqrt(p + q));
    d2ee[19] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 ((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
                     C103 * C126 - C115 * C119) *
                        C116 +
                    (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
                     C103 * C140 - C115 * C129) *
                        C47384) *
                       C47369 * C3094 +
                   ((C113 * C414 - C101 * C424 + C114 * C415 - C102 * C425 +
                     C115 * C416 - C103 * C426) *
                        C116 +
                    (C113 * C427 - C101 * C444 + C114 * C428 - C102 * C445 +
                     C115 * C429 - C103 * C446) *
                        C47384) *
                       C47369 * C47268) *
                      C47163 * C47506 +
                  (((C113 * C118 - C101 * C125 + C114 * C119 - C102 * C126 +
                     C115 * C120 - C103 * C130) *
                        C116 +
                    (C113 * C128 - C101 * C139 + C114 * C129 - C102 * C140 +
                     C115 * C131 - C103 * C141) *
                        C47384) *
                       C47369 * C3094 +
                   ((C101 * C425 - C113 * C415 + C102 * C426 - C114 * C416 +
                     C103 * C436 - C115 * C420) *
                        C116 +
                    (C101 * C445 - C113 * C428 + C102 * C446 - C114 * C429 +
                     C103 * C450 - C115 * C437) *
                        C47384) *
                       C47369 * C47268) *
                      C47163 * C47499 +
                  (((C101 * C126 - C113 * C119 + C102 * C130 - C114 * C120 +
                     C103 * C132 - C115 * C121) *
                        C116 +
                    (C101 * C140 - C113 * C129 + C102 * C141 - C114 * C131 +
                     C103 * C142 - C115 * C133) *
                        C47384) *
                       C47369 * C3094 +
                   ((C113 * C416 - C101 * C426 + C114 * C420 - C102 * C436 +
                     C115 * C422 - C103 * C440) *
                        C116 +
                    (C113 * C429 - C101 * C446 + C114 * C437 - C102 * C450 +
                     C115 * C441 - C103 * C452) *
                        C47384) *
                       C47369 * C47268) *
                      C47163 * C47486 +
                  (((C113 * C120 - C101 * C130 + C114 * C121 - C102 * C132 +
                     C115 * C122 - C103 * C134) *
                        C116 +
                    (C113 * C131 - C101 * C141 + C114 * C133 - C102 * C142 +
                     C115 * C135 - C103 * C143) *
                        C47384) *
                       C47369 * C3094 +
                   ((C101 * C436 - C113 * C420 + C102 * C440 - C114 * C422 +
                     C103 * C663 - C115 * C662) *
                        C116 +
                    (C101 * C450 - C113 * C437 + C102 * C452 - C114 * C441 +
                     C103 * C665 - C115 * C664) *
                        C47384) *
                       C47369 * C47268) *
                      C47163 * C47465)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
                      C103 * C126 - C115 * C119) *
                         C116 +
                     (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
                      C103 * C140 - C115 * C129) *
                         C47384) *
                        C47369 * C3094 +
                    ((C113 * C414 - C101 * C424 + C114 * C415 - C102 * C425 +
                      C115 * C416 - C103 * C426) *
                         C116 +
                     (C113 * C427 - C101 * C444 + C114 * C428 - C102 * C445 +
                      C115 * C429 - C103 * C446) *
                         C47384) *
                        C47369 * C47268) *
                       C47500 +
                   (((C113 * C261 - C101 * C271 + C114 * C262 - C102 * C272 +
                      C115 * C263 - C103 * C273) *
                         C116 +
                     (C113 * C274 - C101 * C291 + C114 * C275 - C102 * C292 +
                      C115 * C276 - C103 * C293) *
                         C47384) *
                        C47369 * C3094 +
                    ((C101 * C817 - C113 * C812 + C102 * C818 - C114 * C813 +
                      C103 * C819 - C115 * C814) *
                         C116 +
                     (C101 * C827 - C113 * C820 + C102 * C828 - C114 * C821 +
                      C103 * C829 - C115 * C822) *
                         C47384) *
                        C47369 * C47268) *
                       C47488 +
                   (((C101 * C277 - C113 * C264 + C102 * C278 - C114 * C265 +
                      C103 * C279 - C115 * C266) *
                         C116 +
                     (C101 * C294 - C113 * C280 + C102 * C295 - C114 * C281 +
                      C103 * C296 - C115 * C282) *
                         C47384) *
                        C47369 * C3094 +
                    ((C113 * C1153 - C101 * C1165 + C114 * C1154 -
                      C102 * C1166 + C115 * C1155 - C103 * C1167) *
                         C116 +
                     (C113 * C1168 - C101 * C1180 + C114 * C1169 -
                      C102 * C1181 + C115 * C1170 - C103 * C1182) *
                         C47384) *
                        C47369 * C47268) *
                       C47461) *
                      C2440 +
                  ((((C113 * C118 - C101 * C125 + C114 * C119 - C102 * C126 +
                      C115 * C120 - C103 * C130) *
                         C116 +
                     (C113 * C128 - C101 * C139 + C114 * C129 - C102 * C140 +
                      C115 * C131 - C103 * C141) *
                         C47384) *
                        C47369 * C3094 +
                    ((C101 * C425 - C113 * C415 + C102 * C426 - C114 * C416 +
                      C103 * C436 - C115 * C420) *
                         C116 +
                     (C101 * C445 - C113 * C428 + C102 * C446 - C114 * C429 +
                      C103 * C450 - C115 * C437) *
                         C47384) *
                        C47369 * C47268) *
                       C47500 +
                   (((C101 * C272 - C113 * C262 + C102 * C273 - C114 * C263 +
                      C103 * C283 - C115 * C267) *
                         C116 +
                     (C101 * C292 - C113 * C275 + C102 * C293 - C114 * C276 +
                      C103 * C297 - C115 * C284) *
                         C47384) *
                        C47369 * C3094 +
                    ((C113 * C813 - C101 * C818 + C114 * C814 - C102 * C819 +
                      C115 * C815 - C103 * C823) *
                         C116 +
                     (C113 * C821 - C101 * C828 + C114 * C822 - C102 * C829 +
                      C115 * C824 - C103 * C830) *
                         C47384) *
                        C47369 * C47268) *
                       C47488 +
                   (((C113 * C265 - C101 * C278 + C114 * C266 - C102 * C279 +
                      C115 * C268 - C103 * C285) *
                         C116 +
                     (C113 * C281 - C101 * C295 + C114 * C282 - C102 * C296 +
                      C115 * C286 - C103 * C298) *
                         C47384) *
                        C47369 * C3094 +
                    ((C101 * C1166 - C113 * C1154 + C102 * C1167 -
                      C114 * C1155 + C103 * C1441 - C115 * C1440) *
                         C116 +
                     (C101 * C1181 - C113 * C1169 + C102 * C1182 -
                      C114 * C1170 + C103 * C1443 - C115 * C1442) *
                         C47384) *
                        C47369 * C47268) *
                       C47461) *
                      C47146)) /
                    (p * q * std::sqrt(p + q));
    d2ee[20] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 ((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
                     C103 * C126 - C115 * C119) *
                        C116 +
                    (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
                     C103 * C140 - C115 * C129) *
                        C47384) *
                       C47369 * C47181 * C47429 +
                   ((C113 * C261 - C101 * C271 + C114 * C262 - C102 * C272 +
                     C115 * C263 - C103 * C273) *
                        C116 +
                    (C113 * C274 - C101 * C291 + C114 * C275 - C102 * C292 +
                     C115 * C276 - C103 * C293) *
                        C47384) *
                       C47369 * C47181 * C47226) *
                      C554 +
                  (((C113 * C118 - C101 * C125 + C114 * C119 - C102 * C126 +
                     C115 * C120 - C103 * C130) *
                        C116 +
                    (C113 * C128 - C101 * C139 + C114 * C129 - C102 * C140 +
                     C115 * C131 - C103 * C141) *
                        C47384) *
                       C47369 * C47181 * C47429 +
                   ((C101 * C272 - C113 * C262 + C102 * C273 - C114 * C263 +
                     C103 * C283 - C115 * C267) *
                        C116 +
                    (C101 * C292 - C113 * C275 + C102 * C293 - C114 * C276 +
                     C103 * C297 - C115 * C284) *
                        C47384) *
                       C47369 * C47181 * C47226) *
                      C555 +
                  (((C101 * C126 - C113 * C119 + C102 * C130 - C114 * C120 +
                     C103 * C132 - C115 * C121) *
                        C116 +
                    (C101 * C140 - C113 * C129 + C102 * C141 - C114 * C131 +
                     C103 * C142 - C115 * C133) *
                        C47384) *
                       C47369 * C47181 * C47429 +
                   ((C113 * C263 - C101 * C273 + C114 * C267 - C102 * C283 +
                     C115 * C269 - C103 * C287) *
                        C116 +
                    (C113 * C276 - C101 * C293 + C114 * C284 - C102 * C297 +
                     C115 * C288 - C103 * C299) *
                        C47384) *
                       C47369 * C47181 * C47226) *
                      C556 +
                  (((C113 * C120 - C101 * C130 + C114 * C121 - C102 * C132 +
                     C115 * C122 - C103 * C134) *
                        C116 +
                    (C113 * C131 - C101 * C141 + C114 * C133 - C102 * C142 +
                     C115 * C135 - C103 * C143) *
                        C47384) *
                       C47369 * C47181 * C47429 +
                   ((C101 * C283 - C113 * C267 + C102 * C287 - C114 * C269 +
                     C103 * C559 - C115 * C558) *
                        C116 +
                    (C101 * C297 - C113 * C284 + C102 * C299 - C114 * C288 +
                     C103 * C561 - C115 * C560) *
                        C47384) *
                       C47369 * C47181 * C47226) *
                      C47465)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 ((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
                     C103 * C126 - C115 * C119) *
                        C116 +
                    (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
                     C103 * C140 - C115 * C129) *
                        C47384) *
                       C47369 * C47181 * C1284 +
                   ((C113 * C261 - C101 * C271 + C114 * C262 - C102 * C272 +
                     C115 * C263 - C103 * C273) *
                        C116 +
                    (C113 * C274 - C101 * C291 + C114 * C275 - C102 * C292 +
                     C115 * C276 - C103 * C293) *
                        C47384) *
                       C47369 * C47181 * C1285 +
                   ((C101 * C277 - C113 * C264 + C102 * C278 - C114 * C265 +
                     C103 * C279 - C115 * C266) *
                        C116 +
                    (C101 * C294 - C113 * C280 + C102 * C295 - C114 * C281 +
                     C103 * C296 - C115 * C282) *
                        C47384) *
                       C47369 * C47181 * C1286 +
                   ((C113 * C1016 - C101 * C1022 + C114 * C1017 - C102 * C1023 +
                     C115 * C1018 - C103 * C1024) *
                        C116 +
                    (C113 * C1025 - C101 * C1034 + C114 * C1026 - C102 * C1035 +
                     C115 * C1027 - C103 * C1036) *
                        C47384) *
                       C47369 * C47181 * C47471) *
                      C47415 +
                  (((C113 * C118 - C101 * C125 + C114 * C119 - C102 * C126 +
                     C115 * C120 - C103 * C130) *
                        C116 +
                    (C113 * C128 - C101 * C139 + C114 * C129 - C102 * C140 +
                     C115 * C131 - C103 * C141) *
                        C47384) *
                       C47369 * C47181 * C1284 +
                   ((C101 * C272 - C113 * C262 + C102 * C273 - C114 * C263 +
                     C103 * C283 - C115 * C267) *
                        C116 +
                    (C101 * C292 - C113 * C275 + C102 * C293 - C114 * C276 +
                     C103 * C297 - C115 * C284) *
                        C47384) *
                       C47369 * C47181 * C1285 +
                   ((C113 * C265 - C101 * C278 + C114 * C266 - C102 * C279 +
                     C115 * C268 - C103 * C285) *
                        C116 +
                    (C113 * C281 - C101 * C295 + C114 * C282 - C102 * C296 +
                     C115 * C286 - C103 * C298) *
                        C47384) *
                       C47369 * C47181 * C1286 +
                   ((C101 * C1023 - C113 * C1017 + C102 * C1024 - C114 * C1018 +
                     C103 * C1291 - C115 * C1290) *
                        C116 +
                    (C101 * C1035 - C113 * C1026 + C102 * C1036 - C114 * C1027 +
                     C103 * C1293 - C115 * C1292) *
                        C47384) *
                       C47369 * C47181 * C47471) *
                      C47146)) /
                    (p * q * std::sqrt(p + q));
    d2ee[21] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
                      C103 * C126 - C115 * C119) *
                         C116 +
                     (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
                      C103 * C140 - C115 * C129) *
                         C47384) *
                        C47369 * C47430 +
                    ((C113 * C414 - C101 * C424 + C114 * C415 - C102 * C425 +
                      C115 * C416 - C103 * C426) *
                         C116 +
                     (C113 * C427 - C101 * C444 + C114 * C428 - C102 * C445 +
                      C115 * C429 - C103 * C446) *
                         C47384) *
                        C47369 * C47268) *
                       C47429 +
                   (((C113 * C261 - C101 * C271 + C114 * C262 - C102 * C272 +
                      C115 * C263 - C103 * C273) *
                         C116 +
                     (C113 * C274 - C101 * C291 + C114 * C275 - C102 * C292 +
                      C115 * C276 - C103 * C293) *
                         C47384) *
                        C47369 * C47430 +
                    ((C101 * C817 - C113 * C812 + C102 * C818 - C114 * C813 +
                      C103 * C819 - C115 * C814) *
                         C116 +
                     (C101 * C827 - C113 * C820 + C102 * C828 - C114 * C821 +
                      C103 * C829 - C115 * C822) *
                         C47384) *
                        C47369 * C47268) *
                       C47226) *
                      C258 +
                  ((((C113 * C118 - C101 * C125 + C114 * C119 - C102 * C126 +
                      C115 * C120 - C103 * C130) *
                         C116 +
                     (C113 * C128 - C101 * C139 + C114 * C129 - C102 * C140 +
                      C115 * C131 - C103 * C141) *
                         C47384) *
                        C47369 * C47430 +
                    ((C101 * C425 - C113 * C415 + C102 * C426 - C114 * C416 +
                      C103 * C436 - C115 * C420) *
                         C116 +
                     (C101 * C445 - C113 * C428 + C102 * C446 - C114 * C429 +
                      C103 * C450 - C115 * C437) *
                         C47384) *
                        C47369 * C47268) *
                       C47429 +
                   (((C101 * C272 - C113 * C262 + C102 * C273 - C114 * C263 +
                      C103 * C283 - C115 * C267) *
                         C116 +
                     (C101 * C292 - C113 * C275 + C102 * C293 - C114 * C276 +
                      C103 * C297 - C115 * C284) *
                         C47384) *
                        C47369 * C47430 +
                    ((C113 * C813 - C101 * C818 + C114 * C814 - C102 * C819 +
                      C115 * C815 - C103 * C823) *
                         C116 +
                     (C113 * C821 - C101 * C828 + C114 * C822 - C102 * C829 +
                      C115 * C824 - C103 * C830) *
                         C47384) *
                        C47369 * C47268) *
                       C47226) *
                      C259 +
                  ((((C101 * C126 - C113 * C119 + C102 * C130 - C114 * C120 +
                      C103 * C132 - C115 * C121) *
                         C116 +
                     (C101 * C140 - C113 * C129 + C102 * C141 - C114 * C131 +
                      C103 * C142 - C115 * C133) *
                         C47384) *
                        C47369 * C47430 +
                    ((C113 * C416 - C101 * C426 + C114 * C420 - C102 * C436 +
                      C115 * C422 - C103 * C440) *
                         C116 +
                     (C113 * C429 - C101 * C446 + C114 * C437 - C102 * C450 +
                      C115 * C441 - C103 * C452) *
                         C47384) *
                        C47369 * C47268) *
                       C47429 +
                   (((C113 * C263 - C101 * C273 + C114 * C267 - C102 * C283 +
                      C115 * C269 - C103 * C287) *
                         C116 +
                     (C113 * C276 - C101 * C293 + C114 * C284 - C102 * C297 +
                      C115 * C288 - C103 * C299) *
                         C47384) *
                        C47369 * C47430 +
                    ((C101 * C819 - C113 * C814 + C102 * C823 - C114 * C815 +
                      C103 * C825 - C115 * C816) *
                         C116 +
                     (C101 * C829 - C113 * C822 + C102 * C830 - C114 * C824 +
                      C103 * C831 - C115 * C826) *
                         C47384) *
                        C47369 * C47268) *
                       C47226) *
                      C47455)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 ((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
                     C103 * C126 - C115 * C119) *
                        C116 +
                    (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
                     C103 * C140 - C115 * C129) *
                        C47384) *
                       C47369 * C47430 +
                   ((C113 * C414 - C101 * C424 + C114 * C415 - C102 * C425 +
                     C115 * C416 - C103 * C426) *
                        C116 +
                    (C113 * C427 - C101 * C444 + C114 * C428 - C102 * C445 +
                     C115 * C429 - C103 * C446) *
                        C47384) *
                       C47369 * C47268) *
                      C1284 +
                  (((C113 * C261 - C101 * C271 + C114 * C262 - C102 * C272 +
                     C115 * C263 - C103 * C273) *
                        C116 +
                    (C113 * C274 - C101 * C291 + C114 * C275 - C102 * C292 +
                     C115 * C276 - C103 * C293) *
                        C47384) *
                       C47369 * C47430 +
                   ((C101 * C817 - C113 * C812 + C102 * C818 - C114 * C813 +
                     C103 * C819 - C115 * C814) *
                        C116 +
                    (C101 * C827 - C113 * C820 + C102 * C828 - C114 * C821 +
                     C103 * C829 - C115 * C822) *
                        C47384) *
                       C47369 * C47268) *
                      C1285 +
                  (((C101 * C277 - C113 * C264 + C102 * C278 - C114 * C265 +
                     C103 * C279 - C115 * C266) *
                        C116 +
                    (C101 * C294 - C113 * C280 + C102 * C295 - C114 * C281 +
                     C103 * C296 - C115 * C282) *
                        C47384) *
                       C47369 * C47430 +
                   ((C113 * C1153 - C101 * C1165 + C114 * C1154 - C102 * C1166 +
                     C115 * C1155 - C103 * C1167) *
                        C116 +
                    (C113 * C1168 - C101 * C1180 + C114 * C1169 - C102 * C1181 +
                     C115 * C1170 - C103 * C1182) *
                        C47384) *
                       C47369 * C47268) *
                      C1286 +
                  (((C113 * C1016 - C101 * C1022 + C114 * C1017 - C102 * C1023 +
                     C115 * C1018 - C103 * C1024) *
                        C116 +
                    (C113 * C1025 - C101 * C1034 + C114 * C1026 - C102 * C1035 +
                     C115 * C1027 - C103 * C1036) *
                        C47384) *
                       C47369 * C47430 +
                   ((C101 * C1545 - C113 * C1542 + C102 * C1546 - C114 * C1543 +
                     C103 * C1547 - C115 * C1544) *
                        C116 +
                    (C101 * C1551 - C113 * C1548 + C102 * C1552 - C114 * C1549 +
                     C103 * C1553 - C115 * C1550) *
                        C47384) *
                       C47369 * C47268) *
                      C47471) *
                 C47135) /
                    (p * q * std::sqrt(p + q));
    d2ee[22] += (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                 ((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
                     C103 * C126 - C115 * C119) *
                        C116 +
                    (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
                     C103 * C140 - C115 * C129) *
                        C47384) *
                       C47369 * C47181 * C47500 +
                   ((C113 * C261 - C101 * C271 + C114 * C262 - C102 * C272 +
                     C115 * C263 - C103 * C273) *
                        C116 +
                    (C113 * C274 - C101 * C291 + C114 * C275 - C102 * C292 +
                     C115 * C276 - C103 * C293) *
                        C47384) *
                       C47369 * C47181 * C47488 +
                   ((C101 * C277 - C113 * C264 + C102 * C278 - C114 * C265 +
                     C103 * C279 - C115 * C266) *
                        C116 +
                    (C101 * C294 - C113 * C280 + C102 * C295 - C114 * C281 +
                     C103 * C296 - C115 * C282) *
                        C47384) *
                       C47369 * C47181 * C47461) *
                      C258 +
                  (((C113 * C118 - C101 * C125 + C114 * C119 - C102 * C126 +
                     C115 * C120 - C103 * C130) *
                        C116 +
                    (C113 * C128 - C101 * C139 + C114 * C129 - C102 * C140 +
                     C115 * C131 - C103 * C141) *
                        C47384) *
                       C47369 * C47181 * C47500 +
                   ((C101 * C272 - C113 * C262 + C102 * C273 - C114 * C263 +
                     C103 * C283 - C115 * C267) *
                        C116 +
                    (C101 * C292 - C113 * C275 + C102 * C293 - C114 * C276 +
                     C103 * C297 - C115 * C284) *
                        C47384) *
                       C47369 * C47181 * C47488 +
                   ((C113 * C265 - C101 * C278 + C114 * C266 - C102 * C279 +
                     C115 * C268 - C103 * C285) *
                        C116 +
                    (C113 * C281 - C101 * C295 + C114 * C282 - C102 * C296 +
                     C115 * C286 - C103 * C298) *
                        C47384) *
                       C47369 * C47181 * C47461) *
                      C259 +
                  (((C101 * C126 - C113 * C119 + C102 * C130 - C114 * C120 +
                     C103 * C132 - C115 * C121) *
                        C116 +
                    (C101 * C140 - C113 * C129 + C102 * C141 - C114 * C131 +
                     C103 * C142 - C115 * C133) *
                        C47384) *
                       C47369 * C47181 * C47500 +
                   ((C113 * C263 - C101 * C273 + C114 * C267 - C102 * C283 +
                     C115 * C269 - C103 * C287) *
                        C116 +
                    (C113 * C276 - C101 * C293 + C114 * C284 - C102 * C297 +
                     C115 * C288 - C103 * C299) *
                        C47384) *
                       C47369 * C47181 * C47488 +
                   ((C101 * C279 - C113 * C266 + C102 * C285 - C114 * C268 +
                     C103 * C289 - C115 * C270) *
                        C116 +
                    (C101 * C296 - C113 * C282 + C102 * C298 - C114 * C286 +
                     C103 * C300 - C115 * C290) *
                        C47384) *
                       C47369 * C47181 * C47461) *
                      C47455)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                 (((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
                    C103 * C126 - C115 * C119) *
                       C116 +
                   (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
                    C103 * C140 - C115 * C129) *
                       C47384) *
                      C47369 * C47181 * C47163 * C108 +
                  ((C113 * C118 - C101 * C125 + C114 * C119 - C102 * C126 +
                    C115 * C120 - C103 * C130) *
                       C116 +
                   (C113 * C128 - C101 * C139 + C114 * C129 - C102 * C140 +
                    C115 * C131 - C103 * C141) *
                       C47384) *
                      C47369 * C47181 * C47163 * C109 +
                  ((C101 * C126 - C113 * C119 + C102 * C130 - C114 * C120 +
                    C103 * C132 - C115 * C121) *
                       C116 +
                   (C101 * C140 - C113 * C129 + C102 * C141 - C114 * C131 +
                    C103 * C142 - C115 * C133) *
                       C47384) *
                      C47369 * C47181 * C47163 * C110 +
                  ((C113 * C120 - C101 * C130 + C114 * C121 - C102 * C132 +
                    C115 * C122 - C103 * C134) *
                       C116 +
                   (C113 * C131 - C101 * C141 + C114 * C133 - C102 * C142 +
                    C115 * C135 - C103 * C143) *
                       C47384) *
                      C47369 * C47181 * C47163 * C111 +
                  ((C101 * C132 - C113 * C121 + C102 * C134 - C114 * C122 +
                    C103 * C136 - C115 * C123) *
                       C116 +
                   (C101 * C142 - C113 * C133 + C102 * C143 - C114 * C135 +
                    C103 * C144 - C115 * C137) *
                       C47384) *
                      C47369 * C47181 * C47163 * C112)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 ((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
                     C103 * C126 - C115 * C119) *
                        C116 +
                    (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
                     C103 * C140 - C115 * C129) *
                        C47384) *
                       C47369 * C47501 +
                   ((C113 * C414 - C101 * C424 + C114 * C415 - C102 * C425 +
                     C115 * C416 - C103 * C426) *
                        C116 +
                    (C113 * C427 - C101 * C444 + C114 * C428 - C102 * C445 +
                     C115 * C429 - C103 * C446) *
                        C47384) *
                       C47369 * C47490 +
                   ((C101 * C430 - C113 * C417 + C102 * C431 - C114 * C418 +
                     C103 * C432 - C115 * C419) *
                        C116 +
                    (C101 * C447 - C113 * C433 + C102 * C448 - C114 * C434 +
                     C103 * C449 - C115 * C435) *
                        C47384) *
                       C47369 * C47464) *
                      C47163 * C258 +
                  (((C113 * C118 - C101 * C125 + C114 * C119 - C102 * C126 +
                     C115 * C120 - C103 * C130) *
                        C116 +
                    (C113 * C128 - C101 * C139 + C114 * C129 - C102 * C140 +
                     C115 * C131 - C103 * C141) *
                        C47384) *
                       C47369 * C47501 +
                   ((C101 * C425 - C113 * C415 + C102 * C426 - C114 * C416 +
                     C103 * C436 - C115 * C420) *
                        C116 +
                    (C101 * C445 - C113 * C428 + C102 * C446 - C114 * C429 +
                     C103 * C450 - C115 * C437) *
                        C47384) *
                       C47369 * C47490 +
                   ((C113 * C418 - C101 * C431 + C114 * C419 - C102 * C432 +
                     C115 * C421 - C103 * C438) *
                        C116 +
                    (C113 * C434 - C101 * C448 + C114 * C435 - C102 * C449 +
                     C115 * C439 - C103 * C451) *
                        C47384) *
                       C47369 * C47464) *
                      C47163 * C259 +
                  (((C101 * C126 - C113 * C119 + C102 * C130 - C114 * C120 +
                     C103 * C132 - C115 * C121) *
                        C116 +
                    (C101 * C140 - C113 * C129 + C102 * C141 - C114 * C131 +
                     C103 * C142 - C115 * C133) *
                        C47384) *
                       C47369 * C47501 +
                   ((C113 * C416 - C101 * C426 + C114 * C420 - C102 * C436 +
                     C115 * C422 - C103 * C440) *
                        C116 +
                    (C113 * C429 - C101 * C446 + C114 * C437 - C102 * C450 +
                     C115 * C441 - C103 * C452) *
                        C47384) *
                       C47369 * C47490 +
                   ((C101 * C432 - C113 * C419 + C102 * C438 - C114 * C421 +
                     C103 * C442 - C115 * C423) *
                        C116 +
                    (C101 * C449 - C113 * C435 + C102 * C451 - C114 * C439 +
                     C103 * C453 - C115 * C443) *
                        C47384) *
                       C47369 * C47464) *
                      C47163 * C47455)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                 ((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
                     C103 * C126 - C115 * C119) *
                        C116 +
                    (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
                     C103 * C140 - C115 * C129) *
                        C47384) *
                       C47369 * C47181 * C942 +
                   ((C113 * C261 - C101 * C271 + C114 * C262 - C102 * C272 +
                     C115 * C263 - C103 * C273) *
                        C116 +
                    (C113 * C274 - C101 * C291 + C114 * C275 - C102 * C292 +
                     C115 * C276 - C103 * C293) *
                        C47384) *
                       C47369 * C47181 * C943 +
                   ((C101 * C277 - C113 * C264 + C102 * C278 - C114 * C265 +
                     C103 * C279 - C115 * C266) *
                        C116 +
                    (C101 * C294 - C113 * C280 + C102 * C295 - C114 * C281 +
                     C103 * C296 - C115 * C282) *
                        C47384) *
                       C47369 * C47181 * C47461) *
                      C47497 +
                  (((C113 * C118 - C101 * C125 + C114 * C119 - C102 * C126 +
                     C115 * C120 - C103 * C130) *
                        C116 +
                    (C113 * C128 - C101 * C139 + C114 * C129 - C102 * C140 +
                     C115 * C131 - C103 * C141) *
                        C47384) *
                       C47369 * C47181 * C942 +
                   ((C101 * C272 - C113 * C262 + C102 * C273 - C114 * C263 +
                     C103 * C283 - C115 * C267) *
                        C116 +
                    (C101 * C292 - C113 * C275 + C102 * C293 - C114 * C276 +
                     C103 * C297 - C115 * C284) *
                        C47384) *
                       C47369 * C47181 * C943 +
                   ((C113 * C265 - C101 * C278 + C114 * C266 - C102 * C279 +
                     C115 * C268 - C103 * C285) *
                        C116 +
                    (C113 * C281 - C101 * C295 + C114 * C282 - C102 * C296 +
                     C115 * C286 - C103 * C298) *
                        C47384) *
                       C47369 * C47181 * C47461) *
                      C47484 +
                  (((C101 * C126 - C113 * C119 + C102 * C130 - C114 * C120 +
                     C103 * C132 - C115 * C121) *
                        C116 +
                    (C101 * C140 - C113 * C129 + C102 * C141 - C114 * C131 +
                     C103 * C142 - C115 * C133) *
                        C47384) *
                       C47369 * C47181 * C942 +
                   ((C113 * C263 - C101 * C273 + C114 * C267 - C102 * C283 +
                     C115 * C269 - C103 * C287) *
                        C116 +
                    (C113 * C276 - C101 * C293 + C114 * C284 - C102 * C297 +
                     C115 * C288 - C103 * C299) *
                        C47384) *
                       C47369 * C47181 * C943 +
                   ((C101 * C279 - C113 * C266 + C102 * C285 - C114 * C268 +
                     C103 * C289 - C115 * C270) *
                        C116 +
                    (C101 * C296 - C113 * C282 + C102 * C298 - C114 * C286 +
                     C103 * C300 - C115 * C290) *
                        C47384) *
                       C47369 * C47181 * C47461) *
                      C47455)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                 (((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
                    C103 * C126 - C115 * C119) *
                       C116 +
                   (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
                    C103 * C140 - C115 * C129) *
                       C47384) *
                      C47369 * C47181 * C1010 +
                  ((C113 * C261 - C101 * C271 + C114 * C262 - C102 * C272 +
                    C115 * C263 - C103 * C273) *
                       C116 +
                   (C113 * C274 - C101 * C291 + C114 * C275 - C102 * C292 +
                    C115 * C276 - C103 * C293) *
                       C47384) *
                      C47369 * C47181 * C1011 +
                  ((C101 * C277 - C113 * C264 + C102 * C278 - C114 * C265 +
                    C103 * C279 - C115 * C266) *
                       C116 +
                   (C101 * C294 - C113 * C280 + C102 * C295 - C114 * C281 +
                    C103 * C296 - C115 * C282) *
                       C47384) *
                      C47369 * C47181 * C1012 +
                  ((C113 * C1016 - C101 * C1022 + C114 * C1017 - C102 * C1023 +
                    C115 * C1018 - C103 * C1024) *
                       C116 +
                   (C113 * C1025 - C101 * C1034 + C114 * C1026 - C102 * C1035 +
                    C115 * C1027 - C103 * C1036) *
                       C47384) *
                      C47369 * C47181 * C1013 +
                  ((C101 * C1028 - C113 * C1019 + C102 * C1029 - C114 * C1020 +
                    C103 * C1030 - C115 * C1021) *
                       C116 +
                   (C101 * C1037 - C113 * C1031 + C102 * C1038 - C114 * C1032 +
                    C103 * C1039 - C115 * C1033) *
                       C47384) *
                      C47369 * C47181 * C1014) *
                 C47135) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 ((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
                     C103 * C126 - C115 * C119) *
                        C116 +
                    (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
                     C103 * C140 - C115 * C129) *
                        C47384) *
                       C47369 * C47501 +
                   ((C113 * C414 - C101 * C424 + C114 * C415 - C102 * C425 +
                     C115 * C416 - C103 * C426) *
                        C116 +
                    (C113 * C427 - C101 * C444 + C114 * C428 - C102 * C445 +
                     C115 * C429 - C103 * C446) *
                        C47384) *
                       C47369 * C47490 +
                   ((C101 * C430 - C113 * C417 + C102 * C431 - C114 * C418 +
                     C103 * C432 - C115 * C419) *
                        C116 +
                    (C101 * C447 - C113 * C433 + C102 * C448 - C114 * C434 +
                     C103 * C449 - C115 * C435) *
                        C47384) *
                       C47369 * C47464) *
                      C942 +
                  (((C113 * C261 - C101 * C271 + C114 * C262 - C102 * C272 +
                     C115 * C263 - C103 * C273) *
                        C116 +
                    (C113 * C274 - C101 * C291 + C114 * C275 - C102 * C292 +
                     C115 * C276 - C103 * C293) *
                        C47384) *
                       C47369 * C47501 +
                   ((C101 * C817 - C113 * C812 + C102 * C818 - C114 * C813 +
                     C103 * C819 - C115 * C814) *
                        C116 +
                    (C101 * C827 - C113 * C820 + C102 * C828 - C114 * C821 +
                     C103 * C829 - C115 * C822) *
                        C47384) *
                       C47369 * C47490 +
                   ((C113 * C1150 - C101 * C1159 + C114 * C1151 - C102 * C1160 +
                     C115 * C1152 - C103 * C1161) *
                        C116 +
                    (C113 * C1162 - C101 * C1177 + C114 * C1163 - C102 * C1178 +
                     C115 * C1164 - C103 * C1179) *
                        C47384) *
                       C47369 * C47464) *
                      C943 +
                  (((C101 * C277 - C113 * C264 + C102 * C278 - C114 * C265 +
                     C103 * C279 - C115 * C266) *
                        C116 +
                    (C101 * C294 - C113 * C280 + C102 * C295 - C114 * C281 +
                     C103 * C296 - C115 * C282) *
                        C47384) *
                       C47369 * C47501 +
                   ((C113 * C1153 - C101 * C1165 + C114 * C1154 - C102 * C1166 +
                     C115 * C1155 - C103 * C1167) *
                        C116 +
                    (C113 * C1168 - C101 * C1180 + C114 * C1169 - C102 * C1181 +
                     C115 * C1170 - C103 * C1182) *
                        C47384) *
                       C47369 * C47490 +
                   ((C101 * C1171 - C113 * C1156 + C102 * C1172 - C114 * C1157 +
                     C103 * C1173 - C115 * C1158) *
                        C116 +
                    (C101 * C1183 - C113 * C1174 + C102 * C1184 - C114 * C1175 +
                     C103 * C1185 - C115 * C1176) *
                        C47384) *
                       C47369 * C47464) *
                      C47461) *
                 C47135) /
                    (p * q * std::sqrt(p + q));
    d2ee[23] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 ((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
                     C103 * C126 - C115 * C119) *
                        C116 +
                    (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
                     C103 * C140 - C115 * C129) *
                        C47384) *
                       C47369 * C47430 +
                   ((C113 * C414 - C101 * C424 + C114 * C415 - C102 * C425 +
                     C115 * C416 - C103 * C426) *
                        C116 +
                    (C113 * C427 - C101 * C444 + C114 * C428 - C102 * C445 +
                     C115 * C429 - C103 * C446) *
                        C47384) *
                       C47369 * C47268) *
                      C47163 * C554 +
                  (((C113 * C118 - C101 * C125 + C114 * C119 - C102 * C126 +
                     C115 * C120 - C103 * C130) *
                        C116 +
                    (C113 * C128 - C101 * C139 + C114 * C129 - C102 * C140 +
                     C115 * C131 - C103 * C141) *
                        C47384) *
                       C47369 * C47430 +
                   ((C101 * C425 - C113 * C415 + C102 * C426 - C114 * C416 +
                     C103 * C436 - C115 * C420) *
                        C116 +
                    (C101 * C445 - C113 * C428 + C102 * C446 - C114 * C429 +
                     C103 * C450 - C115 * C437) *
                        C47384) *
                       C47369 * C47268) *
                      C47163 * C555 +
                  (((C101 * C126 - C113 * C119 + C102 * C130 - C114 * C120 +
                     C103 * C132 - C115 * C121) *
                        C116 +
                    (C101 * C140 - C113 * C129 + C102 * C141 - C114 * C131 +
                     C103 * C142 - C115 * C133) *
                        C47384) *
                       C47369 * C47430 +
                   ((C113 * C416 - C101 * C426 + C114 * C420 - C102 * C436 +
                     C115 * C422 - C103 * C440) *
                        C116 +
                    (C113 * C429 - C101 * C446 + C114 * C437 - C102 * C450 +
                     C115 * C441 - C103 * C452) *
                        C47384) *
                       C47369 * C47268) *
                      C47163 * C556 +
                  (((C113 * C120 - C101 * C130 + C114 * C121 - C102 * C132 +
                     C115 * C122 - C103 * C134) *
                        C116 +
                    (C113 * C131 - C101 * C141 + C114 * C133 - C102 * C142 +
                     C115 * C135 - C103 * C143) *
                        C47384) *
                       C47369 * C47430 +
                   ((C101 * C436 - C113 * C420 + C102 * C440 - C114 * C422 +
                     C103 * C663 - C115 * C662) *
                        C116 +
                    (C101 * C450 - C113 * C437 + C102 * C452 - C114 * C441 +
                     C103 * C665 - C115 * C664) *
                        C47384) *
                       C47369 * C47268) *
                      C47163 * C47465)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
                      C103 * C126 - C115 * C119) *
                         C116 +
                     (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
                      C103 * C140 - C115 * C129) *
                         C47384) *
                        C47369 * C47430 +
                    ((C113 * C414 - C101 * C424 + C114 * C415 - C102 * C425 +
                      C115 * C416 - C103 * C426) *
                         C116 +
                     (C113 * C427 - C101 * C444 + C114 * C428 - C102 * C445 +
                      C115 * C429 - C103 * C446) *
                         C47384) *
                        C47369 * C47268) *
                       C942 +
                   (((C113 * C261 - C101 * C271 + C114 * C262 - C102 * C272 +
                      C115 * C263 - C103 * C273) *
                         C116 +
                     (C113 * C274 - C101 * C291 + C114 * C275 - C102 * C292 +
                      C115 * C276 - C103 * C293) *
                         C47384) *
                        C47369 * C47430 +
                    ((C101 * C817 - C113 * C812 + C102 * C818 - C114 * C813 +
                      C103 * C819 - C115 * C814) *
                         C116 +
                     (C101 * C827 - C113 * C820 + C102 * C828 - C114 * C821 +
                      C103 * C829 - C115 * C822) *
                         C47384) *
                        C47369 * C47268) *
                       C943 +
                   (((C101 * C277 - C113 * C264 + C102 * C278 - C114 * C265 +
                      C103 * C279 - C115 * C266) *
                         C116 +
                     (C101 * C294 - C113 * C280 + C102 * C295 - C114 * C281 +
                      C103 * C296 - C115 * C282) *
                         C47384) *
                        C47369 * C47430 +
                    ((C113 * C1153 - C101 * C1165 + C114 * C1154 -
                      C102 * C1166 + C115 * C1155 - C103 * C1167) *
                         C116 +
                     (C113 * C1168 - C101 * C1180 + C114 * C1169 -
                      C102 * C1181 + C115 * C1170 - C103 * C1182) *
                         C47384) *
                        C47369 * C47268) *
                       C47461) *
                      C47415 +
                  ((((C113 * C118 - C101 * C125 + C114 * C119 - C102 * C126 +
                      C115 * C120 - C103 * C130) *
                         C116 +
                     (C113 * C128 - C101 * C139 + C114 * C129 - C102 * C140 +
                      C115 * C131 - C103 * C141) *
                         C47384) *
                        C47369 * C47430 +
                    ((C101 * C425 - C113 * C415 + C102 * C426 - C114 * C416 +
                      C103 * C436 - C115 * C420) *
                         C116 +
                     (C101 * C445 - C113 * C428 + C102 * C446 - C114 * C429 +
                      C103 * C450 - C115 * C437) *
                         C47384) *
                        C47369 * C47268) *
                       C942 +
                   (((C101 * C272 - C113 * C262 + C102 * C273 - C114 * C263 +
                      C103 * C283 - C115 * C267) *
                         C116 +
                     (C101 * C292 - C113 * C275 + C102 * C293 - C114 * C276 +
                      C103 * C297 - C115 * C284) *
                         C47384) *
                        C47369 * C47430 +
                    ((C113 * C813 - C101 * C818 + C114 * C814 - C102 * C819 +
                      C115 * C815 - C103 * C823) *
                         C116 +
                     (C113 * C821 - C101 * C828 + C114 * C822 - C102 * C829 +
                      C115 * C824 - C103 * C830) *
                         C47384) *
                        C47369 * C47268) *
                       C943 +
                   (((C113 * C265 - C101 * C278 + C114 * C266 - C102 * C279 +
                      C115 * C268 - C103 * C285) *
                         C116 +
                     (C113 * C281 - C101 * C295 + C114 * C282 - C102 * C296 +
                      C115 * C286 - C103 * C298) *
                         C47384) *
                        C47369 * C47430 +
                    ((C101 * C1166 - C113 * C1154 + C102 * C1167 -
                      C114 * C1155 + C103 * C1441 - C115 * C1440) *
                         C116 +
                     (C101 * C1181 - C113 * C1169 + C102 * C1182 -
                      C114 * C1170 + C103 * C1443 - C115 * C1442) *
                         C47384) *
                        C47369 * C47268) *
                       C47461) *
                      C47146)) /
                    (p * q * std::sqrt(p + q));
    d2ee[24] += (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                 (((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
                    C103 * C126 - C115 * C119) *
                       C116 +
                   (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
                    C103 * C140 - C115 * C129) *
                       C47384) *
                      C47369 * C47181 * C47163 * C108 +
                  ((C113 * C118 - C101 * C125 + C114 * C119 - C102 * C126 +
                    C115 * C120 - C103 * C130) *
                       C116 +
                   (C113 * C128 - C101 * C139 + C114 * C129 - C102 * C140 +
                    C115 * C131 - C103 * C141) *
                       C47384) *
                      C47369 * C47181 * C47163 * C109 +
                  ((C101 * C126 - C113 * C119 + C102 * C130 - C114 * C120 +
                    C103 * C132 - C115 * C121) *
                       C116 +
                   (C101 * C140 - C113 * C129 + C102 * C141 - C114 * C131 +
                    C103 * C142 - C115 * C133) *
                       C47384) *
                      C47369 * C47181 * C47163 * C110 +
                  ((C113 * C120 - C101 * C130 + C114 * C121 - C102 * C132 +
                    C115 * C122 - C103 * C134) *
                       C116 +
                   (C113 * C131 - C101 * C141 + C114 * C133 - C102 * C142 +
                    C115 * C135 - C103 * C143) *
                       C47384) *
                      C47369 * C47181 * C47163 * C111 +
                  ((C101 * C132 - C113 * C121 + C102 * C134 - C114 * C122 +
                    C103 * C136 - C115 * C123) *
                       C116 +
                   (C101 * C142 - C113 * C133 + C102 * C143 - C114 * C135 +
                    C103 * C144 - C115 * C137) *
                       C47384) *
                      C47369 * C47181 * C47163 * C112)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                 ((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
                     C103 * C126 - C115 * C119) *
                        C116 +
                    (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
                     C103 * C140 - C115 * C129) *
                        C47384) *
                       C47369 * C47181 * C47500 +
                   ((C113 * C261 - C101 * C271 + C114 * C262 - C102 * C272 +
                     C115 * C263 - C103 * C273) *
                        C116 +
                    (C113 * C274 - C101 * C291 + C114 * C275 - C102 * C292 +
                     C115 * C276 - C103 * C293) *
                        C47384) *
                       C47369 * C47181 * C47488 +
                   ((C101 * C277 - C113 * C264 + C102 * C278 - C114 * C265 +
                     C103 * C279 - C115 * C266) *
                        C116 +
                    (C101 * C294 - C113 * C280 + C102 * C295 - C114 * C281 +
                     C103 * C296 - C115 * C282) *
                        C47384) *
                       C47369 * C47181 * C47461) *
                      C258 +
                  (((C113 * C118 - C101 * C125 + C114 * C119 - C102 * C126 +
                     C115 * C120 - C103 * C130) *
                        C116 +
                    (C113 * C128 - C101 * C139 + C114 * C129 - C102 * C140 +
                     C115 * C131 - C103 * C141) *
                        C47384) *
                       C47369 * C47181 * C47500 +
                   ((C101 * C272 - C113 * C262 + C102 * C273 - C114 * C263 +
                     C103 * C283 - C115 * C267) *
                        C116 +
                    (C101 * C292 - C113 * C275 + C102 * C293 - C114 * C276 +
                     C103 * C297 - C115 * C284) *
                        C47384) *
                       C47369 * C47181 * C47488 +
                   ((C113 * C265 - C101 * C278 + C114 * C266 - C102 * C279 +
                     C115 * C268 - C103 * C285) *
                        C116 +
                    (C113 * C281 - C101 * C295 + C114 * C282 - C102 * C296 +
                     C115 * C286 - C103 * C298) *
                        C47384) *
                       C47369 * C47181 * C47461) *
                      C259 +
                  (((C101 * C126 - C113 * C119 + C102 * C130 - C114 * C120 +
                     C103 * C132 - C115 * C121) *
                        C116 +
                    (C101 * C140 - C113 * C129 + C102 * C141 - C114 * C131 +
                     C103 * C142 - C115 * C133) *
                        C47384) *
                       C47369 * C47181 * C47500 +
                   ((C113 * C263 - C101 * C273 + C114 * C267 - C102 * C283 +
                     C115 * C269 - C103 * C287) *
                        C116 +
                    (C113 * C276 - C101 * C293 + C114 * C284 - C102 * C297 +
                     C115 * C288 - C103 * C299) *
                        C47384) *
                       C47369 * C47181 * C47488 +
                   ((C101 * C279 - C113 * C266 + C102 * C285 - C114 * C268 +
                     C103 * C289 - C115 * C270) *
                        C116 +
                    (C101 * C296 - C113 * C282 + C102 * C298 - C114 * C286 +
                     C103 * C300 - C115 * C290) *
                        C47384) *
                       C47369 * C47181 * C47461) *
                      C47455)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                 ((((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
                     C103 * C126 - C115 * C119) *
                        C116 +
                    (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
                     C103 * C140 - C115 * C129) *
                        C47384) *
                       C47369 * C47181 * C942 +
                   ((C113 * C261 - C101 * C271 + C114 * C262 - C102 * C272 +
                     C115 * C263 - C103 * C273) *
                        C116 +
                    (C113 * C274 - C101 * C291 + C114 * C275 - C102 * C292 +
                     C115 * C276 - C103 * C293) *
                        C47384) *
                       C47369 * C47181 * C943 +
                   ((C101 * C277 - C113 * C264 + C102 * C278 - C114 * C265 +
                     C103 * C279 - C115 * C266) *
                        C116 +
                    (C101 * C294 - C113 * C280 + C102 * C295 - C114 * C281 +
                     C103 * C296 - C115 * C282) *
                        C47384) *
                       C47369 * C47181 * C47461) *
                      C47497 +
                  (((C113 * C118 - C101 * C125 + C114 * C119 - C102 * C126 +
                     C115 * C120 - C103 * C130) *
                        C116 +
                    (C113 * C128 - C101 * C139 + C114 * C129 - C102 * C140 +
                     C115 * C131 - C103 * C141) *
                        C47384) *
                       C47369 * C47181 * C942 +
                   ((C101 * C272 - C113 * C262 + C102 * C273 - C114 * C263 +
                     C103 * C283 - C115 * C267) *
                        C116 +
                    (C101 * C292 - C113 * C275 + C102 * C293 - C114 * C276 +
                     C103 * C297 - C115 * C284) *
                        C47384) *
                       C47369 * C47181 * C943 +
                   ((C113 * C265 - C101 * C278 + C114 * C266 - C102 * C279 +
                     C115 * C268 - C103 * C285) *
                        C116 +
                    (C113 * C281 - C101 * C295 + C114 * C282 - C102 * C296 +
                     C115 * C286 - C103 * C298) *
                        C47384) *
                       C47369 * C47181 * C47461) *
                      C47484 +
                  (((C101 * C126 - C113 * C119 + C102 * C130 - C114 * C120 +
                     C103 * C132 - C115 * C121) *
                        C116 +
                    (C101 * C140 - C113 * C129 + C102 * C141 - C114 * C131 +
                     C103 * C142 - C115 * C133) *
                        C47384) *
                       C47369 * C47181 * C942 +
                   ((C113 * C263 - C101 * C273 + C114 * C267 - C102 * C283 +
                     C115 * C269 - C103 * C287) *
                        C116 +
                    (C113 * C276 - C101 * C293 + C114 * C284 - C102 * C297 +
                     C115 * C288 - C103 * C299) *
                        C47384) *
                       C47369 * C47181 * C943 +
                   ((C101 * C279 - C113 * C266 + C102 * C285 - C114 * C268 +
                     C103 * C289 - C115 * C270) *
                        C116 +
                    (C101 * C296 - C113 * C282 + C102 * C298 - C114 * C286 +
                     C103 * C300 - C115 * C290) *
                        C47384) *
                       C47369 * C47181 * C47461) *
                      C47455)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                 (((C101 * C124 - C113 * C117 + C102 * C125 - C114 * C118 +
                    C103 * C126 - C115 * C119) *
                       C116 +
                   (C101 * C138 - C113 * C127 + C102 * C139 - C114 * C128 +
                    C103 * C140 - C115 * C129) *
                       C47384) *
                      C47369 * C47181 * C1010 +
                  ((C113 * C261 - C101 * C271 + C114 * C262 - C102 * C272 +
                    C115 * C263 - C103 * C273) *
                       C116 +
                   (C113 * C274 - C101 * C291 + C114 * C275 - C102 * C292 +
                    C115 * C276 - C103 * C293) *
                       C47384) *
                      C47369 * C47181 * C1011 +
                  ((C101 * C277 - C113 * C264 + C102 * C278 - C114 * C265 +
                    C103 * C279 - C115 * C266) *
                       C116 +
                   (C101 * C294 - C113 * C280 + C102 * C295 - C114 * C281 +
                    C103 * C296 - C115 * C282) *
                       C47384) *
                      C47369 * C47181 * C1012 +
                  ((C113 * C1016 - C101 * C1022 + C114 * C1017 - C102 * C1023 +
                    C115 * C1018 - C103 * C1024) *
                       C116 +
                   (C113 * C1025 - C101 * C1034 + C114 * C1026 - C102 * C1035 +
                    C115 * C1027 - C103 * C1036) *
                       C47384) *
                      C47369 * C47181 * C1013 +
                  ((C101 * C1028 - C113 * C1019 + C102 * C1029 - C114 * C1020 +
                    C103 * C1030 - C115 * C1021) *
                       C116 +
                   (C101 * C1037 - C113 * C1031 + C102 * C1038 - C114 * C1032 +
                    C103 * C1039 - C115 * C1033) *
                       C47384) *
                      C47369 * C47181 * C1014) *
                 C47135) /
                    (p * q * std::sqrt(p + q));
    d2ee[25] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C4575 * C124 - C4579 * C117 + C47448 * C125 - C4580 * C118) *
                 C116 +
             (C4575 * C138 - C4579 * C127 + C47448 * C139 - C4580 * C128) *
                 C47384) *
                C4577 +
            ((C4728 - C4729 + C4730 - C4731) * C116 +
             (C4732 - C4733 + C4734 - C4735) * C47384) *
                C47479) *
               C47181 * C47222 +
           (((C4729 - C4728 + C4731 - C4730) * C116 +
             (C4733 - C4732 + C4735 - C4734) * C47384) *
                C4577 +
            ((C4736 - C4737 + C4738 - C4739) * C116 +
             (C4740 - C4741 + C4742 - C4743) * C47384) *
                C47479) *
               C47181 * C47229 +
           (((C4737 - C4736 + C4739 - C4738) * C116 +
             (C4741 - C4740 + C4743 - C4742) * C47384) *
                C4577 +
            ((C5644 - C5645 + C5646 - C5647) * C116 +
             (C5648 - C5649 + C5650 - C5651) * C47384) *
                C47479) *
               C47181 * C2700) *
              C47140 +
          ((((C4579 * C118 - C4575 * C125 + C4580 * C119 - C47448 * C126) *
                 C116 +
             (C4579 * C128 - C4575 * C139 + C4580 * C129 - C47448 * C140) *
                 C47384) *
                C4577 +
            ((C4744 - C4745 + C4746 - C4747) * C116 +
             (C4748 - C4749 + C4750 - C4751) * C47384) *
                C47479) *
               C47181 * C47222 +
           (((C4745 - C4744 + C4747 - C4746) * C116 +
             (C4749 - C4748 + C4751 - C4750) * C47384) *
                C4577 +
            ((C4752 - C4753 + C4754 - C4755) * C116 +
             (C4756 - C4757 + C4758 - C4759) * C47384) *
                C47479) *
               C47181 * C47229 +
           (((C4753 - C4752 + C4755 - C4754) * C116 +
             (C4757 - C4756 + C4759 - C4758) * C47384) *
                C4577 +
            ((C5968 - C5969 + C5970 - C5971) * C116 +
             (C5972 - C5973 + C5974 - C5975) * C47384) *
                C47479) *
               C47181 * C2700) *
              C47149 +
          ((((C4575 * C126 - C4579 * C119 + C47448 * C130 - C4580 * C120) *
                 C116 +
             (C4575 * C140 - C4579 * C129 + C47448 * C141 - C4580 * C131) *
                 C47384) *
                C4577 +
            ((C4760 - C4761 + C4762 - C4763) * C116 +
             (C4764 - C4765 + C4766 - C4767) * C47384) *
                C47479) *
               C47181 * C47222 +
           (((C4761 - C4760 + C4763 - C4762) * C116 +
             (C4765 - C4764 + C4767 - C4766) * C47384) *
                C4577 +
            ((C4768 - C4769 + C4770 - C4771) * C116 +
             (C4772 - C4773 + C4774 - C4775) * C47384) *
                C47479) *
               C47181 * C47229 +
           (((C4769 - C4768 + C4771 - C4770) * C116 +
             (C4773 - C4772 + C4775 - C4774) * C47384) *
                C4577 +
            ((C4575 * C1024 - C4579 * C1018 + C47448 * C1291 - C4580 * C1290) *
                 C116 +
             (C4575 * C1036 - C4579 * C1027 + C47448 * C1293 - C4580 * C1292) *
                 C47384) *
                C47479) *
               C47181 * C2700) *
              C2703)) /
        (p * q * std::sqrt(p + q));
    d2ee[26] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C4575 * C124 - C4579 * C117 + C47448 * C125 - C4580 * C118) *
                  C116 +
              (C4575 * C138 - C4579 * C127 + C47448 * C139 - C4580 * C128) *
                  C47384) *
                 C4577 +
             ((C4728 - C4729 + C4730 - C4731) * C116 +
              (C4732 - C4733 + C4734 - C4735) * C47384) *
                 C47479) *
                C47430 +
            (((C4579 * C414 - C4575 * C424 + C4580 * C415 - C47448 * C425) *
                  C116 +
              (C4579 * C427 - C4575 * C444 + C4580 * C428 - C47448 * C445) *
                  C47384) *
                 C4577 +
             ((C5384 - C5385 + C5386 - C5387) * C116 +
              (C5388 - C5389 + C5390 - C5391) * C47384) *
                 C47479) *
                C47268) *
               C47222 +
           ((((C4729 - C4728 + C4731 - C4730) * C116 +
              (C4733 - C4732 + C4735 - C4734) * C47384) *
                 C4577 +
             ((C4736 - C4737 + C4738 - C4739) * C116 +
              (C4740 - C4741 + C4742 - C4743) * C47384) *
                 C47479) *
                C47430 +
            (((C5385 - C5384 + C5387 - C5386) * C116 +
              (C5389 - C5388 + C5391 - C5390) * C47384) *
                 C4577 +
             ((C5822 - C5823 + C5824 - C5825) * C116 +
              (C5826 - C5827 + C5828 - C5829) * C47384) *
                 C47479) *
                C47268) *
               C47229 +
           ((((C4737 - C4736 + C4739 - C4738) * C116 +
              (C4741 - C4740 + C4743 - C4742) * C47384) *
                 C4577 +
             ((C5644 - C5645 + C5646 - C5647) * C116 +
              (C5648 - C5649 + C5650 - C5651) * C47384) *
                 C47479) *
                C47430 +
            (((C5823 - C5822 + C5825 - C5824) * C116 +
              (C5827 - C5826 + C5829 - C5828) * C47384) *
                 C4577 +
             ((C6316 - C6317 + C6318 - C6319) * C116 +
              (C6320 - C6321 + C6322 - C6323) * C47384) *
                 C47479) *
                C47268) *
               C2700) *
              C2440 +
          (((((C4579 * C118 - C4575 * C125 + C4580 * C119 - C47448 * C126) *
                  C116 +
              (C4579 * C128 - C4575 * C139 + C4580 * C129 - C47448 * C140) *
                  C47384) *
                 C4577 +
             ((C4744 - C4745 + C4746 - C4747) * C116 +
              (C4748 - C4749 + C4750 - C4751) * C47384) *
                 C47479) *
                C47430 +
            (((C4575 * C425 - C4579 * C415 + C47448 * C426 - C4580 * C416) *
                  C116 +
              (C4575 * C445 - C4579 * C428 + C47448 * C446 - C4580 * C429) *
                  C47384) *
                 C4577 +
             ((C5392 - C5393 + C5394 - C5395) * C116 +
              (C5396 - C5397 + C5398 - C5399) * C47384) *
                 C47479) *
                C47268) *
               C47222 +
           ((((C4745 - C4744 + C4747 - C4746) * C116 +
              (C4749 - C4748 + C4751 - C4750) * C47384) *
                 C4577 +
             ((C4752 - C4753 + C4754 - C4755) * C116 +
              (C4756 - C4757 + C4758 - C4759) * C47384) *
                 C47479) *
                C47430 +
            (((C5393 - C5392 + C5395 - C5394) * C116 +
              (C5397 - C5396 + C5399 - C5398) * C47384) *
                 C4577 +
             ((C6170 - C6171 + C6172 - C6173) * C116 +
              (C6174 - C6175 + C6176 - C6177) * C47384) *
                 C47479) *
                C47268) *
               C47229 +
           ((((C4753 - C4752 + C4755 - C4754) * C116 +
              (C4757 - C4756 + C4759 - C4758) * C47384) *
                 C4577 +
             ((C5968 - C5969 + C5970 - C5971) * C116 +
              (C5972 - C5973 + C5974 - C5975) * C47384) *
                 C47479) *
                C47430 +
            (((C6171 - C6170 + C6173 - C6172) * C116 +
              (C6175 - C6174 + C6177 - C6176) * C47384) *
                 C4577 +
             ((C4575 * C1546 - C4579 * C1543 + C47448 * C1547 - C4580 * C1544) *
                  C116 +
              (C4575 * C1552 - C4579 * C1549 + C47448 * C1553 - C4580 * C1550) *
                  C47384) *
                 C47479) *
                C47268) *
               C2700) *
              C47146)) /
        (p * q * std::sqrt(p + q));
    d2ee[27] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C4575 * C124 - C4579 * C117 + C47448 * C125 - C4580 * C118) *
                 C116 +
             (C4575 * C138 - C4579 * C127 + C47448 * C139 - C4580 * C128) *
                 C47384) *
                C4577 +
            ((C4728 - C4729 + C4730 - C4731) * C116 +
             (C4732 - C4733 + C4734 - C4735) * C47384) *
                C47479) *
               C47181 * C47507 +
           (((C4729 - C4728 + C4731 - C4730) * C116 +
             (C4733 - C4732 + C4735 - C4734) * C47384) *
                C4577 +
            ((C4736 - C4737 + C4738 - C4739) * C116 +
             (C4740 - C4741 + C4742 - C4743) * C47384) *
                C47479) *
               C47181 * C47503 +
           (((C4737 - C4736 + C4739 - C4738) * C116 +
             (C4741 - C4740 + C4743 - C4742) * C47384) *
                C4577 +
            ((C5644 - C5645 + C5646 - C5647) * C116 +
             (C5648 - C5649 + C5650 - C5651) * C47384) *
                C47479) *
               C47181 * C47493 +
           (((C5645 - C5644 + C5647 - C5646) * C116 +
             (C5649 - C5648 + C5651 - C5650) * C47384) *
                C4577 +
            ((C5652 - C5653 + C5654 - C5655) * C116 +
             (C5656 - C5657 + C5658 - C5659) * C47384) *
                C47479) *
               C47181 * C47471) *
              C2440 +
          ((((C4579 * C118 - C4575 * C125 + C4580 * C119 - C47448 * C126) *
                 C116 +
             (C4579 * C128 - C4575 * C139 + C4580 * C129 - C47448 * C140) *
                 C47384) *
                C4577 +
            ((C4744 - C4745 + C4746 - C4747) * C116 +
             (C4748 - C4749 + C4750 - C4751) * C47384) *
                C47479) *
               C47181 * C47507 +
           (((C4745 - C4744 + C4747 - C4746) * C116 +
             (C4749 - C4748 + C4751 - C4750) * C47384) *
                C4577 +
            ((C4752 - C4753 + C4754 - C4755) * C116 +
             (C4756 - C4757 + C4758 - C4759) * C47384) *
                C47479) *
               C47181 * C47503 +
           (((C4753 - C4752 + C4755 - C4754) * C116 +
             (C4757 - C4756 + C4759 - C4758) * C47384) *
                C4577 +
            ((C5968 - C5969 + C5970 - C5971) * C116 +
             (C5972 - C5973 + C5974 - C5975) * C47384) *
                C47479) *
               C47181 * C47493 +
           (((C5969 - C5968 + C5971 - C5970) * C116 +
             (C5973 - C5972 + C5975 - C5974) * C47384) *
                C4577 +
            ((C4575 * C1029 - C4579 * C1020 + C47448 * C1030 - C4580 * C1021) *
                 C116 +
             (C4575 * C1038 - C4579 * C1032 + C47448 * C1039 - C4580 * C1033) *
                 C47384) *
                C47479) *
               C47181 * C47471) *
              C47146)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C4575 * C124 - C4579 * C117 + C47448 * C125 - C4580 * C118) *
                 C116 +
             (C4575 * C138 - C4579 * C127 + C47448 * C139 - C4580 * C128) *
                 C47384) *
                C4577 +
            ((C4728 - C4729 + C4730 - C4731) * C116 +
             (C4732 - C4733 + C4734 - C4735) * C47384) *
                C47479) *
               C47181 * C2332 +
           (((C4729 - C4728 + C4731 - C4730) * C116 +
             (C4733 - C4732 + C4735 - C4734) * C47384) *
                C4577 +
            ((C4736 - C4737 + C4738 - C4739) * C116 +
             (C4740 - C4741 + C4742 - C4743) * C47384) *
                C47479) *
               C47181 * C47226) *
              C47506 +
          ((((C4579 * C118 - C4575 * C125 + C4580 * C119 - C47448 * C126) *
                 C116 +
             (C4579 * C128 - C4575 * C139 + C4580 * C129 - C47448 * C140) *
                 C47384) *
                C4577 +
            ((C4744 - C4745 + C4746 - C4747) * C116 +
             (C4748 - C4749 + C4750 - C4751) * C47384) *
                C47479) *
               C47181 * C2332 +
           (((C4745 - C4744 + C4747 - C4746) * C116 +
             (C4749 - C4748 + C4751 - C4750) * C47384) *
                C4577 +
            ((C4752 - C4753 + C4754 - C4755) * C116 +
             (C4756 - C4757 + C4758 - C4759) * C47384) *
                C47479) *
               C47181 * C47226) *
              C47499 +
          ((((C4575 * C126 - C4579 * C119 + C47448 * C130 - C4580 * C120) *
                 C116 +
             (C4575 * C140 - C4579 * C129 + C47448 * C141 - C4580 * C131) *
                 C47384) *
                C4577 +
            ((C4760 - C4761 + C4762 - C4763) * C116 +
             (C4764 - C4765 + C4766 - C4767) * C47384) *
                C47479) *
               C47181 * C2332 +
           (((C4761 - C4760 + C4763 - C4762) * C116 +
             (C4765 - C4764 + C4767 - C4766) * C47384) *
                C4577 +
            ((C4768 - C4769 + C4770 - C4771) * C116 +
             (C4772 - C4773 + C4774 - C4775) * C47384) *
                C47479) *
               C47181 * C47226) *
              C47486 +
          ((((C4579 * C120 - C4575 * C130 + C4580 * C121 - C47448 * C132) *
                 C116 +
             (C4579 * C131 - C4575 * C141 + C4580 * C133 - C47448 * C142) *
                 C47384) *
                C4577 +
            ((C5052 - C5053 + C5054 - C5055) * C116 +
             (C5056 - C5057 + C5058 - C5059) * C47384) *
                C47479) *
               C47181 * C2332 +
           (((C5053 - C5052 + C5055 - C5054) * C116 +
             (C5057 - C5056 + C5059 - C5058) * C47384) *
                C4577 +
            ((C4575 * C285 - C4579 * C268 + C47448 * C289 - C4580 * C270) *
                 C116 +
             (C4575 * C298 - C4579 * C286 + C47448 * C300 - C4580 * C290) *
                 C47384) *
                C47479) *
               C47181 * C47226) *
              C47465)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C4575 * C124 - C4579 * C117 + C47448 * C125 - C4580 * C118) *
                  C116 +
              (C4575 * C138 - C4579 * C127 + C47448 * C139 - C4580 * C128) *
                  C47384) *
                 C4577 +
             ((C4728 - C4729 + C4730 - C4731) * C116 +
              (C4732 - C4733 + C4734 - C4735) * C47384) *
                 C47479) *
                C47501 +
            (((C4579 * C414 - C4575 * C424 + C4580 * C415 - C47448 * C425) *
                  C116 +
              (C4579 * C427 - C4575 * C444 + C4580 * C428 - C47448 * C445) *
                  C47384) *
                 C4577 +
             ((C5384 - C5385 + C5386 - C5387) * C116 +
              (C5388 - C5389 + C5390 - C5391) * C47384) *
                 C47479) *
                C47490 +
            (((C4575 * C430 - C4579 * C417 + C47448 * C431 - C4580 * C418) *
                  C116 +
              (C4575 * C447 - C4579 * C433 + C47448 * C448 - C4580 * C434) *
                  C47384) *
                 C4577 +
             ((C5814 - C5815 + C5816 - C5817) * C116 +
              (C5818 - C5819 + C5820 - C5821) * C47384) *
                 C47479) *
                C47464) *
               C2332 +
           ((((C4729 - C4728 + C4731 - C4730) * C116 +
              (C4733 - C4732 + C4735 - C4734) * C47384) *
                 C4577 +
             ((C4736 - C4737 + C4738 - C4739) * C116 +
              (C4740 - C4741 + C4742 - C4743) * C47384) *
                 C47479) *
                C47501 +
            (((C5385 - C5384 + C5387 - C5386) * C116 +
              (C5389 - C5388 + C5391 - C5390) * C47384) *
                 C4577 +
             ((C5822 - C5823 + C5824 - C5825) * C116 +
              (C5826 - C5827 + C5828 - C5829) * C47384) *
                 C47479) *
                C47490 +
            (((C5815 - C5814 + C5817 - C5816) * C116 +
              (C5819 - C5818 + C5821 - C5820) * C47384) *
                 C4577 +
             ((C5830 - C5831 + C5832 - C5833) * C116 +
              (C5834 - C5835 + C5836 - C5837) * C47384) *
                 C47479) *
                C47464) *
               C47226) *
              C2440 +
          (((((C4579 * C118 - C4575 * C125 + C4580 * C119 - C47448 * C126) *
                  C116 +
              (C4579 * C128 - C4575 * C139 + C4580 * C129 - C47448 * C140) *
                  C47384) *
                 C4577 +
             ((C4744 - C4745 + C4746 - C4747) * C116 +
              (C4748 - C4749 + C4750 - C4751) * C47384) *
                 C47479) *
                C47501 +
            (((C4575 * C425 - C4579 * C415 + C47448 * C426 - C4580 * C416) *
                  C116 +
              (C4575 * C445 - C4579 * C428 + C47448 * C446 - C4580 * C429) *
                  C47384) *
                 C4577 +
             ((C5392 - C5393 + C5394 - C5395) * C116 +
              (C5396 - C5397 + C5398 - C5399) * C47384) *
                 C47479) *
                C47490 +
            (((C4579 * C418 - C4575 * C431 + C4580 * C419 - C47448 * C432) *
                  C116 +
              (C4579 * C434 - C4575 * C448 + C4580 * C435 - C47448 * C449) *
                  C47384) *
                 C4577 +
             ((C6900 - C6901 + C6902 - C6903) * C116 +
              (C6904 - C6905 + C6906 - C6907) * C47384) *
                 C47479) *
                C47464) *
               C2332 +
           ((((C4745 - C4744 + C4747 - C4746) * C116 +
              (C4749 - C4748 + C4751 - C4750) * C47384) *
                 C4577 +
             ((C4752 - C4753 + C4754 - C4755) * C116 +
              (C4756 - C4757 + C4758 - C4759) * C47384) *
                 C47479) *
                C47501 +
            (((C5393 - C5392 + C5395 - C5394) * C116 +
              (C5397 - C5396 + C5399 - C5398) * C47384) *
                 C4577 +
             ((C6170 - C6171 + C6172 - C6173) * C116 +
              (C6174 - C6175 + C6176 - C6177) * C47384) *
                 C47479) *
                C47490 +
            (((C6901 - C6900 + C6903 - C6902) * C116 +
              (C6905 - C6904 + C6907 - C6906) * C47384) *
                 C4577 +
             ((C4575 * C1172 - C4579 * C1157 + C47448 * C1173 - C4580 * C1158) *
                  C116 +
              (C4575 * C1184 - C4579 * C1175 + C47448 * C1185 - C4580 * C1176) *
                  C47384) *
                 C47479) *
                C47464) *
               C47226) *
              C47146)) /
            (p * q * std::sqrt(p + q));
    d2ee[28] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C4575 * C124 - C4579 * C117 + C47448 * C125 - C4580 * C118) *
                  C116 +
              (C4575 * C138 - C4579 * C127 + C47448 * C139 - C4580 * C128) *
                  C47384) *
                 C4577 +
             ((C4728 - C4729 + C4730 - C4731) * C116 +
              (C4732 - C4733 + C4734 - C4735) * C47384) *
                 C47479) *
                C47430 +
            (((C4579 * C414 - C4575 * C424 + C4580 * C415 - C47448 * C425) *
                  C116 +
              (C4579 * C427 - C4575 * C444 + C4580 * C428 - C47448 * C445) *
                  C47384) *
                 C4577 +
             ((C5384 - C5385 + C5386 - C5387) * C116 +
              (C5388 - C5389 + C5390 - C5391) * C47384) *
                 C47479) *
                C47268) *
               C2332 +
           ((((C4729 - C4728 + C4731 - C4730) * C116 +
              (C4733 - C4732 + C4735 - C4734) * C47384) *
                 C4577 +
             ((C4736 - C4737 + C4738 - C4739) * C116 +
              (C4740 - C4741 + C4742 - C4743) * C47384) *
                 C47479) *
                C47430 +
            (((C5385 - C5384 + C5387 - C5386) * C116 +
              (C5389 - C5388 + C5391 - C5390) * C47384) *
                 C4577 +
             ((C5822 - C5823 + C5824 - C5825) * C116 +
              (C5826 - C5827 + C5828 - C5829) * C47384) *
                 C47479) *
                C47268) *
               C47226) *
              C47140 +
          (((((C4579 * C118 - C4575 * C125 + C4580 * C119 - C47448 * C126) *
                  C116 +
              (C4579 * C128 - C4575 * C139 + C4580 * C129 - C47448 * C140) *
                  C47384) *
                 C4577 +
             ((C4744 - C4745 + C4746 - C4747) * C116 +
              (C4748 - C4749 + C4750 - C4751) * C47384) *
                 C47479) *
                C47430 +
            (((C4575 * C425 - C4579 * C415 + C47448 * C426 - C4580 * C416) *
                  C116 +
              (C4575 * C445 - C4579 * C428 + C47448 * C446 - C4580 * C429) *
                  C47384) *
                 C4577 +
             ((C5392 - C5393 + C5394 - C5395) * C116 +
              (C5396 - C5397 + C5398 - C5399) * C47384) *
                 C47479) *
                C47268) *
               C2332 +
           ((((C4745 - C4744 + C4747 - C4746) * C116 +
              (C4749 - C4748 + C4751 - C4750) * C47384) *
                 C4577 +
             ((C4752 - C4753 + C4754 - C4755) * C116 +
              (C4756 - C4757 + C4758 - C4759) * C47384) *
                 C47479) *
                C47430 +
            (((C5393 - C5392 + C5395 - C5394) * C116 +
              (C5397 - C5396 + C5399 - C5398) * C47384) *
                 C4577 +
             ((C6170 - C6171 + C6172 - C6173) * C116 +
              (C6174 - C6175 + C6176 - C6177) * C47384) *
                 C47479) *
                C47268) *
               C47226) *
              C47149 +
          (((((C4575 * C126 - C4579 * C119 + C47448 * C130 - C4580 * C120) *
                  C116 +
              (C4575 * C140 - C4579 * C129 + C47448 * C141 - C4580 * C131) *
                  C47384) *
                 C4577 +
             ((C4760 - C4761 + C4762 - C4763) * C116 +
              (C4764 - C4765 + C4766 - C4767) * C47384) *
                 C47479) *
                C47430 +
            (((C4579 * C416 - C4575 * C426 + C4580 * C420 - C47448 * C436) *
                  C116 +
              (C4579 * C429 - C4575 * C446 + C4580 * C437 - C47448 * C450) *
                  C47384) *
                 C4577 +
             ((C5400 - C5401 + C5402 - C5403) * C116 +
              (C5404 - C5405 + C5406 - C5407) * C47384) *
                 C47479) *
                C47268) *
               C2332 +
           ((((C4761 - C4760 + C4763 - C4762) * C116 +
              (C4765 - C4764 + C4767 - C4766) * C47384) *
                 C4577 +
             ((C4768 - C4769 + C4770 - C4771) * C116 +
              (C4772 - C4773 + C4774 - C4775) * C47384) *
                 C47479) *
                C47430 +
            (((C5401 - C5400 + C5403 - C5402) * C116 +
              (C5405 - C5404 + C5407 - C5406) * C47384) *
                 C4577 +
             ((C4575 * C1167 - C4579 * C1155 + C47448 * C1441 - C4580 * C1440) *
                  C116 +
              (C4575 * C1182 - C4579 * C1170 + C47448 * C1443 - C4580 * C1442) *
                  C47384) *
                 C47479) *
                C47268) *
               C47226) *
              C2703)) /
        (p * q * std::sqrt(p + q));
    d2ee[29] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C4575 * C124 - C4579 * C117 + C47448 * C125 - C4580 * C118) *
                 C116 +
             (C4575 * C138 - C4579 * C127 + C47448 * C139 - C4580 * C128) *
                 C47384) *
                C4577 +
            ((C4728 - C4729 + C4730 - C4731) * C116 +
             (C4732 - C4733 + C4734 - C4735) * C47384) *
                C47479) *
               C47181 * C2332 +
           (((C4729 - C4728 + C4731 - C4730) * C116 +
             (C4733 - C4732 + C4735 - C4734) * C47384) *
                C4577 +
            ((C4736 - C4737 + C4738 - C4739) * C116 +
             (C4740 - C4741 + C4742 - C4743) * C47384) *
                C47479) *
               C47181 * C47226) *
              C47506 +
          ((((C4579 * C118 - C4575 * C125 + C4580 * C119 - C47448 * C126) *
                 C116 +
             (C4579 * C128 - C4575 * C139 + C4580 * C129 - C47448 * C140) *
                 C47384) *
                C4577 +
            ((C4744 - C4745 + C4746 - C4747) * C116 +
             (C4748 - C4749 + C4750 - C4751) * C47384) *
                C47479) *
               C47181 * C2332 +
           (((C4745 - C4744 + C4747 - C4746) * C116 +
             (C4749 - C4748 + C4751 - C4750) * C47384) *
                C4577 +
            ((C4752 - C4753 + C4754 - C4755) * C116 +
             (C4756 - C4757 + C4758 - C4759) * C47384) *
                C47479) *
               C47181 * C47226) *
              C47499 +
          ((((C4575 * C126 - C4579 * C119 + C47448 * C130 - C4580 * C120) *
                 C116 +
             (C4575 * C140 - C4579 * C129 + C47448 * C141 - C4580 * C131) *
                 C47384) *
                C4577 +
            ((C4760 - C4761 + C4762 - C4763) * C116 +
             (C4764 - C4765 + C4766 - C4767) * C47384) *
                C47479) *
               C47181 * C2332 +
           (((C4761 - C4760 + C4763 - C4762) * C116 +
             (C4765 - C4764 + C4767 - C4766) * C47384) *
                C4577 +
            ((C4768 - C4769 + C4770 - C4771) * C116 +
             (C4772 - C4773 + C4774 - C4775) * C47384) *
                C47479) *
               C47181 * C47226) *
              C47486 +
          ((((C4579 * C120 - C4575 * C130 + C4580 * C121 - C47448 * C132) *
                 C116 +
             (C4579 * C131 - C4575 * C141 + C4580 * C133 - C47448 * C142) *
                 C47384) *
                C4577 +
            ((C5052 - C5053 + C5054 - C5055) * C116 +
             (C5056 - C5057 + C5058 - C5059) * C47384) *
                C47479) *
               C47181 * C2332 +
           (((C5053 - C5052 + C5055 - C5054) * C116 +
             (C5057 - C5056 + C5059 - C5058) * C47384) *
                C4577 +
            ((C4575 * C285 - C4579 * C268 + C47448 * C289 - C4580 * C270) *
                 C116 +
             (C4575 * C298 - C4579 * C286 + C47448 * C300 - C4580 * C290) *
                 C47384) *
                C47479) *
               C47181 * C47226) *
              C47465)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C4575 * C124 - C4579 * C117 + C47448 * C125 - C4580 * C118) *
                 C116 +
             (C4575 * C138 - C4579 * C127 + C47448 * C139 - C4580 * C128) *
                 C47384) *
                C4577 +
            ((C4728 - C4729 + C4730 - C4731) * C116 +
             (C4732 - C4733 + C4734 - C4735) * C47384) *
                C47479) *
               C47181 * C47507 +
           (((C4729 - C4728 + C4731 - C4730) * C116 +
             (C4733 - C4732 + C4735 - C4734) * C47384) *
                C4577 +
            ((C4736 - C4737 + C4738 - C4739) * C116 +
             (C4740 - C4741 + C4742 - C4743) * C47384) *
                C47479) *
               C47181 * C47503 +
           (((C4737 - C4736 + C4739 - C4738) * C116 +
             (C4741 - C4740 + C4743 - C4742) * C47384) *
                C4577 +
            ((C5644 - C5645 + C5646 - C5647) * C116 +
             (C5648 - C5649 + C5650 - C5651) * C47384) *
                C47479) *
               C47181 * C47493 +
           (((C5645 - C5644 + C5647 - C5646) * C116 +
             (C5649 - C5648 + C5651 - C5650) * C47384) *
                C4577 +
            ((C5652 - C5653 + C5654 - C5655) * C116 +
             (C5656 - C5657 + C5658 - C5659) * C47384) *
                C47479) *
               C47181 * C47471) *
              C2440 +
          ((((C4579 * C118 - C4575 * C125 + C4580 * C119 - C47448 * C126) *
                 C116 +
             (C4579 * C128 - C4575 * C139 + C4580 * C129 - C47448 * C140) *
                 C47384) *
                C4577 +
            ((C4744 - C4745 + C4746 - C4747) * C116 +
             (C4748 - C4749 + C4750 - C4751) * C47384) *
                C47479) *
               C47181 * C47507 +
           (((C4745 - C4744 + C4747 - C4746) * C116 +
             (C4749 - C4748 + C4751 - C4750) * C47384) *
                C4577 +
            ((C4752 - C4753 + C4754 - C4755) * C116 +
             (C4756 - C4757 + C4758 - C4759) * C47384) *
                C47479) *
               C47181 * C47503 +
           (((C4753 - C4752 + C4755 - C4754) * C116 +
             (C4757 - C4756 + C4759 - C4758) * C47384) *
                C4577 +
            ((C5968 - C5969 + C5970 - C5971) * C116 +
             (C5972 - C5973 + C5974 - C5975) * C47384) *
                C47479) *
               C47181 * C47493 +
           (((C5969 - C5968 + C5971 - C5970) * C116 +
             (C5973 - C5972 + C5975 - C5974) * C47384) *
                C4577 +
            ((C4575 * C1029 - C4579 * C1020 + C47448 * C1030 - C4580 * C1021) *
                 C116 +
             (C4575 * C1038 - C4579 * C1032 + C47448 * C1039 - C4580 * C1033) *
                 C47384) *
                C47479) *
               C47181 * C47471) *
              C47146)) /
            (p * q * std::sqrt(p + q));
    d2ee[30] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C4575 * C124 - C4579 * C117 + C47448 * C125 - C4580 * C118) *
                  C116 +
              (C4575 * C138 - C4579 * C127 + C47448 * C139 - C4580 * C128) *
                  C47384) *
                 C4577 +
             ((C4728 - C4729 + C4730 - C4731) * C116 +
              (C4732 - C4733 + C4734 - C4735) * C47384) *
                 C47479) *
                C3094 +
            (((C4579 * C414 - C4575 * C424 + C4580 * C415 - C47448 * C425) *
                  C116 +
              (C4579 * C427 - C4575 * C444 + C4580 * C428 - C47448 * C445) *
                  C47384) *
                 C4577 +
             ((C5384 - C5385 + C5386 - C5387) * C116 +
              (C5388 - C5389 + C5390 - C5391) * C47384) *
                 C47479) *
                C47268) *
               C47222 +
           ((((C4729 - C4728 + C4731 - C4730) * C116 +
              (C4733 - C4732 + C4735 - C4734) * C47384) *
                 C4577 +
             ((C4736 - C4737 + C4738 - C4739) * C116 +
              (C4740 - C4741 + C4742 - C4743) * C47384) *
                 C47479) *
                C3094 +
            (((C5385 - C5384 + C5387 - C5386) * C116 +
              (C5389 - C5388 + C5391 - C5390) * C47384) *
                 C4577 +
             ((C5822 - C5823 + C5824 - C5825) * C116 +
              (C5826 - C5827 + C5828 - C5829) * C47384) *
                 C47479) *
                C47268) *
               C47229 +
           ((((C4737 - C4736 + C4739 - C4738) * C116 +
              (C4741 - C4740 + C4743 - C4742) * C47384) *
                 C4577 +
             ((C5644 - C5645 + C5646 - C5647) * C116 +
              (C5648 - C5649 + C5650 - C5651) * C47384) *
                 C47479) *
                C3094 +
            (((C5823 - C5822 + C5825 - C5824) * C116 +
              (C5827 - C5826 + C5829 - C5828) * C47384) *
                 C4577 +
             ((C6316 - C6317 + C6318 - C6319) * C116 +
              (C6320 - C6321 + C6322 - C6323) * C47384) *
                 C47479) *
                C47268) *
               C2700) *
              C47415 +
          (((((C4579 * C118 - C4575 * C125 + C4580 * C119 - C47448 * C126) *
                  C116 +
              (C4579 * C128 - C4575 * C139 + C4580 * C129 - C47448 * C140) *
                  C47384) *
                 C4577 +
             ((C4744 - C4745 + C4746 - C4747) * C116 +
              (C4748 - C4749 + C4750 - C4751) * C47384) *
                 C47479) *
                C3094 +
            (((C4575 * C425 - C4579 * C415 + C47448 * C426 - C4580 * C416) *
                  C116 +
              (C4575 * C445 - C4579 * C428 + C47448 * C446 - C4580 * C429) *
                  C47384) *
                 C4577 +
             ((C5392 - C5393 + C5394 - C5395) * C116 +
              (C5396 - C5397 + C5398 - C5399) * C47384) *
                 C47479) *
                C47268) *
               C47222 +
           ((((C4745 - C4744 + C4747 - C4746) * C116 +
              (C4749 - C4748 + C4751 - C4750) * C47384) *
                 C4577 +
             ((C4752 - C4753 + C4754 - C4755) * C116 +
              (C4756 - C4757 + C4758 - C4759) * C47384) *
                 C47479) *
                C3094 +
            (((C5393 - C5392 + C5395 - C5394) * C116 +
              (C5397 - C5396 + C5399 - C5398) * C47384) *
                 C4577 +
             ((C6170 - C6171 + C6172 - C6173) * C116 +
              (C6174 - C6175 + C6176 - C6177) * C47384) *
                 C47479) *
                C47268) *
               C47229 +
           ((((C4753 - C4752 + C4755 - C4754) * C116 +
              (C4757 - C4756 + C4759 - C4758) * C47384) *
                 C4577 +
             ((C5968 - C5969 + C5970 - C5971) * C116 +
              (C5972 - C5973 + C5974 - C5975) * C47384) *
                 C47479) *
                C3094 +
            (((C6171 - C6170 + C6173 - C6172) * C116 +
              (C6175 - C6174 + C6177 - C6176) * C47384) *
                 C4577 +
             ((C4575 * C1546 - C4579 * C1543 + C47448 * C1547 - C4580 * C1544) *
                  C116 +
              (C4575 * C1552 - C4579 * C1549 + C47448 * C1553 - C4580 * C1550) *
                  C47384) *
                 C47479) *
                C47268) *
               C2700) *
              C47146)) /
        (p * q * std::sqrt(p + q));
    d2ee[31] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C4575 * C124 - C4579 * C117 + C47448 * C125 - C4580 * C118) *
                 C116 +
             (C4575 * C138 - C4579 * C127 + C47448 * C139 - C4580 * C128) *
                 C47384) *
                C4577 +
            ((C4728 - C4729 + C4730 - C4731) * C116 +
             (C4732 - C4733 + C4734 - C4735) * C47384) *
                C47479) *
               C47264 +
           (((C4579 * C414 - C4575 * C424 + C4580 * C415 - C47448 * C425) *
                 C116 +
             (C4579 * C427 - C4575 * C444 + C4580 * C428 - C47448 * C445) *
                 C47384) *
                C4577 +
            ((C5384 - C5385 + C5386 - C5387) * C116 +
             (C5388 - C5389 + C5390 - C5391) * C47384) *
                C47479) *
               C47271 +
           (((C4575 * C430 - C4579 * C417 + C47448 * C431 - C4580 * C418) *
                 C116 +
             (C4575 * C447 - C4579 * C433 + C47448 * C448 - C4580 * C434) *
                 C47384) *
                C4577 +
            ((C5814 - C5815 + C5816 - C5817) * C116 +
             (C5818 - C5819 + C5820 - C5821) * C47384) *
                C47479) *
               C3602) *
              C47222 +
          ((((C4729 - C4728 + C4731 - C4730) * C116 +
             (C4733 - C4732 + C4735 - C4734) * C47384) *
                C4577 +
            ((C4736 - C4737 + C4738 - C4739) * C116 +
             (C4740 - C4741 + C4742 - C4743) * C47384) *
                C47479) *
               C47264 +
           (((C5385 - C5384 + C5387 - C5386) * C116 +
             (C5389 - C5388 + C5391 - C5390) * C47384) *
                C4577 +
            ((C5822 - C5823 + C5824 - C5825) * C116 +
             (C5826 - C5827 + C5828 - C5829) * C47384) *
                C47479) *
               C47271 +
           (((C5815 - C5814 + C5817 - C5816) * C116 +
             (C5819 - C5818 + C5821 - C5820) * C47384) *
                C4577 +
            ((C5830 - C5831 + C5832 - C5833) * C116 +
             (C5834 - C5835 + C5836 - C5837) * C47384) *
                C47479) *
               C3602) *
              C47229 +
          ((((C4737 - C4736 + C4739 - C4738) * C116 +
             (C4741 - C4740 + C4743 - C4742) * C47384) *
                C4577 +
            ((C5644 - C5645 + C5646 - C5647) * C116 +
             (C5648 - C5649 + C5650 - C5651) * C47384) *
                C47479) *
               C47264 +
           (((C5823 - C5822 + C5825 - C5824) * C116 +
             (C5827 - C5826 + C5829 - C5828) * C47384) *
                C4577 +
            ((C6316 - C6317 + C6318 - C6319) * C116 +
             (C6320 - C6321 + C6322 - C6323) * C47384) *
                C47479) *
               C47271 +
           (((C5831 - C5830 + C5833 - C5832) * C116 +
             (C5835 - C5834 + C5837 - C5836) * C47384) *
                C4577 +
            ((C4575 * C5807 - C4579 * C5805 + C47448 * C5808 - C4580 * C5806) *
                 C116 +
             (C4575 * C5811 - C4579 * C5809 + C47448 * C5812 - C4580 * C5810) *
                 C47384) *
                C47479) *
               C3602) *
              C2700) *
         C47135) /
        (p * q * std::sqrt(p + q));
    d2ee[32] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C4575 * C124 - C4579 * C117 + C47448 * C125 - C4580 * C118) *
                 C116 +
             (C4575 * C138 - C4579 * C127 + C47448 * C139 - C4580 * C128) *
                 C47384) *
                C4577 +
            ((C4728 - C4729 + C4730 - C4731) * C116 +
             (C4732 - C4733 + C4734 - C4735) * C47384) *
                C47479) *
               C3094 +
           (((C4579 * C414 - C4575 * C424 + C4580 * C415 - C47448 * C425) *
                 C116 +
             (C4579 * C427 - C4575 * C444 + C4580 * C428 - C47448 * C445) *
                 C47384) *
                C4577 +
            ((C5384 - C5385 + C5386 - C5387) * C116 +
             (C5388 - C5389 + C5390 - C5391) * C47384) *
                C47479) *
               C47268) *
              C47507 +
          ((((C4729 - C4728 + C4731 - C4730) * C116 +
             (C4733 - C4732 + C4735 - C4734) * C47384) *
                C4577 +
            ((C4736 - C4737 + C4738 - C4739) * C116 +
             (C4740 - C4741 + C4742 - C4743) * C47384) *
                C47479) *
               C3094 +
           (((C5385 - C5384 + C5387 - C5386) * C116 +
             (C5389 - C5388 + C5391 - C5390) * C47384) *
                C4577 +
            ((C5822 - C5823 + C5824 - C5825) * C116 +
             (C5826 - C5827 + C5828 - C5829) * C47384) *
                C47479) *
               C47268) *
              C47503 +
          ((((C4737 - C4736 + C4739 - C4738) * C116 +
             (C4741 - C4740 + C4743 - C4742) * C47384) *
                C4577 +
            ((C5644 - C5645 + C5646 - C5647) * C116 +
             (C5648 - C5649 + C5650 - C5651) * C47384) *
                C47479) *
               C3094 +
           (((C5823 - C5822 + C5825 - C5824) * C116 +
             (C5827 - C5826 + C5829 - C5828) * C47384) *
                C4577 +
            ((C6316 - C6317 + C6318 - C6319) * C116 +
             (C6320 - C6321 + C6322 - C6323) * C47384) *
                C47479) *
               C47268) *
              C47493 +
          ((((C5645 - C5644 + C5647 - C5646) * C116 +
             (C5649 - C5648 + C5651 - C5650) * C47384) *
                C4577 +
            ((C5652 - C5653 + C5654 - C5655) * C116 +
             (C5656 - C5657 + C5658 - C5659) * C47384) *
                C47479) *
               C3094 +
           (((C6317 - C6316 + C6319 - C6318) * C116 +
             (C6321 - C6320 + C6323 - C6322) * C47384) *
                C4577 +
            ((C4575 * C6309 - C4579 * C6307 + C47448 * C6310 - C4580 * C6308) *
                 C116 +
             (C4575 * C6313 - C4579 * C6311 + C47448 * C6314 - C4580 * C6312) *
                 C47384) *
                C47479) *
               C47268) *
              C47471) *
         C47135) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C4575 * C124 - C4579 * C117 + C47448 * C125 - C4580 * C118) *
                  C116 +
              (C4575 * C138 - C4579 * C127 + C47448 * C139 - C4580 * C128) *
                  C47384) *
                 C4577 +
             ((C4728 - C4729 + C4730 - C4731) * C116 +
              (C4732 - C4733 + C4734 - C4735) * C47384) *
                 C47479) *
                C3094 +
            (((C4579 * C414 - C4575 * C424 + C4580 * C415 - C47448 * C425) *
                  C116 +
              (C4579 * C427 - C4575 * C444 + C4580 * C428 - C47448 * C445) *
                  C47384) *
                 C4577 +
             ((C5384 - C5385 + C5386 - C5387) * C116 +
              (C5388 - C5389 + C5390 - C5391) * C47384) *
                 C47479) *
                C47268) *
               C2332 +
           ((((C4729 - C4728 + C4731 - C4730) * C116 +
              (C4733 - C4732 + C4735 - C4734) * C47384) *
                 C4577 +
             ((C4736 - C4737 + C4738 - C4739) * C116 +
              (C4740 - C4741 + C4742 - C4743) * C47384) *
                 C47479) *
                C3094 +
            (((C5385 - C5384 + C5387 - C5386) * C116 +
              (C5389 - C5388 + C5391 - C5390) * C47384) *
                 C4577 +
             ((C5822 - C5823 + C5824 - C5825) * C116 +
              (C5826 - C5827 + C5828 - C5829) * C47384) *
                 C47479) *
                C47268) *
               C47226) *
              C47497 +
          (((((C4579 * C118 - C4575 * C125 + C4580 * C119 - C47448 * C126) *
                  C116 +
              (C4579 * C128 - C4575 * C139 + C4580 * C129 - C47448 * C140) *
                  C47384) *
                 C4577 +
             ((C4744 - C4745 + C4746 - C4747) * C116 +
              (C4748 - C4749 + C4750 - C4751) * C47384) *
                 C47479) *
                C3094 +
            (((C4575 * C425 - C4579 * C415 + C47448 * C426 - C4580 * C416) *
                  C116 +
              (C4575 * C445 - C4579 * C428 + C47448 * C446 - C4580 * C429) *
                  C47384) *
                 C4577 +
             ((C5392 - C5393 + C5394 - C5395) * C116 +
              (C5396 - C5397 + C5398 - C5399) * C47384) *
                 C47479) *
                C47268) *
               C2332 +
           ((((C4745 - C4744 + C4747 - C4746) * C116 +
              (C4749 - C4748 + C4751 - C4750) * C47384) *
                 C4577 +
             ((C4752 - C4753 + C4754 - C4755) * C116 +
              (C4756 - C4757 + C4758 - C4759) * C47384) *
                 C47479) *
                C3094 +
            (((C5393 - C5392 + C5395 - C5394) * C116 +
              (C5397 - C5396 + C5399 - C5398) * C47384) *
                 C4577 +
             ((C6170 - C6171 + C6172 - C6173) * C116 +
              (C6174 - C6175 + C6176 - C6177) * C47384) *
                 C47479) *
                C47268) *
               C47226) *
              C47484 +
          (((((C4575 * C126 - C4579 * C119 + C47448 * C130 - C4580 * C120) *
                  C116 +
              (C4575 * C140 - C4579 * C129 + C47448 * C141 - C4580 * C131) *
                  C47384) *
                 C4577 +
             ((C4760 - C4761 + C4762 - C4763) * C116 +
              (C4764 - C4765 + C4766 - C4767) * C47384) *
                 C47479) *
                C3094 +
            (((C4579 * C416 - C4575 * C426 + C4580 * C420 - C47448 * C436) *
                  C116 +
              (C4579 * C429 - C4575 * C446 + C4580 * C437 - C47448 * C450) *
                  C47384) *
                 C4577 +
             ((C5400 - C5401 + C5402 - C5403) * C116 +
              (C5404 - C5405 + C5406 - C5407) * C47384) *
                 C47479) *
                C47268) *
               C2332 +
           ((((C4761 - C4760 + C4763 - C4762) * C116 +
              (C4765 - C4764 + C4767 - C4766) * C47384) *
                 C4577 +
             ((C4768 - C4769 + C4770 - C4771) * C116 +
              (C4772 - C4773 + C4774 - C4775) * C47384) *
                 C47479) *
                C3094 +
            (((C5401 - C5400 + C5403 - C5402) * C116 +
              (C5405 - C5404 + C5407 - C5406) * C47384) *
                 C4577 +
             ((C4575 * C1167 - C4579 * C1155 + C47448 * C1441 - C4580 * C1440) *
                  C116 +
              (C4575 * C1182 - C4579 * C1170 + C47448 * C1443 - C4580 * C1442) *
                  C47384) *
                 C47479) *
                C47268) *
               C47226) *
              C47455)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C4575 * C124 - C4579 * C117 + C47448 * C125 - C4580 * C118) *
                 C116 +
             (C4575 * C138 - C4579 * C127 + C47448 * C139 - C4580 * C128) *
                 C47384) *
                C4577 +
            ((C4728 - C4729 + C4730 - C4731) * C116 +
             (C4732 - C4733 + C4734 - C4735) * C47384) *
                C47479) *
               C47508 +
           (((C4579 * C414 - C4575 * C424 + C4580 * C415 - C47448 * C425) *
                 C116 +
             (C4579 * C427 - C4575 * C444 + C4580 * C428 - C47448 * C445) *
                 C47384) *
                C4577 +
            ((C5384 - C5385 + C5386 - C5387) * C116 +
             (C5388 - C5389 + C5390 - C5391) * C47384) *
                C47479) *
               C47505 +
           (((C4575 * C430 - C4579 * C417 + C47448 * C431 - C4580 * C418) *
                 C116 +
             (C4575 * C447 - C4579 * C433 + C47448 * C448 - C4580 * C434) *
                 C47384) *
                C4577 +
            ((C5814 - C5815 + C5816 - C5817) * C116 +
             (C5818 - C5819 + C5820 - C5821) * C47384) *
                C47479) *
               C47496 +
           (((C4579 * C1844 - C4575 * C1850 + C4580 * C1845 - C47448 * C1851) *
                 C116 +
             (C4579 * C1853 - C4575 * C1862 + C4580 * C1854 - C47448 * C1863) *
                 C47384) *
                C4577 +
            ((C7176 - C7177 + C7178 - C7179) * C116 +
             (C7180 - C7181 + C7182 - C7183) * C47384) *
                C47479) *
               C47477) *
              C2332 +
          ((((C4729 - C4728 + C4731 - C4730) * C116 +
             (C4733 - C4732 + C4735 - C4734) * C47384) *
                C4577 +
            ((C4736 - C4737 + C4738 - C4739) * C116 +
             (C4740 - C4741 + C4742 - C4743) * C47384) *
                C47479) *
               C47508 +
           (((C5385 - C5384 + C5387 - C5386) * C116 +
             (C5389 - C5388 + C5391 - C5390) * C47384) *
                C4577 +
            ((C5822 - C5823 + C5824 - C5825) * C116 +
             (C5826 - C5827 + C5828 - C5829) * C47384) *
                C47479) *
               C47505 +
           (((C5815 - C5814 + C5817 - C5816) * C116 +
             (C5819 - C5818 + C5821 - C5820) * C47384) *
                C4577 +
            ((C5830 - C5831 + C5832 - C5833) * C116 +
             (C5834 - C5835 + C5836 - C5837) * C47384) *
                C47479) *
               C47496 +
           (((C7177 - C7176 + C7179 - C7178) * C116 +
             (C7181 - C7180 + C7183 - C7182) * C47384) *
                C4577 +
            ((C4575 * C7169 - C4579 * C7167 + C47448 * C7170 - C4580 * C7168) *
                 C116 +
             (C4575 * C7173 - C4579 * C7171 + C47448 * C7174 - C4580 * C7172) *
                 C47384) *
                C47479) *
               C47477) *
              C47226) *
         C47135) /
            (p * q * std::sqrt(p + q));
    d2ee[33] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C4575 * C124 - C4579 * C117 + C47448 * C125 - C4580 * C118) *
                  C116 +
              (C4575 * C138 - C4579 * C127 + C47448 * C139 - C4580 * C128) *
                  C47384) *
                 C4577 +
             ((C4728 - C4729 + C4730 - C4731) * C116 +
              (C4732 - C4733 + C4734 - C4735) * C47384) *
                 C47479) *
                C47264 +
            (((C4579 * C414 - C4575 * C424 + C4580 * C415 - C47448 * C425) *
                  C116 +
              (C4579 * C427 - C4575 * C444 + C4580 * C428 - C47448 * C445) *
                  C47384) *
                 C4577 +
             ((C5384 - C5385 + C5386 - C5387) * C116 +
              (C5388 - C5389 + C5390 - C5391) * C47384) *
                 C47479) *
                C47271 +
            (((C4575 * C430 - C4579 * C417 + C47448 * C431 - C4580 * C418) *
                  C116 +
              (C4575 * C447 - C4579 * C433 + C47448 * C448 - C4580 * C434) *
                  C47384) *
                 C4577 +
             ((C5814 - C5815 + C5816 - C5817) * C116 +
              (C5818 - C5819 + C5820 - C5821) * C47384) *
                 C47479) *
                C3602) *
               C2332 +
           ((((C4729 - C4728 + C4731 - C4730) * C116 +
              (C4733 - C4732 + C4735 - C4734) * C47384) *
                 C4577 +
             ((C4736 - C4737 + C4738 - C4739) * C116 +
              (C4740 - C4741 + C4742 - C4743) * C47384) *
                 C47479) *
                C47264 +
            (((C5385 - C5384 + C5387 - C5386) * C116 +
              (C5389 - C5388 + C5391 - C5390) * C47384) *
                 C4577 +
             ((C5822 - C5823 + C5824 - C5825) * C116 +
              (C5826 - C5827 + C5828 - C5829) * C47384) *
                 C47479) *
                C47271 +
            (((C5815 - C5814 + C5817 - C5816) * C116 +
              (C5819 - C5818 + C5821 - C5820) * C47384) *
                 C4577 +
             ((C5830 - C5831 + C5832 - C5833) * C116 +
              (C5834 - C5835 + C5836 - C5837) * C47384) *
                 C47479) *
                C3602) *
               C47226) *
              C47415 +
          (((((C4579 * C118 - C4575 * C125 + C4580 * C119 - C47448 * C126) *
                  C116 +
              (C4579 * C128 - C4575 * C139 + C4580 * C129 - C47448 * C140) *
                  C47384) *
                 C4577 +
             ((C4744 - C4745 + C4746 - C4747) * C116 +
              (C4748 - C4749 + C4750 - C4751) * C47384) *
                 C47479) *
                C47264 +
            (((C4575 * C425 - C4579 * C415 + C47448 * C426 - C4580 * C416) *
                  C116 +
              (C4575 * C445 - C4579 * C428 + C47448 * C446 - C4580 * C429) *
                  C47384) *
                 C4577 +
             ((C5392 - C5393 + C5394 - C5395) * C116 +
              (C5396 - C5397 + C5398 - C5399) * C47384) *
                 C47479) *
                C47271 +
            (((C4579 * C418 - C4575 * C431 + C4580 * C419 - C47448 * C432) *
                  C116 +
              (C4579 * C434 - C4575 * C448 + C4580 * C435 - C47448 * C449) *
                  C47384) *
                 C4577 +
             ((C6900 - C6901 + C6902 - C6903) * C116 +
              (C6904 - C6905 + C6906 - C6907) * C47384) *
                 C47479) *
                C3602) *
               C2332 +
           ((((C4745 - C4744 + C4747 - C4746) * C116 +
              (C4749 - C4748 + C4751 - C4750) * C47384) *
                 C4577 +
             ((C4752 - C4753 + C4754 - C4755) * C116 +
              (C4756 - C4757 + C4758 - C4759) * C47384) *
                 C47479) *
                C47264 +
            (((C5393 - C5392 + C5395 - C5394) * C116 +
              (C5397 - C5396 + C5399 - C5398) * C47384) *
                 C4577 +
             ((C6170 - C6171 + C6172 - C6173) * C116 +
              (C6174 - C6175 + C6176 - C6177) * C47384) *
                 C47479) *
                C47271 +
            (((C6901 - C6900 + C6903 - C6902) * C116 +
              (C6905 - C6904 + C6907 - C6906) * C47384) *
                 C4577 +
             ((C4575 * C1172 - C4579 * C1157 + C47448 * C1173 - C4580 * C1158) *
                  C116 +
              (C4575 * C1184 - C4579 * C1175 + C47448 * C1185 - C4580 * C1176) *
                  C47384) *
                 C47479) *
                C3602) *
               C47226) *
              C47146)) /
        (p * q * std::sqrt(p + q));
    d2ee[34] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C4575 * C124 - C4579 * C117 + C47448 * C125 - C4580 * C118) *
                  C116 +
              (C4575 * C138 - C4579 * C127 + C47448 * C139 - C4580 * C128) *
                  C47384) *
                 C4577 +
             ((C4728 - C4729 + C4730 - C4731) * C116 +
              (C4732 - C4733 + C4734 - C4735) * C47384) *
                 C47479) *
                C3094 +
            (((C4579 * C414 - C4575 * C424 + C4580 * C415 - C47448 * C425) *
                  C116 +
              (C4579 * C427 - C4575 * C444 + C4580 * C428 - C47448 * C445) *
                  C47384) *
                 C4577 +
             ((C5384 - C5385 + C5386 - C5387) * C116 +
              (C5388 - C5389 + C5390 - C5391) * C47384) *
                 C47479) *
                C47268) *
               C2332 +
           ((((C4729 - C4728 + C4731 - C4730) * C116 +
              (C4733 - C4732 + C4735 - C4734) * C47384) *
                 C4577 +
             ((C4736 - C4737 + C4738 - C4739) * C116 +
              (C4740 - C4741 + C4742 - C4743) * C47384) *
                 C47479) *
                C3094 +
            (((C5385 - C5384 + C5387 - C5386) * C116 +
              (C5389 - C5388 + C5391 - C5390) * C47384) *
                 C4577 +
             ((C5822 - C5823 + C5824 - C5825) * C116 +
              (C5826 - C5827 + C5828 - C5829) * C47384) *
                 C47479) *
                C47268) *
               C47226) *
              C47497 +
          (((((C4579 * C118 - C4575 * C125 + C4580 * C119 - C47448 * C126) *
                  C116 +
              (C4579 * C128 - C4575 * C139 + C4580 * C129 - C47448 * C140) *
                  C47384) *
                 C4577 +
             ((C4744 - C4745 + C4746 - C4747) * C116 +
              (C4748 - C4749 + C4750 - C4751) * C47384) *
                 C47479) *
                C3094 +
            (((C4575 * C425 - C4579 * C415 + C47448 * C426 - C4580 * C416) *
                  C116 +
              (C4575 * C445 - C4579 * C428 + C47448 * C446 - C4580 * C429) *
                  C47384) *
                 C4577 +
             ((C5392 - C5393 + C5394 - C5395) * C116 +
              (C5396 - C5397 + C5398 - C5399) * C47384) *
                 C47479) *
                C47268) *
               C2332 +
           ((((C4745 - C4744 + C4747 - C4746) * C116 +
              (C4749 - C4748 + C4751 - C4750) * C47384) *
                 C4577 +
             ((C4752 - C4753 + C4754 - C4755) * C116 +
              (C4756 - C4757 + C4758 - C4759) * C47384) *
                 C47479) *
                C3094 +
            (((C5393 - C5392 + C5395 - C5394) * C116 +
              (C5397 - C5396 + C5399 - C5398) * C47384) *
                 C4577 +
             ((C6170 - C6171 + C6172 - C6173) * C116 +
              (C6174 - C6175 + C6176 - C6177) * C47384) *
                 C47479) *
                C47268) *
               C47226) *
              C47484 +
          (((((C4575 * C126 - C4579 * C119 + C47448 * C130 - C4580 * C120) *
                  C116 +
              (C4575 * C140 - C4579 * C129 + C47448 * C141 - C4580 * C131) *
                  C47384) *
                 C4577 +
             ((C4760 - C4761 + C4762 - C4763) * C116 +
              (C4764 - C4765 + C4766 - C4767) * C47384) *
                 C47479) *
                C3094 +
            (((C4579 * C416 - C4575 * C426 + C4580 * C420 - C47448 * C436) *
                  C116 +
              (C4579 * C429 - C4575 * C446 + C4580 * C437 - C47448 * C450) *
                  C47384) *
                 C4577 +
             ((C5400 - C5401 + C5402 - C5403) * C116 +
              (C5404 - C5405 + C5406 - C5407) * C47384) *
                 C47479) *
                C47268) *
               C2332 +
           ((((C4761 - C4760 + C4763 - C4762) * C116 +
              (C4765 - C4764 + C4767 - C4766) * C47384) *
                 C4577 +
             ((C4768 - C4769 + C4770 - C4771) * C116 +
              (C4772 - C4773 + C4774 - C4775) * C47384) *
                 C47479) *
                C3094 +
            (((C5401 - C5400 + C5403 - C5402) * C116 +
              (C5405 - C5404 + C5407 - C5406) * C47384) *
                 C4577 +
             ((C4575 * C1167 - C4579 * C1155 + C47448 * C1441 - C4580 * C1440) *
                  C116 +
              (C4575 * C1182 - C4579 * C1170 + C47448 * C1443 - C4580 * C1442) *
                  C47384) *
                 C47479) *
                C47268) *
               C47226) *
              C47455)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C4575 * C124 - C4579 * C117 + C47448 * C125 - C4580 * C118) *
                 C116 +
             (C4575 * C138 - C4579 * C127 + C47448 * C139 - C4580 * C128) *
                 C47384) *
                C4577 +
            ((C4728 - C4729 + C4730 - C4731) * C116 +
             (C4732 - C4733 + C4734 - C4735) * C47384) *
                C47479) *
               C3094 +
           (((C4579 * C414 - C4575 * C424 + C4580 * C415 - C47448 * C425) *
                 C116 +
             (C4579 * C427 - C4575 * C444 + C4580 * C428 - C47448 * C445) *
                 C47384) *
                C4577 +
            ((C5384 - C5385 + C5386 - C5387) * C116 +
             (C5388 - C5389 + C5390 - C5391) * C47384) *
                C47479) *
               C47268) *
              C47507 +
          ((((C4729 - C4728 + C4731 - C4730) * C116 +
             (C4733 - C4732 + C4735 - C4734) * C47384) *
                C4577 +
            ((C4736 - C4737 + C4738 - C4739) * C116 +
             (C4740 - C4741 + C4742 - C4743) * C47384) *
                C47479) *
               C3094 +
           (((C5385 - C5384 + C5387 - C5386) * C116 +
             (C5389 - C5388 + C5391 - C5390) * C47384) *
                C4577 +
            ((C5822 - C5823 + C5824 - C5825) * C116 +
             (C5826 - C5827 + C5828 - C5829) * C47384) *
                C47479) *
               C47268) *
              C47503 +
          ((((C4737 - C4736 + C4739 - C4738) * C116 +
             (C4741 - C4740 + C4743 - C4742) * C47384) *
                C4577 +
            ((C5644 - C5645 + C5646 - C5647) * C116 +
             (C5648 - C5649 + C5650 - C5651) * C47384) *
                C47479) *
               C3094 +
           (((C5823 - C5822 + C5825 - C5824) * C116 +
             (C5827 - C5826 + C5829 - C5828) * C47384) *
                C4577 +
            ((C6316 - C6317 + C6318 - C6319) * C116 +
             (C6320 - C6321 + C6322 - C6323) * C47384) *
                C47479) *
               C47268) *
              C47493 +
          ((((C5645 - C5644 + C5647 - C5646) * C116 +
             (C5649 - C5648 + C5651 - C5650) * C47384) *
                C4577 +
            ((C5652 - C5653 + C5654 - C5655) * C116 +
             (C5656 - C5657 + C5658 - C5659) * C47384) *
                C47479) *
               C3094 +
           (((C6317 - C6316 + C6319 - C6318) * C116 +
             (C6321 - C6320 + C6323 - C6322) * C47384) *
                C4577 +
            ((C4575 * C6309 - C4579 * C6307 + C47448 * C6310 - C4580 * C6308) *
                 C116 +
             (C4575 * C6313 - C4579 * C6311 + C47448 * C6314 - C4580 * C6312) *
                 C47384) *
                C47479) *
               C47268) *
              C47471) *
         C47135) /
            (p * q * std::sqrt(p + q));
    d2ee[35] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C4575 * C124 - C4579 * C117 + C47448 * C125 - C4580 * C118) *
                 C116 +
             (C4575 * C138 - C4579 * C127 + C47448 * C139 - C4580 * C128) *
                 C47384) *
                C4577 +
            ((C4728 - C4729 + C4730 - C4731) * C116 +
             (C4732 - C4733 + C4734 - C4735) * C47384) *
                C47479) *
               C47181 * C1284 +
           (((C4729 - C4728 + C4731 - C4730) * C116 +
             (C4733 - C4732 + C4735 - C4734) * C47384) *
                C4577 +
            ((C4736 - C4737 + C4738 - C4739) * C116 +
             (C4740 - C4741 + C4742 - C4743) * C47384) *
                C47479) *
               C47181 * C1285 +
           (((C4737 - C4736 + C4739 - C4738) * C116 +
             (C4741 - C4740 + C4743 - C4742) * C47384) *
                C4577 +
            ((C5644 - C5645 + C5646 - C5647) * C116 +
             (C5648 - C5649 + C5650 - C5651) * C47384) *
                C47479) *
               C47181 * C1286 +
           (((C5645 - C5644 + C5647 - C5646) * C116 +
             (C5649 - C5648 + C5651 - C5650) * C47384) *
                C4577 +
            ((C5652 - C5653 + C5654 - C5655) * C116 +
             (C5656 - C5657 + C5658 - C5659) * C47384) *
                C47479) *
               C47181 * C47471) *
              C47415 +
          ((((C4579 * C118 - C4575 * C125 + C4580 * C119 - C47448 * C126) *
                 C116 +
             (C4579 * C128 - C4575 * C139 + C4580 * C129 - C47448 * C140) *
                 C47384) *
                C4577 +
            ((C4744 - C4745 + C4746 - C4747) * C116 +
             (C4748 - C4749 + C4750 - C4751) * C47384) *
                C47479) *
               C47181 * C1284 +
           (((C4745 - C4744 + C4747 - C4746) * C116 +
             (C4749 - C4748 + C4751 - C4750) * C47384) *
                C4577 +
            ((C4752 - C4753 + C4754 - C4755) * C116 +
             (C4756 - C4757 + C4758 - C4759) * C47384) *
                C47479) *
               C47181 * C1285 +
           (((C4753 - C4752 + C4755 - C4754) * C116 +
             (C4757 - C4756 + C4759 - C4758) * C47384) *
                C4577 +
            ((C5968 - C5969 + C5970 - C5971) * C116 +
             (C5972 - C5973 + C5974 - C5975) * C47384) *
                C47479) *
               C47181 * C1286 +
           (((C5969 - C5968 + C5971 - C5970) * C116 +
             (C5973 - C5972 + C5975 - C5974) * C47384) *
                C4577 +
            ((C4575 * C1029 - C4579 * C1020 + C47448 * C1030 - C4580 * C1021) *
                 C116 +
             (C4575 * C1038 - C4579 * C1032 + C47448 * C1039 - C4580 * C1033) *
                 C47384) *
                C47479) *
               C47181 * C47471) *
              C47146)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C4575 * C124 - C4579 * C117 + C47448 * C125 - C4580 * C118) *
                 C116 +
             (C4575 * C138 - C4579 * C127 + C47448 * C139 - C4580 * C128) *
                 C47384) *
                C4577 +
            ((C4728 - C4729 + C4730 - C4731) * C116 +
             (C4732 - C4733 + C4734 - C4735) * C47384) *
                C47479) *
               C47181 * C47429 +
           (((C4729 - C4728 + C4731 - C4730) * C116 +
             (C4733 - C4732 + C4735 - C4734) * C47384) *
                C4577 +
            ((C4736 - C4737 + C4738 - C4739) * C116 +
             (C4740 - C4741 + C4742 - C4743) * C47384) *
                C47479) *
               C47181 * C47226) *
              C554 +
          ((((C4579 * C118 - C4575 * C125 + C4580 * C119 - C47448 * C126) *
                 C116 +
             (C4579 * C128 - C4575 * C139 + C4580 * C129 - C47448 * C140) *
                 C47384) *
                C4577 +
            ((C4744 - C4745 + C4746 - C4747) * C116 +
             (C4748 - C4749 + C4750 - C4751) * C47384) *
                C47479) *
               C47181 * C47429 +
           (((C4745 - C4744 + C4747 - C4746) * C116 +
             (C4749 - C4748 + C4751 - C4750) * C47384) *
                C4577 +
            ((C4752 - C4753 + C4754 - C4755) * C116 +
             (C4756 - C4757 + C4758 - C4759) * C47384) *
                C47479) *
               C47181 * C47226) *
              C555 +
          ((((C4575 * C126 - C4579 * C119 + C47448 * C130 - C4580 * C120) *
                 C116 +
             (C4575 * C140 - C4579 * C129 + C47448 * C141 - C4580 * C131) *
                 C47384) *
                C4577 +
            ((C4760 - C4761 + C4762 - C4763) * C116 +
             (C4764 - C4765 + C4766 - C4767) * C47384) *
                C47479) *
               C47181 * C47429 +
           (((C4761 - C4760 + C4763 - C4762) * C116 +
             (C4765 - C4764 + C4767 - C4766) * C47384) *
                C4577 +
            ((C4768 - C4769 + C4770 - C4771) * C116 +
             (C4772 - C4773 + C4774 - C4775) * C47384) *
                C47479) *
               C47181 * C47226) *
              C556 +
          ((((C4579 * C120 - C4575 * C130 + C4580 * C121 - C47448 * C132) *
                 C116 +
             (C4579 * C131 - C4575 * C141 + C4580 * C133 - C47448 * C142) *
                 C47384) *
                C4577 +
            ((C5052 - C5053 + C5054 - C5055) * C116 +
             (C5056 - C5057 + C5058 - C5059) * C47384) *
                C47479) *
               C47181 * C47429 +
           (((C5053 - C5052 + C5055 - C5054) * C116 +
             (C5057 - C5056 + C5059 - C5058) * C47384) *
                C4577 +
            ((C4575 * C285 - C4579 * C268 + C47448 * C289 - C4580 * C270) *
                 C116 +
             (C4575 * C298 - C4579 * C286 + C47448 * C300 - C4580 * C290) *
                 C47384) *
                C47479) *
               C47181 * C47226) *
              C47465)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C4575 * C124 - C4579 * C117 + C47448 * C125 - C4580 * C118) *
                  C116 +
              (C4575 * C138 - C4579 * C127 + C47448 * C139 - C4580 * C128) *
                  C47384) *
                 C4577 +
             ((C4728 - C4729 + C4730 - C4731) * C116 +
              (C4732 - C4733 + C4734 - C4735) * C47384) *
                 C47479) *
                C1664 +
            (((C4579 * C414 - C4575 * C424 + C4580 * C415 - C47448 * C425) *
                  C116 +
              (C4579 * C427 - C4575 * C444 + C4580 * C428 - C47448 * C445) *
                  C47384) *
                 C4577 +
             ((C5384 - C5385 + C5386 - C5387) * C116 +
              (C5388 - C5389 + C5390 - C5391) * C47384) *
                 C47479) *
                C1665 +
            (((C4575 * C430 - C4579 * C417 + C47448 * C431 - C4580 * C418) *
                  C116 +
              (C4575 * C447 - C4579 * C433 + C47448 * C448 - C4580 * C434) *
                  C47384) *
                 C4577 +
             ((C5814 - C5815 + C5816 - C5817) * C116 +
              (C5818 - C5819 + C5820 - C5821) * C47384) *
                 C47479) *
                C47464) *
               C47429 +
           ((((C4729 - C4728 + C4731 - C4730) * C116 +
              (C4733 - C4732 + C4735 - C4734) * C47384) *
                 C4577 +
             ((C4736 - C4737 + C4738 - C4739) * C116 +
              (C4740 - C4741 + C4742 - C4743) * C47384) *
                 C47479) *
                C1664 +
            (((C5385 - C5384 + C5387 - C5386) * C116 +
              (C5389 - C5388 + C5391 - C5390) * C47384) *
                 C4577 +
             ((C5822 - C5823 + C5824 - C5825) * C116 +
              (C5826 - C5827 + C5828 - C5829) * C47384) *
                 C47479) *
                C1665 +
            (((C5815 - C5814 + C5817 - C5816) * C116 +
              (C5819 - C5818 + C5821 - C5820) * C47384) *
                 C4577 +
             ((C5830 - C5831 + C5832 - C5833) * C116 +
              (C5834 - C5835 + C5836 - C5837) * C47384) *
                 C47479) *
                C47464) *
               C47226) *
              C47415 +
          (((((C4579 * C118 - C4575 * C125 + C4580 * C119 - C47448 * C126) *
                  C116 +
              (C4579 * C128 - C4575 * C139 + C4580 * C129 - C47448 * C140) *
                  C47384) *
                 C4577 +
             ((C4744 - C4745 + C4746 - C4747) * C116 +
              (C4748 - C4749 + C4750 - C4751) * C47384) *
                 C47479) *
                C1664 +
            (((C4575 * C425 - C4579 * C415 + C47448 * C426 - C4580 * C416) *
                  C116 +
              (C4575 * C445 - C4579 * C428 + C47448 * C446 - C4580 * C429) *
                  C47384) *
                 C4577 +
             ((C5392 - C5393 + C5394 - C5395) * C116 +
              (C5396 - C5397 + C5398 - C5399) * C47384) *
                 C47479) *
                C1665 +
            (((C4579 * C418 - C4575 * C431 + C4580 * C419 - C47448 * C432) *
                  C116 +
              (C4579 * C434 - C4575 * C448 + C4580 * C435 - C47448 * C449) *
                  C47384) *
                 C4577 +
             ((C6900 - C6901 + C6902 - C6903) * C116 +
              (C6904 - C6905 + C6906 - C6907) * C47384) *
                 C47479) *
                C47464) *
               C47429 +
           ((((C4745 - C4744 + C4747 - C4746) * C116 +
              (C4749 - C4748 + C4751 - C4750) * C47384) *
                 C4577 +
             ((C4752 - C4753 + C4754 - C4755) * C116 +
              (C4756 - C4757 + C4758 - C4759) * C47384) *
                 C47479) *
                C1664 +
            (((C5393 - C5392 + C5395 - C5394) * C116 +
              (C5397 - C5396 + C5399 - C5398) * C47384) *
                 C4577 +
             ((C6170 - C6171 + C6172 - C6173) * C116 +
              (C6174 - C6175 + C6176 - C6177) * C47384) *
                 C47479) *
                C1665 +
            (((C6901 - C6900 + C6903 - C6902) * C116 +
              (C6905 - C6904 + C6907 - C6906) * C47384) *
                 C4577 +
             ((C4575 * C1172 - C4579 * C1157 + C47448 * C1173 - C4580 * C1158) *
                  C116 +
              (C4575 * C1184 - C4579 * C1175 + C47448 * C1185 - C4580 * C1176) *
                  C47384) *
                 C47479) *
                C47464) *
               C47226) *
              C47146)) /
            (p * q * std::sqrt(p + q));
    d2ee[36] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C4575 * C124 - C4579 * C117 + C47448 * C125 - C4580 * C118) *
                 C116 +
             (C4575 * C138 - C4579 * C127 + C47448 * C139 - C4580 * C128) *
                 C47384) *
                C4577 +
            ((C4728 - C4729 + C4730 - C4731) * C116 +
             (C4732 - C4733 + C4734 - C4735) * C47384) *
                C47479) *
               C47430 +
           (((C4579 * C414 - C4575 * C424 + C4580 * C415 - C47448 * C425) *
                 C116 +
             (C4579 * C427 - C4575 * C444 + C4580 * C428 - C47448 * C445) *
                 C47384) *
                C4577 +
            ((C5384 - C5385 + C5386 - C5387) * C116 +
             (C5388 - C5389 + C5390 - C5391) * C47384) *
                C47479) *
               C47268) *
              C1284 +
          ((((C4729 - C4728 + C4731 - C4730) * C116 +
             (C4733 - C4732 + C4735 - C4734) * C47384) *
                C4577 +
            ((C4736 - C4737 + C4738 - C4739) * C116 +
             (C4740 - C4741 + C4742 - C4743) * C47384) *
                C47479) *
               C47430 +
           (((C5385 - C5384 + C5387 - C5386) * C116 +
             (C5389 - C5388 + C5391 - C5390) * C47384) *
                C4577 +
            ((C5822 - C5823 + C5824 - C5825) * C116 +
             (C5826 - C5827 + C5828 - C5829) * C47384) *
                C47479) *
               C47268) *
              C1285 +
          ((((C4737 - C4736 + C4739 - C4738) * C116 +
             (C4741 - C4740 + C4743 - C4742) * C47384) *
                C4577 +
            ((C5644 - C5645 + C5646 - C5647) * C116 +
             (C5648 - C5649 + C5650 - C5651) * C47384) *
                C47479) *
               C47430 +
           (((C5823 - C5822 + C5825 - C5824) * C116 +
             (C5827 - C5826 + C5829 - C5828) * C47384) *
                C4577 +
            ((C6316 - C6317 + C6318 - C6319) * C116 +
             (C6320 - C6321 + C6322 - C6323) * C47384) *
                C47479) *
               C47268) *
              C1286 +
          ((((C5645 - C5644 + C5647 - C5646) * C116 +
             (C5649 - C5648 + C5651 - C5650) * C47384) *
                C4577 +
            ((C5652 - C5653 + C5654 - C5655) * C116 +
             (C5656 - C5657 + C5658 - C5659) * C47384) *
                C47479) *
               C47430 +
           (((C6317 - C6316 + C6319 - C6318) * C116 +
             (C6321 - C6320 + C6323 - C6322) * C47384) *
                C4577 +
            ((C4575 * C6309 - C4579 * C6307 + C47448 * C6310 - C4580 * C6308) *
                 C116 +
             (C4575 * C6313 - C4579 * C6311 + C47448 * C6314 - C4580 * C6312) *
                 C47384) *
                C47479) *
               C47268) *
              C47471) *
         C47135) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C4575 * C124 - C4579 * C117 + C47448 * C125 - C4580 * C118) *
                  C116 +
              (C4575 * C138 - C4579 * C127 + C47448 * C139 - C4580 * C128) *
                  C47384) *
                 C4577 +
             ((C4728 - C4729 + C4730 - C4731) * C116 +
              (C4732 - C4733 + C4734 - C4735) * C47384) *
                 C47479) *
                C47430 +
            (((C4579 * C414 - C4575 * C424 + C4580 * C415 - C47448 * C425) *
                  C116 +
              (C4579 * C427 - C4575 * C444 + C4580 * C428 - C47448 * C445) *
                  C47384) *
                 C4577 +
             ((C5384 - C5385 + C5386 - C5387) * C116 +
              (C5388 - C5389 + C5390 - C5391) * C47384) *
                 C47479) *
                C47268) *
               C47429 +
           ((((C4729 - C4728 + C4731 - C4730) * C116 +
              (C4733 - C4732 + C4735 - C4734) * C47384) *
                 C4577 +
             ((C4736 - C4737 + C4738 - C4739) * C116 +
              (C4740 - C4741 + C4742 - C4743) * C47384) *
                 C47479) *
                C47430 +
            (((C5385 - C5384 + C5387 - C5386) * C116 +
              (C5389 - C5388 + C5391 - C5390) * C47384) *
                 C4577 +
             ((C4575 * C1165 - C4579 * C1153 + C47448 * C1166 - C4580 * C1154) *
                  C116 +
              (C4575 * C1180 - C4579 * C1168 + C47448 * C1181 - C4580 * C1169) *
                  C47384) *
                 C47479) *
                C47268) *
               C47226) *
              C258 +
          (((((C4579 * C118 - C4575 * C125 + C4580 * C119 - C47448 * C126) *
                  C116 +
              (C4579 * C128 - C4575 * C139 + C4580 * C129 - C47448 * C140) *
                  C47384) *
                 C4577 +
             ((C4744 - C4745 + C4746 - C4747) * C116 +
              (C4748 - C4749 + C4750 - C4751) * C47384) *
                 C47479) *
                C47430 +
            (((C4575 * C425 - C4579 * C415 + C47448 * C426 - C4580 * C416) *
                  C116 +
              (C4575 * C445 - C4579 * C428 + C47448 * C446 - C4580 * C429) *
                  C47384) *
                 C4577 +
             ((C5392 - C5393 + C5394 - C5395) * C116 +
              (C5396 - C5397 + C5398 - C5399) * C47384) *
                 C47479) *
                C47268) *
               C47429 +
           ((((C4745 - C4744 + C4747 - C4746) * C116 +
              (C4749 - C4748 + C4751 - C4750) * C47384) *
                 C4577 +
             ((C4752 - C4753 + C4754 - C4755) * C116 +
              (C4756 - C4757 + C4758 - C4759) * C47384) *
                 C47479) *
                C47430 +
            (((C5393 - C5392 + C5395 - C5394) * C116 +
              (C5397 - C5396 + C5399 - C5398) * C47384) *
                 C4577 +
             ((C4579 * C1154 - C4575 * C1166 + C4580 * C1155 - C47448 * C1167) *
                  C116 +
              (C4579 * C1169 - C4575 * C1181 + C4580 * C1170 - C47448 * C1182) *
                  C47384) *
                 C47479) *
                C47268) *
               C47226) *
              C259 +
          (((((C4575 * C126 - C4579 * C119 + C47448 * C130 - C4580 * C120) *
                  C116 +
              (C4575 * C140 - C4579 * C129 + C47448 * C141 - C4580 * C131) *
                  C47384) *
                 C4577 +
             ((C4760 - C4761 + C4762 - C4763) * C116 +
              (C4764 - C4765 + C4766 - C4767) * C47384) *
                 C47479) *
                C47430 +
            (((C4579 * C416 - C4575 * C426 + C4580 * C420 - C47448 * C436) *
                  C116 +
              (C4579 * C429 - C4575 * C446 + C4580 * C437 - C47448 * C450) *
                  C47384) *
                 C4577 +
             ((C5400 - C5401 + C5402 - C5403) * C116 +
              (C5404 - C5405 + C5406 - C5407) * C47384) *
                 C47479) *
                C47268) *
               C47429 +
           ((((C4761 - C4760 + C4763 - C4762) * C116 +
              (C4765 - C4764 + C4767 - C4766) * C47384) *
                 C4577 +
             ((C4768 - C4769 + C4770 - C4771) * C116 +
              (C4772 - C4773 + C4774 - C4775) * C47384) *
                 C47479) *
                C47430 +
            (((C5401 - C5400 + C5403 - C5402) * C116 +
              (C5405 - C5404 + C5407 - C5406) * C47384) *
                 C4577 +
             ((C4575 * C1167 - C4579 * C1155 + C47448 * C1441 - C4580 * C1440) *
                  C116 +
              (C4575 * C1182 - C4579 * C1170 + C47448 * C1443 - C4580 * C1442) *
                  C47384) *
                 C47479) *
                C47268) *
               C47226) *
              C47455)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C4575 * C124 - C4579 * C117 + C47448 * C125 - C4580 * C118) *
                 C116 +
             (C4575 * C138 - C4579 * C127 + C47448 * C139 - C4580 * C128) *
                 C47384) *
                C4577 +
            ((C4728 - C4729 + C4730 - C4731) * C116 +
             (C4732 - C4733 + C4734 - C4735) * C47384) *
                C47479) *
               C2116 +
           (((C4579 * C414 - C4575 * C424 + C4580 * C415 - C47448 * C425) *
                 C116 +
             (C4579 * C427 - C4575 * C444 + C4580 * C428 - C47448 * C445) *
                 C47384) *
                C4577 +
            ((C5384 - C5385 + C5386 - C5387) * C116 +
             (C5388 - C5389 + C5390 - C5391) * C47384) *
                C47479) *
               C2117 +
           (((C4575 * C430 - C4579 * C417 + C47448 * C431 - C4580 * C418) *
                 C116 +
             (C4575 * C447 - C4579 * C433 + C47448 * C448 - C4580 * C434) *
                 C47384) *
                C4577 +
            ((C5814 - C5815 + C5816 - C5817) * C116 +
             (C5818 - C5819 + C5820 - C5821) * C47384) *
                C47479) *
               C2118 +
           (((C4579 * C1844 - C4575 * C1850 + C4580 * C1845 - C47448 * C1851) *
                 C116 +
             (C4579 * C1853 - C4575 * C1862 + C4580 * C1854 - C47448 * C1863) *
                 C47384) *
                C4577 +
            ((C7176 - C7177 + C7178 - C7179) * C116 +
             (C7180 - C7181 + C7182 - C7183) * C47384) *
                C47479) *
               C47477) *
              C47429 +
          ((((C4729 - C4728 + C4731 - C4730) * C116 +
             (C4733 - C4732 + C4735 - C4734) * C47384) *
                C4577 +
            ((C4736 - C4737 + C4738 - C4739) * C116 +
             (C4740 - C4741 + C4742 - C4743) * C47384) *
                C47479) *
               C2116 +
           (((C5385 - C5384 + C5387 - C5386) * C116 +
             (C5389 - C5388 + C5391 - C5390) * C47384) *
                C4577 +
            ((C5822 - C5823 + C5824 - C5825) * C116 +
             (C5826 - C5827 + C5828 - C5829) * C47384) *
                C47479) *
               C2117 +
           (((C5815 - C5814 + C5817 - C5816) * C116 +
             (C5819 - C5818 + C5821 - C5820) * C47384) *
                C4577 +
            ((C5830 - C5831 + C5832 - C5833) * C116 +
             (C5834 - C5835 + C5836 - C5837) * C47384) *
                C47479) *
               C2118 +
           (((C7177 - C7176 + C7179 - C7178) * C116 +
             (C7181 - C7180 + C7183 - C7182) * C47384) *
                C4577 +
            ((C4575 * C7169 - C4579 * C7167 + C47448 * C7170 - C4580 * C7168) *
                 C116 +
             (C4575 * C7173 - C4579 * C7171 + C47448 * C7174 - C4580 * C7172) *
                 C47384) *
                C47479) *
               C47477) *
              C47226) *
         C47135) /
            (p * q * std::sqrt(p + q));
    d2ee[37] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C4575 * C124 - C4579 * C117 + C47448 * C125 - C4580 * C118) *
                    C116 +
                (C4575 * C138 - C4579 * C127 + C47448 * C139 - C4580 * C128) *
                    C47384) *
                   C4577 +
               ((C4575 * C271 - C4579 * C261 + C47448 * C272 - C4580 * C262) *
                    C116 +
                (C4575 * C291 - C4579 * C274 + C47448 * C292 - C4580 * C275) *
                    C47384) *
                   C47479) *
                  C47181 * C47163 * C108 +
              (((C4579 * C118 - C4575 * C125 + C4580 * C119 - C47448 * C126) *
                    C116 +
                (C4579 * C128 - C4575 * C139 + C4580 * C129 - C47448 * C140) *
                    C47384) *
                   C4577 +
               ((C4579 * C262 - C4575 * C272 + C4580 * C263 - C47448 * C273) *
                    C116 +
                (C4579 * C275 - C4575 * C292 + C4580 * C276 - C47448 * C293) *
                    C47384) *
                   C47479) *
                  C47181 * C47163 * C109 +
              (((C4575 * C126 - C4579 * C119 + C47448 * C130 - C4580 * C120) *
                    C116 +
                (C4575 * C140 - C4579 * C129 + C47448 * C141 - C4580 * C131) *
                    C47384) *
                   C4577 +
               ((C4575 * C273 - C4579 * C263 + C47448 * C283 - C4580 * C267) *
                    C116 +
                (C4575 * C293 - C4579 * C276 + C47448 * C297 - C4580 * C284) *
                    C47384) *
                   C47479) *
                  C47181 * C47163 * C110 +
              (((C4579 * C120 - C4575 * C130 + C4580 * C121 - C47448 * C132) *
                    C116 +
                (C4579 * C131 - C4575 * C141 + C4580 * C133 - C47448 * C142) *
                    C47384) *
                   C4577 +
               ((C4579 * C267 - C4575 * C283 + C4580 * C269 - C47448 * C287) *
                    C116 +
                (C4579 * C284 - C4575 * C297 + C4580 * C288 - C47448 * C299) *
                    C47384) *
                   C47479) *
                  C47181 * C47163 * C111 +
              (((C4575 * C132 - C4579 * C121 + C47448 * C134 - C4580 * C122) *
                    C116 +
                (C4575 * C142 - C4579 * C133 + C47448 * C143 - C4580 * C135) *
                    C47384) *
                   C4577 +
               ((C4575 * C287 - C4579 * C269 + C47448 * C559 - C4580 * C558) *
                    C116 +
                (C4575 * C299 - C4579 * C288 + C47448 * C561 - C4580 * C560) *
                    C47384) *
                   C47479) *
                  C47181 * C47163 * C112) +
         0.5 * std::pow(Pi, 2.5) *
             (((((C4575 * C124 - C4579 * C117 + C47448 * C125 - C4580 * C118) *
                     C116 +
                 (C4575 * C138 - C4579 * C127 + C47448 * C139 - C4580 * C128) *
                     C47384) *
                    C4577 +
                ((C4728 - C4729 + C4730 - C4731) * C116 +
                 (C4732 - C4733 + C4734 - C4735) * C47384) *
                    C47479) *
                   C47181 * C47500 +
               (((C4729 - C4728 + C4731 - C4730) * C116 +
                 (C4733 - C4732 + C4735 - C4734) * C47384) *
                    C4577 +
                ((C4736 - C4737 + C4738 - C4739) * C116 +
                 (C4740 - C4741 + C4742 - C4743) * C47384) *
                    C47479) *
                   C47181 * C47488 +
               (((C4737 - C4736 + C4739 - C4738) * C116 +
                 (C4741 - C4740 + C4743 - C4742) * C47384) *
                    C4577 +
                ((C4575 * C1022 - C4579 * C1016 + C47448 * C1023 -
                  C4580 * C1017) *
                     C116 +
                 (C4575 * C1034 - C4579 * C1025 + C47448 * C1035 -
                  C4580 * C1026) *
                     C47384) *
                    C47479) *
                   C47181 * C47461) *
                  C258 +
              ((((C4579 * C118 - C4575 * C125 + C4580 * C119 - C47448 * C126) *
                     C116 +
                 (C4579 * C128 - C4575 * C139 + C4580 * C129 - C47448 * C140) *
                     C47384) *
                    C4577 +
                ((C4744 - C4745 + C4746 - C4747) * C116 +
                 (C4748 - C4749 + C4750 - C4751) * C47384) *
                    C47479) *
                   C47181 * C47500 +
               (((C4745 - C4744 + C4747 - C4746) * C116 +
                 (C4749 - C4748 + C4751 - C4750) * C47384) *
                    C4577 +
                ((C4752 - C4753 + C4754 - C4755) * C116 +
                 (C4756 - C4757 + C4758 - C4759) * C47384) *
                    C47479) *
                   C47181 * C47488 +
               (((C4753 - C4752 + C4755 - C4754) * C116 +
                 (C4757 - C4756 + C4759 - C4758) * C47384) *
                    C4577 +
                ((C4579 * C1017 - C4575 * C1023 + C4580 * C1018 -
                  C47448 * C1024) *
                     C116 +
                 (C4579 * C1026 - C4575 * C1035 + C4580 * C1027 -
                  C47448 * C1036) *
                     C47384) *
                    C47479) *
                   C47181 * C47461) *
                  C259 +
              ((((C4575 * C126 - C4579 * C119 + C47448 * C130 - C4580 * C120) *
                     C116 +
                 (C4575 * C140 - C4579 * C129 + C47448 * C141 - C4580 * C131) *
                     C47384) *
                    C4577 +
                ((C4760 - C4761 + C4762 - C4763) * C116 +
                 (C4764 - C4765 + C4766 - C4767) * C47384) *
                    C47479) *
                   C47181 * C47500 +
               (((C4761 - C4760 + C4763 - C4762) * C116 +
                 (C4765 - C4764 + C4767 - C4766) * C47384) *
                    C4577 +
                ((C4768 - C4769 + C4770 - C4771) * C116 +
                 (C4772 - C4773 + C4774 - C4775) * C47384) *
                    C47479) *
                   C47181 * C47488 +
               (((C4769 - C4768 + C4771 - C4770) * C116 +
                 (C4773 - C4772 + C4775 - C4774) * C47384) *
                    C4577 +
                ((C4575 * C1024 - C4579 * C1018 + C47448 * C1291 -
                  C4580 * C1290) *
                     C116 +
                 (C4575 * C1036 - C4579 * C1027 + C47448 * C1293 -
                  C4580 * C1292) *
                     C47384) *
                    C47479) *
                   C47181 * C47461) *
                  C47455)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C4575 * C124 - C4579 * C117 + C47448 * C125 - C4580 * C118) *
                 C116 +
             (C4575 * C138 - C4579 * C127 + C47448 * C139 - C4580 * C128) *
                 C47384) *
                C4577 +
            ((C4728 - C4729 + C4730 - C4731) * C116 +
             (C4732 - C4733 + C4734 - C4735) * C47384) *
                C47479) *
               C47501 +
           (((C4579 * C414 - C4575 * C424 + C4580 * C415 - C47448 * C425) *
                 C116 +
             (C4579 * C427 - C4575 * C444 + C4580 * C428 - C47448 * C445) *
                 C47384) *
                C4577 +
            ((C4579 * C812 - C4575 * C817 + C4580 * C813 - C47448 * C818) *
                 C116 +
             (C4579 * C820 - C4575 * C827 + C4580 * C821 - C47448 * C828) *
                 C47384) *
                C47479) *
               C47490 +
           (((C4575 * C430 - C4579 * C417 + C47448 * C431 - C4580 * C418) *
                 C116 +
             (C4575 * C447 - C4579 * C433 + C47448 * C448 - C4580 * C434) *
                 C47384) *
                C4577 +
            ((C4575 * C1159 - C4579 * C1150 + C47448 * C1160 - C4580 * C1151) *
                 C116 +
             (C4575 * C1177 - C4579 * C1162 + C47448 * C1178 - C4580 * C1163) *
                 C47384) *
                C47479) *
               C47464) *
              C47163 * C258 +
          ((((C4579 * C118 - C4575 * C125 + C4580 * C119 - C47448 * C126) *
                 C116 +
             (C4579 * C128 - C4575 * C139 + C4580 * C129 - C47448 * C140) *
                 C47384) *
                C4577 +
            ((C4744 - C4745 + C4746 - C4747) * C116 +
             (C4748 - C4749 + C4750 - C4751) * C47384) *
                C47479) *
               C47501 +
           (((C4575 * C425 - C4579 * C415 + C47448 * C426 - C4580 * C416) *
                 C116 +
             (C4575 * C445 - C4579 * C428 + C47448 * C446 - C4580 * C429) *
                 C47384) *
                C4577 +
            ((C4575 * C818 - C4579 * C813 + C47448 * C819 - C4580 * C814) *
                 C116 +
             (C4575 * C828 - C4579 * C821 + C47448 * C829 - C4580 * C822) *
                 C47384) *
                C47479) *
               C47490 +
           (((C4579 * C418 - C4575 * C431 + C4580 * C419 - C47448 * C432) *
                 C116 +
             (C4579 * C434 - C4575 * C448 + C4580 * C435 - C47448 * C449) *
                 C47384) *
                C4577 +
            ((C4579 * C1151 - C4575 * C1160 + C4580 * C1152 - C47448 * C1161) *
                 C116 +
             (C4579 * C1163 - C4575 * C1178 + C4580 * C1164 - C47448 * C1179) *
                 C47384) *
                C47479) *
               C47464) *
              C47163 * C259 +
          ((((C4575 * C126 - C4579 * C119 + C47448 * C130 - C4580 * C120) *
                 C116 +
             (C4575 * C140 - C4579 * C129 + C47448 * C141 - C4580 * C131) *
                 C47384) *
                C4577 +
            ((C4760 - C4761 + C4762 - C4763) * C116 +
             (C4764 - C4765 + C4766 - C4767) * C47384) *
                C47479) *
               C47501 +
           (((C4579 * C416 - C4575 * C426 + C4580 * C420 - C47448 * C436) *
                 C116 +
             (C4579 * C429 - C4575 * C446 + C4580 * C437 - C47448 * C450) *
                 C47384) *
                C4577 +
            ((C4579 * C814 - C4575 * C819 + C4580 * C815 - C47448 * C823) *
                 C116 +
             (C4579 * C822 - C4575 * C829 + C4580 * C824 - C47448 * C830) *
                 C47384) *
                C47479) *
               C47490 +
           (((C4575 * C432 - C4579 * C419 + C47448 * C438 - C4580 * C421) *
                 C116 +
             (C4575 * C449 - C4579 * C435 + C47448 * C451 - C4580 * C439) *
                 C47384) *
                C4577 +
            ((C4575 * C1161 - C4579 * C1152 + C47448 * C2015 - C4580 * C2014) *
                 C116 +
             (C4575 * C1179 - C4579 * C1164 + C47448 * C2017 - C4580 * C2016) *
                 C47384) *
                C47479) *
               C47464) *
              C47163 * C47455)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C4575 * C124 - C4579 * C117 + C47448 * C125 - C4580 * C118) *
                 C116 +
             (C4575 * C138 - C4579 * C127 + C47448 * C139 - C4580 * C128) *
                 C47384) *
                C4577 +
            ((C4728 - C4729 + C4730 - C4731) * C116 +
             (C4732 - C4733 + C4734 - C4735) * C47384) *
                C47479) *
               C47181 * C942 +
           (((C4729 - C4728 + C4731 - C4730) * C116 +
             (C4733 - C4732 + C4735 - C4734) * C47384) *
                C4577 +
            ((C4736 - C4737 + C4738 - C4739) * C116 +
             (C4740 - C4741 + C4742 - C4743) * C47384) *
                C47479) *
               C47181 * C943 +
           (((C4737 - C4736 + C4739 - C4738) * C116 +
             (C4741 - C4740 + C4743 - C4742) * C47384) *
                C4577 +
            ((C4575 * C1022 - C4579 * C1016 + C47448 * C1023 - C4580 * C1017) *
                 C116 +
             (C4575 * C1034 - C4579 * C1025 + C47448 * C1035 - C4580 * C1026) *
                 C47384) *
                C47479) *
               C47181 * C47461) *
              C47497 +
          ((((C4579 * C118 - C4575 * C125 + C4580 * C119 - C47448 * C126) *
                 C116 +
             (C4579 * C128 - C4575 * C139 + C4580 * C129 - C47448 * C140) *
                 C47384) *
                C4577 +
            ((C4744 - C4745 + C4746 - C4747) * C116 +
             (C4748 - C4749 + C4750 - C4751) * C47384) *
                C47479) *
               C47181 * C942 +
           (((C4745 - C4744 + C4747 - C4746) * C116 +
             (C4749 - C4748 + C4751 - C4750) * C47384) *
                C4577 +
            ((C4752 - C4753 + C4754 - C4755) * C116 +
             (C4756 - C4757 + C4758 - C4759) * C47384) *
                C47479) *
               C47181 * C943 +
           (((C4753 - C4752 + C4755 - C4754) * C116 +
             (C4757 - C4756 + C4759 - C4758) * C47384) *
                C4577 +
            ((C4579 * C1017 - C4575 * C1023 + C4580 * C1018 - C47448 * C1024) *
                 C116 +
             (C4579 * C1026 - C4575 * C1035 + C4580 * C1027 - C47448 * C1036) *
                 C47384) *
                C47479) *
               C47181 * C47461) *
              C47484 +
          ((((C4575 * C126 - C4579 * C119 + C47448 * C130 - C4580 * C120) *
                 C116 +
             (C4575 * C140 - C4579 * C129 + C47448 * C141 - C4580 * C131) *
                 C47384) *
                C4577 +
            ((C4760 - C4761 + C4762 - C4763) * C116 +
             (C4764 - C4765 + C4766 - C4767) * C47384) *
                C47479) *
               C47181 * C942 +
           (((C4761 - C4760 + C4763 - C4762) * C116 +
             (C4765 - C4764 + C4767 - C4766) * C47384) *
                C4577 +
            ((C4768 - C4769 + C4770 - C4771) * C116 +
             (C4772 - C4773 + C4774 - C4775) * C47384) *
                C47479) *
               C47181 * C943 +
           (((C4769 - C4768 + C4771 - C4770) * C116 +
             (C4773 - C4772 + C4775 - C4774) * C47384) *
                C4577 +
            ((C4575 * C1024 - C4579 * C1018 + C47448 * C1291 - C4580 * C1290) *
                 C116 +
             (C4575 * C1036 - C4579 * C1027 + C47448 * C1293 - C4580 * C1292) *
                 C47384) *
                C47479) *
               C47181 * C47461) *
              C47455)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C4575 * C124 - C4579 * C117 + C47448 * C125 - C4580 * C118) *
                C116 +
            (C4575 * C138 - C4579 * C127 + C47448 * C139 - C4580 * C128) *
                C47384) *
               C4577 +
           ((C4728 - C4729 + C4730 - C4731) * C116 +
            (C4732 - C4733 + C4734 - C4735) * C47384) *
               C47479) *
              C47181 * C1010 +
          (((C4729 - C4728 + C4731 - C4730) * C116 +
            (C4733 - C4732 + C4735 - C4734) * C47384) *
               C4577 +
           ((C4736 - C4737 + C4738 - C4739) * C116 +
            (C4740 - C4741 + C4742 - C4743) * C47384) *
               C47479) *
              C47181 * C1011 +
          (((C4737 - C4736 + C4739 - C4738) * C116 +
            (C4741 - C4740 + C4743 - C4742) * C47384) *
               C4577 +
           ((C5644 - C5645 + C5646 - C5647) * C116 +
            (C5648 - C5649 + C5650 - C5651) * C47384) *
               C47479) *
              C47181 * C1012 +
          (((C5645 - C5644 + C5647 - C5646) * C116 +
            (C5649 - C5648 + C5651 - C5650) * C47384) *
               C4577 +
           ((C5652 - C5653 + C5654 - C5655) * C116 +
            (C5656 - C5657 + C5658 - C5659) * C47384) *
               C47479) *
              C47181 * C1013 +
          (((C5653 - C5652 + C5655 - C5654) * C116 +
            (C5657 - C5656 + C5659 - C5658) * C47384) *
               C4577 +
           ((C4575 * C5637 - C4579 * C5635 + C47448 * C5638 - C4580 * C5636) *
                C116 +
            (C4575 * C5641 - C4579 * C5639 + C47448 * C5642 - C4580 * C5640) *
                C47384) *
               C47479) *
              C47181 * C1014) *
         C47135) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C4575 * C124 - C4579 * C117 + C47448 * C125 - C4580 * C118) *
                 C116 +
             (C4575 * C138 - C4579 * C127 + C47448 * C139 - C4580 * C128) *
                 C47384) *
                C4577 +
            ((C4728 - C4729 + C4730 - C4731) * C116 +
             (C4732 - C4733 + C4734 - C4735) * C47384) *
                C47479) *
               C47501 +
           (((C4579 * C414 - C4575 * C424 + C4580 * C415 - C47448 * C425) *
                 C116 +
             (C4579 * C427 - C4575 * C444 + C4580 * C428 - C47448 * C445) *
                 C47384) *
                C4577 +
            ((C5384 - C5385 + C5386 - C5387) * C116 +
             (C5388 - C5389 + C5390 - C5391) * C47384) *
                C47479) *
               C47490 +
           (((C4575 * C430 - C4579 * C417 + C47448 * C431 - C4580 * C418) *
                 C116 +
             (C4575 * C447 - C4579 * C433 + C47448 * C448 - C4580 * C434) *
                 C47384) *
                C4577 +
            ((C5814 - C5815 + C5816 - C5817) * C116 +
             (C5818 - C5819 + C5820 - C5821) * C47384) *
                C47479) *
               C47464) *
              C942 +
          ((((C4729 - C4728 + C4731 - C4730) * C116 +
             (C4733 - C4732 + C4735 - C4734) * C47384) *
                C4577 +
            ((C4736 - C4737 + C4738 - C4739) * C116 +
             (C4740 - C4741 + C4742 - C4743) * C47384) *
                C47479) *
               C47501 +
           (((C5385 - C5384 + C5387 - C5386) * C116 +
             (C5389 - C5388 + C5391 - C5390) * C47384) *
                C4577 +
            ((C5822 - C5823 + C5824 - C5825) * C116 +
             (C5826 - C5827 + C5828 - C5829) * C47384) *
                C47479) *
               C47490 +
           (((C5815 - C5814 + C5817 - C5816) * C116 +
             (C5819 - C5818 + C5821 - C5820) * C47384) *
                C4577 +
            ((C5830 - C5831 + C5832 - C5833) * C116 +
             (C5834 - C5835 + C5836 - C5837) * C47384) *
                C47479) *
               C47464) *
              C943 +
          ((((C4737 - C4736 + C4739 - C4738) * C116 +
             (C4741 - C4740 + C4743 - C4742) * C47384) *
                C4577 +
            ((C5644 - C5645 + C5646 - C5647) * C116 +
             (C5648 - C5649 + C5650 - C5651) * C47384) *
                C47479) *
               C47501 +
           (((C5823 - C5822 + C5825 - C5824) * C116 +
             (C5827 - C5826 + C5829 - C5828) * C47384) *
                C4577 +
            ((C4579 * C1542 - C4575 * C1545 + C4580 * C1543 - C47448 * C1546) *
                 C116 +
             (C4579 * C1548 - C4575 * C1551 + C4580 * C1549 - C47448 * C1552) *
                 C47384) *
                C47479) *
               C47490 +
           (((C5831 - C5830 + C5833 - C5832) * C116 +
             (C5835 - C5834 + C5837 - C5836) * C47384) *
                C4577 +
            ((C4575 * C5807 - C4579 * C5805 + C47448 * C5808 - C4580 * C5806) *
                 C116 +
             (C4575 * C5811 - C4579 * C5809 + C47448 * C5812 - C4580 * C5810) *
                 C47384) *
                C47479) *
               C47464) *
              C47461) *
         C47135) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C4575 * C124 - C4579 * C117 + C47448 * C125 - C4580 * C118) *
                 C116 +
             (C4575 * C138 - C4579 * C127 + C47448 * C139 - C4580 * C128) *
                 C47384) *
                C4577 +
            ((C4728 - C4729 + C4730 - C4731) * C116 +
             (C4732 - C4733 + C4734 - C4735) * C47384) *
                C47479) *
               C1664 +
           (((C4579 * C414 - C4575 * C424 + C4580 * C415 - C47448 * C425) *
                 C116 +
             (C4579 * C427 - C4575 * C444 + C4580 * C428 - C47448 * C445) *
                 C47384) *
                C4577 +
            ((C5384 - C5385 + C5386 - C5387) * C116 +
             (C5388 - C5389 + C5390 - C5391) * C47384) *
                C47479) *
               C1665 +
           (((C4575 * C430 - C4579 * C417 + C47448 * C431 - C4580 * C418) *
                 C116 +
             (C4575 * C447 - C4579 * C433 + C47448 * C448 - C4580 * C434) *
                 C47384) *
                C4577 +
            ((C5814 - C5815 + C5816 - C5817) * C116 +
             (C5818 - C5819 + C5820 - C5821) * C47384) *
                C47479) *
               C47464) *
              C47163 * C47497 +
          ((((C4579 * C118 - C4575 * C125 + C4580 * C119 - C47448 * C126) *
                 C116 +
             (C4579 * C128 - C4575 * C139 + C4580 * C129 - C47448 * C140) *
                 C47384) *
                C4577 +
            ((C4744 - C4745 + C4746 - C4747) * C116 +
             (C4748 - C4749 + C4750 - C4751) * C47384) *
                C47479) *
               C1664 +
           (((C4575 * C425 - C4579 * C415 + C47448 * C426 - C4580 * C416) *
                 C116 +
             (C4575 * C445 - C4579 * C428 + C47448 * C446 - C4580 * C429) *
                 C47384) *
                C4577 +
            ((C5392 - C5393 + C5394 - C5395) * C116 +
             (C5396 - C5397 + C5398 - C5399) * C47384) *
                C47479) *
               C1665 +
           (((C4579 * C418 - C4575 * C431 + C4580 * C419 - C47448 * C432) *
                 C116 +
             (C4579 * C434 - C4575 * C448 + C4580 * C435 - C47448 * C449) *
                 C47384) *
                C4577 +
            ((C4579 * C1151 - C4575 * C1160 + C4580 * C1152 - C47448 * C1161) *
                 C116 +
             (C4579 * C1163 - C4575 * C1178 + C4580 * C1164 - C47448 * C1179) *
                 C47384) *
                C47479) *
               C47464) *
              C47163 * C47484 +
          ((((C4575 * C126 - C4579 * C119 + C47448 * C130 - C4580 * C120) *
                 C116 +
             (C4575 * C140 - C4579 * C129 + C47448 * C141 - C4580 * C131) *
                 C47384) *
                C4577 +
            ((C4760 - C4761 + C4762 - C4763) * C116 +
             (C4764 - C4765 + C4766 - C4767) * C47384) *
                C47479) *
               C1664 +
           (((C4579 * C416 - C4575 * C426 + C4580 * C420 - C47448 * C436) *
                 C116 +
             (C4579 * C429 - C4575 * C446 + C4580 * C437 - C47448 * C450) *
                 C47384) *
                C4577 +
            ((C5400 - C5401 + C5402 - C5403) * C116 +
             (C5404 - C5405 + C5406 - C5407) * C47384) *
                C47479) *
               C1665 +
           (((C4575 * C432 - C4579 * C419 + C47448 * C438 - C4580 * C421) *
                 C116 +
             (C4575 * C449 - C4579 * C435 + C47448 * C451 - C4580 * C439) *
                 C47384) *
                C4577 +
            ((C4575 * C1161 - C4579 * C1152 + C47448 * C2015 - C4580 * C2014) *
                 C116 +
             (C4575 * C1179 - C4579 * C1164 + C47448 * C2017 - C4580 * C2016) *
                 C47384) *
                C47479) *
               C47464) *
              C47163 * C47455)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C4575 * C124 - C4579 * C117 + C47448 * C125 - C4580 * C118) *
                 C116 +
             (C4575 * C138 - C4579 * C127 + C47448 * C139 - C4580 * C128) *
                 C47384) *
                C4577 +
            ((C4728 - C4729 + C4730 - C4731) * C116 +
             (C4732 - C4733 + C4734 - C4735) * C47384) *
                C47479) *
               C1664 +
           (((C4579 * C414 - C4575 * C424 + C4580 * C415 - C47448 * C425) *
                 C116 +
             (C4579 * C427 - C4575 * C444 + C4580 * C428 - C47448 * C445) *
                 C47384) *
                C4577 +
            ((C5384 - C5385 + C5386 - C5387) * C116 +
             (C5388 - C5389 + C5390 - C5391) * C47384) *
                C47479) *
               C1665 +
           (((C4575 * C430 - C4579 * C417 + C47448 * C431 - C4580 * C418) *
                 C116 +
             (C4575 * C447 - C4579 * C433 + C47448 * C448 - C4580 * C434) *
                 C47384) *
                C4577 +
            ((C5814 - C5815 + C5816 - C5817) * C116 +
             (C5818 - C5819 + C5820 - C5821) * C47384) *
                C47479) *
               C47464) *
              C47500 +
          ((((C4729 - C4728 + C4731 - C4730) * C116 +
             (C4733 - C4732 + C4735 - C4734) * C47384) *
                C4577 +
            ((C4736 - C4737 + C4738 - C4739) * C116 +
             (C4740 - C4741 + C4742 - C4743) * C47384) *
                C47479) *
               C1664 +
           (((C5385 - C5384 + C5387 - C5386) * C116 +
             (C5389 - C5388 + C5391 - C5390) * C47384) *
                C4577 +
            ((C5822 - C5823 + C5824 - C5825) * C116 +
             (C5826 - C5827 + C5828 - C5829) * C47384) *
                C47479) *
               C1665 +
           (((C5815 - C5814 + C5817 - C5816) * C116 +
             (C5819 - C5818 + C5821 - C5820) * C47384) *
                C4577 +
            ((C5830 - C5831 + C5832 - C5833) * C116 +
             (C5834 - C5835 + C5836 - C5837) * C47384) *
                C47479) *
               C47464) *
              C47488 +
          ((((C4737 - C4736 + C4739 - C4738) * C116 +
             (C4741 - C4740 + C4743 - C4742) * C47384) *
                C4577 +
            ((C5644 - C5645 + C5646 - C5647) * C116 +
             (C5648 - C5649 + C5650 - C5651) * C47384) *
                C47479) *
               C1664 +
           (((C5823 - C5822 + C5825 - C5824) * C116 +
             (C5827 - C5826 + C5829 - C5828) * C47384) *
                C4577 +
            ((C6316 - C6317 + C6318 - C6319) * C116 +
             (C6320 - C6321 + C6322 - C6323) * C47384) *
                C47479) *
               C1665 +
           (((C5831 - C5830 + C5833 - C5832) * C116 +
             (C5835 - C5834 + C5837 - C5836) * C47384) *
                C4577 +
            ((C4575 * C5807 - C4579 * C5805 + C47448 * C5808 - C4580 * C5806) *
                 C116 +
             (C4575 * C5811 - C4579 * C5809 + C47448 * C5812 - C4580 * C5810) *
                 C47384) *
                C47479) *
               C47464) *
              C47461) *
         C47135) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C4575 * C124 - C4579 * C117 + C47448 * C125 - C4580 * C118) *
                C116 +
            (C4575 * C138 - C4579 * C127 + C47448 * C139 - C4580 * C128) *
                C47384) *
               C4577 +
           ((C4728 - C4729 + C4730 - C4731) * C116 +
            (C4732 - C4733 + C4734 - C4735) * C47384) *
               C47479) *
              C1839 +
          (((C4579 * C414 - C4575 * C424 + C4580 * C415 - C47448 * C425) *
                C116 +
            (C4579 * C427 - C4575 * C444 + C4580 * C428 - C47448 * C445) *
                C47384) *
               C4577 +
           ((C5384 - C5385 + C5386 - C5387) * C116 +
            (C5388 - C5389 + C5390 - C5391) * C47384) *
               C47479) *
              C1840 +
          (((C4575 * C430 - C4579 * C417 + C47448 * C431 - C4580 * C418) *
                C116 +
            (C4575 * C447 - C4579 * C433 + C47448 * C448 - C4580 * C434) *
                C47384) *
               C4577 +
           ((C5814 - C5815 + C5816 - C5817) * C116 +
            (C5818 - C5819 + C5820 - C5821) * C47384) *
               C47479) *
              C1841 +
          (((C4579 * C1844 - C4575 * C1850 + C4580 * C1845 - C47448 * C1851) *
                C116 +
            (C4579 * C1853 - C4575 * C1862 + C4580 * C1854 - C47448 * C1863) *
                C47384) *
               C4577 +
           ((C4579 * C2222 - C4575 * C2225 + C4580 * C2223 - C47448 * C2226) *
                C116 +
            (C4579 * C2228 - C4575 * C2231 + C4580 * C2229 - C47448 * C2232) *
                C47384) *
               C47479) *
              C1842 +
          (((C4575 * C1856 - C4579 * C1847 + C47448 * C1857 - C4580 * C1848) *
                C116 +
            (C4575 * C1865 - C4579 * C1859 + C47448 * C1866 - C4580 * C1860) *
                C47384) *
               C4577 +
           ((C4575 * C6699 - C4579 * C6697 + C47448 * C6700 - C4580 * C6698) *
                C116 +
            (C4575 * C6703 - C4579 * C6701 + C47448 * C6704 - C4580 * C6702) *
                C47384) *
               C47479) *
              C1843) *
         C47163 * C47135) /
            (p * q * std::sqrt(p + q));
    d2ee[38] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C4575 * C124 - C4579 * C117 + C47448 * C125 - C4580 * C118) *
                  C116 +
              (C4575 * C138 - C4579 * C127 + C47448 * C139 - C4580 * C128) *
                  C47384) *
                 C4577 +
             ((C4728 - C4729 + C4730 - C4731) * C116 +
              (C4732 - C4733 + C4734 - C4735) * C47384) *
                 C47479) *
                C47430 +
            (((C4579 * C414 - C4575 * C424 + C4580 * C415 - C47448 * C425) *
                  C116 +
              (C4579 * C427 - C4575 * C444 + C4580 * C428 - C47448 * C445) *
                  C47384) *
                 C4577 +
             ((C5384 - C5385 + C5386 - C5387) * C116 +
              (C5388 - C5389 + C5390 - C5391) * C47384) *
                 C47479) *
                C47268) *
               C942 +
           ((((C4729 - C4728 + C4731 - C4730) * C116 +
              (C4733 - C4732 + C4735 - C4734) * C47384) *
                 C4577 +
             ((C4736 - C4737 + C4738 - C4739) * C116 +
              (C4740 - C4741 + C4742 - C4743) * C47384) *
                 C47479) *
                C47430 +
            (((C5385 - C5384 + C5387 - C5386) * C116 +
              (C5389 - C5388 + C5391 - C5390) * C47384) *
                 C4577 +
             ((C5822 - C5823 + C5824 - C5825) * C116 +
              (C5826 - C5827 + C5828 - C5829) * C47384) *
                 C47479) *
                C47268) *
               C943 +
           ((((C4737 - C4736 + C4739 - C4738) * C116 +
              (C4741 - C4740 + C4743 - C4742) * C47384) *
                 C4577 +
             ((C5644 - C5645 + C5646 - C5647) * C116 +
              (C5648 - C5649 + C5650 - C5651) * C47384) *
                 C47479) *
                C47430 +
            (((C5823 - C5822 + C5825 - C5824) * C116 +
              (C5827 - C5826 + C5829 - C5828) * C47384) *
                 C4577 +
             ((C4579 * C1542 - C4575 * C1545 + C4580 * C1543 - C47448 * C1546) *
                  C116 +
              (C4579 * C1548 - C4575 * C1551 + C4580 * C1549 - C47448 * C1552) *
                  C47384) *
                 C47479) *
                C47268) *
               C47461) *
              C47415 +
          (((((C4579 * C118 - C4575 * C125 + C4580 * C119 - C47448 * C126) *
                  C116 +
              (C4579 * C128 - C4575 * C139 + C4580 * C129 - C47448 * C140) *
                  C47384) *
                 C4577 +
             ((C4744 - C4745 + C4746 - C4747) * C116 +
              (C4748 - C4749 + C4750 - C4751) * C47384) *
                 C47479) *
                C47430 +
            (((C4575 * C425 - C4579 * C415 + C47448 * C426 - C4580 * C416) *
                  C116 +
              (C4575 * C445 - C4579 * C428 + C47448 * C446 - C4580 * C429) *
                  C47384) *
                 C4577 +
             ((C5392 - C5393 + C5394 - C5395) * C116 +
              (C5396 - C5397 + C5398 - C5399) * C47384) *
                 C47479) *
                C47268) *
               C942 +
           ((((C4745 - C4744 + C4747 - C4746) * C116 +
              (C4749 - C4748 + C4751 - C4750) * C47384) *
                 C4577 +
             ((C4752 - C4753 + C4754 - C4755) * C116 +
              (C4756 - C4757 + C4758 - C4759) * C47384) *
                 C47479) *
                C47430 +
            (((C5393 - C5392 + C5395 - C5394) * C116 +
              (C5397 - C5396 + C5399 - C5398) * C47384) *
                 C4577 +
             ((C6170 - C6171 + C6172 - C6173) * C116 +
              (C6174 - C6175 + C6176 - C6177) * C47384) *
                 C47479) *
                C47268) *
               C943 +
           ((((C4753 - C4752 + C4755 - C4754) * C116 +
              (C4757 - C4756 + C4759 - C4758) * C47384) *
                 C4577 +
             ((C5968 - C5969 + C5970 - C5971) * C116 +
              (C5972 - C5973 + C5974 - C5975) * C47384) *
                 C47479) *
                C47430 +
            (((C6171 - C6170 + C6173 - C6172) * C116 +
              (C6175 - C6174 + C6177 - C6176) * C47384) *
                 C4577 +
             ((C4575 * C1546 - C4579 * C1543 + C47448 * C1547 - C4580 * C1544) *
                  C116 +
              (C4575 * C1552 - C4579 * C1549 + C47448 * C1553 - C4580 * C1550) *
                  C47384) *
                 C47479) *
                C47268) *
               C47461) *
              C47146)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C4575 * C124 - C4579 * C117 + C47448 * C125 - C4580 * C118) *
                 C116 +
             (C4575 * C138 - C4579 * C127 + C47448 * C139 - C4580 * C128) *
                 C47384) *
                C4577 +
            ((C4728 - C4729 + C4730 - C4731) * C116 +
             (C4732 - C4733 + C4734 - C4735) * C47384) *
                C47479) *
               C47430 +
           (((C4579 * C414 - C4575 * C424 + C4580 * C415 - C47448 * C425) *
                 C116 +
             (C4579 * C427 - C4575 * C444 + C4580 * C428 - C47448 * C445) *
                 C47384) *
                C4577 +
            ((C4579 * C812 - C4575 * C817 + C4580 * C813 - C47448 * C818) *
                 C116 +
             (C4579 * C820 - C4575 * C827 + C4580 * C821 - C47448 * C828) *
                 C47384) *
                C47479) *
               C47268) *
              C47163 * C554 +
          ((((C4579 * C118 - C4575 * C125 + C4580 * C119 - C47448 * C126) *
                 C116 +
             (C4579 * C128 - C4575 * C139 + C4580 * C129 - C47448 * C140) *
                 C47384) *
                C4577 +
            ((C4744 - C4745 + C4746 - C4747) * C116 +
             (C4748 - C4749 + C4750 - C4751) * C47384) *
                C47479) *
               C47430 +
           (((C4575 * C425 - C4579 * C415 + C47448 * C426 - C4580 * C416) *
                 C116 +
             (C4575 * C445 - C4579 * C428 + C47448 * C446 - C4580 * C429) *
                 C47384) *
                C4577 +
            ((C4575 * C818 - C4579 * C813 + C47448 * C819 - C4580 * C814) *
                 C116 +
             (C4575 * C828 - C4579 * C821 + C47448 * C829 - C4580 * C822) *
                 C47384) *
                C47479) *
               C47268) *
              C47163 * C555 +
          ((((C4575 * C126 - C4579 * C119 + C47448 * C130 - C4580 * C120) *
                 C116 +
             (C4575 * C140 - C4579 * C129 + C47448 * C141 - C4580 * C131) *
                 C47384) *
                C4577 +
            ((C4760 - C4761 + C4762 - C4763) * C116 +
             (C4764 - C4765 + C4766 - C4767) * C47384) *
                C47479) *
               C47430 +
           (((C4579 * C416 - C4575 * C426 + C4580 * C420 - C47448 * C436) *
                 C116 +
             (C4579 * C429 - C4575 * C446 + C4580 * C437 - C47448 * C450) *
                 C47384) *
                C4577 +
            ((C4579 * C814 - C4575 * C819 + C4580 * C815 - C47448 * C823) *
                 C116 +
             (C4579 * C822 - C4575 * C829 + C4580 * C824 - C47448 * C830) *
                 C47384) *
                C47479) *
               C47268) *
              C47163 * C556 +
          ((((C4579 * C120 - C4575 * C130 + C4580 * C121 - C47448 * C132) *
                 C116 +
             (C4579 * C131 - C4575 * C141 + C4580 * C133 - C47448 * C142) *
                 C47384) *
                C4577 +
            ((C5052 - C5053 + C5054 - C5055) * C116 +
             (C5056 - C5057 + C5058 - C5059) * C47384) *
                C47479) *
               C47430 +
           (((C4575 * C436 - C4579 * C420 + C47448 * C440 - C4580 * C422) *
                 C116 +
             (C4575 * C450 - C4579 * C437 + C47448 * C452 - C4580 * C441) *
                 C47384) *
                C4577 +
            ((C4575 * C823 - C4579 * C815 + C47448 * C825 - C4580 * C816) *
                 C116 +
             (C4575 * C830 - C4579 * C824 + C47448 * C831 - C4580 * C826) *
                 C47384) *
                C47479) *
               C47268) *
              C47163 * C47465)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C4575 * C124 - C4579 * C117 + C47448 * C125 - C4580 * C118) *
                 C116 +
             (C4575 * C138 - C4579 * C127 + C47448 * C139 - C4580 * C128) *
                 C47384) *
                C4577 +
            ((C4728 - C4729 + C4730 - C4731) * C116 +
             (C4732 - C4733 + C4734 - C4735) * C47384) *
                C47479) *
               C2116 +
           (((C4579 * C414 - C4575 * C424 + C4580 * C415 - C47448 * C425) *
                 C116 +
             (C4579 * C427 - C4575 * C444 + C4580 * C428 - C47448 * C445) *
                 C47384) *
                C4577 +
            ((C5384 - C5385 + C5386 - C5387) * C116 +
             (C5388 - C5389 + C5390 - C5391) * C47384) *
                C47479) *
               C2117 +
           (((C4575 * C430 - C4579 * C417 + C47448 * C431 - C4580 * C418) *
                 C116 +
             (C4575 * C447 - C4579 * C433 + C47448 * C448 - C4580 * C434) *
                 C47384) *
                C4577 +
            ((C5814 - C5815 + C5816 - C5817) * C116 +
             (C5818 - C5819 + C5820 - C5821) * C47384) *
                C47479) *
               C2118 +
           (((C4579 * C1844 - C4575 * C1850 + C4580 * C1845 - C47448 * C1851) *
                 C116 +
             (C4579 * C1853 - C4575 * C1862 + C4580 * C1854 - C47448 * C1863) *
                 C47384) *
                C4577 +
            ((C4579 * C2222 - C4575 * C2225 + C4580 * C2223 - C47448 * C2226) *
                 C116 +
             (C4579 * C2228 - C4575 * C2231 + C4580 * C2229 - C47448 * C2232) *
                 C47384) *
                C47479) *
               C47477) *
              C47163 * C47415 +
          ((((C4579 * C118 - C4575 * C125 + C4580 * C119 - C47448 * C126) *
                 C116 +
             (C4579 * C128 - C4575 * C139 + C4580 * C129 - C47448 * C140) *
                 C47384) *
                C4577 +
            ((C4744 - C4745 + C4746 - C4747) * C116 +
             (C4748 - C4749 + C4750 - C4751) * C47384) *
                C47479) *
               C2116 +
           (((C4575 * C425 - C4579 * C415 + C47448 * C426 - C4580 * C416) *
                 C116 +
             (C4575 * C445 - C4579 * C428 + C47448 * C446 - C4580 * C429) *
                 C47384) *
                C4577 +
            ((C5392 - C5393 + C5394 - C5395) * C116 +
             (C5396 - C5397 + C5398 - C5399) * C47384) *
                C47479) *
               C2117 +
           (((C4579 * C418 - C4575 * C431 + C4580 * C419 - C47448 * C432) *
                 C116 +
             (C4579 * C434 - C4575 * C448 + C4580 * C435 - C47448 * C449) *
                 C47384) *
                C4577 +
            ((C6900 - C6901 + C6902 - C6903) * C116 +
             (C6904 - C6905 + C6906 - C6907) * C47384) *
                C47479) *
               C2118 +
           (((C4575 * C1851 - C4579 * C1845 + C47448 * C1852 - C4580 * C1846) *
                 C116 +
             (C4575 * C1863 - C4579 * C1854 + C47448 * C1864 - C4580 * C1855) *
                 C47384) *
                C4577 +
            ((C4575 * C2226 - C4579 * C2223 + C47448 * C2227 - C4580 * C2224) *
                 C116 +
             (C4575 * C2232 - C4579 * C2229 + C47448 * C2233 - C4580 * C2230) *
                 C47384) *
                C47479) *
               C47477) *
              C47163 * C47146)) /
            (p * q * std::sqrt(p + q));
    d2ee[39] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C4575 * C124 - C4579 * C117 + C47448 * C125 - C4580 * C118) *
                 C116 +
             (C4575 * C138 - C4579 * C127 + C47448 * C139 - C4580 * C128) *
                 C47384) *
                C4577 +
            ((C4728 - C4729 + C4730 - C4731) * C116 +
             (C4732 - C4733 + C4734 - C4735) * C47384) *
                C47479) *
               C47181 * C47500 +
           (((C4729 - C4728 + C4731 - C4730) * C116 +
             (C4733 - C4732 + C4735 - C4734) * C47384) *
                C4577 +
            ((C4736 - C4737 + C4738 - C4739) * C116 +
             (C4740 - C4741 + C4742 - C4743) * C47384) *
                C47479) *
               C47181 * C47488 +
           (((C4737 - C4736 + C4739 - C4738) * C116 +
             (C4741 - C4740 + C4743 - C4742) * C47384) *
                C4577 +
            ((C4575 * C1022 - C4579 * C1016 + C47448 * C1023 - C4580 * C1017) *
                 C116 +
             (C4575 * C1034 - C4579 * C1025 + C47448 * C1035 - C4580 * C1026) *
                 C47384) *
                C47479) *
               C47181 * C47461) *
              C258 +
          ((((C4579 * C118 - C4575 * C125 + C4580 * C119 - C47448 * C126) *
                 C116 +
             (C4579 * C128 - C4575 * C139 + C4580 * C129 - C47448 * C140) *
                 C47384) *
                C4577 +
            ((C4744 - C4745 + C4746 - C4747) * C116 +
             (C4748 - C4749 + C4750 - C4751) * C47384) *
                C47479) *
               C47181 * C47500 +
           (((C4745 - C4744 + C4747 - C4746) * C116 +
             (C4749 - C4748 + C4751 - C4750) * C47384) *
                C4577 +
            ((C4752 - C4753 + C4754 - C4755) * C116 +
             (C4756 - C4757 + C4758 - C4759) * C47384) *
                C47479) *
               C47181 * C47488 +
           (((C4753 - C4752 + C4755 - C4754) * C116 +
             (C4757 - C4756 + C4759 - C4758) * C47384) *
                C4577 +
            ((C4579 * C1017 - C4575 * C1023 + C4580 * C1018 - C47448 * C1024) *
                 C116 +
             (C4579 * C1026 - C4575 * C1035 + C4580 * C1027 - C47448 * C1036) *
                 C47384) *
                C47479) *
               C47181 * C47461) *
              C259 +
          ((((C4575 * C126 - C4579 * C119 + C47448 * C130 - C4580 * C120) *
                 C116 +
             (C4575 * C140 - C4579 * C129 + C47448 * C141 - C4580 * C131) *
                 C47384) *
                C4577 +
            ((C4760 - C4761 + C4762 - C4763) * C116 +
             (C4764 - C4765 + C4766 - C4767) * C47384) *
                C47479) *
               C47181 * C47500 +
           (((C4761 - C4760 + C4763 - C4762) * C116 +
             (C4765 - C4764 + C4767 - C4766) * C47384) *
                C4577 +
            ((C4768 - C4769 + C4770 - C4771) * C116 +
             (C4772 - C4773 + C4774 - C4775) * C47384) *
                C47479) *
               C47181 * C47488 +
           (((C4769 - C4768 + C4771 - C4770) * C116 +
             (C4773 - C4772 + C4775 - C4774) * C47384) *
                C4577 +
            ((C4575 * C1024 - C4579 * C1018 + C47448 * C1291 - C4580 * C1290) *
                 C116 +
             (C4575 * C1036 - C4579 * C1027 + C47448 * C1293 - C4580 * C1292) *
                 C47384) *
                C47479) *
               C47181 * C47461) *
              C47455)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C4575 * C124 - C4579 * C117 + C47448 * C125 - C4580 * C118) *
                C116 +
            (C4575 * C138 - C4579 * C127 + C47448 * C139 - C4580 * C128) *
                C47384) *
               C4577 +
           ((C4575 * C271 - C4579 * C261 + C47448 * C272 - C4580 * C262) *
                C116 +
            (C4575 * C291 - C4579 * C274 + C47448 * C292 - C4580 * C275) *
                C47384) *
               C47479) *
              C47181 * C47163 * C108 +
          (((C4579 * C118 - C4575 * C125 + C4580 * C119 - C47448 * C126) *
                C116 +
            (C4579 * C128 - C4575 * C139 + C4580 * C129 - C47448 * C140) *
                C47384) *
               C4577 +
           ((C4579 * C262 - C4575 * C272 + C4580 * C263 - C47448 * C273) *
                C116 +
            (C4579 * C275 - C4575 * C292 + C4580 * C276 - C47448 * C293) *
                C47384) *
               C47479) *
              C47181 * C47163 * C109 +
          (((C4575 * C126 - C4579 * C119 + C47448 * C130 - C4580 * C120) *
                C116 +
            (C4575 * C140 - C4579 * C129 + C47448 * C141 - C4580 * C131) *
                C47384) *
               C4577 +
           ((C4575 * C273 - C4579 * C263 + C47448 * C283 - C4580 * C267) *
                C116 +
            (C4575 * C293 - C4579 * C276 + C47448 * C297 - C4580 * C284) *
                C47384) *
               C47479) *
              C47181 * C47163 * C110 +
          (((C4579 * C120 - C4575 * C130 + C4580 * C121 - C47448 * C132) *
                C116 +
            (C4579 * C131 - C4575 * C141 + C4580 * C133 - C47448 * C142) *
                C47384) *
               C4577 +
           ((C4579 * C267 - C4575 * C283 + C4580 * C269 - C47448 * C287) *
                C116 +
            (C4579 * C284 - C4575 * C297 + C4580 * C288 - C47448 * C299) *
                C47384) *
               C47479) *
              C47181 * C47163 * C111 +
          (((C4575 * C132 - C4579 * C121 + C47448 * C134 - C4580 * C122) *
                C116 +
            (C4575 * C142 - C4579 * C133 + C47448 * C143 - C4580 * C135) *
                C47384) *
               C4577 +
           ((C4575 * C287 - C4579 * C269 + C47448 * C559 - C4580 * C558) *
                C116 +
            (C4575 * C299 - C4579 * C288 + C47448 * C561 - C4580 * C560) *
                C47384) *
               C47479) *
              C47181 * C47163 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C4575 * C124 - C4579 * C117 + C47448 * C125 - C4580 * C118) *
                 C116 +
             (C4575 * C138 - C4579 * C127 + C47448 * C139 - C4580 * C128) *
                 C47384) *
                C4577 +
            ((C4728 - C4729 + C4730 - C4731) * C116 +
             (C4732 - C4733 + C4734 - C4735) * C47384) *
                C47479) *
               C47181 * C942 +
           (((C4729 - C4728 + C4731 - C4730) * C116 +
             (C4733 - C4732 + C4735 - C4734) * C47384) *
                C4577 +
            ((C4736 - C4737 + C4738 - C4739) * C116 +
             (C4740 - C4741 + C4742 - C4743) * C47384) *
                C47479) *
               C47181 * C943 +
           (((C4737 - C4736 + C4739 - C4738) * C116 +
             (C4741 - C4740 + C4743 - C4742) * C47384) *
                C4577 +
            ((C4575 * C1022 - C4579 * C1016 + C47448 * C1023 - C4580 * C1017) *
                 C116 +
             (C4575 * C1034 - C4579 * C1025 + C47448 * C1035 - C4580 * C1026) *
                 C47384) *
                C47479) *
               C47181 * C47461) *
              C47497 +
          ((((C4579 * C118 - C4575 * C125 + C4580 * C119 - C47448 * C126) *
                 C116 +
             (C4579 * C128 - C4575 * C139 + C4580 * C129 - C47448 * C140) *
                 C47384) *
                C4577 +
            ((C4744 - C4745 + C4746 - C4747) * C116 +
             (C4748 - C4749 + C4750 - C4751) * C47384) *
                C47479) *
               C47181 * C942 +
           (((C4745 - C4744 + C4747 - C4746) * C116 +
             (C4749 - C4748 + C4751 - C4750) * C47384) *
                C4577 +
            ((C4752 - C4753 + C4754 - C4755) * C116 +
             (C4756 - C4757 + C4758 - C4759) * C47384) *
                C47479) *
               C47181 * C943 +
           (((C4753 - C4752 + C4755 - C4754) * C116 +
             (C4757 - C4756 + C4759 - C4758) * C47384) *
                C4577 +
            ((C4579 * C1017 - C4575 * C1023 + C4580 * C1018 - C47448 * C1024) *
                 C116 +
             (C4579 * C1026 - C4575 * C1035 + C4580 * C1027 - C47448 * C1036) *
                 C47384) *
                C47479) *
               C47181 * C47461) *
              C47484 +
          ((((C4575 * C126 - C4579 * C119 + C47448 * C130 - C4580 * C120) *
                 C116 +
             (C4575 * C140 - C4579 * C129 + C47448 * C141 - C4580 * C131) *
                 C47384) *
                C4577 +
            ((C4760 - C4761 + C4762 - C4763) * C116 +
             (C4764 - C4765 + C4766 - C4767) * C47384) *
                C47479) *
               C47181 * C942 +
           (((C4761 - C4760 + C4763 - C4762) * C116 +
             (C4765 - C4764 + C4767 - C4766) * C47384) *
                C4577 +
            ((C4768 - C4769 + C4770 - C4771) * C116 +
             (C4772 - C4773 + C4774 - C4775) * C47384) *
                C47479) *
               C47181 * C943 +
           (((C4769 - C4768 + C4771 - C4770) * C116 +
             (C4773 - C4772 + C4775 - C4774) * C47384) *
                C4577 +
            ((C4575 * C1024 - C4579 * C1018 + C47448 * C1291 - C4580 * C1290) *
                 C116 +
             (C4575 * C1036 - C4579 * C1027 + C47448 * C1293 - C4580 * C1292) *
                 C47384) *
                C47479) *
               C47181 * C47461) *
              C47455)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C4575 * C124 - C4579 * C117 + C47448 * C125 - C4580 * C118) *
                C116 +
            (C4575 * C138 - C4579 * C127 + C47448 * C139 - C4580 * C128) *
                C47384) *
               C4577 +
           ((C4728 - C4729 + C4730 - C4731) * C116 +
            (C4732 - C4733 + C4734 - C4735) * C47384) *
               C47479) *
              C47181 * C1010 +
          (((C4729 - C4728 + C4731 - C4730) * C116 +
            (C4733 - C4732 + C4735 - C4734) * C47384) *
               C4577 +
           ((C4736 - C4737 + C4738 - C4739) * C116 +
            (C4740 - C4741 + C4742 - C4743) * C47384) *
               C47479) *
              C47181 * C1011 +
          (((C4737 - C4736 + C4739 - C4738) * C116 +
            (C4741 - C4740 + C4743 - C4742) * C47384) *
               C4577 +
           ((C5644 - C5645 + C5646 - C5647) * C116 +
            (C5648 - C5649 + C5650 - C5651) * C47384) *
               C47479) *
              C47181 * C1012 +
          (((C5645 - C5644 + C5647 - C5646) * C116 +
            (C5649 - C5648 + C5651 - C5650) * C47384) *
               C4577 +
           ((C5652 - C5653 + C5654 - C5655) * C116 +
            (C5656 - C5657 + C5658 - C5659) * C47384) *
               C47479) *
              C47181 * C1013 +
          (((C5653 - C5652 + C5655 - C5654) * C116 +
            (C5657 - C5656 + C5659 - C5658) * C47384) *
               C4577 +
           ((C4575 * C5637 - C4579 * C5635 + C47448 * C5638 - C4580 * C5636) *
                C116 +
            (C4575 * C5641 - C4579 * C5639 + C47448 * C5642 - C4580 * C5640) *
                C47384) *
               C47479) *
              C47181 * C1014) *
         C47135) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C4575 * C124 - C4579 * C117 + C47448 * C125 - C4580 * C118) *
                 C116 +
             (C4575 * C138 - C4579 * C127 + C47448 * C139 - C4580 * C128) *
                 C47384) *
                C4577 +
            ((C4728 - C4729 + C4730 - C4731) * C116 +
             (C4732 - C4733 + C4734 - C4735) * C47384) *
                C47479) *
               C1664 +
           (((C4579 * C414 - C4575 * C424 + C4580 * C415 - C47448 * C425) *
                 C116 +
             (C4579 * C427 - C4575 * C444 + C4580 * C428 - C47448 * C445) *
                 C47384) *
                C4577 +
            ((C5384 - C5385 + C5386 - C5387) * C116 +
             (C5388 - C5389 + C5390 - C5391) * C47384) *
                C47479) *
               C1665 +
           (((C4575 * C430 - C4579 * C417 + C47448 * C431 - C4580 * C418) *
                 C116 +
             (C4575 * C447 - C4579 * C433 + C47448 * C448 - C4580 * C434) *
                 C47384) *
                C4577 +
            ((C5814 - C5815 + C5816 - C5817) * C116 +
             (C5818 - C5819 + C5820 - C5821) * C47384) *
                C47479) *
               C47464) *
              C47163 * C47497 +
          ((((C4579 * C118 - C4575 * C125 + C4580 * C119 - C47448 * C126) *
                 C116 +
             (C4579 * C128 - C4575 * C139 + C4580 * C129 - C47448 * C140) *
                 C47384) *
                C4577 +
            ((C4744 - C4745 + C4746 - C4747) * C116 +
             (C4748 - C4749 + C4750 - C4751) * C47384) *
                C47479) *
               C1664 +
           (((C4575 * C425 - C4579 * C415 + C47448 * C426 - C4580 * C416) *
                 C116 +
             (C4575 * C445 - C4579 * C428 + C47448 * C446 - C4580 * C429) *
                 C47384) *
                C4577 +
            ((C5392 - C5393 + C5394 - C5395) * C116 +
             (C5396 - C5397 + C5398 - C5399) * C47384) *
                C47479) *
               C1665 +
           (((C4579 * C418 - C4575 * C431 + C4580 * C419 - C47448 * C432) *
                 C116 +
             (C4579 * C434 - C4575 * C448 + C4580 * C435 - C47448 * C449) *
                 C47384) *
                C4577 +
            ((C4579 * C1151 - C4575 * C1160 + C4580 * C1152 - C47448 * C1161) *
                 C116 +
             (C4579 * C1163 - C4575 * C1178 + C4580 * C1164 - C47448 * C1179) *
                 C47384) *
                C47479) *
               C47464) *
              C47163 * C47484 +
          ((((C4575 * C126 - C4579 * C119 + C47448 * C130 - C4580 * C120) *
                 C116 +
             (C4575 * C140 - C4579 * C129 + C47448 * C141 - C4580 * C131) *
                 C47384) *
                C4577 +
            ((C4760 - C4761 + C4762 - C4763) * C116 +
             (C4764 - C4765 + C4766 - C4767) * C47384) *
                C47479) *
               C1664 +
           (((C4579 * C416 - C4575 * C426 + C4580 * C420 - C47448 * C436) *
                 C116 +
             (C4579 * C429 - C4575 * C446 + C4580 * C437 - C47448 * C450) *
                 C47384) *
                C4577 +
            ((C5400 - C5401 + C5402 - C5403) * C116 +
             (C5404 - C5405 + C5406 - C5407) * C47384) *
                C47479) *
               C1665 +
           (((C4575 * C432 - C4579 * C419 + C47448 * C438 - C4580 * C421) *
                 C116 +
             (C4575 * C449 - C4579 * C435 + C47448 * C451 - C4580 * C439) *
                 C47384) *
                C4577 +
            ((C4575 * C1161 - C4579 * C1152 + C47448 * C2015 - C4580 * C2014) *
                 C116 +
             (C4575 * C1179 - C4579 * C1164 + C47448 * C2017 - C4580 * C2016) *
                 C47384) *
                C47479) *
               C47464) *
              C47163 * C47455)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C4575 * C124 - C4579 * C117 + C47448 * C125 - C4580 * C118) *
                 C116 +
             (C4575 * C138 - C4579 * C127 + C47448 * C139 - C4580 * C128) *
                 C47384) *
                C4577 +
            ((C4728 - C4729 + C4730 - C4731) * C116 +
             (C4732 - C4733 + C4734 - C4735) * C47384) *
                C47479) *
               C1664 +
           (((C4579 * C414 - C4575 * C424 + C4580 * C415 - C47448 * C425) *
                 C116 +
             (C4579 * C427 - C4575 * C444 + C4580 * C428 - C47448 * C445) *
                 C47384) *
                C4577 +
            ((C5384 - C5385 + C5386 - C5387) * C116 +
             (C5388 - C5389 + C5390 - C5391) * C47384) *
                C47479) *
               C1665 +
           (((C4575 * C430 - C4579 * C417 + C47448 * C431 - C4580 * C418) *
                 C116 +
             (C4575 * C447 - C4579 * C433 + C47448 * C448 - C4580 * C434) *
                 C47384) *
                C4577 +
            ((C5814 - C5815 + C5816 - C5817) * C116 +
             (C5818 - C5819 + C5820 - C5821) * C47384) *
                C47479) *
               C47464) *
              C47500 +
          ((((C4729 - C4728 + C4731 - C4730) * C116 +
             (C4733 - C4732 + C4735 - C4734) * C47384) *
                C4577 +
            ((C4736 - C4737 + C4738 - C4739) * C116 +
             (C4740 - C4741 + C4742 - C4743) * C47384) *
                C47479) *
               C1664 +
           (((C5385 - C5384 + C5387 - C5386) * C116 +
             (C5389 - C5388 + C5391 - C5390) * C47384) *
                C4577 +
            ((C5822 - C5823 + C5824 - C5825) * C116 +
             (C5826 - C5827 + C5828 - C5829) * C47384) *
                C47479) *
               C1665 +
           (((C5815 - C5814 + C5817 - C5816) * C116 +
             (C5819 - C5818 + C5821 - C5820) * C47384) *
                C4577 +
            ((C5830 - C5831 + C5832 - C5833) * C116 +
             (C5834 - C5835 + C5836 - C5837) * C47384) *
                C47479) *
               C47464) *
              C47488 +
          ((((C4737 - C4736 + C4739 - C4738) * C116 +
             (C4741 - C4740 + C4743 - C4742) * C47384) *
                C4577 +
            ((C5644 - C5645 + C5646 - C5647) * C116 +
             (C5648 - C5649 + C5650 - C5651) * C47384) *
                C47479) *
               C1664 +
           (((C5823 - C5822 + C5825 - C5824) * C116 +
             (C5827 - C5826 + C5829 - C5828) * C47384) *
                C4577 +
            ((C6316 - C6317 + C6318 - C6319) * C116 +
             (C6320 - C6321 + C6322 - C6323) * C47384) *
                C47479) *
               C1665 +
           (((C5831 - C5830 + C5833 - C5832) * C116 +
             (C5835 - C5834 + C5837 - C5836) * C47384) *
                C4577 +
            ((C4575 * C5807 - C4579 * C5805 + C47448 * C5808 - C4580 * C5806) *
                 C116 +
             (C4575 * C5811 - C4579 * C5809 + C47448 * C5812 - C4580 * C5810) *
                 C47384) *
                C47479) *
               C47464) *
              C47461) *
         C47135) /
            (p * q * std::sqrt(p + q));
    d2ee[40] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C4575 * C124 - C4579 * C117 + C47448 * C125 - C4580 * C118) *
                  C116 +
              (C4575 * C138 - C4579 * C127 + C47448 * C139 - C4580 * C128) *
                  C47384) *
                 C4577 +
             ((C4728 - C4729 + C4730 - C4731) * C116 +
              (C4732 - C4733 + C4734 - C4735) * C47384) *
                 C47479) *
                C3094 +
            (((C4579 * C414 - C4575 * C424 + C4580 * C415 - C47448 * C425) *
                  C116 +
              (C4579 * C427 - C4575 * C444 + C4580 * C428 - C47448 * C445) *
                  C47384) *
                 C4577 +
             ((C5384 - C5385 + C5386 - C5387) * C116 +
              (C5388 - C5389 + C5390 - C5391) * C47384) *
                 C47479) *
                C47268) *
               C47429 +
           ((((C4729 - C4728 + C4731 - C4730) * C116 +
              (C4733 - C4732 + C4735 - C4734) * C47384) *
                 C4577 +
             ((C4736 - C4737 + C4738 - C4739) * C116 +
              (C4740 - C4741 + C4742 - C4743) * C47384) *
                 C47479) *
                C3094 +
            (((C5385 - C5384 + C5387 - C5386) * C116 +
              (C5389 - C5388 + C5391 - C5390) * C47384) *
                 C4577 +
             ((C5822 - C5823 + C5824 - C5825) * C116 +
              (C5826 - C5827 + C5828 - C5829) * C47384) *
                 C47479) *
                C47268) *
               C47226) *
              C47140 +
          (((((C4579 * C118 - C4575 * C125 + C4580 * C119 - C47448 * C126) *
                  C116 +
              (C4579 * C128 - C4575 * C139 + C4580 * C129 - C47448 * C140) *
                  C47384) *
                 C4577 +
             ((C4744 - C4745 + C4746 - C4747) * C116 +
              (C4748 - C4749 + C4750 - C4751) * C47384) *
                 C47479) *
                C3094 +
            (((C4575 * C425 - C4579 * C415 + C47448 * C426 - C4580 * C416) *
                  C116 +
              (C4575 * C445 - C4579 * C428 + C47448 * C446 - C4580 * C429) *
                  C47384) *
                 C4577 +
             ((C5392 - C5393 + C5394 - C5395) * C116 +
              (C5396 - C5397 + C5398 - C5399) * C47384) *
                 C47479) *
                C47268) *
               C47429 +
           ((((C4745 - C4744 + C4747 - C4746) * C116 +
              (C4749 - C4748 + C4751 - C4750) * C47384) *
                 C4577 +
             ((C4752 - C4753 + C4754 - C4755) * C116 +
              (C4756 - C4757 + C4758 - C4759) * C47384) *
                 C47479) *
                C3094 +
            (((C5393 - C5392 + C5395 - C5394) * C116 +
              (C5397 - C5396 + C5399 - C5398) * C47384) *
                 C4577 +
             ((C6170 - C6171 + C6172 - C6173) * C116 +
              (C6174 - C6175 + C6176 - C6177) * C47384) *
                 C47479) *
                C47268) *
               C47226) *
              C47149 +
          (((((C4575 * C126 - C4579 * C119 + C47448 * C130 - C4580 * C120) *
                  C116 +
              (C4575 * C140 - C4579 * C129 + C47448 * C141 - C4580 * C131) *
                  C47384) *
                 C4577 +
             ((C4760 - C4761 + C4762 - C4763) * C116 +
              (C4764 - C4765 + C4766 - C4767) * C47384) *
                 C47479) *
                C3094 +
            (((C4579 * C416 - C4575 * C426 + C4580 * C420 - C47448 * C436) *
                  C116 +
              (C4579 * C429 - C4575 * C446 + C4580 * C437 - C47448 * C450) *
                  C47384) *
                 C4577 +
             ((C5400 - C5401 + C5402 - C5403) * C116 +
              (C5404 - C5405 + C5406 - C5407) * C47384) *
                 C47479) *
                C47268) *
               C47429 +
           ((((C4761 - C4760 + C4763 - C4762) * C116 +
              (C4765 - C4764 + C4767 - C4766) * C47384) *
                 C4577 +
             ((C4768 - C4769 + C4770 - C4771) * C116 +
              (C4772 - C4773 + C4774 - C4775) * C47384) *
                 C47479) *
                C3094 +
            (((C5401 - C5400 + C5403 - C5402) * C116 +
              (C5405 - C5404 + C5407 - C5406) * C47384) *
                 C4577 +
             ((C4575 * C1167 - C4579 * C1155 + C47448 * C1441 - C4580 * C1440) *
                  C116 +
              (C4575 * C1182 - C4579 * C1170 + C47448 * C1443 - C4580 * C1442) *
                  C47384) *
                 C47479) *
                C47268) *
               C47226) *
              C2703)) /
        (p * q * std::sqrt(p + q));
    d2ee[41] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C4575 * C124 - C4579 * C117 + C47448 * C125 - C4580 * C118) *
                  C116 +
              (C4575 * C138 - C4579 * C127 + C47448 * C139 - C4580 * C128) *
                  C47384) *
                 C4577 +
             ((C4728 - C4729 + C4730 - C4731) * C116 +
              (C4732 - C4733 + C4734 - C4735) * C47384) *
                 C47479) *
                C47264 +
            (((C4579 * C414 - C4575 * C424 + C4580 * C415 - C47448 * C425) *
                  C116 +
              (C4579 * C427 - C4575 * C444 + C4580 * C428 - C47448 * C445) *
                  C47384) *
                 C4577 +
             ((C5384 - C5385 + C5386 - C5387) * C116 +
              (C5388 - C5389 + C5390 - C5391) * C47384) *
                 C47479) *
                C47271 +
            (((C4575 * C430 - C4579 * C417 + C47448 * C431 - C4580 * C418) *
                  C116 +
              (C4575 * C447 - C4579 * C433 + C47448 * C448 - C4580 * C434) *
                  C47384) *
                 C4577 +
             ((C5814 - C5815 + C5816 - C5817) * C116 +
              (C5818 - C5819 + C5820 - C5821) * C47384) *
                 C47479) *
                C3602) *
               C47429 +
           ((((C4729 - C4728 + C4731 - C4730) * C116 +
              (C4733 - C4732 + C4735 - C4734) * C47384) *
                 C4577 +
             ((C4736 - C4737 + C4738 - C4739) * C116 +
              (C4740 - C4741 + C4742 - C4743) * C47384) *
                 C47479) *
                C47264 +
            (((C5385 - C5384 + C5387 - C5386) * C116 +
              (C5389 - C5388 + C5391 - C5390) * C47384) *
                 C4577 +
             ((C5822 - C5823 + C5824 - C5825) * C116 +
              (C5826 - C5827 + C5828 - C5829) * C47384) *
                 C47479) *
                C47271 +
            (((C5815 - C5814 + C5817 - C5816) * C116 +
              (C5819 - C5818 + C5821 - C5820) * C47384) *
                 C4577 +
             ((C5830 - C5831 + C5832 - C5833) * C116 +
              (C5834 - C5835 + C5836 - C5837) * C47384) *
                 C47479) *
                C3602) *
               C47226) *
              C2440 +
          (((((C4579 * C118 - C4575 * C125 + C4580 * C119 - C47448 * C126) *
                  C116 +
              (C4579 * C128 - C4575 * C139 + C4580 * C129 - C47448 * C140) *
                  C47384) *
                 C4577 +
             ((C4744 - C4745 + C4746 - C4747) * C116 +
              (C4748 - C4749 + C4750 - C4751) * C47384) *
                 C47479) *
                C47264 +
            (((C4575 * C425 - C4579 * C415 + C47448 * C426 - C4580 * C416) *
                  C116 +
              (C4575 * C445 - C4579 * C428 + C47448 * C446 - C4580 * C429) *
                  C47384) *
                 C4577 +
             ((C5392 - C5393 + C5394 - C5395) * C116 +
              (C5396 - C5397 + C5398 - C5399) * C47384) *
                 C47479) *
                C47271 +
            (((C4579 * C418 - C4575 * C431 + C4580 * C419 - C47448 * C432) *
                  C116 +
              (C4579 * C434 - C4575 * C448 + C4580 * C435 - C47448 * C449) *
                  C47384) *
                 C4577 +
             ((C6900 - C6901 + C6902 - C6903) * C116 +
              (C6904 - C6905 + C6906 - C6907) * C47384) *
                 C47479) *
                C3602) *
               C47429 +
           ((((C4745 - C4744 + C4747 - C4746) * C116 +
              (C4749 - C4748 + C4751 - C4750) * C47384) *
                 C4577 +
             ((C4752 - C4753 + C4754 - C4755) * C116 +
              (C4756 - C4757 + C4758 - C4759) * C47384) *
                 C47479) *
                C47264 +
            (((C5393 - C5392 + C5395 - C5394) * C116 +
              (C5397 - C5396 + C5399 - C5398) * C47384) *
                 C4577 +
             ((C6170 - C6171 + C6172 - C6173) * C116 +
              (C6174 - C6175 + C6176 - C6177) * C47384) *
                 C47479) *
                C47271 +
            (((C6901 - C6900 + C6903 - C6902) * C116 +
              (C6905 - C6904 + C6907 - C6906) * C47384) *
                 C4577 +
             ((C4575 * C1172 - C4579 * C1157 + C47448 * C1173 - C4580 * C1158) *
                  C116 +
              (C4575 * C1184 - C4579 * C1175 + C47448 * C1185 - C4580 * C1176) *
                  C47384) *
                 C47479) *
                C3602) *
               C47226) *
              C47146)) /
        (p * q * std::sqrt(p + q));
    d2ee[42] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C4575 * C124 - C4579 * C117 + C47448 * C125 - C4580 * C118) *
                  C116 +
              (C4575 * C138 - C4579 * C127 + C47448 * C139 - C4580 * C128) *
                  C47384) *
                 C4577 +
             ((C4728 - C4729 + C4730 - C4731) * C116 +
              (C4732 - C4733 + C4734 - C4735) * C47384) *
                 C47479) *
                C3094 +
            (((C4579 * C414 - C4575 * C424 + C4580 * C415 - C47448 * C425) *
                  C116 +
              (C4579 * C427 - C4575 * C444 + C4580 * C428 - C47448 * C445) *
                  C47384) *
                 C4577 +
             ((C5384 - C5385 + C5386 - C5387) * C116 +
              (C5388 - C5389 + C5390 - C5391) * C47384) *
                 C47479) *
                C47268) *
               C47500 +
           ((((C4729 - C4728 + C4731 - C4730) * C116 +
              (C4733 - C4732 + C4735 - C4734) * C47384) *
                 C4577 +
             ((C4736 - C4737 + C4738 - C4739) * C116 +
              (C4740 - C4741 + C4742 - C4743) * C47384) *
                 C47479) *
                C3094 +
            (((C5385 - C5384 + C5387 - C5386) * C116 +
              (C5389 - C5388 + C5391 - C5390) * C47384) *
                 C4577 +
             ((C5822 - C5823 + C5824 - C5825) * C116 +
              (C5826 - C5827 + C5828 - C5829) * C47384) *
                 C47479) *
                C47268) *
               C47488 +
           ((((C4737 - C4736 + C4739 - C4738) * C116 +
              (C4741 - C4740 + C4743 - C4742) * C47384) *
                 C4577 +
             ((C5644 - C5645 + C5646 - C5647) * C116 +
              (C5648 - C5649 + C5650 - C5651) * C47384) *
                 C47479) *
                C3094 +
            (((C5823 - C5822 + C5825 - C5824) * C116 +
              (C5827 - C5826 + C5829 - C5828) * C47384) *
                 C4577 +
             ((C6316 - C6317 + C6318 - C6319) * C116 +
              (C6320 - C6321 + C6322 - C6323) * C47384) *
                 C47479) *
                C47268) *
               C47461) *
              C2440 +
          (((((C4579 * C118 - C4575 * C125 + C4580 * C119 - C47448 * C126) *
                  C116 +
              (C4579 * C128 - C4575 * C139 + C4580 * C129 - C47448 * C140) *
                  C47384) *
                 C4577 +
             ((C4744 - C4745 + C4746 - C4747) * C116 +
              (C4748 - C4749 + C4750 - C4751) * C47384) *
                 C47479) *
                C3094 +
            (((C4575 * C425 - C4579 * C415 + C47448 * C426 - C4580 * C416) *
                  C116 +
              (C4575 * C445 - C4579 * C428 + C47448 * C446 - C4580 * C429) *
                  C47384) *
                 C4577 +
             ((C5392 - C5393 + C5394 - C5395) * C116 +
              (C5396 - C5397 + C5398 - C5399) * C47384) *
                 C47479) *
                C47268) *
               C47500 +
           ((((C4745 - C4744 + C4747 - C4746) * C116 +
              (C4749 - C4748 + C4751 - C4750) * C47384) *
                 C4577 +
             ((C4752 - C4753 + C4754 - C4755) * C116 +
              (C4756 - C4757 + C4758 - C4759) * C47384) *
                 C47479) *
                C3094 +
            (((C5393 - C5392 + C5395 - C5394) * C116 +
              (C5397 - C5396 + C5399 - C5398) * C47384) *
                 C4577 +
             ((C6170 - C6171 + C6172 - C6173) * C116 +
              (C6174 - C6175 + C6176 - C6177) * C47384) *
                 C47479) *
                C47268) *
               C47488 +
           ((((C4753 - C4752 + C4755 - C4754) * C116 +
              (C4757 - C4756 + C4759 - C4758) * C47384) *
                 C4577 +
             ((C5968 - C5969 + C5970 - C5971) * C116 +
              (C5972 - C5973 + C5974 - C5975) * C47384) *
                 C47479) *
                C3094 +
            (((C6171 - C6170 + C6173 - C6172) * C116 +
              (C6175 - C6174 + C6177 - C6176) * C47384) *
                 C4577 +
             ((C4575 * C1546 - C4579 * C1543 + C47448 * C1547 - C4580 * C1544) *
                  C116 +
              (C4575 * C1552 - C4579 * C1549 + C47448 * C1553 - C4580 * C1550) *
                  C47384) *
                 C47479) *
                C47268) *
               C47461) *
              C47146)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C4575 * C124 - C4579 * C117 + C47448 * C125 - C4580 * C118) *
                 C116 +
             (C4575 * C138 - C4579 * C127 + C47448 * C139 - C4580 * C128) *
                 C47384) *
                C4577 +
            ((C4728 - C4729 + C4730 - C4731) * C116 +
             (C4732 - C4733 + C4734 - C4735) * C47384) *
                C47479) *
               C3094 +
           (((C4579 * C414 - C4575 * C424 + C4580 * C415 - C47448 * C425) *
                 C116 +
             (C4579 * C427 - C4575 * C444 + C4580 * C428 - C47448 * C445) *
                 C47384) *
                C4577 +
            ((C5384 - C5385 + C5386 - C5387) * C116 +
             (C5388 - C5389 + C5390 - C5391) * C47384) *
                C47479) *
               C47268) *
              C47163 * C47506 +
          ((((C4579 * C118 - C4575 * C125 + C4580 * C119 - C47448 * C126) *
                 C116 +
             (C4579 * C128 - C4575 * C139 + C4580 * C129 - C47448 * C140) *
                 C47384) *
                C4577 +
            ((C4744 - C4745 + C4746 - C4747) * C116 +
             (C4748 - C4749 + C4750 - C4751) * C47384) *
                C47479) *
               C3094 +
           (((C4575 * C425 - C4579 * C415 + C47448 * C426 - C4580 * C416) *
                 C116 +
             (C4575 * C445 - C4579 * C428 + C47448 * C446 - C4580 * C429) *
                 C47384) *
                C4577 +
            ((C5392 - C5393 + C5394 - C5395) * C116 +
             (C5396 - C5397 + C5398 - C5399) * C47384) *
                C47479) *
               C47268) *
              C47163 * C47499 +
          ((((C4575 * C126 - C4579 * C119 + C47448 * C130 - C4580 * C120) *
                 C116 +
             (C4575 * C140 - C4579 * C129 + C47448 * C141 - C4580 * C131) *
                 C47384) *
                C4577 +
            ((C4760 - C4761 + C4762 - C4763) * C116 +
             (C4764 - C4765 + C4766 - C4767) * C47384) *
                C47479) *
               C3094 +
           (((C4579 * C416 - C4575 * C426 + C4580 * C420 - C47448 * C436) *
                 C116 +
             (C4579 * C429 - C4575 * C446 + C4580 * C437 - C47448 * C450) *
                 C47384) *
                C4577 +
            ((C5400 - C5401 + C5402 - C5403) * C116 +
             (C5404 - C5405 + C5406 - C5407) * C47384) *
                C47479) *
               C47268) *
              C47163 * C47486 +
          ((((C4579 * C120 - C4575 * C130 + C4580 * C121 - C47448 * C132) *
                 C116 +
             (C4579 * C131 - C4575 * C141 + C4580 * C133 - C47448 * C142) *
                 C47384) *
                C4577 +
            ((C5052 - C5053 + C5054 - C5055) * C116 +
             (C5056 - C5057 + C5058 - C5059) * C47384) *
                C47479) *
               C3094 +
           (((C4575 * C436 - C4579 * C420 + C47448 * C440 - C4580 * C422) *
                 C116 +
             (C4575 * C450 - C4579 * C437 + C47448 * C452 - C4580 * C441) *
                 C47384) *
                C4577 +
            ((C4575 * C823 - C4579 * C815 + C47448 * C825 - C4580 * C816) *
                 C116 +
             (C4575 * C830 - C4579 * C824 + C47448 * C831 - C4580 * C826) *
                 C47384) *
                C47479) *
               C47268) *
              C47163 * C47465)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C4575 * C124 - C4579 * C117 + C47448 * C125 - C4580 * C118) *
                 C116 +
             (C4575 * C138 - C4579 * C127 + C47448 * C139 - C4580 * C128) *
                 C47384) *
                C4577 +
            ((C4728 - C4729 + C4730 - C4731) * C116 +
             (C4732 - C4733 + C4734 - C4735) * C47384) *
                C47479) *
               C47508 +
           (((C4579 * C414 - C4575 * C424 + C4580 * C415 - C47448 * C425) *
                 C116 +
             (C4579 * C427 - C4575 * C444 + C4580 * C428 - C47448 * C445) *
                 C47384) *
                C4577 +
            ((C5384 - C5385 + C5386 - C5387) * C116 +
             (C5388 - C5389 + C5390 - C5391) * C47384) *
                C47479) *
               C47505 +
           (((C4575 * C430 - C4579 * C417 + C47448 * C431 - C4580 * C418) *
                 C116 +
             (C4575 * C447 - C4579 * C433 + C47448 * C448 - C4580 * C434) *
                 C47384) *
                C4577 +
            ((C5814 - C5815 + C5816 - C5817) * C116 +
             (C5818 - C5819 + C5820 - C5821) * C47384) *
                C47479) *
               C47496 +
           (((C4579 * C1844 - C4575 * C1850 + C4580 * C1845 - C47448 * C1851) *
                 C116 +
             (C4579 * C1853 - C4575 * C1862 + C4580 * C1854 - C47448 * C1863) *
                 C47384) *
                C4577 +
            ((C7176 - C7177 + C7178 - C7179) * C116 +
             (C7180 - C7181 + C7182 - C7183) * C47384) *
                C47479) *
               C47477) *
              C47163 * C2440 +
          ((((C4579 * C118 - C4575 * C125 + C4580 * C119 - C47448 * C126) *
                 C116 +
             (C4579 * C128 - C4575 * C139 + C4580 * C129 - C47448 * C140) *
                 C47384) *
                C4577 +
            ((C4744 - C4745 + C4746 - C4747) * C116 +
             (C4748 - C4749 + C4750 - C4751) * C47384) *
                C47479) *
               C47508 +
           (((C4575 * C425 - C4579 * C415 + C47448 * C426 - C4580 * C416) *
                 C116 +
             (C4575 * C445 - C4579 * C428 + C47448 * C446 - C4580 * C429) *
                 C47384) *
                C4577 +
            ((C5392 - C5393 + C5394 - C5395) * C116 +
             (C5396 - C5397 + C5398 - C5399) * C47384) *
                C47479) *
               C47505 +
           (((C4579 * C418 - C4575 * C431 + C4580 * C419 - C47448 * C432) *
                 C116 +
             (C4579 * C434 - C4575 * C448 + C4580 * C435 - C47448 * C449) *
                 C47384) *
                C4577 +
            ((C6900 - C6901 + C6902 - C6903) * C116 +
             (C6904 - C6905 + C6906 - C6907) * C47384) *
                C47479) *
               C47496 +
           (((C4575 * C1851 - C4579 * C1845 + C47448 * C1852 - C4580 * C1846) *
                 C116 +
             (C4575 * C1863 - C4579 * C1854 + C47448 * C1864 - C4580 * C1855) *
                 C47384) *
                C4577 +
            ((C4575 * C2226 - C4579 * C2223 + C47448 * C2227 - C4580 * C2224) *
                 C116 +
             (C4575 * C2232 - C4579 * C2229 + C47448 * C2233 - C4580 * C2230) *
                 C47384) *
                C47479) *
               C47477) *
              C47163 * C47146)) /
            (p * q * std::sqrt(p + q));
    d2ee[43] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C4575 * C124 - C4579 * C117 + C47448 * C125 - C4580 * C118) *
                 C116 +
             (C4575 * C138 - C4579 * C127 + C47448 * C139 - C4580 * C128) *
                 C47384) *
                C4577 +
            ((C4728 - C4729 + C4730 - C4731) * C116 +
             (C4732 - C4733 + C4734 - C4735) * C47384) *
                C47479) *
               C47264 +
           (((C4579 * C414 - C4575 * C424 + C4580 * C415 - C47448 * C425) *
                 C116 +
             (C4579 * C427 - C4575 * C444 + C4580 * C428 - C47448 * C445) *
                 C47384) *
                C4577 +
            ((C5384 - C5385 + C5386 - C5387) * C116 +
             (C5388 - C5389 + C5390 - C5391) * C47384) *
                C47479) *
               C47271 +
           (((C4575 * C430 - C4579 * C417 + C47448 * C431 - C4580 * C418) *
                 C116 +
             (C4575 * C447 - C4579 * C433 + C47448 * C448 - C4580 * C434) *
                 C47384) *
                C4577 +
            ((C5814 - C5815 + C5816 - C5817) * C116 +
             (C5818 - C5819 + C5820 - C5821) * C47384) *
                C47479) *
               C3602) *
              C47163 * C47140 +
          ((((C4579 * C118 - C4575 * C125 + C4580 * C119 - C47448 * C126) *
                 C116 +
             (C4579 * C128 - C4575 * C139 + C4580 * C129 - C47448 * C140) *
                 C47384) *
                C4577 +
            ((C4744 - C4745 + C4746 - C4747) * C116 +
             (C4748 - C4749 + C4750 - C4751) * C47384) *
                C47479) *
               C47264 +
           (((C4575 * C425 - C4579 * C415 + C47448 * C426 - C4580 * C416) *
                 C116 +
             (C4575 * C445 - C4579 * C428 + C47448 * C446 - C4580 * C429) *
                 C47384) *
                C4577 +
            ((C5392 - C5393 + C5394 - C5395) * C116 +
             (C5396 - C5397 + C5398 - C5399) * C47384) *
                C47479) *
               C47271 +
           (((C4579 * C418 - C4575 * C431 + C4580 * C419 - C47448 * C432) *
                 C116 +
             (C4579 * C434 - C4575 * C448 + C4580 * C435 - C47448 * C449) *
                 C47384) *
                C4577 +
            ((C6900 - C6901 + C6902 - C6903) * C116 +
             (C6904 - C6905 + C6906 - C6907) * C47384) *
                C47479) *
               C3602) *
              C47163 * C47149 +
          ((((C4575 * C126 - C4579 * C119 + C47448 * C130 - C4580 * C120) *
                 C116 +
             (C4575 * C140 - C4579 * C129 + C47448 * C141 - C4580 * C131) *
                 C47384) *
                C4577 +
            ((C4760 - C4761 + C4762 - C4763) * C116 +
             (C4764 - C4765 + C4766 - C4767) * C47384) *
                C47479) *
               C47264 +
           (((C4579 * C416 - C4575 * C426 + C4580 * C420 - C47448 * C436) *
                 C116 +
             (C4579 * C429 - C4575 * C446 + C4580 * C437 - C47448 * C450) *
                 C47384) *
                C4577 +
            ((C5400 - C5401 + C5402 - C5403) * C116 +
             (C5404 - C5405 + C5406 - C5407) * C47384) *
                C47479) *
               C47271 +
           (((C4575 * C432 - C4579 * C419 + C47448 * C438 - C4580 * C421) *
                 C116 +
             (C4575 * C449 - C4579 * C435 + C47448 * C451 - C4580 * C439) *
                 C47384) *
                C4577 +
            ((C4575 * C1161 - C4579 * C1152 + C47448 * C2015 - C4580 * C2014) *
                 C116 +
             (C4575 * C1179 - C4579 * C1164 + C47448 * C2017 - C4580 * C2016) *
                 C47384) *
                C47479) *
               C3602) *
              C47163 * C2703)) /
        (p * q * std::sqrt(p + q));
    d2ee[44] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C4575 * C124 - C4579 * C117 + C47448 * C125 - C4580 * C118) *
                 C116 +
             (C4575 * C138 - C4579 * C127 + C47448 * C139 - C4580 * C128) *
                 C47384) *
                C4577 +
            ((C4728 - C4729 + C4730 - C4731) * C116 +
             (C4732 - C4733 + C4734 - C4735) * C47384) *
                C47479) *
               C3094 +
           (((C4579 * C414 - C4575 * C424 + C4580 * C415 - C47448 * C425) *
                 C116 +
             (C4579 * C427 - C4575 * C444 + C4580 * C428 - C47448 * C445) *
                 C47384) *
                C4577 +
            ((C5384 - C5385 + C5386 - C5387) * C116 +
             (C5388 - C5389 + C5390 - C5391) * C47384) *
                C47479) *
               C47268) *
              C47163 * C47506 +
          ((((C4579 * C118 - C4575 * C125 + C4580 * C119 - C47448 * C126) *
                 C116 +
             (C4579 * C128 - C4575 * C139 + C4580 * C129 - C47448 * C140) *
                 C47384) *
                C4577 +
            ((C4744 - C4745 + C4746 - C4747) * C116 +
             (C4748 - C4749 + C4750 - C4751) * C47384) *
                C47479) *
               C3094 +
           (((C4575 * C425 - C4579 * C415 + C47448 * C426 - C4580 * C416) *
                 C116 +
             (C4575 * C445 - C4579 * C428 + C47448 * C446 - C4580 * C429) *
                 C47384) *
                C4577 +
            ((C5392 - C5393 + C5394 - C5395) * C116 +
             (C5396 - C5397 + C5398 - C5399) * C47384) *
                C47479) *
               C47268) *
              C47163 * C47499 +
          ((((C4575 * C126 - C4579 * C119 + C47448 * C130 - C4580 * C120) *
                 C116 +
             (C4575 * C140 - C4579 * C129 + C47448 * C141 - C4580 * C131) *
                 C47384) *
                C4577 +
            ((C4760 - C4761 + C4762 - C4763) * C116 +
             (C4764 - C4765 + C4766 - C4767) * C47384) *
                C47479) *
               C3094 +
           (((C4579 * C416 - C4575 * C426 + C4580 * C420 - C47448 * C436) *
                 C116 +
             (C4579 * C429 - C4575 * C446 + C4580 * C437 - C47448 * C450) *
                 C47384) *
                C4577 +
            ((C5400 - C5401 + C5402 - C5403) * C116 +
             (C5404 - C5405 + C5406 - C5407) * C47384) *
                C47479) *
               C47268) *
              C47163 * C47486 +
          ((((C4579 * C120 - C4575 * C130 + C4580 * C121 - C47448 * C132) *
                 C116 +
             (C4579 * C131 - C4575 * C141 + C4580 * C133 - C47448 * C142) *
                 C47384) *
                C4577 +
            ((C5052 - C5053 + C5054 - C5055) * C116 +
             (C5056 - C5057 + C5058 - C5059) * C47384) *
                C47479) *
               C3094 +
           (((C4575 * C436 - C4579 * C420 + C47448 * C440 - C4580 * C422) *
                 C116 +
             (C4575 * C450 - C4579 * C437 + C47448 * C452 - C4580 * C441) *
                 C47384) *
                C4577 +
            ((C4575 * C823 - C4579 * C815 + C47448 * C825 - C4580 * C816) *
                 C116 +
             (C4575 * C830 - C4579 * C824 + C47448 * C831 - C4580 * C826) *
                 C47384) *
                C47479) *
               C47268) *
              C47163 * C47465)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C4575 * C124 - C4579 * C117 + C47448 * C125 - C4580 * C118) *
                  C116 +
              (C4575 * C138 - C4579 * C127 + C47448 * C139 - C4580 * C128) *
                  C47384) *
                 C4577 +
             ((C4728 - C4729 + C4730 - C4731) * C116 +
              (C4732 - C4733 + C4734 - C4735) * C47384) *
                 C47479) *
                C3094 +
            (((C4579 * C414 - C4575 * C424 + C4580 * C415 - C47448 * C425) *
                  C116 +
              (C4579 * C427 - C4575 * C444 + C4580 * C428 - C47448 * C445) *
                  C47384) *
                 C4577 +
             ((C5384 - C5385 + C5386 - C5387) * C116 +
              (C5388 - C5389 + C5390 - C5391) * C47384) *
                 C47479) *
                C47268) *
               C47500 +
           ((((C4729 - C4728 + C4731 - C4730) * C116 +
              (C4733 - C4732 + C4735 - C4734) * C47384) *
                 C4577 +
             ((C4736 - C4737 + C4738 - C4739) * C116 +
              (C4740 - C4741 + C4742 - C4743) * C47384) *
                 C47479) *
                C3094 +
            (((C5385 - C5384 + C5387 - C5386) * C116 +
              (C5389 - C5388 + C5391 - C5390) * C47384) *
                 C4577 +
             ((C5822 - C5823 + C5824 - C5825) * C116 +
              (C5826 - C5827 + C5828 - C5829) * C47384) *
                 C47479) *
                C47268) *
               C47488 +
           ((((C4737 - C4736 + C4739 - C4738) * C116 +
              (C4741 - C4740 + C4743 - C4742) * C47384) *
                 C4577 +
             ((C5644 - C5645 + C5646 - C5647) * C116 +
              (C5648 - C5649 + C5650 - C5651) * C47384) *
                 C47479) *
                C3094 +
            (((C5823 - C5822 + C5825 - C5824) * C116 +
              (C5827 - C5826 + C5829 - C5828) * C47384) *
                 C4577 +
             ((C6316 - C6317 + C6318 - C6319) * C116 +
              (C6320 - C6321 + C6322 - C6323) * C47384) *
                 C47479) *
                C47268) *
               C47461) *
              C2440 +
          (((((C4579 * C118 - C4575 * C125 + C4580 * C119 - C47448 * C126) *
                  C116 +
              (C4579 * C128 - C4575 * C139 + C4580 * C129 - C47448 * C140) *
                  C47384) *
                 C4577 +
             ((C4744 - C4745 + C4746 - C4747) * C116 +
              (C4748 - C4749 + C4750 - C4751) * C47384) *
                 C47479) *
                C3094 +
            (((C4575 * C425 - C4579 * C415 + C47448 * C426 - C4580 * C416) *
                  C116 +
              (C4575 * C445 - C4579 * C428 + C47448 * C446 - C4580 * C429) *
                  C47384) *
                 C4577 +
             ((C5392 - C5393 + C5394 - C5395) * C116 +
              (C5396 - C5397 + C5398 - C5399) * C47384) *
                 C47479) *
                C47268) *
               C47500 +
           ((((C4745 - C4744 + C4747 - C4746) * C116 +
              (C4749 - C4748 + C4751 - C4750) * C47384) *
                 C4577 +
             ((C4752 - C4753 + C4754 - C4755) * C116 +
              (C4756 - C4757 + C4758 - C4759) * C47384) *
                 C47479) *
                C3094 +
            (((C5393 - C5392 + C5395 - C5394) * C116 +
              (C5397 - C5396 + C5399 - C5398) * C47384) *
                 C4577 +
             ((C6170 - C6171 + C6172 - C6173) * C116 +
              (C6174 - C6175 + C6176 - C6177) * C47384) *
                 C47479) *
                C47268) *
               C47488 +
           ((((C4753 - C4752 + C4755 - C4754) * C116 +
              (C4757 - C4756 + C4759 - C4758) * C47384) *
                 C4577 +
             ((C5968 - C5969 + C5970 - C5971) * C116 +
              (C5972 - C5973 + C5974 - C5975) * C47384) *
                 C47479) *
                C3094 +
            (((C6171 - C6170 + C6173 - C6172) * C116 +
              (C6175 - C6174 + C6177 - C6176) * C47384) *
                 C4577 +
             ((C4575 * C1546 - C4579 * C1543 + C47448 * C1547 - C4580 * C1544) *
                  C116 +
              (C4575 * C1552 - C4579 * C1549 + C47448 * C1553 - C4580 * C1550) *
                  C47384) *
                 C47479) *
                C47268) *
               C47461) *
              C47146)) /
            (p * q * std::sqrt(p + q));
    d2ee[45] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C4575 * C124 - C4579 * C117 + C47448 * C125 - C4580 * C118) *
                 C116 +
             (C4575 * C138 - C4579 * C127 + C47448 * C139 - C4580 * C128) *
                 C47384) *
                C4577 +
            ((C4728 - C4729 + C4730 - C4731) * C116 +
             (C4732 - C4733 + C4734 - C4735) * C47384) *
                C47479) *
               C47181 * C47429 +
           (((C4729 - C4728 + C4731 - C4730) * C116 +
             (C4733 - C4732 + C4735 - C4734) * C47384) *
                C4577 +
            ((C4736 - C4737 + C4738 - C4739) * C116 +
             (C4740 - C4741 + C4742 - C4743) * C47384) *
                C47479) *
               C47181 * C47226) *
              C554 +
          ((((C4579 * C118 - C4575 * C125 + C4580 * C119 - C47448 * C126) *
                 C116 +
             (C4579 * C128 - C4575 * C139 + C4580 * C129 - C47448 * C140) *
                 C47384) *
                C4577 +
            ((C4744 - C4745 + C4746 - C4747) * C116 +
             (C4748 - C4749 + C4750 - C4751) * C47384) *
                C47479) *
               C47181 * C47429 +
           (((C4745 - C4744 + C4747 - C4746) * C116 +
             (C4749 - C4748 + C4751 - C4750) * C47384) *
                C4577 +
            ((C4752 - C4753 + C4754 - C4755) * C116 +
             (C4756 - C4757 + C4758 - C4759) * C47384) *
                C47479) *
               C47181 * C47226) *
              C555 +
          ((((C4575 * C126 - C4579 * C119 + C47448 * C130 - C4580 * C120) *
                 C116 +
             (C4575 * C140 - C4579 * C129 + C47448 * C141 - C4580 * C131) *
                 C47384) *
                C4577 +
            ((C4760 - C4761 + C4762 - C4763) * C116 +
             (C4764 - C4765 + C4766 - C4767) * C47384) *
                C47479) *
               C47181 * C47429 +
           (((C4761 - C4760 + C4763 - C4762) * C116 +
             (C4765 - C4764 + C4767 - C4766) * C47384) *
                C4577 +
            ((C4768 - C4769 + C4770 - C4771) * C116 +
             (C4772 - C4773 + C4774 - C4775) * C47384) *
                C47479) *
               C47181 * C47226) *
              C556 +
          ((((C4579 * C120 - C4575 * C130 + C4580 * C121 - C47448 * C132) *
                 C116 +
             (C4579 * C131 - C4575 * C141 + C4580 * C133 - C47448 * C142) *
                 C47384) *
                C4577 +
            ((C5052 - C5053 + C5054 - C5055) * C116 +
             (C5056 - C5057 + C5058 - C5059) * C47384) *
                C47479) *
               C47181 * C47429 +
           (((C5053 - C5052 + C5055 - C5054) * C116 +
             (C5057 - C5056 + C5059 - C5058) * C47384) *
                C4577 +
            ((C4575 * C285 - C4579 * C268 + C47448 * C289 - C4580 * C270) *
                 C116 +
             (C4575 * C298 - C4579 * C286 + C47448 * C300 - C4580 * C290) *
                 C47384) *
                C47479) *
               C47181 * C47226) *
              C47465)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C4575 * C124 - C4579 * C117 + C47448 * C125 - C4580 * C118) *
                 C116 +
             (C4575 * C138 - C4579 * C127 + C47448 * C139 - C4580 * C128) *
                 C47384) *
                C4577 +
            ((C4728 - C4729 + C4730 - C4731) * C116 +
             (C4732 - C4733 + C4734 - C4735) * C47384) *
                C47479) *
               C47181 * C1284 +
           (((C4729 - C4728 + C4731 - C4730) * C116 +
             (C4733 - C4732 + C4735 - C4734) * C47384) *
                C4577 +
            ((C4736 - C4737 + C4738 - C4739) * C116 +
             (C4740 - C4741 + C4742 - C4743) * C47384) *
                C47479) *
               C47181 * C1285 +
           (((C4737 - C4736 + C4739 - C4738) * C116 +
             (C4741 - C4740 + C4743 - C4742) * C47384) *
                C4577 +
            ((C5644 - C5645 + C5646 - C5647) * C116 +
             (C5648 - C5649 + C5650 - C5651) * C47384) *
                C47479) *
               C47181 * C1286 +
           (((C5645 - C5644 + C5647 - C5646) * C116 +
             (C5649 - C5648 + C5651 - C5650) * C47384) *
                C4577 +
            ((C5652 - C5653 + C5654 - C5655) * C116 +
             (C5656 - C5657 + C5658 - C5659) * C47384) *
                C47479) *
               C47181 * C47471) *
              C47415 +
          ((((C4579 * C118 - C4575 * C125 + C4580 * C119 - C47448 * C126) *
                 C116 +
             (C4579 * C128 - C4575 * C139 + C4580 * C129 - C47448 * C140) *
                 C47384) *
                C4577 +
            ((C4744 - C4745 + C4746 - C4747) * C116 +
             (C4748 - C4749 + C4750 - C4751) * C47384) *
                C47479) *
               C47181 * C1284 +
           (((C4745 - C4744 + C4747 - C4746) * C116 +
             (C4749 - C4748 + C4751 - C4750) * C47384) *
                C4577 +
            ((C4752 - C4753 + C4754 - C4755) * C116 +
             (C4756 - C4757 + C4758 - C4759) * C47384) *
                C47479) *
               C47181 * C1285 +
           (((C4753 - C4752 + C4755 - C4754) * C116 +
             (C4757 - C4756 + C4759 - C4758) * C47384) *
                C4577 +
            ((C5968 - C5969 + C5970 - C5971) * C116 +
             (C5972 - C5973 + C5974 - C5975) * C47384) *
                C47479) *
               C47181 * C1286 +
           (((C5969 - C5968 + C5971 - C5970) * C116 +
             (C5973 - C5972 + C5975 - C5974) * C47384) *
                C4577 +
            ((C4575 * C1029 - C4579 * C1020 + C47448 * C1030 - C4580 * C1021) *
                 C116 +
             (C4575 * C1038 - C4579 * C1032 + C47448 * C1039 - C4580 * C1033) *
                 C47384) *
                C47479) *
               C47181 * C47471) *
              C47146)) /
            (p * q * std::sqrt(p + q));
    d2ee[46] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C4575 * C124 - C4579 * C117 + C47448 * C125 - C4580 * C118) *
                  C116 +
              (C4575 * C138 - C4579 * C127 + C47448 * C139 - C4580 * C128) *
                  C47384) *
                 C4577 +
             ((C4728 - C4729 + C4730 - C4731) * C116 +
              (C4732 - C4733 + C4734 - C4735) * C47384) *
                 C47479) *
                C47430 +
            (((C4579 * C414 - C4575 * C424 + C4580 * C415 - C47448 * C425) *
                  C116 +
              (C4579 * C427 - C4575 * C444 + C4580 * C428 - C47448 * C445) *
                  C47384) *
                 C4577 +
             ((C5384 - C5385 + C5386 - C5387) * C116 +
              (C5388 - C5389 + C5390 - C5391) * C47384) *
                 C47479) *
                C47268) *
               C47429 +
           ((((C4729 - C4728 + C4731 - C4730) * C116 +
              (C4733 - C4732 + C4735 - C4734) * C47384) *
                 C4577 +
             ((C4736 - C4737 + C4738 - C4739) * C116 +
              (C4740 - C4741 + C4742 - C4743) * C47384) *
                 C47479) *
                C47430 +
            (((C5385 - C5384 + C5387 - C5386) * C116 +
              (C5389 - C5388 + C5391 - C5390) * C47384) *
                 C4577 +
             ((C4575 * C1165 - C4579 * C1153 + C47448 * C1166 - C4580 * C1154) *
                  C116 +
              (C4575 * C1180 - C4579 * C1168 + C47448 * C1181 - C4580 * C1169) *
                  C47384) *
                 C47479) *
                C47268) *
               C47226) *
              C258 +
          (((((C4579 * C118 - C4575 * C125 + C4580 * C119 - C47448 * C126) *
                  C116 +
              (C4579 * C128 - C4575 * C139 + C4580 * C129 - C47448 * C140) *
                  C47384) *
                 C4577 +
             ((C4744 - C4745 + C4746 - C4747) * C116 +
              (C4748 - C4749 + C4750 - C4751) * C47384) *
                 C47479) *
                C47430 +
            (((C4575 * C425 - C4579 * C415 + C47448 * C426 - C4580 * C416) *
                  C116 +
              (C4575 * C445 - C4579 * C428 + C47448 * C446 - C4580 * C429) *
                  C47384) *
                 C4577 +
             ((C5392 - C5393 + C5394 - C5395) * C116 +
              (C5396 - C5397 + C5398 - C5399) * C47384) *
                 C47479) *
                C47268) *
               C47429 +
           ((((C4745 - C4744 + C4747 - C4746) * C116 +
              (C4749 - C4748 + C4751 - C4750) * C47384) *
                 C4577 +
             ((C4752 - C4753 + C4754 - C4755) * C116 +
              (C4756 - C4757 + C4758 - C4759) * C47384) *
                 C47479) *
                C47430 +
            (((C5393 - C5392 + C5395 - C5394) * C116 +
              (C5397 - C5396 + C5399 - C5398) * C47384) *
                 C4577 +
             ((C4579 * C1154 - C4575 * C1166 + C4580 * C1155 - C47448 * C1167) *
                  C116 +
              (C4579 * C1169 - C4575 * C1181 + C4580 * C1170 - C47448 * C1182) *
                  C47384) *
                 C47479) *
                C47268) *
               C47226) *
              C259 +
          (((((C4575 * C126 - C4579 * C119 + C47448 * C130 - C4580 * C120) *
                  C116 +
              (C4575 * C140 - C4579 * C129 + C47448 * C141 - C4580 * C131) *
                  C47384) *
                 C4577 +
             ((C4760 - C4761 + C4762 - C4763) * C116 +
              (C4764 - C4765 + C4766 - C4767) * C47384) *
                 C47479) *
                C47430 +
            (((C4579 * C416 - C4575 * C426 + C4580 * C420 - C47448 * C436) *
                  C116 +
              (C4579 * C429 - C4575 * C446 + C4580 * C437 - C47448 * C450) *
                  C47384) *
                 C4577 +
             ((C5400 - C5401 + C5402 - C5403) * C116 +
              (C5404 - C5405 + C5406 - C5407) * C47384) *
                 C47479) *
                C47268) *
               C47429 +
           ((((C4761 - C4760 + C4763 - C4762) * C116 +
              (C4765 - C4764 + C4767 - C4766) * C47384) *
                 C4577 +
             ((C4768 - C4769 + C4770 - C4771) * C116 +
              (C4772 - C4773 + C4774 - C4775) * C47384) *
                 C47479) *
                C47430 +
            (((C5401 - C5400 + C5403 - C5402) * C116 +
              (C5405 - C5404 + C5407 - C5406) * C47384) *
                 C4577 +
             ((C4575 * C1167 - C4579 * C1155 + C47448 * C1441 - C4580 * C1440) *
                  C116 +
              (C4575 * C1182 - C4579 * C1170 + C47448 * C1443 - C4580 * C1442) *
                  C47384) *
                 C47479) *
                C47268) *
               C47226) *
              C47455)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C4575 * C124 - C4579 * C117 + C47448 * C125 - C4580 * C118) *
                 C116 +
             (C4575 * C138 - C4579 * C127 + C47448 * C139 - C4580 * C128) *
                 C47384) *
                C4577 +
            ((C4728 - C4729 + C4730 - C4731) * C116 +
             (C4732 - C4733 + C4734 - C4735) * C47384) *
                C47479) *
               C47430 +
           (((C4579 * C414 - C4575 * C424 + C4580 * C415 - C47448 * C425) *
                 C116 +
             (C4579 * C427 - C4575 * C444 + C4580 * C428 - C47448 * C445) *
                 C47384) *
                C4577 +
            ((C5384 - C5385 + C5386 - C5387) * C116 +
             (C5388 - C5389 + C5390 - C5391) * C47384) *
                C47479) *
               C47268) *
              C1284 +
          ((((C4729 - C4728 + C4731 - C4730) * C116 +
             (C4733 - C4732 + C4735 - C4734) * C47384) *
                C4577 +
            ((C4736 - C4737 + C4738 - C4739) * C116 +
             (C4740 - C4741 + C4742 - C4743) * C47384) *
                C47479) *
               C47430 +
           (((C5385 - C5384 + C5387 - C5386) * C116 +
             (C5389 - C5388 + C5391 - C5390) * C47384) *
                C4577 +
            ((C5822 - C5823 + C5824 - C5825) * C116 +
             (C5826 - C5827 + C5828 - C5829) * C47384) *
                C47479) *
               C47268) *
              C1285 +
          ((((C4737 - C4736 + C4739 - C4738) * C116 +
             (C4741 - C4740 + C4743 - C4742) * C47384) *
                C4577 +
            ((C5644 - C5645 + C5646 - C5647) * C116 +
             (C5648 - C5649 + C5650 - C5651) * C47384) *
                C47479) *
               C47430 +
           (((C5823 - C5822 + C5825 - C5824) * C116 +
             (C5827 - C5826 + C5829 - C5828) * C47384) *
                C4577 +
            ((C6316 - C6317 + C6318 - C6319) * C116 +
             (C6320 - C6321 + C6322 - C6323) * C47384) *
                C47479) *
               C47268) *
              C1286 +
          ((((C5645 - C5644 + C5647 - C5646) * C116 +
             (C5649 - C5648 + C5651 - C5650) * C47384) *
                C4577 +
            ((C5652 - C5653 + C5654 - C5655) * C116 +
             (C5656 - C5657 + C5658 - C5659) * C47384) *
                C47479) *
               C47430 +
           (((C6317 - C6316 + C6319 - C6318) * C116 +
             (C6321 - C6320 + C6323 - C6322) * C47384) *
                C4577 +
            ((C4575 * C6309 - C4579 * C6307 + C47448 * C6310 - C4580 * C6308) *
                 C116 +
             (C4575 * C6313 - C4579 * C6311 + C47448 * C6314 - C4580 * C6312) *
                 C47384) *
                C47479) *
               C47268) *
              C47471) *
         C47135) /
            (p * q * std::sqrt(p + q));
    d2ee[47] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C4575 * C124 - C4579 * C117 + C47448 * C125 - C4580 * C118) *
                 C116 +
             (C4575 * C138 - C4579 * C127 + C47448 * C139 - C4580 * C128) *
                 C47384) *
                C4577 +
            ((C4728 - C4729 + C4730 - C4731) * C116 +
             (C4732 - C4733 + C4734 - C4735) * C47384) *
                C47479) *
               C47181 * C47500 +
           (((C4729 - C4728 + C4731 - C4730) * C116 +
             (C4733 - C4732 + C4735 - C4734) * C47384) *
                C4577 +
            ((C4736 - C4737 + C4738 - C4739) * C116 +
             (C4740 - C4741 + C4742 - C4743) * C47384) *
                C47479) *
               C47181 * C47488 +
           (((C4737 - C4736 + C4739 - C4738) * C116 +
             (C4741 - C4740 + C4743 - C4742) * C47384) *
                C4577 +
            ((C4575 * C1022 - C4579 * C1016 + C47448 * C1023 - C4580 * C1017) *
                 C116 +
             (C4575 * C1034 - C4579 * C1025 + C47448 * C1035 - C4580 * C1026) *
                 C47384) *
                C47479) *
               C47181 * C47461) *
              C258 +
          ((((C4579 * C118 - C4575 * C125 + C4580 * C119 - C47448 * C126) *
                 C116 +
             (C4579 * C128 - C4575 * C139 + C4580 * C129 - C47448 * C140) *
                 C47384) *
                C4577 +
            ((C4744 - C4745 + C4746 - C4747) * C116 +
             (C4748 - C4749 + C4750 - C4751) * C47384) *
                C47479) *
               C47181 * C47500 +
           (((C4745 - C4744 + C4747 - C4746) * C116 +
             (C4749 - C4748 + C4751 - C4750) * C47384) *
                C4577 +
            ((C4752 - C4753 + C4754 - C4755) * C116 +
             (C4756 - C4757 + C4758 - C4759) * C47384) *
                C47479) *
               C47181 * C47488 +
           (((C4753 - C4752 + C4755 - C4754) * C116 +
             (C4757 - C4756 + C4759 - C4758) * C47384) *
                C4577 +
            ((C4579 * C1017 - C4575 * C1023 + C4580 * C1018 - C47448 * C1024) *
                 C116 +
             (C4579 * C1026 - C4575 * C1035 + C4580 * C1027 - C47448 * C1036) *
                 C47384) *
                C47479) *
               C47181 * C47461) *
              C259 +
          ((((C4575 * C126 - C4579 * C119 + C47448 * C130 - C4580 * C120) *
                 C116 +
             (C4575 * C140 - C4579 * C129 + C47448 * C141 - C4580 * C131) *
                 C47384) *
                C4577 +
            ((C4760 - C4761 + C4762 - C4763) * C116 +
             (C4764 - C4765 + C4766 - C4767) * C47384) *
                C47479) *
               C47181 * C47500 +
           (((C4761 - C4760 + C4763 - C4762) * C116 +
             (C4765 - C4764 + C4767 - C4766) * C47384) *
                C4577 +
            ((C4768 - C4769 + C4770 - C4771) * C116 +
             (C4772 - C4773 + C4774 - C4775) * C47384) *
                C47479) *
               C47181 * C47488 +
           (((C4769 - C4768 + C4771 - C4770) * C116 +
             (C4773 - C4772 + C4775 - C4774) * C47384) *
                C4577 +
            ((C4575 * C1024 - C4579 * C1018 + C47448 * C1291 - C4580 * C1290) *
                 C116 +
             (C4575 * C1036 - C4579 * C1027 + C47448 * C1293 - C4580 * C1292) *
                 C47384) *
                C47479) *
               C47181 * C47461) *
              C47455)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C4575 * C124 - C4579 * C117 + C47448 * C125 - C4580 * C118) *
                C116 +
            (C4575 * C138 - C4579 * C127 + C47448 * C139 - C4580 * C128) *
                C47384) *
               C4577 +
           ((C4575 * C271 - C4579 * C261 + C47448 * C272 - C4580 * C262) *
                C116 +
            (C4575 * C291 - C4579 * C274 + C47448 * C292 - C4580 * C275) *
                C47384) *
               C47479) *
              C47181 * C47163 * C108 +
          (((C4579 * C118 - C4575 * C125 + C4580 * C119 - C47448 * C126) *
                C116 +
            (C4579 * C128 - C4575 * C139 + C4580 * C129 - C47448 * C140) *
                C47384) *
               C4577 +
           ((C4579 * C262 - C4575 * C272 + C4580 * C263 - C47448 * C273) *
                C116 +
            (C4579 * C275 - C4575 * C292 + C4580 * C276 - C47448 * C293) *
                C47384) *
               C47479) *
              C47181 * C47163 * C109 +
          (((C4575 * C126 - C4579 * C119 + C47448 * C130 - C4580 * C120) *
                C116 +
            (C4575 * C140 - C4579 * C129 + C47448 * C141 - C4580 * C131) *
                C47384) *
               C4577 +
           ((C4575 * C273 - C4579 * C263 + C47448 * C283 - C4580 * C267) *
                C116 +
            (C4575 * C293 - C4579 * C276 + C47448 * C297 - C4580 * C284) *
                C47384) *
               C47479) *
              C47181 * C47163 * C110 +
          (((C4579 * C120 - C4575 * C130 + C4580 * C121 - C47448 * C132) *
                C116 +
            (C4579 * C131 - C4575 * C141 + C4580 * C133 - C47448 * C142) *
                C47384) *
               C4577 +
           ((C4579 * C267 - C4575 * C283 + C4580 * C269 - C47448 * C287) *
                C116 +
            (C4579 * C284 - C4575 * C297 + C4580 * C288 - C47448 * C299) *
                C47384) *
               C47479) *
              C47181 * C47163 * C111 +
          (((C4575 * C132 - C4579 * C121 + C47448 * C134 - C4580 * C122) *
                C116 +
            (C4575 * C142 - C4579 * C133 + C47448 * C143 - C4580 * C135) *
                C47384) *
               C4577 +
           ((C4575 * C287 - C4579 * C269 + C47448 * C559 - C4580 * C558) *
                C116 +
            (C4575 * C299 - C4579 * C288 + C47448 * C561 - C4580 * C560) *
                C47384) *
               C47479) *
              C47181 * C47163 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C4575 * C124 - C4579 * C117 + C47448 * C125 - C4580 * C118) *
                 C116 +
             (C4575 * C138 - C4579 * C127 + C47448 * C139 - C4580 * C128) *
                 C47384) *
                C4577 +
            ((C4728 - C4729 + C4730 - C4731) * C116 +
             (C4732 - C4733 + C4734 - C4735) * C47384) *
                C47479) *
               C47501 +
           (((C4579 * C414 - C4575 * C424 + C4580 * C415 - C47448 * C425) *
                 C116 +
             (C4579 * C427 - C4575 * C444 + C4580 * C428 - C47448 * C445) *
                 C47384) *
                C4577 +
            ((C4579 * C812 - C4575 * C817 + C4580 * C813 - C47448 * C818) *
                 C116 +
             (C4579 * C820 - C4575 * C827 + C4580 * C821 - C47448 * C828) *
                 C47384) *
                C47479) *
               C47490 +
           (((C4575 * C430 - C4579 * C417 + C47448 * C431 - C4580 * C418) *
                 C116 +
             (C4575 * C447 - C4579 * C433 + C47448 * C448 - C4580 * C434) *
                 C47384) *
                C4577 +
            ((C4575 * C1159 - C4579 * C1150 + C47448 * C1160 - C4580 * C1151) *
                 C116 +
             (C4575 * C1177 - C4579 * C1162 + C47448 * C1178 - C4580 * C1163) *
                 C47384) *
                C47479) *
               C47464) *
              C47163 * C258 +
          ((((C4579 * C118 - C4575 * C125 + C4580 * C119 - C47448 * C126) *
                 C116 +
             (C4579 * C128 - C4575 * C139 + C4580 * C129 - C47448 * C140) *
                 C47384) *
                C4577 +
            ((C4744 - C4745 + C4746 - C4747) * C116 +
             (C4748 - C4749 + C4750 - C4751) * C47384) *
                C47479) *
               C47501 +
           (((C4575 * C425 - C4579 * C415 + C47448 * C426 - C4580 * C416) *
                 C116 +
             (C4575 * C445 - C4579 * C428 + C47448 * C446 - C4580 * C429) *
                 C47384) *
                C4577 +
            ((C4575 * C818 - C4579 * C813 + C47448 * C819 - C4580 * C814) *
                 C116 +
             (C4575 * C828 - C4579 * C821 + C47448 * C829 - C4580 * C822) *
                 C47384) *
                C47479) *
               C47490 +
           (((C4579 * C418 - C4575 * C431 + C4580 * C419 - C47448 * C432) *
                 C116 +
             (C4579 * C434 - C4575 * C448 + C4580 * C435 - C47448 * C449) *
                 C47384) *
                C4577 +
            ((C4579 * C1151 - C4575 * C1160 + C4580 * C1152 - C47448 * C1161) *
                 C116 +
             (C4579 * C1163 - C4575 * C1178 + C4580 * C1164 - C47448 * C1179) *
                 C47384) *
                C47479) *
               C47464) *
              C47163 * C259 +
          ((((C4575 * C126 - C4579 * C119 + C47448 * C130 - C4580 * C120) *
                 C116 +
             (C4575 * C140 - C4579 * C129 + C47448 * C141 - C4580 * C131) *
                 C47384) *
                C4577 +
            ((C4760 - C4761 + C4762 - C4763) * C116 +
             (C4764 - C4765 + C4766 - C4767) * C47384) *
                C47479) *
               C47501 +
           (((C4579 * C416 - C4575 * C426 + C4580 * C420 - C47448 * C436) *
                 C116 +
             (C4579 * C429 - C4575 * C446 + C4580 * C437 - C47448 * C450) *
                 C47384) *
                C4577 +
            ((C4579 * C814 - C4575 * C819 + C4580 * C815 - C47448 * C823) *
                 C116 +
             (C4579 * C822 - C4575 * C829 + C4580 * C824 - C47448 * C830) *
                 C47384) *
                C47479) *
               C47490 +
           (((C4575 * C432 - C4579 * C419 + C47448 * C438 - C4580 * C421) *
                 C116 +
             (C4575 * C449 - C4579 * C435 + C47448 * C451 - C4580 * C439) *
                 C47384) *
                C4577 +
            ((C4575 * C1161 - C4579 * C1152 + C47448 * C2015 - C4580 * C2014) *
                 C116 +
             (C4575 * C1179 - C4579 * C1164 + C47448 * C2017 - C4580 * C2016) *
                 C47384) *
                C47479) *
               C47464) *
              C47163 * C47455)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C4575 * C124 - C4579 * C117 + C47448 * C125 - C4580 * C118) *
                 C116 +
             (C4575 * C138 - C4579 * C127 + C47448 * C139 - C4580 * C128) *
                 C47384) *
                C4577 +
            ((C4728 - C4729 + C4730 - C4731) * C116 +
             (C4732 - C4733 + C4734 - C4735) * C47384) *
                C47479) *
               C47181 * C942 +
           (((C4729 - C4728 + C4731 - C4730) * C116 +
             (C4733 - C4732 + C4735 - C4734) * C47384) *
                C4577 +
            ((C4736 - C4737 + C4738 - C4739) * C116 +
             (C4740 - C4741 + C4742 - C4743) * C47384) *
                C47479) *
               C47181 * C943 +
           (((C4737 - C4736 + C4739 - C4738) * C116 +
             (C4741 - C4740 + C4743 - C4742) * C47384) *
                C4577 +
            ((C4575 * C1022 - C4579 * C1016 + C47448 * C1023 - C4580 * C1017) *
                 C116 +
             (C4575 * C1034 - C4579 * C1025 + C47448 * C1035 - C4580 * C1026) *
                 C47384) *
                C47479) *
               C47181 * C47461) *
              C47497 +
          ((((C4579 * C118 - C4575 * C125 + C4580 * C119 - C47448 * C126) *
                 C116 +
             (C4579 * C128 - C4575 * C139 + C4580 * C129 - C47448 * C140) *
                 C47384) *
                C4577 +
            ((C4744 - C4745 + C4746 - C4747) * C116 +
             (C4748 - C4749 + C4750 - C4751) * C47384) *
                C47479) *
               C47181 * C942 +
           (((C4745 - C4744 + C4747 - C4746) * C116 +
             (C4749 - C4748 + C4751 - C4750) * C47384) *
                C4577 +
            ((C4752 - C4753 + C4754 - C4755) * C116 +
             (C4756 - C4757 + C4758 - C4759) * C47384) *
                C47479) *
               C47181 * C943 +
           (((C4753 - C4752 + C4755 - C4754) * C116 +
             (C4757 - C4756 + C4759 - C4758) * C47384) *
                C4577 +
            ((C4579 * C1017 - C4575 * C1023 + C4580 * C1018 - C47448 * C1024) *
                 C116 +
             (C4579 * C1026 - C4575 * C1035 + C4580 * C1027 - C47448 * C1036) *
                 C47384) *
                C47479) *
               C47181 * C47461) *
              C47484 +
          ((((C4575 * C126 - C4579 * C119 + C47448 * C130 - C4580 * C120) *
                 C116 +
             (C4575 * C140 - C4579 * C129 + C47448 * C141 - C4580 * C131) *
                 C47384) *
                C4577 +
            ((C4760 - C4761 + C4762 - C4763) * C116 +
             (C4764 - C4765 + C4766 - C4767) * C47384) *
                C47479) *
               C47181 * C942 +
           (((C4761 - C4760 + C4763 - C4762) * C116 +
             (C4765 - C4764 + C4767 - C4766) * C47384) *
                C4577 +
            ((C4768 - C4769 + C4770 - C4771) * C116 +
             (C4772 - C4773 + C4774 - C4775) * C47384) *
                C47479) *
               C47181 * C943 +
           (((C4769 - C4768 + C4771 - C4770) * C116 +
             (C4773 - C4772 + C4775 - C4774) * C47384) *
                C4577 +
            ((C4575 * C1024 - C4579 * C1018 + C47448 * C1291 - C4580 * C1290) *
                 C116 +
             (C4575 * C1036 - C4579 * C1027 + C47448 * C1293 - C4580 * C1292) *
                 C47384) *
                C47479) *
               C47181 * C47461) *
              C47455)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C4575 * C124 - C4579 * C117 + C47448 * C125 - C4580 * C118) *
                C116 +
            (C4575 * C138 - C4579 * C127 + C47448 * C139 - C4580 * C128) *
                C47384) *
               C4577 +
           ((C4728 - C4729 + C4730 - C4731) * C116 +
            (C4732 - C4733 + C4734 - C4735) * C47384) *
               C47479) *
              C47181 * C1010 +
          (((C4729 - C4728 + C4731 - C4730) * C116 +
            (C4733 - C4732 + C4735 - C4734) * C47384) *
               C4577 +
           ((C4736 - C4737 + C4738 - C4739) * C116 +
            (C4740 - C4741 + C4742 - C4743) * C47384) *
               C47479) *
              C47181 * C1011 +
          (((C4737 - C4736 + C4739 - C4738) * C116 +
            (C4741 - C4740 + C4743 - C4742) * C47384) *
               C4577 +
           ((C5644 - C5645 + C5646 - C5647) * C116 +
            (C5648 - C5649 + C5650 - C5651) * C47384) *
               C47479) *
              C47181 * C1012 +
          (((C5645 - C5644 + C5647 - C5646) * C116 +
            (C5649 - C5648 + C5651 - C5650) * C47384) *
               C4577 +
           ((C5652 - C5653 + C5654 - C5655) * C116 +
            (C5656 - C5657 + C5658 - C5659) * C47384) *
               C47479) *
              C47181 * C1013 +
          (((C5653 - C5652 + C5655 - C5654) * C116 +
            (C5657 - C5656 + C5659 - C5658) * C47384) *
               C4577 +
           ((C4575 * C5637 - C4579 * C5635 + C47448 * C5638 - C4580 * C5636) *
                C116 +
            (C4575 * C5641 - C4579 * C5639 + C47448 * C5642 - C4580 * C5640) *
                C47384) *
               C47479) *
              C47181 * C1014) *
         C47135) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C4575 * C124 - C4579 * C117 + C47448 * C125 - C4580 * C118) *
                 C116 +
             (C4575 * C138 - C4579 * C127 + C47448 * C139 - C4580 * C128) *
                 C47384) *
                C4577 +
            ((C4728 - C4729 + C4730 - C4731) * C116 +
             (C4732 - C4733 + C4734 - C4735) * C47384) *
                C47479) *
               C47501 +
           (((C4579 * C414 - C4575 * C424 + C4580 * C415 - C47448 * C425) *
                 C116 +
             (C4579 * C427 - C4575 * C444 + C4580 * C428 - C47448 * C445) *
                 C47384) *
                C4577 +
            ((C5384 - C5385 + C5386 - C5387) * C116 +
             (C5388 - C5389 + C5390 - C5391) * C47384) *
                C47479) *
               C47490 +
           (((C4575 * C430 - C4579 * C417 + C47448 * C431 - C4580 * C418) *
                 C116 +
             (C4575 * C447 - C4579 * C433 + C47448 * C448 - C4580 * C434) *
                 C47384) *
                C4577 +
            ((C5814 - C5815 + C5816 - C5817) * C116 +
             (C5818 - C5819 + C5820 - C5821) * C47384) *
                C47479) *
               C47464) *
              C942 +
          ((((C4729 - C4728 + C4731 - C4730) * C116 +
             (C4733 - C4732 + C4735 - C4734) * C47384) *
                C4577 +
            ((C4736 - C4737 + C4738 - C4739) * C116 +
             (C4740 - C4741 + C4742 - C4743) * C47384) *
                C47479) *
               C47501 +
           (((C5385 - C5384 + C5387 - C5386) * C116 +
             (C5389 - C5388 + C5391 - C5390) * C47384) *
                C4577 +
            ((C5822 - C5823 + C5824 - C5825) * C116 +
             (C5826 - C5827 + C5828 - C5829) * C47384) *
                C47479) *
               C47490 +
           (((C5815 - C5814 + C5817 - C5816) * C116 +
             (C5819 - C5818 + C5821 - C5820) * C47384) *
                C4577 +
            ((C5830 - C5831 + C5832 - C5833) * C116 +
             (C5834 - C5835 + C5836 - C5837) * C47384) *
                C47479) *
               C47464) *
              C943 +
          ((((C4737 - C4736 + C4739 - C4738) * C116 +
             (C4741 - C4740 + C4743 - C4742) * C47384) *
                C4577 +
            ((C5644 - C5645 + C5646 - C5647) * C116 +
             (C5648 - C5649 + C5650 - C5651) * C47384) *
                C47479) *
               C47501 +
           (((C5823 - C5822 + C5825 - C5824) * C116 +
             (C5827 - C5826 + C5829 - C5828) * C47384) *
                C4577 +
            ((C4579 * C1542 - C4575 * C1545 + C4580 * C1543 - C47448 * C1546) *
                 C116 +
             (C4579 * C1548 - C4575 * C1551 + C4580 * C1549 - C47448 * C1552) *
                 C47384) *
                C47479) *
               C47490 +
           (((C5831 - C5830 + C5833 - C5832) * C116 +
             (C5835 - C5834 + C5837 - C5836) * C47384) *
                C4577 +
            ((C4575 * C5807 - C4579 * C5805 + C47448 * C5808 - C4580 * C5806) *
                 C116 +
             (C4575 * C5811 - C4579 * C5809 + C47448 * C5812 - C4580 * C5810) *
                 C47384) *
                C47479) *
               C47464) *
              C47461) *
         C47135) /
            (p * q * std::sqrt(p + q));
    d2ee[48] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C4575 * C124 - C4579 * C117 + C47448 * C125 - C4580 * C118) *
                 C116 +
             (C4575 * C138 - C4579 * C127 + C47448 * C139 - C4580 * C128) *
                 C47384) *
                C4577 +
            ((C4728 - C4729 + C4730 - C4731) * C116 +
             (C4732 - C4733 + C4734 - C4735) * C47384) *
                C47479) *
               C47430 +
           (((C4579 * C414 - C4575 * C424 + C4580 * C415 - C47448 * C425) *
                 C116 +
             (C4579 * C427 - C4575 * C444 + C4580 * C428 - C47448 * C445) *
                 C47384) *
                C4577 +
            ((C4579 * C812 - C4575 * C817 + C4580 * C813 - C47448 * C818) *
                 C116 +
             (C4579 * C820 - C4575 * C827 + C4580 * C821 - C47448 * C828) *
                 C47384) *
                C47479) *
               C47268) *
              C47163 * C554 +
          ((((C4579 * C118 - C4575 * C125 + C4580 * C119 - C47448 * C126) *
                 C116 +
             (C4579 * C128 - C4575 * C139 + C4580 * C129 - C47448 * C140) *
                 C47384) *
                C4577 +
            ((C4744 - C4745 + C4746 - C4747) * C116 +
             (C4748 - C4749 + C4750 - C4751) * C47384) *
                C47479) *
               C47430 +
           (((C4575 * C425 - C4579 * C415 + C47448 * C426 - C4580 * C416) *
                 C116 +
             (C4575 * C445 - C4579 * C428 + C47448 * C446 - C4580 * C429) *
                 C47384) *
                C4577 +
            ((C4575 * C818 - C4579 * C813 + C47448 * C819 - C4580 * C814) *
                 C116 +
             (C4575 * C828 - C4579 * C821 + C47448 * C829 - C4580 * C822) *
                 C47384) *
                C47479) *
               C47268) *
              C47163 * C555 +
          ((((C4575 * C126 - C4579 * C119 + C47448 * C130 - C4580 * C120) *
                 C116 +
             (C4575 * C140 - C4579 * C129 + C47448 * C141 - C4580 * C131) *
                 C47384) *
                C4577 +
            ((C4760 - C4761 + C4762 - C4763) * C116 +
             (C4764 - C4765 + C4766 - C4767) * C47384) *
                C47479) *
               C47430 +
           (((C4579 * C416 - C4575 * C426 + C4580 * C420 - C47448 * C436) *
                 C116 +
             (C4579 * C429 - C4575 * C446 + C4580 * C437 - C47448 * C450) *
                 C47384) *
                C4577 +
            ((C4579 * C814 - C4575 * C819 + C4580 * C815 - C47448 * C823) *
                 C116 +
             (C4579 * C822 - C4575 * C829 + C4580 * C824 - C47448 * C830) *
                 C47384) *
                C47479) *
               C47268) *
              C47163 * C556 +
          ((((C4579 * C120 - C4575 * C130 + C4580 * C121 - C47448 * C132) *
                 C116 +
             (C4579 * C131 - C4575 * C141 + C4580 * C133 - C47448 * C142) *
                 C47384) *
                C4577 +
            ((C5052 - C5053 + C5054 - C5055) * C116 +
             (C5056 - C5057 + C5058 - C5059) * C47384) *
                C47479) *
               C47430 +
           (((C4575 * C436 - C4579 * C420 + C47448 * C440 - C4580 * C422) *
                 C116 +
             (C4575 * C450 - C4579 * C437 + C47448 * C452 - C4580 * C441) *
                 C47384) *
                C4577 +
            ((C4575 * C823 - C4579 * C815 + C47448 * C825 - C4580 * C816) *
                 C116 +
             (C4575 * C830 - C4579 * C824 + C47448 * C831 - C4580 * C826) *
                 C47384) *
                C47479) *
               C47268) *
              C47163 * C47465)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C4575 * C124 - C4579 * C117 + C47448 * C125 - C4580 * C118) *
                  C116 +
              (C4575 * C138 - C4579 * C127 + C47448 * C139 - C4580 * C128) *
                  C47384) *
                 C4577 +
             ((C4728 - C4729 + C4730 - C4731) * C116 +
              (C4732 - C4733 + C4734 - C4735) * C47384) *
                 C47479) *
                C47430 +
            (((C4579 * C414 - C4575 * C424 + C4580 * C415 - C47448 * C425) *
                  C116 +
              (C4579 * C427 - C4575 * C444 + C4580 * C428 - C47448 * C445) *
                  C47384) *
                 C4577 +
             ((C5384 - C5385 + C5386 - C5387) * C116 +
              (C5388 - C5389 + C5390 - C5391) * C47384) *
                 C47479) *
                C47268) *
               C942 +
           ((((C4729 - C4728 + C4731 - C4730) * C116 +
              (C4733 - C4732 + C4735 - C4734) * C47384) *
                 C4577 +
             ((C4736 - C4737 + C4738 - C4739) * C116 +
              (C4740 - C4741 + C4742 - C4743) * C47384) *
                 C47479) *
                C47430 +
            (((C5385 - C5384 + C5387 - C5386) * C116 +
              (C5389 - C5388 + C5391 - C5390) * C47384) *
                 C4577 +
             ((C5822 - C5823 + C5824 - C5825) * C116 +
              (C5826 - C5827 + C5828 - C5829) * C47384) *
                 C47479) *
                C47268) *
               C943 +
           ((((C4737 - C4736 + C4739 - C4738) * C116 +
              (C4741 - C4740 + C4743 - C4742) * C47384) *
                 C4577 +
             ((C5644 - C5645 + C5646 - C5647) * C116 +
              (C5648 - C5649 + C5650 - C5651) * C47384) *
                 C47479) *
                C47430 +
            (((C5823 - C5822 + C5825 - C5824) * C116 +
              (C5827 - C5826 + C5829 - C5828) * C47384) *
                 C4577 +
             ((C4579 * C1542 - C4575 * C1545 + C4580 * C1543 - C47448 * C1546) *
                  C116 +
              (C4579 * C1548 - C4575 * C1551 + C4580 * C1549 - C47448 * C1552) *
                  C47384) *
                 C47479) *
                C47268) *
               C47461) *
              C47415 +
          (((((C4579 * C118 - C4575 * C125 + C4580 * C119 - C47448 * C126) *
                  C116 +
              (C4579 * C128 - C4575 * C139 + C4580 * C129 - C47448 * C140) *
                  C47384) *
                 C4577 +
             ((C4744 - C4745 + C4746 - C4747) * C116 +
              (C4748 - C4749 + C4750 - C4751) * C47384) *
                 C47479) *
                C47430 +
            (((C4575 * C425 - C4579 * C415 + C47448 * C426 - C4580 * C416) *
                  C116 +
              (C4575 * C445 - C4579 * C428 + C47448 * C446 - C4580 * C429) *
                  C47384) *
                 C4577 +
             ((C5392 - C5393 + C5394 - C5395) * C116 +
              (C5396 - C5397 + C5398 - C5399) * C47384) *
                 C47479) *
                C47268) *
               C942 +
           ((((C4745 - C4744 + C4747 - C4746) * C116 +
              (C4749 - C4748 + C4751 - C4750) * C47384) *
                 C4577 +
             ((C4752 - C4753 + C4754 - C4755) * C116 +
              (C4756 - C4757 + C4758 - C4759) * C47384) *
                 C47479) *
                C47430 +
            (((C5393 - C5392 + C5395 - C5394) * C116 +
              (C5397 - C5396 + C5399 - C5398) * C47384) *
                 C4577 +
             ((C6170 - C6171 + C6172 - C6173) * C116 +
              (C6174 - C6175 + C6176 - C6177) * C47384) *
                 C47479) *
                C47268) *
               C943 +
           ((((C4753 - C4752 + C4755 - C4754) * C116 +
              (C4757 - C4756 + C4759 - C4758) * C47384) *
                 C4577 +
             ((C5968 - C5969 + C5970 - C5971) * C116 +
              (C5972 - C5973 + C5974 - C5975) * C47384) *
                 C47479) *
                C47430 +
            (((C6171 - C6170 + C6173 - C6172) * C116 +
              (C6175 - C6174 + C6177 - C6176) * C47384) *
                 C4577 +
             ((C4575 * C1546 - C4579 * C1543 + C47448 * C1547 - C4580 * C1544) *
                  C116 +
              (C4575 * C1552 - C4579 * C1549 + C47448 * C1553 - C4580 * C1550) *
                  C47384) *
                 C47479) *
                C47268) *
               C47461) *
              C47146)) /
            (p * q * std::sqrt(p + q));
    d2ee[49] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C4575 * C124 - C4579 * C117 + C47448 * C125 - C4580 * C118) *
                C116 +
            (C4575 * C138 - C4579 * C127 + C47448 * C139 - C4580 * C128) *
                C47384) *
               C4577 +
           ((C4575 * C271 - C4579 * C261 + C47448 * C272 - C4580 * C262) *
                C116 +
            (C4575 * C291 - C4579 * C274 + C47448 * C292 - C4580 * C275) *
                C47384) *
               C47479) *
              C47181 * C47163 * C108 +
          (((C4579 * C118 - C4575 * C125 + C4580 * C119 - C47448 * C126) *
                C116 +
            (C4579 * C128 - C4575 * C139 + C4580 * C129 - C47448 * C140) *
                C47384) *
               C4577 +
           ((C4579 * C262 - C4575 * C272 + C4580 * C263 - C47448 * C273) *
                C116 +
            (C4579 * C275 - C4575 * C292 + C4580 * C276 - C47448 * C293) *
                C47384) *
               C47479) *
              C47181 * C47163 * C109 +
          (((C4575 * C126 - C4579 * C119 + C47448 * C130 - C4580 * C120) *
                C116 +
            (C4575 * C140 - C4579 * C129 + C47448 * C141 - C4580 * C131) *
                C47384) *
               C4577 +
           ((C4575 * C273 - C4579 * C263 + C47448 * C283 - C4580 * C267) *
                C116 +
            (C4575 * C293 - C4579 * C276 + C47448 * C297 - C4580 * C284) *
                C47384) *
               C47479) *
              C47181 * C47163 * C110 +
          (((C4579 * C120 - C4575 * C130 + C4580 * C121 - C47448 * C132) *
                C116 +
            (C4579 * C131 - C4575 * C141 + C4580 * C133 - C47448 * C142) *
                C47384) *
               C4577 +
           ((C4579 * C267 - C4575 * C283 + C4580 * C269 - C47448 * C287) *
                C116 +
            (C4579 * C284 - C4575 * C297 + C4580 * C288 - C47448 * C299) *
                C47384) *
               C47479) *
              C47181 * C47163 * C111 +
          (((C4575 * C132 - C4579 * C121 + C47448 * C134 - C4580 * C122) *
                C116 +
            (C4575 * C142 - C4579 * C133 + C47448 * C143 - C4580 * C135) *
                C47384) *
               C4577 +
           ((C4575 * C287 - C4579 * C269 + C47448 * C559 - C4580 * C558) *
                C116 +
            (C4575 * C299 - C4579 * C288 + C47448 * C561 - C4580 * C560) *
                C47384) *
               C47479) *
              C47181 * C47163 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C4575 * C124 - C4579 * C117 + C47448 * C125 - C4580 * C118) *
                 C116 +
             (C4575 * C138 - C4579 * C127 + C47448 * C139 - C4580 * C128) *
                 C47384) *
                C4577 +
            ((C4728 - C4729 + C4730 - C4731) * C116 +
             (C4732 - C4733 + C4734 - C4735) * C47384) *
                C47479) *
               C47181 * C47500 +
           (((C4729 - C4728 + C4731 - C4730) * C116 +
             (C4733 - C4732 + C4735 - C4734) * C47384) *
                C4577 +
            ((C4736 - C4737 + C4738 - C4739) * C116 +
             (C4740 - C4741 + C4742 - C4743) * C47384) *
                C47479) *
               C47181 * C47488 +
           (((C4737 - C4736 + C4739 - C4738) * C116 +
             (C4741 - C4740 + C4743 - C4742) * C47384) *
                C4577 +
            ((C4575 * C1022 - C4579 * C1016 + C47448 * C1023 - C4580 * C1017) *
                 C116 +
             (C4575 * C1034 - C4579 * C1025 + C47448 * C1035 - C4580 * C1026) *
                 C47384) *
                C47479) *
               C47181 * C47461) *
              C258 +
          ((((C4579 * C118 - C4575 * C125 + C4580 * C119 - C47448 * C126) *
                 C116 +
             (C4579 * C128 - C4575 * C139 + C4580 * C129 - C47448 * C140) *
                 C47384) *
                C4577 +
            ((C4744 - C4745 + C4746 - C4747) * C116 +
             (C4748 - C4749 + C4750 - C4751) * C47384) *
                C47479) *
               C47181 * C47500 +
           (((C4745 - C4744 + C4747 - C4746) * C116 +
             (C4749 - C4748 + C4751 - C4750) * C47384) *
                C4577 +
            ((C4752 - C4753 + C4754 - C4755) * C116 +
             (C4756 - C4757 + C4758 - C4759) * C47384) *
                C47479) *
               C47181 * C47488 +
           (((C4753 - C4752 + C4755 - C4754) * C116 +
             (C4757 - C4756 + C4759 - C4758) * C47384) *
                C4577 +
            ((C4579 * C1017 - C4575 * C1023 + C4580 * C1018 - C47448 * C1024) *
                 C116 +
             (C4579 * C1026 - C4575 * C1035 + C4580 * C1027 - C47448 * C1036) *
                 C47384) *
                C47479) *
               C47181 * C47461) *
              C259 +
          ((((C4575 * C126 - C4579 * C119 + C47448 * C130 - C4580 * C120) *
                 C116 +
             (C4575 * C140 - C4579 * C129 + C47448 * C141 - C4580 * C131) *
                 C47384) *
                C4577 +
            ((C4760 - C4761 + C4762 - C4763) * C116 +
             (C4764 - C4765 + C4766 - C4767) * C47384) *
                C47479) *
               C47181 * C47500 +
           (((C4761 - C4760 + C4763 - C4762) * C116 +
             (C4765 - C4764 + C4767 - C4766) * C47384) *
                C4577 +
            ((C4768 - C4769 + C4770 - C4771) * C116 +
             (C4772 - C4773 + C4774 - C4775) * C47384) *
                C47479) *
               C47181 * C47488 +
           (((C4769 - C4768 + C4771 - C4770) * C116 +
             (C4773 - C4772 + C4775 - C4774) * C47384) *
                C4577 +
            ((C4575 * C1024 - C4579 * C1018 + C47448 * C1291 - C4580 * C1290) *
                 C116 +
             (C4575 * C1036 - C4579 * C1027 + C47448 * C1293 - C4580 * C1292) *
                 C47384) *
                C47479) *
               C47181 * C47461) *
              C47455)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C4575 * C124 - C4579 * C117 + C47448 * C125 - C4580 * C118) *
                 C116 +
             (C4575 * C138 - C4579 * C127 + C47448 * C139 - C4580 * C128) *
                 C47384) *
                C4577 +
            ((C4728 - C4729 + C4730 - C4731) * C116 +
             (C4732 - C4733 + C4734 - C4735) * C47384) *
                C47479) *
               C47181 * C942 +
           (((C4729 - C4728 + C4731 - C4730) * C116 +
             (C4733 - C4732 + C4735 - C4734) * C47384) *
                C4577 +
            ((C4736 - C4737 + C4738 - C4739) * C116 +
             (C4740 - C4741 + C4742 - C4743) * C47384) *
                C47479) *
               C47181 * C943 +
           (((C4737 - C4736 + C4739 - C4738) * C116 +
             (C4741 - C4740 + C4743 - C4742) * C47384) *
                C4577 +
            ((C4575 * C1022 - C4579 * C1016 + C47448 * C1023 - C4580 * C1017) *
                 C116 +
             (C4575 * C1034 - C4579 * C1025 + C47448 * C1035 - C4580 * C1026) *
                 C47384) *
                C47479) *
               C47181 * C47461) *
              C47497 +
          ((((C4579 * C118 - C4575 * C125 + C4580 * C119 - C47448 * C126) *
                 C116 +
             (C4579 * C128 - C4575 * C139 + C4580 * C129 - C47448 * C140) *
                 C47384) *
                C4577 +
            ((C4744 - C4745 + C4746 - C4747) * C116 +
             (C4748 - C4749 + C4750 - C4751) * C47384) *
                C47479) *
               C47181 * C942 +
           (((C4745 - C4744 + C4747 - C4746) * C116 +
             (C4749 - C4748 + C4751 - C4750) * C47384) *
                C4577 +
            ((C4752 - C4753 + C4754 - C4755) * C116 +
             (C4756 - C4757 + C4758 - C4759) * C47384) *
                C47479) *
               C47181 * C943 +
           (((C4753 - C4752 + C4755 - C4754) * C116 +
             (C4757 - C4756 + C4759 - C4758) * C47384) *
                C4577 +
            ((C4579 * C1017 - C4575 * C1023 + C4580 * C1018 - C47448 * C1024) *
                 C116 +
             (C4579 * C1026 - C4575 * C1035 + C4580 * C1027 - C47448 * C1036) *
                 C47384) *
                C47479) *
               C47181 * C47461) *
              C47484 +
          ((((C4575 * C126 - C4579 * C119 + C47448 * C130 - C4580 * C120) *
                 C116 +
             (C4575 * C140 - C4579 * C129 + C47448 * C141 - C4580 * C131) *
                 C47384) *
                C4577 +
            ((C4760 - C4761 + C4762 - C4763) * C116 +
             (C4764 - C4765 + C4766 - C4767) * C47384) *
                C47479) *
               C47181 * C942 +
           (((C4761 - C4760 + C4763 - C4762) * C116 +
             (C4765 - C4764 + C4767 - C4766) * C47384) *
                C4577 +
            ((C4768 - C4769 + C4770 - C4771) * C116 +
             (C4772 - C4773 + C4774 - C4775) * C47384) *
                C47479) *
               C47181 * C943 +
           (((C4769 - C4768 + C4771 - C4770) * C116 +
             (C4773 - C4772 + C4775 - C4774) * C47384) *
                C4577 +
            ((C4575 * C1024 - C4579 * C1018 + C47448 * C1291 - C4580 * C1290) *
                 C116 +
             (C4575 * C1036 - C4579 * C1027 + C47448 * C1293 - C4580 * C1292) *
                 C47384) *
                C47479) *
               C47181 * C47461) *
              C47455)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C4575 * C124 - C4579 * C117 + C47448 * C125 - C4580 * C118) *
                C116 +
            (C4575 * C138 - C4579 * C127 + C47448 * C139 - C4580 * C128) *
                C47384) *
               C4577 +
           ((C4728 - C4729 + C4730 - C4731) * C116 +
            (C4732 - C4733 + C4734 - C4735) * C47384) *
               C47479) *
              C47181 * C1010 +
          (((C4729 - C4728 + C4731 - C4730) * C116 +
            (C4733 - C4732 + C4735 - C4734) * C47384) *
               C4577 +
           ((C4736 - C4737 + C4738 - C4739) * C116 +
            (C4740 - C4741 + C4742 - C4743) * C47384) *
               C47479) *
              C47181 * C1011 +
          (((C4737 - C4736 + C4739 - C4738) * C116 +
            (C4741 - C4740 + C4743 - C4742) * C47384) *
               C4577 +
           ((C5644 - C5645 + C5646 - C5647) * C116 +
            (C5648 - C5649 + C5650 - C5651) * C47384) *
               C47479) *
              C47181 * C1012 +
          (((C5645 - C5644 + C5647 - C5646) * C116 +
            (C5649 - C5648 + C5651 - C5650) * C47384) *
               C4577 +
           ((C5652 - C5653 + C5654 - C5655) * C116 +
            (C5656 - C5657 + C5658 - C5659) * C47384) *
               C47479) *
              C47181 * C1013 +
          (((C5653 - C5652 + C5655 - C5654) * C116 +
            (C5657 - C5656 + C5659 - C5658) * C47384) *
               C4577 +
           ((C4575 * C5637 - C4579 * C5635 + C47448 * C5638 - C4580 * C5636) *
                C116 +
            (C4575 * C5641 - C4579 * C5639 + C47448 * C5642 - C4580 * C5640) *
                C47384) *
               C47479) *
              C47181 * C1014) *
         C47135) /
            (p * q * std::sqrt(p + q));
    d2ee[50] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C4575 * C124 - C4579 * C117 + C47448 * C125 - C4580 * C118) *
                C10231 +
            (C4575 * C138 - C4579 * C127 + C47448 * C139 - C4580 * C128) *
                C10229 +
            (C10526 - C10527 + C10528 - C10529) * C10232 +
            (C10530 - C10531 + C10532 - C10533) * C47481) *
               C47369 * C47181 * C47222 +
           ((C4729 - C4728 + C4731 - C4730) * C10231 +
            (C4733 - C4732 + C4735 - C4734) * C10229 +
            (C5384 - C5385 + C5386 - C5387) * C10232 +
            (C5388 - C5389 + C5390 - C5391) * C47481) *
               C47369 * C47181 * C47229 +
           ((C4737 - C4736 + C4739 - C4738) * C10231 +
            (C4741 - C4740 + C4743 - C4742) * C10229 +
            (C5822 - C5823 + C5824 - C5825) * C10232 +
            (C5826 - C5827 + C5828 - C5829) * C47481) *
               C47369 * C47181 * C2700) *
              C47140 +
          (((C4579 * C118 - C4575 * C125 + C4580 * C119 - C47448 * C126) *
                C10231 +
            (C4579 * C128 - C4575 * C139 + C4580 * C129 - C47448 * C140) *
                C10229 +
            (C10542 - C10543 + C10544 - C10545) * C10232 +
            (C10546 - C10547 + C10548 - C10549) * C47481) *
               C47369 * C47181 * C47222 +
           ((C4745 - C4744 + C4747 - C4746) * C10231 +
            (C4749 - C4748 + C4751 - C4750) * C10229 +
            (C5392 - C5393 + C5394 - C5395) * C10232 +
            (C5396 - C5397 + C5398 - C5399) * C47481) *
               C47369 * C47181 * C47229 +
           ((C4753 - C4752 + C4755 - C4754) * C10231 +
            (C4757 - C4756 + C4759 - C4758) * C10229 +
            (C6170 - C6171 + C6172 - C6173) * C10232 +
            (C6174 - C6175 + C6176 - C6177) * C47481) *
               C47369 * C47181 * C2700) *
              C47149 +
          (((C4575 * C126 - C4579 * C119 + C47448 * C130 - C4580 * C120) *
                C10231 +
            (C4575 * C140 - C4579 * C129 + C47448 * C141 - C4580 * C131) *
                C10229 +
            (C10558 - C10559 + C10560 - C10561) * C10232 +
            (C10562 - C10563 + C10564 - C10565) * C47481) *
               C47369 * C47181 * C47222 +
           ((C4761 - C4760 + C4763 - C4762) * C10231 +
            (C4765 - C4764 + C4767 - C4766) * C10229 +
            (C5400 - C5401 + C5402 - C5403) * C10232 +
            (C5404 - C5405 + C5406 - C5407) * C47481) *
               C47369 * C47181 * C47229 +
           ((C4769 - C4768 + C4771 - C4770) * C10231 +
            (C4773 - C4772 + C4775 - C4774) * C10229 +
            (C4575 * C1167 - C4579 * C1155 + C47448 * C1441 - C4580 * C1440) *
                C10232 +
            (C4575 * C1182 - C4579 * C1170 + C47448 * C1443 - C4580 * C1442) *
                C47481) *
               C47369 * C47181 * C2700) *
              C2703)) /
        (p * q * std::sqrt(p + q));
    d2ee[51] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C4575 * C124 - C4579 * C117 + C47448 * C125 - C4580 * C118) *
                 C10231 +
             (C4575 * C138 - C4579 * C127 + C47448 * C139 - C4580 * C128) *
                 C10229 +
             (C10526 - C10527 + C10528 - C10529) * C10232 +
             (C10530 - C10531 + C10532 - C10533) * C47481) *
                C47369 * C47430 +
            ((C10527 - C10526 + C10529 - C10528) * C10231 +
             (C10531 - C10530 + C10533 - C10532) * C10229 +
             (C10534 - C10535 + C10536 - C10537) * C10232 +
             (C10538 - C10539 + C10540 - C10541) * C47481) *
                C47369 * C47268) *
               C47222 +
           (((C4729 - C4728 + C4731 - C4730) * C10231 +
             (C4733 - C4732 + C4735 - C4734) * C10229 +
             (C5384 - C5385 + C5386 - C5387) * C10232 +
             (C5388 - C5389 + C5390 - C5391) * C47481) *
                C47369 * C47430 +
            ((C5385 - C5384 + C5387 - C5386) * C10231 +
             (C5389 - C5388 + C5391 - C5390) * C10229 +
             (C5814 - C5815 + C5816 - C5817) * C10232 +
             (C5818 - C5819 + C5820 - C5821) * C47481) *
                C47369 * C47268) *
               C47229 +
           (((C4737 - C4736 + C4739 - C4738) * C10231 +
             (C4741 - C4740 + C4743 - C4742) * C10229 +
             (C5822 - C5823 + C5824 - C5825) * C10232 +
             (C5826 - C5827 + C5828 - C5829) * C47481) *
                C47369 * C47430 +
            ((C5823 - C5822 + C5825 - C5824) * C10231 +
             (C5827 - C5826 + C5829 - C5828) * C10229 +
             (C5830 - C5831 + C5832 - C5833) * C10232 +
             (C5834 - C5835 + C5836 - C5837) * C47481) *
                C47369 * C47268) *
               C2700) *
              C2440 +
          ((((C4579 * C118 - C4575 * C125 + C4580 * C119 - C47448 * C126) *
                 C10231 +
             (C4579 * C128 - C4575 * C139 + C4580 * C129 - C47448 * C140) *
                 C10229 +
             (C10542 - C10543 + C10544 - C10545) * C10232 +
             (C10546 - C10547 + C10548 - C10549) * C47481) *
                C47369 * C47430 +
            ((C10543 - C10542 + C10545 - C10544) * C10231 +
             (C10547 - C10546 + C10549 - C10548) * C10229 +
             (C10550 - C10551 + C10552 - C10553) * C10232 +
             (C10554 - C10555 + C10556 - C10557) * C47481) *
                C47369 * C47268) *
               C47222 +
           (((C4745 - C4744 + C4747 - C4746) * C10231 +
             (C4749 - C4748 + C4751 - C4750) * C10229 +
             (C5392 - C5393 + C5394 - C5395) * C10232 +
             (C5396 - C5397 + C5398 - C5399) * C47481) *
                C47369 * C47430 +
            ((C5393 - C5392 + C5395 - C5394) * C10231 +
             (C5397 - C5396 + C5399 - C5398) * C10229 +
             (C6900 - C6901 + C6902 - C6903) * C10232 +
             (C6904 - C6905 + C6906 - C6907) * C47481) *
                C47369 * C47268) *
               C47229 +
           (((C4753 - C4752 + C4755 - C4754) * C10231 +
             (C4757 - C4756 + C4759 - C4758) * C10229 +
             (C6170 - C6171 + C6172 - C6173) * C10232 +
             (C6174 - C6175 + C6176 - C6177) * C47481) *
                C47369 * C47430 +
            ((C6171 - C6170 + C6173 - C6172) * C10231 +
             (C6175 - C6174 + C6177 - C6176) * C10229 +
             (C4575 * C1172 - C4579 * C1157 + C47448 * C1173 - C4580 * C1158) *
                 C10232 +
             (C4575 * C1184 - C4579 * C1175 + C47448 * C1185 - C4580 * C1176) *
                 C47481) *
                C47369 * C47268) *
               C2700) *
              C47146)) /
        (p * q * std::sqrt(p + q));
    d2ee[52] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4575 * C124 - C4579 * C117 + C47448 * C125 - C4580 * C118) *
                C10231 +
            (C4575 * C138 - C4579 * C127 + C47448 * C139 - C4580 * C128) *
                C10229 +
            (C10526 - C10527 + C10528 - C10529) * C10232 +
            (C10530 - C10531 + C10532 - C10533) * C47481) *
               C47369 * C47181 * C47507 +
           ((C4729 - C4728 + C4731 - C4730) * C10231 +
            (C4733 - C4732 + C4735 - C4734) * C10229 +
            (C5384 - C5385 + C5386 - C5387) * C10232 +
            (C5388 - C5389 + C5390 - C5391) * C47481) *
               C47369 * C47181 * C47503 +
           ((C4737 - C4736 + C4739 - C4738) * C10231 +
            (C4741 - C4740 + C4743 - C4742) * C10229 +
            (C5822 - C5823 + C5824 - C5825) * C10232 +
            (C5826 - C5827 + C5828 - C5829) * C47481) *
               C47369 * C47181 * C47493 +
           ((C5645 - C5644 + C5647 - C5646) * C10231 +
            (C5649 - C5648 + C5651 - C5650) * C10229 +
            (C6316 - C6317 + C6318 - C6319) * C10232 +
            (C6320 - C6321 + C6322 - C6323) * C47481) *
               C47369 * C47181 * C47471) *
              C2440 +
          (((C4579 * C118 - C4575 * C125 + C4580 * C119 - C47448 * C126) *
                C10231 +
            (C4579 * C128 - C4575 * C139 + C4580 * C129 - C47448 * C140) *
                C10229 +
            (C10542 - C10543 + C10544 - C10545) * C10232 +
            (C10546 - C10547 + C10548 - C10549) * C47481) *
               C47369 * C47181 * C47507 +
           ((C4745 - C4744 + C4747 - C4746) * C10231 +
            (C4749 - C4748 + C4751 - C4750) * C10229 +
            (C5392 - C5393 + C5394 - C5395) * C10232 +
            (C5396 - C5397 + C5398 - C5399) * C47481) *
               C47369 * C47181 * C47503 +
           ((C4753 - C4752 + C4755 - C4754) * C10231 +
            (C4757 - C4756 + C4759 - C4758) * C10229 +
            (C6170 - C6171 + C6172 - C6173) * C10232 +
            (C6174 - C6175 + C6176 - C6177) * C47481) *
               C47369 * C47181 * C47493 +
           ((C5969 - C5968 + C5971 - C5970) * C10231 +
            (C5973 - C5972 + C5975 - C5974) * C10229 +
            (C4575 * C1546 - C4579 * C1543 + C47448 * C1547 - C4580 * C1544) *
                C10232 +
            (C4575 * C1552 - C4579 * C1549 + C47448 * C1553 - C4580 * C1550) *
                C47481) *
               C47369 * C47181 * C47471) *
              C47146)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4575 * C124 - C4579 * C117 + C47448 * C125 - C4580 * C118) *
                C10231 +
            (C4575 * C138 - C4579 * C127 + C47448 * C139 - C4580 * C128) *
                C10229 +
            (C10526 - C10527 + C10528 - C10529) * C10232 +
            (C10530 - C10531 + C10532 - C10533) * C47481) *
               C47369 * C47181 * C2332 +
           ((C4729 - C4728 + C4731 - C4730) * C10231 +
            (C4733 - C4732 + C4735 - C4734) * C10229 +
            (C5384 - C5385 + C5386 - C5387) * C10232 +
            (C5388 - C5389 + C5390 - C5391) * C47481) *
               C47369 * C47181 * C47226) *
              C47506 +
          (((C4579 * C118 - C4575 * C125 + C4580 * C119 - C47448 * C126) *
                C10231 +
            (C4579 * C128 - C4575 * C139 + C4580 * C129 - C47448 * C140) *
                C10229 +
            (C10542 - C10543 + C10544 - C10545) * C10232 +
            (C10546 - C10547 + C10548 - C10549) * C47481) *
               C47369 * C47181 * C2332 +
           ((C4745 - C4744 + C4747 - C4746) * C10231 +
            (C4749 - C4748 + C4751 - C4750) * C10229 +
            (C5392 - C5393 + C5394 - C5395) * C10232 +
            (C5396 - C5397 + C5398 - C5399) * C47481) *
               C47369 * C47181 * C47226) *
              C47499 +
          (((C4575 * C126 - C4579 * C119 + C47448 * C130 - C4580 * C120) *
                C10231 +
            (C4575 * C140 - C4579 * C129 + C47448 * C141 - C4580 * C131) *
                C10229 +
            (C10558 - C10559 + C10560 - C10561) * C10232 +
            (C10562 - C10563 + C10564 - C10565) * C47481) *
               C47369 * C47181 * C2332 +
           ((C4761 - C4760 + C4763 - C4762) * C10231 +
            (C4765 - C4764 + C4767 - C4766) * C10229 +
            (C5400 - C5401 + C5402 - C5403) * C10232 +
            (C5404 - C5405 + C5406 - C5407) * C47481) *
               C47369 * C47181 * C47226) *
              C47486 +
          (((C4579 * C120 - C4575 * C130 + C4580 * C121 - C47448 * C132) *
                C10231 +
            (C4579 * C131 - C4575 * C141 + C4580 * C133 - C47448 * C142) *
                C10229 +
            (C10834 - C10835 + C10836 - C10837) * C10232 +
            (C10838 - C10839 + C10840 - C10841) * C47481) *
               C47369 * C47181 * C2332 +
           ((C5053 - C5052 + C5055 - C5054) * C10231 +
            (C5057 - C5056 + C5059 - C5058) * C10229 +
            (C4575 * C823 - C4579 * C815 + C47448 * C825 - C4580 * C816) *
                C10232 +
            (C4575 * C830 - C4579 * C824 + C47448 * C831 - C4580 * C826) *
                C47481) *
               C47369 * C47181 * C47226) *
              C47465)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C4575 * C124 - C4579 * C117 + C47448 * C125 - C4580 * C118) *
                 C10231 +
             (C4575 * C138 - C4579 * C127 + C47448 * C139 - C4580 * C128) *
                 C10229 +
             (C10526 - C10527 + C10528 - C10529) * C10232 +
             (C10530 - C10531 + C10532 - C10533) * C47481) *
                C47369 * C47501 +
            ((C10527 - C10526 + C10529 - C10528) * C10231 +
             (C10531 - C10530 + C10533 - C10532) * C10229 +
             (C10534 - C10535 + C10536 - C10537) * C10232 +
             (C10538 - C10539 + C10540 - C10541) * C47481) *
                C47369 * C47490 +
            ((C10535 - C10534 + C10537 - C10536) * C10231 +
             (C10539 - C10538 + C10541 - C10540) * C10229 +
             (C12246 - C12247 + C12248 - C12249) * C10232 +
             (C12250 - C12251 + C12252 - C12253) * C47481) *
                C47369 * C47464) *
               C2332 +
           (((C4729 - C4728 + C4731 - C4730) * C10231 +
             (C4733 - C4732 + C4735 - C4734) * C10229 +
             (C5384 - C5385 + C5386 - C5387) * C10232 +
             (C5388 - C5389 + C5390 - C5391) * C47481) *
                C47369 * C47501 +
            ((C5385 - C5384 + C5387 - C5386) * C10231 +
             (C5389 - C5388 + C5391 - C5390) * C10229 +
             (C5814 - C5815 + C5816 - C5817) * C10232 +
             (C5818 - C5819 + C5820 - C5821) * C47481) *
                C47369 * C47490 +
            ((C5815 - C5814 + C5817 - C5816) * C10231 +
             (C5819 - C5818 + C5821 - C5820) * C10229 +
             (C7176 - C7177 + C7178 - C7179) * C10232 +
             (C7180 - C7181 + C7182 - C7183) * C47481) *
                C47369 * C47464) *
               C47226) *
              C2440 +
          ((((C4579 * C118 - C4575 * C125 + C4580 * C119 - C47448 * C126) *
                 C10231 +
             (C4579 * C128 - C4575 * C139 + C4580 * C129 - C47448 * C140) *
                 C10229 +
             (C10542 - C10543 + C10544 - C10545) * C10232 +
             (C10546 - C10547 + C10548 - C10549) * C47481) *
                C47369 * C47501 +
            ((C10543 - C10542 + C10545 - C10544) * C10231 +
             (C10547 - C10546 + C10549 - C10548) * C10229 +
             (C10550 - C10551 + C10552 - C10553) * C10232 +
             (C10554 - C10555 + C10556 - C10557) * C47481) *
                C47369 * C47490 +
            ((C10551 - C10550 + C10553 - C10552) * C10231 +
             (C10555 - C10554 + C10557 - C10556) * C10229 +
             (C12586 - C12587 + C12588 - C12589) * C10232 +
             (C12590 - C12591 + C12592 - C12593) * C47481) *
                C47369 * C47464) *
               C2332 +
           (((C4745 - C4744 + C4747 - C4746) * C10231 +
             (C4749 - C4748 + C4751 - C4750) * C10229 +
             (C5392 - C5393 + C5394 - C5395) * C10232 +
             (C5396 - C5397 + C5398 - C5399) * C47481) *
                C47369 * C47501 +
            ((C5393 - C5392 + C5395 - C5394) * C10231 +
             (C5397 - C5396 + C5399 - C5398) * C10229 +
             (C6900 - C6901 + C6902 - C6903) * C10232 +
             (C6904 - C6905 + C6906 - C6907) * C47481) *
                C47369 * C47490 +
            ((C6901 - C6900 + C6903 - C6902) * C10231 +
             (C6905 - C6904 + C6907 - C6906) * C10229 +
             (C4575 * C2226 - C4579 * C2223 + C47448 * C2227 - C4580 * C2224) *
                 C10232 +
             (C4575 * C2232 - C4579 * C2229 + C47448 * C2233 - C4580 * C2230) *
                 C47481) *
                C47369 * C47464) *
               C47226) *
              C47146)) /
            (p * q * std::sqrt(p + q));
    d2ee[53] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C4575 * C124 - C4579 * C117 + C47448 * C125 - C4580 * C118) *
                 C10231 +
             (C4575 * C138 - C4579 * C127 + C47448 * C139 - C4580 * C128) *
                 C10229 +
             (C10526 - C10527 + C10528 - C10529) * C10232 +
             (C10530 - C10531 + C10532 - C10533) * C47481) *
                C47369 * C47430 +
            ((C10527 - C10526 + C10529 - C10528) * C10231 +
             (C10531 - C10530 + C10533 - C10532) * C10229 +
             (C10534 - C10535 + C10536 - C10537) * C10232 +
             (C10538 - C10539 + C10540 - C10541) * C47481) *
                C47369 * C47268) *
               C2332 +
           (((C4729 - C4728 + C4731 - C4730) * C10231 +
             (C4733 - C4732 + C4735 - C4734) * C10229 +
             (C5384 - C5385 + C5386 - C5387) * C10232 +
             (C5388 - C5389 + C5390 - C5391) * C47481) *
                C47369 * C47430 +
            ((C5385 - C5384 + C5387 - C5386) * C10231 +
             (C5389 - C5388 + C5391 - C5390) * C10229 +
             (C5814 - C5815 + C5816 - C5817) * C10232 +
             (C5818 - C5819 + C5820 - C5821) * C47481) *
                C47369 * C47268) *
               C47226) *
              C47140 +
          ((((C4579 * C118 - C4575 * C125 + C4580 * C119 - C47448 * C126) *
                 C10231 +
             (C4579 * C128 - C4575 * C139 + C4580 * C129 - C47448 * C140) *
                 C10229 +
             (C10542 - C10543 + C10544 - C10545) * C10232 +
             (C10546 - C10547 + C10548 - C10549) * C47481) *
                C47369 * C47430 +
            ((C10543 - C10542 + C10545 - C10544) * C10231 +
             (C10547 - C10546 + C10549 - C10548) * C10229 +
             (C10550 - C10551 + C10552 - C10553) * C10232 +
             (C10554 - C10555 + C10556 - C10557) * C47481) *
                C47369 * C47268) *
               C2332 +
           (((C4745 - C4744 + C4747 - C4746) * C10231 +
             (C4749 - C4748 + C4751 - C4750) * C10229 +
             (C5392 - C5393 + C5394 - C5395) * C10232 +
             (C5396 - C5397 + C5398 - C5399) * C47481) *
                C47369 * C47430 +
            ((C5393 - C5392 + C5395 - C5394) * C10231 +
             (C5397 - C5396 + C5399 - C5398) * C10229 +
             (C6900 - C6901 + C6902 - C6903) * C10232 +
             (C6904 - C6905 + C6906 - C6907) * C47481) *
                C47369 * C47268) *
               C47226) *
              C47149 +
          ((((C4575 * C126 - C4579 * C119 + C47448 * C130 - C4580 * C120) *
                 C10231 +
             (C4575 * C140 - C4579 * C129 + C47448 * C141 - C4580 * C131) *
                 C10229 +
             (C10558 - C10559 + C10560 - C10561) * C10232 +
             (C10562 - C10563 + C10564 - C10565) * C47481) *
                C47369 * C47430 +
            ((C10559 - C10558 + C10561 - C10560) * C10231 +
             (C10563 - C10562 + C10565 - C10564) * C10229 +
             (C10566 - C10567 + C10568 - C10569) * C10232 +
             (C10570 - C10571 + C10572 - C10573) * C47481) *
                C47369 * C47268) *
               C2332 +
           (((C4761 - C4760 + C4763 - C4762) * C10231 +
             (C4765 - C4764 + C4767 - C4766) * C10229 +
             (C5400 - C5401 + C5402 - C5403) * C10232 +
             (C5404 - C5405 + C5406 - C5407) * C47481) *
                C47369 * C47430 +
            ((C5401 - C5400 + C5403 - C5402) * C10231 +
             (C5405 - C5404 + C5407 - C5406) * C10229 +
             (C4575 * C1161 - C4579 * C1152 + C47448 * C2015 - C4580 * C2014) *
                 C10232 +
             (C4575 * C1179 - C4579 * C1164 + C47448 * C2017 - C4580 * C2016) *
                 C47481) *
                C47369 * C47268) *
               C47226) *
              C2703)) /
        (p * q * std::sqrt(p + q));
    d2ee[54] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C4575 * C124 - C4579 * C117 + C47448 * C125 - C4580 * C118) *
                C10231 +
            (C4575 * C138 - C4579 * C127 + C47448 * C139 - C4580 * C128) *
                C10229 +
            (C10526 - C10527 + C10528 - C10529) * C10232 +
            (C10530 - C10531 + C10532 - C10533) * C47481) *
               C47369 * C47181 * C2332 +
           ((C4729 - C4728 + C4731 - C4730) * C10231 +
            (C4733 - C4732 + C4735 - C4734) * C10229 +
            (C5384 - C5385 + C5386 - C5387) * C10232 +
            (C5388 - C5389 + C5390 - C5391) * C47481) *
               C47369 * C47181 * C47226) *
              C47506 +
          (((C4579 * C118 - C4575 * C125 + C4580 * C119 - C47448 * C126) *
                C10231 +
            (C4579 * C128 - C4575 * C139 + C4580 * C129 - C47448 * C140) *
                C10229 +
            (C10542 - C10543 + C10544 - C10545) * C10232 +
            (C10546 - C10547 + C10548 - C10549) * C47481) *
               C47369 * C47181 * C2332 +
           ((C4745 - C4744 + C4747 - C4746) * C10231 +
            (C4749 - C4748 + C4751 - C4750) * C10229 +
            (C5392 - C5393 + C5394 - C5395) * C10232 +
            (C5396 - C5397 + C5398 - C5399) * C47481) *
               C47369 * C47181 * C47226) *
              C47499 +
          (((C4575 * C126 - C4579 * C119 + C47448 * C130 - C4580 * C120) *
                C10231 +
            (C4575 * C140 - C4579 * C129 + C47448 * C141 - C4580 * C131) *
                C10229 +
            (C10558 - C10559 + C10560 - C10561) * C10232 +
            (C10562 - C10563 + C10564 - C10565) * C47481) *
               C47369 * C47181 * C2332 +
           ((C4761 - C4760 + C4763 - C4762) * C10231 +
            (C4765 - C4764 + C4767 - C4766) * C10229 +
            (C5400 - C5401 + C5402 - C5403) * C10232 +
            (C5404 - C5405 + C5406 - C5407) * C47481) *
               C47369 * C47181 * C47226) *
              C47486 +
          (((C4579 * C120 - C4575 * C130 + C4580 * C121 - C47448 * C132) *
                C10231 +
            (C4579 * C131 - C4575 * C141 + C4580 * C133 - C47448 * C142) *
                C10229 +
            (C10834 - C10835 + C10836 - C10837) * C10232 +
            (C10838 - C10839 + C10840 - C10841) * C47481) *
               C47369 * C47181 * C2332 +
           ((C5053 - C5052 + C5055 - C5054) * C10231 +
            (C5057 - C5056 + C5059 - C5058) * C10229 +
            (C4575 * C823 - C4579 * C815 + C47448 * C825 - C4580 * C816) *
                C10232 +
            (C4575 * C830 - C4579 * C824 + C47448 * C831 - C4580 * C826) *
                C47481) *
               C47369 * C47181 * C47226) *
              C47465)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C4575 * C124 - C4579 * C117 + C47448 * C125 - C4580 * C118) *
                C10231 +
            (C4575 * C138 - C4579 * C127 + C47448 * C139 - C4580 * C128) *
                C10229 +
            (C10526 - C10527 + C10528 - C10529) * C10232 +
            (C10530 - C10531 + C10532 - C10533) * C47481) *
               C47369 * C47181 * C47507 +
           ((C4729 - C4728 + C4731 - C4730) * C10231 +
            (C4733 - C4732 + C4735 - C4734) * C10229 +
            (C5384 - C5385 + C5386 - C5387) * C10232 +
            (C5388 - C5389 + C5390 - C5391) * C47481) *
               C47369 * C47181 * C47503 +
           ((C4737 - C4736 + C4739 - C4738) * C10231 +
            (C4741 - C4740 + C4743 - C4742) * C10229 +
            (C5822 - C5823 + C5824 - C5825) * C10232 +
            (C5826 - C5827 + C5828 - C5829) * C47481) *
               C47369 * C47181 * C47493 +
           ((C5645 - C5644 + C5647 - C5646) * C10231 +
            (C5649 - C5648 + C5651 - C5650) * C10229 +
            (C6316 - C6317 + C6318 - C6319) * C10232 +
            (C6320 - C6321 + C6322 - C6323) * C47481) *
               C47369 * C47181 * C47471) *
              C2440 +
          (((C4579 * C118 - C4575 * C125 + C4580 * C119 - C47448 * C126) *
                C10231 +
            (C4579 * C128 - C4575 * C139 + C4580 * C129 - C47448 * C140) *
                C10229 +
            (C10542 - C10543 + C10544 - C10545) * C10232 +
            (C10546 - C10547 + C10548 - C10549) * C47481) *
               C47369 * C47181 * C47507 +
           ((C4745 - C4744 + C4747 - C4746) * C10231 +
            (C4749 - C4748 + C4751 - C4750) * C10229 +
            (C5392 - C5393 + C5394 - C5395) * C10232 +
            (C5396 - C5397 + C5398 - C5399) * C47481) *
               C47369 * C47181 * C47503 +
           ((C4753 - C4752 + C4755 - C4754) * C10231 +
            (C4757 - C4756 + C4759 - C4758) * C10229 +
            (C6170 - C6171 + C6172 - C6173) * C10232 +
            (C6174 - C6175 + C6176 - C6177) * C47481) *
               C47369 * C47181 * C47493 +
           ((C5969 - C5968 + C5971 - C5970) * C10231 +
            (C5973 - C5972 + C5975 - C5974) * C10229 +
            (C4575 * C1546 - C4579 * C1543 + C47448 * C1547 - C4580 * C1544) *
                C10232 +
            (C4575 * C1552 - C4579 * C1549 + C47448 * C1553 - C4580 * C1550) *
                C47481) *
               C47369 * C47181 * C47471) *
              C47146)) /
            (p * q * std::sqrt(p + q));
    d2ee[55] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C4575 * C124 - C4579 * C117 + C47448 * C125 - C4580 * C118) *
                 C10231 +
             (C4575 * C138 - C4579 * C127 + C47448 * C139 - C4580 * C128) *
                 C10229 +
             (C10526 - C10527 + C10528 - C10529) * C10232 +
             (C10530 - C10531 + C10532 - C10533) * C47481) *
                C47369 * C3094 +
            ((C10527 - C10526 + C10529 - C10528) * C10231 +
             (C10531 - C10530 + C10533 - C10532) * C10229 +
             (C10534 - C10535 + C10536 - C10537) * C10232 +
             (C10538 - C10539 + C10540 - C10541) * C47481) *
                C47369 * C47268) *
               C47222 +
           (((C4729 - C4728 + C4731 - C4730) * C10231 +
             (C4733 - C4732 + C4735 - C4734) * C10229 +
             (C5384 - C5385 + C5386 - C5387) * C10232 +
             (C5388 - C5389 + C5390 - C5391) * C47481) *
                C47369 * C3094 +
            ((C5385 - C5384 + C5387 - C5386) * C10231 +
             (C5389 - C5388 + C5391 - C5390) * C10229 +
             (C5814 - C5815 + C5816 - C5817) * C10232 +
             (C5818 - C5819 + C5820 - C5821) * C47481) *
                C47369 * C47268) *
               C47229 +
           (((C4737 - C4736 + C4739 - C4738) * C10231 +
             (C4741 - C4740 + C4743 - C4742) * C10229 +
             (C5822 - C5823 + C5824 - C5825) * C10232 +
             (C5826 - C5827 + C5828 - C5829) * C47481) *
                C47369 * C3094 +
            ((C5823 - C5822 + C5825 - C5824) * C10231 +
             (C5827 - C5826 + C5829 - C5828) * C10229 +
             (C5830 - C5831 + C5832 - C5833) * C10232 +
             (C5834 - C5835 + C5836 - C5837) * C47481) *
                C47369 * C47268) *
               C2700) *
              C47415 +
          ((((C4579 * C118 - C4575 * C125 + C4580 * C119 - C47448 * C126) *
                 C10231 +
             (C4579 * C128 - C4575 * C139 + C4580 * C129 - C47448 * C140) *
                 C10229 +
             (C10542 - C10543 + C10544 - C10545) * C10232 +
             (C10546 - C10547 + C10548 - C10549) * C47481) *
                C47369 * C3094 +
            ((C10543 - C10542 + C10545 - C10544) * C10231 +
             (C10547 - C10546 + C10549 - C10548) * C10229 +
             (C10550 - C10551 + C10552 - C10553) * C10232 +
             (C10554 - C10555 + C10556 - C10557) * C47481) *
                C47369 * C47268) *
               C47222 +
           (((C4745 - C4744 + C4747 - C4746) * C10231 +
             (C4749 - C4748 + C4751 - C4750) * C10229 +
             (C5392 - C5393 + C5394 - C5395) * C10232 +
             (C5396 - C5397 + C5398 - C5399) * C47481) *
                C47369 * C3094 +
            ((C5393 - C5392 + C5395 - C5394) * C10231 +
             (C5397 - C5396 + C5399 - C5398) * C10229 +
             (C6900 - C6901 + C6902 - C6903) * C10232 +
             (C6904 - C6905 + C6906 - C6907) * C47481) *
                C47369 * C47268) *
               C47229 +
           (((C4753 - C4752 + C4755 - C4754) * C10231 +
             (C4757 - C4756 + C4759 - C4758) * C10229 +
             (C6170 - C6171 + C6172 - C6173) * C10232 +
             (C6174 - C6175 + C6176 - C6177) * C47481) *
                C47369 * C3094 +
            ((C6171 - C6170 + C6173 - C6172) * C10231 +
             (C6175 - C6174 + C6177 - C6176) * C10229 +
             (C4575 * C1172 - C4579 * C1157 + C47448 * C1173 - C4580 * C1158) *
                 C10232 +
             (C4575 * C1184 - C4579 * C1175 + C47448 * C1185 - C4580 * C1176) *
                 C47481) *
                C47369 * C47268) *
               C2700) *
              C47146)) /
        (p * q * std::sqrt(p + q));
    d2ee[56] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C4575 * C124 - C4579 * C117 + C47448 * C125 - C4580 * C118) *
                C10231 +
            (C4575 * C138 - C4579 * C127 + C47448 * C139 - C4580 * C128) *
                C10229 +
            (C10526 - C10527 + C10528 - C10529) * C10232 +
            (C10530 - C10531 + C10532 - C10533) * C47481) *
               C47369 * C47264 +
           ((C10527 - C10526 + C10529 - C10528) * C10231 +
            (C10531 - C10530 + C10533 - C10532) * C10229 +
            (C10534 - C10535 + C10536 - C10537) * C10232 +
            (C10538 - C10539 + C10540 - C10541) * C47481) *
               C47369 * C47271 +
           ((C10535 - C10534 + C10537 - C10536) * C10231 +
            (C10539 - C10538 + C10541 - C10540) * C10229 +
            (C12246 - C12247 + C12248 - C12249) * C10232 +
            (C12250 - C12251 + C12252 - C12253) * C47481) *
               C47369 * C3602) *
              C47222 +
          (((C4729 - C4728 + C4731 - C4730) * C10231 +
            (C4733 - C4732 + C4735 - C4734) * C10229 +
            (C5384 - C5385 + C5386 - C5387) * C10232 +
            (C5388 - C5389 + C5390 - C5391) * C47481) *
               C47369 * C47264 +
           ((C5385 - C5384 + C5387 - C5386) * C10231 +
            (C5389 - C5388 + C5391 - C5390) * C10229 +
            (C5814 - C5815 + C5816 - C5817) * C10232 +
            (C5818 - C5819 + C5820 - C5821) * C47481) *
               C47369 * C47271 +
           ((C5815 - C5814 + C5817 - C5816) * C10231 +
            (C5819 - C5818 + C5821 - C5820) * C10229 +
            (C7176 - C7177 + C7178 - C7179) * C10232 +
            (C7180 - C7181 + C7182 - C7183) * C47481) *
               C47369 * C3602) *
              C47229 +
          (((C4737 - C4736 + C4739 - C4738) * C10231 +
            (C4741 - C4740 + C4743 - C4742) * C10229 +
            (C5822 - C5823 + C5824 - C5825) * C10232 +
            (C5826 - C5827 + C5828 - C5829) * C47481) *
               C47369 * C47264 +
           ((C5823 - C5822 + C5825 - C5824) * C10231 +
            (C5827 - C5826 + C5829 - C5828) * C10229 +
            (C5830 - C5831 + C5832 - C5833) * C10232 +
            (C5834 - C5835 + C5836 - C5837) * C47481) *
               C47369 * C47271 +
           ((C5831 - C5830 + C5833 - C5832) * C10231 +
            (C5835 - C5834 + C5837 - C5836) * C10229 +
            (C4575 * C7169 - C4579 * C7167 + C47448 * C7170 - C4580 * C7168) *
                C10232 +
            (C4575 * C7173 - C4579 * C7171 + C47448 * C7174 - C4580 * C7172) *
                C47481) *
               C47369 * C3602) *
              C2700) *
         C47135) /
        (p * q * std::sqrt(p + q));
    d2ee[57] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4575 * C124 - C4579 * C117 + C47448 * C125 - C4580 * C118) *
                C10231 +
            (C4575 * C138 - C4579 * C127 + C47448 * C139 - C4580 * C128) *
                C10229 +
            (C10526 - C10527 + C10528 - C10529) * C10232 +
            (C10530 - C10531 + C10532 - C10533) * C47481) *
               C47369 * C3094 +
           ((C10527 - C10526 + C10529 - C10528) * C10231 +
            (C10531 - C10530 + C10533 - C10532) * C10229 +
            (C10534 - C10535 + C10536 - C10537) * C10232 +
            (C10538 - C10539 + C10540 - C10541) * C47481) *
               C47369 * C47268) *
              C47507 +
          (((C4729 - C4728 + C4731 - C4730) * C10231 +
            (C4733 - C4732 + C4735 - C4734) * C10229 +
            (C5384 - C5385 + C5386 - C5387) * C10232 +
            (C5388 - C5389 + C5390 - C5391) * C47481) *
               C47369 * C3094 +
           ((C5385 - C5384 + C5387 - C5386) * C10231 +
            (C5389 - C5388 + C5391 - C5390) * C10229 +
            (C5814 - C5815 + C5816 - C5817) * C10232 +
            (C5818 - C5819 + C5820 - C5821) * C47481) *
               C47369 * C47268) *
              C47503 +
          (((C4737 - C4736 + C4739 - C4738) * C10231 +
            (C4741 - C4740 + C4743 - C4742) * C10229 +
            (C5822 - C5823 + C5824 - C5825) * C10232 +
            (C5826 - C5827 + C5828 - C5829) * C47481) *
               C47369 * C3094 +
           ((C5823 - C5822 + C5825 - C5824) * C10231 +
            (C5827 - C5826 + C5829 - C5828) * C10229 +
            (C5830 - C5831 + C5832 - C5833) * C10232 +
            (C5834 - C5835 + C5836 - C5837) * C47481) *
               C47369 * C47268) *
              C47493 +
          (((C5645 - C5644 + C5647 - C5646) * C10231 +
            (C5649 - C5648 + C5651 - C5650) * C10229 +
            (C6316 - C6317 + C6318 - C6319) * C10232 +
            (C6320 - C6321 + C6322 - C6323) * C47481) *
               C47369 * C3094 +
           ((C6317 - C6316 + C6319 - C6318) * C10231 +
            (C6321 - C6320 + C6323 - C6322) * C10229 +
            (C4575 * C5807 - C4579 * C5805 + C47448 * C5808 - C4580 * C5806) *
                C10232 +
            (C4575 * C5811 - C4579 * C5809 + C47448 * C5812 - C4580 * C5810) *
                C47481) *
               C47369 * C47268) *
              C47471) *
         C47135) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C4575 * C124 - C4579 * C117 + C47448 * C125 - C4580 * C118) *
                 C10231 +
             (C4575 * C138 - C4579 * C127 + C47448 * C139 - C4580 * C128) *
                 C10229 +
             (C10526 - C10527 + C10528 - C10529) * C10232 +
             (C10530 - C10531 + C10532 - C10533) * C47481) *
                C47369 * C3094 +
            ((C10527 - C10526 + C10529 - C10528) * C10231 +
             (C10531 - C10530 + C10533 - C10532) * C10229 +
             (C10534 - C10535 + C10536 - C10537) * C10232 +
             (C10538 - C10539 + C10540 - C10541) * C47481) *
                C47369 * C47268) *
               C2332 +
           (((C4729 - C4728 + C4731 - C4730) * C10231 +
             (C4733 - C4732 + C4735 - C4734) * C10229 +
             (C5384 - C5385 + C5386 - C5387) * C10232 +
             (C5388 - C5389 + C5390 - C5391) * C47481) *
                C47369 * C3094 +
            ((C5385 - C5384 + C5387 - C5386) * C10231 +
             (C5389 - C5388 + C5391 - C5390) * C10229 +
             (C5814 - C5815 + C5816 - C5817) * C10232 +
             (C5818 - C5819 + C5820 - C5821) * C47481) *
                C47369 * C47268) *
               C47226) *
              C47497 +
          ((((C4579 * C118 - C4575 * C125 + C4580 * C119 - C47448 * C126) *
                 C10231 +
             (C4579 * C128 - C4575 * C139 + C4580 * C129 - C47448 * C140) *
                 C10229 +
             (C10542 - C10543 + C10544 - C10545) * C10232 +
             (C10546 - C10547 + C10548 - C10549) * C47481) *
                C47369 * C3094 +
            ((C10543 - C10542 + C10545 - C10544) * C10231 +
             (C10547 - C10546 + C10549 - C10548) * C10229 +
             (C10550 - C10551 + C10552 - C10553) * C10232 +
             (C10554 - C10555 + C10556 - C10557) * C47481) *
                C47369 * C47268) *
               C2332 +
           (((C4745 - C4744 + C4747 - C4746) * C10231 +
             (C4749 - C4748 + C4751 - C4750) * C10229 +
             (C5392 - C5393 + C5394 - C5395) * C10232 +
             (C5396 - C5397 + C5398 - C5399) * C47481) *
                C47369 * C3094 +
            ((C5393 - C5392 + C5395 - C5394) * C10231 +
             (C5397 - C5396 + C5399 - C5398) * C10229 +
             (C6900 - C6901 + C6902 - C6903) * C10232 +
             (C6904 - C6905 + C6906 - C6907) * C47481) *
                C47369 * C47268) *
               C47226) *
              C47484 +
          ((((C4575 * C126 - C4579 * C119 + C47448 * C130 - C4580 * C120) *
                 C10231 +
             (C4575 * C140 - C4579 * C129 + C47448 * C141 - C4580 * C131) *
                 C10229 +
             (C10558 - C10559 + C10560 - C10561) * C10232 +
             (C10562 - C10563 + C10564 - C10565) * C47481) *
                C47369 * C3094 +
            ((C10559 - C10558 + C10561 - C10560) * C10231 +
             (C10563 - C10562 + C10565 - C10564) * C10229 +
             (C10566 - C10567 + C10568 - C10569) * C10232 +
             (C10570 - C10571 + C10572 - C10573) * C47481) *
                C47369 * C47268) *
               C2332 +
           (((C4761 - C4760 + C4763 - C4762) * C10231 +
             (C4765 - C4764 + C4767 - C4766) * C10229 +
             (C5400 - C5401 + C5402 - C5403) * C10232 +
             (C5404 - C5405 + C5406 - C5407) * C47481) *
                C47369 * C3094 +
            ((C5401 - C5400 + C5403 - C5402) * C10231 +
             (C5405 - C5404 + C5407 - C5406) * C10229 +
             (C4575 * C1161 - C4579 * C1152 + C47448 * C2015 - C4580 * C2014) *
                 C10232 +
             (C4575 * C1179 - C4579 * C1164 + C47448 * C2017 - C4580 * C2016) *
                 C47481) *
                C47369 * C47268) *
               C47226) *
              C47455)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C4575 * C124 - C4579 * C117 + C47448 * C125 - C4580 * C118) *
                C10231 +
            (C4575 * C138 - C4579 * C127 + C47448 * C139 - C4580 * C128) *
                C10229 +
            (C10526 - C10527 + C10528 - C10529) * C10232 +
            (C10530 - C10531 + C10532 - C10533) * C47481) *
               C47369 * C47508 +
           ((C10527 - C10526 + C10529 - C10528) * C10231 +
            (C10531 - C10530 + C10533 - C10532) * C10229 +
            (C10534 - C10535 + C10536 - C10537) * C10232 +
            (C10538 - C10539 + C10540 - C10541) * C47481) *
               C47369 * C47505 +
           ((C10535 - C10534 + C10537 - C10536) * C10231 +
            (C10539 - C10538 + C10541 - C10540) * C10229 +
            (C12246 - C12247 + C12248 - C12249) * C10232 +
            (C12250 - C12251 + C12252 - C12253) * C47481) *
               C47369 * C47496 +
           ((C12247 - C12246 + C12249 - C12248) * C10231 +
            (C12251 - C12250 + C12253 - C12252) * C10229 +
            (C12254 - C12255 + C12256 - C12257) * C10232 +
            (C12258 - C12259 + C12260 - C12261) * C47481) *
               C47369 * C47477) *
              C2332 +
          (((C4729 - C4728 + C4731 - C4730) * C10231 +
            (C4733 - C4732 + C4735 - C4734) * C10229 +
            (C5384 - C5385 + C5386 - C5387) * C10232 +
            (C5388 - C5389 + C5390 - C5391) * C47481) *
               C47369 * C47508 +
           ((C5385 - C5384 + C5387 - C5386) * C10231 +
            (C5389 - C5388 + C5391 - C5390) * C10229 +
            (C5814 - C5815 + C5816 - C5817) * C10232 +
            (C5818 - C5819 + C5820 - C5821) * C47481) *
               C47369 * C47505 +
           ((C5815 - C5814 + C5817 - C5816) * C10231 +
            (C5819 - C5818 + C5821 - C5820) * C10229 +
            (C7176 - C7177 + C7178 - C7179) * C10232 +
            (C7180 - C7181 + C7182 - C7183) * C47481) *
               C47369 * C47496 +
           ((C7177 - C7176 + C7179 - C7178) * C10231 +
            (C7181 - C7180 + C7183 - C7182) * C10229 +
            (C4575 * C6699 - C4579 * C6697 + C47448 * C6700 - C4580 * C6698) *
                C10232 +
            (C4575 * C6703 - C4579 * C6701 + C47448 * C6704 - C4580 * C6702) *
                C47481) *
               C47369 * C47477) *
              C47226) *
         C47135) /
            (p * q * std::sqrt(p + q));
    d2ee[58] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C4575 * C124 - C4579 * C117 + C47448 * C125 - C4580 * C118) *
                 C10231 +
             (C4575 * C138 - C4579 * C127 + C47448 * C139 - C4580 * C128) *
                 C10229 +
             (C10526 - C10527 + C10528 - C10529) * C10232 +
             (C10530 - C10531 + C10532 - C10533) * C47481) *
                C47369 * C47264 +
            ((C10527 - C10526 + C10529 - C10528) * C10231 +
             (C10531 - C10530 + C10533 - C10532) * C10229 +
             (C10534 - C10535 + C10536 - C10537) * C10232 +
             (C10538 - C10539 + C10540 - C10541) * C47481) *
                C47369 * C47271 +
            ((C10535 - C10534 + C10537 - C10536) * C10231 +
             (C10539 - C10538 + C10541 - C10540) * C10229 +
             (C12246 - C12247 + C12248 - C12249) * C10232 +
             (C12250 - C12251 + C12252 - C12253) * C47481) *
                C47369 * C3602) *
               C2332 +
           (((C4729 - C4728 + C4731 - C4730) * C10231 +
             (C4733 - C4732 + C4735 - C4734) * C10229 +
             (C5384 - C5385 + C5386 - C5387) * C10232 +
             (C5388 - C5389 + C5390 - C5391) * C47481) *
                C47369 * C47264 +
            ((C5385 - C5384 + C5387 - C5386) * C10231 +
             (C5389 - C5388 + C5391 - C5390) * C10229 +
             (C5814 - C5815 + C5816 - C5817) * C10232 +
             (C5818 - C5819 + C5820 - C5821) * C47481) *
                C47369 * C47271 +
            ((C5815 - C5814 + C5817 - C5816) * C10231 +
             (C5819 - C5818 + C5821 - C5820) * C10229 +
             (C7176 - C7177 + C7178 - C7179) * C10232 +
             (C7180 - C7181 + C7182 - C7183) * C47481) *
                C47369 * C3602) *
               C47226) *
              C47415 +
          ((((C4579 * C118 - C4575 * C125 + C4580 * C119 - C47448 * C126) *
                 C10231 +
             (C4579 * C128 - C4575 * C139 + C4580 * C129 - C47448 * C140) *
                 C10229 +
             (C10542 - C10543 + C10544 - C10545) * C10232 +
             (C10546 - C10547 + C10548 - C10549) * C47481) *
                C47369 * C47264 +
            ((C10543 - C10542 + C10545 - C10544) * C10231 +
             (C10547 - C10546 + C10549 - C10548) * C10229 +
             (C10550 - C10551 + C10552 - C10553) * C10232 +
             (C10554 - C10555 + C10556 - C10557) * C47481) *
                C47369 * C47271 +
            ((C10551 - C10550 + C10553 - C10552) * C10231 +
             (C10555 - C10554 + C10557 - C10556) * C10229 +
             (C12586 - C12587 + C12588 - C12589) * C10232 +
             (C12590 - C12591 + C12592 - C12593) * C47481) *
                C47369 * C3602) *
               C2332 +
           (((C4745 - C4744 + C4747 - C4746) * C10231 +
             (C4749 - C4748 + C4751 - C4750) * C10229 +
             (C5392 - C5393 + C5394 - C5395) * C10232 +
             (C5396 - C5397 + C5398 - C5399) * C47481) *
                C47369 * C47264 +
            ((C5393 - C5392 + C5395 - C5394) * C10231 +
             (C5397 - C5396 + C5399 - C5398) * C10229 +
             (C6900 - C6901 + C6902 - C6903) * C10232 +
             (C6904 - C6905 + C6906 - C6907) * C47481) *
                C47369 * C47271 +
            ((C6901 - C6900 + C6903 - C6902) * C10231 +
             (C6905 - C6904 + C6907 - C6906) * C10229 +
             (C4575 * C2226 - C4579 * C2223 + C47448 * C2227 - C4580 * C2224) *
                 C10232 +
             (C4575 * C2232 - C4579 * C2229 + C47448 * C2233 - C4580 * C2230) *
                 C47481) *
                C47369 * C3602) *
               C47226) *
              C47146)) /
        (p * q * std::sqrt(p + q));
    d2ee[59] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C4575 * C124 - C4579 * C117 + C47448 * C125 - C4580 * C118) *
                 C10231 +
             (C4575 * C138 - C4579 * C127 + C47448 * C139 - C4580 * C128) *
                 C10229 +
             (C10526 - C10527 + C10528 - C10529) * C10232 +
             (C10530 - C10531 + C10532 - C10533) * C47481) *
                C47369 * C3094 +
            ((C10527 - C10526 + C10529 - C10528) * C10231 +
             (C10531 - C10530 + C10533 - C10532) * C10229 +
             (C10534 - C10535 + C10536 - C10537) * C10232 +
             (C10538 - C10539 + C10540 - C10541) * C47481) *
                C47369 * C47268) *
               C2332 +
           (((C4729 - C4728 + C4731 - C4730) * C10231 +
             (C4733 - C4732 + C4735 - C4734) * C10229 +
             (C5384 - C5385 + C5386 - C5387) * C10232 +
             (C5388 - C5389 + C5390 - C5391) * C47481) *
                C47369 * C3094 +
            ((C5385 - C5384 + C5387 - C5386) * C10231 +
             (C5389 - C5388 + C5391 - C5390) * C10229 +
             (C5814 - C5815 + C5816 - C5817) * C10232 +
             (C5818 - C5819 + C5820 - C5821) * C47481) *
                C47369 * C47268) *
               C47226) *
              C47497 +
          ((((C4579 * C118 - C4575 * C125 + C4580 * C119 - C47448 * C126) *
                 C10231 +
             (C4579 * C128 - C4575 * C139 + C4580 * C129 - C47448 * C140) *
                 C10229 +
             (C10542 - C10543 + C10544 - C10545) * C10232 +
             (C10546 - C10547 + C10548 - C10549) * C47481) *
                C47369 * C3094 +
            ((C10543 - C10542 + C10545 - C10544) * C10231 +
             (C10547 - C10546 + C10549 - C10548) * C10229 +
             (C10550 - C10551 + C10552 - C10553) * C10232 +
             (C10554 - C10555 + C10556 - C10557) * C47481) *
                C47369 * C47268) *
               C2332 +
           (((C4745 - C4744 + C4747 - C4746) * C10231 +
             (C4749 - C4748 + C4751 - C4750) * C10229 +
             (C5392 - C5393 + C5394 - C5395) * C10232 +
             (C5396 - C5397 + C5398 - C5399) * C47481) *
                C47369 * C3094 +
            ((C5393 - C5392 + C5395 - C5394) * C10231 +
             (C5397 - C5396 + C5399 - C5398) * C10229 +
             (C6900 - C6901 + C6902 - C6903) * C10232 +
             (C6904 - C6905 + C6906 - C6907) * C47481) *
                C47369 * C47268) *
               C47226) *
              C47484 +
          ((((C4575 * C126 - C4579 * C119 + C47448 * C130 - C4580 * C120) *
                 C10231 +
             (C4575 * C140 - C4579 * C129 + C47448 * C141 - C4580 * C131) *
                 C10229 +
             (C10558 - C10559 + C10560 - C10561) * C10232 +
             (C10562 - C10563 + C10564 - C10565) * C47481) *
                C47369 * C3094 +
            ((C10559 - C10558 + C10561 - C10560) * C10231 +
             (C10563 - C10562 + C10565 - C10564) * C10229 +
             (C10566 - C10567 + C10568 - C10569) * C10232 +
             (C10570 - C10571 + C10572 - C10573) * C47481) *
                C47369 * C47268) *
               C2332 +
           (((C4761 - C4760 + C4763 - C4762) * C10231 +
             (C4765 - C4764 + C4767 - C4766) * C10229 +
             (C5400 - C5401 + C5402 - C5403) * C10232 +
             (C5404 - C5405 + C5406 - C5407) * C47481) *
                C47369 * C3094 +
            ((C5401 - C5400 + C5403 - C5402) * C10231 +
             (C5405 - C5404 + C5407 - C5406) * C10229 +
             (C4575 * C1161 - C4579 * C1152 + C47448 * C2015 - C4580 * C2014) *
                 C10232 +
             (C4575 * C1179 - C4579 * C1164 + C47448 * C2017 - C4580 * C2016) *
                 C47481) *
                C47369 * C47268) *
               C47226) *
              C47455)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C4575 * C124 - C4579 * C117 + C47448 * C125 - C4580 * C118) *
                C10231 +
            (C4575 * C138 - C4579 * C127 + C47448 * C139 - C4580 * C128) *
                C10229 +
            (C10526 - C10527 + C10528 - C10529) * C10232 +
            (C10530 - C10531 + C10532 - C10533) * C47481) *
               C47369 * C3094 +
           ((C10527 - C10526 + C10529 - C10528) * C10231 +
            (C10531 - C10530 + C10533 - C10532) * C10229 +
            (C10534 - C10535 + C10536 - C10537) * C10232 +
            (C10538 - C10539 + C10540 - C10541) * C47481) *
               C47369 * C47268) *
              C47507 +
          (((C4729 - C4728 + C4731 - C4730) * C10231 +
            (C4733 - C4732 + C4735 - C4734) * C10229 +
            (C5384 - C5385 + C5386 - C5387) * C10232 +
            (C5388 - C5389 + C5390 - C5391) * C47481) *
               C47369 * C3094 +
           ((C5385 - C5384 + C5387 - C5386) * C10231 +
            (C5389 - C5388 + C5391 - C5390) * C10229 +
            (C5814 - C5815 + C5816 - C5817) * C10232 +
            (C5818 - C5819 + C5820 - C5821) * C47481) *
               C47369 * C47268) *
              C47503 +
          (((C4737 - C4736 + C4739 - C4738) * C10231 +
            (C4741 - C4740 + C4743 - C4742) * C10229 +
            (C5822 - C5823 + C5824 - C5825) * C10232 +
            (C5826 - C5827 + C5828 - C5829) * C47481) *
               C47369 * C3094 +
           ((C5823 - C5822 + C5825 - C5824) * C10231 +
            (C5827 - C5826 + C5829 - C5828) * C10229 +
            (C5830 - C5831 + C5832 - C5833) * C10232 +
            (C5834 - C5835 + C5836 - C5837) * C47481) *
               C47369 * C47268) *
              C47493 +
          (((C5645 - C5644 + C5647 - C5646) * C10231 +
            (C5649 - C5648 + C5651 - C5650) * C10229 +
            (C6316 - C6317 + C6318 - C6319) * C10232 +
            (C6320 - C6321 + C6322 - C6323) * C47481) *
               C47369 * C3094 +
           ((C6317 - C6316 + C6319 - C6318) * C10231 +
            (C6321 - C6320 + C6323 - C6322) * C10229 +
            (C4575 * C5807 - C4579 * C5805 + C47448 * C5808 - C4580 * C5806) *
                C10232 +
            (C4575 * C5811 - C4579 * C5809 + C47448 * C5812 - C4580 * C5810) *
                C47481) *
               C47369 * C47268) *
              C47471) *
         C47135) /
            (p * q * std::sqrt(p + q));
    d2ee[60] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4575 * C124 - C4579 * C117 + C47448 * C125 - C4580 * C118) *
                C10231 +
            (C4575 * C138 - C4579 * C127 + C47448 * C139 - C4580 * C128) *
                C10229 +
            (C10526 - C10527 + C10528 - C10529) * C10232 +
            (C10530 - C10531 + C10532 - C10533) * C47481) *
               C47369 * C47181 * C1284 +
           ((C4729 - C4728 + C4731 - C4730) * C10231 +
            (C4733 - C4732 + C4735 - C4734) * C10229 +
            (C5384 - C5385 + C5386 - C5387) * C10232 +
            (C5388 - C5389 + C5390 - C5391) * C47481) *
               C47369 * C47181 * C1285 +
           ((C4737 - C4736 + C4739 - C4738) * C10231 +
            (C4741 - C4740 + C4743 - C4742) * C10229 +
            (C5822 - C5823 + C5824 - C5825) * C10232 +
            (C5826 - C5827 + C5828 - C5829) * C47481) *
               C47369 * C47181 * C1286 +
           ((C5645 - C5644 + C5647 - C5646) * C10231 +
            (C5649 - C5648 + C5651 - C5650) * C10229 +
            (C6316 - C6317 + C6318 - C6319) * C10232 +
            (C6320 - C6321 + C6322 - C6323) * C47481) *
               C47369 * C47181 * C47471) *
              C47415 +
          (((C4579 * C118 - C4575 * C125 + C4580 * C119 - C47448 * C126) *
                C10231 +
            (C4579 * C128 - C4575 * C139 + C4580 * C129 - C47448 * C140) *
                C10229 +
            (C10542 - C10543 + C10544 - C10545) * C10232 +
            (C10546 - C10547 + C10548 - C10549) * C47481) *
               C47369 * C47181 * C1284 +
           ((C4745 - C4744 + C4747 - C4746) * C10231 +
            (C4749 - C4748 + C4751 - C4750) * C10229 +
            (C5392 - C5393 + C5394 - C5395) * C10232 +
            (C5396 - C5397 + C5398 - C5399) * C47481) *
               C47369 * C47181 * C1285 +
           ((C4753 - C4752 + C4755 - C4754) * C10231 +
            (C4757 - C4756 + C4759 - C4758) * C10229 +
            (C6170 - C6171 + C6172 - C6173) * C10232 +
            (C6174 - C6175 + C6176 - C6177) * C47481) *
               C47369 * C47181 * C1286 +
           ((C5969 - C5968 + C5971 - C5970) * C10231 +
            (C5973 - C5972 + C5975 - C5974) * C10229 +
            (C4575 * C1546 - C4579 * C1543 + C47448 * C1547 - C4580 * C1544) *
                C10232 +
            (C4575 * C1552 - C4579 * C1549 + C47448 * C1553 - C4580 * C1550) *
                C47481) *
               C47369 * C47181 * C47471) *
              C47146)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4575 * C124 - C4579 * C117 + C47448 * C125 - C4580 * C118) *
                C10231 +
            (C4575 * C138 - C4579 * C127 + C47448 * C139 - C4580 * C128) *
                C10229 +
            (C10526 - C10527 + C10528 - C10529) * C10232 +
            (C10530 - C10531 + C10532 - C10533) * C47481) *
               C47369 * C47181 * C47429 +
           ((C4729 - C4728 + C4731 - C4730) * C10231 +
            (C4733 - C4732 + C4735 - C4734) * C10229 +
            (C5384 - C5385 + C5386 - C5387) * C10232 +
            (C5388 - C5389 + C5390 - C5391) * C47481) *
               C47369 * C47181 * C47226) *
              C554 +
          (((C4579 * C118 - C4575 * C125 + C4580 * C119 - C47448 * C126) *
                C10231 +
            (C4579 * C128 - C4575 * C139 + C4580 * C129 - C47448 * C140) *
                C10229 +
            (C10542 - C10543 + C10544 - C10545) * C10232 +
            (C10546 - C10547 + C10548 - C10549) * C47481) *
               C47369 * C47181 * C47429 +
           ((C4745 - C4744 + C4747 - C4746) * C10231 +
            (C4749 - C4748 + C4751 - C4750) * C10229 +
            (C5392 - C5393 + C5394 - C5395) * C10232 +
            (C5396 - C5397 + C5398 - C5399) * C47481) *
               C47369 * C47181 * C47226) *
              C555 +
          (((C4575 * C126 - C4579 * C119 + C47448 * C130 - C4580 * C120) *
                C10231 +
            (C4575 * C140 - C4579 * C129 + C47448 * C141 - C4580 * C131) *
                C10229 +
            (C10558 - C10559 + C10560 - C10561) * C10232 +
            (C10562 - C10563 + C10564 - C10565) * C47481) *
               C47369 * C47181 * C47429 +
           ((C4761 - C4760 + C4763 - C4762) * C10231 +
            (C4765 - C4764 + C4767 - C4766) * C10229 +
            (C5400 - C5401 + C5402 - C5403) * C10232 +
            (C5404 - C5405 + C5406 - C5407) * C47481) *
               C47369 * C47181 * C47226) *
              C556 +
          (((C4579 * C120 - C4575 * C130 + C4580 * C121 - C47448 * C132) *
                C10231 +
            (C4579 * C131 - C4575 * C141 + C4580 * C133 - C47448 * C142) *
                C10229 +
            (C4579 * C420 - C4575 * C436 + C4580 * C422 - C47448 * C440) *
                C10232 +
            (C4579 * C437 - C4575 * C450 + C4580 * C441 - C47448 * C452) *
                C47481) *
               C47369 * C47181 * C47429 +
           ((C5053 - C5052 + C5055 - C5054) * C10231 +
            (C5057 - C5056 + C5059 - C5058) * C10229 +
            (C4575 * C823 - C4579 * C815 + C47448 * C825 - C4580 * C816) *
                C10232 +
            (C4575 * C830 - C4579 * C824 + C47448 * C831 - C4580 * C826) *
                C47481) *
               C47369 * C47181 * C47226) *
              C47465)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C4575 * C124 - C4579 * C117 + C47448 * C125 - C4580 * C118) *
                 C10231 +
             (C4575 * C138 - C4579 * C127 + C47448 * C139 - C4580 * C128) *
                 C10229 +
             (C10526 - C10527 + C10528 - C10529) * C10232 +
             (C10530 - C10531 + C10532 - C10533) * C47481) *
                C47369 * C1664 +
            ((C10527 - C10526 + C10529 - C10528) * C10231 +
             (C10531 - C10530 + C10533 - C10532) * C10229 +
             (C10534 - C10535 + C10536 - C10537) * C10232 +
             (C10538 - C10539 + C10540 - C10541) * C47481) *
                C47369 * C1665 +
            ((C10535 - C10534 + C10537 - C10536) * C10231 +
             (C10539 - C10538 + C10541 - C10540) * C10229 +
             (C12246 - C12247 + C12248 - C12249) * C10232 +
             (C12250 - C12251 + C12252 - C12253) * C47481) *
                C47369 * C47464) *
               C47429 +
           (((C4729 - C4728 + C4731 - C4730) * C10231 +
             (C4733 - C4732 + C4735 - C4734) * C10229 +
             (C5384 - C5385 + C5386 - C5387) * C10232 +
             (C5388 - C5389 + C5390 - C5391) * C47481) *
                C47369 * C1664 +
            ((C5385 - C5384 + C5387 - C5386) * C10231 +
             (C5389 - C5388 + C5391 - C5390) * C10229 +
             (C5814 - C5815 + C5816 - C5817) * C10232 +
             (C5818 - C5819 + C5820 - C5821) * C47481) *
                C47369 * C1665 +
            ((C5815 - C5814 + C5817 - C5816) * C10231 +
             (C5819 - C5818 + C5821 - C5820) * C10229 +
             (C7176 - C7177 + C7178 - C7179) * C10232 +
             (C7180 - C7181 + C7182 - C7183) * C47481) *
                C47369 * C47464) *
               C47226) *
              C47415 +
          ((((C4579 * C118 - C4575 * C125 + C4580 * C119 - C47448 * C126) *
                 C10231 +
             (C4579 * C128 - C4575 * C139 + C4580 * C129 - C47448 * C140) *
                 C10229 +
             (C10542 - C10543 + C10544 - C10545) * C10232 +
             (C10546 - C10547 + C10548 - C10549) * C47481) *
                C47369 * C1664 +
            ((C10543 - C10542 + C10545 - C10544) * C10231 +
             (C10547 - C10546 + C10549 - C10548) * C10229 +
             (C10550 - C10551 + C10552 - C10553) * C10232 +
             (C10554 - C10555 + C10556 - C10557) * C47481) *
                C47369 * C1665 +
            ((C10551 - C10550 + C10553 - C10552) * C10231 +
             (C10555 - C10554 + C10557 - C10556) * C10229 +
             (C4579 * C1845 - C4575 * C1851 + C4580 * C1846 - C47448 * C1852) *
                 C10232 +
             (C4579 * C1854 - C4575 * C1863 + C4580 * C1855 - C47448 * C1864) *
                 C47481) *
                C47369 * C47464) *
               C47429 +
           (((C4745 - C4744 + C4747 - C4746) * C10231 +
             (C4749 - C4748 + C4751 - C4750) * C10229 +
             (C5392 - C5393 + C5394 - C5395) * C10232 +
             (C5396 - C5397 + C5398 - C5399) * C47481) *
                C47369 * C1664 +
            ((C5393 - C5392 + C5395 - C5394) * C10231 +
             (C5397 - C5396 + C5399 - C5398) * C10229 +
             (C6900 - C6901 + C6902 - C6903) * C10232 +
             (C6904 - C6905 + C6906 - C6907) * C47481) *
                C47369 * C1665 +
            ((C6901 - C6900 + C6903 - C6902) * C10231 +
             (C6905 - C6904 + C6907 - C6906) * C10229 +
             (C4575 * C2226 - C4579 * C2223 + C47448 * C2227 - C4580 * C2224) *
                 C10232 +
             (C4575 * C2232 - C4579 * C2229 + C47448 * C2233 - C4580 * C2230) *
                 C47481) *
                C47369 * C47464) *
               C47226) *
              C47146)) /
            (p * q * std::sqrt(p + q));
    d2ee[61] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4575 * C124 - C4579 * C117 + C47448 * C125 - C4580 * C118) *
                C10231 +
            (C4575 * C138 - C4579 * C127 + C47448 * C139 - C4580 * C128) *
                C10229 +
            (C10526 - C10527 + C10528 - C10529) * C10232 +
            (C10530 - C10531 + C10532 - C10533) * C47481) *
               C47369 * C47430 +
           ((C10527 - C10526 + C10529 - C10528) * C10231 +
            (C10531 - C10530 + C10533 - C10532) * C10229 +
            (C10534 - C10535 + C10536 - C10537) * C10232 +
            (C10538 - C10539 + C10540 - C10541) * C47481) *
               C47369 * C47268) *
              C1284 +
          (((C4729 - C4728 + C4731 - C4730) * C10231 +
            (C4733 - C4732 + C4735 - C4734) * C10229 +
            (C5384 - C5385 + C5386 - C5387) * C10232 +
            (C5388 - C5389 + C5390 - C5391) * C47481) *
               C47369 * C47430 +
           ((C5385 - C5384 + C5387 - C5386) * C10231 +
            (C5389 - C5388 + C5391 - C5390) * C10229 +
            (C5814 - C5815 + C5816 - C5817) * C10232 +
            (C5818 - C5819 + C5820 - C5821) * C47481) *
               C47369 * C47268) *
              C1285 +
          (((C4737 - C4736 + C4739 - C4738) * C10231 +
            (C4741 - C4740 + C4743 - C4742) * C10229 +
            (C5822 - C5823 + C5824 - C5825) * C10232 +
            (C5826 - C5827 + C5828 - C5829) * C47481) *
               C47369 * C47430 +
           ((C5823 - C5822 + C5825 - C5824) * C10231 +
            (C5827 - C5826 + C5829 - C5828) * C10229 +
            (C5830 - C5831 + C5832 - C5833) * C10232 +
            (C5834 - C5835 + C5836 - C5837) * C47481) *
               C47369 * C47268) *
              C1286 +
          (((C5645 - C5644 + C5647 - C5646) * C10231 +
            (C5649 - C5648 + C5651 - C5650) * C10229 +
            (C6316 - C6317 + C6318 - C6319) * C10232 +
            (C6320 - C6321 + C6322 - C6323) * C47481) *
               C47369 * C47430 +
           ((C6317 - C6316 + C6319 - C6318) * C10231 +
            (C6321 - C6320 + C6323 - C6322) * C10229 +
            (C4575 * C5807 - C4579 * C5805 + C47448 * C5808 - C4580 * C5806) *
                C10232 +
            (C4575 * C5811 - C4579 * C5809 + C47448 * C5812 - C4580 * C5810) *
                C47481) *
               C47369 * C47268) *
              C47471) *
         C47135) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C4575 * C124 - C4579 * C117 + C47448 * C125 - C4580 * C118) *
                 C10231 +
             (C4575 * C138 - C4579 * C127 + C47448 * C139 - C4580 * C128) *
                 C10229 +
             (C10526 - C10527 + C10528 - C10529) * C10232 +
             (C10530 - C10531 + C10532 - C10533) * C47481) *
                C47369 * C47430 +
            ((C10527 - C10526 + C10529 - C10528) * C10231 +
             (C10531 - C10530 + C10533 - C10532) * C10229 +
             (C10534 - C10535 + C10536 - C10537) * C10232 +
             (C10538 - C10539 + C10540 - C10541) * C47481) *
                C47369 * C47268) *
               C47429 +
           (((C4729 - C4728 + C4731 - C4730) * C10231 +
             (C4733 - C4732 + C4735 - C4734) * C10229 +
             (C5384 - C5385 + C5386 - C5387) * C10232 +
             (C5388 - C5389 + C5390 - C5391) * C47481) *
                C47369 * C47430 +
            ((C5385 - C5384 + C5387 - C5386) * C10231 +
             (C5389 - C5388 + C5391 - C5390) * C10229 +
             (C5814 - C5815 + C5816 - C5817) * C10232 +
             (C5818 - C5819 + C5820 - C5821) * C47481) *
                C47369 * C47268) *
               C47226) *
              C258 +
          ((((C4579 * C118 - C4575 * C125 + C4580 * C119 - C47448 * C126) *
                 C10231 +
             (C4579 * C128 - C4575 * C139 + C4580 * C129 - C47448 * C140) *
                 C10229 +
             (C10542 - C10543 + C10544 - C10545) * C10232 +
             (C10546 - C10547 + C10548 - C10549) * C47481) *
                C47369 * C47430 +
            ((C10543 - C10542 + C10545 - C10544) * C10231 +
             (C10547 - C10546 + C10549 - C10548) * C10229 +
             (C10550 - C10551 + C10552 - C10553) * C10232 +
             (C10554 - C10555 + C10556 - C10557) * C47481) *
                C47369 * C47268) *
               C47429 +
           (((C4745 - C4744 + C4747 - C4746) * C10231 +
             (C4749 - C4748 + C4751 - C4750) * C10229 +
             (C5392 - C5393 + C5394 - C5395) * C10232 +
             (C5396 - C5397 + C5398 - C5399) * C47481) *
                C47369 * C47430 +
            ((C5393 - C5392 + C5395 - C5394) * C10231 +
             (C5397 - C5396 + C5399 - C5398) * C10229 +
             (C6900 - C6901 + C6902 - C6903) * C10232 +
             (C6904 - C6905 + C6906 - C6907) * C47481) *
                C47369 * C47268) *
               C47226) *
              C259 +
          ((((C4575 * C126 - C4579 * C119 + C47448 * C130 - C4580 * C120) *
                 C10231 +
             (C4575 * C140 - C4579 * C129 + C47448 * C141 - C4580 * C131) *
                 C10229 +
             (C10558 - C10559 + C10560 - C10561) * C10232 +
             (C10562 - C10563 + C10564 - C10565) * C47481) *
                C47369 * C47430 +
            ((C10559 - C10558 + C10561 - C10560) * C10231 +
             (C10563 - C10562 + C10565 - C10564) * C10229 +
             (C10566 - C10567 + C10568 - C10569) * C10232 +
             (C10570 - C10571 + C10572 - C10573) * C47481) *
                C47369 * C47268) *
               C47429 +
           (((C4761 - C4760 + C4763 - C4762) * C10231 +
             (C4765 - C4764 + C4767 - C4766) * C10229 +
             (C5400 - C5401 + C5402 - C5403) * C10232 +
             (C5404 - C5405 + C5406 - C5407) * C47481) *
                C47369 * C47430 +
            ((C5401 - C5400 + C5403 - C5402) * C10231 +
             (C5405 - C5404 + C5407 - C5406) * C10229 +
             (C4575 * C1161 - C4579 * C1152 + C47448 * C2015 - C4580 * C2014) *
                 C10232 +
             (C4575 * C1179 - C4579 * C1164 + C47448 * C2017 - C4580 * C2016) *
                 C47481) *
                C47369 * C47268) *
               C47226) *
              C47455)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C4575 * C124 - C4579 * C117 + C47448 * C125 - C4580 * C118) *
                C10231 +
            (C4575 * C138 - C4579 * C127 + C47448 * C139 - C4580 * C128) *
                C10229 +
            (C10526 - C10527 + C10528 - C10529) * C10232 +
            (C10530 - C10531 + C10532 - C10533) * C47481) *
               C47369 * C2116 +
           ((C10527 - C10526 + C10529 - C10528) * C10231 +
            (C10531 - C10530 + C10533 - C10532) * C10229 +
            (C10534 - C10535 + C10536 - C10537) * C10232 +
            (C10538 - C10539 + C10540 - C10541) * C47481) *
               C47369 * C2117 +
           ((C10535 - C10534 + C10537 - C10536) * C10231 +
            (C10539 - C10538 + C10541 - C10540) * C10229 +
            (C12246 - C12247 + C12248 - C12249) * C10232 +
            (C12250 - C12251 + C12252 - C12253) * C47481) *
               C47369 * C2118 +
           ((C12247 - C12246 + C12249 - C12248) * C10231 +
            (C12251 - C12250 + C12253 - C12252) * C10229 +
            (C12254 - C12255 + C12256 - C12257) * C10232 +
            (C12258 - C12259 + C12260 - C12261) * C47481) *
               C47369 * C47477) *
              C47429 +
          (((C4729 - C4728 + C4731 - C4730) * C10231 +
            (C4733 - C4732 + C4735 - C4734) * C10229 +
            (C5384 - C5385 + C5386 - C5387) * C10232 +
            (C5388 - C5389 + C5390 - C5391) * C47481) *
               C47369 * C2116 +
           ((C5385 - C5384 + C5387 - C5386) * C10231 +
            (C5389 - C5388 + C5391 - C5390) * C10229 +
            (C5814 - C5815 + C5816 - C5817) * C10232 +
            (C5818 - C5819 + C5820 - C5821) * C47481) *
               C47369 * C2117 +
           ((C5815 - C5814 + C5817 - C5816) * C10231 +
            (C5819 - C5818 + C5821 - C5820) * C10229 +
            (C7176 - C7177 + C7178 - C7179) * C10232 +
            (C7180 - C7181 + C7182 - C7183) * C47481) *
               C47369 * C2118 +
           ((C7177 - C7176 + C7179 - C7178) * C10231 +
            (C7181 - C7180 + C7183 - C7182) * C10229 +
            (C4575 * C6699 - C4579 * C6697 + C47448 * C6700 - C4580 * C6698) *
                C10232 +
            (C4575 * C6703 - C4579 * C6701 + C47448 * C6704 - C4580 * C6702) *
                C47481) *
               C47369 * C47477) *
              C47226) *
         C47135) /
            (p * q * std::sqrt(p + q));
    d2ee[62] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((C4575 * C124 - C4579 * C117 + C47448 * C125 - C4580 * C118) *
                   C10231 +
               (C4575 * C138 - C4579 * C127 + C47448 * C139 - C4580 * C128) *
                   C10229 +
               (C4575 * C424 - C4579 * C414 + C47448 * C425 - C4580 * C415) *
                   C10232 +
               (C4575 * C444 - C4579 * C427 + C47448 * C445 - C4580 * C428) *
                   C47481) *
                  C47369 * C47181 * C47163 * C108 +
              ((C4579 * C118 - C4575 * C125 + C4580 * C119 - C47448 * C126) *
                   C10231 +
               (C4579 * C128 - C4575 * C139 + C4580 * C129 - C47448 * C140) *
                   C10229 +
               (C4579 * C415 - C4575 * C425 + C4580 * C416 - C47448 * C426) *
                   C10232 +
               (C4579 * C428 - C4575 * C445 + C4580 * C429 - C47448 * C446) *
                   C47481) *
                  C47369 * C47181 * C47163 * C109 +
              ((C4575 * C126 - C4579 * C119 + C47448 * C130 - C4580 * C120) *
                   C10231 +
               (C4575 * C140 - C4579 * C129 + C47448 * C141 - C4580 * C131) *
                   C10229 +
               (C4575 * C426 - C4579 * C416 + C47448 * C436 - C4580 * C420) *
                   C10232 +
               (C4575 * C446 - C4579 * C429 + C47448 * C450 - C4580 * C437) *
                   C47481) *
                  C47369 * C47181 * C47163 * C110 +
              ((C4579 * C120 - C4575 * C130 + C4580 * C121 - C47448 * C132) *
                   C10231 +
               (C4579 * C131 - C4575 * C141 + C4580 * C133 - C47448 * C142) *
                   C10229 +
               (C4579 * C420 - C4575 * C436 + C4580 * C422 - C47448 * C440) *
                   C10232 +
               (C4579 * C437 - C4575 * C450 + C4580 * C441 - C47448 * C452) *
                   C47481) *
                  C47369 * C47181 * C47163 * C111 +
              ((C4575 * C132 - C4579 * C121 + C47448 * C134 - C4580 * C122) *
                   C10231 +
               (C4575 * C142 - C4579 * C133 + C47448 * C143 - C4580 * C135) *
                   C10229 +
               (C4575 * C440 - C4579 * C422 + C47448 * C663 - C4580 * C662) *
                   C10232 +
               (C4575 * C452 - C4579 * C441 + C47448 * C665 - C4580 * C664) *
                   C47481) *
                  C47369 * C47181 * C47163 * C112) +
         0.5 * std::pow(Pi, 2.5) *
             ((((C4575 * C124 - C4579 * C117 + C47448 * C125 - C4580 * C118) *
                    C10231 +
                (C4575 * C138 - C4579 * C127 + C47448 * C139 - C4580 * C128) *
                    C10229 +
                (C4575 * C424 - C4579 * C414 + C47448 * C425 - C4580 * C415) *
                    C10232 +
                (C4575 * C444 - C4579 * C427 + C47448 * C445 - C4580 * C428) *
                    C47481) *
                   C47369 * C47181 * C47500 +
               ((C4729 - C4728 + C4731 - C4730) * C10231 +
                (C4733 - C4732 + C4735 - C4734) * C10229 +
                (C5384 - C5385 + C5386 - C5387) * C10232 +
                (C5388 - C5389 + C5390 - C5391) * C47481) *
                   C47369 * C47181 * C47488 +
               ((C4737 - C4736 + C4739 - C4738) * C10231 +
                (C4741 - C4740 + C4743 - C4742) * C10229 +
                (C5822 - C5823 + C5824 - C5825) * C10232 +
                (C5826 - C5827 + C5828 - C5829) * C47481) *
                   C47369 * C47181 * C47461) *
                  C258 +
              (((C4579 * C118 - C4575 * C125 + C4580 * C119 - C47448 * C126) *
                    C10231 +
                (C4579 * C128 - C4575 * C139 + C4580 * C129 - C47448 * C140) *
                    C10229 +
                (C4579 * C415 - C4575 * C425 + C4580 * C416 - C47448 * C426) *
                    C10232 +
                (C4579 * C428 - C4575 * C445 + C4580 * C429 - C47448 * C446) *
                    C47481) *
                   C47369 * C47181 * C47500 +
               ((C4745 - C4744 + C4747 - C4746) * C10231 +
                (C4749 - C4748 + C4751 - C4750) * C10229 +
                (C5392 - C5393 + C5394 - C5395) * C10232 +
                (C5396 - C5397 + C5398 - C5399) * C47481) *
                   C47369 * C47181 * C47488 +
               ((C4753 - C4752 + C4755 - C4754) * C10231 +
                (C4757 - C4756 + C4759 - C4758) * C10229 +
                (C6170 - C6171 + C6172 - C6173) * C10232 +
                (C6174 - C6175 + C6176 - C6177) * C47481) *
                   C47369 * C47181 * C47461) *
                  C259 +
              (((C4575 * C126 - C4579 * C119 + C47448 * C130 - C4580 * C120) *
                    C10231 +
                (C4575 * C140 - C4579 * C129 + C47448 * C141 - C4580 * C131) *
                    C10229 +
                (C4575 * C426 - C4579 * C416 + C47448 * C436 - C4580 * C420) *
                    C10232 +
                (C4575 * C446 - C4579 * C429 + C47448 * C450 - C4580 * C437) *
                    C47481) *
                   C47369 * C47181 * C47500 +
               ((C4761 - C4760 + C4763 - C4762) * C10231 +
                (C4765 - C4764 + C4767 - C4766) * C10229 +
                (C5400 - C5401 + C5402 - C5403) * C10232 +
                (C5404 - C5405 + C5406 - C5407) * C47481) *
                   C47369 * C47181 * C47488 +
               ((C4769 - C4768 + C4771 - C4770) * C10231 +
                (C4773 - C4772 + C4775 - C4774) * C10229 +
                (C4575 * C1167 - C4579 * C1155 + C47448 * C1441 -
                 C4580 * C1440) *
                    C10232 +
                (C4575 * C1182 - C4579 * C1170 + C47448 * C1443 -
                 C4580 * C1442) *
                    C47481) *
                   C47369 * C47181 * C47461) *
                  C47455)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C4575 * C124 - C4579 * C117 + C47448 * C125 - C4580 * C118) *
                C10231 +
            (C4575 * C138 - C4579 * C127 + C47448 * C139 - C4580 * C128) *
                C10229 +
            (C10526 - C10527 + C10528 - C10529) * C10232 +
            (C10530 - C10531 + C10532 - C10533) * C47481) *
               C47369 * C47501 +
           ((C10527 - C10526 + C10529 - C10528) * C10231 +
            (C10531 - C10530 + C10533 - C10532) * C10229 +
            (C10534 - C10535 + C10536 - C10537) * C10232 +
            (C10538 - C10539 + C10540 - C10541) * C47481) *
               C47369 * C47490 +
           ((C10535 - C10534 + C10537 - C10536) * C10231 +
            (C10539 - C10538 + C10541 - C10540) * C10229 +
            (C4575 * C1850 - C4579 * C1844 + C47448 * C1851 - C4580 * C1845) *
                C10232 +
            (C4575 * C1862 - C4579 * C1853 + C47448 * C1863 - C4580 * C1854) *
                C47481) *
               C47369 * C47464) *
              C47163 * C258 +
          (((C4579 * C118 - C4575 * C125 + C4580 * C119 - C47448 * C126) *
                C10231 +
            (C4579 * C128 - C4575 * C139 + C4580 * C129 - C47448 * C140) *
                C10229 +
            (C10542 - C10543 + C10544 - C10545) * C10232 +
            (C10546 - C10547 + C10548 - C10549) * C47481) *
               C47369 * C47501 +
           ((C10543 - C10542 + C10545 - C10544) * C10231 +
            (C10547 - C10546 + C10549 - C10548) * C10229 +
            (C10550 - C10551 + C10552 - C10553) * C10232 +
            (C10554 - C10555 + C10556 - C10557) * C47481) *
               C47369 * C47490 +
           ((C10551 - C10550 + C10553 - C10552) * C10231 +
            (C10555 - C10554 + C10557 - C10556) * C10229 +
            (C4579 * C1845 - C4575 * C1851 + C4580 * C1846 - C47448 * C1852) *
                C10232 +
            (C4579 * C1854 - C4575 * C1863 + C4580 * C1855 - C47448 * C1864) *
                C47481) *
               C47369 * C47464) *
              C47163 * C259 +
          (((C4575 * C126 - C4579 * C119 + C47448 * C130 - C4580 * C120) *
                C10231 +
            (C4575 * C140 - C4579 * C129 + C47448 * C141 - C4580 * C131) *
                C10229 +
            (C10558 - C10559 + C10560 - C10561) * C10232 +
            (C10562 - C10563 + C10564 - C10565) * C47481) *
               C47369 * C47501 +
           ((C10559 - C10558 + C10561 - C10560) * C10231 +
            (C10563 - C10562 + C10565 - C10564) * C10229 +
            (C10566 - C10567 + C10568 - C10569) * C10232 +
            (C10570 - C10571 + C10572 - C10573) * C47481) *
               C47369 * C47490 +
           ((C10567 - C10566 + C10569 - C10568) * C10231 +
            (C10571 - C10570 + C10573 - C10572) * C10229 +
            (C4575 * C1852 - C4579 * C1846 + C47448 * C2121 - C4580 * C2120) *
                C10232 +
            (C4575 * C1864 - C4579 * C1855 + C47448 * C2123 - C4580 * C2122) *
                C47481) *
               C47369 * C47464) *
              C47163 * C47455)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C4575 * C124 - C4579 * C117 + C47448 * C125 - C4580 * C118) *
                C10231 +
            (C4575 * C138 - C4579 * C127 + C47448 * C139 - C4580 * C128) *
                C10229 +
            (C10526 - C10527 + C10528 - C10529) * C10232 +
            (C10530 - C10531 + C10532 - C10533) * C47481) *
               C47369 * C47181 * C942 +
           ((C4729 - C4728 + C4731 - C4730) * C10231 +
            (C4733 - C4732 + C4735 - C4734) * C10229 +
            (C5384 - C5385 + C5386 - C5387) * C10232 +
            (C5388 - C5389 + C5390 - C5391) * C47481) *
               C47369 * C47181 * C943 +
           ((C4737 - C4736 + C4739 - C4738) * C10231 +
            (C4741 - C4740 + C4743 - C4742) * C10229 +
            (C5822 - C5823 + C5824 - C5825) * C10232 +
            (C5826 - C5827 + C5828 - C5829) * C47481) *
               C47369 * C47181 * C47461) *
              C47497 +
          (((C4579 * C118 - C4575 * C125 + C4580 * C119 - C47448 * C126) *
                C10231 +
            (C4579 * C128 - C4575 * C139 + C4580 * C129 - C47448 * C140) *
                C10229 +
            (C10542 - C10543 + C10544 - C10545) * C10232 +
            (C10546 - C10547 + C10548 - C10549) * C47481) *
               C47369 * C47181 * C942 +
           ((C4745 - C4744 + C4747 - C4746) * C10231 +
            (C4749 - C4748 + C4751 - C4750) * C10229 +
            (C5392 - C5393 + C5394 - C5395) * C10232 +
            (C5396 - C5397 + C5398 - C5399) * C47481) *
               C47369 * C47181 * C943 +
           ((C4753 - C4752 + C4755 - C4754) * C10231 +
            (C4757 - C4756 + C4759 - C4758) * C10229 +
            (C6170 - C6171 + C6172 - C6173) * C10232 +
            (C6174 - C6175 + C6176 - C6177) * C47481) *
               C47369 * C47181 * C47461) *
              C47484 +
          (((C4575 * C126 - C4579 * C119 + C47448 * C130 - C4580 * C120) *
                C10231 +
            (C4575 * C140 - C4579 * C129 + C47448 * C141 - C4580 * C131) *
                C10229 +
            (C10558 - C10559 + C10560 - C10561) * C10232 +
            (C10562 - C10563 + C10564 - C10565) * C47481) *
               C47369 * C47181 * C942 +
           ((C4761 - C4760 + C4763 - C4762) * C10231 +
            (C4765 - C4764 + C4767 - C4766) * C10229 +
            (C5400 - C5401 + C5402 - C5403) * C10232 +
            (C5404 - C5405 + C5406 - C5407) * C47481) *
               C47369 * C47181 * C943 +
           ((C4769 - C4768 + C4771 - C4770) * C10231 +
            (C4773 - C4772 + C4775 - C4774) * C10229 +
            (C4575 * C1167 - C4579 * C1155 + C47448 * C1441 - C4580 * C1440) *
                C10232 +
            (C4575 * C1182 - C4579 * C1170 + C47448 * C1443 - C4580 * C1442) *
                C47481) *
               C47369 * C47181 * C47461) *
              C47455)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C4575 * C124 - C4579 * C117 + C47448 * C125 - C4580 * C118) *
               C10231 +
           (C4575 * C138 - C4579 * C127 + C47448 * C139 - C4580 * C128) *
               C10229 +
           (C10526 - C10527 + C10528 - C10529) * C10232 +
           (C10530 - C10531 + C10532 - C10533) * C47481) *
              C47369 * C47181 * C1010 +
          ((C4729 - C4728 + C4731 - C4730) * C10231 +
           (C4733 - C4732 + C4735 - C4734) * C10229 +
           (C5384 - C5385 + C5386 - C5387) * C10232 +
           (C5388 - C5389 + C5390 - C5391) * C47481) *
              C47369 * C47181 * C1011 +
          ((C4737 - C4736 + C4739 - C4738) * C10231 +
           (C4741 - C4740 + C4743 - C4742) * C10229 +
           (C5822 - C5823 + C5824 - C5825) * C10232 +
           (C5826 - C5827 + C5828 - C5829) * C47481) *
              C47369 * C47181 * C1012 +
          ((C5645 - C5644 + C5647 - C5646) * C10231 +
           (C5649 - C5648 + C5651 - C5650) * C10229 +
           (C6316 - C6317 + C6318 - C6319) * C10232 +
           (C6320 - C6321 + C6322 - C6323) * C47481) *
              C47369 * C47181 * C1013 +
          ((C5653 - C5652 + C5655 - C5654) * C10231 +
           (C5657 - C5656 + C5659 - C5658) * C10229 +
           (C4575 * C6309 - C4579 * C6307 + C47448 * C6310 - C4580 * C6308) *
               C10232 +
           (C4575 * C6313 - C4579 * C6311 + C47448 * C6314 - C4580 * C6312) *
               C47481) *
              C47369 * C47181 * C1014) *
         C47135) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C4575 * C124 - C4579 * C117 + C47448 * C125 - C4580 * C118) *
                C10231 +
            (C4575 * C138 - C4579 * C127 + C47448 * C139 - C4580 * C128) *
                C10229 +
            (C10526 - C10527 + C10528 - C10529) * C10232 +
            (C10530 - C10531 + C10532 - C10533) * C47481) *
               C47369 * C47501 +
           ((C10527 - C10526 + C10529 - C10528) * C10231 +
            (C10531 - C10530 + C10533 - C10532) * C10229 +
            (C10534 - C10535 + C10536 - C10537) * C10232 +
            (C10538 - C10539 + C10540 - C10541) * C47481) *
               C47369 * C47490 +
           ((C10535 - C10534 + C10537 - C10536) * C10231 +
            (C10539 - C10538 + C10541 - C10540) * C10229 +
            (C4575 * C1850 - C4579 * C1844 + C47448 * C1851 - C4580 * C1845) *
                C10232 +
            (C4575 * C1862 - C4579 * C1853 + C47448 * C1863 - C4580 * C1854) *
                C47481) *
               C47369 * C47464) *
              C942 +
          (((C4729 - C4728 + C4731 - C4730) * C10231 +
            (C4733 - C4732 + C4735 - C4734) * C10229 +
            (C5384 - C5385 + C5386 - C5387) * C10232 +
            (C5388 - C5389 + C5390 - C5391) * C47481) *
               C47369 * C47501 +
           ((C5385 - C5384 + C5387 - C5386) * C10231 +
            (C5389 - C5388 + C5391 - C5390) * C10229 +
            (C5814 - C5815 + C5816 - C5817) * C10232 +
            (C5818 - C5819 + C5820 - C5821) * C47481) *
               C47369 * C47490 +
           ((C5815 - C5814 + C5817 - C5816) * C10231 +
            (C5819 - C5818 + C5821 - C5820) * C10229 +
            (C7176 - C7177 + C7178 - C7179) * C10232 +
            (C7180 - C7181 + C7182 - C7183) * C47481) *
               C47369 * C47464) *
              C943 +
          (((C4737 - C4736 + C4739 - C4738) * C10231 +
            (C4741 - C4740 + C4743 - C4742) * C10229 +
            (C5822 - C5823 + C5824 - C5825) * C10232 +
            (C5826 - C5827 + C5828 - C5829) * C47481) *
               C47369 * C47501 +
           ((C5823 - C5822 + C5825 - C5824) * C10231 +
            (C5827 - C5826 + C5829 - C5828) * C10229 +
            (C5830 - C5831 + C5832 - C5833) * C10232 +
            (C5834 - C5835 + C5836 - C5837) * C47481) *
               C47369 * C47490 +
           ((C5831 - C5830 + C5833 - C5832) * C10231 +
            (C5835 - C5834 + C5837 - C5836) * C10229 +
            (C4575 * C7169 - C4579 * C7167 + C47448 * C7170 - C4580 * C7168) *
                C10232 +
            (C4575 * C7173 - C4579 * C7171 + C47448 * C7174 - C4580 * C7172) *
                C47481) *
               C47369 * C47464) *
              C47461) *
         C47135) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C4575 * C124 - C4579 * C117 + C47448 * C125 - C4580 * C118) *
                C10231 +
            (C4575 * C138 - C4579 * C127 + C47448 * C139 - C4580 * C128) *
                C10229 +
            (C10526 - C10527 + C10528 - C10529) * C10232 +
            (C10530 - C10531 + C10532 - C10533) * C47481) *
               C47369 * C1664 +
           ((C10527 - C10526 + C10529 - C10528) * C10231 +
            (C10531 - C10530 + C10533 - C10532) * C10229 +
            (C10534 - C10535 + C10536 - C10537) * C10232 +
            (C10538 - C10539 + C10540 - C10541) * C47481) *
               C47369 * C1665 +
           ((C10535 - C10534 + C10537 - C10536) * C10231 +
            (C10539 - C10538 + C10541 - C10540) * C10229 +
            (C4575 * C1850 - C4579 * C1844 + C47448 * C1851 - C4580 * C1845) *
                C10232 +
            (C4575 * C1862 - C4579 * C1853 + C47448 * C1863 - C4580 * C1854) *
                C47481) *
               C47369 * C47464) *
              C47163 * C47497 +
          (((C4579 * C118 - C4575 * C125 + C4580 * C119 - C47448 * C126) *
                C10231 +
            (C4579 * C128 - C4575 * C139 + C4580 * C129 - C47448 * C140) *
                C10229 +
            (C10542 - C10543 + C10544 - C10545) * C10232 +
            (C10546 - C10547 + C10548 - C10549) * C47481) *
               C47369 * C1664 +
           ((C10543 - C10542 + C10545 - C10544) * C10231 +
            (C10547 - C10546 + C10549 - C10548) * C10229 +
            (C10550 - C10551 + C10552 - C10553) * C10232 +
            (C10554 - C10555 + C10556 - C10557) * C47481) *
               C47369 * C1665 +
           ((C10551 - C10550 + C10553 - C10552) * C10231 +
            (C10555 - C10554 + C10557 - C10556) * C10229 +
            (C4579 * C1845 - C4575 * C1851 + C4580 * C1846 - C47448 * C1852) *
                C10232 +
            (C4579 * C1854 - C4575 * C1863 + C4580 * C1855 - C47448 * C1864) *
                C47481) *
               C47369 * C47464) *
              C47163 * C47484 +
          (((C4575 * C126 - C4579 * C119 + C47448 * C130 - C4580 * C120) *
                C10231 +
            (C4575 * C140 - C4579 * C129 + C47448 * C141 - C4580 * C131) *
                C10229 +
            (C10558 - C10559 + C10560 - C10561) * C10232 +
            (C10562 - C10563 + C10564 - C10565) * C47481) *
               C47369 * C1664 +
           ((C10559 - C10558 + C10561 - C10560) * C10231 +
            (C10563 - C10562 + C10565 - C10564) * C10229 +
            (C10566 - C10567 + C10568 - C10569) * C10232 +
            (C10570 - C10571 + C10572 - C10573) * C47481) *
               C47369 * C1665 +
           ((C10567 - C10566 + C10569 - C10568) * C10231 +
            (C10571 - C10570 + C10573 - C10572) * C10229 +
            (C4575 * C1852 - C4579 * C1846 + C47448 * C2121 - C4580 * C2120) *
                C10232 +
            (C4575 * C1864 - C4579 * C1855 + C47448 * C2123 - C4580 * C2122) *
                C47481) *
               C47369 * C47464) *
              C47163 * C47455)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C4575 * C124 - C4579 * C117 + C47448 * C125 - C4580 * C118) *
                C10231 +
            (C4575 * C138 - C4579 * C127 + C47448 * C139 - C4580 * C128) *
                C10229 +
            (C10526 - C10527 + C10528 - C10529) * C10232 +
            (C10530 - C10531 + C10532 - C10533) * C47481) *
               C47369 * C1664 +
           ((C10527 - C10526 + C10529 - C10528) * C10231 +
            (C10531 - C10530 + C10533 - C10532) * C10229 +
            (C10534 - C10535 + C10536 - C10537) * C10232 +
            (C10538 - C10539 + C10540 - C10541) * C47481) *
               C47369 * C1665 +
           ((C10535 - C10534 + C10537 - C10536) * C10231 +
            (C10539 - C10538 + C10541 - C10540) * C10229 +
            (C4575 * C1850 - C4579 * C1844 + C47448 * C1851 - C4580 * C1845) *
                C10232 +
            (C4575 * C1862 - C4579 * C1853 + C47448 * C1863 - C4580 * C1854) *
                C47481) *
               C47369 * C47464) *
              C47500 +
          (((C4729 - C4728 + C4731 - C4730) * C10231 +
            (C4733 - C4732 + C4735 - C4734) * C10229 +
            (C5384 - C5385 + C5386 - C5387) * C10232 +
            (C5388 - C5389 + C5390 - C5391) * C47481) *
               C47369 * C1664 +
           ((C5385 - C5384 + C5387 - C5386) * C10231 +
            (C5389 - C5388 + C5391 - C5390) * C10229 +
            (C5814 - C5815 + C5816 - C5817) * C10232 +
            (C5818 - C5819 + C5820 - C5821) * C47481) *
               C47369 * C1665 +
           ((C5815 - C5814 + C5817 - C5816) * C10231 +
            (C5819 - C5818 + C5821 - C5820) * C10229 +
            (C7176 - C7177 + C7178 - C7179) * C10232 +
            (C7180 - C7181 + C7182 - C7183) * C47481) *
               C47369 * C47464) *
              C47488 +
          (((C4737 - C4736 + C4739 - C4738) * C10231 +
            (C4741 - C4740 + C4743 - C4742) * C10229 +
            (C5822 - C5823 + C5824 - C5825) * C10232 +
            (C5826 - C5827 + C5828 - C5829) * C47481) *
               C47369 * C1664 +
           ((C5823 - C5822 + C5825 - C5824) * C10231 +
            (C5827 - C5826 + C5829 - C5828) * C10229 +
            (C5830 - C5831 + C5832 - C5833) * C10232 +
            (C5834 - C5835 + C5836 - C5837) * C47481) *
               C47369 * C1665 +
           ((C5831 - C5830 + C5833 - C5832) * C10231 +
            (C5835 - C5834 + C5837 - C5836) * C10229 +
            (C4575 * C7169 - C4579 * C7167 + C47448 * C7170 - C4580 * C7168) *
                C10232 +
            (C4575 * C7173 - C4579 * C7171 + C47448 * C7174 - C4580 * C7172) *
                C47481) *
               C47369 * C47464) *
              C47461) *
         C47135) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C4575 * C124 - C4579 * C117 + C47448 * C125 - C4580 * C118) *
               C10231 +
           (C4575 * C138 - C4579 * C127 + C47448 * C139 - C4580 * C128) *
               C10229 +
           (C10526 - C10527 + C10528 - C10529) * C10232 +
           (C10530 - C10531 + C10532 - C10533) * C47481) *
              C47369 * C1839 +
          ((C10527 - C10526 + C10529 - C10528) * C10231 +
           (C10531 - C10530 + C10533 - C10532) * C10229 +
           (C10534 - C10535 + C10536 - C10537) * C10232 +
           (C10538 - C10539 + C10540 - C10541) * C47481) *
              C47369 * C1840 +
          ((C10535 - C10534 + C10537 - C10536) * C10231 +
           (C10539 - C10538 + C10541 - C10540) * C10229 +
           (C12246 - C12247 + C12248 - C12249) * C10232 +
           (C12250 - C12251 + C12252 - C12253) * C47481) *
              C47369 * C1841 +
          ((C12247 - C12246 + C12249 - C12248) * C10231 +
           (C12251 - C12250 + C12253 - C12252) * C10229 +
           (C12254 - C12255 + C12256 - C12257) * C10232 +
           (C12258 - C12259 + C12260 - C12261) * C47481) *
              C47369 * C1842 +
          ((C12255 - C12254 + C12257 - C12256) * C10231 +
           (C12259 - C12258 + C12261 - C12260) * C10229 +
           (C4575 * C12239 - C4579 * C12237 + C47448 * C12240 -
            C4580 * C12238) *
               C10232 +
           (C4575 * C12243 - C4579 * C12241 + C47448 * C12244 -
            C4580 * C12242) *
               C47481) *
              C47369 * C1843) *
         C47163 * C47135) /
            (p * q * std::sqrt(p + q));
    d2ee[63] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C4575 * C124 - C4579 * C117 + C47448 * C125 - C4580 * C118) *
                 C10231 +
             (C4575 * C138 - C4579 * C127 + C47448 * C139 - C4580 * C128) *
                 C10229 +
             (C10526 - C10527 + C10528 - C10529) * C10232 +
             (C10530 - C10531 + C10532 - C10533) * C47481) *
                C47369 * C47430 +
            ((C10527 - C10526 + C10529 - C10528) * C10231 +
             (C10531 - C10530 + C10533 - C10532) * C10229 +
             (C10534 - C10535 + C10536 - C10537) * C10232 +
             (C10538 - C10539 + C10540 - C10541) * C47481) *
                C47369 * C47268) *
               C942 +
           (((C4729 - C4728 + C4731 - C4730) * C10231 +
             (C4733 - C4732 + C4735 - C4734) * C10229 +
             (C5384 - C5385 + C5386 - C5387) * C10232 +
             (C5388 - C5389 + C5390 - C5391) * C47481) *
                C47369 * C47430 +
            ((C5385 - C5384 + C5387 - C5386) * C10231 +
             (C5389 - C5388 + C5391 - C5390) * C10229 +
             (C5814 - C5815 + C5816 - C5817) * C10232 +
             (C5818 - C5819 + C5820 - C5821) * C47481) *
                C47369 * C47268) *
               C943 +
           (((C4737 - C4736 + C4739 - C4738) * C10231 +
             (C4741 - C4740 + C4743 - C4742) * C10229 +
             (C5822 - C5823 + C5824 - C5825) * C10232 +
             (C5826 - C5827 + C5828 - C5829) * C47481) *
                C47369 * C47430 +
            ((C5823 - C5822 + C5825 - C5824) * C10231 +
             (C5827 - C5826 + C5829 - C5828) * C10229 +
             (C5830 - C5831 + C5832 - C5833) * C10232 +
             (C5834 - C5835 + C5836 - C5837) * C47481) *
                C47369 * C47268) *
               C47461) *
              C47415 +
          ((((C4579 * C118 - C4575 * C125 + C4580 * C119 - C47448 * C126) *
                 C10231 +
             (C4579 * C128 - C4575 * C139 + C4580 * C129 - C47448 * C140) *
                 C10229 +
             (C10542 - C10543 + C10544 - C10545) * C10232 +
             (C10546 - C10547 + C10548 - C10549) * C47481) *
                C47369 * C47430 +
            ((C10543 - C10542 + C10545 - C10544) * C10231 +
             (C10547 - C10546 + C10549 - C10548) * C10229 +
             (C10550 - C10551 + C10552 - C10553) * C10232 +
             (C10554 - C10555 + C10556 - C10557) * C47481) *
                C47369 * C47268) *
               C942 +
           (((C4745 - C4744 + C4747 - C4746) * C10231 +
             (C4749 - C4748 + C4751 - C4750) * C10229 +
             (C5392 - C5393 + C5394 - C5395) * C10232 +
             (C5396 - C5397 + C5398 - C5399) * C47481) *
                C47369 * C47430 +
            ((C5393 - C5392 + C5395 - C5394) * C10231 +
             (C5397 - C5396 + C5399 - C5398) * C10229 +
             (C6900 - C6901 + C6902 - C6903) * C10232 +
             (C6904 - C6905 + C6906 - C6907) * C47481) *
                C47369 * C47268) *
               C943 +
           (((C4753 - C4752 + C4755 - C4754) * C10231 +
             (C4757 - C4756 + C4759 - C4758) * C10229 +
             (C6170 - C6171 + C6172 - C6173) * C10232 +
             (C6174 - C6175 + C6176 - C6177) * C47481) *
                C47369 * C47430 +
            ((C6171 - C6170 + C6173 - C6172) * C10231 +
             (C6175 - C6174 + C6177 - C6176) * C10229 +
             (C4575 * C1172 - C4579 * C1157 + C47448 * C1173 - C4580 * C1158) *
                 C10232 +
             (C4575 * C1184 - C4579 * C1175 + C47448 * C1185 - C4580 * C1176) *
                 C47481) *
                C47369 * C47268) *
               C47461) *
              C47146)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4575 * C124 - C4579 * C117 + C47448 * C125 - C4580 * C118) *
                C10231 +
            (C4575 * C138 - C4579 * C127 + C47448 * C139 - C4580 * C128) *
                C10229 +
            (C10526 - C10527 + C10528 - C10529) * C10232 +
            (C10530 - C10531 + C10532 - C10533) * C47481) *
               C47369 * C47430 +
           ((C10527 - C10526 + C10529 - C10528) * C10231 +
            (C10531 - C10530 + C10533 - C10532) * C10229 +
            (C10534 - C10535 + C10536 - C10537) * C10232 +
            (C10538 - C10539 + C10540 - C10541) * C47481) *
               C47369 * C47268) *
              C47163 * C554 +
          (((C4579 * C118 - C4575 * C125 + C4580 * C119 - C47448 * C126) *
                C10231 +
            (C4579 * C128 - C4575 * C139 + C4580 * C129 - C47448 * C140) *
                C10229 +
            (C10542 - C10543 + C10544 - C10545) * C10232 +
            (C10546 - C10547 + C10548 - C10549) * C47481) *
               C47369 * C47430 +
           ((C10543 - C10542 + C10545 - C10544) * C10231 +
            (C10547 - C10546 + C10549 - C10548) * C10229 +
            (C10550 - C10551 + C10552 - C10553) * C10232 +
            (C10554 - C10555 + C10556 - C10557) * C47481) *
               C47369 * C47268) *
              C47163 * C555 +
          (((C4575 * C126 - C4579 * C119 + C47448 * C130 - C4580 * C120) *
                C10231 +
            (C4575 * C140 - C4579 * C129 + C47448 * C141 - C4580 * C131) *
                C10229 +
            (C10558 - C10559 + C10560 - C10561) * C10232 +
            (C10562 - C10563 + C10564 - C10565) * C47481) *
               C47369 * C47430 +
           ((C10559 - C10558 + C10561 - C10560) * C10231 +
            (C10563 - C10562 + C10565 - C10564) * C10229 +
            (C10566 - C10567 + C10568 - C10569) * C10232 +
            (C10570 - C10571 + C10572 - C10573) * C47481) *
               C47369 * C47268) *
              C47163 * C556 +
          (((C4579 * C120 - C4575 * C130 + C4580 * C121 - C47448 * C132) *
                C10231 +
            (C4579 * C131 - C4575 * C141 + C4580 * C133 - C47448 * C142) *
                C10229 +
            (C10834 - C10835 + C10836 - C10837) * C10232 +
            (C10838 - C10839 + C10840 - C10841) * C47481) *
               C47369 * C47430 +
           ((C10835 - C10834 + C10837 - C10836) * C10231 +
            (C10839 - C10838 + C10841 - C10840) * C10229 +
            (C4575 * C438 - C4579 * C421 + C47448 * C442 - C4580 * C423) *
                C10232 +
            (C4575 * C451 - C4579 * C439 + C47448 * C453 - C4580 * C443) *
                C47481) *
               C47369 * C47268) *
              C47163 * C47465)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C4575 * C124 - C4579 * C117 + C47448 * C125 - C4580 * C118) *
                C10231 +
            (C4575 * C138 - C4579 * C127 + C47448 * C139 - C4580 * C128) *
                C10229 +
            (C10526 - C10527 + C10528 - C10529) * C10232 +
            (C10530 - C10531 + C10532 - C10533) * C47481) *
               C47369 * C2116 +
           ((C10527 - C10526 + C10529 - C10528) * C10231 +
            (C10531 - C10530 + C10533 - C10532) * C10229 +
            (C10534 - C10535 + C10536 - C10537) * C10232 +
            (C10538 - C10539 + C10540 - C10541) * C47481) *
               C47369 * C2117 +
           ((C10535 - C10534 + C10537 - C10536) * C10231 +
            (C10539 - C10538 + C10541 - C10540) * C10229 +
            (C12246 - C12247 + C12248 - C12249) * C10232 +
            (C12250 - C12251 + C12252 - C12253) * C47481) *
               C47369 * C2118 +
           ((C12247 - C12246 + C12249 - C12248) * C10231 +
            (C12251 - C12250 + C12253 - C12252) * C10229 +
            (C12254 - C12255 + C12256 - C12257) * C10232 +
            (C12258 - C12259 + C12260 - C12261) * C47481) *
               C47369 * C47477) *
              C47163 * C47415 +
          (((C4579 * C118 - C4575 * C125 + C4580 * C119 - C47448 * C126) *
                C10231 +
            (C4579 * C128 - C4575 * C139 + C4580 * C129 - C47448 * C140) *
                C10229 +
            (C10542 - C10543 + C10544 - C10545) * C10232 +
            (C10546 - C10547 + C10548 - C10549) * C47481) *
               C47369 * C2116 +
           ((C10543 - C10542 + C10545 - C10544) * C10231 +
            (C10547 - C10546 + C10549 - C10548) * C10229 +
            (C10550 - C10551 + C10552 - C10553) * C10232 +
            (C10554 - C10555 + C10556 - C10557) * C47481) *
               C47369 * C2117 +
           ((C10551 - C10550 + C10553 - C10552) * C10231 +
            (C10555 - C10554 + C10557 - C10556) * C10229 +
            (C12586 - C12587 + C12588 - C12589) * C10232 +
            (C12590 - C12591 + C12592 - C12593) * C47481) *
               C47369 * C2118 +
           ((C12587 - C12586 + C12589 - C12588) * C10231 +
            (C12591 - C12590 + C12593 - C12592) * C10229 +
            (C4575 * C1857 - C4579 * C1848 + C47448 * C1858 - C4580 * C1849) *
                C10232 +
            (C4575 * C1866 - C4579 * C1860 + C47448 * C1867 - C4580 * C1861) *
                C47481) *
               C47369 * C47477) *
              C47163 * C47146)) /
            (p * q * std::sqrt(p + q));
    d2ee[64] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C4575 * C124 - C4579 * C117 + C47448 * C125 - C4580 * C118) *
                C10231 +
            (C4575 * C138 - C4579 * C127 + C47448 * C139 - C4580 * C128) *
                C10229 +
            (C4575 * C424 - C4579 * C414 + C47448 * C425 - C4580 * C415) *
                C10232 +
            (C4575 * C444 - C4579 * C427 + C47448 * C445 - C4580 * C428) *
                C47481) *
               C47369 * C47181 * C47500 +
           ((C4729 - C4728 + C4731 - C4730) * C10231 +
            (C4733 - C4732 + C4735 - C4734) * C10229 +
            (C5384 - C5385 + C5386 - C5387) * C10232 +
            (C5388 - C5389 + C5390 - C5391) * C47481) *
               C47369 * C47181 * C47488 +
           ((C4737 - C4736 + C4739 - C4738) * C10231 +
            (C4741 - C4740 + C4743 - C4742) * C10229 +
            (C5822 - C5823 + C5824 - C5825) * C10232 +
            (C5826 - C5827 + C5828 - C5829) * C47481) *
               C47369 * C47181 * C47461) *
              C258 +
          (((C4579 * C118 - C4575 * C125 + C4580 * C119 - C47448 * C126) *
                C10231 +
            (C4579 * C128 - C4575 * C139 + C4580 * C129 - C47448 * C140) *
                C10229 +
            (C4579 * C415 - C4575 * C425 + C4580 * C416 - C47448 * C426) *
                C10232 +
            (C4579 * C428 - C4575 * C445 + C4580 * C429 - C47448 * C446) *
                C47481) *
               C47369 * C47181 * C47500 +
           ((C4745 - C4744 + C4747 - C4746) * C10231 +
            (C4749 - C4748 + C4751 - C4750) * C10229 +
            (C5392 - C5393 + C5394 - C5395) * C10232 +
            (C5396 - C5397 + C5398 - C5399) * C47481) *
               C47369 * C47181 * C47488 +
           ((C4753 - C4752 + C4755 - C4754) * C10231 +
            (C4757 - C4756 + C4759 - C4758) * C10229 +
            (C6170 - C6171 + C6172 - C6173) * C10232 +
            (C6174 - C6175 + C6176 - C6177) * C47481) *
               C47369 * C47181 * C47461) *
              C259 +
          (((C4575 * C126 - C4579 * C119 + C47448 * C130 - C4580 * C120) *
                C10231 +
            (C4575 * C140 - C4579 * C129 + C47448 * C141 - C4580 * C131) *
                C10229 +
            (C4575 * C426 - C4579 * C416 + C47448 * C436 - C4580 * C420) *
                C10232 +
            (C4575 * C446 - C4579 * C429 + C47448 * C450 - C4580 * C437) *
                C47481) *
               C47369 * C47181 * C47500 +
           ((C4761 - C4760 + C4763 - C4762) * C10231 +
            (C4765 - C4764 + C4767 - C4766) * C10229 +
            (C5400 - C5401 + C5402 - C5403) * C10232 +
            (C5404 - C5405 + C5406 - C5407) * C47481) *
               C47369 * C47181 * C47488 +
           ((C4769 - C4768 + C4771 - C4770) * C10231 +
            (C4773 - C4772 + C4775 - C4774) * C10229 +
            (C4575 * C1167 - C4579 * C1155 + C47448 * C1441 - C4580 * C1440) *
                C10232 +
            (C4575 * C1182 - C4579 * C1170 + C47448 * C1443 - C4580 * C1442) *
                C47481) *
               C47369 * C47181 * C47461) *
              C47455)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C4575 * C124 - C4579 * C117 + C47448 * C125 - C4580 * C118) *
               C10231 +
           (C4575 * C138 - C4579 * C127 + C47448 * C139 - C4580 * C128) *
               C10229 +
           (C4575 * C424 - C4579 * C414 + C47448 * C425 - C4580 * C415) *
               C10232 +
           (C4575 * C444 - C4579 * C427 + C47448 * C445 - C4580 * C428) *
               C47481) *
              C47369 * C47181 * C47163 * C108 +
          ((C4579 * C118 - C4575 * C125 + C4580 * C119 - C47448 * C126) *
               C10231 +
           (C4579 * C128 - C4575 * C139 + C4580 * C129 - C47448 * C140) *
               C10229 +
           (C4579 * C415 - C4575 * C425 + C4580 * C416 - C47448 * C426) *
               C10232 +
           (C4579 * C428 - C4575 * C445 + C4580 * C429 - C47448 * C446) *
               C47481) *
              C47369 * C47181 * C47163 * C109 +
          ((C4575 * C126 - C4579 * C119 + C47448 * C130 - C4580 * C120) *
               C10231 +
           (C4575 * C140 - C4579 * C129 + C47448 * C141 - C4580 * C131) *
               C10229 +
           (C4575 * C426 - C4579 * C416 + C47448 * C436 - C4580 * C420) *
               C10232 +
           (C4575 * C446 - C4579 * C429 + C47448 * C450 - C4580 * C437) *
               C47481) *
              C47369 * C47181 * C47163 * C110 +
          ((C4579 * C120 - C4575 * C130 + C4580 * C121 - C47448 * C132) *
               C10231 +
           (C4579 * C131 - C4575 * C141 + C4580 * C133 - C47448 * C142) *
               C10229 +
           (C4579 * C420 - C4575 * C436 + C4580 * C422 - C47448 * C440) *
               C10232 +
           (C4579 * C437 - C4575 * C450 + C4580 * C441 - C47448 * C452) *
               C47481) *
              C47369 * C47181 * C47163 * C111 +
          ((C4575 * C132 - C4579 * C121 + C47448 * C134 - C4580 * C122) *
               C10231 +
           (C4575 * C142 - C4579 * C133 + C47448 * C143 - C4580 * C135) *
               C10229 +
           (C4575 * C440 - C4579 * C422 + C47448 * C663 - C4580 * C662) *
               C10232 +
           (C4575 * C452 - C4579 * C441 + C47448 * C665 - C4580 * C664) *
               C47481) *
              C47369 * C47181 * C47163 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C4575 * C124 - C4579 * C117 + C47448 * C125 - C4580 * C118) *
                C10231 +
            (C4575 * C138 - C4579 * C127 + C47448 * C139 - C4580 * C128) *
                C10229 +
            (C10526 - C10527 + C10528 - C10529) * C10232 +
            (C10530 - C10531 + C10532 - C10533) * C47481) *
               C47369 * C47181 * C942 +
           ((C4729 - C4728 + C4731 - C4730) * C10231 +
            (C4733 - C4732 + C4735 - C4734) * C10229 +
            (C5384 - C5385 + C5386 - C5387) * C10232 +
            (C5388 - C5389 + C5390 - C5391) * C47481) *
               C47369 * C47181 * C943 +
           ((C4737 - C4736 + C4739 - C4738) * C10231 +
            (C4741 - C4740 + C4743 - C4742) * C10229 +
            (C5822 - C5823 + C5824 - C5825) * C10232 +
            (C5826 - C5827 + C5828 - C5829) * C47481) *
               C47369 * C47181 * C47461) *
              C47497 +
          (((C4579 * C118 - C4575 * C125 + C4580 * C119 - C47448 * C126) *
                C10231 +
            (C4579 * C128 - C4575 * C139 + C4580 * C129 - C47448 * C140) *
                C10229 +
            (C10542 - C10543 + C10544 - C10545) * C10232 +
            (C10546 - C10547 + C10548 - C10549) * C47481) *
               C47369 * C47181 * C942 +
           ((C4745 - C4744 + C4747 - C4746) * C10231 +
            (C4749 - C4748 + C4751 - C4750) * C10229 +
            (C5392 - C5393 + C5394 - C5395) * C10232 +
            (C5396 - C5397 + C5398 - C5399) * C47481) *
               C47369 * C47181 * C943 +
           ((C4753 - C4752 + C4755 - C4754) * C10231 +
            (C4757 - C4756 + C4759 - C4758) * C10229 +
            (C6170 - C6171 + C6172 - C6173) * C10232 +
            (C6174 - C6175 + C6176 - C6177) * C47481) *
               C47369 * C47181 * C47461) *
              C47484 +
          (((C4575 * C126 - C4579 * C119 + C47448 * C130 - C4580 * C120) *
                C10231 +
            (C4575 * C140 - C4579 * C129 + C47448 * C141 - C4580 * C131) *
                C10229 +
            (C10558 - C10559 + C10560 - C10561) * C10232 +
            (C10562 - C10563 + C10564 - C10565) * C47481) *
               C47369 * C47181 * C942 +
           ((C4761 - C4760 + C4763 - C4762) * C10231 +
            (C4765 - C4764 + C4767 - C4766) * C10229 +
            (C5400 - C5401 + C5402 - C5403) * C10232 +
            (C5404 - C5405 + C5406 - C5407) * C47481) *
               C47369 * C47181 * C943 +
           ((C4769 - C4768 + C4771 - C4770) * C10231 +
            (C4773 - C4772 + C4775 - C4774) * C10229 +
            (C4575 * C1167 - C4579 * C1155 + C47448 * C1441 - C4580 * C1440) *
                C10232 +
            (C4575 * C1182 - C4579 * C1170 + C47448 * C1443 - C4580 * C1442) *
                C47481) *
               C47369 * C47181 * C47461) *
              C47455)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C4575 * C124 - C4579 * C117 + C47448 * C125 - C4580 * C118) *
               C10231 +
           (C4575 * C138 - C4579 * C127 + C47448 * C139 - C4580 * C128) *
               C10229 +
           (C10526 - C10527 + C10528 - C10529) * C10232 +
           (C10530 - C10531 + C10532 - C10533) * C47481) *
              C47369 * C47181 * C1010 +
          ((C4729 - C4728 + C4731 - C4730) * C10231 +
           (C4733 - C4732 + C4735 - C4734) * C10229 +
           (C5384 - C5385 + C5386 - C5387) * C10232 +
           (C5388 - C5389 + C5390 - C5391) * C47481) *
              C47369 * C47181 * C1011 +
          ((C4737 - C4736 + C4739 - C4738) * C10231 +
           (C4741 - C4740 + C4743 - C4742) * C10229 +
           (C5822 - C5823 + C5824 - C5825) * C10232 +
           (C5826 - C5827 + C5828 - C5829) * C47481) *
              C47369 * C47181 * C1012 +
          ((C5645 - C5644 + C5647 - C5646) * C10231 +
           (C5649 - C5648 + C5651 - C5650) * C10229 +
           (C6316 - C6317 + C6318 - C6319) * C10232 +
           (C6320 - C6321 + C6322 - C6323) * C47481) *
              C47369 * C47181 * C1013 +
          ((C5653 - C5652 + C5655 - C5654) * C10231 +
           (C5657 - C5656 + C5659 - C5658) * C10229 +
           (C4575 * C6309 - C4579 * C6307 + C47448 * C6310 - C4580 * C6308) *
               C10232 +
           (C4575 * C6313 - C4579 * C6311 + C47448 * C6314 - C4580 * C6312) *
               C47481) *
              C47369 * C47181 * C1014) *
         C47135) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4575 * C124 - C4579 * C117 + C47448 * C125 - C4580 * C118) *
                C10231 +
            (C4575 * C138 - C4579 * C127 + C47448 * C139 - C4580 * C128) *
                C10229 +
            (C10526 - C10527 + C10528 - C10529) * C10232 +
            (C10530 - C10531 + C10532 - C10533) * C47481) *
               C47369 * C1664 +
           ((C10527 - C10526 + C10529 - C10528) * C10231 +
            (C10531 - C10530 + C10533 - C10532) * C10229 +
            (C10534 - C10535 + C10536 - C10537) * C10232 +
            (C10538 - C10539 + C10540 - C10541) * C47481) *
               C47369 * C1665 +
           ((C10535 - C10534 + C10537 - C10536) * C10231 +
            (C10539 - C10538 + C10541 - C10540) * C10229 +
            (C4575 * C1850 - C4579 * C1844 + C47448 * C1851 - C4580 * C1845) *
                C10232 +
            (C4575 * C1862 - C4579 * C1853 + C47448 * C1863 - C4580 * C1854) *
                C47481) *
               C47369 * C47464) *
              C47163 * C47497 +
          (((C4579 * C118 - C4575 * C125 + C4580 * C119 - C47448 * C126) *
                C10231 +
            (C4579 * C128 - C4575 * C139 + C4580 * C129 - C47448 * C140) *
                C10229 +
            (C10542 - C10543 + C10544 - C10545) * C10232 +
            (C10546 - C10547 + C10548 - C10549) * C47481) *
               C47369 * C1664 +
           ((C10543 - C10542 + C10545 - C10544) * C10231 +
            (C10547 - C10546 + C10549 - C10548) * C10229 +
            (C10550 - C10551 + C10552 - C10553) * C10232 +
            (C10554 - C10555 + C10556 - C10557) * C47481) *
               C47369 * C1665 +
           ((C10551 - C10550 + C10553 - C10552) * C10231 +
            (C10555 - C10554 + C10557 - C10556) * C10229 +
            (C4579 * C1845 - C4575 * C1851 + C4580 * C1846 - C47448 * C1852) *
                C10232 +
            (C4579 * C1854 - C4575 * C1863 + C4580 * C1855 - C47448 * C1864) *
                C47481) *
               C47369 * C47464) *
              C47163 * C47484 +
          (((C4575 * C126 - C4579 * C119 + C47448 * C130 - C4580 * C120) *
                C10231 +
            (C4575 * C140 - C4579 * C129 + C47448 * C141 - C4580 * C131) *
                C10229 +
            (C10558 - C10559 + C10560 - C10561) * C10232 +
            (C10562 - C10563 + C10564 - C10565) * C47481) *
               C47369 * C1664 +
           ((C10559 - C10558 + C10561 - C10560) * C10231 +
            (C10563 - C10562 + C10565 - C10564) * C10229 +
            (C10566 - C10567 + C10568 - C10569) * C10232 +
            (C10570 - C10571 + C10572 - C10573) * C47481) *
               C47369 * C1665 +
           ((C10567 - C10566 + C10569 - C10568) * C10231 +
            (C10571 - C10570 + C10573 - C10572) * C10229 +
            (C4575 * C1852 - C4579 * C1846 + C47448 * C2121 - C4580 * C2120) *
                C10232 +
            (C4575 * C1864 - C4579 * C1855 + C47448 * C2123 - C4580 * C2122) *
                C47481) *
               C47369 * C47464) *
              C47163 * C47455)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4575 * C124 - C4579 * C117 + C47448 * C125 - C4580 * C118) *
                C10231 +
            (C4575 * C138 - C4579 * C127 + C47448 * C139 - C4580 * C128) *
                C10229 +
            (C10526 - C10527 + C10528 - C10529) * C10232 +
            (C10530 - C10531 + C10532 - C10533) * C47481) *
               C47369 * C1664 +
           ((C10527 - C10526 + C10529 - C10528) * C10231 +
            (C10531 - C10530 + C10533 - C10532) * C10229 +
            (C10534 - C10535 + C10536 - C10537) * C10232 +
            (C10538 - C10539 + C10540 - C10541) * C47481) *
               C47369 * C1665 +
           ((C10535 - C10534 + C10537 - C10536) * C10231 +
            (C10539 - C10538 + C10541 - C10540) * C10229 +
            (C4575 * C1850 - C4579 * C1844 + C47448 * C1851 - C4580 * C1845) *
                C10232 +
            (C4575 * C1862 - C4579 * C1853 + C47448 * C1863 - C4580 * C1854) *
                C47481) *
               C47369 * C47464) *
              C47500 +
          (((C4729 - C4728 + C4731 - C4730) * C10231 +
            (C4733 - C4732 + C4735 - C4734) * C10229 +
            (C5384 - C5385 + C5386 - C5387) * C10232 +
            (C5388 - C5389 + C5390 - C5391) * C47481) *
               C47369 * C1664 +
           ((C5385 - C5384 + C5387 - C5386) * C10231 +
            (C5389 - C5388 + C5391 - C5390) * C10229 +
            (C5814 - C5815 + C5816 - C5817) * C10232 +
            (C5818 - C5819 + C5820 - C5821) * C47481) *
               C47369 * C1665 +
           ((C5815 - C5814 + C5817 - C5816) * C10231 +
            (C5819 - C5818 + C5821 - C5820) * C10229 +
            (C7176 - C7177 + C7178 - C7179) * C10232 +
            (C7180 - C7181 + C7182 - C7183) * C47481) *
               C47369 * C47464) *
              C47488 +
          (((C4737 - C4736 + C4739 - C4738) * C10231 +
            (C4741 - C4740 + C4743 - C4742) * C10229 +
            (C5822 - C5823 + C5824 - C5825) * C10232 +
            (C5826 - C5827 + C5828 - C5829) * C47481) *
               C47369 * C1664 +
           ((C5823 - C5822 + C5825 - C5824) * C10231 +
            (C5827 - C5826 + C5829 - C5828) * C10229 +
            (C5830 - C5831 + C5832 - C5833) * C10232 +
            (C5834 - C5835 + C5836 - C5837) * C47481) *
               C47369 * C1665 +
           ((C5831 - C5830 + C5833 - C5832) * C10231 +
            (C5835 - C5834 + C5837 - C5836) * C10229 +
            (C4575 * C7169 - C4579 * C7167 + C47448 * C7170 - C4580 * C7168) *
                C10232 +
            (C4575 * C7173 - C4579 * C7171 + C47448 * C7174 - C4580 * C7172) *
                C47481) *
               C47369 * C47464) *
              C47461) *
         C47135) /
            (p * q * std::sqrt(p + q));
    d2ee[65] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C4575 * C124 - C4579 * C117 + C47448 * C125 - C4580 * C118) *
                 C10231 +
             (C4575 * C138 - C4579 * C127 + C47448 * C139 - C4580 * C128) *
                 C10229 +
             (C10526 - C10527 + C10528 - C10529) * C10232 +
             (C10530 - C10531 + C10532 - C10533) * C47481) *
                C47369 * C3094 +
            ((C10527 - C10526 + C10529 - C10528) * C10231 +
             (C10531 - C10530 + C10533 - C10532) * C10229 +
             (C10534 - C10535 + C10536 - C10537) * C10232 +
             (C10538 - C10539 + C10540 - C10541) * C47481) *
                C47369 * C47268) *
               C47429 +
           (((C4729 - C4728 + C4731 - C4730) * C10231 +
             (C4733 - C4732 + C4735 - C4734) * C10229 +
             (C5384 - C5385 + C5386 - C5387) * C10232 +
             (C5388 - C5389 + C5390 - C5391) * C47481) *
                C47369 * C3094 +
            ((C5385 - C5384 + C5387 - C5386) * C10231 +
             (C5389 - C5388 + C5391 - C5390) * C10229 +
             (C5814 - C5815 + C5816 - C5817) * C10232 +
             (C5818 - C5819 + C5820 - C5821) * C47481) *
                C47369 * C47268) *
               C47226) *
              C47140 +
          ((((C4579 * C118 - C4575 * C125 + C4580 * C119 - C47448 * C126) *
                 C10231 +
             (C4579 * C128 - C4575 * C139 + C4580 * C129 - C47448 * C140) *
                 C10229 +
             (C10542 - C10543 + C10544 - C10545) * C10232 +
             (C10546 - C10547 + C10548 - C10549) * C47481) *
                C47369 * C3094 +
            ((C10543 - C10542 + C10545 - C10544) * C10231 +
             (C10547 - C10546 + C10549 - C10548) * C10229 +
             (C10550 - C10551 + C10552 - C10553) * C10232 +
             (C10554 - C10555 + C10556 - C10557) * C47481) *
                C47369 * C47268) *
               C47429 +
           (((C4745 - C4744 + C4747 - C4746) * C10231 +
             (C4749 - C4748 + C4751 - C4750) * C10229 +
             (C5392 - C5393 + C5394 - C5395) * C10232 +
             (C5396 - C5397 + C5398 - C5399) * C47481) *
                C47369 * C3094 +
            ((C5393 - C5392 + C5395 - C5394) * C10231 +
             (C5397 - C5396 + C5399 - C5398) * C10229 +
             (C6900 - C6901 + C6902 - C6903) * C10232 +
             (C6904 - C6905 + C6906 - C6907) * C47481) *
                C47369 * C47268) *
               C47226) *
              C47149 +
          ((((C4575 * C126 - C4579 * C119 + C47448 * C130 - C4580 * C120) *
                 C10231 +
             (C4575 * C140 - C4579 * C129 + C47448 * C141 - C4580 * C131) *
                 C10229 +
             (C10558 - C10559 + C10560 - C10561) * C10232 +
             (C10562 - C10563 + C10564 - C10565) * C47481) *
                C47369 * C3094 +
            ((C10559 - C10558 + C10561 - C10560) * C10231 +
             (C10563 - C10562 + C10565 - C10564) * C10229 +
             (C10566 - C10567 + C10568 - C10569) * C10232 +
             (C10570 - C10571 + C10572 - C10573) * C47481) *
                C47369 * C47268) *
               C47429 +
           (((C4761 - C4760 + C4763 - C4762) * C10231 +
             (C4765 - C4764 + C4767 - C4766) * C10229 +
             (C5400 - C5401 + C5402 - C5403) * C10232 +
             (C5404 - C5405 + C5406 - C5407) * C47481) *
                C47369 * C3094 +
            ((C5401 - C5400 + C5403 - C5402) * C10231 +
             (C5405 - C5404 + C5407 - C5406) * C10229 +
             (C4575 * C1161 - C4579 * C1152 + C47448 * C2015 - C4580 * C2014) *
                 C10232 +
             (C4575 * C1179 - C4579 * C1164 + C47448 * C2017 - C4580 * C2016) *
                 C47481) *
                C47369 * C47268) *
               C47226) *
              C2703)) /
        (p * q * std::sqrt(p + q));
    d2ee[66] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C4575 * C124 - C4579 * C117 + C47448 * C125 - C4580 * C118) *
                 C10231 +
             (C4575 * C138 - C4579 * C127 + C47448 * C139 - C4580 * C128) *
                 C10229 +
             (C10526 - C10527 + C10528 - C10529) * C10232 +
             (C10530 - C10531 + C10532 - C10533) * C47481) *
                C47369 * C47264 +
            ((C10527 - C10526 + C10529 - C10528) * C10231 +
             (C10531 - C10530 + C10533 - C10532) * C10229 +
             (C10534 - C10535 + C10536 - C10537) * C10232 +
             (C10538 - C10539 + C10540 - C10541) * C47481) *
                C47369 * C47271 +
            ((C10535 - C10534 + C10537 - C10536) * C10231 +
             (C10539 - C10538 + C10541 - C10540) * C10229 +
             (C12246 - C12247 + C12248 - C12249) * C10232 +
             (C12250 - C12251 + C12252 - C12253) * C47481) *
                C47369 * C3602) *
               C47429 +
           (((C4729 - C4728 + C4731 - C4730) * C10231 +
             (C4733 - C4732 + C4735 - C4734) * C10229 +
             (C5384 - C5385 + C5386 - C5387) * C10232 +
             (C5388 - C5389 + C5390 - C5391) * C47481) *
                C47369 * C47264 +
            ((C5385 - C5384 + C5387 - C5386) * C10231 +
             (C5389 - C5388 + C5391 - C5390) * C10229 +
             (C5814 - C5815 + C5816 - C5817) * C10232 +
             (C5818 - C5819 + C5820 - C5821) * C47481) *
                C47369 * C47271 +
            ((C5815 - C5814 + C5817 - C5816) * C10231 +
             (C5819 - C5818 + C5821 - C5820) * C10229 +
             (C7176 - C7177 + C7178 - C7179) * C10232 +
             (C7180 - C7181 + C7182 - C7183) * C47481) *
                C47369 * C3602) *
               C47226) *
              C2440 +
          ((((C4579 * C118 - C4575 * C125 + C4580 * C119 - C47448 * C126) *
                 C10231 +
             (C4579 * C128 - C4575 * C139 + C4580 * C129 - C47448 * C140) *
                 C10229 +
             (C10542 - C10543 + C10544 - C10545) * C10232 +
             (C10546 - C10547 + C10548 - C10549) * C47481) *
                C47369 * C47264 +
            ((C10543 - C10542 + C10545 - C10544) * C10231 +
             (C10547 - C10546 + C10549 - C10548) * C10229 +
             (C10550 - C10551 + C10552 - C10553) * C10232 +
             (C10554 - C10555 + C10556 - C10557) * C47481) *
                C47369 * C47271 +
            ((C10551 - C10550 + C10553 - C10552) * C10231 +
             (C10555 - C10554 + C10557 - C10556) * C10229 +
             (C12586 - C12587 + C12588 - C12589) * C10232 +
             (C12590 - C12591 + C12592 - C12593) * C47481) *
                C47369 * C3602) *
               C47429 +
           (((C4745 - C4744 + C4747 - C4746) * C10231 +
             (C4749 - C4748 + C4751 - C4750) * C10229 +
             (C5392 - C5393 + C5394 - C5395) * C10232 +
             (C5396 - C5397 + C5398 - C5399) * C47481) *
                C47369 * C47264 +
            ((C5393 - C5392 + C5395 - C5394) * C10231 +
             (C5397 - C5396 + C5399 - C5398) * C10229 +
             (C6900 - C6901 + C6902 - C6903) * C10232 +
             (C6904 - C6905 + C6906 - C6907) * C47481) *
                C47369 * C47271 +
            ((C6901 - C6900 + C6903 - C6902) * C10231 +
             (C6905 - C6904 + C6907 - C6906) * C10229 +
             (C4575 * C2226 - C4579 * C2223 + C47448 * C2227 - C4580 * C2224) *
                 C10232 +
             (C4575 * C2232 - C4579 * C2229 + C47448 * C2233 - C4580 * C2230) *
                 C47481) *
                C47369 * C3602) *
               C47226) *
              C47146)) /
        (p * q * std::sqrt(p + q));
    d2ee[67] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C4575 * C124 - C4579 * C117 + C47448 * C125 - C4580 * C118) *
                 C10231 +
             (C4575 * C138 - C4579 * C127 + C47448 * C139 - C4580 * C128) *
                 C10229 +
             (C10526 - C10527 + C10528 - C10529) * C10232 +
             (C10530 - C10531 + C10532 - C10533) * C47481) *
                C47369 * C3094 +
            ((C10527 - C10526 + C10529 - C10528) * C10231 +
             (C10531 - C10530 + C10533 - C10532) * C10229 +
             (C10534 - C10535 + C10536 - C10537) * C10232 +
             (C10538 - C10539 + C10540 - C10541) * C47481) *
                C47369 * C47268) *
               C47500 +
           (((C4729 - C4728 + C4731 - C4730) * C10231 +
             (C4733 - C4732 + C4735 - C4734) * C10229 +
             (C5384 - C5385 + C5386 - C5387) * C10232 +
             (C5388 - C5389 + C5390 - C5391) * C47481) *
                C47369 * C3094 +
            ((C5385 - C5384 + C5387 - C5386) * C10231 +
             (C5389 - C5388 + C5391 - C5390) * C10229 +
             (C5814 - C5815 + C5816 - C5817) * C10232 +
             (C5818 - C5819 + C5820 - C5821) * C47481) *
                C47369 * C47268) *
               C47488 +
           (((C4737 - C4736 + C4739 - C4738) * C10231 +
             (C4741 - C4740 + C4743 - C4742) * C10229 +
             (C5822 - C5823 + C5824 - C5825) * C10232 +
             (C5826 - C5827 + C5828 - C5829) * C47481) *
                C47369 * C3094 +
            ((C5823 - C5822 + C5825 - C5824) * C10231 +
             (C5827 - C5826 + C5829 - C5828) * C10229 +
             (C5830 - C5831 + C5832 - C5833) * C10232 +
             (C5834 - C5835 + C5836 - C5837) * C47481) *
                C47369 * C47268) *
               C47461) *
              C2440 +
          ((((C4579 * C118 - C4575 * C125 + C4580 * C119 - C47448 * C126) *
                 C10231 +
             (C4579 * C128 - C4575 * C139 + C4580 * C129 - C47448 * C140) *
                 C10229 +
             (C10542 - C10543 + C10544 - C10545) * C10232 +
             (C10546 - C10547 + C10548 - C10549) * C47481) *
                C47369 * C3094 +
            ((C10543 - C10542 + C10545 - C10544) * C10231 +
             (C10547 - C10546 + C10549 - C10548) * C10229 +
             (C10550 - C10551 + C10552 - C10553) * C10232 +
             (C10554 - C10555 + C10556 - C10557) * C47481) *
                C47369 * C47268) *
               C47500 +
           (((C4745 - C4744 + C4747 - C4746) * C10231 +
             (C4749 - C4748 + C4751 - C4750) * C10229 +
             (C5392 - C5393 + C5394 - C5395) * C10232 +
             (C5396 - C5397 + C5398 - C5399) * C47481) *
                C47369 * C3094 +
            ((C5393 - C5392 + C5395 - C5394) * C10231 +
             (C5397 - C5396 + C5399 - C5398) * C10229 +
             (C6900 - C6901 + C6902 - C6903) * C10232 +
             (C6904 - C6905 + C6906 - C6907) * C47481) *
                C47369 * C47268) *
               C47488 +
           (((C4753 - C4752 + C4755 - C4754) * C10231 +
             (C4757 - C4756 + C4759 - C4758) * C10229 +
             (C6170 - C6171 + C6172 - C6173) * C10232 +
             (C6174 - C6175 + C6176 - C6177) * C47481) *
                C47369 * C3094 +
            ((C6171 - C6170 + C6173 - C6172) * C10231 +
             (C6175 - C6174 + C6177 - C6176) * C10229 +
             (C4575 * C1172 - C4579 * C1157 + C47448 * C1173 - C4580 * C1158) *
                 C10232 +
             (C4575 * C1184 - C4579 * C1175 + C47448 * C1185 - C4580 * C1176) *
                 C47481) *
                C47369 * C47268) *
               C47461) *
              C47146)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4575 * C124 - C4579 * C117 + C47448 * C125 - C4580 * C118) *
                C10231 +
            (C4575 * C138 - C4579 * C127 + C47448 * C139 - C4580 * C128) *
                C10229 +
            (C10526 - C10527 + C10528 - C10529) * C10232 +
            (C10530 - C10531 + C10532 - C10533) * C47481) *
               C47369 * C3094 +
           ((C10527 - C10526 + C10529 - C10528) * C10231 +
            (C10531 - C10530 + C10533 - C10532) * C10229 +
            (C10534 - C10535 + C10536 - C10537) * C10232 +
            (C10538 - C10539 + C10540 - C10541) * C47481) *
               C47369 * C47268) *
              C47163 * C47506 +
          (((C4579 * C118 - C4575 * C125 + C4580 * C119 - C47448 * C126) *
                C10231 +
            (C4579 * C128 - C4575 * C139 + C4580 * C129 - C47448 * C140) *
                C10229 +
            (C10542 - C10543 + C10544 - C10545) * C10232 +
            (C10546 - C10547 + C10548 - C10549) * C47481) *
               C47369 * C3094 +
           ((C10543 - C10542 + C10545 - C10544) * C10231 +
            (C10547 - C10546 + C10549 - C10548) * C10229 +
            (C10550 - C10551 + C10552 - C10553) * C10232 +
            (C10554 - C10555 + C10556 - C10557) * C47481) *
               C47369 * C47268) *
              C47163 * C47499 +
          (((C4575 * C126 - C4579 * C119 + C47448 * C130 - C4580 * C120) *
                C10231 +
            (C4575 * C140 - C4579 * C129 + C47448 * C141 - C4580 * C131) *
                C10229 +
            (C10558 - C10559 + C10560 - C10561) * C10232 +
            (C10562 - C10563 + C10564 - C10565) * C47481) *
               C47369 * C3094 +
           ((C10559 - C10558 + C10561 - C10560) * C10231 +
            (C10563 - C10562 + C10565 - C10564) * C10229 +
            (C10566 - C10567 + C10568 - C10569) * C10232 +
            (C10570 - C10571 + C10572 - C10573) * C47481) *
               C47369 * C47268) *
              C47163 * C47486 +
          (((C4579 * C120 - C4575 * C130 + C4580 * C121 - C47448 * C132) *
                C10231 +
            (C4579 * C131 - C4575 * C141 + C4580 * C133 - C47448 * C142) *
                C10229 +
            (C10834 - C10835 + C10836 - C10837) * C10232 +
            (C10838 - C10839 + C10840 - C10841) * C47481) *
               C47369 * C3094 +
           ((C10835 - C10834 + C10837 - C10836) * C10231 +
            (C10839 - C10838 + C10841 - C10840) * C10229 +
            (C4575 * C438 - C4579 * C421 + C47448 * C442 - C4580 * C423) *
                C10232 +
            (C4575 * C451 - C4579 * C439 + C47448 * C453 - C4580 * C443) *
                C47481) *
               C47369 * C47268) *
              C47163 * C47465)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C4575 * C124 - C4579 * C117 + C47448 * C125 - C4580 * C118) *
                C10231 +
            (C4575 * C138 - C4579 * C127 + C47448 * C139 - C4580 * C128) *
                C10229 +
            (C10526 - C10527 + C10528 - C10529) * C10232 +
            (C10530 - C10531 + C10532 - C10533) * C47481) *
               C47369 * C47508 +
           ((C10527 - C10526 + C10529 - C10528) * C10231 +
            (C10531 - C10530 + C10533 - C10532) * C10229 +
            (C10534 - C10535 + C10536 - C10537) * C10232 +
            (C10538 - C10539 + C10540 - C10541) * C47481) *
               C47369 * C47505 +
           ((C10535 - C10534 + C10537 - C10536) * C10231 +
            (C10539 - C10538 + C10541 - C10540) * C10229 +
            (C12246 - C12247 + C12248 - C12249) * C10232 +
            (C12250 - C12251 + C12252 - C12253) * C47481) *
               C47369 * C47496 +
           ((C12247 - C12246 + C12249 - C12248) * C10231 +
            (C12251 - C12250 + C12253 - C12252) * C10229 +
            (C12254 - C12255 + C12256 - C12257) * C10232 +
            (C12258 - C12259 + C12260 - C12261) * C47481) *
               C47369 * C47477) *
              C47163 * C2440 +
          (((C4579 * C118 - C4575 * C125 + C4580 * C119 - C47448 * C126) *
                C10231 +
            (C4579 * C128 - C4575 * C139 + C4580 * C129 - C47448 * C140) *
                C10229 +
            (C10542 - C10543 + C10544 - C10545) * C10232 +
            (C10546 - C10547 + C10548 - C10549) * C47481) *
               C47369 * C47508 +
           ((C10543 - C10542 + C10545 - C10544) * C10231 +
            (C10547 - C10546 + C10549 - C10548) * C10229 +
            (C10550 - C10551 + C10552 - C10553) * C10232 +
            (C10554 - C10555 + C10556 - C10557) * C47481) *
               C47369 * C47505 +
           ((C10551 - C10550 + C10553 - C10552) * C10231 +
            (C10555 - C10554 + C10557 - C10556) * C10229 +
            (C12586 - C12587 + C12588 - C12589) * C10232 +
            (C12590 - C12591 + C12592 - C12593) * C47481) *
               C47369 * C47496 +
           ((C12587 - C12586 + C12589 - C12588) * C10231 +
            (C12591 - C12590 + C12593 - C12592) * C10229 +
            (C4575 * C1857 - C4579 * C1848 + C47448 * C1858 - C4580 * C1849) *
                C10232 +
            (C4575 * C1866 - C4579 * C1860 + C47448 * C1867 - C4580 * C1861) *
                C47481) *
               C47369 * C47477) *
              C47163 * C47146)) /
            (p * q * std::sqrt(p + q));
    d2ee[68] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C4575 * C124 - C4579 * C117 + C47448 * C125 - C4580 * C118) *
                C10231 +
            (C4575 * C138 - C4579 * C127 + C47448 * C139 - C4580 * C128) *
                C10229 +
            (C10526 - C10527 + C10528 - C10529) * C10232 +
            (C10530 - C10531 + C10532 - C10533) * C47481) *
               C47369 * C47264 +
           ((C10527 - C10526 + C10529 - C10528) * C10231 +
            (C10531 - C10530 + C10533 - C10532) * C10229 +
            (C10534 - C10535 + C10536 - C10537) * C10232 +
            (C10538 - C10539 + C10540 - C10541) * C47481) *
               C47369 * C47271 +
           ((C10535 - C10534 + C10537 - C10536) * C10231 +
            (C10539 - C10538 + C10541 - C10540) * C10229 +
            (C12246 - C12247 + C12248 - C12249) * C10232 +
            (C12250 - C12251 + C12252 - C12253) * C47481) *
               C47369 * C3602) *
              C47163 * C47140 +
          (((C4579 * C118 - C4575 * C125 + C4580 * C119 - C47448 * C126) *
                C10231 +
            (C4579 * C128 - C4575 * C139 + C4580 * C129 - C47448 * C140) *
                C10229 +
            (C10542 - C10543 + C10544 - C10545) * C10232 +
            (C10546 - C10547 + C10548 - C10549) * C47481) *
               C47369 * C47264 +
           ((C10543 - C10542 + C10545 - C10544) * C10231 +
            (C10547 - C10546 + C10549 - C10548) * C10229 +
            (C10550 - C10551 + C10552 - C10553) * C10232 +
            (C10554 - C10555 + C10556 - C10557) * C47481) *
               C47369 * C47271 +
           ((C10551 - C10550 + C10553 - C10552) * C10231 +
            (C10555 - C10554 + C10557 - C10556) * C10229 +
            (C12586 - C12587 + C12588 - C12589) * C10232 +
            (C12590 - C12591 + C12592 - C12593) * C47481) *
               C47369 * C3602) *
              C47163 * C47149 +
          (((C4575 * C126 - C4579 * C119 + C47448 * C130 - C4580 * C120) *
                C10231 +
            (C4575 * C140 - C4579 * C129 + C47448 * C141 - C4580 * C131) *
                C10229 +
            (C10558 - C10559 + C10560 - C10561) * C10232 +
            (C10562 - C10563 + C10564 - C10565) * C47481) *
               C47369 * C47264 +
           ((C10559 - C10558 + C10561 - C10560) * C10231 +
            (C10563 - C10562 + C10565 - C10564) * C10229 +
            (C10566 - C10567 + C10568 - C10569) * C10232 +
            (C10570 - C10571 + C10572 - C10573) * C47481) *
               C47369 * C47271 +
           ((C10567 - C10566 + C10569 - C10568) * C10231 +
            (C10571 - C10570 + C10573 - C10572) * C10229 +
            (C4575 * C1852 - C4579 * C1846 + C47448 * C2121 - C4580 * C2120) *
                C10232 +
            (C4575 * C1864 - C4579 * C1855 + C47448 * C2123 - C4580 * C2122) *
                C47481) *
               C47369 * C3602) *
              C47163 * C2703)) /
        (p * q * std::sqrt(p + q));
    d2ee[69] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C4575 * C124 - C4579 * C117 + C47448 * C125 - C4580 * C118) *
                C10231 +
            (C4575 * C138 - C4579 * C127 + C47448 * C139 - C4580 * C128) *
                C10229 +
            (C10526 - C10527 + C10528 - C10529) * C10232 +
            (C10530 - C10531 + C10532 - C10533) * C47481) *
               C47369 * C3094 +
           ((C10527 - C10526 + C10529 - C10528) * C10231 +
            (C10531 - C10530 + C10533 - C10532) * C10229 +
            (C10534 - C10535 + C10536 - C10537) * C10232 +
            (C10538 - C10539 + C10540 - C10541) * C47481) *
               C47369 * C47268) *
              C47163 * C47506 +
          (((C4579 * C118 - C4575 * C125 + C4580 * C119 - C47448 * C126) *
                C10231 +
            (C4579 * C128 - C4575 * C139 + C4580 * C129 - C47448 * C140) *
                C10229 +
            (C10542 - C10543 + C10544 - C10545) * C10232 +
            (C10546 - C10547 + C10548 - C10549) * C47481) *
               C47369 * C3094 +
           ((C10543 - C10542 + C10545 - C10544) * C10231 +
            (C10547 - C10546 + C10549 - C10548) * C10229 +
            (C10550 - C10551 + C10552 - C10553) * C10232 +
            (C10554 - C10555 + C10556 - C10557) * C47481) *
               C47369 * C47268) *
              C47163 * C47499 +
          (((C4575 * C126 - C4579 * C119 + C47448 * C130 - C4580 * C120) *
                C10231 +
            (C4575 * C140 - C4579 * C129 + C47448 * C141 - C4580 * C131) *
                C10229 +
            (C10558 - C10559 + C10560 - C10561) * C10232 +
            (C10562 - C10563 + C10564 - C10565) * C47481) *
               C47369 * C3094 +
           ((C10559 - C10558 + C10561 - C10560) * C10231 +
            (C10563 - C10562 + C10565 - C10564) * C10229 +
            (C10566 - C10567 + C10568 - C10569) * C10232 +
            (C10570 - C10571 + C10572 - C10573) * C47481) *
               C47369 * C47268) *
              C47163 * C47486 +
          (((C4579 * C120 - C4575 * C130 + C4580 * C121 - C47448 * C132) *
                C10231 +
            (C4579 * C131 - C4575 * C141 + C4580 * C133 - C47448 * C142) *
                C10229 +
            (C10834 - C10835 + C10836 - C10837) * C10232 +
            (C10838 - C10839 + C10840 - C10841) * C47481) *
               C47369 * C3094 +
           ((C10835 - C10834 + C10837 - C10836) * C10231 +
            (C10839 - C10838 + C10841 - C10840) * C10229 +
            (C4575 * C438 - C4579 * C421 + C47448 * C442 - C4580 * C423) *
                C10232 +
            (C4575 * C451 - C4579 * C439 + C47448 * C453 - C4580 * C443) *
                C47481) *
               C47369 * C47268) *
              C47163 * C47465)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C4575 * C124 - C4579 * C117 + C47448 * C125 - C4580 * C118) *
                 C10231 +
             (C4575 * C138 - C4579 * C127 + C47448 * C139 - C4580 * C128) *
                 C10229 +
             (C10526 - C10527 + C10528 - C10529) * C10232 +
             (C10530 - C10531 + C10532 - C10533) * C47481) *
                C47369 * C3094 +
            ((C10527 - C10526 + C10529 - C10528) * C10231 +
             (C10531 - C10530 + C10533 - C10532) * C10229 +
             (C10534 - C10535 + C10536 - C10537) * C10232 +
             (C10538 - C10539 + C10540 - C10541) * C47481) *
                C47369 * C47268) *
               C47500 +
           (((C4729 - C4728 + C4731 - C4730) * C10231 +
             (C4733 - C4732 + C4735 - C4734) * C10229 +
             (C5384 - C5385 + C5386 - C5387) * C10232 +
             (C5388 - C5389 + C5390 - C5391) * C47481) *
                C47369 * C3094 +
            ((C5385 - C5384 + C5387 - C5386) * C10231 +
             (C5389 - C5388 + C5391 - C5390) * C10229 +
             (C5814 - C5815 + C5816 - C5817) * C10232 +
             (C5818 - C5819 + C5820 - C5821) * C47481) *
                C47369 * C47268) *
               C47488 +
           (((C4737 - C4736 + C4739 - C4738) * C10231 +
             (C4741 - C4740 + C4743 - C4742) * C10229 +
             (C5822 - C5823 + C5824 - C5825) * C10232 +
             (C5826 - C5827 + C5828 - C5829) * C47481) *
                C47369 * C3094 +
            ((C5823 - C5822 + C5825 - C5824) * C10231 +
             (C5827 - C5826 + C5829 - C5828) * C10229 +
             (C5830 - C5831 + C5832 - C5833) * C10232 +
             (C5834 - C5835 + C5836 - C5837) * C47481) *
                C47369 * C47268) *
               C47461) *
              C2440 +
          ((((C4579 * C118 - C4575 * C125 + C4580 * C119 - C47448 * C126) *
                 C10231 +
             (C4579 * C128 - C4575 * C139 + C4580 * C129 - C47448 * C140) *
                 C10229 +
             (C10542 - C10543 + C10544 - C10545) * C10232 +
             (C10546 - C10547 + C10548 - C10549) * C47481) *
                C47369 * C3094 +
            ((C10543 - C10542 + C10545 - C10544) * C10231 +
             (C10547 - C10546 + C10549 - C10548) * C10229 +
             (C10550 - C10551 + C10552 - C10553) * C10232 +
             (C10554 - C10555 + C10556 - C10557) * C47481) *
                C47369 * C47268) *
               C47500 +
           (((C4745 - C4744 + C4747 - C4746) * C10231 +
             (C4749 - C4748 + C4751 - C4750) * C10229 +
             (C5392 - C5393 + C5394 - C5395) * C10232 +
             (C5396 - C5397 + C5398 - C5399) * C47481) *
                C47369 * C3094 +
            ((C5393 - C5392 + C5395 - C5394) * C10231 +
             (C5397 - C5396 + C5399 - C5398) * C10229 +
             (C6900 - C6901 + C6902 - C6903) * C10232 +
             (C6904 - C6905 + C6906 - C6907) * C47481) *
                C47369 * C47268) *
               C47488 +
           (((C4753 - C4752 + C4755 - C4754) * C10231 +
             (C4757 - C4756 + C4759 - C4758) * C10229 +
             (C6170 - C6171 + C6172 - C6173) * C10232 +
             (C6174 - C6175 + C6176 - C6177) * C47481) *
                C47369 * C3094 +
            ((C6171 - C6170 + C6173 - C6172) * C10231 +
             (C6175 - C6174 + C6177 - C6176) * C10229 +
             (C4575 * C1172 - C4579 * C1157 + C47448 * C1173 - C4580 * C1158) *
                 C10232 +
             (C4575 * C1184 - C4579 * C1175 + C47448 * C1185 - C4580 * C1176) *
                 C47481) *
                C47369 * C47268) *
               C47461) *
              C47146)) /
            (p * q * std::sqrt(p + q));
    d2ee[70] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C4575 * C124 - C4579 * C117 + C47448 * C125 - C4580 * C118) *
                C10231 +
            (C4575 * C138 - C4579 * C127 + C47448 * C139 - C4580 * C128) *
                C10229 +
            (C10526 - C10527 + C10528 - C10529) * C10232 +
            (C10530 - C10531 + C10532 - C10533) * C47481) *
               C47369 * C47181 * C47429 +
           ((C4729 - C4728 + C4731 - C4730) * C10231 +
            (C4733 - C4732 + C4735 - C4734) * C10229 +
            (C5384 - C5385 + C5386 - C5387) * C10232 +
            (C5388 - C5389 + C5390 - C5391) * C47481) *
               C47369 * C47181 * C47226) *
              C554 +
          (((C4579 * C118 - C4575 * C125 + C4580 * C119 - C47448 * C126) *
                C10231 +
            (C4579 * C128 - C4575 * C139 + C4580 * C129 - C47448 * C140) *
                C10229 +
            (C10542 - C10543 + C10544 - C10545) * C10232 +
            (C10546 - C10547 + C10548 - C10549) * C47481) *
               C47369 * C47181 * C47429 +
           ((C4745 - C4744 + C4747 - C4746) * C10231 +
            (C4749 - C4748 + C4751 - C4750) * C10229 +
            (C5392 - C5393 + C5394 - C5395) * C10232 +
            (C5396 - C5397 + C5398 - C5399) * C47481) *
               C47369 * C47181 * C47226) *
              C555 +
          (((C4575 * C126 - C4579 * C119 + C47448 * C130 - C4580 * C120) *
                C10231 +
            (C4575 * C140 - C4579 * C129 + C47448 * C141 - C4580 * C131) *
                C10229 +
            (C10558 - C10559 + C10560 - C10561) * C10232 +
            (C10562 - C10563 + C10564 - C10565) * C47481) *
               C47369 * C47181 * C47429 +
           ((C4761 - C4760 + C4763 - C4762) * C10231 +
            (C4765 - C4764 + C4767 - C4766) * C10229 +
            (C5400 - C5401 + C5402 - C5403) * C10232 +
            (C5404 - C5405 + C5406 - C5407) * C47481) *
               C47369 * C47181 * C47226) *
              C556 +
          (((C4579 * C120 - C4575 * C130 + C4580 * C121 - C47448 * C132) *
                C10231 +
            (C4579 * C131 - C4575 * C141 + C4580 * C133 - C47448 * C142) *
                C10229 +
            (C4579 * C420 - C4575 * C436 + C4580 * C422 - C47448 * C440) *
                C10232 +
            (C4579 * C437 - C4575 * C450 + C4580 * C441 - C47448 * C452) *
                C47481) *
               C47369 * C47181 * C47429 +
           ((C5053 - C5052 + C5055 - C5054) * C10231 +
            (C5057 - C5056 + C5059 - C5058) * C10229 +
            (C4575 * C823 - C4579 * C815 + C47448 * C825 - C4580 * C816) *
                C10232 +
            (C4575 * C830 - C4579 * C824 + C47448 * C831 - C4580 * C826) *
                C47481) *
               C47369 * C47181 * C47226) *
              C47465)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C4575 * C124 - C4579 * C117 + C47448 * C125 - C4580 * C118) *
                C10231 +
            (C4575 * C138 - C4579 * C127 + C47448 * C139 - C4580 * C128) *
                C10229 +
            (C10526 - C10527 + C10528 - C10529) * C10232 +
            (C10530 - C10531 + C10532 - C10533) * C47481) *
               C47369 * C47181 * C1284 +
           ((C4729 - C4728 + C4731 - C4730) * C10231 +
            (C4733 - C4732 + C4735 - C4734) * C10229 +
            (C5384 - C5385 + C5386 - C5387) * C10232 +
            (C5388 - C5389 + C5390 - C5391) * C47481) *
               C47369 * C47181 * C1285 +
           ((C4737 - C4736 + C4739 - C4738) * C10231 +
            (C4741 - C4740 + C4743 - C4742) * C10229 +
            (C5822 - C5823 + C5824 - C5825) * C10232 +
            (C5826 - C5827 + C5828 - C5829) * C47481) *
               C47369 * C47181 * C1286 +
           ((C5645 - C5644 + C5647 - C5646) * C10231 +
            (C5649 - C5648 + C5651 - C5650) * C10229 +
            (C6316 - C6317 + C6318 - C6319) * C10232 +
            (C6320 - C6321 + C6322 - C6323) * C47481) *
               C47369 * C47181 * C47471) *
              C47415 +
          (((C4579 * C118 - C4575 * C125 + C4580 * C119 - C47448 * C126) *
                C10231 +
            (C4579 * C128 - C4575 * C139 + C4580 * C129 - C47448 * C140) *
                C10229 +
            (C10542 - C10543 + C10544 - C10545) * C10232 +
            (C10546 - C10547 + C10548 - C10549) * C47481) *
               C47369 * C47181 * C1284 +
           ((C4745 - C4744 + C4747 - C4746) * C10231 +
            (C4749 - C4748 + C4751 - C4750) * C10229 +
            (C5392 - C5393 + C5394 - C5395) * C10232 +
            (C5396 - C5397 + C5398 - C5399) * C47481) *
               C47369 * C47181 * C1285 +
           ((C4753 - C4752 + C4755 - C4754) * C10231 +
            (C4757 - C4756 + C4759 - C4758) * C10229 +
            (C6170 - C6171 + C6172 - C6173) * C10232 +
            (C6174 - C6175 + C6176 - C6177) * C47481) *
               C47369 * C47181 * C1286 +
           ((C5969 - C5968 + C5971 - C5970) * C10231 +
            (C5973 - C5972 + C5975 - C5974) * C10229 +
            (C4575 * C1546 - C4579 * C1543 + C47448 * C1547 - C4580 * C1544) *
                C10232 +
            (C4575 * C1552 - C4579 * C1549 + C47448 * C1553 - C4580 * C1550) *
                C47481) *
               C47369 * C47181 * C47471) *
              C47146)) /
            (p * q * std::sqrt(p + q));
    d2ee[71] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C4575 * C124 - C4579 * C117 + C47448 * C125 - C4580 * C118) *
                 C10231 +
             (C4575 * C138 - C4579 * C127 + C47448 * C139 - C4580 * C128) *
                 C10229 +
             (C10526 - C10527 + C10528 - C10529) * C10232 +
             (C10530 - C10531 + C10532 - C10533) * C47481) *
                C47369 * C47430 +
            ((C10527 - C10526 + C10529 - C10528) * C10231 +
             (C10531 - C10530 + C10533 - C10532) * C10229 +
             (C10534 - C10535 + C10536 - C10537) * C10232 +
             (C10538 - C10539 + C10540 - C10541) * C47481) *
                C47369 * C47268) *
               C47429 +
           (((C4729 - C4728 + C4731 - C4730) * C10231 +
             (C4733 - C4732 + C4735 - C4734) * C10229 +
             (C5384 - C5385 + C5386 - C5387) * C10232 +
             (C5388 - C5389 + C5390 - C5391) * C47481) *
                C47369 * C47430 +
            ((C5385 - C5384 + C5387 - C5386) * C10231 +
             (C5389 - C5388 + C5391 - C5390) * C10229 +
             (C5814 - C5815 + C5816 - C5817) * C10232 +
             (C5818 - C5819 + C5820 - C5821) * C47481) *
                C47369 * C47268) *
               C47226) *
              C258 +
          ((((C4579 * C118 - C4575 * C125 + C4580 * C119 - C47448 * C126) *
                 C10231 +
             (C4579 * C128 - C4575 * C139 + C4580 * C129 - C47448 * C140) *
                 C10229 +
             (C10542 - C10543 + C10544 - C10545) * C10232 +
             (C10546 - C10547 + C10548 - C10549) * C47481) *
                C47369 * C47430 +
            ((C10543 - C10542 + C10545 - C10544) * C10231 +
             (C10547 - C10546 + C10549 - C10548) * C10229 +
             (C10550 - C10551 + C10552 - C10553) * C10232 +
             (C10554 - C10555 + C10556 - C10557) * C47481) *
                C47369 * C47268) *
               C47429 +
           (((C4745 - C4744 + C4747 - C4746) * C10231 +
             (C4749 - C4748 + C4751 - C4750) * C10229 +
             (C5392 - C5393 + C5394 - C5395) * C10232 +
             (C5396 - C5397 + C5398 - C5399) * C47481) *
                C47369 * C47430 +
            ((C5393 - C5392 + C5395 - C5394) * C10231 +
             (C5397 - C5396 + C5399 - C5398) * C10229 +
             (C6900 - C6901 + C6902 - C6903) * C10232 +
             (C6904 - C6905 + C6906 - C6907) * C47481) *
                C47369 * C47268) *
               C47226) *
              C259 +
          ((((C4575 * C126 - C4579 * C119 + C47448 * C130 - C4580 * C120) *
                 C10231 +
             (C4575 * C140 - C4579 * C129 + C47448 * C141 - C4580 * C131) *
                 C10229 +
             (C10558 - C10559 + C10560 - C10561) * C10232 +
             (C10562 - C10563 + C10564 - C10565) * C47481) *
                C47369 * C47430 +
            ((C10559 - C10558 + C10561 - C10560) * C10231 +
             (C10563 - C10562 + C10565 - C10564) * C10229 +
             (C10566 - C10567 + C10568 - C10569) * C10232 +
             (C10570 - C10571 + C10572 - C10573) * C47481) *
                C47369 * C47268) *
               C47429 +
           (((C4761 - C4760 + C4763 - C4762) * C10231 +
             (C4765 - C4764 + C4767 - C4766) * C10229 +
             (C5400 - C5401 + C5402 - C5403) * C10232 +
             (C5404 - C5405 + C5406 - C5407) * C47481) *
                C47369 * C47430 +
            ((C5401 - C5400 + C5403 - C5402) * C10231 +
             (C5405 - C5404 + C5407 - C5406) * C10229 +
             (C4575 * C1161 - C4579 * C1152 + C47448 * C2015 - C4580 * C2014) *
                 C10232 +
             (C4575 * C1179 - C4579 * C1164 + C47448 * C2017 - C4580 * C2016) *
                 C47481) *
                C47369 * C47268) *
               C47226) *
              C47455)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C4575 * C124 - C4579 * C117 + C47448 * C125 - C4580 * C118) *
                C10231 +
            (C4575 * C138 - C4579 * C127 + C47448 * C139 - C4580 * C128) *
                C10229 +
            (C10526 - C10527 + C10528 - C10529) * C10232 +
            (C10530 - C10531 + C10532 - C10533) * C47481) *
               C47369 * C47430 +
           ((C10527 - C10526 + C10529 - C10528) * C10231 +
            (C10531 - C10530 + C10533 - C10532) * C10229 +
            (C10534 - C10535 + C10536 - C10537) * C10232 +
            (C10538 - C10539 + C10540 - C10541) * C47481) *
               C47369 * C47268) *
              C1284 +
          (((C4729 - C4728 + C4731 - C4730) * C10231 +
            (C4733 - C4732 + C4735 - C4734) * C10229 +
            (C5384 - C5385 + C5386 - C5387) * C10232 +
            (C5388 - C5389 + C5390 - C5391) * C47481) *
               C47369 * C47430 +
           ((C5385 - C5384 + C5387 - C5386) * C10231 +
            (C5389 - C5388 + C5391 - C5390) * C10229 +
            (C5814 - C5815 + C5816 - C5817) * C10232 +
            (C5818 - C5819 + C5820 - C5821) * C47481) *
               C47369 * C47268) *
              C1285 +
          (((C4737 - C4736 + C4739 - C4738) * C10231 +
            (C4741 - C4740 + C4743 - C4742) * C10229 +
            (C5822 - C5823 + C5824 - C5825) * C10232 +
            (C5826 - C5827 + C5828 - C5829) * C47481) *
               C47369 * C47430 +
           ((C5823 - C5822 + C5825 - C5824) * C10231 +
            (C5827 - C5826 + C5829 - C5828) * C10229 +
            (C5830 - C5831 + C5832 - C5833) * C10232 +
            (C5834 - C5835 + C5836 - C5837) * C47481) *
               C47369 * C47268) *
              C1286 +
          (((C5645 - C5644 + C5647 - C5646) * C10231 +
            (C5649 - C5648 + C5651 - C5650) * C10229 +
            (C6316 - C6317 + C6318 - C6319) * C10232 +
            (C6320 - C6321 + C6322 - C6323) * C47481) *
               C47369 * C47430 +
           ((C6317 - C6316 + C6319 - C6318) * C10231 +
            (C6321 - C6320 + C6323 - C6322) * C10229 +
            (C4575 * C5807 - C4579 * C5805 + C47448 * C5808 - C4580 * C5806) *
                C10232 +
            (C4575 * C5811 - C4579 * C5809 + C47448 * C5812 - C4580 * C5810) *
                C47481) *
               C47369 * C47268) *
              C47471) *
         C47135) /
            (p * q * std::sqrt(p + q));
    d2ee[72] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C4575 * C124 - C4579 * C117 + C47448 * C125 - C4580 * C118) *
                C10231 +
            (C4575 * C138 - C4579 * C127 + C47448 * C139 - C4580 * C128) *
                C10229 +
            (C4575 * C424 - C4579 * C414 + C47448 * C425 - C4580 * C415) *
                C10232 +
            (C4575 * C444 - C4579 * C427 + C47448 * C445 - C4580 * C428) *
                C47481) *
               C47369 * C47181 * C47500 +
           ((C4729 - C4728 + C4731 - C4730) * C10231 +
            (C4733 - C4732 + C4735 - C4734) * C10229 +
            (C5384 - C5385 + C5386 - C5387) * C10232 +
            (C5388 - C5389 + C5390 - C5391) * C47481) *
               C47369 * C47181 * C47488 +
           ((C4737 - C4736 + C4739 - C4738) * C10231 +
            (C4741 - C4740 + C4743 - C4742) * C10229 +
            (C5822 - C5823 + C5824 - C5825) * C10232 +
            (C5826 - C5827 + C5828 - C5829) * C47481) *
               C47369 * C47181 * C47461) *
              C258 +
          (((C4579 * C118 - C4575 * C125 + C4580 * C119 - C47448 * C126) *
                C10231 +
            (C4579 * C128 - C4575 * C139 + C4580 * C129 - C47448 * C140) *
                C10229 +
            (C4579 * C415 - C4575 * C425 + C4580 * C416 - C47448 * C426) *
                C10232 +
            (C4579 * C428 - C4575 * C445 + C4580 * C429 - C47448 * C446) *
                C47481) *
               C47369 * C47181 * C47500 +
           ((C4745 - C4744 + C4747 - C4746) * C10231 +
            (C4749 - C4748 + C4751 - C4750) * C10229 +
            (C5392 - C5393 + C5394 - C5395) * C10232 +
            (C5396 - C5397 + C5398 - C5399) * C47481) *
               C47369 * C47181 * C47488 +
           ((C4753 - C4752 + C4755 - C4754) * C10231 +
            (C4757 - C4756 + C4759 - C4758) * C10229 +
            (C6170 - C6171 + C6172 - C6173) * C10232 +
            (C6174 - C6175 + C6176 - C6177) * C47481) *
               C47369 * C47181 * C47461) *
              C259 +
          (((C4575 * C126 - C4579 * C119 + C47448 * C130 - C4580 * C120) *
                C10231 +
            (C4575 * C140 - C4579 * C129 + C47448 * C141 - C4580 * C131) *
                C10229 +
            (C4575 * C426 - C4579 * C416 + C47448 * C436 - C4580 * C420) *
                C10232 +
            (C4575 * C446 - C4579 * C429 + C47448 * C450 - C4580 * C437) *
                C47481) *
               C47369 * C47181 * C47500 +
           ((C4761 - C4760 + C4763 - C4762) * C10231 +
            (C4765 - C4764 + C4767 - C4766) * C10229 +
            (C5400 - C5401 + C5402 - C5403) * C10232 +
            (C5404 - C5405 + C5406 - C5407) * C47481) *
               C47369 * C47181 * C47488 +
           ((C4769 - C4768 + C4771 - C4770) * C10231 +
            (C4773 - C4772 + C4775 - C4774) * C10229 +
            (C4575 * C1167 - C4579 * C1155 + C47448 * C1441 - C4580 * C1440) *
                C10232 +
            (C4575 * C1182 - C4579 * C1170 + C47448 * C1443 - C4580 * C1442) *
                C47481) *
               C47369 * C47181 * C47461) *
              C47455)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C4575 * C124 - C4579 * C117 + C47448 * C125 - C4580 * C118) *
               C10231 +
           (C4575 * C138 - C4579 * C127 + C47448 * C139 - C4580 * C128) *
               C10229 +
           (C4575 * C424 - C4579 * C414 + C47448 * C425 - C4580 * C415) *
               C10232 +
           (C4575 * C444 - C4579 * C427 + C47448 * C445 - C4580 * C428) *
               C47481) *
              C47369 * C47181 * C47163 * C108 +
          ((C4579 * C118 - C4575 * C125 + C4580 * C119 - C47448 * C126) *
               C10231 +
           (C4579 * C128 - C4575 * C139 + C4580 * C129 - C47448 * C140) *
               C10229 +
           (C4579 * C415 - C4575 * C425 + C4580 * C416 - C47448 * C426) *
               C10232 +
           (C4579 * C428 - C4575 * C445 + C4580 * C429 - C47448 * C446) *
               C47481) *
              C47369 * C47181 * C47163 * C109 +
          ((C4575 * C126 - C4579 * C119 + C47448 * C130 - C4580 * C120) *
               C10231 +
           (C4575 * C140 - C4579 * C129 + C47448 * C141 - C4580 * C131) *
               C10229 +
           (C4575 * C426 - C4579 * C416 + C47448 * C436 - C4580 * C420) *
               C10232 +
           (C4575 * C446 - C4579 * C429 + C47448 * C450 - C4580 * C437) *
               C47481) *
              C47369 * C47181 * C47163 * C110 +
          ((C4579 * C120 - C4575 * C130 + C4580 * C121 - C47448 * C132) *
               C10231 +
           (C4579 * C131 - C4575 * C141 + C4580 * C133 - C47448 * C142) *
               C10229 +
           (C4579 * C420 - C4575 * C436 + C4580 * C422 - C47448 * C440) *
               C10232 +
           (C4579 * C437 - C4575 * C450 + C4580 * C441 - C47448 * C452) *
               C47481) *
              C47369 * C47181 * C47163 * C111 +
          ((C4575 * C132 - C4579 * C121 + C47448 * C134 - C4580 * C122) *
               C10231 +
           (C4575 * C142 - C4579 * C133 + C47448 * C143 - C4580 * C135) *
               C10229 +
           (C4575 * C440 - C4579 * C422 + C47448 * C663 - C4580 * C662) *
               C10232 +
           (C4575 * C452 - C4579 * C441 + C47448 * C665 - C4580 * C664) *
               C47481) *
              C47369 * C47181 * C47163 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4575 * C124 - C4579 * C117 + C47448 * C125 - C4580 * C118) *
                C10231 +
            (C4575 * C138 - C4579 * C127 + C47448 * C139 - C4580 * C128) *
                C10229 +
            (C10526 - C10527 + C10528 - C10529) * C10232 +
            (C10530 - C10531 + C10532 - C10533) * C47481) *
               C47369 * C47501 +
           ((C10527 - C10526 + C10529 - C10528) * C10231 +
            (C10531 - C10530 + C10533 - C10532) * C10229 +
            (C10534 - C10535 + C10536 - C10537) * C10232 +
            (C10538 - C10539 + C10540 - C10541) * C47481) *
               C47369 * C47490 +
           ((C10535 - C10534 + C10537 - C10536) * C10231 +
            (C10539 - C10538 + C10541 - C10540) * C10229 +
            (C4575 * C1850 - C4579 * C1844 + C47448 * C1851 - C4580 * C1845) *
                C10232 +
            (C4575 * C1862 - C4579 * C1853 + C47448 * C1863 - C4580 * C1854) *
                C47481) *
               C47369 * C47464) *
              C47163 * C258 +
          (((C4579 * C118 - C4575 * C125 + C4580 * C119 - C47448 * C126) *
                C10231 +
            (C4579 * C128 - C4575 * C139 + C4580 * C129 - C47448 * C140) *
                C10229 +
            (C10542 - C10543 + C10544 - C10545) * C10232 +
            (C10546 - C10547 + C10548 - C10549) * C47481) *
               C47369 * C47501 +
           ((C10543 - C10542 + C10545 - C10544) * C10231 +
            (C10547 - C10546 + C10549 - C10548) * C10229 +
            (C10550 - C10551 + C10552 - C10553) * C10232 +
            (C10554 - C10555 + C10556 - C10557) * C47481) *
               C47369 * C47490 +
           ((C10551 - C10550 + C10553 - C10552) * C10231 +
            (C10555 - C10554 + C10557 - C10556) * C10229 +
            (C4579 * C1845 - C4575 * C1851 + C4580 * C1846 - C47448 * C1852) *
                C10232 +
            (C4579 * C1854 - C4575 * C1863 + C4580 * C1855 - C47448 * C1864) *
                C47481) *
               C47369 * C47464) *
              C47163 * C259 +
          (((C4575 * C126 - C4579 * C119 + C47448 * C130 - C4580 * C120) *
                C10231 +
            (C4575 * C140 - C4579 * C129 + C47448 * C141 - C4580 * C131) *
                C10229 +
            (C10558 - C10559 + C10560 - C10561) * C10232 +
            (C10562 - C10563 + C10564 - C10565) * C47481) *
               C47369 * C47501 +
           ((C10559 - C10558 + C10561 - C10560) * C10231 +
            (C10563 - C10562 + C10565 - C10564) * C10229 +
            (C10566 - C10567 + C10568 - C10569) * C10232 +
            (C10570 - C10571 + C10572 - C10573) * C47481) *
               C47369 * C47490 +
           ((C10567 - C10566 + C10569 - C10568) * C10231 +
            (C10571 - C10570 + C10573 - C10572) * C10229 +
            (C4575 * C1852 - C4579 * C1846 + C47448 * C2121 - C4580 * C2120) *
                C10232 +
            (C4575 * C1864 - C4579 * C1855 + C47448 * C2123 - C4580 * C2122) *
                C47481) *
               C47369 * C47464) *
              C47163 * C47455)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C4575 * C124 - C4579 * C117 + C47448 * C125 - C4580 * C118) *
                C10231 +
            (C4575 * C138 - C4579 * C127 + C47448 * C139 - C4580 * C128) *
                C10229 +
            (C10526 - C10527 + C10528 - C10529) * C10232 +
            (C10530 - C10531 + C10532 - C10533) * C47481) *
               C47369 * C47181 * C942 +
           ((C4729 - C4728 + C4731 - C4730) * C10231 +
            (C4733 - C4732 + C4735 - C4734) * C10229 +
            (C5384 - C5385 + C5386 - C5387) * C10232 +
            (C5388 - C5389 + C5390 - C5391) * C47481) *
               C47369 * C47181 * C943 +
           ((C4737 - C4736 + C4739 - C4738) * C10231 +
            (C4741 - C4740 + C4743 - C4742) * C10229 +
            (C5822 - C5823 + C5824 - C5825) * C10232 +
            (C5826 - C5827 + C5828 - C5829) * C47481) *
               C47369 * C47181 * C47461) *
              C47497 +
          (((C4579 * C118 - C4575 * C125 + C4580 * C119 - C47448 * C126) *
                C10231 +
            (C4579 * C128 - C4575 * C139 + C4580 * C129 - C47448 * C140) *
                C10229 +
            (C10542 - C10543 + C10544 - C10545) * C10232 +
            (C10546 - C10547 + C10548 - C10549) * C47481) *
               C47369 * C47181 * C942 +
           ((C4745 - C4744 + C4747 - C4746) * C10231 +
            (C4749 - C4748 + C4751 - C4750) * C10229 +
            (C5392 - C5393 + C5394 - C5395) * C10232 +
            (C5396 - C5397 + C5398 - C5399) * C47481) *
               C47369 * C47181 * C943 +
           ((C4753 - C4752 + C4755 - C4754) * C10231 +
            (C4757 - C4756 + C4759 - C4758) * C10229 +
            (C6170 - C6171 + C6172 - C6173) * C10232 +
            (C6174 - C6175 + C6176 - C6177) * C47481) *
               C47369 * C47181 * C47461) *
              C47484 +
          (((C4575 * C126 - C4579 * C119 + C47448 * C130 - C4580 * C120) *
                C10231 +
            (C4575 * C140 - C4579 * C129 + C47448 * C141 - C4580 * C131) *
                C10229 +
            (C10558 - C10559 + C10560 - C10561) * C10232 +
            (C10562 - C10563 + C10564 - C10565) * C47481) *
               C47369 * C47181 * C942 +
           ((C4761 - C4760 + C4763 - C4762) * C10231 +
            (C4765 - C4764 + C4767 - C4766) * C10229 +
            (C5400 - C5401 + C5402 - C5403) * C10232 +
            (C5404 - C5405 + C5406 - C5407) * C47481) *
               C47369 * C47181 * C943 +
           ((C4769 - C4768 + C4771 - C4770) * C10231 +
            (C4773 - C4772 + C4775 - C4774) * C10229 +
            (C4575 * C1167 - C4579 * C1155 + C47448 * C1441 - C4580 * C1440) *
                C10232 +
            (C4575 * C1182 - C4579 * C1170 + C47448 * C1443 - C4580 * C1442) *
                C47481) *
               C47369 * C47181 * C47461) *
              C47455)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C4575 * C124 - C4579 * C117 + C47448 * C125 - C4580 * C118) *
               C10231 +
           (C4575 * C138 - C4579 * C127 + C47448 * C139 - C4580 * C128) *
               C10229 +
           (C10526 - C10527 + C10528 - C10529) * C10232 +
           (C10530 - C10531 + C10532 - C10533) * C47481) *
              C47369 * C47181 * C1010 +
          ((C4729 - C4728 + C4731 - C4730) * C10231 +
           (C4733 - C4732 + C4735 - C4734) * C10229 +
           (C5384 - C5385 + C5386 - C5387) * C10232 +
           (C5388 - C5389 + C5390 - C5391) * C47481) *
              C47369 * C47181 * C1011 +
          ((C4737 - C4736 + C4739 - C4738) * C10231 +
           (C4741 - C4740 + C4743 - C4742) * C10229 +
           (C5822 - C5823 + C5824 - C5825) * C10232 +
           (C5826 - C5827 + C5828 - C5829) * C47481) *
              C47369 * C47181 * C1012 +
          ((C5645 - C5644 + C5647 - C5646) * C10231 +
           (C5649 - C5648 + C5651 - C5650) * C10229 +
           (C6316 - C6317 + C6318 - C6319) * C10232 +
           (C6320 - C6321 + C6322 - C6323) * C47481) *
              C47369 * C47181 * C1013 +
          ((C5653 - C5652 + C5655 - C5654) * C10231 +
           (C5657 - C5656 + C5659 - C5658) * C10229 +
           (C4575 * C6309 - C4579 * C6307 + C47448 * C6310 - C4580 * C6308) *
               C10232 +
           (C4575 * C6313 - C4579 * C6311 + C47448 * C6314 - C4580 * C6312) *
               C47481) *
              C47369 * C47181 * C1014) *
         C47135) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4575 * C124 - C4579 * C117 + C47448 * C125 - C4580 * C118) *
                C10231 +
            (C4575 * C138 - C4579 * C127 + C47448 * C139 - C4580 * C128) *
                C10229 +
            (C10526 - C10527 + C10528 - C10529) * C10232 +
            (C10530 - C10531 + C10532 - C10533) * C47481) *
               C47369 * C47501 +
           ((C10527 - C10526 + C10529 - C10528) * C10231 +
            (C10531 - C10530 + C10533 - C10532) * C10229 +
            (C10534 - C10535 + C10536 - C10537) * C10232 +
            (C10538 - C10539 + C10540 - C10541) * C47481) *
               C47369 * C47490 +
           ((C10535 - C10534 + C10537 - C10536) * C10231 +
            (C10539 - C10538 + C10541 - C10540) * C10229 +
            (C4575 * C1850 - C4579 * C1844 + C47448 * C1851 - C4580 * C1845) *
                C10232 +
            (C4575 * C1862 - C4579 * C1853 + C47448 * C1863 - C4580 * C1854) *
                C47481) *
               C47369 * C47464) *
              C942 +
          (((C4729 - C4728 + C4731 - C4730) * C10231 +
            (C4733 - C4732 + C4735 - C4734) * C10229 +
            (C5384 - C5385 + C5386 - C5387) * C10232 +
            (C5388 - C5389 + C5390 - C5391) * C47481) *
               C47369 * C47501 +
           ((C5385 - C5384 + C5387 - C5386) * C10231 +
            (C5389 - C5388 + C5391 - C5390) * C10229 +
            (C5814 - C5815 + C5816 - C5817) * C10232 +
            (C5818 - C5819 + C5820 - C5821) * C47481) *
               C47369 * C47490 +
           ((C5815 - C5814 + C5817 - C5816) * C10231 +
            (C5819 - C5818 + C5821 - C5820) * C10229 +
            (C7176 - C7177 + C7178 - C7179) * C10232 +
            (C7180 - C7181 + C7182 - C7183) * C47481) *
               C47369 * C47464) *
              C943 +
          (((C4737 - C4736 + C4739 - C4738) * C10231 +
            (C4741 - C4740 + C4743 - C4742) * C10229 +
            (C5822 - C5823 + C5824 - C5825) * C10232 +
            (C5826 - C5827 + C5828 - C5829) * C47481) *
               C47369 * C47501 +
           ((C5823 - C5822 + C5825 - C5824) * C10231 +
            (C5827 - C5826 + C5829 - C5828) * C10229 +
            (C5830 - C5831 + C5832 - C5833) * C10232 +
            (C5834 - C5835 + C5836 - C5837) * C47481) *
               C47369 * C47490 +
           ((C5831 - C5830 + C5833 - C5832) * C10231 +
            (C5835 - C5834 + C5837 - C5836) * C10229 +
            (C4575 * C7169 - C4579 * C7167 + C47448 * C7170 - C4580 * C7168) *
                C10232 +
            (C4575 * C7173 - C4579 * C7171 + C47448 * C7174 - C4580 * C7172) *
                C47481) *
               C47369 * C47464) *
              C47461) *
         C47135) /
            (p * q * std::sqrt(p + q));
    d2ee[73] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C4575 * C124 - C4579 * C117 + C47448 * C125 - C4580 * C118) *
                C10231 +
            (C4575 * C138 - C4579 * C127 + C47448 * C139 - C4580 * C128) *
                C10229 +
            (C10526 - C10527 + C10528 - C10529) * C10232 +
            (C10530 - C10531 + C10532 - C10533) * C47481) *
               C47369 * C47430 +
           ((C10527 - C10526 + C10529 - C10528) * C10231 +
            (C10531 - C10530 + C10533 - C10532) * C10229 +
            (C10534 - C10535 + C10536 - C10537) * C10232 +
            (C10538 - C10539 + C10540 - C10541) * C47481) *
               C47369 * C47268) *
              C47163 * C554 +
          (((C4579 * C118 - C4575 * C125 + C4580 * C119 - C47448 * C126) *
                C10231 +
            (C4579 * C128 - C4575 * C139 + C4580 * C129 - C47448 * C140) *
                C10229 +
            (C10542 - C10543 + C10544 - C10545) * C10232 +
            (C10546 - C10547 + C10548 - C10549) * C47481) *
               C47369 * C47430 +
           ((C10543 - C10542 + C10545 - C10544) * C10231 +
            (C10547 - C10546 + C10549 - C10548) * C10229 +
            (C10550 - C10551 + C10552 - C10553) * C10232 +
            (C10554 - C10555 + C10556 - C10557) * C47481) *
               C47369 * C47268) *
              C47163 * C555 +
          (((C4575 * C126 - C4579 * C119 + C47448 * C130 - C4580 * C120) *
                C10231 +
            (C4575 * C140 - C4579 * C129 + C47448 * C141 - C4580 * C131) *
                C10229 +
            (C10558 - C10559 + C10560 - C10561) * C10232 +
            (C10562 - C10563 + C10564 - C10565) * C47481) *
               C47369 * C47430 +
           ((C10559 - C10558 + C10561 - C10560) * C10231 +
            (C10563 - C10562 + C10565 - C10564) * C10229 +
            (C10566 - C10567 + C10568 - C10569) * C10232 +
            (C10570 - C10571 + C10572 - C10573) * C47481) *
               C47369 * C47268) *
              C47163 * C556 +
          (((C4579 * C120 - C4575 * C130 + C4580 * C121 - C47448 * C132) *
                C10231 +
            (C4579 * C131 - C4575 * C141 + C4580 * C133 - C47448 * C142) *
                C10229 +
            (C10834 - C10835 + C10836 - C10837) * C10232 +
            (C10838 - C10839 + C10840 - C10841) * C47481) *
               C47369 * C47430 +
           ((C10835 - C10834 + C10837 - C10836) * C10231 +
            (C10839 - C10838 + C10841 - C10840) * C10229 +
            (C4575 * C438 - C4579 * C421 + C47448 * C442 - C4580 * C423) *
                C10232 +
            (C4575 * C451 - C4579 * C439 + C47448 * C453 - C4580 * C443) *
                C47481) *
               C47369 * C47268) *
              C47163 * C47465)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C4575 * C124 - C4579 * C117 + C47448 * C125 - C4580 * C118) *
                 C10231 +
             (C4575 * C138 - C4579 * C127 + C47448 * C139 - C4580 * C128) *
                 C10229 +
             (C10526 - C10527 + C10528 - C10529) * C10232 +
             (C10530 - C10531 + C10532 - C10533) * C47481) *
                C47369 * C47430 +
            ((C10527 - C10526 + C10529 - C10528) * C10231 +
             (C10531 - C10530 + C10533 - C10532) * C10229 +
             (C10534 - C10535 + C10536 - C10537) * C10232 +
             (C10538 - C10539 + C10540 - C10541) * C47481) *
                C47369 * C47268) *
               C942 +
           (((C4729 - C4728 + C4731 - C4730) * C10231 +
             (C4733 - C4732 + C4735 - C4734) * C10229 +
             (C5384 - C5385 + C5386 - C5387) * C10232 +
             (C5388 - C5389 + C5390 - C5391) * C47481) *
                C47369 * C47430 +
            ((C5385 - C5384 + C5387 - C5386) * C10231 +
             (C5389 - C5388 + C5391 - C5390) * C10229 +
             (C5814 - C5815 + C5816 - C5817) * C10232 +
             (C5818 - C5819 + C5820 - C5821) * C47481) *
                C47369 * C47268) *
               C943 +
           (((C4737 - C4736 + C4739 - C4738) * C10231 +
             (C4741 - C4740 + C4743 - C4742) * C10229 +
             (C5822 - C5823 + C5824 - C5825) * C10232 +
             (C5826 - C5827 + C5828 - C5829) * C47481) *
                C47369 * C47430 +
            ((C5823 - C5822 + C5825 - C5824) * C10231 +
             (C5827 - C5826 + C5829 - C5828) * C10229 +
             (C5830 - C5831 + C5832 - C5833) * C10232 +
             (C5834 - C5835 + C5836 - C5837) * C47481) *
                C47369 * C47268) *
               C47461) *
              C47415 +
          ((((C4579 * C118 - C4575 * C125 + C4580 * C119 - C47448 * C126) *
                 C10231 +
             (C4579 * C128 - C4575 * C139 + C4580 * C129 - C47448 * C140) *
                 C10229 +
             (C10542 - C10543 + C10544 - C10545) * C10232 +
             (C10546 - C10547 + C10548 - C10549) * C47481) *
                C47369 * C47430 +
            ((C10543 - C10542 + C10545 - C10544) * C10231 +
             (C10547 - C10546 + C10549 - C10548) * C10229 +
             (C10550 - C10551 + C10552 - C10553) * C10232 +
             (C10554 - C10555 + C10556 - C10557) * C47481) *
                C47369 * C47268) *
               C942 +
           (((C4745 - C4744 + C4747 - C4746) * C10231 +
             (C4749 - C4748 + C4751 - C4750) * C10229 +
             (C5392 - C5393 + C5394 - C5395) * C10232 +
             (C5396 - C5397 + C5398 - C5399) * C47481) *
                C47369 * C47430 +
            ((C5393 - C5392 + C5395 - C5394) * C10231 +
             (C5397 - C5396 + C5399 - C5398) * C10229 +
             (C6900 - C6901 + C6902 - C6903) * C10232 +
             (C6904 - C6905 + C6906 - C6907) * C47481) *
                C47369 * C47268) *
               C943 +
           (((C4753 - C4752 + C4755 - C4754) * C10231 +
             (C4757 - C4756 + C4759 - C4758) * C10229 +
             (C6170 - C6171 + C6172 - C6173) * C10232 +
             (C6174 - C6175 + C6176 - C6177) * C47481) *
                C47369 * C47430 +
            ((C6171 - C6170 + C6173 - C6172) * C10231 +
             (C6175 - C6174 + C6177 - C6176) * C10229 +
             (C4575 * C1172 - C4579 * C1157 + C47448 * C1173 - C4580 * C1158) *
                 C10232 +
             (C4575 * C1184 - C4579 * C1175 + C47448 * C1185 - C4580 * C1176) *
                 C47481) *
                C47369 * C47268) *
               C47461) *
              C47146)) /
            (p * q * std::sqrt(p + q));
    d2ee[74] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C4575 * C124 - C4579 * C117 + C47448 * C125 - C4580 * C118) *
               C10231 +
           (C4575 * C138 - C4579 * C127 + C47448 * C139 - C4580 * C128) *
               C10229 +
           (C4575 * C424 - C4579 * C414 + C47448 * C425 - C4580 * C415) *
               C10232 +
           (C4575 * C444 - C4579 * C427 + C47448 * C445 - C4580 * C428) *
               C47481) *
              C47369 * C47181 * C47163 * C108 +
          ((C4579 * C118 - C4575 * C125 + C4580 * C119 - C47448 * C126) *
               C10231 +
           (C4579 * C128 - C4575 * C139 + C4580 * C129 - C47448 * C140) *
               C10229 +
           (C4579 * C415 - C4575 * C425 + C4580 * C416 - C47448 * C426) *
               C10232 +
           (C4579 * C428 - C4575 * C445 + C4580 * C429 - C47448 * C446) *
               C47481) *
              C47369 * C47181 * C47163 * C109 +
          ((C4575 * C126 - C4579 * C119 + C47448 * C130 - C4580 * C120) *
               C10231 +
           (C4575 * C140 - C4579 * C129 + C47448 * C141 - C4580 * C131) *
               C10229 +
           (C4575 * C426 - C4579 * C416 + C47448 * C436 - C4580 * C420) *
               C10232 +
           (C4575 * C446 - C4579 * C429 + C47448 * C450 - C4580 * C437) *
               C47481) *
              C47369 * C47181 * C47163 * C110 +
          ((C4579 * C120 - C4575 * C130 + C4580 * C121 - C47448 * C132) *
               C10231 +
           (C4579 * C131 - C4575 * C141 + C4580 * C133 - C47448 * C142) *
               C10229 +
           (C4579 * C420 - C4575 * C436 + C4580 * C422 - C47448 * C440) *
               C10232 +
           (C4579 * C437 - C4575 * C450 + C4580 * C441 - C47448 * C452) *
               C47481) *
              C47369 * C47181 * C47163 * C111 +
          ((C4575 * C132 - C4579 * C121 + C47448 * C134 - C4580 * C122) *
               C10231 +
           (C4575 * C142 - C4579 * C133 + C47448 * C143 - C4580 * C135) *
               C10229 +
           (C4575 * C440 - C4579 * C422 + C47448 * C663 - C4580 * C662) *
               C10232 +
           (C4575 * C452 - C4579 * C441 + C47448 * C665 - C4580 * C664) *
               C47481) *
              C47369 * C47181 * C47163 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C4575 * C124 - C4579 * C117 + C47448 * C125 - C4580 * C118) *
                C10231 +
            (C4575 * C138 - C4579 * C127 + C47448 * C139 - C4580 * C128) *
                C10229 +
            (C4575 * C424 - C4579 * C414 + C47448 * C425 - C4580 * C415) *
                C10232 +
            (C4575 * C444 - C4579 * C427 + C47448 * C445 - C4580 * C428) *
                C47481) *
               C47369 * C47181 * C47500 +
           ((C4729 - C4728 + C4731 - C4730) * C10231 +
            (C4733 - C4732 + C4735 - C4734) * C10229 +
            (C5384 - C5385 + C5386 - C5387) * C10232 +
            (C5388 - C5389 + C5390 - C5391) * C47481) *
               C47369 * C47181 * C47488 +
           ((C4737 - C4736 + C4739 - C4738) * C10231 +
            (C4741 - C4740 + C4743 - C4742) * C10229 +
            (C5822 - C5823 + C5824 - C5825) * C10232 +
            (C5826 - C5827 + C5828 - C5829) * C47481) *
               C47369 * C47181 * C47461) *
              C258 +
          (((C4579 * C118 - C4575 * C125 + C4580 * C119 - C47448 * C126) *
                C10231 +
            (C4579 * C128 - C4575 * C139 + C4580 * C129 - C47448 * C140) *
                C10229 +
            (C4579 * C415 - C4575 * C425 + C4580 * C416 - C47448 * C426) *
                C10232 +
            (C4579 * C428 - C4575 * C445 + C4580 * C429 - C47448 * C446) *
                C47481) *
               C47369 * C47181 * C47500 +
           ((C4745 - C4744 + C4747 - C4746) * C10231 +
            (C4749 - C4748 + C4751 - C4750) * C10229 +
            (C5392 - C5393 + C5394 - C5395) * C10232 +
            (C5396 - C5397 + C5398 - C5399) * C47481) *
               C47369 * C47181 * C47488 +
           ((C4753 - C4752 + C4755 - C4754) * C10231 +
            (C4757 - C4756 + C4759 - C4758) * C10229 +
            (C6170 - C6171 + C6172 - C6173) * C10232 +
            (C6174 - C6175 + C6176 - C6177) * C47481) *
               C47369 * C47181 * C47461) *
              C259 +
          (((C4575 * C126 - C4579 * C119 + C47448 * C130 - C4580 * C120) *
                C10231 +
            (C4575 * C140 - C4579 * C129 + C47448 * C141 - C4580 * C131) *
                C10229 +
            (C4575 * C426 - C4579 * C416 + C47448 * C436 - C4580 * C420) *
                C10232 +
            (C4575 * C446 - C4579 * C429 + C47448 * C450 - C4580 * C437) *
                C47481) *
               C47369 * C47181 * C47500 +
           ((C4761 - C4760 + C4763 - C4762) * C10231 +
            (C4765 - C4764 + C4767 - C4766) * C10229 +
            (C5400 - C5401 + C5402 - C5403) * C10232 +
            (C5404 - C5405 + C5406 - C5407) * C47481) *
               C47369 * C47181 * C47488 +
           ((C4769 - C4768 + C4771 - C4770) * C10231 +
            (C4773 - C4772 + C4775 - C4774) * C10229 +
            (C4575 * C1167 - C4579 * C1155 + C47448 * C1441 - C4580 * C1440) *
                C10232 +
            (C4575 * C1182 - C4579 * C1170 + C47448 * C1443 - C4580 * C1442) *
                C47481) *
               C47369 * C47181 * C47461) *
              C47455)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C4575 * C124 - C4579 * C117 + C47448 * C125 - C4580 * C118) *
                C10231 +
            (C4575 * C138 - C4579 * C127 + C47448 * C139 - C4580 * C128) *
                C10229 +
            (C10526 - C10527 + C10528 - C10529) * C10232 +
            (C10530 - C10531 + C10532 - C10533) * C47481) *
               C47369 * C47181 * C942 +
           ((C4729 - C4728 + C4731 - C4730) * C10231 +
            (C4733 - C4732 + C4735 - C4734) * C10229 +
            (C5384 - C5385 + C5386 - C5387) * C10232 +
            (C5388 - C5389 + C5390 - C5391) * C47481) *
               C47369 * C47181 * C943 +
           ((C4737 - C4736 + C4739 - C4738) * C10231 +
            (C4741 - C4740 + C4743 - C4742) * C10229 +
            (C5822 - C5823 + C5824 - C5825) * C10232 +
            (C5826 - C5827 + C5828 - C5829) * C47481) *
               C47369 * C47181 * C47461) *
              C47497 +
          (((C4579 * C118 - C4575 * C125 + C4580 * C119 - C47448 * C126) *
                C10231 +
            (C4579 * C128 - C4575 * C139 + C4580 * C129 - C47448 * C140) *
                C10229 +
            (C10542 - C10543 + C10544 - C10545) * C10232 +
            (C10546 - C10547 + C10548 - C10549) * C47481) *
               C47369 * C47181 * C942 +
           ((C4745 - C4744 + C4747 - C4746) * C10231 +
            (C4749 - C4748 + C4751 - C4750) * C10229 +
            (C5392 - C5393 + C5394 - C5395) * C10232 +
            (C5396 - C5397 + C5398 - C5399) * C47481) *
               C47369 * C47181 * C943 +
           ((C4753 - C4752 + C4755 - C4754) * C10231 +
            (C4757 - C4756 + C4759 - C4758) * C10229 +
            (C6170 - C6171 + C6172 - C6173) * C10232 +
            (C6174 - C6175 + C6176 - C6177) * C47481) *
               C47369 * C47181 * C47461) *
              C47484 +
          (((C4575 * C126 - C4579 * C119 + C47448 * C130 - C4580 * C120) *
                C10231 +
            (C4575 * C140 - C4579 * C129 + C47448 * C141 - C4580 * C131) *
                C10229 +
            (C10558 - C10559 + C10560 - C10561) * C10232 +
            (C10562 - C10563 + C10564 - C10565) * C47481) *
               C47369 * C47181 * C942 +
           ((C4761 - C4760 + C4763 - C4762) * C10231 +
            (C4765 - C4764 + C4767 - C4766) * C10229 +
            (C5400 - C5401 + C5402 - C5403) * C10232 +
            (C5404 - C5405 + C5406 - C5407) * C47481) *
               C47369 * C47181 * C943 +
           ((C4769 - C4768 + C4771 - C4770) * C10231 +
            (C4773 - C4772 + C4775 - C4774) * C10229 +
            (C4575 * C1167 - C4579 * C1155 + C47448 * C1441 - C4580 * C1440) *
                C10232 +
            (C4575 * C1182 - C4579 * C1170 + C47448 * C1443 - C4580 * C1442) *
                C47481) *
               C47369 * C47181 * C47461) *
              C47455)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C4575 * C124 - C4579 * C117 + C47448 * C125 - C4580 * C118) *
               C10231 +
           (C4575 * C138 - C4579 * C127 + C47448 * C139 - C4580 * C128) *
               C10229 +
           (C10526 - C10527 + C10528 - C10529) * C10232 +
           (C10530 - C10531 + C10532 - C10533) * C47481) *
              C47369 * C47181 * C1010 +
          ((C4729 - C4728 + C4731 - C4730) * C10231 +
           (C4733 - C4732 + C4735 - C4734) * C10229 +
           (C5384 - C5385 + C5386 - C5387) * C10232 +
           (C5388 - C5389 + C5390 - C5391) * C47481) *
              C47369 * C47181 * C1011 +
          ((C4737 - C4736 + C4739 - C4738) * C10231 +
           (C4741 - C4740 + C4743 - C4742) * C10229 +
           (C5822 - C5823 + C5824 - C5825) * C10232 +
           (C5826 - C5827 + C5828 - C5829) * C47481) *
              C47369 * C47181 * C1012 +
          ((C5645 - C5644 + C5647 - C5646) * C10231 +
           (C5649 - C5648 + C5651 - C5650) * C10229 +
           (C6316 - C6317 + C6318 - C6319) * C10232 +
           (C6320 - C6321 + C6322 - C6323) * C47481) *
              C47369 * C47181 * C1013 +
          ((C5653 - C5652 + C5655 - C5654) * C10231 +
           (C5657 - C5656 + C5659 - C5658) * C10229 +
           (C4575 * C6309 - C4579 * C6307 + C47448 * C6310 - C4580 * C6308) *
               C10232 +
           (C4575 * C6313 - C4579 * C6311 + C47448 * C6314 - C4580 * C6312) *
               C47481) *
              C47369 * C47181 * C1014) *
         C47135) /
            (p * q * std::sqrt(p + q));
    d2ee[75] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C15769 * C124 - C15773 * C117 + C47448 * C125 - C15774 * C118) *
                 C116 +
             (C15769 * C138 - C15773 * C127 + C47448 * C139 - C15774 * C128) *
                 C47384) *
                C15771 +
            ((C15922 - C15923 + C15924 - C15925) * C116 +
             (C15926 - C15927 + C15928 - C15929) * C47384) *
                C47479) *
               C47181 * C47222 +
           (((C15923 - C15922 + C15925 - C15924) * C116 +
             (C15927 - C15926 + C15929 - C15928) * C47384) *
                C15771 +
            ((C15930 - C15931 + C15932 - C15933) * C116 +
             (C15934 - C15935 + C15936 - C15937) * C47384) *
                C47479) *
               C47181 * C47229 +
           (((C15931 - C15930 + C15933 - C15932) * C116 +
             (C15935 - C15934 + C15937 - C15936) * C47384) *
                C15771 +
            ((C16830 - C16831 + C16832 - C16833) * C116 +
             (C16834 - C16835 + C16836 - C16837) * C47384) *
                C47479) *
               C47181 * C2700) *
              C47140 +
          ((((C15773 * C118 - C15769 * C125 + C15774 * C119 - C47448 * C126) *
                 C116 +
             (C15773 * C128 - C15769 * C139 + C15774 * C129 - C47448 * C140) *
                 C47384) *
                C15771 +
            ((C15938 - C15939 + C15940 - C15941) * C116 +
             (C15942 - C15943 + C15944 - C15945) * C47384) *
                C47479) *
               C47181 * C47222 +
           (((C15939 - C15938 + C15941 - C15940) * C116 +
             (C15943 - C15942 + C15945 - C15944) * C47384) *
                C15771 +
            ((C15946 - C15947 + C15948 - C15949) * C116 +
             (C15950 - C15951 + C15952 - C15953) * C47384) *
                C47479) *
               C47181 * C47229 +
           (((C15947 - C15946 + C15949 - C15948) * C116 +
             (C15951 - C15950 + C15953 - C15952) * C47384) *
                C15771 +
            ((C17146 - C17147 + C17148 - C17149) * C116 +
             (C17150 - C17151 + C17152 - C17153) * C47384) *
                C47479) *
               C47181 * C2700) *
              C47149 +
          ((((C15769 * C126 - C15773 * C119 + C47448 * C130 - C15774 * C120) *
                 C116 +
             (C15769 * C140 - C15773 * C129 + C47448 * C141 - C15774 * C131) *
                 C47384) *
                C15771 +
            ((C15954 - C15955 + C15956 - C15957) * C116 +
             (C15958 - C15959 + C15960 - C15961) * C47384) *
                C47479) *
               C47181 * C47222 +
           (((C15955 - C15954 + C15957 - C15956) * C116 +
             (C15959 - C15958 + C15961 - C15960) * C47384) *
                C15771 +
            ((C15962 - C15963 + C15964 - C15965) * C116 +
             (C15966 - C15967 + C15968 - C15969) * C47384) *
                C47479) *
               C47181 * C47229 +
           (((C15963 - C15962 + C15965 - C15964) * C116 +
             (C15967 - C15966 + C15969 - C15968) * C47384) *
                C15771 +
            ((C15769 * C1024 - C15773 * C1018 + C47448 * C1291 -
              C15774 * C1290) *
                 C116 +
             (C15769 * C1036 - C15773 * C1027 + C47448 * C1293 -
              C15774 * C1292) *
                 C47384) *
                C47479) *
               C47181 * C2700) *
              C2703)) /
        (p * q * std::sqrt(p + q));
    d2ee[76] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C15769 * C124 - C15773 * C117 + C47448 * C125 - C15774 * C118) *
                  C116 +
              (C15769 * C138 - C15773 * C127 + C47448 * C139 - C15774 * C128) *
                  C47384) *
                 C15771 +
             ((C15922 - C15923 + C15924 - C15925) * C116 +
              (C15926 - C15927 + C15928 - C15929) * C47384) *
                 C47479) *
                C47430 +
            (((C15773 * C414 - C15769 * C424 + C15774 * C415 - C47448 * C425) *
                  C116 +
              (C15773 * C427 - C15769 * C444 + C15774 * C428 - C47448 * C445) *
                  C47384) *
                 C15771 +
             ((C16578 - C16579 + C16580 - C16581) * C116 +
              (C16582 - C16583 + C16584 - C16585) * C47384) *
                 C47479) *
                C47268) *
               C47222 +
           ((((C15923 - C15922 + C15925 - C15924) * C116 +
              (C15927 - C15926 + C15929 - C15928) * C47384) *
                 C15771 +
             ((C15930 - C15931 + C15932 - C15933) * C116 +
              (C15934 - C15935 + C15936 - C15937) * C47384) *
                 C47479) *
                C47430 +
            (((C16579 - C16578 + C16581 - C16580) * C116 +
              (C16583 - C16582 + C16585 - C16584) * C47384) *
                 C15771 +
             ((C17000 - C17001 + C17002 - C17003) * C116 +
              (C17004 - C17005 + C17006 - C17007) * C47384) *
                 C47479) *
                C47268) *
               C47229 +
           ((((C15931 - C15930 + C15933 - C15932) * C116 +
              (C15935 - C15934 + C15937 - C15936) * C47384) *
                 C15771 +
             ((C16830 - C16831 + C16832 - C16833) * C116 +
              (C16834 - C16835 + C16836 - C16837) * C47384) *
                 C47479) *
                C47430 +
            (((C17001 - C17000 + C17003 - C17002) * C116 +
              (C17005 - C17004 + C17007 - C17006) * C47384) *
                 C15771 +
             ((C17486 - C17487 + C17488 - C17489) * C116 +
              (C17490 - C17491 + C17492 - C17493) * C47384) *
                 C47479) *
                C47268) *
               C2700) *
              C2440 +
          (((((C15773 * C118 - C15769 * C125 + C15774 * C119 - C47448 * C126) *
                  C116 +
              (C15773 * C128 - C15769 * C139 + C15774 * C129 - C47448 * C140) *
                  C47384) *
                 C15771 +
             ((C15938 - C15939 + C15940 - C15941) * C116 +
              (C15942 - C15943 + C15944 - C15945) * C47384) *
                 C47479) *
                C47430 +
            (((C15769 * C425 - C15773 * C415 + C47448 * C426 - C15774 * C416) *
                  C116 +
              (C15769 * C445 - C15773 * C428 + C47448 * C446 - C15774 * C429) *
                  C47384) *
                 C15771 +
             ((C16586 - C16587 + C16588 - C16589) * C116 +
              (C16590 - C16591 + C16592 - C16593) * C47384) *
                 C47479) *
                C47268) *
               C47222 +
           ((((C15939 - C15938 + C15941 - C15940) * C116 +
              (C15943 - C15942 + C15945 - C15944) * C47384) *
                 C15771 +
             ((C15946 - C15947 + C15948 - C15949) * C116 +
              (C15950 - C15951 + C15952 - C15953) * C47384) *
                 C47479) *
                C47430 +
            (((C16587 - C16586 + C16589 - C16588) * C116 +
              (C16591 - C16590 + C16593 - C16592) * C47384) *
                 C15771 +
             ((C17348 - C17349 + C17350 - C17351) * C116 +
              (C17352 - C17353 + C17354 - C17355) * C47384) *
                 C47479) *
                C47268) *
               C47229 +
           ((((C15947 - C15946 + C15949 - C15948) * C116 +
              (C15951 - C15950 + C15953 - C15952) * C47384) *
                 C15771 +
             ((C17146 - C17147 + C17148 - C17149) * C116 +
              (C17150 - C17151 + C17152 - C17153) * C47384) *
                 C47479) *
                C47430 +
            (((C17349 - C17348 + C17351 - C17350) * C116 +
              (C17353 - C17352 + C17355 - C17354) * C47384) *
                 C15771 +
             ((C15769 * C1546 - C15773 * C1543 + C47448 * C1547 -
               C15774 * C1544) *
                  C116 +
              (C15769 * C1552 - C15773 * C1549 + C47448 * C1553 -
               C15774 * C1550) *
                  C47384) *
                 C47479) *
                C47268) *
               C2700) *
              C47146)) /
        (p * q * std::sqrt(p + q));
    d2ee[77] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C15769 * C124 - C15773 * C117 + C47448 * C125 - C15774 * C118) *
                 C116 +
             (C15769 * C138 - C15773 * C127 + C47448 * C139 - C15774 * C128) *
                 C47384) *
                C15771 +
            ((C15922 - C15923 + C15924 - C15925) * C116 +
             (C15926 - C15927 + C15928 - C15929) * C47384) *
                C47479) *
               C47181 * C47507 +
           (((C15923 - C15922 + C15925 - C15924) * C116 +
             (C15927 - C15926 + C15929 - C15928) * C47384) *
                C15771 +
            ((C15930 - C15931 + C15932 - C15933) * C116 +
             (C15934 - C15935 + C15936 - C15937) * C47384) *
                C47479) *
               C47181 * C47503 +
           (((C15931 - C15930 + C15933 - C15932) * C116 +
             (C15935 - C15934 + C15937 - C15936) * C47384) *
                C15771 +
            ((C16830 - C16831 + C16832 - C16833) * C116 +
             (C16834 - C16835 + C16836 - C16837) * C47384) *
                C47479) *
               C47181 * C47493 +
           (((C16831 - C16830 + C16833 - C16832) * C116 +
             (C16835 - C16834 + C16837 - C16836) * C47384) *
                C15771 +
            ((C16838 - C16839 + C16840 - C16841) * C116 +
             (C16842 - C16843 + C16844 - C16845) * C47384) *
                C47479) *
               C47181 * C47471) *
              C2440 +
          ((((C15773 * C118 - C15769 * C125 + C15774 * C119 - C47448 * C126) *
                 C116 +
             (C15773 * C128 - C15769 * C139 + C15774 * C129 - C47448 * C140) *
                 C47384) *
                C15771 +
            ((C15938 - C15939 + C15940 - C15941) * C116 +
             (C15942 - C15943 + C15944 - C15945) * C47384) *
                C47479) *
               C47181 * C47507 +
           (((C15939 - C15938 + C15941 - C15940) * C116 +
             (C15943 - C15942 + C15945 - C15944) * C47384) *
                C15771 +
            ((C15946 - C15947 + C15948 - C15949) * C116 +
             (C15950 - C15951 + C15952 - C15953) * C47384) *
                C47479) *
               C47181 * C47503 +
           (((C15947 - C15946 + C15949 - C15948) * C116 +
             (C15951 - C15950 + C15953 - C15952) * C47384) *
                C15771 +
            ((C17146 - C17147 + C17148 - C17149) * C116 +
             (C17150 - C17151 + C17152 - C17153) * C47384) *
                C47479) *
               C47181 * C47493 +
           (((C17147 - C17146 + C17149 - C17148) * C116 +
             (C17151 - C17150 + C17153 - C17152) * C47384) *
                C15771 +
            ((C15769 * C1029 - C15773 * C1020 + C47448 * C1030 -
              C15774 * C1021) *
                 C116 +
             (C15769 * C1038 - C15773 * C1032 + C47448 * C1039 -
              C15774 * C1033) *
                 C47384) *
                C47479) *
               C47181 * C47471) *
              C47146)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C15769 * C124 - C15773 * C117 + C47448 * C125 - C15774 * C118) *
                 C116 +
             (C15769 * C138 - C15773 * C127 + C47448 * C139 - C15774 * C128) *
                 C47384) *
                C15771 +
            ((C15922 - C15923 + C15924 - C15925) * C116 +
             (C15926 - C15927 + C15928 - C15929) * C47384) *
                C47479) *
               C47181 * C2332 +
           (((C15923 - C15922 + C15925 - C15924) * C116 +
             (C15927 - C15926 + C15929 - C15928) * C47384) *
                C15771 +
            ((C15930 - C15931 + C15932 - C15933) * C116 +
             (C15934 - C15935 + C15936 - C15937) * C47384) *
                C47479) *
               C47181 * C47226) *
              C47506 +
          ((((C15773 * C118 - C15769 * C125 + C15774 * C119 - C47448 * C126) *
                 C116 +
             (C15773 * C128 - C15769 * C139 + C15774 * C129 - C47448 * C140) *
                 C47384) *
                C15771 +
            ((C15938 - C15939 + C15940 - C15941) * C116 +
             (C15942 - C15943 + C15944 - C15945) * C47384) *
                C47479) *
               C47181 * C2332 +
           (((C15939 - C15938 + C15941 - C15940) * C116 +
             (C15943 - C15942 + C15945 - C15944) * C47384) *
                C15771 +
            ((C15946 - C15947 + C15948 - C15949) * C116 +
             (C15950 - C15951 + C15952 - C15953) * C47384) *
                C47479) *
               C47181 * C47226) *
              C47499 +
          ((((C15769 * C126 - C15773 * C119 + C47448 * C130 - C15774 * C120) *
                 C116 +
             (C15769 * C140 - C15773 * C129 + C47448 * C141 - C15774 * C131) *
                 C47384) *
                C15771 +
            ((C15954 - C15955 + C15956 - C15957) * C116 +
             (C15958 - C15959 + C15960 - C15961) * C47384) *
                C47479) *
               C47181 * C2332 +
           (((C15955 - C15954 + C15957 - C15956) * C116 +
             (C15959 - C15958 + C15961 - C15960) * C47384) *
                C15771 +
            ((C15962 - C15963 + C15964 - C15965) * C116 +
             (C15966 - C15967 + C15968 - C15969) * C47384) *
                C47479) *
               C47181 * C47226) *
              C47486 +
          ((((C15773 * C120 - C15769 * C130 + C15774 * C121 - C47448 * C132) *
                 C116 +
             (C15773 * C131 - C15769 * C141 + C15774 * C133 - C47448 * C142) *
                 C47384) *
                C15771 +
            ((C16246 - C16247 + C16248 - C16249) * C116 +
             (C16250 - C16251 + C16252 - C16253) * C47384) *
                C47479) *
               C47181 * C2332 +
           (((C16247 - C16246 + C16249 - C16248) * C116 +
             (C16251 - C16250 + C16253 - C16252) * C47384) *
                C15771 +
            ((C15769 * C285 - C15773 * C268 + C47448 * C289 - C15774 * C270) *
                 C116 +
             (C15769 * C298 - C15773 * C286 + C47448 * C300 - C15774 * C290) *
                 C47384) *
                C47479) *
               C47181 * C47226) *
              C47465)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C15769 * C124 - C15773 * C117 + C47448 * C125 - C15774 * C118) *
                  C116 +
              (C15769 * C138 - C15773 * C127 + C47448 * C139 - C15774 * C128) *
                  C47384) *
                 C15771 +
             ((C15922 - C15923 + C15924 - C15925) * C116 +
              (C15926 - C15927 + C15928 - C15929) * C47384) *
                 C47479) *
                C47501 +
            (((C15773 * C414 - C15769 * C424 + C15774 * C415 - C47448 * C425) *
                  C116 +
              (C15773 * C427 - C15769 * C444 + C15774 * C428 - C47448 * C445) *
                  C47384) *
                 C15771 +
             ((C16578 - C16579 + C16580 - C16581) * C116 +
              (C16582 - C16583 + C16584 - C16585) * C47384) *
                 C47479) *
                C47490 +
            (((C15769 * C430 - C15773 * C417 + C47448 * C431 - C15774 * C418) *
                  C116 +
              (C15769 * C447 - C15773 * C433 + C47448 * C448 - C15774 * C434) *
                  C47384) *
                 C15771 +
             ((C16992 - C16993 + C16994 - C16995) * C116 +
              (C16996 - C16997 + C16998 - C16999) * C47384) *
                 C47479) *
                C47464) *
               C2332 +
           ((((C15923 - C15922 + C15925 - C15924) * C116 +
              (C15927 - C15926 + C15929 - C15928) * C47384) *
                 C15771 +
             ((C15930 - C15931 + C15932 - C15933) * C116 +
              (C15934 - C15935 + C15936 - C15937) * C47384) *
                 C47479) *
                C47501 +
            (((C16579 - C16578 + C16581 - C16580) * C116 +
              (C16583 - C16582 + C16585 - C16584) * C47384) *
                 C15771 +
             ((C17000 - C17001 + C17002 - C17003) * C116 +
              (C17004 - C17005 + C17006 - C17007) * C47384) *
                 C47479) *
                C47490 +
            (((C16993 - C16992 + C16995 - C16994) * C116 +
              (C16997 - C16996 + C16999 - C16998) * C47384) *
                 C15771 +
             ((C17008 - C17009 + C17010 - C17011) * C116 +
              (C17012 - C17013 + C17014 - C17015) * C47384) *
                 C47479) *
                C47464) *
               C47226) *
              C2440 +
          (((((C15773 * C118 - C15769 * C125 + C15774 * C119 - C47448 * C126) *
                  C116 +
              (C15773 * C128 - C15769 * C139 + C15774 * C129 - C47448 * C140) *
                  C47384) *
                 C15771 +
             ((C15938 - C15939 + C15940 - C15941) * C116 +
              (C15942 - C15943 + C15944 - C15945) * C47384) *
                 C47479) *
                C47501 +
            (((C15769 * C425 - C15773 * C415 + C47448 * C426 - C15774 * C416) *
                  C116 +
              (C15769 * C445 - C15773 * C428 + C47448 * C446 - C15774 * C429) *
                  C47384) *
                 C15771 +
             ((C16586 - C16587 + C16588 - C16589) * C116 +
              (C16590 - C16591 + C16592 - C16593) * C47384) *
                 C47479) *
                C47490 +
            (((C15773 * C418 - C15769 * C431 + C15774 * C419 - C47448 * C432) *
                  C116 +
              (C15773 * C434 - C15769 * C448 + C15774 * C435 - C47448 * C449) *
                  C47384) *
                 C15771 +
             ((C18062 - C18063 + C18064 - C18065) * C116 +
              (C18066 - C18067 + C18068 - C18069) * C47384) *
                 C47479) *
                C47464) *
               C2332 +
           ((((C15939 - C15938 + C15941 - C15940) * C116 +
              (C15943 - C15942 + C15945 - C15944) * C47384) *
                 C15771 +
             ((C15946 - C15947 + C15948 - C15949) * C116 +
              (C15950 - C15951 + C15952 - C15953) * C47384) *
                 C47479) *
                C47501 +
            (((C16587 - C16586 + C16589 - C16588) * C116 +
              (C16591 - C16590 + C16593 - C16592) * C47384) *
                 C15771 +
             ((C17348 - C17349 + C17350 - C17351) * C116 +
              (C17352 - C17353 + C17354 - C17355) * C47384) *
                 C47479) *
                C47490 +
            (((C18063 - C18062 + C18065 - C18064) * C116 +
              (C18067 - C18066 + C18069 - C18068) * C47384) *
                 C15771 +
             ((C15769 * C1172 - C15773 * C1157 + C47448 * C1173 -
               C15774 * C1158) *
                  C116 +
              (C15769 * C1184 - C15773 * C1175 + C47448 * C1185 -
               C15774 * C1176) *
                  C47384) *
                 C47479) *
                C47464) *
               C47226) *
              C47146)) /
            (p * q * std::sqrt(p + q));
    d2ee[78] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C15769 * C124 - C15773 * C117 + C47448 * C125 - C15774 * C118) *
                  C116 +
              (C15769 * C138 - C15773 * C127 + C47448 * C139 - C15774 * C128) *
                  C47384) *
                 C15771 +
             ((C15922 - C15923 + C15924 - C15925) * C116 +
              (C15926 - C15927 + C15928 - C15929) * C47384) *
                 C47479) *
                C47430 +
            (((C15773 * C414 - C15769 * C424 + C15774 * C415 - C47448 * C425) *
                  C116 +
              (C15773 * C427 - C15769 * C444 + C15774 * C428 - C47448 * C445) *
                  C47384) *
                 C15771 +
             ((C16578 - C16579 + C16580 - C16581) * C116 +
              (C16582 - C16583 + C16584 - C16585) * C47384) *
                 C47479) *
                C47268) *
               C2332 +
           ((((C15923 - C15922 + C15925 - C15924) * C116 +
              (C15927 - C15926 + C15929 - C15928) * C47384) *
                 C15771 +
             ((C15930 - C15931 + C15932 - C15933) * C116 +
              (C15934 - C15935 + C15936 - C15937) * C47384) *
                 C47479) *
                C47430 +
            (((C16579 - C16578 + C16581 - C16580) * C116 +
              (C16583 - C16582 + C16585 - C16584) * C47384) *
                 C15771 +
             ((C17000 - C17001 + C17002 - C17003) * C116 +
              (C17004 - C17005 + C17006 - C17007) * C47384) *
                 C47479) *
                C47268) *
               C47226) *
              C47140 +
          (((((C15773 * C118 - C15769 * C125 + C15774 * C119 - C47448 * C126) *
                  C116 +
              (C15773 * C128 - C15769 * C139 + C15774 * C129 - C47448 * C140) *
                  C47384) *
                 C15771 +
             ((C15938 - C15939 + C15940 - C15941) * C116 +
              (C15942 - C15943 + C15944 - C15945) * C47384) *
                 C47479) *
                C47430 +
            (((C15769 * C425 - C15773 * C415 + C47448 * C426 - C15774 * C416) *
                  C116 +
              (C15769 * C445 - C15773 * C428 + C47448 * C446 - C15774 * C429) *
                  C47384) *
                 C15771 +
             ((C16586 - C16587 + C16588 - C16589) * C116 +
              (C16590 - C16591 + C16592 - C16593) * C47384) *
                 C47479) *
                C47268) *
               C2332 +
           ((((C15939 - C15938 + C15941 - C15940) * C116 +
              (C15943 - C15942 + C15945 - C15944) * C47384) *
                 C15771 +
             ((C15946 - C15947 + C15948 - C15949) * C116 +
              (C15950 - C15951 + C15952 - C15953) * C47384) *
                 C47479) *
                C47430 +
            (((C16587 - C16586 + C16589 - C16588) * C116 +
              (C16591 - C16590 + C16593 - C16592) * C47384) *
                 C15771 +
             ((C17348 - C17349 + C17350 - C17351) * C116 +
              (C17352 - C17353 + C17354 - C17355) * C47384) *
                 C47479) *
                C47268) *
               C47226) *
              C47149 +
          (((((C15769 * C126 - C15773 * C119 + C47448 * C130 - C15774 * C120) *
                  C116 +
              (C15769 * C140 - C15773 * C129 + C47448 * C141 - C15774 * C131) *
                  C47384) *
                 C15771 +
             ((C15954 - C15955 + C15956 - C15957) * C116 +
              (C15958 - C15959 + C15960 - C15961) * C47384) *
                 C47479) *
                C47430 +
            (((C15773 * C416 - C15769 * C426 + C15774 * C420 - C47448 * C436) *
                  C116 +
              (C15773 * C429 - C15769 * C446 + C15774 * C437 - C47448 * C450) *
                  C47384) *
                 C15771 +
             ((C16594 - C16595 + C16596 - C16597) * C116 +
              (C16598 - C16599 + C16600 - C16601) * C47384) *
                 C47479) *
                C47268) *
               C2332 +
           ((((C15955 - C15954 + C15957 - C15956) * C116 +
              (C15959 - C15958 + C15961 - C15960) * C47384) *
                 C15771 +
             ((C15962 - C15963 + C15964 - C15965) * C116 +
              (C15966 - C15967 + C15968 - C15969) * C47384) *
                 C47479) *
                C47430 +
            (((C16595 - C16594 + C16597 - C16596) * C116 +
              (C16599 - C16598 + C16601 - C16600) * C47384) *
                 C15771 +
             ((C15769 * C1167 - C15773 * C1155 + C47448 * C1441 -
               C15774 * C1440) *
                  C116 +
              (C15769 * C1182 - C15773 * C1170 + C47448 * C1443 -
               C15774 * C1442) *
                  C47384) *
                 C47479) *
                C47268) *
               C47226) *
              C2703)) /
        (p * q * std::sqrt(p + q));
    d2ee[79] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C15769 * C124 - C15773 * C117 + C47448 * C125 - C15774 * C118) *
                 C116 +
             (C15769 * C138 - C15773 * C127 + C47448 * C139 - C15774 * C128) *
                 C47384) *
                C15771 +
            ((C15922 - C15923 + C15924 - C15925) * C116 +
             (C15926 - C15927 + C15928 - C15929) * C47384) *
                C47479) *
               C47181 * C2332 +
           (((C15923 - C15922 + C15925 - C15924) * C116 +
             (C15927 - C15926 + C15929 - C15928) * C47384) *
                C15771 +
            ((C15930 - C15931 + C15932 - C15933) * C116 +
             (C15934 - C15935 + C15936 - C15937) * C47384) *
                C47479) *
               C47181 * C47226) *
              C47506 +
          ((((C15773 * C118 - C15769 * C125 + C15774 * C119 - C47448 * C126) *
                 C116 +
             (C15773 * C128 - C15769 * C139 + C15774 * C129 - C47448 * C140) *
                 C47384) *
                C15771 +
            ((C15938 - C15939 + C15940 - C15941) * C116 +
             (C15942 - C15943 + C15944 - C15945) * C47384) *
                C47479) *
               C47181 * C2332 +
           (((C15939 - C15938 + C15941 - C15940) * C116 +
             (C15943 - C15942 + C15945 - C15944) * C47384) *
                C15771 +
            ((C15946 - C15947 + C15948 - C15949) * C116 +
             (C15950 - C15951 + C15952 - C15953) * C47384) *
                C47479) *
               C47181 * C47226) *
              C47499 +
          ((((C15769 * C126 - C15773 * C119 + C47448 * C130 - C15774 * C120) *
                 C116 +
             (C15769 * C140 - C15773 * C129 + C47448 * C141 - C15774 * C131) *
                 C47384) *
                C15771 +
            ((C15954 - C15955 + C15956 - C15957) * C116 +
             (C15958 - C15959 + C15960 - C15961) * C47384) *
                C47479) *
               C47181 * C2332 +
           (((C15955 - C15954 + C15957 - C15956) * C116 +
             (C15959 - C15958 + C15961 - C15960) * C47384) *
                C15771 +
            ((C15962 - C15963 + C15964 - C15965) * C116 +
             (C15966 - C15967 + C15968 - C15969) * C47384) *
                C47479) *
               C47181 * C47226) *
              C47486 +
          ((((C15773 * C120 - C15769 * C130 + C15774 * C121 - C47448 * C132) *
                 C116 +
             (C15773 * C131 - C15769 * C141 + C15774 * C133 - C47448 * C142) *
                 C47384) *
                C15771 +
            ((C16246 - C16247 + C16248 - C16249) * C116 +
             (C16250 - C16251 + C16252 - C16253) * C47384) *
                C47479) *
               C47181 * C2332 +
           (((C16247 - C16246 + C16249 - C16248) * C116 +
             (C16251 - C16250 + C16253 - C16252) * C47384) *
                C15771 +
            ((C15769 * C285 - C15773 * C268 + C47448 * C289 - C15774 * C270) *
                 C116 +
             (C15769 * C298 - C15773 * C286 + C47448 * C300 - C15774 * C290) *
                 C47384) *
                C47479) *
               C47181 * C47226) *
              C47465)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C15769 * C124 - C15773 * C117 + C47448 * C125 - C15774 * C118) *
                 C116 +
             (C15769 * C138 - C15773 * C127 + C47448 * C139 - C15774 * C128) *
                 C47384) *
                C15771 +
            ((C15922 - C15923 + C15924 - C15925) * C116 +
             (C15926 - C15927 + C15928 - C15929) * C47384) *
                C47479) *
               C47181 * C47507 +
           (((C15923 - C15922 + C15925 - C15924) * C116 +
             (C15927 - C15926 + C15929 - C15928) * C47384) *
                C15771 +
            ((C15930 - C15931 + C15932 - C15933) * C116 +
             (C15934 - C15935 + C15936 - C15937) * C47384) *
                C47479) *
               C47181 * C47503 +
           (((C15931 - C15930 + C15933 - C15932) * C116 +
             (C15935 - C15934 + C15937 - C15936) * C47384) *
                C15771 +
            ((C16830 - C16831 + C16832 - C16833) * C116 +
             (C16834 - C16835 + C16836 - C16837) * C47384) *
                C47479) *
               C47181 * C47493 +
           (((C16831 - C16830 + C16833 - C16832) * C116 +
             (C16835 - C16834 + C16837 - C16836) * C47384) *
                C15771 +
            ((C16838 - C16839 + C16840 - C16841) * C116 +
             (C16842 - C16843 + C16844 - C16845) * C47384) *
                C47479) *
               C47181 * C47471) *
              C2440 +
          ((((C15773 * C118 - C15769 * C125 + C15774 * C119 - C47448 * C126) *
                 C116 +
             (C15773 * C128 - C15769 * C139 + C15774 * C129 - C47448 * C140) *
                 C47384) *
                C15771 +
            ((C15938 - C15939 + C15940 - C15941) * C116 +
             (C15942 - C15943 + C15944 - C15945) * C47384) *
                C47479) *
               C47181 * C47507 +
           (((C15939 - C15938 + C15941 - C15940) * C116 +
             (C15943 - C15942 + C15945 - C15944) * C47384) *
                C15771 +
            ((C15946 - C15947 + C15948 - C15949) * C116 +
             (C15950 - C15951 + C15952 - C15953) * C47384) *
                C47479) *
               C47181 * C47503 +
           (((C15947 - C15946 + C15949 - C15948) * C116 +
             (C15951 - C15950 + C15953 - C15952) * C47384) *
                C15771 +
            ((C17146 - C17147 + C17148 - C17149) * C116 +
             (C17150 - C17151 + C17152 - C17153) * C47384) *
                C47479) *
               C47181 * C47493 +
           (((C17147 - C17146 + C17149 - C17148) * C116 +
             (C17151 - C17150 + C17153 - C17152) * C47384) *
                C15771 +
            ((C15769 * C1029 - C15773 * C1020 + C47448 * C1030 -
              C15774 * C1021) *
                 C116 +
             (C15769 * C1038 - C15773 * C1032 + C47448 * C1039 -
              C15774 * C1033) *
                 C47384) *
                C47479) *
               C47181 * C47471) *
              C47146)) /
            (p * q * std::sqrt(p + q));
    d2ee[80] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C15769 * C124 - C15773 * C117 + C47448 * C125 - C15774 * C118) *
                  C116 +
              (C15769 * C138 - C15773 * C127 + C47448 * C139 - C15774 * C128) *
                  C47384) *
                 C15771 +
             ((C15922 - C15923 + C15924 - C15925) * C116 +
              (C15926 - C15927 + C15928 - C15929) * C47384) *
                 C47479) *
                C3094 +
            (((C15773 * C414 - C15769 * C424 + C15774 * C415 - C47448 * C425) *
                  C116 +
              (C15773 * C427 - C15769 * C444 + C15774 * C428 - C47448 * C445) *
                  C47384) *
                 C15771 +
             ((C16578 - C16579 + C16580 - C16581) * C116 +
              (C16582 - C16583 + C16584 - C16585) * C47384) *
                 C47479) *
                C47268) *
               C47222 +
           ((((C15923 - C15922 + C15925 - C15924) * C116 +
              (C15927 - C15926 + C15929 - C15928) * C47384) *
                 C15771 +
             ((C15930 - C15931 + C15932 - C15933) * C116 +
              (C15934 - C15935 + C15936 - C15937) * C47384) *
                 C47479) *
                C3094 +
            (((C16579 - C16578 + C16581 - C16580) * C116 +
              (C16583 - C16582 + C16585 - C16584) * C47384) *
                 C15771 +
             ((C17000 - C17001 + C17002 - C17003) * C116 +
              (C17004 - C17005 + C17006 - C17007) * C47384) *
                 C47479) *
                C47268) *
               C47229 +
           ((((C15931 - C15930 + C15933 - C15932) * C116 +
              (C15935 - C15934 + C15937 - C15936) * C47384) *
                 C15771 +
             ((C16830 - C16831 + C16832 - C16833) * C116 +
              (C16834 - C16835 + C16836 - C16837) * C47384) *
                 C47479) *
                C3094 +
            (((C17001 - C17000 + C17003 - C17002) * C116 +
              (C17005 - C17004 + C17007 - C17006) * C47384) *
                 C15771 +
             ((C17486 - C17487 + C17488 - C17489) * C116 +
              (C17490 - C17491 + C17492 - C17493) * C47384) *
                 C47479) *
                C47268) *
               C2700) *
              C47415 +
          (((((C15773 * C118 - C15769 * C125 + C15774 * C119 - C47448 * C126) *
                  C116 +
              (C15773 * C128 - C15769 * C139 + C15774 * C129 - C47448 * C140) *
                  C47384) *
                 C15771 +
             ((C15938 - C15939 + C15940 - C15941) * C116 +
              (C15942 - C15943 + C15944 - C15945) * C47384) *
                 C47479) *
                C3094 +
            (((C15769 * C425 - C15773 * C415 + C47448 * C426 - C15774 * C416) *
                  C116 +
              (C15769 * C445 - C15773 * C428 + C47448 * C446 - C15774 * C429) *
                  C47384) *
                 C15771 +
             ((C16586 - C16587 + C16588 - C16589) * C116 +
              (C16590 - C16591 + C16592 - C16593) * C47384) *
                 C47479) *
                C47268) *
               C47222 +
           ((((C15939 - C15938 + C15941 - C15940) * C116 +
              (C15943 - C15942 + C15945 - C15944) * C47384) *
                 C15771 +
             ((C15946 - C15947 + C15948 - C15949) * C116 +
              (C15950 - C15951 + C15952 - C15953) * C47384) *
                 C47479) *
                C3094 +
            (((C16587 - C16586 + C16589 - C16588) * C116 +
              (C16591 - C16590 + C16593 - C16592) * C47384) *
                 C15771 +
             ((C17348 - C17349 + C17350 - C17351) * C116 +
              (C17352 - C17353 + C17354 - C17355) * C47384) *
                 C47479) *
                C47268) *
               C47229 +
           ((((C15947 - C15946 + C15949 - C15948) * C116 +
              (C15951 - C15950 + C15953 - C15952) * C47384) *
                 C15771 +
             ((C17146 - C17147 + C17148 - C17149) * C116 +
              (C17150 - C17151 + C17152 - C17153) * C47384) *
                 C47479) *
                C3094 +
            (((C17349 - C17348 + C17351 - C17350) * C116 +
              (C17353 - C17352 + C17355 - C17354) * C47384) *
                 C15771 +
             ((C15769 * C1546 - C15773 * C1543 + C47448 * C1547 -
               C15774 * C1544) *
                  C116 +
              (C15769 * C1552 - C15773 * C1549 + C47448 * C1553 -
               C15774 * C1550) *
                  C47384) *
                 C47479) *
                C47268) *
               C2700) *
              C47146)) /
        (p * q * std::sqrt(p + q));
    d2ee[81] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C15769 * C124 - C15773 * C117 + C47448 * C125 - C15774 * C118) *
                 C116 +
             (C15769 * C138 - C15773 * C127 + C47448 * C139 - C15774 * C128) *
                 C47384) *
                C15771 +
            ((C15922 - C15923 + C15924 - C15925) * C116 +
             (C15926 - C15927 + C15928 - C15929) * C47384) *
                C47479) *
               C47264 +
           (((C15773 * C414 - C15769 * C424 + C15774 * C415 - C47448 * C425) *
                 C116 +
             (C15773 * C427 - C15769 * C444 + C15774 * C428 - C47448 * C445) *
                 C47384) *
                C15771 +
            ((C16578 - C16579 + C16580 - C16581) * C116 +
             (C16582 - C16583 + C16584 - C16585) * C47384) *
                C47479) *
               C47271 +
           (((C15769 * C430 - C15773 * C417 + C47448 * C431 - C15774 * C418) *
                 C116 +
             (C15769 * C447 - C15773 * C433 + C47448 * C448 - C15774 * C434) *
                 C47384) *
                C15771 +
            ((C16992 - C16993 + C16994 - C16995) * C116 +
             (C16996 - C16997 + C16998 - C16999) * C47384) *
                C47479) *
               C3602) *
              C47222 +
          ((((C15923 - C15922 + C15925 - C15924) * C116 +
             (C15927 - C15926 + C15929 - C15928) * C47384) *
                C15771 +
            ((C15930 - C15931 + C15932 - C15933) * C116 +
             (C15934 - C15935 + C15936 - C15937) * C47384) *
                C47479) *
               C47264 +
           (((C16579 - C16578 + C16581 - C16580) * C116 +
             (C16583 - C16582 + C16585 - C16584) * C47384) *
                C15771 +
            ((C17000 - C17001 + C17002 - C17003) * C116 +
             (C17004 - C17005 + C17006 - C17007) * C47384) *
                C47479) *
               C47271 +
           (((C16993 - C16992 + C16995 - C16994) * C116 +
             (C16997 - C16996 + C16999 - C16998) * C47384) *
                C15771 +
            ((C17008 - C17009 + C17010 - C17011) * C116 +
             (C17012 - C17013 + C17014 - C17015) * C47384) *
                C47479) *
               C3602) *
              C47229 +
          ((((C15931 - C15930 + C15933 - C15932) * C116 +
             (C15935 - C15934 + C15937 - C15936) * C47384) *
                C15771 +
            ((C16830 - C16831 + C16832 - C16833) * C116 +
             (C16834 - C16835 + C16836 - C16837) * C47384) *
                C47479) *
               C47264 +
           (((C17001 - C17000 + C17003 - C17002) * C116 +
             (C17005 - C17004 + C17007 - C17006) * C47384) *
                C15771 +
            ((C17486 - C17487 + C17488 - C17489) * C116 +
             (C17490 - C17491 + C17492 - C17493) * C47384) *
                C47479) *
               C47271 +
           (((C17009 - C17008 + C17011 - C17010) * C116 +
             (C17013 - C17012 + C17015 - C17014) * C47384) *
                C15771 +
            ((C15769 * C5807 - C15773 * C5805 + C47448 * C5808 -
              C15774 * C5806) *
                 C116 +
             (C15769 * C5811 - C15773 * C5809 + C47448 * C5812 -
              C15774 * C5810) *
                 C47384) *
                C47479) *
               C3602) *
              C2700) *
         C47135) /
        (p * q * std::sqrt(p + q));
    d2ee[82] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C15769 * C124 - C15773 * C117 + C47448 * C125 - C15774 * C118) *
                 C116 +
             (C15769 * C138 - C15773 * C127 + C47448 * C139 - C15774 * C128) *
                 C47384) *
                C15771 +
            ((C15922 - C15923 + C15924 - C15925) * C116 +
             (C15926 - C15927 + C15928 - C15929) * C47384) *
                C47479) *
               C3094 +
           (((C15773 * C414 - C15769 * C424 + C15774 * C415 - C47448 * C425) *
                 C116 +
             (C15773 * C427 - C15769 * C444 + C15774 * C428 - C47448 * C445) *
                 C47384) *
                C15771 +
            ((C16578 - C16579 + C16580 - C16581) * C116 +
             (C16582 - C16583 + C16584 - C16585) * C47384) *
                C47479) *
               C47268) *
              C47507 +
          ((((C15923 - C15922 + C15925 - C15924) * C116 +
             (C15927 - C15926 + C15929 - C15928) * C47384) *
                C15771 +
            ((C15930 - C15931 + C15932 - C15933) * C116 +
             (C15934 - C15935 + C15936 - C15937) * C47384) *
                C47479) *
               C3094 +
           (((C16579 - C16578 + C16581 - C16580) * C116 +
             (C16583 - C16582 + C16585 - C16584) * C47384) *
                C15771 +
            ((C17000 - C17001 + C17002 - C17003) * C116 +
             (C17004 - C17005 + C17006 - C17007) * C47384) *
                C47479) *
               C47268) *
              C47503 +
          ((((C15931 - C15930 + C15933 - C15932) * C116 +
             (C15935 - C15934 + C15937 - C15936) * C47384) *
                C15771 +
            ((C16830 - C16831 + C16832 - C16833) * C116 +
             (C16834 - C16835 + C16836 - C16837) * C47384) *
                C47479) *
               C3094 +
           (((C17001 - C17000 + C17003 - C17002) * C116 +
             (C17005 - C17004 + C17007 - C17006) * C47384) *
                C15771 +
            ((C17486 - C17487 + C17488 - C17489) * C116 +
             (C17490 - C17491 + C17492 - C17493) * C47384) *
                C47479) *
               C47268) *
              C47493 +
          ((((C16831 - C16830 + C16833 - C16832) * C116 +
             (C16835 - C16834 + C16837 - C16836) * C47384) *
                C15771 +
            ((C16838 - C16839 + C16840 - C16841) * C116 +
             (C16842 - C16843 + C16844 - C16845) * C47384) *
                C47479) *
               C3094 +
           (((C17487 - C17486 + C17489 - C17488) * C116 +
             (C17491 - C17490 + C17493 - C17492) * C47384) *
                C15771 +
            ((C15769 * C6309 - C15773 * C6307 + C47448 * C6310 -
              C15774 * C6308) *
                 C116 +
             (C15769 * C6313 - C15773 * C6311 + C47448 * C6314 -
              C15774 * C6312) *
                 C47384) *
                C47479) *
               C47268) *
              C47471) *
         C47135) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C15769 * C124 - C15773 * C117 + C47448 * C125 - C15774 * C118) *
                  C116 +
              (C15769 * C138 - C15773 * C127 + C47448 * C139 - C15774 * C128) *
                  C47384) *
                 C15771 +
             ((C15922 - C15923 + C15924 - C15925) * C116 +
              (C15926 - C15927 + C15928 - C15929) * C47384) *
                 C47479) *
                C3094 +
            (((C15773 * C414 - C15769 * C424 + C15774 * C415 - C47448 * C425) *
                  C116 +
              (C15773 * C427 - C15769 * C444 + C15774 * C428 - C47448 * C445) *
                  C47384) *
                 C15771 +
             ((C16578 - C16579 + C16580 - C16581) * C116 +
              (C16582 - C16583 + C16584 - C16585) * C47384) *
                 C47479) *
                C47268) *
               C2332 +
           ((((C15923 - C15922 + C15925 - C15924) * C116 +
              (C15927 - C15926 + C15929 - C15928) * C47384) *
                 C15771 +
             ((C15930 - C15931 + C15932 - C15933) * C116 +
              (C15934 - C15935 + C15936 - C15937) * C47384) *
                 C47479) *
                C3094 +
            (((C16579 - C16578 + C16581 - C16580) * C116 +
              (C16583 - C16582 + C16585 - C16584) * C47384) *
                 C15771 +
             ((C17000 - C17001 + C17002 - C17003) * C116 +
              (C17004 - C17005 + C17006 - C17007) * C47384) *
                 C47479) *
                C47268) *
               C47226) *
              C47497 +
          (((((C15773 * C118 - C15769 * C125 + C15774 * C119 - C47448 * C126) *
                  C116 +
              (C15773 * C128 - C15769 * C139 + C15774 * C129 - C47448 * C140) *
                  C47384) *
                 C15771 +
             ((C15938 - C15939 + C15940 - C15941) * C116 +
              (C15942 - C15943 + C15944 - C15945) * C47384) *
                 C47479) *
                C3094 +
            (((C15769 * C425 - C15773 * C415 + C47448 * C426 - C15774 * C416) *
                  C116 +
              (C15769 * C445 - C15773 * C428 + C47448 * C446 - C15774 * C429) *
                  C47384) *
                 C15771 +
             ((C16586 - C16587 + C16588 - C16589) * C116 +
              (C16590 - C16591 + C16592 - C16593) * C47384) *
                 C47479) *
                C47268) *
               C2332 +
           ((((C15939 - C15938 + C15941 - C15940) * C116 +
              (C15943 - C15942 + C15945 - C15944) * C47384) *
                 C15771 +
             ((C15946 - C15947 + C15948 - C15949) * C116 +
              (C15950 - C15951 + C15952 - C15953) * C47384) *
                 C47479) *
                C3094 +
            (((C16587 - C16586 + C16589 - C16588) * C116 +
              (C16591 - C16590 + C16593 - C16592) * C47384) *
                 C15771 +
             ((C17348 - C17349 + C17350 - C17351) * C116 +
              (C17352 - C17353 + C17354 - C17355) * C47384) *
                 C47479) *
                C47268) *
               C47226) *
              C47484 +
          (((((C15769 * C126 - C15773 * C119 + C47448 * C130 - C15774 * C120) *
                  C116 +
              (C15769 * C140 - C15773 * C129 + C47448 * C141 - C15774 * C131) *
                  C47384) *
                 C15771 +
             ((C15954 - C15955 + C15956 - C15957) * C116 +
              (C15958 - C15959 + C15960 - C15961) * C47384) *
                 C47479) *
                C3094 +
            (((C15773 * C416 - C15769 * C426 + C15774 * C420 - C47448 * C436) *
                  C116 +
              (C15773 * C429 - C15769 * C446 + C15774 * C437 - C47448 * C450) *
                  C47384) *
                 C15771 +
             ((C16594 - C16595 + C16596 - C16597) * C116 +
              (C16598 - C16599 + C16600 - C16601) * C47384) *
                 C47479) *
                C47268) *
               C2332 +
           ((((C15955 - C15954 + C15957 - C15956) * C116 +
              (C15959 - C15958 + C15961 - C15960) * C47384) *
                 C15771 +
             ((C15962 - C15963 + C15964 - C15965) * C116 +
              (C15966 - C15967 + C15968 - C15969) * C47384) *
                 C47479) *
                C3094 +
            (((C16595 - C16594 + C16597 - C16596) * C116 +
              (C16599 - C16598 + C16601 - C16600) * C47384) *
                 C15771 +
             ((C15769 * C1167 - C15773 * C1155 + C47448 * C1441 -
               C15774 * C1440) *
                  C116 +
              (C15769 * C1182 - C15773 * C1170 + C47448 * C1443 -
               C15774 * C1442) *
                  C47384) *
                 C47479) *
                C47268) *
               C47226) *
              C47455)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C15769 * C124 - C15773 * C117 + C47448 * C125 - C15774 * C118) *
                 C116 +
             (C15769 * C138 - C15773 * C127 + C47448 * C139 - C15774 * C128) *
                 C47384) *
                C15771 +
            ((C15922 - C15923 + C15924 - C15925) * C116 +
             (C15926 - C15927 + C15928 - C15929) * C47384) *
                C47479) *
               C47508 +
           (((C15773 * C414 - C15769 * C424 + C15774 * C415 - C47448 * C425) *
                 C116 +
             (C15773 * C427 - C15769 * C444 + C15774 * C428 - C47448 * C445) *
                 C47384) *
                C15771 +
            ((C16578 - C16579 + C16580 - C16581) * C116 +
             (C16582 - C16583 + C16584 - C16585) * C47384) *
                C47479) *
               C47505 +
           (((C15769 * C430 - C15773 * C417 + C47448 * C431 - C15774 * C418) *
                 C116 +
             (C15769 * C447 - C15773 * C433 + C47448 * C448 - C15774 * C434) *
                 C47384) *
                C15771 +
            ((C16992 - C16993 + C16994 - C16995) * C116 +
             (C16996 - C16997 + C16998 - C16999) * C47384) *
                C47479) *
               C47496 +
           (((C15773 * C1844 - C15769 * C1850 + C15774 * C1845 -
              C47448 * C1851) *
                 C116 +
             (C15773 * C1853 - C15769 * C1862 + C15774 * C1854 -
              C47448 * C1863) *
                 C47384) *
                C15771 +
            ((C18330 - C18331 + C18332 - C18333) * C116 +
             (C18334 - C18335 + C18336 - C18337) * C47384) *
                C47479) *
               C47477) *
              C2332 +
          ((((C15923 - C15922 + C15925 - C15924) * C116 +
             (C15927 - C15926 + C15929 - C15928) * C47384) *
                C15771 +
            ((C15930 - C15931 + C15932 - C15933) * C116 +
             (C15934 - C15935 + C15936 - C15937) * C47384) *
                C47479) *
               C47508 +
           (((C16579 - C16578 + C16581 - C16580) * C116 +
             (C16583 - C16582 + C16585 - C16584) * C47384) *
                C15771 +
            ((C17000 - C17001 + C17002 - C17003) * C116 +
             (C17004 - C17005 + C17006 - C17007) * C47384) *
                C47479) *
               C47505 +
           (((C16993 - C16992 + C16995 - C16994) * C116 +
             (C16997 - C16996 + C16999 - C16998) * C47384) *
                C15771 +
            ((C17008 - C17009 + C17010 - C17011) * C116 +
             (C17012 - C17013 + C17014 - C17015) * C47384) *
                C47479) *
               C47496 +
           (((C18331 - C18330 + C18333 - C18332) * C116 +
             (C18335 - C18334 + C18337 - C18336) * C47384) *
                C15771 +
            ((C15769 * C7169 - C15773 * C7167 + C47448 * C7170 -
              C15774 * C7168) *
                 C116 +
             (C15769 * C7173 - C15773 * C7171 + C47448 * C7174 -
              C15774 * C7172) *
                 C47384) *
                C47479) *
               C47477) *
              C47226) *
         C47135) /
            (p * q * std::sqrt(p + q));
    d2ee[83] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C15769 * C124 - C15773 * C117 + C47448 * C125 - C15774 * C118) *
                  C116 +
              (C15769 * C138 - C15773 * C127 + C47448 * C139 - C15774 * C128) *
                  C47384) *
                 C15771 +
             ((C15922 - C15923 + C15924 - C15925) * C116 +
              (C15926 - C15927 + C15928 - C15929) * C47384) *
                 C47479) *
                C47264 +
            (((C15773 * C414 - C15769 * C424 + C15774 * C415 - C47448 * C425) *
                  C116 +
              (C15773 * C427 - C15769 * C444 + C15774 * C428 - C47448 * C445) *
                  C47384) *
                 C15771 +
             ((C16578 - C16579 + C16580 - C16581) * C116 +
              (C16582 - C16583 + C16584 - C16585) * C47384) *
                 C47479) *
                C47271 +
            (((C15769 * C430 - C15773 * C417 + C47448 * C431 - C15774 * C418) *
                  C116 +
              (C15769 * C447 - C15773 * C433 + C47448 * C448 - C15774 * C434) *
                  C47384) *
                 C15771 +
             ((C16992 - C16993 + C16994 - C16995) * C116 +
              (C16996 - C16997 + C16998 - C16999) * C47384) *
                 C47479) *
                C3602) *
               C2332 +
           ((((C15923 - C15922 + C15925 - C15924) * C116 +
              (C15927 - C15926 + C15929 - C15928) * C47384) *
                 C15771 +
             ((C15930 - C15931 + C15932 - C15933) * C116 +
              (C15934 - C15935 + C15936 - C15937) * C47384) *
                 C47479) *
                C47264 +
            (((C16579 - C16578 + C16581 - C16580) * C116 +
              (C16583 - C16582 + C16585 - C16584) * C47384) *
                 C15771 +
             ((C17000 - C17001 + C17002 - C17003) * C116 +
              (C17004 - C17005 + C17006 - C17007) * C47384) *
                 C47479) *
                C47271 +
            (((C16993 - C16992 + C16995 - C16994) * C116 +
              (C16997 - C16996 + C16999 - C16998) * C47384) *
                 C15771 +
             ((C17008 - C17009 + C17010 - C17011) * C116 +
              (C17012 - C17013 + C17014 - C17015) * C47384) *
                 C47479) *
                C3602) *
               C47226) *
              C47415 +
          (((((C15773 * C118 - C15769 * C125 + C15774 * C119 - C47448 * C126) *
                  C116 +
              (C15773 * C128 - C15769 * C139 + C15774 * C129 - C47448 * C140) *
                  C47384) *
                 C15771 +
             ((C15938 - C15939 + C15940 - C15941) * C116 +
              (C15942 - C15943 + C15944 - C15945) * C47384) *
                 C47479) *
                C47264 +
            (((C15769 * C425 - C15773 * C415 + C47448 * C426 - C15774 * C416) *
                  C116 +
              (C15769 * C445 - C15773 * C428 + C47448 * C446 - C15774 * C429) *
                  C47384) *
                 C15771 +
             ((C16586 - C16587 + C16588 - C16589) * C116 +
              (C16590 - C16591 + C16592 - C16593) * C47384) *
                 C47479) *
                C47271 +
            (((C15773 * C418 - C15769 * C431 + C15774 * C419 - C47448 * C432) *
                  C116 +
              (C15773 * C434 - C15769 * C448 + C15774 * C435 - C47448 * C449) *
                  C47384) *
                 C15771 +
             ((C18062 - C18063 + C18064 - C18065) * C116 +
              (C18066 - C18067 + C18068 - C18069) * C47384) *
                 C47479) *
                C3602) *
               C2332 +
           ((((C15939 - C15938 + C15941 - C15940) * C116 +
              (C15943 - C15942 + C15945 - C15944) * C47384) *
                 C15771 +
             ((C15946 - C15947 + C15948 - C15949) * C116 +
              (C15950 - C15951 + C15952 - C15953) * C47384) *
                 C47479) *
                C47264 +
            (((C16587 - C16586 + C16589 - C16588) * C116 +
              (C16591 - C16590 + C16593 - C16592) * C47384) *
                 C15771 +
             ((C17348 - C17349 + C17350 - C17351) * C116 +
              (C17352 - C17353 + C17354 - C17355) * C47384) *
                 C47479) *
                C47271 +
            (((C18063 - C18062 + C18065 - C18064) * C116 +
              (C18067 - C18066 + C18069 - C18068) * C47384) *
                 C15771 +
             ((C15769 * C1172 - C15773 * C1157 + C47448 * C1173 -
               C15774 * C1158) *
                  C116 +
              (C15769 * C1184 - C15773 * C1175 + C47448 * C1185 -
               C15774 * C1176) *
                  C47384) *
                 C47479) *
                C3602) *
               C47226) *
              C47146)) /
        (p * q * std::sqrt(p + q));
    d2ee[84] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C15769 * C124 - C15773 * C117 + C47448 * C125 - C15774 * C118) *
                  C116 +
              (C15769 * C138 - C15773 * C127 + C47448 * C139 - C15774 * C128) *
                  C47384) *
                 C15771 +
             ((C15922 - C15923 + C15924 - C15925) * C116 +
              (C15926 - C15927 + C15928 - C15929) * C47384) *
                 C47479) *
                C3094 +
            (((C15773 * C414 - C15769 * C424 + C15774 * C415 - C47448 * C425) *
                  C116 +
              (C15773 * C427 - C15769 * C444 + C15774 * C428 - C47448 * C445) *
                  C47384) *
                 C15771 +
             ((C16578 - C16579 + C16580 - C16581) * C116 +
              (C16582 - C16583 + C16584 - C16585) * C47384) *
                 C47479) *
                C47268) *
               C2332 +
           ((((C15923 - C15922 + C15925 - C15924) * C116 +
              (C15927 - C15926 + C15929 - C15928) * C47384) *
                 C15771 +
             ((C15930 - C15931 + C15932 - C15933) * C116 +
              (C15934 - C15935 + C15936 - C15937) * C47384) *
                 C47479) *
                C3094 +
            (((C16579 - C16578 + C16581 - C16580) * C116 +
              (C16583 - C16582 + C16585 - C16584) * C47384) *
                 C15771 +
             ((C17000 - C17001 + C17002 - C17003) * C116 +
              (C17004 - C17005 + C17006 - C17007) * C47384) *
                 C47479) *
                C47268) *
               C47226) *
              C47497 +
          (((((C15773 * C118 - C15769 * C125 + C15774 * C119 - C47448 * C126) *
                  C116 +
              (C15773 * C128 - C15769 * C139 + C15774 * C129 - C47448 * C140) *
                  C47384) *
                 C15771 +
             ((C15938 - C15939 + C15940 - C15941) * C116 +
              (C15942 - C15943 + C15944 - C15945) * C47384) *
                 C47479) *
                C3094 +
            (((C15769 * C425 - C15773 * C415 + C47448 * C426 - C15774 * C416) *
                  C116 +
              (C15769 * C445 - C15773 * C428 + C47448 * C446 - C15774 * C429) *
                  C47384) *
                 C15771 +
             ((C16586 - C16587 + C16588 - C16589) * C116 +
              (C16590 - C16591 + C16592 - C16593) * C47384) *
                 C47479) *
                C47268) *
               C2332 +
           ((((C15939 - C15938 + C15941 - C15940) * C116 +
              (C15943 - C15942 + C15945 - C15944) * C47384) *
                 C15771 +
             ((C15946 - C15947 + C15948 - C15949) * C116 +
              (C15950 - C15951 + C15952 - C15953) * C47384) *
                 C47479) *
                C3094 +
            (((C16587 - C16586 + C16589 - C16588) * C116 +
              (C16591 - C16590 + C16593 - C16592) * C47384) *
                 C15771 +
             ((C17348 - C17349 + C17350 - C17351) * C116 +
              (C17352 - C17353 + C17354 - C17355) * C47384) *
                 C47479) *
                C47268) *
               C47226) *
              C47484 +
          (((((C15769 * C126 - C15773 * C119 + C47448 * C130 - C15774 * C120) *
                  C116 +
              (C15769 * C140 - C15773 * C129 + C47448 * C141 - C15774 * C131) *
                  C47384) *
                 C15771 +
             ((C15954 - C15955 + C15956 - C15957) * C116 +
              (C15958 - C15959 + C15960 - C15961) * C47384) *
                 C47479) *
                C3094 +
            (((C15773 * C416 - C15769 * C426 + C15774 * C420 - C47448 * C436) *
                  C116 +
              (C15773 * C429 - C15769 * C446 + C15774 * C437 - C47448 * C450) *
                  C47384) *
                 C15771 +
             ((C16594 - C16595 + C16596 - C16597) * C116 +
              (C16598 - C16599 + C16600 - C16601) * C47384) *
                 C47479) *
                C47268) *
               C2332 +
           ((((C15955 - C15954 + C15957 - C15956) * C116 +
              (C15959 - C15958 + C15961 - C15960) * C47384) *
                 C15771 +
             ((C15962 - C15963 + C15964 - C15965) * C116 +
              (C15966 - C15967 + C15968 - C15969) * C47384) *
                 C47479) *
                C3094 +
            (((C16595 - C16594 + C16597 - C16596) * C116 +
              (C16599 - C16598 + C16601 - C16600) * C47384) *
                 C15771 +
             ((C15769 * C1167 - C15773 * C1155 + C47448 * C1441 -
               C15774 * C1440) *
                  C116 +
              (C15769 * C1182 - C15773 * C1170 + C47448 * C1443 -
               C15774 * C1442) *
                  C47384) *
                 C47479) *
                C47268) *
               C47226) *
              C47455)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C15769 * C124 - C15773 * C117 + C47448 * C125 - C15774 * C118) *
                 C116 +
             (C15769 * C138 - C15773 * C127 + C47448 * C139 - C15774 * C128) *
                 C47384) *
                C15771 +
            ((C15922 - C15923 + C15924 - C15925) * C116 +
             (C15926 - C15927 + C15928 - C15929) * C47384) *
                C47479) *
               C3094 +
           (((C15773 * C414 - C15769 * C424 + C15774 * C415 - C47448 * C425) *
                 C116 +
             (C15773 * C427 - C15769 * C444 + C15774 * C428 - C47448 * C445) *
                 C47384) *
                C15771 +
            ((C16578 - C16579 + C16580 - C16581) * C116 +
             (C16582 - C16583 + C16584 - C16585) * C47384) *
                C47479) *
               C47268) *
              C47507 +
          ((((C15923 - C15922 + C15925 - C15924) * C116 +
             (C15927 - C15926 + C15929 - C15928) * C47384) *
                C15771 +
            ((C15930 - C15931 + C15932 - C15933) * C116 +
             (C15934 - C15935 + C15936 - C15937) * C47384) *
                C47479) *
               C3094 +
           (((C16579 - C16578 + C16581 - C16580) * C116 +
             (C16583 - C16582 + C16585 - C16584) * C47384) *
                C15771 +
            ((C17000 - C17001 + C17002 - C17003) * C116 +
             (C17004 - C17005 + C17006 - C17007) * C47384) *
                C47479) *
               C47268) *
              C47503 +
          ((((C15931 - C15930 + C15933 - C15932) * C116 +
             (C15935 - C15934 + C15937 - C15936) * C47384) *
                C15771 +
            ((C16830 - C16831 + C16832 - C16833) * C116 +
             (C16834 - C16835 + C16836 - C16837) * C47384) *
                C47479) *
               C3094 +
           (((C17001 - C17000 + C17003 - C17002) * C116 +
             (C17005 - C17004 + C17007 - C17006) * C47384) *
                C15771 +
            ((C17486 - C17487 + C17488 - C17489) * C116 +
             (C17490 - C17491 + C17492 - C17493) * C47384) *
                C47479) *
               C47268) *
              C47493 +
          ((((C16831 - C16830 + C16833 - C16832) * C116 +
             (C16835 - C16834 + C16837 - C16836) * C47384) *
                C15771 +
            ((C16838 - C16839 + C16840 - C16841) * C116 +
             (C16842 - C16843 + C16844 - C16845) * C47384) *
                C47479) *
               C3094 +
           (((C17487 - C17486 + C17489 - C17488) * C116 +
             (C17491 - C17490 + C17493 - C17492) * C47384) *
                C15771 +
            ((C15769 * C6309 - C15773 * C6307 + C47448 * C6310 -
              C15774 * C6308) *
                 C116 +
             (C15769 * C6313 - C15773 * C6311 + C47448 * C6314 -
              C15774 * C6312) *
                 C47384) *
                C47479) *
               C47268) *
              C47471) *
         C47135) /
            (p * q * std::sqrt(p + q));
    d2ee[85] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C15769 * C124 - C15773 * C117 + C47448 * C125 - C15774 * C118) *
                 C116 +
             (C15769 * C138 - C15773 * C127 + C47448 * C139 - C15774 * C128) *
                 C47384) *
                C15771 +
            ((C15922 - C15923 + C15924 - C15925) * C116 +
             (C15926 - C15927 + C15928 - C15929) * C47384) *
                C47479) *
               C47181 * C1284 +
           (((C15923 - C15922 + C15925 - C15924) * C116 +
             (C15927 - C15926 + C15929 - C15928) * C47384) *
                C15771 +
            ((C15930 - C15931 + C15932 - C15933) * C116 +
             (C15934 - C15935 + C15936 - C15937) * C47384) *
                C47479) *
               C47181 * C1285 +
           (((C15931 - C15930 + C15933 - C15932) * C116 +
             (C15935 - C15934 + C15937 - C15936) * C47384) *
                C15771 +
            ((C16830 - C16831 + C16832 - C16833) * C116 +
             (C16834 - C16835 + C16836 - C16837) * C47384) *
                C47479) *
               C47181 * C1286 +
           (((C16831 - C16830 + C16833 - C16832) * C116 +
             (C16835 - C16834 + C16837 - C16836) * C47384) *
                C15771 +
            ((C16838 - C16839 + C16840 - C16841) * C116 +
             (C16842 - C16843 + C16844 - C16845) * C47384) *
                C47479) *
               C47181 * C47471) *
              C47415 +
          ((((C15773 * C118 - C15769 * C125 + C15774 * C119 - C47448 * C126) *
                 C116 +
             (C15773 * C128 - C15769 * C139 + C15774 * C129 - C47448 * C140) *
                 C47384) *
                C15771 +
            ((C15938 - C15939 + C15940 - C15941) * C116 +
             (C15942 - C15943 + C15944 - C15945) * C47384) *
                C47479) *
               C47181 * C1284 +
           (((C15939 - C15938 + C15941 - C15940) * C116 +
             (C15943 - C15942 + C15945 - C15944) * C47384) *
                C15771 +
            ((C15946 - C15947 + C15948 - C15949) * C116 +
             (C15950 - C15951 + C15952 - C15953) * C47384) *
                C47479) *
               C47181 * C1285 +
           (((C15947 - C15946 + C15949 - C15948) * C116 +
             (C15951 - C15950 + C15953 - C15952) * C47384) *
                C15771 +
            ((C17146 - C17147 + C17148 - C17149) * C116 +
             (C17150 - C17151 + C17152 - C17153) * C47384) *
                C47479) *
               C47181 * C1286 +
           (((C17147 - C17146 + C17149 - C17148) * C116 +
             (C17151 - C17150 + C17153 - C17152) * C47384) *
                C15771 +
            ((C15769 * C1029 - C15773 * C1020 + C47448 * C1030 -
              C15774 * C1021) *
                 C116 +
             (C15769 * C1038 - C15773 * C1032 + C47448 * C1039 -
              C15774 * C1033) *
                 C47384) *
                C47479) *
               C47181 * C47471) *
              C47146)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C15769 * C124 - C15773 * C117 + C47448 * C125 - C15774 * C118) *
                 C116 +
             (C15769 * C138 - C15773 * C127 + C47448 * C139 - C15774 * C128) *
                 C47384) *
                C15771 +
            ((C15922 - C15923 + C15924 - C15925) * C116 +
             (C15926 - C15927 + C15928 - C15929) * C47384) *
                C47479) *
               C47181 * C47429 +
           (((C15923 - C15922 + C15925 - C15924) * C116 +
             (C15927 - C15926 + C15929 - C15928) * C47384) *
                C15771 +
            ((C15930 - C15931 + C15932 - C15933) * C116 +
             (C15934 - C15935 + C15936 - C15937) * C47384) *
                C47479) *
               C47181 * C47226) *
              C554 +
          ((((C15773 * C118 - C15769 * C125 + C15774 * C119 - C47448 * C126) *
                 C116 +
             (C15773 * C128 - C15769 * C139 + C15774 * C129 - C47448 * C140) *
                 C47384) *
                C15771 +
            ((C15938 - C15939 + C15940 - C15941) * C116 +
             (C15942 - C15943 + C15944 - C15945) * C47384) *
                C47479) *
               C47181 * C47429 +
           (((C15939 - C15938 + C15941 - C15940) * C116 +
             (C15943 - C15942 + C15945 - C15944) * C47384) *
                C15771 +
            ((C15946 - C15947 + C15948 - C15949) * C116 +
             (C15950 - C15951 + C15952 - C15953) * C47384) *
                C47479) *
               C47181 * C47226) *
              C555 +
          ((((C15769 * C126 - C15773 * C119 + C47448 * C130 - C15774 * C120) *
                 C116 +
             (C15769 * C140 - C15773 * C129 + C47448 * C141 - C15774 * C131) *
                 C47384) *
                C15771 +
            ((C15954 - C15955 + C15956 - C15957) * C116 +
             (C15958 - C15959 + C15960 - C15961) * C47384) *
                C47479) *
               C47181 * C47429 +
           (((C15955 - C15954 + C15957 - C15956) * C116 +
             (C15959 - C15958 + C15961 - C15960) * C47384) *
                C15771 +
            ((C15962 - C15963 + C15964 - C15965) * C116 +
             (C15966 - C15967 + C15968 - C15969) * C47384) *
                C47479) *
               C47181 * C47226) *
              C556 +
          ((((C15773 * C120 - C15769 * C130 + C15774 * C121 - C47448 * C132) *
                 C116 +
             (C15773 * C131 - C15769 * C141 + C15774 * C133 - C47448 * C142) *
                 C47384) *
                C15771 +
            ((C16246 - C16247 + C16248 - C16249) * C116 +
             (C16250 - C16251 + C16252 - C16253) * C47384) *
                C47479) *
               C47181 * C47429 +
           (((C16247 - C16246 + C16249 - C16248) * C116 +
             (C16251 - C16250 + C16253 - C16252) * C47384) *
                C15771 +
            ((C15769 * C285 - C15773 * C268 + C47448 * C289 - C15774 * C270) *
                 C116 +
             (C15769 * C298 - C15773 * C286 + C47448 * C300 - C15774 * C290) *
                 C47384) *
                C47479) *
               C47181 * C47226) *
              C47465)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C15769 * C124 - C15773 * C117 + C47448 * C125 - C15774 * C118) *
                  C116 +
              (C15769 * C138 - C15773 * C127 + C47448 * C139 - C15774 * C128) *
                  C47384) *
                 C15771 +
             ((C15922 - C15923 + C15924 - C15925) * C116 +
              (C15926 - C15927 + C15928 - C15929) * C47384) *
                 C47479) *
                C1664 +
            (((C15773 * C414 - C15769 * C424 + C15774 * C415 - C47448 * C425) *
                  C116 +
              (C15773 * C427 - C15769 * C444 + C15774 * C428 - C47448 * C445) *
                  C47384) *
                 C15771 +
             ((C16578 - C16579 + C16580 - C16581) * C116 +
              (C16582 - C16583 + C16584 - C16585) * C47384) *
                 C47479) *
                C1665 +
            (((C15769 * C430 - C15773 * C417 + C47448 * C431 - C15774 * C418) *
                  C116 +
              (C15769 * C447 - C15773 * C433 + C47448 * C448 - C15774 * C434) *
                  C47384) *
                 C15771 +
             ((C16992 - C16993 + C16994 - C16995) * C116 +
              (C16996 - C16997 + C16998 - C16999) * C47384) *
                 C47479) *
                C47464) *
               C47429 +
           ((((C15923 - C15922 + C15925 - C15924) * C116 +
              (C15927 - C15926 + C15929 - C15928) * C47384) *
                 C15771 +
             ((C15930 - C15931 + C15932 - C15933) * C116 +
              (C15934 - C15935 + C15936 - C15937) * C47384) *
                 C47479) *
                C1664 +
            (((C16579 - C16578 + C16581 - C16580) * C116 +
              (C16583 - C16582 + C16585 - C16584) * C47384) *
                 C15771 +
             ((C17000 - C17001 + C17002 - C17003) * C116 +
              (C17004 - C17005 + C17006 - C17007) * C47384) *
                 C47479) *
                C1665 +
            (((C16993 - C16992 + C16995 - C16994) * C116 +
              (C16997 - C16996 + C16999 - C16998) * C47384) *
                 C15771 +
             ((C17008 - C17009 + C17010 - C17011) * C116 +
              (C17012 - C17013 + C17014 - C17015) * C47384) *
                 C47479) *
                C47464) *
               C47226) *
              C47415 +
          (((((C15773 * C118 - C15769 * C125 + C15774 * C119 - C47448 * C126) *
                  C116 +
              (C15773 * C128 - C15769 * C139 + C15774 * C129 - C47448 * C140) *
                  C47384) *
                 C15771 +
             ((C15938 - C15939 + C15940 - C15941) * C116 +
              (C15942 - C15943 + C15944 - C15945) * C47384) *
                 C47479) *
                C1664 +
            (((C15769 * C425 - C15773 * C415 + C47448 * C426 - C15774 * C416) *
                  C116 +
              (C15769 * C445 - C15773 * C428 + C47448 * C446 - C15774 * C429) *
                  C47384) *
                 C15771 +
             ((C16586 - C16587 + C16588 - C16589) * C116 +
              (C16590 - C16591 + C16592 - C16593) * C47384) *
                 C47479) *
                C1665 +
            (((C15773 * C418 - C15769 * C431 + C15774 * C419 - C47448 * C432) *
                  C116 +
              (C15773 * C434 - C15769 * C448 + C15774 * C435 - C47448 * C449) *
                  C47384) *
                 C15771 +
             ((C18062 - C18063 + C18064 - C18065) * C116 +
              (C18066 - C18067 + C18068 - C18069) * C47384) *
                 C47479) *
                C47464) *
               C47429 +
           ((((C15939 - C15938 + C15941 - C15940) * C116 +
              (C15943 - C15942 + C15945 - C15944) * C47384) *
                 C15771 +
             ((C15946 - C15947 + C15948 - C15949) * C116 +
              (C15950 - C15951 + C15952 - C15953) * C47384) *
                 C47479) *
                C1664 +
            (((C16587 - C16586 + C16589 - C16588) * C116 +
              (C16591 - C16590 + C16593 - C16592) * C47384) *
                 C15771 +
             ((C17348 - C17349 + C17350 - C17351) * C116 +
              (C17352 - C17353 + C17354 - C17355) * C47384) *
                 C47479) *
                C1665 +
            (((C18063 - C18062 + C18065 - C18064) * C116 +
              (C18067 - C18066 + C18069 - C18068) * C47384) *
                 C15771 +
             ((C15769 * C1172 - C15773 * C1157 + C47448 * C1173 -
               C15774 * C1158) *
                  C116 +
              (C15769 * C1184 - C15773 * C1175 + C47448 * C1185 -
               C15774 * C1176) *
                  C47384) *
                 C47479) *
                C47464) *
               C47226) *
              C47146)) /
            (p * q * std::sqrt(p + q));
    d2ee[86] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C15769 * C124 - C15773 * C117 + C47448 * C125 - C15774 * C118) *
                 C116 +
             (C15769 * C138 - C15773 * C127 + C47448 * C139 - C15774 * C128) *
                 C47384) *
                C15771 +
            ((C15922 - C15923 + C15924 - C15925) * C116 +
             (C15926 - C15927 + C15928 - C15929) * C47384) *
                C47479) *
               C47430 +
           (((C15773 * C414 - C15769 * C424 + C15774 * C415 - C47448 * C425) *
                 C116 +
             (C15773 * C427 - C15769 * C444 + C15774 * C428 - C47448 * C445) *
                 C47384) *
                C15771 +
            ((C16578 - C16579 + C16580 - C16581) * C116 +
             (C16582 - C16583 + C16584 - C16585) * C47384) *
                C47479) *
               C47268) *
              C1284 +
          ((((C15923 - C15922 + C15925 - C15924) * C116 +
             (C15927 - C15926 + C15929 - C15928) * C47384) *
                C15771 +
            ((C15930 - C15931 + C15932 - C15933) * C116 +
             (C15934 - C15935 + C15936 - C15937) * C47384) *
                C47479) *
               C47430 +
           (((C16579 - C16578 + C16581 - C16580) * C116 +
             (C16583 - C16582 + C16585 - C16584) * C47384) *
                C15771 +
            ((C17000 - C17001 + C17002 - C17003) * C116 +
             (C17004 - C17005 + C17006 - C17007) * C47384) *
                C47479) *
               C47268) *
              C1285 +
          ((((C15931 - C15930 + C15933 - C15932) * C116 +
             (C15935 - C15934 + C15937 - C15936) * C47384) *
                C15771 +
            ((C16830 - C16831 + C16832 - C16833) * C116 +
             (C16834 - C16835 + C16836 - C16837) * C47384) *
                C47479) *
               C47430 +
           (((C17001 - C17000 + C17003 - C17002) * C116 +
             (C17005 - C17004 + C17007 - C17006) * C47384) *
                C15771 +
            ((C17486 - C17487 + C17488 - C17489) * C116 +
             (C17490 - C17491 + C17492 - C17493) * C47384) *
                C47479) *
               C47268) *
              C1286 +
          ((((C16831 - C16830 + C16833 - C16832) * C116 +
             (C16835 - C16834 + C16837 - C16836) * C47384) *
                C15771 +
            ((C16838 - C16839 + C16840 - C16841) * C116 +
             (C16842 - C16843 + C16844 - C16845) * C47384) *
                C47479) *
               C47430 +
           (((C17487 - C17486 + C17489 - C17488) * C116 +
             (C17491 - C17490 + C17493 - C17492) * C47384) *
                C15771 +
            ((C15769 * C6309 - C15773 * C6307 + C47448 * C6310 -
              C15774 * C6308) *
                 C116 +
             (C15769 * C6313 - C15773 * C6311 + C47448 * C6314 -
              C15774 * C6312) *
                 C47384) *
                C47479) *
               C47268) *
              C47471) *
         C47135) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C15769 * C124 - C15773 * C117 + C47448 * C125 - C15774 * C118) *
                  C116 +
              (C15769 * C138 - C15773 * C127 + C47448 * C139 - C15774 * C128) *
                  C47384) *
                 C15771 +
             ((C15922 - C15923 + C15924 - C15925) * C116 +
              (C15926 - C15927 + C15928 - C15929) * C47384) *
                 C47479) *
                C47430 +
            (((C15773 * C414 - C15769 * C424 + C15774 * C415 - C47448 * C425) *
                  C116 +
              (C15773 * C427 - C15769 * C444 + C15774 * C428 - C47448 * C445) *
                  C47384) *
                 C15771 +
             ((C16578 - C16579 + C16580 - C16581) * C116 +
              (C16582 - C16583 + C16584 - C16585) * C47384) *
                 C47479) *
                C47268) *
               C47429 +
           ((((C15923 - C15922 + C15925 - C15924) * C116 +
              (C15927 - C15926 + C15929 - C15928) * C47384) *
                 C15771 +
             ((C15930 - C15931 + C15932 - C15933) * C116 +
              (C15934 - C15935 + C15936 - C15937) * C47384) *
                 C47479) *
                C47430 +
            (((C16579 - C16578 + C16581 - C16580) * C116 +
              (C16583 - C16582 + C16585 - C16584) * C47384) *
                 C15771 +
             ((C15769 * C1165 - C15773 * C1153 + C47448 * C1166 -
               C15774 * C1154) *
                  C116 +
              (C15769 * C1180 - C15773 * C1168 + C47448 * C1181 -
               C15774 * C1169) *
                  C47384) *
                 C47479) *
                C47268) *
               C47226) *
              C258 +
          (((((C15773 * C118 - C15769 * C125 + C15774 * C119 - C47448 * C126) *
                  C116 +
              (C15773 * C128 - C15769 * C139 + C15774 * C129 - C47448 * C140) *
                  C47384) *
                 C15771 +
             ((C15938 - C15939 + C15940 - C15941) * C116 +
              (C15942 - C15943 + C15944 - C15945) * C47384) *
                 C47479) *
                C47430 +
            (((C15769 * C425 - C15773 * C415 + C47448 * C426 - C15774 * C416) *
                  C116 +
              (C15769 * C445 - C15773 * C428 + C47448 * C446 - C15774 * C429) *
                  C47384) *
                 C15771 +
             ((C16586 - C16587 + C16588 - C16589) * C116 +
              (C16590 - C16591 + C16592 - C16593) * C47384) *
                 C47479) *
                C47268) *
               C47429 +
           ((((C15939 - C15938 + C15941 - C15940) * C116 +
              (C15943 - C15942 + C15945 - C15944) * C47384) *
                 C15771 +
             ((C15946 - C15947 + C15948 - C15949) * C116 +
              (C15950 - C15951 + C15952 - C15953) * C47384) *
                 C47479) *
                C47430 +
            (((C16587 - C16586 + C16589 - C16588) * C116 +
              (C16591 - C16590 + C16593 - C16592) * C47384) *
                 C15771 +
             ((C15773 * C1154 - C15769 * C1166 + C15774 * C1155 -
               C47448 * C1167) *
                  C116 +
              (C15773 * C1169 - C15769 * C1181 + C15774 * C1170 -
               C47448 * C1182) *
                  C47384) *
                 C47479) *
                C47268) *
               C47226) *
              C259 +
          (((((C15769 * C126 - C15773 * C119 + C47448 * C130 - C15774 * C120) *
                  C116 +
              (C15769 * C140 - C15773 * C129 + C47448 * C141 - C15774 * C131) *
                  C47384) *
                 C15771 +
             ((C15954 - C15955 + C15956 - C15957) * C116 +
              (C15958 - C15959 + C15960 - C15961) * C47384) *
                 C47479) *
                C47430 +
            (((C15773 * C416 - C15769 * C426 + C15774 * C420 - C47448 * C436) *
                  C116 +
              (C15773 * C429 - C15769 * C446 + C15774 * C437 - C47448 * C450) *
                  C47384) *
                 C15771 +
             ((C16594 - C16595 + C16596 - C16597) * C116 +
              (C16598 - C16599 + C16600 - C16601) * C47384) *
                 C47479) *
                C47268) *
               C47429 +
           ((((C15955 - C15954 + C15957 - C15956) * C116 +
              (C15959 - C15958 + C15961 - C15960) * C47384) *
                 C15771 +
             ((C15962 - C15963 + C15964 - C15965) * C116 +
              (C15966 - C15967 + C15968 - C15969) * C47384) *
                 C47479) *
                C47430 +
            (((C16595 - C16594 + C16597 - C16596) * C116 +
              (C16599 - C16598 + C16601 - C16600) * C47384) *
                 C15771 +
             ((C15769 * C1167 - C15773 * C1155 + C47448 * C1441 -
               C15774 * C1440) *
                  C116 +
              (C15769 * C1182 - C15773 * C1170 + C47448 * C1443 -
               C15774 * C1442) *
                  C47384) *
                 C47479) *
                C47268) *
               C47226) *
              C47455)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C15769 * C124 - C15773 * C117 + C47448 * C125 - C15774 * C118) *
                 C116 +
             (C15769 * C138 - C15773 * C127 + C47448 * C139 - C15774 * C128) *
                 C47384) *
                C15771 +
            ((C15922 - C15923 + C15924 - C15925) * C116 +
             (C15926 - C15927 + C15928 - C15929) * C47384) *
                C47479) *
               C2116 +
           (((C15773 * C414 - C15769 * C424 + C15774 * C415 - C47448 * C425) *
                 C116 +
             (C15773 * C427 - C15769 * C444 + C15774 * C428 - C47448 * C445) *
                 C47384) *
                C15771 +
            ((C16578 - C16579 + C16580 - C16581) * C116 +
             (C16582 - C16583 + C16584 - C16585) * C47384) *
                C47479) *
               C2117 +
           (((C15769 * C430 - C15773 * C417 + C47448 * C431 - C15774 * C418) *
                 C116 +
             (C15769 * C447 - C15773 * C433 + C47448 * C448 - C15774 * C434) *
                 C47384) *
                C15771 +
            ((C16992 - C16993 + C16994 - C16995) * C116 +
             (C16996 - C16997 + C16998 - C16999) * C47384) *
                C47479) *
               C2118 +
           (((C15773 * C1844 - C15769 * C1850 + C15774 * C1845 -
              C47448 * C1851) *
                 C116 +
             (C15773 * C1853 - C15769 * C1862 + C15774 * C1854 -
              C47448 * C1863) *
                 C47384) *
                C15771 +
            ((C18330 - C18331 + C18332 - C18333) * C116 +
             (C18334 - C18335 + C18336 - C18337) * C47384) *
                C47479) *
               C47477) *
              C47429 +
          ((((C15923 - C15922 + C15925 - C15924) * C116 +
             (C15927 - C15926 + C15929 - C15928) * C47384) *
                C15771 +
            ((C15930 - C15931 + C15932 - C15933) * C116 +
             (C15934 - C15935 + C15936 - C15937) * C47384) *
                C47479) *
               C2116 +
           (((C16579 - C16578 + C16581 - C16580) * C116 +
             (C16583 - C16582 + C16585 - C16584) * C47384) *
                C15771 +
            ((C17000 - C17001 + C17002 - C17003) * C116 +
             (C17004 - C17005 + C17006 - C17007) * C47384) *
                C47479) *
               C2117 +
           (((C16993 - C16992 + C16995 - C16994) * C116 +
             (C16997 - C16996 + C16999 - C16998) * C47384) *
                C15771 +
            ((C17008 - C17009 + C17010 - C17011) * C116 +
             (C17012 - C17013 + C17014 - C17015) * C47384) *
                C47479) *
               C2118 +
           (((C18331 - C18330 + C18333 - C18332) * C116 +
             (C18335 - C18334 + C18337 - C18336) * C47384) *
                C15771 +
            ((C15769 * C7169 - C15773 * C7167 + C47448 * C7170 -
              C15774 * C7168) *
                 C116 +
             (C15769 * C7173 - C15773 * C7171 + C47448 * C7174 -
              C15774 * C7172) *
                 C47384) *
                C47479) *
               C47477) *
              C47226) *
         C47135) /
            (p * q * std::sqrt(p + q));
    d2ee[87] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C15769 * C124 - C15773 * C117 + C47448 * C125 -
                 C15774 * C118) *
                    C116 +
                (C15769 * C138 - C15773 * C127 + C47448 * C139 -
                 C15774 * C128) *
                    C47384) *
                   C15771 +
               ((C15769 * C271 - C15773 * C261 + C47448 * C272 -
                 C15774 * C262) *
                    C116 +
                (C15769 * C291 - C15773 * C274 + C47448 * C292 -
                 C15774 * C275) *
                    C47384) *
                   C47479) *
                  C47181 * C47163 * C108 +
              (((C15773 * C118 - C15769 * C125 + C15774 * C119 -
                 C47448 * C126) *
                    C116 +
                (C15773 * C128 - C15769 * C139 + C15774 * C129 -
                 C47448 * C140) *
                    C47384) *
                   C15771 +
               ((C15773 * C262 - C15769 * C272 + C15774 * C263 -
                 C47448 * C273) *
                    C116 +
                (C15773 * C275 - C15769 * C292 + C15774 * C276 -
                 C47448 * C293) *
                    C47384) *
                   C47479) *
                  C47181 * C47163 * C109 +
              (((C15769 * C126 - C15773 * C119 + C47448 * C130 -
                 C15774 * C120) *
                    C116 +
                (C15769 * C140 - C15773 * C129 + C47448 * C141 -
                 C15774 * C131) *
                    C47384) *
                   C15771 +
               ((C15769 * C273 - C15773 * C263 + C47448 * C283 -
                 C15774 * C267) *
                    C116 +
                (C15769 * C293 - C15773 * C276 + C47448 * C297 -
                 C15774 * C284) *
                    C47384) *
                   C47479) *
                  C47181 * C47163 * C110 +
              (((C15773 * C120 - C15769 * C130 + C15774 * C121 -
                 C47448 * C132) *
                    C116 +
                (C15773 * C131 - C15769 * C141 + C15774 * C133 -
                 C47448 * C142) *
                    C47384) *
                   C15771 +
               ((C15773 * C267 - C15769 * C283 + C15774 * C269 -
                 C47448 * C287) *
                    C116 +
                (C15773 * C284 - C15769 * C297 + C15774 * C288 -
                 C47448 * C299) *
                    C47384) *
                   C47479) *
                  C47181 * C47163 * C111 +
              (((C15769 * C132 - C15773 * C121 + C47448 * C134 -
                 C15774 * C122) *
                    C116 +
                (C15769 * C142 - C15773 * C133 + C47448 * C143 -
                 C15774 * C135) *
                    C47384) *
                   C15771 +
               ((C15769 * C287 - C15773 * C269 + C47448 * C559 -
                 C15774 * C558) *
                    C116 +
                (C15769 * C299 - C15773 * C288 + C47448 * C561 -
                 C15774 * C560) *
                    C47384) *
                   C47479) *
                  C47181 * C47163 * C112) +
         0.5 * std::pow(Pi, 2.5) *
             (((((C15769 * C124 - C15773 * C117 + C47448 * C125 -
                  C15774 * C118) *
                     C116 +
                 (C15769 * C138 - C15773 * C127 + C47448 * C139 -
                  C15774 * C128) *
                     C47384) *
                    C15771 +
                ((C15922 - C15923 + C15924 - C15925) * C116 +
                 (C15926 - C15927 + C15928 - C15929) * C47384) *
                    C47479) *
                   C47181 * C47500 +
               (((C15923 - C15922 + C15925 - C15924) * C116 +
                 (C15927 - C15926 + C15929 - C15928) * C47384) *
                    C15771 +
                ((C15930 - C15931 + C15932 - C15933) * C116 +
                 (C15934 - C15935 + C15936 - C15937) * C47384) *
                    C47479) *
                   C47181 * C47488 +
               (((C15931 - C15930 + C15933 - C15932) * C116 +
                 (C15935 - C15934 + C15937 - C15936) * C47384) *
                    C15771 +
                ((C15769 * C1022 - C15773 * C1016 + C47448 * C1023 -
                  C15774 * C1017) *
                     C116 +
                 (C15769 * C1034 - C15773 * C1025 + C47448 * C1035 -
                  C15774 * C1026) *
                     C47384) *
                    C47479) *
                   C47181 * C47461) *
                  C258 +
              ((((C15773 * C118 - C15769 * C125 + C15774 * C119 -
                  C47448 * C126) *
                     C116 +
                 (C15773 * C128 - C15769 * C139 + C15774 * C129 -
                  C47448 * C140) *
                     C47384) *
                    C15771 +
                ((C15938 - C15939 + C15940 - C15941) * C116 +
                 (C15942 - C15943 + C15944 - C15945) * C47384) *
                    C47479) *
                   C47181 * C47500 +
               (((C15939 - C15938 + C15941 - C15940) * C116 +
                 (C15943 - C15942 + C15945 - C15944) * C47384) *
                    C15771 +
                ((C15946 - C15947 + C15948 - C15949) * C116 +
                 (C15950 - C15951 + C15952 - C15953) * C47384) *
                    C47479) *
                   C47181 * C47488 +
               (((C15947 - C15946 + C15949 - C15948) * C116 +
                 (C15951 - C15950 + C15953 - C15952) * C47384) *
                    C15771 +
                ((C15773 * C1017 - C15769 * C1023 + C15774 * C1018 -
                  C47448 * C1024) *
                     C116 +
                 (C15773 * C1026 - C15769 * C1035 + C15774 * C1027 -
                  C47448 * C1036) *
                     C47384) *
                    C47479) *
                   C47181 * C47461) *
                  C259 +
              ((((C15769 * C126 - C15773 * C119 + C47448 * C130 -
                  C15774 * C120) *
                     C116 +
                 (C15769 * C140 - C15773 * C129 + C47448 * C141 -
                  C15774 * C131) *
                     C47384) *
                    C15771 +
                ((C15954 - C15955 + C15956 - C15957) * C116 +
                 (C15958 - C15959 + C15960 - C15961) * C47384) *
                    C47479) *
                   C47181 * C47500 +
               (((C15955 - C15954 + C15957 - C15956) * C116 +
                 (C15959 - C15958 + C15961 - C15960) * C47384) *
                    C15771 +
                ((C15962 - C15963 + C15964 - C15965) * C116 +
                 (C15966 - C15967 + C15968 - C15969) * C47384) *
                    C47479) *
                   C47181 * C47488 +
               (((C15963 - C15962 + C15965 - C15964) * C116 +
                 (C15967 - C15966 + C15969 - C15968) * C47384) *
                    C15771 +
                ((C15769 * C1024 - C15773 * C1018 + C47448 * C1291 -
                  C15774 * C1290) *
                     C116 +
                 (C15769 * C1036 - C15773 * C1027 + C47448 * C1293 -
                  C15774 * C1292) *
                     C47384) *
                    C47479) *
                   C47181 * C47461) *
                  C47455)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C15769 * C124 - C15773 * C117 + C47448 * C125 - C15774 * C118) *
                 C116 +
             (C15769 * C138 - C15773 * C127 + C47448 * C139 - C15774 * C128) *
                 C47384) *
                C15771 +
            ((C15922 - C15923 + C15924 - C15925) * C116 +
             (C15926 - C15927 + C15928 - C15929) * C47384) *
                C47479) *
               C47501 +
           (((C15773 * C414 - C15769 * C424 + C15774 * C415 - C47448 * C425) *
                 C116 +
             (C15773 * C427 - C15769 * C444 + C15774 * C428 - C47448 * C445) *
                 C47384) *
                C15771 +
            ((C15773 * C812 - C15769 * C817 + C15774 * C813 - C47448 * C818) *
                 C116 +
             (C15773 * C820 - C15769 * C827 + C15774 * C821 - C47448 * C828) *
                 C47384) *
                C47479) *
               C47490 +
           (((C15769 * C430 - C15773 * C417 + C47448 * C431 - C15774 * C418) *
                 C116 +
             (C15769 * C447 - C15773 * C433 + C47448 * C448 - C15774 * C434) *
                 C47384) *
                C15771 +
            ((C15769 * C1159 - C15773 * C1150 + C47448 * C1160 -
              C15774 * C1151) *
                 C116 +
             (C15769 * C1177 - C15773 * C1162 + C47448 * C1178 -
              C15774 * C1163) *
                 C47384) *
                C47479) *
               C47464) *
              C47163 * C258 +
          ((((C15773 * C118 - C15769 * C125 + C15774 * C119 - C47448 * C126) *
                 C116 +
             (C15773 * C128 - C15769 * C139 + C15774 * C129 - C47448 * C140) *
                 C47384) *
                C15771 +
            ((C15938 - C15939 + C15940 - C15941) * C116 +
             (C15942 - C15943 + C15944 - C15945) * C47384) *
                C47479) *
               C47501 +
           (((C15769 * C425 - C15773 * C415 + C47448 * C426 - C15774 * C416) *
                 C116 +
             (C15769 * C445 - C15773 * C428 + C47448 * C446 - C15774 * C429) *
                 C47384) *
                C15771 +
            ((C15769 * C818 - C15773 * C813 + C47448 * C819 - C15774 * C814) *
                 C116 +
             (C15769 * C828 - C15773 * C821 + C47448 * C829 - C15774 * C822) *
                 C47384) *
                C47479) *
               C47490 +
           (((C15773 * C418 - C15769 * C431 + C15774 * C419 - C47448 * C432) *
                 C116 +
             (C15773 * C434 - C15769 * C448 + C15774 * C435 - C47448 * C449) *
                 C47384) *
                C15771 +
            ((C15773 * C1151 - C15769 * C1160 + C15774 * C1152 -
              C47448 * C1161) *
                 C116 +
             (C15773 * C1163 - C15769 * C1178 + C15774 * C1164 -
              C47448 * C1179) *
                 C47384) *
                C47479) *
               C47464) *
              C47163 * C259 +
          ((((C15769 * C126 - C15773 * C119 + C47448 * C130 - C15774 * C120) *
                 C116 +
             (C15769 * C140 - C15773 * C129 + C47448 * C141 - C15774 * C131) *
                 C47384) *
                C15771 +
            ((C15954 - C15955 + C15956 - C15957) * C116 +
             (C15958 - C15959 + C15960 - C15961) * C47384) *
                C47479) *
               C47501 +
           (((C15773 * C416 - C15769 * C426 + C15774 * C420 - C47448 * C436) *
                 C116 +
             (C15773 * C429 - C15769 * C446 + C15774 * C437 - C47448 * C450) *
                 C47384) *
                C15771 +
            ((C15773 * C814 - C15769 * C819 + C15774 * C815 - C47448 * C823) *
                 C116 +
             (C15773 * C822 - C15769 * C829 + C15774 * C824 - C47448 * C830) *
                 C47384) *
                C47479) *
               C47490 +
           (((C15769 * C432 - C15773 * C419 + C47448 * C438 - C15774 * C421) *
                 C116 +
             (C15769 * C449 - C15773 * C435 + C47448 * C451 - C15774 * C439) *
                 C47384) *
                C15771 +
            ((C15769 * C1161 - C15773 * C1152 + C47448 * C2015 -
              C15774 * C2014) *
                 C116 +
             (C15769 * C1179 - C15773 * C1164 + C47448 * C2017 -
              C15774 * C2016) *
                 C47384) *
                C47479) *
               C47464) *
              C47163 * C47455)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C15769 * C124 - C15773 * C117 + C47448 * C125 - C15774 * C118) *
                 C116 +
             (C15769 * C138 - C15773 * C127 + C47448 * C139 - C15774 * C128) *
                 C47384) *
                C15771 +
            ((C15922 - C15923 + C15924 - C15925) * C116 +
             (C15926 - C15927 + C15928 - C15929) * C47384) *
                C47479) *
               C47181 * C942 +
           (((C15923 - C15922 + C15925 - C15924) * C116 +
             (C15927 - C15926 + C15929 - C15928) * C47384) *
                C15771 +
            ((C15930 - C15931 + C15932 - C15933) * C116 +
             (C15934 - C15935 + C15936 - C15937) * C47384) *
                C47479) *
               C47181 * C943 +
           (((C15931 - C15930 + C15933 - C15932) * C116 +
             (C15935 - C15934 + C15937 - C15936) * C47384) *
                C15771 +
            ((C15769 * C1022 - C15773 * C1016 + C47448 * C1023 -
              C15774 * C1017) *
                 C116 +
             (C15769 * C1034 - C15773 * C1025 + C47448 * C1035 -
              C15774 * C1026) *
                 C47384) *
                C47479) *
               C47181 * C47461) *
              C47497 +
          ((((C15773 * C118 - C15769 * C125 + C15774 * C119 - C47448 * C126) *
                 C116 +
             (C15773 * C128 - C15769 * C139 + C15774 * C129 - C47448 * C140) *
                 C47384) *
                C15771 +
            ((C15938 - C15939 + C15940 - C15941) * C116 +
             (C15942 - C15943 + C15944 - C15945) * C47384) *
                C47479) *
               C47181 * C942 +
           (((C15939 - C15938 + C15941 - C15940) * C116 +
             (C15943 - C15942 + C15945 - C15944) * C47384) *
                C15771 +
            ((C15946 - C15947 + C15948 - C15949) * C116 +
             (C15950 - C15951 + C15952 - C15953) * C47384) *
                C47479) *
               C47181 * C943 +
           (((C15947 - C15946 + C15949 - C15948) * C116 +
             (C15951 - C15950 + C15953 - C15952) * C47384) *
                C15771 +
            ((C15773 * C1017 - C15769 * C1023 + C15774 * C1018 -
              C47448 * C1024) *
                 C116 +
             (C15773 * C1026 - C15769 * C1035 + C15774 * C1027 -
              C47448 * C1036) *
                 C47384) *
                C47479) *
               C47181 * C47461) *
              C47484 +
          ((((C15769 * C126 - C15773 * C119 + C47448 * C130 - C15774 * C120) *
                 C116 +
             (C15769 * C140 - C15773 * C129 + C47448 * C141 - C15774 * C131) *
                 C47384) *
                C15771 +
            ((C15954 - C15955 + C15956 - C15957) * C116 +
             (C15958 - C15959 + C15960 - C15961) * C47384) *
                C47479) *
               C47181 * C942 +
           (((C15955 - C15954 + C15957 - C15956) * C116 +
             (C15959 - C15958 + C15961 - C15960) * C47384) *
                C15771 +
            ((C15962 - C15963 + C15964 - C15965) * C116 +
             (C15966 - C15967 + C15968 - C15969) * C47384) *
                C47479) *
               C47181 * C943 +
           (((C15963 - C15962 + C15965 - C15964) * C116 +
             (C15967 - C15966 + C15969 - C15968) * C47384) *
                C15771 +
            ((C15769 * C1024 - C15773 * C1018 + C47448 * C1291 -
              C15774 * C1290) *
                 C116 +
             (C15769 * C1036 - C15773 * C1027 + C47448 * C1293 -
              C15774 * C1292) *
                 C47384) *
                C47479) *
               C47181 * C47461) *
              C47455)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C15769 * C124 - C15773 * C117 + C47448 * C125 - C15774 * C118) *
                C116 +
            (C15769 * C138 - C15773 * C127 + C47448 * C139 - C15774 * C128) *
                C47384) *
               C15771 +
           ((C15922 - C15923 + C15924 - C15925) * C116 +
            (C15926 - C15927 + C15928 - C15929) * C47384) *
               C47479) *
              C47181 * C1010 +
          (((C15923 - C15922 + C15925 - C15924) * C116 +
            (C15927 - C15926 + C15929 - C15928) * C47384) *
               C15771 +
           ((C15930 - C15931 + C15932 - C15933) * C116 +
            (C15934 - C15935 + C15936 - C15937) * C47384) *
               C47479) *
              C47181 * C1011 +
          (((C15931 - C15930 + C15933 - C15932) * C116 +
            (C15935 - C15934 + C15937 - C15936) * C47384) *
               C15771 +
           ((C16830 - C16831 + C16832 - C16833) * C116 +
            (C16834 - C16835 + C16836 - C16837) * C47384) *
               C47479) *
              C47181 * C1012 +
          (((C16831 - C16830 + C16833 - C16832) * C116 +
            (C16835 - C16834 + C16837 - C16836) * C47384) *
               C15771 +
           ((C16838 - C16839 + C16840 - C16841) * C116 +
            (C16842 - C16843 + C16844 - C16845) * C47384) *
               C47479) *
              C47181 * C1013 +
          (((C16839 - C16838 + C16841 - C16840) * C116 +
            (C16843 - C16842 + C16845 - C16844) * C47384) *
               C15771 +
           ((C15769 * C5637 - C15773 * C5635 + C47448 * C5638 -
             C15774 * C5636) *
                C116 +
            (C15769 * C5641 - C15773 * C5639 + C47448 * C5642 -
             C15774 * C5640) *
                C47384) *
               C47479) *
              C47181 * C1014) *
         C47135) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C15769 * C124 - C15773 * C117 + C47448 * C125 - C15774 * C118) *
                 C116 +
             (C15769 * C138 - C15773 * C127 + C47448 * C139 - C15774 * C128) *
                 C47384) *
                C15771 +
            ((C15922 - C15923 + C15924 - C15925) * C116 +
             (C15926 - C15927 + C15928 - C15929) * C47384) *
                C47479) *
               C47501 +
           (((C15773 * C414 - C15769 * C424 + C15774 * C415 - C47448 * C425) *
                 C116 +
             (C15773 * C427 - C15769 * C444 + C15774 * C428 - C47448 * C445) *
                 C47384) *
                C15771 +
            ((C16578 - C16579 + C16580 - C16581) * C116 +
             (C16582 - C16583 + C16584 - C16585) * C47384) *
                C47479) *
               C47490 +
           (((C15769 * C430 - C15773 * C417 + C47448 * C431 - C15774 * C418) *
                 C116 +
             (C15769 * C447 - C15773 * C433 + C47448 * C448 - C15774 * C434) *
                 C47384) *
                C15771 +
            ((C16992 - C16993 + C16994 - C16995) * C116 +
             (C16996 - C16997 + C16998 - C16999) * C47384) *
                C47479) *
               C47464) *
              C942 +
          ((((C15923 - C15922 + C15925 - C15924) * C116 +
             (C15927 - C15926 + C15929 - C15928) * C47384) *
                C15771 +
            ((C15930 - C15931 + C15932 - C15933) * C116 +
             (C15934 - C15935 + C15936 - C15937) * C47384) *
                C47479) *
               C47501 +
           (((C16579 - C16578 + C16581 - C16580) * C116 +
             (C16583 - C16582 + C16585 - C16584) * C47384) *
                C15771 +
            ((C17000 - C17001 + C17002 - C17003) * C116 +
             (C17004 - C17005 + C17006 - C17007) * C47384) *
                C47479) *
               C47490 +
           (((C16993 - C16992 + C16995 - C16994) * C116 +
             (C16997 - C16996 + C16999 - C16998) * C47384) *
                C15771 +
            ((C17008 - C17009 + C17010 - C17011) * C116 +
             (C17012 - C17013 + C17014 - C17015) * C47384) *
                C47479) *
               C47464) *
              C943 +
          ((((C15931 - C15930 + C15933 - C15932) * C116 +
             (C15935 - C15934 + C15937 - C15936) * C47384) *
                C15771 +
            ((C16830 - C16831 + C16832 - C16833) * C116 +
             (C16834 - C16835 + C16836 - C16837) * C47384) *
                C47479) *
               C47501 +
           (((C17001 - C17000 + C17003 - C17002) * C116 +
             (C17005 - C17004 + C17007 - C17006) * C47384) *
                C15771 +
            ((C15773 * C1542 - C15769 * C1545 + C15774 * C1543 -
              C47448 * C1546) *
                 C116 +
             (C15773 * C1548 - C15769 * C1551 + C15774 * C1549 -
              C47448 * C1552) *
                 C47384) *
                C47479) *
               C47490 +
           (((C17009 - C17008 + C17011 - C17010) * C116 +
             (C17013 - C17012 + C17015 - C17014) * C47384) *
                C15771 +
            ((C15769 * C5807 - C15773 * C5805 + C47448 * C5808 -
              C15774 * C5806) *
                 C116 +
             (C15769 * C5811 - C15773 * C5809 + C47448 * C5812 -
              C15774 * C5810) *
                 C47384) *
                C47479) *
               C47464) *
              C47461) *
         C47135) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C15769 * C124 - C15773 * C117 + C47448 * C125 - C15774 * C118) *
                 C116 +
             (C15769 * C138 - C15773 * C127 + C47448 * C139 - C15774 * C128) *
                 C47384) *
                C15771 +
            ((C15922 - C15923 + C15924 - C15925) * C116 +
             (C15926 - C15927 + C15928 - C15929) * C47384) *
                C47479) *
               C1664 +
           (((C15773 * C414 - C15769 * C424 + C15774 * C415 - C47448 * C425) *
                 C116 +
             (C15773 * C427 - C15769 * C444 + C15774 * C428 - C47448 * C445) *
                 C47384) *
                C15771 +
            ((C16578 - C16579 + C16580 - C16581) * C116 +
             (C16582 - C16583 + C16584 - C16585) * C47384) *
                C47479) *
               C1665 +
           (((C15769 * C430 - C15773 * C417 + C47448 * C431 - C15774 * C418) *
                 C116 +
             (C15769 * C447 - C15773 * C433 + C47448 * C448 - C15774 * C434) *
                 C47384) *
                C15771 +
            ((C16992 - C16993 + C16994 - C16995) * C116 +
             (C16996 - C16997 + C16998 - C16999) * C47384) *
                C47479) *
               C47464) *
              C47163 * C47497 +
          ((((C15773 * C118 - C15769 * C125 + C15774 * C119 - C47448 * C126) *
                 C116 +
             (C15773 * C128 - C15769 * C139 + C15774 * C129 - C47448 * C140) *
                 C47384) *
                C15771 +
            ((C15938 - C15939 + C15940 - C15941) * C116 +
             (C15942 - C15943 + C15944 - C15945) * C47384) *
                C47479) *
               C1664 +
           (((C15769 * C425 - C15773 * C415 + C47448 * C426 - C15774 * C416) *
                 C116 +
             (C15769 * C445 - C15773 * C428 + C47448 * C446 - C15774 * C429) *
                 C47384) *
                C15771 +
            ((C16586 - C16587 + C16588 - C16589) * C116 +
             (C16590 - C16591 + C16592 - C16593) * C47384) *
                C47479) *
               C1665 +
           (((C15773 * C418 - C15769 * C431 + C15774 * C419 - C47448 * C432) *
                 C116 +
             (C15773 * C434 - C15769 * C448 + C15774 * C435 - C47448 * C449) *
                 C47384) *
                C15771 +
            ((C15773 * C1151 - C15769 * C1160 + C15774 * C1152 -
              C47448 * C1161) *
                 C116 +
             (C15773 * C1163 - C15769 * C1178 + C15774 * C1164 -
              C47448 * C1179) *
                 C47384) *
                C47479) *
               C47464) *
              C47163 * C47484 +
          ((((C15769 * C126 - C15773 * C119 + C47448 * C130 - C15774 * C120) *
                 C116 +
             (C15769 * C140 - C15773 * C129 + C47448 * C141 - C15774 * C131) *
                 C47384) *
                C15771 +
            ((C15954 - C15955 + C15956 - C15957) * C116 +
             (C15958 - C15959 + C15960 - C15961) * C47384) *
                C47479) *
               C1664 +
           (((C15773 * C416 - C15769 * C426 + C15774 * C420 - C47448 * C436) *
                 C116 +
             (C15773 * C429 - C15769 * C446 + C15774 * C437 - C47448 * C450) *
                 C47384) *
                C15771 +
            ((C16594 - C16595 + C16596 - C16597) * C116 +
             (C16598 - C16599 + C16600 - C16601) * C47384) *
                C47479) *
               C1665 +
           (((C15769 * C432 - C15773 * C419 + C47448 * C438 - C15774 * C421) *
                 C116 +
             (C15769 * C449 - C15773 * C435 + C47448 * C451 - C15774 * C439) *
                 C47384) *
                C15771 +
            ((C15769 * C1161 - C15773 * C1152 + C47448 * C2015 -
              C15774 * C2014) *
                 C116 +
             (C15769 * C1179 - C15773 * C1164 + C47448 * C2017 -
              C15774 * C2016) *
                 C47384) *
                C47479) *
               C47464) *
              C47163 * C47455)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C15769 * C124 - C15773 * C117 + C47448 * C125 - C15774 * C118) *
                 C116 +
             (C15769 * C138 - C15773 * C127 + C47448 * C139 - C15774 * C128) *
                 C47384) *
                C15771 +
            ((C15922 - C15923 + C15924 - C15925) * C116 +
             (C15926 - C15927 + C15928 - C15929) * C47384) *
                C47479) *
               C1664 +
           (((C15773 * C414 - C15769 * C424 + C15774 * C415 - C47448 * C425) *
                 C116 +
             (C15773 * C427 - C15769 * C444 + C15774 * C428 - C47448 * C445) *
                 C47384) *
                C15771 +
            ((C16578 - C16579 + C16580 - C16581) * C116 +
             (C16582 - C16583 + C16584 - C16585) * C47384) *
                C47479) *
               C1665 +
           (((C15769 * C430 - C15773 * C417 + C47448 * C431 - C15774 * C418) *
                 C116 +
             (C15769 * C447 - C15773 * C433 + C47448 * C448 - C15774 * C434) *
                 C47384) *
                C15771 +
            ((C16992 - C16993 + C16994 - C16995) * C116 +
             (C16996 - C16997 + C16998 - C16999) * C47384) *
                C47479) *
               C47464) *
              C47500 +
          ((((C15923 - C15922 + C15925 - C15924) * C116 +
             (C15927 - C15926 + C15929 - C15928) * C47384) *
                C15771 +
            ((C15930 - C15931 + C15932 - C15933) * C116 +
             (C15934 - C15935 + C15936 - C15937) * C47384) *
                C47479) *
               C1664 +
           (((C16579 - C16578 + C16581 - C16580) * C116 +
             (C16583 - C16582 + C16585 - C16584) * C47384) *
                C15771 +
            ((C17000 - C17001 + C17002 - C17003) * C116 +
             (C17004 - C17005 + C17006 - C17007) * C47384) *
                C47479) *
               C1665 +
           (((C16993 - C16992 + C16995 - C16994) * C116 +
             (C16997 - C16996 + C16999 - C16998) * C47384) *
                C15771 +
            ((C17008 - C17009 + C17010 - C17011) * C116 +
             (C17012 - C17013 + C17014 - C17015) * C47384) *
                C47479) *
               C47464) *
              C47488 +
          ((((C15931 - C15930 + C15933 - C15932) * C116 +
             (C15935 - C15934 + C15937 - C15936) * C47384) *
                C15771 +
            ((C16830 - C16831 + C16832 - C16833) * C116 +
             (C16834 - C16835 + C16836 - C16837) * C47384) *
                C47479) *
               C1664 +
           (((C17001 - C17000 + C17003 - C17002) * C116 +
             (C17005 - C17004 + C17007 - C17006) * C47384) *
                C15771 +
            ((C17486 - C17487 + C17488 - C17489) * C116 +
             (C17490 - C17491 + C17492 - C17493) * C47384) *
                C47479) *
               C1665 +
           (((C17009 - C17008 + C17011 - C17010) * C116 +
             (C17013 - C17012 + C17015 - C17014) * C47384) *
                C15771 +
            ((C15769 * C5807 - C15773 * C5805 + C47448 * C5808 -
              C15774 * C5806) *
                 C116 +
             (C15769 * C5811 - C15773 * C5809 + C47448 * C5812 -
              C15774 * C5810) *
                 C47384) *
                C47479) *
               C47464) *
              C47461) *
         C47135) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C15769 * C124 - C15773 * C117 + C47448 * C125 - C15774 * C118) *
                C116 +
            (C15769 * C138 - C15773 * C127 + C47448 * C139 - C15774 * C128) *
                C47384) *
               C15771 +
           ((C15922 - C15923 + C15924 - C15925) * C116 +
            (C15926 - C15927 + C15928 - C15929) * C47384) *
               C47479) *
              C1839 +
          (((C15773 * C414 - C15769 * C424 + C15774 * C415 - C47448 * C425) *
                C116 +
            (C15773 * C427 - C15769 * C444 + C15774 * C428 - C47448 * C445) *
                C47384) *
               C15771 +
           ((C16578 - C16579 + C16580 - C16581) * C116 +
            (C16582 - C16583 + C16584 - C16585) * C47384) *
               C47479) *
              C1840 +
          (((C15769 * C430 - C15773 * C417 + C47448 * C431 - C15774 * C418) *
                C116 +
            (C15769 * C447 - C15773 * C433 + C47448 * C448 - C15774 * C434) *
                C47384) *
               C15771 +
           ((C16992 - C16993 + C16994 - C16995) * C116 +
            (C16996 - C16997 + C16998 - C16999) * C47384) *
               C47479) *
              C1841 +
          (((C15773 * C1844 - C15769 * C1850 + C15774 * C1845 -
             C47448 * C1851) *
                C116 +
            (C15773 * C1853 - C15769 * C1862 + C15774 * C1854 -
             C47448 * C1863) *
                C47384) *
               C15771 +
           ((C15773 * C2222 - C15769 * C2225 + C15774 * C2223 -
             C47448 * C2226) *
                C116 +
            (C15773 * C2228 - C15769 * C2231 + C15774 * C2229 -
             C47448 * C2232) *
                C47384) *
               C47479) *
              C1842 +
          (((C15769 * C1856 - C15773 * C1847 + C47448 * C1857 -
             C15774 * C1848) *
                C116 +
            (C15769 * C1865 - C15773 * C1859 + C47448 * C1866 -
             C15774 * C1860) *
                C47384) *
               C15771 +
           ((C15769 * C6699 - C15773 * C6697 + C47448 * C6700 -
             C15774 * C6698) *
                C116 +
            (C15769 * C6703 - C15773 * C6701 + C47448 * C6704 -
             C15774 * C6702) *
                C47384) *
               C47479) *
              C1843) *
         C47163 * C47135) /
            (p * q * std::sqrt(p + q));
    d2ee[88] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C15769 * C124 - C15773 * C117 + C47448 * C125 - C15774 * C118) *
                  C116 +
              (C15769 * C138 - C15773 * C127 + C47448 * C139 - C15774 * C128) *
                  C47384) *
                 C15771 +
             ((C15922 - C15923 + C15924 - C15925) * C116 +
              (C15926 - C15927 + C15928 - C15929) * C47384) *
                 C47479) *
                C47430 +
            (((C15773 * C414 - C15769 * C424 + C15774 * C415 - C47448 * C425) *
                  C116 +
              (C15773 * C427 - C15769 * C444 + C15774 * C428 - C47448 * C445) *
                  C47384) *
                 C15771 +
             ((C16578 - C16579 + C16580 - C16581) * C116 +
              (C16582 - C16583 + C16584 - C16585) * C47384) *
                 C47479) *
                C47268) *
               C942 +
           ((((C15923 - C15922 + C15925 - C15924) * C116 +
              (C15927 - C15926 + C15929 - C15928) * C47384) *
                 C15771 +
             ((C15930 - C15931 + C15932 - C15933) * C116 +
              (C15934 - C15935 + C15936 - C15937) * C47384) *
                 C47479) *
                C47430 +
            (((C16579 - C16578 + C16581 - C16580) * C116 +
              (C16583 - C16582 + C16585 - C16584) * C47384) *
                 C15771 +
             ((C17000 - C17001 + C17002 - C17003) * C116 +
              (C17004 - C17005 + C17006 - C17007) * C47384) *
                 C47479) *
                C47268) *
               C943 +
           ((((C15931 - C15930 + C15933 - C15932) * C116 +
              (C15935 - C15934 + C15937 - C15936) * C47384) *
                 C15771 +
             ((C16830 - C16831 + C16832 - C16833) * C116 +
              (C16834 - C16835 + C16836 - C16837) * C47384) *
                 C47479) *
                C47430 +
            (((C17001 - C17000 + C17003 - C17002) * C116 +
              (C17005 - C17004 + C17007 - C17006) * C47384) *
                 C15771 +
             ((C15773 * C1542 - C15769 * C1545 + C15774 * C1543 -
               C47448 * C1546) *
                  C116 +
              (C15773 * C1548 - C15769 * C1551 + C15774 * C1549 -
               C47448 * C1552) *
                  C47384) *
                 C47479) *
                C47268) *
               C47461) *
              C47415 +
          (((((C15773 * C118 - C15769 * C125 + C15774 * C119 - C47448 * C126) *
                  C116 +
              (C15773 * C128 - C15769 * C139 + C15774 * C129 - C47448 * C140) *
                  C47384) *
                 C15771 +
             ((C15938 - C15939 + C15940 - C15941) * C116 +
              (C15942 - C15943 + C15944 - C15945) * C47384) *
                 C47479) *
                C47430 +
            (((C15769 * C425 - C15773 * C415 + C47448 * C426 - C15774 * C416) *
                  C116 +
              (C15769 * C445 - C15773 * C428 + C47448 * C446 - C15774 * C429) *
                  C47384) *
                 C15771 +
             ((C16586 - C16587 + C16588 - C16589) * C116 +
              (C16590 - C16591 + C16592 - C16593) * C47384) *
                 C47479) *
                C47268) *
               C942 +
           ((((C15939 - C15938 + C15941 - C15940) * C116 +
              (C15943 - C15942 + C15945 - C15944) * C47384) *
                 C15771 +
             ((C15946 - C15947 + C15948 - C15949) * C116 +
              (C15950 - C15951 + C15952 - C15953) * C47384) *
                 C47479) *
                C47430 +
            (((C16587 - C16586 + C16589 - C16588) * C116 +
              (C16591 - C16590 + C16593 - C16592) * C47384) *
                 C15771 +
             ((C17348 - C17349 + C17350 - C17351) * C116 +
              (C17352 - C17353 + C17354 - C17355) * C47384) *
                 C47479) *
                C47268) *
               C943 +
           ((((C15947 - C15946 + C15949 - C15948) * C116 +
              (C15951 - C15950 + C15953 - C15952) * C47384) *
                 C15771 +
             ((C17146 - C17147 + C17148 - C17149) * C116 +
              (C17150 - C17151 + C17152 - C17153) * C47384) *
                 C47479) *
                C47430 +
            (((C17349 - C17348 + C17351 - C17350) * C116 +
              (C17353 - C17352 + C17355 - C17354) * C47384) *
                 C15771 +
             ((C15769 * C1546 - C15773 * C1543 + C47448 * C1547 -
               C15774 * C1544) *
                  C116 +
              (C15769 * C1552 - C15773 * C1549 + C47448 * C1553 -
               C15774 * C1550) *
                  C47384) *
                 C47479) *
                C47268) *
               C47461) *
              C47146)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C15769 * C124 - C15773 * C117 + C47448 * C125 - C15774 * C118) *
                 C116 +
             (C15769 * C138 - C15773 * C127 + C47448 * C139 - C15774 * C128) *
                 C47384) *
                C15771 +
            ((C15922 - C15923 + C15924 - C15925) * C116 +
             (C15926 - C15927 + C15928 - C15929) * C47384) *
                C47479) *
               C47430 +
           (((C15773 * C414 - C15769 * C424 + C15774 * C415 - C47448 * C425) *
                 C116 +
             (C15773 * C427 - C15769 * C444 + C15774 * C428 - C47448 * C445) *
                 C47384) *
                C15771 +
            ((C15773 * C812 - C15769 * C817 + C15774 * C813 - C47448 * C818) *
                 C116 +
             (C15773 * C820 - C15769 * C827 + C15774 * C821 - C47448 * C828) *
                 C47384) *
                C47479) *
               C47268) *
              C47163 * C554 +
          ((((C15773 * C118 - C15769 * C125 + C15774 * C119 - C47448 * C126) *
                 C116 +
             (C15773 * C128 - C15769 * C139 + C15774 * C129 - C47448 * C140) *
                 C47384) *
                C15771 +
            ((C15938 - C15939 + C15940 - C15941) * C116 +
             (C15942 - C15943 + C15944 - C15945) * C47384) *
                C47479) *
               C47430 +
           (((C15769 * C425 - C15773 * C415 + C47448 * C426 - C15774 * C416) *
                 C116 +
             (C15769 * C445 - C15773 * C428 + C47448 * C446 - C15774 * C429) *
                 C47384) *
                C15771 +
            ((C15769 * C818 - C15773 * C813 + C47448 * C819 - C15774 * C814) *
                 C116 +
             (C15769 * C828 - C15773 * C821 + C47448 * C829 - C15774 * C822) *
                 C47384) *
                C47479) *
               C47268) *
              C47163 * C555 +
          ((((C15769 * C126 - C15773 * C119 + C47448 * C130 - C15774 * C120) *
                 C116 +
             (C15769 * C140 - C15773 * C129 + C47448 * C141 - C15774 * C131) *
                 C47384) *
                C15771 +
            ((C15954 - C15955 + C15956 - C15957) * C116 +
             (C15958 - C15959 + C15960 - C15961) * C47384) *
                C47479) *
               C47430 +
           (((C15773 * C416 - C15769 * C426 + C15774 * C420 - C47448 * C436) *
                 C116 +
             (C15773 * C429 - C15769 * C446 + C15774 * C437 - C47448 * C450) *
                 C47384) *
                C15771 +
            ((C15773 * C814 - C15769 * C819 + C15774 * C815 - C47448 * C823) *
                 C116 +
             (C15773 * C822 - C15769 * C829 + C15774 * C824 - C47448 * C830) *
                 C47384) *
                C47479) *
               C47268) *
              C47163 * C556 +
          ((((C15773 * C120 - C15769 * C130 + C15774 * C121 - C47448 * C132) *
                 C116 +
             (C15773 * C131 - C15769 * C141 + C15774 * C133 - C47448 * C142) *
                 C47384) *
                C15771 +
            ((C16246 - C16247 + C16248 - C16249) * C116 +
             (C16250 - C16251 + C16252 - C16253) * C47384) *
                C47479) *
               C47430 +
           (((C15769 * C436 - C15773 * C420 + C47448 * C440 - C15774 * C422) *
                 C116 +
             (C15769 * C450 - C15773 * C437 + C47448 * C452 - C15774 * C441) *
                 C47384) *
                C15771 +
            ((C15769 * C823 - C15773 * C815 + C47448 * C825 - C15774 * C816) *
                 C116 +
             (C15769 * C830 - C15773 * C824 + C47448 * C831 - C15774 * C826) *
                 C47384) *
                C47479) *
               C47268) *
              C47163 * C47465)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C15769 * C124 - C15773 * C117 + C47448 * C125 - C15774 * C118) *
                 C116 +
             (C15769 * C138 - C15773 * C127 + C47448 * C139 - C15774 * C128) *
                 C47384) *
                C15771 +
            ((C15922 - C15923 + C15924 - C15925) * C116 +
             (C15926 - C15927 + C15928 - C15929) * C47384) *
                C47479) *
               C2116 +
           (((C15773 * C414 - C15769 * C424 + C15774 * C415 - C47448 * C425) *
                 C116 +
             (C15773 * C427 - C15769 * C444 + C15774 * C428 - C47448 * C445) *
                 C47384) *
                C15771 +
            ((C16578 - C16579 + C16580 - C16581) * C116 +
             (C16582 - C16583 + C16584 - C16585) * C47384) *
                C47479) *
               C2117 +
           (((C15769 * C430 - C15773 * C417 + C47448 * C431 - C15774 * C418) *
                 C116 +
             (C15769 * C447 - C15773 * C433 + C47448 * C448 - C15774 * C434) *
                 C47384) *
                C15771 +
            ((C16992 - C16993 + C16994 - C16995) * C116 +
             (C16996 - C16997 + C16998 - C16999) * C47384) *
                C47479) *
               C2118 +
           (((C15773 * C1844 - C15769 * C1850 + C15774 * C1845 -
              C47448 * C1851) *
                 C116 +
             (C15773 * C1853 - C15769 * C1862 + C15774 * C1854 -
              C47448 * C1863) *
                 C47384) *
                C15771 +
            ((C15773 * C2222 - C15769 * C2225 + C15774 * C2223 -
              C47448 * C2226) *
                 C116 +
             (C15773 * C2228 - C15769 * C2231 + C15774 * C2229 -
              C47448 * C2232) *
                 C47384) *
                C47479) *
               C47477) *
              C47163 * C47415 +
          ((((C15773 * C118 - C15769 * C125 + C15774 * C119 - C47448 * C126) *
                 C116 +
             (C15773 * C128 - C15769 * C139 + C15774 * C129 - C47448 * C140) *
                 C47384) *
                C15771 +
            ((C15938 - C15939 + C15940 - C15941) * C116 +
             (C15942 - C15943 + C15944 - C15945) * C47384) *
                C47479) *
               C2116 +
           (((C15769 * C425 - C15773 * C415 + C47448 * C426 - C15774 * C416) *
                 C116 +
             (C15769 * C445 - C15773 * C428 + C47448 * C446 - C15774 * C429) *
                 C47384) *
                C15771 +
            ((C16586 - C16587 + C16588 - C16589) * C116 +
             (C16590 - C16591 + C16592 - C16593) * C47384) *
                C47479) *
               C2117 +
           (((C15773 * C418 - C15769 * C431 + C15774 * C419 - C47448 * C432) *
                 C116 +
             (C15773 * C434 - C15769 * C448 + C15774 * C435 - C47448 * C449) *
                 C47384) *
                C15771 +
            ((C18062 - C18063 + C18064 - C18065) * C116 +
             (C18066 - C18067 + C18068 - C18069) * C47384) *
                C47479) *
               C2118 +
           (((C15769 * C1851 - C15773 * C1845 + C47448 * C1852 -
              C15774 * C1846) *
                 C116 +
             (C15769 * C1863 - C15773 * C1854 + C47448 * C1864 -
              C15774 * C1855) *
                 C47384) *
                C15771 +
            ((C15769 * C2226 - C15773 * C2223 + C47448 * C2227 -
              C15774 * C2224) *
                 C116 +
             (C15769 * C2232 - C15773 * C2229 + C47448 * C2233 -
              C15774 * C2230) *
                 C47384) *
                C47479) *
               C47477) *
              C47163 * C47146)) /
            (p * q * std::sqrt(p + q));
    d2ee[89] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C15769 * C124 - C15773 * C117 + C47448 * C125 - C15774 * C118) *
                 C116 +
             (C15769 * C138 - C15773 * C127 + C47448 * C139 - C15774 * C128) *
                 C47384) *
                C15771 +
            ((C15922 - C15923 + C15924 - C15925) * C116 +
             (C15926 - C15927 + C15928 - C15929) * C47384) *
                C47479) *
               C47181 * C47500 +
           (((C15923 - C15922 + C15925 - C15924) * C116 +
             (C15927 - C15926 + C15929 - C15928) * C47384) *
                C15771 +
            ((C15930 - C15931 + C15932 - C15933) * C116 +
             (C15934 - C15935 + C15936 - C15937) * C47384) *
                C47479) *
               C47181 * C47488 +
           (((C15931 - C15930 + C15933 - C15932) * C116 +
             (C15935 - C15934 + C15937 - C15936) * C47384) *
                C15771 +
            ((C15769 * C1022 - C15773 * C1016 + C47448 * C1023 -
              C15774 * C1017) *
                 C116 +
             (C15769 * C1034 - C15773 * C1025 + C47448 * C1035 -
              C15774 * C1026) *
                 C47384) *
                C47479) *
               C47181 * C47461) *
              C258 +
          ((((C15773 * C118 - C15769 * C125 + C15774 * C119 - C47448 * C126) *
                 C116 +
             (C15773 * C128 - C15769 * C139 + C15774 * C129 - C47448 * C140) *
                 C47384) *
                C15771 +
            ((C15938 - C15939 + C15940 - C15941) * C116 +
             (C15942 - C15943 + C15944 - C15945) * C47384) *
                C47479) *
               C47181 * C47500 +
           (((C15939 - C15938 + C15941 - C15940) * C116 +
             (C15943 - C15942 + C15945 - C15944) * C47384) *
                C15771 +
            ((C15946 - C15947 + C15948 - C15949) * C116 +
             (C15950 - C15951 + C15952 - C15953) * C47384) *
                C47479) *
               C47181 * C47488 +
           (((C15947 - C15946 + C15949 - C15948) * C116 +
             (C15951 - C15950 + C15953 - C15952) * C47384) *
                C15771 +
            ((C15773 * C1017 - C15769 * C1023 + C15774 * C1018 -
              C47448 * C1024) *
                 C116 +
             (C15773 * C1026 - C15769 * C1035 + C15774 * C1027 -
              C47448 * C1036) *
                 C47384) *
                C47479) *
               C47181 * C47461) *
              C259 +
          ((((C15769 * C126 - C15773 * C119 + C47448 * C130 - C15774 * C120) *
                 C116 +
             (C15769 * C140 - C15773 * C129 + C47448 * C141 - C15774 * C131) *
                 C47384) *
                C15771 +
            ((C15954 - C15955 + C15956 - C15957) * C116 +
             (C15958 - C15959 + C15960 - C15961) * C47384) *
                C47479) *
               C47181 * C47500 +
           (((C15955 - C15954 + C15957 - C15956) * C116 +
             (C15959 - C15958 + C15961 - C15960) * C47384) *
                C15771 +
            ((C15962 - C15963 + C15964 - C15965) * C116 +
             (C15966 - C15967 + C15968 - C15969) * C47384) *
                C47479) *
               C47181 * C47488 +
           (((C15963 - C15962 + C15965 - C15964) * C116 +
             (C15967 - C15966 + C15969 - C15968) * C47384) *
                C15771 +
            ((C15769 * C1024 - C15773 * C1018 + C47448 * C1291 -
              C15774 * C1290) *
                 C116 +
             (C15769 * C1036 - C15773 * C1027 + C47448 * C1293 -
              C15774 * C1292) *
                 C47384) *
                C47479) *
               C47181 * C47461) *
              C47455)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C15769 * C124 - C15773 * C117 + C47448 * C125 - C15774 * C118) *
                C116 +
            (C15769 * C138 - C15773 * C127 + C47448 * C139 - C15774 * C128) *
                C47384) *
               C15771 +
           ((C15769 * C271 - C15773 * C261 + C47448 * C272 - C15774 * C262) *
                C116 +
            (C15769 * C291 - C15773 * C274 + C47448 * C292 - C15774 * C275) *
                C47384) *
               C47479) *
              C47181 * C47163 * C108 +
          (((C15773 * C118 - C15769 * C125 + C15774 * C119 - C47448 * C126) *
                C116 +
            (C15773 * C128 - C15769 * C139 + C15774 * C129 - C47448 * C140) *
                C47384) *
               C15771 +
           ((C15773 * C262 - C15769 * C272 + C15774 * C263 - C47448 * C273) *
                C116 +
            (C15773 * C275 - C15769 * C292 + C15774 * C276 - C47448 * C293) *
                C47384) *
               C47479) *
              C47181 * C47163 * C109 +
          (((C15769 * C126 - C15773 * C119 + C47448 * C130 - C15774 * C120) *
                C116 +
            (C15769 * C140 - C15773 * C129 + C47448 * C141 - C15774 * C131) *
                C47384) *
               C15771 +
           ((C15769 * C273 - C15773 * C263 + C47448 * C283 - C15774 * C267) *
                C116 +
            (C15769 * C293 - C15773 * C276 + C47448 * C297 - C15774 * C284) *
                C47384) *
               C47479) *
              C47181 * C47163 * C110 +
          (((C15773 * C120 - C15769 * C130 + C15774 * C121 - C47448 * C132) *
                C116 +
            (C15773 * C131 - C15769 * C141 + C15774 * C133 - C47448 * C142) *
                C47384) *
               C15771 +
           ((C15773 * C267 - C15769 * C283 + C15774 * C269 - C47448 * C287) *
                C116 +
            (C15773 * C284 - C15769 * C297 + C15774 * C288 - C47448 * C299) *
                C47384) *
               C47479) *
              C47181 * C47163 * C111 +
          (((C15769 * C132 - C15773 * C121 + C47448 * C134 - C15774 * C122) *
                C116 +
            (C15769 * C142 - C15773 * C133 + C47448 * C143 - C15774 * C135) *
                C47384) *
               C15771 +
           ((C15769 * C287 - C15773 * C269 + C47448 * C559 - C15774 * C558) *
                C116 +
            (C15769 * C299 - C15773 * C288 + C47448 * C561 - C15774 * C560) *
                C47384) *
               C47479) *
              C47181 * C47163 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C15769 * C124 - C15773 * C117 + C47448 * C125 - C15774 * C118) *
                 C116 +
             (C15769 * C138 - C15773 * C127 + C47448 * C139 - C15774 * C128) *
                 C47384) *
                C15771 +
            ((C15922 - C15923 + C15924 - C15925) * C116 +
             (C15926 - C15927 + C15928 - C15929) * C47384) *
                C47479) *
               C47181 * C942 +
           (((C15923 - C15922 + C15925 - C15924) * C116 +
             (C15927 - C15926 + C15929 - C15928) * C47384) *
                C15771 +
            ((C15930 - C15931 + C15932 - C15933) * C116 +
             (C15934 - C15935 + C15936 - C15937) * C47384) *
                C47479) *
               C47181 * C943 +
           (((C15931 - C15930 + C15933 - C15932) * C116 +
             (C15935 - C15934 + C15937 - C15936) * C47384) *
                C15771 +
            ((C15769 * C1022 - C15773 * C1016 + C47448 * C1023 -
              C15774 * C1017) *
                 C116 +
             (C15769 * C1034 - C15773 * C1025 + C47448 * C1035 -
              C15774 * C1026) *
                 C47384) *
                C47479) *
               C47181 * C47461) *
              C47497 +
          ((((C15773 * C118 - C15769 * C125 + C15774 * C119 - C47448 * C126) *
                 C116 +
             (C15773 * C128 - C15769 * C139 + C15774 * C129 - C47448 * C140) *
                 C47384) *
                C15771 +
            ((C15938 - C15939 + C15940 - C15941) * C116 +
             (C15942 - C15943 + C15944 - C15945) * C47384) *
                C47479) *
               C47181 * C942 +
           (((C15939 - C15938 + C15941 - C15940) * C116 +
             (C15943 - C15942 + C15945 - C15944) * C47384) *
                C15771 +
            ((C15946 - C15947 + C15948 - C15949) * C116 +
             (C15950 - C15951 + C15952 - C15953) * C47384) *
                C47479) *
               C47181 * C943 +
           (((C15947 - C15946 + C15949 - C15948) * C116 +
             (C15951 - C15950 + C15953 - C15952) * C47384) *
                C15771 +
            ((C15773 * C1017 - C15769 * C1023 + C15774 * C1018 -
              C47448 * C1024) *
                 C116 +
             (C15773 * C1026 - C15769 * C1035 + C15774 * C1027 -
              C47448 * C1036) *
                 C47384) *
                C47479) *
               C47181 * C47461) *
              C47484 +
          ((((C15769 * C126 - C15773 * C119 + C47448 * C130 - C15774 * C120) *
                 C116 +
             (C15769 * C140 - C15773 * C129 + C47448 * C141 - C15774 * C131) *
                 C47384) *
                C15771 +
            ((C15954 - C15955 + C15956 - C15957) * C116 +
             (C15958 - C15959 + C15960 - C15961) * C47384) *
                C47479) *
               C47181 * C942 +
           (((C15955 - C15954 + C15957 - C15956) * C116 +
             (C15959 - C15958 + C15961 - C15960) * C47384) *
                C15771 +
            ((C15962 - C15963 + C15964 - C15965) * C116 +
             (C15966 - C15967 + C15968 - C15969) * C47384) *
                C47479) *
               C47181 * C943 +
           (((C15963 - C15962 + C15965 - C15964) * C116 +
             (C15967 - C15966 + C15969 - C15968) * C47384) *
                C15771 +
            ((C15769 * C1024 - C15773 * C1018 + C47448 * C1291 -
              C15774 * C1290) *
                 C116 +
             (C15769 * C1036 - C15773 * C1027 + C47448 * C1293 -
              C15774 * C1292) *
                 C47384) *
                C47479) *
               C47181 * C47461) *
              C47455)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C15769 * C124 - C15773 * C117 + C47448 * C125 - C15774 * C118) *
                C116 +
            (C15769 * C138 - C15773 * C127 + C47448 * C139 - C15774 * C128) *
                C47384) *
               C15771 +
           ((C15922 - C15923 + C15924 - C15925) * C116 +
            (C15926 - C15927 + C15928 - C15929) * C47384) *
               C47479) *
              C47181 * C1010 +
          (((C15923 - C15922 + C15925 - C15924) * C116 +
            (C15927 - C15926 + C15929 - C15928) * C47384) *
               C15771 +
           ((C15930 - C15931 + C15932 - C15933) * C116 +
            (C15934 - C15935 + C15936 - C15937) * C47384) *
               C47479) *
              C47181 * C1011 +
          (((C15931 - C15930 + C15933 - C15932) * C116 +
            (C15935 - C15934 + C15937 - C15936) * C47384) *
               C15771 +
           ((C16830 - C16831 + C16832 - C16833) * C116 +
            (C16834 - C16835 + C16836 - C16837) * C47384) *
               C47479) *
              C47181 * C1012 +
          (((C16831 - C16830 + C16833 - C16832) * C116 +
            (C16835 - C16834 + C16837 - C16836) * C47384) *
               C15771 +
           ((C16838 - C16839 + C16840 - C16841) * C116 +
            (C16842 - C16843 + C16844 - C16845) * C47384) *
               C47479) *
              C47181 * C1013 +
          (((C16839 - C16838 + C16841 - C16840) * C116 +
            (C16843 - C16842 + C16845 - C16844) * C47384) *
               C15771 +
           ((C15769 * C5637 - C15773 * C5635 + C47448 * C5638 -
             C15774 * C5636) *
                C116 +
            (C15769 * C5641 - C15773 * C5639 + C47448 * C5642 -
             C15774 * C5640) *
                C47384) *
               C47479) *
              C47181 * C1014) *
         C47135) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C15769 * C124 - C15773 * C117 + C47448 * C125 - C15774 * C118) *
                 C116 +
             (C15769 * C138 - C15773 * C127 + C47448 * C139 - C15774 * C128) *
                 C47384) *
                C15771 +
            ((C15922 - C15923 + C15924 - C15925) * C116 +
             (C15926 - C15927 + C15928 - C15929) * C47384) *
                C47479) *
               C1664 +
           (((C15773 * C414 - C15769 * C424 + C15774 * C415 - C47448 * C425) *
                 C116 +
             (C15773 * C427 - C15769 * C444 + C15774 * C428 - C47448 * C445) *
                 C47384) *
                C15771 +
            ((C16578 - C16579 + C16580 - C16581) * C116 +
             (C16582 - C16583 + C16584 - C16585) * C47384) *
                C47479) *
               C1665 +
           (((C15769 * C430 - C15773 * C417 + C47448 * C431 - C15774 * C418) *
                 C116 +
             (C15769 * C447 - C15773 * C433 + C47448 * C448 - C15774 * C434) *
                 C47384) *
                C15771 +
            ((C16992 - C16993 + C16994 - C16995) * C116 +
             (C16996 - C16997 + C16998 - C16999) * C47384) *
                C47479) *
               C47464) *
              C47163 * C47497 +
          ((((C15773 * C118 - C15769 * C125 + C15774 * C119 - C47448 * C126) *
                 C116 +
             (C15773 * C128 - C15769 * C139 + C15774 * C129 - C47448 * C140) *
                 C47384) *
                C15771 +
            ((C15938 - C15939 + C15940 - C15941) * C116 +
             (C15942 - C15943 + C15944 - C15945) * C47384) *
                C47479) *
               C1664 +
           (((C15769 * C425 - C15773 * C415 + C47448 * C426 - C15774 * C416) *
                 C116 +
             (C15769 * C445 - C15773 * C428 + C47448 * C446 - C15774 * C429) *
                 C47384) *
                C15771 +
            ((C16586 - C16587 + C16588 - C16589) * C116 +
             (C16590 - C16591 + C16592 - C16593) * C47384) *
                C47479) *
               C1665 +
           (((C15773 * C418 - C15769 * C431 + C15774 * C419 - C47448 * C432) *
                 C116 +
             (C15773 * C434 - C15769 * C448 + C15774 * C435 - C47448 * C449) *
                 C47384) *
                C15771 +
            ((C15773 * C1151 - C15769 * C1160 + C15774 * C1152 -
              C47448 * C1161) *
                 C116 +
             (C15773 * C1163 - C15769 * C1178 + C15774 * C1164 -
              C47448 * C1179) *
                 C47384) *
                C47479) *
               C47464) *
              C47163 * C47484 +
          ((((C15769 * C126 - C15773 * C119 + C47448 * C130 - C15774 * C120) *
                 C116 +
             (C15769 * C140 - C15773 * C129 + C47448 * C141 - C15774 * C131) *
                 C47384) *
                C15771 +
            ((C15954 - C15955 + C15956 - C15957) * C116 +
             (C15958 - C15959 + C15960 - C15961) * C47384) *
                C47479) *
               C1664 +
           (((C15773 * C416 - C15769 * C426 + C15774 * C420 - C47448 * C436) *
                 C116 +
             (C15773 * C429 - C15769 * C446 + C15774 * C437 - C47448 * C450) *
                 C47384) *
                C15771 +
            ((C16594 - C16595 + C16596 - C16597) * C116 +
             (C16598 - C16599 + C16600 - C16601) * C47384) *
                C47479) *
               C1665 +
           (((C15769 * C432 - C15773 * C419 + C47448 * C438 - C15774 * C421) *
                 C116 +
             (C15769 * C449 - C15773 * C435 + C47448 * C451 - C15774 * C439) *
                 C47384) *
                C15771 +
            ((C15769 * C1161 - C15773 * C1152 + C47448 * C2015 -
              C15774 * C2014) *
                 C116 +
             (C15769 * C1179 - C15773 * C1164 + C47448 * C2017 -
              C15774 * C2016) *
                 C47384) *
                C47479) *
               C47464) *
              C47163 * C47455)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C15769 * C124 - C15773 * C117 + C47448 * C125 - C15774 * C118) *
                 C116 +
             (C15769 * C138 - C15773 * C127 + C47448 * C139 - C15774 * C128) *
                 C47384) *
                C15771 +
            ((C15922 - C15923 + C15924 - C15925) * C116 +
             (C15926 - C15927 + C15928 - C15929) * C47384) *
                C47479) *
               C1664 +
           (((C15773 * C414 - C15769 * C424 + C15774 * C415 - C47448 * C425) *
                 C116 +
             (C15773 * C427 - C15769 * C444 + C15774 * C428 - C47448 * C445) *
                 C47384) *
                C15771 +
            ((C16578 - C16579 + C16580 - C16581) * C116 +
             (C16582 - C16583 + C16584 - C16585) * C47384) *
                C47479) *
               C1665 +
           (((C15769 * C430 - C15773 * C417 + C47448 * C431 - C15774 * C418) *
                 C116 +
             (C15769 * C447 - C15773 * C433 + C47448 * C448 - C15774 * C434) *
                 C47384) *
                C15771 +
            ((C16992 - C16993 + C16994 - C16995) * C116 +
             (C16996 - C16997 + C16998 - C16999) * C47384) *
                C47479) *
               C47464) *
              C47500 +
          ((((C15923 - C15922 + C15925 - C15924) * C116 +
             (C15927 - C15926 + C15929 - C15928) * C47384) *
                C15771 +
            ((C15930 - C15931 + C15932 - C15933) * C116 +
             (C15934 - C15935 + C15936 - C15937) * C47384) *
                C47479) *
               C1664 +
           (((C16579 - C16578 + C16581 - C16580) * C116 +
             (C16583 - C16582 + C16585 - C16584) * C47384) *
                C15771 +
            ((C17000 - C17001 + C17002 - C17003) * C116 +
             (C17004 - C17005 + C17006 - C17007) * C47384) *
                C47479) *
               C1665 +
           (((C16993 - C16992 + C16995 - C16994) * C116 +
             (C16997 - C16996 + C16999 - C16998) * C47384) *
                C15771 +
            ((C17008 - C17009 + C17010 - C17011) * C116 +
             (C17012 - C17013 + C17014 - C17015) * C47384) *
                C47479) *
               C47464) *
              C47488 +
          ((((C15931 - C15930 + C15933 - C15932) * C116 +
             (C15935 - C15934 + C15937 - C15936) * C47384) *
                C15771 +
            ((C16830 - C16831 + C16832 - C16833) * C116 +
             (C16834 - C16835 + C16836 - C16837) * C47384) *
                C47479) *
               C1664 +
           (((C17001 - C17000 + C17003 - C17002) * C116 +
             (C17005 - C17004 + C17007 - C17006) * C47384) *
                C15771 +
            ((C17486 - C17487 + C17488 - C17489) * C116 +
             (C17490 - C17491 + C17492 - C17493) * C47384) *
                C47479) *
               C1665 +
           (((C17009 - C17008 + C17011 - C17010) * C116 +
             (C17013 - C17012 + C17015 - C17014) * C47384) *
                C15771 +
            ((C15769 * C5807 - C15773 * C5805 + C47448 * C5808 -
              C15774 * C5806) *
                 C116 +
             (C15769 * C5811 - C15773 * C5809 + C47448 * C5812 -
              C15774 * C5810) *
                 C47384) *
                C47479) *
               C47464) *
              C47461) *
         C47135) /
            (p * q * std::sqrt(p + q));
    d2ee[90] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C15769 * C124 - C15773 * C117 + C47448 * C125 - C15774 * C118) *
                  C116 +
              (C15769 * C138 - C15773 * C127 + C47448 * C139 - C15774 * C128) *
                  C47384) *
                 C15771 +
             ((C15922 - C15923 + C15924 - C15925) * C116 +
              (C15926 - C15927 + C15928 - C15929) * C47384) *
                 C47479) *
                C3094 +
            (((C15773 * C414 - C15769 * C424 + C15774 * C415 - C47448 * C425) *
                  C116 +
              (C15773 * C427 - C15769 * C444 + C15774 * C428 - C47448 * C445) *
                  C47384) *
                 C15771 +
             ((C16578 - C16579 + C16580 - C16581) * C116 +
              (C16582 - C16583 + C16584 - C16585) * C47384) *
                 C47479) *
                C47268) *
               C47429 +
           ((((C15923 - C15922 + C15925 - C15924) * C116 +
              (C15927 - C15926 + C15929 - C15928) * C47384) *
                 C15771 +
             ((C15930 - C15931 + C15932 - C15933) * C116 +
              (C15934 - C15935 + C15936 - C15937) * C47384) *
                 C47479) *
                C3094 +
            (((C16579 - C16578 + C16581 - C16580) * C116 +
              (C16583 - C16582 + C16585 - C16584) * C47384) *
                 C15771 +
             ((C17000 - C17001 + C17002 - C17003) * C116 +
              (C17004 - C17005 + C17006 - C17007) * C47384) *
                 C47479) *
                C47268) *
               C47226) *
              C47140 +
          (((((C15773 * C118 - C15769 * C125 + C15774 * C119 - C47448 * C126) *
                  C116 +
              (C15773 * C128 - C15769 * C139 + C15774 * C129 - C47448 * C140) *
                  C47384) *
                 C15771 +
             ((C15938 - C15939 + C15940 - C15941) * C116 +
              (C15942 - C15943 + C15944 - C15945) * C47384) *
                 C47479) *
                C3094 +
            (((C15769 * C425 - C15773 * C415 + C47448 * C426 - C15774 * C416) *
                  C116 +
              (C15769 * C445 - C15773 * C428 + C47448 * C446 - C15774 * C429) *
                  C47384) *
                 C15771 +
             ((C16586 - C16587 + C16588 - C16589) * C116 +
              (C16590 - C16591 + C16592 - C16593) * C47384) *
                 C47479) *
                C47268) *
               C47429 +
           ((((C15939 - C15938 + C15941 - C15940) * C116 +
              (C15943 - C15942 + C15945 - C15944) * C47384) *
                 C15771 +
             ((C15946 - C15947 + C15948 - C15949) * C116 +
              (C15950 - C15951 + C15952 - C15953) * C47384) *
                 C47479) *
                C3094 +
            (((C16587 - C16586 + C16589 - C16588) * C116 +
              (C16591 - C16590 + C16593 - C16592) * C47384) *
                 C15771 +
             ((C17348 - C17349 + C17350 - C17351) * C116 +
              (C17352 - C17353 + C17354 - C17355) * C47384) *
                 C47479) *
                C47268) *
               C47226) *
              C47149 +
          (((((C15769 * C126 - C15773 * C119 + C47448 * C130 - C15774 * C120) *
                  C116 +
              (C15769 * C140 - C15773 * C129 + C47448 * C141 - C15774 * C131) *
                  C47384) *
                 C15771 +
             ((C15954 - C15955 + C15956 - C15957) * C116 +
              (C15958 - C15959 + C15960 - C15961) * C47384) *
                 C47479) *
                C3094 +
            (((C15773 * C416 - C15769 * C426 + C15774 * C420 - C47448 * C436) *
                  C116 +
              (C15773 * C429 - C15769 * C446 + C15774 * C437 - C47448 * C450) *
                  C47384) *
                 C15771 +
             ((C16594 - C16595 + C16596 - C16597) * C116 +
              (C16598 - C16599 + C16600 - C16601) * C47384) *
                 C47479) *
                C47268) *
               C47429 +
           ((((C15955 - C15954 + C15957 - C15956) * C116 +
              (C15959 - C15958 + C15961 - C15960) * C47384) *
                 C15771 +
             ((C15962 - C15963 + C15964 - C15965) * C116 +
              (C15966 - C15967 + C15968 - C15969) * C47384) *
                 C47479) *
                C3094 +
            (((C16595 - C16594 + C16597 - C16596) * C116 +
              (C16599 - C16598 + C16601 - C16600) * C47384) *
                 C15771 +
             ((C15769 * C1167 - C15773 * C1155 + C47448 * C1441 -
               C15774 * C1440) *
                  C116 +
              (C15769 * C1182 - C15773 * C1170 + C47448 * C1443 -
               C15774 * C1442) *
                  C47384) *
                 C47479) *
                C47268) *
               C47226) *
              C2703)) /
        (p * q * std::sqrt(p + q));
    d2ee[91] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C15769 * C124 - C15773 * C117 + C47448 * C125 - C15774 * C118) *
                  C116 +
              (C15769 * C138 - C15773 * C127 + C47448 * C139 - C15774 * C128) *
                  C47384) *
                 C15771 +
             ((C15922 - C15923 + C15924 - C15925) * C116 +
              (C15926 - C15927 + C15928 - C15929) * C47384) *
                 C47479) *
                C47264 +
            (((C15773 * C414 - C15769 * C424 + C15774 * C415 - C47448 * C425) *
                  C116 +
              (C15773 * C427 - C15769 * C444 + C15774 * C428 - C47448 * C445) *
                  C47384) *
                 C15771 +
             ((C16578 - C16579 + C16580 - C16581) * C116 +
              (C16582 - C16583 + C16584 - C16585) * C47384) *
                 C47479) *
                C47271 +
            (((C15769 * C430 - C15773 * C417 + C47448 * C431 - C15774 * C418) *
                  C116 +
              (C15769 * C447 - C15773 * C433 + C47448 * C448 - C15774 * C434) *
                  C47384) *
                 C15771 +
             ((C16992 - C16993 + C16994 - C16995) * C116 +
              (C16996 - C16997 + C16998 - C16999) * C47384) *
                 C47479) *
                C3602) *
               C47429 +
           ((((C15923 - C15922 + C15925 - C15924) * C116 +
              (C15927 - C15926 + C15929 - C15928) * C47384) *
                 C15771 +
             ((C15930 - C15931 + C15932 - C15933) * C116 +
              (C15934 - C15935 + C15936 - C15937) * C47384) *
                 C47479) *
                C47264 +
            (((C16579 - C16578 + C16581 - C16580) * C116 +
              (C16583 - C16582 + C16585 - C16584) * C47384) *
                 C15771 +
             ((C17000 - C17001 + C17002 - C17003) * C116 +
              (C17004 - C17005 + C17006 - C17007) * C47384) *
                 C47479) *
                C47271 +
            (((C16993 - C16992 + C16995 - C16994) * C116 +
              (C16997 - C16996 + C16999 - C16998) * C47384) *
                 C15771 +
             ((C17008 - C17009 + C17010 - C17011) * C116 +
              (C17012 - C17013 + C17014 - C17015) * C47384) *
                 C47479) *
                C3602) *
               C47226) *
              C2440 +
          (((((C15773 * C118 - C15769 * C125 + C15774 * C119 - C47448 * C126) *
                  C116 +
              (C15773 * C128 - C15769 * C139 + C15774 * C129 - C47448 * C140) *
                  C47384) *
                 C15771 +
             ((C15938 - C15939 + C15940 - C15941) * C116 +
              (C15942 - C15943 + C15944 - C15945) * C47384) *
                 C47479) *
                C47264 +
            (((C15769 * C425 - C15773 * C415 + C47448 * C426 - C15774 * C416) *
                  C116 +
              (C15769 * C445 - C15773 * C428 + C47448 * C446 - C15774 * C429) *
                  C47384) *
                 C15771 +
             ((C16586 - C16587 + C16588 - C16589) * C116 +
              (C16590 - C16591 + C16592 - C16593) * C47384) *
                 C47479) *
                C47271 +
            (((C15773 * C418 - C15769 * C431 + C15774 * C419 - C47448 * C432) *
                  C116 +
              (C15773 * C434 - C15769 * C448 + C15774 * C435 - C47448 * C449) *
                  C47384) *
                 C15771 +
             ((C18062 - C18063 + C18064 - C18065) * C116 +
              (C18066 - C18067 + C18068 - C18069) * C47384) *
                 C47479) *
                C3602) *
               C47429 +
           ((((C15939 - C15938 + C15941 - C15940) * C116 +
              (C15943 - C15942 + C15945 - C15944) * C47384) *
                 C15771 +
             ((C15946 - C15947 + C15948 - C15949) * C116 +
              (C15950 - C15951 + C15952 - C15953) * C47384) *
                 C47479) *
                C47264 +
            (((C16587 - C16586 + C16589 - C16588) * C116 +
              (C16591 - C16590 + C16593 - C16592) * C47384) *
                 C15771 +
             ((C17348 - C17349 + C17350 - C17351) * C116 +
              (C17352 - C17353 + C17354 - C17355) * C47384) *
                 C47479) *
                C47271 +
            (((C18063 - C18062 + C18065 - C18064) * C116 +
              (C18067 - C18066 + C18069 - C18068) * C47384) *
                 C15771 +
             ((C15769 * C1172 - C15773 * C1157 + C47448 * C1173 -
               C15774 * C1158) *
                  C116 +
              (C15769 * C1184 - C15773 * C1175 + C47448 * C1185 -
               C15774 * C1176) *
                  C47384) *
                 C47479) *
                C3602) *
               C47226) *
              C47146)) /
        (p * q * std::sqrt(p + q));
    d2ee[92] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C15769 * C124 - C15773 * C117 + C47448 * C125 - C15774 * C118) *
                  C116 +
              (C15769 * C138 - C15773 * C127 + C47448 * C139 - C15774 * C128) *
                  C47384) *
                 C15771 +
             ((C15922 - C15923 + C15924 - C15925) * C116 +
              (C15926 - C15927 + C15928 - C15929) * C47384) *
                 C47479) *
                C3094 +
            (((C15773 * C414 - C15769 * C424 + C15774 * C415 - C47448 * C425) *
                  C116 +
              (C15773 * C427 - C15769 * C444 + C15774 * C428 - C47448 * C445) *
                  C47384) *
                 C15771 +
             ((C16578 - C16579 + C16580 - C16581) * C116 +
              (C16582 - C16583 + C16584 - C16585) * C47384) *
                 C47479) *
                C47268) *
               C47500 +
           ((((C15923 - C15922 + C15925 - C15924) * C116 +
              (C15927 - C15926 + C15929 - C15928) * C47384) *
                 C15771 +
             ((C15930 - C15931 + C15932 - C15933) * C116 +
              (C15934 - C15935 + C15936 - C15937) * C47384) *
                 C47479) *
                C3094 +
            (((C16579 - C16578 + C16581 - C16580) * C116 +
              (C16583 - C16582 + C16585 - C16584) * C47384) *
                 C15771 +
             ((C17000 - C17001 + C17002 - C17003) * C116 +
              (C17004 - C17005 + C17006 - C17007) * C47384) *
                 C47479) *
                C47268) *
               C47488 +
           ((((C15931 - C15930 + C15933 - C15932) * C116 +
              (C15935 - C15934 + C15937 - C15936) * C47384) *
                 C15771 +
             ((C16830 - C16831 + C16832 - C16833) * C116 +
              (C16834 - C16835 + C16836 - C16837) * C47384) *
                 C47479) *
                C3094 +
            (((C17001 - C17000 + C17003 - C17002) * C116 +
              (C17005 - C17004 + C17007 - C17006) * C47384) *
                 C15771 +
             ((C17486 - C17487 + C17488 - C17489) * C116 +
              (C17490 - C17491 + C17492 - C17493) * C47384) *
                 C47479) *
                C47268) *
               C47461) *
              C2440 +
          (((((C15773 * C118 - C15769 * C125 + C15774 * C119 - C47448 * C126) *
                  C116 +
              (C15773 * C128 - C15769 * C139 + C15774 * C129 - C47448 * C140) *
                  C47384) *
                 C15771 +
             ((C15938 - C15939 + C15940 - C15941) * C116 +
              (C15942 - C15943 + C15944 - C15945) * C47384) *
                 C47479) *
                C3094 +
            (((C15769 * C425 - C15773 * C415 + C47448 * C426 - C15774 * C416) *
                  C116 +
              (C15769 * C445 - C15773 * C428 + C47448 * C446 - C15774 * C429) *
                  C47384) *
                 C15771 +
             ((C16586 - C16587 + C16588 - C16589) * C116 +
              (C16590 - C16591 + C16592 - C16593) * C47384) *
                 C47479) *
                C47268) *
               C47500 +
           ((((C15939 - C15938 + C15941 - C15940) * C116 +
              (C15943 - C15942 + C15945 - C15944) * C47384) *
                 C15771 +
             ((C15946 - C15947 + C15948 - C15949) * C116 +
              (C15950 - C15951 + C15952 - C15953) * C47384) *
                 C47479) *
                C3094 +
            (((C16587 - C16586 + C16589 - C16588) * C116 +
              (C16591 - C16590 + C16593 - C16592) * C47384) *
                 C15771 +
             ((C17348 - C17349 + C17350 - C17351) * C116 +
              (C17352 - C17353 + C17354 - C17355) * C47384) *
                 C47479) *
                C47268) *
               C47488 +
           ((((C15947 - C15946 + C15949 - C15948) * C116 +
              (C15951 - C15950 + C15953 - C15952) * C47384) *
                 C15771 +
             ((C17146 - C17147 + C17148 - C17149) * C116 +
              (C17150 - C17151 + C17152 - C17153) * C47384) *
                 C47479) *
                C3094 +
            (((C17349 - C17348 + C17351 - C17350) * C116 +
              (C17353 - C17352 + C17355 - C17354) * C47384) *
                 C15771 +
             ((C15769 * C1546 - C15773 * C1543 + C47448 * C1547 -
               C15774 * C1544) *
                  C116 +
              (C15769 * C1552 - C15773 * C1549 + C47448 * C1553 -
               C15774 * C1550) *
                  C47384) *
                 C47479) *
                C47268) *
               C47461) *
              C47146)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C15769 * C124 - C15773 * C117 + C47448 * C125 - C15774 * C118) *
                 C116 +
             (C15769 * C138 - C15773 * C127 + C47448 * C139 - C15774 * C128) *
                 C47384) *
                C15771 +
            ((C15922 - C15923 + C15924 - C15925) * C116 +
             (C15926 - C15927 + C15928 - C15929) * C47384) *
                C47479) *
               C3094 +
           (((C15773 * C414 - C15769 * C424 + C15774 * C415 - C47448 * C425) *
                 C116 +
             (C15773 * C427 - C15769 * C444 + C15774 * C428 - C47448 * C445) *
                 C47384) *
                C15771 +
            ((C16578 - C16579 + C16580 - C16581) * C116 +
             (C16582 - C16583 + C16584 - C16585) * C47384) *
                C47479) *
               C47268) *
              C47163 * C47506 +
          ((((C15773 * C118 - C15769 * C125 + C15774 * C119 - C47448 * C126) *
                 C116 +
             (C15773 * C128 - C15769 * C139 + C15774 * C129 - C47448 * C140) *
                 C47384) *
                C15771 +
            ((C15938 - C15939 + C15940 - C15941) * C116 +
             (C15942 - C15943 + C15944 - C15945) * C47384) *
                C47479) *
               C3094 +
           (((C15769 * C425 - C15773 * C415 + C47448 * C426 - C15774 * C416) *
                 C116 +
             (C15769 * C445 - C15773 * C428 + C47448 * C446 - C15774 * C429) *
                 C47384) *
                C15771 +
            ((C16586 - C16587 + C16588 - C16589) * C116 +
             (C16590 - C16591 + C16592 - C16593) * C47384) *
                C47479) *
               C47268) *
              C47163 * C47499 +
          ((((C15769 * C126 - C15773 * C119 + C47448 * C130 - C15774 * C120) *
                 C116 +
             (C15769 * C140 - C15773 * C129 + C47448 * C141 - C15774 * C131) *
                 C47384) *
                C15771 +
            ((C15954 - C15955 + C15956 - C15957) * C116 +
             (C15958 - C15959 + C15960 - C15961) * C47384) *
                C47479) *
               C3094 +
           (((C15773 * C416 - C15769 * C426 + C15774 * C420 - C47448 * C436) *
                 C116 +
             (C15773 * C429 - C15769 * C446 + C15774 * C437 - C47448 * C450) *
                 C47384) *
                C15771 +
            ((C16594 - C16595 + C16596 - C16597) * C116 +
             (C16598 - C16599 + C16600 - C16601) * C47384) *
                C47479) *
               C47268) *
              C47163 * C47486 +
          ((((C15773 * C120 - C15769 * C130 + C15774 * C121 - C47448 * C132) *
                 C116 +
             (C15773 * C131 - C15769 * C141 + C15774 * C133 - C47448 * C142) *
                 C47384) *
                C15771 +
            ((C16246 - C16247 + C16248 - C16249) * C116 +
             (C16250 - C16251 + C16252 - C16253) * C47384) *
                C47479) *
               C3094 +
           (((C15769 * C436 - C15773 * C420 + C47448 * C440 - C15774 * C422) *
                 C116 +
             (C15769 * C450 - C15773 * C437 + C47448 * C452 - C15774 * C441) *
                 C47384) *
                C15771 +
            ((C15769 * C823 - C15773 * C815 + C47448 * C825 - C15774 * C816) *
                 C116 +
             (C15769 * C830 - C15773 * C824 + C47448 * C831 - C15774 * C826) *
                 C47384) *
                C47479) *
               C47268) *
              C47163 * C47465)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C15769 * C124 - C15773 * C117 + C47448 * C125 - C15774 * C118) *
                 C116 +
             (C15769 * C138 - C15773 * C127 + C47448 * C139 - C15774 * C128) *
                 C47384) *
                C15771 +
            ((C15922 - C15923 + C15924 - C15925) * C116 +
             (C15926 - C15927 + C15928 - C15929) * C47384) *
                C47479) *
               C47508 +
           (((C15773 * C414 - C15769 * C424 + C15774 * C415 - C47448 * C425) *
                 C116 +
             (C15773 * C427 - C15769 * C444 + C15774 * C428 - C47448 * C445) *
                 C47384) *
                C15771 +
            ((C16578 - C16579 + C16580 - C16581) * C116 +
             (C16582 - C16583 + C16584 - C16585) * C47384) *
                C47479) *
               C47505 +
           (((C15769 * C430 - C15773 * C417 + C47448 * C431 - C15774 * C418) *
                 C116 +
             (C15769 * C447 - C15773 * C433 + C47448 * C448 - C15774 * C434) *
                 C47384) *
                C15771 +
            ((C16992 - C16993 + C16994 - C16995) * C116 +
             (C16996 - C16997 + C16998 - C16999) * C47384) *
                C47479) *
               C47496 +
           (((C15773 * C1844 - C15769 * C1850 + C15774 * C1845 -
              C47448 * C1851) *
                 C116 +
             (C15773 * C1853 - C15769 * C1862 + C15774 * C1854 -
              C47448 * C1863) *
                 C47384) *
                C15771 +
            ((C18330 - C18331 + C18332 - C18333) * C116 +
             (C18334 - C18335 + C18336 - C18337) * C47384) *
                C47479) *
               C47477) *
              C47163 * C2440 +
          ((((C15773 * C118 - C15769 * C125 + C15774 * C119 - C47448 * C126) *
                 C116 +
             (C15773 * C128 - C15769 * C139 + C15774 * C129 - C47448 * C140) *
                 C47384) *
                C15771 +
            ((C15938 - C15939 + C15940 - C15941) * C116 +
             (C15942 - C15943 + C15944 - C15945) * C47384) *
                C47479) *
               C47508 +
           (((C15769 * C425 - C15773 * C415 + C47448 * C426 - C15774 * C416) *
                 C116 +
             (C15769 * C445 - C15773 * C428 + C47448 * C446 - C15774 * C429) *
                 C47384) *
                C15771 +
            ((C16586 - C16587 + C16588 - C16589) * C116 +
             (C16590 - C16591 + C16592 - C16593) * C47384) *
                C47479) *
               C47505 +
           (((C15773 * C418 - C15769 * C431 + C15774 * C419 - C47448 * C432) *
                 C116 +
             (C15773 * C434 - C15769 * C448 + C15774 * C435 - C47448 * C449) *
                 C47384) *
                C15771 +
            ((C18062 - C18063 + C18064 - C18065) * C116 +
             (C18066 - C18067 + C18068 - C18069) * C47384) *
                C47479) *
               C47496 +
           (((C15769 * C1851 - C15773 * C1845 + C47448 * C1852 -
              C15774 * C1846) *
                 C116 +
             (C15769 * C1863 - C15773 * C1854 + C47448 * C1864 -
              C15774 * C1855) *
                 C47384) *
                C15771 +
            ((C15769 * C2226 - C15773 * C2223 + C47448 * C2227 -
              C15774 * C2224) *
                 C116 +
             (C15769 * C2232 - C15773 * C2229 + C47448 * C2233 -
              C15774 * C2230) *
                 C47384) *
                C47479) *
               C47477) *
              C47163 * C47146)) /
            (p * q * std::sqrt(p + q));
    d2ee[93] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C15769 * C124 - C15773 * C117 + C47448 * C125 - C15774 * C118) *
                 C116 +
             (C15769 * C138 - C15773 * C127 + C47448 * C139 - C15774 * C128) *
                 C47384) *
                C15771 +
            ((C15922 - C15923 + C15924 - C15925) * C116 +
             (C15926 - C15927 + C15928 - C15929) * C47384) *
                C47479) *
               C47264 +
           (((C15773 * C414 - C15769 * C424 + C15774 * C415 - C47448 * C425) *
                 C116 +
             (C15773 * C427 - C15769 * C444 + C15774 * C428 - C47448 * C445) *
                 C47384) *
                C15771 +
            ((C16578 - C16579 + C16580 - C16581) * C116 +
             (C16582 - C16583 + C16584 - C16585) * C47384) *
                C47479) *
               C47271 +
           (((C15769 * C430 - C15773 * C417 + C47448 * C431 - C15774 * C418) *
                 C116 +
             (C15769 * C447 - C15773 * C433 + C47448 * C448 - C15774 * C434) *
                 C47384) *
                C15771 +
            ((C16992 - C16993 + C16994 - C16995) * C116 +
             (C16996 - C16997 + C16998 - C16999) * C47384) *
                C47479) *
               C3602) *
              C47163 * C47140 +
          ((((C15773 * C118 - C15769 * C125 + C15774 * C119 - C47448 * C126) *
                 C116 +
             (C15773 * C128 - C15769 * C139 + C15774 * C129 - C47448 * C140) *
                 C47384) *
                C15771 +
            ((C15938 - C15939 + C15940 - C15941) * C116 +
             (C15942 - C15943 + C15944 - C15945) * C47384) *
                C47479) *
               C47264 +
           (((C15769 * C425 - C15773 * C415 + C47448 * C426 - C15774 * C416) *
                 C116 +
             (C15769 * C445 - C15773 * C428 + C47448 * C446 - C15774 * C429) *
                 C47384) *
                C15771 +
            ((C16586 - C16587 + C16588 - C16589) * C116 +
             (C16590 - C16591 + C16592 - C16593) * C47384) *
                C47479) *
               C47271 +
           (((C15773 * C418 - C15769 * C431 + C15774 * C419 - C47448 * C432) *
                 C116 +
             (C15773 * C434 - C15769 * C448 + C15774 * C435 - C47448 * C449) *
                 C47384) *
                C15771 +
            ((C18062 - C18063 + C18064 - C18065) * C116 +
             (C18066 - C18067 + C18068 - C18069) * C47384) *
                C47479) *
               C3602) *
              C47163 * C47149 +
          ((((C15769 * C126 - C15773 * C119 + C47448 * C130 - C15774 * C120) *
                 C116 +
             (C15769 * C140 - C15773 * C129 + C47448 * C141 - C15774 * C131) *
                 C47384) *
                C15771 +
            ((C15954 - C15955 + C15956 - C15957) * C116 +
             (C15958 - C15959 + C15960 - C15961) * C47384) *
                C47479) *
               C47264 +
           (((C15773 * C416 - C15769 * C426 + C15774 * C420 - C47448 * C436) *
                 C116 +
             (C15773 * C429 - C15769 * C446 + C15774 * C437 - C47448 * C450) *
                 C47384) *
                C15771 +
            ((C16594 - C16595 + C16596 - C16597) * C116 +
             (C16598 - C16599 + C16600 - C16601) * C47384) *
                C47479) *
               C47271 +
           (((C15769 * C432 - C15773 * C419 + C47448 * C438 - C15774 * C421) *
                 C116 +
             (C15769 * C449 - C15773 * C435 + C47448 * C451 - C15774 * C439) *
                 C47384) *
                C15771 +
            ((C15769 * C1161 - C15773 * C1152 + C47448 * C2015 -
              C15774 * C2014) *
                 C116 +
             (C15769 * C1179 - C15773 * C1164 + C47448 * C2017 -
              C15774 * C2016) *
                 C47384) *
                C47479) *
               C3602) *
              C47163 * C2703)) /
        (p * q * std::sqrt(p + q));
    d2ee[94] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C15769 * C124 - C15773 * C117 + C47448 * C125 - C15774 * C118) *
                 C116 +
             (C15769 * C138 - C15773 * C127 + C47448 * C139 - C15774 * C128) *
                 C47384) *
                C15771 +
            ((C15922 - C15923 + C15924 - C15925) * C116 +
             (C15926 - C15927 + C15928 - C15929) * C47384) *
                C47479) *
               C3094 +
           (((C15773 * C414 - C15769 * C424 + C15774 * C415 - C47448 * C425) *
                 C116 +
             (C15773 * C427 - C15769 * C444 + C15774 * C428 - C47448 * C445) *
                 C47384) *
                C15771 +
            ((C16578 - C16579 + C16580 - C16581) * C116 +
             (C16582 - C16583 + C16584 - C16585) * C47384) *
                C47479) *
               C47268) *
              C47163 * C47506 +
          ((((C15773 * C118 - C15769 * C125 + C15774 * C119 - C47448 * C126) *
                 C116 +
             (C15773 * C128 - C15769 * C139 + C15774 * C129 - C47448 * C140) *
                 C47384) *
                C15771 +
            ((C15938 - C15939 + C15940 - C15941) * C116 +
             (C15942 - C15943 + C15944 - C15945) * C47384) *
                C47479) *
               C3094 +
           (((C15769 * C425 - C15773 * C415 + C47448 * C426 - C15774 * C416) *
                 C116 +
             (C15769 * C445 - C15773 * C428 + C47448 * C446 - C15774 * C429) *
                 C47384) *
                C15771 +
            ((C16586 - C16587 + C16588 - C16589) * C116 +
             (C16590 - C16591 + C16592 - C16593) * C47384) *
                C47479) *
               C47268) *
              C47163 * C47499 +
          ((((C15769 * C126 - C15773 * C119 + C47448 * C130 - C15774 * C120) *
                 C116 +
             (C15769 * C140 - C15773 * C129 + C47448 * C141 - C15774 * C131) *
                 C47384) *
                C15771 +
            ((C15954 - C15955 + C15956 - C15957) * C116 +
             (C15958 - C15959 + C15960 - C15961) * C47384) *
                C47479) *
               C3094 +
           (((C15773 * C416 - C15769 * C426 + C15774 * C420 - C47448 * C436) *
                 C116 +
             (C15773 * C429 - C15769 * C446 + C15774 * C437 - C47448 * C450) *
                 C47384) *
                C15771 +
            ((C16594 - C16595 + C16596 - C16597) * C116 +
             (C16598 - C16599 + C16600 - C16601) * C47384) *
                C47479) *
               C47268) *
              C47163 * C47486 +
          ((((C15773 * C120 - C15769 * C130 + C15774 * C121 - C47448 * C132) *
                 C116 +
             (C15773 * C131 - C15769 * C141 + C15774 * C133 - C47448 * C142) *
                 C47384) *
                C15771 +
            ((C16246 - C16247 + C16248 - C16249) * C116 +
             (C16250 - C16251 + C16252 - C16253) * C47384) *
                C47479) *
               C3094 +
           (((C15769 * C436 - C15773 * C420 + C47448 * C440 - C15774 * C422) *
                 C116 +
             (C15769 * C450 - C15773 * C437 + C47448 * C452 - C15774 * C441) *
                 C47384) *
                C15771 +
            ((C15769 * C823 - C15773 * C815 + C47448 * C825 - C15774 * C816) *
                 C116 +
             (C15769 * C830 - C15773 * C824 + C47448 * C831 - C15774 * C826) *
                 C47384) *
                C47479) *
               C47268) *
              C47163 * C47465)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C15769 * C124 - C15773 * C117 + C47448 * C125 - C15774 * C118) *
                  C116 +
              (C15769 * C138 - C15773 * C127 + C47448 * C139 - C15774 * C128) *
                  C47384) *
                 C15771 +
             ((C15922 - C15923 + C15924 - C15925) * C116 +
              (C15926 - C15927 + C15928 - C15929) * C47384) *
                 C47479) *
                C3094 +
            (((C15773 * C414 - C15769 * C424 + C15774 * C415 - C47448 * C425) *
                  C116 +
              (C15773 * C427 - C15769 * C444 + C15774 * C428 - C47448 * C445) *
                  C47384) *
                 C15771 +
             ((C16578 - C16579 + C16580 - C16581) * C116 +
              (C16582 - C16583 + C16584 - C16585) * C47384) *
                 C47479) *
                C47268) *
               C47500 +
           ((((C15923 - C15922 + C15925 - C15924) * C116 +
              (C15927 - C15926 + C15929 - C15928) * C47384) *
                 C15771 +
             ((C15930 - C15931 + C15932 - C15933) * C116 +
              (C15934 - C15935 + C15936 - C15937) * C47384) *
                 C47479) *
                C3094 +
            (((C16579 - C16578 + C16581 - C16580) * C116 +
              (C16583 - C16582 + C16585 - C16584) * C47384) *
                 C15771 +
             ((C17000 - C17001 + C17002 - C17003) * C116 +
              (C17004 - C17005 + C17006 - C17007) * C47384) *
                 C47479) *
                C47268) *
               C47488 +
           ((((C15931 - C15930 + C15933 - C15932) * C116 +
              (C15935 - C15934 + C15937 - C15936) * C47384) *
                 C15771 +
             ((C16830 - C16831 + C16832 - C16833) * C116 +
              (C16834 - C16835 + C16836 - C16837) * C47384) *
                 C47479) *
                C3094 +
            (((C17001 - C17000 + C17003 - C17002) * C116 +
              (C17005 - C17004 + C17007 - C17006) * C47384) *
                 C15771 +
             ((C17486 - C17487 + C17488 - C17489) * C116 +
              (C17490 - C17491 + C17492 - C17493) * C47384) *
                 C47479) *
                C47268) *
               C47461) *
              C2440 +
          (((((C15773 * C118 - C15769 * C125 + C15774 * C119 - C47448 * C126) *
                  C116 +
              (C15773 * C128 - C15769 * C139 + C15774 * C129 - C47448 * C140) *
                  C47384) *
                 C15771 +
             ((C15938 - C15939 + C15940 - C15941) * C116 +
              (C15942 - C15943 + C15944 - C15945) * C47384) *
                 C47479) *
                C3094 +
            (((C15769 * C425 - C15773 * C415 + C47448 * C426 - C15774 * C416) *
                  C116 +
              (C15769 * C445 - C15773 * C428 + C47448 * C446 - C15774 * C429) *
                  C47384) *
                 C15771 +
             ((C16586 - C16587 + C16588 - C16589) * C116 +
              (C16590 - C16591 + C16592 - C16593) * C47384) *
                 C47479) *
                C47268) *
               C47500 +
           ((((C15939 - C15938 + C15941 - C15940) * C116 +
              (C15943 - C15942 + C15945 - C15944) * C47384) *
                 C15771 +
             ((C15946 - C15947 + C15948 - C15949) * C116 +
              (C15950 - C15951 + C15952 - C15953) * C47384) *
                 C47479) *
                C3094 +
            (((C16587 - C16586 + C16589 - C16588) * C116 +
              (C16591 - C16590 + C16593 - C16592) * C47384) *
                 C15771 +
             ((C17348 - C17349 + C17350 - C17351) * C116 +
              (C17352 - C17353 + C17354 - C17355) * C47384) *
                 C47479) *
                C47268) *
               C47488 +
           ((((C15947 - C15946 + C15949 - C15948) * C116 +
              (C15951 - C15950 + C15953 - C15952) * C47384) *
                 C15771 +
             ((C17146 - C17147 + C17148 - C17149) * C116 +
              (C17150 - C17151 + C17152 - C17153) * C47384) *
                 C47479) *
                C3094 +
            (((C17349 - C17348 + C17351 - C17350) * C116 +
              (C17353 - C17352 + C17355 - C17354) * C47384) *
                 C15771 +
             ((C15769 * C1546 - C15773 * C1543 + C47448 * C1547 -
               C15774 * C1544) *
                  C116 +
              (C15769 * C1552 - C15773 * C1549 + C47448 * C1553 -
               C15774 * C1550) *
                  C47384) *
                 C47479) *
                C47268) *
               C47461) *
              C47146)) /
            (p * q * std::sqrt(p + q));
    d2ee[95] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C15769 * C124 - C15773 * C117 + C47448 * C125 - C15774 * C118) *
                 C116 +
             (C15769 * C138 - C15773 * C127 + C47448 * C139 - C15774 * C128) *
                 C47384) *
                C15771 +
            ((C15922 - C15923 + C15924 - C15925) * C116 +
             (C15926 - C15927 + C15928 - C15929) * C47384) *
                C47479) *
               C47181 * C47429 +
           (((C15923 - C15922 + C15925 - C15924) * C116 +
             (C15927 - C15926 + C15929 - C15928) * C47384) *
                C15771 +
            ((C15930 - C15931 + C15932 - C15933) * C116 +
             (C15934 - C15935 + C15936 - C15937) * C47384) *
                C47479) *
               C47181 * C47226) *
              C554 +
          ((((C15773 * C118 - C15769 * C125 + C15774 * C119 - C47448 * C126) *
                 C116 +
             (C15773 * C128 - C15769 * C139 + C15774 * C129 - C47448 * C140) *
                 C47384) *
                C15771 +
            ((C15938 - C15939 + C15940 - C15941) * C116 +
             (C15942 - C15943 + C15944 - C15945) * C47384) *
                C47479) *
               C47181 * C47429 +
           (((C15939 - C15938 + C15941 - C15940) * C116 +
             (C15943 - C15942 + C15945 - C15944) * C47384) *
                C15771 +
            ((C15946 - C15947 + C15948 - C15949) * C116 +
             (C15950 - C15951 + C15952 - C15953) * C47384) *
                C47479) *
               C47181 * C47226) *
              C555 +
          ((((C15769 * C126 - C15773 * C119 + C47448 * C130 - C15774 * C120) *
                 C116 +
             (C15769 * C140 - C15773 * C129 + C47448 * C141 - C15774 * C131) *
                 C47384) *
                C15771 +
            ((C15954 - C15955 + C15956 - C15957) * C116 +
             (C15958 - C15959 + C15960 - C15961) * C47384) *
                C47479) *
               C47181 * C47429 +
           (((C15955 - C15954 + C15957 - C15956) * C116 +
             (C15959 - C15958 + C15961 - C15960) * C47384) *
                C15771 +
            ((C15962 - C15963 + C15964 - C15965) * C116 +
             (C15966 - C15967 + C15968 - C15969) * C47384) *
                C47479) *
               C47181 * C47226) *
              C556 +
          ((((C15773 * C120 - C15769 * C130 + C15774 * C121 - C47448 * C132) *
                 C116 +
             (C15773 * C131 - C15769 * C141 + C15774 * C133 - C47448 * C142) *
                 C47384) *
                C15771 +
            ((C16246 - C16247 + C16248 - C16249) * C116 +
             (C16250 - C16251 + C16252 - C16253) * C47384) *
                C47479) *
               C47181 * C47429 +
           (((C16247 - C16246 + C16249 - C16248) * C116 +
             (C16251 - C16250 + C16253 - C16252) * C47384) *
                C15771 +
            ((C15769 * C285 - C15773 * C268 + C47448 * C289 - C15774 * C270) *
                 C116 +
             (C15769 * C298 - C15773 * C286 + C47448 * C300 - C15774 * C290) *
                 C47384) *
                C47479) *
               C47181 * C47226) *
              C47465)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C15769 * C124 - C15773 * C117 + C47448 * C125 - C15774 * C118) *
                 C116 +
             (C15769 * C138 - C15773 * C127 + C47448 * C139 - C15774 * C128) *
                 C47384) *
                C15771 +
            ((C15922 - C15923 + C15924 - C15925) * C116 +
             (C15926 - C15927 + C15928 - C15929) * C47384) *
                C47479) *
               C47181 * C1284 +
           (((C15923 - C15922 + C15925 - C15924) * C116 +
             (C15927 - C15926 + C15929 - C15928) * C47384) *
                C15771 +
            ((C15930 - C15931 + C15932 - C15933) * C116 +
             (C15934 - C15935 + C15936 - C15937) * C47384) *
                C47479) *
               C47181 * C1285 +
           (((C15931 - C15930 + C15933 - C15932) * C116 +
             (C15935 - C15934 + C15937 - C15936) * C47384) *
                C15771 +
            ((C16830 - C16831 + C16832 - C16833) * C116 +
             (C16834 - C16835 + C16836 - C16837) * C47384) *
                C47479) *
               C47181 * C1286 +
           (((C16831 - C16830 + C16833 - C16832) * C116 +
             (C16835 - C16834 + C16837 - C16836) * C47384) *
                C15771 +
            ((C16838 - C16839 + C16840 - C16841) * C116 +
             (C16842 - C16843 + C16844 - C16845) * C47384) *
                C47479) *
               C47181 * C47471) *
              C47415 +
          ((((C15773 * C118 - C15769 * C125 + C15774 * C119 - C47448 * C126) *
                 C116 +
             (C15773 * C128 - C15769 * C139 + C15774 * C129 - C47448 * C140) *
                 C47384) *
                C15771 +
            ((C15938 - C15939 + C15940 - C15941) * C116 +
             (C15942 - C15943 + C15944 - C15945) * C47384) *
                C47479) *
               C47181 * C1284 +
           (((C15939 - C15938 + C15941 - C15940) * C116 +
             (C15943 - C15942 + C15945 - C15944) * C47384) *
                C15771 +
            ((C15946 - C15947 + C15948 - C15949) * C116 +
             (C15950 - C15951 + C15952 - C15953) * C47384) *
                C47479) *
               C47181 * C1285 +
           (((C15947 - C15946 + C15949 - C15948) * C116 +
             (C15951 - C15950 + C15953 - C15952) * C47384) *
                C15771 +
            ((C17146 - C17147 + C17148 - C17149) * C116 +
             (C17150 - C17151 + C17152 - C17153) * C47384) *
                C47479) *
               C47181 * C1286 +
           (((C17147 - C17146 + C17149 - C17148) * C116 +
             (C17151 - C17150 + C17153 - C17152) * C47384) *
                C15771 +
            ((C15769 * C1029 - C15773 * C1020 + C47448 * C1030 -
              C15774 * C1021) *
                 C116 +
             (C15769 * C1038 - C15773 * C1032 + C47448 * C1039 -
              C15774 * C1033) *
                 C47384) *
                C47479) *
               C47181 * C47471) *
              C47146)) /
            (p * q * std::sqrt(p + q));
    d2ee[96] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C15769 * C124 - C15773 * C117 + C47448 * C125 - C15774 * C118) *
                  C116 +
              (C15769 * C138 - C15773 * C127 + C47448 * C139 - C15774 * C128) *
                  C47384) *
                 C15771 +
             ((C15922 - C15923 + C15924 - C15925) * C116 +
              (C15926 - C15927 + C15928 - C15929) * C47384) *
                 C47479) *
                C47430 +
            (((C15773 * C414 - C15769 * C424 + C15774 * C415 - C47448 * C425) *
                  C116 +
              (C15773 * C427 - C15769 * C444 + C15774 * C428 - C47448 * C445) *
                  C47384) *
                 C15771 +
             ((C16578 - C16579 + C16580 - C16581) * C116 +
              (C16582 - C16583 + C16584 - C16585) * C47384) *
                 C47479) *
                C47268) *
               C47429 +
           ((((C15923 - C15922 + C15925 - C15924) * C116 +
              (C15927 - C15926 + C15929 - C15928) * C47384) *
                 C15771 +
             ((C15930 - C15931 + C15932 - C15933) * C116 +
              (C15934 - C15935 + C15936 - C15937) * C47384) *
                 C47479) *
                C47430 +
            (((C16579 - C16578 + C16581 - C16580) * C116 +
              (C16583 - C16582 + C16585 - C16584) * C47384) *
                 C15771 +
             ((C15769 * C1165 - C15773 * C1153 + C47448 * C1166 -
               C15774 * C1154) *
                  C116 +
              (C15769 * C1180 - C15773 * C1168 + C47448 * C1181 -
               C15774 * C1169) *
                  C47384) *
                 C47479) *
                C47268) *
               C47226) *
              C258 +
          (((((C15773 * C118 - C15769 * C125 + C15774 * C119 - C47448 * C126) *
                  C116 +
              (C15773 * C128 - C15769 * C139 + C15774 * C129 - C47448 * C140) *
                  C47384) *
                 C15771 +
             ((C15938 - C15939 + C15940 - C15941) * C116 +
              (C15942 - C15943 + C15944 - C15945) * C47384) *
                 C47479) *
                C47430 +
            (((C15769 * C425 - C15773 * C415 + C47448 * C426 - C15774 * C416) *
                  C116 +
              (C15769 * C445 - C15773 * C428 + C47448 * C446 - C15774 * C429) *
                  C47384) *
                 C15771 +
             ((C16586 - C16587 + C16588 - C16589) * C116 +
              (C16590 - C16591 + C16592 - C16593) * C47384) *
                 C47479) *
                C47268) *
               C47429 +
           ((((C15939 - C15938 + C15941 - C15940) * C116 +
              (C15943 - C15942 + C15945 - C15944) * C47384) *
                 C15771 +
             ((C15946 - C15947 + C15948 - C15949) * C116 +
              (C15950 - C15951 + C15952 - C15953) * C47384) *
                 C47479) *
                C47430 +
            (((C16587 - C16586 + C16589 - C16588) * C116 +
              (C16591 - C16590 + C16593 - C16592) * C47384) *
                 C15771 +
             ((C15773 * C1154 - C15769 * C1166 + C15774 * C1155 -
               C47448 * C1167) *
                  C116 +
              (C15773 * C1169 - C15769 * C1181 + C15774 * C1170 -
               C47448 * C1182) *
                  C47384) *
                 C47479) *
                C47268) *
               C47226) *
              C259 +
          (((((C15769 * C126 - C15773 * C119 + C47448 * C130 - C15774 * C120) *
                  C116 +
              (C15769 * C140 - C15773 * C129 + C47448 * C141 - C15774 * C131) *
                  C47384) *
                 C15771 +
             ((C15954 - C15955 + C15956 - C15957) * C116 +
              (C15958 - C15959 + C15960 - C15961) * C47384) *
                 C47479) *
                C47430 +
            (((C15773 * C416 - C15769 * C426 + C15774 * C420 - C47448 * C436) *
                  C116 +
              (C15773 * C429 - C15769 * C446 + C15774 * C437 - C47448 * C450) *
                  C47384) *
                 C15771 +
             ((C16594 - C16595 + C16596 - C16597) * C116 +
              (C16598 - C16599 + C16600 - C16601) * C47384) *
                 C47479) *
                C47268) *
               C47429 +
           ((((C15955 - C15954 + C15957 - C15956) * C116 +
              (C15959 - C15958 + C15961 - C15960) * C47384) *
                 C15771 +
             ((C15962 - C15963 + C15964 - C15965) * C116 +
              (C15966 - C15967 + C15968 - C15969) * C47384) *
                 C47479) *
                C47430 +
            (((C16595 - C16594 + C16597 - C16596) * C116 +
              (C16599 - C16598 + C16601 - C16600) * C47384) *
                 C15771 +
             ((C15769 * C1167 - C15773 * C1155 + C47448 * C1441 -
               C15774 * C1440) *
                  C116 +
              (C15769 * C1182 - C15773 * C1170 + C47448 * C1443 -
               C15774 * C1442) *
                  C47384) *
                 C47479) *
                C47268) *
               C47226) *
              C47455)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C15769 * C124 - C15773 * C117 + C47448 * C125 - C15774 * C118) *
                 C116 +
             (C15769 * C138 - C15773 * C127 + C47448 * C139 - C15774 * C128) *
                 C47384) *
                C15771 +
            ((C15922 - C15923 + C15924 - C15925) * C116 +
             (C15926 - C15927 + C15928 - C15929) * C47384) *
                C47479) *
               C47430 +
           (((C15773 * C414 - C15769 * C424 + C15774 * C415 - C47448 * C425) *
                 C116 +
             (C15773 * C427 - C15769 * C444 + C15774 * C428 - C47448 * C445) *
                 C47384) *
                C15771 +
            ((C16578 - C16579 + C16580 - C16581) * C116 +
             (C16582 - C16583 + C16584 - C16585) * C47384) *
                C47479) *
               C47268) *
              C1284 +
          ((((C15923 - C15922 + C15925 - C15924) * C116 +
             (C15927 - C15926 + C15929 - C15928) * C47384) *
                C15771 +
            ((C15930 - C15931 + C15932 - C15933) * C116 +
             (C15934 - C15935 + C15936 - C15937) * C47384) *
                C47479) *
               C47430 +
           (((C16579 - C16578 + C16581 - C16580) * C116 +
             (C16583 - C16582 + C16585 - C16584) * C47384) *
                C15771 +
            ((C17000 - C17001 + C17002 - C17003) * C116 +
             (C17004 - C17005 + C17006 - C17007) * C47384) *
                C47479) *
               C47268) *
              C1285 +
          ((((C15931 - C15930 + C15933 - C15932) * C116 +
             (C15935 - C15934 + C15937 - C15936) * C47384) *
                C15771 +
            ((C16830 - C16831 + C16832 - C16833) * C116 +
             (C16834 - C16835 + C16836 - C16837) * C47384) *
                C47479) *
               C47430 +
           (((C17001 - C17000 + C17003 - C17002) * C116 +
             (C17005 - C17004 + C17007 - C17006) * C47384) *
                C15771 +
            ((C17486 - C17487 + C17488 - C17489) * C116 +
             (C17490 - C17491 + C17492 - C17493) * C47384) *
                C47479) *
               C47268) *
              C1286 +
          ((((C16831 - C16830 + C16833 - C16832) * C116 +
             (C16835 - C16834 + C16837 - C16836) * C47384) *
                C15771 +
            ((C16838 - C16839 + C16840 - C16841) * C116 +
             (C16842 - C16843 + C16844 - C16845) * C47384) *
                C47479) *
               C47430 +
           (((C17487 - C17486 + C17489 - C17488) * C116 +
             (C17491 - C17490 + C17493 - C17492) * C47384) *
                C15771 +
            ((C15769 * C6309 - C15773 * C6307 + C47448 * C6310 -
              C15774 * C6308) *
                 C116 +
             (C15769 * C6313 - C15773 * C6311 + C47448 * C6314 -
              C15774 * C6312) *
                 C47384) *
                C47479) *
               C47268) *
              C47471) *
         C47135) /
            (p * q * std::sqrt(p + q));
    d2ee[97] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C15769 * C124 - C15773 * C117 + C47448 * C125 - C15774 * C118) *
                 C116 +
             (C15769 * C138 - C15773 * C127 + C47448 * C139 - C15774 * C128) *
                 C47384) *
                C15771 +
            ((C15922 - C15923 + C15924 - C15925) * C116 +
             (C15926 - C15927 + C15928 - C15929) * C47384) *
                C47479) *
               C47181 * C47500 +
           (((C15923 - C15922 + C15925 - C15924) * C116 +
             (C15927 - C15926 + C15929 - C15928) * C47384) *
                C15771 +
            ((C15930 - C15931 + C15932 - C15933) * C116 +
             (C15934 - C15935 + C15936 - C15937) * C47384) *
                C47479) *
               C47181 * C47488 +
           (((C15931 - C15930 + C15933 - C15932) * C116 +
             (C15935 - C15934 + C15937 - C15936) * C47384) *
                C15771 +
            ((C15769 * C1022 - C15773 * C1016 + C47448 * C1023 -
              C15774 * C1017) *
                 C116 +
             (C15769 * C1034 - C15773 * C1025 + C47448 * C1035 -
              C15774 * C1026) *
                 C47384) *
                C47479) *
               C47181 * C47461) *
              C258 +
          ((((C15773 * C118 - C15769 * C125 + C15774 * C119 - C47448 * C126) *
                 C116 +
             (C15773 * C128 - C15769 * C139 + C15774 * C129 - C47448 * C140) *
                 C47384) *
                C15771 +
            ((C15938 - C15939 + C15940 - C15941) * C116 +
             (C15942 - C15943 + C15944 - C15945) * C47384) *
                C47479) *
               C47181 * C47500 +
           (((C15939 - C15938 + C15941 - C15940) * C116 +
             (C15943 - C15942 + C15945 - C15944) * C47384) *
                C15771 +
            ((C15946 - C15947 + C15948 - C15949) * C116 +
             (C15950 - C15951 + C15952 - C15953) * C47384) *
                C47479) *
               C47181 * C47488 +
           (((C15947 - C15946 + C15949 - C15948) * C116 +
             (C15951 - C15950 + C15953 - C15952) * C47384) *
                C15771 +
            ((C15773 * C1017 - C15769 * C1023 + C15774 * C1018 -
              C47448 * C1024) *
                 C116 +
             (C15773 * C1026 - C15769 * C1035 + C15774 * C1027 -
              C47448 * C1036) *
                 C47384) *
                C47479) *
               C47181 * C47461) *
              C259 +
          ((((C15769 * C126 - C15773 * C119 + C47448 * C130 - C15774 * C120) *
                 C116 +
             (C15769 * C140 - C15773 * C129 + C47448 * C141 - C15774 * C131) *
                 C47384) *
                C15771 +
            ((C15954 - C15955 + C15956 - C15957) * C116 +
             (C15958 - C15959 + C15960 - C15961) * C47384) *
                C47479) *
               C47181 * C47500 +
           (((C15955 - C15954 + C15957 - C15956) * C116 +
             (C15959 - C15958 + C15961 - C15960) * C47384) *
                C15771 +
            ((C15962 - C15963 + C15964 - C15965) * C116 +
             (C15966 - C15967 + C15968 - C15969) * C47384) *
                C47479) *
               C47181 * C47488 +
           (((C15963 - C15962 + C15965 - C15964) * C116 +
             (C15967 - C15966 + C15969 - C15968) * C47384) *
                C15771 +
            ((C15769 * C1024 - C15773 * C1018 + C47448 * C1291 -
              C15774 * C1290) *
                 C116 +
             (C15769 * C1036 - C15773 * C1027 + C47448 * C1293 -
              C15774 * C1292) *
                 C47384) *
                C47479) *
               C47181 * C47461) *
              C47455)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C15769 * C124 - C15773 * C117 + C47448 * C125 - C15774 * C118) *
                C116 +
            (C15769 * C138 - C15773 * C127 + C47448 * C139 - C15774 * C128) *
                C47384) *
               C15771 +
           ((C15769 * C271 - C15773 * C261 + C47448 * C272 - C15774 * C262) *
                C116 +
            (C15769 * C291 - C15773 * C274 + C47448 * C292 - C15774 * C275) *
                C47384) *
               C47479) *
              C47181 * C47163 * C108 +
          (((C15773 * C118 - C15769 * C125 + C15774 * C119 - C47448 * C126) *
                C116 +
            (C15773 * C128 - C15769 * C139 + C15774 * C129 - C47448 * C140) *
                C47384) *
               C15771 +
           ((C15773 * C262 - C15769 * C272 + C15774 * C263 - C47448 * C273) *
                C116 +
            (C15773 * C275 - C15769 * C292 + C15774 * C276 - C47448 * C293) *
                C47384) *
               C47479) *
              C47181 * C47163 * C109 +
          (((C15769 * C126 - C15773 * C119 + C47448 * C130 - C15774 * C120) *
                C116 +
            (C15769 * C140 - C15773 * C129 + C47448 * C141 - C15774 * C131) *
                C47384) *
               C15771 +
           ((C15769 * C273 - C15773 * C263 + C47448 * C283 - C15774 * C267) *
                C116 +
            (C15769 * C293 - C15773 * C276 + C47448 * C297 - C15774 * C284) *
                C47384) *
               C47479) *
              C47181 * C47163 * C110 +
          (((C15773 * C120 - C15769 * C130 + C15774 * C121 - C47448 * C132) *
                C116 +
            (C15773 * C131 - C15769 * C141 + C15774 * C133 - C47448 * C142) *
                C47384) *
               C15771 +
           ((C15773 * C267 - C15769 * C283 + C15774 * C269 - C47448 * C287) *
                C116 +
            (C15773 * C284 - C15769 * C297 + C15774 * C288 - C47448 * C299) *
                C47384) *
               C47479) *
              C47181 * C47163 * C111 +
          (((C15769 * C132 - C15773 * C121 + C47448 * C134 - C15774 * C122) *
                C116 +
            (C15769 * C142 - C15773 * C133 + C47448 * C143 - C15774 * C135) *
                C47384) *
               C15771 +
           ((C15769 * C287 - C15773 * C269 + C47448 * C559 - C15774 * C558) *
                C116 +
            (C15769 * C299 - C15773 * C288 + C47448 * C561 - C15774 * C560) *
                C47384) *
               C47479) *
              C47181 * C47163 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C15769 * C124 - C15773 * C117 + C47448 * C125 - C15774 * C118) *
                 C116 +
             (C15769 * C138 - C15773 * C127 + C47448 * C139 - C15774 * C128) *
                 C47384) *
                C15771 +
            ((C15922 - C15923 + C15924 - C15925) * C116 +
             (C15926 - C15927 + C15928 - C15929) * C47384) *
                C47479) *
               C47501 +
           (((C15773 * C414 - C15769 * C424 + C15774 * C415 - C47448 * C425) *
                 C116 +
             (C15773 * C427 - C15769 * C444 + C15774 * C428 - C47448 * C445) *
                 C47384) *
                C15771 +
            ((C15773 * C812 - C15769 * C817 + C15774 * C813 - C47448 * C818) *
                 C116 +
             (C15773 * C820 - C15769 * C827 + C15774 * C821 - C47448 * C828) *
                 C47384) *
                C47479) *
               C47490 +
           (((C15769 * C430 - C15773 * C417 + C47448 * C431 - C15774 * C418) *
                 C116 +
             (C15769 * C447 - C15773 * C433 + C47448 * C448 - C15774 * C434) *
                 C47384) *
                C15771 +
            ((C15769 * C1159 - C15773 * C1150 + C47448 * C1160 -
              C15774 * C1151) *
                 C116 +
             (C15769 * C1177 - C15773 * C1162 + C47448 * C1178 -
              C15774 * C1163) *
                 C47384) *
                C47479) *
               C47464) *
              C47163 * C258 +
          ((((C15773 * C118 - C15769 * C125 + C15774 * C119 - C47448 * C126) *
                 C116 +
             (C15773 * C128 - C15769 * C139 + C15774 * C129 - C47448 * C140) *
                 C47384) *
                C15771 +
            ((C15938 - C15939 + C15940 - C15941) * C116 +
             (C15942 - C15943 + C15944 - C15945) * C47384) *
                C47479) *
               C47501 +
           (((C15769 * C425 - C15773 * C415 + C47448 * C426 - C15774 * C416) *
                 C116 +
             (C15769 * C445 - C15773 * C428 + C47448 * C446 - C15774 * C429) *
                 C47384) *
                C15771 +
            ((C15769 * C818 - C15773 * C813 + C47448 * C819 - C15774 * C814) *
                 C116 +
             (C15769 * C828 - C15773 * C821 + C47448 * C829 - C15774 * C822) *
                 C47384) *
                C47479) *
               C47490 +
           (((C15773 * C418 - C15769 * C431 + C15774 * C419 - C47448 * C432) *
                 C116 +
             (C15773 * C434 - C15769 * C448 + C15774 * C435 - C47448 * C449) *
                 C47384) *
                C15771 +
            ((C15773 * C1151 - C15769 * C1160 + C15774 * C1152 -
              C47448 * C1161) *
                 C116 +
             (C15773 * C1163 - C15769 * C1178 + C15774 * C1164 -
              C47448 * C1179) *
                 C47384) *
                C47479) *
               C47464) *
              C47163 * C259 +
          ((((C15769 * C126 - C15773 * C119 + C47448 * C130 - C15774 * C120) *
                 C116 +
             (C15769 * C140 - C15773 * C129 + C47448 * C141 - C15774 * C131) *
                 C47384) *
                C15771 +
            ((C15954 - C15955 + C15956 - C15957) * C116 +
             (C15958 - C15959 + C15960 - C15961) * C47384) *
                C47479) *
               C47501 +
           (((C15773 * C416 - C15769 * C426 + C15774 * C420 - C47448 * C436) *
                 C116 +
             (C15773 * C429 - C15769 * C446 + C15774 * C437 - C47448 * C450) *
                 C47384) *
                C15771 +
            ((C15773 * C814 - C15769 * C819 + C15774 * C815 - C47448 * C823) *
                 C116 +
             (C15773 * C822 - C15769 * C829 + C15774 * C824 - C47448 * C830) *
                 C47384) *
                C47479) *
               C47490 +
           (((C15769 * C432 - C15773 * C419 + C47448 * C438 - C15774 * C421) *
                 C116 +
             (C15769 * C449 - C15773 * C435 + C47448 * C451 - C15774 * C439) *
                 C47384) *
                C15771 +
            ((C15769 * C1161 - C15773 * C1152 + C47448 * C2015 -
              C15774 * C2014) *
                 C116 +
             (C15769 * C1179 - C15773 * C1164 + C47448 * C2017 -
              C15774 * C2016) *
                 C47384) *
                C47479) *
               C47464) *
              C47163 * C47455)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C15769 * C124 - C15773 * C117 + C47448 * C125 - C15774 * C118) *
                 C116 +
             (C15769 * C138 - C15773 * C127 + C47448 * C139 - C15774 * C128) *
                 C47384) *
                C15771 +
            ((C15922 - C15923 + C15924 - C15925) * C116 +
             (C15926 - C15927 + C15928 - C15929) * C47384) *
                C47479) *
               C47181 * C942 +
           (((C15923 - C15922 + C15925 - C15924) * C116 +
             (C15927 - C15926 + C15929 - C15928) * C47384) *
                C15771 +
            ((C15930 - C15931 + C15932 - C15933) * C116 +
             (C15934 - C15935 + C15936 - C15937) * C47384) *
                C47479) *
               C47181 * C943 +
           (((C15931 - C15930 + C15933 - C15932) * C116 +
             (C15935 - C15934 + C15937 - C15936) * C47384) *
                C15771 +
            ((C15769 * C1022 - C15773 * C1016 + C47448 * C1023 -
              C15774 * C1017) *
                 C116 +
             (C15769 * C1034 - C15773 * C1025 + C47448 * C1035 -
              C15774 * C1026) *
                 C47384) *
                C47479) *
               C47181 * C47461) *
              C47497 +
          ((((C15773 * C118 - C15769 * C125 + C15774 * C119 - C47448 * C126) *
                 C116 +
             (C15773 * C128 - C15769 * C139 + C15774 * C129 - C47448 * C140) *
                 C47384) *
                C15771 +
            ((C15938 - C15939 + C15940 - C15941) * C116 +
             (C15942 - C15943 + C15944 - C15945) * C47384) *
                C47479) *
               C47181 * C942 +
           (((C15939 - C15938 + C15941 - C15940) * C116 +
             (C15943 - C15942 + C15945 - C15944) * C47384) *
                C15771 +
            ((C15946 - C15947 + C15948 - C15949) * C116 +
             (C15950 - C15951 + C15952 - C15953) * C47384) *
                C47479) *
               C47181 * C943 +
           (((C15947 - C15946 + C15949 - C15948) * C116 +
             (C15951 - C15950 + C15953 - C15952) * C47384) *
                C15771 +
            ((C15773 * C1017 - C15769 * C1023 + C15774 * C1018 -
              C47448 * C1024) *
                 C116 +
             (C15773 * C1026 - C15769 * C1035 + C15774 * C1027 -
              C47448 * C1036) *
                 C47384) *
                C47479) *
               C47181 * C47461) *
              C47484 +
          ((((C15769 * C126 - C15773 * C119 + C47448 * C130 - C15774 * C120) *
                 C116 +
             (C15769 * C140 - C15773 * C129 + C47448 * C141 - C15774 * C131) *
                 C47384) *
                C15771 +
            ((C15954 - C15955 + C15956 - C15957) * C116 +
             (C15958 - C15959 + C15960 - C15961) * C47384) *
                C47479) *
               C47181 * C942 +
           (((C15955 - C15954 + C15957 - C15956) * C116 +
             (C15959 - C15958 + C15961 - C15960) * C47384) *
                C15771 +
            ((C15962 - C15963 + C15964 - C15965) * C116 +
             (C15966 - C15967 + C15968 - C15969) * C47384) *
                C47479) *
               C47181 * C943 +
           (((C15963 - C15962 + C15965 - C15964) * C116 +
             (C15967 - C15966 + C15969 - C15968) * C47384) *
                C15771 +
            ((C15769 * C1024 - C15773 * C1018 + C47448 * C1291 -
              C15774 * C1290) *
                 C116 +
             (C15769 * C1036 - C15773 * C1027 + C47448 * C1293 -
              C15774 * C1292) *
                 C47384) *
                C47479) *
               C47181 * C47461) *
              C47455)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C15769 * C124 - C15773 * C117 + C47448 * C125 - C15774 * C118) *
                C116 +
            (C15769 * C138 - C15773 * C127 + C47448 * C139 - C15774 * C128) *
                C47384) *
               C15771 +
           ((C15922 - C15923 + C15924 - C15925) * C116 +
            (C15926 - C15927 + C15928 - C15929) * C47384) *
               C47479) *
              C47181 * C1010 +
          (((C15923 - C15922 + C15925 - C15924) * C116 +
            (C15927 - C15926 + C15929 - C15928) * C47384) *
               C15771 +
           ((C15930 - C15931 + C15932 - C15933) * C116 +
            (C15934 - C15935 + C15936 - C15937) * C47384) *
               C47479) *
              C47181 * C1011 +
          (((C15931 - C15930 + C15933 - C15932) * C116 +
            (C15935 - C15934 + C15937 - C15936) * C47384) *
               C15771 +
           ((C16830 - C16831 + C16832 - C16833) * C116 +
            (C16834 - C16835 + C16836 - C16837) * C47384) *
               C47479) *
              C47181 * C1012 +
          (((C16831 - C16830 + C16833 - C16832) * C116 +
            (C16835 - C16834 + C16837 - C16836) * C47384) *
               C15771 +
           ((C16838 - C16839 + C16840 - C16841) * C116 +
            (C16842 - C16843 + C16844 - C16845) * C47384) *
               C47479) *
              C47181 * C1013 +
          (((C16839 - C16838 + C16841 - C16840) * C116 +
            (C16843 - C16842 + C16845 - C16844) * C47384) *
               C15771 +
           ((C15769 * C5637 - C15773 * C5635 + C47448 * C5638 -
             C15774 * C5636) *
                C116 +
            (C15769 * C5641 - C15773 * C5639 + C47448 * C5642 -
             C15774 * C5640) *
                C47384) *
               C47479) *
              C47181 * C1014) *
         C47135) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C15769 * C124 - C15773 * C117 + C47448 * C125 - C15774 * C118) *
                 C116 +
             (C15769 * C138 - C15773 * C127 + C47448 * C139 - C15774 * C128) *
                 C47384) *
                C15771 +
            ((C15922 - C15923 + C15924 - C15925) * C116 +
             (C15926 - C15927 + C15928 - C15929) * C47384) *
                C47479) *
               C47501 +
           (((C15773 * C414 - C15769 * C424 + C15774 * C415 - C47448 * C425) *
                 C116 +
             (C15773 * C427 - C15769 * C444 + C15774 * C428 - C47448 * C445) *
                 C47384) *
                C15771 +
            ((C16578 - C16579 + C16580 - C16581) * C116 +
             (C16582 - C16583 + C16584 - C16585) * C47384) *
                C47479) *
               C47490 +
           (((C15769 * C430 - C15773 * C417 + C47448 * C431 - C15774 * C418) *
                 C116 +
             (C15769 * C447 - C15773 * C433 + C47448 * C448 - C15774 * C434) *
                 C47384) *
                C15771 +
            ((C16992 - C16993 + C16994 - C16995) * C116 +
             (C16996 - C16997 + C16998 - C16999) * C47384) *
                C47479) *
               C47464) *
              C942 +
          ((((C15923 - C15922 + C15925 - C15924) * C116 +
             (C15927 - C15926 + C15929 - C15928) * C47384) *
                C15771 +
            ((C15930 - C15931 + C15932 - C15933) * C116 +
             (C15934 - C15935 + C15936 - C15937) * C47384) *
                C47479) *
               C47501 +
           (((C16579 - C16578 + C16581 - C16580) * C116 +
             (C16583 - C16582 + C16585 - C16584) * C47384) *
                C15771 +
            ((C17000 - C17001 + C17002 - C17003) * C116 +
             (C17004 - C17005 + C17006 - C17007) * C47384) *
                C47479) *
               C47490 +
           (((C16993 - C16992 + C16995 - C16994) * C116 +
             (C16997 - C16996 + C16999 - C16998) * C47384) *
                C15771 +
            ((C17008 - C17009 + C17010 - C17011) * C116 +
             (C17012 - C17013 + C17014 - C17015) * C47384) *
                C47479) *
               C47464) *
              C943 +
          ((((C15931 - C15930 + C15933 - C15932) * C116 +
             (C15935 - C15934 + C15937 - C15936) * C47384) *
                C15771 +
            ((C16830 - C16831 + C16832 - C16833) * C116 +
             (C16834 - C16835 + C16836 - C16837) * C47384) *
                C47479) *
               C47501 +
           (((C17001 - C17000 + C17003 - C17002) * C116 +
             (C17005 - C17004 + C17007 - C17006) * C47384) *
                C15771 +
            ((C15773 * C1542 - C15769 * C1545 + C15774 * C1543 -
              C47448 * C1546) *
                 C116 +
             (C15773 * C1548 - C15769 * C1551 + C15774 * C1549 -
              C47448 * C1552) *
                 C47384) *
                C47479) *
               C47490 +
           (((C17009 - C17008 + C17011 - C17010) * C116 +
             (C17013 - C17012 + C17015 - C17014) * C47384) *
                C15771 +
            ((C15769 * C5807 - C15773 * C5805 + C47448 * C5808 -
              C15774 * C5806) *
                 C116 +
             (C15769 * C5811 - C15773 * C5809 + C47448 * C5812 -
              C15774 * C5810) *
                 C47384) *
                C47479) *
               C47464) *
              C47461) *
         C47135) /
            (p * q * std::sqrt(p + q));
    d2ee[98] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C15769 * C124 - C15773 * C117 + C47448 * C125 - C15774 * C118) *
                 C116 +
             (C15769 * C138 - C15773 * C127 + C47448 * C139 - C15774 * C128) *
                 C47384) *
                C15771 +
            ((C15922 - C15923 + C15924 - C15925) * C116 +
             (C15926 - C15927 + C15928 - C15929) * C47384) *
                C47479) *
               C47430 +
           (((C15773 * C414 - C15769 * C424 + C15774 * C415 - C47448 * C425) *
                 C116 +
             (C15773 * C427 - C15769 * C444 + C15774 * C428 - C47448 * C445) *
                 C47384) *
                C15771 +
            ((C15773 * C812 - C15769 * C817 + C15774 * C813 - C47448 * C818) *
                 C116 +
             (C15773 * C820 - C15769 * C827 + C15774 * C821 - C47448 * C828) *
                 C47384) *
                C47479) *
               C47268) *
              C47163 * C554 +
          ((((C15773 * C118 - C15769 * C125 + C15774 * C119 - C47448 * C126) *
                 C116 +
             (C15773 * C128 - C15769 * C139 + C15774 * C129 - C47448 * C140) *
                 C47384) *
                C15771 +
            ((C15938 - C15939 + C15940 - C15941) * C116 +
             (C15942 - C15943 + C15944 - C15945) * C47384) *
                C47479) *
               C47430 +
           (((C15769 * C425 - C15773 * C415 + C47448 * C426 - C15774 * C416) *
                 C116 +
             (C15769 * C445 - C15773 * C428 + C47448 * C446 - C15774 * C429) *
                 C47384) *
                C15771 +
            ((C15769 * C818 - C15773 * C813 + C47448 * C819 - C15774 * C814) *
                 C116 +
             (C15769 * C828 - C15773 * C821 + C47448 * C829 - C15774 * C822) *
                 C47384) *
                C47479) *
               C47268) *
              C47163 * C555 +
          ((((C15769 * C126 - C15773 * C119 + C47448 * C130 - C15774 * C120) *
                 C116 +
             (C15769 * C140 - C15773 * C129 + C47448 * C141 - C15774 * C131) *
                 C47384) *
                C15771 +
            ((C15954 - C15955 + C15956 - C15957) * C116 +
             (C15958 - C15959 + C15960 - C15961) * C47384) *
                C47479) *
               C47430 +
           (((C15773 * C416 - C15769 * C426 + C15774 * C420 - C47448 * C436) *
                 C116 +
             (C15773 * C429 - C15769 * C446 + C15774 * C437 - C47448 * C450) *
                 C47384) *
                C15771 +
            ((C15773 * C814 - C15769 * C819 + C15774 * C815 - C47448 * C823) *
                 C116 +
             (C15773 * C822 - C15769 * C829 + C15774 * C824 - C47448 * C830) *
                 C47384) *
                C47479) *
               C47268) *
              C47163 * C556 +
          ((((C15773 * C120 - C15769 * C130 + C15774 * C121 - C47448 * C132) *
                 C116 +
             (C15773 * C131 - C15769 * C141 + C15774 * C133 - C47448 * C142) *
                 C47384) *
                C15771 +
            ((C16246 - C16247 + C16248 - C16249) * C116 +
             (C16250 - C16251 + C16252 - C16253) * C47384) *
                C47479) *
               C47430 +
           (((C15769 * C436 - C15773 * C420 + C47448 * C440 - C15774 * C422) *
                 C116 +
             (C15769 * C450 - C15773 * C437 + C47448 * C452 - C15774 * C441) *
                 C47384) *
                C15771 +
            ((C15769 * C823 - C15773 * C815 + C47448 * C825 - C15774 * C816) *
                 C116 +
             (C15769 * C830 - C15773 * C824 + C47448 * C831 - C15774 * C826) *
                 C47384) *
                C47479) *
               C47268) *
              C47163 * C47465)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C15769 * C124 - C15773 * C117 + C47448 * C125 - C15774 * C118) *
                  C116 +
              (C15769 * C138 - C15773 * C127 + C47448 * C139 - C15774 * C128) *
                  C47384) *
                 C15771 +
             ((C15922 - C15923 + C15924 - C15925) * C116 +
              (C15926 - C15927 + C15928 - C15929) * C47384) *
                 C47479) *
                C47430 +
            (((C15773 * C414 - C15769 * C424 + C15774 * C415 - C47448 * C425) *
                  C116 +
              (C15773 * C427 - C15769 * C444 + C15774 * C428 - C47448 * C445) *
                  C47384) *
                 C15771 +
             ((C16578 - C16579 + C16580 - C16581) * C116 +
              (C16582 - C16583 + C16584 - C16585) * C47384) *
                 C47479) *
                C47268) *
               C942 +
           ((((C15923 - C15922 + C15925 - C15924) * C116 +
              (C15927 - C15926 + C15929 - C15928) * C47384) *
                 C15771 +
             ((C15930 - C15931 + C15932 - C15933) * C116 +
              (C15934 - C15935 + C15936 - C15937) * C47384) *
                 C47479) *
                C47430 +
            (((C16579 - C16578 + C16581 - C16580) * C116 +
              (C16583 - C16582 + C16585 - C16584) * C47384) *
                 C15771 +
             ((C17000 - C17001 + C17002 - C17003) * C116 +
              (C17004 - C17005 + C17006 - C17007) * C47384) *
                 C47479) *
                C47268) *
               C943 +
           ((((C15931 - C15930 + C15933 - C15932) * C116 +
              (C15935 - C15934 + C15937 - C15936) * C47384) *
                 C15771 +
             ((C16830 - C16831 + C16832 - C16833) * C116 +
              (C16834 - C16835 + C16836 - C16837) * C47384) *
                 C47479) *
                C47430 +
            (((C17001 - C17000 + C17003 - C17002) * C116 +
              (C17005 - C17004 + C17007 - C17006) * C47384) *
                 C15771 +
             ((C15773 * C1542 - C15769 * C1545 + C15774 * C1543 -
               C47448 * C1546) *
                  C116 +
              (C15773 * C1548 - C15769 * C1551 + C15774 * C1549 -
               C47448 * C1552) *
                  C47384) *
                 C47479) *
                C47268) *
               C47461) *
              C47415 +
          (((((C15773 * C118 - C15769 * C125 + C15774 * C119 - C47448 * C126) *
                  C116 +
              (C15773 * C128 - C15769 * C139 + C15774 * C129 - C47448 * C140) *
                  C47384) *
                 C15771 +
             ((C15938 - C15939 + C15940 - C15941) * C116 +
              (C15942 - C15943 + C15944 - C15945) * C47384) *
                 C47479) *
                C47430 +
            (((C15769 * C425 - C15773 * C415 + C47448 * C426 - C15774 * C416) *
                  C116 +
              (C15769 * C445 - C15773 * C428 + C47448 * C446 - C15774 * C429) *
                  C47384) *
                 C15771 +
             ((C16586 - C16587 + C16588 - C16589) * C116 +
              (C16590 - C16591 + C16592 - C16593) * C47384) *
                 C47479) *
                C47268) *
               C942 +
           ((((C15939 - C15938 + C15941 - C15940) * C116 +
              (C15943 - C15942 + C15945 - C15944) * C47384) *
                 C15771 +
             ((C15946 - C15947 + C15948 - C15949) * C116 +
              (C15950 - C15951 + C15952 - C15953) * C47384) *
                 C47479) *
                C47430 +
            (((C16587 - C16586 + C16589 - C16588) * C116 +
              (C16591 - C16590 + C16593 - C16592) * C47384) *
                 C15771 +
             ((C17348 - C17349 + C17350 - C17351) * C116 +
              (C17352 - C17353 + C17354 - C17355) * C47384) *
                 C47479) *
                C47268) *
               C943 +
           ((((C15947 - C15946 + C15949 - C15948) * C116 +
              (C15951 - C15950 + C15953 - C15952) * C47384) *
                 C15771 +
             ((C17146 - C17147 + C17148 - C17149) * C116 +
              (C17150 - C17151 + C17152 - C17153) * C47384) *
                 C47479) *
                C47430 +
            (((C17349 - C17348 + C17351 - C17350) * C116 +
              (C17353 - C17352 + C17355 - C17354) * C47384) *
                 C15771 +
             ((C15769 * C1546 - C15773 * C1543 + C47448 * C1547 -
               C15774 * C1544) *
                  C116 +
              (C15769 * C1552 - C15773 * C1549 + C47448 * C1553 -
               C15774 * C1550) *
                  C47384) *
                 C47479) *
                C47268) *
               C47461) *
              C47146)) /
            (p * q * std::sqrt(p + q));
    d2ee[99] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C15769 * C124 - C15773 * C117 + C47448 * C125 - C15774 * C118) *
                C116 +
            (C15769 * C138 - C15773 * C127 + C47448 * C139 - C15774 * C128) *
                C47384) *
               C15771 +
           ((C15769 * C271 - C15773 * C261 + C47448 * C272 - C15774 * C262) *
                C116 +
            (C15769 * C291 - C15773 * C274 + C47448 * C292 - C15774 * C275) *
                C47384) *
               C47479) *
              C47181 * C47163 * C108 +
          (((C15773 * C118 - C15769 * C125 + C15774 * C119 - C47448 * C126) *
                C116 +
            (C15773 * C128 - C15769 * C139 + C15774 * C129 - C47448 * C140) *
                C47384) *
               C15771 +
           ((C15773 * C262 - C15769 * C272 + C15774 * C263 - C47448 * C273) *
                C116 +
            (C15773 * C275 - C15769 * C292 + C15774 * C276 - C47448 * C293) *
                C47384) *
               C47479) *
              C47181 * C47163 * C109 +
          (((C15769 * C126 - C15773 * C119 + C47448 * C130 - C15774 * C120) *
                C116 +
            (C15769 * C140 - C15773 * C129 + C47448 * C141 - C15774 * C131) *
                C47384) *
               C15771 +
           ((C15769 * C273 - C15773 * C263 + C47448 * C283 - C15774 * C267) *
                C116 +
            (C15769 * C293 - C15773 * C276 + C47448 * C297 - C15774 * C284) *
                C47384) *
               C47479) *
              C47181 * C47163 * C110 +
          (((C15773 * C120 - C15769 * C130 + C15774 * C121 - C47448 * C132) *
                C116 +
            (C15773 * C131 - C15769 * C141 + C15774 * C133 - C47448 * C142) *
                C47384) *
               C15771 +
           ((C15773 * C267 - C15769 * C283 + C15774 * C269 - C47448 * C287) *
                C116 +
            (C15773 * C284 - C15769 * C297 + C15774 * C288 - C47448 * C299) *
                C47384) *
               C47479) *
              C47181 * C47163 * C111 +
          (((C15769 * C132 - C15773 * C121 + C47448 * C134 - C15774 * C122) *
                C116 +
            (C15769 * C142 - C15773 * C133 + C47448 * C143 - C15774 * C135) *
                C47384) *
               C15771 +
           ((C15769 * C287 - C15773 * C269 + C47448 * C559 - C15774 * C558) *
                C116 +
            (C15769 * C299 - C15773 * C288 + C47448 * C561 - C15774 * C560) *
                C47384) *
               C47479) *
              C47181 * C47163 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C15769 * C124 - C15773 * C117 + C47448 * C125 - C15774 * C118) *
                 C116 +
             (C15769 * C138 - C15773 * C127 + C47448 * C139 - C15774 * C128) *
                 C47384) *
                C15771 +
            ((C15922 - C15923 + C15924 - C15925) * C116 +
             (C15926 - C15927 + C15928 - C15929) * C47384) *
                C47479) *
               C47181 * C47500 +
           (((C15923 - C15922 + C15925 - C15924) * C116 +
             (C15927 - C15926 + C15929 - C15928) * C47384) *
                C15771 +
            ((C15930 - C15931 + C15932 - C15933) * C116 +
             (C15934 - C15935 + C15936 - C15937) * C47384) *
                C47479) *
               C47181 * C47488 +
           (((C15931 - C15930 + C15933 - C15932) * C116 +
             (C15935 - C15934 + C15937 - C15936) * C47384) *
                C15771 +
            ((C15769 * C1022 - C15773 * C1016 + C47448 * C1023 -
              C15774 * C1017) *
                 C116 +
             (C15769 * C1034 - C15773 * C1025 + C47448 * C1035 -
              C15774 * C1026) *
                 C47384) *
                C47479) *
               C47181 * C47461) *
              C258 +
          ((((C15773 * C118 - C15769 * C125 + C15774 * C119 - C47448 * C126) *
                 C116 +
             (C15773 * C128 - C15769 * C139 + C15774 * C129 - C47448 * C140) *
                 C47384) *
                C15771 +
            ((C15938 - C15939 + C15940 - C15941) * C116 +
             (C15942 - C15943 + C15944 - C15945) * C47384) *
                C47479) *
               C47181 * C47500 +
           (((C15939 - C15938 + C15941 - C15940) * C116 +
             (C15943 - C15942 + C15945 - C15944) * C47384) *
                C15771 +
            ((C15946 - C15947 + C15948 - C15949) * C116 +
             (C15950 - C15951 + C15952 - C15953) * C47384) *
                C47479) *
               C47181 * C47488 +
           (((C15947 - C15946 + C15949 - C15948) * C116 +
             (C15951 - C15950 + C15953 - C15952) * C47384) *
                C15771 +
            ((C15773 * C1017 - C15769 * C1023 + C15774 * C1018 -
              C47448 * C1024) *
                 C116 +
             (C15773 * C1026 - C15769 * C1035 + C15774 * C1027 -
              C47448 * C1036) *
                 C47384) *
                C47479) *
               C47181 * C47461) *
              C259 +
          ((((C15769 * C126 - C15773 * C119 + C47448 * C130 - C15774 * C120) *
                 C116 +
             (C15769 * C140 - C15773 * C129 + C47448 * C141 - C15774 * C131) *
                 C47384) *
                C15771 +
            ((C15954 - C15955 + C15956 - C15957) * C116 +
             (C15958 - C15959 + C15960 - C15961) * C47384) *
                C47479) *
               C47181 * C47500 +
           (((C15955 - C15954 + C15957 - C15956) * C116 +
             (C15959 - C15958 + C15961 - C15960) * C47384) *
                C15771 +
            ((C15962 - C15963 + C15964 - C15965) * C116 +
             (C15966 - C15967 + C15968 - C15969) * C47384) *
                C47479) *
               C47181 * C47488 +
           (((C15963 - C15962 + C15965 - C15964) * C116 +
             (C15967 - C15966 + C15969 - C15968) * C47384) *
                C15771 +
            ((C15769 * C1024 - C15773 * C1018 + C47448 * C1291 -
              C15774 * C1290) *
                 C116 +
             (C15769 * C1036 - C15773 * C1027 + C47448 * C1293 -
              C15774 * C1292) *
                 C47384) *
                C47479) *
               C47181 * C47461) *
              C47455)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C15769 * C124 - C15773 * C117 + C47448 * C125 - C15774 * C118) *
                 C116 +
             (C15769 * C138 - C15773 * C127 + C47448 * C139 - C15774 * C128) *
                 C47384) *
                C15771 +
            ((C15922 - C15923 + C15924 - C15925) * C116 +
             (C15926 - C15927 + C15928 - C15929) * C47384) *
                C47479) *
               C47181 * C942 +
           (((C15923 - C15922 + C15925 - C15924) * C116 +
             (C15927 - C15926 + C15929 - C15928) * C47384) *
                C15771 +
            ((C15930 - C15931 + C15932 - C15933) * C116 +
             (C15934 - C15935 + C15936 - C15937) * C47384) *
                C47479) *
               C47181 * C943 +
           (((C15931 - C15930 + C15933 - C15932) * C116 +
             (C15935 - C15934 + C15937 - C15936) * C47384) *
                C15771 +
            ((C15769 * C1022 - C15773 * C1016 + C47448 * C1023 -
              C15774 * C1017) *
                 C116 +
             (C15769 * C1034 - C15773 * C1025 + C47448 * C1035 -
              C15774 * C1026) *
                 C47384) *
                C47479) *
               C47181 * C47461) *
              C47497 +
          ((((C15773 * C118 - C15769 * C125 + C15774 * C119 - C47448 * C126) *
                 C116 +
             (C15773 * C128 - C15769 * C139 + C15774 * C129 - C47448 * C140) *
                 C47384) *
                C15771 +
            ((C15938 - C15939 + C15940 - C15941) * C116 +
             (C15942 - C15943 + C15944 - C15945) * C47384) *
                C47479) *
               C47181 * C942 +
           (((C15939 - C15938 + C15941 - C15940) * C116 +
             (C15943 - C15942 + C15945 - C15944) * C47384) *
                C15771 +
            ((C15946 - C15947 + C15948 - C15949) * C116 +
             (C15950 - C15951 + C15952 - C15953) * C47384) *
                C47479) *
               C47181 * C943 +
           (((C15947 - C15946 + C15949 - C15948) * C116 +
             (C15951 - C15950 + C15953 - C15952) * C47384) *
                C15771 +
            ((C15773 * C1017 - C15769 * C1023 + C15774 * C1018 -
              C47448 * C1024) *
                 C116 +
             (C15773 * C1026 - C15769 * C1035 + C15774 * C1027 -
              C47448 * C1036) *
                 C47384) *
                C47479) *
               C47181 * C47461) *
              C47484 +
          ((((C15769 * C126 - C15773 * C119 + C47448 * C130 - C15774 * C120) *
                 C116 +
             (C15769 * C140 - C15773 * C129 + C47448 * C141 - C15774 * C131) *
                 C47384) *
                C15771 +
            ((C15954 - C15955 + C15956 - C15957) * C116 +
             (C15958 - C15959 + C15960 - C15961) * C47384) *
                C47479) *
               C47181 * C942 +
           (((C15955 - C15954 + C15957 - C15956) * C116 +
             (C15959 - C15958 + C15961 - C15960) * C47384) *
                C15771 +
            ((C15962 - C15963 + C15964 - C15965) * C116 +
             (C15966 - C15967 + C15968 - C15969) * C47384) *
                C47479) *
               C47181 * C943 +
           (((C15963 - C15962 + C15965 - C15964) * C116 +
             (C15967 - C15966 + C15969 - C15968) * C47384) *
                C15771 +
            ((C15769 * C1024 - C15773 * C1018 + C47448 * C1291 -
              C15774 * C1290) *
                 C116 +
             (C15769 * C1036 - C15773 * C1027 + C47448 * C1293 -
              C15774 * C1292) *
                 C47384) *
                C47479) *
               C47181 * C47461) *
              C47455)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C15769 * C124 - C15773 * C117 + C47448 * C125 - C15774 * C118) *
                C116 +
            (C15769 * C138 - C15773 * C127 + C47448 * C139 - C15774 * C128) *
                C47384) *
               C15771 +
           ((C15922 - C15923 + C15924 - C15925) * C116 +
            (C15926 - C15927 + C15928 - C15929) * C47384) *
               C47479) *
              C47181 * C1010 +
          (((C15923 - C15922 + C15925 - C15924) * C116 +
            (C15927 - C15926 + C15929 - C15928) * C47384) *
               C15771 +
           ((C15930 - C15931 + C15932 - C15933) * C116 +
            (C15934 - C15935 + C15936 - C15937) * C47384) *
               C47479) *
              C47181 * C1011 +
          (((C15931 - C15930 + C15933 - C15932) * C116 +
            (C15935 - C15934 + C15937 - C15936) * C47384) *
               C15771 +
           ((C16830 - C16831 + C16832 - C16833) * C116 +
            (C16834 - C16835 + C16836 - C16837) * C47384) *
               C47479) *
              C47181 * C1012 +
          (((C16831 - C16830 + C16833 - C16832) * C116 +
            (C16835 - C16834 + C16837 - C16836) * C47384) *
               C15771 +
           ((C16838 - C16839 + C16840 - C16841) * C116 +
            (C16842 - C16843 + C16844 - C16845) * C47384) *
               C47479) *
              C47181 * C1013 +
          (((C16839 - C16838 + C16841 - C16840) * C116 +
            (C16843 - C16842 + C16845 - C16844) * C47384) *
               C15771 +
           ((C15769 * C5637 - C15773 * C5635 + C47448 * C5638 -
             C15774 * C5636) *
                C116 +
            (C15769 * C5641 - C15773 * C5639 + C47448 * C5642 -
             C15774 * C5640) *
                C47384) *
               C47479) *
              C47181 * C1014) *
         C47135) /
            (p * q * std::sqrt(p + q));
    d2ee[100] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C47108 * C124 - C21367 * C117) * C116 +
             (C47108 * C138 - C21367 * C127) * C47384) *
                C21364 +
            ((C21479 - C21480) * C116 + (C21481 - C21482) * C47384) * C21365 +
            C21527 * C21366) *
               C47181 * C47222 +
           (((C21480 - C21479) * C116 + (C21482 - C21481) * C47384) * C21364 +
            ((C21484 - C21483) * C116 + (C21486 - C21485) * C47384) * C21365 +
            C22204 * C21366) *
               C47181 * C47229 +
           (C21527 * C21364 +
            ((C21488 - C21487) * C116 + (C21490 - C21489) * C47384) * C21365 +
            C22207 * C21366) *
               C47181 * C2700) *
              C47140 +
          ((((C21367 * C118 - C47108 * C125) * C116 +
             (C21367 * C128 - C47108 * C139) * C47384) *
                C21364 +
            ((C21491 - C21492) * C116 + (C21493 - C21494) * C47384) * C21365 +
            C21528 * C21366) *
               C47181 * C47222 +
           (((C21492 - C21491) * C116 + (C21494 - C21493) * C47384) * C21364 +
            ((C21496 - C21495) * C116 + (C21498 - C21497) * C47384) * C21365 +
            C22454 * C21366) *
               C47181 * C47229 +
           (C21528 * C21364 +
            ((C21500 - C21499) * C116 + (C21502 - C21501) * C47384) * C21365 +
            ((C22448 - C22449) * C116 + (C22450 - C22451) * C47384) * C21366) *
               C47181 * C2700) *
              C47149 +
          ((((C47108 * C126 - C21367 * C119) * C116 +
             (C47108 * C140 - C21367 * C129) * C47384) *
                C21364 +
            ((C21503 - C21504) * C116 + (C21505 - C21506) * C47384) * C21365 +
            C21529 * C21366) *
               C47181 * C47222 +
           (((C21504 - C21503) * C116 + (C21506 - C21505) * C47384) * C21364 +
            ((C21508 - C21507) * C116 + (C21510 - C21509) * C47384) * C21365 +
            ((C21511 - C21512) * C116 + (C21513 - C21514) * C47384) * C21366) *
               C47181 * C47229 +
           (C21529 * C21364 +
            ((C21512 - C21511) * C116 + (C21514 - C21513) * C47384) * C21365 +
            ((C47108 * C1030 - C21367 * C1021) * C116 +
             (C47108 * C1039 - C21367 * C1033) * C47384) *
                C21366) *
               C47181 * C2700) *
              C2703)) /
        (p * q * std::sqrt(p + q));
    d2ee[101] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C47108 * C124 - C21367 * C117) * C116 +
              (C47108 * C138 - C21367 * C127) * C47384) *
                 C21364 +
             ((C21479 - C21480) * C116 + (C21481 - C21482) * C47384) * C21365 +
             C21527 * C21366) *
                C47430 +
            (((C21367 * C414 - C47108 * C424) * C116 +
              (C21367 * C427 - C47108 * C444) * C47384) *
                 C21364 +
             ((C21990 - C21991) * C116 + (C21992 - C21993) * C47384) * C21365 +
             C22344 * C21366) *
                C47268) *
               C47222 +
           ((((C21480 - C21479) * C116 + (C21482 - C21481) * C47384) * C21364 +
             ((C21484 - C21483) * C116 + (C21486 - C21485) * C47384) * C21365 +
             C22204 * C21366) *
                C47430 +
            (((C21991 - C21990) * C116 + (C21993 - C21992) * C47384) * C21364 +
             ((C21995 - C21994) * C116 + (C21997 - C21996) * C47384) * C21365 +
             C22720 * C21366) *
                C47268) *
               C47229 +
           ((C21527 * C21364 +
             ((C21488 - C21487) * C116 + (C21490 - C21489) * C47384) * C21365 +
             C22207 * C21366) *
                C47430 +
            (C22344 * C21364 +
             ((C22333 - C22332) * C116 + (C22335 - C22334) * C47384) * C21365 +
             ((C22714 - C22715) * C116 + (C22716 - C22717) * C47384) * C21366) *
                C47268) *
               C2700) *
              C2440 +
          (((((C21367 * C118 - C47108 * C125) * C116 +
              (C21367 * C128 - C47108 * C139) * C47384) *
                 C21364 +
             ((C21491 - C21492) * C116 + (C21493 - C21494) * C47384) * C21365 +
             C21528 * C21366) *
                C47430 +
            (((C47108 * C425 - C21367 * C415) * C116 +
              (C47108 * C445 - C21367 * C428) * C47384) *
                 C21364 +
             ((C21998 - C21999) * C116 + (C22000 - C22001) * C47384) * C21365 +
             C22609 * C21366) *
                C47268) *
               C47222 +
           ((((C21492 - C21491) * C116 + (C21494 - C21493) * C47384) * C21364 +
             ((C21496 - C21495) * C116 + (C21498 - C21497) * C47384) * C21365 +
             C22454 * C21366) *
                C47430 +
            (((C21999 - C21998) * C116 + (C22001 - C22000) * C47384) * C21364 +
             ((C22003 - C22002) * C116 + (C22005 - C22004) * C47384) * C21365 +
             ((C22603 - C22604) * C116 + (C22605 - C22606) * C47384) * C21366) *
                C47268) *
               C47229 +
           ((C21528 * C21364 +
             ((C21500 - C21499) * C116 + (C21502 - C21501) * C47384) * C21365 +
             ((C22448 - C22449) * C116 + (C22450 - C22451) * C47384) * C21366) *
                C47430 +
            (C22609 * C21364 +
             ((C22604 - C22603) * C116 + (C22606 - C22605) * C47384) * C21365 +
             ((C47108 * C6310 - C21367 * C6308) * C116 +
              (C47108 * C6314 - C21367 * C6312) * C47384) *
                 C21366) *
                C47268) *
               C2700) *
              C47146)) /
        (p * q * std::sqrt(p + q));
    d2ee[102] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C47108 * C124 - C21367 * C117) * C116 +
             (C47108 * C138 - C21367 * C127) * C47384) *
                C21364 +
            ((C21479 - C21480) * C116 + (C21481 - C21482) * C47384) * C21365 +
            C21527 * C21366) *
               C47181 * C47507 +
           (((C21480 - C21479) * C116 + (C21482 - C21481) * C47384) * C21364 +
            ((C21484 - C21483) * C116 + (C21486 - C21485) * C47384) * C21365 +
            C22204 * C21366) *
               C47181 * C47503 +
           (C21527 * C21364 +
            ((C21488 - C21487) * C116 + (C21490 - C21489) * C47384) * C21365 +
            C22207 * C21366) *
               C47181 * C47493 +
           (C22204 * C21364 +
            ((C22193 - C22192) * C116 + (C22195 - C22194) * C47384) * C21365 +
            ((C22196 - C22197) * C116 + (C22198 - C22199) * C47384) * C21366) *
               C47181 * C47471) *
              C2440 +
          ((((C21367 * C118 - C47108 * C125) * C116 +
             (C21367 * C128 - C47108 * C139) * C47384) *
                C21364 +
            ((C21491 - C21492) * C116 + (C21493 - C21494) * C47384) * C21365 +
            C21528 * C21366) *
               C47181 * C47507 +
           (((C21492 - C21491) * C116 + (C21494 - C21493) * C47384) * C21364 +
            ((C21496 - C21495) * C116 + (C21498 - C21497) * C47384) * C21365 +
            C22454 * C21366) *
               C47181 * C47503 +
           (C21528 * C21364 +
            ((C21500 - C21499) * C116 + (C21502 - C21501) * C47384) * C21365 +
            ((C22448 - C22449) * C116 + (C22450 - C22451) * C47384) * C21366) *
               C47181 * C47493 +
           (C22454 * C21364 +
            ((C22449 - C22448) * C116 + (C22451 - C22450) * C47384) * C21365 +
            ((C47108 * C5638 - C21367 * C5636) * C116 +
             (C47108 * C5642 - C21367 * C5640) * C47384) *
                C21366) *
               C47181 * C47471) *
              C47146)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C47108 * C124 - C21367 * C117) * C116 +
             (C47108 * C138 - C21367 * C127) * C47384) *
                C21364 +
            ((C21479 - C21480) * C116 + (C21481 - C21482) * C47384) * C21365 +
            C21527 * C21366) *
               C47181 * C2332 +
           (((C21480 - C21479) * C116 + (C21482 - C21481) * C47384) * C21364 +
            ((C21484 - C21483) * C116 + (C21486 - C21485) * C47384) * C21365 +
            C22204 * C21366) *
               C47181 * C47226) *
              C47506 +
          ((((C21367 * C118 - C47108 * C125) * C116 +
             (C21367 * C128 - C47108 * C139) * C47384) *
                C21364 +
            ((C21491 - C21492) * C116 + (C21493 - C21494) * C47384) * C21365 +
            C21528 * C21366) *
               C47181 * C2332 +
           (((C21492 - C21491) * C116 + (C21494 - C21493) * C47384) * C21364 +
            ((C21496 - C21495) * C116 + (C21498 - C21497) * C47384) * C21365 +
            C22454 * C21366) *
               C47181 * C47226) *
              C47499 +
          ((((C47108 * C126 - C21367 * C119) * C116 +
             (C47108 * C140 - C21367 * C129) * C47384) *
                C21364 +
            ((C21503 - C21504) * C116 + (C21505 - C21506) * C47384) * C21365 +
            C21529 * C21366) *
               C47181 * C2332 +
           (((C21504 - C21503) * C116 + (C21506 - C21505) * C47384) * C21364 +
            ((C21508 - C21507) * C116 + (C21510 - C21509) * C47384) * C21365 +
            ((C21511 - C21512) * C116 + (C21513 - C21514) * C47384) * C21366) *
               C47181 * C47226) *
              C47486 +
          ((((C21367 * C120 - C47108 * C130) * C116 +
             (C21367 * C131 - C47108 * C141) * C47384) *
                C21364 +
            ((C21738 - C21739) * C116 + (C21740 - C21741) * C47384) * C21365 +
            ((C21742 - C21743) * C116 + (C21744 - C21745) * C47384) * C21366) *
               C47181 * C2332 +
           (((C21739 - C21738) * C116 + (C21741 - C21740) * C47384) * C21364 +
            ((C21743 - C21742) * C116 + (C21745 - C21744) * C47384) * C21365 +
            ((C47108 * C1291 - C21367 * C1290) * C116 +
             (C47108 * C1293 - C21367 * C1292) * C47384) *
                C21366) *
               C47181 * C47226) *
              C47465)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C47108 * C124 - C21367 * C117) * C116 +
              (C47108 * C138 - C21367 * C127) * C47384) *
                 C21364 +
             ((C21479 - C21480) * C116 + (C21481 - C21482) * C47384) * C21365 +
             C21527 * C21366) *
                C47501 +
            (((C21367 * C414 - C47108 * C424) * C116 +
              (C21367 * C427 - C47108 * C444) * C47384) *
                 C21364 +
             ((C21990 - C21991) * C116 + (C21992 - C21993) * C47384) * C21365 +
             C22344 * C21366) *
                C47490 +
            (((C47108 * C430 - C21367 * C417) * C116 +
              (C47108 * C447 - C21367 * C433) * C47384) *
                 C21364 +
             ((C22324 - C22325) * C116 + (C22326 - C22327) * C47384) * C21365 +
             C22347 * C21366) *
                C47464) *
               C2332 +
           ((((C21480 - C21479) * C116 + (C21482 - C21481) * C47384) * C21364 +
             ((C21484 - C21483) * C116 + (C21486 - C21485) * C47384) * C21365 +
             C22204 * C21366) *
                C47501 +
            (((C21991 - C21990) * C116 + (C21993 - C21992) * C47384) * C21364 +
             ((C21995 - C21994) * C116 + (C21997 - C21996) * C47384) * C21365 +
             C22720 * C21366) *
                C47490 +
            (((C22325 - C22324) * C116 + (C22327 - C22326) * C47384) * C21364 +
             ((C22329 - C22328) * C116 + (C22331 - C22330) * C47384) * C21365 +
             ((C22336 - C22337) * C116 + (C22338 - C22339) * C47384) * C21366) *
                C47464) *
               C47226) *
              C2440 +
          (((((C21367 * C118 - C47108 * C125) * C116 +
              (C21367 * C128 - C47108 * C139) * C47384) *
                 C21364 +
             ((C21491 - C21492) * C116 + (C21493 - C21494) * C47384) * C21365 +
             C21528 * C21366) *
                C47501 +
            (((C47108 * C425 - C21367 * C415) * C116 +
              (C47108 * C445 - C21367 * C428) * C47384) *
                 C21364 +
             ((C21998 - C21999) * C116 + (C22000 - C22001) * C47384) * C21365 +
             C22609 * C21366) *
                C47490 +
            (((C21367 * C418 - C47108 * C431) * C116 +
              (C21367 * C434 - C47108 * C448) * C47384) *
                 C21364 +
             ((C23153 - C23154) * C116 + (C23155 - C23156) * C47384) * C21365 +
             ((C23157 - C23158) * C116 + (C23159 - C23160) * C47384) * C21366) *
                C47464) *
               C2332 +
           ((((C21492 - C21491) * C116 + (C21494 - C21493) * C47384) * C21364 +
             ((C21496 - C21495) * C116 + (C21498 - C21497) * C47384) * C21365 +
             C22454 * C21366) *
                C47501 +
            (((C21999 - C21998) * C116 + (C22001 - C22000) * C47384) * C21364 +
             ((C22003 - C22002) * C116 + (C22005 - C22004) * C47384) * C21365 +
             ((C22603 - C22604) * C116 + (C22605 - C22606) * C47384) * C21366) *
                C47490 +
            (((C23154 - C23153) * C116 + (C23156 - C23155) * C47384) * C21364 +
             ((C23158 - C23157) * C116 + (C23160 - C23159) * C47384) * C21365 +
             ((C47108 * C5808 - C21367 * C5806) * C116 +
              (C47108 * C5812 - C21367 * C5810) * C47384) *
                 C21366) *
                C47464) *
               C47226) *
              C47146)) /
            (p * q * std::sqrt(p + q));
    d2ee[103] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C47108 * C124 - C21367 * C117) * C116 +
              (C47108 * C138 - C21367 * C127) * C47384) *
                 C21364 +
             ((C21479 - C21480) * C116 + (C21481 - C21482) * C47384) * C21365 +
             C21527 * C21366) *
                C47430 +
            (((C21367 * C414 - C47108 * C424) * C116 +
              (C21367 * C427 - C47108 * C444) * C47384) *
                 C21364 +
             ((C21990 - C21991) * C116 + (C21992 - C21993) * C47384) * C21365 +
             C22344 * C21366) *
                C47268) *
               C2332 +
           ((((C21480 - C21479) * C116 + (C21482 - C21481) * C47384) * C21364 +
             ((C21484 - C21483) * C116 + (C21486 - C21485) * C47384) * C21365 +
             C22204 * C21366) *
                C47430 +
            (((C21991 - C21990) * C116 + (C21993 - C21992) * C47384) * C21364 +
             ((C21995 - C21994) * C116 + (C21997 - C21996) * C47384) * C21365 +
             C22720 * C21366) *
                C47268) *
               C47226) *
              C47140 +
          (((((C21367 * C118 - C47108 * C125) * C116 +
              (C21367 * C128 - C47108 * C139) * C47384) *
                 C21364 +
             ((C21491 - C21492) * C116 + (C21493 - C21494) * C47384) * C21365 +
             C21528 * C21366) *
                C47430 +
            (((C47108 * C425 - C21367 * C415) * C116 +
              (C47108 * C445 - C21367 * C428) * C47384) *
                 C21364 +
             ((C21998 - C21999) * C116 + (C22000 - C22001) * C47384) * C21365 +
             C22609 * C21366) *
                C47268) *
               C2332 +
           ((((C21492 - C21491) * C116 + (C21494 - C21493) * C47384) * C21364 +
             ((C21496 - C21495) * C116 + (C21498 - C21497) * C47384) * C21365 +
             C22454 * C21366) *
                C47430 +
            (((C21999 - C21998) * C116 + (C22001 - C22000) * C47384) * C21364 +
             ((C22003 - C22002) * C116 + (C22005 - C22004) * C47384) * C21365 +
             ((C22603 - C22604) * C116 + (C22605 - C22606) * C47384) * C21366) *
                C47268) *
               C47226) *
              C47149 +
          (((((C47108 * C126 - C21367 * C119) * C116 +
              (C47108 * C140 - C21367 * C129) * C47384) *
                 C21364 +
             ((C21503 - C21504) * C116 + (C21505 - C21506) * C47384) * C21365 +
             C21529 * C21366) *
                C47430 +
            (((C21367 * C416 - C47108 * C426) * C116 +
              (C21367 * C429 - C47108 * C446) * C47384) *
                 C21364 +
             ((C22006 - C22007) * C116 + (C22008 - C22009) * C47384) * C21365 +
             ((C22010 - C22011) * C116 + (C22012 - C22013) * C47384) * C21366) *
                C47268) *
               C2332 +
           ((((C21504 - C21503) * C116 + (C21506 - C21505) * C47384) * C21364 +
             ((C21508 - C21507) * C116 + (C21510 - C21509) * C47384) * C21365 +
             ((C21511 - C21512) * C116 + (C21513 - C21514) * C47384) * C21366) *
                C47430 +
            (((C22007 - C22006) * C116 + (C22009 - C22008) * C47384) * C21364 +
             ((C22011 - C22010) * C116 + (C22013 - C22012) * C47384) * C21365 +
             ((C47108 * C1547 - C21367 * C1544) * C116 +
              (C47108 * C1553 - C21367 * C1550) * C47384) *
                 C21366) *
                C47268) *
               C47226) *
              C2703)) /
        (p * q * std::sqrt(p + q));
    d2ee[104] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C47108 * C124 - C21367 * C117) * C116 +
             (C47108 * C138 - C21367 * C127) * C47384) *
                C21364 +
            ((C21479 - C21480) * C116 + (C21481 - C21482) * C47384) * C21365 +
            C21527 * C21366) *
               C47181 * C2332 +
           (((C21480 - C21479) * C116 + (C21482 - C21481) * C47384) * C21364 +
            ((C21484 - C21483) * C116 + (C21486 - C21485) * C47384) * C21365 +
            C22204 * C21366) *
               C47181 * C47226) *
              C47506 +
          ((((C21367 * C118 - C47108 * C125) * C116 +
             (C21367 * C128 - C47108 * C139) * C47384) *
                C21364 +
            ((C21491 - C21492) * C116 + (C21493 - C21494) * C47384) * C21365 +
            C21528 * C21366) *
               C47181 * C2332 +
           (((C21492 - C21491) * C116 + (C21494 - C21493) * C47384) * C21364 +
            ((C21496 - C21495) * C116 + (C21498 - C21497) * C47384) * C21365 +
            C22454 * C21366) *
               C47181 * C47226) *
              C47499 +
          ((((C47108 * C126 - C21367 * C119) * C116 +
             (C47108 * C140 - C21367 * C129) * C47384) *
                C21364 +
            ((C21503 - C21504) * C116 + (C21505 - C21506) * C47384) * C21365 +
            C21529 * C21366) *
               C47181 * C2332 +
           (((C21504 - C21503) * C116 + (C21506 - C21505) * C47384) * C21364 +
            ((C21508 - C21507) * C116 + (C21510 - C21509) * C47384) * C21365 +
            ((C21511 - C21512) * C116 + (C21513 - C21514) * C47384) * C21366) *
               C47181 * C47226) *
              C47486 +
          ((((C21367 * C120 - C47108 * C130) * C116 +
             (C21367 * C131 - C47108 * C141) * C47384) *
                C21364 +
            ((C21738 - C21739) * C116 + (C21740 - C21741) * C47384) * C21365 +
            ((C21742 - C21743) * C116 + (C21744 - C21745) * C47384) * C21366) *
               C47181 * C2332 +
           (((C21739 - C21738) * C116 + (C21741 - C21740) * C47384) * C21364 +
            ((C21743 - C21742) * C116 + (C21745 - C21744) * C47384) * C21365 +
            ((C47108 * C1291 - C21367 * C1290) * C116 +
             (C47108 * C1293 - C21367 * C1292) * C47384) *
                C21366) *
               C47181 * C47226) *
              C47465)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C47108 * C124 - C21367 * C117) * C116 +
             (C47108 * C138 - C21367 * C127) * C47384) *
                C21364 +
            ((C21479 - C21480) * C116 + (C21481 - C21482) * C47384) * C21365 +
            C21527 * C21366) *
               C47181 * C47507 +
           (((C21480 - C21479) * C116 + (C21482 - C21481) * C47384) * C21364 +
            ((C21484 - C21483) * C116 + (C21486 - C21485) * C47384) * C21365 +
            C22204 * C21366) *
               C47181 * C47503 +
           (C21527 * C21364 +
            ((C21488 - C21487) * C116 + (C21490 - C21489) * C47384) * C21365 +
            C22207 * C21366) *
               C47181 * C47493 +
           (C22204 * C21364 +
            ((C22193 - C22192) * C116 + (C22195 - C22194) * C47384) * C21365 +
            ((C22196 - C22197) * C116 + (C22198 - C22199) * C47384) * C21366) *
               C47181 * C47471) *
              C2440 +
          ((((C21367 * C118 - C47108 * C125) * C116 +
             (C21367 * C128 - C47108 * C139) * C47384) *
                C21364 +
            ((C21491 - C21492) * C116 + (C21493 - C21494) * C47384) * C21365 +
            C21528 * C21366) *
               C47181 * C47507 +
           (((C21492 - C21491) * C116 + (C21494 - C21493) * C47384) * C21364 +
            ((C21496 - C21495) * C116 + (C21498 - C21497) * C47384) * C21365 +
            C22454 * C21366) *
               C47181 * C47503 +
           (C21528 * C21364 +
            ((C21500 - C21499) * C116 + (C21502 - C21501) * C47384) * C21365 +
            ((C22448 - C22449) * C116 + (C22450 - C22451) * C47384) * C21366) *
               C47181 * C47493 +
           (C22454 * C21364 +
            ((C22449 - C22448) * C116 + (C22451 - C22450) * C47384) * C21365 +
            ((C47108 * C5638 - C21367 * C5636) * C116 +
             (C47108 * C5642 - C21367 * C5640) * C47384) *
                C21366) *
               C47181 * C47471) *
              C47146)) /
            (p * q * std::sqrt(p + q));
    d2ee[105] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C47108 * C124 - C21367 * C117) * C116 +
              (C47108 * C138 - C21367 * C127) * C47384) *
                 C21364 +
             ((C21479 - C21480) * C116 + (C21481 - C21482) * C47384) * C21365 +
             C21527 * C21366) *
                C3094 +
            (((C21367 * C414 - C47108 * C424) * C116 +
              (C21367 * C427 - C47108 * C444) * C47384) *
                 C21364 +
             ((C21990 - C21991) * C116 + (C21992 - C21993) * C47384) * C21365 +
             C22344 * C21366) *
                C47268) *
               C47222 +
           ((((C21480 - C21479) * C116 + (C21482 - C21481) * C47384) * C21364 +
             ((C21484 - C21483) * C116 + (C21486 - C21485) * C47384) * C21365 +
             C22204 * C21366) *
                C3094 +
            (((C21991 - C21990) * C116 + (C21993 - C21992) * C47384) * C21364 +
             ((C21995 - C21994) * C116 + (C21997 - C21996) * C47384) * C21365 +
             C22720 * C21366) *
                C47268) *
               C47229 +
           ((C21527 * C21364 +
             ((C21488 - C21487) * C116 + (C21490 - C21489) * C47384) * C21365 +
             C22207 * C21366) *
                C3094 +
            (C22344 * C21364 +
             ((C22333 - C22332) * C116 + (C22335 - C22334) * C47384) * C21365 +
             ((C22714 - C22715) * C116 + (C22716 - C22717) * C47384) * C21366) *
                C47268) *
               C2700) *
              C47415 +
          (((((C21367 * C118 - C47108 * C125) * C116 +
              (C21367 * C128 - C47108 * C139) * C47384) *
                 C21364 +
             ((C21491 - C21492) * C116 + (C21493 - C21494) * C47384) * C21365 +
             C21528 * C21366) *
                C3094 +
            (((C47108 * C425 - C21367 * C415) * C116 +
              (C47108 * C445 - C21367 * C428) * C47384) *
                 C21364 +
             ((C21998 - C21999) * C116 + (C22000 - C22001) * C47384) * C21365 +
             C22609 * C21366) *
                C47268) *
               C47222 +
           ((((C21492 - C21491) * C116 + (C21494 - C21493) * C47384) * C21364 +
             ((C21496 - C21495) * C116 + (C21498 - C21497) * C47384) * C21365 +
             C22454 * C21366) *
                C3094 +
            (((C21999 - C21998) * C116 + (C22001 - C22000) * C47384) * C21364 +
             ((C22003 - C22002) * C116 + (C22005 - C22004) * C47384) * C21365 +
             ((C22603 - C22604) * C116 + (C22605 - C22606) * C47384) * C21366) *
                C47268) *
               C47229 +
           ((C21528 * C21364 +
             ((C21500 - C21499) * C116 + (C21502 - C21501) * C47384) * C21365 +
             ((C22448 - C22449) * C116 + (C22450 - C22451) * C47384) * C21366) *
                C3094 +
            (C22609 * C21364 +
             ((C22604 - C22603) * C116 + (C22606 - C22605) * C47384) * C21365 +
             ((C47108 * C6310 - C21367 * C6308) * C116 +
              (C47108 * C6314 - C21367 * C6312) * C47384) *
                 C21366) *
                C47268) *
               C2700) *
              C47146)) /
        (p * q * std::sqrt(p + q));
    d2ee[106] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C47108 * C124 - C21367 * C117) * C116 +
             (C47108 * C138 - C21367 * C127) * C47384) *
                C21364 +
            ((C21479 - C21480) * C116 + (C21481 - C21482) * C47384) * C21365 +
            C21527 * C21366) *
               C47264 +
           (((C21367 * C414 - C47108 * C424) * C116 +
             (C21367 * C427 - C47108 * C444) * C47384) *
                C21364 +
            ((C21990 - C21991) * C116 + (C21992 - C21993) * C47384) * C21365 +
            C22344 * C21366) *
               C47271 +
           (((C47108 * C430 - C21367 * C417) * C116 +
             (C47108 * C447 - C21367 * C433) * C47384) *
                C21364 +
            ((C22324 - C22325) * C116 + (C22326 - C22327) * C47384) * C21365 +
            C22347 * C21366) *
               C3602) *
              C47222 +
          ((((C21480 - C21479) * C116 + (C21482 - C21481) * C47384) * C21364 +
            ((C21484 - C21483) * C116 + (C21486 - C21485) * C47384) * C21365 +
            C22204 * C21366) *
               C47264 +
           (((C21991 - C21990) * C116 + (C21993 - C21992) * C47384) * C21364 +
            ((C21995 - C21994) * C116 + (C21997 - C21996) * C47384) * C21365 +
            C22720 * C21366) *
               C47271 +
           (((C22325 - C22324) * C116 + (C22327 - C22326) * C47384) * C21364 +
            ((C22329 - C22328) * C116 + (C22331 - C22330) * C47384) * C21365 +
            ((C22336 - C22337) * C116 + (C22338 - C22339) * C47384) * C21366) *
               C3602) *
              C47229 +
          ((C21527 * C21364 +
            ((C21488 - C21487) * C116 + (C21490 - C21489) * C47384) * C21365 +
            C22207 * C21366) *
               C47264 +
           (C22344 * C21364 +
            ((C22333 - C22332) * C116 + (C22335 - C22334) * C47384) * C21365 +
            ((C22714 - C22715) * C116 + (C22716 - C22717) * C47384) * C21366) *
               C47271 +
           (C22347 * C21364 +
            ((C22337 - C22336) * C116 + (C22339 - C22338) * C47384) * C21365 +
            ((C47108 * C22318 - C21367 * C22317) * C116 +
             (C47108 * C22320 - C21367 * C22319) * C47384) *
                C21366) *
               C3602) *
              C2700) *
         C47135) /
        (p * q * std::sqrt(p + q));
    d2ee[107] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C47108 * C124 - C21367 * C117) * C116 +
             (C47108 * C138 - C21367 * C127) * C47384) *
                C21364 +
            ((C21479 - C21480) * C116 + (C21481 - C21482) * C47384) * C21365 +
            C21527 * C21366) *
               C3094 +
           (((C21367 * C414 - C47108 * C424) * C116 +
             (C21367 * C427 - C47108 * C444) * C47384) *
                C21364 +
            ((C21990 - C21991) * C116 + (C21992 - C21993) * C47384) * C21365 +
            C22344 * C21366) *
               C47268) *
              C47507 +
          ((((C21480 - C21479) * C116 + (C21482 - C21481) * C47384) * C21364 +
            ((C21484 - C21483) * C116 + (C21486 - C21485) * C47384) * C21365 +
            C22204 * C21366) *
               C3094 +
           (((C21991 - C21990) * C116 + (C21993 - C21992) * C47384) * C21364 +
            ((C21995 - C21994) * C116 + (C21997 - C21996) * C47384) * C21365 +
            C22720 * C21366) *
               C47268) *
              C47503 +
          ((C21527 * C21364 +
            ((C21488 - C21487) * C116 + (C21490 - C21489) * C47384) * C21365 +
            C22207 * C21366) *
               C3094 +
           (C22344 * C21364 +
            ((C22333 - C22332) * C116 + (C22335 - C22334) * C47384) * C21365 +
            ((C22714 - C22715) * C116 + (C22716 - C22717) * C47384) * C21366) *
               C47268) *
              C47493 +
          ((C22204 * C21364 +
            ((C22193 - C22192) * C116 + (C22195 - C22194) * C47384) * C21365 +
            ((C22196 - C22197) * C116 + (C22198 - C22199) * C47384) * C21366) *
               C3094 +
           (C22720 * C21364 +
            ((C22715 - C22714) * C116 + (C22717 - C22716) * C47384) * C21365 +
            ((C47108 * C22708 - C21367 * C22707) * C116 +
             (C47108 * C22710 - C21367 * C22709) * C47384) *
                C21366) *
               C47268) *
              C47471) *
         C47135) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C47108 * C124 - C21367 * C117) * C116 +
              (C47108 * C138 - C21367 * C127) * C47384) *
                 C21364 +
             ((C21479 - C21480) * C116 + (C21481 - C21482) * C47384) * C21365 +
             C21527 * C21366) *
                C3094 +
            (((C21367 * C414 - C47108 * C424) * C116 +
              (C21367 * C427 - C47108 * C444) * C47384) *
                 C21364 +
             ((C21990 - C21991) * C116 + (C21992 - C21993) * C47384) * C21365 +
             C22344 * C21366) *
                C47268) *
               C2332 +
           ((((C21480 - C21479) * C116 + (C21482 - C21481) * C47384) * C21364 +
             ((C21484 - C21483) * C116 + (C21486 - C21485) * C47384) * C21365 +
             C22204 * C21366) *
                C3094 +
            (((C21991 - C21990) * C116 + (C21993 - C21992) * C47384) * C21364 +
             ((C21995 - C21994) * C116 + (C21997 - C21996) * C47384) * C21365 +
             C22720 * C21366) *
                C47268) *
               C47226) *
              C47497 +
          (((((C21367 * C118 - C47108 * C125) * C116 +
              (C21367 * C128 - C47108 * C139) * C47384) *
                 C21364 +
             ((C21491 - C21492) * C116 + (C21493 - C21494) * C47384) * C21365 +
             C21528 * C21366) *
                C3094 +
            (((C47108 * C425 - C21367 * C415) * C116 +
              (C47108 * C445 - C21367 * C428) * C47384) *
                 C21364 +
             ((C21998 - C21999) * C116 + (C22000 - C22001) * C47384) * C21365 +
             C22609 * C21366) *
                C47268) *
               C2332 +
           ((((C21492 - C21491) * C116 + (C21494 - C21493) * C47384) * C21364 +
             ((C21496 - C21495) * C116 + (C21498 - C21497) * C47384) * C21365 +
             C22454 * C21366) *
                C3094 +
            (((C21999 - C21998) * C116 + (C22001 - C22000) * C47384) * C21364 +
             ((C22003 - C22002) * C116 + (C22005 - C22004) * C47384) * C21365 +
             ((C22603 - C22604) * C116 + (C22605 - C22606) * C47384) * C21366) *
                C47268) *
               C47226) *
              C47484 +
          (((((C47108 * C126 - C21367 * C119) * C116 +
              (C47108 * C140 - C21367 * C129) * C47384) *
                 C21364 +
             ((C21503 - C21504) * C116 + (C21505 - C21506) * C47384) * C21365 +
             C21529 * C21366) *
                C3094 +
            (((C21367 * C416 - C47108 * C426) * C116 +
              (C21367 * C429 - C47108 * C446) * C47384) *
                 C21364 +
             ((C22006 - C22007) * C116 + (C22008 - C22009) * C47384) * C21365 +
             ((C22010 - C22011) * C116 + (C22012 - C22013) * C47384) * C21366) *
                C47268) *
               C2332 +
           ((((C21504 - C21503) * C116 + (C21506 - C21505) * C47384) * C21364 +
             ((C21508 - C21507) * C116 + (C21510 - C21509) * C47384) * C21365 +
             ((C21511 - C21512) * C116 + (C21513 - C21514) * C47384) * C21366) *
                C3094 +
            (((C22007 - C22006) * C116 + (C22009 - C22008) * C47384) * C21364 +
             ((C22011 - C22010) * C116 + (C22013 - C22012) * C47384) * C21365 +
             ((C47108 * C1547 - C21367 * C1544) * C116 +
              (C47108 * C1553 - C21367 * C1550) * C47384) *
                 C21366) *
                C47268) *
               C47226) *
              C47455)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C47108 * C124 - C21367 * C117) * C116 +
             (C47108 * C138 - C21367 * C127) * C47384) *
                C21364 +
            ((C21479 - C21480) * C116 + (C21481 - C21482) * C47384) * C21365 +
            C21527 * C21366) *
               C47508 +
           (((C21367 * C414 - C47108 * C424) * C116 +
             (C21367 * C427 - C47108 * C444) * C47384) *
                C21364 +
            ((C21990 - C21991) * C116 + (C21992 - C21993) * C47384) * C21365 +
            C22344 * C21366) *
               C47505 +
           (((C47108 * C430 - C21367 * C417) * C116 +
             (C47108 * C447 - C21367 * C433) * C47384) *
                C21364 +
            ((C22324 - C22325) * C116 + (C22326 - C22327) * C47384) * C21365 +
            C22347 * C21366) *
               C47496 +
           (((C21367 * C1844 - C47108 * C1850) * C116 +
             (C21367 * C1853 - C47108 * C1862) * C47384) *
                C21364 +
            ((C23361 - C23362) * C116 + (C23363 - C23364) * C47384) * C21365 +
            ((C23365 - C23366) * C116 + (C23367 - C23368) * C47384) * C21366) *
               C47477) *
              C2332 +
          ((((C21480 - C21479) * C116 + (C21482 - C21481) * C47384) * C21364 +
            ((C21484 - C21483) * C116 + (C21486 - C21485) * C47384) * C21365 +
            C22204 * C21366) *
               C47508 +
           (((C21991 - C21990) * C116 + (C21993 - C21992) * C47384) * C21364 +
            ((C21995 - C21994) * C116 + (C21997 - C21996) * C47384) * C21365 +
            C22720 * C21366) *
               C47505 +
           (((C22325 - C22324) * C116 + (C22327 - C22326) * C47384) * C21364 +
            ((C22329 - C22328) * C116 + (C22331 - C22330) * C47384) * C21365 +
            ((C22336 - C22337) * C116 + (C22338 - C22339) * C47384) * C21366) *
               C47496 +
           (((C23362 - C23361) * C116 + (C23364 - C23363) * C47384) * C21364 +
            ((C23366 - C23365) * C116 + (C23368 - C23367) * C47384) * C21365 +
            ((C47108 * C23357 - C21367 * C23356) * C116 +
             (C47108 * C23359 - C21367 * C23358) * C47384) *
                C21366) *
               C47477) *
              C47226) *
         C47135) /
            (p * q * std::sqrt(p + q));
    d2ee[108] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C47108 * C124 - C21367 * C117) * C116 +
              (C47108 * C138 - C21367 * C127) * C47384) *
                 C21364 +
             ((C21479 - C21480) * C116 + (C21481 - C21482) * C47384) * C21365 +
             C21527 * C21366) *
                C47264 +
            (((C21367 * C414 - C47108 * C424) * C116 +
              (C21367 * C427 - C47108 * C444) * C47384) *
                 C21364 +
             ((C21990 - C21991) * C116 + (C21992 - C21993) * C47384) * C21365 +
             C22344 * C21366) *
                C47271 +
            (((C47108 * C430 - C21367 * C417) * C116 +
              (C47108 * C447 - C21367 * C433) * C47384) *
                 C21364 +
             ((C22324 - C22325) * C116 + (C22326 - C22327) * C47384) * C21365 +
             C22347 * C21366) *
                C3602) *
               C2332 +
           ((((C21480 - C21479) * C116 + (C21482 - C21481) * C47384) * C21364 +
             ((C21484 - C21483) * C116 + (C21486 - C21485) * C47384) * C21365 +
             C22204 * C21366) *
                C47264 +
            (((C21991 - C21990) * C116 + (C21993 - C21992) * C47384) * C21364 +
             ((C21995 - C21994) * C116 + (C21997 - C21996) * C47384) * C21365 +
             C22720 * C21366) *
                C47271 +
            (((C22325 - C22324) * C116 + (C22327 - C22326) * C47384) * C21364 +
             ((C22329 - C22328) * C116 + (C22331 - C22330) * C47384) * C21365 +
             ((C22336 - C22337) * C116 + (C22338 - C22339) * C47384) * C21366) *
                C3602) *
               C47226) *
              C47415 +
          (((((C21367 * C118 - C47108 * C125) * C116 +
              (C21367 * C128 - C47108 * C139) * C47384) *
                 C21364 +
             ((C21491 - C21492) * C116 + (C21493 - C21494) * C47384) * C21365 +
             C21528 * C21366) *
                C47264 +
            (((C47108 * C425 - C21367 * C415) * C116 +
              (C47108 * C445 - C21367 * C428) * C47384) *
                 C21364 +
             ((C21998 - C21999) * C116 + (C22000 - C22001) * C47384) * C21365 +
             C22609 * C21366) *
                C47271 +
            (((C21367 * C418 - C47108 * C431) * C116 +
              (C21367 * C434 - C47108 * C448) * C47384) *
                 C21364 +
             ((C23153 - C23154) * C116 + (C23155 - C23156) * C47384) * C21365 +
             ((C23157 - C23158) * C116 + (C23159 - C23160) * C47384) * C21366) *
                C3602) *
               C2332 +
           ((((C21492 - C21491) * C116 + (C21494 - C21493) * C47384) * C21364 +
             ((C21496 - C21495) * C116 + (C21498 - C21497) * C47384) * C21365 +
             C22454 * C21366) *
                C47264 +
            (((C21999 - C21998) * C116 + (C22001 - C22000) * C47384) * C21364 +
             ((C22003 - C22002) * C116 + (C22005 - C22004) * C47384) * C21365 +
             ((C22603 - C22604) * C116 + (C22605 - C22606) * C47384) * C21366) *
                C47271 +
            (((C23154 - C23153) * C116 + (C23156 - C23155) * C47384) * C21364 +
             ((C23158 - C23157) * C116 + (C23160 - C23159) * C47384) * C21365 +
             ((C47108 * C5808 - C21367 * C5806) * C116 +
              (C47108 * C5812 - C21367 * C5810) * C47384) *
                 C21366) *
                C3602) *
               C47226) *
              C47146)) /
        (p * q * std::sqrt(p + q));
    d2ee[109] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C47108 * C124 - C21367 * C117) * C116 +
              (C47108 * C138 - C21367 * C127) * C47384) *
                 C21364 +
             ((C21479 - C21480) * C116 + (C21481 - C21482) * C47384) * C21365 +
             C21527 * C21366) *
                C3094 +
            (((C21367 * C414 - C47108 * C424) * C116 +
              (C21367 * C427 - C47108 * C444) * C47384) *
                 C21364 +
             ((C21990 - C21991) * C116 + (C21992 - C21993) * C47384) * C21365 +
             C22344 * C21366) *
                C47268) *
               C2332 +
           ((((C21480 - C21479) * C116 + (C21482 - C21481) * C47384) * C21364 +
             ((C21484 - C21483) * C116 + (C21486 - C21485) * C47384) * C21365 +
             C22204 * C21366) *
                C3094 +
            (((C21991 - C21990) * C116 + (C21993 - C21992) * C47384) * C21364 +
             ((C21995 - C21994) * C116 + (C21997 - C21996) * C47384) * C21365 +
             C22720 * C21366) *
                C47268) *
               C47226) *
              C47497 +
          (((((C21367 * C118 - C47108 * C125) * C116 +
              (C21367 * C128 - C47108 * C139) * C47384) *
                 C21364 +
             ((C21491 - C21492) * C116 + (C21493 - C21494) * C47384) * C21365 +
             C21528 * C21366) *
                C3094 +
            (((C47108 * C425 - C21367 * C415) * C116 +
              (C47108 * C445 - C21367 * C428) * C47384) *
                 C21364 +
             ((C21998 - C21999) * C116 + (C22000 - C22001) * C47384) * C21365 +
             C22609 * C21366) *
                C47268) *
               C2332 +
           ((((C21492 - C21491) * C116 + (C21494 - C21493) * C47384) * C21364 +
             ((C21496 - C21495) * C116 + (C21498 - C21497) * C47384) * C21365 +
             C22454 * C21366) *
                C3094 +
            (((C21999 - C21998) * C116 + (C22001 - C22000) * C47384) * C21364 +
             ((C22003 - C22002) * C116 + (C22005 - C22004) * C47384) * C21365 +
             ((C22603 - C22604) * C116 + (C22605 - C22606) * C47384) * C21366) *
                C47268) *
               C47226) *
              C47484 +
          (((((C47108 * C126 - C21367 * C119) * C116 +
              (C47108 * C140 - C21367 * C129) * C47384) *
                 C21364 +
             ((C21503 - C21504) * C116 + (C21505 - C21506) * C47384) * C21365 +
             C21529 * C21366) *
                C3094 +
            (((C21367 * C416 - C47108 * C426) * C116 +
              (C21367 * C429 - C47108 * C446) * C47384) *
                 C21364 +
             ((C22006 - C22007) * C116 + (C22008 - C22009) * C47384) * C21365 +
             ((C22010 - C22011) * C116 + (C22012 - C22013) * C47384) * C21366) *
                C47268) *
               C2332 +
           ((((C21504 - C21503) * C116 + (C21506 - C21505) * C47384) * C21364 +
             ((C21508 - C21507) * C116 + (C21510 - C21509) * C47384) * C21365 +
             ((C21511 - C21512) * C116 + (C21513 - C21514) * C47384) * C21366) *
                C3094 +
            (((C22007 - C22006) * C116 + (C22009 - C22008) * C47384) * C21364 +
             ((C22011 - C22010) * C116 + (C22013 - C22012) * C47384) * C21365 +
             ((C47108 * C1547 - C21367 * C1544) * C116 +
              (C47108 * C1553 - C21367 * C1550) * C47384) *
                 C21366) *
                C47268) *
               C47226) *
              C47455)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C47108 * C124 - C21367 * C117) * C116 +
             (C47108 * C138 - C21367 * C127) * C47384) *
                C21364 +
            ((C21479 - C21480) * C116 + (C21481 - C21482) * C47384) * C21365 +
            C21527 * C21366) *
               C3094 +
           (((C21367 * C414 - C47108 * C424) * C116 +
             (C21367 * C427 - C47108 * C444) * C47384) *
                C21364 +
            ((C21990 - C21991) * C116 + (C21992 - C21993) * C47384) * C21365 +
            C22344 * C21366) *
               C47268) *
              C47507 +
          ((((C21480 - C21479) * C116 + (C21482 - C21481) * C47384) * C21364 +
            ((C21484 - C21483) * C116 + (C21486 - C21485) * C47384) * C21365 +
            C22204 * C21366) *
               C3094 +
           (((C21991 - C21990) * C116 + (C21993 - C21992) * C47384) * C21364 +
            ((C21995 - C21994) * C116 + (C21997 - C21996) * C47384) * C21365 +
            C22720 * C21366) *
               C47268) *
              C47503 +
          ((C21527 * C21364 +
            ((C21488 - C21487) * C116 + (C21490 - C21489) * C47384) * C21365 +
            C22207 * C21366) *
               C3094 +
           (C22344 * C21364 +
            ((C22333 - C22332) * C116 + (C22335 - C22334) * C47384) * C21365 +
            ((C22714 - C22715) * C116 + (C22716 - C22717) * C47384) * C21366) *
               C47268) *
              C47493 +
          ((C22204 * C21364 +
            ((C22193 - C22192) * C116 + (C22195 - C22194) * C47384) * C21365 +
            ((C22196 - C22197) * C116 + (C22198 - C22199) * C47384) * C21366) *
               C3094 +
           (C22720 * C21364 +
            ((C22715 - C22714) * C116 + (C22717 - C22716) * C47384) * C21365 +
            ((C47108 * C22708 - C21367 * C22707) * C116 +
             (C47108 * C22710 - C21367 * C22709) * C47384) *
                C21366) *
               C47268) *
              C47471) *
         C47135) /
            (p * q * std::sqrt(p + q));
    d2ee[110] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C47108 * C124 - C21367 * C117) * C116 +
             (C47108 * C138 - C21367 * C127) * C47384) *
                C21364 +
            ((C21479 - C21480) * C116 + (C21481 - C21482) * C47384) * C21365 +
            C21527 * C21366) *
               C47181 * C1284 +
           (((C21480 - C21479) * C116 + (C21482 - C21481) * C47384) * C21364 +
            ((C21484 - C21483) * C116 + (C21486 - C21485) * C47384) * C21365 +
            C22204 * C21366) *
               C47181 * C1285 +
           (C21527 * C21364 +
            ((C21488 - C21487) * C116 + (C21490 - C21489) * C47384) * C21365 +
            C22207 * C21366) *
               C47181 * C1286 +
           (C22204 * C21364 +
            ((C22193 - C22192) * C116 + (C22195 - C22194) * C47384) * C21365 +
            ((C22196 - C22197) * C116 + (C22198 - C22199) * C47384) * C21366) *
               C47181 * C47471) *
              C47415 +
          ((((C21367 * C118 - C47108 * C125) * C116 +
             (C21367 * C128 - C47108 * C139) * C47384) *
                C21364 +
            ((C21491 - C21492) * C116 + (C21493 - C21494) * C47384) * C21365 +
            C21528 * C21366) *
               C47181 * C1284 +
           (((C21492 - C21491) * C116 + (C21494 - C21493) * C47384) * C21364 +
            ((C21496 - C21495) * C116 + (C21498 - C21497) * C47384) * C21365 +
            C22454 * C21366) *
               C47181 * C1285 +
           (C21528 * C21364 +
            ((C21500 - C21499) * C116 + (C21502 - C21501) * C47384) * C21365 +
            ((C22448 - C22449) * C116 + (C22450 - C22451) * C47384) * C21366) *
               C47181 * C1286 +
           (C22454 * C21364 +
            ((C22449 - C22448) * C116 + (C22451 - C22450) * C47384) * C21365 +
            ((C47108 * C5638 - C21367 * C5636) * C116 +
             (C47108 * C5642 - C21367 * C5640) * C47384) *
                C21366) *
               C47181 * C47471) *
              C47146)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C47108 * C124 - C21367 * C117) * C116 +
             (C47108 * C138 - C21367 * C127) * C47384) *
                C21364 +
            ((C21479 - C21480) * C116 + (C21481 - C21482) * C47384) * C21365 +
            C21527 * C21366) *
               C47181 * C47429 +
           (((C21480 - C21479) * C116 + (C21482 - C21481) * C47384) * C21364 +
            ((C21484 - C21483) * C116 + (C21486 - C21485) * C47384) * C21365 +
            ((C21487 - C21488) * C116 + (C21489 - C21490) * C47384) * C21366) *
               C47181 * C47226) *
              C554 +
          ((((C21367 * C118 - C47108 * C125) * C116 +
             (C21367 * C128 - C47108 * C139) * C47384) *
                C21364 +
            ((C21491 - C21492) * C116 + (C21493 - C21494) * C47384) * C21365 +
            C21528 * C21366) *
               C47181 * C47429 +
           (((C21492 - C21491) * C116 + (C21494 - C21493) * C47384) * C21364 +
            ((C21496 - C21495) * C116 + (C21498 - C21497) * C47384) * C21365 +
            ((C21499 - C21500) * C116 + (C21501 - C21502) * C47384) * C21366) *
               C47181 * C47226) *
              C555 +
          ((((C47108 * C126 - C21367 * C119) * C116 +
             (C47108 * C140 - C21367 * C129) * C47384) *
                C21364 +
            ((C21503 - C21504) * C116 + (C21505 - C21506) * C47384) * C21365 +
            C21529 * C21366) *
               C47181 * C47429 +
           (((C21504 - C21503) * C116 + (C21506 - C21505) * C47384) * C21364 +
            ((C21508 - C21507) * C116 + (C21510 - C21509) * C47384) * C21365 +
            ((C21511 - C21512) * C116 + (C21513 - C21514) * C47384) * C21366) *
               C47181 * C47226) *
              C556 +
          ((((C21367 * C120 - C47108 * C130) * C116 +
             (C21367 * C131 - C47108 * C141) * C47384) *
                C21364 +
            ((C21738 - C21739) * C116 + (C21740 - C21741) * C47384) * C21365 +
            ((C21742 - C21743) * C116 + (C21744 - C21745) * C47384) * C21366) *
               C47181 * C47429 +
           (((C21739 - C21738) * C116 + (C21741 - C21740) * C47384) * C21364 +
            ((C21743 - C21742) * C116 + (C21745 - C21744) * C47384) * C21365 +
            ((C47108 * C1291 - C21367 * C1290) * C116 +
             (C47108 * C1293 - C21367 * C1292) * C47384) *
                C21366) *
               C47181 * C47226) *
              C47465)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C47108 * C124 - C21367 * C117) * C116 +
              (C47108 * C138 - C21367 * C127) * C47384) *
                 C21364 +
             ((C21479 - C21480) * C116 + (C21481 - C21482) * C47384) * C21365 +
             C21527 * C21366) *
                C1664 +
            (((C21367 * C414 - C47108 * C424) * C116 +
              (C21367 * C427 - C47108 * C444) * C47384) *
                 C21364 +
             ((C21990 - C21991) * C116 + (C21992 - C21993) * C47384) * C21365 +
             C22344 * C21366) *
                C1665 +
            (((C47108 * C430 - C21367 * C417) * C116 +
              (C47108 * C447 - C21367 * C433) * C47384) *
                 C21364 +
             ((C22324 - C22325) * C116 + (C22326 - C22327) * C47384) * C21365 +
             C22347 * C21366) *
                C47464) *
               C47429 +
           ((((C21480 - C21479) * C116 + (C21482 - C21481) * C47384) * C21364 +
             ((C21484 - C21483) * C116 + (C21486 - C21485) * C47384) * C21365 +
             C22204 * C21366) *
                C1664 +
            (((C21991 - C21990) * C116 + (C21993 - C21992) * C47384) * C21364 +
             ((C21995 - C21994) * C116 + (C21997 - C21996) * C47384) * C21365 +
             C22720 * C21366) *
                C1665 +
            (((C22325 - C22324) * C116 + (C22327 - C22326) * C47384) * C21364 +
             ((C22329 - C22328) * C116 + (C22331 - C22330) * C47384) * C21365 +
             ((C22336 - C22337) * C116 + (C22338 - C22339) * C47384) * C21366) *
                C47464) *
               C47226) *
              C47415 +
          (((((C21367 * C118 - C47108 * C125) * C116 +
              (C21367 * C128 - C47108 * C139) * C47384) *
                 C21364 +
             ((C21491 - C21492) * C116 + (C21493 - C21494) * C47384) * C21365 +
             C21528 * C21366) *
                C1664 +
            (((C47108 * C425 - C21367 * C415) * C116 +
              (C47108 * C445 - C21367 * C428) * C47384) *
                 C21364 +
             ((C21998 - C21999) * C116 + (C22000 - C22001) * C47384) * C21365 +
             C22609 * C21366) *
                C1665 +
            (((C21367 * C418 - C47108 * C431) * C116 +
              (C21367 * C434 - C47108 * C448) * C47384) *
                 C21364 +
             ((C23153 - C23154) * C116 + (C23155 - C23156) * C47384) * C21365 +
             ((C23157 - C23158) * C116 + (C23159 - C23160) * C47384) * C21366) *
                C47464) *
               C47429 +
           ((((C21492 - C21491) * C116 + (C21494 - C21493) * C47384) * C21364 +
             ((C21496 - C21495) * C116 + (C21498 - C21497) * C47384) * C21365 +
             C22454 * C21366) *
                C1664 +
            (((C21999 - C21998) * C116 + (C22001 - C22000) * C47384) * C21364 +
             ((C22003 - C22002) * C116 + (C22005 - C22004) * C47384) * C21365 +
             ((C22603 - C22604) * C116 + (C22605 - C22606) * C47384) * C21366) *
                C1665 +
            (((C23154 - C23153) * C116 + (C23156 - C23155) * C47384) * C21364 +
             ((C23158 - C23157) * C116 + (C23160 - C23159) * C47384) * C21365 +
             ((C47108 * C5808 - C21367 * C5806) * C116 +
              (C47108 * C5812 - C21367 * C5810) * C47384) *
                 C21366) *
                C47464) *
               C47226) *
              C47146)) /
            (p * q * std::sqrt(p + q));
    d2ee[111] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C47108 * C124 - C21367 * C117) * C116 +
             (C47108 * C138 - C21367 * C127) * C47384) *
                C21364 +
            ((C21479 - C21480) * C116 + (C21481 - C21482) * C47384) * C21365 +
            C21527 * C21366) *
               C47430 +
           (((C21367 * C414 - C47108 * C424) * C116 +
             (C21367 * C427 - C47108 * C444) * C47384) *
                C21364 +
            ((C21990 - C21991) * C116 + (C21992 - C21993) * C47384) * C21365 +
            C22344 * C21366) *
               C47268) *
              C1284 +
          ((((C21480 - C21479) * C116 + (C21482 - C21481) * C47384) * C21364 +
            ((C21484 - C21483) * C116 + (C21486 - C21485) * C47384) * C21365 +
            C22204 * C21366) *
               C47430 +
           (((C21991 - C21990) * C116 + (C21993 - C21992) * C47384) * C21364 +
            ((C21995 - C21994) * C116 + (C21997 - C21996) * C47384) * C21365 +
            C22720 * C21366) *
               C47268) *
              C1285 +
          ((C21527 * C21364 +
            ((C21488 - C21487) * C116 + (C21490 - C21489) * C47384) * C21365 +
            C22207 * C21366) *
               C47430 +
           (C22344 * C21364 +
            ((C22333 - C22332) * C116 + (C22335 - C22334) * C47384) * C21365 +
            ((C22714 - C22715) * C116 + (C22716 - C22717) * C47384) * C21366) *
               C47268) *
              C1286 +
          ((C22204 * C21364 +
            ((C22193 - C22192) * C116 + (C22195 - C22194) * C47384) * C21365 +
            ((C22196 - C22197) * C116 + (C22198 - C22199) * C47384) * C21366) *
               C47430 +
           (C22720 * C21364 +
            ((C22715 - C22714) * C116 + (C22717 - C22716) * C47384) * C21365 +
            ((C47108 * C22708 - C21367 * C22707) * C116 +
             (C47108 * C22710 - C21367 * C22709) * C47384) *
                C21366) *
               C47268) *
              C47471) *
         C47135) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C47108 * C124 - C21367 * C117) * C116 +
              (C47108 * C138 - C21367 * C127) * C47384) *
                 C21364 +
             ((C21479 - C21480) * C116 + (C21481 - C21482) * C47384) * C21365 +
             C21527 * C21366) *
                C47430 +
            (((C21367 * C414 - C47108 * C424) * C116 +
              (C21367 * C427 - C47108 * C444) * C47384) *
                 C21364 +
             ((C21990 - C21991) * C116 + (C21992 - C21993) * C47384) * C21365 +
             ((C21994 - C21995) * C116 + (C21996 - C21997) * C47384) * C21366) *
                C47268) *
               C47429 +
           ((((C21480 - C21479) * C116 + (C21482 - C21481) * C47384) * C21364 +
             ((C21484 - C21483) * C116 + (C21486 - C21485) * C47384) * C21365 +
             ((C21487 - C21488) * C116 + (C21489 - C21490) * C47384) * C21366) *
                C47430 +
            (((C21991 - C21990) * C116 + (C21993 - C21992) * C47384) * C21364 +
             ((C21995 - C21994) * C116 + (C21997 - C21996) * C47384) * C21365 +
             ((C47108 * C1545 - C21367 * C1542) * C116 +
              (C47108 * C1551 - C21367 * C1548) * C47384) *
                 C21366) *
                C47268) *
               C47226) *
              C258 +
          (((((C21367 * C118 - C47108 * C125) * C116 +
              (C21367 * C128 - C47108 * C139) * C47384) *
                 C21364 +
             ((C21491 - C21492) * C116 + (C21493 - C21494) * C47384) * C21365 +
             C21528 * C21366) *
                C47430 +
            (((C47108 * C425 - C21367 * C415) * C116 +
              (C47108 * C445 - C21367 * C428) * C47384) *
                 C21364 +
             ((C21998 - C21999) * C116 + (C22000 - C22001) * C47384) * C21365 +
             ((C22002 - C22003) * C116 + (C22004 - C22005) * C47384) * C21366) *
                C47268) *
               C47429 +
           ((((C21492 - C21491) * C116 + (C21494 - C21493) * C47384) * C21364 +
             ((C21496 - C21495) * C116 + (C21498 - C21497) * C47384) * C21365 +
             ((C21499 - C21500) * C116 + (C21501 - C21502) * C47384) * C21366) *
                C47430 +
            (((C21999 - C21998) * C116 + (C22001 - C22000) * C47384) * C21364 +
             ((C22003 - C22002) * C116 + (C22005 - C22004) * C47384) * C21365 +
             ((C21367 * C1543 - C47108 * C1546) * C116 +
              (C21367 * C1549 - C47108 * C1552) * C47384) *
                 C21366) *
                C47268) *
               C47226) *
              C259 +
          (((((C47108 * C126 - C21367 * C119) * C116 +
              (C47108 * C140 - C21367 * C129) * C47384) *
                 C21364 +
             ((C21503 - C21504) * C116 + (C21505 - C21506) * C47384) * C21365 +
             C21529 * C21366) *
                C47430 +
            (((C21367 * C416 - C47108 * C426) * C116 +
              (C21367 * C429 - C47108 * C446) * C47384) *
                 C21364 +
             ((C22006 - C22007) * C116 + (C22008 - C22009) * C47384) * C21365 +
             ((C22010 - C22011) * C116 + (C22012 - C22013) * C47384) * C21366) *
                C47268) *
               C47429 +
           ((((C21504 - C21503) * C116 + (C21506 - C21505) * C47384) * C21364 +
             ((C21508 - C21507) * C116 + (C21510 - C21509) * C47384) * C21365 +
             ((C21511 - C21512) * C116 + (C21513 - C21514) * C47384) * C21366) *
                C47430 +
            (((C22007 - C22006) * C116 + (C22009 - C22008) * C47384) * C21364 +
             ((C22011 - C22010) * C116 + (C22013 - C22012) * C47384) * C21365 +
             ((C47108 * C1547 - C21367 * C1544) * C116 +
              (C47108 * C1553 - C21367 * C1550) * C47384) *
                 C21366) *
                C47268) *
               C47226) *
              C47455)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C47108 * C124 - C21367 * C117) * C116 +
             (C47108 * C138 - C21367 * C127) * C47384) *
                C21364 +
            ((C21479 - C21480) * C116 + (C21481 - C21482) * C47384) * C21365 +
            C21527 * C21366) *
               C2116 +
           (((C21367 * C414 - C47108 * C424) * C116 +
             (C21367 * C427 - C47108 * C444) * C47384) *
                C21364 +
            ((C21990 - C21991) * C116 + (C21992 - C21993) * C47384) * C21365 +
            C22344 * C21366) *
               C2117 +
           (((C47108 * C430 - C21367 * C417) * C116 +
             (C47108 * C447 - C21367 * C433) * C47384) *
                C21364 +
            ((C22324 - C22325) * C116 + (C22326 - C22327) * C47384) * C21365 +
            C22347 * C21366) *
               C2118 +
           (((C21367 * C1844 - C47108 * C1850) * C116 +
             (C21367 * C1853 - C47108 * C1862) * C47384) *
                C21364 +
            ((C23361 - C23362) * C116 + (C23363 - C23364) * C47384) * C21365 +
            ((C23365 - C23366) * C116 + (C23367 - C23368) * C47384) * C21366) *
               C47477) *
              C47429 +
          ((((C21480 - C21479) * C116 + (C21482 - C21481) * C47384) * C21364 +
            ((C21484 - C21483) * C116 + (C21486 - C21485) * C47384) * C21365 +
            C22204 * C21366) *
               C2116 +
           (((C21991 - C21990) * C116 + (C21993 - C21992) * C47384) * C21364 +
            ((C21995 - C21994) * C116 + (C21997 - C21996) * C47384) * C21365 +
            C22720 * C21366) *
               C2117 +
           (((C22325 - C22324) * C116 + (C22327 - C22326) * C47384) * C21364 +
            ((C22329 - C22328) * C116 + (C22331 - C22330) * C47384) * C21365 +
            ((C22336 - C22337) * C116 + (C22338 - C22339) * C47384) * C21366) *
               C2118 +
           (((C23362 - C23361) * C116 + (C23364 - C23363) * C47384) * C21364 +
            ((C23366 - C23365) * C116 + (C23368 - C23367) * C47384) * C21365 +
            ((C47108 * C23357 - C21367 * C23356) * C116 +
             (C47108 * C23359 - C21367 * C23358) * C47384) *
                C21366) *
               C47477) *
              C47226) *
         C47135) /
            (p * q * std::sqrt(p + q));
    d2ee[112] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C47108 * C124 - C21367 * C117) * C116 +
                (C47108 * C138 - C21367 * C127) * C47384) *
                   C21364 +
               ((C47108 * C271 - C21367 * C261) * C116 +
                (C47108 * C291 - C21367 * C274) * C47384) *
                   C21365 +
               ((C47108 * C277 - C21367 * C264) * C116 +
                (C47108 * C294 - C21367 * C280) * C47384) *
                   C21366) *
                  C47181 * C47163 * C108 +
              (((C21367 * C118 - C47108 * C125) * C116 +
                (C21367 * C128 - C47108 * C139) * C47384) *
                   C21364 +
               ((C21367 * C262 - C47108 * C272) * C116 +
                (C21367 * C275 - C47108 * C292) * C47384) *
                   C21365 +
               ((C21367 * C265 - C47108 * C278) * C116 +
                (C21367 * C281 - C47108 * C295) * C47384) *
                   C21366) *
                  C47181 * C47163 * C109 +
              (((C47108 * C126 - C21367 * C119) * C116 +
                (C47108 * C140 - C21367 * C129) * C47384) *
                   C21364 +
               ((C47108 * C273 - C21367 * C263) * C116 +
                (C47108 * C293 - C21367 * C276) * C47384) *
                   C21365 +
               ((C47108 * C279 - C21367 * C266) * C116 +
                (C47108 * C296 - C21367 * C282) * C47384) *
                   C21366) *
                  C47181 * C47163 * C110 +
              (((C21367 * C120 - C47108 * C130) * C116 +
                (C21367 * C131 - C47108 * C141) * C47384) *
                   C21364 +
               ((C21367 * C267 - C47108 * C283) * C116 +
                (C21367 * C284 - C47108 * C297) * C47384) *
                   C21365 +
               ((C21367 * C268 - C47108 * C285) * C116 +
                (C21367 * C286 - C47108 * C298) * C47384) *
                   C21366) *
                  C47181 * C47163 * C111 +
              (((C47108 * C132 - C21367 * C121) * C116 +
                (C47108 * C142 - C21367 * C133) * C47384) *
                   C21364 +
               ((C47108 * C287 - C21367 * C269) * C116 +
                (C47108 * C299 - C21367 * C288) * C47384) *
                   C21365 +
               ((C47108 * C289 - C21367 * C270) * C116 +
                (C47108 * C300 - C21367 * C290) * C47384) *
                   C21366) *
                  C47181 * C47163 * C112) +
         0.5 * std::pow(Pi, 2.5) *
             (((((C47108 * C124 - C21367 * C117) * C116 +
                 (C47108 * C138 - C21367 * C127) * C47384) *
                    C21364 +
                ((C21479 - C21480) * C116 + (C21481 - C21482) * C47384) *
                    C21365 +
                C21527 * C21366) *
                   C47181 * C47500 +
               (((C21480 - C21479) * C116 + (C21482 - C21481) * C47384) *
                    C21364 +
                ((C21484 - C21483) * C116 + (C21486 - C21485) * C47384) *
                    C21365 +
                ((C21487 - C21488) * C116 + (C21489 - C21490) * C47384) *
                    C21366) *
                   C47181 * C47488 +
               (C21527 * C21364 +
                ((C21488 - C21487) * C116 + (C21490 - C21489) * C47384) *
                    C21365 +
                ((C47108 * C1028 - C21367 * C1019) * C116 +
                 (C47108 * C1037 - C21367 * C1031) * C47384) *
                    C21366) *
                   C47181 * C47461) *
                  C258 +
              ((((C21367 * C118 - C47108 * C125) * C116 +
                 (C21367 * C128 - C47108 * C139) * C47384) *
                    C21364 +
                ((C21491 - C21492) * C116 + (C21493 - C21494) * C47384) *
                    C21365 +
                C21528 * C21366) *
                   C47181 * C47500 +
               (((C21492 - C21491) * C116 + (C21494 - C21493) * C47384) *
                    C21364 +
                ((C21496 - C21495) * C116 + (C21498 - C21497) * C47384) *
                    C21365 +
                ((C21499 - C21500) * C116 + (C21501 - C21502) * C47384) *
                    C21366) *
                   C47181 * C47488 +
               (C21528 * C21364 +
                ((C21500 - C21499) * C116 + (C21502 - C21501) * C47384) *
                    C21365 +
                ((C21367 * C1020 - C47108 * C1029) * C116 +
                 (C21367 * C1032 - C47108 * C1038) * C47384) *
                    C21366) *
                   C47181 * C47461) *
                  C259 +
              ((((C47108 * C126 - C21367 * C119) * C116 +
                 (C47108 * C140 - C21367 * C129) * C47384) *
                    C21364 +
                ((C21503 - C21504) * C116 + (C21505 - C21506) * C47384) *
                    C21365 +
                C21529 * C21366) *
                   C47181 * C47500 +
               (((C21504 - C21503) * C116 + (C21506 - C21505) * C47384) *
                    C21364 +
                ((C21508 - C21507) * C116 + (C21510 - C21509) * C47384) *
                    C21365 +
                ((C21511 - C21512) * C116 + (C21513 - C21514) * C47384) *
                    C21366) *
                   C47181 * C47488 +
               (C21529 * C21364 +
                ((C21512 - C21511) * C116 + (C21514 - C21513) * C47384) *
                    C21365 +
                ((C47108 * C1030 - C21367 * C1021) * C116 +
                 (C47108 * C1039 - C21367 * C1033) * C47384) *
                    C21366) *
                   C47181 * C47461) *
                  C47455)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C47108 * C124 - C21367 * C117) * C116 +
             (C47108 * C138 - C21367 * C127) * C47384) *
                C21364 +
            ((C21479 - C21480) * C116 + (C21481 - C21482) * C47384) * C21365 +
            C21527 * C21366) *
               C47501 +
           (((C21367 * C414 - C47108 * C424) * C116 +
             (C21367 * C427 - C47108 * C444) * C47384) *
                C21364 +
            ((C21367 * C812 - C47108 * C817) * C116 +
             (C21367 * C820 - C47108 * C827) * C47384) *
                C21365 +
            ((C21367 * C1153 - C47108 * C1165) * C116 +
             (C21367 * C1168 - C47108 * C1180) * C47384) *
                C21366) *
               C47490 +
           (((C47108 * C430 - C21367 * C417) * C116 +
             (C47108 * C447 - C21367 * C433) * C47384) *
                C21364 +
            ((C47108 * C1159 - C21367 * C1150) * C116 +
             (C47108 * C1177 - C21367 * C1162) * C47384) *
                C21365 +
            ((C47108 * C1171 - C21367 * C1156) * C116 +
             (C47108 * C1183 - C21367 * C1174) * C47384) *
                C21366) *
               C47464) *
              C47163 * C258 +
          ((((C21367 * C118 - C47108 * C125) * C116 +
             (C21367 * C128 - C47108 * C139) * C47384) *
                C21364 +
            ((C21491 - C21492) * C116 + (C21493 - C21494) * C47384) * C21365 +
            C21528 * C21366) *
               C47501 +
           (((C47108 * C425 - C21367 * C415) * C116 +
             (C47108 * C445 - C21367 * C428) * C47384) *
                C21364 +
            ((C47108 * C818 - C21367 * C813) * C116 +
             (C47108 * C828 - C21367 * C821) * C47384) *
                C21365 +
            ((C47108 * C1166 - C21367 * C1154) * C116 +
             (C47108 * C1181 - C21367 * C1169) * C47384) *
                C21366) *
               C47490 +
           (((C21367 * C418 - C47108 * C431) * C116 +
             (C21367 * C434 - C47108 * C448) * C47384) *
                C21364 +
            ((C21367 * C1151 - C47108 * C1160) * C116 +
             (C21367 * C1163 - C47108 * C1178) * C47384) *
                C21365 +
            ((C21367 * C1157 - C47108 * C1172) * C116 +
             (C21367 * C1175 - C47108 * C1184) * C47384) *
                C21366) *
               C47464) *
              C47163 * C259 +
          ((((C47108 * C126 - C21367 * C119) * C116 +
             (C47108 * C140 - C21367 * C129) * C47384) *
                C21364 +
            ((C21503 - C21504) * C116 + (C21505 - C21506) * C47384) * C21365 +
            C21529 * C21366) *
               C47501 +
           (((C21367 * C416 - C47108 * C426) * C116 +
             (C21367 * C429 - C47108 * C446) * C47384) *
                C21364 +
            ((C21367 * C814 - C47108 * C819) * C116 +
             (C21367 * C822 - C47108 * C829) * C47384) *
                C21365 +
            ((C21367 * C1155 - C47108 * C1167) * C116 +
             (C21367 * C1170 - C47108 * C1182) * C47384) *
                C21366) *
               C47490 +
           (((C47108 * C432 - C21367 * C419) * C116 +
             (C47108 * C449 - C21367 * C435) * C47384) *
                C21364 +
            ((C47108 * C1161 - C21367 * C1152) * C116 +
             (C47108 * C1179 - C21367 * C1164) * C47384) *
                C21365 +
            ((C47108 * C1173 - C21367 * C1158) * C116 +
             (C47108 * C1185 - C21367 * C1176) * C47384) *
                C21366) *
               C47464) *
              C47163 * C47455)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C47108 * C124 - C21367 * C117) * C116 +
             (C47108 * C138 - C21367 * C127) * C47384) *
                C21364 +
            ((C21479 - C21480) * C116 + (C21481 - C21482) * C47384) * C21365 +
            C21527 * C21366) *
               C47181 * C942 +
           (((C21480 - C21479) * C116 + (C21482 - C21481) * C47384) * C21364 +
            ((C21484 - C21483) * C116 + (C21486 - C21485) * C47384) * C21365 +
            ((C21487 - C21488) * C116 + (C21489 - C21490) * C47384) * C21366) *
               C47181 * C943 +
           (C21527 * C21364 +
            ((C21488 - C21487) * C116 + (C21490 - C21489) * C47384) * C21365 +
            ((C47108 * C1028 - C21367 * C1019) * C116 +
             (C47108 * C1037 - C21367 * C1031) * C47384) *
                C21366) *
               C47181 * C47461) *
              C47497 +
          ((((C21367 * C118 - C47108 * C125) * C116 +
             (C21367 * C128 - C47108 * C139) * C47384) *
                C21364 +
            ((C21491 - C21492) * C116 + (C21493 - C21494) * C47384) * C21365 +
            C21528 * C21366) *
               C47181 * C942 +
           (((C21492 - C21491) * C116 + (C21494 - C21493) * C47384) * C21364 +
            ((C21496 - C21495) * C116 + (C21498 - C21497) * C47384) * C21365 +
            ((C21499 - C21500) * C116 + (C21501 - C21502) * C47384) * C21366) *
               C47181 * C943 +
           (C21528 * C21364 +
            ((C21500 - C21499) * C116 + (C21502 - C21501) * C47384) * C21365 +
            ((C21367 * C1020 - C47108 * C1029) * C116 +
             (C21367 * C1032 - C47108 * C1038) * C47384) *
                C21366) *
               C47181 * C47461) *
              C47484 +
          ((((C47108 * C126 - C21367 * C119) * C116 +
             (C47108 * C140 - C21367 * C129) * C47384) *
                C21364 +
            ((C21503 - C21504) * C116 + (C21505 - C21506) * C47384) * C21365 +
            C21529 * C21366) *
               C47181 * C942 +
           (((C21504 - C21503) * C116 + (C21506 - C21505) * C47384) * C21364 +
            ((C21508 - C21507) * C116 + (C21510 - C21509) * C47384) * C21365 +
            ((C21511 - C21512) * C116 + (C21513 - C21514) * C47384) * C21366) *
               C47181 * C943 +
           (C21529 * C21364 +
            ((C21512 - C21511) * C116 + (C21514 - C21513) * C47384) * C21365 +
            ((C47108 * C1030 - C21367 * C1021) * C116 +
             (C47108 * C1039 - C21367 * C1033) * C47384) *
                C21366) *
               C47181 * C47461) *
              C47455)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C47108 * C124 - C21367 * C117) * C116 +
            (C47108 * C138 - C21367 * C127) * C47384) *
               C21364 +
           ((C21479 - C21480) * C116 + (C21481 - C21482) * C47384) * C21365 +
           C21527 * C21366) *
              C47181 * C1010 +
          (((C21480 - C21479) * C116 + (C21482 - C21481) * C47384) * C21364 +
           ((C21484 - C21483) * C116 + (C21486 - C21485) * C47384) * C21365 +
           C22204 * C21366) *
              C47181 * C1011 +
          (C21527 * C21364 +
           ((C21488 - C21487) * C116 + (C21490 - C21489) * C47384) * C21365 +
           C22207 * C21366) *
              C47181 * C1012 +
          (C22204 * C21364 +
           ((C22193 - C22192) * C116 + (C22195 - C22194) * C47384) * C21365 +
           ((C22196 - C22197) * C116 + (C22198 - C22199) * C47384) * C21366) *
              C47181 * C1013 +
          (C22207 * C21364 +
           ((C22197 - C22196) * C116 + (C22199 - C22198) * C47384) * C21365 +
           ((C47108 * C22186 - C21367 * C22185) * C116 +
            (C47108 * C22188 - C21367 * C22187) * C47384) *
               C21366) *
              C47181 * C1014) *
         C47135) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C47108 * C124 - C21367 * C117) * C116 +
             (C47108 * C138 - C21367 * C127) * C47384) *
                C21364 +
            ((C21479 - C21480) * C116 + (C21481 - C21482) * C47384) * C21365 +
            C21527 * C21366) *
               C47501 +
           (((C21367 * C414 - C47108 * C424) * C116 +
             (C21367 * C427 - C47108 * C444) * C47384) *
                C21364 +
            ((C21990 - C21991) * C116 + (C21992 - C21993) * C47384) * C21365 +
            C22344 * C21366) *
               C47490 +
           (((C47108 * C430 - C21367 * C417) * C116 +
             (C47108 * C447 - C21367 * C433) * C47384) *
                C21364 +
            ((C22324 - C22325) * C116 + (C22326 - C22327) * C47384) * C21365 +
            C22347 * C21366) *
               C47464) *
              C942 +
          ((((C21480 - C21479) * C116 + (C21482 - C21481) * C47384) * C21364 +
            ((C21484 - C21483) * C116 + (C21486 - C21485) * C47384) * C21365 +
            C22204 * C21366) *
               C47501 +
           (((C21991 - C21990) * C116 + (C21993 - C21992) * C47384) * C21364 +
            ((C21995 - C21994) * C116 + (C21997 - C21996) * C47384) * C21365 +
            ((C22332 - C22333) * C116 + (C22334 - C22335) * C47384) * C21366) *
               C47490 +
           (((C22325 - C22324) * C116 + (C22327 - C22326) * C47384) * C21364 +
            ((C22329 - C22328) * C116 + (C22331 - C22330) * C47384) * C21365 +
            ((C22336 - C22337) * C116 + (C22338 - C22339) * C47384) * C21366) *
               C47464) *
              C943 +
          ((C21527 * C21364 +
            ((C21488 - C21487) * C116 + (C21490 - C21489) * C47384) * C21365 +
            C22207 * C21366) *
               C47501 +
           (C22344 * C21364 +
            ((C22333 - C22332) * C116 + (C22335 - C22334) * C47384) * C21365 +
            ((C21367 * C6307 - C47108 * C6309) * C116 +
             (C21367 * C6311 - C47108 * C6313) * C47384) *
                C21366) *
               C47490 +
           (C22347 * C21364 +
            ((C22337 - C22336) * C116 + (C22339 - C22338) * C47384) * C21365 +
            ((C47108 * C22318 - C21367 * C22317) * C116 +
             (C47108 * C22320 - C21367 * C22319) * C47384) *
                C21366) *
               C47464) *
              C47461) *
         C47135) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C47108 * C124 - C21367 * C117) * C116 +
             (C47108 * C138 - C21367 * C127) * C47384) *
                C21364 +
            ((C21479 - C21480) * C116 + (C21481 - C21482) * C47384) * C21365 +
            C21527 * C21366) *
               C1664 +
           (((C21367 * C414 - C47108 * C424) * C116 +
             (C21367 * C427 - C47108 * C444) * C47384) *
                C21364 +
            ((C21990 - C21991) * C116 + (C21992 - C21993) * C47384) * C21365 +
            C22344 * C21366) *
               C1665 +
           (((C47108 * C430 - C21367 * C417) * C116 +
             (C47108 * C447 - C21367 * C433) * C47384) *
                C21364 +
            ((C22324 - C22325) * C116 + (C22326 - C22327) * C47384) * C21365 +
            C22347 * C21366) *
               C47464) *
              C47163 * C47497 +
          ((((C21367 * C118 - C47108 * C125) * C116 +
             (C21367 * C128 - C47108 * C139) * C47384) *
                C21364 +
            ((C21491 - C21492) * C116 + (C21493 - C21494) * C47384) * C21365 +
            C21528 * C21366) *
               C1664 +
           (((C47108 * C425 - C21367 * C415) * C116 +
             (C47108 * C445 - C21367 * C428) * C47384) *
                C21364 +
            ((C21998 - C21999) * C116 + (C22000 - C22001) * C47384) * C21365 +
            C22609 * C21366) *
               C1665 +
           (((C21367 * C418 - C47108 * C431) * C116 +
             (C21367 * C434 - C47108 * C448) * C47384) *
                C21364 +
            ((C21367 * C1151 - C47108 * C1160) * C116 +
             (C21367 * C1163 - C47108 * C1178) * C47384) *
                C21365 +
            ((C21367 * C1157 - C47108 * C1172) * C116 +
             (C21367 * C1175 - C47108 * C1184) * C47384) *
                C21366) *
               C47464) *
              C47163 * C47484 +
          ((((C47108 * C126 - C21367 * C119) * C116 +
             (C47108 * C140 - C21367 * C129) * C47384) *
                C21364 +
            ((C21503 - C21504) * C116 + (C21505 - C21506) * C47384) * C21365 +
            C21529 * C21366) *
               C1664 +
           (((C21367 * C416 - C47108 * C426) * C116 +
             (C21367 * C429 - C47108 * C446) * C47384) *
                C21364 +
            ((C22006 - C22007) * C116 + (C22008 - C22009) * C47384) * C21365 +
            ((C22010 - C22011) * C116 + (C22012 - C22013) * C47384) * C21366) *
               C1665 +
           (((C47108 * C432 - C21367 * C419) * C116 +
             (C47108 * C449 - C21367 * C435) * C47384) *
                C21364 +
            ((C47108 * C1161 - C21367 * C1152) * C116 +
             (C47108 * C1179 - C21367 * C1164) * C47384) *
                C21365 +
            ((C47108 * C1173 - C21367 * C1158) * C116 +
             (C47108 * C1185 - C21367 * C1176) * C47384) *
                C21366) *
               C47464) *
              C47163 * C47455)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C47108 * C124 - C21367 * C117) * C116 +
             (C47108 * C138 - C21367 * C127) * C47384) *
                C21364 +
            ((C21479 - C21480) * C116 + (C21481 - C21482) * C47384) * C21365 +
            C21527 * C21366) *
               C1664 +
           (((C21367 * C414 - C47108 * C424) * C116 +
             (C21367 * C427 - C47108 * C444) * C47384) *
                C21364 +
            ((C21990 - C21991) * C116 + (C21992 - C21993) * C47384) * C21365 +
            C22344 * C21366) *
               C1665 +
           (((C47108 * C430 - C21367 * C417) * C116 +
             (C47108 * C447 - C21367 * C433) * C47384) *
                C21364 +
            ((C22324 - C22325) * C116 + (C22326 - C22327) * C47384) * C21365 +
            C22347 * C21366) *
               C47464) *
              C47500 +
          ((((C21480 - C21479) * C116 + (C21482 - C21481) * C47384) * C21364 +
            ((C21484 - C21483) * C116 + (C21486 - C21485) * C47384) * C21365 +
            C22204 * C21366) *
               C1664 +
           (((C21991 - C21990) * C116 + (C21993 - C21992) * C47384) * C21364 +
            ((C21995 - C21994) * C116 + (C21997 - C21996) * C47384) * C21365 +
            C22720 * C21366) *
               C1665 +
           (((C22325 - C22324) * C116 + (C22327 - C22326) * C47384) * C21364 +
            ((C22329 - C22328) * C116 + (C22331 - C22330) * C47384) * C21365 +
            ((C22336 - C22337) * C116 + (C22338 - C22339) * C47384) * C21366) *
               C47464) *
              C47488 +
          ((C21527 * C21364 +
            ((C21488 - C21487) * C116 + (C21490 - C21489) * C47384) * C21365 +
            C22207 * C21366) *
               C1664 +
           (C22344 * C21364 +
            ((C22333 - C22332) * C116 + (C22335 - C22334) * C47384) * C21365 +
            ((C22714 - C22715) * C116 + (C22716 - C22717) * C47384) * C21366) *
               C1665 +
           (C22347 * C21364 +
            ((C22337 - C22336) * C116 + (C22339 - C22338) * C47384) * C21365 +
            ((C47108 * C22318 - C21367 * C22317) * C116 +
             (C47108 * C22320 - C21367 * C22319) * C47384) *
                C21366) *
               C47464) *
              C47461) *
         C47135) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C47108 * C124 - C21367 * C117) * C116 +
            (C47108 * C138 - C21367 * C127) * C47384) *
               C21364 +
           ((C21479 - C21480) * C116 + (C21481 - C21482) * C47384) * C21365 +
           C21527 * C21366) *
              C1839 +
          (((C21367 * C414 - C47108 * C424) * C116 +
            (C21367 * C427 - C47108 * C444) * C47384) *
               C21364 +
           ((C21990 - C21991) * C116 + (C21992 - C21993) * C47384) * C21365 +
           C22344 * C21366) *
              C1840 +
          (((C47108 * C430 - C21367 * C417) * C116 +
            (C47108 * C447 - C21367 * C433) * C47384) *
               C21364 +
           ((C22324 - C22325) * C116 + (C22326 - C22327) * C47384) * C21365 +
           C22347 * C21366) *
              C1841 +
          (((C21367 * C1844 - C47108 * C1850) * C116 +
            (C21367 * C1853 - C47108 * C1862) * C47384) *
               C21364 +
           ((C21367 * C2222 - C47108 * C2225) * C116 +
            (C21367 * C2228 - C47108 * C2231) * C47384) *
               C21365 +
           ((C21367 * C7167 - C47108 * C7169) * C116 +
            (C21367 * C7171 - C47108 * C7173) * C47384) *
               C21366) *
              C1842 +
          (((C47108 * C1856 - C21367 * C1847) * C116 +
            (C47108 * C1865 - C21367 * C1859) * C47384) *
               C21364 +
           ((C47108 * C6699 - C21367 * C6697) * C116 +
            (C47108 * C6703 - C21367 * C6701) * C47384) *
               C21365 +
           ((C47108 * C23003 - C21367 * C23002) * C116 +
            (C47108 * C23005 - C21367 * C23004) * C47384) *
               C21366) *
              C1843) *
         C47163 * C47135) /
            (p * q * std::sqrt(p + q));
    d2ee[113] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C47108 * C124 - C21367 * C117) * C116 +
              (C47108 * C138 - C21367 * C127) * C47384) *
                 C21364 +
             ((C21479 - C21480) * C116 + (C21481 - C21482) * C47384) * C21365 +
             C21527 * C21366) *
                C47430 +
            (((C21367 * C414 - C47108 * C424) * C116 +
              (C21367 * C427 - C47108 * C444) * C47384) *
                 C21364 +
             ((C21990 - C21991) * C116 + (C21992 - C21993) * C47384) * C21365 +
             C22344 * C21366) *
                C47268) *
               C942 +
           ((((C21480 - C21479) * C116 + (C21482 - C21481) * C47384) * C21364 +
             ((C21484 - C21483) * C116 + (C21486 - C21485) * C47384) * C21365 +
             C22204 * C21366) *
                C47430 +
            (((C21991 - C21990) * C116 + (C21993 - C21992) * C47384) * C21364 +
             ((C21995 - C21994) * C116 + (C21997 - C21996) * C47384) * C21365 +
             ((C22332 - C22333) * C116 + (C22334 - C22335) * C47384) * C21366) *
                C47268) *
               C943 +
           ((C21527 * C21364 +
             ((C21488 - C21487) * C116 + (C21490 - C21489) * C47384) * C21365 +
             C22207 * C21366) *
                C47430 +
            (C22344 * C21364 +
             ((C22333 - C22332) * C116 + (C22335 - C22334) * C47384) * C21365 +
             ((C21367 * C6307 - C47108 * C6309) * C116 +
              (C21367 * C6311 - C47108 * C6313) * C47384) *
                 C21366) *
                C47268) *
               C47461) *
              C47415 +
          (((((C21367 * C118 - C47108 * C125) * C116 +
              (C21367 * C128 - C47108 * C139) * C47384) *
                 C21364 +
             ((C21491 - C21492) * C116 + (C21493 - C21494) * C47384) * C21365 +
             C21528 * C21366) *
                C47430 +
            (((C47108 * C425 - C21367 * C415) * C116 +
              (C47108 * C445 - C21367 * C428) * C47384) *
                 C21364 +
             ((C21998 - C21999) * C116 + (C22000 - C22001) * C47384) * C21365 +
             C22609 * C21366) *
                C47268) *
               C942 +
           ((((C21492 - C21491) * C116 + (C21494 - C21493) * C47384) * C21364 +
             ((C21496 - C21495) * C116 + (C21498 - C21497) * C47384) * C21365 +
             C22454 * C21366) *
                C47430 +
            (((C21999 - C21998) * C116 + (C22001 - C22000) * C47384) * C21364 +
             ((C22003 - C22002) * C116 + (C22005 - C22004) * C47384) * C21365 +
             ((C22603 - C22604) * C116 + (C22605 - C22606) * C47384) * C21366) *
                C47268) *
               C943 +
           ((C21528 * C21364 +
             ((C21500 - C21499) * C116 + (C21502 - C21501) * C47384) * C21365 +
             ((C22448 - C22449) * C116 + (C22450 - C22451) * C47384) * C21366) *
                C47430 +
            (C22609 * C21364 +
             ((C22604 - C22603) * C116 + (C22606 - C22605) * C47384) * C21365 +
             ((C47108 * C6310 - C21367 * C6308) * C116 +
              (C47108 * C6314 - C21367 * C6312) * C47384) *
                 C21366) *
                C47268) *
               C47461) *
              C47146)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C47108 * C124 - C21367 * C117) * C116 +
             (C47108 * C138 - C21367 * C127) * C47384) *
                C21364 +
            ((C21479 - C21480) * C116 + (C21481 - C21482) * C47384) * C21365 +
            C21527 * C21366) *
               C47430 +
           (((C21367 * C414 - C47108 * C424) * C116 +
             (C21367 * C427 - C47108 * C444) * C47384) *
                C21364 +
            ((C21367 * C812 - C47108 * C817) * C116 +
             (C21367 * C820 - C47108 * C827) * C47384) *
                C21365 +
            ((C21367 * C1153 - C47108 * C1165) * C116 +
             (C21367 * C1168 - C47108 * C1180) * C47384) *
                C21366) *
               C47268) *
              C47163 * C554 +
          ((((C21367 * C118 - C47108 * C125) * C116 +
             (C21367 * C128 - C47108 * C139) * C47384) *
                C21364 +
            ((C21491 - C21492) * C116 + (C21493 - C21494) * C47384) * C21365 +
            C21528 * C21366) *
               C47430 +
           (((C47108 * C425 - C21367 * C415) * C116 +
             (C47108 * C445 - C21367 * C428) * C47384) *
                C21364 +
            ((C47108 * C818 - C21367 * C813) * C116 +
             (C47108 * C828 - C21367 * C821) * C47384) *
                C21365 +
            ((C47108 * C1166 - C21367 * C1154) * C116 +
             (C47108 * C1181 - C21367 * C1169) * C47384) *
                C21366) *
               C47268) *
              C47163 * C555 +
          ((((C47108 * C126 - C21367 * C119) * C116 +
             (C47108 * C140 - C21367 * C129) * C47384) *
                C21364 +
            ((C21503 - C21504) * C116 + (C21505 - C21506) * C47384) * C21365 +
            C21529 * C21366) *
               C47430 +
           (((C21367 * C416 - C47108 * C426) * C116 +
             (C21367 * C429 - C47108 * C446) * C47384) *
                C21364 +
            ((C21367 * C814 - C47108 * C819) * C116 +
             (C21367 * C822 - C47108 * C829) * C47384) *
                C21365 +
            ((C21367 * C1155 - C47108 * C1167) * C116 +
             (C21367 * C1170 - C47108 * C1182) * C47384) *
                C21366) *
               C47268) *
              C47163 * C556 +
          ((((C21367 * C120 - C47108 * C130) * C116 +
             (C21367 * C131 - C47108 * C141) * C47384) *
                C21364 +
            ((C21738 - C21739) * C116 + (C21740 - C21741) * C47384) * C21365 +
            ((C21742 - C21743) * C116 + (C21744 - C21745) * C47384) * C21366) *
               C47430 +
           (((C47108 * C436 - C21367 * C420) * C116 +
             (C47108 * C450 - C21367 * C437) * C47384) *
                C21364 +
            ((C47108 * C823 - C21367 * C815) * C116 +
             (C47108 * C830 - C21367 * C824) * C47384) *
                C21365 +
            ((C47108 * C1441 - C21367 * C1440) * C116 +
             (C47108 * C1443 - C21367 * C1442) * C47384) *
                C21366) *
               C47268) *
              C47163 * C47465)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C47108 * C124 - C21367 * C117) * C116 +
             (C47108 * C138 - C21367 * C127) * C47384) *
                C21364 +
            ((C21479 - C21480) * C116 + (C21481 - C21482) * C47384) * C21365 +
            C21527 * C21366) *
               C2116 +
           (((C21367 * C414 - C47108 * C424) * C116 +
             (C21367 * C427 - C47108 * C444) * C47384) *
                C21364 +
            ((C21990 - C21991) * C116 + (C21992 - C21993) * C47384) * C21365 +
            C22344 * C21366) *
               C2117 +
           (((C47108 * C430 - C21367 * C417) * C116 +
             (C47108 * C447 - C21367 * C433) * C47384) *
                C21364 +
            ((C22324 - C22325) * C116 + (C22326 - C22327) * C47384) * C21365 +
            C22347 * C21366) *
               C2118 +
           (((C21367 * C1844 - C47108 * C1850) * C116 +
             (C21367 * C1853 - C47108 * C1862) * C47384) *
                C21364 +
            ((C21367 * C2222 - C47108 * C2225) * C116 +
             (C21367 * C2228 - C47108 * C2231) * C47384) *
                C21365 +
            ((C21367 * C7167 - C47108 * C7169) * C116 +
             (C21367 * C7171 - C47108 * C7173) * C47384) *
                C21366) *
               C47477) *
              C47163 * C47415 +
          ((((C21367 * C118 - C47108 * C125) * C116 +
             (C21367 * C128 - C47108 * C139) * C47384) *
                C21364 +
            ((C21491 - C21492) * C116 + (C21493 - C21494) * C47384) * C21365 +
            C21528 * C21366) *
               C2116 +
           (((C47108 * C425 - C21367 * C415) * C116 +
             (C47108 * C445 - C21367 * C428) * C47384) *
                C21364 +
            ((C21998 - C21999) * C116 + (C22000 - C22001) * C47384) * C21365 +
            C22609 * C21366) *
               C2117 +
           (((C21367 * C418 - C47108 * C431) * C116 +
             (C21367 * C434 - C47108 * C448) * C47384) *
                C21364 +
            ((C23153 - C23154) * C116 + (C23155 - C23156) * C47384) * C21365 +
            ((C23157 - C23158) * C116 + (C23159 - C23160) * C47384) * C21366) *
               C2118 +
           (((C47108 * C1851 - C21367 * C1845) * C116 +
             (C47108 * C1863 - C21367 * C1854) * C47384) *
                C21364 +
            ((C47108 * C2226 - C21367 * C2223) * C116 +
             (C47108 * C2232 - C21367 * C2229) * C47384) *
                C21365 +
            ((C47108 * C7170 - C21367 * C7168) * C116 +
             (C47108 * C7174 - C21367 * C7172) * C47384) *
                C21366) *
               C47477) *
              C47163 * C47146)) /
            (p * q * std::sqrt(p + q));
    d2ee[114] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C47108 * C124 - C21367 * C117) * C116 +
             (C47108 * C138 - C21367 * C127) * C47384) *
                C21364 +
            ((C21479 - C21480) * C116 + (C21481 - C21482) * C47384) * C21365 +
            C21527 * C21366) *
               C47181 * C47500 +
           (((C21480 - C21479) * C116 + (C21482 - C21481) * C47384) * C21364 +
            ((C21484 - C21483) * C116 + (C21486 - C21485) * C47384) * C21365 +
            ((C21487 - C21488) * C116 + (C21489 - C21490) * C47384) * C21366) *
               C47181 * C47488 +
           (C21527 * C21364 +
            ((C21488 - C21487) * C116 + (C21490 - C21489) * C47384) * C21365 +
            ((C47108 * C1028 - C21367 * C1019) * C116 +
             (C47108 * C1037 - C21367 * C1031) * C47384) *
                C21366) *
               C47181 * C47461) *
              C258 +
          ((((C21367 * C118 - C47108 * C125) * C116 +
             (C21367 * C128 - C47108 * C139) * C47384) *
                C21364 +
            ((C21491 - C21492) * C116 + (C21493 - C21494) * C47384) * C21365 +
            C21528 * C21366) *
               C47181 * C47500 +
           (((C21492 - C21491) * C116 + (C21494 - C21493) * C47384) * C21364 +
            ((C21496 - C21495) * C116 + (C21498 - C21497) * C47384) * C21365 +
            ((C21499 - C21500) * C116 + (C21501 - C21502) * C47384) * C21366) *
               C47181 * C47488 +
           (C21528 * C21364 +
            ((C21500 - C21499) * C116 + (C21502 - C21501) * C47384) * C21365 +
            ((C21367 * C1020 - C47108 * C1029) * C116 +
             (C21367 * C1032 - C47108 * C1038) * C47384) *
                C21366) *
               C47181 * C47461) *
              C259 +
          ((((C47108 * C126 - C21367 * C119) * C116 +
             (C47108 * C140 - C21367 * C129) * C47384) *
                C21364 +
            ((C21503 - C21504) * C116 + (C21505 - C21506) * C47384) * C21365 +
            C21529 * C21366) *
               C47181 * C47500 +
           (((C21504 - C21503) * C116 + (C21506 - C21505) * C47384) * C21364 +
            ((C21508 - C21507) * C116 + (C21510 - C21509) * C47384) * C21365 +
            ((C21511 - C21512) * C116 + (C21513 - C21514) * C47384) * C21366) *
               C47181 * C47488 +
           (C21529 * C21364 +
            ((C21512 - C21511) * C116 + (C21514 - C21513) * C47384) * C21365 +
            ((C47108 * C1030 - C21367 * C1021) * C116 +
             (C47108 * C1039 - C21367 * C1033) * C47384) *
                C21366) *
               C47181 * C47461) *
              C47455)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C47108 * C124 - C21367 * C117) * C116 +
            (C47108 * C138 - C21367 * C127) * C47384) *
               C21364 +
           ((C47108 * C271 - C21367 * C261) * C116 +
            (C47108 * C291 - C21367 * C274) * C47384) *
               C21365 +
           ((C47108 * C277 - C21367 * C264) * C116 +
            (C47108 * C294 - C21367 * C280) * C47384) *
               C21366) *
              C47181 * C47163 * C108 +
          (((C21367 * C118 - C47108 * C125) * C116 +
            (C21367 * C128 - C47108 * C139) * C47384) *
               C21364 +
           ((C21367 * C262 - C47108 * C272) * C116 +
            (C21367 * C275 - C47108 * C292) * C47384) *
               C21365 +
           ((C21367 * C265 - C47108 * C278) * C116 +
            (C21367 * C281 - C47108 * C295) * C47384) *
               C21366) *
              C47181 * C47163 * C109 +
          (((C47108 * C126 - C21367 * C119) * C116 +
            (C47108 * C140 - C21367 * C129) * C47384) *
               C21364 +
           ((C47108 * C273 - C21367 * C263) * C116 +
            (C47108 * C293 - C21367 * C276) * C47384) *
               C21365 +
           ((C47108 * C279 - C21367 * C266) * C116 +
            (C47108 * C296 - C21367 * C282) * C47384) *
               C21366) *
              C47181 * C47163 * C110 +
          (((C21367 * C120 - C47108 * C130) * C116 +
            (C21367 * C131 - C47108 * C141) * C47384) *
               C21364 +
           ((C21367 * C267 - C47108 * C283) * C116 +
            (C21367 * C284 - C47108 * C297) * C47384) *
               C21365 +
           ((C21367 * C268 - C47108 * C285) * C116 +
            (C21367 * C286 - C47108 * C298) * C47384) *
               C21366) *
              C47181 * C47163 * C111 +
          (((C47108 * C132 - C21367 * C121) * C116 +
            (C47108 * C142 - C21367 * C133) * C47384) *
               C21364 +
           ((C47108 * C287 - C21367 * C269) * C116 +
            (C47108 * C299 - C21367 * C288) * C47384) *
               C21365 +
           ((C47108 * C289 - C21367 * C270) * C116 +
            (C47108 * C300 - C21367 * C290) * C47384) *
               C21366) *
              C47181 * C47163 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C47108 * C124 - C21367 * C117) * C116 +
             (C47108 * C138 - C21367 * C127) * C47384) *
                C21364 +
            ((C21479 - C21480) * C116 + (C21481 - C21482) * C47384) * C21365 +
            C21527 * C21366) *
               C47181 * C942 +
           (((C21480 - C21479) * C116 + (C21482 - C21481) * C47384) * C21364 +
            ((C21484 - C21483) * C116 + (C21486 - C21485) * C47384) * C21365 +
            ((C21487 - C21488) * C116 + (C21489 - C21490) * C47384) * C21366) *
               C47181 * C943 +
           (C21527 * C21364 +
            ((C21488 - C21487) * C116 + (C21490 - C21489) * C47384) * C21365 +
            ((C47108 * C1028 - C21367 * C1019) * C116 +
             (C47108 * C1037 - C21367 * C1031) * C47384) *
                C21366) *
               C47181 * C47461) *
              C47497 +
          ((((C21367 * C118 - C47108 * C125) * C116 +
             (C21367 * C128 - C47108 * C139) * C47384) *
                C21364 +
            ((C21491 - C21492) * C116 + (C21493 - C21494) * C47384) * C21365 +
            C21528 * C21366) *
               C47181 * C942 +
           (((C21492 - C21491) * C116 + (C21494 - C21493) * C47384) * C21364 +
            ((C21496 - C21495) * C116 + (C21498 - C21497) * C47384) * C21365 +
            ((C21499 - C21500) * C116 + (C21501 - C21502) * C47384) * C21366) *
               C47181 * C943 +
           (C21528 * C21364 +
            ((C21500 - C21499) * C116 + (C21502 - C21501) * C47384) * C21365 +
            ((C21367 * C1020 - C47108 * C1029) * C116 +
             (C21367 * C1032 - C47108 * C1038) * C47384) *
                C21366) *
               C47181 * C47461) *
              C47484 +
          ((((C47108 * C126 - C21367 * C119) * C116 +
             (C47108 * C140 - C21367 * C129) * C47384) *
                C21364 +
            ((C21503 - C21504) * C116 + (C21505 - C21506) * C47384) * C21365 +
            C21529 * C21366) *
               C47181 * C942 +
           (((C21504 - C21503) * C116 + (C21506 - C21505) * C47384) * C21364 +
            ((C21508 - C21507) * C116 + (C21510 - C21509) * C47384) * C21365 +
            ((C21511 - C21512) * C116 + (C21513 - C21514) * C47384) * C21366) *
               C47181 * C943 +
           (C21529 * C21364 +
            ((C21512 - C21511) * C116 + (C21514 - C21513) * C47384) * C21365 +
            ((C47108 * C1030 - C21367 * C1021) * C116 +
             (C47108 * C1039 - C21367 * C1033) * C47384) *
                C21366) *
               C47181 * C47461) *
              C47455)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C47108 * C124 - C21367 * C117) * C116 +
            (C47108 * C138 - C21367 * C127) * C47384) *
               C21364 +
           ((C21479 - C21480) * C116 + (C21481 - C21482) * C47384) * C21365 +
           C21527 * C21366) *
              C47181 * C1010 +
          (((C21480 - C21479) * C116 + (C21482 - C21481) * C47384) * C21364 +
           ((C21484 - C21483) * C116 + (C21486 - C21485) * C47384) * C21365 +
           C22204 * C21366) *
              C47181 * C1011 +
          (C21527 * C21364 +
           ((C21488 - C21487) * C116 + (C21490 - C21489) * C47384) * C21365 +
           C22207 * C21366) *
              C47181 * C1012 +
          (C22204 * C21364 +
           ((C22193 - C22192) * C116 + (C22195 - C22194) * C47384) * C21365 +
           ((C22196 - C22197) * C116 + (C22198 - C22199) * C47384) * C21366) *
              C47181 * C1013 +
          (C22207 * C21364 +
           ((C22197 - C22196) * C116 + (C22199 - C22198) * C47384) * C21365 +
           ((C47108 * C22186 - C21367 * C22185) * C116 +
            (C47108 * C22188 - C21367 * C22187) * C47384) *
               C21366) *
              C47181 * C1014) *
         C47135) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C47108 * C124 - C21367 * C117) * C116 +
             (C47108 * C138 - C21367 * C127) * C47384) *
                C21364 +
            ((C21479 - C21480) * C116 + (C21481 - C21482) * C47384) * C21365 +
            C21527 * C21366) *
               C1664 +
           (((C21367 * C414 - C47108 * C424) * C116 +
             (C21367 * C427 - C47108 * C444) * C47384) *
                C21364 +
            ((C21990 - C21991) * C116 + (C21992 - C21993) * C47384) * C21365 +
            C22344 * C21366) *
               C1665 +
           (((C47108 * C430 - C21367 * C417) * C116 +
             (C47108 * C447 - C21367 * C433) * C47384) *
                C21364 +
            ((C22324 - C22325) * C116 + (C22326 - C22327) * C47384) * C21365 +
            C22347 * C21366) *
               C47464) *
              C47163 * C47497 +
          ((((C21367 * C118 - C47108 * C125) * C116 +
             (C21367 * C128 - C47108 * C139) * C47384) *
                C21364 +
            ((C21491 - C21492) * C116 + (C21493 - C21494) * C47384) * C21365 +
            C21528 * C21366) *
               C1664 +
           (((C47108 * C425 - C21367 * C415) * C116 +
             (C47108 * C445 - C21367 * C428) * C47384) *
                C21364 +
            ((C21998 - C21999) * C116 + (C22000 - C22001) * C47384) * C21365 +
            C22609 * C21366) *
               C1665 +
           (((C21367 * C418 - C47108 * C431) * C116 +
             (C21367 * C434 - C47108 * C448) * C47384) *
                C21364 +
            ((C21367 * C1151 - C47108 * C1160) * C116 +
             (C21367 * C1163 - C47108 * C1178) * C47384) *
                C21365 +
            ((C21367 * C1157 - C47108 * C1172) * C116 +
             (C21367 * C1175 - C47108 * C1184) * C47384) *
                C21366) *
               C47464) *
              C47163 * C47484 +
          ((((C47108 * C126 - C21367 * C119) * C116 +
             (C47108 * C140 - C21367 * C129) * C47384) *
                C21364 +
            ((C21503 - C21504) * C116 + (C21505 - C21506) * C47384) * C21365 +
            C21529 * C21366) *
               C1664 +
           (((C21367 * C416 - C47108 * C426) * C116 +
             (C21367 * C429 - C47108 * C446) * C47384) *
                C21364 +
            ((C22006 - C22007) * C116 + (C22008 - C22009) * C47384) * C21365 +
            ((C22010 - C22011) * C116 + (C22012 - C22013) * C47384) * C21366) *
               C1665 +
           (((C47108 * C432 - C21367 * C419) * C116 +
             (C47108 * C449 - C21367 * C435) * C47384) *
                C21364 +
            ((C47108 * C1161 - C21367 * C1152) * C116 +
             (C47108 * C1179 - C21367 * C1164) * C47384) *
                C21365 +
            ((C47108 * C1173 - C21367 * C1158) * C116 +
             (C47108 * C1185 - C21367 * C1176) * C47384) *
                C21366) *
               C47464) *
              C47163 * C47455)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C47108 * C124 - C21367 * C117) * C116 +
             (C47108 * C138 - C21367 * C127) * C47384) *
                C21364 +
            ((C21479 - C21480) * C116 + (C21481 - C21482) * C47384) * C21365 +
            C21527 * C21366) *
               C1664 +
           (((C21367 * C414 - C47108 * C424) * C116 +
             (C21367 * C427 - C47108 * C444) * C47384) *
                C21364 +
            ((C21990 - C21991) * C116 + (C21992 - C21993) * C47384) * C21365 +
            C22344 * C21366) *
               C1665 +
           (((C47108 * C430 - C21367 * C417) * C116 +
             (C47108 * C447 - C21367 * C433) * C47384) *
                C21364 +
            ((C22324 - C22325) * C116 + (C22326 - C22327) * C47384) * C21365 +
            C22347 * C21366) *
               C47464) *
              C47500 +
          ((((C21480 - C21479) * C116 + (C21482 - C21481) * C47384) * C21364 +
            ((C21484 - C21483) * C116 + (C21486 - C21485) * C47384) * C21365 +
            C22204 * C21366) *
               C1664 +
           (((C21991 - C21990) * C116 + (C21993 - C21992) * C47384) * C21364 +
            ((C21995 - C21994) * C116 + (C21997 - C21996) * C47384) * C21365 +
            C22720 * C21366) *
               C1665 +
           (((C22325 - C22324) * C116 + (C22327 - C22326) * C47384) * C21364 +
            ((C22329 - C22328) * C116 + (C22331 - C22330) * C47384) * C21365 +
            ((C22336 - C22337) * C116 + (C22338 - C22339) * C47384) * C21366) *
               C47464) *
              C47488 +
          ((C21527 * C21364 +
            ((C21488 - C21487) * C116 + (C21490 - C21489) * C47384) * C21365 +
            C22207 * C21366) *
               C1664 +
           (C22344 * C21364 +
            ((C22333 - C22332) * C116 + (C22335 - C22334) * C47384) * C21365 +
            ((C22714 - C22715) * C116 + (C22716 - C22717) * C47384) * C21366) *
               C1665 +
           (C22347 * C21364 +
            ((C22337 - C22336) * C116 + (C22339 - C22338) * C47384) * C21365 +
            ((C47108 * C22318 - C21367 * C22317) * C116 +
             (C47108 * C22320 - C21367 * C22319) * C47384) *
                C21366) *
               C47464) *
              C47461) *
         C47135) /
            (p * q * std::sqrt(p + q));
    d2ee[115] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C47108 * C124 - C21367 * C117) * C116 +
              (C47108 * C138 - C21367 * C127) * C47384) *
                 C21364 +
             ((C21479 - C21480) * C116 + (C21481 - C21482) * C47384) * C21365 +
             C21527 * C21366) *
                C3094 +
            (((C21367 * C414 - C47108 * C424) * C116 +
              (C21367 * C427 - C47108 * C444) * C47384) *
                 C21364 +
             ((C21990 - C21991) * C116 + (C21992 - C21993) * C47384) * C21365 +
             C22344 * C21366) *
                C47268) *
               C47429 +
           ((((C21480 - C21479) * C116 + (C21482 - C21481) * C47384) * C21364 +
             ((C21484 - C21483) * C116 + (C21486 - C21485) * C47384) * C21365 +
             C22204 * C21366) *
                C3094 +
            (((C21991 - C21990) * C116 + (C21993 - C21992) * C47384) * C21364 +
             ((C21995 - C21994) * C116 + (C21997 - C21996) * C47384) * C21365 +
             C22720 * C21366) *
                C47268) *
               C47226) *
              C47140 +
          (((((C21367 * C118 - C47108 * C125) * C116 +
              (C21367 * C128 - C47108 * C139) * C47384) *
                 C21364 +
             ((C21491 - C21492) * C116 + (C21493 - C21494) * C47384) * C21365 +
             C21528 * C21366) *
                C3094 +
            (((C47108 * C425 - C21367 * C415) * C116 +
              (C47108 * C445 - C21367 * C428) * C47384) *
                 C21364 +
             ((C21998 - C21999) * C116 + (C22000 - C22001) * C47384) * C21365 +
             C22609 * C21366) *
                C47268) *
               C47429 +
           ((((C21492 - C21491) * C116 + (C21494 - C21493) * C47384) * C21364 +
             ((C21496 - C21495) * C116 + (C21498 - C21497) * C47384) * C21365 +
             C22454 * C21366) *
                C3094 +
            (((C21999 - C21998) * C116 + (C22001 - C22000) * C47384) * C21364 +
             ((C22003 - C22002) * C116 + (C22005 - C22004) * C47384) * C21365 +
             ((C22603 - C22604) * C116 + (C22605 - C22606) * C47384) * C21366) *
                C47268) *
               C47226) *
              C47149 +
          (((((C47108 * C126 - C21367 * C119) * C116 +
              (C47108 * C140 - C21367 * C129) * C47384) *
                 C21364 +
             ((C21503 - C21504) * C116 + (C21505 - C21506) * C47384) * C21365 +
             C21529 * C21366) *
                C3094 +
            (((C21367 * C416 - C47108 * C426) * C116 +
              (C21367 * C429 - C47108 * C446) * C47384) *
                 C21364 +
             ((C22006 - C22007) * C116 + (C22008 - C22009) * C47384) * C21365 +
             ((C22010 - C22011) * C116 + (C22012 - C22013) * C47384) * C21366) *
                C47268) *
               C47429 +
           ((((C21504 - C21503) * C116 + (C21506 - C21505) * C47384) * C21364 +
             ((C21508 - C21507) * C116 + (C21510 - C21509) * C47384) * C21365 +
             ((C21511 - C21512) * C116 + (C21513 - C21514) * C47384) * C21366) *
                C3094 +
            (((C22007 - C22006) * C116 + (C22009 - C22008) * C47384) * C21364 +
             ((C22011 - C22010) * C116 + (C22013 - C22012) * C47384) * C21365 +
             ((C47108 * C1547 - C21367 * C1544) * C116 +
              (C47108 * C1553 - C21367 * C1550) * C47384) *
                 C21366) *
                C47268) *
               C47226) *
              C2703)) /
        (p * q * std::sqrt(p + q));
    d2ee[116] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C47108 * C124 - C21367 * C117) * C116 +
              (C47108 * C138 - C21367 * C127) * C47384) *
                 C21364 +
             ((C21479 - C21480) * C116 + (C21481 - C21482) * C47384) * C21365 +
             C21527 * C21366) *
                C47264 +
            (((C21367 * C414 - C47108 * C424) * C116 +
              (C21367 * C427 - C47108 * C444) * C47384) *
                 C21364 +
             ((C21990 - C21991) * C116 + (C21992 - C21993) * C47384) * C21365 +
             C22344 * C21366) *
                C47271 +
            (((C47108 * C430 - C21367 * C417) * C116 +
              (C47108 * C447 - C21367 * C433) * C47384) *
                 C21364 +
             ((C22324 - C22325) * C116 + (C22326 - C22327) * C47384) * C21365 +
             C22347 * C21366) *
                C3602) *
               C47429 +
           ((((C21480 - C21479) * C116 + (C21482 - C21481) * C47384) * C21364 +
             ((C21484 - C21483) * C116 + (C21486 - C21485) * C47384) * C21365 +
             C22204 * C21366) *
                C47264 +
            (((C21991 - C21990) * C116 + (C21993 - C21992) * C47384) * C21364 +
             ((C21995 - C21994) * C116 + (C21997 - C21996) * C47384) * C21365 +
             C22720 * C21366) *
                C47271 +
            (((C22325 - C22324) * C116 + (C22327 - C22326) * C47384) * C21364 +
             ((C22329 - C22328) * C116 + (C22331 - C22330) * C47384) * C21365 +
             ((C22336 - C22337) * C116 + (C22338 - C22339) * C47384) * C21366) *
                C3602) *
               C47226) *
              C2440 +
          (((((C21367 * C118 - C47108 * C125) * C116 +
              (C21367 * C128 - C47108 * C139) * C47384) *
                 C21364 +
             ((C21491 - C21492) * C116 + (C21493 - C21494) * C47384) * C21365 +
             C21528 * C21366) *
                C47264 +
            (((C47108 * C425 - C21367 * C415) * C116 +
              (C47108 * C445 - C21367 * C428) * C47384) *
                 C21364 +
             ((C21998 - C21999) * C116 + (C22000 - C22001) * C47384) * C21365 +
             C22609 * C21366) *
                C47271 +
            (((C21367 * C418 - C47108 * C431) * C116 +
              (C21367 * C434 - C47108 * C448) * C47384) *
                 C21364 +
             ((C23153 - C23154) * C116 + (C23155 - C23156) * C47384) * C21365 +
             ((C23157 - C23158) * C116 + (C23159 - C23160) * C47384) * C21366) *
                C3602) *
               C47429 +
           ((((C21492 - C21491) * C116 + (C21494 - C21493) * C47384) * C21364 +
             ((C21496 - C21495) * C116 + (C21498 - C21497) * C47384) * C21365 +
             C22454 * C21366) *
                C47264 +
            (((C21999 - C21998) * C116 + (C22001 - C22000) * C47384) * C21364 +
             ((C22003 - C22002) * C116 + (C22005 - C22004) * C47384) * C21365 +
             ((C22603 - C22604) * C116 + (C22605 - C22606) * C47384) * C21366) *
                C47271 +
            (((C23154 - C23153) * C116 + (C23156 - C23155) * C47384) * C21364 +
             ((C23158 - C23157) * C116 + (C23160 - C23159) * C47384) * C21365 +
             ((C47108 * C5808 - C21367 * C5806) * C116 +
              (C47108 * C5812 - C21367 * C5810) * C47384) *
                 C21366) *
                C3602) *
               C47226) *
              C47146)) /
        (p * q * std::sqrt(p + q));
    d2ee[117] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C47108 * C124 - C21367 * C117) * C116 +
              (C47108 * C138 - C21367 * C127) * C47384) *
                 C21364 +
             ((C21479 - C21480) * C116 + (C21481 - C21482) * C47384) * C21365 +
             C21527 * C21366) *
                C3094 +
            (((C21367 * C414 - C47108 * C424) * C116 +
              (C21367 * C427 - C47108 * C444) * C47384) *
                 C21364 +
             ((C21990 - C21991) * C116 + (C21992 - C21993) * C47384) * C21365 +
             C22344 * C21366) *
                C47268) *
               C47500 +
           ((((C21480 - C21479) * C116 + (C21482 - C21481) * C47384) * C21364 +
             ((C21484 - C21483) * C116 + (C21486 - C21485) * C47384) * C21365 +
             C22204 * C21366) *
                C3094 +
            (((C21991 - C21990) * C116 + (C21993 - C21992) * C47384) * C21364 +
             ((C21995 - C21994) * C116 + (C21997 - C21996) * C47384) * C21365 +
             C22720 * C21366) *
                C47268) *
               C47488 +
           ((C21527 * C21364 +
             ((C21488 - C21487) * C116 + (C21490 - C21489) * C47384) * C21365 +
             C22207 * C21366) *
                C3094 +
            (C22344 * C21364 +
             ((C22333 - C22332) * C116 + (C22335 - C22334) * C47384) * C21365 +
             ((C22714 - C22715) * C116 + (C22716 - C22717) * C47384) * C21366) *
                C47268) *
               C47461) *
              C2440 +
          (((((C21367 * C118 - C47108 * C125) * C116 +
              (C21367 * C128 - C47108 * C139) * C47384) *
                 C21364 +
             ((C21491 - C21492) * C116 + (C21493 - C21494) * C47384) * C21365 +
             C21528 * C21366) *
                C3094 +
            (((C47108 * C425 - C21367 * C415) * C116 +
              (C47108 * C445 - C21367 * C428) * C47384) *
                 C21364 +
             ((C21998 - C21999) * C116 + (C22000 - C22001) * C47384) * C21365 +
             C22609 * C21366) *
                C47268) *
               C47500 +
           ((((C21492 - C21491) * C116 + (C21494 - C21493) * C47384) * C21364 +
             ((C21496 - C21495) * C116 + (C21498 - C21497) * C47384) * C21365 +
             C22454 * C21366) *
                C3094 +
            (((C21999 - C21998) * C116 + (C22001 - C22000) * C47384) * C21364 +
             ((C22003 - C22002) * C116 + (C22005 - C22004) * C47384) * C21365 +
             ((C22603 - C22604) * C116 + (C22605 - C22606) * C47384) * C21366) *
                C47268) *
               C47488 +
           ((C21528 * C21364 +
             ((C21500 - C21499) * C116 + (C21502 - C21501) * C47384) * C21365 +
             ((C22448 - C22449) * C116 + (C22450 - C22451) * C47384) * C21366) *
                C3094 +
            (C22609 * C21364 +
             ((C22604 - C22603) * C116 + (C22606 - C22605) * C47384) * C21365 +
             ((C47108 * C6310 - C21367 * C6308) * C116 +
              (C47108 * C6314 - C21367 * C6312) * C47384) *
                 C21366) *
                C47268) *
               C47461) *
              C47146)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C47108 * C124 - C21367 * C117) * C116 +
             (C47108 * C138 - C21367 * C127) * C47384) *
                C21364 +
            ((C21479 - C21480) * C116 + (C21481 - C21482) * C47384) * C21365 +
            C21527 * C21366) *
               C3094 +
           (((C21367 * C414 - C47108 * C424) * C116 +
             (C21367 * C427 - C47108 * C444) * C47384) *
                C21364 +
            ((C21990 - C21991) * C116 + (C21992 - C21993) * C47384) * C21365 +
            C22344 * C21366) *
               C47268) *
              C47163 * C47506 +
          ((((C21367 * C118 - C47108 * C125) * C116 +
             (C21367 * C128 - C47108 * C139) * C47384) *
                C21364 +
            ((C21491 - C21492) * C116 + (C21493 - C21494) * C47384) * C21365 +
            C21528 * C21366) *
               C3094 +
           (((C47108 * C425 - C21367 * C415) * C116 +
             (C47108 * C445 - C21367 * C428) * C47384) *
                C21364 +
            ((C21998 - C21999) * C116 + (C22000 - C22001) * C47384) * C21365 +
            C22609 * C21366) *
               C47268) *
              C47163 * C47499 +
          ((((C47108 * C126 - C21367 * C119) * C116 +
             (C47108 * C140 - C21367 * C129) * C47384) *
                C21364 +
            ((C21503 - C21504) * C116 + (C21505 - C21506) * C47384) * C21365 +
            C21529 * C21366) *
               C3094 +
           (((C21367 * C416 - C47108 * C426) * C116 +
             (C21367 * C429 - C47108 * C446) * C47384) *
                C21364 +
            ((C22006 - C22007) * C116 + (C22008 - C22009) * C47384) * C21365 +
            ((C22010 - C22011) * C116 + (C22012 - C22013) * C47384) * C21366) *
               C47268) *
              C47163 * C47486 +
          ((((C21367 * C120 - C47108 * C130) * C116 +
             (C21367 * C131 - C47108 * C141) * C47384) *
                C21364 +
            ((C21738 - C21739) * C116 + (C21740 - C21741) * C47384) * C21365 +
            ((C21742 - C21743) * C116 + (C21744 - C21745) * C47384) * C21366) *
               C3094 +
           (((C47108 * C436 - C21367 * C420) * C116 +
             (C47108 * C450 - C21367 * C437) * C47384) *
                C21364 +
            ((C47108 * C823 - C21367 * C815) * C116 +
             (C47108 * C830 - C21367 * C824) * C47384) *
                C21365 +
            ((C47108 * C1441 - C21367 * C1440) * C116 +
             (C47108 * C1443 - C21367 * C1442) * C47384) *
                C21366) *
               C47268) *
              C47163 * C47465)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C47108 * C124 - C21367 * C117) * C116 +
             (C47108 * C138 - C21367 * C127) * C47384) *
                C21364 +
            ((C21479 - C21480) * C116 + (C21481 - C21482) * C47384) * C21365 +
            C21527 * C21366) *
               C47508 +
           (((C21367 * C414 - C47108 * C424) * C116 +
             (C21367 * C427 - C47108 * C444) * C47384) *
                C21364 +
            ((C21990 - C21991) * C116 + (C21992 - C21993) * C47384) * C21365 +
            C22344 * C21366) *
               C47505 +
           (((C47108 * C430 - C21367 * C417) * C116 +
             (C47108 * C447 - C21367 * C433) * C47384) *
                C21364 +
            ((C22324 - C22325) * C116 + (C22326 - C22327) * C47384) * C21365 +
            C22347 * C21366) *
               C47496 +
           (((C21367 * C1844 - C47108 * C1850) * C116 +
             (C21367 * C1853 - C47108 * C1862) * C47384) *
                C21364 +
            ((C23361 - C23362) * C116 + (C23363 - C23364) * C47384) * C21365 +
            ((C23365 - C23366) * C116 + (C23367 - C23368) * C47384) * C21366) *
               C47477) *
              C47163 * C2440 +
          ((((C21367 * C118 - C47108 * C125) * C116 +
             (C21367 * C128 - C47108 * C139) * C47384) *
                C21364 +
            ((C21491 - C21492) * C116 + (C21493 - C21494) * C47384) * C21365 +
            C21528 * C21366) *
               C47508 +
           (((C47108 * C425 - C21367 * C415) * C116 +
             (C47108 * C445 - C21367 * C428) * C47384) *
                C21364 +
            ((C21998 - C21999) * C116 + (C22000 - C22001) * C47384) * C21365 +
            C22609 * C21366) *
               C47505 +
           (((C21367 * C418 - C47108 * C431) * C116 +
             (C21367 * C434 - C47108 * C448) * C47384) *
                C21364 +
            ((C23153 - C23154) * C116 + (C23155 - C23156) * C47384) * C21365 +
            ((C23157 - C23158) * C116 + (C23159 - C23160) * C47384) * C21366) *
               C47496 +
           (((C47108 * C1851 - C21367 * C1845) * C116 +
             (C47108 * C1863 - C21367 * C1854) * C47384) *
                C21364 +
            ((C47108 * C2226 - C21367 * C2223) * C116 +
             (C47108 * C2232 - C21367 * C2229) * C47384) *
                C21365 +
            ((C47108 * C7170 - C21367 * C7168) * C116 +
             (C47108 * C7174 - C21367 * C7172) * C47384) *
                C21366) *
               C47477) *
              C47163 * C47146)) /
            (p * q * std::sqrt(p + q));
    d2ee[118] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C47108 * C124 - C21367 * C117) * C116 +
             (C47108 * C138 - C21367 * C127) * C47384) *
                C21364 +
            ((C21479 - C21480) * C116 + (C21481 - C21482) * C47384) * C21365 +
            C21527 * C21366) *
               C47264 +
           (((C21367 * C414 - C47108 * C424) * C116 +
             (C21367 * C427 - C47108 * C444) * C47384) *
                C21364 +
            ((C21990 - C21991) * C116 + (C21992 - C21993) * C47384) * C21365 +
            C22344 * C21366) *
               C47271 +
           (((C47108 * C430 - C21367 * C417) * C116 +
             (C47108 * C447 - C21367 * C433) * C47384) *
                C21364 +
            ((C22324 - C22325) * C116 + (C22326 - C22327) * C47384) * C21365 +
            C22347 * C21366) *
               C3602) *
              C47163 * C47140 +
          ((((C21367 * C118 - C47108 * C125) * C116 +
             (C21367 * C128 - C47108 * C139) * C47384) *
                C21364 +
            ((C21491 - C21492) * C116 + (C21493 - C21494) * C47384) * C21365 +
            C21528 * C21366) *
               C47264 +
           (((C47108 * C425 - C21367 * C415) * C116 +
             (C47108 * C445 - C21367 * C428) * C47384) *
                C21364 +
            ((C21998 - C21999) * C116 + (C22000 - C22001) * C47384) * C21365 +
            C22609 * C21366) *
               C47271 +
           (((C21367 * C418 - C47108 * C431) * C116 +
             (C21367 * C434 - C47108 * C448) * C47384) *
                C21364 +
            ((C23153 - C23154) * C116 + (C23155 - C23156) * C47384) * C21365 +
            ((C23157 - C23158) * C116 + (C23159 - C23160) * C47384) * C21366) *
               C3602) *
              C47163 * C47149 +
          ((((C47108 * C126 - C21367 * C119) * C116 +
             (C47108 * C140 - C21367 * C129) * C47384) *
                C21364 +
            ((C21503 - C21504) * C116 + (C21505 - C21506) * C47384) * C21365 +
            C21529 * C21366) *
               C47264 +
           (((C21367 * C416 - C47108 * C426) * C116 +
             (C21367 * C429 - C47108 * C446) * C47384) *
                C21364 +
            ((C22006 - C22007) * C116 + (C22008 - C22009) * C47384) * C21365 +
            ((C22010 - C22011) * C116 + (C22012 - C22013) * C47384) * C21366) *
               C47271 +
           (((C47108 * C432 - C21367 * C419) * C116 +
             (C47108 * C449 - C21367 * C435) * C47384) *
                C21364 +
            ((C47108 * C1161 - C21367 * C1152) * C116 +
             (C47108 * C1179 - C21367 * C1164) * C47384) *
                C21365 +
            ((C47108 * C1173 - C21367 * C1158) * C116 +
             (C47108 * C1185 - C21367 * C1176) * C47384) *
                C21366) *
               C3602) *
              C47163 * C2703)) /
        (p * q * std::sqrt(p + q));
    d2ee[119] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C47108 * C124 - C21367 * C117) * C116 +
             (C47108 * C138 - C21367 * C127) * C47384) *
                C21364 +
            ((C21479 - C21480) * C116 + (C21481 - C21482) * C47384) * C21365 +
            C21527 * C21366) *
               C3094 +
           (((C21367 * C414 - C47108 * C424) * C116 +
             (C21367 * C427 - C47108 * C444) * C47384) *
                C21364 +
            ((C21990 - C21991) * C116 + (C21992 - C21993) * C47384) * C21365 +
            C22344 * C21366) *
               C47268) *
              C47163 * C47506 +
          ((((C21367 * C118 - C47108 * C125) * C116 +
             (C21367 * C128 - C47108 * C139) * C47384) *
                C21364 +
            ((C21491 - C21492) * C116 + (C21493 - C21494) * C47384) * C21365 +
            C21528 * C21366) *
               C3094 +
           (((C47108 * C425 - C21367 * C415) * C116 +
             (C47108 * C445 - C21367 * C428) * C47384) *
                C21364 +
            ((C21998 - C21999) * C116 + (C22000 - C22001) * C47384) * C21365 +
            C22609 * C21366) *
               C47268) *
              C47163 * C47499 +
          ((((C47108 * C126 - C21367 * C119) * C116 +
             (C47108 * C140 - C21367 * C129) * C47384) *
                C21364 +
            ((C21503 - C21504) * C116 + (C21505 - C21506) * C47384) * C21365 +
            C21529 * C21366) *
               C3094 +
           (((C21367 * C416 - C47108 * C426) * C116 +
             (C21367 * C429 - C47108 * C446) * C47384) *
                C21364 +
            ((C22006 - C22007) * C116 + (C22008 - C22009) * C47384) * C21365 +
            ((C22010 - C22011) * C116 + (C22012 - C22013) * C47384) * C21366) *
               C47268) *
              C47163 * C47486 +
          ((((C21367 * C120 - C47108 * C130) * C116 +
             (C21367 * C131 - C47108 * C141) * C47384) *
                C21364 +
            ((C21738 - C21739) * C116 + (C21740 - C21741) * C47384) * C21365 +
            ((C21742 - C21743) * C116 + (C21744 - C21745) * C47384) * C21366) *
               C3094 +
           (((C47108 * C436 - C21367 * C420) * C116 +
             (C47108 * C450 - C21367 * C437) * C47384) *
                C21364 +
            ((C47108 * C823 - C21367 * C815) * C116 +
             (C47108 * C830 - C21367 * C824) * C47384) *
                C21365 +
            ((C47108 * C1441 - C21367 * C1440) * C116 +
             (C47108 * C1443 - C21367 * C1442) * C47384) *
                C21366) *
               C47268) *
              C47163 * C47465)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C47108 * C124 - C21367 * C117) * C116 +
              (C47108 * C138 - C21367 * C127) * C47384) *
                 C21364 +
             ((C21479 - C21480) * C116 + (C21481 - C21482) * C47384) * C21365 +
             C21527 * C21366) *
                C3094 +
            (((C21367 * C414 - C47108 * C424) * C116 +
              (C21367 * C427 - C47108 * C444) * C47384) *
                 C21364 +
             ((C21990 - C21991) * C116 + (C21992 - C21993) * C47384) * C21365 +
             C22344 * C21366) *
                C47268) *
               C47500 +
           ((((C21480 - C21479) * C116 + (C21482 - C21481) * C47384) * C21364 +
             ((C21484 - C21483) * C116 + (C21486 - C21485) * C47384) * C21365 +
             C22204 * C21366) *
                C3094 +
            (((C21991 - C21990) * C116 + (C21993 - C21992) * C47384) * C21364 +
             ((C21995 - C21994) * C116 + (C21997 - C21996) * C47384) * C21365 +
             C22720 * C21366) *
                C47268) *
               C47488 +
           ((C21527 * C21364 +
             ((C21488 - C21487) * C116 + (C21490 - C21489) * C47384) * C21365 +
             C22207 * C21366) *
                C3094 +
            (C22344 * C21364 +
             ((C22333 - C22332) * C116 + (C22335 - C22334) * C47384) * C21365 +
             ((C22714 - C22715) * C116 + (C22716 - C22717) * C47384) * C21366) *
                C47268) *
               C47461) *
              C2440 +
          (((((C21367 * C118 - C47108 * C125) * C116 +
              (C21367 * C128 - C47108 * C139) * C47384) *
                 C21364 +
             ((C21491 - C21492) * C116 + (C21493 - C21494) * C47384) * C21365 +
             C21528 * C21366) *
                C3094 +
            (((C47108 * C425 - C21367 * C415) * C116 +
              (C47108 * C445 - C21367 * C428) * C47384) *
                 C21364 +
             ((C21998 - C21999) * C116 + (C22000 - C22001) * C47384) * C21365 +
             C22609 * C21366) *
                C47268) *
               C47500 +
           ((((C21492 - C21491) * C116 + (C21494 - C21493) * C47384) * C21364 +
             ((C21496 - C21495) * C116 + (C21498 - C21497) * C47384) * C21365 +
             C22454 * C21366) *
                C3094 +
            (((C21999 - C21998) * C116 + (C22001 - C22000) * C47384) * C21364 +
             ((C22003 - C22002) * C116 + (C22005 - C22004) * C47384) * C21365 +
             ((C22603 - C22604) * C116 + (C22605 - C22606) * C47384) * C21366) *
                C47268) *
               C47488 +
           ((C21528 * C21364 +
             ((C21500 - C21499) * C116 + (C21502 - C21501) * C47384) * C21365 +
             ((C22448 - C22449) * C116 + (C22450 - C22451) * C47384) * C21366) *
                C3094 +
            (C22609 * C21364 +
             ((C22604 - C22603) * C116 + (C22606 - C22605) * C47384) * C21365 +
             ((C47108 * C6310 - C21367 * C6308) * C116 +
              (C47108 * C6314 - C21367 * C6312) * C47384) *
                 C21366) *
                C47268) *
               C47461) *
              C47146)) /
            (p * q * std::sqrt(p + q));
    d2ee[120] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C47108 * C124 - C21367 * C117) * C116 +
             (C47108 * C138 - C21367 * C127) * C47384) *
                C21364 +
            ((C21479 - C21480) * C116 + (C21481 - C21482) * C47384) * C21365 +
            C21527 * C21366) *
               C47181 * C47429 +
           (((C21480 - C21479) * C116 + (C21482 - C21481) * C47384) * C21364 +
            ((C21484 - C21483) * C116 + (C21486 - C21485) * C47384) * C21365 +
            ((C21487 - C21488) * C116 + (C21489 - C21490) * C47384) * C21366) *
               C47181 * C47226) *
              C554 +
          ((((C21367 * C118 - C47108 * C125) * C116 +
             (C21367 * C128 - C47108 * C139) * C47384) *
                C21364 +
            ((C21491 - C21492) * C116 + (C21493 - C21494) * C47384) * C21365 +
            C21528 * C21366) *
               C47181 * C47429 +
           (((C21492 - C21491) * C116 + (C21494 - C21493) * C47384) * C21364 +
            ((C21496 - C21495) * C116 + (C21498 - C21497) * C47384) * C21365 +
            ((C21499 - C21500) * C116 + (C21501 - C21502) * C47384) * C21366) *
               C47181 * C47226) *
              C555 +
          ((((C47108 * C126 - C21367 * C119) * C116 +
             (C47108 * C140 - C21367 * C129) * C47384) *
                C21364 +
            ((C21503 - C21504) * C116 + (C21505 - C21506) * C47384) * C21365 +
            C21529 * C21366) *
               C47181 * C47429 +
           (((C21504 - C21503) * C116 + (C21506 - C21505) * C47384) * C21364 +
            ((C21508 - C21507) * C116 + (C21510 - C21509) * C47384) * C21365 +
            ((C21511 - C21512) * C116 + (C21513 - C21514) * C47384) * C21366) *
               C47181 * C47226) *
              C556 +
          ((((C21367 * C120 - C47108 * C130) * C116 +
             (C21367 * C131 - C47108 * C141) * C47384) *
                C21364 +
            ((C21738 - C21739) * C116 + (C21740 - C21741) * C47384) * C21365 +
            ((C21742 - C21743) * C116 + (C21744 - C21745) * C47384) * C21366) *
               C47181 * C47429 +
           (((C21739 - C21738) * C116 + (C21741 - C21740) * C47384) * C21364 +
            ((C21743 - C21742) * C116 + (C21745 - C21744) * C47384) * C21365 +
            ((C47108 * C1291 - C21367 * C1290) * C116 +
             (C47108 * C1293 - C21367 * C1292) * C47384) *
                C21366) *
               C47181 * C47226) *
              C47465)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C47108 * C124 - C21367 * C117) * C116 +
             (C47108 * C138 - C21367 * C127) * C47384) *
                C21364 +
            ((C21479 - C21480) * C116 + (C21481 - C21482) * C47384) * C21365 +
            C21527 * C21366) *
               C47181 * C1284 +
           (((C21480 - C21479) * C116 + (C21482 - C21481) * C47384) * C21364 +
            ((C21484 - C21483) * C116 + (C21486 - C21485) * C47384) * C21365 +
            C22204 * C21366) *
               C47181 * C1285 +
           (C21527 * C21364 +
            ((C21488 - C21487) * C116 + (C21490 - C21489) * C47384) * C21365 +
            C22207 * C21366) *
               C47181 * C1286 +
           (C22204 * C21364 +
            ((C22193 - C22192) * C116 + (C22195 - C22194) * C47384) * C21365 +
            ((C22196 - C22197) * C116 + (C22198 - C22199) * C47384) * C21366) *
               C47181 * C47471) *
              C47415 +
          ((((C21367 * C118 - C47108 * C125) * C116 +
             (C21367 * C128 - C47108 * C139) * C47384) *
                C21364 +
            ((C21491 - C21492) * C116 + (C21493 - C21494) * C47384) * C21365 +
            C21528 * C21366) *
               C47181 * C1284 +
           (((C21492 - C21491) * C116 + (C21494 - C21493) * C47384) * C21364 +
            ((C21496 - C21495) * C116 + (C21498 - C21497) * C47384) * C21365 +
            C22454 * C21366) *
               C47181 * C1285 +
           (C21528 * C21364 +
            ((C21500 - C21499) * C116 + (C21502 - C21501) * C47384) * C21365 +
            ((C22448 - C22449) * C116 + (C22450 - C22451) * C47384) * C21366) *
               C47181 * C1286 +
           (C22454 * C21364 +
            ((C22449 - C22448) * C116 + (C22451 - C22450) * C47384) * C21365 +
            ((C47108 * C5638 - C21367 * C5636) * C116 +
             (C47108 * C5642 - C21367 * C5640) * C47384) *
                C21366) *
               C47181 * C47471) *
              C47146)) /
            (p * q * std::sqrt(p + q));
    d2ee[121] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C47108 * C124 - C21367 * C117) * C116 +
              (C47108 * C138 - C21367 * C127) * C47384) *
                 C21364 +
             ((C21479 - C21480) * C116 + (C21481 - C21482) * C47384) * C21365 +
             C21527 * C21366) *
                C47430 +
            (((C21367 * C414 - C47108 * C424) * C116 +
              (C21367 * C427 - C47108 * C444) * C47384) *
                 C21364 +
             ((C21990 - C21991) * C116 + (C21992 - C21993) * C47384) * C21365 +
             ((C21994 - C21995) * C116 + (C21996 - C21997) * C47384) * C21366) *
                C47268) *
               C47429 +
           ((((C21480 - C21479) * C116 + (C21482 - C21481) * C47384) * C21364 +
             ((C21484 - C21483) * C116 + (C21486 - C21485) * C47384) * C21365 +
             ((C21487 - C21488) * C116 + (C21489 - C21490) * C47384) * C21366) *
                C47430 +
            (((C21991 - C21990) * C116 + (C21993 - C21992) * C47384) * C21364 +
             ((C21995 - C21994) * C116 + (C21997 - C21996) * C47384) * C21365 +
             ((C47108 * C1545 - C21367 * C1542) * C116 +
              (C47108 * C1551 - C21367 * C1548) * C47384) *
                 C21366) *
                C47268) *
               C47226) *
              C258 +
          (((((C21367 * C118 - C47108 * C125) * C116 +
              (C21367 * C128 - C47108 * C139) * C47384) *
                 C21364 +
             ((C21491 - C21492) * C116 + (C21493 - C21494) * C47384) * C21365 +
             C21528 * C21366) *
                C47430 +
            (((C47108 * C425 - C21367 * C415) * C116 +
              (C47108 * C445 - C21367 * C428) * C47384) *
                 C21364 +
             ((C21998 - C21999) * C116 + (C22000 - C22001) * C47384) * C21365 +
             ((C22002 - C22003) * C116 + (C22004 - C22005) * C47384) * C21366) *
                C47268) *
               C47429 +
           ((((C21492 - C21491) * C116 + (C21494 - C21493) * C47384) * C21364 +
             ((C21496 - C21495) * C116 + (C21498 - C21497) * C47384) * C21365 +
             ((C21499 - C21500) * C116 + (C21501 - C21502) * C47384) * C21366) *
                C47430 +
            (((C21999 - C21998) * C116 + (C22001 - C22000) * C47384) * C21364 +
             ((C22003 - C22002) * C116 + (C22005 - C22004) * C47384) * C21365 +
             ((C21367 * C1543 - C47108 * C1546) * C116 +
              (C21367 * C1549 - C47108 * C1552) * C47384) *
                 C21366) *
                C47268) *
               C47226) *
              C259 +
          (((((C47108 * C126 - C21367 * C119) * C116 +
              (C47108 * C140 - C21367 * C129) * C47384) *
                 C21364 +
             ((C21503 - C21504) * C116 + (C21505 - C21506) * C47384) * C21365 +
             C21529 * C21366) *
                C47430 +
            (((C21367 * C416 - C47108 * C426) * C116 +
              (C21367 * C429 - C47108 * C446) * C47384) *
                 C21364 +
             ((C22006 - C22007) * C116 + (C22008 - C22009) * C47384) * C21365 +
             ((C22010 - C22011) * C116 + (C22012 - C22013) * C47384) * C21366) *
                C47268) *
               C47429 +
           ((((C21504 - C21503) * C116 + (C21506 - C21505) * C47384) * C21364 +
             ((C21508 - C21507) * C116 + (C21510 - C21509) * C47384) * C21365 +
             ((C21511 - C21512) * C116 + (C21513 - C21514) * C47384) * C21366) *
                C47430 +
            (((C22007 - C22006) * C116 + (C22009 - C22008) * C47384) * C21364 +
             ((C22011 - C22010) * C116 + (C22013 - C22012) * C47384) * C21365 +
             ((C47108 * C1547 - C21367 * C1544) * C116 +
              (C47108 * C1553 - C21367 * C1550) * C47384) *
                 C21366) *
                C47268) *
               C47226) *
              C47455)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C47108 * C124 - C21367 * C117) * C116 +
             (C47108 * C138 - C21367 * C127) * C47384) *
                C21364 +
            ((C21479 - C21480) * C116 + (C21481 - C21482) * C47384) * C21365 +
            C21527 * C21366) *
               C47430 +
           (((C21367 * C414 - C47108 * C424) * C116 +
             (C21367 * C427 - C47108 * C444) * C47384) *
                C21364 +
            ((C21990 - C21991) * C116 + (C21992 - C21993) * C47384) * C21365 +
            C22344 * C21366) *
               C47268) *
              C1284 +
          ((((C21480 - C21479) * C116 + (C21482 - C21481) * C47384) * C21364 +
            ((C21484 - C21483) * C116 + (C21486 - C21485) * C47384) * C21365 +
            C22204 * C21366) *
               C47430 +
           (((C21991 - C21990) * C116 + (C21993 - C21992) * C47384) * C21364 +
            ((C21995 - C21994) * C116 + (C21997 - C21996) * C47384) * C21365 +
            C22720 * C21366) *
               C47268) *
              C1285 +
          ((C21527 * C21364 +
            ((C21488 - C21487) * C116 + (C21490 - C21489) * C47384) * C21365 +
            C22207 * C21366) *
               C47430 +
           (C22344 * C21364 +
            ((C22333 - C22332) * C116 + (C22335 - C22334) * C47384) * C21365 +
            ((C22714 - C22715) * C116 + (C22716 - C22717) * C47384) * C21366) *
               C47268) *
              C1286 +
          ((C22204 * C21364 +
            ((C22193 - C22192) * C116 + (C22195 - C22194) * C47384) * C21365 +
            ((C22196 - C22197) * C116 + (C22198 - C22199) * C47384) * C21366) *
               C47430 +
           (C22720 * C21364 +
            ((C22715 - C22714) * C116 + (C22717 - C22716) * C47384) * C21365 +
            ((C47108 * C22708 - C21367 * C22707) * C116 +
             (C47108 * C22710 - C21367 * C22709) * C47384) *
                C21366) *
               C47268) *
              C47471) *
         C47135) /
            (p * q * std::sqrt(p + q));
    d2ee[122] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C47108 * C124 - C21367 * C117) * C116 +
             (C47108 * C138 - C21367 * C127) * C47384) *
                C21364 +
            ((C21479 - C21480) * C116 + (C21481 - C21482) * C47384) * C21365 +
            C21527 * C21366) *
               C47181 * C47500 +
           (((C21480 - C21479) * C116 + (C21482 - C21481) * C47384) * C21364 +
            ((C21484 - C21483) * C116 + (C21486 - C21485) * C47384) * C21365 +
            ((C21487 - C21488) * C116 + (C21489 - C21490) * C47384) * C21366) *
               C47181 * C47488 +
           (C21527 * C21364 +
            ((C21488 - C21487) * C116 + (C21490 - C21489) * C47384) * C21365 +
            ((C47108 * C1028 - C21367 * C1019) * C116 +
             (C47108 * C1037 - C21367 * C1031) * C47384) *
                C21366) *
               C47181 * C47461) *
              C258 +
          ((((C21367 * C118 - C47108 * C125) * C116 +
             (C21367 * C128 - C47108 * C139) * C47384) *
                C21364 +
            ((C21491 - C21492) * C116 + (C21493 - C21494) * C47384) * C21365 +
            C21528 * C21366) *
               C47181 * C47500 +
           (((C21492 - C21491) * C116 + (C21494 - C21493) * C47384) * C21364 +
            ((C21496 - C21495) * C116 + (C21498 - C21497) * C47384) * C21365 +
            ((C21499 - C21500) * C116 + (C21501 - C21502) * C47384) * C21366) *
               C47181 * C47488 +
           (C21528 * C21364 +
            ((C21500 - C21499) * C116 + (C21502 - C21501) * C47384) * C21365 +
            ((C21367 * C1020 - C47108 * C1029) * C116 +
             (C21367 * C1032 - C47108 * C1038) * C47384) *
                C21366) *
               C47181 * C47461) *
              C259 +
          ((((C47108 * C126 - C21367 * C119) * C116 +
             (C47108 * C140 - C21367 * C129) * C47384) *
                C21364 +
            ((C21503 - C21504) * C116 + (C21505 - C21506) * C47384) * C21365 +
            C21529 * C21366) *
               C47181 * C47500 +
           (((C21504 - C21503) * C116 + (C21506 - C21505) * C47384) * C21364 +
            ((C21508 - C21507) * C116 + (C21510 - C21509) * C47384) * C21365 +
            ((C21511 - C21512) * C116 + (C21513 - C21514) * C47384) * C21366) *
               C47181 * C47488 +
           (C21529 * C21364 +
            ((C21512 - C21511) * C116 + (C21514 - C21513) * C47384) * C21365 +
            ((C47108 * C1030 - C21367 * C1021) * C116 +
             (C47108 * C1039 - C21367 * C1033) * C47384) *
                C21366) *
               C47181 * C47461) *
              C47455)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C47108 * C124 - C21367 * C117) * C116 +
            (C47108 * C138 - C21367 * C127) * C47384) *
               C21364 +
           ((C47108 * C271 - C21367 * C261) * C116 +
            (C47108 * C291 - C21367 * C274) * C47384) *
               C21365 +
           ((C47108 * C277 - C21367 * C264) * C116 +
            (C47108 * C294 - C21367 * C280) * C47384) *
               C21366) *
              C47181 * C47163 * C108 +
          (((C21367 * C118 - C47108 * C125) * C116 +
            (C21367 * C128 - C47108 * C139) * C47384) *
               C21364 +
           ((C21367 * C262 - C47108 * C272) * C116 +
            (C21367 * C275 - C47108 * C292) * C47384) *
               C21365 +
           ((C21367 * C265 - C47108 * C278) * C116 +
            (C21367 * C281 - C47108 * C295) * C47384) *
               C21366) *
              C47181 * C47163 * C109 +
          (((C47108 * C126 - C21367 * C119) * C116 +
            (C47108 * C140 - C21367 * C129) * C47384) *
               C21364 +
           ((C47108 * C273 - C21367 * C263) * C116 +
            (C47108 * C293 - C21367 * C276) * C47384) *
               C21365 +
           ((C47108 * C279 - C21367 * C266) * C116 +
            (C47108 * C296 - C21367 * C282) * C47384) *
               C21366) *
              C47181 * C47163 * C110 +
          (((C21367 * C120 - C47108 * C130) * C116 +
            (C21367 * C131 - C47108 * C141) * C47384) *
               C21364 +
           ((C21367 * C267 - C47108 * C283) * C116 +
            (C21367 * C284 - C47108 * C297) * C47384) *
               C21365 +
           ((C21367 * C268 - C47108 * C285) * C116 +
            (C21367 * C286 - C47108 * C298) * C47384) *
               C21366) *
              C47181 * C47163 * C111 +
          (((C47108 * C132 - C21367 * C121) * C116 +
            (C47108 * C142 - C21367 * C133) * C47384) *
               C21364 +
           ((C47108 * C287 - C21367 * C269) * C116 +
            (C47108 * C299 - C21367 * C288) * C47384) *
               C21365 +
           ((C47108 * C289 - C21367 * C270) * C116 +
            (C47108 * C300 - C21367 * C290) * C47384) *
               C21366) *
              C47181 * C47163 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C47108 * C124 - C21367 * C117) * C116 +
             (C47108 * C138 - C21367 * C127) * C47384) *
                C21364 +
            ((C21479 - C21480) * C116 + (C21481 - C21482) * C47384) * C21365 +
            C21527 * C21366) *
               C47501 +
           (((C21367 * C414 - C47108 * C424) * C116 +
             (C21367 * C427 - C47108 * C444) * C47384) *
                C21364 +
            ((C21367 * C812 - C47108 * C817) * C116 +
             (C21367 * C820 - C47108 * C827) * C47384) *
                C21365 +
            ((C21367 * C1153 - C47108 * C1165) * C116 +
             (C21367 * C1168 - C47108 * C1180) * C47384) *
                C21366) *
               C47490 +
           (((C47108 * C430 - C21367 * C417) * C116 +
             (C47108 * C447 - C21367 * C433) * C47384) *
                C21364 +
            ((C47108 * C1159 - C21367 * C1150) * C116 +
             (C47108 * C1177 - C21367 * C1162) * C47384) *
                C21365 +
            ((C47108 * C1171 - C21367 * C1156) * C116 +
             (C47108 * C1183 - C21367 * C1174) * C47384) *
                C21366) *
               C47464) *
              C47163 * C258 +
          ((((C21367 * C118 - C47108 * C125) * C116 +
             (C21367 * C128 - C47108 * C139) * C47384) *
                C21364 +
            ((C21491 - C21492) * C116 + (C21493 - C21494) * C47384) * C21365 +
            C21528 * C21366) *
               C47501 +
           (((C47108 * C425 - C21367 * C415) * C116 +
             (C47108 * C445 - C21367 * C428) * C47384) *
                C21364 +
            ((C47108 * C818 - C21367 * C813) * C116 +
             (C47108 * C828 - C21367 * C821) * C47384) *
                C21365 +
            ((C47108 * C1166 - C21367 * C1154) * C116 +
             (C47108 * C1181 - C21367 * C1169) * C47384) *
                C21366) *
               C47490 +
           (((C21367 * C418 - C47108 * C431) * C116 +
             (C21367 * C434 - C47108 * C448) * C47384) *
                C21364 +
            ((C21367 * C1151 - C47108 * C1160) * C116 +
             (C21367 * C1163 - C47108 * C1178) * C47384) *
                C21365 +
            ((C21367 * C1157 - C47108 * C1172) * C116 +
             (C21367 * C1175 - C47108 * C1184) * C47384) *
                C21366) *
               C47464) *
              C47163 * C259 +
          ((((C47108 * C126 - C21367 * C119) * C116 +
             (C47108 * C140 - C21367 * C129) * C47384) *
                C21364 +
            ((C21503 - C21504) * C116 + (C21505 - C21506) * C47384) * C21365 +
            C21529 * C21366) *
               C47501 +
           (((C21367 * C416 - C47108 * C426) * C116 +
             (C21367 * C429 - C47108 * C446) * C47384) *
                C21364 +
            ((C21367 * C814 - C47108 * C819) * C116 +
             (C21367 * C822 - C47108 * C829) * C47384) *
                C21365 +
            ((C21367 * C1155 - C47108 * C1167) * C116 +
             (C21367 * C1170 - C47108 * C1182) * C47384) *
                C21366) *
               C47490 +
           (((C47108 * C432 - C21367 * C419) * C116 +
             (C47108 * C449 - C21367 * C435) * C47384) *
                C21364 +
            ((C47108 * C1161 - C21367 * C1152) * C116 +
             (C47108 * C1179 - C21367 * C1164) * C47384) *
                C21365 +
            ((C47108 * C1173 - C21367 * C1158) * C116 +
             (C47108 * C1185 - C21367 * C1176) * C47384) *
                C21366) *
               C47464) *
              C47163 * C47455)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C47108 * C124 - C21367 * C117) * C116 +
             (C47108 * C138 - C21367 * C127) * C47384) *
                C21364 +
            ((C21479 - C21480) * C116 + (C21481 - C21482) * C47384) * C21365 +
            C21527 * C21366) *
               C47181 * C942 +
           (((C21480 - C21479) * C116 + (C21482 - C21481) * C47384) * C21364 +
            ((C21484 - C21483) * C116 + (C21486 - C21485) * C47384) * C21365 +
            ((C21487 - C21488) * C116 + (C21489 - C21490) * C47384) * C21366) *
               C47181 * C943 +
           (C21527 * C21364 +
            ((C21488 - C21487) * C116 + (C21490 - C21489) * C47384) * C21365 +
            ((C47108 * C1028 - C21367 * C1019) * C116 +
             (C47108 * C1037 - C21367 * C1031) * C47384) *
                C21366) *
               C47181 * C47461) *
              C47497 +
          ((((C21367 * C118 - C47108 * C125) * C116 +
             (C21367 * C128 - C47108 * C139) * C47384) *
                C21364 +
            ((C21491 - C21492) * C116 + (C21493 - C21494) * C47384) * C21365 +
            C21528 * C21366) *
               C47181 * C942 +
           (((C21492 - C21491) * C116 + (C21494 - C21493) * C47384) * C21364 +
            ((C21496 - C21495) * C116 + (C21498 - C21497) * C47384) * C21365 +
            ((C21499 - C21500) * C116 + (C21501 - C21502) * C47384) * C21366) *
               C47181 * C943 +
           (C21528 * C21364 +
            ((C21500 - C21499) * C116 + (C21502 - C21501) * C47384) * C21365 +
            ((C21367 * C1020 - C47108 * C1029) * C116 +
             (C21367 * C1032 - C47108 * C1038) * C47384) *
                C21366) *
               C47181 * C47461) *
              C47484 +
          ((((C47108 * C126 - C21367 * C119) * C116 +
             (C47108 * C140 - C21367 * C129) * C47384) *
                C21364 +
            ((C21503 - C21504) * C116 + (C21505 - C21506) * C47384) * C21365 +
            C21529 * C21366) *
               C47181 * C942 +
           (((C21504 - C21503) * C116 + (C21506 - C21505) * C47384) * C21364 +
            ((C21508 - C21507) * C116 + (C21510 - C21509) * C47384) * C21365 +
            ((C21511 - C21512) * C116 + (C21513 - C21514) * C47384) * C21366) *
               C47181 * C943 +
           (C21529 * C21364 +
            ((C21512 - C21511) * C116 + (C21514 - C21513) * C47384) * C21365 +
            ((C47108 * C1030 - C21367 * C1021) * C116 +
             (C47108 * C1039 - C21367 * C1033) * C47384) *
                C21366) *
               C47181 * C47461) *
              C47455)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C47108 * C124 - C21367 * C117) * C116 +
            (C47108 * C138 - C21367 * C127) * C47384) *
               C21364 +
           ((C21479 - C21480) * C116 + (C21481 - C21482) * C47384) * C21365 +
           C21527 * C21366) *
              C47181 * C1010 +
          (((C21480 - C21479) * C116 + (C21482 - C21481) * C47384) * C21364 +
           ((C21484 - C21483) * C116 + (C21486 - C21485) * C47384) * C21365 +
           C22204 * C21366) *
              C47181 * C1011 +
          (C21527 * C21364 +
           ((C21488 - C21487) * C116 + (C21490 - C21489) * C47384) * C21365 +
           C22207 * C21366) *
              C47181 * C1012 +
          (C22204 * C21364 +
           ((C22193 - C22192) * C116 + (C22195 - C22194) * C47384) * C21365 +
           ((C22196 - C22197) * C116 + (C22198 - C22199) * C47384) * C21366) *
              C47181 * C1013 +
          (C22207 * C21364 +
           ((C22197 - C22196) * C116 + (C22199 - C22198) * C47384) * C21365 +
           ((C47108 * C22186 - C21367 * C22185) * C116 +
            (C47108 * C22188 - C21367 * C22187) * C47384) *
               C21366) *
              C47181 * C1014) *
         C47135) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C47108 * C124 - C21367 * C117) * C116 +
             (C47108 * C138 - C21367 * C127) * C47384) *
                C21364 +
            ((C21479 - C21480) * C116 + (C21481 - C21482) * C47384) * C21365 +
            C21527 * C21366) *
               C47501 +
           (((C21367 * C414 - C47108 * C424) * C116 +
             (C21367 * C427 - C47108 * C444) * C47384) *
                C21364 +
            ((C21990 - C21991) * C116 + (C21992 - C21993) * C47384) * C21365 +
            C22344 * C21366) *
               C47490 +
           (((C47108 * C430 - C21367 * C417) * C116 +
             (C47108 * C447 - C21367 * C433) * C47384) *
                C21364 +
            ((C22324 - C22325) * C116 + (C22326 - C22327) * C47384) * C21365 +
            C22347 * C21366) *
               C47464) *
              C942 +
          ((((C21480 - C21479) * C116 + (C21482 - C21481) * C47384) * C21364 +
            ((C21484 - C21483) * C116 + (C21486 - C21485) * C47384) * C21365 +
            C22204 * C21366) *
               C47501 +
           (((C21991 - C21990) * C116 + (C21993 - C21992) * C47384) * C21364 +
            ((C21995 - C21994) * C116 + (C21997 - C21996) * C47384) * C21365 +
            ((C22332 - C22333) * C116 + (C22334 - C22335) * C47384) * C21366) *
               C47490 +
           (((C22325 - C22324) * C116 + (C22327 - C22326) * C47384) * C21364 +
            ((C22329 - C22328) * C116 + (C22331 - C22330) * C47384) * C21365 +
            ((C22336 - C22337) * C116 + (C22338 - C22339) * C47384) * C21366) *
               C47464) *
              C943 +
          ((C21527 * C21364 +
            ((C21488 - C21487) * C116 + (C21490 - C21489) * C47384) * C21365 +
            C22207 * C21366) *
               C47501 +
           (C22344 * C21364 +
            ((C22333 - C22332) * C116 + (C22335 - C22334) * C47384) * C21365 +
            ((C21367 * C6307 - C47108 * C6309) * C116 +
             (C21367 * C6311 - C47108 * C6313) * C47384) *
                C21366) *
               C47490 +
           (C22347 * C21364 +
            ((C22337 - C22336) * C116 + (C22339 - C22338) * C47384) * C21365 +
            ((C47108 * C22318 - C21367 * C22317) * C116 +
             (C47108 * C22320 - C21367 * C22319) * C47384) *
                C21366) *
               C47464) *
              C47461) *
         C47135) /
            (p * q * std::sqrt(p + q));
    d2ee[123] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C47108 * C124 - C21367 * C117) * C116 +
             (C47108 * C138 - C21367 * C127) * C47384) *
                C21364 +
            ((C21479 - C21480) * C116 + (C21481 - C21482) * C47384) * C21365 +
            C21527 * C21366) *
               C47430 +
           (((C21367 * C414 - C47108 * C424) * C116 +
             (C21367 * C427 - C47108 * C444) * C47384) *
                C21364 +
            ((C21367 * C812 - C47108 * C817) * C116 +
             (C21367 * C820 - C47108 * C827) * C47384) *
                C21365 +
            ((C21367 * C1153 - C47108 * C1165) * C116 +
             (C21367 * C1168 - C47108 * C1180) * C47384) *
                C21366) *
               C47268) *
              C47163 * C554 +
          ((((C21367 * C118 - C47108 * C125) * C116 +
             (C21367 * C128 - C47108 * C139) * C47384) *
                C21364 +
            ((C21491 - C21492) * C116 + (C21493 - C21494) * C47384) * C21365 +
            C21528 * C21366) *
               C47430 +
           (((C47108 * C425 - C21367 * C415) * C116 +
             (C47108 * C445 - C21367 * C428) * C47384) *
                C21364 +
            ((C47108 * C818 - C21367 * C813) * C116 +
             (C47108 * C828 - C21367 * C821) * C47384) *
                C21365 +
            ((C47108 * C1166 - C21367 * C1154) * C116 +
             (C47108 * C1181 - C21367 * C1169) * C47384) *
                C21366) *
               C47268) *
              C47163 * C555 +
          ((((C47108 * C126 - C21367 * C119) * C116 +
             (C47108 * C140 - C21367 * C129) * C47384) *
                C21364 +
            ((C21503 - C21504) * C116 + (C21505 - C21506) * C47384) * C21365 +
            C21529 * C21366) *
               C47430 +
           (((C21367 * C416 - C47108 * C426) * C116 +
             (C21367 * C429 - C47108 * C446) * C47384) *
                C21364 +
            ((C21367 * C814 - C47108 * C819) * C116 +
             (C21367 * C822 - C47108 * C829) * C47384) *
                C21365 +
            ((C21367 * C1155 - C47108 * C1167) * C116 +
             (C21367 * C1170 - C47108 * C1182) * C47384) *
                C21366) *
               C47268) *
              C47163 * C556 +
          ((((C21367 * C120 - C47108 * C130) * C116 +
             (C21367 * C131 - C47108 * C141) * C47384) *
                C21364 +
            ((C21738 - C21739) * C116 + (C21740 - C21741) * C47384) * C21365 +
            ((C21742 - C21743) * C116 + (C21744 - C21745) * C47384) * C21366) *
               C47430 +
           (((C47108 * C436 - C21367 * C420) * C116 +
             (C47108 * C450 - C21367 * C437) * C47384) *
                C21364 +
            ((C47108 * C823 - C21367 * C815) * C116 +
             (C47108 * C830 - C21367 * C824) * C47384) *
                C21365 +
            ((C47108 * C1441 - C21367 * C1440) * C116 +
             (C47108 * C1443 - C21367 * C1442) * C47384) *
                C21366) *
               C47268) *
              C47163 * C47465)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C47108 * C124 - C21367 * C117) * C116 +
              (C47108 * C138 - C21367 * C127) * C47384) *
                 C21364 +
             ((C21479 - C21480) * C116 + (C21481 - C21482) * C47384) * C21365 +
             C21527 * C21366) *
                C47430 +
            (((C21367 * C414 - C47108 * C424) * C116 +
              (C21367 * C427 - C47108 * C444) * C47384) *
                 C21364 +
             ((C21990 - C21991) * C116 + (C21992 - C21993) * C47384) * C21365 +
             C22344 * C21366) *
                C47268) *
               C942 +
           ((((C21480 - C21479) * C116 + (C21482 - C21481) * C47384) * C21364 +
             ((C21484 - C21483) * C116 + (C21486 - C21485) * C47384) * C21365 +
             C22204 * C21366) *
                C47430 +
            (((C21991 - C21990) * C116 + (C21993 - C21992) * C47384) * C21364 +
             ((C21995 - C21994) * C116 + (C21997 - C21996) * C47384) * C21365 +
             ((C22332 - C22333) * C116 + (C22334 - C22335) * C47384) * C21366) *
                C47268) *
               C943 +
           ((C21527 * C21364 +
             ((C21488 - C21487) * C116 + (C21490 - C21489) * C47384) * C21365 +
             C22207 * C21366) *
                C47430 +
            (C22344 * C21364 +
             ((C22333 - C22332) * C116 + (C22335 - C22334) * C47384) * C21365 +
             ((C21367 * C6307 - C47108 * C6309) * C116 +
              (C21367 * C6311 - C47108 * C6313) * C47384) *
                 C21366) *
                C47268) *
               C47461) *
              C47415 +
          (((((C21367 * C118 - C47108 * C125) * C116 +
              (C21367 * C128 - C47108 * C139) * C47384) *
                 C21364 +
             ((C21491 - C21492) * C116 + (C21493 - C21494) * C47384) * C21365 +
             C21528 * C21366) *
                C47430 +
            (((C47108 * C425 - C21367 * C415) * C116 +
              (C47108 * C445 - C21367 * C428) * C47384) *
                 C21364 +
             ((C21998 - C21999) * C116 + (C22000 - C22001) * C47384) * C21365 +
             C22609 * C21366) *
                C47268) *
               C942 +
           ((((C21492 - C21491) * C116 + (C21494 - C21493) * C47384) * C21364 +
             ((C21496 - C21495) * C116 + (C21498 - C21497) * C47384) * C21365 +
             C22454 * C21366) *
                C47430 +
            (((C21999 - C21998) * C116 + (C22001 - C22000) * C47384) * C21364 +
             ((C22003 - C22002) * C116 + (C22005 - C22004) * C47384) * C21365 +
             ((C22603 - C22604) * C116 + (C22605 - C22606) * C47384) * C21366) *
                C47268) *
               C943 +
           ((C21528 * C21364 +
             ((C21500 - C21499) * C116 + (C21502 - C21501) * C47384) * C21365 +
             ((C22448 - C22449) * C116 + (C22450 - C22451) * C47384) * C21366) *
                C47430 +
            (C22609 * C21364 +
             ((C22604 - C22603) * C116 + (C22606 - C22605) * C47384) * C21365 +
             ((C47108 * C6310 - C21367 * C6308) * C116 +
              (C47108 * C6314 - C21367 * C6312) * C47384) *
                 C21366) *
                C47268) *
               C47461) *
              C47146)) /
            (p * q * std::sqrt(p + q));
    d2ee[124] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C47108 * C124 - C21367 * C117) * C116 +
            (C47108 * C138 - C21367 * C127) * C47384) *
               C21364 +
           ((C47108 * C271 - C21367 * C261) * C116 +
            (C47108 * C291 - C21367 * C274) * C47384) *
               C21365 +
           ((C47108 * C277 - C21367 * C264) * C116 +
            (C47108 * C294 - C21367 * C280) * C47384) *
               C21366) *
              C47181 * C47163 * C108 +
          (((C21367 * C118 - C47108 * C125) * C116 +
            (C21367 * C128 - C47108 * C139) * C47384) *
               C21364 +
           ((C21367 * C262 - C47108 * C272) * C116 +
            (C21367 * C275 - C47108 * C292) * C47384) *
               C21365 +
           ((C21367 * C265 - C47108 * C278) * C116 +
            (C21367 * C281 - C47108 * C295) * C47384) *
               C21366) *
              C47181 * C47163 * C109 +
          (((C47108 * C126 - C21367 * C119) * C116 +
            (C47108 * C140 - C21367 * C129) * C47384) *
               C21364 +
           ((C47108 * C273 - C21367 * C263) * C116 +
            (C47108 * C293 - C21367 * C276) * C47384) *
               C21365 +
           ((C47108 * C279 - C21367 * C266) * C116 +
            (C47108 * C296 - C21367 * C282) * C47384) *
               C21366) *
              C47181 * C47163 * C110 +
          (((C21367 * C120 - C47108 * C130) * C116 +
            (C21367 * C131 - C47108 * C141) * C47384) *
               C21364 +
           ((C21367 * C267 - C47108 * C283) * C116 +
            (C21367 * C284 - C47108 * C297) * C47384) *
               C21365 +
           ((C21367 * C268 - C47108 * C285) * C116 +
            (C21367 * C286 - C47108 * C298) * C47384) *
               C21366) *
              C47181 * C47163 * C111 +
          (((C47108 * C132 - C21367 * C121) * C116 +
            (C47108 * C142 - C21367 * C133) * C47384) *
               C21364 +
           ((C47108 * C287 - C21367 * C269) * C116 +
            (C47108 * C299 - C21367 * C288) * C47384) *
               C21365 +
           ((C47108 * C289 - C21367 * C270) * C116 +
            (C47108 * C300 - C21367 * C290) * C47384) *
               C21366) *
              C47181 * C47163 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C47108 * C124 - C21367 * C117) * C116 +
             (C47108 * C138 - C21367 * C127) * C47384) *
                C21364 +
            ((C21479 - C21480) * C116 + (C21481 - C21482) * C47384) * C21365 +
            C21527 * C21366) *
               C47181 * C47500 +
           (((C21480 - C21479) * C116 + (C21482 - C21481) * C47384) * C21364 +
            ((C21484 - C21483) * C116 + (C21486 - C21485) * C47384) * C21365 +
            ((C21487 - C21488) * C116 + (C21489 - C21490) * C47384) * C21366) *
               C47181 * C47488 +
           (C21527 * C21364 +
            ((C21488 - C21487) * C116 + (C21490 - C21489) * C47384) * C21365 +
            ((C47108 * C1028 - C21367 * C1019) * C116 +
             (C47108 * C1037 - C21367 * C1031) * C47384) *
                C21366) *
               C47181 * C47461) *
              C258 +
          ((((C21367 * C118 - C47108 * C125) * C116 +
             (C21367 * C128 - C47108 * C139) * C47384) *
                C21364 +
            ((C21491 - C21492) * C116 + (C21493 - C21494) * C47384) * C21365 +
            C21528 * C21366) *
               C47181 * C47500 +
           (((C21492 - C21491) * C116 + (C21494 - C21493) * C47384) * C21364 +
            ((C21496 - C21495) * C116 + (C21498 - C21497) * C47384) * C21365 +
            ((C21499 - C21500) * C116 + (C21501 - C21502) * C47384) * C21366) *
               C47181 * C47488 +
           (C21528 * C21364 +
            ((C21500 - C21499) * C116 + (C21502 - C21501) * C47384) * C21365 +
            ((C21367 * C1020 - C47108 * C1029) * C116 +
             (C21367 * C1032 - C47108 * C1038) * C47384) *
                C21366) *
               C47181 * C47461) *
              C259 +
          ((((C47108 * C126 - C21367 * C119) * C116 +
             (C47108 * C140 - C21367 * C129) * C47384) *
                C21364 +
            ((C21503 - C21504) * C116 + (C21505 - C21506) * C47384) * C21365 +
            C21529 * C21366) *
               C47181 * C47500 +
           (((C21504 - C21503) * C116 + (C21506 - C21505) * C47384) * C21364 +
            ((C21508 - C21507) * C116 + (C21510 - C21509) * C47384) * C21365 +
            ((C21511 - C21512) * C116 + (C21513 - C21514) * C47384) * C21366) *
               C47181 * C47488 +
           (C21529 * C21364 +
            ((C21512 - C21511) * C116 + (C21514 - C21513) * C47384) * C21365 +
            ((C47108 * C1030 - C21367 * C1021) * C116 +
             (C47108 * C1039 - C21367 * C1033) * C47384) *
                C21366) *
               C47181 * C47461) *
              C47455)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C47108 * C124 - C21367 * C117) * C116 +
             (C47108 * C138 - C21367 * C127) * C47384) *
                C21364 +
            ((C21479 - C21480) * C116 + (C21481 - C21482) * C47384) * C21365 +
            C21527 * C21366) *
               C47181 * C942 +
           (((C21480 - C21479) * C116 + (C21482 - C21481) * C47384) * C21364 +
            ((C21484 - C21483) * C116 + (C21486 - C21485) * C47384) * C21365 +
            ((C21487 - C21488) * C116 + (C21489 - C21490) * C47384) * C21366) *
               C47181 * C943 +
           (C21527 * C21364 +
            ((C21488 - C21487) * C116 + (C21490 - C21489) * C47384) * C21365 +
            ((C47108 * C1028 - C21367 * C1019) * C116 +
             (C47108 * C1037 - C21367 * C1031) * C47384) *
                C21366) *
               C47181 * C47461) *
              C47497 +
          ((((C21367 * C118 - C47108 * C125) * C116 +
             (C21367 * C128 - C47108 * C139) * C47384) *
                C21364 +
            ((C21491 - C21492) * C116 + (C21493 - C21494) * C47384) * C21365 +
            C21528 * C21366) *
               C47181 * C942 +
           (((C21492 - C21491) * C116 + (C21494 - C21493) * C47384) * C21364 +
            ((C21496 - C21495) * C116 + (C21498 - C21497) * C47384) * C21365 +
            ((C21499 - C21500) * C116 + (C21501 - C21502) * C47384) * C21366) *
               C47181 * C943 +
           (C21528 * C21364 +
            ((C21500 - C21499) * C116 + (C21502 - C21501) * C47384) * C21365 +
            ((C21367 * C1020 - C47108 * C1029) * C116 +
             (C21367 * C1032 - C47108 * C1038) * C47384) *
                C21366) *
               C47181 * C47461) *
              C47484 +
          ((((C47108 * C126 - C21367 * C119) * C116 +
             (C47108 * C140 - C21367 * C129) * C47384) *
                C21364 +
            ((C21503 - C21504) * C116 + (C21505 - C21506) * C47384) * C21365 +
            C21529 * C21366) *
               C47181 * C942 +
           (((C21504 - C21503) * C116 + (C21506 - C21505) * C47384) * C21364 +
            ((C21508 - C21507) * C116 + (C21510 - C21509) * C47384) * C21365 +
            ((C21511 - C21512) * C116 + (C21513 - C21514) * C47384) * C21366) *
               C47181 * C943 +
           (C21529 * C21364 +
            ((C21512 - C21511) * C116 + (C21514 - C21513) * C47384) * C21365 +
            ((C47108 * C1030 - C21367 * C1021) * C116 +
             (C47108 * C1039 - C21367 * C1033) * C47384) *
                C21366) *
               C47181 * C47461) *
              C47455)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C47108 * C124 - C21367 * C117) * C116 +
            (C47108 * C138 - C21367 * C127) * C47384) *
               C21364 +
           ((C21479 - C21480) * C116 + (C21481 - C21482) * C47384) * C21365 +
           C21527 * C21366) *
              C47181 * C1010 +
          (((C21480 - C21479) * C116 + (C21482 - C21481) * C47384) * C21364 +
           ((C21484 - C21483) * C116 + (C21486 - C21485) * C47384) * C21365 +
           C22204 * C21366) *
              C47181 * C1011 +
          (C21527 * C21364 +
           ((C21488 - C21487) * C116 + (C21490 - C21489) * C47384) * C21365 +
           C22207 * C21366) *
              C47181 * C1012 +
          (C22204 * C21364 +
           ((C22193 - C22192) * C116 + (C22195 - C22194) * C47384) * C21365 +
           ((C22196 - C22197) * C116 + (C22198 - C22199) * C47384) * C21366) *
              C47181 * C1013 +
          (C22207 * C21364 +
           ((C22197 - C22196) * C116 + (C22199 - C22198) * C47384) * C21365 +
           ((C47108 * C22186 - C21367 * C22185) * C116 +
            (C47108 * C22188 - C21367 * C22187) * C47384) *
               C21366) *
              C47181 * C1014) *
         C47135) /
            (p * q * std::sqrt(p + q));
    d2ee[125] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((((C47108 * C124 - C21367 * C117) * C10231 +
                      (C47108 * C138 - C21367 * C127) * C10229 +
                      (C25975 - C25976) * C10232 + (C25977 - C25978) * C47481) *
                         C15771 +
                     ((C21479 - C21480) * C10231 + (C21481 - C21482) * C10229 +
                      C26465 * C10232 + C26466 * C47481) *
                         C47479) *
                        C47181 * C47222 +
                    (((C21480 - C21479) * C10231 + (C21482 - C21481) * C10229 +
                      C26467 * C10232 + C26468 * C47481) *
                         C15771 +
                     ((C21484 - C21483) * C10231 + (C21486 - C21485) * C10229 +
                      C22322 * C10232 + C22323 * C47481) *
                         C47479) *
                        C47181 * C47229 +
                    ((C21515 * C10231 + C21516 * C10229 + C26855 * C10232 +
                      C26856 * C47481) *
                         C15771 +
                     ((C21488 - C21487) * C10231 + (C21490 - C21489) * C10229 +
                      C22712 * C10232 + C22713 * C47481) *
                         C47479) *
                        C47181 * C2700) *
                       C47140 +
                   ((((C21367 * C118 - C47108 * C125) * C10231 +
                      (C21367 * C128 - C47108 * C139) * C10229 +
                      (C25983 - C25984) * C10232 + (C25985 - C25986) * C47481) *
                         C15771 +
                     ((C21491 - C21492) * C10231 + (C21493 - C21494) * C10229 +
                      C26469 * C10232 + C26470 * C47481) *
                         C47479) *
                        C47181 * C47222 +
                    (((C21492 - C21491) * C10231 + (C21494 - C21493) * C10229 +
                      C26471 * C10232 + C26472 * C47481) *
                         C15771 +
                     ((C21496 - C21495) * C10231 + (C21498 - C21497) * C10229 +
                      C22601 * C10232 + C22602 * C47481) *
                         C47479) *
                        C47181 * C47229 +
                    ((C21517 * C10231 + C21518 * C10229 + C27183 * C10232 +
                      C27184 * C47481) *
                         C15771 +
                     ((C21500 - C21499) * C10231 + (C21502 - C21501) * C10229 +
                      (C22603 - C22604) * C10232 + (C22605 - C22606) * C47481) *
                         C47479) *
                        C47181 * C2700) *
                       C47149 +
                   ((((C47108 * C126 - C21367 * C119) * C10231 +
                      (C47108 * C140 - C21367 * C129) * C10229 +
                      (C25991 - C25992) * C10232 + (C25993 - C25994) * C47481) *
                         C15771 +
                     ((C21503 - C21504) * C10231 + (C21505 - C21506) * C10229 +
                      C26473 * C10232 + C26474 * C47481) *
                         C47479) *
                        C47181 * C47222 +
                    (((C21504 - C21503) * C10231 + (C21506 - C21505) * C10229 +
                      C26475 * C10232 + C26476 * C47481) *
                         C15771 +
                     ((C21508 - C21507) * C10231 + (C21510 - C21509) * C10229 +
                      (C22010 - C22011) * C10232 + (C22012 - C22013) * C47481) *
                         C47479) *
                        C47181 * C47229 +
                    ((C21519 * C10231 + C21520 * C10229 +
                      (C22011 - C22010) * C10232 + (C22013 - C22012) * C47481) *
                         C15771 +
                     ((C21512 - C21511) * C10231 + (C21514 - C21513) * C10229 +
                      (C47108 * C1547 - C21367 * C1544) * C10232 +
                      (C47108 * C1553 - C21367 * C1550) * C47481) *
                         C47479) *
                        C47181 * C2700) *
                       C2703)) /
                 (p * q * std::sqrt(p + q));
    d2ee[126] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C47108 * C124 - C21367 * C117) * C10231 +
              (C47108 * C138 - C21367 * C127) * C10229 +
              (C25975 - C25976) * C10232 + (C25977 - C25978) * C47481) *
                 C15771 +
             ((C21479 - C21480) * C10231 + (C21481 - C21482) * C10229 +
              C26465 * C10232 + C26466 * C47481) *
                 C47479) *
                C47430 +
            (((C25976 - C25975) * C10231 + (C25978 - C25977) * C10229 +
              (C25979 - C25980) * C10232 + (C25981 - C25982) * C47481) *
                 C15771 +
             (C26467 * C10231 + C26468 * C10229 + C26851 * C10232 +
              C26852 * C47481) *
                 C47479) *
                C47268) *
               C47222 +
           ((((C21480 - C21479) * C10231 + (C21482 - C21481) * C10229 +
              C26467 * C10232 + C26468 * C47481) *
                 C15771 +
             ((C21484 - C21483) * C10231 + (C21486 - C21485) * C10229 +
              C22322 * C10232 + C22323 * C47481) *
                 C47479) *
                C47430 +
            ((C26465 * C10231 + C26466 * C10229 + C26853 * C10232 +
              C26854 * C47481) *
                 C15771 +
             (C26855 * C10231 + C26856 * C10229 + C22342 * C10232 +
              C22343 * C47481) *
                 C47479) *
                C47268) *
               C47229 +
           (((C21515 * C10231 + C21516 * C10229 + C26855 * C10232 +
              C26856 * C47481) *
                 C15771 +
             ((C21488 - C21487) * C10231 + (C21490 - C21489) * C10229 +
              C22712 * C10232 + C22713 * C47481) *
                 C47479) *
                C47430 +
            ((C22322 * C10231 + C22323 * C10229 + C26857 * C10232 +
              C26858 * C47481) *
                 C15771 +
             (C27315 * C10231 + C27316 * C10229 + (C22336 - C22337) * C10232 +
              (C22338 - C22339) * C47481) *
                 C47479) *
                C47268) *
               C2700) *
              C2440 +
          (((((C21367 * C118 - C47108 * C125) * C10231 +
              (C21367 * C128 - C47108 * C139) * C10229 +
              (C25983 - C25984) * C10232 + (C25985 - C25986) * C47481) *
                 C15771 +
             ((C21491 - C21492) * C10231 + (C21493 - C21494) * C10229 +
              C26469 * C10232 + C26470 * C47481) *
                 C47479) *
                C47430 +
            (((C25984 - C25983) * C10231 + (C25986 - C25985) * C10229 +
              (C25987 - C25988) * C10232 + (C25989 - C25990) * C47481) *
                 C15771 +
             (C26471 * C10231 + C26472 * C10229 + C27901 * C10232 +
              C27902 * C47481) *
                 C47479) *
                C47268) *
               C47222 +
           ((((C21492 - C21491) * C10231 + (C21494 - C21493) * C10229 +
              C26471 * C10232 + C26472 * C47481) *
                 C15771 +
             ((C21496 - C21495) * C10231 + (C21498 - C21497) * C10229 +
              C22601 * C10232 + C22602 * C47481) *
                 C47479) *
                C47430 +
            ((C26469 * C10231 + C26470 * C10229 + C27903 * C10232 +
              C27904 * C47481) *
                 C15771 +
             (C27183 * C10231 + C27184 * C10229 + (C23157 - C23158) * C10232 +
              (C23159 - C23160) * C47481) *
                 C47479) *
                C47268) *
               C47229 +
           (((C21517 * C10231 + C21518 * C10229 + C27183 * C10232 +
              C27184 * C47481) *
                 C15771 +
             ((C21500 - C21499) * C10231 + (C21502 - C21501) * C10229 +
              (C22603 - C22604) * C10232 + (C22605 - C22606) * C47481) *
                 C47479) *
                C47430 +
            ((C22601 * C10231 + C22602 * C10229 + (C23158 - C23157) * C10232 +
              (C23160 - C23159) * C47481) *
                 C15771 +
             ((C22604 - C22603) * C10231 + (C22606 - C22605) * C10229 +
              (C47108 * C5808 - C21367 * C5806) * C10232 +
              (C47108 * C5812 - C21367 * C5810) * C47481) *
                 C47479) *
                C47268) *
               C2700) *
              C47146)) /
        (p * q * std::sqrt(p + q));
    d2ee[127] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C47108 * C124 - C21367 * C117) * C10231 +
             (C47108 * C138 - C21367 * C127) * C10229 +
             (C25975 - C25976) * C10232 + (C25977 - C25978) * C47481) *
                C15771 +
            ((C21479 - C21480) * C10231 + (C21481 - C21482) * C10229 +
             C26465 * C10232 + C26466 * C47481) *
                C47479) *
               C47181 * C47507 +
           (((C21480 - C21479) * C10231 + (C21482 - C21481) * C10229 +
             C26467 * C10232 + C26468 * C47481) *
                C15771 +
            ((C21484 - C21483) * C10231 + (C21486 - C21485) * C10229 +
             C22322 * C10232 + C22323 * C47481) *
                C47479) *
               C47181 * C47503 +
           ((C21515 * C10231 + C21516 * C10229 + C26855 * C10232 +
             C26856 * C47481) *
                C15771 +
            ((C21488 - C21487) * C10231 + (C21490 - C21489) * C10229 +
             C22712 * C10232 + C22713 * C47481) *
                C47479) *
               C47181 * C47493 +
           ((C22190 * C10231 + C22191 * C10229 + C27315 * C10232 +
             C27316 * C47481) *
                C15771 +
            ((C22193 - C22192) * C10231 + (C22195 - C22194) * C10229 +
             (C22714 - C22715) * C10232 + (C22716 - C22717) * C47481) *
                C47479) *
               C47181 * C47471) *
              C2440 +
          ((((C21367 * C118 - C47108 * C125) * C10231 +
             (C21367 * C128 - C47108 * C139) * C10229 +
             (C25983 - C25984) * C10232 + (C25985 - C25986) * C47481) *
                C15771 +
            ((C21491 - C21492) * C10231 + (C21493 - C21494) * C10229 +
             C26469 * C10232 + C26470 * C47481) *
                C47479) *
               C47181 * C47507 +
           (((C21492 - C21491) * C10231 + (C21494 - C21493) * C10229 +
             C26471 * C10232 + C26472 * C47481) *
                C15771 +
            ((C21496 - C21495) * C10231 + (C21498 - C21497) * C10229 +
             C22601 * C10232 + C22602 * C47481) *
                C47479) *
               C47181 * C47503 +
           ((C21517 * C10231 + C21518 * C10229 + C27183 * C10232 +
             C27184 * C47481) *
                C15771 +
            ((C21500 - C21499) * C10231 + (C21502 - C21501) * C10229 +
             (C22603 - C22604) * C10232 + (C22605 - C22606) * C47481) *
                C47479) *
               C47181 * C47493 +
           ((C22446 * C10231 + C22447 * C10229 + (C22604 - C22603) * C10232 +
             (C22606 - C22605) * C47481) *
                C15771 +
            ((C22449 - C22448) * C10231 + (C22451 - C22450) * C10229 +
             (C47108 * C6310 - C21367 * C6308) * C10232 +
             (C47108 * C6314 - C21367 * C6312) * C47481) *
                C47479) *
               C47181 * C47471) *
              C47146)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C47108 * C124 - C21367 * C117) * C10231 +
             (C47108 * C138 - C21367 * C127) * C10229 +
             (C25975 - C25976) * C10232 + (C25977 - C25978) * C47481) *
                C15771 +
            ((C21479 - C21480) * C10231 + (C21481 - C21482) * C10229 +
             C26465 * C10232 + C26466 * C47481) *
                C47479) *
               C47181 * C2332 +
           (((C21480 - C21479) * C10231 + (C21482 - C21481) * C10229 +
             C26467 * C10232 + C26468 * C47481) *
                C15771 +
            ((C21484 - C21483) * C10231 + (C21486 - C21485) * C10229 +
             C22322 * C10232 + C22323 * C47481) *
                C47479) *
               C47181 * C47226) *
              C47506 +
          ((((C21367 * C118 - C47108 * C125) * C10231 +
             (C21367 * C128 - C47108 * C139) * C10229 +
             (C25983 - C25984) * C10232 + (C25985 - C25986) * C47481) *
                C15771 +
            ((C21491 - C21492) * C10231 + (C21493 - C21494) * C10229 +
             C26469 * C10232 + C26470 * C47481) *
                C47479) *
               C47181 * C2332 +
           (((C21492 - C21491) * C10231 + (C21494 - C21493) * C10229 +
             C26471 * C10232 + C26472 * C47481) *
                C15771 +
            ((C21496 - C21495) * C10231 + (C21498 - C21497) * C10229 +
             C22601 * C10232 + C22602 * C47481) *
                C47479) *
               C47181 * C47226) *
              C47499 +
          ((((C47108 * C126 - C21367 * C119) * C10231 +
             (C47108 * C140 - C21367 * C129) * C10229 +
             (C25991 - C25992) * C10232 + (C25993 - C25994) * C47481) *
                C15771 +
            ((C21503 - C21504) * C10231 + (C21505 - C21506) * C10229 +
             C26473 * C10232 + C26474 * C47481) *
                C47479) *
               C47181 * C2332 +
           (((C21504 - C21503) * C10231 + (C21506 - C21505) * C10229 +
             C26475 * C10232 + C26476 * C47481) *
                C15771 +
            ((C21508 - C21507) * C10231 + (C21510 - C21509) * C10229 +
             (C22010 - C22011) * C10232 + (C22012 - C22013) * C47481) *
                C47479) *
               C47181 * C47226) *
              C47486 +
          ((((C21367 * C120 - C47108 * C130) * C10231 +
             (C21367 * C131 - C47108 * C141) * C10229 +
             (C26267 - C26268) * C10232 + (C26269 - C26270) * C47481) *
                C15771 +
            ((C21738 - C21739) * C10231 + (C21740 - C21741) * C10229 +
             (C26133 - C26134) * C10232 + (C26135 - C26136) * C47481) *
                C47479) *
               C47181 * C2332 +
           (((C21739 - C21738) * C10231 + (C21741 - C21740) * C10229 +
             (C26134 - C26133) * C10232 + (C26136 - C26135) * C47481) *
                C15771 +
            ((C21743 - C21742) * C10231 + (C21745 - C21744) * C10229 +
             (C47108 * C1441 - C21367 * C1440) * C10232 +
             (C47108 * C1443 - C21367 * C1442) * C47481) *
                C47479) *
               C47181 * C47226) *
              C47465)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C47108 * C124 - C21367 * C117) * C10231 +
              (C47108 * C138 - C21367 * C127) * C10229 +
              (C25975 - C25976) * C10232 + (C25977 - C25978) * C47481) *
                 C15771 +
             ((C21479 - C21480) * C10231 + (C21481 - C21482) * C10229 +
              C26465 * C10232 + C26466 * C47481) *
                 C47479) *
                C47501 +
            (((C25976 - C25975) * C10231 + (C25978 - C25977) * C10229 +
              (C25979 - C25980) * C10232 + (C25981 - C25982) * C47481) *
                 C15771 +
             (C26467 * C10231 + C26468 * C10229 + C26851 * C10232 +
              C26852 * C47481) *
                 C47479) *
                C47490 +
            (((C25980 - C25979) * C10231 + (C25982 - C25981) * C10229 +
              (C27695 - C27696) * C10232 + (C27697 - C27698) * C47481) *
                 C15771 +
             (C26853 * C10231 + C26854 * C10229 + C28173 * C10232 +
              C28174 * C47481) *
                 C47479) *
                C47464) *
               C2332 +
           ((((C21480 - C21479) * C10231 + (C21482 - C21481) * C10229 +
              C26467 * C10232 + C26468 * C47481) *
                 C15771 +
             ((C21484 - C21483) * C10231 + (C21486 - C21485) * C10229 +
              C22322 * C10232 + C22323 * C47481) *
                 C47479) *
                C47501 +
            ((C26465 * C10231 + C26466 * C10229 + C26853 * C10232 +
              C26854 * C47481) *
                 C15771 +
             (C26855 * C10231 + C26856 * C10229 + C22342 * C10232 +
              C22343 * C47481) *
                 C47479) *
                C47490 +
            ((C26851 * C10231 + C26852 * C10229 + C28175 * C10232 +
              C28176 * C47481) *
                 C15771 +
             (C26857 * C10231 + C26858 * C10229 + (C23365 - C23366) * C10232 +
              (C23367 - C23368) * C47481) *
                 C47479) *
                C47464) *
               C47226) *
              C2440 +
          (((((C21367 * C118 - C47108 * C125) * C10231 +
              (C21367 * C128 - C47108 * C139) * C10229 +
              (C25983 - C25984) * C10232 + (C25985 - C25986) * C47481) *
                 C15771 +
             ((C21491 - C21492) * C10231 + (C21493 - C21494) * C10229 +
              C26469 * C10232 + C26470 * C47481) *
                 C47479) *
                C47501 +
            (((C25984 - C25983) * C10231 + (C25986 - C25985) * C10229 +
              (C25987 - C25988) * C10232 + (C25989 - C25990) * C47481) *
                 C15771 +
             (C26471 * C10231 + C26472 * C10229 + C27901 * C10232 +
              C27902 * C47481) *
                 C47479) *
                C47490 +
            (((C25988 - C25987) * C10231 + (C25990 - C25989) * C10229 +
              (C28039 - C28040) * C10232 + (C28041 - C28042) * C47481) *
                 C15771 +
             (C27903 * C10231 + C27904 * C10229 + (C27905 - C27906) * C10232 +
              (C27907 - C27908) * C47481) *
                 C47479) *
                C47464) *
               C2332 +
           ((((C21492 - C21491) * C10231 + (C21494 - C21493) * C10229 +
              C26471 * C10232 + C26472 * C47481) *
                 C15771 +
             ((C21496 - C21495) * C10231 + (C21498 - C21497) * C10229 +
              C22601 * C10232 + C22602 * C47481) *
                 C47479) *
                C47501 +
            ((C26469 * C10231 + C26470 * C10229 + C27903 * C10232 +
              C27904 * C47481) *
                 C15771 +
             (C27183 * C10231 + C27184 * C10229 + (C23157 - C23158) * C10232 +
              (C23159 - C23160) * C47481) *
                 C47479) *
                C47490 +
            ((C27901 * C10231 + C27902 * C10229 + (C27906 - C27905) * C10232 +
              (C27908 - C27907) * C47481) *
                 C15771 +
             ((C23158 - C23157) * C10231 + (C23160 - C23159) * C10229 +
              (C47108 * C7170 - C21367 * C7168) * C10232 +
              (C47108 * C7174 - C21367 * C7172) * C47481) *
                 C47479) *
                C47464) *
               C47226) *
              C47146)) /
            (p * q * std::sqrt(p + q));
    d2ee[128] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C47108 * C124 - C21367 * C117) * C10231 +
              (C47108 * C138 - C21367 * C127) * C10229 +
              (C25975 - C25976) * C10232 + (C25977 - C25978) * C47481) *
                 C15771 +
             ((C21479 - C21480) * C10231 + (C21481 - C21482) * C10229 +
              C26465 * C10232 + C26466 * C47481) *
                 C47479) *
                C47430 +
            (((C25976 - C25975) * C10231 + (C25978 - C25977) * C10229 +
              (C25979 - C25980) * C10232 + (C25981 - C25982) * C47481) *
                 C15771 +
             (C26467 * C10231 + C26468 * C10229 + C26851 * C10232 +
              C26852 * C47481) *
                 C47479) *
                C47268) *
               C2332 +
           ((((C21480 - C21479) * C10231 + (C21482 - C21481) * C10229 +
              C26467 * C10232 + C26468 * C47481) *
                 C15771 +
             ((C21484 - C21483) * C10231 + (C21486 - C21485) * C10229 +
              C22322 * C10232 + C22323 * C47481) *
                 C47479) *
                C47430 +
            ((C26465 * C10231 + C26466 * C10229 + C26853 * C10232 +
              C26854 * C47481) *
                 C15771 +
             (C26855 * C10231 + C26856 * C10229 + C22342 * C10232 +
              C22343 * C47481) *
                 C47479) *
                C47268) *
               C47226) *
              C47140 +
          (((((C21367 * C118 - C47108 * C125) * C10231 +
              (C21367 * C128 - C47108 * C139) * C10229 +
              (C25983 - C25984) * C10232 + (C25985 - C25986) * C47481) *
                 C15771 +
             ((C21491 - C21492) * C10231 + (C21493 - C21494) * C10229 +
              C26469 * C10232 + C26470 * C47481) *
                 C47479) *
                C47430 +
            (((C25984 - C25983) * C10231 + (C25986 - C25985) * C10229 +
              (C25987 - C25988) * C10232 + (C25989 - C25990) * C47481) *
                 C15771 +
             (C26471 * C10231 + C26472 * C10229 + C27901 * C10232 +
              C27902 * C47481) *
                 C47479) *
                C47268) *
               C2332 +
           ((((C21492 - C21491) * C10231 + (C21494 - C21493) * C10229 +
              C26471 * C10232 + C26472 * C47481) *
                 C15771 +
             ((C21496 - C21495) * C10231 + (C21498 - C21497) * C10229 +
              C22601 * C10232 + C22602 * C47481) *
                 C47479) *
                C47430 +
            ((C26469 * C10231 + C26470 * C10229 + C27903 * C10232 +
              C27904 * C47481) *
                 C15771 +
             (C27183 * C10231 + C27184 * C10229 + (C23157 - C23158) * C10232 +
              (C23159 - C23160) * C47481) *
                 C47479) *
                C47268) *
               C47226) *
              C47149 +
          (((((C47108 * C126 - C21367 * C119) * C10231 +
              (C47108 * C140 - C21367 * C129) * C10229 +
              (C25991 - C25992) * C10232 + (C25993 - C25994) * C47481) *
                 C15771 +
             ((C21503 - C21504) * C10231 + (C21505 - C21506) * C10229 +
              C26473 * C10232 + C26474 * C47481) *
                 C47479) *
                C47430 +
            (((C25992 - C25991) * C10231 + (C25994 - C25993) * C10229 +
              (C25995 - C25996) * C10232 + (C25997 - C25998) * C47481) *
                 C15771 +
             (C26475 * C10231 + C26476 * C10229 + (C25999 - C26000) * C10232 +
              (C26001 - C26002) * C47481) *
                 C47479) *
                C47268) *
               C2332 +
           ((((C21504 - C21503) * C10231 + (C21506 - C21505) * C10229 +
              C26475 * C10232 + C26476 * C47481) *
                 C15771 +
             ((C21508 - C21507) * C10231 + (C21510 - C21509) * C10229 +
              (C22010 - C22011) * C10232 + (C22012 - C22013) * C47481) *
                 C47479) *
                C47430 +
            ((C26473 * C10231 + C26474 * C10229 + (C26000 - C25999) * C10232 +
              (C26002 - C26001) * C47481) *
                 C15771 +
             ((C22011 - C22010) * C10231 + (C22013 - C22012) * C10229 +
              (C47108 * C1173 - C21367 * C1158) * C10232 +
              (C47108 * C1185 - C21367 * C1176) * C47481) *
                 C47479) *
                C47268) *
               C47226) *
              C2703)) /
        (p * q * std::sqrt(p + q));
    d2ee[129] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((((C47108 * C124 - C21367 * C117) * C10231 +
                      (C47108 * C138 - C21367 * C127) * C10229 +
                      (C25975 - C25976) * C10232 + (C25977 - C25978) * C47481) *
                         C15771 +
                     ((C21479 - C21480) * C10231 + (C21481 - C21482) * C10229 +
                      C26465 * C10232 + C26466 * C47481) *
                         C47479) *
                        C47181 * C2332 +
                    (((C21480 - C21479) * C10231 + (C21482 - C21481) * C10229 +
                      C26467 * C10232 + C26468 * C47481) *
                         C15771 +
                     ((C21484 - C21483) * C10231 + (C21486 - C21485) * C10229 +
                      C22322 * C10232 + C22323 * C47481) *
                         C47479) *
                        C47181 * C47226) *
                       C47506 +
                   ((((C21367 * C118 - C47108 * C125) * C10231 +
                      (C21367 * C128 - C47108 * C139) * C10229 +
                      (C25983 - C25984) * C10232 + (C25985 - C25986) * C47481) *
                         C15771 +
                     ((C21491 - C21492) * C10231 + (C21493 - C21494) * C10229 +
                      C26469 * C10232 + C26470 * C47481) *
                         C47479) *
                        C47181 * C2332 +
                    (((C21492 - C21491) * C10231 + (C21494 - C21493) * C10229 +
                      C26471 * C10232 + C26472 * C47481) *
                         C15771 +
                     ((C21496 - C21495) * C10231 + (C21498 - C21497) * C10229 +
                      C22601 * C10232 + C22602 * C47481) *
                         C47479) *
                        C47181 * C47226) *
                       C47499 +
                   ((((C47108 * C126 - C21367 * C119) * C10231 +
                      (C47108 * C140 - C21367 * C129) * C10229 +
                      (C25991 - C25992) * C10232 + (C25993 - C25994) * C47481) *
                         C15771 +
                     ((C21503 - C21504) * C10231 + (C21505 - C21506) * C10229 +
                      C26473 * C10232 + C26474 * C47481) *
                         C47479) *
                        C47181 * C2332 +
                    (((C21504 - C21503) * C10231 + (C21506 - C21505) * C10229 +
                      C26475 * C10232 + C26476 * C47481) *
                         C15771 +
                     ((C21508 - C21507) * C10231 + (C21510 - C21509) * C10229 +
                      (C22010 - C22011) * C10232 + (C22012 - C22013) * C47481) *
                         C47479) *
                        C47181 * C47226) *
                       C47486 +
                   ((((C21367 * C120 - C47108 * C130) * C10231 +
                      (C21367 * C131 - C47108 * C141) * C10229 +
                      (C26267 - C26268) * C10232 + (C26269 - C26270) * C47481) *
                         C15771 +
                     ((C21738 - C21739) * C10231 + (C21740 - C21741) * C10229 +
                      (C26133 - C26134) * C10232 + (C26135 - C26136) * C47481) *
                         C47479) *
                        C47181 * C2332 +
                    (((C21739 - C21738) * C10231 + (C21741 - C21740) * C10229 +
                      (C26134 - C26133) * C10232 + (C26136 - C26135) * C47481) *
                         C15771 +
                     ((C21743 - C21742) * C10231 + (C21745 - C21744) * C10229 +
                      (C47108 * C1441 - C21367 * C1440) * C10232 +
                      (C47108 * C1443 - C21367 * C1442) * C47481) *
                         C47479) *
                        C47181 * C47226) *
                       C47465)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((((C47108 * C124 - C21367 * C117) * C10231 +
                      (C47108 * C138 - C21367 * C127) * C10229 +
                      (C25975 - C25976) * C10232 + (C25977 - C25978) * C47481) *
                         C15771 +
                     ((C21479 - C21480) * C10231 + (C21481 - C21482) * C10229 +
                      C26465 * C10232 + C26466 * C47481) *
                         C47479) *
                        C47181 * C47507 +
                    (((C21480 - C21479) * C10231 + (C21482 - C21481) * C10229 +
                      C26467 * C10232 + C26468 * C47481) *
                         C15771 +
                     ((C21484 - C21483) * C10231 + (C21486 - C21485) * C10229 +
                      C22322 * C10232 + C22323 * C47481) *
                         C47479) *
                        C47181 * C47503 +
                    ((C21515 * C10231 + C21516 * C10229 + C26855 * C10232 +
                      C26856 * C47481) *
                         C15771 +
                     ((C21488 - C21487) * C10231 + (C21490 - C21489) * C10229 +
                      C22712 * C10232 + C22713 * C47481) *
                         C47479) *
                        C47181 * C47493 +
                    ((C22190 * C10231 + C22191 * C10229 + C27315 * C10232 +
                      C27316 * C47481) *
                         C15771 +
                     ((C22193 - C22192) * C10231 + (C22195 - C22194) * C10229 +
                      (C22714 - C22715) * C10232 + (C22716 - C22717) * C47481) *
                         C47479) *
                        C47181 * C47471) *
                       C2440 +
                   ((((C21367 * C118 - C47108 * C125) * C10231 +
                      (C21367 * C128 - C47108 * C139) * C10229 +
                      (C25983 - C25984) * C10232 + (C25985 - C25986) * C47481) *
                         C15771 +
                     ((C21491 - C21492) * C10231 + (C21493 - C21494) * C10229 +
                      C26469 * C10232 + C26470 * C47481) *
                         C47479) *
                        C47181 * C47507 +
                    (((C21492 - C21491) * C10231 + (C21494 - C21493) * C10229 +
                      C26471 * C10232 + C26472 * C47481) *
                         C15771 +
                     ((C21496 - C21495) * C10231 + (C21498 - C21497) * C10229 +
                      C22601 * C10232 + C22602 * C47481) *
                         C47479) *
                        C47181 * C47503 +
                    ((C21517 * C10231 + C21518 * C10229 + C27183 * C10232 +
                      C27184 * C47481) *
                         C15771 +
                     ((C21500 - C21499) * C10231 + (C21502 - C21501) * C10229 +
                      (C22603 - C22604) * C10232 + (C22605 - C22606) * C47481) *
                         C47479) *
                        C47181 * C47493 +
                    ((C22446 * C10231 + C22447 * C10229 +
                      (C22604 - C22603) * C10232 + (C22606 - C22605) * C47481) *
                         C15771 +
                     ((C22449 - C22448) * C10231 + (C22451 - C22450) * C10229 +
                      (C47108 * C6310 - C21367 * C6308) * C10232 +
                      (C47108 * C6314 - C21367 * C6312) * C47481) *
                         C47479) *
                        C47181 * C47471) *
                       C47146)) /
                     (p * q * std::sqrt(p + q));
    d2ee[130] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C47108 * C124 - C21367 * C117) * C10231 +
              (C47108 * C138 - C21367 * C127) * C10229 +
              (C25975 - C25976) * C10232 + (C25977 - C25978) * C47481) *
                 C15771 +
             ((C21479 - C21480) * C10231 + (C21481 - C21482) * C10229 +
              C26465 * C10232 + C26466 * C47481) *
                 C47479) *
                C3094 +
            (((C25976 - C25975) * C10231 + (C25978 - C25977) * C10229 +
              (C25979 - C25980) * C10232 + (C25981 - C25982) * C47481) *
                 C15771 +
             (C26467 * C10231 + C26468 * C10229 + C26851 * C10232 +
              C26852 * C47481) *
                 C47479) *
                C47268) *
               C47222 +
           ((((C21480 - C21479) * C10231 + (C21482 - C21481) * C10229 +
              C26467 * C10232 + C26468 * C47481) *
                 C15771 +
             ((C21484 - C21483) * C10231 + (C21486 - C21485) * C10229 +
              C22322 * C10232 + C22323 * C47481) *
                 C47479) *
                C3094 +
            ((C26465 * C10231 + C26466 * C10229 + C26853 * C10232 +
              C26854 * C47481) *
                 C15771 +
             (C26855 * C10231 + C26856 * C10229 + C22342 * C10232 +
              C22343 * C47481) *
                 C47479) *
                C47268) *
               C47229 +
           (((C21515 * C10231 + C21516 * C10229 + C26855 * C10232 +
              C26856 * C47481) *
                 C15771 +
             ((C21488 - C21487) * C10231 + (C21490 - C21489) * C10229 +
              C22712 * C10232 + C22713 * C47481) *
                 C47479) *
                C3094 +
            ((C22322 * C10231 + C22323 * C10229 + C26857 * C10232 +
              C26858 * C47481) *
                 C15771 +
             (C27315 * C10231 + C27316 * C10229 + (C22336 - C22337) * C10232 +
              (C22338 - C22339) * C47481) *
                 C47479) *
                C47268) *
               C2700) *
              C47415 +
          (((((C21367 * C118 - C47108 * C125) * C10231 +
              (C21367 * C128 - C47108 * C139) * C10229 +
              (C25983 - C25984) * C10232 + (C25985 - C25986) * C47481) *
                 C15771 +
             ((C21491 - C21492) * C10231 + (C21493 - C21494) * C10229 +
              C26469 * C10232 + C26470 * C47481) *
                 C47479) *
                C3094 +
            (((C25984 - C25983) * C10231 + (C25986 - C25985) * C10229 +
              (C25987 - C25988) * C10232 + (C25989 - C25990) * C47481) *
                 C15771 +
             (C26471 * C10231 + C26472 * C10229 + C27901 * C10232 +
              C27902 * C47481) *
                 C47479) *
                C47268) *
               C47222 +
           ((((C21492 - C21491) * C10231 + (C21494 - C21493) * C10229 +
              C26471 * C10232 + C26472 * C47481) *
                 C15771 +
             ((C21496 - C21495) * C10231 + (C21498 - C21497) * C10229 +
              C22601 * C10232 + C22602 * C47481) *
                 C47479) *
                C3094 +
            ((C26469 * C10231 + C26470 * C10229 + C27903 * C10232 +
              C27904 * C47481) *
                 C15771 +
             (C27183 * C10231 + C27184 * C10229 + (C23157 - C23158) * C10232 +
              (C23159 - C23160) * C47481) *
                 C47479) *
                C47268) *
               C47229 +
           (((C21517 * C10231 + C21518 * C10229 + C27183 * C10232 +
              C27184 * C47481) *
                 C15771 +
             ((C21500 - C21499) * C10231 + (C21502 - C21501) * C10229 +
              (C22603 - C22604) * C10232 + (C22605 - C22606) * C47481) *
                 C47479) *
                C3094 +
            ((C22601 * C10231 + C22602 * C10229 + (C23158 - C23157) * C10232 +
              (C23160 - C23159) * C47481) *
                 C15771 +
             ((C22604 - C22603) * C10231 + (C22606 - C22605) * C10229 +
              (C47108 * C5808 - C21367 * C5806) * C10232 +
              (C47108 * C5812 - C21367 * C5810) * C47481) *
                 C47479) *
                C47268) *
               C2700) *
              C47146)) /
        (p * q * std::sqrt(p + q));
    d2ee[131] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((((C47108 * C124 - C21367 * C117) * C10231 +
                      (C47108 * C138 - C21367 * C127) * C10229 +
                      (C25975 - C25976) * C10232 + (C25977 - C25978) * C47481) *
                         C15771 +
                     ((C21479 - C21480) * C10231 + (C21481 - C21482) * C10229 +
                      C26465 * C10232 + C26466 * C47481) *
                         C47479) *
                        C47264 +
                    (((C25976 - C25975) * C10231 + (C25978 - C25977) * C10229 +
                      (C25979 - C25980) * C10232 + (C25981 - C25982) * C47481) *
                         C15771 +
                     (C26467 * C10231 + C26468 * C10229 + C26851 * C10232 +
                      C26852 * C47481) *
                         C47479) *
                        C47271 +
                    (((C25980 - C25979) * C10231 + (C25982 - C25981) * C10229 +
                      (C27695 - C27696) * C10232 + (C27697 - C27698) * C47481) *
                         C15771 +
                     (C26853 * C10231 + C26854 * C10229 + C28173 * C10232 +
                      C28174 * C47481) *
                         C47479) *
                        C3602) *
                       C47222 +
                   ((((C21480 - C21479) * C10231 + (C21482 - C21481) * C10229 +
                      C26467 * C10232 + C26468 * C47481) *
                         C15771 +
                     ((C21484 - C21483) * C10231 + (C21486 - C21485) * C10229 +
                      C22322 * C10232 + C22323 * C47481) *
                         C47479) *
                        C47264 +
                    ((C26465 * C10231 + C26466 * C10229 + C26853 * C10232 +
                      C26854 * C47481) *
                         C15771 +
                     (C26855 * C10231 + C26856 * C10229 + C22342 * C10232 +
                      C22343 * C47481) *
                         C47479) *
                        C47271 +
                    ((C26851 * C10231 + C26852 * C10229 + C28175 * C10232 +
                      C28176 * C47481) *
                         C15771 +
                     (C26857 * C10231 + C26858 * C10229 +
                      (C23365 - C23366) * C10232 + (C23367 - C23368) * C47481) *
                         C47479) *
                        C3602) *
                       C47229 +
                   (((C21515 * C10231 + C21516 * C10229 + C26855 * C10232 +
                      C26856 * C47481) *
                         C15771 +
                     ((C21488 - C21487) * C10231 + (C21490 - C21489) * C10229 +
                      C22712 * C10232 + C22713 * C47481) *
                         C47479) *
                        C47264 +
                    ((C22322 * C10231 + C22323 * C10229 + C26857 * C10232 +
                      C26858 * C47481) *
                         C15771 +
                     (C27315 * C10231 + C27316 * C10229 +
                      (C22336 - C22337) * C10232 + (C22338 - C22339) * C47481) *
                         C47479) *
                        C47271 +
                    ((C22342 * C10231 + C22343 * C10229 +
                      (C23366 - C23365) * C10232 + (C23368 - C23367) * C47481) *
                         C15771 +
                     ((C22337 - C22336) * C10231 + (C22339 - C22338) * C10229 +
                      (C47108 * C23357 - C21367 * C23356) * C10232 +
                      (C47108 * C23359 - C21367 * C23358) * C47481) *
                         C47479) *
                        C3602) *
                       C2700) *
                  C47135) /
                 (p * q * std::sqrt(p + q));
    d2ee[132] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C47108 * C124 - C21367 * C117) * C10231 +
             (C47108 * C138 - C21367 * C127) * C10229 +
             (C25975 - C25976) * C10232 + (C25977 - C25978) * C47481) *
                C15771 +
            ((C21479 - C21480) * C10231 + (C21481 - C21482) * C10229 +
             C26465 * C10232 + C26466 * C47481) *
                C47479) *
               C3094 +
           (((C25976 - C25975) * C10231 + (C25978 - C25977) * C10229 +
             (C25979 - C25980) * C10232 + (C25981 - C25982) * C47481) *
                C15771 +
            (C26467 * C10231 + C26468 * C10229 + C26851 * C10232 +
             C26852 * C47481) *
                C47479) *
               C47268) *
              C47507 +
          ((((C21480 - C21479) * C10231 + (C21482 - C21481) * C10229 +
             C26467 * C10232 + C26468 * C47481) *
                C15771 +
            ((C21484 - C21483) * C10231 + (C21486 - C21485) * C10229 +
             C22322 * C10232 + C22323 * C47481) *
                C47479) *
               C3094 +
           ((C26465 * C10231 + C26466 * C10229 + C26853 * C10232 +
             C26854 * C47481) *
                C15771 +
            (C26855 * C10231 + C26856 * C10229 + C22342 * C10232 +
             C22343 * C47481) *
                C47479) *
               C47268) *
              C47503 +
          (((C21515 * C10231 + C21516 * C10229 + C26855 * C10232 +
             C26856 * C47481) *
                C15771 +
            ((C21488 - C21487) * C10231 + (C21490 - C21489) * C10229 +
             C22712 * C10232 + C22713 * C47481) *
                C47479) *
               C3094 +
           ((C22322 * C10231 + C22323 * C10229 + C26857 * C10232 +
             C26858 * C47481) *
                C15771 +
            (C27315 * C10231 + C27316 * C10229 + (C22336 - C22337) * C10232 +
             (C22338 - C22339) * C47481) *
                C47479) *
               C47268) *
              C47493 +
          (((C22190 * C10231 + C22191 * C10229 + C27315 * C10232 +
             C27316 * C47481) *
                C15771 +
            ((C22193 - C22192) * C10231 + (C22195 - C22194) * C10229 +
             (C22714 - C22715) * C10232 + (C22716 - C22717) * C47481) *
                C47479) *
               C3094 +
           ((C22712 * C10231 + C22713 * C10229 + (C22337 - C22336) * C10232 +
             (C22339 - C22338) * C47481) *
                C15771 +
            ((C22715 - C22714) * C10231 + (C22717 - C22716) * C10229 +
             (C47108 * C22318 - C21367 * C22317) * C10232 +
             (C47108 * C22320 - C21367 * C22319) * C47481) *
                C47479) *
               C47268) *
              C47471) *
         C47135) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C47108 * C124 - C21367 * C117) * C10231 +
              (C47108 * C138 - C21367 * C127) * C10229 +
              (C25975 - C25976) * C10232 + (C25977 - C25978) * C47481) *
                 C15771 +
             ((C21479 - C21480) * C10231 + (C21481 - C21482) * C10229 +
              C26465 * C10232 + C26466 * C47481) *
                 C47479) *
                C3094 +
            (((C25976 - C25975) * C10231 + (C25978 - C25977) * C10229 +
              (C25979 - C25980) * C10232 + (C25981 - C25982) * C47481) *
                 C15771 +
             (C26467 * C10231 + C26468 * C10229 + C26851 * C10232 +
              C26852 * C47481) *
                 C47479) *
                C47268) *
               C2332 +
           ((((C21480 - C21479) * C10231 + (C21482 - C21481) * C10229 +
              C26467 * C10232 + C26468 * C47481) *
                 C15771 +
             ((C21484 - C21483) * C10231 + (C21486 - C21485) * C10229 +
              C22322 * C10232 + C22323 * C47481) *
                 C47479) *
                C3094 +
            ((C26465 * C10231 + C26466 * C10229 + C26853 * C10232 +
              C26854 * C47481) *
                 C15771 +
             (C26855 * C10231 + C26856 * C10229 + C22342 * C10232 +
              C22343 * C47481) *
                 C47479) *
                C47268) *
               C47226) *
              C47497 +
          (((((C21367 * C118 - C47108 * C125) * C10231 +
              (C21367 * C128 - C47108 * C139) * C10229 +
              (C25983 - C25984) * C10232 + (C25985 - C25986) * C47481) *
                 C15771 +
             ((C21491 - C21492) * C10231 + (C21493 - C21494) * C10229 +
              C26469 * C10232 + C26470 * C47481) *
                 C47479) *
                C3094 +
            (((C25984 - C25983) * C10231 + (C25986 - C25985) * C10229 +
              (C25987 - C25988) * C10232 + (C25989 - C25990) * C47481) *
                 C15771 +
             (C26471 * C10231 + C26472 * C10229 + C27901 * C10232 +
              C27902 * C47481) *
                 C47479) *
                C47268) *
               C2332 +
           ((((C21492 - C21491) * C10231 + (C21494 - C21493) * C10229 +
              C26471 * C10232 + C26472 * C47481) *
                 C15771 +
             ((C21496 - C21495) * C10231 + (C21498 - C21497) * C10229 +
              C22601 * C10232 + C22602 * C47481) *
                 C47479) *
                C3094 +
            ((C26469 * C10231 + C26470 * C10229 + C27903 * C10232 +
              C27904 * C47481) *
                 C15771 +
             (C27183 * C10231 + C27184 * C10229 + (C23157 - C23158) * C10232 +
              (C23159 - C23160) * C47481) *
                 C47479) *
                C47268) *
               C47226) *
              C47484 +
          (((((C47108 * C126 - C21367 * C119) * C10231 +
              (C47108 * C140 - C21367 * C129) * C10229 +
              (C25991 - C25992) * C10232 + (C25993 - C25994) * C47481) *
                 C15771 +
             ((C21503 - C21504) * C10231 + (C21505 - C21506) * C10229 +
              C26473 * C10232 + C26474 * C47481) *
                 C47479) *
                C3094 +
            (((C25992 - C25991) * C10231 + (C25994 - C25993) * C10229 +
              (C25995 - C25996) * C10232 + (C25997 - C25998) * C47481) *
                 C15771 +
             (C26475 * C10231 + C26476 * C10229 + (C25999 - C26000) * C10232 +
              (C26001 - C26002) * C47481) *
                 C47479) *
                C47268) *
               C2332 +
           ((((C21504 - C21503) * C10231 + (C21506 - C21505) * C10229 +
              C26475 * C10232 + C26476 * C47481) *
                 C15771 +
             ((C21508 - C21507) * C10231 + (C21510 - C21509) * C10229 +
              (C22010 - C22011) * C10232 + (C22012 - C22013) * C47481) *
                 C47479) *
                C3094 +
            ((C26473 * C10231 + C26474 * C10229 + (C26000 - C25999) * C10232 +
              (C26002 - C26001) * C47481) *
                 C15771 +
             ((C22011 - C22010) * C10231 + (C22013 - C22012) * C10229 +
              (C47108 * C1173 - C21367 * C1158) * C10232 +
              (C47108 * C1185 - C21367 * C1176) * C47481) *
                 C47479) *
                C47268) *
               C47226) *
              C47455)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C47108 * C124 - C21367 * C117) * C10231 +
             (C47108 * C138 - C21367 * C127) * C10229 +
             (C25975 - C25976) * C10232 + (C25977 - C25978) * C47481) *
                C15771 +
            ((C21479 - C21480) * C10231 + (C21481 - C21482) * C10229 +
             C26465 * C10232 + C26466 * C47481) *
                C47479) *
               C47508 +
           (((C25976 - C25975) * C10231 + (C25978 - C25977) * C10229 +
             (C25979 - C25980) * C10232 + (C25981 - C25982) * C47481) *
                C15771 +
            (C26467 * C10231 + C26468 * C10229 + C26851 * C10232 +
             C26852 * C47481) *
                C47479) *
               C47505 +
           (((C25980 - C25979) * C10231 + (C25982 - C25981) * C10229 +
             (C27695 - C27696) * C10232 + (C27697 - C27698) * C47481) *
                C15771 +
            (C26853 * C10231 + C26854 * C10229 + C28173 * C10232 +
             C28174 * C47481) *
                C47479) *
               C47496 +
           (((C27696 - C27695) * C10231 + (C27698 - C27697) * C10229 +
             (C27699 - C27700) * C10232 + (C27701 - C27702) * C47481) *
                C15771 +
            (C28175 * C10231 + C28176 * C10229 + (C27703 - C27704) * C10232 +
             (C27705 - C27706) * C47481) *
                C47479) *
               C47477) *
              C2332 +
          ((((C21480 - C21479) * C10231 + (C21482 - C21481) * C10229 +
             C26467 * C10232 + C26468 * C47481) *
                C15771 +
            ((C21484 - C21483) * C10231 + (C21486 - C21485) * C10229 +
             C22322 * C10232 + C22323 * C47481) *
                C47479) *
               C47508 +
           ((C26465 * C10231 + C26466 * C10229 + C26853 * C10232 +
             C26854 * C47481) *
                C15771 +
            (C26855 * C10231 + C26856 * C10229 + C22342 * C10232 +
             C22343 * C47481) *
                C47479) *
               C47505 +
           ((C26851 * C10231 + C26852 * C10229 + C28175 * C10232 +
             C28176 * C47481) *
                C15771 +
            (C26857 * C10231 + C26858 * C10229 + (C23365 - C23366) * C10232 +
             (C23367 - C23368) * C47481) *
                C47479) *
               C47496 +
           ((C28173 * C10231 + C28174 * C10229 + (C27704 - C27703) * C10232 +
             (C27706 - C27705) * C47481) *
                C15771 +
            ((C23366 - C23365) * C10231 + (C23368 - C23367) * C10229 +
             (C47108 * C23003 - C21367 * C23002) * C10232 +
             (C47108 * C23005 - C21367 * C23004) * C47481) *
                C47479) *
               C47477) *
              C47226) *
         C47135) /
            (p * q * std::sqrt(p + q));
    d2ee[133] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C47108 * C124 - C21367 * C117) * C10231 +
              (C47108 * C138 - C21367 * C127) * C10229 +
              (C25975 - C25976) * C10232 + (C25977 - C25978) * C47481) *
                 C15771 +
             ((C21479 - C21480) * C10231 + (C21481 - C21482) * C10229 +
              C26465 * C10232 + C26466 * C47481) *
                 C47479) *
                C47264 +
            (((C25976 - C25975) * C10231 + (C25978 - C25977) * C10229 +
              (C25979 - C25980) * C10232 + (C25981 - C25982) * C47481) *
                 C15771 +
             (C26467 * C10231 + C26468 * C10229 + C26851 * C10232 +
              C26852 * C47481) *
                 C47479) *
                C47271 +
            (((C25980 - C25979) * C10231 + (C25982 - C25981) * C10229 +
              (C27695 - C27696) * C10232 + (C27697 - C27698) * C47481) *
                 C15771 +
             (C26853 * C10231 + C26854 * C10229 + C28173 * C10232 +
              C28174 * C47481) *
                 C47479) *
                C3602) *
               C2332 +
           ((((C21480 - C21479) * C10231 + (C21482 - C21481) * C10229 +
              C26467 * C10232 + C26468 * C47481) *
                 C15771 +
             ((C21484 - C21483) * C10231 + (C21486 - C21485) * C10229 +
              C22322 * C10232 + C22323 * C47481) *
                 C47479) *
                C47264 +
            ((C26465 * C10231 + C26466 * C10229 + C26853 * C10232 +
              C26854 * C47481) *
                 C15771 +
             (C26855 * C10231 + C26856 * C10229 + C22342 * C10232 +
              C22343 * C47481) *
                 C47479) *
                C47271 +
            ((C26851 * C10231 + C26852 * C10229 + C28175 * C10232 +
              C28176 * C47481) *
                 C15771 +
             (C26857 * C10231 + C26858 * C10229 + (C23365 - C23366) * C10232 +
              (C23367 - C23368) * C47481) *
                 C47479) *
                C3602) *
               C47226) *
              C47415 +
          (((((C21367 * C118 - C47108 * C125) * C10231 +
              (C21367 * C128 - C47108 * C139) * C10229 +
              (C25983 - C25984) * C10232 + (C25985 - C25986) * C47481) *
                 C15771 +
             ((C21491 - C21492) * C10231 + (C21493 - C21494) * C10229 +
              C26469 * C10232 + C26470 * C47481) *
                 C47479) *
                C47264 +
            (((C25984 - C25983) * C10231 + (C25986 - C25985) * C10229 +
              (C25987 - C25988) * C10232 + (C25989 - C25990) * C47481) *
                 C15771 +
             (C26471 * C10231 + C26472 * C10229 + C27901 * C10232 +
              C27902 * C47481) *
                 C47479) *
                C47271 +
            (((C25988 - C25987) * C10231 + (C25990 - C25989) * C10229 +
              (C28039 - C28040) * C10232 + (C28041 - C28042) * C47481) *
                 C15771 +
             (C27903 * C10231 + C27904 * C10229 + (C27905 - C27906) * C10232 +
              (C27907 - C27908) * C47481) *
                 C47479) *
                C3602) *
               C2332 +
           ((((C21492 - C21491) * C10231 + (C21494 - C21493) * C10229 +
              C26471 * C10232 + C26472 * C47481) *
                 C15771 +
             ((C21496 - C21495) * C10231 + (C21498 - C21497) * C10229 +
              C22601 * C10232 + C22602 * C47481) *
                 C47479) *
                C47264 +
            ((C26469 * C10231 + C26470 * C10229 + C27903 * C10232 +
              C27904 * C47481) *
                 C15771 +
             (C27183 * C10231 + C27184 * C10229 + (C23157 - C23158) * C10232 +
              (C23159 - C23160) * C47481) *
                 C47479) *
                C47271 +
            ((C27901 * C10231 + C27902 * C10229 + (C27906 - C27905) * C10232 +
              (C27908 - C27907) * C47481) *
                 C15771 +
             ((C23158 - C23157) * C10231 + (C23160 - C23159) * C10229 +
              (C47108 * C7170 - C21367 * C7168) * C10232 +
              (C47108 * C7174 - C21367 * C7172) * C47481) *
                 C47479) *
                C3602) *
               C47226) *
              C47146)) /
        (p * q * std::sqrt(p + q));
    d2ee[134] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C47108 * C124 - C21367 * C117) * C10231 +
              (C47108 * C138 - C21367 * C127) * C10229 +
              (C25975 - C25976) * C10232 + (C25977 - C25978) * C47481) *
                 C15771 +
             ((C21479 - C21480) * C10231 + (C21481 - C21482) * C10229 +
              C26465 * C10232 + C26466 * C47481) *
                 C47479) *
                C3094 +
            (((C25976 - C25975) * C10231 + (C25978 - C25977) * C10229 +
              (C25979 - C25980) * C10232 + (C25981 - C25982) * C47481) *
                 C15771 +
             (C26467 * C10231 + C26468 * C10229 + C26851 * C10232 +
              C26852 * C47481) *
                 C47479) *
                C47268) *
               C2332 +
           ((((C21480 - C21479) * C10231 + (C21482 - C21481) * C10229 +
              C26467 * C10232 + C26468 * C47481) *
                 C15771 +
             ((C21484 - C21483) * C10231 + (C21486 - C21485) * C10229 +
              C22322 * C10232 + C22323 * C47481) *
                 C47479) *
                C3094 +
            ((C26465 * C10231 + C26466 * C10229 + C26853 * C10232 +
              C26854 * C47481) *
                 C15771 +
             (C26855 * C10231 + C26856 * C10229 + C22342 * C10232 +
              C22343 * C47481) *
                 C47479) *
                C47268) *
               C47226) *
              C47497 +
          (((((C21367 * C118 - C47108 * C125) * C10231 +
              (C21367 * C128 - C47108 * C139) * C10229 +
              (C25983 - C25984) * C10232 + (C25985 - C25986) * C47481) *
                 C15771 +
             ((C21491 - C21492) * C10231 + (C21493 - C21494) * C10229 +
              C26469 * C10232 + C26470 * C47481) *
                 C47479) *
                C3094 +
            (((C25984 - C25983) * C10231 + (C25986 - C25985) * C10229 +
              (C25987 - C25988) * C10232 + (C25989 - C25990) * C47481) *
                 C15771 +
             (C26471 * C10231 + C26472 * C10229 + C27901 * C10232 +
              C27902 * C47481) *
                 C47479) *
                C47268) *
               C2332 +
           ((((C21492 - C21491) * C10231 + (C21494 - C21493) * C10229 +
              C26471 * C10232 + C26472 * C47481) *
                 C15771 +
             ((C21496 - C21495) * C10231 + (C21498 - C21497) * C10229 +
              C22601 * C10232 + C22602 * C47481) *
                 C47479) *
                C3094 +
            ((C26469 * C10231 + C26470 * C10229 + C27903 * C10232 +
              C27904 * C47481) *
                 C15771 +
             (C27183 * C10231 + C27184 * C10229 + (C23157 - C23158) * C10232 +
              (C23159 - C23160) * C47481) *
                 C47479) *
                C47268) *
               C47226) *
              C47484 +
          (((((C47108 * C126 - C21367 * C119) * C10231 +
              (C47108 * C140 - C21367 * C129) * C10229 +
              (C25991 - C25992) * C10232 + (C25993 - C25994) * C47481) *
                 C15771 +
             ((C21503 - C21504) * C10231 + (C21505 - C21506) * C10229 +
              C26473 * C10232 + C26474 * C47481) *
                 C47479) *
                C3094 +
            (((C25992 - C25991) * C10231 + (C25994 - C25993) * C10229 +
              (C25995 - C25996) * C10232 + (C25997 - C25998) * C47481) *
                 C15771 +
             (C26475 * C10231 + C26476 * C10229 + (C25999 - C26000) * C10232 +
              (C26001 - C26002) * C47481) *
                 C47479) *
                C47268) *
               C2332 +
           ((((C21504 - C21503) * C10231 + (C21506 - C21505) * C10229 +
              C26475 * C10232 + C26476 * C47481) *
                 C15771 +
             ((C21508 - C21507) * C10231 + (C21510 - C21509) * C10229 +
              (C22010 - C22011) * C10232 + (C22012 - C22013) * C47481) *
                 C47479) *
                C3094 +
            ((C26473 * C10231 + C26474 * C10229 + (C26000 - C25999) * C10232 +
              (C26002 - C26001) * C47481) *
                 C15771 +
             ((C22011 - C22010) * C10231 + (C22013 - C22012) * C10229 +
              (C47108 * C1173 - C21367 * C1158) * C10232 +
              (C47108 * C1185 - C21367 * C1176) * C47481) *
                 C47479) *
                C47268) *
               C47226) *
              C47455)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C47108 * C124 - C21367 * C117) * C10231 +
             (C47108 * C138 - C21367 * C127) * C10229 +
             (C25975 - C25976) * C10232 + (C25977 - C25978) * C47481) *
                C15771 +
            ((C21479 - C21480) * C10231 + (C21481 - C21482) * C10229 +
             C26465 * C10232 + C26466 * C47481) *
                C47479) *
               C3094 +
           (((C25976 - C25975) * C10231 + (C25978 - C25977) * C10229 +
             (C25979 - C25980) * C10232 + (C25981 - C25982) * C47481) *
                C15771 +
            (C26467 * C10231 + C26468 * C10229 + C26851 * C10232 +
             C26852 * C47481) *
                C47479) *
               C47268) *
              C47507 +
          ((((C21480 - C21479) * C10231 + (C21482 - C21481) * C10229 +
             C26467 * C10232 + C26468 * C47481) *
                C15771 +
            ((C21484 - C21483) * C10231 + (C21486 - C21485) * C10229 +
             C22322 * C10232 + C22323 * C47481) *
                C47479) *
               C3094 +
           ((C26465 * C10231 + C26466 * C10229 + C26853 * C10232 +
             C26854 * C47481) *
                C15771 +
            (C26855 * C10231 + C26856 * C10229 + C22342 * C10232 +
             C22343 * C47481) *
                C47479) *
               C47268) *
              C47503 +
          (((C21515 * C10231 + C21516 * C10229 + C26855 * C10232 +
             C26856 * C47481) *
                C15771 +
            ((C21488 - C21487) * C10231 + (C21490 - C21489) * C10229 +
             C22712 * C10232 + C22713 * C47481) *
                C47479) *
               C3094 +
           ((C22322 * C10231 + C22323 * C10229 + C26857 * C10232 +
             C26858 * C47481) *
                C15771 +
            (C27315 * C10231 + C27316 * C10229 + (C22336 - C22337) * C10232 +
             (C22338 - C22339) * C47481) *
                C47479) *
               C47268) *
              C47493 +
          (((C22190 * C10231 + C22191 * C10229 + C27315 * C10232 +
             C27316 * C47481) *
                C15771 +
            ((C22193 - C22192) * C10231 + (C22195 - C22194) * C10229 +
             (C22714 - C22715) * C10232 + (C22716 - C22717) * C47481) *
                C47479) *
               C3094 +
           ((C22712 * C10231 + C22713 * C10229 + (C22337 - C22336) * C10232 +
             (C22339 - C22338) * C47481) *
                C15771 +
            ((C22715 - C22714) * C10231 + (C22717 - C22716) * C10229 +
             (C47108 * C22318 - C21367 * C22317) * C10232 +
             (C47108 * C22320 - C21367 * C22319) * C47481) *
                C47479) *
               C47268) *
              C47471) *
         C47135) /
            (p * q * std::sqrt(p + q));
    d2ee[135] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C47108 * C124 - C21367 * C117) * C10231 +
             (C47108 * C138 - C21367 * C127) * C10229 +
             (C25975 - C25976) * C10232 + (C25977 - C25978) * C47481) *
                C15771 +
            ((C21479 - C21480) * C10231 + (C21481 - C21482) * C10229 +
             C26465 * C10232 + C26466 * C47481) *
                C47479) *
               C47181 * C1284 +
           (((C21480 - C21479) * C10231 + (C21482 - C21481) * C10229 +
             C26467 * C10232 + C26468 * C47481) *
                C15771 +
            ((C21484 - C21483) * C10231 + (C21486 - C21485) * C10229 +
             C22322 * C10232 + C22323 * C47481) *
                C47479) *
               C47181 * C1285 +
           ((C21515 * C10231 + C21516 * C10229 + C26855 * C10232 +
             C26856 * C47481) *
                C15771 +
            ((C21488 - C21487) * C10231 + (C21490 - C21489) * C10229 +
             C22712 * C10232 + C22713 * C47481) *
                C47479) *
               C47181 * C1286 +
           ((C22190 * C10231 + C22191 * C10229 + (C22333 - C22332) * C10232 +
             (C22335 - C22334) * C47481) *
                C15771 +
            ((C22193 - C22192) * C10231 + (C22195 - C22194) * C10229 +
             (C22714 - C22715) * C10232 + (C22716 - C22717) * C47481) *
                C47479) *
               C47181 * C47471) *
              C47415 +
          ((((C21367 * C118 - C47108 * C125) * C10231 +
             (C21367 * C128 - C47108 * C139) * C10229 +
             (C25983 - C25984) * C10232 + (C25985 - C25986) * C47481) *
                C15771 +
            ((C21491 - C21492) * C10231 + (C21493 - C21494) * C10229 +
             C26469 * C10232 + C26470 * C47481) *
                C47479) *
               C47181 * C1284 +
           (((C21492 - C21491) * C10231 + (C21494 - C21493) * C10229 +
             C26471 * C10232 + C26472 * C47481) *
                C15771 +
            ((C21496 - C21495) * C10231 + (C21498 - C21497) * C10229 +
             C22601 * C10232 + C22602 * C47481) *
                C47479) *
               C47181 * C1285 +
           ((C21517 * C10231 + C21518 * C10229 + (C22003 - C22002) * C10232 +
             (C22005 - C22004) * C47481) *
                C15771 +
            ((C21500 - C21499) * C10231 + (C21502 - C21501) * C10229 +
             (C22603 - C22604) * C10232 + (C22605 - C22606) * C47481) *
                C47479) *
               C47181 * C1286 +
           ((C22446 * C10231 + C22447 * C10229 + (C22604 - C22603) * C10232 +
             (C22606 - C22605) * C47481) *
                C15771 +
            ((C22449 - C22448) * C10231 + (C22451 - C22450) * C10229 +
             (C47108 * C6310 - C21367 * C6308) * C10232 +
             (C47108 * C6314 - C21367 * C6312) * C47481) *
                C47479) *
               C47181 * C47471) *
              C47146)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C47108 * C124 - C21367 * C117) * C10231 +
             (C47108 * C138 - C21367 * C127) * C10229 +
             (C25975 - C25976) * C10232 + (C25977 - C25978) * C47481) *
                C15771 +
            ((C21479 - C21480) * C10231 + (C21481 - C21482) * C10229 +
             (C21991 - C21990) * C10232 + (C21993 - C21992) * C47481) *
                C47479) *
               C47181 * C47429 +
           (((C21480 - C21479) * C10231 + (C21482 - C21481) * C10229 +
             (C21990 - C21991) * C10232 + (C21992 - C21993) * C47481) *
                C15771 +
            ((C21484 - C21483) * C10231 + (C21486 - C21485) * C10229 +
             C22322 * C10232 + C22323 * C47481) *
                C47479) *
               C47181 * C47226) *
              C554 +
          ((((C21367 * C118 - C47108 * C125) * C10231 +
             (C21367 * C128 - C47108 * C139) * C10229 +
             (C25983 - C25984) * C10232 + (C25985 - C25986) * C47481) *
                C15771 +
            ((C21491 - C21492) * C10231 + (C21493 - C21494) * C10229 +
             (C21999 - C21998) * C10232 + (C22001 - C22000) * C47481) *
                C47479) *
               C47181 * C47429 +
           (((C21492 - C21491) * C10231 + (C21494 - C21493) * C10229 +
             (C21998 - C21999) * C10232 + (C22000 - C22001) * C47481) *
                C15771 +
            ((C21496 - C21495) * C10231 + (C21498 - C21497) * C10229 +
             C22601 * C10232 + C22602 * C47481) *
                C47479) *
               C47181 * C47226) *
              C555 +
          ((((C47108 * C126 - C21367 * C119) * C10231 +
             (C47108 * C140 - C21367 * C129) * C10229 +
             (C25991 - C25992) * C10232 + (C25993 - C25994) * C47481) *
                C15771 +
            ((C21503 - C21504) * C10231 + (C21505 - C21506) * C10229 +
             (C22007 - C22006) * C10232 + (C22009 - C22008) * C47481) *
                C47479) *
               C47181 * C47429 +
           (((C21504 - C21503) * C10231 + (C21506 - C21505) * C10229 +
             (C22006 - C22007) * C10232 + (C22008 - C22009) * C47481) *
                C15771 +
            ((C21508 - C21507) * C10231 + (C21510 - C21509) * C10229 +
             (C22010 - C22011) * C10232 + (C22012 - C22013) * C47481) *
                C47479) *
               C47181 * C47226) *
              C556 +
          ((((C21367 * C120 - C47108 * C130) * C10231 +
             (C21367 * C131 - C47108 * C141) * C10229 +
             (C21367 * C420 - C47108 * C436) * C10232 +
             (C21367 * C437 - C47108 * C450) * C47481) *
                C15771 +
            ((C21738 - C21739) * C10231 + (C21740 - C21741) * C10229 +
             (C26133 - C26134) * C10232 + (C26135 - C26136) * C47481) *
                C47479) *
               C47181 * C47429 +
           (((C21739 - C21738) * C10231 + (C21741 - C21740) * C10229 +
             (C26134 - C26133) * C10232 + (C26136 - C26135) * C47481) *
                C15771 +
            ((C21743 - C21742) * C10231 + (C21745 - C21744) * C10229 +
             (C47108 * C1441 - C21367 * C1440) * C10232 +
             (C47108 * C1443 - C21367 * C1442) * C47481) *
                C47479) *
               C47181 * C47226) *
              C47465)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C47108 * C124 - C21367 * C117) * C10231 +
              (C47108 * C138 - C21367 * C127) * C10229 +
              (C25975 - C25976) * C10232 + (C25977 - C25978) * C47481) *
                 C15771 +
             ((C21479 - C21480) * C10231 + (C21481 - C21482) * C10229 +
              C26465 * C10232 + C26466 * C47481) *
                 C47479) *
                C1664 +
            (((C25976 - C25975) * C10231 + (C25978 - C25977) * C10229 +
              (C25979 - C25980) * C10232 + (C25981 - C25982) * C47481) *
                 C15771 +
             (C26467 * C10231 + C26468 * C10229 + C26851 * C10232 +
              C26852 * C47481) *
                 C47479) *
                C1665 +
            (((C25980 - C25979) * C10231 + (C25982 - C25981) * C10229 +
              (C27695 - C27696) * C10232 + (C27697 - C27698) * C47481) *
                 C15771 +
             (C26853 * C10231 + C26854 * C10229 + (C23362 - C23361) * C10232 +
              (C23364 - C23363) * C47481) *
                 C47479) *
                C47464) *
               C47429 +
           ((((C21480 - C21479) * C10231 + (C21482 - C21481) * C10229 +
              C26467 * C10232 + C26468 * C47481) *
                 C15771 +
             ((C21484 - C21483) * C10231 + (C21486 - C21485) * C10229 +
              C22322 * C10232 + C22323 * C47481) *
                 C47479) *
                C1664 +
            ((C26465 * C10231 + C26466 * C10229 + C26853 * C10232 +
              C26854 * C47481) *
                 C15771 +
             (C26855 * C10231 + C26856 * C10229 + C22342 * C10232 +
              C22343 * C47481) *
                 C47479) *
                C1665 +
            ((C26851 * C10231 + C26852 * C10229 + (C23361 - C23362) * C10232 +
              (C23363 - C23364) * C47481) *
                 C15771 +
             (C26857 * C10231 + C26858 * C10229 + (C23365 - C23366) * C10232 +
              (C23367 - C23368) * C47481) *
                 C47479) *
                C47464) *
               C47226) *
              C47415 +
          (((((C21367 * C118 - C47108 * C125) * C10231 +
              (C21367 * C128 - C47108 * C139) * C10229 +
              (C25983 - C25984) * C10232 + (C25985 - C25986) * C47481) *
                 C15771 +
             ((C21491 - C21492) * C10231 + (C21493 - C21494) * C10229 +
              C26469 * C10232 + C26470 * C47481) *
                 C47479) *
                C1664 +
            (((C25984 - C25983) * C10231 + (C25986 - C25985) * C10229 +
              (C25987 - C25988) * C10232 + (C25989 - C25990) * C47481) *
                 C15771 +
             (C26471 * C10231 + C26472 * C10229 + C27901 * C10232 +
              C27902 * C47481) *
                 C47479) *
                C1665 +
            (((C25988 - C25987) * C10231 + (C25990 - C25989) * C10229 +
              (C21367 * C1845 - C47108 * C1851) * C10232 +
              (C21367 * C1854 - C47108 * C1863) * C47481) *
                 C15771 +
             (C27903 * C10231 + C27904 * C10229 + (C27905 - C27906) * C10232 +
              (C27907 - C27908) * C47481) *
                 C47479) *
                C47464) *
               C47429 +
           ((((C21492 - C21491) * C10231 + (C21494 - C21493) * C10229 +
              C26471 * C10232 + C26472 * C47481) *
                 C15771 +
             ((C21496 - C21495) * C10231 + (C21498 - C21497) * C10229 +
              C22601 * C10232 + C22602 * C47481) *
                 C47479) *
                C1664 +
            ((C26469 * C10231 + C26470 * C10229 + C27903 * C10232 +
              C27904 * C47481) *
                 C15771 +
             (C27183 * C10231 + C27184 * C10229 + (C23157 - C23158) * C10232 +
              (C23159 - C23160) * C47481) *
                 C47479) *
                C1665 +
            ((C27901 * C10231 + C27902 * C10229 + (C27906 - C27905) * C10232 +
              (C27908 - C27907) * C47481) *
                 C15771 +
             ((C23158 - C23157) * C10231 + (C23160 - C23159) * C10229 +
              (C47108 * C7170 - C21367 * C7168) * C10232 +
              (C47108 * C7174 - C21367 * C7172) * C47481) *
                 C47479) *
                C47464) *
               C47226) *
              C47146)) /
            (p * q * std::sqrt(p + q));
    d2ee[136] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C47108 * C124 - C21367 * C117) * C10231 +
             (C47108 * C138 - C21367 * C127) * C10229 +
             (C25975 - C25976) * C10232 + (C25977 - C25978) * C47481) *
                C15771 +
            ((C21479 - C21480) * C10231 + (C21481 - C21482) * C10229 +
             C26465 * C10232 + C26466 * C47481) *
                C47479) *
               C47430 +
           (((C25976 - C25975) * C10231 + (C25978 - C25977) * C10229 +
             (C25979 - C25980) * C10232 + (C25981 - C25982) * C47481) *
                C15771 +
            (C26467 * C10231 + C26468 * C10229 + C26851 * C10232 +
             C26852 * C47481) *
                C47479) *
               C47268) *
              C1284 +
          ((((C21480 - C21479) * C10231 + (C21482 - C21481) * C10229 +
             C26467 * C10232 + C26468 * C47481) *
                C15771 +
            ((C21484 - C21483) * C10231 + (C21486 - C21485) * C10229 +
             C22322 * C10232 + C22323 * C47481) *
                C47479) *
               C47430 +
           ((C26465 * C10231 + C26466 * C10229 + C26853 * C10232 +
             C26854 * C47481) *
                C15771 +
            (C26855 * C10231 + C26856 * C10229 + C22342 * C10232 +
             C22343 * C47481) *
                C47479) *
               C47268) *
              C1285 +
          (((C21515 * C10231 + C21516 * C10229 + C26855 * C10232 +
             C26856 * C47481) *
                C15771 +
            ((C21488 - C21487) * C10231 + (C21490 - C21489) * C10229 +
             C22712 * C10232 + C22713 * C47481) *
                C47479) *
               C47430 +
           ((C22322 * C10231 + C22323 * C10229 + C26857 * C10232 +
             C26858 * C47481) *
                C15771 +
            (C27315 * C10231 + C27316 * C10229 + (C22336 - C22337) * C10232 +
             (C22338 - C22339) * C47481) *
                C47479) *
               C47268) *
              C1286 +
          (((C22190 * C10231 + C22191 * C10229 + C27315 * C10232 +
             C27316 * C47481) *
                C15771 +
            ((C22193 - C22192) * C10231 + (C22195 - C22194) * C10229 +
             (C22714 - C22715) * C10232 + (C22716 - C22717) * C47481) *
                C47479) *
               C47430 +
           ((C22712 * C10231 + C22713 * C10229 + (C22337 - C22336) * C10232 +
             (C22339 - C22338) * C47481) *
                C15771 +
            ((C22715 - C22714) * C10231 + (C22717 - C22716) * C10229 +
             (C47108 * C22318 - C21367 * C22317) * C10232 +
             (C47108 * C22320 - C21367 * C22319) * C47481) *
                C47479) *
               C47268) *
              C47471) *
         C47135) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C47108 * C124 - C21367 * C117) * C10231 +
              (C47108 * C138 - C21367 * C127) * C10229 +
              (C25975 - C25976) * C10232 + (C25977 - C25978) * C47481) *
                 C15771 +
             ((C21479 - C21480) * C10231 + (C21481 - C21482) * C10229 +
              C26465 * C10232 + C26466 * C47481) *
                 C47479) *
                C47430 +
            (((C25976 - C25975) * C10231 + (C25978 - C25977) * C10229 +
              (C25979 - C25980) * C10232 + (C25981 - C25982) * C47481) *
                 C15771 +
             (C26467 * C10231 + C26468 * C10229 + (C22325 - C22324) * C10232 +
              (C22327 - C22326) * C47481) *
                 C47479) *
                C47268) *
               C47429 +
           ((((C21480 - C21479) * C10231 + (C21482 - C21481) * C10229 +
              C26467 * C10232 + C26468 * C47481) *
                 C15771 +
             ((C21484 - C21483) * C10231 + (C21486 - C21485) * C10229 +
              C22322 * C10232 + C22323 * C47481) *
                 C47479) *
                C47430 +
            ((C26465 * C10231 + C26466 * C10229 + (C22324 - C22325) * C10232 +
              (C22326 - C22327) * C47481) *
                 C15771 +
             ((C21995 - C21994) * C10231 + (C21997 - C21996) * C10229 +
              C22342 * C10232 + C22343 * C47481) *
                 C47479) *
                C47268) *
               C47226) *
              C258 +
          (((((C21367 * C118 - C47108 * C125) * C10231 +
              (C21367 * C128 - C47108 * C139) * C10229 +
              (C25983 - C25984) * C10232 + (C25985 - C25986) * C47481) *
                 C15771 +
             ((C21491 - C21492) * C10231 + (C21493 - C21494) * C10229 +
              C26469 * C10232 + C26470 * C47481) *
                 C47479) *
                C47430 +
            (((C25984 - C25983) * C10231 + (C25986 - C25985) * C10229 +
              (C25987 - C25988) * C10232 + (C25989 - C25990) * C47481) *
                 C15771 +
             (C26471 * C10231 + C26472 * C10229 + (C23154 - C23153) * C10232 +
              (C23156 - C23155) * C47481) *
                 C47479) *
                C47268) *
               C47429 +
           ((((C21492 - C21491) * C10231 + (C21494 - C21493) * C10229 +
              C26471 * C10232 + C26472 * C47481) *
                 C15771 +
             ((C21496 - C21495) * C10231 + (C21498 - C21497) * C10229 +
              C22601 * C10232 + C22602 * C47481) *
                 C47479) *
                C47430 +
            ((C26469 * C10231 + C26470 * C10229 + (C23153 - C23154) * C10232 +
              (C23155 - C23156) * C47481) *
                 C15771 +
             ((C22003 - C22002) * C10231 + (C22005 - C22004) * C10229 +
              (C23157 - C23158) * C10232 + (C23159 - C23160) * C47481) *
                 C47479) *
                C47268) *
               C47226) *
              C259 +
          (((((C47108 * C126 - C21367 * C119) * C10231 +
              (C47108 * C140 - C21367 * C129) * C10229 +
              (C25991 - C25992) * C10232 + (C25993 - C25994) * C47481) *
                 C15771 +
             ((C21503 - C21504) * C10231 + (C21505 - C21506) * C10229 +
              C26473 * C10232 + C26474 * C47481) *
                 C47479) *
                C47430 +
            (((C25992 - C25991) * C10231 + (C25994 - C25993) * C10229 +
              (C25995 - C25996) * C10232 + (C25997 - C25998) * C47481) *
                 C15771 +
             (C26475 * C10231 + C26476 * C10229 + (C25999 - C26000) * C10232 +
              (C26001 - C26002) * C47481) *
                 C47479) *
                C47268) *
               C47429 +
           ((((C21504 - C21503) * C10231 + (C21506 - C21505) * C10229 +
              C26475 * C10232 + C26476 * C47481) *
                 C15771 +
             ((C21508 - C21507) * C10231 + (C21510 - C21509) * C10229 +
              (C22010 - C22011) * C10232 + (C22012 - C22013) * C47481) *
                 C47479) *
                C47430 +
            ((C26473 * C10231 + C26474 * C10229 + (C26000 - C25999) * C10232 +
              (C26002 - C26001) * C47481) *
                 C15771 +
             ((C22011 - C22010) * C10231 + (C22013 - C22012) * C10229 +
              (C47108 * C1173 - C21367 * C1158) * C10232 +
              (C47108 * C1185 - C21367 * C1176) * C47481) *
                 C47479) *
                C47268) *
               C47226) *
              C47455)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C47108 * C124 - C21367 * C117) * C10231 +
             (C47108 * C138 - C21367 * C127) * C10229 +
             (C25975 - C25976) * C10232 + (C25977 - C25978) * C47481) *
                C15771 +
            ((C21479 - C21480) * C10231 + (C21481 - C21482) * C10229 +
             C26465 * C10232 + C26466 * C47481) *
                C47479) *
               C2116 +
           (((C25976 - C25975) * C10231 + (C25978 - C25977) * C10229 +
             (C25979 - C25980) * C10232 + (C25981 - C25982) * C47481) *
                C15771 +
            (C26467 * C10231 + C26468 * C10229 + C26851 * C10232 +
             C26852 * C47481) *
                C47479) *
               C2117 +
           (((C25980 - C25979) * C10231 + (C25982 - C25981) * C10229 +
             (C27695 - C27696) * C10232 + (C27697 - C27698) * C47481) *
                C15771 +
            (C26853 * C10231 + C26854 * C10229 + C28173 * C10232 +
             C28174 * C47481) *
                C47479) *
               C2118 +
           (((C27696 - C27695) * C10231 + (C27698 - C27697) * C10229 +
             (C27699 - C27700) * C10232 + (C27701 - C27702) * C47481) *
                C15771 +
            (C28175 * C10231 + C28176 * C10229 + (C27703 - C27704) * C10232 +
             (C27705 - C27706) * C47481) *
                C47479) *
               C47477) *
              C47429 +
          ((((C21480 - C21479) * C10231 + (C21482 - C21481) * C10229 +
             C26467 * C10232 + C26468 * C47481) *
                C15771 +
            ((C21484 - C21483) * C10231 + (C21486 - C21485) * C10229 +
             C22322 * C10232 + C22323 * C47481) *
                C47479) *
               C2116 +
           ((C26465 * C10231 + C26466 * C10229 + C26853 * C10232 +
             C26854 * C47481) *
                C15771 +
            (C26855 * C10231 + C26856 * C10229 + C22342 * C10232 +
             C22343 * C47481) *
                C47479) *
               C2117 +
           ((C26851 * C10231 + C26852 * C10229 + C28175 * C10232 +
             C28176 * C47481) *
                C15771 +
            (C26857 * C10231 + C26858 * C10229 + (C23365 - C23366) * C10232 +
             (C23367 - C23368) * C47481) *
                C47479) *
               C2118 +
           ((C28173 * C10231 + C28174 * C10229 + (C27704 - C27703) * C10232 +
             (C27706 - C27705) * C47481) *
                C15771 +
            ((C23366 - C23365) * C10231 + (C23368 - C23367) * C10229 +
             (C47108 * C23003 - C21367 * C23002) * C10232 +
             (C47108 * C23005 - C21367 * C23004) * C47481) *
                C47479) *
               C47477) *
              C47226) *
         C47135) /
            (p * q * std::sqrt(p + q));
    d2ee[137] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C47108 * C124 - C21367 * C117) * C10231 +
                (C47108 * C138 - C21367 * C127) * C10229 +
                (C47108 * C424 - C21367 * C414) * C10232 +
                (C47108 * C444 - C21367 * C427) * C47481) *
                   C15771 +
               ((C21479 - C21480) * C10231 + (C21481 - C21482) * C10229 +
                (C21991 - C21990) * C10232 + (C21993 - C21992) * C47481) *
                   C47479) *
                  C47181 * C47163 * C108 +
              (((C21367 * C118 - C47108 * C125) * C10231 +
                (C21367 * C128 - C47108 * C139) * C10229 +
                (C21367 * C415 - C47108 * C425) * C10232 +
                (C21367 * C428 - C47108 * C445) * C47481) *
                   C15771 +
               ((C21491 - C21492) * C10231 + (C21493 - C21494) * C10229 +
                (C21999 - C21998) * C10232 + (C22001 - C22000) * C47481) *
                   C47479) *
                  C47181 * C47163 * C109 +
              (((C47108 * C126 - C21367 * C119) * C10231 +
                (C47108 * C140 - C21367 * C129) * C10229 +
                (C47108 * C426 - C21367 * C416) * C10232 +
                (C47108 * C446 - C21367 * C429) * C47481) *
                   C15771 +
               ((C21503 - C21504) * C10231 + (C21505 - C21506) * C10229 +
                (C22007 - C22006) * C10232 + (C22009 - C22008) * C47481) *
                   C47479) *
                  C47181 * C47163 * C110 +
              (((C21367 * C120 - C47108 * C130) * C10231 +
                (C21367 * C131 - C47108 * C141) * C10229 +
                (C21367 * C420 - C47108 * C436) * C10232 +
                (C21367 * C437 - C47108 * C450) * C47481) *
                   C15771 +
               ((C21738 - C21739) * C10231 + (C21740 - C21741) * C10229 +
                (C21367 * C815 - C47108 * C823) * C10232 +
                (C21367 * C824 - C47108 * C830) * C47481) *
                   C47479) *
                  C47181 * C47163 * C111 +
              (((C47108 * C132 - C21367 * C121) * C10231 +
                (C47108 * C142 - C21367 * C133) * C10229 +
                (C47108 * C440 - C21367 * C422) * C10232 +
                (C47108 * C452 - C21367 * C441) * C47481) *
                   C15771 +
               ((C47108 * C287 - C21367 * C269) * C10231 +
                (C47108 * C299 - C21367 * C288) * C10229 +
                (C47108 * C825 - C21367 * C816) * C10232 +
                (C47108 * C831 - C21367 * C826) * C47481) *
                   C47479) *
                  C47181 * C47163 * C112) +
         0.5 * std::pow(Pi, 2.5) *
             (((((C47108 * C124 - C21367 * C117) * C10231 +
                 (C47108 * C138 - C21367 * C127) * C10229 +
                 (C47108 * C424 - C21367 * C414) * C10232 +
                 (C47108 * C444 - C21367 * C427) * C47481) *
                    C15771 +
                ((C21479 - C21480) * C10231 + (C21481 - C21482) * C10229 +
                 (C21991 - C21990) * C10232 + (C21993 - C21992) * C47481) *
                    C47479) *
                   C47181 * C47500 +
               (((C21480 - C21479) * C10231 + (C21482 - C21481) * C10229 +
                 (C21990 - C21991) * C10232 + (C21992 - C21993) * C47481) *
                    C15771 +
                ((C21484 - C21483) * C10231 + (C21486 - C21485) * C10229 +
                 C22322 * C10232 + C22323 * C47481) *
                    C47479) *
                   C47181 * C47488 +
               ((C21515 * C10231 + C21516 * C10229 +
                 (C21995 - C21994) * C10232 + (C21997 - C21996) * C47481) *
                    C15771 +
                ((C21488 - C21487) * C10231 + (C21490 - C21489) * C10229 +
                 C22712 * C10232 + C22713 * C47481) *
                    C47479) *
                   C47181 * C47461) *
                  C258 +
              ((((C21367 * C118 - C47108 * C125) * C10231 +
                 (C21367 * C128 - C47108 * C139) * C10229 +
                 (C21367 * C415 - C47108 * C425) * C10232 +
                 (C21367 * C428 - C47108 * C445) * C47481) *
                    C15771 +
                ((C21491 - C21492) * C10231 + (C21493 - C21494) * C10229 +
                 (C21999 - C21998) * C10232 + (C22001 - C22000) * C47481) *
                    C47479) *
                   C47181 * C47500 +
               (((C21492 - C21491) * C10231 + (C21494 - C21493) * C10229 +
                 (C21998 - C21999) * C10232 + (C22000 - C22001) * C47481) *
                    C15771 +
                ((C21496 - C21495) * C10231 + (C21498 - C21497) * C10229 +
                 C22601 * C10232 + C22602 * C47481) *
                    C47479) *
                   C47181 * C47488 +
               ((C21517 * C10231 + C21518 * C10229 +
                 (C22003 - C22002) * C10232 + (C22005 - C22004) * C47481) *
                    C15771 +
                ((C21500 - C21499) * C10231 + (C21502 - C21501) * C10229 +
                 (C22603 - C22604) * C10232 + (C22605 - C22606) * C47481) *
                    C47479) *
                   C47181 * C47461) *
                  C259 +
              ((((C47108 * C126 - C21367 * C119) * C10231 +
                 (C47108 * C140 - C21367 * C129) * C10229 +
                 (C47108 * C426 - C21367 * C416) * C10232 +
                 (C47108 * C446 - C21367 * C429) * C47481) *
                    C15771 +
                ((C21503 - C21504) * C10231 + (C21505 - C21506) * C10229 +
                 (C22007 - C22006) * C10232 + (C22009 - C22008) * C47481) *
                    C47479) *
                   C47181 * C47500 +
               (((C21504 - C21503) * C10231 + (C21506 - C21505) * C10229 +
                 (C22006 - C22007) * C10232 + (C22008 - C22009) * C47481) *
                    C15771 +
                ((C21508 - C21507) * C10231 + (C21510 - C21509) * C10229 +
                 (C22010 - C22011) * C10232 + (C22012 - C22013) * C47481) *
                    C47479) *
                   C47181 * C47488 +
               ((C21519 * C10231 + C21520 * C10229 +
                 (C22011 - C22010) * C10232 + (C22013 - C22012) * C47481) *
                    C15771 +
                ((C21512 - C21511) * C10231 + (C21514 - C21513) * C10229 +
                 (C47108 * C1547 - C21367 * C1544) * C10232 +
                 (C47108 * C1553 - C21367 * C1550) * C47481) *
                    C47479) *
                   C47181 * C47461) *
                  C47455)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C47108 * C124 - C21367 * C117) * C10231 +
             (C47108 * C138 - C21367 * C127) * C10229 +
             (C25975 - C25976) * C10232 + (C25977 - C25978) * C47481) *
                C15771 +
            ((C21479 - C21480) * C10231 + (C21481 - C21482) * C10229 +
             (C21991 - C21990) * C10232 + (C21993 - C21992) * C47481) *
                C47479) *
               C47501 +
           (((C25976 - C25975) * C10231 + (C25978 - C25977) * C10229 +
             (C25979 - C25980) * C10232 + (C25981 - C25982) * C47481) *
                C15771 +
            ((C21990 - C21991) * C10231 + (C21992 - C21993) * C10229 +
             (C22325 - C22324) * C10232 + (C22327 - C22326) * C47481) *
                C47479) *
               C47490 +
           (((C25980 - C25979) * C10231 + (C25982 - C25981) * C10229 +
             (C47108 * C1850 - C21367 * C1844) * C10232 +
             (C47108 * C1862 - C21367 * C1853) * C47481) *
                C15771 +
            ((C22324 - C22325) * C10231 + (C22326 - C22327) * C10229 +
             (C23362 - C23361) * C10232 + (C23364 - C23363) * C47481) *
                C47479) *
               C47464) *
              C47163 * C258 +
          ((((C21367 * C118 - C47108 * C125) * C10231 +
             (C21367 * C128 - C47108 * C139) * C10229 +
             (C25983 - C25984) * C10232 + (C25985 - C25986) * C47481) *
                C15771 +
            ((C21491 - C21492) * C10231 + (C21493 - C21494) * C10229 +
             (C21999 - C21998) * C10232 + (C22001 - C22000) * C47481) *
                C47479) *
               C47501 +
           (((C25984 - C25983) * C10231 + (C25986 - C25985) * C10229 +
             (C25987 - C25988) * C10232 + (C25989 - C25990) * C47481) *
                C15771 +
            ((C21998 - C21999) * C10231 + (C22000 - C22001) * C10229 +
             (C23154 - C23153) * C10232 + (C23156 - C23155) * C47481) *
                C47479) *
               C47490 +
           (((C25988 - C25987) * C10231 + (C25990 - C25989) * C10229 +
             (C21367 * C1845 - C47108 * C1851) * C10232 +
             (C21367 * C1854 - C47108 * C1863) * C47481) *
                C15771 +
            ((C23153 - C23154) * C10231 + (C23155 - C23156) * C10229 +
             (C21367 * C2223 - C47108 * C2226) * C10232 +
             (C21367 * C2229 - C47108 * C2232) * C47481) *
                C47479) *
               C47464) *
              C47163 * C259 +
          ((((C47108 * C126 - C21367 * C119) * C10231 +
             (C47108 * C140 - C21367 * C129) * C10229 +
             (C25991 - C25992) * C10232 + (C25993 - C25994) * C47481) *
                C15771 +
            ((C21503 - C21504) * C10231 + (C21505 - C21506) * C10229 +
             (C22007 - C22006) * C10232 + (C22009 - C22008) * C47481) *
                C47479) *
               C47501 +
           (((C25992 - C25991) * C10231 + (C25994 - C25993) * C10229 +
             (C25995 - C25996) * C10232 + (C25997 - C25998) * C47481) *
                C15771 +
            ((C22006 - C22007) * C10231 + (C22008 - C22009) * C10229 +
             (C25999 - C26000) * C10232 + (C26001 - C26002) * C47481) *
                C47479) *
               C47490 +
           (((C25996 - C25995) * C10231 + (C25998 - C25997) * C10229 +
             (C47108 * C1852 - C21367 * C1846) * C10232 +
             (C47108 * C1864 - C21367 * C1855) * C47481) *
                C15771 +
            ((C26000 - C25999) * C10231 + (C26002 - C26001) * C10229 +
             (C47108 * C2227 - C21367 * C2224) * C10232 +
             (C47108 * C2233 - C21367 * C2230) * C47481) *
                C47479) *
               C47464) *
              C47163 * C47455)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C47108 * C124 - C21367 * C117) * C10231 +
             (C47108 * C138 - C21367 * C127) * C10229 +
             (C25975 - C25976) * C10232 + (C25977 - C25978) * C47481) *
                C15771 +
            ((C21479 - C21480) * C10231 + (C21481 - C21482) * C10229 +
             C26465 * C10232 + C26466 * C47481) *
                C47479) *
               C47181 * C942 +
           (((C21480 - C21479) * C10231 + (C21482 - C21481) * C10229 +
             C26467 * C10232 + C26468 * C47481) *
                C15771 +
            ((C21484 - C21483) * C10231 + (C21486 - C21485) * C10229 +
             C22322 * C10232 + C22323 * C47481) *
                C47479) *
               C47181 * C943 +
           ((C21515 * C10231 + C21516 * C10229 + (C21995 - C21994) * C10232 +
             (C21997 - C21996) * C47481) *
                C15771 +
            ((C21488 - C21487) * C10231 + (C21490 - C21489) * C10229 +
             C22712 * C10232 + C22713 * C47481) *
                C47479) *
               C47181 * C47461) *
              C47497 +
          ((((C21367 * C118 - C47108 * C125) * C10231 +
             (C21367 * C128 - C47108 * C139) * C10229 +
             (C25983 - C25984) * C10232 + (C25985 - C25986) * C47481) *
                C15771 +
            ((C21491 - C21492) * C10231 + (C21493 - C21494) * C10229 +
             C26469 * C10232 + C26470 * C47481) *
                C47479) *
               C47181 * C942 +
           (((C21492 - C21491) * C10231 + (C21494 - C21493) * C10229 +
             C26471 * C10232 + C26472 * C47481) *
                C15771 +
            ((C21496 - C21495) * C10231 + (C21498 - C21497) * C10229 +
             C22601 * C10232 + C22602 * C47481) *
                C47479) *
               C47181 * C943 +
           ((C21517 * C10231 + C21518 * C10229 + (C22003 - C22002) * C10232 +
             (C22005 - C22004) * C47481) *
                C15771 +
            ((C21500 - C21499) * C10231 + (C21502 - C21501) * C10229 +
             (C22603 - C22604) * C10232 + (C22605 - C22606) * C47481) *
                C47479) *
               C47181 * C47461) *
              C47484 +
          ((((C47108 * C126 - C21367 * C119) * C10231 +
             (C47108 * C140 - C21367 * C129) * C10229 +
             (C25991 - C25992) * C10232 + (C25993 - C25994) * C47481) *
                C15771 +
            ((C21503 - C21504) * C10231 + (C21505 - C21506) * C10229 +
             C26473 * C10232 + C26474 * C47481) *
                C47479) *
               C47181 * C942 +
           (((C21504 - C21503) * C10231 + (C21506 - C21505) * C10229 +
             C26475 * C10232 + C26476 * C47481) *
                C15771 +
            ((C21508 - C21507) * C10231 + (C21510 - C21509) * C10229 +
             (C22010 - C22011) * C10232 + (C22012 - C22013) * C47481) *
                C47479) *
               C47181 * C943 +
           ((C21519 * C10231 + C21520 * C10229 + (C22011 - C22010) * C10232 +
             (C22013 - C22012) * C47481) *
                C15771 +
            ((C21512 - C21511) * C10231 + (C21514 - C21513) * C10229 +
             (C47108 * C1547 - C21367 * C1544) * C10232 +
             (C47108 * C1553 - C21367 * C1550) * C47481) *
                C47479) *
               C47181 * C47461) *
              C47455)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C47108 * C124 - C21367 * C117) * C10231 +
            (C47108 * C138 - C21367 * C127) * C10229 +
            (C25975 - C25976) * C10232 + (C25977 - C25978) * C47481) *
               C15771 +
           ((C21479 - C21480) * C10231 + (C21481 - C21482) * C10229 +
            C26465 * C10232 + C26466 * C47481) *
               C47479) *
              C47181 * C1010 +
          (((C21480 - C21479) * C10231 + (C21482 - C21481) * C10229 +
            C26467 * C10232 + C26468 * C47481) *
               C15771 +
           ((C21484 - C21483) * C10231 + (C21486 - C21485) * C10229 +
            C22322 * C10232 + C22323 * C47481) *
               C47479) *
              C47181 * C1011 +
          ((C21515 * C10231 + C21516 * C10229 + (C21995 - C21994) * C10232 +
            (C21997 - C21996) * C47481) *
               C15771 +
           ((C21488 - C21487) * C10231 + (C21490 - C21489) * C10229 +
            C22712 * C10232 + C22713 * C47481) *
               C47479) *
              C47181 * C1012 +
          ((C22190 * C10231 + C22191 * C10229 + (C22333 - C22332) * C10232 +
            (C22335 - C22334) * C47481) *
               C15771 +
           ((C22193 - C22192) * C10231 + (C22195 - C22194) * C10229 +
            (C22714 - C22715) * C10232 + (C22716 - C22717) * C47481) *
               C47479) *
              C47181 * C1013 +
          ((C22202 * C10231 + C22203 * C10229 + (C22715 - C22714) * C10232 +
            (C22717 - C22716) * C47481) *
               C15771 +
           ((C22197 - C22196) * C10231 + (C22199 - C22198) * C10229 +
            (C47108 * C22708 - C21367 * C22707) * C10232 +
            (C47108 * C22710 - C21367 * C22709) * C47481) *
               C47479) *
              C47181 * C1014) *
         C47135) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C47108 * C124 - C21367 * C117) * C10231 +
             (C47108 * C138 - C21367 * C127) * C10229 +
             (C25975 - C25976) * C10232 + (C25977 - C25978) * C47481) *
                C15771 +
            ((C21479 - C21480) * C10231 + (C21481 - C21482) * C10229 +
             C26465 * C10232 + C26466 * C47481) *
                C47479) *
               C47501 +
           (((C25976 - C25975) * C10231 + (C25978 - C25977) * C10229 +
             (C25979 - C25980) * C10232 + (C25981 - C25982) * C47481) *
                C15771 +
            (C26467 * C10231 + C26468 * C10229 + C26851 * C10232 +
             C26852 * C47481) *
                C47479) *
               C47490 +
           (((C25980 - C25979) * C10231 + (C25982 - C25981) * C10229 +
             (C47108 * C1850 - C21367 * C1844) * C10232 +
             (C47108 * C1862 - C21367 * C1853) * C47481) *
                C15771 +
            (C26853 * C10231 + C26854 * C10229 + (C23362 - C23361) * C10232 +
             (C23364 - C23363) * C47481) *
                C47479) *
               C47464) *
              C942 +
          ((((C21480 - C21479) * C10231 + (C21482 - C21481) * C10229 +
             C26467 * C10232 + C26468 * C47481) *
                C15771 +
            ((C21484 - C21483) * C10231 + (C21486 - C21485) * C10229 +
             C22322 * C10232 + C22323 * C47481) *
                C47479) *
               C47501 +
           ((C26465 * C10231 + C26466 * C10229 + C26853 * C10232 +
             C26854 * C47481) *
                C15771 +
            (C26855 * C10231 + C26856 * C10229 + C22342 * C10232 +
             C22343 * C47481) *
                C47479) *
               C47490 +
           ((C26851 * C10231 + C26852 * C10229 + (C23361 - C23362) * C10232 +
             (C23363 - C23364) * C47481) *
                C15771 +
            (C26857 * C10231 + C26858 * C10229 + (C23365 - C23366) * C10232 +
             (C23367 - C23368) * C47481) *
                C47479) *
               C47464) *
              C943 +
          (((C21515 * C10231 + C21516 * C10229 + C26855 * C10232 +
             C26856 * C47481) *
                C15771 +
            ((C21488 - C21487) * C10231 + (C21490 - C21489) * C10229 +
             C22712 * C10232 + C22713 * C47481) *
                C47479) *
               C47501 +
           ((C22322 * C10231 + C22323 * C10229 + C26857 * C10232 +
             C26858 * C47481) *
                C15771 +
            ((C22333 - C22332) * C10231 + (C22335 - C22334) * C10229 +
             (C22336 - C22337) * C10232 + (C22338 - C22339) * C47481) *
                C47479) *
               C47490 +
           ((C22342 * C10231 + C22343 * C10229 + (C23366 - C23365) * C10232 +
             (C23368 - C23367) * C47481) *
                C15771 +
            ((C22337 - C22336) * C10231 + (C22339 - C22338) * C10229 +
             (C47108 * C23357 - C21367 * C23356) * C10232 +
             (C47108 * C23359 - C21367 * C23358) * C47481) *
                C47479) *
               C47464) *
              C47461) *
         C47135) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C47108 * C124 - C21367 * C117) * C10231 +
             (C47108 * C138 - C21367 * C127) * C10229 +
             (C25975 - C25976) * C10232 + (C25977 - C25978) * C47481) *
                C15771 +
            ((C21479 - C21480) * C10231 + (C21481 - C21482) * C10229 +
             C26465 * C10232 + C26466 * C47481) *
                C47479) *
               C1664 +
           (((C25976 - C25975) * C10231 + (C25978 - C25977) * C10229 +
             (C25979 - C25980) * C10232 + (C25981 - C25982) * C47481) *
                C15771 +
            (C26467 * C10231 + C26468 * C10229 + C26851 * C10232 +
             C26852 * C47481) *
                C47479) *
               C1665 +
           (((C25980 - C25979) * C10231 + (C25982 - C25981) * C10229 +
             (C47108 * C1850 - C21367 * C1844) * C10232 +
             (C47108 * C1862 - C21367 * C1853) * C47481) *
                C15771 +
            (C26853 * C10231 + C26854 * C10229 + (C23362 - C23361) * C10232 +
             (C23364 - C23363) * C47481) *
                C47479) *
               C47464) *
              C47163 * C47497 +
          ((((C21367 * C118 - C47108 * C125) * C10231 +
             (C21367 * C128 - C47108 * C139) * C10229 +
             (C25983 - C25984) * C10232 + (C25985 - C25986) * C47481) *
                C15771 +
            ((C21491 - C21492) * C10231 + (C21493 - C21494) * C10229 +
             C26469 * C10232 + C26470 * C47481) *
                C47479) *
               C1664 +
           (((C25984 - C25983) * C10231 + (C25986 - C25985) * C10229 +
             (C25987 - C25988) * C10232 + (C25989 - C25990) * C47481) *
                C15771 +
            (C26471 * C10231 + C26472 * C10229 + (C23154 - C23153) * C10232 +
             (C23156 - C23155) * C47481) *
                C47479) *
               C1665 +
           (((C25988 - C25987) * C10231 + (C25990 - C25989) * C10229 +
             (C21367 * C1845 - C47108 * C1851) * C10232 +
             (C21367 * C1854 - C47108 * C1863) * C47481) *
                C15771 +
            ((C23153 - C23154) * C10231 + (C23155 - C23156) * C10229 +
             (C21367 * C2223 - C47108 * C2226) * C10232 +
             (C21367 * C2229 - C47108 * C2232) * C47481) *
                C47479) *
               C47464) *
              C47163 * C47484 +
          ((((C47108 * C126 - C21367 * C119) * C10231 +
             (C47108 * C140 - C21367 * C129) * C10229 +
             (C25991 - C25992) * C10232 + (C25993 - C25994) * C47481) *
                C15771 +
            ((C21503 - C21504) * C10231 + (C21505 - C21506) * C10229 +
             C26473 * C10232 + C26474 * C47481) *
                C47479) *
               C1664 +
           (((C25992 - C25991) * C10231 + (C25994 - C25993) * C10229 +
             (C25995 - C25996) * C10232 + (C25997 - C25998) * C47481) *
                C15771 +
            (C26475 * C10231 + C26476 * C10229 + (C25999 - C26000) * C10232 +
             (C26001 - C26002) * C47481) *
                C47479) *
               C1665 +
           (((C25996 - C25995) * C10231 + (C25998 - C25997) * C10229 +
             (C47108 * C1852 - C21367 * C1846) * C10232 +
             (C47108 * C1864 - C21367 * C1855) * C47481) *
                C15771 +
            ((C26000 - C25999) * C10231 + (C26002 - C26001) * C10229 +
             (C47108 * C2227 - C21367 * C2224) * C10232 +
             (C47108 * C2233 - C21367 * C2230) * C47481) *
                C47479) *
               C47464) *
              C47163 * C47455)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C47108 * C124 - C21367 * C117) * C10231 +
             (C47108 * C138 - C21367 * C127) * C10229 +
             (C25975 - C25976) * C10232 + (C25977 - C25978) * C47481) *
                C15771 +
            ((C21479 - C21480) * C10231 + (C21481 - C21482) * C10229 +
             C26465 * C10232 + C26466 * C47481) *
                C47479) *
               C1664 +
           (((C25976 - C25975) * C10231 + (C25978 - C25977) * C10229 +
             (C25979 - C25980) * C10232 + (C25981 - C25982) * C47481) *
                C15771 +
            (C26467 * C10231 + C26468 * C10229 + C26851 * C10232 +
             C26852 * C47481) *
                C47479) *
               C1665 +
           (((C25980 - C25979) * C10231 + (C25982 - C25981) * C10229 +
             (C47108 * C1850 - C21367 * C1844) * C10232 +
             (C47108 * C1862 - C21367 * C1853) * C47481) *
                C15771 +
            (C26853 * C10231 + C26854 * C10229 + (C23362 - C23361) * C10232 +
             (C23364 - C23363) * C47481) *
                C47479) *
               C47464) *
              C47500 +
          ((((C21480 - C21479) * C10231 + (C21482 - C21481) * C10229 +
             C26467 * C10232 + C26468 * C47481) *
                C15771 +
            ((C21484 - C21483) * C10231 + (C21486 - C21485) * C10229 +
             C22322 * C10232 + C22323 * C47481) *
                C47479) *
               C1664 +
           ((C26465 * C10231 + C26466 * C10229 + C26853 * C10232 +
             C26854 * C47481) *
                C15771 +
            (C26855 * C10231 + C26856 * C10229 + C22342 * C10232 +
             C22343 * C47481) *
                C47479) *
               C1665 +
           ((C26851 * C10231 + C26852 * C10229 + (C23361 - C23362) * C10232 +
             (C23363 - C23364) * C47481) *
                C15771 +
            (C26857 * C10231 + C26858 * C10229 + (C23365 - C23366) * C10232 +
             (C23367 - C23368) * C47481) *
                C47479) *
               C47464) *
              C47488 +
          (((C21515 * C10231 + C21516 * C10229 + C26855 * C10232 +
             C26856 * C47481) *
                C15771 +
            ((C21488 - C21487) * C10231 + (C21490 - C21489) * C10229 +
             C22712 * C10232 + C22713 * C47481) *
                C47479) *
               C1664 +
           ((C22322 * C10231 + C22323 * C10229 + C26857 * C10232 +
             C26858 * C47481) *
                C15771 +
            (C27315 * C10231 + C27316 * C10229 + (C22336 - C22337) * C10232 +
             (C22338 - C22339) * C47481) *
                C47479) *
               C1665 +
           ((C22342 * C10231 + C22343 * C10229 + (C23366 - C23365) * C10232 +
             (C23368 - C23367) * C47481) *
                C15771 +
            ((C22337 - C22336) * C10231 + (C22339 - C22338) * C10229 +
             (C47108 * C23357 - C21367 * C23356) * C10232 +
             (C47108 * C23359 - C21367 * C23358) * C47481) *
                C47479) *
               C47464) *
              C47461) *
         C47135) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C47108 * C124 - C21367 * C117) * C10231 +
            (C47108 * C138 - C21367 * C127) * C10229 +
            (C25975 - C25976) * C10232 + (C25977 - C25978) * C47481) *
               C15771 +
           ((C21479 - C21480) * C10231 + (C21481 - C21482) * C10229 +
            C26465 * C10232 + C26466 * C47481) *
               C47479) *
              C1839 +
          (((C25976 - C25975) * C10231 + (C25978 - C25977) * C10229 +
            (C25979 - C25980) * C10232 + (C25981 - C25982) * C47481) *
               C15771 +
           (C26467 * C10231 + C26468 * C10229 + C26851 * C10232 +
            C26852 * C47481) *
               C47479) *
              C1840 +
          (((C25980 - C25979) * C10231 + (C25982 - C25981) * C10229 +
            (C27695 - C27696) * C10232 + (C27697 - C27698) * C47481) *
               C15771 +
           (C26853 * C10231 + C26854 * C10229 + (C23362 - C23361) * C10232 +
            (C23364 - C23363) * C47481) *
               C47479) *
              C1841 +
          (((C27696 - C27695) * C10231 + (C27698 - C27697) * C10229 +
            (C27699 - C27700) * C10232 + (C27701 - C27702) * C47481) *
               C15771 +
           ((C23361 - C23362) * C10231 + (C23363 - C23364) * C10229 +
            (C27703 - C27704) * C10232 + (C27705 - C27706) * C47481) *
               C47479) *
              C1842 +
          (((C27700 - C27699) * C10231 + (C27702 - C27701) * C10229 +
            (C47108 * C12239 - C21367 * C12237) * C10232 +
            (C47108 * C12243 - C21367 * C12241) * C47481) *
               C15771 +
           ((C27704 - C27703) * C10231 + (C27706 - C27705) * C10229 +
            (C47108 * C27691 - C21367 * C27690) * C10232 +
            (C47108 * C27693 - C21367 * C27692) * C47481) *
               C47479) *
              C1843) *
         C47163 * C47135) /
            (p * q * std::sqrt(p + q));
    d2ee[138] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C47108 * C124 - C21367 * C117) * C10231 +
              (C47108 * C138 - C21367 * C127) * C10229 +
              (C25975 - C25976) * C10232 + (C25977 - C25978) * C47481) *
                 C15771 +
             ((C21479 - C21480) * C10231 + (C21481 - C21482) * C10229 +
              C26465 * C10232 + C26466 * C47481) *
                 C47479) *
                C47430 +
            (((C25976 - C25975) * C10231 + (C25978 - C25977) * C10229 +
              (C25979 - C25980) * C10232 + (C25981 - C25982) * C47481) *
                 C15771 +
             (C26467 * C10231 + C26468 * C10229 + C26851 * C10232 +
              C26852 * C47481) *
                 C47479) *
                C47268) *
               C942 +
           ((((C21480 - C21479) * C10231 + (C21482 - C21481) * C10229 +
              C26467 * C10232 + C26468 * C47481) *
                 C15771 +
             ((C21484 - C21483) * C10231 + (C21486 - C21485) * C10229 +
              C22322 * C10232 + C22323 * C47481) *
                 C47479) *
                C47430 +
            ((C26465 * C10231 + C26466 * C10229 + C26853 * C10232 +
              C26854 * C47481) *
                 C15771 +
             (C26855 * C10231 + C26856 * C10229 + C22342 * C10232 +
              C22343 * C47481) *
                 C47479) *
                C47268) *
               C943 +
           (((C21515 * C10231 + C21516 * C10229 + C26855 * C10232 +
              C26856 * C47481) *
                 C15771 +
             ((C21488 - C21487) * C10231 + (C21490 - C21489) * C10229 +
              C22712 * C10232 + C22713 * C47481) *
                 C47479) *
                C47430 +
            ((C22322 * C10231 + C22323 * C10229 + C26857 * C10232 +
              C26858 * C47481) *
                 C15771 +
             ((C22333 - C22332) * C10231 + (C22335 - C22334) * C10229 +
              (C22336 - C22337) * C10232 + (C22338 - C22339) * C47481) *
                 C47479) *
                C47268) *
               C47461) *
              C47415 +
          (((((C21367 * C118 - C47108 * C125) * C10231 +
              (C21367 * C128 - C47108 * C139) * C10229 +
              (C25983 - C25984) * C10232 + (C25985 - C25986) * C47481) *
                 C15771 +
             ((C21491 - C21492) * C10231 + (C21493 - C21494) * C10229 +
              C26469 * C10232 + C26470 * C47481) *
                 C47479) *
                C47430 +
            (((C25984 - C25983) * C10231 + (C25986 - C25985) * C10229 +
              (C25987 - C25988) * C10232 + (C25989 - C25990) * C47481) *
                 C15771 +
             (C26471 * C10231 + C26472 * C10229 + (C23154 - C23153) * C10232 +
              (C23156 - C23155) * C47481) *
                 C47479) *
                C47268) *
               C942 +
           ((((C21492 - C21491) * C10231 + (C21494 - C21493) * C10229 +
              C26471 * C10232 + C26472 * C47481) *
                 C15771 +
             ((C21496 - C21495) * C10231 + (C21498 - C21497) * C10229 +
              C22601 * C10232 + C22602 * C47481) *
                 C47479) *
                C47430 +
            ((C26469 * C10231 + C26470 * C10229 + (C23153 - C23154) * C10232 +
              (C23155 - C23156) * C47481) *
                 C15771 +
             (C27183 * C10231 + C27184 * C10229 + (C23157 - C23158) * C10232 +
              (C23159 - C23160) * C47481) *
                 C47479) *
                C47268) *
               C943 +
           (((C21517 * C10231 + C21518 * C10229 + C27183 * C10232 +
              C27184 * C47481) *
                 C15771 +
             ((C21500 - C21499) * C10231 + (C21502 - C21501) * C10229 +
              (C22603 - C22604) * C10232 + (C22605 - C22606) * C47481) *
                 C47479) *
                C47430 +
            ((C22601 * C10231 + C22602 * C10229 + (C23158 - C23157) * C10232 +
              (C23160 - C23159) * C47481) *
                 C15771 +
             ((C22604 - C22603) * C10231 + (C22606 - C22605) * C10229 +
              (C47108 * C5808 - C21367 * C5806) * C10232 +
              (C47108 * C5812 - C21367 * C5810) * C47481) *
                 C47479) *
                C47268) *
               C47461) *
              C47146)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C47108 * C124 - C21367 * C117) * C10231 +
             (C47108 * C138 - C21367 * C127) * C10229 +
             (C25975 - C25976) * C10232 + (C25977 - C25978) * C47481) *
                C15771 +
            ((C21479 - C21480) * C10231 + (C21481 - C21482) * C10229 +
             (C21991 - C21990) * C10232 + (C21993 - C21992) * C47481) *
                C47479) *
               C47430 +
           (((C25976 - C25975) * C10231 + (C25978 - C25977) * C10229 +
             (C25979 - C25980) * C10232 + (C25981 - C25982) * C47481) *
                C15771 +
            ((C21990 - C21991) * C10231 + (C21992 - C21993) * C10229 +
             (C22325 - C22324) * C10232 + (C22327 - C22326) * C47481) *
                C47479) *
               C47268) *
              C47163 * C554 +
          ((((C21367 * C118 - C47108 * C125) * C10231 +
             (C21367 * C128 - C47108 * C139) * C10229 +
             (C25983 - C25984) * C10232 + (C25985 - C25986) * C47481) *
                C15771 +
            ((C21491 - C21492) * C10231 + (C21493 - C21494) * C10229 +
             (C21999 - C21998) * C10232 + (C22001 - C22000) * C47481) *
                C47479) *
               C47430 +
           (((C25984 - C25983) * C10231 + (C25986 - C25985) * C10229 +
             (C25987 - C25988) * C10232 + (C25989 - C25990) * C47481) *
                C15771 +
            ((C21998 - C21999) * C10231 + (C22000 - C22001) * C10229 +
             (C23154 - C23153) * C10232 + (C23156 - C23155) * C47481) *
                C47479) *
               C47268) *
              C47163 * C555 +
          ((((C47108 * C126 - C21367 * C119) * C10231 +
             (C47108 * C140 - C21367 * C129) * C10229 +
             (C25991 - C25992) * C10232 + (C25993 - C25994) * C47481) *
                C15771 +
            ((C21503 - C21504) * C10231 + (C21505 - C21506) * C10229 +
             (C22007 - C22006) * C10232 + (C22009 - C22008) * C47481) *
                C47479) *
               C47430 +
           (((C25992 - C25991) * C10231 + (C25994 - C25993) * C10229 +
             (C25995 - C25996) * C10232 + (C25997 - C25998) * C47481) *
                C15771 +
            ((C22006 - C22007) * C10231 + (C22008 - C22009) * C10229 +
             (C25999 - C26000) * C10232 + (C26001 - C26002) * C47481) *
                C47479) *
               C47268) *
              C47163 * C556 +
          ((((C21367 * C120 - C47108 * C130) * C10231 +
             (C21367 * C131 - C47108 * C141) * C10229 +
             (C26267 - C26268) * C10232 + (C26269 - C26270) * C47481) *
                C15771 +
            ((C21738 - C21739) * C10231 + (C21740 - C21741) * C10229 +
             (C26133 - C26134) * C10232 + (C26135 - C26136) * C47481) *
                C47479) *
               C47430 +
           (((C26268 - C26267) * C10231 + (C26270 - C26269) * C10229 +
             (C47108 * C438 - C21367 * C421) * C10232 +
             (C47108 * C451 - C21367 * C439) * C47481) *
                C15771 +
            ((C26134 - C26133) * C10231 + (C26136 - C26135) * C10229 +
             (C47108 * C2015 - C21367 * C2014) * C10232 +
             (C47108 * C2017 - C21367 * C2016) * C47481) *
                C47479) *
               C47268) *
              C47163 * C47465)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C47108 * C124 - C21367 * C117) * C10231 +
             (C47108 * C138 - C21367 * C127) * C10229 +
             (C25975 - C25976) * C10232 + (C25977 - C25978) * C47481) *
                C15771 +
            ((C21479 - C21480) * C10231 + (C21481 - C21482) * C10229 +
             C26465 * C10232 + C26466 * C47481) *
                C47479) *
               C2116 +
           (((C25976 - C25975) * C10231 + (C25978 - C25977) * C10229 +
             (C25979 - C25980) * C10232 + (C25981 - C25982) * C47481) *
                C15771 +
            (C26467 * C10231 + C26468 * C10229 + C26851 * C10232 +
             C26852 * C47481) *
                C47479) *
               C2117 +
           (((C25980 - C25979) * C10231 + (C25982 - C25981) * C10229 +
             (C27695 - C27696) * C10232 + (C27697 - C27698) * C47481) *
                C15771 +
            (C26853 * C10231 + C26854 * C10229 + (C23362 - C23361) * C10232 +
             (C23364 - C23363) * C47481) *
                C47479) *
               C2118 +
           (((C27696 - C27695) * C10231 + (C27698 - C27697) * C10229 +
             (C27699 - C27700) * C10232 + (C27701 - C27702) * C47481) *
                C15771 +
            ((C23361 - C23362) * C10231 + (C23363 - C23364) * C10229 +
             (C27703 - C27704) * C10232 + (C27705 - C27706) * C47481) *
                C47479) *
               C47477) *
              C47163 * C47415 +
          ((((C21367 * C118 - C47108 * C125) * C10231 +
             (C21367 * C128 - C47108 * C139) * C10229 +
             (C25983 - C25984) * C10232 + (C25985 - C25986) * C47481) *
                C15771 +
            ((C21491 - C21492) * C10231 + (C21493 - C21494) * C10229 +
             C26469 * C10232 + C26470 * C47481) *
                C47479) *
               C2116 +
           (((C25984 - C25983) * C10231 + (C25986 - C25985) * C10229 +
             (C25987 - C25988) * C10232 + (C25989 - C25990) * C47481) *
                C15771 +
            (C26471 * C10231 + C26472 * C10229 + C27901 * C10232 +
             C27902 * C47481) *
                C47479) *
               C2117 +
           (((C25988 - C25987) * C10231 + (C25990 - C25989) * C10229 +
             (C28039 - C28040) * C10232 + (C28041 - C28042) * C47481) *
                C15771 +
            (C27903 * C10231 + C27904 * C10229 + (C27905 - C27906) * C10232 +
             (C27907 - C27908) * C47481) *
                C47479) *
               C2118 +
           (((C28040 - C28039) * C10231 + (C28042 - C28041) * C10229 +
             (C47108 * C1857 - C21367 * C1848) * C10232 +
             (C47108 * C1866 - C21367 * C1860) * C47481) *
                C15771 +
            ((C27906 - C27905) * C10231 + (C27908 - C27907) * C10229 +
             (C47108 * C6700 - C21367 * C6698) * C10232 +
             (C47108 * C6704 - C21367 * C6702) * C47481) *
                C47479) *
               C47477) *
              C47163 * C47146)) /
            (p * q * std::sqrt(p + q));
    d2ee[139] += (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  (((((C47108 * C124 - C21367 * C117) * C10231 +
                      (C47108 * C138 - C21367 * C127) * C10229 +
                      (C47108 * C424 - C21367 * C414) * C10232 +
                      (C47108 * C444 - C21367 * C427) * C47481) *
                         C15771 +
                     ((C21479 - C21480) * C10231 + (C21481 - C21482) * C10229 +
                      (C21991 - C21990) * C10232 + (C21993 - C21992) * C47481) *
                         C47479) *
                        C47181 * C47500 +
                    (((C21480 - C21479) * C10231 + (C21482 - C21481) * C10229 +
                      (C21990 - C21991) * C10232 + (C21992 - C21993) * C47481) *
                         C15771 +
                     ((C21484 - C21483) * C10231 + (C21486 - C21485) * C10229 +
                      C22322 * C10232 + C22323 * C47481) *
                         C47479) *
                        C47181 * C47488 +
                    ((C21515 * C10231 + C21516 * C10229 +
                      (C21995 - C21994) * C10232 + (C21997 - C21996) * C47481) *
                         C15771 +
                     ((C21488 - C21487) * C10231 + (C21490 - C21489) * C10229 +
                      C22712 * C10232 + C22713 * C47481) *
                         C47479) *
                        C47181 * C47461) *
                       C258 +
                   ((((C21367 * C118 - C47108 * C125) * C10231 +
                      (C21367 * C128 - C47108 * C139) * C10229 +
                      (C21367 * C415 - C47108 * C425) * C10232 +
                      (C21367 * C428 - C47108 * C445) * C47481) *
                         C15771 +
                     ((C21491 - C21492) * C10231 + (C21493 - C21494) * C10229 +
                      (C21999 - C21998) * C10232 + (C22001 - C22000) * C47481) *
                         C47479) *
                        C47181 * C47500 +
                    (((C21492 - C21491) * C10231 + (C21494 - C21493) * C10229 +
                      (C21998 - C21999) * C10232 + (C22000 - C22001) * C47481) *
                         C15771 +
                     ((C21496 - C21495) * C10231 + (C21498 - C21497) * C10229 +
                      C22601 * C10232 + C22602 * C47481) *
                         C47479) *
                        C47181 * C47488 +
                    ((C21517 * C10231 + C21518 * C10229 +
                      (C22003 - C22002) * C10232 + (C22005 - C22004) * C47481) *
                         C15771 +
                     ((C21500 - C21499) * C10231 + (C21502 - C21501) * C10229 +
                      (C22603 - C22604) * C10232 + (C22605 - C22606) * C47481) *
                         C47479) *
                        C47181 * C47461) *
                       C259 +
                   ((((C47108 * C126 - C21367 * C119) * C10231 +
                      (C47108 * C140 - C21367 * C129) * C10229 +
                      (C47108 * C426 - C21367 * C416) * C10232 +
                      (C47108 * C446 - C21367 * C429) * C47481) *
                         C15771 +
                     ((C21503 - C21504) * C10231 + (C21505 - C21506) * C10229 +
                      (C22007 - C22006) * C10232 + (C22009 - C22008) * C47481) *
                         C47479) *
                        C47181 * C47500 +
                    (((C21504 - C21503) * C10231 + (C21506 - C21505) * C10229 +
                      (C22006 - C22007) * C10232 + (C22008 - C22009) * C47481) *
                         C15771 +
                     ((C21508 - C21507) * C10231 + (C21510 - C21509) * C10229 +
                      (C22010 - C22011) * C10232 + (C22012 - C22013) * C47481) *
                         C47479) *
                        C47181 * C47488 +
                    ((C21519 * C10231 + C21520 * C10229 +
                      (C22011 - C22010) * C10232 + (C22013 - C22012) * C47481) *
                         C15771 +
                     ((C21512 - C21511) * C10231 + (C21514 - C21513) * C10229 +
                      (C47108 * C1547 - C21367 * C1544) * C10232 +
                      (C47108 * C1553 - C21367 * C1550) * C47481) *
                         C47479) *
                        C47181 * C47461) *
                       C47455)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  ((((C47108 * C124 - C21367 * C117) * C10231 +
                     (C47108 * C138 - C21367 * C127) * C10229 +
                     (C47108 * C424 - C21367 * C414) * C10232 +
                     (C47108 * C444 - C21367 * C427) * C47481) *
                        C15771 +
                    ((C21479 - C21480) * C10231 + (C21481 - C21482) * C10229 +
                     (C21991 - C21990) * C10232 + (C21993 - C21992) * C47481) *
                        C47479) *
                       C47181 * C47163 * C108 +
                   (((C21367 * C118 - C47108 * C125) * C10231 +
                     (C21367 * C128 - C47108 * C139) * C10229 +
                     (C21367 * C415 - C47108 * C425) * C10232 +
                     (C21367 * C428 - C47108 * C445) * C47481) *
                        C15771 +
                    ((C21491 - C21492) * C10231 + (C21493 - C21494) * C10229 +
                     (C21999 - C21998) * C10232 + (C22001 - C22000) * C47481) *
                        C47479) *
                       C47181 * C47163 * C109 +
                   (((C47108 * C126 - C21367 * C119) * C10231 +
                     (C47108 * C140 - C21367 * C129) * C10229 +
                     (C47108 * C426 - C21367 * C416) * C10232 +
                     (C47108 * C446 - C21367 * C429) * C47481) *
                        C15771 +
                    ((C21503 - C21504) * C10231 + (C21505 - C21506) * C10229 +
                     (C22007 - C22006) * C10232 + (C22009 - C22008) * C47481) *
                        C47479) *
                       C47181 * C47163 * C110 +
                   (((C21367 * C120 - C47108 * C130) * C10231 +
                     (C21367 * C131 - C47108 * C141) * C10229 +
                     (C21367 * C420 - C47108 * C436) * C10232 +
                     (C21367 * C437 - C47108 * C450) * C47481) *
                        C15771 +
                    ((C21738 - C21739) * C10231 + (C21740 - C21741) * C10229 +
                     (C21367 * C815 - C47108 * C823) * C10232 +
                     (C21367 * C824 - C47108 * C830) * C47481) *
                        C47479) *
                       C47181 * C47163 * C111 +
                   (((C47108 * C132 - C21367 * C121) * C10231 +
                     (C47108 * C142 - C21367 * C133) * C10229 +
                     (C47108 * C440 - C21367 * C422) * C10232 +
                     (C47108 * C452 - C21367 * C441) * C47481) *
                        C15771 +
                    ((C47108 * C287 - C21367 * C269) * C10231 +
                     (C47108 * C299 - C21367 * C288) * C10229 +
                     (C47108 * C825 - C21367 * C816) * C10232 +
                     (C47108 * C831 - C21367 * C826) * C47481) *
                        C47479) *
                       C47181 * C47163 * C112)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  (((((C47108 * C124 - C21367 * C117) * C10231 +
                      (C47108 * C138 - C21367 * C127) * C10229 +
                      (C25975 - C25976) * C10232 + (C25977 - C25978) * C47481) *
                         C15771 +
                     ((C21479 - C21480) * C10231 + (C21481 - C21482) * C10229 +
                      C26465 * C10232 + C26466 * C47481) *
                         C47479) *
                        C47181 * C942 +
                    (((C21480 - C21479) * C10231 + (C21482 - C21481) * C10229 +
                      C26467 * C10232 + C26468 * C47481) *
                         C15771 +
                     ((C21484 - C21483) * C10231 + (C21486 - C21485) * C10229 +
                      C22322 * C10232 + C22323 * C47481) *
                         C47479) *
                        C47181 * C943 +
                    ((C21515 * C10231 + C21516 * C10229 +
                      (C21995 - C21994) * C10232 + (C21997 - C21996) * C47481) *
                         C15771 +
                     ((C21488 - C21487) * C10231 + (C21490 - C21489) * C10229 +
                      C22712 * C10232 + C22713 * C47481) *
                         C47479) *
                        C47181 * C47461) *
                       C47497 +
                   ((((C21367 * C118 - C47108 * C125) * C10231 +
                      (C21367 * C128 - C47108 * C139) * C10229 +
                      (C25983 - C25984) * C10232 + (C25985 - C25986) * C47481) *
                         C15771 +
                     ((C21491 - C21492) * C10231 + (C21493 - C21494) * C10229 +
                      C26469 * C10232 + C26470 * C47481) *
                         C47479) *
                        C47181 * C942 +
                    (((C21492 - C21491) * C10231 + (C21494 - C21493) * C10229 +
                      C26471 * C10232 + C26472 * C47481) *
                         C15771 +
                     ((C21496 - C21495) * C10231 + (C21498 - C21497) * C10229 +
                      C22601 * C10232 + C22602 * C47481) *
                         C47479) *
                        C47181 * C943 +
                    ((C21517 * C10231 + C21518 * C10229 +
                      (C22003 - C22002) * C10232 + (C22005 - C22004) * C47481) *
                         C15771 +
                     ((C21500 - C21499) * C10231 + (C21502 - C21501) * C10229 +
                      (C22603 - C22604) * C10232 + (C22605 - C22606) * C47481) *
                         C47479) *
                        C47181 * C47461) *
                       C47484 +
                   ((((C47108 * C126 - C21367 * C119) * C10231 +
                      (C47108 * C140 - C21367 * C129) * C10229 +
                      (C25991 - C25992) * C10232 + (C25993 - C25994) * C47481) *
                         C15771 +
                     ((C21503 - C21504) * C10231 + (C21505 - C21506) * C10229 +
                      C26473 * C10232 + C26474 * C47481) *
                         C47479) *
                        C47181 * C942 +
                    (((C21504 - C21503) * C10231 + (C21506 - C21505) * C10229 +
                      C26475 * C10232 + C26476 * C47481) *
                         C15771 +
                     ((C21508 - C21507) * C10231 + (C21510 - C21509) * C10229 +
                      (C22010 - C22011) * C10232 + (C22012 - C22013) * C47481) *
                         C47479) *
                        C47181 * C943 +
                    ((C21519 * C10231 + C21520 * C10229 +
                      (C22011 - C22010) * C10232 + (C22013 - C22012) * C47481) *
                         C15771 +
                     ((C21512 - C21511) * C10231 + (C21514 - C21513) * C10229 +
                      (C47108 * C1547 - C21367 * C1544) * C10232 +
                      (C47108 * C1553 - C21367 * C1550) * C47481) *
                         C47479) *
                        C47181 * C47461) *
                       C47455)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  ((((C47108 * C124 - C21367 * C117) * C10231 +
                     (C47108 * C138 - C21367 * C127) * C10229 +
                     (C25975 - C25976) * C10232 + (C25977 - C25978) * C47481) *
                        C15771 +
                    ((C21479 - C21480) * C10231 + (C21481 - C21482) * C10229 +
                     C26465 * C10232 + C26466 * C47481) *
                        C47479) *
                       C47181 * C1010 +
                   (((C21480 - C21479) * C10231 + (C21482 - C21481) * C10229 +
                     C26467 * C10232 + C26468 * C47481) *
                        C15771 +
                    ((C21484 - C21483) * C10231 + (C21486 - C21485) * C10229 +
                     C22322 * C10232 + C22323 * C47481) *
                        C47479) *
                       C47181 * C1011 +
                   ((C21515 * C10231 + C21516 * C10229 +
                     (C21995 - C21994) * C10232 + (C21997 - C21996) * C47481) *
                        C15771 +
                    ((C21488 - C21487) * C10231 + (C21490 - C21489) * C10229 +
                     C22712 * C10232 + C22713 * C47481) *
                        C47479) *
                       C47181 * C1012 +
                   ((C22190 * C10231 + C22191 * C10229 +
                     (C22333 - C22332) * C10232 + (C22335 - C22334) * C47481) *
                        C15771 +
                    ((C22193 - C22192) * C10231 + (C22195 - C22194) * C10229 +
                     (C22714 - C22715) * C10232 + (C22716 - C22717) * C47481) *
                        C47479) *
                       C47181 * C1013 +
                   ((C22202 * C10231 + C22203 * C10229 +
                     (C22715 - C22714) * C10232 + (C22717 - C22716) * C47481) *
                        C15771 +
                    ((C22197 - C22196) * C10231 + (C22199 - C22198) * C10229 +
                     (C47108 * C22708 - C21367 * C22707) * C10232 +
                     (C47108 * C22710 - C21367 * C22709) * C47481) *
                        C47479) *
                       C47181 * C1014) *
                  C47135) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((((C47108 * C124 - C21367 * C117) * C10231 +
                      (C47108 * C138 - C21367 * C127) * C10229 +
                      (C25975 - C25976) * C10232 + (C25977 - C25978) * C47481) *
                         C15771 +
                     ((C21479 - C21480) * C10231 + (C21481 - C21482) * C10229 +
                      C26465 * C10232 + C26466 * C47481) *
                         C47479) *
                        C1664 +
                    (((C25976 - C25975) * C10231 + (C25978 - C25977) * C10229 +
                      (C25979 - C25980) * C10232 + (C25981 - C25982) * C47481) *
                         C15771 +
                     (C26467 * C10231 + C26468 * C10229 + C26851 * C10232 +
                      C26852 * C47481) *
                         C47479) *
                        C1665 +
                    (((C25980 - C25979) * C10231 + (C25982 - C25981) * C10229 +
                      (C47108 * C1850 - C21367 * C1844) * C10232 +
                      (C47108 * C1862 - C21367 * C1853) * C47481) *
                         C15771 +
                     (C26853 * C10231 + C26854 * C10229 +
                      (C23362 - C23361) * C10232 + (C23364 - C23363) * C47481) *
                         C47479) *
                        C47464) *
                       C47163 * C47497 +
                   ((((C21367 * C118 - C47108 * C125) * C10231 +
                      (C21367 * C128 - C47108 * C139) * C10229 +
                      (C25983 - C25984) * C10232 + (C25985 - C25986) * C47481) *
                         C15771 +
                     ((C21491 - C21492) * C10231 + (C21493 - C21494) * C10229 +
                      C26469 * C10232 + C26470 * C47481) *
                         C47479) *
                        C1664 +
                    (((C25984 - C25983) * C10231 + (C25986 - C25985) * C10229 +
                      (C25987 - C25988) * C10232 + (C25989 - C25990) * C47481) *
                         C15771 +
                     (C26471 * C10231 + C26472 * C10229 +
                      (C23154 - C23153) * C10232 + (C23156 - C23155) * C47481) *
                         C47479) *
                        C1665 +
                    (((C25988 - C25987) * C10231 + (C25990 - C25989) * C10229 +
                      (C21367 * C1845 - C47108 * C1851) * C10232 +
                      (C21367 * C1854 - C47108 * C1863) * C47481) *
                         C15771 +
                     ((C23153 - C23154) * C10231 + (C23155 - C23156) * C10229 +
                      (C21367 * C2223 - C47108 * C2226) * C10232 +
                      (C21367 * C2229 - C47108 * C2232) * C47481) *
                         C47479) *
                        C47464) *
                       C47163 * C47484 +
                   ((((C47108 * C126 - C21367 * C119) * C10231 +
                      (C47108 * C140 - C21367 * C129) * C10229 +
                      (C25991 - C25992) * C10232 + (C25993 - C25994) * C47481) *
                         C15771 +
                     ((C21503 - C21504) * C10231 + (C21505 - C21506) * C10229 +
                      C26473 * C10232 + C26474 * C47481) *
                         C47479) *
                        C1664 +
                    (((C25992 - C25991) * C10231 + (C25994 - C25993) * C10229 +
                      (C25995 - C25996) * C10232 + (C25997 - C25998) * C47481) *
                         C15771 +
                     (C26475 * C10231 + C26476 * C10229 +
                      (C25999 - C26000) * C10232 + (C26001 - C26002) * C47481) *
                         C47479) *
                        C1665 +
                    (((C25996 - C25995) * C10231 + (C25998 - C25997) * C10229 +
                      (C47108 * C1852 - C21367 * C1846) * C10232 +
                      (C47108 * C1864 - C21367 * C1855) * C47481) *
                         C15771 +
                     ((C26000 - C25999) * C10231 + (C26002 - C26001) * C10229 +
                      (C47108 * C2227 - C21367 * C2224) * C10232 +
                      (C47108 * C2233 - C21367 * C2230) * C47481) *
                         C47479) *
                        C47464) *
                       C47163 * C47455)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((((C47108 * C124 - C21367 * C117) * C10231 +
                      (C47108 * C138 - C21367 * C127) * C10229 +
                      (C25975 - C25976) * C10232 + (C25977 - C25978) * C47481) *
                         C15771 +
                     ((C21479 - C21480) * C10231 + (C21481 - C21482) * C10229 +
                      C26465 * C10232 + C26466 * C47481) *
                         C47479) *
                        C1664 +
                    (((C25976 - C25975) * C10231 + (C25978 - C25977) * C10229 +
                      (C25979 - C25980) * C10232 + (C25981 - C25982) * C47481) *
                         C15771 +
                     (C26467 * C10231 + C26468 * C10229 + C26851 * C10232 +
                      C26852 * C47481) *
                         C47479) *
                        C1665 +
                    (((C25980 - C25979) * C10231 + (C25982 - C25981) * C10229 +
                      (C47108 * C1850 - C21367 * C1844) * C10232 +
                      (C47108 * C1862 - C21367 * C1853) * C47481) *
                         C15771 +
                     (C26853 * C10231 + C26854 * C10229 +
                      (C23362 - C23361) * C10232 + (C23364 - C23363) * C47481) *
                         C47479) *
                        C47464) *
                       C47500 +
                   ((((C21480 - C21479) * C10231 + (C21482 - C21481) * C10229 +
                      C26467 * C10232 + C26468 * C47481) *
                         C15771 +
                     ((C21484 - C21483) * C10231 + (C21486 - C21485) * C10229 +
                      C22322 * C10232 + C22323 * C47481) *
                         C47479) *
                        C1664 +
                    ((C26465 * C10231 + C26466 * C10229 + C26853 * C10232 +
                      C26854 * C47481) *
                         C15771 +
                     (C26855 * C10231 + C26856 * C10229 + C22342 * C10232 +
                      C22343 * C47481) *
                         C47479) *
                        C1665 +
                    ((C26851 * C10231 + C26852 * C10229 +
                      (C23361 - C23362) * C10232 + (C23363 - C23364) * C47481) *
                         C15771 +
                     (C26857 * C10231 + C26858 * C10229 +
                      (C23365 - C23366) * C10232 + (C23367 - C23368) * C47481) *
                         C47479) *
                        C47464) *
                       C47488 +
                   (((C21515 * C10231 + C21516 * C10229 + C26855 * C10232 +
                      C26856 * C47481) *
                         C15771 +
                     ((C21488 - C21487) * C10231 + (C21490 - C21489) * C10229 +
                      C22712 * C10232 + C22713 * C47481) *
                         C47479) *
                        C1664 +
                    ((C22322 * C10231 + C22323 * C10229 + C26857 * C10232 +
                      C26858 * C47481) *
                         C15771 +
                     (C27315 * C10231 + C27316 * C10229 +
                      (C22336 - C22337) * C10232 + (C22338 - C22339) * C47481) *
                         C47479) *
                        C1665 +
                    ((C22342 * C10231 + C22343 * C10229 +
                      (C23366 - C23365) * C10232 + (C23368 - C23367) * C47481) *
                         C15771 +
                     ((C22337 - C22336) * C10231 + (C22339 - C22338) * C10229 +
                      (C47108 * C23357 - C21367 * C23356) * C10232 +
                      (C47108 * C23359 - C21367 * C23358) * C47481) *
                         C47479) *
                        C47464) *
                       C47461) *
                  C47135) /
                     (p * q * std::sqrt(p + q));
    d2ee[140] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C47108 * C124 - C21367 * C117) * C10231 +
              (C47108 * C138 - C21367 * C127) * C10229 +
              (C25975 - C25976) * C10232 + (C25977 - C25978) * C47481) *
                 C15771 +
             ((C21479 - C21480) * C10231 + (C21481 - C21482) * C10229 +
              C26465 * C10232 + C26466 * C47481) *
                 C47479) *
                C3094 +
            (((C25976 - C25975) * C10231 + (C25978 - C25977) * C10229 +
              (C25979 - C25980) * C10232 + (C25981 - C25982) * C47481) *
                 C15771 +
             (C26467 * C10231 + C26468 * C10229 + C26851 * C10232 +
              C26852 * C47481) *
                 C47479) *
                C47268) *
               C47429 +
           ((((C21480 - C21479) * C10231 + (C21482 - C21481) * C10229 +
              C26467 * C10232 + C26468 * C47481) *
                 C15771 +
             ((C21484 - C21483) * C10231 + (C21486 - C21485) * C10229 +
              C22322 * C10232 + C22323 * C47481) *
                 C47479) *
                C3094 +
            ((C26465 * C10231 + C26466 * C10229 + C26853 * C10232 +
              C26854 * C47481) *
                 C15771 +
             (C26855 * C10231 + C26856 * C10229 + C22342 * C10232 +
              C22343 * C47481) *
                 C47479) *
                C47268) *
               C47226) *
              C47140 +
          (((((C21367 * C118 - C47108 * C125) * C10231 +
              (C21367 * C128 - C47108 * C139) * C10229 +
              (C25983 - C25984) * C10232 + (C25985 - C25986) * C47481) *
                 C15771 +
             ((C21491 - C21492) * C10231 + (C21493 - C21494) * C10229 +
              C26469 * C10232 + C26470 * C47481) *
                 C47479) *
                C3094 +
            (((C25984 - C25983) * C10231 + (C25986 - C25985) * C10229 +
              (C25987 - C25988) * C10232 + (C25989 - C25990) * C47481) *
                 C15771 +
             (C26471 * C10231 + C26472 * C10229 + C27901 * C10232 +
              C27902 * C47481) *
                 C47479) *
                C47268) *
               C47429 +
           ((((C21492 - C21491) * C10231 + (C21494 - C21493) * C10229 +
              C26471 * C10232 + C26472 * C47481) *
                 C15771 +
             ((C21496 - C21495) * C10231 + (C21498 - C21497) * C10229 +
              C22601 * C10232 + C22602 * C47481) *
                 C47479) *
                C3094 +
            ((C26469 * C10231 + C26470 * C10229 + C27903 * C10232 +
              C27904 * C47481) *
                 C15771 +
             (C27183 * C10231 + C27184 * C10229 + (C23157 - C23158) * C10232 +
              (C23159 - C23160) * C47481) *
                 C47479) *
                C47268) *
               C47226) *
              C47149 +
          (((((C47108 * C126 - C21367 * C119) * C10231 +
              (C47108 * C140 - C21367 * C129) * C10229 +
              (C25991 - C25992) * C10232 + (C25993 - C25994) * C47481) *
                 C15771 +
             ((C21503 - C21504) * C10231 + (C21505 - C21506) * C10229 +
              C26473 * C10232 + C26474 * C47481) *
                 C47479) *
                C3094 +
            (((C25992 - C25991) * C10231 + (C25994 - C25993) * C10229 +
              (C25995 - C25996) * C10232 + (C25997 - C25998) * C47481) *
                 C15771 +
             (C26475 * C10231 + C26476 * C10229 + (C25999 - C26000) * C10232 +
              (C26001 - C26002) * C47481) *
                 C47479) *
                C47268) *
               C47429 +
           ((((C21504 - C21503) * C10231 + (C21506 - C21505) * C10229 +
              C26475 * C10232 + C26476 * C47481) *
                 C15771 +
             ((C21508 - C21507) * C10231 + (C21510 - C21509) * C10229 +
              (C22010 - C22011) * C10232 + (C22012 - C22013) * C47481) *
                 C47479) *
                C3094 +
            ((C26473 * C10231 + C26474 * C10229 + (C26000 - C25999) * C10232 +
              (C26002 - C26001) * C47481) *
                 C15771 +
             ((C22011 - C22010) * C10231 + (C22013 - C22012) * C10229 +
              (C47108 * C1173 - C21367 * C1158) * C10232 +
              (C47108 * C1185 - C21367 * C1176) * C47481) *
                 C47479) *
                C47268) *
               C47226) *
              C2703)) /
        (p * q * std::sqrt(p + q));
    d2ee[141] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C47108 * C124 - C21367 * C117) * C10231 +
              (C47108 * C138 - C21367 * C127) * C10229 +
              (C25975 - C25976) * C10232 + (C25977 - C25978) * C47481) *
                 C15771 +
             ((C21479 - C21480) * C10231 + (C21481 - C21482) * C10229 +
              C26465 * C10232 + C26466 * C47481) *
                 C47479) *
                C47264 +
            (((C25976 - C25975) * C10231 + (C25978 - C25977) * C10229 +
              (C25979 - C25980) * C10232 + (C25981 - C25982) * C47481) *
                 C15771 +
             (C26467 * C10231 + C26468 * C10229 + C26851 * C10232 +
              C26852 * C47481) *
                 C47479) *
                C47271 +
            (((C25980 - C25979) * C10231 + (C25982 - C25981) * C10229 +
              (C27695 - C27696) * C10232 + (C27697 - C27698) * C47481) *
                 C15771 +
             (C26853 * C10231 + C26854 * C10229 + C28173 * C10232 +
              C28174 * C47481) *
                 C47479) *
                C3602) *
               C47429 +
           ((((C21480 - C21479) * C10231 + (C21482 - C21481) * C10229 +
              C26467 * C10232 + C26468 * C47481) *
                 C15771 +
             ((C21484 - C21483) * C10231 + (C21486 - C21485) * C10229 +
              C22322 * C10232 + C22323 * C47481) *
                 C47479) *
                C47264 +
            ((C26465 * C10231 + C26466 * C10229 + C26853 * C10232 +
              C26854 * C47481) *
                 C15771 +
             (C26855 * C10231 + C26856 * C10229 + C22342 * C10232 +
              C22343 * C47481) *
                 C47479) *
                C47271 +
            ((C26851 * C10231 + C26852 * C10229 + C28175 * C10232 +
              C28176 * C47481) *
                 C15771 +
             (C26857 * C10231 + C26858 * C10229 + (C23365 - C23366) * C10232 +
              (C23367 - C23368) * C47481) *
                 C47479) *
                C3602) *
               C47226) *
              C2440 +
          (((((C21367 * C118 - C47108 * C125) * C10231 +
              (C21367 * C128 - C47108 * C139) * C10229 +
              (C25983 - C25984) * C10232 + (C25985 - C25986) * C47481) *
                 C15771 +
             ((C21491 - C21492) * C10231 + (C21493 - C21494) * C10229 +
              C26469 * C10232 + C26470 * C47481) *
                 C47479) *
                C47264 +
            (((C25984 - C25983) * C10231 + (C25986 - C25985) * C10229 +
              (C25987 - C25988) * C10232 + (C25989 - C25990) * C47481) *
                 C15771 +
             (C26471 * C10231 + C26472 * C10229 + C27901 * C10232 +
              C27902 * C47481) *
                 C47479) *
                C47271 +
            (((C25988 - C25987) * C10231 + (C25990 - C25989) * C10229 +
              (C28039 - C28040) * C10232 + (C28041 - C28042) * C47481) *
                 C15771 +
             (C27903 * C10231 + C27904 * C10229 + (C27905 - C27906) * C10232 +
              (C27907 - C27908) * C47481) *
                 C47479) *
                C3602) *
               C47429 +
           ((((C21492 - C21491) * C10231 + (C21494 - C21493) * C10229 +
              C26471 * C10232 + C26472 * C47481) *
                 C15771 +
             ((C21496 - C21495) * C10231 + (C21498 - C21497) * C10229 +
              C22601 * C10232 + C22602 * C47481) *
                 C47479) *
                C47264 +
            ((C26469 * C10231 + C26470 * C10229 + C27903 * C10232 +
              C27904 * C47481) *
                 C15771 +
             (C27183 * C10231 + C27184 * C10229 + (C23157 - C23158) * C10232 +
              (C23159 - C23160) * C47481) *
                 C47479) *
                C47271 +
            ((C27901 * C10231 + C27902 * C10229 + (C27906 - C27905) * C10232 +
              (C27908 - C27907) * C47481) *
                 C15771 +
             ((C23158 - C23157) * C10231 + (C23160 - C23159) * C10229 +
              (C47108 * C7170 - C21367 * C7168) * C10232 +
              (C47108 * C7174 - C21367 * C7172) * C47481) *
                 C47479) *
                C3602) *
               C47226) *
              C47146)) /
        (p * q * std::sqrt(p + q));
    d2ee[142] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C47108 * C124 - C21367 * C117) * C10231 +
              (C47108 * C138 - C21367 * C127) * C10229 +
              (C25975 - C25976) * C10232 + (C25977 - C25978) * C47481) *
                 C15771 +
             ((C21479 - C21480) * C10231 + (C21481 - C21482) * C10229 +
              C26465 * C10232 + C26466 * C47481) *
                 C47479) *
                C3094 +
            (((C25976 - C25975) * C10231 + (C25978 - C25977) * C10229 +
              (C25979 - C25980) * C10232 + (C25981 - C25982) * C47481) *
                 C15771 +
             (C26467 * C10231 + C26468 * C10229 + C26851 * C10232 +
              C26852 * C47481) *
                 C47479) *
                C47268) *
               C47500 +
           ((((C21480 - C21479) * C10231 + (C21482 - C21481) * C10229 +
              C26467 * C10232 + C26468 * C47481) *
                 C15771 +
             ((C21484 - C21483) * C10231 + (C21486 - C21485) * C10229 +
              C22322 * C10232 + C22323 * C47481) *
                 C47479) *
                C3094 +
            ((C26465 * C10231 + C26466 * C10229 + C26853 * C10232 +
              C26854 * C47481) *
                 C15771 +
             (C26855 * C10231 + C26856 * C10229 + C22342 * C10232 +
              C22343 * C47481) *
                 C47479) *
                C47268) *
               C47488 +
           (((C21515 * C10231 + C21516 * C10229 + C26855 * C10232 +
              C26856 * C47481) *
                 C15771 +
             ((C21488 - C21487) * C10231 + (C21490 - C21489) * C10229 +
              C22712 * C10232 + C22713 * C47481) *
                 C47479) *
                C3094 +
            ((C22322 * C10231 + C22323 * C10229 + C26857 * C10232 +
              C26858 * C47481) *
                 C15771 +
             (C27315 * C10231 + C27316 * C10229 + (C22336 - C22337) * C10232 +
              (C22338 - C22339) * C47481) *
                 C47479) *
                C47268) *
               C47461) *
              C2440 +
          (((((C21367 * C118 - C47108 * C125) * C10231 +
              (C21367 * C128 - C47108 * C139) * C10229 +
              (C25983 - C25984) * C10232 + (C25985 - C25986) * C47481) *
                 C15771 +
             ((C21491 - C21492) * C10231 + (C21493 - C21494) * C10229 +
              C26469 * C10232 + C26470 * C47481) *
                 C47479) *
                C3094 +
            (((C25984 - C25983) * C10231 + (C25986 - C25985) * C10229 +
              (C25987 - C25988) * C10232 + (C25989 - C25990) * C47481) *
                 C15771 +
             (C26471 * C10231 + C26472 * C10229 + C27901 * C10232 +
              C27902 * C47481) *
                 C47479) *
                C47268) *
               C47500 +
           ((((C21492 - C21491) * C10231 + (C21494 - C21493) * C10229 +
              C26471 * C10232 + C26472 * C47481) *
                 C15771 +
             ((C21496 - C21495) * C10231 + (C21498 - C21497) * C10229 +
              C22601 * C10232 + C22602 * C47481) *
                 C47479) *
                C3094 +
            ((C26469 * C10231 + C26470 * C10229 + C27903 * C10232 +
              C27904 * C47481) *
                 C15771 +
             (C27183 * C10231 + C27184 * C10229 + (C23157 - C23158) * C10232 +
              (C23159 - C23160) * C47481) *
                 C47479) *
                C47268) *
               C47488 +
           (((C21517 * C10231 + C21518 * C10229 + C27183 * C10232 +
              C27184 * C47481) *
                 C15771 +
             ((C21500 - C21499) * C10231 + (C21502 - C21501) * C10229 +
              (C22603 - C22604) * C10232 + (C22605 - C22606) * C47481) *
                 C47479) *
                C3094 +
            ((C22601 * C10231 + C22602 * C10229 + (C23158 - C23157) * C10232 +
              (C23160 - C23159) * C47481) *
                 C15771 +
             ((C22604 - C22603) * C10231 + (C22606 - C22605) * C10229 +
              (C47108 * C5808 - C21367 * C5806) * C10232 +
              (C47108 * C5812 - C21367 * C5810) * C47481) *
                 C47479) *
                C47268) *
               C47461) *
              C47146)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C47108 * C124 - C21367 * C117) * C10231 +
             (C47108 * C138 - C21367 * C127) * C10229 +
             (C25975 - C25976) * C10232 + (C25977 - C25978) * C47481) *
                C15771 +
            ((C21479 - C21480) * C10231 + (C21481 - C21482) * C10229 +
             C26465 * C10232 + C26466 * C47481) *
                C47479) *
               C3094 +
           (((C25976 - C25975) * C10231 + (C25978 - C25977) * C10229 +
             (C25979 - C25980) * C10232 + (C25981 - C25982) * C47481) *
                C15771 +
            (C26467 * C10231 + C26468 * C10229 + C26851 * C10232 +
             C26852 * C47481) *
                C47479) *
               C47268) *
              C47163 * C47506 +
          ((((C21367 * C118 - C47108 * C125) * C10231 +
             (C21367 * C128 - C47108 * C139) * C10229 +
             (C25983 - C25984) * C10232 + (C25985 - C25986) * C47481) *
                C15771 +
            ((C21491 - C21492) * C10231 + (C21493 - C21494) * C10229 +
             C26469 * C10232 + C26470 * C47481) *
                C47479) *
               C3094 +
           (((C25984 - C25983) * C10231 + (C25986 - C25985) * C10229 +
             (C25987 - C25988) * C10232 + (C25989 - C25990) * C47481) *
                C15771 +
            (C26471 * C10231 + C26472 * C10229 + C27901 * C10232 +
             C27902 * C47481) *
                C47479) *
               C47268) *
              C47163 * C47499 +
          ((((C47108 * C126 - C21367 * C119) * C10231 +
             (C47108 * C140 - C21367 * C129) * C10229 +
             (C25991 - C25992) * C10232 + (C25993 - C25994) * C47481) *
                C15771 +
            ((C21503 - C21504) * C10231 + (C21505 - C21506) * C10229 +
             C26473 * C10232 + C26474 * C47481) *
                C47479) *
               C3094 +
           (((C25992 - C25991) * C10231 + (C25994 - C25993) * C10229 +
             (C25995 - C25996) * C10232 + (C25997 - C25998) * C47481) *
                C15771 +
            (C26475 * C10231 + C26476 * C10229 + (C25999 - C26000) * C10232 +
             (C26001 - C26002) * C47481) *
                C47479) *
               C47268) *
              C47163 * C47486 +
          ((((C21367 * C120 - C47108 * C130) * C10231 +
             (C21367 * C131 - C47108 * C141) * C10229 +
             (C26267 - C26268) * C10232 + (C26269 - C26270) * C47481) *
                C15771 +
            ((C21738 - C21739) * C10231 + (C21740 - C21741) * C10229 +
             (C26133 - C26134) * C10232 + (C26135 - C26136) * C47481) *
                C47479) *
               C3094 +
           (((C26268 - C26267) * C10231 + (C26270 - C26269) * C10229 +
             (C47108 * C438 - C21367 * C421) * C10232 +
             (C47108 * C451 - C21367 * C439) * C47481) *
                C15771 +
            ((C26134 - C26133) * C10231 + (C26136 - C26135) * C10229 +
             (C47108 * C2015 - C21367 * C2014) * C10232 +
             (C47108 * C2017 - C21367 * C2016) * C47481) *
                C47479) *
               C47268) *
              C47163 * C47465)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C47108 * C124 - C21367 * C117) * C10231 +
             (C47108 * C138 - C21367 * C127) * C10229 +
             (C25975 - C25976) * C10232 + (C25977 - C25978) * C47481) *
                C15771 +
            ((C21479 - C21480) * C10231 + (C21481 - C21482) * C10229 +
             C26465 * C10232 + C26466 * C47481) *
                C47479) *
               C47508 +
           (((C25976 - C25975) * C10231 + (C25978 - C25977) * C10229 +
             (C25979 - C25980) * C10232 + (C25981 - C25982) * C47481) *
                C15771 +
            (C26467 * C10231 + C26468 * C10229 + C26851 * C10232 +
             C26852 * C47481) *
                C47479) *
               C47505 +
           (((C25980 - C25979) * C10231 + (C25982 - C25981) * C10229 +
             (C27695 - C27696) * C10232 + (C27697 - C27698) * C47481) *
                C15771 +
            (C26853 * C10231 + C26854 * C10229 + C28173 * C10232 +
             C28174 * C47481) *
                C47479) *
               C47496 +
           (((C27696 - C27695) * C10231 + (C27698 - C27697) * C10229 +
             (C27699 - C27700) * C10232 + (C27701 - C27702) * C47481) *
                C15771 +
            (C28175 * C10231 + C28176 * C10229 + (C27703 - C27704) * C10232 +
             (C27705 - C27706) * C47481) *
                C47479) *
               C47477) *
              C47163 * C2440 +
          ((((C21367 * C118 - C47108 * C125) * C10231 +
             (C21367 * C128 - C47108 * C139) * C10229 +
             (C25983 - C25984) * C10232 + (C25985 - C25986) * C47481) *
                C15771 +
            ((C21491 - C21492) * C10231 + (C21493 - C21494) * C10229 +
             C26469 * C10232 + C26470 * C47481) *
                C47479) *
               C47508 +
           (((C25984 - C25983) * C10231 + (C25986 - C25985) * C10229 +
             (C25987 - C25988) * C10232 + (C25989 - C25990) * C47481) *
                C15771 +
            (C26471 * C10231 + C26472 * C10229 + C27901 * C10232 +
             C27902 * C47481) *
                C47479) *
               C47505 +
           (((C25988 - C25987) * C10231 + (C25990 - C25989) * C10229 +
             (C28039 - C28040) * C10232 + (C28041 - C28042) * C47481) *
                C15771 +
            (C27903 * C10231 + C27904 * C10229 + (C27905 - C27906) * C10232 +
             (C27907 - C27908) * C47481) *
                C47479) *
               C47496 +
           (((C28040 - C28039) * C10231 + (C28042 - C28041) * C10229 +
             (C47108 * C1857 - C21367 * C1848) * C10232 +
             (C47108 * C1866 - C21367 * C1860) * C47481) *
                C15771 +
            ((C27906 - C27905) * C10231 + (C27908 - C27907) * C10229 +
             (C47108 * C6700 - C21367 * C6698) * C10232 +
             (C47108 * C6704 - C21367 * C6702) * C47481) *
                C47479) *
               C47477) *
              C47163 * C47146)) /
            (p * q * std::sqrt(p + q));
    d2ee[143] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((((C47108 * C124 - C21367 * C117) * C10231 +
                      (C47108 * C138 - C21367 * C127) * C10229 +
                      (C25975 - C25976) * C10232 + (C25977 - C25978) * C47481) *
                         C15771 +
                     ((C21479 - C21480) * C10231 + (C21481 - C21482) * C10229 +
                      C26465 * C10232 + C26466 * C47481) *
                         C47479) *
                        C47264 +
                    (((C25976 - C25975) * C10231 + (C25978 - C25977) * C10229 +
                      (C25979 - C25980) * C10232 + (C25981 - C25982) * C47481) *
                         C15771 +
                     (C26467 * C10231 + C26468 * C10229 + C26851 * C10232 +
                      C26852 * C47481) *
                         C47479) *
                        C47271 +
                    (((C25980 - C25979) * C10231 + (C25982 - C25981) * C10229 +
                      (C27695 - C27696) * C10232 + (C27697 - C27698) * C47481) *
                         C15771 +
                     (C26853 * C10231 + C26854 * C10229 + C28173 * C10232 +
                      C28174 * C47481) *
                         C47479) *
                        C3602) *
                       C47163 * C47140 +
                   ((((C21367 * C118 - C47108 * C125) * C10231 +
                      (C21367 * C128 - C47108 * C139) * C10229 +
                      (C25983 - C25984) * C10232 + (C25985 - C25986) * C47481) *
                         C15771 +
                     ((C21491 - C21492) * C10231 + (C21493 - C21494) * C10229 +
                      C26469 * C10232 + C26470 * C47481) *
                         C47479) *
                        C47264 +
                    (((C25984 - C25983) * C10231 + (C25986 - C25985) * C10229 +
                      (C25987 - C25988) * C10232 + (C25989 - C25990) * C47481) *
                         C15771 +
                     (C26471 * C10231 + C26472 * C10229 + C27901 * C10232 +
                      C27902 * C47481) *
                         C47479) *
                        C47271 +
                    (((C25988 - C25987) * C10231 + (C25990 - C25989) * C10229 +
                      (C28039 - C28040) * C10232 + (C28041 - C28042) * C47481) *
                         C15771 +
                     (C27903 * C10231 + C27904 * C10229 +
                      (C27905 - C27906) * C10232 + (C27907 - C27908) * C47481) *
                         C47479) *
                        C3602) *
                       C47163 * C47149 +
                   ((((C47108 * C126 - C21367 * C119) * C10231 +
                      (C47108 * C140 - C21367 * C129) * C10229 +
                      (C25991 - C25992) * C10232 + (C25993 - C25994) * C47481) *
                         C15771 +
                     ((C21503 - C21504) * C10231 + (C21505 - C21506) * C10229 +
                      C26473 * C10232 + C26474 * C47481) *
                         C47479) *
                        C47264 +
                    (((C25992 - C25991) * C10231 + (C25994 - C25993) * C10229 +
                      (C25995 - C25996) * C10232 + (C25997 - C25998) * C47481) *
                         C15771 +
                     (C26475 * C10231 + C26476 * C10229 +
                      (C25999 - C26000) * C10232 + (C26001 - C26002) * C47481) *
                         C47479) *
                        C47271 +
                    (((C25996 - C25995) * C10231 + (C25998 - C25997) * C10229 +
                      (C47108 * C1852 - C21367 * C1846) * C10232 +
                      (C47108 * C1864 - C21367 * C1855) * C47481) *
                         C15771 +
                     ((C26000 - C25999) * C10231 + (C26002 - C26001) * C10229 +
                      (C47108 * C2227 - C21367 * C2224) * C10232 +
                      (C47108 * C2233 - C21367 * C2230) * C47481) *
                         C47479) *
                        C3602) *
                       C47163 * C2703)) /
                 (p * q * std::sqrt(p + q));
    d2ee[144] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C47108 * C124 - C21367 * C117) * C10231 +
             (C47108 * C138 - C21367 * C127) * C10229 +
             (C25975 - C25976) * C10232 + (C25977 - C25978) * C47481) *
                C15771 +
            ((C21479 - C21480) * C10231 + (C21481 - C21482) * C10229 +
             C26465 * C10232 + C26466 * C47481) *
                C47479) *
               C3094 +
           (((C25976 - C25975) * C10231 + (C25978 - C25977) * C10229 +
             (C25979 - C25980) * C10232 + (C25981 - C25982) * C47481) *
                C15771 +
            (C26467 * C10231 + C26468 * C10229 + C26851 * C10232 +
             C26852 * C47481) *
                C47479) *
               C47268) *
              C47163 * C47506 +
          ((((C21367 * C118 - C47108 * C125) * C10231 +
             (C21367 * C128 - C47108 * C139) * C10229 +
             (C25983 - C25984) * C10232 + (C25985 - C25986) * C47481) *
                C15771 +
            ((C21491 - C21492) * C10231 + (C21493 - C21494) * C10229 +
             C26469 * C10232 + C26470 * C47481) *
                C47479) *
               C3094 +
           (((C25984 - C25983) * C10231 + (C25986 - C25985) * C10229 +
             (C25987 - C25988) * C10232 + (C25989 - C25990) * C47481) *
                C15771 +
            (C26471 * C10231 + C26472 * C10229 + C27901 * C10232 +
             C27902 * C47481) *
                C47479) *
               C47268) *
              C47163 * C47499 +
          ((((C47108 * C126 - C21367 * C119) * C10231 +
             (C47108 * C140 - C21367 * C129) * C10229 +
             (C25991 - C25992) * C10232 + (C25993 - C25994) * C47481) *
                C15771 +
            ((C21503 - C21504) * C10231 + (C21505 - C21506) * C10229 +
             C26473 * C10232 + C26474 * C47481) *
                C47479) *
               C3094 +
           (((C25992 - C25991) * C10231 + (C25994 - C25993) * C10229 +
             (C25995 - C25996) * C10232 + (C25997 - C25998) * C47481) *
                C15771 +
            (C26475 * C10231 + C26476 * C10229 + (C25999 - C26000) * C10232 +
             (C26001 - C26002) * C47481) *
                C47479) *
               C47268) *
              C47163 * C47486 +
          ((((C21367 * C120 - C47108 * C130) * C10231 +
             (C21367 * C131 - C47108 * C141) * C10229 +
             (C26267 - C26268) * C10232 + (C26269 - C26270) * C47481) *
                C15771 +
            ((C21738 - C21739) * C10231 + (C21740 - C21741) * C10229 +
             (C26133 - C26134) * C10232 + (C26135 - C26136) * C47481) *
                C47479) *
               C3094 +
           (((C26268 - C26267) * C10231 + (C26270 - C26269) * C10229 +
             (C47108 * C438 - C21367 * C421) * C10232 +
             (C47108 * C451 - C21367 * C439) * C47481) *
                C15771 +
            ((C26134 - C26133) * C10231 + (C26136 - C26135) * C10229 +
             (C47108 * C2015 - C21367 * C2014) * C10232 +
             (C47108 * C2017 - C21367 * C2016) * C47481) *
                C47479) *
               C47268) *
              C47163 * C47465)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C47108 * C124 - C21367 * C117) * C10231 +
              (C47108 * C138 - C21367 * C127) * C10229 +
              (C25975 - C25976) * C10232 + (C25977 - C25978) * C47481) *
                 C15771 +
             ((C21479 - C21480) * C10231 + (C21481 - C21482) * C10229 +
              C26465 * C10232 + C26466 * C47481) *
                 C47479) *
                C3094 +
            (((C25976 - C25975) * C10231 + (C25978 - C25977) * C10229 +
              (C25979 - C25980) * C10232 + (C25981 - C25982) * C47481) *
                 C15771 +
             (C26467 * C10231 + C26468 * C10229 + C26851 * C10232 +
              C26852 * C47481) *
                 C47479) *
                C47268) *
               C47500 +
           ((((C21480 - C21479) * C10231 + (C21482 - C21481) * C10229 +
              C26467 * C10232 + C26468 * C47481) *
                 C15771 +
             ((C21484 - C21483) * C10231 + (C21486 - C21485) * C10229 +
              C22322 * C10232 + C22323 * C47481) *
                 C47479) *
                C3094 +
            ((C26465 * C10231 + C26466 * C10229 + C26853 * C10232 +
              C26854 * C47481) *
                 C15771 +
             (C26855 * C10231 + C26856 * C10229 + C22342 * C10232 +
              C22343 * C47481) *
                 C47479) *
                C47268) *
               C47488 +
           (((C21515 * C10231 + C21516 * C10229 + C26855 * C10232 +
              C26856 * C47481) *
                 C15771 +
             ((C21488 - C21487) * C10231 + (C21490 - C21489) * C10229 +
              C22712 * C10232 + C22713 * C47481) *
                 C47479) *
                C3094 +
            ((C22322 * C10231 + C22323 * C10229 + C26857 * C10232 +
              C26858 * C47481) *
                 C15771 +
             (C27315 * C10231 + C27316 * C10229 + (C22336 - C22337) * C10232 +
              (C22338 - C22339) * C47481) *
                 C47479) *
                C47268) *
               C47461) *
              C2440 +
          (((((C21367 * C118 - C47108 * C125) * C10231 +
              (C21367 * C128 - C47108 * C139) * C10229 +
              (C25983 - C25984) * C10232 + (C25985 - C25986) * C47481) *
                 C15771 +
             ((C21491 - C21492) * C10231 + (C21493 - C21494) * C10229 +
              C26469 * C10232 + C26470 * C47481) *
                 C47479) *
                C3094 +
            (((C25984 - C25983) * C10231 + (C25986 - C25985) * C10229 +
              (C25987 - C25988) * C10232 + (C25989 - C25990) * C47481) *
                 C15771 +
             (C26471 * C10231 + C26472 * C10229 + C27901 * C10232 +
              C27902 * C47481) *
                 C47479) *
                C47268) *
               C47500 +
           ((((C21492 - C21491) * C10231 + (C21494 - C21493) * C10229 +
              C26471 * C10232 + C26472 * C47481) *
                 C15771 +
             ((C21496 - C21495) * C10231 + (C21498 - C21497) * C10229 +
              C22601 * C10232 + C22602 * C47481) *
                 C47479) *
                C3094 +
            ((C26469 * C10231 + C26470 * C10229 + C27903 * C10232 +
              C27904 * C47481) *
                 C15771 +
             (C27183 * C10231 + C27184 * C10229 + (C23157 - C23158) * C10232 +
              (C23159 - C23160) * C47481) *
                 C47479) *
                C47268) *
               C47488 +
           (((C21517 * C10231 + C21518 * C10229 + C27183 * C10232 +
              C27184 * C47481) *
                 C15771 +
             ((C21500 - C21499) * C10231 + (C21502 - C21501) * C10229 +
              (C22603 - C22604) * C10232 + (C22605 - C22606) * C47481) *
                 C47479) *
                C3094 +
            ((C22601 * C10231 + C22602 * C10229 + (C23158 - C23157) * C10232 +
              (C23160 - C23159) * C47481) *
                 C15771 +
             ((C22604 - C22603) * C10231 + (C22606 - C22605) * C10229 +
              (C47108 * C5808 - C21367 * C5806) * C10232 +
              (C47108 * C5812 - C21367 * C5810) * C47481) *
                 C47479) *
                C47268) *
               C47461) *
              C47146)) /
            (p * q * std::sqrt(p + q));
    d2ee[145] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((((C47108 * C124 - C21367 * C117) * C10231 +
                      (C47108 * C138 - C21367 * C127) * C10229 +
                      (C25975 - C25976) * C10232 + (C25977 - C25978) * C47481) *
                         C15771 +
                     ((C21479 - C21480) * C10231 + (C21481 - C21482) * C10229 +
                      (C21991 - C21990) * C10232 + (C21993 - C21992) * C47481) *
                         C47479) *
                        C47181 * C47429 +
                    (((C21480 - C21479) * C10231 + (C21482 - C21481) * C10229 +
                      (C21990 - C21991) * C10232 + (C21992 - C21993) * C47481) *
                         C15771 +
                     ((C21484 - C21483) * C10231 + (C21486 - C21485) * C10229 +
                      C22322 * C10232 + C22323 * C47481) *
                         C47479) *
                        C47181 * C47226) *
                       C554 +
                   ((((C21367 * C118 - C47108 * C125) * C10231 +
                      (C21367 * C128 - C47108 * C139) * C10229 +
                      (C25983 - C25984) * C10232 + (C25985 - C25986) * C47481) *
                         C15771 +
                     ((C21491 - C21492) * C10231 + (C21493 - C21494) * C10229 +
                      (C21999 - C21998) * C10232 + (C22001 - C22000) * C47481) *
                         C47479) *
                        C47181 * C47429 +
                    (((C21492 - C21491) * C10231 + (C21494 - C21493) * C10229 +
                      (C21998 - C21999) * C10232 + (C22000 - C22001) * C47481) *
                         C15771 +
                     ((C21496 - C21495) * C10231 + (C21498 - C21497) * C10229 +
                      C22601 * C10232 + C22602 * C47481) *
                         C47479) *
                        C47181 * C47226) *
                       C555 +
                   ((((C47108 * C126 - C21367 * C119) * C10231 +
                      (C47108 * C140 - C21367 * C129) * C10229 +
                      (C25991 - C25992) * C10232 + (C25993 - C25994) * C47481) *
                         C15771 +
                     ((C21503 - C21504) * C10231 + (C21505 - C21506) * C10229 +
                      (C22007 - C22006) * C10232 + (C22009 - C22008) * C47481) *
                         C47479) *
                        C47181 * C47429 +
                    (((C21504 - C21503) * C10231 + (C21506 - C21505) * C10229 +
                      (C22006 - C22007) * C10232 + (C22008 - C22009) * C47481) *
                         C15771 +
                     ((C21508 - C21507) * C10231 + (C21510 - C21509) * C10229 +
                      (C22010 - C22011) * C10232 + (C22012 - C22013) * C47481) *
                         C47479) *
                        C47181 * C47226) *
                       C556 +
                   ((((C21367 * C120 - C47108 * C130) * C10231 +
                      (C21367 * C131 - C47108 * C141) * C10229 +
                      (C21367 * C420 - C47108 * C436) * C10232 +
                      (C21367 * C437 - C47108 * C450) * C47481) *
                         C15771 +
                     ((C21738 - C21739) * C10231 + (C21740 - C21741) * C10229 +
                      (C26133 - C26134) * C10232 + (C26135 - C26136) * C47481) *
                         C47479) *
                        C47181 * C47429 +
                    (((C21739 - C21738) * C10231 + (C21741 - C21740) * C10229 +
                      (C26134 - C26133) * C10232 + (C26136 - C26135) * C47481) *
                         C15771 +
                     ((C21743 - C21742) * C10231 + (C21745 - C21744) * C10229 +
                      (C47108 * C1441 - C21367 * C1440) * C10232 +
                      (C47108 * C1443 - C21367 * C1442) * C47481) *
                         C47479) *
                        C47181 * C47226) *
                       C47465)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((((C47108 * C124 - C21367 * C117) * C10231 +
                      (C47108 * C138 - C21367 * C127) * C10229 +
                      (C25975 - C25976) * C10232 + (C25977 - C25978) * C47481) *
                         C15771 +
                     ((C21479 - C21480) * C10231 + (C21481 - C21482) * C10229 +
                      C26465 * C10232 + C26466 * C47481) *
                         C47479) *
                        C47181 * C1284 +
                    (((C21480 - C21479) * C10231 + (C21482 - C21481) * C10229 +
                      C26467 * C10232 + C26468 * C47481) *
                         C15771 +
                     ((C21484 - C21483) * C10231 + (C21486 - C21485) * C10229 +
                      C22322 * C10232 + C22323 * C47481) *
                         C47479) *
                        C47181 * C1285 +
                    ((C21515 * C10231 + C21516 * C10229 + C26855 * C10232 +
                      C26856 * C47481) *
                         C15771 +
                     ((C21488 - C21487) * C10231 + (C21490 - C21489) * C10229 +
                      C22712 * C10232 + C22713 * C47481) *
                         C47479) *
                        C47181 * C1286 +
                    ((C22190 * C10231 + C22191 * C10229 +
                      (C22333 - C22332) * C10232 + (C22335 - C22334) * C47481) *
                         C15771 +
                     ((C22193 - C22192) * C10231 + (C22195 - C22194) * C10229 +
                      (C22714 - C22715) * C10232 + (C22716 - C22717) * C47481) *
                         C47479) *
                        C47181 * C47471) *
                       C47415 +
                   ((((C21367 * C118 - C47108 * C125) * C10231 +
                      (C21367 * C128 - C47108 * C139) * C10229 +
                      (C25983 - C25984) * C10232 + (C25985 - C25986) * C47481) *
                         C15771 +
                     ((C21491 - C21492) * C10231 + (C21493 - C21494) * C10229 +
                      C26469 * C10232 + C26470 * C47481) *
                         C47479) *
                        C47181 * C1284 +
                    (((C21492 - C21491) * C10231 + (C21494 - C21493) * C10229 +
                      C26471 * C10232 + C26472 * C47481) *
                         C15771 +
                     ((C21496 - C21495) * C10231 + (C21498 - C21497) * C10229 +
                      C22601 * C10232 + C22602 * C47481) *
                         C47479) *
                        C47181 * C1285 +
                    ((C21517 * C10231 + C21518 * C10229 +
                      (C22003 - C22002) * C10232 + (C22005 - C22004) * C47481) *
                         C15771 +
                     ((C21500 - C21499) * C10231 + (C21502 - C21501) * C10229 +
                      (C22603 - C22604) * C10232 + (C22605 - C22606) * C47481) *
                         C47479) *
                        C47181 * C1286 +
                    ((C22446 * C10231 + C22447 * C10229 +
                      (C22604 - C22603) * C10232 + (C22606 - C22605) * C47481) *
                         C15771 +
                     ((C22449 - C22448) * C10231 + (C22451 - C22450) * C10229 +
                      (C47108 * C6310 - C21367 * C6308) * C10232 +
                      (C47108 * C6314 - C21367 * C6312) * C47481) *
                         C47479) *
                        C47181 * C47471) *
                       C47146)) /
                     (p * q * std::sqrt(p + q));
    d2ee[146] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C47108 * C124 - C21367 * C117) * C10231 +
              (C47108 * C138 - C21367 * C127) * C10229 +
              (C25975 - C25976) * C10232 + (C25977 - C25978) * C47481) *
                 C15771 +
             ((C21479 - C21480) * C10231 + (C21481 - C21482) * C10229 +
              C26465 * C10232 + C26466 * C47481) *
                 C47479) *
                C47430 +
            (((C25976 - C25975) * C10231 + (C25978 - C25977) * C10229 +
              (C25979 - C25980) * C10232 + (C25981 - C25982) * C47481) *
                 C15771 +
             (C26467 * C10231 + C26468 * C10229 + (C22325 - C22324) * C10232 +
              (C22327 - C22326) * C47481) *
                 C47479) *
                C47268) *
               C47429 +
           ((((C21480 - C21479) * C10231 + (C21482 - C21481) * C10229 +
              C26467 * C10232 + C26468 * C47481) *
                 C15771 +
             ((C21484 - C21483) * C10231 + (C21486 - C21485) * C10229 +
              C22322 * C10232 + C22323 * C47481) *
                 C47479) *
                C47430 +
            ((C26465 * C10231 + C26466 * C10229 + (C22324 - C22325) * C10232 +
              (C22326 - C22327) * C47481) *
                 C15771 +
             ((C21995 - C21994) * C10231 + (C21997 - C21996) * C10229 +
              C22342 * C10232 + C22343 * C47481) *
                 C47479) *
                C47268) *
               C47226) *
              C258 +
          (((((C21367 * C118 - C47108 * C125) * C10231 +
              (C21367 * C128 - C47108 * C139) * C10229 +
              (C25983 - C25984) * C10232 + (C25985 - C25986) * C47481) *
                 C15771 +
             ((C21491 - C21492) * C10231 + (C21493 - C21494) * C10229 +
              C26469 * C10232 + C26470 * C47481) *
                 C47479) *
                C47430 +
            (((C25984 - C25983) * C10231 + (C25986 - C25985) * C10229 +
              (C25987 - C25988) * C10232 + (C25989 - C25990) * C47481) *
                 C15771 +
             (C26471 * C10231 + C26472 * C10229 + (C23154 - C23153) * C10232 +
              (C23156 - C23155) * C47481) *
                 C47479) *
                C47268) *
               C47429 +
           ((((C21492 - C21491) * C10231 + (C21494 - C21493) * C10229 +
              C26471 * C10232 + C26472 * C47481) *
                 C15771 +
             ((C21496 - C21495) * C10231 + (C21498 - C21497) * C10229 +
              C22601 * C10232 + C22602 * C47481) *
                 C47479) *
                C47430 +
            ((C26469 * C10231 + C26470 * C10229 + (C23153 - C23154) * C10232 +
              (C23155 - C23156) * C47481) *
                 C15771 +
             ((C22003 - C22002) * C10231 + (C22005 - C22004) * C10229 +
              (C23157 - C23158) * C10232 + (C23159 - C23160) * C47481) *
                 C47479) *
                C47268) *
               C47226) *
              C259 +
          (((((C47108 * C126 - C21367 * C119) * C10231 +
              (C47108 * C140 - C21367 * C129) * C10229 +
              (C25991 - C25992) * C10232 + (C25993 - C25994) * C47481) *
                 C15771 +
             ((C21503 - C21504) * C10231 + (C21505 - C21506) * C10229 +
              C26473 * C10232 + C26474 * C47481) *
                 C47479) *
                C47430 +
            (((C25992 - C25991) * C10231 + (C25994 - C25993) * C10229 +
              (C25995 - C25996) * C10232 + (C25997 - C25998) * C47481) *
                 C15771 +
             (C26475 * C10231 + C26476 * C10229 + (C25999 - C26000) * C10232 +
              (C26001 - C26002) * C47481) *
                 C47479) *
                C47268) *
               C47429 +
           ((((C21504 - C21503) * C10231 + (C21506 - C21505) * C10229 +
              C26475 * C10232 + C26476 * C47481) *
                 C15771 +
             ((C21508 - C21507) * C10231 + (C21510 - C21509) * C10229 +
              (C22010 - C22011) * C10232 + (C22012 - C22013) * C47481) *
                 C47479) *
                C47430 +
            ((C26473 * C10231 + C26474 * C10229 + (C26000 - C25999) * C10232 +
              (C26002 - C26001) * C47481) *
                 C15771 +
             ((C22011 - C22010) * C10231 + (C22013 - C22012) * C10229 +
              (C47108 * C1173 - C21367 * C1158) * C10232 +
              (C47108 * C1185 - C21367 * C1176) * C47481) *
                 C47479) *
                C47268) *
               C47226) *
              C47455)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C47108 * C124 - C21367 * C117) * C10231 +
             (C47108 * C138 - C21367 * C127) * C10229 +
             (C25975 - C25976) * C10232 + (C25977 - C25978) * C47481) *
                C15771 +
            ((C21479 - C21480) * C10231 + (C21481 - C21482) * C10229 +
             C26465 * C10232 + C26466 * C47481) *
                C47479) *
               C47430 +
           (((C25976 - C25975) * C10231 + (C25978 - C25977) * C10229 +
             (C25979 - C25980) * C10232 + (C25981 - C25982) * C47481) *
                C15771 +
            (C26467 * C10231 + C26468 * C10229 + C26851 * C10232 +
             C26852 * C47481) *
                C47479) *
               C47268) *
              C1284 +
          ((((C21480 - C21479) * C10231 + (C21482 - C21481) * C10229 +
             C26467 * C10232 + C26468 * C47481) *
                C15771 +
            ((C21484 - C21483) * C10231 + (C21486 - C21485) * C10229 +
             C22322 * C10232 + C22323 * C47481) *
                C47479) *
               C47430 +
           ((C26465 * C10231 + C26466 * C10229 + C26853 * C10232 +
             C26854 * C47481) *
                C15771 +
            (C26855 * C10231 + C26856 * C10229 + C22342 * C10232 +
             C22343 * C47481) *
                C47479) *
               C47268) *
              C1285 +
          (((C21515 * C10231 + C21516 * C10229 + C26855 * C10232 +
             C26856 * C47481) *
                C15771 +
            ((C21488 - C21487) * C10231 + (C21490 - C21489) * C10229 +
             C22712 * C10232 + C22713 * C47481) *
                C47479) *
               C47430 +
           ((C22322 * C10231 + C22323 * C10229 + C26857 * C10232 +
             C26858 * C47481) *
                C15771 +
            (C27315 * C10231 + C27316 * C10229 + (C22336 - C22337) * C10232 +
             (C22338 - C22339) * C47481) *
                C47479) *
               C47268) *
              C1286 +
          (((C22190 * C10231 + C22191 * C10229 + C27315 * C10232 +
             C27316 * C47481) *
                C15771 +
            ((C22193 - C22192) * C10231 + (C22195 - C22194) * C10229 +
             (C22714 - C22715) * C10232 + (C22716 - C22717) * C47481) *
                C47479) *
               C47430 +
           ((C22712 * C10231 + C22713 * C10229 + (C22337 - C22336) * C10232 +
             (C22339 - C22338) * C47481) *
                C15771 +
            ((C22715 - C22714) * C10231 + (C22717 - C22716) * C10229 +
             (C47108 * C22318 - C21367 * C22317) * C10232 +
             (C47108 * C22320 - C21367 * C22319) * C47481) *
                C47479) *
               C47268) *
              C47471) *
         C47135) /
            (p * q * std::sqrt(p + q));
    d2ee[147] += (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  (((((C47108 * C124 - C21367 * C117) * C10231 +
                      (C47108 * C138 - C21367 * C127) * C10229 +
                      (C47108 * C424 - C21367 * C414) * C10232 +
                      (C47108 * C444 - C21367 * C427) * C47481) *
                         C15771 +
                     ((C21479 - C21480) * C10231 + (C21481 - C21482) * C10229 +
                      (C21991 - C21990) * C10232 + (C21993 - C21992) * C47481) *
                         C47479) *
                        C47181 * C47500 +
                    (((C21480 - C21479) * C10231 + (C21482 - C21481) * C10229 +
                      (C21990 - C21991) * C10232 + (C21992 - C21993) * C47481) *
                         C15771 +
                     ((C21484 - C21483) * C10231 + (C21486 - C21485) * C10229 +
                      C22322 * C10232 + C22323 * C47481) *
                         C47479) *
                        C47181 * C47488 +
                    ((C21515 * C10231 + C21516 * C10229 +
                      (C21995 - C21994) * C10232 + (C21997 - C21996) * C47481) *
                         C15771 +
                     ((C21488 - C21487) * C10231 + (C21490 - C21489) * C10229 +
                      C22712 * C10232 + C22713 * C47481) *
                         C47479) *
                        C47181 * C47461) *
                       C258 +
                   ((((C21367 * C118 - C47108 * C125) * C10231 +
                      (C21367 * C128 - C47108 * C139) * C10229 +
                      (C21367 * C415 - C47108 * C425) * C10232 +
                      (C21367 * C428 - C47108 * C445) * C47481) *
                         C15771 +
                     ((C21491 - C21492) * C10231 + (C21493 - C21494) * C10229 +
                      (C21999 - C21998) * C10232 + (C22001 - C22000) * C47481) *
                         C47479) *
                        C47181 * C47500 +
                    (((C21492 - C21491) * C10231 + (C21494 - C21493) * C10229 +
                      (C21998 - C21999) * C10232 + (C22000 - C22001) * C47481) *
                         C15771 +
                     ((C21496 - C21495) * C10231 + (C21498 - C21497) * C10229 +
                      C22601 * C10232 + C22602 * C47481) *
                         C47479) *
                        C47181 * C47488 +
                    ((C21517 * C10231 + C21518 * C10229 +
                      (C22003 - C22002) * C10232 + (C22005 - C22004) * C47481) *
                         C15771 +
                     ((C21500 - C21499) * C10231 + (C21502 - C21501) * C10229 +
                      (C22603 - C22604) * C10232 + (C22605 - C22606) * C47481) *
                         C47479) *
                        C47181 * C47461) *
                       C259 +
                   ((((C47108 * C126 - C21367 * C119) * C10231 +
                      (C47108 * C140 - C21367 * C129) * C10229 +
                      (C47108 * C426 - C21367 * C416) * C10232 +
                      (C47108 * C446 - C21367 * C429) * C47481) *
                         C15771 +
                     ((C21503 - C21504) * C10231 + (C21505 - C21506) * C10229 +
                      (C22007 - C22006) * C10232 + (C22009 - C22008) * C47481) *
                         C47479) *
                        C47181 * C47500 +
                    (((C21504 - C21503) * C10231 + (C21506 - C21505) * C10229 +
                      (C22006 - C22007) * C10232 + (C22008 - C22009) * C47481) *
                         C15771 +
                     ((C21508 - C21507) * C10231 + (C21510 - C21509) * C10229 +
                      (C22010 - C22011) * C10232 + (C22012 - C22013) * C47481) *
                         C47479) *
                        C47181 * C47488 +
                    ((C21519 * C10231 + C21520 * C10229 +
                      (C22011 - C22010) * C10232 + (C22013 - C22012) * C47481) *
                         C15771 +
                     ((C21512 - C21511) * C10231 + (C21514 - C21513) * C10229 +
                      (C47108 * C1547 - C21367 * C1544) * C10232 +
                      (C47108 * C1553 - C21367 * C1550) * C47481) *
                         C47479) *
                        C47181 * C47461) *
                       C47455)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  ((((C47108 * C124 - C21367 * C117) * C10231 +
                     (C47108 * C138 - C21367 * C127) * C10229 +
                     (C47108 * C424 - C21367 * C414) * C10232 +
                     (C47108 * C444 - C21367 * C427) * C47481) *
                        C15771 +
                    ((C21479 - C21480) * C10231 + (C21481 - C21482) * C10229 +
                     (C21991 - C21990) * C10232 + (C21993 - C21992) * C47481) *
                        C47479) *
                       C47181 * C47163 * C108 +
                   (((C21367 * C118 - C47108 * C125) * C10231 +
                     (C21367 * C128 - C47108 * C139) * C10229 +
                     (C21367 * C415 - C47108 * C425) * C10232 +
                     (C21367 * C428 - C47108 * C445) * C47481) *
                        C15771 +
                    ((C21491 - C21492) * C10231 + (C21493 - C21494) * C10229 +
                     (C21999 - C21998) * C10232 + (C22001 - C22000) * C47481) *
                        C47479) *
                       C47181 * C47163 * C109 +
                   (((C47108 * C126 - C21367 * C119) * C10231 +
                     (C47108 * C140 - C21367 * C129) * C10229 +
                     (C47108 * C426 - C21367 * C416) * C10232 +
                     (C47108 * C446 - C21367 * C429) * C47481) *
                        C15771 +
                    ((C21503 - C21504) * C10231 + (C21505 - C21506) * C10229 +
                     (C22007 - C22006) * C10232 + (C22009 - C22008) * C47481) *
                        C47479) *
                       C47181 * C47163 * C110 +
                   (((C21367 * C120 - C47108 * C130) * C10231 +
                     (C21367 * C131 - C47108 * C141) * C10229 +
                     (C21367 * C420 - C47108 * C436) * C10232 +
                     (C21367 * C437 - C47108 * C450) * C47481) *
                        C15771 +
                    ((C21738 - C21739) * C10231 + (C21740 - C21741) * C10229 +
                     (C21367 * C815 - C47108 * C823) * C10232 +
                     (C21367 * C824 - C47108 * C830) * C47481) *
                        C47479) *
                       C47181 * C47163 * C111 +
                   (((C47108 * C132 - C21367 * C121) * C10231 +
                     (C47108 * C142 - C21367 * C133) * C10229 +
                     (C47108 * C440 - C21367 * C422) * C10232 +
                     (C47108 * C452 - C21367 * C441) * C47481) *
                        C15771 +
                    ((C47108 * C287 - C21367 * C269) * C10231 +
                     (C47108 * C299 - C21367 * C288) * C10229 +
                     (C47108 * C825 - C21367 * C816) * C10232 +
                     (C47108 * C831 - C21367 * C826) * C47481) *
                        C47479) *
                       C47181 * C47163 * C112)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((((C47108 * C124 - C21367 * C117) * C10231 +
                      (C47108 * C138 - C21367 * C127) * C10229 +
                      (C25975 - C25976) * C10232 + (C25977 - C25978) * C47481) *
                         C15771 +
                     ((C21479 - C21480) * C10231 + (C21481 - C21482) * C10229 +
                      (C21991 - C21990) * C10232 + (C21993 - C21992) * C47481) *
                         C47479) *
                        C47501 +
                    (((C25976 - C25975) * C10231 + (C25978 - C25977) * C10229 +
                      (C25979 - C25980) * C10232 + (C25981 - C25982) * C47481) *
                         C15771 +
                     ((C21990 - C21991) * C10231 + (C21992 - C21993) * C10229 +
                      (C22325 - C22324) * C10232 + (C22327 - C22326) * C47481) *
                         C47479) *
                        C47490 +
                    (((C25980 - C25979) * C10231 + (C25982 - C25981) * C10229 +
                      (C47108 * C1850 - C21367 * C1844) * C10232 +
                      (C47108 * C1862 - C21367 * C1853) * C47481) *
                         C15771 +
                     ((C22324 - C22325) * C10231 + (C22326 - C22327) * C10229 +
                      (C23362 - C23361) * C10232 + (C23364 - C23363) * C47481) *
                         C47479) *
                        C47464) *
                       C47163 * C258 +
                   ((((C21367 * C118 - C47108 * C125) * C10231 +
                      (C21367 * C128 - C47108 * C139) * C10229 +
                      (C25983 - C25984) * C10232 + (C25985 - C25986) * C47481) *
                         C15771 +
                     ((C21491 - C21492) * C10231 + (C21493 - C21494) * C10229 +
                      (C21999 - C21998) * C10232 + (C22001 - C22000) * C47481) *
                         C47479) *
                        C47501 +
                    (((C25984 - C25983) * C10231 + (C25986 - C25985) * C10229 +
                      (C25987 - C25988) * C10232 + (C25989 - C25990) * C47481) *
                         C15771 +
                     ((C21998 - C21999) * C10231 + (C22000 - C22001) * C10229 +
                      (C23154 - C23153) * C10232 + (C23156 - C23155) * C47481) *
                         C47479) *
                        C47490 +
                    (((C25988 - C25987) * C10231 + (C25990 - C25989) * C10229 +
                      (C21367 * C1845 - C47108 * C1851) * C10232 +
                      (C21367 * C1854 - C47108 * C1863) * C47481) *
                         C15771 +
                     ((C23153 - C23154) * C10231 + (C23155 - C23156) * C10229 +
                      (C21367 * C2223 - C47108 * C2226) * C10232 +
                      (C21367 * C2229 - C47108 * C2232) * C47481) *
                         C47479) *
                        C47464) *
                       C47163 * C259 +
                   ((((C47108 * C126 - C21367 * C119) * C10231 +
                      (C47108 * C140 - C21367 * C129) * C10229 +
                      (C25991 - C25992) * C10232 + (C25993 - C25994) * C47481) *
                         C15771 +
                     ((C21503 - C21504) * C10231 + (C21505 - C21506) * C10229 +
                      (C22007 - C22006) * C10232 + (C22009 - C22008) * C47481) *
                         C47479) *
                        C47501 +
                    (((C25992 - C25991) * C10231 + (C25994 - C25993) * C10229 +
                      (C25995 - C25996) * C10232 + (C25997 - C25998) * C47481) *
                         C15771 +
                     ((C22006 - C22007) * C10231 + (C22008 - C22009) * C10229 +
                      (C25999 - C26000) * C10232 + (C26001 - C26002) * C47481) *
                         C47479) *
                        C47490 +
                    (((C25996 - C25995) * C10231 + (C25998 - C25997) * C10229 +
                      (C47108 * C1852 - C21367 * C1846) * C10232 +
                      (C47108 * C1864 - C21367 * C1855) * C47481) *
                         C15771 +
                     ((C26000 - C25999) * C10231 + (C26002 - C26001) * C10229 +
                      (C47108 * C2227 - C21367 * C2224) * C10232 +
                      (C47108 * C2233 - C21367 * C2230) * C47481) *
                         C47479) *
                        C47464) *
                       C47163 * C47455)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  (((((C47108 * C124 - C21367 * C117) * C10231 +
                      (C47108 * C138 - C21367 * C127) * C10229 +
                      (C25975 - C25976) * C10232 + (C25977 - C25978) * C47481) *
                         C15771 +
                     ((C21479 - C21480) * C10231 + (C21481 - C21482) * C10229 +
                      C26465 * C10232 + C26466 * C47481) *
                         C47479) *
                        C47181 * C942 +
                    (((C21480 - C21479) * C10231 + (C21482 - C21481) * C10229 +
                      C26467 * C10232 + C26468 * C47481) *
                         C15771 +
                     ((C21484 - C21483) * C10231 + (C21486 - C21485) * C10229 +
                      C22322 * C10232 + C22323 * C47481) *
                         C47479) *
                        C47181 * C943 +
                    ((C21515 * C10231 + C21516 * C10229 +
                      (C21995 - C21994) * C10232 + (C21997 - C21996) * C47481) *
                         C15771 +
                     ((C21488 - C21487) * C10231 + (C21490 - C21489) * C10229 +
                      C22712 * C10232 + C22713 * C47481) *
                         C47479) *
                        C47181 * C47461) *
                       C47497 +
                   ((((C21367 * C118 - C47108 * C125) * C10231 +
                      (C21367 * C128 - C47108 * C139) * C10229 +
                      (C25983 - C25984) * C10232 + (C25985 - C25986) * C47481) *
                         C15771 +
                     ((C21491 - C21492) * C10231 + (C21493 - C21494) * C10229 +
                      C26469 * C10232 + C26470 * C47481) *
                         C47479) *
                        C47181 * C942 +
                    (((C21492 - C21491) * C10231 + (C21494 - C21493) * C10229 +
                      C26471 * C10232 + C26472 * C47481) *
                         C15771 +
                     ((C21496 - C21495) * C10231 + (C21498 - C21497) * C10229 +
                      C22601 * C10232 + C22602 * C47481) *
                         C47479) *
                        C47181 * C943 +
                    ((C21517 * C10231 + C21518 * C10229 +
                      (C22003 - C22002) * C10232 + (C22005 - C22004) * C47481) *
                         C15771 +
                     ((C21500 - C21499) * C10231 + (C21502 - C21501) * C10229 +
                      (C22603 - C22604) * C10232 + (C22605 - C22606) * C47481) *
                         C47479) *
                        C47181 * C47461) *
                       C47484 +
                   ((((C47108 * C126 - C21367 * C119) * C10231 +
                      (C47108 * C140 - C21367 * C129) * C10229 +
                      (C25991 - C25992) * C10232 + (C25993 - C25994) * C47481) *
                         C15771 +
                     ((C21503 - C21504) * C10231 + (C21505 - C21506) * C10229 +
                      C26473 * C10232 + C26474 * C47481) *
                         C47479) *
                        C47181 * C942 +
                    (((C21504 - C21503) * C10231 + (C21506 - C21505) * C10229 +
                      C26475 * C10232 + C26476 * C47481) *
                         C15771 +
                     ((C21508 - C21507) * C10231 + (C21510 - C21509) * C10229 +
                      (C22010 - C22011) * C10232 + (C22012 - C22013) * C47481) *
                         C47479) *
                        C47181 * C943 +
                    ((C21519 * C10231 + C21520 * C10229 +
                      (C22011 - C22010) * C10232 + (C22013 - C22012) * C47481) *
                         C15771 +
                     ((C21512 - C21511) * C10231 + (C21514 - C21513) * C10229 +
                      (C47108 * C1547 - C21367 * C1544) * C10232 +
                      (C47108 * C1553 - C21367 * C1550) * C47481) *
                         C47479) *
                        C47181 * C47461) *
                       C47455)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  ((((C47108 * C124 - C21367 * C117) * C10231 +
                     (C47108 * C138 - C21367 * C127) * C10229 +
                     (C25975 - C25976) * C10232 + (C25977 - C25978) * C47481) *
                        C15771 +
                    ((C21479 - C21480) * C10231 + (C21481 - C21482) * C10229 +
                     C26465 * C10232 + C26466 * C47481) *
                        C47479) *
                       C47181 * C1010 +
                   (((C21480 - C21479) * C10231 + (C21482 - C21481) * C10229 +
                     C26467 * C10232 + C26468 * C47481) *
                        C15771 +
                    ((C21484 - C21483) * C10231 + (C21486 - C21485) * C10229 +
                     C22322 * C10232 + C22323 * C47481) *
                        C47479) *
                       C47181 * C1011 +
                   ((C21515 * C10231 + C21516 * C10229 +
                     (C21995 - C21994) * C10232 + (C21997 - C21996) * C47481) *
                        C15771 +
                    ((C21488 - C21487) * C10231 + (C21490 - C21489) * C10229 +
                     C22712 * C10232 + C22713 * C47481) *
                        C47479) *
                       C47181 * C1012 +
                   ((C22190 * C10231 + C22191 * C10229 +
                     (C22333 - C22332) * C10232 + (C22335 - C22334) * C47481) *
                        C15771 +
                    ((C22193 - C22192) * C10231 + (C22195 - C22194) * C10229 +
                     (C22714 - C22715) * C10232 + (C22716 - C22717) * C47481) *
                        C47479) *
                       C47181 * C1013 +
                   ((C22202 * C10231 + C22203 * C10229 +
                     (C22715 - C22714) * C10232 + (C22717 - C22716) * C47481) *
                        C15771 +
                    ((C22197 - C22196) * C10231 + (C22199 - C22198) * C10229 +
                     (C47108 * C22708 - C21367 * C22707) * C10232 +
                     (C47108 * C22710 - C21367 * C22709) * C47481) *
                        C47479) *
                       C47181 * C1014) *
                  C47135) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((((C47108 * C124 - C21367 * C117) * C10231 +
                      (C47108 * C138 - C21367 * C127) * C10229 +
                      (C25975 - C25976) * C10232 + (C25977 - C25978) * C47481) *
                         C15771 +
                     ((C21479 - C21480) * C10231 + (C21481 - C21482) * C10229 +
                      C26465 * C10232 + C26466 * C47481) *
                         C47479) *
                        C47501 +
                    (((C25976 - C25975) * C10231 + (C25978 - C25977) * C10229 +
                      (C25979 - C25980) * C10232 + (C25981 - C25982) * C47481) *
                         C15771 +
                     (C26467 * C10231 + C26468 * C10229 + C26851 * C10232 +
                      C26852 * C47481) *
                         C47479) *
                        C47490 +
                    (((C25980 - C25979) * C10231 + (C25982 - C25981) * C10229 +
                      (C47108 * C1850 - C21367 * C1844) * C10232 +
                      (C47108 * C1862 - C21367 * C1853) * C47481) *
                         C15771 +
                     (C26853 * C10231 + C26854 * C10229 +
                      (C23362 - C23361) * C10232 + (C23364 - C23363) * C47481) *
                         C47479) *
                        C47464) *
                       C942 +
                   ((((C21480 - C21479) * C10231 + (C21482 - C21481) * C10229 +
                      C26467 * C10232 + C26468 * C47481) *
                         C15771 +
                     ((C21484 - C21483) * C10231 + (C21486 - C21485) * C10229 +
                      C22322 * C10232 + C22323 * C47481) *
                         C47479) *
                        C47501 +
                    ((C26465 * C10231 + C26466 * C10229 + C26853 * C10232 +
                      C26854 * C47481) *
                         C15771 +
                     (C26855 * C10231 + C26856 * C10229 + C22342 * C10232 +
                      C22343 * C47481) *
                         C47479) *
                        C47490 +
                    ((C26851 * C10231 + C26852 * C10229 +
                      (C23361 - C23362) * C10232 + (C23363 - C23364) * C47481) *
                         C15771 +
                     (C26857 * C10231 + C26858 * C10229 +
                      (C23365 - C23366) * C10232 + (C23367 - C23368) * C47481) *
                         C47479) *
                        C47464) *
                       C943 +
                   (((C21515 * C10231 + C21516 * C10229 + C26855 * C10232 +
                      C26856 * C47481) *
                         C15771 +
                     ((C21488 - C21487) * C10231 + (C21490 - C21489) * C10229 +
                      C22712 * C10232 + C22713 * C47481) *
                         C47479) *
                        C47501 +
                    ((C22322 * C10231 + C22323 * C10229 + C26857 * C10232 +
                      C26858 * C47481) *
                         C15771 +
                     ((C22333 - C22332) * C10231 + (C22335 - C22334) * C10229 +
                      (C22336 - C22337) * C10232 + (C22338 - C22339) * C47481) *
                         C47479) *
                        C47490 +
                    ((C22342 * C10231 + C22343 * C10229 +
                      (C23366 - C23365) * C10232 + (C23368 - C23367) * C47481) *
                         C15771 +
                     ((C22337 - C22336) * C10231 + (C22339 - C22338) * C10229 +
                      (C47108 * C23357 - C21367 * C23356) * C10232 +
                      (C47108 * C23359 - C21367 * C23358) * C47481) *
                         C47479) *
                        C47464) *
                       C47461) *
                  C47135) /
                     (p * q * std::sqrt(p + q));
    d2ee[148] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C47108 * C124 - C21367 * C117) * C10231 +
             (C47108 * C138 - C21367 * C127) * C10229 +
             (C25975 - C25976) * C10232 + (C25977 - C25978) * C47481) *
                C15771 +
            ((C21479 - C21480) * C10231 + (C21481 - C21482) * C10229 +
             (C21991 - C21990) * C10232 + (C21993 - C21992) * C47481) *
                C47479) *
               C47430 +
           (((C25976 - C25975) * C10231 + (C25978 - C25977) * C10229 +
             (C25979 - C25980) * C10232 + (C25981 - C25982) * C47481) *
                C15771 +
            ((C21990 - C21991) * C10231 + (C21992 - C21993) * C10229 +
             (C22325 - C22324) * C10232 + (C22327 - C22326) * C47481) *
                C47479) *
               C47268) *
              C47163 * C554 +
          ((((C21367 * C118 - C47108 * C125) * C10231 +
             (C21367 * C128 - C47108 * C139) * C10229 +
             (C25983 - C25984) * C10232 + (C25985 - C25986) * C47481) *
                C15771 +
            ((C21491 - C21492) * C10231 + (C21493 - C21494) * C10229 +
             (C21999 - C21998) * C10232 + (C22001 - C22000) * C47481) *
                C47479) *
               C47430 +
           (((C25984 - C25983) * C10231 + (C25986 - C25985) * C10229 +
             (C25987 - C25988) * C10232 + (C25989 - C25990) * C47481) *
                C15771 +
            ((C21998 - C21999) * C10231 + (C22000 - C22001) * C10229 +
             (C23154 - C23153) * C10232 + (C23156 - C23155) * C47481) *
                C47479) *
               C47268) *
              C47163 * C555 +
          ((((C47108 * C126 - C21367 * C119) * C10231 +
             (C47108 * C140 - C21367 * C129) * C10229 +
             (C25991 - C25992) * C10232 + (C25993 - C25994) * C47481) *
                C15771 +
            ((C21503 - C21504) * C10231 + (C21505 - C21506) * C10229 +
             (C22007 - C22006) * C10232 + (C22009 - C22008) * C47481) *
                C47479) *
               C47430 +
           (((C25992 - C25991) * C10231 + (C25994 - C25993) * C10229 +
             (C25995 - C25996) * C10232 + (C25997 - C25998) * C47481) *
                C15771 +
            ((C22006 - C22007) * C10231 + (C22008 - C22009) * C10229 +
             (C25999 - C26000) * C10232 + (C26001 - C26002) * C47481) *
                C47479) *
               C47268) *
              C47163 * C556 +
          ((((C21367 * C120 - C47108 * C130) * C10231 +
             (C21367 * C131 - C47108 * C141) * C10229 +
             (C26267 - C26268) * C10232 + (C26269 - C26270) * C47481) *
                C15771 +
            ((C21738 - C21739) * C10231 + (C21740 - C21741) * C10229 +
             (C26133 - C26134) * C10232 + (C26135 - C26136) * C47481) *
                C47479) *
               C47430 +
           (((C26268 - C26267) * C10231 + (C26270 - C26269) * C10229 +
             (C47108 * C438 - C21367 * C421) * C10232 +
             (C47108 * C451 - C21367 * C439) * C47481) *
                C15771 +
            ((C26134 - C26133) * C10231 + (C26136 - C26135) * C10229 +
             (C47108 * C2015 - C21367 * C2014) * C10232 +
             (C47108 * C2017 - C21367 * C2016) * C47481) *
                C47479) *
               C47268) *
              C47163 * C47465)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C47108 * C124 - C21367 * C117) * C10231 +
              (C47108 * C138 - C21367 * C127) * C10229 +
              (C25975 - C25976) * C10232 + (C25977 - C25978) * C47481) *
                 C15771 +
             ((C21479 - C21480) * C10231 + (C21481 - C21482) * C10229 +
              C26465 * C10232 + C26466 * C47481) *
                 C47479) *
                C47430 +
            (((C25976 - C25975) * C10231 + (C25978 - C25977) * C10229 +
              (C25979 - C25980) * C10232 + (C25981 - C25982) * C47481) *
                 C15771 +
             (C26467 * C10231 + C26468 * C10229 + C26851 * C10232 +
              C26852 * C47481) *
                 C47479) *
                C47268) *
               C942 +
           ((((C21480 - C21479) * C10231 + (C21482 - C21481) * C10229 +
              C26467 * C10232 + C26468 * C47481) *
                 C15771 +
             ((C21484 - C21483) * C10231 + (C21486 - C21485) * C10229 +
              C22322 * C10232 + C22323 * C47481) *
                 C47479) *
                C47430 +
            ((C26465 * C10231 + C26466 * C10229 + C26853 * C10232 +
              C26854 * C47481) *
                 C15771 +
             (C26855 * C10231 + C26856 * C10229 + C22342 * C10232 +
              C22343 * C47481) *
                 C47479) *
                C47268) *
               C943 +
           (((C21515 * C10231 + C21516 * C10229 + C26855 * C10232 +
              C26856 * C47481) *
                 C15771 +
             ((C21488 - C21487) * C10231 + (C21490 - C21489) * C10229 +
              C22712 * C10232 + C22713 * C47481) *
                 C47479) *
                C47430 +
            ((C22322 * C10231 + C22323 * C10229 + C26857 * C10232 +
              C26858 * C47481) *
                 C15771 +
             ((C22333 - C22332) * C10231 + (C22335 - C22334) * C10229 +
              (C22336 - C22337) * C10232 + (C22338 - C22339) * C47481) *
                 C47479) *
                C47268) *
               C47461) *
              C47415 +
          (((((C21367 * C118 - C47108 * C125) * C10231 +
              (C21367 * C128 - C47108 * C139) * C10229 +
              (C25983 - C25984) * C10232 + (C25985 - C25986) * C47481) *
                 C15771 +
             ((C21491 - C21492) * C10231 + (C21493 - C21494) * C10229 +
              C26469 * C10232 + C26470 * C47481) *
                 C47479) *
                C47430 +
            (((C25984 - C25983) * C10231 + (C25986 - C25985) * C10229 +
              (C25987 - C25988) * C10232 + (C25989 - C25990) * C47481) *
                 C15771 +
             (C26471 * C10231 + C26472 * C10229 + (C23154 - C23153) * C10232 +
              (C23156 - C23155) * C47481) *
                 C47479) *
                C47268) *
               C942 +
           ((((C21492 - C21491) * C10231 + (C21494 - C21493) * C10229 +
              C26471 * C10232 + C26472 * C47481) *
                 C15771 +
             ((C21496 - C21495) * C10231 + (C21498 - C21497) * C10229 +
              C22601 * C10232 + C22602 * C47481) *
                 C47479) *
                C47430 +
            ((C26469 * C10231 + C26470 * C10229 + (C23153 - C23154) * C10232 +
              (C23155 - C23156) * C47481) *
                 C15771 +
             (C27183 * C10231 + C27184 * C10229 + (C23157 - C23158) * C10232 +
              (C23159 - C23160) * C47481) *
                 C47479) *
                C47268) *
               C943 +
           (((C21517 * C10231 + C21518 * C10229 + C27183 * C10232 +
              C27184 * C47481) *
                 C15771 +
             ((C21500 - C21499) * C10231 + (C21502 - C21501) * C10229 +
              (C22603 - C22604) * C10232 + (C22605 - C22606) * C47481) *
                 C47479) *
                C47430 +
            ((C22601 * C10231 + C22602 * C10229 + (C23158 - C23157) * C10232 +
              (C23160 - C23159) * C47481) *
                 C15771 +
             ((C22604 - C22603) * C10231 + (C22606 - C22605) * C10229 +
              (C47108 * C5808 - C21367 * C5806) * C10232 +
              (C47108 * C5812 - C21367 * C5810) * C47481) *
                 C47479) *
                C47268) *
               C47461) *
              C47146)) /
            (p * q * std::sqrt(p + q));
    d2ee[149] += (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  ((((C47108 * C124 - C21367 * C117) * C10231 +
                     (C47108 * C138 - C21367 * C127) * C10229 +
                     (C47108 * C424 - C21367 * C414) * C10232 +
                     (C47108 * C444 - C21367 * C427) * C47481) *
                        C15771 +
                    ((C21479 - C21480) * C10231 + (C21481 - C21482) * C10229 +
                     (C21991 - C21990) * C10232 + (C21993 - C21992) * C47481) *
                        C47479) *
                       C47181 * C47163 * C108 +
                   (((C21367 * C118 - C47108 * C125) * C10231 +
                     (C21367 * C128 - C47108 * C139) * C10229 +
                     (C21367 * C415 - C47108 * C425) * C10232 +
                     (C21367 * C428 - C47108 * C445) * C47481) *
                        C15771 +
                    ((C21491 - C21492) * C10231 + (C21493 - C21494) * C10229 +
                     (C21999 - C21998) * C10232 + (C22001 - C22000) * C47481) *
                        C47479) *
                       C47181 * C47163 * C109 +
                   (((C47108 * C126 - C21367 * C119) * C10231 +
                     (C47108 * C140 - C21367 * C129) * C10229 +
                     (C47108 * C426 - C21367 * C416) * C10232 +
                     (C47108 * C446 - C21367 * C429) * C47481) *
                        C15771 +
                    ((C21503 - C21504) * C10231 + (C21505 - C21506) * C10229 +
                     (C22007 - C22006) * C10232 + (C22009 - C22008) * C47481) *
                        C47479) *
                       C47181 * C47163 * C110 +
                   (((C21367 * C120 - C47108 * C130) * C10231 +
                     (C21367 * C131 - C47108 * C141) * C10229 +
                     (C21367 * C420 - C47108 * C436) * C10232 +
                     (C21367 * C437 - C47108 * C450) * C47481) *
                        C15771 +
                    ((C21738 - C21739) * C10231 + (C21740 - C21741) * C10229 +
                     (C21367 * C815 - C47108 * C823) * C10232 +
                     (C21367 * C824 - C47108 * C830) * C47481) *
                        C47479) *
                       C47181 * C47163 * C111 +
                   (((C47108 * C132 - C21367 * C121) * C10231 +
                     (C47108 * C142 - C21367 * C133) * C10229 +
                     (C47108 * C440 - C21367 * C422) * C10232 +
                     (C47108 * C452 - C21367 * C441) * C47481) *
                        C15771 +
                    ((C47108 * C287 - C21367 * C269) * C10231 +
                     (C47108 * C299 - C21367 * C288) * C10229 +
                     (C47108 * C825 - C21367 * C816) * C10232 +
                     (C47108 * C831 - C21367 * C826) * C47481) *
                        C47479) *
                       C47181 * C47163 * C112)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  (((((C47108 * C124 - C21367 * C117) * C10231 +
                      (C47108 * C138 - C21367 * C127) * C10229 +
                      (C47108 * C424 - C21367 * C414) * C10232 +
                      (C47108 * C444 - C21367 * C427) * C47481) *
                         C15771 +
                     ((C21479 - C21480) * C10231 + (C21481 - C21482) * C10229 +
                      (C21991 - C21990) * C10232 + (C21993 - C21992) * C47481) *
                         C47479) *
                        C47181 * C47500 +
                    (((C21480 - C21479) * C10231 + (C21482 - C21481) * C10229 +
                      (C21990 - C21991) * C10232 + (C21992 - C21993) * C47481) *
                         C15771 +
                     ((C21484 - C21483) * C10231 + (C21486 - C21485) * C10229 +
                      C22322 * C10232 + C22323 * C47481) *
                         C47479) *
                        C47181 * C47488 +
                    ((C21515 * C10231 + C21516 * C10229 +
                      (C21995 - C21994) * C10232 + (C21997 - C21996) * C47481) *
                         C15771 +
                     ((C21488 - C21487) * C10231 + (C21490 - C21489) * C10229 +
                      C22712 * C10232 + C22713 * C47481) *
                         C47479) *
                        C47181 * C47461) *
                       C258 +
                   ((((C21367 * C118 - C47108 * C125) * C10231 +
                      (C21367 * C128 - C47108 * C139) * C10229 +
                      (C21367 * C415 - C47108 * C425) * C10232 +
                      (C21367 * C428 - C47108 * C445) * C47481) *
                         C15771 +
                     ((C21491 - C21492) * C10231 + (C21493 - C21494) * C10229 +
                      (C21999 - C21998) * C10232 + (C22001 - C22000) * C47481) *
                         C47479) *
                        C47181 * C47500 +
                    (((C21492 - C21491) * C10231 + (C21494 - C21493) * C10229 +
                      (C21998 - C21999) * C10232 + (C22000 - C22001) * C47481) *
                         C15771 +
                     ((C21496 - C21495) * C10231 + (C21498 - C21497) * C10229 +
                      C22601 * C10232 + C22602 * C47481) *
                         C47479) *
                        C47181 * C47488 +
                    ((C21517 * C10231 + C21518 * C10229 +
                      (C22003 - C22002) * C10232 + (C22005 - C22004) * C47481) *
                         C15771 +
                     ((C21500 - C21499) * C10231 + (C21502 - C21501) * C10229 +
                      (C22603 - C22604) * C10232 + (C22605 - C22606) * C47481) *
                         C47479) *
                        C47181 * C47461) *
                       C259 +
                   ((((C47108 * C126 - C21367 * C119) * C10231 +
                      (C47108 * C140 - C21367 * C129) * C10229 +
                      (C47108 * C426 - C21367 * C416) * C10232 +
                      (C47108 * C446 - C21367 * C429) * C47481) *
                         C15771 +
                     ((C21503 - C21504) * C10231 + (C21505 - C21506) * C10229 +
                      (C22007 - C22006) * C10232 + (C22009 - C22008) * C47481) *
                         C47479) *
                        C47181 * C47500 +
                    (((C21504 - C21503) * C10231 + (C21506 - C21505) * C10229 +
                      (C22006 - C22007) * C10232 + (C22008 - C22009) * C47481) *
                         C15771 +
                     ((C21508 - C21507) * C10231 + (C21510 - C21509) * C10229 +
                      (C22010 - C22011) * C10232 + (C22012 - C22013) * C47481) *
                         C47479) *
                        C47181 * C47488 +
                    ((C21519 * C10231 + C21520 * C10229 +
                      (C22011 - C22010) * C10232 + (C22013 - C22012) * C47481) *
                         C15771 +
                     ((C21512 - C21511) * C10231 + (C21514 - C21513) * C10229 +
                      (C47108 * C1547 - C21367 * C1544) * C10232 +
                      (C47108 * C1553 - C21367 * C1550) * C47481) *
                         C47479) *
                        C47181 * C47461) *
                       C47455)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  (((((C47108 * C124 - C21367 * C117) * C10231 +
                      (C47108 * C138 - C21367 * C127) * C10229 +
                      (C25975 - C25976) * C10232 + (C25977 - C25978) * C47481) *
                         C15771 +
                     ((C21479 - C21480) * C10231 + (C21481 - C21482) * C10229 +
                      C26465 * C10232 + C26466 * C47481) *
                         C47479) *
                        C47181 * C942 +
                    (((C21480 - C21479) * C10231 + (C21482 - C21481) * C10229 +
                      C26467 * C10232 + C26468 * C47481) *
                         C15771 +
                     ((C21484 - C21483) * C10231 + (C21486 - C21485) * C10229 +
                      C22322 * C10232 + C22323 * C47481) *
                         C47479) *
                        C47181 * C943 +
                    ((C21515 * C10231 + C21516 * C10229 +
                      (C21995 - C21994) * C10232 + (C21997 - C21996) * C47481) *
                         C15771 +
                     ((C21488 - C21487) * C10231 + (C21490 - C21489) * C10229 +
                      C22712 * C10232 + C22713 * C47481) *
                         C47479) *
                        C47181 * C47461) *
                       C47497 +
                   ((((C21367 * C118 - C47108 * C125) * C10231 +
                      (C21367 * C128 - C47108 * C139) * C10229 +
                      (C25983 - C25984) * C10232 + (C25985 - C25986) * C47481) *
                         C15771 +
                     ((C21491 - C21492) * C10231 + (C21493 - C21494) * C10229 +
                      C26469 * C10232 + C26470 * C47481) *
                         C47479) *
                        C47181 * C942 +
                    (((C21492 - C21491) * C10231 + (C21494 - C21493) * C10229 +
                      C26471 * C10232 + C26472 * C47481) *
                         C15771 +
                     ((C21496 - C21495) * C10231 + (C21498 - C21497) * C10229 +
                      C22601 * C10232 + C22602 * C47481) *
                         C47479) *
                        C47181 * C943 +
                    ((C21517 * C10231 + C21518 * C10229 +
                      (C22003 - C22002) * C10232 + (C22005 - C22004) * C47481) *
                         C15771 +
                     ((C21500 - C21499) * C10231 + (C21502 - C21501) * C10229 +
                      (C22603 - C22604) * C10232 + (C22605 - C22606) * C47481) *
                         C47479) *
                        C47181 * C47461) *
                       C47484 +
                   ((((C47108 * C126 - C21367 * C119) * C10231 +
                      (C47108 * C140 - C21367 * C129) * C10229 +
                      (C25991 - C25992) * C10232 + (C25993 - C25994) * C47481) *
                         C15771 +
                     ((C21503 - C21504) * C10231 + (C21505 - C21506) * C10229 +
                      C26473 * C10232 + C26474 * C47481) *
                         C47479) *
                        C47181 * C942 +
                    (((C21504 - C21503) * C10231 + (C21506 - C21505) * C10229 +
                      C26475 * C10232 + C26476 * C47481) *
                         C15771 +
                     ((C21508 - C21507) * C10231 + (C21510 - C21509) * C10229 +
                      (C22010 - C22011) * C10232 + (C22012 - C22013) * C47481) *
                         C47479) *
                        C47181 * C943 +
                    ((C21519 * C10231 + C21520 * C10229 +
                      (C22011 - C22010) * C10232 + (C22013 - C22012) * C47481) *
                         C15771 +
                     ((C21512 - C21511) * C10231 + (C21514 - C21513) * C10229 +
                      (C47108 * C1547 - C21367 * C1544) * C10232 +
                      (C47108 * C1553 - C21367 * C1550) * C47481) *
                         C47479) *
                        C47181 * C47461) *
                       C47455)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  ((((C47108 * C124 - C21367 * C117) * C10231 +
                     (C47108 * C138 - C21367 * C127) * C10229 +
                     (C25975 - C25976) * C10232 + (C25977 - C25978) * C47481) *
                        C15771 +
                    ((C21479 - C21480) * C10231 + (C21481 - C21482) * C10229 +
                     C26465 * C10232 + C26466 * C47481) *
                        C47479) *
                       C47181 * C1010 +
                   (((C21480 - C21479) * C10231 + (C21482 - C21481) * C10229 +
                     C26467 * C10232 + C26468 * C47481) *
                        C15771 +
                    ((C21484 - C21483) * C10231 + (C21486 - C21485) * C10229 +
                     C22322 * C10232 + C22323 * C47481) *
                        C47479) *
                       C47181 * C1011 +
                   ((C21515 * C10231 + C21516 * C10229 +
                     (C21995 - C21994) * C10232 + (C21997 - C21996) * C47481) *
                        C15771 +
                    ((C21488 - C21487) * C10231 + (C21490 - C21489) * C10229 +
                     C22712 * C10232 + C22713 * C47481) *
                        C47479) *
                       C47181 * C1012 +
                   ((C22190 * C10231 + C22191 * C10229 +
                     (C22333 - C22332) * C10232 + (C22335 - C22334) * C47481) *
                        C15771 +
                    ((C22193 - C22192) * C10231 + (C22195 - C22194) * C10229 +
                     (C22714 - C22715) * C10232 + (C22716 - C22717) * C47481) *
                        C47479) *
                       C47181 * C1013 +
                   ((C22202 * C10231 + C22203 * C10229 +
                     (C22715 - C22714) * C10232 + (C22717 - C22716) * C47481) *
                        C15771 +
                    ((C22197 - C22196) * C10231 + (C22199 - C22198) * C10229 +
                     (C47108 * C22708 - C21367 * C22707) * C10232 +
                     (C47108 * C22710 - C21367 * C22709) * C47481) *
                        C47479) *
                       C47181 * C1014) *
                  C47135) /
                     (p * q * std::sqrt(p + q));
    d2ee[150] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C15769 * C124 - C15773 * C117 + C47448 * C125 - C15774 * C118) *
                C31224 +
            (C15769 * C138 - C15773 * C127 + C47448 * C139 - C15774 * C128) *
                C31222 +
            (C31519 - C31520 + C31521 - C31522) * C31225 +
            (C31523 - C31524 + C31525 - C31526) * C47481) *
               C47369 * C47181 * C47222 +
           ((C15923 - C15922 + C15925 - C15924) * C31224 +
            (C15927 - C15926 + C15929 - C15928) * C31222 +
            (C16578 - C16579 + C16580 - C16581) * C31225 +
            (C16582 - C16583 + C16584 - C16585) * C47481) *
               C47369 * C47181 * C47229 +
           ((C15931 - C15930 + C15933 - C15932) * C31224 +
            (C15935 - C15934 + C15937 - C15936) * C31222 +
            (C17000 - C17001 + C17002 - C17003) * C31225 +
            (C17004 - C17005 + C17006 - C17007) * C47481) *
               C47369 * C47181 * C2700) *
              C47140 +
          (((C15773 * C118 - C15769 * C125 + C15774 * C119 - C47448 * C126) *
                C31224 +
            (C15773 * C128 - C15769 * C139 + C15774 * C129 - C47448 * C140) *
                C31222 +
            (C31535 - C31536 + C31537 - C31538) * C31225 +
            (C31539 - C31540 + C31541 - C31542) * C47481) *
               C47369 * C47181 * C47222 +
           ((C15939 - C15938 + C15941 - C15940) * C31224 +
            (C15943 - C15942 + C15945 - C15944) * C31222 +
            (C16586 - C16587 + C16588 - C16589) * C31225 +
            (C16590 - C16591 + C16592 - C16593) * C47481) *
               C47369 * C47181 * C47229 +
           ((C15947 - C15946 + C15949 - C15948) * C31224 +
            (C15951 - C15950 + C15953 - C15952) * C31222 +
            (C17348 - C17349 + C17350 - C17351) * C31225 +
            (C17352 - C17353 + C17354 - C17355) * C47481) *
               C47369 * C47181 * C2700) *
              C47149 +
          (((C15769 * C126 - C15773 * C119 + C47448 * C130 - C15774 * C120) *
                C31224 +
            (C15769 * C140 - C15773 * C129 + C47448 * C141 - C15774 * C131) *
                C31222 +
            (C31551 - C31552 + C31553 - C31554) * C31225 +
            (C31555 - C31556 + C31557 - C31558) * C47481) *
               C47369 * C47181 * C47222 +
           ((C15955 - C15954 + C15957 - C15956) * C31224 +
            (C15959 - C15958 + C15961 - C15960) * C31222 +
            (C16594 - C16595 + C16596 - C16597) * C31225 +
            (C16598 - C16599 + C16600 - C16601) * C47481) *
               C47369 * C47181 * C47229 +
           ((C15963 - C15962 + C15965 - C15964) * C31224 +
            (C15967 - C15966 + C15969 - C15968) * C31222 +
            (C15769 * C1167 - C15773 * C1155 + C47448 * C1441 -
             C15774 * C1440) *
                C31225 +
            (C15769 * C1182 - C15773 * C1170 + C47448 * C1443 -
             C15774 * C1442) *
                C47481) *
               C47369 * C47181 * C2700) *
              C2703)) /
        (p * q * std::sqrt(p + q));
    d2ee[151] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C15769 * C124 - C15773 * C117 + C47448 * C125 - C15774 * C118) *
                 C31224 +
             (C15769 * C138 - C15773 * C127 + C47448 * C139 - C15774 * C128) *
                 C31222 +
             (C31519 - C31520 + C31521 - C31522) * C31225 +
             (C31523 - C31524 + C31525 - C31526) * C47481) *
                C47369 * C47430 +
            ((C31520 - C31519 + C31522 - C31521) * C31224 +
             (C31524 - C31523 + C31526 - C31525) * C31222 +
             (C31527 - C31528 + C31529 - C31530) * C31225 +
             (C31531 - C31532 + C31533 - C31534) * C47481) *
                C47369 * C47268) *
               C47222 +
           (((C15923 - C15922 + C15925 - C15924) * C31224 +
             (C15927 - C15926 + C15929 - C15928) * C31222 +
             (C16578 - C16579 + C16580 - C16581) * C31225 +
             (C16582 - C16583 + C16584 - C16585) * C47481) *
                C47369 * C47430 +
            ((C16579 - C16578 + C16581 - C16580) * C31224 +
             (C16583 - C16582 + C16585 - C16584) * C31222 +
             (C16992 - C16993 + C16994 - C16995) * C31225 +
             (C16996 - C16997 + C16998 - C16999) * C47481) *
                C47369 * C47268) *
               C47229 +
           (((C15931 - C15930 + C15933 - C15932) * C31224 +
             (C15935 - C15934 + C15937 - C15936) * C31222 +
             (C17000 - C17001 + C17002 - C17003) * C31225 +
             (C17004 - C17005 + C17006 - C17007) * C47481) *
                C47369 * C47430 +
            ((C17001 - C17000 + C17003 - C17002) * C31224 +
             (C17005 - C17004 + C17007 - C17006) * C31222 +
             (C17008 - C17009 + C17010 - C17011) * C31225 +
             (C17012 - C17013 + C17014 - C17015) * C47481) *
                C47369 * C47268) *
               C2700) *
              C2440 +
          ((((C15773 * C118 - C15769 * C125 + C15774 * C119 - C47448 * C126) *
                 C31224 +
             (C15773 * C128 - C15769 * C139 + C15774 * C129 - C47448 * C140) *
                 C31222 +
             (C31535 - C31536 + C31537 - C31538) * C31225 +
             (C31539 - C31540 + C31541 - C31542) * C47481) *
                C47369 * C47430 +
            ((C31536 - C31535 + C31538 - C31537) * C31224 +
             (C31540 - C31539 + C31542 - C31541) * C31222 +
             (C31543 - C31544 + C31545 - C31546) * C31225 +
             (C31547 - C31548 + C31549 - C31550) * C47481) *
                C47369 * C47268) *
               C47222 +
           (((C15939 - C15938 + C15941 - C15940) * C31224 +
             (C15943 - C15942 + C15945 - C15944) * C31222 +
             (C16586 - C16587 + C16588 - C16589) * C31225 +
             (C16590 - C16591 + C16592 - C16593) * C47481) *
                C47369 * C47430 +
            ((C16587 - C16586 + C16589 - C16588) * C31224 +
             (C16591 - C16590 + C16593 - C16592) * C31222 +
             (C18062 - C18063 + C18064 - C18065) * C31225 +
             (C18066 - C18067 + C18068 - C18069) * C47481) *
                C47369 * C47268) *
               C47229 +
           (((C15947 - C15946 + C15949 - C15948) * C31224 +
             (C15951 - C15950 + C15953 - C15952) * C31222 +
             (C17348 - C17349 + C17350 - C17351) * C31225 +
             (C17352 - C17353 + C17354 - C17355) * C47481) *
                C47369 * C47430 +
            ((C17349 - C17348 + C17351 - C17350) * C31224 +
             (C17353 - C17352 + C17355 - C17354) * C31222 +
             (C15769 * C1172 - C15773 * C1157 + C47448 * C1173 -
              C15774 * C1158) *
                 C31225 +
             (C15769 * C1184 - C15773 * C1175 + C47448 * C1185 -
              C15774 * C1176) *
                 C47481) *
                C47369 * C47268) *
               C2700) *
              C47146)) /
        (p * q * std::sqrt(p + q));
    d2ee[152] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C15769 * C124 - C15773 * C117 + C47448 * C125 - C15774 * C118) *
                C31224 +
            (C15769 * C138 - C15773 * C127 + C47448 * C139 - C15774 * C128) *
                C31222 +
            (C31519 - C31520 + C31521 - C31522) * C31225 +
            (C31523 - C31524 + C31525 - C31526) * C47481) *
               C47369 * C47181 * C47507 +
           ((C15923 - C15922 + C15925 - C15924) * C31224 +
            (C15927 - C15926 + C15929 - C15928) * C31222 +
            (C16578 - C16579 + C16580 - C16581) * C31225 +
            (C16582 - C16583 + C16584 - C16585) * C47481) *
               C47369 * C47181 * C47503 +
           ((C15931 - C15930 + C15933 - C15932) * C31224 +
            (C15935 - C15934 + C15937 - C15936) * C31222 +
            (C17000 - C17001 + C17002 - C17003) * C31225 +
            (C17004 - C17005 + C17006 - C17007) * C47481) *
               C47369 * C47181 * C47493 +
           ((C16831 - C16830 + C16833 - C16832) * C31224 +
            (C16835 - C16834 + C16837 - C16836) * C31222 +
            (C17486 - C17487 + C17488 - C17489) * C31225 +
            (C17490 - C17491 + C17492 - C17493) * C47481) *
               C47369 * C47181 * C47471) *
              C2440 +
          (((C15773 * C118 - C15769 * C125 + C15774 * C119 - C47448 * C126) *
                C31224 +
            (C15773 * C128 - C15769 * C139 + C15774 * C129 - C47448 * C140) *
                C31222 +
            (C31535 - C31536 + C31537 - C31538) * C31225 +
            (C31539 - C31540 + C31541 - C31542) * C47481) *
               C47369 * C47181 * C47507 +
           ((C15939 - C15938 + C15941 - C15940) * C31224 +
            (C15943 - C15942 + C15945 - C15944) * C31222 +
            (C16586 - C16587 + C16588 - C16589) * C31225 +
            (C16590 - C16591 + C16592 - C16593) * C47481) *
               C47369 * C47181 * C47503 +
           ((C15947 - C15946 + C15949 - C15948) * C31224 +
            (C15951 - C15950 + C15953 - C15952) * C31222 +
            (C17348 - C17349 + C17350 - C17351) * C31225 +
            (C17352 - C17353 + C17354 - C17355) * C47481) *
               C47369 * C47181 * C47493 +
           ((C17147 - C17146 + C17149 - C17148) * C31224 +
            (C17151 - C17150 + C17153 - C17152) * C31222 +
            (C15769 * C1546 - C15773 * C1543 + C47448 * C1547 -
             C15774 * C1544) *
                C31225 +
            (C15769 * C1552 - C15773 * C1549 + C47448 * C1553 -
             C15774 * C1550) *
                C47481) *
               C47369 * C47181 * C47471) *
              C47146)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C15769 * C124 - C15773 * C117 + C47448 * C125 - C15774 * C118) *
                C31224 +
            (C15769 * C138 - C15773 * C127 + C47448 * C139 - C15774 * C128) *
                C31222 +
            (C31519 - C31520 + C31521 - C31522) * C31225 +
            (C31523 - C31524 + C31525 - C31526) * C47481) *
               C47369 * C47181 * C2332 +
           ((C15923 - C15922 + C15925 - C15924) * C31224 +
            (C15927 - C15926 + C15929 - C15928) * C31222 +
            (C16578 - C16579 + C16580 - C16581) * C31225 +
            (C16582 - C16583 + C16584 - C16585) * C47481) *
               C47369 * C47181 * C47226) *
              C47506 +
          (((C15773 * C118 - C15769 * C125 + C15774 * C119 - C47448 * C126) *
                C31224 +
            (C15773 * C128 - C15769 * C139 + C15774 * C129 - C47448 * C140) *
                C31222 +
            (C31535 - C31536 + C31537 - C31538) * C31225 +
            (C31539 - C31540 + C31541 - C31542) * C47481) *
               C47369 * C47181 * C2332 +
           ((C15939 - C15938 + C15941 - C15940) * C31224 +
            (C15943 - C15942 + C15945 - C15944) * C31222 +
            (C16586 - C16587 + C16588 - C16589) * C31225 +
            (C16590 - C16591 + C16592 - C16593) * C47481) *
               C47369 * C47181 * C47226) *
              C47499 +
          (((C15769 * C126 - C15773 * C119 + C47448 * C130 - C15774 * C120) *
                C31224 +
            (C15769 * C140 - C15773 * C129 + C47448 * C141 - C15774 * C131) *
                C31222 +
            (C31551 - C31552 + C31553 - C31554) * C31225 +
            (C31555 - C31556 + C31557 - C31558) * C47481) *
               C47369 * C47181 * C2332 +
           ((C15955 - C15954 + C15957 - C15956) * C31224 +
            (C15959 - C15958 + C15961 - C15960) * C31222 +
            (C16594 - C16595 + C16596 - C16597) * C31225 +
            (C16598 - C16599 + C16600 - C16601) * C47481) *
               C47369 * C47181 * C47226) *
              C47486 +
          (((C15773 * C120 - C15769 * C130 + C15774 * C121 - C47448 * C132) *
                C31224 +
            (C15773 * C131 - C15769 * C141 + C15774 * C133 - C47448 * C142) *
                C31222 +
            (C31827 - C31828 + C31829 - C31830) * C31225 +
            (C31831 - C31832 + C31833 - C31834) * C47481) *
               C47369 * C47181 * C2332 +
           ((C16247 - C16246 + C16249 - C16248) * C31224 +
            (C16251 - C16250 + C16253 - C16252) * C31222 +
            (C15769 * C823 - C15773 * C815 + C47448 * C825 - C15774 * C816) *
                C31225 +
            (C15769 * C830 - C15773 * C824 + C47448 * C831 - C15774 * C826) *
                C47481) *
               C47369 * C47181 * C47226) *
              C47465)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C15769 * C124 - C15773 * C117 + C47448 * C125 - C15774 * C118) *
                 C31224 +
             (C15769 * C138 - C15773 * C127 + C47448 * C139 - C15774 * C128) *
                 C31222 +
             (C31519 - C31520 + C31521 - C31522) * C31225 +
             (C31523 - C31524 + C31525 - C31526) * C47481) *
                C47369 * C47501 +
            ((C31520 - C31519 + C31522 - C31521) * C31224 +
             (C31524 - C31523 + C31526 - C31525) * C31222 +
             (C31527 - C31528 + C31529 - C31530) * C31225 +
             (C31531 - C31532 + C31533 - C31534) * C47481) *
                C47369 * C47490 +
            ((C31528 - C31527 + C31530 - C31529) * C31224 +
             (C31532 - C31531 + C31534 - C31533) * C31222 +
             (C33231 - C33232 + C33233 - C33234) * C31225 +
             (C33235 - C33236 + C33237 - C33238) * C47481) *
                C47369 * C47464) *
               C2332 +
           (((C15923 - C15922 + C15925 - C15924) * C31224 +
             (C15927 - C15926 + C15929 - C15928) * C31222 +
             (C16578 - C16579 + C16580 - C16581) * C31225 +
             (C16582 - C16583 + C16584 - C16585) * C47481) *
                C47369 * C47501 +
            ((C16579 - C16578 + C16581 - C16580) * C31224 +
             (C16583 - C16582 + C16585 - C16584) * C31222 +
             (C16992 - C16993 + C16994 - C16995) * C31225 +
             (C16996 - C16997 + C16998 - C16999) * C47481) *
                C47369 * C47490 +
            ((C16993 - C16992 + C16995 - C16994) * C31224 +
             (C16997 - C16996 + C16999 - C16998) * C31222 +
             (C18330 - C18331 + C18332 - C18333) * C31225 +
             (C18334 - C18335 + C18336 - C18337) * C47481) *
                C47369 * C47464) *
               C47226) *
              C2440 +
          ((((C15773 * C118 - C15769 * C125 + C15774 * C119 - C47448 * C126) *
                 C31224 +
             (C15773 * C128 - C15769 * C139 + C15774 * C129 - C47448 * C140) *
                 C31222 +
             (C31535 - C31536 + C31537 - C31538) * C31225 +
             (C31539 - C31540 + C31541 - C31542) * C47481) *
                C47369 * C47501 +
            ((C31536 - C31535 + C31538 - C31537) * C31224 +
             (C31540 - C31539 + C31542 - C31541) * C31222 +
             (C31543 - C31544 + C31545 - C31546) * C31225 +
             (C31547 - C31548 + C31549 - C31550) * C47481) *
                C47369 * C47490 +
            ((C31544 - C31543 + C31546 - C31545) * C31224 +
             (C31548 - C31547 + C31550 - C31549) * C31222 +
             (C33571 - C33572 + C33573 - C33574) * C31225 +
             (C33575 - C33576 + C33577 - C33578) * C47481) *
                C47369 * C47464) *
               C2332 +
           (((C15939 - C15938 + C15941 - C15940) * C31224 +
             (C15943 - C15942 + C15945 - C15944) * C31222 +
             (C16586 - C16587 + C16588 - C16589) * C31225 +
             (C16590 - C16591 + C16592 - C16593) * C47481) *
                C47369 * C47501 +
            ((C16587 - C16586 + C16589 - C16588) * C31224 +
             (C16591 - C16590 + C16593 - C16592) * C31222 +
             (C18062 - C18063 + C18064 - C18065) * C31225 +
             (C18066 - C18067 + C18068 - C18069) * C47481) *
                C47369 * C47490 +
            ((C18063 - C18062 + C18065 - C18064) * C31224 +
             (C18067 - C18066 + C18069 - C18068) * C31222 +
             (C15769 * C2226 - C15773 * C2223 + C47448 * C2227 -
              C15774 * C2224) *
                 C31225 +
             (C15769 * C2232 - C15773 * C2229 + C47448 * C2233 -
              C15774 * C2230) *
                 C47481) *
                C47369 * C47464) *
               C47226) *
              C47146)) /
            (p * q * std::sqrt(p + q));
    d2ee[153] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C15769 * C124 - C15773 * C117 + C47448 * C125 - C15774 * C118) *
                 C31224 +
             (C15769 * C138 - C15773 * C127 + C47448 * C139 - C15774 * C128) *
                 C31222 +
             (C31519 - C31520 + C31521 - C31522) * C31225 +
             (C31523 - C31524 + C31525 - C31526) * C47481) *
                C47369 * C47430 +
            ((C31520 - C31519 + C31522 - C31521) * C31224 +
             (C31524 - C31523 + C31526 - C31525) * C31222 +
             (C31527 - C31528 + C31529 - C31530) * C31225 +
             (C31531 - C31532 + C31533 - C31534) * C47481) *
                C47369 * C47268) *
               C2332 +
           (((C15923 - C15922 + C15925 - C15924) * C31224 +
             (C15927 - C15926 + C15929 - C15928) * C31222 +
             (C16578 - C16579 + C16580 - C16581) * C31225 +
             (C16582 - C16583 + C16584 - C16585) * C47481) *
                C47369 * C47430 +
            ((C16579 - C16578 + C16581 - C16580) * C31224 +
             (C16583 - C16582 + C16585 - C16584) * C31222 +
             (C16992 - C16993 + C16994 - C16995) * C31225 +
             (C16996 - C16997 + C16998 - C16999) * C47481) *
                C47369 * C47268) *
               C47226) *
              C47140 +
          ((((C15773 * C118 - C15769 * C125 + C15774 * C119 - C47448 * C126) *
                 C31224 +
             (C15773 * C128 - C15769 * C139 + C15774 * C129 - C47448 * C140) *
                 C31222 +
             (C31535 - C31536 + C31537 - C31538) * C31225 +
             (C31539 - C31540 + C31541 - C31542) * C47481) *
                C47369 * C47430 +
            ((C31536 - C31535 + C31538 - C31537) * C31224 +
             (C31540 - C31539 + C31542 - C31541) * C31222 +
             (C31543 - C31544 + C31545 - C31546) * C31225 +
             (C31547 - C31548 + C31549 - C31550) * C47481) *
                C47369 * C47268) *
               C2332 +
           (((C15939 - C15938 + C15941 - C15940) * C31224 +
             (C15943 - C15942 + C15945 - C15944) * C31222 +
             (C16586 - C16587 + C16588 - C16589) * C31225 +
             (C16590 - C16591 + C16592 - C16593) * C47481) *
                C47369 * C47430 +
            ((C16587 - C16586 + C16589 - C16588) * C31224 +
             (C16591 - C16590 + C16593 - C16592) * C31222 +
             (C18062 - C18063 + C18064 - C18065) * C31225 +
             (C18066 - C18067 + C18068 - C18069) * C47481) *
                C47369 * C47268) *
               C47226) *
              C47149 +
          ((((C15769 * C126 - C15773 * C119 + C47448 * C130 - C15774 * C120) *
                 C31224 +
             (C15769 * C140 - C15773 * C129 + C47448 * C141 - C15774 * C131) *
                 C31222 +
             (C31551 - C31552 + C31553 - C31554) * C31225 +
             (C31555 - C31556 + C31557 - C31558) * C47481) *
                C47369 * C47430 +
            ((C31552 - C31551 + C31554 - C31553) * C31224 +
             (C31556 - C31555 + C31558 - C31557) * C31222 +
             (C31559 - C31560 + C31561 - C31562) * C31225 +
             (C31563 - C31564 + C31565 - C31566) * C47481) *
                C47369 * C47268) *
               C2332 +
           (((C15955 - C15954 + C15957 - C15956) * C31224 +
             (C15959 - C15958 + C15961 - C15960) * C31222 +
             (C16594 - C16595 + C16596 - C16597) * C31225 +
             (C16598 - C16599 + C16600 - C16601) * C47481) *
                C47369 * C47430 +
            ((C16595 - C16594 + C16597 - C16596) * C31224 +
             (C16599 - C16598 + C16601 - C16600) * C31222 +
             (C15769 * C1161 - C15773 * C1152 + C47448 * C2015 -
              C15774 * C2014) *
                 C31225 +
             (C15769 * C1179 - C15773 * C1164 + C47448 * C2017 -
              C15774 * C2016) *
                 C47481) *
                C47369 * C47268) *
               C47226) *
              C2703)) /
        (p * q * std::sqrt(p + q));
    d2ee[154] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C15769 * C124 - C15773 * C117 + C47448 * C125 - C15774 * C118) *
                C31224 +
            (C15769 * C138 - C15773 * C127 + C47448 * C139 - C15774 * C128) *
                C31222 +
            (C31519 - C31520 + C31521 - C31522) * C31225 +
            (C31523 - C31524 + C31525 - C31526) * C47481) *
               C47369 * C47181 * C2332 +
           ((C15923 - C15922 + C15925 - C15924) * C31224 +
            (C15927 - C15926 + C15929 - C15928) * C31222 +
            (C16578 - C16579 + C16580 - C16581) * C31225 +
            (C16582 - C16583 + C16584 - C16585) * C47481) *
               C47369 * C47181 * C47226) *
              C47506 +
          (((C15773 * C118 - C15769 * C125 + C15774 * C119 - C47448 * C126) *
                C31224 +
            (C15773 * C128 - C15769 * C139 + C15774 * C129 - C47448 * C140) *
                C31222 +
            (C31535 - C31536 + C31537 - C31538) * C31225 +
            (C31539 - C31540 + C31541 - C31542) * C47481) *
               C47369 * C47181 * C2332 +
           ((C15939 - C15938 + C15941 - C15940) * C31224 +
            (C15943 - C15942 + C15945 - C15944) * C31222 +
            (C16586 - C16587 + C16588 - C16589) * C31225 +
            (C16590 - C16591 + C16592 - C16593) * C47481) *
               C47369 * C47181 * C47226) *
              C47499 +
          (((C15769 * C126 - C15773 * C119 + C47448 * C130 - C15774 * C120) *
                C31224 +
            (C15769 * C140 - C15773 * C129 + C47448 * C141 - C15774 * C131) *
                C31222 +
            (C31551 - C31552 + C31553 - C31554) * C31225 +
            (C31555 - C31556 + C31557 - C31558) * C47481) *
               C47369 * C47181 * C2332 +
           ((C15955 - C15954 + C15957 - C15956) * C31224 +
            (C15959 - C15958 + C15961 - C15960) * C31222 +
            (C16594 - C16595 + C16596 - C16597) * C31225 +
            (C16598 - C16599 + C16600 - C16601) * C47481) *
               C47369 * C47181 * C47226) *
              C47486 +
          (((C15773 * C120 - C15769 * C130 + C15774 * C121 - C47448 * C132) *
                C31224 +
            (C15773 * C131 - C15769 * C141 + C15774 * C133 - C47448 * C142) *
                C31222 +
            (C31827 - C31828 + C31829 - C31830) * C31225 +
            (C31831 - C31832 + C31833 - C31834) * C47481) *
               C47369 * C47181 * C2332 +
           ((C16247 - C16246 + C16249 - C16248) * C31224 +
            (C16251 - C16250 + C16253 - C16252) * C31222 +
            (C15769 * C823 - C15773 * C815 + C47448 * C825 - C15774 * C816) *
                C31225 +
            (C15769 * C830 - C15773 * C824 + C47448 * C831 - C15774 * C826) *
                C47481) *
               C47369 * C47181 * C47226) *
              C47465)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C15769 * C124 - C15773 * C117 + C47448 * C125 - C15774 * C118) *
                C31224 +
            (C15769 * C138 - C15773 * C127 + C47448 * C139 - C15774 * C128) *
                C31222 +
            (C31519 - C31520 + C31521 - C31522) * C31225 +
            (C31523 - C31524 + C31525 - C31526) * C47481) *
               C47369 * C47181 * C47507 +
           ((C15923 - C15922 + C15925 - C15924) * C31224 +
            (C15927 - C15926 + C15929 - C15928) * C31222 +
            (C16578 - C16579 + C16580 - C16581) * C31225 +
            (C16582 - C16583 + C16584 - C16585) * C47481) *
               C47369 * C47181 * C47503 +
           ((C15931 - C15930 + C15933 - C15932) * C31224 +
            (C15935 - C15934 + C15937 - C15936) * C31222 +
            (C17000 - C17001 + C17002 - C17003) * C31225 +
            (C17004 - C17005 + C17006 - C17007) * C47481) *
               C47369 * C47181 * C47493 +
           ((C16831 - C16830 + C16833 - C16832) * C31224 +
            (C16835 - C16834 + C16837 - C16836) * C31222 +
            (C17486 - C17487 + C17488 - C17489) * C31225 +
            (C17490 - C17491 + C17492 - C17493) * C47481) *
               C47369 * C47181 * C47471) *
              C2440 +
          (((C15773 * C118 - C15769 * C125 + C15774 * C119 - C47448 * C126) *
                C31224 +
            (C15773 * C128 - C15769 * C139 + C15774 * C129 - C47448 * C140) *
                C31222 +
            (C31535 - C31536 + C31537 - C31538) * C31225 +
            (C31539 - C31540 + C31541 - C31542) * C47481) *
               C47369 * C47181 * C47507 +
           ((C15939 - C15938 + C15941 - C15940) * C31224 +
            (C15943 - C15942 + C15945 - C15944) * C31222 +
            (C16586 - C16587 + C16588 - C16589) * C31225 +
            (C16590 - C16591 + C16592 - C16593) * C47481) *
               C47369 * C47181 * C47503 +
           ((C15947 - C15946 + C15949 - C15948) * C31224 +
            (C15951 - C15950 + C15953 - C15952) * C31222 +
            (C17348 - C17349 + C17350 - C17351) * C31225 +
            (C17352 - C17353 + C17354 - C17355) * C47481) *
               C47369 * C47181 * C47493 +
           ((C17147 - C17146 + C17149 - C17148) * C31224 +
            (C17151 - C17150 + C17153 - C17152) * C31222 +
            (C15769 * C1546 - C15773 * C1543 + C47448 * C1547 -
             C15774 * C1544) *
                C31225 +
            (C15769 * C1552 - C15773 * C1549 + C47448 * C1553 -
             C15774 * C1550) *
                C47481) *
               C47369 * C47181 * C47471) *
              C47146)) /
            (p * q * std::sqrt(p + q));
    d2ee[155] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C15769 * C124 - C15773 * C117 + C47448 * C125 - C15774 * C118) *
                 C31224 +
             (C15769 * C138 - C15773 * C127 + C47448 * C139 - C15774 * C128) *
                 C31222 +
             (C31519 - C31520 + C31521 - C31522) * C31225 +
             (C31523 - C31524 + C31525 - C31526) * C47481) *
                C47369 * C3094 +
            ((C31520 - C31519 + C31522 - C31521) * C31224 +
             (C31524 - C31523 + C31526 - C31525) * C31222 +
             (C31527 - C31528 + C31529 - C31530) * C31225 +
             (C31531 - C31532 + C31533 - C31534) * C47481) *
                C47369 * C47268) *
               C47222 +
           (((C15923 - C15922 + C15925 - C15924) * C31224 +
             (C15927 - C15926 + C15929 - C15928) * C31222 +
             (C16578 - C16579 + C16580 - C16581) * C31225 +
             (C16582 - C16583 + C16584 - C16585) * C47481) *
                C47369 * C3094 +
            ((C16579 - C16578 + C16581 - C16580) * C31224 +
             (C16583 - C16582 + C16585 - C16584) * C31222 +
             (C16992 - C16993 + C16994 - C16995) * C31225 +
             (C16996 - C16997 + C16998 - C16999) * C47481) *
                C47369 * C47268) *
               C47229 +
           (((C15931 - C15930 + C15933 - C15932) * C31224 +
             (C15935 - C15934 + C15937 - C15936) * C31222 +
             (C17000 - C17001 + C17002 - C17003) * C31225 +
             (C17004 - C17005 + C17006 - C17007) * C47481) *
                C47369 * C3094 +
            ((C17001 - C17000 + C17003 - C17002) * C31224 +
             (C17005 - C17004 + C17007 - C17006) * C31222 +
             (C17008 - C17009 + C17010 - C17011) * C31225 +
             (C17012 - C17013 + C17014 - C17015) * C47481) *
                C47369 * C47268) *
               C2700) *
              C47415 +
          ((((C15773 * C118 - C15769 * C125 + C15774 * C119 - C47448 * C126) *
                 C31224 +
             (C15773 * C128 - C15769 * C139 + C15774 * C129 - C47448 * C140) *
                 C31222 +
             (C31535 - C31536 + C31537 - C31538) * C31225 +
             (C31539 - C31540 + C31541 - C31542) * C47481) *
                C47369 * C3094 +
            ((C31536 - C31535 + C31538 - C31537) * C31224 +
             (C31540 - C31539 + C31542 - C31541) * C31222 +
             (C31543 - C31544 + C31545 - C31546) * C31225 +
             (C31547 - C31548 + C31549 - C31550) * C47481) *
                C47369 * C47268) *
               C47222 +
           (((C15939 - C15938 + C15941 - C15940) * C31224 +
             (C15943 - C15942 + C15945 - C15944) * C31222 +
             (C16586 - C16587 + C16588 - C16589) * C31225 +
             (C16590 - C16591 + C16592 - C16593) * C47481) *
                C47369 * C3094 +
            ((C16587 - C16586 + C16589 - C16588) * C31224 +
             (C16591 - C16590 + C16593 - C16592) * C31222 +
             (C18062 - C18063 + C18064 - C18065) * C31225 +
             (C18066 - C18067 + C18068 - C18069) * C47481) *
                C47369 * C47268) *
               C47229 +
           (((C15947 - C15946 + C15949 - C15948) * C31224 +
             (C15951 - C15950 + C15953 - C15952) * C31222 +
             (C17348 - C17349 + C17350 - C17351) * C31225 +
             (C17352 - C17353 + C17354 - C17355) * C47481) *
                C47369 * C3094 +
            ((C17349 - C17348 + C17351 - C17350) * C31224 +
             (C17353 - C17352 + C17355 - C17354) * C31222 +
             (C15769 * C1172 - C15773 * C1157 + C47448 * C1173 -
              C15774 * C1158) *
                 C31225 +
             (C15769 * C1184 - C15773 * C1175 + C47448 * C1185 -
              C15774 * C1176) *
                 C47481) *
                C47369 * C47268) *
               C2700) *
              C47146)) /
        (p * q * std::sqrt(p + q));
    d2ee[156] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C15769 * C124 - C15773 * C117 + C47448 * C125 - C15774 * C118) *
                C31224 +
            (C15769 * C138 - C15773 * C127 + C47448 * C139 - C15774 * C128) *
                C31222 +
            (C31519 - C31520 + C31521 - C31522) * C31225 +
            (C31523 - C31524 + C31525 - C31526) * C47481) *
               C47369 * C47264 +
           ((C31520 - C31519 + C31522 - C31521) * C31224 +
            (C31524 - C31523 + C31526 - C31525) * C31222 +
            (C31527 - C31528 + C31529 - C31530) * C31225 +
            (C31531 - C31532 + C31533 - C31534) * C47481) *
               C47369 * C47271 +
           ((C31528 - C31527 + C31530 - C31529) * C31224 +
            (C31532 - C31531 + C31534 - C31533) * C31222 +
            (C33231 - C33232 + C33233 - C33234) * C31225 +
            (C33235 - C33236 + C33237 - C33238) * C47481) *
               C47369 * C3602) *
              C47222 +
          (((C15923 - C15922 + C15925 - C15924) * C31224 +
            (C15927 - C15926 + C15929 - C15928) * C31222 +
            (C16578 - C16579 + C16580 - C16581) * C31225 +
            (C16582 - C16583 + C16584 - C16585) * C47481) *
               C47369 * C47264 +
           ((C16579 - C16578 + C16581 - C16580) * C31224 +
            (C16583 - C16582 + C16585 - C16584) * C31222 +
            (C16992 - C16993 + C16994 - C16995) * C31225 +
            (C16996 - C16997 + C16998 - C16999) * C47481) *
               C47369 * C47271 +
           ((C16993 - C16992 + C16995 - C16994) * C31224 +
            (C16997 - C16996 + C16999 - C16998) * C31222 +
            (C18330 - C18331 + C18332 - C18333) * C31225 +
            (C18334 - C18335 + C18336 - C18337) * C47481) *
               C47369 * C3602) *
              C47229 +
          (((C15931 - C15930 + C15933 - C15932) * C31224 +
            (C15935 - C15934 + C15937 - C15936) * C31222 +
            (C17000 - C17001 + C17002 - C17003) * C31225 +
            (C17004 - C17005 + C17006 - C17007) * C47481) *
               C47369 * C47264 +
           ((C17001 - C17000 + C17003 - C17002) * C31224 +
            (C17005 - C17004 + C17007 - C17006) * C31222 +
            (C17008 - C17009 + C17010 - C17011) * C31225 +
            (C17012 - C17013 + C17014 - C17015) * C47481) *
               C47369 * C47271 +
           ((C17009 - C17008 + C17011 - C17010) * C31224 +
            (C17013 - C17012 + C17015 - C17014) * C31222 +
            (C15769 * C7169 - C15773 * C7167 + C47448 * C7170 -
             C15774 * C7168) *
                C31225 +
            (C15769 * C7173 - C15773 * C7171 + C47448 * C7174 -
             C15774 * C7172) *
                C47481) *
               C47369 * C3602) *
              C2700) *
         C47135) /
        (p * q * std::sqrt(p + q));
    d2ee[157] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C15769 * C124 - C15773 * C117 + C47448 * C125 - C15774 * C118) *
                C31224 +
            (C15769 * C138 - C15773 * C127 + C47448 * C139 - C15774 * C128) *
                C31222 +
            (C31519 - C31520 + C31521 - C31522) * C31225 +
            (C31523 - C31524 + C31525 - C31526) * C47481) *
               C47369 * C3094 +
           ((C31520 - C31519 + C31522 - C31521) * C31224 +
            (C31524 - C31523 + C31526 - C31525) * C31222 +
            (C31527 - C31528 + C31529 - C31530) * C31225 +
            (C31531 - C31532 + C31533 - C31534) * C47481) *
               C47369 * C47268) *
              C47507 +
          (((C15923 - C15922 + C15925 - C15924) * C31224 +
            (C15927 - C15926 + C15929 - C15928) * C31222 +
            (C16578 - C16579 + C16580 - C16581) * C31225 +
            (C16582 - C16583 + C16584 - C16585) * C47481) *
               C47369 * C3094 +
           ((C16579 - C16578 + C16581 - C16580) * C31224 +
            (C16583 - C16582 + C16585 - C16584) * C31222 +
            (C16992 - C16993 + C16994 - C16995) * C31225 +
            (C16996 - C16997 + C16998 - C16999) * C47481) *
               C47369 * C47268) *
              C47503 +
          (((C15931 - C15930 + C15933 - C15932) * C31224 +
            (C15935 - C15934 + C15937 - C15936) * C31222 +
            (C17000 - C17001 + C17002 - C17003) * C31225 +
            (C17004 - C17005 + C17006 - C17007) * C47481) *
               C47369 * C3094 +
           ((C17001 - C17000 + C17003 - C17002) * C31224 +
            (C17005 - C17004 + C17007 - C17006) * C31222 +
            (C17008 - C17009 + C17010 - C17011) * C31225 +
            (C17012 - C17013 + C17014 - C17015) * C47481) *
               C47369 * C47268) *
              C47493 +
          (((C16831 - C16830 + C16833 - C16832) * C31224 +
            (C16835 - C16834 + C16837 - C16836) * C31222 +
            (C17486 - C17487 + C17488 - C17489) * C31225 +
            (C17490 - C17491 + C17492 - C17493) * C47481) *
               C47369 * C3094 +
           ((C17487 - C17486 + C17489 - C17488) * C31224 +
            (C17491 - C17490 + C17493 - C17492) * C31222 +
            (C15769 * C5807 - C15773 * C5805 + C47448 * C5808 -
             C15774 * C5806) *
                C31225 +
            (C15769 * C5811 - C15773 * C5809 + C47448 * C5812 -
             C15774 * C5810) *
                C47481) *
               C47369 * C47268) *
              C47471) *
         C47135) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C15769 * C124 - C15773 * C117 + C47448 * C125 - C15774 * C118) *
                 C31224 +
             (C15769 * C138 - C15773 * C127 + C47448 * C139 - C15774 * C128) *
                 C31222 +
             (C31519 - C31520 + C31521 - C31522) * C31225 +
             (C31523 - C31524 + C31525 - C31526) * C47481) *
                C47369 * C3094 +
            ((C31520 - C31519 + C31522 - C31521) * C31224 +
             (C31524 - C31523 + C31526 - C31525) * C31222 +
             (C31527 - C31528 + C31529 - C31530) * C31225 +
             (C31531 - C31532 + C31533 - C31534) * C47481) *
                C47369 * C47268) *
               C2332 +
           (((C15923 - C15922 + C15925 - C15924) * C31224 +
             (C15927 - C15926 + C15929 - C15928) * C31222 +
             (C16578 - C16579 + C16580 - C16581) * C31225 +
             (C16582 - C16583 + C16584 - C16585) * C47481) *
                C47369 * C3094 +
            ((C16579 - C16578 + C16581 - C16580) * C31224 +
             (C16583 - C16582 + C16585 - C16584) * C31222 +
             (C16992 - C16993 + C16994 - C16995) * C31225 +
             (C16996 - C16997 + C16998 - C16999) * C47481) *
                C47369 * C47268) *
               C47226) *
              C47497 +
          ((((C15773 * C118 - C15769 * C125 + C15774 * C119 - C47448 * C126) *
                 C31224 +
             (C15773 * C128 - C15769 * C139 + C15774 * C129 - C47448 * C140) *
                 C31222 +
             (C31535 - C31536 + C31537 - C31538) * C31225 +
             (C31539 - C31540 + C31541 - C31542) * C47481) *
                C47369 * C3094 +
            ((C31536 - C31535 + C31538 - C31537) * C31224 +
             (C31540 - C31539 + C31542 - C31541) * C31222 +
             (C31543 - C31544 + C31545 - C31546) * C31225 +
             (C31547 - C31548 + C31549 - C31550) * C47481) *
                C47369 * C47268) *
               C2332 +
           (((C15939 - C15938 + C15941 - C15940) * C31224 +
             (C15943 - C15942 + C15945 - C15944) * C31222 +
             (C16586 - C16587 + C16588 - C16589) * C31225 +
             (C16590 - C16591 + C16592 - C16593) * C47481) *
                C47369 * C3094 +
            ((C16587 - C16586 + C16589 - C16588) * C31224 +
             (C16591 - C16590 + C16593 - C16592) * C31222 +
             (C18062 - C18063 + C18064 - C18065) * C31225 +
             (C18066 - C18067 + C18068 - C18069) * C47481) *
                C47369 * C47268) *
               C47226) *
              C47484 +
          ((((C15769 * C126 - C15773 * C119 + C47448 * C130 - C15774 * C120) *
                 C31224 +
             (C15769 * C140 - C15773 * C129 + C47448 * C141 - C15774 * C131) *
                 C31222 +
             (C31551 - C31552 + C31553 - C31554) * C31225 +
             (C31555 - C31556 + C31557 - C31558) * C47481) *
                C47369 * C3094 +
            ((C31552 - C31551 + C31554 - C31553) * C31224 +
             (C31556 - C31555 + C31558 - C31557) * C31222 +
             (C31559 - C31560 + C31561 - C31562) * C31225 +
             (C31563 - C31564 + C31565 - C31566) * C47481) *
                C47369 * C47268) *
               C2332 +
           (((C15955 - C15954 + C15957 - C15956) * C31224 +
             (C15959 - C15958 + C15961 - C15960) * C31222 +
             (C16594 - C16595 + C16596 - C16597) * C31225 +
             (C16598 - C16599 + C16600 - C16601) * C47481) *
                C47369 * C3094 +
            ((C16595 - C16594 + C16597 - C16596) * C31224 +
             (C16599 - C16598 + C16601 - C16600) * C31222 +
             (C15769 * C1161 - C15773 * C1152 + C47448 * C2015 -
              C15774 * C2014) *
                 C31225 +
             (C15769 * C1179 - C15773 * C1164 + C47448 * C2017 -
              C15774 * C2016) *
                 C47481) *
                C47369 * C47268) *
               C47226) *
              C47455)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C15769 * C124 - C15773 * C117 + C47448 * C125 - C15774 * C118) *
                C31224 +
            (C15769 * C138 - C15773 * C127 + C47448 * C139 - C15774 * C128) *
                C31222 +
            (C31519 - C31520 + C31521 - C31522) * C31225 +
            (C31523 - C31524 + C31525 - C31526) * C47481) *
               C47369 * C47508 +
           ((C31520 - C31519 + C31522 - C31521) * C31224 +
            (C31524 - C31523 + C31526 - C31525) * C31222 +
            (C31527 - C31528 + C31529 - C31530) * C31225 +
            (C31531 - C31532 + C31533 - C31534) * C47481) *
               C47369 * C47505 +
           ((C31528 - C31527 + C31530 - C31529) * C31224 +
            (C31532 - C31531 + C31534 - C31533) * C31222 +
            (C33231 - C33232 + C33233 - C33234) * C31225 +
            (C33235 - C33236 + C33237 - C33238) * C47481) *
               C47369 * C47496 +
           ((C33232 - C33231 + C33234 - C33233) * C31224 +
            (C33236 - C33235 + C33238 - C33237) * C31222 +
            (C33239 - C33240 + C33241 - C33242) * C31225 +
            (C33243 - C33244 + C33245 - C33246) * C47481) *
               C47369 * C47477) *
              C2332 +
          (((C15923 - C15922 + C15925 - C15924) * C31224 +
            (C15927 - C15926 + C15929 - C15928) * C31222 +
            (C16578 - C16579 + C16580 - C16581) * C31225 +
            (C16582 - C16583 + C16584 - C16585) * C47481) *
               C47369 * C47508 +
           ((C16579 - C16578 + C16581 - C16580) * C31224 +
            (C16583 - C16582 + C16585 - C16584) * C31222 +
            (C16992 - C16993 + C16994 - C16995) * C31225 +
            (C16996 - C16997 + C16998 - C16999) * C47481) *
               C47369 * C47505 +
           ((C16993 - C16992 + C16995 - C16994) * C31224 +
            (C16997 - C16996 + C16999 - C16998) * C31222 +
            (C18330 - C18331 + C18332 - C18333) * C31225 +
            (C18334 - C18335 + C18336 - C18337) * C47481) *
               C47369 * C47496 +
           ((C18331 - C18330 + C18333 - C18332) * C31224 +
            (C18335 - C18334 + C18337 - C18336) * C31222 +
            (C15769 * C6699 - C15773 * C6697 + C47448 * C6700 -
             C15774 * C6698) *
                C31225 +
            (C15769 * C6703 - C15773 * C6701 + C47448 * C6704 -
             C15774 * C6702) *
                C47481) *
               C47369 * C47477) *
              C47226) *
         C47135) /
            (p * q * std::sqrt(p + q));
    d2ee[158] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C15769 * C124 - C15773 * C117 + C47448 * C125 - C15774 * C118) *
                 C31224 +
             (C15769 * C138 - C15773 * C127 + C47448 * C139 - C15774 * C128) *
                 C31222 +
             (C31519 - C31520 + C31521 - C31522) * C31225 +
             (C31523 - C31524 + C31525 - C31526) * C47481) *
                C47369 * C47264 +
            ((C31520 - C31519 + C31522 - C31521) * C31224 +
             (C31524 - C31523 + C31526 - C31525) * C31222 +
             (C31527 - C31528 + C31529 - C31530) * C31225 +
             (C31531 - C31532 + C31533 - C31534) * C47481) *
                C47369 * C47271 +
            ((C31528 - C31527 + C31530 - C31529) * C31224 +
             (C31532 - C31531 + C31534 - C31533) * C31222 +
             (C33231 - C33232 + C33233 - C33234) * C31225 +
             (C33235 - C33236 + C33237 - C33238) * C47481) *
                C47369 * C3602) *
               C2332 +
           (((C15923 - C15922 + C15925 - C15924) * C31224 +
             (C15927 - C15926 + C15929 - C15928) * C31222 +
             (C16578 - C16579 + C16580 - C16581) * C31225 +
             (C16582 - C16583 + C16584 - C16585) * C47481) *
                C47369 * C47264 +
            ((C16579 - C16578 + C16581 - C16580) * C31224 +
             (C16583 - C16582 + C16585 - C16584) * C31222 +
             (C16992 - C16993 + C16994 - C16995) * C31225 +
             (C16996 - C16997 + C16998 - C16999) * C47481) *
                C47369 * C47271 +
            ((C16993 - C16992 + C16995 - C16994) * C31224 +
             (C16997 - C16996 + C16999 - C16998) * C31222 +
             (C18330 - C18331 + C18332 - C18333) * C31225 +
             (C18334 - C18335 + C18336 - C18337) * C47481) *
                C47369 * C3602) *
               C47226) *
              C47415 +
          ((((C15773 * C118 - C15769 * C125 + C15774 * C119 - C47448 * C126) *
                 C31224 +
             (C15773 * C128 - C15769 * C139 + C15774 * C129 - C47448 * C140) *
                 C31222 +
             (C31535 - C31536 + C31537 - C31538) * C31225 +
             (C31539 - C31540 + C31541 - C31542) * C47481) *
                C47369 * C47264 +
            ((C31536 - C31535 + C31538 - C31537) * C31224 +
             (C31540 - C31539 + C31542 - C31541) * C31222 +
             (C31543 - C31544 + C31545 - C31546) * C31225 +
             (C31547 - C31548 + C31549 - C31550) * C47481) *
                C47369 * C47271 +
            ((C31544 - C31543 + C31546 - C31545) * C31224 +
             (C31548 - C31547 + C31550 - C31549) * C31222 +
             (C33571 - C33572 + C33573 - C33574) * C31225 +
             (C33575 - C33576 + C33577 - C33578) * C47481) *
                C47369 * C3602) *
               C2332 +
           (((C15939 - C15938 + C15941 - C15940) * C31224 +
             (C15943 - C15942 + C15945 - C15944) * C31222 +
             (C16586 - C16587 + C16588 - C16589) * C31225 +
             (C16590 - C16591 + C16592 - C16593) * C47481) *
                C47369 * C47264 +
            ((C16587 - C16586 + C16589 - C16588) * C31224 +
             (C16591 - C16590 + C16593 - C16592) * C31222 +
             (C18062 - C18063 + C18064 - C18065) * C31225 +
             (C18066 - C18067 + C18068 - C18069) * C47481) *
                C47369 * C47271 +
            ((C18063 - C18062 + C18065 - C18064) * C31224 +
             (C18067 - C18066 + C18069 - C18068) * C31222 +
             (C15769 * C2226 - C15773 * C2223 + C47448 * C2227 -
              C15774 * C2224) *
                 C31225 +
             (C15769 * C2232 - C15773 * C2229 + C47448 * C2233 -
              C15774 * C2230) *
                 C47481) *
                C47369 * C3602) *
               C47226) *
              C47146)) /
        (p * q * std::sqrt(p + q));
    d2ee[159] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C15769 * C124 - C15773 * C117 + C47448 * C125 - C15774 * C118) *
                 C31224 +
             (C15769 * C138 - C15773 * C127 + C47448 * C139 - C15774 * C128) *
                 C31222 +
             (C31519 - C31520 + C31521 - C31522) * C31225 +
             (C31523 - C31524 + C31525 - C31526) * C47481) *
                C47369 * C3094 +
            ((C31520 - C31519 + C31522 - C31521) * C31224 +
             (C31524 - C31523 + C31526 - C31525) * C31222 +
             (C31527 - C31528 + C31529 - C31530) * C31225 +
             (C31531 - C31532 + C31533 - C31534) * C47481) *
                C47369 * C47268) *
               C2332 +
           (((C15923 - C15922 + C15925 - C15924) * C31224 +
             (C15927 - C15926 + C15929 - C15928) * C31222 +
             (C16578 - C16579 + C16580 - C16581) * C31225 +
             (C16582 - C16583 + C16584 - C16585) * C47481) *
                C47369 * C3094 +
            ((C16579 - C16578 + C16581 - C16580) * C31224 +
             (C16583 - C16582 + C16585 - C16584) * C31222 +
             (C16992 - C16993 + C16994 - C16995) * C31225 +
             (C16996 - C16997 + C16998 - C16999) * C47481) *
                C47369 * C47268) *
               C47226) *
              C47497 +
          ((((C15773 * C118 - C15769 * C125 + C15774 * C119 - C47448 * C126) *
                 C31224 +
             (C15773 * C128 - C15769 * C139 + C15774 * C129 - C47448 * C140) *
                 C31222 +
             (C31535 - C31536 + C31537 - C31538) * C31225 +
             (C31539 - C31540 + C31541 - C31542) * C47481) *
                C47369 * C3094 +
            ((C31536 - C31535 + C31538 - C31537) * C31224 +
             (C31540 - C31539 + C31542 - C31541) * C31222 +
             (C31543 - C31544 + C31545 - C31546) * C31225 +
             (C31547 - C31548 + C31549 - C31550) * C47481) *
                C47369 * C47268) *
               C2332 +
           (((C15939 - C15938 + C15941 - C15940) * C31224 +
             (C15943 - C15942 + C15945 - C15944) * C31222 +
             (C16586 - C16587 + C16588 - C16589) * C31225 +
             (C16590 - C16591 + C16592 - C16593) * C47481) *
                C47369 * C3094 +
            ((C16587 - C16586 + C16589 - C16588) * C31224 +
             (C16591 - C16590 + C16593 - C16592) * C31222 +
             (C18062 - C18063 + C18064 - C18065) * C31225 +
             (C18066 - C18067 + C18068 - C18069) * C47481) *
                C47369 * C47268) *
               C47226) *
              C47484 +
          ((((C15769 * C126 - C15773 * C119 + C47448 * C130 - C15774 * C120) *
                 C31224 +
             (C15769 * C140 - C15773 * C129 + C47448 * C141 - C15774 * C131) *
                 C31222 +
             (C31551 - C31552 + C31553 - C31554) * C31225 +
             (C31555 - C31556 + C31557 - C31558) * C47481) *
                C47369 * C3094 +
            ((C31552 - C31551 + C31554 - C31553) * C31224 +
             (C31556 - C31555 + C31558 - C31557) * C31222 +
             (C31559 - C31560 + C31561 - C31562) * C31225 +
             (C31563 - C31564 + C31565 - C31566) * C47481) *
                C47369 * C47268) *
               C2332 +
           (((C15955 - C15954 + C15957 - C15956) * C31224 +
             (C15959 - C15958 + C15961 - C15960) * C31222 +
             (C16594 - C16595 + C16596 - C16597) * C31225 +
             (C16598 - C16599 + C16600 - C16601) * C47481) *
                C47369 * C3094 +
            ((C16595 - C16594 + C16597 - C16596) * C31224 +
             (C16599 - C16598 + C16601 - C16600) * C31222 +
             (C15769 * C1161 - C15773 * C1152 + C47448 * C2015 -
              C15774 * C2014) *
                 C31225 +
             (C15769 * C1179 - C15773 * C1164 + C47448 * C2017 -
              C15774 * C2016) *
                 C47481) *
                C47369 * C47268) *
               C47226) *
              C47455)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C15769 * C124 - C15773 * C117 + C47448 * C125 - C15774 * C118) *
                C31224 +
            (C15769 * C138 - C15773 * C127 + C47448 * C139 - C15774 * C128) *
                C31222 +
            (C31519 - C31520 + C31521 - C31522) * C31225 +
            (C31523 - C31524 + C31525 - C31526) * C47481) *
               C47369 * C3094 +
           ((C31520 - C31519 + C31522 - C31521) * C31224 +
            (C31524 - C31523 + C31526 - C31525) * C31222 +
            (C31527 - C31528 + C31529 - C31530) * C31225 +
            (C31531 - C31532 + C31533 - C31534) * C47481) *
               C47369 * C47268) *
              C47507 +
          (((C15923 - C15922 + C15925 - C15924) * C31224 +
            (C15927 - C15926 + C15929 - C15928) * C31222 +
            (C16578 - C16579 + C16580 - C16581) * C31225 +
            (C16582 - C16583 + C16584 - C16585) * C47481) *
               C47369 * C3094 +
           ((C16579 - C16578 + C16581 - C16580) * C31224 +
            (C16583 - C16582 + C16585 - C16584) * C31222 +
            (C16992 - C16993 + C16994 - C16995) * C31225 +
            (C16996 - C16997 + C16998 - C16999) * C47481) *
               C47369 * C47268) *
              C47503 +
          (((C15931 - C15930 + C15933 - C15932) * C31224 +
            (C15935 - C15934 + C15937 - C15936) * C31222 +
            (C17000 - C17001 + C17002 - C17003) * C31225 +
            (C17004 - C17005 + C17006 - C17007) * C47481) *
               C47369 * C3094 +
           ((C17001 - C17000 + C17003 - C17002) * C31224 +
            (C17005 - C17004 + C17007 - C17006) * C31222 +
            (C17008 - C17009 + C17010 - C17011) * C31225 +
            (C17012 - C17013 + C17014 - C17015) * C47481) *
               C47369 * C47268) *
              C47493 +
          (((C16831 - C16830 + C16833 - C16832) * C31224 +
            (C16835 - C16834 + C16837 - C16836) * C31222 +
            (C17486 - C17487 + C17488 - C17489) * C31225 +
            (C17490 - C17491 + C17492 - C17493) * C47481) *
               C47369 * C3094 +
           ((C17487 - C17486 + C17489 - C17488) * C31224 +
            (C17491 - C17490 + C17493 - C17492) * C31222 +
            (C15769 * C5807 - C15773 * C5805 + C47448 * C5808 -
             C15774 * C5806) *
                C31225 +
            (C15769 * C5811 - C15773 * C5809 + C47448 * C5812 -
             C15774 * C5810) *
                C47481) *
               C47369 * C47268) *
              C47471) *
         C47135) /
            (p * q * std::sqrt(p + q));
    d2ee[160] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C15769 * C124 - C15773 * C117 + C47448 * C125 - C15774 * C118) *
                C31224 +
            (C15769 * C138 - C15773 * C127 + C47448 * C139 - C15774 * C128) *
                C31222 +
            (C31519 - C31520 + C31521 - C31522) * C31225 +
            (C31523 - C31524 + C31525 - C31526) * C47481) *
               C47369 * C47181 * C1284 +
           ((C15923 - C15922 + C15925 - C15924) * C31224 +
            (C15927 - C15926 + C15929 - C15928) * C31222 +
            (C16578 - C16579 + C16580 - C16581) * C31225 +
            (C16582 - C16583 + C16584 - C16585) * C47481) *
               C47369 * C47181 * C1285 +
           ((C15931 - C15930 + C15933 - C15932) * C31224 +
            (C15935 - C15934 + C15937 - C15936) * C31222 +
            (C17000 - C17001 + C17002 - C17003) * C31225 +
            (C17004 - C17005 + C17006 - C17007) * C47481) *
               C47369 * C47181 * C1286 +
           ((C16831 - C16830 + C16833 - C16832) * C31224 +
            (C16835 - C16834 + C16837 - C16836) * C31222 +
            (C17486 - C17487 + C17488 - C17489) * C31225 +
            (C17490 - C17491 + C17492 - C17493) * C47481) *
               C47369 * C47181 * C47471) *
              C47415 +
          (((C15773 * C118 - C15769 * C125 + C15774 * C119 - C47448 * C126) *
                C31224 +
            (C15773 * C128 - C15769 * C139 + C15774 * C129 - C47448 * C140) *
                C31222 +
            (C31535 - C31536 + C31537 - C31538) * C31225 +
            (C31539 - C31540 + C31541 - C31542) * C47481) *
               C47369 * C47181 * C1284 +
           ((C15939 - C15938 + C15941 - C15940) * C31224 +
            (C15943 - C15942 + C15945 - C15944) * C31222 +
            (C16586 - C16587 + C16588 - C16589) * C31225 +
            (C16590 - C16591 + C16592 - C16593) * C47481) *
               C47369 * C47181 * C1285 +
           ((C15947 - C15946 + C15949 - C15948) * C31224 +
            (C15951 - C15950 + C15953 - C15952) * C31222 +
            (C17348 - C17349 + C17350 - C17351) * C31225 +
            (C17352 - C17353 + C17354 - C17355) * C47481) *
               C47369 * C47181 * C1286 +
           ((C17147 - C17146 + C17149 - C17148) * C31224 +
            (C17151 - C17150 + C17153 - C17152) * C31222 +
            (C15769 * C1546 - C15773 * C1543 + C47448 * C1547 -
             C15774 * C1544) *
                C31225 +
            (C15769 * C1552 - C15773 * C1549 + C47448 * C1553 -
             C15774 * C1550) *
                C47481) *
               C47369 * C47181 * C47471) *
              C47146)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C15769 * C124 - C15773 * C117 + C47448 * C125 - C15774 * C118) *
                C31224 +
            (C15769 * C138 - C15773 * C127 + C47448 * C139 - C15774 * C128) *
                C31222 +
            (C31519 - C31520 + C31521 - C31522) * C31225 +
            (C31523 - C31524 + C31525 - C31526) * C47481) *
               C47369 * C47181 * C47429 +
           ((C15923 - C15922 + C15925 - C15924) * C31224 +
            (C15927 - C15926 + C15929 - C15928) * C31222 +
            (C16578 - C16579 + C16580 - C16581) * C31225 +
            (C16582 - C16583 + C16584 - C16585) * C47481) *
               C47369 * C47181 * C47226) *
              C554 +
          (((C15773 * C118 - C15769 * C125 + C15774 * C119 - C47448 * C126) *
                C31224 +
            (C15773 * C128 - C15769 * C139 + C15774 * C129 - C47448 * C140) *
                C31222 +
            (C31535 - C31536 + C31537 - C31538) * C31225 +
            (C31539 - C31540 + C31541 - C31542) * C47481) *
               C47369 * C47181 * C47429 +
           ((C15939 - C15938 + C15941 - C15940) * C31224 +
            (C15943 - C15942 + C15945 - C15944) * C31222 +
            (C16586 - C16587 + C16588 - C16589) * C31225 +
            (C16590 - C16591 + C16592 - C16593) * C47481) *
               C47369 * C47181 * C47226) *
              C555 +
          (((C15769 * C126 - C15773 * C119 + C47448 * C130 - C15774 * C120) *
                C31224 +
            (C15769 * C140 - C15773 * C129 + C47448 * C141 - C15774 * C131) *
                C31222 +
            (C31551 - C31552 + C31553 - C31554) * C31225 +
            (C31555 - C31556 + C31557 - C31558) * C47481) *
               C47369 * C47181 * C47429 +
           ((C15955 - C15954 + C15957 - C15956) * C31224 +
            (C15959 - C15958 + C15961 - C15960) * C31222 +
            (C16594 - C16595 + C16596 - C16597) * C31225 +
            (C16598 - C16599 + C16600 - C16601) * C47481) *
               C47369 * C47181 * C47226) *
              C556 +
          (((C15773 * C120 - C15769 * C130 + C15774 * C121 - C47448 * C132) *
                C31224 +
            (C15773 * C131 - C15769 * C141 + C15774 * C133 - C47448 * C142) *
                C31222 +
            (C15773 * C420 - C15769 * C436 + C15774 * C422 - C47448 * C440) *
                C31225 +
            (C15773 * C437 - C15769 * C450 + C15774 * C441 - C47448 * C452) *
                C47481) *
               C47369 * C47181 * C47429 +
           ((C16247 - C16246 + C16249 - C16248) * C31224 +
            (C16251 - C16250 + C16253 - C16252) * C31222 +
            (C15769 * C823 - C15773 * C815 + C47448 * C825 - C15774 * C816) *
                C31225 +
            (C15769 * C830 - C15773 * C824 + C47448 * C831 - C15774 * C826) *
                C47481) *
               C47369 * C47181 * C47226) *
              C47465)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C15769 * C124 - C15773 * C117 + C47448 * C125 - C15774 * C118) *
                 C31224 +
             (C15769 * C138 - C15773 * C127 + C47448 * C139 - C15774 * C128) *
                 C31222 +
             (C31519 - C31520 + C31521 - C31522) * C31225 +
             (C31523 - C31524 + C31525 - C31526) * C47481) *
                C47369 * C1664 +
            ((C31520 - C31519 + C31522 - C31521) * C31224 +
             (C31524 - C31523 + C31526 - C31525) * C31222 +
             (C31527 - C31528 + C31529 - C31530) * C31225 +
             (C31531 - C31532 + C31533 - C31534) * C47481) *
                C47369 * C1665 +
            ((C31528 - C31527 + C31530 - C31529) * C31224 +
             (C31532 - C31531 + C31534 - C31533) * C31222 +
             (C33231 - C33232 + C33233 - C33234) * C31225 +
             (C33235 - C33236 + C33237 - C33238) * C47481) *
                C47369 * C47464) *
               C47429 +
           (((C15923 - C15922 + C15925 - C15924) * C31224 +
             (C15927 - C15926 + C15929 - C15928) * C31222 +
             (C16578 - C16579 + C16580 - C16581) * C31225 +
             (C16582 - C16583 + C16584 - C16585) * C47481) *
                C47369 * C1664 +
            ((C16579 - C16578 + C16581 - C16580) * C31224 +
             (C16583 - C16582 + C16585 - C16584) * C31222 +
             (C16992 - C16993 + C16994 - C16995) * C31225 +
             (C16996 - C16997 + C16998 - C16999) * C47481) *
                C47369 * C1665 +
            ((C16993 - C16992 + C16995 - C16994) * C31224 +
             (C16997 - C16996 + C16999 - C16998) * C31222 +
             (C18330 - C18331 + C18332 - C18333) * C31225 +
             (C18334 - C18335 + C18336 - C18337) * C47481) *
                C47369 * C47464) *
               C47226) *
              C47415 +
          ((((C15773 * C118 - C15769 * C125 + C15774 * C119 - C47448 * C126) *
                 C31224 +
             (C15773 * C128 - C15769 * C139 + C15774 * C129 - C47448 * C140) *
                 C31222 +
             (C31535 - C31536 + C31537 - C31538) * C31225 +
             (C31539 - C31540 + C31541 - C31542) * C47481) *
                C47369 * C1664 +
            ((C31536 - C31535 + C31538 - C31537) * C31224 +
             (C31540 - C31539 + C31542 - C31541) * C31222 +
             (C31543 - C31544 + C31545 - C31546) * C31225 +
             (C31547 - C31548 + C31549 - C31550) * C47481) *
                C47369 * C1665 +
            ((C31544 - C31543 + C31546 - C31545) * C31224 +
             (C31548 - C31547 + C31550 - C31549) * C31222 +
             (C15773 * C1845 - C15769 * C1851 + C15774 * C1846 -
              C47448 * C1852) *
                 C31225 +
             (C15773 * C1854 - C15769 * C1863 + C15774 * C1855 -
              C47448 * C1864) *
                 C47481) *
                C47369 * C47464) *
               C47429 +
           (((C15939 - C15938 + C15941 - C15940) * C31224 +
             (C15943 - C15942 + C15945 - C15944) * C31222 +
             (C16586 - C16587 + C16588 - C16589) * C31225 +
             (C16590 - C16591 + C16592 - C16593) * C47481) *
                C47369 * C1664 +
            ((C16587 - C16586 + C16589 - C16588) * C31224 +
             (C16591 - C16590 + C16593 - C16592) * C31222 +
             (C18062 - C18063 + C18064 - C18065) * C31225 +
             (C18066 - C18067 + C18068 - C18069) * C47481) *
                C47369 * C1665 +
            ((C18063 - C18062 + C18065 - C18064) * C31224 +
             (C18067 - C18066 + C18069 - C18068) * C31222 +
             (C15769 * C2226 - C15773 * C2223 + C47448 * C2227 -
              C15774 * C2224) *
                 C31225 +
             (C15769 * C2232 - C15773 * C2229 + C47448 * C2233 -
              C15774 * C2230) *
                 C47481) *
                C47369 * C47464) *
               C47226) *
              C47146)) /
            (p * q * std::sqrt(p + q));
    d2ee[161] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C15769 * C124 - C15773 * C117 + C47448 * C125 - C15774 * C118) *
                C31224 +
            (C15769 * C138 - C15773 * C127 + C47448 * C139 - C15774 * C128) *
                C31222 +
            (C31519 - C31520 + C31521 - C31522) * C31225 +
            (C31523 - C31524 + C31525 - C31526) * C47481) *
               C47369 * C47430 +
           ((C31520 - C31519 + C31522 - C31521) * C31224 +
            (C31524 - C31523 + C31526 - C31525) * C31222 +
            (C31527 - C31528 + C31529 - C31530) * C31225 +
            (C31531 - C31532 + C31533 - C31534) * C47481) *
               C47369 * C47268) *
              C1284 +
          (((C15923 - C15922 + C15925 - C15924) * C31224 +
            (C15927 - C15926 + C15929 - C15928) * C31222 +
            (C16578 - C16579 + C16580 - C16581) * C31225 +
            (C16582 - C16583 + C16584 - C16585) * C47481) *
               C47369 * C47430 +
           ((C16579 - C16578 + C16581 - C16580) * C31224 +
            (C16583 - C16582 + C16585 - C16584) * C31222 +
            (C16992 - C16993 + C16994 - C16995) * C31225 +
            (C16996 - C16997 + C16998 - C16999) * C47481) *
               C47369 * C47268) *
              C1285 +
          (((C15931 - C15930 + C15933 - C15932) * C31224 +
            (C15935 - C15934 + C15937 - C15936) * C31222 +
            (C17000 - C17001 + C17002 - C17003) * C31225 +
            (C17004 - C17005 + C17006 - C17007) * C47481) *
               C47369 * C47430 +
           ((C17001 - C17000 + C17003 - C17002) * C31224 +
            (C17005 - C17004 + C17007 - C17006) * C31222 +
            (C17008 - C17009 + C17010 - C17011) * C31225 +
            (C17012 - C17013 + C17014 - C17015) * C47481) *
               C47369 * C47268) *
              C1286 +
          (((C16831 - C16830 + C16833 - C16832) * C31224 +
            (C16835 - C16834 + C16837 - C16836) * C31222 +
            (C17486 - C17487 + C17488 - C17489) * C31225 +
            (C17490 - C17491 + C17492 - C17493) * C47481) *
               C47369 * C47430 +
           ((C17487 - C17486 + C17489 - C17488) * C31224 +
            (C17491 - C17490 + C17493 - C17492) * C31222 +
            (C15769 * C5807 - C15773 * C5805 + C47448 * C5808 -
             C15774 * C5806) *
                C31225 +
            (C15769 * C5811 - C15773 * C5809 + C47448 * C5812 -
             C15774 * C5810) *
                C47481) *
               C47369 * C47268) *
              C47471) *
         C47135) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C15769 * C124 - C15773 * C117 + C47448 * C125 - C15774 * C118) *
                 C31224 +
             (C15769 * C138 - C15773 * C127 + C47448 * C139 - C15774 * C128) *
                 C31222 +
             (C31519 - C31520 + C31521 - C31522) * C31225 +
             (C31523 - C31524 + C31525 - C31526) * C47481) *
                C47369 * C47430 +
            ((C31520 - C31519 + C31522 - C31521) * C31224 +
             (C31524 - C31523 + C31526 - C31525) * C31222 +
             (C31527 - C31528 + C31529 - C31530) * C31225 +
             (C31531 - C31532 + C31533 - C31534) * C47481) *
                C47369 * C47268) *
               C47429 +
           (((C15923 - C15922 + C15925 - C15924) * C31224 +
             (C15927 - C15926 + C15929 - C15928) * C31222 +
             (C16578 - C16579 + C16580 - C16581) * C31225 +
             (C16582 - C16583 + C16584 - C16585) * C47481) *
                C47369 * C47430 +
            ((C16579 - C16578 + C16581 - C16580) * C31224 +
             (C16583 - C16582 + C16585 - C16584) * C31222 +
             (C16992 - C16993 + C16994 - C16995) * C31225 +
             (C16996 - C16997 + C16998 - C16999) * C47481) *
                C47369 * C47268) *
               C47226) *
              C258 +
          ((((C15773 * C118 - C15769 * C125 + C15774 * C119 - C47448 * C126) *
                 C31224 +
             (C15773 * C128 - C15769 * C139 + C15774 * C129 - C47448 * C140) *
                 C31222 +
             (C31535 - C31536 + C31537 - C31538) * C31225 +
             (C31539 - C31540 + C31541 - C31542) * C47481) *
                C47369 * C47430 +
            ((C31536 - C31535 + C31538 - C31537) * C31224 +
             (C31540 - C31539 + C31542 - C31541) * C31222 +
             (C31543 - C31544 + C31545 - C31546) * C31225 +
             (C31547 - C31548 + C31549 - C31550) * C47481) *
                C47369 * C47268) *
               C47429 +
           (((C15939 - C15938 + C15941 - C15940) * C31224 +
             (C15943 - C15942 + C15945 - C15944) * C31222 +
             (C16586 - C16587 + C16588 - C16589) * C31225 +
             (C16590 - C16591 + C16592 - C16593) * C47481) *
                C47369 * C47430 +
            ((C16587 - C16586 + C16589 - C16588) * C31224 +
             (C16591 - C16590 + C16593 - C16592) * C31222 +
             (C18062 - C18063 + C18064 - C18065) * C31225 +
             (C18066 - C18067 + C18068 - C18069) * C47481) *
                C47369 * C47268) *
               C47226) *
              C259 +
          ((((C15769 * C126 - C15773 * C119 + C47448 * C130 - C15774 * C120) *
                 C31224 +
             (C15769 * C140 - C15773 * C129 + C47448 * C141 - C15774 * C131) *
                 C31222 +
             (C31551 - C31552 + C31553 - C31554) * C31225 +
             (C31555 - C31556 + C31557 - C31558) * C47481) *
                C47369 * C47430 +
            ((C31552 - C31551 + C31554 - C31553) * C31224 +
             (C31556 - C31555 + C31558 - C31557) * C31222 +
             (C31559 - C31560 + C31561 - C31562) * C31225 +
             (C31563 - C31564 + C31565 - C31566) * C47481) *
                C47369 * C47268) *
               C47429 +
           (((C15955 - C15954 + C15957 - C15956) * C31224 +
             (C15959 - C15958 + C15961 - C15960) * C31222 +
             (C16594 - C16595 + C16596 - C16597) * C31225 +
             (C16598 - C16599 + C16600 - C16601) * C47481) *
                C47369 * C47430 +
            ((C16595 - C16594 + C16597 - C16596) * C31224 +
             (C16599 - C16598 + C16601 - C16600) * C31222 +
             (C15769 * C1161 - C15773 * C1152 + C47448 * C2015 -
              C15774 * C2014) *
                 C31225 +
             (C15769 * C1179 - C15773 * C1164 + C47448 * C2017 -
              C15774 * C2016) *
                 C47481) *
                C47369 * C47268) *
               C47226) *
              C47455)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C15769 * C124 - C15773 * C117 + C47448 * C125 - C15774 * C118) *
                C31224 +
            (C15769 * C138 - C15773 * C127 + C47448 * C139 - C15774 * C128) *
                C31222 +
            (C31519 - C31520 + C31521 - C31522) * C31225 +
            (C31523 - C31524 + C31525 - C31526) * C47481) *
               C47369 * C2116 +
           ((C31520 - C31519 + C31522 - C31521) * C31224 +
            (C31524 - C31523 + C31526 - C31525) * C31222 +
            (C31527 - C31528 + C31529 - C31530) * C31225 +
            (C31531 - C31532 + C31533 - C31534) * C47481) *
               C47369 * C2117 +
           ((C31528 - C31527 + C31530 - C31529) * C31224 +
            (C31532 - C31531 + C31534 - C31533) * C31222 +
            (C33231 - C33232 + C33233 - C33234) * C31225 +
            (C33235 - C33236 + C33237 - C33238) * C47481) *
               C47369 * C2118 +
           ((C33232 - C33231 + C33234 - C33233) * C31224 +
            (C33236 - C33235 + C33238 - C33237) * C31222 +
            (C33239 - C33240 + C33241 - C33242) * C31225 +
            (C33243 - C33244 + C33245 - C33246) * C47481) *
               C47369 * C47477) *
              C47429 +
          (((C15923 - C15922 + C15925 - C15924) * C31224 +
            (C15927 - C15926 + C15929 - C15928) * C31222 +
            (C16578 - C16579 + C16580 - C16581) * C31225 +
            (C16582 - C16583 + C16584 - C16585) * C47481) *
               C47369 * C2116 +
           ((C16579 - C16578 + C16581 - C16580) * C31224 +
            (C16583 - C16582 + C16585 - C16584) * C31222 +
            (C16992 - C16993 + C16994 - C16995) * C31225 +
            (C16996 - C16997 + C16998 - C16999) * C47481) *
               C47369 * C2117 +
           ((C16993 - C16992 + C16995 - C16994) * C31224 +
            (C16997 - C16996 + C16999 - C16998) * C31222 +
            (C18330 - C18331 + C18332 - C18333) * C31225 +
            (C18334 - C18335 + C18336 - C18337) * C47481) *
               C47369 * C2118 +
           ((C18331 - C18330 + C18333 - C18332) * C31224 +
            (C18335 - C18334 + C18337 - C18336) * C31222 +
            (C15769 * C6699 - C15773 * C6697 + C47448 * C6700 -
             C15774 * C6698) *
                C31225 +
            (C15769 * C6703 - C15773 * C6701 + C47448 * C6704 -
             C15774 * C6702) *
                C47481) *
               C47369 * C47477) *
              C47226) *
         C47135) /
            (p * q * std::sqrt(p + q));
    d2ee[162] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((C15769 * C124 - C15773 * C117 + C47448 * C125 - C15774 * C118) *
                   C31224 +
               (C15769 * C138 - C15773 * C127 + C47448 * C139 - C15774 * C128) *
                   C31222 +
               (C15769 * C424 - C15773 * C414 + C47448 * C425 - C15774 * C415) *
                   C31225 +
               (C15769 * C444 - C15773 * C427 + C47448 * C445 - C15774 * C428) *
                   C47481) *
                  C47369 * C47181 * C47163 * C108 +
              ((C15773 * C118 - C15769 * C125 + C15774 * C119 - C47448 * C126) *
                   C31224 +
               (C15773 * C128 - C15769 * C139 + C15774 * C129 - C47448 * C140) *
                   C31222 +
               (C15773 * C415 - C15769 * C425 + C15774 * C416 - C47448 * C426) *
                   C31225 +
               (C15773 * C428 - C15769 * C445 + C15774 * C429 - C47448 * C446) *
                   C47481) *
                  C47369 * C47181 * C47163 * C109 +
              ((C15769 * C126 - C15773 * C119 + C47448 * C130 - C15774 * C120) *
                   C31224 +
               (C15769 * C140 - C15773 * C129 + C47448 * C141 - C15774 * C131) *
                   C31222 +
               (C15769 * C426 - C15773 * C416 + C47448 * C436 - C15774 * C420) *
                   C31225 +
               (C15769 * C446 - C15773 * C429 + C47448 * C450 - C15774 * C437) *
                   C47481) *
                  C47369 * C47181 * C47163 * C110 +
              ((C15773 * C120 - C15769 * C130 + C15774 * C121 - C47448 * C132) *
                   C31224 +
               (C15773 * C131 - C15769 * C141 + C15774 * C133 - C47448 * C142) *
                   C31222 +
               (C15773 * C420 - C15769 * C436 + C15774 * C422 - C47448 * C440) *
                   C31225 +
               (C15773 * C437 - C15769 * C450 + C15774 * C441 - C47448 * C452) *
                   C47481) *
                  C47369 * C47181 * C47163 * C111 +
              ((C15769 * C132 - C15773 * C121 + C47448 * C134 - C15774 * C122) *
                   C31224 +
               (C15769 * C142 - C15773 * C133 + C47448 * C143 - C15774 * C135) *
                   C31222 +
               (C15769 * C440 - C15773 * C422 + C47448 * C663 - C15774 * C662) *
                   C31225 +
               (C15769 * C452 - C15773 * C441 + C47448 * C665 - C15774 * C664) *
                   C47481) *
                  C47369 * C47181 * C47163 * C112) +
         0.5 * std::pow(Pi, 2.5) *
             ((((C15769 * C124 - C15773 * C117 + C47448 * C125 -
                 C15774 * C118) *
                    C31224 +
                (C15769 * C138 - C15773 * C127 + C47448 * C139 -
                 C15774 * C128) *
                    C31222 +
                (C15769 * C424 - C15773 * C414 + C47448 * C425 -
                 C15774 * C415) *
                    C31225 +
                (C15769 * C444 - C15773 * C427 + C47448 * C445 -
                 C15774 * C428) *
                    C47481) *
                   C47369 * C47181 * C47500 +
               ((C15923 - C15922 + C15925 - C15924) * C31224 +
                (C15927 - C15926 + C15929 - C15928) * C31222 +
                (C16578 - C16579 + C16580 - C16581) * C31225 +
                (C16582 - C16583 + C16584 - C16585) * C47481) *
                   C47369 * C47181 * C47488 +
               ((C15931 - C15930 + C15933 - C15932) * C31224 +
                (C15935 - C15934 + C15937 - C15936) * C31222 +
                (C17000 - C17001 + C17002 - C17003) * C31225 +
                (C17004 - C17005 + C17006 - C17007) * C47481) *
                   C47369 * C47181 * C47461) *
                  C258 +
              (((C15773 * C118 - C15769 * C125 + C15774 * C119 -
                 C47448 * C126) *
                    C31224 +
                (C15773 * C128 - C15769 * C139 + C15774 * C129 -
                 C47448 * C140) *
                    C31222 +
                (C15773 * C415 - C15769 * C425 + C15774 * C416 -
                 C47448 * C426) *
                    C31225 +
                (C15773 * C428 - C15769 * C445 + C15774 * C429 -
                 C47448 * C446) *
                    C47481) *
                   C47369 * C47181 * C47500 +
               ((C15939 - C15938 + C15941 - C15940) * C31224 +
                (C15943 - C15942 + C15945 - C15944) * C31222 +
                (C16586 - C16587 + C16588 - C16589) * C31225 +
                (C16590 - C16591 + C16592 - C16593) * C47481) *
                   C47369 * C47181 * C47488 +
               ((C15947 - C15946 + C15949 - C15948) * C31224 +
                (C15951 - C15950 + C15953 - C15952) * C31222 +
                (C17348 - C17349 + C17350 - C17351) * C31225 +
                (C17352 - C17353 + C17354 - C17355) * C47481) *
                   C47369 * C47181 * C47461) *
                  C259 +
              (((C15769 * C126 - C15773 * C119 + C47448 * C130 -
                 C15774 * C120) *
                    C31224 +
                (C15769 * C140 - C15773 * C129 + C47448 * C141 -
                 C15774 * C131) *
                    C31222 +
                (C15769 * C426 - C15773 * C416 + C47448 * C436 -
                 C15774 * C420) *
                    C31225 +
                (C15769 * C446 - C15773 * C429 + C47448 * C450 -
                 C15774 * C437) *
                    C47481) *
                   C47369 * C47181 * C47500 +
               ((C15955 - C15954 + C15957 - C15956) * C31224 +
                (C15959 - C15958 + C15961 - C15960) * C31222 +
                (C16594 - C16595 + C16596 - C16597) * C31225 +
                (C16598 - C16599 + C16600 - C16601) * C47481) *
                   C47369 * C47181 * C47488 +
               ((C15963 - C15962 + C15965 - C15964) * C31224 +
                (C15967 - C15966 + C15969 - C15968) * C31222 +
                (C15769 * C1167 - C15773 * C1155 + C47448 * C1441 -
                 C15774 * C1440) *
                    C31225 +
                (C15769 * C1182 - C15773 * C1170 + C47448 * C1443 -
                 C15774 * C1442) *
                    C47481) *
                   C47369 * C47181 * C47461) *
                  C47455)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C15769 * C124 - C15773 * C117 + C47448 * C125 - C15774 * C118) *
                C31224 +
            (C15769 * C138 - C15773 * C127 + C47448 * C139 - C15774 * C128) *
                C31222 +
            (C31519 - C31520 + C31521 - C31522) * C31225 +
            (C31523 - C31524 + C31525 - C31526) * C47481) *
               C47369 * C47501 +
           ((C31520 - C31519 + C31522 - C31521) * C31224 +
            (C31524 - C31523 + C31526 - C31525) * C31222 +
            (C31527 - C31528 + C31529 - C31530) * C31225 +
            (C31531 - C31532 + C31533 - C31534) * C47481) *
               C47369 * C47490 +
           ((C31528 - C31527 + C31530 - C31529) * C31224 +
            (C31532 - C31531 + C31534 - C31533) * C31222 +
            (C15769 * C1850 - C15773 * C1844 + C47448 * C1851 -
             C15774 * C1845) *
                C31225 +
            (C15769 * C1862 - C15773 * C1853 + C47448 * C1863 -
             C15774 * C1854) *
                C47481) *
               C47369 * C47464) *
              C47163 * C258 +
          (((C15773 * C118 - C15769 * C125 + C15774 * C119 - C47448 * C126) *
                C31224 +
            (C15773 * C128 - C15769 * C139 + C15774 * C129 - C47448 * C140) *
                C31222 +
            (C31535 - C31536 + C31537 - C31538) * C31225 +
            (C31539 - C31540 + C31541 - C31542) * C47481) *
               C47369 * C47501 +
           ((C31536 - C31535 + C31538 - C31537) * C31224 +
            (C31540 - C31539 + C31542 - C31541) * C31222 +
            (C31543 - C31544 + C31545 - C31546) * C31225 +
            (C31547 - C31548 + C31549 - C31550) * C47481) *
               C47369 * C47490 +
           ((C31544 - C31543 + C31546 - C31545) * C31224 +
            (C31548 - C31547 + C31550 - C31549) * C31222 +
            (C15773 * C1845 - C15769 * C1851 + C15774 * C1846 -
             C47448 * C1852) *
                C31225 +
            (C15773 * C1854 - C15769 * C1863 + C15774 * C1855 -
             C47448 * C1864) *
                C47481) *
               C47369 * C47464) *
              C47163 * C259 +
          (((C15769 * C126 - C15773 * C119 + C47448 * C130 - C15774 * C120) *
                C31224 +
            (C15769 * C140 - C15773 * C129 + C47448 * C141 - C15774 * C131) *
                C31222 +
            (C31551 - C31552 + C31553 - C31554) * C31225 +
            (C31555 - C31556 + C31557 - C31558) * C47481) *
               C47369 * C47501 +
           ((C31552 - C31551 + C31554 - C31553) * C31224 +
            (C31556 - C31555 + C31558 - C31557) * C31222 +
            (C31559 - C31560 + C31561 - C31562) * C31225 +
            (C31563 - C31564 + C31565 - C31566) * C47481) *
               C47369 * C47490 +
           ((C31560 - C31559 + C31562 - C31561) * C31224 +
            (C31564 - C31563 + C31566 - C31565) * C31222 +
            (C15769 * C1852 - C15773 * C1846 + C47448 * C2121 -
             C15774 * C2120) *
                C31225 +
            (C15769 * C1864 - C15773 * C1855 + C47448 * C2123 -
             C15774 * C2122) *
                C47481) *
               C47369 * C47464) *
              C47163 * C47455)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C15769 * C124 - C15773 * C117 + C47448 * C125 - C15774 * C118) *
                C31224 +
            (C15769 * C138 - C15773 * C127 + C47448 * C139 - C15774 * C128) *
                C31222 +
            (C31519 - C31520 + C31521 - C31522) * C31225 +
            (C31523 - C31524 + C31525 - C31526) * C47481) *
               C47369 * C47181 * C942 +
           ((C15923 - C15922 + C15925 - C15924) * C31224 +
            (C15927 - C15926 + C15929 - C15928) * C31222 +
            (C16578 - C16579 + C16580 - C16581) * C31225 +
            (C16582 - C16583 + C16584 - C16585) * C47481) *
               C47369 * C47181 * C943 +
           ((C15931 - C15930 + C15933 - C15932) * C31224 +
            (C15935 - C15934 + C15937 - C15936) * C31222 +
            (C17000 - C17001 + C17002 - C17003) * C31225 +
            (C17004 - C17005 + C17006 - C17007) * C47481) *
               C47369 * C47181 * C47461) *
              C47497 +
          (((C15773 * C118 - C15769 * C125 + C15774 * C119 - C47448 * C126) *
                C31224 +
            (C15773 * C128 - C15769 * C139 + C15774 * C129 - C47448 * C140) *
                C31222 +
            (C31535 - C31536 + C31537 - C31538) * C31225 +
            (C31539 - C31540 + C31541 - C31542) * C47481) *
               C47369 * C47181 * C942 +
           ((C15939 - C15938 + C15941 - C15940) * C31224 +
            (C15943 - C15942 + C15945 - C15944) * C31222 +
            (C16586 - C16587 + C16588 - C16589) * C31225 +
            (C16590 - C16591 + C16592 - C16593) * C47481) *
               C47369 * C47181 * C943 +
           ((C15947 - C15946 + C15949 - C15948) * C31224 +
            (C15951 - C15950 + C15953 - C15952) * C31222 +
            (C17348 - C17349 + C17350 - C17351) * C31225 +
            (C17352 - C17353 + C17354 - C17355) * C47481) *
               C47369 * C47181 * C47461) *
              C47484 +
          (((C15769 * C126 - C15773 * C119 + C47448 * C130 - C15774 * C120) *
                C31224 +
            (C15769 * C140 - C15773 * C129 + C47448 * C141 - C15774 * C131) *
                C31222 +
            (C31551 - C31552 + C31553 - C31554) * C31225 +
            (C31555 - C31556 + C31557 - C31558) * C47481) *
               C47369 * C47181 * C942 +
           ((C15955 - C15954 + C15957 - C15956) * C31224 +
            (C15959 - C15958 + C15961 - C15960) * C31222 +
            (C16594 - C16595 + C16596 - C16597) * C31225 +
            (C16598 - C16599 + C16600 - C16601) * C47481) *
               C47369 * C47181 * C943 +
           ((C15963 - C15962 + C15965 - C15964) * C31224 +
            (C15967 - C15966 + C15969 - C15968) * C31222 +
            (C15769 * C1167 - C15773 * C1155 + C47448 * C1441 -
             C15774 * C1440) *
                C31225 +
            (C15769 * C1182 - C15773 * C1170 + C47448 * C1443 -
             C15774 * C1442) *
                C47481) *
               C47369 * C47181 * C47461) *
              C47455)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C15769 * C124 - C15773 * C117 + C47448 * C125 - C15774 * C118) *
               C31224 +
           (C15769 * C138 - C15773 * C127 + C47448 * C139 - C15774 * C128) *
               C31222 +
           (C31519 - C31520 + C31521 - C31522) * C31225 +
           (C31523 - C31524 + C31525 - C31526) * C47481) *
              C47369 * C47181 * C1010 +
          ((C15923 - C15922 + C15925 - C15924) * C31224 +
           (C15927 - C15926 + C15929 - C15928) * C31222 +
           (C16578 - C16579 + C16580 - C16581) * C31225 +
           (C16582 - C16583 + C16584 - C16585) * C47481) *
              C47369 * C47181 * C1011 +
          ((C15931 - C15930 + C15933 - C15932) * C31224 +
           (C15935 - C15934 + C15937 - C15936) * C31222 +
           (C17000 - C17001 + C17002 - C17003) * C31225 +
           (C17004 - C17005 + C17006 - C17007) * C47481) *
              C47369 * C47181 * C1012 +
          ((C16831 - C16830 + C16833 - C16832) * C31224 +
           (C16835 - C16834 + C16837 - C16836) * C31222 +
           (C17486 - C17487 + C17488 - C17489) * C31225 +
           (C17490 - C17491 + C17492 - C17493) * C47481) *
              C47369 * C47181 * C1013 +
          ((C16839 - C16838 + C16841 - C16840) * C31224 +
           (C16843 - C16842 + C16845 - C16844) * C31222 +
           (C15769 * C6309 - C15773 * C6307 + C47448 * C6310 - C15774 * C6308) *
               C31225 +
           (C15769 * C6313 - C15773 * C6311 + C47448 * C6314 - C15774 * C6312) *
               C47481) *
              C47369 * C47181 * C1014) *
         C47135) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C15769 * C124 - C15773 * C117 + C47448 * C125 - C15774 * C118) *
                C31224 +
            (C15769 * C138 - C15773 * C127 + C47448 * C139 - C15774 * C128) *
                C31222 +
            (C31519 - C31520 + C31521 - C31522) * C31225 +
            (C31523 - C31524 + C31525 - C31526) * C47481) *
               C47369 * C47501 +
           ((C31520 - C31519 + C31522 - C31521) * C31224 +
            (C31524 - C31523 + C31526 - C31525) * C31222 +
            (C31527 - C31528 + C31529 - C31530) * C31225 +
            (C31531 - C31532 + C31533 - C31534) * C47481) *
               C47369 * C47490 +
           ((C31528 - C31527 + C31530 - C31529) * C31224 +
            (C31532 - C31531 + C31534 - C31533) * C31222 +
            (C15769 * C1850 - C15773 * C1844 + C47448 * C1851 -
             C15774 * C1845) *
                C31225 +
            (C15769 * C1862 - C15773 * C1853 + C47448 * C1863 -
             C15774 * C1854) *
                C47481) *
               C47369 * C47464) *
              C942 +
          (((C15923 - C15922 + C15925 - C15924) * C31224 +
            (C15927 - C15926 + C15929 - C15928) * C31222 +
            (C16578 - C16579 + C16580 - C16581) * C31225 +
            (C16582 - C16583 + C16584 - C16585) * C47481) *
               C47369 * C47501 +
           ((C16579 - C16578 + C16581 - C16580) * C31224 +
            (C16583 - C16582 + C16585 - C16584) * C31222 +
            (C16992 - C16993 + C16994 - C16995) * C31225 +
            (C16996 - C16997 + C16998 - C16999) * C47481) *
               C47369 * C47490 +
           ((C16993 - C16992 + C16995 - C16994) * C31224 +
            (C16997 - C16996 + C16999 - C16998) * C31222 +
            (C18330 - C18331 + C18332 - C18333) * C31225 +
            (C18334 - C18335 + C18336 - C18337) * C47481) *
               C47369 * C47464) *
              C943 +
          (((C15931 - C15930 + C15933 - C15932) * C31224 +
            (C15935 - C15934 + C15937 - C15936) * C31222 +
            (C17000 - C17001 + C17002 - C17003) * C31225 +
            (C17004 - C17005 + C17006 - C17007) * C47481) *
               C47369 * C47501 +
           ((C17001 - C17000 + C17003 - C17002) * C31224 +
            (C17005 - C17004 + C17007 - C17006) * C31222 +
            (C17008 - C17009 + C17010 - C17011) * C31225 +
            (C17012 - C17013 + C17014 - C17015) * C47481) *
               C47369 * C47490 +
           ((C17009 - C17008 + C17011 - C17010) * C31224 +
            (C17013 - C17012 + C17015 - C17014) * C31222 +
            (C15769 * C7169 - C15773 * C7167 + C47448 * C7170 -
             C15774 * C7168) *
                C31225 +
            (C15769 * C7173 - C15773 * C7171 + C47448 * C7174 -
             C15774 * C7172) *
                C47481) *
               C47369 * C47464) *
              C47461) *
         C47135) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C15769 * C124 - C15773 * C117 + C47448 * C125 - C15774 * C118) *
                C31224 +
            (C15769 * C138 - C15773 * C127 + C47448 * C139 - C15774 * C128) *
                C31222 +
            (C31519 - C31520 + C31521 - C31522) * C31225 +
            (C31523 - C31524 + C31525 - C31526) * C47481) *
               C47369 * C1664 +
           ((C31520 - C31519 + C31522 - C31521) * C31224 +
            (C31524 - C31523 + C31526 - C31525) * C31222 +
            (C31527 - C31528 + C31529 - C31530) * C31225 +
            (C31531 - C31532 + C31533 - C31534) * C47481) *
               C47369 * C1665 +
           ((C31528 - C31527 + C31530 - C31529) * C31224 +
            (C31532 - C31531 + C31534 - C31533) * C31222 +
            (C15769 * C1850 - C15773 * C1844 + C47448 * C1851 -
             C15774 * C1845) *
                C31225 +
            (C15769 * C1862 - C15773 * C1853 + C47448 * C1863 -
             C15774 * C1854) *
                C47481) *
               C47369 * C47464) *
              C47163 * C47497 +
          (((C15773 * C118 - C15769 * C125 + C15774 * C119 - C47448 * C126) *
                C31224 +
            (C15773 * C128 - C15769 * C139 + C15774 * C129 - C47448 * C140) *
                C31222 +
            (C31535 - C31536 + C31537 - C31538) * C31225 +
            (C31539 - C31540 + C31541 - C31542) * C47481) *
               C47369 * C1664 +
           ((C31536 - C31535 + C31538 - C31537) * C31224 +
            (C31540 - C31539 + C31542 - C31541) * C31222 +
            (C31543 - C31544 + C31545 - C31546) * C31225 +
            (C31547 - C31548 + C31549 - C31550) * C47481) *
               C47369 * C1665 +
           ((C31544 - C31543 + C31546 - C31545) * C31224 +
            (C31548 - C31547 + C31550 - C31549) * C31222 +
            (C15773 * C1845 - C15769 * C1851 + C15774 * C1846 -
             C47448 * C1852) *
                C31225 +
            (C15773 * C1854 - C15769 * C1863 + C15774 * C1855 -
             C47448 * C1864) *
                C47481) *
               C47369 * C47464) *
              C47163 * C47484 +
          (((C15769 * C126 - C15773 * C119 + C47448 * C130 - C15774 * C120) *
                C31224 +
            (C15769 * C140 - C15773 * C129 + C47448 * C141 - C15774 * C131) *
                C31222 +
            (C31551 - C31552 + C31553 - C31554) * C31225 +
            (C31555 - C31556 + C31557 - C31558) * C47481) *
               C47369 * C1664 +
           ((C31552 - C31551 + C31554 - C31553) * C31224 +
            (C31556 - C31555 + C31558 - C31557) * C31222 +
            (C31559 - C31560 + C31561 - C31562) * C31225 +
            (C31563 - C31564 + C31565 - C31566) * C47481) *
               C47369 * C1665 +
           ((C31560 - C31559 + C31562 - C31561) * C31224 +
            (C31564 - C31563 + C31566 - C31565) * C31222 +
            (C15769 * C1852 - C15773 * C1846 + C47448 * C2121 -
             C15774 * C2120) *
                C31225 +
            (C15769 * C1864 - C15773 * C1855 + C47448 * C2123 -
             C15774 * C2122) *
                C47481) *
               C47369 * C47464) *
              C47163 * C47455)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C15769 * C124 - C15773 * C117 + C47448 * C125 - C15774 * C118) *
                C31224 +
            (C15769 * C138 - C15773 * C127 + C47448 * C139 - C15774 * C128) *
                C31222 +
            (C31519 - C31520 + C31521 - C31522) * C31225 +
            (C31523 - C31524 + C31525 - C31526) * C47481) *
               C47369 * C1664 +
           ((C31520 - C31519 + C31522 - C31521) * C31224 +
            (C31524 - C31523 + C31526 - C31525) * C31222 +
            (C31527 - C31528 + C31529 - C31530) * C31225 +
            (C31531 - C31532 + C31533 - C31534) * C47481) *
               C47369 * C1665 +
           ((C31528 - C31527 + C31530 - C31529) * C31224 +
            (C31532 - C31531 + C31534 - C31533) * C31222 +
            (C15769 * C1850 - C15773 * C1844 + C47448 * C1851 -
             C15774 * C1845) *
                C31225 +
            (C15769 * C1862 - C15773 * C1853 + C47448 * C1863 -
             C15774 * C1854) *
                C47481) *
               C47369 * C47464) *
              C47500 +
          (((C15923 - C15922 + C15925 - C15924) * C31224 +
            (C15927 - C15926 + C15929 - C15928) * C31222 +
            (C16578 - C16579 + C16580 - C16581) * C31225 +
            (C16582 - C16583 + C16584 - C16585) * C47481) *
               C47369 * C1664 +
           ((C16579 - C16578 + C16581 - C16580) * C31224 +
            (C16583 - C16582 + C16585 - C16584) * C31222 +
            (C16992 - C16993 + C16994 - C16995) * C31225 +
            (C16996 - C16997 + C16998 - C16999) * C47481) *
               C47369 * C1665 +
           ((C16993 - C16992 + C16995 - C16994) * C31224 +
            (C16997 - C16996 + C16999 - C16998) * C31222 +
            (C18330 - C18331 + C18332 - C18333) * C31225 +
            (C18334 - C18335 + C18336 - C18337) * C47481) *
               C47369 * C47464) *
              C47488 +
          (((C15931 - C15930 + C15933 - C15932) * C31224 +
            (C15935 - C15934 + C15937 - C15936) * C31222 +
            (C17000 - C17001 + C17002 - C17003) * C31225 +
            (C17004 - C17005 + C17006 - C17007) * C47481) *
               C47369 * C1664 +
           ((C17001 - C17000 + C17003 - C17002) * C31224 +
            (C17005 - C17004 + C17007 - C17006) * C31222 +
            (C17008 - C17009 + C17010 - C17011) * C31225 +
            (C17012 - C17013 + C17014 - C17015) * C47481) *
               C47369 * C1665 +
           ((C17009 - C17008 + C17011 - C17010) * C31224 +
            (C17013 - C17012 + C17015 - C17014) * C31222 +
            (C15769 * C7169 - C15773 * C7167 + C47448 * C7170 -
             C15774 * C7168) *
                C31225 +
            (C15769 * C7173 - C15773 * C7171 + C47448 * C7174 -
             C15774 * C7172) *
                C47481) *
               C47369 * C47464) *
              C47461) *
         C47135) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C15769 * C124 - C15773 * C117 + C47448 * C125 - C15774 * C118) *
               C31224 +
           (C15769 * C138 - C15773 * C127 + C47448 * C139 - C15774 * C128) *
               C31222 +
           (C31519 - C31520 + C31521 - C31522) * C31225 +
           (C31523 - C31524 + C31525 - C31526) * C47481) *
              C47369 * C1839 +
          ((C31520 - C31519 + C31522 - C31521) * C31224 +
           (C31524 - C31523 + C31526 - C31525) * C31222 +
           (C31527 - C31528 + C31529 - C31530) * C31225 +
           (C31531 - C31532 + C31533 - C31534) * C47481) *
              C47369 * C1840 +
          ((C31528 - C31527 + C31530 - C31529) * C31224 +
           (C31532 - C31531 + C31534 - C31533) * C31222 +
           (C33231 - C33232 + C33233 - C33234) * C31225 +
           (C33235 - C33236 + C33237 - C33238) * C47481) *
              C47369 * C1841 +
          ((C33232 - C33231 + C33234 - C33233) * C31224 +
           (C33236 - C33235 + C33238 - C33237) * C31222 +
           (C33239 - C33240 + C33241 - C33242) * C31225 +
           (C33243 - C33244 + C33245 - C33246) * C47481) *
              C47369 * C1842 +
          ((C33240 - C33239 + C33242 - C33241) * C31224 +
           (C33244 - C33243 + C33246 - C33245) * C31222 +
           (C15769 * C12239 - C15773 * C12237 + C47448 * C12240 -
            C15774 * C12238) *
               C31225 +
           (C15769 * C12243 - C15773 * C12241 + C47448 * C12244 -
            C15774 * C12242) *
               C47481) *
              C47369 * C1843) *
         C47163 * C47135) /
            (p * q * std::sqrt(p + q));
    d2ee[163] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C15769 * C124 - C15773 * C117 + C47448 * C125 - C15774 * C118) *
                 C31224 +
             (C15769 * C138 - C15773 * C127 + C47448 * C139 - C15774 * C128) *
                 C31222 +
             (C31519 - C31520 + C31521 - C31522) * C31225 +
             (C31523 - C31524 + C31525 - C31526) * C47481) *
                C47369 * C47430 +
            ((C31520 - C31519 + C31522 - C31521) * C31224 +
             (C31524 - C31523 + C31526 - C31525) * C31222 +
             (C31527 - C31528 + C31529 - C31530) * C31225 +
             (C31531 - C31532 + C31533 - C31534) * C47481) *
                C47369 * C47268) *
               C942 +
           (((C15923 - C15922 + C15925 - C15924) * C31224 +
             (C15927 - C15926 + C15929 - C15928) * C31222 +
             (C16578 - C16579 + C16580 - C16581) * C31225 +
             (C16582 - C16583 + C16584 - C16585) * C47481) *
                C47369 * C47430 +
            ((C16579 - C16578 + C16581 - C16580) * C31224 +
             (C16583 - C16582 + C16585 - C16584) * C31222 +
             (C16992 - C16993 + C16994 - C16995) * C31225 +
             (C16996 - C16997 + C16998 - C16999) * C47481) *
                C47369 * C47268) *
               C943 +
           (((C15931 - C15930 + C15933 - C15932) * C31224 +
             (C15935 - C15934 + C15937 - C15936) * C31222 +
             (C17000 - C17001 + C17002 - C17003) * C31225 +
             (C17004 - C17005 + C17006 - C17007) * C47481) *
                C47369 * C47430 +
            ((C17001 - C17000 + C17003 - C17002) * C31224 +
             (C17005 - C17004 + C17007 - C17006) * C31222 +
             (C17008 - C17009 + C17010 - C17011) * C31225 +
             (C17012 - C17013 + C17014 - C17015) * C47481) *
                C47369 * C47268) *
               C47461) *
              C47415 +
          ((((C15773 * C118 - C15769 * C125 + C15774 * C119 - C47448 * C126) *
                 C31224 +
             (C15773 * C128 - C15769 * C139 + C15774 * C129 - C47448 * C140) *
                 C31222 +
             (C31535 - C31536 + C31537 - C31538) * C31225 +
             (C31539 - C31540 + C31541 - C31542) * C47481) *
                C47369 * C47430 +
            ((C31536 - C31535 + C31538 - C31537) * C31224 +
             (C31540 - C31539 + C31542 - C31541) * C31222 +
             (C31543 - C31544 + C31545 - C31546) * C31225 +
             (C31547 - C31548 + C31549 - C31550) * C47481) *
                C47369 * C47268) *
               C942 +
           (((C15939 - C15938 + C15941 - C15940) * C31224 +
             (C15943 - C15942 + C15945 - C15944) * C31222 +
             (C16586 - C16587 + C16588 - C16589) * C31225 +
             (C16590 - C16591 + C16592 - C16593) * C47481) *
                C47369 * C47430 +
            ((C16587 - C16586 + C16589 - C16588) * C31224 +
             (C16591 - C16590 + C16593 - C16592) * C31222 +
             (C18062 - C18063 + C18064 - C18065) * C31225 +
             (C18066 - C18067 + C18068 - C18069) * C47481) *
                C47369 * C47268) *
               C943 +
           (((C15947 - C15946 + C15949 - C15948) * C31224 +
             (C15951 - C15950 + C15953 - C15952) * C31222 +
             (C17348 - C17349 + C17350 - C17351) * C31225 +
             (C17352 - C17353 + C17354 - C17355) * C47481) *
                C47369 * C47430 +
            ((C17349 - C17348 + C17351 - C17350) * C31224 +
             (C17353 - C17352 + C17355 - C17354) * C31222 +
             (C15769 * C1172 - C15773 * C1157 + C47448 * C1173 -
              C15774 * C1158) *
                 C31225 +
             (C15769 * C1184 - C15773 * C1175 + C47448 * C1185 -
              C15774 * C1176) *
                 C47481) *
                C47369 * C47268) *
               C47461) *
              C47146)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C15769 * C124 - C15773 * C117 + C47448 * C125 - C15774 * C118) *
                C31224 +
            (C15769 * C138 - C15773 * C127 + C47448 * C139 - C15774 * C128) *
                C31222 +
            (C31519 - C31520 + C31521 - C31522) * C31225 +
            (C31523 - C31524 + C31525 - C31526) * C47481) *
               C47369 * C47430 +
           ((C31520 - C31519 + C31522 - C31521) * C31224 +
            (C31524 - C31523 + C31526 - C31525) * C31222 +
            (C31527 - C31528 + C31529 - C31530) * C31225 +
            (C31531 - C31532 + C31533 - C31534) * C47481) *
               C47369 * C47268) *
              C47163 * C554 +
          (((C15773 * C118 - C15769 * C125 + C15774 * C119 - C47448 * C126) *
                C31224 +
            (C15773 * C128 - C15769 * C139 + C15774 * C129 - C47448 * C140) *
                C31222 +
            (C31535 - C31536 + C31537 - C31538) * C31225 +
            (C31539 - C31540 + C31541 - C31542) * C47481) *
               C47369 * C47430 +
           ((C31536 - C31535 + C31538 - C31537) * C31224 +
            (C31540 - C31539 + C31542 - C31541) * C31222 +
            (C31543 - C31544 + C31545 - C31546) * C31225 +
            (C31547 - C31548 + C31549 - C31550) * C47481) *
               C47369 * C47268) *
              C47163 * C555 +
          (((C15769 * C126 - C15773 * C119 + C47448 * C130 - C15774 * C120) *
                C31224 +
            (C15769 * C140 - C15773 * C129 + C47448 * C141 - C15774 * C131) *
                C31222 +
            (C31551 - C31552 + C31553 - C31554) * C31225 +
            (C31555 - C31556 + C31557 - C31558) * C47481) *
               C47369 * C47430 +
           ((C31552 - C31551 + C31554 - C31553) * C31224 +
            (C31556 - C31555 + C31558 - C31557) * C31222 +
            (C31559 - C31560 + C31561 - C31562) * C31225 +
            (C31563 - C31564 + C31565 - C31566) * C47481) *
               C47369 * C47268) *
              C47163 * C556 +
          (((C15773 * C120 - C15769 * C130 + C15774 * C121 - C47448 * C132) *
                C31224 +
            (C15773 * C131 - C15769 * C141 + C15774 * C133 - C47448 * C142) *
                C31222 +
            (C31827 - C31828 + C31829 - C31830) * C31225 +
            (C31831 - C31832 + C31833 - C31834) * C47481) *
               C47369 * C47430 +
           ((C31828 - C31827 + C31830 - C31829) * C31224 +
            (C31832 - C31831 + C31834 - C31833) * C31222 +
            (C15769 * C438 - C15773 * C421 + C47448 * C442 - C15774 * C423) *
                C31225 +
            (C15769 * C451 - C15773 * C439 + C47448 * C453 - C15774 * C443) *
                C47481) *
               C47369 * C47268) *
              C47163 * C47465)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C15769 * C124 - C15773 * C117 + C47448 * C125 - C15774 * C118) *
                C31224 +
            (C15769 * C138 - C15773 * C127 + C47448 * C139 - C15774 * C128) *
                C31222 +
            (C31519 - C31520 + C31521 - C31522) * C31225 +
            (C31523 - C31524 + C31525 - C31526) * C47481) *
               C47369 * C2116 +
           ((C31520 - C31519 + C31522 - C31521) * C31224 +
            (C31524 - C31523 + C31526 - C31525) * C31222 +
            (C31527 - C31528 + C31529 - C31530) * C31225 +
            (C31531 - C31532 + C31533 - C31534) * C47481) *
               C47369 * C2117 +
           ((C31528 - C31527 + C31530 - C31529) * C31224 +
            (C31532 - C31531 + C31534 - C31533) * C31222 +
            (C33231 - C33232 + C33233 - C33234) * C31225 +
            (C33235 - C33236 + C33237 - C33238) * C47481) *
               C47369 * C2118 +
           ((C33232 - C33231 + C33234 - C33233) * C31224 +
            (C33236 - C33235 + C33238 - C33237) * C31222 +
            (C33239 - C33240 + C33241 - C33242) * C31225 +
            (C33243 - C33244 + C33245 - C33246) * C47481) *
               C47369 * C47477) *
              C47163 * C47415 +
          (((C15773 * C118 - C15769 * C125 + C15774 * C119 - C47448 * C126) *
                C31224 +
            (C15773 * C128 - C15769 * C139 + C15774 * C129 - C47448 * C140) *
                C31222 +
            (C31535 - C31536 + C31537 - C31538) * C31225 +
            (C31539 - C31540 + C31541 - C31542) * C47481) *
               C47369 * C2116 +
           ((C31536 - C31535 + C31538 - C31537) * C31224 +
            (C31540 - C31539 + C31542 - C31541) * C31222 +
            (C31543 - C31544 + C31545 - C31546) * C31225 +
            (C31547 - C31548 + C31549 - C31550) * C47481) *
               C47369 * C2117 +
           ((C31544 - C31543 + C31546 - C31545) * C31224 +
            (C31548 - C31547 + C31550 - C31549) * C31222 +
            (C33571 - C33572 + C33573 - C33574) * C31225 +
            (C33575 - C33576 + C33577 - C33578) * C47481) *
               C47369 * C2118 +
           ((C33572 - C33571 + C33574 - C33573) * C31224 +
            (C33576 - C33575 + C33578 - C33577) * C31222 +
            (C15769 * C1857 - C15773 * C1848 + C47448 * C1858 -
             C15774 * C1849) *
                C31225 +
            (C15769 * C1866 - C15773 * C1860 + C47448 * C1867 -
             C15774 * C1861) *
                C47481) *
               C47369 * C47477) *
              C47163 * C47146)) /
            (p * q * std::sqrt(p + q));
    d2ee[164] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C15769 * C124 - C15773 * C117 + C47448 * C125 - C15774 * C118) *
                C31224 +
            (C15769 * C138 - C15773 * C127 + C47448 * C139 - C15774 * C128) *
                C31222 +
            (C15769 * C424 - C15773 * C414 + C47448 * C425 - C15774 * C415) *
                C31225 +
            (C15769 * C444 - C15773 * C427 + C47448 * C445 - C15774 * C428) *
                C47481) *
               C47369 * C47181 * C47500 +
           ((C15923 - C15922 + C15925 - C15924) * C31224 +
            (C15927 - C15926 + C15929 - C15928) * C31222 +
            (C16578 - C16579 + C16580 - C16581) * C31225 +
            (C16582 - C16583 + C16584 - C16585) * C47481) *
               C47369 * C47181 * C47488 +
           ((C15931 - C15930 + C15933 - C15932) * C31224 +
            (C15935 - C15934 + C15937 - C15936) * C31222 +
            (C17000 - C17001 + C17002 - C17003) * C31225 +
            (C17004 - C17005 + C17006 - C17007) * C47481) *
               C47369 * C47181 * C47461) *
              C258 +
          (((C15773 * C118 - C15769 * C125 + C15774 * C119 - C47448 * C126) *
                C31224 +
            (C15773 * C128 - C15769 * C139 + C15774 * C129 - C47448 * C140) *
                C31222 +
            (C15773 * C415 - C15769 * C425 + C15774 * C416 - C47448 * C426) *
                C31225 +
            (C15773 * C428 - C15769 * C445 + C15774 * C429 - C47448 * C446) *
                C47481) *
               C47369 * C47181 * C47500 +
           ((C15939 - C15938 + C15941 - C15940) * C31224 +
            (C15943 - C15942 + C15945 - C15944) * C31222 +
            (C16586 - C16587 + C16588 - C16589) * C31225 +
            (C16590 - C16591 + C16592 - C16593) * C47481) *
               C47369 * C47181 * C47488 +
           ((C15947 - C15946 + C15949 - C15948) * C31224 +
            (C15951 - C15950 + C15953 - C15952) * C31222 +
            (C17348 - C17349 + C17350 - C17351) * C31225 +
            (C17352 - C17353 + C17354 - C17355) * C47481) *
               C47369 * C47181 * C47461) *
              C259 +
          (((C15769 * C126 - C15773 * C119 + C47448 * C130 - C15774 * C120) *
                C31224 +
            (C15769 * C140 - C15773 * C129 + C47448 * C141 - C15774 * C131) *
                C31222 +
            (C15769 * C426 - C15773 * C416 + C47448 * C436 - C15774 * C420) *
                C31225 +
            (C15769 * C446 - C15773 * C429 + C47448 * C450 - C15774 * C437) *
                C47481) *
               C47369 * C47181 * C47500 +
           ((C15955 - C15954 + C15957 - C15956) * C31224 +
            (C15959 - C15958 + C15961 - C15960) * C31222 +
            (C16594 - C16595 + C16596 - C16597) * C31225 +
            (C16598 - C16599 + C16600 - C16601) * C47481) *
               C47369 * C47181 * C47488 +
           ((C15963 - C15962 + C15965 - C15964) * C31224 +
            (C15967 - C15966 + C15969 - C15968) * C31222 +
            (C15769 * C1167 - C15773 * C1155 + C47448 * C1441 -
             C15774 * C1440) *
                C31225 +
            (C15769 * C1182 - C15773 * C1170 + C47448 * C1443 -
             C15774 * C1442) *
                C47481) *
               C47369 * C47181 * C47461) *
              C47455)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C15769 * C124 - C15773 * C117 + C47448 * C125 - C15774 * C118) *
               C31224 +
           (C15769 * C138 - C15773 * C127 + C47448 * C139 - C15774 * C128) *
               C31222 +
           (C15769 * C424 - C15773 * C414 + C47448 * C425 - C15774 * C415) *
               C31225 +
           (C15769 * C444 - C15773 * C427 + C47448 * C445 - C15774 * C428) *
               C47481) *
              C47369 * C47181 * C47163 * C108 +
          ((C15773 * C118 - C15769 * C125 + C15774 * C119 - C47448 * C126) *
               C31224 +
           (C15773 * C128 - C15769 * C139 + C15774 * C129 - C47448 * C140) *
               C31222 +
           (C15773 * C415 - C15769 * C425 + C15774 * C416 - C47448 * C426) *
               C31225 +
           (C15773 * C428 - C15769 * C445 + C15774 * C429 - C47448 * C446) *
               C47481) *
              C47369 * C47181 * C47163 * C109 +
          ((C15769 * C126 - C15773 * C119 + C47448 * C130 - C15774 * C120) *
               C31224 +
           (C15769 * C140 - C15773 * C129 + C47448 * C141 - C15774 * C131) *
               C31222 +
           (C15769 * C426 - C15773 * C416 + C47448 * C436 - C15774 * C420) *
               C31225 +
           (C15769 * C446 - C15773 * C429 + C47448 * C450 - C15774 * C437) *
               C47481) *
              C47369 * C47181 * C47163 * C110 +
          ((C15773 * C120 - C15769 * C130 + C15774 * C121 - C47448 * C132) *
               C31224 +
           (C15773 * C131 - C15769 * C141 + C15774 * C133 - C47448 * C142) *
               C31222 +
           (C15773 * C420 - C15769 * C436 + C15774 * C422 - C47448 * C440) *
               C31225 +
           (C15773 * C437 - C15769 * C450 + C15774 * C441 - C47448 * C452) *
               C47481) *
              C47369 * C47181 * C47163 * C111 +
          ((C15769 * C132 - C15773 * C121 + C47448 * C134 - C15774 * C122) *
               C31224 +
           (C15769 * C142 - C15773 * C133 + C47448 * C143 - C15774 * C135) *
               C31222 +
           (C15769 * C440 - C15773 * C422 + C47448 * C663 - C15774 * C662) *
               C31225 +
           (C15769 * C452 - C15773 * C441 + C47448 * C665 - C15774 * C664) *
               C47481) *
              C47369 * C47181 * C47163 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C15769 * C124 - C15773 * C117 + C47448 * C125 - C15774 * C118) *
                C31224 +
            (C15769 * C138 - C15773 * C127 + C47448 * C139 - C15774 * C128) *
                C31222 +
            (C31519 - C31520 + C31521 - C31522) * C31225 +
            (C31523 - C31524 + C31525 - C31526) * C47481) *
               C47369 * C47181 * C942 +
           ((C15923 - C15922 + C15925 - C15924) * C31224 +
            (C15927 - C15926 + C15929 - C15928) * C31222 +
            (C16578 - C16579 + C16580 - C16581) * C31225 +
            (C16582 - C16583 + C16584 - C16585) * C47481) *
               C47369 * C47181 * C943 +
           ((C15931 - C15930 + C15933 - C15932) * C31224 +
            (C15935 - C15934 + C15937 - C15936) * C31222 +
            (C17000 - C17001 + C17002 - C17003) * C31225 +
            (C17004 - C17005 + C17006 - C17007) * C47481) *
               C47369 * C47181 * C47461) *
              C47497 +
          (((C15773 * C118 - C15769 * C125 + C15774 * C119 - C47448 * C126) *
                C31224 +
            (C15773 * C128 - C15769 * C139 + C15774 * C129 - C47448 * C140) *
                C31222 +
            (C31535 - C31536 + C31537 - C31538) * C31225 +
            (C31539 - C31540 + C31541 - C31542) * C47481) *
               C47369 * C47181 * C942 +
           ((C15939 - C15938 + C15941 - C15940) * C31224 +
            (C15943 - C15942 + C15945 - C15944) * C31222 +
            (C16586 - C16587 + C16588 - C16589) * C31225 +
            (C16590 - C16591 + C16592 - C16593) * C47481) *
               C47369 * C47181 * C943 +
           ((C15947 - C15946 + C15949 - C15948) * C31224 +
            (C15951 - C15950 + C15953 - C15952) * C31222 +
            (C17348 - C17349 + C17350 - C17351) * C31225 +
            (C17352 - C17353 + C17354 - C17355) * C47481) *
               C47369 * C47181 * C47461) *
              C47484 +
          (((C15769 * C126 - C15773 * C119 + C47448 * C130 - C15774 * C120) *
                C31224 +
            (C15769 * C140 - C15773 * C129 + C47448 * C141 - C15774 * C131) *
                C31222 +
            (C31551 - C31552 + C31553 - C31554) * C31225 +
            (C31555 - C31556 + C31557 - C31558) * C47481) *
               C47369 * C47181 * C942 +
           ((C15955 - C15954 + C15957 - C15956) * C31224 +
            (C15959 - C15958 + C15961 - C15960) * C31222 +
            (C16594 - C16595 + C16596 - C16597) * C31225 +
            (C16598 - C16599 + C16600 - C16601) * C47481) *
               C47369 * C47181 * C943 +
           ((C15963 - C15962 + C15965 - C15964) * C31224 +
            (C15967 - C15966 + C15969 - C15968) * C31222 +
            (C15769 * C1167 - C15773 * C1155 + C47448 * C1441 -
             C15774 * C1440) *
                C31225 +
            (C15769 * C1182 - C15773 * C1170 + C47448 * C1443 -
             C15774 * C1442) *
                C47481) *
               C47369 * C47181 * C47461) *
              C47455)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C15769 * C124 - C15773 * C117 + C47448 * C125 - C15774 * C118) *
               C31224 +
           (C15769 * C138 - C15773 * C127 + C47448 * C139 - C15774 * C128) *
               C31222 +
           (C31519 - C31520 + C31521 - C31522) * C31225 +
           (C31523 - C31524 + C31525 - C31526) * C47481) *
              C47369 * C47181 * C1010 +
          ((C15923 - C15922 + C15925 - C15924) * C31224 +
           (C15927 - C15926 + C15929 - C15928) * C31222 +
           (C16578 - C16579 + C16580 - C16581) * C31225 +
           (C16582 - C16583 + C16584 - C16585) * C47481) *
              C47369 * C47181 * C1011 +
          ((C15931 - C15930 + C15933 - C15932) * C31224 +
           (C15935 - C15934 + C15937 - C15936) * C31222 +
           (C17000 - C17001 + C17002 - C17003) * C31225 +
           (C17004 - C17005 + C17006 - C17007) * C47481) *
              C47369 * C47181 * C1012 +
          ((C16831 - C16830 + C16833 - C16832) * C31224 +
           (C16835 - C16834 + C16837 - C16836) * C31222 +
           (C17486 - C17487 + C17488 - C17489) * C31225 +
           (C17490 - C17491 + C17492 - C17493) * C47481) *
              C47369 * C47181 * C1013 +
          ((C16839 - C16838 + C16841 - C16840) * C31224 +
           (C16843 - C16842 + C16845 - C16844) * C31222 +
           (C15769 * C6309 - C15773 * C6307 + C47448 * C6310 - C15774 * C6308) *
               C31225 +
           (C15769 * C6313 - C15773 * C6311 + C47448 * C6314 - C15774 * C6312) *
               C47481) *
              C47369 * C47181 * C1014) *
         C47135) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C15769 * C124 - C15773 * C117 + C47448 * C125 - C15774 * C118) *
                C31224 +
            (C15769 * C138 - C15773 * C127 + C47448 * C139 - C15774 * C128) *
                C31222 +
            (C31519 - C31520 + C31521 - C31522) * C31225 +
            (C31523 - C31524 + C31525 - C31526) * C47481) *
               C47369 * C1664 +
           ((C31520 - C31519 + C31522 - C31521) * C31224 +
            (C31524 - C31523 + C31526 - C31525) * C31222 +
            (C31527 - C31528 + C31529 - C31530) * C31225 +
            (C31531 - C31532 + C31533 - C31534) * C47481) *
               C47369 * C1665 +
           ((C31528 - C31527 + C31530 - C31529) * C31224 +
            (C31532 - C31531 + C31534 - C31533) * C31222 +
            (C15769 * C1850 - C15773 * C1844 + C47448 * C1851 -
             C15774 * C1845) *
                C31225 +
            (C15769 * C1862 - C15773 * C1853 + C47448 * C1863 -
             C15774 * C1854) *
                C47481) *
               C47369 * C47464) *
              C47163 * C47497 +
          (((C15773 * C118 - C15769 * C125 + C15774 * C119 - C47448 * C126) *
                C31224 +
            (C15773 * C128 - C15769 * C139 + C15774 * C129 - C47448 * C140) *
                C31222 +
            (C31535 - C31536 + C31537 - C31538) * C31225 +
            (C31539 - C31540 + C31541 - C31542) * C47481) *
               C47369 * C1664 +
           ((C31536 - C31535 + C31538 - C31537) * C31224 +
            (C31540 - C31539 + C31542 - C31541) * C31222 +
            (C31543 - C31544 + C31545 - C31546) * C31225 +
            (C31547 - C31548 + C31549 - C31550) * C47481) *
               C47369 * C1665 +
           ((C31544 - C31543 + C31546 - C31545) * C31224 +
            (C31548 - C31547 + C31550 - C31549) * C31222 +
            (C15773 * C1845 - C15769 * C1851 + C15774 * C1846 -
             C47448 * C1852) *
                C31225 +
            (C15773 * C1854 - C15769 * C1863 + C15774 * C1855 -
             C47448 * C1864) *
                C47481) *
               C47369 * C47464) *
              C47163 * C47484 +
          (((C15769 * C126 - C15773 * C119 + C47448 * C130 - C15774 * C120) *
                C31224 +
            (C15769 * C140 - C15773 * C129 + C47448 * C141 - C15774 * C131) *
                C31222 +
            (C31551 - C31552 + C31553 - C31554) * C31225 +
            (C31555 - C31556 + C31557 - C31558) * C47481) *
               C47369 * C1664 +
           ((C31552 - C31551 + C31554 - C31553) * C31224 +
            (C31556 - C31555 + C31558 - C31557) * C31222 +
            (C31559 - C31560 + C31561 - C31562) * C31225 +
            (C31563 - C31564 + C31565 - C31566) * C47481) *
               C47369 * C1665 +
           ((C31560 - C31559 + C31562 - C31561) * C31224 +
            (C31564 - C31563 + C31566 - C31565) * C31222 +
            (C15769 * C1852 - C15773 * C1846 + C47448 * C2121 -
             C15774 * C2120) *
                C31225 +
            (C15769 * C1864 - C15773 * C1855 + C47448 * C2123 -
             C15774 * C2122) *
                C47481) *
               C47369 * C47464) *
              C47163 * C47455)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C15769 * C124 - C15773 * C117 + C47448 * C125 - C15774 * C118) *
                C31224 +
            (C15769 * C138 - C15773 * C127 + C47448 * C139 - C15774 * C128) *
                C31222 +
            (C31519 - C31520 + C31521 - C31522) * C31225 +
            (C31523 - C31524 + C31525 - C31526) * C47481) *
               C47369 * C1664 +
           ((C31520 - C31519 + C31522 - C31521) * C31224 +
            (C31524 - C31523 + C31526 - C31525) * C31222 +
            (C31527 - C31528 + C31529 - C31530) * C31225 +
            (C31531 - C31532 + C31533 - C31534) * C47481) *
               C47369 * C1665 +
           ((C31528 - C31527 + C31530 - C31529) * C31224 +
            (C31532 - C31531 + C31534 - C31533) * C31222 +
            (C15769 * C1850 - C15773 * C1844 + C47448 * C1851 -
             C15774 * C1845) *
                C31225 +
            (C15769 * C1862 - C15773 * C1853 + C47448 * C1863 -
             C15774 * C1854) *
                C47481) *
               C47369 * C47464) *
              C47500 +
          (((C15923 - C15922 + C15925 - C15924) * C31224 +
            (C15927 - C15926 + C15929 - C15928) * C31222 +
            (C16578 - C16579 + C16580 - C16581) * C31225 +
            (C16582 - C16583 + C16584 - C16585) * C47481) *
               C47369 * C1664 +
           ((C16579 - C16578 + C16581 - C16580) * C31224 +
            (C16583 - C16582 + C16585 - C16584) * C31222 +
            (C16992 - C16993 + C16994 - C16995) * C31225 +
            (C16996 - C16997 + C16998 - C16999) * C47481) *
               C47369 * C1665 +
           ((C16993 - C16992 + C16995 - C16994) * C31224 +
            (C16997 - C16996 + C16999 - C16998) * C31222 +
            (C18330 - C18331 + C18332 - C18333) * C31225 +
            (C18334 - C18335 + C18336 - C18337) * C47481) *
               C47369 * C47464) *
              C47488 +
          (((C15931 - C15930 + C15933 - C15932) * C31224 +
            (C15935 - C15934 + C15937 - C15936) * C31222 +
            (C17000 - C17001 + C17002 - C17003) * C31225 +
            (C17004 - C17005 + C17006 - C17007) * C47481) *
               C47369 * C1664 +
           ((C17001 - C17000 + C17003 - C17002) * C31224 +
            (C17005 - C17004 + C17007 - C17006) * C31222 +
            (C17008 - C17009 + C17010 - C17011) * C31225 +
            (C17012 - C17013 + C17014 - C17015) * C47481) *
               C47369 * C1665 +
           ((C17009 - C17008 + C17011 - C17010) * C31224 +
            (C17013 - C17012 + C17015 - C17014) * C31222 +
            (C15769 * C7169 - C15773 * C7167 + C47448 * C7170 -
             C15774 * C7168) *
                C31225 +
            (C15769 * C7173 - C15773 * C7171 + C47448 * C7174 -
             C15774 * C7172) *
                C47481) *
               C47369 * C47464) *
              C47461) *
         C47135) /
            (p * q * std::sqrt(p + q));
    d2ee[165] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C15769 * C124 - C15773 * C117 + C47448 * C125 - C15774 * C118) *
                 C31224 +
             (C15769 * C138 - C15773 * C127 + C47448 * C139 - C15774 * C128) *
                 C31222 +
             (C31519 - C31520 + C31521 - C31522) * C31225 +
             (C31523 - C31524 + C31525 - C31526) * C47481) *
                C47369 * C3094 +
            ((C31520 - C31519 + C31522 - C31521) * C31224 +
             (C31524 - C31523 + C31526 - C31525) * C31222 +
             (C31527 - C31528 + C31529 - C31530) * C31225 +
             (C31531 - C31532 + C31533 - C31534) * C47481) *
                C47369 * C47268) *
               C47429 +
           (((C15923 - C15922 + C15925 - C15924) * C31224 +
             (C15927 - C15926 + C15929 - C15928) * C31222 +
             (C16578 - C16579 + C16580 - C16581) * C31225 +
             (C16582 - C16583 + C16584 - C16585) * C47481) *
                C47369 * C3094 +
            ((C16579 - C16578 + C16581 - C16580) * C31224 +
             (C16583 - C16582 + C16585 - C16584) * C31222 +
             (C16992 - C16993 + C16994 - C16995) * C31225 +
             (C16996 - C16997 + C16998 - C16999) * C47481) *
                C47369 * C47268) *
               C47226) *
              C47140 +
          ((((C15773 * C118 - C15769 * C125 + C15774 * C119 - C47448 * C126) *
                 C31224 +
             (C15773 * C128 - C15769 * C139 + C15774 * C129 - C47448 * C140) *
                 C31222 +
             (C31535 - C31536 + C31537 - C31538) * C31225 +
             (C31539 - C31540 + C31541 - C31542) * C47481) *
                C47369 * C3094 +
            ((C31536 - C31535 + C31538 - C31537) * C31224 +
             (C31540 - C31539 + C31542 - C31541) * C31222 +
             (C31543 - C31544 + C31545 - C31546) * C31225 +
             (C31547 - C31548 + C31549 - C31550) * C47481) *
                C47369 * C47268) *
               C47429 +
           (((C15939 - C15938 + C15941 - C15940) * C31224 +
             (C15943 - C15942 + C15945 - C15944) * C31222 +
             (C16586 - C16587 + C16588 - C16589) * C31225 +
             (C16590 - C16591 + C16592 - C16593) * C47481) *
                C47369 * C3094 +
            ((C16587 - C16586 + C16589 - C16588) * C31224 +
             (C16591 - C16590 + C16593 - C16592) * C31222 +
             (C18062 - C18063 + C18064 - C18065) * C31225 +
             (C18066 - C18067 + C18068 - C18069) * C47481) *
                C47369 * C47268) *
               C47226) *
              C47149 +
          ((((C15769 * C126 - C15773 * C119 + C47448 * C130 - C15774 * C120) *
                 C31224 +
             (C15769 * C140 - C15773 * C129 + C47448 * C141 - C15774 * C131) *
                 C31222 +
             (C31551 - C31552 + C31553 - C31554) * C31225 +
             (C31555 - C31556 + C31557 - C31558) * C47481) *
                C47369 * C3094 +
            ((C31552 - C31551 + C31554 - C31553) * C31224 +
             (C31556 - C31555 + C31558 - C31557) * C31222 +
             (C31559 - C31560 + C31561 - C31562) * C31225 +
             (C31563 - C31564 + C31565 - C31566) * C47481) *
                C47369 * C47268) *
               C47429 +
           (((C15955 - C15954 + C15957 - C15956) * C31224 +
             (C15959 - C15958 + C15961 - C15960) * C31222 +
             (C16594 - C16595 + C16596 - C16597) * C31225 +
             (C16598 - C16599 + C16600 - C16601) * C47481) *
                C47369 * C3094 +
            ((C16595 - C16594 + C16597 - C16596) * C31224 +
             (C16599 - C16598 + C16601 - C16600) * C31222 +
             (C15769 * C1161 - C15773 * C1152 + C47448 * C2015 -
              C15774 * C2014) *
                 C31225 +
             (C15769 * C1179 - C15773 * C1164 + C47448 * C2017 -
              C15774 * C2016) *
                 C47481) *
                C47369 * C47268) *
               C47226) *
              C2703)) /
        (p * q * std::sqrt(p + q));
    d2ee[166] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C15769 * C124 - C15773 * C117 + C47448 * C125 - C15774 * C118) *
                 C31224 +
             (C15769 * C138 - C15773 * C127 + C47448 * C139 - C15774 * C128) *
                 C31222 +
             (C31519 - C31520 + C31521 - C31522) * C31225 +
             (C31523 - C31524 + C31525 - C31526) * C47481) *
                C47369 * C47264 +
            ((C31520 - C31519 + C31522 - C31521) * C31224 +
             (C31524 - C31523 + C31526 - C31525) * C31222 +
             (C31527 - C31528 + C31529 - C31530) * C31225 +
             (C31531 - C31532 + C31533 - C31534) * C47481) *
                C47369 * C47271 +
            ((C31528 - C31527 + C31530 - C31529) * C31224 +
             (C31532 - C31531 + C31534 - C31533) * C31222 +
             (C33231 - C33232 + C33233 - C33234) * C31225 +
             (C33235 - C33236 + C33237 - C33238) * C47481) *
                C47369 * C3602) *
               C47429 +
           (((C15923 - C15922 + C15925 - C15924) * C31224 +
             (C15927 - C15926 + C15929 - C15928) * C31222 +
             (C16578 - C16579 + C16580 - C16581) * C31225 +
             (C16582 - C16583 + C16584 - C16585) * C47481) *
                C47369 * C47264 +
            ((C16579 - C16578 + C16581 - C16580) * C31224 +
             (C16583 - C16582 + C16585 - C16584) * C31222 +
             (C16992 - C16993 + C16994 - C16995) * C31225 +
             (C16996 - C16997 + C16998 - C16999) * C47481) *
                C47369 * C47271 +
            ((C16993 - C16992 + C16995 - C16994) * C31224 +
             (C16997 - C16996 + C16999 - C16998) * C31222 +
             (C18330 - C18331 + C18332 - C18333) * C31225 +
             (C18334 - C18335 + C18336 - C18337) * C47481) *
                C47369 * C3602) *
               C47226) *
              C2440 +
          ((((C15773 * C118 - C15769 * C125 + C15774 * C119 - C47448 * C126) *
                 C31224 +
             (C15773 * C128 - C15769 * C139 + C15774 * C129 - C47448 * C140) *
                 C31222 +
             (C31535 - C31536 + C31537 - C31538) * C31225 +
             (C31539 - C31540 + C31541 - C31542) * C47481) *
                C47369 * C47264 +
            ((C31536 - C31535 + C31538 - C31537) * C31224 +
             (C31540 - C31539 + C31542 - C31541) * C31222 +
             (C31543 - C31544 + C31545 - C31546) * C31225 +
             (C31547 - C31548 + C31549 - C31550) * C47481) *
                C47369 * C47271 +
            ((C31544 - C31543 + C31546 - C31545) * C31224 +
             (C31548 - C31547 + C31550 - C31549) * C31222 +
             (C33571 - C33572 + C33573 - C33574) * C31225 +
             (C33575 - C33576 + C33577 - C33578) * C47481) *
                C47369 * C3602) *
               C47429 +
           (((C15939 - C15938 + C15941 - C15940) * C31224 +
             (C15943 - C15942 + C15945 - C15944) * C31222 +
             (C16586 - C16587 + C16588 - C16589) * C31225 +
             (C16590 - C16591 + C16592 - C16593) * C47481) *
                C47369 * C47264 +
            ((C16587 - C16586 + C16589 - C16588) * C31224 +
             (C16591 - C16590 + C16593 - C16592) * C31222 +
             (C18062 - C18063 + C18064 - C18065) * C31225 +
             (C18066 - C18067 + C18068 - C18069) * C47481) *
                C47369 * C47271 +
            ((C18063 - C18062 + C18065 - C18064) * C31224 +
             (C18067 - C18066 + C18069 - C18068) * C31222 +
             (C15769 * C2226 - C15773 * C2223 + C47448 * C2227 -
              C15774 * C2224) *
                 C31225 +
             (C15769 * C2232 - C15773 * C2229 + C47448 * C2233 -
              C15774 * C2230) *
                 C47481) *
                C47369 * C3602) *
               C47226) *
              C47146)) /
        (p * q * std::sqrt(p + q));
    d2ee[167] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C15769 * C124 - C15773 * C117 + C47448 * C125 - C15774 * C118) *
                 C31224 +
             (C15769 * C138 - C15773 * C127 + C47448 * C139 - C15774 * C128) *
                 C31222 +
             (C31519 - C31520 + C31521 - C31522) * C31225 +
             (C31523 - C31524 + C31525 - C31526) * C47481) *
                C47369 * C3094 +
            ((C31520 - C31519 + C31522 - C31521) * C31224 +
             (C31524 - C31523 + C31526 - C31525) * C31222 +
             (C31527 - C31528 + C31529 - C31530) * C31225 +
             (C31531 - C31532 + C31533 - C31534) * C47481) *
                C47369 * C47268) *
               C47500 +
           (((C15923 - C15922 + C15925 - C15924) * C31224 +
             (C15927 - C15926 + C15929 - C15928) * C31222 +
             (C16578 - C16579 + C16580 - C16581) * C31225 +
             (C16582 - C16583 + C16584 - C16585) * C47481) *
                C47369 * C3094 +
            ((C16579 - C16578 + C16581 - C16580) * C31224 +
             (C16583 - C16582 + C16585 - C16584) * C31222 +
             (C16992 - C16993 + C16994 - C16995) * C31225 +
             (C16996 - C16997 + C16998 - C16999) * C47481) *
                C47369 * C47268) *
               C47488 +
           (((C15931 - C15930 + C15933 - C15932) * C31224 +
             (C15935 - C15934 + C15937 - C15936) * C31222 +
             (C17000 - C17001 + C17002 - C17003) * C31225 +
             (C17004 - C17005 + C17006 - C17007) * C47481) *
                C47369 * C3094 +
            ((C17001 - C17000 + C17003 - C17002) * C31224 +
             (C17005 - C17004 + C17007 - C17006) * C31222 +
             (C17008 - C17009 + C17010 - C17011) * C31225 +
             (C17012 - C17013 + C17014 - C17015) * C47481) *
                C47369 * C47268) *
               C47461) *
              C2440 +
          ((((C15773 * C118 - C15769 * C125 + C15774 * C119 - C47448 * C126) *
                 C31224 +
             (C15773 * C128 - C15769 * C139 + C15774 * C129 - C47448 * C140) *
                 C31222 +
             (C31535 - C31536 + C31537 - C31538) * C31225 +
             (C31539 - C31540 + C31541 - C31542) * C47481) *
                C47369 * C3094 +
            ((C31536 - C31535 + C31538 - C31537) * C31224 +
             (C31540 - C31539 + C31542 - C31541) * C31222 +
             (C31543 - C31544 + C31545 - C31546) * C31225 +
             (C31547 - C31548 + C31549 - C31550) * C47481) *
                C47369 * C47268) *
               C47500 +
           (((C15939 - C15938 + C15941 - C15940) * C31224 +
             (C15943 - C15942 + C15945 - C15944) * C31222 +
             (C16586 - C16587 + C16588 - C16589) * C31225 +
             (C16590 - C16591 + C16592 - C16593) * C47481) *
                C47369 * C3094 +
            ((C16587 - C16586 + C16589 - C16588) * C31224 +
             (C16591 - C16590 + C16593 - C16592) * C31222 +
             (C18062 - C18063 + C18064 - C18065) * C31225 +
             (C18066 - C18067 + C18068 - C18069) * C47481) *
                C47369 * C47268) *
               C47488 +
           (((C15947 - C15946 + C15949 - C15948) * C31224 +
             (C15951 - C15950 + C15953 - C15952) * C31222 +
             (C17348 - C17349 + C17350 - C17351) * C31225 +
             (C17352 - C17353 + C17354 - C17355) * C47481) *
                C47369 * C3094 +
            ((C17349 - C17348 + C17351 - C17350) * C31224 +
             (C17353 - C17352 + C17355 - C17354) * C31222 +
             (C15769 * C1172 - C15773 * C1157 + C47448 * C1173 -
              C15774 * C1158) *
                 C31225 +
             (C15769 * C1184 - C15773 * C1175 + C47448 * C1185 -
              C15774 * C1176) *
                 C47481) *
                C47369 * C47268) *
               C47461) *
              C47146)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C15769 * C124 - C15773 * C117 + C47448 * C125 - C15774 * C118) *
                C31224 +
            (C15769 * C138 - C15773 * C127 + C47448 * C139 - C15774 * C128) *
                C31222 +
            (C31519 - C31520 + C31521 - C31522) * C31225 +
            (C31523 - C31524 + C31525 - C31526) * C47481) *
               C47369 * C3094 +
           ((C31520 - C31519 + C31522 - C31521) * C31224 +
            (C31524 - C31523 + C31526 - C31525) * C31222 +
            (C31527 - C31528 + C31529 - C31530) * C31225 +
            (C31531 - C31532 + C31533 - C31534) * C47481) *
               C47369 * C47268) *
              C47163 * C47506 +
          (((C15773 * C118 - C15769 * C125 + C15774 * C119 - C47448 * C126) *
                C31224 +
            (C15773 * C128 - C15769 * C139 + C15774 * C129 - C47448 * C140) *
                C31222 +
            (C31535 - C31536 + C31537 - C31538) * C31225 +
            (C31539 - C31540 + C31541 - C31542) * C47481) *
               C47369 * C3094 +
           ((C31536 - C31535 + C31538 - C31537) * C31224 +
            (C31540 - C31539 + C31542 - C31541) * C31222 +
            (C31543 - C31544 + C31545 - C31546) * C31225 +
            (C31547 - C31548 + C31549 - C31550) * C47481) *
               C47369 * C47268) *
              C47163 * C47499 +
          (((C15769 * C126 - C15773 * C119 + C47448 * C130 - C15774 * C120) *
                C31224 +
            (C15769 * C140 - C15773 * C129 + C47448 * C141 - C15774 * C131) *
                C31222 +
            (C31551 - C31552 + C31553 - C31554) * C31225 +
            (C31555 - C31556 + C31557 - C31558) * C47481) *
               C47369 * C3094 +
           ((C31552 - C31551 + C31554 - C31553) * C31224 +
            (C31556 - C31555 + C31558 - C31557) * C31222 +
            (C31559 - C31560 + C31561 - C31562) * C31225 +
            (C31563 - C31564 + C31565 - C31566) * C47481) *
               C47369 * C47268) *
              C47163 * C47486 +
          (((C15773 * C120 - C15769 * C130 + C15774 * C121 - C47448 * C132) *
                C31224 +
            (C15773 * C131 - C15769 * C141 + C15774 * C133 - C47448 * C142) *
                C31222 +
            (C31827 - C31828 + C31829 - C31830) * C31225 +
            (C31831 - C31832 + C31833 - C31834) * C47481) *
               C47369 * C3094 +
           ((C31828 - C31827 + C31830 - C31829) * C31224 +
            (C31832 - C31831 + C31834 - C31833) * C31222 +
            (C15769 * C438 - C15773 * C421 + C47448 * C442 - C15774 * C423) *
                C31225 +
            (C15769 * C451 - C15773 * C439 + C47448 * C453 - C15774 * C443) *
                C47481) *
               C47369 * C47268) *
              C47163 * C47465)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C15769 * C124 - C15773 * C117 + C47448 * C125 - C15774 * C118) *
                C31224 +
            (C15769 * C138 - C15773 * C127 + C47448 * C139 - C15774 * C128) *
                C31222 +
            (C31519 - C31520 + C31521 - C31522) * C31225 +
            (C31523 - C31524 + C31525 - C31526) * C47481) *
               C47369 * C47508 +
           ((C31520 - C31519 + C31522 - C31521) * C31224 +
            (C31524 - C31523 + C31526 - C31525) * C31222 +
            (C31527 - C31528 + C31529 - C31530) * C31225 +
            (C31531 - C31532 + C31533 - C31534) * C47481) *
               C47369 * C47505 +
           ((C31528 - C31527 + C31530 - C31529) * C31224 +
            (C31532 - C31531 + C31534 - C31533) * C31222 +
            (C33231 - C33232 + C33233 - C33234) * C31225 +
            (C33235 - C33236 + C33237 - C33238) * C47481) *
               C47369 * C47496 +
           ((C33232 - C33231 + C33234 - C33233) * C31224 +
            (C33236 - C33235 + C33238 - C33237) * C31222 +
            (C33239 - C33240 + C33241 - C33242) * C31225 +
            (C33243 - C33244 + C33245 - C33246) * C47481) *
               C47369 * C47477) *
              C47163 * C2440 +
          (((C15773 * C118 - C15769 * C125 + C15774 * C119 - C47448 * C126) *
                C31224 +
            (C15773 * C128 - C15769 * C139 + C15774 * C129 - C47448 * C140) *
                C31222 +
            (C31535 - C31536 + C31537 - C31538) * C31225 +
            (C31539 - C31540 + C31541 - C31542) * C47481) *
               C47369 * C47508 +
           ((C31536 - C31535 + C31538 - C31537) * C31224 +
            (C31540 - C31539 + C31542 - C31541) * C31222 +
            (C31543 - C31544 + C31545 - C31546) * C31225 +
            (C31547 - C31548 + C31549 - C31550) * C47481) *
               C47369 * C47505 +
           ((C31544 - C31543 + C31546 - C31545) * C31224 +
            (C31548 - C31547 + C31550 - C31549) * C31222 +
            (C33571 - C33572 + C33573 - C33574) * C31225 +
            (C33575 - C33576 + C33577 - C33578) * C47481) *
               C47369 * C47496 +
           ((C33572 - C33571 + C33574 - C33573) * C31224 +
            (C33576 - C33575 + C33578 - C33577) * C31222 +
            (C15769 * C1857 - C15773 * C1848 + C47448 * C1858 -
             C15774 * C1849) *
                C31225 +
            (C15769 * C1866 - C15773 * C1860 + C47448 * C1867 -
             C15774 * C1861) *
                C47481) *
               C47369 * C47477) *
              C47163 * C47146)) /
            (p * q * std::sqrt(p + q));
    d2ee[168] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C15769 * C124 - C15773 * C117 + C47448 * C125 - C15774 * C118) *
                C31224 +
            (C15769 * C138 - C15773 * C127 + C47448 * C139 - C15774 * C128) *
                C31222 +
            (C31519 - C31520 + C31521 - C31522) * C31225 +
            (C31523 - C31524 + C31525 - C31526) * C47481) *
               C47369 * C47264 +
           ((C31520 - C31519 + C31522 - C31521) * C31224 +
            (C31524 - C31523 + C31526 - C31525) * C31222 +
            (C31527 - C31528 + C31529 - C31530) * C31225 +
            (C31531 - C31532 + C31533 - C31534) * C47481) *
               C47369 * C47271 +
           ((C31528 - C31527 + C31530 - C31529) * C31224 +
            (C31532 - C31531 + C31534 - C31533) * C31222 +
            (C33231 - C33232 + C33233 - C33234) * C31225 +
            (C33235 - C33236 + C33237 - C33238) * C47481) *
               C47369 * C3602) *
              C47163 * C47140 +
          (((C15773 * C118 - C15769 * C125 + C15774 * C119 - C47448 * C126) *
                C31224 +
            (C15773 * C128 - C15769 * C139 + C15774 * C129 - C47448 * C140) *
                C31222 +
            (C31535 - C31536 + C31537 - C31538) * C31225 +
            (C31539 - C31540 + C31541 - C31542) * C47481) *
               C47369 * C47264 +
           ((C31536 - C31535 + C31538 - C31537) * C31224 +
            (C31540 - C31539 + C31542 - C31541) * C31222 +
            (C31543 - C31544 + C31545 - C31546) * C31225 +
            (C31547 - C31548 + C31549 - C31550) * C47481) *
               C47369 * C47271 +
           ((C31544 - C31543 + C31546 - C31545) * C31224 +
            (C31548 - C31547 + C31550 - C31549) * C31222 +
            (C33571 - C33572 + C33573 - C33574) * C31225 +
            (C33575 - C33576 + C33577 - C33578) * C47481) *
               C47369 * C3602) *
              C47163 * C47149 +
          (((C15769 * C126 - C15773 * C119 + C47448 * C130 - C15774 * C120) *
                C31224 +
            (C15769 * C140 - C15773 * C129 + C47448 * C141 - C15774 * C131) *
                C31222 +
            (C31551 - C31552 + C31553 - C31554) * C31225 +
            (C31555 - C31556 + C31557 - C31558) * C47481) *
               C47369 * C47264 +
           ((C31552 - C31551 + C31554 - C31553) * C31224 +
            (C31556 - C31555 + C31558 - C31557) * C31222 +
            (C31559 - C31560 + C31561 - C31562) * C31225 +
            (C31563 - C31564 + C31565 - C31566) * C47481) *
               C47369 * C47271 +
           ((C31560 - C31559 + C31562 - C31561) * C31224 +
            (C31564 - C31563 + C31566 - C31565) * C31222 +
            (C15769 * C1852 - C15773 * C1846 + C47448 * C2121 -
             C15774 * C2120) *
                C31225 +
            (C15769 * C1864 - C15773 * C1855 + C47448 * C2123 -
             C15774 * C2122) *
                C47481) *
               C47369 * C3602) *
              C47163 * C2703)) /
        (p * q * std::sqrt(p + q));
    d2ee[169] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C15769 * C124 - C15773 * C117 + C47448 * C125 - C15774 * C118) *
                C31224 +
            (C15769 * C138 - C15773 * C127 + C47448 * C139 - C15774 * C128) *
                C31222 +
            (C31519 - C31520 + C31521 - C31522) * C31225 +
            (C31523 - C31524 + C31525 - C31526) * C47481) *
               C47369 * C3094 +
           ((C31520 - C31519 + C31522 - C31521) * C31224 +
            (C31524 - C31523 + C31526 - C31525) * C31222 +
            (C31527 - C31528 + C31529 - C31530) * C31225 +
            (C31531 - C31532 + C31533 - C31534) * C47481) *
               C47369 * C47268) *
              C47163 * C47506 +
          (((C15773 * C118 - C15769 * C125 + C15774 * C119 - C47448 * C126) *
                C31224 +
            (C15773 * C128 - C15769 * C139 + C15774 * C129 - C47448 * C140) *
                C31222 +
            (C31535 - C31536 + C31537 - C31538) * C31225 +
            (C31539 - C31540 + C31541 - C31542) * C47481) *
               C47369 * C3094 +
           ((C31536 - C31535 + C31538 - C31537) * C31224 +
            (C31540 - C31539 + C31542 - C31541) * C31222 +
            (C31543 - C31544 + C31545 - C31546) * C31225 +
            (C31547 - C31548 + C31549 - C31550) * C47481) *
               C47369 * C47268) *
              C47163 * C47499 +
          (((C15769 * C126 - C15773 * C119 + C47448 * C130 - C15774 * C120) *
                C31224 +
            (C15769 * C140 - C15773 * C129 + C47448 * C141 - C15774 * C131) *
                C31222 +
            (C31551 - C31552 + C31553 - C31554) * C31225 +
            (C31555 - C31556 + C31557 - C31558) * C47481) *
               C47369 * C3094 +
           ((C31552 - C31551 + C31554 - C31553) * C31224 +
            (C31556 - C31555 + C31558 - C31557) * C31222 +
            (C31559 - C31560 + C31561 - C31562) * C31225 +
            (C31563 - C31564 + C31565 - C31566) * C47481) *
               C47369 * C47268) *
              C47163 * C47486 +
          (((C15773 * C120 - C15769 * C130 + C15774 * C121 - C47448 * C132) *
                C31224 +
            (C15773 * C131 - C15769 * C141 + C15774 * C133 - C47448 * C142) *
                C31222 +
            (C31827 - C31828 + C31829 - C31830) * C31225 +
            (C31831 - C31832 + C31833 - C31834) * C47481) *
               C47369 * C3094 +
           ((C31828 - C31827 + C31830 - C31829) * C31224 +
            (C31832 - C31831 + C31834 - C31833) * C31222 +
            (C15769 * C438 - C15773 * C421 + C47448 * C442 - C15774 * C423) *
                C31225 +
            (C15769 * C451 - C15773 * C439 + C47448 * C453 - C15774 * C443) *
                C47481) *
               C47369 * C47268) *
              C47163 * C47465)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C15769 * C124 - C15773 * C117 + C47448 * C125 - C15774 * C118) *
                 C31224 +
             (C15769 * C138 - C15773 * C127 + C47448 * C139 - C15774 * C128) *
                 C31222 +
             (C31519 - C31520 + C31521 - C31522) * C31225 +
             (C31523 - C31524 + C31525 - C31526) * C47481) *
                C47369 * C3094 +
            ((C31520 - C31519 + C31522 - C31521) * C31224 +
             (C31524 - C31523 + C31526 - C31525) * C31222 +
             (C31527 - C31528 + C31529 - C31530) * C31225 +
             (C31531 - C31532 + C31533 - C31534) * C47481) *
                C47369 * C47268) *
               C47500 +
           (((C15923 - C15922 + C15925 - C15924) * C31224 +
             (C15927 - C15926 + C15929 - C15928) * C31222 +
             (C16578 - C16579 + C16580 - C16581) * C31225 +
             (C16582 - C16583 + C16584 - C16585) * C47481) *
                C47369 * C3094 +
            ((C16579 - C16578 + C16581 - C16580) * C31224 +
             (C16583 - C16582 + C16585 - C16584) * C31222 +
             (C16992 - C16993 + C16994 - C16995) * C31225 +
             (C16996 - C16997 + C16998 - C16999) * C47481) *
                C47369 * C47268) *
               C47488 +
           (((C15931 - C15930 + C15933 - C15932) * C31224 +
             (C15935 - C15934 + C15937 - C15936) * C31222 +
             (C17000 - C17001 + C17002 - C17003) * C31225 +
             (C17004 - C17005 + C17006 - C17007) * C47481) *
                C47369 * C3094 +
            ((C17001 - C17000 + C17003 - C17002) * C31224 +
             (C17005 - C17004 + C17007 - C17006) * C31222 +
             (C17008 - C17009 + C17010 - C17011) * C31225 +
             (C17012 - C17013 + C17014 - C17015) * C47481) *
                C47369 * C47268) *
               C47461) *
              C2440 +
          ((((C15773 * C118 - C15769 * C125 + C15774 * C119 - C47448 * C126) *
                 C31224 +
             (C15773 * C128 - C15769 * C139 + C15774 * C129 - C47448 * C140) *
                 C31222 +
             (C31535 - C31536 + C31537 - C31538) * C31225 +
             (C31539 - C31540 + C31541 - C31542) * C47481) *
                C47369 * C3094 +
            ((C31536 - C31535 + C31538 - C31537) * C31224 +
             (C31540 - C31539 + C31542 - C31541) * C31222 +
             (C31543 - C31544 + C31545 - C31546) * C31225 +
             (C31547 - C31548 + C31549 - C31550) * C47481) *
                C47369 * C47268) *
               C47500 +
           (((C15939 - C15938 + C15941 - C15940) * C31224 +
             (C15943 - C15942 + C15945 - C15944) * C31222 +
             (C16586 - C16587 + C16588 - C16589) * C31225 +
             (C16590 - C16591 + C16592 - C16593) * C47481) *
                C47369 * C3094 +
            ((C16587 - C16586 + C16589 - C16588) * C31224 +
             (C16591 - C16590 + C16593 - C16592) * C31222 +
             (C18062 - C18063 + C18064 - C18065) * C31225 +
             (C18066 - C18067 + C18068 - C18069) * C47481) *
                C47369 * C47268) *
               C47488 +
           (((C15947 - C15946 + C15949 - C15948) * C31224 +
             (C15951 - C15950 + C15953 - C15952) * C31222 +
             (C17348 - C17349 + C17350 - C17351) * C31225 +
             (C17352 - C17353 + C17354 - C17355) * C47481) *
                C47369 * C3094 +
            ((C17349 - C17348 + C17351 - C17350) * C31224 +
             (C17353 - C17352 + C17355 - C17354) * C31222 +
             (C15769 * C1172 - C15773 * C1157 + C47448 * C1173 -
              C15774 * C1158) *
                 C31225 +
             (C15769 * C1184 - C15773 * C1175 + C47448 * C1185 -
              C15774 * C1176) *
                 C47481) *
                C47369 * C47268) *
               C47461) *
              C47146)) /
            (p * q * std::sqrt(p + q));
    d2ee[170] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C15769 * C124 - C15773 * C117 + C47448 * C125 - C15774 * C118) *
                C31224 +
            (C15769 * C138 - C15773 * C127 + C47448 * C139 - C15774 * C128) *
                C31222 +
            (C31519 - C31520 + C31521 - C31522) * C31225 +
            (C31523 - C31524 + C31525 - C31526) * C47481) *
               C47369 * C47181 * C47429 +
           ((C15923 - C15922 + C15925 - C15924) * C31224 +
            (C15927 - C15926 + C15929 - C15928) * C31222 +
            (C16578 - C16579 + C16580 - C16581) * C31225 +
            (C16582 - C16583 + C16584 - C16585) * C47481) *
               C47369 * C47181 * C47226) *
              C554 +
          (((C15773 * C118 - C15769 * C125 + C15774 * C119 - C47448 * C126) *
                C31224 +
            (C15773 * C128 - C15769 * C139 + C15774 * C129 - C47448 * C140) *
                C31222 +
            (C31535 - C31536 + C31537 - C31538) * C31225 +
            (C31539 - C31540 + C31541 - C31542) * C47481) *
               C47369 * C47181 * C47429 +
           ((C15939 - C15938 + C15941 - C15940) * C31224 +
            (C15943 - C15942 + C15945 - C15944) * C31222 +
            (C16586 - C16587 + C16588 - C16589) * C31225 +
            (C16590 - C16591 + C16592 - C16593) * C47481) *
               C47369 * C47181 * C47226) *
              C555 +
          (((C15769 * C126 - C15773 * C119 + C47448 * C130 - C15774 * C120) *
                C31224 +
            (C15769 * C140 - C15773 * C129 + C47448 * C141 - C15774 * C131) *
                C31222 +
            (C31551 - C31552 + C31553 - C31554) * C31225 +
            (C31555 - C31556 + C31557 - C31558) * C47481) *
               C47369 * C47181 * C47429 +
           ((C15955 - C15954 + C15957 - C15956) * C31224 +
            (C15959 - C15958 + C15961 - C15960) * C31222 +
            (C16594 - C16595 + C16596 - C16597) * C31225 +
            (C16598 - C16599 + C16600 - C16601) * C47481) *
               C47369 * C47181 * C47226) *
              C556 +
          (((C15773 * C120 - C15769 * C130 + C15774 * C121 - C47448 * C132) *
                C31224 +
            (C15773 * C131 - C15769 * C141 + C15774 * C133 - C47448 * C142) *
                C31222 +
            (C15773 * C420 - C15769 * C436 + C15774 * C422 - C47448 * C440) *
                C31225 +
            (C15773 * C437 - C15769 * C450 + C15774 * C441 - C47448 * C452) *
                C47481) *
               C47369 * C47181 * C47429 +
           ((C16247 - C16246 + C16249 - C16248) * C31224 +
            (C16251 - C16250 + C16253 - C16252) * C31222 +
            (C15769 * C823 - C15773 * C815 + C47448 * C825 - C15774 * C816) *
                C31225 +
            (C15769 * C830 - C15773 * C824 + C47448 * C831 - C15774 * C826) *
                C47481) *
               C47369 * C47181 * C47226) *
              C47465)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C15769 * C124 - C15773 * C117 + C47448 * C125 - C15774 * C118) *
                C31224 +
            (C15769 * C138 - C15773 * C127 + C47448 * C139 - C15774 * C128) *
                C31222 +
            (C31519 - C31520 + C31521 - C31522) * C31225 +
            (C31523 - C31524 + C31525 - C31526) * C47481) *
               C47369 * C47181 * C1284 +
           ((C15923 - C15922 + C15925 - C15924) * C31224 +
            (C15927 - C15926 + C15929 - C15928) * C31222 +
            (C16578 - C16579 + C16580 - C16581) * C31225 +
            (C16582 - C16583 + C16584 - C16585) * C47481) *
               C47369 * C47181 * C1285 +
           ((C15931 - C15930 + C15933 - C15932) * C31224 +
            (C15935 - C15934 + C15937 - C15936) * C31222 +
            (C17000 - C17001 + C17002 - C17003) * C31225 +
            (C17004 - C17005 + C17006 - C17007) * C47481) *
               C47369 * C47181 * C1286 +
           ((C16831 - C16830 + C16833 - C16832) * C31224 +
            (C16835 - C16834 + C16837 - C16836) * C31222 +
            (C17486 - C17487 + C17488 - C17489) * C31225 +
            (C17490 - C17491 + C17492 - C17493) * C47481) *
               C47369 * C47181 * C47471) *
              C47415 +
          (((C15773 * C118 - C15769 * C125 + C15774 * C119 - C47448 * C126) *
                C31224 +
            (C15773 * C128 - C15769 * C139 + C15774 * C129 - C47448 * C140) *
                C31222 +
            (C31535 - C31536 + C31537 - C31538) * C31225 +
            (C31539 - C31540 + C31541 - C31542) * C47481) *
               C47369 * C47181 * C1284 +
           ((C15939 - C15938 + C15941 - C15940) * C31224 +
            (C15943 - C15942 + C15945 - C15944) * C31222 +
            (C16586 - C16587 + C16588 - C16589) * C31225 +
            (C16590 - C16591 + C16592 - C16593) * C47481) *
               C47369 * C47181 * C1285 +
           ((C15947 - C15946 + C15949 - C15948) * C31224 +
            (C15951 - C15950 + C15953 - C15952) * C31222 +
            (C17348 - C17349 + C17350 - C17351) * C31225 +
            (C17352 - C17353 + C17354 - C17355) * C47481) *
               C47369 * C47181 * C1286 +
           ((C17147 - C17146 + C17149 - C17148) * C31224 +
            (C17151 - C17150 + C17153 - C17152) * C31222 +
            (C15769 * C1546 - C15773 * C1543 + C47448 * C1547 -
             C15774 * C1544) *
                C31225 +
            (C15769 * C1552 - C15773 * C1549 + C47448 * C1553 -
             C15774 * C1550) *
                C47481) *
               C47369 * C47181 * C47471) *
              C47146)) /
            (p * q * std::sqrt(p + q));
    d2ee[171] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C15769 * C124 - C15773 * C117 + C47448 * C125 - C15774 * C118) *
                 C31224 +
             (C15769 * C138 - C15773 * C127 + C47448 * C139 - C15774 * C128) *
                 C31222 +
             (C31519 - C31520 + C31521 - C31522) * C31225 +
             (C31523 - C31524 + C31525 - C31526) * C47481) *
                C47369 * C47430 +
            ((C31520 - C31519 + C31522 - C31521) * C31224 +
             (C31524 - C31523 + C31526 - C31525) * C31222 +
             (C31527 - C31528 + C31529 - C31530) * C31225 +
             (C31531 - C31532 + C31533 - C31534) * C47481) *
                C47369 * C47268) *
               C47429 +
           (((C15923 - C15922 + C15925 - C15924) * C31224 +
             (C15927 - C15926 + C15929 - C15928) * C31222 +
             (C16578 - C16579 + C16580 - C16581) * C31225 +
             (C16582 - C16583 + C16584 - C16585) * C47481) *
                C47369 * C47430 +
            ((C16579 - C16578 + C16581 - C16580) * C31224 +
             (C16583 - C16582 + C16585 - C16584) * C31222 +
             (C16992 - C16993 + C16994 - C16995) * C31225 +
             (C16996 - C16997 + C16998 - C16999) * C47481) *
                C47369 * C47268) *
               C47226) *
              C258 +
          ((((C15773 * C118 - C15769 * C125 + C15774 * C119 - C47448 * C126) *
                 C31224 +
             (C15773 * C128 - C15769 * C139 + C15774 * C129 - C47448 * C140) *
                 C31222 +
             (C31535 - C31536 + C31537 - C31538) * C31225 +
             (C31539 - C31540 + C31541 - C31542) * C47481) *
                C47369 * C47430 +
            ((C31536 - C31535 + C31538 - C31537) * C31224 +
             (C31540 - C31539 + C31542 - C31541) * C31222 +
             (C31543 - C31544 + C31545 - C31546) * C31225 +
             (C31547 - C31548 + C31549 - C31550) * C47481) *
                C47369 * C47268) *
               C47429 +
           (((C15939 - C15938 + C15941 - C15940) * C31224 +
             (C15943 - C15942 + C15945 - C15944) * C31222 +
             (C16586 - C16587 + C16588 - C16589) * C31225 +
             (C16590 - C16591 + C16592 - C16593) * C47481) *
                C47369 * C47430 +
            ((C16587 - C16586 + C16589 - C16588) * C31224 +
             (C16591 - C16590 + C16593 - C16592) * C31222 +
             (C18062 - C18063 + C18064 - C18065) * C31225 +
             (C18066 - C18067 + C18068 - C18069) * C47481) *
                C47369 * C47268) *
               C47226) *
              C259 +
          ((((C15769 * C126 - C15773 * C119 + C47448 * C130 - C15774 * C120) *
                 C31224 +
             (C15769 * C140 - C15773 * C129 + C47448 * C141 - C15774 * C131) *
                 C31222 +
             (C31551 - C31552 + C31553 - C31554) * C31225 +
             (C31555 - C31556 + C31557 - C31558) * C47481) *
                C47369 * C47430 +
            ((C31552 - C31551 + C31554 - C31553) * C31224 +
             (C31556 - C31555 + C31558 - C31557) * C31222 +
             (C31559 - C31560 + C31561 - C31562) * C31225 +
             (C31563 - C31564 + C31565 - C31566) * C47481) *
                C47369 * C47268) *
               C47429 +
           (((C15955 - C15954 + C15957 - C15956) * C31224 +
             (C15959 - C15958 + C15961 - C15960) * C31222 +
             (C16594 - C16595 + C16596 - C16597) * C31225 +
             (C16598 - C16599 + C16600 - C16601) * C47481) *
                C47369 * C47430 +
            ((C16595 - C16594 + C16597 - C16596) * C31224 +
             (C16599 - C16598 + C16601 - C16600) * C31222 +
             (C15769 * C1161 - C15773 * C1152 + C47448 * C2015 -
              C15774 * C2014) *
                 C31225 +
             (C15769 * C1179 - C15773 * C1164 + C47448 * C2017 -
              C15774 * C2016) *
                 C47481) *
                C47369 * C47268) *
               C47226) *
              C47455)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C15769 * C124 - C15773 * C117 + C47448 * C125 - C15774 * C118) *
                C31224 +
            (C15769 * C138 - C15773 * C127 + C47448 * C139 - C15774 * C128) *
                C31222 +
            (C31519 - C31520 + C31521 - C31522) * C31225 +
            (C31523 - C31524 + C31525 - C31526) * C47481) *
               C47369 * C47430 +
           ((C31520 - C31519 + C31522 - C31521) * C31224 +
            (C31524 - C31523 + C31526 - C31525) * C31222 +
            (C31527 - C31528 + C31529 - C31530) * C31225 +
            (C31531 - C31532 + C31533 - C31534) * C47481) *
               C47369 * C47268) *
              C1284 +
          (((C15923 - C15922 + C15925 - C15924) * C31224 +
            (C15927 - C15926 + C15929 - C15928) * C31222 +
            (C16578 - C16579 + C16580 - C16581) * C31225 +
            (C16582 - C16583 + C16584 - C16585) * C47481) *
               C47369 * C47430 +
           ((C16579 - C16578 + C16581 - C16580) * C31224 +
            (C16583 - C16582 + C16585 - C16584) * C31222 +
            (C16992 - C16993 + C16994 - C16995) * C31225 +
            (C16996 - C16997 + C16998 - C16999) * C47481) *
               C47369 * C47268) *
              C1285 +
          (((C15931 - C15930 + C15933 - C15932) * C31224 +
            (C15935 - C15934 + C15937 - C15936) * C31222 +
            (C17000 - C17001 + C17002 - C17003) * C31225 +
            (C17004 - C17005 + C17006 - C17007) * C47481) *
               C47369 * C47430 +
           ((C17001 - C17000 + C17003 - C17002) * C31224 +
            (C17005 - C17004 + C17007 - C17006) * C31222 +
            (C17008 - C17009 + C17010 - C17011) * C31225 +
            (C17012 - C17013 + C17014 - C17015) * C47481) *
               C47369 * C47268) *
              C1286 +
          (((C16831 - C16830 + C16833 - C16832) * C31224 +
            (C16835 - C16834 + C16837 - C16836) * C31222 +
            (C17486 - C17487 + C17488 - C17489) * C31225 +
            (C17490 - C17491 + C17492 - C17493) * C47481) *
               C47369 * C47430 +
           ((C17487 - C17486 + C17489 - C17488) * C31224 +
            (C17491 - C17490 + C17493 - C17492) * C31222 +
            (C15769 * C5807 - C15773 * C5805 + C47448 * C5808 -
             C15774 * C5806) *
                C31225 +
            (C15769 * C5811 - C15773 * C5809 + C47448 * C5812 -
             C15774 * C5810) *
                C47481) *
               C47369 * C47268) *
              C47471) *
         C47135) /
            (p * q * std::sqrt(p + q));
    d2ee[172] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C15769 * C124 - C15773 * C117 + C47448 * C125 - C15774 * C118) *
                C31224 +
            (C15769 * C138 - C15773 * C127 + C47448 * C139 - C15774 * C128) *
                C31222 +
            (C15769 * C424 - C15773 * C414 + C47448 * C425 - C15774 * C415) *
                C31225 +
            (C15769 * C444 - C15773 * C427 + C47448 * C445 - C15774 * C428) *
                C47481) *
               C47369 * C47181 * C47500 +
           ((C15923 - C15922 + C15925 - C15924) * C31224 +
            (C15927 - C15926 + C15929 - C15928) * C31222 +
            (C16578 - C16579 + C16580 - C16581) * C31225 +
            (C16582 - C16583 + C16584 - C16585) * C47481) *
               C47369 * C47181 * C47488 +
           ((C15931 - C15930 + C15933 - C15932) * C31224 +
            (C15935 - C15934 + C15937 - C15936) * C31222 +
            (C17000 - C17001 + C17002 - C17003) * C31225 +
            (C17004 - C17005 + C17006 - C17007) * C47481) *
               C47369 * C47181 * C47461) *
              C258 +
          (((C15773 * C118 - C15769 * C125 + C15774 * C119 - C47448 * C126) *
                C31224 +
            (C15773 * C128 - C15769 * C139 + C15774 * C129 - C47448 * C140) *
                C31222 +
            (C15773 * C415 - C15769 * C425 + C15774 * C416 - C47448 * C426) *
                C31225 +
            (C15773 * C428 - C15769 * C445 + C15774 * C429 - C47448 * C446) *
                C47481) *
               C47369 * C47181 * C47500 +
           ((C15939 - C15938 + C15941 - C15940) * C31224 +
            (C15943 - C15942 + C15945 - C15944) * C31222 +
            (C16586 - C16587 + C16588 - C16589) * C31225 +
            (C16590 - C16591 + C16592 - C16593) * C47481) *
               C47369 * C47181 * C47488 +
           ((C15947 - C15946 + C15949 - C15948) * C31224 +
            (C15951 - C15950 + C15953 - C15952) * C31222 +
            (C17348 - C17349 + C17350 - C17351) * C31225 +
            (C17352 - C17353 + C17354 - C17355) * C47481) *
               C47369 * C47181 * C47461) *
              C259 +
          (((C15769 * C126 - C15773 * C119 + C47448 * C130 - C15774 * C120) *
                C31224 +
            (C15769 * C140 - C15773 * C129 + C47448 * C141 - C15774 * C131) *
                C31222 +
            (C15769 * C426 - C15773 * C416 + C47448 * C436 - C15774 * C420) *
                C31225 +
            (C15769 * C446 - C15773 * C429 + C47448 * C450 - C15774 * C437) *
                C47481) *
               C47369 * C47181 * C47500 +
           ((C15955 - C15954 + C15957 - C15956) * C31224 +
            (C15959 - C15958 + C15961 - C15960) * C31222 +
            (C16594 - C16595 + C16596 - C16597) * C31225 +
            (C16598 - C16599 + C16600 - C16601) * C47481) *
               C47369 * C47181 * C47488 +
           ((C15963 - C15962 + C15965 - C15964) * C31224 +
            (C15967 - C15966 + C15969 - C15968) * C31222 +
            (C15769 * C1167 - C15773 * C1155 + C47448 * C1441 -
             C15774 * C1440) *
                C31225 +
            (C15769 * C1182 - C15773 * C1170 + C47448 * C1443 -
             C15774 * C1442) *
                C47481) *
               C47369 * C47181 * C47461) *
              C47455)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C15769 * C124 - C15773 * C117 + C47448 * C125 - C15774 * C118) *
               C31224 +
           (C15769 * C138 - C15773 * C127 + C47448 * C139 - C15774 * C128) *
               C31222 +
           (C15769 * C424 - C15773 * C414 + C47448 * C425 - C15774 * C415) *
               C31225 +
           (C15769 * C444 - C15773 * C427 + C47448 * C445 - C15774 * C428) *
               C47481) *
              C47369 * C47181 * C47163 * C108 +
          ((C15773 * C118 - C15769 * C125 + C15774 * C119 - C47448 * C126) *
               C31224 +
           (C15773 * C128 - C15769 * C139 + C15774 * C129 - C47448 * C140) *
               C31222 +
           (C15773 * C415 - C15769 * C425 + C15774 * C416 - C47448 * C426) *
               C31225 +
           (C15773 * C428 - C15769 * C445 + C15774 * C429 - C47448 * C446) *
               C47481) *
              C47369 * C47181 * C47163 * C109 +
          ((C15769 * C126 - C15773 * C119 + C47448 * C130 - C15774 * C120) *
               C31224 +
           (C15769 * C140 - C15773 * C129 + C47448 * C141 - C15774 * C131) *
               C31222 +
           (C15769 * C426 - C15773 * C416 + C47448 * C436 - C15774 * C420) *
               C31225 +
           (C15769 * C446 - C15773 * C429 + C47448 * C450 - C15774 * C437) *
               C47481) *
              C47369 * C47181 * C47163 * C110 +
          ((C15773 * C120 - C15769 * C130 + C15774 * C121 - C47448 * C132) *
               C31224 +
           (C15773 * C131 - C15769 * C141 + C15774 * C133 - C47448 * C142) *
               C31222 +
           (C15773 * C420 - C15769 * C436 + C15774 * C422 - C47448 * C440) *
               C31225 +
           (C15773 * C437 - C15769 * C450 + C15774 * C441 - C47448 * C452) *
               C47481) *
              C47369 * C47181 * C47163 * C111 +
          ((C15769 * C132 - C15773 * C121 + C47448 * C134 - C15774 * C122) *
               C31224 +
           (C15769 * C142 - C15773 * C133 + C47448 * C143 - C15774 * C135) *
               C31222 +
           (C15769 * C440 - C15773 * C422 + C47448 * C663 - C15774 * C662) *
               C31225 +
           (C15769 * C452 - C15773 * C441 + C47448 * C665 - C15774 * C664) *
               C47481) *
              C47369 * C47181 * C47163 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C15769 * C124 - C15773 * C117 + C47448 * C125 - C15774 * C118) *
                C31224 +
            (C15769 * C138 - C15773 * C127 + C47448 * C139 - C15774 * C128) *
                C31222 +
            (C31519 - C31520 + C31521 - C31522) * C31225 +
            (C31523 - C31524 + C31525 - C31526) * C47481) *
               C47369 * C47501 +
           ((C31520 - C31519 + C31522 - C31521) * C31224 +
            (C31524 - C31523 + C31526 - C31525) * C31222 +
            (C31527 - C31528 + C31529 - C31530) * C31225 +
            (C31531 - C31532 + C31533 - C31534) * C47481) *
               C47369 * C47490 +
           ((C31528 - C31527 + C31530 - C31529) * C31224 +
            (C31532 - C31531 + C31534 - C31533) * C31222 +
            (C15769 * C1850 - C15773 * C1844 + C47448 * C1851 -
             C15774 * C1845) *
                C31225 +
            (C15769 * C1862 - C15773 * C1853 + C47448 * C1863 -
             C15774 * C1854) *
                C47481) *
               C47369 * C47464) *
              C47163 * C258 +
          (((C15773 * C118 - C15769 * C125 + C15774 * C119 - C47448 * C126) *
                C31224 +
            (C15773 * C128 - C15769 * C139 + C15774 * C129 - C47448 * C140) *
                C31222 +
            (C31535 - C31536 + C31537 - C31538) * C31225 +
            (C31539 - C31540 + C31541 - C31542) * C47481) *
               C47369 * C47501 +
           ((C31536 - C31535 + C31538 - C31537) * C31224 +
            (C31540 - C31539 + C31542 - C31541) * C31222 +
            (C31543 - C31544 + C31545 - C31546) * C31225 +
            (C31547 - C31548 + C31549 - C31550) * C47481) *
               C47369 * C47490 +
           ((C31544 - C31543 + C31546 - C31545) * C31224 +
            (C31548 - C31547 + C31550 - C31549) * C31222 +
            (C15773 * C1845 - C15769 * C1851 + C15774 * C1846 -
             C47448 * C1852) *
                C31225 +
            (C15773 * C1854 - C15769 * C1863 + C15774 * C1855 -
             C47448 * C1864) *
                C47481) *
               C47369 * C47464) *
              C47163 * C259 +
          (((C15769 * C126 - C15773 * C119 + C47448 * C130 - C15774 * C120) *
                C31224 +
            (C15769 * C140 - C15773 * C129 + C47448 * C141 - C15774 * C131) *
                C31222 +
            (C31551 - C31552 + C31553 - C31554) * C31225 +
            (C31555 - C31556 + C31557 - C31558) * C47481) *
               C47369 * C47501 +
           ((C31552 - C31551 + C31554 - C31553) * C31224 +
            (C31556 - C31555 + C31558 - C31557) * C31222 +
            (C31559 - C31560 + C31561 - C31562) * C31225 +
            (C31563 - C31564 + C31565 - C31566) * C47481) *
               C47369 * C47490 +
           ((C31560 - C31559 + C31562 - C31561) * C31224 +
            (C31564 - C31563 + C31566 - C31565) * C31222 +
            (C15769 * C1852 - C15773 * C1846 + C47448 * C2121 -
             C15774 * C2120) *
                C31225 +
            (C15769 * C1864 - C15773 * C1855 + C47448 * C2123 -
             C15774 * C2122) *
                C47481) *
               C47369 * C47464) *
              C47163 * C47455)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C15769 * C124 - C15773 * C117 + C47448 * C125 - C15774 * C118) *
                C31224 +
            (C15769 * C138 - C15773 * C127 + C47448 * C139 - C15774 * C128) *
                C31222 +
            (C31519 - C31520 + C31521 - C31522) * C31225 +
            (C31523 - C31524 + C31525 - C31526) * C47481) *
               C47369 * C47181 * C942 +
           ((C15923 - C15922 + C15925 - C15924) * C31224 +
            (C15927 - C15926 + C15929 - C15928) * C31222 +
            (C16578 - C16579 + C16580 - C16581) * C31225 +
            (C16582 - C16583 + C16584 - C16585) * C47481) *
               C47369 * C47181 * C943 +
           ((C15931 - C15930 + C15933 - C15932) * C31224 +
            (C15935 - C15934 + C15937 - C15936) * C31222 +
            (C17000 - C17001 + C17002 - C17003) * C31225 +
            (C17004 - C17005 + C17006 - C17007) * C47481) *
               C47369 * C47181 * C47461) *
              C47497 +
          (((C15773 * C118 - C15769 * C125 + C15774 * C119 - C47448 * C126) *
                C31224 +
            (C15773 * C128 - C15769 * C139 + C15774 * C129 - C47448 * C140) *
                C31222 +
            (C31535 - C31536 + C31537 - C31538) * C31225 +
            (C31539 - C31540 + C31541 - C31542) * C47481) *
               C47369 * C47181 * C942 +
           ((C15939 - C15938 + C15941 - C15940) * C31224 +
            (C15943 - C15942 + C15945 - C15944) * C31222 +
            (C16586 - C16587 + C16588 - C16589) * C31225 +
            (C16590 - C16591 + C16592 - C16593) * C47481) *
               C47369 * C47181 * C943 +
           ((C15947 - C15946 + C15949 - C15948) * C31224 +
            (C15951 - C15950 + C15953 - C15952) * C31222 +
            (C17348 - C17349 + C17350 - C17351) * C31225 +
            (C17352 - C17353 + C17354 - C17355) * C47481) *
               C47369 * C47181 * C47461) *
              C47484 +
          (((C15769 * C126 - C15773 * C119 + C47448 * C130 - C15774 * C120) *
                C31224 +
            (C15769 * C140 - C15773 * C129 + C47448 * C141 - C15774 * C131) *
                C31222 +
            (C31551 - C31552 + C31553 - C31554) * C31225 +
            (C31555 - C31556 + C31557 - C31558) * C47481) *
               C47369 * C47181 * C942 +
           ((C15955 - C15954 + C15957 - C15956) * C31224 +
            (C15959 - C15958 + C15961 - C15960) * C31222 +
            (C16594 - C16595 + C16596 - C16597) * C31225 +
            (C16598 - C16599 + C16600 - C16601) * C47481) *
               C47369 * C47181 * C943 +
           ((C15963 - C15962 + C15965 - C15964) * C31224 +
            (C15967 - C15966 + C15969 - C15968) * C31222 +
            (C15769 * C1167 - C15773 * C1155 + C47448 * C1441 -
             C15774 * C1440) *
                C31225 +
            (C15769 * C1182 - C15773 * C1170 + C47448 * C1443 -
             C15774 * C1442) *
                C47481) *
               C47369 * C47181 * C47461) *
              C47455)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C15769 * C124 - C15773 * C117 + C47448 * C125 - C15774 * C118) *
               C31224 +
           (C15769 * C138 - C15773 * C127 + C47448 * C139 - C15774 * C128) *
               C31222 +
           (C31519 - C31520 + C31521 - C31522) * C31225 +
           (C31523 - C31524 + C31525 - C31526) * C47481) *
              C47369 * C47181 * C1010 +
          ((C15923 - C15922 + C15925 - C15924) * C31224 +
           (C15927 - C15926 + C15929 - C15928) * C31222 +
           (C16578 - C16579 + C16580 - C16581) * C31225 +
           (C16582 - C16583 + C16584 - C16585) * C47481) *
              C47369 * C47181 * C1011 +
          ((C15931 - C15930 + C15933 - C15932) * C31224 +
           (C15935 - C15934 + C15937 - C15936) * C31222 +
           (C17000 - C17001 + C17002 - C17003) * C31225 +
           (C17004 - C17005 + C17006 - C17007) * C47481) *
              C47369 * C47181 * C1012 +
          ((C16831 - C16830 + C16833 - C16832) * C31224 +
           (C16835 - C16834 + C16837 - C16836) * C31222 +
           (C17486 - C17487 + C17488 - C17489) * C31225 +
           (C17490 - C17491 + C17492 - C17493) * C47481) *
              C47369 * C47181 * C1013 +
          ((C16839 - C16838 + C16841 - C16840) * C31224 +
           (C16843 - C16842 + C16845 - C16844) * C31222 +
           (C15769 * C6309 - C15773 * C6307 + C47448 * C6310 - C15774 * C6308) *
               C31225 +
           (C15769 * C6313 - C15773 * C6311 + C47448 * C6314 - C15774 * C6312) *
               C47481) *
              C47369 * C47181 * C1014) *
         C47135) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C15769 * C124 - C15773 * C117 + C47448 * C125 - C15774 * C118) *
                C31224 +
            (C15769 * C138 - C15773 * C127 + C47448 * C139 - C15774 * C128) *
                C31222 +
            (C31519 - C31520 + C31521 - C31522) * C31225 +
            (C31523 - C31524 + C31525 - C31526) * C47481) *
               C47369 * C47501 +
           ((C31520 - C31519 + C31522 - C31521) * C31224 +
            (C31524 - C31523 + C31526 - C31525) * C31222 +
            (C31527 - C31528 + C31529 - C31530) * C31225 +
            (C31531 - C31532 + C31533 - C31534) * C47481) *
               C47369 * C47490 +
           ((C31528 - C31527 + C31530 - C31529) * C31224 +
            (C31532 - C31531 + C31534 - C31533) * C31222 +
            (C15769 * C1850 - C15773 * C1844 + C47448 * C1851 -
             C15774 * C1845) *
                C31225 +
            (C15769 * C1862 - C15773 * C1853 + C47448 * C1863 -
             C15774 * C1854) *
                C47481) *
               C47369 * C47464) *
              C942 +
          (((C15923 - C15922 + C15925 - C15924) * C31224 +
            (C15927 - C15926 + C15929 - C15928) * C31222 +
            (C16578 - C16579 + C16580 - C16581) * C31225 +
            (C16582 - C16583 + C16584 - C16585) * C47481) *
               C47369 * C47501 +
           ((C16579 - C16578 + C16581 - C16580) * C31224 +
            (C16583 - C16582 + C16585 - C16584) * C31222 +
            (C16992 - C16993 + C16994 - C16995) * C31225 +
            (C16996 - C16997 + C16998 - C16999) * C47481) *
               C47369 * C47490 +
           ((C16993 - C16992 + C16995 - C16994) * C31224 +
            (C16997 - C16996 + C16999 - C16998) * C31222 +
            (C18330 - C18331 + C18332 - C18333) * C31225 +
            (C18334 - C18335 + C18336 - C18337) * C47481) *
               C47369 * C47464) *
              C943 +
          (((C15931 - C15930 + C15933 - C15932) * C31224 +
            (C15935 - C15934 + C15937 - C15936) * C31222 +
            (C17000 - C17001 + C17002 - C17003) * C31225 +
            (C17004 - C17005 + C17006 - C17007) * C47481) *
               C47369 * C47501 +
           ((C17001 - C17000 + C17003 - C17002) * C31224 +
            (C17005 - C17004 + C17007 - C17006) * C31222 +
            (C17008 - C17009 + C17010 - C17011) * C31225 +
            (C17012 - C17013 + C17014 - C17015) * C47481) *
               C47369 * C47490 +
           ((C17009 - C17008 + C17011 - C17010) * C31224 +
            (C17013 - C17012 + C17015 - C17014) * C31222 +
            (C15769 * C7169 - C15773 * C7167 + C47448 * C7170 -
             C15774 * C7168) *
                C31225 +
            (C15769 * C7173 - C15773 * C7171 + C47448 * C7174 -
             C15774 * C7172) *
                C47481) *
               C47369 * C47464) *
              C47461) *
         C47135) /
            (p * q * std::sqrt(p + q));
    d2ee[173] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C15769 * C124 - C15773 * C117 + C47448 * C125 - C15774 * C118) *
                C31224 +
            (C15769 * C138 - C15773 * C127 + C47448 * C139 - C15774 * C128) *
                C31222 +
            (C31519 - C31520 + C31521 - C31522) * C31225 +
            (C31523 - C31524 + C31525 - C31526) * C47481) *
               C47369 * C47430 +
           ((C31520 - C31519 + C31522 - C31521) * C31224 +
            (C31524 - C31523 + C31526 - C31525) * C31222 +
            (C31527 - C31528 + C31529 - C31530) * C31225 +
            (C31531 - C31532 + C31533 - C31534) * C47481) *
               C47369 * C47268) *
              C47163 * C554 +
          (((C15773 * C118 - C15769 * C125 + C15774 * C119 - C47448 * C126) *
                C31224 +
            (C15773 * C128 - C15769 * C139 + C15774 * C129 - C47448 * C140) *
                C31222 +
            (C31535 - C31536 + C31537 - C31538) * C31225 +
            (C31539 - C31540 + C31541 - C31542) * C47481) *
               C47369 * C47430 +
           ((C31536 - C31535 + C31538 - C31537) * C31224 +
            (C31540 - C31539 + C31542 - C31541) * C31222 +
            (C31543 - C31544 + C31545 - C31546) * C31225 +
            (C31547 - C31548 + C31549 - C31550) * C47481) *
               C47369 * C47268) *
              C47163 * C555 +
          (((C15769 * C126 - C15773 * C119 + C47448 * C130 - C15774 * C120) *
                C31224 +
            (C15769 * C140 - C15773 * C129 + C47448 * C141 - C15774 * C131) *
                C31222 +
            (C31551 - C31552 + C31553 - C31554) * C31225 +
            (C31555 - C31556 + C31557 - C31558) * C47481) *
               C47369 * C47430 +
           ((C31552 - C31551 + C31554 - C31553) * C31224 +
            (C31556 - C31555 + C31558 - C31557) * C31222 +
            (C31559 - C31560 + C31561 - C31562) * C31225 +
            (C31563 - C31564 + C31565 - C31566) * C47481) *
               C47369 * C47268) *
              C47163 * C556 +
          (((C15773 * C120 - C15769 * C130 + C15774 * C121 - C47448 * C132) *
                C31224 +
            (C15773 * C131 - C15769 * C141 + C15774 * C133 - C47448 * C142) *
                C31222 +
            (C31827 - C31828 + C31829 - C31830) * C31225 +
            (C31831 - C31832 + C31833 - C31834) * C47481) *
               C47369 * C47430 +
           ((C31828 - C31827 + C31830 - C31829) * C31224 +
            (C31832 - C31831 + C31834 - C31833) * C31222 +
            (C15769 * C438 - C15773 * C421 + C47448 * C442 - C15774 * C423) *
                C31225 +
            (C15769 * C451 - C15773 * C439 + C47448 * C453 - C15774 * C443) *
                C47481) *
               C47369 * C47268) *
              C47163 * C47465)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C15769 * C124 - C15773 * C117 + C47448 * C125 - C15774 * C118) *
                 C31224 +
             (C15769 * C138 - C15773 * C127 + C47448 * C139 - C15774 * C128) *
                 C31222 +
             (C31519 - C31520 + C31521 - C31522) * C31225 +
             (C31523 - C31524 + C31525 - C31526) * C47481) *
                C47369 * C47430 +
            ((C31520 - C31519 + C31522 - C31521) * C31224 +
             (C31524 - C31523 + C31526 - C31525) * C31222 +
             (C31527 - C31528 + C31529 - C31530) * C31225 +
             (C31531 - C31532 + C31533 - C31534) * C47481) *
                C47369 * C47268) *
               C942 +
           (((C15923 - C15922 + C15925 - C15924) * C31224 +
             (C15927 - C15926 + C15929 - C15928) * C31222 +
             (C16578 - C16579 + C16580 - C16581) * C31225 +
             (C16582 - C16583 + C16584 - C16585) * C47481) *
                C47369 * C47430 +
            ((C16579 - C16578 + C16581 - C16580) * C31224 +
             (C16583 - C16582 + C16585 - C16584) * C31222 +
             (C16992 - C16993 + C16994 - C16995) * C31225 +
             (C16996 - C16997 + C16998 - C16999) * C47481) *
                C47369 * C47268) *
               C943 +
           (((C15931 - C15930 + C15933 - C15932) * C31224 +
             (C15935 - C15934 + C15937 - C15936) * C31222 +
             (C17000 - C17001 + C17002 - C17003) * C31225 +
             (C17004 - C17005 + C17006 - C17007) * C47481) *
                C47369 * C47430 +
            ((C17001 - C17000 + C17003 - C17002) * C31224 +
             (C17005 - C17004 + C17007 - C17006) * C31222 +
             (C17008 - C17009 + C17010 - C17011) * C31225 +
             (C17012 - C17013 + C17014 - C17015) * C47481) *
                C47369 * C47268) *
               C47461) *
              C47415 +
          ((((C15773 * C118 - C15769 * C125 + C15774 * C119 - C47448 * C126) *
                 C31224 +
             (C15773 * C128 - C15769 * C139 + C15774 * C129 - C47448 * C140) *
                 C31222 +
             (C31535 - C31536 + C31537 - C31538) * C31225 +
             (C31539 - C31540 + C31541 - C31542) * C47481) *
                C47369 * C47430 +
            ((C31536 - C31535 + C31538 - C31537) * C31224 +
             (C31540 - C31539 + C31542 - C31541) * C31222 +
             (C31543 - C31544 + C31545 - C31546) * C31225 +
             (C31547 - C31548 + C31549 - C31550) * C47481) *
                C47369 * C47268) *
               C942 +
           (((C15939 - C15938 + C15941 - C15940) * C31224 +
             (C15943 - C15942 + C15945 - C15944) * C31222 +
             (C16586 - C16587 + C16588 - C16589) * C31225 +
             (C16590 - C16591 + C16592 - C16593) * C47481) *
                C47369 * C47430 +
            ((C16587 - C16586 + C16589 - C16588) * C31224 +
             (C16591 - C16590 + C16593 - C16592) * C31222 +
             (C18062 - C18063 + C18064 - C18065) * C31225 +
             (C18066 - C18067 + C18068 - C18069) * C47481) *
                C47369 * C47268) *
               C943 +
           (((C15947 - C15946 + C15949 - C15948) * C31224 +
             (C15951 - C15950 + C15953 - C15952) * C31222 +
             (C17348 - C17349 + C17350 - C17351) * C31225 +
             (C17352 - C17353 + C17354 - C17355) * C47481) *
                C47369 * C47430 +
            ((C17349 - C17348 + C17351 - C17350) * C31224 +
             (C17353 - C17352 + C17355 - C17354) * C31222 +
             (C15769 * C1172 - C15773 * C1157 + C47448 * C1173 -
              C15774 * C1158) *
                 C31225 +
             (C15769 * C1184 - C15773 * C1175 + C47448 * C1185 -
              C15774 * C1176) *
                 C47481) *
                C47369 * C47268) *
               C47461) *
              C47146)) /
            (p * q * std::sqrt(p + q));
    d2ee[174] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C15769 * C124 - C15773 * C117 + C47448 * C125 - C15774 * C118) *
               C31224 +
           (C15769 * C138 - C15773 * C127 + C47448 * C139 - C15774 * C128) *
               C31222 +
           (C15769 * C424 - C15773 * C414 + C47448 * C425 - C15774 * C415) *
               C31225 +
           (C15769 * C444 - C15773 * C427 + C47448 * C445 - C15774 * C428) *
               C47481) *
              C47369 * C47181 * C47163 * C108 +
          ((C15773 * C118 - C15769 * C125 + C15774 * C119 - C47448 * C126) *
               C31224 +
           (C15773 * C128 - C15769 * C139 + C15774 * C129 - C47448 * C140) *
               C31222 +
           (C15773 * C415 - C15769 * C425 + C15774 * C416 - C47448 * C426) *
               C31225 +
           (C15773 * C428 - C15769 * C445 + C15774 * C429 - C47448 * C446) *
               C47481) *
              C47369 * C47181 * C47163 * C109 +
          ((C15769 * C126 - C15773 * C119 + C47448 * C130 - C15774 * C120) *
               C31224 +
           (C15769 * C140 - C15773 * C129 + C47448 * C141 - C15774 * C131) *
               C31222 +
           (C15769 * C426 - C15773 * C416 + C47448 * C436 - C15774 * C420) *
               C31225 +
           (C15769 * C446 - C15773 * C429 + C47448 * C450 - C15774 * C437) *
               C47481) *
              C47369 * C47181 * C47163 * C110 +
          ((C15773 * C120 - C15769 * C130 + C15774 * C121 - C47448 * C132) *
               C31224 +
           (C15773 * C131 - C15769 * C141 + C15774 * C133 - C47448 * C142) *
               C31222 +
           (C15773 * C420 - C15769 * C436 + C15774 * C422 - C47448 * C440) *
               C31225 +
           (C15773 * C437 - C15769 * C450 + C15774 * C441 - C47448 * C452) *
               C47481) *
              C47369 * C47181 * C47163 * C111 +
          ((C15769 * C132 - C15773 * C121 + C47448 * C134 - C15774 * C122) *
               C31224 +
           (C15769 * C142 - C15773 * C133 + C47448 * C143 - C15774 * C135) *
               C31222 +
           (C15769 * C440 - C15773 * C422 + C47448 * C663 - C15774 * C662) *
               C31225 +
           (C15769 * C452 - C15773 * C441 + C47448 * C665 - C15774 * C664) *
               C47481) *
              C47369 * C47181 * C47163 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C15769 * C124 - C15773 * C117 + C47448 * C125 - C15774 * C118) *
                C31224 +
            (C15769 * C138 - C15773 * C127 + C47448 * C139 - C15774 * C128) *
                C31222 +
            (C15769 * C424 - C15773 * C414 + C47448 * C425 - C15774 * C415) *
                C31225 +
            (C15769 * C444 - C15773 * C427 + C47448 * C445 - C15774 * C428) *
                C47481) *
               C47369 * C47181 * C47500 +
           ((C15923 - C15922 + C15925 - C15924) * C31224 +
            (C15927 - C15926 + C15929 - C15928) * C31222 +
            (C16578 - C16579 + C16580 - C16581) * C31225 +
            (C16582 - C16583 + C16584 - C16585) * C47481) *
               C47369 * C47181 * C47488 +
           ((C15931 - C15930 + C15933 - C15932) * C31224 +
            (C15935 - C15934 + C15937 - C15936) * C31222 +
            (C17000 - C17001 + C17002 - C17003) * C31225 +
            (C17004 - C17005 + C17006 - C17007) * C47481) *
               C47369 * C47181 * C47461) *
              C258 +
          (((C15773 * C118 - C15769 * C125 + C15774 * C119 - C47448 * C126) *
                C31224 +
            (C15773 * C128 - C15769 * C139 + C15774 * C129 - C47448 * C140) *
                C31222 +
            (C15773 * C415 - C15769 * C425 + C15774 * C416 - C47448 * C426) *
                C31225 +
            (C15773 * C428 - C15769 * C445 + C15774 * C429 - C47448 * C446) *
                C47481) *
               C47369 * C47181 * C47500 +
           ((C15939 - C15938 + C15941 - C15940) * C31224 +
            (C15943 - C15942 + C15945 - C15944) * C31222 +
            (C16586 - C16587 + C16588 - C16589) * C31225 +
            (C16590 - C16591 + C16592 - C16593) * C47481) *
               C47369 * C47181 * C47488 +
           ((C15947 - C15946 + C15949 - C15948) * C31224 +
            (C15951 - C15950 + C15953 - C15952) * C31222 +
            (C17348 - C17349 + C17350 - C17351) * C31225 +
            (C17352 - C17353 + C17354 - C17355) * C47481) *
               C47369 * C47181 * C47461) *
              C259 +
          (((C15769 * C126 - C15773 * C119 + C47448 * C130 - C15774 * C120) *
                C31224 +
            (C15769 * C140 - C15773 * C129 + C47448 * C141 - C15774 * C131) *
                C31222 +
            (C15769 * C426 - C15773 * C416 + C47448 * C436 - C15774 * C420) *
                C31225 +
            (C15769 * C446 - C15773 * C429 + C47448 * C450 - C15774 * C437) *
                C47481) *
               C47369 * C47181 * C47500 +
           ((C15955 - C15954 + C15957 - C15956) * C31224 +
            (C15959 - C15958 + C15961 - C15960) * C31222 +
            (C16594 - C16595 + C16596 - C16597) * C31225 +
            (C16598 - C16599 + C16600 - C16601) * C47481) *
               C47369 * C47181 * C47488 +
           ((C15963 - C15962 + C15965 - C15964) * C31224 +
            (C15967 - C15966 + C15969 - C15968) * C31222 +
            (C15769 * C1167 - C15773 * C1155 + C47448 * C1441 -
             C15774 * C1440) *
                C31225 +
            (C15769 * C1182 - C15773 * C1170 + C47448 * C1443 -
             C15774 * C1442) *
                C47481) *
               C47369 * C47181 * C47461) *
              C47455)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C15769 * C124 - C15773 * C117 + C47448 * C125 - C15774 * C118) *
                C31224 +
            (C15769 * C138 - C15773 * C127 + C47448 * C139 - C15774 * C128) *
                C31222 +
            (C31519 - C31520 + C31521 - C31522) * C31225 +
            (C31523 - C31524 + C31525 - C31526) * C47481) *
               C47369 * C47181 * C942 +
           ((C15923 - C15922 + C15925 - C15924) * C31224 +
            (C15927 - C15926 + C15929 - C15928) * C31222 +
            (C16578 - C16579 + C16580 - C16581) * C31225 +
            (C16582 - C16583 + C16584 - C16585) * C47481) *
               C47369 * C47181 * C943 +
           ((C15931 - C15930 + C15933 - C15932) * C31224 +
            (C15935 - C15934 + C15937 - C15936) * C31222 +
            (C17000 - C17001 + C17002 - C17003) * C31225 +
            (C17004 - C17005 + C17006 - C17007) * C47481) *
               C47369 * C47181 * C47461) *
              C47497 +
          (((C15773 * C118 - C15769 * C125 + C15774 * C119 - C47448 * C126) *
                C31224 +
            (C15773 * C128 - C15769 * C139 + C15774 * C129 - C47448 * C140) *
                C31222 +
            (C31535 - C31536 + C31537 - C31538) * C31225 +
            (C31539 - C31540 + C31541 - C31542) * C47481) *
               C47369 * C47181 * C942 +
           ((C15939 - C15938 + C15941 - C15940) * C31224 +
            (C15943 - C15942 + C15945 - C15944) * C31222 +
            (C16586 - C16587 + C16588 - C16589) * C31225 +
            (C16590 - C16591 + C16592 - C16593) * C47481) *
               C47369 * C47181 * C943 +
           ((C15947 - C15946 + C15949 - C15948) * C31224 +
            (C15951 - C15950 + C15953 - C15952) * C31222 +
            (C17348 - C17349 + C17350 - C17351) * C31225 +
            (C17352 - C17353 + C17354 - C17355) * C47481) *
               C47369 * C47181 * C47461) *
              C47484 +
          (((C15769 * C126 - C15773 * C119 + C47448 * C130 - C15774 * C120) *
                C31224 +
            (C15769 * C140 - C15773 * C129 + C47448 * C141 - C15774 * C131) *
                C31222 +
            (C31551 - C31552 + C31553 - C31554) * C31225 +
            (C31555 - C31556 + C31557 - C31558) * C47481) *
               C47369 * C47181 * C942 +
           ((C15955 - C15954 + C15957 - C15956) * C31224 +
            (C15959 - C15958 + C15961 - C15960) * C31222 +
            (C16594 - C16595 + C16596 - C16597) * C31225 +
            (C16598 - C16599 + C16600 - C16601) * C47481) *
               C47369 * C47181 * C943 +
           ((C15963 - C15962 + C15965 - C15964) * C31224 +
            (C15967 - C15966 + C15969 - C15968) * C31222 +
            (C15769 * C1167 - C15773 * C1155 + C47448 * C1441 -
             C15774 * C1440) *
                C31225 +
            (C15769 * C1182 - C15773 * C1170 + C47448 * C1443 -
             C15774 * C1442) *
                C47481) *
               C47369 * C47181 * C47461) *
              C47455)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C15769 * C124 - C15773 * C117 + C47448 * C125 - C15774 * C118) *
               C31224 +
           (C15769 * C138 - C15773 * C127 + C47448 * C139 - C15774 * C128) *
               C31222 +
           (C31519 - C31520 + C31521 - C31522) * C31225 +
           (C31523 - C31524 + C31525 - C31526) * C47481) *
              C47369 * C47181 * C1010 +
          ((C15923 - C15922 + C15925 - C15924) * C31224 +
           (C15927 - C15926 + C15929 - C15928) * C31222 +
           (C16578 - C16579 + C16580 - C16581) * C31225 +
           (C16582 - C16583 + C16584 - C16585) * C47481) *
              C47369 * C47181 * C1011 +
          ((C15931 - C15930 + C15933 - C15932) * C31224 +
           (C15935 - C15934 + C15937 - C15936) * C31222 +
           (C17000 - C17001 + C17002 - C17003) * C31225 +
           (C17004 - C17005 + C17006 - C17007) * C47481) *
              C47369 * C47181 * C1012 +
          ((C16831 - C16830 + C16833 - C16832) * C31224 +
           (C16835 - C16834 + C16837 - C16836) * C31222 +
           (C17486 - C17487 + C17488 - C17489) * C31225 +
           (C17490 - C17491 + C17492 - C17493) * C47481) *
              C47369 * C47181 * C1013 +
          ((C16839 - C16838 + C16841 - C16840) * C31224 +
           (C16843 - C16842 + C16845 - C16844) * C31222 +
           (C15769 * C6309 - C15773 * C6307 + C47448 * C6310 - C15774 * C6308) *
               C31225 +
           (C15769 * C6313 - C15773 * C6311 + C47448 * C6314 - C15774 * C6312) *
               C47481) *
              C47369 * C47181 * C1014) *
         C47135) /
            (p * q * std::sqrt(p + q));
    d2ee[175] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((((C47108 * C124 - C21367 * C117) * C31224 +
                      (C47108 * C138 - C21367 * C127) * C31222 +
                      (C25975 - C25976) * C31225 + (C25977 - C25978) * C47481) *
                         C4577 +
                     ((C21479 - C21480) * C31224 + (C21481 - C21482) * C31222 +
                      C26465 * C31225 + C26466 * C47481) *
                         C47479) *
                        C47181 * C47222 +
                    (((C21480 - C21479) * C31224 + (C21482 - C21481) * C31222 +
                      C26467 * C31225 + C26468 * C47481) *
                         C4577 +
                     ((C21484 - C21483) * C31224 + (C21486 - C21485) * C31222 +
                      C22322 * C31225 + C22323 * C47481) *
                         C47479) *
                        C47181 * C47229 +
                    ((C21515 * C31224 + C21516 * C31222 + C26855 * C31225 +
                      C26856 * C47481) *
                         C4577 +
                     ((C21488 - C21487) * C31224 + (C21490 - C21489) * C31222 +
                      C22712 * C31225 + C22713 * C47481) *
                         C47479) *
                        C47181 * C2700) *
                       C47140 +
                   ((((C21367 * C118 - C47108 * C125) * C31224 +
                      (C21367 * C128 - C47108 * C139) * C31222 +
                      (C25983 - C25984) * C31225 + (C25985 - C25986) * C47481) *
                         C4577 +
                     ((C21491 - C21492) * C31224 + (C21493 - C21494) * C31222 +
                      C26469 * C31225 + C26470 * C47481) *
                         C47479) *
                        C47181 * C47222 +
                    (((C21492 - C21491) * C31224 + (C21494 - C21493) * C31222 +
                      C26471 * C31225 + C26472 * C47481) *
                         C4577 +
                     ((C21496 - C21495) * C31224 + (C21498 - C21497) * C31222 +
                      C22601 * C31225 + C22602 * C47481) *
                         C47479) *
                        C47181 * C47229 +
                    ((C21517 * C31224 + C21518 * C31222 + C27183 * C31225 +
                      C27184 * C47481) *
                         C4577 +
                     ((C21500 - C21499) * C31224 + (C21502 - C21501) * C31222 +
                      (C22603 - C22604) * C31225 + (C22605 - C22606) * C47481) *
                         C47479) *
                        C47181 * C2700) *
                       C47149 +
                   ((((C47108 * C126 - C21367 * C119) * C31224 +
                      (C47108 * C140 - C21367 * C129) * C31222 +
                      (C25991 - C25992) * C31225 + (C25993 - C25994) * C47481) *
                         C4577 +
                     ((C21503 - C21504) * C31224 + (C21505 - C21506) * C31222 +
                      C26473 * C31225 + C26474 * C47481) *
                         C47479) *
                        C47181 * C47222 +
                    (((C21504 - C21503) * C31224 + (C21506 - C21505) * C31222 +
                      C26475 * C31225 + C26476 * C47481) *
                         C4577 +
                     ((C21508 - C21507) * C31224 + (C21510 - C21509) * C31222 +
                      (C22010 - C22011) * C31225 + (C22012 - C22013) * C47481) *
                         C47479) *
                        C47181 * C47229 +
                    ((C21519 * C31224 + C21520 * C31222 +
                      (C22011 - C22010) * C31225 + (C22013 - C22012) * C47481) *
                         C4577 +
                     ((C21512 - C21511) * C31224 + (C21514 - C21513) * C31222 +
                      (C47108 * C1547 - C21367 * C1544) * C31225 +
                      (C47108 * C1553 - C21367 * C1550) * C47481) *
                         C47479) *
                        C47181 * C2700) *
                       C2703)) /
                 (p * q * std::sqrt(p + q));
    d2ee[176] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C47108 * C124 - C21367 * C117) * C31224 +
              (C47108 * C138 - C21367 * C127) * C31222 +
              (C25975 - C25976) * C31225 + (C25977 - C25978) * C47481) *
                 C4577 +
             ((C21479 - C21480) * C31224 + (C21481 - C21482) * C31222 +
              C26465 * C31225 + C26466 * C47481) *
                 C47479) *
                C47430 +
            (((C25976 - C25975) * C31224 + (C25978 - C25977) * C31222 +
              (C25979 - C25980) * C31225 + (C25981 - C25982) * C47481) *
                 C4577 +
             (C26467 * C31224 + C26468 * C31222 + C26851 * C31225 +
              C26852 * C47481) *
                 C47479) *
                C47268) *
               C47222 +
           ((((C21480 - C21479) * C31224 + (C21482 - C21481) * C31222 +
              C26467 * C31225 + C26468 * C47481) *
                 C4577 +
             ((C21484 - C21483) * C31224 + (C21486 - C21485) * C31222 +
              C22322 * C31225 + C22323 * C47481) *
                 C47479) *
                C47430 +
            ((C26465 * C31224 + C26466 * C31222 + C26853 * C31225 +
              C26854 * C47481) *
                 C4577 +
             (C26855 * C31224 + C26856 * C31222 + C22342 * C31225 +
              C22343 * C47481) *
                 C47479) *
                C47268) *
               C47229 +
           (((C21515 * C31224 + C21516 * C31222 + C26855 * C31225 +
              C26856 * C47481) *
                 C4577 +
             ((C21488 - C21487) * C31224 + (C21490 - C21489) * C31222 +
              C22712 * C31225 + C22713 * C47481) *
                 C47479) *
                C47430 +
            ((C22322 * C31224 + C22323 * C31222 + C26857 * C31225 +
              C26858 * C47481) *
                 C4577 +
             (C27315 * C31224 + C27316 * C31222 + (C22336 - C22337) * C31225 +
              (C22338 - C22339) * C47481) *
                 C47479) *
                C47268) *
               C2700) *
              C2440 +
          (((((C21367 * C118 - C47108 * C125) * C31224 +
              (C21367 * C128 - C47108 * C139) * C31222 +
              (C25983 - C25984) * C31225 + (C25985 - C25986) * C47481) *
                 C4577 +
             ((C21491 - C21492) * C31224 + (C21493 - C21494) * C31222 +
              C26469 * C31225 + C26470 * C47481) *
                 C47479) *
                C47430 +
            (((C25984 - C25983) * C31224 + (C25986 - C25985) * C31222 +
              (C25987 - C25988) * C31225 + (C25989 - C25990) * C47481) *
                 C4577 +
             (C26471 * C31224 + C26472 * C31222 + C27901 * C31225 +
              C27902 * C47481) *
                 C47479) *
                C47268) *
               C47222 +
           ((((C21492 - C21491) * C31224 + (C21494 - C21493) * C31222 +
              C26471 * C31225 + C26472 * C47481) *
                 C4577 +
             ((C21496 - C21495) * C31224 + (C21498 - C21497) * C31222 +
              C22601 * C31225 + C22602 * C47481) *
                 C47479) *
                C47430 +
            ((C26469 * C31224 + C26470 * C31222 + C27903 * C31225 +
              C27904 * C47481) *
                 C4577 +
             (C27183 * C31224 + C27184 * C31222 + (C23157 - C23158) * C31225 +
              (C23159 - C23160) * C47481) *
                 C47479) *
                C47268) *
               C47229 +
           (((C21517 * C31224 + C21518 * C31222 + C27183 * C31225 +
              C27184 * C47481) *
                 C4577 +
             ((C21500 - C21499) * C31224 + (C21502 - C21501) * C31222 +
              (C22603 - C22604) * C31225 + (C22605 - C22606) * C47481) *
                 C47479) *
                C47430 +
            ((C22601 * C31224 + C22602 * C31222 + (C23158 - C23157) * C31225 +
              (C23160 - C23159) * C47481) *
                 C4577 +
             ((C22604 - C22603) * C31224 + (C22606 - C22605) * C31222 +
              (C47108 * C5808 - C21367 * C5806) * C31225 +
              (C47108 * C5812 - C21367 * C5810) * C47481) *
                 C47479) *
                C47268) *
               C2700) *
              C47146)) /
        (p * q * std::sqrt(p + q));
    d2ee[177] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C47108 * C124 - C21367 * C117) * C31224 +
             (C47108 * C138 - C21367 * C127) * C31222 +
             (C25975 - C25976) * C31225 + (C25977 - C25978) * C47481) *
                C4577 +
            ((C21479 - C21480) * C31224 + (C21481 - C21482) * C31222 +
             C26465 * C31225 + C26466 * C47481) *
                C47479) *
               C47181 * C47507 +
           (((C21480 - C21479) * C31224 + (C21482 - C21481) * C31222 +
             C26467 * C31225 + C26468 * C47481) *
                C4577 +
            ((C21484 - C21483) * C31224 + (C21486 - C21485) * C31222 +
             C22322 * C31225 + C22323 * C47481) *
                C47479) *
               C47181 * C47503 +
           ((C21515 * C31224 + C21516 * C31222 + C26855 * C31225 +
             C26856 * C47481) *
                C4577 +
            ((C21488 - C21487) * C31224 + (C21490 - C21489) * C31222 +
             C22712 * C31225 + C22713 * C47481) *
                C47479) *
               C47181 * C47493 +
           ((C22190 * C31224 + C22191 * C31222 + C27315 * C31225 +
             C27316 * C47481) *
                C4577 +
            ((C22193 - C22192) * C31224 + (C22195 - C22194) * C31222 +
             (C22714 - C22715) * C31225 + (C22716 - C22717) * C47481) *
                C47479) *
               C47181 * C47471) *
              C2440 +
          ((((C21367 * C118 - C47108 * C125) * C31224 +
             (C21367 * C128 - C47108 * C139) * C31222 +
             (C25983 - C25984) * C31225 + (C25985 - C25986) * C47481) *
                C4577 +
            ((C21491 - C21492) * C31224 + (C21493 - C21494) * C31222 +
             C26469 * C31225 + C26470 * C47481) *
                C47479) *
               C47181 * C47507 +
           (((C21492 - C21491) * C31224 + (C21494 - C21493) * C31222 +
             C26471 * C31225 + C26472 * C47481) *
                C4577 +
            ((C21496 - C21495) * C31224 + (C21498 - C21497) * C31222 +
             C22601 * C31225 + C22602 * C47481) *
                C47479) *
               C47181 * C47503 +
           ((C21517 * C31224 + C21518 * C31222 + C27183 * C31225 +
             C27184 * C47481) *
                C4577 +
            ((C21500 - C21499) * C31224 + (C21502 - C21501) * C31222 +
             (C22603 - C22604) * C31225 + (C22605 - C22606) * C47481) *
                C47479) *
               C47181 * C47493 +
           ((C22446 * C31224 + C22447 * C31222 + (C22604 - C22603) * C31225 +
             (C22606 - C22605) * C47481) *
                C4577 +
            ((C22449 - C22448) * C31224 + (C22451 - C22450) * C31222 +
             (C47108 * C6310 - C21367 * C6308) * C31225 +
             (C47108 * C6314 - C21367 * C6312) * C47481) *
                C47479) *
               C47181 * C47471) *
              C47146)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C47108 * C124 - C21367 * C117) * C31224 +
             (C47108 * C138 - C21367 * C127) * C31222 +
             (C25975 - C25976) * C31225 + (C25977 - C25978) * C47481) *
                C4577 +
            ((C21479 - C21480) * C31224 + (C21481 - C21482) * C31222 +
             C26465 * C31225 + C26466 * C47481) *
                C47479) *
               C47181 * C2332 +
           (((C21480 - C21479) * C31224 + (C21482 - C21481) * C31222 +
             C26467 * C31225 + C26468 * C47481) *
                C4577 +
            ((C21484 - C21483) * C31224 + (C21486 - C21485) * C31222 +
             C22322 * C31225 + C22323 * C47481) *
                C47479) *
               C47181 * C47226) *
              C47506 +
          ((((C21367 * C118 - C47108 * C125) * C31224 +
             (C21367 * C128 - C47108 * C139) * C31222 +
             (C25983 - C25984) * C31225 + (C25985 - C25986) * C47481) *
                C4577 +
            ((C21491 - C21492) * C31224 + (C21493 - C21494) * C31222 +
             C26469 * C31225 + C26470 * C47481) *
                C47479) *
               C47181 * C2332 +
           (((C21492 - C21491) * C31224 + (C21494 - C21493) * C31222 +
             C26471 * C31225 + C26472 * C47481) *
                C4577 +
            ((C21496 - C21495) * C31224 + (C21498 - C21497) * C31222 +
             C22601 * C31225 + C22602 * C47481) *
                C47479) *
               C47181 * C47226) *
              C47499 +
          ((((C47108 * C126 - C21367 * C119) * C31224 +
             (C47108 * C140 - C21367 * C129) * C31222 +
             (C25991 - C25992) * C31225 + (C25993 - C25994) * C47481) *
                C4577 +
            ((C21503 - C21504) * C31224 + (C21505 - C21506) * C31222 +
             C26473 * C31225 + C26474 * C47481) *
                C47479) *
               C47181 * C2332 +
           (((C21504 - C21503) * C31224 + (C21506 - C21505) * C31222 +
             C26475 * C31225 + C26476 * C47481) *
                C4577 +
            ((C21508 - C21507) * C31224 + (C21510 - C21509) * C31222 +
             (C22010 - C22011) * C31225 + (C22012 - C22013) * C47481) *
                C47479) *
               C47181 * C47226) *
              C47486 +
          ((((C21367 * C120 - C47108 * C130) * C31224 +
             (C21367 * C131 - C47108 * C141) * C31222 +
             (C26267 - C26268) * C31225 + (C26269 - C26270) * C47481) *
                C4577 +
            ((C21738 - C21739) * C31224 + (C21740 - C21741) * C31222 +
             (C26133 - C26134) * C31225 + (C26135 - C26136) * C47481) *
                C47479) *
               C47181 * C2332 +
           (((C21739 - C21738) * C31224 + (C21741 - C21740) * C31222 +
             (C26134 - C26133) * C31225 + (C26136 - C26135) * C47481) *
                C4577 +
            ((C21743 - C21742) * C31224 + (C21745 - C21744) * C31222 +
             (C47108 * C1441 - C21367 * C1440) * C31225 +
             (C47108 * C1443 - C21367 * C1442) * C47481) *
                C47479) *
               C47181 * C47226) *
              C47465)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C47108 * C124 - C21367 * C117) * C31224 +
              (C47108 * C138 - C21367 * C127) * C31222 +
              (C25975 - C25976) * C31225 + (C25977 - C25978) * C47481) *
                 C4577 +
             ((C21479 - C21480) * C31224 + (C21481 - C21482) * C31222 +
              C26465 * C31225 + C26466 * C47481) *
                 C47479) *
                C47501 +
            (((C25976 - C25975) * C31224 + (C25978 - C25977) * C31222 +
              (C25979 - C25980) * C31225 + (C25981 - C25982) * C47481) *
                 C4577 +
             (C26467 * C31224 + C26468 * C31222 + C26851 * C31225 +
              C26852 * C47481) *
                 C47479) *
                C47490 +
            (((C25980 - C25979) * C31224 + (C25982 - C25981) * C31222 +
              (C27695 - C27696) * C31225 + (C27697 - C27698) * C47481) *
                 C4577 +
             (C26853 * C31224 + C26854 * C31222 + C28173 * C31225 +
              C28174 * C47481) *
                 C47479) *
                C47464) *
               C2332 +
           ((((C21480 - C21479) * C31224 + (C21482 - C21481) * C31222 +
              C26467 * C31225 + C26468 * C47481) *
                 C4577 +
             ((C21484 - C21483) * C31224 + (C21486 - C21485) * C31222 +
              C22322 * C31225 + C22323 * C47481) *
                 C47479) *
                C47501 +
            ((C26465 * C31224 + C26466 * C31222 + C26853 * C31225 +
              C26854 * C47481) *
                 C4577 +
             (C26855 * C31224 + C26856 * C31222 + C22342 * C31225 +
              C22343 * C47481) *
                 C47479) *
                C47490 +
            ((C26851 * C31224 + C26852 * C31222 + C28175 * C31225 +
              C28176 * C47481) *
                 C4577 +
             (C26857 * C31224 + C26858 * C31222 + (C23365 - C23366) * C31225 +
              (C23367 - C23368) * C47481) *
                 C47479) *
                C47464) *
               C47226) *
              C2440 +
          (((((C21367 * C118 - C47108 * C125) * C31224 +
              (C21367 * C128 - C47108 * C139) * C31222 +
              (C25983 - C25984) * C31225 + (C25985 - C25986) * C47481) *
                 C4577 +
             ((C21491 - C21492) * C31224 + (C21493 - C21494) * C31222 +
              C26469 * C31225 + C26470 * C47481) *
                 C47479) *
                C47501 +
            (((C25984 - C25983) * C31224 + (C25986 - C25985) * C31222 +
              (C25987 - C25988) * C31225 + (C25989 - C25990) * C47481) *
                 C4577 +
             (C26471 * C31224 + C26472 * C31222 + C27901 * C31225 +
              C27902 * C47481) *
                 C47479) *
                C47490 +
            (((C25988 - C25987) * C31224 + (C25990 - C25989) * C31222 +
              (C28039 - C28040) * C31225 + (C28041 - C28042) * C47481) *
                 C4577 +
             (C27903 * C31224 + C27904 * C31222 + (C27905 - C27906) * C31225 +
              (C27907 - C27908) * C47481) *
                 C47479) *
                C47464) *
               C2332 +
           ((((C21492 - C21491) * C31224 + (C21494 - C21493) * C31222 +
              C26471 * C31225 + C26472 * C47481) *
                 C4577 +
             ((C21496 - C21495) * C31224 + (C21498 - C21497) * C31222 +
              C22601 * C31225 + C22602 * C47481) *
                 C47479) *
                C47501 +
            ((C26469 * C31224 + C26470 * C31222 + C27903 * C31225 +
              C27904 * C47481) *
                 C4577 +
             (C27183 * C31224 + C27184 * C31222 + (C23157 - C23158) * C31225 +
              (C23159 - C23160) * C47481) *
                 C47479) *
                C47490 +
            ((C27901 * C31224 + C27902 * C31222 + (C27906 - C27905) * C31225 +
              (C27908 - C27907) * C47481) *
                 C4577 +
             ((C23158 - C23157) * C31224 + (C23160 - C23159) * C31222 +
              (C47108 * C7170 - C21367 * C7168) * C31225 +
              (C47108 * C7174 - C21367 * C7172) * C47481) *
                 C47479) *
                C47464) *
               C47226) *
              C47146)) /
            (p * q * std::sqrt(p + q));
    d2ee[178] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C47108 * C124 - C21367 * C117) * C31224 +
              (C47108 * C138 - C21367 * C127) * C31222 +
              (C25975 - C25976) * C31225 + (C25977 - C25978) * C47481) *
                 C4577 +
             ((C21479 - C21480) * C31224 + (C21481 - C21482) * C31222 +
              C26465 * C31225 + C26466 * C47481) *
                 C47479) *
                C47430 +
            (((C25976 - C25975) * C31224 + (C25978 - C25977) * C31222 +
              (C25979 - C25980) * C31225 + (C25981 - C25982) * C47481) *
                 C4577 +
             (C26467 * C31224 + C26468 * C31222 + C26851 * C31225 +
              C26852 * C47481) *
                 C47479) *
                C47268) *
               C2332 +
           ((((C21480 - C21479) * C31224 + (C21482 - C21481) * C31222 +
              C26467 * C31225 + C26468 * C47481) *
                 C4577 +
             ((C21484 - C21483) * C31224 + (C21486 - C21485) * C31222 +
              C22322 * C31225 + C22323 * C47481) *
                 C47479) *
                C47430 +
            ((C26465 * C31224 + C26466 * C31222 + C26853 * C31225 +
              C26854 * C47481) *
                 C4577 +
             (C26855 * C31224 + C26856 * C31222 + C22342 * C31225 +
              C22343 * C47481) *
                 C47479) *
                C47268) *
               C47226) *
              C47140 +
          (((((C21367 * C118 - C47108 * C125) * C31224 +
              (C21367 * C128 - C47108 * C139) * C31222 +
              (C25983 - C25984) * C31225 + (C25985 - C25986) * C47481) *
                 C4577 +
             ((C21491 - C21492) * C31224 + (C21493 - C21494) * C31222 +
              C26469 * C31225 + C26470 * C47481) *
                 C47479) *
                C47430 +
            (((C25984 - C25983) * C31224 + (C25986 - C25985) * C31222 +
              (C25987 - C25988) * C31225 + (C25989 - C25990) * C47481) *
                 C4577 +
             (C26471 * C31224 + C26472 * C31222 + C27901 * C31225 +
              C27902 * C47481) *
                 C47479) *
                C47268) *
               C2332 +
           ((((C21492 - C21491) * C31224 + (C21494 - C21493) * C31222 +
              C26471 * C31225 + C26472 * C47481) *
                 C4577 +
             ((C21496 - C21495) * C31224 + (C21498 - C21497) * C31222 +
              C22601 * C31225 + C22602 * C47481) *
                 C47479) *
                C47430 +
            ((C26469 * C31224 + C26470 * C31222 + C27903 * C31225 +
              C27904 * C47481) *
                 C4577 +
             (C27183 * C31224 + C27184 * C31222 + (C23157 - C23158) * C31225 +
              (C23159 - C23160) * C47481) *
                 C47479) *
                C47268) *
               C47226) *
              C47149 +
          (((((C47108 * C126 - C21367 * C119) * C31224 +
              (C47108 * C140 - C21367 * C129) * C31222 +
              (C25991 - C25992) * C31225 + (C25993 - C25994) * C47481) *
                 C4577 +
             ((C21503 - C21504) * C31224 + (C21505 - C21506) * C31222 +
              C26473 * C31225 + C26474 * C47481) *
                 C47479) *
                C47430 +
            (((C25992 - C25991) * C31224 + (C25994 - C25993) * C31222 +
              (C25995 - C25996) * C31225 + (C25997 - C25998) * C47481) *
                 C4577 +
             (C26475 * C31224 + C26476 * C31222 + (C25999 - C26000) * C31225 +
              (C26001 - C26002) * C47481) *
                 C47479) *
                C47268) *
               C2332 +
           ((((C21504 - C21503) * C31224 + (C21506 - C21505) * C31222 +
              C26475 * C31225 + C26476 * C47481) *
                 C4577 +
             ((C21508 - C21507) * C31224 + (C21510 - C21509) * C31222 +
              (C22010 - C22011) * C31225 + (C22012 - C22013) * C47481) *
                 C47479) *
                C47430 +
            ((C26473 * C31224 + C26474 * C31222 + (C26000 - C25999) * C31225 +
              (C26002 - C26001) * C47481) *
                 C4577 +
             ((C22011 - C22010) * C31224 + (C22013 - C22012) * C31222 +
              (C47108 * C1173 - C21367 * C1158) * C31225 +
              (C47108 * C1185 - C21367 * C1176) * C47481) *
                 C47479) *
                C47268) *
               C47226) *
              C2703)) /
        (p * q * std::sqrt(p + q));
    d2ee[179] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((((C47108 * C124 - C21367 * C117) * C31224 +
                      (C47108 * C138 - C21367 * C127) * C31222 +
                      (C25975 - C25976) * C31225 + (C25977 - C25978) * C47481) *
                         C4577 +
                     ((C21479 - C21480) * C31224 + (C21481 - C21482) * C31222 +
                      C26465 * C31225 + C26466 * C47481) *
                         C47479) *
                        C47181 * C2332 +
                    (((C21480 - C21479) * C31224 + (C21482 - C21481) * C31222 +
                      C26467 * C31225 + C26468 * C47481) *
                         C4577 +
                     ((C21484 - C21483) * C31224 + (C21486 - C21485) * C31222 +
                      C22322 * C31225 + C22323 * C47481) *
                         C47479) *
                        C47181 * C47226) *
                       C47506 +
                   ((((C21367 * C118 - C47108 * C125) * C31224 +
                      (C21367 * C128 - C47108 * C139) * C31222 +
                      (C25983 - C25984) * C31225 + (C25985 - C25986) * C47481) *
                         C4577 +
                     ((C21491 - C21492) * C31224 + (C21493 - C21494) * C31222 +
                      C26469 * C31225 + C26470 * C47481) *
                         C47479) *
                        C47181 * C2332 +
                    (((C21492 - C21491) * C31224 + (C21494 - C21493) * C31222 +
                      C26471 * C31225 + C26472 * C47481) *
                         C4577 +
                     ((C21496 - C21495) * C31224 + (C21498 - C21497) * C31222 +
                      C22601 * C31225 + C22602 * C47481) *
                         C47479) *
                        C47181 * C47226) *
                       C47499 +
                   ((((C47108 * C126 - C21367 * C119) * C31224 +
                      (C47108 * C140 - C21367 * C129) * C31222 +
                      (C25991 - C25992) * C31225 + (C25993 - C25994) * C47481) *
                         C4577 +
                     ((C21503 - C21504) * C31224 + (C21505 - C21506) * C31222 +
                      C26473 * C31225 + C26474 * C47481) *
                         C47479) *
                        C47181 * C2332 +
                    (((C21504 - C21503) * C31224 + (C21506 - C21505) * C31222 +
                      C26475 * C31225 + C26476 * C47481) *
                         C4577 +
                     ((C21508 - C21507) * C31224 + (C21510 - C21509) * C31222 +
                      (C22010 - C22011) * C31225 + (C22012 - C22013) * C47481) *
                         C47479) *
                        C47181 * C47226) *
                       C47486 +
                   ((((C21367 * C120 - C47108 * C130) * C31224 +
                      (C21367 * C131 - C47108 * C141) * C31222 +
                      (C26267 - C26268) * C31225 + (C26269 - C26270) * C47481) *
                         C4577 +
                     ((C21738 - C21739) * C31224 + (C21740 - C21741) * C31222 +
                      (C26133 - C26134) * C31225 + (C26135 - C26136) * C47481) *
                         C47479) *
                        C47181 * C2332 +
                    (((C21739 - C21738) * C31224 + (C21741 - C21740) * C31222 +
                      (C26134 - C26133) * C31225 + (C26136 - C26135) * C47481) *
                         C4577 +
                     ((C21743 - C21742) * C31224 + (C21745 - C21744) * C31222 +
                      (C47108 * C1441 - C21367 * C1440) * C31225 +
                      (C47108 * C1443 - C21367 * C1442) * C47481) *
                         C47479) *
                        C47181 * C47226) *
                       C47465)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((((C47108 * C124 - C21367 * C117) * C31224 +
                      (C47108 * C138 - C21367 * C127) * C31222 +
                      (C25975 - C25976) * C31225 + (C25977 - C25978) * C47481) *
                         C4577 +
                     ((C21479 - C21480) * C31224 + (C21481 - C21482) * C31222 +
                      C26465 * C31225 + C26466 * C47481) *
                         C47479) *
                        C47181 * C47507 +
                    (((C21480 - C21479) * C31224 + (C21482 - C21481) * C31222 +
                      C26467 * C31225 + C26468 * C47481) *
                         C4577 +
                     ((C21484 - C21483) * C31224 + (C21486 - C21485) * C31222 +
                      C22322 * C31225 + C22323 * C47481) *
                         C47479) *
                        C47181 * C47503 +
                    ((C21515 * C31224 + C21516 * C31222 + C26855 * C31225 +
                      C26856 * C47481) *
                         C4577 +
                     ((C21488 - C21487) * C31224 + (C21490 - C21489) * C31222 +
                      C22712 * C31225 + C22713 * C47481) *
                         C47479) *
                        C47181 * C47493 +
                    ((C22190 * C31224 + C22191 * C31222 + C27315 * C31225 +
                      C27316 * C47481) *
                         C4577 +
                     ((C22193 - C22192) * C31224 + (C22195 - C22194) * C31222 +
                      (C22714 - C22715) * C31225 + (C22716 - C22717) * C47481) *
                         C47479) *
                        C47181 * C47471) *
                       C2440 +
                   ((((C21367 * C118 - C47108 * C125) * C31224 +
                      (C21367 * C128 - C47108 * C139) * C31222 +
                      (C25983 - C25984) * C31225 + (C25985 - C25986) * C47481) *
                         C4577 +
                     ((C21491 - C21492) * C31224 + (C21493 - C21494) * C31222 +
                      C26469 * C31225 + C26470 * C47481) *
                         C47479) *
                        C47181 * C47507 +
                    (((C21492 - C21491) * C31224 + (C21494 - C21493) * C31222 +
                      C26471 * C31225 + C26472 * C47481) *
                         C4577 +
                     ((C21496 - C21495) * C31224 + (C21498 - C21497) * C31222 +
                      C22601 * C31225 + C22602 * C47481) *
                         C47479) *
                        C47181 * C47503 +
                    ((C21517 * C31224 + C21518 * C31222 + C27183 * C31225 +
                      C27184 * C47481) *
                         C4577 +
                     ((C21500 - C21499) * C31224 + (C21502 - C21501) * C31222 +
                      (C22603 - C22604) * C31225 + (C22605 - C22606) * C47481) *
                         C47479) *
                        C47181 * C47493 +
                    ((C22446 * C31224 + C22447 * C31222 +
                      (C22604 - C22603) * C31225 + (C22606 - C22605) * C47481) *
                         C4577 +
                     ((C22449 - C22448) * C31224 + (C22451 - C22450) * C31222 +
                      (C47108 * C6310 - C21367 * C6308) * C31225 +
                      (C47108 * C6314 - C21367 * C6312) * C47481) *
                         C47479) *
                        C47181 * C47471) *
                       C47146)) /
                     (p * q * std::sqrt(p + q));
    d2ee[180] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C47108 * C124 - C21367 * C117) * C31224 +
              (C47108 * C138 - C21367 * C127) * C31222 +
              (C25975 - C25976) * C31225 + (C25977 - C25978) * C47481) *
                 C4577 +
             ((C21479 - C21480) * C31224 + (C21481 - C21482) * C31222 +
              C26465 * C31225 + C26466 * C47481) *
                 C47479) *
                C3094 +
            (((C25976 - C25975) * C31224 + (C25978 - C25977) * C31222 +
              (C25979 - C25980) * C31225 + (C25981 - C25982) * C47481) *
                 C4577 +
             (C26467 * C31224 + C26468 * C31222 + C26851 * C31225 +
              C26852 * C47481) *
                 C47479) *
                C47268) *
               C47222 +
           ((((C21480 - C21479) * C31224 + (C21482 - C21481) * C31222 +
              C26467 * C31225 + C26468 * C47481) *
                 C4577 +
             ((C21484 - C21483) * C31224 + (C21486 - C21485) * C31222 +
              C22322 * C31225 + C22323 * C47481) *
                 C47479) *
                C3094 +
            ((C26465 * C31224 + C26466 * C31222 + C26853 * C31225 +
              C26854 * C47481) *
                 C4577 +
             (C26855 * C31224 + C26856 * C31222 + C22342 * C31225 +
              C22343 * C47481) *
                 C47479) *
                C47268) *
               C47229 +
           (((C21515 * C31224 + C21516 * C31222 + C26855 * C31225 +
              C26856 * C47481) *
                 C4577 +
             ((C21488 - C21487) * C31224 + (C21490 - C21489) * C31222 +
              C22712 * C31225 + C22713 * C47481) *
                 C47479) *
                C3094 +
            ((C22322 * C31224 + C22323 * C31222 + C26857 * C31225 +
              C26858 * C47481) *
                 C4577 +
             (C27315 * C31224 + C27316 * C31222 + (C22336 - C22337) * C31225 +
              (C22338 - C22339) * C47481) *
                 C47479) *
                C47268) *
               C2700) *
              C47415 +
          (((((C21367 * C118 - C47108 * C125) * C31224 +
              (C21367 * C128 - C47108 * C139) * C31222 +
              (C25983 - C25984) * C31225 + (C25985 - C25986) * C47481) *
                 C4577 +
             ((C21491 - C21492) * C31224 + (C21493 - C21494) * C31222 +
              C26469 * C31225 + C26470 * C47481) *
                 C47479) *
                C3094 +
            (((C25984 - C25983) * C31224 + (C25986 - C25985) * C31222 +
              (C25987 - C25988) * C31225 + (C25989 - C25990) * C47481) *
                 C4577 +
             (C26471 * C31224 + C26472 * C31222 + C27901 * C31225 +
              C27902 * C47481) *
                 C47479) *
                C47268) *
               C47222 +
           ((((C21492 - C21491) * C31224 + (C21494 - C21493) * C31222 +
              C26471 * C31225 + C26472 * C47481) *
                 C4577 +
             ((C21496 - C21495) * C31224 + (C21498 - C21497) * C31222 +
              C22601 * C31225 + C22602 * C47481) *
                 C47479) *
                C3094 +
            ((C26469 * C31224 + C26470 * C31222 + C27903 * C31225 +
              C27904 * C47481) *
                 C4577 +
             (C27183 * C31224 + C27184 * C31222 + (C23157 - C23158) * C31225 +
              (C23159 - C23160) * C47481) *
                 C47479) *
                C47268) *
               C47229 +
           (((C21517 * C31224 + C21518 * C31222 + C27183 * C31225 +
              C27184 * C47481) *
                 C4577 +
             ((C21500 - C21499) * C31224 + (C21502 - C21501) * C31222 +
              (C22603 - C22604) * C31225 + (C22605 - C22606) * C47481) *
                 C47479) *
                C3094 +
            ((C22601 * C31224 + C22602 * C31222 + (C23158 - C23157) * C31225 +
              (C23160 - C23159) * C47481) *
                 C4577 +
             ((C22604 - C22603) * C31224 + (C22606 - C22605) * C31222 +
              (C47108 * C5808 - C21367 * C5806) * C31225 +
              (C47108 * C5812 - C21367 * C5810) * C47481) *
                 C47479) *
                C47268) *
               C2700) *
              C47146)) /
        (p * q * std::sqrt(p + q));
    d2ee[181] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((((C47108 * C124 - C21367 * C117) * C31224 +
                      (C47108 * C138 - C21367 * C127) * C31222 +
                      (C25975 - C25976) * C31225 + (C25977 - C25978) * C47481) *
                         C4577 +
                     ((C21479 - C21480) * C31224 + (C21481 - C21482) * C31222 +
                      C26465 * C31225 + C26466 * C47481) *
                         C47479) *
                        C47264 +
                    (((C25976 - C25975) * C31224 + (C25978 - C25977) * C31222 +
                      (C25979 - C25980) * C31225 + (C25981 - C25982) * C47481) *
                         C4577 +
                     (C26467 * C31224 + C26468 * C31222 + C26851 * C31225 +
                      C26852 * C47481) *
                         C47479) *
                        C47271 +
                    (((C25980 - C25979) * C31224 + (C25982 - C25981) * C31222 +
                      (C27695 - C27696) * C31225 + (C27697 - C27698) * C47481) *
                         C4577 +
                     (C26853 * C31224 + C26854 * C31222 + C28173 * C31225 +
                      C28174 * C47481) *
                         C47479) *
                        C3602) *
                       C47222 +
                   ((((C21480 - C21479) * C31224 + (C21482 - C21481) * C31222 +
                      C26467 * C31225 + C26468 * C47481) *
                         C4577 +
                     ((C21484 - C21483) * C31224 + (C21486 - C21485) * C31222 +
                      C22322 * C31225 + C22323 * C47481) *
                         C47479) *
                        C47264 +
                    ((C26465 * C31224 + C26466 * C31222 + C26853 * C31225 +
                      C26854 * C47481) *
                         C4577 +
                     (C26855 * C31224 + C26856 * C31222 + C22342 * C31225 +
                      C22343 * C47481) *
                         C47479) *
                        C47271 +
                    ((C26851 * C31224 + C26852 * C31222 + C28175 * C31225 +
                      C28176 * C47481) *
                         C4577 +
                     (C26857 * C31224 + C26858 * C31222 +
                      (C23365 - C23366) * C31225 + (C23367 - C23368) * C47481) *
                         C47479) *
                        C3602) *
                       C47229 +
                   (((C21515 * C31224 + C21516 * C31222 + C26855 * C31225 +
                      C26856 * C47481) *
                         C4577 +
                     ((C21488 - C21487) * C31224 + (C21490 - C21489) * C31222 +
                      C22712 * C31225 + C22713 * C47481) *
                         C47479) *
                        C47264 +
                    ((C22322 * C31224 + C22323 * C31222 + C26857 * C31225 +
                      C26858 * C47481) *
                         C4577 +
                     (C27315 * C31224 + C27316 * C31222 +
                      (C22336 - C22337) * C31225 + (C22338 - C22339) * C47481) *
                         C47479) *
                        C47271 +
                    ((C22342 * C31224 + C22343 * C31222 +
                      (C23366 - C23365) * C31225 + (C23368 - C23367) * C47481) *
                         C4577 +
                     ((C22337 - C22336) * C31224 + (C22339 - C22338) * C31222 +
                      (C47108 * C23357 - C21367 * C23356) * C31225 +
                      (C47108 * C23359 - C21367 * C23358) * C47481) *
                         C47479) *
                        C3602) *
                       C2700) *
                  C47135) /
                 (p * q * std::sqrt(p + q));
    d2ee[182] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C47108 * C124 - C21367 * C117) * C31224 +
             (C47108 * C138 - C21367 * C127) * C31222 +
             (C25975 - C25976) * C31225 + (C25977 - C25978) * C47481) *
                C4577 +
            ((C21479 - C21480) * C31224 + (C21481 - C21482) * C31222 +
             C26465 * C31225 + C26466 * C47481) *
                C47479) *
               C3094 +
           (((C25976 - C25975) * C31224 + (C25978 - C25977) * C31222 +
             (C25979 - C25980) * C31225 + (C25981 - C25982) * C47481) *
                C4577 +
            (C26467 * C31224 + C26468 * C31222 + C26851 * C31225 +
             C26852 * C47481) *
                C47479) *
               C47268) *
              C47507 +
          ((((C21480 - C21479) * C31224 + (C21482 - C21481) * C31222 +
             C26467 * C31225 + C26468 * C47481) *
                C4577 +
            ((C21484 - C21483) * C31224 + (C21486 - C21485) * C31222 +
             C22322 * C31225 + C22323 * C47481) *
                C47479) *
               C3094 +
           ((C26465 * C31224 + C26466 * C31222 + C26853 * C31225 +
             C26854 * C47481) *
                C4577 +
            (C26855 * C31224 + C26856 * C31222 + C22342 * C31225 +
             C22343 * C47481) *
                C47479) *
               C47268) *
              C47503 +
          (((C21515 * C31224 + C21516 * C31222 + C26855 * C31225 +
             C26856 * C47481) *
                C4577 +
            ((C21488 - C21487) * C31224 + (C21490 - C21489) * C31222 +
             C22712 * C31225 + C22713 * C47481) *
                C47479) *
               C3094 +
           ((C22322 * C31224 + C22323 * C31222 + C26857 * C31225 +
             C26858 * C47481) *
                C4577 +
            (C27315 * C31224 + C27316 * C31222 + (C22336 - C22337) * C31225 +
             (C22338 - C22339) * C47481) *
                C47479) *
               C47268) *
              C47493 +
          (((C22190 * C31224 + C22191 * C31222 + C27315 * C31225 +
             C27316 * C47481) *
                C4577 +
            ((C22193 - C22192) * C31224 + (C22195 - C22194) * C31222 +
             (C22714 - C22715) * C31225 + (C22716 - C22717) * C47481) *
                C47479) *
               C3094 +
           ((C22712 * C31224 + C22713 * C31222 + (C22337 - C22336) * C31225 +
             (C22339 - C22338) * C47481) *
                C4577 +
            ((C22715 - C22714) * C31224 + (C22717 - C22716) * C31222 +
             (C47108 * C22318 - C21367 * C22317) * C31225 +
             (C47108 * C22320 - C21367 * C22319) * C47481) *
                C47479) *
               C47268) *
              C47471) *
         C47135) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C47108 * C124 - C21367 * C117) * C31224 +
              (C47108 * C138 - C21367 * C127) * C31222 +
              (C25975 - C25976) * C31225 + (C25977 - C25978) * C47481) *
                 C4577 +
             ((C21479 - C21480) * C31224 + (C21481 - C21482) * C31222 +
              C26465 * C31225 + C26466 * C47481) *
                 C47479) *
                C3094 +
            (((C25976 - C25975) * C31224 + (C25978 - C25977) * C31222 +
              (C25979 - C25980) * C31225 + (C25981 - C25982) * C47481) *
                 C4577 +
             (C26467 * C31224 + C26468 * C31222 + C26851 * C31225 +
              C26852 * C47481) *
                 C47479) *
                C47268) *
               C2332 +
           ((((C21480 - C21479) * C31224 + (C21482 - C21481) * C31222 +
              C26467 * C31225 + C26468 * C47481) *
                 C4577 +
             ((C21484 - C21483) * C31224 + (C21486 - C21485) * C31222 +
              C22322 * C31225 + C22323 * C47481) *
                 C47479) *
                C3094 +
            ((C26465 * C31224 + C26466 * C31222 + C26853 * C31225 +
              C26854 * C47481) *
                 C4577 +
             (C26855 * C31224 + C26856 * C31222 + C22342 * C31225 +
              C22343 * C47481) *
                 C47479) *
                C47268) *
               C47226) *
              C47497 +
          (((((C21367 * C118 - C47108 * C125) * C31224 +
              (C21367 * C128 - C47108 * C139) * C31222 +
              (C25983 - C25984) * C31225 + (C25985 - C25986) * C47481) *
                 C4577 +
             ((C21491 - C21492) * C31224 + (C21493 - C21494) * C31222 +
              C26469 * C31225 + C26470 * C47481) *
                 C47479) *
                C3094 +
            (((C25984 - C25983) * C31224 + (C25986 - C25985) * C31222 +
              (C25987 - C25988) * C31225 + (C25989 - C25990) * C47481) *
                 C4577 +
             (C26471 * C31224 + C26472 * C31222 + C27901 * C31225 +
              C27902 * C47481) *
                 C47479) *
                C47268) *
               C2332 +
           ((((C21492 - C21491) * C31224 + (C21494 - C21493) * C31222 +
              C26471 * C31225 + C26472 * C47481) *
                 C4577 +
             ((C21496 - C21495) * C31224 + (C21498 - C21497) * C31222 +
              C22601 * C31225 + C22602 * C47481) *
                 C47479) *
                C3094 +
            ((C26469 * C31224 + C26470 * C31222 + C27903 * C31225 +
              C27904 * C47481) *
                 C4577 +
             (C27183 * C31224 + C27184 * C31222 + (C23157 - C23158) * C31225 +
              (C23159 - C23160) * C47481) *
                 C47479) *
                C47268) *
               C47226) *
              C47484 +
          (((((C47108 * C126 - C21367 * C119) * C31224 +
              (C47108 * C140 - C21367 * C129) * C31222 +
              (C25991 - C25992) * C31225 + (C25993 - C25994) * C47481) *
                 C4577 +
             ((C21503 - C21504) * C31224 + (C21505 - C21506) * C31222 +
              C26473 * C31225 + C26474 * C47481) *
                 C47479) *
                C3094 +
            (((C25992 - C25991) * C31224 + (C25994 - C25993) * C31222 +
              (C25995 - C25996) * C31225 + (C25997 - C25998) * C47481) *
                 C4577 +
             (C26475 * C31224 + C26476 * C31222 + (C25999 - C26000) * C31225 +
              (C26001 - C26002) * C47481) *
                 C47479) *
                C47268) *
               C2332 +
           ((((C21504 - C21503) * C31224 + (C21506 - C21505) * C31222 +
              C26475 * C31225 + C26476 * C47481) *
                 C4577 +
             ((C21508 - C21507) * C31224 + (C21510 - C21509) * C31222 +
              (C22010 - C22011) * C31225 + (C22012 - C22013) * C47481) *
                 C47479) *
                C3094 +
            ((C26473 * C31224 + C26474 * C31222 + (C26000 - C25999) * C31225 +
              (C26002 - C26001) * C47481) *
                 C4577 +
             ((C22011 - C22010) * C31224 + (C22013 - C22012) * C31222 +
              (C47108 * C1173 - C21367 * C1158) * C31225 +
              (C47108 * C1185 - C21367 * C1176) * C47481) *
                 C47479) *
                C47268) *
               C47226) *
              C47455)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C47108 * C124 - C21367 * C117) * C31224 +
             (C47108 * C138 - C21367 * C127) * C31222 +
             (C25975 - C25976) * C31225 + (C25977 - C25978) * C47481) *
                C4577 +
            ((C21479 - C21480) * C31224 + (C21481 - C21482) * C31222 +
             C26465 * C31225 + C26466 * C47481) *
                C47479) *
               C47508 +
           (((C25976 - C25975) * C31224 + (C25978 - C25977) * C31222 +
             (C25979 - C25980) * C31225 + (C25981 - C25982) * C47481) *
                C4577 +
            (C26467 * C31224 + C26468 * C31222 + C26851 * C31225 +
             C26852 * C47481) *
                C47479) *
               C47505 +
           (((C25980 - C25979) * C31224 + (C25982 - C25981) * C31222 +
             (C27695 - C27696) * C31225 + (C27697 - C27698) * C47481) *
                C4577 +
            (C26853 * C31224 + C26854 * C31222 + C28173 * C31225 +
             C28174 * C47481) *
                C47479) *
               C47496 +
           (((C27696 - C27695) * C31224 + (C27698 - C27697) * C31222 +
             (C27699 - C27700) * C31225 + (C27701 - C27702) * C47481) *
                C4577 +
            (C28175 * C31224 + C28176 * C31222 + (C27703 - C27704) * C31225 +
             (C27705 - C27706) * C47481) *
                C47479) *
               C47477) *
              C2332 +
          ((((C21480 - C21479) * C31224 + (C21482 - C21481) * C31222 +
             C26467 * C31225 + C26468 * C47481) *
                C4577 +
            ((C21484 - C21483) * C31224 + (C21486 - C21485) * C31222 +
             C22322 * C31225 + C22323 * C47481) *
                C47479) *
               C47508 +
           ((C26465 * C31224 + C26466 * C31222 + C26853 * C31225 +
             C26854 * C47481) *
                C4577 +
            (C26855 * C31224 + C26856 * C31222 + C22342 * C31225 +
             C22343 * C47481) *
                C47479) *
               C47505 +
           ((C26851 * C31224 + C26852 * C31222 + C28175 * C31225 +
             C28176 * C47481) *
                C4577 +
            (C26857 * C31224 + C26858 * C31222 + (C23365 - C23366) * C31225 +
             (C23367 - C23368) * C47481) *
                C47479) *
               C47496 +
           ((C28173 * C31224 + C28174 * C31222 + (C27704 - C27703) * C31225 +
             (C27706 - C27705) * C47481) *
                C4577 +
            ((C23366 - C23365) * C31224 + (C23368 - C23367) * C31222 +
             (C47108 * C23003 - C21367 * C23002) * C31225 +
             (C47108 * C23005 - C21367 * C23004) * C47481) *
                C47479) *
               C47477) *
              C47226) *
         C47135) /
            (p * q * std::sqrt(p + q));
    d2ee[183] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C47108 * C124 - C21367 * C117) * C31224 +
              (C47108 * C138 - C21367 * C127) * C31222 +
              (C25975 - C25976) * C31225 + (C25977 - C25978) * C47481) *
                 C4577 +
             ((C21479 - C21480) * C31224 + (C21481 - C21482) * C31222 +
              C26465 * C31225 + C26466 * C47481) *
                 C47479) *
                C47264 +
            (((C25976 - C25975) * C31224 + (C25978 - C25977) * C31222 +
              (C25979 - C25980) * C31225 + (C25981 - C25982) * C47481) *
                 C4577 +
             (C26467 * C31224 + C26468 * C31222 + C26851 * C31225 +
              C26852 * C47481) *
                 C47479) *
                C47271 +
            (((C25980 - C25979) * C31224 + (C25982 - C25981) * C31222 +
              (C27695 - C27696) * C31225 + (C27697 - C27698) * C47481) *
                 C4577 +
             (C26853 * C31224 + C26854 * C31222 + C28173 * C31225 +
              C28174 * C47481) *
                 C47479) *
                C3602) *
               C2332 +
           ((((C21480 - C21479) * C31224 + (C21482 - C21481) * C31222 +
              C26467 * C31225 + C26468 * C47481) *
                 C4577 +
             ((C21484 - C21483) * C31224 + (C21486 - C21485) * C31222 +
              C22322 * C31225 + C22323 * C47481) *
                 C47479) *
                C47264 +
            ((C26465 * C31224 + C26466 * C31222 + C26853 * C31225 +
              C26854 * C47481) *
                 C4577 +
             (C26855 * C31224 + C26856 * C31222 + C22342 * C31225 +
              C22343 * C47481) *
                 C47479) *
                C47271 +
            ((C26851 * C31224 + C26852 * C31222 + C28175 * C31225 +
              C28176 * C47481) *
                 C4577 +
             (C26857 * C31224 + C26858 * C31222 + (C23365 - C23366) * C31225 +
              (C23367 - C23368) * C47481) *
                 C47479) *
                C3602) *
               C47226) *
              C47415 +
          (((((C21367 * C118 - C47108 * C125) * C31224 +
              (C21367 * C128 - C47108 * C139) * C31222 +
              (C25983 - C25984) * C31225 + (C25985 - C25986) * C47481) *
                 C4577 +
             ((C21491 - C21492) * C31224 + (C21493 - C21494) * C31222 +
              C26469 * C31225 + C26470 * C47481) *
                 C47479) *
                C47264 +
            (((C25984 - C25983) * C31224 + (C25986 - C25985) * C31222 +
              (C25987 - C25988) * C31225 + (C25989 - C25990) * C47481) *
                 C4577 +
             (C26471 * C31224 + C26472 * C31222 + C27901 * C31225 +
              C27902 * C47481) *
                 C47479) *
                C47271 +
            (((C25988 - C25987) * C31224 + (C25990 - C25989) * C31222 +
              (C28039 - C28040) * C31225 + (C28041 - C28042) * C47481) *
                 C4577 +
             (C27903 * C31224 + C27904 * C31222 + (C27905 - C27906) * C31225 +
              (C27907 - C27908) * C47481) *
                 C47479) *
                C3602) *
               C2332 +
           ((((C21492 - C21491) * C31224 + (C21494 - C21493) * C31222 +
              C26471 * C31225 + C26472 * C47481) *
                 C4577 +
             ((C21496 - C21495) * C31224 + (C21498 - C21497) * C31222 +
              C22601 * C31225 + C22602 * C47481) *
                 C47479) *
                C47264 +
            ((C26469 * C31224 + C26470 * C31222 + C27903 * C31225 +
              C27904 * C47481) *
                 C4577 +
             (C27183 * C31224 + C27184 * C31222 + (C23157 - C23158) * C31225 +
              (C23159 - C23160) * C47481) *
                 C47479) *
                C47271 +
            ((C27901 * C31224 + C27902 * C31222 + (C27906 - C27905) * C31225 +
              (C27908 - C27907) * C47481) *
                 C4577 +
             ((C23158 - C23157) * C31224 + (C23160 - C23159) * C31222 +
              (C47108 * C7170 - C21367 * C7168) * C31225 +
              (C47108 * C7174 - C21367 * C7172) * C47481) *
                 C47479) *
                C3602) *
               C47226) *
              C47146)) /
        (p * q * std::sqrt(p + q));
    d2ee[184] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C47108 * C124 - C21367 * C117) * C31224 +
              (C47108 * C138 - C21367 * C127) * C31222 +
              (C25975 - C25976) * C31225 + (C25977 - C25978) * C47481) *
                 C4577 +
             ((C21479 - C21480) * C31224 + (C21481 - C21482) * C31222 +
              C26465 * C31225 + C26466 * C47481) *
                 C47479) *
                C3094 +
            (((C25976 - C25975) * C31224 + (C25978 - C25977) * C31222 +
              (C25979 - C25980) * C31225 + (C25981 - C25982) * C47481) *
                 C4577 +
             (C26467 * C31224 + C26468 * C31222 + C26851 * C31225 +
              C26852 * C47481) *
                 C47479) *
                C47268) *
               C2332 +
           ((((C21480 - C21479) * C31224 + (C21482 - C21481) * C31222 +
              C26467 * C31225 + C26468 * C47481) *
                 C4577 +
             ((C21484 - C21483) * C31224 + (C21486 - C21485) * C31222 +
              C22322 * C31225 + C22323 * C47481) *
                 C47479) *
                C3094 +
            ((C26465 * C31224 + C26466 * C31222 + C26853 * C31225 +
              C26854 * C47481) *
                 C4577 +
             (C26855 * C31224 + C26856 * C31222 + C22342 * C31225 +
              C22343 * C47481) *
                 C47479) *
                C47268) *
               C47226) *
              C47497 +
          (((((C21367 * C118 - C47108 * C125) * C31224 +
              (C21367 * C128 - C47108 * C139) * C31222 +
              (C25983 - C25984) * C31225 + (C25985 - C25986) * C47481) *
                 C4577 +
             ((C21491 - C21492) * C31224 + (C21493 - C21494) * C31222 +
              C26469 * C31225 + C26470 * C47481) *
                 C47479) *
                C3094 +
            (((C25984 - C25983) * C31224 + (C25986 - C25985) * C31222 +
              (C25987 - C25988) * C31225 + (C25989 - C25990) * C47481) *
                 C4577 +
             (C26471 * C31224 + C26472 * C31222 + C27901 * C31225 +
              C27902 * C47481) *
                 C47479) *
                C47268) *
               C2332 +
           ((((C21492 - C21491) * C31224 + (C21494 - C21493) * C31222 +
              C26471 * C31225 + C26472 * C47481) *
                 C4577 +
             ((C21496 - C21495) * C31224 + (C21498 - C21497) * C31222 +
              C22601 * C31225 + C22602 * C47481) *
                 C47479) *
                C3094 +
            ((C26469 * C31224 + C26470 * C31222 + C27903 * C31225 +
              C27904 * C47481) *
                 C4577 +
             (C27183 * C31224 + C27184 * C31222 + (C23157 - C23158) * C31225 +
              (C23159 - C23160) * C47481) *
                 C47479) *
                C47268) *
               C47226) *
              C47484 +
          (((((C47108 * C126 - C21367 * C119) * C31224 +
              (C47108 * C140 - C21367 * C129) * C31222 +
              (C25991 - C25992) * C31225 + (C25993 - C25994) * C47481) *
                 C4577 +
             ((C21503 - C21504) * C31224 + (C21505 - C21506) * C31222 +
              C26473 * C31225 + C26474 * C47481) *
                 C47479) *
                C3094 +
            (((C25992 - C25991) * C31224 + (C25994 - C25993) * C31222 +
              (C25995 - C25996) * C31225 + (C25997 - C25998) * C47481) *
                 C4577 +
             (C26475 * C31224 + C26476 * C31222 + (C25999 - C26000) * C31225 +
              (C26001 - C26002) * C47481) *
                 C47479) *
                C47268) *
               C2332 +
           ((((C21504 - C21503) * C31224 + (C21506 - C21505) * C31222 +
              C26475 * C31225 + C26476 * C47481) *
                 C4577 +
             ((C21508 - C21507) * C31224 + (C21510 - C21509) * C31222 +
              (C22010 - C22011) * C31225 + (C22012 - C22013) * C47481) *
                 C47479) *
                C3094 +
            ((C26473 * C31224 + C26474 * C31222 + (C26000 - C25999) * C31225 +
              (C26002 - C26001) * C47481) *
                 C4577 +
             ((C22011 - C22010) * C31224 + (C22013 - C22012) * C31222 +
              (C47108 * C1173 - C21367 * C1158) * C31225 +
              (C47108 * C1185 - C21367 * C1176) * C47481) *
                 C47479) *
                C47268) *
               C47226) *
              C47455)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C47108 * C124 - C21367 * C117) * C31224 +
             (C47108 * C138 - C21367 * C127) * C31222 +
             (C25975 - C25976) * C31225 + (C25977 - C25978) * C47481) *
                C4577 +
            ((C21479 - C21480) * C31224 + (C21481 - C21482) * C31222 +
             C26465 * C31225 + C26466 * C47481) *
                C47479) *
               C3094 +
           (((C25976 - C25975) * C31224 + (C25978 - C25977) * C31222 +
             (C25979 - C25980) * C31225 + (C25981 - C25982) * C47481) *
                C4577 +
            (C26467 * C31224 + C26468 * C31222 + C26851 * C31225 +
             C26852 * C47481) *
                C47479) *
               C47268) *
              C47507 +
          ((((C21480 - C21479) * C31224 + (C21482 - C21481) * C31222 +
             C26467 * C31225 + C26468 * C47481) *
                C4577 +
            ((C21484 - C21483) * C31224 + (C21486 - C21485) * C31222 +
             C22322 * C31225 + C22323 * C47481) *
                C47479) *
               C3094 +
           ((C26465 * C31224 + C26466 * C31222 + C26853 * C31225 +
             C26854 * C47481) *
                C4577 +
            (C26855 * C31224 + C26856 * C31222 + C22342 * C31225 +
             C22343 * C47481) *
                C47479) *
               C47268) *
              C47503 +
          (((C21515 * C31224 + C21516 * C31222 + C26855 * C31225 +
             C26856 * C47481) *
                C4577 +
            ((C21488 - C21487) * C31224 + (C21490 - C21489) * C31222 +
             C22712 * C31225 + C22713 * C47481) *
                C47479) *
               C3094 +
           ((C22322 * C31224 + C22323 * C31222 + C26857 * C31225 +
             C26858 * C47481) *
                C4577 +
            (C27315 * C31224 + C27316 * C31222 + (C22336 - C22337) * C31225 +
             (C22338 - C22339) * C47481) *
                C47479) *
               C47268) *
              C47493 +
          (((C22190 * C31224 + C22191 * C31222 + C27315 * C31225 +
             C27316 * C47481) *
                C4577 +
            ((C22193 - C22192) * C31224 + (C22195 - C22194) * C31222 +
             (C22714 - C22715) * C31225 + (C22716 - C22717) * C47481) *
                C47479) *
               C3094 +
           ((C22712 * C31224 + C22713 * C31222 + (C22337 - C22336) * C31225 +
             (C22339 - C22338) * C47481) *
                C4577 +
            ((C22715 - C22714) * C31224 + (C22717 - C22716) * C31222 +
             (C47108 * C22318 - C21367 * C22317) * C31225 +
             (C47108 * C22320 - C21367 * C22319) * C47481) *
                C47479) *
               C47268) *
              C47471) *
         C47135) /
            (p * q * std::sqrt(p + q));
    d2ee[185] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C47108 * C124 - C21367 * C117) * C31224 +
             (C47108 * C138 - C21367 * C127) * C31222 +
             (C25975 - C25976) * C31225 + (C25977 - C25978) * C47481) *
                C4577 +
            ((C21479 - C21480) * C31224 + (C21481 - C21482) * C31222 +
             C26465 * C31225 + C26466 * C47481) *
                C47479) *
               C47181 * C1284 +
           (((C21480 - C21479) * C31224 + (C21482 - C21481) * C31222 +
             C26467 * C31225 + C26468 * C47481) *
                C4577 +
            ((C21484 - C21483) * C31224 + (C21486 - C21485) * C31222 +
             C22322 * C31225 + C22323 * C47481) *
                C47479) *
               C47181 * C1285 +
           ((C21515 * C31224 + C21516 * C31222 + C26855 * C31225 +
             C26856 * C47481) *
                C4577 +
            ((C21488 - C21487) * C31224 + (C21490 - C21489) * C31222 +
             C22712 * C31225 + C22713 * C47481) *
                C47479) *
               C47181 * C1286 +
           ((C22190 * C31224 + C22191 * C31222 + C27315 * C31225 +
             C27316 * C47481) *
                C4577 +
            ((C22193 - C22192) * C31224 + (C22195 - C22194) * C31222 +
             (C22714 - C22715) * C31225 + (C22716 - C22717) * C47481) *
                C47479) *
               C47181 * C47471) *
              C47415 +
          ((((C21367 * C118 - C47108 * C125) * C31224 +
             (C21367 * C128 - C47108 * C139) * C31222 +
             (C25983 - C25984) * C31225 + (C25985 - C25986) * C47481) *
                C4577 +
            ((C21491 - C21492) * C31224 + (C21493 - C21494) * C31222 +
             C26469 * C31225 + C26470 * C47481) *
                C47479) *
               C47181 * C1284 +
           (((C21492 - C21491) * C31224 + (C21494 - C21493) * C31222 +
             C26471 * C31225 + C26472 * C47481) *
                C4577 +
            ((C21496 - C21495) * C31224 + (C21498 - C21497) * C31222 +
             C22601 * C31225 + C22602 * C47481) *
                C47479) *
               C47181 * C1285 +
           ((C21517 * C31224 + C21518 * C31222 + C27183 * C31225 +
             C27184 * C47481) *
                C4577 +
            ((C21500 - C21499) * C31224 + (C21502 - C21501) * C31222 +
             (C22603 - C22604) * C31225 + (C22605 - C22606) * C47481) *
                C47479) *
               C47181 * C1286 +
           ((C22446 * C31224 + C22447 * C31222 + (C22604 - C22603) * C31225 +
             (C22606 - C22605) * C47481) *
                C4577 +
            ((C22449 - C22448) * C31224 + (C22451 - C22450) * C31222 +
             (C47108 * C6310 - C21367 * C6308) * C31225 +
             (C47108 * C6314 - C21367 * C6312) * C47481) *
                C47479) *
               C47181 * C47471) *
              C47146)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C47108 * C124 - C21367 * C117) * C31224 +
             (C47108 * C138 - C21367 * C127) * C31222 +
             (C25975 - C25976) * C31225 + (C25977 - C25978) * C47481) *
                C4577 +
            ((C21479 - C21480) * C31224 + (C21481 - C21482) * C31222 +
             C26465 * C31225 + C26466 * C47481) *
                C47479) *
               C47181 * C47429 +
           (((C21480 - C21479) * C31224 + (C21482 - C21481) * C31222 +
             C26467 * C31225 + C26468 * C47481) *
                C4577 +
            ((C21484 - C21483) * C31224 + (C21486 - C21485) * C31222 +
             C22322 * C31225 + C22323 * C47481) *
                C47479) *
               C47181 * C47226) *
              C554 +
          ((((C21367 * C118 - C47108 * C125) * C31224 +
             (C21367 * C128 - C47108 * C139) * C31222 +
             (C25983 - C25984) * C31225 + (C25985 - C25986) * C47481) *
                C4577 +
            ((C21491 - C21492) * C31224 + (C21493 - C21494) * C31222 +
             C26469 * C31225 + C26470 * C47481) *
                C47479) *
               C47181 * C47429 +
           (((C21492 - C21491) * C31224 + (C21494 - C21493) * C31222 +
             C26471 * C31225 + C26472 * C47481) *
                C4577 +
            ((C21496 - C21495) * C31224 + (C21498 - C21497) * C31222 +
             C22601 * C31225 + C22602 * C47481) *
                C47479) *
               C47181 * C47226) *
              C555 +
          ((((C47108 * C126 - C21367 * C119) * C31224 +
             (C47108 * C140 - C21367 * C129) * C31222 +
             (C25991 - C25992) * C31225 + (C25993 - C25994) * C47481) *
                C4577 +
            ((C21503 - C21504) * C31224 + (C21505 - C21506) * C31222 +
             C26473 * C31225 + C26474 * C47481) *
                C47479) *
               C47181 * C47429 +
           (((C21504 - C21503) * C31224 + (C21506 - C21505) * C31222 +
             C26475 * C31225 + C26476 * C47481) *
                C4577 +
            ((C21508 - C21507) * C31224 + (C21510 - C21509) * C31222 +
             (C22010 - C22011) * C31225 + (C22012 - C22013) * C47481) *
                C47479) *
               C47181 * C47226) *
              C556 +
          ((((C21367 * C120 - C47108 * C130) * C31224 +
             (C21367 * C131 - C47108 * C141) * C31222 +
             (C26267 - C26268) * C31225 + (C26269 - C26270) * C47481) *
                C4577 +
            ((C21738 - C21739) * C31224 + (C21740 - C21741) * C31222 +
             (C26133 - C26134) * C31225 + (C26135 - C26136) * C47481) *
                C47479) *
               C47181 * C47429 +
           (((C21739 - C21738) * C31224 + (C21741 - C21740) * C31222 +
             (C26134 - C26133) * C31225 + (C26136 - C26135) * C47481) *
                C4577 +
            ((C21743 - C21742) * C31224 + (C21745 - C21744) * C31222 +
             (C47108 * C1441 - C21367 * C1440) * C31225 +
             (C47108 * C1443 - C21367 * C1442) * C47481) *
                C47479) *
               C47181 * C47226) *
              C47465)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C47108 * C124 - C21367 * C117) * C31224 +
              (C47108 * C138 - C21367 * C127) * C31222 +
              (C25975 - C25976) * C31225 + (C25977 - C25978) * C47481) *
                 C4577 +
             ((C21479 - C21480) * C31224 + (C21481 - C21482) * C31222 +
              C26465 * C31225 + C26466 * C47481) *
                 C47479) *
                C1664 +
            (((C25976 - C25975) * C31224 + (C25978 - C25977) * C31222 +
              (C25979 - C25980) * C31225 + (C25981 - C25982) * C47481) *
                 C4577 +
             (C26467 * C31224 + C26468 * C31222 + C26851 * C31225 +
              C26852 * C47481) *
                 C47479) *
                C1665 +
            (((C25980 - C25979) * C31224 + (C25982 - C25981) * C31222 +
              (C27695 - C27696) * C31225 + (C27697 - C27698) * C47481) *
                 C4577 +
             (C26853 * C31224 + C26854 * C31222 + C28173 * C31225 +
              C28174 * C47481) *
                 C47479) *
                C47464) *
               C47429 +
           ((((C21480 - C21479) * C31224 + (C21482 - C21481) * C31222 +
              C26467 * C31225 + C26468 * C47481) *
                 C4577 +
             ((C21484 - C21483) * C31224 + (C21486 - C21485) * C31222 +
              C22322 * C31225 + C22323 * C47481) *
                 C47479) *
                C1664 +
            ((C26465 * C31224 + C26466 * C31222 + C26853 * C31225 +
              C26854 * C47481) *
                 C4577 +
             (C26855 * C31224 + C26856 * C31222 + C22342 * C31225 +
              C22343 * C47481) *
                 C47479) *
                C1665 +
            ((C26851 * C31224 + C26852 * C31222 + C28175 * C31225 +
              C28176 * C47481) *
                 C4577 +
             (C26857 * C31224 + C26858 * C31222 + (C23365 - C23366) * C31225 +
              (C23367 - C23368) * C47481) *
                 C47479) *
                C47464) *
               C47226) *
              C47415 +
          (((((C21367 * C118 - C47108 * C125) * C31224 +
              (C21367 * C128 - C47108 * C139) * C31222 +
              (C25983 - C25984) * C31225 + (C25985 - C25986) * C47481) *
                 C4577 +
             ((C21491 - C21492) * C31224 + (C21493 - C21494) * C31222 +
              C26469 * C31225 + C26470 * C47481) *
                 C47479) *
                C1664 +
            (((C25984 - C25983) * C31224 + (C25986 - C25985) * C31222 +
              (C25987 - C25988) * C31225 + (C25989 - C25990) * C47481) *
                 C4577 +
             (C26471 * C31224 + C26472 * C31222 + C27901 * C31225 +
              C27902 * C47481) *
                 C47479) *
                C1665 +
            (((C25988 - C25987) * C31224 + (C25990 - C25989) * C31222 +
              (C28039 - C28040) * C31225 + (C28041 - C28042) * C47481) *
                 C4577 +
             (C27903 * C31224 + C27904 * C31222 + (C27905 - C27906) * C31225 +
              (C27907 - C27908) * C47481) *
                 C47479) *
                C47464) *
               C47429 +
           ((((C21492 - C21491) * C31224 + (C21494 - C21493) * C31222 +
              C26471 * C31225 + C26472 * C47481) *
                 C4577 +
             ((C21496 - C21495) * C31224 + (C21498 - C21497) * C31222 +
              C22601 * C31225 + C22602 * C47481) *
                 C47479) *
                C1664 +
            ((C26469 * C31224 + C26470 * C31222 + C27903 * C31225 +
              C27904 * C47481) *
                 C4577 +
             (C27183 * C31224 + C27184 * C31222 + (C23157 - C23158) * C31225 +
              (C23159 - C23160) * C47481) *
                 C47479) *
                C1665 +
            ((C27901 * C31224 + C27902 * C31222 + (C27906 - C27905) * C31225 +
              (C27908 - C27907) * C47481) *
                 C4577 +
             ((C23158 - C23157) * C31224 + (C23160 - C23159) * C31222 +
              (C47108 * C7170 - C21367 * C7168) * C31225 +
              (C47108 * C7174 - C21367 * C7172) * C47481) *
                 C47479) *
                C47464) *
               C47226) *
              C47146)) /
            (p * q * std::sqrt(p + q));
    d2ee[186] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C47108 * C124 - C21367 * C117) * C31224 +
             (C47108 * C138 - C21367 * C127) * C31222 +
             (C25975 - C25976) * C31225 + (C25977 - C25978) * C47481) *
                C4577 +
            ((C21479 - C21480) * C31224 + (C21481 - C21482) * C31222 +
             C26465 * C31225 + C26466 * C47481) *
                C47479) *
               C47430 +
           (((C25976 - C25975) * C31224 + (C25978 - C25977) * C31222 +
             (C25979 - C25980) * C31225 + (C25981 - C25982) * C47481) *
                C4577 +
            (C26467 * C31224 + C26468 * C31222 + C26851 * C31225 +
             C26852 * C47481) *
                C47479) *
               C47268) *
              C1284 +
          ((((C21480 - C21479) * C31224 + (C21482 - C21481) * C31222 +
             C26467 * C31225 + C26468 * C47481) *
                C4577 +
            ((C21484 - C21483) * C31224 + (C21486 - C21485) * C31222 +
             C22322 * C31225 + C22323 * C47481) *
                C47479) *
               C47430 +
           ((C26465 * C31224 + C26466 * C31222 + C26853 * C31225 +
             C26854 * C47481) *
                C4577 +
            (C26855 * C31224 + C26856 * C31222 + C22342 * C31225 +
             C22343 * C47481) *
                C47479) *
               C47268) *
              C1285 +
          (((C21515 * C31224 + C21516 * C31222 + C26855 * C31225 +
             C26856 * C47481) *
                C4577 +
            ((C21488 - C21487) * C31224 + (C21490 - C21489) * C31222 +
             C22712 * C31225 + C22713 * C47481) *
                C47479) *
               C47430 +
           ((C22322 * C31224 + C22323 * C31222 + C26857 * C31225 +
             C26858 * C47481) *
                C4577 +
            (C27315 * C31224 + C27316 * C31222 + (C22336 - C22337) * C31225 +
             (C22338 - C22339) * C47481) *
                C47479) *
               C47268) *
              C1286 +
          (((C22190 * C31224 + C22191 * C31222 + C27315 * C31225 +
             C27316 * C47481) *
                C4577 +
            ((C22193 - C22192) * C31224 + (C22195 - C22194) * C31222 +
             (C22714 - C22715) * C31225 + (C22716 - C22717) * C47481) *
                C47479) *
               C47430 +
           ((C22712 * C31224 + C22713 * C31222 + (C22337 - C22336) * C31225 +
             (C22339 - C22338) * C47481) *
                C4577 +
            ((C22715 - C22714) * C31224 + (C22717 - C22716) * C31222 +
             (C47108 * C22318 - C21367 * C22317) * C31225 +
             (C47108 * C22320 - C21367 * C22319) * C47481) *
                C47479) *
               C47268) *
              C47471) *
         C47135) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C47108 * C124 - C21367 * C117) * C31224 +
              (C47108 * C138 - C21367 * C127) * C31222 +
              (C25975 - C25976) * C31225 + (C25977 - C25978) * C47481) *
                 C4577 +
             ((C21479 - C21480) * C31224 + (C21481 - C21482) * C31222 +
              C26465 * C31225 + C26466 * C47481) *
                 C47479) *
                C47430 +
            (((C25976 - C25975) * C31224 + (C25978 - C25977) * C31222 +
              (C25979 - C25980) * C31225 + (C25981 - C25982) * C47481) *
                 C4577 +
             (C26467 * C31224 + C26468 * C31222 + C26851 * C31225 +
              C26852 * C47481) *
                 C47479) *
                C47268) *
               C47429 +
           ((((C21480 - C21479) * C31224 + (C21482 - C21481) * C31222 +
              C26467 * C31225 + C26468 * C47481) *
                 C4577 +
             ((C21484 - C21483) * C31224 + (C21486 - C21485) * C31222 +
              C22322 * C31225 + C22323 * C47481) *
                 C47479) *
                C47430 +
            ((C26465 * C31224 + C26466 * C31222 + C26853 * C31225 +
              C26854 * C47481) *
                 C4577 +
             (C26855 * C31224 + C26856 * C31222 + C22342 * C31225 +
              C22343 * C47481) *
                 C47479) *
                C47268) *
               C47226) *
              C258 +
          (((((C21367 * C118 - C47108 * C125) * C31224 +
              (C21367 * C128 - C47108 * C139) * C31222 +
              (C25983 - C25984) * C31225 + (C25985 - C25986) * C47481) *
                 C4577 +
             ((C21491 - C21492) * C31224 + (C21493 - C21494) * C31222 +
              C26469 * C31225 + C26470 * C47481) *
                 C47479) *
                C47430 +
            (((C25984 - C25983) * C31224 + (C25986 - C25985) * C31222 +
              (C25987 - C25988) * C31225 + (C25989 - C25990) * C47481) *
                 C4577 +
             (C26471 * C31224 + C26472 * C31222 + C27901 * C31225 +
              C27902 * C47481) *
                 C47479) *
                C47268) *
               C47429 +
           ((((C21492 - C21491) * C31224 + (C21494 - C21493) * C31222 +
              C26471 * C31225 + C26472 * C47481) *
                 C4577 +
             ((C21496 - C21495) * C31224 + (C21498 - C21497) * C31222 +
              C22601 * C31225 + C22602 * C47481) *
                 C47479) *
                C47430 +
            ((C26469 * C31224 + C26470 * C31222 + C27903 * C31225 +
              C27904 * C47481) *
                 C4577 +
             (C27183 * C31224 + C27184 * C31222 + (C23157 - C23158) * C31225 +
              (C23159 - C23160) * C47481) *
                 C47479) *
                C47268) *
               C47226) *
              C259 +
          (((((C47108 * C126 - C21367 * C119) * C31224 +
              (C47108 * C140 - C21367 * C129) * C31222 +
              (C25991 - C25992) * C31225 + (C25993 - C25994) * C47481) *
                 C4577 +
             ((C21503 - C21504) * C31224 + (C21505 - C21506) * C31222 +
              C26473 * C31225 + C26474 * C47481) *
                 C47479) *
                C47430 +
            (((C25992 - C25991) * C31224 + (C25994 - C25993) * C31222 +
              (C25995 - C25996) * C31225 + (C25997 - C25998) * C47481) *
                 C4577 +
             (C26475 * C31224 + C26476 * C31222 + (C25999 - C26000) * C31225 +
              (C26001 - C26002) * C47481) *
                 C47479) *
                C47268) *
               C47429 +
           ((((C21504 - C21503) * C31224 + (C21506 - C21505) * C31222 +
              C26475 * C31225 + C26476 * C47481) *
                 C4577 +
             ((C21508 - C21507) * C31224 + (C21510 - C21509) * C31222 +
              (C22010 - C22011) * C31225 + (C22012 - C22013) * C47481) *
                 C47479) *
                C47430 +
            ((C26473 * C31224 + C26474 * C31222 + (C26000 - C25999) * C31225 +
              (C26002 - C26001) * C47481) *
                 C4577 +
             ((C22011 - C22010) * C31224 + (C22013 - C22012) * C31222 +
              (C47108 * C1173 - C21367 * C1158) * C31225 +
              (C47108 * C1185 - C21367 * C1176) * C47481) *
                 C47479) *
                C47268) *
               C47226) *
              C47455)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C47108 * C124 - C21367 * C117) * C31224 +
             (C47108 * C138 - C21367 * C127) * C31222 +
             (C25975 - C25976) * C31225 + (C25977 - C25978) * C47481) *
                C4577 +
            ((C21479 - C21480) * C31224 + (C21481 - C21482) * C31222 +
             C26465 * C31225 + C26466 * C47481) *
                C47479) *
               C2116 +
           (((C25976 - C25975) * C31224 + (C25978 - C25977) * C31222 +
             (C25979 - C25980) * C31225 + (C25981 - C25982) * C47481) *
                C4577 +
            (C26467 * C31224 + C26468 * C31222 + C26851 * C31225 +
             C26852 * C47481) *
                C47479) *
               C2117 +
           (((C25980 - C25979) * C31224 + (C25982 - C25981) * C31222 +
             (C27695 - C27696) * C31225 + (C27697 - C27698) * C47481) *
                C4577 +
            (C26853 * C31224 + C26854 * C31222 + C28173 * C31225 +
             C28174 * C47481) *
                C47479) *
               C2118 +
           (((C27696 - C27695) * C31224 + (C27698 - C27697) * C31222 +
             (C27699 - C27700) * C31225 + (C27701 - C27702) * C47481) *
                C4577 +
            (C28175 * C31224 + C28176 * C31222 + (C27703 - C27704) * C31225 +
             (C27705 - C27706) * C47481) *
                C47479) *
               C47477) *
              C47429 +
          ((((C21480 - C21479) * C31224 + (C21482 - C21481) * C31222 +
             C26467 * C31225 + C26468 * C47481) *
                C4577 +
            ((C21484 - C21483) * C31224 + (C21486 - C21485) * C31222 +
             C22322 * C31225 + C22323 * C47481) *
                C47479) *
               C2116 +
           ((C26465 * C31224 + C26466 * C31222 + C26853 * C31225 +
             C26854 * C47481) *
                C4577 +
            (C26855 * C31224 + C26856 * C31222 + C22342 * C31225 +
             C22343 * C47481) *
                C47479) *
               C2117 +
           ((C26851 * C31224 + C26852 * C31222 + C28175 * C31225 +
             C28176 * C47481) *
                C4577 +
            (C26857 * C31224 + C26858 * C31222 + (C23365 - C23366) * C31225 +
             (C23367 - C23368) * C47481) *
                C47479) *
               C2118 +
           ((C28173 * C31224 + C28174 * C31222 + (C27704 - C27703) * C31225 +
             (C27706 - C27705) * C47481) *
                C4577 +
            ((C23366 - C23365) * C31224 + (C23368 - C23367) * C31222 +
             (C47108 * C23003 - C21367 * C23002) * C31225 +
             (C47108 * C23005 - C21367 * C23004) * C47481) *
                C47479) *
               C47477) *
              C47226) *
         C47135) /
            (p * q * std::sqrt(p + q));
    d2ee[187] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C47108 * C124 - C21367 * C117) * C31224 +
                (C47108 * C138 - C21367 * C127) * C31222 +
                (C25975 - C25976) * C31225 + (C25977 - C25978) * C47481) *
                   C4577 +
               ((C21479 - C21480) * C31224 + (C21481 - C21482) * C31222 +
                C26465 * C31225 + C26466 * C47481) *
                   C47479) *
                  C47181 * C47163 * C108 +
              (((C21367 * C118 - C47108 * C125) * C31224 +
                (C21367 * C128 - C47108 * C139) * C31222 +
                (C25983 - C25984) * C31225 + (C25985 - C25986) * C47481) *
                   C4577 +
               ((C21491 - C21492) * C31224 + (C21493 - C21494) * C31222 +
                C26469 * C31225 + C26470 * C47481) *
                   C47479) *
                  C47181 * C47163 * C109 +
              (((C47108 * C126 - C21367 * C119) * C31224 +
                (C47108 * C140 - C21367 * C129) * C31222 +
                (C25991 - C25992) * C31225 + (C25993 - C25994) * C47481) *
                   C4577 +
               ((C21503 - C21504) * C31224 + (C21505 - C21506) * C31222 +
                C26473 * C31225 + C26474 * C47481) *
                   C47479) *
                  C47181 * C47163 * C110 +
              (((C21367 * C120 - C47108 * C130) * C31224 +
                (C21367 * C131 - C47108 * C141) * C31222 +
                (C26267 - C26268) * C31225 + (C26269 - C26270) * C47481) *
                   C4577 +
               ((C21738 - C21739) * C31224 + (C21740 - C21741) * C31222 +
                (C26133 - C26134) * C31225 + (C26135 - C26136) * C47481) *
                   C47479) *
                  C47181 * C47163 * C111 +
              (((C47108 * C132 - C21367 * C121) * C31224 +
                (C47108 * C142 - C21367 * C133) * C31222 +
                (C47108 * C440 - C21367 * C422) * C31225 +
                (C47108 * C452 - C21367 * C441) * C47481) *
                   C4577 +
               ((C47108 * C287 - C21367 * C269) * C31224 +
                (C47108 * C299 - C21367 * C288) * C31222 +
                (C47108 * C825 - C21367 * C816) * C31225 +
                (C47108 * C831 - C21367 * C826) * C47481) *
                   C47479) *
                  C47181 * C47163 * C112) +
         0.5 * std::pow(Pi, 2.5) *
             (((((C47108 * C124 - C21367 * C117) * C31224 +
                 (C47108 * C138 - C21367 * C127) * C31222 +
                 (C25975 - C25976) * C31225 + (C25977 - C25978) * C47481) *
                    C4577 +
                ((C21479 - C21480) * C31224 + (C21481 - C21482) * C31222 +
                 C26465 * C31225 + C26466 * C47481) *
                    C47479) *
                   C47181 * C47500 +
               (((C21480 - C21479) * C31224 + (C21482 - C21481) * C31222 +
                 C26467 * C31225 + C26468 * C47481) *
                    C4577 +
                ((C21484 - C21483) * C31224 + (C21486 - C21485) * C31222 +
                 C22322 * C31225 + C22323 * C47481) *
                    C47479) *
                   C47181 * C47488 +
               ((C21515 * C31224 + C21516 * C31222 + C26855 * C31225 +
                 C26856 * C47481) *
                    C4577 +
                ((C21488 - C21487) * C31224 + (C21490 - C21489) * C31222 +
                 C22712 * C31225 + C22713 * C47481) *
                    C47479) *
                   C47181 * C47461) *
                  C258 +
              ((((C21367 * C118 - C47108 * C125) * C31224 +
                 (C21367 * C128 - C47108 * C139) * C31222 +
                 (C25983 - C25984) * C31225 + (C25985 - C25986) * C47481) *
                    C4577 +
                ((C21491 - C21492) * C31224 + (C21493 - C21494) * C31222 +
                 C26469 * C31225 + C26470 * C47481) *
                    C47479) *
                   C47181 * C47500 +
               (((C21492 - C21491) * C31224 + (C21494 - C21493) * C31222 +
                 C26471 * C31225 + C26472 * C47481) *
                    C4577 +
                ((C21496 - C21495) * C31224 + (C21498 - C21497) * C31222 +
                 C22601 * C31225 + C22602 * C47481) *
                    C47479) *
                   C47181 * C47488 +
               ((C21517 * C31224 + C21518 * C31222 + C27183 * C31225 +
                 C27184 * C47481) *
                    C4577 +
                ((C21500 - C21499) * C31224 + (C21502 - C21501) * C31222 +
                 (C22603 - C22604) * C31225 + (C22605 - C22606) * C47481) *
                    C47479) *
                   C47181 * C47461) *
                  C259 +
              ((((C47108 * C126 - C21367 * C119) * C31224 +
                 (C47108 * C140 - C21367 * C129) * C31222 +
                 (C25991 - C25992) * C31225 + (C25993 - C25994) * C47481) *
                    C4577 +
                ((C21503 - C21504) * C31224 + (C21505 - C21506) * C31222 +
                 C26473 * C31225 + C26474 * C47481) *
                    C47479) *
                   C47181 * C47500 +
               (((C21504 - C21503) * C31224 + (C21506 - C21505) * C31222 +
                 C26475 * C31225 + C26476 * C47481) *
                    C4577 +
                ((C21508 - C21507) * C31224 + (C21510 - C21509) * C31222 +
                 (C22010 - C22011) * C31225 + (C22012 - C22013) * C47481) *
                    C47479) *
                   C47181 * C47488 +
               ((C21519 * C31224 + C21520 * C31222 +
                 (C22011 - C22010) * C31225 + (C22013 - C22012) * C47481) *
                    C4577 +
                ((C21512 - C21511) * C31224 + (C21514 - C21513) * C31222 +
                 (C47108 * C1547 - C21367 * C1544) * C31225 +
                 (C47108 * C1553 - C21367 * C1550) * C47481) *
                    C47479) *
                   C47181 * C47461) *
                  C47455)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C47108 * C124 - C21367 * C117) * C31224 +
             (C47108 * C138 - C21367 * C127) * C31222 +
             (C25975 - C25976) * C31225 + (C25977 - C25978) * C47481) *
                C4577 +
            ((C21479 - C21480) * C31224 + (C21481 - C21482) * C31222 +
             C26465 * C31225 + C26466 * C47481) *
                C47479) *
               C47501 +
           (((C25976 - C25975) * C31224 + (C25978 - C25977) * C31222 +
             (C25979 - C25980) * C31225 + (C25981 - C25982) * C47481) *
                C4577 +
            (C26467 * C31224 + C26468 * C31222 + C26851 * C31225 +
             C26852 * C47481) *
                C47479) *
               C47490 +
           (((C25980 - C25979) * C31224 + (C25982 - C25981) * C31222 +
             (C27695 - C27696) * C31225 + (C27697 - C27698) * C47481) *
                C4577 +
            (C26853 * C31224 + C26854 * C31222 + C28173 * C31225 +
             C28174 * C47481) *
                C47479) *
               C47464) *
              C47163 * C258 +
          ((((C21367 * C118 - C47108 * C125) * C31224 +
             (C21367 * C128 - C47108 * C139) * C31222 +
             (C25983 - C25984) * C31225 + (C25985 - C25986) * C47481) *
                C4577 +
            ((C21491 - C21492) * C31224 + (C21493 - C21494) * C31222 +
             C26469 * C31225 + C26470 * C47481) *
                C47479) *
               C47501 +
           (((C25984 - C25983) * C31224 + (C25986 - C25985) * C31222 +
             (C25987 - C25988) * C31225 + (C25989 - C25990) * C47481) *
                C4577 +
            (C26471 * C31224 + C26472 * C31222 + C27901 * C31225 +
             C27902 * C47481) *
                C47479) *
               C47490 +
           (((C25988 - C25987) * C31224 + (C25990 - C25989) * C31222 +
             (C28039 - C28040) * C31225 + (C28041 - C28042) * C47481) *
                C4577 +
            (C27903 * C31224 + C27904 * C31222 + (C27905 - C27906) * C31225 +
             (C27907 - C27908) * C47481) *
                C47479) *
               C47464) *
              C47163 * C259 +
          ((((C47108 * C126 - C21367 * C119) * C31224 +
             (C47108 * C140 - C21367 * C129) * C31222 +
             (C25991 - C25992) * C31225 + (C25993 - C25994) * C47481) *
                C4577 +
            ((C21503 - C21504) * C31224 + (C21505 - C21506) * C31222 +
             C26473 * C31225 + C26474 * C47481) *
                C47479) *
               C47501 +
           (((C25992 - C25991) * C31224 + (C25994 - C25993) * C31222 +
             (C25995 - C25996) * C31225 + (C25997 - C25998) * C47481) *
                C4577 +
            (C26475 * C31224 + C26476 * C31222 + (C25999 - C26000) * C31225 +
             (C26001 - C26002) * C47481) *
                C47479) *
               C47490 +
           (((C25996 - C25995) * C31224 + (C25998 - C25997) * C31222 +
             (C47108 * C1852 - C21367 * C1846) * C31225 +
             (C47108 * C1864 - C21367 * C1855) * C47481) *
                C4577 +
            ((C26000 - C25999) * C31224 + (C26002 - C26001) * C31222 +
             (C47108 * C2227 - C21367 * C2224) * C31225 +
             (C47108 * C2233 - C21367 * C2230) * C47481) *
                C47479) *
               C47464) *
              C47163 * C47455)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C47108 * C124 - C21367 * C117) * C31224 +
             (C47108 * C138 - C21367 * C127) * C31222 +
             (C25975 - C25976) * C31225 + (C25977 - C25978) * C47481) *
                C4577 +
            ((C21479 - C21480) * C31224 + (C21481 - C21482) * C31222 +
             C26465 * C31225 + C26466 * C47481) *
                C47479) *
               C47181 * C942 +
           (((C21480 - C21479) * C31224 + (C21482 - C21481) * C31222 +
             C26467 * C31225 + C26468 * C47481) *
                C4577 +
            ((C21484 - C21483) * C31224 + (C21486 - C21485) * C31222 +
             C22322 * C31225 + C22323 * C47481) *
                C47479) *
               C47181 * C943 +
           ((C21515 * C31224 + C21516 * C31222 + C26855 * C31225 +
             C26856 * C47481) *
                C4577 +
            ((C21488 - C21487) * C31224 + (C21490 - C21489) * C31222 +
             C22712 * C31225 + C22713 * C47481) *
                C47479) *
               C47181 * C47461) *
              C47497 +
          ((((C21367 * C118 - C47108 * C125) * C31224 +
             (C21367 * C128 - C47108 * C139) * C31222 +
             (C25983 - C25984) * C31225 + (C25985 - C25986) * C47481) *
                C4577 +
            ((C21491 - C21492) * C31224 + (C21493 - C21494) * C31222 +
             C26469 * C31225 + C26470 * C47481) *
                C47479) *
               C47181 * C942 +
           (((C21492 - C21491) * C31224 + (C21494 - C21493) * C31222 +
             C26471 * C31225 + C26472 * C47481) *
                C4577 +
            ((C21496 - C21495) * C31224 + (C21498 - C21497) * C31222 +
             C22601 * C31225 + C22602 * C47481) *
                C47479) *
               C47181 * C943 +
           ((C21517 * C31224 + C21518 * C31222 + C27183 * C31225 +
             C27184 * C47481) *
                C4577 +
            ((C21500 - C21499) * C31224 + (C21502 - C21501) * C31222 +
             (C22603 - C22604) * C31225 + (C22605 - C22606) * C47481) *
                C47479) *
               C47181 * C47461) *
              C47484 +
          ((((C47108 * C126 - C21367 * C119) * C31224 +
             (C47108 * C140 - C21367 * C129) * C31222 +
             (C25991 - C25992) * C31225 + (C25993 - C25994) * C47481) *
                C4577 +
            ((C21503 - C21504) * C31224 + (C21505 - C21506) * C31222 +
             C26473 * C31225 + C26474 * C47481) *
                C47479) *
               C47181 * C942 +
           (((C21504 - C21503) * C31224 + (C21506 - C21505) * C31222 +
             C26475 * C31225 + C26476 * C47481) *
                C4577 +
            ((C21508 - C21507) * C31224 + (C21510 - C21509) * C31222 +
             (C22010 - C22011) * C31225 + (C22012 - C22013) * C47481) *
                C47479) *
               C47181 * C943 +
           ((C21519 * C31224 + C21520 * C31222 + (C22011 - C22010) * C31225 +
             (C22013 - C22012) * C47481) *
                C4577 +
            ((C21512 - C21511) * C31224 + (C21514 - C21513) * C31222 +
             (C47108 * C1547 - C21367 * C1544) * C31225 +
             (C47108 * C1553 - C21367 * C1550) * C47481) *
                C47479) *
               C47181 * C47461) *
              C47455)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C47108 * C124 - C21367 * C117) * C31224 +
            (C47108 * C138 - C21367 * C127) * C31222 +
            (C25975 - C25976) * C31225 + (C25977 - C25978) * C47481) *
               C4577 +
           ((C21479 - C21480) * C31224 + (C21481 - C21482) * C31222 +
            C26465 * C31225 + C26466 * C47481) *
               C47479) *
              C47181 * C1010 +
          (((C21480 - C21479) * C31224 + (C21482 - C21481) * C31222 +
            C26467 * C31225 + C26468 * C47481) *
               C4577 +
           ((C21484 - C21483) * C31224 + (C21486 - C21485) * C31222 +
            C22322 * C31225 + C22323 * C47481) *
               C47479) *
              C47181 * C1011 +
          ((C21515 * C31224 + C21516 * C31222 + C26855 * C31225 +
            C26856 * C47481) *
               C4577 +
           ((C21488 - C21487) * C31224 + (C21490 - C21489) * C31222 +
            C22712 * C31225 + C22713 * C47481) *
               C47479) *
              C47181 * C1012 +
          ((C22190 * C31224 + C22191 * C31222 + C27315 * C31225 +
            C27316 * C47481) *
               C4577 +
           ((C22193 - C22192) * C31224 + (C22195 - C22194) * C31222 +
            (C22714 - C22715) * C31225 + (C22716 - C22717) * C47481) *
               C47479) *
              C47181 * C1013 +
          ((C22202 * C31224 + C22203 * C31222 + (C22715 - C22714) * C31225 +
            (C22717 - C22716) * C47481) *
               C4577 +
           ((C22197 - C22196) * C31224 + (C22199 - C22198) * C31222 +
            (C47108 * C22708 - C21367 * C22707) * C31225 +
            (C47108 * C22710 - C21367 * C22709) * C47481) *
               C47479) *
              C47181 * C1014) *
         C47135) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C47108 * C124 - C21367 * C117) * C31224 +
             (C47108 * C138 - C21367 * C127) * C31222 +
             (C25975 - C25976) * C31225 + (C25977 - C25978) * C47481) *
                C4577 +
            ((C21479 - C21480) * C31224 + (C21481 - C21482) * C31222 +
             C26465 * C31225 + C26466 * C47481) *
                C47479) *
               C47501 +
           (((C25976 - C25975) * C31224 + (C25978 - C25977) * C31222 +
             (C25979 - C25980) * C31225 + (C25981 - C25982) * C47481) *
                C4577 +
            (C26467 * C31224 + C26468 * C31222 + C26851 * C31225 +
             C26852 * C47481) *
                C47479) *
               C47490 +
           (((C25980 - C25979) * C31224 + (C25982 - C25981) * C31222 +
             (C27695 - C27696) * C31225 + (C27697 - C27698) * C47481) *
                C4577 +
            (C26853 * C31224 + C26854 * C31222 + C28173 * C31225 +
             C28174 * C47481) *
                C47479) *
               C47464) *
              C942 +
          ((((C21480 - C21479) * C31224 + (C21482 - C21481) * C31222 +
             C26467 * C31225 + C26468 * C47481) *
                C4577 +
            ((C21484 - C21483) * C31224 + (C21486 - C21485) * C31222 +
             C22322 * C31225 + C22323 * C47481) *
                C47479) *
               C47501 +
           ((C26465 * C31224 + C26466 * C31222 + C26853 * C31225 +
             C26854 * C47481) *
                C4577 +
            (C26855 * C31224 + C26856 * C31222 + C22342 * C31225 +
             C22343 * C47481) *
                C47479) *
               C47490 +
           ((C26851 * C31224 + C26852 * C31222 + C28175 * C31225 +
             C28176 * C47481) *
                C4577 +
            (C26857 * C31224 + C26858 * C31222 + (C23365 - C23366) * C31225 +
             (C23367 - C23368) * C47481) *
                C47479) *
               C47464) *
              C943 +
          (((C21515 * C31224 + C21516 * C31222 + C26855 * C31225 +
             C26856 * C47481) *
                C4577 +
            ((C21488 - C21487) * C31224 + (C21490 - C21489) * C31222 +
             C22712 * C31225 + C22713 * C47481) *
                C47479) *
               C47501 +
           ((C22322 * C31224 + C22323 * C31222 + C26857 * C31225 +
             C26858 * C47481) *
                C4577 +
            (C27315 * C31224 + C27316 * C31222 + (C22336 - C22337) * C31225 +
             (C22338 - C22339) * C47481) *
                C47479) *
               C47490 +
           ((C22342 * C31224 + C22343 * C31222 + (C23366 - C23365) * C31225 +
             (C23368 - C23367) * C47481) *
                C4577 +
            ((C22337 - C22336) * C31224 + (C22339 - C22338) * C31222 +
             (C47108 * C23357 - C21367 * C23356) * C31225 +
             (C47108 * C23359 - C21367 * C23358) * C47481) *
                C47479) *
               C47464) *
              C47461) *
         C47135) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C47108 * C124 - C21367 * C117) * C31224 +
             (C47108 * C138 - C21367 * C127) * C31222 +
             (C25975 - C25976) * C31225 + (C25977 - C25978) * C47481) *
                C4577 +
            ((C21479 - C21480) * C31224 + (C21481 - C21482) * C31222 +
             C26465 * C31225 + C26466 * C47481) *
                C47479) *
               C1664 +
           (((C25976 - C25975) * C31224 + (C25978 - C25977) * C31222 +
             (C25979 - C25980) * C31225 + (C25981 - C25982) * C47481) *
                C4577 +
            (C26467 * C31224 + C26468 * C31222 + C26851 * C31225 +
             C26852 * C47481) *
                C47479) *
               C1665 +
           (((C25980 - C25979) * C31224 + (C25982 - C25981) * C31222 +
             (C27695 - C27696) * C31225 + (C27697 - C27698) * C47481) *
                C4577 +
            (C26853 * C31224 + C26854 * C31222 + C28173 * C31225 +
             C28174 * C47481) *
                C47479) *
               C47464) *
              C47163 * C47497 +
          ((((C21367 * C118 - C47108 * C125) * C31224 +
             (C21367 * C128 - C47108 * C139) * C31222 +
             (C25983 - C25984) * C31225 + (C25985 - C25986) * C47481) *
                C4577 +
            ((C21491 - C21492) * C31224 + (C21493 - C21494) * C31222 +
             C26469 * C31225 + C26470 * C47481) *
                C47479) *
               C1664 +
           (((C25984 - C25983) * C31224 + (C25986 - C25985) * C31222 +
             (C25987 - C25988) * C31225 + (C25989 - C25990) * C47481) *
                C4577 +
            (C26471 * C31224 + C26472 * C31222 + C27901 * C31225 +
             C27902 * C47481) *
                C47479) *
               C1665 +
           (((C25988 - C25987) * C31224 + (C25990 - C25989) * C31222 +
             (C28039 - C28040) * C31225 + (C28041 - C28042) * C47481) *
                C4577 +
            (C27903 * C31224 + C27904 * C31222 + (C27905 - C27906) * C31225 +
             (C27907 - C27908) * C47481) *
                C47479) *
               C47464) *
              C47163 * C47484 +
          ((((C47108 * C126 - C21367 * C119) * C31224 +
             (C47108 * C140 - C21367 * C129) * C31222 +
             (C25991 - C25992) * C31225 + (C25993 - C25994) * C47481) *
                C4577 +
            ((C21503 - C21504) * C31224 + (C21505 - C21506) * C31222 +
             C26473 * C31225 + C26474 * C47481) *
                C47479) *
               C1664 +
           (((C25992 - C25991) * C31224 + (C25994 - C25993) * C31222 +
             (C25995 - C25996) * C31225 + (C25997 - C25998) * C47481) *
                C4577 +
            (C26475 * C31224 + C26476 * C31222 + (C25999 - C26000) * C31225 +
             (C26001 - C26002) * C47481) *
                C47479) *
               C1665 +
           (((C25996 - C25995) * C31224 + (C25998 - C25997) * C31222 +
             (C47108 * C1852 - C21367 * C1846) * C31225 +
             (C47108 * C1864 - C21367 * C1855) * C47481) *
                C4577 +
            ((C26000 - C25999) * C31224 + (C26002 - C26001) * C31222 +
             (C47108 * C2227 - C21367 * C2224) * C31225 +
             (C47108 * C2233 - C21367 * C2230) * C47481) *
                C47479) *
               C47464) *
              C47163 * C47455)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C47108 * C124 - C21367 * C117) * C31224 +
             (C47108 * C138 - C21367 * C127) * C31222 +
             (C25975 - C25976) * C31225 + (C25977 - C25978) * C47481) *
                C4577 +
            ((C21479 - C21480) * C31224 + (C21481 - C21482) * C31222 +
             C26465 * C31225 + C26466 * C47481) *
                C47479) *
               C1664 +
           (((C25976 - C25975) * C31224 + (C25978 - C25977) * C31222 +
             (C25979 - C25980) * C31225 + (C25981 - C25982) * C47481) *
                C4577 +
            (C26467 * C31224 + C26468 * C31222 + C26851 * C31225 +
             C26852 * C47481) *
                C47479) *
               C1665 +
           (((C25980 - C25979) * C31224 + (C25982 - C25981) * C31222 +
             (C27695 - C27696) * C31225 + (C27697 - C27698) * C47481) *
                C4577 +
            (C26853 * C31224 + C26854 * C31222 + C28173 * C31225 +
             C28174 * C47481) *
                C47479) *
               C47464) *
              C47500 +
          ((((C21480 - C21479) * C31224 + (C21482 - C21481) * C31222 +
             C26467 * C31225 + C26468 * C47481) *
                C4577 +
            ((C21484 - C21483) * C31224 + (C21486 - C21485) * C31222 +
             C22322 * C31225 + C22323 * C47481) *
                C47479) *
               C1664 +
           ((C26465 * C31224 + C26466 * C31222 + C26853 * C31225 +
             C26854 * C47481) *
                C4577 +
            (C26855 * C31224 + C26856 * C31222 + C22342 * C31225 +
             C22343 * C47481) *
                C47479) *
               C1665 +
           ((C26851 * C31224 + C26852 * C31222 + C28175 * C31225 +
             C28176 * C47481) *
                C4577 +
            (C26857 * C31224 + C26858 * C31222 + (C23365 - C23366) * C31225 +
             (C23367 - C23368) * C47481) *
                C47479) *
               C47464) *
              C47488 +
          (((C21515 * C31224 + C21516 * C31222 + C26855 * C31225 +
             C26856 * C47481) *
                C4577 +
            ((C21488 - C21487) * C31224 + (C21490 - C21489) * C31222 +
             C22712 * C31225 + C22713 * C47481) *
                C47479) *
               C1664 +
           ((C22322 * C31224 + C22323 * C31222 + C26857 * C31225 +
             C26858 * C47481) *
                C4577 +
            (C27315 * C31224 + C27316 * C31222 + (C22336 - C22337) * C31225 +
             (C22338 - C22339) * C47481) *
                C47479) *
               C1665 +
           ((C22342 * C31224 + C22343 * C31222 + (C23366 - C23365) * C31225 +
             (C23368 - C23367) * C47481) *
                C4577 +
            ((C22337 - C22336) * C31224 + (C22339 - C22338) * C31222 +
             (C47108 * C23357 - C21367 * C23356) * C31225 +
             (C47108 * C23359 - C21367 * C23358) * C47481) *
                C47479) *
               C47464) *
              C47461) *
         C47135) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C47108 * C124 - C21367 * C117) * C31224 +
            (C47108 * C138 - C21367 * C127) * C31222 +
            (C25975 - C25976) * C31225 + (C25977 - C25978) * C47481) *
               C4577 +
           ((C21479 - C21480) * C31224 + (C21481 - C21482) * C31222 +
            C26465 * C31225 + C26466 * C47481) *
               C47479) *
              C1839 +
          (((C25976 - C25975) * C31224 + (C25978 - C25977) * C31222 +
            (C25979 - C25980) * C31225 + (C25981 - C25982) * C47481) *
               C4577 +
           (C26467 * C31224 + C26468 * C31222 + C26851 * C31225 +
            C26852 * C47481) *
               C47479) *
              C1840 +
          (((C25980 - C25979) * C31224 + (C25982 - C25981) * C31222 +
            (C27695 - C27696) * C31225 + (C27697 - C27698) * C47481) *
               C4577 +
           (C26853 * C31224 + C26854 * C31222 + C28173 * C31225 +
            C28174 * C47481) *
               C47479) *
              C1841 +
          (((C27696 - C27695) * C31224 + (C27698 - C27697) * C31222 +
            (C27699 - C27700) * C31225 + (C27701 - C27702) * C47481) *
               C4577 +
           (C28175 * C31224 + C28176 * C31222 + (C27703 - C27704) * C31225 +
            (C27705 - C27706) * C47481) *
               C47479) *
              C1842 +
          (((C27700 - C27699) * C31224 + (C27702 - C27701) * C31222 +
            (C47108 * C12239 - C21367 * C12237) * C31225 +
            (C47108 * C12243 - C21367 * C12241) * C47481) *
               C4577 +
           ((C27704 - C27703) * C31224 + (C27706 - C27705) * C31222 +
            (C47108 * C27691 - C21367 * C27690) * C31225 +
            (C47108 * C27693 - C21367 * C27692) * C47481) *
               C47479) *
              C1843) *
         C47163 * C47135) /
            (p * q * std::sqrt(p + q));
    d2ee[188] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C47108 * C124 - C21367 * C117) * C31224 +
              (C47108 * C138 - C21367 * C127) * C31222 +
              (C25975 - C25976) * C31225 + (C25977 - C25978) * C47481) *
                 C4577 +
             ((C21479 - C21480) * C31224 + (C21481 - C21482) * C31222 +
              C26465 * C31225 + C26466 * C47481) *
                 C47479) *
                C47430 +
            (((C25976 - C25975) * C31224 + (C25978 - C25977) * C31222 +
              (C25979 - C25980) * C31225 + (C25981 - C25982) * C47481) *
                 C4577 +
             (C26467 * C31224 + C26468 * C31222 + C26851 * C31225 +
              C26852 * C47481) *
                 C47479) *
                C47268) *
               C942 +
           ((((C21480 - C21479) * C31224 + (C21482 - C21481) * C31222 +
              C26467 * C31225 + C26468 * C47481) *
                 C4577 +
             ((C21484 - C21483) * C31224 + (C21486 - C21485) * C31222 +
              C22322 * C31225 + C22323 * C47481) *
                 C47479) *
                C47430 +
            ((C26465 * C31224 + C26466 * C31222 + C26853 * C31225 +
              C26854 * C47481) *
                 C4577 +
             (C26855 * C31224 + C26856 * C31222 + C22342 * C31225 +
              C22343 * C47481) *
                 C47479) *
                C47268) *
               C943 +
           (((C21515 * C31224 + C21516 * C31222 + C26855 * C31225 +
              C26856 * C47481) *
                 C4577 +
             ((C21488 - C21487) * C31224 + (C21490 - C21489) * C31222 +
              C22712 * C31225 + C22713 * C47481) *
                 C47479) *
                C47430 +
            ((C22322 * C31224 + C22323 * C31222 + C26857 * C31225 +
              C26858 * C47481) *
                 C4577 +
             (C27315 * C31224 + C27316 * C31222 + (C22336 - C22337) * C31225 +
              (C22338 - C22339) * C47481) *
                 C47479) *
                C47268) *
               C47461) *
              C47415 +
          (((((C21367 * C118 - C47108 * C125) * C31224 +
              (C21367 * C128 - C47108 * C139) * C31222 +
              (C25983 - C25984) * C31225 + (C25985 - C25986) * C47481) *
                 C4577 +
             ((C21491 - C21492) * C31224 + (C21493 - C21494) * C31222 +
              C26469 * C31225 + C26470 * C47481) *
                 C47479) *
                C47430 +
            (((C25984 - C25983) * C31224 + (C25986 - C25985) * C31222 +
              (C25987 - C25988) * C31225 + (C25989 - C25990) * C47481) *
                 C4577 +
             (C26471 * C31224 + C26472 * C31222 + C27901 * C31225 +
              C27902 * C47481) *
                 C47479) *
                C47268) *
               C942 +
           ((((C21492 - C21491) * C31224 + (C21494 - C21493) * C31222 +
              C26471 * C31225 + C26472 * C47481) *
                 C4577 +
             ((C21496 - C21495) * C31224 + (C21498 - C21497) * C31222 +
              C22601 * C31225 + C22602 * C47481) *
                 C47479) *
                C47430 +
            ((C26469 * C31224 + C26470 * C31222 + C27903 * C31225 +
              C27904 * C47481) *
                 C4577 +
             (C27183 * C31224 + C27184 * C31222 + (C23157 - C23158) * C31225 +
              (C23159 - C23160) * C47481) *
                 C47479) *
                C47268) *
               C943 +
           (((C21517 * C31224 + C21518 * C31222 + C27183 * C31225 +
              C27184 * C47481) *
                 C4577 +
             ((C21500 - C21499) * C31224 + (C21502 - C21501) * C31222 +
              (C22603 - C22604) * C31225 + (C22605 - C22606) * C47481) *
                 C47479) *
                C47430 +
            ((C22601 * C31224 + C22602 * C31222 + (C23158 - C23157) * C31225 +
              (C23160 - C23159) * C47481) *
                 C4577 +
             ((C22604 - C22603) * C31224 + (C22606 - C22605) * C31222 +
              (C47108 * C5808 - C21367 * C5806) * C31225 +
              (C47108 * C5812 - C21367 * C5810) * C47481) *
                 C47479) *
                C47268) *
               C47461) *
              C47146)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C47108 * C124 - C21367 * C117) * C31224 +
             (C47108 * C138 - C21367 * C127) * C31222 +
             (C25975 - C25976) * C31225 + (C25977 - C25978) * C47481) *
                C4577 +
            ((C21479 - C21480) * C31224 + (C21481 - C21482) * C31222 +
             C26465 * C31225 + C26466 * C47481) *
                C47479) *
               C47430 +
           (((C25976 - C25975) * C31224 + (C25978 - C25977) * C31222 +
             (C25979 - C25980) * C31225 + (C25981 - C25982) * C47481) *
                C4577 +
            (C26467 * C31224 + C26468 * C31222 + C26851 * C31225 +
             C26852 * C47481) *
                C47479) *
               C47268) *
              C47163 * C554 +
          ((((C21367 * C118 - C47108 * C125) * C31224 +
             (C21367 * C128 - C47108 * C139) * C31222 +
             (C25983 - C25984) * C31225 + (C25985 - C25986) * C47481) *
                C4577 +
            ((C21491 - C21492) * C31224 + (C21493 - C21494) * C31222 +
             C26469 * C31225 + C26470 * C47481) *
                C47479) *
               C47430 +
           (((C25984 - C25983) * C31224 + (C25986 - C25985) * C31222 +
             (C25987 - C25988) * C31225 + (C25989 - C25990) * C47481) *
                C4577 +
            (C26471 * C31224 + C26472 * C31222 + C27901 * C31225 +
             C27902 * C47481) *
                C47479) *
               C47268) *
              C47163 * C555 +
          ((((C47108 * C126 - C21367 * C119) * C31224 +
             (C47108 * C140 - C21367 * C129) * C31222 +
             (C25991 - C25992) * C31225 + (C25993 - C25994) * C47481) *
                C4577 +
            ((C21503 - C21504) * C31224 + (C21505 - C21506) * C31222 +
             C26473 * C31225 + C26474 * C47481) *
                C47479) *
               C47430 +
           (((C25992 - C25991) * C31224 + (C25994 - C25993) * C31222 +
             (C25995 - C25996) * C31225 + (C25997 - C25998) * C47481) *
                C4577 +
            (C26475 * C31224 + C26476 * C31222 + (C25999 - C26000) * C31225 +
             (C26001 - C26002) * C47481) *
                C47479) *
               C47268) *
              C47163 * C556 +
          ((((C21367 * C120 - C47108 * C130) * C31224 +
             (C21367 * C131 - C47108 * C141) * C31222 +
             (C26267 - C26268) * C31225 + (C26269 - C26270) * C47481) *
                C4577 +
            ((C21738 - C21739) * C31224 + (C21740 - C21741) * C31222 +
             (C26133 - C26134) * C31225 + (C26135 - C26136) * C47481) *
                C47479) *
               C47430 +
           (((C26268 - C26267) * C31224 + (C26270 - C26269) * C31222 +
             (C47108 * C438 - C21367 * C421) * C31225 +
             (C47108 * C451 - C21367 * C439) * C47481) *
                C4577 +
            ((C26134 - C26133) * C31224 + (C26136 - C26135) * C31222 +
             (C47108 * C2015 - C21367 * C2014) * C31225 +
             (C47108 * C2017 - C21367 * C2016) * C47481) *
                C47479) *
               C47268) *
              C47163 * C47465)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C47108 * C124 - C21367 * C117) * C31224 +
             (C47108 * C138 - C21367 * C127) * C31222 +
             (C25975 - C25976) * C31225 + (C25977 - C25978) * C47481) *
                C4577 +
            ((C21479 - C21480) * C31224 + (C21481 - C21482) * C31222 +
             C26465 * C31225 + C26466 * C47481) *
                C47479) *
               C2116 +
           (((C25976 - C25975) * C31224 + (C25978 - C25977) * C31222 +
             (C25979 - C25980) * C31225 + (C25981 - C25982) * C47481) *
                C4577 +
            (C26467 * C31224 + C26468 * C31222 + C26851 * C31225 +
             C26852 * C47481) *
                C47479) *
               C2117 +
           (((C25980 - C25979) * C31224 + (C25982 - C25981) * C31222 +
             (C27695 - C27696) * C31225 + (C27697 - C27698) * C47481) *
                C4577 +
            (C26853 * C31224 + C26854 * C31222 + C28173 * C31225 +
             C28174 * C47481) *
                C47479) *
               C2118 +
           (((C27696 - C27695) * C31224 + (C27698 - C27697) * C31222 +
             (C27699 - C27700) * C31225 + (C27701 - C27702) * C47481) *
                C4577 +
            (C28175 * C31224 + C28176 * C31222 + (C27703 - C27704) * C31225 +
             (C27705 - C27706) * C47481) *
                C47479) *
               C47477) *
              C47163 * C47415 +
          ((((C21367 * C118 - C47108 * C125) * C31224 +
             (C21367 * C128 - C47108 * C139) * C31222 +
             (C25983 - C25984) * C31225 + (C25985 - C25986) * C47481) *
                C4577 +
            ((C21491 - C21492) * C31224 + (C21493 - C21494) * C31222 +
             C26469 * C31225 + C26470 * C47481) *
                C47479) *
               C2116 +
           (((C25984 - C25983) * C31224 + (C25986 - C25985) * C31222 +
             (C25987 - C25988) * C31225 + (C25989 - C25990) * C47481) *
                C4577 +
            (C26471 * C31224 + C26472 * C31222 + C27901 * C31225 +
             C27902 * C47481) *
                C47479) *
               C2117 +
           (((C25988 - C25987) * C31224 + (C25990 - C25989) * C31222 +
             (C28039 - C28040) * C31225 + (C28041 - C28042) * C47481) *
                C4577 +
            (C27903 * C31224 + C27904 * C31222 + (C27905 - C27906) * C31225 +
             (C27907 - C27908) * C47481) *
                C47479) *
               C2118 +
           (((C28040 - C28039) * C31224 + (C28042 - C28041) * C31222 +
             (C47108 * C1857 - C21367 * C1848) * C31225 +
             (C47108 * C1866 - C21367 * C1860) * C47481) *
                C4577 +
            ((C27906 - C27905) * C31224 + (C27908 - C27907) * C31222 +
             (C47108 * C6700 - C21367 * C6698) * C31225 +
             (C47108 * C6704 - C21367 * C6702) * C47481) *
                C47479) *
               C47477) *
              C47163 * C47146)) /
            (p * q * std::sqrt(p + q));
    d2ee[189] += (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  (((((C47108 * C124 - C21367 * C117) * C31224 +
                      (C47108 * C138 - C21367 * C127) * C31222 +
                      (C25975 - C25976) * C31225 + (C25977 - C25978) * C47481) *
                         C4577 +
                     ((C21479 - C21480) * C31224 + (C21481 - C21482) * C31222 +
                      C26465 * C31225 + C26466 * C47481) *
                         C47479) *
                        C47181 * C47500 +
                    (((C21480 - C21479) * C31224 + (C21482 - C21481) * C31222 +
                      C26467 * C31225 + C26468 * C47481) *
                         C4577 +
                     ((C21484 - C21483) * C31224 + (C21486 - C21485) * C31222 +
                      C22322 * C31225 + C22323 * C47481) *
                         C47479) *
                        C47181 * C47488 +
                    ((C21515 * C31224 + C21516 * C31222 + C26855 * C31225 +
                      C26856 * C47481) *
                         C4577 +
                     ((C21488 - C21487) * C31224 + (C21490 - C21489) * C31222 +
                      C22712 * C31225 + C22713 * C47481) *
                         C47479) *
                        C47181 * C47461) *
                       C258 +
                   ((((C21367 * C118 - C47108 * C125) * C31224 +
                      (C21367 * C128 - C47108 * C139) * C31222 +
                      (C25983 - C25984) * C31225 + (C25985 - C25986) * C47481) *
                         C4577 +
                     ((C21491 - C21492) * C31224 + (C21493 - C21494) * C31222 +
                      C26469 * C31225 + C26470 * C47481) *
                         C47479) *
                        C47181 * C47500 +
                    (((C21492 - C21491) * C31224 + (C21494 - C21493) * C31222 +
                      C26471 * C31225 + C26472 * C47481) *
                         C4577 +
                     ((C21496 - C21495) * C31224 + (C21498 - C21497) * C31222 +
                      C22601 * C31225 + C22602 * C47481) *
                         C47479) *
                        C47181 * C47488 +
                    ((C21517 * C31224 + C21518 * C31222 + C27183 * C31225 +
                      C27184 * C47481) *
                         C4577 +
                     ((C21500 - C21499) * C31224 + (C21502 - C21501) * C31222 +
                      (C22603 - C22604) * C31225 + (C22605 - C22606) * C47481) *
                         C47479) *
                        C47181 * C47461) *
                       C259 +
                   ((((C47108 * C126 - C21367 * C119) * C31224 +
                      (C47108 * C140 - C21367 * C129) * C31222 +
                      (C25991 - C25992) * C31225 + (C25993 - C25994) * C47481) *
                         C4577 +
                     ((C21503 - C21504) * C31224 + (C21505 - C21506) * C31222 +
                      C26473 * C31225 + C26474 * C47481) *
                         C47479) *
                        C47181 * C47500 +
                    (((C21504 - C21503) * C31224 + (C21506 - C21505) * C31222 +
                      C26475 * C31225 + C26476 * C47481) *
                         C4577 +
                     ((C21508 - C21507) * C31224 + (C21510 - C21509) * C31222 +
                      (C22010 - C22011) * C31225 + (C22012 - C22013) * C47481) *
                         C47479) *
                        C47181 * C47488 +
                    ((C21519 * C31224 + C21520 * C31222 +
                      (C22011 - C22010) * C31225 + (C22013 - C22012) * C47481) *
                         C4577 +
                     ((C21512 - C21511) * C31224 + (C21514 - C21513) * C31222 +
                      (C47108 * C1547 - C21367 * C1544) * C31225 +
                      (C47108 * C1553 - C21367 * C1550) * C47481) *
                         C47479) *
                        C47181 * C47461) *
                       C47455)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  ((((C47108 * C124 - C21367 * C117) * C31224 +
                     (C47108 * C138 - C21367 * C127) * C31222 +
                     (C25975 - C25976) * C31225 + (C25977 - C25978) * C47481) *
                        C4577 +
                    ((C21479 - C21480) * C31224 + (C21481 - C21482) * C31222 +
                     C26465 * C31225 + C26466 * C47481) *
                        C47479) *
                       C47181 * C47163 * C108 +
                   (((C21367 * C118 - C47108 * C125) * C31224 +
                     (C21367 * C128 - C47108 * C139) * C31222 +
                     (C25983 - C25984) * C31225 + (C25985 - C25986) * C47481) *
                        C4577 +
                    ((C21491 - C21492) * C31224 + (C21493 - C21494) * C31222 +
                     C26469 * C31225 + C26470 * C47481) *
                        C47479) *
                       C47181 * C47163 * C109 +
                   (((C47108 * C126 - C21367 * C119) * C31224 +
                     (C47108 * C140 - C21367 * C129) * C31222 +
                     (C25991 - C25992) * C31225 + (C25993 - C25994) * C47481) *
                        C4577 +
                    ((C21503 - C21504) * C31224 + (C21505 - C21506) * C31222 +
                     C26473 * C31225 + C26474 * C47481) *
                        C47479) *
                       C47181 * C47163 * C110 +
                   (((C21367 * C120 - C47108 * C130) * C31224 +
                     (C21367 * C131 - C47108 * C141) * C31222 +
                     (C26267 - C26268) * C31225 + (C26269 - C26270) * C47481) *
                        C4577 +
                    ((C21738 - C21739) * C31224 + (C21740 - C21741) * C31222 +
                     (C26133 - C26134) * C31225 + (C26135 - C26136) * C47481) *
                        C47479) *
                       C47181 * C47163 * C111 +
                   (((C47108 * C132 - C21367 * C121) * C31224 +
                     (C47108 * C142 - C21367 * C133) * C31222 +
                     (C47108 * C440 - C21367 * C422) * C31225 +
                     (C47108 * C452 - C21367 * C441) * C47481) *
                        C4577 +
                    ((C47108 * C287 - C21367 * C269) * C31224 +
                     (C47108 * C299 - C21367 * C288) * C31222 +
                     (C47108 * C825 - C21367 * C816) * C31225 +
                     (C47108 * C831 - C21367 * C826) * C47481) *
                        C47479) *
                       C47181 * C47163 * C112)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  (((((C47108 * C124 - C21367 * C117) * C31224 +
                      (C47108 * C138 - C21367 * C127) * C31222 +
                      (C25975 - C25976) * C31225 + (C25977 - C25978) * C47481) *
                         C4577 +
                     ((C21479 - C21480) * C31224 + (C21481 - C21482) * C31222 +
                      C26465 * C31225 + C26466 * C47481) *
                         C47479) *
                        C47181 * C942 +
                    (((C21480 - C21479) * C31224 + (C21482 - C21481) * C31222 +
                      C26467 * C31225 + C26468 * C47481) *
                         C4577 +
                     ((C21484 - C21483) * C31224 + (C21486 - C21485) * C31222 +
                      C22322 * C31225 + C22323 * C47481) *
                         C47479) *
                        C47181 * C943 +
                    ((C21515 * C31224 + C21516 * C31222 + C26855 * C31225 +
                      C26856 * C47481) *
                         C4577 +
                     ((C21488 - C21487) * C31224 + (C21490 - C21489) * C31222 +
                      C22712 * C31225 + C22713 * C47481) *
                         C47479) *
                        C47181 * C47461) *
                       C47497 +
                   ((((C21367 * C118 - C47108 * C125) * C31224 +
                      (C21367 * C128 - C47108 * C139) * C31222 +
                      (C25983 - C25984) * C31225 + (C25985 - C25986) * C47481) *
                         C4577 +
                     ((C21491 - C21492) * C31224 + (C21493 - C21494) * C31222 +
                      C26469 * C31225 + C26470 * C47481) *
                         C47479) *
                        C47181 * C942 +
                    (((C21492 - C21491) * C31224 + (C21494 - C21493) * C31222 +
                      C26471 * C31225 + C26472 * C47481) *
                         C4577 +
                     ((C21496 - C21495) * C31224 + (C21498 - C21497) * C31222 +
                      C22601 * C31225 + C22602 * C47481) *
                         C47479) *
                        C47181 * C943 +
                    ((C21517 * C31224 + C21518 * C31222 + C27183 * C31225 +
                      C27184 * C47481) *
                         C4577 +
                     ((C21500 - C21499) * C31224 + (C21502 - C21501) * C31222 +
                      (C22603 - C22604) * C31225 + (C22605 - C22606) * C47481) *
                         C47479) *
                        C47181 * C47461) *
                       C47484 +
                   ((((C47108 * C126 - C21367 * C119) * C31224 +
                      (C47108 * C140 - C21367 * C129) * C31222 +
                      (C25991 - C25992) * C31225 + (C25993 - C25994) * C47481) *
                         C4577 +
                     ((C21503 - C21504) * C31224 + (C21505 - C21506) * C31222 +
                      C26473 * C31225 + C26474 * C47481) *
                         C47479) *
                        C47181 * C942 +
                    (((C21504 - C21503) * C31224 + (C21506 - C21505) * C31222 +
                      C26475 * C31225 + C26476 * C47481) *
                         C4577 +
                     ((C21508 - C21507) * C31224 + (C21510 - C21509) * C31222 +
                      (C22010 - C22011) * C31225 + (C22012 - C22013) * C47481) *
                         C47479) *
                        C47181 * C943 +
                    ((C21519 * C31224 + C21520 * C31222 +
                      (C22011 - C22010) * C31225 + (C22013 - C22012) * C47481) *
                         C4577 +
                     ((C21512 - C21511) * C31224 + (C21514 - C21513) * C31222 +
                      (C47108 * C1547 - C21367 * C1544) * C31225 +
                      (C47108 * C1553 - C21367 * C1550) * C47481) *
                         C47479) *
                        C47181 * C47461) *
                       C47455)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  ((((C47108 * C124 - C21367 * C117) * C31224 +
                     (C47108 * C138 - C21367 * C127) * C31222 +
                     (C25975 - C25976) * C31225 + (C25977 - C25978) * C47481) *
                        C4577 +
                    ((C21479 - C21480) * C31224 + (C21481 - C21482) * C31222 +
                     C26465 * C31225 + C26466 * C47481) *
                        C47479) *
                       C47181 * C1010 +
                   (((C21480 - C21479) * C31224 + (C21482 - C21481) * C31222 +
                     C26467 * C31225 + C26468 * C47481) *
                        C4577 +
                    ((C21484 - C21483) * C31224 + (C21486 - C21485) * C31222 +
                     C22322 * C31225 + C22323 * C47481) *
                        C47479) *
                       C47181 * C1011 +
                   ((C21515 * C31224 + C21516 * C31222 + C26855 * C31225 +
                     C26856 * C47481) *
                        C4577 +
                    ((C21488 - C21487) * C31224 + (C21490 - C21489) * C31222 +
                     C22712 * C31225 + C22713 * C47481) *
                        C47479) *
                       C47181 * C1012 +
                   ((C22190 * C31224 + C22191 * C31222 + C27315 * C31225 +
                     C27316 * C47481) *
                        C4577 +
                    ((C22193 - C22192) * C31224 + (C22195 - C22194) * C31222 +
                     (C22714 - C22715) * C31225 + (C22716 - C22717) * C47481) *
                        C47479) *
                       C47181 * C1013 +
                   ((C22202 * C31224 + C22203 * C31222 +
                     (C22715 - C22714) * C31225 + (C22717 - C22716) * C47481) *
                        C4577 +
                    ((C22197 - C22196) * C31224 + (C22199 - C22198) * C31222 +
                     (C47108 * C22708 - C21367 * C22707) * C31225 +
                     (C47108 * C22710 - C21367 * C22709) * C47481) *
                        C47479) *
                       C47181 * C1014) *
                  C47135) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((((C47108 * C124 - C21367 * C117) * C31224 +
                      (C47108 * C138 - C21367 * C127) * C31222 +
                      (C25975 - C25976) * C31225 + (C25977 - C25978) * C47481) *
                         C4577 +
                     ((C21479 - C21480) * C31224 + (C21481 - C21482) * C31222 +
                      C26465 * C31225 + C26466 * C47481) *
                         C47479) *
                        C1664 +
                    (((C25976 - C25975) * C31224 + (C25978 - C25977) * C31222 +
                      (C25979 - C25980) * C31225 + (C25981 - C25982) * C47481) *
                         C4577 +
                     (C26467 * C31224 + C26468 * C31222 + C26851 * C31225 +
                      C26852 * C47481) *
                         C47479) *
                        C1665 +
                    (((C25980 - C25979) * C31224 + (C25982 - C25981) * C31222 +
                      (C27695 - C27696) * C31225 + (C27697 - C27698) * C47481) *
                         C4577 +
                     (C26853 * C31224 + C26854 * C31222 + C28173 * C31225 +
                      C28174 * C47481) *
                         C47479) *
                        C47464) *
                       C47163 * C47497 +
                   ((((C21367 * C118 - C47108 * C125) * C31224 +
                      (C21367 * C128 - C47108 * C139) * C31222 +
                      (C25983 - C25984) * C31225 + (C25985 - C25986) * C47481) *
                         C4577 +
                     ((C21491 - C21492) * C31224 + (C21493 - C21494) * C31222 +
                      C26469 * C31225 + C26470 * C47481) *
                         C47479) *
                        C1664 +
                    (((C25984 - C25983) * C31224 + (C25986 - C25985) * C31222 +
                      (C25987 - C25988) * C31225 + (C25989 - C25990) * C47481) *
                         C4577 +
                     (C26471 * C31224 + C26472 * C31222 + C27901 * C31225 +
                      C27902 * C47481) *
                         C47479) *
                        C1665 +
                    (((C25988 - C25987) * C31224 + (C25990 - C25989) * C31222 +
                      (C28039 - C28040) * C31225 + (C28041 - C28042) * C47481) *
                         C4577 +
                     (C27903 * C31224 + C27904 * C31222 +
                      (C27905 - C27906) * C31225 + (C27907 - C27908) * C47481) *
                         C47479) *
                        C47464) *
                       C47163 * C47484 +
                   ((((C47108 * C126 - C21367 * C119) * C31224 +
                      (C47108 * C140 - C21367 * C129) * C31222 +
                      (C25991 - C25992) * C31225 + (C25993 - C25994) * C47481) *
                         C4577 +
                     ((C21503 - C21504) * C31224 + (C21505 - C21506) * C31222 +
                      C26473 * C31225 + C26474 * C47481) *
                         C47479) *
                        C1664 +
                    (((C25992 - C25991) * C31224 + (C25994 - C25993) * C31222 +
                      (C25995 - C25996) * C31225 + (C25997 - C25998) * C47481) *
                         C4577 +
                     (C26475 * C31224 + C26476 * C31222 +
                      (C25999 - C26000) * C31225 + (C26001 - C26002) * C47481) *
                         C47479) *
                        C1665 +
                    (((C25996 - C25995) * C31224 + (C25998 - C25997) * C31222 +
                      (C47108 * C1852 - C21367 * C1846) * C31225 +
                      (C47108 * C1864 - C21367 * C1855) * C47481) *
                         C4577 +
                     ((C26000 - C25999) * C31224 + (C26002 - C26001) * C31222 +
                      (C47108 * C2227 - C21367 * C2224) * C31225 +
                      (C47108 * C2233 - C21367 * C2230) * C47481) *
                         C47479) *
                        C47464) *
                       C47163 * C47455)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((((C47108 * C124 - C21367 * C117) * C31224 +
                      (C47108 * C138 - C21367 * C127) * C31222 +
                      (C25975 - C25976) * C31225 + (C25977 - C25978) * C47481) *
                         C4577 +
                     ((C21479 - C21480) * C31224 + (C21481 - C21482) * C31222 +
                      C26465 * C31225 + C26466 * C47481) *
                         C47479) *
                        C1664 +
                    (((C25976 - C25975) * C31224 + (C25978 - C25977) * C31222 +
                      (C25979 - C25980) * C31225 + (C25981 - C25982) * C47481) *
                         C4577 +
                     (C26467 * C31224 + C26468 * C31222 + C26851 * C31225 +
                      C26852 * C47481) *
                         C47479) *
                        C1665 +
                    (((C25980 - C25979) * C31224 + (C25982 - C25981) * C31222 +
                      (C27695 - C27696) * C31225 + (C27697 - C27698) * C47481) *
                         C4577 +
                     (C26853 * C31224 + C26854 * C31222 + C28173 * C31225 +
                      C28174 * C47481) *
                         C47479) *
                        C47464) *
                       C47500 +
                   ((((C21480 - C21479) * C31224 + (C21482 - C21481) * C31222 +
                      C26467 * C31225 + C26468 * C47481) *
                         C4577 +
                     ((C21484 - C21483) * C31224 + (C21486 - C21485) * C31222 +
                      C22322 * C31225 + C22323 * C47481) *
                         C47479) *
                        C1664 +
                    ((C26465 * C31224 + C26466 * C31222 + C26853 * C31225 +
                      C26854 * C47481) *
                         C4577 +
                     (C26855 * C31224 + C26856 * C31222 + C22342 * C31225 +
                      C22343 * C47481) *
                         C47479) *
                        C1665 +
                    ((C26851 * C31224 + C26852 * C31222 + C28175 * C31225 +
                      C28176 * C47481) *
                         C4577 +
                     (C26857 * C31224 + C26858 * C31222 +
                      (C23365 - C23366) * C31225 + (C23367 - C23368) * C47481) *
                         C47479) *
                        C47464) *
                       C47488 +
                   (((C21515 * C31224 + C21516 * C31222 + C26855 * C31225 +
                      C26856 * C47481) *
                         C4577 +
                     ((C21488 - C21487) * C31224 + (C21490 - C21489) * C31222 +
                      C22712 * C31225 + C22713 * C47481) *
                         C47479) *
                        C1664 +
                    ((C22322 * C31224 + C22323 * C31222 + C26857 * C31225 +
                      C26858 * C47481) *
                         C4577 +
                     (C27315 * C31224 + C27316 * C31222 +
                      (C22336 - C22337) * C31225 + (C22338 - C22339) * C47481) *
                         C47479) *
                        C1665 +
                    ((C22342 * C31224 + C22343 * C31222 +
                      (C23366 - C23365) * C31225 + (C23368 - C23367) * C47481) *
                         C4577 +
                     ((C22337 - C22336) * C31224 + (C22339 - C22338) * C31222 +
                      (C47108 * C23357 - C21367 * C23356) * C31225 +
                      (C47108 * C23359 - C21367 * C23358) * C47481) *
                         C47479) *
                        C47464) *
                       C47461) *
                  C47135) /
                     (p * q * std::sqrt(p + q));
    d2ee[190] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C47108 * C124 - C21367 * C117) * C31224 +
              (C47108 * C138 - C21367 * C127) * C31222 +
              (C25975 - C25976) * C31225 + (C25977 - C25978) * C47481) *
                 C4577 +
             ((C21479 - C21480) * C31224 + (C21481 - C21482) * C31222 +
              C26465 * C31225 + C26466 * C47481) *
                 C47479) *
                C3094 +
            (((C25976 - C25975) * C31224 + (C25978 - C25977) * C31222 +
              (C25979 - C25980) * C31225 + (C25981 - C25982) * C47481) *
                 C4577 +
             (C26467 * C31224 + C26468 * C31222 + C26851 * C31225 +
              C26852 * C47481) *
                 C47479) *
                C47268) *
               C47429 +
           ((((C21480 - C21479) * C31224 + (C21482 - C21481) * C31222 +
              C26467 * C31225 + C26468 * C47481) *
                 C4577 +
             ((C21484 - C21483) * C31224 + (C21486 - C21485) * C31222 +
              C22322 * C31225 + C22323 * C47481) *
                 C47479) *
                C3094 +
            ((C26465 * C31224 + C26466 * C31222 + C26853 * C31225 +
              C26854 * C47481) *
                 C4577 +
             (C26855 * C31224 + C26856 * C31222 + C22342 * C31225 +
              C22343 * C47481) *
                 C47479) *
                C47268) *
               C47226) *
              C47140 +
          (((((C21367 * C118 - C47108 * C125) * C31224 +
              (C21367 * C128 - C47108 * C139) * C31222 +
              (C25983 - C25984) * C31225 + (C25985 - C25986) * C47481) *
                 C4577 +
             ((C21491 - C21492) * C31224 + (C21493 - C21494) * C31222 +
              C26469 * C31225 + C26470 * C47481) *
                 C47479) *
                C3094 +
            (((C25984 - C25983) * C31224 + (C25986 - C25985) * C31222 +
              (C25987 - C25988) * C31225 + (C25989 - C25990) * C47481) *
                 C4577 +
             (C26471 * C31224 + C26472 * C31222 + C27901 * C31225 +
              C27902 * C47481) *
                 C47479) *
                C47268) *
               C47429 +
           ((((C21492 - C21491) * C31224 + (C21494 - C21493) * C31222 +
              C26471 * C31225 + C26472 * C47481) *
                 C4577 +
             ((C21496 - C21495) * C31224 + (C21498 - C21497) * C31222 +
              C22601 * C31225 + C22602 * C47481) *
                 C47479) *
                C3094 +
            ((C26469 * C31224 + C26470 * C31222 + C27903 * C31225 +
              C27904 * C47481) *
                 C4577 +
             (C27183 * C31224 + C27184 * C31222 + (C23157 - C23158) * C31225 +
              (C23159 - C23160) * C47481) *
                 C47479) *
                C47268) *
               C47226) *
              C47149 +
          (((((C47108 * C126 - C21367 * C119) * C31224 +
              (C47108 * C140 - C21367 * C129) * C31222 +
              (C25991 - C25992) * C31225 + (C25993 - C25994) * C47481) *
                 C4577 +
             ((C21503 - C21504) * C31224 + (C21505 - C21506) * C31222 +
              C26473 * C31225 + C26474 * C47481) *
                 C47479) *
                C3094 +
            (((C25992 - C25991) * C31224 + (C25994 - C25993) * C31222 +
              (C25995 - C25996) * C31225 + (C25997 - C25998) * C47481) *
                 C4577 +
             (C26475 * C31224 + C26476 * C31222 + (C25999 - C26000) * C31225 +
              (C26001 - C26002) * C47481) *
                 C47479) *
                C47268) *
               C47429 +
           ((((C21504 - C21503) * C31224 + (C21506 - C21505) * C31222 +
              C26475 * C31225 + C26476 * C47481) *
                 C4577 +
             ((C21508 - C21507) * C31224 + (C21510 - C21509) * C31222 +
              (C22010 - C22011) * C31225 + (C22012 - C22013) * C47481) *
                 C47479) *
                C3094 +
            ((C26473 * C31224 + C26474 * C31222 + (C26000 - C25999) * C31225 +
              (C26002 - C26001) * C47481) *
                 C4577 +
             ((C22011 - C22010) * C31224 + (C22013 - C22012) * C31222 +
              (C47108 * C1173 - C21367 * C1158) * C31225 +
              (C47108 * C1185 - C21367 * C1176) * C47481) *
                 C47479) *
                C47268) *
               C47226) *
              C2703)) /
        (p * q * std::sqrt(p + q));
    d2ee[191] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C47108 * C124 - C21367 * C117) * C31224 +
              (C47108 * C138 - C21367 * C127) * C31222 +
              (C25975 - C25976) * C31225 + (C25977 - C25978) * C47481) *
                 C4577 +
             ((C21479 - C21480) * C31224 + (C21481 - C21482) * C31222 +
              C26465 * C31225 + C26466 * C47481) *
                 C47479) *
                C47264 +
            (((C25976 - C25975) * C31224 + (C25978 - C25977) * C31222 +
              (C25979 - C25980) * C31225 + (C25981 - C25982) * C47481) *
                 C4577 +
             (C26467 * C31224 + C26468 * C31222 + C26851 * C31225 +
              C26852 * C47481) *
                 C47479) *
                C47271 +
            (((C25980 - C25979) * C31224 + (C25982 - C25981) * C31222 +
              (C27695 - C27696) * C31225 + (C27697 - C27698) * C47481) *
                 C4577 +
             (C26853 * C31224 + C26854 * C31222 + C28173 * C31225 +
              C28174 * C47481) *
                 C47479) *
                C3602) *
               C47429 +
           ((((C21480 - C21479) * C31224 + (C21482 - C21481) * C31222 +
              C26467 * C31225 + C26468 * C47481) *
                 C4577 +
             ((C21484 - C21483) * C31224 + (C21486 - C21485) * C31222 +
              C22322 * C31225 + C22323 * C47481) *
                 C47479) *
                C47264 +
            ((C26465 * C31224 + C26466 * C31222 + C26853 * C31225 +
              C26854 * C47481) *
                 C4577 +
             (C26855 * C31224 + C26856 * C31222 + C22342 * C31225 +
              C22343 * C47481) *
                 C47479) *
                C47271 +
            ((C26851 * C31224 + C26852 * C31222 + C28175 * C31225 +
              C28176 * C47481) *
                 C4577 +
             (C26857 * C31224 + C26858 * C31222 + (C23365 - C23366) * C31225 +
              (C23367 - C23368) * C47481) *
                 C47479) *
                C3602) *
               C47226) *
              C2440 +
          (((((C21367 * C118 - C47108 * C125) * C31224 +
              (C21367 * C128 - C47108 * C139) * C31222 +
              (C25983 - C25984) * C31225 + (C25985 - C25986) * C47481) *
                 C4577 +
             ((C21491 - C21492) * C31224 + (C21493 - C21494) * C31222 +
              C26469 * C31225 + C26470 * C47481) *
                 C47479) *
                C47264 +
            (((C25984 - C25983) * C31224 + (C25986 - C25985) * C31222 +
              (C25987 - C25988) * C31225 + (C25989 - C25990) * C47481) *
                 C4577 +
             (C26471 * C31224 + C26472 * C31222 + C27901 * C31225 +
              C27902 * C47481) *
                 C47479) *
                C47271 +
            (((C25988 - C25987) * C31224 + (C25990 - C25989) * C31222 +
              (C28039 - C28040) * C31225 + (C28041 - C28042) * C47481) *
                 C4577 +
             (C27903 * C31224 + C27904 * C31222 + (C27905 - C27906) * C31225 +
              (C27907 - C27908) * C47481) *
                 C47479) *
                C3602) *
               C47429 +
           ((((C21492 - C21491) * C31224 + (C21494 - C21493) * C31222 +
              C26471 * C31225 + C26472 * C47481) *
                 C4577 +
             ((C21496 - C21495) * C31224 + (C21498 - C21497) * C31222 +
              C22601 * C31225 + C22602 * C47481) *
                 C47479) *
                C47264 +
            ((C26469 * C31224 + C26470 * C31222 + C27903 * C31225 +
              C27904 * C47481) *
                 C4577 +
             (C27183 * C31224 + C27184 * C31222 + (C23157 - C23158) * C31225 +
              (C23159 - C23160) * C47481) *
                 C47479) *
                C47271 +
            ((C27901 * C31224 + C27902 * C31222 + (C27906 - C27905) * C31225 +
              (C27908 - C27907) * C47481) *
                 C4577 +
             ((C23158 - C23157) * C31224 + (C23160 - C23159) * C31222 +
              (C47108 * C7170 - C21367 * C7168) * C31225 +
              (C47108 * C7174 - C21367 * C7172) * C47481) *
                 C47479) *
                C3602) *
               C47226) *
              C47146)) /
        (p * q * std::sqrt(p + q));
    d2ee[192] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C47108 * C124 - C21367 * C117) * C31224 +
              (C47108 * C138 - C21367 * C127) * C31222 +
              (C25975 - C25976) * C31225 + (C25977 - C25978) * C47481) *
                 C4577 +
             ((C21479 - C21480) * C31224 + (C21481 - C21482) * C31222 +
              C26465 * C31225 + C26466 * C47481) *
                 C47479) *
                C3094 +
            (((C25976 - C25975) * C31224 + (C25978 - C25977) * C31222 +
              (C25979 - C25980) * C31225 + (C25981 - C25982) * C47481) *
                 C4577 +
             (C26467 * C31224 + C26468 * C31222 + C26851 * C31225 +
              C26852 * C47481) *
                 C47479) *
                C47268) *
               C47500 +
           ((((C21480 - C21479) * C31224 + (C21482 - C21481) * C31222 +
              C26467 * C31225 + C26468 * C47481) *
                 C4577 +
             ((C21484 - C21483) * C31224 + (C21486 - C21485) * C31222 +
              C22322 * C31225 + C22323 * C47481) *
                 C47479) *
                C3094 +
            ((C26465 * C31224 + C26466 * C31222 + C26853 * C31225 +
              C26854 * C47481) *
                 C4577 +
             (C26855 * C31224 + C26856 * C31222 + C22342 * C31225 +
              C22343 * C47481) *
                 C47479) *
                C47268) *
               C47488 +
           (((C21515 * C31224 + C21516 * C31222 + C26855 * C31225 +
              C26856 * C47481) *
                 C4577 +
             ((C21488 - C21487) * C31224 + (C21490 - C21489) * C31222 +
              C22712 * C31225 + C22713 * C47481) *
                 C47479) *
                C3094 +
            ((C22322 * C31224 + C22323 * C31222 + C26857 * C31225 +
              C26858 * C47481) *
                 C4577 +
             (C27315 * C31224 + C27316 * C31222 + (C22336 - C22337) * C31225 +
              (C22338 - C22339) * C47481) *
                 C47479) *
                C47268) *
               C47461) *
              C2440 +
          (((((C21367 * C118 - C47108 * C125) * C31224 +
              (C21367 * C128 - C47108 * C139) * C31222 +
              (C25983 - C25984) * C31225 + (C25985 - C25986) * C47481) *
                 C4577 +
             ((C21491 - C21492) * C31224 + (C21493 - C21494) * C31222 +
              C26469 * C31225 + C26470 * C47481) *
                 C47479) *
                C3094 +
            (((C25984 - C25983) * C31224 + (C25986 - C25985) * C31222 +
              (C25987 - C25988) * C31225 + (C25989 - C25990) * C47481) *
                 C4577 +
             (C26471 * C31224 + C26472 * C31222 + C27901 * C31225 +
              C27902 * C47481) *
                 C47479) *
                C47268) *
               C47500 +
           ((((C21492 - C21491) * C31224 + (C21494 - C21493) * C31222 +
              C26471 * C31225 + C26472 * C47481) *
                 C4577 +
             ((C21496 - C21495) * C31224 + (C21498 - C21497) * C31222 +
              C22601 * C31225 + C22602 * C47481) *
                 C47479) *
                C3094 +
            ((C26469 * C31224 + C26470 * C31222 + C27903 * C31225 +
              C27904 * C47481) *
                 C4577 +
             (C27183 * C31224 + C27184 * C31222 + (C23157 - C23158) * C31225 +
              (C23159 - C23160) * C47481) *
                 C47479) *
                C47268) *
               C47488 +
           (((C21517 * C31224 + C21518 * C31222 + C27183 * C31225 +
              C27184 * C47481) *
                 C4577 +
             ((C21500 - C21499) * C31224 + (C21502 - C21501) * C31222 +
              (C22603 - C22604) * C31225 + (C22605 - C22606) * C47481) *
                 C47479) *
                C3094 +
            ((C22601 * C31224 + C22602 * C31222 + (C23158 - C23157) * C31225 +
              (C23160 - C23159) * C47481) *
                 C4577 +
             ((C22604 - C22603) * C31224 + (C22606 - C22605) * C31222 +
              (C47108 * C5808 - C21367 * C5806) * C31225 +
              (C47108 * C5812 - C21367 * C5810) * C47481) *
                 C47479) *
                C47268) *
               C47461) *
              C47146)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C47108 * C124 - C21367 * C117) * C31224 +
             (C47108 * C138 - C21367 * C127) * C31222 +
             (C25975 - C25976) * C31225 + (C25977 - C25978) * C47481) *
                C4577 +
            ((C21479 - C21480) * C31224 + (C21481 - C21482) * C31222 +
             C26465 * C31225 + C26466 * C47481) *
                C47479) *
               C3094 +
           (((C25976 - C25975) * C31224 + (C25978 - C25977) * C31222 +
             (C25979 - C25980) * C31225 + (C25981 - C25982) * C47481) *
                C4577 +
            (C26467 * C31224 + C26468 * C31222 + C26851 * C31225 +
             C26852 * C47481) *
                C47479) *
               C47268) *
              C47163 * C47506 +
          ((((C21367 * C118 - C47108 * C125) * C31224 +
             (C21367 * C128 - C47108 * C139) * C31222 +
             (C25983 - C25984) * C31225 + (C25985 - C25986) * C47481) *
                C4577 +
            ((C21491 - C21492) * C31224 + (C21493 - C21494) * C31222 +
             C26469 * C31225 + C26470 * C47481) *
                C47479) *
               C3094 +
           (((C25984 - C25983) * C31224 + (C25986 - C25985) * C31222 +
             (C25987 - C25988) * C31225 + (C25989 - C25990) * C47481) *
                C4577 +
            (C26471 * C31224 + C26472 * C31222 + C27901 * C31225 +
             C27902 * C47481) *
                C47479) *
               C47268) *
              C47163 * C47499 +
          ((((C47108 * C126 - C21367 * C119) * C31224 +
             (C47108 * C140 - C21367 * C129) * C31222 +
             (C25991 - C25992) * C31225 + (C25993 - C25994) * C47481) *
                C4577 +
            ((C21503 - C21504) * C31224 + (C21505 - C21506) * C31222 +
             C26473 * C31225 + C26474 * C47481) *
                C47479) *
               C3094 +
           (((C25992 - C25991) * C31224 + (C25994 - C25993) * C31222 +
             (C25995 - C25996) * C31225 + (C25997 - C25998) * C47481) *
                C4577 +
            (C26475 * C31224 + C26476 * C31222 + (C25999 - C26000) * C31225 +
             (C26001 - C26002) * C47481) *
                C47479) *
               C47268) *
              C47163 * C47486 +
          ((((C21367 * C120 - C47108 * C130) * C31224 +
             (C21367 * C131 - C47108 * C141) * C31222 +
             (C26267 - C26268) * C31225 + (C26269 - C26270) * C47481) *
                C4577 +
            ((C21738 - C21739) * C31224 + (C21740 - C21741) * C31222 +
             (C26133 - C26134) * C31225 + (C26135 - C26136) * C47481) *
                C47479) *
               C3094 +
           (((C26268 - C26267) * C31224 + (C26270 - C26269) * C31222 +
             (C47108 * C438 - C21367 * C421) * C31225 +
             (C47108 * C451 - C21367 * C439) * C47481) *
                C4577 +
            ((C26134 - C26133) * C31224 + (C26136 - C26135) * C31222 +
             (C47108 * C2015 - C21367 * C2014) * C31225 +
             (C47108 * C2017 - C21367 * C2016) * C47481) *
                C47479) *
               C47268) *
              C47163 * C47465)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C47108 * C124 - C21367 * C117) * C31224 +
             (C47108 * C138 - C21367 * C127) * C31222 +
             (C25975 - C25976) * C31225 + (C25977 - C25978) * C47481) *
                C4577 +
            ((C21479 - C21480) * C31224 + (C21481 - C21482) * C31222 +
             C26465 * C31225 + C26466 * C47481) *
                C47479) *
               C47508 +
           (((C25976 - C25975) * C31224 + (C25978 - C25977) * C31222 +
             (C25979 - C25980) * C31225 + (C25981 - C25982) * C47481) *
                C4577 +
            (C26467 * C31224 + C26468 * C31222 + C26851 * C31225 +
             C26852 * C47481) *
                C47479) *
               C47505 +
           (((C25980 - C25979) * C31224 + (C25982 - C25981) * C31222 +
             (C27695 - C27696) * C31225 + (C27697 - C27698) * C47481) *
                C4577 +
            (C26853 * C31224 + C26854 * C31222 + C28173 * C31225 +
             C28174 * C47481) *
                C47479) *
               C47496 +
           (((C27696 - C27695) * C31224 + (C27698 - C27697) * C31222 +
             (C27699 - C27700) * C31225 + (C27701 - C27702) * C47481) *
                C4577 +
            (C28175 * C31224 + C28176 * C31222 + (C27703 - C27704) * C31225 +
             (C27705 - C27706) * C47481) *
                C47479) *
               C47477) *
              C47163 * C2440 +
          ((((C21367 * C118 - C47108 * C125) * C31224 +
             (C21367 * C128 - C47108 * C139) * C31222 +
             (C25983 - C25984) * C31225 + (C25985 - C25986) * C47481) *
                C4577 +
            ((C21491 - C21492) * C31224 + (C21493 - C21494) * C31222 +
             C26469 * C31225 + C26470 * C47481) *
                C47479) *
               C47508 +
           (((C25984 - C25983) * C31224 + (C25986 - C25985) * C31222 +
             (C25987 - C25988) * C31225 + (C25989 - C25990) * C47481) *
                C4577 +
            (C26471 * C31224 + C26472 * C31222 + C27901 * C31225 +
             C27902 * C47481) *
                C47479) *
               C47505 +
           (((C25988 - C25987) * C31224 + (C25990 - C25989) * C31222 +
             (C28039 - C28040) * C31225 + (C28041 - C28042) * C47481) *
                C4577 +
            (C27903 * C31224 + C27904 * C31222 + (C27905 - C27906) * C31225 +
             (C27907 - C27908) * C47481) *
                C47479) *
               C47496 +
           (((C28040 - C28039) * C31224 + (C28042 - C28041) * C31222 +
             (C47108 * C1857 - C21367 * C1848) * C31225 +
             (C47108 * C1866 - C21367 * C1860) * C47481) *
                C4577 +
            ((C27906 - C27905) * C31224 + (C27908 - C27907) * C31222 +
             (C47108 * C6700 - C21367 * C6698) * C31225 +
             (C47108 * C6704 - C21367 * C6702) * C47481) *
                C47479) *
               C47477) *
              C47163 * C47146)) /
            (p * q * std::sqrt(p + q));
    d2ee[193] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((((C47108 * C124 - C21367 * C117) * C31224 +
                      (C47108 * C138 - C21367 * C127) * C31222 +
                      (C25975 - C25976) * C31225 + (C25977 - C25978) * C47481) *
                         C4577 +
                     ((C21479 - C21480) * C31224 + (C21481 - C21482) * C31222 +
                      C26465 * C31225 + C26466 * C47481) *
                         C47479) *
                        C47264 +
                    (((C25976 - C25975) * C31224 + (C25978 - C25977) * C31222 +
                      (C25979 - C25980) * C31225 + (C25981 - C25982) * C47481) *
                         C4577 +
                     (C26467 * C31224 + C26468 * C31222 + C26851 * C31225 +
                      C26852 * C47481) *
                         C47479) *
                        C47271 +
                    (((C25980 - C25979) * C31224 + (C25982 - C25981) * C31222 +
                      (C27695 - C27696) * C31225 + (C27697 - C27698) * C47481) *
                         C4577 +
                     (C26853 * C31224 + C26854 * C31222 + C28173 * C31225 +
                      C28174 * C47481) *
                         C47479) *
                        C3602) *
                       C47163 * C47140 +
                   ((((C21367 * C118 - C47108 * C125) * C31224 +
                      (C21367 * C128 - C47108 * C139) * C31222 +
                      (C25983 - C25984) * C31225 + (C25985 - C25986) * C47481) *
                         C4577 +
                     ((C21491 - C21492) * C31224 + (C21493 - C21494) * C31222 +
                      C26469 * C31225 + C26470 * C47481) *
                         C47479) *
                        C47264 +
                    (((C25984 - C25983) * C31224 + (C25986 - C25985) * C31222 +
                      (C25987 - C25988) * C31225 + (C25989 - C25990) * C47481) *
                         C4577 +
                     (C26471 * C31224 + C26472 * C31222 + C27901 * C31225 +
                      C27902 * C47481) *
                         C47479) *
                        C47271 +
                    (((C25988 - C25987) * C31224 + (C25990 - C25989) * C31222 +
                      (C28039 - C28040) * C31225 + (C28041 - C28042) * C47481) *
                         C4577 +
                     (C27903 * C31224 + C27904 * C31222 +
                      (C27905 - C27906) * C31225 + (C27907 - C27908) * C47481) *
                         C47479) *
                        C3602) *
                       C47163 * C47149 +
                   ((((C47108 * C126 - C21367 * C119) * C31224 +
                      (C47108 * C140 - C21367 * C129) * C31222 +
                      (C25991 - C25992) * C31225 + (C25993 - C25994) * C47481) *
                         C4577 +
                     ((C21503 - C21504) * C31224 + (C21505 - C21506) * C31222 +
                      C26473 * C31225 + C26474 * C47481) *
                         C47479) *
                        C47264 +
                    (((C25992 - C25991) * C31224 + (C25994 - C25993) * C31222 +
                      (C25995 - C25996) * C31225 + (C25997 - C25998) * C47481) *
                         C4577 +
                     (C26475 * C31224 + C26476 * C31222 +
                      (C25999 - C26000) * C31225 + (C26001 - C26002) * C47481) *
                         C47479) *
                        C47271 +
                    (((C25996 - C25995) * C31224 + (C25998 - C25997) * C31222 +
                      (C47108 * C1852 - C21367 * C1846) * C31225 +
                      (C47108 * C1864 - C21367 * C1855) * C47481) *
                         C4577 +
                     ((C26000 - C25999) * C31224 + (C26002 - C26001) * C31222 +
                      (C47108 * C2227 - C21367 * C2224) * C31225 +
                      (C47108 * C2233 - C21367 * C2230) * C47481) *
                         C47479) *
                        C3602) *
                       C47163 * C2703)) /
                 (p * q * std::sqrt(p + q));
    d2ee[194] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C47108 * C124 - C21367 * C117) * C31224 +
             (C47108 * C138 - C21367 * C127) * C31222 +
             (C25975 - C25976) * C31225 + (C25977 - C25978) * C47481) *
                C4577 +
            ((C21479 - C21480) * C31224 + (C21481 - C21482) * C31222 +
             C26465 * C31225 + C26466 * C47481) *
                C47479) *
               C3094 +
           (((C25976 - C25975) * C31224 + (C25978 - C25977) * C31222 +
             (C25979 - C25980) * C31225 + (C25981 - C25982) * C47481) *
                C4577 +
            (C26467 * C31224 + C26468 * C31222 + C26851 * C31225 +
             C26852 * C47481) *
                C47479) *
               C47268) *
              C47163 * C47506 +
          ((((C21367 * C118 - C47108 * C125) * C31224 +
             (C21367 * C128 - C47108 * C139) * C31222 +
             (C25983 - C25984) * C31225 + (C25985 - C25986) * C47481) *
                C4577 +
            ((C21491 - C21492) * C31224 + (C21493 - C21494) * C31222 +
             C26469 * C31225 + C26470 * C47481) *
                C47479) *
               C3094 +
           (((C25984 - C25983) * C31224 + (C25986 - C25985) * C31222 +
             (C25987 - C25988) * C31225 + (C25989 - C25990) * C47481) *
                C4577 +
            (C26471 * C31224 + C26472 * C31222 + C27901 * C31225 +
             C27902 * C47481) *
                C47479) *
               C47268) *
              C47163 * C47499 +
          ((((C47108 * C126 - C21367 * C119) * C31224 +
             (C47108 * C140 - C21367 * C129) * C31222 +
             (C25991 - C25992) * C31225 + (C25993 - C25994) * C47481) *
                C4577 +
            ((C21503 - C21504) * C31224 + (C21505 - C21506) * C31222 +
             C26473 * C31225 + C26474 * C47481) *
                C47479) *
               C3094 +
           (((C25992 - C25991) * C31224 + (C25994 - C25993) * C31222 +
             (C25995 - C25996) * C31225 + (C25997 - C25998) * C47481) *
                C4577 +
            (C26475 * C31224 + C26476 * C31222 + (C25999 - C26000) * C31225 +
             (C26001 - C26002) * C47481) *
                C47479) *
               C47268) *
              C47163 * C47486 +
          ((((C21367 * C120 - C47108 * C130) * C31224 +
             (C21367 * C131 - C47108 * C141) * C31222 +
             (C26267 - C26268) * C31225 + (C26269 - C26270) * C47481) *
                C4577 +
            ((C21738 - C21739) * C31224 + (C21740 - C21741) * C31222 +
             (C26133 - C26134) * C31225 + (C26135 - C26136) * C47481) *
                C47479) *
               C3094 +
           (((C26268 - C26267) * C31224 + (C26270 - C26269) * C31222 +
             (C47108 * C438 - C21367 * C421) * C31225 +
             (C47108 * C451 - C21367 * C439) * C47481) *
                C4577 +
            ((C26134 - C26133) * C31224 + (C26136 - C26135) * C31222 +
             (C47108 * C2015 - C21367 * C2014) * C31225 +
             (C47108 * C2017 - C21367 * C2016) * C47481) *
                C47479) *
               C47268) *
              C47163 * C47465)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C47108 * C124 - C21367 * C117) * C31224 +
              (C47108 * C138 - C21367 * C127) * C31222 +
              (C25975 - C25976) * C31225 + (C25977 - C25978) * C47481) *
                 C4577 +
             ((C21479 - C21480) * C31224 + (C21481 - C21482) * C31222 +
              C26465 * C31225 + C26466 * C47481) *
                 C47479) *
                C3094 +
            (((C25976 - C25975) * C31224 + (C25978 - C25977) * C31222 +
              (C25979 - C25980) * C31225 + (C25981 - C25982) * C47481) *
                 C4577 +
             (C26467 * C31224 + C26468 * C31222 + C26851 * C31225 +
              C26852 * C47481) *
                 C47479) *
                C47268) *
               C47500 +
           ((((C21480 - C21479) * C31224 + (C21482 - C21481) * C31222 +
              C26467 * C31225 + C26468 * C47481) *
                 C4577 +
             ((C21484 - C21483) * C31224 + (C21486 - C21485) * C31222 +
              C22322 * C31225 + C22323 * C47481) *
                 C47479) *
                C3094 +
            ((C26465 * C31224 + C26466 * C31222 + C26853 * C31225 +
              C26854 * C47481) *
                 C4577 +
             (C26855 * C31224 + C26856 * C31222 + C22342 * C31225 +
              C22343 * C47481) *
                 C47479) *
                C47268) *
               C47488 +
           (((C21515 * C31224 + C21516 * C31222 + C26855 * C31225 +
              C26856 * C47481) *
                 C4577 +
             ((C21488 - C21487) * C31224 + (C21490 - C21489) * C31222 +
              C22712 * C31225 + C22713 * C47481) *
                 C47479) *
                C3094 +
            ((C22322 * C31224 + C22323 * C31222 + C26857 * C31225 +
              C26858 * C47481) *
                 C4577 +
             (C27315 * C31224 + C27316 * C31222 + (C22336 - C22337) * C31225 +
              (C22338 - C22339) * C47481) *
                 C47479) *
                C47268) *
               C47461) *
              C2440 +
          (((((C21367 * C118 - C47108 * C125) * C31224 +
              (C21367 * C128 - C47108 * C139) * C31222 +
              (C25983 - C25984) * C31225 + (C25985 - C25986) * C47481) *
                 C4577 +
             ((C21491 - C21492) * C31224 + (C21493 - C21494) * C31222 +
              C26469 * C31225 + C26470 * C47481) *
                 C47479) *
                C3094 +
            (((C25984 - C25983) * C31224 + (C25986 - C25985) * C31222 +
              (C25987 - C25988) * C31225 + (C25989 - C25990) * C47481) *
                 C4577 +
             (C26471 * C31224 + C26472 * C31222 + C27901 * C31225 +
              C27902 * C47481) *
                 C47479) *
                C47268) *
               C47500 +
           ((((C21492 - C21491) * C31224 + (C21494 - C21493) * C31222 +
              C26471 * C31225 + C26472 * C47481) *
                 C4577 +
             ((C21496 - C21495) * C31224 + (C21498 - C21497) * C31222 +
              C22601 * C31225 + C22602 * C47481) *
                 C47479) *
                C3094 +
            ((C26469 * C31224 + C26470 * C31222 + C27903 * C31225 +
              C27904 * C47481) *
                 C4577 +
             (C27183 * C31224 + C27184 * C31222 + (C23157 - C23158) * C31225 +
              (C23159 - C23160) * C47481) *
                 C47479) *
                C47268) *
               C47488 +
           (((C21517 * C31224 + C21518 * C31222 + C27183 * C31225 +
              C27184 * C47481) *
                 C4577 +
             ((C21500 - C21499) * C31224 + (C21502 - C21501) * C31222 +
              (C22603 - C22604) * C31225 + (C22605 - C22606) * C47481) *
                 C47479) *
                C3094 +
            ((C22601 * C31224 + C22602 * C31222 + (C23158 - C23157) * C31225 +
              (C23160 - C23159) * C47481) *
                 C4577 +
             ((C22604 - C22603) * C31224 + (C22606 - C22605) * C31222 +
              (C47108 * C5808 - C21367 * C5806) * C31225 +
              (C47108 * C5812 - C21367 * C5810) * C47481) *
                 C47479) *
                C47268) *
               C47461) *
              C47146)) /
            (p * q * std::sqrt(p + q));
    d2ee[195] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((((C47108 * C124 - C21367 * C117) * C31224 +
                      (C47108 * C138 - C21367 * C127) * C31222 +
                      (C25975 - C25976) * C31225 + (C25977 - C25978) * C47481) *
                         C4577 +
                     ((C21479 - C21480) * C31224 + (C21481 - C21482) * C31222 +
                      C26465 * C31225 + C26466 * C47481) *
                         C47479) *
                        C47181 * C47429 +
                    (((C21480 - C21479) * C31224 + (C21482 - C21481) * C31222 +
                      C26467 * C31225 + C26468 * C47481) *
                         C4577 +
                     ((C21484 - C21483) * C31224 + (C21486 - C21485) * C31222 +
                      C22322 * C31225 + C22323 * C47481) *
                         C47479) *
                        C47181 * C47226) *
                       C554 +
                   ((((C21367 * C118 - C47108 * C125) * C31224 +
                      (C21367 * C128 - C47108 * C139) * C31222 +
                      (C25983 - C25984) * C31225 + (C25985 - C25986) * C47481) *
                         C4577 +
                     ((C21491 - C21492) * C31224 + (C21493 - C21494) * C31222 +
                      C26469 * C31225 + C26470 * C47481) *
                         C47479) *
                        C47181 * C47429 +
                    (((C21492 - C21491) * C31224 + (C21494 - C21493) * C31222 +
                      C26471 * C31225 + C26472 * C47481) *
                         C4577 +
                     ((C21496 - C21495) * C31224 + (C21498 - C21497) * C31222 +
                      C22601 * C31225 + C22602 * C47481) *
                         C47479) *
                        C47181 * C47226) *
                       C555 +
                   ((((C47108 * C126 - C21367 * C119) * C31224 +
                      (C47108 * C140 - C21367 * C129) * C31222 +
                      (C25991 - C25992) * C31225 + (C25993 - C25994) * C47481) *
                         C4577 +
                     ((C21503 - C21504) * C31224 + (C21505 - C21506) * C31222 +
                      C26473 * C31225 + C26474 * C47481) *
                         C47479) *
                        C47181 * C47429 +
                    (((C21504 - C21503) * C31224 + (C21506 - C21505) * C31222 +
                      C26475 * C31225 + C26476 * C47481) *
                         C4577 +
                     ((C21508 - C21507) * C31224 + (C21510 - C21509) * C31222 +
                      (C22010 - C22011) * C31225 + (C22012 - C22013) * C47481) *
                         C47479) *
                        C47181 * C47226) *
                       C556 +
                   ((((C21367 * C120 - C47108 * C130) * C31224 +
                      (C21367 * C131 - C47108 * C141) * C31222 +
                      (C26267 - C26268) * C31225 + (C26269 - C26270) * C47481) *
                         C4577 +
                     ((C21738 - C21739) * C31224 + (C21740 - C21741) * C31222 +
                      (C26133 - C26134) * C31225 + (C26135 - C26136) * C47481) *
                         C47479) *
                        C47181 * C47429 +
                    (((C21739 - C21738) * C31224 + (C21741 - C21740) * C31222 +
                      (C26134 - C26133) * C31225 + (C26136 - C26135) * C47481) *
                         C4577 +
                     ((C21743 - C21742) * C31224 + (C21745 - C21744) * C31222 +
                      (C47108 * C1441 - C21367 * C1440) * C31225 +
                      (C47108 * C1443 - C21367 * C1442) * C47481) *
                         C47479) *
                        C47181 * C47226) *
                       C47465)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((((C47108 * C124 - C21367 * C117) * C31224 +
                      (C47108 * C138 - C21367 * C127) * C31222 +
                      (C25975 - C25976) * C31225 + (C25977 - C25978) * C47481) *
                         C4577 +
                     ((C21479 - C21480) * C31224 + (C21481 - C21482) * C31222 +
                      C26465 * C31225 + C26466 * C47481) *
                         C47479) *
                        C47181 * C1284 +
                    (((C21480 - C21479) * C31224 + (C21482 - C21481) * C31222 +
                      C26467 * C31225 + C26468 * C47481) *
                         C4577 +
                     ((C21484 - C21483) * C31224 + (C21486 - C21485) * C31222 +
                      C22322 * C31225 + C22323 * C47481) *
                         C47479) *
                        C47181 * C1285 +
                    ((C21515 * C31224 + C21516 * C31222 + C26855 * C31225 +
                      C26856 * C47481) *
                         C4577 +
                     ((C21488 - C21487) * C31224 + (C21490 - C21489) * C31222 +
                      C22712 * C31225 + C22713 * C47481) *
                         C47479) *
                        C47181 * C1286 +
                    ((C22190 * C31224 + C22191 * C31222 + C27315 * C31225 +
                      C27316 * C47481) *
                         C4577 +
                     ((C22193 - C22192) * C31224 + (C22195 - C22194) * C31222 +
                      (C22714 - C22715) * C31225 + (C22716 - C22717) * C47481) *
                         C47479) *
                        C47181 * C47471) *
                       C47415 +
                   ((((C21367 * C118 - C47108 * C125) * C31224 +
                      (C21367 * C128 - C47108 * C139) * C31222 +
                      (C25983 - C25984) * C31225 + (C25985 - C25986) * C47481) *
                         C4577 +
                     ((C21491 - C21492) * C31224 + (C21493 - C21494) * C31222 +
                      C26469 * C31225 + C26470 * C47481) *
                         C47479) *
                        C47181 * C1284 +
                    (((C21492 - C21491) * C31224 + (C21494 - C21493) * C31222 +
                      C26471 * C31225 + C26472 * C47481) *
                         C4577 +
                     ((C21496 - C21495) * C31224 + (C21498 - C21497) * C31222 +
                      C22601 * C31225 + C22602 * C47481) *
                         C47479) *
                        C47181 * C1285 +
                    ((C21517 * C31224 + C21518 * C31222 + C27183 * C31225 +
                      C27184 * C47481) *
                         C4577 +
                     ((C21500 - C21499) * C31224 + (C21502 - C21501) * C31222 +
                      (C22603 - C22604) * C31225 + (C22605 - C22606) * C47481) *
                         C47479) *
                        C47181 * C1286 +
                    ((C22446 * C31224 + C22447 * C31222 +
                      (C22604 - C22603) * C31225 + (C22606 - C22605) * C47481) *
                         C4577 +
                     ((C22449 - C22448) * C31224 + (C22451 - C22450) * C31222 +
                      (C47108 * C6310 - C21367 * C6308) * C31225 +
                      (C47108 * C6314 - C21367 * C6312) * C47481) *
                         C47479) *
                        C47181 * C47471) *
                       C47146)) /
                     (p * q * std::sqrt(p + q));
    d2ee[196] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C47108 * C124 - C21367 * C117) * C31224 +
              (C47108 * C138 - C21367 * C127) * C31222 +
              (C25975 - C25976) * C31225 + (C25977 - C25978) * C47481) *
                 C4577 +
             ((C21479 - C21480) * C31224 + (C21481 - C21482) * C31222 +
              C26465 * C31225 + C26466 * C47481) *
                 C47479) *
                C47430 +
            (((C25976 - C25975) * C31224 + (C25978 - C25977) * C31222 +
              (C25979 - C25980) * C31225 + (C25981 - C25982) * C47481) *
                 C4577 +
             (C26467 * C31224 + C26468 * C31222 + C26851 * C31225 +
              C26852 * C47481) *
                 C47479) *
                C47268) *
               C47429 +
           ((((C21480 - C21479) * C31224 + (C21482 - C21481) * C31222 +
              C26467 * C31225 + C26468 * C47481) *
                 C4577 +
             ((C21484 - C21483) * C31224 + (C21486 - C21485) * C31222 +
              C22322 * C31225 + C22323 * C47481) *
                 C47479) *
                C47430 +
            ((C26465 * C31224 + C26466 * C31222 + C26853 * C31225 +
              C26854 * C47481) *
                 C4577 +
             (C26855 * C31224 + C26856 * C31222 + C22342 * C31225 +
              C22343 * C47481) *
                 C47479) *
                C47268) *
               C47226) *
              C258 +
          (((((C21367 * C118 - C47108 * C125) * C31224 +
              (C21367 * C128 - C47108 * C139) * C31222 +
              (C25983 - C25984) * C31225 + (C25985 - C25986) * C47481) *
                 C4577 +
             ((C21491 - C21492) * C31224 + (C21493 - C21494) * C31222 +
              C26469 * C31225 + C26470 * C47481) *
                 C47479) *
                C47430 +
            (((C25984 - C25983) * C31224 + (C25986 - C25985) * C31222 +
              (C25987 - C25988) * C31225 + (C25989 - C25990) * C47481) *
                 C4577 +
             (C26471 * C31224 + C26472 * C31222 + C27901 * C31225 +
              C27902 * C47481) *
                 C47479) *
                C47268) *
               C47429 +
           ((((C21492 - C21491) * C31224 + (C21494 - C21493) * C31222 +
              C26471 * C31225 + C26472 * C47481) *
                 C4577 +
             ((C21496 - C21495) * C31224 + (C21498 - C21497) * C31222 +
              C22601 * C31225 + C22602 * C47481) *
                 C47479) *
                C47430 +
            ((C26469 * C31224 + C26470 * C31222 + C27903 * C31225 +
              C27904 * C47481) *
                 C4577 +
             (C27183 * C31224 + C27184 * C31222 + (C23157 - C23158) * C31225 +
              (C23159 - C23160) * C47481) *
                 C47479) *
                C47268) *
               C47226) *
              C259 +
          (((((C47108 * C126 - C21367 * C119) * C31224 +
              (C47108 * C140 - C21367 * C129) * C31222 +
              (C25991 - C25992) * C31225 + (C25993 - C25994) * C47481) *
                 C4577 +
             ((C21503 - C21504) * C31224 + (C21505 - C21506) * C31222 +
              C26473 * C31225 + C26474 * C47481) *
                 C47479) *
                C47430 +
            (((C25992 - C25991) * C31224 + (C25994 - C25993) * C31222 +
              (C25995 - C25996) * C31225 + (C25997 - C25998) * C47481) *
                 C4577 +
             (C26475 * C31224 + C26476 * C31222 + (C25999 - C26000) * C31225 +
              (C26001 - C26002) * C47481) *
                 C47479) *
                C47268) *
               C47429 +
           ((((C21504 - C21503) * C31224 + (C21506 - C21505) * C31222 +
              C26475 * C31225 + C26476 * C47481) *
                 C4577 +
             ((C21508 - C21507) * C31224 + (C21510 - C21509) * C31222 +
              (C22010 - C22011) * C31225 + (C22012 - C22013) * C47481) *
                 C47479) *
                C47430 +
            ((C26473 * C31224 + C26474 * C31222 + (C26000 - C25999) * C31225 +
              (C26002 - C26001) * C47481) *
                 C4577 +
             ((C22011 - C22010) * C31224 + (C22013 - C22012) * C31222 +
              (C47108 * C1173 - C21367 * C1158) * C31225 +
              (C47108 * C1185 - C21367 * C1176) * C47481) *
                 C47479) *
                C47268) *
               C47226) *
              C47455)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C47108 * C124 - C21367 * C117) * C31224 +
             (C47108 * C138 - C21367 * C127) * C31222 +
             (C25975 - C25976) * C31225 + (C25977 - C25978) * C47481) *
                C4577 +
            ((C21479 - C21480) * C31224 + (C21481 - C21482) * C31222 +
             C26465 * C31225 + C26466 * C47481) *
                C47479) *
               C47430 +
           (((C25976 - C25975) * C31224 + (C25978 - C25977) * C31222 +
             (C25979 - C25980) * C31225 + (C25981 - C25982) * C47481) *
                C4577 +
            (C26467 * C31224 + C26468 * C31222 + C26851 * C31225 +
             C26852 * C47481) *
                C47479) *
               C47268) *
              C1284 +
          ((((C21480 - C21479) * C31224 + (C21482 - C21481) * C31222 +
             C26467 * C31225 + C26468 * C47481) *
                C4577 +
            ((C21484 - C21483) * C31224 + (C21486 - C21485) * C31222 +
             C22322 * C31225 + C22323 * C47481) *
                C47479) *
               C47430 +
           ((C26465 * C31224 + C26466 * C31222 + C26853 * C31225 +
             C26854 * C47481) *
                C4577 +
            (C26855 * C31224 + C26856 * C31222 + C22342 * C31225 +
             C22343 * C47481) *
                C47479) *
               C47268) *
              C1285 +
          (((C21515 * C31224 + C21516 * C31222 + C26855 * C31225 +
             C26856 * C47481) *
                C4577 +
            ((C21488 - C21487) * C31224 + (C21490 - C21489) * C31222 +
             C22712 * C31225 + C22713 * C47481) *
                C47479) *
               C47430 +
           ((C22322 * C31224 + C22323 * C31222 + C26857 * C31225 +
             C26858 * C47481) *
                C4577 +
            (C27315 * C31224 + C27316 * C31222 + (C22336 - C22337) * C31225 +
             (C22338 - C22339) * C47481) *
                C47479) *
               C47268) *
              C1286 +
          (((C22190 * C31224 + C22191 * C31222 + C27315 * C31225 +
             C27316 * C47481) *
                C4577 +
            ((C22193 - C22192) * C31224 + (C22195 - C22194) * C31222 +
             (C22714 - C22715) * C31225 + (C22716 - C22717) * C47481) *
                C47479) *
               C47430 +
           ((C22712 * C31224 + C22713 * C31222 + (C22337 - C22336) * C31225 +
             (C22339 - C22338) * C47481) *
                C4577 +
            ((C22715 - C22714) * C31224 + (C22717 - C22716) * C31222 +
             (C47108 * C22318 - C21367 * C22317) * C31225 +
             (C47108 * C22320 - C21367 * C22319) * C47481) *
                C47479) *
               C47268) *
              C47471) *
         C47135) /
            (p * q * std::sqrt(p + q));
    d2ee[197] += (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  (((((C47108 * C124 - C21367 * C117) * C31224 +
                      (C47108 * C138 - C21367 * C127) * C31222 +
                      (C25975 - C25976) * C31225 + (C25977 - C25978) * C47481) *
                         C4577 +
                     ((C21479 - C21480) * C31224 + (C21481 - C21482) * C31222 +
                      C26465 * C31225 + C26466 * C47481) *
                         C47479) *
                        C47181 * C47500 +
                    (((C21480 - C21479) * C31224 + (C21482 - C21481) * C31222 +
                      C26467 * C31225 + C26468 * C47481) *
                         C4577 +
                     ((C21484 - C21483) * C31224 + (C21486 - C21485) * C31222 +
                      C22322 * C31225 + C22323 * C47481) *
                         C47479) *
                        C47181 * C47488 +
                    ((C21515 * C31224 + C21516 * C31222 + C26855 * C31225 +
                      C26856 * C47481) *
                         C4577 +
                     ((C21488 - C21487) * C31224 + (C21490 - C21489) * C31222 +
                      C22712 * C31225 + C22713 * C47481) *
                         C47479) *
                        C47181 * C47461) *
                       C258 +
                   ((((C21367 * C118 - C47108 * C125) * C31224 +
                      (C21367 * C128 - C47108 * C139) * C31222 +
                      (C25983 - C25984) * C31225 + (C25985 - C25986) * C47481) *
                         C4577 +
                     ((C21491 - C21492) * C31224 + (C21493 - C21494) * C31222 +
                      C26469 * C31225 + C26470 * C47481) *
                         C47479) *
                        C47181 * C47500 +
                    (((C21492 - C21491) * C31224 + (C21494 - C21493) * C31222 +
                      C26471 * C31225 + C26472 * C47481) *
                         C4577 +
                     ((C21496 - C21495) * C31224 + (C21498 - C21497) * C31222 +
                      C22601 * C31225 + C22602 * C47481) *
                         C47479) *
                        C47181 * C47488 +
                    ((C21517 * C31224 + C21518 * C31222 + C27183 * C31225 +
                      C27184 * C47481) *
                         C4577 +
                     ((C21500 - C21499) * C31224 + (C21502 - C21501) * C31222 +
                      (C22603 - C22604) * C31225 + (C22605 - C22606) * C47481) *
                         C47479) *
                        C47181 * C47461) *
                       C259 +
                   ((((C47108 * C126 - C21367 * C119) * C31224 +
                      (C47108 * C140 - C21367 * C129) * C31222 +
                      (C25991 - C25992) * C31225 + (C25993 - C25994) * C47481) *
                         C4577 +
                     ((C21503 - C21504) * C31224 + (C21505 - C21506) * C31222 +
                      C26473 * C31225 + C26474 * C47481) *
                         C47479) *
                        C47181 * C47500 +
                    (((C21504 - C21503) * C31224 + (C21506 - C21505) * C31222 +
                      C26475 * C31225 + C26476 * C47481) *
                         C4577 +
                     ((C21508 - C21507) * C31224 + (C21510 - C21509) * C31222 +
                      (C22010 - C22011) * C31225 + (C22012 - C22013) * C47481) *
                         C47479) *
                        C47181 * C47488 +
                    ((C21519 * C31224 + C21520 * C31222 +
                      (C22011 - C22010) * C31225 + (C22013 - C22012) * C47481) *
                         C4577 +
                     ((C21512 - C21511) * C31224 + (C21514 - C21513) * C31222 +
                      (C47108 * C1547 - C21367 * C1544) * C31225 +
                      (C47108 * C1553 - C21367 * C1550) * C47481) *
                         C47479) *
                        C47181 * C47461) *
                       C47455)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  ((((C47108 * C124 - C21367 * C117) * C31224 +
                     (C47108 * C138 - C21367 * C127) * C31222 +
                     (C25975 - C25976) * C31225 + (C25977 - C25978) * C47481) *
                        C4577 +
                    ((C21479 - C21480) * C31224 + (C21481 - C21482) * C31222 +
                     C26465 * C31225 + C26466 * C47481) *
                        C47479) *
                       C47181 * C47163 * C108 +
                   (((C21367 * C118 - C47108 * C125) * C31224 +
                     (C21367 * C128 - C47108 * C139) * C31222 +
                     (C25983 - C25984) * C31225 + (C25985 - C25986) * C47481) *
                        C4577 +
                    ((C21491 - C21492) * C31224 + (C21493 - C21494) * C31222 +
                     C26469 * C31225 + C26470 * C47481) *
                        C47479) *
                       C47181 * C47163 * C109 +
                   (((C47108 * C126 - C21367 * C119) * C31224 +
                     (C47108 * C140 - C21367 * C129) * C31222 +
                     (C25991 - C25992) * C31225 + (C25993 - C25994) * C47481) *
                        C4577 +
                    ((C21503 - C21504) * C31224 + (C21505 - C21506) * C31222 +
                     C26473 * C31225 + C26474 * C47481) *
                        C47479) *
                       C47181 * C47163 * C110 +
                   (((C21367 * C120 - C47108 * C130) * C31224 +
                     (C21367 * C131 - C47108 * C141) * C31222 +
                     (C26267 - C26268) * C31225 + (C26269 - C26270) * C47481) *
                        C4577 +
                    ((C21738 - C21739) * C31224 + (C21740 - C21741) * C31222 +
                     (C26133 - C26134) * C31225 + (C26135 - C26136) * C47481) *
                        C47479) *
                       C47181 * C47163 * C111 +
                   (((C47108 * C132 - C21367 * C121) * C31224 +
                     (C47108 * C142 - C21367 * C133) * C31222 +
                     (C47108 * C440 - C21367 * C422) * C31225 +
                     (C47108 * C452 - C21367 * C441) * C47481) *
                        C4577 +
                    ((C47108 * C287 - C21367 * C269) * C31224 +
                     (C47108 * C299 - C21367 * C288) * C31222 +
                     (C47108 * C825 - C21367 * C816) * C31225 +
                     (C47108 * C831 - C21367 * C826) * C47481) *
                        C47479) *
                       C47181 * C47163 * C112)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((((C47108 * C124 - C21367 * C117) * C31224 +
                      (C47108 * C138 - C21367 * C127) * C31222 +
                      (C25975 - C25976) * C31225 + (C25977 - C25978) * C47481) *
                         C4577 +
                     ((C21479 - C21480) * C31224 + (C21481 - C21482) * C31222 +
                      C26465 * C31225 + C26466 * C47481) *
                         C47479) *
                        C47501 +
                    (((C25976 - C25975) * C31224 + (C25978 - C25977) * C31222 +
                      (C25979 - C25980) * C31225 + (C25981 - C25982) * C47481) *
                         C4577 +
                     (C26467 * C31224 + C26468 * C31222 + C26851 * C31225 +
                      C26852 * C47481) *
                         C47479) *
                        C47490 +
                    (((C25980 - C25979) * C31224 + (C25982 - C25981) * C31222 +
                      (C27695 - C27696) * C31225 + (C27697 - C27698) * C47481) *
                         C4577 +
                     (C26853 * C31224 + C26854 * C31222 + C28173 * C31225 +
                      C28174 * C47481) *
                         C47479) *
                        C47464) *
                       C47163 * C258 +
                   ((((C21367 * C118 - C47108 * C125) * C31224 +
                      (C21367 * C128 - C47108 * C139) * C31222 +
                      (C25983 - C25984) * C31225 + (C25985 - C25986) * C47481) *
                         C4577 +
                     ((C21491 - C21492) * C31224 + (C21493 - C21494) * C31222 +
                      C26469 * C31225 + C26470 * C47481) *
                         C47479) *
                        C47501 +
                    (((C25984 - C25983) * C31224 + (C25986 - C25985) * C31222 +
                      (C25987 - C25988) * C31225 + (C25989 - C25990) * C47481) *
                         C4577 +
                     (C26471 * C31224 + C26472 * C31222 + C27901 * C31225 +
                      C27902 * C47481) *
                         C47479) *
                        C47490 +
                    (((C25988 - C25987) * C31224 + (C25990 - C25989) * C31222 +
                      (C28039 - C28040) * C31225 + (C28041 - C28042) * C47481) *
                         C4577 +
                     (C27903 * C31224 + C27904 * C31222 +
                      (C27905 - C27906) * C31225 + (C27907 - C27908) * C47481) *
                         C47479) *
                        C47464) *
                       C47163 * C259 +
                   ((((C47108 * C126 - C21367 * C119) * C31224 +
                      (C47108 * C140 - C21367 * C129) * C31222 +
                      (C25991 - C25992) * C31225 + (C25993 - C25994) * C47481) *
                         C4577 +
                     ((C21503 - C21504) * C31224 + (C21505 - C21506) * C31222 +
                      C26473 * C31225 + C26474 * C47481) *
                         C47479) *
                        C47501 +
                    (((C25992 - C25991) * C31224 + (C25994 - C25993) * C31222 +
                      (C25995 - C25996) * C31225 + (C25997 - C25998) * C47481) *
                         C4577 +
                     (C26475 * C31224 + C26476 * C31222 +
                      (C25999 - C26000) * C31225 + (C26001 - C26002) * C47481) *
                         C47479) *
                        C47490 +
                    (((C25996 - C25995) * C31224 + (C25998 - C25997) * C31222 +
                      (C47108 * C1852 - C21367 * C1846) * C31225 +
                      (C47108 * C1864 - C21367 * C1855) * C47481) *
                         C4577 +
                     ((C26000 - C25999) * C31224 + (C26002 - C26001) * C31222 +
                      (C47108 * C2227 - C21367 * C2224) * C31225 +
                      (C47108 * C2233 - C21367 * C2230) * C47481) *
                         C47479) *
                        C47464) *
                       C47163 * C47455)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  (((((C47108 * C124 - C21367 * C117) * C31224 +
                      (C47108 * C138 - C21367 * C127) * C31222 +
                      (C25975 - C25976) * C31225 + (C25977 - C25978) * C47481) *
                         C4577 +
                     ((C21479 - C21480) * C31224 + (C21481 - C21482) * C31222 +
                      C26465 * C31225 + C26466 * C47481) *
                         C47479) *
                        C47181 * C942 +
                    (((C21480 - C21479) * C31224 + (C21482 - C21481) * C31222 +
                      C26467 * C31225 + C26468 * C47481) *
                         C4577 +
                     ((C21484 - C21483) * C31224 + (C21486 - C21485) * C31222 +
                      C22322 * C31225 + C22323 * C47481) *
                         C47479) *
                        C47181 * C943 +
                    ((C21515 * C31224 + C21516 * C31222 + C26855 * C31225 +
                      C26856 * C47481) *
                         C4577 +
                     ((C21488 - C21487) * C31224 + (C21490 - C21489) * C31222 +
                      C22712 * C31225 + C22713 * C47481) *
                         C47479) *
                        C47181 * C47461) *
                       C47497 +
                   ((((C21367 * C118 - C47108 * C125) * C31224 +
                      (C21367 * C128 - C47108 * C139) * C31222 +
                      (C25983 - C25984) * C31225 + (C25985 - C25986) * C47481) *
                         C4577 +
                     ((C21491 - C21492) * C31224 + (C21493 - C21494) * C31222 +
                      C26469 * C31225 + C26470 * C47481) *
                         C47479) *
                        C47181 * C942 +
                    (((C21492 - C21491) * C31224 + (C21494 - C21493) * C31222 +
                      C26471 * C31225 + C26472 * C47481) *
                         C4577 +
                     ((C21496 - C21495) * C31224 + (C21498 - C21497) * C31222 +
                      C22601 * C31225 + C22602 * C47481) *
                         C47479) *
                        C47181 * C943 +
                    ((C21517 * C31224 + C21518 * C31222 + C27183 * C31225 +
                      C27184 * C47481) *
                         C4577 +
                     ((C21500 - C21499) * C31224 + (C21502 - C21501) * C31222 +
                      (C22603 - C22604) * C31225 + (C22605 - C22606) * C47481) *
                         C47479) *
                        C47181 * C47461) *
                       C47484 +
                   ((((C47108 * C126 - C21367 * C119) * C31224 +
                      (C47108 * C140 - C21367 * C129) * C31222 +
                      (C25991 - C25992) * C31225 + (C25993 - C25994) * C47481) *
                         C4577 +
                     ((C21503 - C21504) * C31224 + (C21505 - C21506) * C31222 +
                      C26473 * C31225 + C26474 * C47481) *
                         C47479) *
                        C47181 * C942 +
                    (((C21504 - C21503) * C31224 + (C21506 - C21505) * C31222 +
                      C26475 * C31225 + C26476 * C47481) *
                         C4577 +
                     ((C21508 - C21507) * C31224 + (C21510 - C21509) * C31222 +
                      (C22010 - C22011) * C31225 + (C22012 - C22013) * C47481) *
                         C47479) *
                        C47181 * C943 +
                    ((C21519 * C31224 + C21520 * C31222 +
                      (C22011 - C22010) * C31225 + (C22013 - C22012) * C47481) *
                         C4577 +
                     ((C21512 - C21511) * C31224 + (C21514 - C21513) * C31222 +
                      (C47108 * C1547 - C21367 * C1544) * C31225 +
                      (C47108 * C1553 - C21367 * C1550) * C47481) *
                         C47479) *
                        C47181 * C47461) *
                       C47455)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  ((((C47108 * C124 - C21367 * C117) * C31224 +
                     (C47108 * C138 - C21367 * C127) * C31222 +
                     (C25975 - C25976) * C31225 + (C25977 - C25978) * C47481) *
                        C4577 +
                    ((C21479 - C21480) * C31224 + (C21481 - C21482) * C31222 +
                     C26465 * C31225 + C26466 * C47481) *
                        C47479) *
                       C47181 * C1010 +
                   (((C21480 - C21479) * C31224 + (C21482 - C21481) * C31222 +
                     C26467 * C31225 + C26468 * C47481) *
                        C4577 +
                    ((C21484 - C21483) * C31224 + (C21486 - C21485) * C31222 +
                     C22322 * C31225 + C22323 * C47481) *
                        C47479) *
                       C47181 * C1011 +
                   ((C21515 * C31224 + C21516 * C31222 + C26855 * C31225 +
                     C26856 * C47481) *
                        C4577 +
                    ((C21488 - C21487) * C31224 + (C21490 - C21489) * C31222 +
                     C22712 * C31225 + C22713 * C47481) *
                        C47479) *
                       C47181 * C1012 +
                   ((C22190 * C31224 + C22191 * C31222 + C27315 * C31225 +
                     C27316 * C47481) *
                        C4577 +
                    ((C22193 - C22192) * C31224 + (C22195 - C22194) * C31222 +
                     (C22714 - C22715) * C31225 + (C22716 - C22717) * C47481) *
                        C47479) *
                       C47181 * C1013 +
                   ((C22202 * C31224 + C22203 * C31222 +
                     (C22715 - C22714) * C31225 + (C22717 - C22716) * C47481) *
                        C4577 +
                    ((C22197 - C22196) * C31224 + (C22199 - C22198) * C31222 +
                     (C47108 * C22708 - C21367 * C22707) * C31225 +
                     (C47108 * C22710 - C21367 * C22709) * C47481) *
                        C47479) *
                       C47181 * C1014) *
                  C47135) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((((C47108 * C124 - C21367 * C117) * C31224 +
                      (C47108 * C138 - C21367 * C127) * C31222 +
                      (C25975 - C25976) * C31225 + (C25977 - C25978) * C47481) *
                         C4577 +
                     ((C21479 - C21480) * C31224 + (C21481 - C21482) * C31222 +
                      C26465 * C31225 + C26466 * C47481) *
                         C47479) *
                        C47501 +
                    (((C25976 - C25975) * C31224 + (C25978 - C25977) * C31222 +
                      (C25979 - C25980) * C31225 + (C25981 - C25982) * C47481) *
                         C4577 +
                     (C26467 * C31224 + C26468 * C31222 + C26851 * C31225 +
                      C26852 * C47481) *
                         C47479) *
                        C47490 +
                    (((C25980 - C25979) * C31224 + (C25982 - C25981) * C31222 +
                      (C27695 - C27696) * C31225 + (C27697 - C27698) * C47481) *
                         C4577 +
                     (C26853 * C31224 + C26854 * C31222 + C28173 * C31225 +
                      C28174 * C47481) *
                         C47479) *
                        C47464) *
                       C942 +
                   ((((C21480 - C21479) * C31224 + (C21482 - C21481) * C31222 +
                      C26467 * C31225 + C26468 * C47481) *
                         C4577 +
                     ((C21484 - C21483) * C31224 + (C21486 - C21485) * C31222 +
                      C22322 * C31225 + C22323 * C47481) *
                         C47479) *
                        C47501 +
                    ((C26465 * C31224 + C26466 * C31222 + C26853 * C31225 +
                      C26854 * C47481) *
                         C4577 +
                     (C26855 * C31224 + C26856 * C31222 + C22342 * C31225 +
                      C22343 * C47481) *
                         C47479) *
                        C47490 +
                    ((C26851 * C31224 + C26852 * C31222 + C28175 * C31225 +
                      C28176 * C47481) *
                         C4577 +
                     (C26857 * C31224 + C26858 * C31222 +
                      (C23365 - C23366) * C31225 + (C23367 - C23368) * C47481) *
                         C47479) *
                        C47464) *
                       C943 +
                   (((C21515 * C31224 + C21516 * C31222 + C26855 * C31225 +
                      C26856 * C47481) *
                         C4577 +
                     ((C21488 - C21487) * C31224 + (C21490 - C21489) * C31222 +
                      C22712 * C31225 + C22713 * C47481) *
                         C47479) *
                        C47501 +
                    ((C22322 * C31224 + C22323 * C31222 + C26857 * C31225 +
                      C26858 * C47481) *
                         C4577 +
                     (C27315 * C31224 + C27316 * C31222 +
                      (C22336 - C22337) * C31225 + (C22338 - C22339) * C47481) *
                         C47479) *
                        C47490 +
                    ((C22342 * C31224 + C22343 * C31222 +
                      (C23366 - C23365) * C31225 + (C23368 - C23367) * C47481) *
                         C4577 +
                     ((C22337 - C22336) * C31224 + (C22339 - C22338) * C31222 +
                      (C47108 * C23357 - C21367 * C23356) * C31225 +
                      (C47108 * C23359 - C21367 * C23358) * C47481) *
                         C47479) *
                        C47464) *
                       C47461) *
                  C47135) /
                     (p * q * std::sqrt(p + q));
    d2ee[198] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C47108 * C124 - C21367 * C117) * C31224 +
             (C47108 * C138 - C21367 * C127) * C31222 +
             (C25975 - C25976) * C31225 + (C25977 - C25978) * C47481) *
                C4577 +
            ((C21479 - C21480) * C31224 + (C21481 - C21482) * C31222 +
             C26465 * C31225 + C26466 * C47481) *
                C47479) *
               C47430 +
           (((C25976 - C25975) * C31224 + (C25978 - C25977) * C31222 +
             (C25979 - C25980) * C31225 + (C25981 - C25982) * C47481) *
                C4577 +
            (C26467 * C31224 + C26468 * C31222 + C26851 * C31225 +
             C26852 * C47481) *
                C47479) *
               C47268) *
              C47163 * C554 +
          ((((C21367 * C118 - C47108 * C125) * C31224 +
             (C21367 * C128 - C47108 * C139) * C31222 +
             (C25983 - C25984) * C31225 + (C25985 - C25986) * C47481) *
                C4577 +
            ((C21491 - C21492) * C31224 + (C21493 - C21494) * C31222 +
             C26469 * C31225 + C26470 * C47481) *
                C47479) *
               C47430 +
           (((C25984 - C25983) * C31224 + (C25986 - C25985) * C31222 +
             (C25987 - C25988) * C31225 + (C25989 - C25990) * C47481) *
                C4577 +
            (C26471 * C31224 + C26472 * C31222 + C27901 * C31225 +
             C27902 * C47481) *
                C47479) *
               C47268) *
              C47163 * C555 +
          ((((C47108 * C126 - C21367 * C119) * C31224 +
             (C47108 * C140 - C21367 * C129) * C31222 +
             (C25991 - C25992) * C31225 + (C25993 - C25994) * C47481) *
                C4577 +
            ((C21503 - C21504) * C31224 + (C21505 - C21506) * C31222 +
             C26473 * C31225 + C26474 * C47481) *
                C47479) *
               C47430 +
           (((C25992 - C25991) * C31224 + (C25994 - C25993) * C31222 +
             (C25995 - C25996) * C31225 + (C25997 - C25998) * C47481) *
                C4577 +
            (C26475 * C31224 + C26476 * C31222 + (C25999 - C26000) * C31225 +
             (C26001 - C26002) * C47481) *
                C47479) *
               C47268) *
              C47163 * C556 +
          ((((C21367 * C120 - C47108 * C130) * C31224 +
             (C21367 * C131 - C47108 * C141) * C31222 +
             (C26267 - C26268) * C31225 + (C26269 - C26270) * C47481) *
                C4577 +
            ((C21738 - C21739) * C31224 + (C21740 - C21741) * C31222 +
             (C26133 - C26134) * C31225 + (C26135 - C26136) * C47481) *
                C47479) *
               C47430 +
           (((C26268 - C26267) * C31224 + (C26270 - C26269) * C31222 +
             (C47108 * C438 - C21367 * C421) * C31225 +
             (C47108 * C451 - C21367 * C439) * C47481) *
                C4577 +
            ((C26134 - C26133) * C31224 + (C26136 - C26135) * C31222 +
             (C47108 * C2015 - C21367 * C2014) * C31225 +
             (C47108 * C2017 - C21367 * C2016) * C47481) *
                C47479) *
               C47268) *
              C47163 * C47465)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C47108 * C124 - C21367 * C117) * C31224 +
              (C47108 * C138 - C21367 * C127) * C31222 +
              (C25975 - C25976) * C31225 + (C25977 - C25978) * C47481) *
                 C4577 +
             ((C21479 - C21480) * C31224 + (C21481 - C21482) * C31222 +
              C26465 * C31225 + C26466 * C47481) *
                 C47479) *
                C47430 +
            (((C25976 - C25975) * C31224 + (C25978 - C25977) * C31222 +
              (C25979 - C25980) * C31225 + (C25981 - C25982) * C47481) *
                 C4577 +
             (C26467 * C31224 + C26468 * C31222 + C26851 * C31225 +
              C26852 * C47481) *
                 C47479) *
                C47268) *
               C942 +
           ((((C21480 - C21479) * C31224 + (C21482 - C21481) * C31222 +
              C26467 * C31225 + C26468 * C47481) *
                 C4577 +
             ((C21484 - C21483) * C31224 + (C21486 - C21485) * C31222 +
              C22322 * C31225 + C22323 * C47481) *
                 C47479) *
                C47430 +
            ((C26465 * C31224 + C26466 * C31222 + C26853 * C31225 +
              C26854 * C47481) *
                 C4577 +
             (C26855 * C31224 + C26856 * C31222 + C22342 * C31225 +
              C22343 * C47481) *
                 C47479) *
                C47268) *
               C943 +
           (((C21515 * C31224 + C21516 * C31222 + C26855 * C31225 +
              C26856 * C47481) *
                 C4577 +
             ((C21488 - C21487) * C31224 + (C21490 - C21489) * C31222 +
              C22712 * C31225 + C22713 * C47481) *
                 C47479) *
                C47430 +
            ((C22322 * C31224 + C22323 * C31222 + C26857 * C31225 +
              C26858 * C47481) *
                 C4577 +
             (C27315 * C31224 + C27316 * C31222 + (C22336 - C22337) * C31225 +
              (C22338 - C22339) * C47481) *
                 C47479) *
                C47268) *
               C47461) *
              C47415 +
          (((((C21367 * C118 - C47108 * C125) * C31224 +
              (C21367 * C128 - C47108 * C139) * C31222 +
              (C25983 - C25984) * C31225 + (C25985 - C25986) * C47481) *
                 C4577 +
             ((C21491 - C21492) * C31224 + (C21493 - C21494) * C31222 +
              C26469 * C31225 + C26470 * C47481) *
                 C47479) *
                C47430 +
            (((C25984 - C25983) * C31224 + (C25986 - C25985) * C31222 +
              (C25987 - C25988) * C31225 + (C25989 - C25990) * C47481) *
                 C4577 +
             (C26471 * C31224 + C26472 * C31222 + C27901 * C31225 +
              C27902 * C47481) *
                 C47479) *
                C47268) *
               C942 +
           ((((C21492 - C21491) * C31224 + (C21494 - C21493) * C31222 +
              C26471 * C31225 + C26472 * C47481) *
                 C4577 +
             ((C21496 - C21495) * C31224 + (C21498 - C21497) * C31222 +
              C22601 * C31225 + C22602 * C47481) *
                 C47479) *
                C47430 +
            ((C26469 * C31224 + C26470 * C31222 + C27903 * C31225 +
              C27904 * C47481) *
                 C4577 +
             (C27183 * C31224 + C27184 * C31222 + (C23157 - C23158) * C31225 +
              (C23159 - C23160) * C47481) *
                 C47479) *
                C47268) *
               C943 +
           (((C21517 * C31224 + C21518 * C31222 + C27183 * C31225 +
              C27184 * C47481) *
                 C4577 +
             ((C21500 - C21499) * C31224 + (C21502 - C21501) * C31222 +
              (C22603 - C22604) * C31225 + (C22605 - C22606) * C47481) *
                 C47479) *
                C47430 +
            ((C22601 * C31224 + C22602 * C31222 + (C23158 - C23157) * C31225 +
              (C23160 - C23159) * C47481) *
                 C4577 +
             ((C22604 - C22603) * C31224 + (C22606 - C22605) * C31222 +
              (C47108 * C5808 - C21367 * C5806) * C31225 +
              (C47108 * C5812 - C21367 * C5810) * C47481) *
                 C47479) *
                C47268) *
               C47461) *
              C47146)) /
            (p * q * std::sqrt(p + q));
    d2ee[199] += (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  ((((C47108 * C124 - C21367 * C117) * C31224 +
                     (C47108 * C138 - C21367 * C127) * C31222 +
                     (C25975 - C25976) * C31225 + (C25977 - C25978) * C47481) *
                        C4577 +
                    ((C21479 - C21480) * C31224 + (C21481 - C21482) * C31222 +
                     C26465 * C31225 + C26466 * C47481) *
                        C47479) *
                       C47181 * C47163 * C108 +
                   (((C21367 * C118 - C47108 * C125) * C31224 +
                     (C21367 * C128 - C47108 * C139) * C31222 +
                     (C25983 - C25984) * C31225 + (C25985 - C25986) * C47481) *
                        C4577 +
                    ((C21491 - C21492) * C31224 + (C21493 - C21494) * C31222 +
                     C26469 * C31225 + C26470 * C47481) *
                        C47479) *
                       C47181 * C47163 * C109 +
                   (((C47108 * C126 - C21367 * C119) * C31224 +
                     (C47108 * C140 - C21367 * C129) * C31222 +
                     (C25991 - C25992) * C31225 + (C25993 - C25994) * C47481) *
                        C4577 +
                    ((C21503 - C21504) * C31224 + (C21505 - C21506) * C31222 +
                     C26473 * C31225 + C26474 * C47481) *
                        C47479) *
                       C47181 * C47163 * C110 +
                   (((C21367 * C120 - C47108 * C130) * C31224 +
                     (C21367 * C131 - C47108 * C141) * C31222 +
                     (C26267 - C26268) * C31225 + (C26269 - C26270) * C47481) *
                        C4577 +
                    ((C21738 - C21739) * C31224 + (C21740 - C21741) * C31222 +
                     (C26133 - C26134) * C31225 + (C26135 - C26136) * C47481) *
                        C47479) *
                       C47181 * C47163 * C111 +
                   (((C47108 * C132 - C21367 * C121) * C31224 +
                     (C47108 * C142 - C21367 * C133) * C31222 +
                     (C47108 * C440 - C21367 * C422) * C31225 +
                     (C47108 * C452 - C21367 * C441) * C47481) *
                        C4577 +
                    ((C47108 * C287 - C21367 * C269) * C31224 +
                     (C47108 * C299 - C21367 * C288) * C31222 +
                     (C47108 * C825 - C21367 * C816) * C31225 +
                     (C47108 * C831 - C21367 * C826) * C47481) *
                        C47479) *
                       C47181 * C47163 * C112)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  (((((C47108 * C124 - C21367 * C117) * C31224 +
                      (C47108 * C138 - C21367 * C127) * C31222 +
                      (C25975 - C25976) * C31225 + (C25977 - C25978) * C47481) *
                         C4577 +
                     ((C21479 - C21480) * C31224 + (C21481 - C21482) * C31222 +
                      C26465 * C31225 + C26466 * C47481) *
                         C47479) *
                        C47181 * C47500 +
                    (((C21480 - C21479) * C31224 + (C21482 - C21481) * C31222 +
                      C26467 * C31225 + C26468 * C47481) *
                         C4577 +
                     ((C21484 - C21483) * C31224 + (C21486 - C21485) * C31222 +
                      C22322 * C31225 + C22323 * C47481) *
                         C47479) *
                        C47181 * C47488 +
                    ((C21515 * C31224 + C21516 * C31222 + C26855 * C31225 +
                      C26856 * C47481) *
                         C4577 +
                     ((C21488 - C21487) * C31224 + (C21490 - C21489) * C31222 +
                      C22712 * C31225 + C22713 * C47481) *
                         C47479) *
                        C47181 * C47461) *
                       C258 +
                   ((((C21367 * C118 - C47108 * C125) * C31224 +
                      (C21367 * C128 - C47108 * C139) * C31222 +
                      (C25983 - C25984) * C31225 + (C25985 - C25986) * C47481) *
                         C4577 +
                     ((C21491 - C21492) * C31224 + (C21493 - C21494) * C31222 +
                      C26469 * C31225 + C26470 * C47481) *
                         C47479) *
                        C47181 * C47500 +
                    (((C21492 - C21491) * C31224 + (C21494 - C21493) * C31222 +
                      C26471 * C31225 + C26472 * C47481) *
                         C4577 +
                     ((C21496 - C21495) * C31224 + (C21498 - C21497) * C31222 +
                      C22601 * C31225 + C22602 * C47481) *
                         C47479) *
                        C47181 * C47488 +
                    ((C21517 * C31224 + C21518 * C31222 + C27183 * C31225 +
                      C27184 * C47481) *
                         C4577 +
                     ((C21500 - C21499) * C31224 + (C21502 - C21501) * C31222 +
                      (C22603 - C22604) * C31225 + (C22605 - C22606) * C47481) *
                         C47479) *
                        C47181 * C47461) *
                       C259 +
                   ((((C47108 * C126 - C21367 * C119) * C31224 +
                      (C47108 * C140 - C21367 * C129) * C31222 +
                      (C25991 - C25992) * C31225 + (C25993 - C25994) * C47481) *
                         C4577 +
                     ((C21503 - C21504) * C31224 + (C21505 - C21506) * C31222 +
                      C26473 * C31225 + C26474 * C47481) *
                         C47479) *
                        C47181 * C47500 +
                    (((C21504 - C21503) * C31224 + (C21506 - C21505) * C31222 +
                      C26475 * C31225 + C26476 * C47481) *
                         C4577 +
                     ((C21508 - C21507) * C31224 + (C21510 - C21509) * C31222 +
                      (C22010 - C22011) * C31225 + (C22012 - C22013) * C47481) *
                         C47479) *
                        C47181 * C47488 +
                    ((C21519 * C31224 + C21520 * C31222 +
                      (C22011 - C22010) * C31225 + (C22013 - C22012) * C47481) *
                         C4577 +
                     ((C21512 - C21511) * C31224 + (C21514 - C21513) * C31222 +
                      (C47108 * C1547 - C21367 * C1544) * C31225 +
                      (C47108 * C1553 - C21367 * C1550) * C47481) *
                         C47479) *
                        C47181 * C47461) *
                       C47455)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  (((((C47108 * C124 - C21367 * C117) * C31224 +
                      (C47108 * C138 - C21367 * C127) * C31222 +
                      (C25975 - C25976) * C31225 + (C25977 - C25978) * C47481) *
                         C4577 +
                     ((C21479 - C21480) * C31224 + (C21481 - C21482) * C31222 +
                      C26465 * C31225 + C26466 * C47481) *
                         C47479) *
                        C47181 * C942 +
                    (((C21480 - C21479) * C31224 + (C21482 - C21481) * C31222 +
                      C26467 * C31225 + C26468 * C47481) *
                         C4577 +
                     ((C21484 - C21483) * C31224 + (C21486 - C21485) * C31222 +
                      C22322 * C31225 + C22323 * C47481) *
                         C47479) *
                        C47181 * C943 +
                    ((C21515 * C31224 + C21516 * C31222 + C26855 * C31225 +
                      C26856 * C47481) *
                         C4577 +
                     ((C21488 - C21487) * C31224 + (C21490 - C21489) * C31222 +
                      C22712 * C31225 + C22713 * C47481) *
                         C47479) *
                        C47181 * C47461) *
                       C47497 +
                   ((((C21367 * C118 - C47108 * C125) * C31224 +
                      (C21367 * C128 - C47108 * C139) * C31222 +
                      (C25983 - C25984) * C31225 + (C25985 - C25986) * C47481) *
                         C4577 +
                     ((C21491 - C21492) * C31224 + (C21493 - C21494) * C31222 +
                      C26469 * C31225 + C26470 * C47481) *
                         C47479) *
                        C47181 * C942 +
                    (((C21492 - C21491) * C31224 + (C21494 - C21493) * C31222 +
                      C26471 * C31225 + C26472 * C47481) *
                         C4577 +
                     ((C21496 - C21495) * C31224 + (C21498 - C21497) * C31222 +
                      C22601 * C31225 + C22602 * C47481) *
                         C47479) *
                        C47181 * C943 +
                    ((C21517 * C31224 + C21518 * C31222 + C27183 * C31225 +
                      C27184 * C47481) *
                         C4577 +
                     ((C21500 - C21499) * C31224 + (C21502 - C21501) * C31222 +
                      (C22603 - C22604) * C31225 + (C22605 - C22606) * C47481) *
                         C47479) *
                        C47181 * C47461) *
                       C47484 +
                   ((((C47108 * C126 - C21367 * C119) * C31224 +
                      (C47108 * C140 - C21367 * C129) * C31222 +
                      (C25991 - C25992) * C31225 + (C25993 - C25994) * C47481) *
                         C4577 +
                     ((C21503 - C21504) * C31224 + (C21505 - C21506) * C31222 +
                      C26473 * C31225 + C26474 * C47481) *
                         C47479) *
                        C47181 * C942 +
                    (((C21504 - C21503) * C31224 + (C21506 - C21505) * C31222 +
                      C26475 * C31225 + C26476 * C47481) *
                         C4577 +
                     ((C21508 - C21507) * C31224 + (C21510 - C21509) * C31222 +
                      (C22010 - C22011) * C31225 + (C22012 - C22013) * C47481) *
                         C47479) *
                        C47181 * C943 +
                    ((C21519 * C31224 + C21520 * C31222 +
                      (C22011 - C22010) * C31225 + (C22013 - C22012) * C47481) *
                         C4577 +
                     ((C21512 - C21511) * C31224 + (C21514 - C21513) * C31222 +
                      (C47108 * C1547 - C21367 * C1544) * C31225 +
                      (C47108 * C1553 - C21367 * C1550) * C47481) *
                         C47479) *
                        C47181 * C47461) *
                       C47455)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  ((((C47108 * C124 - C21367 * C117) * C31224 +
                     (C47108 * C138 - C21367 * C127) * C31222 +
                     (C25975 - C25976) * C31225 + (C25977 - C25978) * C47481) *
                        C4577 +
                    ((C21479 - C21480) * C31224 + (C21481 - C21482) * C31222 +
                     C26465 * C31225 + C26466 * C47481) *
                        C47479) *
                       C47181 * C1010 +
                   (((C21480 - C21479) * C31224 + (C21482 - C21481) * C31222 +
                     C26467 * C31225 + C26468 * C47481) *
                        C4577 +
                    ((C21484 - C21483) * C31224 + (C21486 - C21485) * C31222 +
                     C22322 * C31225 + C22323 * C47481) *
                        C47479) *
                       C47181 * C1011 +
                   ((C21515 * C31224 + C21516 * C31222 + C26855 * C31225 +
                     C26856 * C47481) *
                        C4577 +
                    ((C21488 - C21487) * C31224 + (C21490 - C21489) * C31222 +
                     C22712 * C31225 + C22713 * C47481) *
                        C47479) *
                       C47181 * C1012 +
                   ((C22190 * C31224 + C22191 * C31222 + C27315 * C31225 +
                     C27316 * C47481) *
                        C4577 +
                    ((C22193 - C22192) * C31224 + (C22195 - C22194) * C31222 +
                     (C22714 - C22715) * C31225 + (C22716 - C22717) * C47481) *
                        C47479) *
                       C47181 * C1013 +
                   ((C22202 * C31224 + C22203 * C31222 +
                     (C22715 - C22714) * C31225 + (C22717 - C22716) * C47481) *
                        C4577 +
                    ((C22197 - C22196) * C31224 + (C22199 - C22198) * C31222 +
                     (C47108 * C22708 - C21367 * C22707) * C31225 +
                     (C47108 * C22710 - C21367 * C22709) * C47481) *
                        C47479) *
                       C47181 * C1014) *
                  C47135) /
                     (p * q * std::sqrt(p + q));
    d2ee[200] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((C47108 * C124 - C21367 * C117) * C42185 +
                     (C47108 * C138 - C21367 * C127) * C42182 +
                     (C25975 - C25976) * C42186 + (C25977 - C25978) * C42183 +
                     C42409 * C42187 + C42410 * C42184) *
                        C47369 * C47181 * C47222 +
                    ((C21480 - C21479) * C42185 + (C21482 - C21481) * C42182 +
                     C26467 * C42186 + C26468 * C42183 + C26851 * C42187 +
                     C26852 * C42184) *
                        C47369 * C47181 * C47229 +
                    (C21515 * C42185 + C21516 * C42182 + C26855 * C42186 +
                     C26856 * C42183 + C22342 * C42187 + C22343 * C42184) *
                        C47369 * C47181 * C2700) *
                       C47140 +
                   (((C21367 * C118 - C47108 * C125) * C42185 +
                     (C21367 * C128 - C47108 * C139) * C42182 +
                     (C25983 - C25984) * C42186 + (C25985 - C25986) * C42183 +
                     C42411 * C42187 + C42412 * C42184) *
                        C47369 * C47181 * C47222 +
                    ((C21492 - C21491) * C42185 + (C21494 - C21493) * C42182 +
                     C26471 * C42186 + C26472 * C42183 + C27901 * C42187 +
                     C27902 * C42184) *
                        C47369 * C47181 * C47229 +
                    (C21517 * C42185 + C21518 * C42182 + C27183 * C42186 +
                     C27184 * C42183 + (C23157 - C23158) * C42187 +
                     (C23159 - C23160) * C42184) *
                        C47369 * C47181 * C2700) *
                       C47149 +
                   (((C47108 * C126 - C21367 * C119) * C42185 +
                     (C47108 * C140 - C21367 * C129) * C42182 +
                     (C25991 - C25992) * C42186 + (C25993 - C25994) * C42183 +
                     C42413 * C42187 + C42414 * C42184) *
                        C47369 * C47181 * C47222 +
                    ((C21504 - C21503) * C42185 + (C21506 - C21505) * C42182 +
                     C26475 * C42186 + C26476 * C42183 +
                     (C25999 - C26000) * C42187 + (C26001 - C26002) * C42184) *
                        C47369 * C47181 * C47229 +
                    (C21519 * C42185 + C21520 * C42182 +
                     (C22011 - C22010) * C42186 + (C22013 - C22012) * C42183 +
                     (C47108 * C1173 - C21367 * C1158) * C42187 +
                     (C47108 * C1185 - C21367 * C1176) * C42184) *
                        C47369 * C47181 * C2700) *
                       C2703)) /
                 (p * q * std::sqrt(p + q));
    d2ee[201] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((((C47108 * C124 - C21367 * C117) * C42185 +
                      (C47108 * C138 - C21367 * C127) * C42182 +
                      (C25975 - C25976) * C42186 + (C25977 - C25978) * C42183 +
                      C42409 * C42187 + C42410 * C42184) *
                         C47369 * C47430 +
                     ((C25976 - C25975) * C42185 + (C25978 - C25977) * C42182 +
                      (C25979 - C25980) * C42186 + (C25981 - C25982) * C42183 +
                      C43675 * C42187 + C43676 * C42184) *
                         C47369 * C47268) *
                        C47222 +
                    (((C21480 - C21479) * C42185 + (C21482 - C21481) * C42182 +
                      C26467 * C42186 + C26468 * C42183 + C26851 * C42187 +
                      C26852 * C42184) *
                         C47369 * C47430 +
                     (C26465 * C42185 + C26466 * C42182 + C26853 * C42186 +
                      C26854 * C42183 + C28173 * C42187 + C28174 * C42184) *
                         C47369 * C47268) *
                        C47229 +
                    ((C21515 * C42185 + C21516 * C42182 + C26855 * C42186 +
                      C26856 * C42183 + C22342 * C42187 + C22343 * C42184) *
                         C47369 * C47430 +
                     (C22322 * C42185 + C22323 * C42182 + C26857 * C42186 +
                      C26858 * C42183 + (C23365 - C23366) * C42187 +
                      (C23367 - C23368) * C42184) *
                         C47369 * C47268) *
                        C2700) *
                       C2440 +
                   ((((C21367 * C118 - C47108 * C125) * C42185 +
                      (C21367 * C128 - C47108 * C139) * C42182 +
                      (C25983 - C25984) * C42186 + (C25985 - C25986) * C42183 +
                      C42411 * C42187 + C42412 * C42184) *
                         C47369 * C47430 +
                     ((C25984 - C25983) * C42185 + (C25986 - C25985) * C42182 +
                      (C25987 - C25988) * C42186 + (C25989 - C25990) * C42183 +
                      C43927 * C42187 + C43928 * C42184) *
                         C47369 * C47268) *
                        C47222 +
                    (((C21492 - C21491) * C42185 + (C21494 - C21493) * C42182 +
                      C26471 * C42186 + C26472 * C42183 + C27901 * C42187 +
                      C27902 * C42184) *
                         C47369 * C47430 +
                     (C26469 * C42185 + C26470 * C42182 + C27903 * C42186 +
                      C27904 * C42183 + (C27905 - C27906) * C42187 +
                      (C27907 - C27908) * C42184) *
                         C47369 * C47268) *
                        C47229 +
                    ((C21517 * C42185 + C21518 * C42182 + C27183 * C42186 +
                      C27184 * C42183 + (C23157 - C23158) * C42187 +
                      (C23159 - C23160) * C42184) *
                         C47369 * C47430 +
                     (C22601 * C42185 + C22602 * C42182 +
                      (C23158 - C23157) * C42186 + (C23160 - C23159) * C42183 +
                      (C47108 * C7170 - C21367 * C7168) * C42187 +
                      (C47108 * C7174 - C21367 * C7172) * C42184) *
                         C47369 * C47268) *
                        C2700) *
                       C47146)) /
                 (p * q * std::sqrt(p + q));
    d2ee[202] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C47108 * C124 - C21367 * C117) * C42185 +
            (C47108 * C138 - C21367 * C127) * C42182 +
            (C25975 - C25976) * C42186 + (C25977 - C25978) * C42183 +
            C42409 * C42187 + C42410 * C42184) *
               C47369 * C47181 * C47507 +
           ((C21480 - C21479) * C42185 + (C21482 - C21481) * C42182 +
            C26467 * C42186 + C26468 * C42183 + C26851 * C42187 +
            C26852 * C42184) *
               C47369 * C47181 * C47503 +
           (C21515 * C42185 + C21516 * C42182 + C26855 * C42186 +
            C26856 * C42183 + C22342 * C42187 + C22343 * C42184) *
               C47369 * C47181 * C47493 +
           (C22190 * C42185 + C22191 * C42182 + C27315 * C42186 +
            C27316 * C42183 + (C22336 - C22337) * C42187 +
            (C22338 - C22339) * C42184) *
               C47369 * C47181 * C47471) *
              C2440 +
          (((C21367 * C118 - C47108 * C125) * C42185 +
            (C21367 * C128 - C47108 * C139) * C42182 +
            (C25983 - C25984) * C42186 + (C25985 - C25986) * C42183 +
            C42411 * C42187 + C42412 * C42184) *
               C47369 * C47181 * C47507 +
           ((C21492 - C21491) * C42185 + (C21494 - C21493) * C42182 +
            C26471 * C42186 + C26472 * C42183 + C27901 * C42187 +
            C27902 * C42184) *
               C47369 * C47181 * C47503 +
           (C21517 * C42185 + C21518 * C42182 + C27183 * C42186 +
            C27184 * C42183 + (C23157 - C23158) * C42187 +
            (C23159 - C23160) * C42184) *
               C47369 * C47181 * C47493 +
           (C22446 * C42185 + C22447 * C42182 + (C22604 - C22603) * C42186 +
            (C22606 - C22605) * C42183 +
            (C47108 * C5808 - C21367 * C5806) * C42187 +
            (C47108 * C5812 - C21367 * C5810) * C42184) *
               C47369 * C47181 * C47471) *
              C47146)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C47108 * C124 - C21367 * C117) * C42185 +
            (C47108 * C138 - C21367 * C127) * C42182 +
            (C25975 - C25976) * C42186 + (C25977 - C25978) * C42183 +
            C42409 * C42187 + C42410 * C42184) *
               C47369 * C47181 * C2332 +
           ((C21480 - C21479) * C42185 + (C21482 - C21481) * C42182 +
            C26467 * C42186 + C26468 * C42183 + C26851 * C42187 +
            C26852 * C42184) *
               C47369 * C47181 * C47226) *
              C47506 +
          (((C21367 * C118 - C47108 * C125) * C42185 +
            (C21367 * C128 - C47108 * C139) * C42182 +
            (C25983 - C25984) * C42186 + (C25985 - C25986) * C42183 +
            C42411 * C42187 + C42412 * C42184) *
               C47369 * C47181 * C2332 +
           ((C21492 - C21491) * C42185 + (C21494 - C21493) * C42182 +
            C26471 * C42186 + C26472 * C42183 + C27901 * C42187 +
            C27902 * C42184) *
               C47369 * C47181 * C47226) *
              C47499 +
          (((C47108 * C126 - C21367 * C119) * C42185 +
            (C47108 * C140 - C21367 * C129) * C42182 +
            (C25991 - C25992) * C42186 + (C25993 - C25994) * C42183 +
            C42413 * C42187 + C42414 * C42184) *
               C47369 * C47181 * C2332 +
           ((C21504 - C21503) * C42185 + (C21506 - C21505) * C42182 +
            C26475 * C42186 + C26476 * C42183 + (C25999 - C26000) * C42187 +
            (C26001 - C26002) * C42184) *
               C47369 * C47181 * C47226) *
              C47486 +
          (((C21367 * C120 - C47108 * C130) * C42185 +
            (C21367 * C131 - C47108 * C141) * C42182 +
            (C26267 - C26268) * C42186 + (C26269 - C26270) * C42183 +
            (C42615 - C42616) * C42187 + (C42617 - C42618) * C42184) *
               C47369 * C47181 * C2332 +
           ((C21739 - C21738) * C42185 + (C21741 - C21740) * C42182 +
            (C26134 - C26133) * C42186 + (C26136 - C26135) * C42183 +
            (C47108 * C2015 - C21367 * C2014) * C42187 +
            (C47108 * C2017 - C21367 * C2016) * C42184) *
               C47369 * C47181 * C47226) *
              C47465)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C47108 * C124 - C21367 * C117) * C42185 +
             (C47108 * C138 - C21367 * C127) * C42182 +
             (C25975 - C25976) * C42186 + (C25977 - C25978) * C42183 +
             C42409 * C42187 + C42410 * C42184) *
                C47369 * C47501 +
            ((C25976 - C25975) * C42185 + (C25978 - C25977) * C42182 +
             (C25979 - C25980) * C42186 + (C25981 - C25982) * C42183 +
             C43675 * C42187 + C43676 * C42184) *
                C47369 * C47490 +
            (C42409 * C42185 + C42410 * C42182 + (C27695 - C27696) * C42186 +
             (C27697 - C27698) * C42183 + C43677 * C42187 + C43678 * C42184) *
                C47369 * C47464) *
               C2332 +
           (((C21480 - C21479) * C42185 + (C21482 - C21481) * C42182 +
             C26467 * C42186 + C26468 * C42183 + C26851 * C42187 +
             C26852 * C42184) *
                C47369 * C47501 +
            (C26465 * C42185 + C26466 * C42182 + C26853 * C42186 +
             C26854 * C42183 + C28173 * C42187 + C28174 * C42184) *
                C47369 * C47490 +
            (C26851 * C42185 + C26852 * C42182 + C28175 * C42186 +
             C28176 * C42183 + (C27703 - C27704) * C42187 +
             (C27705 - C27706) * C42184) *
                C47369 * C47464) *
               C47226) *
              C2440 +
          ((((C21367 * C118 - C47108 * C125) * C42185 +
             (C21367 * C128 - C47108 * C139) * C42182 +
             (C25983 - C25984) * C42186 + (C25985 - C25986) * C42183 +
             C42411 * C42187 + C42412 * C42184) *
                C47369 * C47501 +
            ((C25984 - C25983) * C42185 + (C25986 - C25985) * C42182 +
             (C25987 - C25988) * C42186 + (C25989 - C25990) * C42183 +
             C43927 * C42187 + C43928 * C42184) *
                C47369 * C47490 +
            (C42411 * C42185 + C42412 * C42182 + (C28039 - C28040) * C42186 +
             (C28041 - C28042) * C42183 + (C43929 - C43930) * C42187 +
             (C43931 - C43932) * C42184) *
                C47369 * C47464) *
               C2332 +
           (((C21492 - C21491) * C42185 + (C21494 - C21493) * C42182 +
             C26471 * C42186 + C26472 * C42183 + C27901 * C42187 +
             C27902 * C42184) *
                C47369 * C47501 +
            (C26469 * C42185 + C26470 * C42182 + C27903 * C42186 +
             C27904 * C42183 + (C27905 - C27906) * C42187 +
             (C27907 - C27908) * C42184) *
                C47369 * C47490 +
            (C27901 * C42185 + C27902 * C42182 + (C27906 - C27905) * C42186 +
             (C27908 - C27907) * C42183 +
             (C47108 * C6700 - C21367 * C6698) * C42187 +
             (C47108 * C6704 - C21367 * C6702) * C42184) *
                C47369 * C47464) *
               C47226) *
              C47146)) /
            (p * q * std::sqrt(p + q));
    d2ee[203] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((((C47108 * C124 - C21367 * C117) * C42185 +
                      (C47108 * C138 - C21367 * C127) * C42182 +
                      (C25975 - C25976) * C42186 + (C25977 - C25978) * C42183 +
                      C42409 * C42187 + C42410 * C42184) *
                         C47369 * C47430 +
                     ((C25976 - C25975) * C42185 + (C25978 - C25977) * C42182 +
                      (C25979 - C25980) * C42186 + (C25981 - C25982) * C42183 +
                      C43675 * C42187 + C43676 * C42184) *
                         C47369 * C47268) *
                        C2332 +
                    (((C21480 - C21479) * C42185 + (C21482 - C21481) * C42182 +
                      C26467 * C42186 + C26468 * C42183 + C26851 * C42187 +
                      C26852 * C42184) *
                         C47369 * C47430 +
                     (C26465 * C42185 + C26466 * C42182 + C26853 * C42186 +
                      C26854 * C42183 + C28173 * C42187 + C28174 * C42184) *
                         C47369 * C47268) *
                        C47226) *
                       C47140 +
                   ((((C21367 * C118 - C47108 * C125) * C42185 +
                      (C21367 * C128 - C47108 * C139) * C42182 +
                      (C25983 - C25984) * C42186 + (C25985 - C25986) * C42183 +
                      C42411 * C42187 + C42412 * C42184) *
                         C47369 * C47430 +
                     ((C25984 - C25983) * C42185 + (C25986 - C25985) * C42182 +
                      (C25987 - C25988) * C42186 + (C25989 - C25990) * C42183 +
                      C43927 * C42187 + C43928 * C42184) *
                         C47369 * C47268) *
                        C2332 +
                    (((C21492 - C21491) * C42185 + (C21494 - C21493) * C42182 +
                      C26471 * C42186 + C26472 * C42183 + C27901 * C42187 +
                      C27902 * C42184) *
                         C47369 * C47430 +
                     (C26469 * C42185 + C26470 * C42182 + C27903 * C42186 +
                      C27904 * C42183 + (C27905 - C27906) * C42187 +
                      (C27907 - C27908) * C42184) *
                         C47369 * C47268) *
                        C47226) *
                       C47149 +
                   ((((C47108 * C126 - C21367 * C119) * C42185 +
                      (C47108 * C140 - C21367 * C129) * C42182 +
                      (C25991 - C25992) * C42186 + (C25993 - C25994) * C42183 +
                      C42413 * C42187 + C42414 * C42184) *
                         C47369 * C47430 +
                     ((C25992 - C25991) * C42185 + (C25994 - C25993) * C42182 +
                      (C25995 - C25996) * C42186 + (C25997 - C25998) * C42183 +
                      (C42415 - C42416) * C42187 + (C42417 - C42418) * C42184) *
                         C47369 * C47268) *
                        C2332 +
                    (((C21504 - C21503) * C42185 + (C21506 - C21505) * C42182 +
                      C26475 * C42186 + C26476 * C42183 +
                      (C25999 - C26000) * C42187 + (C26001 - C26002) * C42184) *
                         C47369 * C47430 +
                     (C26473 * C42185 + C26474 * C42182 +
                      (C26000 - C25999) * C42186 + (C26002 - C26001) * C42183 +
                      (C47108 * C2227 - C21367 * C2224) * C42187 +
                      (C47108 * C2233 - C21367 * C2230) * C42184) *
                         C47369 * C47268) *
                        C47226) *
                       C2703)) /
                 (p * q * std::sqrt(p + q));
    d2ee[204] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((C47108 * C124 - C21367 * C117) * C42185 +
                     (C47108 * C138 - C21367 * C127) * C42182 +
                     (C25975 - C25976) * C42186 + (C25977 - C25978) * C42183 +
                     C42409 * C42187 + C42410 * C42184) *
                        C47369 * C47181 * C2332 +
                    ((C21480 - C21479) * C42185 + (C21482 - C21481) * C42182 +
                     C26467 * C42186 + C26468 * C42183 + C26851 * C42187 +
                     C26852 * C42184) *
                        C47369 * C47181 * C47226) *
                       C47506 +
                   (((C21367 * C118 - C47108 * C125) * C42185 +
                     (C21367 * C128 - C47108 * C139) * C42182 +
                     (C25983 - C25984) * C42186 + (C25985 - C25986) * C42183 +
                     C42411 * C42187 + C42412 * C42184) *
                        C47369 * C47181 * C2332 +
                    ((C21492 - C21491) * C42185 + (C21494 - C21493) * C42182 +
                     C26471 * C42186 + C26472 * C42183 + C27901 * C42187 +
                     C27902 * C42184) *
                        C47369 * C47181 * C47226) *
                       C47499 +
                   (((C47108 * C126 - C21367 * C119) * C42185 +
                     (C47108 * C140 - C21367 * C129) * C42182 +
                     (C25991 - C25992) * C42186 + (C25993 - C25994) * C42183 +
                     C42413 * C42187 + C42414 * C42184) *
                        C47369 * C47181 * C2332 +
                    ((C21504 - C21503) * C42185 + (C21506 - C21505) * C42182 +
                     C26475 * C42186 + C26476 * C42183 +
                     (C25999 - C26000) * C42187 + (C26001 - C26002) * C42184) *
                        C47369 * C47181 * C47226) *
                       C47486 +
                   (((C21367 * C120 - C47108 * C130) * C42185 +
                     (C21367 * C131 - C47108 * C141) * C42182 +
                     (C26267 - C26268) * C42186 + (C26269 - C26270) * C42183 +
                     (C42615 - C42616) * C42187 + (C42617 - C42618) * C42184) *
                        C47369 * C47181 * C2332 +
                    ((C21739 - C21738) * C42185 + (C21741 - C21740) * C42182 +
                     (C26134 - C26133) * C42186 + (C26136 - C26135) * C42183 +
                     (C47108 * C2015 - C21367 * C2014) * C42187 +
                     (C47108 * C2017 - C21367 * C2016) * C42184) *
                        C47369 * C47181 * C47226) *
                       C47465)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((C47108 * C124 - C21367 * C117) * C42185 +
                     (C47108 * C138 - C21367 * C127) * C42182 +
                     (C25975 - C25976) * C42186 + (C25977 - C25978) * C42183 +
                     C42409 * C42187 + C42410 * C42184) *
                        C47369 * C47181 * C47507 +
                    ((C21480 - C21479) * C42185 + (C21482 - C21481) * C42182 +
                     C26467 * C42186 + C26468 * C42183 + C26851 * C42187 +
                     C26852 * C42184) *
                        C47369 * C47181 * C47503 +
                    (C21515 * C42185 + C21516 * C42182 + C26855 * C42186 +
                     C26856 * C42183 + C22342 * C42187 + C22343 * C42184) *
                        C47369 * C47181 * C47493 +
                    (C22190 * C42185 + C22191 * C42182 + C27315 * C42186 +
                     C27316 * C42183 + (C22336 - C22337) * C42187 +
                     (C22338 - C22339) * C42184) *
                        C47369 * C47181 * C47471) *
                       C2440 +
                   (((C21367 * C118 - C47108 * C125) * C42185 +
                     (C21367 * C128 - C47108 * C139) * C42182 +
                     (C25983 - C25984) * C42186 + (C25985 - C25986) * C42183 +
                     C42411 * C42187 + C42412 * C42184) *
                        C47369 * C47181 * C47507 +
                    ((C21492 - C21491) * C42185 + (C21494 - C21493) * C42182 +
                     C26471 * C42186 + C26472 * C42183 + C27901 * C42187 +
                     C27902 * C42184) *
                        C47369 * C47181 * C47503 +
                    (C21517 * C42185 + C21518 * C42182 + C27183 * C42186 +
                     C27184 * C42183 + (C23157 - C23158) * C42187 +
                     (C23159 - C23160) * C42184) *
                        C47369 * C47181 * C47493 +
                    (C22446 * C42185 + C22447 * C42182 +
                     (C22604 - C22603) * C42186 + (C22606 - C22605) * C42183 +
                     (C47108 * C5808 - C21367 * C5806) * C42187 +
                     (C47108 * C5812 - C21367 * C5810) * C42184) *
                        C47369 * C47181 * C47471) *
                       C47146)) /
                     (p * q * std::sqrt(p + q));
    d2ee[205] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((((C47108 * C124 - C21367 * C117) * C42185 +
                      (C47108 * C138 - C21367 * C127) * C42182 +
                      (C25975 - C25976) * C42186 + (C25977 - C25978) * C42183 +
                      C42409 * C42187 + C42410 * C42184) *
                         C47369 * C3094 +
                     ((C25976 - C25975) * C42185 + (C25978 - C25977) * C42182 +
                      (C25979 - C25980) * C42186 + (C25981 - C25982) * C42183 +
                      C43675 * C42187 + C43676 * C42184) *
                         C47369 * C47268) *
                        C47222 +
                    (((C21480 - C21479) * C42185 + (C21482 - C21481) * C42182 +
                      C26467 * C42186 + C26468 * C42183 + C26851 * C42187 +
                      C26852 * C42184) *
                         C47369 * C3094 +
                     (C26465 * C42185 + C26466 * C42182 + C26853 * C42186 +
                      C26854 * C42183 + C28173 * C42187 + C28174 * C42184) *
                         C47369 * C47268) *
                        C47229 +
                    ((C21515 * C42185 + C21516 * C42182 + C26855 * C42186 +
                      C26856 * C42183 + C22342 * C42187 + C22343 * C42184) *
                         C47369 * C3094 +
                     (C22322 * C42185 + C22323 * C42182 + C26857 * C42186 +
                      C26858 * C42183 + (C23365 - C23366) * C42187 +
                      (C23367 - C23368) * C42184) *
                         C47369 * C47268) *
                        C2700) *
                       C47415 +
                   ((((C21367 * C118 - C47108 * C125) * C42185 +
                      (C21367 * C128 - C47108 * C139) * C42182 +
                      (C25983 - C25984) * C42186 + (C25985 - C25986) * C42183 +
                      C42411 * C42187 + C42412 * C42184) *
                         C47369 * C3094 +
                     ((C25984 - C25983) * C42185 + (C25986 - C25985) * C42182 +
                      (C25987 - C25988) * C42186 + (C25989 - C25990) * C42183 +
                      C43927 * C42187 + C43928 * C42184) *
                         C47369 * C47268) *
                        C47222 +
                    (((C21492 - C21491) * C42185 + (C21494 - C21493) * C42182 +
                      C26471 * C42186 + C26472 * C42183 + C27901 * C42187 +
                      C27902 * C42184) *
                         C47369 * C3094 +
                     (C26469 * C42185 + C26470 * C42182 + C27903 * C42186 +
                      C27904 * C42183 + (C27905 - C27906) * C42187 +
                      (C27907 - C27908) * C42184) *
                         C47369 * C47268) *
                        C47229 +
                    ((C21517 * C42185 + C21518 * C42182 + C27183 * C42186 +
                      C27184 * C42183 + (C23157 - C23158) * C42187 +
                      (C23159 - C23160) * C42184) *
                         C47369 * C3094 +
                     (C22601 * C42185 + C22602 * C42182 +
                      (C23158 - C23157) * C42186 + (C23160 - C23159) * C42183 +
                      (C47108 * C7170 - C21367 * C7168) * C42187 +
                      (C47108 * C7174 - C21367 * C7172) * C42184) *
                         C47369 * C47268) *
                        C2700) *
                       C47146)) /
                 (p * q * std::sqrt(p + q));
    d2ee[206] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C47108 * C124 - C21367 * C117) * C42185 +
            (C47108 * C138 - C21367 * C127) * C42182 +
            (C25975 - C25976) * C42186 + (C25977 - C25978) * C42183 +
            C42409 * C42187 + C42410 * C42184) *
               C47369 * C47264 +
           ((C25976 - C25975) * C42185 + (C25978 - C25977) * C42182 +
            (C25979 - C25980) * C42186 + (C25981 - C25982) * C42183 +
            C43675 * C42187 + C43676 * C42184) *
               C47369 * C47271 +
           (C42409 * C42185 + C42410 * C42182 + (C27695 - C27696) * C42186 +
            (C27697 - C27698) * C42183 + C43677 * C42187 + C43678 * C42184) *
               C47369 * C3602) *
              C47222 +
          (((C21480 - C21479) * C42185 + (C21482 - C21481) * C42182 +
            C26467 * C42186 + C26468 * C42183 + C26851 * C42187 +
            C26852 * C42184) *
               C47369 * C47264 +
           (C26465 * C42185 + C26466 * C42182 + C26853 * C42186 +
            C26854 * C42183 + C28173 * C42187 + C28174 * C42184) *
               C47369 * C47271 +
           (C26851 * C42185 + C26852 * C42182 + C28175 * C42186 +
            C28176 * C42183 + (C27703 - C27704) * C42187 +
            (C27705 - C27706) * C42184) *
               C47369 * C3602) *
              C47229 +
          ((C21515 * C42185 + C21516 * C42182 + C26855 * C42186 +
            C26856 * C42183 + C22342 * C42187 + C22343 * C42184) *
               C47369 * C47264 +
           (C22322 * C42185 + C22323 * C42182 + C26857 * C42186 +
            C26858 * C42183 + (C23365 - C23366) * C42187 +
            (C23367 - C23368) * C42184) *
               C47369 * C47271 +
           (C22342 * C42185 + C22343 * C42182 + (C23366 - C23365) * C42186 +
            (C23368 - C23367) * C42183 +
            (C47108 * C23003 - C21367 * C23002) * C42187 +
            (C47108 * C23005 - C21367 * C23004) * C42184) *
               C47369 * C3602) *
              C2700) *
         C47135) /
        (p * q * std::sqrt(p + q));
    d2ee[207] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C47108 * C124 - C21367 * C117) * C42185 +
            (C47108 * C138 - C21367 * C127) * C42182 +
            (C25975 - C25976) * C42186 + (C25977 - C25978) * C42183 +
            C42409 * C42187 + C42410 * C42184) *
               C47369 * C3094 +
           ((C25976 - C25975) * C42185 + (C25978 - C25977) * C42182 +
            (C25979 - C25980) * C42186 + (C25981 - C25982) * C42183 +
            C43675 * C42187 + C43676 * C42184) *
               C47369 * C47268) *
              C47507 +
          (((C21480 - C21479) * C42185 + (C21482 - C21481) * C42182 +
            C26467 * C42186 + C26468 * C42183 + C26851 * C42187 +
            C26852 * C42184) *
               C47369 * C3094 +
           (C26465 * C42185 + C26466 * C42182 + C26853 * C42186 +
            C26854 * C42183 + C28173 * C42187 + C28174 * C42184) *
               C47369 * C47268) *
              C47503 +
          ((C21515 * C42185 + C21516 * C42182 + C26855 * C42186 +
            C26856 * C42183 + C22342 * C42187 + C22343 * C42184) *
               C47369 * C3094 +
           (C22322 * C42185 + C22323 * C42182 + C26857 * C42186 +
            C26858 * C42183 + (C23365 - C23366) * C42187 +
            (C23367 - C23368) * C42184) *
               C47369 * C47268) *
              C47493 +
          ((C22190 * C42185 + C22191 * C42182 + C27315 * C42186 +
            C27316 * C42183 + (C22336 - C22337) * C42187 +
            (C22338 - C22339) * C42184) *
               C47369 * C3094 +
           (C22712 * C42185 + C22713 * C42182 + (C22337 - C22336) * C42186 +
            (C22339 - C22338) * C42183 +
            (C47108 * C23357 - C21367 * C23356) * C42187 +
            (C47108 * C23359 - C21367 * C23358) * C42184) *
               C47369 * C47268) *
              C47471) *
         C47135) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C47108 * C124 - C21367 * C117) * C42185 +
             (C47108 * C138 - C21367 * C127) * C42182 +
             (C25975 - C25976) * C42186 + (C25977 - C25978) * C42183 +
             C42409 * C42187 + C42410 * C42184) *
                C47369 * C3094 +
            ((C25976 - C25975) * C42185 + (C25978 - C25977) * C42182 +
             (C25979 - C25980) * C42186 + (C25981 - C25982) * C42183 +
             C43675 * C42187 + C43676 * C42184) *
                C47369 * C47268) *
               C2332 +
           (((C21480 - C21479) * C42185 + (C21482 - C21481) * C42182 +
             C26467 * C42186 + C26468 * C42183 + C26851 * C42187 +
             C26852 * C42184) *
                C47369 * C3094 +
            (C26465 * C42185 + C26466 * C42182 + C26853 * C42186 +
             C26854 * C42183 + C28173 * C42187 + C28174 * C42184) *
                C47369 * C47268) *
               C47226) *
              C47497 +
          ((((C21367 * C118 - C47108 * C125) * C42185 +
             (C21367 * C128 - C47108 * C139) * C42182 +
             (C25983 - C25984) * C42186 + (C25985 - C25986) * C42183 +
             C42411 * C42187 + C42412 * C42184) *
                C47369 * C3094 +
            ((C25984 - C25983) * C42185 + (C25986 - C25985) * C42182 +
             (C25987 - C25988) * C42186 + (C25989 - C25990) * C42183 +
             C43927 * C42187 + C43928 * C42184) *
                C47369 * C47268) *
               C2332 +
           (((C21492 - C21491) * C42185 + (C21494 - C21493) * C42182 +
             C26471 * C42186 + C26472 * C42183 + C27901 * C42187 +
             C27902 * C42184) *
                C47369 * C3094 +
            (C26469 * C42185 + C26470 * C42182 + C27903 * C42186 +
             C27904 * C42183 + (C27905 - C27906) * C42187 +
             (C27907 - C27908) * C42184) *
                C47369 * C47268) *
               C47226) *
              C47484 +
          ((((C47108 * C126 - C21367 * C119) * C42185 +
             (C47108 * C140 - C21367 * C129) * C42182 +
             (C25991 - C25992) * C42186 + (C25993 - C25994) * C42183 +
             C42413 * C42187 + C42414 * C42184) *
                C47369 * C3094 +
            ((C25992 - C25991) * C42185 + (C25994 - C25993) * C42182 +
             (C25995 - C25996) * C42186 + (C25997 - C25998) * C42183 +
             (C42415 - C42416) * C42187 + (C42417 - C42418) * C42184) *
                C47369 * C47268) *
               C2332 +
           (((C21504 - C21503) * C42185 + (C21506 - C21505) * C42182 +
             C26475 * C42186 + C26476 * C42183 + (C25999 - C26000) * C42187 +
             (C26001 - C26002) * C42184) *
                C47369 * C3094 +
            (C26473 * C42185 + C26474 * C42182 + (C26000 - C25999) * C42186 +
             (C26002 - C26001) * C42183 +
             (C47108 * C2227 - C21367 * C2224) * C42187 +
             (C47108 * C2233 - C21367 * C2230) * C42184) *
                C47369 * C47268) *
               C47226) *
              C47455)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C47108 * C124 - C21367 * C117) * C42185 +
            (C47108 * C138 - C21367 * C127) * C42182 +
            (C25975 - C25976) * C42186 + (C25977 - C25978) * C42183 +
            C42409 * C42187 + C42410 * C42184) *
               C47369 * C47508 +
           ((C25976 - C25975) * C42185 + (C25978 - C25977) * C42182 +
            (C25979 - C25980) * C42186 + (C25981 - C25982) * C42183 +
            C43675 * C42187 + C43676 * C42184) *
               C47369 * C47505 +
           (C42409 * C42185 + C42410 * C42182 + (C27695 - C27696) * C42186 +
            (C27697 - C27698) * C42183 + C43677 * C42187 + C43678 * C42184) *
               C47369 * C47496 +
           (C43675 * C42185 + C43676 * C42182 + (C27699 - C27700) * C42186 +
            (C27701 - C27702) * C42183 + (C43679 - C43680) * C42187 +
            (C43681 - C43682) * C42184) *
               C47369 * C47477) *
              C2332 +
          (((C21480 - C21479) * C42185 + (C21482 - C21481) * C42182 +
            C26467 * C42186 + C26468 * C42183 + C26851 * C42187 +
            C26852 * C42184) *
               C47369 * C47508 +
           (C26465 * C42185 + C26466 * C42182 + C26853 * C42186 +
            C26854 * C42183 + C28173 * C42187 + C28174 * C42184) *
               C47369 * C47505 +
           (C26851 * C42185 + C26852 * C42182 + C28175 * C42186 +
            C28176 * C42183 + (C27703 - C27704) * C42187 +
            (C27705 - C27706) * C42184) *
               C47369 * C47496 +
           (C28173 * C42185 + C28174 * C42182 + (C27704 - C27703) * C42186 +
            (C27706 - C27705) * C42183 +
            (C47108 * C27691 - C21367 * C27690) * C42187 +
            (C47108 * C27693 - C21367 * C27692) * C42184) *
               C47369 * C47477) *
              C47226) *
         C47135) /
            (p * q * std::sqrt(p + q));
    d2ee[208] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C47108 * C124 - C21367 * C117) * C42185 +
             (C47108 * C138 - C21367 * C127) * C42182 +
             (C25975 - C25976) * C42186 + (C25977 - C25978) * C42183 +
             C42409 * C42187 + C42410 * C42184) *
                C47369 * C47264 +
            ((C25976 - C25975) * C42185 + (C25978 - C25977) * C42182 +
             (C25979 - C25980) * C42186 + (C25981 - C25982) * C42183 +
             C43675 * C42187 + C43676 * C42184) *
                C47369 * C47271 +
            (C42409 * C42185 + C42410 * C42182 + (C27695 - C27696) * C42186 +
             (C27697 - C27698) * C42183 + C43677 * C42187 + C43678 * C42184) *
                C47369 * C3602) *
               C2332 +
           (((C21480 - C21479) * C42185 + (C21482 - C21481) * C42182 +
             C26467 * C42186 + C26468 * C42183 + C26851 * C42187 +
             C26852 * C42184) *
                C47369 * C47264 +
            (C26465 * C42185 + C26466 * C42182 + C26853 * C42186 +
             C26854 * C42183 + C28173 * C42187 + C28174 * C42184) *
                C47369 * C47271 +
            (C26851 * C42185 + C26852 * C42182 + C28175 * C42186 +
             C28176 * C42183 + (C27703 - C27704) * C42187 +
             (C27705 - C27706) * C42184) *
                C47369 * C3602) *
               C47226) *
              C47415 +
          ((((C21367 * C118 - C47108 * C125) * C42185 +
             (C21367 * C128 - C47108 * C139) * C42182 +
             (C25983 - C25984) * C42186 + (C25985 - C25986) * C42183 +
             C42411 * C42187 + C42412 * C42184) *
                C47369 * C47264 +
            ((C25984 - C25983) * C42185 + (C25986 - C25985) * C42182 +
             (C25987 - C25988) * C42186 + (C25989 - C25990) * C42183 +
             C43927 * C42187 + C43928 * C42184) *
                C47369 * C47271 +
            (C42411 * C42185 + C42412 * C42182 + (C28039 - C28040) * C42186 +
             (C28041 - C28042) * C42183 + (C43929 - C43930) * C42187 +
             (C43931 - C43932) * C42184) *
                C47369 * C3602) *
               C2332 +
           (((C21492 - C21491) * C42185 + (C21494 - C21493) * C42182 +
             C26471 * C42186 + C26472 * C42183 + C27901 * C42187 +
             C27902 * C42184) *
                C47369 * C47264 +
            (C26469 * C42185 + C26470 * C42182 + C27903 * C42186 +
             C27904 * C42183 + (C27905 - C27906) * C42187 +
             (C27907 - C27908) * C42184) *
                C47369 * C47271 +
            (C27901 * C42185 + C27902 * C42182 + (C27906 - C27905) * C42186 +
             (C27908 - C27907) * C42183 +
             (C47108 * C6700 - C21367 * C6698) * C42187 +
             (C47108 * C6704 - C21367 * C6702) * C42184) *
                C47369 * C3602) *
               C47226) *
              C47146)) /
        (p * q * std::sqrt(p + q));
    d2ee[209] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((((C47108 * C124 - C21367 * C117) * C42185 +
                      (C47108 * C138 - C21367 * C127) * C42182 +
                      (C25975 - C25976) * C42186 + (C25977 - C25978) * C42183 +
                      C42409 * C42187 + C42410 * C42184) *
                         C47369 * C3094 +
                     ((C25976 - C25975) * C42185 + (C25978 - C25977) * C42182 +
                      (C25979 - C25980) * C42186 + (C25981 - C25982) * C42183 +
                      C43675 * C42187 + C43676 * C42184) *
                         C47369 * C47268) *
                        C2332 +
                    (((C21480 - C21479) * C42185 + (C21482 - C21481) * C42182 +
                      C26467 * C42186 + C26468 * C42183 + C26851 * C42187 +
                      C26852 * C42184) *
                         C47369 * C3094 +
                     (C26465 * C42185 + C26466 * C42182 + C26853 * C42186 +
                      C26854 * C42183 + C28173 * C42187 + C28174 * C42184) *
                         C47369 * C47268) *
                        C47226) *
                       C47497 +
                   ((((C21367 * C118 - C47108 * C125) * C42185 +
                      (C21367 * C128 - C47108 * C139) * C42182 +
                      (C25983 - C25984) * C42186 + (C25985 - C25986) * C42183 +
                      C42411 * C42187 + C42412 * C42184) *
                         C47369 * C3094 +
                     ((C25984 - C25983) * C42185 + (C25986 - C25985) * C42182 +
                      (C25987 - C25988) * C42186 + (C25989 - C25990) * C42183 +
                      C43927 * C42187 + C43928 * C42184) *
                         C47369 * C47268) *
                        C2332 +
                    (((C21492 - C21491) * C42185 + (C21494 - C21493) * C42182 +
                      C26471 * C42186 + C26472 * C42183 + C27901 * C42187 +
                      C27902 * C42184) *
                         C47369 * C3094 +
                     (C26469 * C42185 + C26470 * C42182 + C27903 * C42186 +
                      C27904 * C42183 + (C27905 - C27906) * C42187 +
                      (C27907 - C27908) * C42184) *
                         C47369 * C47268) *
                        C47226) *
                       C47484 +
                   ((((C47108 * C126 - C21367 * C119) * C42185 +
                      (C47108 * C140 - C21367 * C129) * C42182 +
                      (C25991 - C25992) * C42186 + (C25993 - C25994) * C42183 +
                      C42413 * C42187 + C42414 * C42184) *
                         C47369 * C3094 +
                     ((C25992 - C25991) * C42185 + (C25994 - C25993) * C42182 +
                      (C25995 - C25996) * C42186 + (C25997 - C25998) * C42183 +
                      (C42415 - C42416) * C42187 + (C42417 - C42418) * C42184) *
                         C47369 * C47268) *
                        C2332 +
                    (((C21504 - C21503) * C42185 + (C21506 - C21505) * C42182 +
                      C26475 * C42186 + C26476 * C42183 +
                      (C25999 - C26000) * C42187 + (C26001 - C26002) * C42184) *
                         C47369 * C3094 +
                     (C26473 * C42185 + C26474 * C42182 +
                      (C26000 - C25999) * C42186 + (C26002 - C26001) * C42183 +
                      (C47108 * C2227 - C21367 * C2224) * C42187 +
                      (C47108 * C2233 - C21367 * C2230) * C42184) *
                         C47369 * C47268) *
                        C47226) *
                       C47455)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((C47108 * C124 - C21367 * C117) * C42185 +
                     (C47108 * C138 - C21367 * C127) * C42182 +
                     (C25975 - C25976) * C42186 + (C25977 - C25978) * C42183 +
                     C42409 * C42187 + C42410 * C42184) *
                        C47369 * C3094 +
                    ((C25976 - C25975) * C42185 + (C25978 - C25977) * C42182 +
                     (C25979 - C25980) * C42186 + (C25981 - C25982) * C42183 +
                     C43675 * C42187 + C43676 * C42184) *
                        C47369 * C47268) *
                       C47507 +
                   (((C21480 - C21479) * C42185 + (C21482 - C21481) * C42182 +
                     C26467 * C42186 + C26468 * C42183 + C26851 * C42187 +
                     C26852 * C42184) *
                        C47369 * C3094 +
                    (C26465 * C42185 + C26466 * C42182 + C26853 * C42186 +
                     C26854 * C42183 + C28173 * C42187 + C28174 * C42184) *
                        C47369 * C47268) *
                       C47503 +
                   ((C21515 * C42185 + C21516 * C42182 + C26855 * C42186 +
                     C26856 * C42183 + C22342 * C42187 + C22343 * C42184) *
                        C47369 * C3094 +
                    (C22322 * C42185 + C22323 * C42182 + C26857 * C42186 +
                     C26858 * C42183 + (C23365 - C23366) * C42187 +
                     (C23367 - C23368) * C42184) *
                        C47369 * C47268) *
                       C47493 +
                   ((C22190 * C42185 + C22191 * C42182 + C27315 * C42186 +
                     C27316 * C42183 + (C22336 - C22337) * C42187 +
                     (C22338 - C22339) * C42184) *
                        C47369 * C3094 +
                    (C22712 * C42185 + C22713 * C42182 +
                     (C22337 - C22336) * C42186 + (C22339 - C22338) * C42183 +
                     (C47108 * C23357 - C21367 * C23356) * C42187 +
                     (C47108 * C23359 - C21367 * C23358) * C42184) *
                        C47369 * C47268) *
                       C47471) *
                  C47135) /
                     (p * q * std::sqrt(p + q));
    d2ee[210] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C47108 * C124 - C21367 * C117) * C42185 +
            (C47108 * C138 - C21367 * C127) * C42182 +
            (C25975 - C25976) * C42186 + (C25977 - C25978) * C42183 +
            C42409 * C42187 + C42410 * C42184) *
               C47369 * C47181 * C1284 +
           ((C21480 - C21479) * C42185 + (C21482 - C21481) * C42182 +
            C26467 * C42186 + C26468 * C42183 + C26851 * C42187 +
            C26852 * C42184) *
               C47369 * C47181 * C1285 +
           (C21515 * C42185 + C21516 * C42182 + C26855 * C42186 +
            C26856 * C42183 + C22342 * C42187 + C22343 * C42184) *
               C47369 * C47181 * C1286 +
           (C22190 * C42185 + C22191 * C42182 + C27315 * C42186 +
            C27316 * C42183 + (C22336 - C22337) * C42187 +
            (C22338 - C22339) * C42184) *
               C47369 * C47181 * C47471) *
              C47415 +
          (((C21367 * C118 - C47108 * C125) * C42185 +
            (C21367 * C128 - C47108 * C139) * C42182 +
            (C25983 - C25984) * C42186 + (C25985 - C25986) * C42183 +
            C42411 * C42187 + C42412 * C42184) *
               C47369 * C47181 * C1284 +
           ((C21492 - C21491) * C42185 + (C21494 - C21493) * C42182 +
            C26471 * C42186 + C26472 * C42183 + C27901 * C42187 +
            C27902 * C42184) *
               C47369 * C47181 * C1285 +
           (C21517 * C42185 + C21518 * C42182 + C27183 * C42186 +
            C27184 * C42183 + (C23157 - C23158) * C42187 +
            (C23159 - C23160) * C42184) *
               C47369 * C47181 * C1286 +
           (C22446 * C42185 + C22447 * C42182 + (C22604 - C22603) * C42186 +
            (C22606 - C22605) * C42183 +
            (C47108 * C5808 - C21367 * C5806) * C42187 +
            (C47108 * C5812 - C21367 * C5810) * C42184) *
               C47369 * C47181 * C47471) *
              C47146)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C47108 * C124 - C21367 * C117) * C42185 +
            (C47108 * C138 - C21367 * C127) * C42182 +
            (C25975 - C25976) * C42186 + (C25977 - C25978) * C42183 +
            C42409 * C42187 + C42410 * C42184) *
               C47369 * C47181 * C47429 +
           ((C21480 - C21479) * C42185 + (C21482 - C21481) * C42182 +
            C26467 * C42186 + C26468 * C42183 + C26851 * C42187 +
            C26852 * C42184) *
               C47369 * C47181 * C47226) *
              C554 +
          (((C21367 * C118 - C47108 * C125) * C42185 +
            (C21367 * C128 - C47108 * C139) * C42182 +
            (C25983 - C25984) * C42186 + (C25985 - C25986) * C42183 +
            C42411 * C42187 + C42412 * C42184) *
               C47369 * C47181 * C47429 +
           ((C21492 - C21491) * C42185 + (C21494 - C21493) * C42182 +
            C26471 * C42186 + C26472 * C42183 + C27901 * C42187 +
            C27902 * C42184) *
               C47369 * C47181 * C47226) *
              C555 +
          (((C47108 * C126 - C21367 * C119) * C42185 +
            (C47108 * C140 - C21367 * C129) * C42182 +
            (C25991 - C25992) * C42186 + (C25993 - C25994) * C42183 +
            C42413 * C42187 + C42414 * C42184) *
               C47369 * C47181 * C47429 +
           ((C21504 - C21503) * C42185 + (C21506 - C21505) * C42182 +
            C26475 * C42186 + C26476 * C42183 + (C25999 - C26000) * C42187 +
            (C26001 - C26002) * C42184) *
               C47369 * C47181 * C47226) *
              C556 +
          (((C21367 * C120 - C47108 * C130) * C42185 +
            (C21367 * C131 - C47108 * C141) * C42182 +
            (C26267 - C26268) * C42186 + (C26269 - C26270) * C42183 +
            (C21367 * C421 - C47108 * C438) * C42187 +
            (C21367 * C439 - C47108 * C451) * C42184) *
               C47369 * C47181 * C47429 +
           ((C21739 - C21738) * C42185 + (C21741 - C21740) * C42182 +
            (C26134 - C26133) * C42186 + (C26136 - C26135) * C42183 +
            (C47108 * C2015 - C21367 * C2014) * C42187 +
            (C47108 * C2017 - C21367 * C2016) * C42184) *
               C47369 * C47181 * C47226) *
              C47465)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C47108 * C124 - C21367 * C117) * C42185 +
             (C47108 * C138 - C21367 * C127) * C42182 +
             (C25975 - C25976) * C42186 + (C25977 - C25978) * C42183 +
             C42409 * C42187 + C42410 * C42184) *
                C47369 * C1664 +
            ((C25976 - C25975) * C42185 + (C25978 - C25977) * C42182 +
             (C25979 - C25980) * C42186 + (C25981 - C25982) * C42183 +
             C43675 * C42187 + C43676 * C42184) *
                C47369 * C1665 +
            (C42409 * C42185 + C42410 * C42182 + (C27695 - C27696) * C42186 +
             (C27697 - C27698) * C42183 + C43677 * C42187 + C43678 * C42184) *
                C47369 * C47464) *
               C47429 +
           (((C21480 - C21479) * C42185 + (C21482 - C21481) * C42182 +
             C26467 * C42186 + C26468 * C42183 + C26851 * C42187 +
             C26852 * C42184) *
                C47369 * C1664 +
            (C26465 * C42185 + C26466 * C42182 + C26853 * C42186 +
             C26854 * C42183 + C28173 * C42187 + C28174 * C42184) *
                C47369 * C1665 +
            (C26851 * C42185 + C26852 * C42182 + C28175 * C42186 +
             C28176 * C42183 + (C27703 - C27704) * C42187 +
             (C27705 - C27706) * C42184) *
                C47369 * C47464) *
               C47226) *
              C47415 +
          ((((C21367 * C118 - C47108 * C125) * C42185 +
             (C21367 * C128 - C47108 * C139) * C42182 +
             (C25983 - C25984) * C42186 + (C25985 - C25986) * C42183 +
             C42411 * C42187 + C42412 * C42184) *
                C47369 * C1664 +
            ((C25984 - C25983) * C42185 + (C25986 - C25985) * C42182 +
             (C25987 - C25988) * C42186 + (C25989 - C25990) * C42183 +
             (C28040 - C28039) * C42187 + (C28042 - C28041) * C42184) *
                C47369 * C1665 +
            (C42411 * C42185 + C42412 * C42182 + (C28039 - C28040) * C42186 +
             (C28041 - C28042) * C42183 +
             (C21367 * C1848 - C47108 * C1857) * C42187 +
             (C21367 * C1860 - C47108 * C1866) * C42184) *
                C47369 * C47464) *
               C47429 +
           (((C21492 - C21491) * C42185 + (C21494 - C21493) * C42182 +
             C26471 * C42186 + C26472 * C42183 + C27901 * C42187 +
             C27902 * C42184) *
                C47369 * C1664 +
            (C26469 * C42185 + C26470 * C42182 + C27903 * C42186 +
             C27904 * C42183 + (C27905 - C27906) * C42187 +
             (C27907 - C27908) * C42184) *
                C47369 * C1665 +
            (C27901 * C42185 + C27902 * C42182 + (C27906 - C27905) * C42186 +
             (C27908 - C27907) * C42183 +
             (C47108 * C6700 - C21367 * C6698) * C42187 +
             (C47108 * C6704 - C21367 * C6702) * C42184) *
                C47369 * C47464) *
               C47226) *
              C47146)) /
            (p * q * std::sqrt(p + q));
    d2ee[211] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C47108 * C124 - C21367 * C117) * C42185 +
            (C47108 * C138 - C21367 * C127) * C42182 +
            (C25975 - C25976) * C42186 + (C25977 - C25978) * C42183 +
            C42409 * C42187 + C42410 * C42184) *
               C47369 * C47430 +
           ((C25976 - C25975) * C42185 + (C25978 - C25977) * C42182 +
            (C25979 - C25980) * C42186 + (C25981 - C25982) * C42183 +
            (C27696 - C27695) * C42187 + (C27698 - C27697) * C42184) *
               C47369 * C47268) *
              C1284 +
          (((C21480 - C21479) * C42185 + (C21482 - C21481) * C42182 +
            C26467 * C42186 + C26468 * C42183 + C26851 * C42187 +
            C26852 * C42184) *
               C47369 * C47430 +
           (C26465 * C42185 + C26466 * C42182 + C26853 * C42186 +
            C26854 * C42183 + C28173 * C42187 + C28174 * C42184) *
               C47369 * C47268) *
              C1285 +
          ((C21515 * C42185 + C21516 * C42182 + C26855 * C42186 +
            C26856 * C42183 + C22342 * C42187 + C22343 * C42184) *
               C47369 * C47430 +
           (C22322 * C42185 + C22323 * C42182 + C26857 * C42186 +
            C26858 * C42183 + (C23365 - C23366) * C42187 +
            (C23367 - C23368) * C42184) *
               C47369 * C47268) *
              C1286 +
          ((C22190 * C42185 + C22191 * C42182 + C27315 * C42186 +
            C27316 * C42183 + (C22336 - C22337) * C42187 +
            (C22338 - C22339) * C42184) *
               C47369 * C47430 +
           (C22712 * C42185 + C22713 * C42182 + (C22337 - C22336) * C42186 +
            (C22339 - C22338) * C42183 +
            (C47108 * C23357 - C21367 * C23356) * C42187 +
            (C47108 * C23359 - C21367 * C23358) * C42184) *
               C47369 * C47268) *
              C47471) *
         C47135) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C47108 * C124 - C21367 * C117) * C42185 +
             (C47108 * C138 - C21367 * C127) * C42182 +
             (C25975 - C25976) * C42186 + (C25977 - C25978) * C42183 +
             C42409 * C42187 + C42410 * C42184) *
                C47369 * C47430 +
            ((C25976 - C25975) * C42185 + (C25978 - C25977) * C42182 +
             (C25979 - C25980) * C42186 + (C25981 - C25982) * C42183 +
             (C27696 - C27695) * C42187 + (C27698 - C27697) * C42184) *
                C47369 * C47268) *
               C47429 +
           (((C21480 - C21479) * C42185 + (C21482 - C21481) * C42182 +
             C26467 * C42186 + C26468 * C42183 + C26851 * C42187 +
             C26852 * C42184) *
                C47369 * C47430 +
            (C26465 * C42185 + C26466 * C42182 + C26853 * C42186 +
             C26854 * C42183 + C28173 * C42187 + C28174 * C42184) *
                C47369 * C47268) *
               C47226) *
              C258 +
          ((((C21367 * C118 - C47108 * C125) * C42185 +
             (C21367 * C128 - C47108 * C139) * C42182 +
             (C25983 - C25984) * C42186 + (C25985 - C25986) * C42183 +
             C42411 * C42187 + C42412 * C42184) *
                C47369 * C47430 +
            ((C25984 - C25983) * C42185 + (C25986 - C25985) * C42182 +
             (C25987 - C25988) * C42186 + (C25989 - C25990) * C42183 +
             (C28040 - C28039) * C42187 + (C28042 - C28041) * C42184) *
                C47369 * C47268) *
               C47429 +
           (((C21492 - C21491) * C42185 + (C21494 - C21493) * C42182 +
             C26471 * C42186 + C26472 * C42183 + C27901 * C42187 +
             C27902 * C42184) *
                C47369 * C47430 +
            (C26469 * C42185 + C26470 * C42182 + C27903 * C42186 +
             C27904 * C42183 + (C27905 - C27906) * C42187 +
             (C27907 - C27908) * C42184) *
                C47369 * C47268) *
               C47226) *
              C259 +
          ((((C47108 * C126 - C21367 * C119) * C42185 +
             (C47108 * C140 - C21367 * C129) * C42182 +
             (C25991 - C25992) * C42186 + (C25993 - C25994) * C42183 +
             C42413 * C42187 + C42414 * C42184) *
                C47369 * C47430 +
            ((C25992 - C25991) * C42185 + (C25994 - C25993) * C42182 +
             (C25995 - C25996) * C42186 + (C25997 - C25998) * C42183 +
             (C42415 - C42416) * C42187 + (C42417 - C42418) * C42184) *
                C47369 * C47268) *
               C47429 +
           (((C21504 - C21503) * C42185 + (C21506 - C21505) * C42182 +
             C26475 * C42186 + C26476 * C42183 + (C25999 - C26000) * C42187 +
             (C26001 - C26002) * C42184) *
                C47369 * C47430 +
            (C26473 * C42185 + C26474 * C42182 + (C26000 - C25999) * C42186 +
             (C26002 - C26001) * C42183 +
             (C47108 * C2227 - C21367 * C2224) * C42187 +
             (C47108 * C2233 - C21367 * C2230) * C42184) *
                C47369 * C47268) *
               C47226) *
              C47455)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C47108 * C124 - C21367 * C117) * C42185 +
            (C47108 * C138 - C21367 * C127) * C42182 +
            (C25975 - C25976) * C42186 + (C25977 - C25978) * C42183 +
            C42409 * C42187 + C42410 * C42184) *
               C47369 * C2116 +
           ((C25976 - C25975) * C42185 + (C25978 - C25977) * C42182 +
            (C25979 - C25980) * C42186 + (C25981 - C25982) * C42183 +
            C43675 * C42187 + C43676 * C42184) *
               C47369 * C2117 +
           (C42409 * C42185 + C42410 * C42182 + (C27695 - C27696) * C42186 +
            (C27697 - C27698) * C42183 + C43677 * C42187 + C43678 * C42184) *
               C47369 * C2118 +
           (C43675 * C42185 + C43676 * C42182 + (C27699 - C27700) * C42186 +
            (C27701 - C27702) * C42183 + (C43679 - C43680) * C42187 +
            (C43681 - C43682) * C42184) *
               C47369 * C47477) *
              C47429 +
          (((C21480 - C21479) * C42185 + (C21482 - C21481) * C42182 +
            C26467 * C42186 + C26468 * C42183 + C26851 * C42187 +
            C26852 * C42184) *
               C47369 * C2116 +
           (C26465 * C42185 + C26466 * C42182 + C26853 * C42186 +
            C26854 * C42183 + C28173 * C42187 + C28174 * C42184) *
               C47369 * C2117 +
           (C26851 * C42185 + C26852 * C42182 + C28175 * C42186 +
            C28176 * C42183 + (C27703 - C27704) * C42187 +
            (C27705 - C27706) * C42184) *
               C47369 * C2118 +
           (C28173 * C42185 + C28174 * C42182 + (C27704 - C27703) * C42186 +
            (C27706 - C27705) * C42183 +
            (C47108 * C27691 - C21367 * C27690) * C42187 +
            (C47108 * C27693 - C21367 * C27692) * C42184) *
               C47369 * C47477) *
              C47226) *
         C47135) /
            (p * q * std::sqrt(p + q));
    d2ee[212] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((C47108 * C124 - C21367 * C117) * C42185 +
               (C47108 * C138 - C21367 * C127) * C42182 +
               (C25975 - C25976) * C42186 + (C25977 - C25978) * C42183 +
               (C25980 - C25979) * C42187 + (C25982 - C25981) * C42184) *
                  C47369 * C47181 * C47163 * C108 +
              ((C21367 * C118 - C47108 * C125) * C42185 +
               (C21367 * C128 - C47108 * C139) * C42182 +
               (C25983 - C25984) * C42186 + (C25985 - C25986) * C42183 +
               (C25988 - C25987) * C42187 + (C25990 - C25989) * C42184) *
                  C47369 * C47181 * C47163 * C109 +
              ((C47108 * C126 - C21367 * C119) * C42185 +
               (C47108 * C140 - C21367 * C129) * C42182 +
               (C25991 - C25992) * C42186 + (C25993 - C25994) * C42183 +
               (C25996 - C25995) * C42187 + (C25998 - C25997) * C42184) *
                  C47369 * C47181 * C47163 * C110 +
              ((C21367 * C120 - C47108 * C130) * C42185 +
               (C21367 * C131 - C47108 * C141) * C42182 +
               (C26267 - C26268) * C42186 + (C26269 - C26270) * C42183 +
               (C21367 * C421 - C47108 * C438) * C42187 +
               (C21367 * C439 - C47108 * C451) * C42184) *
                  C47369 * C47181 * C47163 * C111 +
              ((C47108 * C132 - C21367 * C121) * C42185 +
               (C47108 * C142 - C21367 * C133) * C42182 +
               (C47108 * C440 - C21367 * C422) * C42186 +
               (C47108 * C452 - C21367 * C441) * C42183 +
               (C47108 * C442 - C21367 * C423) * C42187 +
               (C47108 * C453 - C21367 * C443) * C42184) *
                  C47369 * C47181 * C47163 * C112) +
         0.5 * std::pow(Pi, 2.5) *
             ((((C47108 * C124 - C21367 * C117) * C42185 +
                (C47108 * C138 - C21367 * C127) * C42182 +
                (C25975 - C25976) * C42186 + (C25977 - C25978) * C42183 +
                (C25980 - C25979) * C42187 + (C25982 - C25981) * C42184) *
                   C47369 * C47181 * C47500 +
               ((C21480 - C21479) * C42185 + (C21482 - C21481) * C42182 +
                C26467 * C42186 + C26468 * C42183 + C26851 * C42187 +
                C26852 * C42184) *
                   C47369 * C47181 * C47488 +
               (C21515 * C42185 + C21516 * C42182 + C26855 * C42186 +
                C26856 * C42183 + C22342 * C42187 + C22343 * C42184) *
                   C47369 * C47181 * C47461) *
                  C258 +
              (((C21367 * C118 - C47108 * C125) * C42185 +
                (C21367 * C128 - C47108 * C139) * C42182 +
                (C25983 - C25984) * C42186 + (C25985 - C25986) * C42183 +
                (C25988 - C25987) * C42187 + (C25990 - C25989) * C42184) *
                   C47369 * C47181 * C47500 +
               ((C21492 - C21491) * C42185 + (C21494 - C21493) * C42182 +
                C26471 * C42186 + C26472 * C42183 + C27901 * C42187 +
                C27902 * C42184) *
                   C47369 * C47181 * C47488 +
               (C21517 * C42185 + C21518 * C42182 + C27183 * C42186 +
                C27184 * C42183 + (C23157 - C23158) * C42187 +
                (C23159 - C23160) * C42184) *
                   C47369 * C47181 * C47461) *
                  C259 +
              (((C47108 * C126 - C21367 * C119) * C42185 +
                (C47108 * C140 - C21367 * C129) * C42182 +
                (C25991 - C25992) * C42186 + (C25993 - C25994) * C42183 +
                (C25996 - C25995) * C42187 + (C25998 - C25997) * C42184) *
                   C47369 * C47181 * C47500 +
               ((C21504 - C21503) * C42185 + (C21506 - C21505) * C42182 +
                C26475 * C42186 + C26476 * C42183 + (C25999 - C26000) * C42187 +
                (C26001 - C26002) * C42184) *
                   C47369 * C47181 * C47488 +
               (C21519 * C42185 + C21520 * C42182 + (C22011 - C22010) * C42186 +
                (C22013 - C22012) * C42183 +
                (C47108 * C1173 - C21367 * C1158) * C42187 +
                (C47108 * C1185 - C21367 * C1176) * C42184) *
                   C47369 * C47181 * C47461) *
                  C47455)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C47108 * C124 - C21367 * C117) * C42185 +
            (C47108 * C138 - C21367 * C127) * C42182 +
            (C25975 - C25976) * C42186 + (C25977 - C25978) * C42183 +
            C42409 * C42187 + C42410 * C42184) *
               C47369 * C47501 +
           ((C25976 - C25975) * C42185 + (C25978 - C25977) * C42182 +
            (C25979 - C25980) * C42186 + (C25981 - C25982) * C42183 +
            (C27696 - C27695) * C42187 + (C27698 - C27697) * C42184) *
               C47369 * C47490 +
           (C42409 * C42185 + C42410 * C42182 + (C27695 - C27696) * C42186 +
            (C27697 - C27698) * C42183 + (C27700 - C27699) * C42187 +
            (C27702 - C27701) * C42184) *
               C47369 * C47464) *
              C47163 * C258 +
          (((C21367 * C118 - C47108 * C125) * C42185 +
            (C21367 * C128 - C47108 * C139) * C42182 +
            (C25983 - C25984) * C42186 + (C25985 - C25986) * C42183 +
            C42411 * C42187 + C42412 * C42184) *
               C47369 * C47501 +
           ((C25984 - C25983) * C42185 + (C25986 - C25985) * C42182 +
            (C25987 - C25988) * C42186 + (C25989 - C25990) * C42183 +
            (C28040 - C28039) * C42187 + (C28042 - C28041) * C42184) *
               C47369 * C47490 +
           (C42411 * C42185 + C42412 * C42182 + (C28039 - C28040) * C42186 +
            (C28041 - C28042) * C42183 +
            (C21367 * C1848 - C47108 * C1857) * C42187 +
            (C21367 * C1860 - C47108 * C1866) * C42184) *
               C47369 * C47464) *
              C47163 * C259 +
          (((C47108 * C126 - C21367 * C119) * C42185 +
            (C47108 * C140 - C21367 * C129) * C42182 +
            (C25991 - C25992) * C42186 + (C25993 - C25994) * C42183 +
            C42413 * C42187 + C42414 * C42184) *
               C47369 * C47501 +
           ((C25992 - C25991) * C42185 + (C25994 - C25993) * C42182 +
            (C25995 - C25996) * C42186 + (C25997 - C25998) * C42183 +
            (C42415 - C42416) * C42187 + (C42417 - C42418) * C42184) *
               C47369 * C47490 +
           (C42413 * C42185 + C42414 * C42182 + (C42416 - C42415) * C42186 +
            (C42418 - C42417) * C42183 +
            (C47108 * C1858 - C21367 * C1849) * C42187 +
            (C47108 * C1867 - C21367 * C1861) * C42184) *
               C47369 * C47464) *
              C47163 * C47455)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C47108 * C124 - C21367 * C117) * C42185 +
            (C47108 * C138 - C21367 * C127) * C42182 +
            (C25975 - C25976) * C42186 + (C25977 - C25978) * C42183 +
            C42409 * C42187 + C42410 * C42184) *
               C47369 * C47181 * C942 +
           ((C21480 - C21479) * C42185 + (C21482 - C21481) * C42182 +
            C26467 * C42186 + C26468 * C42183 + C26851 * C42187 +
            C26852 * C42184) *
               C47369 * C47181 * C943 +
           (C21515 * C42185 + C21516 * C42182 + C26855 * C42186 +
            C26856 * C42183 + C22342 * C42187 + C22343 * C42184) *
               C47369 * C47181 * C47461) *
              C47497 +
          (((C21367 * C118 - C47108 * C125) * C42185 +
            (C21367 * C128 - C47108 * C139) * C42182 +
            (C25983 - C25984) * C42186 + (C25985 - C25986) * C42183 +
            C42411 * C42187 + C42412 * C42184) *
               C47369 * C47181 * C942 +
           ((C21492 - C21491) * C42185 + (C21494 - C21493) * C42182 +
            C26471 * C42186 + C26472 * C42183 + C27901 * C42187 +
            C27902 * C42184) *
               C47369 * C47181 * C943 +
           (C21517 * C42185 + C21518 * C42182 + C27183 * C42186 +
            C27184 * C42183 + (C23157 - C23158) * C42187 +
            (C23159 - C23160) * C42184) *
               C47369 * C47181 * C47461) *
              C47484 +
          (((C47108 * C126 - C21367 * C119) * C42185 +
            (C47108 * C140 - C21367 * C129) * C42182 +
            (C25991 - C25992) * C42186 + (C25993 - C25994) * C42183 +
            C42413 * C42187 + C42414 * C42184) *
               C47369 * C47181 * C942 +
           ((C21504 - C21503) * C42185 + (C21506 - C21505) * C42182 +
            C26475 * C42186 + C26476 * C42183 + (C25999 - C26000) * C42187 +
            (C26001 - C26002) * C42184) *
               C47369 * C47181 * C943 +
           (C21519 * C42185 + C21520 * C42182 + (C22011 - C22010) * C42186 +
            (C22013 - C22012) * C42183 +
            (C47108 * C1173 - C21367 * C1158) * C42187 +
            (C47108 * C1185 - C21367 * C1176) * C42184) *
               C47369 * C47181 * C47461) *
              C47455)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C47108 * C124 - C21367 * C117) * C42185 +
           (C47108 * C138 - C21367 * C127) * C42182 +
           (C25975 - C25976) * C42186 + (C25977 - C25978) * C42183 +
           C42409 * C42187 + C42410 * C42184) *
              C47369 * C47181 * C1010 +
          ((C21480 - C21479) * C42185 + (C21482 - C21481) * C42182 +
           C26467 * C42186 + C26468 * C42183 + C26851 * C42187 +
           C26852 * C42184) *
              C47369 * C47181 * C1011 +
          (C21515 * C42185 + C21516 * C42182 + C26855 * C42186 +
           C26856 * C42183 + C22342 * C42187 + C22343 * C42184) *
              C47369 * C47181 * C1012 +
          (C22190 * C42185 + C22191 * C42182 + C27315 * C42186 +
           C27316 * C42183 + (C22336 - C22337) * C42187 +
           (C22338 - C22339) * C42184) *
              C47369 * C47181 * C1013 +
          (C22202 * C42185 + C22203 * C42182 + (C22715 - C22714) * C42186 +
           (C22717 - C22716) * C42183 +
           (C47108 * C22318 - C21367 * C22317) * C42187 +
           (C47108 * C22320 - C21367 * C22319) * C42184) *
              C47369 * C47181 * C1014) *
         C47135) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C47108 * C124 - C21367 * C117) * C42185 +
            (C47108 * C138 - C21367 * C127) * C42182 +
            (C25975 - C25976) * C42186 + (C25977 - C25978) * C42183 +
            C42409 * C42187 + C42410 * C42184) *
               C47369 * C47501 +
           ((C25976 - C25975) * C42185 + (C25978 - C25977) * C42182 +
            (C25979 - C25980) * C42186 + (C25981 - C25982) * C42183 +
            (C27696 - C27695) * C42187 + (C27698 - C27697) * C42184) *
               C47369 * C47490 +
           (C42409 * C42185 + C42410 * C42182 + (C27695 - C27696) * C42186 +
            (C27697 - C27698) * C42183 + (C27700 - C27699) * C42187 +
            (C27702 - C27701) * C42184) *
               C47369 * C47464) *
              C942 +
          (((C21480 - C21479) * C42185 + (C21482 - C21481) * C42182 +
            C26467 * C42186 + C26468 * C42183 + C26851 * C42187 +
            C26852 * C42184) *
               C47369 * C47501 +
           (C26465 * C42185 + C26466 * C42182 + C26853 * C42186 +
            C26854 * C42183 + C28173 * C42187 + C28174 * C42184) *
               C47369 * C47490 +
           (C26851 * C42185 + C26852 * C42182 + C28175 * C42186 +
            C28176 * C42183 + (C27703 - C27704) * C42187 +
            (C27705 - C27706) * C42184) *
               C47369 * C47464) *
              C943 +
          ((C21515 * C42185 + C21516 * C42182 + C26855 * C42186 +
            C26856 * C42183 + C22342 * C42187 + C22343 * C42184) *
               C47369 * C47501 +
           (C22322 * C42185 + C22323 * C42182 + C26857 * C42186 +
            C26858 * C42183 + (C23365 - C23366) * C42187 +
            (C23367 - C23368) * C42184) *
               C47369 * C47490 +
           (C22342 * C42185 + C22343 * C42182 + (C23366 - C23365) * C42186 +
            (C23368 - C23367) * C42183 +
            (C47108 * C23003 - C21367 * C23002) * C42187 +
            (C47108 * C23005 - C21367 * C23004) * C42184) *
               C47369 * C47464) *
              C47461) *
         C47135) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C47108 * C124 - C21367 * C117) * C42185 +
            (C47108 * C138 - C21367 * C127) * C42182 +
            (C25975 - C25976) * C42186 + (C25977 - C25978) * C42183 +
            C42409 * C42187 + C42410 * C42184) *
               C47369 * C1664 +
           ((C25976 - C25975) * C42185 + (C25978 - C25977) * C42182 +
            (C25979 - C25980) * C42186 + (C25981 - C25982) * C42183 +
            (C27696 - C27695) * C42187 + (C27698 - C27697) * C42184) *
               C47369 * C1665 +
           (C42409 * C42185 + C42410 * C42182 + (C27695 - C27696) * C42186 +
            (C27697 - C27698) * C42183 + (C27700 - C27699) * C42187 +
            (C27702 - C27701) * C42184) *
               C47369 * C47464) *
              C47163 * C47497 +
          (((C21367 * C118 - C47108 * C125) * C42185 +
            (C21367 * C128 - C47108 * C139) * C42182 +
            (C25983 - C25984) * C42186 + (C25985 - C25986) * C42183 +
            C42411 * C42187 + C42412 * C42184) *
               C47369 * C1664 +
           ((C25984 - C25983) * C42185 + (C25986 - C25985) * C42182 +
            (C25987 - C25988) * C42186 + (C25989 - C25990) * C42183 +
            (C28040 - C28039) * C42187 + (C28042 - C28041) * C42184) *
               C47369 * C1665 +
           (C42411 * C42185 + C42412 * C42182 + (C28039 - C28040) * C42186 +
            (C28041 - C28042) * C42183 +
            (C21367 * C1848 - C47108 * C1857) * C42187 +
            (C21367 * C1860 - C47108 * C1866) * C42184) *
               C47369 * C47464) *
              C47163 * C47484 +
          (((C47108 * C126 - C21367 * C119) * C42185 +
            (C47108 * C140 - C21367 * C129) * C42182 +
            (C25991 - C25992) * C42186 + (C25993 - C25994) * C42183 +
            C42413 * C42187 + C42414 * C42184) *
               C47369 * C1664 +
           ((C25992 - C25991) * C42185 + (C25994 - C25993) * C42182 +
            (C25995 - C25996) * C42186 + (C25997 - C25998) * C42183 +
            (C42415 - C42416) * C42187 + (C42417 - C42418) * C42184) *
               C47369 * C1665 +
           (C42413 * C42185 + C42414 * C42182 + (C42416 - C42415) * C42186 +
            (C42418 - C42417) * C42183 +
            (C47108 * C1858 - C21367 * C1849) * C42187 +
            (C47108 * C1867 - C21367 * C1861) * C42184) *
               C47369 * C47464) *
              C47163 * C47455)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C47108 * C124 - C21367 * C117) * C42185 +
            (C47108 * C138 - C21367 * C127) * C42182 +
            (C25975 - C25976) * C42186 + (C25977 - C25978) * C42183 +
            C42409 * C42187 + C42410 * C42184) *
               C47369 * C1664 +
           ((C25976 - C25975) * C42185 + (C25978 - C25977) * C42182 +
            (C25979 - C25980) * C42186 + (C25981 - C25982) * C42183 +
            (C27696 - C27695) * C42187 + (C27698 - C27697) * C42184) *
               C47369 * C1665 +
           (C42409 * C42185 + C42410 * C42182 + (C27695 - C27696) * C42186 +
            (C27697 - C27698) * C42183 + (C27700 - C27699) * C42187 +
            (C27702 - C27701) * C42184) *
               C47369 * C47464) *
              C47500 +
          (((C21480 - C21479) * C42185 + (C21482 - C21481) * C42182 +
            C26467 * C42186 + C26468 * C42183 + C26851 * C42187 +
            C26852 * C42184) *
               C47369 * C1664 +
           (C26465 * C42185 + C26466 * C42182 + C26853 * C42186 +
            C26854 * C42183 + C28173 * C42187 + C28174 * C42184) *
               C47369 * C1665 +
           (C26851 * C42185 + C26852 * C42182 + C28175 * C42186 +
            C28176 * C42183 + (C27703 - C27704) * C42187 +
            (C27705 - C27706) * C42184) *
               C47369 * C47464) *
              C47488 +
          ((C21515 * C42185 + C21516 * C42182 + C26855 * C42186 +
            C26856 * C42183 + C22342 * C42187 + C22343 * C42184) *
               C47369 * C1664 +
           (C22322 * C42185 + C22323 * C42182 + C26857 * C42186 +
            C26858 * C42183 + (C23365 - C23366) * C42187 +
            (C23367 - C23368) * C42184) *
               C47369 * C1665 +
           (C22342 * C42185 + C22343 * C42182 + (C23366 - C23365) * C42186 +
            (C23368 - C23367) * C42183 +
            (C47108 * C23003 - C21367 * C23002) * C42187 +
            (C47108 * C23005 - C21367 * C23004) * C42184) *
               C47369 * C47464) *
              C47461) *
         C47135) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C47108 * C124 - C21367 * C117) * C42185 +
           (C47108 * C138 - C21367 * C127) * C42182 +
           (C25975 - C25976) * C42186 + (C25977 - C25978) * C42183 +
           C42409 * C42187 + C42410 * C42184) *
              C47369 * C1839 +
          ((C25976 - C25975) * C42185 + (C25978 - C25977) * C42182 +
           (C25979 - C25980) * C42186 + (C25981 - C25982) * C42183 +
           C43675 * C42187 + C43676 * C42184) *
              C47369 * C1840 +
          (C42409 * C42185 + C42410 * C42182 + (C27695 - C27696) * C42186 +
           (C27697 - C27698) * C42183 + C43677 * C42187 + C43678 * C42184) *
              C47369 * C1841 +
          (C43675 * C42185 + C43676 * C42182 + (C27699 - C27700) * C42186 +
           (C27701 - C27702) * C42183 + (C43679 - C43680) * C42187 +
           (C43681 - C43682) * C42184) *
              C47369 * C1842 +
          (C43677 * C42185 + C43678 * C42182 + (C43680 - C43679) * C42186 +
           (C43682 - C43681) * C42183 +
           (C47108 * C43671 - C21367 * C43670) * C42187 +
           (C47108 * C43673 - C21367 * C43672) * C42184) *
              C47369 * C1843) *
         C47163 * C47135) /
            (p * q * std::sqrt(p + q));
    d2ee[213] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C47108 * C124 - C21367 * C117) * C42185 +
             (C47108 * C138 - C21367 * C127) * C42182 +
             (C25975 - C25976) * C42186 + (C25977 - C25978) * C42183 +
             C42409 * C42187 + C42410 * C42184) *
                C47369 * C47430 +
            ((C25976 - C25975) * C42185 + (C25978 - C25977) * C42182 +
             (C25979 - C25980) * C42186 + (C25981 - C25982) * C42183 +
             (C27696 - C27695) * C42187 + (C27698 - C27697) * C42184) *
                C47369 * C47268) *
               C942 +
           (((C21480 - C21479) * C42185 + (C21482 - C21481) * C42182 +
             C26467 * C42186 + C26468 * C42183 + C26851 * C42187 +
             C26852 * C42184) *
                C47369 * C47430 +
            (C26465 * C42185 + C26466 * C42182 + C26853 * C42186 +
             C26854 * C42183 + C28173 * C42187 + C28174 * C42184) *
                C47369 * C47268) *
               C943 +
           ((C21515 * C42185 + C21516 * C42182 + C26855 * C42186 +
             C26856 * C42183 + C22342 * C42187 + C22343 * C42184) *
                C47369 * C47430 +
            (C22322 * C42185 + C22323 * C42182 + C26857 * C42186 +
             C26858 * C42183 + (C23365 - C23366) * C42187 +
             (C23367 - C23368) * C42184) *
                C47369 * C47268) *
               C47461) *
              C47415 +
          ((((C21367 * C118 - C47108 * C125) * C42185 +
             (C21367 * C128 - C47108 * C139) * C42182 +
             (C25983 - C25984) * C42186 + (C25985 - C25986) * C42183 +
             C42411 * C42187 + C42412 * C42184) *
                C47369 * C47430 +
            ((C25984 - C25983) * C42185 + (C25986 - C25985) * C42182 +
             (C25987 - C25988) * C42186 + (C25989 - C25990) * C42183 +
             (C28040 - C28039) * C42187 + (C28042 - C28041) * C42184) *
                C47369 * C47268) *
               C942 +
           (((C21492 - C21491) * C42185 + (C21494 - C21493) * C42182 +
             C26471 * C42186 + C26472 * C42183 + C27901 * C42187 +
             C27902 * C42184) *
                C47369 * C47430 +
            (C26469 * C42185 + C26470 * C42182 + C27903 * C42186 +
             C27904 * C42183 + (C27905 - C27906) * C42187 +
             (C27907 - C27908) * C42184) *
                C47369 * C47268) *
               C943 +
           ((C21517 * C42185 + C21518 * C42182 + C27183 * C42186 +
             C27184 * C42183 + (C23157 - C23158) * C42187 +
             (C23159 - C23160) * C42184) *
                C47369 * C47430 +
            (C22601 * C42185 + C22602 * C42182 + (C23158 - C23157) * C42186 +
             (C23160 - C23159) * C42183 +
             (C47108 * C7170 - C21367 * C7168) * C42187 +
             (C47108 * C7174 - C21367 * C7172) * C42184) *
                C47369 * C47268) *
               C47461) *
              C47146)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C47108 * C124 - C21367 * C117) * C42185 +
            (C47108 * C138 - C21367 * C127) * C42182 +
            (C25975 - C25976) * C42186 + (C25977 - C25978) * C42183 +
            C42409 * C42187 + C42410 * C42184) *
               C47369 * C47430 +
           ((C25976 - C25975) * C42185 + (C25978 - C25977) * C42182 +
            (C25979 - C25980) * C42186 + (C25981 - C25982) * C42183 +
            (C27696 - C27695) * C42187 + (C27698 - C27697) * C42184) *
               C47369 * C47268) *
              C47163 * C554 +
          (((C21367 * C118 - C47108 * C125) * C42185 +
            (C21367 * C128 - C47108 * C139) * C42182 +
            (C25983 - C25984) * C42186 + (C25985 - C25986) * C42183 +
            C42411 * C42187 + C42412 * C42184) *
               C47369 * C47430 +
           ((C25984 - C25983) * C42185 + (C25986 - C25985) * C42182 +
            (C25987 - C25988) * C42186 + (C25989 - C25990) * C42183 +
            (C28040 - C28039) * C42187 + (C28042 - C28041) * C42184) *
               C47369 * C47268) *
              C47163 * C555 +
          (((C47108 * C126 - C21367 * C119) * C42185 +
            (C47108 * C140 - C21367 * C129) * C42182 +
            (C25991 - C25992) * C42186 + (C25993 - C25994) * C42183 +
            C42413 * C42187 + C42414 * C42184) *
               C47369 * C47430 +
           ((C25992 - C25991) * C42185 + (C25994 - C25993) * C42182 +
            (C25995 - C25996) * C42186 + (C25997 - C25998) * C42183 +
            (C42415 - C42416) * C42187 + (C42417 - C42418) * C42184) *
               C47369 * C47268) *
              C47163 * C556 +
          (((C21367 * C120 - C47108 * C130) * C42185 +
            (C21367 * C131 - C47108 * C141) * C42182 +
            (C26267 - C26268) * C42186 + (C26269 - C26270) * C42183 +
            (C42615 - C42616) * C42187 + (C42617 - C42618) * C42184) *
               C47369 * C47430 +
           ((C26268 - C26267) * C42185 + (C26270 - C26269) * C42182 +
            (C42616 - C42615) * C42186 + (C42618 - C42617) * C42183 +
            (C47108 * C2121 - C21367 * C2120) * C42187 +
            (C47108 * C2123 - C21367 * C2122) * C42184) *
               C47369 * C47268) *
              C47163 * C47465)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C47108 * C124 - C21367 * C117) * C42185 +
            (C47108 * C138 - C21367 * C127) * C42182 +
            (C25975 - C25976) * C42186 + (C25977 - C25978) * C42183 +
            C42409 * C42187 + C42410 * C42184) *
               C47369 * C2116 +
           ((C25976 - C25975) * C42185 + (C25978 - C25977) * C42182 +
            (C25979 - C25980) * C42186 + (C25981 - C25982) * C42183 +
            C43675 * C42187 + C43676 * C42184) *
               C47369 * C2117 +
           (C42409 * C42185 + C42410 * C42182 + (C27695 - C27696) * C42186 +
            (C27697 - C27698) * C42183 + C43677 * C42187 + C43678 * C42184) *
               C47369 * C2118 +
           (C43675 * C42185 + C43676 * C42182 + (C27699 - C27700) * C42186 +
            (C27701 - C27702) * C42183 + (C43679 - C43680) * C42187 +
            (C43681 - C43682) * C42184) *
               C47369 * C47477) *
              C47163 * C47415 +
          (((C21367 * C118 - C47108 * C125) * C42185 +
            (C21367 * C128 - C47108 * C139) * C42182 +
            (C25983 - C25984) * C42186 + (C25985 - C25986) * C42183 +
            C42411 * C42187 + C42412 * C42184) *
               C47369 * C2116 +
           ((C25984 - C25983) * C42185 + (C25986 - C25985) * C42182 +
            (C25987 - C25988) * C42186 + (C25989 - C25990) * C42183 +
            C43927 * C42187 + C43928 * C42184) *
               C47369 * C2117 +
           (C42411 * C42185 + C42412 * C42182 + (C28039 - C28040) * C42186 +
            (C28041 - C28042) * C42183 + (C43929 - C43930) * C42187 +
            (C43931 - C43932) * C42184) *
               C47369 * C2118 +
           (C43927 * C42185 + C43928 * C42182 + (C43930 - C43929) * C42186 +
            (C43932 - C43931) * C42183 +
            (C47108 * C12240 - C21367 * C12238) * C42187 +
            (C47108 * C12244 - C21367 * C12242) * C42184) *
               C47369 * C47477) *
              C47163 * C47146)) /
            (p * q * std::sqrt(p + q));
    d2ee[214] += (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  ((((C47108 * C124 - C21367 * C117) * C42185 +
                     (C47108 * C138 - C21367 * C127) * C42182 +
                     (C25975 - C25976) * C42186 + (C25977 - C25978) * C42183 +
                     (C25980 - C25979) * C42187 + (C25982 - C25981) * C42184) *
                        C47369 * C47181 * C47500 +
                    ((C21480 - C21479) * C42185 + (C21482 - C21481) * C42182 +
                     C26467 * C42186 + C26468 * C42183 + C26851 * C42187 +
                     C26852 * C42184) *
                        C47369 * C47181 * C47488 +
                    (C21515 * C42185 + C21516 * C42182 + C26855 * C42186 +
                     C26856 * C42183 + C22342 * C42187 + C22343 * C42184) *
                        C47369 * C47181 * C47461) *
                       C258 +
                   (((C21367 * C118 - C47108 * C125) * C42185 +
                     (C21367 * C128 - C47108 * C139) * C42182 +
                     (C25983 - C25984) * C42186 + (C25985 - C25986) * C42183 +
                     (C25988 - C25987) * C42187 + (C25990 - C25989) * C42184) *
                        C47369 * C47181 * C47500 +
                    ((C21492 - C21491) * C42185 + (C21494 - C21493) * C42182 +
                     C26471 * C42186 + C26472 * C42183 + C27901 * C42187 +
                     C27902 * C42184) *
                        C47369 * C47181 * C47488 +
                    (C21517 * C42185 + C21518 * C42182 + C27183 * C42186 +
                     C27184 * C42183 + (C23157 - C23158) * C42187 +
                     (C23159 - C23160) * C42184) *
                        C47369 * C47181 * C47461) *
                       C259 +
                   (((C47108 * C126 - C21367 * C119) * C42185 +
                     (C47108 * C140 - C21367 * C129) * C42182 +
                     (C25991 - C25992) * C42186 + (C25993 - C25994) * C42183 +
                     (C25996 - C25995) * C42187 + (C25998 - C25997) * C42184) *
                        C47369 * C47181 * C47500 +
                    ((C21504 - C21503) * C42185 + (C21506 - C21505) * C42182 +
                     C26475 * C42186 + C26476 * C42183 +
                     (C25999 - C26000) * C42187 + (C26001 - C26002) * C42184) *
                        C47369 * C47181 * C47488 +
                    (C21519 * C42185 + C21520 * C42182 +
                     (C22011 - C22010) * C42186 + (C22013 - C22012) * C42183 +
                     (C47108 * C1173 - C21367 * C1158) * C42187 +
                     (C47108 * C1185 - C21367 * C1176) * C42184) *
                        C47369 * C47181 * C47461) *
                       C47455)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  (((C47108 * C124 - C21367 * C117) * C42185 +
                    (C47108 * C138 - C21367 * C127) * C42182 +
                    (C25975 - C25976) * C42186 + (C25977 - C25978) * C42183 +
                    (C25980 - C25979) * C42187 + (C25982 - C25981) * C42184) *
                       C47369 * C47181 * C47163 * C108 +
                   ((C21367 * C118 - C47108 * C125) * C42185 +
                    (C21367 * C128 - C47108 * C139) * C42182 +
                    (C25983 - C25984) * C42186 + (C25985 - C25986) * C42183 +
                    (C25988 - C25987) * C42187 + (C25990 - C25989) * C42184) *
                       C47369 * C47181 * C47163 * C109 +
                   ((C47108 * C126 - C21367 * C119) * C42185 +
                    (C47108 * C140 - C21367 * C129) * C42182 +
                    (C25991 - C25992) * C42186 + (C25993 - C25994) * C42183 +
                    (C25996 - C25995) * C42187 + (C25998 - C25997) * C42184) *
                       C47369 * C47181 * C47163 * C110 +
                   ((C21367 * C120 - C47108 * C130) * C42185 +
                    (C21367 * C131 - C47108 * C141) * C42182 +
                    (C26267 - C26268) * C42186 + (C26269 - C26270) * C42183 +
                    (C21367 * C421 - C47108 * C438) * C42187 +
                    (C21367 * C439 - C47108 * C451) * C42184) *
                       C47369 * C47181 * C47163 * C111 +
                   ((C47108 * C132 - C21367 * C121) * C42185 +
                    (C47108 * C142 - C21367 * C133) * C42182 +
                    (C47108 * C440 - C21367 * C422) * C42186 +
                    (C47108 * C452 - C21367 * C441) * C42183 +
                    (C47108 * C442 - C21367 * C423) * C42187 +
                    (C47108 * C453 - C21367 * C443) * C42184) *
                       C47369 * C47181 * C47163 * C112)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  ((((C47108 * C124 - C21367 * C117) * C42185 +
                     (C47108 * C138 - C21367 * C127) * C42182 +
                     (C25975 - C25976) * C42186 + (C25977 - C25978) * C42183 +
                     C42409 * C42187 + C42410 * C42184) *
                        C47369 * C47181 * C942 +
                    ((C21480 - C21479) * C42185 + (C21482 - C21481) * C42182 +
                     C26467 * C42186 + C26468 * C42183 + C26851 * C42187 +
                     C26852 * C42184) *
                        C47369 * C47181 * C943 +
                    (C21515 * C42185 + C21516 * C42182 + C26855 * C42186 +
                     C26856 * C42183 + C22342 * C42187 + C22343 * C42184) *
                        C47369 * C47181 * C47461) *
                       C47497 +
                   (((C21367 * C118 - C47108 * C125) * C42185 +
                     (C21367 * C128 - C47108 * C139) * C42182 +
                     (C25983 - C25984) * C42186 + (C25985 - C25986) * C42183 +
                     C42411 * C42187 + C42412 * C42184) *
                        C47369 * C47181 * C942 +
                    ((C21492 - C21491) * C42185 + (C21494 - C21493) * C42182 +
                     C26471 * C42186 + C26472 * C42183 + C27901 * C42187 +
                     C27902 * C42184) *
                        C47369 * C47181 * C943 +
                    (C21517 * C42185 + C21518 * C42182 + C27183 * C42186 +
                     C27184 * C42183 + (C23157 - C23158) * C42187 +
                     (C23159 - C23160) * C42184) *
                        C47369 * C47181 * C47461) *
                       C47484 +
                   (((C47108 * C126 - C21367 * C119) * C42185 +
                     (C47108 * C140 - C21367 * C129) * C42182 +
                     (C25991 - C25992) * C42186 + (C25993 - C25994) * C42183 +
                     C42413 * C42187 + C42414 * C42184) *
                        C47369 * C47181 * C942 +
                    ((C21504 - C21503) * C42185 + (C21506 - C21505) * C42182 +
                     C26475 * C42186 + C26476 * C42183 +
                     (C25999 - C26000) * C42187 + (C26001 - C26002) * C42184) *
                        C47369 * C47181 * C943 +
                    (C21519 * C42185 + C21520 * C42182 +
                     (C22011 - C22010) * C42186 + (C22013 - C22012) * C42183 +
                     (C47108 * C1173 - C21367 * C1158) * C42187 +
                     (C47108 * C1185 - C21367 * C1176) * C42184) *
                        C47369 * C47181 * C47461) *
                       C47455)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  (((C47108 * C124 - C21367 * C117) * C42185 +
                    (C47108 * C138 - C21367 * C127) * C42182 +
                    (C25975 - C25976) * C42186 + (C25977 - C25978) * C42183 +
                    C42409 * C42187 + C42410 * C42184) *
                       C47369 * C47181 * C1010 +
                   ((C21480 - C21479) * C42185 + (C21482 - C21481) * C42182 +
                    C26467 * C42186 + C26468 * C42183 + C26851 * C42187 +
                    C26852 * C42184) *
                       C47369 * C47181 * C1011 +
                   (C21515 * C42185 + C21516 * C42182 + C26855 * C42186 +
                    C26856 * C42183 + C22342 * C42187 + C22343 * C42184) *
                       C47369 * C47181 * C1012 +
                   (C22190 * C42185 + C22191 * C42182 + C27315 * C42186 +
                    C27316 * C42183 + (C22336 - C22337) * C42187 +
                    (C22338 - C22339) * C42184) *
                       C47369 * C47181 * C1013 +
                   (C22202 * C42185 + C22203 * C42182 +
                    (C22715 - C22714) * C42186 + (C22717 - C22716) * C42183 +
                    (C47108 * C22318 - C21367 * C22317) * C42187 +
                    (C47108 * C22320 - C21367 * C22319) * C42184) *
                       C47369 * C47181 * C1014) *
                  C47135) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C47108 * C124 - C21367 * C117) * C42185 +
                     (C47108 * C138 - C21367 * C127) * C42182 +
                     (C25975 - C25976) * C42186 + (C25977 - C25978) * C42183 +
                     C42409 * C42187 + C42410 * C42184) *
                        C47369 * C1664 +
                    ((C25976 - C25975) * C42185 + (C25978 - C25977) * C42182 +
                     (C25979 - C25980) * C42186 + (C25981 - C25982) * C42183 +
                     (C27696 - C27695) * C42187 + (C27698 - C27697) * C42184) *
                        C47369 * C1665 +
                    (C42409 * C42185 + C42410 * C42182 +
                     (C27695 - C27696) * C42186 + (C27697 - C27698) * C42183 +
                     (C27700 - C27699) * C42187 + (C27702 - C27701) * C42184) *
                        C47369 * C47464) *
                       C47163 * C47497 +
                   (((C21367 * C118 - C47108 * C125) * C42185 +
                     (C21367 * C128 - C47108 * C139) * C42182 +
                     (C25983 - C25984) * C42186 + (C25985 - C25986) * C42183 +
                     C42411 * C42187 + C42412 * C42184) *
                        C47369 * C1664 +
                    ((C25984 - C25983) * C42185 + (C25986 - C25985) * C42182 +
                     (C25987 - C25988) * C42186 + (C25989 - C25990) * C42183 +
                     (C28040 - C28039) * C42187 + (C28042 - C28041) * C42184) *
                        C47369 * C1665 +
                    (C42411 * C42185 + C42412 * C42182 +
                     (C28039 - C28040) * C42186 + (C28041 - C28042) * C42183 +
                     (C21367 * C1848 - C47108 * C1857) * C42187 +
                     (C21367 * C1860 - C47108 * C1866) * C42184) *
                        C47369 * C47464) *
                       C47163 * C47484 +
                   (((C47108 * C126 - C21367 * C119) * C42185 +
                     (C47108 * C140 - C21367 * C129) * C42182 +
                     (C25991 - C25992) * C42186 + (C25993 - C25994) * C42183 +
                     C42413 * C42187 + C42414 * C42184) *
                        C47369 * C1664 +
                    ((C25992 - C25991) * C42185 + (C25994 - C25993) * C42182 +
                     (C25995 - C25996) * C42186 + (C25997 - C25998) * C42183 +
                     (C42415 - C42416) * C42187 + (C42417 - C42418) * C42184) *
                        C47369 * C1665 +
                    (C42413 * C42185 + C42414 * C42182 +
                     (C42416 - C42415) * C42186 + (C42418 - C42417) * C42183 +
                     (C47108 * C1858 - C21367 * C1849) * C42187 +
                     (C47108 * C1867 - C21367 * C1861) * C42184) *
                        C47369 * C47464) *
                       C47163 * C47455)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C47108 * C124 - C21367 * C117) * C42185 +
                     (C47108 * C138 - C21367 * C127) * C42182 +
                     (C25975 - C25976) * C42186 + (C25977 - C25978) * C42183 +
                     C42409 * C42187 + C42410 * C42184) *
                        C47369 * C1664 +
                    ((C25976 - C25975) * C42185 + (C25978 - C25977) * C42182 +
                     (C25979 - C25980) * C42186 + (C25981 - C25982) * C42183 +
                     (C27696 - C27695) * C42187 + (C27698 - C27697) * C42184) *
                        C47369 * C1665 +
                    (C42409 * C42185 + C42410 * C42182 +
                     (C27695 - C27696) * C42186 + (C27697 - C27698) * C42183 +
                     (C27700 - C27699) * C42187 + (C27702 - C27701) * C42184) *
                        C47369 * C47464) *
                       C47500 +
                   (((C21480 - C21479) * C42185 + (C21482 - C21481) * C42182 +
                     C26467 * C42186 + C26468 * C42183 + C26851 * C42187 +
                     C26852 * C42184) *
                        C47369 * C1664 +
                    (C26465 * C42185 + C26466 * C42182 + C26853 * C42186 +
                     C26854 * C42183 + C28173 * C42187 + C28174 * C42184) *
                        C47369 * C1665 +
                    (C26851 * C42185 + C26852 * C42182 + C28175 * C42186 +
                     C28176 * C42183 + (C27703 - C27704) * C42187 +
                     (C27705 - C27706) * C42184) *
                        C47369 * C47464) *
                       C47488 +
                   ((C21515 * C42185 + C21516 * C42182 + C26855 * C42186 +
                     C26856 * C42183 + C22342 * C42187 + C22343 * C42184) *
                        C47369 * C1664 +
                    (C22322 * C42185 + C22323 * C42182 + C26857 * C42186 +
                     C26858 * C42183 + (C23365 - C23366) * C42187 +
                     (C23367 - C23368) * C42184) *
                        C47369 * C1665 +
                    (C22342 * C42185 + C22343 * C42182 +
                     (C23366 - C23365) * C42186 + (C23368 - C23367) * C42183 +
                     (C47108 * C23003 - C21367 * C23002) * C42187 +
                     (C47108 * C23005 - C21367 * C23004) * C42184) *
                        C47369 * C47464) *
                       C47461) *
                  C47135) /
                     (p * q * std::sqrt(p + q));
    d2ee[215] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((((C47108 * C124 - C21367 * C117) * C42185 +
                      (C47108 * C138 - C21367 * C127) * C42182 +
                      (C25975 - C25976) * C42186 + (C25977 - C25978) * C42183 +
                      C42409 * C42187 + C42410 * C42184) *
                         C47369 * C3094 +
                     ((C25976 - C25975) * C42185 + (C25978 - C25977) * C42182 +
                      (C25979 - C25980) * C42186 + (C25981 - C25982) * C42183 +
                      C43675 * C42187 + C43676 * C42184) *
                         C47369 * C47268) *
                        C47429 +
                    (((C21480 - C21479) * C42185 + (C21482 - C21481) * C42182 +
                      C26467 * C42186 + C26468 * C42183 + C26851 * C42187 +
                      C26852 * C42184) *
                         C47369 * C3094 +
                     (C26465 * C42185 + C26466 * C42182 + C26853 * C42186 +
                      C26854 * C42183 + C28173 * C42187 + C28174 * C42184) *
                         C47369 * C47268) *
                        C47226) *
                       C47140 +
                   ((((C21367 * C118 - C47108 * C125) * C42185 +
                      (C21367 * C128 - C47108 * C139) * C42182 +
                      (C25983 - C25984) * C42186 + (C25985 - C25986) * C42183 +
                      C42411 * C42187 + C42412 * C42184) *
                         C47369 * C3094 +
                     ((C25984 - C25983) * C42185 + (C25986 - C25985) * C42182 +
                      (C25987 - C25988) * C42186 + (C25989 - C25990) * C42183 +
                      C43927 * C42187 + C43928 * C42184) *
                         C47369 * C47268) *
                        C47429 +
                    (((C21492 - C21491) * C42185 + (C21494 - C21493) * C42182 +
                      C26471 * C42186 + C26472 * C42183 + C27901 * C42187 +
                      C27902 * C42184) *
                         C47369 * C3094 +
                     (C26469 * C42185 + C26470 * C42182 + C27903 * C42186 +
                      C27904 * C42183 + (C27905 - C27906) * C42187 +
                      (C27907 - C27908) * C42184) *
                         C47369 * C47268) *
                        C47226) *
                       C47149 +
                   ((((C47108 * C126 - C21367 * C119) * C42185 +
                      (C47108 * C140 - C21367 * C129) * C42182 +
                      (C25991 - C25992) * C42186 + (C25993 - C25994) * C42183 +
                      C42413 * C42187 + C42414 * C42184) *
                         C47369 * C3094 +
                     ((C25992 - C25991) * C42185 + (C25994 - C25993) * C42182 +
                      (C25995 - C25996) * C42186 + (C25997 - C25998) * C42183 +
                      (C42415 - C42416) * C42187 + (C42417 - C42418) * C42184) *
                         C47369 * C47268) *
                        C47429 +
                    (((C21504 - C21503) * C42185 + (C21506 - C21505) * C42182 +
                      C26475 * C42186 + C26476 * C42183 +
                      (C25999 - C26000) * C42187 + (C26001 - C26002) * C42184) *
                         C47369 * C3094 +
                     (C26473 * C42185 + C26474 * C42182 +
                      (C26000 - C25999) * C42186 + (C26002 - C26001) * C42183 +
                      (C47108 * C2227 - C21367 * C2224) * C42187 +
                      (C47108 * C2233 - C21367 * C2230) * C42184) *
                         C47369 * C47268) *
                        C47226) *
                       C2703)) /
                 (p * q * std::sqrt(p + q));
    d2ee[216] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C47108 * C124 - C21367 * C117) * C42185 +
             (C47108 * C138 - C21367 * C127) * C42182 +
             (C25975 - C25976) * C42186 + (C25977 - C25978) * C42183 +
             C42409 * C42187 + C42410 * C42184) *
                C47369 * C47264 +
            ((C25976 - C25975) * C42185 + (C25978 - C25977) * C42182 +
             (C25979 - C25980) * C42186 + (C25981 - C25982) * C42183 +
             C43675 * C42187 + C43676 * C42184) *
                C47369 * C47271 +
            (C42409 * C42185 + C42410 * C42182 + (C27695 - C27696) * C42186 +
             (C27697 - C27698) * C42183 + C43677 * C42187 + C43678 * C42184) *
                C47369 * C3602) *
               C47429 +
           (((C21480 - C21479) * C42185 + (C21482 - C21481) * C42182 +
             C26467 * C42186 + C26468 * C42183 + C26851 * C42187 +
             C26852 * C42184) *
                C47369 * C47264 +
            (C26465 * C42185 + C26466 * C42182 + C26853 * C42186 +
             C26854 * C42183 + C28173 * C42187 + C28174 * C42184) *
                C47369 * C47271 +
            (C26851 * C42185 + C26852 * C42182 + C28175 * C42186 +
             C28176 * C42183 + (C27703 - C27704) * C42187 +
             (C27705 - C27706) * C42184) *
                C47369 * C3602) *
               C47226) *
              C2440 +
          ((((C21367 * C118 - C47108 * C125) * C42185 +
             (C21367 * C128 - C47108 * C139) * C42182 +
             (C25983 - C25984) * C42186 + (C25985 - C25986) * C42183 +
             C42411 * C42187 + C42412 * C42184) *
                C47369 * C47264 +
            ((C25984 - C25983) * C42185 + (C25986 - C25985) * C42182 +
             (C25987 - C25988) * C42186 + (C25989 - C25990) * C42183 +
             C43927 * C42187 + C43928 * C42184) *
                C47369 * C47271 +
            (C42411 * C42185 + C42412 * C42182 + (C28039 - C28040) * C42186 +
             (C28041 - C28042) * C42183 + (C43929 - C43930) * C42187 +
             (C43931 - C43932) * C42184) *
                C47369 * C3602) *
               C47429 +
           (((C21492 - C21491) * C42185 + (C21494 - C21493) * C42182 +
             C26471 * C42186 + C26472 * C42183 + C27901 * C42187 +
             C27902 * C42184) *
                C47369 * C47264 +
            (C26469 * C42185 + C26470 * C42182 + C27903 * C42186 +
             C27904 * C42183 + (C27905 - C27906) * C42187 +
             (C27907 - C27908) * C42184) *
                C47369 * C47271 +
            (C27901 * C42185 + C27902 * C42182 + (C27906 - C27905) * C42186 +
             (C27908 - C27907) * C42183 +
             (C47108 * C6700 - C21367 * C6698) * C42187 +
             (C47108 * C6704 - C21367 * C6702) * C42184) *
                C47369 * C3602) *
               C47226) *
              C47146)) /
        (p * q * std::sqrt(p + q));
    d2ee[217] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C47108 * C124 - C21367 * C117) * C42185 +
             (C47108 * C138 - C21367 * C127) * C42182 +
             (C25975 - C25976) * C42186 + (C25977 - C25978) * C42183 +
             C42409 * C42187 + C42410 * C42184) *
                C47369 * C3094 +
            ((C25976 - C25975) * C42185 + (C25978 - C25977) * C42182 +
             (C25979 - C25980) * C42186 + (C25981 - C25982) * C42183 +
             C43675 * C42187 + C43676 * C42184) *
                C47369 * C47268) *
               C47500 +
           (((C21480 - C21479) * C42185 + (C21482 - C21481) * C42182 +
             C26467 * C42186 + C26468 * C42183 + C26851 * C42187 +
             C26852 * C42184) *
                C47369 * C3094 +
            (C26465 * C42185 + C26466 * C42182 + C26853 * C42186 +
             C26854 * C42183 + C28173 * C42187 + C28174 * C42184) *
                C47369 * C47268) *
               C47488 +
           ((C21515 * C42185 + C21516 * C42182 + C26855 * C42186 +
             C26856 * C42183 + C22342 * C42187 + C22343 * C42184) *
                C47369 * C3094 +
            (C22322 * C42185 + C22323 * C42182 + C26857 * C42186 +
             C26858 * C42183 + (C23365 - C23366) * C42187 +
             (C23367 - C23368) * C42184) *
                C47369 * C47268) *
               C47461) *
              C2440 +
          ((((C21367 * C118 - C47108 * C125) * C42185 +
             (C21367 * C128 - C47108 * C139) * C42182 +
             (C25983 - C25984) * C42186 + (C25985 - C25986) * C42183 +
             C42411 * C42187 + C42412 * C42184) *
                C47369 * C3094 +
            ((C25984 - C25983) * C42185 + (C25986 - C25985) * C42182 +
             (C25987 - C25988) * C42186 + (C25989 - C25990) * C42183 +
             C43927 * C42187 + C43928 * C42184) *
                C47369 * C47268) *
               C47500 +
           (((C21492 - C21491) * C42185 + (C21494 - C21493) * C42182 +
             C26471 * C42186 + C26472 * C42183 + C27901 * C42187 +
             C27902 * C42184) *
                C47369 * C3094 +
            (C26469 * C42185 + C26470 * C42182 + C27903 * C42186 +
             C27904 * C42183 + (C27905 - C27906) * C42187 +
             (C27907 - C27908) * C42184) *
                C47369 * C47268) *
               C47488 +
           ((C21517 * C42185 + C21518 * C42182 + C27183 * C42186 +
             C27184 * C42183 + (C23157 - C23158) * C42187 +
             (C23159 - C23160) * C42184) *
                C47369 * C3094 +
            (C22601 * C42185 + C22602 * C42182 + (C23158 - C23157) * C42186 +
             (C23160 - C23159) * C42183 +
             (C47108 * C7170 - C21367 * C7168) * C42187 +
             (C47108 * C7174 - C21367 * C7172) * C42184) *
                C47369 * C47268) *
               C47461) *
              C47146)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C47108 * C124 - C21367 * C117) * C42185 +
            (C47108 * C138 - C21367 * C127) * C42182 +
            (C25975 - C25976) * C42186 + (C25977 - C25978) * C42183 +
            C42409 * C42187 + C42410 * C42184) *
               C47369 * C3094 +
           ((C25976 - C25975) * C42185 + (C25978 - C25977) * C42182 +
            (C25979 - C25980) * C42186 + (C25981 - C25982) * C42183 +
            C43675 * C42187 + C43676 * C42184) *
               C47369 * C47268) *
              C47163 * C47506 +
          (((C21367 * C118 - C47108 * C125) * C42185 +
            (C21367 * C128 - C47108 * C139) * C42182 +
            (C25983 - C25984) * C42186 + (C25985 - C25986) * C42183 +
            C42411 * C42187 + C42412 * C42184) *
               C47369 * C3094 +
           ((C25984 - C25983) * C42185 + (C25986 - C25985) * C42182 +
            (C25987 - C25988) * C42186 + (C25989 - C25990) * C42183 +
            C43927 * C42187 + C43928 * C42184) *
               C47369 * C47268) *
              C47163 * C47499 +
          (((C47108 * C126 - C21367 * C119) * C42185 +
            (C47108 * C140 - C21367 * C129) * C42182 +
            (C25991 - C25992) * C42186 + (C25993 - C25994) * C42183 +
            C42413 * C42187 + C42414 * C42184) *
               C47369 * C3094 +
           ((C25992 - C25991) * C42185 + (C25994 - C25993) * C42182 +
            (C25995 - C25996) * C42186 + (C25997 - C25998) * C42183 +
            (C42415 - C42416) * C42187 + (C42417 - C42418) * C42184) *
               C47369 * C47268) *
              C47163 * C47486 +
          (((C21367 * C120 - C47108 * C130) * C42185 +
            (C21367 * C131 - C47108 * C141) * C42182 +
            (C26267 - C26268) * C42186 + (C26269 - C26270) * C42183 +
            (C42615 - C42616) * C42187 + (C42617 - C42618) * C42184) *
               C47369 * C3094 +
           ((C26268 - C26267) * C42185 + (C26270 - C26269) * C42182 +
            (C42616 - C42615) * C42186 + (C42618 - C42617) * C42183 +
            (C47108 * C2121 - C21367 * C2120) * C42187 +
            (C47108 * C2123 - C21367 * C2122) * C42184) *
               C47369 * C47268) *
              C47163 * C47465)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C47108 * C124 - C21367 * C117) * C42185 +
            (C47108 * C138 - C21367 * C127) * C42182 +
            (C25975 - C25976) * C42186 + (C25977 - C25978) * C42183 +
            C42409 * C42187 + C42410 * C42184) *
               C47369 * C47508 +
           ((C25976 - C25975) * C42185 + (C25978 - C25977) * C42182 +
            (C25979 - C25980) * C42186 + (C25981 - C25982) * C42183 +
            C43675 * C42187 + C43676 * C42184) *
               C47369 * C47505 +
           (C42409 * C42185 + C42410 * C42182 + (C27695 - C27696) * C42186 +
            (C27697 - C27698) * C42183 + C43677 * C42187 + C43678 * C42184) *
               C47369 * C47496 +
           (C43675 * C42185 + C43676 * C42182 + (C27699 - C27700) * C42186 +
            (C27701 - C27702) * C42183 + (C43679 - C43680) * C42187 +
            (C43681 - C43682) * C42184) *
               C47369 * C47477) *
              C47163 * C2440 +
          (((C21367 * C118 - C47108 * C125) * C42185 +
            (C21367 * C128 - C47108 * C139) * C42182 +
            (C25983 - C25984) * C42186 + (C25985 - C25986) * C42183 +
            C42411 * C42187 + C42412 * C42184) *
               C47369 * C47508 +
           ((C25984 - C25983) * C42185 + (C25986 - C25985) * C42182 +
            (C25987 - C25988) * C42186 + (C25989 - C25990) * C42183 +
            C43927 * C42187 + C43928 * C42184) *
               C47369 * C47505 +
           (C42411 * C42185 + C42412 * C42182 + (C28039 - C28040) * C42186 +
            (C28041 - C28042) * C42183 + (C43929 - C43930) * C42187 +
            (C43931 - C43932) * C42184) *
               C47369 * C47496 +
           (C43927 * C42185 + C43928 * C42182 + (C43930 - C43929) * C42186 +
            (C43932 - C43931) * C42183 +
            (C47108 * C12240 - C21367 * C12238) * C42187 +
            (C47108 * C12244 - C21367 * C12242) * C42184) *
               C47369 * C47477) *
              C47163 * C47146)) /
            (p * q * std::sqrt(p + q));
    d2ee[218] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C47108 * C124 - C21367 * C117) * C42185 +
            (C47108 * C138 - C21367 * C127) * C42182 +
            (C25975 - C25976) * C42186 + (C25977 - C25978) * C42183 +
            C42409 * C42187 + C42410 * C42184) *
               C47369 * C47264 +
           ((C25976 - C25975) * C42185 + (C25978 - C25977) * C42182 +
            (C25979 - C25980) * C42186 + (C25981 - C25982) * C42183 +
            C43675 * C42187 + C43676 * C42184) *
               C47369 * C47271 +
           (C42409 * C42185 + C42410 * C42182 + (C27695 - C27696) * C42186 +
            (C27697 - C27698) * C42183 + C43677 * C42187 + C43678 * C42184) *
               C47369 * C3602) *
              C47163 * C47140 +
          (((C21367 * C118 - C47108 * C125) * C42185 +
            (C21367 * C128 - C47108 * C139) * C42182 +
            (C25983 - C25984) * C42186 + (C25985 - C25986) * C42183 +
            C42411 * C42187 + C42412 * C42184) *
               C47369 * C47264 +
           ((C25984 - C25983) * C42185 + (C25986 - C25985) * C42182 +
            (C25987 - C25988) * C42186 + (C25989 - C25990) * C42183 +
            C43927 * C42187 + C43928 * C42184) *
               C47369 * C47271 +
           (C42411 * C42185 + C42412 * C42182 + (C28039 - C28040) * C42186 +
            (C28041 - C28042) * C42183 + (C43929 - C43930) * C42187 +
            (C43931 - C43932) * C42184) *
               C47369 * C3602) *
              C47163 * C47149 +
          (((C47108 * C126 - C21367 * C119) * C42185 +
            (C47108 * C140 - C21367 * C129) * C42182 +
            (C25991 - C25992) * C42186 + (C25993 - C25994) * C42183 +
            C42413 * C42187 + C42414 * C42184) *
               C47369 * C47264 +
           ((C25992 - C25991) * C42185 + (C25994 - C25993) * C42182 +
            (C25995 - C25996) * C42186 + (C25997 - C25998) * C42183 +
            (C42415 - C42416) * C42187 + (C42417 - C42418) * C42184) *
               C47369 * C47271 +
           (C42413 * C42185 + C42414 * C42182 + (C42416 - C42415) * C42186 +
            (C42418 - C42417) * C42183 +
            (C47108 * C1858 - C21367 * C1849) * C42187 +
            (C47108 * C1867 - C21367 * C1861) * C42184) *
               C47369 * C3602) *
              C47163 * C2703)) /
        (p * q * std::sqrt(p + q));
    d2ee[219] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((C47108 * C124 - C21367 * C117) * C42185 +
                     (C47108 * C138 - C21367 * C127) * C42182 +
                     (C25975 - C25976) * C42186 + (C25977 - C25978) * C42183 +
                     C42409 * C42187 + C42410 * C42184) *
                        C47369 * C3094 +
                    ((C25976 - C25975) * C42185 + (C25978 - C25977) * C42182 +
                     (C25979 - C25980) * C42186 + (C25981 - C25982) * C42183 +
                     C43675 * C42187 + C43676 * C42184) *
                        C47369 * C47268) *
                       C47163 * C47506 +
                   (((C21367 * C118 - C47108 * C125) * C42185 +
                     (C21367 * C128 - C47108 * C139) * C42182 +
                     (C25983 - C25984) * C42186 + (C25985 - C25986) * C42183 +
                     C42411 * C42187 + C42412 * C42184) *
                        C47369 * C3094 +
                    ((C25984 - C25983) * C42185 + (C25986 - C25985) * C42182 +
                     (C25987 - C25988) * C42186 + (C25989 - C25990) * C42183 +
                     C43927 * C42187 + C43928 * C42184) *
                        C47369 * C47268) *
                       C47163 * C47499 +
                   (((C47108 * C126 - C21367 * C119) * C42185 +
                     (C47108 * C140 - C21367 * C129) * C42182 +
                     (C25991 - C25992) * C42186 + (C25993 - C25994) * C42183 +
                     C42413 * C42187 + C42414 * C42184) *
                        C47369 * C3094 +
                    ((C25992 - C25991) * C42185 + (C25994 - C25993) * C42182 +
                     (C25995 - C25996) * C42186 + (C25997 - C25998) * C42183 +
                     (C42415 - C42416) * C42187 + (C42417 - C42418) * C42184) *
                        C47369 * C47268) *
                       C47163 * C47486 +
                   (((C21367 * C120 - C47108 * C130) * C42185 +
                     (C21367 * C131 - C47108 * C141) * C42182 +
                     (C26267 - C26268) * C42186 + (C26269 - C26270) * C42183 +
                     (C42615 - C42616) * C42187 + (C42617 - C42618) * C42184) *
                        C47369 * C3094 +
                    ((C26268 - C26267) * C42185 + (C26270 - C26269) * C42182 +
                     (C42616 - C42615) * C42186 + (C42618 - C42617) * C42183 +
                     (C47108 * C2121 - C21367 * C2120) * C42187 +
                     (C47108 * C2123 - C21367 * C2122) * C42184) *
                        C47369 * C47268) *
                       C47163 * C47465)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((((C47108 * C124 - C21367 * C117) * C42185 +
                      (C47108 * C138 - C21367 * C127) * C42182 +
                      (C25975 - C25976) * C42186 + (C25977 - C25978) * C42183 +
                      C42409 * C42187 + C42410 * C42184) *
                         C47369 * C3094 +
                     ((C25976 - C25975) * C42185 + (C25978 - C25977) * C42182 +
                      (C25979 - C25980) * C42186 + (C25981 - C25982) * C42183 +
                      C43675 * C42187 + C43676 * C42184) *
                         C47369 * C47268) *
                        C47500 +
                    (((C21480 - C21479) * C42185 + (C21482 - C21481) * C42182 +
                      C26467 * C42186 + C26468 * C42183 + C26851 * C42187 +
                      C26852 * C42184) *
                         C47369 * C3094 +
                     (C26465 * C42185 + C26466 * C42182 + C26853 * C42186 +
                      C26854 * C42183 + C28173 * C42187 + C28174 * C42184) *
                         C47369 * C47268) *
                        C47488 +
                    ((C21515 * C42185 + C21516 * C42182 + C26855 * C42186 +
                      C26856 * C42183 + C22342 * C42187 + C22343 * C42184) *
                         C47369 * C3094 +
                     (C22322 * C42185 + C22323 * C42182 + C26857 * C42186 +
                      C26858 * C42183 + (C23365 - C23366) * C42187 +
                      (C23367 - C23368) * C42184) *
                         C47369 * C47268) *
                        C47461) *
                       C2440 +
                   ((((C21367 * C118 - C47108 * C125) * C42185 +
                      (C21367 * C128 - C47108 * C139) * C42182 +
                      (C25983 - C25984) * C42186 + (C25985 - C25986) * C42183 +
                      C42411 * C42187 + C42412 * C42184) *
                         C47369 * C3094 +
                     ((C25984 - C25983) * C42185 + (C25986 - C25985) * C42182 +
                      (C25987 - C25988) * C42186 + (C25989 - C25990) * C42183 +
                      C43927 * C42187 + C43928 * C42184) *
                         C47369 * C47268) *
                        C47500 +
                    (((C21492 - C21491) * C42185 + (C21494 - C21493) * C42182 +
                      C26471 * C42186 + C26472 * C42183 + C27901 * C42187 +
                      C27902 * C42184) *
                         C47369 * C3094 +
                     (C26469 * C42185 + C26470 * C42182 + C27903 * C42186 +
                      C27904 * C42183 + (C27905 - C27906) * C42187 +
                      (C27907 - C27908) * C42184) *
                         C47369 * C47268) *
                        C47488 +
                    ((C21517 * C42185 + C21518 * C42182 + C27183 * C42186 +
                      C27184 * C42183 + (C23157 - C23158) * C42187 +
                      (C23159 - C23160) * C42184) *
                         C47369 * C3094 +
                     (C22601 * C42185 + C22602 * C42182 +
                      (C23158 - C23157) * C42186 + (C23160 - C23159) * C42183 +
                      (C47108 * C7170 - C21367 * C7168) * C42187 +
                      (C47108 * C7174 - C21367 * C7172) * C42184) *
                         C47369 * C47268) *
                        C47461) *
                       C47146)) /
                     (p * q * std::sqrt(p + q));
    d2ee[220] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((C47108 * C124 - C21367 * C117) * C42185 +
                     (C47108 * C138 - C21367 * C127) * C42182 +
                     (C25975 - C25976) * C42186 + (C25977 - C25978) * C42183 +
                     C42409 * C42187 + C42410 * C42184) *
                        C47369 * C47181 * C47429 +
                    ((C21480 - C21479) * C42185 + (C21482 - C21481) * C42182 +
                     C26467 * C42186 + C26468 * C42183 + C26851 * C42187 +
                     C26852 * C42184) *
                        C47369 * C47181 * C47226) *
                       C554 +
                   (((C21367 * C118 - C47108 * C125) * C42185 +
                     (C21367 * C128 - C47108 * C139) * C42182 +
                     (C25983 - C25984) * C42186 + (C25985 - C25986) * C42183 +
                     C42411 * C42187 + C42412 * C42184) *
                        C47369 * C47181 * C47429 +
                    ((C21492 - C21491) * C42185 + (C21494 - C21493) * C42182 +
                     C26471 * C42186 + C26472 * C42183 + C27901 * C42187 +
                     C27902 * C42184) *
                        C47369 * C47181 * C47226) *
                       C555 +
                   (((C47108 * C126 - C21367 * C119) * C42185 +
                     (C47108 * C140 - C21367 * C129) * C42182 +
                     (C25991 - C25992) * C42186 + (C25993 - C25994) * C42183 +
                     C42413 * C42187 + C42414 * C42184) *
                        C47369 * C47181 * C47429 +
                    ((C21504 - C21503) * C42185 + (C21506 - C21505) * C42182 +
                     C26475 * C42186 + C26476 * C42183 +
                     (C25999 - C26000) * C42187 + (C26001 - C26002) * C42184) *
                        C47369 * C47181 * C47226) *
                       C556 +
                   (((C21367 * C120 - C47108 * C130) * C42185 +
                     (C21367 * C131 - C47108 * C141) * C42182 +
                     (C26267 - C26268) * C42186 + (C26269 - C26270) * C42183 +
                     (C21367 * C421 - C47108 * C438) * C42187 +
                     (C21367 * C439 - C47108 * C451) * C42184) *
                        C47369 * C47181 * C47429 +
                    ((C21739 - C21738) * C42185 + (C21741 - C21740) * C42182 +
                     (C26134 - C26133) * C42186 + (C26136 - C26135) * C42183 +
                     (C47108 * C2015 - C21367 * C2014) * C42187 +
                     (C47108 * C2017 - C21367 * C2016) * C42184) *
                        C47369 * C47181 * C47226) *
                       C47465)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((C47108 * C124 - C21367 * C117) * C42185 +
                     (C47108 * C138 - C21367 * C127) * C42182 +
                     (C25975 - C25976) * C42186 + (C25977 - C25978) * C42183 +
                     C42409 * C42187 + C42410 * C42184) *
                        C47369 * C47181 * C1284 +
                    ((C21480 - C21479) * C42185 + (C21482 - C21481) * C42182 +
                     C26467 * C42186 + C26468 * C42183 + C26851 * C42187 +
                     C26852 * C42184) *
                        C47369 * C47181 * C1285 +
                    (C21515 * C42185 + C21516 * C42182 + C26855 * C42186 +
                     C26856 * C42183 + C22342 * C42187 + C22343 * C42184) *
                        C47369 * C47181 * C1286 +
                    (C22190 * C42185 + C22191 * C42182 + C27315 * C42186 +
                     C27316 * C42183 + (C22336 - C22337) * C42187 +
                     (C22338 - C22339) * C42184) *
                        C47369 * C47181 * C47471) *
                       C47415 +
                   (((C21367 * C118 - C47108 * C125) * C42185 +
                     (C21367 * C128 - C47108 * C139) * C42182 +
                     (C25983 - C25984) * C42186 + (C25985 - C25986) * C42183 +
                     C42411 * C42187 + C42412 * C42184) *
                        C47369 * C47181 * C1284 +
                    ((C21492 - C21491) * C42185 + (C21494 - C21493) * C42182 +
                     C26471 * C42186 + C26472 * C42183 + C27901 * C42187 +
                     C27902 * C42184) *
                        C47369 * C47181 * C1285 +
                    (C21517 * C42185 + C21518 * C42182 + C27183 * C42186 +
                     C27184 * C42183 + (C23157 - C23158) * C42187 +
                     (C23159 - C23160) * C42184) *
                        C47369 * C47181 * C1286 +
                    (C22446 * C42185 + C22447 * C42182 +
                     (C22604 - C22603) * C42186 + (C22606 - C22605) * C42183 +
                     (C47108 * C5808 - C21367 * C5806) * C42187 +
                     (C47108 * C5812 - C21367 * C5810) * C42184) *
                        C47369 * C47181 * C47471) *
                       C47146)) /
                     (p * q * std::sqrt(p + q));
    d2ee[221] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((((C47108 * C124 - C21367 * C117) * C42185 +
                      (C47108 * C138 - C21367 * C127) * C42182 +
                      (C25975 - C25976) * C42186 + (C25977 - C25978) * C42183 +
                      C42409 * C42187 + C42410 * C42184) *
                         C47369 * C47430 +
                     ((C25976 - C25975) * C42185 + (C25978 - C25977) * C42182 +
                      (C25979 - C25980) * C42186 + (C25981 - C25982) * C42183 +
                      (C27696 - C27695) * C42187 + (C27698 - C27697) * C42184) *
                         C47369 * C47268) *
                        C47429 +
                    (((C21480 - C21479) * C42185 + (C21482 - C21481) * C42182 +
                      C26467 * C42186 + C26468 * C42183 + C26851 * C42187 +
                      C26852 * C42184) *
                         C47369 * C47430 +
                     (C26465 * C42185 + C26466 * C42182 + C26853 * C42186 +
                      C26854 * C42183 + C28173 * C42187 + C28174 * C42184) *
                         C47369 * C47268) *
                        C47226) *
                       C258 +
                   ((((C21367 * C118 - C47108 * C125) * C42185 +
                      (C21367 * C128 - C47108 * C139) * C42182 +
                      (C25983 - C25984) * C42186 + (C25985 - C25986) * C42183 +
                      C42411 * C42187 + C42412 * C42184) *
                         C47369 * C47430 +
                     ((C25984 - C25983) * C42185 + (C25986 - C25985) * C42182 +
                      (C25987 - C25988) * C42186 + (C25989 - C25990) * C42183 +
                      (C28040 - C28039) * C42187 + (C28042 - C28041) * C42184) *
                         C47369 * C47268) *
                        C47429 +
                    (((C21492 - C21491) * C42185 + (C21494 - C21493) * C42182 +
                      C26471 * C42186 + C26472 * C42183 + C27901 * C42187 +
                      C27902 * C42184) *
                         C47369 * C47430 +
                     (C26469 * C42185 + C26470 * C42182 + C27903 * C42186 +
                      C27904 * C42183 + (C27905 - C27906) * C42187 +
                      (C27907 - C27908) * C42184) *
                         C47369 * C47268) *
                        C47226) *
                       C259 +
                   ((((C47108 * C126 - C21367 * C119) * C42185 +
                      (C47108 * C140 - C21367 * C129) * C42182 +
                      (C25991 - C25992) * C42186 + (C25993 - C25994) * C42183 +
                      C42413 * C42187 + C42414 * C42184) *
                         C47369 * C47430 +
                     ((C25992 - C25991) * C42185 + (C25994 - C25993) * C42182 +
                      (C25995 - C25996) * C42186 + (C25997 - C25998) * C42183 +
                      (C42415 - C42416) * C42187 + (C42417 - C42418) * C42184) *
                         C47369 * C47268) *
                        C47429 +
                    (((C21504 - C21503) * C42185 + (C21506 - C21505) * C42182 +
                      C26475 * C42186 + C26476 * C42183 +
                      (C25999 - C26000) * C42187 + (C26001 - C26002) * C42184) *
                         C47369 * C47430 +
                     (C26473 * C42185 + C26474 * C42182 +
                      (C26000 - C25999) * C42186 + (C26002 - C26001) * C42183 +
                      (C47108 * C2227 - C21367 * C2224) * C42187 +
                      (C47108 * C2233 - C21367 * C2230) * C42184) *
                         C47369 * C47268) *
                        C47226) *
                       C47455)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((C47108 * C124 - C21367 * C117) * C42185 +
                     (C47108 * C138 - C21367 * C127) * C42182 +
                     (C25975 - C25976) * C42186 + (C25977 - C25978) * C42183 +
                     C42409 * C42187 + C42410 * C42184) *
                        C47369 * C47430 +
                    ((C25976 - C25975) * C42185 + (C25978 - C25977) * C42182 +
                     (C25979 - C25980) * C42186 + (C25981 - C25982) * C42183 +
                     (C27696 - C27695) * C42187 + (C27698 - C27697) * C42184) *
                        C47369 * C47268) *
                       C1284 +
                   (((C21480 - C21479) * C42185 + (C21482 - C21481) * C42182 +
                     C26467 * C42186 + C26468 * C42183 + C26851 * C42187 +
                     C26852 * C42184) *
                        C47369 * C47430 +
                    (C26465 * C42185 + C26466 * C42182 + C26853 * C42186 +
                     C26854 * C42183 + C28173 * C42187 + C28174 * C42184) *
                        C47369 * C47268) *
                       C1285 +
                   ((C21515 * C42185 + C21516 * C42182 + C26855 * C42186 +
                     C26856 * C42183 + C22342 * C42187 + C22343 * C42184) *
                        C47369 * C47430 +
                    (C22322 * C42185 + C22323 * C42182 + C26857 * C42186 +
                     C26858 * C42183 + (C23365 - C23366) * C42187 +
                     (C23367 - C23368) * C42184) *
                        C47369 * C47268) *
                       C1286 +
                   ((C22190 * C42185 + C22191 * C42182 + C27315 * C42186 +
                     C27316 * C42183 + (C22336 - C22337) * C42187 +
                     (C22338 - C22339) * C42184) *
                        C47369 * C47430 +
                    (C22712 * C42185 + C22713 * C42182 +
                     (C22337 - C22336) * C42186 + (C22339 - C22338) * C42183 +
                     (C47108 * C23357 - C21367 * C23356) * C42187 +
                     (C47108 * C23359 - C21367 * C23358) * C42184) *
                        C47369 * C47268) *
                       C47471) *
                  C47135) /
                     (p * q * std::sqrt(p + q));
    d2ee[222] += (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  ((((C47108 * C124 - C21367 * C117) * C42185 +
                     (C47108 * C138 - C21367 * C127) * C42182 +
                     (C25975 - C25976) * C42186 + (C25977 - C25978) * C42183 +
                     (C25980 - C25979) * C42187 + (C25982 - C25981) * C42184) *
                        C47369 * C47181 * C47500 +
                    ((C21480 - C21479) * C42185 + (C21482 - C21481) * C42182 +
                     C26467 * C42186 + C26468 * C42183 + C26851 * C42187 +
                     C26852 * C42184) *
                        C47369 * C47181 * C47488 +
                    (C21515 * C42185 + C21516 * C42182 + C26855 * C42186 +
                     C26856 * C42183 + C22342 * C42187 + C22343 * C42184) *
                        C47369 * C47181 * C47461) *
                       C258 +
                   (((C21367 * C118 - C47108 * C125) * C42185 +
                     (C21367 * C128 - C47108 * C139) * C42182 +
                     (C25983 - C25984) * C42186 + (C25985 - C25986) * C42183 +
                     (C25988 - C25987) * C42187 + (C25990 - C25989) * C42184) *
                        C47369 * C47181 * C47500 +
                    ((C21492 - C21491) * C42185 + (C21494 - C21493) * C42182 +
                     C26471 * C42186 + C26472 * C42183 + C27901 * C42187 +
                     C27902 * C42184) *
                        C47369 * C47181 * C47488 +
                    (C21517 * C42185 + C21518 * C42182 + C27183 * C42186 +
                     C27184 * C42183 + (C23157 - C23158) * C42187 +
                     (C23159 - C23160) * C42184) *
                        C47369 * C47181 * C47461) *
                       C259 +
                   (((C47108 * C126 - C21367 * C119) * C42185 +
                     (C47108 * C140 - C21367 * C129) * C42182 +
                     (C25991 - C25992) * C42186 + (C25993 - C25994) * C42183 +
                     (C25996 - C25995) * C42187 + (C25998 - C25997) * C42184) *
                        C47369 * C47181 * C47500 +
                    ((C21504 - C21503) * C42185 + (C21506 - C21505) * C42182 +
                     C26475 * C42186 + C26476 * C42183 +
                     (C25999 - C26000) * C42187 + (C26001 - C26002) * C42184) *
                        C47369 * C47181 * C47488 +
                    (C21519 * C42185 + C21520 * C42182 +
                     (C22011 - C22010) * C42186 + (C22013 - C22012) * C42183 +
                     (C47108 * C1173 - C21367 * C1158) * C42187 +
                     (C47108 * C1185 - C21367 * C1176) * C42184) *
                        C47369 * C47181 * C47461) *
                       C47455)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  (((C47108 * C124 - C21367 * C117) * C42185 +
                    (C47108 * C138 - C21367 * C127) * C42182 +
                    (C25975 - C25976) * C42186 + (C25977 - C25978) * C42183 +
                    (C25980 - C25979) * C42187 + (C25982 - C25981) * C42184) *
                       C47369 * C47181 * C47163 * C108 +
                   ((C21367 * C118 - C47108 * C125) * C42185 +
                    (C21367 * C128 - C47108 * C139) * C42182 +
                    (C25983 - C25984) * C42186 + (C25985 - C25986) * C42183 +
                    (C25988 - C25987) * C42187 + (C25990 - C25989) * C42184) *
                       C47369 * C47181 * C47163 * C109 +
                   ((C47108 * C126 - C21367 * C119) * C42185 +
                    (C47108 * C140 - C21367 * C129) * C42182 +
                    (C25991 - C25992) * C42186 + (C25993 - C25994) * C42183 +
                    (C25996 - C25995) * C42187 + (C25998 - C25997) * C42184) *
                       C47369 * C47181 * C47163 * C110 +
                   ((C21367 * C120 - C47108 * C130) * C42185 +
                    (C21367 * C131 - C47108 * C141) * C42182 +
                    (C26267 - C26268) * C42186 + (C26269 - C26270) * C42183 +
                    (C21367 * C421 - C47108 * C438) * C42187 +
                    (C21367 * C439 - C47108 * C451) * C42184) *
                       C47369 * C47181 * C47163 * C111 +
                   ((C47108 * C132 - C21367 * C121) * C42185 +
                    (C47108 * C142 - C21367 * C133) * C42182 +
                    (C47108 * C440 - C21367 * C422) * C42186 +
                    (C47108 * C452 - C21367 * C441) * C42183 +
                    (C47108 * C442 - C21367 * C423) * C42187 +
                    (C47108 * C453 - C21367 * C443) * C42184) *
                       C47369 * C47181 * C47163 * C112)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C47108 * C124 - C21367 * C117) * C42185 +
                     (C47108 * C138 - C21367 * C127) * C42182 +
                     (C25975 - C25976) * C42186 + (C25977 - C25978) * C42183 +
                     C42409 * C42187 + C42410 * C42184) *
                        C47369 * C47501 +
                    ((C25976 - C25975) * C42185 + (C25978 - C25977) * C42182 +
                     (C25979 - C25980) * C42186 + (C25981 - C25982) * C42183 +
                     (C27696 - C27695) * C42187 + (C27698 - C27697) * C42184) *
                        C47369 * C47490 +
                    (C42409 * C42185 + C42410 * C42182 +
                     (C27695 - C27696) * C42186 + (C27697 - C27698) * C42183 +
                     (C27700 - C27699) * C42187 + (C27702 - C27701) * C42184) *
                        C47369 * C47464) *
                       C47163 * C258 +
                   (((C21367 * C118 - C47108 * C125) * C42185 +
                     (C21367 * C128 - C47108 * C139) * C42182 +
                     (C25983 - C25984) * C42186 + (C25985 - C25986) * C42183 +
                     C42411 * C42187 + C42412 * C42184) *
                        C47369 * C47501 +
                    ((C25984 - C25983) * C42185 + (C25986 - C25985) * C42182 +
                     (C25987 - C25988) * C42186 + (C25989 - C25990) * C42183 +
                     (C28040 - C28039) * C42187 + (C28042 - C28041) * C42184) *
                        C47369 * C47490 +
                    (C42411 * C42185 + C42412 * C42182 +
                     (C28039 - C28040) * C42186 + (C28041 - C28042) * C42183 +
                     (C21367 * C1848 - C47108 * C1857) * C42187 +
                     (C21367 * C1860 - C47108 * C1866) * C42184) *
                        C47369 * C47464) *
                       C47163 * C259 +
                   (((C47108 * C126 - C21367 * C119) * C42185 +
                     (C47108 * C140 - C21367 * C129) * C42182 +
                     (C25991 - C25992) * C42186 + (C25993 - C25994) * C42183 +
                     C42413 * C42187 + C42414 * C42184) *
                        C47369 * C47501 +
                    ((C25992 - C25991) * C42185 + (C25994 - C25993) * C42182 +
                     (C25995 - C25996) * C42186 + (C25997 - C25998) * C42183 +
                     (C42415 - C42416) * C42187 + (C42417 - C42418) * C42184) *
                        C47369 * C47490 +
                    (C42413 * C42185 + C42414 * C42182 +
                     (C42416 - C42415) * C42186 + (C42418 - C42417) * C42183 +
                     (C47108 * C1858 - C21367 * C1849) * C42187 +
                     (C47108 * C1867 - C21367 * C1861) * C42184) *
                        C47369 * C47464) *
                       C47163 * C47455)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  ((((C47108 * C124 - C21367 * C117) * C42185 +
                     (C47108 * C138 - C21367 * C127) * C42182 +
                     (C25975 - C25976) * C42186 + (C25977 - C25978) * C42183 +
                     C42409 * C42187 + C42410 * C42184) *
                        C47369 * C47181 * C942 +
                    ((C21480 - C21479) * C42185 + (C21482 - C21481) * C42182 +
                     C26467 * C42186 + C26468 * C42183 + C26851 * C42187 +
                     C26852 * C42184) *
                        C47369 * C47181 * C943 +
                    (C21515 * C42185 + C21516 * C42182 + C26855 * C42186 +
                     C26856 * C42183 + C22342 * C42187 + C22343 * C42184) *
                        C47369 * C47181 * C47461) *
                       C47497 +
                   (((C21367 * C118 - C47108 * C125) * C42185 +
                     (C21367 * C128 - C47108 * C139) * C42182 +
                     (C25983 - C25984) * C42186 + (C25985 - C25986) * C42183 +
                     C42411 * C42187 + C42412 * C42184) *
                        C47369 * C47181 * C942 +
                    ((C21492 - C21491) * C42185 + (C21494 - C21493) * C42182 +
                     C26471 * C42186 + C26472 * C42183 + C27901 * C42187 +
                     C27902 * C42184) *
                        C47369 * C47181 * C943 +
                    (C21517 * C42185 + C21518 * C42182 + C27183 * C42186 +
                     C27184 * C42183 + (C23157 - C23158) * C42187 +
                     (C23159 - C23160) * C42184) *
                        C47369 * C47181 * C47461) *
                       C47484 +
                   (((C47108 * C126 - C21367 * C119) * C42185 +
                     (C47108 * C140 - C21367 * C129) * C42182 +
                     (C25991 - C25992) * C42186 + (C25993 - C25994) * C42183 +
                     C42413 * C42187 + C42414 * C42184) *
                        C47369 * C47181 * C942 +
                    ((C21504 - C21503) * C42185 + (C21506 - C21505) * C42182 +
                     C26475 * C42186 + C26476 * C42183 +
                     (C25999 - C26000) * C42187 + (C26001 - C26002) * C42184) *
                        C47369 * C47181 * C943 +
                    (C21519 * C42185 + C21520 * C42182 +
                     (C22011 - C22010) * C42186 + (C22013 - C22012) * C42183 +
                     (C47108 * C1173 - C21367 * C1158) * C42187 +
                     (C47108 * C1185 - C21367 * C1176) * C42184) *
                        C47369 * C47181 * C47461) *
                       C47455)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  (((C47108 * C124 - C21367 * C117) * C42185 +
                    (C47108 * C138 - C21367 * C127) * C42182 +
                    (C25975 - C25976) * C42186 + (C25977 - C25978) * C42183 +
                    C42409 * C42187 + C42410 * C42184) *
                       C47369 * C47181 * C1010 +
                   ((C21480 - C21479) * C42185 + (C21482 - C21481) * C42182 +
                    C26467 * C42186 + C26468 * C42183 + C26851 * C42187 +
                    C26852 * C42184) *
                       C47369 * C47181 * C1011 +
                   (C21515 * C42185 + C21516 * C42182 + C26855 * C42186 +
                    C26856 * C42183 + C22342 * C42187 + C22343 * C42184) *
                       C47369 * C47181 * C1012 +
                   (C22190 * C42185 + C22191 * C42182 + C27315 * C42186 +
                    C27316 * C42183 + (C22336 - C22337) * C42187 +
                    (C22338 - C22339) * C42184) *
                       C47369 * C47181 * C1013 +
                   (C22202 * C42185 + C22203 * C42182 +
                    (C22715 - C22714) * C42186 + (C22717 - C22716) * C42183 +
                    (C47108 * C22318 - C21367 * C22317) * C42187 +
                    (C47108 * C22320 - C21367 * C22319) * C42184) *
                       C47369 * C47181 * C1014) *
                  C47135) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C47108 * C124 - C21367 * C117) * C42185 +
                     (C47108 * C138 - C21367 * C127) * C42182 +
                     (C25975 - C25976) * C42186 + (C25977 - C25978) * C42183 +
                     C42409 * C42187 + C42410 * C42184) *
                        C47369 * C47501 +
                    ((C25976 - C25975) * C42185 + (C25978 - C25977) * C42182 +
                     (C25979 - C25980) * C42186 + (C25981 - C25982) * C42183 +
                     (C27696 - C27695) * C42187 + (C27698 - C27697) * C42184) *
                        C47369 * C47490 +
                    (C42409 * C42185 + C42410 * C42182 +
                     (C27695 - C27696) * C42186 + (C27697 - C27698) * C42183 +
                     (C27700 - C27699) * C42187 + (C27702 - C27701) * C42184) *
                        C47369 * C47464) *
                       C942 +
                   (((C21480 - C21479) * C42185 + (C21482 - C21481) * C42182 +
                     C26467 * C42186 + C26468 * C42183 + C26851 * C42187 +
                     C26852 * C42184) *
                        C47369 * C47501 +
                    (C26465 * C42185 + C26466 * C42182 + C26853 * C42186 +
                     C26854 * C42183 + C28173 * C42187 + C28174 * C42184) *
                        C47369 * C47490 +
                    (C26851 * C42185 + C26852 * C42182 + C28175 * C42186 +
                     C28176 * C42183 + (C27703 - C27704) * C42187 +
                     (C27705 - C27706) * C42184) *
                        C47369 * C47464) *
                       C943 +
                   ((C21515 * C42185 + C21516 * C42182 + C26855 * C42186 +
                     C26856 * C42183 + C22342 * C42187 + C22343 * C42184) *
                        C47369 * C47501 +
                    (C22322 * C42185 + C22323 * C42182 + C26857 * C42186 +
                     C26858 * C42183 + (C23365 - C23366) * C42187 +
                     (C23367 - C23368) * C42184) *
                        C47369 * C47490 +
                    (C22342 * C42185 + C22343 * C42182 +
                     (C23366 - C23365) * C42186 + (C23368 - C23367) * C42183 +
                     (C47108 * C23003 - C21367 * C23002) * C42187 +
                     (C47108 * C23005 - C21367 * C23004) * C42184) *
                        C47369 * C47464) *
                       C47461) *
                  C47135) /
                     (p * q * std::sqrt(p + q));
    d2ee[223] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((C47108 * C124 - C21367 * C117) * C42185 +
                     (C47108 * C138 - C21367 * C127) * C42182 +
                     (C25975 - C25976) * C42186 + (C25977 - C25978) * C42183 +
                     C42409 * C42187 + C42410 * C42184) *
                        C47369 * C47430 +
                    ((C25976 - C25975) * C42185 + (C25978 - C25977) * C42182 +
                     (C25979 - C25980) * C42186 + (C25981 - C25982) * C42183 +
                     (C27696 - C27695) * C42187 + (C27698 - C27697) * C42184) *
                        C47369 * C47268) *
                       C47163 * C554 +
                   (((C21367 * C118 - C47108 * C125) * C42185 +
                     (C21367 * C128 - C47108 * C139) * C42182 +
                     (C25983 - C25984) * C42186 + (C25985 - C25986) * C42183 +
                     C42411 * C42187 + C42412 * C42184) *
                        C47369 * C47430 +
                    ((C25984 - C25983) * C42185 + (C25986 - C25985) * C42182 +
                     (C25987 - C25988) * C42186 + (C25989 - C25990) * C42183 +
                     (C28040 - C28039) * C42187 + (C28042 - C28041) * C42184) *
                        C47369 * C47268) *
                       C47163 * C555 +
                   (((C47108 * C126 - C21367 * C119) * C42185 +
                     (C47108 * C140 - C21367 * C129) * C42182 +
                     (C25991 - C25992) * C42186 + (C25993 - C25994) * C42183 +
                     C42413 * C42187 + C42414 * C42184) *
                        C47369 * C47430 +
                    ((C25992 - C25991) * C42185 + (C25994 - C25993) * C42182 +
                     (C25995 - C25996) * C42186 + (C25997 - C25998) * C42183 +
                     (C42415 - C42416) * C42187 + (C42417 - C42418) * C42184) *
                        C47369 * C47268) *
                       C47163 * C556 +
                   (((C21367 * C120 - C47108 * C130) * C42185 +
                     (C21367 * C131 - C47108 * C141) * C42182 +
                     (C26267 - C26268) * C42186 + (C26269 - C26270) * C42183 +
                     (C42615 - C42616) * C42187 + (C42617 - C42618) * C42184) *
                        C47369 * C47430 +
                    ((C26268 - C26267) * C42185 + (C26270 - C26269) * C42182 +
                     (C42616 - C42615) * C42186 + (C42618 - C42617) * C42183 +
                     (C47108 * C2121 - C21367 * C2120) * C42187 +
                     (C47108 * C2123 - C21367 * C2122) * C42184) *
                        C47369 * C47268) *
                       C47163 * C47465)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((((C47108 * C124 - C21367 * C117) * C42185 +
                      (C47108 * C138 - C21367 * C127) * C42182 +
                      (C25975 - C25976) * C42186 + (C25977 - C25978) * C42183 +
                      C42409 * C42187 + C42410 * C42184) *
                         C47369 * C47430 +
                     ((C25976 - C25975) * C42185 + (C25978 - C25977) * C42182 +
                      (C25979 - C25980) * C42186 + (C25981 - C25982) * C42183 +
                      (C27696 - C27695) * C42187 + (C27698 - C27697) * C42184) *
                         C47369 * C47268) *
                        C942 +
                    (((C21480 - C21479) * C42185 + (C21482 - C21481) * C42182 +
                      C26467 * C42186 + C26468 * C42183 + C26851 * C42187 +
                      C26852 * C42184) *
                         C47369 * C47430 +
                     (C26465 * C42185 + C26466 * C42182 + C26853 * C42186 +
                      C26854 * C42183 + C28173 * C42187 + C28174 * C42184) *
                         C47369 * C47268) *
                        C943 +
                    ((C21515 * C42185 + C21516 * C42182 + C26855 * C42186 +
                      C26856 * C42183 + C22342 * C42187 + C22343 * C42184) *
                         C47369 * C47430 +
                     (C22322 * C42185 + C22323 * C42182 + C26857 * C42186 +
                      C26858 * C42183 + (C23365 - C23366) * C42187 +
                      (C23367 - C23368) * C42184) *
                         C47369 * C47268) *
                        C47461) *
                       C47415 +
                   ((((C21367 * C118 - C47108 * C125) * C42185 +
                      (C21367 * C128 - C47108 * C139) * C42182 +
                      (C25983 - C25984) * C42186 + (C25985 - C25986) * C42183 +
                      C42411 * C42187 + C42412 * C42184) *
                         C47369 * C47430 +
                     ((C25984 - C25983) * C42185 + (C25986 - C25985) * C42182 +
                      (C25987 - C25988) * C42186 + (C25989 - C25990) * C42183 +
                      (C28040 - C28039) * C42187 + (C28042 - C28041) * C42184) *
                         C47369 * C47268) *
                        C942 +
                    (((C21492 - C21491) * C42185 + (C21494 - C21493) * C42182 +
                      C26471 * C42186 + C26472 * C42183 + C27901 * C42187 +
                      C27902 * C42184) *
                         C47369 * C47430 +
                     (C26469 * C42185 + C26470 * C42182 + C27903 * C42186 +
                      C27904 * C42183 + (C27905 - C27906) * C42187 +
                      (C27907 - C27908) * C42184) *
                         C47369 * C47268) *
                        C943 +
                    ((C21517 * C42185 + C21518 * C42182 + C27183 * C42186 +
                      C27184 * C42183 + (C23157 - C23158) * C42187 +
                      (C23159 - C23160) * C42184) *
                         C47369 * C47430 +
                     (C22601 * C42185 + C22602 * C42182 +
                      (C23158 - C23157) * C42186 + (C23160 - C23159) * C42183 +
                      (C47108 * C7170 - C21367 * C7168) * C42187 +
                      (C47108 * C7174 - C21367 * C7172) * C42184) *
                         C47369 * C47268) *
                        C47461) *
                       C47146)) /
                     (p * q * std::sqrt(p + q));
    d2ee[224] += (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  (((C47108 * C124 - C21367 * C117) * C42185 +
                    (C47108 * C138 - C21367 * C127) * C42182 +
                    (C25975 - C25976) * C42186 + (C25977 - C25978) * C42183 +
                    (C25980 - C25979) * C42187 + (C25982 - C25981) * C42184) *
                       C47369 * C47181 * C47163 * C108 +
                   ((C21367 * C118 - C47108 * C125) * C42185 +
                    (C21367 * C128 - C47108 * C139) * C42182 +
                    (C25983 - C25984) * C42186 + (C25985 - C25986) * C42183 +
                    (C25988 - C25987) * C42187 + (C25990 - C25989) * C42184) *
                       C47369 * C47181 * C47163 * C109 +
                   ((C47108 * C126 - C21367 * C119) * C42185 +
                    (C47108 * C140 - C21367 * C129) * C42182 +
                    (C25991 - C25992) * C42186 + (C25993 - C25994) * C42183 +
                    (C25996 - C25995) * C42187 + (C25998 - C25997) * C42184) *
                       C47369 * C47181 * C47163 * C110 +
                   ((C21367 * C120 - C47108 * C130) * C42185 +
                    (C21367 * C131 - C47108 * C141) * C42182 +
                    (C26267 - C26268) * C42186 + (C26269 - C26270) * C42183 +
                    (C21367 * C421 - C47108 * C438) * C42187 +
                    (C21367 * C439 - C47108 * C451) * C42184) *
                       C47369 * C47181 * C47163 * C111 +
                   ((C47108 * C132 - C21367 * C121) * C42185 +
                    (C47108 * C142 - C21367 * C133) * C42182 +
                    (C47108 * C440 - C21367 * C422) * C42186 +
                    (C47108 * C452 - C21367 * C441) * C42183 +
                    (C47108 * C442 - C21367 * C423) * C42187 +
                    (C47108 * C453 - C21367 * C443) * C42184) *
                       C47369 * C47181 * C47163 * C112)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  ((((C47108 * C124 - C21367 * C117) * C42185 +
                     (C47108 * C138 - C21367 * C127) * C42182 +
                     (C25975 - C25976) * C42186 + (C25977 - C25978) * C42183 +
                     (C25980 - C25979) * C42187 + (C25982 - C25981) * C42184) *
                        C47369 * C47181 * C47500 +
                    ((C21480 - C21479) * C42185 + (C21482 - C21481) * C42182 +
                     C26467 * C42186 + C26468 * C42183 + C26851 * C42187 +
                     C26852 * C42184) *
                        C47369 * C47181 * C47488 +
                    (C21515 * C42185 + C21516 * C42182 + C26855 * C42186 +
                     C26856 * C42183 + C22342 * C42187 + C22343 * C42184) *
                        C47369 * C47181 * C47461) *
                       C258 +
                   (((C21367 * C118 - C47108 * C125) * C42185 +
                     (C21367 * C128 - C47108 * C139) * C42182 +
                     (C25983 - C25984) * C42186 + (C25985 - C25986) * C42183 +
                     (C25988 - C25987) * C42187 + (C25990 - C25989) * C42184) *
                        C47369 * C47181 * C47500 +
                    ((C21492 - C21491) * C42185 + (C21494 - C21493) * C42182 +
                     C26471 * C42186 + C26472 * C42183 + C27901 * C42187 +
                     C27902 * C42184) *
                        C47369 * C47181 * C47488 +
                    (C21517 * C42185 + C21518 * C42182 + C27183 * C42186 +
                     C27184 * C42183 + (C23157 - C23158) * C42187 +
                     (C23159 - C23160) * C42184) *
                        C47369 * C47181 * C47461) *
                       C259 +
                   (((C47108 * C126 - C21367 * C119) * C42185 +
                     (C47108 * C140 - C21367 * C129) * C42182 +
                     (C25991 - C25992) * C42186 + (C25993 - C25994) * C42183 +
                     (C25996 - C25995) * C42187 + (C25998 - C25997) * C42184) *
                        C47369 * C47181 * C47500 +
                    ((C21504 - C21503) * C42185 + (C21506 - C21505) * C42182 +
                     C26475 * C42186 + C26476 * C42183 +
                     (C25999 - C26000) * C42187 + (C26001 - C26002) * C42184) *
                        C47369 * C47181 * C47488 +
                    (C21519 * C42185 + C21520 * C42182 +
                     (C22011 - C22010) * C42186 + (C22013 - C22012) * C42183 +
                     (C47108 * C1173 - C21367 * C1158) * C42187 +
                     (C47108 * C1185 - C21367 * C1176) * C42184) *
                        C47369 * C47181 * C47461) *
                       C47455)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  ((((C47108 * C124 - C21367 * C117) * C42185 +
                     (C47108 * C138 - C21367 * C127) * C42182 +
                     (C25975 - C25976) * C42186 + (C25977 - C25978) * C42183 +
                     C42409 * C42187 + C42410 * C42184) *
                        C47369 * C47181 * C942 +
                    ((C21480 - C21479) * C42185 + (C21482 - C21481) * C42182 +
                     C26467 * C42186 + C26468 * C42183 + C26851 * C42187 +
                     C26852 * C42184) *
                        C47369 * C47181 * C943 +
                    (C21515 * C42185 + C21516 * C42182 + C26855 * C42186 +
                     C26856 * C42183 + C22342 * C42187 + C22343 * C42184) *
                        C47369 * C47181 * C47461) *
                       C47497 +
                   (((C21367 * C118 - C47108 * C125) * C42185 +
                     (C21367 * C128 - C47108 * C139) * C42182 +
                     (C25983 - C25984) * C42186 + (C25985 - C25986) * C42183 +
                     C42411 * C42187 + C42412 * C42184) *
                        C47369 * C47181 * C942 +
                    ((C21492 - C21491) * C42185 + (C21494 - C21493) * C42182 +
                     C26471 * C42186 + C26472 * C42183 + C27901 * C42187 +
                     C27902 * C42184) *
                        C47369 * C47181 * C943 +
                    (C21517 * C42185 + C21518 * C42182 + C27183 * C42186 +
                     C27184 * C42183 + (C23157 - C23158) * C42187 +
                     (C23159 - C23160) * C42184) *
                        C47369 * C47181 * C47461) *
                       C47484 +
                   (((C47108 * C126 - C21367 * C119) * C42185 +
                     (C47108 * C140 - C21367 * C129) * C42182 +
                     (C25991 - C25992) * C42186 + (C25993 - C25994) * C42183 +
                     C42413 * C42187 + C42414 * C42184) *
                        C47369 * C47181 * C942 +
                    ((C21504 - C21503) * C42185 + (C21506 - C21505) * C42182 +
                     C26475 * C42186 + C26476 * C42183 +
                     (C25999 - C26000) * C42187 + (C26001 - C26002) * C42184) *
                        C47369 * C47181 * C943 +
                    (C21519 * C42185 + C21520 * C42182 +
                     (C22011 - C22010) * C42186 + (C22013 - C22012) * C42183 +
                     (C47108 * C1173 - C21367 * C1158) * C42187 +
                     (C47108 * C1185 - C21367 * C1176) * C42184) *
                        C47369 * C47181 * C47461) *
                       C47455)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  (((C47108 * C124 - C21367 * C117) * C42185 +
                    (C47108 * C138 - C21367 * C127) * C42182 +
                    (C25975 - C25976) * C42186 + (C25977 - C25978) * C42183 +
                    C42409 * C42187 + C42410 * C42184) *
                       C47369 * C47181 * C1010 +
                   ((C21480 - C21479) * C42185 + (C21482 - C21481) * C42182 +
                    C26467 * C42186 + C26468 * C42183 + C26851 * C42187 +
                    C26852 * C42184) *
                       C47369 * C47181 * C1011 +
                   (C21515 * C42185 + C21516 * C42182 + C26855 * C42186 +
                    C26856 * C42183 + C22342 * C42187 + C22343 * C42184) *
                       C47369 * C47181 * C1012 +
                   (C22190 * C42185 + C22191 * C42182 + C27315 * C42186 +
                    C27316 * C42183 + (C22336 - C22337) * C42187 +
                    (C22338 - C22339) * C42184) *
                       C47369 * C47181 * C1013 +
                   (C22202 * C42185 + C22203 * C42182 +
                    (C22715 - C22714) * C42186 + (C22717 - C22716) * C42183 +
                    (C47108 * C22318 - C21367 * C22317) * C42187 +
                    (C47108 * C22320 - C21367 * C22319) * C42184) *
                       C47369 * C47181 * C1014) *
                  C47135) /
                     (p * q * std::sqrt(p + q));
}
